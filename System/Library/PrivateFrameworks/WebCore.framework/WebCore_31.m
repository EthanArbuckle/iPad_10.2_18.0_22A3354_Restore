char *WTF::Vector<WebCore::InspectorFrontendHost::ContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  unsigned int v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1 > a3
    || (v6 = (WTF::StringImpl *)((char *)v5 + 56 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v16 = a2;
    if (v16 > v14)
    {
      if (v16 >= 0x4924925)
      {
        __break(0xC471u);
        JUMPOUT(0x194CE8BF8);
      }
      v17 = (WTF::StringImpl *)((char *)v5 + 56 * *(unsigned int *)(a1 + 12));
      v18 = 56 * v16;
      v19 = WTF::fastMalloc((WTF *)(56 * v16));
      *(_DWORD *)(a1 + 8) = v18 / 0x38;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::InspectorFrontendHost::ContextMenuItem>::move(v5, v17, v19);
      if (v5)
      {
        if (*(WTF::StringImpl **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v9 = a2;
    if (v9 <= v7)
    {
      v13 = *(WTF::StringImpl **)a1;
    }
    else
    {
      if (v9 >= 0x4924925)
      {
        __break(0xC471u);
        JUMPOUT(0x194CE8C00);
      }
      v10 = 56 * v9;
      v11 = WTF::fastMalloc((WTF *)(56 * v9));
      *(_DWORD *)(a1 + 8) = v10 / 0x38;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::InspectorFrontendHost::ContextMenuItem>::move(v5, v6, v11);
      v13 = *(WTF::StringImpl **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF::StringImpl **)a1;
      }
    }
    return (char *)v13 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
  }
  return (char *)v3;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::InspectorFrontendHost::ContextMenuItem>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  WTF *v17;
  WTF::StringImpl *v18;

  if (result != a2)
  {
    v5 = result;
    v6 = 0;
    do
    {
      v7 = a3 + v6;
      v8 = (char *)v5 + v6;
      v9 = *(_QWORD *)((char *)v5 + v6);
      *(_QWORD *)v8 = 0;
      *(_QWORD *)v7 = v9;
      v10 = *(_QWORD *)((char *)v5 + v6 + 8);
      *((_QWORD *)v8 + 1) = 0;
      *(_QWORD *)(v7 + 8) = v10;
      v11 = *(_QWORD *)((char *)v5 + v6 + 16);
      *(_DWORD *)(v7 + 24) = *(_DWORD *)((char *)v5 + v6 + 24);
      *(_QWORD *)(v7 + 16) = v11;
      *(_BYTE *)(a3 + v6 + 32) = 0;
      v12 = (_QWORD *)(a3 + v6 + 32);
      *(_BYTE *)(v7 + 48) = 0;
      if (*((_BYTE *)v5 + v6 + 48))
      {
        *v12 = 0;
        *(_QWORD *)(a3 + v6 + 40) = 0;
        v13 = *((_QWORD *)v8 + 4);
        *((_QWORD *)v8 + 4) = 0;
        *v12 = v13;
        v14 = *((_DWORD *)v8 + 10);
        *((_DWORD *)v8 + 10) = 0;
        *(_DWORD *)(v7 + 40) = v14;
        v15 = *((_DWORD *)v8 + 11);
        *((_DWORD *)v8 + 11) = 0;
        *(_DWORD *)(v7 + 44) = v15;
        *(_BYTE *)(v7 + 48) = 1;
        if (v8[48])
        {
          v16 = *((_DWORD *)v8 + 11);
          if (v16)
            WTF::VectorTypeOperations<WebCore::InspectorFrontendHost::ContextMenuItem>::destruct(*((WTF::StringImpl **)v8 + 4), (WTF::StringImpl *)(*((_QWORD *)v8 + 4) + 56 * v16));
          v17 = (WTF *)*((_QWORD *)v8 + 4);
          if (v17)
          {
            *((_QWORD *)v8 + 4) = 0;
            *((_DWORD *)v8 + 10) = 0;
            WTF::fastFree(v17, a2);
          }
        }
      }
      v18 = (WTF::StringImpl *)*((_QWORD *)v8 + 1);
      *((_QWORD *)v8 + 1) = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, a2);
        else
          *(_DWORD *)v18 -= 2;
      }
      result = *(WTF::StringImpl **)((char *)v5 + v6);
      *(_QWORD *)((char *)v5 + v6) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v6 += 56;
    }
    while ((WTF::StringImpl *)((char *)v5 + v6) != a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore21InspectorFrontendHost15ContextMenuItemENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, _QWORD *a2)
{
  unsigned int v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;

  if (*((_BYTE *)a2 + 48))
  {
    v3 = *((_DWORD *)a2 + 11);
    if (v3)
      WTF::VectorTypeOperations<WebCore::InspectorFrontendHost::ContextMenuItem>::destruct((WTF::StringImpl *)a2[4], (WTF::StringImpl *)(a2[4] + 56 * v3));
    v4 = (WTF *)a2[4];
    if (v4)
    {
      a2[4] = 0;
      *((_DWORD *)a2 + 10) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  v5 = (WTF::StringImpl *)a2[1];
  a2[1] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = (WTF::StringImpl *)*a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::Element>,WebCore::IDLInterface<WebCore::Document>>>::convert(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  int v11;
  unsigned __int8 v12;
  uint64_t v13;
  char v14;

  v13 = *(_QWORD *)(a2 + 56);
  if ((a3 & 0xFFFE000000000002) != 0)
    goto LABEL_11;
  v4 = *(unsigned __int8 *)(a3 + 5);
  if (v4 == 241)
  {
    v5 = *(_QWORD *)(a3 + 24);
    if (v5)
    {
      v6 = 0;
      goto LABEL_5;
    }
LABEL_11:
    result = JSC::throwTypeError();
    *(_DWORD *)(a1 + 24) = 1;
    return result;
  }
  if (v4 != 249)
    goto LABEL_11;
  v5 = *(_QWORD *)(a3 + 24);
  if (!v5)
    goto LABEL_11;
  v6 = 1;
LABEL_5:
  *(_DWORD *)(v5 + 24) += 2;
  v10 = v5;
  v11 = v6;
  v12 = 1;
  *(_BYTE *)(a1 + 8) = 0;
  v7 = a1 + 8;
  *(_DWORD *)(a1 + 16) = -1;
  result = ((uint64_t (*)(char *, uint64_t, uint64_t *))off_1E32AB910[v6])(&v14, a1 + 8, &v10);
  *(_DWORD *)(v7 + 8) = v6;
  v9 = v12;
  *(_DWORD *)(v7 + 16) = 0;
  if (v9)
  {
    if (v11 != -1)
      return ((uint64_t (*)(char *, uint64_t *))off_1E32AB900[v11])(&v14, &v10);
  }
  return result;
}

uint64_t WebCore::Detail::ConversionResultStorage<std::optional<std::variant<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>>::ConversionResultStorage<std::variant<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)();
  int v5;
  _BYTE v7[8];
  int v8;
  _BYTE v9[8];
  int v10;
  unsigned __int8 v11;
  char v12;

  if (*(_DWORD *)(a2 + 24))
  {
    *(_DWORD *)(a1 + 32) = 1;
    return a1;
  }
  v7[0] = 0;
  v8 = -1;
  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 == -1)
  {
    v9[0] = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = -1;
    *(_BYTE *)(a1 + 24) = 1;
    *(_DWORD *)(a1 + 32) = 0;
  }
  else
  {
    v4 = off_1E32AB910[v3];
    ((void (*)(_BYTE *, _BYTE *, uint64_t))v4)(v9, v7, a2 + 8);
    v8 = v3;
    v9[0] = 0;
    v10 = -1;
    ((void (*)(char *, _BYTE *, _BYTE *))v4)(&v12, v9, v7);
    v10 = v3;
    v11 = 1;
    *(_BYTE *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 16) = -1;
    ((void (*)(char *, uint64_t, _BYTE *))v4)(&v12, a1 + 8, v9);
    *(_DWORD *)(a1 + 16) = v3;
    v5 = v11;
    *(_BYTE *)(a1 + 24) = 1;
    *(_DWORD *)(a1 + 32) = 0;
    if (!v5)
      goto LABEL_9;
    if (v10 != -1)
      ((void (*)(char *, _BYTE *))off_1E32AB900[v10])(&v12, v9);
  }
  v10 = -1;
LABEL_9:
  if (v8 != -1)
    ((void (*)(char *, _BYTE *))off_1E32AB900[v8])(&v12, v7);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore7ElementENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_8DocumentENSD_ISI_EENSF_ISI_EEEEEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSM_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E32AB900[v3])(&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

uint64_t WebCore::Converter<WebCore::IDLUnion<WebCore::IDLDouble,WebCore::IDLSequence<WebCore::IDLDouble>>>::convert(uint64_t a1, JSC::JSGlobalObject *a2, JSC::JSGlobalObject *a3)
{
  JSC::VM *v6;
  JSC::JSObject *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  char v15;

  if (((unint64_t)a3 & 0xFFFE000000000002) != 0 || *((unsigned __int8 *)a3 + 5) < 0x17u)
    goto LABEL_8;
  v6 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v7 = (JSC::JSObject *)JSC::iteratorMethod(a2, a3, a3);
  if (*((_DWORD *)v6 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v6);
    if ((_DWORD)result)
      goto LABEL_9;
  }
  if (v7 == (JSC::JSObject *)10)
  {
LABEL_8:
    result = (uint64_t)WebCore::Converter<WebCore::IDLDouble>::convert(a2, (unint64_t)a3, (uint64_t)&v12);
    v11 = v13;
    if (!(_DWORD)v13)
    {
      *(_QWORD *)(a1 + 8) = v12;
      *(_DWORD *)(a1 + 24) = 0;
      goto LABEL_10;
    }
LABEL_9:
    v11 = 1;
LABEL_10:
    *(_DWORD *)(a1 + 32) = v11;
    return result;
  }
  result = (uint64_t)WebCore::Detail::NumericSequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLDouble>>::convert(a3, a2, v7, (uint64_t)&v12);
  v9 = v14;
  if (!v14)
  {
    *(_QWORD *)(a1 + 8) = v12;
    v10 = v13;
    v12 = 0;
    v13 = 0;
    *(_QWORD *)(a1 + 16) = v10;
    *(_DWORD *)(a1 + 24) = 1;
    *(_DWORD *)(a1 + 32) = 0;
    return ((uint64_t (*)(char *, uint64_t *))off_1E32AA860[v9])(&v15, &v12);
  }
  *(_DWORD *)(a1 + 32) = 1;
  if ((_DWORD)v9 != -1)
    return ((uint64_t (*)(char *, uint64_t *))off_1E32AA860[v9])(&v15, &v12);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSIntersectionObserver>(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  WebCore::JSDOMGlobalObject *v6;
  JSC::Structure *v7;
  JSC::JSCell *v8;
  uint64_t v9;

  result = WebCore::getCachedDOMStructure(a2, (uint64_t)&WebCore::JSIntersectionObserver::s_info);
  if (!result)
  {
    v5 = JSC::Structure::create(a1, a2, *(JSC::JSCell **)(a2 + 656));
    *(_DWORD *)(v5 + 16) |= 0x80000u;
    v8 = (JSC::JSCell *)WebCore::JSIntersectionObserverPrototype::create((WebCore::JSIntersectionObserverPrototype *)a1, v5, v6, v7);
    v9 = JSC::Structure::create(a1, a2, v8);
    return WebCore::cacheDOMStructure((JSCell *)a2, v9, (uint64_t)&WebCore::JSIntersectionObserver::s_info);
  }
  return result;
}

uint64_t WebCore::JSConverterOverloader<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::Node>>,true,true>::convert<WebCore::ContainerNode *>(WebCore::DOMWrapperWorld **a1, JSC::VM *a2, uint64_t *a3, WebCore::Document *a4)
{
  uint64_t v4;
  uint64_t v7;
  unint64_t Wrapper;
  uint64_t OutOfLineCachedWrapper;
  void *v11;
  WebCore::Node *v12;
  WebCore::Node *v13;

  v4 = *a3;
  if (!*a3)
    return 2;
  if (*((_BYTE *)a2 + 3328))
  {
    v7 = *(_QWORD *)(v4 + 8);
    if (v7)
    {
      if ((*(_BYTE *)(v7 + 8) & 3) == 0)
      {
        Wrapper = *(_QWORD *)v7;
        if (*(_QWORD *)v7)
          return Wrapper;
      }
    }
  }
  else
  {
    OutOfLineCachedWrapper = WebCore::getOutOfLineCachedWrapper((uint64_t)a2, *a3);
    if (OutOfLineCachedWrapper)
      return OutOfLineCachedWrapper;
  }
  *(_DWORD *)(v4 + 24) += 2;
  v13 = (WebCore::Node *)v4;
  Wrapper = WebCore::createWrapper(a1, a2, (WebCore::JSDOMGlobalObject *)&v13, a4);
  v12 = v13;
  v13 = 0;
  if (v12)
  {
    if (*((_DWORD *)v12 + 6) == 2)
    {
      if ((*((_WORD *)v12 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v12, v11);
    }
    else
    {
      *((_DWORD *)v12 + 6) -= 2;
    }
  }
  return Wrapper;
}

uint64_t WebCore::jsIntersectionObserver_rootMarginGetter(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSIntersectionObserver *a3)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8;
  uint64_t v9;

  v9 = *((_QWORD *)this + 7);
  WebCore::IntersectionObserver::rootMargin(a2, &v8);
  v5 = WebCore::toJS<WebCore::IDLUSVString,WTF::String>((uint64_t)this, (uint64_t)&v9, (uint64_t *)&v8);
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  return v5;
}

uint64_t WebCore::JSConverter<WebCore::IDLFrozenArray<WebCore::IDLDouble>>::convert<double,0ul>(JSC *a1, uint64_t a2, uint64_t a3)
{
  JSC::VM *v6;
  unsigned int v7;
  JSC::JSObject *v8;
  JSC::JSGlobalObject *v9;
  void *v10;
  uint64_t v11;
  double *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  objc_class *v17;
  JSValue v18;
  BOOL v19[8];
  _QWORD v20[12];

  v6 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v20[11] = v6;
  v19[0] = 0;
  v20[0] = 0x800000000;
  v20[1] = &v20[3];
  memset(&v20[2], 0, 72);
  v7 = *(_DWORD *)(a3 + 12);
  if (v7 >= 9)
  {
    v19[0] = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)v20) == 1;
    v7 = *(_DWORD *)(a3 + 12);
  }
  if (v7)
  {
    v13 = *(double **)a3;
    v14 = 8 * v7;
    do
    {
      v15 = *v13;
      if ((*(_QWORD *)v13 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (v16 = (int)v15, v15 == (double)(int)v16)
        && ((_DWORD)v16 || (*(_QWORD *)&v15 & 0x8000000000000000) == 0))
      {
        v17 = (objc_class *)(v16 | 0xFFFE000000000000);
      }
      else
      {
        v17 = (objc_class *)(*(_QWORD *)&v15 + 0x2000000000000);
      }
      if (*((_DWORD *)v6 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) != 0)
        goto LABEL_19;
      v18.super.isa = v17;
      JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t)v19, v18);
      ++v13;
      v14 -= 8;
    }
    while (v14);
  }
  if (v19[0])
  {
    JSC::throwOutOfMemoryError();
LABEL_19:
    v11 = 0;
    goto LABEL_7;
  }
  v9 = (JSC::JSGlobalObject *)JSC::constructArray(a2);
  if (*((_DWORD *)v6 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) != 0)
    goto LABEL_19;
  v11 = JSC::objectConstructorFreeze(a1, v9, v8);
LABEL_7:
  JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::~MarkedVector((uint64_t)v19, v10);
  return v11;
}

uint64_t WebCore::JSIntersectionObserver::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  WTF *v5;
  void *v6;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 5808);
  *(_QWORD *)(a1 + 5808) = v3;
  if (result)
  {
    v5 = (WTF *)MEMORY[0x19AEA3528]();
    return WTF::fastFree(v5, v6);
  }
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSIntersectionObserverEntry>(WebCore::JSIntersectionObserverEntry *a1, JSC::JSCell **a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSIntersectionObserverEntry::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSIntersectionObserverEntry::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSIntersectionObserverEntry::s_info);
  }
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSInvokeEvent>(WebCore::JSEvent *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t result;
  JSC::JSCell *v14;
  unint64_t v15;
  JSC::Structure *v16;
  JSC::JSCell *v17;
  uint64_t v18;

  v5 = *((_QWORD *)a2 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSInvokeEvent::s_info + ~((_QWORD)&WebCore::JSInvokeEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSInvokeEvent::s_info + ~((_QWORD)&WebCore::JSInvokeEvent::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSInvokeEvent::s_info)
    {
LABEL_6:
      result = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (result)
        return result;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSInvokeEvent::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (JSC::JSCell *)WebCore::JSEvent::prototype(this, a2, a3);
  v15 = JSC::Structure::create((uint64_t *)this, (int)a2, v14);
  *(_DWORD *)(v15 + 16) |= 0x80000u;
  v17 = (JSC::JSCell *)WebCore::JSInvokeEventPrototype::create(this, a2, v15, v16);
  v18 = JSC::Structure::create((uint64_t *)this, (int)a2, v17);
  return WebCore::cacheDOMStructure((JSCell *)a2, v18, (uint64_t)&WebCore::JSInvokeEvent::s_info);
}

uint64_t JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLEnumeration<WebCore::CryptoKeyUsage>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;
  JSValue v8;
  int i;
  unsigned int v10;
  unint64_t IndexQuickly;
  uint64_t v12;
  JSC::VM *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  JSC::VM *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  JSC::VM *v25;

  v6 = *((_QWORD *)a1 + 7);
  result = JSC::getIterationMode();
  if ((_DWORD)result == 2)
  {
    for (i = 1; ; ++i)
    {
      v10 = (*(_BYTE *)(a2 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(a2 + 8) - 8) : 0;
      if (i - 1 >= v10)
        break;
      IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)a2, i - 1, 0);
      if (!IndexQuickly)
        IndexQuickly = JSC::JSObject::get((JSC::JSObject *)a2, a1, (i - 1));
      if (*(_DWORD *)(v6 + 80))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
        if ((result & 1) != 0)
          break;
      }
      v12 = *a3;
      v25 = (JSC::VM *)*((_QWORD *)a1 + 7);
      v13 = v25;
      result = WebCore::parseEnumeration<WebCore::CryptoKeyUsage>(a1, IndexQuickly);
      v14 = result;
      if (!*((_DWORD *)v13 + 20) || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v13), (result & 1) == 0))
      {
        if ((v14 & 0xFF00000000) != 0)
        {
          LODWORD(v25) = v14;
          v15 = *(unsigned int *)(v12 + 12);
          if ((_DWORD)v15 == *(_DWORD *)(v12 + 8))
          {
            result = (uint64_t)WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v12, v15 + 1, (unint64_t)&v25);
            v15 = *(unsigned int *)(v12 + 12);
            *(_DWORD *)(*(_QWORD *)v12 + 4 * v15) = *(_DWORD *)result;
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)v12 + 4 * v15) = v14;
          }
          *(_DWORD *)(v12 + 12) = v15 + 1;
        }
        else
        {
          result = JSC::throwTypeError();
        }
      }
      if (*(_QWORD *)(v6 + 16))
      {
        v23 = JSC::JSArrayIterator::create();
        v24 = i | 0xFFFE000000000000;
        if (i < 0)
          v24 = COERCE__INT64((double)i) + 0x2000000000000;
        *(_QWORD *)(v23 + 16) = v24;
        return JSC::iteratorClose();
      }
    }
  }
  else
  {
    JSC::iteratorForIterable(a1, (JSC::JSGlobalObject *)a2, v8);
    if (!*(_DWORD *)(v6 + 80) || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6), (result & 1) == 0))
    {
      while (1)
      {
        result = JSC::iteratorStep();
        if (*(_QWORD *)(v6 + 16) || result == 6)
          break;
        v17 = JSC::iteratorValue();
        if (*(_DWORD *)(v6 + 80))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
          if ((result & 1) != 0)
            break;
        }
        v18 = *a3;
        v25 = (JSC::VM *)*((_QWORD *)a1 + 7);
        v19 = v25;
        v20 = WebCore::parseEnumeration<WebCore::CryptoKeyUsage>(a1, v17);
        if (!*((_DWORD *)v19 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v19) & 1) == 0)
        {
          if ((v20 & 0xFF00000000) != 0)
          {
            LODWORD(v25) = v20;
            v21 = *(unsigned int *)(v18 + 12);
            if ((_DWORD)v21 == *(_DWORD *)(v18 + 8))
            {
              v22 = WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v18, v21 + 1, (unint64_t)&v25);
              v21 = *(unsigned int *)(v18 + 12);
              *(_DWORD *)(*(_QWORD *)v18 + 4 * v21) = *(_DWORD *)v22;
            }
            else
            {
              *(_DWORD *)(*(_QWORD *)v18 + 4 * v21) = v20;
            }
            *(_DWORD *)(v18 + 12) = v21 + 1;
          }
          else
          {
            JSC::throwTypeError();
          }
        }
        if (*(_QWORD *)(v6 + 16))
          return JSC::iteratorClose();
      }
    }
  }
  return result;
}

char *WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  void *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[4 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v13 = *a1;
        return &v13[4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2)];
      }
      if (!(v10 >> 30))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)(4 * v10));
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
        memcpy(v11, v5, 4 * v6);
        v13 = *a1;
        if (v5)
        {
          if (v13 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((WTF *)v5, v12);
          v13 = *a1;
        }
        return &v13[4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2)];
      }
LABEL_30:
      __break(0xC471u);
      JUMPOUT(0x194CE9BA0);
    }
  }
  v14 = *((unsigned int *)a1 + 2);
  v15 = v14 + (v14 >> 2);
  if (v15 >= 0x10)
    v16 = v15 + 1;
  else
    v16 = 16;
  if (v16 <= a2)
    v17 = a2;
  else
    v17 = v16;
  if (v17 > v14)
  {
    if (v17 >> 30)
      goto LABEL_30;
    v18 = *((unsigned int *)a1 + 3);
    v19 = (char *)WTF::fastMalloc((WTF *)(4 * v17));
    *((_DWORD *)a1 + 2) = v17;
    *a1 = v19;
    memcpy(v19, v5, 4 * v18);
    if (v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((WTF *)v5, v20);
    }
  }
  return (char *)v3;
}

WTF::StringImpl *WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::RsaOtherPrimesInfo>>::convert(JSC::JSGlobalObject *a1, JSC::JSCell *a2, uint64_t a3)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  char *v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  int v27;

  result = (WTF::StringImpl *)WebCore::convertDictionary<WebCore::RsaOtherPrimesInfo>(a2, a1, (uint64_t)&v24);
  v6 = v27;
  if (!v27)
  {
    v7 = v24;
    v8 = v25;
    v24 = 0;
    v25 = 0;
    v21 = v7;
    v22 = v8;
    v9 = v26;
    v26 = 0;
    v23 = v9;
    v10 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v10 == *(_DWORD *)(a3 + 8))
    {
      v11 = WTF::Vector<WebCore::RsaOtherPrimesInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v10 + 1, (unint64_t)&v21);
      v12 = *(_DWORD *)(a3 + 12);
      v13 = (_QWORD *)(*(_QWORD *)a3 + 24 * v12);
      v14 = *(_QWORD *)v11;
      *(_QWORD *)v11 = 0;
      *v13 = v14;
      v15 = *((_QWORD *)v11 + 1);
      *((_QWORD *)v11 + 1) = 0;
      v13[1] = v15;
      v16 = *((_QWORD *)v11 + 2);
      *((_QWORD *)v11 + 2) = 0;
      v13[2] = v16;
      v17 = v23;
      *(_DWORD *)(a3 + 12) = v12 + 1;
      v23 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v5);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
    else
    {
      v18 = *(_QWORD *)a3;
      v21 = 0;
      v19 = (WTF::StringImpl **)(v18 + 24 * v10);
      *v19 = v7;
      v22 = 0;
      v19[1] = v8;
      v19[2] = v9;
      *(_DWORD *)(a3 + 12) = v10 + 1;
      v23 = 0;
    }
    v20 = v22;
    v22 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v5);
      else
        *(_DWORD *)v20 -= 2;
    }
    result = v21;
    v21 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
    v6 = v27;
  }
  if (v6 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32AC3F8[v6])(&v21, &v24);
  return result;
}

char *WTF::Vector<WebCore::RsaOtherPrimesInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  WTF::StringImpl **v11;
  void *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  WTF::StringImpl **v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1 > a3
    || (v6 = (WTF::StringImpl *)((char *)v5 + 24 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v16 = a2;
    if (v16 > v14)
    {
      if (v16 >= 0xAAAAAAB)
      {
        __break(0xC471u);
        JUMPOUT(0x194CE9EBCLL);
      }
      v17 = (WTF::StringImpl *)((char *)v5 + 24 * *(unsigned int *)(a1 + 12));
      v18 = 24 * v16;
      v19 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)(24 * v16));
      *(_DWORD *)(a1 + 8) = (v18 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::RsaOtherPrimesInfo>::move(v5, v17, v19);
      if (v5)
      {
        if (*(WTF::StringImpl **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v9 = a2;
    if (v9 <= v7)
    {
      v13 = *(WTF::StringImpl **)a1;
    }
    else
    {
      if (v9 >= 0xAAAAAAB)
      {
        __break(0xC471u);
        JUMPOUT(0x194CE9EC4);
      }
      v10 = 24 * v9;
      v11 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)(24 * v9));
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::RsaOtherPrimesInfo>::move(v5, v6, v11);
      v13 = *(WTF::StringImpl **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF::StringImpl **)a1;
      }
    }
    return (char *)v13 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
  }
  return (char *)v3;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::RsaOtherPrimesInfo>::move(WTF::StringImpl *result, WTF::StringImpl *a2, WTF::StringImpl **a3)
{
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  if (result != a2)
  {
    v5 = (WTF::StringImpl **)result;
    do
    {
      v6 = *v5;
      *v5 = 0;
      *a3 = v6;
      v7 = v5[1];
      v5[1] = 0;
      a3[1] = v7;
      v8 = v5[2];
      v5[2] = 0;
      a3[2] = v8;
      v9 = v5[2];
      v5[2] = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      v10 = v5[1];
      v5[1] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, a2);
        else
          *(_DWORD *)v10 -= 2;
      }
      result = *v5;
      *v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 += 3;
      a3 += 3;
    }
    while (v5 != (WTF::StringImpl **)a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18RsaOtherPrimesInfoENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unint64_t WebCore::JSDOMConstructor<WebCore::JSKeyboardEvent>::create(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructor<WebCore::JSKeyboardEvent>::initializeProperties(v5, a1, a3);
  return v5;
}

uint64_t WebCore::JSDOMConstructor<WebCore::JSKeyboardEvent>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore24CompositeOperationOrAutoELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLNullable<WebCore::IDLDouble>>::convert(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  double v5;
  JSC::JSGlobalObject *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  double v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  if ((a2 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v4 = 0;
    v5 = 0.0;
LABEL_9:
    *(double *)&v12 = v5;
    *((_QWORD *)&v12 + 1) = v4;
    v7 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v7 == *(_DWORD *)(a3 + 8))
    {
      result = (uint64_t)WTF::Vector<std::optional<WebCore::GPUColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v7 + 1, (unint64_t)&v12);
      v7 = *(unsigned int *)(a3 + 12);
      v8 = *(_QWORD *)a3;
      v9 = *(_OWORD *)result;
    }
    else
    {
      v8 = *(_QWORD *)a3;
      v9 = v12;
    }
    *(_OWORD *)(v8 + 16 * v7) = v9;
    ++*(_DWORD *)(a3 + 12);
    return result;
  }
  v6 = (JSC::JSGlobalObject *)result;
  *(_QWORD *)&v12 = a2;
  result = *(_QWORD *)(result + 56);
  v13 = result;
  if (a2 >= 0xFFFE000000000000)
  {
    v5 = (double)(int)a2;
  }
  else if (a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v11 = result;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v12, v6);
    result = v11;
    v5 = v10;
  }
  else
  {
    *(_QWORD *)&v5 = a2 - 0x2000000000000;
  }
  if (!*(_DWORD *)(result + 80)
    || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)result), (result & 1) == 0))
  {
    if ((*(_QWORD *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      return JSC::throwTypeError();
    v4 = 1;
    goto LABEL_9;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS_8optionalIdEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSE_SG_EEEEEEDcSK_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t WebCore::JSKeyframeEffect::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSKeyframeEffect *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSKeyframeEffect *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSKeyframeEffect::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::HistoryItem::viewState(WebCore::HistoryItem *this)
{
  return *((_QWORD *)this + 43);
}

void WebCore::HistoryItem::setViewState(WebCore::HistoryItem *this, objc_object *a2)
{
  uint64_t v3;
  const void *v4;

  v3 = -[objc_object copy](a2, "copy");
  v4 = (const void *)*((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = v3;
  if (v4)
    CFRelease(v4);
}

uint64_t WebCore::convertEnumerationToJS<WebCore::LandmarkType>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  {
    WebCore::convertEnumerationToString(WebCore::LandmarkType)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::LandmarkType)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::LandmarkType)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::LandmarkType)::$_0::operator() const(void)::impl;
    unk_1EE2F4720 = &WebCore::convertEnumerationToString(WebCore::LandmarkType)::$_1::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::LandmarkType)::$_2::operator() const(void)::impl += 2;
    qword_1EE2F4728 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::LandmarkType)::$_2::operator() const(void)::impl;
  }
  v3 = WebCore::convertEnumerationToString(WebCore::LandmarkType)::values[a2];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::convertEnumerationToJS<WebCore::LatencyMode>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  {
    WebCore::convertEnumerationToString(WebCore::LatencyMode)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::LatencyMode)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::LatencyMode)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::LatencyMode)::$_0::operator() const(void)::impl;
    unk_1EE2F4740 = &WebCore::convertEnumerationToString(WebCore::LatencyMode)::$_1::operator() const(void)::impl;
  }
  v3 = WebCore::convertEnumerationToString(WebCore::LatencyMode)::values[(int)a2];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::parseEnumeration<WebCore::LatencyMode>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;
  uint64_t v9;
  char **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v19;
  unint64_t v20;

  v3 = a1;
  v20 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v4 = *(_QWORD *)(this + 8);
    if ((v4 & 1) != 0)
    {
      v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
      if (!v4)
      {
LABEL_6:
        if (v4)
          goto LABEL_7;
        return 0;
      }
    }
    else if (!v4)
    {
      goto LABEL_6;
    }
    *(_DWORD *)v4 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v20, a1);
  v4 = v19;
  if (!v19)
    return 0;
LABEL_7:
  v5 = *(_DWORD *)(v4 + 16);
  v6 = *(const char **)(v4 + 8);
  v7 = *(_DWORD *)(v4 + 4);
  if (v6 != "quality" && v7 == 7)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 113 || *(_DWORD *)(v6 + 1) != 1768710517 || *(_DWORD *)(v6 + 3) != 2037672300)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v6 != 113)
        goto LABEL_16;
      v13 = *(_QWORD *)(v6 + 2);
      v14 = *(_QWORD *)(v6 + 6);
      if (v13 != 0x69006C00610075 || v14 != 0x7900740069006CLL)
        goto LABEL_16;
    }
LABEL_41:
    v12 = &WebCore::parseEnumerationFromString<WebCore::LatencyMode>(WTF::String const&)::mappings;
    goto LABEL_42;
  }
  if (v6 == "quality" && v7 == 7)
    goto LABEL_41;
  if (v6 == "realtime" || v7 != 8)
  {
    if (v7 != 8 || v6 != "realtime")
      goto LABEL_16;
    goto LABEL_30;
  }
  if ((v5 & 4) == 0)
  {
    if (*(_WORD *)v6 != 114)
      goto LABEL_16;
    if (*((_QWORD *)v6 + 1) != 0x65006D00690074 || *(_QWORD *)(v6 + 2) != 0x74006C00610065)
      goto LABEL_16;
    goto LABEL_30;
  }
  if (*v6 != 114 || *(_DWORD *)(v6 + 1) != 1953259877 || *((_DWORD *)v6 + 1) != 1701669236)
  {
LABEL_16:
    v9 = 0;
    goto LABEL_43;
  }
LABEL_30:
  v12 = &off_1E32AD8D8;
LABEL_42:
  v9 = *((unsigned int *)v12 + 4) | 0x100000000;
LABEL_43:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v9;
}

uint64_t WebCore::JSLocation::prototype(WebCore::JSLocation *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v15;
  JSC::Structure *v16;
  JSC::JSCell *v17;
  uint64_t v18;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSLocation::s_info + ~((_QWORD)&WebCore::JSLocation::s_info << 32)) ^ (((unint64_t)&WebCore::JSLocation::s_info + ~((_QWORD)&WebCore::JSLocation::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSLocation::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSLocation::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSLocationPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v17 = (JSC::JSCell *)WebCore::JSLocationPrototype::create(this, Structure, v15, v16);
    v18 = WebCore::JSLocation::createStructure((uint64_t *)this, (uint64_t)a2, v17);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v18, (uint64_t)&WebCore::JSLocation::s_info);
  }
  return *(_QWORD *)(v13 + 48);
}

_DWORD **WebCore::JSLocation::destroy(WebCore::JSLocation *this, JSC::JSCell *a2)
{
  return WTF::Ref<WebCore::BarProp,WTF::RawPtrTraits<WebCore::BarProp>,WTF::DefaultRefDerefTraits<WebCore::BarProp>>::~Ref((_DWORD **)this + 3, a2);
}

uint64_t WebCore::JSLocation::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSLocation::visitChildren(WebCore::JSLocation *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    result = JSC::JSObject::visitChildren();
    if ((*((_QWORD *)this + 4) & 0xFFFE000000000002) == 0)
      result = (*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t WebCore::JSLocation::JSLocation(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v6;

  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  v6 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 24) = v6;
  *(_QWORD *)(result + 32) = 0;
  return result;
}

{
  uint64_t result;
  uint64_t v6;

  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  v6 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 24) = v6;
  *(_QWORD *)(result + 32) = 0;
  return result;
}

uint64_t WebCore::JSLocation::finishCreation(WebCore::JSLocation *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  WebCore::JSLocation *v9;
  int v10;
  int v11;
  uint64_t v12;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2616);
  v5 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 552);
  v8 = 0;
  v9 = this;
  v10 = -1;
  v11 = 0x1000000;
  v12 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)this, a2, v4, v5, 14, (uint64_t)&v8);
  v6 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2768);
  v8 = 0;
  v9 = this;
  v10 = -1;
  v11 = 0x1000000;
  v12 = 0;
  return JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)this, a2, v6, 10, 14, (uint64_t)&v8);
}

unint64_t WebCore::JSLocation::createPrototype(WebCore::JSLocation *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v5;
  JSC::Structure *v6;

  Structure = WebCore::JSLocationPrototype::createStructure((uint64_t *)this, (uint64_t)a2, a2[82]);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSLocationPrototype::create(this, Structure, v5, v6);
}

uint64_t WebCore::JSLocationPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSLocation>,(WebCore::DOMConstructorID)718>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5744);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSLocation>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSLocation::s_info + ~((_QWORD)&WebCore::JSLocation::s_info << 32)) ^ (((unint64_t)&WebCore::JSLocation::s_info + ~((_QWORD)&WebCore::JSLocation::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSLocation::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSLocation::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSLocationPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSLocationPrototype::create((WebCore::JSLocationPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSLocation::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSLocation::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5744) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsLocationConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSLocationPrototype::s_info != (char **)(16
                                                        * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSLocation>,(WebCore::DOMConstructorID)718>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsLocation_href(WTF::StringImpl *a1, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t *v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;
  WTF::StringImpl *v16;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  if (!v2)
    return 10;
  v4 = *(WTF::StringImpl **)(v2 + 8);
  if (!v4)
    return 10;
  if (*((_BYTE *)v4 + 56))
  {
    WebCore::reportErrorAccessingRemoteFrame(a1, 2);
    return 10;
  }
  if (!WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((uint64_t)a1, v4, 2))
    return 10;
  WebCore::Location::href(*(WebCore::Location **)(a2 + 24), &v16);
  v7 = *((_QWORD *)a1 + 7);
  v8 = (uint64_t *)(v7 + 41968);
  v9 = v16;
  if (!v16)
    return *v8;
  v10 = *((_DWORD *)v16 + 1);
  if (v10)
  {
    if (v10 != 1)
    {
LABEL_8:
      v11 = *(_QWORD *)(v7 + 64760);
      if (!v11 || v16 != *(WTF::StringImpl **)(v11 + 8))
        v11 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_11;
    }
    v13 = (unsigned __int8 *)*((_QWORD *)v16 + 1);
    if ((*((_BYTE *)v16 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_8;
      v14 = v15;
    }
    v11 = *(_QWORD *)(v7 + 8 * v14 + 42216);
  }
  else
  {
    v11 = *v8;
  }
LABEL_11:
  if (*(_DWORD *)v9 == 2)
    WTF::StringImpl::destroy(v9, v6);
  else
    *(_DWORD *)v9 -= 2;
  return v11;
}

uint64_t WebCore::setJSLocation_href(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  WebCore::Document *v10;
  JSC::JSGlobalObject *v11;
  int v12;
  _BOOL8 v13;
  WebCore::LocalDOMWindow *active;
  JSC::JSGlobalObject *v15;
  uint64_t DOMWindow;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WebCore::LocalDOMWindow *v20;
  uint64_t v21;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  JSValue v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  int v31[2];
  WTF::StringImpl *v32;
  uint64_t v33;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSLocation::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSLocation::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(WebCore::Document **)(a2 + 24);
  WebCore::valueToUSVString(a1, a3, (uint64_t)&v27);
  v12 = v28;
  v13 = v28 == 0;
  if (v28)
  {
LABEL_24:
    if (v12 != -1)
      ((void (*)(int *, WTF::StringImpl **))off_1E32B54C8[v12])(v31, &v27);
    return v13;
  }
  active = (WebCore::LocalDOMWindow *)WebCore::legacyActiveDOMWindowForAccessor(a1, v11);
  DOMWindow = WebCore::firstDOMWindow((JSC::VM **)a1, v15);
  if (!v28)
  {
    v18 = v27;
    v27 = 0;
    v29 = v18;
    v19 = *((_QWORD *)v10 + 2);
    if (v19
      && (v20 = (WebCore::LocalDOMWindow *)DOMWindow, (v21 = *(_QWORD *)(v19 + 8)) != 0)
      && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 104))(v21))
    {
      WebCore::Location::setLocation(v10, active, v20, (const WTF::String *)&v29, v31);
      v18 = v29;
    }
    else
    {
      *(_QWORD *)v31 = 0;
      v32 = 0;
      v33 = 0;
    }
    v29 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    if ((_BYTE)v33)
    {
      v23 = (WTF::StringImpl *)LOBYTE(v31[0]);
      LOBYTE(v29) = v31[0];
      v24 = v32;
      v30 = v32;
      if (!*((_QWORD *)v4 + 2))
      {
        v25.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)LOBYTE(v31[0]), (JSC::JSGlobalObject *)&v30);
        JSC::VM::throwException(v4, a1, v25);
        v24 = v30;
      }
      v30 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v23);
        else
          *(_DWORD *)v24 -= 2;
      }
    }
    v12 = v28;
    goto LABEL_24;
  }
  v26 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsLocation_protocol(v26);
}

uint64_t WebCore::jsLocation_protocol(WTF::StringImpl *a1, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  uint64_t v6;
  WTF::StringImpl *v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  WTF::StringImpl *v14;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  if (!v2)
    return 10;
  v4 = *(WTF::StringImpl **)(v2 + 8);
  if (!v4)
    return 10;
  if (*((_BYTE *)v4 + 56))
  {
    WebCore::reportErrorAccessingRemoteFrame(a1, 2);
    return 10;
  }
  if (!WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((uint64_t)a1, v4, 2))
    return 10;
  WebCore::Location::protocol(*(WebCore::Location **)(a2 + 24), &v14);
  v6 = *((_QWORD *)a1 + 7);
  v7 = v14;
  if (!v14 || (v8 = *((_DWORD *)v14 + 1)) == 0)
  {
    v9 = *(_QWORD *)(v6 + 41968);
LABEL_11:
    v14 = 0;
    if (!v7)
      return v9;
    goto LABEL_12;
  }
  if (v8 != 1)
    goto LABEL_8;
  v11 = (unsigned __int8 *)*((_QWORD *)v14 + 1);
  if ((*((_BYTE *)v14 + 16) & 4) != 0)
  {
    v12 = *v11;
LABEL_19:
    v9 = *(_QWORD *)(v6 + 8 * v12 + 42216);
    goto LABEL_20;
  }
  v13 = *(unsigned __int16 *)v11;
  if (v13 <= 0xFF)
  {
    v12 = v13;
    goto LABEL_19;
  }
LABEL_8:
  v9 = *(_QWORD *)(v6 + 64760);
  if (!v9 || v14 != *(WTF::StringImpl **)(v9 + 8))
  {
    v9 = JSC::jsStringWithCacheSlowCase();
    v7 = v14;
    goto LABEL_11;
  }
LABEL_20:
  v14 = 0;
LABEL_12:
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, v7);
  else
    *(_DWORD *)v7 -= 2;
  return v9;
}

uint64_t WebCore::setJSLocation_protocol(WTF::StringImpl *a1, uint64_t a2, uint64_t a3)
{
  JSC::VM *v4;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  JSC::JSGlobalObject *v15;
  int v16;
  _BOOL8 v17;
  WebCore::LocalDOMWindow *active;
  JSC::JSGlobalObject *v19;
  WebCore::LocalDOMWindow *DOMWindow;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  JSValue v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;
  WTF::StringImpl *v35;
  char v36;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v7 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSLocation::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSLocation::s_info && v9 != 0);
  }
  if (!v8)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v12 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  if (v12)
    v13 = *(WTF::StringImpl **)(v12 + 8);
  else
    v13 = 0;
  if (!WebCore::BindingSecurity::shouldAllowAccessToDOMWindow(a1, v13, 2))
    return 0;
  v14 = *(_QWORD *)(a2 + 24);
  WebCore::valueToUSVString(a1, a3, (uint64_t)&v30);
  v16 = v31;
  v17 = v31 == 0;
  if (v31)
  {
LABEL_22:
    if (v16 != -1)
      ((void (*)(int *, WTF::StringImpl **))off_1E32B54C8[v16])(&v34, &v30);
    return v17;
  }
  active = (WebCore::LocalDOMWindow *)WebCore::legacyActiveDOMWindowForAccessor(a1, v15);
  DOMWindow = (WebCore::LocalDOMWindow *)WebCore::firstDOMWindow((JSC::VM **)a1, v19);
  if (!v31)
  {
    v21 = v30;
    v30 = 0;
    v32 = v21;
    WebCore::Location::setProtocol(v14, active, DOMWindow, (uint64_t)&v34);
    v23 = v32;
    v32 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v22);
      else
        *(_DWORD *)v23 -= 2;
    }
    if (v36)
    {
      v25 = (WTF::StringImpl *)v34;
      LOBYTE(v32) = v34;
      v26 = v35;
      v35 = 0;
      v33 = v26;
      if (!*((_QWORD *)v4 + 2))
      {
        v27.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)v34, (JSC::JSGlobalObject *)&v33);
        JSC::VM::throwException(v4, a1, v27);
        v26 = v33;
      }
      v33 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v25);
        else
          *(_DWORD *)v26 -= 2;
      }
      if (v36)
      {
        v28 = v35;
        v35 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v25);
          else
            *(_DWORD *)v28 -= 2;
        }
      }
    }
    v16 = v31;
    goto LABEL_22;
  }
  v29 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsLocation_host(v29);
}

uint64_t WebCore::jsLocation_host(WTF::StringImpl *a1, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  uint64_t v6;
  WTF::StringImpl *v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  WTF::StringImpl *v14;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  if (!v2)
    return 10;
  v4 = *(WTF::StringImpl **)(v2 + 8);
  if (!v4)
    return 10;
  if (*((_BYTE *)v4 + 56))
  {
    WebCore::reportErrorAccessingRemoteFrame(a1, 2);
    return 10;
  }
  if (!WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((uint64_t)a1, v4, 2))
    return 10;
  WebCore::Location::host((uint64_t *)&v14, *(WebCore::Location **)(a2 + 24));
  v6 = *((_QWORD *)a1 + 7);
  v7 = v14;
  if (!v14 || (v8 = *((_DWORD *)v14 + 1)) == 0)
  {
    v9 = *(_QWORD *)(v6 + 41968);
LABEL_11:
    v14 = 0;
    if (!v7)
      return v9;
    goto LABEL_12;
  }
  if (v8 != 1)
    goto LABEL_8;
  v11 = (unsigned __int8 *)*((_QWORD *)v14 + 1);
  if ((*((_BYTE *)v14 + 16) & 4) != 0)
  {
    v12 = *v11;
LABEL_19:
    v9 = *(_QWORD *)(v6 + 8 * v12 + 42216);
    goto LABEL_20;
  }
  v13 = *(unsigned __int16 *)v11;
  if (v13 <= 0xFF)
  {
    v12 = v13;
    goto LABEL_19;
  }
LABEL_8:
  v9 = *(_QWORD *)(v6 + 64760);
  if (!v9 || v14 != *(WTF::StringImpl **)(v9 + 8))
  {
    v9 = JSC::jsStringWithCacheSlowCase();
    v7 = v14;
    goto LABEL_11;
  }
LABEL_20:
  v14 = 0;
LABEL_12:
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, v7);
  else
    *(_DWORD *)v7 -= 2;
  return v9;
}

uint64_t WebCore::setJSLocation_host(WTF::StringImpl *a1, uint64_t a2, uint64_t a3)
{
  JSC::VM *v4;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  JSC::JSGlobalObject *v15;
  int v16;
  _BOOL8 v17;
  WebCore::LocalDOMWindow *active;
  JSC::JSGlobalObject *v19;
  WebCore::LocalDOMWindow *DOMWindow;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  JSValue v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  char v34;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v7 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSLocation::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSLocation::s_info && v9 != 0);
  }
  if (!v8)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v12 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  if (v12)
    v13 = *(WTF::StringImpl **)(v12 + 8);
  else
    v13 = 0;
  if (!WebCore::BindingSecurity::shouldAllowAccessToDOMWindow(a1, v13, 2))
    return 0;
  v14 = *(_QWORD *)(a2 + 24);
  WebCore::valueToUSVString(a1, a3, (uint64_t)&v28);
  v16 = v29;
  v17 = v29 == 0;
  if (v29)
  {
LABEL_22:
    if (v16 != -1)
      ((void (*)(uint64_t *, WTF::StringImpl **))off_1E32B54C8[v16])(&v32, &v28);
    return v17;
  }
  active = (WebCore::LocalDOMWindow *)WebCore::legacyActiveDOMWindowForAccessor(a1, v15);
  DOMWindow = (WebCore::LocalDOMWindow *)WebCore::firstDOMWindow((JSC::VM **)a1, v19);
  if (!v29)
  {
    v21 = v28;
    v28 = 0;
    v30 = v21;
    WebCore::Location::setHost(v14, active, DOMWindow, &v32);
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v22);
      else
        *(_DWORD *)v21 -= 2;
    }
    if (v34)
    {
      v24 = (WTF::StringImpl *)v32;
      LOBYTE(v30) = v32;
      v25 = v33;
      v31 = v33;
      if (!*((_QWORD *)v4 + 2))
      {
        v26.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)v32, (JSC::JSGlobalObject *)&v31);
        JSC::VM::throwException(v4, a1, v26);
        v25 = v31;
      }
      v31 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v24);
        else
          *(_DWORD *)v25 -= 2;
      }
    }
    v16 = v29;
    goto LABEL_22;
  }
  v27 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsLocation_hostname(v27);
}

uint64_t WebCore::jsLocation_hostname(WTF::StringImpl *a1, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  uint64_t v6;
  WTF::StringImpl *v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  WTF::StringImpl *v14;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  if (!v2)
    return 10;
  v4 = *(WTF::StringImpl **)(v2 + 8);
  if (!v4)
    return 10;
  if (*((_BYTE *)v4 + 56))
  {
    WebCore::reportErrorAccessingRemoteFrame(a1, 2);
    return 10;
  }
  if (!WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((uint64_t)a1, v4, 2))
    return 10;
  WebCore::Location::hostname((uint64_t *)&v14, *(WebCore::Location **)(a2 + 24));
  v6 = *((_QWORD *)a1 + 7);
  v7 = v14;
  if (!v14 || (v8 = *((_DWORD *)v14 + 1)) == 0)
  {
    v9 = *(_QWORD *)(v6 + 41968);
LABEL_11:
    v14 = 0;
    if (!v7)
      return v9;
    goto LABEL_12;
  }
  if (v8 != 1)
    goto LABEL_8;
  v11 = (unsigned __int8 *)*((_QWORD *)v14 + 1);
  if ((*((_BYTE *)v14 + 16) & 4) != 0)
  {
    v12 = *v11;
LABEL_19:
    v9 = *(_QWORD *)(v6 + 8 * v12 + 42216);
    goto LABEL_20;
  }
  v13 = *(unsigned __int16 *)v11;
  if (v13 <= 0xFF)
  {
    v12 = v13;
    goto LABEL_19;
  }
LABEL_8:
  v9 = *(_QWORD *)(v6 + 64760);
  if (!v9 || v14 != *(WTF::StringImpl **)(v9 + 8))
  {
    v9 = JSC::jsStringWithCacheSlowCase();
    v7 = v14;
    goto LABEL_11;
  }
LABEL_20:
  v14 = 0;
LABEL_12:
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, v7);
  else
    *(_DWORD *)v7 -= 2;
  return v9;
}

uint64_t WebCore::setJSLocation_hostname(WTF::StringImpl *a1, uint64_t a2, uint64_t a3)
{
  JSC::VM *v4;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  JSC::JSGlobalObject *v15;
  int v16;
  _BOOL8 v17;
  WebCore::LocalDOMWindow *active;
  JSC::JSGlobalObject *v19;
  WebCore::LocalDOMWindow *DOMWindow;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  JSValue v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  char v34;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v7 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSLocation::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSLocation::s_info && v9 != 0);
  }
  if (!v8)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v12 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  if (v12)
    v13 = *(WTF::StringImpl **)(v12 + 8);
  else
    v13 = 0;
  if (!WebCore::BindingSecurity::shouldAllowAccessToDOMWindow(a1, v13, 2))
    return 0;
  v14 = *(_QWORD *)(a2 + 24);
  WebCore::valueToUSVString(a1, a3, (uint64_t)&v28);
  v16 = v29;
  v17 = v29 == 0;
  if (v29)
  {
LABEL_22:
    if (v16 != -1)
      ((void (*)(uint64_t *, WTF::StringImpl **))off_1E32B54C8[v16])(&v32, &v28);
    return v17;
  }
  active = (WebCore::LocalDOMWindow *)WebCore::legacyActiveDOMWindowForAccessor(a1, v15);
  DOMWindow = (WebCore::LocalDOMWindow *)WebCore::firstDOMWindow((JSC::VM **)a1, v19);
  if (!v29)
  {
    v21 = v28;
    v28 = 0;
    v30 = v21;
    WebCore::Location::setHostname(v14, active, DOMWindow, &v32);
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v22);
      else
        *(_DWORD *)v21 -= 2;
    }
    if (v34)
    {
      v24 = (WTF::StringImpl *)v32;
      LOBYTE(v30) = v32;
      v25 = v33;
      v31 = v33;
      if (!*((_QWORD *)v4 + 2))
      {
        v26.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)v32, (JSC::JSGlobalObject *)&v31);
        JSC::VM::throwException(v4, a1, v26);
        v25 = v31;
      }
      v31 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v24);
        else
          *(_DWORD *)v25 -= 2;
      }
    }
    v16 = v29;
    goto LABEL_22;
  }
  v27 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsLocation_port(v27);
}

uint64_t WebCore::setJSLocation_port(WTF::StringImpl *a1, uint64_t a2, uint64_t a3)
{
  JSC::VM *v4;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  JSC::JSGlobalObject *v15;
  int v16;
  _BOOL8 v17;
  WebCore::LocalDOMWindow *active;
  JSC::JSGlobalObject *v19;
  WebCore::LocalDOMWindow *DOMWindow;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  JSValue v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  char v36;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v7 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSLocation::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSLocation::s_info && v9 != 0);
  }
  if (!v8)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v12 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  if (v12)
    v13 = *(WTF::StringImpl **)(v12 + 8);
  else
    v13 = 0;
  if (!WebCore::BindingSecurity::shouldAllowAccessToDOMWindow(a1, v13, 2))
    return 0;
  v14 = *(WTF::StringImpl **)(a2 + 24);
  WebCore::valueToUSVString(a1, a3, (uint64_t)&v30);
  v16 = v31;
  v17 = v31 == 0;
  if (v31)
  {
LABEL_22:
    if (v16 != -1)
      ((void (*)(uint64_t *, WTF::StringImpl **))off_1E32B54C8[v16])(&v34, &v30);
    return v17;
  }
  active = (WebCore::LocalDOMWindow *)WebCore::legacyActiveDOMWindowForAccessor(a1, v15);
  DOMWindow = (WebCore::LocalDOMWindow *)WebCore::firstDOMWindow((JSC::VM **)a1, v19);
  if (!v31)
  {
    v21 = v30;
    v30 = 0;
    v32 = v21;
    WebCore::Location::setPort(v14, active, DOMWindow, (const WTF::String *)&v32, &v34);
    v23 = v32;
    v32 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v22);
      else
        *(_DWORD *)v23 -= 2;
    }
    if (v36)
    {
      v25 = (WTF::StringImpl *)v34;
      LOBYTE(v32) = v34;
      v26 = v35;
      v35 = 0;
      v33 = v26;
      if (!*((_QWORD *)v4 + 2))
      {
        v27.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)v34, (JSC::JSGlobalObject *)&v33);
        JSC::VM::throwException(v4, a1, v27);
        v26 = v33;
      }
      v33 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v25);
        else
          *(_DWORD *)v26 -= 2;
      }
      if (v36)
      {
        v28 = v35;
        v35 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v25);
          else
            *(_DWORD *)v28 -= 2;
        }
      }
    }
    v16 = v31;
    goto LABEL_22;
  }
  v29 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsLocation_pathname(v29);
}

uint64_t WebCore::jsLocation_pathname(WTF::StringImpl *a1, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  uint64_t v6;
  WTF::StringImpl *v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  WTF::StringImpl *v14;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  if (!v2)
    return 10;
  v4 = *(WTF::StringImpl **)(v2 + 8);
  if (!v4)
    return 10;
  if (*((_BYTE *)v4 + 56))
  {
    WebCore::reportErrorAccessingRemoteFrame(a1, 2);
    return 10;
  }
  if (!WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((uint64_t)a1, v4, 2))
    return 10;
  WebCore::Location::pathname((uint64_t *)&v14, *(WebCore::Location **)(a2 + 24));
  v6 = *((_QWORD *)a1 + 7);
  v7 = v14;
  if (!v14 || (v8 = *((_DWORD *)v14 + 1)) == 0)
  {
    v9 = *(_QWORD *)(v6 + 41968);
LABEL_11:
    v14 = 0;
    if (!v7)
      return v9;
    goto LABEL_12;
  }
  if (v8 != 1)
    goto LABEL_8;
  v11 = (unsigned __int8 *)*((_QWORD *)v14 + 1);
  if ((*((_BYTE *)v14 + 16) & 4) != 0)
  {
    v12 = *v11;
LABEL_19:
    v9 = *(_QWORD *)(v6 + 8 * v12 + 42216);
    goto LABEL_20;
  }
  v13 = *(unsigned __int16 *)v11;
  if (v13 <= 0xFF)
  {
    v12 = v13;
    goto LABEL_19;
  }
LABEL_8:
  v9 = *(_QWORD *)(v6 + 64760);
  if (!v9 || v14 != *(WTF::StringImpl **)(v9 + 8))
  {
    v9 = JSC::jsStringWithCacheSlowCase();
    v7 = v14;
    goto LABEL_11;
  }
LABEL_20:
  v14 = 0;
LABEL_12:
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, v7);
  else
    *(_DWORD *)v7 -= 2;
  return v9;
}

uint64_t WebCore::setJSLocation_pathname(WTF::StringImpl *a1, uint64_t a2, uint64_t a3)
{
  JSC::VM *v4;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  JSC::JSGlobalObject *v15;
  int v16;
  _BOOL8 v17;
  WebCore::LocalDOMWindow *active;
  JSC::JSGlobalObject *v19;
  WebCore::LocalDOMWindow *DOMWindow;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  JSValue v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  char v34;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v7 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSLocation::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSLocation::s_info && v9 != 0);
  }
  if (!v8)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v12 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  if (v12)
    v13 = *(WTF::StringImpl **)(v12 + 8);
  else
    v13 = 0;
  if (!WebCore::BindingSecurity::shouldAllowAccessToDOMWindow(a1, v13, 2))
    return 0;
  v14 = *(_QWORD *)(a2 + 24);
  WebCore::valueToUSVString(a1, a3, (uint64_t)&v28);
  v16 = v29;
  v17 = v29 == 0;
  if (v29)
  {
LABEL_22:
    if (v16 != -1)
      ((void (*)(uint64_t *, WTF::StringImpl **))off_1E32B54C8[v16])(&v32, &v28);
    return v17;
  }
  active = (WebCore::LocalDOMWindow *)WebCore::legacyActiveDOMWindowForAccessor(a1, v15);
  DOMWindow = (WebCore::LocalDOMWindow *)WebCore::firstDOMWindow((JSC::VM **)a1, v19);
  if (!v29)
  {
    v21 = v28;
    v28 = 0;
    v30 = v21;
    WebCore::Location::setPathname(v14, active, DOMWindow, &v32);
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v22);
      else
        *(_DWORD *)v21 -= 2;
    }
    if (v34)
    {
      v24 = (WTF::StringImpl *)v32;
      LOBYTE(v30) = v32;
      v25 = v33;
      v31 = v33;
      if (!*((_QWORD *)v4 + 2))
      {
        v26.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)v32, (JSC::JSGlobalObject *)&v31);
        JSC::VM::throwException(v4, a1, v26);
        v25 = v31;
      }
      v31 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v24);
        else
          *(_DWORD *)v25 -= 2;
      }
    }
    v16 = v29;
    goto LABEL_22;
  }
  v27 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsLocation_search(v27);
}

uint64_t WebCore::jsLocation_search(WTF::StringImpl *a1, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  uint64_t v6;
  WTF::StringImpl *v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  WTF::StringImpl *v14;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  if (!v2)
    return 10;
  v4 = *(WTF::StringImpl **)(v2 + 8);
  if (!v4)
    return 10;
  if (*((_BYTE *)v4 + 56))
  {
    WebCore::reportErrorAccessingRemoteFrame(a1, 2);
    return 10;
  }
  if (!WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((uint64_t)a1, v4, 2))
    return 10;
  WebCore::Location::search(*(WebCore::Location **)(a2 + 24), &v14);
  v6 = *((_QWORD *)a1 + 7);
  v7 = v14;
  if (!v14 || (v8 = *((_DWORD *)v14 + 1)) == 0)
  {
    v9 = *(_QWORD *)(v6 + 41968);
LABEL_11:
    v14 = 0;
    if (!v7)
      return v9;
    goto LABEL_12;
  }
  if (v8 != 1)
    goto LABEL_8;
  v11 = (unsigned __int8 *)*((_QWORD *)v14 + 1);
  if ((*((_BYTE *)v14 + 16) & 4) != 0)
  {
    v12 = *v11;
LABEL_19:
    v9 = *(_QWORD *)(v6 + 8 * v12 + 42216);
    goto LABEL_20;
  }
  v13 = *(unsigned __int16 *)v11;
  if (v13 <= 0xFF)
  {
    v12 = v13;
    goto LABEL_19;
  }
LABEL_8:
  v9 = *(_QWORD *)(v6 + 64760);
  if (!v9 || v14 != *(WTF::StringImpl **)(v9 + 8))
  {
    v9 = JSC::jsStringWithCacheSlowCase();
    v7 = v14;
    goto LABEL_11;
  }
LABEL_20:
  v14 = 0;
LABEL_12:
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, v7);
  else
    *(_DWORD *)v7 -= 2;
  return v9;
}

uint64_t WebCore::setJSLocation_search(WTF::StringImpl *a1, uint64_t a2, uint64_t a3)
{
  JSC::VM *v4;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  JSC::JSGlobalObject *v15;
  int v16;
  _BOOL8 v17;
  WebCore::LocalDOMWindow *active;
  JSC::JSGlobalObject *v19;
  WebCore::LocalDOMWindow *DOMWindow;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  JSValue v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  char v34;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v7 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSLocation::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSLocation::s_info && v9 != 0);
  }
  if (!v8)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v12 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  if (v12)
    v13 = *(WTF::StringImpl **)(v12 + 8);
  else
    v13 = 0;
  if (!WebCore::BindingSecurity::shouldAllowAccessToDOMWindow(a1, v13, 2))
    return 0;
  v14 = *(_QWORD *)(a2 + 24);
  WebCore::valueToUSVString(a1, a3, (uint64_t)&v28);
  v16 = v29;
  v17 = v29 == 0;
  if (v29)
  {
LABEL_22:
    if (v16 != -1)
      ((void (*)(uint64_t *, WTF::StringImpl **))off_1E32B54C8[v16])(&v32, &v28);
    return v17;
  }
  active = (WebCore::LocalDOMWindow *)WebCore::legacyActiveDOMWindowForAccessor(a1, v15);
  DOMWindow = (WebCore::LocalDOMWindow *)WebCore::firstDOMWindow((JSC::VM **)a1, v19);
  if (!v29)
  {
    v21 = v28;
    v28 = 0;
    v30 = v21;
    WebCore::Location::setSearch(v14, active, DOMWindow, &v32);
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v22);
      else
        *(_DWORD *)v21 -= 2;
    }
    if (v34)
    {
      v24 = (WTF::StringImpl *)v32;
      LOBYTE(v30) = v32;
      v25 = v33;
      v31 = v33;
      if (!*((_QWORD *)v4 + 2))
      {
        v26.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)v32, (JSC::JSGlobalObject *)&v31);
        JSC::VM::throwException(v4, a1, v26);
        v25 = v31;
      }
      v31 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v24);
        else
          *(_DWORD *)v25 -= 2;
      }
    }
    v16 = v29;
    goto LABEL_22;
  }
  v27 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsLocation_hash(v27);
}

uint64_t WebCore::jsLocation_hash(WTF::StringImpl *a1, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  uint64_t v6;
  WTF::StringImpl *v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  WTF::StringImpl *v14;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  if (!v2)
    return 10;
  v4 = *(WTF::StringImpl **)(v2 + 8);
  if (!v4)
    return 10;
  if (*((_BYTE *)v4 + 56))
  {
    WebCore::reportErrorAccessingRemoteFrame(a1, 2);
    return 10;
  }
  if (!WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((uint64_t)a1, v4, 2))
    return 10;
  WebCore::Location::hash(*(WebCore::Location **)(a2 + 24), &v14);
  v6 = *((_QWORD *)a1 + 7);
  v7 = v14;
  if (!v14 || (v8 = *((_DWORD *)v14 + 1)) == 0)
  {
    v9 = *(_QWORD *)(v6 + 41968);
LABEL_11:
    v14 = 0;
    if (!v7)
      return v9;
    goto LABEL_12;
  }
  if (v8 != 1)
    goto LABEL_8;
  v11 = (unsigned __int8 *)*((_QWORD *)v14 + 1);
  if ((*((_BYTE *)v14 + 16) & 4) != 0)
  {
    v12 = *v11;
LABEL_19:
    v9 = *(_QWORD *)(v6 + 8 * v12 + 42216);
    goto LABEL_20;
  }
  v13 = *(unsigned __int16 *)v11;
  if (v13 <= 0xFF)
  {
    v12 = v13;
    goto LABEL_19;
  }
LABEL_8:
  v9 = *(_QWORD *)(v6 + 64760);
  if (!v9 || v14 != *(WTF::StringImpl **)(v9 + 8))
  {
    v9 = JSC::jsStringWithCacheSlowCase();
    v7 = v14;
    goto LABEL_11;
  }
LABEL_20:
  v14 = 0;
LABEL_12:
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, v7);
  else
    *(_DWORD *)v7 -= 2;
  return v9;
}

uint64_t WebCore::setJSLocation_hash(WTF::StringImpl *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  JSC::JSGlobalObject *v14;
  int v15;
  _BOOL8 v16;
  WebCore::LocalDOMWindow *active;
  JSC::JSGlobalObject *v18;
  WebCore::LocalDOMWindow *DOMWindow;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  int v29;
  JSC::VM *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  char v35;

  v4 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v7 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSLocation::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSLocation::s_info && v9 != 0);
  }
  if (!v8)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v30 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v11 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  if (!v11)
    return 0;
  v12 = *(WTF::StringImpl **)(v11 + 8);
  if (!v12)
    return 0;
  if (*((_BYTE *)v12 + 56))
  {
    WebCore::reportErrorAccessingRemoteFrame(a1, 2);
    return 0;
  }
  if (!WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((uint64_t)a1, v12, 2))
    return 0;
  v13 = *(WTF::StringImpl **)(a2 + 24);
  WebCore::valueToUSVString(a1, a3, (uint64_t)&v28);
  v15 = v29;
  v16 = v29 == 0;
  if (v29)
  {
LABEL_19:
    if (v15 != -1)
      ((void (*)(uint64_t *, WTF::StringImpl **))off_1E32B54C8[v15])(&v33, &v28);
    return v16;
  }
  active = (WebCore::LocalDOMWindow *)WebCore::legacyActiveDOMWindowForAccessor(a1, v14);
  DOMWindow = (WebCore::LocalDOMWindow *)WebCore::firstDOMWindow((JSC::VM **)a1, v18);
  if (!v29)
  {
    v20 = v28;
    v28 = 0;
    v31 = v20;
    WebCore::Location::setHash(v13, active, DOMWindow, (const WTF::String *)&v31, &v33);
    v22 = v31;
    v31 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v21);
      else
        *(_DWORD *)v22 -= 2;
    }
    if (v35)
    {
      LOBYTE(v31) = v33;
      v25 = v34;
      v34 = 0;
      v32 = v25;
      if (!*(_QWORD *)(v4 + 16))
      {
        WebCore::propagateExceptionSlowPath(a1, &v30, (unsigned __int8 *)&v31);
        v25 = v32;
      }
      v32 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v21);
        else
          *(_DWORD *)v25 -= 2;
      }
      if (v35)
      {
        v26 = v34;
        v34 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, v21);
          else
            *(_DWORD *)v26 -= 2;
        }
      }
    }
    v15 = v29;
    goto LABEL_19;
  }
  v27 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsLocation_origin(v27);
}

uint64_t WebCore::jsLocation_origin(WTF::StringImpl *a1, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  uint64_t v6;
  WTF::StringImpl *v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  WTF::StringImpl *v14;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  if (!v2)
    return 10;
  v4 = *(WTF::StringImpl **)(v2 + 8);
  if (!v4)
    return 10;
  if (*((_BYTE *)v4 + 56))
  {
    WebCore::reportErrorAccessingRemoteFrame(a1, 2);
    return 10;
  }
  if (!WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((uint64_t)a1, v4, 2))
    return 10;
  WebCore::Location::origin(*(WebCore::Location **)(a2 + 24), &v14);
  v6 = *((_QWORD *)a1 + 7);
  v7 = v14;
  if (!v14 || (v8 = *((_DWORD *)v14 + 1)) == 0)
  {
    v9 = *(_QWORD *)(v6 + 41968);
LABEL_11:
    v14 = 0;
    if (!v7)
      return v9;
    goto LABEL_12;
  }
  if (v8 != 1)
    goto LABEL_8;
  v11 = (unsigned __int8 *)*((_QWORD *)v14 + 1);
  if ((*((_BYTE *)v14 + 16) & 4) != 0)
  {
    v12 = *v11;
LABEL_19:
    v9 = *(_QWORD *)(v6 + 8 * v12 + 42216);
    goto LABEL_20;
  }
  v13 = *(unsigned __int16 *)v11;
  if (v13 <= 0xFF)
  {
    v12 = v13;
    goto LABEL_19;
  }
LABEL_8:
  v9 = *(_QWORD *)(v6 + 64760);
  if (!v9 || v14 != *(WTF::StringImpl **)(v9 + 8))
  {
    v9 = JSC::jsStringWithCacheSlowCase();
    v7 = v14;
    goto LABEL_11;
  }
LABEL_20:
  v14 = 0;
LABEL_12:
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, v7);
  else
    *(_DWORD *)v7 -= 2;
  return v9;
}

uint64_t WebCore::jsLocation_ancestorOrigins(WTF::StringImpl *a1, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  JSC::VM *v6;
  unint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  if (!v2)
    return 10;
  v4 = *(WTF::StringImpl **)(v2 + 8);
  if (!v4)
    return 10;
  if (*((_BYTE *)v4 + 56))
  {
    WebCore::reportErrorAccessingRemoteFrame(a1, 2);
    return 10;
  }
  v6 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (!WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((uint64_t)a1, v4, 2))
    return 10;
  v7 = *(_QWORD *)(a2 + 32);
  if (!v7)
  {
    v8 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
    WebCore::Location::ancestorOrigins(*(WebCore::Location **)(a2 + 24), &v20);
    v9 = v20;
    v7 = WebCore::wrap<WebCore::DOMStringList>((uint64_t)a1, v8, v20);
    if (*(_DWORD *)v9 == 1)
    {
      v12 = *((unsigned int *)v9 + 5);
      if ((_DWORD)v12)
      {
        v14 = (WTF::StringImpl **)*((_QWORD *)v9 + 1);
        v15 = 8 * v12;
        do
        {
          v16 = *v14;
          *v14 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
            {
              v18 = v15;
              v19 = v14;
              WTF::StringImpl::destroy(v16, v10);
              v15 = v18;
              v14 = v19;
            }
            else
            {
              *(_DWORD *)v16 -= 2;
            }
          }
          ++v14;
          v15 -= 8;
        }
        while (v15);
      }
      v13 = (WTF *)*((_QWORD *)v9 + 1);
      if (v13)
      {
        *((_QWORD *)v9 + 1) = 0;
        *((_DWORD *)v9 + 4) = 0;
        WTF::fastFree(v13, v10);
      }
      WTF::fastFree(v9, v10);
    }
    else
    {
      --*(_DWORD *)v9;
    }
    if (*((_DWORD *)v6 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) != 0)
    {
      return 0;
    }
    else
    {
      v11 = *((_QWORD *)a1 + 7);
      *(_QWORD *)(a2 + 32) = v7;
      if ((v7 & 0xFFFE000000000002) == 0
        && v7
        && *(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(a2 + 7))
      {
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v11 + 192), (const JSCell *)a2);
      }
    }
  }
  return v7;
}

uint64_t WebCore::JSLocationOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  void *v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  void *v15;
  uint64_t result;
  uint64_t v17;
  void *v18;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 16);
  if (!v5)
    return 0;
  v6 = *(void **)(v5 + 8);
  if (!v6)
    return 0;
  if (a5)
  {
    *a5 = "Reachable from Window";
    a5[1] = 22;
  }
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) != v8)
  {
    v9 = v8[1];
    v10 = ((unint64_t)v6 + ~((_QWORD)v6 << 32)) ^ (((unint64_t)v6 + ~((_QWORD)v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(void **)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v6 == v15)
        goto LABEL_14;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x194CECDD4);
      }
    }
  }
  v17 = a4;
  v18 = v6;
  result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, v6);
  a4 = v17;
  v6 = v18;
  if ((_DWORD)result)
  {
LABEL_14:
    if (*(_BYTE *)(a4 + 131))
      (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v6);
    return 1;
  }
  return result;
}

_DWORD **WebCore::JSLocationOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v5;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v5 = v3;
  if (*(_DWORD *)(a3 + 48))
  {
    JSC::weakRemove<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,WebCore::JSLocation *>((uint64_t *)(a3 + 32), (uint64_t)v3);
  }
  else if (*(_QWORD *)v3)
  {
    *(_QWORD *)(*(_QWORD *)v3 + 8) = 3;
    *(_QWORD *)v3 = 0;
  }
  return WTF::Ref<WebCore::BarProp,WTF::RawPtrTraits<WebCore::BarProp>,WTF::DefaultRefDerefTraits<WebCore::BarProp>>::~Ref(&v5, v3);
}

unint64_t WebCore::JSLocation::toWrapped(uint64_t a1, unint64_t a2)
{
  unint64_t result;

  result = JSC::jsDynamicCast<WebCore::JSLocation *>(a2);
  if (result)
    return *(_QWORD *)(result + 24);
  return result;
}

unint64_t JSC::jsDynamicCast<WebCore::JSLocation *>(unint64_t result)
{
  uint64_t v1;
  _BOOL4 v2;
  char **v3;
  BOOL v4;

  if ((result & 0xFFFE000000000002) != 0)
    return 0;
  v1 = *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C);
  v2 = *(_DWORD *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C) != 0;
  v3 = (char **)(16 * v1);
  if ((_DWORD)v1)
    v4 = v3 == &WebCore::JSLocation::s_info;
  else
    v4 = 1;
  if (!v4)
  {
    do
    {
      v3 = (char **)v3[2];
      v2 = v3 != 0;
    }
    while (v3 != &WebCore::JSLocation::s_info && v3 != 0);
  }
  if (!v2)
    return 0;
  return result;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSManagedMediaSource>::construct(JSC *a1, uint64_t a2)
{
  JSC::VM *v4;
  uint64_t v5;
  WebCore::ManagedMediaSource *v6;
  WebCore::JSDOMGlobalObject *v7;
  JSCell *v8;
  JSC::JSCell *v9;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v11;
  JSC::JSGlobalObject *v12;
  JSC::VM *v13;
  JSC::JSObject *v14;
  JSC::Structure *v15;
  JSC::VM *FunctionRealm;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char **v23;
  int v24;
  JSC::JSCell *v25;
  unint64_t Structure;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  unint64_t SubclassStructure;
  uint64_t (***v31)(WebCore::ContextDestructionObserver *__hidden);
  uint64_t (***v33)(WebCore::ContextDestructionObserver *__hidden);
  JSC::VM *v34;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v34 = v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = (WebCore::ManagedMediaSource *)WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(a1, &v34, (uint64_t)"ManagedMediaSource", 19);
  WebCore::ManagedMediaSource::create(v6, (uint64_t *)&v33);
  if (*v33 != &off_1E335DCD0)
  {
    __break(0xC471u);
    JUMPOUT(0x194CED36CLL);
  }
  v8 = (JSCell *)WebCore::createWrapper<WebCore::ManagedMediaSource,WebCore::ManagedMediaSource>(*(JSC::VM **)(v5 + 40), (uint64_t *)&v33, v7);
  v9 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v9 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v9);
    if (Object)
    {
      v12 = Object;
      if (Object != *(JSC::JSGlobalObject **)(a2 + 24))
      {
        v13 = (JSC::VM *)*((_QWORD *)a1 + 7);
        FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, Object, v11);
        if (!*((_DWORD *)v13 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v13) & 1) == 0)
        {
          v17 = *((_QWORD *)FunctionRealm + 412);
          if (v17)
          {
            v18 = *(_DWORD *)(v17 - 8);
            v19 = ((unint64_t)&WebCore::JSManagedMediaSource::s_info
                 + ~((_QWORD)&WebCore::JSManagedMediaSource::s_info << 32)) ^ (((unint64_t)&WebCore::JSManagedMediaSource::s_info
                                                                              + ~((_QWORD)&WebCore::JSManagedMediaSource::s_info << 32)) >> 22);
            v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
            v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
            v22 = v18 & ((v21 >> 31) ^ v21);
            v23 = *(char ***)(v17 + 16 * v22);
            if (v23 == &WebCore::JSManagedMediaSource::s_info)
            {
LABEL_12:
              v14 = *(JSC::JSObject **)(v17 + 16 * v22 + 8);
              if (v14)
              {
LABEL_14:
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v12, v14, v15);
                if (!*((_DWORD *)v13 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v13) & 1) == 0)
                  JSC::JSObject::setStructure(v8, v13, SubclassStructure);
                goto LABEL_16;
              }
            }
            else
            {
              v24 = 1;
              while (v23)
              {
                v22 = ((_DWORD)v22 + v24) & v18;
                v23 = *(char ***)(v17 + 16 * v22);
                ++v24;
                if (v23 == &WebCore::JSManagedMediaSource::s_info)
                  goto LABEL_12;
              }
            }
          }
          v25 = (JSC::JSCell *)WebCore::JSMediaSource::prototype(v13, FunctionRealm, v14);
          Structure = WebCore::JSManagedMediaSourcePrototype::createStructure((uint64_t *)v13, (uint64_t)FunctionRealm, v25);
          *(_DWORD *)(Structure + 16) |= 0x80000u;
          v28 = (JSC::JSCell *)WebCore::JSManagedMediaSourcePrototype::create(v13, FunctionRealm, Structure, v27);
          v29 = WebCore::JSManagedMediaSource::createStructure((uint64_t *)v13, (uint64_t)FunctionRealm, v28);
          v14 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v29, (uint64_t)&WebCore::JSManagedMediaSource::s_info);
          goto LABEL_14;
        }
      }
    }
  }
LABEL_16:
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    v8 = 0;
  v31 = v33;
  v33 = 0;
  if (v31)
  {
    if (*((_DWORD *)v31 + 6) == 1)
      (*v31)[2]((WebCore::ContextDestructionObserver *)v31);
    else
      --*((_DWORD *)v31 + 6);
  }
  return v8;
}

uint64_t WebCore::JSManagedMediaSource::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24) - 40);
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSMediaSource::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSMediaSource::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSMediaSource::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSManagedMediaSourcePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSMediaSource::prototype(WebCore::JSMediaSource *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  JSC::JSCell *v14;
  unint64_t Structure;
  JSC::Structure *v16;
  JSC::JSCell *v17;
  uint64_t v18;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSMediaSource::s_info + ~((_QWORD)&WebCore::JSMediaSource::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaSource::s_info + ~((_QWORD)&WebCore::JSMediaSource::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSMediaSource::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSMediaSource::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    v14 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(this, a2, a3);
    Structure = WebCore::JSMediaSourcePrototype::createStructure((uint64_t *)this, (uint64_t)a2, v14);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v17 = (JSC::JSCell *)WebCore::JSMediaSourcePrototype::create(this, a2, Structure, v16);
    v18 = WebCore::JSMediaSource::createStructure((uint64_t *)this, (uint64_t)a2, v17);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v18, (uint64_t)&WebCore::JSMediaSource::s_info);
  }
  return *(_QWORD *)(v13 + 48);
}

unint64_t WebCore::JSManagedMediaSourcePrototype::create(WebCore::JSManagedMediaSourcePrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<6u>(this, (uint64_t)&WebCore::JSManagedMediaSource::s_info, &WebCore::JSManagedMediaSourcePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSManagedMediaSource>,(WebCore::DOMConstructorID)127>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  unint64_t v36;
  unint64_t v37;
  WTF::StringImpl *v38;
  unint64_t v39;
  int v40;
  int v41;
  uint64_t v42;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1016);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSMediaSource>,(WebCore::DOMConstructorID)129>(a1, a2);
  v7 = v6;
  LODWORD(v38) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v36 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v36);
    v5[2] = SlowCase + (int)v36;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v38, &WebCore::JSDOMConstructor<WebCore::JSManagedMediaSource>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v37 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v37);
    v10[2848] = v2 + (int)v37;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v38 = 0;
  v39 = v2;
  v40 = -1;
  v41 = 0x1000000;
  v42 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v38);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v38);
  v14 = v38;
  v38 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v38 = 0;
  v39 = v2;
  v40 = -1;
  v41 = 0x1000000;
  v42 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v38);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (!v18)
    goto LABEL_21;
  v19 = *(_DWORD *)(v18 - 8);
  v20 = ((unint64_t)&WebCore::JSManagedMediaSource::s_info
       + ~((_QWORD)&WebCore::JSManagedMediaSource::s_info << 32)) ^ (((unint64_t)&WebCore::JSManagedMediaSource::s_info
                                                                    + ~((_QWORD)&WebCore::JSManagedMediaSource::s_info << 32)) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  v23 = v19 & ((v22 >> 31) ^ v22);
  v24 = *(char ***)(v18 + 16 * v23);
  if (v24 != &WebCore::JSManagedMediaSource::s_info)
  {
    v25 = 1;
    while (v24)
    {
      v23 = ((_DWORD)v23 + v25) & v19;
      v24 = *(char ***)(v18 + 16 * v23);
      ++v25;
      if (v24 == &WebCore::JSManagedMediaSource::s_info)
        goto LABEL_20;
    }
    goto LABEL_21;
  }
LABEL_20:
  v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
  if (!v26)
  {
LABEL_21:
    v27 = (JSC::JSCell *)WebCore::JSMediaSource::prototype((WebCore::JSMediaSource *)a1, (JSC::VM *)a2, v16);
    Structure = WebCore::JSManagedMediaSourcePrototype::createStructure((uint64_t *)a1, a2, v27);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v30 = (JSC::JSCell *)WebCore::JSManagedMediaSourcePrototype::create((WebCore::JSManagedMediaSourcePrototype *)a1, (JSC::VM *)a2, Structure, v29);
    v31 = WebCore::JSManagedMediaSource::createStructure((uint64_t *)a1, a2, v30);
    v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSManagedMediaSource::s_info);
  }
  v32 = *(_QWORD *)(v26 + 48);
  v38 = 0;
  v39 = v2;
  v40 = -1;
  v41 = 0x1000000;
  v42 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v38);
  if ((*(_BYTE *)((16 * *(unsigned int *)v2) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)v2, (JSC::VM *)a1);
  WTF::AtomStringImpl::addLiteral();
  v33 = v38;
  JSC::reifyStaticProperty((JSC::VM *)a1, (uint64_t)&WebCore::JSManagedMediaSource::s_info, (unint64_t *)&v38, (uint64_t)&WebCore::JSManagedMediaSourceConstructorTableValues, (unsigned __int8 *)v2);
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v34);
    else
      *(_DWORD *)v33 -= 2;
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1016) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsManagedMediaSourceConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSManagedMediaSourcePrototype::s_info != (char **)(16
                                                                  * *(unsigned int *)(16
                                                                                    * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                    + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSManagedMediaSource>,(WebCore::DOMConstructorID)127>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsManagedMediaSource_quality(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  int *v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  if ((_MergedGlobals_685 & 1) != 0)
  {
    v4 = (int *)qword_1EE336078;
    if (!qword_1EE336078)
      return *v3;
    v5 = *(_DWORD *)qword_1EE336078;
  }
  else
  {
    _MergedGlobals_20 += 2;
    dword_1ECE78C70 += 2;
    qword_1EE336068 = (uint64_t)&_MergedGlobals_20;
    unk_1EE336070 = &dword_1ECE78C70;
    v4 = &dword_1ECE78C90;
    v5 = dword_1ECE78C90 + 2;
    dword_1ECE78C90 += 2;
    qword_1EE336078 = (uint64_t)&dword_1ECE78C90;
    _MergedGlobals_685 = 1;
  }
  *v4 = v5 + 2;
  v6 = v4[1];
  if (v6)
  {
    if (v6 != 1)
    {
LABEL_6:
      v7 = *(_QWORD *)(v2 + 64760);
      if (!v7 || v4 != *(int **)(v7 + 8))
      {
        v7 = JSC::jsStringWithCacheSlowCase();
        v5 = *v4 - 2;
      }
      goto LABEL_9;
    }
    v9 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    if ((v4[4] & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v11 = *(unsigned __int16 *)v9;
      if (v11 > 0xFF)
        goto LABEL_6;
      v10 = v11;
    }
    v7 = *(_QWORD *)(v2 + 8 * v10 + 42216);
  }
  else
  {
    v7 = *v3;
  }
LABEL_9:
  if (v5)
    *v4 = v5;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, a2);
  return v7;
}

uint64_t WebCore::jsManagedMediaSource_onqualitychange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 4);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1616), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 4) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v5 - 5) + 16))((uint64_t)v5 - 40);
  else
    --*((_DWORD *)v5 - 4);
  return v9;
}

BOOL WebCore::setJSManagedMediaSource_onqualitychange(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSManagedMediaSource::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSManagedMediaSource::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 4);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1616), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 4) == 1)
      {
        (*(void (**)(uint64_t))(*((_QWORD *)v11 - 5) + 16))((uint64_t)v11 - 40);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 4);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsManagedMediaSource_streaming(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 240))
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsManagedMediaSource_onstartstreaming(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 4);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1976), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 4) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v5 - 5) + 16))((uint64_t)v5 - 40);
  else
    --*((_DWORD *)v5 - 4);
  return v9;
}

BOOL WebCore::setJSManagedMediaSource_onstartstreaming(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSManagedMediaSource::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSManagedMediaSource::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 4);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1976), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 4) == 1)
      {
        (*(void (**)(uint64_t))(*((_QWORD *)v11 - 5) + 16))((uint64_t)v11 - 40);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 4);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsManagedMediaSource_onendstreaming(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 4);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 760), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 4) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v5 - 5) + 16))((uint64_t)v5 - 40);
  else
    --*((_DWORD *)v5 - 4);
  return v9;
}

BOOL WebCore::setJSManagedMediaSource_onendstreaming(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSManagedMediaSource::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSManagedMediaSource::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 4);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 760), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 4) == 1)
      {
        (*(void (**)(uint64_t))(*((_QWORD *)v11 - 5) + 16))((uint64_t)v11 - 40);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 4);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::JSManagedMediaSource::subspaceForImpl(WebCore::JSManagedMediaSource *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 1040);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v21 = *(_QWORD *)(v8 + 1040);
  if (!v21)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v9, &v23, (char *)this + 192, (char *)this + 1872, 32, 8, &v22);
    v11 = v22;
    v22 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v23;
    v23 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v21 = v9;
    v13 = *(_QWORD *)(v8 + 1040);
    *(_QWORD *)(v8 + 1040) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      v15 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6 + 2832, v14 + 1, (unint64_t)&v21);
      v14 = *(unsigned int *)(v6 + 2844);
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = *v15;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
    }
    *(_DWORD *)(v6 + 2844) = v14 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v16 = *(_QWORD *)(v3 + 1040);
  *(_QWORD *)(v3 + 1040) = v4;
  if (v16)
  {
    v17 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v17, v18);
  }
  v19 = __ldxr((unsigned __int8 *)v6);
  if (v19 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSMediaSource::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24) - 40);
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSManagedMediaSourceOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v6 = *(_QWORD *)(v5 - 32);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (*(_QWORD *)(v5 - 24)
    || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 - 40) + 64))(v5 - 40), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

uint64_t WebCore::JSManagedMediaSourceOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v27;
  uint64_t v28;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  result = v3 - 40;
  v5 = *(_DWORD *)(v3 - 16);
  *(_DWORD *)(v3 - 16) = v5 + 1;
  if (*(_DWORD *)(a3 + 48))
  {
    v9 = *(_QWORD *)(a3 + 32);
    v7 = (uint64_t *)(a3 + 32);
    v8 = v9;
    if (v9)
    {
      v10 = *(_DWORD *)(v8 - 8);
      v11 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
      v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
      v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
      v14 = v10 & ((v13 >> 31) ^ v13);
      v15 = *(_QWORD *)(v8 + 16 * v14);
      if (v15 != result)
      {
        v16 = 1;
        while (v15)
        {
          v14 = ((_DWORD)v14 + v16) & v10;
          v15 = *(_QWORD *)(v8 + 16 * v14);
          ++v16;
          if (v15 == result)
            goto LABEL_12;
        }
        v14 = *(unsigned int *)(v8 - 4);
      }
LABEL_12:
      if (v14 != *(_DWORD *)(v8 - 4))
      {
        v17 = (_QWORD *)(v8 + 16 * v14);
        *v17 = -1;
        v20 = v17[1];
        v19 = v17 + 1;
        v18 = v20;
        if (v20)
        {
          *(_QWORD *)(v18 + 8) = 3;
          *v19 = 0;
        }
        ++*(_DWORD *)(*v7 - 16);
        v21 = *v7;
        if (*v7)
          v22 = *(_DWORD *)(v21 - 12) - 1;
        else
          v22 = -1;
        *(_DWORD *)(v21 - 12) = v22;
        v23 = *v7;
        if (*v7)
        {
          v24 = 6 * *(_DWORD *)(v23 - 12);
          v25 = *(_DWORD *)(v23 - 4);
          if (v24 < v25 && v25 >= 9)
          {
            v27 = v3;
            v28 = v3 - 40;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v7, v25 >> 1, 0);
            v3 = v27;
            result = v28;
          }
        }
      }
    }
    v5 = *(_DWORD *)(v3 - 16) - 1;
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 8);
    if (v6)
    {
      *(_QWORD *)(v6 + 8) = 3;
      *(_QWORD *)(v3 + 8) = 0;
    }
  }
  if (!v5)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  *(_DWORD *)(v3 - 16) = v5;
  return result;
}

uint64_t WebCore::createWrapper<WebCore::ManagedMediaSource,WebCore::ManagedMediaSource>(JSC::VM *a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  WebCore::JSMediaSource *v15;
  JSC::JSCell *v16;
  unint64_t Structure;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 412);
  if (!v6)
    goto LABEL_7;
  v7 = *(_DWORD *)(v6 - 8);
  v8 = ((unint64_t)&WebCore::JSManagedMediaSource::s_info
      + ~((_QWORD)&WebCore::JSManagedMediaSource::s_info << 32)) ^ (((unint64_t)&WebCore::JSManagedMediaSource::s_info
                                                                   + ~((_QWORD)&WebCore::JSManagedMediaSource::s_info << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = *(char ***)(v6 + 16 * v11);
  if (v12 != &WebCore::JSManagedMediaSource::s_info)
  {
    v13 = 1;
    while (v12)
    {
      v11 = ((_DWORD)v11 + v13) & v7;
      v12 = *(char ***)(v6 + 16 * v11);
      ++v13;
      if (v12 == &WebCore::JSManagedMediaSource::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
  if (!v14)
  {
LABEL_7:
    v15 = (WebCore::JSMediaSource *)*((_QWORD *)a1 + 7);
    v16 = (JSC::JSCell *)WebCore::JSMediaSource::prototype(v15, a1, a3);
    Structure = WebCore::JSManagedMediaSourcePrototype::createStructure((uint64_t *)v15, (uint64_t)a1, v16);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v19 = (JSC::JSCell *)WebCore::JSManagedMediaSourcePrototype::create(v15, a1, Structure, v18);
    v20 = WebCore::JSManagedMediaSource::createStructure((uint64_t *)v15, (uint64_t)a1, v19);
    v14 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSManagedMediaSource::s_info);
  }
  v21 = WebCore::JSManagedMediaSource::create(v14, a1, a2);
  WebCore::cacheWrapper<WebCore::ManagedMediaSource,WebCore::JSManagedMediaSource>(*((_QWORD *)a1 + 415), v5, v21);
  return v21;
}

uint64_t WebCore::wrap<WebCore::ManagedMediaSource>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;

  v3 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v3 + 48))
  {
    v8 = *(_QWORD *)(v3 + 32);
    if (!v8)
      goto LABEL_5;
    v9 = *(_DWORD *)(v8 - 8);
    v10 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(_QWORD *)(v8 + 16 * v13);
    if (v14 != a3)
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(_QWORD *)(v8 + 16 * v13);
        ++v15;
        if (v14 == a3)
          goto LABEL_16;
      }
      goto LABEL_5;
    }
LABEL_16:
    v4 = *(_QWORD *)(v8 + 16 * v13 + 8);
    if (!v4)
      goto LABEL_5;
  }
  else
  {
    v4 = *(_QWORD *)(a3 + 48);
    if (!v4)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v4 + 8) & 3) == 0)
  {
    v5 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
      return v5;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 24);
  v16 = (_DWORD *)a3;
  if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))a3 == &off_1E335DCD0)
  {
    v5 = WebCore::createWrapper<WebCore::ManagedMediaSource,WebCore::ManagedMediaSource>(a2, (uint64_t *)&v16, (WebCore::JSDOMGlobalObject *)a3);
    v6 = v16;
    v16 = 0;
    if (v6)
    {
      if (v6[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
      else
        --v6[6];
    }
    return v5;
  }
  result = 450;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSManagedSourceBuffer::prototype(WebCore::JSManagedSourceBuffer *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  JSC::JSCell *v15;
  unint64_t Structure;
  JSC::Structure *v17;
  unint64_t v18;
  unint64_t v19;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  unint64_t v23;
  int v24;

  v5 = *((_QWORD *)a2 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSManagedSourceBuffer::s_info
        + ~((_QWORD)&WebCore::JSManagedSourceBuffer::s_info << 32)) ^ (((unint64_t)&WebCore::JSManagedSourceBuffer::s_info
                                                                      + ~((_QWORD)&WebCore::JSManagedSourceBuffer::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSManagedSourceBuffer::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        return *(_QWORD *)(v13 + 48);
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSManagedSourceBuffer::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = (uint64_t *)((char *)this + 40136);
  v15 = (JSC::JSCell *)WebCore::JSSourceBuffer::prototype(this, a2, a3);
  Structure = WebCore::JSManagedSourceBufferPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v15);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = WebCore::JSManagedSourceBufferPrototype::create(this, a2, Structure, v17);
  v19 = v18;
  v24 = 23;
  if ((v18 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v18);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, this);
  }
  SlowCase = *v14;
  if ((unint64_t)*v14 >= *((_QWORD *)this + 5018))
  {
    SlowCase = *((_QWORD *)this + 5019);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_12;
    }
    v23 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 5020);
    *((_QWORD *)this + 5018) = SlowCase + HIDWORD(v23);
    *((_QWORD *)this + 5019) = SlowCase + (int)v23;
  }
  *v14 = SlowCase + 128;
LABEL_12:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, this, a2, v19, &v24, &WebCore::JSManagedSourceBuffer::s_info, 0, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v13 = WebCore::cacheDOMStructure((JSCell *)a2, SlowCase, (uint64_t)&WebCore::JSManagedSourceBuffer::s_info);
  return *(_QWORD *)(v13 + 48);
}

uint64_t WebCore::JSManagedSourceBuffer::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24) - 40);
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSourceBuffer::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSourceBuffer::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSourceBuffer::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSManagedSourceBuffer::estimatedSize(WebCore::JSManagedSourceBuffer *this, JSC::JSCell *a2, JSC::VM *a3)
{
  return JSC::JSObject::estimatedSize(this, a2, a3) + 2 * *(_QWORD *)(*((_QWORD *)this + 3) + 272) + 800;
}

uint64_t WebCore::JSManagedSourceBuffer::visitChildren(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  result = WebCore::JSSourceBuffer::visitChildren(a1, a2);
  if (!*(_BYTE *)(a2 + 130))
  {
    v5 = *(_QWORD *)(a1 + 24) - 40;
    result = *(_QWORD *)(a2 + 120);
    v6 = *(_QWORD *)(result + 48);
    v7 = *(_DWORD *)(v6 + 4);
    v8 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = v11;
    while (1)
    {
      v13 = *(_QWORD *)(v6 + 8 * v12 + 16);
      if (!v13)
        break;
      if (v5 == v13)
        goto LABEL_11;
      v12 = (v12 + 1) & v7;
      if (v12 == v11)
      {
        __break(0xC471u);
        JUMPOUT(0x194CEF198);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a2 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v5);
      ++*(_QWORD *)(a2 + 72);
    }
  }
LABEL_11:
  if (*(_BYTE *)(a2 + 184))
  {
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 272) + 400;
    *(_QWORD *)(a2 + 144) += v14;
    v15 = *(_QWORD *)(a2 + 160);
    v16 = __CFADD__(v15, v14);
    v17 = v15 + v14;
    if (v16)
      *(_BYTE *)(a2 + 152) = 1;
    else
      *(_QWORD *)(a2 + 160) = v17;
  }
  return result;
}

uint64_t WebCore::JSManagedSourceBuffer::visitChildren(WebCore::JSManagedSourceBuffer *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t result;
  _QWORD v16[2];
  uint64_t v17;
  char v18;

  v16[0] = a2;
  v16[1] = this;
  v18 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v17 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x194CEF380);
  }
  *((_QWORD *)a2 + 11) = v16;
  WebCore::JSSourceBuffer::visitChildren(this, a2, a3);
  if (!*((_BYTE *)a2 + 130))
  {
    v6 = *((_QWORD *)this + 3) - 40;
    v7 = *(_QWORD *)(*((_QWORD *)a2 + 15) + 48);
    v8 = *(_DWORD *)(v7 + 4);
    v9 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = v12;
    while (1)
    {
      v14 = *(_QWORD *)(v7 + 8 * v13 + 16);
      if (!v14)
        break;
      if (v6 == v14)
        goto LABEL_13;
      v13 = (v13 + 1) & v8;
      if (v13 == v12)
      {
        __break(0xC471u);
        JUMPOUT(0x194CEF304);
      }
    }
    if (WTF::ConcurrentPtrHashSet::addSlow())
    {
      if (*((_BYTE *)a2 + 131))
        (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 144))(a2, v6);
      ++*((_QWORD *)a2 + 9);
    }
  }
LABEL_13:
  result = (*(uint64_t (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 96))(a2, *(_QWORD *)(*((_QWORD *)this + 3) + 272) + 400);
  *(_QWORD *)(v16[0] + 88) = v17;
  return result;
}

uint64_t WebCore::JSManagedSourceBuffer::JSManagedSourceBuffer(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  v5 = v4 + 40;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v5;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  v5 = v4 + 40;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v5;
  return result;
}

uint64_t WebCore::JSManagedSourceBuffer::protectedWrapped@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 24);
  ++*(_DWORD *)(v2 - 16);
  *a2 = v2 - 40;
  return this;
}

uint64_t WebCore::JSManagedSourceBuffer::finishCreation(WebCore::JSManagedSourceBuffer *this, JSC::VM *a2)
{
  uint64_t result;

  result = WebCore::JSSourceBuffer::finishCreation((uint64_t)this, a2);
  if ((unint64_t)(*(_QWORD *)(*((_QWORD *)this + 3) + 272) + 400) >= 0x101)
    return JSC::Heap::reportExtraMemoryAllocatedSlowCase();
  return result;
}

unint64_t WebCore::JSManagedSourceBuffer::createPrototype(WebCore::JSManagedSourceBuffer *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  JSC::JSCell *v5;
  unint64_t Structure;
  JSC::Structure *v7;

  v5 = (JSC::JSCell *)WebCore::JSSourceBuffer::prototype(this, a2, a3);
  Structure = WebCore::JSManagedSourceBufferPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v5);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSManagedSourceBufferPrototype::create(this, a2, Structure, v7);
}

uint64_t WebCore::JSManagedSourceBufferPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSManagedSourceBufferPrototype::create(WebCore::JSManagedSourceBufferPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSManagedSourceBuffer::s_info, (uint64_t)&WebCore::JSManagedSourceBufferPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSManagedSourceBuffer>,(WebCore::DOMConstructorID)128>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1024);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSourceBuffer>,(WebCore::DOMConstructorID)131>(a1, a2);
  v7 = v6;
  LODWORD(v22) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v20);
    v5[2] = SlowCase + (int)v20;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v22, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSManagedSourceBuffer>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v21 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v21);
    v10[2848] = v2 + (int)v21;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v22);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v22);
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v22);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v18 = WebCore::JSManagedSourceBuffer::prototype((WebCore::JSManagedSourceBuffer *)a1, (JSC::VM *)a2, v17);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v18, 14, (uint64_t)&v22);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1024) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsManagedSourceBufferConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSManagedSourceBufferPrototype::s_info != (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSManagedSourceBuffer>,(WebCore::DOMConstructorID)128>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsManagedSourceBuffer_onbufferedchange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 4);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 328), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 4) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v5 - 5) + 16))((uint64_t)v5 - 40);
  else
    --*((_DWORD *)v5 - 4);
  return v9;
}

BOOL WebCore::setJSManagedSourceBuffer_onbufferedchange(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSManagedSourceBuffer::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSManagedSourceBuffer::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 4);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 328), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 4) == 1)
      {
        (*(void (**)(uint64_t))(*((_QWORD *)v11 - 5) + 16))((uint64_t)v11 - 40);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 4);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::JSManagedSourceBuffer::subspaceForImpl(WebCore::JSManagedSourceBuffer *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 1048);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v21 = *(_QWORD *)(v8 + 1048);
  if (!v21)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v9, &v23, (char *)this + 192, (char *)this + 1872, 32, 8, &v22);
    v11 = v22;
    v22 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v23;
    v23 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v21 = v9;
    v13 = *(_QWORD *)(v8 + 1048);
    *(_QWORD *)(v8 + 1048) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      v15 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6 + 2832, v14 + 1, (unint64_t)&v21);
      v14 = *(unsigned int *)(v6 + 2844);
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = *v15;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
    }
    *(_DWORD *)(v6 + 2844) = v14 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v16 = *(_QWORD *)(v3 + 1048);
  *(_QWORD *)(v3 + 1048) = v4;
  if (v16)
  {
    v17 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v17, v18);
  }
  v19 = __ldxr((unsigned __int8 *)v6);
  if (v19 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSManagedSourceBufferOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v6 = *(_QWORD *)(v5 - 32);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (*(_QWORD *)(v5 - 24)
    || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 - 40) + 64))(v5 - 40), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

uint64_t WebCore::JSManagedSourceBufferOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v27;
  uint64_t v28;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  result = v3 - 40;
  v5 = *(_DWORD *)(v3 - 16);
  *(_DWORD *)(v3 - 16) = v5 + 1;
  if (*(_DWORD *)(a3 + 48))
  {
    v9 = *(_QWORD *)(a3 + 32);
    v7 = (uint64_t *)(a3 + 32);
    v8 = v9;
    if (v9)
    {
      v10 = *(_DWORD *)(v8 - 8);
      v11 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
      v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
      v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
      v14 = v10 & ((v13 >> 31) ^ v13);
      v15 = *(_QWORD *)(v8 + 16 * v14);
      if (v15 != result)
      {
        v16 = 1;
        while (v15)
        {
          v14 = ((_DWORD)v14 + v16) & v10;
          v15 = *(_QWORD *)(v8 + 16 * v14);
          ++v16;
          if (v15 == result)
            goto LABEL_12;
        }
        v14 = *(unsigned int *)(v8 - 4);
      }
LABEL_12:
      if (v14 != *(_DWORD *)(v8 - 4))
      {
        v17 = (_QWORD *)(v8 + 16 * v14);
        *v17 = -1;
        v20 = v17[1];
        v19 = v17 + 1;
        v18 = v20;
        if (v20)
        {
          *(_QWORD *)(v18 + 8) = 3;
          *v19 = 0;
        }
        ++*(_DWORD *)(*v7 - 16);
        v21 = *v7;
        if (*v7)
          v22 = *(_DWORD *)(v21 - 12) - 1;
        else
          v22 = -1;
        *(_DWORD *)(v21 - 12) = v22;
        v23 = *v7;
        if (*v7)
        {
          v24 = 6 * *(_DWORD *)(v23 - 12);
          v25 = *(_DWORD *)(v23 - 4);
          if (v24 < v25 && v25 >= 9)
          {
            v27 = v3;
            v28 = v3 - 40;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v7, v25 >> 1, 0);
            v3 = v27;
            result = v28;
          }
        }
      }
    }
    v5 = *(_DWORD *)(v3 - 16) - 1;
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 8);
    if (v6)
    {
      *(_QWORD *)(v6 + 8) = 3;
      *(_QWORD *)(v3 + 8) = 0;
    }
  }
  if (!v5)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  *(_DWORD *)(v3 - 16) = v5;
  return result;
}

uint64_t WebCore::JSMathMLElement::prototype(WebCore::JSMathMLElement *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  JSC::JSCell *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSMathMLElement::s_info + ~((_QWORD)&WebCore::JSMathMLElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSMathMLElement::s_info + ~((_QWORD)&WebCore::JSMathMLElement::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSMathMLElement::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSMathMLElement::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    v14 = (JSC::JSCell *)WebCore::JSElement::prototype(this, a2, a3);
    Structure = WebCore::JSMathMLElementPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v14);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v18 = (JSC::JSCell *)WebCore::JSMathMLElementPrototype::create(this, Structure, v16, v17);
    v19 = WebCore::JSMathMLElement::createStructure((uint64_t *)this, (uint64_t)a2, v18);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v19, (uint64_t)&WebCore::JSMathMLElement::s_info);
  }
  return *(_QWORD *)(v13 + 48);
}

uint64_t WebCore::JSMathMLElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSMathMLElement::visitChildren(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  JSC::JSObject::visitChildren();
  WebCore::JSEventTarget::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  result = WebCore::JSNode::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
  v5 = *(_QWORD *)(a1 + 32);
  if ((v5 & 0xFFFE000000000002) == 0 && v5 != 0)
  {
    if ((v5 & 8) != 0)
    {
      if ((*(_BYTE *)(v5 - 79) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    else
    {
      v7 = v5 & 0xFFFFFFFFFFFFC000;
      if (*(_DWORD *)(v5 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
      {
        v8 = *(_QWORD *)(a1 + 32);
        v9 = v5 & 0xFFFFFFFFFFFFC000;
        result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v5 & 0xFFFFFFFFFFFFC000));
        v5 = v8;
        v7 = v9;
      }
      if (((*(_QWORD *)(v7 + 8 * ((v5 >> 10) & 0xF) + 40) >> (v5 >> 4)) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    if (*(_QWORD *)(a2 + 168))
      return JSC::SlotVisitor::appendSlow();
  }
  return result;
}

uint64_t WebCore::JSMathMLElement::visitChildren(WebCore::JSMathMLElement *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    result = WebCore::JSNode::visitChildren(this, a2, a3);
    if ((*((_QWORD *)this + 4) & 0xFFFE000000000002) == 0)
      result = (*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t WebCore::JSMathMLElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSMathMLElementPrototype::create(WebCore::JSMathMLElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  int *v9;
  char **v10;
  uint64_t v11;
  char *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  int v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  int v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  JSC::Structure *v51;
  int v52;
  unint64_t v54;
  WTF::StringImpl *v55[6];
  int v56;
  int v57;
  JSC::Structure *v58;
  int v59;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v54 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v54);
    *((_QWORD *)this + 4865) = SlowCase + (int)v54;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v9 = (int *)((char *)this + 93124);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  v10 = &WebCore::JSMathMLElementPrototypeTableValues;
  v11 = 114;
  do
  {
    v12 = v10[1];
    if (v12)
    {
      if (v12 == (char *)2)
        JSC::SmallStrings::singleCharacterStringRep((WebCore::JSMathMLElementPrototype *)((char *)this + 41968));
      else
        WTF::AtomStringImpl::addLiteral();
      v13 = v55[0];
      JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSMathMLElement::s_info, (unint64_t *)v55, (uint64_t)v10, (unsigned __int8 *)SlowCase);
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v14);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
    v10 += 5;
    --v11;
  }
  while (v11);
  v15 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v15 && *(_BYTE *)(v15 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194CF0D18);
  }
  v16 = v15 - 192;
  if (!v15)
    v16 = 0;
  v17 = *(_QWORD *)(*(_QWORD *)(v16 + 680) + 696) & 1;
  v18 = v17 == 0;
  if ((v17 & 1) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v19 = v55[0];
    v20 = *v9;
    *v9 = 1;
    LODWORD(v55[0]) = -1;
    WORD2(v55[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v20;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v21);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
  v22 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v22 && *(_BYTE *)(v22 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194CF0D38);
  }
  v23 = v22 - 192;
  if (!v22)
    v23 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v23 + 680) + 712) & 0x4000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v24 = v55[0];
    v25 = *v9;
    v18 = 1;
    *v9 = 1;
    LODWORD(v55[0]) = -1;
    WORD2(v55[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v25;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v26);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
  v27 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v27 && *(_BYTE *)(v27 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194CF0D58);
  }
  v28 = v27 - 192;
  if (!v27)
    v28 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v28 + 680) + 712) & 0x4000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v29 = v55[0];
    v30 = *v9;
    v18 = 1;
    *v9 = 1;
    LODWORD(v55[0]) = -1;
    WORD2(v55[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v30;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v31);
      else
        *(_DWORD *)v29 -= 2;
    }
  }
  v32 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v32 && *(_BYTE *)(v32 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194CF0D78);
  }
  v33 = v32 - 192;
  if (!v32)
    v33 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v33 + 680) + 712) & 0x4000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v34 = v55[0];
    v35 = *v9;
    v18 = 1;
    *v9 = 1;
    LODWORD(v55[0]) = -1;
    WORD2(v55[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v35;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v36);
      else
        *(_DWORD *)v34 -= 2;
    }
  }
  v37 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v37 && *(_BYTE *)(v37 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194CF0D98);
  }
  v38 = v37 - 192;
  if (!v37)
    v38 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v38 + 680) + 712) & 0x4000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v39 = v55[0];
    v40 = *v9;
    v18 = 1;
    *v9 = 1;
    LODWORD(v55[0]) = -1;
    WORD2(v55[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v40;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, v41);
      else
        *(_DWORD *)v39 -= 2;
    }
  }
  v42 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v42 && *(_BYTE *)(v42 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194CF0DB8);
  }
  v43 = v42 - 192;
  if (!v42)
    v43 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v43 + 680) + 712) & 0x4000000000000) != 0)
  {
    if (!v18)
      goto LABEL_69;
  }
  else
  {
    WTF::AtomStringImpl::addLiteral();
    v44 = v55[0];
    v45 = *v9;
    *v9 = 1;
    LODWORD(v55[0]) = -1;
    WORD2(v55[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v45;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
        WTF::StringImpl::destroy(v44, v46);
      else
        *(_DWORD *)v44 -= 2;
    }
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
    JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
LABEL_69:
  v47 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v49 = JSC::JSString::create((uint64_t)this, v55);
  v50 = v55[0];
  v55[0] = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, v48);
    else
      *(_DWORD *)v50 -= 2;
  }
  v51 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v59 = *(_DWORD *)SlowCase;
  v58 = v51;
  v52 = JSC::Structure::outOfLineCapacity(v51);
  v56 = 0;
  v57 = v52;
  v55[0] = (WTF::StringImpl *)&v57;
  v55[1] = (WTF::StringImpl *)SlowCase;
  v55[2] = this;
  v55[3] = (WTF::StringImpl *)&v59;
  v55[4] = (WTF::StringImpl *)&v58;
  v55[5] = (WTF::StringImpl *)&v56;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v51, this, v47, 6, (uint64_t)v55);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v56, v49);
  *((_DWORD *)v51 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSMathMLElement>,(WebCore::DOMConstructorID)707>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5656);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSElement>,(WebCore::DOMConstructorID)445>(a1, a2);
  v7 = v6;
  LODWORD(v22) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v20);
    v5[2] = SlowCase + (int)v20;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v22, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSMathMLElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v21 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v21);
    v10[2848] = v2 + (int)v21;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v22);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v22);
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v22);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v18 = WebCore::JSMathMLElement::prototype((WebCore::JSMathMLElement *)a1, (JSC::VM *)a2, v17);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v18, 14, (uint64_t)&v22);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5656) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsMathMLElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSMathMLElementPrototype::s_info != (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                               + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSMathMLElement>,(WebCore::DOMConstructorID)707>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsMathMLElement_style(WebCore *a1, WebCore::StyledElement **a2)
{
  JSC::JSGlobalObject *v3;
  WebCore::JSDOMGlobalObject *v4;
  WebCore::CSSStyleDeclaration *v5;

  v3 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = (WebCore::JSDOMGlobalObject *)WebCore::StyledElement::cssomStyle(a2[3], (WTF::StringImpl *)a2);
  return WebCore::toJS(a1, v3, v4, v5);
}

BOOL WebCore::setJSMathMLElement_style(JSC::JSGlobalObject *a1, JSC::Structure *a2, uint64_t a3)
{
  JSC::VM *v4;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  unint64_t v18[2];
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (((unint64_t)a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v7 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSMathMLElement::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSMathMLElement::s_info && v9 != 0);
  }
  if (!v8)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v22 = *((_QWORD *)a1 + 7);
  WTF::AtomStringImpl::addLiteral();
  v12 = (WTF::StringImpl *)v18[0];
  v13 = JSC::JSObject::get(a2, a1, v18[0]);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    goto LABEL_20;
  if ((v13 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v13 + 5) <= 0x16u)
  {
    JSC::throwTypeError();
LABEL_20:
    v16 = 0;
    goto LABEL_21;
  }
  WTF::AtomStringImpl::addLiteral();
  v14 = (WTF::StringImpl *)v18[0];
  v18[0] = 0;
  v18[1] = v13;
  v19 = -1;
  v20 = 0x1000000;
  v21 = 0;
  (*(void (**)(uint64_t, JSC::JSGlobalObject *, WTF::StringImpl *, uint64_t, unint64_t *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C) + 0x48))(v13, a1, v14, a3, v18);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
  {
    v16 = 0;
    if (!v14)
      goto LABEL_21;
  }
  else
  {
    v16 = 1;
    if (!v14)
      goto LABEL_21;
  }
  if (*(_DWORD *)v14 == 2)
    WTF::StringImpl::destroy(v14, v15);
  else
    *(_DWORD *)v14 -= 2;
LABEL_21:
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v15);
    else
      *(_DWORD *)v12 -= 2;
  }
  return v16;
}

unint64_t WebCore::jsMathMLElement_attributeStyleMap(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  JSC::VM *v5;
  JSC::VM *v6;
  WebCore::JSDOMGlobalObject *v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a2 + 32);
  if (!v2)
  {
    v5 = *(JSC::VM **)(a1 + 56);
    v6 = *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
    v7 = (WebCore::JSDOMGlobalObject *)WebCore::StyledElement::ensureAttributeStyleMap(*(WebCore::StyledElement **)(a2 + 24));
    v2 = WebCore::wrap<WebCore::StylePropertyMap>(a1, v6, v7);
    if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    {
      return 0;
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a2 + 32) = v2;
      if ((v2 & 0xFFFE000000000002) == 0 && v2 && *(_DWORD *)(v8 + 760) >= *(unsigned __int8 *)(a2 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v8 + 192), (const JSCell *)a2);
    }
  }
  return v2;
}

uint64_t WebCore::jsMathMLElement_onbeforecopy(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 224), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onbeforecopy(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 224), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onbeforecut(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 232), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onbeforecut(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 232), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onbeforeinput(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 240), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onbeforeinput(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 240), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onbeforepaste(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 256), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onbeforepaste(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 256), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onabort(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 64), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onabort(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 64), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onbeforetoggle(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 272), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onbeforetoggle(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 272), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onblur(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 304), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onblur(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 304), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_oncancel(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 344), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_oncancel(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 344), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_oncanplay(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 352), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_oncanplay(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 352), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_oncanplaythrough(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 360), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_oncanplaythrough(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 360), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onchange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 368), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onchange(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 368), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onclick(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 400), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onclick(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 400), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onclose(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 408), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onclose(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 408), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_oncontentvisibilityautostatechange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 488), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_oncontentvisibilityautostatechange(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 488), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_oncontextmenu(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 496), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_oncontextmenu(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 496), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_oncopy(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 528), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_oncopy(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 528), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_oncuechange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 544), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_oncuechange(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 544), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_oncut(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 560), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_oncut(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 560), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_ondblclick(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 584), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_ondblclick(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 584), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_ondrag(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 656), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_ondrag(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 656), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_ondragend(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 664), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_ondragend(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 664), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_ondragenter(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 672), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_ondragenter(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 672), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_ondragleave(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 680), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_ondragleave(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 680), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_ondragover(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 688), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_ondragover(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 688), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_ondragstart(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 696), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_ondragstart(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 696), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_ondrop(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 704), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_ondrop(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 704), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_ondurationchange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 712), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_ondurationchange(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 712), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onemptied(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 720), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onemptied(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 720), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onended(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 752), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onended(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 752), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onerror(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 784), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onerror(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 784), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onfocus(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 816), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onfocus(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 816), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onformdata(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 840), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onformdata(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 840), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_oninput(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1008), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_oninput(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1008), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_oninvalid(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1032), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_oninvalid(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1032), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onkeydown(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1048), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onkeydown(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1048), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onkeypress(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1056), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onkeypress(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1056), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onkeyup(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1072), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onkeyup(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1072), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onload(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1104), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onload(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1104), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onloadeddata(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1112), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onloadeddata(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1112), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onloadedmetadata(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1120), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onloadedmetadata(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1120), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onloadstart(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1160), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onloadstart(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1160), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onmousedown(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1208), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onmousedown(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1208), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onmouseenter(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  _BOOL4 v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 10;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSMathMLElement::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSMathMLElement::s_info && v7 != 0);
  }
  if (!v6)
    return 10;
  v10 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v10 + 24) += 2;
  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v11 || (v12 = *(_QWORD *)(v11 + 96)) == 0)
    v12 = WebCore::threadGlobalDataSlow(a1);
  v13 = *(_QWORD *)(v12 + 40);
  if (!v13)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v12);
    v13 = *(_QWORD *)(v12 + 40);
  }
  v15 = WebCore::eventHandlerAttribute((WebCore *)v10, (WebCore::EventTarget *)(v13 + 1216), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v10 + 24) == 2)
  {
    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v10, v14);
  }
  else
  {
    *(_DWORD *)(v10 + 24) -= 2;
  }
  return v15;
}

uint64_t WebCore::setJSMathMLElement_onmouseenter(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _BOOL4 v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSMathMLElement::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSMathMLElement::s_info && v7 != 0);
  }
  if (!v6)
    return 0;
  v10 = *((_QWORD *)a1 + 7);
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1216), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v10 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onmouseleave(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  _BOOL4 v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 10;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSMathMLElement::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSMathMLElement::s_info && v7 != 0);
  }
  if (!v6)
    return 10;
  v10 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v10 + 24) += 2;
  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v11 || (v12 = *(_QWORD *)(v11 + 96)) == 0)
    v12 = WebCore::threadGlobalDataSlow(a1);
  v13 = *(_QWORD *)(v12 + 40);
  if (!v13)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v12);
    v13 = *(_QWORD *)(v12 + 40);
  }
  v15 = WebCore::eventHandlerAttribute((WebCore *)v10, (WebCore::EventTarget *)(v13 + 1224), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v10 + 24) == 2)
  {
    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v10, v14);
  }
  else
  {
    *(_DWORD *)(v10 + 24) -= 2;
  }
  return v15;
}

uint64_t WebCore::setJSMathMLElement_onmouseleave(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _BOOL4 v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSMathMLElement::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSMathMLElement::s_info && v7 != 0);
  }
  if (!v6)
    return 0;
  v10 = *((_QWORD *)a1 + 7);
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1224), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v10 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onmousemove(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1232), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onmousemove(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1232), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onmouseout(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1240), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onmouseout(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1240), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onmouseover(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1248), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onmouseover(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1248), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onmouseup(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1256), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onmouseup(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1256), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onpaste(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1416), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onpaste(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1416), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onpause(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1424), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onpause(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1424), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onplay(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1464), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onplay(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1464), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onplaying(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1472), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onplaying(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1472), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onprogress(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1584), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onprogress(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1584), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onratechange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1624), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onratechange(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1624), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onreset(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1688), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onreset(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1688), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onresize(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1696), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onresize(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1696), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onscroll(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1736), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onscroll(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1736), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onsecuritypolicyviolation(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1752), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onsecuritypolicyviolation(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1752), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onseeked(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1760), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onseeked(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1760), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onseeking(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1768), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onseeking(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1768), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onselect(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1776), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onselect(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1776), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onslotchange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1864), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onslotchange(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1864), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onstalled(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1952), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onstalled(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1952), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onsubmit(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2008), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onsubmit(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 2008), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onsuspend(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2024), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onsuspend(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 2024), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_ontimeupdate(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2048), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_ontimeupdate(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 2048), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_ontoggle(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2056), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_ontoggle(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 2056), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onvolumechange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2264), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onvolumechange(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 2264), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onwaiting(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2272), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onwaiting(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 2272), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onwebkitanimationend(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2312), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onwebkitanimationend(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 2312), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onwebkitanimationiteration(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2320), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onwebkitanimationiteration(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 2320), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onwebkitanimationstart(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2328), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onwebkitanimationstart(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 2328), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onwebkittransitionend(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2344), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onwebkittransitionend(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 2344), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onwheel(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2512), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onwheel(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 2512), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onmousewheel(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1264), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onmousewheel(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1264), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onsearch(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1744), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onsearch(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1744), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_ontouchcancel(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2072), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_ontouchcancel(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 2072), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_ontouchend(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2080), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_ontouchend(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 2080), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_ontouchmove(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2096), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_ontouchmove(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 2096), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_ontouchstart(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2104), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_ontouchstart(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 2104), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_ontouchforcechange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2088), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_ontouchforcechange(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 2088), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onwebkitmouseforcechanged(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2416), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onwebkitmouseforcechanged(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 2416), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onwebkitmouseforcedown(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2424), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onwebkitmouseforcedown(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 2424), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onwebkitmouseforcewillbegin(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2440), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onwebkitmouseforcewillbegin(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 2440), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onwebkitmouseforceup(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2432), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onwebkitmouseforceup(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 2432), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onanimationstart(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 144), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onanimationstart(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 144), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onanimationiteration(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 136), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onanimationiteration(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 136), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onanimationend(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 128), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onanimationend(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 128), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onanimationcancel(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 120), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onanimationcancel(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 120), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_ontransitionrun(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2136), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_ontransitionrun(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 2136), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_ontransitionstart(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2144), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_ontransitionstart(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 2144), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_ontransitionend(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2128), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_ontransitionend(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 2128), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_ontransitioncancel(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 2120), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_ontransitioncancel(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 2120), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_ongotpointercapture(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 952), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_ongotpointercapture(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 952), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onlostpointercapture(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1168), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onlostpointercapture(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1168), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onpointerdown(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1488), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onpointerdown(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1488), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onpointermove(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1528), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onpointermove(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1528), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onpointerup(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1552), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onpointerup(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1552), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onpointercancel(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1480), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onpointercancel(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1480), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onpointerover(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1544), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onpointerover(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1544), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onpointerout(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1536), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onpointerout(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1536), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onpointerenter(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1496), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onpointerenter(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1496), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onpointerleave(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1504), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onpointerleave(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1504), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onselectstart(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1808), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onselectstart(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1808), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMathMLElement_onselectionchange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v8 + 1800), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::setJSMathMLElement_onselectionchange(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>((WebCore::EventTarget *)v11, (WTF::StringImpl **)(v14 + 1800), a3, (_DWORD *)a2);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v15);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

unint64_t WebCore::jsMathMLElement_dataset(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = (WTF *)WebCore::Element::dataset(*(WebCore::Element **)(a2 + 24));
  return WebCore::wrap<WebCore::DatasetDOMStringMap>(a1, v3, v4);
}

uint64_t WebCore::jsMathMLElement_nonce(uint64_t a1, uint64_t a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  WebCore::Element *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(WebCore::Element **)(a2 + 24);
  if ((*((_QWORD *)v5 + 9) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v15 = *(_QWORD *)(a2 + 24);
    v16 = a1;
    if (WebCore::Element::isNonceable(v5, (unsigned __int8 *)a2, a3, a4, a5))
      v6 = (uint64_t *)((*(_QWORD *)(v15 + 72) & 0xFFFFFFFFFFFFLL) + 216);
    else
      v6 = (uint64_t *)MEMORY[0x1E0CBF3B8];
    a1 = v16;
  }
  else
  {
    v6 = (uint64_t *)MEMORY[0x1E0CBF3B8];
  }
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *v6;
  if (!*v6)
    return *(_QWORD *)(v7 + 41968);
  v9 = *(_DWORD *)(v8 + 4);
  if (!v9)
    return *(_QWORD *)(v7 + 41968);
  if (v9 == 1)
  {
    v12 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v13 = *v12;
    }
    else
    {
      v14 = *(unsigned __int16 *)v12;
      if (v14 > 0xFF)
        goto LABEL_6;
      v13 = v14;
    }
    return *(_QWORD *)(v7 + 8 * v13 + 42216);
  }
LABEL_6:
  v10 = *(_QWORD *)(v7 + 64760);
  if (!v10 || v8 != *(_QWORD *)(v10 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v10;
}

BOOL WebCore::setJSMathMLElement_nonce(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  _QWORD *v8;
  int v9;
  _BOOL8 v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v14;
  int v15;
  WTF::StringImpl *v16;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSMathMLElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSMathMLElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(_QWORD **)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, (unint64_t)this, (uint64_t)&v14);
  v9 = v15;
  v10 = v15 == 0;
  if (!v15)
  {
    v11 = v14;
    v14 = 0;
    v16 = v11;
    WebCore::Element::setNonce(v8, (const WTF::AtomString *)&v16);
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v12);
      else
        *(_DWORD *)v11 -= 2;
    }
    v9 = v15;
  }
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32B5840[v9])(&v16, &v14);
  return v10;
}

uint64_t WebCore::jsMathMLElement_autofocus(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    return 6;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) != 0)
  {
    v4 = *(uint64_t **)(v2 + 40);
    LODWORD(v5) = *(_DWORD *)(v2 + 52);
    if (!(_DWORD)v5)
      return 6;
  }
  else
  {
    v4 = (uint64_t *)(v2 + 32);
    LODWORD(v5) = v3 >> 5;
    if (!(_DWORD)v5)
      return 6;
  }
  v5 = v5;
  result = 7;
  while (1)
  {
    v7 = *v4;
    if (*v4 == WebCore::HTMLNames::autofocusAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::autofocusAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::autofocusAttr + 32))
    {
      break;
    }
    v4 += 2;
    if (!--v5)
      return 6;
  }
  return result;
}

uint64_t WebCore::setJSMathMLElement_autofocus(uint64_t a1, uint64_t a2, unint64_t a3, __n128 a4)
{
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  double v11;
  _BOOL4 v12;
  WTF::StringImpl **v13;
  BOOL v15;
  int v16;
  uint64_t v17;
  int *v18;
  int v19;

  v5 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  if (a3 >= 0xFFFE000000000000)
  {
    v15 = (_DWORD)a3 == 0;
    goto LABEL_37;
  }
  *(_QWORD *)&v11 = a3 - 0x2000000000000;
  if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((a3 & 0xFFFE000000000002) != 0)
    {
      v12 = a3 == 7;
      goto LABEL_16;
    }
    v16 = *(unsigned __int8 *)(a3 + 5);
    if (v16 == 3)
    {
      v19 = *(_DWORD *)(a3 + 8);
    }
    else
    {
      if (v16 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v12 = 1;
          goto LABEL_16;
        }
        v15 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) == a1;
        goto LABEL_37;
      }
      v17 = *(_QWORD *)(a3 + 8);
      if ((v17 & 1) != 0)
        v18 = (int *)(a3 + 16);
      else
        v18 = (int *)(v17 + 4);
      v19 = *v18;
    }
    v15 = v19 == 0;
LABEL_37:
    v12 = !v15;
    goto LABEL_16;
  }
  a4.n128_u64[0] = a3 - 0x2000000000000;
  v12 = v11 > 0.0 || v11 < 0.0;
LABEL_16:
  v13 = *(WTF::StringImpl ***)(a2 + 24);
  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    return 0;
  WebCore::Element::setBooleanAttribute(v13, (const WebCore::QualifiedName *)&WebCore::HTMLNames::autofocusAttr, v12, a4);
  return 1;
}

unint64_t WebCore::jsMathMLElement_tabIndex(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 584))(*(_QWORD *)(a2 + 24)) | 0xFFFE000000000000;
}

BOOL WebCore::setJSMathMLElement_tabIndex(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::Element *v11;
  void *v12;
  uint64_t v13;
  WTF *v14;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  JSC::VM *v24;
  unint64_t v25;
  WTF *v26;
  uint64_t v27;
  _BYTE v28[40];
  uint64_t v29;
  JSC::JSGlobalObject *v30;
  unint64_t v31;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = a3;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMathMLElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMathMLElement::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(WebCore::Element **)(a2 + 24);
  v26 = (WTF *)v28;
  v27 = 4;
  v28[32] = 0;
  v29 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v30 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v26;
  v31 = a3;
  if (a3 < 0xFFFE000000000000)
  {
    v17 = a3 - 0x2000000000000;
    if (a3 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      v24 = v4;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v31, a1);
      v4 = v24;
      v17 = v25;
    }
    v18 = (v17 >> 52) & 0x7FF;
    if ((v18 - 1023) <= 0x53)
    {
      v19 = v17 >> (51 - (v17 >> 52));
      if (v18 > 0x433)
        LODWORD(v19) = v17 << ((v17 >> 52) - 51);
      if (v18 >= 0x41F)
        v20 = v19;
      else
        v20 = (((1 << ((v17 >> 52) + 1)) - 1) & v19) + (1 << ((v17 >> 52) + 1));
      if ((v17 & 0x8000000000000000) == 0)
        v5 = v20;
      else
        v5 = -v20;
    }
    else
    {
      v5 = 0;
    }
  }
  if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
  {
    v13 = 0;
  }
  else
  {
    WebCore::Element::setIntegralAttribute(v11, (const WebCore::QualifiedName *)&WebCore::HTMLNames::tabindexAttr, (WTF::AtomString *)v5);
    v13 = 1;
  }
  if (HIDWORD(v27))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v26, v30);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v29;
    if (HIDWORD(v27))
    {
      v21 = v26;
      v22 = 8 * HIDWORD(v27);
      do
      {
        v23 = *(_QWORD *)v21;
        *(_QWORD *)v21 = 0;
        if (v23)
        {
          if (*(_DWORD *)(v23 + 24) == 2)
          {
            if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v23, v12);
          }
          else
          {
            *(_DWORD *)(v23 + 24) -= 2;
          }
        }
        v21 = (WTF *)((char *)v21 + 8);
        v22 -= 8;
      }
      while (v22);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v29;
  }
  v14 = v26;
  if (v28 != (_BYTE *)v26 && v26 != 0)
  {
    v26 = 0;
    LODWORD(v27) = 0;
    WTF::fastFree(v14, v12);
  }
  return v13;
}

unint64_t WebCore::createJSMathMLWrapper(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  WebCore::JSMathMLElement *v15;
  JSC::JSCell *v16;
  unint64_t v17;
  WebCore::JSDOMGlobalObject *v18;
  JSC::Structure *v19;
  JSC::JSCell *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char **v34;
  int v35;
  unint64_t v36;
  WebCore::JSElement *v37;
  JSC::JSCell *v38;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v40;
  JSC::Structure *v41;
  JSC::JSCell *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  WTF *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  WTF *v59;
  void *v60;
  int v61;
  unint64_t SlowCase;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  WTF *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  WTF *v72;
  void *v73;
  int v74;
  WTF *v75;
  uint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *Allocator;
  uint64_t v81;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  WTF *v90;

  v5 = *a2;
  if (*(_WORD *)(*((_QWORD *)*a2 + 12) + 10) != 138)
  {
    v28 = *((_QWORD *)a1 + 412);
    if (v28)
    {
      v29 = *(_DWORD *)(v28 - 8);
      v30 = ((unint64_t)&WebCore::JSMathMLElement::s_info + ~((_QWORD)&WebCore::JSMathMLElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSMathMLElement::s_info + ~((_QWORD)&WebCore::JSMathMLElement::s_info << 32)) >> 22);
      v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
      v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
      v33 = v29 & ((v32 >> 31) ^ v32);
      v34 = *(char ***)(v28 + 16 * v33);
      if (v34 == &WebCore::JSMathMLElement::s_info)
      {
LABEL_17:
        v36 = *(_QWORD *)(v28 + 16 * v33 + 8);
        if (v36)
          goto LABEL_19;
      }
      else
      {
        v35 = 1;
        while (v34)
        {
          v33 = ((_DWORD)v33 + v35) & v29;
          v34 = *(char ***)(v28 + 16 * v33);
          ++v35;
          if (v34 == &WebCore::JSMathMLElement::s_info)
            goto LABEL_17;
        }
      }
    }
    v37 = (WebCore::JSElement *)*((_QWORD *)a1 + 7);
    v38 = (JSC::JSCell *)WebCore::JSElement::prototype(v37, a1, a3);
    Structure = WebCore::JSMathMLElementPrototype::createStructure((uint64_t *)v37, (uint64_t)a1, v38);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v42 = (JSC::JSCell *)WebCore::JSMathMLElementPrototype::create(v37, Structure, v40, v41);
    v43 = WebCore::JSMathMLElement::createStructure((uint64_t *)v37, (uint64_t)a1, v42);
    v36 = WebCore::cacheDOMStructure((JSCell *)a1, v43, (uint64_t)&WebCore::JSMathMLElement::s_info);
LABEL_19:
    v44 = *((_QWORD *)a1 + 7);
    v45 = *(_QWORD *)(v44 + 41456);
    v46 = *(_QWORD *)(v45 + 23536);
    v47 = *(_QWORD **)(v46 + 5736);
    if (v47)
      goto LABEL_66;
    v48 = *(_QWORD *)(v45 + 22648);
    if (__ldaxr((unsigned __int8 *)v48))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v48))
    {
      goto LABEL_48;
    }
    MEMORY[0x19AEA534C](v48);
LABEL_48:
    v63 = *(_QWORD *)(v48 + 2824);
    v88 = *(_QWORD *)(v63 + 5736);
    if (!v88)
    {
      v64 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)&v90, "IsoSpace T");
      v89 = 0;
      MEMORY[0x19AEA3204](v64, &v90, v44 + 192, v44 + 1872, 40, 8, &v89);
      v66 = (uint64_t)v89;
      v89 = 0;
      if (v66)
        (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
      v67 = v90;
      v90 = 0;
      if (v67)
      {
        if (*(_DWORD *)v67 == 1)
          WTF::fastFree(v67, v65);
        else
          --*(_DWORD *)v67;
      }
      v88 = v64;
      v68 = *(_QWORD *)(v63 + 5736);
      *(_QWORD *)(v63 + 5736) = v64;
      if (v68)
        (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
      v69 = *(unsigned int *)(v48 + 2844);
      if ((_DWORD)v69 == *(_DWORD *)(v48 + 2840))
      {
        v70 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v48 + 2832, v69 + 1, (unint64_t)&v88);
        v69 = *(unsigned int *)(v48 + 2844);
        *(_QWORD *)(*(_QWORD *)(v48 + 2832) + 8 * v69) = *v70;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(v48 + 2832) + 8 * v69) = v64;
      }
      *(_DWORD *)(v48 + 2844) = v69 + 1;
    }
    v47 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v71 = *(_QWORD *)(v46 + 5736);
    *(_QWORD *)(v46 + 5736) = v47;
    if (v71)
    {
      v72 = (WTF *)MEMORY[0x19AEA3528]();
      WTF::fastFree(v72, v73);
    }
    v74 = __ldxr((unsigned __int8 *)v48);
    if (v74 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v48))
      {
LABEL_66:
        SlowCase = v47[3];
        if (SlowCase >= v47[4])
        {
          SlowCase = v47[5];
          if ((SlowCase & 1) != 0)
          {
            JSC::sanitizeStackForVM();
            SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_68:
            *(_DWORD *)SlowCase = 0;
            v75 = *a2;
            *a2 = 0;
            WebCore::JSDOMObject::JSDOMObject(SlowCase, v36);
            *(_QWORD *)(SlowCase + 24) = v75;
            *(_QWORD *)(SlowCase + 32) = 0;
            if (!*(_BYTE *)(v44 + 755))
              goto LABEL_70;
            goto LABEL_69;
          }
          v87 = *(_QWORD *)(SlowCase + 8) ^ v47[6];
          v47[4] = SlowCase + HIDWORD(v87);
          v47[5] = SlowCase + (int)v87;
        }
        v47[3] = SlowCase + 48;
        goto LABEL_68;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v48);
    goto LABEL_66;
  }
  *a2 = 0;
  v6 = *((_QWORD *)a1 + 412);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = ((unint64_t)&WebCore::JSMathMLMathElement::s_info
        + ~((_QWORD)&WebCore::JSMathMLMathElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSMathMLMathElement::s_info
                                                                    + ~((_QWORD)&WebCore::JSMathMLMathElement::s_info << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(char ***)(v6 + 16 * v11);
    if (v12 == &WebCore::JSMathMLMathElement::s_info)
    {
LABEL_7:
      v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
      if (v14)
        goto LABEL_9;
    }
    else
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(char ***)(v6 + 16 * v11);
        ++v13;
        if (v12 == &WebCore::JSMathMLMathElement::s_info)
          goto LABEL_7;
      }
    }
  }
  v15 = (WebCore::JSMathMLElement *)*((_QWORD *)a1 + 7);
  v16 = (JSC::JSCell *)WebCore::JSMathMLElement::prototype(v15, a1, a3);
  v17 = WebCore::JSMathMLMathElementPrototype::createStructure((uint64_t *)v15, (uint64_t)a1, v16);
  *(_DWORD *)(v17 + 16) |= 0x80000u;
  v20 = (JSC::JSCell *)WebCore::JSMathMLMathElementPrototype::create(v15, v17, v18, v19);
  v21 = WebCore::JSMathMLMathElement::createStructure((uint64_t *)v15, (uint64_t)a1, v20);
  v14 = WebCore::cacheDOMStructure((JSCell *)a1, v21, (uint64_t)&WebCore::JSMathMLMathElement::s_info);
LABEL_9:
  v22 = *((_QWORD *)a1 + 7);
  v23 = *(_QWORD *)(v22 + 41456);
  v24 = *(_QWORD *)(v23 + 23536);
  v25 = *(_QWORD **)(v24 + 5744);
  if (v25)
    goto LABEL_42;
  v26 = *(_QWORD *)(v23 + 22648);
  if (__ldaxr((unsigned __int8 *)v26))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v26))
  {
    goto LABEL_24;
  }
  MEMORY[0x19AEA534C](v26);
LABEL_24:
  v50 = *(_QWORD *)(v26 + 2824);
  v88 = *(_QWORD *)(v50 + 5744);
  if (!v88)
  {
    v51 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v90, "IsoSpace T");
    v89 = 0;
    MEMORY[0x19AEA3204](v51, &v90, v22 + 192, v22 + 1872, 40, 8, &v89);
    v53 = (uint64_t)v89;
    v89 = 0;
    if (v53)
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
    v54 = v90;
    v90 = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 1)
        WTF::fastFree(v54, v52);
      else
        --*(_DWORD *)v54;
    }
    v88 = v51;
    v55 = *(_QWORD *)(v50 + 5744);
    *(_QWORD *)(v50 + 5744) = v51;
    if (v55)
      (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
    v56 = *(unsigned int *)(v26 + 2844);
    if ((_DWORD)v56 == *(_DWORD *)(v26 + 2840))
    {
      v57 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v26 + 2832, v56 + 1, (unint64_t)&v88);
      v56 = *(unsigned int *)(v26 + 2844);
      *(_QWORD *)(*(_QWORD *)(v26 + 2832) + 8 * v56) = *v57;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v26 + 2832) + 8 * v56) = v51;
    }
    *(_DWORD *)(v26 + 2844) = v56 + 1;
  }
  v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v58 = *(_QWORD *)(v24 + 5744);
  *(_QWORD *)(v24 + 5744) = v25;
  if (v58)
  {
    v59 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v59, v60);
  }
  v61 = __ldxr((unsigned __int8 *)v26);
  if (v61 != 1)
  {
    __clrex();
    goto LABEL_41;
  }
  if (__stlxr(0, (unsigned __int8 *)v26))
LABEL_41:
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
LABEL_42:
  SlowCase = v25[3];
  if (SlowCase < v25[4])
  {
LABEL_43:
    v25[3] = SlowCase + 48;
    goto LABEL_44;
  }
  SlowCase = v25[5];
  if ((SlowCase & 1) == 0)
  {
    v86 = *(_QWORD *)(SlowCase + 8) ^ v25[6];
    v25[4] = SlowCase + HIDWORD(v86);
    v25[5] = SlowCase + (int)v86;
    goto LABEL_43;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_44:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v14);
  *(_QWORD *)(SlowCase + 24) = v5;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (!*(_BYTE *)(v22 + 755))
    goto LABEL_70;
LABEL_69:
  __dmb(0xAu);
LABEL_70:
  v76 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (v5)
    v77 = (uint64_t *)((char *)v5 + 8);
  else
    v77 = 0;
  if (!*(_DWORD *)(v76 + 48))
  {
    if ((SlowCase & 8) != 0)
      v78 = (SlowCase - 112) | 1;
    else
      v78 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v78 & 1) != 0)
      v79 = v78 + 47;
    else
      v79 = *(_QWORD *)v78 + 32;
    Allocator = *(_QWORD **)(v79 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v79 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v76;
    v81 = *v77;
    *v77 = (uint64_t)Allocator;
    if (!v81)
      return SlowCase;
LABEL_93:
    *(_QWORD *)(v81 + 8) = 3;
    return SlowCase;
  }
  v90 = v5;
  if ((SlowCase & 8) != 0)
    v83 = (SlowCase - 112) | 1;
  else
    v83 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v83 & 1) != 0)
    v84 = v83 + 47;
  else
    v84 = *(_QWORD *)v83 + 32;
  v85 = *(_QWORD **)(v84 + 16);
  if (!v85)
    v85 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v84 + 16) = *v85;
  *v85 = SlowCase;
  v85[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
  v85[2] = v76;
  v89 = v85;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v76 + 32), (uint64_t *)&v90, (uint64_t *)&v89);
  v81 = (uint64_t)v89;
  if (v89)
    goto LABEL_93;
  return SlowCase;
}

uint64_t WebCore::JSMathMLMathElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSMathMLElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSMathMLElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSMathMLElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSMathMLMathElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSMathMLMathElementPrototype::create(WebCore::JSMathMLMathElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSMathMLMathElement::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSMathMLMathElementPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSMathMLMathElement>,(WebCore::DOMConstructorID)708>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5664);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSMathMLElement>,(WebCore::DOMConstructorID)707>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSMathMLMathElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSMathMLMathElement::s_info
         + ~((_QWORD)&WebCore::JSMathMLMathElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSMathMLMathElement::s_info
                                                                     + ~((_QWORD)&WebCore::JSMathMLMathElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSMathMLMathElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSMathMLMathElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSMathMLElement::prototype((WebCore::JSMathMLElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSMathMLMathElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSMathMLMathElementPrototype::create((WebCore::JSMathMLMathElementPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSMathMLMathElement::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSMathMLMathElement::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5664) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsMathMLMathElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSMathMLMathElementPrototype::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSMathMLMathElement>,(WebCore::DOMConstructorID)708>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSMediaCapabilities::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSMediaCapabilitiesPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSMediaCapabilitiesPrototype::create(WebCore::JSMediaCapabilitiesPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSMediaCapabilities::s_info, &WebCore::JSMediaCapabilitiesPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaCapabilities>,(WebCore::DOMConstructorID)118>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 944);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaCapabilities>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSMediaCapabilities::s_info
         + ~((_QWORD)&WebCore::JSMediaCapabilities::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaCapabilities::s_info
                                                                     + ~((_QWORD)&WebCore::JSMediaCapabilities::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSMediaCapabilities::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSMediaCapabilities::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSMediaCapabilitiesPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSMediaCapabilitiesPrototype::create((WebCore::JSMediaCapabilitiesPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSMediaCapabilities::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSMediaCapabilities::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 944) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsMediaCapabilitiesConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSMediaCapabilitiesPrototype::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaCapabilities>,(WebCore::DOMConstructorID)118>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSMediaCapabilitiesOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

unint64_t WebCore::wrap<WebCore::MediaCapabilities>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSMediaCapabilities::s_info
         + ~((_QWORD)&WebCore::JSMediaCapabilities::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaCapabilities::s_info
                                                                     + ~((_QWORD)&WebCore::JSMediaCapabilities::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSMediaCapabilities::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSMediaCapabilities::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSMediaCapabilitiesPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSMediaCapabilitiesPrototype::create((WebCore::JSMediaCapabilitiesPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSMediaCapabilities::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSMediaCapabilities::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 968);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 968))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 968);
    *(_QWORD *)(v36 + 968) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 968);
  *(_QWORD *)(v32 + 968) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE335F50 & 1) == 0)
  {
    qword_1EE335F48 = (uint64_t)&off_1E32B33B0;
    byte_1EE335F50 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE335F48;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

unint64_t WebCore::convertDictionaryToJS(uint64_t a1, WebCore::JSDOMGlobalObject *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  unint64_t v23;
  size_t v24;
  unint64_t v25;
  int v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  _DWORD *v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  unsigned __int8 *v52;
  unsigned int v53;
  unsigned int v54;
  _DWORD *v55;
  __int128 v56;
  __int128 v57;
  char v58;
  _DWORD *v59;
  _DWORD *v60;
  _OWORD v61[2];
  char v62;
  __int16 v63;
  WTF::StringImpl *v64;
  unint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  __int16 v69;
  char v70;
  WTF::StringImpl *v71;
  _BYTE v72[34];

  v6 = *(_QWORD *)(a1 + 56);
  v7 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v8 = 8 * *(unsigned __int8 *)(v7 + 14);
  v9 = JSC::allocateCell<JSC::JSFinalObject>(v6, v8 + 16);
  v10 = *(_DWORD *)(v7 + 8);
  *(_DWORD *)v9 = v7 >> 4;
  *(_DWORD *)(v9 + 4) = v10;
  *(_QWORD *)(v9 + 8) = 0;
  bzero((void *)(v9 + 16), v8);
  if (*(_BYTE *)(v6 + 755))
    __dmb(0xAu);
  if (*(_BYTE *)(a3 + 2))
    v11 = 7;
  else
    v11 = 6;
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v12 = v64;
  v64 = 0;
  v65 = v9;
  v66 = -1;
  v67 = 0x1000000;
  v68 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v12, v11, 0, (uint64_t)&v64);
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v13);
    else
      *(_DWORD *)v12 -= 2;
  }
  v14 = *(_BYTE *)(a3 + 1) ? 7 : 6;
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v15 = v64;
  v64 = 0;
  v65 = v9;
  v66 = -1;
  v67 = 0x1000000;
  v68 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v15, v14, 0, (uint64_t)&v64);
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v16);
    else
      *(_DWORD *)v15 -= 2;
  }
  v17 = *(_BYTE *)a3 ? 7 : 6;
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v18 = v64;
  v64 = 0;
  v65 = v9;
  v66 = -1;
  v67 = 0x1000000;
  v68 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v18, v17, 0, (uint64_t)&v64);
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v19);
    else
      *(_DWORD *)v18 -= 2;
  }
  v20 = WebCore::JSDOMGlobalObject::scriptExecutionContext(a2);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 136))(v20) + 456) & 0x40) == 0)
    return v9;
  WebCore::MediaConfiguration::MediaConfiguration((uint64_t)&v64, a3 + 8);
  v69 = *(_WORD *)(a3 + 160);
  v70 = 1;
  WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)&v64, v21);
  WebCore::MediaConfiguration::MediaConfiguration((uint64_t)&v64, a3 + 8);
  v69 = *(_WORD *)(a3 + 160);
  v70 = 1;
  WebCore::MediaConfiguration::MediaConfiguration((uint64_t)&v55, (uint64_t)&v64);
  v63 = v69;
  v22 = *(_QWORD *)(a1 + 56);
  v23 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v24 = 8 * *(unsigned __int8 *)(v23 + 14);
  v25 = JSC::allocateCell<JSC::JSFinalObject>(v22, v24 + 16);
  v26 = *(_DWORD *)(v23 + 8);
  *(_DWORD *)v25 = v23 >> 4;
  *(_DWORD *)(v25 + 4) = v26;
  *(_QWORD *)(v25 + 8) = 0;
  bzero((void *)(v25 + 16), v24);
  if (*(_BYTE *)(v22 + 755))
    __dmb(0xAu);
  if (v62)
  {
    v28 = (uint64_t)v59;
    if (v59)
      *v59 += 2;
    v71 = (WTF::StringImpl *)v28;
    v29 = v60;
    if (v60)
      *v60 += 2;
    *(_QWORD *)v72 = v29;
    *(_OWORD *)&v72[8] = v61[0];
    *(_OWORD *)&v72[18] = *(_OWORD *)((char *)v61 + 10);
    v31 = WebCore::convertDictionaryToJS(a1, (uint64_t)a2, (uint64_t *)&v71);
    v32 = *(WTF::StringImpl **)v72;
    *(_QWORD *)v72 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v30);
      else
        *(_DWORD *)v32 -= 2;
    }
    v33 = v71;
    v71 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v30);
      else
        *(_DWORD *)v33 -= 2;
    }
    if (*(_DWORD *)(v22 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v22) & 1) != 0)
      goto LABEL_104;
    WTF::AtomStringImpl::addLiteral();
    v34 = v71;
    v71 = 0;
    *(_QWORD *)v72 = v25;
    *(_DWORD *)&v72[8] = -1;
    *(_DWORD *)&v72[12] = 0x1000000;
    *(_QWORD *)&v72[16] = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v25, (JSC::VM *)v22, (unint64_t)v34, v31, 0, (uint64_t)&v71);
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v27);
      else
        *(_DWORD *)v34 -= 2;
    }
  }
  if (v58)
  {
    v35 = (uint64_t)v55;
    if (v55)
      *v55 += 2;
    v71 = (WTF::StringImpl *)v35;
    *(_OWORD *)v72 = v56;
    *(_OWORD *)&v72[16] = v57;
    v37 = WebCore::convertDictionaryToJS(a1, a2, (uint64_t *)&v71);
    v38 = v71;
    v71 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v36);
      else
        *(_DWORD *)v38 -= 2;
    }
    if (*(_DWORD *)(v22 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v22) & 1) != 0)
      goto LABEL_104;
    WTF::AtomStringImpl::addLiteral();
    v39 = v71;
    v71 = 0;
    *(_QWORD *)v72 = v25;
    *(_DWORD *)&v72[8] = -1;
    *(_DWORD *)&v72[12] = 0x1000000;
    *(_QWORD *)&v72[16] = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v25, (JSC::VM *)v22, (unint64_t)v39, v37, 0, (uint64_t)&v71);
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, v27);
      else
        *(_DWORD *)v39 -= 2;
    }
  }
  v40 = *(_QWORD *)(a1 + 56);
  v41 = (uint64_t *)(v40 + 41968);
  if ((byte_1EE335F2B & 1) == 0)
  {
    dword_1ECE78DF0 += 2;
    byte_1EE335F2B = 1;
    dword_1ECE78E10 += 2;
    qword_1EE336098 = (uint64_t)&dword_1ECE78DF0;
    unk_1EE3360A0 = &dword_1ECE78E10;
    dword_1ECE78E30 += 2;
    qword_1EE3360A8 = (uint64_t)&dword_1ECE78E30;
  }
  v42 = *(_QWORD *)&_MergedGlobals_685[8 * v63 + 368];
  if (!v42)
  {
    v45 = *v41;
    goto LABEL_62;
  }
  v43 = *(_DWORD *)v42;
  v44 = *(_DWORD *)(v42 + 4);
  *(_DWORD *)v42 += 2;
  if (v44)
  {
    if (v44 != 1)
    {
LABEL_57:
      v45 = *(_QWORD *)(v40 + 64760);
      if (!v45 || v42 != *(_QWORD *)(v45 + 8))
      {
        v45 = JSC::jsStringWithCacheSlowCase();
        v43 = *(_DWORD *)v42 - 2;
      }
      goto LABEL_60;
    }
    v52 = *(unsigned __int8 **)(v42 + 8);
    if ((*(_BYTE *)(v42 + 16) & 4) != 0)
    {
      v53 = *v52;
    }
    else
    {
      v54 = *(unsigned __int16 *)v52;
      if (v54 > 0xFF)
        goto LABEL_57;
      v53 = v54;
    }
    v45 = *(_QWORD *)(v40 + 8 * v53 + 42216);
  }
  else
  {
    v45 = *v41;
  }
LABEL_60:
  if (v43)
    *(_DWORD *)v42 = v43;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v42, v27);
LABEL_62:
  if (!*(_DWORD *)(v22 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v22) & 1) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v46 = v71;
    v71 = 0;
    *(_QWORD *)v72 = v25;
    *(_DWORD *)&v72[8] = -1;
    *(_DWORD *)&v72[12] = 0x1000000;
    *(_QWORD *)&v72[16] = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v25, (JSC::VM *)v22, (unint64_t)v46, v45, 0, (uint64_t)&v71);
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, v47);
      else
        *(_DWORD *)v46 -= 2;
    }
    goto LABEL_66;
  }
LABEL_104:
  v25 = 0;
LABEL_66:
  WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)&v55, v47);
  if (v70)
    WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)&v64, v48);
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v49 = v64;
  v64 = 0;
  v65 = v9;
  v66 = -1;
  v67 = 0x1000000;
  v68 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v49, v25, 0, (uint64_t)&v64);
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, v50);
    else
      *(_DWORD *)v49 -= 2;
  }
  return v9;
}

unint64_t WebCore::convertDictionaryToJS(uint64_t a1, WebCore::JSDOMGlobalObject *a2, _BYTE *a3)
{
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  unint64_t v23;
  size_t v24;
  unint64_t v25;
  int v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  _DWORD *v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  unsigned __int8 *v52;
  unsigned int v53;
  unsigned int v54;
  _DWORD *v55;
  __int128 v56;
  __int128 v57;
  char v58;
  _DWORD *v59;
  _DWORD *v60;
  _OWORD v61[2];
  char v62;
  unsigned __int8 v63;
  WTF::StringImpl *v64;
  unint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  unsigned __int8 v69;
  char v70;
  WTF::StringImpl *v71;
  _BYTE v72[34];

  v6 = *(_QWORD *)(a1 + 56);
  v7 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v8 = 8 * *(unsigned __int8 *)(v7 + 14);
  v9 = JSC::allocateCell<JSC::JSFinalObject>(v6, v8 + 16);
  v10 = *(_DWORD *)(v7 + 8);
  *(_DWORD *)v9 = v7 >> 4;
  *(_DWORD *)(v9 + 4) = v10;
  *(_QWORD *)(v9 + 8) = 0;
  bzero((void *)(v9 + 16), v8);
  if (*(_BYTE *)(v6 + 755))
    __dmb(0xAu);
  if (a3[2])
    v11 = 7;
  else
    v11 = 6;
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v12 = v64;
  v64 = 0;
  v65 = v9;
  v66 = -1;
  v67 = 0x1000000;
  v68 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v12, v11, 0, (uint64_t)&v64);
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v13);
    else
      *(_DWORD *)v12 -= 2;
  }
  v14 = a3[1] ? 7 : 6;
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v15 = v64;
  v64 = 0;
  v65 = v9;
  v66 = -1;
  v67 = 0x1000000;
  v68 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v15, v14, 0, (uint64_t)&v64);
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v16);
    else
      *(_DWORD *)v15 -= 2;
  }
  v17 = *a3 ? 7 : 6;
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v18 = v64;
  v64 = 0;
  v65 = v9;
  v66 = -1;
  v67 = 0x1000000;
  v68 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v18, v17, 0, (uint64_t)&v64);
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v19);
    else
      *(_DWORD *)v18 -= 2;
  }
  v20 = WebCore::JSDOMGlobalObject::scriptExecutionContext(a2);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 136))(v20) + 456) & 0x40) == 0)
    return v9;
  WebCore::MediaConfiguration::MediaConfiguration((uint64_t)&v64, (uint64_t)(a3 + 8));
  v69 = a3[160];
  v70 = 1;
  WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)&v64, v21);
  WebCore::MediaConfiguration::MediaConfiguration((uint64_t)&v64, (uint64_t)(a3 + 8));
  v69 = a3[160];
  v70 = 1;
  WebCore::MediaConfiguration::MediaConfiguration((uint64_t)&v55, (uint64_t)&v64);
  v63 = v69;
  v22 = *(_QWORD *)(a1 + 56);
  v23 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v24 = 8 * *(unsigned __int8 *)(v23 + 14);
  v25 = JSC::allocateCell<JSC::JSFinalObject>(v22, v24 + 16);
  v26 = *(_DWORD *)(v23 + 8);
  *(_DWORD *)v25 = v23 >> 4;
  *(_DWORD *)(v25 + 4) = v26;
  *(_QWORD *)(v25 + 8) = 0;
  bzero((void *)(v25 + 16), v24);
  if (*(_BYTE *)(v22 + 755))
    __dmb(0xAu);
  if (v62)
  {
    v28 = (uint64_t)v59;
    if (v59)
      *v59 += 2;
    v71 = (WTF::StringImpl *)v28;
    v29 = v60;
    if (v60)
      *v60 += 2;
    *(_QWORD *)v72 = v29;
    *(_OWORD *)&v72[8] = v61[0];
    *(_OWORD *)&v72[18] = *(_OWORD *)((char *)v61 + 10);
    v31 = WebCore::convertDictionaryToJS(a1, (uint64_t)a2, (uint64_t *)&v71);
    v32 = *(WTF::StringImpl **)v72;
    *(_QWORD *)v72 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v30);
      else
        *(_DWORD *)v32 -= 2;
    }
    v33 = v71;
    v71 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v30);
      else
        *(_DWORD *)v33 -= 2;
    }
    if (*(_DWORD *)(v22 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v22) & 1) != 0)
      goto LABEL_104;
    WTF::AtomStringImpl::addLiteral();
    v34 = v71;
    v71 = 0;
    *(_QWORD *)v72 = v25;
    *(_DWORD *)&v72[8] = -1;
    *(_DWORD *)&v72[12] = 0x1000000;
    *(_QWORD *)&v72[16] = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v25, (JSC::VM *)v22, (unint64_t)v34, v31, 0, (uint64_t)&v71);
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v27);
      else
        *(_DWORD *)v34 -= 2;
    }
  }
  if (v58)
  {
    v35 = (uint64_t)v55;
    if (v55)
      *v55 += 2;
    v71 = (WTF::StringImpl *)v35;
    *(_OWORD *)v72 = v56;
    *(_OWORD *)&v72[16] = v57;
    v37 = WebCore::convertDictionaryToJS(a1, a2, (uint64_t *)&v71);
    v38 = v71;
    v71 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v36);
      else
        *(_DWORD *)v38 -= 2;
    }
    if (*(_DWORD *)(v22 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v22) & 1) != 0)
      goto LABEL_104;
    WTF::AtomStringImpl::addLiteral();
    v39 = v71;
    v71 = 0;
    *(_QWORD *)v72 = v25;
    *(_DWORD *)&v72[8] = -1;
    *(_DWORD *)&v72[12] = 0x1000000;
    *(_QWORD *)&v72[16] = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v25, (JSC::VM *)v22, (unint64_t)v39, v37, 0, (uint64_t)&v71);
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, v27);
      else
        *(_DWORD *)v39 -= 2;
    }
  }
  v40 = *(_QWORD *)(a1 + 56);
  v41 = (uint64_t *)(v40 + 41968);
  if ((byte_1EE335F2D & 1) == 0)
  {
    dword_1ECE78EB0 += 2;
    byte_1EE335F2D = 1;
    qword_1EE336048 = (uint64_t)&dword_1ECE78EB0;
    dword_1ECE78ED0 += 2;
    qword_1EE336050 = (uint64_t)&dword_1ECE78ED0;
  }
  v42 = *(_QWORD *)&_MergedGlobals_685[8 * v63 + 288];
  if (!v42)
  {
    v45 = *v41;
    goto LABEL_62;
  }
  v43 = *(_DWORD *)v42;
  v44 = *(_DWORD *)(v42 + 4);
  *(_DWORD *)v42 += 2;
  if (v44)
  {
    if (v44 != 1)
    {
LABEL_57:
      v45 = *(_QWORD *)(v40 + 64760);
      if (!v45 || v42 != *(_QWORD *)(v45 + 8))
      {
        v45 = JSC::jsStringWithCacheSlowCase();
        v43 = *(_DWORD *)v42 - 2;
      }
      goto LABEL_60;
    }
    v52 = *(unsigned __int8 **)(v42 + 8);
    if ((*(_BYTE *)(v42 + 16) & 4) != 0)
    {
      v53 = *v52;
    }
    else
    {
      v54 = *(unsigned __int16 *)v52;
      if (v54 > 0xFF)
        goto LABEL_57;
      v53 = v54;
    }
    v45 = *(_QWORD *)(v40 + 8 * v53 + 42216);
  }
  else
  {
    v45 = *v41;
  }
LABEL_60:
  if (v43)
    *(_DWORD *)v42 = v43;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v42, v27);
LABEL_62:
  if (!*(_DWORD *)(v22 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v22) & 1) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v46 = v71;
    v71 = 0;
    *(_QWORD *)v72 = v25;
    *(_DWORD *)&v72[8] = -1;
    *(_DWORD *)&v72[12] = 0x1000000;
    *(_QWORD *)&v72[16] = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v25, (JSC::VM *)v22, (unint64_t)v46, v45, 0, (uint64_t)&v71);
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, v47);
      else
        *(_DWORD *)v46 -= 2;
    }
    goto LABEL_66;
  }
LABEL_104:
  v25 = 0;
LABEL_66:
  WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)&v55, v47);
  if (v70)
    WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)&v64, v48);
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v49 = v64;
  v64 = 0;
  v65 = v9;
  v66 = -1;
  v67 = 0x1000000;
  v68 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v49, v25, 0, (uint64_t)&v64);
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, v50);
    else
      *(_DWORD *)v49 -= 2;
  }
  return v9;
}

{
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  unsigned __int8 *v53;
  unsigned int v54;
  unsigned __int8 *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  WTF::StringImpl *v59;
  unint64_t v60;
  int v61;
  int v62;
  uint64_t v63;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v8 = 8 * *(unsigned __int8 *)(v7 + 14);
  v9 = JSC::allocateCell<JSC::JSFinalObject>(v6, v8 + 16);
  v10 = *(_DWORD *)(v7 + 8);
  *(_DWORD *)v9 = v7 >> 4;
  *(_DWORD *)(v9 + 4) = v10;
  *(_QWORD *)(v9 + 8) = 0;
  bzero((void *)(v9 + 16), v8);
  if (*(_BYTE *)(v6 + 755))
    __dmb(0xAu);
  if (*a3)
    v11 = 7;
  else
    v11 = 6;
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v12 = v59;
  v59 = 0;
  v60 = v9;
  v61 = -1;
  v62 = 0x1000000;
  v63 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v12, v11, 0, (uint64_t)&v59);
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v13);
    else
      *(_DWORD *)v12 -= 2;
  }
  v14 = a3[3] ? 7 : 6;
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v15 = v59;
  v59 = 0;
  v60 = v9;
  v61 = -1;
  v62 = 0x1000000;
  v63 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v15, v14, 0, (uint64_t)&v59);
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v16);
    else
      *(_DWORD *)v15 -= 2;
  }
  v17 = a3[1] ? 7 : 6;
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v18 = v59;
  v59 = 0;
  v60 = v9;
  v61 = -1;
  v62 = 0x1000000;
  v63 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v18, v17, 0, (uint64_t)&v59);
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v19);
    else
      *(_DWORD *)v18 -= 2;
  }
  v20 = WebCore::JSDOMGlobalObject::scriptExecutionContext(a2);
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 136))(v20) + 440) & 0x80000000000000) == 0)
    goto LABEL_39;
  v22 = a3[8];
  v23 = *(_QWORD *)(a1 + 56);
  v24 = (uint64_t *)(v23 + 41968);
  if ((byte_1EE336EC8 & 1) == 0)
  {
    dword_1ECE7A650 += 2;
    qword_1EE3371C0 = (uint64_t)&dword_1ECE7A650;
    dword_1ECE7A670 += 2;
    qword_1EE3371C8 = (uint64_t)&dword_1ECE7A670;
    dword_1ECE7A690 += 2;
    qword_1EE3371D0 = (uint64_t)&dword_1ECE7A690;
    dword_1ECE7A6B0 += 2;
    qword_1EE3371D8 = (uint64_t)&dword_1ECE7A6B0;
    byte_1EE336EC8 = 1;
  }
  v25 = *(_QWORD *)&_MergedGlobals_1290[8 * v22 + 768];
  if (v25)
  {
    v26 = *(_DWORD *)v25;
    v27 = *(_DWORD *)(v25 + 4);
    *(_DWORD *)v25 += 2;
    if (v27)
    {
      if (v27 != 1)
      {
LABEL_30:
        v28 = *(_QWORD *)(v23 + 64760);
        if (!v28 || v25 != *(_QWORD *)(v28 + 8))
        {
          v28 = JSC::jsStringWithCacheSlowCase();
          v26 = *(_DWORD *)v25 - 2;
        }
        goto LABEL_33;
      }
      v55 = *(unsigned __int8 **)(v25 + 8);
      if ((*(_BYTE *)(v25 + 16) & 4) != 0)
      {
        v56 = *v55;
      }
      else
      {
        v58 = *(unsigned __int16 *)v55;
        if (v58 > 0xFF)
          goto LABEL_30;
        v56 = v58;
      }
      v28 = *(_QWORD *)(v23 + 8 * v56 + 42216);
    }
    else
    {
      v28 = *v24;
    }
LABEL_33:
    if (v26)
      *(_DWORD *)v25 = v26;
    else
      WTF::StringImpl::destroy((WTF::StringImpl *)v25, v21);
    goto LABEL_35;
  }
  v28 = *v24;
LABEL_35:
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v29 = v59;
  v59 = 0;
  v60 = v9;
  v61 = -1;
  v62 = 0x1000000;
  v63 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v29, v28, 0, (uint64_t)&v59);
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v30);
    else
      *(_DWORD *)v29 -= 2;
  }
LABEL_39:
  if (a3[7])
    v31 = 7;
  else
    v31 = 6;
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v32 = v59;
  v59 = 0;
  v60 = v9;
  v61 = -1;
  v62 = 0x1000000;
  v63 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v32, v31, 0, (uint64_t)&v59);
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v33);
    else
      *(_DWORD *)v32 -= 2;
  }
  v34 = a3[6];
  v35 = *(_QWORD *)(a1 + 56);
  v36 = (uint64_t *)(v35 + 41968);
  if ((byte_1EE336EC7 & 1) == 0)
  {
    dword_1ECE7A5F0 += 2;
    byte_1EE336EC7 = 1;
    qword_1EE337188 = (uint64_t)&dword_1ECE7A5F0;
    dword_1ECE7A610 += 2;
    qword_1EE337190 = (uint64_t)&dword_1ECE7A610;
    dword_1ECE7A630 += 2;
    qword_1EE337198 = (uint64_t)&dword_1ECE7A630;
  }
  v37 = *(_QWORD *)&_MergedGlobals_1290[8 * v34 + 712];
  if (v37)
  {
    v38 = *(_DWORD *)v37;
    v39 = *(_DWORD *)(v37 + 4);
    *(_DWORD *)v37 += 2;
    if (v39)
    {
      if (v39 != 1)
      {
LABEL_51:
        v40 = *(_QWORD *)(v35 + 64760);
        if (!v40 || v37 != *(_QWORD *)(v40 + 8))
        {
          v40 = JSC::jsStringWithCacheSlowCase();
          v38 = *(_DWORD *)v37 - 2;
        }
        goto LABEL_54;
      }
      v53 = *(unsigned __int8 **)(v37 + 8);
      if ((*(_BYTE *)(v37 + 16) & 4) != 0)
      {
        v54 = *v53;
      }
      else
      {
        v57 = *(unsigned __int16 *)v53;
        if (v57 > 0xFF)
          goto LABEL_51;
        v54 = v57;
      }
      v40 = *(_QWORD *)(v35 + 8 * v54 + 42216);
    }
    else
    {
      v40 = *v36;
    }
LABEL_54:
    if (v38)
      *(_DWORD *)v37 = v38;
    else
      WTF::StringImpl::destroy((WTF::StringImpl *)v37, v33);
    goto LABEL_56;
  }
  v40 = *v36;
LABEL_56:
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v41 = v59;
  v59 = 0;
  v60 = v9;
  v61 = -1;
  v62 = 0x1000000;
  v63 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v41, v40, 0, (uint64_t)&v59);
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v42);
    else
      *(_DWORD *)v41 -= 2;
  }
  v43 = a3[4] ? 7 : 6;
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v44 = v59;
  v59 = 0;
  v60 = v9;
  v61 = -1;
  v62 = 0x1000000;
  v63 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v44, v43, 0, (uint64_t)&v59);
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v45);
    else
      *(_DWORD *)v44 -= 2;
  }
  v46 = a3[5] ? 7 : 6;
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v47 = v59;
  v59 = 0;
  v60 = v9;
  v61 = -1;
  v62 = 0x1000000;
  v63 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v47, v46, 0, (uint64_t)&v59);
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WTF::StringImpl::destroy(v47, v48);
    else
      *(_DWORD *)v47 -= 2;
  }
  v49 = a3[2] ? 7 : 6;
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v50 = v59;
  v59 = 0;
  v60 = v9;
  v61 = -1;
  v62 = 0x1000000;
  v63 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v50, v49, 0, (uint64_t)&v59);
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, v51);
    else
      *(_DWORD *)v50 -= 2;
  }
  return v9;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSMediaController>::construct(JSC *a1, uint64_t a2)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::ScriptExecutionContext *v7;
  WebCore::MediaController *v8;
  WebCore::JSDOMGlobalObject *v9;
  JSCell *v10;
  JSC::JSCell *v11;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v13;
  JSC::JSGlobalObject *v14;
  JSC::VM *v15;
  JSC::JSObject *v16;
  JSC::Structure *v17;
  JSC::VM *FunctionRealm;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char **v25;
  int v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  unint64_t SubclassStructure;
  bmalloc::api *v35;
  void *v36;
  WebCore::MediaController *v37;
  JSC::VM *v38;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v38 = v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(a1, &v38, (uint64_t)"MediaController", 16);
  v7 = (WebCore::ScriptExecutionContext *)v6;
  v8 = (WebCore::MediaController *)bmalloc::api::isoAllocate();
  v37 = WebCore::MediaController::MediaController(v8, v7);
  if (*(void (***)(WebCore::MediaController *__hidden))v37 != off_1E33D5758)
  {
    __break(0xC471u);
    JUMPOUT(0x194D02B1CLL);
  }
  v10 = (JSCell *)WebCore::createWrapper<WebCore::MediaController,WebCore::MediaController>(*(JSC::VM **)(v5 + 40), (uint64_t *)&v37, v9);
  v11 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v11 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v11);
    if (Object)
    {
      v14 = Object;
      if (Object != *(JSC::JSGlobalObject **)(a2 + 24))
      {
        v15 = (JSC::VM *)*((_QWORD *)a1 + 7);
        FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, Object, v13);
        if (!*((_DWORD *)v15 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) == 0)
        {
          v19 = *((_QWORD *)FunctionRealm + 412);
          if (v19)
          {
            v20 = *(_DWORD *)(v19 - 8);
            v21 = ((unint64_t)&WebCore::JSMediaController::s_info
                 + ~((_QWORD)&WebCore::JSMediaController::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaController::s_info
                                                                           + ~((_QWORD)&WebCore::JSMediaController::s_info << 32)) >> 22);
            v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
            v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
            v24 = v20 & ((v23 >> 31) ^ v23);
            v25 = *(char ***)(v19 + 16 * v24);
            if (v25 == &WebCore::JSMediaController::s_info)
            {
LABEL_12:
              v16 = *(JSC::JSObject **)(v19 + 16 * v24 + 8);
              if (v16)
              {
LABEL_14:
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v14, v16, v17);
                if (!*((_DWORD *)v15 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) == 0)
                  JSC::JSObject::setStructure(v10, v15, SubclassStructure);
                goto LABEL_16;
              }
            }
            else
            {
              v26 = 1;
              while (v25)
              {
                v24 = ((_DWORD)v24 + v26) & v20;
                v25 = *(char ***)(v19 + 16 * v24);
                ++v26;
                if (v25 == &WebCore::JSMediaController::s_info)
                  goto LABEL_12;
              }
            }
          }
          v27 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v15, FunctionRealm, v16);
          Structure = WebCore::JSMediaControllerPrototype::createStructure((uint64_t *)v15, (uint64_t)FunctionRealm, v27);
          *(_DWORD *)(Structure + 16) |= 0x80000u;
          v31 = (JSC::JSCell *)WebCore::JSMediaControllerPrototype::create(v15, Structure, v29, v30);
          v32 = WebCore::JSMediaController::createStructure((uint64_t *)v15, (uint64_t)FunctionRealm, v31);
          v16 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v32, (uint64_t)&WebCore::JSMediaController::s_info);
          goto LABEL_14;
        }
      }
    }
  }
LABEL_16:
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    v10 = 0;
  if (v37)
  {
    if (*((_DWORD *)v37 + 2) == 1)
    {
      WebCore::MediaController::~MediaController(v37);
      bmalloc::api::isoDeallocate(v35, v36);
    }
    else
    {
      --*((_DWORD *)v37 + 2);
    }
  }
  return v10;
}

uint64_t WebCore::JSMediaController::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24) - 32);
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSMediaControllerPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSMediaControllerPrototype::create(WebCore::JSMediaControllerPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<15u>(this, (uint64_t)&WebCore::JSMediaController::s_info, (uint64_t)&WebCore::JSMediaControllerPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSMediaController>,(WebCore::DOMConstructorID)590>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4720);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructor<WebCore::JSMediaController>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSMediaController::s_info + ~((_QWORD)&WebCore::JSMediaController::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaController::s_info + ~((_QWORD)&WebCore::JSMediaController::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSMediaController::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSMediaController::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEventTarget::prototype((WebCore::JSEventTarget *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSMediaControllerPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSMediaControllerPrototype::create((WebCore::JSMediaControllerPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSMediaController::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSMediaController::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4720) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsMediaControllerConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSMediaControllerPrototype::s_info != (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSMediaController>,(WebCore::DOMConstructorID)590>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsMediaController_buffered(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  unint64_t v5;
  WTF *v6;
  WTF *v8;
  WTF *v9;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  WebCore::MediaController::buffered((WebCore::MediaController *)(*(_QWORD *)(a2 + 24) - 32), (uint64_t *)&v9);
  v5 = WebCore::wrap<WebCore::TimeRanges>(a1, v3, (uint64_t)v9);
  v6 = v9;
  v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      v8 = (WTF *)*((_QWORD *)v6 + 1);
      if (v8)
      {
        *((_QWORD *)v6 + 1) = 0;
        *((_DWORD *)v6 + 4) = 0;
        WTF::fastFree(v8, v4);
      }
      WTF::fastFree(v6, v4);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  return v5;
}

unint64_t WebCore::jsMediaController_seekable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  unint64_t v5;
  WTF *v6;
  WTF *v8;
  WTF *v9;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  WebCore::MediaController::seekable((WebCore::MediaController *)(*(_QWORD *)(a2 + 24) - 32), (uint64_t *)&v9);
  v5 = WebCore::wrap<WebCore::TimeRanges>(a1, v3, (uint64_t)v9);
  v6 = v9;
  v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      v8 = (WTF *)*((_QWORD *)v6 + 1);
      if (v8)
      {
        *((_QWORD *)v6 + 1) = 0;
        *((_DWORD *)v6 + 4) = 0;
        WTF::fastFree(v8, v4);
      }
      WTF::fastFree(v6, v4);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  return v5;
}

unint64_t WebCore::jsMediaController_duration(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(unsigned int *)(v2 + 36);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(v2 + 24);
    v5 = 8 * v3;
    v6 = 0.0;
    do
    {
      v7 = *v4++;
      v8 = (*(double (**)(uint64_t))(*(_QWORD *)v7 + 1376))(v7);
      if (v6 >= v8)
        v9 = v6;
      else
        v9 = v8;
      v6 = v9;
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v6 = 0.0;
  }
  if ((*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v10 = (int)v6, v6 == (double)(int)v10)
    && ((_DWORD)v10 || (*(_QWORD *)&v6 & 0x8000000000000000) == 0))
  {
    return v10 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v6 + 0x2000000000000;
  }
}

unint64_t WebCore::jsMediaController_currentTime(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t *v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  double v9;
  double v10;
  WTF::MonotonicTime *v11;
  double v12;
  double v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(unsigned int *)(v2 + 36);
  if ((_DWORD)v3)
  {
    v4 = *(double *)(v2 + 64);
    if (v4 == -1.0)
    {
      v5 = *(uint64_t **)(v2 + 24);
      v6 = 8 * v3;
      v7 = 0.0;
      do
      {
        v8 = *v5++;
        v9 = (*(double (**)(uint64_t))(*(_QWORD *)v8 + 1376))(v8);
        if (v7 >= v9)
          v10 = v7;
        else
          v10 = v9;
        v7 = v10;
        v6 -= 8;
      }
      while (v6);
      v12 = (*(double (**)(_QWORD))(**(_QWORD **)(v2 + 224) + 24))(*(_QWORD *)(v2 + 224));
      if (v12 >= v7)
        v12 = v7;
      *(double *)(v2 + 64) = fmax(v12, 0.0);
      *(_QWORD *)(v2 + 184) = 0;
      WTF::MonotonicTime::now(v11);
      WebCore::TimerBase::setNextFireTime(v2 + 160, v13 + 0.0);
      v4 = *(double *)(v2 + 64);
    }
  }
  else
  {
    v4 = 0.0;
  }
  if ((*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v14 = (int)v4, v4 == (double)(int)v14)
    && ((_DWORD)v14 || (*(_QWORD *)&v4 & 0x8000000000000000) == 0))
  {
    return v14 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v4 + 0x2000000000000;
  }
}

BOOL WebCore::setJSMediaController_currentTime(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  double v13;
  JSC::VM *v14;
  unint64_t v15;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSMediaController::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSMediaController::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v15 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v14 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v15, a1);
    v4 = v14;
    v11 = v13;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
    return 0;
  WebCore::MediaController::setCurrentTime((WebCore::MediaController *)(v10 - 32), v11);
  return 1;
}

uint64_t WebCore::jsMediaController_paused(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 40))
    return 7;
  else
    return 6;
}

unint64_t WebCore::jsMediaController_played(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  unint64_t v5;
  WTF *v6;
  WTF *v8;
  WTF *v9;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  WebCore::MediaController::played((WebCore::MediaController *)(*(_QWORD *)(a2 + 24) - 32), (uint64_t *)&v9);
  v5 = WebCore::wrap<WebCore::TimeRanges>(a1, v3, (uint64_t)v9);
  v6 = v9;
  v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      v8 = (WTF *)*((_QWORD *)v6 + 1);
      if (v8)
      {
        *((_QWORD *)v6 + 1) = 0;
        *((_DWORD *)v6 + 4) = 0;
        WTF::fastFree(v8, v4);
      }
      WTF::fastFree(v6, v4);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  return v5;
}

uint64_t WebCore::jsMediaController_playbackState(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_DWORD *)(*(_QWORD *)(a2 + 24) + 80);
  if (v2 == 2)
  {
    v3 = &WebCore::playbackStateEnded(void)::ended;
    {
      v12 = a1;
      WTF::AtomStringImpl::add();
      v3 = &WebCore::playbackStateEnded(void)::ended;
      WebCore::playbackStateEnded(void)::ended = v13;
      goto LABEL_10;
    }
  }
  else if (v2 == 1)
  {
    v3 = &WebCore::playbackStatePlaying(void)::playing;
    {
      v12 = a1;
      WTF::AtomStringImpl::add();
      v3 = &WebCore::playbackStatePlaying(void)::playing;
      WebCore::playbackStatePlaying(void)::playing = v13;
      goto LABEL_10;
    }
  }
  else
  {
    if (v2)
    {
      v3 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      goto LABEL_12;
    }
    v3 = &WebCore::playbackStateWaiting(void)::waiting;
    {
      v12 = a1;
      WTF::AtomStringImpl::add();
      v3 = &WebCore::playbackStateWaiting(void)::waiting;
      WebCore::playbackStateWaiting(void)::waiting = v13;
LABEL_10:
      *v4 = 1;
      a1 = v12;
    }
  }
LABEL_12:
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *v3;
  if (!*v3)
    return *(_QWORD *)(v5 + 41968);
  v7 = *(_DWORD *)(v6 + 4);
  if (!v7)
    return *(_QWORD *)(v5 + 41968);
  if (v7 == 1)
  {
    v10 = *(unsigned __int8 **)(v6 + 8);
    if ((*(_BYTE *)(v6 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v11 = *(unsigned __int16 *)v10;
      if (v11 > 0xFF)
        goto LABEL_15;
      v11 = v11;
    }
    return *(_QWORD *)(v5 + 8 * v11 + 42216);
  }
LABEL_15:
  v8 = *(_QWORD *)(v5 + 64760);
  if (!v8 || v6 != *(_QWORD *)(v8 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v8;
}

unint64_t WebCore::jsMediaController_defaultPlaybackRate(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 48);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

BOOL WebCore::setJSMediaController_defaultPlaybackRate(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  uint64_t hasExceptionsAfterHandlingTraps;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  char **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  double v18;
  unint64_t v19;

  hasExceptionsAfterHandlingTraps = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSMediaController::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSMediaController::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v19 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = hasExceptionsAfterHandlingTraps;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v19, a1);
    hasExceptionsAfterHandlingTraps = v17;
    v11 = v18;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*(_DWORD *)(hasExceptionsAfterHandlingTraps + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)hasExceptionsAfterHandlingTraps);
    if ((_DWORD)hasExceptionsAfterHandlingTraps)
      return 0;
  }
  if (*(double *)(v10 + 48) != v11)
  {
    v12 = (char **)(v10 - 32);
    *(double *)(v10 + 48) = v11;
    v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v13 || (hasExceptionsAfterHandlingTraps = *(_QWORD *)(v13 + 96)) == 0)
      hasExceptionsAfterHandlingTraps = WebCore::threadGlobalDataSlow((WebCore *)hasExceptionsAfterHandlingTraps);
    v14 = *(_QWORD *)(hasExceptionsAfterHandlingTraps + 40);
    if (!v14)
    {
      v16 = hasExceptionsAfterHandlingTraps;
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)hasExceptionsAfterHandlingTraps);
      v14 = *(_QWORD *)(v16 + 40);
    }
    WebCore::MediaController::scheduleEvent(v12, (const WTF::AtomString *)(v14 + 1624));
  }
  return 1;
}

unint64_t WebCore::jsMediaController_playbackRate(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 24) + 224) + 40))(*(_QWORD *)(*(_QWORD *)(a2 + 24)
                                                                                                  + 224));
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

BOOL WebCore::setJSMediaController_playbackRate(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  double v13;
  JSC::VM *v14;
  unint64_t v15;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSMediaController::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSMediaController::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v15 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v14 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v15, a1);
    v4 = v14;
    v11 = v13;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
    return 0;
  WebCore::MediaController::setPlaybackRate((WebCore::MediaController *)(v10 - 32), v11);
  return 1;
}

unint64_t WebCore::jsMediaController_volume(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 56);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

BOOL WebCore::setJSMediaController_volume(JSC *this, uint64_t a2, unint64_t a3)
{
  JSC *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  JSValue v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  double v24;
  unint64_t v25;
  WTF::StringImpl *v26;

  v3 = this;
  v4 = *((_QWORD *)this + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSMediaController::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSMediaController::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v25 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    this = (JSC *)JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v25, this);
    v11 = v24;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*(_DWORD *)(v4 + 80))
  {
    this = (JSC *)JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
    if ((_DWORD)this)
      return 0;
  }
  if (*(double *)(v10 + 56) != v11)
  {
    if (v11 < 0.0 || v11 > 1.0)
    {
      LOBYTE(v25) = 0;
      v26 = 0;
      if (!*(_QWORD *)(v4 + 16))
      {
        v13.super.isa = (Class)WebCore::createDOMException(v3, 0, (JSC::JSGlobalObject *)&v26);
        JSC::VM::throwException((JSC::VM *)v4, v3, v13);
        v15 = v26;
        v26 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v14);
          else
            *(_DWORD *)v15 -= 2;
        }
      }
    }
    else
    {
      *(double *)(v10 + 56) = v11;
      v16 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v16 || (v17 = *(_QWORD *)(v16 + 96)) == 0)
        v17 = WebCore::threadGlobalDataSlow(this);
      v18 = *(_QWORD *)(v17 + 40);
      if (!v18)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v17);
        v18 = *(_QWORD *)(v17 + 40);
      }
      WebCore::MediaController::scheduleEvent((char **)(v10 - 32), (const WTF::AtomString *)(v18 + 2264));
      v19 = *(unsigned int *)(v10 + 36);
      if ((_DWORD)v19)
      {
        v20 = *(uint64_t **)(v10 + 24);
        v21 = 8 * v19;
        do
        {
          v22 = *v20++;
          WebCore::HTMLMediaElement::updateVolume(v22);
          v21 -= 8;
        }
        while (v21);
      }
    }
  }
  return 1;
}

uint64_t WebCore::jsMediaController_muted(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 72))
    return 7;
  else
    return 6;
}

uint64_t WebCore::setJSMediaController_muted(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t hasExceptionsAfterHandlingTraps;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  double v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  int *v24;
  int v25;

  hasExceptionsAfterHandlingTraps = *(_QWORD *)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSMediaController::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSMediaController::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  if (a3 >= 0xFFFE000000000000)
  {
    v21 = (_DWORD)a3 == 0;
    goto LABEL_45;
  }
  *(_QWORD *)&v10 = a3 - 0x2000000000000;
  if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((a3 & 0xFFFE000000000002) != 0)
    {
      v11 = a3 == 7;
      goto LABEL_16;
    }
    v22 = *(unsigned __int8 *)(a3 + 5);
    if (v22 == 3)
    {
      v25 = *(_DWORD *)(a3 + 8);
    }
    else
    {
      if (v22 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v11 = 1;
          goto LABEL_16;
        }
        v21 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) == a1;
        goto LABEL_45;
      }
      v23 = *(_QWORD *)(a3 + 8);
      if ((v23 & 1) != 0)
        v24 = (int *)(a3 + 16);
      else
        v24 = (int *)(v23 + 4);
      v25 = *v24;
    }
    v21 = v25 == 0;
LABEL_45:
    v11 = !v21;
    goto LABEL_16;
  }
  v11 = v10 > 0.0 || v10 < 0.0;
LABEL_16:
  v12 = *(_QWORD *)(a2 + 24);
  if (*(_DWORD *)(hasExceptionsAfterHandlingTraps + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)hasExceptionsAfterHandlingTraps);
    if ((hasExceptionsAfterHandlingTraps & 1) != 0)
      return 0;
  }
  if (*(unsigned __int8 *)(v12 + 72) != v11)
  {
    *(_BYTE *)(v12 + 72) = v11;
    v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v13 || (hasExceptionsAfterHandlingTraps = *(_QWORD *)(v13 + 96)) == 0)
      hasExceptionsAfterHandlingTraps = WebCore::threadGlobalDataSlow((WebCore *)hasExceptionsAfterHandlingTraps);
    v14 = *(_QWORD *)(hasExceptionsAfterHandlingTraps + 40);
    if (!v14)
    {
      v20 = hasExceptionsAfterHandlingTraps;
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)hasExceptionsAfterHandlingTraps);
      v14 = *(_QWORD *)(v20 + 40);
    }
    WebCore::MediaController::scheduleEvent((char **)(v12 - 32), (const WTF::AtomString *)(v14 + 2264));
    v15 = *(unsigned int *)(v12 + 36);
    if ((_DWORD)v15)
    {
      v16 = *(uint64_t **)(v12 + 24);
      v17 = 8 * v15;
      do
      {
        v18 = *v16++;
        WebCore::HTMLMediaElement::updateVolume(v18);
        v17 -= 8;
      }
      while (v17);
    }
  }
  return 1;
}

unint64_t WebCore::createWrapper<WebCore::MediaController,WebCore::MediaController>(JSC::VM *a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  WebCore::JSEventTarget *v15;
  JSC::JSCell *v16;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v18;
  JSC::Structure *v19;
  JSC::JSCell *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  int v39;
  unint64_t SlowCase;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *Allocator;
  uint64_t v49;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  WTF *v57;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 412);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = ((unint64_t)&WebCore::JSMediaController::s_info + ~((_QWORD)&WebCore::JSMediaController::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaController::s_info + ~((_QWORD)&WebCore::JSMediaController::s_info << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(char ***)(v6 + 16 * v11);
    if (v12 == &WebCore::JSMediaController::s_info)
    {
LABEL_6:
      v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
      if (v14)
        goto LABEL_8;
    }
    else
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(char ***)(v6 + 16 * v11);
        ++v13;
        if (v12 == &WebCore::JSMediaController::s_info)
          goto LABEL_6;
      }
    }
  }
  v15 = (WebCore::JSEventTarget *)*((_QWORD *)a1 + 7);
  v16 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v15, a1, a3);
  Structure = WebCore::JSMediaControllerPrototype::createStructure((uint64_t *)v15, (uint64_t)a1, v16);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v20 = (JSC::JSCell *)WebCore::JSMediaControllerPrototype::create(v15, Structure, v18, v19);
  v21 = WebCore::JSMediaController::createStructure((uint64_t *)v15, (uint64_t)a1, v20);
  v14 = WebCore::cacheDOMStructure((JSCell *)a1, v21, (uint64_t)&WebCore::JSMediaController::s_info);
LABEL_8:
  v22 = *((_QWORD *)a1 + 7);
  v23 = *(_QWORD *)(v22 + 41456);
  v24 = *(_QWORD *)(v23 + 23536);
  v25 = *(_QWORD **)(v24 + 4792);
  if (v25)
    goto LABEL_31;
  v26 = *(_QWORD *)(v23 + 22648);
  if (__ldaxr((unsigned __int8 *)v26))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v26))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v26);
LABEL_13:
  v28 = *(_QWORD *)(v26 + 2824);
  v55 = *(_QWORD *)(v28 + 4792);
  if (!v55)
  {
    v29 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v57, "IsoSpace T");
    v56 = 0;
    MEMORY[0x19AEA3204](v29, &v57, v22 + 192, v22 + 1872, 32, 8, &v56);
    v31 = (uint64_t)v56;
    v56 = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = v57;
    v57 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 1)
        WTF::fastFree(v32, v30);
      else
        --*(_DWORD *)v32;
    }
    v55 = v29;
    v33 = *(_QWORD *)(v28 + 4792);
    *(_QWORD *)(v28 + 4792) = v29;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = *(unsigned int *)(v26 + 2844);
    if ((_DWORD)v34 == *(_DWORD *)(v26 + 2840))
    {
      v35 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v26 + 2832, v34 + 1, (unint64_t)&v55);
      v34 = *(unsigned int *)(v26 + 2844);
      *(_QWORD *)(*(_QWORD *)(v26 + 2832) + 8 * v34) = *v35;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v26 + 2832) + 8 * v34) = v29;
    }
    *(_DWORD *)(v26 + 2844) = v34 + 1;
  }
  v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v36 = *(_QWORD *)(v24 + 4792);
  *(_QWORD *)(v24 + 4792) = v25;
  if (v36)
  {
    v37 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v37, v38);
  }
  v39 = __ldxr((unsigned __int8 *)v26);
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, (unsigned __int8 *)v26))
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
LABEL_31:
  SlowCase = v25[3];
  if (SlowCase < v25[4])
  {
LABEL_32:
    v25[3] = SlowCase + 32;
    goto LABEL_33;
  }
  SlowCase = v25[5];
  if ((SlowCase & 1) == 0)
  {
    v54 = *(_QWORD *)(SlowCase + 8) ^ v25[6];
    v25[4] = SlowCase + HIDWORD(v54);
    v25[5] = SlowCase + (int)v54;
    goto LABEL_32;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_33:
  *(_DWORD *)SlowCase = 0;
  v41 = *a2;
  *a2 = 0;
  v42 = v41 + 32;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v14);
  *(_QWORD *)(SlowCase + 24) = v42;
  if (*(_BYTE *)(v22 + 755))
    __dmb(0xAu);
  v43 = *((_QWORD *)a1 + 415);
  v44 = (WTF *)(v5 + 32);
  if (!v5)
    v44 = 0;
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::EventTarget *)::owner = (uint64_t)&off_1E3276300;
  }
  if (v5)
    v45 = (uint64_t *)(v5 + 40);
  else
    v45 = 0;
  if (!*(_DWORD *)(v43 + 48))
  {
    if ((SlowCase & 8) != 0)
      v46 = (SlowCase - 112) | 1;
    else
      v46 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v46 & 1) != 0)
      v47 = v46 + 47;
    else
      v47 = *(_QWORD *)v46 + 32;
    Allocator = *(_QWORD **)(v47 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v47 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::EventTarget *)::owner;
    Allocator[2] = v43;
    v49 = *v45;
    *v45 = (uint64_t)Allocator;
    if (!v49)
      return SlowCase;
LABEL_60:
    *(_QWORD *)(v49 + 8) = 3;
    return SlowCase;
  }
  v57 = v44;
  if ((SlowCase & 8) != 0)
    v51 = (SlowCase - 112) | 1;
  else
    v51 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v51 & 1) != 0)
    v52 = v51 + 47;
  else
    v52 = *(_QWORD *)v51 + 32;
  v53 = *(_QWORD **)(v52 + 16);
  if (!v53)
    v53 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v52 + 16) = *v53;
  *v53 = SlowCase;
  v53[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::EventTarget *)::owner;
  v53[2] = v43;
  v56 = v53;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v43 + 32), (uint64_t *)&v57, (uint64_t *)&v56);
  v49 = (uint64_t)v56;
  if (v56)
    goto LABEL_60;
  return SlowCase;
}

uint64_t WebCore::wrap<WebCore::MediaController>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  bmalloc::api *v7;
  void *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  WebCore::MediaController *v17;

  v3 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v3 + 48))
  {
    v9 = *(_QWORD *)(v3 + 32);
    if (!v9)
      goto LABEL_5;
    v10 = *(_DWORD *)(v9 - 8);
    v11 = ~((a3 + 32) << 32) + a3 + 32;
    v12 = (v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13);
    v13 = (9 * (v12 ^ (v12 >> 8))) ^ ((9 * (v12 ^ (v12 >> 8))) >> 15);
    v14 = v10 & (((v13 + ~(v13 << 27)) >> 31) ^ ((_DWORD)v13 + ~((_DWORD)v13 << 27)));
    v15 = *(_QWORD *)(v9 + 16 * v14);
    if (v15 != a3 + 32)
    {
      v16 = 1;
      while (v15)
      {
        v14 = ((_DWORD)v14 + v16) & v10;
        v15 = *(_QWORD *)(v9 + 16 * v14);
        ++v16;
        if (v15 == a3 + 32)
          goto LABEL_16;
      }
      goto LABEL_5;
    }
LABEL_16:
    v4 = *(_QWORD *)(v9 + 16 * v14 + 8);
    if (!v4)
      goto LABEL_5;
  }
  else
  {
    v4 = *(_QWORD *)(a3 + 40);
    if (!v4)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v4 + 8) & 3) == 0)
  {
    v5 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
      return v5;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 8);
  v17 = (WebCore::MediaController *)a3;
  if (*(void (***)(WebCore::MediaController *__hidden))a3 == off_1E33D5758)
  {
    v5 = WebCore::createWrapper<WebCore::MediaController,WebCore::MediaController>(a2, (uint64_t *)&v17, (WebCore::JSDOMGlobalObject *)a3);
    if (v17)
    {
      if (*((_DWORD *)v17 + 2) == 1)
      {
        WebCore::MediaController::~MediaController(v17);
        bmalloc::api::isoDeallocate(v7, v8);
      }
      else
      {
        --*((_DWORD *)v17 + 2);
      }
    }
    return v5;
  }
  result = 557;
  __break(0xC471u);
  return result;
}

WebCore::MediaControlsHost *WebCore::JSMediaControlsHost::destroy(WebCore::JSMediaControlsHost *this, JSC::JSCell *a2)
{
  WebCore::MediaControlsHost *result;
  WTF *v4;
  void *v5;

  result = (WebCore::MediaControlsHost *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::MediaControlsHost::~MediaControlsHost(result, a2);
      return (WebCore::MediaControlsHost *)WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::JSMediaControlsHost::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::jsMediaControlsHost_layoutTraitsClassName(uint64_t a1)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned int v8;
  WTF::StringImpl *v10;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = *(_QWORD *)(a1 + 56);
  v3 = v10;
  if (!v10 || (v4 = *((_DWORD *)v10 + 1)) == 0)
  {
    v5 = *(_QWORD *)(v2 + 41968);
LABEL_7:
    if (!v3)
      return v5;
    goto LABEL_15;
  }
  if (v4 != 1)
    goto LABEL_4;
  v6 = (unsigned __int8 *)*((_QWORD *)v10 + 1);
  if ((*((_BYTE *)v10 + 16) & 4) != 0)
  {
    v7 = *v6;
LABEL_14:
    v5 = *(_QWORD *)(v2 + 8 * v7 + 42216);
    goto LABEL_15;
  }
  v8 = *(unsigned __int16 *)v6;
  if (v8 <= 0xFF)
  {
    v7 = v8;
    goto LABEL_14;
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v10 != *(WTF::StringImpl **)(v5 + 8))
  {
    v5 = JSC::jsStringWithCacheSlowCase();
    v3 = v10;
    goto LABEL_7;
  }
LABEL_15:
  if (*(_DWORD *)v3 == 2)
    WTF::StringImpl::destroy(v3, v3);
  else
    *(_DWORD *)v3 -= 2;
  return v5;
}

uint64_t WebCore::jsMediaControlsHost_mediaControlsContainerClassName(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  {
    v1 = WebCore::MediaControlsHost::mediaControlsContainerClassName(void)const::className;
  }
  else
  {
    v9 = a1;
    WTF::AtomStringImpl::add();
    a1 = v9;
    v1 = v10;
    WebCore::MediaControlsHost::mediaControlsContainerClassName(void)const::className = v10;
  }
  v2 = *(_QWORD *)(a1 + 56);
  if (!v1)
    return *(_QWORD *)(v2 + 41968);
  v3 = *(_DWORD *)(v1 + 4);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  if (v3 == 1)
  {
    v6 = *(unsigned __int8 **)(v1 + 8);
    if ((*(_BYTE *)(v1 + 16) & 4) != 0)
    {
      v7 = *v6;
    }
    else
    {
      v8 = *(unsigned __int16 *)v6;
      if (v8 > 0xFF)
        goto LABEL_6;
      v7 = v8;
    }
    return *(_QWORD *)(v2 + 8 * v7 + 42216);
  }
LABEL_6:
  v4 = *(_QWORD *)(v2 + 64760);
  if (!v4 || v1 != *(_QWORD *)(v4 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v4;
}

unint64_t WebCore::jsMediaControlsHost_brightness()
{
  return 0xFFFE000000000001;
}

BOOL WebCore::setJSMediaControlsHost_brightness(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  double v10;
  double v12;
  JSC::VM *v13;
  unint64_t v14;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSMediaControlsHost::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSMediaControlsHost::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v14 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v10 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v13 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v14, a1);
    v4 = v13;
    v10 = v12;
  }
  else
  {
    *(_QWORD *)&v10 = a3 - 0x2000000000000;
  }
  if (!*((_DWORD *)v4 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) == 0)
  {
    if ((*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
      return 1;
    JSC::throwTypeError();
  }
  return 0;
}

uint64_t WebCore::jsMediaControlsHost_captionMenuOffItem(WebCore::TextTrack *a1, _DWORD *a2)
{
  int v2;
  JSC::VM *v3;
  uint64_t v4;

  v2 = (int)a1;
  v3 = *(JSC::VM **)(16 * (*a2 & 0xFFFFFFFE) + 0x28);
  v4 = WebCore::TextTrack::captionMenuOffItem(a1);
  return WebCore::wrap<WebCore::TextTrack>(v2, v3, v4);
}

uint64_t WebCore::jsMediaControlsHost_captionMenuAutomaticItem(WebCore::TextTrack *a1, _DWORD *a2)
{
  int v2;
  JSC::VM *v3;
  uint64_t v4;

  v2 = (int)a1;
  v3 = *(JSC::VM **)(16 * (*a2 & 0xFFFFFFFE) + 0x28);
  v4 = WebCore::TextTrack::captionMenuAutomaticItem(a1);
  return WebCore::wrap<WebCore::TextTrack>(v2, v3, v4);
}

uint64_t WebCore::jsMediaControlsHost_captionDisplayMode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl *v11;

  WebCore::MediaControlsHost::captionDisplayMode(*(_QWORD *)(a2 + 24), &v11);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = v11;
  if (!v11 || (v5 = *((_DWORD *)v11 + 1)) == 0)
  {
    v6 = *(_QWORD *)(v3 + 41968);
LABEL_7:
    v11 = 0;
    if (!v4)
      return v6;
    goto LABEL_16;
  }
  if (v5 != 1)
    goto LABEL_4;
  v7 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
  if ((*((_BYTE *)v11 + 16) & 4) != 0)
  {
    v8 = *v7;
LABEL_14:
    v6 = *(_QWORD *)(v3 + 8 * v8 + 42216);
    goto LABEL_15;
  }
  v9 = *(unsigned __int16 *)v7;
  if (v9 <= 0xFF)
  {
    v8 = v9;
    goto LABEL_14;
  }
LABEL_4:
  v6 = *(_QWORD *)(v3 + 64760);
  if (!v6 || v11 != *(WTF::StringImpl **)(v6 + 8))
  {
    v6 = JSC::jsStringWithCacheSlowCase();
    v4 = v11;
    goto LABEL_7;
  }
LABEL_15:
  v11 = 0;
LABEL_16:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy(v4, v4);
  else
    *(_DWORD *)v4 -= 2;
  return v6;
}

unint64_t WebCore::jsMediaControlsHost_textTrackContainer(WebCore *this, uint64_t a2, uint64_t a3, WebCore::Element *a4)
{
  uint64_t v5;
  JSC::JSGlobalObject *v6;
  WebCore::JSDOMGlobalObject *v7;
  uint64_t v9;
  WebCore::Document *v10;
  void *v11;
  uint64_t v12;
  WebCore::JSDOMGlobalObject *v13;

  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v7 = *(WebCore::JSDOMGlobalObject **)(v5 + 24);
  if (v7)
    return WebCore::toJS(this, v6, v7, a4);
  v9 = *(_QWORD *)(v5 + 16);
  if (!v9)
    return 2;
  v10 = *(WebCore::Document **)(v9 + 8);
  if (!v10)
    return 2;
  WebCore::MediaControlTextTrackContainerElement::create(*(WebCore::MediaControlTextTrackContainerElement **)(*((_QWORD *)v10 + 5) + 8), v10, &v13);
  v7 = v13;
  v12 = *(_QWORD *)(v5 + 24);
  *(_QWORD *)(v5 + 24) = v13;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v12, v11);
        v7 = *(WebCore::JSDOMGlobalObject **)(v5 + 24);
      }
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  if (v7)
    return WebCore::toJS(this, v6, v7, a4);
  else
    return 2;
}

uint64_t WebCore::jsMediaControlsHost_allowsInlineMediaPlayback(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::MediaElementSession *v4;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  if (!v2)
    return 6;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 6;
  v4 = *(WebCore::MediaElementSession **)(v3 + 1600);
  if (!v4)
  {
    WebCore::HTMLMediaElement::initializeMediaSession(*(WebCore::HTMLMediaElement **)(v2 + 8));
    v4 = *(WebCore::MediaElementSession **)(v3 + 1600);
  }
  if (WebCore::MediaElementSession::requiresFullscreenForVideoPlayback(v4))
    return 6;
  else
    return 7;
}

uint64_t WebCore::jsMediaControlsHost_supportsFullscreen(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  if (!v2)
    return 6;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 6;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 1296))(v3, 1))
    return 7;
  return 6;
}

uint64_t WebCore::jsMediaControlsHost_isVideoLayerInline(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  if (!v2)
    return 6;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 6;
  if (*(_QWORD *)(v3 + 1104))
    return 6;
  return 7;
}

uint64_t WebCore::jsMediaControlsHost_userGestureRequired(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[8];

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  if (!v2)
    return 6;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 6;
  v4 = *(_QWORD *)(v3 + 1600);
  if (!v4)
  {
    WebCore::HTMLMediaElement::initializeMediaSession(*(WebCore::HTMLMediaElement **)(v2 + 8));
    v4 = *(_QWORD *)(v3 + 1600);
  }
  WebCore::MediaElementSession::playbackStateChangePermitted(v4, 0, (uint64_t)v6);
  if (v6[4])
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsMediaControlsHost_isInMediaDocument(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  if (!v2)
    return 6;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 6;
  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 3358) & 0x10) != 0)
    return 7;
  return 6;
}

uint64_t WebCore::jsMediaControlsHost_shouldForceControlsDisplay(uint64_t a1, uint64_t a2)
{
  if (WebCore::MediaControlsHost::shouldForceControlsDisplay(*(WebCore::MediaControlsHost **)(a2 + 24)))
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsMediaControlsHost_supportsSeeking(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  if (!v2)
    return 6;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 6;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 1856))(v3))
    return 7;
  return 6;
}

uint64_t WebCore::jsMediaControlsHost_inWindowFullscreen(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  if (!v2)
    return 6;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3 || *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
    return 6;
  if (*(_DWORD *)(v3 + 1080) == 4)
    return 7;
  return 6;
}

uint64_t WebCore::jsMediaControlsHost_supportsRewind(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;
  int v8;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  if (!v2)
    return 6;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3 || *(_BYTE *)(v3 + 1544) && !*(_DWORD *)(v3 + 1536))
    return 6;
  v4 = *(_QWORD *)(v3 + 1152);
  if (v4)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 96))(v4) & 1) != 0)
      return 6;
    if (*(_QWORD *)(v3 + 1152))
      v5 = WTF::RefPtr<WebCore::MediaSourceInterfaceProxy,WTF::RawPtrTraits<WebCore::MediaSourceInterfaceProxy>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceInterfaceProxy>>::unspecifiedBoolTypeInstance;
    else
      v5 = 0;
  }
  else
  {
    v5 = 0;
  }
  if (v5)
    return 6;
  v7 = *(_QWORD *)(v3 + 1136);
  if (!v7)
    return 6;
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 72) + 824))(*(_QWORD *)(v7 + 72));
  if (v8 == 4 || v8 == 1)
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsMediaControlsHost_externalDeviceDisplayName(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl *v11;

  WebCore::MediaControlsHost::externalDeviceDisplayName(*(unsigned __int8 **)(a2 + 24), &v11);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = v11;
  if (!v11 || (v5 = *((_DWORD *)v11 + 1)) == 0)
  {
    v6 = *(_QWORD *)(v3 + 41968);
LABEL_7:
    v11 = 0;
    if (!v4)
      return v6;
    goto LABEL_16;
  }
  if (v5 != 1)
    goto LABEL_4;
  v7 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
  if ((*((_BYTE *)v11 + 16) & 4) != 0)
  {
    v8 = *v7;
LABEL_14:
    v6 = *(_QWORD *)(v3 + 8 * v8 + 42216);
    goto LABEL_15;
  }
  v9 = *(unsigned __int16 *)v7;
  if (v9 <= 0xFF)
  {
    v8 = v9;
    goto LABEL_14;
  }
LABEL_4:
  v6 = *(_QWORD *)(v3 + 64760);
  if (!v6 || v11 != *(WTF::StringImpl **)(v6 + 8))
  {
    v6 = JSC::jsStringWithCacheSlowCase();
    v4 = v11;
    goto LABEL_7;
  }
LABEL_15:
  v11 = 0;
LABEL_16:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy(v4, v4);
  else
    *(_DWORD *)v4 -= 2;
  return v6;
}

uint64_t WebCore::jsMediaControlsHost_externalDeviceType(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned __int8 *v16;
  unsigned int v17;
  unsigned int v18;

  v3 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 16);
  if (!v3)
    goto LABEL_15;
  v3 = *(_QWORD *)(v3 + 8);
  if (!v3)
    goto LABEL_15;
  v4 = *(_QWORD *)(v3 + 1136);
  if (!v4)
  {
    v3 = 0;
    goto LABEL_15;
  }
  v5 = *(unsigned __int8 **)v4;
  if (__ldaxr(*(unsigned __int8 **)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v5);
LABEL_8:
  ++*((_QWORD *)v5 + 1);
  v7 = __ldxr(v5);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, v5))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 72) + 728))(*(_QWORD *)(v4 + 72));
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v4);
  v3 = 2;
  if (v8 != 2)
    v3 = v8 == 1;
LABEL_15:
  v9 = *(_QWORD *)(a1 + 56);
  v10 = (uint64_t *)(v9 + 41968);
  if ((byte_1EE335F29 & 1) == 0)
  {
    dword_1ECE78CB0 += 2;
    byte_1EE335F29 = 1;
    dword_1ECE78CD0 += 2;
    qword_1EE336080 = (uint64_t)&dword_1ECE78CB0;
    unk_1EE336088 = &dword_1ECE78CD0;
    dword_1ECE78CF0 += 2;
    qword_1EE336090 = (uint64_t)&dword_1ECE78CF0;
  }
  v11 = *(_QWORD *)&_MergedGlobals_685[8 * v3 + 344];
  if (!v11)
    return *v10;
  v12 = *(_DWORD *)v11;
  v13 = *(_DWORD *)(v11 + 4);
  *(_DWORD *)v11 += 2;
  if (v13)
  {
    if (v13 != 1)
    {
LABEL_20:
      v14 = *(_QWORD *)(v9 + 64760);
      if (!v14 || v11 != *(_QWORD *)(v14 + 8))
      {
        v14 = JSC::jsStringWithCacheSlowCase();
        v12 = *(_DWORD *)v11 - 2;
      }
      goto LABEL_23;
    }
    v16 = *(unsigned __int8 **)(v11 + 8);
    if ((*(_BYTE *)(v11 + 16) & 4) != 0)
    {
      v17 = *v16;
    }
    else
    {
      v18 = *(unsigned __int16 *)v16;
      if (v18 > 0xFF)
        goto LABEL_20;
      v17 = v18;
    }
    v14 = *(_QWORD *)(v9 + 8 * v17 + 42216);
  }
  else
  {
    v14 = *v10;
  }
LABEL_23:
  if (v12)
    *(_DWORD *)v11 = v12;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v11, a2);
  return v14;
}

uint64_t WebCore::jsMediaControlsHost_controlsDependOnPageScaleFactor(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  if (!v2)
    return 6;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 6;
  if ((*(_DWORD *)(v3 + 1265) & 0x20000000) != 0)
    return 7;
  return 6;
}

uint64_t WebCore::setJSMediaControlsHost_controlsDependOnPageScaleFactor(uint64_t a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  double v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v16;
  int v17;
  uint64_t v18;
  int *v19;
  int v20;

  v4 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSMediaControlsHost::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSMediaControlsHost::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  if (a3 >= 0xFFFE000000000000)
  {
    v16 = (_DWORD)a3 == 0;
    goto LABEL_40;
  }
  *(_QWORD *)&v10 = a3 - 0x2000000000000;
  if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((a3 & 0xFFFE000000000002) != 0)
    {
      v11 = a3 == 7;
      goto LABEL_16;
    }
    v17 = *(unsigned __int8 *)(a3 + 5);
    if (v17 == 3)
    {
      v20 = *(_DWORD *)(a3 + 8);
    }
    else
    {
      if (v17 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v11 = 1;
          goto LABEL_16;
        }
        v16 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) == a1;
        goto LABEL_40;
      }
      v18 = *(_QWORD *)(a3 + 8);
      if ((v18 & 1) != 0)
        v19 = (int *)(a3 + 16);
      else
        v19 = (int *)(v18 + 4);
      v20 = *v19;
    }
    v16 = v20 == 0;
LABEL_40:
    v11 = !v16;
    goto LABEL_16;
  }
  v11 = v10 > 0.0 || v10 < 0.0;
LABEL_16:
  v12 = *(_QWORD *)(a2 + 24);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 8);
    if (v14)
      WebCore::HTMLMediaElement::setMediaControlsDependOnPageScaleFactor(v14, v11);
  }
  return 1;
}

uint64_t WebCore::jsMediaControlsHost_sourceType(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned int v19;

  v2 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 16);
  if (!v2)
    return 2;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 2;
  if (*(_BYTE *)(v3 + 1544) && !*(_DWORD *)(v3 + 1536))
  {
    v6 = 4;
    goto LABEL_18;
  }
  v5 = *(_QWORD *)(v3 + 1152);
  if (v5)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5) & 1) != 0)
    {
      v6 = 3;
      goto LABEL_18;
    }
    if (*(_QWORD *)(v3 + 1152))
      v7 = WTF::RefPtr<WebCore::MediaSourceInterfaceProxy,WTF::RawPtrTraits<WebCore::MediaSourceInterfaceProxy>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceInterfaceProxy>>::unspecifiedBoolTypeInstance;
    else
      v7 = 0;
  }
  else
  {
    v7 = 0;
  }
  if (v7)
  {
    v6 = 2;
    goto LABEL_18;
  }
  v8 = *(_QWORD *)(v3 + 1136);
  if (!v8)
    return 2;
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 72) + 824))(*(_QWORD *)(v8 + 72)) - 1;
  if (v9 > 3u)
    return 2;
  v6 = qword_1968C0410[(char)v9];
LABEL_18:
  v10 = *(_QWORD *)(a1 + 56);
  v11 = (uint64_t *)(v10 + 41968);
  if ((byte_1EE335F2A & 1) == 0)
  {
    dword_1ECE78D10 += 2;
    dword_1ECE78D30 += 2;
    qword_1EE336100 = (uint64_t)&dword_1ECE78D10;
    unk_1EE336108 = &dword_1ECE78D30;
    dword_1ECE78D50 += 2;
    dword_1ECE78D70 += 2;
    qword_1EE336110 = (uint64_t)&dword_1ECE78D50;
    qword_1EE336118 = (uint64_t)&dword_1ECE78D70;
    dword_1ECE78D90 += 2;
    dword_1ECE78DB0 += 2;
    qword_1EE336120 = (uint64_t)&dword_1ECE78D90;
    unk_1EE336128 = &dword_1ECE78DB0;
    dword_1ECE78DD0 += 2;
    qword_1EE336130 = (uint64_t)&dword_1ECE78DD0;
    byte_1EE335F2A = 1;
  }
  v12 = *(_QWORD *)&_MergedGlobals_685[8 * v6 + 472];
  if (!v12)
    return *v11;
  v13 = *(_DWORD *)v12;
  v14 = *(_DWORD *)(v12 + 4);
  *(_DWORD *)v12 += 2;
  if (v14)
  {
    if (v14 != 1)
    {
LABEL_23:
      v15 = *(_QWORD *)(v10 + 64760);
      if (!v15 || v12 != *(_QWORD *)(v15 + 8))
      {
        v15 = JSC::jsStringWithCacheSlowCase();
        v13 = *(_DWORD *)v12 - 2;
      }
      goto LABEL_26;
    }
    v17 = *(unsigned __int8 **)(v12 + 8);
    if ((*(_BYTE *)(v12 + 16) & 4) != 0)
    {
      v18 = *v17;
    }
    else
    {
      v19 = *(unsigned __int16 *)v17;
      if (v19 > 0xFF)
        goto LABEL_23;
      v18 = v19;
    }
    v15 = *(_QWORD *)(v10 + 8 * v18 + 42216);
  }
  else
  {
    v15 = *v11;
  }
LABEL_26:
  if (v13)
    *(_DWORD *)v12 = v13;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v12, a2);
  return v15;
}

uint64_t WebCore::jsMediaControlsHost_shadowRootCSSText(uint64_t a1)
{
  void (**v2)(WebCore::RenderThemeIOS *__hidden);
  uint64_t v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v10;
  uint64_t v11;
  WTF::StringImpl *v12;

  {
    v2 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
  }
  else
  {
    v11 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
    *(_OWORD *)(v11 + 40) = 0u;
    *(_OWORD *)(v11 + 24) = 0u;
    v2 = &off_1E335BC30;
    *(_QWORD *)v11 = &off_1E335BC30;
  }
  ((void (*)(WTF::StringImpl **__return_ptr, uint64_t *))v2[9])(&v12, &WebCore::RenderTheme::singleton(void)::theme);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = v12;
  if (!v12 || (v5 = *((_DWORD *)v12 + 1)) == 0)
  {
    v6 = *(_QWORD *)(v3 + 41968);
LABEL_9:
    v12 = 0;
    if (!v4)
      return v6;
    goto LABEL_16;
  }
  if (v5 != 1)
    goto LABEL_6;
  v7 = (unsigned __int8 *)*((_QWORD *)v12 + 1);
  if ((*((_BYTE *)v12 + 16) & 4) != 0)
  {
    v8 = *v7;
LABEL_14:
    v6 = *(_QWORD *)(v3 + 8 * v8 + 42216);
    goto LABEL_15;
  }
  v10 = *(unsigned __int16 *)v7;
  if (v10 <= 0xFF)
  {
    v8 = v10;
    goto LABEL_14;
  }
LABEL_6:
  v6 = *(_QWORD *)(v3 + 64760);
  if (!v6 || v12 != *(WTF::StringImpl **)(v6 + 8))
  {
    v6 = JSC::jsStringWithCacheSlowCase();
    v4 = v12;
    goto LABEL_9;
  }
LABEL_15:
  v12 = 0;
LABEL_16:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy(v4, v4);
  else
    *(_DWORD *)v4 -= 2;
  return v6;
}

uint64_t WebCore::JSMediaControlsHostOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSMediaControlsHostOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WebCore::MediaControlsHost *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore::MediaControlsHost *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WTF *v24;
  void *v25;

  v3 = *(WebCore::MediaControlsHost **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WebCore::MediaControlsHost **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WebCore::MediaControlsHost **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::MediaControlsHost::~MediaControlsHost(v3, a2);
    WTF::fastFree(v24, v25);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::wrap<WebCore::MediaControlsHost>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  uint64_t i;
  char *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  int v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  JSC::Structure *v44;
  int v45;
  JSC::JSObject *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  WTF *v58;
  uint64_t v59;
  uint64_t v60;
  WTF *v61;
  void *v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  JSC::Structure *Allocator;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  int *v73;
  uint64_t *v74;
  WTF::StringImpl *v75[6];
  int v76;
  int v77;
  int v78;
  JSC::Structure *v79;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSMediaControlsHost::s_info
         + ~((_QWORD)&WebCore::JSMediaControlsHost::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaControlsHost::s_info
                                                                     + ~((_QWORD)&WebCore::JSMediaControlsHost::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSMediaControlsHost::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_56;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSMediaControlsHost::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v75[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_19;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v70 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v70);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v70;
LABEL_19:
    *v25 = SlowCase + 128;
    goto LABEL_20;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_20:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v75, &WebCore::JSMediaControlsHostPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_23;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v71 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v71);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v71;
LABEL_23:
    *v28 = v30 + 16;
    goto LABEL_24;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_24:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v73 = (int *)(v24 + 93124);
  v74 = (uint64_t *)(v24 + 40136);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)v30, (JSC::VM *)v24);
  for (i = 0; i != 160; i += 5)
  {
    v33 = (&WebCore::JSMediaControlsHostPrototypeTableValues)[i + 1];
    if (v33)
    {
      if (v33 == (char *)2)
        JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v24 + 41968));
      else
        WTF::AtomStringImpl::addLiteral();
      v34 = v75[0];
      JSC::reifyStaticProperty((JSC::VM *)v24, (uint64_t)&WebCore::JSMediaControlsHost::s_info, (unint64_t *)v75, (uint64_t)&(&WebCore::JSMediaControlsHostPrototypeTableValues)[i], (unsigned __int8 *)v30);
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, v35);
        else
          *(_DWORD *)v34 -= 2;
      }
    }
  }
  v36 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)v30 & 0xFFFFFFFE)
                                                                                          + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 136))(v36) + 480) & 0x400) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v37 = v75[0];
    v38 = *v73;
    *v73 = 1;
    LODWORD(v75[0]) = -1;
    WORD2(v75[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v73 = v38;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, v39);
      else
        *(_DWORD *)v37 -= 2;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE) + 0x10) & 3) != 0)
      JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE)), (JSC::VM *)v24, (JSC::JSObject *)v30);
  }
  v40 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v42 = JSC::JSString::create(v24, v75);
  v43 = v75[0];
  v75[0] = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v41);
    else
      *(_DWORD *)v43 -= 2;
  }
  v44 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v78 = *(_DWORD *)v30;
  v79 = v44;
  v45 = JSC::Structure::outOfLineCapacity(v44);
  v76 = 0;
  v77 = v45;
  v75[0] = (WTF::StringImpl *)&v77;
  v75[1] = (WTF::StringImpl *)v30;
  v75[2] = (WTF::StringImpl *)v24;
  v75[3] = (WTF::StringImpl *)&v78;
  v75[4] = (WTF::StringImpl *)&v79;
  v75[5] = (WTF::StringImpl *)&v76;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v44, (JSC::VM *)v24, v40, 6, (uint64_t)v75);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v76, v42);
  *((_DWORD *)v44 + 4) |= 0x10u;
  LODWORD(v75[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v46 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v46)
      JSC::JSObject::didBecomePrototype(v46, (JSC::VM *)v24);
  }
  v47 = *v74;
  if (*(_QWORD *)(v24 + 40136) >= *(_QWORD *)(v24 + 40144))
  {
    v47 = *(_QWORD *)(v24 + 40152);
    if ((v47 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v47 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_53;
    }
    v72 = *(_QWORD *)(v47 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v47 + HIDWORD(v72);
    *(_QWORD *)(v24 + 40152) = v47 + (int)v72;
  }
  *v74 = v47 + 128;
LABEL_53:
  *(_DWORD *)v47 = 0;
  MEMORY[0x19AEA4278](v47, v24, a2, v30, v75, &WebCore::JSMediaControlsHost::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v47, (uint64_t)&WebCore::JSMediaControlsHost::s_info);
LABEL_56:
  v48 = *(_QWORD *)(a2 + 56);
  v49 = *(_QWORD *)(v48 + 41456);
  v50 = *(_QWORD *)(v49 + 23536);
  v51 = *(_QWORD **)(v50 + 976);
  if (v51)
    goto LABEL_76;
  v52 = *(_QWORD *)(v49 + 22648);
  if (__ldaxr((unsigned __int8 *)v52))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v52))
  {
    goto LABEL_61;
  }
  MEMORY[0x19AEA534C](v52);
LABEL_61:
  v54 = *(_QWORD *)(v52 + 2824);
  if (!*(_QWORD *)(v54 + 976))
  {
    v55 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v75, "IsoSpace T");
    v79 = 0;
    MEMORY[0x19AEA3204](v55, v75, v48 + 192, v48 + 1872, 32, 8, &v79);
    v57 = (uint64_t)v79;
    v79 = 0;
    if (v57)
      (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
    v58 = v75[0];
    v75[0] = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 1)
        WTF::fastFree(v58, v56);
      else
        --*(_DWORD *)v58;
    }
    v59 = *(_QWORD *)(v54 + 976);
    *(_QWORD *)(v54 + 976) = v55;
    if (v59)
      (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  }
  v51 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v60 = *(_QWORD *)(v50 + 976);
  *(_QWORD *)(v50 + 976) = v51;
  if (v60)
  {
    v61 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v61, v62);
  }
  v63 = __ldxr((unsigned __int8 *)v52);
  if (v63 != 1)
  {
    __clrex();
    goto LABEL_75;
  }
  if (__stlxr(0, (unsigned __int8 *)v52))
LABEL_75:
    WTF::Lock::unlockSlow((WTF::Lock *)v52);
LABEL_76:
  v14 = v51[3];
  if (v14 >= v51[4])
  {
    v14 = v51[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_78;
    }
    v69 = *(_QWORD *)(v14 + 8) ^ v51[6];
    v51[4] = v14 + HIDWORD(v69);
    v51[5] = v14 + (int)v69;
  }
  v51[3] = v14 + 32;
LABEL_78:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v48 + 755))
    __dmb(0xAu);
  v64 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE335F60 & 1) == 0)
  {
    qword_1EE335F58 = (uint64_t)&off_1E32B33E0;
    byte_1EE335F60 = 1;
  }
  v75[0] = a3;
  if ((v14 & 8) != 0)
    v65 = (v14 - 112) | 1;
  else
    v65 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v65 & 1) != 0)
    v66 = v65 + 47;
  else
    v66 = *(_QWORD *)v65 + 32;
  Allocator = *(JSC::Structure **)(v66 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v66 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE335F58;
  *((_QWORD *)Allocator + 2) = v64;
  v79 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v64 + 32), (uint64_t *)v75, (uint64_t *)&v79);
  if (v79)
    *((_QWORD *)v79 + 1) = 3;
  return v14;
}

uint64_t WebCore::convertEnumerationToJS<WebCore::MediaDeviceInfo::Kind>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  if ((byte_1EE335F2C & 1) == 0)
  {
    dword_1ECE78E50 += 2;
    byte_1EE335F2C = 1;
    dword_1ECE78E70 += 2;
    qword_1EE3360B0 = (uint64_t)&dword_1ECE78E50;
    unk_1EE3360B8 = &dword_1ECE78E70;
    dword_1ECE78E90 += 2;
    qword_1EE3360C0 = (uint64_t)&dword_1ECE78E90;
  }
  v3 = *(_QWORD *)&_MergedGlobals_685[8 * (int)a2 + 392];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::JSMediaDeviceInfo::prototype(WebCore::JSMediaDeviceInfo *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSMediaDeviceInfo::s_info + ~((_QWORD)&WebCore::JSMediaDeviceInfo::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaDeviceInfo::s_info + ~((_QWORD)&WebCore::JSMediaDeviceInfo::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSMediaDeviceInfo::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSMediaDeviceInfo::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSMediaDeviceInfoPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSMediaDeviceInfoPrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSMediaDeviceInfo::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSMediaDeviceInfo::s_info);
  }
  return *(_QWORD *)(v13 + 48);
}

_DWORD *WebCore::JSMediaDeviceInfo::destroy(WebCore::JSMediaDeviceInfo *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSMediaDeviceInfo::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSMediaDeviceInfoPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSMediaDeviceInfoPrototype::create(WebCore::JSMediaDeviceInfoPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<6u>(this, (uint64_t)&WebCore::JSMediaDeviceInfo::s_info, &WebCore::JSMediaDeviceInfoPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaDeviceInfo>,(WebCore::DOMConstructorID)137>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  int v35;
  int v36;
  uint64_t v37;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1096);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v33) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v31 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v31);
    v5[2] = SlowCase + (int)v31;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v33, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaDeviceInfo>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v32 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v32);
    v9[2848] = v2 + (int)v32;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v33);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v33);
  v13 = v33;
  v33 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v33);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSMediaDeviceInfo::s_info + ~((_QWORD)&WebCore::JSMediaDeviceInfo::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaDeviceInfo::s_info + ~((_QWORD)&WebCore::JSMediaDeviceInfo::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSMediaDeviceInfo::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSMediaDeviceInfo::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSMediaDeviceInfoPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v27 = (JSC::JSCell *)WebCore::JSMediaDeviceInfoPrototype::create((WebCore::JSMediaDeviceInfoPrototype *)a1, (JSC::VM *)a2, Structure, v26);
  v28 = WebCore::JSMediaDeviceInfo::createStructure((uint64_t *)a1, a2, v27);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v28, (uint64_t)&WebCore::JSMediaDeviceInfo::s_info);
LABEL_22:
  v29 = *(_QWORD *)(v24 + 48);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v29, 14, (uint64_t)&v33);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1096) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsMediaDeviceInfoConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSMediaDeviceInfoPrototype::s_info != (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaDeviceInfo>,(WebCore::DOMConstructorID)137>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsMediaDeviceInfo_deviceId(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 32);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsMediaDeviceInfo_kind(uint64_t a1, uint64_t a2)
{
  return WebCore::convertEnumerationToJS<WebCore::MediaDeviceInfo::Kind>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)*(unsigned int *)(*(_QWORD *)(a2 + 24) + 48));
}

uint64_t WebCore::jsMediaDeviceInfo_label(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 24);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsMediaDeviceInfo_groupId(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 40);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::JSMediaDeviceInfoOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

uint64_t WebCore::JSMediaDeviceInfoOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v26;

  result = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v4 = *(_DWORD *)(result + 8);
  *(_DWORD *)(result + 8) = v4 + 1;
  v5 = result + 16;
  if (!result)
    v5 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v8 = *(_QWORD *)(a3 + 32);
    v6 = (uint64_t *)(a3 + 32);
    v7 = v8;
    if (v8)
    {
      v9 = *(_DWORD *)(v7 - 8);
      v10 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(_QWORD *)(v7 + 16 * v13);
      if (v14 != result)
      {
        v15 = 1;
        while (v14)
        {
          v13 = ((_DWORD)v13 + v15) & v9;
          v14 = *(_QWORD *)(v7 + 16 * v13);
          ++v15;
          if (v14 == result)
            goto LABEL_14;
        }
        v13 = *(unsigned int *)(v7 - 4);
      }
LABEL_14:
      if (v13 != *(_DWORD *)(v7 - 4))
      {
        v16 = (_QWORD *)(v7 + 16 * v13);
        *v16 = -1;
        v19 = v16[1];
        v18 = v16 + 1;
        v17 = v19;
        if (v19)
        {
          *(_QWORD *)(v17 + 8) = 3;
          *v18 = 0;
        }
        ++*(_DWORD *)(*v6 - 16);
        v20 = *v6;
        if (*v6)
          v21 = *(_DWORD *)(v20 - 12) - 1;
        else
          v21 = -1;
        *(_DWORD *)(v20 - 12) = v21;
        v22 = *v6;
        if (*v6)
        {
          v23 = 6 * *(_DWORD *)(v22 - 12);
          v24 = *(_DWORD *)(v22 - 4);
          if (v23 < v24 && v24 >= 9)
          {
            v26 = result;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v6, v24 >> 1, 0);
            result = v26;
          }
        }
      }
    }
    v4 = *(_DWORD *)(result + 8) - 1;
  }
  else if (*(_QWORD *)v5)
  {
    *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
    *(_QWORD *)v5 = 0;
  }
  if (!v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_DWORD *)(result + 8) = v4;
  return result;
}

unint64_t WebCore::wrap<WebCore::MediaDeviceInfo>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t Structure;
  JSC::Structure *v19;
  JSC::JSCell *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  void *v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *Allocator;
  uint64_t v43;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unsigned int v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unint64_t v56;
  _QWORD *v57;
  WTF *v58;

  v5 = *(_QWORD *)(a2 + 3320);
  if (*(_DWORD *)(v5 + 48))
  {
    v48 = *(_QWORD *)(v5 + 32);
    if (!v48)
      goto LABEL_5;
    v49 = *(_DWORD *)(v48 - 8);
    v50 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v51 = 9 * ((v50 + ~(v50 << 13)) ^ ((v50 + ~(v50 << 13)) >> 8));
    v52 = (v51 ^ (v51 >> 15)) + ~((v51 ^ (v51 >> 15)) << 27);
    v53 = v49 & ((v52 >> 31) ^ v52);
    v54 = *(_QWORD *)(v48 + 16 * v53);
    if (v54 != a3)
    {
      v55 = 1;
      while (v54)
      {
        v53 = ((_DWORD)v53 + v55) & v49;
        v54 = *(_QWORD *)(v48 + 16 * v53);
        ++v55;
        if (v54 == a3)
          goto LABEL_63;
      }
      goto LABEL_5;
    }
LABEL_63:
    v6 = *(_QWORD *)(v48 + 16 * v53 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 16);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 8);
  if (*(void (***)(WebCore::MediaDeviceInfo *__hidden))a3 != off_1E335FB10)
  {
    __break(0xC471u);
    JUMPOUT(0x194D07758);
  }
  v8 = *(_QWORD *)(a2 + 3296);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)&WebCore::JSMediaDeviceInfo::s_info + ~((_QWORD)&WebCore::JSMediaDeviceInfo::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaDeviceInfo::s_info + ~((_QWORD)&WebCore::JSMediaDeviceInfo::s_info << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(char ***)(v8 + 16 * v13);
    if (v14 == &WebCore::JSMediaDeviceInfo::s_info)
    {
LABEL_11:
      v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (v16)
        goto LABEL_13;
    }
    else
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(char ***)(v8 + 16 * v13);
        ++v15;
        if (v14 == &WebCore::JSMediaDeviceInfo::s_info)
          goto LABEL_11;
      }
    }
  }
  v17 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSMediaDeviceInfoPrototype::createStructure(v17, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v20 = (JSC::JSCell *)WebCore::JSMediaDeviceInfoPrototype::create((WebCore::JSMediaDeviceInfoPrototype *)v17, (JSC::VM *)a2, Structure, v19);
  v21 = WebCore::JSMediaDeviceInfo::createStructure(v17, a2, v20);
  v16 = WebCore::cacheDOMStructure((JSCell *)a2, v21, (uint64_t)&WebCore::JSMediaDeviceInfo::s_info);
LABEL_13:
  v22 = *(_QWORD *)(a2 + 56);
  v23 = *(_QWORD *)(v22 + 41456);
  v24 = *(_QWORD *)(v23 + 23536);
  v25 = *(_QWORD **)(v24 + 1120);
  if (v25)
    goto LABEL_33;
  v26 = *(_QWORD *)(v23 + 22648);
  if (__ldaxr((unsigned __int8 *)v26))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v26))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v26);
LABEL_18:
  v28 = *(_QWORD *)(v26 + 2824);
  if (!*(_QWORD *)(v28 + 1120))
  {
    v29 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v58, "IsoSpace T");
    v57 = 0;
    MEMORY[0x19AEA3204](v29, &v58, v22 + 192, v22 + 1872, 32, 8, &v57);
    v31 = (uint64_t)v57;
    v57 = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = v58;
    v58 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 1)
        WTF::fastFree(v32, v30);
      else
        --*(_DWORD *)v32;
    }
    v33 = *(_QWORD *)(v28 + 1120);
    *(_QWORD *)(v28 + 1120) = v29;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  }
  v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v35 = *(_QWORD *)(v24 + 1120);
  *(_QWORD *)(v24 + 1120) = v25;
  if (v35)
  {
    v36 = (WTF *)MEMORY[0x19AEA3528](v35, v34);
    WTF::fastFree(v36, v37);
  }
  v38 = __ldxr((unsigned __int8 *)v26);
  if (v38 != 1)
  {
    __clrex();
    goto LABEL_32;
  }
  if (__stlxr(0, (unsigned __int8 *)v26))
LABEL_32:
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
LABEL_33:
  SlowCase = v25[3];
  if (SlowCase < v25[4])
  {
LABEL_34:
    v25[3] = SlowCase + 32;
    goto LABEL_35;
  }
  SlowCase = v25[5];
  if ((SlowCase & 1) == 0)
  {
    v56 = *(_QWORD *)(SlowCase + 8) ^ v25[6];
    v25[4] = SlowCase + HIDWORD(v56);
    v25[5] = SlowCase + (int)v56;
    goto LABEL_34;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_35:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v22 + 755))
    __dmb(0xAu);
  v39 = *(_QWORD *)(a2 + 3320);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::MediaDeviceInfo *)::owner = (uint64_t)&off_1E32B3410;
  }
  if (!*(_DWORD *)(v39 + 48))
  {
    if ((SlowCase & 8) != 0)
      v40 = (SlowCase - 112) | 1;
    else
      v40 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v40 & 1) != 0)
      v41 = v40 + 47;
    else
      v41 = *(_QWORD *)v40 + 32;
    Allocator = *(_QWORD **)(v41 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v41 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::MediaDeviceInfo *)::owner;
    Allocator[2] = v39;
    v43 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = Allocator;
    if (!v43)
      return SlowCase;
LABEL_57:
    *(_QWORD *)(v43 + 8) = 3;
    return SlowCase;
  }
  v58 = (WTF *)a3;
  if ((SlowCase & 8) != 0)
    v45 = (SlowCase - 112) | 1;
  else
    v45 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v45 & 1) != 0)
    v46 = v45 + 47;
  else
    v46 = *(_QWORD *)v45 + 32;
  v47 = *(_QWORD **)(v46 + 16);
  if (!v47)
    v47 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v46 + 16) = *v47;
  *v47 = SlowCase;
  v47[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::MediaDeviceInfo *)::owner;
  v47[2] = v39;
  v57 = v47;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v39 + 32), (uint64_t *)&v58, (uint64_t *)&v57);
  v43 = (uint64_t)v57;
  if (v57)
    goto LABEL_57;
  return SlowCase;
}

unint64_t WebCore::jsMediaDevicesPrototypeFunction_getUserMedia(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  JSC::Structure *v4;
  uint64_t v5;
  uint64_t v6;
  JSC::JSGlobalObject *v7;
  uint64_t v8;
  BOOL v9;
  char **v10;
  BOOL v11;
  uint64_t v13;
  int v14;
  JSC::VM *v15;
  unint64_t v16;
  WebCore::DOMGuardedObject *v17;
  WebCore::DOMGuardedObject *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  char **v23;
  BOOL v24;
  uint64_t v26;
  JSC::JSCell *v27;
  JSC::VM *v28;
  unint64_t v29;
  JSC::Structure *v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t Object;
  WTF::StringImpl *v50;
  unint64_t v51;
  objc_class *v52;
  WebCore::DOMGuardedObject *v53;
  JSC::VM *v54;
  _BYTE *v55;
  WebCore::DOMGuardedObject *v56;
  uint64_t v57;
  _BYTE v58[1072];
  int v59;
  _BYTE v60[1072];
  int v61;
  int v62;
  _BYTE *v63;
  _BYTE v64[1072];
  unsigned int v65;
  WTF::StringImpl *v66;
  char v67[8];
  char v68[1064];
  unsigned int v69;
  unsigned int v70;
  int v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  char v74[1072];
  unsigned int v75;
  int v76;
  uint64_t v77;
  _BYTE v78[1072];
  unsigned int v79;
  _BYTE v80[1072];
  unsigned int v81;
  uint64_t v82;

  v3 = MEMORY[0x1E0C80A78](this, a2);
  v6 = v5;
  v7 = (JSC::JSGlobalObject *)v3;
  v82 = *MEMORY[0x1E0C80C00];
  v8 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v9 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v10 = (char **)(16 * v8);
  if ((_DWORD)v8)
    v11 = v10 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v11 = 1;
  if (!v11)
  {
    do
    {
      v10 = (char **)v10[2];
      v9 = v10 != 0;
    }
    while (v10 != &WebCore::JSDOMGlobalObject::s_info && v10 != 0);
  }
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x194D08060);
  }
  v13 = *(_QWORD *)(v3 + 56);
  v14 = *(_DWORD *)(v3 + 1164);
  if (v14)
    v15 = (JSC::VM *)(16 * (v14 & 0xFFFFFFFE));
  else
    v15 = 0;
  v16 = JSC::JSPromise::create(*(JSC::JSPromise **)(v3 + 56), v15, v4);
  v17 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v18 = WebCore::DOMGuardedObject::DOMGuardedObject(v17, (unint64_t)v7, v16);
  *(_QWORD *)v18 = &off_1E3226868;
  *((_DWORD *)v18 + 10) = 0;
  *((_BYTE *)v18 + 44) = 0;
  v20 = *(_QWORD *)(v6 + 40);
  if ((v20 & 0xFFFE000000000002) == 0)
  {
    v21 = *(unsigned int *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x4C);
    v22 = *(_DWORD *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x4C) != 0;
    v23 = (char **)(16 * v21);
    if ((_DWORD)v21)
      v24 = v23 == &WebCore::JSMediaDevices::s_info;
    else
      v24 = 1;
    if (!v24)
    {
      do
      {
        v23 = (char **)v23[2];
        v22 = v23 != 0;
      }
      while (v23 != &WebCore::JSMediaDevices::s_info && v23 != 0);
    }
    if (v22)
    {
      v26 = *(_QWORD *)(v20 + 24);
      if (*(_DWORD *)(v6 + 32) == 1)
      {
        v54 = (JSC::VM *)*((_QWORD *)v7 + 7);
      }
      else
      {
        v27 = *(JSC::JSCell **)(v6 + 48);
        v28 = (JSC::VM *)*((_QWORD *)v7 + 7);
        v54 = v28;
        if (((unint64_t)v27 & 0xFFFFFFFFFFFFFFF7) != 2)
        {
          if (((unint64_t)v27 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v27)) == 0)
          {
            JSC::throwTypeError();
            v42 = 1;
            v62 = 1;
            goto LABEL_72;
          }
          v30 = (JSC::Structure *)Object;
          v29 = v16;
          v78[0] = 0;
          v79 = 0;
          v80[0] = 0;
          v81 = 0;
          WTF::AtomStringImpl::addLiteral();
          v51 = JSC::JSObject::get(v30, v7, (unint64_t)v72);
          if (v72)
          {
            if (*(_DWORD *)v72 == 2)
              WTF::StringImpl::destroy(v72, v50);
            else
              *(_DWORD *)v72 -= 2;
          }
          if (*((_DWORD *)v28 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v28))
          {
            v62 = 1;
            v16 = v29;
            v33 = v26;
            goto LABEL_54;
          }
          if (v51 != 10)
          {
            WebCore::Converter<WebCore::IDLUnion<WebCore::IDLBoolean,WebCore::IDLDictionary<WebCore::MediaTrackConstraints>>>::convert((uint64_t)&v72, v7, v51);
            v41 = v76;
            if (v76)
            {
              v62 = 1;
              v16 = v29;
              v33 = v26;
LABEL_52:
              if (v41 != -1)
                ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32B5690[v41])(&v66, &v73);
LABEL_54:
              if (v81 != -1)
                ((void (*)(WTF::StringImpl **, _BYTE *))*(&off_1E32B55E8 + v81))(&v72, v80);
              v81 = -1;
              if (v79 != -1)
                ((void (*)(WTF::StringImpl **, _BYTE *))*(&off_1E32B55E8 + v79))(&v72, v78);
              v42 = v62;
              if (!v62)
              {
                v43 = v33 - 32;
                v78[0] = 0;
                v79 = -1;
                v44 = v59;
                if (v59 != -1)
                {
                  ((void (*)(WTF::StringImpl **, _BYTE *, _BYTE *))off_1E32B5620[v59])(&v72, v78, v58);
                  v79 = v44;
                }
                v80[0] = 0;
                v81 = -1;
                v45 = v61;
                if (v61 != -1)
                {
                  ((void (*)(WTF::StringImpl **, _BYTE *, _BYTE *))off_1E32B5620[v61])(&v72, v80, v60);
                  v81 = v45;
                }
                v72 = v17;
                WebCore::MediaDevices::getUserMedia(v43, (uint64_t)&v77, (uint64_t *)&v72);
                v46 = v72;
                v72 = 0;
                if (v46)
                {
                  if (*((_DWORD *)v46 + 4) == 1)
                    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v46 + 16))(v46);
                  else
                    --*((_DWORD *)v46 + 4);
                }
                if (v81 != -1)
                  ((void (*)(WTF::StringImpl **, _BYTE *))*(&off_1E32B55E8 + v81))(&v72, v80);
                v81 = -1;
                if (v79 != -1)
                  ((void (*)(WTF::StringImpl **, _BYTE *))*(&off_1E32B55E8 + v79))(&v72, v78);
                v17 = 0;
                v42 = v62;
              }
              if (v42 == -1)
              {
LABEL_73:
                if (!v17)
                  goto LABEL_76;
                goto LABEL_74;
              }
LABEL_72:
              ((void (*)(uint64_t *, uint64_t *))off_1E32B57A0[v42])(&v77, &v57);
              goto LABEL_73;
            }
            v32 = v75;
            v67[0] = 0;
            v69 = -1;
            if (v75 == -1)
            {
              if (v81 == -1)
              {
                v31 = 0;
              }
              else
              {
                ((void (*)(_BYTE **, _BYTE *))*(&off_1E32B55E8 + v81))(&v63, v80);
                v31 = 0;
                v81 = -1;
              }
              goto LABEL_32;
            }
            v31 = 0;
LABEL_31:
            ((void (*)(_BYTE **, char *, char *))off_1E32B5620[v32])(&v63, v67, v74);
            v69 = v32;
            v63 = v80;
            ((void (*)(_BYTE **))off_1E32B5658[v32])(&v63);
LABEL_32:
            v16 = v29;
            if (v69 != -1)
              ((void (*)(_BYTE **, char *))*(&off_1E32B55E8 + v69))(&v63, v67);
            v33 = v26;
            if (v31)
              goto LABEL_40;
            WTF::AtomStringImpl::addLiteral();
            v34 = v66;
            v36 = JSC::JSObject::get(v30, v7, (unint64_t)v66);
            if (v34)
            {
              if (*(_DWORD *)v34 == 2)
                WTF::StringImpl::destroy(v34, v35);
              else
                *(_DWORD *)v34 -= 2;
            }
            if (*((_DWORD *)v54 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v54))
            {
              v62 = 1;
LABEL_51:
              v41 = v76;
              goto LABEL_52;
            }
            if (v36 == 10)
            {
LABEL_40:
              v37 = 0;
              v68[0] = 0;
              v70 = 0;
              v71 = 0;
              v64[0] = 0;
              v65 = -1;
            }
            else
            {
              WebCore::Converter<WebCore::IDLUnion<WebCore::IDLBoolean,WebCore::IDLDictionary<WebCore::MediaTrackConstraints>>>::convert((uint64_t)&v66, v7, v36);
              v40 = v71;
              if (v71)
              {
                v62 = 1;
LABEL_49:
                if (v40 != -1)
                  ((void (*)(_BYTE **, char *))off_1E32B5690[v40])(&v63, v67);
                goto LABEL_51;
              }
              v37 = v70;
              v64[0] = 0;
              v65 = -1;
              if (v70 == -1)
              {
                if (v79 == -1)
                {
LABEL_44:
                  v58[0] = 0;
                  v59 = -1;
                  v38 = v79;
                  if (v79 != -1)
                  {
                    ((void (*)(_BYTE **, _BYTE *, _BYTE *))off_1E32B5620[v79])(&v63, v58, v78);
                    v59 = v38;
                  }
                  v60[0] = 0;
                  v61 = -1;
                  v39 = v81;
                  if (v81 != -1)
                  {
                    ((void (*)(_BYTE **, _BYTE *, _BYTE *))off_1E32B5620[v81])(&v63, v60, v80);
                    v61 = v39;
                  }
                  v62 = 0;
                  v40 = v71;
                  goto LABEL_49;
                }
                ((void (*)(_BYTE **, _BYTE *))*(&off_1E32B55E8 + v79))(&v55, v78);
                v79 = -1;
LABEL_42:
                if (v65 != -1)
                  ((void (*)(_BYTE **, _BYTE *))*(&off_1E32B55E8 + v65))(&v55, v64);
                goto LABEL_44;
              }
            }
            ((void (*)(_BYTE **, _BYTE *, char *))off_1E32B5620[v37])(&v55, v64, v68);
            v65 = v37;
            v55 = v78;
            ((void (*)(_BYTE **, _BYTE *, _BYTE *))off_1E32B5658[v37])(&v55, v78, v64);
            goto LABEL_42;
          }
          v31 = 0;
LABEL_30:
          v32 = 0;
          v74[0] = 0;
          v75 = 0;
          v76 = 0;
          v67[0] = 0;
          v69 = -1;
          goto LABEL_31;
        }
      }
      v29 = v16;
      v30 = 0;
      v78[0] = 0;
      v79 = 0;
      v80[0] = 0;
      v81 = 0;
      v31 = 1;
      goto LABEL_30;
    }
  }
  WebCore::rejectPromiseWithThisTypeError(v17, (WebCore::DeferredPromise *)"MediaDevices", "getUserMedia", v19);
LABEL_74:
  if (*((_DWORD *)v17 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v17 + 16))(v17);
  else
    --*((_DWORD *)v17 + 4);
LABEL_76:
  v47 = *(_QWORD *)(v13 + 16);
  if (v47)
  {
    if (*(_QWORD *)(v13 + 24) != v47)
    {
      v52 = *(objc_class **)(v47 + 8);
      JSC::VM::clearException((JSC::VM *)v13);
      WebCore::DeferredPromise::create((unint64_t)v7, v16, 0, &v56);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v56, v52, 0);
      v53 = v56;
      v56 = 0;
      if (v53)
      {
        if (*((_DWORD *)v53 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v53 + 16))(v53);
        else
          --*((_DWORD *)v53 + 4);
      }
    }
  }
  if (*(_DWORD *)(v13 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13) & 1) != 0)
    return 10;
  return v16;
}

uint64_t WebCore::JSMediaDevices::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24) - 32);
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSMediaDevicesPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSMediaDevicesPrototype::create(WebCore::JSMediaDevicesPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  JSC::Structure *v22;
  unint64_t v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  uint64_t v27;
  int *v28;
  WTF::StringImpl **v29;
  int *v30;
  int v31;
  int v32;
  WTF::StringImpl *v33;
  int v34;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v24 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v24);
    *((_QWORD *)this + 4865) = SlowCase + (int)v24;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<6u>(this, (uint64_t)&WebCore::JSMediaDevices::s_info, &WebCore::JSMediaDevicesPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                         + 0x28));
  if (v9 && *(_BYTE *)(v9 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194D08720);
  }
  v10 = v9 - 192;
  if (!v9)
    v10 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v10 + 680) + 712) & 0x20000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v11 = v25;
    v12 = *((_DWORD *)this + 23281);
    *((_DWORD *)this + 23281) = 1;
    LODWORD(v25) = -1;
    WORD2(v25) = 1;
    JSC::JSObject::deleteProperty();
    *((_DWORD *)this + 23281) = v12;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v13);
      else
        *(_DWORD *)v11 -= 2;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
      JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
  }
  v14 = *(_QWORD *)(v6[319] + 20048);
  v33 = 0;
  v15 = JSC::JSFunction::create();
  v25 = 0;
  v26 = SlowCase;
  v27 = 0x1000000FFFFFFFFLL;
  v28 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, this, v14, v15, 6, (uint64_t)&v25);
  v17 = v33;
  v33 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v20 = JSC::JSString::create((uint64_t)this, &v25);
  v21 = v25;
  v25 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v19);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v34 = *(_DWORD *)SlowCase;
  v33 = v22;
  v32 = JSC::Structure::outOfLineCapacity(v22);
  v31 = 0;
  v25 = (WTF::StringImpl *)&v32;
  v26 = SlowCase;
  v27 = (uint64_t)this;
  v28 = &v34;
  v29 = &v33;
  v30 = &v31;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v22, this, v18, 6, (uint64_t)&v25);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v31, v20);
  *((_DWORD *)v22 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaDevices>,(WebCore::DOMConstructorID)138>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1104);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaDevices>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSMediaDevices::s_info + ~((_QWORD)&WebCore::JSMediaDevices::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaDevices::s_info + ~((_QWORD)&WebCore::JSMediaDevices::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSMediaDevices::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSMediaDevices::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEventTarget::prototype((WebCore::JSEventTarget *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSMediaDevicesPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSMediaDevicesPrototype::create((WebCore::JSMediaDevicesPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSMediaDevices::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSMediaDevices::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1104) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsMediaDevicesConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSMediaDevicesPrototype::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaDevices>,(WebCore::DOMConstructorID)138>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsMediaDevices_ondevicechange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 600), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
  {
    WebCore::MediaDevices::~MediaDevices((WebCore *)((char *)v5 - 32), v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 - 2);
  }
  return v10;
}

BOOL WebCore::setJSMediaDevices_ondevicechange(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSMediaDevices::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSMediaDevices::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 600), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        WebCore::MediaDevices::~MediaDevices((WebCore::EventTarget *)((char *)v11 - 32), v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::JSMediaDevicesOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v6 = *(_QWORD *)(v5 - 24);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (*(_QWORD *)(v5 - 16)
    || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 - 32) + 64))(v5 - 32), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

unint64_t WebCore::wrap<WebCore::MediaDevices>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  WebCore::JSEventTarget *v17;
  JSC::JSCell *v18;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v20;
  JSC::Structure *v21;
  JSC::JSCell *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  WTF *v39;
  void *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *Allocator;
  uint64_t v46;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  WTF *v62;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v51 = *(_QWORD *)(v5 + 32);
    if (!v51)
      goto LABEL_5;
    v52 = *(_DWORD *)(v51 - 8);
    v53 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v54 = 9 * ((v53 + ~(v53 << 13)) ^ ((v53 + ~(v53 << 13)) >> 8));
    v55 = (v54 ^ (v54 >> 15)) + ~((v54 ^ (v54 >> 15)) << 27);
    v56 = v52 & ((v55 >> 31) ^ v55);
    v57 = *(_QWORD *)(v51 + 16 * v56);
    if (v57 != a3)
    {
      v58 = 1;
      while (v57)
      {
        v56 = ((_DWORD)v56 + v58) & v52;
        v57 = *(_QWORD *)(v51 + 16 * v56);
        ++v58;
        if (v57 == a3)
          goto LABEL_66;
      }
      goto LABEL_5;
    }
LABEL_66:
    v6 = *(_QWORD *)(v51 + 16 * v56 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 40);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 24);
  if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))a3 != &off_1E335FB30)
  {
    __break(0xC471u);
    JUMPOUT(0x194D09338);
  }
  v8 = *((_QWORD *)a2 + 412);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)&WebCore::JSMediaDevices::s_info + ~((_QWORD)&WebCore::JSMediaDevices::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaDevices::s_info + ~((_QWORD)&WebCore::JSMediaDevices::s_info << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(char ***)(v8 + 16 * v13);
    if (v14 == &WebCore::JSMediaDevices::s_info)
    {
LABEL_11:
      v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (v16)
        goto LABEL_13;
    }
    else
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(char ***)(v8 + 16 * v13);
        ++v15;
        if (v14 == &WebCore::JSMediaDevices::s_info)
          goto LABEL_11;
      }
    }
  }
  v17 = (WebCore::JSEventTarget *)*((_QWORD *)a2 + 7);
  v18 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v17, a2, (WebCore::JSDOMGlobalObject *)a3);
  Structure = WebCore::JSMediaDevicesPrototype::createStructure((uint64_t *)v17, (uint64_t)a2, v18);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v22 = (JSC::JSCell *)WebCore::JSMediaDevicesPrototype::create(v17, Structure, v20, v21);
  v23 = WebCore::JSMediaDevices::createStructure((uint64_t *)v17, (uint64_t)a2, v22);
  v16 = WebCore::cacheDOMStructure((JSCell *)a2, v23, (uint64_t)&WebCore::JSMediaDevices::s_info);
LABEL_13:
  v24 = *((_QWORD *)a2 + 7);
  v25 = *(_QWORD *)(v24 + 41456);
  v26 = *(_QWORD *)(v25 + 23536);
  v27 = *(_QWORD **)(v26 + 1128);
  if (v27)
    goto LABEL_36;
  v28 = *(_QWORD *)(v25 + 22648);
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v28))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v28);
LABEL_18:
  v30 = *(_QWORD *)(v28 + 2824);
  v60 = *(_QWORD *)(v30 + 1128);
  if (!v60)
  {
    v31 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v62, "IsoSpace T");
    v61 = 0;
    MEMORY[0x19AEA3204](v31, &v62, v24 + 192, v24 + 1872, 32, 8, &v61);
    v33 = (uint64_t)v61;
    v61 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = v62;
    v62 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::fastFree(v34, v32);
      else
        --*(_DWORD *)v34;
    }
    v60 = v31;
    v35 = *(_QWORD *)(v30 + 1128);
    *(_QWORD *)(v30 + 1128) = v31;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    v36 = *(unsigned int *)(v28 + 2844);
    if ((_DWORD)v36 == *(_DWORD *)(v28 + 2840))
    {
      v37 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v28 + 2832, v36 + 1, (unint64_t)&v60);
      v36 = *(unsigned int *)(v28 + 2844);
      *(_QWORD *)(*(_QWORD *)(v28 + 2832) + 8 * v36) = *v37;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v28 + 2832) + 8 * v36) = v31;
    }
    *(_DWORD *)(v28 + 2844) = v36 + 1;
  }
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v38 = *(_QWORD *)(v26 + 1128);
  *(_QWORD *)(v26 + 1128) = v27;
  if (v38)
  {
    v39 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v39, v40);
  }
  v41 = __ldxr((unsigned __int8 *)v28);
  if (v41 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v28))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_36:
  SlowCase = v27[3];
  if (SlowCase < v27[4])
  {
LABEL_37:
    v27[3] = SlowCase + 32;
    goto LABEL_38;
  }
  SlowCase = v27[5];
  if ((SlowCase & 1) == 0)
  {
    v59 = *(_QWORD *)(SlowCase + 8) ^ v27[6];
    v27[4] = SlowCase + HIDWORD(v59);
    v27[5] = SlowCase + (int)v59;
    goto LABEL_37;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
  *(_QWORD *)(SlowCase + 24) = a3 + 32;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v42 = *((_QWORD *)a2 + 415);
  if ((byte_1EE335F70 & 1) == 0)
  {
    qword_1EE335F68 = (uint64_t)&off_1E32B3440;
    byte_1EE335F70 = 1;
  }
  if (!*(_DWORD *)(v42 + 48))
  {
    if ((SlowCase & 8) != 0)
      v43 = (SlowCase - 112) | 1;
    else
      v43 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v43 & 1) != 0)
      v44 = v43 + 47;
    else
      v44 = *(_QWORD *)v43 + 32;
    Allocator = *(_QWORD **)(v44 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v44 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE335F68;
    Allocator[2] = v42;
    v46 = *(_QWORD *)(a3 + 40);
    *(_QWORD *)(a3 + 40) = Allocator;
    if (!v46)
      return SlowCase;
LABEL_60:
    *(_QWORD *)(v46 + 8) = 3;
    return SlowCase;
  }
  v62 = (WTF *)a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  v50 = *(_QWORD **)(v49 + 16);
  if (!v50)
    v50 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *v50;
  *v50 = SlowCase;
  v50[1] = &qword_1EE335F68;
  v50[2] = v42;
  v61 = v50;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v42 + 32), (uint64_t *)&v62, (uint64_t *)&v61);
  v46 = (uint64_t)v61;
  if (v61)
    goto LABEL_60;
  return SlowCase;
}

uint64_t WebCore::JSDOMConstructor<WebCore::JSMediaElementAudioSourceNode>::construct(WebCore::JSDOMGlobalObject *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  JSC::JSGlobalObject *v7;
  uint64_t v8;
  uint64_t v9;
  JSCell *v10;
  uint64_t v11;
  JSC::VM *v12;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;
  uint64_t v18;
  JSC::JSCell *v19;
  uint64_t Object;
  JSC::Structure *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _BOOL4 v27;
  char **v28;
  BOOL v29;
  uint64_t v31;
  WebCore::JSDOMGlobalObject *v32;
  JSC::VM *v33;
  JSC::VM *v34;
  WebCore::AudioNode *v35;
  JSC::JSCell *v36;
  JSC::JSGlobalObject *v37;
  JSC::JSObject *v38;
  JSC::JSGlobalObject *v39;
  JSC::VM *v40;
  JSC::JSObject *v41;
  JSC::Structure *v42;
  JSC::VM *FunctionRealm;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char **v50;
  int v51;
  JSC::JSCell *v52;
  unint64_t Structure;
  JSC::Structure *v54;
  JSC::JSCell *v55;
  uint64_t v56;
  unint64_t SubclassStructure;
  JSValue v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  JSValue v61;
  uint64_t v62;
  int v63[2];
  WTF::StringImpl *v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  JSC::VM *v69;
  WTF::StringImpl *v70;

  v4 = *((_QWORD *)a1 + 7);
  v68 = v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(a1);
  if (v6 && *(_BYTE *)(v6 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194D098F0);
  }
  v9 = v6 - 192;
  if (!v6)
    v9 = 0;
  if ((*(_DWORD *)(*(_QWORD *)(v9 + 680) + 720) & 0x20) == 0)
  {
    JSC::throwTypeError();
    return 2;
  }
  if ((unint64_t)(*(int *)(a2 + 32) - 1) <= 1)
  {
    v58.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, v7);
    return JSC::VM::throwException((JSC::VM *)v4, a1, v58);
  }
  v11 = *(_QWORD *)(a2 + 48);
  v12 = (JSC::VM *)*((_QWORD *)a1 + 7);
  *(_QWORD *)v63 = v12;
  if ((v11 & 0xFFFE000000000002) != 0)
    goto LABEL_19;
  v13 = *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C);
  v14 = *(_DWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) != 0;
  v15 = (char **)(16 * v13);
  if ((_DWORD)v13)
    v16 = v15 == &WebCore::JSAudioContext::s_info;
  else
    v16 = 1;
  if (!v16)
  {
    do
    {
      v15 = (char **)v15[2];
      v14 = v15 != 0;
    }
    while (v15 != &WebCore::JSAudioContext::s_info && v15 != 0);
  }
  if (!v14)
  {
LABEL_19:
    WebCore::throwArgumentTypeError((uint64_t)a1, (uint64_t)v63, 0, "context", 8, "MediaElementAudioSourceNode", 28, v8, 0, 0, "AudioContext", 13);
    return 0;
  }
  v18 = *(_QWORD *)(v11 + 24);
  v19 = *(JSC::JSCell **)(a2 + 56);
  v69 = v12;
  if (((unint64_t)v19 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
LABEL_28:
    WebCore::throwRequiredMemberTypeError((int)a1, (int)&v69, "mediaElement", 13, "MediaElementAudioSourceOptions", 31, "HTMLMediaElement", 17);
LABEL_29:
    v10 = 0;
    v24 = 1;
    v67 = 1;
LABEL_30:
    ((void (*)(int *, uint64_t *))off_1E32B57C0[v24])(v63, &v66);
    return (uint64_t)v10;
  }
  if (((unint64_t)v19 & 0xFFFE000000000002) != 0)
    goto LABEL_43;
  Object = JSC::JSCell::getObject(v19);
  if (!Object)
    goto LABEL_43;
  v21 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v23 = JSC::JSObject::get(v21, a1, *(unint64_t *)v63);
  if (*(_QWORD *)v63)
  {
    if (**(_DWORD **)v63 == 2)
      WTF::StringImpl::destroy(*(WTF::StringImpl **)v63, v22);
    else
      **(_DWORD **)v63 -= 2;
  }
  if (*((_DWORD *)v69 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v69) & 1) != 0)
    goto LABEL_29;
  if (v23 == 10)
    goto LABEL_28;
  *(_QWORD *)v63 = *((_QWORD *)a1 + 7);
  if ((v23 & 0xFFFE000000000002) != 0)
    goto LABEL_43;
  v26 = *(unsigned int *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x4C);
  v27 = *(_DWORD *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x4C) != 0;
  v28 = (char **)(16 * v26);
  if ((_DWORD)v26)
    v29 = v28 == &WebCore::JSHTMLMediaElement::s_info;
  else
    v29 = 1;
  if (!v29)
  {
    do
    {
      v28 = (char **)v28[2];
      v27 = v28 != 0;
    }
    while (v28 != &WebCore::JSHTMLMediaElement::s_info && v28 != 0);
  }
  if (!v27 || (v31 = *(_QWORD *)(v23 + 24)) == 0)
  {
LABEL_43:
    JSC::throwTypeError();
    goto LABEL_29;
  }
  *(_DWORD *)(v31 + 24) += 2;
  v67 = 0;
  v66 = 0;
  v69 = (JSC::VM *)v31;
  WebCore::MediaElementAudioSourceNode::create((unsigned int *)(v18 - 32), (uint64_t *)&v69, (uint64_t)v63);
  if (*(_DWORD *)(v31 + 24) == 2)
  {
    if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v31);
  }
  else
  {
    *(_DWORD *)(v31 + 24) -= 2;
  }
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    goto LABEL_91;
  if (!v65)
  {
    v33 = *(JSC::VM **)(v5 + 40);
    v34 = *(JSC::VM **)v63;
    *(_QWORD *)v63 = 0;
    v69 = v34;
    if (*(uint64_t (***)(WebCore::AudioNode *__hidden))v34 != off_1E336AD88)
    {
      __break(0xC471u);
      JUMPOUT(0x194D099C4);
    }
    v10 = (JSCell *)WebCore::createWrapper<WebCore::MediaElementAudioSourceNode,WebCore::MediaElementAudioSourceNode>(v33, (uint64_t *)&v69, v32);
    v35 = v69;
    v69 = 0;
    if (v35)
      WebCore::AudioNode::deref(v35);
    goto LABEL_52;
  }
  if (v65 == 1)
  {
    v59 = (WTF::StringImpl *)LOBYTE(v63[0]);
    LOBYTE(v69) = v63[0];
    v60 = v64;
    v64 = 0;
    v70 = v60;
    if (!*(_QWORD *)(v4 + 16))
    {
      v61.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)LOBYTE(v63[0]), (JSC::JSGlobalObject *)&v70);
      JSC::VM::throwException((JSC::VM *)v4, a1, v61);
      v60 = v70;
    }
    v70 = 0;
    if (v60)
    {
      if (*(_DWORD *)v60 == 2)
        WTF::StringImpl::destroy(v60, v59);
      else
        *(_DWORD *)v60 -= 2;
    }
    v10 = 0;
LABEL_52:
    if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
      goto LABEL_91;
    v36 = *(JSC::JSCell **)(a2 + 40);
    if (((unint64_t)v36 & 0xFFFE000000000002) != 0
      || (v37 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v36)) == 0
      || (v39 = v37, v37 == *(JSC::JSGlobalObject **)(a2 + 24))
      || (v40 = (JSC::VM *)*((_QWORD *)a1 + 7),
          FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v37, v38),
          *((_DWORD *)v40 + 20))
      && (JSC::VM::hasExceptionsAfterHandlingTraps(v40) & 1) != 0)
    {
LABEL_66:
      if (!*(_DWORD *)(v4 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) == 0)
      {
LABEL_67:
        if (v65 != -1)
          ((void (*)(JSC::VM **, int *))off_1E32B57B0[v65])(&v69, v63);
        v24 = 0;
        goto LABEL_30;
      }
LABEL_91:
      v10 = 0;
      goto LABEL_67;
    }
    v44 = *((_QWORD *)FunctionRealm + 412);
    if (v44)
    {
      v45 = *(_DWORD *)(v44 - 8);
      v46 = ((unint64_t)&WebCore::JSMediaElementAudioSourceNode::s_info
           + ~((_QWORD)&WebCore::JSMediaElementAudioSourceNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaElementAudioSourceNode::s_info
                                                                                 + ~((_QWORD)&WebCore::JSMediaElementAudioSourceNode::s_info << 32)) >> 22);
      v47 = 9 * ((v46 + ~(v46 << 13)) ^ ((v46 + ~(v46 << 13)) >> 8));
      v48 = (v47 ^ (v47 >> 15)) + ~((v47 ^ (v47 >> 15)) << 27);
      v49 = v45 & ((v48 >> 31) ^ v48);
      v50 = *(char ***)(v44 + 16 * v49);
      if (v50 == &WebCore::JSMediaElementAudioSourceNode::s_info)
      {
LABEL_62:
        v41 = *(JSC::JSObject **)(v44 + 16 * v49 + 8);
        if (v41)
        {
LABEL_64:
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v39, v41, v42);
          if (!*((_DWORD *)v40 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v40) & 1) == 0)
            JSC::JSObject::setStructure(v10, v40, SubclassStructure);
          goto LABEL_66;
        }
      }
      else
      {
        v51 = 1;
        while (v50)
        {
          v49 = ((_DWORD)v49 + v51) & v45;
          v50 = *(char ***)(v44 + 16 * v49);
          ++v51;
          if (v50 == &WebCore::JSMediaElementAudioSourceNode::s_info)
            goto LABEL_62;
        }
      }
    }
    v52 = (JSC::JSCell *)WebCore::JSAudioNode::prototype(v40, FunctionRealm, v41);
    Structure = WebCore::JSMediaElementAudioSourceNodePrototype::createStructure((uint64_t *)v40, (uint64_t)FunctionRealm, v52);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v55 = (JSC::JSCell *)WebCore::JSMediaElementAudioSourceNodePrototype::create(v40, FunctionRealm, Structure, v54);
    v56 = WebCore::JSMediaElementAudioSourceNode::createStructure((uint64_t *)v40, (uint64_t)FunctionRealm, v55);
    v41 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v56, (uint64_t)&WebCore::JSMediaElementAudioSourceNode::s_info);
    goto LABEL_64;
  }
  v62 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::JSMediaElementAudioSourceNode::analyzeHeap(v62);
}

uint64_t WebCore::JSMediaElementAudioSourceNode::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSAudioNode::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSAudioNode::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSAudioNode::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSMediaElementAudioSourceNodePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSMediaElementAudioSourceNodePrototype::create(WebCore::JSMediaElementAudioSourceNodePrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSMediaElementAudioSourceNode::s_info, (uint64_t)&WebCore::JSMediaElementAudioSourceNodePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSMediaElementAudioSourceNode>,(WebCore::DOMConstructorID)256>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2048);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioNode>,(WebCore::DOMConstructorID)237>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSMediaElementAudioSourceNode>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000002, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSMediaElementAudioSourceNode::s_info
         + ~((_QWORD)&WebCore::JSMediaElementAudioSourceNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaElementAudioSourceNode::s_info
                                                                               + ~((_QWORD)&WebCore::JSMediaElementAudioSourceNode::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSMediaElementAudioSourceNode::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSMediaElementAudioSourceNode::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSAudioNode::prototype((WebCore::JSAudioNode *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSMediaElementAudioSourceNodePrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSMediaElementAudioSourceNodePrototype::create((WebCore::JSMediaElementAudioSourceNodePrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSMediaElementAudioSourceNode::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSMediaElementAudioSourceNode::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2048) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsMediaElementAudioSourceNodeConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSMediaElementAudioSourceNodePrototype::s_info != (char **)(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                             + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSMediaElementAudioSourceNode>,(WebCore::DOMConstructorID)256>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsMediaElementAudioSourceNode_mediaElement(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::HTMLElement *a4)
{
  return WebCore::toJS(a1, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WebCore::JSDOMGlobalObject **)(*(_QWORD *)(a2 + 24) + 168), a4);
}

uint64_t WebCore::JSMediaElementAudioSourceNode::subspaceForImpl(WebCore::JSMediaElementAudioSourceNode *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 2072);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v21 = *(_QWORD *)(v8 + 2072);
  if (!v21)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v9, &v23, (char *)this + 192, (char *)this + 1872, 32, 8, &v22);
    v11 = v22;
    v22 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v23;
    v23 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v21 = v9;
    v13 = *(_QWORD *)(v8 + 2072);
    *(_QWORD *)(v8 + 2072) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      v15 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6 + 2832, v14 + 1, (unint64_t)&v21);
      v14 = *(unsigned int *)(v6 + 2844);
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = *v15;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
    }
    *(_DWORD *)(v6 + 2844) = v14 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v16 = *(_QWORD *)(v3 + 2072);
  *(_QWORD *)(v3 + 2072) = v4;
  if (v16)
  {
    v17 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v17, v18);
  }
  v19 = __ldxr((unsigned __int8 *)v6);
  if (v19 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::createWrapper<WebCore::MediaElementAudioSourceNode,WebCore::MediaElementAudioSourceNode>(JSC::VM *a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  WebCore::JSAudioNode *v15;
  JSC::JSCell *v16;
  unint64_t Structure;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 412);
  if (!v6)
    goto LABEL_7;
  v7 = *(_DWORD *)(v6 - 8);
  v8 = ((unint64_t)&WebCore::JSMediaElementAudioSourceNode::s_info
      + ~((_QWORD)&WebCore::JSMediaElementAudioSourceNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaElementAudioSourceNode::s_info
                                                                            + ~((_QWORD)&WebCore::JSMediaElementAudioSourceNode::s_info << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = *(char ***)(v6 + 16 * v11);
  if (v12 != &WebCore::JSMediaElementAudioSourceNode::s_info)
  {
    v13 = 1;
    while (v12)
    {
      v11 = ((_DWORD)v11 + v13) & v7;
      v12 = *(char ***)(v6 + 16 * v11);
      ++v13;
      if (v12 == &WebCore::JSMediaElementAudioSourceNode::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
  if (!v14)
  {
LABEL_7:
    v15 = (WebCore::JSAudioNode *)*((_QWORD *)a1 + 7);
    v16 = (JSC::JSCell *)WebCore::JSAudioNode::prototype(v15, a1, a3);
    Structure = WebCore::JSMediaElementAudioSourceNodePrototype::createStructure((uint64_t *)v15, (uint64_t)a1, v16);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v19 = (JSC::JSCell *)WebCore::JSMediaElementAudioSourceNodePrototype::create(v15, a1, Structure, v18);
    v20 = WebCore::JSMediaElementAudioSourceNode::createStructure((uint64_t *)v15, (uint64_t)a1, v19);
    v14 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSMediaElementAudioSourceNode::s_info);
  }
  v21 = WebCore::JSMediaElementAudioSourceNode::create(v14, a1, a2);
  WebCore::cacheWrapper<WebCore::AnalyserNode,WebCore::JSAnalyserNode>(*((_QWORD *)a1 + 415), v5, v21);
  return v21;
}

uint64_t WebCore::wrap<WebCore::MediaElementAudioSourceNode>(int a1, JSC::VM *a2, WebCore::AudioNode *this)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::JSDOMGlobalObject *v8;
  WebCore::AudioNode *v9;
  uint64_t result;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  WebCore::AudioNode *v17;
  int v18;
  WebCore::AudioNode *v19;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v11 = *(_QWORD *)(v5 + 32);
    if (!v11)
      goto LABEL_5;
    v12 = *(_DWORD *)(v11 - 8);
    v13 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
    v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
    v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
    v16 = v12 & ((v15 >> 31) ^ v15);
    v17 = *(WebCore::AudioNode **)(v11 + 16 * v16);
    if (v17 != this)
    {
      v18 = 1;
      while (v17)
      {
        v16 = ((_DWORD)v16 + v18) & v12;
        v17 = *(WebCore::AudioNode **)(v11 + 16 * v16);
        ++v18;
        if (v17 == this)
          goto LABEL_14;
      }
      goto LABEL_5;
    }
LABEL_14:
    v6 = *(_QWORD *)(v11 + 16 * v16 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *((_QWORD *)this + 1);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    v7 = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return v7;
  }
LABEL_5:
  WebCore::AudioNode::ref(this);
  v19 = this;
  if (*(uint64_t (***)(WebCore::AudioNode *__hidden))this == off_1E336AD88)
  {
    v7 = WebCore::createWrapper<WebCore::MediaElementAudioSourceNode,WebCore::MediaElementAudioSourceNode>(a2, (uint64_t *)&v19, v8);
    v9 = v19;
    v19 = 0;
    if (v9)
      WebCore::AudioNode::deref(v9);
    return v7;
  }
  result = 257;
  __break(0xC471u);
  return result;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSMediaEncryptedEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  JSC::VM *v2;
  unint64_t v3;
  JSC::VM *v5;
  uint64_t v7;
  WTF::StringImpl *v8;
  int v9;
  JSC::JSCell *v10;
  uint64_t Object;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  BOOL v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  int v26;
  int v27;
  _BOOL4 v28;
  int v29;
  unsigned int v30;
  WTF::StringImpl *v31;
  _DWORD *v32;
  WTF::StringImpl *v33;
  WebCore::JSDOMGlobalObject *v34;
  JSC::VM *v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char **v42;
  int v43;
  unint64_t v44;
  WebCore::JSEvent *v45;
  JSC::JSCell *v46;
  unint64_t Structure;
  JSC::Structure *v48;
  JSC::JSCell *v49;
  uint64_t v50;
  JSCell *v51;
  JSC::JSCell *v52;
  JSC::JSGlobalObject *v53;
  JSC::JSObject *v54;
  JSC::JSGlobalObject *v55;
  JSC::VM *v56;
  WebCore::JSDOMGlobalObject *v57;
  JSC::Structure *v58;
  JSC::VM *FunctionRealm;
  uint64_t v60;
  unsigned int v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char **v66;
  int v67;
  JSC::JSCell *v68;
  unint64_t v69;
  JSC::Structure *v70;
  JSC::JSCell *v71;
  uint64_t v72;
  unint64_t SubclassStructure;
  _DWORD *v74;
  JSC::VM *v76;
  double v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  unint64_t v80;
  BOOL v81;
  JSC::VM *v82;
  double v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  unint64_t v86;
  BOOL v87;
  JSC::VM *v88;
  double v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  _DWORD *v93;
  int v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  JSValue v97;
  WTF::StringImpl *v98;
  int hasExceptionsAfterHandlingTraps;
  BOOL v100;
  int v101;
  uint64_t v102;
  int *v103;
  int v104;
  BOOL v105;
  int v106;
  uint64_t v107;
  int *v108;
  int v109;
  BOOL v110;
  int v111;
  uint64_t v112;
  int *v113;
  int v114;
  __int16 v115;
  BOOL v116;
  WTF::StringImpl *v117;
  uint64_t v118;
  int v119;
  WTF::StringImpl *v120;
  int v121;
  unint64_t v122;
  int v123;
  __int16 v124;
  BOOL v125;
  WTF::StringImpl *v126;
  _DWORD *v127;
  JSC::VM *v128;
  WTF::StringImpl *v129;
  unint64_t v130;
  int v131;
  uint64_t v132[2];

  v5 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v97.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v5, a1, v97);
  }
  v7 = *(_QWORD *)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v120);
  v9 = v121;
  if (!v121)
  {
    if ((unint64_t)(*(int *)(a2 + 32) - 3) >= 0xFFFFFFFFFFFFFFFELL)
    {
      v128 = (JSC::VM *)*((_QWORD *)a1 + 7);
    }
    else
    {
      v10 = *(JSC::JSCell **)(a2 + 56);
      v2 = (JSC::VM *)*((_QWORD *)a1 + 7);
      v128 = v2;
      if (((unint64_t)v10 & 0xFFFFFFFFFFFFFFF7) != 2)
      {
        if (((unint64_t)v10 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v10)) == 0)
        {
          JSC::throwTypeError();
          v51 = 0;
          v18 = 1;
          v119 = 1;
LABEL_63:
          (*(&off_1E32B5830 + v18))((int)&v124, (WebCore::MediaEncryptedEventInit *)&v115);
          v9 = v121;
          goto LABEL_64;
        }
        v12 = Object;
        v124 = 0;
        v125 = 0;
        v126 = 0;
        v127 = 0;
        WTF::AtomStringImpl::addLiteral();
        v13 = (WTF::StringImpl *)v130;
        v3 = JSC::JSObject::get((JSC::Structure *)v12, a1, v130);
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v14);
          else
            *(_DWORD *)v13 -= 2;
        }
        if (*((_DWORD *)v2 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v2) & 1) != 0)
        {
LABEL_155:
          v18 = 1;
          v119 = 1;
          WebCore::MediaEncryptedEventInit::~MediaEncryptedEventInit((WebCore::MediaEncryptedEventInit *)&v124, v98);
          v51 = 0;
          goto LABEL_63;
        }
        if (v3 == 10)
        {
          v15 = 0;
          while (1)
          {
            LOBYTE(v124) = v15;
            WTF::AtomStringImpl::addLiteral();
            v78 = (WTF::StringImpl *)v130;
            v80 = JSC::JSObject::get((JSC::Structure *)v12, a1, v130);
            if (v78)
            {
              if (*(_DWORD *)v78 == 2)
                WTF::StringImpl::destroy(v78, v79);
              else
                *(_DWORD *)v78 -= 2;
            }
            if (*((_DWORD *)v2 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v2) & 1) != 0)
              goto LABEL_155;
            if (v80 == 10)
            {
              v81 = 0;
              goto LABEL_83;
            }
            v82 = (JSC::VM *)*((_QWORD *)a1 + 7);
            if (v80 >= 0xFFFE000000000000)
              break;
            *(_QWORD *)&v83 = v80 - 0x2000000000000;
            if (v80 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
            {
              if ((v80 & 0xFFFE000000000002) != 0)
              {
                v81 = v80 == 7;
                goto LABEL_82;
              }
              v106 = *(unsigned __int8 *)(v80 + 5);
              if (v106 == 3)
              {
                v109 = *(_DWORD *)(v80 + 8);
                goto LABEL_199;
              }
              if (v106 == 2)
              {
                v107 = *(_QWORD *)(v80 + 8);
                if ((v107 & 1) != 0)
                  v108 = (int *)(v80 + 16);
                else
                  v108 = (int *)(v107 + 4);
                v109 = *v108;
LABEL_199:
                v105 = v109 == 0;
              }
              else
              {
                if ((*(_BYTE *)(16 * (*(_DWORD *)v80 & 0xFFFFFFFE) + 0xA) & 1) == 0)
                {
LABEL_204:
                  v81 = 1;
                  goto LABEL_82;
                }
                v105 = *(_QWORD *)(16 * (*(_DWORD *)v80 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
              }
LABEL_200:
              v81 = !v105;
              goto LABEL_82;
            }
            if (v83 > 0.0)
              goto LABEL_204;
            v81 = v83 < 0.0;
LABEL_82:
            if (*((_DWORD *)v82 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v82) & 1) != 0)
              goto LABEL_155;
LABEL_83:
            HIBYTE(v124) = v81;
            WTF::AtomStringImpl::addLiteral();
            v84 = (WTF::StringImpl *)v130;
            v86 = JSC::JSObject::get((JSC::Structure *)v12, a1, v130);
            if (v84)
            {
              if (*(_DWORD *)v84 == 2)
                WTF::StringImpl::destroy(v84, v85);
              else
                *(_DWORD *)v84 -= 2;
            }
            if (*((_DWORD *)v2 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v2) & 1) != 0)
              goto LABEL_155;
            if (v86 == 10)
            {
              v87 = 0;
              goto LABEL_94;
            }
            v88 = (JSC::VM *)*((_QWORD *)a1 + 7);
            if (v86 >= 0xFFFE000000000000)
            {
              v110 = (_DWORD)v86 == 0;
              goto LABEL_207;
            }
            *(_QWORD *)&v89 = v86 - 0x2000000000000;
            if (v86 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
            {
              if ((v86 & 0xFFFE000000000002) != 0)
              {
                v87 = v86 == 7;
                goto LABEL_93;
              }
              v111 = *(unsigned __int8 *)(v86 + 5);
              if (v111 == 3)
              {
                v114 = *(_DWORD *)(v86 + 8);
              }
              else
              {
                if (v111 != 2)
                {
                  if ((*(_BYTE *)(16 * (*(_DWORD *)v86 & 0xFFFFFFFE) + 0xA) & 1) == 0)
                  {
LABEL_211:
                    v87 = 1;
                    goto LABEL_93;
                  }
                  v110 = *(_QWORD *)(16 * (*(_DWORD *)v86 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
                  goto LABEL_207;
                }
                v112 = *(_QWORD *)(v86 + 8);
                if ((v112 & 1) != 0)
                  v113 = (int *)(v86 + 16);
                else
                  v113 = (int *)(v112 + 4);
                v114 = *v113;
              }
              v110 = v114 == 0;
LABEL_207:
              v87 = !v110;
              goto LABEL_93;
            }
            if (v89 > 0.0)
              goto LABEL_211;
            v87 = v89 < 0.0;
LABEL_93:
            if (*((_DWORD *)v88 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v88) & 1) != 0)
              goto LABEL_155;
LABEL_94:
            v125 = v87;
            WTF::AtomStringImpl::addLiteral();
            v90 = (WTF::StringImpl *)v130;
            v92 = JSC::JSObject::get((JSC::Structure *)v12, a1, v130);
            if (v90)
            {
              if (*(_DWORD *)v90 == 2)
                WTF::StringImpl::destroy(v90, v91);
              else
                *(_DWORD *)v90 -= 2;
            }
            if (*((_DWORD *)v2 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v2) & 1) != 0)
              goto LABEL_155;
            if (v92 == 10 || (v92 & 0xFFFFFFFFFFFFFFF7) == 2)
            {
              v123 = 0;
              v122 = 0;
              v127 = 0;
              goto LABEL_105;
            }
            v132[0] = *((_QWORD *)a1 + 7);
            v93 = (_DWORD *)JSC::JSArrayBuffer::toWrapped(v132[0], v92);
            v3 = (unint64_t)v93;
            if (v93)
            {
              *v93 += 2;
              v130 = 0;
              WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((uint64_t *)&v130);
              v131 = 0;
              v130 = 0;
              v132[0] = 0;
              v122 = v3;
              WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(v132);
              v94 = 0;
              v95 = 0;
            }
            else
            {
              JSC::throwTypeError();
              v94 = 1;
              v131 = 1;
              v95 = 1;
            }
            v123 = v94;
            ((void (*)(uint64_t *, unint64_t *))off_1E32B5B58[v95])(v132, &v130);
            if (v3)
            {
              v122 = 0;
              v127 = (_DWORD *)v3;
LABEL_105:
              WTF::AtomStringImpl::addLiteral();
              v3 = v130;
              v12 = JSC::JSObject::get((JSC::Structure *)v12, a1, v130);
              if (v3)
              {
                if (*(_DWORD *)v3 == 2)
                  WTF::StringImpl::destroy((WTF::StringImpl *)v3, v8);
                else
                  *(_DWORD *)v3 -= 2;
              }
              if (*((_DWORD *)v2 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v2))
              {
                v18 = 1;
                v119 = 1;
LABEL_22:
                v20 = v123;
                if (v123 == -1)
                  goto LABEL_24;
                goto LABEL_23;
              }
              if (v12 == 10)
              {
LABEL_15:
                v16 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
                if (*MEMORY[0x1E0CBF738])
                  *(_DWORD *)v16 += 2;
              }
              else
              {
                v132[0] = v12;
                v2 = (JSC::VM *)*((_QWORD *)a1 + 7);
                if ((v12 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v12 + 5) != 2)
                {
                  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v132, a1);
                }
                else
                {
                  v96 = *(WTF::StringImpl **)(v12 + 8);
                  if ((v96 & 1) != 0)
                  {
                    v96 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, a1);
                    if (v96)
LABEL_114:
                      *(_DWORD *)v96 += 2;
                  }
                  else if (v96)
                  {
                    goto LABEL_114;
                  }
                  v129 = v96;
                }
                if (!*((_DWORD *)v2 + 20))
                {
                  v16 = v129;
                  goto LABEL_17;
                }
                hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v2);
                v16 = v129;
                if (hasExceptionsAfterHandlingTraps)
                {
                  v131 = 1;
                  v129 = 0;
                  if (v16)
                  {
                    if (*(_DWORD *)v16 == 2)
                      WTF::StringImpl::destroy(v16, v8);
                    else
                      *(_DWORD *)v16 -= 2;
                  }
                  v18 = 1;
                  goto LABEL_21;
                }
              }
LABEL_17:
              v131 = 0;
              v130 = 0;
              v17 = v126;
              v126 = v16;
              if (v17)
              {
                if (*(_DWORD *)v17 == 2)
                  WTF::StringImpl::destroy(v17, v8);
                else
                  *(_DWORD *)v17 -= 2;
              }
              v18 = 0;
              v115 = v124;
              v116 = v125;
              v19 = v126;
              v12 = (uint64_t)v127;
              v126 = 0;
              v127 = 0;
              v117 = v19;
              v118 = v12;
LABEL_21:
              v119 = v18;
              ((void (*)(uint64_t *, unint64_t *))off_1E32B54C8[v18])(v132, &v130);
              goto LABEL_22;
            }
            v18 = 1;
            v119 = 1;
            v20 = 1;
LABEL_23:
            ((void (*)(unint64_t *, unint64_t *))off_1E32B5820[v20])(&v130, &v122);
LABEL_24:
            WebCore::MediaEncryptedEventInit::~MediaEncryptedEventInit((WebCore::MediaEncryptedEventInit *)&v124, v8);
            if (v18)
            {
              v51 = 0;
              v18 = 1;
              goto LABEL_63;
            }
            if (!v121)
            {
              v21 = v120;
              v120 = 0;
              v124 = v115;
              v125 = v116;
              v22 = v117;
              v117 = 0;
              v118 = 0;
              v126 = v22;
              v127 = (_DWORD *)v12;
              v23 = bmalloc::api::isoAllocate();
              WTF::MonotonicTime::now((WTF::MonotonicTime *)v23);
              v26 = v124;
              v27 = HIBYTE(v124);
              v28 = v125;
              *(_QWORD *)(v23 + 8) = 0;
              if (v26)
                v29 = 360450;
              else
                v29 = 360448;
              v30 = v29 | (v21 != 0) | (4 * v27) | (8 * v28) | *(_DWORD *)(v23 + 20) & 0xFFC00000;
              *(_DWORD *)(v23 + 16) = 1;
              *(_DWORD *)(v23 + 20) = v30;
              if (v21)
              {
                *(_DWORD *)v21 += 2;
                v30 = *(_DWORD *)(v23 + 20);
              }
              *(_QWORD *)(v23 + 24) = v21;
              *(_QWORD *)(v23 + 32) = 0;
              *(_QWORD *)(v23 + 40) = 0;
              *(_QWORD *)(v23 + 48) = 0;
              *(_QWORD *)(v23 + 56) = v25;
              *(_QWORD *)(v23 + 64) = 0;
              *(_DWORD *)(v23 + 20) = v30 | 0x4000;
              *(_QWORD *)v23 = off_1E3203778;
              v31 = v126;
              if (v126)
                *(_DWORD *)v126 += 2;
              *(_QWORD *)(v23 + 72) = v31;
              v32 = v127;
              if (v127)
                *v127 += 2;
              *(_QWORD *)(v23 + 80) = v32;
              v130 = v23;
              WebCore::MediaEncryptedEventInit::~MediaEncryptedEventInit((WebCore::MediaEncryptedEventInit *)&v124, v24);
              if (v21)
              {
                if (*(_DWORD *)v21 == 2)
                  WTF::StringImpl::destroy(v21, v33);
                else
                  *(_DWORD *)v21 -= 2;
              }
              if (*(void (***)(WebCore::MediaEncryptedEvent *__hidden))v23 != off_1E3203778)
              {
                __break(0xC471u);
                JUMPOUT(0x194D0B120);
              }
              v35 = *(JSC::VM **)(v7 + 40);
              v36 = *((_QWORD *)v35 + 412);
              if (!v36)
                goto LABEL_45;
              v37 = *(_DWORD *)(v36 - 8);
              v38 = ((unint64_t)&WebCore::JSMediaEncryptedEvent::s_info
                   + ~((_QWORD)&WebCore::JSMediaEncryptedEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaEncryptedEvent::s_info
                                                                                 + ~((_QWORD)&WebCore::JSMediaEncryptedEvent::s_info << 32)) >> 22);
              v39 = 9 * ((v38 + ~(v38 << 13)) ^ ((v38 + ~(v38 << 13)) >> 8));
              v40 = (v39 ^ (v39 >> 15)) + ~((v39 ^ (v39 >> 15)) << 27);
              v41 = v37 & ((v40 >> 31) ^ v40);
              v42 = *(char ***)(v36 + 16 * v41);
              if (v42 == &WebCore::JSMediaEncryptedEvent::s_info)
              {
LABEL_44:
                v44 = *(_QWORD *)(v36 + 16 * v41 + 8);
                if (!v44)
                  goto LABEL_45;
              }
              else
              {
                v43 = 1;
                while (v42)
                {
                  v41 = ((_DWORD)v41 + v43) & v37;
                  v42 = *(char ***)(v36 + 16 * v41);
                  ++v43;
                  if (v42 == &WebCore::JSMediaEncryptedEvent::s_info)
                    goto LABEL_44;
                }
LABEL_45:
                v45 = (WebCore::JSEvent *)*((_QWORD *)v35 + 7);
                v46 = (JSC::JSCell *)WebCore::JSEvent::prototype(v45, v35, v34);
                Structure = WebCore::JSMediaEncryptedEventPrototype::createStructure((uint64_t *)v45, (uint64_t)v35, v46);
                *(_DWORD *)(Structure + 16) |= 0x80000u;
                v49 = (JSC::JSCell *)WebCore::JSMediaEncryptedEventPrototype::create(v45, v35, Structure, v48);
                v50 = WebCore::JSMediaEncryptedEvent::createStructure((uint64_t *)v45, (uint64_t)v35, v49);
                v44 = WebCore::cacheDOMStructure((JSCell *)v35, v50, (uint64_t)&WebCore::JSMediaEncryptedEvent::s_info);
              }
              v51 = (JSCell *)WebCore::JSMediaEncryptedEvent::create(v44, v35, (uint64_t *)&v130);
              WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)v35 + 415), v23, (uint64_t)v51);
              v52 = *(JSC::JSCell **)(a2 + 40);
              if (((unint64_t)v52 & 0xFFFE000000000002) != 0
                || (v53 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v52)) == 0
                || (v55 = v53, v53 == *(JSC::JSGlobalObject **)(a2 + 24))
                || (v56 = (JSC::VM *)*((_QWORD *)a1 + 7),
                    FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v53, v54),
                    *((_DWORD *)v56 + 20))
                && (JSC::VM::hasExceptionsAfterHandlingTraps(v56) & 1) != 0)
              {
LABEL_59:
                if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
                  v51 = 0;
                v74 = (_DWORD *)v130;
                v130 = 0;
                if (v74)
                {
                  if (v74[4] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v74 + 8))(v74);
                  else
                    --v74[4];
                }
                goto LABEL_63;
              }
              v60 = *((_QWORD *)FunctionRealm + 412);
              if (v60)
              {
                v61 = *(_DWORD *)(v60 - 8);
                v62 = ((unint64_t)&WebCore::JSMediaEncryptedEvent::s_info
                     + ~((_QWORD)&WebCore::JSMediaEncryptedEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaEncryptedEvent::s_info
                                                                                   + ~((_QWORD)&WebCore::JSMediaEncryptedEvent::s_info << 32)) >> 22);
                v63 = 9 * ((v62 + ~(v62 << 13)) ^ ((v62 + ~(v62 << 13)) >> 8));
                v64 = (v63 ^ (v63 >> 15)) + ~((v63 ^ (v63 >> 15)) << 27);
                v65 = v61 & ((v64 >> 31) ^ v64);
                v66 = *(char ***)(v60 + 16 * v65);
                if (v66 != &WebCore::JSMediaEncryptedEvent::s_info)
                {
                  v67 = 1;
                  while (v66)
                  {
                    v65 = ((_DWORD)v65 + v67) & v61;
                    v66 = *(char ***)(v60 + 16 * v65);
                    ++v67;
                    if (v66 == &WebCore::JSMediaEncryptedEvent::s_info)
                      goto LABEL_55;
                  }
                  goto LABEL_56;
                }
LABEL_55:
                v57 = *(WebCore::JSDOMGlobalObject **)(v60 + 16 * v65 + 8);
                if (!v57)
                  goto LABEL_56;
              }
              else
              {
LABEL_56:
                v68 = (JSC::JSCell *)WebCore::JSEvent::prototype(v56, FunctionRealm, v57);
                v69 = WebCore::JSMediaEncryptedEventPrototype::createStructure((uint64_t *)v56, (uint64_t)FunctionRealm, v68);
                *(_DWORD *)(v69 + 16) |= 0x80000u;
                v71 = (JSC::JSCell *)WebCore::JSMediaEncryptedEventPrototype::create(v56, FunctionRealm, v69, v70);
                v72 = WebCore::JSMediaEncryptedEvent::createStructure((uint64_t *)v56, (uint64_t)FunctionRealm, v71);
                v57 = (WebCore::JSDOMGlobalObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v72, (uint64_t)&WebCore::JSMediaEncryptedEvent::s_info);
              }
              SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v55, v57, v58);
              if (!*((_DWORD *)v56 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v56) & 1) == 0)
                JSC::JSObject::setStructure(v51, v56, SubclassStructure);
              goto LABEL_59;
            }
            v76 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_164:
            v100 = (_DWORD)v3 == 0;
LABEL_193:
            v15 = !v100;
LABEL_71:
            if (*((_DWORD *)v76 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v76) & 1) != 0)
              goto LABEL_155;
          }
          v105 = (_DWORD)v80 == 0;
          goto LABEL_200;
        }
        v76 = (JSC::VM *)*((_QWORD *)a1 + 7);
        if (v3 >= 0xFFFE000000000000)
          goto LABEL_164;
        *(_QWORD *)&v77 = v3 - 0x2000000000000;
        if (v3 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          if (v77 <= 0.0)
          {
            v15 = v77 < 0.0;
            goto LABEL_71;
          }
        }
        else
        {
          if ((v3 & 0xFFFE000000000002) != 0)
          {
            v15 = v3 == 7;
            goto LABEL_71;
          }
          v101 = *(unsigned __int8 *)(v3 + 5);
          if (v101 == 3)
          {
            v104 = *(_DWORD *)(v3 + 8);
LABEL_192:
            v100 = v104 == 0;
            goto LABEL_193;
          }
          if (v101 == 2)
          {
            v102 = *(_QWORD *)(v3 + 8);
            if ((v102 & 1) != 0)
              v103 = (int *)(v3 + 16);
            else
              v103 = (int *)(v102 + 4);
            v104 = *v103;
            goto LABEL_192;
          }
          if ((*(_BYTE *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0xA) & 1) != 0)
          {
            v100 = *(_QWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
            goto LABEL_193;
          }
        }
        v15 = 1;
        goto LABEL_71;
      }
    }
    v126 = 0;
    v127 = 0;
    v124 = 0;
    v125 = 0;
    v123 = 0;
    v122 = 0;
    goto LABEL_15;
  }
  v51 = 0;
LABEL_64:
  if (v9 != -1)
    ((void (*)(__int16 *, WTF::StringImpl **))off_1E32B5840[v9])(&v115, &v120);
  return v51;
}

uint64_t WebCore::JSMediaEncryptedEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSMediaEncryptedEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSMediaEncryptedEventPrototype::create(WebCore::JSMediaEncryptedEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSMediaEncryptedEvent::s_info, &WebCore::JSMediaEncryptedEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSMediaEncryptedEvent>,(WebCore::DOMConstructorID)591>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4728);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSMediaEncryptedEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSMediaEncryptedEvent::s_info
         + ~((_QWORD)&WebCore::JSMediaEncryptedEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaEncryptedEvent::s_info
                                                                       + ~((_QWORD)&WebCore::JSMediaEncryptedEvent::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSMediaEncryptedEvent::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSMediaEncryptedEvent::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEvent::prototype((WebCore::JSEvent *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSMediaEncryptedEventPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSMediaEncryptedEventPrototype::create((WebCore::JSMediaEncryptedEventPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSMediaEncryptedEvent::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSMediaEncryptedEvent::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4728) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsMediaEncryptedEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSMediaEncryptedEventPrototype::s_info != (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSMediaEncryptedEvent>,(WebCore::DOMConstructorID)591>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsMediaEncryptedEvent_initDataType(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 72);
  if (!v4)
    return *v3;
  v5 = *(_DWORD *)v4;
  v6 = *(_DWORD *)(v4 + 4);
  *(_DWORD *)v4 += 2;
  if (v6)
  {
    if (v6 != 1)
    {
LABEL_4:
      v7 = *(_QWORD *)(v2 + 64760);
      if (!v7 || v4 != *(_QWORD *)(v7 + 8))
      {
        v7 = JSC::jsStringWithCacheSlowCase();
        v5 = *(_DWORD *)v4 - 2;
      }
      goto LABEL_7;
    }
    v9 = *(unsigned __int8 **)(v4 + 8);
    if ((*(_BYTE *)(v4 + 16) & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v11 = *(unsigned __int16 *)v9;
      if (v11 > 0xFF)
        goto LABEL_4;
      v10 = v11;
    }
    v7 = *(_QWORD *)(v2 + 8 * v10 + 42216);
  }
  else
  {
    v7 = *v3;
  }
LABEL_7:
  if (v5)
    *(_DWORD *)v4 = v5;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, a2);
  return v7;
}

uint64_t WebCore::jsMediaEncryptedEvent_initData(WebCore *a1, uint64_t a2, uint64_t a3, JSC::ArrayBuffer *a4)
{
  WebCore::JSDOMGlobalObject *v4;

  v4 = *(WebCore::JSDOMGlobalObject **)(*(_QWORD *)(a2 + 24) + 80);
  if (v4)
    return WebCore::toJS(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v4, a4);
  else
    return 2;
}

uint64_t WebCore::JSMediaEncryptedEvent::subspaceForImpl(WebCore::JSMediaEncryptedEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 4800);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 4800))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 4800);
    *(_QWORD *)(v8 + 4800) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 4800);
  *(_QWORD *)(v3 + 4800) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSMediaError::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;
  WTF::StringImpl *v3;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (WTF::StringImpl *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          WTF::StringImpl::destroy(v3, a2);
        else
          *(_DWORD *)v3 -= 2;
      }
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSMediaError::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSMediaErrorPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSMediaErrorPrototype::create(WebCore::JSMediaErrorPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<8u>(this, (uint64_t)&WebCore::JSMediaError::s_info, (uint64_t)&WebCore::JSMediaErrorPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaError>,(WebCore::DOMConstructorID)592>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4736);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaError>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSMediaError::s_info + ~((_QWORD)&WebCore::JSMediaError::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaError::s_info + ~((_QWORD)&WebCore::JSMediaError::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSMediaError::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSMediaError::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSMediaErrorPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSMediaErrorPrototype::create((WebCore::JSMediaErrorPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSMediaError::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSMediaError::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  JSC::reifyStaticProperties<5u>((JSC::VM *)a1, (uint64_t)&WebCore::JSMediaError::s_info, &WebCore::JSMediaErrorConstructorTableValues, (JSC::JSObject *)v2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4736) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsMediaErrorConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSMediaErrorPrototype::s_info != (char **)(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaError>,(WebCore::DOMConstructorID)592>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsMediaError_code(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(*(_QWORD *)(a2 + 24) + 4) | 0xFFFE000000000000;
}

uint64_t WebCore::jsMediaError_message(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::JSMediaErrorOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSMediaErrorOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WTF::StringImpl *v24;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (WTF::StringImpl *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, a2);
      else
        *(_DWORD *)v24 -= 2;
    }
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::wrap<WebCore::MediaError>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSMediaError::s_info + ~((_QWORD)&WebCore::JSMediaError::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaError::s_info + ~((_QWORD)&WebCore::JSMediaError::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSMediaError::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSMediaError::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSMediaErrorPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSMediaErrorPrototype::create((WebCore::JSMediaErrorPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSMediaError::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSMediaError::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 4808);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 4808))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 4808);
    *(_QWORD *)(v36 + 4808) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 4808);
  *(_QWORD *)(v32 + 4808) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE335F80 & 1) == 0)
  {
    qword_1EE335F78 = (uint64_t)&off_1E32B3470;
    byte_1EE335F80 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE335F78;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

uint64_t WebCore::convertEnumerationToJS<WebCore::CDMEncryptionScheme>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  {
    WebCore::convertEnumerationToString(WebCore::CDMEncryptionScheme)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::CDMEncryptionScheme)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::CDMEncryptionScheme)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CDMEncryptionScheme)::$_0::operator() const(void)::impl;
    *(_QWORD *)algn_1EE2F4758 = &WebCore::convertEnumerationToString(WebCore::CDMEncryptionScheme)::$_1::operator() const(void)::impl;
  }
  v3 = WebCore::convertEnumerationToString(WebCore::CDMEncryptionScheme)::values[a2];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::parseEnumerationFromString<WebCore::CDMEncryptionScheme>(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  const char *v3;
  int v4;
  BOOL v5;
  int v6;
  BOOL v7;
  char **v9;
  int v11;
  int v12;

  v1 = *a1;
  if (!*a1)
    goto LABEL_41;
  v2 = *(_DWORD *)(v1 + 16);
  v3 = *(const char **)(v1 + 8);
  v4 = *(_DWORD *)(v1 + 4);
  v5 = v4 != 4;
  if (v3 == "cbcs" || v4 != 4)
  {
    v7 = v3 == "cbcs" && v4 == 4;
    v6 = v4;
    if (!v7)
      goto LABEL_13;
    goto LABEL_34;
  }
  if ((v2 & 4) == 0)
  {
    if (*(_WORD *)v3 != 99)
      goto LABEL_8;
    if (*(_DWORD *)(v3 + 2) != 6488162 || *((_DWORD *)v3 + 1) != 7536739)
      goto LABEL_8;
LABEL_34:
    v9 = &WebCore::parseEnumerationFromString<WebCore::CDMEncryptionScheme>(WTF::String const&)::mappings;
    goto LABEL_35;
  }
  if (*v3 == 99 && *(_WORD *)(v3 + 1) == 25442 && *((_WORD *)v3 + 1) == 29539)
    goto LABEL_34;
LABEL_8:
  v6 = 4;
LABEL_13:
  if (v3 == "cenc")
    v5 = 1;
  if (v5)
  {
    if (v4 != 4 || v3 != "cenc")
      goto LABEL_41;
  }
  else if (v6)
  {
    if ((v2 & 4) != 0)
    {
      if (*v3 != 99 || *(_WORD *)(v3 + 1) != 28261 || *((_WORD *)v3 + 1) != 25454)
      {
LABEL_41:
        v12 = 0;
        v11 = 0;
        return v11 | (v12 << 8);
      }
    }
    else
    {
      if (*(_WORD *)v3 != 99)
        goto LABEL_41;
      if (*((_DWORD *)v3 + 1) != 6488174 || *(_DWORD *)(v3 + 2) != 7209061)
        goto LABEL_41;
    }
  }
  v9 = &off_1E32AFAB8;
LABEL_35:
  v11 = *((unsigned __int8 *)v9 + 16);
  v12 = 1;
  return v11 | (v12 << 8);
}

uint64_t WebCore::parseEnumeration<WebCore::CDMEncryptionScheme>(JSC::JSGlobalObject *a1, unint64_t this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v6;
  unint64_t v7;

  v7 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v2 = *(WTF::StringImpl **)(this + 8);
    if ((v2 & 1) != 0)
    {
      v2 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
      if (!v2)
        goto LABEL_6;
    }
    else if (!v2)
    {
LABEL_6:
      v6 = v2;
      goto LABEL_7;
    }
    *(_DWORD *)v2 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v7, a1);
  v2 = v6;
LABEL_7:
  v4 = WebCore::parseEnumerationFromString<WebCore::CDMEncryptionScheme>((uint64_t *)&v6);
  v6 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v3);
    else
      *(_DWORD *)v2 -= 2;
  }
  return v4;
}

const char *WebCore::expectedEnumerationValues<WebCore::CDMEncryptionScheme>()
{
  return "\"cenc\", \"cbcs\"";
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSMediaKeyMessageEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  JSC::JSCell *v7;
  uint64_t Object;
  JSC::Structure *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  JSC::VM *v12;
  double v13;
  BOOL v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  JSC::VM *v18;
  double v19;
  BOOL v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  BOOL v24;
  JSC::VM *v25;
  double v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  JSCell *v30;
  _DWORD *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  JSC::VM *v38;
  uint64_t v39;
  const char *v40;
  int v41;
  unint64_t v42;
  uint16x8_t v43;
  int v44;
  char **v45;
  WTF::StringImpl *v46;
  int v47;
  _BOOL4 v48;
  _BOOL4 v49;
  char v50;
  WTF::DeferrableRefCountedBase *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WebCore::JSDOMGlobalObject *v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  JSC::VM *v58;
  uint64_t v59;
  unsigned int v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char **v65;
  int v66;
  unint64_t v67;
  WebCore::JSEvent *v68;
  JSC::JSCell *v69;
  unint64_t Structure;
  JSC::Structure *v71;
  JSC::JSCell *v72;
  uint64_t v73;
  JSC::JSCell *v74;
  JSC::JSGlobalObject *v75;
  JSC::JSObject *v76;
  JSC::JSGlobalObject *v77;
  JSC::VM *v78;
  WebCore::JSDOMGlobalObject *v79;
  JSC::Structure *v80;
  JSC::VM *FunctionRealm;
  uint64_t v82;
  unsigned int v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char **v88;
  int v89;
  JSC::JSCell *v90;
  unint64_t v91;
  JSC::Structure *v92;
  JSC::JSCell *v93;
  uint64_t v94;
  unint64_t SubclassStructure;
  _DWORD *v96;
  BOOL v97;
  uint16x8_t v98;
  uint16x8_t v99;
  JSValue v100;
  uint16x8_t v101;
  uint16x8_t v102;
  int v103;
  uint64_t v104;
  uint16x8_t v105;
  uint16x8_t v106;
  uint16x8_t v107;
  uint16x8_t v108;
  BOOL v109;
  int v110;
  uint64_t v111;
  int *v112;
  int v113;
  BOOL v114;
  int v115;
  uint64_t v116;
  int *v117;
  int v118;
  BOOL v119;
  int v120;
  uint64_t v121;
  int *v122;
  int v123;
  BOOL v125;
  JSC::VM *v126;
  BOOL v127;
  uint64_t v128;
  uint64_t v129;
  WTF::StringImpl *v130;
  WTF::DeferrableRefCountedBase *v131;
  int v132;
  WTF::StringImpl *v133;
  int v134;
  _DWORD *v135;
  int v136;
  JSC::VM *v137[2];
  uint64_t v138;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((unint64_t)(*(int *)(a2 + 32) - 1) <= 1)
  {
    v100.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, a1, v100);
  }
  v4 = a2;
  v5 = *(_QWORD *)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v133);
  v6 = v134;
  if (!v134)
  {
    v129 = v5;
    v7 = *(JSC::JSCell **)(v4 + 56);
    v137[0] = *((JSC::VM **)a1 + 7);
    if (((unint64_t)v7 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
LABEL_44:
      WebCore::throwRequiredMemberTypeError((int)a1, (int)v137, "message", 8, "MediaKeyMessageEventInit", 25, "ArrayBuffer", 12);
      goto LABEL_45;
    }
    if (((unint64_t)v7 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v7)) == 0)
    {
      JSC::throwTypeError();
      goto LABEL_45;
    }
    v9 = (JSC::Structure *)Object;
    WTF::AtomStringImpl::addLiteral();
    v11 = JSC::JSObject::get(v9, a1, (unint64_t)v130);
    if (v130)
    {
      if (*(_DWORD *)v130 == 2)
        WTF::StringImpl::destroy(v130, v10);
      else
        *(_DWORD *)v130 -= 2;
    }
    if (*((_DWORD *)v137[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v137[0]) & 1) != 0)
    {
LABEL_45:
      v30 = 0;
      LODWORD(v4) = 1;
      v132 = 1;
LABEL_46:
      ((void (*)(_DWORD **, WTF::StringImpl **))off_1E32B5AD0[v4])(&v135, &v130);
      v6 = v134;
      goto LABEL_47;
    }
    if (v11 != 10)
    {
      v12 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v11 >= 0xFFFE000000000000)
        goto LABEL_206;
      *(_QWORD *)&v13 = v11 - 0x2000000000000;
      if (v11 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v14 = v13 > 0.0 || v13 < 0.0;
        goto LABEL_16;
      }
      if ((v11 & 0xFFFE000000000002) != 0)
      {
        v14 = v11 == 7;
        goto LABEL_16;
      }
      v110 = *(unsigned __int8 *)(v11 + 5);
      if (v110 == 3)
      {
        v113 = *(_DWORD *)(v11 + 8);
      }
      else
      {
        if (v110 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xA) & 1) != 0)
          {
            v109 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
            goto LABEL_236;
          }
          v14 = 1;
          goto LABEL_16;
        }
        v111 = *(_QWORD *)(v11 + 8);
        if ((v111 & 1) != 0)
          v112 = (int *)(v11 + 16);
        else
          v112 = (int *)(v111 + 4);
        v113 = *v112;
      }
      v109 = v113 == 0;
      goto LABEL_236;
    }
    v127 = 0;
    while (1)
    {
      WTF::AtomStringImpl::addLiteral();
      v15 = v130;
      v17 = JSC::JSObject::get(v9, a1, (unint64_t)v130);
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v16);
        else
          *(_DWORD *)v15 -= 2;
      }
      if (*((_DWORD *)v137[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v137[0]) & 1) != 0)
        goto LABEL_45;
      if (v17 == 10)
      {
        v125 = 0;
        goto LABEL_28;
      }
      v18 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v17 >= 0xFFFE000000000000)
        break;
      *(_QWORD *)&v19 = v17 - 0x2000000000000;
      if (v17 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        if ((v17 & 0xFFFE000000000002) != 0)
        {
          v20 = v17 == 7;
          goto LABEL_27;
        }
        v115 = *(unsigned __int8 *)(v17 + 5);
        if (v115 == 3)
        {
          v118 = *(_DWORD *)(v17 + 8);
          goto LABEL_242;
        }
        if (v115 == 2)
        {
          v116 = *(_QWORD *)(v17 + 8);
          if ((v116 & 1) != 0)
            v117 = (int *)(v17 + 16);
          else
            v117 = (int *)(v116 + 4);
          v118 = *v117;
LABEL_242:
          v114 = v118 == 0;
        }
        else
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
LABEL_244:
            v20 = 1;
            goto LABEL_27;
          }
          v114 = *(_QWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
        }
LABEL_251:
        v20 = !v114;
        goto LABEL_27;
      }
      if (v19 > 0.0)
        goto LABEL_244;
      v20 = v19 < 0.0;
LABEL_27:
      v125 = v20;
      if (*((_DWORD *)v18 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v18) & 1) != 0)
        goto LABEL_45;
LABEL_28:
      WTF::AtomStringImpl::addLiteral();
      v21 = v130;
      v23 = JSC::JSObject::get(v9, a1, (unint64_t)v130);
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v22);
        else
          *(_DWORD *)v21 -= 2;
      }
      if (*((_DWORD *)v137[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v137[0]) & 1) != 0)
        goto LABEL_45;
      if (v23 == 10)
      {
        v24 = 0;
        goto LABEL_39;
      }
      v25 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v23 >= 0xFFFE000000000000)
      {
        v119 = (_DWORD)v23 == 0;
        goto LABEL_255;
      }
      *(_QWORD *)&v26 = v23 - 0x2000000000000;
      if (v23 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        if ((v23 & 0xFFFE000000000002) != 0)
        {
          v24 = v23 == 7;
          goto LABEL_38;
        }
        v120 = *(unsigned __int8 *)(v23 + 5);
        if (v120 == 3)
        {
          v123 = *(_DWORD *)(v23 + 8);
        }
        else
        {
          if (v120 != 2)
          {
            if ((*(_BYTE *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0xA) & 1) == 0)
            {
LABEL_248:
              v24 = 1;
              goto LABEL_38;
            }
            v119 = *(_QWORD *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
            goto LABEL_255;
          }
          v121 = *(_QWORD *)(v23 + 8);
          if ((v121 & 1) != 0)
            v122 = (int *)(v23 + 16);
          else
            v122 = (int *)(v121 + 4);
          v123 = *v122;
        }
        v119 = v123 == 0;
LABEL_255:
        v24 = !v119;
        goto LABEL_38;
      }
      if (v26 > 0.0)
        goto LABEL_248;
      v24 = v26 < 0.0;
LABEL_38:
      if (*((_DWORD *)v25 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v25) & 1) != 0)
        goto LABEL_45;
LABEL_39:
      WTF::AtomStringImpl::addLiteral();
      v27 = v130;
      v29 = JSC::JSObject::get(v9, a1, (unint64_t)v130);
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v28);
        else
          *(_DWORD *)v27 -= 2;
      }
      if (*((_DWORD *)v137[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v137[0]) & 1) != 0)
        goto LABEL_45;
      if (v29 == 10)
        goto LABEL_44;
      v128 = v4;
      v130 = (WTF::StringImpl *)*((_QWORD *)a1 + 7);
      v32 = (_DWORD *)JSC::JSArrayBuffer::toWrapped((uint64_t)v130, v29);
      v11 = (unint64_t)v32;
      if (!v32)
      {
        JSC::throwTypeError();
        v36 = 0;
        v4 = 1;
        v136 = 1;
        v37 = 1;
        goto LABEL_84;
      }
      *v32 += 2;
      v135 = 0;
      WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((uint64_t *)&v135);
      v136 = 0;
      v135 = 0;
      v130 = 0;
      WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((uint64_t *)&v130);
      WTF::AtomStringImpl::addLiteral();
      v33 = v130;
      v35 = JSC::JSObject::get(v9, a1, (unint64_t)v130);
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, v34);
        else
          *(_DWORD *)v33 -= 2;
      }
      if (*((_DWORD *)v137[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v137[0]) & 1) != 0)
        goto LABEL_57;
      if (v35 == 10)
      {
        WebCore::throwRequiredMemberTypeError((int)a1, (int)v137, "messageType", 12, "MediaKeyMessageEventInit", 25, "MediaKeyMessageType", 20);
LABEL_57:
        v36 = 0;
        v37 = 0;
        v4 = 1;
        goto LABEL_84;
      }
      v38 = (JSC::VM *)*((_QWORD *)a1 + 7);
      v137[1] = v38;
      v130 = (WTF::StringImpl *)v35;
      if ((v35 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v35 + 5) == 2)
      {
        v39 = *(_QWORD *)(v35 + 8);
        if ((v39 & 1) != 0)
        {
          v39 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v35, a1);
          if (v39)
LABEL_62:
            *(_DWORD *)v39 += 2;
        }
        else if (v39)
        {
          goto LABEL_62;
        }
        v138 = v39;
        if (v39)
          goto LABEL_64;
        goto LABEL_136;
      }
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v130, a1);
      v39 = v138;
      if (v138)
      {
LABEL_64:
        v40 = *(const char **)(v39 + 8);
        v41 = *(_DWORD *)(v39 + 4);
        v42 = ((unint64_t)*(unsigned int *)(v39 + 16) >> 2) & 1;
        if (v40 != "individualization-request" && v41 == 25)
        {
          if ((_DWORD)v42)
          {
            if (*v40 == 105)
            {
              v43 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v40 + 9), (int8x16_t)xmmword_1968C01C0), vceqq_s8(*(int8x16_t *)(v40 + 1), (int8x16_t)xmmword_1968C01B0));
              v43.i8[0] = vminvq_u8((uint8x16_t)v43);
              goto LABEL_69;
            }
            goto LABEL_70;
          }
          if (*(_WORD *)v40 != 105)
            goto LABEL_70;
          v98 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v40 + 2), (int16x8_t)xmmword_1968C01D0);
          v98.i16[0] = vminvq_u16(v98);
          if (!v98.i32[0])
            goto LABEL_70;
          v99 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v40 + 18), (int16x8_t)xmmword_1968C01E0);
          v99.i16[0] = vminvq_u16(v99);
          if (!v99.i32[0])
            goto LABEL_70;
          v43 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v40 + 34), (int16x8_t)xmmword_1968C01F0);
          v43.i16[0] = vminvq_u16(v43);
LABEL_69:
          if (!v43.i32[0])
          {
LABEL_70:
            v44 = 0;
            v9 = 0;
            goto LABEL_79;
          }
LABEL_77:
          v45 = &WebCore::parseEnumerationFromString<WebCore::CDMMessageType>(WTF::String const&)::mappings;
LABEL_78:
          v9 = (JSC::Structure *)*((unsigned __int8 *)v45 + 16);
          v44 = 1;
LABEL_79:
          v138 = 0;
          if (*(_DWORD *)v39 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v39, v34);
          else
            *(_DWORD *)v39 -= 2;
          goto LABEL_81;
        }
        if (v40 == "individualization-request" && v41 == 25)
          goto LABEL_77;
        v97 = v41 != 15;
        if (v40 == "license-release" || v41 != 15)
        {
          if (v40 == "license-release")
          {
            v103 = *(_DWORD *)(v39 + 4);
            if (v41 == 15)
            {
LABEL_130:
              v45 = &off_1E32AFCE8;
              goto LABEL_78;
            }
          }
          else
          {
            v103 = *(_DWORD *)(v39 + 4);
          }
        }
        else
        {
          if ((_DWORD)v42)
          {
            if (*v40 == 108
              && *(_QWORD *)(v40 + 1) == 0x722D65736E656369
              && *(_QWORD *)(v40 + 7) == 0x657361656C65722DLL)
            {
              goto LABEL_130;
            }
LABEL_156:
            v97 = 0;
          }
          else
          {
            if (*(_WORD *)v40 != 108)
              goto LABEL_156;
            v101 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v40 + 2), (int16x8_t)xmmword_1968C0200);
            v101.i16[0] = vminvq_u16(v101);
            v97 = v101.i8[0];
            if (v101.i32[0])
            {
              v102 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v40 + 14), (int16x8_t)xmmword_1968C0210);
              v102.i16[0] = vminvq_u16(v102);
              v97 = v102.i8[0];
              if (v102.i32[0])
                goto LABEL_130;
            }
          }
          v103 = 15;
        }
        if (v40 == "license-renewal" || v97)
        {
          v104 = v42 << 32;
          if (v40 == "license-renewal" && v41 == 15)
            goto LABEL_165;
        }
        else
        {
          if (!v103)
          {
LABEL_165:
            v45 = &off_1E32AFD00;
            goto LABEL_78;
          }
          if ((_DWORD)v42)
          {
            if (*v40 == 108
              && *(_QWORD *)(v40 + 1) == 0x722D65736E656369
              && *(_QWORD *)(v40 + 7) == 0x6C6177656E65722DLL)
            {
              goto LABEL_165;
            }
            v104 = 1;
          }
          else
          {
            if (*(_WORD *)v40 == 108)
            {
              v105 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v40 + 2), (int16x8_t)xmmword_1968C0200);
              v105.i16[0] = vminvq_u16(v105);
              if (v105.i32[0])
              {
                v106 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v40 + 14), (int16x8_t)xmmword_1968C0220);
                v106.i16[0] = vminvq_u16(v106);
                if (v106.i32[0])
                  goto LABEL_165;
              }
            }
            v104 = 0;
          }
        }
        if (v40 == "license-request")
          v97 = 1;
        if (v97)
        {
          if (v41 != 15 || v40 != "license-request")
            goto LABEL_70;
        }
        else if (v103)
        {
          if (v104)
          {
            if (*v40 != 108
              || *(_QWORD *)(v40 + 1) != 0x722D65736E656369
              || *(_QWORD *)(v40 + 7) != 0x747365757165722DLL)
            {
              goto LABEL_70;
            }
          }
          else
          {
            if (*(_WORD *)v40 != 108)
              goto LABEL_70;
            v107 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v40 + 2), (int16x8_t)xmmword_1968C0200);
            v107.i16[0] = vminvq_u16(v107);
            if (!v107.i32[0])
              goto LABEL_70;
            v108 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v40 + 14), (int16x8_t)xmmword_1968C01F0);
            v108.i16[0] = vminvq_u16(v108);
            if (!v108.i32[0])
              goto LABEL_70;
          }
        }
        v45 = &off_1E32AFD18;
        goto LABEL_78;
      }
LABEL_136:
      v9 = 0;
      v44 = 0;
LABEL_81:
      if (*((_DWORD *)v38 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v38) & 1) != 0)
        goto LABEL_57;
      if (!v44)
      {
        JSC::throwTypeError();
        goto LABEL_57;
      }
      v4 = 0;
      v37 = 0;
      LOBYTE(v130) = v127;
      BYTE1(v130) = v125;
      BYTE2(v130) = v24;
      BYTE3(v130) = (_BYTE)v9;
      v36 = 1;
      v131 = (WTF::DeferrableRefCountedBase *)v11;
      v11 = 0;
LABEL_84:
      v132 = v4;
      ((void (*)(uint64_t *, _DWORD **))off_1E32B5B58[v37])(&v138, &v135);
      if (v11)
        WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref((WTF::DeferrableRefCountedBase *)v11);
      if (!v36)
      {
        v30 = 0;
        LODWORD(v4) = 1;
        goto LABEL_46;
      }
      v126 = v3;
      if (!v134)
      {
        v46 = v133;
        v133 = 0;
        v47 = v130;
        v48 = BYTE1(v130) != 0;
        v49 = BYTE2(v130) != 0;
        v50 = BYTE3(v130);
        v51 = v131;
        v131 = 0;
        v52 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v52);
        *(_QWORD *)(v52 + 8) = 0;
        if (v47)
          v56 = 393218;
        else
          v56 = 393216;
        v57 = v56 | (v46 != 0) | (4 * v48) | (8 * v49) | *(_DWORD *)(v52 + 20) & 0xFFC00000;
        *(_DWORD *)(v52 + 16) = 1;
        *(_DWORD *)(v52 + 20) = v57;
        if (v46)
        {
          *(_DWORD *)v46 += 2;
          v57 = *(_DWORD *)(v52 + 20);
        }
        *(_QWORD *)(v52 + 24) = v46;
        *(_QWORD *)(v52 + 32) = 0;
        *(_QWORD *)(v52 + 40) = 0;
        *(_QWORD *)(v52 + 48) = 0;
        *(_QWORD *)(v52 + 56) = v55;
        *(_QWORD *)(v52 + 64) = 0;
        *(_DWORD *)(v52 + 20) = v57 | 0x4000;
        *(_QWORD *)v52 = off_1E3203850;
        *(_BYTE *)(v52 + 72) = v50;
        if (v51)
        {
          *(_DWORD *)v51 += 2;
          *(_QWORD *)(v52 + 80) = v51;
          v135 = (_DWORD *)v52;
          WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v51);
          if (v46)
          {
LABEL_95:
            if (*(_DWORD *)v46 == 2)
              WTF::StringImpl::destroy(v46, v53);
            else
              *(_DWORD *)v46 -= 2;
          }
        }
        else
        {
          *(_QWORD *)(v52 + 80) = 0;
          v135 = (_DWORD *)v52;
          if (v46)
            goto LABEL_95;
        }
        if (*(void (***)(WebCore::MediaKeyMessageEvent *__hidden))v52 != off_1E3203850)
        {
          __break(0xC471u);
          JUMPOUT(0x194D0DF28);
        }
        v58 = *(JSC::VM **)(v129 + 40);
        v59 = *((_QWORD *)v58 + 412);
        if (v59)
        {
          v60 = *(_DWORD *)(v59 - 8);
          v61 = ((unint64_t)&WebCore::JSMediaKeyMessageEvent::s_info
               + ~((_QWORD)&WebCore::JSMediaKeyMessageEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaKeyMessageEvent::s_info
                                                                              + ~((_QWORD)&WebCore::JSMediaKeyMessageEvent::s_info << 32)) >> 22);
          v62 = 9 * ((v61 + ~(v61 << 13)) ^ ((v61 + ~(v61 << 13)) >> 8));
          v63 = (v62 ^ (v62 >> 15)) + ~((v62 ^ (v62 >> 15)) << 27);
          v64 = v60 & ((v63 >> 31) ^ v63);
          v65 = *(char ***)(v59 + 16 * v64);
          if (v65 != &WebCore::JSMediaKeyMessageEvent::s_info)
          {
            v66 = 1;
            while (v65)
            {
              v64 = ((_DWORD)v64 + v66) & v60;
              v65 = *(char ***)(v59 + 16 * v64);
              ++v66;
              if (v65 == &WebCore::JSMediaKeyMessageEvent::s_info)
                goto LABEL_103;
            }
            goto LABEL_104;
          }
LABEL_103:
          v67 = *(_QWORD *)(v59 + 16 * v64 + 8);
          if (!v67)
            goto LABEL_104;
        }
        else
        {
LABEL_104:
          v68 = (WebCore::JSEvent *)*((_QWORD *)v58 + 7);
          v69 = (JSC::JSCell *)WebCore::JSEvent::prototype(v68, *(JSC::VM **)(v129 + 40), v54);
          Structure = WebCore::JSMediaKeyMessageEventPrototype::createStructure((uint64_t *)v68, (uint64_t)v58, v69);
          *(_DWORD *)(Structure + 16) |= 0x80000u;
          v72 = (JSC::JSCell *)WebCore::JSMediaKeyMessageEventPrototype::create(v68, v58, Structure, v71);
          v73 = WebCore::JSMediaKeyMessageEvent::createStructure((uint64_t *)v68, (uint64_t)v58, v72);
          v67 = WebCore::cacheDOMStructure((JSCell *)v58, v73, (uint64_t)&WebCore::JSMediaKeyMessageEvent::s_info);
        }
        v30 = (JSCell *)WebCore::JSMediaKeyMessageEvent::create(v67, v58, (uint64_t *)&v135);
        WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)v58 + 415), v52, (uint64_t)v30);
        v74 = *(JSC::JSCell **)(v128 + 40);
        if (((unint64_t)v74 & 0xFFFE000000000002) != 0
          || (v75 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v74)) == 0
          || (v77 = v75, v75 == *(JSC::JSGlobalObject **)(v128 + 24))
          || (v78 = (JSC::VM *)*((_QWORD *)a1 + 7),
              FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v75, v76),
              *((_DWORD *)v78 + 20))
          && (JSC::VM::hasExceptionsAfterHandlingTraps(v78) & 1) != 0)
        {
LABEL_118:
          if (*((_DWORD *)v126 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v126) & 1) != 0)
            v30 = 0;
          v96 = v135;
          v135 = 0;
          if (v96)
          {
            if (v96[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v96 + 8))(v96);
            else
              --v96[4];
          }
          goto LABEL_46;
        }
        v82 = *((_QWORD *)FunctionRealm + 412);
        if (v82)
        {
          v83 = *(_DWORD *)(v82 - 8);
          v84 = ((unint64_t)&WebCore::JSMediaKeyMessageEvent::s_info
               + ~((_QWORD)&WebCore::JSMediaKeyMessageEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaKeyMessageEvent::s_info
                                                                              + ~((_QWORD)&WebCore::JSMediaKeyMessageEvent::s_info << 32)) >> 22);
          v85 = 9 * ((v84 + ~(v84 << 13)) ^ ((v84 + ~(v84 << 13)) >> 8));
          v86 = (v85 ^ (v85 >> 15)) + ~((v85 ^ (v85 >> 15)) << 27);
          v87 = v83 & ((v86 >> 31) ^ v86);
          v88 = *(char ***)(v82 + 16 * v87);
          if (v88 != &WebCore::JSMediaKeyMessageEvent::s_info)
          {
            v89 = 1;
            while (v88)
            {
              v87 = ((_DWORD)v87 + v89) & v83;
              v88 = *(char ***)(v82 + 16 * v87);
              ++v89;
              if (v88 == &WebCore::JSMediaKeyMessageEvent::s_info)
                goto LABEL_114;
            }
            goto LABEL_115;
          }
LABEL_114:
          v79 = *(WebCore::JSDOMGlobalObject **)(v82 + 16 * v87 + 8);
          if (!v79)
            goto LABEL_115;
        }
        else
        {
LABEL_115:
          v90 = (JSC::JSCell *)WebCore::JSEvent::prototype(v78, FunctionRealm, v79);
          v91 = WebCore::JSMediaKeyMessageEventPrototype::createStructure((uint64_t *)v78, (uint64_t)FunctionRealm, v90);
          *(_DWORD *)(v91 + 16) |= 0x80000u;
          v93 = (JSC::JSCell *)WebCore::JSMediaKeyMessageEventPrototype::create(v78, FunctionRealm, v91, v92);
          v94 = WebCore::JSMediaKeyMessageEvent::createStructure((uint64_t *)v78, (uint64_t)FunctionRealm, v93);
          v79 = (WebCore::JSDOMGlobalObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v94, (uint64_t)&WebCore::JSMediaKeyMessageEvent::s_info);
        }
        SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v77, v79, v80);
        if (!*((_DWORD *)v78 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v78) & 1) == 0)
          JSC::JSObject::setStructure(v30, v78, SubclassStructure);
        goto LABEL_118;
      }
      v12 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_206:
      v109 = (_DWORD)v11 == 0;
LABEL_236:
      v14 = !v109;
LABEL_16:
      v127 = v14;
      if (*((_DWORD *)v12 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v12) & 1) != 0)
        goto LABEL_45;
    }
    v114 = (_DWORD)v17 == 0;
    goto LABEL_251;
  }
  v30 = 0;
LABEL_47:
  if (v6 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32B5840[v6])(&v130, &v133);
  return v30;
}

uint64_t WebCore::JSMediaKeyMessageEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSMediaKeyMessageEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSMediaKeyMessageEventPrototype::create(WebCore::JSMediaKeyMessageEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSMediaKeyMessageEvent::s_info, &WebCore::JSMediaKeyMessageEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSMediaKeyMessageEvent>,(WebCore::DOMConstructorID)75>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 600);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSMediaKeyMessageEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000002, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSMediaKeyMessageEvent::s_info
         + ~((_QWORD)&WebCore::JSMediaKeyMessageEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaKeyMessageEvent::s_info
                                                                        + ~((_QWORD)&WebCore::JSMediaKeyMessageEvent::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSMediaKeyMessageEvent::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSMediaKeyMessageEvent::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEvent::prototype((WebCore::JSEvent *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSMediaKeyMessageEventPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSMediaKeyMessageEventPrototype::create((WebCore::JSMediaKeyMessageEventPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSMediaKeyMessageEvent::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSMediaKeyMessageEvent::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 600) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsMediaKeyMessageEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSMediaKeyMessageEventPrototype::s_info != (char **)(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                      + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSMediaKeyMessageEvent>,(WebCore::DOMConstructorID)75>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsMediaKeyMessageEvent_messageType(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(unsigned __int8 *)(*((_QWORD *)a2 + 3) + 72);
  if ((byte_1EE335F2E & 1) == 0)
  {
    dword_1ECE78EF0 += 2;
    byte_1EE335F2E = 1;
    dword_1ECE78F10 += 2;
    qword_1EE3360E0 = (uint64_t)&dword_1ECE78EF0;
    unk_1EE3360E8 = &dword_1ECE78F10;
    dword_1ECE78F30 += 2;
    dword_1ECE78F50 += 2;
    qword_1EE3360F0 = (uint64_t)&dword_1ECE78F30;
    unk_1EE3360F8 = &dword_1ECE78F50;
  }
  v5 = *(_QWORD *)&_MergedGlobals_685[8 * v4 + 440];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

uint64_t WebCore::jsMediaKeyMessageEvent_message(WebCore *a1, uint64_t a2, uint64_t a3, JSC::ArrayBuffer *a4)
{
  WebCore::JSDOMGlobalObject *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(WebCore::JSDOMGlobalObject **)(*(_QWORD *)(a2 + 24) + 80);
  if (!v4)
    return 2;
  v5 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  *(_DWORD *)v4 += 2;
  v6 = WebCore::toJS(a1, v5, v4, a4);
  WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v4);
  return v6;
}

uint64_t WebCore::JSMediaKeyMessageEvent::subspaceForImpl(WebCore::JSMediaKeyMessageEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 600);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 600))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 600);
    *(_QWORD *)(v8 + 600) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 600);
  *(_QWORD *)(v3 + 600) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSMediaKeySession::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSMediaKeySessionPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSMediaKeySessionPrototype::create(WebCore::JSMediaKeySessionPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<12u>(this, (uint64_t)&WebCore::JSMediaKeySession::s_info, (uint64_t)&WebCore::JSMediaKeySessionPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaKeySession>,(WebCore::DOMConstructorID)76>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 608);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaKeySession>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSMediaKeySession::s_info + ~((_QWORD)&WebCore::JSMediaKeySession::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaKeySession::s_info + ~((_QWORD)&WebCore::JSMediaKeySession::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSMediaKeySession::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSMediaKeySession::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEventTarget::prototype((WebCore::JSEventTarget *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSMediaKeySessionPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSMediaKeySessionPrototype::create((WebCore::JSMediaKeySessionPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSMediaKeySession::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSMediaKeySession::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 608) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsMediaKeySessionConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSMediaKeySessionPrototype::s_info != (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaKeySession>,(WebCore::DOMConstructorID)76>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsMediaKeySession_sessionId(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 96);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

unint64_t WebCore::jsMediaKeySession_expiration(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 104);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

uint64_t WebCore::jsMediaKeySession_closed(JSC::JSGlobalObject *a1, uint64_t a2, JSC::Structure *a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  JSC::VM *v15;
  unint64_t v16;
  uint64_t v17;
  WebCore::DOMGuardedObject *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  void *v24;
  uint64_t *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  unsigned __int8 v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 v40[8];
  WTF::StringImpl *v41;
  objc_class *v42;

  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v5 = (char **)(16 * v3);
    if ((_DWORD)v3)
      v6 = v5 == &WebCore::JSMediaKeySession::s_info;
    else
      v6 = 1;
    if (!v6)
    {
      do
      {
        v5 = (char **)v5[2];
        v4 = v5 != 0;
      }
      while (v5 != &WebCore::JSMediaKeySession::s_info && v5 != 0);
    }
    if (v4)
    {
      v8 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
      v9 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 112);
      v10 = *(unsigned int *)(v9 + 44);
      if ((_DWORD)v10)
      {
        v11 = *(_QWORD *)(v9 + 32);
        v12 = 8 * v10;
        while (1)
        {
          v13 = *(_QWORD *)(*(_QWORD *)v11 + 32);
          if (v13)
          {
            if ((*(_BYTE *)(v13 + 8) & 3) == 0 && *(_QWORD *)v13 == v8)
              break;
          }
          v11 += 8;
          v12 -= 8;
          if (!v12)
            goto LABEL_18;
        }
        v26 = *(_BYTE **)(*(_QWORD *)v11 + 24);
        if (!v26)
          return 10;
        v27 = *(_QWORD *)v26;
        if (!*(_QWORD *)v26 || (v26[8] & 3) != 0)
          return 10;
        if ((v27 & 0xFFFE000000000002) != 0)
          return 0;
        if (*(_BYTE *)(v27 + 5) == 68)
          return *(_QWORD *)v26;
        return 0;
      }
LABEL_18:
      v14 = *(_DWORD *)(v8 + 1164);
      if (v14)
        v15 = (JSC::VM *)(16 * (v14 & 0xFFFFFFFE));
      else
        v15 = 0;
      v16 = JSC::JSPromise::create(*(JSC::JSPromise **)(v8 + 56), v15, a3);
      v17 = WTF::fastMalloc((WTF *)0x30);
      v18 = WebCore::DOMGuardedObject::DOMGuardedObject((WebCore::DOMGuardedObject *)v17, v8, v16);
      *(_QWORD *)v18 = &off_1E3226868;
      *((_DWORD *)v18 + 10) = 1;
      *((_BYTE *)v18 + 44) = 0;
      v19 = *(unsigned int *)(v9 + 44);
      if ((_DWORD)v19 == *(_DWORD *)(v9 + 40))
      {
        v20 = v19 + (v19 >> 2);
        if (v20 >= 0x10)
          v21 = v20 + 1;
        else
          v21 = 16;
        if (v21 <= v19 + 1)
          v22 = v19 + 1;
        else
          v22 = v21;
        v23 = *(void **)(v9 + 32);
        if (v22 < 2)
        {
          v24 = (void *)(v9 + 48);
          *(_QWORD *)(v9 + 32) = v9 + 48;
          *(_DWORD *)(v9 + 40) = 1;
        }
        else
        {
          if (v22 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x194D0FB68);
          }
          v24 = (void *)WTF::fastMalloc((WTF *)(8 * v22));
          *(_DWORD *)(v9 + 40) = v22;
          *(_QWORD *)(v9 + 32) = v24;
        }
        memcpy(v24, v23, 8 * v19);
        if ((void *)(v9 + 48) != v23 && v23)
        {
          if (*(void **)(v9 + 32) == v23)
          {
            *(_QWORD *)(v9 + 32) = 0;
            *(_DWORD *)(v9 + 40) = 0;
          }
          WTF::fastFree((WTF *)v23, v29);
        }
        v19 = *(unsigned int *)(v9 + 44);
        v25 = (uint64_t *)(*(_QWORD *)(v9 + 32) + 8 * v19);
      }
      else
      {
        v25 = (uint64_t *)(*(_QWORD *)(v9 + 32) + 8 * v19);
      }
      ++*(_DWORD *)(v17 + 16);
      *v25 = v17;
      *(_DWORD *)(v9 + 44) = v19 + 1;
      if (!*(_BYTE *)(v9 + 24))
        goto LABEL_56;
      if (!*(_BYTE *)(v9 + 16))
      {
        v34 = *(_QWORD *)(v17 + 24);
        if (v34 && *(_QWORD *)v34 && (*(_BYTE *)(v34 + 8) & 3) == 0)
        {
          v35 = *(_QWORD *)(v17 + 32);
          if (!v35 || (*(_BYTE *)(v35 + 8) & 3) != 0)
            v36 = 0;
          else
            v36 = *(uint64_t **)v35;
          JSC::JSLockHolder::JSLockHolder();
          WebCore::DeferredPromise::callFunction(v17, v36, 0, (objc_class *)0xA);
          MEMORY[0x19AEA32A0](v40);
        }
        goto LABEL_56;
      }
      v30 = *(_BYTE *)v9;
      v31 = *(WTF::StringImpl **)(v9 + 8);
      if (v31)
        *(_DWORD *)v31 += 4;
      v41 = v31;
      v42 = 0;
      v40[0] = v30;
      WebCore::DeferredPromise::reject(v17, v40, 0, &v42);
      v33 = v41;
      v41 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::destroy(v33, v32);
          if (v31)
          {
LABEL_47:
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v32);
            else
              *(_DWORD *)v31 -= 2;
          }
LABEL_56:
          v37 = *(_QWORD *)(v17 + 24);
          if (v37 && (v38 = *(_QWORD *)v37) != 0 && (*(_BYTE *)(v37 + 8) & 3) == 0)
          {
            if ((v38 & 0xFFFE000000000002) != 0)
            {
              v28 = 0;
            }
            else if (*(_BYTE *)(v38 + 5) == 68)
            {
              v28 = *(_QWORD *)v37;
            }
            else
            {
              v28 = 0;
            }
          }
          else
          {
            v28 = 10;
          }
          if (*(_DWORD *)(v17 + 16) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
          else
            --*(_DWORD *)(v17 + 16);
          return v28;
        }
        *(_DWORD *)v33 -= 2;
      }
      if (v31)
        goto LABEL_47;
      goto LABEL_56;
    }
  }
  return WebCore::rejectPromiseWithGetterTypeError(a1, (JSC **)&WebCore::JSMediaKeySession::s_info, a3);
}

unint64_t WebCore::jsMediaKeySession_keyStatuses(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v2 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v3 = *(WTF **)(*(_QWORD *)(a2 + 24) + 120);
  v4 = *((_DWORD *)v3 + 2);
  *((_DWORD *)v3 + 2) = v4 + 1;
  v5 = *(_QWORD *)(*(_QWORD *)(v2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == v3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            goto LABEL_53;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == v3)
          goto LABEL_6;
      }
    }
  }
  *((_DWORD *)v3 + 2) = v4 + 2;
  if (*(void (***)(WebCore::MediaKeyStatusMap *__hidden))v3 != off_1E3203E50)
  {
    __break(0xC471u);
    JUMPOUT(0x194D0FFA4);
  }
  v15 = *(_QWORD *)(v2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSMediaKeyStatusMap::s_info
         + ~((_QWORD)&WebCore::JSMediaKeyStatusMap::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaKeyStatusMap::s_info
                                                                     + ~((_QWORD)&WebCore::JSMediaKeyStatusMap::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSMediaKeyStatusMap::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_17;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSMediaKeyStatusMap::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(uint64_t **)(v2 + 56);
  Structure = WebCore::JSMediaKeyStatusMapPrototype::createStructure(v24, v2, *(JSC::JSCell **)(v2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSMediaKeyStatusMapPrototype::create((WebCore::JSMediaKeyStatusMapPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSMediaKeyStatusMap::createStructure(v24, v2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)v2, v29, (uint64_t)&WebCore::JSMediaKeyStatusMap::s_info);
LABEL_17:
  v30 = *(_QWORD *)(v2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 616);
  if (v33)
    goto LABEL_37;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_22;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_22:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 616))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 616);
    *(_QWORD *)(v36 + 616) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 616);
  *(_QWORD *)(v32 + 616) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_36:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_37:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_39;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_39:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = v3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(v2 + 3320);
  if ((byte_1EE335FA0 & 1) == 0)
  {
    qword_1EE335F98 = (uint64_t)&off_1E32B34D0;
    byte_1EE335FA0 = 1;
  }
  v54 = v3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE335F98;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  v4 = *((_DWORD *)v3 + 2) - 1;
LABEL_53:
  if (v4)
    *((_DWORD *)v3 + 2) = v4;
  else
    (*(void (**)(WTF *))(*(_QWORD *)v3 + 8))(v3);
  return SlowCase;
}

uint64_t WebCore::jsMediaKeySession_onkeystatuseschange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  bmalloc::api *v11;
  void *v12;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1064), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 6) == 1)
  {
    WebCore::MediaKeySession::~MediaKeySession(v5);
    bmalloc::api::isoDeallocate(v11, v12);
  }
  else
  {
    --*((_DWORD *)v5 + 6);
  }
  return v9;
}

BOOL WebCore::setJSMediaKeySession_onkeystatuseschange(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  bmalloc::api *v16;
  void *v17;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSMediaKeySession::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSMediaKeySession::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1064), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 6) == 1)
      {
        WebCore::MediaKeySession::~MediaKeySession(v11);
        bmalloc::api::isoDeallocate(v16, v17);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsMediaKeySession_onmessage(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  bmalloc::api *v11;
  void *v12;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1192), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 6) == 1)
  {
    WebCore::MediaKeySession::~MediaKeySession(v5);
    bmalloc::api::isoDeallocate(v11, v12);
  }
  else
  {
    --*((_DWORD *)v5 + 6);
  }
  return v9;
}

BOOL WebCore::setJSMediaKeySession_onmessage(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  bmalloc::api *v16;
  void *v17;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSMediaKeySession::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSMediaKeySession::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1192), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 6) == 1)
      {
        WebCore::MediaKeySession::~MediaKeySession(v11);
        bmalloc::api::isoDeallocate(v16, v17);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::JSMediaKeySessionOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v6 = v5[5];
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (v5[6] || (result = (*(uint64_t (**)(_QWORD *))(v5[4] + 64))(v5 + 4), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

void WebCore::JSMediaKeySessionOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebCore::MediaKeySession *v3;
  int v4;
  _DWORD *v5;
  bmalloc::api *v6;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  WebCore::MediaKeySession *v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;

  v3 = *(WebCore::MediaKeySession **)(*(_QWORD *)a2 + 24);
  v4 = *((_DWORD *)v3 + 6);
  *((_DWORD *)v3 + 6) = v4 + 1;
  v5 = (_DWORD *)((char *)v3 + 8);
  if (!v3)
    v5 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v10 = *(_QWORD *)(a3 + 32);
    v8 = (uint64_t *)(a3 + 32);
    v9 = v10;
    if (v10)
    {
      v11 = *(_DWORD *)(v9 - 8);
      v12 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
      v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
      v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
      v15 = v11 & ((v14 >> 31) ^ v14);
      v16 = *(WebCore::MediaKeySession **)(v9 + 16 * v15);
      if (v16 != v3)
      {
        v17 = 1;
        while (v16)
        {
          v15 = ((_DWORD)v15 + v17) & v11;
          v16 = *(WebCore::MediaKeySession **)(v9 + 16 * v15);
          ++v17;
          if (v16 == v3)
            goto LABEL_14;
        }
        v15 = *(unsigned int *)(v9 - 4);
      }
LABEL_14:
      if (v15 != *(_DWORD *)(v9 - 4))
      {
        v18 = (_QWORD *)(v9 + 16 * v15);
        *v18 = -1;
        v21 = v18[1];
        v20 = v18 + 1;
        v19 = v21;
        if (v21)
        {
          *(_QWORD *)(v19 + 8) = 3;
          *v20 = 0;
        }
        ++*(_DWORD *)(*v8 - 16);
        v22 = *v8;
        if (*v8)
          v23 = *(_DWORD *)(v22 - 12) - 1;
        else
          v23 = -1;
        *(_DWORD *)(v22 - 12) = v23;
        v24 = *v8;
        if (*v8)
        {
          v25 = 6 * *(_DWORD *)(v24 - 12);
          v26 = *(_DWORD *)(v24 - 4);
          if (v25 < v26 && v26 >= 9)
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v8, v26 >> 1, 0);
        }
      }
    }
    v4 = *((_DWORD *)v3 + 6) - 1;
  }
  else if (*(_QWORD *)v5)
  {
    *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
    *(_QWORD *)v5 = 0;
  }
  if (v4)
  {
    *((_DWORD *)v3 + 6) = v4;
  }
  else
  {
    WebCore::MediaKeySession::~MediaKeySession(v3);
    bmalloc::api::isoDeallocate(v6, v7);
  }
}

unint64_t WebCore::wrap<WebCore::MediaKeySession>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  WebCore::JSEventTarget *v17;
  JSC::JSCell *v18;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v20;
  JSC::Structure *v21;
  JSC::JSCell *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  WTF *v39;
  void *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *Allocator;
  uint64_t v46;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  WTF *v62;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v51 = *(_QWORD *)(v5 + 32);
    if (!v51)
      goto LABEL_5;
    v52 = *(_DWORD *)(v51 - 8);
    v53 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v54 = 9 * ((v53 + ~(v53 << 13)) ^ ((v53 + ~(v53 << 13)) >> 8));
    v55 = (v54 ^ (v54 >> 15)) + ~((v54 ^ (v54 >> 15)) << 27);
    v56 = v52 & ((v55 >> 31) ^ v55);
    v57 = *(_QWORD *)(v51 + 16 * v56);
    if (v57 != a3)
    {
      v58 = 1;
      while (v57)
      {
        v56 = ((_DWORD)v56 + v58) & v52;
        v57 = *(_QWORD *)(v51 + 16 * v56);
        ++v58;
        if (v57 == a3)
          goto LABEL_66;
      }
      goto LABEL_5;
    }
LABEL_66:
    v6 = *(_QWORD *)(v51 + 16 * v56 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 8);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 24);
  if (*(uint64_t (***)(WebCore::MediaKeySession *__hidden))a3 != off_1E3203CF0)
  {
    __break(0xC471u);
    JUMPOUT(0x194D10B30);
  }
  v8 = *((_QWORD *)a2 + 412);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)&WebCore::JSMediaKeySession::s_info + ~((_QWORD)&WebCore::JSMediaKeySession::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaKeySession::s_info + ~((_QWORD)&WebCore::JSMediaKeySession::s_info << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(char ***)(v8 + 16 * v13);
    if (v14 == &WebCore::JSMediaKeySession::s_info)
    {
LABEL_11:
      v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (v16)
        goto LABEL_13;
    }
    else
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(char ***)(v8 + 16 * v13);
        ++v15;
        if (v14 == &WebCore::JSMediaKeySession::s_info)
          goto LABEL_11;
      }
    }
  }
  v17 = (WebCore::JSEventTarget *)*((_QWORD *)a2 + 7);
  v18 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v17, a2, (WebCore::JSDOMGlobalObject *)a3);
  Structure = WebCore::JSMediaKeySessionPrototype::createStructure((uint64_t *)v17, (uint64_t)a2, v18);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v22 = (JSC::JSCell *)WebCore::JSMediaKeySessionPrototype::create(v17, Structure, v20, v21);
  v23 = WebCore::JSMediaKeySession::createStructure((uint64_t *)v17, (uint64_t)a2, v22);
  v16 = WebCore::cacheDOMStructure((JSCell *)a2, v23, (uint64_t)&WebCore::JSMediaKeySession::s_info);
LABEL_13:
  v24 = *((_QWORD *)a2 + 7);
  v25 = *(_QWORD *)(v24 + 41456);
  v26 = *(_QWORD *)(v25 + 23536);
  v27 = *(_QWORD **)(v26 + 608);
  if (v27)
    goto LABEL_36;
  v28 = *(_QWORD *)(v25 + 22648);
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v28))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v28);
LABEL_18:
  v30 = *(_QWORD *)(v28 + 2824);
  v60 = *(_QWORD *)(v30 + 608);
  if (!v60)
  {
    v31 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v62, "IsoSpace T");
    v61 = 0;
    MEMORY[0x19AEA3204](v31, &v62, v24 + 192, v24 + 1872, 32, 8, &v61);
    v33 = (uint64_t)v61;
    v61 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = v62;
    v62 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::fastFree(v34, v32);
      else
        --*(_DWORD *)v34;
    }
    v60 = v31;
    v35 = *(_QWORD *)(v30 + 608);
    *(_QWORD *)(v30 + 608) = v31;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    v36 = *(unsigned int *)(v28 + 2844);
    if ((_DWORD)v36 == *(_DWORD *)(v28 + 2840))
    {
      v37 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v28 + 2832, v36 + 1, (unint64_t)&v60);
      v36 = *(unsigned int *)(v28 + 2844);
      *(_QWORD *)(*(_QWORD *)(v28 + 2832) + 8 * v36) = *v37;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v28 + 2832) + 8 * v36) = v31;
    }
    *(_DWORD *)(v28 + 2844) = v36 + 1;
  }
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v38 = *(_QWORD *)(v26 + 608);
  *(_QWORD *)(v26 + 608) = v27;
  if (v38)
  {
    v39 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v39, v40);
  }
  v41 = __ldxr((unsigned __int8 *)v28);
  if (v41 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v28))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_36:
  SlowCase = v27[3];
  if (SlowCase < v27[4])
  {
LABEL_37:
    v27[3] = SlowCase + 32;
    goto LABEL_38;
  }
  SlowCase = v27[5];
  if ((SlowCase & 1) == 0)
  {
    v59 = *(_QWORD *)(SlowCase + 8) ^ v27[6];
    v27[4] = SlowCase + HIDWORD(v59);
    v27[5] = SlowCase + (int)v59;
    goto LABEL_37;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v42 = *((_QWORD *)a2 + 415);
  if ((byte_1EE335F90 & 1) == 0)
  {
    qword_1EE335F88 = (uint64_t)&off_1E32B34A0;
    byte_1EE335F90 = 1;
  }
  if (!*(_DWORD *)(v42 + 48))
  {
    if ((SlowCase & 8) != 0)
      v43 = (SlowCase - 112) | 1;
    else
      v43 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v43 & 1) != 0)
      v44 = v43 + 47;
    else
      v44 = *(_QWORD *)v43 + 32;
    Allocator = *(_QWORD **)(v44 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v44 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE335F88;
    Allocator[2] = v42;
    v46 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = Allocator;
    if (!v46)
      return SlowCase;
LABEL_60:
    *(_QWORD *)(v46 + 8) = 3;
    return SlowCase;
  }
  v62 = (WTF *)a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  v50 = *(_QWORD **)(v49 + 16);
  if (!v50)
    v50 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *v50;
  *v50 = SlowCase;
  v50[1] = &qword_1EE335F88;
  v50[2] = v42;
  v61 = v50;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v42 + 32), (uint64_t *)&v62, (uint64_t *)&v61);
  v46 = (uint64_t)v61;
  if (v61)
    goto LABEL_60;
  return SlowCase;
}

uint64_t WebCore::JSMediaKeySession::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSMediaKeySession::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSMediaKeySession::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24);
  else
    return 0;
}

uint64_t WebCore::convertEnumerationToJS<WebCore::CDMSessionType>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  {
    WebCore::convertEnumerationToString(WebCore::CDMSessionType)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::CDMSessionType)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::CDMSessionType)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CDMSessionType)::$_0::operator() const(void)::impl;
    unk_1EE2F4770 = &WebCore::convertEnumerationToString(WebCore::CDMSessionType)::$_1::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::CDMSessionType)::$_2::operator() const(void)::impl += 2;
    qword_1EE2F4778 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CDMSessionType)::$_2::operator() const(void)::impl;
  }
  v3 = WebCore::convertEnumerationToString(WebCore::CDMSessionType)::values[a2];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::parseEnumerationFromString<WebCore::CDMSessionType>(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  const char *v3;
  int v4;
  uint16x8_t v6;
  int v7;
  uint16x8_t v10;
  char **v11;
  __int32 v12;
  uint16x8_t v13;
  uint16x8_t v14;
  uint16x8_t v15;
  uint16x8_t v16;
  uint16x8_t v18;

  v1 = *a1;
  if (!*a1)
    goto LABEL_55;
  v2 = *(_DWORD *)(v1 + 16);
  v3 = *(const char **)(v1 + 8);
  v4 = *(_DWORD *)(v1 + 4);
  if (v3 != "persistent-license" && v4 == 18)
  {
    if ((v2 & 4) != 0)
    {
      if (*v3 != 112)
        goto LABEL_55;
      v6 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v3 + 2), (int8x16_t)xmmword_1968C0240), vceqq_s8(*(int8x16_t *)(v3 + 1), (int8x16_t)xmmword_1968C0230));
      v6.i8[0] = vminvq_u8((uint8x16_t)v6);
    }
    else
    {
      if (*(_WORD *)v3 != 112)
        goto LABEL_55;
      v13 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 2), (int16x8_t)xmmword_1968C0250);
      v13.i16[0] = vminvq_u16(v13);
      v12 = v13.i32[0];
      if (!v13.i32[0])
        goto LABEL_36;
      v14 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 4), (int16x8_t)xmmword_1968C0260);
      v14.i16[0] = vminvq_u16(v14);
      v12 = v14.i32[0];
      if (!v14.i32[0])
        goto LABEL_36;
      v6 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 20), (int16x8_t)xmmword_1968C0270);
      v6.i16[0] = vminvq_u16(v6);
    }
    v7 = v6.i32[0];
    if (!v6.i32[0])
      goto LABEL_56;
LABEL_26:
    v11 = &WebCore::parseEnumerationFromString<WebCore::CDMSessionType>(WTF::String const&)::mappings;
    goto LABEL_27;
  }
  if (v3 == "persistent-license" && v4 == 18)
    goto LABEL_26;
  if (v3 == "persistent-usage-record" || v4 != 23)
  {
    if (v3 != "persistent-usage-record" || v4 != 23)
    {
      if (v3 == "temporary" || v4 != 9)
      {
        if (v4 == 9 && v3 == "temporary")
          goto LABEL_47;
      }
      else
      {
        if ((v2 & 4) != 0)
        {
          if (*v3 == 116 && *(_DWORD *)(v3 + 1) == 1869639013 && *(_DWORD *)(v3 + 5) == 2037539186)
            goto LABEL_47;
          goto LABEL_55;
        }
        if (*(_WORD *)v3 == 116)
        {
          v18 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 2), (int16x8_t)xmmword_1968C02C0);
          v18.i16[0] = vminvq_u16(v18);
          v7 = v18.i32[0];
          if (v18.i32[0])
          {
LABEL_47:
            v11 = &off_1E32B0060;
            goto LABEL_27;
          }
LABEL_56:
          v12 = 0;
          return v12 | (v7 << 8);
        }
      }
LABEL_55:
      v7 = 0;
      goto LABEL_56;
    }
    goto LABEL_25;
  }
  if ((v2 & 4) != 0)
  {
    if (*v3 != 112)
      goto LABEL_55;
    v10 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v3 + 7), (int8x16_t)xmmword_1968C0290), vceqq_s8(*(int8x16_t *)(v3 + 1), (int8x16_t)xmmword_1968C0280));
    v10.i8[0] = vminvq_u8((uint8x16_t)v10);
    goto LABEL_24;
  }
  if (*(_WORD *)v3 != 112)
    goto LABEL_55;
  v15 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 2), (int16x8_t)xmmword_1968C0250);
  v15.i16[0] = vminvq_u16(v15);
  v12 = v15.i32[0];
  if (!v15.i32[0]
    || (v16 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 14), (int16x8_t)xmmword_1968C02A0),
        v16.i16[0] = vminvq_u16(v16),
        (v12 = v16.i32[0]) == 0))
  {
LABEL_36:
    v7 = 0;
    return v12 | (v7 << 8);
  }
  v10 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 30), (int16x8_t)xmmword_1968C02B0);
  v10.i16[0] = vminvq_u16(v10);
LABEL_24:
  v7 = v10.i32[0];
  if (!v10.i32[0])
    goto LABEL_56;
LABEL_25:
  v11 = &off_1E32B0048;
LABEL_27:
  v12 = *((unsigned __int8 *)v11 + 16);
  v7 = 1;
  return v12 | (v7 << 8);
}

uint64_t WebCore::parseEnumeration<WebCore::CDMSessionType>(JSC::JSGlobalObject *a1, unint64_t this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v6;
  unint64_t v7;

  v7 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v2 = *(WTF::StringImpl **)(this + 8);
    if ((v2 & 1) != 0)
    {
      v2 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
      if (!v2)
        goto LABEL_6;
    }
    else if (!v2)
    {
LABEL_6:
      v6 = v2;
      goto LABEL_7;
    }
    *(_DWORD *)v2 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v7, a1);
  v2 = v6;
LABEL_7:
  v4 = WebCore::parseEnumerationFromString<WebCore::CDMSessionType>((uint64_t *)&v6);
  v6 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v3);
    else
      *(_DWORD *)v2 -= 2;
  }
  return v4;
}

const char *WebCore::expectedEnumerationValues<WebCore::CDMSessionType>()
{
  return "\"temporary\", \"persistent-usage-record\", \"persistent-license\"";
}

uint64_t WebCore::convertEnumerationToJS<WebCore::CDMKeyStatus>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  {
    WebCore::convertEnumerationToString(WebCore::CDMKeyStatus)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::CDMKeyStatus)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::CDMKeyStatus)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::CDMKeyStatus)::$_3::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::CDMKeyStatus)::$_4::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::CDMKeyStatus)::$_5::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::CDMKeyStatus)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CDMKeyStatus)::$_0::operator() const(void)::impl;
    unk_1EE2F4790 = &WebCore::convertEnumerationToString(WebCore::CDMKeyStatus)::$_1::operator() const(void)::impl;
    qword_1EE2F4798 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CDMKeyStatus)::$_2::operator() const(void)::impl;
    unk_1EE2F47A0 = &WebCore::convertEnumerationToString(WebCore::CDMKeyStatus)::$_3::operator() const(void)::impl;
    qword_1EE2F47A8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CDMKeyStatus)::$_4::operator() const(void)::impl;
    unk_1EE2F47B0 = &WebCore::convertEnumerationToString(WebCore::CDMKeyStatus)::$_5::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::CDMKeyStatus)::$_6::operator() const(void)::impl += 2;
    qword_1EE2F47B8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CDMKeyStatus)::$_6::operator() const(void)::impl;
  }
  v3 = WebCore::convertEnumerationToString(WebCore::CDMKeyStatus)::values[a2];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

_DWORD *WebCore::JSMediaKeyStatusMap::destroy(WebCore::JSMediaKeyStatusMap *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSMediaKeyStatusMap::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSMediaKeyStatusMapPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSMediaKeyStatusMapPrototype::create(WebCore::JSMediaKeyStatusMapPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  JSC::Structure *v19;
  int v20;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  uint64_t v27;
  int *v28;
  JSC::Structure **v29;
  int *v30;
  int v31;
  int v32;
  JSC::Structure *v33;
  int v34;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v22 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v22);
    *((_QWORD *)this + 4865) = SlowCase + (int)v22;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<8u>(this, (uint64_t)&WebCore::JSMediaKeyStatusMap::s_info, (uint64_t)&WebCore::JSMediaKeyStatusMapPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = v6[381];
  v10 = *(_QWORD *)(v9 + 2712);
  v11 = *(WTF::StringImpl **)(*(_QWORD *)(v9 + 48) + 3952);
  if (((unint64_t)v11 >> 4)
    && (((unint64_t)v11 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x20)) == 0
    && (v12 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this)) != 0&& (v25 = v11, v13 = JSC::PropertyTable::get(v12, (uint64_t *)&v25), (_DWORD)v13 != -1))
  {
    if ((int)v13 > 63)
    {
      v23 = *(_QWORD *)(SlowCase + 8) - 8;
      v24 = 0x3F00000000 - (v13 << 32);
    }
    else
    {
      v23 = SlowCase + 16;
      v24 = v13 << 32;
    }
    v14 = *(_QWORD *)(v23 + (v24 >> 29));
  }
  else
  {
    v14 = 0;
  }
  v25 = 0;
  v26 = SlowCase;
  v27 = 0x1000000FFFFFFFFLL;
  v28 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, this, v10, v14, 4, (uint64_t)&v25);
  v15 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v17 = JSC::JSString::create((uint64_t)this, &v25);
  v18 = v25;
  v25 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v34 = *(_DWORD *)SlowCase;
  v33 = v19;
  v20 = JSC::Structure::outOfLineCapacity(v19);
  v31 = 0;
  v32 = v20;
  v25 = (WTF::StringImpl *)&v32;
  v26 = SlowCase;
  v27 = (uint64_t)this;
  v28 = &v34;
  v29 = &v33;
  v30 = &v31;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v19, this, v15, 6, (uint64_t)&v25);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v31, v17);
  *((_DWORD *)v19 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaKeyStatusMap>,(WebCore::DOMConstructorID)77>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 616);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaKeyStatusMap>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSMediaKeyStatusMap::s_info
         + ~((_QWORD)&WebCore::JSMediaKeyStatusMap::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaKeyStatusMap::s_info
                                                                     + ~((_QWORD)&WebCore::JSMediaKeyStatusMap::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSMediaKeyStatusMap::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSMediaKeyStatusMap::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSMediaKeyStatusMapPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSMediaKeyStatusMapPrototype::create((WebCore::JSMediaKeyStatusMapPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSMediaKeyStatusMap::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSMediaKeyStatusMap::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 616) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsMediaKeyStatusMapConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSMediaKeyStatusMapPrototype::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaKeyStatusMap>,(WebCore::DOMConstructorID)77>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsMediaKeyStatusMap_size(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  if (v2 && (v2 = *(unsigned int *)(v2 + 196), (v2 & 0x80000000) != 0))
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::JSDOMIteratorBase<WebCore::JSMediaKeyStatusMap,WebCore::MediaKeyStatusMapIteratorTraits>::destroy(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 40))
  {
    v1 = result;
    result = *(_QWORD *)(result + 24);
    *(_QWORD *)(v1 + 24) = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 8) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      else
        --*(_DWORD *)(result + 8);
    }
  }
  return result;
}

uint64_t WebCore::JSMediaKeyStatusMapOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSMediaKeyStatusMapOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

_DWORD *WebCore::JSMediaKeySystemAccess::destroy(WebCore::JSMediaKeySystemAccess *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[6] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[6];
  }
  return result;
}

uint64_t WebCore::JSMediaKeySystemAccess::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSMediaKeySystemAccessPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSMediaKeySystemAccessPrototype::create(WebCore::JSMediaKeySystemAccessPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>(this, (uint64_t)&WebCore::JSMediaKeySystemAccess::s_info, &WebCore::JSMediaKeySystemAccessPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaKeySystemAccess>,(WebCore::DOMConstructorID)78>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 624);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaKeySystemAccess>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSMediaKeySystemAccess::s_info
         + ~((_QWORD)&WebCore::JSMediaKeySystemAccess::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaKeySystemAccess::s_info
                                                                        + ~((_QWORD)&WebCore::JSMediaKeySystemAccess::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSMediaKeySystemAccess::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSMediaKeySystemAccess::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSMediaKeySystemAccessPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSMediaKeySystemAccessPrototype::create((WebCore::JSMediaKeySystemAccessPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSMediaKeySystemAccess::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSMediaKeySystemAccess::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 624) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsMediaKeySystemAccessConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSMediaKeySystemAccessPrototype::s_info != (char **)(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                      + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaKeySystemAccess>,(WebCore::DOMConstructorID)78>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsMediaKeySystemAccess_keySystem(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 40);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::JSMediaKeySystemAccessOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v6 = v5[1];
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (v5[2] || (result = (*(uint64_t (**)(_QWORD *))(*v5 + 64))(v5), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

_QWORD *WebCore::JSMediaKeySystemAccessOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[6];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[6] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
  --v3[6];
  return result;
}

void WebCore::convertDictionary<WebCore::CDMKeySystemConfiguration>(JSC::JSCell *this@<X1>, WTF::StringImpl **a2@<X0>, uint64_t a3@<X8>)
{
  JSC::VM *v5;
  unint64_t v6;
  JSC::Structure *v7;
  uint64_t Object;
  uint64_t v9;
  WTF *v10;
  WTF *v11;
  WTF *v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  unsigned __int16 v19;
  int v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  JSC::VM *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  unsigned __int16 v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  JSValue v40;
  WTF::StringImpl *v41;
  unsigned int v42;
  unsigned int i;
  unsigned int v44;
  unint64_t IndexQuickly;
  WTF::StringImpl *v46;
  unsigned __int16 v47;
  char *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  int v51;
  char v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  unint64_t v62;
  WTF::StringImpl *v63;
  unsigned __int16 v64;
  char *v65;
  unsigned __int16 v66;
  char v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  uint64_t v75;
  char hasExceptionsAfterHandlingTraps;
  unsigned int v77;
  WTF *v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  WTF *v83;
  uint64_t v84;
  WTF::StringImpl **v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  __int128 v88;
  WTF *v89;
  WTF *v90;
  int v91;
  WTF::StringImpl *v92;
  WTF *v93;
  WTF *v94;
  WTF *v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  WTF::StringImpl *v102;
  WTF *v103;
  int v104;
  WTF::StringImpl *v105;
  WTF *v106;
  int v107;
  WTF::StringImpl *v108[2];
  WTF *v109[2];
  WTF *v110[2];
  uint64_t v111;
  __int16 v112;
  WTF *v113;
  unint64_t v114;
  JSC::VM *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  uint64_t v118;

  v5 = a2[7];
  v115 = v5;
  v6 = (unint64_t)this & 0xFFFFFFFFFFFFFFF7;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v7 = 0;
    v111 = 0;
    *(_OWORD *)v109 = 0u;
    *(_OWORD *)v110 = 0u;
    *(_OWORD *)v108 = 0u;
    v112 = 257;
    v113 = 0;
    v114 = 0;
    goto LABEL_10;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    JSC::throwTypeError();
    *(_DWORD *)(a3 + 80) = 1;
    return;
  }
  v7 = (JSC::Structure *)Object;
  v111 = 0;
  *(_OWORD *)v109 = 0u;
  *(_OWORD *)v110 = 0u;
  *(_OWORD *)v108 = 0u;
  v112 = 257;
  v113 = 0;
  v114 = 0;
  WTF::AtomStringImpl::addLiteral();
  v9 = JSC::JSObject::get(v7, (JSC::JSGlobalObject *)a2, (unint64_t)v105);
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
      WTF::StringImpl::destroy(v105, this);
    else
      *(_DWORD *)v105 -= 2;
  }
  if (!*((_DWORD *)v5 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v5))
  {
    if (v9 != 10)
    {
      v97 = a2[7];
      if ((v9 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v9 + 5) <= 0x16u)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        JSC::throwTypeError();
        v49 = v102;
        v102 = 0;
        if (v49)
        {
          if (*(_DWORD *)v49 == 2)
            WTF::StringImpl::destroy(v49, this);
          else
            *(_DWORD *)v49 -= 2;
        }
        v20 = 1;
        v107 = 1;
      }
      else
      {
        WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::CDMMediaCapability>>>::convert((uint64_t)&v105, (JSC::JSGlobalObject *)a2, v9);
        v20 = v107;
        if (!v107)
        {
          v10 = v105;
          v11 = v106;
LABEL_11:
          v93 = v11;
          v105 = 0;
          v106 = 0;
          v12 = v109[1];
          if (HIDWORD(v110[0]))
          {
            v13 = 24 * HIDWORD(v110[0]);
            v14 = (WTF::StringImpl **)((char *)v109[1] + 8);
            do
            {
              v15 = *v14;
              *v14 = 0;
              if (v15)
              {
                if (*(_DWORD *)v15 == 2)
                  WTF::StringImpl::destroy(v15, this);
                else
                  *(_DWORD *)v15 -= 2;
              }
              v16 = *(v14 - 1);
              *(v14 - 1) = 0;
              if (v16)
              {
                if (*(_DWORD *)v16 == 2)
                  WTF::StringImpl::destroy(v16, this);
                else
                  *(_DWORD *)v16 -= 2;
              }
              v14 += 3;
              v13 -= 24;
            }
            while (v13);
            v12 = v109[1];
          }
          if (v12)
          {
            v109[1] = 0;
            LODWORD(v110[0]) = 0;
            WTF::fastFree(v12, this);
          }
          v109[1] = v10;
          v110[0] = v93;
          if (v6 == 2)
          {
            LOBYTE(v112) = 1;
            goto LABEL_44;
          }
          WTF::AtomStringImpl::addLiteral();
          v18 = JSC::JSObject::get(v7, (JSC::JSGlobalObject *)a2, (unint64_t)v102);
          if (v102)
          {
            if (*(_DWORD *)v102 == 2)
              WTF::StringImpl::destroy(v102, v17);
            else
              *(_DWORD *)v102 -= 2;
          }
          if (!*((_DWORD *)v115 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v115))
          {
            if (v18 == 10)
            {
              LOBYTE(v19) = 1;
            }
            else
            {
              v102 = a2[7];
              v19 = WebCore::parseEnumeration<WebCore::CDMRequirement>((JSC::JSGlobalObject *)a2, v18);
              if (*((_DWORD *)v102 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v102) & 1) != 0)
                goto LABEL_179;
              if (v19 <= 0xFFu)
              {
                JSC::throwTypeError();
                goto LABEL_179;
              }
            }
            LOBYTE(v112) = v19;
            WTF::AtomStringImpl::addLiteral();
            v21 = JSC::JSObject::get(v7, (JSC::JSGlobalObject *)a2, (unint64_t)v102);
            if (v102)
            {
              if (*(_DWORD *)v102 == 2)
                WTF::StringImpl::destroy(v102, this);
              else
                *(_DWORD *)v102 -= 2;
            }
            if (!*((_DWORD *)v115 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v115))
            {
              if (v21 != 10)
              {
                v117 = a2[7];
                if ((v21 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v21 + 5) <= 0x16u)
                {
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  JSC::throwTypeError();
                  v53 = v97;
                  v97 = 0;
                  if (v53)
                  {
                    if (*(_DWORD *)v53 == 2)
                      WTF::StringImpl::destroy(v53, this);
                    else
                      *(_DWORD *)v53 -= 2;
                  }
                  v27 = 1;
                  v104 = 1;
                }
                else
                {
                  WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>>::convert((JSC::JSGlobalObject *)a2, v21, (uint64_t)&v102);
                  v27 = v104;
                  if (!v104)
                  {
                    v22 = v102;
                    v23 = v103;
LABEL_45:
                    v102 = 0;
                    v103 = 0;
                    v24 = v108[1];
                    if (HIDWORD(v109[0]))
                    {
                      v94 = v23;
                      v72 = 8 * HIDWORD(v109[0]);
                      do
                      {
                        v73 = *(WTF::StringImpl **)v24;
                        *(_QWORD *)v24 = 0;
                        if (v73)
                        {
                          if (*(_DWORD *)v73 == 2)
                            WTF::StringImpl::destroy(v73, this);
                          else
                            *(_DWORD *)v73 -= 2;
                        }
                        v24 = (WTF::StringImpl *)((char *)v24 + 8);
                        v72 -= 8;
                      }
                      while (v72);
                      v24 = v108[1];
                      v23 = v94;
                      if (!v108[1])
                        goto LABEL_47;
                    }
                    else if (!v108[1])
                    {
LABEL_47:
                      v108[1] = v22;
                      v109[0] = v23;
                      if (v6 == 2)
                        goto LABEL_53;
                      WTF::AtomStringImpl::addLiteral();
                      v25 = JSC::JSObject::get(v7, (JSC::JSGlobalObject *)a2, (unint64_t)v97);
                      if (v97)
                      {
                        if (*(_DWORD *)v97 == 2)
                          WTF::StringImpl::destroy(v97, this);
                        else
                          *(_DWORD *)v97 -= 2;
                      }
                      if (*((_DWORD *)v115 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v115))
                      {
                        *(_DWORD *)(a3 + 80) = 1;
LABEL_234:
                        v27 = v104;
LABEL_235:
                        if (v27 != -1)
                          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32B5F78[v27])(&v97, &v102);
                        goto LABEL_237;
                      }
                      if (v25 == 10)
                      {
LABEL_53:
                        v26 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
                        if (*MEMORY[0x1E0CBF738])
                          *(_DWORD *)v26 += 2;
LABEL_67:
                        v101 = 0;
                        v100 = 0;
                        v30 = v108[0];
                        v108[0] = v26;
                        if (v30)
                        {
                          if (*(_DWORD *)v30 == 2)
                            WTF::StringImpl::destroy(v30, this);
                          else
                            *(_DWORD *)v30 -= 2;
                        }
                        if (v6 == 2)
                        {
                          HIBYTE(v112) = 1;
                          goto LABEL_214;
                        }
                        WTF::AtomStringImpl::addLiteral();
                        v31 = v97;
                        v33 = JSC::JSObject::get(v7, (JSC::JSGlobalObject *)a2, (unint64_t)v97);
                        if (v31)
                        {
                          if (*(_DWORD *)v31 == 2)
                            WTF::StringImpl::destroy(v31, v32);
                          else
                            *(_DWORD *)v31 -= 2;
                        }
                        if (*((_DWORD *)v115 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v115))
                        {
LABEL_253:
                          *(_DWORD *)(a3 + 80) = 1;
                          goto LABEL_232;
                        }
                        if (v33 == 10)
                        {
                          LOBYTE(v34) = 1;
                        }
                        else
                        {
                          v97 = a2[7];
                          v35 = v97;
                          v34 = WebCore::parseEnumeration<WebCore::CDMRequirement>((JSC::JSGlobalObject *)a2, v33);
                          if (*((_DWORD *)v35 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v35) & 1) != 0)
                            goto LABEL_253;
                          if (v34 <= 0xFFu)
                          {
                            JSC::throwTypeError();
                            goto LABEL_253;
                          }
                        }
                        HIBYTE(v112) = v34;
                        WTF::AtomStringImpl::addLiteral();
                        v36 = v97;
                        v38 = JSC::JSObject::get(v7, (JSC::JSGlobalObject *)a2, (unint64_t)v97);
                        if (v36)
                        {
                          if (*(_DWORD *)v36 == 2)
                            WTF::StringImpl::destroy(v36, v37);
                          else
                            *(_DWORD *)v36 -= 2;
                        }
                        if (*((_DWORD *)v115 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v115))
                          goto LABEL_253;
                        if (v38 == 10)
                        {
LABEL_209:
                          WTF::AtomStringImpl::addLiteral();
                          v79 = v97;
                          v80 = JSC::JSObject::get(v7, (JSC::JSGlobalObject *)a2, (unint64_t)v97);
                          if (v79)
                          {
                            if (*(_DWORD *)v79 == 2)
                              WTF::StringImpl::destroy(v79, this);
                            else
                              *(_DWORD *)v79 -= 2;
                          }
                          if (!*((_DWORD *)v115 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v115))
                          {
                            if (v80 != 10)
                            {
                              v116 = a2[7];
                              if ((v80 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v80 + 5) <= 0x16u)
                              {
                                WTF::StringImpl::createWithoutCopyingNonEmpty();
                                JSC::throwTypeError();
                                v92 = v117;
                                v117 = 0;
                                if (v92)
                                {
                                  if (*(_DWORD *)v92 == 2)
                                    WTF::StringImpl::destroy(v92, this);
                                  else
                                    *(_DWORD *)v92 -= 2;
                                }
                                v91 = 1;
                                v99 = 1;
                              }
                              else
                              {
                                WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::CDMMediaCapability>>>::convert((uint64_t)&v97, (JSC::JSGlobalObject *)a2, v80);
                                v91 = v99;
                                if (!v99)
                                {
                                  v81 = v97;
                                  v82 = v98;
                                  goto LABEL_215;
                                }
                              }
                              *(_DWORD *)(a3 + 80) = 1;
LABEL_230:
                              if (v91 != -1)
                                ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32B5F68[v91])(&v117, &v97);
                              goto LABEL_232;
                            }
LABEL_214:
                            v81 = 0;
                            v99 = 0;
                            v82 = 0;
LABEL_215:
                            v96 = v82;
                            v97 = 0;
                            v98 = 0;
                            v83 = v110[1];
                            if (HIDWORD(v111))
                            {
                              v84 = 24 * HIDWORD(v111);
                              v85 = (WTF::StringImpl **)((char *)v110[1] + 8);
                              do
                              {
                                v86 = *v85;
                                *v85 = 0;
                                if (v86)
                                {
                                  if (*(_DWORD *)v86 == 2)
                                    WTF::StringImpl::destroy(v86, this);
                                  else
                                    *(_DWORD *)v86 -= 2;
                                }
                                v87 = *(v85 - 1);
                                *(v85 - 1) = 0;
                                if (v87)
                                {
                                  if (*(_DWORD *)v87 == 2)
                                    WTF::StringImpl::destroy(v87, this);
                                  else
                                    *(_DWORD *)v87 -= 2;
                                }
                                v85 += 3;
                                v84 -= 24;
                              }
                              while (v84);
                              v83 = v110[1];
                            }
                            if (v83)
                            {
                              v110[1] = 0;
                              LODWORD(v111) = 0;
                              WTF::fastFree(v83, this);
                            }
                            v88 = *(_OWORD *)v108;
                            *(_OWORD *)v108 = 0u;
                            *(_OWORD *)a3 = v88;
                            *(WTF **)&v88 = v109[0];
                            v109[0] = 0;
                            *(_QWORD *)(a3 + 16) = v88;
                            v89 = v109[1];
                            v109[1] = 0;
                            *(_QWORD *)(a3 + 24) = v89;
                            *(WTF **)&v88 = v110[0];
                            v110[0] = 0;
                            *(_QWORD *)(a3 + 32) = v88;
                            v110[1] = 0;
                            *(_QWORD *)(a3 + 40) = v81;
                            v111 = 0;
                            *(_QWORD *)(a3 + 48) = v96;
                            *(_WORD *)(a3 + 56) = v112;
                            *(_OWORD *)(a3 + 64) = 0u;
                            v90 = v113;
                            v113 = 0;
                            *(_QWORD *)(a3 + 64) = v90;
                            *(_QWORD *)&v88 = v114;
                            v114 = 0;
                            *(_QWORD *)(a3 + 72) = v88;
                            *(_DWORD *)(a3 + 80) = 0;
                            v91 = v99;
                            goto LABEL_230;
                          }
                          goto LABEL_253;
                        }
                        v39 = a2[7];
                        v116 = v39;
                        if ((v38 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v38 + 5) <= 0x16u)
                        {
                          WTF::StringImpl::createWithoutCopyingNonEmpty();
                          JSC::throwTypeError();
                          v50 = v97;
                          v97 = 0;
                          if (v50)
                          {
                            if (*(_DWORD *)v50 == 2)
                              WTF::StringImpl::destroy(v50, this);
                            else
                              *(_DWORD *)v50 -= 2;
                          }
                          v51 = 1;
                          v99 = 1;
                          goto LABEL_118;
                        }
                        v117 = 0;
                        v118 = 0;
                        if (JSC::getIterationMode() == 2)
                        {
                          v41 = 0;
                          v42 = 0;
                          for (i = 1; ; ++i)
                          {
                            if ((*(_BYTE *)(v38 + 4) & 0xE) != 0)
                              v44 = *(_DWORD *)(*(_QWORD *)(v38 + 8) - 8);
                            else
                              v44 = 0;
                            if (i - 1 >= v44)
                              goto LABEL_147;
                            IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)v38, i - 1, 0);
                            if (!IndexQuickly)
                              IndexQuickly = JSC::JSObject::get((JSC::JSObject *)v38, (JSC::JSGlobalObject *)a2, i - 1);
                            if (*((_DWORD *)v39 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v39) & 1) != 0)
                            {
LABEL_147:
                              v57 = v42;
                              goto LABEL_199;
                            }
                            v97 = a2[7];
                            v46 = v97;
                            v47 = WebCore::parseEnumeration<WebCore::CDMSessionType>((JSC::JSGlobalObject *)a2, IndexQuickly);
                            if (!*((_DWORD *)v46 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v46) & 1) == 0)
                            {
                              if (v47 <= 0xFFu)
                              {
                                JSC::throwTypeError();
                              }
                              else
                              {
                                LOBYTE(v97) = v47;
                                if (v42 == (_DWORD)v118)
                                {
                                  v48 = WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v117, (WTF *)(v42 + 1), (unint64_t)&v97);
                                  v42 = HIDWORD(v118);
                                  v41 = v117;
                                  *((_BYTE *)v117 + HIDWORD(v118)) = *v48;
                                }
                                else
                                {
                                  *((_BYTE *)v41 + v42) = v47;
                                }
                                HIDWORD(v118) = ++v42;
                              }
                            }
                            if (*((_QWORD *)v39 + 2))
                              break;
                          }
                          v68 = JSC::JSArrayIterator::create();
                          if ((i & 0x80000000) != 0)
                            v69 = COERCE__INT64((double)i) + 0x2000000000000;
                          else
                            v69 = i | 0xFFFE000000000000;
                          *(_QWORD *)(v68 + 16) = v69;
LABEL_163:
                          JSC::iteratorClose();
                          v57 = v42;
                          goto LABEL_199;
                        }
                        v55 = JSC::iteratorForIterable((JSC *)a2, (JSC::JSGlobalObject *)v38, v40);
                        v56 = v54;
                        if (*((_DWORD *)v39 + 20))
                        {
                          v74 = v55;
                          v75 = v54;
                          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v39);
                          v56 = v75;
                          v55 = v74;
                          if ((hasExceptionsAfterHandlingTraps & 1) != 0)
                          {
                            v41 = 0;
                            v57 = 0;
LABEL_199:
                            if (!*((_DWORD *)v39 + 20))
                            {
                              v41 = v117;
LABEL_201:
                              v77 = v118;
                              v99 = 0;
LABEL_202:
                              v97 = 0;
                              v98 = 0;
                              v78 = v113;
                              if (v113)
                              {
                                v113 = 0;
                                LODWORD(v114) = 0;
                                WTF::fastFree(v78, this);
                                v51 = v99;
                              }
                              else
                              {
                                v51 = 0;
                              }
                              v113 = v41;
                              v52 = 1;
                              v114 = __PAIR64__(v57, v77);
LABEL_206:
                              if (v51 != -1)
                                ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32B5F58[v51])(&v117, &v97);
                              if ((v52 & 1) == 0)
                              {
LABEL_232:
                                v71 = v101;
                                if (v101 == -1)
                                  goto LABEL_234;
LABEL_233:
                                ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32B54C8[v71])(&v97, &v100);
                                goto LABEL_234;
                              }
                              goto LABEL_209;
                            }
                            if ((JSC::VM::hasExceptionsAfterHandlingTraps(v39) & 1) == 0)
                              goto LABEL_201;
                            v51 = 1;
                            v99 = 1;
                            if (v41)
                            {
                              v117 = 0;
                              LODWORD(v118) = 0;
                              WTF::fastFree(v41, this);
                              v51 = v99;
                              if (!v99)
                              {
                                v41 = v97;
                                v77 = v98;
                                v57 = HIDWORD(v98);
                                goto LABEL_202;
                              }
                            }
LABEL_118:
                            v52 = 0;
                            *(_DWORD *)(a3 + 80) = 1;
                            goto LABEL_206;
                          }
                        }
                        v41 = 0;
                        v57 = 0;
                        while (1)
                        {
                          v58 = v55;
                          v59 = v56;
                          v60 = JSC::iteratorStep();
                          if (*((_QWORD *)v39 + 2))
                            v61 = 1;
                          else
                            v61 = v60 == 6;
                          if (v61)
                            goto LABEL_199;
                          v62 = JSC::iteratorValue();
                          if (*((_DWORD *)v39 + 20))
                          {
                            if ((JSC::VM::hasExceptionsAfterHandlingTraps(v39) & 1) != 0)
                              goto LABEL_199;
                          }
                          v97 = a2[7];
                          v63 = v97;
                          v64 = WebCore::parseEnumeration<WebCore::CDMSessionType>((JSC::JSGlobalObject *)a2, v62);
                          if (!*((_DWORD *)v63 + 20)
                            || (v66 = v64, v67 = JSC::VM::hasExceptionsAfterHandlingTraps(v63),
                                           v64 = v66,
                                           (v67 & 1) == 0))
                          {
                            if (v64 > 0xFFu)
                            {
                              LOBYTE(v97) = v64;
                              if (v57 == (_DWORD)v118)
                              {
                                v65 = WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v117, (WTF *)(v57 + 1), (unint64_t)&v97);
                                v57 = HIDWORD(v118);
                                v41 = v117;
                                *((_BYTE *)v117 + HIDWORD(v118)) = *v65;
                              }
                              else
                              {
                                *((_BYTE *)v41 + v57) = v64;
                              }
                              v55 = v58;
                              v56 = v59;
                              HIDWORD(v118) = ++v57;
                              goto LABEL_139;
                            }
                            JSC::throwTypeError();
                          }
                          v55 = v58;
                          v56 = v59;
LABEL_139:
                          if (*((_QWORD *)v39 + 2))
                          {
                            v42 = v57;
                            goto LABEL_163;
                          }
                        }
                      }
                      v97 = (WTF::StringImpl *)v25;
                      v28 = a2[7];
                      if ((v25 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v25 + 5) != 2)
                      {
                        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v97, (JSC::JSGlobalObject *)a2);
LABEL_65:
                        if (*((_DWORD *)v28 + 20))
                        {
                          v70 = JSC::VM::hasExceptionsAfterHandlingTraps(v28);
                          v26 = v117;
                          if (v70)
                          {
                            v71 = 1;
                            v101 = 1;
                            v117 = 0;
                            if (v26)
                            {
                              if (*(_DWORD *)v26 == 2)
                                WTF::StringImpl::destroy(v26, this);
                              else
                                *(_DWORD *)v26 -= 2;
                            }
                            *(_DWORD *)(a3 + 80) = 1;
                            goto LABEL_233;
                          }
                        }
                        else
                        {
                          v26 = v117;
                        }
                        goto LABEL_67;
                      }
                      v29 = *(WTF::StringImpl **)(v25 + 8);
                      if ((v29 & 1) != 0)
                      {
                        v29 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v25, (JSC::JSGlobalObject *)a2);
                        if (!v29)
                          goto LABEL_64;
                      }
                      else if (!v29)
                      {
LABEL_64:
                        v117 = v29;
                        goto LABEL_65;
                      }
                      *(_DWORD *)v29 += 2;
                      goto LABEL_64;
                    }
                    v108[1] = 0;
                    LODWORD(v109[0]) = 0;
                    v95 = v23;
                    WTF::fastFree(v24, this);
                    v23 = v95;
                    goto LABEL_47;
                  }
                }
                *(_DWORD *)(a3 + 80) = 1;
                goto LABEL_235;
              }
LABEL_44:
              v22 = 0;
              v104 = 0;
              v23 = 0;
              goto LABEL_45;
            }
          }
LABEL_179:
          *(_DWORD *)(a3 + 80) = 1;
LABEL_237:
          v20 = v107;
LABEL_238:
          if (v20 != -1)
            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32B5F68[v20])(&v102, &v105);
          goto LABEL_240;
        }
      }
      *(_DWORD *)(a3 + 80) = 1;
      goto LABEL_238;
    }
LABEL_10:
    v10 = 0;
    v107 = 0;
    v11 = 0;
    goto LABEL_11;
  }
  *(_DWORD *)(a3 + 80) = 1;
LABEL_240:
  WebCore::CDMKeySystemConfiguration::~CDMKeySystemConfiguration((WebCore::CDMKeySystemConfiguration *)v108, this);
}

WebCore::MediaKeys *WebCore::JSMediaKeys::destroy(WebCore::JSMediaKeys *this, JSC::JSCell *a2)
{
  WebCore::MediaKeys *result;
  WTF *v4;
  void *v5;

  result = (WebCore::MediaKeys *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*((_DWORD *)result + 4) == 1)
    {
      WebCore::MediaKeys::~MediaKeys(result, a2);
      return (WebCore::MediaKeys *)WTF::fastFree(v4, v5);
    }
    else
    {
      --*((_DWORD *)result + 4);
    }
  }
  return result;
}

uint64_t WebCore::JSMediaKeys::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSMediaKeysPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSMediaKeysPrototype::create(WebCore::JSMediaKeysPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSMediaKeys::s_info, &WebCore::JSMediaKeysPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaKeys>,(WebCore::DOMConstructorID)79>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 632);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaKeys>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSMediaKeys::s_info + ~((_QWORD)&WebCore::JSMediaKeys::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaKeys::s_info + ~((_QWORD)&WebCore::JSMediaKeys::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSMediaKeys::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSMediaKeys::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSMediaKeysPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSMediaKeysPrototype::create((WebCore::JSMediaKeysPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSMediaKeys::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSMediaKeys::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 632) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsMediaKeysConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSMediaKeysPrototype::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaKeys>,(WebCore::DOMConstructorID)79>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSMediaKeysOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSMediaKeysOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WebCore::MediaKeys *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore::MediaKeys *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WTF *v24;
  void *v25;

  v3 = *(WebCore::MediaKeys **)(*(_QWORD *)a2 + 24);
  ++*((_DWORD *)v3 + 4);
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WebCore::MediaKeys **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WebCore::MediaKeys **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*((_DWORD *)v3 + 4) == 1)
  {
    WebCore::MediaKeys::~MediaKeys(v3, a2);
    WTF::fastFree(v24, v25);
  }
  else
  {
    --*((_DWORD *)v3 + 4);
  }
}

unint64_t WebCore::createWrapper<WebCore::MediaKeys,WebCore::MediaKeys>(uint64_t a1, WTF **a2)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  void *v34;
  int v35;
  unint64_t SlowCase;
  WTF *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *Allocator;
  unint64_t v43;
  _QWORD *v44;
  WTF *v45;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSMediaKeys::s_info + ~((_QWORD)&WebCore::JSMediaKeys::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaKeys::s_info + ~((_QWORD)&WebCore::JSMediaKeys::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSMediaKeys::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSMediaKeys::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSMediaKeysPrototype::createStructure(v14, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSMediaKeysPrototype::create((WebCore::JSMediaKeysPrototype *)v14, Structure, v16, v17);
  v19 = WebCore::JSMediaKeys::createStructure(v14, a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSMediaKeys::s_info);
LABEL_8:
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(v20 + 41456);
  v22 = *(_QWORD *)(v21 + 23536);
  v23 = *(_QWORD **)(v22 + 640);
  if (v23)
    goto LABEL_28;
  v24 = *(_QWORD *)(v21 + 22648);
  if (__ldaxr((unsigned __int8 *)v24))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v24))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v24);
LABEL_13:
  v26 = *(_QWORD *)(v24 + 2824);
  if (!*(_QWORD *)(v26 + 640))
  {
    v27 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v45, "IsoSpace T");
    v44 = 0;
    MEMORY[0x19AEA3204](v27, &v45, v20 + 192, v20 + 1872, 32, 8, &v44);
    v29 = (uint64_t)v44;
    v44 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v45;
    v45 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
        WTF::fastFree(v30, v28);
      else
        --*(_DWORD *)v30;
    }
    v31 = *(_QWORD *)(v26 + 640);
    *(_QWORD *)(v26 + 640) = v27;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v32 = *(_QWORD *)(v22 + 640);
  *(_QWORD *)(v22 + 640) = v23;
  if (v32)
  {
    v33 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v33, v34);
  }
  v35 = __ldxr((unsigned __int8 *)v24);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v24))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_28:
  SlowCase = v23[3];
  if (SlowCase < v23[4])
  {
LABEL_29:
    v23[3] = SlowCase + 32;
    goto LABEL_30;
  }
  SlowCase = v23[5];
  if ((SlowCase & 1) == 0)
  {
    v43 = *(_QWORD *)(SlowCase + 8) ^ v23[6];
    v23[4] = SlowCase + HIDWORD(v43);
    v23[5] = SlowCase + (int)v43;
    goto LABEL_29;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  v37 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v37;
  if (*(_BYTE *)(v20 + 755))
    __dmb(0xAu);
  v38 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE335FC0 & 1) == 0)
  {
    qword_1EE335FB8 = (uint64_t)&off_1E32B3530;
    byte_1EE335FC0 = 1;
  }
  v45 = v4;
  if ((SlowCase & 8) != 0)
    v39 = (SlowCase - 112) | 1;
  else
    v39 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v39 & 1) != 0)
    v40 = v39 + 47;
  else
    v40 = *(_QWORD *)v39 + 32;
  Allocator = *(_QWORD **)(v40 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v40 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE335FB8;
  Allocator[2] = v38;
  v44 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v38 + 32), (uint64_t *)&v45, (uint64_t *)&v44);
  if (v44)
    v44[1] = 3;
  return SlowCase;
}

uint64_t WebCore::wrap<WebCore::MediaKeys>(uint64_t a1, uint64_t a2, WebCore::MediaKeys *a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WebCore::MediaKeys *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t result;
  WTF *v15;
  void *v16;
  WebCore::MediaKeys *v17;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(WebCore::MediaKeys **)(v3 + 16 * v8);
    if (v9 == a3)
    {
LABEL_6:
      v11 = *(_QWORD *)(v3 + 16 * v8 + 8);
      if (v11)
      {
        if ((*(_BYTE *)(v11 + 8) & 3) == 0)
        {
          v12 = *(_QWORD *)v11;
          if (*(_QWORD *)v11)
            return v12;
        }
      }
    }
    else
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(WebCore::MediaKeys **)(v3 + 16 * v8);
        ++v10;
        if (v9 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 4);
  v17 = a3;
  if (*(void (***)(WebCore::MediaKeys *__hidden))a3 == off_1E3203928)
  {
    v12 = WebCore::createWrapper<WebCore::MediaKeys,WebCore::MediaKeys>(a2, &v17);
    if (v17)
    {
      if (*((_DWORD *)v17 + 4) == 1)
      {
        WebCore::MediaKeys::~MediaKeys(v17, v13);
        WTF::fastFree(v15, v16);
      }
      else
      {
        --*((_DWORD *)v17 + 4);
      }
    }
    return v12;
  }
  result = 285;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSMediaKeys::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSMediaKeys::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSMediaKeys::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24);
  else
    return 0;
}

uint64_t WebCore::convertEnumerationToJS<WebCore::CDMRequirement>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  {
    WebCore::convertEnumerationToString(WebCore::CDMRequirement)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::CDMRequirement)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::CDMRequirement)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CDMRequirement)::$_0::operator() const(void)::impl;
    unk_1EE2F47D0 = &WebCore::convertEnumerationToString(WebCore::CDMRequirement)::$_1::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::CDMRequirement)::$_2::operator() const(void)::impl += 2;
    qword_1EE2F47D8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CDMRequirement)::$_2::operator() const(void)::impl;
  }
  v3 = WebCore::convertEnumerationToString(WebCore::CDMRequirement)::values[a2];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::parseEnumerationFromString<WebCore::CDMRequirement>(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;
  const char *v3;
  int v4;
  uint64_t v5;
  int v7;
  uint64_t v9;
  BOOL v10;
  char **v11;
  int v12;
  uint16x8_t v13;
  uint16x8_t v14;
  BOOL v18;

  v1 = *a1;
  if (!*a1)
    goto LABEL_39;
  v2 = *(unsigned int *)(v1 + 16);
  v3 = *(const char **)(v1 + 8);
  v4 = *(_DWORD *)(v1 + 4);
  v5 = (v2 >> 2) & 1;
  if (v3 == "not-allowed" || v4 != 11)
  {
    if (v3 != "not-allowed" || v4 != 11)
    {
      v9 = v5 << 32;
      v10 = v4 != 8;
      if (v3 == "optional" || v4 != 8)
      {
        v18 = v3 == "optional" && v4 == 8;
        v12 = v4;
        if (v18)
          goto LABEL_23;
      }
      else if ((_DWORD)v5)
      {
        if (*v3 == 111 && *(_DWORD *)(v3 + 1) == 1869182064 && *((_DWORD *)v3 + 1) == 1818324591)
        {
LABEL_23:
          v11 = &off_1E32B0C98;
LABEL_37:
          LODWORD(v1) = *((unsigned __int8 *)v11 + 16);
          v7 = 1;
          return v1 | (v7 << 8);
        }
        v10 = 0;
        v12 = 8;
        v9 = 0x100000000;
      }
      else
      {
        if (*(_WORD *)v3 == 111
          && *(_QWORD *)(v3 + 2) == 0x6F006900740070
          && *((_QWORD *)v3 + 1) == 0x6C0061006E006FLL)
        {
          goto LABEL_23;
        }
        v10 = 0;
        v12 = 8;
      }
      if (v3 == "required" || v10)
      {
        if (v4 == 8 && v3 == "required")
          goto LABEL_32;
      }
      else
      {
        if (!v12)
        {
LABEL_32:
          v11 = &off_1E32B0CB0;
          goto LABEL_37;
        }
        if (v9)
        {
          if (*v3 == 114 && *(_DWORD *)(v3 + 1) == 1769304421 && *((_DWORD *)v3 + 1) == 1684370025)
            goto LABEL_32;
        }
        else if (*(_WORD *)v3 == 114
               && *((_QWORD *)v3 + 1) == 0x64006500720069
               && *(_QWORD *)(v3 + 2) == 0x69007500710065)
        {
          goto LABEL_32;
        }
      }
      goto LABEL_11;
    }
LABEL_36:
    v11 = &WebCore::parseEnumerationFromString<WebCore::CDMRequirement>(WTF::String const&)::mappings;
    goto LABEL_37;
  }
  if (!(_DWORD)v5)
  {
    if (*(_WORD *)v3 != 110)
      goto LABEL_11;
    v13 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 2), (int16x8_t)xmmword_1968C02D0);
    v13.i16[0] = vminvq_u16(v13);
    LODWORD(v1) = v13.i32[0];
    if (v13.i32[0])
    {
      v14 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 6), (int16x8_t)xmmword_1968C02E0);
      v14.i16[0] = vminvq_u16(v14);
      v7 = v14.i32[0];
      if (!v14.i32[0])
        goto LABEL_12;
      goto LABEL_36;
    }
LABEL_39:
    v7 = 0;
    return v1 | (v7 << 8);
  }
  if (*v3 == 110 && *(_QWORD *)(v3 + 1) == 0x776F6C6C612D746FLL && *(_QWORD *)(v3 + 3) == 0x6465776F6C6C612DLL)
    goto LABEL_36;
LABEL_11:
  v7 = 0;
LABEL_12:
  LODWORD(v1) = 0;
  return v1 | (v7 << 8);
}

uint64_t WebCore::parseEnumeration<WebCore::CDMRequirement>(JSC::JSGlobalObject *a1, unint64_t this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v6;
  unint64_t v7;

  v7 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v2 = *(WTF::StringImpl **)(this + 8);
    if ((v2 & 1) != 0)
    {
      v2 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
      if (!v2)
        goto LABEL_6;
    }
    else if (!v2)
    {
LABEL_6:
      v6 = v2;
      goto LABEL_7;
    }
    *(_DWORD *)v2 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v7, a1);
  v2 = v6;
LABEL_7:
  v4 = WebCore::parseEnumerationFromString<WebCore::CDMRequirement>((uint64_t *)&v6);
  v6 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v3);
    else
      *(_DWORD *)v2 -= 2;
  }
  return v4;
}

const char *WebCore::expectedEnumerationValues<WebCore::CDMRequirement>()
{
  return "\"required\", \"optional\", \"not-allowed\"";
}

BOOL WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaList>::initializeProperties(uint64_t a1, uint64_t a2, JSC::JSCell **a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v13;

  v6 = a2 + 41952;
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1768), 0xFFFE000000000000, 6);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = JSC::jsNontrivialString(a2, &v13);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  *(_QWORD *)(a1 + 32) = v8;
  if (a1 && v8 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 192), (const JSCell *)a1);
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)v6 + 1968), v8, 6);
  v10 = *(_QWORD *)(*(_QWORD *)v6 + 2160);
  v11 = WebCore::getDOMStructure<WebCore::JSMediaList>((WebCore::JSMediaList *)a2, a3);
  return JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, v10, *(_QWORD *)(v11 + 48), 14);
}

WTF::StringImpl *WebCore::JSMediaListPrototype::finishCreation(WebCore::JSMediaListPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t Direct;
  WTF::StringImpl *v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<7u>(a2, (uint64_t)&WebCore::JSMediaList::s_info, &WebCore::JSMediaListPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2712);
  v5 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 672);
  v6 = (_DWORD *)MEMORY[0x1E0CBEBF0];
  *MEMORY[0x1E0CBEBF0] += 2;
  Direct = JSC::JSObject::getDirect(v5, a2, (unint64_t)v6);
  JSC::JSObject::putDirect((unsigned __int8 *)this, a2, v4, Direct, 4);
  if (*v6 == 2)
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEBF0], v8);
  else
    *v6 -= 2;
  v9 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v10 = JSC::jsNontrivialString((uint64_t)a2, &v13);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v9, v10, 6);
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::JSMediaList::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      if (*((_BYTE *)v2 + 40))
        WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v2 + 24, a2);
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSMediaList::put(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  char **v11;
  BOOL v12;
  WebCore::JSDOMGlobalObject *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  JSC::VM *v21;
  _BYTE *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t result;
  unsigned __int16 *v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned int v32;
  int OwnProperty;
  int v34;
  int v35;
  char hasExceptionsAfterHandlingTraps;
  _BYTE v37[16];
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v8 = *(_QWORD *)(a5 + 8);
  if (v8 != a1)
    return JSC::JSObject::put();
  v9 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v10 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v11 = (char **)(16 * v9);
  if ((_DWORD)v9)
    v12 = v11 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v12 = 1;
  if (!v12)
  {
    do
    {
      v11 = (char **)v11[2];
      v10 = v11 != 0;
    }
    while (v11 != &WebCore::JSDOMGlobalObject::s_info && v11 != 0);
  }
  if (v10)
    v14 = (WebCore::JSDOMGlobalObject *)a2;
  else
    v14 = 0;
  v15 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v14);
  if (v15)
  {
    v16 = v15;
    if (!*(_BYTE *)(v15 + 274))
    {
      v17 = *(_BYTE **)(v15 + 496);
      if (!v17)
        v17 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v16 - 192));
      if (*(_QWORD *)v17)
      {
        v18 = *(_QWORD *)(*(_QWORD *)v17 + 8);
        if (v18)
        {
          v19 = *(_QWORD *)(v18 + 680);
          if (*(_BYTE *)(v19 + 243))
          {
            if (!*(_BYTE *)(v19 + 242))
              goto LABEL_23;
          }
          else if ((*(_QWORD *)(v19 + 688) & 0x80000) == 0)
          {
            goto LABEL_23;
          }
          if (v17[65])
            return JSC::JSObject::put();
        }
      }
    }
  }
LABEL_23:
  if (!a3)
    return JSC::JSObject::put();
  v20 = *(_DWORD *)(a3 + 16);
  if ((v20 & 0x20) != 0)
    return JSC::JSObject::put();
  v21 = *(JSC::VM **)(a2 + 56);
  v22 = *(_BYTE **)(a3 + 8);
  v23 = *(unsigned int *)(a3 + 4);
  if ((v20 & 4) != 0)
  {
    if (!(_DWORD)v23)
      return JSC::JSObject::put();
    v24 = *v22 - 48;
    if (v24 > 9 || v23 >= 2 && *v22 == 48)
      return JSC::JSObject::put();
    v30 = v22 + 1;
    v31 = v23 - 1;
    while (v31)
    {
      if (v24 <= 0x19999999)
      {
        v32 = *v30 - 48;
        if (v32 <= 9)
        {
          v29 = __CFADD__(v32, 10 * v24);
          v24 = v32 + 10 * v24;
          ++v30;
          --v31;
          if (!v29)
            continue;
        }
      }
      return JSC::JSObject::put();
    }
  }
  else
  {
    if (!(_DWORD)v23)
      return JSC::JSObject::put();
    v24 = *(unsigned __int16 *)v22 - 48;
    if (v24 > 9 || v23 >= 2 && *(_WORD *)v22 == 48)
      return JSC::JSObject::put();
    v26 = (unsigned __int16 *)(v22 + 2);
    v27 = v23 - 1;
    while (v27)
    {
      if (v24 <= 0x19999999)
      {
        v28 = *v26 - 48;
        if (v28 <= 9)
        {
          v29 = __CFADD__(v28, 10 * v24);
          v24 = v28 + 10 * v24;
          ++v26;
          --v27;
          if (!v29)
            continue;
        }
      }
      return JSC::JSObject::put();
    }
  }
  if (v24 == -1)
    return JSC::JSObject::put();
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 14;
  v38 = 0xFFFFFFFF00000000;
  v40 = 0;
  v41 = 0;
  v39 = v8;
  v42 = 0x20000;
  v43 = 0;
  LOBYTE(v44) = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  OwnProperty = WebCore::JSMediaList::legacyPlatformObjectGetOwnProperty(a1, a2, a3, (uint64_t)v37);
  if (*((_DWORD *)v21 + 20)
    && (v35 = OwnProperty,
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v21),
        OwnProperty = v35,
        (hasExceptionsAfterHandlingTraps & 1) != 0)
    || OwnProperty
    && (JSC::PropertyDescriptor::setPropertySlot(), *((_DWORD *)v21 + 20))
    && (JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) != 0)
  {
    result = 0;
  }
  else
  {
    result = JSC::ordinarySetWithOwnDescriptor();
  }
  if (v45)
  {
    v34 = *(_DWORD *)(v44 + 4);
    if (!v34)
    {
      __break(0xC471u);
      JUMPOUT(0x194D15754);
    }
    *(_DWORD *)(v44 + 4) = v34 - 1;
  }
  return result;
}

uint64_t WebCore::JSMediaList::putByIndex(JSC::JSObject *a1, JSC::JSCell *a2, JSC::JSGlobalObject *a3, uint64_t a4, objc_class *a5)
{
  uint64_t v10;
  _BOOL4 v11;
  char **v12;
  BOOL v13;
  WebCore::JSDOMGlobalObject *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  JSValue v24;
  WTF::StringImpl *v25;

  v10 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v11 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v12 = (char **)(16 * v10);
  if ((_DWORD)v10)
    v13 = v12 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v13 = 1;
  if (!v13)
  {
    do
    {
      v12 = (char **)v12[2];
      v11 = v12 != 0;
    }
    while (v12 != &WebCore::JSDOMGlobalObject::s_info && v12 != 0);
  }
  if (v11)
    v15 = a2;
  else
    v15 = 0;
  v16 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v15);
  if (!v16)
    goto LABEL_22;
  v17 = v16;
  if (*(_BYTE *)(v16 + 274))
    goto LABEL_22;
  v18 = *(_BYTE **)(v16 + 496);
  if (!v18)
    v18 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v17 - 192));
  if (!*(_QWORD *)v18)
    goto LABEL_22;
  v19 = *(_QWORD *)(*(_QWORD *)v18 + 8);
  if (!v19)
    goto LABEL_22;
  v20 = *(_QWORD *)(v19 + 680);
  if (*(_BYTE *)(v20 + 243))
  {
    if (!*(_BYTE *)(v20 + 242))
      goto LABEL_22;
  }
  else if ((*(_QWORD *)(v20 + 688) & 0x80000) == 0)
  {
    goto LABEL_22;
  }
  if (v18[65])
  {
    v24.super.isa = a5;
    return JSC::JSObject::putByIndex(a1, a2, a3, a4, v24);
  }
LABEL_22:
  JSC::Identifier::from();
  v22 = JSC::ordinarySetSlow();
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v21);
    else
      *(_DWORD *)v25 -= 2;
  }
  return v22;
}

uint64_t WebCore::JSMediaList::deleteProperty(uint64_t a1, WebCore::JSDOMGlobalObject *a2, uint64_t a3)
{
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  WebCore::JSDOMGlobalObject *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned __int16 *v27;
  uint64_t v28;
  unsigned int v29;
  BOOL v30;
  _QWORD *v31;
  uint64_t v32;
  unsigned int v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned int v40;

  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSDOMGlobalObject::s_info && v6 != 0);
  }
  v9 = *(_QWORD *)(a1 + 24);
  if (v5)
    v10 = a2;
  else
    v10 = 0;
  v11 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v10);
  if (v11)
  {
    v12 = v11;
    if (!*(_BYTE *)(v11 + 274))
    {
      v13 = *(_BYTE **)(v11 + 496);
      if (!v13)
        v13 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v12 - 192));
      if (*(_QWORD *)v13)
      {
        v14 = *(_QWORD *)(*(_QWORD *)v13 + 8);
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 680);
          if (*(_BYTE *)(v15 + 243))
          {
            if (*(_BYTE *)(v15 + 242))
            {
LABEL_21:
              if (v13[65])
                return JSC::JSObject::deleteProperty();
            }
          }
          else if ((*(_QWORD *)(v15 + 688) & 0x80000) != 0)
          {
            goto LABEL_21;
          }
        }
      }
    }
  }
  if (a3)
  {
    v16 = *(_DWORD *)(a3 + 16);
    if ((v16 & 0x20) == 0)
    {
      v17 = *(_BYTE **)(a3 + 8);
      v18 = *(unsigned int *)(a3 + 4);
      if ((v16 & 4) != 0)
      {
        if (!(_DWORD)v18 || (v34 = *v17 - 48, v34 > 9) || v18 >= 2 && *v17 == 48)
        {
LABEL_58:
          v35 = 0;
          v36 = 0;
          v37 = 0;
        }
        else
        {
          v38 = v18 - 1;
          v39 = v17 + 1;
          while (v38)
          {
            if (v34 > 0x19999999)
              goto LABEL_58;
            v40 = *v39 - 48;
            if (v40 > 9)
              goto LABEL_58;
            v35 = 0;
            v36 = 0;
            v37 = 0;
            v30 = __CFADD__(v40, 10 * v34);
            v34 = v40 + 10 * v34;
            --v38;
            ++v39;
            if (v30)
              goto LABEL_59;
          }
          v35 = 0x100000000;
          if (v34 == -1)
          {
            v35 = 0;
            v36 = 0;
          }
          else
          {
            v36 = v34;
          }
          if (v34 == -1)
            v37 = 0;
          else
            v37 = v34 & 0xFFFFFF00;
        }
LABEL_59:
        v23 = v37 | v36;
        if ((v35 & 0x100000000) != 0)
        {
LABEL_31:
          if (*(_BYTE *)(v9 + 40))
          {
            v24 = v9 + 24;
            return *(_DWORD *)(v24 + 12) <= v23;
          }
          v25 = *(_QWORD **)(v9 + 16);
          if (v25)
          {
            if ((*(unsigned int (**)(_QWORD))(*v25 + 16))(*(_QWORD *)(v9 + 16)) == 3)
            {
              v26 = v25[4];
LABEL_48:
              v24 = v26 + 48;
              return *(_DWORD *)(v24 + 12) <= v23;
            }
            v31 = *(_QWORD **)(v9 + 16);
            if (v31 && (*(unsigned int (**)(_QWORD))(*v31 + 16))(*(_QWORD *)(v9 + 16)) == 4)
            {
              v32 = v31[3];
              if ((*(_BYTE *)(v32 + 4) & 0x1F) != 4)
              {
                __break(0xC471u);
                JUMPOUT(0x194D15B24);
              }
              v24 = v32 + 24;
              return *(_DWORD *)(v24 + 12) <= v23;
            }
          }
          v26 = *(_QWORD *)(v9 + 8);
          goto LABEL_48;
        }
      }
      else
      {
        if ((_DWORD)v18
          && (v19 = *(unsigned __int16 *)v17 - 48, v19 <= 9)
          && (v18 < 2 || *(_WORD *)v17 != 48))
        {
          v27 = (unsigned __int16 *)(v17 + 2);
          v28 = v18 - 1;
          while (v28)
          {
            if (v19 <= 0x19999999)
            {
              v29 = *v27 - 48;
              if (v29 <= 9)
              {
                v30 = __CFADD__(v29, 10 * v19);
                v19 = v29 + 10 * v19;
                ++v27;
                --v28;
                if (!v30)
                  continue;
              }
            }
            goto LABEL_29;
          }
          v7 = v19 == -1;
          v22 = v19 & 0xFFFFFF00;
          v21 = v19;
          v20 = 0x100000000;
          if (v7)
          {
            v20 = 0;
            v21 = 0;
            v22 = 0;
          }
        }
        else
        {
LABEL_29:
          v20 = 0;
          v21 = 0;
          v22 = 0;
        }
        v23 = v22 | v21;
        if ((v20 & 0x100000000) != 0)
          goto LABEL_31;
      }
    }
  }
  return JSC::JSObject::deleteProperty();
}

uint64_t WebCore::JSMediaList::deletePropertyByIndex(WebCore::JSMediaList *this, JSC::JSCell *a2, JSC::JSGlobalObject *a3)
{
  uint64_t v6;
  _BOOL4 v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WebCore::JSDOMGlobalObject *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t result;

  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSDOMGlobalObject::s_info && v8 != 0);
  }
  v11 = *((_QWORD *)this + 3);
  if (v7)
    v12 = a2;
  else
    v12 = 0;
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v12);
  if (v13)
  {
    v14 = v13;
    if (!*(_BYTE *)(v13 + 274))
    {
      v15 = *(_BYTE **)(v13 + 496);
      if (!v15)
        v15 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v14 - 192));
      if (*(_QWORD *)v15)
      {
        v16 = *(_QWORD *)(*(_QWORD *)v15 + 8);
        if (v16)
        {
          v17 = *(_QWORD *)(v16 + 680);
          if (*(_BYTE *)(v17 + 243))
          {
            if (!*(_BYTE *)(v17 + 242))
              goto LABEL_22;
          }
          else if ((*(_QWORD *)(v17 + 688) & 0x80000) == 0)
          {
            goto LABEL_22;
          }
          if (v15[65])
            return JSC::JSObject::deletePropertyByIndex(this, a2, a3);
        }
      }
    }
  }
LABEL_22:
  if (*(_BYTE *)(v11 + 40))
  {
    v18 = v11 + 24;
    return *(_DWORD *)(v18 + 12) <= a3;
  }
  v19 = *(_QWORD **)(v11 + 16);
  if (!v19)
    goto LABEL_31;
  if ((*(unsigned int (**)(_QWORD))(*v19 + 16))(*(_QWORD *)(v11 + 16)) == 3)
  {
    v20 = v19[4];
LABEL_32:
    v18 = v20 + 48;
    return *(_DWORD *)(v18 + 12) <= a3;
  }
  v21 = *(_QWORD **)(v11 + 16);
  if (!v21 || (*(unsigned int (**)(_QWORD))(*v21 + 16))(*(_QWORD *)(v11 + 16)) != 4)
  {
LABEL_31:
    v20 = *(_QWORD *)(v11 + 8);
    goto LABEL_32;
  }
  v22 = v21[3];
  if ((*(_BYTE *)(v22 + 4) & 0x1F) == 4)
  {
    v18 = v22 + 24;
    return *(_DWORD *)(v18 + 12) <= a3;
  }
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSMediaList::getOwnPropertySlotByIndex(WebCore::JSMediaList *this, JSC::JSObject *a2, const Condition *a3, uint64_t a4, JSC::PropertySlot *a5)
{
  JSC::VM *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v16;
  unsigned int v17;
  unsigned int v18;
  WTF::StringImpl *v19;

  if ((_DWORD)a3 == -1)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  v8 = (JSC::VM *)*((_QWORD *)a2 + 7);
  WebCore::MediaList::item(*((_QWORD *)this + 3), a3, a3, &v19);
  v10 = v19;
  if (!v19)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  v11 = *((_QWORD *)a2 + 7);
  v12 = *((_DWORD *)v19 + 1);
  if (v12)
  {
    if (v12 != 1)
    {
LABEL_5:
      v13 = *(_QWORD *)(v11 + 64760);
      if (!v13 || v19 != *(WTF::StringImpl **)(v13 + 8))
        v13 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_8;
    }
    v16 = (unsigned __int8 *)*((_QWORD *)v19 + 1);
    if ((*((_BYTE *)v19 + 16) & 4) != 0)
    {
      v17 = *v16;
    }
    else
    {
      v18 = *(unsigned __int16 *)v16;
      if (v18 > 0xFF)
        goto LABEL_5;
      v17 = v18;
    }
    v13 = *(_QWORD *)(v11 + 8 * v17 + 42216);
  }
  else
  {
    v13 = *(_QWORD *)(v11 + 41968);
  }
LABEL_8:
  if (*((_DWORD *)v8 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v8) & 1) != 0)
  {
    v14 = 0;
  }
  else
  {
    *(_QWORD *)a4 = v13;
    *(_DWORD *)(a4 + 16) = 2;
    *(_QWORD *)(a4 + 32) = this;
    v14 = 1;
    *(_BYTE *)(a4 + 49) = 1;
  }
  if (*(_DWORD *)v10 == 2)
    WTF::StringImpl::destroy(v10, v9);
  else
    *(_DWORD *)v10 -= 2;
  return v14;
}

uint64_t WebCore::JSMediaList::getOwnPropertyNames(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl **v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  uint64_t result;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50[2];
  char v51;
  WTF::StringImpl *v52;

  v4 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v4 + 40))
  {
    v5 = v4 + 24;
    goto LABEL_12;
  }
  v6 = *(_QWORD **)(v4 + 16);
  if (!v6)
    goto LABEL_10;
  if ((*(unsigned int (**)(_QWORD))(*v6 + 16))(*(_QWORD *)(v4 + 16)) == 3)
  {
    v7 = v6[4];
LABEL_11:
    v5 = v7 + 48;
    goto LABEL_12;
  }
  v8 = *(_QWORD **)(v4 + 16);
  if (!v8 || (*(unsigned int (**)(_QWORD))(*v8 + 16))(*(_QWORD *)(v4 + 16)) != 4)
  {
LABEL_10:
    v7 = *(_QWORD *)(v4 + 8);
    goto LABEL_11;
  }
  v9 = v8[3];
  if ((*(_BYTE *)(v9 + 4) & 0x1F) != 4)
  {
    result = 96;
    __break(0xC471u);
    return result;
  }
  v5 = v9 + 24;
LABEL_12:
  v10 = *(_DWORD *)(v5 + 12);
  if (v10)
  {
    v11 = 0;
    v12 = a3 + 1;
    while (1)
    {
      JSC::Identifier::from();
      v14 = v49;
      v52 = v49;
      v15 = *((_DWORD *)v49 + 4);
      if ((v15 & 0x20) != 0)
      {
        if ((a3[3] & 1) == 0 || *((_BYTE *)a3 + 25) && (*((_BYTE *)v49 + 36) & 4) != 0)
          goto LABEL_71;
      }
      else if ((a3[3] & 2) == 0)
      {
        goto LABEL_71;
      }
      v16 = *a3;
      v17 = *(unsigned int *)(*a3 + 20);
      if (v17 <= 0x13)
      {
        if ((_DWORD)v17)
        {
          v18 = *(WTF::StringImpl ***)(v16 + 8);
          while (*v18 != v49)
          {
            ++v18;
            if (!--v17)
              goto LABEL_30;
          }
          goto LABEL_71;
        }
LABEL_30:
        if ((v15 & 0x20) != 0)
        {
          v39 = *(_DWORD *)v14 + 2;
        }
        else
        {
          if ((v15 & 0x10) != 0)
          {
            *(_DWORD *)v14 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase();
            v14 = v50[0];
          }
          v39 = *(_DWORD *)v14;
          *(_DWORD *)v14 += 2;
          if (!v39)
          {
            WTF::StringImpl::destroy(v14, v13);
LABEL_65:
            v40 = (uint64_t *)(v16 + 8);
            v50[0] = v14;
            v41 = *(unsigned int *)(v16 + 20);
            if ((_DWORD)v41 == *(_DWORD *)(v16 + 16))
            {
              v42 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v40, v41 + 1, (unint64_t)v50);
              v41 = *(unsigned int *)(v16 + 20);
              v43 = *(_QWORD *)(v16 + 8);
              v44 = *v42;
              *v42 = 0;
              *(_QWORD *)(v43 + 8 * v41) = v44;
            }
            else
            {
              v45 = *v40;
              v50[0] = 0;
              *(_QWORD *)(v45 + 8 * v41) = v14;
            }
            *(_DWORD *)(v16 + 20) = v41 + 1;
            v46 = v50[0];
            v50[0] = 0;
            if (v46)
            {
              if (*(_DWORD *)v46 == 2)
                WTF::StringImpl::destroy(v46, v13);
              else
                *(_DWORD *)v46 -= 2;
            }
            goto LABEL_71;
          }
        }
        *(_DWORD *)v14 = v39;
        goto LABEL_65;
      }
      if (!*v12 || !*(_DWORD *)(*v12 - 12))
        break;
LABEL_28:
      WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(a3 + 1, (uint64_t *)&v52, (uint64_t)v50);
      if (v51)
      {
        v14 = v52;
        v16 = *a3;
        v15 = *((_DWORD *)v52 + 4);
        goto LABEL_30;
      }
LABEL_71:
      v47 = v49;
      v49 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
          WTF::StringImpl::destroy(v47, v13);
        else
          *(_DWORD *)v47 -= 2;
      }
      if (++v11 == v10)
        return JSC::JSObject::getOwnPropertyNames();
    }
    v19 = *(uint64_t **)(v16 + 8);
    v20 = &v19[v17];
    while (1)
    {
      v21 = *v19;
      v22 = *v12;
      if (*v12
        || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, 8u, 0), (v22 = *v12) != 0))
      {
        v23 = *(_DWORD *)(v22 - 8);
      }
      else
      {
        v23 = 0;
      }
      v24 = (~(v21 << 32) + v21) ^ ((unint64_t)(~(v21 << 32) + v21) >> 22);
      v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
      v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
      v27 = v23 & ((v26 >> 31) ^ v26);
      v28 = (uint64_t *)(v22 + 8 * v27);
      v29 = *v28;
      if (*v28)
      {
        v30 = 0;
        v31 = 1;
        while (v29 != v21)
        {
          if (v29 == -1)
            v30 = v28;
          v27 = (v27 + v31) & v23;
          v28 = (uint64_t *)(v22 + 8 * v27);
          v29 = *v28;
          ++v31;
          if (!*v28)
          {
            if (v30)
            {
              *v30 = 0;
              --*(_DWORD *)(*v12 - 16);
              v28 = v30;
            }
            goto LABEL_45;
          }
        }
        goto LABEL_58;
      }
LABEL_45:
      *v28 = v21;
      v32 = *v12;
      v33 = *v12 ? *(_DWORD *)(v32 - 12) + 1 : 1;
      *(_DWORD *)(v32 - 12) = v33;
      v34 = *v12;
      v35 = *v12 ? *(_DWORD *)(v34 - 12) : 0;
      v36 = (*(_DWORD *)(v34 - 16) + v35);
      v37 = *(unsigned int *)(v34 - 4);
      if (v37 > 0x400)
        break;
      if (3 * v37 <= 4 * v36)
      {
        if ((_DWORD)v37)
          goto LABEL_54;
        v38 = 8;
        goto LABEL_57;
      }
LABEL_58:
      if (++v19 == v20)
        goto LABEL_28;
    }
    if (v37 > 2 * v36)
      goto LABEL_58;
LABEL_54:
    v38 = (_DWORD)v37 << (6 * *(_DWORD *)(v34 - 12) >= (2 * v37));
LABEL_57:
    WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, v38, v28);
    goto LABEL_58;
  }
  return JSC::JSObject::getOwnPropertyNames();
}

uint64_t WebCore::JSMediaList::defineOwnProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  _BYTE *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int16 *v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;

  if (!a3)
    return JSC::JSObject::defineOwnProperty();
  v5 = *(_DWORD *)(a3 + 16);
  if ((v5 & 0x20) != 0)
    return JSC::JSObject::defineOwnProperty();
  v6 = *(_BYTE **)(a3 + 8);
  v7 = *(unsigned int *)(a3 + 4);
  if ((v5 & 4) != 0)
  {
    if (!(_DWORD)v7)
      return JSC::JSObject::defineOwnProperty();
    v8 = *v6 - 48;
    if (v8 > 9 || v7 >= 2 && *v6 == 48)
      return JSC::JSObject::defineOwnProperty();
    v14 = v7 - 1;
    v15 = v6 + 1;
    while (v14)
    {
      if (v8 <= 0x19999999)
      {
        v16 = *v15 - 48;
        if (v16 <= 9)
        {
          v13 = __CFADD__(v16, 10 * v8);
          v8 = v16 + 10 * v8;
          --v14;
          ++v15;
          if (!v13)
            continue;
        }
      }
      return JSC::JSObject::defineOwnProperty();
    }
  }
  else
  {
    if (!(_DWORD)v7)
      return JSC::JSObject::defineOwnProperty();
    v8 = *(unsigned __int16 *)v6 - 48;
    if (v8 > 9 || v7 >= 2 && *(_WORD *)v6 == 48)
      return JSC::JSObject::defineOwnProperty();
    v10 = (unsigned __int16 *)(v6 + 2);
    v11 = v7 - 1;
    while (v11)
    {
      if (v8 <= 0x19999999)
      {
        v12 = *v10 - 48;
        if (v12 <= 9)
        {
          v13 = __CFADD__(v12, 10 * v8);
          v8 = v12 + 10 * v8;
          ++v10;
          --v11;
          if (!v13)
            continue;
        }
      }
      return JSC::JSObject::defineOwnProperty();
    }
  }
  if (v8 == -1)
    return JSC::JSObject::defineOwnProperty();
  if (a5)
    JSC::throwTypeError();
  return 0;
}

uint64_t WebCore::JSMediaList::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSMediaList::createPrototype(WebCore::JSMediaList *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t v4;
  WebCore::JSDOMGlobalObject *v5;
  JSC::Structure *v6;

  v4 = JSC::Structure::create((uint64_t *)this, (int)a2, a2[82]);
  *(_DWORD *)(v4 + 16) |= 0x80000u;
  return WebCore::JSMediaListPrototype::create(this, v4, v5, v6);
}

unint64_t WebCore::JSMediaListPrototype::create(WebCore::JSMediaListPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSMediaListPrototype::finishCreation((WebCore::JSMediaListPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaList>,(WebCore::DOMConstructorID)368>(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t Structure;
  JSC::Heap *v6;
  unint64_t v7;

  result = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2944);
  if (!result)
  {
    Structure = WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaList>::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 664));
    result = WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaList>::create(a1, Structure, (JSC::JSCell **)a2);
    *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2944) = result;
    if (result)
    {
      if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
      {
        v6 = (JSC::Heap *)(a1 + 192);
        v7 = result;
        JSC::Heap::writeBarrierSlowPath(v6, (const JSCell *)a2);
        return v7;
      }
    }
  }
  return result;
}

uint64_t WebCore::JSMediaList::legacyPlatformObjectGetOwnProperty(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  JSC::VM *v6;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 *v23;
  uint64_t v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned __int16 *v31;
  uint64_t v32;
  unsigned int v33;
  BOOL v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  unsigned int v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned __int8 *v53;
  uint64_t v54;
  unsigned int v55;
  WTF::StringImpl *v56;

  v6 = *(JSC::VM **)(a2 + 56);
  if (a3)
  {
    v9 = *(_DWORD *)(a3 + 16);
    if ((v9 & 0x20) != 0)
      goto LABEL_8;
    v10 = *(_BYTE **)(a3 + 8);
    v11 = *(unsigned int *)(a3 + 4);
    if ((v9 & 4) != 0)
    {
      if (!(_DWORD)v11 || (v12 = *v10 - 48, v12 > 9) || v11 >= 2 && *v10 == 48)
      {
LABEL_8:
        if ((a3 >> 4))
        {
          v13 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
          if (((a3 >> 4) & ~*(_DWORD *)(v13 + 0x20)) == 0)
          {
            v14 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), v6);
            if (v14)
            {
              v56 = (WTF::StringImpl *)a3;
              v15 = JSC::PropertyTable::get(v14, (uint64_t *)&v56);
              if ((_DWORD)v15 != -1)
              {
                if ((int)v15 > 63)
                {
                  v27 = *(_QWORD *)(a1 + 8) - 8;
                  v28 = 0x3F00000000 - (v15 << 32);
                }
                else
                {
                  v27 = a1 + 16;
                  v28 = v15 << 32;
                }
                v29 = *(_QWORD *)(v27 + (v28 >> 29));
                if ((v29 & 0xFFFE000000000002) == 0)
                {
                  v30 = *(unsigned __int8 *)(v29 + 5);
                  if (v30 == 6)
                  {
                    v35 = *(_DWORD *)(v13 + 16) & 3;
                    v37 = *(_QWORD *)(v29 + 8);
                    v36 = *(_QWORD *)(v29 + 16);
                    if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x4C))
                    {
                      v39 = *(_QWORD *)(v29 + 24);
                      v38 = *(_QWORD *)(v29 + 32);
                      *(_QWORD *)a4 = v37;
                      *(_QWORD *)(a4 + 8) = v36;
                      *(_DWORD *)(a4 + 16) = HIDWORD(v15);
                      *(_QWORD *)(a4 + 32) = a1;
                      *(_BYTE *)(a4 + 49) = 3;
                      v21 = 1;
                      if (v35 != 2)
                        *(_BYTE *)(a4 + 48) = 1;
                      *(_BYTE *)(a4 + 51) = 1;
                      *(_QWORD *)(a4 + 72) = v39;
                      *(_QWORD *)(a4 + 80) = v38;
                    }
                    else
                    {
                      *(_QWORD *)a4 = v37;
                      *(_QWORD *)(a4 + 8) = v36;
                      *(_DWORD *)(a4 + 16) = HIDWORD(v15);
                      *(_QWORD *)(a4 + 32) = a1;
                      v21 = 1;
                      *(_BYTE *)(a4 + 49) = 3;
                      if (v35 != 2)
                        *(_BYTE *)(a4 + 48) = 1;
                    }
                    return v21;
                  }
                  if (v30 == 5)
                  {
                    JSC::JSObject::fillGetterPropertySlot();
                    return 1;
                  }
                }
                *(_QWORD *)a4 = v29;
                *(_QWORD *)(a4 + 32) = a1;
                *(_DWORD *)(a4 + 16) = HIDWORD(v15);
                *(_DWORD *)(a4 + 20) = v15;
                v21 = 1;
                *(_WORD *)(a4 + 48) = 257;
                return v21;
              }
            }
          }
        }
        if ((*(_BYTE *)(a1 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
          return 1;
        v16 = *(_DWORD *)(a3 + 16);
        if ((v16 & 0x20) == 0)
        {
          v17 = *(_BYTE **)(a3 + 8);
          v18 = *(unsigned int *)(a3 + 4);
          if ((v16 & 4) != 0)
          {
            if ((_DWORD)v18)
            {
              v51 = *v17 - 48;
              if (v51 > 9 || v18 >= 2 && *v17 == 48)
              {
LABEL_94:
                v52 = 0;
              }
              else
              {
                v53 = v17 + 1;
                v54 = v18 - 1;
                while (v54)
                {
                  if (v51 > 0x19999999)
                    goto LABEL_94;
                  v55 = *v53 - 48;
                  if (v55 > 9)
                    goto LABEL_94;
                  v52 = 0;
                  v26 = __CFADD__(v55, 10 * v51);
                  v51 = v55 + 10 * v51;
                  ++v53;
                  --v54;
                  if (v26)
                    goto LABEL_95;
                }
                v52 = 0x100000000;
                if (v51 == -1)
                  v52 = 0;
              }
            }
            else
            {
              v52 = 0;
            }
LABEL_95:
            if ((v52 & 0x100000000) == 0)
              return 0;
          }
          else
          {
            if ((_DWORD)v18)
            {
              v19 = *(unsigned __int16 *)v17 - 48;
              if (v19 > 9 || v18 >= 2 && *(_WORD *)v17 == 48)
              {
LABEL_19:
                v20 = 0;
              }
              else
              {
                v31 = (unsigned __int16 *)(v17 + 2);
                v32 = v18 - 1;
                while (v32)
                {
                  if (v19 <= 0x19999999)
                  {
                    v33 = *v31 - 48;
                    if (v33 <= 9)
                    {
                      v26 = __CFADD__(v33, 10 * v19);
                      v19 = v33 + 10 * v19;
                      ++v31;
                      --v32;
                      if (!v26)
                        continue;
                    }
                  }
                  goto LABEL_19;
                }
                v34 = v19 == -1;
                v20 = 0x100000000;
                if (v34)
                  v20 = 0;
              }
            }
            else
            {
              v20 = 0;
            }
            if ((v20 & 0x100000000) == 0)
              return 0;
          }
          return JSC::JSObject::getOwnPropertySlotByIndex();
        }
        return 0;
      }
      v40 = v10 + 1;
      v41 = v11 - 1;
      while (v41)
      {
        if (v12 <= 0x19999999)
        {
          v42 = *v40 - 48;
          if (v42 <= 9)
          {
            v26 = __CFADD__(v42, 10 * v12);
            v12 = v42 + 10 * v12;
            ++v40;
            --v41;
            if (!v26)
              continue;
          }
        }
        goto LABEL_8;
      }
    }
    else
    {
      if (!(_DWORD)v11)
        goto LABEL_8;
      v12 = *(unsigned __int16 *)v10 - 48;
      if (v12 > 9 || v11 >= 2 && *(_WORD *)v10 == 48)
        goto LABEL_8;
      v23 = (unsigned __int16 *)(v10 + 2);
      v24 = v11 - 1;
      while (v24)
      {
        if (v12 <= 0x19999999)
        {
          v25 = *v23 - 48;
          if (v25 <= 9)
          {
            v26 = __CFADD__(v25, 10 * v12);
            v12 = v25 + 10 * v12;
            ++v23;
            --v24;
            if (!v26)
              continue;
          }
        }
        goto LABEL_8;
      }
    }
    if (v12 == -1)
      goto LABEL_8;
    WebCore::MediaList::item(*(_QWORD *)(a1 + 24), v12, (const Condition *)a3, &v56);
    v44 = v56;
    if (!v56)
    {
      v6 = *(JSC::VM **)(a2 + 56);
      goto LABEL_8;
    }
    v45 = *(_QWORD *)(a2 + 56);
    v46 = *((_DWORD *)v56 + 1);
    if (v46)
    {
      if (v46 != 1)
      {
LABEL_73:
        v47 = *(_QWORD *)(v45 + 64760);
        if (!v47 || v56 != *(WTF::StringImpl **)(v47 + 8))
          v47 = JSC::jsStringWithCacheSlowCase();
        goto LABEL_76;
      }
      v48 = (unsigned __int8 *)*((_QWORD *)v56 + 1);
      if ((*((_BYTE *)v56 + 16) & 4) != 0)
      {
        v49 = *v48;
      }
      else
      {
        v50 = *(unsigned __int16 *)v48;
        if (v50 > 0xFF)
          goto LABEL_73;
        v49 = v50;
      }
      v47 = *(_QWORD *)(v45 + 8 * v49 + 42216);
    }
    else
    {
      v47 = *(_QWORD *)(v45 + 41968);
    }
LABEL_76:
    if (*((_DWORD *)v6 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) != 0)
    {
      v21 = 0;
    }
    else
    {
      *(_QWORD *)a4 = v47;
      *(_DWORD *)(a4 + 16) = 2;
      *(_QWORD *)(a4 + 32) = a1;
      v21 = 1;
      *(_BYTE *)(a4 + 49) = 1;
    }
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v43);
    else
      *(_DWORD *)v44 -= 2;
    return v21;
  }
  if ((*(_BYTE *)(a1 + 6) & 0x20) == 0)
    return 0;
  return JSC::JSObject::getOwnStaticPropertySlot();
}

unint64_t WebCore::jsMediaListConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSMediaListPrototype::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaList>,(WebCore::DOMConstructorID)368>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsMediaList_mediaText(uint64_t a1, WebCore::MediaList **a2, const Condition *a3)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t *v6;
  WTF::StringImpl *v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  WTF::StringImpl *v14;

  WebCore::MediaList::mediaText(a2[3], (WTF::StringImpl *)a2, a3, &v14);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = (uint64_t *)(v5 + 41968);
  v7 = v14;
  if (!v14)
    return *v6;
  v8 = *((_DWORD *)v14 + 1);
  if (v8)
  {
    if (v8 != 1)
    {
LABEL_4:
      v9 = *(_QWORD *)(v5 + 64760);
      if (!v9 || v14 != *(WTF::StringImpl **)(v9 + 8))
        v9 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_7;
    }
    v11 = (unsigned __int8 *)*((_QWORD *)v14 + 1);
    if ((*((_BYTE *)v14 + 16) & 4) != 0)
    {
      v12 = *v11;
    }
    else
    {
      v13 = *(unsigned __int16 *)v11;
      if (v13 > 0xFF)
        goto LABEL_4;
      v12 = v13;
    }
    v9 = *(_QWORD *)(v5 + 8 * v12 + 42216);
  }
  else
  {
    v9 = *v6;
  }
LABEL_7:
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, v4);
  else
    *(_DWORD *)v7 -= 2;
  return v9;
}

BOOL WebCore::setJSMediaList_mediaText(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::MediaList *v8;
  int v9;
  _BOOL8 v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSMediaList::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSMediaList::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::MediaList **)(a2 + 24);
  WebCore::Converter<WebCore::IDLLegacyNullToEmptyStringAdaptor<WebCore::IDLDOMString>>::convert(a1, (unint64_t)this, (uint64_t)&v15);
  v9 = v16;
  v10 = v16 == 0;
  if (!v16)
  {
    v11 = v15;
    v15 = 0;
    v17 = v11;
    WebCore::MediaList::setMediaText(v8, (unsigned int **)&v17);
    v13 = v17;
    v17 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v9 = v16;
  }
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32B54C8[v9])(&v17, &v15);
  return v10;
}

unint64_t WebCore::jsMediaList_length(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v2 + 40))
  {
    v3 = v2 + 24;
    goto LABEL_12;
  }
  v4 = *(_QWORD **)(v2 + 16);
  if (!v4)
    goto LABEL_10;
  if ((*(unsigned int (**)(_QWORD))(*v4 + 16))(*(_QWORD *)(v2 + 16)) == 3)
  {
    v5 = v4[4];
LABEL_11:
    v3 = v5 + 48;
    goto LABEL_12;
  }
  v6 = *(_QWORD **)(v2 + 16);
  if (!v6 || (*(unsigned int (**)(_QWORD))(*v6 + 16))(*(_QWORD *)(v2 + 16)) != 4)
  {
LABEL_10:
    v5 = *(_QWORD *)(v2 + 8);
    goto LABEL_11;
  }
  v7 = v6[3];
  if ((*(_BYTE *)(v7 + 4) & 0x1F) != 4)
  {
    __break(0xC471u);
    JUMPOUT(0x194D16F74);
  }
  v3 = v7 + 24;
LABEL_12:
  v8 = *(unsigned int *)(v3 + 12);
  if ((v8 & 0x80000000) != 0)
    return COERCE__INT64((double)v8) + 0x2000000000000;
  else
    return v8 | 0xFFFE000000000000;
}

uint64_t WebCore::JSMediaListOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::ConcurrentPtrHashSet *v10;
  _DWORD *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t result;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsMediaList";
    a5[1] = 27;
  }
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
    goto LABEL_4;
  v8 = *(_QWORD *)(v6 + 8);
  if (v8)
  {
    v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v8 + 80))(*(_QWORD *)(v6 + 8));
    if (v7)
    {
LABEL_4:
      v6 = WebCore::root(v7, (WebCore::CSSRule *)v6);
      goto LABEL_8;
    }
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    v6 = v8;
    if (v9)
    {
      if ((*(_BYTE *)(v9 + 22) & 8) == 0)
      {
        while (1)
        {
          v6 = v9;
          if ((*(_WORD *)(v9 + 28) & 0x80) != 0)
          {
            v21 = *(_QWORD *)(v9 + 200);
            if (!v21)
              goto LABEL_8;
            v20 = (uint64_t *)(v21 + 8);
          }
          else
          {
            v20 = (uint64_t *)(v9 + 32);
          }
          v9 = *v20;
          if (!*v20)
            goto LABEL_8;
        }
      }
      v6 = *(_QWORD *)(*(_QWORD *)(v9 + 40) + 8);
    }
  }
LABEL_8:
  v10 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v11 = (_DWORD *)*((_QWORD *)v10 + 6);
  if ((_DWORD *)((char *)v10 + 56) == v11)
  {
    v22 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v10, (void *)v6);
    v6 = v22;
    if ((_DWORD)result)
    {
LABEL_26:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v12 = v11[1];
    v13 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
    v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
    v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
    v16 = v12 & ((v15 >> 31) ^ v15);
    v17 = v16;
    while (1)
    {
      v18 = *(_QWORD *)&v11[2 * v17 + 4];
      if (!v18)
        return 0;
      if (v6 == v18)
        goto LABEL_26;
      v17 = (v17 + 1) & v12;
      if (v17 == v16)
      {
        __break(0xC471u);
        JUMPOUT(0x194D17084);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSMediaListOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    if (*((_BYTE *)v3 + 40))
      WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3 + 24, a2);
    return (_QWORD *)WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
  return result;
}

unint64_t WebCore::wrap<WebCore::MediaList>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  void *v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *Allocator;
  unint64_t v38;
  _QWORD *v39;
  WTF *v40;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = WebCore::getDOMStructure<WebCore::JSMediaList>(*(WebCore::JSMediaList **)(a2 + 56), (JSC::JSCell **)a2);
  v16 = *(_QWORD *)(a2 + 56);
  v17 = *(_QWORD *)(v16 + 41456);
  v18 = *(_QWORD *)(v17 + 23536);
  v19 = *(_QWORD **)(v18 + 2992);
  if (!v19)
  {
    v20 = *(_QWORD *)(v17 + 22648);
    if (__ldaxr((unsigned __int8 *)v20))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v20))
    {
      goto LABEL_14;
    }
    MEMORY[0x19AEA534C](v20);
LABEL_14:
    v22 = *(_QWORD *)(v20 + 2824);
    if (!*(_QWORD *)(v22 + 2992))
    {
      v23 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)&v40, "IsoSpace T");
      v39 = 0;
      MEMORY[0x19AEA3204](v23, &v40, v16 + 192, v16 + 1872, 32, 8, &v39);
      v25 = (uint64_t)v39;
      v39 = 0;
      if (v25)
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
      v26 = v40;
      v40 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 1)
          WTF::fastFree(v26, v24);
        else
          --*(_DWORD *)v26;
      }
      v27 = *(_QWORD *)(v22 + 2992);
      *(_QWORD *)(v22 + 2992) = v23;
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    }
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v29 = *(_QWORD *)(v18 + 2992);
    *(_QWORD *)(v18 + 2992) = v19;
    if (v29)
    {
      v30 = (WTF *)MEMORY[0x19AEA3528](v29, v28);
      WTF::fastFree(v30, v31);
    }
    v32 = __ldxr((unsigned __int8 *)v20);
    if (v32 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v20))
        goto LABEL_29;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v20);
  }
LABEL_29:
  SlowCase = v19[3];
  if (SlowCase >= v19[4])
  {
    SlowCase = v19[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_31;
    }
    v38 = *(_QWORD *)(SlowCase + 8) ^ v19[6];
    v19[4] = SlowCase + HIDWORD(v38);
    v19[5] = SlowCase + (int)v38;
  }
  v19[3] = SlowCase + 32;
LABEL_31:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v15);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v33 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE335FD0 & 1) == 0)
  {
    qword_1EE335FC8 = (uint64_t)&off_1E32B3560;
    byte_1EE335FD0 = 1;
  }
  v40 = a3;
  if ((SlowCase & 8) != 0)
    v34 = (SlowCase - 112) | 1;
  else
    v34 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v34 & 1) != 0)
    v35 = v34 + 47;
  else
    v35 = *(_QWORD *)v34 + 32;
  Allocator = *(_QWORD **)(v35 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v35 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE335FC8;
  Allocator[2] = v33;
  v39 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v33 + 32), (uint64_t *)&v40, (uint64_t *)&v39);
  if (v39)
    v39[1] = 3;
  return SlowCase;
}

uint64_t WebCore::JSMediaList::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSMediaList::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSMediaList::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24);
  else
    return 0;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSMediaMetadata>::construct(JSC *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  JSC::JSCell *v8;
  JSC::VM *v9;
  uint64_t Object;
  JSC::Structure *v11;
  uint64_t v12;
  int v13;
  WTF::StringImpl *v14;
  int v15;
  JSC::VM *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  JSC::VM *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF *v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  JSValue v42;
  int i;
  unsigned int v44;
  JSC::JSCell *IndexQuickly;
  JSC::VM *v46;
  WTF::StringImpl *v47;
  int v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  int v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  int v54;
  int v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  __int128 v60;
  __int128 v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  JSC::VM *v70;
  int v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  JSCell *v75;
  JSC::JSCell *v76;
  JSC::JSGlobalObject *v77;
  JSC::JSObject *v78;
  JSC::JSGlobalObject *v79;
  JSC::VM *v80;
  JSC::Structure *v81;
  uint64_t FunctionRealm;
  uint64_t v83;
  unsigned int v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char **v89;
  int v90;
  JSC::JSObject *v91;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v93;
  JSC::Structure *v94;
  JSC::JSCell *v95;
  uint64_t v96;
  unint64_t SubclassStructure;
  WTF *v99;
  void *v100;
  uint64_t v101;
  JSC::JSCell *v103;
  uint64_t v104;
  unint64_t v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  JSValue v108;
  int hasExceptionsAfterHandlingTraps;
  int v110;
  WTF::StringImpl *v111;
  int v112;
  WebCore::JSMediaMetadata *v113;
  JSC::JSCell *v114;
  WTF::StringImpl *v115;
  uint64_t v116;
  WTF::StringImpl *v117[2];
  WTF::StringImpl *v118[2];
  uint64_t v119;
  WTF::StringImpl *v120[4];
  WTF::StringImpl *v121;
  char v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  int v125;
  _OWORD v126[2];
  WTF::StringImpl *v127;
  int v128;
  JSC::VM *v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  int v133;
  JSC::VM *v134;
  WTF::StringImpl *v135;
  _QWORD v136[2];

  v129 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v4 + 40));
  if (!v5)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(a1, &v129, (uint64_t)"MediaMetadata", 14);
  v7 = (WTF::StringImpl *)v5;
  v116 = v4;
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v134 = (JSC::VM *)*((_QWORD *)a1 + 7);
    goto LABEL_13;
  }
  v8 = *(JSC::JSCell **)(a2 + 48);
  v9 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v134 = v9;
  if (((unint64_t)v8 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
LABEL_13:
    v11 = 0;
    v121 = 0;
    memset(v120, 0, sizeof(v120));
    v13 = 1;
LABEL_14:
    v14 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v14 += 2;
    v133 = 0;
    v132 = 0;
    v120[2] = v14;
    if (v13)
    {
      v15 = 1;
      goto LABEL_33;
    }
LABEL_27:
    WTF::AtomStringImpl::addLiteral();
    v19 = v117[0];
    v20 = JSC::JSObject::get(v11, a1, (unint64_t)v117[0]);
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v6);
      else
        *(_DWORD *)v19 -= 2;
    }
    if (*((_DWORD *)v134 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v134))
    {
      v48 = 1;
      v128 = 1;
LABEL_118:
      v55 = v133;
      if (v133 == -1)
        goto LABEL_120;
      goto LABEL_119;
    }
    if (v20 == 10)
    {
      v15 = 0;
LABEL_33:
      v21 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *(_DWORD *)v21 += 2;
      goto LABEL_44;
    }
    v117[0] = (WTF::StringImpl *)v20;
    v22 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if ((v20 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v20 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v117, a1);
      goto LABEL_41;
    }
    v23 = *(WTF::StringImpl **)(v20 + 8);
    if ((v23 & 1) != 0)
    {
      v23 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v20, a1);
      if (!v23)
        goto LABEL_40;
    }
    else if (!v23)
    {
LABEL_40:
      v123 = v23;
LABEL_41:
      if (*((_DWORD *)v22 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v22);
        v21 = v123;
        if (hasExceptionsAfterHandlingTraps)
        {
          v48 = 1;
          v131 = 1;
          v123 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v6);
            else
              *(_DWORD *)v21 -= 2;
          }
          v128 = 1;
          v54 = 1;
LABEL_117:
          ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32B54C8[v54])(v117, &v130);
          goto LABEL_118;
        }
      }
      else
      {
        v21 = v123;
      }
      v15 = 0;
LABEL_44:
      v131 = 0;
      v130 = 0;
      v24 = v120[1];
      v120[1] = v21;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
        {
          WTF::StringImpl::destroy(v24, v6);
          if (v15)
            goto LABEL_53;
LABEL_48:
          WTF::AtomStringImpl::addLiteral();
          v25 = v117[0];
          v26 = JSC::JSObject::get(v11, a1, (unint64_t)v117[0]);
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v6);
            else
              *(_DWORD *)v25 -= 2;
          }
          if (*((_DWORD *)v134 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v134))
          {
            v48 = 1;
            v128 = 1;
            goto LABEL_116;
          }
          if (v26 != 10)
          {
            v40 = *((_QWORD *)a1 + 7);
            v136[0] = v40;
            if ((v26 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v26 + 5) <= 0x16u)
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              JSC::throwTypeError();
              v53 = v123;
              v123 = 0;
              if (v53)
              {
                if (*(_DWORD *)v53 == 2)
                  WTF::StringImpl::destroy(v53, v52);
                else
                  *(_DWORD *)v53 -= 2;
              }
              LODWORD(v118[0]) = 1;
            }
            else
            {
              v123 = 0;
              v124 = 0;
              if (JSC::getIterationMode() == 2)
              {
                for (i = 1; ; ++i)
                {
                  v44 = (*(_BYTE *)(v26 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(v26 + 8) - 8) : 0;
                  if (i - 1 >= v44)
                    break;
                  IndexQuickly = (JSC::JSCell *)JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)v26, i - 1, 0);
                  if (!IndexQuickly)
                    IndexQuickly = (JSC::JSCell *)JSC::JSObject::get((JSC::JSObject *)v26, a1, (i - 1));
                  if (*(_DWORD *)(v40 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v40) & 1) != 0)
                    break;
                  WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::MediaImage>>::convert(a1, IndexQuickly, (uint64_t)&v123);
                  if (*(_QWORD *)(v40 + 16))
                  {
                    v104 = JSC::JSArrayIterator::create();
                    v105 = i | 0xFFFE000000000000;
                    if (i < 0)
                      v105 = COERCE__INT64((double)i) + 0x2000000000000;
                    *(_QWORD *)(v104 + 16) = v105;
                    goto LABEL_214;
                  }
                }
              }
              else
              {
                JSC::iteratorForIterable(a1, (JSC::JSGlobalObject *)v26, v42);
                if (!*(_DWORD *)(v40 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v40) & 1) == 0)
                {
                  while (1)
                  {
                    v101 = JSC::iteratorStep();
                    if (*(_QWORD *)(v40 + 16) || v101 == 6)
                      break;
                    v103 = (JSC::JSCell *)JSC::iteratorValue();
                    if (*(_DWORD *)(v40 + 80))
                    {
                      if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v40) & 1) != 0)
                        break;
                    }
                    WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::MediaImage>>::convert(a1, v103, (uint64_t)&v123);
                    if (*(_QWORD *)(v40 + 16))
                    {
LABEL_214:
                      JSC::iteratorClose();
                      break;
                    }
                  }
                }
              }
              if (!*(_DWORD *)(v40 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v40) & 1) == 0)
              {
                v28 = v123;
                v115 = v124;
                v123 = 0;
                v124 = 0;
                LODWORD(v118[0]) = 0;
                WTF::Vector<WebCore::InspectorAuditResourcesObject::Resource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v123, v41);
                v29 = v115;
                goto LABEL_54;
              }
              LODWORD(v118[0]) = 1;
              WTF::Vector<WebCore::InspectorAuditResourcesObject::Resource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v123, v41);
            }
            v48 = 1;
            v128 = 1;
            v51 = 1;
            goto LABEL_115;
          }
LABEL_53:
          v123 = 0;
          v124 = 0;
          LODWORD(v118[0]) = 0;
          WTF::Vector<WebCore::InspectorAuditResourcesObject::Resource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v123, v6);
          v28 = 0;
          v29 = 0;
LABEL_54:
          v117[0] = 0;
          v117[1] = 0;
          v123 = v28;
          v124 = v29;
          v30 = v120[3];
          if (HIDWORD(v121))
          {
            v31 = 24 * HIDWORD(v121);
            v32 = (WTF::StringImpl **)((char *)v120[3] + 16);
            do
            {
              v33 = *v32;
              *v32 = 0;
              if (v33)
              {
                if (*(_DWORD *)v33 == 2)
                  WTF::StringImpl::destroy(v33, v27);
                else
                  *(_DWORD *)v33 -= 2;
              }
              v34 = *(v32 - 1);
              *(v32 - 1) = 0;
              if (v34)
              {
                if (*(_DWORD *)v34 == 2)
                  WTF::StringImpl::destroy(v34, v27);
                else
                  *(_DWORD *)v34 -= 2;
              }
              v35 = *(v32 - 2);
              *(v32 - 2) = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, v27);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v32 += 3;
              v31 -= 24;
            }
            while (v31);
          }
          if (v30)
            WTF::fastFree(v30, v27);
          v120[3] = v123;
          v36 = v124;
          v123 = 0;
          v124 = 0;
          v121 = v36;
          WTF::Vector<WebCore::InspectorAuditResourcesObject::Resource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v123, v27);
          if (v15)
            goto LABEL_78;
          WTF::AtomStringImpl::addLiteral();
          v37 = v123;
          v38 = JSC::JSObject::get(v11, a1, (unint64_t)v123);
          if (v37)
          {
            if (*(_DWORD *)v37 == 2)
              WTF::StringImpl::destroy(v37, v6);
            else
              *(_DWORD *)v37 -= 2;
          }
          if (*((_DWORD *)v134 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v134))
          {
            v48 = 1;
            v128 = 1;
LABEL_108:
            v51 = (int)v118[0];
            if (LODWORD(v118[0]) == -1)
            {
LABEL_116:
              v54 = v131;
              if (v131 == -1)
                goto LABEL_118;
              goto LABEL_117;
            }
LABEL_115:
            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32B6238[v51])(&v123, v117);
            goto LABEL_116;
          }
          if (v38 == 10)
          {
LABEL_78:
            v39 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
            if (*MEMORY[0x1E0CBF738])
              *(_DWORD *)v39 += 2;
            goto LABEL_103;
          }
          v136[0] = v38;
          v46 = (JSC::VM *)*((_QWORD *)a1 + 7);
          if ((v38 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v38 + 5) != 2)
          {
            JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v136, a1);
LABEL_101:
            if (*((_DWORD *)v46 + 20))
            {
              v110 = JSC::VM::hasExceptionsAfterHandlingTraps(v46);
              v39 = v135;
              if (v110)
              {
                LODWORD(v124) = 1;
                v135 = 0;
                if (v39)
                {
                  if (*(_DWORD *)v39 == 2)
                    WTF::StringImpl::destroy(v39, v6);
                  else
                    *(_DWORD *)v39 -= 2;
                }
                v48 = 1;
                goto LABEL_107;
              }
            }
            else
            {
              v39 = v135;
            }
LABEL_103:
            LODWORD(v124) = 0;
            v123 = 0;
            if (v120[0])
            {
              if (*(_DWORD *)v120[0] == 2)
                WTF::StringImpl::destroy(v120[0], v6);
              else
                *(_DWORD *)v120[0] -= 2;
            }
            v48 = 0;
            *(_QWORD *)&v126[0] = v39;
            *(_OWORD *)((char *)v126 + 8) = *(_OWORD *)&v120[1];
            v49 = v120[3];
            memset(v120, 0, sizeof(v120));
            *((_QWORD *)&v126[1] + 1) = v49;
            v50 = v121;
            v121 = 0;
            v127 = v50;
LABEL_107:
            v128 = v48;
            ((void (*)(_QWORD *, WTF::StringImpl **))off_1E32B54C8[v48])(v136, &v123);
            goto LABEL_108;
          }
          v47 = *(WTF::StringImpl **)(v38 + 8);
          if ((v47 & 1) != 0)
          {
            v47 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v38, a1);
            if (!v47)
              goto LABEL_100;
          }
          else if (!v47)
          {
LABEL_100:
            v135 = v47;
            goto LABEL_101;
          }
          *(_DWORD *)v47 += 2;
          goto LABEL_100;
        }
        *(_DWORD *)v24 -= 2;
      }
      if (v15)
        goto LABEL_53;
      goto LABEL_48;
    }
    *(_DWORD *)v23 += 2;
    goto LABEL_40;
  }
  if (((unint64_t)v8 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v8)) == 0)
  {
    JSC::throwTypeError();
    v75 = 0;
    v48 = 1;
    v128 = 1;
    goto LABEL_171;
  }
  v11 = (JSC::Structure *)Object;
  v121 = 0;
  memset(v120, 0, sizeof(v120));
  WTF::AtomStringImpl::addLiteral();
  v12 = JSC::JSObject::get(v11, a1, (unint64_t)v117[0]);
  if (v117[0])
  {
    if (*(_DWORD *)v117[0] == 2)
      WTF::StringImpl::destroy(v117[0], v6);
    else
      *(_DWORD *)v117[0] -= 2;
  }
  if (!*((_DWORD *)v9 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v9))
  {
    if (v12 == 10)
    {
      v13 = 0;
      goto LABEL_14;
    }
    v117[0] = (WTF::StringImpl *)v12;
    v16 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if ((v12 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v12 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v117, a1);
      goto LABEL_24;
    }
    v17 = *(WTF::StringImpl **)(v12 + 8);
    if ((v17 & 1) != 0)
    {
      v17 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, a1);
      if (!v17)
        goto LABEL_23;
    }
    else if (!v17)
    {
LABEL_23:
      v123 = v17;
LABEL_24:
      if (*((_DWORD *)v16 + 20))
      {
        v112 = JSC::VM::hasExceptionsAfterHandlingTraps(v16);
        v18 = v123;
        if (v112)
        {
          v48 = 1;
          v133 = 1;
          v123 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v111);
            else
              *(_DWORD *)v18 -= 2;
          }
          v128 = 1;
          v55 = 1;
LABEL_119:
          ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32B54C8[v55])(v117, &v132);
          goto LABEL_120;
        }
      }
      else
      {
        v18 = v123;
      }
      v133 = 0;
      v132 = 0;
      v120[2] = v18;
      goto LABEL_27;
    }
    *(_DWORD *)v17 += 2;
    goto LABEL_23;
  }
  v48 = 1;
  v128 = 1;
LABEL_120:
  WTF::Vector<WebCore::InspectorAuditResourcesObject::Resource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v120[3], v6);
  v57 = v120[2];
  v120[2] = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
      WTF::StringImpl::destroy(v57, v56);
    else
      *(_DWORD *)v57 -= 2;
  }
  v58 = v120[1];
  v120[1] = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
      WTF::StringImpl::destroy(v58, v56);
    else
      *(_DWORD *)v58 -= 2;
  }
  v59 = v120[0];
  v120[0] = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
      WTF::StringImpl::destroy(v59, v56);
    else
      *(_DWORD *)v59 -= 2;
  }
  if (v48)
  {
    v75 = 0;
    v48 = 1;
    goto LABEL_171;
  }
  *(_OWORD *)v117 = 0u;
  *(_OWORD *)v118 = 0u;
  v60 = v126[0];
  v61 = v126[1];
  memset(v126, 0, sizeof(v126));
  *(_OWORD *)v120 = v60;
  *(_OWORD *)&v120[2] = v61;
  v119 = 0;
  *(_QWORD *)&v60 = v127;
  v127 = 0;
  v121 = (WTF::StringImpl *)v60;
  v122 = 1;
  WebCore::MediaMetadata::create(v7, (uint64_t)v120, (uint64_t)&v123);
  if (v122)
  {
    WTF::Vector<WebCore::InspectorAuditResourcesObject::Resource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v120[3], v62);
    v63 = v120[2];
    v120[2] = 0;
    if (v63)
    {
      if (*(_DWORD *)v63 == 2)
        WTF::StringImpl::destroy(v63, v62);
      else
        *(_DWORD *)v63 -= 2;
    }
    v64 = v120[1];
    v120[1] = 0;
    if (v64)
    {
      if (*(_DWORD *)v64 == 2)
        WTF::StringImpl::destroy(v64, v62);
      else
        *(_DWORD *)v64 -= 2;
    }
    v65 = v120[0];
    v120[0] = 0;
    if (v65)
    {
      if (*(_DWORD *)v65 == 2)
        WTF::StringImpl::destroy(v65, v62);
      else
        *(_DWORD *)v65 -= 2;
    }
  }
  WTF::Vector<WebCore::InspectorAuditResourcesObject::Resource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v118[1], v62);
  v67 = v118[0];
  v118[0] = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 2)
      WTF::StringImpl::destroy(v67, v66);
    else
      *(_DWORD *)v67 -= 2;
  }
  v68 = v117[1];
  v117[1] = 0;
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
      WTF::StringImpl::destroy(v68, v66);
    else
      *(_DWORD *)v68 -= 2;
  }
  v69 = v117[0];
  v117[0] = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
      WTF::StringImpl::destroy(v69, v66);
    else
      *(_DWORD *)v69 -= 2;
  }
  v70 = v129;
  if (*((_DWORD *)v129 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v129))
  {
    v75 = 0;
    v71 = v125;
    goto LABEL_169;
  }
  v71 = v125;
  if (!v125)
  {
    v72 = *(_QWORD *)(v116 + 40);
    v73 = v123;
    v123 = 0;
    v120[0] = v73;
    v75 = (JSCell *)WebCore::createWrapper<WebCore::MediaMetadata,WebCore::MediaMetadata>(v72, v120);
    if (v120[0])
    {
      if (*(_DWORD *)v120[0] == 1)
      {
        WebCore::MediaMetadata::~MediaMetadata(v120[0], v74);
        WTF::fastFree(v99, v100);
      }
      else
      {
        --*(_DWORD *)v120[0];
      }
    }
    goto LABEL_154;
  }
  if (v125 == 1)
  {
    v106 = (WTF::StringImpl *)v123;
    LOBYTE(v120[0]) = (_BYTE)v123;
    v107 = v124;
    v124 = 0;
    v120[1] = v107;
    if (!*((_QWORD *)v70 + 2))
    {
      v108.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)v123, (JSC::JSGlobalObject *)&v120[1]);
      JSC::VM::throwException(v70, a1, v108);
      v107 = v120[1];
    }
    v120[1] = 0;
    if (v107)
    {
      if (*(_DWORD *)v107 == 2)
        WTF::StringImpl::destroy(v107, v106);
      else
        *(_DWORD *)v107 -= 2;
    }
    v75 = 0;
LABEL_154:
    if (*((_DWORD *)v70 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v70) & 1) != 0)
    {
      v75 = 0;
      goto LABEL_170;
    }
    v76 = *(JSC::JSCell **)(a2 + 40);
    if (((unint64_t)v76 & 0xFFFE000000000002) != 0)
      goto LABEL_168;
    v77 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v76);
    if (!v77)
      goto LABEL_168;
    v79 = v77;
    if (v77 == *(JSC::JSGlobalObject **)(a2 + 24))
      goto LABEL_168;
    v80 = (JSC::VM *)*((_QWORD *)a1 + 7);
    FunctionRealm = JSC::getFunctionRealm(a1, v77, v78);
    if (*((_DWORD *)v80 + 20))
    {
      if ((JSC::VM::hasExceptionsAfterHandlingTraps(v80) & 1) != 0)
        goto LABEL_168;
    }
    v83 = *(_QWORD *)(FunctionRealm + 3296);
    if (v83)
    {
      v84 = *(_DWORD *)(v83 - 8);
      v85 = ((unint64_t)&WebCore::JSMediaMetadata::s_info + ~((_QWORD)&WebCore::JSMediaMetadata::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaMetadata::s_info + ~((_QWORD)&WebCore::JSMediaMetadata::s_info << 32)) >> 22);
      v86 = 9 * ((v85 + ~(v85 << 13)) ^ ((v85 + ~(v85 << 13)) >> 8));
      v87 = (v86 ^ (v86 >> 15)) + ~((v86 ^ (v86 >> 15)) << 27);
      v88 = v84 & ((v87 >> 31) ^ v87);
      v89 = *(char ***)(v83 + 16 * v88);
      if (v89 == &WebCore::JSMediaMetadata::s_info)
      {
LABEL_164:
        v91 = *(JSC::JSObject **)(v83 + 16 * v88 + 8);
        if (v91)
        {
LABEL_166:
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v79, v91, v81);
          if (!*((_DWORD *)v80 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v80) & 1) == 0)
            JSC::JSObject::setStructure(v75, v80, SubclassStructure);
LABEL_168:
          if (*((_DWORD *)v70 + 20))
          {
            if ((JSC::VM::hasExceptionsAfterHandlingTraps(v70) & 1) != 0)
              v75 = 0;
          }
LABEL_169:
          if (v71 == -1)
          {
LABEL_171:
            ((void (*)(WTF::StringImpl **, _OWORD *))off_1E32B6138[v48])(v120, v126);
            return v75;
          }
LABEL_170:
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32B6128[v71])(v120, &v123);
          goto LABEL_171;
        }
      }
      else
      {
        v90 = 1;
        while (v89)
        {
          v88 = ((_DWORD)v88 + v90) & v84;
          v89 = *(char ***)(v83 + 16 * v88);
          ++v90;
          if (v89 == &WebCore::JSMediaMetadata::s_info)
            goto LABEL_164;
        }
      }
    }
    Structure = WebCore::JSMediaMetadataPrototype::createStructure((uint64_t *)v80, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v95 = (JSC::JSCell *)WebCore::JSMediaMetadataPrototype::create(v80, Structure, v93, v94);
    v96 = WebCore::JSMediaMetadata::createStructure((uint64_t *)v80, FunctionRealm, v95);
    v91 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v96, (uint64_t)&WebCore::JSMediaMetadata::s_info);
    goto LABEL_166;
  }
  v113 = (WebCore::JSMediaMetadata *)std::__throw_bad_variant_access[abi:sn180100]();
  return (JSCell *)WebCore::JSMediaMetadata::destroy(v113, v114);
}

WebCore::MediaMetadata *WebCore::JSMediaMetadata::destroy(WebCore::JSMediaMetadata *this, JSC::JSCell *a2)
{
  WebCore::MediaMetadata *result;
  WTF *v4;
  void *v5;

  result = (WebCore::MediaMetadata *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::MediaMetadata::~MediaMetadata(result, a2);
      return (WebCore::MediaMetadata *)WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::JSMediaMetadata::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSMediaMetadataPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSMediaMetadataPrototype::create(WebCore::JSMediaMetadataPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<6u>(this, (uint64_t)&WebCore::JSMediaMetadata::s_info, &WebCore::JSMediaMetadataPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSMediaMetadata>,(WebCore::DOMConstructorID)123>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 984);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructor<WebCore::JSMediaMetadata>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSMediaMetadata::s_info + ~((_QWORD)&WebCore::JSMediaMetadata::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaMetadata::s_info + ~((_QWORD)&WebCore::JSMediaMetadata::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSMediaMetadata::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSMediaMetadata::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSMediaMetadataPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSMediaMetadataPrototype::create((WebCore::JSMediaMetadataPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSMediaMetadata::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSMediaMetadata::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 984) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsMediaMetadataConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSMediaMetadataPrototype::s_info != (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                               + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSMediaMetadata>,(WebCore::DOMConstructorID)123>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsMediaMetadata_title(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

BOOL WebCore::setJSMediaMetadata_title(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  JSC::VM *v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  WTF **v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v17;
  uint64_t v18;
  int v19;
  WTF::StringImpl *v20;
  const WTF::StringImpl *v21;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSMediaMetadata::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSMediaMetadata::s_info && v6 != 0);
  }
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v9 = *(WTF ***)(a2 + 24);
  v21 = this;
  if (((unint64_t)this & 0xFFFE000000000002) == 0 && *((_BYTE *)this + 5) == 2)
  {
    v10 = (WTF::StringImpl *)*((_QWORD *)this + 1);
    if ((v10 & 1) != 0)
    {
      v10 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope(this, a1);
      if (!v10)
        goto LABEL_17;
    }
    else if (!v10)
    {
LABEL_17:
      v20 = v10;
      goto LABEL_18;
    }
    *(_DWORD *)v10 += 2;
    goto LABEL_17;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v21, a1);
LABEL_18:
  if (*((_DWORD *)v3 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v3);
    v11 = v20;
    if (hasExceptionsAfterHandlingTraps)
    {
      v19 = 1;
      v20 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v17);
        else
          *(_DWORD *)v11 -= 2;
      }
      v14 = 0;
      v13 = 1;
      goto LABEL_24;
    }
  }
  else
  {
    v11 = v20;
  }
  v19 = 0;
  v18 = 0;
  v21 = v11;
  WebCore::MediaMetadata::setTitle(v9, &v21, this);
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v12);
    else
      *(_DWORD *)v11 -= 2;
  }
  v13 = 0;
  v14 = 1;
LABEL_24:
  ((void (*)(const WTF::StringImpl **, uint64_t *))off_1E32B54C8[v13])(&v21, &v18);
  return v14;
}

uint64_t WebCore::jsMediaMetadata_artist(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 24);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

BOOL WebCore::setJSMediaMetadata_artist(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  JSC::VM *v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  WTF **v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v17;
  uint64_t v18;
  int v19;
  WTF::StringImpl *v20;
  const WTF::StringImpl *v21;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSMediaMetadata::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSMediaMetadata::s_info && v6 != 0);
  }
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v9 = *(WTF ***)(a2 + 24);
  v21 = this;
  if (((unint64_t)this & 0xFFFE000000000002) == 0 && *((_BYTE *)this + 5) == 2)
  {
    v10 = (WTF::StringImpl *)*((_QWORD *)this + 1);
    if ((v10 & 1) != 0)
    {
      v10 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope(this, a1);
      if (!v10)
        goto LABEL_17;
    }
    else if (!v10)
    {
LABEL_17:
      v20 = v10;
      goto LABEL_18;
    }
    *(_DWORD *)v10 += 2;
    goto LABEL_17;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v21, a1);
LABEL_18:
  if (*((_DWORD *)v3 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v3);
    v11 = v20;
    if (hasExceptionsAfterHandlingTraps)
    {
      v19 = 1;
      v20 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v17);
        else
          *(_DWORD *)v11 -= 2;
      }
      v14 = 0;
      v13 = 1;
      goto LABEL_24;
    }
  }
  else
  {
    v11 = v20;
  }
  v19 = 0;
  v18 = 0;
  v21 = v11;
  WebCore::MediaMetadata::setArtist(v9, &v21, this);
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v12);
    else
      *(_DWORD *)v11 -= 2;
  }
  v13 = 0;
  v14 = 1;
LABEL_24:
  ((void (*)(const WTF::StringImpl **, uint64_t *))off_1E32B54C8[v13])(&v21, &v18);
  return v14;
}

uint64_t WebCore::jsMediaMetadata_album(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 32);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

BOOL WebCore::setJSMediaMetadata_album(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  JSC::VM *v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  WTF **v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v17;
  uint64_t v18;
  int v19;
  WTF::StringImpl *v20;
  const WTF::StringImpl *v21;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSMediaMetadata::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSMediaMetadata::s_info && v6 != 0);
  }
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v9 = *(WTF ***)(a2 + 24);
  v21 = this;
  if (((unint64_t)this & 0xFFFE000000000002) == 0 && *((_BYTE *)this + 5) == 2)
  {
    v10 = (WTF::StringImpl *)*((_QWORD *)this + 1);
    if ((v10 & 1) != 0)
    {
      v10 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope(this, a1);
      if (!v10)
        goto LABEL_17;
    }
    else if (!v10)
    {
LABEL_17:
      v20 = v10;
      goto LABEL_18;
    }
    *(_DWORD *)v10 += 2;
    goto LABEL_17;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v21, a1);
LABEL_18:
  if (*((_DWORD *)v3 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v3);
    v11 = v20;
    if (hasExceptionsAfterHandlingTraps)
    {
      v19 = 1;
      v20 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v17);
        else
          *(_DWORD *)v11 -= 2;
      }
      v14 = 0;
      v13 = 1;
      goto LABEL_24;
    }
  }
  else
  {
    v11 = v20;
  }
  v19 = 0;
  v18 = 0;
  v21 = v11;
  WebCore::MediaMetadata::setAlbum(v9, &v21, this);
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v12);
    else
      *(_DWORD *)v11 -= 2;
  }
  v13 = 0;
  v14 = 1;
LABEL_24:
  ((void (*)(const WTF::StringImpl **, uint64_t *))off_1E32B54C8[v13])(&v21, &v18);
  return v14;
}

uint64_t WebCore::jsMediaMetadata_artwork(JSC *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  JSC::VM *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  JSC::VM *v33;
  int v34;
  unsigned __int8 *v35;
  unsigned int v36;
  unsigned __int8 *v37;
  unsigned int v38;
  unsigned __int8 *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  JSValue v44;
  void *v45;
  JSC::VM *v46;
  JSC::JSObject *v47;
  JSC::JSGlobalObject *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v52;
  JSC::VM *v53;
  BOOL v54;
  uint64_t v55;
  WTF *v56;
  _OWORD v57[4];
  uint64_t v58;
  JSC::VM *v59;
  WTF *v60;
  unint64_t v61;
  int v62;
  int v63;
  uint64_t v64;

  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v5 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v59 = v5;
  v54 = 0;
  v55 = 0x800000000;
  v56 = (WTF *)((char *)v57 + 8);
  v58 = 0;
  memset(v57, 0, sizeof(v57));
  v6 = *(_DWORD *)(v3 + 52);
  if (v6 >= 9)
  {
    v54 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v55) == 1;
    v6 = *(_DWORD *)(v3 + 52);
  }
  v53 = v5;
  if (v6)
  {
    v7 = 24 * v6;
    v8 = (uint64_t *)(*(_QWORD *)(v3 + 40) + 16);
    do
    {
      v9 = v4;
      v10 = *((_QWORD *)a1 + 7);
      v11 = JSC::StructureCache::emptyObjectStructureForPrototype();
      v12 = 8 * *(unsigned __int8 *)(v11 + 14);
      v13 = JSC::allocateCell<JSC::JSFinalObject>(v10, v12 + 16);
      v14 = *(_DWORD *)(v11 + 8);
      *(_DWORD *)v13 = v11 >> 4;
      *(_DWORD *)(v13 + 4) = v14;
      *(_QWORD *)(v13 + 8) = 0;
      bzero((void *)(v13 + 16), v12);
      if (*(_BYTE *)(v10 + 755))
        __dmb(0xAu);
      v15 = *((_QWORD *)a1 + 7);
      v16 = *(v8 - 1);
      if (v16 && (v17 = *(_DWORD *)(v16 + 4)) != 0)
      {
        if (v17 == 1)
        {
          v35 = *(unsigned __int8 **)(v16 + 8);
          if ((*(_BYTE *)(v16 + 16) & 4) != 0)
          {
            v36 = *v35;
LABEL_51:
            v18 = *(_QWORD *)(v15 + 8 * v36 + 42216);
            goto LABEL_13;
          }
          v41 = *(unsigned __int16 *)v35;
          if (v41 <= 0xFF)
          {
            v36 = v41;
            goto LABEL_51;
          }
        }
        v18 = *(_QWORD *)(v15 + 64760);
        if (!v18 || v16 != *(_QWORD *)(v18 + 8))
          v18 = JSC::jsStringWithCacheSlowCase();
      }
      else
      {
        v18 = *(_QWORD *)(v15 + 41968);
      }
LABEL_13:
      if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
      {
LABEL_74:
        v13 = 0;
        goto LABEL_75;
      }
      WTF::AtomStringImpl::addLiteral();
      v19 = v60;
      v60 = 0;
      v61 = v13;
      v62 = -1;
      v63 = 0x1000000;
      v64 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v13, (JSC::VM *)v10, (unint64_t)v19, v18, 0, (uint64_t)&v60);
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v20);
        else
          *(_DWORD *)v19 -= 2;
      }
      v21 = *((_QWORD *)a1 + 7);
      v22 = *(v8 - 2);
      if (v22 && (v23 = *(_DWORD *)(v22 + 4)) != 0)
      {
        if (v23 == 1)
        {
          v37 = *(unsigned __int8 **)(v22 + 8);
          if ((*(_BYTE *)(v22 + 16) & 4) != 0)
          {
            v38 = *v37;
LABEL_54:
            v24 = *(_QWORD *)(v21 + 8 * v38 + 42216);
            goto LABEL_23;
          }
          v42 = *(unsigned __int16 *)v37;
          if (v42 <= 0xFF)
          {
            v38 = v42;
            goto LABEL_54;
          }
        }
        v24 = *(_QWORD *)(v21 + 64760);
        if (!v24 || v22 != *(_QWORD *)(v24 + 8))
          v24 = JSC::jsStringWithCacheSlowCase();
      }
      else
      {
        v24 = *(_QWORD *)(v21 + 41968);
      }
LABEL_23:
      if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
        goto LABEL_74;
      WTF::AtomStringImpl::addLiteral();
      v25 = v60;
      v60 = 0;
      v61 = v13;
      v62 = -1;
      v63 = 0x1000000;
      v64 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v13, (JSC::VM *)v10, (unint64_t)v25, v24, 0, (uint64_t)&v60);
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v26);
        else
          *(_DWORD *)v25 -= 2;
      }
      v27 = *((_QWORD *)a1 + 7);
      v28 = *v8;
      if (*v8 && (v29 = *(_DWORD *)(v28 + 4)) != 0)
      {
        if (v29 == 1)
        {
          v39 = *(unsigned __int8 **)(v28 + 8);
          if ((*(_BYTE *)(v28 + 16) & 4) != 0)
          {
            v40 = *v39;
LABEL_57:
            v30 = *(_QWORD *)(v27 + 8 * v40 + 42216);
            goto LABEL_33;
          }
          v43 = *(unsigned __int16 *)v39;
          if (v43 <= 0xFF)
          {
            v40 = v43;
            goto LABEL_57;
          }
        }
        v30 = *(_QWORD *)(v27 + 64760);
        if (!v30 || v28 != *(_QWORD *)(v30 + 8))
          v30 = JSC::jsStringWithCacheSlowCase();
      }
      else
      {
        v30 = *(_QWORD *)(v27 + 41968);
      }
LABEL_33:
      if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
        goto LABEL_74;
      WTF::AtomStringImpl::addLiteral();
      v31 = v60;
      v60 = 0;
      v61 = v13;
      v62 = -1;
      v63 = 0x1000000;
      v64 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v13, (JSC::VM *)v10, (unint64_t)v31, v30, 0, (uint64_t)&v60);
      if (v31)
      {
        v33 = v53;
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v32);
        else
          *(_DWORD *)v31 -= 2;
        goto LABEL_37;
      }
LABEL_75:
      v33 = v53;
LABEL_37:
      if (*((_DWORD *)v33 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v33) & 1) != 0)
        goto LABEL_91;
      v34 = v55;
      if ((_DWORD)v55 == HIDWORD(v55) || v56 != (WTF *)((char *)v57 + 8) && v56)
      {
        v44.super.isa = (Class)v13;
        if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v55, v44) == 1)
          v54 = 1;
      }
      else
      {
        *((_QWORD *)v56 + v55) = v13;
        LODWORD(v55) = v34 + 1;
      }
      v8 += 3;
      v7 -= 24;
      v4 = v9;
    }
    while (v7);
  }
  if (v54)
  {
    JSC::throwOutOfMemoryError();
  }
  else
  {
    v60 = v56;
    LODWORD(v61) = v55;
    v46 = *(JSC::VM **)(v4 + 56);
    if (*((_DWORD *)v46 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v46) & 1) != 0)
      v48 = 0;
    else
      v48 = (JSC::JSGlobalObject *)JSC::constructArray();
    if (!*((_DWORD *)v53 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v53) & 1) == 0)
    {
      v49 = JSC::objectConstructorFreeze(a1, v48, v47);
      goto LABEL_81;
    }
  }
LABEL_91:
  v49 = 0;
LABEL_81:
  v50 = *(uint64_t **)&v57[0];
  if (*(_QWORD *)&v57[0])
  {
    v60 = (WTF *)&v55;
    v52 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v57[0], (uint64_t *)&v60);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v50, v52);
  }
  if (v56 != (WTF *)((char *)v57 + 8) && v56)
    WTF::fastFree(v56, v45);
  return v49;
}

BOOL WebCore::setJSMediaMetadata_artwork(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  unsigned int *v11;
  WTF::StringImpl *v12;
  JSValue v13;
  int i;
  unsigned int v15;
  JSC::JSCell *IndexQuickly;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSC::JSCell *v23;
  uint64_t v24;
  unint64_t v25;
  WTF::StringImpl *v26;
  unsigned int v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  JSValue v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  char v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;

  v4 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMediaMetadata::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMediaMetadata::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(unsigned int **)(a2 + 24);
  v42 = (WTF::StringImpl *)*((_QWORD *)a1 + 7);
  if ((a3 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a3 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v18 = v39;
    v39 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = 0;
    v20 = 1;
    v38 = 1;
    goto LABEL_50;
  }
  v39 = 0;
  v40 = 0;
  if (JSC::getIterationMode() == 2)
  {
    for (i = 1; ; ++i)
    {
      v15 = (*(_BYTE *)(a3 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(a3 + 8) - 8) : 0;
      if (i - 1 >= v15)
        break;
      IndexQuickly = (JSC::JSCell *)JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)a3, i - 1, 0);
      if (!IndexQuickly)
        IndexQuickly = (JSC::JSCell *)JSC::JSObject::get((JSC::JSObject *)a3, a1, (i - 1));
      if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
        break;
      WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::MediaImage>>::convert(a1, IndexQuickly, (uint64_t)&v39);
      if (*(_QWORD *)(v4 + 16))
      {
        v24 = JSC::JSArrayIterator::create();
        v25 = i | 0xFFFE000000000000;
        if (i < 0)
          v25 = COERCE__INT64((double)i) + 0x2000000000000;
        *(_QWORD *)(v24 + 16) = v25;
        goto LABEL_45;
      }
    }
  }
  else
  {
    JSC::iteratorForIterable(a1, (JSC::JSGlobalObject *)a3, v13);
    if (!*(_DWORD *)(v4 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) == 0)
    {
      while (1)
      {
        v21 = JSC::iteratorStep();
        if (*(_QWORD *)(v4 + 16) || v21 == 6)
          break;
        v23 = (JSC::JSCell *)JSC::iteratorValue();
        if (*(_DWORD *)(v4 + 80))
        {
          if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
            break;
        }
        WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::MediaImage>>::convert(a1, v23, (uint64_t)&v39);
        if (*(_QWORD *)(v4 + 16))
        {
LABEL_45:
          JSC::iteratorClose();
          break;
        }
      }
    }
  }
  if (*(_DWORD *)(v4 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4))
  {
    v20 = 1;
    v38 = 1;
    WTF::Vector<WebCore::InspectorAuditResourcesObject::Resource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v39, v12);
  }
  else
  {
    v26 = v39;
    v36 = v39;
    v27 = v40;
    v28 = HIDWORD(v40);
    v39 = 0;
    v40 = 0;
    v37 = __PAIR64__(v28, v27);
    v38 = 0;
    WTF::Vector<WebCore::InspectorAuditResourcesObject::Resource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v39, v12);
    v29 = (WTF::StringImpl *)WebCore::JSDOMGlobalObject::scriptExecutionContext(a1);
    if (v29)
    {
      v36 = 0;
      v37 = 0;
      v42 = v26;
      v43 = (WTF::StringImpl *)__PAIR64__(v28, v27);
      WebCore::MediaMetadata::setArtwork(v11, v29, (uint64_t *)&v42, (uint64_t)&v39);
      WTF::Vector<WebCore::InspectorAuditResourcesObject::Resource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v42, v30);
      if (v41)
      {
        v32 = (WTF::StringImpl *)v39;
        LOBYTE(v42) = (_BYTE)v39;
        v33 = v40;
        v40 = 0;
        v43 = v33;
        if (!*(_QWORD *)(v4 + 16))
        {
          v34.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)v39, (JSC::JSGlobalObject *)&v43);
          JSC::VM::throwException((JSC::VM *)v4, a1, v34);
          v33 = v43;
        }
        v43 = 0;
        if (v33)
        {
          if (*(_DWORD *)v33 == 2)
            WTF::StringImpl::destroy(v33, v32);
          else
            *(_DWORD *)v33 -= 2;
        }
        if (v41)
        {
          v35 = v40;
          v40 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
              WTF::StringImpl::destroy(v35, v32);
            else
              *(_DWORD *)v35 -= 2;
          }
        }
      }
      v20 = 0;
      v19 = 1;
      goto LABEL_50;
    }
    v20 = 0;
  }
  v19 = 0;
LABEL_50:
  ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32B6238[v20])(&v39, &v36);
  return v19;
}

uint64_t WebCore::JSMediaMetadataOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSMediaMetadataOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  WebCore::MediaMetadata *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore::MediaMetadata *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WTF *v24;
  void *v25;

  v3 = *(WebCore::MediaMetadata **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WebCore::MediaMetadata **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WebCore::MediaMetadata **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::MediaMetadata::~MediaMetadata(v3, a2);
    WTF::fastFree(v24, v25);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::createWrapper<WebCore::MediaMetadata,WebCore::MediaMetadata>(uint64_t a1, WTF **a2)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  void *v34;
  int v35;
  unint64_t SlowCase;
  WTF *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *Allocator;
  unint64_t v43;
  _QWORD *v44;
  WTF *v45;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSMediaMetadata::s_info + ~((_QWORD)&WebCore::JSMediaMetadata::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaMetadata::s_info + ~((_QWORD)&WebCore::JSMediaMetadata::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSMediaMetadata::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSMediaMetadata::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSMediaMetadataPrototype::createStructure(v14, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSMediaMetadataPrototype::create((WebCore::JSMediaMetadataPrototype *)v14, Structure, v16, v17);
  v19 = WebCore::JSMediaMetadata::createStructure(v14, a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSMediaMetadata::s_info);
LABEL_8:
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(v20 + 41456);
  v22 = *(_QWORD *)(v21 + 23536);
  v23 = *(_QWORD **)(v22 + 1008);
  if (v23)
    goto LABEL_28;
  v24 = *(_QWORD *)(v21 + 22648);
  if (__ldaxr((unsigned __int8 *)v24))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v24))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v24);
LABEL_13:
  v26 = *(_QWORD *)(v24 + 2824);
  if (!*(_QWORD *)(v26 + 1008))
  {
    v27 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v45, "IsoSpace T");
    v44 = 0;
    MEMORY[0x19AEA3204](v27, &v45, v20 + 192, v20 + 1872, 32, 8, &v44);
    v29 = (uint64_t)v44;
    v44 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v45;
    v45 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
        WTF::fastFree(v30, v28);
      else
        --*(_DWORD *)v30;
    }
    v31 = *(_QWORD *)(v26 + 1008);
    *(_QWORD *)(v26 + 1008) = v27;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v32 = *(_QWORD *)(v22 + 1008);
  *(_QWORD *)(v22 + 1008) = v23;
  if (v32)
  {
    v33 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v33, v34);
  }
  v35 = __ldxr((unsigned __int8 *)v24);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v24))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_28:
  SlowCase = v23[3];
  if (SlowCase < v23[4])
  {
LABEL_29:
    v23[3] = SlowCase + 32;
    goto LABEL_30;
  }
  SlowCase = v23[5];
  if ((SlowCase & 1) == 0)
  {
    v43 = *(_QWORD *)(SlowCase + 8) ^ v23[6];
    v23[4] = SlowCase + HIDWORD(v43);
    v23[5] = SlowCase + (int)v43;
    goto LABEL_29;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  v37 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v37;
  if (*(_BYTE *)(v20 + 755))
    __dmb(0xAu);
  v38 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE335FE0 & 1) == 0)
  {
    qword_1EE335FD8 = (uint64_t)&off_1E32B3590;
    byte_1EE335FE0 = 1;
  }
  v45 = v4;
  if ((SlowCase & 8) != 0)
    v39 = (SlowCase - 112) | 1;
  else
    v39 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v39 & 1) != 0)
    v40 = v39 + 47;
  else
    v40 = *(_QWORD *)v39 + 32;
  Allocator = *(_QWORD **)(v40 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v40 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE335FD8;
  Allocator[2] = v38;
  v44 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v38 + 32), (uint64_t *)&v45, (uint64_t *)&v44);
  if (v44)
    v44[1] = 3;
  return SlowCase;
}

uint64_t WebCore::JSMediaQueryList::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSMediaQueryList::JSMediaQueryList(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = *a4;
  *a4 = 0;
  v7 = 0;
  *(_QWORD *)(WebCore::JSDOMObject::JSDOMObject(a1, a2) + 24) = v5;
  WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>::~Ref(&v7);
  return a1;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaQueryList>,(WebCore::DOMConstructorID)369>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2952);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v21) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v19 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v19);
    v5[2] = SlowCase + (int)v19;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v21, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaQueryList>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v20 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v20);
    v10[2848] = v2 + (int)v20;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v21);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v21);
  v14 = v21;
  v21 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v21);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v17 = *(_QWORD *)(WebCore::getDOMStructure<WebCore::JSMediaQueryList>((WebCore::JSMediaQueryList *)a1, (JSC::VM *)a2)
                  + 48);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v17, 14, (uint64_t)&v21);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2952) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsMediaQueryListConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSMediaQueryListPrototype::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaQueryList>,(WebCore::DOMConstructorID)369>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsMediaQueryList_media(uint64_t a1, WebCore::MediaQueryList **a2, const Condition *a3)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t *v6;
  WTF::StringImpl *v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  WTF::StringImpl *v14;

  WebCore::MediaQueryList::media(a2[3], (WTF::StringImpl *)a2, a3, &v14);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = (uint64_t *)(v5 + 41968);
  v7 = v14;
  if (!v14)
    return *v6;
  v8 = *((_DWORD *)v14 + 1);
  if (v8)
  {
    if (v8 != 1)
    {
LABEL_4:
      v9 = *(_QWORD *)(v5 + 64760);
      if (!v9 || v14 != *(WTF::StringImpl **)(v9 + 8))
        v9 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_7;
    }
    v11 = (unsigned __int8 *)*((_QWORD *)v14 + 1);
    if ((*((_BYTE *)v14 + 16) & 4) != 0)
    {
      v12 = *v11;
    }
    else
    {
      v13 = *(unsigned __int16 *)v11;
      if (v13 > 0xFF)
        goto LABEL_4;
      v12 = v13;
    }
    v9 = *(_QWORD *)(v5 + 8 * v12 + 42216);
  }
  else
  {
    v9 = *v6;
  }
LABEL_7:
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, v4);
  else
    *(_DWORD *)v7 -= 2;
  return v9;
}

uint64_t WebCore::jsMediaQueryList_matches(uint64_t a1, uint64_t a2)
{
  if (WebCore::MediaQueryList::matches(*(WebCore::MediaQueryList **)(a2 + 24)))
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsMediaQueryList_onchange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_DWORD **)(a2 + 24);
  v6 = v5 + 6;
  ++v5[6];
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
    v8 = WebCore::threadGlobalDataSlow(a1);
  v9 = *(_QWORD *)(v8 + 40);
  if (!v9)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
    v9 = *(_QWORD *)(v8 + 40);
  }
  v10 = WebCore::eventHandlerAttribute((WebCore *)v5, (WebCore::EventTarget *)(v9 + 368), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  WTF::RefCounted<WebCore::MediaQueryList>::deref(v6);
  return v10;
}

uint64_t WebCore::setJSMediaQueryList_onchange(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMediaQueryList::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMediaQueryList::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(WebCore::EventTarget **)(a2 + 24);
  ++*((_DWORD *)v11 + 6);
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 368), a3, (_DWORD *)a2);
  WTF::RefCounted<WebCore::MediaQueryList>::deref((_DWORD *)v11 + 6);
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::JSMediaQueryListOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v6 = v5[5];
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (v5[6] || (result = (*(uint64_t (**)(_QWORD *))(v5[4] + 64))(v5 + 4), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

void WebCore::JSMediaQueryListOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v4 = (_DWORD *)(v3 + 24);
  ++*(_DWORD *)(v3 + 24);
  v5 = v3 + 8;
  if (!v3)
    v5 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    JSC::weakRemove<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,WebCore::JSBlob *>((uint64_t *)(a3 + 32), v3);
  }
  else if (*(_QWORD *)v5)
  {
    *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
    *(_QWORD *)v5 = 0;
  }
  WTF::RefCounted<WebCore::MediaQueryList>::deref(v4);
}

uint64_t WebCore::createWrapper<WebCore::MediaQueryList,WebCore::MediaQueryList>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *a2;
  v5 = WebCore::getDOMStructure<WebCore::JSMediaQueryList>(*(WebCore::JSMediaQueryList **)(a1 + 56), (JSC::VM *)a1);
  v6 = WebCore::JSMediaQueryList::create(v5, (JSC::VM *)a1, a2);
  WebCore::cacheWrapper<WebCore::MediaQueryList,WebCore::JSMediaQueryList>(*(_QWORD *)(a1 + 3320), v4, v6);
  return v6;
}

uint64_t WebCore::wrap<WebCore::MediaQueryList>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v3 = *(_QWORD *)(a2 + 3320);
  if (*(_DWORD *)(v3 + 48))
  {
    v7 = *(_QWORD *)(v3 + 32);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 - 8);
      v9 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
      v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
      v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
      v12 = v8 & ((v11 >> 31) ^ v11);
      v13 = *(_QWORD *)(v7 + 16 * v12);
      if (v13 == a3)
      {
LABEL_13:
        v4 = *(_QWORD *)(v7 + 16 * v12 + 8);
        if (v4)
          goto LABEL_3;
      }
      else
      {
        v14 = 1;
        while (v13)
        {
          v12 = ((_DWORD)v12 + v14) & v8;
          v13 = *(_QWORD *)(v7 + 16 * v12);
          ++v14;
          if (v13 == a3)
            goto LABEL_13;
        }
      }
    }
  }
  else
  {
    v4 = *(_QWORD *)(a3 + 8);
    if (v4)
    {
LABEL_3:
      if ((*(_BYTE *)(v4 + 8) & 3) == 0)
      {
        v5 = *(_QWORD *)v4;
        if (*(_QWORD *)v4)
          return v5;
      }
    }
  }
  ++*(_DWORD *)(a3 + 24);
  v15 = a3;
  v5 = WebCore::toJSNewlyCreated(a1, a2, &v15);
  if (v15)
    WTF::RefCounted<WebCore::MediaQueryList>::deref((_DWORD *)(v15 + 24));
  return v5;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSMediaQueryListEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  uint64_t v2;
  JSC::VM *v4;
  unint64_t v6;
  int v7;
  JSC::JSCell *v8;
  _DWORD *v9;
  _BOOL4 v10;
  _BOOL4 v11;
  _BOOL4 v12;
  BOOL v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  JSC::VM *v17;
  double v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  JSC::VM *v22;
  double v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  JSC::VM *v27;
  double v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  JSC::VM *v32;
  double v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  void (***v36)(WebCore::MediaQueryListEvent *__hidden);
  WTF::StringImpl *v37;
  WebCore::JSDOMGlobalObject *v38;
  void (**v39)(WebCore::MediaQueryListEvent *__hidden);
  int v40;
  unsigned int v41;
  int v42;
  void (***v43)(WebCore::MediaQueryListEvent *__hidden);
  JSC::VM *v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char **v51;
  int v52;
  unint64_t v53;
  WebCore::JSEvent *v54;
  JSC::JSCell *v55;
  unint64_t Structure;
  JSC::Structure *v57;
  JSC::JSCell *v58;
  uint64_t v59;
  JSCell *v60;
  JSC::JSCell *v61;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v63;
  JSC::JSGlobalObject *v64;
  JSC::VM *v65;
  WebCore::JSDOMGlobalObject *v66;
  JSC::Structure *v67;
  JSC::VM *FunctionRealm;
  uint64_t v69;
  unsigned int v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char **v75;
  int v76;
  JSC::JSCell *v77;
  unint64_t v78;
  JSC::Structure *v79;
  JSC::JSCell *v80;
  uint64_t v81;
  unint64_t SubclassStructure;
  void (***v83)(WebCore::MediaQueryListEvent *__hidden);
  uint64_t v84;
  JSC::VM *v86;
  _DWORD *v87;
  JSValue v88;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v90;
  BOOL v91;
  int v92;
  uint64_t v93;
  int *v94;
  int v95;
  BOOL v96;
  int v97;
  uint64_t v98;
  int *v99;
  int v100;
  BOOL v101;
  int v102;
  uint64_t v103;
  int *v104;
  int v105;
  BOOL v106;
  int v107;
  uint64_t v108;
  int *v109;
  int v110;
  unint64_t v111;
  JSC::VM *v112;
  _BYTE v113[8];
  uint64_t v114;
  BOOL v115;
  int v116;
  WTF::StringImpl *v117;
  int v118;
  _DWORD *v119;
  _DWORD *v120;
  void (***v121)(WebCore::MediaQueryListEvent *__hidden);

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v88.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v4, a1, v88);
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 24);
    WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v117);
    v7 = v118;
    if (v118)
    {
      v60 = 0;
    }
    else
    {
      v112 = v4;
      v111 = v6;
      if ((unint64_t)(*(int *)(a2 + 32) - 3) >= 0xFFFFFFFFFFFFFFFELL)
      {
        v10 = 0;
        v11 = 0;
        v12 = 0;
        v13 = 0;
LABEL_58:
        v9 = (_DWORD *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
          *v9 += 2;
        while (1)
        {
          v113[0] = v10;
          v113[1] = v11;
          v113[2] = v12;
          v115 = v13;
          v116 = 0;
          if (!v118)
          {
            v35 = v117;
            v117 = 0;
            v114 = 0;
            v36 = (void (***)(WebCore::MediaQueryListEvent *__hidden))bmalloc::api::isoAllocate();
            WTF::MonotonicTime::now((WTF::MonotonicTime *)v36);
            v36[1] = 0;
            if (v10)
              v40 = 2424834;
            else
              v40 = 2424832;
            v41 = (8 * v12) | (4 * v11) | v40 | (v35 != 0) | *((_DWORD *)v36 + 5) & 0xFFC00000;
            *((_DWORD *)v36 + 4) = 1;
            *((_DWORD *)v36 + 5) = v41;
            if (v35)
            {
              *(_DWORD *)v35 += 2;
              v41 = *((_DWORD *)v36 + 5);
            }
            v36[3] = (void (**)(WebCore::MediaQueryListEvent *__hidden))v35;
            v36[4] = 0;
            v36[5] = 0;
            v36[6] = 0;
            v36[7] = v39;
            v36[8] = 0;
            *((_DWORD *)v36 + 5) = v41 | 0x4000;
            *v36 = off_1E3399940;
            if (v9)
            {
              v42 = *v9;
              *v9 += 2;
              v36[9] = (void (**)(WebCore::MediaQueryListEvent *__hidden))v9;
              *((_BYTE *)v36 + 80) = v13;
              v121 = v36;
              if (v42)
                *v9 = v42;
              else
                WTF::StringImpl::destroy((WTF::StringImpl *)v9, v37);
            }
            else
            {
              v36[9] = 0;
              *((_BYTE *)v36 + 80) = v13;
              v121 = v36;
            }
            if (v35)
            {
              if (*(_DWORD *)v35 == 2)
                WTF::StringImpl::destroy(v35, v37);
              else
                *(_DWORD *)v35 -= 2;
            }
            v43 = v121;
            if (*v121 != off_1E3399940)
            {
              __break(0xC471u);
              JUMPOUT(0x194D1B850);
            }
            v44 = *(JSC::VM **)(v111 + 40);
            v45 = *((_QWORD *)v44 + 412);
            if (!v45)
              goto LABEL_79;
            v46 = *(_DWORD *)(v45 - 8);
            v47 = ((unint64_t)&WebCore::JSMediaQueryListEvent::s_info
                 + ~((_QWORD)&WebCore::JSMediaQueryListEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaQueryListEvent::s_info
                                                                               + ~((_QWORD)&WebCore::JSMediaQueryListEvent::s_info << 32)) >> 22);
            v48 = 9 * ((v47 + ~(v47 << 13)) ^ ((v47 + ~(v47 << 13)) >> 8));
            v49 = (v48 ^ (v48 >> 15)) + ~((v48 ^ (v48 >> 15)) << 27);
            v50 = v46 & ((v49 >> 31) ^ v49);
            v51 = *(char ***)(v45 + 16 * v50);
            if (v51 == &WebCore::JSMediaQueryListEvent::s_info)
            {
LABEL_78:
              v53 = *(_QWORD *)(v45 + 16 * v50 + 8);
              if (!v53)
                goto LABEL_79;
            }
            else
            {
              v52 = 1;
              while (v51)
              {
                v50 = ((_DWORD)v50 + v52) & v46;
                v51 = *(char ***)(v45 + 16 * v50);
                ++v52;
                if (v51 == &WebCore::JSMediaQueryListEvent::s_info)
                  goto LABEL_78;
              }
LABEL_79:
              v54 = (WebCore::JSEvent *)*((_QWORD *)v44 + 7);
              v55 = (JSC::JSCell *)WebCore::JSEvent::prototype(v54, v44, v38);
              Structure = WebCore::JSMediaQueryListEventPrototype::createStructure((uint64_t *)v54, (uint64_t)v44, v55);
              *(_DWORD *)(Structure + 16) |= 0x80000u;
              v58 = (JSC::JSCell *)WebCore::JSMediaQueryListEventPrototype::create(v54, v44, Structure, v57);
              v59 = WebCore::JSMediaQueryListEvent::createStructure((uint64_t *)v54, (uint64_t)v44, v58);
              v53 = WebCore::cacheDOMStructure((JSCell *)v44, v59, (uint64_t)&WebCore::JSMediaQueryListEvent::s_info);
            }
            v60 = (JSCell *)WebCore::JSMediaQueryListEvent::create(v53, v44, (uint64_t *)&v121);
            WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)v44 + 415), (uint64_t)v43, (uint64_t)v60);
            v61 = *(JSC::JSCell **)(a2 + 40);
            if (((unint64_t)v61 & 0xFFFE000000000002) != 0
              || (Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v61)) == 0
              || (v64 = Object, Object == *(JSC::JSGlobalObject **)(a2 + 24))
              || (v65 = (JSC::VM *)*((_QWORD *)a1 + 7),
                  FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, Object, v63),
                  *((_DWORD *)v65 + 20))
              && (JSC::VM::hasExceptionsAfterHandlingTraps(v65) & 1) != 0)
            {
LABEL_93:
              if (*((_DWORD *)v112 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v112) & 1) != 0)
                v60 = 0;
              v83 = v121;
              v121 = 0;
              if (v83)
              {
                if (*((_DWORD *)v83 + 4) == 1)
                  (*v83)[1]((WebCore::MediaQueryListEvent *)v83);
                else
                  --*((_DWORD *)v83 + 4);
              }
              v84 = 0;
              goto LABEL_98;
            }
            v69 = *((_QWORD *)FunctionRealm + 412);
            if (v69)
            {
              v70 = *(_DWORD *)(v69 - 8);
              v71 = ((unint64_t)&WebCore::JSMediaQueryListEvent::s_info
                   + ~((_QWORD)&WebCore::JSMediaQueryListEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaQueryListEvent::s_info
                                                                                 + ~((_QWORD)&WebCore::JSMediaQueryListEvent::s_info << 32)) >> 22);
              v72 = 9 * ((v71 + ~(v71 << 13)) ^ ((v71 + ~(v71 << 13)) >> 8));
              v73 = (v72 ^ (v72 >> 15)) + ~((v72 ^ (v72 >> 15)) << 27);
              v74 = v70 & ((v73 >> 31) ^ v73);
              v75 = *(char ***)(v69 + 16 * v74);
              if (v75 != &WebCore::JSMediaQueryListEvent::s_info)
              {
                v76 = 1;
                while (v75)
                {
                  v74 = ((_DWORD)v74 + v76) & v70;
                  v75 = *(char ***)(v69 + 16 * v74);
                  ++v76;
                  if (v75 == &WebCore::JSMediaQueryListEvent::s_info)
                    goto LABEL_89;
                }
                goto LABEL_90;
              }
LABEL_89:
              v66 = *(WebCore::JSDOMGlobalObject **)(v69 + 16 * v74 + 8);
              if (!v66)
                goto LABEL_90;
            }
            else
            {
LABEL_90:
              v77 = (JSC::JSCell *)WebCore::JSEvent::prototype(v65, FunctionRealm, v66);
              v78 = WebCore::JSMediaQueryListEventPrototype::createStructure((uint64_t *)v65, (uint64_t)FunctionRealm, v77);
              *(_DWORD *)(v78 + 16) |= 0x80000u;
              v80 = (JSC::JSCell *)WebCore::JSMediaQueryListEventPrototype::create(v65, FunctionRealm, v78, v79);
              v81 = WebCore::JSMediaQueryListEvent::createStructure((uint64_t *)v65, (uint64_t)FunctionRealm, v80);
              v66 = (WebCore::JSDOMGlobalObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v81, (uint64_t)&WebCore::JSMediaQueryListEvent::s_info);
            }
            SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v64, v66, v67);
            if (!*((_DWORD *)v65 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v65) & 1) == 0)
              JSC::JSObject::setStructure(v60, v65, SubclassStructure);
            goto LABEL_93;
          }
          v17 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_157:
          v91 = (_DWORD)v6 == 0;
LABEL_210:
          v10 = !v91;
LABEL_19:
          if (*((_DWORD *)v17 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v17) & 1) != 0)
            goto LABEL_122;
LABEL_20:
          WTF::AtomStringImpl::addLiteral();
          v19 = (WTF::StringImpl *)v121;
          v21 = JSC::JSObject::get((JSC::Structure *)v2, a1, (unint64_t)v121);
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, v20);
            else
              *(_DWORD *)v19 -= 2;
          }
          if (v9[20] && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
            goto LABEL_122;
          if (v21 == 10)
          {
            v11 = 0;
            goto LABEL_31;
          }
          v22 = (JSC::VM *)*((_QWORD *)a1 + 7);
          if (v21 >= 0xFFFE000000000000)
            break;
          *(_QWORD *)&v23 = v21 - 0x2000000000000;
          if (v21 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
          {
            if ((v21 & 0xFFFE000000000002) != 0)
            {
              v11 = v21 == 7;
              goto LABEL_30;
            }
            v97 = *(unsigned __int8 *)(v21 + 5);
            if (v97 == 3)
            {
              v100 = *(_DWORD *)(v21 + 8);
              goto LABEL_198;
            }
            if (v97 == 2)
            {
              v98 = *(_QWORD *)(v21 + 8);
              if ((v98 & 1) != 0)
                v99 = (int *)(v21 + 16);
              else
                v99 = (int *)(v98 + 4);
              v100 = *v99;
LABEL_198:
              v96 = v100 == 0;
            }
            else
            {
              if ((*(_BYTE *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0xA) & 1) == 0)
              {
LABEL_200:
                v11 = 1;
                goto LABEL_30;
              }
              v96 = *(_QWORD *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
            }
LABEL_214:
            v11 = !v96;
            goto LABEL_30;
          }
          if (v23 > 0.0)
            goto LABEL_200;
          v11 = v23 < 0.0;
LABEL_30:
          if (*((_DWORD *)v22 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v22) & 1) != 0)
            goto LABEL_122;
LABEL_31:
          WTF::AtomStringImpl::addLiteral();
          v24 = (WTF::StringImpl *)v121;
          v26 = JSC::JSObject::get((JSC::Structure *)v2, a1, (unint64_t)v121);
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v25);
            else
              *(_DWORD *)v24 -= 2;
          }
          if (v9[20] && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
            goto LABEL_122;
          if (v26 == 10)
          {
            v12 = 0;
            goto LABEL_42;
          }
          v27 = (JSC::VM *)*((_QWORD *)a1 + 7);
          if (v26 >= 0xFFFE000000000000)
          {
            v101 = (_DWORD)v26 == 0;
            goto LABEL_218;
          }
          *(_QWORD *)&v28 = v26 - 0x2000000000000;
          if (v26 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
          {
            if ((v26 & 0xFFFE000000000002) != 0)
            {
              v12 = v26 == 7;
              goto LABEL_41;
            }
            v102 = *(unsigned __int8 *)(v26 + 5);
            if (v102 == 3)
            {
              v105 = *(_DWORD *)(v26 + 8);
            }
            else
            {
              if (v102 != 2)
              {
                if ((*(_BYTE *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0xA) & 1) == 0)
                {
LABEL_204:
                  v12 = 1;
                  goto LABEL_41;
                }
                v101 = *(_QWORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
                goto LABEL_218;
              }
              v103 = *(_QWORD *)(v26 + 8);
              if ((v103 & 1) != 0)
                v104 = (int *)(v26 + 16);
              else
                v104 = (int *)(v103 + 4);
              v105 = *v104;
            }
            v101 = v105 == 0;
LABEL_218:
            v12 = !v101;
            goto LABEL_41;
          }
          if (v28 > 0.0)
            goto LABEL_204;
          v12 = v28 < 0.0;
LABEL_41:
          if (*((_DWORD *)v27 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v27) & 1) != 0)
            goto LABEL_122;
LABEL_42:
          WTF::AtomStringImpl::addLiteral();
          v29 = (WTF::StringImpl *)v121;
          v31 = JSC::JSObject::get((JSC::Structure *)v2, a1, (unint64_t)v121);
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, v30);
            else
              *(_DWORD *)v29 -= 2;
          }
          if (v9[20] && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
            goto LABEL_122;
          if (v31 == 10)
          {
            v13 = 0;
            goto LABEL_53;
          }
          v32 = (JSC::VM *)*((_QWORD *)a1 + 7);
          if (v31 >= 0xFFFE000000000000)
          {
            v106 = (_DWORD)v31 == 0;
            goto LABEL_222;
          }
          *(_QWORD *)&v33 = v31 - 0x2000000000000;
          if (v31 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
          {
            if ((v31 & 0xFFFE000000000002) != 0)
            {
              v13 = v31 == 7;
              goto LABEL_52;
            }
            v107 = *(unsigned __int8 *)(v31 + 5);
            if (v107 == 3)
            {
              v110 = *(_DWORD *)(v31 + 8);
            }
            else
            {
              if (v107 != 2)
              {
                if ((*(_BYTE *)(16 * (*(_DWORD *)v31 & 0xFFFFFFFE) + 0xA) & 1) == 0)
                {
LABEL_208:
                  v13 = 1;
                  goto LABEL_52;
                }
                v106 = *(_QWORD *)(16 * (*(_DWORD *)v31 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
                goto LABEL_222;
              }
              v108 = *(_QWORD *)(v31 + 8);
              if ((v108 & 1) != 0)
                v109 = (int *)(v31 + 16);
              else
                v109 = (int *)(v108 + 4);
              v110 = *v109;
            }
            v106 = v110 == 0;
LABEL_222:
            v13 = !v106;
            goto LABEL_52;
          }
          if (v33 > 0.0)
            goto LABEL_208;
          v13 = v33 < 0.0;
LABEL_52:
          if (*((_DWORD *)v32 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v32) & 1) != 0)
            goto LABEL_122;
LABEL_53:
          WTF::AtomStringImpl::addLiteral();
          v6 = (unint64_t)v121;
          v2 = JSC::JSObject::get((JSC::Structure *)v2, a1, (unint64_t)v121);
          if (v6)
          {
            if (*(_DWORD *)v6 == 2)
              WTF::StringImpl::destroy((WTF::StringImpl *)v6, v34);
            else
              *(_DWORD *)v6 -= 2;
          }
          if (v9[20] && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
            goto LABEL_122;
          if (v2 == 10)
            goto LABEL_58;
          v121 = (void (***)(WebCore::MediaQueryListEvent *__hidden))v2;
          v86 = (JSC::VM *)*((_QWORD *)a1 + 7);
          if ((v2 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v2 + 5) != 2)
          {
            JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v121, a1);
            goto LABEL_108;
          }
          v87 = *(_DWORD **)(v2 + 8);
          if ((v87 & 1) != 0)
          {
            v87 = *(_DWORD **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v2, a1);
            if (!v87)
              goto LABEL_107;
LABEL_106:
            *v87 += 2;
            goto LABEL_107;
          }
          if (v87)
            goto LABEL_106;
LABEL_107:
          v120 = v87;
LABEL_108:
          if (*((_DWORD *)v86 + 20))
          {
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v86);
            v9 = v120;
            if (hasExceptionsAfterHandlingTraps)
            {
              v120 = 0;
              if (v9)
              {
                if (*v9 == 2)
                  WTF::StringImpl::destroy((WTF::StringImpl *)v9, v90);
                else
                  *v9 -= 2;
              }
              goto LABEL_122;
            }
          }
          else
          {
            v9 = v120;
          }
        }
        v96 = (_DWORD)v21 == 0;
        goto LABEL_214;
      }
      v8 = *(JSC::JSCell **)(a2 + 56);
      v9 = (_DWORD *)*((_QWORD *)a1 + 7);
      v119 = v9;
      if (((unint64_t)v8 & 0xFFFFFFFFFFFFFFF7) == 2)
      {
        v10 = 0;
        v11 = 0;
        v12 = 0;
        v13 = 0;
        goto LABEL_58;
      }
      if (((unint64_t)v8 & 0xFFFE000000000002) == 0)
      {
        v14 = JSC::JSCell::getObject(v8);
        if (v14)
        {
          v2 = v14;
          WTF::AtomStringImpl::addLiteral();
          v15 = (WTF::StringImpl *)v121;
          v6 = JSC::JSObject::get((JSC::Structure *)v2, a1, (unint64_t)v121);
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v16);
            else
              *(_DWORD *)v15 -= 2;
          }
          if (v9[20] && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
            goto LABEL_122;
          if (v6 == 10)
          {
            v10 = 0;
            goto LABEL_20;
          }
          v17 = (JSC::VM *)*((_QWORD *)a1 + 7);
          if (v6 >= 0xFFFE000000000000)
            goto LABEL_157;
          *(_QWORD *)&v18 = v6 - 0x2000000000000;
          if (v6 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
          {
            if (v18 <= 0.0)
            {
              v10 = v18 < 0.0;
              goto LABEL_19;
            }
          }
          else
          {
            if ((v6 & 0xFFFE000000000002) != 0)
            {
              v10 = v6 == 7;
              goto LABEL_19;
            }
            v92 = *(unsigned __int8 *)(v6 + 5);
            if (v92 == 3)
            {
              v95 = *(_DWORD *)(v6 + 8);
LABEL_194:
              v91 = v95 == 0;
              goto LABEL_210;
            }
            if (v92 == 2)
            {
              v93 = *(_QWORD *)(v6 + 8);
              if ((v93 & 1) != 0)
                v94 = (int *)(v6 + 16);
              else
                v94 = (int *)(v93 + 4);
              v95 = *v94;
              goto LABEL_194;
            }
            if ((*(_BYTE *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0xA) & 1) != 0)
            {
              v91 = *(_QWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
              goto LABEL_210;
            }
          }
          v10 = 1;
          goto LABEL_19;
        }
      }
      JSC::throwTypeError();
LABEL_122:
      v60 = 0;
      v84 = 1;
      v116 = 1;
LABEL_98:
      ((void (*)(void (****)(WebCore::MediaQueryListEvent *__hidden), _BYTE *))off_1E32B6358[v84])(&v121, v113);
      v7 = v118;
    }
    if (v7 != -1)
      ((void (*)(_BYTE *, WTF::StringImpl **))off_1E32B5840[v7])(v113, &v117);
  }
  return v60;
}

uint64_t WebCore::JSMediaQueryListEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSMediaQueryListEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSMediaQueryListEventPrototype::create(WebCore::JSMediaQueryListEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSMediaQueryListEvent::s_info, &WebCore::JSMediaQueryListEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSMediaQueryListEvent>,(WebCore::DOMConstructorID)370>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2960);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSMediaQueryListEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSMediaQueryListEvent::s_info
         + ~((_QWORD)&WebCore::JSMediaQueryListEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaQueryListEvent::s_info
                                                                       + ~((_QWORD)&WebCore::JSMediaQueryListEvent::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSMediaQueryListEvent::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSMediaQueryListEvent::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEvent::prototype((WebCore::JSEvent *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSMediaQueryListEventPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSMediaQueryListEventPrototype::create((WebCore::JSMediaQueryListEventPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSMediaQueryListEvent::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSMediaQueryListEvent::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2960) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsMediaQueryListEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSMediaQueryListEventPrototype::s_info != (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSMediaQueryListEvent>,(WebCore::DOMConstructorID)370>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsMediaQueryListEvent_media(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 72);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsMediaQueryListEvent_matches(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 80))
    return 7;
  else
    return 6;
}

uint64_t WebCore::JSMediaQueryListEvent::subspaceForImpl(WebCore::JSMediaQueryListEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 3008);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 3008))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 3008);
    *(_QWORD *)(v8 + 3008) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 3008);
  *(_QWORD *)(v3 + 3008) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSMediaRecorder>::construct(JSC *this, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WebCore::JSDOMGlobalObject *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  JSC::VM *v14;
  uint64_t v15;
  _BOOL4 v16;
  char **v17;
  BOOL v18;
  JSCell *v20;
  WebCore::MediaStream *v21;
  JSC::JSCell *v22;
  uint64_t Object;
  JSC::Structure *v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;
  WTF::StringImpl *v31;
  char v32;
  int v33;
  unsigned int v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  JSC::VM *v41;
  WebCore::MediaStream *v42;
  uint64_t v43;
  char v44;
  WTF::StringImpl *v45;
  unint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WebCore::ContextDestructionObserver *v52;
  WebCore::ContextDestructionObserver *v53;
  int v54;
  WTF::StringImpl *v55;
  JSC::VM *v56;
  JSC::VM *v57;
  WTF::StringImpl *v58;
  JSC::JSCell *v59;
  JSC::JSGlobalObject *v60;
  JSC::JSObject *v61;
  JSC::JSGlobalObject *v62;
  JSC::VM *v63;
  JSC::JSObject *v64;
  JSC::Structure *v65;
  JSC::VM *FunctionRealm;
  uint64_t v67;
  unsigned int v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char **v73;
  int v74;
  JSC::JSCell *v75;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v77;
  JSC::Structure *v78;
  JSC::JSCell *v79;
  uint64_t v80;
  unint64_t SubclassStructure;
  int v82;
  bmalloc::api *v84;
  void *v85;
  bmalloc::api *v86;
  void *v87;
  JSValue v88;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  JSValue v92;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  char v98;
  char v99;
  uint64_t v100;
  WTF::StringImpl *v101;
  _BYTE v102[21];
  int v103[2];
  WTF::StringImpl *v104;
  int v105;
  WTF::StringImpl *v106;
  _BYTE v107[21];
  int v108;
  JSC::VM *v109;
  __int16 v110;
  char v111;
  __int16 v112;
  char v113;
  JSC::VM *v114;
  WebCore::MediaStream *v115;

  v3 = (JSC::VM *)*((_QWORD *)this + 7);
  v109 = v3;
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v88.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, this, v88);
  }
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(this, &v109, (uint64_t)"MediaRecorder", 14);
  v12 = v6;
  if (*(_BYTE *)(v6 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194D1CEBCLL);
  }
  v13 = *(_QWORD *)(a2 + 48);
  v14 = (JSC::VM *)*((_QWORD *)this + 7);
  v106 = v14;
  if ((v13 & 0xFFFE000000000002) != 0)
    goto LABEL_15;
  v15 = *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C);
  v16 = *(_DWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C) != 0;
  v17 = (char **)(16 * v15);
  if ((_DWORD)v15)
    v18 = v17 == &WebCore::JSMediaStream::s_info;
  else
    v18 = 1;
  if (!v18)
  {
    do
    {
      v17 = (char **)v17[2];
      v16 = v17 != 0;
    }
    while (v17 != &WebCore::JSMediaStream::s_info && v17 != 0);
  }
  if (!v16 || (v21 = *(WebCore::MediaStream **)(v13 + 24)) == 0)
  {
LABEL_15:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v106, 0, "stream", 7, "MediaRecorder", 14, v9, 0, 0, "MediaStream", 12);
    return 0;
  }
  v100 = v5;
  if ((unint64_t)(*(int *)(a2 + 32) - 3) >= 0xFFFFFFFFFFFFFFFELL
    || (v22 = *(JSC::JSCell **)(a2 + 56), v114 = v14, ((unint64_t)v22 & 0xFFFFFFFFFFFFFFF7) == 2))
  {
    v28 = 0;
    v27 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    goto LABEL_63;
  }
  if (((unint64_t)v22 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v22)) == 0)
  {
    JSC::throwTypeError();
    v20 = 0;
    v82 = 1;
    v108 = 1;
LABEL_103:
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32B63F0[v82])(&v101, &v106);
    return v20;
  }
  v24 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v26 = JSC::JSObject::get(v24, this, (unint64_t)v101);
  if (v101)
  {
    if (*(_DWORD *)v101 == 2)
      WTF::StringImpl::destroy(v101, v25);
    else
      *(_DWORD *)v101 -= 2;
  }
  if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14))
    goto LABEL_143;
  if (v26 == 10)
  {
    v99 = 0;
    v27 = 0;
  }
  else
  {
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, v26, &v101);
    if (HIDWORD(v101))
      goto LABEL_143;
    v27 = (char)v101;
    v97 = v101 >> 8;
    v99 = 1;
  }
  WTF::AtomStringImpl::addLiteral();
  v35 = v101;
  v37 = JSC::JSObject::get(v24, this, (unint64_t)v101);
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v36);
    else
      *(_DWORD *)v35 -= 2;
  }
  if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14))
    goto LABEL_143;
  if (v37 == 10)
  {
    v98 = 0;
    v30 = 0;
    goto LABEL_38;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, v37, &v101);
  if (HIDWORD(v101))
  {
LABEL_143:
    v108 = 1;
LABEL_149:
    v20 = 0;
    v82 = 1;
    goto LABEL_103;
  }
  v30 = (char)v101;
  v96 = v101 >> 8;
  v98 = 1;
LABEL_38:
  WTF::AtomStringImpl::addLiteral();
  v38 = v101;
  v40 = JSC::JSObject::get(v24, this, (unint64_t)v101);
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, v39);
    else
      *(_DWORD *)v38 -= 2;
  }
  if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14))
    goto LABEL_143;
  if (v40 == 10)
  {
    v31 = 0;
LABEL_54:
    WTF::AtomStringImpl::addLiteral();
    v45 = v101;
    v46 = JSC::JSObject::get(v24, this, (unint64_t)v101);
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
        WTF::StringImpl::destroy(v45, v7);
      else
        *(_DWORD *)v45 -= 2;
    }
    if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14))
      goto LABEL_145;
    if (v46 == 10)
    {
      v32 = 0;
      v33 = 0;
      v34 = 0;
    }
    else
    {
      WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, v46, &v101);
      if (HIDWORD(v101))
      {
LABEL_145:
        v108 = 1;
        goto LABEL_146;
      }
      v34 = v101 & 0xFFFFFF00;
      v33 = v101;
      v32 = 1;
    }
    v29 = v98;
    v28 = v99;
    v11 = v96;
    v10 = v97;
LABEL_63:
    v106 = v31;
    v107[0] = v27;
    v107[1] = v10;
    v107[2] = BYTE1(v10);
    v107[3] = BYTE2(v10);
    v107[4] = v28;
    *(_WORD *)&v107[5] = v112;
    v107[7] = v113;
    *(_DWORD *)&v107[8] = v34 | v33;
    v107[12] = v32;
    *(_WORD *)&v107[13] = v110;
    v107[15] = v111;
    v107[16] = v30;
    v107[17] = v11;
    v107[18] = BYTE1(v11);
    v107[19] = BYTE2(v11);
    v107[20] = v29;
    v108 = 0;
    goto LABEL_64;
  }
  *(_QWORD *)v103 = v40;
  v41 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((v40 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v40 + 5) == 2)
  {
    v42 = *(WebCore::MediaStream **)(v40 + 8);
    if ((v42 & 1) != 0)
    {
      v42 = *(WebCore::MediaStream **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v40, this);
      if (!v42)
        goto LABEL_49;
    }
    else if (!v42)
    {
LABEL_49:
      v115 = v42;
      goto LABEL_50;
    }
    *(_DWORD *)v42 += 2;
    goto LABEL_49;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v103, this);
LABEL_50:
  if (!*((_DWORD *)v41 + 20))
  {
    v31 = v115;
LABEL_52:
    v43 = 0;
    *(_DWORD *)v102 = 0;
    v101 = 0;
    v44 = 1;
    goto LABEL_53;
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v41);
  v31 = v115;
  if (!hasExceptionsAfterHandlingTraps)
    goto LABEL_52;
  *(_DWORD *)v102 = 1;
  v115 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v94);
    else
      *(_DWORD *)v31 -= 2;
  }
  v44 = 0;
  v31 = 0;
  v43 = 1;
  v108 = 1;
LABEL_53:
  ((void (*)(int *, WTF::StringImpl **))off_1E32B54C8[v43])(v103, &v101);
  if ((v44 & 1) != 0)
    goto LABEL_54;
LABEL_146:
  if (!v31)
    goto LABEL_149;
  if (*(_DWORD *)v31 != 2)
  {
    *(_DWORD *)v31 -= 2;
    goto LABEL_149;
  }
  WTF::StringImpl::destroy(v31, v7);
  v82 = v108;
  if (v108)
  {
    v20 = 0;
    if (v108 == -1)
      return v20;
    goto LABEL_103;
  }
LABEL_64:
  ++*((_DWORD *)v21 + 22);
  v115 = v21;
  v47 = v106;
  v106 = 0;
  v101 = v47;
  *(_OWORD *)v102 = *(_OWORD *)v107;
  *(_QWORD *)&v102[13] = *(_QWORD *)&v107[13];
  v48 = *(_QWORD *)(v12 + 336);
  if (v48
    && (v49 = *(_QWORD *)(v48 + 8)) != 0
    && (v50 = *(_QWORD *)(v49 + 24)) != 0
    && (v51 = *(_QWORD *)(v50 + 8)) != 0)
  {
    if (((*(uint64_t (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(v51 + 288) + 24))(*(_QWORD *)(v51 + 288), &v101) & 1) != 0)
    {
      v52 = (WebCore::ContextDestructionObserver *)bmalloc::api::isoAllocate();
      v53 = WebCore::MediaRecorder::MediaRecorder(v52, v12 - 192, (uint64_t *)&v115, (uint64_t *)&v101);
      WebCore::ActiveDOMObject::suspendIfNeeded(v53);
      v54 = 0;
      *(_QWORD *)v103 = v52;
      goto LABEL_73;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v103[0]) = 6;
  }
  else
  {
    LOBYTE(v103[0]) = 8;
    v104 = 0;
  }
  v54 = 1;
LABEL_73:
  v105 = v54;
  v55 = v101;
  v101 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
      WTF::StringImpl::destroy(v55, v7);
    else
      *(_DWORD *)v55 -= 2;
  }
  if (v115)
  {
    if (*((_DWORD *)v115 + 22) == 1)
    {
      WebCore::MediaStream::~MediaStream(v115);
      bmalloc::api::isoDeallocate(v84, v85);
    }
    else
    {
      --*((_DWORD *)v115 + 22);
    }
  }
  v56 = v109;
  if (*((_DWORD *)v109 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v109) & 1) != 0)
    goto LABEL_133;
  if (!v105)
  {
    v57 = *(JSC::VM **)(v100 + 40);
    v58 = *(WTF::StringImpl **)v103;
    *(_QWORD *)v103 = 0;
    v101 = v58;
    if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))v58 != &off_1E335CC50)
    {
      __break(0xC471u);
      JUMPOUT(0x194D1CF64);
    }
    v20 = (JSCell *)WebCore::createWrapper<WebCore::MediaRecorder,WebCore::MediaRecorder>(v57, &v101, v8);
    if (v101)
    {
      if (*((_DWORD *)v101 + 6) == 1)
      {
        WebCore::MediaRecorder::~MediaRecorder(v101);
        bmalloc::api::isoDeallocate(v86, v87);
      }
      else
      {
        --*((_DWORD *)v101 + 6);
      }
    }
    goto LABEL_85;
  }
  if (v105 == 1)
  {
    v90 = (WTF::StringImpl *)LOBYTE(v103[0]);
    LOBYTE(v101) = v103[0];
    v91 = v104;
    v104 = 0;
    *(_QWORD *)v102 = v91;
    if (!*((_QWORD *)v56 + 2))
    {
      v92.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v103[0]), (JSC::JSGlobalObject *)v102);
      JSC::VM::throwException(v56, this, v92);
      v91 = *(WTF::StringImpl **)v102;
    }
    *(_QWORD *)v102 = 0;
    if (v91)
    {
      if (*(_DWORD *)v91 == 2)
        WTF::StringImpl::destroy(v91, v90);
      else
        *(_DWORD *)v91 -= 2;
    }
    v20 = 0;
LABEL_85:
    if (*((_DWORD *)v56 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v56) & 1) != 0)
      goto LABEL_133;
    v59 = *(JSC::JSCell **)(a2 + 40);
    if (((unint64_t)v59 & 0xFFFE000000000002) != 0
      || (v60 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v59)) == 0
      || (v62 = v60, v60 == *(JSC::JSGlobalObject **)(a2 + 24))
      || (v63 = (JSC::VM *)*((_QWORD *)this + 7),
          FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(this, v60, v61),
          *((_DWORD *)v63 + 20))
      && (JSC::VM::hasExceptionsAfterHandlingTraps(v63) & 1) != 0)
    {
LABEL_99:
      if (!*((_DWORD *)v56 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v56) & 1) == 0)
      {
LABEL_100:
        if (v105 != -1)
          ((void (*)(WTF::StringImpl **, int *))off_1E32B63E0[v105])(&v101, v103);
        v82 = 0;
        goto LABEL_103;
      }
LABEL_133:
      v20 = 0;
      goto LABEL_100;
    }
    v67 = *((_QWORD *)FunctionRealm + 412);
    if (v67)
    {
      v68 = *(_DWORD *)(v67 - 8);
      v69 = ((unint64_t)&WebCore::JSMediaRecorder::s_info + ~((_QWORD)&WebCore::JSMediaRecorder::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaRecorder::s_info + ~((_QWORD)&WebCore::JSMediaRecorder::s_info << 32)) >> 22);
      v70 = 9 * ((v69 + ~(v69 << 13)) ^ ((v69 + ~(v69 << 13)) >> 8));
      v71 = (v70 ^ (v70 >> 15)) + ~((v70 ^ (v70 >> 15)) << 27);
      v72 = v68 & ((v71 >> 31) ^ v71);
      v73 = *(char ***)(v67 + 16 * v72);
      if (v73 == &WebCore::JSMediaRecorder::s_info)
      {
LABEL_95:
        v64 = *(JSC::JSObject **)(v67 + 16 * v72 + 8);
        if (v64)
        {
LABEL_97:
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, v62, v64, v65);
          if (!*((_DWORD *)v63 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v63) & 1) == 0)
            JSC::JSObject::setStructure(v20, v63, SubclassStructure);
          goto LABEL_99;
        }
      }
      else
      {
        v74 = 1;
        while (v73)
        {
          v72 = ((_DWORD)v72 + v74) & v68;
          v73 = *(char ***)(v67 + 16 * v72);
          ++v74;
          if (v73 == &WebCore::JSMediaRecorder::s_info)
            goto LABEL_95;
        }
      }
    }
    v75 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v63, FunctionRealm, v64);
    Structure = WebCore::JSMediaRecorderPrototype::createStructure((uint64_t *)v63, (uint64_t)FunctionRealm, v75);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v79 = (JSC::JSCell *)WebCore::JSMediaRecorderPrototype::create(v63, Structure, v77, v78);
    v80 = WebCore::JSMediaRecorder::createStructure((uint64_t *)v63, (uint64_t)FunctionRealm, v79);
    v64 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v80, (uint64_t)&WebCore::JSMediaRecorder::s_info);
    goto LABEL_97;
  }
  v95 = std::__throw_bad_variant_access[abi:sn180100]();
  return (JSCell *)WebCore::JSMediaRecorder::analyzeHeap(v95);
}

uint64_t WebCore::JSMediaRecorder::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24) - 32);
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSMediaRecorderPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSMediaRecorderPrototype::create(WebCore::JSMediaRecorderPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<17u>(this, (uint64_t)&WebCore::JSMediaRecorder::s_info, (uint64_t)&WebCore::JSMediaRecorderPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSMediaRecorder>,(WebCore::DOMConstructorID)121>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unint64_t v37;
  unint64_t v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  int v41;
  int v42;
  uint64_t v43;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 968);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v39) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v37 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v37);
    v5[2] = SlowCase + (int)v37;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v39, &WebCore::JSDOMConstructor<WebCore::JSMediaRecorder>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v38 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v38);
    v10[2848] = v2 + (int)v38;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v39 = 0;
  v40 = v2;
  v41 = -1;
  v42 = 0x1000000;
  v43 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v39);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v39);
  v14 = v39;
  v39 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v39 = 0;
  v40 = v2;
  v41 = -1;
  v42 = 0x1000000;
  v43 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v39);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (!v18)
    goto LABEL_21;
  v19 = *(_DWORD *)(v18 - 8);
  v20 = ((unint64_t)&WebCore::JSMediaRecorder::s_info + ~((_QWORD)&WebCore::JSMediaRecorder::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaRecorder::s_info + ~((_QWORD)&WebCore::JSMediaRecorder::s_info << 32)) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  v23 = v19 & ((v22 >> 31) ^ v22);
  v24 = *(char ***)(v18 + 16 * v23);
  if (v24 != &WebCore::JSMediaRecorder::s_info)
  {
    v25 = 1;
    while (v24)
    {
      v23 = ((_DWORD)v23 + v25) & v19;
      v24 = *(char ***)(v18 + 16 * v23);
      ++v25;
      if (v24 == &WebCore::JSMediaRecorder::s_info)
        goto LABEL_20;
    }
    goto LABEL_21;
  }
LABEL_20:
  v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
  if (!v26)
  {
LABEL_21:
    v27 = (JSC::JSCell *)WebCore::JSEventTarget::prototype((WebCore::JSEventTarget *)a1, (JSC::VM *)a2, v16);
    Structure = WebCore::JSMediaRecorderPrototype::createStructure((uint64_t *)a1, a2, v27);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v31 = (JSC::JSCell *)WebCore::JSMediaRecorderPrototype::create((WebCore::JSMediaRecorderPrototype *)a1, Structure, v29, v30);
    v32 = WebCore::JSMediaRecorder::createStructure((uint64_t *)a1, a2, v31);
    v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSMediaRecorder::s_info);
  }
  v33 = *(_QWORD *)(v26 + 48);
  v39 = 0;
  v40 = v2;
  v41 = -1;
  v42 = 0x1000000;
  v43 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v39);
  if ((*(_BYTE *)((16 * *(unsigned int *)v2) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)v2, (JSC::VM *)a1);
  WTF::AtomStringImpl::addLiteral();
  v34 = v39;
  JSC::reifyStaticProperty((JSC::VM *)a1, (uint64_t)&WebCore::JSMediaRecorder::s_info, (unint64_t *)&v39, (uint64_t)&WebCore::JSMediaRecorderConstructorTableValues, (unsigned __int8 *)v2);
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v35);
    else
      *(_DWORD *)v34 -= 2;
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 968) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsMediaRecorderConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSMediaRecorderPrototype::s_info != (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                               + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSMediaRecorder>,(WebCore::DOMConstructorID)121>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsMediaRecorder_stream(int a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::MediaStream>(a1, *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 88));
}

uint64_t WebCore::jsMediaRecorder_mimeType(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 56);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsMediaRecorder_state(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(int *)(*((_QWORD *)a2 + 3) + 104);
  if ((byte_1EE335F2F & 1) == 0)
  {
    dword_1ECE78F70 += 2;
    byte_1EE335F2F = 1;
    dword_1ECE78F90 += 2;
    qword_1EE3360C8 = (uint64_t)&dword_1ECE78F70;
    unk_1EE3360D0 = &dword_1ECE78F90;
    dword_1ECE78FB0 += 2;
    qword_1EE3360D8 = (uint64_t)&dword_1ECE78FB0;
  }
  v5 = *(_QWORD *)&_MergedGlobals_685[8 * v4 + 416];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

uint64_t WebCore::jsMediaRecorder_onstart(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  bmalloc::api *v11;
  void *v12;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1960), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
  {
    WebCore::MediaRecorder::~MediaRecorder((WebCore *)((char *)v5 - 32));
    bmalloc::api::isoDeallocate(v11, v12);
  }
  else
  {
    --*((_DWORD *)v5 - 2);
  }
  return v9;
}

BOOL WebCore::setJSMediaRecorder_onstart(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  bmalloc::api *v16;
  void *v17;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSMediaRecorder::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSMediaRecorder::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1960), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        WebCore::MediaRecorder::~MediaRecorder((WebCore::EventTarget *)((char *)v11 - 32));
        bmalloc::api::isoDeallocate(v16, v17);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsMediaRecorder_onstop(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  bmalloc::api *v11;
  void *v12;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1992), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
  {
    WebCore::MediaRecorder::~MediaRecorder((WebCore *)((char *)v5 - 32));
    bmalloc::api::isoDeallocate(v11, v12);
  }
  else
  {
    --*((_DWORD *)v5 - 2);
  }
  return v9;
}

BOOL WebCore::setJSMediaRecorder_onstop(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  bmalloc::api *v16;
  void *v17;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSMediaRecorder::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSMediaRecorder::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1992), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        WebCore::MediaRecorder::~MediaRecorder((WebCore::EventTarget *)((char *)v11 - 32));
        bmalloc::api::isoDeallocate(v16, v17);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsMediaRecorder_ondataavailable(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  bmalloc::api *v11;
  void *v12;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 568), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
  {
    WebCore::MediaRecorder::~MediaRecorder((WebCore *)((char *)v5 - 32));
    bmalloc::api::isoDeallocate(v11, v12);
  }
  else
  {
    --*((_DWORD *)v5 - 2);
  }
  return v9;
}

BOOL WebCore::setJSMediaRecorder_ondataavailable(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  bmalloc::api *v16;
  void *v17;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSMediaRecorder::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSMediaRecorder::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 568), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        WebCore::MediaRecorder::~MediaRecorder((WebCore::EventTarget *)((char *)v11 - 32));
        bmalloc::api::isoDeallocate(v16, v17);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsMediaRecorder_onpause(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  bmalloc::api *v11;
  void *v12;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1424), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
  {
    WebCore::MediaRecorder::~MediaRecorder((WebCore *)((char *)v5 - 32));
    bmalloc::api::isoDeallocate(v11, v12);
  }
  else
  {
    --*((_DWORD *)v5 - 2);
  }
  return v9;
}

BOOL WebCore::setJSMediaRecorder_onpause(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  bmalloc::api *v16;
  void *v17;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSMediaRecorder::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSMediaRecorder::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1424), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        WebCore::MediaRecorder::~MediaRecorder((WebCore::EventTarget *)((char *)v11 - 32));
        bmalloc::api::isoDeallocate(v16, v17);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsMediaRecorder_onresume(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  bmalloc::api *v11;
  void *v12;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1720), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
  {
    WebCore::MediaRecorder::~MediaRecorder((WebCore *)((char *)v5 - 32));
    bmalloc::api::isoDeallocate(v11, v12);
  }
  else
  {
    --*((_DWORD *)v5 - 2);
  }
  return v9;
}

BOOL WebCore::setJSMediaRecorder_onresume(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  bmalloc::api *v16;
  void *v17;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSMediaRecorder::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSMediaRecorder::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1720), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        WebCore::MediaRecorder::~MediaRecorder((WebCore::EventTarget *)((char *)v11 - 32));
        bmalloc::api::isoDeallocate(v16, v17);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsMediaRecorder_onerror(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  bmalloc::api *v11;
  void *v12;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 784), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
  {
    WebCore::MediaRecorder::~MediaRecorder((WebCore *)((char *)v5 - 32));
    bmalloc::api::isoDeallocate(v11, v12);
  }
  else
  {
    --*((_DWORD *)v5 - 2);
  }
  return v9;
}

BOOL WebCore::setJSMediaRecorder_onerror(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  bmalloc::api *v16;
  void *v17;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSMediaRecorder::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSMediaRecorder::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 784), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        WebCore::MediaRecorder::~MediaRecorder((WebCore::EventTarget *)((char *)v11 - 32));
        bmalloc::api::isoDeallocate(v16, v17);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

unint64_t WebCore::jsMediaRecorder_videoBitsPerSecond(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 236);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsMediaRecorder_audioBitsPerSecond(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 232);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::JSMediaRecorderOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v6 = *(_QWORD *)(v5 - 24);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (*(_QWORD *)(v5 - 16)
    || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 - 32) + 64))(v5 - 32), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

void WebCore::JSMediaRecorderOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  WebCore::MediaRecorder *v4;
  int v5;
  uint64_t v6;
  bmalloc::api *v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  WebCore::MediaRecorder *v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v29;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v4 = (WebCore::MediaRecorder *)(v3 - 32);
  v5 = *(_DWORD *)(v3 - 8);
  *(_DWORD *)(v3 - 8) = v5 + 1;
  if (*(_DWORD *)(a3 + 48))
  {
    v11 = *(_QWORD *)(a3 + 32);
    v9 = (uint64_t *)(a3 + 32);
    v10 = v11;
    if (v11)
    {
      v12 = *(_DWORD *)(v10 - 8);
      v13 = ((unint64_t)v4 + ~((_QWORD)v4 << 32)) ^ (((unint64_t)v4 + ~((_QWORD)v4 << 32)) >> 22);
      v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
      v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
      v16 = v12 & ((v15 >> 31) ^ v15);
      v17 = *(WebCore::MediaRecorder **)(v10 + 16 * v16);
      if (v17 != v4)
      {
        v18 = 1;
        while (v17)
        {
          v16 = ((_DWORD)v16 + v18) & v12;
          v17 = *(WebCore::MediaRecorder **)(v10 + 16 * v16);
          ++v18;
          if (v17 == v4)
            goto LABEL_12;
        }
        v16 = *(unsigned int *)(v10 - 4);
      }
LABEL_12:
      if (v16 != *(_DWORD *)(v10 - 4))
      {
        v19 = (_QWORD *)(v10 + 16 * v16);
        *v19 = -1;
        v22 = v19[1];
        v21 = v19 + 1;
        v20 = v22;
        if (v22)
        {
          *(_QWORD *)(v20 + 8) = 3;
          *v21 = 0;
        }
        ++*(_DWORD *)(*v9 - 16);
        v23 = *v9;
        if (*v9)
          v24 = *(_DWORD *)(v23 - 12) - 1;
        else
          v24 = -1;
        *(_DWORD *)(v23 - 12) = v24;
        v25 = *v9;
        if (*v9)
        {
          v26 = 6 * *(_DWORD *)(v25 - 12);
          v27 = *(_DWORD *)(v25 - 4);
          if (v26 < v27 && v27 >= 9)
          {
            v29 = v3;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v9, v27 >> 1, 0);
            v3 = v29;
          }
        }
      }
    }
    v5 = *(_DWORD *)(v3 - 8) - 1;
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 8);
    if (v6)
    {
      *(_QWORD *)(v6 + 8) = 3;
      *(_QWORD *)(v3 + 8) = 0;
    }
  }
  if (v5)
  {
    *(_DWORD *)(v3 - 8) = v5;
  }
  else
  {
    WebCore::MediaRecorder::~MediaRecorder(v4);
    bmalloc::api::isoDeallocate(v7, v8);
  }
}

unint64_t WebCore::createWrapper<WebCore::MediaRecorder,WebCore::MediaRecorder>(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  WebCore::JSEventTarget *v15;
  JSC::JSCell *v16;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v18;
  JSC::Structure *v19;
  JSC::JSCell *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  int v39;
  unint64_t SlowCase;
  WTF *v41;
  char *v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *Allocator;
  uint64_t v48;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  WTF *v56;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 412);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = ((unint64_t)&WebCore::JSMediaRecorder::s_info + ~((_QWORD)&WebCore::JSMediaRecorder::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaRecorder::s_info + ~((_QWORD)&WebCore::JSMediaRecorder::s_info << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(char ***)(v6 + 16 * v11);
    if (v12 == &WebCore::JSMediaRecorder::s_info)
    {
LABEL_6:
      v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
      if (v14)
        goto LABEL_8;
    }
    else
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(char ***)(v6 + 16 * v11);
        ++v13;
        if (v12 == &WebCore::JSMediaRecorder::s_info)
          goto LABEL_6;
      }
    }
  }
  v15 = (WebCore::JSEventTarget *)*((_QWORD *)a1 + 7);
  v16 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v15, a1, a3);
  Structure = WebCore::JSMediaRecorderPrototype::createStructure((uint64_t *)v15, (uint64_t)a1, v16);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v20 = (JSC::JSCell *)WebCore::JSMediaRecorderPrototype::create(v15, Structure, v18, v19);
  v21 = WebCore::JSMediaRecorder::createStructure((uint64_t *)v15, (uint64_t)a1, v20);
  v14 = WebCore::cacheDOMStructure((JSCell *)a1, v21, (uint64_t)&WebCore::JSMediaRecorder::s_info);
LABEL_8:
  v22 = *((_QWORD *)a1 + 7);
  v23 = *(_QWORD *)(v22 + 41456);
  v24 = *(_QWORD *)(v23 + 23536);
  v25 = *(_QWORD **)(v24 + 992);
  if (v25)
    goto LABEL_31;
  v26 = *(_QWORD *)(v23 + 22648);
  if (__ldaxr((unsigned __int8 *)v26))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v26))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v26);
LABEL_13:
  v28 = *(_QWORD *)(v26 + 2824);
  v54 = *(_QWORD *)(v28 + 992);
  if (!v54)
  {
    v29 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v56, "IsoSpace T");
    v55 = 0;
    MEMORY[0x19AEA3204](v29, &v56, v22 + 192, v22 + 1872, 32, 8, &v55);
    v31 = (uint64_t)v55;
    v55 = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = v56;
    v56 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 1)
        WTF::fastFree(v32, v30);
      else
        --*(_DWORD *)v32;
    }
    v54 = v29;
    v33 = *(_QWORD *)(v28 + 992);
    *(_QWORD *)(v28 + 992) = v29;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = *(unsigned int *)(v26 + 2844);
    if ((_DWORD)v34 == *(_DWORD *)(v26 + 2840))
    {
      v35 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v26 + 2832, v34 + 1, (unint64_t)&v54);
      v34 = *(unsigned int *)(v26 + 2844);
      *(_QWORD *)(*(_QWORD *)(v26 + 2832) + 8 * v34) = *v35;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v26 + 2832) + 8 * v34) = v29;
    }
    *(_DWORD *)(v26 + 2844) = v34 + 1;
  }
  v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v36 = *(_QWORD *)(v24 + 992);
  *(_QWORD *)(v24 + 992) = v25;
  if (v36)
  {
    v37 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v37, v38);
  }
  v39 = __ldxr((unsigned __int8 *)v26);
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, (unsigned __int8 *)v26))
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
LABEL_31:
  SlowCase = v25[3];
  if (SlowCase < v25[4])
  {
LABEL_32:
    v25[3] = SlowCase + 32;
    goto LABEL_33;
  }
  SlowCase = v25[5];
  if ((SlowCase & 1) == 0)
  {
    v53 = *(_QWORD *)(SlowCase + 8) ^ v25[6];
    v25[4] = SlowCase + HIDWORD(v53);
    v25[5] = SlowCase + (int)v53;
    goto LABEL_32;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_33:
  *(_DWORD *)SlowCase = 0;
  v41 = *a2;
  *a2 = 0;
  v42 = (char *)v41 + 32;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v14);
  *(_QWORD *)(SlowCase + 24) = v42;
  if (*(_BYTE *)(v22 + 755))
    __dmb(0xAu);
  v43 = *((_QWORD *)a1 + 415);
  if ((byte_1EE336000 & 1) == 0)
  {
    qword_1EE335FF8 = (uint64_t)&off_1E32B35F0;
    byte_1EE336000 = 1;
  }
  if (v5)
    v44 = (uint64_t *)((char *)v5 + 40);
  else
    v44 = 0;
  if (!*(_DWORD *)(v43 + 48))
  {
    if ((SlowCase & 8) != 0)
      v45 = (SlowCase - 112) | 1;
    else
      v45 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v45 & 1) != 0)
      v46 = v45 + 47;
    else
      v46 = *(_QWORD *)v45 + 32;
    Allocator = *(_QWORD **)(v46 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v46 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE335FF8;
    Allocator[2] = v43;
    v48 = *v44;
    *v44 = (uint64_t)Allocator;
    if (!v48)
      return SlowCase;
LABEL_58:
    *(_QWORD *)(v48 + 8) = 3;
    return SlowCase;
  }
  v56 = v5;
  if ((SlowCase & 8) != 0)
    v50 = (SlowCase - 112) | 1;
  else
    v50 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v50 & 1) != 0)
    v51 = v50 + 47;
  else
    v51 = *(_QWORD *)v50 + 32;
  v52 = *(_QWORD **)(v51 + 16);
  if (!v52)
    v52 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v51 + 16) = *v52;
  *v52 = SlowCase;
  v52[1] = &qword_1EE335FF8;
  v52[2] = v43;
  v55 = v52;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v43 + 32), (uint64_t *)&v56, (uint64_t *)&v55);
  v48 = (uint64_t)v55;
  if (v55)
    goto LABEL_58;
  return SlowCase;
}

uint64_t WebCore::wrap<WebCore::MediaRecorder>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  bmalloc::api *v7;
  void *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  WebCore::MediaRecorder *v17;

  v3 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v3 + 48))
  {
    v9 = *(_QWORD *)(v3 + 32);
    if (!v9)
      goto LABEL_5;
    v10 = *(_DWORD *)(v9 - 8);
    v11 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = *(_QWORD *)(v9 + 16 * v14);
    if (v15 != a3)
    {
      v16 = 1;
      while (v15)
      {
        v14 = ((_DWORD)v14 + v16) & v10;
        v15 = *(_QWORD *)(v9 + 16 * v14);
        ++v16;
        if (v15 == a3)
          goto LABEL_16;
      }
      goto LABEL_5;
    }
LABEL_16:
    v4 = *(_QWORD *)(v9 + 16 * v14 + 8);
    if (!v4)
      goto LABEL_5;
  }
  else
  {
    v4 = *(_QWORD *)(a3 + 40);
    if (!v4)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v4 + 8) & 3) == 0)
  {
    v5 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
      return v5;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 24);
  v17 = (WebCore::MediaRecorder *)a3;
  if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))a3 == &off_1E335CC50)
  {
    v5 = WebCore::createWrapper<WebCore::MediaRecorder,WebCore::MediaRecorder>(a2, &v17, (WebCore::JSDOMGlobalObject *)a3);
    if (v17)
    {
      if (*((_DWORD *)v17 + 6) == 1)
      {
        WebCore::MediaRecorder::~MediaRecorder(v17);
        bmalloc::api::isoDeallocate(v7, v8);
      }
      else
      {
        --*((_DWORD *)v17 + 6);
      }
    }
    return v5;
  }
  result = 759;
  __break(0xC471u);
  return result;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSMediaRecorderErrorEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  int v6;
  JSC::JSCell *v7;
  uint64_t Object;
  uint64_t v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  JSC::VM *v12;
  double v13;
  _BOOL4 v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  _BOOL4 v17;
  JSC::VM *v18;
  double v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  _BOOL4 v22;
  JSC::VM *v23;
  double v24;
  WTF::StringImpl *v25;
  JSCell *v26;
  uint64_t v27;
  uint64_t v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WebCore::JSDOMGlobalObject *v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  JSC::VM *v43;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char **v50;
  int v51;
  unint64_t v52;
  WebCore::JSEvent *v53;
  JSC::JSCell *v54;
  unint64_t Structure;
  JSC::Structure *v56;
  JSC::JSCell *v57;
  uint64_t v58;
  JSC::JSCell *v59;
  JSC::JSGlobalObject *v60;
  JSC::JSObject *v61;
  JSC::JSGlobalObject *v62;
  JSC::VM *v63;
  WebCore::JSDOMGlobalObject *v64;
  JSC::Structure *v65;
  JSC::VM *FunctionRealm;
  uint64_t v67;
  unsigned int v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char **v73;
  int v74;
  JSC::JSCell *v75;
  unint64_t v76;
  JSC::Structure *v77;
  JSC::JSCell *v78;
  uint64_t v79;
  unint64_t SubclassStructure;
  JSC::VM *v81;
  JSValue v82;
  BOOL v83;
  int v84;
  uint64_t v85;
  int *v86;
  int v87;
  BOOL v88;
  int v89;
  uint64_t v90;
  int *v91;
  int v92;
  BOOL v93;
  int v94;
  uint64_t v95;
  int *v96;
  int v97;
  JSC::VM *v98;
  _BOOL4 v99;
  WTF::StringImpl *v100[2];
  int v101;
  WTF::StringImpl *v102;
  int v103;
  JSC::VM *v104;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((unint64_t)(*(int *)(a2 + 32) - 1) <= 1)
  {
    v82.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, a1, v82);
  }
  v5 = *(_QWORD *)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v102);
  v6 = v103;
  if (!v103)
  {
    v7 = *(JSC::JSCell **)(a2 + 56);
    v104 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (((unint64_t)v7 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
LABEL_44:
      WebCore::throwRequiredMemberTypeError((int)a1, (int)&v104, "error", 6, "MediaRecorderErrorEventInit", 28, "DOMException", 13);
      goto LABEL_45;
    }
    if (((unint64_t)v7 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v7)) == 0)
    {
LABEL_59:
      JSC::throwTypeError();
      goto LABEL_45;
    }
    v9 = Object;
    WTF::AtomStringImpl::addLiteral();
    v11 = JSC::JSObject::get((JSC::Structure *)v9, a1, (unint64_t)v100[0]);
    if (v100[0])
    {
      if (*(_DWORD *)v100[0] == 2)
        WTF::StringImpl::destroy(v100[0], v10);
      else
        *(_DWORD *)v100[0] -= 2;
    }
    if (*((_DWORD *)v104 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v104) & 1) != 0)
    {
LABEL_45:
      v26 = 0;
      v27 = 1;
      v101 = 1;
LABEL_46:
      ((void (*)(JSC::VM **, WTF::StringImpl **))off_1E32B66D0[v27])(&v104, v100);
      v6 = v103;
      goto LABEL_47;
    }
    if (v11 != 10)
    {
      v12 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v11 >= 0xFFFE000000000000)
        goto LABEL_132;
      *(_QWORD *)&v13 = v11 - 0x2000000000000;
      if (v11 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v14 = v13 > 0.0 || v13 < 0.0;
        goto LABEL_16;
      }
      if ((v11 & 0xFFFE000000000002) != 0)
      {
        v14 = v11 == 7;
        goto LABEL_16;
      }
      v84 = *(unsigned __int8 *)(v11 + 5);
      if (v84 == 3)
      {
        v87 = *(_DWORD *)(v11 + 8);
      }
      else
      {
        if (v84 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xA) & 1) != 0)
          {
            v83 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
            goto LABEL_176;
          }
          v14 = 1;
          goto LABEL_16;
        }
        v85 = *(_QWORD *)(v11 + 8);
        if ((v85 & 1) != 0)
          v86 = (int *)(v11 + 16);
        else
          v86 = (int *)(v85 + 4);
        v87 = *v86;
      }
      v83 = v87 == 0;
      goto LABEL_176;
    }
    v99 = 0;
    while (1)
    {
      WTF::AtomStringImpl::addLiteral();
      v16 = JSC::JSObject::get((JSC::Structure *)v9, a1, (unint64_t)v100[0]);
      if (v100[0])
      {
        if (*(_DWORD *)v100[0] == 2)
          WTF::StringImpl::destroy(v100[0], v15);
        else
          *(_DWORD *)v100[0] -= 2;
      }
      if (*((_DWORD *)v104 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v104) & 1) != 0)
        goto LABEL_45;
      if (v16 == 10)
      {
        v17 = 0;
        goto LABEL_28;
      }
      v18 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v16 >= 0xFFFE000000000000)
        break;
      *(_QWORD *)&v19 = v16 - 0x2000000000000;
      if (v16 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        if ((v16 & 0xFFFE000000000002) != 0)
        {
          v17 = v16 == 7;
          goto LABEL_27;
        }
        v89 = *(unsigned __int8 *)(v16 + 5);
        if (v89 == 3)
        {
          v92 = *(_DWORD *)(v16 + 8);
          goto LABEL_165;
        }
        if (v89 == 2)
        {
          v90 = *(_QWORD *)(v16 + 8);
          if ((v90 & 1) != 0)
            v91 = (int *)(v16 + 16);
          else
            v91 = (int *)(v90 + 4);
          v92 = *v91;
LABEL_165:
          v88 = v92 == 0;
        }
        else
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
LABEL_167:
            v17 = 1;
            goto LABEL_27;
          }
          v88 = *(_QWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
        }
LABEL_180:
        v17 = !v88;
        goto LABEL_27;
      }
      if (v19 > 0.0)
        goto LABEL_167;
      v17 = v19 < 0.0;
LABEL_27:
      if (*((_DWORD *)v18 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v18) & 1) != 0)
        goto LABEL_45;
LABEL_28:
      WTF::AtomStringImpl::addLiteral();
      v21 = JSC::JSObject::get((JSC::Structure *)v9, a1, (unint64_t)v100[0]);
      if (v100[0])
      {
        if (*(_DWORD *)v100[0] == 2)
          WTF::StringImpl::destroy(v100[0], v20);
        else
          *(_DWORD *)v100[0] -= 2;
      }
      if (*((_DWORD *)v104 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v104) & 1) != 0)
        goto LABEL_45;
      if (v21 == 10)
      {
        v22 = 0;
        goto LABEL_39;
      }
      v23 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v21 >= 0xFFFE000000000000)
      {
        v93 = (_DWORD)v21 == 0;
        goto LABEL_170;
      }
      *(_QWORD *)&v24 = v21 - 0x2000000000000;
      if (v21 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        if ((v21 & 0xFFFE000000000002) != 0)
        {
          v22 = v21 == 7;
          goto LABEL_38;
        }
        v94 = *(unsigned __int8 *)(v21 + 5);
        if (v94 == 3)
        {
          v97 = *(_DWORD *)(v21 + 8);
        }
        else
        {
          if (v94 != 2)
          {
            if ((*(_BYTE *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0xA) & 1) == 0)
            {
LABEL_174:
              v22 = 1;
              goto LABEL_38;
            }
            v93 = *(_QWORD *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
            goto LABEL_170;
          }
          v95 = *(_QWORD *)(v21 + 8);
          if ((v95 & 1) != 0)
            v96 = (int *)(v21 + 16);
          else
            v96 = (int *)(v95 + 4);
          v97 = *v96;
        }
        v93 = v97 == 0;
LABEL_170:
        v22 = !v93;
        goto LABEL_38;
      }
      if (v24 > 0.0)
        goto LABEL_174;
      v22 = v24 < 0.0;
LABEL_38:
      if (*((_DWORD *)v23 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v23) & 1) != 0)
        goto LABEL_45;
LABEL_39:
      WTF::AtomStringImpl::addLiteral();
      LODWORD(v11) = v100[0];
      v9 = JSC::JSObject::get((JSC::Structure *)v9, a1, (unint64_t)v100[0]);
      if (v100[0])
      {
        if (*(_DWORD *)v100[0] == 2)
          WTF::StringImpl::destroy(v100[0], v25);
        else
          *(_DWORD *)v100[0] -= 2;
      }
      if (*((_DWORD *)v104 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v104) & 1) != 0)
        goto LABEL_45;
      if (v9 == 10)
        goto LABEL_44;
      v98 = v3;
      v100[0] = *((WTF::StringImpl **)a1 + 7);
      if ((v9 & 0xFFFE000000000002) != 0)
        goto LABEL_59;
      v29 = *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C);
      v30 = *(_DWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C) != 0;
      if ((_DWORD)v29)
      {
        v31 = 16 * v29;
        if ((char **)v31 != &WebCore::JSDOMException::s_info)
        {
          do
          {
            v31 = *(_QWORD *)(v31 + 16);
            v30 = v31 != 0;
          }
          while ((char **)v31 != &WebCore::JSDOMException::s_info && v31 != 0);
        }
      }
      if (!v30)
        goto LABEL_59;
      v3 = *(JSC::VM **)(v9 + 24);
      if (!v3)
        goto LABEL_59;
      v33 = v5;
      ++*((_DWORD *)v3 + 2);
      v5 = v99;
      LOBYTE(v100[0]) = v99;
      BYTE1(v100[0]) = v17;
      BYTE2(v100[0]) = v22;
      v101 = 0;
      if (!v103)
      {
        v34 = v102;
        v102 = 0;
        v100[1] = 0;
        v35 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v35);
        *(_QWORD *)(v35 + 8) = 0;
        if (v17)
          v39 = 4;
        else
          v39 = 0;
        if (v22)
          v40 = 8;
        else
          v40 = 0;
        if (v99)
          v41 = 589826;
        else
          v41 = 589824;
        v42 = v41 | v39 | v40 | (v34 != 0) | *(_DWORD *)(v35 + 20) & 0xFFC00000;
        *(_DWORD *)(v35 + 16) = 1;
        *(_DWORD *)(v35 + 20) = v42;
        if (v34)
        {
          *(_DWORD *)v34 += 2;
          v42 = *(_DWORD *)(v35 + 20);
        }
        *(_QWORD *)(v35 + 24) = v34;
        *(_QWORD *)(v35 + 32) = 0;
        *(_QWORD *)(v35 + 40) = 0;
        *(_QWORD *)(v35 + 48) = 0;
        *(_QWORD *)(v35 + 56) = v38;
        *(_DWORD *)(v35 + 20) = v42 | 0x4000;
        *(_QWORD *)v35 = off_1E335CE08;
        *(_QWORD *)(v35 + 64) = 0;
        *(_QWORD *)(v35 + 72) = v3;
        v104 = (JSC::VM *)v35;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
          {
            WTF::StringImpl::destroy(v34, v36);
            if (*(void (***)(WebCore::MediaRecorderErrorEvent *__hidden))v35 != off_1E335CE08)
            {
              __break(0xC471u);
              JUMPOUT(0x194D1F8A8);
            }
          }
          else
          {
            *(_DWORD *)v34 -= 2;
          }
        }
        v43 = *(JSC::VM **)(v33 + 40);
        v44 = *((_QWORD *)v43 + 412);
        if (!v44)
          goto LABEL_82;
        v45 = *(_DWORD *)(v44 - 8);
        v46 = ((unint64_t)&WebCore::JSMediaRecorderErrorEvent::s_info
             + ~((_QWORD)&WebCore::JSMediaRecorderErrorEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaRecorderErrorEvent::s_info
                                                                               + ~((_QWORD)&WebCore::JSMediaRecorderErrorEvent::s_info << 32)) >> 22);
        v47 = 9 * ((v46 + ~(v46 << 13)) ^ ((v46 + ~(v46 << 13)) >> 8));
        v48 = (v47 ^ (v47 >> 15)) + ~((v47 ^ (v47 >> 15)) << 27);
        v49 = v45 & ((v48 >> 31) ^ v48);
        v50 = *(char ***)(v44 + 16 * v49);
        if (v50 == &WebCore::JSMediaRecorderErrorEvent::s_info)
        {
LABEL_81:
          v52 = *(_QWORD *)(v44 + 16 * v49 + 8);
          if (!v52)
            goto LABEL_82;
        }
        else
        {
          v51 = 1;
          while (v50)
          {
            v49 = ((_DWORD)v49 + v51) & v45;
            v50 = *(char ***)(v44 + 16 * v49);
            ++v51;
            if (v50 == &WebCore::JSMediaRecorderErrorEvent::s_info)
              goto LABEL_81;
          }
LABEL_82:
          v53 = (WebCore::JSEvent *)*((_QWORD *)v43 + 7);
          v54 = (JSC::JSCell *)WebCore::JSEvent::prototype(v53, *(JSC::VM **)(v33 + 40), v37);
          Structure = WebCore::JSMediaRecorderErrorEventPrototype::createStructure((uint64_t *)v53, (uint64_t)v43, v54);
          *(_DWORD *)(Structure + 16) |= 0x80000u;
          v57 = (JSC::JSCell *)WebCore::JSMediaRecorderErrorEventPrototype::create(v53, v43, Structure, v56);
          v58 = WebCore::JSMediaRecorderErrorEvent::createStructure((uint64_t *)v53, (uint64_t)v43, v57);
          v52 = WebCore::cacheDOMStructure((JSCell *)v43, v58, (uint64_t)&WebCore::JSMediaRecorderErrorEvent::s_info);
        }
        v26 = (JSCell *)WebCore::JSMediaRecorderErrorEvent::create(v52, v43, (uint64_t *)&v104);
        WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)v43 + 415), v35, (uint64_t)v26);
        v59 = *(JSC::JSCell **)(a2 + 40);
        if (((unint64_t)v59 & 0xFFFE000000000002) != 0
          || (v60 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v59)) == 0
          || (v62 = v60, v60 == *(JSC::JSGlobalObject **)(a2 + 24))
          || (v63 = (JSC::VM *)*((_QWORD *)a1 + 7),
              FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v60, v61),
              *((_DWORD *)v63 + 20))
          && (JSC::VM::hasExceptionsAfterHandlingTraps(v63) & 1) != 0)
        {
LABEL_96:
          if (*((_DWORD *)v98 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v98) & 1) != 0)
            v26 = 0;
          v81 = v104;
          v104 = 0;
          if (v81)
          {
            if (*((_DWORD *)v81 + 4) == 1)
              (*(void (**)(JSC::VM *))(*(_QWORD *)v81 + 8))(v81);
            else
              --*((_DWORD *)v81 + 4);
          }
          v27 = 0;
          goto LABEL_46;
        }
        v67 = *((_QWORD *)FunctionRealm + 412);
        if (v67)
        {
          v68 = *(_DWORD *)(v67 - 8);
          v69 = ((unint64_t)&WebCore::JSMediaRecorderErrorEvent::s_info
               + ~((_QWORD)&WebCore::JSMediaRecorderErrorEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaRecorderErrorEvent::s_info
                                                                                 + ~((_QWORD)&WebCore::JSMediaRecorderErrorEvent::s_info << 32)) >> 22);
          v70 = 9 * ((v69 + ~(v69 << 13)) ^ ((v69 + ~(v69 << 13)) >> 8));
          v71 = (v70 ^ (v70 >> 15)) + ~((v70 ^ (v70 >> 15)) << 27);
          v72 = v68 & ((v71 >> 31) ^ v71);
          v73 = *(char ***)(v67 + 16 * v72);
          if (v73 != &WebCore::JSMediaRecorderErrorEvent::s_info)
          {
            v74 = 1;
            while (v73)
            {
              v72 = ((_DWORD)v72 + v74) & v68;
              v73 = *(char ***)(v67 + 16 * v72);
              ++v74;
              if (v73 == &WebCore::JSMediaRecorderErrorEvent::s_info)
                goto LABEL_92;
            }
            goto LABEL_93;
          }
LABEL_92:
          v64 = *(WebCore::JSDOMGlobalObject **)(v67 + 16 * v72 + 8);
          if (!v64)
            goto LABEL_93;
        }
        else
        {
LABEL_93:
          v75 = (JSC::JSCell *)WebCore::JSEvent::prototype(v63, FunctionRealm, v64);
          v76 = WebCore::JSMediaRecorderErrorEventPrototype::createStructure((uint64_t *)v63, (uint64_t)FunctionRealm, v75);
          *(_DWORD *)(v76 + 16) |= 0x80000u;
          v78 = (JSC::JSCell *)WebCore::JSMediaRecorderErrorEventPrototype::create(v63, FunctionRealm, v76, v77);
          v79 = WebCore::JSMediaRecorderErrorEvent::createStructure((uint64_t *)v63, (uint64_t)FunctionRealm, v78);
          v64 = (WebCore::JSDOMGlobalObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v79, (uint64_t)&WebCore::JSMediaRecorderErrorEvent::s_info);
        }
        SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v62, v64, v65);
        if (!*((_DWORD *)v63 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v63) & 1) == 0)
          JSC::JSObject::setStructure(v26, v63, SubclassStructure);
        goto LABEL_96;
      }
      v12 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_132:
      v83 = (_DWORD)v11 == 0;
LABEL_176:
      v14 = !v83;
LABEL_16:
      v99 = v14;
      if (*((_DWORD *)v12 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v12) & 1) != 0)
        goto LABEL_45;
    }
    v88 = (_DWORD)v16 == 0;
    goto LABEL_180;
  }
  v26 = 0;
LABEL_47:
  if (v6 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32B5840[v6])(v100, &v102);
  return v26;
}

uint64_t WebCore::JSMediaRecorderErrorEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSMediaRecorderErrorEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSMediaRecorderErrorEventPrototype::create(WebCore::JSMediaRecorderErrorEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSMediaRecorderErrorEvent::s_info, (uint64_t)&WebCore::JSMediaRecorderErrorEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSMediaRecorderErrorEvent>,(WebCore::DOMConstructorID)122>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 976);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSMediaRecorderErrorEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000002, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSMediaRecorderErrorEvent::s_info
         + ~((_QWORD)&WebCore::JSMediaRecorderErrorEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaRecorderErrorEvent::s_info
                                                                           + ~((_QWORD)&WebCore::JSMediaRecorderErrorEvent::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSMediaRecorderErrorEvent::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSMediaRecorderErrorEvent::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEvent::prototype((WebCore::JSEvent *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSMediaRecorderErrorEventPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSMediaRecorderErrorEventPrototype::create((WebCore::JSMediaRecorderErrorEventPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSMediaRecorderErrorEvent::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSMediaRecorderErrorEvent::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 976) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsMediaRecorderErrorEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSMediaRecorderErrorEventPrototype::s_info != (char **)(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                         + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSMediaRecorderErrorEvent>,(WebCore::DOMConstructorID)122>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsMediaRecorderErrorEvent_error(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::DOMException>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(_DWORD **)(*(_QWORD *)(a2 + 24) + 72));
}

uint64_t WebCore::JSMediaRecorderErrorEvent::subspaceForImpl(WebCore::JSMediaRecorderErrorEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 1000);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 1000))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 1000);
    *(_QWORD *)(v8 + 1000) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 1000);
  *(_QWORD *)(v3 + 1000) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSMediaSession::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  int v14;

  v3 = *(_QWORD *)(a2 + 88);
  if (v3 && *(_BYTE *)(v3 + 24))
  {
    result = 75;
    __break(0xC471u);
    return result;
  }
  v4 = *(_QWORD *)(result + 24);
  v5 = (unsigned __int8 *)(v4 + 160);
  if (__ldaxr((unsigned __int8 *)(v4 + 160)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_7;
  }
  result = MEMORY[0x19AEA534C](v4 + 160);
LABEL_7:
  v7 = *(unsigned __int8 **)(v4 + 120);
  if (v7)
  {
    v8 = *((unsigned int *)v7 - 1);
    v9 = &v7[16 * v8];
    if (*((_DWORD *)v7 - 3))
    {
      v10 = v7;
      if ((_DWORD)v8)
      {
        v11 = 16 * v8;
        v10 = v7;
        while (*v10 >= 0xFEu)
        {
          v10 += 16;
          v11 -= 16;
          if (!v11)
          {
            v10 = v9;
            goto LABEL_14;
          }
        }
      }
      goto LABEL_14;
    }
    v10 = &v7[16 * v8];
  }
  else
  {
    v10 = 0;
    v8 = 0;
  }
  v9 = &v7[16 * v8];
  if (v7)
  {
LABEL_14:
    v12 = &v7[16 * *((unsigned int *)v7 - 1)];
    goto LABEL_19;
  }
  v12 = 0;
LABEL_19:
  while (v10 != v12)
  {
    result = *((_QWORD *)v10 + 1);
    if (result)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 24))(result, a2);
    v13 = v10 + 16;
    v10 = v9;
    if (v13 != v9)
    {
      v10 = v13;
      while (*v10 >= 0xFEu)
      {
        v10 += 16;
        if (v10 == v9)
        {
          v10 = v9;
          break;
        }
      }
    }
  }
  v14 = __ldxr(v5);
  if (v14 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  if (__stlxr(0, v5))
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  return result;
}

_QWORD *WebCore::JSMediaSession::visitOutputConstraints<JSC::SlotVisitor>(_QWORD *result, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;

  v3 = result[3];
  v4 = (unsigned __int8 *)(v3 + 160);
  if (__ldaxr((unsigned __int8 *)(v3 + 160)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = (_QWORD *)MEMORY[0x19AEA534C](v3 + 160);
LABEL_5:
  v6 = *(unsigned __int8 **)(v3 + 120);
  if (!v6)
  {
    v9 = 0;
    v7 = 0;
LABEL_14:
    v8 = &v6[16 * v7];
    goto LABEL_15;
  }
  v7 = *((unsigned int *)v6 - 1);
  v8 = &v6[16 * v7];
  if (!*((_DWORD *)v6 - 3))
  {
    v9 = &v6[16 * v7];
    goto LABEL_14;
  }
  v9 = v6;
  if ((_DWORD)v7)
  {
    v10 = 16 * v7;
    v9 = v6;
    while (*v9 >= 0xFEu)
    {
      v9 += 16;
      v10 -= 16;
      if (!v10)
      {
        v9 = v8;
        break;
      }
    }
  }
LABEL_15:
  if (v6)
    v11 = &v6[16 * *((unsigned int *)v6 - 1)];
  else
    v11 = 0;
  while (v9 != v11)
  {
    result = (_QWORD *)*((_QWORD *)v9 + 1);
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 32))(result, a2);
    v12 = v9 + 16;
    v9 = v8;
    if (v12 != v8)
    {
      v9 = v12;
      while (*v9 >= 0xFEu)
      {
        v9 += 16;
        if (v9 == v8)
        {
          v9 = v8;
          break;
        }
      }
    }
  }
  v13 = __ldxr(v4);
  if (v13 != 1)
  {
    __clrex();
    return (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t WebCore::JSMediaSession::prototype(WebCore::JSMediaSession *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v15;
  JSC::Structure *v16;
  JSC::JSCell *v17;
  uint64_t v18;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSMediaSession::s_info + ~((_QWORD)&WebCore::JSMediaSession::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaSession::s_info + ~((_QWORD)&WebCore::JSMediaSession::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSMediaSession::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSMediaSession::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSMediaSessionPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v17 = (JSC::JSCell *)WebCore::JSMediaSessionPrototype::create(this, Structure, v15, v16);
    v18 = WebCore::JSMediaSession::createStructure((uint64_t *)this, (uint64_t)a2, v17);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v18, (uint64_t)&WebCore::JSMediaSession::s_info);
  }
  return *(_QWORD *)(v13 + 48);
}

uint64_t WebCore::JSMediaSession::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSMediaSession::visitChildren(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  int v15;

  result = JSC::JSObject::visitChildren();
  v5 = *(_QWORD *)(a1 + 24);
  v6 = (unsigned __int8 *)(v5 + 160);
  if (__ldaxr((unsigned __int8 *)(v5 + 160)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](v5 + 160);
LABEL_5:
  v8 = *(unsigned __int8 **)(v5 + 120);
  if (!v8)
  {
    v11 = 0;
    v9 = 0;
LABEL_14:
    v10 = &v8[16 * v9];
    goto LABEL_15;
  }
  v9 = *((unsigned int *)v8 - 1);
  v10 = &v8[16 * v9];
  if (!*((_DWORD *)v8 - 3))
  {
    v11 = &v8[16 * v9];
    goto LABEL_14;
  }
  v11 = v8;
  if ((_DWORD)v9)
  {
    v12 = 16 * v9;
    v11 = v8;
    while (*v11 >= 0xFEu)
    {
      v11 += 16;
      v12 -= 16;
      if (!v12)
      {
        v11 = v10;
        break;
      }
    }
  }
LABEL_15:
  if (v8)
    v13 = &v8[16 * *((unsigned int *)v8 - 1)];
  else
    v13 = 0;
  while (v11 != v13)
  {
    result = *((_QWORD *)v11 + 1);
    if (result)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 32))(result, a2);
    v14 = v11 + 16;
    v11 = v10;
    if (v14 != v10)
    {
      v11 = v14;
      while (*v11 >= 0xFEu)
      {
        v11 += 16;
        if (v11 == v10)
        {
          v11 = v10;
          break;
        }
      }
    }
  }
  v15 = __ldxr(v6);
  if (v15 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  if (__stlxr(0, v6))
    return WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return result;
}

uint64_t WebCore::JSMediaSession::visitChildren(WebCore::JSMediaSession *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  _QWORD v18[2];
  uint64_t v19;
  char v20;

  v18[0] = a2;
  v18[1] = this;
  v20 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v19 = v5;
  if (!v5 || !*(_BYTE *)(v5 + 24))
  {
    *((_QWORD *)a2 + 11) = v18;
    result = JSC::JSObject::visitChildren();
    v7 = *((_QWORD *)this + 3);
    v8 = (unsigned __int8 *)(v7 + 160);
    if (__ldaxr((unsigned __int8 *)(v7 + 160)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v8))
    {
      goto LABEL_7;
    }
    result = MEMORY[0x19AEA534C](v7 + 160);
LABEL_7:
    v10 = *(unsigned __int8 **)(v7 + 120);
    if (v10)
    {
      v11 = *((unsigned int *)v10 - 1);
      v12 = &v10[16 * v11];
      if (*((_DWORD *)v10 - 3))
      {
        v13 = v10;
        if ((_DWORD)v11)
        {
          v14 = 16 * v11;
          v13 = v10;
          while (*v13 >= 0xFEu)
          {
            v13 += 16;
            v14 -= 16;
            if (!v14)
            {
              v13 = v12;
              goto LABEL_14;
            }
          }
        }
        goto LABEL_14;
      }
      v13 = &v10[16 * v11];
    }
    else
    {
      v13 = 0;
      v11 = 0;
    }
    v12 = &v10[16 * v11];
    if (!v10)
    {
      v15 = 0;
LABEL_19:
      while (v13 != v15)
      {
        result = *((_QWORD *)v13 + 1);
        if (result)
          result = (*(uint64_t (**)(uint64_t, JSC::JSCell *))(*(_QWORD *)result + 24))(result, a2);
        v16 = v13 + 16;
        v13 = v12;
        if (v16 != v12)
        {
          v13 = v16;
          while (*v13 >= 0xFEu)
          {
            v13 += 16;
            if (v13 == v12)
            {
              v13 = v12;
              break;
            }
          }
        }
      }
      v17 = __ldxr(v8);
      if (v17 == 1)
      {
        if (!__stlxr(0, v8))
          goto LABEL_33;
      }
      else
      {
        __clrex();
      }
      result = WTF::Lock::unlockSlow((WTF::Lock *)v8);
LABEL_33:
      *(_QWORD *)(v18[0] + 88) = v19;
      return result;
    }
LABEL_14:
    v15 = &v10[16 * *((unsigned int *)v10 - 1)];
    goto LABEL_19;
  }
  result = 75;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSMediaSession::JSMediaSession(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v6;

  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  v6 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 24) = v6;
  return result;
}

{
  uint64_t result;
  uint64_t v6;

  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  v6 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 24) = v6;
  return result;
}

unint64_t WebCore::JSMediaSession::createPrototype(WebCore::JSMediaSession *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v5;
  JSC::Structure *v6;

  Structure = WebCore::JSMediaSessionPrototype::createStructure((uint64_t *)this, (uint64_t)a2, a2[82]);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSMediaSessionPrototype::create(this, Structure, v5, v6);
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaSession>,(WebCore::DOMConstructorID)124>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 992);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaSession>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSMediaSession::s_info + ~((_QWORD)&WebCore::JSMediaSession::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaSession::s_info + ~((_QWORD)&WebCore::JSMediaSession::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSMediaSession::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSMediaSession::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSMediaSessionPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSMediaSessionPrototype::create((WebCore::JSMediaSessionPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSMediaSession::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSMediaSession::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 992) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsMediaSessionConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSMediaSessionPrototype::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaSession>,(WebCore::DOMConstructorID)124>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsMediaSession_metadata(uint64_t a1, uint64_t a2)
{
  WebCore::MediaMetadata *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WebCore::MediaMetadata *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  WTF *v16;
  void *v17;
  WebCore::MediaMetadata *v18;

  v2 = *(WebCore::MediaMetadata **)(*(_QWORD *)(a2 + 24) + 48);
  if (!v2)
    return 2;
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 3320) + 32);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = ((unint64_t)v2 + ~((_QWORD)v2 << 32)) ^ (((unint64_t)v2 + ~((_QWORD)v2 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(WebCore::MediaMetadata **)(v4 + 16 * v9);
    if (v10 == v2)
    {
LABEL_7:
      v12 = *(_QWORD *)(v4 + 16 * v9 + 8);
      if (v12)
      {
        if ((*(_BYTE *)(v12 + 8) & 3) == 0)
        {
          v13 = *(_QWORD *)v12;
          if (*(_QWORD *)v12)
            return v13;
        }
      }
    }
    else
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v5;
        v10 = *(WebCore::MediaMetadata **)(v4 + 16 * v9);
        ++v11;
        if (v10 == v2)
          goto LABEL_7;
      }
    }
  }
  ++*(_DWORD *)v2;
  v18 = v2;
  v13 = WebCore::createWrapper<WebCore::MediaMetadata,WebCore::MediaMetadata>(v3, &v18);
  if (v18)
  {
    if (*(_DWORD *)v18 == 1)
    {
      WebCore::MediaMetadata::~MediaMetadata(v18, v14);
      WTF::fastFree(v16, v17);
    }
    else
    {
      --*(_DWORD *)v18;
    }
  }
  return v13;
}

uint64_t WebCore::setJSMediaSession_metadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;
  WebCore::MediaMetadata *v9;
  uint64_t v10;
  _BOOL4 v11;
  char **v12;
  BOOL v13;
  WTF::StringImpl *v16;
  WebCore::MediaMetadata *v17;
  WTF *v18;
  void *v19;
  WebCore::MediaMetadata *v20;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSMediaSession::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSMediaSession::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(_QWORD *)(a2 + 24);
  if ((a3 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v9 = 0;
  }
  else
  {
    v20 = *(WebCore::MediaMetadata **)(a1 + 56);
    if ((a3 & 0xFFFE000000000002) != 0)
      goto LABEL_25;
    v10 = *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C);
    v11 = *(_DWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C) != 0;
    v12 = (char **)(16 * v10);
    if ((_DWORD)v10)
      v13 = v12 == &WebCore::JSMediaMetadata::s_info;
    else
      v13 = 1;
    if (!v13)
    {
      do
      {
        v12 = (char **)v12[2];
        v11 = v12 != 0;
      }
      while (v12 != &WebCore::JSMediaMetadata::s_info && v12 != 0);
    }
    if (!v11 || (v9 = *(WebCore::MediaMetadata **)(a3 + 24)) == 0)
    {
LABEL_25:
      WebCore::throwAttributeTypeError(a1, (int)&v20, "MediaSession", 13, "metadata", 9, "MediaMetadata", 14);
      return 0;
    }
    ++*(_DWORD *)v9;
  }
  v20 = v9;
  WebCore::MediaSession::setMetadata(v8, &v20);
  v17 = v20;
  v20 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 1)
    {
      WebCore::MediaMetadata::~MediaMetadata(v17, v16);
      WTF::fastFree(v18, v19);
    }
    else
    {
      --*(_DWORD *)v17;
    }
  }
  return 1;
}

uint64_t WebCore::jsMediaSession_playbackState(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(unsigned __int8 *)(*((_QWORD *)a2 + 3) + 56);
  {
    WebCore::convertEnumerationToString(WebCore::MediaSessionPlaybackState)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaSessionPlaybackState)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaSessionPlaybackState)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSessionPlaybackState)::$_0::operator() const(void)::impl;
    unk_1EE2F4840 = &WebCore::convertEnumerationToString(WebCore::MediaSessionPlaybackState)::$_1::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::MediaSessionPlaybackState)::$_2::operator() const(void)::impl += 2;
    qword_1EE2F4848 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSessionPlaybackState)::$_2::operator() const(void)::impl;
  }
  v5 = WebCore::convertEnumerationToString(WebCore::MediaSessionPlaybackState)::values[v4];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

BOOL WebCore::setJSMediaSession_playbackState(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t this)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const char *v13;
  int v14;
  unsigned int v16;
  int v17;
  char **v19;
  int v21;
  int v22;
  uint64_t v26;
  unint64_t v27;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v7 = (char **)(16 * v5);
    if ((_DWORD)v5)
      v8 = v7 == &WebCore::JSMediaSession::s_info;
    else
      v8 = 1;
    if (!v8)
    {
      do
      {
        v7 = (char **)v7[2];
        v6 = v7 != 0;
      }
      while (v7 != &WebCore::JSMediaSession::s_info && v7 != 0);
    }
    if (v6)
    {
      v10 = *(_QWORD *)(a2 + 24);
      v27 = this;
      if ((this & 0xFFFE000000000002) != 0 || *(_BYTE *)(this + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v27, a1);
        v11 = v26;
        if (v26)
        {
LABEL_18:
          v12 = *(_DWORD *)(v11 + 16);
          v13 = *(const char **)(v11 + 8);
          v14 = *(_DWORD *)(v11 + 4);
          if (v13 != "none" && v14 == 4)
          {
            if ((v12 & 4) != 0)
            {
              if (*v13 != 110 || *(_WORD *)(v13 + 1) != 28271 || *((_WORD *)v13 + 1) != 25966)
                goto LABEL_27;
            }
            else
            {
              if (*(_WORD *)v13 != 110)
                goto LABEL_27;
              v21 = *(_DWORD *)(v13 + 2);
              v22 = *((_DWORD *)v13 + 1);
              if (v21 != 7209071 || v22 != 6619246)
                goto LABEL_27;
            }
          }
          else if (v13 != "none" || v14 != 4)
          {
            if (v13 != "paused" && v14 == 6)
            {
              if ((v12 & 4) != 0)
              {
                if (*v13 == 112 && *(_DWORD *)(v13 + 1) == 1702065505 && *(_DWORD *)(v13 + 2) == 1684370293)
                {
LABEL_38:
                  v19 = &off_1E32B2108;
LABEL_52:
                  v17 = 0;
                  v16 = *((unsigned __int8 *)v19 + 16);
LABEL_53:
                  if (*(_DWORD *)v11 == 2)
                    WTF::StringImpl::destroy((WTF::StringImpl *)v11, (WTF::StringImpl *)a2);
                  else
                    *(_DWORD *)v11 -= 2;
                  if (*((_DWORD *)v4 + 20))
                  {
                    if (((v17 | JSC::VM::hasExceptionsAfterHandlingTraps(v4)) & 1) == 0)
                      goto LABEL_57;
                  }
                  else if ((v17 & 1) == 0)
                  {
LABEL_57:
                    WebCore::MediaSession::setPlaybackState(v10, v16);
                    return 1;
                  }
                  return 0;
                }
              }
              else if (*(_WORD *)v13 == 112)
              {
                v16 = 0;
                v17 = 1;
                if (*(_QWORD *)(v13 + 2) != 0x65007300750061 || *(_QWORD *)(v13 + 4) != 0x64006500730075)
                  goto LABEL_53;
                goto LABEL_38;
              }
LABEL_27:
              v16 = 0;
              v17 = 1;
              goto LABEL_53;
            }
            if (v13 == "paused" && v14 == 6)
              goto LABEL_38;
            if (v13 == "playing" || v14 != 7)
            {
              if (v14 != 7 || v13 != "playing")
                goto LABEL_27;
            }
            else if ((v12 & 4) != 0)
            {
              if (*v13 != 112 || *(_DWORD *)(v13 + 1) != 1769562476 || *(_DWORD *)(v13 + 3) != 1735289209)
                goto LABEL_27;
            }
            else
            {
              if (*(_WORD *)v13 != 112)
                goto LABEL_27;
              if (*(_QWORD *)(v13 + 6) != 0x67006E00690079 || *(_QWORD *)(v13 + 2) != 0x6900790061006CLL)
                goto LABEL_27;
            }
            v19 = &off_1E32B2120;
            goto LABEL_52;
          }
          v19 = &WebCore::parseEnumerationFromString<WebCore::MediaSessionPlaybackState>(WTF::String const&)::mappings;
          goto LABEL_52;
        }
LABEL_42:
        if (*((_DWORD *)v4 + 20))
          JSC::VM::hasExceptionsAfterHandlingTraps(v4);
        return 0;
      }
      v11 = *(_QWORD *)(this + 8);
      if ((v11 & 1) != 0)
      {
        v11 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
        if (!v11)
        {
LABEL_17:
          if (v11)
            goto LABEL_18;
          goto LABEL_42;
        }
      }
      else if (!v11)
      {
        goto LABEL_17;
      }
      *(_DWORD *)v11 += 2;
      goto LABEL_17;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::JSMediaSession::subspaceForImpl(WebCore::JSMediaSession *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 1016);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v21 = *(_QWORD *)(v8 + 1016);
  if (!v21)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v9, &v23, (char *)this + 192, (char *)this + 1872, 32, 8, &v22);
    v11 = v22;
    v22 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v23;
    v23 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v21 = v9;
    v13 = *(_QWORD *)(v8 + 1016);
    *(_QWORD *)(v8 + 1016) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      v15 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6 + 2832, v14 + 1, (unint64_t)&v21);
      v14 = *(unsigned int *)(v6 + 2844);
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = *v15;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
    }
    *(_DWORD *)(v6 + 2844) = v14 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v16 = *(_QWORD *)(v3 + 1016);
  *(_QWORD *)(v3 + 1016) = v4;
  if (v16)
  {
    v17 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v17, v18);
  }
  v19 = __ldxr((unsigned __int8 *)v6);
  if (v19 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSMediaSessionOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v6 = v5[1];
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (v5[2] || (result = (*(uint64_t (**)(_QWORD *))(*v5 + 64))(v5), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

uint64_t WebCore::JSMediaSession::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSMediaSession::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSMediaSession::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24);
  else
    return 0;
}

uint64_t WebCore::parseEnumeration<WebCore::MediaSessionAction>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  const char *v5;
  int v6;
  unint64_t v7;
  int v9;
  int v10;
  char **v13;
  uint16x8_t v14;
  uint64_t v16;
  BOOL v17;
  int v18;
  BOOL v21;
  uint16x8_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint64_t v28;
  unint64_t v29;

  v3 = a1;
  v29 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v4 = *(_QWORD *)(this + 8);
    if ((v4 & 1) != 0)
    {
      v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
      if (!v4)
      {
LABEL_6:
        if (v4)
          goto LABEL_7;
LABEL_34:
        v9 = 0;
        v10 = 0;
        return v9 | (v10 << 8);
      }
    }
    else if (!v4)
    {
      goto LABEL_6;
    }
    *(_DWORD *)v4 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v29, a1);
  v4 = v28;
  if (!v28)
    goto LABEL_34;
LABEL_7:
  v5 = *(const char **)(v4 + 8);
  v6 = *(_DWORD *)(v4 + 4);
  v7 = ((unint64_t)*(unsigned int *)(v4 + 16) >> 2) & 1;
  if (v5 != "nexttrack" && v6 == 9)
  {
    if ((_DWORD)v7)
    {
      if (*v5 != 110 || *(_DWORD *)(v5 + 1) != 1953790053 || *(_DWORD *)(v5 + 5) != 1801675122)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v5 != 110)
        goto LABEL_16;
      v14 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968C02F0);
      v14.i16[0] = vminvq_u16(v14);
      if (!v14.i32[0])
        goto LABEL_16;
    }
    goto LABEL_37;
  }
  if (v5 == "nexttrack" && v6 == 9)
  {
LABEL_37:
    v13 = &WebCore::parseEnumerationFromString<WebCore::MediaSessionAction>(WTF::String const&)::mappings;
    goto LABEL_38;
  }
  if (v5 != "pause" && v6 == 5)
  {
    if ((_DWORD)v7)
    {
      if (*v5 != 112 || *(_WORD *)(v5 + 1) != 30049 || *(_WORD *)(v5 + 3) != 25971)
        goto LABEL_16;
    }
    else if (*(_WORD *)v5 != 112 || *(_QWORD *)(v5 + 2) != 0x65007300750061)
    {
      goto LABEL_16;
    }
  }
  else if (v5 != "pause" || v6 != 5)
  {
    v16 = v7 << 32;
    v17 = v6 != 4;
    if (v5 != "play" && v6 == 4)
    {
      if ((_DWORD)v7)
      {
        if (*v5 == 112 && *(_WORD *)(v5 + 1) == 24940 && *((_WORD *)v5 + 1) == 31073)
        {
LABEL_54:
          v13 = &off_1E32B2000;
          goto LABEL_38;
        }
        v17 = 0;
        goto LABEL_56;
      }
      if (*(_WORD *)v5 != 112)
      {
        v17 = 0;
        goto LABEL_57;
      }
      v17 = 0;
      v18 = 12;
      if (*(_DWORD *)(v5 + 2) == 6357100 && *((_DWORD *)v5 + 1) == 7929953)
        goto LABEL_54;
LABEL_58:
      if (v5 == "stop" || v17)
      {
        if (v6 == 4 && v5 == "stop")
          goto LABEL_65;
      }
      else
      {
        if (!v18)
        {
LABEL_65:
          v13 = &off_1E32B2090;
          goto LABEL_38;
        }
        if ((v16 & 0x100000000) != 0)
        {
          if (*v5 == 115 && *(_WORD *)(v5 + 1) == 28532 && *((_WORD *)v5 + 1) == 28783)
            goto LABEL_65;
        }
        else if (*(_WORD *)v5 == 115 && *((_DWORD *)v5 + 1) == 7340143 && *(_DWORD *)(v5 + 2) == 7274612)
        {
          goto LABEL_65;
        }
      }
LABEL_16:
      v9 = 0;
      v10 = 0;
      goto LABEL_39;
    }
    if (v5 == "play" && v6 == 4)
      goto LABEL_54;
    if (v5 != "previoustrack" && v6 == 13)
    {
      if (!(_DWORD)v7)
      {
        if (*(_WORD *)v5 != 112)
          goto LABEL_57;
        v22 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968C0300);
        v22.i16[0] = vminvq_u16(v22);
        if (!v22.i32[0])
          goto LABEL_57;
        v23 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 10), (int16x8_t)xmmword_1968C0310);
        v23.i16[0] = vminvq_u16(v23);
        if (!v23.i32[0])
          goto LABEL_57;
LABEL_126:
        v13 = &off_1E32B2018;
        goto LABEL_38;
      }
      if (*v5 == 112 && *(_QWORD *)(v5 + 1) == 0x7473756F69766572 && *(_QWORD *)(v5 + 5) == 0x6B6361727473756FLL)
        goto LABEL_126;
LABEL_56:
      v16 = 0x100000000;
LABEL_57:
      v18 = 12;
      goto LABEL_58;
    }
    if (v5 == "previoustrack" && v6 == 13)
      goto LABEL_126;
    if (v5 != "seekbackward" && v6 == 12)
    {
      if ((_DWORD)v7)
      {
        if (*v5 != 115 || *(_QWORD *)(v5 + 1) != 0x776B6361626B6565 || *(_QWORD *)(v5 + 4) != 0x647261776B636162)
          goto LABEL_56;
      }
      else
      {
        if (*(_WORD *)v5 != 115)
          goto LABEL_57;
        v24 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968C0320);
        v24.i16[0] = vminvq_u16(v24);
        if (!v24.i32[0])
          goto LABEL_57;
        v25 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 8), (int16x8_t)xmmword_1968C0330);
        v25.i16[0] = vminvq_u16(v25);
        if (!v25.i32[0])
          goto LABEL_57;
      }
LABEL_130:
      v13 = &off_1E32B2030;
      goto LABEL_38;
    }
    if (v5 == "seekbackward" && v6 == 12)
      goto LABEL_130;
    if (v5 != "seekforward" && v6 == 11)
    {
      if ((_DWORD)v7)
      {
        if (*v5 != 115 || *(_QWORD *)(v5 + 1) != 0x6177726F666B6565 || *(_QWORD *)(v5 + 3) != 0x64726177726F666BLL)
          goto LABEL_56;
      }
      else
      {
        if (*(_WORD *)v5 != 115)
          goto LABEL_57;
        v26 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968C0340);
        v26.i16[0] = vminvq_u16(v26);
        if (!v26.i32[0])
          goto LABEL_57;
        v27 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 6), (int16x8_t)xmmword_1968C0350);
        v27.i16[0] = vminvq_u16(v27);
        if (!v27.i32[0])
          goto LABEL_57;
      }
LABEL_134:
      v13 = &off_1E32B2048;
      goto LABEL_38;
    }
    if (v5 == "seekforward" && v6 == 11)
      goto LABEL_134;
    v21 = v6 != 6;
    if (v5 == "seekto" || v6 != 6)
    {
      v18 = *(_DWORD *)(v4 + 4);
      if (v5 == "seekto" && v6 == 6)
        goto LABEL_138;
    }
    else
    {
      if ((_DWORD)v7)
      {
        if (*v5 != 115 || *(_DWORD *)(v5 + 1) != 1953195365 || *(_DWORD *)(v5 + 2) != 1869900645)
        {
          v21 = 0;
          v18 = 6;
          v16 = 0x100000000;
          goto LABEL_140;
        }
LABEL_138:
        v13 = &off_1E32B2060;
        goto LABEL_38;
      }
      if (*(_WORD *)v5 != 115)
      {
        v21 = 0;
        v18 = 6;
        goto LABEL_140;
      }
      v21 = 0;
      v18 = 6;
      if (*(_QWORD *)(v5 + 2) == 0x74006B00650065 && *(_QWORD *)(v5 + 4) == 0x6F0074006B0065)
        goto LABEL_138;
    }
LABEL_140:
    if (v5 == "skipad" || v21)
    {
      if (v5 != "skipad" || v6 != 6)
        goto LABEL_58;
    }
    else if (v18)
    {
      if ((v16 & 0x100000000) != 0)
      {
        if (*v5 != 115 || *(_DWORD *)(v5 + 1) != 1634756971 || *(_DWORD *)(v5 + 2) != 1684107369)
          goto LABEL_56;
      }
      else
      {
        if (*(_WORD *)v5 != 115)
          goto LABEL_57;
        v18 = 12;
        if (*(_QWORD *)(v5 + 2) != 0x6100700069006BLL || *(_QWORD *)(v5 + 4) != 0x64006100700069)
          goto LABEL_58;
      }
    }
    v13 = &off_1E32B2078;
    goto LABEL_38;
  }
  v13 = &off_1E32B1FE8;
LABEL_38:
  v9 = *((unsigned __int8 *)v13 + 16);
  v10 = 1;
LABEL_39:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v9 | (v10 << 8);
}

uint64_t WebCore::convertDictionary<WebCore::MediaSessionActionDetails>@<X0>(JSC::JSCell *this@<X1>, JSC::VM **a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  uint64_t result;
  int v10;
  unsigned __int16 v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  __int16 v14;
  __int16 v15;
  JSC::VM *v16;
  double v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  double v23;
  JSC::VM *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  char v28;
  double v29;
  JSC::VM *v30;
  JSC::VM *v31;
  BOOL v32;
  int v33;
  uint64_t v34;
  int *v35;
  int v36;
  double v37;
  double v38;
  int v39;
  __int16 v40;
  _BYTE v41[7];
  _BYTE v42[7];
  _BYTE v43[7];
  JSC::VM *v44;
  JSC::VM *v45;
  WTF::StringImpl *v46;

  v44 = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    if (((unint64_t)this & 0xFFFE000000000002) != 0)
      goto LABEL_59;
    Object = JSC::JSCell::getObject(this);
    if (!Object)
      goto LABEL_59;
    v6 = (JSC::Structure *)Object;
    WTF::AtomStringImpl::addLiteral();
    v8 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v46);
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, v7);
      else
        *(_DWORD *)v46 -= 2;
    }
    if (*((_DWORD *)v44 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v44);
      if ((result & 1) != 0)
        goto LABEL_10;
    }
    if (v8 == 10)
      goto LABEL_9;
    v46 = a2[7];
    v11 = WebCore::parseEnumeration<WebCore::MediaSessionAction>((JSC::JSGlobalObject *)a2, v8);
    if (*((_DWORD *)v46 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v46);
      if ((result & 1) != 0)
        goto LABEL_10;
    }
    if (v11 <= 0xFFu)
    {
LABEL_59:
      result = JSC::throwTypeError();
      goto LABEL_10;
    }
    WTF::AtomStringImpl::addLiteral();
    v13 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v46);
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, v12);
      else
        *(_DWORD *)v46 -= 2;
    }
    if (*((_DWORD *)v44 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v44);
      if ((result & 1) != 0)
        goto LABEL_10;
    }
    if ((v13 | 8) == 0xA)
    {
      v14 = 0;
      v15 = 0;
      goto LABEL_25;
    }
    v16 = a2[7];
    if (v13 >= 0xFFFE000000000000)
    {
      v32 = (_DWORD)v13 == 0;
      goto LABEL_96;
    }
    *(_QWORD *)&v17 = v13 - 0x2000000000000;
    if (v13 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      if (v17 <= 0.0)
      {
        v14 = v17 < 0.0;
        goto LABEL_23;
      }
    }
    else
    {
      if ((v13 & 0xFFFE000000000002) != 0)
      {
        v14 = v13 == 7;
        goto LABEL_23;
      }
      v33 = *(unsigned __int8 *)(v13 + 5);
      if (v33 == 3)
      {
        v36 = *(_DWORD *)(v13 + 8);
LABEL_92:
        v32 = v36 == 0;
        goto LABEL_96;
      }
      if (v33 == 2)
      {
        v34 = *(_QWORD *)(v13 + 8);
        if ((v34 & 1) != 0)
          v35 = (int *)(v13 + 16);
        else
          v35 = (int *)(v34 + 4);
        v36 = *v35;
        goto LABEL_92;
      }
      if ((*(_BYTE *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0xA) & 1) != 0)
      {
        v32 = *(_QWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x28) == (_QWORD)a2;
LABEL_96:
        v14 = !v32;
        goto LABEL_23;
      }
    }
    v14 = 1;
LABEL_23:
    if (*((_DWORD *)v16 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v16);
      if ((result & 1) != 0)
        goto LABEL_10;
    }
    v15 = 1;
LABEL_25:
    WTF::AtomStringImpl::addLiteral();
    v19 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v46);
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, v18);
      else
        *(_DWORD *)v46 -= 2;
    }
    if (*((_DWORD *)v44 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v44);
      if ((result & 1) != 0)
        goto LABEL_10;
    }
    if (v19 == 10)
    {
      v20 = 0;
      v21 = 0;
      v22 = 0;
    }
    else
    {
      if ((v19 & 0xFFFFFFFFFFFFFFF7) == 2)
      {
        v20 = 0;
        v23 = 0.0;
      }
      else
      {
        v24 = a2[7];
        v45 = v24;
        v46 = (WTF::StringImpl *)v19;
        if (v19 >= 0xFFFE000000000000)
        {
          v23 = (double)(int)v19;
        }
        else if (v19 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        {
          v31 = v24;
          JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v46, (JSC::JSGlobalObject *)a2);
          v24 = v31;
        }
        else
        {
          *(_QWORD *)&v23 = v19 - 0x2000000000000;
        }
        if (*((_DWORD *)v24 + 20))
        {
          v37 = v23;
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v24);
          v23 = v37;
          if ((result & 1) != 0)
            goto LABEL_10;
        }
        if ((*(_QWORD *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
          goto LABEL_73;
        v20 = 1;
      }
      v22 = *(_QWORD *)&v23 & 0xFFFFFFFFFFFFFF00;
      v21 = LOBYTE(v23);
    }
    WTF::AtomStringImpl::addLiteral();
    v25 = v46;
    v27 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v46);
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v26);
      else
        *(_DWORD *)v25 -= 2;
    }
    result = (uint64_t)v44;
    if (*((_DWORD *)v44 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v44);
      if ((result & 1) != 0)
        goto LABEL_10;
    }
    if (v27 == 10 || (v27 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v28 = 0;
      v29 = 0.0;
LABEL_53:
      v10 = 0;
      *(_BYTE *)a3 = v11;
      *(_DWORD *)(a3 + 1) = *(_DWORD *)v43;
      *(_DWORD *)(a3 + 4) = *(_DWORD *)&v43[3];
      *(_QWORD *)(a3 + 8) = v22 | v21;
      *(_BYTE *)(a3 + 16) = v20;
      *(_DWORD *)(a3 + 17) = *(_DWORD *)v42;
      *(_DWORD *)(a3 + 20) = *(_DWORD *)&v42[3];
      *(double *)(a3 + 24) = v29;
      *(_BYTE *)(a3 + 32) = v28;
      *(_DWORD *)(a3 + 33) = *(_DWORD *)v41;
      *(_DWORD *)(a3 + 36) = *(_DWORD *)&v41[3];
      *(_WORD *)(a3 + 40) = v14 | (v15 << 8);
      *(_DWORD *)(a3 + 42) = v39;
      *(_WORD *)(a3 + 46) = v40;
      goto LABEL_54;
    }
    v30 = a2[7];
    v45 = v30;
    v46 = (WTF::StringImpl *)v27;
    if (v27 >= 0xFFFE000000000000)
    {
      v29 = (double)(int)v27;
    }
    else if (v27 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      result = JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v46, (JSC::JSGlobalObject *)a2);
    }
    else
    {
      *(_QWORD *)&v29 = v27 - 0x2000000000000;
    }
    if (*((_DWORD *)v30 + 20))
    {
      v38 = v29;
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v30);
      v29 = v38;
      if ((result & 1) != 0)
        goto LABEL_10;
    }
    if ((*(_QWORD *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      v28 = 1;
      goto LABEL_53;
    }
LABEL_73:
    result = JSC::throwTypeError();
    goto LABEL_10;
  }
LABEL_9:
  result = (uint64_t)WebCore::throwRequiredMemberTypeError((int)a2, (int)&v44, "action", 7, "MediaSessionActionDetails", 26, "MediaSessionAction", 19);
LABEL_10:
  v10 = 1;
LABEL_54:
  *(_DWORD *)(a3 + 48) = v10;
  return result;
}

void WebCore::JSMediaSessionActionHandler::~JSMediaSessionActionHandler(WebCore::JSMediaSessionActionHandler *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::JSAbortAlgorithm::~JSAbortAlgorithm(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::JSMediaSessionActionHandler::handleEvent(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  JSC::Structure *v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v14;
  _BYTE v15[8];
  uint64_t v16;
  WTF *v17;
  _OWORD v18[4];
  uint64_t v19;
  _BYTE v20[8];
  uint64_t *v21;

  if (!WebCore::ActiveDOMCallback::canInvokeCallback((WebCore::ActiveDOMCallback *)a1, a2))
    return 2;
  ++*(_DWORD *)(a1 + 16);
  v4 = **(_QWORD **)(a1 + 24);
  if (!v4 || (*(_BYTE *)(v4 + 8) & 3) != 0)
    v5 = 0;
  else
    v5 = *(_QWORD *)v4;
  MEMORY[0x19AEA3294](v20, *(_QWORD *)(v5 + 56));
  v15[0] = 0;
  v17 = (WTF *)((char *)v18 + 8);
  memset(v18, 0, sizeof(v18));
  v19 = 0;
  v6 = (void *)WebCore::convertDictionaryToJS(v5, v5, (double *)a2);
  *((_QWORD *)&v18[0] + 1) = v6;
  v16 = 0x800000001;
  v21 = 0;
  v7 = *(uint64_t **)(a1 + 24);
  v8 = *v7;
  if (*v7
    && (*(_BYTE *)(v8 + 8) & 3) == 0
    && *(_QWORD *)v8
    && ((v9 = v7[2]) == 0 || (*(_BYTE *)(v9 + 8) & 3) != 0 ? (v10 = 0) : (v10 = *(JSC::Structure **)v9),
        WebCore::JSCallbackData::invokeCallback(*(JSC::JSGlobalObject **)v8, v10, 10, (uint64_t)v15, 0, 0, (uint64_t *)&v21), (v6 = v21) != 0))
  {
    WebCore::reportException(*(JSC::JSGlobalObject **)(16 * (***(_DWORD ***)(*(_QWORD *)(a1 + 24) + 16) & 0xFFFFFFFE) + 0x28), (uint64_t)v21, 0, 0, 0);
    v11 = 1;
  }
  else
  {
    v11 = 0;
  }
  v12 = *(uint64_t **)&v18[0];
  if (*(_QWORD *)&v18[0])
  {
    v21 = &v16;
    v14 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v18[0], (uint64_t *)&v21);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v12, v14);
  }
  if (v17 != (WTF *)((char *)v18 + 8) && v17)
    WTF::fastFree(v17, v6);
  MEMORY[0x19AEA32A0](v20);
  if (*(_DWORD *)(a1 + 16) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  else
    --*(_DWORD *)(a1 + 16);
  return v11;
}

uint64_t WebCore::JSMediaSessionActionHandler::visitJSFunction(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = *(uint64_t **)(*(_QWORD *)(a1 + 24) + 16);
  if (!v3 || (v3[1] & 3) != 0)
    v4 = 0;
  else
    v4 = *v3;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, v4);
}

{
  return WebCore::JSCallbackData::visitJSFunction<JSC::SlotVisitor>(*(_QWORD *)(a1 + 24), a2);
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSMediaSource>::construct(JSC *a1, uint64_t a2)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::ScriptExecutionContext *v7;
  WebCore::MediaSource *v8;
  JSCell *v9;
  JSC::JSCell *v10;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v12;
  JSC::JSGlobalObject *v13;
  JSC::VM *v14;
  JSC::JSObject *v15;
  JSC::Structure *v16;
  JSC::VM *FunctionRealm;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  JSC::JSCell *v26;
  unint64_t Structure;
  JSC::Structure *v28;
  JSC::JSCell *v29;
  uint64_t v30;
  unint64_t SubclassStructure;
  WebCore::MediaSource *v32;
  WebCore::MediaSource *v34;
  JSC::VM *v35;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v35 = v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(a1, &v35, (uint64_t)"MediaSource", 12);
  v7 = (WebCore::ScriptExecutionContext *)v6;
  v8 = (WebCore::MediaSource *)bmalloc::api::isoAllocate();
  v34 = WebCore::MediaSource::MediaSource(v8, v7);
  WebCore::ActiveDOMObject::suspendIfNeeded(v34);
  v9 = (JSCell *)WebCore::toJSNewlyCreated((uint64_t)a1, *(JSC::VM **)(v5 + 40), (uint64_t *)&v34);
  v10 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v10 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v10);
    if (Object)
    {
      v13 = Object;
      if (Object != *(JSC::JSGlobalObject **)(a2 + 24))
      {
        v14 = (JSC::VM *)*((_QWORD *)a1 + 7);
        FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, Object, v12);
        if (!*((_DWORD *)v14 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v14) & 1) == 0)
        {
          v18 = *((_QWORD *)FunctionRealm + 412);
          if (v18)
          {
            v19 = *(_DWORD *)(v18 - 8);
            v20 = ((unint64_t)&WebCore::JSMediaSource::s_info + ~((_QWORD)&WebCore::JSMediaSource::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaSource::s_info + ~((_QWORD)&WebCore::JSMediaSource::s_info << 32)) >> 22);
            v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
            v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
            v23 = v19 & ((v22 >> 31) ^ v22);
            v24 = *(char ***)(v18 + 16 * v23);
            if (v24 == &WebCore::JSMediaSource::s_info)
            {
LABEL_11:
              v15 = *(JSC::JSObject **)(v18 + 16 * v23 + 8);
              if (v15)
              {
LABEL_13:
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v13, v15, v16);
                if (!*((_DWORD *)v14 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v14) & 1) == 0)
                  JSC::JSObject::setStructure(v9, v14, SubclassStructure);
                goto LABEL_15;
              }
            }
            else
            {
              v25 = 1;
              while (v24)
              {
                v23 = ((_DWORD)v23 + v25) & v19;
                v24 = *(char ***)(v18 + 16 * v23);
                ++v25;
                if (v24 == &WebCore::JSMediaSource::s_info)
                  goto LABEL_11;
              }
            }
          }
          v26 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v14, FunctionRealm, v15);
          Structure = WebCore::JSMediaSourcePrototype::createStructure((uint64_t *)v14, (uint64_t)FunctionRealm, v26);
          *(_DWORD *)(Structure + 16) |= 0x80000u;
          v29 = (JSC::JSCell *)WebCore::JSMediaSourcePrototype::create(v14, FunctionRealm, Structure, v28);
          v30 = WebCore::JSMediaSource::createStructure((uint64_t *)v14, (uint64_t)FunctionRealm, v29);
          v15 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v30, (uint64_t)&WebCore::JSMediaSource::s_info);
          goto LABEL_13;
        }
      }
    }
  }
LABEL_15:
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    v9 = 0;
  v32 = v34;
  v34 = 0;
  if (v32)
  {
    if (*((_DWORD *)v32 + 6) == 1)
      (*(void (**)(WebCore::MediaSource *))(*(_QWORD *)v32 + 16))(v32);
    else
      --*((_DWORD *)v32 + 6);
  }
  return v9;
}

uint64_t WebCore::JSMediaSourcePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSMediaSourcePrototype::create(WebCore::JSMediaSourcePrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WebCore::JSDOMGlobalObject *v9;
  uint64_t v10;
  _BOOL4 v11;
  char **v12;
  BOOL v13;
  uint64_t v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  JSC::Structure *v23;
  int v24;
  unint64_t v26;
  WTF::StringImpl *v27[6];
  int v28;
  int v29;
  JSC::Structure *v30;
  int v31;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v26 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v26);
    *((_QWORD *)this + 4865) = SlowCase + (int)v26;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<14u>(this, (uint64_t)&WebCore::JSMediaSource::s_info, (uint64_t)&WebCore::JSMediaSourcePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(WebCore::JSDOMGlobalObject **)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x28);
  v10 = *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C);
  v11 = *(_DWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C) != 0;
  v12 = (char **)(16 * v10);
  if ((_DWORD)v10)
    v13 = v12 == &WebCore::JSDedicatedWorkerGlobalScope::s_info;
  else
    v13 = 1;
  if (!v13)
  {
    do
    {
      v12 = (char **)v12[2];
      v11 = v12 != 0;
    }
    while (v12 != &WebCore::JSDedicatedWorkerGlobalScope::s_info && v12 != 0);
  }
  if (!v11
    || (v15 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v9),
        (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 136))(v15) + 480) & 0x10000) == 0))
  {
    WTF::AtomStringImpl::addLiteral();
    v16 = v27[0];
    v17 = *((_DWORD *)this + 23281);
    *((_DWORD *)this + 23281) = 1;
    LODWORD(v27[0]) = -1;
    WORD2(v27[0]) = 1;
    JSC::JSObject::deleteProperty();
    *((_DWORD *)this + 23281) = v17;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v18);
      else
        *(_DWORD *)v16 -= 2;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
      JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
  }
  v19 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v21 = JSC::JSString::create((uint64_t)this, v27);
  v22 = v27[0];
  v27[0] = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v20);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v31 = *(_DWORD *)SlowCase;
  v30 = v23;
  v24 = JSC::Structure::outOfLineCapacity(v23);
  v28 = 0;
  v29 = v24;
  v27[0] = (WTF::StringImpl *)&v29;
  v27[1] = (WTF::StringImpl *)SlowCase;
  v27[2] = this;
  v27[3] = (WTF::StringImpl *)&v31;
  v27[4] = (WTF::StringImpl *)&v30;
  v27[5] = (WTF::StringImpl *)&v28;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v23, this, v19, 6, (uint64_t)v27);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v28, v21);
  *((_DWORD *)v23 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSMediaSource>,(WebCore::DOMConstructorID)129>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1032);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v22) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v20);
    v5[2] = SlowCase + (int)v20;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v22, &WebCore::JSDOMConstructor<WebCore::JSMediaSource>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v21 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v21);
    v10[2848] = v2 + (int)v21;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v22);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v22);
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v22);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v18 = WebCore::JSMediaSource::prototype((WebCore::JSMediaSource *)a1, (JSC::VM *)a2, v17);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v18, 14, (uint64_t)&v22);
  JSC::reifyStaticProperties<2u>((JSC::VM *)a1, (uint64_t)&WebCore::JSMediaSource::s_info, (uint64_t)&WebCore::JSMediaSourceConstructorTableValues, (JSC::JSObject *)v2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1032) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsMediaSourceConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSMediaSourcePrototype::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSMediaSource>,(WebCore::DOMConstructorID)129>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsMediaSource_handle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF *v4;
  unint64_t v5;
  WTF *v7;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  WebCore::MediaSource::handle((_QWORD *)(*(_QWORD *)(a2 + 24) - 40), &v7);
  v4 = v7;
  v5 = WebCore::wrap<WebCore::MediaSourceHandle>(a1, v3, v7);
  if (*((_DWORD *)v4 + 2) == 1)
    (*(void (**)(WTF *))(*(_QWORD *)v4 + 8))(v4);
  else
    --*((_DWORD *)v4 + 2);
  return v5;
}

unint64_t WebCore::jsMediaSource_sourceBuffers(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 64);
  if (v2)
    return WebCore::wrap<WebCore::SourceBufferList>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v2);
  else
    return 2;
}

unint64_t WebCore::jsMediaSource_activeSourceBuffers(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 72);
  if (v2)
    return WebCore::wrap<WebCore::SourceBufferList>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v2);
  else
    return 2;
}

uint64_t WebCore::jsMediaSource_readyState(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v3 = *((_QWORD *)a2 + 3);
  if (*(_BYTE *)(v3 + 192) || (v5 = *(_QWORD *)(v3 + 48)) == 0)
    v4 = 0;
  else
    v4 = (*(int (**)(uint64_t))(*(_QWORD *)v5 + 112))(v5);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = (uint64_t *)(v6 + 41968);
  {
    WebCore::convertEnumerationToString(WebCore::MediaSourceReadyState)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaSourceReadyState)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaSourceReadyState)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSourceReadyState)::$_0::operator() const(void)::impl;
    *(_QWORD *)algn_1EE2F4878 = &WebCore::convertEnumerationToString(WebCore::MediaSourceReadyState)::$_1::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::MediaSourceReadyState)::$_2::operator() const(void)::impl += 2;
    qword_1EE2F4880 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSourceReadyState)::$_2::operator() const(void)::impl;
  }
  v8 = WebCore::convertEnumerationToString(WebCore::MediaSourceReadyState)::values[v4];
  if (!v8)
    return *v7;
  v9 = *(_DWORD *)v8;
  v10 = *(_DWORD *)(v8 + 4);
  *(_DWORD *)v8 += 2;
  if (v10)
  {
    if (v10 != 1)
    {
LABEL_10:
      v11 = *(_QWORD *)(v6 + 64760);
      if (!v11 || v8 != *(_QWORD *)(v11 + 8))
      {
        v11 = JSC::jsStringWithCacheSlowCase();
        v9 = *(_DWORD *)v8 - 2;
      }
      goto LABEL_13;
    }
    v13 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_10;
      v14 = v15;
    }
    v11 = *(_QWORD *)(v6 + 8 * v14 + 42216);
  }
  else
  {
    v11 = *v7;
  }
LABEL_13:
  if (v9)
    *(_DWORD *)v8 = v9;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v8, a2);
  return v11;
}

unint64_t WebCore::jsMediaSource_duration(WTF::MediaTime *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  double v4;
  uint64_t v5;
  uint64_t v7;
  unsigned __int8 *v8;
  int v10;
  __int128 v11;
  __int128 v12;

  v2 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v2 + 192)
    || (a1 = *(WTF::MediaTime **)(v2 + 48)) == 0
    || (a1 = (WTF::MediaTime *)(*(uint64_t (**)(WTF::MediaTime *))(*(_QWORD *)a1 + 112))(a1), !(_DWORD)a1))
  {
    v3 = *(_OWORD *)WTF::MediaTime::invalidTime(a1);
    goto LABEL_3;
  }
  v7 = *(_QWORD *)(v2 + 48);
  v8 = (unsigned __int8 *)(v7 + 64);
  if (__ldaxr((unsigned __int8 *)(v7 + 64)))
  {
    __clrex();
LABEL_15:
    MEMORY[0x19AEA534C](v7 + 64);
    goto LABEL_16;
  }
  if (__stxr(1u, v8))
    goto LABEL_15;
LABEL_16:
  v3 = *(_OWORD *)(v7 + 72);
  v10 = __ldxr(v8);
  if (v10 == 1)
  {
    if (!__stlxr(0, v8))
      goto LABEL_3;
  }
  else
  {
    __clrex();
  }
  v11 = v3;
  WTF::Lock::unlockSlow((WTF::Lock *)(v7 + 64));
  v3 = v11;
LABEL_3:
  v12 = v3;
  WTF::MediaTime::toDouble((WTF::MediaTime *)&v12);
  if ((*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v5 = (int)v4, v4 == (double)(int)v5)
    && ((_DWORD)v5 || (*(_QWORD *)&v4 & 0x8000000000000000) == 0))
  {
    return v5 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v4 + 0x2000000000000;
  }
}

BOOL WebCore::setJSMediaSource_duration(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  JSValue v15;
  double v16;
  WTF::StringImpl *v17;
  int v18[2];
  WTF::StringImpl *v19;
  char v20;

  v4 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSMediaSource::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSMediaSource::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v18, a1);
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*(_DWORD *)(v4 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4))
    return 0;
  WebCore::MediaSource::setDuration((WTF::MediaTime *)(v10 - 40), v11, (uint64_t)v18);
  if (v20)
  {
    v13 = (WTF::StringImpl *)LOBYTE(v18[0]);
    v14 = v19;
    v17 = v19;
    if (!*(_QWORD *)(v4 + 16))
    {
      v15.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)LOBYTE(v18[0]), (JSC::JSGlobalObject *)&v17);
      JSC::VM::throwException((JSC::VM *)v4, a1, v15);
      v14 = v17;
    }
    v17 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  return 1;
}

uint64_t WebCore::jsMediaSource_onsourceopen(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 4);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1904), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 4) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v5 - 5) + 16))((uint64_t)v5 - 40);
  else
    --*((_DWORD *)v5 - 4);
  return v9;
}

BOOL WebCore::setJSMediaSource_onsourceopen(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSMediaSource::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSMediaSource::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 4);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1904), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 4) == 1)
      {
        (*(void (**)(uint64_t))(*((_QWORD *)v11 - 5) + 16))((uint64_t)v11 - 40);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 4);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsMediaSource_onsourceended(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 4);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1896), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 4) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v5 - 5) + 16))((uint64_t)v5 - 40);
  else
    --*((_DWORD *)v5 - 4);
  return v9;
}

BOOL WebCore::setJSMediaSource_onsourceended(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSMediaSource::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSMediaSource::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 4);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1896), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 4) == 1)
      {
        (*(void (**)(uint64_t))(*((_QWORD *)v11 - 5) + 16))((uint64_t)v11 - 40);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 4);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsMediaSource_onsourceclose(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 4);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1888), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 4) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v5 - 5) + 16))((uint64_t)v5 - 40);
  else
    --*((_DWORD *)v5 - 4);
  return v9;
}

BOOL WebCore::setJSMediaSource_onsourceclose(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSMediaSource::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSMediaSource::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 4);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1888), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 4) == 1)
      {
        (*(void (**)(uint64_t))(*((_QWORD *)v11 - 5) + 16))((uint64_t)v11 - 40);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 4);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsMediaSourceConstructor_canConstructInDedicatedWorker(WebCore::JSDOMGlobalObject *a1)
{
  uint64_t v1;
  uint64_t v3;

  v1 = WebCore::JSDOMGlobalObject::scriptExecutionContext(a1);
  if (!v1)
    return 10;
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 136))(v1) + 480) & 0x10000) == 0)
    return 6;
  v3 = WebCore::PlatformStrategies::mediaStrategy((WebCore::PlatformStrategies *)WebCore::s_platformStrategies);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3))
    return 7;
  else
    return 6;
}

uint64_t WebCore::JSMediaSource::subspaceForImpl(WebCore::JSMediaSource *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 1056);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v21 = *(_QWORD *)(v8 + 1056);
  if (!v21)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v9, &v23, (char *)this + 192, (char *)this + 1872, 32, 8, &v22);
    v11 = v22;
    v22 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v23;
    v23 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v21 = v9;
    v13 = *(_QWORD *)(v8 + 1056);
    *(_QWORD *)(v8 + 1056) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      v15 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6 + 2832, v14 + 1, (unint64_t)&v21);
      v14 = *(unsigned int *)(v6 + 2844);
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = *v15;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
    }
    *(_DWORD *)(v6 + 2844) = v14 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v16 = *(_QWORD *)(v3 + 1056);
  *(_QWORD *)(v3 + 1056) = v4;
  if (v16)
  {
    v17 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v17, v18);
  }
  v19 = __ldxr((unsigned __int8 *)v6);
  if (v19 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSMediaSourceOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v6 = *(_QWORD *)(v5 - 32);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (*(_QWORD *)(v5 - 24)
    || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 - 40) + 64))(v5 - 40), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

uint64_t WebCore::JSMediaSourceOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v27;
  uint64_t v28;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  result = v3 - 40;
  v5 = *(_DWORD *)(v3 - 16);
  *(_DWORD *)(v3 - 16) = v5 + 1;
  if (*(_DWORD *)(a3 + 48))
  {
    v9 = *(_QWORD *)(a3 + 32);
    v7 = (uint64_t *)(a3 + 32);
    v8 = v9;
    if (v9)
    {
      v10 = *(_DWORD *)(v8 - 8);
      v11 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
      v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
      v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
      v14 = v10 & ((v13 >> 31) ^ v13);
      v15 = *(_QWORD *)(v8 + 16 * v14);
      if (v15 != result)
      {
        v16 = 1;
        while (v15)
        {
          v14 = ((_DWORD)v14 + v16) & v10;
          v15 = *(_QWORD *)(v8 + 16 * v14);
          ++v16;
          if (v15 == result)
            goto LABEL_12;
        }
        v14 = *(unsigned int *)(v8 - 4);
      }
LABEL_12:
      if (v14 != *(_DWORD *)(v8 - 4))
      {
        v17 = (_QWORD *)(v8 + 16 * v14);
        *v17 = -1;
        v20 = v17[1];
        v19 = v17 + 1;
        v18 = v20;
        if (v20)
        {
          *(_QWORD *)(v18 + 8) = 3;
          *v19 = 0;
        }
        ++*(_DWORD *)(*v7 - 16);
        v21 = *v7;
        if (*v7)
          v22 = *(_DWORD *)(v21 - 12) - 1;
        else
          v22 = -1;
        *(_DWORD *)(v21 - 12) = v22;
        v23 = *v7;
        if (*v7)
        {
          v24 = 6 * *(_DWORD *)(v23 - 12);
          v25 = *(_DWORD *)(v23 - 4);
          if (v24 < v25 && v25 >= 9)
          {
            v27 = v3;
            v28 = v3 - 40;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v7, v25 >> 1, 0);
            v3 = v27;
            result = v28;
          }
        }
      }
    }
    v5 = *(_DWORD *)(v3 - 16) - 1;
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 8);
    if (v6)
    {
      *(_QWORD *)(v6 + 8) = 3;
      *(_QWORD *)(v3 + 8) = 0;
    }
  }
  if (!v5)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  *(_DWORD *)(v3 - 16) = v5;
  return result;
}

_DWORD *WebCore::JSMediaSourceHandle::destroy(WebCore::JSMediaSourceHandle *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSMediaSourceHandle::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSMediaSourceHandlePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSMediaSourceHandlePrototype::create(WebCore::JSMediaSourceHandlePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSMediaSourceHandle::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSMediaSourceHandlePrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaSourceHandle>,(WebCore::DOMConstructorID)130>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1040);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaSourceHandle>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSMediaSourceHandle::s_info
         + ~((_QWORD)&WebCore::JSMediaSourceHandle::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaSourceHandle::s_info
                                                                     + ~((_QWORD)&WebCore::JSMediaSourceHandle::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSMediaSourceHandle::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSMediaSourceHandle::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSMediaSourceHandlePrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSMediaSourceHandlePrototype::create((WebCore::JSMediaSourceHandlePrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSMediaSourceHandle::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSMediaSourceHandle::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1040) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsMediaSourceHandleConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSMediaSourceHandlePrototype::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaSourceHandle>,(WebCore::DOMConstructorID)130>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSMediaSourceHandleOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSMediaSourceHandleOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::MediaSourceHandle>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::MediaSourceHandle *__hidden))a3 != off_1E335DEA0)
  {
    __break(0xC471u);
    JUMPOUT(0x194D25CDCLL);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSMediaSourceHandle::s_info
         + ~((_QWORD)&WebCore::JSMediaSourceHandle::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaSourceHandle::s_info
                                                                     + ~((_QWORD)&WebCore::JSMediaSourceHandle::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSMediaSourceHandle::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_17;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSMediaSourceHandle::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSMediaSourceHandlePrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSMediaSourceHandlePrototype::create((WebCore::JSMediaSourceHandlePrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSMediaSourceHandle::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSMediaSourceHandle::s_info);
LABEL_17:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 1064);
  if (v33)
    goto LABEL_37;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_22;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_22:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 1064))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 1064);
    *(_QWORD *)(v36 + 1064) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 1064);
  *(_QWORD *)(v32 + 1064) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_36:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_37:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_39;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_39:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE336020 & 1) == 0)
  {
    qword_1EE336018 = (uint64_t)&off_1E32B3650;
    byte_1EE336020 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336018;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

uint64_t WebCore::JSMediaSourceHandle::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSMediaSourceHandle::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSMediaSourceHandle::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24);
  else
    return 0;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSMediaStream>::construct(JSC *this, uint64_t a2, JSValue a3)
{
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::JSDOMGlobalObject *v8;
  JSCell *v9;
  WTF *v10;
  JSC::JSGlobalObject *v11;
  uint64_t v12;
  _BOOL4 v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  char **v23;
  BOOL v24;
  int hasIteratorMethod;
  int v27;
  JSC::VM *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  JSValue v34;
  int i;
  unsigned int v36;
  uint64_t IndexQuickly;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  int v40;
  WebCore::Document *v41;
  WebCore::JSDOMGlobalObject *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  char v48;
  bmalloc::api *v49;
  void *v50;
  bmalloc::api *v51;
  void *v52;
  uint64_t v53;
  unint64_t v54;
  WTF *v55;
  WebCore::Document *v56;
  uint64_t v57;
  uint64_t (***v58)(WebCore::MediaStream *__hidden);
  void *v59;
  WebCore::JSDOMGlobalObject *v60;
  bmalloc::api *v61;
  void *v62;
  WTF::StringImpl **v63;
  char hasExceptionsAfterHandlingTraps;
  int v67;
  void *v68;
  uint64_t v69;
  _DWORD *v70;
  uint64_t v71;
  WTF *v72;
  _DWORD *v73;
  WTF::StringImpl *v74[2];
  int v75;
  JSC::VM *v76;
  WebCore::MediaStream *v77;
  WTF *v78;
  uint64_t v79;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v74[0] = *((WTF::StringImpl **)this + 7);
    v6 = *(_QWORD *)(a2 + 24);
    v7 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v6 + 40));
    if (v7)
    {
      if (*(_BYTE *)(v7 + 274))
      {
        __break(0xC471u);
        JUMPOUT(0x194D26394);
      }
      WebCore::MediaStream::create((WebCore::MediaStream *)(v7 - 192), (uint64_t *)&v78);
      if (*(uint64_t (***)(WebCore::MediaStream *__hidden))v78 != off_1E335FC28)
      {
        __break(0xC471u);
        JUMPOUT(0x194D263B4);
      }
      v9 = (JSCell *)WebCore::createWrapper<WebCore::MediaStream,WebCore::MediaStream>(*(JSC::VM **)(v6 + 40), &v78, v8);
      WebCore::setSubclassStructureIfNeeded<WebCore::MediaStream>(this, a2, v9);
      if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
        v9 = 0;
      v10 = v78;
      v78 = 0;
      if (v10)
      {
        if (*((_DWORD *)v10 + 22) == 1)
        {
          WebCore::MediaStream::~MediaStream(v10);
          bmalloc::api::isoDeallocate(v49, v50);
        }
        else
        {
          --*((_DWORD *)v10 + 22);
        }
      }
      return v9;
    }
    v63 = v74;
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(this, v63, (uint64_t)"MediaStream", 12);
  }
  v11 = *(JSC::JSGlobalObject **)(a2 + 48);
  if (((unint64_t)v11 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v11 + 5) >= 0x17u)
  {
    v12 = *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C);
    v13 = *(_DWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) != 0;
    v14 = (char **)(16 * v12);
    if ((_DWORD)v12)
      v15 = v14 == &WebCore::JSMediaStream::s_info;
    else
      v15 = 1;
    if (!v15)
    {
      do
      {
        v14 = (char **)v14[2];
        v13 = v14 != 0;
      }
      while (v14 != &WebCore::JSMediaStream::s_info && v14 != 0);
    }
    if (v13)
    {
      v78 = (WTF *)*((_QWORD *)this + 7);
      v17 = *(_QWORD *)(a2 + 24);
      v18 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v17 + 40));
      if (v18)
      {
        if (*(_BYTE *)(v18 + 274))
        {
          __break(0xC471u);
          JUMPOUT(0x194D26488);
        }
        v20 = *(_QWORD *)(a2 + 48);
        v74[0] = *((WTF::StringImpl **)this + 7);
        if ((v20 & 0xFFFE000000000002) != 0)
          goto LABEL_34;
        v21 = *(unsigned int *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x4C);
        v22 = *(_DWORD *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x4C) != 0;
        v23 = (char **)(16 * v21);
        if ((_DWORD)v21)
          v24 = v23 == &WebCore::JSMediaStream::s_info;
        else
          v24 = 1;
        if (!v24)
        {
          do
          {
            v23 = (char **)v23[2];
            v22 = v23 != 0;
          }
          while (v23 != &WebCore::JSMediaStream::s_info && v23 != 0);
        }
        if (v22 && (v41 = *(WebCore::Document **)(v20 + 24)) != 0)
        {
          WebCore::MediaStream::create((WebCore::MediaStream *)(v18 - 192), v41, v74);
          if (*(uint64_t (***)(WebCore::MediaStream *__hidden))v74[0] != off_1E335FC28)
          {
            __break(0xC471u);
            JUMPOUT(0x194D2653CLL);
          }
          v9 = (JSCell *)WebCore::createWrapper<WebCore::MediaStream,WebCore::MediaStream>(*(JSC::VM **)(v17 + 40), v74, v42);
          WebCore::setSubclassStructureIfNeeded<WebCore::MediaStream>(this, a2, v9);
          if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
            v9 = 0;
          v43 = v74[0];
          v74[0] = 0;
          if (v43)
          {
            if (*((_DWORD *)v43 + 22) == 1)
            {
              WebCore::MediaStream::~MediaStream(v43);
              bmalloc::api::isoDeallocate(v51, v52);
            }
            else
            {
              --*((_DWORD *)v43 + 22);
            }
          }
        }
        else
        {
LABEL_34:
          WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v74, 0, "stream", 7, "MediaStream", 12, v19, 0, 0, "MediaStream", 12);
          return 0;
        }
        return v9;
      }
      v63 = &v78;
      return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(this, v63, (uint64_t)"MediaStream", 12);
    }
  }
  hasIteratorMethod = JSC::hasIteratorMethod(this, v11, a3);
  v27 = hasIteratorMethod;
  if (!*((_DWORD *)v5 + 20))
  {
    if (hasIteratorMethod)
      goto LABEL_37;
    return (JSCell *)JSC::throwTypeError();
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v5);
  if ((hasExceptionsAfterHandlingTraps & 1) != 0 || ((v27 ^ 1) & 1) != 0)
  {
    if ((hasExceptionsAfterHandlingTraps & 1) != 0)
      return 0;
    return (JSCell *)JSC::throwTypeError();
  }
LABEL_37:
  v28 = (JSC::VM *)*((_QWORD *)this + 7);
  v76 = v28;
  v29 = *(_QWORD *)(a2 + 24);
  v30 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v29 + 40));
  if (!v30)
  {
    v63 = &v76;
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(this, v63, (uint64_t)"MediaStream", 12);
  }
  v31 = v30;
  if (*(_BYTE *)(v30 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194D2644CLL);
  }
  v32 = *(_QWORD *)(a2 + 48);
  v33 = *((_QWORD *)this + 7);
  v77 = (WebCore::MediaStream *)v33;
  if ((v32 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v32 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v39 = v74[0];
    v74[0] = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, v38);
      else
        *(_DWORD *)v39 -= 2;
    }
    v9 = 0;
    v40 = 1;
    v75 = 1;
    goto LABEL_93;
  }
  v78 = 0;
  v79 = 0;
  if (JSC::getIterationMode() == 2)
  {
    for (i = 1; ; ++i)
    {
      v36 = (*(_BYTE *)(v32 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(v32 + 8) - 8) : 0;
      if (i - 1 >= v36)
        break;
      IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)v32, i - 1, 0);
      if (!IndexQuickly)
        IndexQuickly = JSC::JSObject::get((JSC::JSObject *)v32, this, (i - 1));
      if (*(_DWORD *)(v33 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v33) & 1) != 0)
        break;
      WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::MediaStreamTrack>>::convert((uint64_t)this, IndexQuickly, (uint64_t)&v78);
      if (*(_QWORD *)(v33 + 16))
      {
        v53 = JSC::JSArrayIterator::create();
        v54 = i | 0xFFFE000000000000;
        if (i < 0)
          v54 = COERCE__INT64((double)i) + 0x2000000000000;
        *(_QWORD *)(v53 + 16) = v54;
        goto LABEL_81;
      }
    }
  }
  else
  {
    JSC::iteratorForIterable(this, (JSC::JSGlobalObject *)v32, v34);
    if (!*(_DWORD *)(v33 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v33) & 1) == 0)
    {
      while (1)
      {
        v44 = JSC::iteratorStep();
        if (*(_QWORD *)(v33 + 16) || v44 == 6)
          break;
        v46 = JSC::iteratorValue();
        if (*(_DWORD *)(v33 + 80))
        {
          v47 = v46;
          v48 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v33);
          v46 = v47;
          if ((v48 & 1) != 0)
            break;
        }
        WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::MediaStreamTrack>>::convert((uint64_t)this, v46, (uint64_t)&v78);
        if (*(_QWORD *)(v33 + 16))
        {
LABEL_81:
          JSC::iteratorClose();
          break;
        }
      }
    }
  }
  if (*(_DWORD *)(v33 + 80))
  {
    v67 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v33);
    v55 = v78;
    if (v67)
    {
      v75 = 1;
      if (HIDWORD(v79))
      {
        v69 = 8 * HIDWORD(v79);
        do
        {
          v70 = *(_DWORD **)v55;
          *(_QWORD *)v55 = 0;
          if (v70)
          {
            if (v70[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v70 + 16))(v70);
            else
              --v70[6];
          }
          v55 = (WTF *)((char *)v55 + 8);
          v69 -= 8;
        }
        while (v69);
        v55 = v78;
      }
      if (v55)
      {
        v78 = 0;
        LODWORD(v79) = 0;
        WTF::fastFree(v55, v68);
      }
      v9 = 0;
      v40 = 1;
      goto LABEL_93;
    }
  }
  else
  {
    v55 = v78;
  }
  v56 = (WebCore::Document *)(v31 - 192);
  v57 = HIDWORD(v79);
  v75 = 0;
  v74[0] = 0;
  v74[1] = 0;
  v78 = v55;
  v58 = (uint64_t (***)(WebCore::MediaStream *__hidden))bmalloc::api::isoAllocate();
  v77 = (WebCore::MediaStream *)WebCore::MediaStream::MediaStream(v58, v56, (uint64_t **)&v78);
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v77 + 3);
  if ((_DWORD)v57)
  {
    v71 = 8 * v57;
    v72 = v55;
    do
    {
      v73 = *(_DWORD **)v72;
      *(_QWORD *)v72 = 0;
      if (v73)
      {
        if (v73[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v73 + 16))(v73);
        else
          --v73[6];
      }
      v72 = (WTF *)((char *)v72 + 8);
      v71 -= 8;
    }
    while (v71);
  }
  if (v55)
    WTF::fastFree(v55, v59);
  if (*v58 != off_1E335FC28)
  {
    __break(0xC471u);
    JUMPOUT(0x194D26508);
  }
  v9 = (JSCell *)WebCore::createWrapper<WebCore::MediaStream,WebCore::MediaStream>(*(JSC::VM **)(v29 + 40), &v77, v60);
  WebCore::setSubclassStructureIfNeeded<WebCore::MediaStream>(this, a2, v9);
  if (*((_DWORD *)v28 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v28) & 1) != 0)
    v9 = 0;
  if (v77)
  {
    if (*((_DWORD *)v77 + 22) == 1)
    {
      WebCore::MediaStream::~MediaStream(v77);
      bmalloc::api::isoDeallocate(v61, v62);
    }
    else
    {
      --*((_DWORD *)v77 + 22);
    }
  }
  v40 = v75;
  if (v75 != -1)
LABEL_93:
    ((void (*)(WTF **, WTF::StringImpl **))off_1E32B6B70[v40])(&v78, v74);
  return v9;
}

_BYTE *WebCore::jsMediaStreamPrototypeFunction_getTracks(_BYTE *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  JSC::VM *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  _DWORD *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = this;
  v4 = *((_QWORD *)a2 + 5);
  v30 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v30, "MediaStream", "getTracks");
  v5 = 16 * (*(_DWORD *)v4 & 0xFFFFFFFE);
  v6 = *(unsigned int *)(v5 + 0x4C);
  v7 = *(_DWORD *)(v5 + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMediaStream::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMediaStream::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v30, "MediaStream", "getTracks");
  v11 = *(_QWORD *)(v4 + 24);
  v12 = *(JSC::VM **)(v5 + 40);
  v13 = *(unsigned int *)(v11 + 116);
  if (!(_DWORD)v13)
  {
    v31 = 0;
    v32 = 0;
    return (_BYTE *)WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::MediaStreamTrack>>>::convert<WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>,0ul>((uint64_t)this, v12, (uint64_t)&v31);
  }
  v14 = *(_QWORD **)(v11 + 104);
  v15 = *(unsigned int *)(v11 + 112);
  v16 = &v14[2 * v15];
  if ((_DWORD)v15)
  {
    v17 = 16 * v15;
    while (!*v14)
    {
      v14 += 2;
      v17 -= 16;
      if (!v17)
      {
        v14 = v16;
        break;
      }
    }
  }
  v32 = 0;
  if (!(v13 >> 29))
  {
    v18 = WTF::fastMalloc((WTF *)(8 * v13));
    v19 = (WTF *)v18;
    LODWORD(v32) = v13;
    v31 = v18;
    if (v14 == v16)
    {
      v25 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::MediaStreamTrack>>>::convert<WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>,0ul>((uint64_t)v3, v12, (uint64_t)&v31);
    }
    else
    {
      v20 = 0;
      v21 = 1;
LABEL_21:
      v22 = v21;
      v23 = v14[1];
      ++*(_DWORD *)(v23 + 24);
      *(_QWORD *)(v18 + 8 * v20++) = v23;
      while (1)
      {
        v14 += 2;
        if (v14 == v16)
          break;
        if (*v14)
        {
          v21 = v22 + 1;
          if (v14 != v16)
            goto LABEL_21;
          break;
        }
      }
      HIDWORD(v32) = v20;
      v25 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::MediaStreamTrack>>>::convert<WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>,0ul>((uint64_t)v3, v12, (uint64_t)&v31);
      if (v20)
      {
        v26 = 8 * v22;
        v27 = v19;
        do
        {
          v28 = *(_DWORD **)v27;
          *(_QWORD *)v27 = 0;
          if (v28)
          {
            if (v28[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 16))(v28);
            else
              --v28[6];
          }
          v27 = (WTF *)((char *)v27 + 8);
          v26 -= 8;
        }
        while (v26);
      }
    }
    WTF::fastFree(v19, v24);
    return (_BYTE *)v25;
  }
  __break(0xC471u);
  return this;
}

uint64_t WebCore::JSMediaStream::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSMediaStreamPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSMediaStreamPrototype::create(WebCore::JSMediaStreamPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  JSC::Structure *v17;
  unint64_t v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  uint64_t v22;
  int *v23;
  WTF::StringImpl **v24;
  int *v25;
  int v26;
  int v27;
  WTF::StringImpl *v28;
  int v29;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v19 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v19);
    *((_QWORD *)this + 4865) = SlowCase + (int)v19;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<12u>(this, (uint64_t)&WebCore::JSMediaStream::s_info, (uint64_t)&WebCore::JSMediaStreamPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[319] + 20032);
  v28 = 0;
  v10 = JSC::JSFunction::create();
  v20 = 0;
  v21 = SlowCase;
  v22 = 0x1000000FFFFFFFFLL;
  v23 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, this, v9, v10, 6, (uint64_t)&v20);
  v12 = v28;
  v28 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v15 = JSC::JSString::create((uint64_t)this, &v20);
  v16 = v20;
  v20 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v29 = *(_DWORD *)SlowCase;
  v28 = v17;
  v27 = JSC::Structure::outOfLineCapacity(v17);
  v26 = 0;
  v20 = (WTF::StringImpl *)&v27;
  v21 = SlowCase;
  v22 = (uint64_t)this;
  v23 = &v29;
  v24 = &v28;
  v25 = &v26;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v17, this, v13, 6, (uint64_t)&v20);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v26, v15);
  *((_DWORD *)v17 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSMediaStream>,(WebCore::DOMConstructorID)139>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1112);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructor<WebCore::JSMediaStream>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSMediaStream::s_info + ~((_QWORD)&WebCore::JSMediaStream::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaStream::s_info + ~((_QWORD)&WebCore::JSMediaStream::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSMediaStream::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSMediaStream::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEventTarget::prototype((WebCore::JSEventTarget *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSMediaStreamPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSMediaStreamPrototype::create((WebCore::JSMediaStreamPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSMediaStream::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSMediaStream::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1112) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsMediaStreamConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSMediaStreamPrototype::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSMediaStream>,(WebCore::DOMConstructorID)139>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsMediaStream_id(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 96) + 48);
  if (!v4)
    return *v3;
  v5 = *(_DWORD *)v4;
  v6 = *(_DWORD *)(v4 + 4);
  *(_DWORD *)v4 += 2;
  if (v6)
  {
    if (v6 != 1)
    {
LABEL_4:
      v7 = *(_QWORD *)(v2 + 64760);
      if (!v7 || v4 != *(_QWORD *)(v7 + 8))
      {
        v7 = JSC::jsStringWithCacheSlowCase();
        v5 = *(_DWORD *)v4 - 2;
      }
      goto LABEL_7;
    }
    v9 = *(unsigned __int8 **)(v4 + 8);
    if ((*(_BYTE *)(v4 + 16) & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v11 = *(unsigned __int16 *)v9;
      if (v11 > 0xFF)
        goto LABEL_4;
      v10 = v11;
    }
    v7 = *(_QWORD *)(v2 + 8 * v10 + 42216);
  }
  else
  {
    v7 = *v3;
  }
LABEL_7:
  if (v5)
    *(_DWORD *)v4 = v5;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, a2);
  return v7;
}

uint64_t WebCore::jsMediaStream_active(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 132))
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsMediaStream_onaddtrack(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  bmalloc::api *v11;
  void *v12;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 22);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 104), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 22) == 1)
  {
    WebCore::MediaStream::~MediaStream(v5);
    bmalloc::api::isoDeallocate(v11, v12);
  }
  else
  {
    --*((_DWORD *)v5 + 22);
  }
  return v9;
}

BOOL WebCore::setJSMediaStream_onaddtrack(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  bmalloc::api *v16;
  void *v17;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSMediaStream::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSMediaStream::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 22);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 104), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 22) == 1)
      {
        WebCore::MediaStream::~MediaStream(v11);
        bmalloc::api::isoDeallocate(v16, v17);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 22);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsMediaStream_onremovetrack(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  bmalloc::api *v11;
  void *v12;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 22);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1680), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 22) == 1)
  {
    WebCore::MediaStream::~MediaStream(v5);
    bmalloc::api::isoDeallocate(v11, v12);
  }
  else
  {
    --*((_DWORD *)v5 + 22);
  }
  return v9;
}

BOOL WebCore::setJSMediaStream_onremovetrack(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  bmalloc::api *v16;
  void *v17;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSMediaStream::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSMediaStream::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 22);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1680), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 22) == 1)
      {
        WebCore::MediaStream::~MediaStream(v11);
        bmalloc::api::isoDeallocate(v16, v17);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 22);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::JSMediaStreamOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v6 = v5[4];
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (v5[5] || (result = (*(uint64_t (**)(_QWORD *))(v5[3] + 64))(v5 + 3), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

void WebCore::JSMediaStreamOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebCore::MediaStream *v3;
  int v4;
  _DWORD *v5;
  bmalloc::api *v6;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  WebCore::MediaStream *v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;

  v3 = *(WebCore::MediaStream **)(*(_QWORD *)a2 + 24);
  v4 = *((_DWORD *)v3 + 22);
  *((_DWORD *)v3 + 22) = v4 + 1;
  v5 = (_DWORD *)((char *)v3 + 8);
  if (!v3)
    v5 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v10 = *(_QWORD *)(a3 + 32);
    v8 = (uint64_t *)(a3 + 32);
    v9 = v10;
    if (v10)
    {
      v11 = *(_DWORD *)(v9 - 8);
      v12 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
      v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
      v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
      v15 = v11 & ((v14 >> 31) ^ v14);
      v16 = *(WebCore::MediaStream **)(v9 + 16 * v15);
      if (v16 != v3)
      {
        v17 = 1;
        while (v16)
        {
          v15 = ((_DWORD)v15 + v17) & v11;
          v16 = *(WebCore::MediaStream **)(v9 + 16 * v15);
          ++v17;
          if (v16 == v3)
            goto LABEL_14;
        }
        v15 = *(unsigned int *)(v9 - 4);
      }
LABEL_14:
      if (v15 != *(_DWORD *)(v9 - 4))
      {
        v18 = (_QWORD *)(v9 + 16 * v15);
        *v18 = -1;
        v21 = v18[1];
        v20 = v18 + 1;
        v19 = v21;
        if (v21)
        {
          *(_QWORD *)(v19 + 8) = 3;
          *v20 = 0;
        }
        ++*(_DWORD *)(*v8 - 16);
        v22 = *v8;
        if (*v8)
          v23 = *(_DWORD *)(v22 - 12) - 1;
        else
          v23 = -1;
        *(_DWORD *)(v22 - 12) = v23;
        v24 = *v8;
        if (*v8)
        {
          v25 = 6 * *(_DWORD *)(v24 - 12);
          v26 = *(_DWORD *)(v24 - 4);
          if (v25 < v26 && v26 >= 9)
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v8, v26 >> 1, 0);
        }
      }
    }
    v4 = *((_DWORD *)v3 + 22) - 1;
  }
  else if (*(_QWORD *)v5)
  {
    *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
    *(_QWORD *)v5 = 0;
  }
  if (v4)
  {
    *((_DWORD *)v3 + 22) = v4;
  }
  else
  {
    WebCore::MediaStream::~MediaStream(v3);
    bmalloc::api::isoDeallocate(v6, v7);
  }
}

unint64_t WebCore::toJSNewlyCreated(int a1, JSC::VM *a2, WTF **a3)
{
  unint64_t result;

  if (*(uint64_t (***)(WebCore::MediaStream *__hidden))*a3 == off_1E335FC28)
    return WebCore::createWrapper<WebCore::MediaStream,WebCore::MediaStream>(a2, a3, (WebCore::JSDOMGlobalObject *)a3);
  result = 567;
  __break(0xC471u);
  return result;
}

unint64_t WebCore::createWrapper<WebCore::MediaStream,WebCore::MediaStream>(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  WebCore::JSEventTarget *v15;
  JSC::JSCell *v16;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v18;
  JSC::Structure *v19;
  JSC::JSCell *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  int v39;
  unint64_t SlowCase;
  WTF *v41;
  uint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *Allocator;
  uint64_t v47;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  WTF *v55;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 412);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = ((unint64_t)&WebCore::JSMediaStream::s_info + ~((_QWORD)&WebCore::JSMediaStream::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaStream::s_info + ~((_QWORD)&WebCore::JSMediaStream::s_info << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(char ***)(v6 + 16 * v11);
    if (v12 == &WebCore::JSMediaStream::s_info)
    {
LABEL_6:
      v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
      if (v14)
        goto LABEL_8;
    }
    else
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(char ***)(v6 + 16 * v11);
        ++v13;
        if (v12 == &WebCore::JSMediaStream::s_info)
          goto LABEL_6;
      }
    }
  }
  v15 = (WebCore::JSEventTarget *)*((_QWORD *)a1 + 7);
  v16 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v15, a1, a3);
  Structure = WebCore::JSMediaStreamPrototype::createStructure((uint64_t *)v15, (uint64_t)a1, v16);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v20 = (JSC::JSCell *)WebCore::JSMediaStreamPrototype::create(v15, Structure, v18, v19);
  v21 = WebCore::JSMediaStream::createStructure((uint64_t *)v15, (uint64_t)a1, v20);
  v14 = WebCore::cacheDOMStructure((JSCell *)a1, v21, (uint64_t)&WebCore::JSMediaStream::s_info);
LABEL_8:
  v22 = *((_QWORD *)a1 + 7);
  v23 = *(_QWORD *)(v22 + 41456);
  v24 = *(_QWORD *)(v23 + 23536);
  v25 = *(_QWORD **)(v24 + 1136);
  if (v25)
    goto LABEL_31;
  v26 = *(_QWORD *)(v23 + 22648);
  if (__ldaxr((unsigned __int8 *)v26))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v26))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v26);
LABEL_13:
  v28 = *(_QWORD *)(v26 + 2824);
  v53 = *(_QWORD *)(v28 + 1136);
  if (!v53)
  {
    v29 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v55, "IsoSpace T");
    v54 = 0;
    MEMORY[0x19AEA3204](v29, &v55, v22 + 192, v22 + 1872, 32, 8, &v54);
    v31 = (uint64_t)v54;
    v54 = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = v55;
    v55 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 1)
        WTF::fastFree(v32, v30);
      else
        --*(_DWORD *)v32;
    }
    v53 = v29;
    v33 = *(_QWORD *)(v28 + 1136);
    *(_QWORD *)(v28 + 1136) = v29;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = *(unsigned int *)(v26 + 2844);
    if ((_DWORD)v34 == *(_DWORD *)(v26 + 2840))
    {
      v35 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v26 + 2832, v34 + 1, (unint64_t)&v53);
      v34 = *(unsigned int *)(v26 + 2844);
      *(_QWORD *)(*(_QWORD *)(v26 + 2832) + 8 * v34) = *v35;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v26 + 2832) + 8 * v34) = v29;
    }
    *(_DWORD *)(v26 + 2844) = v34 + 1;
  }
  v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v36 = *(_QWORD *)(v24 + 1136);
  *(_QWORD *)(v24 + 1136) = v25;
  if (v36)
  {
    v37 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v37, v38);
  }
  v39 = __ldxr((unsigned __int8 *)v26);
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, (unsigned __int8 *)v26))
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
LABEL_31:
  SlowCase = v25[3];
  if (SlowCase < v25[4])
  {
LABEL_32:
    v25[3] = SlowCase + 32;
    goto LABEL_33;
  }
  SlowCase = v25[5];
  if ((SlowCase & 1) == 0)
  {
    v52 = *(_QWORD *)(SlowCase + 8) ^ v25[6];
    v25[4] = SlowCase + HIDWORD(v52);
    v25[5] = SlowCase + (int)v52;
    goto LABEL_32;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_33:
  *(_DWORD *)SlowCase = 0;
  v41 = *a2;
  *a2 = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v14);
  *(_QWORD *)(SlowCase + 24) = v41;
  if (*(_BYTE *)(v22 + 755))
    __dmb(0xAu);
  v42 = *((_QWORD *)a1 + 415);
  if ((byte_1EE336030 & 1) == 0)
  {
    qword_1EE336028 = (uint64_t)&off_1E32B3680;
    byte_1EE336030 = 1;
  }
  if (v5)
    v43 = (uint64_t *)((char *)v5 + 8);
  else
    v43 = 0;
  if (!*(_DWORD *)(v42 + 48))
  {
    if ((SlowCase & 8) != 0)
      v44 = (SlowCase - 112) | 1;
    else
      v44 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v44 & 1) != 0)
      v45 = v44 + 47;
    else
      v45 = *(_QWORD *)v44 + 32;
    Allocator = *(_QWORD **)(v45 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v45 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE336028;
    Allocator[2] = v42;
    v47 = *v43;
    *v43 = (uint64_t)Allocator;
    if (!v47)
      return SlowCase;
LABEL_58:
    *(_QWORD *)(v47 + 8) = 3;
    return SlowCase;
  }
  v55 = v5;
  if ((SlowCase & 8) != 0)
    v49 = (SlowCase - 112) | 1;
  else
    v49 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v49 & 1) != 0)
    v50 = v49 + 47;
  else
    v50 = *(_QWORD *)v49 + 32;
  v51 = *(_QWORD **)(v50 + 16);
  if (!v51)
    v51 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v50 + 16) = *v51;
  *v51 = SlowCase;
  v51[1] = &qword_1EE336028;
  v51[2] = v42;
  v54 = v51;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v42 + 32), (uint64_t *)&v55, (uint64_t *)&v54);
  v47 = (uint64_t)v54;
  if (v54)
    goto LABEL_58;
  return SlowCase;
}

uint64_t WebCore::wrap<WebCore::MediaStream>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  bmalloc::api *v7;
  void *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  WebCore::MediaStream *v17;

  v3 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v3 + 48))
  {
    v9 = *(_QWORD *)(v3 + 32);
    if (!v9)
      goto LABEL_5;
    v10 = *(_DWORD *)(v9 - 8);
    v11 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = *(_QWORD *)(v9 + 16 * v14);
    if (v15 != a3)
    {
      v16 = 1;
      while (v15)
      {
        v14 = ((_DWORD)v14 + v16) & v10;
        v15 = *(_QWORD *)(v9 + 16 * v14);
        ++v16;
        if (v15 == a3)
          goto LABEL_16;
      }
      goto LABEL_5;
    }
LABEL_16:
    v4 = *(_QWORD *)(v9 + 16 * v14 + 8);
    if (!v4)
      goto LABEL_5;
  }
  else
  {
    v4 = *(_QWORD *)(a3 + 8);
    if (!v4)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v4 + 8) & 3) == 0)
  {
    v5 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
      return v5;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 88);
  v17 = (WebCore::MediaStream *)a3;
  if (*(uint64_t (***)(WebCore::MediaStream *__hidden))a3 == off_1E335FC28)
  {
    v5 = WebCore::createWrapper<WebCore::MediaStream,WebCore::MediaStream>(a2, &v17, (WebCore::JSDOMGlobalObject *)a3);
    if (v17)
    {
      if (*((_DWORD *)v17 + 22) == 1)
      {
        WebCore::MediaStream::~MediaStream(v17);
        bmalloc::api::isoDeallocate(v7, v8);
      }
      else
      {
        --*((_DWORD *)v17 + 22);
      }
    }
    return v5;
  }
  result = 567;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSMediaStream::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSMediaStream::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSMediaStream::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24);
  else
    return 0;
}

uint64_t WebCore::JSDOMConstructor<WebCore::JSMediaStreamAudioDestinationNode>::construct(WebCore::JSDOMGlobalObject *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  JSC::JSGlobalObject *v7;
  uint64_t v8;
  uint64_t v9;
  JSCell *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;
  uint64_t v18;
  uint64_t v19;
  WebCore::JSDOMGlobalObject *v20;
  JSC::VM *v21;
  WTF::StringImpl *v22;
  WebCore::AudioNode *v23;
  JSC::JSCell *v24;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v26;
  JSC::JSGlobalObject *v27;
  JSC::VM *v28;
  JSC::JSObject *v29;
  JSC::Structure *v30;
  JSC::VM *FunctionRealm;
  uint64_t v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char **v38;
  int v39;
  JSC::JSCell *v40;
  unint64_t Structure;
  JSC::Structure *v42;
  JSC::JSCell *v43;
  uint64_t v44;
  unint64_t SubclassStructure;
  JSValue v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  JSValue v50;
  uint64_t v51;
  WTF::StringImpl *v52[2];
  uint64_t v53;
  int v54[2];
  WTF::StringImpl *v55;
  int v56;
  _DWORD v57[8];
  uint64_t v58;

  v4 = *((_QWORD *)a1 + 7);
  v58 = v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(a1);
  if (v6 && *(_BYTE *)(v6 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194D282BCLL);
  }
  v9 = v6 - 192;
  if (!v6)
    v9 = 0;
  if ((*(_DWORD *)(*(_QWORD *)(v9 + 680) + 720) & 0x20) == 0)
  {
    JSC::throwTypeError();
    return 2;
  }
  v11 = *(int *)(a2 + 32);
  if ((_DWORD)v11 == 1)
  {
    v47.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, v7);
    return JSC::VM::throwException((JSC::VM *)v4, a1, v47);
  }
  v12 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)v57 = *((_QWORD *)a1 + 7);
  if ((v12 & 0xFFFE000000000002) != 0)
    goto LABEL_19;
  v13 = *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C);
  v14 = *(_DWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C) != 0;
  v15 = (char **)(16 * v13);
  if ((_DWORD)v13)
    v16 = v15 == &WebCore::JSAudioContext::s_info;
  else
    v16 = 1;
  if (!v16)
  {
    do
    {
      v15 = (char **)v15[2];
      v14 = v15 != 0;
    }
    while (v15 != &WebCore::JSAudioContext::s_info && v15 != 0);
  }
  if (!v14)
  {
LABEL_19:
    WebCore::throwArgumentTypeError((uint64_t)a1, (uint64_t)v57, 0, "context", 8, "MediaStreamAudioDestinationNode", 32, v8, 0, 0, "AudioContext", 13);
    return 0;
  }
  if ((unint64_t)(v11 - 3) > 0xFFFFFFFFFFFFFFFDLL)
    v18 = 10;
  else
    v18 = *(_QWORD *)(a2 + 56);
  v19 = *(_QWORD *)(v12 + 24);
  WebCore::convertDictionary<WebCore::AudioNodeOptions>((JSC::JSCell *)v18, (uint64_t)a1, (uint64_t)v57);
  if (v57[7])
    return 0;
  *(_OWORD *)v52 = *(_OWORD *)&v57[1];
  v53 = *(_QWORD *)&v57[5];
  WebCore::MediaStreamAudioDestinationNode::create(v19 - 32, (unsigned int *)v52, (uint64_t)v54);
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    goto LABEL_63;
  if (!v56)
  {
    v21 = *(JSC::VM **)(v5 + 40);
    v22 = *(WTF::StringImpl **)v54;
    *(_QWORD *)v54 = 0;
    v52[0] = v22;
    if (*(uint64_t (***)(WebCore::AudioNode *__hidden))v22 != off_1E336AF20)
    {
      __break(0xC471u);
      JUMPOUT(0x194D2838CLL);
    }
    v10 = (JSCell *)WebCore::createWrapper<WebCore::MediaStreamAudioDestinationNode,WebCore::MediaStreamAudioDestinationNode>(v21, (uint64_t *)v52, v20);
    v23 = v52[0];
    v52[0] = 0;
    if (v23)
      WebCore::AudioNode::deref(v23);
    goto LABEL_29;
  }
  if (v56 == 1)
  {
    v48 = (WTF::StringImpl *)LOBYTE(v54[0]);
    LOBYTE(v52[0]) = v54[0];
    v49 = v55;
    v55 = 0;
    v52[1] = v49;
    if (!*(_QWORD *)(v4 + 16))
    {
      v50.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)LOBYTE(v54[0]), (JSC::JSGlobalObject *)&v52[1]);
      JSC::VM::throwException((JSC::VM *)v4, a1, v50);
      v49 = v52[1];
    }
    v52[1] = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
        WTF::StringImpl::destroy(v49, v48);
      else
        *(_DWORD *)v49 -= 2;
    }
    v10 = 0;
LABEL_29:
    if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    {
LABEL_63:
      v10 = 0;
LABEL_44:
      if (v56 != -1)
        ((void (*)(WTF::StringImpl **, int *))off_1E32B6D60[v56])(v52, v54);
      return (uint64_t)v10;
    }
    v24 = *(JSC::JSCell **)(a2 + 40);
    if (((unint64_t)v24 & 0xFFFE000000000002) != 0
      || (Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v24)) == 0
      || (v27 = Object, Object == *(JSC::JSGlobalObject **)(a2 + 24))
      || (v28 = (JSC::VM *)*((_QWORD *)a1 + 7),
          FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, Object, v26),
          *((_DWORD *)v28 + 20))
      && (JSC::VM::hasExceptionsAfterHandlingTraps(v28) & 1) != 0)
    {
LABEL_43:
      if (!*(_DWORD *)(v4 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) == 0)
        goto LABEL_44;
      goto LABEL_63;
    }
    v32 = *((_QWORD *)FunctionRealm + 412);
    if (v32)
    {
      v33 = *(_DWORD *)(v32 - 8);
      v34 = ((unint64_t)&WebCore::JSMediaStreamAudioDestinationNode::s_info
           + ~((_QWORD)&WebCore::JSMediaStreamAudioDestinationNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaStreamAudioDestinationNode::s_info
                                                                                     + ~((_QWORD)&WebCore::JSMediaStreamAudioDestinationNode::s_info << 32)) >> 22);
      v35 = 9 * ((v34 + ~(v34 << 13)) ^ ((v34 + ~(v34 << 13)) >> 8));
      v36 = (v35 ^ (v35 >> 15)) + ~((v35 ^ (v35 >> 15)) << 27);
      v37 = v33 & ((v36 >> 31) ^ v36);
      v38 = *(char ***)(v32 + 16 * v37);
      if (v38 == &WebCore::JSMediaStreamAudioDestinationNode::s_info)
      {
LABEL_39:
        v29 = *(JSC::JSObject **)(v32 + 16 * v37 + 8);
        if (v29)
        {
LABEL_41:
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v27, v29, v30);
          if (!*((_DWORD *)v28 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v28) & 1) == 0)
            JSC::JSObject::setStructure(v10, v28, SubclassStructure);
          goto LABEL_43;
        }
      }
      else
      {
        v39 = 1;
        while (v38)
        {
          v37 = ((_DWORD)v37 + v39) & v33;
          v38 = *(char ***)(v32 + 16 * v37);
          ++v39;
          if (v38 == &WebCore::JSMediaStreamAudioDestinationNode::s_info)
            goto LABEL_39;
        }
      }
    }
    v40 = (JSC::JSCell *)WebCore::JSAudioNode::prototype(v28, FunctionRealm, v29);
    Structure = WebCore::JSMediaStreamAudioDestinationNodePrototype::createStructure((uint64_t *)v28, (uint64_t)FunctionRealm, v40);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v43 = (JSC::JSCell *)WebCore::JSMediaStreamAudioDestinationNodePrototype::create(v28, FunctionRealm, Structure, v42);
    v44 = WebCore::JSMediaStreamAudioDestinationNode::createStructure((uint64_t *)v28, (uint64_t)FunctionRealm, v43);
    v29 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v44, (uint64_t)&WebCore::JSMediaStreamAudioDestinationNode::s_info);
    goto LABEL_41;
  }
  v51 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::JSMediaStreamAudioDestinationNode::analyzeHeap(v51);
}

uint64_t WebCore::JSMediaStreamAudioDestinationNode::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSAudioNode::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSAudioNode::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSAudioNode::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSMediaStreamAudioDestinationNodePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSMediaStreamAudioDestinationNodePrototype::create(WebCore::JSMediaStreamAudioDestinationNodePrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSMediaStreamAudioDestinationNode::s_info, (uint64_t)&WebCore::JSMediaStreamAudioDestinationNodePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSMediaStreamAudioDestinationNode>,(WebCore::DOMConstructorID)257>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2056);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioNode>,(WebCore::DOMConstructorID)237>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSMediaStreamAudioDestinationNode>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSMediaStreamAudioDestinationNode::s_info
         + ~((_QWORD)&WebCore::JSMediaStreamAudioDestinationNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaStreamAudioDestinationNode::s_info
                                                                                   + ~((_QWORD)&WebCore::JSMediaStreamAudioDestinationNode::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSMediaStreamAudioDestinationNode::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSMediaStreamAudioDestinationNode::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSAudioNode::prototype((WebCore::JSAudioNode *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSMediaStreamAudioDestinationNodePrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSMediaStreamAudioDestinationNodePrototype::create((WebCore::JSMediaStreamAudioDestinationNodePrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSMediaStreamAudioDestinationNode::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSMediaStreamAudioDestinationNode::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2056) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsMediaStreamAudioDestinationNodeConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSMediaStreamAudioDestinationNodePrototype::s_info != (char **)(16
                                                                               * *(unsigned int *)(16
                                                                                                 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                                 + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSMediaStreamAudioDestinationNode>,(WebCore::DOMConstructorID)257>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsMediaStreamAudioDestinationNode_stream(int a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::MediaStream>(a1, *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 160));
}

uint64_t WebCore::JSMediaStreamAudioDestinationNode::subspaceForImpl(WebCore::JSMediaStreamAudioDestinationNode *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 2080);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v21 = *(_QWORD *)(v8 + 2080);
  if (!v21)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v9, &v23, (char *)this + 192, (char *)this + 1872, 32, 8, &v22);
    v11 = v22;
    v22 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v23;
    v23 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v21 = v9;
    v13 = *(_QWORD *)(v8 + 2080);
    *(_QWORD *)(v8 + 2080) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      v15 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6 + 2832, v14 + 1, (unint64_t)&v21);
      v14 = *(unsigned int *)(v6 + 2844);
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = *v15;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
    }
    *(_DWORD *)(v6 + 2844) = v14 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v16 = *(_QWORD *)(v3 + 2080);
  *(_QWORD *)(v3 + 2080) = v4;
  if (v16)
  {
    v17 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v17, v18);
  }
  v19 = __ldxr((unsigned __int8 *)v6);
  if (v19 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::createWrapper<WebCore::MediaStreamAudioDestinationNode,WebCore::MediaStreamAudioDestinationNode>(JSC::VM *a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  WebCore::JSAudioNode *v15;
  JSC::JSCell *v16;
  unint64_t Structure;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 412);
  if (!v6)
    goto LABEL_7;
  v7 = *(_DWORD *)(v6 - 8);
  v8 = ((unint64_t)&WebCore::JSMediaStreamAudioDestinationNode::s_info
      + ~((_QWORD)&WebCore::JSMediaStreamAudioDestinationNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaStreamAudioDestinationNode::s_info
                                                                                + ~((_QWORD)&WebCore::JSMediaStreamAudioDestinationNode::s_info << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = *(char ***)(v6 + 16 * v11);
  if (v12 != &WebCore::JSMediaStreamAudioDestinationNode::s_info)
  {
    v13 = 1;
    while (v12)
    {
      v11 = ((_DWORD)v11 + v13) & v7;
      v12 = *(char ***)(v6 + 16 * v11);
      ++v13;
      if (v12 == &WebCore::JSMediaStreamAudioDestinationNode::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
  if (!v14)
  {
LABEL_7:
    v15 = (WebCore::JSAudioNode *)*((_QWORD *)a1 + 7);
    v16 = (JSC::JSCell *)WebCore::JSAudioNode::prototype(v15, a1, a3);
    Structure = WebCore::JSMediaStreamAudioDestinationNodePrototype::createStructure((uint64_t *)v15, (uint64_t)a1, v16);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v19 = (JSC::JSCell *)WebCore::JSMediaStreamAudioDestinationNodePrototype::create(v15, a1, Structure, v18);
    v20 = WebCore::JSMediaStreamAudioDestinationNode::createStructure((uint64_t *)v15, (uint64_t)a1, v19);
    v14 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSMediaStreamAudioDestinationNode::s_info);
  }
  v21 = WebCore::JSMediaStreamAudioDestinationNode::create(v14, a1, a2);
  WebCore::cacheWrapper<WebCore::AnalyserNode,WebCore::JSAnalyserNode>(*((_QWORD *)a1 + 415), v5, v21);
  return v21;
}

uint64_t WebCore::wrap<WebCore::MediaStreamAudioDestinationNode>(int a1, JSC::VM *a2, WebCore::AudioNode *this)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::JSDOMGlobalObject *v8;
  WebCore::AudioNode *v9;
  uint64_t result;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  WebCore::AudioNode *v17;
  int v18;
  WebCore::AudioNode *v19;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v11 = *(_QWORD *)(v5 + 32);
    if (!v11)
      goto LABEL_5;
    v12 = *(_DWORD *)(v11 - 8);
    v13 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
    v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
    v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
    v16 = v12 & ((v15 >> 31) ^ v15);
    v17 = *(WebCore::AudioNode **)(v11 + 16 * v16);
    if (v17 != this)
    {
      v18 = 1;
      while (v17)
      {
        v16 = ((_DWORD)v16 + v18) & v12;
        v17 = *(WebCore::AudioNode **)(v11 + 16 * v16);
        ++v18;
        if (v17 == this)
          goto LABEL_14;
      }
      goto LABEL_5;
    }
LABEL_14:
    v6 = *(_QWORD *)(v11 + 16 * v16 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *((_QWORD *)this + 1);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    v7 = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return v7;
  }
LABEL_5:
  WebCore::AudioNode::ref(this);
  v19 = this;
  if (*(uint64_t (***)(WebCore::AudioNode *__hidden))this == off_1E336AF20)
  {
    v7 = WebCore::createWrapper<WebCore::MediaStreamAudioDestinationNode,WebCore::MediaStreamAudioDestinationNode>(a2, (uint64_t *)&v19, v8);
    v9 = v19;
    v19 = 0;
    if (v9)
      WebCore::AudioNode::deref(v9);
    return v7;
  }
  result = 257;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSDOMConstructor<WebCore::JSMediaStreamAudioSourceNode>::construct(WebCore::JSDOMGlobalObject *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  JSC::JSGlobalObject *v7;
  uint64_t v8;
  uint64_t v9;
  JSCell *v10;
  uint64_t v11;
  JSC::VM *v12;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;
  uint64_t v18;
  JSC::JSCell *v19;
  uint64_t Object;
  JSC::Structure *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _BOOL4 v27;
  char **v28;
  BOOL v29;
  JSC::VM *v31;
  WebCore::JSDOMGlobalObject *v32;
  JSC::VM *v33;
  JSC::VM *v34;
  JSC::VM *v35;
  WebCore::AudioNode *v36;
  JSC::JSCell *v37;
  JSC::JSGlobalObject *v38;
  JSC::JSObject *v39;
  JSC::JSGlobalObject *v40;
  JSC::VM *v41;
  JSC::JSObject *v42;
  JSC::Structure *v43;
  JSC::VM *FunctionRealm;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char **v51;
  int v52;
  JSC::JSCell *v53;
  unint64_t Structure;
  JSC::Structure *v55;
  JSC::JSCell *v56;
  uint64_t v57;
  unint64_t SubclassStructure;
  bmalloc::api *v59;
  void *v60;
  JSValue v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  JSValue v64;
  uint64_t v65;
  int v66[2];
  WTF::StringImpl *v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  JSC::VM *v72;
  WTF::StringImpl *v73;

  v4 = *((_QWORD *)a1 + 7);
  v71 = v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(a1);
  if (v6 && *(_BYTE *)(v6 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194D29624);
  }
  v9 = v6 - 192;
  if (!v6)
    v9 = 0;
  if ((*(_DWORD *)(*(_QWORD *)(v9 + 680) + 720) & 0x20) == 0)
  {
    JSC::throwTypeError();
    return 2;
  }
  if ((unint64_t)(*(int *)(a2 + 32) - 1) <= 1)
  {
    v61.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, v7);
    return JSC::VM::throwException((JSC::VM *)v4, a1, v61);
  }
  v11 = *(_QWORD *)(a2 + 48);
  v12 = (JSC::VM *)*((_QWORD *)a1 + 7);
  *(_QWORD *)v66 = v12;
  if ((v11 & 0xFFFE000000000002) != 0)
    goto LABEL_19;
  v13 = *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C);
  v14 = *(_DWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) != 0;
  v15 = (char **)(16 * v13);
  if ((_DWORD)v13)
    v16 = v15 == &WebCore::JSAudioContext::s_info;
  else
    v16 = 1;
  if (!v16)
  {
    do
    {
      v15 = (char **)v15[2];
      v14 = v15 != 0;
    }
    while (v15 != &WebCore::JSAudioContext::s_info && v15 != 0);
  }
  if (!v14)
  {
LABEL_19:
    WebCore::throwArgumentTypeError((uint64_t)a1, (uint64_t)v66, 0, "context", 8, "MediaStreamAudioSourceNode", 27, v8, 0, 0, "AudioContext", 13);
    return 0;
  }
  v18 = *(_QWORD *)(v11 + 24);
  v19 = *(JSC::JSCell **)(a2 + 56);
  v72 = v12;
  if (((unint64_t)v19 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
LABEL_28:
    WebCore::throwRequiredMemberTypeError((int)a1, (int)&v72, "mediaStream", 12, "MediaStreamAudioSourceOptions", 30, "MediaStream", 12);
LABEL_29:
    v10 = 0;
    v24 = 1;
    v70 = 1;
LABEL_30:
    ((void (*)(int *, uint64_t *))off_1E32B6DD0[v24])(v66, &v69);
    return (uint64_t)v10;
  }
  if (((unint64_t)v19 & 0xFFFE000000000002) != 0)
    goto LABEL_43;
  Object = JSC::JSCell::getObject(v19);
  if (!Object)
    goto LABEL_43;
  v21 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v23 = JSC::JSObject::get(v21, a1, *(unint64_t *)v66);
  if (*(_QWORD *)v66)
  {
    if (**(_DWORD **)v66 == 2)
      WTF::StringImpl::destroy(*(WTF::StringImpl **)v66, v22);
    else
      **(_DWORD **)v66 -= 2;
  }
  if (*((_DWORD *)v72 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v72) & 1) != 0)
    goto LABEL_29;
  if (v23 == 10)
    goto LABEL_28;
  *(_QWORD *)v66 = *((_QWORD *)a1 + 7);
  if ((v23 & 0xFFFE000000000002) != 0)
    goto LABEL_43;
  v26 = *(unsigned int *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x4C);
  v27 = *(_DWORD *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x4C) != 0;
  v28 = (char **)(16 * v26);
  if ((_DWORD)v26)
    v29 = v28 == &WebCore::JSMediaStream::s_info;
  else
    v29 = 1;
  if (!v29)
  {
    do
    {
      v28 = (char **)v28[2];
      v27 = v28 != 0;
    }
    while (v28 != &WebCore::JSMediaStream::s_info && v28 != 0);
  }
  if (!v27 || (v31 = *(JSC::VM **)(v23 + 24)) == 0)
  {
LABEL_43:
    JSC::throwTypeError();
    goto LABEL_29;
  }
  ++*((_DWORD *)v31 + 22);
  v70 = 0;
  v69 = 0;
  v72 = v31;
  WebCore::MediaStreamAudioSourceNode::create((unsigned int *)(v18 - 32), (char **)&v72, (uint64_t)v66);
  v33 = v72;
  v72 = 0;
  if (v33)
  {
    if (*((_DWORD *)v33 + 22) == 1)
    {
      WebCore::MediaStream::~MediaStream(v33);
      bmalloc::api::isoDeallocate(v59, v60);
    }
    else
    {
      --*((_DWORD *)v33 + 22);
    }
  }
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    goto LABEL_91;
  if (!v68)
  {
    v34 = *(JSC::VM **)(v5 + 40);
    v35 = *(JSC::VM **)v66;
    *(_QWORD *)v66 = 0;
    v72 = v35;
    if (*(uint64_t (***)(WebCore::AudioNode *__hidden))v35 != off_1E336B238)
    {
      __break(0xC471u);
      JUMPOUT(0x194D296F8);
    }
    v10 = (JSCell *)WebCore::createWrapper<WebCore::MediaStreamAudioSourceNode,WebCore::MediaStreamAudioSourceNode>(v34, (uint64_t *)&v72, v32);
    v36 = v72;
    v72 = 0;
    if (v36)
      WebCore::AudioNode::deref(v36);
    goto LABEL_53;
  }
  if (v68 == 1)
  {
    v62 = (WTF::StringImpl *)LOBYTE(v66[0]);
    LOBYTE(v72) = v66[0];
    v63 = v67;
    v67 = 0;
    v73 = v63;
    if (!*(_QWORD *)(v4 + 16))
    {
      v64.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)LOBYTE(v66[0]), (JSC::JSGlobalObject *)&v73);
      JSC::VM::throwException((JSC::VM *)v4, a1, v64);
      v63 = v73;
    }
    v73 = 0;
    if (v63)
    {
      if (*(_DWORD *)v63 == 2)
        WTF::StringImpl::destroy(v63, v62);
      else
        *(_DWORD *)v63 -= 2;
    }
    v10 = 0;
LABEL_53:
    if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
      goto LABEL_91;
    v37 = *(JSC::JSCell **)(a2 + 40);
    if (((unint64_t)v37 & 0xFFFE000000000002) != 0
      || (v38 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v37)) == 0
      || (v40 = v38, v38 == *(JSC::JSGlobalObject **)(a2 + 24))
      || (v41 = (JSC::VM *)*((_QWORD *)a1 + 7),
          FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v38, v39),
          *((_DWORD *)v41 + 20))
      && (JSC::VM::hasExceptionsAfterHandlingTraps(v41) & 1) != 0)
    {
LABEL_67:
      if (!*(_DWORD *)(v4 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) == 0)
      {
LABEL_68:
        if (v68 != -1)
          ((void (*)(JSC::VM **, int *))off_1E32B6DC0[v68])(&v72, v66);
        v24 = 0;
        goto LABEL_30;
      }
LABEL_91:
      v10 = 0;
      goto LABEL_68;
    }
    v45 = *((_QWORD *)FunctionRealm + 412);
    if (v45)
    {
      v46 = *(_DWORD *)(v45 - 8);
      v47 = ((unint64_t)&WebCore::JSMediaStreamAudioSourceNode::s_info
           + ~((_QWORD)&WebCore::JSMediaStreamAudioSourceNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaStreamAudioSourceNode::s_info
                                                                                + ~((_QWORD)&WebCore::JSMediaStreamAudioSourceNode::s_info << 32)) >> 22);
      v48 = 9 * ((v47 + ~(v47 << 13)) ^ ((v47 + ~(v47 << 13)) >> 8));
      v49 = (v48 ^ (v48 >> 15)) + ~((v48 ^ (v48 >> 15)) << 27);
      v50 = v46 & ((v49 >> 31) ^ v49);
      v51 = *(char ***)(v45 + 16 * v50);
      if (v51 == &WebCore::JSMediaStreamAudioSourceNode::s_info)
      {
LABEL_63:
        v42 = *(JSC::JSObject **)(v45 + 16 * v50 + 8);
        if (v42)
        {
LABEL_65:
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v40, v42, v43);
          if (!*((_DWORD *)v41 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v41) & 1) == 0)
            JSC::JSObject::setStructure(v10, v41, SubclassStructure);
          goto LABEL_67;
        }
      }
      else
      {
        v52 = 1;
        while (v51)
        {
          v50 = ((_DWORD)v50 + v52) & v46;
          v51 = *(char ***)(v45 + 16 * v50);
          ++v52;
          if (v51 == &WebCore::JSMediaStreamAudioSourceNode::s_info)
            goto LABEL_63;
        }
      }
    }
    v53 = (JSC::JSCell *)WebCore::JSAudioNode::prototype(v41, FunctionRealm, v42);
    Structure = WebCore::JSMediaStreamAudioSourceNodePrototype::createStructure((uint64_t *)v41, (uint64_t)FunctionRealm, v53);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v56 = (JSC::JSCell *)WebCore::JSMediaStreamAudioSourceNodePrototype::create(v41, FunctionRealm, Structure, v55);
    v57 = WebCore::JSMediaStreamAudioSourceNode::createStructure((uint64_t *)v41, (uint64_t)FunctionRealm, v56);
    v42 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v57, (uint64_t)&WebCore::JSMediaStreamAudioSourceNode::s_info);
    goto LABEL_65;
  }
  v65 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::JSMediaStreamAudioSourceNode::analyzeHeap(v65);
}

uint64_t WebCore::JSMediaStreamAudioSourceNode::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSAudioNode::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSAudioNode::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSAudioNode::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSMediaStreamAudioSourceNodePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSMediaStreamAudioSourceNodePrototype::create(WebCore::JSMediaStreamAudioSourceNodePrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSMediaStreamAudioSourceNode::s_info, (uint64_t)&WebCore::JSMediaStreamAudioSourceNodePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSMediaStreamAudioSourceNode>,(WebCore::DOMConstructorID)258>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2064);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioNode>,(WebCore::DOMConstructorID)237>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSMediaStreamAudioSourceNode>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000002, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSMediaStreamAudioSourceNode::s_info
         + ~((_QWORD)&WebCore::JSMediaStreamAudioSourceNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaStreamAudioSourceNode::s_info
                                                                              + ~((_QWORD)&WebCore::JSMediaStreamAudioSourceNode::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSMediaStreamAudioSourceNode::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSMediaStreamAudioSourceNode::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSAudioNode::prototype((WebCore::JSAudioNode *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSMediaStreamAudioSourceNodePrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSMediaStreamAudioSourceNodePrototype::create((WebCore::JSMediaStreamAudioSourceNodePrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSMediaStreamAudioSourceNode::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSMediaStreamAudioSourceNode::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2064) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsMediaStreamAudioSourceNodeConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSMediaStreamAudioSourceNodePrototype::s_info != (char **)(16
                                                                          * *(unsigned int *)(16
                                                                                            * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                            + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSMediaStreamAudioSourceNode>,(WebCore::DOMConstructorID)258>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsMediaStreamAudioSourceNode_mediaStream(int a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::MediaStream>(a1, *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 168));
}

uint64_t WebCore::JSMediaStreamAudioSourceNode::subspaceForImpl(WebCore::JSMediaStreamAudioSourceNode *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 2088);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v21 = *(_QWORD *)(v8 + 2088);
  if (!v21)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v9, &v23, (char *)this + 192, (char *)this + 1872, 32, 8, &v22);
    v11 = v22;
    v22 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v23;
    v23 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v21 = v9;
    v13 = *(_QWORD *)(v8 + 2088);
    *(_QWORD *)(v8 + 2088) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      v15 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6 + 2832, v14 + 1, (unint64_t)&v21);
      v14 = *(unsigned int *)(v6 + 2844);
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = *v15;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
    }
    *(_DWORD *)(v6 + 2844) = v14 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v16 = *(_QWORD *)(v3 + 2088);
  *(_QWORD *)(v3 + 2088) = v4;
  if (v16)
  {
    v17 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v17, v18);
  }
  v19 = __ldxr((unsigned __int8 *)v6);
  if (v19 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::createWrapper<WebCore::MediaStreamAudioSourceNode,WebCore::MediaStreamAudioSourceNode>(JSC::VM *a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  WebCore::JSAudioNode *v15;
  JSC::JSCell *v16;
  unint64_t Structure;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 412);
  if (!v6)
    goto LABEL_7;
  v7 = *(_DWORD *)(v6 - 8);
  v8 = ((unint64_t)&WebCore::JSMediaStreamAudioSourceNode::s_info
      + ~((_QWORD)&WebCore::JSMediaStreamAudioSourceNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaStreamAudioSourceNode::s_info
                                                                           + ~((_QWORD)&WebCore::JSMediaStreamAudioSourceNode::s_info << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = *(char ***)(v6 + 16 * v11);
  if (v12 != &WebCore::JSMediaStreamAudioSourceNode::s_info)
  {
    v13 = 1;
    while (v12)
    {
      v11 = ((_DWORD)v11 + v13) & v7;
      v12 = *(char ***)(v6 + 16 * v11);
      ++v13;
      if (v12 == &WebCore::JSMediaStreamAudioSourceNode::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
  if (!v14)
  {
LABEL_7:
    v15 = (WebCore::JSAudioNode *)*((_QWORD *)a1 + 7);
    v16 = (JSC::JSCell *)WebCore::JSAudioNode::prototype(v15, a1, a3);
    Structure = WebCore::JSMediaStreamAudioSourceNodePrototype::createStructure((uint64_t *)v15, (uint64_t)a1, v16);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v19 = (JSC::JSCell *)WebCore::JSMediaStreamAudioSourceNodePrototype::create(v15, a1, Structure, v18);
    v20 = WebCore::JSMediaStreamAudioSourceNode::createStructure((uint64_t *)v15, (uint64_t)a1, v19);
    v14 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSMediaStreamAudioSourceNode::s_info);
  }
  v21 = WebCore::JSMediaStreamAudioSourceNode::create(v14, a1, a2);
  WebCore::cacheWrapper<WebCore::AnalyserNode,WebCore::JSAnalyserNode>(*((_QWORD *)a1 + 415), v5, v21);
  return v21;
}

uint64_t WebCore::wrap<WebCore::MediaStreamAudioSourceNode>(int a1, JSC::VM *a2, WebCore::AudioNode *this)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::JSDOMGlobalObject *v8;
  WebCore::AudioNode *v9;
  uint64_t result;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  WebCore::AudioNode *v17;
  int v18;
  WebCore::AudioNode *v19;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v11 = *(_QWORD *)(v5 + 32);
    if (!v11)
      goto LABEL_5;
    v12 = *(_DWORD *)(v11 - 8);
    v13 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
    v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
    v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
    v16 = v12 & ((v15 >> 31) ^ v15);
    v17 = *(WebCore::AudioNode **)(v11 + 16 * v16);
    if (v17 != this)
    {
      v18 = 1;
      while (v17)
      {
        v16 = ((_DWORD)v16 + v18) & v12;
        v17 = *(WebCore::AudioNode **)(v11 + 16 * v16);
        ++v18;
        if (v17 == this)
          goto LABEL_14;
      }
      goto LABEL_5;
    }
LABEL_14:
    v6 = *(_QWORD *)(v11 + 16 * v16 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *((_QWORD *)this + 1);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    v7 = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return v7;
  }
LABEL_5:
  WebCore::AudioNode::ref(this);
  v19 = this;
  if (*(uint64_t (***)(WebCore::AudioNode *__hidden))this == off_1E336B238)
  {
    v7 = WebCore::createWrapper<WebCore::MediaStreamAudioSourceNode,WebCore::MediaStreamAudioSourceNode>(a2, (uint64_t *)&v19, v8);
    v9 = v19;
    v19 = 0;
    if (v9)
      WebCore::AudioNode::deref(v9);
    return v7;
  }
  result = 257;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSMediaStreamTrack::prototype(WebCore::JSMediaStreamTrack *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  JSC::JSCell *v14;
  unint64_t Structure;
  JSC::Structure *v16;
  JSC::JSCell *v17;
  uint64_t v18;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSMediaStreamTrack::s_info + ~((_QWORD)&WebCore::JSMediaStreamTrack::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaStreamTrack::s_info + ~((_QWORD)&WebCore::JSMediaStreamTrack::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSMediaStreamTrack::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSMediaStreamTrack::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    v14 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(this, a2, a3);
    Structure = WebCore::JSMediaStreamTrackPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v14);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v17 = (JSC::JSCell *)WebCore::JSMediaStreamTrackPrototype::create(this, a2, Structure, v16);
    v18 = WebCore::JSMediaStreamTrack::createStructure((uint64_t *)this, (uint64_t)a2, v17);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v18, (uint64_t)&WebCore::JSMediaStreamTrack::s_info);
  }
  return *(_QWORD *)(v13 + 48);
}

uint64_t WebCore::JSMediaStreamTrack::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24) - 32);
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSMediaStreamTrackPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSMediaStreamTrackPrototype::create(WebCore::JSMediaStreamTrackPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<18u>(this, (uint64_t)&WebCore::JSMediaStreamTrack::s_info, (uint64_t)&WebCore::JSMediaStreamTrackPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaStreamTrack>,(WebCore::DOMConstructorID)140>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1120);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v22) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v20);
    v5[2] = SlowCase + (int)v20;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v22, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaStreamTrack>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v21 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v21);
    v10[2848] = v2 + (int)v21;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v22);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v22);
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v22);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v18 = WebCore::JSMediaStreamTrack::prototype((WebCore::JSMediaStreamTrack *)a1, (JSC::VM *)a2, v17);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v18, 14, (uint64_t)&v22);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1120) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsMediaStreamTrackConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSMediaStreamTrackPrototype::s_info != (char **)(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                  + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaStreamTrack>,(WebCore::DOMConstructorID)140>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsMediaStreamTrack_kind(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v13;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(WTF::StringImpl **)(v2 + 1184);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 56);
  }
  else
  {
    v10 = v2;
    WTF::AtomStringImpl::add();
    v3 = v13;
    v11 = *(WTF::StringImpl **)(v10 + 1184);
    *(_QWORD *)(v10 + 1184) = v13;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
      {
        WTF::StringImpl::destroy(v11, v13);
        v3 = *(WTF::StringImpl **)(v10 + 1184);
      }
      else
      {
        *(_DWORD *)v11 -= 2;
      }
    }
    v4 = *(_QWORD *)(a1 + 56);
    if (!v3)
      return *(_QWORD *)(v4 + 41968);
  }
  v5 = *((_DWORD *)v3 + 1);
  if (!v5)
    return *(_QWORD *)(v4 + 41968);
  if (v5 != 1)
    goto LABEL_6;
  v8 = (unsigned __int8 *)*((_QWORD *)v3 + 1);
  if ((*((_BYTE *)v3 + 16) & 4) != 0)
  {
    v9 = *v8;
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
  v9 = *(unsigned __int16 *)v8;
  if (v9 <= 0xFF)
  {
    v9 = v9;
    return *(_QWORD *)(v4 + 8 * v9 + 42216);
  }
LABEL_6:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(WTF::StringImpl **)(v6 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v6;
}

uint64_t WebCore::jsMediaStreamTrack_id(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 64) + 48);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsMediaStreamTrack_label(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 64) + 56);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsMediaStreamTrack_enabled(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 64) + 73))
    return 7;
  else
    return 6;
}

uint64_t WebCore::setJSMediaStreamTrack_enabled(uint64_t a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  double v10;
  _BOOL4 v11;
  uint64_t v12;
  BOOL v14;
  int v15;
  uint64_t v16;
  int *v17;
  int v18;

  v4 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSMediaStreamTrack::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSMediaStreamTrack::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  if (a3 >= 0xFFFE000000000000)
  {
    v14 = (_DWORD)a3 == 0;
    goto LABEL_37;
  }
  *(_QWORD *)&v10 = a3 - 0x2000000000000;
  if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((a3 & 0xFFFE000000000002) != 0)
    {
      v11 = a3 == 7;
      goto LABEL_16;
    }
    v15 = *(unsigned __int8 *)(a3 + 5);
    if (v15 == 3)
    {
      v18 = *(_DWORD *)(a3 + 8);
    }
    else
    {
      if (v15 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v11 = 1;
          goto LABEL_16;
        }
        v14 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) == a1;
        goto LABEL_37;
      }
      v16 = *(_QWORD *)(a3 + 8);
      if ((v16 & 1) != 0)
        v17 = (int *)(a3 + 16);
      else
        v17 = (int *)(v16 + 4);
      v18 = *v17;
    }
    v14 = v18 == 0;
LABEL_37:
    v11 = !v14;
    goto LABEL_16;
  }
  v11 = v10 > 0.0 || v10 < 0.0;
LABEL_16:
  v12 = *(_QWORD *)(a2 + 24);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  WebCore::MediaStreamTrackPrivate::setEnabled(*(_QWORD *)(v12 + 64), v11);
  return 1;
}

uint64_t WebCore::jsMediaStreamTrack_contentHint(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned int v10;

  v3 = WebCore::MediaStreamTrack::contentHint((WebCore::MediaStreamTrack *)(*((_QWORD *)a2 + 3) - 32), a2);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *v3;
  if (!*v3)
    return *(_QWORD *)(v4 + 41968);
  v6 = *((_DWORD *)v5 + 1);
  if (!v6)
    return *(_QWORD *)(v4 + 41968);
  if (v6 == 1)
  {
    v9 = (unsigned __int8 *)*((_QWORD *)v5 + 1);
    if ((*((_BYTE *)v5 + 16) & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v10 = *(unsigned __int16 *)v9;
      if (v10 > 0xFF)
        goto LABEL_4;
      v10 = v10;
    }
    return *(_QWORD *)(v4 + 8 * v10 + 42216);
  }
LABEL_4:
  v7 = *(_QWORD *)(v4 + 64760);
  if (!v7 || v5 != *(WTF::StringImpl **)(v7 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v7;
}

BOOL WebCore::setJSMediaStreamTrack_contentHint(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  JSC::VM *v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v17;
  uint64_t v18;
  int v19;
  WTF::StringImpl *v20;
  unint64_t v21;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSMediaStreamTrack::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSMediaStreamTrack::s_info && v6 != 0);
  }
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v9 = *(_QWORD *)(a2 + 24);
  v21 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v10 = *(WTF::StringImpl **)(this + 8);
    if ((v10 & 1) != 0)
    {
      v10 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
      if (!v10)
        goto LABEL_17;
    }
    else if (!v10)
    {
LABEL_17:
      v20 = v10;
      goto LABEL_18;
    }
    *(_DWORD *)v10 += 2;
    goto LABEL_17;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v21, a1);
LABEL_18:
  if (*((_DWORD *)v3 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v3);
    v11 = v20;
    if (hasExceptionsAfterHandlingTraps)
    {
      v19 = 1;
      v20 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v17);
        else
          *(_DWORD *)v11 -= 2;
      }
      v14 = 0;
      v13 = 1;
      goto LABEL_24;
    }
  }
  else
  {
    v11 = v20;
  }
  v19 = 0;
  v18 = 0;
  v21 = (unint64_t)v11;
  WebCore::MediaStreamTrack::setContentHint((WebCore::MediaStreamTrack *)(v9 - 32), (const WTF::String *)&v21);
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v12);
    else
      *(_DWORD *)v11 -= 2;
  }
  v13 = 0;
  v14 = 1;
LABEL_24:
  ((void (*)(unint64_t *, uint64_t *))off_1E32B54C8[v13])(&v21, &v18);
  return v14;
}

uint64_t WebCore::jsMediaStreamTrack_muted(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 1172))
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsMediaStreamTrack_onmute(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1272), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v5 - 4) + 16))((uint64_t)v5 - 32);
  else
    --*((_DWORD *)v5 - 2);
  return v9;
}

BOOL WebCore::setJSMediaStreamTrack_onmute(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSMediaStreamTrack::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSMediaStreamTrack::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1272), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        (*(void (**)(uint64_t))(*((_QWORD *)v11 - 4) + 16))((uint64_t)v11 - 32);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsMediaStreamTrack_onunmute(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 2176), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v5 - 4) + 16))((uint64_t)v5 - 32);
  else
    --*((_DWORD *)v5 - 2);
  return v9;
}

BOOL WebCore::setJSMediaStreamTrack_onunmute(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSMediaStreamTrack::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSMediaStreamTrack::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 2176), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        (*(void (**)(uint64_t))(*((_QWORD *)v11 - 4) + 16))((uint64_t)v11 - 32);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsMediaStreamTrack_onconfigurationchange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 456), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v5 - 4) + 16))((uint64_t)v5 - 32);
  else
    --*((_DWORD *)v5 - 2);
  return v9;
}

BOOL WebCore::setJSMediaStreamTrack_onconfigurationchange(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSMediaStreamTrack::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSMediaStreamTrack::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 456), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        (*(void (**)(uint64_t))(*((_QWORD *)v11 - 4) + 16))((uint64_t)v11 - 32);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsMediaStreamTrack_readyState(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(int *)(*((_QWORD *)a2 + 3) + 1168);
  if ((byte_1EE335F30 & 1) == 0)
  {
    qword_1EE336058 = (uint64_t)&dword_1ECE78FD0;
    dword_1ECE78FD0 += 2;
    dword_1ECE78FF0 += 2;
    qword_1EE336060 = (uint64_t)&dword_1ECE78FF0;
    byte_1EE335F30 = 1;
  }
  v5 = *(_QWORD *)&_MergedGlobals_685[8 * v4 + 304];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

uint64_t WebCore::jsMediaStreamTrack_onended(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 752), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v5 - 4) + 16))((uint64_t)v5 - 32);
  else
    --*((_DWORD *)v5 - 2);
  return v9;
}

BOOL WebCore::setJSMediaStreamTrack_onended(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSMediaStreamTrack::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSMediaStreamTrack::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 752), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        (*(void (**)(uint64_t))(*((_QWORD *)v11 - 4) + 16))((uint64_t)v11 - 32);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::JSMediaStreamTrack::subspaceForImpl(WebCore::JSMediaStreamTrack *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 1144);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v21 = *(_QWORD *)(v8 + 1144);
  if (!v21)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v9, &v23, (char *)this + 192, (char *)this + 1872, 32, 8, &v22);
    v11 = v22;
    v22 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v23;
    v23 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v21 = v9;
    v13 = *(_QWORD *)(v8 + 1144);
    *(_QWORD *)(v8 + 1144) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      v15 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6 + 2832, v14 + 1, (unint64_t)&v21);
      v14 = *(unsigned int *)(v6 + 2844);
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = *v15;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
    }
    *(_DWORD *)(v6 + 2844) = v14 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v16 = *(_QWORD *)(v3 + 1144);
  *(_QWORD *)(v3 + 1144) = v4;
  if (v16)
  {
    v17 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v17, v18);
  }
  v19 = __ldxr((unsigned __int8 *)v6);
  if (v19 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSMediaStreamTrackOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v6 = *(_QWORD *)(v5 - 24);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (*(_QWORD *)(v5 - 16)
    || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 - 32) + 64))(v5 - 32), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

uint64_t WebCore::JSMediaStreamTrackOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v27;
  uint64_t v28;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  result = v3 - 32;
  v5 = *(_DWORD *)(v3 - 8);
  *(_DWORD *)(v3 - 8) = v5 + 1;
  if (*(_DWORD *)(a3 + 48))
  {
    v9 = *(_QWORD *)(a3 + 32);
    v7 = (uint64_t *)(a3 + 32);
    v8 = v9;
    if (v9)
    {
      v10 = *(_DWORD *)(v8 - 8);
      v11 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
      v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
      v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
      v14 = v10 & ((v13 >> 31) ^ v13);
      v15 = *(_QWORD *)(v8 + 16 * v14);
      if (v15 != result)
      {
        v16 = 1;
        while (v15)
        {
          v14 = ((_DWORD)v14 + v16) & v10;
          v15 = *(_QWORD *)(v8 + 16 * v14);
          ++v16;
          if (v15 == result)
            goto LABEL_12;
        }
        v14 = *(unsigned int *)(v8 - 4);
      }
LABEL_12:
      if (v14 != *(_DWORD *)(v8 - 4))
      {
        v17 = (_QWORD *)(v8 + 16 * v14);
        *v17 = -1;
        v20 = v17[1];
        v19 = v17 + 1;
        v18 = v20;
        if (v20)
        {
          *(_QWORD *)(v18 + 8) = 3;
          *v19 = 0;
        }
        ++*(_DWORD *)(*v7 - 16);
        v21 = *v7;
        if (*v7)
          v22 = *(_DWORD *)(v21 - 12) - 1;
        else
          v22 = -1;
        *(_DWORD *)(v21 - 12) = v22;
        v23 = *v7;
        if (*v7)
        {
          v24 = 6 * *(_DWORD *)(v23 - 12);
          v25 = *(_DWORD *)(v23 - 4);
          if (v24 < v25 && v25 >= 9)
          {
            v27 = v3;
            v28 = v3 - 32;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v7, v25 >> 1, 0);
            v3 = v27;
            result = v28;
          }
        }
      }
    }
    v5 = *(_DWORD *)(v3 - 8) - 1;
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 8);
    if (v6)
    {
      *(_QWORD *)(v6 + 8) = 3;
      *(_QWORD *)(v3 + 8) = 0;
    }
  }
  if (!v5)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  *(_DWORD *)(v3 - 8) = v5;
  return result;
}

uint64_t WebCore::JSMediaStreamTrack::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSMediaStreamTrack::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSMediaStreamTrack::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24) - 32;
  else
    return 0;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSMediaStreamTrackEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  int v6;
  JSC::JSCell *v7;
  unint64_t v8;
  uint64_t Object;
  uint64_t v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  JSC::VM *v13;
  double v14;
  _BOOL4 v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  JSC::VM *v18;
  double v19;
  _BOOL4 v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  _BOOL4 v23;
  JSC::VM *v24;
  double v25;
  WTF::StringImpl *v26;
  JSCell *v27;
  uint64_t v28;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  char *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WebCore::JSDOMGlobalObject *v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  int v44;
  JSC::VM *v45;
  uint64_t v46;
  unsigned int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char **v52;
  int v53;
  unint64_t v54;
  WebCore::JSEvent *v55;
  JSC::JSCell *v56;
  unint64_t Structure;
  JSC::Structure *v58;
  JSC::JSCell *v59;
  uint64_t v60;
  JSC::JSCell *v61;
  JSC::JSGlobalObject *v62;
  JSC::JSObject *v63;
  JSC::JSGlobalObject *v64;
  JSC::VM *v65;
  WebCore::JSDOMGlobalObject *v66;
  JSC::Structure *v67;
  JSC::VM *FunctionRealm;
  uint64_t v69;
  unsigned int v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char **v75;
  int v76;
  JSC::JSCell *v77;
  unint64_t v78;
  JSC::Structure *v79;
  JSC::JSCell *v80;
  uint64_t v81;
  unint64_t SubclassStructure;
  JSC::VM *v83;
  JSValue v84;
  BOOL v85;
  int v86;
  uint64_t v87;
  int *v88;
  int v89;
  BOOL v90;
  int v91;
  uint64_t v92;
  int *v93;
  int v94;
  BOOL v95;
  int v96;
  uint64_t v97;
  int *v98;
  int v99;
  JSC::VM *v100;
  _BOOL4 v101;
  _BOOL4 v102;
  uint64_t v103;
  WTF::StringImpl *v104[2];
  int v105;
  WTF::StringImpl *v106;
  int v107;
  JSC::VM *v108;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((unint64_t)(*(int *)(a2 + 32) - 1) <= 1)
  {
    v84.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, a1, v84);
  }
  v5 = *(_QWORD *)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v106);
  v6 = v107;
  if (!v107)
  {
    v103 = v5;
    v7 = *(JSC::JSCell **)(a2 + 56);
    v108 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (((unint64_t)v7 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
LABEL_44:
      WebCore::throwRequiredMemberTypeError((int)a1, (int)&v108, "track", 6, "MediaStreamTrackEventInit", 26, "MediaStreamTrack", 17);
      goto LABEL_45;
    }
    v8 = 0xFFFE000000000002;
    if (((unint64_t)v7 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v7)) == 0)
    {
LABEL_59:
      JSC::throwTypeError();
      goto LABEL_45;
    }
    v10 = Object;
    WTF::AtomStringImpl::addLiteral();
    v12 = JSC::JSObject::get((JSC::Structure *)v10, a1, (unint64_t)v104[0]);
    if (v104[0])
    {
      if (*(_DWORD *)v104[0] == 2)
        WTF::StringImpl::destroy(v104[0], v11);
      else
        *(_DWORD *)v104[0] -= 2;
    }
    if (*((_DWORD *)v108 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v108) & 1) != 0)
    {
LABEL_45:
      v27 = 0;
      v28 = 1;
      v105 = 1;
LABEL_46:
      ((void (*)(JSC::VM **, WTF::StringImpl **))off_1E32B7110[v28])(&v108, v104);
      v6 = v107;
      goto LABEL_47;
    }
    if (v12 != 10)
    {
      v13 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v12 >= 0xFFFE000000000000)
        goto LABEL_135;
      *(_QWORD *)&v14 = v12 - 0x2000000000000;
      if (v12 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v15 = v14 > 0.0 || v14 < 0.0;
        goto LABEL_16;
      }
      if ((v12 & 0xFFFE000000000002) != 0)
      {
        v15 = v12 == 7;
        goto LABEL_16;
      }
      v86 = *(unsigned __int8 *)(v12 + 5);
      if (v86 == 3)
      {
        v89 = *(_DWORD *)(v12 + 8);
      }
      else
      {
        if (v86 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0xA) & 1) != 0)
          {
            v85 = *(_QWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
            goto LABEL_179;
          }
          v15 = 1;
          goto LABEL_16;
        }
        v87 = *(_QWORD *)(v12 + 8);
        if ((v87 & 1) != 0)
          v88 = (int *)(v12 + 16);
        else
          v88 = (int *)(v87 + 4);
        v89 = *v88;
      }
      v85 = v89 == 0;
      goto LABEL_179;
    }
    v102 = 0;
    while (1)
    {
      WTF::AtomStringImpl::addLiteral();
      v17 = JSC::JSObject::get((JSC::Structure *)v10, a1, (unint64_t)v104[0]);
      if (v104[0])
      {
        if (*(_DWORD *)v104[0] == 2)
          WTF::StringImpl::destroy(v104[0], v16);
        else
          *(_DWORD *)v104[0] -= 2;
      }
      if (*((_DWORD *)v108 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v108) & 1) != 0)
        goto LABEL_45;
      if (v17 == 10)
      {
        v101 = 0;
        goto LABEL_28;
      }
      v18 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v17 >= 0xFFFE000000000000)
        break;
      *(_QWORD *)&v19 = v17 - 0x2000000000000;
      if (v17 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        if ((v17 & v8) != 0)
        {
          v20 = v17 == 7;
          goto LABEL_27;
        }
        v91 = *(unsigned __int8 *)(v17 + 5);
        if (v91 == 3)
        {
          v94 = *(_DWORD *)(v17 + 8);
          goto LABEL_168;
        }
        if (v91 == 2)
        {
          v92 = *(_QWORD *)(v17 + 8);
          if ((v92 & 1) != 0)
            v93 = (int *)(v17 + 16);
          else
            v93 = (int *)(v92 + 4);
          v94 = *v93;
LABEL_168:
          v90 = v94 == 0;
        }
        else
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
LABEL_170:
            v20 = 1;
            goto LABEL_27;
          }
          v90 = *(_QWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
        }
LABEL_183:
        v20 = !v90;
        goto LABEL_27;
      }
      if (v19 > 0.0)
        goto LABEL_170;
      v20 = v19 < 0.0;
LABEL_27:
      v101 = v20;
      if (*((_DWORD *)v18 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v18) & 1) != 0)
        goto LABEL_45;
LABEL_28:
      WTF::AtomStringImpl::addLiteral();
      v22 = JSC::JSObject::get((JSC::Structure *)v10, a1, (unint64_t)v104[0]);
      if (v104[0])
      {
        if (*(_DWORD *)v104[0] == 2)
          WTF::StringImpl::destroy(v104[0], v21);
        else
          *(_DWORD *)v104[0] -= 2;
      }
      if (*((_DWORD *)v108 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v108) & 1) != 0)
        goto LABEL_45;
      if (v22 == 10)
      {
        v23 = 0;
        goto LABEL_39;
      }
      v24 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v22 >= 0xFFFE000000000000)
      {
        v95 = (_DWORD)v22 == 0;
        goto LABEL_173;
      }
      *(_QWORD *)&v25 = v22 - 0x2000000000000;
      if (v22 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        if ((v22 & v8) != 0)
        {
          v23 = v22 == 7;
          goto LABEL_38;
        }
        v96 = *(unsigned __int8 *)(v22 + 5);
        if (v96 == 3)
        {
          v99 = *(_DWORD *)(v22 + 8);
        }
        else
        {
          if (v96 != 2)
          {
            if ((*(_BYTE *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0xA) & 1) == 0)
            {
LABEL_177:
              v23 = 1;
              goto LABEL_38;
            }
            v95 = *(_QWORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
            goto LABEL_173;
          }
          v97 = *(_QWORD *)(v22 + 8);
          if ((v97 & 1) != 0)
            v98 = (int *)(v22 + 16);
          else
            v98 = (int *)(v97 + 4);
          v99 = *v98;
        }
        v95 = v99 == 0;
LABEL_173:
        v23 = !v95;
        goto LABEL_38;
      }
      if (v25 > 0.0)
        goto LABEL_177;
      v23 = v25 < 0.0;
LABEL_38:
      if (*((_DWORD *)v24 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v24) & 1) != 0)
        goto LABEL_45;
LABEL_39:
      WTF::AtomStringImpl::addLiteral();
      LODWORD(v12) = v104[0];
      v10 = JSC::JSObject::get((JSC::Structure *)v10, a1, (unint64_t)v104[0]);
      if (v104[0])
      {
        if (*(_DWORD *)v104[0] == 2)
          WTF::StringImpl::destroy(v104[0], v26);
        else
          *(_DWORD *)v104[0] -= 2;
      }
      if (*((_DWORD *)v108 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v108) & 1) != 0)
        goto LABEL_45;
      if (v10 == 10)
        goto LABEL_44;
      v104[0] = *((WTF::StringImpl **)a1 + 7);
      if ((v10 & v8) != 0)
        goto LABEL_59;
      v30 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
      v31 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
      if ((_DWORD)v30)
      {
        v32 = 16 * v30;
        if ((char **)v32 != &WebCore::JSMediaStreamTrack::s_info)
        {
          do
          {
            v32 = *(_QWORD *)(v32 + 16);
            v31 = v32 != 0;
          }
          while ((char **)v32 != &WebCore::JSMediaStreamTrack::s_info && v32 != 0);
        }
      }
      if (!v31)
        goto LABEL_59;
      v100 = v3;
      v3 = *(JSC::VM **)(v10 + 24);
      ++*((_DWORD *)v3 - 2);
      v8 = v102;
      LOBYTE(v104[0]) = v102;
      BYTE1(v104[0]) = v101;
      BYTE2(v104[0]) = v23;
      v105 = 0;
      if (!v107)
      {
        v34 = (char *)v3 - 32;
        v35 = v106;
        v106 = 0;
        v104[1] = 0;
        v36 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v36);
        *(_QWORD *)(v36 + 8) = 0;
        if (v101)
          v40 = 4;
        else
          v40 = 0;
        if (v23)
          v41 = 8;
        else
          v41 = 0;
        if (v102)
          v42 = 655362;
        else
          v42 = 655360;
        v43 = v42 | v40 | v41 | (v35 != 0) | *(_DWORD *)(v36 + 20) & 0xFFC00000;
        *(_DWORD *)(v36 + 16) = 1;
        *(_DWORD *)(v36 + 20) = v43;
        if (v35)
        {
          *(_DWORD *)v35 += 2;
          v43 = *(_DWORD *)(v36 + 20);
        }
        *(_QWORD *)(v36 + 24) = v35;
        *(_QWORD *)(v36 + 32) = 0;
        *(_QWORD *)(v36 + 40) = 0;
        *(_QWORD *)(v36 + 48) = 0;
        *(_QWORD *)(v36 + 56) = v39;
        *(_QWORD *)(v36 + 64) = 0;
        *(_DWORD *)(v36 + 20) = v43 | 0x4000;
        *(_QWORD *)v36 = off_1E335FE08;
        v44 = *((_DWORD *)v3 - 2);
        *((_DWORD *)v3 - 2) = v44 + 1;
        *(_QWORD *)(v36 + 72) = v34;
        v108 = (JSC::VM *)v36;
        if (v44)
          *((_DWORD *)v3 - 2) = v44;
        else
          (*(void (**)(uint64_t))(*(_QWORD *)v34 + 16))((uint64_t)v3 - 32);
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
            WTF::StringImpl::destroy(v35, v37);
          else
            *(_DWORD *)v35 -= 2;
        }
        if (*(void (***)(WebCore::MediaStreamTrackEvent *__hidden))v36 != off_1E335FE08)
        {
          __break(0xC471u);
          JUMPOUT(0x194D2CAA8);
        }
        v45 = *(JSC::VM **)(v103 + 40);
        v46 = *((_QWORD *)v45 + 412);
        if (!v46)
          goto LABEL_84;
        v47 = *(_DWORD *)(v46 - 8);
        v48 = ((unint64_t)&WebCore::JSMediaStreamTrackEvent::s_info
             + ~((_QWORD)&WebCore::JSMediaStreamTrackEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaStreamTrackEvent::s_info
                                                                             + ~((_QWORD)&WebCore::JSMediaStreamTrackEvent::s_info << 32)) >> 22);
        v49 = 9 * ((v48 + ~(v48 << 13)) ^ ((v48 + ~(v48 << 13)) >> 8));
        v50 = (v49 ^ (v49 >> 15)) + ~((v49 ^ (v49 >> 15)) << 27);
        v51 = v47 & ((v50 >> 31) ^ v50);
        v52 = *(char ***)(v46 + 16 * v51);
        if (v52 == &WebCore::JSMediaStreamTrackEvent::s_info)
        {
LABEL_83:
          v54 = *(_QWORD *)(v46 + 16 * v51 + 8);
          if (!v54)
            goto LABEL_84;
        }
        else
        {
          v53 = 1;
          while (v52)
          {
            v51 = ((_DWORD)v51 + v53) & v47;
            v52 = *(char ***)(v46 + 16 * v51);
            ++v53;
            if (v52 == &WebCore::JSMediaStreamTrackEvent::s_info)
              goto LABEL_83;
          }
LABEL_84:
          v55 = (WebCore::JSEvent *)*((_QWORD *)v45 + 7);
          v56 = (JSC::JSCell *)WebCore::JSEvent::prototype(v55, *(JSC::VM **)(v103 + 40), v38);
          Structure = WebCore::JSMediaStreamTrackEventPrototype::createStructure((uint64_t *)v55, (uint64_t)v45, v56);
          *(_DWORD *)(Structure + 16) |= 0x80000u;
          v59 = (JSC::JSCell *)WebCore::JSMediaStreamTrackEventPrototype::create(v55, v45, Structure, v58);
          v60 = WebCore::JSMediaStreamTrackEvent::createStructure((uint64_t *)v55, (uint64_t)v45, v59);
          v54 = WebCore::cacheDOMStructure((JSCell *)v45, v60, (uint64_t)&WebCore::JSMediaStreamTrackEvent::s_info);
        }
        v27 = (JSCell *)WebCore::JSMediaStreamTrackEvent::create(v54, v45, (uint64_t *)&v108);
        WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)v45 + 415), v36, (uint64_t)v27);
        v61 = *(JSC::JSCell **)(a2 + 40);
        if (((unint64_t)v61 & 0xFFFE000000000002) != 0
          || (v62 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v61)) == 0
          || (v64 = v62, v62 == *(JSC::JSGlobalObject **)(a2 + 24))
          || (v65 = (JSC::VM *)*((_QWORD *)a1 + 7),
              FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v62, v63),
              *((_DWORD *)v65 + 20))
          && (JSC::VM::hasExceptionsAfterHandlingTraps(v65) & 1) != 0)
        {
LABEL_98:
          if (*((_DWORD *)v100 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v100) & 1) != 0)
            v27 = 0;
          v83 = v108;
          v108 = 0;
          if (v83)
          {
            if (*((_DWORD *)v83 + 4) == 1)
              (*(void (**)(JSC::VM *))(*(_QWORD *)v83 + 8))(v83);
            else
              --*((_DWORD *)v83 + 4);
          }
          v28 = 0;
          goto LABEL_46;
        }
        v69 = *((_QWORD *)FunctionRealm + 412);
        if (v69)
        {
          v70 = *(_DWORD *)(v69 - 8);
          v71 = ((unint64_t)&WebCore::JSMediaStreamTrackEvent::s_info
               + ~((_QWORD)&WebCore::JSMediaStreamTrackEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaStreamTrackEvent::s_info
                                                                               + ~((_QWORD)&WebCore::JSMediaStreamTrackEvent::s_info << 32)) >> 22);
          v72 = 9 * ((v71 + ~(v71 << 13)) ^ ((v71 + ~(v71 << 13)) >> 8));
          v73 = (v72 ^ (v72 >> 15)) + ~((v72 ^ (v72 >> 15)) << 27);
          v74 = v70 & ((v73 >> 31) ^ v73);
          v75 = *(char ***)(v69 + 16 * v74);
          if (v75 != &WebCore::JSMediaStreamTrackEvent::s_info)
          {
            v76 = 1;
            while (v75)
            {
              v74 = ((_DWORD)v74 + v76) & v70;
              v75 = *(char ***)(v69 + 16 * v74);
              ++v76;
              if (v75 == &WebCore::JSMediaStreamTrackEvent::s_info)
                goto LABEL_94;
            }
            goto LABEL_95;
          }
LABEL_94:
          v66 = *(WebCore::JSDOMGlobalObject **)(v69 + 16 * v74 + 8);
          if (!v66)
            goto LABEL_95;
        }
        else
        {
LABEL_95:
          v77 = (JSC::JSCell *)WebCore::JSEvent::prototype(v65, FunctionRealm, v66);
          v78 = WebCore::JSMediaStreamTrackEventPrototype::createStructure((uint64_t *)v65, (uint64_t)FunctionRealm, v77);
          *(_DWORD *)(v78 + 16) |= 0x80000u;
          v80 = (JSC::JSCell *)WebCore::JSMediaStreamTrackEventPrototype::create(v65, FunctionRealm, v78, v79);
          v81 = WebCore::JSMediaStreamTrackEvent::createStructure((uint64_t *)v65, (uint64_t)FunctionRealm, v80);
          v66 = (WebCore::JSDOMGlobalObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v81, (uint64_t)&WebCore::JSMediaStreamTrackEvent::s_info);
        }
        SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v64, v66, v67);
        if (!*((_DWORD *)v65 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v65) & 1) == 0)
          JSC::JSObject::setStructure(v27, v65, SubclassStructure);
        goto LABEL_98;
      }
      v13 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_135:
      v85 = (_DWORD)v12 == 0;
LABEL_179:
      v15 = !v85;
LABEL_16:
      v102 = v15;
      if (*((_DWORD *)v13 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v13) & 1) != 0)
        goto LABEL_45;
    }
    v90 = (_DWORD)v17 == 0;
    goto LABEL_183;
  }
  v27 = 0;
LABEL_47:
  if (v6 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32B5840[v6])(v104, &v106);
  return v27;
}

uint64_t WebCore::JSMediaStreamTrackEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSMediaStreamTrackEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSMediaStreamTrackEventPrototype::create(WebCore::JSMediaStreamTrackEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSMediaStreamTrackEvent::s_info, (uint64_t)&WebCore::JSMediaStreamTrackEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSMediaStreamTrackEvent>,(WebCore::DOMConstructorID)141>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1128);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSMediaStreamTrackEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000002, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSMediaStreamTrackEvent::s_info
         + ~((_QWORD)&WebCore::JSMediaStreamTrackEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaStreamTrackEvent::s_info
                                                                         + ~((_QWORD)&WebCore::JSMediaStreamTrackEvent::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSMediaStreamTrackEvent::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSMediaStreamTrackEvent::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEvent::prototype((WebCore::JSEvent *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSMediaStreamTrackEventPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSMediaStreamTrackEventPrototype::create((WebCore::JSMediaStreamTrackEventPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSMediaStreamTrackEvent::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSMediaStreamTrackEvent::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1128) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsMediaStreamTrackEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSMediaStreamTrackEventPrototype::s_info != (char **)(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                       + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSMediaStreamTrackEvent>,(WebCore::DOMConstructorID)141>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsMediaStreamTrackEvent_track(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 72);
  if (v2)
    return WebCore::wrap<WebCore::MediaStreamTrack>(a1, *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v2);
  else
    return 2;
}

uint64_t WebCore::JSMediaStreamTrackEvent::subspaceForImpl(WebCore::JSMediaStreamTrackEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 1152);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 1152))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 1152);
    *(_QWORD *)(v8 + 1152) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 1152);
  *(_QWORD *)(v3 + 1152) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

_QWORD *WebCore::JSDOMConstructor<WebCore::JSMediaStreamTrackProcessor>::construct(JSC *this, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  uint64_t v6;
  JSC::JSCell *v7;
  WebCore::ScriptExecutionContext *v8;
  uint64_t Object;
  JSC::Structure *v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  __int16 v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  unint64_t SlowCase;
  uint64_t v18;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  JSC::VM *v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char **v33;
  int v34;
  unint64_t v35;
  uint64_t *v36;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v38;
  JSC::Structure *v39;
  JSC::JSCell *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  void *v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *Allocator;
  JSC::JSCell *v62;
  JSC::JSGlobalObject *v63;
  JSC::JSObject *v64;
  JSC::JSGlobalObject *v65;
  JSC::VM *v66;
  JSC::Structure *v67;
  uint64_t FunctionRealm;
  uint64_t v69;
  unsigned int v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char **v75;
  int v76;
  JSC::JSObject *v77;
  unint64_t v78;
  WebCore::JSDOMGlobalObject *v79;
  JSC::Structure *v80;
  JSC::JSCell *v81;
  uint64_t v82;
  unint64_t SubclassStructure;
  JSValue v84;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  JSValue v88;
  unint64_t v89;
  WebCore::JSMediaStreamTrackProcessor *v90;
  JSCell *v91;
  WTF *v92;
  JSC::VM *v93;
  WTF::StringImpl *v94;
  int v95;
  WTF::StringImpl *v96;
  __int16 v97;
  int v98;
  JSC::VM *v99;
  WTF *v100;
  WTF::StringImpl *v101;
  _QWORD *v102;

  v3 = (JSC::VM *)*((_QWORD *)this + 7);
  v99 = v3;
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v84.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, (JSC::JSGlobalObject *)a2);
    return (_QWORD *)JSC::VM::throwException(v3, this, v84);
  }
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return WebCore::throwConstructorScriptExecutionContextUnavailableError(this, &v99, (uint64_t)"MediaStreamTrackProcessor", 26);
  v7 = *(JSC::JSCell **)(a2 + 48);
  v93 = (JSC::VM *)*((_QWORD *)this + 7);
  if (((unint64_t)v7 & 0xFFFFFFFFFFFFFFF7) == 2)
    goto LABEL_18;
  if (((unint64_t)v7 & 0xFFFE000000000002) != 0)
    goto LABEL_31;
  v8 = (WebCore::ScriptExecutionContext *)v6;
  Object = JSC::JSCell::getObject(v7);
  if (!Object)
    goto LABEL_31;
  v10 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v12 = JSC::JSObject::get(v10, this, (unint64_t)v96);
  if (v96)
  {
    if (*(_DWORD *)v96 == 2)
      WTF::StringImpl::destroy(v96, v11);
    else
      *(_DWORD *)v96 -= 2;
  }
  if (*((_DWORD *)v93 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v93) & 1) != 0)
    goto LABEL_19;
  if (v12 == 10)
  {
    v13 = 1;
  }
  else
  {
    WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedShort>(this, v12, (uint64_t)&v96);
    v13 = (__int16)v96;
    if ((unint64_t)v96 >> 32)
    {
LABEL_19:
      SlowCase = 0;
      v18 = 1;
      v98 = 1;
LABEL_20:
      ((void (*)(JSC::VM **, WTF::StringImpl **))off_1E32B7180[v18])(&v93, &v96);
      return (_QWORD *)SlowCase;
    }
  }
  WTF::AtomStringImpl::addLiteral();
  v14 = v96;
  v16 = JSC::JSObject::get(v10, this, (unint64_t)v96);
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v15);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (*((_DWORD *)v93 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v93) & 1) != 0)
    goto LABEL_19;
  if (v16 == 10)
  {
LABEL_18:
    WebCore::throwRequiredMemberTypeError((int)this, (int)&v93, "track", 6, "MediaStreamTrackProcessorInit", 30, "MediaStreamTrack", 17);
    goto LABEL_19;
  }
  v96 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  if ((v16 & 0xFFFE000000000002) != 0)
    goto LABEL_31;
  v20 = *(unsigned int *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C);
  v21 = *(_DWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C) != 0;
  if ((_DWORD)v20)
  {
    v22 = 16 * v20;
    if ((char **)v22 != &WebCore::JSMediaStreamTrack::s_info)
    {
      do
      {
        v22 = *(_QWORD *)(v22 + 16);
        v21 = v22 != 0;
      }
      while ((char **)v22 != &WebCore::JSMediaStreamTrack::s_info && v22 != 0);
    }
  }
  if (!v21)
  {
LABEL_31:
    JSC::throwTypeError();
    goto LABEL_19;
  }
  v24 = *(_QWORD *)(v16 + 24);
  ++*(_DWORD *)(v24 - 8);
  v97 = v13;
  v98 = 0;
  v96 = 0;
  v100 = (WTF *)(v24 - 32);
  LOWORD(v101) = v13;
  WebCore::MediaStreamTrackProcessor::create(v8, &v100, (uint64_t)&v93);
  if (*(_DWORD *)(v24 - 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v24 - 32) + 16))(v24 - 32);
  else
    --*(_DWORD *)(v24 - 8);
  if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
    goto LABEL_124;
  if (!v95)
  {
    v25 = *(_QWORD *)(v5 + 40);
    v26 = v93;
    v93 = 0;
    v92 = v26;
    if (*(uint64_t (***)(WebCore::MediaStreamTrackProcessor *__hidden))v26 != &off_1E335FED0)
    {
      __break(0xC471u);
      JUMPOUT(0x194D2DF34);
    }
    v27 = *(_QWORD *)(v25 + 3296);
    if (v27)
    {
      v28 = *(_DWORD *)(v27 - 8);
      v29 = ((unint64_t)&WebCore::JSMediaStreamTrackProcessor::s_info
           + ~((_QWORD)&WebCore::JSMediaStreamTrackProcessor::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaStreamTrackProcessor::s_info
                                                                               + ~((_QWORD)&WebCore::JSMediaStreamTrackProcessor::s_info << 32)) >> 22);
      v30 = 9 * ((v29 + ~(v29 << 13)) ^ ((v29 + ~(v29 << 13)) >> 8));
      v31 = (v30 ^ (v30 >> 15)) + ~((v30 ^ (v30 >> 15)) << 27);
      v32 = v28 & ((v31 >> 31) ^ v31);
      v33 = *(char ***)(v27 + 16 * v32);
      if (v33 == &WebCore::JSMediaStreamTrackProcessor::s_info)
      {
LABEL_42:
        v35 = *(_QWORD *)(v27 + 16 * v32 + 8);
        if (v35)
          goto LABEL_44;
      }
      else
      {
        v34 = 1;
        while (v33)
        {
          v32 = ((_DWORD)v32 + v34) & v28;
          v33 = *(char ***)(v27 + 16 * v32);
          ++v34;
          if (v33 == &WebCore::JSMediaStreamTrackProcessor::s_info)
            goto LABEL_42;
        }
      }
    }
    v36 = *(uint64_t **)(v25 + 56);
    Structure = WebCore::JSMediaStreamTrackProcessorPrototype::createStructure(v36, v25, *(JSC::JSCell **)(v25 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v40 = (JSC::JSCell *)WebCore::JSMediaStreamTrackProcessorPrototype::create((WebCore::JSMediaStreamTrackProcessorPrototype *)v36, Structure, v38, v39);
    v41 = WebCore::JSMediaStreamTrackProcessor::createStructure(v36, v25, v40);
    v35 = WebCore::cacheDOMStructure((JSCell *)v25, v41, (uint64_t)&WebCore::JSMediaStreamTrackProcessor::s_info);
LABEL_44:
    v42 = *(_QWORD *)(v25 + 56);
    v43 = *(_QWORD *)(v42 + 41456);
    v44 = *(_QWORD *)(v43 + 23536);
    v45 = *(_QWORD **)(v44 + 1160);
    if (v45)
      goto LABEL_66;
    v46 = *(_QWORD *)(v43 + 22648);
    if (__ldaxr((unsigned __int8 *)v46))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v46))
    {
      goto LABEL_51;
    }
    MEMORY[0x19AEA534C](v46);
LABEL_51:
    v48 = *(_QWORD *)(v46 + 2824);
    if (!*(_QWORD *)(v48 + 1160))
    {
      v49 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)&v100, "IsoSpace T");
      v102 = 0;
      MEMORY[0x19AEA3204](v49, &v100, v42 + 192, v42 + 1872, 32, 8, &v102);
      v51 = (uint64_t)v102;
      v102 = 0;
      if (v51)
        (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
      v52 = v100;
      v100 = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 1)
          WTF::fastFree(v52, v50);
        else
          --*(_DWORD *)v52;
      }
      v53 = *(_QWORD *)(v48 + 1160);
      *(_QWORD *)(v48 + 1160) = v49;
      if (v53)
        (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
    }
    v45 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v54 = *(_QWORD *)(v44 + 1160);
    *(_QWORD *)(v44 + 1160) = v45;
    if (v54)
    {
      v55 = (WTF *)MEMORY[0x19AEA3528]();
      WTF::fastFree(v55, v56);
    }
    v57 = __ldxr((unsigned __int8 *)v46);
    if (v57 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v46))
      {
LABEL_66:
        SlowCase = v45[3];
        if (SlowCase >= v45[4])
        {
          SlowCase = v45[5];
          if ((SlowCase & 1) != 0)
          {
            JSC::sanitizeStackForVM();
            SlowCase = JSC::LocalAllocator::allocateSlowCase();
            goto LABEL_68;
          }
          v89 = *(_QWORD *)(SlowCase + 8) ^ v45[6];
          v45[4] = SlowCase + HIDWORD(v89);
          v45[5] = SlowCase + (int)v89;
        }
        v45[3] = SlowCase + 32;
LABEL_68:
        *(_DWORD *)SlowCase = 0;
        WebCore::JSDOMObject::JSDOMObject(SlowCase, v35);
        *(_QWORD *)(SlowCase + 24) = v92;
        if (*(_BYTE *)(v42 + 755))
          __dmb(0xAu);
        v58 = *(_QWORD *)(v25 + 3320);
        if ((byte_1EE336040 & 1) == 0)
        {
          qword_1EE336038 = (uint64_t)&off_1E32B36B0;
          byte_1EE336040 = 1;
        }
        v100 = v92;
        if ((SlowCase & 8) != 0)
          v59 = (SlowCase - 112) | 1;
        else
          v59 = SlowCase & 0xFFFFFFFFFFFFC000;
        if ((v59 & 1) != 0)
          v60 = v59 + 47;
        else
          v60 = *(_QWORD *)v59 + 32;
        Allocator = *(_QWORD **)(v60 + 16);
        if (!Allocator)
          Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
        *(_QWORD *)(v60 + 16) = *Allocator;
        *Allocator = SlowCase;
        Allocator[1] = &qword_1EE336038;
        Allocator[2] = v58;
        v102 = Allocator;
        JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v58 + 32), (uint64_t *)&v100, (uint64_t *)&v102);
        if (v102)
          v102[1] = 3;
        v3 = v99;
        goto LABEL_82;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v46);
    goto LABEL_66;
  }
  if (v95 == 1)
  {
    v86 = (WTF::StringImpl *)v93;
    LOBYTE(v100) = (_BYTE)v93;
    v87 = v94;
    v94 = 0;
    v101 = v87;
    if (!*((_QWORD *)v3 + 2))
    {
      v88.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v93, (JSC::JSGlobalObject *)&v101);
      JSC::VM::throwException(v3, this, v88);
      v87 = v101;
    }
    v101 = 0;
    if (v87)
    {
      if (*(_DWORD *)v87 == 2)
        WTF::StringImpl::destroy(v87, v86);
      else
        *(_DWORD *)v87 -= 2;
    }
    SlowCase = 0;
LABEL_82:
    if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
      goto LABEL_124;
    v62 = *(JSC::JSCell **)(a2 + 40);
    if (((unint64_t)v62 & 0xFFFE000000000002) != 0
      || (v63 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v62)) == 0
      || (v65 = v63, v63 == *(JSC::JSGlobalObject **)(a2 + 24))
      || (v66 = (JSC::VM *)*((_QWORD *)this + 7),
          FunctionRealm = JSC::getFunctionRealm(this, v63, v64),
          *((_DWORD *)v66 + 20))
      && (JSC::VM::hasExceptionsAfterHandlingTraps(v66) & 1) != 0)
    {
LABEL_96:
      if (!*((_DWORD *)v3 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) == 0)
      {
LABEL_97:
        if (v95 != -1)
          ((void (*)(WTF **, JSC::VM **))off_1E32B7170[v95])(&v100, &v93);
        v18 = 0;
        goto LABEL_20;
      }
LABEL_124:
      SlowCase = 0;
      goto LABEL_97;
    }
    v69 = *(_QWORD *)(FunctionRealm + 3296);
    if (v69)
    {
      v70 = *(_DWORD *)(v69 - 8);
      v71 = ((unint64_t)&WebCore::JSMediaStreamTrackProcessor::s_info
           + ~((_QWORD)&WebCore::JSMediaStreamTrackProcessor::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaStreamTrackProcessor::s_info
                                                                               + ~((_QWORD)&WebCore::JSMediaStreamTrackProcessor::s_info << 32)) >> 22);
      v72 = 9 * ((v71 + ~(v71 << 13)) ^ ((v71 + ~(v71 << 13)) >> 8));
      v73 = (v72 ^ (v72 >> 15)) + ~((v72 ^ (v72 >> 15)) << 27);
      v74 = v70 & ((v73 >> 31) ^ v73);
      v75 = *(char ***)(v69 + 16 * v74);
      if (v75 == &WebCore::JSMediaStreamTrackProcessor::s_info)
      {
LABEL_92:
        v77 = *(JSC::JSObject **)(v69 + 16 * v74 + 8);
        if (v77)
        {
LABEL_94:
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, v65, v77, v67);
          if (!*((_DWORD *)v66 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v66) & 1) == 0)
            JSC::JSObject::setStructure((JSCell *)SlowCase, v66, SubclassStructure);
          goto LABEL_96;
        }
      }
      else
      {
        v76 = 1;
        while (v75)
        {
          v74 = ((_DWORD)v74 + v76) & v70;
          v75 = *(char ***)(v69 + 16 * v74);
          ++v76;
          if (v75 == &WebCore::JSMediaStreamTrackProcessor::s_info)
            goto LABEL_92;
        }
      }
    }
    v78 = WebCore::JSMediaStreamTrackProcessorPrototype::createStructure((uint64_t *)v66, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
    *(_DWORD *)(v78 + 16) |= 0x80000u;
    v81 = (JSC::JSCell *)WebCore::JSMediaStreamTrackProcessorPrototype::create(v66, v78, v79, v80);
    v82 = WebCore::JSMediaStreamTrackProcessor::createStructure((uint64_t *)v66, FunctionRealm, v81);
    v77 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v82, (uint64_t)&WebCore::JSMediaStreamTrackProcessor::s_info);
    goto LABEL_94;
  }
  v90 = (WebCore::JSMediaStreamTrackProcessor *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::JSMediaStreamTrackProcessor::destroy(v90, v91);
}

_DWORD *WebCore::JSMediaStreamTrackProcessor::destroy(WebCore::JSMediaStreamTrackProcessor *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

uint64_t WebCore::JSMediaStreamTrackProcessor::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSMediaStreamTrackProcessorPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSMediaStreamTrackProcessorPrototype::create(WebCore::JSMediaStreamTrackProcessorPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSMediaStreamTrackProcessor::s_info, (uint64_t)&WebCore::JSMediaStreamTrackProcessorPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSMediaStreamTrackProcessor>,(WebCore::DOMConstructorID)142>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1136);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructor<WebCore::JSMediaStreamTrackProcessor>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000001, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSMediaStreamTrackProcessor::s_info
         + ~((_QWORD)&WebCore::JSMediaStreamTrackProcessor::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaStreamTrackProcessor::s_info
                                                                             + ~((_QWORD)&WebCore::JSMediaStreamTrackProcessor::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSMediaStreamTrackProcessor::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSMediaStreamTrackProcessor::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSMediaStreamTrackProcessorPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSMediaStreamTrackProcessorPrototype::create((WebCore::JSMediaStreamTrackProcessorPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSMediaStreamTrackProcessor::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSMediaStreamTrackProcessor::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1136) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsMediaStreamTrackProcessorConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSMediaStreamTrackProcessorPrototype::s_info != (char **)(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                           + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSMediaStreamTrackProcessor>,(WebCore::DOMConstructorID)142>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsMediaStreamTrackProcessor_readable(JSC::JSGlobalObject *a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v4;
  WTF *v5;
  void *v6;
  unint64_t v7;
  _DWORD *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  JSValue v12;
  int v13[2];
  WTF::StringImpl *v14;
  int v15;
  _BYTE v16[8];
  WTF::StringImpl *v17;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v4 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  WebCore::MediaStreamTrackProcessor::readable(*(WebCore::MediaStreamTrackProcessor::Source **)(a2 + 24), a1, (uint64_t)v13);
  if (v15)
  {
    if (v15 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::JSMediaStreamTrackProcessorOwner::isReachableFromOpaqueRoots();
    }
    v10 = (WTF::StringImpl *)LOBYTE(v13[0]);
    v16[0] = v13[0];
    v11 = v14;
    v14 = 0;
    v17 = v11;
    if (!*((_QWORD *)v3 + 2))
    {
      v12.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)LOBYTE(v13[0]), (JSC::JSGlobalObject *)&v17);
      JSC::VM::throwException(v3, a1, v12);
      v11 = v17;
    }
    v17 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    v7 = 0;
  }
  else
  {
    v5 = *(WTF **)v13;
    *(_QWORD *)v13 = 0;
    v7 = WebCore::wrap<WebCore::ReadableStream>((uint64_t)a1, v4, v5);
    if (*(_DWORD *)v5 == 1)
    {
      v9 = (_DWORD *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      if (v9)
      {
        if (v9[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
        else
          --v9[4];
      }
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  if (v15 != -1)
    ((void (*)(_BYTE *, int *))off_1E32B7200[v15])(v16, v13);
  return v7;
}

uint64_t WebCore::JSMediaStreamTrackProcessorOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSMediaStreamTrackProcessorOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[4];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[4] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
  --v3[4];
  return result;
}

void WebCore::JSLocationOwner::~JSLocationOwner(WebCore::JSLocationOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSManagedMediaSourceOwner::~JSManagedMediaSourceOwner(WebCore::JSManagedMediaSourceOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSManagedSourceBufferOwner::~JSManagedSourceBufferOwner(WebCore::JSManagedSourceBufferOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSMediaCapabilitiesOwner::~JSMediaCapabilitiesOwner(WebCore::JSMediaCapabilitiesOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSMediaControlsHostOwner::~JSMediaControlsHostOwner(WebCore::JSMediaControlsHostOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSMediaDeviceInfoOwner::~JSMediaDeviceInfoOwner(WebCore::JSMediaDeviceInfoOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSMediaDevicesOwner::~JSMediaDevicesOwner(WebCore::JSMediaDevicesOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSMediaErrorOwner::~JSMediaErrorOwner(WebCore::JSMediaErrorOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSMediaKeySessionOwner::~JSMediaKeySessionOwner(WebCore::JSMediaKeySessionOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSMediaKeyStatusMapOwner::~JSMediaKeyStatusMapOwner(WebCore::JSMediaKeyStatusMapOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSMediaKeySystemAccessOwner::~JSMediaKeySystemAccessOwner(WebCore::JSMediaKeySystemAccessOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSMediaKeysOwner::~JSMediaKeysOwner(WebCore::JSMediaKeysOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSMediaListOwner::~JSMediaListOwner(WebCore::JSMediaListOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSMediaMetadataOwner::~JSMediaMetadataOwner(WebCore::JSMediaMetadataOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSMediaQueryListOwner::~JSMediaQueryListOwner(WebCore::JSMediaQueryListOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSMediaRecorderOwner::~JSMediaRecorderOwner(WebCore::JSMediaRecorderOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSMediaSessionOwner::~JSMediaSessionOwner(WebCore::JSMediaSessionOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

BOOL WebCore::JSMediaSessionActionHandler::hasCallback(WebCore::JSMediaSessionActionHandler *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 3);
  return v1 && (v2 = *(_QWORD *)(v1 + 16)) != 0 && (*(_BYTE *)(v2 + 8) & 3) == 0 && *(_QWORD *)v2 != 0;
}

void WebCore::JSMediaSourceOwner::~JSMediaSourceOwner(WebCore::JSMediaSourceOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSMediaSourceHandleOwner::~JSMediaSourceHandleOwner(WebCore::JSMediaSourceHandleOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSMediaStreamOwner::~JSMediaStreamOwner(WebCore::JSMediaStreamOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSMediaStreamTrackOwner::~JSMediaStreamTrackOwner(WebCore::JSMediaStreamTrackOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSMediaStreamTrackProcessorOwner::~JSMediaStreamTrackProcessorOwner(WebCore::JSMediaStreamTrackProcessorOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::jsLocationInstanceFunction_assign(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  JSC::JSGlobalObject *v10;
  WebCore::Document *v11;
  int v12;
  WebCore::LocalDOMWindow *active;
  JSC::JSGlobalObject *v14;
  uint64_t DOMWindow;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WebCore::LocalDOMWindow *v19;
  uint64_t v20;
  uint64_t v21;
  JSValue v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  JSValue v27;
  WebCore *v28;
  JSC::JSGlobalObject *v29;
  JSC::CallFrame *v30;
  JSC::VM *v31;
  WTF::StringImpl *v32;
  int v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  int v36[2];
  WTF::StringImpl *v37;
  uint64_t v38;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v31 = v5;
  v6 = JSC::jsDynamicCast<WebCore::JSLocation *>(*((_QWORD *)a2 + 5));
  if (!v6)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v31, "Location", "assign");
  v7 = v6;
  v8 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 16);
  if (v8)
    v9 = *(WTF::StringImpl **)(v8 + 8);
  else
    v9 = 0;
  if (!WebCore::BindingSecurity::shouldAllowAccessToDOMWindow(this, v9, 2))
    return 10;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v10);
    return JSC::VM::throwException(v5, this, v24);
  }
  v11 = *(WebCore::Document **)(v7 + 24);
  WebCore::valueToUSVString(this, *((_QWORD *)a2 + 6), (uint64_t)&v32);
  v12 = v33;
  if (v33)
  {
    v21 = 0;
LABEL_20:
    if (v12 != -1)
      ((void (*)(int *, WTF::StringImpl **))off_1E32B54C8[v12])(v36, &v32);
    return v21;
  }
  active = (WebCore::LocalDOMWindow *)WebCore::activeDOMWindow((uint64_t)this);
  DOMWindow = WebCore::firstDOMWindow((JSC::VM **)this, v14);
  if (!v33)
  {
    v17 = v32;
    v32 = 0;
    v34 = v17;
    v18 = *((_QWORD *)v11 + 2);
    if (v18
      && (v19 = (WebCore::LocalDOMWindow *)DOMWindow, (v20 = *(_QWORD *)(v18 + 8)) != 0)
      && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 104))(v20))
    {
      WebCore::Location::setLocation(v11, active, v19, (const WTF::String *)&v34, v36);
      v17 = v34;
    }
    else
    {
      *(_QWORD *)v36 = 0;
      v37 = 0;
      v38 = 0;
    }
    v34 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    if ((_BYTE)v38)
    {
      v25 = (WTF::StringImpl *)LOBYTE(v36[0]);
      LOBYTE(v34) = v36[0];
      v26 = v37;
      v35 = v37;
      if (!*((_QWORD *)v5 + 2))
      {
        v27.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v36[0]), (JSC::JSGlobalObject *)&v35);
        JSC::VM::throwException(v5, this, v27);
        v26 = v35;
      }
      v35 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v25);
        else
          *(_DWORD *)v26 -= 2;
      }
      v21 = 0;
    }
    else
    {
      v21 = 10;
    }
    v12 = v33;
    goto LABEL_20;
  }
  v28 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsLocationInstanceFunction_replace(v28, v29, v30);
}

uint64_t WebCore::jsLocationInstanceFunction_reload(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WebCore::LocalDOMWindow *active;
  uint64_t v12;

  v4 = *((_QWORD *)a2 + 5);
  v12 = *((_QWORD *)this + 7);
  v5 = JSC::jsDynamicCast<WebCore::JSLocation *>(v4);
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v12, "Location", "reload");
  v6 = v5;
  v7 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 16);
  if (v7)
    v8 = *(WTF::StringImpl **)(v7 + 8);
  else
    v8 = 0;
  if (WebCore::BindingSecurity::shouldAllowAccessToDOMWindow(this, v8, 2))
  {
    v9 = *(_QWORD *)(v6 + 24);
    active = (WebCore::LocalDOMWindow *)WebCore::activeDOMWindow((uint64_t)this);
    WebCore::Location::reload(v9, active);
  }
  return 10;
}

uint64_t WebCore::jsLocationInstanceFunction_toString(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t *v11;
  WTF::StringImpl *v12;
  int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v19;
  WTF::StringImpl *v20;

  v4 = *((_QWORD *)a2 + 5);
  v19 = *((_QWORD *)this + 7);
  v5 = JSC::jsDynamicCast<WebCore::JSLocation *>(v4);
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v19, "Location", "toString");
  v6 = v5;
  v7 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 16);
  if (!v7)
    return 10;
  v8 = *(WTF::StringImpl **)(v7 + 8);
  if (!v8)
    return 10;
  if (*((_BYTE *)v8 + 56))
  {
    WebCore::reportErrorAccessingRemoteFrame(this, 2);
    return 10;
  }
  if (!WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((uint64_t)this, v8, 2))
    return 10;
  WebCore::Location::href(*(WebCore::Location **)(v6 + 24), &v20);
  v10 = *((_QWORD *)this + 7);
  v11 = (uint64_t *)(v10 + 41968);
  v12 = v20;
  if (!v20)
    return *v11;
  v13 = *((_DWORD *)v20 + 1);
  if (v13)
  {
    if (v13 != 1)
    {
LABEL_9:
      v14 = *(_QWORD *)(v10 + 64760);
      if (!v14 || v20 != *(WTF::StringImpl **)(v14 + 8))
        v14 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_12;
    }
    v15 = (unsigned __int8 *)*((_QWORD *)v20 + 1);
    if ((*((_BYTE *)v20 + 16) & 4) != 0)
    {
      v16 = *v15;
    }
    else
    {
      v17 = *(unsigned __int16 *)v15;
      if (v17 > 0xFF)
        goto LABEL_9;
      v16 = v17;
    }
    v14 = *(_QWORD *)(v10 + 8 * v16 + 42216);
  }
  else
  {
    v14 = *v11;
  }
LABEL_12:
  if (*(_DWORD *)v12 == 2)
    WTF::StringImpl::destroy(v12, v9);
  else
    *(_DWORD *)v12 -= 2;
  return v14;
}

_BYTE *WebCore::IDLOperation<WebCore::JSLocation>::call<&WebCore::jsLocationInstanceFunction_replaceBody,(WebCore::CastedThisErrorBehavior)0>(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  WebCore::JSLocation *v5;
  uint64_t v7;

  v7 = *(_QWORD *)(a1 + 56);
  v4 = JSC::jsDynamicCast<WebCore::JSLocation *>(a2[5]);
  if (v4)
    return (_BYTE *)WebCore::jsLocationInstanceFunction_replaceBody((JSC::VM **)a1, (JSC::JSGlobalObject *)a2, *(JSC::CallFrame **)(v4 + 24), v5);
  else
    return WebCore::throwThisTypeError(a1, (int)&v7, "Location", "replace");
}

uint64_t WebCore::jsLocationInstanceFunction_replaceBody(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSLocation *a4)
{
  JSC::VM *v5;
  int v7;
  uint64_t v8;
  JSValue v10;
  _QWORD v11[3];
  _BYTE v12[8];
  int v13;
  JSC::VM *v14;
  WebCore *v15;

  v15 = (WebCore *)this;
  v5 = this[7];
  v14 = v5;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v10.super.isa = (Class)JSC::createNotEnoughArgumentsError((JSC *)this, a2);
    return JSC::VM::throwException(v5, (JSC::JSGlobalObject *)this, v10);
  }
  else
  {
    WebCore::valueToUSVString((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 6), (uint64_t)v12);
    v7 = v13;
    if (v13)
    {
      v8 = 0;
    }
    else
    {
      v11[0] = a3;
      v11[1] = &v15;
      v11[2] = v12;
      v8 = WebCore::toJS<WebCore::IDLUndefined,WebCore::jsLocationInstanceFunction_replaceBody(JSC::JSGlobalObject *,JSC::CallFrame *,WebCore::JSLocation *)::{lambda(void)#1}>((JSC *)this, &v14, (uint64_t)v11);
      v7 = v13;
    }
    if (v7 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_1E32B54C8[v7])(v11, v12);
  }
  return v8;
}

uint64_t WebCore::toJS<WebCore::IDLUndefined,WebCore::jsLocationInstanceFunction_replaceBody(JSC::JSGlobalObject *,JSC::CallFrame *,WebCore::JSLocation *)::{lambda(void)#1}>(JSC *a1, JSC::VM **a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v8;
  unsigned __int8 v9[8];
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  char v13;

  WebCore::jsLocationInstanceFunction_replaceBody(JSC::JSGlobalObject *,JSC::CallFrame *,WebCore::JSLocation *)::{lambda(void)#1}::operator()(&v11, a3);
  if (v13)
  {
    v9[0] = v11;
    v8 = v12;
    v12 = 0;
    v10 = v8;
    if (!*((_QWORD *)*a2 + 2))
    {
      WebCore::propagateExceptionSlowPath(a1, a2, v9);
      v8 = v10;
    }
    v10 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v5);
      else
        *(_DWORD *)v8 -= 2;
    }
    v6 = 0;
  }
  else
  {
    v6 = 10;
  }
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&v11, v5);
  return v6;
}

WTF::StringImpl *WebCore::jsLocationInstanceFunction_replaceBody(JSC::JSGlobalObject *,JSC::CallFrame *,WebCore::JSLocation *)::{lambda(void)#1}::operator()(_QWORD *a1, uint64_t a2)
{
  unsigned int *v4;
  WebCore::LocalDOMWindow *active;
  JSC::JSGlobalObject *v6;
  WebCore::LocalDOMWindow *DOMWindow;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  WebCore *v12;
  JSC::JSGlobalObject *v13;
  JSC::CallFrame *v14;
  WTF::StringImpl *v15;

  v4 = *(unsigned int **)a2;
  active = (WebCore::LocalDOMWindow *)WebCore::activeDOMWindow(**(_QWORD **)(a2 + 8));
  DOMWindow = (WebCore::LocalDOMWindow *)WebCore::firstDOMWindow(**(JSC::VM ****)(a2 + 8), v6);
  v8 = *(_QWORD *)(a2 + 16);
  if (*(_DWORD *)(v8 + 8))
  {
    v12 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::jsManagedMediaSourceConstructorFunction_isTypeSupported(v12, v13, v14);
  }
  else
  {
    v9 = *(WTF::StringImpl **)v8;
    *(_QWORD *)v8 = 0;
    v15 = v9;
    WebCore::Location::replace(v4, active, DOMWindow, (const WTF::String *)&v15, a1);
    result = v15;
    v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::jsManagedMediaSourceConstructorFunction_isTypeSupported(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  const WTF::String *v6;
  double v7;
  double v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  JSC::VM *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  JSC::VM *v20;
  JSValue v21;
  WTF::StringImpl *v22;
  int hasExceptionsAfterHandlingTraps;
  uint64_t v24;
  int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v20 = (JSC::VM *)*((_QWORD *)this + 7);
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v20, this, v21);
  }
  v5 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v5)
    return 10;
  v10 = v5;
  v11 = *((_QWORD *)a2 + 6);
  v27 = (WTF::StringImpl *)v11;
  v12 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((v11 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v11 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v11 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v11, this);
      if (!v13)
        goto LABEL_8;
    }
    else if (!v13)
    {
LABEL_8:
      v26 = v13;
      goto LABEL_9;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_8;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v27, this);
LABEL_9:
  if (*((_DWORD *)v12 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v12);
    v14 = v26;
    if (hasExceptionsAfterHandlingTraps)
    {
      v25 = 1;
      v26 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v22);
        else
          *(_DWORD *)v14 -= 2;
      }
      v16 = 0;
      v18 = 1;
      goto LABEL_18;
    }
  }
  else
  {
    v14 = v26;
  }
  v25 = 0;
  v24 = 0;
  v27 = v14;
  if (WebCore::MediaSource::isTypeSupported(v10, (WebCore::ScriptExecutionContext *)&v27, v6, v7, v8, v9))
    v16 = 7;
  else
    v16 = 6;
  v17 = v27;
  v27 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = 0;
LABEL_18:
  ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32B54C8[v18])(&v27, &v24);
  return v16;
}

uint64_t WebCore::jsMathMLElementPrototypeFunction_focus(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  __int16 v14;
  int v15;
  int v16;
  __int16 v17;

  v12 = *((_QWORD *)this + 7);
  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v12, "MathMLElement", "focus");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSMathMLElement::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSMathMLElement::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v12, "MathMLElement", "focus");
  if (*((_DWORD *)a2 + 8) == 1)
    v9 = 10;
  else
    v9 = *((_QWORD *)a2 + 6);
  v10 = *(_QWORD *)(v3 + 24);
  WebCore::convertDictionary<WebCore::FocusOptions>((JSC::JSCell *)v9, (uint64_t)this, (uint64_t)&v13);
  if (v15)
    return 0;
  v17 = v14;
  v16 = v13;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v10 + 664))(v10, &v16);
  return 10;
}

uint64_t WebCore::jsMathMLElementPrototypeFunction_blur(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "MathMLElement", "blur");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSMathMLElement::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSMathMLElement::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "MathMLElement", "blur");
  (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 24) + 688))(*(_QWORD *)(v3 + 24));
  return 10;
}

uint64_t WebCore::JSMathMLMathElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::jsMediaCapabilitiesPrototypeFunction_decodingInfo(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char **v21;
  BOOL v22;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  JSC::JSCell *v27;
  JSC::Structure *Object;
  WTF::StringImpl *v29;
  JSC::JSCell *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  JSC::JSCell *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  JSC::VM *v40;
  uint64_t v41;
  int v42;
  const char *v43;
  int v44;
  int v45;
  char v46;
  char **v47;
  uint64_t v48;
  __int128 v49;
  double v50;
  double v51;
  double v52;
  double v53;
  float v54;
  uint64_t v55;
  __int128 v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  objc_class *v60;
  WebCore::DOMGuardedObject *v61;
  JSC::VM *v62;
  JSValue v63;
  uint16x8_t v64;
  uint16x8_t v65;
  uint64_t (**v66)();
  WebCore::DOMGuardedObject *v69;
  _BYTE v70[44];
  unsigned int v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  char v75;
  __int128 v76;
  _OWORD v77[2];
  char v78;
  uint64_t v79;
  double v80;
  char v81;
  uint64_t v82;
  double v83;
  char v84;
  __int16 v85;
  JSC::VM *v86;
  JSC::VM *v87;
  WebCore::DOMGuardedObject *v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  char v92;
  __int128 v93;
  double v94[4];
  char v95;
  uint64_t v96;
  double v97;
  char v98;
  uint64_t v99;
  double v100;
  char v101;
  __int16 v102;
  int v103;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)this + 7);
  v6 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSDOMGlobalObject::s_info && v8 != 0);
  }
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x194D302C4);
  }
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v69 = v15;
  v18 = *((_QWORD *)a2 + 5);
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_118;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSMediaCapabilities::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSMediaCapabilities::s_info && v21 != 0);
  }
  if (!v20)
  {
LABEL_118:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"MediaCapabilities", "decodingInfo", v17);
  }
  else if (*((_DWORD *)a2 + 8) == 1)
  {
    v62 = (JSC::VM *)*((_QWORD *)this + 7);
    v63.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v62, this, v63);
  }
  else
  {
    v24 = *(_QWORD **)(v18 + 24);
    v25 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
    if (v25)
    {
      v26 = v25;
      v27 = (JSC::JSCell *)*((_QWORD *)a2 + 6);
      v86 = (JSC::VM *)*((_QWORD *)this + 7);
      if (((unint64_t)v27 & 0xFFFFFFFFFFFFFFF7) == 2)
      {
        Object = 0;
      }
      else if (((unint64_t)v27 & 0xFFFE000000000002) != 0
             || (Object = (JSC::Structure *)JSC::JSCell::getObject(v27)) == 0)
      {
        JSC::throwTypeError();
        v39 = 1;
        v103 = 1;
        goto LABEL_91;
      }
      LOBYTE(v72) = 0;
      v75 = 0;
      LOBYTE(v76) = 0;
      v78 = 0;
      LOBYTE(v79) = 0;
      v81 = 0;
      LOBYTE(v82) = 0;
      v84 = 0;
      HIBYTE(v85) = 1;
      if (((unint64_t)v27 & 0xFFFFFFFFFFFFFFF7) == 2)
      {
LABEL_51:
        WebCore::throwRequiredMemberTypeError((int)this, (int)&v86, "type", 5, "MediaDecodingConfiguration", 27, "MediaDecodingType", 18);
LABEL_52:
        v39 = 1;
        v103 = 1;
        WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)&v72, v37);
        goto LABEL_91;
      }
      WTF::AtomStringImpl::addLiteral();
      v30 = (JSC::JSCell *)JSC::JSObject::get(Object, this, (unint64_t)v88);
      if (v88)
      {
        if (*(_DWORD *)v88 == 2)
          WTF::StringImpl::destroy(v88, v29);
        else
          *(_DWORD *)v88 -= 2;
      }
      if (*((_DWORD *)v86 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v86) & 1) != 0)
        goto LABEL_52;
      if (v30 != (JSC::JSCell *)10)
      {
        WebCore::convertDictionary<WebCore::AudioConfiguration>(v30, (JSC::VM **)this, (uint64_t)v70);
        v32 = v71;
        if (v71)
        {
          v103 = 1;
          if (v71 != -1)
          {
            v66 = off_1E32B54D8;
LABEL_143:
            ((void (*)(JSC::VM **, _BYTE *))v66[v32])(&v87, v70);
          }
LABEL_144:
          WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)&v72, v31);
          v39 = 1;
          goto LABEL_91;
        }
        v76 = *(_OWORD *)v70;
        v77[0] = *(_OWORD *)&v70[16];
        *(_OWORD *)((char *)v77 + 10) = *(_OWORD *)&v70[26];
        v78 = 1;
      }
      WTF::AtomStringImpl::addLiteral();
      v33 = v88;
      v35 = (JSC::JSCell *)JSC::JSObject::get(Object, this, (unint64_t)v88);
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, v34);
        else
          *(_DWORD *)v33 -= 2;
      }
      if (*((_DWORD *)v86 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v86) & 1) != 0)
        goto LABEL_52;
      if (v35 == (JSC::JSCell *)10)
      {
LABEL_46:
        WTF::AtomStringImpl::addLiteral();
        v36 = v88;
        v38 = JSC::JSObject::get(Object, this, (unint64_t)v88);
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
            WTF::StringImpl::destroy(v36, v37);
          else
            *(_DWORD *)v36 -= 2;
        }
        if (*((_DWORD *)v86 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v86) & 1) != 0)
          goto LABEL_52;
        if (v38 == 10)
          goto LABEL_51;
        v40 = (JSC::VM *)*((_QWORD *)this + 7);
        v87 = v40;
        v88 = (WebCore::DOMGuardedObject *)v38;
        if ((v38 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v38 + 5) != 2)
        {
          JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v88, this);
          v41 = *(_QWORD *)v70;
          if (*(_QWORD *)v70)
            goto LABEL_59;
          goto LABEL_112;
        }
        v41 = *(_QWORD *)(v38 + 8);
        if ((v41 & 1) != 0)
        {
          v41 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v38, this);
          if (!v41)
          {
LABEL_58:
            *(_QWORD *)v70 = v41;
            if (v41)
            {
LABEL_59:
              v42 = *(_DWORD *)(v41 + 16);
              v43 = *(const char **)(v41 + 8);
              v44 = *(_DWORD *)(v41 + 4);
              if (v43 == "file" || v44 != 4)
              {
                if (v43 != "file" || v44 != 4)
                {
                  if (v43 == "media-source" || v44 != 12)
                  {
                    if (v43 != "media-source" || v44 != 12)
                    {
                      if (v43 == "webrtc" || v44 != 6)
                      {
                        if (v44 != 6 || v43 != "webrtc")
                          goto LABEL_65;
                      }
                      else if ((v42 & 4) != 0)
                      {
                        if (*v43 != 119 || *(_DWORD *)(v43 + 1) != 1953653349 || *(_DWORD *)(v43 + 2) != 1668575842)
                          goto LABEL_65;
                      }
                      else
                      {
                        if (*(_WORD *)v43 != 119)
                          goto LABEL_65;
                        if (*(_QWORD *)(v43 + 4) != 0x63007400720062 || *(_QWORD *)(v43 + 2) != 0x74007200620065)
                          goto LABEL_65;
                      }
                      v47 = &off_1E32AED50;
                      goto LABEL_69;
                    }
                  }
                  else if ((v42 & 4) != 0)
                  {
                    if (*v43 != 109
                      || *(_QWORD *)(v43 + 1) != 0x756F732D61696465
                      || *(_QWORD *)(v43 + 4) != 0x656372756F732D61)
                    {
                      goto LABEL_65;
                    }
                  }
                  else
                  {
                    if (*(_WORD *)v43 != 109)
                      goto LABEL_65;
                    v64 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v43 + 2), (int16x8_t)xmmword_1968C0360);
                    v64.i16[0] = vminvq_u16(v64);
                    if (!v64.i32[0])
                      goto LABEL_65;
                    v65 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v43 + 8), (int16x8_t)xmmword_1968C0370);
                    v65.i16[0] = vminvq_u16(v65);
                    if (!v65.i32[0])
                      goto LABEL_65;
                  }
                  v47 = &off_1E32AED38;
LABEL_69:
                  v46 = *((_BYTE *)v47 + 16);
                  v45 = 1;
                  goto LABEL_70;
                }
              }
              else
              {
                if ((v42 & 4) != 0)
                {
                  if (*v43 != 102 || *(_WORD *)(v43 + 1) != 27753 || *((_WORD *)v43 + 1) != 25964)
                    goto LABEL_65;
                  goto LABEL_68;
                }
                if (*(_WORD *)v43 != 102)
                {
LABEL_65:
                  v45 = 0;
                  v46 = 0;
                  goto LABEL_70;
                }
                v45 = 0;
                if (*(_DWORD *)(v43 + 2) != 7077993)
                {
                  v46 = 0;
                  goto LABEL_70;
                }
                v46 = 0;
                if (*((_DWORD *)v43 + 1) != 6619244)
                {
LABEL_70:
                  *(_QWORD *)v70 = 0;
                  if (*(_DWORD *)v41 == 2)
                    WTF::StringImpl::destroy((WTF::StringImpl *)v41, v37);
                  else
                    *(_DWORD *)v41 -= 2;
                  goto LABEL_72;
                }
              }
LABEL_68:
              v47 = &WebCore::parseEnumerationFromString<WebCore::MediaDecodingType>(WTF::String const&)::mappings;
              goto LABEL_69;
            }
LABEL_112:
            v46 = 0;
            v45 = 0;
LABEL_72:
            if (*((_DWORD *)v40 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v40) & 1) != 0)
              goto LABEL_52;
            if (!v45)
            {
              JSC::throwTypeError();
              goto LABEL_52;
            }
            LOBYTE(v85) = v46;
            LOBYTE(v89) = 0;
            v92 = 0;
            if (v75)
            {
              v48 = v72;
              v72 = 0;
              v89 = v48;
              v90 = v73;
              v91 = v74;
              v92 = 1;
            }
            LOBYTE(v93) = 0;
            v95 = 0;
            if (v78)
            {
              v49 = v76;
              v76 = 0uLL;
              v93 = v49;
              *(_OWORD *)v94 = v77[0];
              *(_OWORD *)((char *)&v94[1] + 2) = *(_OWORD *)((char *)v77 + 10);
              v95 = 1;
            }
            LOBYTE(v96) = 0;
            v98 = 0;
            if (v81)
            {
              v96 = v79;
              v50 = v80;
              v79 = 0;
              v80 = 0.0;
              v97 = v50;
              v98 = 1;
            }
            LOBYTE(v99) = 0;
            v101 = 0;
            if (v84)
            {
              v99 = v82;
              v51 = v83;
              v82 = 0;
              v83 = 0.0;
              v100 = v51;
              v101 = 1;
            }
            v102 = v85;
            v103 = 0;
            WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)&v72, v37);
            LOBYTE(v72) = 0;
            v75 = 0;
            if (v92)
            {
              v55 = v89;
              v89 = 0;
              v72 = v55;
              v52 = *(double *)&v90;
              v53 = *(double *)&v91;
              v73 = v90;
              v74 = v91;
              v75 = 1;
            }
            LOBYTE(v76) = 0;
            v78 = 0;
            if (v95)
            {
              v56 = v93;
              v93 = 0uLL;
              v53 = v94[0];
              v76 = v56;
              v77[0] = *(_OWORD *)v94;
              v52 = *(double *)((char *)&v94[1] + 2);
              *(_OWORD *)((char *)v77 + 10) = *(_OWORD *)((char *)&v94[1] + 2);
              v78 = 1;
            }
            LOBYTE(v79) = 0;
            v81 = 0;
            if (v98)
            {
              v79 = v96;
              v52 = v97;
              v96 = 0;
              v97 = 0.0;
              v80 = v52;
              v81 = 1;
            }
            LOBYTE(v82) = 0;
            v84 = 0;
            if (v101)
            {
              v82 = v99;
              v52 = v100;
              v99 = 0;
              v100 = 0.0;
              v83 = v52;
              v84 = 1;
            }
            v85 = v102;
            WebCore::MediaCapabilities::decodingInfo(v24, v26, (WebCore *)&v72, (uint64_t *)&v69, v52, v53, v54);
            WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)&v72, v57);
            v39 = 0;
LABEL_91:
            (*(&off_1E32B4D00 + v39))((int)&v72, (WebCore::MediaConfiguration *)&v89);
            v14 = v69;
            v69 = 0;
            if (!v14)
              goto LABEL_94;
            goto LABEL_92;
          }
        }
        else if (!v41)
        {
          goto LABEL_58;
        }
        *(_DWORD *)v41 += 2;
        goto LABEL_58;
      }
      WebCore::convertDictionary<WebCore::VideoConfiguration>((JSC::VM **)this, v35, (uint64_t)v70);
      v32 = *(unsigned int *)&v70[40];
      if (!*(_DWORD *)&v70[40])
      {
        v72 = *(_QWORD *)v70;
        v73 = *(_OWORD *)&v70[8];
        v74 = *(_OWORD *)&v70[24];
        v75 = 1;
        goto LABEL_46;
      }
      v103 = 1;
      if (*(_DWORD *)&v70[40] != -1)
      {
        v66 = off_1E32B54E8;
        goto LABEL_143;
      }
      goto LABEL_144;
    }
  }
  v69 = 0;
LABEL_92:
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_94:
  v58 = *(_QWORD *)(v5 + 16);
  if (v58)
  {
    if (*(_QWORD *)(v5 + 24) != v58)
    {
      v60 = *(objc_class **)(v58 + 8);
      JSC::VM::clearException((JSC::VM *)v5);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v88);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v88, v60, 0);
      v61 = v88;
      v88 = 0;
      if (v61)
      {
        if (*((_DWORD *)v61 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v61 + 16))(v61);
        else
          --*((_DWORD *)v61 + 4);
      }
    }
  }
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsMediaCapabilitiesPrototypeFunction_encodingInfo(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char **v21;
  BOOL v22;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  JSC::JSCell *v27;
  JSC::Structure *Object;
  WTF::StringImpl *v29;
  JSC::JSCell *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  JSC::JSCell *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  JSC::VM *v40;
  uint64_t v41;
  int v42;
  const char *v43;
  int v44;
  BOOL v45;
  int v46;
  char **v47;
  int v49;
  int v50;
  uint64_t v52;
  __int128 v53;
  double v54;
  double v55;
  double v56;
  double v57;
  float v58;
  uint64_t v59;
  __int128 v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  objc_class *v64;
  WebCore::DOMGuardedObject *v65;
  JSC::VM *v66;
  JSValue v67;
  uint64_t (**v68)();
  WebCore::DOMGuardedObject *v69;
  _BYTE v70[44];
  unsigned int v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  char v75;
  __int128 v76;
  _OWORD v77[2];
  char v78;
  uint64_t v79;
  double v80;
  char v81;
  uint64_t v82;
  double v83;
  char v84;
  BOOL v85;
  JSC::VM *v86;
  JSC::VM *v87;
  WebCore::DOMGuardedObject *v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  char v92;
  __int128 v93;
  double v94[4];
  char v95;
  uint64_t v96;
  double v97;
  char v98;
  uint64_t v99;
  double v100;
  char v101;
  BOOL v102;
  int v103;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)this + 7);
  v6 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSDOMGlobalObject::s_info && v8 != 0);
  }
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x194D30DA0);
  }
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v69 = v15;
  v18 = *((_QWORD *)a2 + 5);
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_98;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSMediaCapabilities::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSMediaCapabilities::s_info && v21 != 0);
  }
  if (!v20)
  {
LABEL_98:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"MediaCapabilities", "encodingInfo", v17);
  }
  else if (*((_DWORD *)a2 + 8) == 1)
  {
    v66 = (JSC::VM *)*((_QWORD *)this + 7);
    v67.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v66, this, v67);
  }
  else
  {
    v24 = *(_QWORD **)(v18 + 24);
    v25 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
    if (v25)
    {
      v26 = v25;
      v27 = (JSC::JSCell *)*((_QWORD *)a2 + 6);
      v86 = (JSC::VM *)*((_QWORD *)this + 7);
      if (((unint64_t)v27 & 0xFFFFFFFFFFFFFFF7) == 2)
      {
        Object = 0;
      }
      else if (((unint64_t)v27 & 0xFFFE000000000002) != 0
             || (Object = (JSC::Structure *)JSC::JSCell::getObject(v27)) == 0)
      {
        JSC::throwTypeError();
        v39 = 1;
        v103 = 1;
        goto LABEL_126;
      }
      LOBYTE(v72) = 0;
      v75 = 0;
      LOBYTE(v76) = 0;
      v78 = 0;
      LOBYTE(v79) = 0;
      v81 = 0;
      LOBYTE(v82) = 0;
      v84 = 0;
      if (((unint64_t)v27 & 0xFFFFFFFFFFFFFFF7) == 2)
      {
LABEL_51:
        WebCore::throwRequiredMemberTypeError((int)this, (int)&v86, "type", 5, "MediaEncodingConfiguration", 27, "MediaEncodingType", 18);
LABEL_52:
        v39 = 1;
        v103 = 1;
        WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)&v72, v37);
        goto LABEL_126;
      }
      WTF::AtomStringImpl::addLiteral();
      v30 = (JSC::JSCell *)JSC::JSObject::get(Object, this, (unint64_t)v88);
      if (v88)
      {
        if (*(_DWORD *)v88 == 2)
          WTF::StringImpl::destroy(v88, v29);
        else
          *(_DWORD *)v88 -= 2;
      }
      if (*((_DWORD *)v86 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v86) & 1) != 0)
        goto LABEL_52;
      if (v30 != (JSC::JSCell *)10)
      {
        WebCore::convertDictionary<WebCore::AudioConfiguration>(v30, (JSC::VM **)this, (uint64_t)v70);
        v32 = v71;
        if (v71)
        {
          v103 = 1;
          if (v71 != -1)
          {
            v68 = off_1E32B54D8;
LABEL_153:
            ((void (*)(JSC::VM **, _BYTE *))v68[v32])(&v87, v70);
          }
LABEL_154:
          WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)&v72, v31);
          v39 = 1;
          goto LABEL_126;
        }
        v76 = *(_OWORD *)v70;
        v77[0] = *(_OWORD *)&v70[16];
        *(_OWORD *)((char *)v77 + 10) = *(_OWORD *)&v70[26];
        v78 = 1;
      }
      WTF::AtomStringImpl::addLiteral();
      v33 = v88;
      v35 = (JSC::JSCell *)JSC::JSObject::get(Object, this, (unint64_t)v88);
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, v34);
        else
          *(_DWORD *)v33 -= 2;
      }
      if (*((_DWORD *)v86 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v86) & 1) != 0)
        goto LABEL_52;
      if (v35 == (JSC::JSCell *)10)
      {
LABEL_46:
        WTF::AtomStringImpl::addLiteral();
        v36 = v88;
        v38 = JSC::JSObject::get(Object, this, (unint64_t)v88);
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
            WTF::StringImpl::destroy(v36, v37);
          else
            *(_DWORD *)v36 -= 2;
        }
        if (*((_DWORD *)v86 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v86) & 1) != 0)
          goto LABEL_52;
        if (v38 == 10)
          goto LABEL_51;
        v40 = (JSC::VM *)*((_QWORD *)this + 7);
        v87 = v40;
        v88 = (WebCore::DOMGuardedObject *)v38;
        if ((v38 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v38 + 5) != 2)
        {
          JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v88, this);
          v41 = *(_QWORD *)v70;
          if (*(_QWORD *)v70)
            goto LABEL_59;
          goto LABEL_92;
        }
        v41 = *(_QWORD *)(v38 + 8);
        if ((v41 & 1) != 0)
        {
          v41 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v38, this);
          if (!v41)
          {
LABEL_58:
            *(_QWORD *)v70 = v41;
            if (v41)
            {
LABEL_59:
              v42 = *(_DWORD *)(v41 + 16);
              v43 = *(const char **)(v41 + 8);
              v44 = *(_DWORD *)(v41 + 4);
              v45 = v44 != 6;
              if (v43 == "record" || v44 != 6)
              {
                if (v43 != "record")
                {
                  v46 = *(_DWORD *)(v41 + 4);
                  goto LABEL_66;
                }
                v46 = *(_DWORD *)(v41 + 4);
                if (v44 != 6)
                {
LABEL_66:
                  if (v43 == "webrtc")
                    v45 = 1;
                  if (v45)
                  {
                    if (v44 != 6 || v43 != "webrtc")
                      goto LABEL_104;
                  }
                  else if (v46)
                  {
                    if ((v42 & 4) != 0)
                    {
                      if (*v43 != 119 || *(_DWORD *)(v43 + 1) != 1953653349 || *(_DWORD *)(v43 + 2) != 1668575842)
                      {
LABEL_104:
                        v50 = 0;
                        v49 = 0;
LABEL_105:
                        *(_QWORD *)v70 = 0;
                        if (*(_DWORD *)v41 == 2)
                          WTF::StringImpl::destroy((WTF::StringImpl *)v41, v37);
                        else
                          *(_DWORD *)v41 -= 2;
                        goto LABEL_107;
                      }
                    }
                    else
                    {
                      if (*(_WORD *)v43 != 119)
                        goto LABEL_104;
                      if (*(_QWORD *)(v43 + 4) != 0x63007400720062 || *(_QWORD *)(v43 + 2) != 0x74007200620065)
                        goto LABEL_104;
                    }
                  }
                  v47 = &off_1E32AF588;
LABEL_87:
                  v49 = *((unsigned __int8 *)v47 + 16);
                  v50 = 1;
                  goto LABEL_105;
                }
              }
              else if ((v42 & 4) != 0)
              {
                if (*v43 != 114 || *(_DWORD *)(v43 + 1) != 1919902565 || *(_DWORD *)(v43 + 2) != 1685221219)
                  goto LABEL_65;
              }
              else
              {
                if (*(_WORD *)v43 != 114)
                {
LABEL_65:
                  v46 = 6;
                  goto LABEL_66;
                }
                v46 = 6;
                if (*(_QWORD *)(v43 + 2) != 0x72006F00630065 || *(_QWORD *)(v43 + 4) != 0x640072006F0063)
                  goto LABEL_66;
              }
              v47 = &WebCore::parseEnumerationFromString<WebCore::MediaEncodingType>(WTF::String const&)::mappings;
              goto LABEL_87;
            }
LABEL_92:
            v49 = 0;
            v50 = 0;
LABEL_107:
            if (*((_DWORD *)v40 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v40) & 1) != 0)
              goto LABEL_52;
            if (!v50)
            {
              JSC::throwTypeError();
              goto LABEL_52;
            }
            v85 = v49 != 0;
            LOBYTE(v89) = 0;
            v92 = 0;
            if (v75)
            {
              v52 = v72;
              v72 = 0;
              v89 = v52;
              v90 = v73;
              v91 = v74;
              v92 = 1;
            }
            LOBYTE(v93) = 0;
            v95 = 0;
            if (v78)
            {
              v53 = v76;
              v76 = 0uLL;
              v93 = v53;
              *(_OWORD *)v94 = v77[0];
              *(_OWORD *)((char *)&v94[1] + 2) = *(_OWORD *)((char *)v77 + 10);
              v95 = 1;
            }
            LOBYTE(v96) = 0;
            v98 = 0;
            if (v81)
            {
              v96 = v79;
              v54 = v80;
              v79 = 0;
              v80 = 0.0;
              v97 = v54;
              v98 = 1;
            }
            LOBYTE(v99) = 0;
            v101 = 0;
            if (v84)
            {
              v99 = v82;
              v55 = v83;
              v82 = 0;
              v83 = 0.0;
              v100 = v55;
              v101 = 1;
            }
            v102 = v49 != 0;
            v103 = 0;
            WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)&v72, v37);
            LOBYTE(v72) = 0;
            v75 = 0;
            if (v92)
            {
              v59 = v89;
              v89 = 0;
              v72 = v59;
              v56 = *(double *)&v90;
              v57 = *(double *)&v91;
              v73 = v90;
              v74 = v91;
              v75 = 1;
            }
            LOBYTE(v76) = 0;
            v78 = 0;
            if (v95)
            {
              v60 = v93;
              v93 = 0uLL;
              v57 = v94[0];
              v76 = v60;
              v77[0] = *(_OWORD *)v94;
              v56 = *(double *)((char *)&v94[1] + 2);
              *(_OWORD *)((char *)v77 + 10) = *(_OWORD *)((char *)&v94[1] + 2);
              v78 = 1;
            }
            LOBYTE(v79) = 0;
            v81 = 0;
            if (v98)
            {
              v79 = v96;
              v56 = v97;
              v96 = 0;
              v97 = 0.0;
              v80 = v56;
              v81 = 1;
            }
            LOBYTE(v82) = 0;
            v84 = 0;
            if (v101)
            {
              v82 = v99;
              v56 = v100;
              v99 = 0;
              v100 = 0.0;
              v83 = v56;
              v84 = 1;
            }
            v85 = v102;
            WebCore::MediaCapabilities::encodingInfo(v24, v26, (WebCore *)&v72, (uint64_t *)&v69, v56, v57, v58);
            WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)&v72, v61);
            v39 = 0;
LABEL_126:
            (*(&off_1E32B4D10 + v39))((int)&v72, (WebCore::MediaConfiguration *)&v89);
            v14 = v69;
            v69 = 0;
            if (!v14)
              goto LABEL_129;
            goto LABEL_127;
          }
        }
        else if (!v41)
        {
          goto LABEL_58;
        }
        *(_DWORD *)v41 += 2;
        goto LABEL_58;
      }
      WebCore::convertDictionary<WebCore::VideoConfiguration>((JSC::VM **)this, v35, (uint64_t)v70);
      v32 = *(unsigned int *)&v70[40];
      if (!*(_DWORD *)&v70[40])
      {
        v72 = *(_QWORD *)v70;
        v73 = *(_OWORD *)&v70[8];
        v74 = *(_OWORD *)&v70[24];
        v75 = 1;
        goto LABEL_46;
      }
      v103 = 1;
      if (*(_DWORD *)&v70[40] != -1)
      {
        v68 = off_1E32B54E8;
        goto LABEL_153;
      }
      goto LABEL_154;
    }
  }
  v69 = 0;
LABEL_127:
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_129:
  v62 = *(_QWORD *)(v5 + 16);
  if (v62)
  {
    if (*(_QWORD *)(v5 + 24) != v62)
    {
      v64 = *(objc_class **)(v62 + 8);
      JSC::VM::clearException((JSC::VM *)v5);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v88);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v88, v64, 0);
      v65 = v88;
      v88 = 0;
      if (v65)
      {
        if (*((_DWORD *)v65 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v65 + 16))(v65);
        else
          --*((_DWORD *)v65 + 4);
      }
    }
  }
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 10;
  return v13;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore26MediaDecodingConfigurationENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::MediaConfiguration *this)
{
  WebCore::MediaConfiguration::~MediaConfiguration(this, this);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore26MediaEncodingConfigurationENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::MediaConfiguration *this)
{
  WebCore::MediaConfiguration::~MediaConfiguration(this, this);
}

uint64_t WebCore::MediaConfiguration::MediaConfiguration(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  __int128 v5;
  _DWORD *v6;
  _DWORD *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _DWORD **v19;
  uint64_t v20;
  _DWORD *v21;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 40) = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    v4 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v4 += 2;
    *(_QWORD *)a1 = v4;
    v5 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 40) = 1;
  }
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  if (*(_BYTE *)(a2 + 96))
  {
    v6 = *(_DWORD **)(a2 + 48);
    if (v6)
      *v6 += 2;
    *(_QWORD *)(a1 + 48) = v6;
    v7 = *(_DWORD **)(a2 + 56);
    if (v7)
      *v7 += 2;
    *(_QWORD *)(a1 + 56) = v7;
    v8 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 74) = *(_OWORD *)(a2 + 74);
    *(_OWORD *)(a1 + 64) = v8;
    *(_BYTE *)(a1 + 96) = 1;
  }
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  if (*(_BYTE *)(a2 + 120))
  {
    v9 = *(unsigned int *)(a2 + 116);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 116) = v9;
    if ((_DWORD)v9)
    {
      if (v9 >> 29)
        goto LABEL_32;
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v9));
      *(_DWORD *)(a1 + 112) = v9;
      *(_QWORD *)(a1 + 104) = v12;
      v13 = *(unsigned int *)(a2 + 116);
      if ((_DWORD)v13)
      {
        v14 = *(_DWORD ***)(a2 + 104);
        v15 = 8 * v13;
        do
        {
          v16 = *v14;
          if (*v14)
            *v16 += 2;
          *v12++ = v16;
          ++v14;
          v15 -= 8;
        }
        while (v15);
      }
    }
    *(_BYTE *)(a1 + 120) = 1;
  }
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  if (*(_BYTE *)(a2 + 144))
  {
    v10 = *(unsigned int *)(a2 + 140);
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_DWORD *)(a1 + 140) = v10;
    if (!(_DWORD)v10)
    {
LABEL_16:
      *(_BYTE *)(a1 + 144) = 1;
      return a1;
    }
    if (!(v10 >> 29))
    {
      v17 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v10));
      *(_DWORD *)(a1 + 136) = v10;
      *(_QWORD *)(a1 + 128) = v17;
      v18 = *(unsigned int *)(a2 + 140);
      if ((_DWORD)v18)
      {
        v19 = *(_DWORD ***)(a2 + 128);
        v20 = 8 * v18;
        do
        {
          v21 = *v19;
          if (*v19)
            *v21 += 2;
          *v17++ = v21;
          ++v19;
          v20 -= 8;
        }
        while (v20);
      }
      goto LABEL_16;
    }
LABEL_32:
    __break(0xC471u);
    JUMPOUT(0x194D310BCLL);
  }
  return a1;
}

void WebCore::MediaConfiguration::~MediaConfiguration(WebCore::MediaConfiguration *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  WTF::StringImpl *v15;

  if (*((_BYTE *)this + 144))
  {
    v3 = *((unsigned int *)this + 35);
    if ((_DWORD)v3)
    {
      v10 = (WTF::StringImpl **)*((_QWORD *)this + 16);
      v11 = 8 * v3;
      do
      {
        v12 = *v10;
        *v10 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, a2);
          else
            *(_DWORD *)v12 -= 2;
        }
        ++v10;
        v11 -= 8;
      }
      while (v11);
    }
    v4 = (WTF *)*((_QWORD *)this + 16);
    if (v4)
    {
      *((_QWORD *)this + 16) = 0;
      *((_DWORD *)this + 34) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  if (*((_BYTE *)this + 120))
  {
    v5 = *((unsigned int *)this + 29);
    if ((_DWORD)v5)
    {
      v13 = (WTF::StringImpl **)*((_QWORD *)this + 13);
      v14 = 8 * v5;
      do
      {
        v15 = *v13;
        *v13 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, a2);
          else
            *(_DWORD *)v15 -= 2;
        }
        ++v13;
        v14 -= 8;
      }
      while (v14);
    }
    v6 = (WTF *)*((_QWORD *)this + 13);
    if (v6)
    {
      *((_QWORD *)this + 13) = 0;
      *((_DWORD *)this + 28) = 0;
      WTF::fastFree(v6, a2);
    }
  }
  if (*((_BYTE *)this + 96))
  {
    v7 = (WTF::StringImpl *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, a2);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = (WTF::StringImpl *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, a2);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  if (*((_BYTE *)this + 40))
  {
    v9 = *(WTF::StringImpl **)this;
    *(_QWORD *)this = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, a2);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
}

uint64_t WebCore::jsMediaControllerPrototypeFunction_play(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "MediaController", "play");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSMediaController::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSMediaController::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "MediaController", "play");
  WebCore::MediaController::play((uint64_t **)(*(_QWORD *)(v3 + 24) - 32));
  return 10;
}

uint64_t WebCore::jsMediaControllerPrototypeFunction_pause(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  WebCore *v14;
  uint64_t v15;

  v3 = *((_QWORD *)a2 + 5);
  v15 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "MediaController", "pause");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSMediaController::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSMediaController::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "MediaController", "pause");
  v9 = *(_QWORD *)(v3 + 24);
  if (!*(_BYTE *)(v9 + 40))
  {
    v10 = (char **)(v9 - 32);
    *(_BYTE *)(v9 + 40) = 1;
    v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v11 || (this = *(WebCore **)(v11 + 96)) == 0)
      this = (WebCore *)WebCore::threadGlobalDataSlow(this);
    v12 = *((_QWORD *)this + 5);
    if (!v12)
    {
      v14 = this;
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)this);
      v12 = *((_QWORD *)v14 + 5);
    }
    WebCore::MediaController::scheduleEvent(v10, (const WTF::AtomString *)(v12 + 1424));
    WebCore::MediaController::updateReadyState((uint64_t)v10);
    WebCore::MediaController::updatePlaybackState((uint64_t)v10);
  }
  return 10;
}

uint64_t WebCore::jsMediaControllerPrototypeFunction_unpause(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v3 = *((_QWORD *)a2 + 5);
  v15 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "MediaController", "unpause");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSMediaController::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSMediaController::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "MediaController", "unpause");
  v9 = *(_QWORD *)(v3 + 24);
  if (*(_BYTE *)(v9 + 40))
  {
    v10 = (char **)(v9 - 32);
    *(_BYTE *)(v9 + 40) = 0;
    v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v11 || (v12 = *(_QWORD *)(v11 + 96)) == 0)
      v12 = WebCore::threadGlobalDataSlow(this);
    v13 = *(_QWORD *)(v12 + 40);
    if (!v13)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v12);
      v13 = *(_QWORD *)(v12 + 40);
    }
    WebCore::MediaController::scheduleEvent(v10, (const WTF::AtomString *)(v13 + 1464));
    WebCore::MediaController::updateReadyState((uint64_t)v10);
    WebCore::MediaController::updatePlaybackState((uint64_t)v10);
  }
  return 10;
}

_BYTE *WebCore::jsMediaControlsHostPrototypeFunction_sortedTrackListForMenu(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  JSValue v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  WebCore::TextTrackList *v24;
  JSC::VM *v25;
  JSC::VM *v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t v29;
  objc_class *v30;
  int v31;
  BOOL v32;
  JSValue v33;
  void *v34;
  uint64_t v35;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  JSC::VM *v44;
  uint64_t *v45;
  WTF *v46;
  uint64_t v47;
  _DWORD *v48;
  WTF *v49;
  _QWORD *v50;
  WebCore::AudioTrackList *v51;
  uint64_t v52;
  JSC::VM *v53;
  unsigned int v54;
  WTF *v55;
  uint64_t v56;
  objc_class *v57;
  int v58;
  BOOL v59;
  JSValue v60;
  void *v61;
  JSC::VM *v62;
  uint64_t *v63;
  WTF *v64;
  uint64_t v65;
  _DWORD *v66;
  WTF *v67;
  _QWORD *v68;
  _QWORD v69[2];
  WTF *v70;
  int v71;
  _DWORD v72[3];
  int v73;
  JSC::VM *v74;
  uint64_t v75;
  WTF *v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  JSC::VM *v82;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v69[0] = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)v69, "MediaControlsHost", "sortedTrackListForMenu");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 0x4C);
  v13 = *(_DWORD *)(v11 + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSMediaControlsHost::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSMediaControlsHost::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)v69, "MediaControlsHost", "sortedTrackListForMenu");
  v69[1] = v9;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v17.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v17);
  }
  v19 = *((_QWORD *)a2 + 6);
  if ((v19 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v19 + 5) < 0x17u)
    return (_BYTE *)JSC::throwTypeError();
  v20 = *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C);
  v21 = 16 * v20;
  if ((char **)(16 * v20) == &WebCore::JSTextTrackList::s_info
    || *(_DWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C) == 0)
  {
    if ((_DWORD)v20)
    {
      v23 = *(_QWORD *)(v10 + 24);
      v74 = v9;
LABEL_22:
      v24 = *(WebCore::TextTrackList **)(v19 + 24);
      if (v24)
      {
        v25 = *(JSC::VM **)(v11 + 40);
        WebCore::MediaControlsHost::sortedTrackListForMenu(v23, v24, &v70);
        v26 = (JSC::VM *)*((_QWORD *)this + 7);
        v82 = v26;
        LOBYTE(v74) = 0;
        v75 = 0x800000000;
        v76 = (WTF *)((char *)&v77 + 8);
        v77 = 0u;
        v78 = 0u;
        v79 = 0u;
        v80 = 0u;
        v81 = 0;
        v27 = v72[0];
        if (v72[0] >= 9u)
        {
          LOBYTE(v74) = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v75) == 1;
          v27 = v72[0];
          if (v72[0])
          {
LABEL_25:
            v28 = (uint64_t *)v70;
            v29 = 8 * v27;
            do
            {
              v30 = (objc_class *)(*v28 ? WebCore::wrap<WebCore::TextTrack>((int)this, v25, *v28) : 2);
              if (*((_DWORD *)v26 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v26) & 1) != 0)
                goto LABEL_100;
              v31 = v75;
              if ((_DWORD)v75 != HIDWORD(v75)
                && (v76 != (WTF *)((char *)&v77 + 8) ? (v32 = v76 == 0) : (v32 = 1), v32))
              {
                *((_QWORD *)v76 + v75) = v30;
                LODWORD(v75) = v31 + 1;
              }
              else
              {
                v33.super.isa = v30;
                if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v75, v33) == 1)
                  LOBYTE(v74) = 1;
              }
              ++v28;
              v29 -= 8;
            }
            while (v29);
          }
        }
        else if (v72[0])
        {
          goto LABEL_25;
        }
        if ((_BYTE)v74)
        {
          JSC::throwOutOfMemoryError();
        }
        else
        {
          *(_QWORD *)&v72[1] = v76;
          v73 = v75;
          v44 = (JSC::VM *)*((_QWORD *)v25 + 7);
          if (!*((_DWORD *)v44 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v44) & 1) == 0)
          {
            v38 = JSC::constructArray();
LABEL_82:
            v45 = (uint64_t *)v77;
            if ((_QWORD)v77)
            {
              *(_QWORD *)&v72[1] = &v75;
              v50 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>((uint64_t *)v77, (uint64_t *)&v72[1]);
              WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v45, v50);
            }
            if (v76 != (WTF *)((char *)&v77 + 8) && v76)
              WTF::fastFree(v76, v34);
            if (v72[0])
            {
              v46 = v70;
              v47 = 8 * v72[0];
              do
              {
                v48 = *(_DWORD **)v46;
                *(_QWORD *)v46 = 0;
                if (v48)
                {
                  if (v48[4] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v48 + 16))(v48);
                  else
                    --v48[4];
                }
                v46 = (WTF *)((char *)v46 + 8);
                v47 -= 8;
              }
              while (v47);
            }
            v49 = v70;
            if (v70)
            {
              v70 = 0;
              v71 = 0;
              WTF::fastFree(v49, v34);
            }
            return (_BYTE *)v38;
          }
        }
LABEL_100:
        v38 = 0;
        goto LABEL_82;
      }
LABEL_57:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v74, 0, "trackList", 10, "MediaControlsHost", 18, a8, "sortedTrackListForMenu", 23, "TextTrackList", 14);
      return 0;
    }
    return (_BYTE *)JSC::throwTypeError();
  }
  v35 = 16 * v20;
  do
    v35 = *(_QWORD *)(v35 + 16);
  while ((char **)v35 != &WebCore::JSTextTrackList::s_info && v35 != 0);
  if (v35)
  {
    v23 = *(_QWORD *)(v10 + 24);
    v74 = v9;
    do
      v21 = *(_QWORD *)(v21 + 16);
    while ((char **)v21 != &WebCore::JSTextTrackList::s_info && v21 != 0);
    if (!v21)
      goto LABEL_57;
    goto LABEL_22;
  }
  if ((char **)v21 == &WebCore::JSAudioTrackList::s_info)
  {
    v41 = *(_QWORD *)(v10 + 24);
    v74 = v9;
  }
  else
  {
    v39 = v21;
    do
      v39 = *(_QWORD *)(v39 + 16);
    while ((char **)v39 != &WebCore::JSAudioTrackList::s_info && v39 != 0);
    if (!v39)
      return (_BYTE *)JSC::throwTypeError();
    v41 = *(_QWORD *)(v10 + 24);
    v74 = v9;
    if ((char **)v21 != &WebCore::JSAudioTrackList::s_info)
    {
      do
        v21 = *(_QWORD *)(v21 + 16);
      while ((char **)v21 != &WebCore::JSAudioTrackList::s_info && v21 != 0);
      if (!v21)
      {
LABEL_73:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v74, 0, "trackList", 10, "MediaControlsHost", 18, a8, "sortedTrackListForMenu", 23, "AudioTrackList", 15);
        return 0;
      }
    }
  }
  v51 = *(WebCore::AudioTrackList **)(v19 + 24);
  if (!v51)
    goto LABEL_73;
  v52 = *(_QWORD *)(v11 + 40);
  WebCore::MediaControlsHost::sortedTrackListForMenu(v41, v51, &v70);
  v53 = (JSC::VM *)*((_QWORD *)this + 7);
  v82 = v53;
  LOBYTE(v74) = 0;
  v75 = 0x800000000;
  v76 = (WTF *)((char *)&v77 + 8);
  v77 = 0u;
  v78 = 0u;
  v79 = 0u;
  v80 = 0u;
  v81 = 0;
  v54 = v72[0];
  if (v72[0] >= 9u)
  {
    LOBYTE(v74) = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v75) == 1;
    v54 = v72[0];
    if (v72[0])
    {
LABEL_105:
      v55 = v70;
      v56 = 8 * v54;
      do
      {
        v57 = (objc_class *)(*(_QWORD *)v55
                           ? WebCore::wrap<WebCore::AudioTrack>((uint64_t)this, v52, *(_DWORD **)v55)
                           : 2);
        if (*((_DWORD *)v53 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v53) & 1) != 0)
          goto LABEL_145;
        v58 = v75;
        if ((_DWORD)v75 != HIDWORD(v75) && (v76 != (WTF *)((char *)&v77 + 8) ? (v59 = v76 == 0) : (v59 = 1), v59))
        {
          *((_QWORD *)v76 + v75) = v57;
          LODWORD(v75) = v58 + 1;
        }
        else
        {
          v60.super.isa = v57;
          if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v75, v60) == 1)
            LOBYTE(v74) = 1;
        }
        v55 = (WTF *)((char *)v55 + 8);
        v56 -= 8;
      }
      while (v56);
    }
  }
  else if (v72[0])
  {
    goto LABEL_105;
  }
  if ((_BYTE)v74)
  {
    JSC::throwOutOfMemoryError();
LABEL_145:
    v38 = 0;
    goto LABEL_127;
  }
  *(_QWORD *)&v72[1] = v76;
  v73 = v75;
  v62 = *(JSC::VM **)(v52 + 56);
  if (*((_DWORD *)v62 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v62) & 1) != 0)
    goto LABEL_145;
  v38 = JSC::constructArray();
LABEL_127:
  v63 = (uint64_t *)v77;
  if ((_QWORD)v77)
  {
    *(_QWORD *)&v72[1] = &v75;
    v68 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>((uint64_t *)v77, (uint64_t *)&v72[1]);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v63, v68);
  }
  if (v76 != (WTF *)((char *)&v77 + 8) && v76)
    WTF::fastFree(v76, v61);
  if (v72[0])
  {
    v64 = v70;
    v65 = 8 * v72[0];
    do
    {
      v66 = *(_DWORD **)v64;
      *(_QWORD *)v64 = 0;
      if (v66)
      {
        if (v66[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v66 + 16))(v66);
        else
          --v66[4];
      }
      v64 = (WTF *)((char *)v64 + 8);
      v65 -= 8;
    }
    while (v65);
  }
  v67 = v70;
  if (v70)
  {
    v70 = 0;
    v71 = 0;
    WTF::fastFree(v67, v61);
  }
  return (_BYTE *)v38;
}

_BYTE *WebCore::jsMediaControlsHostPrototypeFunction_displayNameForTrack(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char **v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t (*v26)();
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned int v40;
  unsigned int v42;
  JSValue v44;
  WebCore *v45;
  JSC::JSGlobalObject *v46;
  JSC::CallFrame *v47;
  JSC::VM *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  int v51;
  JSC::VM *v52;
  int v53;
  char v54;
  uint64_t v55;
  int v56;
  int v57;
  char v58;
  int v59;
  _BYTE v60[8];
  int v61;
  int v62;
  int v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v48 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v48, "MediaControlsHost", "displayNameForTrack");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMediaControlsHost::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMediaControlsHost::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v48, "MediaControlsHost", "displayNameForTrack");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v44.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v44);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = *((_QWORD *)a2 + 6);
  if ((v12 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v13 = 0;
    LOBYTE(v56) = 0;
    v58 = 0;
    v59 = 0;
    v60[0] = 0;
    LOBYTE(v62) = 0;
    goto LABEL_59;
  }
  v52 = v4;
  if ((v12 & 0xFFFE000000000002) != 0)
    goto LABEL_22;
  v14 = *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C);
  v15 = (char **)(16 * v14);
  if ((_DWORD)v14)
    v16 = v15 == &WebCore::JSTextTrack::s_info;
  else
    v16 = 1;
  if (v16)
  {
    if (!(_DWORD)v14)
      goto LABEL_22;
LABEL_38:
    v23 = 0;
    v24 = *(_QWORD *)(v12 + 24);
    v21 = v24 - 120;
    v22 = (_DWORD *)(v24 - 104);
    goto LABEL_39;
  }
  v18 = 16 * v14;
  do
    v18 = *(_QWORD *)(v18 + 16);
  while ((char **)v18 != &WebCore::JSTextTrack::s_info && v18 != 0);
  if (v18)
    goto LABEL_38;
  if (v15 == &WebCore::JSAudioTrack::s_info)
    goto LABEL_104;
  do
    v15 = (char **)v15[2];
  while (v15 != &WebCore::JSAudioTrack::s_info && v15 != 0);
  if (v15)
  {
LABEL_104:
    v21 = *(_QWORD *)(v12 + 24);
    if (v21)
    {
      v22 = (_DWORD *)(v21 + 16);
      v23 = 1;
LABEL_39:
      ++*v22;
      v55 = v21;
      v56 = v23;
      LOBYTE(v57) = 1;
      LOBYTE(v61) = 0;
      v62 = -1;
      ((void (*)(uint64_t *, int *, uint64_t *))off_1E32B5488[v23])(&v50, &v61, &v55);
      v62 = v23;
      v63 = 0;
      if ((_BYTE)v57)
      {
        if (v56 != -1)
        {
          ((void (*)(uint64_t *, uint64_t *))off_1E32B5478[v56])(&v50, &v55);
          v17 = v63;
          if (v63)
            goto LABEL_42;
        }
      }
      LOBYTE(v50) = 0;
      v51 = -1;
      v25 = v62;
      if (v62 == -1)
      {
        LOBYTE(v52) = 0;
        v54 = 1;
        LOBYTE(v56) = 0;
        v57 = -1;
        v58 = 1;
        v59 = 0;
      }
      else
      {
        v26 = off_1E32B5488[v62];
        ((void (*)(uint64_t *, uint64_t *, int *))v26)(&v55, &v50, &v61);
        v51 = v25;
        LOBYTE(v52) = 0;
        v53 = -1;
        ((void (*)(uint64_t *, JSC::VM **, uint64_t *))v26)(&v55, &v52, &v50);
        v53 = v25;
        v54 = 1;
        LOBYTE(v56) = 0;
        v58 = 0;
        v57 = -1;
        ((void (*)(WTF::StringImpl **, int *, JSC::VM **))v26)(&v49, &v56, &v52);
        v57 = v25;
        v58 = 1;
        v59 = 0;
        if (!v54)
        {
LABEL_49:
          if (v51 != -1)
            ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32B5478[v51])(&v49, &v50);
          v17 = v63;
          goto LABEL_52;
        }
        if (v53 != -1)
          ((void (*)(WTF::StringImpl **, JSC::VM **))off_1E32B5478[v53])(&v49, &v52);
      }
      v53 = -1;
      goto LABEL_49;
    }
  }
LABEL_22:
  JSC::throwTypeError();
  v17 = 1;
  v63 = 1;
LABEL_42:
  v59 = 1;
LABEL_52:
  if (v17 != -1)
    ((void (*)(JSC::VM **, int *))off_1E32B5498[v17])(&v52, &v61);
  v27 = v59;
  if (v59)
  {
    v38 = 0;
LABEL_91:
    if (v27 != -1)
      ((void (*)(_BYTE *, int *))off_1E32B54A8[v27])(v60, &v56);
    return (_BYTE *)v38;
  }
  v13 = v58;
  v60[0] = 0;
  LOBYTE(v62) = 0;
  if (v58)
  {
    v61 = -1;
    v28 = v57;
    if (v57 != -1)
    {
      ((void (*)(JSC::VM **, _BYTE *, int *))off_1E32B5488[v57])(&v52, v60, &v56);
      v61 = v28;
    }
    v13 = 1;
    LOBYTE(v62) = 1;
  }
LABEL_59:
  v29 = *(_QWORD *)(v11 + 16);
  if (!v29)
    goto LABEL_69;
  v30 = *(_QWORD *)(v29 + 8);
  if (!v30)
    v13 = 0;
  if ((v13 & 1) == 0
    || (v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v30 + 40) + 8) + 528)) == 0
    || (v32 = *(_QWORD *)(v31 + 8)) == 0
    || (v33 = *(_QWORD *)(v32 + 24)) == 0
    || (v34 = *(_QWORD *)(v33 + 8)) == 0)
  {
LABEL_69:
    v35 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v35 += 2;
    v49 = v35;
LABEL_72:
    v36 = *((_QWORD *)this + 7);
    if (!v35 || (v37 = *((_DWORD *)v35 + 1)) == 0)
    {
      v38 = *(_QWORD *)(v36 + 41968);
LABEL_78:
      v49 = 0;
      if (!v35)
      {
LABEL_87:
        if ((_BYTE)v62 && v61 != -1)
          ((void (*)(JSC::VM **, _BYTE *))off_1E32B5478[v61])(&v52, v60);
        v27 = v59;
        goto LABEL_91;
      }
LABEL_85:
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v35);
      else
        *(_DWORD *)v35 -= 2;
      goto LABEL_87;
    }
    if (v37 != 1)
      goto LABEL_75;
    v39 = (unsigned __int8 *)*((_QWORD *)v35 + 1);
    if ((*((_BYTE *)v35 + 16) & 4) != 0)
    {
      v40 = *v39;
    }
    else
    {
      v42 = *(unsigned __int16 *)v39;
      if (v42 > 0xFF)
      {
LABEL_75:
        v38 = *(_QWORD *)(v36 + 64760);
        if (!v38 || v35 != *(WTF::StringImpl **)(v38 + 8))
        {
          v38 = JSC::jsStringWithCacheSlowCase();
          v35 = v49;
          goto LABEL_78;
        }
LABEL_84:
        v49 = 0;
        goto LABEL_85;
      }
      v40 = v42;
    }
    v38 = *(_QWORD *)(v36 + 8 * v40 + 42216);
    goto LABEL_84;
  }
  v50 = v34;
  if (v61 != -1)
  {
    v52 = (JSC::VM *)&v50;
    ((void (*)(WTF::StringImpl **__return_ptr, JSC::VM **, _BYTE *, JSC::CallFrame *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN7WebCore17MediaControlsHost19displayNameForTrackERKNS_8optionalINS_7variantIJN3WTF6RefPtrINS6_9TextTrackENSA_12RawPtrTraitsISC_EENSA_21DefaultRefDerefTraitsISC_EEEENSB_INS6_10AudioTrackENSD_ISI_EENSF_ISI_EEEEEEEEEE3__0EEJRKNS0_6__implIJSH_SL_EEEEEEDcOT_DpOT0____fmatrix[v61])(&v49, &v52, v60, a3);
    v35 = v49;
    goto LABEL_72;
  }
  v45 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsMediaControlsHostPrototypeFunction_setSelectedTextTrack(v45, v46, v47);
}

uint64_t WebCore::jsMediaControlsHostPrototypeFunction_setSelectedTextTrack(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  WebCore::TextTrack *v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  uint64_t v25;
  uint64_t v26;
  JSValue v27;
  JSC::VM *v28;
  JSC::VM *v29;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v28 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v28, "MediaControlsHost", "setSelectedTextTrack");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSMediaControlsHost::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSMediaControlsHost::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v28, "MediaControlsHost", "setSelectedTextTrack");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v27);
  }
  else
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    if ((v17 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v18 = 0;
    }
    else
    {
      v29 = v9;
      if ((v17 & 0xFFFE000000000002) != 0)
        goto LABEL_26;
      v19 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
      v20 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
      v21 = (char **)(16 * v19);
      if ((_DWORD)v19)
        v22 = v21 == &WebCore::JSTextTrack::s_info;
      else
        v22 = 1;
      if (!v22)
      {
        do
        {
          v21 = (char **)v21[2];
          v20 = v21 != 0;
        }
        while (v21 != &WebCore::JSTextTrack::s_info && v21 != 0);
      }
      if (!v20)
      {
LABEL_26:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v29, 0, "track", 6, "MediaControlsHost", 18, a8, "setSelectedTextTrack", 21, "TextTrack", 10);
        return 0;
      }
      v18 = (WebCore::TextTrack *)(*(_QWORD *)(v17 + 24) - 120);
    }
    v25 = *(_QWORD *)(v16 + 16);
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 8);
      if (v26)
        WebCore::HTMLMediaElement::setSelectedTextTrack(v26, v18);
    }
    return 10;
  }
}

uint64_t WebCore::jsMediaControlsHostPrototypeFunction_updateTextTrackContainer(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  WebCore::MediaControlTextTrackContainerElement *v9;
  uint64_t v11;

  v3 = *((_QWORD *)a2 + 5);
  v11 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v11, "MediaControlsHost", "updateTextTrackContainer");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSMediaControlsHost::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSMediaControlsHost::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v11, "MediaControlsHost", "updateTextTrackContainer");
  v9 = *(WebCore::MediaControlTextTrackContainerElement **)(*(_QWORD *)(v3 + 24) + 24);
  if (v9)
    WebCore::MediaControlTextTrackContainerElement::updateDisplay(v9);
  return 10;
}

uint64_t WebCore::jsMediaControlsHostPrototypeFunction_enteredFullscreen(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  WebCore::RenderVideo *v10;
  uint64_t v12;

  v3 = *((_QWORD *)a2 + 5);
  v12 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v12, "MediaControlsHost", "enteredFullscreen");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSMediaControlsHost::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSMediaControlsHost::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v12, "MediaControlsHost", "enteredFullscreen");
  v9 = *(_QWORD *)(v3 + 24);
  v10 = *(WebCore::RenderVideo **)(v9 + 24);
  if (v10)
  {
    WebCore::MediaControlTextTrackContainerElement::updateTextTrackRepresentationIfNeeded(*(unsigned int **)(v9 + 24));
    WebCore::MediaControlTextTrackContainerElement::updateSizes(v10, (WTF::StringImpl *)1);
  }
  return 10;
}

uint64_t WebCore::jsMediaControlsHostPrototypeFunction_exitedFullscreen(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  WebCore::RenderVideo *v10;
  uint64_t v12;

  v3 = *((_QWORD *)a2 + 5);
  v12 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v12, "MediaControlsHost", "exitedFullscreen");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSMediaControlsHost::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSMediaControlsHost::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v12, "MediaControlsHost", "exitedFullscreen");
  v9 = *(_QWORD *)(v3 + 24);
  v10 = *(WebCore::RenderVideo **)(v9 + 24);
  if (v10)
  {
    WebCore::MediaControlTextTrackContainerElement::clearTextTrackRepresentation(*(unsigned int **)(v9 + 24));
    WebCore::MediaControlTextTrackContainerElement::updateSizes(v10, (WTF::StringImpl *)1);
  }
  return 10;
}

uint64_t WebCore::jsMediaControlsHostPrototypeFunction_presentationModeChanged(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "MediaControlsHost", "presentationModeChanged");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSMediaControlsHost::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSMediaControlsHost::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "MediaControlsHost", "presentationModeChanged");
  WebCore::MediaControlsHost::restorePreviouslySelectedTextTrackIfNecessary(*(unsigned int **)(v3 + 24));
  return 10;
}

_BYTE *WebCore::jsMediaControlsHostPrototypeFunction_generateUUID(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unsigned int v18;
  uint64_t v19;
  WTF::StringImpl *v20;

  v4 = *((_QWORD *)a2 + 5);
  v19 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v19, "MediaControlsHost", "generateUUID");
  v5 = 16 * (*(_DWORD *)v4 & 0xFFFFFFFE);
  v6 = *(unsigned int *)(v5 + 76);
  v7 = *(_DWORD *)(v5 + 76) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMediaControlsHost::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMediaControlsHost::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v19, "MediaControlsHost", "generateUUID");
  WTF::createVersion4UUIDString(this);
  v11 = *((_QWORD *)this + 7);
  v12 = v20;
  if (!v20 || (v13 = *((_DWORD *)v20 + 1)) == 0)
  {
    v14 = *(_QWORD *)(v11 + 41968);
LABEL_18:
    v20 = 0;
    if (!v12)
      return (_BYTE *)v14;
    goto LABEL_25;
  }
  if (v13 != 1)
    goto LABEL_15;
  v15 = (unsigned __int8 *)*((_QWORD *)v20 + 1);
  if ((*((_BYTE *)v20 + 16) & 4) != 0)
  {
    v16 = *v15;
LABEL_23:
    v14 = *(_QWORD *)(v11 + 8 * v16 + 42216);
    goto LABEL_24;
  }
  v18 = *(unsigned __int16 *)v15;
  if (v18 <= 0xFF)
  {
    v16 = v18;
    goto LABEL_23;
  }
LABEL_15:
  v14 = *(_QWORD *)(v11 + 64760);
  if (!v14 || v20 != *(WTF::StringImpl **)(v14 + 8))
  {
    v14 = JSC::jsStringWithCacheSlowCase();
    v12 = v20;
    goto LABEL_18;
  }
LABEL_24:
  v20 = 0;
LABEL_25:
  if (*(_DWORD *)v12 == 2)
    WTF::StringImpl::destroy(v12, v12);
  else
    *(_DWORD *)v12 -= 2;
  return (_BYTE *)v14;
}

_BYTE *WebCore::jsMediaControlsHostPrototypeFunction_base64StringForIconNameAndType(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char **v10;
  BOOL v11;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  JSC::VM *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  void (**v20)(WebCore::RenderThemeIOS *__hidden);
  uint64_t v21;
  WTF::StringImpl *v22;
  int v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v32;
  JSValue v34;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  int v38;
  uint64_t v39;
  JSC::VM *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  int v43;
  WTF::StringImpl *v44;
  int v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v40 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v40, "MediaControlsHost", "base64StringForIconNameAndType");
  v7 = 16 * (*(_DWORD *)v5 & 0xFFFFFFFE);
  v8 = *(unsigned int *)(v7 + 76);
  v9 = *(_DWORD *)(v7 + 76) != 0;
  v10 = (char **)(16 * v8);
  if ((_DWORD)v8)
    v11 = v10 == &WebCore::JSMediaControlsHost::s_info;
  else
    v11 = 1;
  if (!v11)
  {
    do
    {
      v10 = (char **)v10[2];
      v9 = v10 != 0;
    }
    while (v10 != &WebCore::JSMediaControlsHost::s_info && v10 != 0);
  }
  if (!v9)
    return WebCore::throwThisTypeError((int)this, (int)&v40, "MediaControlsHost", "base64StringForIconNameAndType");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v34.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v34);
  }
  v13 = *((_QWORD *)a2 + 6);
  v42 = v13;
  if ((v13 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v13 + 5) == 2)
  {
    v14 = *(WTF::StringImpl **)(v13 + 8);
    if ((v14 & 1) != 0)
    {
      v14 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v13, this);
      if (!v14)
        goto LABEL_18;
    }
    else if (!v14)
    {
LABEL_18:
      v47 = v14;
      goto LABEL_19;
    }
    *(_DWORD *)v14 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v42, this);
LABEL_19:
  if (*((_DWORD *)v4 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    v15 = v47;
    if (hasExceptionsAfterHandlingTraps)
    {
      v45 = 1;
      v47 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v36);
        else
          *(_DWORD *)v15 -= 2;
      }
      v24 = 0;
      v30 = 1;
      goto LABEL_60;
    }
  }
  else
  {
    v15 = v47;
  }
  v44 = v15;
  v45 = 0;
  v16 = *((_QWORD *)a2 + 7);
  v47 = (WTF::StringImpl *)v16;
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((v16 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v16 + 5) == 2)
  {
    v18 = *(WTF::StringImpl **)(v16 + 8);
    if ((v18 & 1) != 0)
    {
      v18 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v16, this);
      if (!v18)
        goto LABEL_26;
    }
    else if (!v18)
    {
LABEL_26:
      v46 = v18;
      goto LABEL_27;
    }
    *(_DWORD *)v18 += 2;
    goto LABEL_26;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v47, this);
LABEL_27:
  if (*((_DWORD *)v17 + 20))
  {
    v38 = JSC::VM::hasExceptionsAfterHandlingTraps(v17);
    v19 = v46;
    if (v38)
    {
      v43 = 1;
      v46 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v37);
        else
          *(_DWORD *)v19 -= 2;
      }
      v24 = 0;
      v29 = 1;
      goto LABEL_59;
    }
  }
  else
  {
    v19 = v46;
  }
  v43 = 0;
  v44 = 0;
  v46 = v15;
  v41 = v19;
  v42 = 0;
  {
    v20 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
  }
  else
  {
    v39 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
    *(_OWORD *)(v39 + 40) = 0u;
    *(_OWORD *)(v39 + 24) = 0u;
    v20 = &off_1E335BC30;
    *(_QWORD *)v39 = &off_1E335BC30;
  }
  ((void (*)(WTF::StringImpl **__return_ptr, uint64_t *, WTF::StringImpl **, WTF::StringImpl **))v20[12])(&v47, &WebCore::RenderTheme::singleton(void)::theme, &v46, &v41);
  v21 = *((_QWORD *)this + 7);
  v22 = v47;
  if (v47)
  {
    v23 = *((_DWORD *)v47 + 1);
    if (v23)
    {
      if (v23 != 1)
      {
LABEL_34:
        v24 = *(_QWORD *)(v21 + 64760);
        if (!v24 || v47 != *(WTF::StringImpl **)(v24 + 8))
        {
          v24 = JSC::jsStringWithCacheSlowCase();
          v22 = v47;
          goto LABEL_37;
        }
LABEL_49:
        v47 = 0;
LABEL_50:
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v22);
        else
          *(_DWORD *)v22 -= 2;
        goto LABEL_52;
      }
      v25 = (unsigned __int8 *)*((_QWORD *)v47 + 1);
      if ((*((_BYTE *)v47 + 16) & 4) != 0)
      {
        v26 = *v25;
      }
      else
      {
        v32 = *(unsigned __int16 *)v25;
        if (v32 > 0xFF)
          goto LABEL_34;
        v26 = v32;
      }
      v24 = *(_QWORD *)(v21 + 8 * v26 + 42216);
      goto LABEL_49;
    }
  }
  v24 = *(_QWORD *)(v21 + 41968);
LABEL_37:
  v47 = 0;
  if (v22)
    goto LABEL_50;
LABEL_52:
  v27 = v41;
  v41 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v22);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = v46;
  v46 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v22);
    else
      *(_DWORD *)v28 -= 2;
  }
  v29 = 0;
LABEL_59:
  ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32B54C8[v29])(&v47, &v42);
  v30 = 0;
LABEL_60:
  ((void (*)(uint64_t *, WTF::StringImpl **))off_1E32B54C8[v30])(&v42, &v44);
  return (_BYTE *)v24;
}

_BYTE *WebCore::jsMediaControlsHostPrototypeFunction_formattedStringForDuration(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  WTF::StringImpl *v12;
  double v13;
  void (**v14)(WebCore::RenderThemeIOS *__hidden);
  uint64_t v15;
  WTF::StringImpl *v16;
  int v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  unsigned int v22;
  JSValue v24;
  double v25;
  uint64_t v26;
  JSC::VM *v27;
  WTF::StringImpl *v28;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v27 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v27, "MediaControlsHost", "formattedStringForDuration");
  v6 = 16 * (*(_DWORD *)v5 & 0xFFFFFFFE);
  v7 = *(unsigned int *)(v6 + 76);
  v8 = *(_DWORD *)(v6 + 76) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSMediaControlsHost::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSMediaControlsHost::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v27, "MediaControlsHost", "formattedStringForDuration");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v24);
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
  v28 = v12;
  if ((unint64_t)v12 >= 0xFFFE000000000000)
  {
    v13 = (double)(int)v12;
  }
  else if ((unint64_t)v12 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v28, this);
    v13 = v25;
  }
  else
  {
    *(_QWORD *)&v13 = (char *)v12 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
    return 0;
  {
    v14 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
  }
  else
  {
    v26 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
    *(_OWORD *)(v26 + 40) = 0u;
    *(_OWORD *)(v26 + 24) = 0u;
    v14 = &off_1E335BC30;
    *(_QWORD *)v26 = &off_1E335BC30;
  }
  ((void (*)(WTF::StringImpl **__return_ptr, uint64_t *, double))v14[13])(&v28, &WebCore::RenderTheme::singleton(void)::theme, v13);
  v15 = *((_QWORD *)this + 7);
  v16 = v28;
  if (!v28 || (v17 = *((_DWORD *)v28 + 1)) == 0)
  {
    v18 = *(_QWORD *)(v15 + 41968);
LABEL_25:
    v28 = 0;
    if (!v16)
      return (_BYTE *)v18;
    goto LABEL_32;
  }
  if (v17 != 1)
    goto LABEL_22;
  v19 = (unsigned __int8 *)*((_QWORD *)v28 + 1);
  if ((*((_BYTE *)v28 + 16) & 4) != 0)
  {
    v20 = *v19;
LABEL_30:
    v18 = *(_QWORD *)(v15 + 8 * v20 + 42216);
    goto LABEL_31;
  }
  v22 = *(unsigned __int16 *)v19;
  if (v22 <= 0xFF)
  {
    v20 = v22;
    goto LABEL_30;
  }
LABEL_22:
  v18 = *(_QWORD *)(v15 + 64760);
  if (!v18 || v28 != *(WTF::StringImpl **)(v18 + 8))
  {
    v18 = JSC::jsStringWithCacheSlowCase();
    v16 = v28;
    goto LABEL_25;
  }
LABEL_31:
  v28 = 0;
LABEL_32:
  if (*(_DWORD *)v16 == 2)
    WTF::StringImpl::destroy(v16, v16);
  else
    *(_DWORD *)v16 -= 2;
  return (_BYTE *)v18;
}

_BYTE *WebCore::jsMediaControlsHostPrototypeFunction_showMediaControlsContextMenu(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  WebCore::Element *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  WebCore::JSDOMGlobalObject *v28;
  unsigned int v29;
  WebCore::JSVoidCallback *v30;
  WebCore::JSVoidCallback *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WebCore::JSVoidCallback *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  JSValue v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  JSC::VM *v43;
  WebCore::JSVoidCallback *v44;
  WTF::StringImpl *v45;
  int v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  int v49;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v43 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v43, "MediaControlsHost", "showMediaControlsContextMenu");
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSMediaControlsHost::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSMediaControlsHost::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v43, "MediaControlsHost", "showMediaControlsContextMenu");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v40.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v40);
  }
  v17 = *(_QWORD **)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  v48 = v9;
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_45;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSHTMLElement::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSHTMLElement::s_info && v21 != 0);
  }
  if (v20 && (v24 = *(WebCore::Element **)(v18 + 24)) != 0)
  {
    JSC::JSONStringify();
    if (*((_DWORD *)v9 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v9))
    {
      v46 = 1;
      v42 = v48;
      v48 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, v41);
        else
          *(_DWORD *)v42 -= 2;
      }
      v33 = 0;
      v37 = 1;
    }
    else
    {
      v26 = v48;
      v45 = v48;
      v46 = 0;
      v27 = *((_QWORD *)a2 + 8);
      v28 = *(WebCore::JSDOMGlobalObject **)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      v47 = (WTF::StringImpl *)*((_QWORD *)this + 7);
      if ((v27 & 0xFFFE000000000002) == 0
        && (v29 = *(unsigned __int8 *)(v27 + 5), v29 >= 0x17)
        && ((v29 & 0xFE) == 0x1A
         || (*(_BYTE *)(v27 + 6) & 4) != 0
         && ((*(void (**)(WTF::StringImpl **__return_ptr, unint64_t))(16
                                                                                      * *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C)
                                                                                      + 0x38))(&v48, v27), (_BYTE)v48)))
      {
        v30 = (WebCore::JSVoidCallback *)WTF::fastMalloc((WTF *)0x20);
        v31 = WebCore::JSVoidCallback::JSVoidCallback(v30, v27, v28);
        v49 = 0;
        v44 = v31;
        v45 = 0;
        v47 = v26;
        v48 = 0;
        if (WebCore::MediaControlsHost::showMediaControlsContextMenu(v17, v24, (uint64_t)&v47, (uint64_t *)&v44))v33 = 7;
        else
          v33 = 6;
        v34 = v44;
        v44 = 0;
        if (v34)
        {
          if (*((_DWORD *)v34 + 4) == 1)
            (*(void (**)(WebCore::JSVoidCallback *))(*(_QWORD *)v34 + 16))(v34);
          else
            --*((_DWORD *)v34 + 4);
        }
        v35 = v47;
        v47 = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
            WTF::StringImpl::destroy(v35, v32);
          else
            *(_DWORD *)v35 -= 2;
        }
        v36 = 0;
      }
      else
      {
        WebCore::throwArgumentMustBeFunctionError((uint64_t)this, (uint64_t)&v47, 2, "callback", 9, "MediaControlsHost", 18, v25, "showMediaControlsContextMenu", 29);
        v33 = 0;
        v36 = 1;
        v49 = 1;
      }
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32B54B8[v36])(&v47, &v48);
      v37 = 0;
    }
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32B54C8[v37])(&v48, &v45);
  }
  else
  {
LABEL_45:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v48, 0, "target", 7, "MediaControlsHost", 18, a8, "showMediaControlsContextMenu", 29, "HTMLElement", 12);
    return 0;
  }
  return (_BYTE *)v33;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9TextTrackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_10AudioTrackENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9TextTrackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_10AudioTrackENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9TextTrackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_10AudioTrackENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore9TextTrackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_10AudioTrackENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore9TextTrackENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_10AudioTrackENSD_ISI_EENSF_ISI_EEEEEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSM_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E32B5478[v3])(&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalINS_7variantIJN3WTF6RefPtrIN7WebCore9TextTrackENSA_12RawPtrTraitsISD_EENSA_21DefaultRefDerefTraitsISD_EEEENSB_INSC_10AudioTrackENSE_ISJ_EENSG_ISJ_EEEEEEEEENSC_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSR_1EJSO_SP_EEEEEEDcST_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  if (*(_BYTE *)(a2 + 16))
  {
    v3 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E32B5478[v3])(&v5, a2);
    *(_DWORD *)(a2 + 8) = -1;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18AudioConfigurationENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18VideoConfigurationENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_BYTE *WebCore::jsMediaDeviceInfoPrototypeFunction_toJSON(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unsigned __int8 *v37;
  unsigned int v38;
  unsigned __int8 *v39;
  unsigned int v40;
  unsigned __int8 *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t SlowCase;
  uint64_t v48;
  WTF::StringImpl *v49;
  unint64_t v50;
  int v51;
  int v52;
  uint64_t v53;

  v4 = *((_QWORD *)a2 + 5);
  v5 = *((_QWORD *)this + 7);
  v48 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v48, "MediaDeviceInfo", "toJSON");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMediaDeviceInfo::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMediaDeviceInfo::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v48, "MediaDeviceInfo", "toJSON");
  v11 = *(_QWORD *)(v4 + 24);
  v12 = *(_QWORD *)(v5 + 15056);
  if (v12)
  {
    v13 = *(unsigned int *)(v12 + 60);
    v14 = *(_QWORD *)(v12 + 24);
    if (v14 < *(_QWORD *)(v12 + 32))
    {
LABEL_14:
      *(_QWORD *)(v12 + 24) = v14 + v13;
      goto LABEL_15;
    }
    v14 = *(_QWORD *)(v12 + 40);
    if ((v14 & 1) == 0)
    {
      v46 = *(_QWORD *)(v14 + 8) ^ *(_QWORD *)(v12 + 48);
      *(_QWORD *)(v12 + 32) = v14 + HIDWORD(v46);
      *(_QWORD *)(v12 + 40) = v14 + (int)v46;
      goto LABEL_14;
    }
    JSC::sanitizeStackForVM();
    SlowCase = JSC::LocalAllocator::allocateSlowCase();
  }
  else
  {
    SlowCase = JSC::CompleteSubspace::allocateSlow();
  }
  v14 = SlowCase;
LABEL_15:
  *(_DWORD *)v14 = 0;
  *(_DWORD *)v14 = *((_DWORD *)this + 212);
  *(_DWORD *)(v14 + 4) = 16783360;
  *(_OWORD *)(v14 + 8) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_QWORD *)(v14 + 56) = 0;
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  v15 = *((_QWORD *)this + 7);
  v16 = *(_QWORD *)(v11 + 32);
  if (!v16 || (v17 = *(_DWORD *)(v16 + 4)) == 0)
  {
    v18 = *(_QWORD *)(v15 + 41968);
    goto LABEL_23;
  }
  if (v17 != 1)
    goto LABEL_20;
  v37 = *(unsigned __int8 **)(v16 + 8);
  if ((*(_BYTE *)(v16 + 16) & 4) != 0)
  {
    v38 = *v37;
LABEL_61:
    v18 = *(_QWORD *)(v15 + 8 * v38 + 42216);
    goto LABEL_23;
  }
  v43 = *(unsigned __int16 *)v37;
  if (v43 <= 0xFF)
  {
    v38 = v43;
    goto LABEL_61;
  }
LABEL_20:
  v18 = *(_QWORD *)(v15 + 64760);
  if (!v18 || v16 != *(_QWORD *)(v18 + 8))
    v18 = JSC::jsStringWithCacheSlowCase();
LABEL_23:
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v19 = v49;
  v49 = 0;
  v50 = v14;
  v51 = -1;
  v52 = 0x1000000;
  v53 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v14, (JSC::VM *)v5, (unint64_t)v19, v18, 0, (uint64_t)&v49);
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v20);
    else
      *(_DWORD *)v19 -= 2;
  }
  v21 = WebCore::convertEnumerationToJS<WebCore::MediaDeviceInfo::Kind>(*((_QWORD *)this + 7), (WTF::StringImpl *)*(unsigned int *)(v11 + 48));
  if (*(_DWORD *)(v5 + 80))
  {
    if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
      return 0;
  }
  WTF::AtomStringImpl::addLiteral();
  v22 = v49;
  v49 = 0;
  v50 = v14;
  v51 = -1;
  v52 = 0x1000000;
  v53 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v14, (JSC::VM *)v5, (unint64_t)v22, v21, 0, (uint64_t)&v49);
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v23);
    else
      *(_DWORD *)v22 -= 2;
  }
  v24 = *((_QWORD *)this + 7);
  v25 = *(_QWORD *)(v11 + 24);
  if (!v25 || (v26 = *(_DWORD *)(v25 + 4)) == 0)
  {
    v27 = *(_QWORD *)(v24 + 41968);
    goto LABEL_37;
  }
  if (v26 == 1)
  {
    v39 = *(unsigned __int8 **)(v25 + 8);
    if ((*(_BYTE *)(v25 + 16) & 4) != 0)
    {
      v40 = *v39;
    }
    else
    {
      v44 = *(unsigned __int16 *)v39;
      if (v44 > 0xFF)
        goto LABEL_34;
      v40 = v44;
    }
    v27 = *(_QWORD *)(v24 + 8 * v40 + 42216);
    goto LABEL_37;
  }
LABEL_34:
  v27 = *(_QWORD *)(v24 + 64760);
  if (!v27 || v25 != *(_QWORD *)(v27 + 8))
    v27 = JSC::jsStringWithCacheSlowCase();
LABEL_37:
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v28 = v49;
  v49 = 0;
  v50 = v14;
  v51 = -1;
  v52 = 0x1000000;
  v53 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v14, (JSC::VM *)v5, (unint64_t)v28, v27, 0, (uint64_t)&v49);
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v29);
    else
      *(_DWORD *)v28 -= 2;
  }
  v30 = *((_QWORD *)this + 7);
  v31 = *(_QWORD *)(v11 + 40);
  if (v31 && (v32 = *(_DWORD *)(v31 + 4)) != 0)
  {
    if (v32 != 1)
    {
LABEL_44:
      v33 = *(_QWORD *)(v30 + 64760);
      if (!v33 || v31 != *(_QWORD *)(v33 + 8))
        v33 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_47;
    }
    v41 = *(unsigned __int8 **)(v31 + 8);
    if ((*(_BYTE *)(v31 + 16) & 4) != 0)
    {
      v42 = *v41;
    }
    else
    {
      v45 = *(unsigned __int16 *)v41;
      if (v45 > 0xFF)
        goto LABEL_44;
      v42 = v45;
    }
    v33 = *(_QWORD *)(v30 + 8 * v42 + 42216);
  }
  else
  {
    v33 = *(_QWORD *)(v30 + 41968);
  }
LABEL_47:
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v34 = v49;
  v49 = 0;
  v50 = v14;
  v51 = -1;
  v52 = 0x1000000;
  v53 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v14, (JSC::VM *)v5, (unint64_t)v34, v33, 0, (uint64_t)&v49);
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v35);
    else
      *(_DWORD *)v34 -= 2;
  }
  return (_BYTE *)v14;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJbN7WebCore21MediaTrackConstraintsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJbS9_EEEEEEDcSD_DpT0_(int a1, WebCore::MediaTrackConstraints *this)
{
  WebCore::MediaTrackConstraints::~MediaTrackConstraints(this, this);
}

void WebCore::MediaTrackConstraints::~MediaTrackConstraints(WebCore::MediaTrackConstraints *this, void *a2)
{
  unsigned int v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;

  if (*((_BYTE *)this + 1064))
  {
    v3 = *((_DWORD *)this + 265);
    if (v3)
      WTF::VectorDestructor<true,WebCore::MediaTrackConstraintSet>::destruct(*((_QWORD *)this + 131), *((_QWORD *)this + 131) + 1048 * v3);
    v4 = (WTF *)*((_QWORD *)this + 131);
    if (v4)
    {
      *((_QWORD *)this + 131) = 0;
      *((_DWORD *)this + 264) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  if (*((_BYTE *)this + 904))
  {
    v5 = *((unsigned int *)this + 224);
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, char *))off_1E32B55F8[v5])(&v10, (char *)this + 832);
    *((_DWORD *)this + 224) = -1;
  }
  if (*((_BYTE *)this + 800))
  {
    v6 = *((unsigned int *)this + 198);
    if ((_DWORD)v6 != -1)
      ((void (*)(char *, char *))off_1E32B55F8[v6])(&v11, (char *)this + 728);
    *((_DWORD *)this + 198) = -1;
  }
  if (*((_BYTE *)this + 712))
  {
    v7 = *((unsigned int *)this + 176);
    if ((_DWORD)v7 != -1)
      ((void (*)(char *, char *))off_1E32B55F8[v7])(&v12, (char *)this + 640);
    *((_DWORD *)this + 176) = -1;
  }
  if (*((_BYTE *)this + 624))
  {
    v8 = *((unsigned int *)this + 154);
    if ((_DWORD)v8 != -1)
      ((void (*)(char *, char *))off_1E32B55F8[v8])(&v13, (char *)this + 552);
    *((_DWORD *)this + 154) = -1;
  }
  if (*((_BYTE *)this + 344))
  {
    v9 = *((unsigned int *)this + 84);
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, char *))off_1E32B55F8[v9])(&v14, (char *)this + 272);
    *((_DWORD *)this + 84) = -1;
  }
}

uint64_t WTF::VectorDestructor<true,WebCore::MediaTrackConstraintSet>::destruct(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  if (result != a2)
  {
    v16 = v2;
    v17 = v3;
    v5 = result;
    do
    {
      if (*(_BYTE *)(v5 + 904))
      {
        v6 = *(unsigned int *)(v5 + 896);
        if ((_DWORD)v6 != -1)
          result = ((uint64_t (*)(char *, uint64_t))off_1E32B55F8[v6])(&v11, v5 + 832);
        *(_DWORD *)(v5 + 896) = -1;
      }
      if (*(_BYTE *)(v5 + 800))
      {
        v7 = *(unsigned int *)(v5 + 792);
        if ((_DWORD)v7 != -1)
          result = ((uint64_t (*)(char *, uint64_t))off_1E32B55F8[v7])(&v12, v5 + 728);
        *(_DWORD *)(v5 + 792) = -1;
      }
      if (*(_BYTE *)(v5 + 712))
      {
        v8 = *(unsigned int *)(v5 + 704);
        if ((_DWORD)v8 != -1)
          result = ((uint64_t (*)(char *, uint64_t))off_1E32B55F8[v8])(&v13, v5 + 640);
        *(_DWORD *)(v5 + 704) = -1;
      }
      if (*(_BYTE *)(v5 + 624))
      {
        v9 = *(unsigned int *)(v5 + 616);
        if ((_DWORD)v9 != -1)
          result = ((uint64_t (*)(char *, uint64_t))off_1E32B55F8[v9])(&v14, v5 + 552);
        *(_DWORD *)(v5 + 616) = -1;
      }
      if (*(_BYTE *)(v5 + 344))
      {
        v10 = *(unsigned int *)(v5 + 336);
        if ((_DWORD)v10 != -1)
          result = ((uint64_t (*)(char *, uint64_t))off_1E32B55F8[v10])(&v15, v5 + 272);
        *(_DWORD *)(v5 + 336) = -1;
      }
      v5 += 1048;
    }
    while (v5 != a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore28ConstrainDOMStringParametersEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJS9_SD_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore28ConstrainDOMStringParametersEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJS9_SD_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *result;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v5 = *(WTF::StringImpl ***)a2;
    v6 = 8 * v3;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore28ConstrainDOMStringParametersEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJS9_SD_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  char v7;

  if (*(_BYTE *)(a2 + 56))
  {
    v3 = *(unsigned int *)(a2 + 48);
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E32B5610[v3])(&v6, a2 + 32);
    *(_DWORD *)(a2 + 48) = -1;
  }
  if (*(_BYTE *)(a2 + 24))
  {
    v5 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v5 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E32B5610[v5])(&v7, a2);
    *(_DWORD *)(a2 + 16) = -1;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJbN7WebCore21MediaTrackConstraintsEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJbS9_EEEOSP_EEEDcSH_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJbN7WebCore21MediaTrackConstraintsEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJbS9_EEEOSP_EEEDcSH_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  result = WebCore::MediaTrackConstraintSet::MediaTrackConstraintSet(a2, a3);
  *(_BYTE *)(result + 1048) = 0;
  *(_BYTE *)(result + 1064) = 0;
  if (*(_BYTE *)(a3 + 1064))
  {
    *(_QWORD *)(result + 1048) = 0;
    *(_QWORD *)(result + 1056) = 0;
    v5 = *(_QWORD *)(a3 + 1048);
    *(_QWORD *)(a3 + 1048) = 0;
    *(_QWORD *)(result + 1048) = v5;
    LODWORD(v5) = *(_DWORD *)(a3 + 1056);
    *(_DWORD *)(a3 + 1056) = 0;
    *(_DWORD *)(result + 1056) = v5;
    LODWORD(v5) = *(_DWORD *)(a3 + 1060);
    *(_DWORD *)(a3 + 1060) = 0;
    *(_DWORD *)(result + 1060) = v5;
    *(_BYTE *)(result + 1064) = 1;
  }
  return result;
}

uint64_t WebCore::MediaTrackConstraintSet::MediaTrackConstraintSet(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;

  memcpy((void *)a1, (const void *)a2, 0x101uLL);
  *(_BYTE *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 344) = 0;
  if (*(_BYTE *)(a2 + 344))
  {
    *(_BYTE *)(a1 + 272) = 0;
    *(_DWORD *)(a1 + 336) = -1;
    v4 = *(unsigned int *)(a2 + 336);
    if ((_DWORD)v4 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E32B5630[v4])(&v25, a1 + 272, a2 + 272);
      *(_DWORD *)(a1 + 336) = v4;
    }
    *(_BYTE *)(a1 + 344) = 1;
  }
  v5 = *(_OWORD *)(a2 + 352);
  v6 = *(_OWORD *)(a2 + 368);
  v7 = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 400) = v7;
  *(_OWORD *)(a1 + 352) = v5;
  *(_OWORD *)(a1 + 368) = v6;
  v8 = *(_OWORD *)(a2 + 416);
  v9 = *(_OWORD *)(a2 + 432);
  v10 = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 464) = v10;
  *(_OWORD *)(a1 + 416) = v8;
  *(_OWORD *)(a1 + 432) = v9;
  v11 = *(_OWORD *)(a2 + 480);
  v12 = *(_OWORD *)(a2 + 496);
  v13 = *(_OWORD *)(a2 + 512);
  *(_OWORD *)(a1 + 525) = *(_OWORD *)(a2 + 525);
  *(_OWORD *)(a1 + 496) = v12;
  *(_OWORD *)(a1 + 512) = v13;
  *(_OWORD *)(a1 + 480) = v11;
  *(_BYTE *)(a1 + 544) = 0;
  *(_BYTE *)(a1 + 624) = 0;
  if (*(_BYTE *)(a2 + 624))
  {
    *(_BYTE *)(a1 + 552) = 0;
    *(_DWORD *)(a1 + 616) = -1;
    v14 = *(unsigned int *)(a2 + 616);
    if ((_DWORD)v14 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E32B5630[v14])(&v26, a1 + 552, a2 + 552);
      *(_DWORD *)(a1 + 616) = v14;
    }
    *(_BYTE *)(a1 + 624) = 1;
  }
  *(_BYTE *)(a1 + 632) = 0;
  *(_BYTE *)(a1 + 712) = 0;
  if (*(_BYTE *)(a2 + 712))
  {
    *(_BYTE *)(a1 + 640) = 0;
    *(_DWORD *)(a1 + 704) = -1;
    v15 = *(unsigned int *)(a2 + 704);
    if ((_DWORD)v15 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E32B5630[v15])(&v27, a1 + 640, a2 + 640);
      *(_DWORD *)(a1 + 704) = v15;
    }
    *(_BYTE *)(a1 + 712) = 1;
  }
  *(_BYTE *)(a1 + 720) = 0;
  *(_BYTE *)(a1 + 800) = 0;
  if (*(_BYTE *)(a2 + 800))
  {
    *(_BYTE *)(a1 + 728) = 0;
    *(_DWORD *)(a1 + 792) = -1;
    v16 = *(unsigned int *)(a2 + 792);
    if ((_DWORD)v16 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E32B5630[v16])(&v28, a1 + 728, a2 + 728);
      *(_DWORD *)(a1 + 792) = v16;
    }
    *(_BYTE *)(a1 + 800) = 1;
  }
  *(_OWORD *)(a1 + 808) = *(_OWORD *)(a2 + 808);
  *(_BYTE *)(a1 + 824) = 0;
  *(_BYTE *)(a1 + 904) = 0;
  if (*(_BYTE *)(a2 + 904))
  {
    *(_BYTE *)(a1 + 832) = 0;
    *(_DWORD *)(a1 + 896) = -1;
    v17 = *(unsigned int *)(a2 + 896);
    if ((_DWORD)v17 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E32B5630[v17])(&v29, a1 + 832, a2 + 832);
      *(_DWORD *)(a1 + 896) = v17;
    }
    *(_BYTE *)(a1 + 904) = 1;
  }
  *(_OWORD *)(a1 + 912) = *(_OWORD *)(a2 + 912);
  v18 = *(_OWORD *)(a2 + 928);
  v19 = *(_OWORD *)(a2 + 944);
  v20 = *(_OWORD *)(a2 + 976);
  *(_OWORD *)(a1 + 960) = *(_OWORD *)(a2 + 960);
  *(_OWORD *)(a1 + 976) = v20;
  *(_OWORD *)(a1 + 928) = v18;
  *(_OWORD *)(a1 + 944) = v19;
  v21 = *(_OWORD *)(a2 + 992);
  v22 = *(_OWORD *)(a2 + 1008);
  v23 = *(_OWORD *)(a2 + 1024);
  *(_QWORD *)(a1 + 1037) = *(_QWORD *)(a2 + 1037);
  *(_OWORD *)(a1 + 1008) = v22;
  *(_OWORD *)(a1 + 1024) = v23;
  *(_OWORD *)(a1 + 992) = v21;
  return a1;
}

{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;

  memcpy((void *)a1, (const void *)a2, 0x101uLL);
  *(_BYTE *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 344) = 0;
  if (*(_BYTE *)(a2 + 344))
  {
    *(_BYTE *)(a1 + 272) = 0;
    *(_DWORD *)(a1 + 336) = -1;
    v4 = *(unsigned int *)(a2 + 336);
    if ((_DWORD)v4 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E32C3138[v4])(&v25, a1 + 272, a2 + 272);
      *(_DWORD *)(a1 + 336) = v4;
    }
    *(_BYTE *)(a1 + 344) = 1;
  }
  v5 = *(_OWORD *)(a2 + 352);
  v6 = *(_OWORD *)(a2 + 368);
  v7 = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 400) = v7;
  *(_OWORD *)(a1 + 352) = v5;
  *(_OWORD *)(a1 + 368) = v6;
  v8 = *(_OWORD *)(a2 + 416);
  v9 = *(_OWORD *)(a2 + 432);
  v10 = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 464) = v10;
  *(_OWORD *)(a1 + 416) = v8;
  *(_OWORD *)(a1 + 432) = v9;
  v11 = *(_OWORD *)(a2 + 480);
  v12 = *(_OWORD *)(a2 + 496);
  v13 = *(_OWORD *)(a2 + 512);
  *(_OWORD *)(a1 + 525) = *(_OWORD *)(a2 + 525);
  *(_OWORD *)(a1 + 496) = v12;
  *(_OWORD *)(a1 + 512) = v13;
  *(_OWORD *)(a1 + 480) = v11;
  *(_BYTE *)(a1 + 544) = 0;
  *(_BYTE *)(a1 + 624) = 0;
  if (*(_BYTE *)(a2 + 624))
  {
    *(_BYTE *)(a1 + 552) = 0;
    *(_DWORD *)(a1 + 616) = -1;
    v14 = *(unsigned int *)(a2 + 616);
    if ((_DWORD)v14 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E32C3138[v14])(&v26, a1 + 552, a2 + 552);
      *(_DWORD *)(a1 + 616) = v14;
    }
    *(_BYTE *)(a1 + 624) = 1;
  }
  *(_BYTE *)(a1 + 632) = 0;
  *(_BYTE *)(a1 + 712) = 0;
  if (*(_BYTE *)(a2 + 712))
  {
    *(_BYTE *)(a1 + 640) = 0;
    *(_DWORD *)(a1 + 704) = -1;
    v15 = *(unsigned int *)(a2 + 704);
    if ((_DWORD)v15 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E32C3138[v15])(&v27, a1 + 640, a2 + 640);
      *(_DWORD *)(a1 + 704) = v15;
    }
    *(_BYTE *)(a1 + 712) = 1;
  }
  *(_BYTE *)(a1 + 720) = 0;
  *(_BYTE *)(a1 + 800) = 0;
  if (*(_BYTE *)(a2 + 800))
  {
    *(_BYTE *)(a1 + 728) = 0;
    *(_DWORD *)(a1 + 792) = -1;
    v16 = *(unsigned int *)(a2 + 792);
    if ((_DWORD)v16 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E32C3138[v16])(&v28, a1 + 728, a2 + 728);
      *(_DWORD *)(a1 + 792) = v16;
    }
    *(_BYTE *)(a1 + 800) = 1;
  }
  *(_OWORD *)(a1 + 808) = *(_OWORD *)(a2 + 808);
  *(_BYTE *)(a1 + 824) = 0;
  *(_BYTE *)(a1 + 904) = 0;
  if (*(_BYTE *)(a2 + 904))
  {
    *(_BYTE *)(a1 + 832) = 0;
    *(_DWORD *)(a1 + 896) = -1;
    v17 = *(unsigned int *)(a2 + 896);
    if ((_DWORD)v17 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E32C3138[v17])(&v29, a1 + 832, a2 + 832);
      *(_DWORD *)(a1 + 896) = v17;
    }
    *(_BYTE *)(a1 + 904) = 1;
  }
  *(_OWORD *)(a1 + 912) = *(_OWORD *)(a2 + 912);
  v18 = *(_OWORD *)(a2 + 928);
  v19 = *(_OWORD *)(a2 + 944);
  v20 = *(_OWORD *)(a2 + 976);
  *(_OWORD *)(a1 + 960) = *(_OWORD *)(a2 + 960);
  *(_OWORD *)(a1 + 976) = v20;
  *(_OWORD *)(a1 + 928) = v18;
  *(_OWORD *)(a1 + 944) = v19;
  v21 = *(_OWORD *)(a2 + 992);
  v22 = *(_OWORD *)(a2 + 1008);
  v23 = *(_OWORD *)(a2 + 1024);
  *(_QWORD *)(a1 + 1037) = *(_QWORD *)(a2 + 1037);
  *(_OWORD *)(a1 + 1008) = v22;
  *(_OWORD *)(a1 + 1024) = v23;
  *(_OWORD *)(a1 + 992) = v21;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore28ConstrainDOMStringParametersEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS9_SD_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore28ConstrainDOMStringParametersEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS9_SD_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore28ConstrainDOMStringParametersEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS9_SD_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  char v9;

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (*(_BYTE *)(a3 + 24))
  {
    *(_DWORD *)(a2 + 16) = -1;
    v5 = *(unsigned int *)(a3 + 16);
    if ((_DWORD)v5 != -1)
    {
      result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E32B5648[v5])(&v8, a2, a3);
      *(_DWORD *)(a2 + 16) = v5;
    }
    *(_BYTE *)(a2 + 24) = 1;
  }
  *(_BYTE *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 56) = 0;
  if (*(_BYTE *)(a3 + 56))
  {
    *(_DWORD *)(a2 + 48) = -1;
    v7 = *(unsigned int *)(a3 + 48);
    if ((_DWORD)v7 != -1)
    {
      result = ((uint64_t (*)(char *))off_1E32B5648[v7])(&v9);
      *(_DWORD *)(a2 + 48) = v7;
    }
    *(_BYTE *)(a2 + 56) = 1;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJbN7WebCore21MediaTrackConstraintsEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISA_LNS0_6_TraitE1EEEEEvOT_EUlRSG_OT0_E_JRNS0_6__baseILSE_1EJbS9_EEEOSO_EEEDcSG_DpT0_(uint64_t result, _BYTE *a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 1072);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))*(&off_1E32B55E8 + v5))(&v6, v4);
  }
  *(_BYTE *)v4 = *a3;
  *(_DWORD *)(v4 + 1072) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJbN7WebCore21MediaTrackConstraintsEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISA_LNS0_6_TraitE1EEEEEvOT_EUlRSG_OT0_E_JRNS0_6__baseILSE_1EJbS9_EEEOSO_EEEDcSG_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  char v9;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 1072);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      WebCore::MediaTrackConstraintSet::operator=(a2, a3);
      return std::__optional_storage_base<WTF::Vector<WebCore::MediaTrackConstraintSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<WebCore::MediaTrackConstraintSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>(a2 + 1048, (uint64_t *)(a3 + 1048));
    }
    ((void (*)(char *, uint64_t))*(&off_1E32B55E8 + v5))(&v9, v4);
  }
  *(_DWORD *)(v4 + 1072) = -1;
  result = WebCore::MediaTrackConstraintSet::MediaTrackConstraintSet(v4, a3);
  *(_BYTE *)(v4 + 1048) = 0;
  *(_BYTE *)(v4 + 1064) = 0;
  if (*(_BYTE *)(a3 + 1064))
  {
    *(_QWORD *)(v4 + 1048) = 0;
    *(_QWORD *)(v4 + 1056) = 0;
    v8 = *(_QWORD *)(a3 + 1048);
    *(_QWORD *)(a3 + 1048) = 0;
    *(_QWORD *)(v4 + 1048) = v8;
    LODWORD(v8) = *(_DWORD *)(a3 + 1056);
    *(_DWORD *)(a3 + 1056) = 0;
    *(_DWORD *)(v4 + 1056) = v8;
    LODWORD(v8) = *(_DWORD *)(a3 + 1060);
    *(_DWORD *)(a3 + 1060) = 0;
    *(_DWORD *)(v4 + 1060) = v8;
    *(_BYTE *)(v4 + 1064) = 1;
  }
  *(_DWORD *)(v4 + 1072) = 1;
  return result;
}

uint64_t WebCore::MediaTrackConstraintSet::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v41;

  memcpy((void *)a1, (const void *)a2, 0x101uLL);
  if (*(unsigned __int8 *)(a1 + 344) == *(unsigned __int8 *)(a2 + 344))
  {
    if (!*(_BYTE *)(a1 + 344))
      goto LABEL_15;
    v4 = *(unsigned int *)(a1 + 336);
    v5 = *(unsigned int *)(a2 + 336);
    if ((_DWORD)v4 == -1)
    {
      if ((_DWORD)v5 == -1)
        goto LABEL_15;
    }
    else if ((_DWORD)v5 == -1)
    {
      ((void (*)(uint64_t *, uint64_t))off_1E32B55F8[v4])(&v41, a1 + 272);
      *(_DWORD *)(a1 + 336) = -1;
      goto LABEL_15;
    }
    v41 = a1 + 272;
    ((void (*)(uint64_t *))off_1E32B5668[v5])(&v41);
  }
  else if (*(_BYTE *)(a1 + 344))
  {
    v6 = *(unsigned int *)(a1 + 336);
    if ((_DWORD)v6 != -1)
      ((void (*)(uint64_t *, uint64_t))off_1E32B55F8[v6])(&v41, a1 + 272);
    *(_DWORD *)(a1 + 336) = -1;
    *(_BYTE *)(a1 + 344) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 272) = 0;
    *(_DWORD *)(a1 + 336) = -1;
    v7 = *(unsigned int *)(a2 + 336);
    if ((_DWORD)v7 != -1)
    {
      ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E32B5630[v7])(&v41, a1 + 272, a2 + 272);
      *(_DWORD *)(a1 + 336) = v7;
    }
    *(_BYTE *)(a1 + 344) = 1;
  }
LABEL_15:
  v8 = *(_OWORD *)(a2 + 352);
  v9 = *(_OWORD *)(a2 + 368);
  v10 = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 400) = v10;
  *(_OWORD *)(a1 + 352) = v8;
  *(_OWORD *)(a1 + 368) = v9;
  v11 = *(_OWORD *)(a2 + 416);
  v12 = *(_OWORD *)(a2 + 432);
  v13 = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 464) = v13;
  *(_OWORD *)(a1 + 416) = v11;
  *(_OWORD *)(a1 + 432) = v12;
  v14 = *(_OWORD *)(a2 + 480);
  v15 = *(_OWORD *)(a2 + 496);
  v16 = *(_OWORD *)(a2 + 512);
  *(_OWORD *)(a1 + 525) = *(_OWORD *)(a2 + 525);
  *(_OWORD *)(a1 + 496) = v15;
  *(_OWORD *)(a1 + 512) = v16;
  *(_OWORD *)(a1 + 480) = v14;
  if (*(unsigned __int8 *)(a1 + 624) == *(unsigned __int8 *)(a2 + 624))
  {
    if (!*(_BYTE *)(a1 + 624))
      goto LABEL_29;
    v17 = *(unsigned int *)(a1 + 616);
    v18 = *(unsigned int *)(a2 + 616);
    if ((_DWORD)v17 == -1)
    {
      if ((_DWORD)v18 == -1)
        goto LABEL_29;
    }
    else if ((_DWORD)v18 == -1)
    {
      ((void (*)(uint64_t *, uint64_t))off_1E32B55F8[v17])(&v41, a1 + 552);
      *(_DWORD *)(a1 + 616) = -1;
      goto LABEL_29;
    }
    v41 = a1 + 552;
    ((void (*)(uint64_t *))off_1E32B5668[v18])(&v41);
  }
  else if (*(_BYTE *)(a1 + 624))
  {
    v19 = *(unsigned int *)(a1 + 616);
    if ((_DWORD)v19 != -1)
      ((void (*)(uint64_t *, uint64_t))off_1E32B55F8[v19])(&v41, a1 + 552);
    *(_DWORD *)(a1 + 616) = -1;
    *(_BYTE *)(a1 + 624) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 552) = 0;
    *(_DWORD *)(a1 + 616) = -1;
    v20 = *(unsigned int *)(a2 + 616);
    if ((_DWORD)v20 != -1)
    {
      ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E32B5630[v20])(&v41, a1 + 552, a2 + 552);
      *(_DWORD *)(a1 + 616) = v20;
    }
    *(_BYTE *)(a1 + 624) = 1;
  }
LABEL_29:
  if (*(unsigned __int8 *)(a1 + 712) == *(unsigned __int8 *)(a2 + 712))
  {
    if (!*(_BYTE *)(a1 + 712))
      goto LABEL_43;
    v21 = *(unsigned int *)(a1 + 704);
    v22 = *(unsigned int *)(a2 + 704);
    if ((_DWORD)v21 == -1)
    {
      if ((_DWORD)v22 == -1)
        goto LABEL_43;
    }
    else if ((_DWORD)v22 == -1)
    {
      ((void (*)(uint64_t *, uint64_t))off_1E32B55F8[v21])(&v41, a1 + 640);
      *(_DWORD *)(a1 + 704) = -1;
      goto LABEL_43;
    }
    v41 = a1 + 640;
    ((void (*)(uint64_t *))off_1E32B5668[v22])(&v41);
  }
  else if (*(_BYTE *)(a1 + 712))
  {
    v23 = *(unsigned int *)(a1 + 704);
    if ((_DWORD)v23 != -1)
      ((void (*)(uint64_t *, uint64_t))off_1E32B55F8[v23])(&v41, a1 + 640);
    *(_DWORD *)(a1 + 704) = -1;
    *(_BYTE *)(a1 + 712) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 640) = 0;
    *(_DWORD *)(a1 + 704) = -1;
    v24 = *(unsigned int *)(a2 + 704);
    if ((_DWORD)v24 != -1)
    {
      ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E32B5630[v24])(&v41, a1 + 640, a2 + 640);
      *(_DWORD *)(a1 + 704) = v24;
    }
    *(_BYTE *)(a1 + 712) = 1;
  }
LABEL_43:
  if (*(unsigned __int8 *)(a1 + 800) == *(unsigned __int8 *)(a2 + 800))
  {
    if (!*(_BYTE *)(a1 + 800))
      goto LABEL_57;
    v25 = *(unsigned int *)(a1 + 792);
    v26 = *(unsigned int *)(a2 + 792);
    if ((_DWORD)v25 == -1)
    {
      if ((_DWORD)v26 == -1)
        goto LABEL_57;
    }
    else if ((_DWORD)v26 == -1)
    {
      ((void (*)(uint64_t *, uint64_t))off_1E32B55F8[v25])(&v41, a1 + 728);
      *(_DWORD *)(a1 + 792) = -1;
      goto LABEL_57;
    }
    v41 = a1 + 728;
    ((void (*)(uint64_t *))off_1E32B5668[v26])(&v41);
  }
  else if (*(_BYTE *)(a1 + 800))
  {
    v27 = *(unsigned int *)(a1 + 792);
    if ((_DWORD)v27 != -1)
      ((void (*)(uint64_t *, uint64_t))off_1E32B55F8[v27])(&v41, a1 + 728);
    *(_DWORD *)(a1 + 792) = -1;
    *(_BYTE *)(a1 + 800) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 728) = 0;
    *(_DWORD *)(a1 + 792) = -1;
    v28 = *(unsigned int *)(a2 + 792);
    if ((_DWORD)v28 != -1)
    {
      ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E32B5630[v28])(&v41, a1 + 728, a2 + 728);
      *(_DWORD *)(a1 + 792) = v28;
    }
    *(_BYTE *)(a1 + 800) = 1;
  }
LABEL_57:
  v29 = *(_QWORD *)(a2 + 808);
  *(_QWORD *)(a1 + 813) = *(_QWORD *)(a2 + 813);
  *(_QWORD *)(a1 + 808) = v29;
  if (*(unsigned __int8 *)(a1 + 904) == *(unsigned __int8 *)(a2 + 904))
  {
    if (*(_BYTE *)(a1 + 904))
    {
      v30 = *(unsigned int *)(a1 + 896);
      v31 = *(unsigned int *)(a2 + 896);
      if ((_DWORD)v30 == -1)
      {
        if ((_DWORD)v31 == -1)
          goto LABEL_71;
      }
      else if ((_DWORD)v31 == -1)
      {
        ((void (*)(uint64_t *, uint64_t))off_1E32B55F8[v30])(&v41, a1 + 832);
        *(_DWORD *)(a1 + 896) = -1;
        goto LABEL_71;
      }
      v41 = a1 + 832;
      ((void (*)(uint64_t *))off_1E32B5668[v31])(&v41);
    }
  }
  else if (*(_BYTE *)(a1 + 904))
  {
    v32 = *(unsigned int *)(a1 + 896);
    if ((_DWORD)v32 != -1)
      ((void (*)(uint64_t *, uint64_t))off_1E32B55F8[v32])(&v41, a1 + 832);
    *(_DWORD *)(a1 + 896) = -1;
    *(_BYTE *)(a1 + 904) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 832) = 0;
    *(_DWORD *)(a1 + 896) = -1;
    v33 = *(unsigned int *)(a2 + 896);
    if ((_DWORD)v33 != -1)
    {
      ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E32B5630[v33])(&v41, a1 + 832, a2 + 832);
      *(_DWORD *)(a1 + 896) = v33;
    }
    *(_BYTE *)(a1 + 904) = 1;
  }
LABEL_71:
  *(_OWORD *)(a1 + 912) = *(_OWORD *)(a2 + 912);
  v34 = *(_OWORD *)(a2 + 928);
  v35 = *(_OWORD *)(a2 + 944);
  v36 = *(_OWORD *)(a2 + 976);
  *(_OWORD *)(a1 + 960) = *(_OWORD *)(a2 + 960);
  *(_OWORD *)(a1 + 976) = v36;
  *(_OWORD *)(a1 + 928) = v34;
  *(_OWORD *)(a1 + 944) = v35;
  v37 = *(_OWORD *)(a2 + 992);
  v38 = *(_OWORD *)(a2 + 1008);
  v39 = *(_OWORD *)(a2 + 1024);
  *(_QWORD *)(a1 + 1037) = *(_QWORD *)(a2 + 1037);
  *(_OWORD *)(a1 + 1008) = v38;
  *(_OWORD *)(a1 + 1024) = v39;
  *(_OWORD *)(a1 + 992) = v37;
  return a1;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6StringENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore28ConstrainDOMStringParametersEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJS9_SD_SF_EEEOSU_EEEDcSM_DpT0_(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 64);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E32B55F8[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 64) = 0;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6StringENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore28ConstrainDOMStringParametersEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJS9_SD_SF_EEEOSU_EEEDcSM_DpT0_(unsigned int **a1, WTF::StringImpl *a2, uint64_t *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ConstrainDOMStringParameters>>::__assign_alt[abi:sn180100]<1ul,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(*a1, a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6StringENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore28ConstrainDOMStringParametersEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJS9_SD_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 64);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
      return WebCore::ConstrainDOMStringParameters::operator=(a2, a3);
    result = ((uint64_t (*)(char *, uint64_t))off_1E32B55F8[v5])(&v8, v4);
  }
  *(_DWORD *)(v4 + 64) = -1;
  *(_BYTE *)v4 = 0;
  *(_BYTE *)(v4 + 24) = 0;
  if (*(_BYTE *)(a3 + 24))
  {
    *(_DWORD *)(v4 + 16) = -1;
    v6 = *(unsigned int *)(a3 + 16);
    if ((_DWORD)v6 != -1)
    {
      result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E32B5648[v6])(&v9, v4, a3);
      *(_DWORD *)(v4 + 16) = v6;
    }
    *(_BYTE *)(v4 + 24) = 1;
  }
  *(_BYTE *)(v4 + 32) = 0;
  *(_BYTE *)(v4 + 56) = 0;
  if (*(_BYTE *)(a3 + 56))
  {
    *(_DWORD *)(v4 + 48) = -1;
    v7 = *(unsigned int *)(a3 + 48);
    if ((_DWORD)v7 != -1)
    {
      result = ((uint64_t (*)(char *))off_1E32B5648[v7])(&v10);
      *(_DWORD *)(v4 + 48) = v7;
    }
    *(_BYTE *)(v4 + 56) = 1;
  }
  *(_DWORD *)(v4 + 64) = 2;
  return result;
}

unsigned int *std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ConstrainDOMStringParameters>>::__assign_alt[abi:sn180100]<1ul,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(unsigned int *result, WTF::StringImpl *a2, uint64_t *a3)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  char v13;

  v4 = result;
  v5 = result[16];
  if ((_DWORD)v5 == -1)
    goto LABEL_8;
  if ((_DWORD)v5 != 1)
  {
    result = (unsigned int *)((uint64_t (*)(char *, unsigned int *))off_1E32B55F8[v5])(&v13, result);
LABEL_8:
    v4[16] = -1;
    *(_QWORD *)v4 = 0;
    *((_QWORD *)v4 + 1) = 0;
    v9 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v9;
    LODWORD(v9) = *((_DWORD *)a3 + 2);
    *((_DWORD *)a3 + 2) = 0;
    v4[2] = v9;
    LODWORD(v9) = *((_DWORD *)a3 + 3);
    *((_DWORD *)a3 + 3) = 0;
    v4[3] = v9;
    v4[16] = 1;
    return result;
  }
  v7 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v7)
  {
    v10 = *(WTF::StringImpl ***)a2;
    v11 = 8 * v7;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, a2);
        else
          *(_DWORD *)v12 -= 2;
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  result = *(unsigned int **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
  }
  v8 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v8;
  LODWORD(v8) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *((_DWORD *)a2 + 2) = v8;
  LODWORD(v8) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *((_DWORD *)a2 + 3) = v8;
  return result;
}

uint64_t WebCore::ConstrainDOMStringParameters::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (!*(_BYTE *)(a1 + 24))
      goto LABEL_15;
    v4 = *(unsigned int *)(a1 + 16);
    v5 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v4 == -1)
    {
      if ((_DWORD)v5 == -1)
        goto LABEL_15;
    }
    else if ((_DWORD)v5 == -1)
    {
      ((void (*)(uint64_t *, uint64_t))off_1E32B5610[v4])(&v15, a1);
      *(_DWORD *)(a1 + 16) = -1;
      goto LABEL_15;
    }
    v15 = a1;
    ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E32B5680[v5])(&v15, a1, a2);
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v6 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v6 != -1)
      ((void (*)(uint64_t *, uint64_t))off_1E32B5610[v6])(&v15, a1);
    *(_DWORD *)(a1 + 16) = -1;
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_DWORD *)(a1 + 16) = -1;
    v7 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v7 != -1)
    {
      ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E32B5648[v7])(&v15, a1, a2);
      *(_DWORD *)(a1 + 16) = v7;
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
LABEL_15:
  v8 = a1 + 32;
  v9 = a2 + 32;
  if (*(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56))
  {
    if (*(_BYTE *)(a1 + 56))
    {
      v10 = *(unsigned int *)(a1 + 48);
      v11 = *(unsigned int *)(a2 + 48);
      if ((_DWORD)v10 == -1)
      {
        if ((_DWORD)v11 == -1)
          return a1;
      }
      else if ((_DWORD)v11 == -1)
      {
        ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E32B5610[v10])(&v15, v8, v9);
        *(_DWORD *)(a1 + 48) = -1;
        return a1;
      }
      v15 = a1 + 32;
      ((void (*)(uint64_t *))off_1E32B5680[v11])(&v15);
    }
  }
  else if (*(_BYTE *)(a1 + 56))
  {
    v12 = *(unsigned int *)(a1 + 48);
    if ((_DWORD)v12 != -1)
      ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E32B5610[v12])(&v15, v8, v9);
    *(_DWORD *)(a1 + 48) = -1;
    *(_BYTE *)(a1 + 56) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 48) = -1;
    v13 = *(unsigned int *)(a2 + 48);
    if ((_DWORD)v13 != -1)
    {
      ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E32B5648[v13])(&v15, v8, v9);
      *(_DWORD *)(a1 + 48) = v13;
    }
    *(_BYTE *)(a1 + 56) = 1;
  }
  return a1;
}

uint64_t std::__optional_storage_base<WTF::Vector<WebCore::MediaTrackConstraintSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<WebCore::MediaTrackConstraintSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v3 = result;
  if (*(unsigned __int8 *)(result + 16) == *((unsigned __int8 *)a2 + 16))
  {
    if (*(_BYTE *)(result + 16))
    {
      v4 = *(_DWORD *)(result + 12);
      if (v4)
        WTF::VectorDestructor<true,WebCore::MediaTrackConstraintSet>::destruct(*(_QWORD *)result, *(_QWORD *)result + 1048 * v4);
      result = *(_QWORD *)v3;
      if (*(_QWORD *)v3)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
        result = WTF::fastFree((WTF *)result, a2);
      }
      v5 = *a2;
      *a2 = 0;
      *(_QWORD *)v3 = v5;
      LODWORD(v5) = *((_DWORD *)a2 + 2);
      *((_DWORD *)a2 + 2) = 0;
      *(_DWORD *)(v3 + 8) = v5;
      LODWORD(v5) = *((_DWORD *)a2 + 3);
      *((_DWORD *)a2 + 3) = 0;
      *(_DWORD *)(v3 + 12) = v5;
    }
  }
  else if (*(_BYTE *)(result + 16))
  {
    v6 = *(_DWORD *)(result + 12);
    if (v6)
      WTF::VectorDestructor<true,WebCore::MediaTrackConstraintSet>::destruct(*(_QWORD *)result, *(_QWORD *)result + 1048 * v6);
    result = *(_QWORD *)v3;
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)v3 = 0;
      *(_DWORD *)(v3 + 8) = 0;
      result = WTF::fastFree((WTF *)result, a2);
    }
    *(_BYTE *)(v3 + 16) = 0;
  }
  else
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v7 = *a2;
    *a2 = 0;
    *(_QWORD *)result = v7;
    LODWORD(v7) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 0;
    *(_DWORD *)(result + 8) = v7;
    LODWORD(v7) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = 0;
    *(_DWORD *)(result + 12) = v7;
    *(_BYTE *)(result + 16) = 1;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJbN7WebCore21MediaTrackConstraintsEEEENS9_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 1080);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_1E32B55E8 + v3))(&v5, a2 + 8);
  *(_DWORD *)(a2 + 1080) = -1;
  return result;
}

unint64_t WebCore::jsMediaDevicesPrototypeFunction_enumerateDevices(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  WebCore::DOMGuardedObject *v24;
  uint64_t v25;
  void (*v27)(void);
  objc_class *v28;
  WebCore::DOMGuardedObject *v29;
  WebCore::DOMGuardedObject *v30;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194D34F70);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_33;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSMediaDevices::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSMediaDevices::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_33:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"MediaDevices", "enumerateDevices", v16);
    if (*((_DWORD *)v14 + 4) != 1)
    {
      --*((_DWORD *)v14 + 4);
      goto LABEL_28;
    }
    v27 = *(void (**)(void))(*(_QWORD *)v14 + 16);
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v17 + 24) - 32;
  v30 = v14;
  WebCore::MediaDevices::enumerateDevices(v23, (uint64_t *)&v30);
  v24 = v30;
  v30 = 0;
  if (v24)
  {
    if (*((_DWORD *)v24 + 4) != 1)
    {
      --*((_DWORD *)v24 + 4);
      goto LABEL_28;
    }
    v27 = *(void (**)(void))(*(_QWORD *)v24 + 16);
LABEL_32:
    v27();
  }
LABEL_28:
  v25 = *(_QWORD *)(v10 + 16);
  if (v25)
  {
    if (*(_QWORD *)(v10 + 24) != v25)
    {
      v28 = *(objc_class **)(v25 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v30);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v30, v28, 0);
      v29 = v30;
      v30 = 0;
      if (v29)
      {
        if (*((_DWORD *)v29 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v29 + 16))(v29);
        else
          --*((_DWORD *)v29 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

_BYTE *WebCore::jsMediaDevicesPrototypeFunction_getSupportedConstraints(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v12;
  _QWORD v13[2];
  char v14;

  v3 = *((_QWORD *)a2 + 5);
  v12 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v12, "MediaDevices", "getSupportedConstraints");
  v4 = 16 * (*(_DWORD *)v3 & 0xFFFFFFFE);
  v5 = *(unsigned int *)(v4 + 76);
  v6 = *(_DWORD *)(v4 + 76) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSMediaDevices::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSMediaDevices::s_info && v7 != 0);
  }
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v12, "MediaDevices", "getSupportedConstraints");
  v10 = *(_QWORD *)(v4 + 40);
  v14 = 1;
  v13[0] = 0x101010101010101;
  v13[1] = 0x101010101010101;
  return (_BYTE *)WebCore::convertDictionaryToJS((uint64_t)this, v10, v13);
}

unint64_t WebCore::jsMediaDevicesPrototypeFunction_getDisplayMedia(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  JSC::Structure *v4;
  uint64_t v5;
  uint64_t v6;
  JSC::JSGlobalObject *v7;
  uint64_t v8;
  BOOL v9;
  char **v10;
  BOOL v11;
  uint64_t v13;
  int v14;
  JSC::VM *v15;
  unint64_t v16;
  WebCore::DOMGuardedObject *v17;
  WebCore::DOMGuardedObject *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  char **v23;
  BOOL v24;
  uint64_t v26;
  JSC::JSCell *v27;
  JSC::VM *v28;
  unint64_t v29;
  JSC::Structure *v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t Object;
  WTF::StringImpl *v50;
  unint64_t v51;
  objc_class *v52;
  WebCore::DOMGuardedObject *v53;
  JSC::VM *v54;
  _BYTE *v55;
  WebCore::DOMGuardedObject *v56;
  uint64_t v57;
  _BYTE v58[1072];
  int v59;
  _BYTE v60[1072];
  int v61;
  int v62;
  _BYTE *v63;
  _BYTE v64[1072];
  unsigned int v65;
  WTF::StringImpl *v66;
  char v67[8];
  char v68[1064];
  unsigned int v69;
  unsigned int v70;
  int v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  char v74[1072];
  unsigned int v75;
  int v76;
  uint64_t v77;
  _BYTE v78[1072];
  unsigned int v79;
  _BYTE v80[1072];
  unsigned int v81;
  uint64_t v82;

  v3 = MEMORY[0x1E0C80A78](this, a2);
  v6 = v5;
  v7 = (JSC::JSGlobalObject *)v3;
  v82 = *MEMORY[0x1E0C80C00];
  v8 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v9 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v10 = (char **)(16 * v8);
  if ((_DWORD)v8)
    v11 = v10 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v11 = 1;
  if (!v11)
  {
    do
    {
      v10 = (char **)v10[2];
      v9 = v10 != 0;
    }
    while (v10 != &WebCore::JSDOMGlobalObject::s_info && v10 != 0);
  }
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x194D3592CLL);
  }
  v13 = *(_QWORD *)(v3 + 56);
  v14 = *(_DWORD *)(v3 + 1164);
  if (v14)
    v15 = (JSC::VM *)(16 * (v14 & 0xFFFFFFFE));
  else
    v15 = 0;
  v16 = JSC::JSPromise::create(*(JSC::JSPromise **)(v3 + 56), v15, v4);
  v17 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v18 = WebCore::DOMGuardedObject::DOMGuardedObject(v17, (unint64_t)v7, v16);
  *(_QWORD *)v18 = &off_1E3226868;
  *((_DWORD *)v18 + 10) = 0;
  *((_BYTE *)v18 + 44) = 0;
  v20 = *(_QWORD *)(v6 + 40);
  if ((v20 & 0xFFFE000000000002) == 0)
  {
    v21 = *(unsigned int *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x4C);
    v22 = *(_DWORD *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x4C) != 0;
    v23 = (char **)(16 * v21);
    if ((_DWORD)v21)
      v24 = v23 == &WebCore::JSMediaDevices::s_info;
    else
      v24 = 1;
    if (!v24)
    {
      do
      {
        v23 = (char **)v23[2];
        v22 = v23 != 0;
      }
      while (v23 != &WebCore::JSMediaDevices::s_info && v23 != 0);
    }
    if (v22)
    {
      v26 = *(_QWORD *)(v20 + 24);
      if (*(_DWORD *)(v6 + 32) == 1)
      {
        v54 = (JSC::VM *)*((_QWORD *)v7 + 7);
      }
      else
      {
        v27 = *(JSC::JSCell **)(v6 + 48);
        v28 = (JSC::VM *)*((_QWORD *)v7 + 7);
        v54 = v28;
        if (((unint64_t)v27 & 0xFFFFFFFFFFFFFFF7) != 2)
        {
          if (((unint64_t)v27 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v27)) == 0)
          {
            JSC::throwTypeError();
            v42 = 1;
            v62 = 1;
            goto LABEL_72;
          }
          v30 = (JSC::Structure *)Object;
          v29 = v16;
          v78[0] = 0;
          v79 = 0;
          v80[0] = 0;
          v81 = 0;
          WTF::AtomStringImpl::addLiteral();
          v51 = JSC::JSObject::get(v30, v7, (unint64_t)v72);
          if (v72)
          {
            if (*(_DWORD *)v72 == 2)
              WTF::StringImpl::destroy(v72, v50);
            else
              *(_DWORD *)v72 -= 2;
          }
          if (*((_DWORD *)v28 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v28))
          {
            v62 = 1;
            v16 = v29;
            v33 = v26;
            goto LABEL_54;
          }
          if (v51 != 10)
          {
            WebCore::Converter<WebCore::IDLUnion<WebCore::IDLBoolean,WebCore::IDLDictionary<WebCore::MediaTrackConstraints>>>::convert((uint64_t)&v72, v7, v51);
            v41 = v76;
            if (v76)
            {
              v62 = 1;
              v16 = v29;
              v33 = v26;
LABEL_52:
              if (v41 != -1)
                ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32B5690[v41])(&v66, &v73);
LABEL_54:
              if (v81 != -1)
                ((void (*)(WTF::StringImpl **, _BYTE *))*(&off_1E32B55E8 + v81))(&v72, v80);
              v81 = -1;
              if (v79 != -1)
                ((void (*)(WTF::StringImpl **, _BYTE *))*(&off_1E32B55E8 + v79))(&v72, v78);
              v42 = v62;
              if (!v62)
              {
                v43 = v33 - 32;
                v78[0] = 0;
                v79 = -1;
                v44 = v59;
                if (v59 != -1)
                {
                  ((void (*)(WTF::StringImpl **, _BYTE *, _BYTE *))off_1E32B5620[v59])(&v72, v78, v58);
                  v79 = v44;
                }
                v80[0] = 0;
                v81 = -1;
                v45 = v61;
                if (v61 != -1)
                {
                  ((void (*)(WTF::StringImpl **, _BYTE *, _BYTE *))off_1E32B5620[v61])(&v72, v80, v60);
                  v81 = v45;
                }
                v72 = v17;
                WebCore::MediaDevices::getDisplayMedia(v43, (uint64_t)&v77, (uint64_t *)&v72);
                v46 = v72;
                v72 = 0;
                if (v46)
                {
                  if (*((_DWORD *)v46 + 4) == 1)
                    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v46 + 16))(v46);
                  else
                    --*((_DWORD *)v46 + 4);
                }
                if (v81 != -1)
                  ((void (*)(WTF::StringImpl **, _BYTE *))*(&off_1E32B55E8 + v81))(&v72, v80);
                v81 = -1;
                if (v79 != -1)
                  ((void (*)(WTF::StringImpl **, _BYTE *))*(&off_1E32B55E8 + v79))(&v72, v78);
                v17 = 0;
                v42 = v62;
              }
              if (v42 == -1)
              {
LABEL_73:
                if (!v17)
                  goto LABEL_76;
                goto LABEL_74;
              }
LABEL_72:
              ((void (*)(uint64_t *, uint64_t *))off_1E32B5790[v42])(&v77, &v57);
              goto LABEL_73;
            }
            v32 = v75;
            v67[0] = 0;
            v69 = -1;
            if (v75 == -1)
            {
              if (v81 == -1)
              {
                v31 = 0;
              }
              else
              {
                ((void (*)(_BYTE **, _BYTE *))*(&off_1E32B55E8 + v81))(&v63, v80);
                v31 = 0;
                v81 = -1;
              }
              goto LABEL_32;
            }
            v31 = 0;
LABEL_31:
            ((void (*)(_BYTE **, char *, char *))off_1E32B5620[v32])(&v63, v67, v74);
            v69 = v32;
            v63 = v80;
            ((void (*)(_BYTE **))off_1E32B5658[v32])(&v63);
LABEL_32:
            v16 = v29;
            if (v69 != -1)
              ((void (*)(_BYTE **, char *))*(&off_1E32B55E8 + v69))(&v63, v67);
            v33 = v26;
            if (v31)
              goto LABEL_40;
            WTF::AtomStringImpl::addLiteral();
            v34 = v66;
            v36 = JSC::JSObject::get(v30, v7, (unint64_t)v66);
            if (v34)
            {
              if (*(_DWORD *)v34 == 2)
                WTF::StringImpl::destroy(v34, v35);
              else
                *(_DWORD *)v34 -= 2;
            }
            if (*((_DWORD *)v54 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v54))
            {
              v62 = 1;
LABEL_51:
              v41 = v76;
              goto LABEL_52;
            }
            if (v36 == 10)
            {
LABEL_40:
              v37 = 0;
              v68[0] = 1;
              v70 = 0;
              v71 = 0;
              v64[0] = 0;
              v65 = -1;
            }
            else
            {
              WebCore::Converter<WebCore::IDLUnion<WebCore::IDLBoolean,WebCore::IDLDictionary<WebCore::MediaTrackConstraints>>>::convert((uint64_t)&v66, v7, v36);
              v40 = v71;
              if (v71)
              {
                v62 = 1;
LABEL_49:
                if (v40 != -1)
                  ((void (*)(_BYTE **, char *))off_1E32B5690[v40])(&v63, v67);
                goto LABEL_51;
              }
              v37 = v70;
              v64[0] = 0;
              v65 = -1;
              if (v70 == -1)
              {
                if (v79 == -1)
                {
LABEL_44:
                  v58[0] = 0;
                  v59 = -1;
                  v38 = v79;
                  if (v79 != -1)
                  {
                    ((void (*)(_BYTE **, _BYTE *, _BYTE *))off_1E32B5620[v79])(&v63, v58, v78);
                    v59 = v38;
                  }
                  v60[0] = 0;
                  v61 = -1;
                  v39 = v81;
                  if (v81 != -1)
                  {
                    ((void (*)(_BYTE **, _BYTE *, _BYTE *))off_1E32B5620[v81])(&v63, v60, v80);
                    v61 = v39;
                  }
                  v62 = 0;
                  v40 = v71;
                  goto LABEL_49;
                }
                ((void (*)(_BYTE **, _BYTE *))*(&off_1E32B55E8 + v79))(&v55, v78);
                v79 = -1;
LABEL_42:
                if (v65 != -1)
                  ((void (*)(_BYTE **, _BYTE *))*(&off_1E32B55E8 + v65))(&v55, v64);
                goto LABEL_44;
              }
            }
            ((void (*)(_BYTE **, _BYTE *, char *))off_1E32B5620[v37])(&v55, v64, v68);
            v65 = v37;
            v55 = v78;
            ((void (*)(_BYTE **, _BYTE *, _BYTE *))off_1E32B5658[v37])(&v55, v78, v64);
            goto LABEL_42;
          }
          v31 = 0;
LABEL_30:
          v32 = 0;
          v74[0] = 0;
          v75 = 0;
          v76 = 0;
          v67[0] = 0;
          v69 = -1;
          goto LABEL_31;
        }
      }
      v29 = v16;
      v30 = 0;
      v78[0] = 0;
      v79 = 0;
      v80[0] = 0;
      v81 = 0;
      v31 = 1;
      goto LABEL_30;
    }
  }
  WebCore::rejectPromiseWithThisTypeError(v17, (WebCore::DeferredPromise *)"MediaDevices", "getDisplayMedia", v19);
LABEL_74:
  if (*((_DWORD *)v17 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v17 + 16))(v17);
  else
    --*((_DWORD *)v17 + 4);
LABEL_76:
  v47 = *(_QWORD *)(v13 + 16);
  if (v47)
  {
    if (*(_QWORD *)(v13 + 24) != v47)
    {
      v52 = *(objc_class **)(v47 + 8);
      JSC::VM::clearException((JSC::VM *)v13);
      WebCore::DeferredPromise::create((unint64_t)v7, v16, 0, &v56);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v56, v52, 0);
      v53 = v56;
      v56 = 0;
      if (v53)
      {
        if (*((_DWORD *)v53 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v53 + 16))(v53);
        else
          --*((_DWORD *)v53 + 4);
      }
    }
  }
  if (*(_DWORD *)(v13 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13) & 1) != 0)
    return 10;
  return v16;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore12MediaDevices29DisplayMediaStreamConstraintsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  char v7;

  v3 = *(unsigned int *)(a2 + 2168);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_1E32B55E8 + v3))(&v6, a2 + 1096);
  *(_DWORD *)(a2 + 2168) = -1;
  v5 = *(unsigned int *)(a2 + 1080);
  if ((_DWORD)v5 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_1E32B55E8 + v5))(&v7, a2 + 8);
  *(_DWORD *)(a2 + 1080) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore12MediaDevices17StreamConstraintsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  char v7;

  v3 = *(unsigned int *)(a2 + 2168);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_1E32B55E8 + v3))(&v6, a2 + 1096);
  *(_DWORD *)(a2 + 2168) = -1;
  v5 = *(unsigned int *)(a2 + 1080);
  if ((_DWORD)v5 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_1E32B55E8 + v5))(&v7, a2 + 8);
  *(_DWORD *)(a2 + 1080) = -1;
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore30MediaElementAudioSourceOptionsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC11ArrayBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJSG_SI_EEEEEEDcSM_DpT0_(uint64_t a1, _QWORD **a2)
{
  _QWORD *v2;
  BOOL v3;
  uint64_t v4;
  void *v5;
  WTF **v6;
  WTF *v7;
  WTF *v8;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    v3 = *(_DWORD *)v2 == 2;
    *(_DWORD *)v2 -= 2;
    if (v3)
    {
      v4 = v2[10];
      if (v4)
      {
        *(_QWORD *)(v4 + 8) = 3;
        v2[10] = 0;
      }
      if ((v2[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v2 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v2 + 2));
      v6 = (WTF **)v2[1];
      if ((v6 & 1) == 0 && v6)
      {
        v8 = (WTF *)v2[1];
        v7 = *v6;
        if (*v6)
        {
          *(_QWORD *)v8 = 0;
          *((_DWORD *)v8 + 2) = 0;
          WTF::fastFree(v7, v5);
        }
        WTF::fastFree(v8, v5);
      }
      WTF::fastFree((WTF *)v2, v5);
    }
  }
}

void WebCore::MediaEncryptedEventInit::~MediaEncryptedEventInit(WebCore::MediaEncryptedEventInit *this, WTF::StringImpl *a2)
{
  _QWORD *v3;
  BOOL v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  void *v7;
  WTF **v8;
  WTF *v9;
  WTF *v10;

  v3 = (_QWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = *(_DWORD *)v3 == 2;
    *(_DWORD *)v3 -= 2;
    if (v4)
    {
      v6 = v3[10];
      if (v6)
      {
        *(_QWORD *)(v6 + 8) = 3;
        v3[10] = 0;
      }
      if ((v3[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v3 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v3 + 2));
      v8 = (WTF **)v3[1];
      if ((v8 & 1) == 0 && v8)
      {
        v10 = (WTF *)v3[1];
        v9 = *v8;
        if (*v8)
        {
          *(_QWORD *)v10 = 0;
          *((_DWORD *)v10 + 2) = 0;
          WTF::fastFree(v9, v7);
        }
        WTF::fastFree(v10, v7);
      }
      WTF::fastFree((WTF *)v3, v7);
    }
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore23MediaEncryptedEventInitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::MediaEncryptedEventInit *this)
{
  WebCore::MediaEncryptedEventInit::~MediaEncryptedEventInit(this, this);
}

WTF::DeferrableRefCountedBase *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore24MediaKeyMessageEventInitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::DeferrableRefCountedBase *result;

  result = *(WTF::DeferrableRefCountedBase **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
    return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(result);
  return result;
}

unint64_t WebCore::jsMediaKeySessionPrototypeFunction_generateRequest(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char **v21;
  BOOL v22;
  uint64_t v24;
  int v25;
  JSC::JSArrayBufferView *v26;
  JSC::ArrayBufferView *v27;
  int v28;
  WTF::StringImpl *v29;
  uint64_t (*v30)();
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  int v33;
  uint64_t v34;
  objc_class *v36;
  WebCore::DOMGuardedObject *v37;
  JSC::VM *v38;
  JSValue v39;
  WebCore *v40;
  JSC::JSGlobalObject *v41;
  JSC::CallFrame *v42;
  WebCore::DOMGuardedObject *v43;
  WTF::StringImpl *v44;
  int v45;
  JSC::ArrayBufferView *v46;
  int v47;
  uint64_t v48;
  int v49;
  WTF::StringImpl *v50;
  char v51;
  WebCore::DOMGuardedObject *v52;
  JSC::ArrayBufferView *v53;
  int v54;
  int v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194D360C0);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v43 = v15;
  v18 = *((_QWORD *)a2 + 5);
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_52;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSMediaKeySession::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSMediaKeySession::s_info && v21 != 0);
  }
  if (!v20)
  {
LABEL_52:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"MediaKeySession", "generateRequest", v17);
  }
  else
  {
    if ((unint64_t)(*((int *)a2 + 8) - 1) > 1)
    {
      v24 = *(_QWORD *)(v18 + 24);
      WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(this, *((_QWORD *)a2 + 6), (uint64_t)&v44);
      v25 = v45;
      if (v45)
        goto LABEL_42;
      v26 = (JSC::JSArrayBufferView *)*((_QWORD *)a2 + 7);
      v48 = *((_QWORD *)this + 7);
      v27 = (JSC::ArrayBufferView *)JSC::JSArrayBuffer::toWrapped(v48, (uint64_t)v26);
      if (v27)
      {
        *(_DWORD *)v27 += 2;
        v53 = v27;
        v28 = 1;
        v54 = 1;
      }
      else
      {
        JSC::JSArrayBufferView::toWrapped(v26, &v46);
        if (!v46)
        {
          JSC::throwTypeError();
          v33 = 1;
          v55 = 1;
LABEL_40:
          ((void (*)(uint64_t *, JSC::ArrayBufferView **))off_1E32B5D68[v33])(&v48, &v53);
LABEL_41:
          v25 = v45;
LABEL_42:
          if (v25 != -1)
            ((void (*)(WebCore::DOMGuardedObject **, WTF::StringImpl **))off_1E32B5840[v25])(&v52, &v44);
          v14 = v43;
          v43 = 0;
          if (!v14)
            goto LABEL_47;
          goto LABEL_45;
        }
        v28 = 0;
        v53 = v46;
        v54 = 0;
      }
      v55 = 0;
      if (v45)
      {
        v40 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
        return WebCore::jsMediaKeySessionPrototypeFunction_load(v40, v41, v42);
      }
      v29 = v44;
      v44 = 0;
      v50 = v29;
      LOBYTE(v46) = 0;
      v47 = -1;
      v30 = off_1E32B5D58[v28];
      ((void (*)(uint64_t *, JSC::ArrayBufferView **, JSC::ArrayBufferView **))v30)(&v48, &v46, &v53);
      v47 = v28;
      LOBYTE(v48) = 0;
      v49 = -1;
      ((void (*)(char *, uint64_t *, JSC::ArrayBufferView **))v30)(&v51, &v48, &v46);
      v49 = v28;
      WebCore::MediaKeySession::generateRequest(v24, &v50, (uint64_t)&v48, (uint64_t *)&v43);
      if (v49 != -1)
        ((void (*)(char *, uint64_t *))off_1E32B5D48[v49])(&v51, &v48);
      v49 = -1;
      if (v47 != -1)
        ((void (*)(char *, JSC::ArrayBufferView **))off_1E32B5D48[v47])(&v51, &v46);
      v32 = v50;
      v50 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v31);
        else
          *(_DWORD *)v32 -= 2;
      }
      v33 = v55;
      if (v55 == -1)
        goto LABEL_41;
      goto LABEL_40;
    }
    v38 = (JSC::VM *)*((_QWORD *)this + 7);
    v39.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v38, this, v39);
  }
  v43 = 0;
LABEL_45:
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_47:
  v34 = *(_QWORD *)(v10 + 16);
  if (v34)
  {
    if (*(_QWORD *)(v10 + 24) != v34)
    {
      v36 = *(objc_class **)(v34 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v52);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v52, v36, 0);
      v37 = v52;
      v52 = 0;
      if (v37)
      {
        if (*((_DWORD *)v37 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v37 + 16))(v37);
        else
          --*((_DWORD *)v37 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80))
  {
    if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
      return 10;
  }
  return v13;
}

unint64_t WebCore::jsMediaKeySessionPrototypeFunction_load(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char **v21;
  BOOL v22;
  JSC::VM *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  JSValue v34;
  WTF::StringImpl *v35;
  int hasExceptionsAfterHandlingTraps;
  objc_class *v37;
  WebCore::DOMGuardedObject *v38;
  WebCore::DOMGuardedObject *v39;
  WebCore::DOMGuardedObject *v40;
  int v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194D36434);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v39 = v15;
  v18 = *((_QWORD *)a2 + 5);
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_49;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSMediaKeySession::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSMediaKeySession::s_info && v21 != 0);
  }
  if (!v20)
  {
LABEL_49:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"MediaKeySession", "load", v17);
  }
  else
  {
    v24 = (JSC::VM *)*((_QWORD *)this + 7);
    if (*((_DWORD *)a2 + 8) != 1)
    {
      v25 = *(_QWORD *)(v18 + 24);
      v26 = *((_QWORD *)a2 + 6);
      v43 = (WTF::StringImpl *)v26;
      if ((v26 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v26 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v43, this);
LABEL_32:
        if (*((_DWORD *)v24 + 20))
        {
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v24);
          v28 = v42;
          if (hasExceptionsAfterHandlingTraps)
          {
            v41 = 1;
            v42 = 0;
            if (v28)
            {
              if (*(_DWORD *)v28 == 2)
                WTF::StringImpl::destroy(v28, v35);
              else
                *(_DWORD *)v28 -= 2;
            }
            v31 = 1;
LABEL_38:
            ((void (*)(WTF::StringImpl **, WebCore::DOMGuardedObject **))off_1E32B54C8[v31])(&v43, &v40);
            v14 = v39;
            v39 = 0;
            if (!v14)
              goto LABEL_41;
            goto LABEL_39;
          }
        }
        else
        {
          v28 = v42;
        }
        v41 = 0;
        v40 = 0;
        v43 = v28;
        WebCore::MediaKeySession::load(v25, &v43, (uint64_t *)&v39);
        v30 = v43;
        v43 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, v29);
          else
            *(_DWORD *)v30 -= 2;
        }
        v31 = 0;
        goto LABEL_38;
      }
      v27 = *(WTF::StringImpl **)(v26 + 8);
      if ((v27 & 1) != 0)
      {
        v27 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v26, this);
        if (!v27)
          goto LABEL_31;
      }
      else if (!v27)
      {
LABEL_31:
        v42 = v27;
        goto LABEL_32;
      }
      *(_DWORD *)v27 += 2;
      goto LABEL_31;
    }
    v34.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v24, this, v34);
  }
  v39 = 0;
LABEL_39:
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_41:
  v32 = *(_QWORD *)(v10 + 16);
  if (v32)
  {
    if (*(_QWORD *)(v10 + 24) != v32)
    {
      v37 = *(objc_class **)(v32 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v40);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v40, v37, 0);
      v38 = v40;
      v40 = 0;
      if (v38)
      {
        if (*((_DWORD *)v38 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v38 + 16))(v38);
        else
          --*((_DWORD *)v38 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsMediaKeySessionPrototypeFunction_update(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char **v21;
  BOOL v22;
  JSC::VM *v24;
  uint64_t v25;
  JSC::JSArrayBufferView *v26;
  JSC::ArrayBufferView *v27;
  int v28;
  uint64_t (*v29)();
  int v30;
  uint64_t v31;
  objc_class *v33;
  WebCore::DOMGuardedObject *v34;
  JSValue v35;
  WebCore::DOMGuardedObject *v36;
  JSC::ArrayBufferView *v37;
  int v38;
  uint64_t v39;
  int v40;
  char v41;
  WebCore::DOMGuardedObject *v42;
  JSC::ArrayBufferView *v43;
  int v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194D36840);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v36 = v15;
  v18 = *((_QWORD *)a2 + 5);
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_43;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSMediaKeySession::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSMediaKeySession::s_info && v21 != 0);
  }
  if (!v20)
  {
LABEL_43:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"MediaKeySession", "update", v17);
  }
  else
  {
    v24 = (JSC::VM *)*((_QWORD *)this + 7);
    if (*((_DWORD *)a2 + 8) != 1)
    {
      v25 = *(_QWORD *)(v18 + 24);
      v26 = (JSC::JSArrayBufferView *)*((_QWORD *)a2 + 6);
      v39 = *((_QWORD *)this + 7);
      v27 = (JSC::ArrayBufferView *)JSC::JSArrayBuffer::toWrapped((uint64_t)v24, (uint64_t)v26);
      if (v27)
      {
        *(_DWORD *)v27 += 2;
        v43 = v27;
        v28 = 1;
        v44 = 1;
      }
      else
      {
        JSC::JSArrayBufferView::toWrapped(v26, &v37);
        if (!v37)
        {
          JSC::throwTypeError();
          v30 = 1;
          v45 = 1;
          goto LABEL_35;
        }
        v28 = 0;
        v43 = v37;
        v44 = 0;
      }
      v45 = 0;
      LOBYTE(v37) = 0;
      v38 = -1;
      v29 = off_1E32B5D58[v28];
      ((void (*)(uint64_t *, JSC::ArrayBufferView **, JSC::ArrayBufferView **))v29)(&v39, &v37, &v43);
      v38 = v28;
      LOBYTE(v39) = 0;
      v40 = -1;
      ((void (*)(char *, uint64_t *, JSC::ArrayBufferView **))v29)(&v41, &v39, &v37);
      v40 = v28;
      WebCore::MediaKeySession::update(v25, (uint64_t)&v39, (uint64_t *)&v36);
      if (v40 != -1)
        ((void (*)(char *, uint64_t *))off_1E32B5D48[v40])(&v41, &v39);
      v40 = -1;
      if (v38 != -1)
        ((void (*)(char *, JSC::ArrayBufferView **))off_1E32B5D48[v38])(&v41, &v37);
      v30 = v45;
      if (v45 == -1)
      {
LABEL_36:
        v14 = v36;
        v36 = 0;
        if (!v14)
          goto LABEL_39;
        goto LABEL_37;
      }
LABEL_35:
      ((void (*)(uint64_t *, JSC::ArrayBufferView **))off_1E32B5D68[v30])(&v39, &v43);
      goto LABEL_36;
    }
    v35.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v24, this, v35);
  }
  v36 = 0;
LABEL_37:
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_39:
  v31 = *(_QWORD *)(v10 + 16);
  if (v31)
  {
    if (*(_QWORD *)(v10 + 24) != v31)
    {
      v33 = *(objc_class **)(v31 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v42);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v42, v33, 0);
      v34 = v42;
      v42 = 0;
      if (v34)
      {
        if (*((_DWORD *)v34 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v34 + 16))(v34);
        else
          --*((_DWORD *)v34 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsMediaKeySessionPrototypeFunction_close(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  objc_class *v25;
  WebCore::DOMGuardedObject *v26;
  WebCore::DOMGuardedObject *v27;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194D36AC4);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v27 = v15;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_32;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSMediaKeySession::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSMediaKeySession::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_32:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"MediaKeySession", "close", v16);
    v27 = 0;
  }
  else
  {
    WebCore::MediaKeySession::close(*(_QWORD *)(v17 + 24), (uint64_t *)&v27);
    v14 = v27;
    v27 = 0;
    if (!v14)
      goto LABEL_28;
  }
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_28:
  v23 = *(_QWORD *)(v10 + 16);
  if (v23)
  {
    if (*(_QWORD *)(v10 + 24) != v23)
    {
      v25 = *(objc_class **)(v23 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v27);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v27, v25, 0);
      v26 = v27;
      v27 = 0;
      if (v26)
      {
        if (*((_DWORD *)v26 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v26 + 16))(v26);
        else
          --*((_DWORD *)v26 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsMediaKeySessionPrototypeFunction_remove(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  objc_class *v25;
  WebCore::DOMGuardedObject *v26;
  WebCore::DOMGuardedObject *v27;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194D36D0CLL);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v27 = v15;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_32;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSMediaKeySession::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSMediaKeySession::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_32:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"MediaKeySession", "remove", v16);
    v27 = 0;
  }
  else
  {
    WebCore::MediaKeySession::remove(*(_QWORD *)(v17 + 24), (uint64_t *)&v27);
    v14 = v27;
    v27 = 0;
    if (!v14)
      goto LABEL_28;
  }
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_28:
  v23 = *(_QWORD *)(v10 + 16);
  if (v23)
  {
    if (*(_QWORD *)(v10 + 24) != v23)
    {
      v25 = *(objc_class **)(v23 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v27);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v27, v25, 0);
      v26 = v27;
      v27 = 0;
      if (v26)
      {
        if (*((_DWORD *)v26 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v26 + 16))(v26);
        else
          --*((_DWORD *)v26 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

_BYTE *WebCore::jsMediaKeyStatusMapPrototypeFunction_has(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  JSC::JSArrayBufferView *v12;
  JSC::ArrayBufferView *v13;
  int v14;
  uint64_t (*v15)();
  uint64_t v16;
  int v17;
  JSValue v20;
  JSC::VM *v21;
  JSC::ArrayBufferView *v22;
  int v23;
  JSC::VM *v24;
  int v25;
  char v26;
  JSC::ArrayBufferView *v27;
  int v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v21 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v21, "MediaKeyStatusMap", "has");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMediaKeyStatusMap::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMediaKeyStatusMap::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v21, "MediaKeyStatusMap", "has");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v20.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v20);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = (JSC::JSArrayBufferView *)*((_QWORD *)a2 + 6);
  v24 = v4;
  v13 = (JSC::ArrayBufferView *)JSC::JSArrayBuffer::toWrapped((uint64_t)v4, (uint64_t)v12);
  if (v13)
  {
    *(_DWORD *)v13 += 2;
    v27 = v13;
    v14 = 1;
    v28 = 1;
  }
  else
  {
    JSC::JSArrayBufferView::toWrapped(v12, &v22);
    if (!v22)
    {
      JSC::throwTypeError();
      v16 = 0;
      v17 = 1;
      v29 = 1;
LABEL_25:
      ((void (*)(JSC::VM **, JSC::ArrayBufferView **))off_1E32B5D68[v17])(&v24, &v27);
      return (_BYTE *)v16;
    }
    v14 = 0;
    v27 = v22;
    v28 = 0;
  }
  v29 = 0;
  LOBYTE(v22) = 0;
  v23 = -1;
  v15 = off_1E32B5D58[v14];
  ((void (*)(JSC::VM **, JSC::ArrayBufferView **, JSC::ArrayBufferView **))v15)(&v24, &v22, &v27);
  v23 = v14;
  LOBYTE(v24) = 0;
  v25 = -1;
  ((void (*)(char *, JSC::VM **, JSC::ArrayBufferView **))v15)(&v26, &v24, &v22);
  v25 = v14;
  if (WebCore::MediaKeyStatusMap::has(v11, (uint64_t)&v24))
    v16 = 7;
  else
    v16 = 6;
  if (v25 != -1)
    ((void (*)(char *, JSC::VM **))off_1E32B5D48[v25])(&v26, &v24);
  v25 = -1;
  if (v23 != -1)
    ((void (*)(char *, JSC::ArrayBufferView **))off_1E32B5D48[v23])(&v26, &v22);
  v17 = v29;
  if (v29 != -1)
    goto LABEL_25;
  return (_BYTE *)v16;
}

_BYTE *WebCore::jsMediaKeyStatusMapPrototypeFunction_get(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  JSC::JSArrayBufferView *v12;
  JSC::ArrayBufferView *v13;
  int v14;
  uint64_t (*v15)();
  uint64_t v16;
  int v17;
  JSValue v20;
  JSC::VM *v21;
  JSC::ArrayBufferView *v22;
  int v23;
  JSC::VM *v24;
  int v25;
  char v26;
  JSC::ArrayBufferView *v27;
  int v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v21 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v21, "MediaKeyStatusMap", "get");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMediaKeyStatusMap::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMediaKeyStatusMap::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v21, "MediaKeyStatusMap", "get");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v20.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v20);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = (JSC::JSArrayBufferView *)*((_QWORD *)a2 + 6);
  v24 = v4;
  v13 = (JSC::ArrayBufferView *)JSC::JSArrayBuffer::toWrapped((uint64_t)v4, (uint64_t)v12);
  if (v13)
  {
    *(_DWORD *)v13 += 2;
    v27 = v13;
    v14 = 1;
    v28 = 1;
  }
  else
  {
    JSC::JSArrayBufferView::toWrapped(v12, &v22);
    if (!v22)
    {
      JSC::throwTypeError();
      v16 = 0;
      v17 = 1;
      v29 = 1;
LABEL_22:
      ((void (*)(JSC::VM **, JSC::ArrayBufferView **))off_1E32B5D68[v17])(&v24, &v27);
      return (_BYTE *)v16;
    }
    v14 = 0;
    v27 = v22;
    v28 = 0;
  }
  v29 = 0;
  LOBYTE(v22) = 0;
  v23 = -1;
  v15 = off_1E32B5D58[v14];
  ((void (*)(JSC::VM **, JSC::ArrayBufferView **, JSC::ArrayBufferView **))v15)(&v24, &v22, &v27);
  v23 = v14;
  LOBYTE(v24) = 0;
  v25 = -1;
  ((void (*)(char *, JSC::VM **, JSC::ArrayBufferView **))v15)(&v26, &v24, &v22);
  v25 = v14;
  v16 = WebCore::MediaKeyStatusMap::get(v11, (uint64_t)this, (uint64_t)&v24);
  if (v25 != -1)
    ((void (*)(char *, JSC::VM **))off_1E32B5D48[v25])(&v26, &v24);
  v25 = -1;
  if (v23 != -1)
    ((void (*)(char *, JSC::ArrayBufferView **))off_1E32B5D48[v23])(&v26, &v22);
  v17 = v29;
  if (v29 != -1)
    goto LABEL_22;
  return (_BYTE *)v16;
}

_BYTE *WebCore::jsMediaKeyStatusMapPrototypeFunction_entries(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v10, "MediaKeyStatusMap", "entries");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSMediaKeyStatusMap::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSMediaKeyStatusMap::s_info && v6 != 0);
  }
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v10, "MediaKeyStatusMap", "entries");
  else
    return (_BYTE *)WebCore::iteratorCreate<WebCore::MediaKeyStatusMapIterator>(v3, 2);
}

_BYTE *WebCore::jsMediaKeyStatusMapPrototypeFunction_keys(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v10, "MediaKeyStatusMap", "keys");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSMediaKeyStatusMap::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSMediaKeyStatusMap::s_info && v6 != 0);
  }
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v10, "MediaKeyStatusMap", "keys");
  else
    return (_BYTE *)WebCore::iteratorCreate<WebCore::MediaKeyStatusMapIterator>(v3, 0);
}

_BYTE *WebCore::jsMediaKeyStatusMapPrototypeFunction_values(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v10, "MediaKeyStatusMap", "values");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSMediaKeyStatusMap::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSMediaKeyStatusMap::s_info && v6 != 0);
  }
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v10, "MediaKeyStatusMap", "values");
  else
    return (_BYTE *)WebCore::iteratorCreate<WebCore::MediaKeyStatusMapIterator>(v3, 1);
}

_BYTE *WebCore::jsMediaKeyStatusMapPrototypeFunction_forEach(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  JSC::JSFunction *v12;
  uint64_t v13;
  uint64_t v14;
  objc_class *v15;
  JSC::ArrayBuffer *v16;
  JSValue v17;
  int v18;
  uint64_t v19;
  JSValue v20;
  int v21;
  int v22;
  void *v23;
  int v24;
  uint64_t *v25;
  JSValue v26;
  _QWORD *v27;
  uint64_t v29;
  uint64_t v31;
  char v32[8];
  uint64_t v33;
  WTF *v34;
  uint64_t *v35[9];
  char v36[8];
  unsigned int v37;
  unsigned __int8 v38;
  char v39;
  uint64_t v40[2];
  uint64_t v41[3];
  uint64_t v42;
  char v43[40];
  objc_class *v44;
  char v45;
  uint64_t v46;
  WTF *v47;
  objc_class **v48;
  WebCore *v49;
  uint64_t v50;
  char *v51;

  v4 = 0xFFFE000000000002;
  v5 = *((_QWORD *)this + 7);
  v31 = v5;
  v6 = *((_QWORD *)a2 + 5);
  if ((v6 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v31, "MediaKeyStatusMap", "forEach");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSMediaKeyStatusMap::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSMediaKeyStatusMap::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v31, "MediaKeyStatusMap", "forEach");
  v42 = v5;
  if (*((_DWORD *)a2 + 8) == 1)
    goto LABEL_58;
  v12 = (JSC::JSFunction *)*((_QWORD *)a2 + 6);
LABEL_14:
  if (((unint64_t)v12 & v4) != 0)
  {
LABEL_58:
    LOBYTE(v41[0]) = 0;
    return (_BYTE *)JSC::throwTypeError();
  }
  if (*((_BYTE *)v12 + 5) == 26)
    JSC::JSFunction::getCallData(v12, (JSCell *)a2);
  else
    (*(void (**)(uint64_t *__return_ptr, JSC::JSFunction *))(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)v12 & 0xFFFFFFFE)
                                                                                       + 0x4C)
                                                                     + 0x38))(v41, v12);
  if (!LOBYTE(v41[0]))
    return (_BYTE *)JSC::throwTypeError();
  v13 = *(_QWORD *)(v6 + 24);
  WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  ++*(_DWORD *)(v13 + 8);
  v40[0] = v13;
  v40[1] = 0;
  do
  {
    WebCore::MediaKeyStatusMap::Iterator::next(v40, (uint64_t)v36);
    if (!v39)
      goto LABEL_62;
    v32[0] = 0;
    v33 = 0x800000000;
    v34 = (WTF *)&v35[1];
    memset(v35, 0, sizeof(v35));
    v14 = *(_QWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x28);
    v15 = (objc_class *)WebCore::convertEnumerationToJS<WebCore::CDMKeyStatus>(*((_QWORD *)this + 7), (WTF::StringImpl *)v38);
    v17.super.isa = v15;
    v18 = v33;
    if ((_DWORD)v33 == HIDWORD(v33) || v34 != (WTF *)&v35[1] && v34)
    {
      if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v33, v17) == 1)
        v32[0] = 1;
    }
    else
    {
      *((_QWORD *)v34 + v33) = v15;
      LODWORD(v33) = v18 + 1;
    }
    if (!v39)
    {
      __break(1u);
      return WebCore::throwThisTypeError((int)this, (int)&v31, "MediaKeyStatusMap", "forEach");
    }
    if (v37 == -1)
      v19 = -1;
    else
      v19 = v37;
    LOBYTE(v44) = 0;
    v45 = 0;
    v46 = v19;
    v47 = (WTF *)&v46;
    v48 = &v44;
    v49 = this;
    v50 = v14;
    v51 = v36;
    _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_18IDLArrayBufferViewENS_14IDLArrayBufferEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6RefPtrINS8_15ArrayBufferViewENSF_12RawPtrTraitsISH_EENSF_21DefaultRefDerefTraitsISH_EEEENSG_INS8_11ArrayBufferENSI_ISN_EENSK_ISN_EEEEEEEEUlTyvE_JNSD_17integral_constantIlLl0EEENSV_IlLl1EEEEEET_SY_((uint64_t)&v47, v16, (uint64_t)v43);
    if (!v45)
    {
      std::__throw_bad_optional_access[abi:sn180100]();
      goto LABEL_14;
    }
    v20.super.isa = v44;
    v21 = v33;
    if ((_DWORD)v33 == HIDWORD(v33) || v34 != (WTF *)&v35[1] && v34)
    {
      if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v33, v20) == 1)
        v32[0] = 1;
    }
    else
    {
      *((_QWORD *)v34 + v33) = v44;
      LODWORD(v33) = v21 + 1;
    }
    v22 = v33;
    if ((_DWORD)v33 == HIDWORD(v33) || v34 != (WTF *)&v35[1] && v34)
    {
      v26.super.isa = (Class)v6;
      if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v33, v26) == 1)
      {
        v32[0] = 1;
LABEL_57:
        JSC::throwOutOfMemoryError();
        v24 = 1;
        goto LABEL_38;
      }
    }
    else
    {
      *((_QWORD *)v34 + v33) = v6;
      LODWORD(v33) = v22 + 1;
    }
    if (v32[0])
      goto LABEL_57;
    v47 = v34;
    LODWORD(v48) = v33;
    JSC::call();
    if (*(_QWORD *)(v42 + 16))
      v24 = 3;
    else
      v24 = 0;
LABEL_38:
    v25 = v35[0];
    if (v35[0])
    {
      v47 = (WTF *)&v33;
      v27 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(v35[0], (uint64_t *)&v47);
      WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v25, v27);
    }
    if (v34 != (WTF *)&v35[1] && v34)
      WTF::fastFree(v34, v23);
    if (v39 && v37 != -1)
      ((void (*)(char *, char *))off_1E32B5D48[v37])(v32, v36);
  }
  while (!v24);
  if (v24 == 3)
  {
LABEL_62:
    v29 = 10;
    goto LABEL_64;
  }
  v29 = 0;
LABEL_64:
  if (v40[0])
  {
    if (*(_DWORD *)(v40[0] + 8) == 1)
      (*(void (**)(void))(*(_QWORD *)v40[0] + 8))();
    else
      --*(_DWORD *)(v40[0] + 8);
  }
  return (_BYTE *)v29;
}

unint64_t WebCore::iteratorCreate<WebCore::MediaKeyStatusMapIterator>(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char **v13;
  int v14;
  unint64_t v15;
  JSC::JSCell *v16;
  JSC::JSObject *Object;
  uint64_t *v18;
  unint64_t SlowCase;
  uint64_t v20;
  int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  JSC::Structure *v28;
  int v29;
  JSC::JSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  JSC::Structure *v40;
  WTF *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  WTF::StringImpl *v54[6];
  int v55;
  int v56;
  int v57;
  JSC::Structure *v58;

  v4 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28);
  v5 = *(_QWORD *)(v4 + 56);
  v6 = (unint64_t *)(v5 + 40136);
  v7 = *(_QWORD *)(v4 + 3296);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 - 8);
    v9 = ((unint64_t)&WebCore::MediaKeyStatusMapIterator::s_info
        + ~((_QWORD)&WebCore::MediaKeyStatusMapIterator::s_info << 32)) ^ (((unint64_t)&WebCore::MediaKeyStatusMapIterator::s_info
                                                                          + ~((_QWORD)&WebCore::MediaKeyStatusMapIterator::s_info << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = *(char ***)(v7 + 16 * v12);
    if (v13 == &WebCore::MediaKeyStatusMapIterator::s_info)
    {
LABEL_6:
      v15 = *(_QWORD *)(v7 + 16 * v12 + 8);
      if (v15)
        goto LABEL_32;
    }
    else
    {
      v14 = 1;
      while (v13)
      {
        v12 = ((_DWORD)v12 + v14) & v8;
        v13 = *(char ***)(v7 + 16 * v12);
        ++v14;
        if (v13 == &WebCore::MediaKeyStatusMapIterator::s_info)
          goto LABEL_6;
      }
    }
  }
  v16 = *(JSC::JSCell **)(v4 + 696);
  LODWORD(v54[0]) = 23;
  if (((unint64_t)v16 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v16);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v5);
  }
  v18 = (uint64_t *)(v5 + 38904);
  SlowCase = *v6;
  if (*v6 < *(_QWORD *)(v5 + 40144))
    goto LABEL_11;
  SlowCase = *(_QWORD *)(v5 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v51 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v5 + 40160);
    *(_QWORD *)(v5 + 40144) = SlowCase + HIDWORD(v51);
    *(_QWORD *)(v5 + 40152) = SlowCase + (int)v51;
LABEL_11:
    *v6 = SlowCase + 128;
    goto LABEL_12;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_12:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v5, v4, v16, v54, &WebCore::JSDOMIteratorPrototype<WebCore::JSMediaKeyStatusMap,WebCore::MediaKeyStatusMapIteratorTraits>::s_info, 0, 0);
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v20 = *v18;
  if (*(_QWORD *)(v5 + 38904) < *(_QWORD *)(v5 + 38912))
    goto LABEL_15;
  v20 = *(_QWORD *)(v5 + 38920);
  if ((v20 & 1) == 0)
  {
    v52 = *(_QWORD *)(v20 + 8) ^ *(_QWORD *)(v5 + 38928);
    *(_QWORD *)(v5 + 38912) = v20 + HIDWORD(v52);
    *(_QWORD *)(v5 + 38920) = v20 + (int)v52;
LABEL_15:
    *v18 = v20 + 16;
    goto LABEL_16;
  }
  JSC::sanitizeStackForVM();
  v20 = JSC::LocalAllocator::allocateSlowCase();
LABEL_16:
  *(_DWORD *)v20 = 0;
  v21 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v20 = SlowCase >> 4;
  *(_DWORD *)(v20 + 4) = v21;
  *(_QWORD *)(v20 + 8) = 0;
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  v22 = *(WTF::StringImpl **)(*(_QWORD *)(v5 + 41952) + 2000);
  if (v22)
  {
    *(_DWORD *)v22 += 2;
    v54[0] = v22;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition();
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v23);
    else
      *(_DWORD *)v22 -= 2;
  }
  else
  {
    v54[0] = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition();
  }
  v24 = *(_QWORD *)(*(_QWORD *)(v5 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v26 = JSC::JSString::create(v5, v54);
  v27 = v54[0];
  v54[0] = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v25);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = (JSC::Structure *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE));
  v57 = *(_DWORD *)v20;
  v58 = v28;
  v29 = JSC::Structure::outOfLineCapacity(v28);
  v55 = 0;
  v56 = v29;
  v54[0] = (WTF::StringImpl *)&v56;
  v54[1] = (WTF::StringImpl *)v20;
  v54[2] = (WTF::StringImpl *)v5;
  v54[3] = (WTF::StringImpl *)&v57;
  v54[4] = (WTF::StringImpl *)&v58;
  v54[5] = (WTF::StringImpl *)&v55;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v28, (JSC::VM *)v5, v24, 6, (uint64_t)v54);
  if ((*(_BYTE *)((16 * *(unsigned int *)v20) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v20, v5, v55, v26);
  *((_DWORD *)v28 + 4) |= 0x10u;
  LODWORD(v54[0]) = 23;
  if ((v20 & 0xFFFE000000000002) == 0)
  {
    v30 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v20);
    if (v30)
      JSC::JSObject::didBecomePrototype(v30, (JSC::VM *)v5);
  }
  v31 = *v6;
  if (*v6 >= *(_QWORD *)(v5 + 40144))
  {
    v31 = *(_QWORD *)(v5 + 40152);
    if ((v31 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v31 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_29;
    }
    v53 = *(_QWORD *)(v31 + 8) ^ *(_QWORD *)(v5 + 40160);
    *(_QWORD *)(v5 + 40144) = v31 + HIDWORD(v53);
    *(_QWORD *)(v5 + 40152) = v31 + (int)v53;
  }
  *v6 = v31 + 128;
LABEL_29:
  *(_DWORD *)v31 = 0;
  MEMORY[0x19AEA4278](v31, v5, v4, v20, v54, &WebCore::MediaKeyStatusMapIterator::s_info, 0, 0, 0);
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  v15 = WebCore::cacheDOMStructure((JSCell *)v4, v31, (uint64_t)&WebCore::MediaKeyStatusMapIterator::s_info);
LABEL_32:
  v32 = *(_QWORD *)(v5 + 41456);
  v33 = *(_QWORD *)(v32 + 23536);
  v34 = *(_QWORD **)(v33 + 624);
  if (v34)
    goto LABEL_52;
  v35 = *(_QWORD *)(v32 + 22648);
  if (__ldaxr((unsigned __int8 *)v35))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v35))
  {
    goto LABEL_37;
  }
  MEMORY[0x19AEA534C](v35);
LABEL_37:
  v37 = *(_QWORD *)(v35 + 2824);
  if (!*(_QWORD *)(v37 + 624))
  {
    v38 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v54, "IsoSpace T");
    v58 = 0;
    MEMORY[0x19AEA3204](v38, v54, v5 + 192, v5 + 1872, 56, 8, &v58);
    v40 = v58;
    v58 = 0;
    if (v40)
      (*(void (**)(JSC::Structure *))(*(_QWORD *)v40 + 8))(v40);
    v41 = v54[0];
    v54[0] = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 1)
        WTF::fastFree(v41, v39);
      else
        --*(_DWORD *)v41;
    }
    v42 = *(_QWORD *)(v37 + 624);
    *(_QWORD *)(v37 + 624) = v38;
    if (v42)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  }
  v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v33 + 624);
  *(_QWORD *)(v33 + 624) = v34;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v35);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_51;
  }
  if (__stlxr(0, (unsigned __int8 *)v35))
LABEL_51:
    WTF::Lock::unlockSlow((WTF::Lock *)v35);
LABEL_52:
  v47 = v34[3];
  if (v47 < v34[4])
  {
LABEL_53:
    v34[3] = v47 + 64;
    goto LABEL_54;
  }
  v47 = v34[5];
  if ((v47 & 1) == 0)
  {
    v50 = *(_QWORD *)(v47 + 8) ^ v34[6];
    v34[4] = v47 + HIDWORD(v50);
    v34[5] = v47 + (int)v50;
    goto LABEL_53;
  }
  JSC::sanitizeStackForVM();
  v47 = JSC::LocalAllocator::allocateSlowCase();
LABEL_54:
  *(_DWORD *)v47 = 0;
  WebCore::JSDOMObject::JSDOMObject(v47, v15);
  v48 = *(_QWORD *)(a1 + 24);
  WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                    * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                    + 0x28));
  ++*(_DWORD *)(v48 + 8);
  *(_QWORD *)(v47 + 24) = v48;
  *(_QWORD *)(v47 + 32) = 0;
  *(_BYTE *)(v47 + 40) = 1;
  *(_DWORD *)(v47 + 48) = a2;
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  return v47;
}

uint64_t WebCore::JSDOMIteratorPrototype<WebCore::JSMediaKeyStatusMap,WebCore::MediaKeyStatusMapIteratorTraits>::next(JSC *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  _DWORD **v10;
  JSC::ArrayBuffer *v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  JSC::JSGlobalObject *v15;
  _DWORD *v16;
  JSValue v17;
  uint64_t IteratorResultObject;
  uint64_t v20;
  uint64_t v21;
  JSC::JSGlobalObject *v22;
  uint64_t v23;
  JSC::VM *v24;
  int v25;
  uint64_t v26;
  void *v27;
  JSValue v28;
  char hasExceptionsAfterHandlingTraps;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  JSC::ArrayBuffer *v33;
  uint64_t v34;
  void *v35;
  char v36[8];
  unsigned int v37;
  unsigned __int8 v38;
  char v39;
  uint64_t *v40;
  int v41;
  JSC::JSGlobalObject *v42;
  char v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  WTF *v47;
  uint64_t *v48;
  JSC::JSGlobalObject *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;

  v3 = *(_QWORD *)(a2 + 40);
  if ((v3 & 0xFFFE000000000002) != 0)
    return JSC::throwTypeError();
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSDOMIteratorBase<WebCore::JSMediaKeyStatusMap,WebCore::MediaKeyStatusMapIteratorTraits>::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSDOMIteratorBase<WebCore::JSMediaKeyStatusMap,WebCore::MediaKeyStatusMapIteratorTraits>::s_info
         && v6 != 0);
  }
  if (!v5)
    return JSC::throwTypeError();
  if (!*(_BYTE *)(v3 + 40))
  {
LABEL_28:
    v17.super.isa = (Class)1;
    return JSC::createIteratorResultObject(this, (JSC::JSGlobalObject *)0xA, v17);
  }
  v10 = (_DWORD **)(v3 + 24);
  WebCore::MediaKeyStatusMap::Iterator::next((uint64_t *)(v3 + 24), (uint64_t)v36);
  if (!v39)
  {
    if (*(_BYTE *)(v3 + 40))
    {
      v16 = *v10;
      *v10 = 0;
      if (v16)
      {
        if (v16[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
        else
          --v16[2];
      }
      *(_BYTE *)(v3 + 40) = 0;
    }
    goto LABEL_28;
  }
  v12 = *(_DWORD *)(v3 + 48);
  if (v12 == 2)
  {
    v20 = *(_QWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x28);
    if (v37 == -1)
      v21 = -1;
    else
      v21 = v37;
    LOBYTE(v42) = 0;
    v43 = 0;
    v44 = v21;
    v45 = &v44;
    v46 = (uint64_t)&v42;
    v47 = this;
    v48 = (uint64_t *)v20;
    v49 = (JSC::JSGlobalObject *)v36;
    _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_18IDLArrayBufferViewENS_14IDLArrayBufferEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6RefPtrINS8_15ArrayBufferViewENSF_12RawPtrTraitsISH_EENSF_21DefaultRefDerefTraitsISH_EEEENSG_INS8_11ArrayBufferENSI_ISN_EENSK_ISN_EEEEEEEEUlTyvE_JNSD_17integral_constantIlLl0EEENSV_IlLl1EEEEEET_SY_((uint64_t)&v45, v11, (uint64_t)&v40);
    if (v43)
    {
      v22 = v42;
      v23 = WebCore::convertEnumerationToJS<WebCore::CDMKeyStatus>(*((_QWORD *)this + 7), (WTF::StringImpl *)v38);
      LOBYTE(v45) = 0;
      v48 = 0;
      v50 = 0u;
      v51 = 0u;
      v52 = 0u;
      v47 = (WTF *)&v49;
      v49 = v22;
      *(_QWORD *)&v50 = v23;
      v53 = 0;
      v46 = 0x800000002;
      v24 = *(JSC::VM **)(v20 + 56);
      v25 = *(_DWORD *)(v20 + 896);
      v40 = (uint64_t *)&v49;
      v41 = 2;
      if (v25)
        v26 = 16 * (v25 & 0xFFFFFFFE);
      else
        v26 = 0;
      if (*((_DWORD *)v24 + 20)
        && (v35 = (void *)v26,
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v24),
            v27 = v35,
            (hasExceptionsAfterHandlingTraps & 1) != 0))
      {
        v15 = 0;
      }
      else
      {
        v15 = (JSC::JSGlobalObject *)JSC::constructArray();
      }
      if (v48)
      {
        v40 = &v46;
        v30 = v48;
        v31 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(v48, (uint64_t *)&v40);
        WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v30, v31);
      }
      if (v47 != (WTF *)&v49 && v47)
        WTF::fastFree(v47, v27);
      goto LABEL_47;
    }
    goto LABEL_53;
  }
  if (v12 == 1)
  {
    v15 = (JSC::JSGlobalObject *)WebCore::convertEnumerationToJS<WebCore::CDMKeyStatus>(*((_QWORD *)this + 7), (WTF::StringImpl *)v38);
    goto LABEL_47;
  }
  if (v12)
  {
    v15 = 0;
LABEL_47:
    v28.super.isa = 0;
    IteratorResultObject = JSC::createIteratorResultObject(this, v15, v28);
    if (v39)
    {
      if (v37 != -1)
        ((void (*)(uint64_t **, char *))off_1E32B5D48[v37])(&v45, v36);
    }
    return IteratorResultObject;
  }
  v13 = *(uint64_t **)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x28);
  if (v37 == -1)
    v14 = -1;
  else
    v14 = v37;
  LOBYTE(v42) = 0;
  v43 = 0;
  v44 = v14;
  v45 = &v44;
  v46 = (uint64_t)&v42;
  v47 = this;
  v48 = v13;
  v49 = (JSC::JSGlobalObject *)v36;
  _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_18IDLArrayBufferViewENS_14IDLArrayBufferEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6RefPtrINS8_15ArrayBufferViewENSF_12RawPtrTraitsISH_EENSF_21DefaultRefDerefTraitsISH_EEEENSG_INS8_11ArrayBufferENSI_ISN_EENSK_ISN_EEEEEEEEUlTyvE_JNSD_17integral_constantIlLl0EEENSV_IlLl1EEEEEET_SY_((uint64_t)&v45, v11, (uint64_t)&v40);
  if (v43)
  {
    v15 = v42;
    goto LABEL_47;
  }
LABEL_53:
  v32 = std::__throw_bad_optional_access[abi:sn180100]();
  return _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_18IDLArrayBufferViewENS_14IDLArrayBufferEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6RefPtrINS8_15ArrayBufferViewENSF_12RawPtrTraitsISH_EENSF_21DefaultRefDerefTraitsISH_EEEENSG_INS8_11ArrayBufferENSI_ISN_EENSK_ISN_EEEEEEEEUlTyvE_JNSD_17integral_constantIlLl0EEENSV_IlLl1EEEEEET_SY_(v32, v33, v34);
}

uint64_t _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_18IDLArrayBufferViewENS_14IDLArrayBufferEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6RefPtrINS8_15ArrayBufferViewENSF_12RawPtrTraitsISH_EENSF_21DefaultRefDerefTraitsISH_EEEENSG_INS8_11ArrayBufferENSI_ISN_EENSK_ISN_EEEEEEEEUlTyvE_JNSD_17integral_constantIlLl0EEENSV_IlLl1EEEEEET_SY_@<X0>(uint64_t result@<X0>, JSC::ArrayBuffer *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  WebCore *v11;
  JSC::JSGlobalObject *v12;
  JSC::CallFrame *v13;

  v3 = result;
  v5 = **(_QWORD **)result;
  if (!v5)
  {
    v6 = *(_QWORD *)(result + 32);
    if (*(_DWORD *)(v6 + 8))
      goto LABEL_18;
    if (*(_QWORD *)v6)
      result = JSC::ArrayBufferView::wrap(*(JSC::ArrayBufferView **)v6, *(JSC::JSGlobalObject **)(result + 16), *(JSC::JSGlobalObject **)(result + 24));
    else
      result = 2;
    v7 = *(_QWORD *)(v3 + 8);
    if (!*(_BYTE *)(v7 + 8))
      *(_BYTE *)(v7 + 8) = 1;
    *(_QWORD *)v7 = result;
    v5 = **(_QWORD **)v3;
  }
  if (v5 != 1)
  {
LABEL_16:
    v10 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)a3 = *(_OWORD *)v3;
    *(_OWORD *)(a3 + 16) = v10;
    *(_QWORD *)(a3 + 32) = *(_QWORD *)(v3 + 32);
    return result;
  }
  v8 = *(_QWORD *)(v3 + 32);
  if (*(_DWORD *)(v8 + 8) == 1)
  {
    if (*(_QWORD *)v8)
      result = WebCore::toJS(*(WebCore **)(v3 + 16), *(_QWORD *)(v3 + 24), *(WebCore::JSDOMGlobalObject **)v8, a2);
    else
      result = 2;
    v9 = *(_QWORD *)(v3 + 8);
    if (!*(_BYTE *)(v9 + 8))
      *(_BYTE *)(v9 + 8) = 1;
    *(_QWORD *)v9 = result;
    goto LABEL_16;
  }
LABEL_18:
  v11 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsMediaKeySystemAccessPrototypeFunction_getConfiguration(v11, v12, v13);
}

_BYTE *WebCore::jsMediaKeySystemAccessPrototypeFunction_getConfiguration(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  unsigned int *v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  JSC::VM *v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t i;
  uint64_t v27;
  uint64_t v28;
  int v29;
  objc_class *v30;
  int v31;
  unsigned __int8 *v32;
  unsigned int v33;
  unsigned int v34;
  JSValue v35;
  void *v36;
  uint64_t v37;
  JSC::VM *v38;
  uint64_t v39;
  uint64_t *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF *v52;
  void *v53;
  void *v54;
  size_t v55;
  void *v56;
  unsigned __int8 *v57;
  JSC::VM *v58;
  unsigned __int8 *v59;
  objc_class *v60;
  int v61;
  BOOL v62;
  JSValue v63;
  void *v64;
  WTF *v65;
  int v66;
  JSC::VM *v67;
  uint64_t v68;
  uint64_t *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  unsigned __int8 *v76;
  unsigned int v77;
  unsigned int v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  unsigned int *v82;
  uint64_t v83;
  WTF *v84;
  int v85;
  WTF::StringImpl *v86;
  uint64_t v87;
  WTF *v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  JSC::VM *v94;

  v4 = *((_QWORD *)a2 + 5);
  v5 = *((_QWORD *)this + 7);
  v83 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v83, "MediaKeySystemAccess", "getConfiguration");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMediaKeySystemAccess::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMediaKeySystemAccess::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v83, "MediaKeySystemAccess", "getConfiguration");
  v11 = *(unsigned int **)(*(_QWORD *)(v4 + 24) + 48);
  v12 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  v13 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v14 = 8 * *(unsigned __int8 *)(v13 + 14);
  v15 = JSC::allocateCell<JSC::JSFinalObject>(v5, v14 + 16);
  v16 = *(_DWORD *)(v13 + 8);
  *(_DWORD *)v15 = v13 >> 4;
  *(_DWORD *)(v15 + 4) = v16;
  *(_QWORD *)(v15 + 8) = 0;
  bzero((void *)(v15 + 16), v14);
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  v17 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::CDMMediaCapability>>>::convert<WebCore::CDMMediaCapability,0ul>((uint64_t)this, v12, v11 + 6);
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v18 = v86;
  v86 = 0;
  v87 = v15;
  v88 = (WTF *)0x1000000FFFFFFFFLL;
  *(_QWORD *)&v89 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v15, (JSC::VM *)v5, (unint64_t)v18, v17, 0, (uint64_t)&v86);
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v19);
    else
      *(_DWORD *)v18 -= 2;
  }
  v20 = WebCore::convertEnumerationToJS<WebCore::CDMRequirement>(*((_QWORD *)this + 7), (WTF::StringImpl *)*((unsigned __int8 *)v11 + 56));
  if (*(_DWORD *)(v5 + 80))
  {
    if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
      return 0;
  }
  v81 = v12;
  WTF::AtomStringImpl::addLiteral();
  v21 = v86;
  v86 = 0;
  v87 = v15;
  v88 = (WTF *)0x1000000FFFFFFFFLL;
  *(_QWORD *)&v89 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v15, (JSC::VM *)v5, (unint64_t)v21, v20, 0, (uint64_t)&v86);
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v22);
    else
      *(_DWORD *)v21 -= 2;
  }
  v23 = (JSC::VM *)*((_QWORD *)this + 7);
  v94 = v23;
  LOBYTE(v86) = 0;
  v87 = 0x800000000;
  v88 = (WTF *)((char *)&v89 + 8);
  v89 = 0u;
  v90 = 0u;
  v91 = 0u;
  v92 = 0u;
  v93 = 0;
  v24 = v11[5];
  if (v24 >= 9)
  {
    LOBYTE(v86) = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v87) == 1;
    v24 = v11[5];
  }
  v82 = v11;
  if (v24)
  {
    v25 = (uint64_t *)*((_QWORD *)v11 + 1);
    for (i = 8 * v24; i; i -= 8)
    {
      v27 = *((_QWORD *)this + 7);
      v28 = *v25;
      if (*v25 && (v29 = *(_DWORD *)(v28 + 4)) != 0)
      {
        if (v29 != 1)
          goto LABEL_29;
        v32 = *(unsigned __int8 **)(v28 + 8);
        if ((*(_BYTE *)(v28 + 16) & 4) != 0)
        {
          v33 = *v32;
        }
        else
        {
          v34 = *(unsigned __int16 *)v32;
          if (v34 > 0xFF)
          {
LABEL_29:
            v30 = *(objc_class **)(v27 + 64760);
            if (!v30 || v28 != *((_QWORD *)v30 + 1))
              v30 = (objc_class *)JSC::jsStringWithCacheSlowCase();
            goto LABEL_32;
          }
          v33 = v34;
        }
        v30 = *(objc_class **)(v27 + 8 * v33 + 42216);
      }
      else
      {
        v30 = *(objc_class **)(v27 + 41968);
      }
LABEL_32:
      if (*((_DWORD *)v23 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v23) & 1) != 0)
        goto LABEL_142;
      v31 = v87;
      if ((_DWORD)v87 == HIDWORD(v87) || v88 != (WTF *)((char *)&v89 + 8) && v88)
      {
        v35.super.isa = v30;
        if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v87, v35) == 1)
          LOBYTE(v86) = 1;
      }
      else
      {
        *((_QWORD *)v88 + v87) = v30;
        LODWORD(v87) = v31 + 1;
      }
      ++v25;
    }
  }
  if ((_BYTE)v86)
  {
    JSC::throwOutOfMemoryError();
LABEL_142:
    v39 = 0;
    v37 = v12;
  }
  else
  {
    v84 = v88;
    v85 = v87;
    v37 = v12;
    v38 = *(JSC::VM **)(v12 + 56);
    if (*((_DWORD *)v38 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v38) & 1) != 0)
      v39 = 0;
    else
      v39 = JSC::constructArray();
  }
  v40 = (uint64_t *)v89;
  if ((_QWORD)v89)
  {
    v84 = (WTF *)&v87;
    v79 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>((uint64_t *)v89, (uint64_t *)&v84);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v40, v79);
  }
  if (v88 != (WTF *)((char *)&v89 + 8) && v88)
    WTF::fastFree(v88, v36);
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v41 = v86;
  v86 = 0;
  v87 = v15;
  v88 = (WTF *)0x1000000FFFFFFFFLL;
  *(_QWORD *)&v89 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v15, (JSC::VM *)v5, (unint64_t)v41, v39, 0, (uint64_t)&v86);
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v42);
    else
      *(_DWORD *)v41 -= 2;
  }
  v43 = *((_QWORD *)this + 7);
  v44 = *(_QWORD *)v82;
  if (!*(_QWORD *)v82 || (v45 = *(_DWORD *)(v44 + 4)) == 0)
  {
    v46 = *(_QWORD *)(v43 + 41968);
    goto LABEL_65;
  }
  if (v45 != 1)
    goto LABEL_62;
  v76 = *(unsigned __int8 **)(v44 + 8);
  if ((*(_BYTE *)(v44 + 16) & 4) != 0)
  {
    v77 = *v76;
LABEL_128:
    v46 = *(_QWORD *)(v43 + 8 * v77 + 42216);
    goto LABEL_65;
  }
  v78 = *(unsigned __int16 *)v76;
  if (v78 <= 0xFF)
  {
    v77 = v78;
    goto LABEL_128;
  }
LABEL_62:
  v46 = *(_QWORD *)(v43 + 64760);
  if (!v46 || v44 != *(_QWORD *)(v46 + 8))
    v46 = JSC::jsStringWithCacheSlowCase();
LABEL_65:
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v47 = v86;
  v86 = 0;
  v87 = v15;
  v88 = (WTF *)0x1000000FFFFFFFFLL;
  *(_QWORD *)&v89 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v15, (JSC::VM *)v5, (unint64_t)v47, v46, 0, (uint64_t)&v86);
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WTF::StringImpl::destroy(v47, v48);
    else
      *(_DWORD *)v47 -= 2;
  }
  v49 = WebCore::convertEnumerationToJS<WebCore::CDMRequirement>(*((_QWORD *)this + 7), (WTF::StringImpl *)*((unsigned __int8 *)v82 + 57));
  if (*(_DWORD *)(v5 + 80))
  {
    if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
      return 0;
  }
  WTF::AtomStringImpl::addLiteral();
  v50 = v86;
  v86 = 0;
  v87 = v15;
  v88 = (WTF *)0x1000000FFFFFFFFLL;
  *(_QWORD *)&v89 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v15, (JSC::VM *)v5, (unint64_t)v50, v49, 0, (uint64_t)&v86);
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, v51);
    else
      *(_DWORD *)v50 -= 2;
  }
  v52 = (WTF *)v82[19];
  if ((_DWORD)v52)
  {
    v53 = (void *)WTF::fastMalloc(v52);
    memcpy(v53, *((const void **)v82 + 8), v82[19]);
    WTF::fastFree((WTF *)v53, v54);
    v55 = v82[19];
    if ((_DWORD)v55)
    {
      v56 = (void *)WTF::fastMalloc((WTF *)v82[19]);
      memcpy(v56, *((const void **)v82 + 8), v82[19]);
      v57 = (unsigned __int8 *)WTF::fastMalloc((WTF *)v55);
      memcpy(v57, v56, v55);
      goto LABEL_79;
    }
    v57 = 0;
  }
  else
  {
    v57 = 0;
    LODWORD(v55) = 0;
  }
  v56 = 0;
LABEL_79:
  v58 = (JSC::VM *)*((_QWORD *)this + 7);
  v94 = v58;
  LOBYTE(v86) = 0;
  v87 = 0x800000000;
  v88 = (WTF *)((char *)&v89 + 8);
  v89 = 0u;
  v90 = 0u;
  v91 = 0u;
  v92 = 0u;
  v93 = 0;
  if (v55 >= 9)
  {
    v55 = v55;
    LOBYTE(v86) = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v87) == 1;
LABEL_82:
    v59 = v57;
    while (1)
    {
      v60 = (objc_class *)WebCore::convertEnumerationToJS<WebCore::CDMSessionType>(*((_QWORD *)this + 7), (WTF::StringImpl *)*v59);
      if (*((_DWORD *)v58 + 20))
      {
        if ((JSC::VM::hasExceptionsAfterHandlingTraps(v58) & 1) != 0)
          break;
      }
      v61 = v87;
      if ((_DWORD)v87 != HIDWORD(v87) && (v88 != (WTF *)((char *)&v89 + 8) ? (v62 = v88 == 0) : (v62 = 1), v62))
      {
        *((_QWORD *)v88 + v87) = v60;
        LODWORD(v87) = v61 + 1;
      }
      else
      {
        v63.super.isa = v60;
        if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v87, v63) == 1)
          LOBYTE(v86) = 1;
      }
      ++v59;
      if (!--v55)
      {
        if (!(_BYTE)v86)
        {
          v65 = v88;
          v66 = v87;
          v37 = v81;
          goto LABEL_100;
        }
        JSC::throwOutOfMemoryError();
        break;
      }
    }
    v68 = 0;
    v37 = v81;
    goto LABEL_102;
  }
  if ((_DWORD)v55)
  {
    v55 = v55;
    goto LABEL_82;
  }
  v66 = 0;
  v65 = (WTF *)((char *)&v89 + 8);
LABEL_100:
  v84 = v65;
  v85 = v66;
  v67 = *(JSC::VM **)(v37 + 56);
  if (*((_DWORD *)v67 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v67) & 1) != 0)
    v68 = 0;
  else
    v68 = JSC::constructArray();
LABEL_102:
  v69 = (uint64_t *)v89;
  if ((_QWORD)v89)
  {
    v84 = (WTF *)&v87;
    v80 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>((uint64_t *)v89, (uint64_t *)&v84);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v69, v80);
  }
  if (v88 != (WTF *)((char *)&v89 + 8) && v88)
    WTF::fastFree(v88, v64);
  if (v57)
    WTF::fastFree((WTF *)v57, v64);
  if (v56)
    WTF::fastFree((WTF *)v56, v64);
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v70 = v86;
  v86 = 0;
  v87 = v15;
  v88 = (WTF *)0x1000000FFFFFFFFLL;
  *(_QWORD *)&v89 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v15, (JSC::VM *)v5, (unint64_t)v70, v68, 0, (uint64_t)&v86);
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
      WTF::StringImpl::destroy(v70, v71);
    else
      *(_DWORD *)v70 -= 2;
  }
  v72 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::CDMMediaCapability>>>::convert<WebCore::CDMMediaCapability,0ul>((uint64_t)this, v37, v82 + 10);
  if (*(_DWORD *)(v5 + 80))
  {
    if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
      return 0;
  }
  WTF::AtomStringImpl::addLiteral();
  v73 = v86;
  v86 = 0;
  v87 = v15;
  v88 = (WTF *)0x1000000FFFFFFFFLL;
  *(_QWORD *)&v89 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v15, (JSC::VM *)v5, (unint64_t)v73, v72, 0, (uint64_t)&v86);
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
      WTF::StringImpl::destroy(v73, v74);
    else
      *(_DWORD *)v73 -= 2;
  }
  return (_BYTE *)v15;
}

unint64_t WebCore::jsMediaKeySystemAccessPrototypeFunction_createMediaKeys(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  uint64_t (*v14)();
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  objc_class *v27;
  uint64_t (*v28)();
  uint64_t (*v29)();

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194D38FECLL);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (uint64_t (*)())WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject((WebCore::DOMGuardedObject *)v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v29 = (uint64_t (*)())v15;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_34;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSMediaKeySystemAccess::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSMediaKeySystemAccess::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_34:
    WebCore::rejectPromiseWithThisTypeError((WebCore *)v14, (WebCore::DeferredPromise *)"MediaKeySystemAccess", "createMediaKeys", v16);
LABEL_28:
    if (*((_DWORD *)v14 + 4) == 1)
      (*(void (**)(uint64_t (*)()))(*(_QWORD *)v14 + 16))(v14);
    else
      --*((_DWORD *)v14 + 4);
    goto LABEL_30;
  }
  v23 = *(_QWORD *)(v17 + 24);
  v24 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v24)
    goto LABEL_28;
  if (*(_BYTE *)(v24 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194D3900CLL);
  }
  WebCore::MediaKeySystemAccess::createMediaKeys(v23, v24 - 192, &v29);
  v14 = v29;
  if (v29)
    goto LABEL_28;
LABEL_30:
  v25 = *(_QWORD *)(v10 + 16);
  if (v25)
  {
    if (*(_QWORD *)(v10 + 24) != v25)
    {
      v27 = *(objc_class **)(v25 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, (WebCore::DOMGuardedObject **)&v29);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v29, v27, 0);
      v28 = v29;
      v29 = 0;
      if (v28)
      {
        if (*((_DWORD *)v28 + 4) == 1)
          (*(void (**)(uint64_t (*)()))(*(_QWORD *)v28 + 16))(v28);
        else
          --*((_DWORD *)v28 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore14CDMSessionTypeELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore18CDMMediaCapabilityELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF *result;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v4 = 24 * v3;
    v5 = (WTF::StringImpl **)(*(_QWORD *)a2 + 8);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = *(v5 - 1);
      *(v5 - 1) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v5 += 3;
      v4 -= 24;
    }
    while (v4);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_10AtomStringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSD_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *result;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v5 = *(WTF::StringImpl ***)a2;
    v6 = 8 * v3;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

unint64_t WebCore::jsMediaKeysPrototypeFunction_createSession(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int16 v16;
  uint64_t v17;
  WebCore::Document *v18;
  JSC::VM *v19;
  JSC::VM *v20;
  unint64_t v21;
  bmalloc::api *v23;
  void *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  JSValue v27;
  char hasExceptionsAfterHandlingTraps;
  WebCore *v29;
  JSC::JSGlobalObject *v30;
  JSC::CallFrame *v31;
  unsigned __int16 v32;
  JSC::VM *v33;
  int v34[2];
  WTF::StringImpl *v35;
  int v36;
  _BYTE v37[8];
  WTF::StringImpl *v38;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v33 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v33, "MediaKeys", "createSession");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSMediaKeys::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSMediaKeys::s_info && v9 != 0);
  }
  if (!v8)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v33, "MediaKeys", "createSession");
  v12 = *(_QWORD *)(v5 + 24);
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v13)
    return 10;
  v14 = v13;
  if (*(_BYTE *)(v13 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194D393E8);
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    LOBYTE(v16) = 0;
  }
  else
  {
    v15 = *((_QWORD *)a2 + 6);
    if (v15 == 10)
    {
      LOBYTE(v16) = 0;
      goto LABEL_20;
    }
    *(_QWORD *)v34 = *((_QWORD *)this + 7);
    v16 = WebCore::parseEnumeration<WebCore::CDMSessionType>(this, v15);
    if (*(_DWORD *)(*(_QWORD *)v34 + 80))
    {
      v32 = v16;
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(*(JSC::VM **)v34);
      v16 = v32;
      if ((hasExceptionsAfterHandlingTraps & 1) != 0)
        return 0;
    }
    if (v16 <= 0xFFu)
    {
      WebCore::throwArgumentMustBeEnumError((uint64_t)this, (uint64_t)v34, 0, "sessionType", 12, "MediaKeys", 10, v17, "createSession", 14, "\"temporary\", \"persistent-usage-record\", \"persistent-license\"", 61);
      return 0;
    }
  }
LABEL_20:
  v18 = (WebCore::Document *)(v14 - 192);
  v19 = *(JSC::VM **)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  WebCore::MediaKeys::createSession(v12, v18, (WTF::String *)v16, (uint64_t)v34);
  if (!v36)
  {
    v20 = *(JSC::VM **)v34;
    *(_QWORD *)v34 = 0;
    v21 = WebCore::wrap<WebCore::MediaKeySession>((int)this, v19, (uint64_t)v20);
    if (*((_DWORD *)v20 + 6) == 1)
    {
      WebCore::MediaKeySession::~MediaKeySession(v20);
      bmalloc::api::isoDeallocate(v23, v24);
    }
    else
    {
      --*((_DWORD *)v20 + 6);
    }
LABEL_23:
    if (v36 != -1)
      ((void (*)(_BYTE *, int *))off_1E32B6000[v36])(v37, v34);
    return v21;
  }
  if (v36 == 1)
  {
    v25 = (WTF::StringImpl *)LOBYTE(v34[0]);
    v37[0] = v34[0];
    v26 = v35;
    v35 = 0;
    v38 = v26;
    if (!*((_QWORD *)v4 + 2))
    {
      v27.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v34[0]), (JSC::JSGlobalObject *)&v38);
      JSC::VM::throwException(v4, this, v27);
      v26 = v38;
    }
    v38 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v25);
      else
        *(_DWORD *)v26 -= 2;
    }
    v21 = 0;
    goto LABEL_23;
  }
  v29 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsMediaKeysPrototypeFunction_setServerCertificate(v29, v30, v31);
}

unint64_t WebCore::jsMediaKeysPrototypeFunction_setServerCertificate(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char **v21;
  BOOL v22;
  JSC::VM *v24;
  uint64_t v25;
  JSC::JSArrayBufferView *v26;
  JSC::ArrayBufferView *v27;
  int v28;
  uint64_t (*v29)();
  int v30;
  uint64_t v31;
  objc_class *v33;
  WebCore::DOMGuardedObject *v34;
  JSValue v35;
  WebCore::DOMGuardedObject *v36;
  JSC::ArrayBufferView *v37;
  int v38;
  uint64_t v39;
  int v40;
  char v41;
  WebCore::DOMGuardedObject *v42;
  JSC::ArrayBufferView *v43;
  int v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194D397F0);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v36 = v15;
  v18 = *((_QWORD *)a2 + 5);
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_43;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSMediaKeys::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSMediaKeys::s_info && v21 != 0);
  }
  if (!v20)
  {
LABEL_43:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"MediaKeys", "setServerCertificate", v17);
  }
  else
  {
    v24 = (JSC::VM *)*((_QWORD *)this + 7);
    if (*((_DWORD *)a2 + 8) != 1)
    {
      v25 = *(_QWORD *)(v18 + 24);
      v26 = (JSC::JSArrayBufferView *)*((_QWORD *)a2 + 6);
      v39 = *((_QWORD *)this + 7);
      v27 = (JSC::ArrayBufferView *)JSC::JSArrayBuffer::toWrapped((uint64_t)v24, (uint64_t)v26);
      if (v27)
      {
        *(_DWORD *)v27 += 2;
        v43 = v27;
        v28 = 1;
        v44 = 1;
      }
      else
      {
        JSC::JSArrayBufferView::toWrapped(v26, &v37);
        if (!v37)
        {
          JSC::throwTypeError();
          v30 = 1;
          v45 = 1;
          goto LABEL_35;
        }
        v28 = 0;
        v43 = v37;
        v44 = 0;
      }
      v45 = 0;
      LOBYTE(v37) = 0;
      v38 = -1;
      v29 = off_1E32B5D58[v28];
      ((void (*)(uint64_t *, JSC::ArrayBufferView **, JSC::ArrayBufferView **))v29)(&v39, &v37, &v43);
      v38 = v28;
      LOBYTE(v39) = 0;
      v40 = -1;
      ((void (*)(char *, uint64_t *, JSC::ArrayBufferView **))v29)(&v41, &v39, &v37);
      v40 = v28;
      WebCore::MediaKeys::setServerCertificate(v25, (uint64_t)&v39, (uint64_t *)&v36);
      if (v40 != -1)
        ((void (*)(char *, uint64_t *))off_1E32B5D48[v40])(&v41, &v39);
      v40 = -1;
      if (v38 != -1)
        ((void (*)(char *, JSC::ArrayBufferView **))off_1E32B5D48[v38])(&v41, &v37);
      v30 = v45;
      if (v45 == -1)
      {
LABEL_36:
        v14 = v36;
        v36 = 0;
        if (!v14)
          goto LABEL_39;
        goto LABEL_37;
      }
LABEL_35:
      ((void (*)(uint64_t *, JSC::ArrayBufferView **))off_1E32B5D68[v30])(&v39, &v43);
      goto LABEL_36;
    }
    v35.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v24, this, v35);
  }
  v36 = 0;
LABEL_37:
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_39:
  v31 = *(_QWORD *)(v10 + 16);
  if (v31)
  {
    if (*(_QWORD *)(v10 + 24) != v31)
    {
      v33 = *(objc_class **)(v31 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v42);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v42, v33, 0);
      v34 = v42;
      v42 = 0;
      if (v34)
      {
        if (*((_DWORD *)v34 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v34 + 16))(v34);
        else
          --*((_DWORD *)v34 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

WebCore::MediaKeySession *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore15MediaKeySessionENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WebCore::MediaKeySession **a2)
{
  WebCore::MediaKeySession *result;
  bmalloc::api *v3;
  void *v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 1)
    {
      WebCore::MediaKeySession::~MediaKeySession(result);
      return (WebCore::MediaKeySession *)bmalloc::api::isoDeallocate(v3, v4);
    }
    else
    {
      --*((_DWORD *)result + 6);
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore15MediaKeySessionENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::jsMediaListPrototypeFunction_item(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  const Condition *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  unsigned __int8 *v20;
  unsigned int v21;
  unsigned int v22;
  JSValue v24;
  JSC::VM *v25;
  WTF::StringImpl *v26;
  unsigned int v27[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "MediaList", "item");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMediaList::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMediaList::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "MediaList", "item");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v24);
  }
  v11 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v27);
  if (v27[1])
    return 0;
  WebCore::MediaList::item(v11, v27[0], v12, &v26);
  v14 = v26;
  if (!v26)
    return 2;
  v15 = *((_QWORD *)this + 7);
  v16 = (uint64_t *)(v15 + 41968);
  v17 = *((_DWORD *)v26 + 1);
  if (v17)
  {
    if (v17 != 1)
    {
LABEL_17:
      v18 = *(_QWORD *)(v15 + 64760);
      if (!v18 || v26 != *(WTF::StringImpl **)(v18 + 8))
        v18 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_20;
    }
    v20 = (unsigned __int8 *)*((_QWORD *)v26 + 1);
    if ((*((_BYTE *)v26 + 16) & 4) != 0)
    {
      v21 = *v20;
    }
    else
    {
      v22 = *(unsigned __int16 *)v20;
      if (v22 > 0xFF)
        goto LABEL_17;
      v21 = v22;
    }
    v16 = (uint64_t *)(v15 + 8 * v21 + 42216);
  }
  v18 = *v16;
LABEL_20:
  if (*(_DWORD *)v14 == 2)
    WTF::StringImpl::destroy(v14, v13);
  else
    *(_DWORD *)v14 -= 2;
  return v18;
}

_BYTE *WebCore::jsMediaListPrototypeFunction_deleteMedium(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::MediaList *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  JSValue v21;
  WTF::StringImpl *v22;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  JSValue v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  int v33[2];
  WTF::StringImpl *v34;
  char v35;

  v4 = *((_QWORD *)this + 7);
  v28 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "MediaList", "deleteMedium");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMediaList::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMediaList::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "MediaList", "deleteMedium");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v4, this, v21);
  }
  v11 = *(WebCore::MediaList **)(v5 + 24);
  v12 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v33 = v12;
  if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v12 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
      if (!v13)
        goto LABEL_18;
    }
    else if (!v13)
    {
LABEL_18:
      v31 = v13;
      goto LABEL_19;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v33, this);
LABEL_19:
  if (*(_DWORD *)(v4 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
    v14 = v31;
    if (hasExceptionsAfterHandlingTraps)
    {
      v30 = 1;
      v31 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v22);
        else
          *(_DWORD *)v14 -= 2;
      }
      v17 = 0;
      v18 = 1;
      goto LABEL_27;
    }
  }
  else
  {
    v14 = v31;
  }
  v30 = 0;
  v29 = 0;
  v31 = v14;
  WebCore::MediaList::deleteMedium(v11, (const WTF::String *)&v31, (uint64_t)v33);
  v16 = v31;
  v31 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (v35)
  {
    v24 = (WTF::StringImpl *)LOBYTE(v33[0]);
    LOBYTE(v31) = v33[0];
    v25 = v34;
    v34 = 0;
    v32 = v25;
    if (!*(_QWORD *)(v4 + 16))
    {
      v26.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v33[0]), (JSC::JSGlobalObject *)&v32);
      JSC::VM::throwException((JSC::VM *)v4, this, v26);
      v25 = v32;
    }
    v32 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v24);
      else
        *(_DWORD *)v25 -= 2;
    }
    if (v35)
    {
      v27 = v34;
      v34 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 != 2)
        {
          v17 = 0;
          *(_DWORD *)v27 -= 2;
          goto LABEL_26;
        }
        WTF::StringImpl::destroy(v27, v24);
      }
    }
    v17 = 0;
    goto LABEL_26;
  }
  v17 = 10;
LABEL_26:
  v18 = 0;
LABEL_27:
  ((void (*)(int *, uint64_t *))off_1E32B54C8[v18])(v33, &v29);
  return (_BYTE *)v17;
}

_BYTE *WebCore::jsMediaListPrototypeFunction_appendMedium(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  JSValue v21;
  WTF::StringImpl *v22;
  int hasExceptionsAfterHandlingTraps;
  JSC::VM *v24;
  uint64_t v25;
  int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v24 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v24, "MediaList", "appendMedium");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMediaList::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMediaList::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v24, "MediaList", "appendMedium");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v21);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = *((_QWORD *)a2 + 6);
  v28 = (WTF::StringImpl *)v12;
  if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v12 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
      if (!v13)
        goto LABEL_18;
    }
    else if (!v13)
    {
LABEL_18:
      v27 = v13;
      goto LABEL_19;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v28, this);
LABEL_19:
  if (*((_DWORD *)v4 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    v14 = v27;
    if (hasExceptionsAfterHandlingTraps)
    {
      v26 = 1;
      v27 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v22);
        else
          *(_DWORD *)v14 -= 2;
      }
      v18 = 0;
      v17 = 1;
      goto LABEL_25;
    }
  }
  else
  {
    v14 = v27;
  }
  v26 = 0;
  v25 = 0;
  v28 = v14;
  WebCore::MediaList::appendMedium(v11, (unsigned int **)&v28);
  v16 = v28;
  v28 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = 0;
  v18 = 10;
LABEL_25:
  ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32B54C8[v17])(&v28, &v25);
  return (_BYTE *)v18;
}

_BYTE *WebCore::jsMediaListPrototypeFunction_toString(WebCore *this, JSC::JSGlobalObject *a2, const Condition *a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t *v12;
  WTF::StringImpl *v13;
  int v14;
  uint64_t v15;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  WTF::StringImpl *v21;

  v4 = *((_QWORD *)a2 + 5);
  v20 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "MediaList", "toString");
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSMediaList::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSMediaList::s_info && v7 != 0);
  }
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "MediaList", "toString");
  WebCore::MediaList::mediaText(*(WebCore::MediaList **)(v4 + 24), a2, a3, &v21);
  v11 = *((_QWORD *)this + 7);
  v12 = (uint64_t *)(v11 + 41968);
  v13 = v21;
  if (!v21)
    return (_BYTE *)*v12;
  v14 = *((_DWORD *)v21 + 1);
  if (v14)
  {
    if (v14 != 1)
    {
LABEL_15:
      v15 = *(_QWORD *)(v11 + 64760);
      if (!v15 || v21 != *(WTF::StringImpl **)(v15 + 8))
        v15 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_18;
    }
    v17 = (unsigned __int8 *)*((_QWORD *)v21 + 1);
    if ((*((_BYTE *)v21 + 16) & 4) != 0)
    {
      v18 = *v17;
    }
    else
    {
      v19 = *(unsigned __int16 *)v17;
      if (v19 > 0xFF)
        goto LABEL_15;
      v18 = v19;
    }
    v15 = *(_QWORD *)(v11 + 8 * v18 + 42216);
  }
  else
  {
    v15 = *v12;
  }
LABEL_18:
  if (*(_DWORD *)v13 == 2)
    WTF::StringImpl::destroy(v13, v10);
  else
    *(_DWORD *)v13 -= 2;
  return (_BYTE *)v15;
}

WebCore::MediaMetadata *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore13MediaMetadataENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WebCore::MediaMetadata *result;
  WTF *v3;
  void *v4;

  result = *(WebCore::MediaMetadata **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::MediaMetadata::~MediaMetadata(result, a2);
      return (WebCore::MediaMetadata *)WTF::fastFree(v3, v4);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore13MediaMetadataENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17MediaMetadataInitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;

  WTF::Vector<WebCore::InspectorAuditResourcesObject::Resource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(a2 + 24), (WTF::StringImpl *)a2);
  v4 = *(WTF::StringImpl **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore10MediaImageELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, unsigned int *a2)
{
  return WTF::Vector<WebCore::InspectorAuditResourcesObject::Resource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a2, (WTF::StringImpl *)a2);
}

_BYTE *WebCore::jsMediaQueryListPrototypeFunction_addListener(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  WebCore *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  JSValue v27;
  _DWORD *v28;
  _DWORD *v29;
  int v30;
  JSC::JSGlobalObject *v31;
  int v32;
  char v33;

  v8 = this;
  v9 = (_DWORD *)*((_QWORD *)this + 7);
  v28 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "MediaQueryList", "addListener");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSMediaQueryList::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSMediaQueryList::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "MediaQueryList", "addListener");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v9, v8, v27);
  }
  v16 = *(WebCore **)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  if ((v17 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v8 = 0;
    v30 = 0;
LABEL_20:
    v29 = 0;
    v31 = v8;
    WebCore::MediaQueryList::addListener(v16, (uint64_t *)&v31);
    if (v31)
    {
      if (*((_DWORD *)v31 + 4) == 1)
        (*(void (**)(void))(*(_QWORD *)v31 + 8))();
      else
        --*((_DWORD *)v31 + 4);
    }
    if (v9[20] && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
    {
      v23 = 0;
      v24 = 0;
    }
    else
    {
      v23 = 0;
      v24 = 10;
      if (v17 && (v17 & 0xFFFE000000000002) == 0)
      {
        if (v9[190] >= *(unsigned __int8 *)(v10 + 7))
          JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v9 + 48), (const JSCell *)v10);
        v23 = 0;
        v24 = 10;
      }
    }
    goto LABEL_26;
  }
  v29 = v9;
  if ((v17 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v17 + 5) < 0x17u)
  {
    WebCore::throwArgumentMustBeObjectError((uint64_t)this, (uint64_t)&v29, 0, "listener", 9, "MediaQueryList", 15, a8, "addListener", 12);
    v22 = 0;
    v20 = 1;
    v32 = 1;
    v21 = 1;
  }
  else
  {
    v18 = *((_QWORD *)this + 415);
    v8 = (JSC::JSGlobalObject *)WTF::fastMalloc((WTF *)0x48);
    v19 = WebCore::JSEventListener::JSEventListener((uint64_t)v8, v17, v10, 0, 0, v18);
    v20 = 0;
    v21 = 0;
    v32 = 0;
    v31 = 0;
    v22 = 1;
    v29 = (_DWORD *)v19;
  }
  v30 = v20;
  ((void (*)(char *, JSC::JSGlobalObject **))off_1E32B6338[v21])(&v33, &v31);
  if (v22)
    goto LABEL_20;
  v24 = 0;
  v23 = 1;
LABEL_26:
  ((void (*)(JSC::JSGlobalObject **, _DWORD **))off_1E32B6348[v23])(&v31, &v29);
  return (_BYTE *)v24;
}

_BYTE *WebCore::jsMediaQueryListPrototypeFunction_removeListener(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WebCore *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  WebCore *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  JSValue v27;
  _DWORD *v28;
  _DWORD *v29;
  int v30;
  WebCore::EventListener *v31;
  int v32;
  char v33;

  v8 = this;
  v9 = (_DWORD *)*((_QWORD *)this + 7);
  v28 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "MediaQueryList", "removeListener");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSMediaQueryList::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSMediaQueryList::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "MediaQueryList", "removeListener");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v9, v8, v27);
  }
  v16 = *(WebCore **)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  if ((v17 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v8 = 0;
    v30 = 0;
LABEL_20:
    v29 = 0;
    v31 = v8;
    WebCore::MediaQueryList::removeListener(v16, &v31);
    v31 = 0;
    if (v8)
    {
      if (*((_DWORD *)v8 + 4) == 1)
        (*(void (**)(WebCore *))(*(_QWORD *)v8 + 8))(v8);
      else
        --*((_DWORD *)v8 + 4);
    }
    if (v9[20] && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
    {
      v23 = 0;
      v24 = 0;
    }
    else
    {
      v23 = 0;
      v24 = 10;
      if (v17 && (v17 & 0xFFFE000000000002) == 0)
      {
        if (v9[190] >= *(unsigned __int8 *)(v10 + 7))
          JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v9 + 48), (const JSCell *)v10);
        v23 = 0;
        v24 = 10;
      }
    }
    goto LABEL_26;
  }
  v29 = v9;
  if ((v17 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v17 + 5) < 0x17u)
  {
    WebCore::throwArgumentMustBeObjectError((uint64_t)this, (uint64_t)&v29, 0, "listener", 9, "MediaQueryList", 15, a8, "removeListener", 15);
    v22 = 0;
    v20 = 1;
    v32 = 1;
    v21 = 1;
  }
  else
  {
    v18 = *((_QWORD *)this + 415);
    v8 = (WebCore *)WTF::fastMalloc((WTF *)0x48);
    v19 = WebCore::JSEventListener::JSEventListener((uint64_t)v8, v17, v10, 0, 0, v18);
    v20 = 0;
    v21 = 0;
    v32 = 0;
    v31 = 0;
    v22 = 1;
    v29 = (_DWORD *)v19;
  }
  v30 = v20;
  ((void (*)(char *, WebCore::EventListener **))off_1E32B6338[v21])(&v33, &v31);
  if (v22)
    goto LABEL_20;
  v24 = 0;
  v23 = 1;
LABEL_26:
  ((void (*)(WebCore::EventListener **, _DWORD **))off_1E32B6348[v23])(&v31, &v29);
  return (_BYTE *)v24;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore19MediaQueryListEvent4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore::MediaRecorder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore13MediaRecorderENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WebCore::MediaRecorder **a2)
{
  WebCore::MediaRecorder *result;
  bmalloc::api *v3;
  void *v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 1)
    {
      WebCore::MediaRecorder::~MediaRecorder(result);
      return (WebCore::MediaRecorder *)bmalloc::api::isoDeallocate(v3, v4);
    }
    else
    {
      --*((_DWORD *)result + 6);
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore13MediaRecorderENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore27MediaRecorderPrivateOptionsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::jsMediaRecorderConstructorFunction_isTypeSupported(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  JSC::VM *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::VM *v19;
  JSValue v20;
  int hasExceptionsAfterHandlingTraps;
  uint64_t v22;
  int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v19 = (JSC::VM *)*((_QWORD *)this + 7);
    v20.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v19, this, v20);
  }
  v5 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v5)
    return 10;
  v7 = v5;
  if (*(_BYTE *)(v5 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194D3A9A0);
  }
  v8 = *((_QWORD *)a2 + 6);
  v25 = (WTF::StringImpl *)v8;
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((v8 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v8 + 5) == 2)
  {
    v10 = *(WTF::StringImpl **)(v8 + 8);
    if ((v10 & 1) != 0)
    {
      v10 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v8, this);
      if (!v10)
        goto LABEL_9;
    }
    else if (!v10)
    {
LABEL_9:
      v24 = v10;
      goto LABEL_10;
    }
    *(_DWORD *)v10 += 2;
    goto LABEL_9;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v25, this);
LABEL_10:
  if (*((_DWORD *)v9 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v9);
    v11 = v24;
    if (hasExceptionsAfterHandlingTraps)
    {
      v23 = 1;
      v24 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v6);
        else
          *(_DWORD *)v11 -= 2;
      }
      v16 = 0;
      v17 = 1;
      goto LABEL_25;
    }
  }
  else
  {
    v11 = v24;
  }
  v23 = 0;
  v22 = 0;
  v25 = v11;
  v12 = *(_QWORD *)(v7 + 336);
  if (v12
    && (v13 = *(_QWORD *)(v12 + 8)) != 0
    && (v14 = *(_QWORD *)(v13 + 24)) != 0
    && (v15 = *(_QWORD *)(v14 + 8)) != 0)
  {
    if ((*(unsigned int (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(v15 + 288) + 24))(*(_QWORD *)(v15 + 288), &v25))
    {
      v16 = 7;
    }
    else
    {
      v16 = 6;
    }
    v11 = v25;
  }
  else
  {
    v16 = 6;
  }
  v25 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v6);
    else
      *(_DWORD *)v11 -= 2;
  }
  v17 = 0;
LABEL_25:
  ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32B54C8[v17])(&v25, &v22);
  return v16;
}

uint64_t WebCore::jsMediaRecorderPrototypeFunction_start(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  JSValue v16;
  WTF::StringImpl *v17;
  JSC::VM *v18;
  char v19;
  WTF::StringImpl *v20;
  int v21[2];
  WTF::StringImpl *v22;
  char v23;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v18 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v18, "MediaRecorder", "start");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMediaRecorder::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMediaRecorder::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v18, "MediaRecorder", "start");
  v11 = *(_QWORD *)(v5 + 24);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v12 = 0;
  }
  else if (*((_QWORD *)a2 + 6) == 10)
  {
    v12 = 0;
  }
  else
  {
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v21);
    if (v21[1])
      return 0;
    v12 = v21[0] | 0x100000000;
  }
  WebCore::MediaRecorder::startRecording(v11 - 32, v12, (uint64_t)v21);
  if (!v23)
    return 10;
  v14 = (WTF::StringImpl *)LOBYTE(v21[0]);
  v19 = v21[0];
  v15 = v22;
  v22 = 0;
  v20 = v15;
  if (!*((_QWORD *)v4 + 2))
  {
    v16.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v21[0]), (JSC::JSGlobalObject *)&v20);
    JSC::VM::throwException(v4, this, v16);
    v15 = v20;
  }
  v20 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  if (!v23)
    return 0;
  v17 = v22;
  v22 = 0;
  if (!v17)
    return 0;
  if (*(_DWORD *)v17 == 2)
  {
    WTF::StringImpl::destroy(v17, v14);
    return 0;
  }
  result = 0;
  *(_DWORD *)v17 -= 2;
  return result;
}

uint64_t WebCore::jsMediaRecorderPrototypeFunction_stop(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "MediaRecorder", "stop");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSMediaRecorder::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSMediaRecorder::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "MediaRecorder", "stop");
  WebCore::MediaRecorder::stopRecording((WTF *)(*(_QWORD *)(v3 + 24) - 32));
  return 10;
}

uint64_t WebCore::jsMediaRecorderPrototypeFunction_pause(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  JSValue v14;
  WTF::StringImpl *v15;
  JSC::VM *v16;
  char v17;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v20;
  char v21;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v16 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v16, "MediaRecorder", "pause");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMediaRecorder::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMediaRecorder::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v16, "MediaRecorder", "pause");
  WebCore::MediaRecorder::pauseRecording(*(_QWORD *)(v4 + 24) - 32, (uint64_t)&v19);
  if (!v21)
    return 10;
  v12 = (WTF::StringImpl *)v19;
  v17 = v19;
  v13 = v20;
  v20 = 0;
  v18 = v13;
  if (!*((_QWORD *)v5 + 2))
  {
    v14.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v19, (JSC::JSGlobalObject *)&v18);
    JSC::VM::throwException(v5, this, v14);
    v13 = v18;
  }
  v18 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (v21)
  {
    v15 = v20;
    v20 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 != 2)
      {
        result = 0;
        *(_DWORD *)v15 -= 2;
        return result;
      }
      WTF::StringImpl::destroy(v15, v12);
    }
  }
  return 0;
}

uint64_t WebCore::jsMediaRecorderPrototypeFunction_resume(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  JSValue v14;
  WTF::StringImpl *v15;
  JSC::VM *v16;
  char v17;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v20;
  char v21;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v16 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v16, "MediaRecorder", "resume");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMediaRecorder::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMediaRecorder::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v16, "MediaRecorder", "resume");
  WebCore::MediaRecorder::resumeRecording(*(_QWORD *)(v4 + 24) - 32, (uint64_t)&v19);
  if (!v21)
    return 10;
  v12 = (WTF::StringImpl *)v19;
  v17 = v19;
  v13 = v20;
  v20 = 0;
  v18 = v13;
  if (!*((_QWORD *)v5 + 2))
  {
    v14.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v19, (JSC::JSGlobalObject *)&v18);
    JSC::VM::throwException(v5, this, v14);
    v13 = v18;
  }
  v18 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (v21)
  {
    v15 = v20;
    v20 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 != 2)
      {
        result = 0;
        *(_DWORD *)v15 -= 2;
        return result;
      }
      WTF::StringImpl::destroy(v15, v12);
    }
  }
  return 0;
}

uint64_t WebCore::jsMediaRecorderPrototypeFunction_requestData(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t result;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  JSValue v17;
  WTF::StringImpl *v18;
  JSC::VM *v19;
  char v20;
  WTF::StringImpl *v21;
  _QWORD *v22;
  WTF::StringImpl *v23;
  char v24;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v19 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v19, "MediaRecorder", "requestData");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMediaRecorder::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMediaRecorder::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v19, "MediaRecorder", "requestData");
  v11 = *(_QWORD *)(v4 + 24);
  if (*(_DWORD *)(v11 + 104))
  {
    v12 = v11 - 32;
    if ((*(_QWORD *)(v11 + 168) & 0xFFFFFFFFFFFFLL) != 0
      && *(double *)((*(_QWORD *)(v11 + 168) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
    {
      WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v11 + 136));
    }
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v13 = off_1E335C928;
    v13[1] = v12;
    v22 = v13;
    WebCore::MediaRecorder::fetchData(v12, (uint64_t *)&v22, 0);
    if (v22)
      (*(void (**)(_QWORD *))(*v22 + 8))(v22);
    return 10;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v22) = 8;
    v24 = 1;
    v20 = 8;
    v16 = v23;
    v23 = 0;
    v21 = v16;
    if (!*((_QWORD *)v5 + 2))
    {
      v17.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)&v21);
      JSC::VM::throwException(v5, this, v17);
      v16 = v21;
    }
    v21 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
    if (v24)
    {
      v18 = v23;
      v23 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 != 2)
        {
          result = 0;
          *(_DWORD *)v18 -= 2;
          return result;
        }
        WTF::StringImpl::destroy(v18, v15);
      }
    }
    return 0;
  }
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore23MediaRecorderErrorEvent4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  _DWORD *result;

  result = *(_DWORD **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

_BYTE *WebCore::jsMediaSessionPrototypeFunction_setActionHandler(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  WebCore *v3;
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  unsigned __int8 *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 v15;
  uint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  unsigned int v18;
  WebCore::ScriptExecutionContext *v19;
  _QWORD *v20;
  _QWORD *Allocator;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  int v26;
  WebCore *v27;
  uint64_t v28;
  uint64_t v29;
  JSValue v32;
  unint64_t v33;
  uint64_t v34;
  JSC::VM *v35;
  WebCore *v36;
  int v37;
  WebCore *v38;
  int v39;
  char v40;

  v3 = (WebCore *)this;
  v4 = this[7];
  v35 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v35, "MediaSession", "setActionHandler");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSMediaSession::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSMediaSession::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v35, "MediaSession", "setActionHandler");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v32.super.isa = (Class)JSC::createNotEnoughArgumentsError((JSC *)this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, v3, v32);
  }
  v12 = *(unsigned __int8 **)(v5 + 24);
  v13 = *((_QWORD *)a2 + 6);
  v38 = v4;
  v15 = WebCore::parseEnumeration<WebCore::MediaSessionAction>((JSC::JSGlobalObject *)this, v13);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v15 <= 0xFFu)
  {
    WebCore::throwArgumentMustBeEnumError((uint64_t)v3, (uint64_t)&v38, 0, "action", 7, "MediaSession", 13, v14, "setActionHandler", 17, "\"play\", \"pause\", \"seekbackward\", \"seekforward\", \"previoustrack\", \"nexttrack\", \"skipad\", \"stop\", \"seekto\"", 105);
    return 0;
  }
  v16 = *((_QWORD *)a2 + 7);
  if ((v16 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v3 = 0;
    v37 = 0;
LABEL_30:
    v36 = 0;
    v38 = v3;
    WebCore::MediaSession::setActionHandler(v12, v15, &v38);
    v27 = v38;
    v38 = 0;
    if (v27)
    {
      if (*((_DWORD *)v27 + 4) == 1)
        (*(void (**)(WebCore *))(*(_QWORD *)v27 + 16))(v27);
      else
        --*((_DWORD *)v27 + 4);
    }
    v28 = 0;
    v29 = 10;
    goto LABEL_34;
  }
  v17 = *(WebCore::JSDOMGlobalObject **)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v36 = (WebCore *)*((_QWORD *)v3 + 7);
  if ((v16 & 0xFFFE000000000002) == 0
    && (v18 = *(unsigned __int8 *)(v16 + 5), v18 >= 0x17)
    && ((v18 & 0xFE) == 0x1A
     || (*(_BYTE *)(v16 + 6) & 4) != 0
     && ((*(void (**)(WebCore **__return_ptr, uint64_t))(16
                                                                 * *(unsigned int *)(16
                                                                                   * (*(_DWORD *)v16 & 0xFFFFFFFE)
                                                                                   + 0x4C)
                                                                 + 0x38))(&v38, v16), (_BYTE)v38)))
  {
    v3 = (WebCore *)WTF::fastMalloc((WTF *)0x20);
    v19 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(v17);
    *((_DWORD *)v3 + 4) = 1;
    *(_QWORD *)v3 = &off_1E33A18C0;
    *((_QWORD *)v3 + 1) = 0;
    WebCore::ContextDestructionObserver::observeContext(v3, v19);
    *(_QWORD *)v3 = &off_1E32B20B8;
    v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    Allocator = 0;
    if (v17)
    {
      if ((v17 & 8) != 0)
        v33 = ((unint64_t)v17 - 112) | 1;
      else
        v33 = (unint64_t)v17 & 0xFFFFFFFFFFFFC000;
      if ((v33 & 1) != 0)
        v34 = v33 + 47;
      else
        v34 = *(_QWORD *)v33 + 32;
      Allocator = *(_QWORD **)(v34 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v34 + 16) = *Allocator;
      *Allocator = v17;
      Allocator[1] = 0;
      Allocator[2] = 0;
    }
    v20[1] = &off_1E32268A0;
    *v20 = Allocator;
    if ((v16 & 8) != 0)
      v22 = (v16 - 112) | 1;
    else
      v22 = v16 & 0xFFFFFFFFFFFFC000;
    if ((v22 & 1) != 0)
      v23 = v22 + 47;
    else
      v23 = *(_QWORD *)v22 + 32;
    v24 = *(_QWORD **)(v23 + 16);
    if (!v24)
      v24 = (_QWORD *)JSC::WeakSet::findAllocator();
    v25 = 0;
    *(_QWORD *)(v23 + 16) = *v24;
    *v24 = v16;
    v24[1] = v20 + 1;
    v24[2] = v3;
    v20[2] = v24;
    *((_QWORD *)v3 + 3) = v20;
    v39 = 0;
    v38 = 0;
    v36 = v3;
    v26 = 1;
  }
  else
  {
    WebCore::throwArgumentMustBeFunctionError((uint64_t)v3, (uint64_t)&v36, 1, "handler", 8, "MediaSession", 13, v14, "setActionHandler", 17);
    v25 = 1;
    v26 = 0;
    v39 = 1;
  }
  v37 = v25;
  ((void (*)(char *, WebCore **))off_1E32B6898[v25])(&v40, &v38);
  if (v26)
    goto LABEL_30;
  v29 = 0;
  v28 = 1;
LABEL_34:
  ((void (*)(WebCore **, WebCore **))off_1E32B68A8[v28])(&v38, &v36);
  return (_BYTE *)v29;
}

unint64_t WebCore::jsMediaSessionPrototypeFunction_callActionHandler(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char **v21;
  BOOL v22;
  uint64_t v24;
  uint64_t v25;
  JSC::VM *v27;
  JSValue v28;
  objc_class *v29;
  _DWORD *v30;
  _OWORD v31[3];
  int v32;
  WebCore::DOMGuardedObject *v33;
  _OWORD v34[3];

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194D3B750);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v18 = *((_QWORD *)a2 + 5);
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_33;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSMediaSession::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSMediaSession::s_info && v21 != 0);
  }
  if (!v20)
  {
LABEL_33:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"MediaSession", "callActionHandler", v17);
    goto LABEL_36;
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v27 = (JSC::VM *)*((_QWORD *)this + 7);
    v28.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v27, this, v28);
LABEL_36:
    if (*((_DWORD *)v14 + 4) != 1)
    {
      --*((_DWORD *)v14 + 4);
      goto LABEL_29;
    }
LABEL_44:
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
    goto LABEL_29;
  }
  v24 = *(_QWORD *)(v18 + 24);
  WebCore::convertDictionary<WebCore::MediaSessionActionDetails>(*((JSC::JSCell **)a2 + 6), (JSC::VM **)this, (uint64_t)v31);
  if (v32)
    goto LABEL_36;
  v34[0] = v31[0];
  v34[1] = v31[1];
  v34[2] = v31[2];
  v33 = v14;
  WebCore::MediaSession::callActionHandler(v24, (unsigned __int8 *)v34, (uint64_t *)&v33);
  if (*((_DWORD *)v14 + 4) == 1)
    goto LABEL_44;
  --*((_DWORD *)v14 + 4);
LABEL_29:
  v25 = *(_QWORD *)(v10 + 16);
  if (v25)
  {
    if (*(_QWORD *)(v10 + 24) != v25)
    {
      v29 = *(objc_class **)(v25 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, (WebCore::DOMGuardedObject **)v31);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>(*(uint64_t *)&v31[0], v29, 0);
      v30 = *(_DWORD **)&v31[0];
      *(_QWORD *)&v31[0] = 0;
      if (v30)
      {
        if (v30[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 16))(v30);
        else
          --v30[4];
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

uint64_t WebCore::jsMediaSessionPrototypeFunction_setPositionState(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  double v3;
  double v4;
  JSC::VM *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char **v10;
  BOOL v11;
  WTF::StringImpl *v13;
  JSC::JSCell *v14;
  double v15;
  char v16;
  uint64_t result;
  uint64_t Object;
  JSC::Structure *v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  JSC::VM *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  JSC::VM *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  JSC::VM *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  JSValue v33;
  WTF::StringImpl *v34;
  JSC::VM *v35;
  double v36;
  JSC::VM *v37;
  double v38;
  double v39;
  JSC::VM *v40;
  _BYTE v41[7];
  int v42[2];
  WTF::StringImpl *v43;
  char v44;
  __int128 v45;
  double v46;
  char v47;
  _BYTE v48[7];
  JSC::VM *v49;

  v6 = (JSC::VM *)*((_QWORD *)this + 7);
  v40 = v6;
  v7 = *((_QWORD *)a2 + 5);
  if ((v7 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v40, "MediaSession", "setPositionState");
  v8 = *(unsigned int *)(16 * (*(_DWORD *)v7 & 0xFFFFFFFE) + 0x4C);
  v9 = *(_DWORD *)(16 * (*(_DWORD *)v7 & 0xFFFFFFFE) + 0x4C) != 0;
  v10 = (char **)(16 * v8);
  if ((_DWORD)v8)
    v11 = v10 == &WebCore::JSMediaSession::s_info;
  else
    v11 = 1;
  if (!v11)
  {
    do
    {
      v10 = (char **)v10[2];
      v9 = v10 != 0;
    }
    while (v10 != &WebCore::JSMediaSession::s_info && v10 != 0);
  }
  if (!v9)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v40, "MediaSession", "setPositionState");
  v13 = *(WTF::StringImpl **)(v7 + 24);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v16 = 0;
    v15 = 0.0;
  }
  else
  {
    v14 = (JSC::JSCell *)*((_QWORD *)a2 + 6);
    v15 = 0.0;
    if (v14 == (JSC::JSCell *)10 || ((unint64_t)v14 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v16 = 0;
      goto LABEL_17;
    }
    v49 = v6;
    if (((unint64_t)v14 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v14)) == 0)
    {
      JSC::throwTypeError();
      return 0;
    }
    v19 = (JSC::Structure *)Object;
    WTF::AtomStringImpl::addLiteral();
    v21 = JSC::JSObject::get(v19, this, v45);
    if ((_QWORD)v45)
    {
      if (*(_DWORD *)v45 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v45, v20);
      else
        *(_DWORD *)v45 -= 2;
    }
    if (*((_DWORD *)v49 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v49) & 1) != 0)
      return 0;
    if (v21 == 10)
    {
      WebCore::throwRequiredMemberTypeError((int)this, (int)&v49, "duration", 9, "MediaPositionState", 19, "double", 7);
      return 0;
    }
    *(_QWORD *)&v45 = v21;
    v22 = (JSC::VM *)*((_QWORD *)this + 7);
    *(_QWORD *)v42 = v22;
    if (v21 >= 0xFFFE000000000000)
    {
      v15 = (double)(int)v21;
    }
    else if (v21 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v35 = v22;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v45, this);
      v22 = v35;
      v15 = v36;
    }
    else
    {
      *(_QWORD *)&v15 = v21 - 0x2000000000000;
    }
    if (*((_DWORD *)v22 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v22) & 1) != 0)
      return 0;
    if ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      goto LABEL_73;
    WTF::AtomStringImpl::addLiteral();
    v23 = (WTF::StringImpl *)v45;
    v25 = JSC::JSObject::get(v19, this, v45);
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v24);
      else
        *(_DWORD *)v23 -= 2;
    }
    if (*((_DWORD *)v49 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v49) & 1) != 0)
      return 0;
    v3 = 1.0;
    if (v25 != 10)
    {
      *(_QWORD *)&v45 = v25;
      v26 = (JSC::VM *)*((_QWORD *)this + 7);
      *(_QWORD *)v42 = v26;
      if (v25 >= 0xFFFE000000000000)
      {
        v3 = (double)(int)v25;
      }
      else if (v25 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        v37 = v26;
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v45, this);
        v26 = v37;
        v3 = v38;
      }
      else
      {
        *(_QWORD *)&v3 = v25 - 0x2000000000000;
      }
      if (*((_DWORD *)v26 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v26) & 1) != 0)
        return 0;
      if ((*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        goto LABEL_73;
    }
    WTF::AtomStringImpl::addLiteral();
    v27 = (WTF::StringImpl *)v45;
    v29 = JSC::JSObject::get(v19, this, v45);
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v28);
      else
        *(_DWORD *)v27 -= 2;
    }
    if (*((_DWORD *)v49 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v49) & 1) != 0)
      return 0;
    v4 = 0.0;
    if (v29 != 10)
    {
      *(_QWORD *)&v45 = v29;
      v30 = (JSC::VM *)*((_QWORD *)this + 7);
      *(_QWORD *)v42 = v30;
      if (v29 >= 0xFFFE000000000000)
      {
        v4 = (double)(int)v29;
      }
      else if (v29 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v45, this);
        v4 = v39;
      }
      else
      {
        *(_QWORD *)&v4 = v29 - 0x2000000000000;
      }
      if (*((_DWORD *)v30 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v30) & 1) != 0)
        return 0;
      if ((*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
LABEL_73:
        JSC::throwTypeError();
        return 0;
      }
    }
    v16 = 1;
  }
LABEL_17:
  *(double *)&v45 = v15;
  *((double *)&v45 + 1) = v3;
  v46 = v4;
  v47 = v16;
  *(_DWORD *)v48 = *(_DWORD *)v41;
  *(_DWORD *)&v48[3] = *(_DWORD *)&v41[3];
  WebCore::MediaSession::setPositionState(v13, &v45, (uint64_t)v42);
  if (!v44)
    return 10;
  v31 = (WTF::StringImpl *)LOBYTE(v42[0]);
  LOBYTE(v45) = v42[0];
  v32 = v43;
  v43 = 0;
  *((_QWORD *)&v45 + 1) = v32;
  if (!*((_QWORD *)v6 + 2))
  {
    v33.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v42[0]), (JSC::JSGlobalObject *)((char *)&v45 + 8));
    JSC::VM::throwException(v6, this, v33);
    v32 = (WTF::StringImpl *)*((_QWORD *)&v45 + 1);
  }
  *((_QWORD *)&v45 + 1) = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v31);
    else
      *(_DWORD *)v32 -= 2;
  }
  if (!v44)
    return 0;
  v34 = v43;
  v43 = 0;
  if (!v34)
    return 0;
  if (*(_DWORD *)v34 == 2)
  {
    WTF::StringImpl::destroy(v34, v31);
    return 0;
  }
  result = 0;
  *(_DWORD *)v34 -= 2;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore27JSMediaSessionActionHandlerENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore27JSMediaSessionActionHandlerENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

uint64_t WebCore::jsMediaSourceConstructorFunction_isTypeSupported(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  const WTF::String *v6;
  double v7;
  double v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  JSC::VM *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  JSC::VM *v20;
  JSValue v21;
  WTF::StringImpl *v22;
  int hasExceptionsAfterHandlingTraps;
  uint64_t v24;
  int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v20 = (JSC::VM *)*((_QWORD *)this + 7);
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v20, this, v21);
  }
  v5 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v5)
    return 10;
  v10 = v5;
  v11 = *((_QWORD *)a2 + 6);
  v27 = (WTF::StringImpl *)v11;
  v12 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((v11 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v11 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v11 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v11, this);
      if (!v13)
        goto LABEL_8;
    }
    else if (!v13)
    {
LABEL_8:
      v26 = v13;
      goto LABEL_9;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_8;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v27, this);
LABEL_9:
  if (*((_DWORD *)v12 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v12);
    v14 = v26;
    if (hasExceptionsAfterHandlingTraps)
    {
      v25 = 1;
      v26 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v22);
        else
          *(_DWORD *)v14 -= 2;
      }
      v16 = 0;
      v18 = 1;
      goto LABEL_18;
    }
  }
  else
  {
    v14 = v26;
  }
  v25 = 0;
  v24 = 0;
  v27 = v14;
  if (WebCore::MediaSource::isTypeSupported(v10, (WebCore::ScriptExecutionContext *)&v27, v6, v7, v8, v9))
    v16 = 7;
  else
    v16 = 6;
  v17 = v27;
  v27 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = 0;
LABEL_18:
  ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32B54C8[v18])(&v27, &v24);
  return v16;
}

_BYTE *WebCore::jsMediaSourcePrototypeFunction_addSourceBuffer(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, double a4, double a5, float a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  char **v11;
  BOOL v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  JSC::VM *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  JSValue v27;
  WTF::StringImpl *v28;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v30;
  JSValue v31;
  WebCore *v32;
  JSC::JSGlobalObject *v33;
  JSC::CallFrame *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  int v37[2];
  WTF::StringImpl *v38;
  int v39;
  uint64_t v40;
  int v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;

  v7 = *((_QWORD *)this + 7);
  v35 = v7;
  v8 = *((_QWORD *)a2 + 5);
  if ((v8 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v35, "MediaSource", "addSourceBuffer");
  v9 = *(unsigned int *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C);
  v10 = *(_DWORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C) != 0;
  v11 = (char **)(16 * v9);
  if ((_DWORD)v9)
    v12 = v11 == &WebCore::JSMediaSource::s_info;
  else
    v12 = 1;
  if (!v12)
  {
    do
    {
      v11 = (char **)v11[2];
      v10 = v11 != 0;
    }
    while (v11 != &WebCore::JSMediaSource::s_info && v11 != 0);
  }
  if (!v10)
    return WebCore::throwThisTypeError((int)this, (int)&v35, "MediaSource", "addSourceBuffer");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v7, this, v27);
  }
  v14 = *(_QWORD *)(v8 + 24);
  v15 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v37 = v15;
  if ((v15 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v15 + 5) == 2)
  {
    v16 = *(_QWORD *)(v15 + 8);
    if ((v16 & 1) != 0)
    {
      v16 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v15, this);
      if (!v16)
        goto LABEL_18;
    }
    else if (!v16)
    {
LABEL_18:
      v42 = (WTF::StringImpl *)v16;
      goto LABEL_19;
    }
    *(_DWORD *)v16 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v37, this);
LABEL_19:
  if (*(_DWORD *)(v7 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7);
    v17 = v42;
    if (hasExceptionsAfterHandlingTraps)
    {
      v41 = 1;
      v42 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v28);
        else
          *(_DWORD *)v17 -= 2;
      }
      v21 = 0;
      v24 = 1;
      goto LABEL_31;
    }
  }
  else
  {
    v17 = v42;
  }
  v41 = 0;
  v18 = *(JSC::VM **)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x28);
  v40 = 0;
  v36 = v17;
  WebCore::MediaSource::addSourceBuffer((WebCore::MediaSource *)(v14 - 40), (const WTF::String *)&v36, (uint64_t)v37, a4, a5, a6);
  if (!v39)
  {
    v19 = *(_QWORD *)v37;
    *(_QWORD *)v37 = 0;
    v42 = (WTF::StringImpl *)v19;
    v21 = WebCore::toJSNewlyCreated((uint64_t)this, v18, (uint64_t *)&v42);
    v22 = v42;
    v42 = 0;
    if (v22)
    {
      if (*((_DWORD *)v22 + 6) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v22 + 16))(v22);
      else
        --*((_DWORD *)v22 + 6);
    }
LABEL_25:
    if (v39 != -1)
      ((void (*)(WTF::StringImpl **, int *))off_1E32B6B38[v39])(&v42, v37);
    v39 = -1;
    v23 = v36;
    v36 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v20);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = 0;
LABEL_31:
    ((void (*)(int *, uint64_t *))off_1E32B54C8[v24])(v37, &v40);
    return (_BYTE *)v21;
  }
  if (v39 == 1)
  {
    v20 = (WTF::StringImpl *)LOBYTE(v37[0]);
    LOBYTE(v42) = v37[0];
    v30 = v38;
    v38 = 0;
    v43 = v30;
    if (!*(_QWORD *)(v7 + 16))
    {
      v31.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v37[0]), (JSC::JSGlobalObject *)&v43);
      JSC::VM::throwException((JSC::VM *)v7, this, v31);
      v30 = v43;
    }
    v43 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v20);
      else
        *(_DWORD *)v30 -= 2;
    }
    v21 = 0;
    goto LABEL_25;
  }
  v32 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsMediaSourcePrototypeFunction_removeSourceBuffer(v32, v33, v34);
}

uint64_t WebCore::jsMediaSourcePrototypeFunction_removeSourceBuffer(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  uint64_t result;
  JSValue v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  JSValue v27;
  WTF::StringImpl *v28;
  JSC::VM *v29;
  char v30;
  WTF::StringImpl *v31;
  JSC::VM *v32;
  WTF::StringImpl *v33;
  char v34;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v29 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v29, "MediaSource", "removeSourceBuffer");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSMediaSource::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSMediaSource::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v29, "MediaSource", "removeSourceBuffer");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v24);
  }
  else
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    v32 = v9;
    if ((v17 & 0xFFFE000000000002) != 0)
      goto LABEL_24;
    v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
    v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
    v20 = (char **)(16 * v18);
    if ((_DWORD)v18)
      v21 = v20 == &WebCore::JSSourceBuffer::s_info;
    else
      v21 = 1;
    if (!v21)
    {
      do
      {
        v20 = (char **)v20[2];
        v19 = v20 != 0;
      }
      while (v20 != &WebCore::JSSourceBuffer::s_info && v20 != 0);
    }
    if (!v19)
    {
LABEL_24:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v32, 0, "buffer", 7, "MediaSource", 12, a8, "removeSourceBuffer", 19, "SourceBuffer", 13);
      return 0;
    }
    WebCore::MediaSource::removeSourceBuffer((_QWORD *)(v16 - 40), (WebCore::SourceBuffer *)(*(_QWORD *)(v17 + 24) - 40), &v32);
    if (v34)
    {
      v25 = (WTF::StringImpl *)v32;
      v30 = (char)v32;
      v26 = v33;
      v33 = 0;
      v31 = v26;
      if (!*((_QWORD *)v9 + 2))
      {
        v27.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v32, (JSC::JSGlobalObject *)&v31);
        JSC::VM::throwException(v9, this, v27);
        v26 = v31;
      }
      v31 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v25);
        else
          *(_DWORD *)v26 -= 2;
      }
      if (!v34)
        return 0;
      v28 = v33;
      v33 = 0;
      if (!v28)
        return 0;
      if (*(_DWORD *)v28 == 2)
      {
        WTF::StringImpl::destroy(v28, v25);
        return 0;
      }
      result = 0;
      *(_DWORD *)v28 -= 2;
    }
    else
    {
      return 10;
    }
  }
  return result;
}

uint64_t WebCore::jsMediaSourcePrototypeFunction_endOfStream(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  const char *v21;
  int v22;
  uint64_t v24;
  char **v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  JSValue v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  WTF::StringImpl *v46[3];

  v9 = *((_QWORD *)this + 7);
  v42 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v42, "MediaSource", "endOfStream");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSMediaSource::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSMediaSource::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v42, "MediaSource", "endOfStream");
  v16 = *(_QWORD *)(v10 + 24);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v18 = 0;
    goto LABEL_41;
  }
  v17 = *((_QWORD *)a2 + 6);
  if (v17 != 10)
  {
    v43 = v9;
    v45 = (const char *)v17;
    if ((v17 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v17 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v45, this);
      v19 = v44;
      if (v44)
      {
LABEL_22:
        v20 = *(_DWORD *)(v19 + 16);
        v21 = *(const char **)(v19 + 8);
        v22 = *(_DWORD *)(v19 + 4);
        if (v21 != "decode" && v22 == 6)
        {
          if ((v20 & 4) != 0)
          {
            if (*v21 == 100 && *(_DWORD *)(v21 + 1) == 1685021541 && *(_DWORD *)(v21 + 2) == 1701080931)
              goto LABEL_34;
          }
          else if (*(_WORD *)v21 == 100)
          {
            v37 = *(_QWORD *)(v21 + 2);
            v38 = *(_QWORD *)(v21 + 4);
            if (v37 == 0x64006F00630065 && v38 == 0x650064006F0063)
              goto LABEL_34;
          }
        }
        else
        {
          if (v21 == "decode" && v22 == 6)
          {
LABEL_34:
            v25 = &WebCore::parseEnumerationFromString<WebCore::MediaSource::EndOfStreamError>(WTF::String const&)::mappings;
LABEL_35:
            v24 = *((unsigned int *)v25 + 4) | 0x100000000;
LABEL_36:
            v44 = 0;
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy((WTF::StringImpl *)v19, a2);
            else
              *(_DWORD *)v19 -= 2;
LABEL_38:
            if (!*(_DWORD *)(v9 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) == 0)
            {
              if ((v24 & 0x100000000) != 0)
              {
                v18 = v24 | 0x100000000;
                goto LABEL_41;
              }
              WebCore::throwArgumentMustBeEnumError((uint64_t)this, (uint64_t)&v43, 0, "error", 6, "MediaSource", 12, a8, "endOfStream", 12, "\"network\", \"decode\"", 20);
            }
            return 0;
          }
          if (v21 == "network" || v22 != 7)
          {
            if (v22 == 7 && v21 == "network")
              goto LABEL_63;
          }
          else if ((v20 & 4) != 0)
          {
            if (*v21 == 110 && *(_DWORD *)(v21 + 1) == 1870099557 && *(_DWORD *)(v21 + 3) == 1802661751)
            {
LABEL_63:
              v25 = &off_1E32B2150;
              goto LABEL_35;
            }
          }
          else if (*(_WORD *)v21 == 110
                 && *(_QWORD *)(v21 + 6) == 0x6B0072006F0077
                 && *(_QWORD *)(v21 + 2) == 0x6F007700740065)
          {
            goto LABEL_63;
          }
        }
        v24 = 0;
        goto LABEL_36;
      }
LABEL_68:
      v24 = 0;
      goto LABEL_38;
    }
    v19 = *(_QWORD *)(v17 + 8);
    if ((v19 & 1) != 0)
    {
      v19 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v17, this);
      if (!v19)
      {
LABEL_21:
        v44 = v19;
        if (v19)
          goto LABEL_22;
        goto LABEL_68;
      }
    }
    else if (!v19)
    {
      goto LABEL_21;
    }
    *(_DWORD *)v19 += 2;
    goto LABEL_21;
  }
  v18 = 0;
LABEL_41:
  v26 = *(_QWORD *)(v16 + 208);
  v27 = *(WTF::StringImpl **)(v16 + 216);
  v45 = "MediaSource";
  v46[0] = (WTF::StringImpl *)12;
  v46[1] = (WTF::StringImpl *)"endOfStream";
  v46[2] = v27;
  if (*(_BYTE *)(v26 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&v45);
  if (*(_BYTE *)(v16 + 192)
    || (v32 = *(_QWORD *)(v16 + 48)) == 0
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v32 + 112))(v32) != 1)
  {
LABEL_44:
    LOBYTE(v45) = 8;
    v46[0] = 0;
    if (!*(_QWORD *)(v9 + 16))
    {
      v28.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)v46);
      JSC::VM::throwException((JSC::VM *)v9, this, v28);
      v30 = v46[0];
      v46[0] = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v29);
        else
          *(_DWORD *)v30 -= 2;
      }
    }
    return 0;
  }
  v33 = *(_QWORD *)(v16 + 64);
  v34 = *(unsigned int *)(v33 + 68);
  if ((_DWORD)v34)
  {
    v35 = *(_QWORD *)(v33 + 56);
    v36 = 8 * v34;
    while (!*(_BYTE *)(*(_QWORD *)v35 + 320))
    {
      v35 += 8;
      v36 -= 8;
      if (!v36)
        goto LABEL_55;
    }
    goto LABEL_44;
  }
LABEL_55:
  WebCore::MediaSource::streamEndedWithError((WTF::StringImpl *)(v16 - 40), v18);
  return 10;
}

uint64_t WebCore::jsMediaSourcePrototypeFunction_setLiveSeekableRange(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  double v14;
  unint64_t v15;
  JSC::VM *v16;
  double v17;
  JSValue v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  JSValue v22;
  double v23;
  double v24;
  uint64_t v25;
  JSC::VM *v26;
  WTF::StringImpl *v27;
  int v28[2];
  WTF::StringImpl *v29;
  char v30;

  v4 = *((_QWORD *)this + 7);
  v25 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "MediaSource", "setLiveSeekableRange");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSMediaSource::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSMediaSource::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "MediaSource", "setLiveSeekableRange");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v19.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException((JSC::VM *)v4, this, v19);
  }
  v12 = *(_QWORD *)(v5 + 24);
  v13 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v28 = v13;
  v26 = (JSC::VM *)v4;
  if (v13 >= 0xFFFE000000000000)
  {
    v14 = (double)(int)v13;
  }
  else if (v13 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v28, this);
    v14 = v23;
  }
  else
  {
    *(_QWORD *)&v14 = v13 - 0x2000000000000;
  }
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    JSC::throwTypeError();
    return 0;
  }
  v15 = *((_QWORD *)a2 + 7);
  *(_QWORD *)v28 = v15;
  v16 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v16;
  if (v15 >= 0xFFFE000000000000)
  {
    v17 = (double)(int)v15;
  }
  else if (v15 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v28, this);
    v17 = v24;
  }
  else
  {
    *(_QWORD *)&v17 = v15 - 0x2000000000000;
  }
  if (!*((_DWORD *)v16 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v16) & 1) == 0)
  {
    if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      JSC::throwTypeError();
    }
    else
    {
      WebCore::MediaSource::setLiveSeekableRange((WTF::MediaTime *)(v12 - 40), v14, v17, (uint64_t)v28);
      if (!v30)
        return 10;
      v20 = (WTF::StringImpl *)LOBYTE(v28[0]);
      LOBYTE(v26) = v28[0];
      v21 = v29;
      v27 = v29;
      if (!*(_QWORD *)(v4 + 16))
      {
        v22.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v28[0]), (JSC::JSGlobalObject *)&v27);
        JSC::VM::throwException((JSC::VM *)v4, this, v22);
        v21 = v27;
      }
      v27 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v20);
        else
          *(_DWORD *)v21 -= 2;
      }
    }
  }
  return 0;
}

uint64_t WebCore::jsMediaSourcePrototypeFunction_clearLiveSeekableRange(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  JSValue v14;
  JSC::VM *v15;
  char v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  char v20;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v15 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "MediaSource", "clearLiveSeekableRange");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMediaSource::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMediaSource::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "MediaSource", "clearLiveSeekableRange");
  WebCore::MediaSource::clearLiveSeekableRange((WTF *)(*(_QWORD *)(v4 + 24) - 40), &v18);
  if (!v20)
    return 10;
  v12 = (WTF::StringImpl *)v18;
  v16 = v18;
  v13 = v19;
  v17 = v19;
  if (!*((_QWORD *)v5 + 2))
  {
    v14.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v18, (JSC::JSGlobalObject *)&v17);
    JSC::VM::throwException(v5, this, v14);
    v13 = v17;
  }
  v17 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  return 0;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12SourceBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[6];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12SourceBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

JSCell *WebCore::setSubclassStructureIfNeeded<WebCore::MediaStream>(JSC *a1, uint64_t a2, JSCell *a3)
{
  JSCell *result;
  JSC::JSObject *v7;
  JSC::JSGlobalObject *v9;
  JSC::VM *v10;
  uint64_t FunctionRealm;
  JSC::JSObject *v12;
  JSC::Structure *v13;
  JSC::VM *v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  JSC::JSCell *v23;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v25;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  unint64_t SubclassStructure;

  result = *(JSCell **)(a2 + 40);
  if (((unint64_t)result & 0xFFFE000000000002) == 0)
  {
    result = (JSCell *)JSC::JSCell::getObject((JSC::JSCell *)result);
    if (result && result != *(JSCell **)(a2 + 24))
    {
      v9 = (JSC::JSGlobalObject *)result;
      v10 = (JSC::VM *)*((_QWORD *)a1 + 7);
      FunctionRealm = JSC::getFunctionRealm(a1, (JSC::JSGlobalObject *)result, v7);
      v14 = (JSC::VM *)FunctionRealm;
      if (!*((_DWORD *)v10 + 20)
        || (result = (JSCell *)JSC::VM::hasExceptionsAfterHandlingTraps(v10), (result & 1) == 0))
      {
        v15 = *((_QWORD *)v14 + 412);
        if (v15)
        {
          v16 = *(_DWORD *)(v15 - 8);
          v17 = ((unint64_t)&WebCore::JSMediaStream::s_info + ~((_QWORD)&WebCore::JSMediaStream::s_info << 32)) ^ (((unint64_t)&WebCore::JSMediaStream::s_info + ~((_QWORD)&WebCore::JSMediaStream::s_info << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = *(char ***)(v15 + 16 * v20);
          if (v21 == &WebCore::JSMediaStream::s_info)
          {
LABEL_14:
            v12 = *(JSC::JSObject **)(v15 + 16 * v20 + 8);
            if (v12)
            {
LABEL_16:
              SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v9, v12, v13);
              if (!*((_DWORD *)v10 + 20))
                return JSC::JSObject::setStructure(a3, v10, SubclassStructure);
              result = (JSCell *)JSC::VM::hasExceptionsAfterHandlingTraps(v10);
              if ((result & 1) == 0)
                return JSC::JSObject::setStructure(a3, v10, SubclassStructure);
              return result;
            }
          }
          else
          {
            v22 = 1;
            while (v21)
            {
              v20 = ((_DWORD)v20 + v22) & v16;
              v21 = *(char ***)(v15 + 16 * v20);
              ++v22;
              if (v21 == &WebCore::JSMediaStream::s_info)
                goto LABEL_14;
            }
          }
        }
        v23 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v10, v14, v12);
        Structure = WebCore::JSMediaStreamPrototype::createStructure((uint64_t *)v10, (uint64_t)v14, v23);
        *(_DWORD *)(Structure + 16) |= 0x80000u;
        v27 = (JSC::JSCell *)WebCore::JSMediaStreamPrototype::create(v10, Structure, v25, v26);
        v28 = WebCore::JSMediaStream::createStructure((uint64_t *)v10, (uint64_t)v14, v27);
        v12 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)v14, v28, (uint64_t)&WebCore::JSMediaStream::s_info);
        goto LABEL_16;
      }
    }
  }
  return result;
}

uint64_t WebCore::JSMediaStream::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::MediaStreamTrack>>::convert(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *(_QWORD *)(result + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwTypeError();
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSMediaStreamTrack::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSMediaStreamTrack::s_info && v6 != 0);
  }
  if (!v5)
    return JSC::throwTypeError();
  v9 = *(_QWORD *)(a2 + 24);
  v10 = v9 - 32;
  ++*(_DWORD *)(v9 - 8);
  v16 = v9 - 32;
  v11 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v11 == *(_DWORD *)(a3 + 8))
  {
    v12 = WTF::Vector<WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a3, v11 + 1, (unint64_t)&v16);
    v13 = *(unsigned int *)(a3 + 12);
    v14 = *(char **)a3;
    v15 = *(_QWORD *)v12;
    *(_QWORD *)v12 = 0;
    *(_QWORD *)&v14[8 * v13] = v15;
    result = v16;
    *(_DWORD *)(a3 + 12) = v13 + 1;
    v16 = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 24) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      else
        --*(_DWORD *)(result + 24);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v11) = v10;
    *(_DWORD *)(a3 + 12) = v11 + 1;
  }
  return result;
}

char *WTF::Vector<WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  void *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 > a3 || (v6 = *((unsigned int *)a1 + 3), (unint64_t)&v5[8 * v6] <= a3))
  {
    v14 = *((unsigned int *)a1 + 2);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v17 = a2;
    else
      v17 = v16;
    if (v17 > v14)
    {
      if (v17 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x194D3D284);
      }
      v18 = *((unsigned int *)a1 + 3);
      v19 = (char *)WTF::fastMalloc((WTF *)(8 * v17));
      *((_DWORD *)a1 + 2) = v17;
      *a1 = v19;
      memcpy(v19, v5, 8 * v18);
      if (v5)
      {
        if (*a1 == v5)
        {
          *a1 = 0;
          *((_DWORD *)a1 + 2) = 0;
        }
        WTF::fastFree((WTF *)v5, v20);
      }
    }
  }
  else
  {
    v7 = *((unsigned int *)a1 + 2);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v10 = a2;
    else
      v10 = v9;
    if (v10 <= v7)
    {
      v13 = *a1;
    }
    else
    {
      if (v10 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x194D3D298);
      }
      v11 = (char *)WTF::fastMalloc((WTF *)(8 * v10));
      *((_DWORD *)a1 + 2) = v10;
      *a1 = v11;
      memcpy(v11, v5, 8 * v6);
      v13 = *a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *a1 = 0;
          *((_DWORD *)a1 + 2) = 0;
        }
        WTF::fastFree((WTF *)v5, v12);
        v13 = *a1;
      }
    }
    return &v13[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
  }
  return (char *)v3;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_3RefIN7WebCore16MediaStreamTrackENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, WTF **a2)
{
  uint64_t v2;
  WTF *result;
  WTF *v4;
  uint64_t v5;
  _DWORD *v6;
  WTF **v7;
  WTF *v8;
  uint64_t v9;

  v2 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v2)
  {
    v4 = *a2;
    v5 = 8 * v2;
    v7 = a2;
    do
    {
      v6 = *(_DWORD **)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        if (v6[6] == 1)
        {
          v8 = v4;
          v9 = v5;
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
          v5 = v9;
          a2 = v7;
          v4 = v8;
        }
        else
        {
          --v6[6];
        }
      }
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

_BYTE *WebCore::jsMediaStreamPrototypeFunction_getAudioTracks(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  char *v10;
  JSC::VM *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  WTF *v15;
  WTF *v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  WTF *v21;
  int v22;
  unsigned int v23;
  uint64_t v24;

  v4 = *((_QWORD *)a2 + 5);
  v20 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "MediaStream", "getAudioTracks");
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSMediaStream::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSMediaStream::s_info && v7 != 0);
  }
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "MediaStream", "getAudioTracks");
  v10 = *(char **)(v4 + 24);
  v11 = *(JSC::VM **)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  v12 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v12 = off_1E335F830;
  v24 = v12;
  WebCore::MediaStream::filteredTracks(v10, &v24, (uint64_t)&v21);
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v14 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::MediaStreamTrack>>>::convert<WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>,0ul>((uint64_t)this, v11, (uint64_t)&v21);
  if (v23)
  {
    v17 = v21;
    v18 = 8 * v23;
    do
    {
      v19 = *(_DWORD **)v17;
      *(_QWORD *)v17 = 0;
      if (v19)
      {
        if (v19[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 16))(v19);
        else
          --v19[6];
      }
      v17 = (WTF *)((char *)v17 + 8);
      v18 -= 8;
    }
    while (v18);
  }
  v15 = v21;
  if (v21)
  {
    v21 = 0;
    v22 = 0;
    WTF::fastFree(v15, v13);
  }
  return (_BYTE *)v14;
}

_BYTE *WebCore::jsMediaStreamPrototypeFunction_getVideoTracks(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  char *v10;
  JSC::VM *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  WTF *v15;
  WTF *v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  WTF *v21;
  int v22;
  unsigned int v23;
  uint64_t v24;

  v4 = *((_QWORD *)a2 + 5);
  v20 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "MediaStream", "getVideoTracks");
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSMediaStream::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSMediaStream::s_info && v7 != 0);
  }
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "MediaStream", "getVideoTracks");
  v10 = *(char **)(v4 + 24);
  v11 = *(JSC::VM **)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  v12 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v12 = off_1E335F858;
  v24 = v12;
  WebCore::MediaStream::filteredTracks(v10, &v24, (uint64_t)&v21);
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v14 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::MediaStreamTrack>>>::convert<WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>,0ul>((uint64_t)this, v11, (uint64_t)&v21);
  if (v23)
  {
    v17 = v21;
    v18 = 8 * v23;
    do
    {
      v19 = *(_DWORD **)v17;
      *(_QWORD *)v17 = 0;
      if (v19)
      {
        if (v19[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 16))(v19);
        else
          --v19[6];
      }
      v17 = (WTF *)((char *)v17 + 8);
      v18 -= 8;
    }
    while (v18);
  }
  v15 = v21;
  if (v21)
  {
    v21 = 0;
    v22 = 0;
    WTF::fastFree(v15, v13);
  }
  return (_BYTE *)v14;
}

_BYTE *WebCore::jsMediaStreamPrototypeFunction_getTrackById(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  JSC::VM *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  JSValue v24;
  WTF::StringImpl *v25;
  int hasExceptionsAfterHandlingTraps;
  JSC::VM *v27;
  uint64_t v28;
  int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v27 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v27, "MediaStream", "getTrackById");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMediaStream::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMediaStream::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v27, "MediaStream", "getTrackById");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v24);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = *((_QWORD *)a2 + 6);
  v31 = (WTF::StringImpl *)v12;
  if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v12 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
      if (!v13)
        goto LABEL_18;
    }
    else if (!v13)
    {
LABEL_18:
      v30 = v13;
      goto LABEL_19;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v31, this);
LABEL_19:
  if (*((_DWORD *)v4 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    v14 = v30;
    if (hasExceptionsAfterHandlingTraps)
    {
      v29 = 1;
      v30 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v25);
        else
          *(_DWORD *)v14 -= 2;
      }
      v19 = 0;
      v21 = 1;
      goto LABEL_28;
    }
  }
  else
  {
    v14 = v30;
  }
  v29 = 0;
  v15 = *(JSC::VM **)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v28 = 0;
  v31 = v14;
  v16 = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v11 + 104), &v31, a3);
  if (*(_QWORD *)(v11 + 104) + 16 * *(unsigned int *)(v11 + 112) == v16 || (v18 = *(_QWORD *)(v16 + 8)) == 0)
    v19 = 2;
  else
    v19 = WebCore::wrap<WebCore::MediaStreamTrack>((uint64_t)this, v15, v18);
  v20 = v31;
  v31 = 0;
  if (!v20)
    goto LABEL_33;
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::destroy(v20, v17);
LABEL_33:
    v21 = 0;
    goto LABEL_28;
  }
  v21 = 0;
  *(_DWORD *)v20 -= 2;
LABEL_28:
  ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32B54C8[v21])(&v30, &v28);
  return (_BYTE *)v19;
}

uint64_t WebCore::jsMediaStreamPrototypeFunction_addTrack(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  WebCore::MediaStream *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  JSValue v24;
  JSC::VM *v25;
  JSC::VM *v26;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "MediaStream", "addTrack");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSMediaStream::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSMediaStream::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "MediaStream", "addTrack");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v24);
  }
  else
  {
    v16 = *(WebCore::MediaStream **)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    v26 = v9;
    if ((v17 & 0xFFFE000000000002) != 0)
      goto LABEL_24;
    v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
    v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
    v20 = (char **)(16 * v18);
    if ((_DWORD)v18)
      v21 = v20 == &WebCore::JSMediaStreamTrack::s_info;
    else
      v21 = 1;
    if (!v21)
    {
      do
      {
        v20 = (char **)v20[2];
        v19 = v20 != 0;
      }
      while (v20 != &WebCore::JSMediaStreamTrack::s_info && v20 != 0);
    }
    if (v19)
    {
      WebCore::MediaStream::addTrack(v16, (WebCore::MediaStreamTrack *)(*(_QWORD *)(v17 + 24) - 32), a3);
      return 10;
    }
    else
    {
LABEL_24:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v26, 0, "track", 6, "MediaStream", 12, a8, "addTrack", 9, "MediaStreamTrack", 17);
      return 0;
    }
  }
}

uint64_t WebCore::jsMediaStreamPrototypeFunction_removeTrack(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  WebCore::MediaStream *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  JSValue v24;
  JSC::VM *v25;
  JSC::VM *v26;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "MediaStream", "removeTrack");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSMediaStream::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSMediaStream::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "MediaStream", "removeTrack");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v24);
  }
  else
  {
    v16 = *(WebCore::MediaStream **)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    v26 = v9;
    if ((v17 & 0xFFFE000000000002) != 0)
      goto LABEL_24;
    v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
    v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
    v20 = (char **)(16 * v18);
    if ((_DWORD)v18)
      v21 = v20 == &WebCore::JSMediaStreamTrack::s_info;
    else
      v21 = 1;
    if (!v21)
    {
      do
      {
        v20 = (char **)v20[2];
        v19 = v20 != 0;
      }
      while (v20 != &WebCore::JSMediaStreamTrack::s_info && v20 != 0);
    }
    if (v19)
    {
      WebCore::MediaStream::removeTrack(v16, (WebCore::MediaStreamTrack *)(*(_QWORD *)(v17 + 24) - 32), a3);
      return 10;
    }
    else
    {
LABEL_24:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v26, 0, "track", 6, "MediaStream", 12, a8, "removeTrack", 12, "MediaStreamTrack", 17);
      return 0;
    }
  }
}

uint64_t WebCore::jsMediaStreamPrototypeFunction_clone(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  JSC::VM *v10;
  uint64_t v11;
  WebCore::MediaStream *v12;
  bmalloc::api *v14;
  void *v15;
  uint64_t v16;
  WebCore::MediaStream *v17;

  v3 = (int)this;
  v4 = *((_QWORD *)a2 + 5);
  v16 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v16, "MediaStream", "clone");
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSMediaStream::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSMediaStream::s_info && v7 != 0);
  }
  if (!v6)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v16, "MediaStream", "clone");
  v10 = *(JSC::VM **)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  WebCore::MediaStream::clone(*(WebCore::MediaStream **)(v4 + 24), &v17);
  if (!v17)
    return 2;
  v11 = WebCore::wrap<WebCore::MediaStream>(v3, v10, (uint64_t)v17);
  v12 = v17;
  v17 = 0;
  if (v12)
  {
    if (*((_DWORD *)v12 + 22) == 1)
    {
      WebCore::MediaStream::~MediaStream(v12);
      bmalloc::api::isoDeallocate(v14, v15);
    }
    else
    {
      --*((_DWORD *)v12 + 22);
    }
  }
  return v11;
}

uint64_t WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::MediaStreamTrack>>>::convert<WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>,0ul>(uint64_t a1, JSC::VM *a2, uint64_t a3)
{
  JSC::VM *v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  objc_class *v10;
  int v11;
  BOOL v12;
  JSValue v13;
  void *v14;
  JSC::VM *v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v19;
  WTF *v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  WTF *v24;
  _OWORD v25[4];
  uint64_t v26;
  JSC::VM *v27;

  v6 = *(JSC::VM **)(a1 + 56);
  v27 = v6;
  v22 = 0;
  v23 = 0x800000000;
  v24 = (WTF *)((char *)v25 + 8);
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  v7 = *(_DWORD *)(a3 + 12);
  if (v7 >= 9)
  {
    v22 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v23) == 1;
    v7 = *(_DWORD *)(a3 + 12);
    if (v7)
    {
LABEL_3:
      v8 = *(uint64_t **)a3;
      v9 = 8 * v7;
      do
      {
        v10 = (objc_class *)WebCore::wrap<WebCore::MediaStreamTrack>(a1, a2, *v8);
        if (*((_DWORD *)v6 + 20))
        {
          if ((JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) != 0)
            goto LABEL_30;
        }
        v11 = v23;
        if ((_DWORD)v23 != HIDWORD(v23) && (v24 != (WTF *)((char *)v25 + 8) ? (v12 = v24 == 0) : (v12 = 1), v12))
        {
          *((_QWORD *)v24 + v23) = v10;
          LODWORD(v23) = v11 + 1;
        }
        else
        {
          v13.super.isa = v10;
          if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v23, v13) == 1)
            v22 = 1;
        }
        ++v8;
        v9 -= 8;
      }
      while (v9);
    }
  }
  else if (v7)
  {
    goto LABEL_3;
  }
  if (v22)
  {
    JSC::throwOutOfMemoryError();
  }
  else
  {
    v20 = v24;
    v21 = v23;
    v15 = (JSC::VM *)*((_QWORD *)a2 + 7);
    if (!*((_DWORD *)v15 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) == 0)
    {
      v16 = JSC::constructArray();
      goto LABEL_22;
    }
  }
LABEL_30:
  v16 = 0;
LABEL_22:
  v17 = *(uint64_t **)&v25[0];
  if (*(_QWORD *)&v25[0])
  {
    v20 = (WTF *)&v23;
    v19 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v25[0], (uint64_t *)&v20);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v17, v19);
  }
  if (v24 != (WTF *)((char *)v25 + 8) && v24)
    WTF::fastFree(v24, v14);
  return v16;
}

WebCore::MediaStream *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore29MediaStreamAudioSourceOptionsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WebCore::MediaStream **a2)
{
  WebCore::MediaStream *result;
  bmalloc::api *v3;
  void *v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 22) == 1)
    {
      WebCore::MediaStream::~MediaStream(result);
      return (WebCore::MediaStream *)bmalloc::api::isoDeallocate(v3, v4);
    }
    else
    {
      --*((_DWORD *)result + 22);
    }
  }
  return result;
}

unint64_t WebCore::jsMediaStreamTrackPrototypeFunction_clone(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  JSC::VM *v10;
  unint64_t v11;
  _DWORD *v12;
  uint64_t v14;
  _DWORD *v15;

  v4 = *((_QWORD *)a2 + 5);
  v14 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v14, "MediaStreamTrack", "clone");
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSMediaStreamTrack::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSMediaStreamTrack::s_info && v7 != 0);
  }
  if (!v6)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v14, "MediaStreamTrack", "clone");
  v10 = *(JSC::VM **)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  (*(void (**)(_DWORD **__return_ptr, uint64_t))(*(_QWORD *)(*(_QWORD *)(v4 + 24) - 32) + 80))(&v15, *(_QWORD *)(v4 + 24) - 32);
  if (!v15)
    return 2;
  v11 = WebCore::wrap<WebCore::MediaStreamTrack>((uint64_t)this, v10, (uint64_t)v15);
  v12 = v15;
  v15 = 0;
  if (v12)
  {
    if (v12[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 16))(v12);
    else
      --v12[6];
  }
  return v11;
}

uint64_t WebCore::jsMediaStreamTrackPrototypeFunction_stop(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "MediaStreamTrack", "stop");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSMediaStreamTrack::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSMediaStreamTrack::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "MediaStreamTrack", "stop");
  WebCore::MediaStreamTrack::stopTrack(*(_QWORD *)(v3 + 24) - 32, 0);
  return 10;
}

_BYTE *WebCore::jsMediaStreamTrackPrototypeFunction_getCapabilities(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  JSC::JSGlobalObject *v10;
  const WebCore::MediaTrackCapabilities *v11;
  unint64_t v12;
  void *v13;
  uint64_t v15;
  _BYTE v16[432];

  v4 = *((_QWORD *)a2 + 5);
  v15 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v15, "MediaStreamTrack", "getCapabilities");
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSMediaStreamTrack::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSMediaStreamTrack::s_info && v7 != 0);
  }
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v15, "MediaStreamTrack", "getCapabilities");
  v10 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  WebCore::MediaStreamTrack::getCapabilities((WebCore::MediaStreamTrack *)(*(_QWORD *)(v4 + 24) - 32), (uint64_t)v16);
  v12 = WebCore::convertDictionaryToJS(this, v10, (WebCore::JSDOMGlobalObject *)v16, v11);
  WebCore::MediaTrackCapabilities::~MediaTrackCapabilities((WebCore::MediaTrackCapabilities *)v16, v13);
  return (_BYTE *)v12;
}

void WebCore::jsMediaStreamTrackPrototypeFunction_getConstraints(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, const WebCore::MediaTrackConstraints *a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;

  v4 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    goto LABEL_14;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSMediaStreamTrack::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSMediaStreamTrack::s_info && v7 != 0);
  }
  if (!v6)
LABEL_14:
    WebCore::throwThisTypeError((int)this, (int)&v10, "MediaStreamTrack", "getConstraints");
  else
    WebCore::convertDictionaryToJS(this, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28), (WebCore::JSDOMGlobalObject *)(*(_QWORD *)(v4 + 24) + 88), a4);
}

_BYTE *WebCore::jsMediaStreamTrackPrototypeFunction_getSettings(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  unint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  unint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  unint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  unint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  unint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  unint64_t v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  unint64_t v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  unsigned __int8 *v88;
  unsigned int v89;
  unsigned __int8 *v90;
  unsigned int v91;
  unsigned __int8 *v92;
  unsigned int v93;
  unsigned __int8 *v94;
  unsigned int v95;
  unsigned __int8 *v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  uint64_t v103;
  unsigned int v104;
  char v105;
  unsigned int v106;
  char v107;
  double v108;
  char v109;
  double v110;
  char v111;
  WTF::StringImpl *v112;
  double v113;
  char v114;
  unsigned int v115;
  char v116;
  unsigned int v117;
  char v118;
  char v119;
  char v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  double v125;
  char v126;
  char v127;
  char v128;
  char v129;
  char v130;
  char v131;
  char v132;
  WTF::StringImpl *v133;
  unint64_t v134;
  int v135;
  int v136;
  uint64_t v137;

  v4 = *((_QWORD *)a2 + 5);
  v103 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v103, "MediaStreamTrack", "getSettings");
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSMediaStreamTrack::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSMediaStreamTrack::s_info && v7 != 0);
  }
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v103, "MediaStreamTrack", "getSettings");
  WebCore::MediaStreamTrack::getSettings((int *)(*(_QWORD *)(v4 + 24) - 32), (uint64_t)&v104);
  v10 = *((_QWORD *)this + 7);
  v11 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v12 = 8 * *(unsigned __int8 *)(v11 + 14);
  v13 = JSC::allocateCell<JSC::JSFinalObject>(v10, v12 + 16);
  v14 = *(_DWORD *)(v11 + 8);
  *(_DWORD *)v13 = v11 >> 4;
  *(_DWORD *)(v13 + 4) = v14;
  *(_QWORD *)(v13 + 8) = 0;
  bzero((void *)(v13 + 16), v12);
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  if (v109)
  {
    if ((*(_QWORD *)&v108 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v15 = (int)v108, v108 == (double)(int)v15)
      && ((_DWORD)v15 || (*(_QWORD *)&v108 & 0x8000000000000000) == 0))
    {
      v16 = v15 | 0xFFFE000000000000;
    }
    else
    {
      v16 = *(_QWORD *)&v108 + 0x2000000000000;
    }
    if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
      goto LABEL_262;
    WTF::AtomStringImpl::addLiteral();
    v17 = v133;
    v133 = 0;
    v134 = v13;
    v135 = -1;
    v136 = 0x1000000;
    v137 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v13, (JSC::VM *)v10, (unint64_t)v17, v16, 0, (uint64_t)&v133);
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v18);
      else
        *(_DWORD *)v17 -= 2;
    }
  }
  if (v130)
  {
    if (v129)
      v19 = 7;
    else
      v19 = 6;
    if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
      goto LABEL_262;
    WTF::AtomStringImpl::addLiteral();
    v20 = v133;
    v133 = 0;
    v134 = v13;
    v135 = -1;
    v136 = 0x1000000;
    v137 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v13, (JSC::VM *)v10, (unint64_t)v20, v19, 0, (uint64_t)&v133);
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v21);
      else
        *(_DWORD *)v20 -= 2;
    }
  }
  if (!v122)
    goto LABEL_43;
  v22 = *((_QWORD *)this + 7);
  v23 = *((_DWORD *)v122 + 1);
  if (v23)
  {
    if (v23 != 1)
    {
LABEL_36:
      v24 = *(_QWORD *)(v22 + 64760);
      if (!v24 || v122 != *(WTF::StringImpl **)(v24 + 8))
        v24 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_39;
    }
    v88 = (unsigned __int8 *)*((_QWORD *)v122 + 1);
    if ((*((_BYTE *)v122 + 16) & 4) != 0)
    {
      v89 = *v88;
    }
    else
    {
      v98 = *(unsigned __int16 *)v88;
      if (v98 > 0xFF)
        goto LABEL_36;
      v89 = v98;
    }
    v24 = *(_QWORD *)(v22 + 8 * v89 + 42216);
  }
  else
  {
    v24 = *(_QWORD *)(v22 + 41968);
  }
LABEL_39:
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    goto LABEL_262;
  WTF::AtomStringImpl::addLiteral();
  v25 = v133;
  v133 = 0;
  v134 = v13;
  v135 = -1;
  v136 = 0x1000000;
  v137 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v13, (JSC::VM *)v10, (unint64_t)v25, v24, 0, (uint64_t)&v133);
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v26);
    else
      *(_DWORD *)v25 -= 2;
  }
LABEL_43:
  if (!v121)
    goto LABEL_53;
  v27 = *((_QWORD *)this + 7);
  v28 = *((_DWORD *)v121 + 1);
  if (v28)
  {
    if (v28 != 1)
    {
LABEL_46:
      v29 = *(_QWORD *)(v27 + 64760);
      if (!v29 || v121 != *(WTF::StringImpl **)(v29 + 8))
        v29 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_49;
    }
    v90 = (unsigned __int8 *)*((_QWORD *)v121 + 1);
    if ((*((_BYTE *)v121 + 16) & 4) != 0)
    {
      v91 = *v90;
    }
    else
    {
      v99 = *(unsigned __int16 *)v90;
      if (v99 > 0xFF)
        goto LABEL_46;
      v91 = v99;
    }
    v29 = *(_QWORD *)(v27 + 8 * v91 + 42216);
  }
  else
  {
    v29 = *(_QWORD *)(v27 + 41968);
  }
LABEL_49:
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    goto LABEL_262;
  WTF::AtomStringImpl::addLiteral();
  v30 = v133;
  v133 = 0;
  v134 = v13;
  v135 = -1;
  v136 = 0x1000000;
  v137 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v13, (JSC::VM *)v10, (unint64_t)v30, v29, 0, (uint64_t)&v133);
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v31);
    else
      *(_DWORD *)v30 -= 2;
  }
LABEL_53:
  if (v120)
  {
    if (v119)
      v32 = 7;
    else
      v32 = 6;
    if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
      goto LABEL_262;
    WTF::AtomStringImpl::addLiteral();
    v33 = v133;
    v133 = 0;
    v134 = v13;
    v135 = -1;
    v136 = 0x1000000;
    v137 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v13, (JSC::VM *)v10, (unint64_t)v33, v32, 0, (uint64_t)&v133);
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v34);
      else
        *(_DWORD *)v33 -= 2;
    }
  }
  if (!v112)
    goto LABEL_71;
  v35 = *((_QWORD *)this + 7);
  v36 = *((_DWORD *)v112 + 1);
  if (v36)
  {
    if (v36 != 1)
    {
LABEL_64:
      v37 = *(_QWORD *)(v35 + 64760);
      if (!v37 || v112 != *(WTF::StringImpl **)(v37 + 8))
        v37 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_67;
    }
    v92 = (unsigned __int8 *)*((_QWORD *)v112 + 1);
    if ((*((_BYTE *)v112 + 16) & 4) != 0)
    {
      v93 = *v92;
    }
    else
    {
      v100 = *(unsigned __int16 *)v92;
      if (v100 > 0xFF)
        goto LABEL_64;
      v93 = v100;
    }
    v37 = *(_QWORD *)(v35 + 8 * v93 + 42216);
  }
  else
  {
    v37 = *(_QWORD *)(v35 + 41968);
  }
LABEL_67:
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    goto LABEL_262;
  WTF::AtomStringImpl::addLiteral();
  v38 = v133;
  v133 = 0;
  v134 = v13;
  v135 = -1;
  v136 = 0x1000000;
  v137 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v13, (JSC::VM *)v10, (unint64_t)v38, v37, 0, (uint64_t)&v133);
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, v39);
    else
      *(_DWORD *)v38 -= 2;
  }
LABEL_71:
  if (v111)
  {
    if ((*(_QWORD *)&v110 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v40 = (int)v110, v110 == (double)(int)v40)
      && ((_DWORD)v40 || (*(_QWORD *)&v110 & 0x8000000000000000) == 0))
    {
      v41 = v40 | 0xFFFE000000000000;
    }
    else
    {
      v41 = *(_QWORD *)&v110 + 0x2000000000000;
    }
    if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
      goto LABEL_262;
    WTF::AtomStringImpl::addLiteral();
    v42 = v133;
    v133 = 0;
    v134 = v13;
    v135 = -1;
    v136 = 0x1000000;
    v137 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v13, (JSC::VM *)v10, (unint64_t)v42, v41, 0, (uint64_t)&v133);
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, v43);
      else
        *(_DWORD *)v42 -= 2;
    }
  }
  if (!v123)
    goto LABEL_92;
  v44 = *((_QWORD *)this + 7);
  v45 = *((_DWORD *)v123 + 1);
  if (v45)
  {
    if (v45 != 1)
    {
LABEL_85:
      v46 = *(_QWORD *)(v44 + 64760);
      if (!v46 || v123 != *(WTF::StringImpl **)(v46 + 8))
        v46 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_88;
    }
    v94 = (unsigned __int8 *)*((_QWORD *)v123 + 1);
    if ((*((_BYTE *)v123 + 16) & 4) != 0)
    {
      v95 = *v94;
    }
    else
    {
      v101 = *(unsigned __int16 *)v94;
      if (v101 > 0xFF)
        goto LABEL_85;
      v95 = v101;
    }
    v46 = *(_QWORD *)(v44 + 8 * v95 + 42216);
  }
  else
  {
    v46 = *(_QWORD *)(v44 + 41968);
  }
LABEL_88:
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    goto LABEL_262;
  WTF::AtomStringImpl::addLiteral();
  v47 = v133;
  v133 = 0;
  v134 = v13;
  v135 = -1;
  v136 = 0x1000000;
  v137 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v13, (JSC::VM *)v10, (unint64_t)v47, v46, 0, (uint64_t)&v133);
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WTF::StringImpl::destroy(v47, v48);
    else
      *(_DWORD *)v47 -= 2;
  }
LABEL_92:
  if (v107)
  {
    v49 = v106;
    if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
      goto LABEL_262;
    v50 = v49 | 0xFFFE000000000000;
    WTF::AtomStringImpl::addLiteral();
    v51 = v133;
    v133 = 0;
    v134 = v13;
    v135 = -1;
    v136 = 0x1000000;
    v137 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v13, (JSC::VM *)v10, (unint64_t)v51, v50, 0, (uint64_t)&v133);
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
        WTF::StringImpl::destroy(v51, v52);
      else
        *(_DWORD *)v51 -= 2;
    }
  }
  if (v132)
  {
    if (v131)
      v53 = 7;
    else
      v53 = 6;
    if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
      goto LABEL_262;
    WTF::AtomStringImpl::addLiteral();
    v54 = v133;
    v133 = 0;
    v134 = v13;
    v135 = -1;
    v136 = 0x1000000;
    v137 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v13, (JSC::VM *)v10, (unint64_t)v54, v53, 0, (uint64_t)&v133);
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
        WTF::StringImpl::destroy(v54, v55);
      else
        *(_DWORD *)v54 -= 2;
    }
  }
  if (v116)
  {
    v56 = v115;
    if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
      goto LABEL_262;
    v57 = v56 | 0xFFFE000000000000;
    WTF::AtomStringImpl::addLiteral();
    v58 = v133;
    v133 = 0;
    v134 = v13;
    v135 = -1;
    v136 = 0x1000000;
    v137 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v13, (JSC::VM *)v10, (unint64_t)v58, v57, 0, (uint64_t)&v133);
    if (v58)
    {
      if (*(_DWORD *)v58 == 2)
        WTF::StringImpl::destroy(v58, v59);
      else
        *(_DWORD *)v58 -= 2;
    }
  }
  if (v118)
  {
    v60 = v117;
    if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
      goto LABEL_262;
    v61 = v60 | 0xFFFE000000000000;
    WTF::AtomStringImpl::addLiteral();
    v62 = v133;
    v133 = 0;
    v134 = v13;
    v135 = -1;
    v136 = 0x1000000;
    v137 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v13, (JSC::VM *)v10, (unint64_t)v62, v61, 0, (uint64_t)&v133);
    if (v62)
    {
      if (*(_DWORD *)v62 == 2)
        WTF::StringImpl::destroy(v62, v63);
      else
        *(_DWORD *)v62 -= 2;
    }
  }
  if (v128)
  {
    if (v127)
      v64 = 7;
    else
      v64 = 6;
    if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
      goto LABEL_262;
    WTF::AtomStringImpl::addLiteral();
    v65 = v133;
    v133 = 0;
    v134 = v13;
    v135 = -1;
    v136 = 0x1000000;
    v137 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v13, (JSC::VM *)v10, (unint64_t)v65, v64, 0, (uint64_t)&v133);
    if (v65)
    {
      if (*(_DWORD *)v65 == 2)
        WTF::StringImpl::destroy(v65, v66);
      else
        *(_DWORD *)v65 -= 2;
    }
  }
  if (v114)
  {
    if ((*(_QWORD *)&v113 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v67 = (int)v113, v113 == (double)(int)v67)
      && ((_DWORD)v67 || (*(_QWORD *)&v113 & 0x8000000000000000) == 0))
    {
      v68 = v67 | 0xFFFE000000000000;
    }
    else
    {
      v68 = *(_QWORD *)&v113 + 0x2000000000000;
    }
    if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
      goto LABEL_262;
    WTF::AtomStringImpl::addLiteral();
    v69 = v133;
    v133 = 0;
    v134 = v13;
    v135 = -1;
    v136 = 0x1000000;
    v137 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v13, (JSC::VM *)v10, (unint64_t)v69, v68, 0, (uint64_t)&v133);
    if (v69)
    {
      if (*(_DWORD *)v69 == 2)
        WTF::StringImpl::destroy(v69, v70);
      else
        *(_DWORD *)v69 -= 2;
    }
  }
  v71 = v124;
  if (!v124)
    goto LABEL_144;
  v72 = *((_QWORD *)this + 7);
  v73 = *((_DWORD *)v124 + 1);
  if (v73)
  {
    if (v73 != 1)
    {
LABEL_137:
      v74 = *(_QWORD *)(v72 + 64760);
      if (!v74 || v124 != *(WTF::StringImpl **)(v74 + 8))
        v74 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_140;
    }
    v96 = (unsigned __int8 *)*((_QWORD *)v124 + 1);
    if ((*((_BYTE *)v124 + 16) & 4) != 0)
    {
      v97 = *v96;
    }
    else
    {
      v102 = *(unsigned __int16 *)v96;
      if (v102 > 0xFF)
        goto LABEL_137;
      v97 = v102;
    }
    v74 = *(_QWORD *)(v72 + 8 * v97 + 42216);
  }
  else
  {
    v74 = *(_QWORD *)(v72 + 41968);
  }
LABEL_140:
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    goto LABEL_262;
  WTF::AtomStringImpl::addLiteral();
  v75 = v133;
  v133 = 0;
  v134 = v13;
  v135 = -1;
  v136 = 0x1000000;
  v137 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v13, (JSC::VM *)v10, (unint64_t)v75, v74, 0, (uint64_t)&v133);
  if (v75)
  {
    if (*(_DWORD *)v75 == 2)
      WTF::StringImpl::destroy(v75, v71);
    else
      *(_DWORD *)v75 -= 2;
  }
LABEL_144:
  if (v105)
  {
    v76 = v104;
    if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    {
LABEL_262:
      v13 = 0;
      goto LABEL_160;
    }
    v77 = v76 | 0xFFFE000000000000;
    WTF::AtomStringImpl::addLiteral();
    v78 = v133;
    v133 = 0;
    v134 = v13;
    v135 = -1;
    v136 = 0x1000000;
    v137 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v13, (JSC::VM *)v10, (unint64_t)v78, v77, 0, (uint64_t)&v133);
    if (v78)
    {
      if (*(_DWORD *)v78 == 2)
        WTF::StringImpl::destroy(v78, v71);
      else
        *(_DWORD *)v78 -= 2;
    }
  }
  if (v126)
  {
    if ((*(_QWORD *)&v125 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v79 = (int)v125, v125 == (double)(int)v79)
      && ((_DWORD)v79 || (*(_QWORD *)&v125 & 0x8000000000000000) == 0))
    {
      v80 = v79 | 0xFFFE000000000000;
    }
    else
    {
      v80 = *(_QWORD *)&v125 + 0x2000000000000;
    }
    if (!*(_DWORD *)(v10 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) == 0)
    {
      WTF::AtomStringImpl::addLiteral();
      v81 = v133;
      v133 = 0;
      v134 = v13;
      v135 = -1;
      v136 = 0x1000000;
      v137 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v13, (JSC::VM *)v10, (unint64_t)v81, v80, 0, (uint64_t)&v133);
      if (v81)
      {
        if (*(_DWORD *)v81 == 2)
          WTF::StringImpl::destroy(v81, v71);
        else
          *(_DWORD *)v81 -= 2;
      }
      goto LABEL_160;
    }
    goto LABEL_262;
  }
LABEL_160:
  v82 = v124;
  v124 = 0;
  if (v82)
  {
    if (*(_DWORD *)v82 == 2)
      WTF::StringImpl::destroy(v82, v71);
    else
      *(_DWORD *)v82 -= 2;
  }
  v83 = v123;
  v123 = 0;
  if (v83)
  {
    if (*(_DWORD *)v83 == 2)
      WTF::StringImpl::destroy(v83, v71);
    else
      *(_DWORD *)v83 -= 2;
  }
  v84 = v122;
  v122 = 0;
  if (v84)
  {
    if (*(_DWORD *)v84 == 2)
      WTF::StringImpl::destroy(v84, v71);
    else
      *(_DWORD *)v84 -= 2;
  }
  v85 = v121;
  v121 = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
      WTF::StringImpl::destroy(v85, v71);
    else
      *(_DWORD *)v85 -= 2;
  }
  v86 = v112;
  v112 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
      WTF::StringImpl::destroy(v86, v71);
    else
      *(_DWORD *)v86 -= 2;
  }
  return (_BYTE *)v13;
}

unint64_t WebCore::jsMediaStreamTrackPrototypeFunction_applyConstraints(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  WebCore::DOMGuardedObject *v32;
  uint64_t v33;
  objc_class *v35;
  WebCore::DOMGuardedObject *v36;
  WebCore::DOMGuardedObject *v37;
  WebCore::DOMGuardedObject *v38;
  _BYTE v39[1048];
  uint64_t v40;
  uint64_t v41;
  char v42;
  unsigned int v43;
  _BYTE v44[1048];
  uint64_t v45;
  uint64_t v46;
  char v47;
  _BYTE v48[1048];
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194D3F4C0);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_49;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSMediaStreamTrack::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSMediaStreamTrack::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_49:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"MediaStreamTrack", "applyConstraints", v16);
LABEL_42:
    if (*((_DWORD *)v14 + 4) == 1)
      (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
    else
      --*((_DWORD *)v14 + 4);
    goto LABEL_44;
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v23 = 10;
  else
    v23 = *((_QWORD *)a2 + 6);
  v24 = *(_QWORD *)(v17 + 24);
  WebCore::convertDictionary<WebCore::MediaTrackConstraints>((JSC::JSCell *)v23, this, (uint64_t)&v38);
  v25 = v43;
  if (!v43)
  {
    v26 = v24 - 32;
    WebCore::MediaTrackConstraintSet::MediaTrackConstraintSet((uint64_t)v44, (uint64_t)v39);
    LOBYTE(v45) = 0;
    v47 = 0;
    if (v42)
    {
      v27 = v40;
      v40 = 0;
      v45 = v27;
      v28 = v41;
      v41 = 0;
      v46 = v28;
      v47 = 1;
    }
    WebCore::MediaTrackConstraintSet::MediaTrackConstraintSet((uint64_t)v48, (uint64_t)v44);
    LOBYTE(v49) = 0;
    v51 = 0;
    if (v47)
    {
      v29 = v45;
      v45 = 0;
      v49 = v29;
      v30 = v46;
      v46 = 0;
      v50 = v30;
      v51 = 1;
    }
    v52 = 1;
    v37 = v14;
    WebCore::MediaStreamTrack::applyConstraints(v26, (WebCore *)v48, (uint64_t *)&v37);
    v32 = v37;
    v37 = 0;
    if (v32)
    {
      if (*((_DWORD *)v32 + 4) == 1)
        (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v32 + 16))(v32);
      else
        --*((_DWORD *)v32 + 4);
    }
    if (v52)
      WebCore::MediaTrackConstraints::~MediaTrackConstraints((WebCore::MediaTrackConstraints *)v48, v31);
    WebCore::MediaTrackConstraints::~MediaTrackConstraints((WebCore::MediaTrackConstraints *)v44, v31);
    v14 = 0;
    v25 = v43;
  }
  if (v25 != -1)
    (*(&off_1E32B7100 + v25))((int)v48, (WebCore::MediaTrackConstraints *)v39);
  if (v14)
    goto LABEL_42;
LABEL_44:
  v33 = *(_QWORD *)(v10 + 16);
  if (v33)
  {
    if (*(_QWORD *)(v10 + 24) != v33)
    {
      v35 = *(objc_class **)(v33 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v38);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v38, v35, 0);
      v36 = v38;
      v38 = 0;
      if (v36)
      {
        if (*((_DWORD *)v36 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v36 + 16))(v36);
        else
          --*((_DWORD *)v36 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore21MediaTrackConstraintsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::MediaTrackConstraints *this)
{
  WebCore::MediaTrackConstraints::~MediaTrackConstraints(this, this);
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore21MediaStreamTrackEvent4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  _DWORD *result;

  result = *(_DWORD **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (result[6] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[6];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore25MediaStreamTrackProcessorENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore25MediaStreamTrackProcessorENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore25MediaStreamTrackProcessor4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[6];
  }
  return result;
}

uint64_t WebCore::JSLocation::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::jsLocation_portGetter(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSLocation *a3)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v11;
  uint64_t v12;

  v12 = *((_QWORD *)this + 7);
  v5 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 16);
  if (v5)
    v6 = *(WTF::StringImpl **)(v5 + 8);
  else
    v6 = 0;
  if (!WebCore::BindingSecurity::shouldAllowAccessToDOMWindow(this, v6, 2))
    return 10;
  WebCore::Location::port(*((WebCore::Location ***)a2 + 3), &v11);
  v8 = WebCore::toJS<WebCore::IDLUSVString,WTF::String>((uint64_t)this, (uint64_t)&v12, (uint64_t *)&v11);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  return v8;
}

uint64_t *JSC::weakRemove<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,WebCore::JSLocation *>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v19;

  v2 = *result;
  if (*result)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    v8 = *(_QWORD *)(v2 + 16 * v7);
    if (v8 != a2)
    {
      v19 = 1;
      while (v8)
      {
        v7 = ((_DWORD)v7 + v19) & v3;
        v8 = *(_QWORD *)(v2 + 16 * v7);
        ++v19;
        if (v8 == a2)
          goto LABEL_3;
      }
      v7 = *(unsigned int *)(v2 - 4);
    }
LABEL_3:
    if (v7 != *(_DWORD *)(v2 - 4))
    {
      v9 = (_QWORD *)(v2 + 16 * v7);
      *v9 = -1;
      v12 = v9[1];
      v11 = v9 + 1;
      v10 = v12;
      if (v12)
      {
        *(_QWORD *)(v10 + 8) = 3;
        *v11 = 0;
      }
      ++*(_DWORD *)(*result - 16);
      v13 = *result;
      if (*result)
        v14 = *(_DWORD *)(v13 - 12) - 1;
      else
        v14 = -1;
      *(_DWORD *)(v13 - 12) = v14;
      v15 = *result;
      if (*result)
      {
        v16 = 6 * *(_DWORD *)(v15 - 12);
        v17 = *(_DWORD *)(v15 - 4);
        if (v16 < v17 && v17 >= 9)
          return WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(result, v17 >> 1, 0);
      }
    }
  }
  return result;
}

uint64_t WebCore::JSManagedMediaSource::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSManagedMediaSource::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSManagedMediaSource *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;

  v5 = (WebCore::JSManagedMediaSource *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSManagedMediaSource::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v11 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v11);
    v6[5] = SlowCase + (int)v11;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  v9 = v8 + 40;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v9;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

_QWORD *WebCore::cacheWrapper<WebCore::ManagedMediaSource,WebCore::JSManagedMediaSource>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *Allocator;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  _QWORD *v18;
  uint64_t v19;

  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::ManagedMediaSource *)::owner = (uint64_t)&off_1E32B7C20;
  }
  v3 = (_QWORD *)(a2 + 48);
  if (!a2)
    v3 = 0;
  if (*(_DWORD *)(a1 + 48))
  {
    v6 = (uint64_t *)(a1 + 32);
    v19 = a2;
    if (a3)
    {
      v13 = (uint64_t *)(a1 + 32);
      if ((a3 & 8) != 0)
        v10 = (a3 - 112) | 1;
      else
        v10 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v10 & 1) != 0)
        v11 = v10 + 47;
      else
        v11 = *(_QWORD *)v10 + 32;
      Allocator = *(_QWORD **)(v11 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v11 + 16) = *Allocator;
      *Allocator = a3;
      Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::ManagedMediaSource *)::owner;
      Allocator[2] = a1;
      v6 = v13;
    }
    else
    {
      Allocator = 0;
    }
    v18 = Allocator;
    result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v6, &v19, (uint64_t *)&v18);
    if (v18)
      v18[1] = 3;
  }
  else
  {
    if (a3)
    {
      v12 = v3;
      if ((a3 & 8) != 0)
        v8 = (a3 - 112) | 1;
      else
        v8 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v9 = v8 + 47;
      else
        v9 = *(_QWORD *)v8 + 32;
      result = *(_QWORD **)(v9 + 16);
      if (!result)
        result = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v9 + 16) = *result;
      *result = a3;
      result[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::ManagedMediaSource *)::owner;
      result[2] = a1;
      v3 = v12;
    }
    else
    {
      result = 0;
    }
    v5 = *v3;
    *v3 = result;
    if (v5)
      *(_QWORD *)(v5 + 8) = 3;
  }
  return result;
}

uint64_t WebCore::JSMathMLElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void WebCore::MediaCapabilities::~MediaCapabilities(WebCore::MediaCapabilities *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (uint64_t *)(v3 + 8);
      do
      {
        if (*(v5 - 1) != -1)
        {
          v6 = *v5;
          *v5 = 0;
          if (v6)
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v7 = *((_QWORD *)this + 3);
  if (v7)
  {
    v8 = *(unsigned int *)(v7 - 4);
    if ((_DWORD)v8)
    {
      v9 = (uint64_t *)(v7 + 8);
      do
      {
        if (*(v9 - 1) != -1)
        {
          v10 = *v9;
          *v9 = 0;
          if (v10)
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        }
        v9 += 2;
        --v8;
      }
      while (v8);
    }
    WTF::fastFree((WTF *)(v7 - 16), a2);
  }
  v11 = *((_QWORD *)this + 1);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 0;
    v12 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t WebCore::JSMediaCapabilities::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSMediaController::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSMediaDeviceInfo::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void WebCore::Converter<WebCore::IDLUnion<WebCore::IDLBoolean,WebCore::IDLDictionary<WebCore::MediaTrackConstraints>>>::convert(uint64_t a1, JSC::JSGlobalObject *a2, unint64_t this)
{
  JSC::VM *v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v7;
  int *v8;
  int v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  int v13;
  char v14;
  _BYTE v15[8];
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
    goto LABEL_2;
  if ((this & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned __int8 *)(this + 5);
    if (v6 >= 0x17)
    {
LABEL_2:
      WebCore::convertDictionary<WebCore::MediaTrackConstraints>((JSC::JSCell *)this, a2, (uint64_t)v15);
      WebCore::Detail::ConversionResultStorage<std::variant<BOOL,WebCore::MediaTrackConstraints>>::ConversionResultStorage<WebCore::MediaTrackConstraints>(WebCore::Detail::ConversionResultStorage<WebCore::MediaTrackConstraints> &&)::{lambda(void)#1}::operator()(a1, (uint64_t)v15);
      if (v17 != -1)
        (*(&off_1E32B7100 + v17))((int)&v14, (WebCore::MediaTrackConstraints *)&v16);
      return;
    }
    v4 = (JSC::VM *)*((_QWORD *)a2 + 7);
    if (v6 == 3)
    {
      v9 = *(_DWORD *)(this + 8);
    }
    else
    {
      if (v6 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v5 = 1;
          goto LABEL_28;
        }
        v12 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) == (_QWORD)a2;
LABEL_25:
        v5 = !v12;
        goto LABEL_28;
      }
      v7 = *(_QWORD *)(this + 8);
      if ((v7 & 1) != 0)
        v8 = (int *)(this + 16);
      else
        v8 = (int *)(v7 + 4);
      v9 = *v8;
    }
    v12 = v9 == 0;
    goto LABEL_25;
  }
  v4 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if ((this & 0xFFFFFFFFFFFFFFFELL) == 6)
  {
    v5 = this == 7;
  }
  else
  {
    v10 = COERCE_DOUBLE(this - 0x2000000000000) > 0.0 || COERCE_DOUBLE(this - 0x2000000000000) < 0.0;
    if (this - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      v11 = v10;
    else
      v11 = this == 7;
    if (this >= 0xFFFE000000000000)
      v5 = (_DWORD)this != 0;
    else
      v5 = v11;
  }
LABEL_28:
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
  {
    v13 = 1;
  }
  else
  {
    v13 = 0;
    *(_BYTE *)(a1 + 16) = v5;
    *(_DWORD *)(a1 + 1088) = 0;
  }
  *(_DWORD *)(a1 + 1096) = v13;
}

void WebCore::Detail::ConversionResultStorage<std::variant<BOOL,WebCore::MediaTrackConstraints>>::ConversionResultStorage<WebCore::MediaTrackConstraints>(WebCore::Detail::ConversionResultStorage<WebCore::MediaTrackConstraints> &&)::{lambda(void)#1}::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _BYTE v13[1048];
  uint64_t v14;
  uint64_t v15;
  char v16;
  _BYTE v17[1048];
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 1080))
  {
    *(_DWORD *)(a1 + 1096) = 1;
  }
  else
  {
    WebCore::MediaTrackConstraintSet::MediaTrackConstraintSet((uint64_t)v13, a2 + 8);
    LOBYTE(v14) = 0;
    v16 = 0;
    if (*(_BYTE *)(a2 + 1072))
    {
      v4 = *(_QWORD *)(a2 + 1056);
      *(_QWORD *)(a2 + 1056) = 0;
      v14 = v4;
      v5 = *(_QWORD *)(a2 + 1064);
      *(_QWORD *)(a2 + 1064) = 0;
      v15 = v5;
      v16 = 1;
    }
    WebCore::MediaTrackConstraintSet::MediaTrackConstraintSet((uint64_t)v17, (uint64_t)v13);
    LOBYTE(v18) = 0;
    v20 = 0;
    if (v16)
    {
      v6 = v14;
      v14 = 0;
      v18 = v6;
      v7 = v15;
      v15 = 0;
      v19 = v7;
      v20 = 1;
    }
    v21 = 1;
    *(_BYTE *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 1088) = -1;
    v8 = WebCore::MediaTrackConstraintSet::MediaTrackConstraintSet(a1 + 16, (uint64_t)v17);
    *(_BYTE *)(v8 + 1048) = 0;
    *(_BYTE *)(v8 + 1064) = 0;
    if (v20)
    {
      v10 = v18;
      v18 = 0;
      *(_QWORD *)(a1 + 1064) = v10;
      v11 = v19;
      v19 = 0;
      *(_QWORD *)(a1 + 1072) = v11;
      *(_BYTE *)(a1 + 1080) = 1;
    }
    *(_DWORD *)(a1 + 1088) = 1;
    *(_DWORD *)(a1 + 1096) = 0;
    if (v21 != -1)
      ((void (*)(char *, _BYTE *))*(&off_1E32B55E8 + v21))(&v12, v17);
    v21 = -1;
    WebCore::MediaTrackConstraints::~MediaTrackConstraints((WebCore::MediaTrackConstraints *)v13, v9);
  }
}

uint64_t WebCore::JSMediaDevices::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSMediaElementAudioSourceNode::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSMediaElementAudioSourceNode::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSMediaElementAudioSourceNode *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSMediaElementAudioSourceNode *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSMediaElementAudioSourceNode::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSMediaError::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSMediaKeySession::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSMediaKeyStatusMap::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSMediaKeySystemAccess::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

WTF *WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::CDMMediaCapability>>>::convert(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3)
{
  uint64_t v6;
  JSValue v7;
  int i;
  unsigned int v9;
  JSC::JSCell *IndexQuickly;
  uint64_t v11;
  JSC::JSCell *v13;
  uint64_t v14;
  unint64_t v15;
  WTF *result;
  WTF::StringImpl *v17;
  char hasExceptionsAfterHandlingTraps;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF *v24;
  uint64_t v25;

  v24 = 0;
  v25 = 0;
  v6 = *((_QWORD *)a2 + 7);
  if (JSC::getIterationMode() == 2)
  {
    for (i = 1; ; ++i)
    {
      v9 = (*(_BYTE *)(a3 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(a3 + 8) - 8) : 0;
      if (i - 1 >= v9)
        break;
      IndexQuickly = (JSC::JSCell *)JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)a3, i - 1, 0);
      if (!IndexQuickly)
        IndexQuickly = (JSC::JSCell *)JSC::JSObject::get((JSC::JSObject *)a3, a2, (i - 1));
      if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
        break;
      WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::CDMMediaCapability>>::convert(a2, IndexQuickly, (uint64_t)&v24);
      if (*(_QWORD *)(v6 + 16))
      {
        v14 = JSC::JSArrayIterator::create();
        v15 = i | 0xFFFE000000000000;
        if (i < 0)
          v15 = COERCE__INT64((double)i) + 0x2000000000000;
        *(_QWORD *)(v14 + 16) = v15;
        goto LABEL_27;
      }
    }
  }
  else
  {
    JSC::iteratorForIterable(a2, (JSC::JSGlobalObject *)a3, v7);
    if (!*(_DWORD *)(v6 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) == 0)
    {
      while (1)
      {
        v11 = JSC::iteratorStep();
        if (*(_QWORD *)(v6 + 16) || v11 == 6)
          break;
        v13 = (JSC::JSCell *)JSC::iteratorValue();
        if (*(_DWORD *)(v6 + 80))
        {
          if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
            break;
        }
        WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::CDMMediaCapability>>::convert(a2, v13, (uint64_t)&v24);
        if (*(_QWORD *)(v6 + 16))
        {
LABEL_27:
          JSC::iteratorClose();
          break;
        }
      }
    }
  }
  if (!*(_DWORD *)(v6 + 80))
  {
    result = v24;
LABEL_30:
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = v25;
    *(_DWORD *)(a1 + 16) = 0;
    return result;
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
  result = v24;
  if ((hasExceptionsAfterHandlingTraps & 1) == 0)
    goto LABEL_30;
  v19 = HIDWORD(v25);
  *(_DWORD *)(a1 + 16) = 1;
  if ((_DWORD)v19)
  {
    v20 = 24 * v19;
    v21 = (WTF::StringImpl **)((char *)result + 8);
    do
    {
      v22 = *v21;
      *v21 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v17);
        else
          *(_DWORD *)v22 -= 2;
      }
      v23 = *(v21 - 1);
      *(v21 - 1) = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v17);
        else
          *(_DWORD *)v23 -= 2;
      }
      v21 += 3;
      v20 -= 24;
    }
    while (v20);
    result = v24;
  }
  if (result)
  {
    v24 = 0;
    LODWORD(v25) = 0;
    return (WTF *)WTF::fastFree(result, v17);
  }
  return result;
}

uint64_t WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::CDMMediaCapability>>::convert(JSC::JSGlobalObject *a1, JSC::JSCell *this, uint64_t a3)
{
  JSC::VM *v5;
  unint64_t v6;
  WTF::StringImpl **v7;
  JSC::Structure *v8;
  uint64_t Object;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  __int16 v13;
  JSC::VM *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  unsigned __int16 v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  JSC::VM *v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t result;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  __int16 v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  __int16 v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  __int16 v48;
  int v49;
  WTF::StringImpl *v50;
  int v51;
  JSC::VM *v52;
  WTF::StringImpl *v53;

  v5 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v52 = v5;
  v6 = (unint64_t)this & 0xFFFFFFFFFFFFFFF7;
  v7 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v8 = 0;
    goto LABEL_10;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    JSC::throwTypeError();
LABEL_81:
    v27 = 1;
    v49 = 1;
    return ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32B71E0[v27])(&v43, &v46);
  }
  v8 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v11 = JSC::JSObject::get(v8, a1, (unint64_t)v46);
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, v10);
    else
      *(_DWORD *)v46 -= 2;
  }
  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    goto LABEL_81;
  if (v11 == 10)
  {
LABEL_10:
    v12 = *v7;
    if (*v7)
      *(_DWORD *)v12 += 2;
    LODWORD(v44) = 0;
    v43 = 0;
    if (v6 == 2)
    {
      v13 = 0;
      goto LABEL_37;
    }
    goto LABEL_23;
  }
  v46 = (WTF::StringImpl *)v11;
  v14 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((v11 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v11 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v46, a1);
    goto LABEL_20;
  }
  v15 = *(WTF::StringImpl **)(v11 + 8);
  if ((v15 & 1) != 0)
  {
    v15 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v11, a1);
    if (!v15)
      goto LABEL_19;
    goto LABEL_18;
  }
  if (v15)
LABEL_18:
    *(_DWORD *)v15 += 2;
LABEL_19:
  v50 = v15;
LABEL_20:
  if (*((_DWORD *)v14 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v14);
    v12 = v50;
    if ((_DWORD)result)
    {
      v27 = 1;
      LODWORD(v44) = 1;
      v50 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          result = WTF::StringImpl::destroy(v12, v29);
        else
          *(_DWORD *)v12 -= 2;
      }
      v12 = 0;
      goto LABEL_102;
    }
  }
  else
  {
    v12 = v50;
  }
  LODWORD(v44) = 0;
  v43 = 0;
LABEL_23:
  WTF::AtomStringImpl::addLiteral();
  v16 = v46;
  v18 = JSC::JSObject::get(v8, a1, (unint64_t)v46);
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v17);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (*((_DWORD *)v52 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v52);
    if ((_DWORD)result)
      goto LABEL_101;
  }
  if ((v18 | 8) == 0xA)
  {
    v13 = 0;
    goto LABEL_32;
  }
  v46 = (WTF::StringImpl *)*((_QWORD *)a1 + 7);
  v19 = v46;
  v20 = WebCore::parseEnumeration<WebCore::CDMEncryptionScheme>(a1, v18);
  if (!*((_DWORD *)v19 + 20) || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v19), (result & 1) == 0))
  {
    if (v20 > 0xFFu)
    {
      v13 = v20 | 0x100;
LABEL_32:
      WTF::AtomStringImpl::addLiteral();
      v21 = v46;
      v23 = JSC::JSObject::get(v8, a1, (unint64_t)v46);
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v22);
        else
          *(_DWORD *)v21 -= 2;
      }
      if (*((_DWORD *)v52 + 20))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps(v52);
        if ((_DWORD)result)
          goto LABEL_101;
      }
      if (v23 == 10)
      {
LABEL_37:
        v24 = *v7;
        if (*v7)
          *(_DWORD *)v24 += 2;
        goto LABEL_47;
      }
      v46 = (WTF::StringImpl *)v23;
      v25 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if ((v23 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v23 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v46, a1);
LABEL_45:
        if (*((_DWORD *)v25 + 20))
        {
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v25);
          v24 = v53;
          if (hasExceptionsAfterHandlingTraps)
          {
            v51 = 1;
            v53 = 0;
            if (v24)
            {
              if (*(_DWORD *)v24 == 2)
                WTF::StringImpl::destroy(v24, v41);
              else
                *(_DWORD *)v24 -= 2;
            }
            v27 = 1;
            goto LABEL_48;
          }
        }
        else
        {
          v24 = v53;
        }
LABEL_47:
        v51 = 0;
        v27 = 0;
        v50 = 0;
        v46 = v12;
        v47 = v24;
        v48 = v13;
        v12 = 0;
LABEL_48:
        v49 = v27;
        result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32B54C8[v27])(&v53, &v50);
        goto LABEL_49;
      }
      v26 = *(WTF::StringImpl **)(v23 + 8);
      if ((v26 & 1) != 0)
      {
        v26 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v23, a1);
        if (!v26)
          goto LABEL_44;
      }
      else if (!v26)
      {
LABEL_44:
        v53 = v26;
        goto LABEL_45;
      }
      *(_DWORD *)v26 += 2;
      goto LABEL_44;
    }
    result = JSC::throwTypeError();
  }
LABEL_101:
  v27 = 1;
LABEL_102:
  v49 = 1;
LABEL_49:
  if ((_DWORD)v44 != -1)
    result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32B54C8[v44])(&v50, &v43);
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      result = WTF::StringImpl::destroy(v12, v29);
      v27 = v49;
      if (!v49)
        goto LABEL_55;
      goto LABEL_67;
    }
    *(_DWORD *)v12 -= 2;
  }
  if (!v27)
  {
LABEL_55:
    v30 = v46;
    v31 = v47;
    v46 = 0;
    v47 = 0;
    v43 = v30;
    v44 = v31;
    v32 = v48;
    v45 = v48;
    v33 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v33 == *(_DWORD *)(a3 + 8))
    {
      v34 = WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v33 + 1, (unint64_t)&v43);
      v35 = *(_QWORD *)a3 + 24 * *(unsigned int *)(a3 + 12);
      v36 = *(_QWORD *)v34;
      *(_QWORD *)v34 = 0;
      *(_QWORD *)v35 = v36;
      v37 = *(_QWORD *)(v34 + 8);
      *(_QWORD *)(v34 + 8) = 0;
      *(_QWORD *)(v35 + 8) = v37;
      *(_WORD *)(v35 + 16) = *(_WORD *)(v34 + 16);
      v38 = v44;
      ++*(_DWORD *)(a3 + 12);
      v44 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v29);
        else
          *(_DWORD *)v38 -= 2;
      }
    }
    else
    {
      v39 = *(_QWORD *)a3 + 24 * v33;
      v43 = 0;
      *(_QWORD *)v39 = v30;
      *(_QWORD *)(v39 + 8) = v31;
      *(_WORD *)(v39 + 16) = v32;
      ++*(_DWORD *)(a3 + 12);
      v44 = 0;
    }
    v40 = v43;
    v43 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v29);
      else
        *(_DWORD *)v40 -= 2;
    }
    v27 = 0;
    return ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32B71E0[v27])(&v43, &v46);
  }
LABEL_67:
  if (v27 != -1)
    return ((uint64_t (*)(_QWORD, _QWORD))off_1E32B71E0[v27])(&v43, &v46);
  return result;
}

unint64_t WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  if (a2 < 0xAAAAAAB)
  {
    v2 = result;
    v3 = *(WTF **)result;
    v4 = *(_DWORD *)(result + 12);
    v5 = 24 * a2;
    v6 = WTF::fastMalloc((WTF *)(24 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v2 = v6;
    if (v4)
    {
      v8 = v6;
      v9 = (WTF *)((char *)v3 + 24 * v4);
      v10 = v3;
      do
      {
        v11 = *(WTF::StringImpl **)v10;
        *(_QWORD *)v10 = 0;
        *(_QWORD *)v8 = v11;
        v12 = *((_QWORD *)v10 + 1);
        *((_QWORD *)v10 + 1) = 0;
        *(_QWORD *)(v8 + 8) = v12;
        *(_WORD *)(v8 + 16) = *((_WORD *)v10 + 8);
        v13 = (WTF::StringImpl *)*((_QWORD *)v10 + 1);
        *((_QWORD *)v10 + 1) = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v7);
          else
            *(_DWORD *)v13 -= 2;
        }
        v14 = *(WTF::StringImpl **)v10;
        *(_QWORD *)v10 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v7);
          else
            *(_DWORD *)v14 -= 2;
        }
        v10 = (WTF *)((char *)v10 + 24);
        v8 += 24;
      }
      while (v10 != v9);
    }
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18CDMMediaCapabilityENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>>::convert@<X0>(JSC::JSGlobalObject *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  JSC::VM *v4;
  uint64_t result;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  WTF **v13;

  v11 = 0;
  v12 = 0;
  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v13 = &v11;
  result = JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(a1, a2, (uint64_t *)&v13);
  if (*((_DWORD *)v4 + 20) && (result = JSC::VM::hasExceptionsAfterHandlingTraps(v4), (result & 1) != 0))
  {
    v7 = HIDWORD(v12);
    result = (uint64_t)v11;
    *(_DWORD *)(a3 + 16) = 1;
    if ((_DWORD)v7)
    {
      v8 = 8 * v7;
      do
      {
        v9 = *(WTF::StringImpl **)result;
        *(_QWORD *)result = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
          {
            v10 = result;
            WTF::StringImpl::destroy(v9, v6);
            result = v10;
          }
          else
          {
            *(_DWORD *)v9 -= 2;
          }
        }
        result += 8;
        v8 -= 8;
      }
      while (v8);
      result = (uint64_t)v11;
    }
    if (result)
    {
      v11 = 0;
      LODWORD(v12) = 0;
      return WTF::fastFree((WTF *)result, v6);
    }
  }
  else
  {
    *(_QWORD *)a3 = v11;
    *(_QWORD *)(a3 + 8) = v12;
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;
  JSValue v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t IndexQuickly;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  JSC::JSRopeString *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  unsigned int v23;

  v6 = *((_QWORD *)a1 + 7);
  result = JSC::getIterationMode();
  if ((_DWORD)result == 2)
  {
    v9 = 0;
    while (1)
    {
      v10 = (*(_BYTE *)(a2 + 4) & 0xE) != 0 ? *(unsigned int *)(*(_QWORD *)(a2 + 8) - 8) : 0;
      if (v9 >= v10)
        break;
      IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)a2, v9, 0);
      if (!IndexQuickly)
        IndexQuickly = JSC::JSObject::get((JSC::JSObject *)a2, a1, v9);
      if (*(_DWORD *)(v6 + 80))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
        if ((result & 1) != 0)
          break;
      }
      v12 = *a3;
      result = (uint64_t)WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, IndexQuickly, (uint64_t)&v22);
      v13 = v23;
      if (!v23)
      {
        v14 = v22;
        v21 = v22;
        v22 = 0;
        v15 = *(unsigned int *)(v12 + 12);
        if ((_DWORD)v15 == *(_DWORD *)(v12 + 8))
        {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>(v12, (unint64_t)&v21);
          result = (uint64_t)v21;
          v21 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v18);
            else
              *(_DWORD *)result -= 2;
          }
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)v12 + 8 * v15) = v14;
          *(_DWORD *)(v12 + 12) = v15 + 1;
        }
        v13 = v23;
      }
      if (v13 != 0xFFFFFFFFLL)
        result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32B5840[v13])(&v21, &v22);
      ++v9;
      if (*(_QWORD *)(v6 + 16))
      {
        v16 = JSC::JSArrayIterator::create();
        v17 = v9 | 0xFFFE000000000000;
        if ((v9 & 0x80000000) != 0)
          v17 = COERCE__INT64((double)v9) + 0x2000000000000;
        *(_QWORD *)(v16 + 16) = v17;
        return JSC::iteratorClose();
      }
    }
  }
  else
  {
    JSC::iteratorForIterable(a1, (JSC::JSGlobalObject *)a2, v8);
    if (!*(_DWORD *)(v6 + 80) || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6), (result & 1) == 0))
    {
      while (1)
      {
        result = JSC::iteratorStep();
        if (*(_QWORD *)(v6 + 16) || result == 6)
          break;
        v20 = (JSC::JSRopeString *)JSC::iteratorValue();
        if (*(_DWORD *)(v6 + 80))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
          if ((result & 1) != 0)
            break;
        }
        WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}::operator()(a3, v6, a1, v20);
        if (*(_QWORD *)(v6 + 16))
          return JSC::iteratorClose();
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}::operator()(uint64_t *a1, int a2, JSC::JSGlobalObject *a3, JSC::JSRopeString *this)
{
  uint64_t v4;
  WTF::StringImpl *result;
  int v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;

  v4 = *a1;
  result = WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a3, (unint64_t)this, (uint64_t)&v11);
  v6 = v12;
  if (!v12)
  {
    v7 = v11;
    v10 = v11;
    v11 = 0;
    v8 = *(unsigned int *)(v4 + 12);
    if ((_DWORD)v8 == *(_DWORD *)(v4 + 8))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>(v4, (unint64_t)&v10);
      result = v10;
      v10 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)v4 + 8 * v8) = v7;
      *(_DWORD *)(v4 + 12) = v8 + 1;
    }
    v6 = v12;
  }
  if (v6 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32B5840[v6])(&v10, &v11);
  return result;
}

uint64_t WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::CDMMediaCapability>>>::convert<WebCore::CDMMediaCapability,0ul>(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v6;
  _BYTE *v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  int v30;
  unsigned __int8 *v31;
  unsigned int v32;
  unsigned __int8 *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  JSValue v37;
  void *v38;
  JSC::VM *v39;
  uint64_t v40;
  uint64_t *v41;
  _QWORD *v43;
  JSC::VM *v44;
  BOOL v45;
  uint64_t v46;
  WTF *v47;
  _OWORD v48[4];
  uint64_t v49;
  JSC::VM *v50;
  WTF *v51;
  unint64_t v52;
  int v53;
  int v54;
  uint64_t v55;

  v44 = *(JSC::VM **)(a1 + 56);
  v49 = 0;
  v50 = v44;
  v45 = 0;
  v46 = 0x800000000;
  v47 = (WTF *)((char *)v48 + 8);
  memset(v48, 0, sizeof(v48));
  v6 = a3[3];
  if (v6 >= 9)
  {
    v45 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v46) == 1;
    v6 = a3[3];
    if (v6)
      goto LABEL_3;
  }
  else if (v6)
  {
LABEL_3:
    v7 = (_BYTE *)(*(_QWORD *)a3 + 17);
    for (i = 24 * v6; i; i -= 24)
    {
      v9 = a2;
      v10 = *(_QWORD *)(a1 + 56);
      v11 = JSC::StructureCache::emptyObjectStructureForPrototype();
      v12 = 8 * *(unsigned __int8 *)(v11 + 14);
      v13 = JSC::allocateCell<JSC::JSFinalObject>(v10, v12 + 16);
      v14 = *(_DWORD *)(v11 + 8);
      *(_DWORD *)v13 = v11 >> 4;
      *(_DWORD *)(v13 + 4) = v14;
      *(_QWORD *)(v13 + 8) = 0;
      bzero((void *)(v13 + 16), v12);
      if (*(_BYTE *)(v10 + 755))
        __dmb(0xAu);
      v15 = *(_QWORD *)(a1 + 56);
      v16 = *(_QWORD *)(v7 - 17);
      if (!v16 || (v17 = *(_DWORD *)(v16 + 4)) == 0)
      {
        v18 = *(_QWORD *)(v15 + 41968);
        goto LABEL_12;
      }
      if (v17 == 1)
      {
        v31 = *(unsigned __int8 **)(v16 + 8);
        if ((*(_BYTE *)(v16 + 16) & 4) != 0)
        {
          v32 = *v31;
LABEL_46:
          v18 = *(_QWORD *)(v15 + 8 * v32 + 42216);
          goto LABEL_12;
        }
        v35 = *(unsigned __int16 *)v31;
        if (v35 <= 0xFF)
        {
          v32 = v35;
          goto LABEL_46;
        }
      }
      v18 = *(_QWORD *)(v15 + 64760);
      if (!v18 || v16 != *(_QWORD *)(v18 + 8))
        v18 = JSC::jsStringWithCacheSlowCase();
LABEL_12:
      if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
        goto LABEL_64;
      WTF::AtomStringImpl::addLiteral();
      v19 = v51;
      v51 = 0;
      v52 = v13;
      v53 = -1;
      v54 = 0x1000000;
      v55 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v13, (JSC::VM *)v10, (unint64_t)v19, v18, 0, (uint64_t)&v51);
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v20);
        else
          *(_DWORD *)v19 -= 2;
      }
      v21 = *v7
          ? WebCore::convertEnumerationToJS<WebCore::CDMEncryptionScheme>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)*(v7 - 1)): 2;
      if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
        goto LABEL_64;
      WTF::AtomStringImpl::addLiteral();
      v22 = v51;
      v51 = 0;
      v52 = v13;
      v53 = -1;
      v54 = 0x1000000;
      v55 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v13, (JSC::VM *)v10, (unint64_t)v22, v21, 0, (uint64_t)&v51);
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v23);
        else
          *(_DWORD *)v22 -= 2;
      }
      v24 = *(_QWORD *)(a1 + 56);
      v25 = *(_QWORD *)(v7 - 9);
      if (v25 && (v26 = *(_DWORD *)(v25 + 4)) != 0)
      {
        if (v26 == 1)
        {
          v33 = *(unsigned __int8 **)(v25 + 8);
          if ((*(_BYTE *)(v25 + 16) & 4) != 0)
          {
            v34 = *v33;
LABEL_49:
            v27 = *(_QWORD *)(v24 + 8 * v34 + 42216);
            goto LABEL_29;
          }
          v36 = *(unsigned __int16 *)v33;
          if (v36 <= 0xFF)
          {
            v34 = v36;
            goto LABEL_49;
          }
        }
        v27 = *(_QWORD *)(v24 + 64760);
        if (!v27 || v25 != *(_QWORD *)(v27 + 8))
          v27 = JSC::jsStringWithCacheSlowCase();
      }
      else
      {
        v27 = *(_QWORD *)(v24 + 41968);
      }
LABEL_29:
      if (!*(_DWORD *)(v10 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) == 0)
      {
        WTF::AtomStringImpl::addLiteral();
        v28 = v51;
        v51 = 0;
        v52 = v13;
        v53 = -1;
        v54 = 0x1000000;
        v55 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v13, (JSC::VM *)v10, (unint64_t)v28, v27, 0, (uint64_t)&v51);
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v29);
          else
            *(_DWORD *)v28 -= 2;
        }
        goto LABEL_33;
      }
LABEL_64:
      v13 = 0;
LABEL_33:
      if (*((_DWORD *)v44 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v44) & 1) != 0)
        goto LABEL_77;
      v30 = v46;
      if ((_DWORD)v46 == HIDWORD(v46) || v47 != (WTF *)((char *)v48 + 8) && v47)
      {
        v37.super.isa = (Class)v13;
        if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v46, v37) == 1)
          v45 = 1;
      }
      else
      {
        *((_QWORD *)v47 + v46) = v13;
        LODWORD(v46) = v30 + 1;
      }
      v7 += 24;
      a2 = v9;
    }
  }
  if (v45)
  {
    JSC::throwOutOfMemoryError();
  }
  else
  {
    v51 = v47;
    LODWORD(v52) = v46;
    v39 = *(JSC::VM **)(a2 + 56);
    if (!*((_DWORD *)v39 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v39) & 1) == 0)
    {
      v40 = JSC::constructArray();
      goto LABEL_69;
    }
  }
LABEL_77:
  v40 = 0;
LABEL_69:
  v41 = *(uint64_t **)&v48[0];
  if (*(_QWORD *)&v48[0])
  {
    v51 = (WTF *)&v46;
    v43 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v48[0], (uint64_t *)&v51);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v41, v43);
  }
  if (v47 != (WTF *)((char *)v48 + 8) && v47)
    WTF::fastFree(v47, v38);
  return v40;
}

uint64_t WebCore::JSMediaKeys::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSMediaList>(WebCore::JSMediaList *a1, JSC::JSCell **a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSMediaList::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSMediaList::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSMediaList::s_info);
  }
  return result;
}

unint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaList>::create(uint64_t a1, uint64_t a2, JSC::JSCell **a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaList>::initializeProperties(v5, a1, a3);
  return v5;
}

uint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSMediaList>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

uint64_t WebCore::JSMediaMetadata::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::MediaImage>>::convert(JSC::JSGlobalObject *a1, JSC::JSCell *this, uint64_t a3)
{
  unint64_t v5;
  JSC::Structure *v6;
  uint64_t Object;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  JSC::VM *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t result;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  JSC::VM *v24;
  WTF::StringImpl *v25;
  int v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  char *v32;
  unsigned int v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  WTF::StringImpl **v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  WTF::StringImpl *v54;
  int v55;
  JSC::VM *v56;
  WTF::StringImpl *v57;

  v56 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v5 = (unint64_t)this & 0xFFFFFFFFFFFFFFF7;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    goto LABEL_10;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = JSC::throwTypeError();
LABEL_89:
    v51 = 1;
    goto LABEL_59;
  }
  v6 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v9 = JSC::JSObject::get(v6, a1, (unint64_t)v48);
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy(v48, v8);
    else
      *(_DWORD *)v48 -= 2;
  }
  if (*((_DWORD *)v56 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v56);
    if ((_DWORD)result)
      goto LABEL_89;
  }
  if (v9 == 10)
  {
LABEL_10:
    v10 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v10 += 2;
    LODWORD(v46) = 0;
    v45 = 0;
    if (v5 == 2)
      goto LABEL_28;
LABEL_23:
    WTF::AtomStringImpl::addLiteral();
    v13 = v48;
    v15 = JSC::JSObject::get(v6, a1, (unint64_t)v48);
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v14);
      else
        *(_DWORD *)v13 -= 2;
    }
    if (*((_DWORD *)v56 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v56);
      if ((_DWORD)result)
        goto LABEL_29;
    }
    if (v15 == 10)
    {
LABEL_28:
      result = (uint64_t)WebCore::throwRequiredMemberTypeError((int)a1, (int)&v56, "src", 4, "MediaImage", 11, "USVString", 10);
LABEL_29:
      v18 = 0;
      v51 = 1;
      goto LABEL_51;
    }
    result = WebCore::valueToUSVString(a1, v15, (uint64_t)&v54);
    v19 = v55;
    if (v55)
    {
      v18 = 0;
      v51 = 1;
LABEL_49:
      if (v19 != -1)
        result = ((uint64_t (*)(uint64_t *, WTF::StringImpl **))off_1E32B54C8[v19])(&v52, &v54);
      goto LABEL_51;
    }
    v18 = v54;
    v54 = 0;
    WTF::AtomStringImpl::addLiteral();
    v20 = v48;
    v22 = JSC::JSObject::get(v6, a1, (unint64_t)v48);
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v21);
      else
        *(_DWORD *)v20 -= 2;
    }
    if (*((_DWORD *)v56 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v56);
      if ((_DWORD)result)
      {
        v51 = 1;
        goto LABEL_48;
      }
    }
    if (v22 == 10)
    {
      v23 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *(_DWORD *)v23 += 2;
      goto LABEL_46;
    }
    v48 = (WTF::StringImpl *)v22;
    v24 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if ((v22 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v22 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v48, a1);
LABEL_44:
      if (*((_DWORD *)v24 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v24);
        v23 = v57;
        if (hasExceptionsAfterHandlingTraps)
        {
          v53 = 1;
          v57 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v43);
            else
              *(_DWORD *)v23 -= 2;
          }
          v26 = 1;
          goto LABEL_47;
        }
      }
      else
      {
        v23 = v57;
      }
LABEL_46:
      v53 = 0;
      v26 = 0;
      v52 = 0;
      v48 = v18;
      v49 = v10;
      v50 = v23;
      v10 = 0;
      v18 = 0;
LABEL_47:
      v51 = v26;
      result = ((uint64_t (*)(WTF::StringImpl **, uint64_t *))off_1E32B54C8[v26])(&v57, &v52);
LABEL_48:
      v19 = v55;
      goto LABEL_49;
    }
    v25 = *(WTF::StringImpl **)(v22 + 8);
    if ((v25 & 1) != 0)
    {
      v25 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v22, a1);
      if (!v25)
        goto LABEL_43;
    }
    else if (!v25)
    {
LABEL_43:
      v57 = v25;
      goto LABEL_44;
    }
    *(_DWORD *)v25 += 2;
    goto LABEL_43;
  }
  v48 = (WTF::StringImpl *)v9;
  v11 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((v9 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v9 + 5) == 2)
  {
    v12 = *(WTF::StringImpl **)(v9 + 8);
    if ((v12 & 1) != 0)
    {
      v12 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v9, a1);
      if (!v12)
        goto LABEL_19;
    }
    else if (!v12)
    {
LABEL_19:
      v54 = v12;
      goto LABEL_20;
    }
    *(_DWORD *)v12 += 2;
    goto LABEL_19;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v48, a1);
LABEL_20:
  if (!*((_DWORD *)v11 + 20))
  {
    v10 = v54;
LABEL_22:
    LODWORD(v46) = 0;
    v45 = 0;
    goto LABEL_23;
  }
  result = JSC::VM::hasExceptionsAfterHandlingTraps(v11);
  v10 = v54;
  if (!(_DWORD)result)
    goto LABEL_22;
  LODWORD(v46) = 1;
  v54 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      result = WTF::StringImpl::destroy(v10, v17);
    else
      *(_DWORD *)v10 -= 2;
  }
  v10 = 0;
  v18 = 0;
  v51 = 1;
LABEL_51:
  if ((_DWORD)v46 != -1)
    result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32B54C8[v46])(&v54, &v45);
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      result = WTF::StringImpl::destroy(v10, v17);
      if (!v18)
        goto LABEL_59;
      goto LABEL_57;
    }
    *(_DWORD *)v10 -= 2;
  }
  if (!v18)
    goto LABEL_59;
LABEL_57:
  if (*(_DWORD *)v18 == 2)
    result = WTF::StringImpl::destroy(v18, v17);
  else
    *(_DWORD *)v18 -= 2;
LABEL_59:
  v27 = v51;
  if (!v51)
  {
    v28 = v48;
    v29 = v49;
    v48 = 0;
    v49 = 0;
    v45 = v28;
    v46 = v29;
    v30 = v50;
    v50 = 0;
    v47 = v30;
    v31 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v31 == *(_DWORD *)(a3 + 8))
    {
      v32 = WTF::Vector<WebCore::RsaOtherPrimesInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v31 + 1, (unint64_t)&v45);
      v33 = *(_DWORD *)(a3 + 12);
      v34 = (_QWORD *)(*(_QWORD *)a3 + 24 * v33);
      v35 = *(_QWORD *)v32;
      *(_QWORD *)v32 = 0;
      *v34 = v35;
      v36 = *((_QWORD *)v32 + 1);
      *((_QWORD *)v32 + 1) = 0;
      v34[1] = v36;
      v37 = *((_QWORD *)v32 + 2);
      *((_QWORD *)v32 + 2) = 0;
      v34[2] = v37;
      v38 = v47;
      *(_DWORD *)(a3 + 12) = v33 + 1;
      v47 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v17);
        else
          *(_DWORD *)v38 -= 2;
      }
    }
    else
    {
      v39 = *(_QWORD *)a3;
      v45 = 0;
      v40 = (WTF::StringImpl **)(v39 + 24 * v31);
      *v40 = v28;
      v46 = 0;
      v40[1] = v29;
      v40[2] = v30;
      *(_DWORD *)(a3 + 12) = v31 + 1;
      v47 = 0;
    }
    v41 = v46;
    v46 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
        WTF::StringImpl::destroy(v41, v17);
      else
        *(_DWORD *)v41 -= 2;
    }
    v42 = v45;
    v45 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, v17);
      else
        *(_DWORD *)v42 -= 2;
    }
    return ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32B71F0[v27])(&v45, &v48);
  }
  if (v51 != -1)
    return ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32B71F0[v27])(&v45, &v48);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore10MediaImageENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::JSMediaQueryList::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  WTF *v5;
  void *v6;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 3000);
  *(_QWORD *)(a1 + 3000) = v3;
  if (result)
  {
    v5 = (WTF *)MEMORY[0x19AEA3528]();
    return WTF::fastFree(v5, v6);
  }
  return result;
}

uint64_t WebCore::JSMediaQueryList::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSMediaQueryList *v6;
  unint64_t v7;
  uint64_t result;

  v6 = (WebCore::JSMediaQueryList *)*((_QWORD *)a2 + 7);
  v7 = JSC::allocateCell<WebCore::JSMediaQueryList>(v6, a2);
  result = WebCore::JSMediaQueryList::JSMediaQueryList(v7, a1, (uint64_t)a2, a3);
  if (*((_BYTE *)v6 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSMediaRecorder::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSMediaSession::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSMediaSource::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSMediaSourceHandle::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSMediaStreamAudioDestinationNode::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSMediaStreamAudioDestinationNode::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSMediaStreamAudioDestinationNode *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSMediaStreamAudioDestinationNode *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSMediaStreamAudioDestinationNode::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSMediaStreamAudioSourceNode::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSMediaStreamAudioSourceNode::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSMediaStreamAudioSourceNode *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSMediaStreamAudioSourceNode *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSMediaStreamAudioSourceNode::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSMediaStreamTrack::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSMediaStreamTrackProcessor::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void *WebCore::GPUCanvasContext::create@<X0>(WebCore::GPUCanvasContext *this@<X0>, WebCore::CanvasBase *a2@<X1>, WebCore::GPUCanvasContextCocoa **a3@<X8>)
{
  WebCore::GPUCanvasContextCocoa *v7;
  void *result;

  v7 = (WebCore::GPUCanvasContextCocoa *)bmalloc::api::isoAllocate();
  result = WebCore::GPUCanvasContextCocoa::GPUCanvasContextCocoa(v7, this, a2);
  if (v7)
    result = WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v7 + 5);
  *a3 = v7;
  return result;
}

void sub_194D43500(_Unwind_Exception *a1, void *a2)
{
  bmalloc::api *v2;

  bmalloc::api::isoDeallocate(v2, a2);
  _Unwind_Resume(a1);
}

WebCore::GPUCanvasContextCocoa *WebCore::GPUCanvasContextCocoa::GPUCanvasContextCocoa(WebCore::GPUCanvasContextCocoa *this, WebCore::CanvasBase *a2, WebCore::GPU *a3)
{
  WebCore::GPUCanvasContext *v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  _DWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  _DWORD *v26;
  int v27;
  _BYTE v28[2];
  _BYTE *v29;

  v5 = WebCore::GPUCanvasContext::GPUCanvasContext(this, a2);
  *(_QWORD *)v5 = off_1E32B80E0;
  *((_QWORD *)v5 + 5) = &unk_1E32B8208;
  *((_BYTE *)v5 + 64) = 0;
  *((_BYTE *)v5 + 128) = 0;
  v6 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v6 = off_1E32B8260;
  *(_QWORD *)(v6 + 8) = 1;
  *(_DWORD *)(v6 + 16) = 1065353216;
  *(_BYTE *)(v6 + 20) = 1;
  *((_QWORD *)this + 17) = v6;
  (*(void (**)(_DWORD **__return_ptr))(**((_QWORD **)a3 + 5) + 48))(&v26);
  v7 = v26;
  if (!v26)
  {
    *((_QWORD *)this + 18) = 0;
    v10 = (uint64_t *)((char *)this + 152);
    goto LABEL_11;
  }
  v26 = 0;
  v8 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v8 = 1;
  *(_QWORD *)(v8 + 8) = v7;
  *((_QWORD *)this + 18) = v8;
  v9 = v26;
  v26 = 0;
  if (!v9)
    goto LABEL_5;
  if (v9[2] != 1)
  {
    --v9[2];
LABEL_5:
    v10 = (uint64_t *)((char *)this + 152);
    goto LABEL_6;
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
  v8 = *((_QWORD *)this + 18);
  v10 = (uint64_t *)((char *)this + 152);
  if (!v8)
    goto LABEL_11;
LABEL_6:
  v11 = *((_QWORD *)a3 + 5);
  v29 = *(_BYTE **)(v8 + 8);
  (*(void (**)(_DWORD **__return_ptr, uint64_t, _BYTE **))(*(_QWORD *)v11 + 40))(&v26, v11, &v29);
  v12 = v26;
  if (!v26)
  {
LABEL_11:
    *v10 = 0;
    goto LABEL_12;
  }
  v26 = 0;
  v13 = WTF::fastMalloc((WTF *)0x60);
  *(_DWORD *)v13 = 1;
  *(_QWORD *)(v13 + 8) = v12;
  *(_OWORD *)(v13 + 16) = 0u;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 44) = 0u;
  *(_QWORD *)(v13 + 64) = 0x100000001;
  *(_WORD *)(v13 + 72) = 1;
  *(_QWORD *)(v13 + 84) = 0;
  *(_QWORD *)(v13 + 76) = 0;
  *(_DWORD *)(v13 + 92) = 0;
  *v10 = v13;
  v14 = v26;
  v26 = 0;
  if (v14)
  {
    if (v14[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
    else
      --v14[2];
  }
LABEL_12:
  *((_QWORD *)this + 20) = 0;
  v15 = *((_QWORD *)this + 4);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15))
  {
    v16 = 0;
    v17 = (_DWORD *)(v15 - 112);
    *(_DWORD *)(v15 - 88) += 2;
  }
  else
  {
    v18 = *((_QWORD *)this + 4);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18) & 1) == 0)
      goto LABEL_28;
    v17 = (_DWORD *)(v18 - 32);
    ++*(_DWORD *)(v18 - 8);
    v16 = 1;
  }
  v26 = v17;
  v27 = v16;
  v29 = v28;
  v19 = ((uint64_t (*)(_BYTE **, _DWORD **))off_1E32B8288[v16])(&v29, &v26);
  if (v27 != -1)
    ((void (*)(_BYTE **, _DWORD **))off_1E32B8298[v27])(&v29, &v26);
  *((_DWORD *)this + 42) = v19;
  v20 = *((_QWORD *)this + 4);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v20 + 32))(v20))
  {
    v21 = 0;
    v22 = (_DWORD *)(v20 - 112);
    *(_DWORD *)(v20 - 88) += 2;
    goto LABEL_22;
  }
  v23 = *((_QWORD *)this + 4);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 40))(v23) & 1) == 0)
  {
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x194D43848);
  }
  v22 = (_DWORD *)(v23 - 32);
  ++*(_DWORD *)(v23 - 8);
  v21 = 1;
LABEL_22:
  v26 = v22;
  v27 = v21;
  v29 = v28;
  v24 = ((uint64_t (*)(_BYTE **, _DWORD **))off_1E32B82A8[v21])(&v29, &v26);
  if (v27 != -1)
    ((void (*)(_BYTE **, _DWORD **))off_1E32B8298[v27])(&v29, &v26);
  *((_DWORD *)this + 43) = v24;
  *((_BYTE *)this + 176) = 0;
  return this;
}

void sub_194D4386C(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  WebCore::ActiveDOMObject *v3;
  WebCore::GPUPresentationContext **v4;
  _DWORD *v6;
  WebCore::GPUPresentationContext *v7;
  WTF *v8;
  _DWORD *v9;
  WTF *v10;
  void *v11;
  _DWORD *v12;
  uint64_t v13;
  WTF::MachSendRight *v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  WTF *v18;
  _DWORD *v19;

  v6 = *(_DWORD **)(v2 + 160);
  *(_QWORD *)(v2 + 160) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = *v4;
  *v4 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
    {
      WebCore::GPUPresentationContext::~GPUPresentationContext(v7, a2);
      WTF::fastFree(v10, v11);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
  v8 = *(WTF **)(v2 + 144);
  *(_QWORD *)(v2 + 144) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
    {
      v12 = (_DWORD *)*((_QWORD *)v8 + 1);
      *((_QWORD *)v8 + 1) = 0;
      if (v12)
      {
        if (v12[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
        else
          --v12[2];
      }
      WTF::fastFree(v8, a2);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
  v9 = *(_DWORD **)(v2 + 136);
  *(_QWORD *)(v2 + 136) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  if (*(_BYTE *)(v2 + 128))
  {
    v13 = *(unsigned int *)(v2 + 116);
    if ((_DWORD)v13)
    {
      v14 = *(WTF::MachSendRight **)(v2 + 104);
      v15 = 4 * v13;
      do
      {
        WTF::MachSendRight::~MachSendRight(v14);
        v14 = (WTF::MachSendRight *)(v16 + 4);
        v15 -= 4;
      }
      while (v15);
    }
    v17 = *(WTF **)(v2 + 104);
    if (v17)
    {
      *(_QWORD *)(v2 + 104) = 0;
      *(_DWORD *)(v2 + 112) = 0;
      WTF::fastFree(v17, a2);
    }
    v18 = *(WTF **)(v2 + 80);
    if (v18)
    {
      *(_QWORD *)(v2 + 80) = 0;
      *(_DWORD *)(v2 + 88) = 0;
      WTF::fastFree(v18, a2);
    }
    v19 = *(_DWORD **)(v2 + 64);
    *(_QWORD *)(v2 + 64) = 0;
    if (v19)
    {
      if (v19[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 16))(v19);
      else
        --v19[6];
    }
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(v3, a2);
  WebCore::CanvasRenderingContext::~CanvasRenderingContext((unsigned int **)v2);
  _Unwind_Resume(a1);
}

WTF *WebCore::GPUCanvasContextCocoa::reshape(WebCore::GPUCanvasContextCocoa *this, void *a2)
{
  void *v2;
  WTF *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  _DWORD *v12;
  unsigned int v13;
  WTF *result;
  unsigned int *v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  _BYTE v26[8];
  WTF::StringImpl *v27;
  char v28;
  WTF *v29;
  char v30;
  int v31;
  WTF *v32;
  unsigned int v33;
  unsigned int v34;
  char v35;
  char v36;

  v9 = *((_QWORD *)this + 20);
  if (v9)
  {
    *(_BYTE *)(v9 + 72) = 1;
    (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 24) + 24))(*(_QWORD *)(v9 + 24));
    v10 = (_DWORD *)*((_QWORD *)this + 20);
    *((_QWORD *)this + 20) = 0;
    if (v10)
    {
      if (v10[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
      else
        --v10[2];
    }
  }
  *((_QWORD *)this + 21) = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
  v11 = *((unsigned __int8 *)this + 128);
  if (*((_BYTE *)this + 128))
  {
    v12 = (_DWORD *)*((_QWORD *)this + 8);
    v4 = *((_QWORD *)this + 9);
    v2 = (void *)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = 0;
    v6 = *((_DWORD *)this + 23);
    *((_QWORD *)this + 11) = 0;
    v3 = (WTF *)*((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = 0;
    v5 = *((_DWORD *)this + 29);
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 8) = 0;
    v7 = *((unsigned __int16 *)this + 48);
    v13 = v7 >> 8;
    *((_BYTE *)this + 128) = 0;
  }
  else
  {
    v12 = 0;
    LOBYTE(v13) = 0;
  }
  result = (WTF *)WebCore::GPUCanvasContextCocoa::unconfigure(this, a2);
  if (v11)
  {
    if (v12)
    {
      v15 = (unsigned int *)WTF::WeakPtr<WebCore::GPUDevice,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::GPUDevice>((uint64_t)v12);
      if (v15)
      {
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 + 1, v15));
      }
    }
    else
    {
      v15 = 0;
    }
    v29 = (WTF *)v15;
    v30 = v4;
    v31 = HIDWORD(v4);
    v32 = 0;
    v33 = 0;
    v34 = v6;
    if (v6)
    {
      v33 = v6;
      v32 = (WTF *)WTF::fastMalloc((WTF *)v6);
      memcpy(v32, v2, v6);
    }
    v35 = v7;
    v36 = v13;
    WebCore::GPUCanvasContextCocoa::configure((uint64_t)v26, this, (uint64_t *)&v29, 1);
    if (v28)
    {
      v18 = v27;
      v27 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v17);
        else
          *(_DWORD *)v18 -= 2;
      }
    }
    result = v32;
    if (v32)
    {
      v32 = 0;
      v33 = 0;
      result = (WTF *)WTF::fastFree(result, v17);
    }
    v19 = v29;
    v29 = 0;
    if (!v19)
      goto LABEL_25;
    do
    {
      v20 = __ldaxr((unsigned int *)v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, (unsigned int *)v19));
    if (!v21)
    {
      atomic_store(1u, (unsigned int *)v19);
      v24 = *((unsigned int *)v19 + 7);
      if ((_DWORD)v24)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v19 + 2), (WTF::StringImpl *)(*((_QWORD *)v19 + 2) + 32 * v24));
      v25 = (WTF *)*((_QWORD *)v19 + 2);
      if (v25)
      {
        *((_QWORD *)v19 + 2) = 0;
        *((_DWORD *)v19 + 6) = 0;
        WTF::fastFree(v25, v17);
      }
      result = (WTF *)WTF::fastFree(v19, v17);
      if (!v5)
        goto LABEL_28;
    }
    else
    {
LABEL_25:
      if (!v5)
      {
LABEL_28:
        if (v3)
          result = (WTF *)WTF::fastFree(v3, v17);
        if (v2)
          result = (WTF *)WTF::fastFree((WTF *)v2, v17);
        if (v12)
        {
          if (v12[6] == 1)
            return (WTF *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v12 + 16))(v12);
          else
            --v12[6];
        }
        return result;
      }
    }
    v22 = 4 * v5;
    result = v3;
    do
    {
      WTF::MachSendRight::~MachSendRight(result);
      result = (WTF *)(v23 + 4);
      v22 -= 4;
    }
    while (v22);
    goto LABEL_28;
  }
  return result;
}

void sub_194D43C8C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, int a17)
{
  _DWORD *v17;
  WTF *v18;
  WTF *v19;
  unsigned int v20;
  unsigned int v22;
  unsigned int v23;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  WTF::MachSendRight *v28;
  uint64_t v29;

  if (a14)
  {
    do
    {
      v22 = __ldaxr((unsigned int *)a14);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, (unsigned int *)a14));
    if (!v23)
    {
      atomic_store(1u, (unsigned int *)a14);
      v25 = *(unsigned int *)(a14 + 28);
      if ((_DWORD)v25)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(a14 + 16), (WTF::StringImpl *)(*(_QWORD *)(a14 + 16) + 32 * v25));
      v26 = *(WTF **)(a14 + 16);
      if (v26)
      {
        *(_QWORD *)(a14 + 16) = 0;
        *(_DWORD *)(a14 + 24) = 0;
        WTF::fastFree(v26, a2);
      }
      WTF::fastFree((WTF *)a14, a2);
    }
  }
  if (v20)
  {
    v27 = 4 * v20;
    v28 = v19;
    do
    {
      WTF::MachSendRight::~MachSendRight(v28);
      v28 = (WTF::MachSendRight *)(v29 + 4);
      v27 -= 4;
    }
    while (v27);
  }
  if (v19)
  {
    WTF::fastFree(v19, a2);
    if (!v18)
    {
LABEL_14:
      if (!v17)
        goto LABEL_20;
      goto LABEL_18;
    }
  }
  else if (!v18)
  {
    goto LABEL_14;
  }
  WTF::fastFree(v18, a2);
  if (!v17)
    goto LABEL_20;
LABEL_18:
  if (v17[6] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 16))(v17);
  else
    --v17[6];
LABEL_20:
  _Unwind_Resume(exception_object);
}

_DWORD *WebCore::GPUCanvasContextCocoa::unconfigure(WebCore::GPUCanvasContextCocoa *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  WTF::MachSendRight *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  _DWORD *v11;
  _DWORD *result;

  v3 = *((_QWORD *)this + 19);
  if (v3)
  {
    v4 = *(_DWORD **)(v3 + 16);
    *(_QWORD *)(v3 + 16) = 0;
    if (v4)
    {
      if (v4[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
      else
        --v4[2];
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 8) + 24))(*(_QWORD *)(v3 + 8));
  }
  if (*((_BYTE *)this + 128))
  {
    v5 = *((unsigned int *)this + 29);
    if ((_DWORD)v5)
    {
      v6 = (WTF::MachSendRight *)*((_QWORD *)this + 13);
      v7 = 4 * v5;
      do
      {
        WTF::MachSendRight::~MachSendRight(v6);
        v6 = (WTF::MachSendRight *)(v8 + 4);
        v7 -= 4;
      }
      while (v7);
    }
    v9 = (WTF *)*((_QWORD *)this + 13);
    if (v9)
    {
      *((_QWORD *)this + 13) = 0;
      *((_DWORD *)this + 28) = 0;
      WTF::fastFree(v9, a2);
    }
    v10 = (WTF *)*((_QWORD *)this + 10);
    if (v10)
    {
      *((_QWORD *)this + 10) = 0;
      *((_DWORD *)this + 22) = 0;
      WTF::fastFree(v10, a2);
    }
    v11 = (_DWORD *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = 0;
    if (v11)
    {
      if (v11[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
      else
        --v11[6];
    }
    *((_BYTE *)this + 128) = 0;
  }
  result = (_DWORD *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::GPUCanvasContextCocoa::configure(uint64_t a1, WebCore::GPUCanvasContextCocoa *this, uint64_t *a3, int a4)
{
  char v4;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  const void *v21;
  WTF::MachSendRight *v22;
  unint64_t v23;
  CFTypeRef v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  CFTypeRef v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  void *v33;
  uint64_t v34;
  __int16 v35;
  WTF::MachSendRight *v36;
  int v37;
  int v38;
  _DWORD *v39;
  WTF *v40;
  uint64_t v41;
  WTF::MachSendRight *v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  uint64_t v46;
  uint64_t v47;
  WTF::MachSendRight *v48;
  uint64_t v49;
  char v50;
  CFTypeRef *p_cf;
  CFTypeRef cf;

  v4 = a4;
  if (*((_BYTE *)this + 128))
  {
    if (a4)
    {
      v8 = *a3;
      if (*a3)
      {
        v9 = *(_QWORD *)(v8 + 8);
        if (v9)
          v8 = v9 - 32;
        else
          v8 = 0;
      }
      if (*((_QWORD *)this + 8) == v8
        && *((unsigned __int8 *)this + 72) == *((unsigned __int8 *)a3 + 8)
        && *((_DWORD *)this + 19) == *((_DWORD *)a3 + 3))
      {
        v10 = *((unsigned int *)this + 23);
        if ((_DWORD)v10 == *((_DWORD *)a3 + 7))
        {
          result = memcmp(*((const void **)this + 10), (const void *)a3[2], v10);
          if (!(_DWORD)result && *((unsigned __int8 *)this + 96) == *((unsigned __int8 *)a3 + 32))
            goto LABEL_33;
        }
      }
    }
    WebCore::GPUCanvasContextCocoa::unconfigure(this, this);
  }
  if (!*a3
    || (v12 = *(_QWORD *)(*a3 + 8)) == 0
    || (result = WebCore::GPUDevice::isSupportedFormat(v12 - 32, *((unsigned __int8 *)a3 + 8)), (result & 1) == 0))
  {
LABEL_31:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v22 = v48;
    *(_BYTE *)a1 = 33;
    *(_QWORD *)(a1 + 8) = v22;
    *(_BYTE *)(a1 + 16) = 1;
    return result;
  }
  v13 = *((unsigned int *)a3 + 7);
  if ((_DWORD)v13)
  {
    v14 = (unsigned __int8 *)a3[2];
    do
    {
      if (*a3)
      {
        v15 = *(_QWORD *)(*a3 + 8);
        v16 = v15 ? v15 - 32 : 0;
      }
      else
      {
        v16 = 0;
      }
      result = WebCore::GPUDevice::isSupportedFormat(v16, *v14);
      if ((result & 1) == 0)
        goto LABEL_31;
      ++v14;
    }
    while (--v13);
  }
  v17 = *((_QWORD *)this + 18);
  if (!v17)
  {
LABEL_33:
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    return result;
  }
  v18 = *((unsigned int *)this + 42);
  v19 = *((unsigned int *)this + 43);
  if (*((_BYTE *)a3 + 32) == 1)
  {
    v23 = atomic_load(&WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::onceFlag);
    if (v23 != -1)
    {
      cf = &v50;
      p_cf = &cf;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::onceFlag, &p_cf, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    v21 = (const void *)WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::colorSpace;
  }
  else
  {
    v20 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
    if (v20 != -1)
    {
      cf = &v50;
      p_cf = &cf;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &p_cf, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    v21 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  }
  cf = v21;
  if (v21)
    CFRetain(v21);
  if (*((unsigned __int8 *)a3 + 8) >= 0x5Fu)
  {
    result = 348;
    __break(0xC471u);
  }
  else
  {
    (*(void (**)(WTF::MachSendRight **__return_ptr, _QWORD, uint64_t, uint64_t, CFTypeRef *, BOOL))(**(_QWORD **)(v17 + 8) + 16))(&v48, *(_QWORD *)(v17 + 8), v18, v19, &cf, *((_BYTE *)a3 + 33) != 1);
    v24 = cf;
    cf = 0;
    if (v24)
      CFRelease(v24);
    v25 = *((_QWORD *)this + 19);
    if (v25
      && (WebCore::GPUPresentationContext::configure(v25, a3, *((_DWORD *)this + 42), *((_DWORD *)this + 43), v4 ^ 1u) & 1) != 0)
    {
      if (*a3)
      {
        v27 = *(_QWORD *)(*a3 + 8);
        if (v27)
          v28 = v27 - 32;
        else
          v28 = 0;
      }
      else
      {
        v28 = 0;
      }
      ++*(_DWORD *)(v28 + 24);
      v30 = *((unsigned __int8 *)a3 + 8);
      v31 = *((unsigned int *)a3 + 3);
      v32 = *((_DWORD *)a3 + 7);
      if (v32)
      {
        v33 = (void *)WTF::fastMalloc((WTF *)*((unsigned int *)a3 + 7));
        memcpy(v33, (const void *)a3[2], *((unsigned int *)a3 + 7));
      }
      else
      {
        v33 = 0;
      }
      v34 = v30 | (v31 << 32);
      v35 = *((_WORD *)a3 + 16);
      v36 = v48;
      v38 = v49;
      v37 = HIDWORD(v49);
      v48 = 0;
      v49 = 0;
      if (*((_BYTE *)this + 128))
      {
        v39 = (_DWORD *)*((_QWORD *)this + 8);
        *((_QWORD *)this + 8) = v28;
        if (v39)
        {
          if (v39[6] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v39 + 16))(v39);
          else
            --v39[6];
        }
        *((_QWORD *)this + 9) = v34;
        v40 = (WTF *)*((_QWORD *)this + 10);
        if (v40)
        {
          *((_QWORD *)this + 10) = 0;
          *((_DWORD *)this + 22) = 0;
          WTF::fastFree(v40, v26);
        }
        *((_QWORD *)this + 10) = v33;
        *((_DWORD *)this + 22) = v32;
        *((_DWORD *)this + 23) = v32;
        *((_WORD *)this + 48) = v35;
        v41 = *((unsigned int *)this + 29);
        if ((_DWORD)v41)
        {
          v42 = (WTF::MachSendRight *)*((_QWORD *)this + 13);
          v43 = 4 * v41;
          do
          {
            WTF::MachSendRight::~MachSendRight(v42);
            v42 = (WTF::MachSendRight *)(v44 + 4);
            v43 -= 4;
          }
          while (v43);
        }
        v45 = (WTF *)*((_QWORD *)this + 13);
        if (v45)
        {
          *((_QWORD *)this + 13) = 0;
          *((_DWORD *)this + 28) = 0;
          WTF::fastFree(v45, v26);
        }
        *((_QWORD *)this + 13) = v36;
        *((_DWORD *)this + 28) = v38;
        *((_DWORD *)this + 29) = v37;
        *((_DWORD *)this + 30) = 0;
      }
      else
      {
        *((_QWORD *)this + 8) = v28;
        *((_QWORD *)this + 9) = v34;
        *((_QWORD *)this + 10) = v33;
        *((_DWORD *)this + 22) = v32;
        *((_DWORD *)this + 23) = v32;
        *((_WORD *)this + 48) = v35;
        *((_QWORD *)this + 13) = v36;
        *((_DWORD *)this + 28) = v38;
        *((_DWORD *)this + 29) = v37;
        *((_DWORD *)this + 30) = 0;
        *((_BYTE *)this + 128) = 1;
      }
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v29 = cf;
      *(_BYTE *)a1 = 8;
      *(_QWORD *)(a1 + 8) = v29;
      *(_BYTE *)(a1 + 16) = 1;
    }
    result = (uint64_t)v48;
    if (HIDWORD(v49))
    {
      v46 = 4 * HIDWORD(v49);
      do
      {
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)result);
        result = v47 + 4;
        v46 -= 4;
      }
      while (v46);
      result = (uint64_t)v48;
    }
    if (result)
    {
      v48 = 0;
      LODWORD(v49) = 0;
      return WTF::fastFree((WTF *)result, v26);
    }
  }
  return result;
}

void sub_194D44368(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::MachSendRight *a10, int a11, unsigned int a12)
{
  _DWORD *v12;
  WTF::MachSendRight *v14;
  uint64_t v15;
  uint64_t v16;

  if (v12[6] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 16))(v12);
  else
    --v12[6];
  if (a12)
  {
    v14 = a10;
    v15 = 4 * a12;
    do
    {
      WTF::MachSendRight::~MachSendRight(v14);
      v14 = (WTF::MachSendRight *)(v16 + 4);
      v15 -= 4;
    }
    while (v15);
  }
  if (a10)
    WTF::fastFree(a10, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::GPUCanvasContextCocoa::surfaceBufferToImageBuffer@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  void *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;

  v4 = a1[18];
  v5 = a1[2];
  if (v5)
    goto LABEL_26;
  v5 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  *(_QWORD *)(v5 + 8) = a1;
  v15 = (unsigned int *)a1[2];
  a1[2] = v5;
  if (!v15)
    goto LABEL_26;
  do
  {
    v16 = __ldaxr(v15);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v15));
  if (!v17)
  {
    atomic_store(1u, v15);
    WTF::fastFree((WTF *)v15, v14);
  }
  v5 = a1[2];
  if (v5)
  {
LABEL_26:
    do
      v6 = __ldaxr((unsigned int *)v5);
    while (__stlxr(v6 + 1, (unsigned int *)v5));
  }
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v7 = &off_1E32B82E8;
  v7[1] = a1;
  v7[2] = v5;
  v18 = v7;
  (*(void (**)(_QWORD, _QWORD **))(**(_QWORD **)(v4 + 8) + 24))(*(_QWORD *)(v4 + 8), &v18);
  result = (uint64_t)v18;
  v18 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v9 = a1[4];
  if (!*(_BYTE *)(v9 + 73))
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 160))(v9);
  v10 = *(_QWORD *)(v9 + 16);
  if (!v10)
    goto LABEL_17;
  v11 = *(_QWORD *)(v10 + 8);
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
LABEL_11:
    result = MEMORY[0x19AEA534C](v11);
    goto LABEL_12;
  }
  if (__stxr(1u, (unsigned __int8 *)v11))
    goto LABEL_11;
LABEL_12:
  ++*(_QWORD *)(v11 + 8);
  v13 = __ldxr((unsigned __int8 *)v11);
  if (v13 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v11))
      goto LABEL_17;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v11);
LABEL_17:
  *a2 = v10;
  return result;
}

void sub_194D44580(_Unwind_Exception *exception_object, void *a2)
{
  unsigned int *v2;
  unsigned int v4;
  unsigned int v5;

  if (v2)
  {
    do
    {
      v4 = __ldaxr(v2);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v2));
    if (!v5)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void WebCore::GPUCanvasContextCocoa::transferToImageBuffer(int32x2_t **this@<X0>, uint64_t *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  int32x2_t *v6;
  int32x2_t *v7;
  int32x2_t *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  WebCore::CanvasBase::allocateImageBuffer(this[4], &v19);
  v5 = v19;
  if (!v19)
  {
    *a2 = 0;
    return;
  }
  v19 = 0;
  if (!*((_BYTE *)this + 128))
  {
    *a2 = v5;
    return;
  }
  v6 = this[18];
  if (v6)
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)&v6[1] + 40))(*(_QWORD *)&v6[1], v5, *((unsigned int *)this + 30));
  v7 = this[20];
  this[20] = 0;
  if (v7)
  {
    if (v7[1].i32[0] == 1)
      (*(void (**)(int32x2_t *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[1].i32[0];
  }
  v8 = this[19];
  if (v8)
  {
    v9 = (_DWORD *)v8[2];
    v8[2] = 0;
    if (v9)
    {
      if (v9[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
      else
        --v9[2];
    }
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)&v8[1] + 32))(*(_QWORD *)&v8[1], 1);
  }
  v10 = v19;
  *a2 = v5;
  v19 = 0;
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (__ldaxr((unsigned __int8 *)v11))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v11))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v11);
LABEL_20:
    v13 = *(_QWORD *)(v11 + 8);
    v14 = v13 - 1;
    *(_QWORD *)(v11 + 8) = v13 - 1;
    if (v13 == 1)
    {
      v18 = *(_QWORD *)(v11 + 16);
      v15 = *(_QWORD *)(v11 + 24);
      *(_QWORD *)(v11 + 24) = 0;
      v16 = v18 != 0;
    }
    else
    {
      v15 = 0;
      v16 = 1;
    }
    v17 = __ldxr((unsigned __int8 *)v11);
    if (v17 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v11))
      {
        if (v14)
          return;
LABEL_28:
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        if (!v16)
          WTF::fastFree((WTF *)v11, v4);
        return;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
    if (v14)
      return;
    goto LABEL_28;
  }
}

uint64_t WebCore::GPUCanvasContextCocoa::canvas@<X0>(WebCore::GPUCanvasContextCocoa *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *((_QWORD *)this + 4);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  if ((_DWORD)result)
  {
    v6 = 0;
    v7 = v4 - 112;
    *(_DWORD *)(v4 - 88) += 2;
LABEL_5:
    *(_QWORD *)a2 = v7;
    *(_DWORD *)(a2 + 8) = v6;
    return result;
  }
  v8 = *((_QWORD *)this + 4);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
  if ((result & 1) != 0)
  {
    v7 = v8 - 32;
    ++*(_DWORD *)(v8 - 8);
    v6 = 1;
    goto LABEL_5;
  }
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::GPUCanvasContextCocoa::configure@<X0>(WebCore::GPUCanvasContextCocoa *this@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return WebCore::GPUCanvasContextCocoa::configure(a3, this, a2, 0);
}

uint64_t WebCore::GPUCanvasContextCocoa::getCurrentTexture@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int32x2_t *v7;
  int v8;
  _QWORD v9[2];
  char v10;

  if (!*(_BYTE *)(this + 128))
  {
    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = v9[0];
    *(_BYTE *)a2 = 8;
    *(_QWORD *)(a2 + 8) = v6;
    v5 = 1;
    goto LABEL_6;
  }
  v3 = this;
  v4 = *(_QWORD *)(this + 160);
  if (!v4)
  {
    *(_BYTE *)(this + 176) = 1;
    v7 = *(int32x2_t **)(this + 32);
    v9[0] = 0;
    v9[1] = vcvt_f32_s32(v7[1]);
    v10 = 1;
    (*(void (**)(int32x2_t *, _QWORD *, _QWORD))(*(_QWORD *)v7 + 104))(v7, v9, 0);
    this = *(_QWORD *)(v3 + 152);
    if (!this)
    {
      v5 = 0;
      *(_QWORD *)a2 = 0;
      goto LABEL_6;
    }
    WebCore::GPUPresentationContext::getCurrentTexture((_QWORD *)this, v9);
    v4 = v9[0];
    v9[0] = 0;
    this = *(_QWORD *)(v3 + 160);
    *(_QWORD *)(v3 + 160) = v4;
    if (!this)
      goto LABEL_12;
    v8 = *(_DWORD *)(this + 8) - 1;
    if (*(_DWORD *)(this + 8) == 1)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      this = v9[0];
      v9[0] = 0;
      if (!this)
        goto LABEL_11;
      v8 = *(_DWORD *)(this + 8) - 1;
      if (*(_DWORD *)(this + 8) == 1)
      {
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
        goto LABEL_11;
      }
    }
    *(_DWORD *)(this + 8) = v8;
LABEL_11:
    v4 = *(_QWORD *)(v3 + 160);
LABEL_12:
    if (v4)
      ++*(_DWORD *)(v4 + 8);
    v5 = 0;
    goto LABEL_4;
  }
  v5 = 0;
  ++*(_DWORD *)(v4 + 8);
LABEL_4:
  *(_QWORD *)a2 = v4;
LABEL_6:
  *(_DWORD *)(a2 + 16) = v5;
  return this;
}

uint64_t WebCore::GPUCanvasContextCocoa::pixelFormat(WebCore::GPUCanvasContextCocoa *this)
{
  return *((unsigned __int8 *)this + 128);
}

CFTypeRef WebCore::GPUCanvasContextCocoa::colorSpace@<X0>(WebCore::GPUCanvasContextCocoa *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v3;
  CFTypeRef result;
  unint64_t v5;
  char v6;
  char **v7;
  char *v8;

  if (*((_BYTE *)this + 128) && *((_BYTE *)this + 96))
  {
    v3 = atomic_load(&WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::onceFlag);
    if (v3 != -1)
    {
      v8 = &v6;
      v7 = &v8;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::onceFlag, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    result = (CFTypeRef)WebCore::knownColorSpace<&WebCore::displayP3ColorSpaceRef>(void)::colorSpace;
  }
  else
  {
    v5 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
    if (v5 != -1)
    {
      v8 = &v6;
      v7 = &v8;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    result = (CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  }
  *a2 = result;
  if (result)
    return CFRetain(result);
  return result;
}

uint64_t WebCore::GPUCanvasContextCocoa::layerContentsDisplayDelegate@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 136);
  ++*(_DWORD *)(v2 + 8);
  *a2 = v2;
  return this;
}

uint64_t WebCore::GPUCanvasContextCocoa::prepareForDisplay(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  _QWORD *v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;

  if (*(_BYTE *)(this + 128))
  {
    v1 = this;
    v2 = *(_QWORD *)(this + 144);
    if (v2)
    {
      v3 = *(_QWORD *)(this + 16);
      if (v3)
        goto LABEL_16;
      v3 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v3 = 1;
      *(_QWORD *)(v3 + 8) = v1;
      v7 = *(unsigned int **)(v1 + 16);
      *(_QWORD *)(v1 + 16) = v3;
      if (!v7)
        goto LABEL_16;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, v6);
      }
      v3 = *(_QWORD *)(v1 + 16);
      if (v3)
      {
LABEL_16:
        do
          v4 = __ldaxr((unsigned int *)v3);
        while (__stlxr(v4 + 1, (unsigned int *)v3));
      }
      v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v5 = &off_1E32B8310;
      v5[1] = v1;
      v5[2] = v3;
      v10 = (uint64_t)v5;
      (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v2 + 8) + 24))(*(_QWORD *)(v2 + 8), &v10);
      this = v10;
      v10 = 0;
      if (this)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    }
  }
  return this;
}

void sub_194D44B48(_Unwind_Exception *exception_object, void *a2)
{
  unsigned int *v2;
  unsigned int v4;
  unsigned int v5;

  if (v2)
  {
    do
    {
      v4 = __ldaxr(v2);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v2));
    if (!v5)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void WebCore::GPUCanvasContextCocoa::~GPUCanvasContextCocoa(WebCore::GPUCanvasContextCocoa *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::GPUCanvasContextCocoa::~GPUCanvasContextCocoa(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  _DWORD *v3;
  WebCore::GPUPresentationContext *v4;
  WTF *v5;
  _DWORD *v6;
  uint64_t v7;
  WTF::MachSendRight *v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  WTF *v12;
  _DWORD *v13;
  WTF *v14;
  void *v15;
  _DWORD *v16;

  v3 = (_DWORD *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (WebCore::GPUPresentationContext *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::GPUPresentationContext::~GPUPresentationContext(v4, a2);
      WTF::fastFree(v14, v15);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (WTF *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      v16 = (_DWORD *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      if (v16)
      {
        if (v16[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
        else
          --v16[2];
      }
      WTF::fastFree(v5, a2);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  v6 = (_DWORD *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  if (*((_BYTE *)this + 128))
  {
    v7 = *((unsigned int *)this + 29);
    if ((_DWORD)v7)
    {
      v8 = (WTF::MachSendRight *)*((_QWORD *)this + 13);
      v9 = 4 * v7;
      do
      {
        WTF::MachSendRight::~MachSendRight(v8);
        v8 = (WTF::MachSendRight *)(v10 + 4);
        v9 -= 4;
      }
      while (v9);
    }
    v11 = (WTF *)*((_QWORD *)this + 13);
    if (v11)
    {
      *((_QWORD *)this + 13) = 0;
      *((_DWORD *)this + 28) = 0;
      WTF::fastFree(v11, a2);
    }
    v12 = (WTF *)*((_QWORD *)this + 10);
    if (v12)
    {
      *((_QWORD *)this + 10) = 0;
      *((_DWORD *)this + 22) = 0;
      WTF::fastFree(v12, a2);
    }
    v13 = (_DWORD *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = 0;
    if (v13)
    {
      if (v13[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 16))(v13);
      else
        --v13[6];
    }
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::GPUCanvasContextCocoa *)((char *)this + 40), a2);
  WebCore::CanvasRenderingContext::~CanvasRenderingContext((unsigned int **)this);
}

uint64_t WebCore::CanvasRenderingContext::is2dBase(WebCore::CanvasRenderingContext *this)
{
  return 0;
}

uint64_t WebCore::CanvasRenderingContext::is2d(WebCore::CanvasRenderingContext *this)
{
  return 0;
}

uint64_t WebCore::CanvasRenderingContext::isWebGL1(WebCore::CanvasRenderingContext *this)
{
  return 0;
}

uint64_t WebCore::CanvasRenderingContext::isWebGL2(WebCore::CanvasRenderingContext *this)
{
  return 0;
}

uint64_t WebCore::GPUCanvasContextCocoa::isWebGPU(WebCore::GPUCanvasContextCocoa *this)
{
  return 1;
}

uint64_t WebCore::GPUBasedCanvasRenderingContext::isGPUBased(WebCore::GPUBasedCanvasRenderingContext *this)
{
  return 1;
}

uint64_t WebCore::CanvasRenderingContext::isBitmapRenderer(WebCore::CanvasRenderingContext *this)
{
  return 0;
}

uint64_t WebCore::CanvasRenderingContext::isPlaceholder(WebCore::CanvasRenderingContext *this)
{
  return 0;
}

uint64_t WebCore::CanvasRenderingContext::isOffscreen2d(WebCore::CanvasRenderingContext *this)
{
  return 0;
}

uint64_t WebCore::CanvasRenderingContext::isPaint(WebCore::CanvasRenderingContext *this)
{
  return 0;
}

uint64_t WebCore::GPUBasedCanvasRenderingContext::delegatesDisplay(WebCore::GPUBasedCanvasRenderingContext *this)
{
  return 1;
}

uint64_t WebCore::CanvasRenderingContext::hasDeferredOperations(WebCore::CanvasRenderingContext *this)
{
  return 0;
}

uint64_t WebCore::GPUCanvasContextCocoa::compositingResultsNeedUpdating(WebCore::GPUCanvasContextCocoa *this)
{
  return *((unsigned __int8 *)this + 176);
}

uint64_t WebCore::GPUCanvasContextCocoa::needsPreparationForDisplay(WebCore::GPUCanvasContextCocoa *this)
{
  return 1;
}

uint64_t WebCore::CanvasRenderingContext::adjustImageBufferOptionsForTesting(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t WebCore::GPUBasedCanvasRenderingContext::ref(WebCore::GPUBasedCanvasRenderingContext *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4));
}

uint64_t WebCore::GPUBasedCanvasRenderingContext::deref(WebCore::GPUBasedCanvasRenderingContext *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4));
}

void `non-virtual thunk to'WebCore::GPUCanvasContextCocoa::~GPUCanvasContextCocoa(WebCore::GPUCanvasContextCocoa *this, void *a2)
{
  WebCore::GPUCanvasContextCocoa::~GPUCanvasContextCocoa((WebCore::GPUCanvasContextCocoa *)((char *)this - 40), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::GPUCanvasContextCocoa::~GPUCanvasContextCocoa((WebCore::GPUCanvasContextCocoa *)((char *)this - 40), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t `non-virtual thunk to'WebCore::GPUBasedCanvasRenderingContext::ref(WebCore::GPUBasedCanvasRenderingContext *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this - 1) + 16))(*((_QWORD *)this - 1));
}

uint64_t `non-virtual thunk to'WebCore::GPUBasedCanvasRenderingContext::deref(WebCore::GPUBasedCanvasRenderingContext *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this - 1) + 24))(*((_QWORD *)this - 1));
}

void WebCore::GPUDisplayBufferDisplayDelegate::~GPUDisplayBufferDisplayDelegate(WebCore::GPUDisplayBufferDisplayDelegate *this)
{
  WTF::MachSendRight::~MachSendRight((WebCore::GPUDisplayBufferDisplayDelegate *)((char *)this + 12));
}

{
  void *v2;

  WTF::MachSendRight::~MachSendRight((WebCore::GPUDisplayBufferDisplayDelegate *)((char *)this + 12));
  WTF::fastFree(this, v2);
}

uint64_t WebCore::GPUDisplayBufferDisplayDelegate::prepareToDelegateDisplay(WebCore::GPUDisplayBufferDisplayDelegate *this, WebCore::PlatformCALayer *a2)
{
  (*(void (**)(WebCore::PlatformCALayer *, _QWORD))(*(_QWORD *)a2 + 240))(a2, *((unsigned __int8 *)this + 20));
  return (*(uint64_t (**)(WebCore::PlatformCALayer *, float))(*(_QWORD *)a2 + 672))(a2, *((float *)this + 4));
}

void WebCore::GPUDisplayBufferDisplayDelegate::display(WebCore::GPUDisplayBufferDisplayDelegate *this, WebCore::PlatformCALayer *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  char v9;
  char v10;

  if (*((_DWORD *)this + 3))
  {
    WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)&v7, (WebCore::GPUDisplayBufferDisplayDelegate *)((char *)this + 12));
    v8 = 0;
    v9 = 0;
    v10 = 0;
    (*(void (**)(WebCore::PlatformCALayer *, uint64_t *))(*(_QWORD *)a2 + 512))(a2, &v7);
    v3 = v8;
    v8 = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v3 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
      }
    }
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v7);
  }
  else
  {
    (*(void (**)(WebCore::PlatformCALayer *))(*(_QWORD *)a2 + 504))(a2);
  }
}

void sub_194D44DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  v11 = a10;
  a10 = 0;
  if (v11)
  {
    v12 = v11 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v11 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
    }
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a9);
  _Unwind_Resume(a1);
}

uint64_t WebCore::GPUDisplayBufferDisplayDelegate::orientation(WebCore::GPUDisplayBufferDisplayDelegate *this)
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::getCanvasWidth(std::variant<WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>> const&)::$_0,WebCore::getCanvasWidth(std::variant<WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(*(_QWORD *)a2 + 120);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::getCanvasWidth(std::variant<WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>> const&)::$_0,WebCore::getCanvasWidth(std::variant<WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(*(_QWORD *)a2 + 40);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::getCanvasHeight(std::variant<WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>> const&)::$_0,WebCore::getCanvasHeight(std::variant<WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(*(_QWORD *)a2 + 124);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::getCanvasHeight(std::variant<WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>> const&)::$_0,WebCore::getCanvasHeight(std::variant<WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(*(_QWORD *)a2 + 44);
}

void WebCore::GPUPresentationContext::~GPUPresentationContext(WebCore::GPUPresentationContext *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  char v9;

  v3 = (WTF *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((unsigned int *)this + 14);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E32B82C8[v4])(&v9, (char *)this + 40);
  *((_DWORD *)this + 14) = -1;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
  {
    if (v6[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[6];
  }
  v7 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  v8 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::GPUCanvasContextCocoa::surfaceBufferToImageBuffer(WebCore::CanvasRenderingContext::SurfaceBuffer)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E32B82E8;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::GPUCanvasContextCocoa::surfaceBufferToImageBuffer(WebCore::CanvasRenderingContext::SurfaceBuffer)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E32B82E8;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::GPUCanvasContextCocoa::surfaceBufferToImageBuffer(WebCore::CanvasRenderingContext::SurfaceBuffer)::$_0,void>::call(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = result[2];
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    v2 = result[1];
    v3 = *(_QWORD *)(v2 + 32);
    result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 120))(v3);
    if (!*(_BYTE *)(v3 + 73))
      goto LABEL_23;
    while (1)
    {
      v3 = *(_QWORD *)(v3 + 16);
      if (!v3 || !*(_BYTE *)(v2 + 128))
        return result;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
      v4 = *(_QWORD *)(v2 + 144);
      if (v4)
      {
        if (!*(_BYTE *)(v2 + 128))
          goto LABEL_22;
        result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v4 + 8) + 40))(*(_QWORD *)(v4 + 8), v3, *(unsigned int *)(v2 + 120));
      }
      *(_BYTE *)(v2 + 176) = 0;
      if (*(_BYTE *)(v2 + 128))
      {
        *(_DWORD *)(v2 + 120) = (*(_DWORD *)(v2 + 120) + 1) % *(_DWORD *)(v2 + 116);
        v5 = *(_QWORD *)(v2 + 160);
        if (v5)
        {
          *(_BYTE *)(v5 + 72) = 1;
          (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 24) + 24))(*(_QWORD *)(v5 + 24));
          result = *(_QWORD **)(v2 + 160);
          *(_QWORD *)(v2 + 160) = 0;
          if (result)
          {
            if (*((_DWORD *)result + 2) == 1)
              result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
            else
              --*((_DWORD *)result + 2);
          }
        }
        else
        {
          *(_QWORD *)(v2 + 160) = 0;
        }
        v6 = *(_QWORD *)(v2 + 152);
        if (v6)
        {
          result = *(_QWORD **)(v6 + 16);
          *(_QWORD *)(v6 + 16) = 0;
          if (result)
          {
            if (*((_DWORD *)result + 2) == 1)
              return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
            else
              --*((_DWORD *)result + 2);
          }
        }
        return result;
      }
LABEL_22:
      __break(1u);
LABEL_23:
      result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 160))(v3);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::GPUCanvasContextCocoa::prepareForDisplay(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E32B8310;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::GPUCanvasContextCocoa::prepareForDisplay(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E32B8310;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::GPUCanvasContextCocoa::prepareForDisplay(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const WTF::MachSendRight *v4;
  int v5;
  BOOL v6;
  WTF::MachSendRight *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  _BYTE v12[4];
  int v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1 || !*(_QWORD *)(v1 + 8))
    return;
  v2 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v2 + 128))
  {
LABEL_26:
    __break(1u);
    return;
  }
  v3 = *(unsigned int *)(v2 + 120);
  if (*(_DWORD *)(v2 + 116) <= v3)
    return;
  v4 = (const WTF::MachSendRight *)(*(_QWORD *)(v2 + 104) + 4 * v3);
  if (!*(_DWORD *)v4)
  {
    v13 = 0;
    WTF::MachSendRight::operator=();
    v7 = (WTF::MachSendRight *)&v13;
    goto LABEL_12;
  }
  v5 = *(_DWORD *)(*(_QWORD *)(v2 + 136) + 12);
  if (v5)
    v6 = *(_DWORD *)v4 == v5;
  else
    v6 = 0;
  if (!v6)
  {
    WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)v12, v4);
    WTF::MachSendRight::operator=();
    v7 = (WTF::MachSendRight *)v12;
LABEL_12:
    WTF::MachSendRight::~MachSendRight(v7);
  }
  *(_BYTE *)(v2 + 176) = 0;
  if (!*(_BYTE *)(v2 + 128))
    goto LABEL_26;
  *(_DWORD *)(v2 + 120) = (*(_DWORD *)(v2 + 120) + 1) % *(_DWORD *)(v2 + 116);
  v8 = *(_QWORD *)(v2 + 160);
  if (v8)
  {
    *(_BYTE *)(v8 + 72) = 1;
    (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 24) + 24))(*(_QWORD *)(v8 + 24));
    v9 = *(_DWORD **)(v2 + 160);
    *(_QWORD *)(v2 + 160) = 0;
    if (v9)
    {
      if (v9[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
      else
        --v9[2];
    }
  }
  else
  {
    *(_QWORD *)(v2 + 160) = 0;
  }
  v10 = *(_QWORD *)(v2 + 152);
  if (v10)
  {
    v11 = *(_DWORD **)(v10 + 16);
    *(_QWORD *)(v10 + 16) = 0;
    if (v11)
    {
      if (v11[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
      else
        --v11[2];
    }
  }
}

void sub_194D454F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a10);
  _Unwind_Resume(a1);
}

unint64_t WebCore::convertDictionaryToJS(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSDOMGlobalObject *a3, const WebCore::MediaTrackCapabilities *a4)
{
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  unint64_t v10;
  int v11;
  __int128 v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  __int128 v42;
  unint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  __int128 v46;
  unint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  unint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF *v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  unint64_t v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  __int128 v72;
  unint64_t v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  WTF *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  unint64_t v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  __int128 v85;
  unint64_t v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  unsigned __int8 *v90;
  unsigned int v91;
  unsigned __int8 *v92;
  unsigned int v93;
  unsigned __int8 *v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  WTF *v99;
  uint64_t v100;
  _DWORD **v101;
  uint64_t v102;
  _DWORD *v103;
  WTF *v104;
  uint64_t v105;
  _DWORD **v106;
  uint64_t v107;
  _DWORD *v108;
  WTF::StringImpl **v109;
  uint64_t v110;
  WTF::StringImpl *v111;
  WTF::StringImpl **v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  WTF *v115;
  void *v116;
  WTF *v117;
  void *v118;
  WTF *v119;
  void *v120;
  WTF *v121[2];
  __int128 v122;

  v7 = *((_QWORD *)this + 7);
  v8 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v9 = 8 * *(unsigned __int8 *)(v8 + 14);
  v10 = JSC::allocateCell<JSC::JSFinalObject>(v7, v9 + 16);
  v11 = *(_DWORD *)(v8 + 8);
  *(_DWORD *)v10 = v8 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  bzero((void *)(v10 + 16), v9);
  if (*(_BYTE *)(v7 + 755))
    __dmb(0xAu);
  if (*((_BYTE *)a3 + 72))
  {
    v12 = *(_OWORD *)((char *)a3 + 56);
    *(_OWORD *)v121 = *(_OWORD *)((char *)a3 + 40);
    v122 = v12;
    v13 = WebCore::convertDictionaryToJS((uint64_t)this, (uint64_t)a2, (uint64_t)v121);
    if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v14 = v121[0];
    v121[0] = 0;
    v121[1] = (WTF *)v10;
    v122 = 0x1000000FFFFFFFFuLL;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v14, v13, 0, (uint64_t)v121);
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v15);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  if (*((_BYTE *)a3 + 400))
  {
    v16 = (WTF *)*((unsigned int *)a3 + 99);
    v121[0] = 0;
    LODWORD(v121[1]) = 0;
    HIDWORD(v121[1]) = (_DWORD)v16;
    if ((_DWORD)v16)
    {
      v115 = (WTF *)WTF::fastMalloc(v16);
      LODWORD(v121[1]) = (_DWORD)v16;
      v121[0] = v115;
      memcpy(v115, *((const void **)a3 + 48), *((unsigned int *)a3 + 99));
      v17 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLBoolean>>::convert<BOOL,0ul>((uint64_t)this, (uint64_t)a2, (uint64_t)v121);
      WTF::fastFree(v115, v116);
    }
    else
    {
      v17 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLBoolean>>::convert<BOOL,0ul>((uint64_t)this, (uint64_t)a2, (uint64_t)v121);
    }
    if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v18 = v121[0];
    v121[0] = 0;
    v121[1] = (WTF *)v10;
    v122 = 0x1000000FFFFFFFFuLL;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v18, v17, 0, (uint64_t)v121);
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v19);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
  v20 = *((_QWORD *)a3 + 31);
  if (!v20)
    goto LABEL_25;
  v21 = *((_QWORD *)this + 7);
  v22 = *(_DWORD *)(v20 + 4);
  if (v22)
  {
    if (v22 != 1)
    {
LABEL_18:
      v23 = *(_QWORD *)(v21 + 64760);
      if (!v23 || v20 != *(_QWORD *)(v23 + 8))
        v23 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_21;
    }
    v90 = *(unsigned __int8 **)(v20 + 8);
    if ((*(_BYTE *)(v20 + 16) & 4) != 0)
    {
      v91 = *v90;
    }
    else
    {
      v96 = *(unsigned __int16 *)v90;
      if (v96 > 0xFF)
        goto LABEL_18;
      v91 = v96;
    }
    v23 = *(_QWORD *)(v21 + 8 * v91 + 42216);
  }
  else
  {
    v23 = *(_QWORD *)(v21 + 41968);
  }
LABEL_21:
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v24 = v121[0];
  v121[0] = 0;
  v121[1] = (WTF *)v10;
  v122 = 0x1000000FFFFFFFFuLL;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v24, v23, 0, (uint64_t)v121);
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v25);
    else
      *(_DWORD *)v24 -= 2;
  }
LABEL_25:
  v26 = *((_QWORD *)a3 + 33);
  if (!v26)
    goto LABEL_35;
  v27 = *((_QWORD *)this + 7);
  v28 = *(_DWORD *)(v26 + 4);
  if (v28)
  {
    if (v28 != 1)
    {
LABEL_28:
      v29 = *(_QWORD *)(v27 + 64760);
      if (!v29 || v26 != *(_QWORD *)(v29 + 8))
        v29 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_31;
    }
    v92 = *(unsigned __int8 **)(v26 + 8);
    if ((*(_BYTE *)(v26 + 16) & 4) != 0)
    {
      v93 = *v92;
    }
    else
    {
      v97 = *(unsigned __int16 *)v92;
      if (v97 > 0xFF)
        goto LABEL_28;
      v93 = v97;
    }
    v29 = *(_QWORD *)(v27 + 8 * v93 + 42216);
  }
  else
  {
    v29 = *(_QWORD *)(v27 + 41968);
  }
LABEL_31:
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v30 = v121[0];
  v121[0] = 0;
  v121[1] = (WTF *)v10;
  v122 = 0x1000000FFFFFFFFuLL;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v30, v29, 0, (uint64_t)v121);
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v31);
    else
      *(_DWORD *)v30 -= 2;
  }
LABEL_35:
  if (*((_BYTE *)a3 + 240))
  {
    v32 = (WTF *)*((unsigned int *)a3 + 59);
    v121[0] = 0;
    LODWORD(v121[1]) = 0;
    HIDWORD(v121[1]) = (_DWORD)v32;
    if ((_DWORD)v32)
    {
      v117 = (WTF *)WTF::fastMalloc(v32);
      LODWORD(v121[1]) = (_DWORD)v32;
      v121[0] = v117;
      memcpy(v117, *((const void **)a3 + 28), *((unsigned int *)a3 + 59));
      v33 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLBoolean>>::convert<BOOL,0ul>((uint64_t)this, (uint64_t)a2, (uint64_t)v121);
      WTF::fastFree(v117, v118);
    }
    else
    {
      v33 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLBoolean>>::convert<BOOL,0ul>((uint64_t)this, (uint64_t)a2, (uint64_t)v121);
    }
    if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v34 = v121[0];
    v121[0] = 0;
    v121[1] = (WTF *)v10;
    v122 = 0x1000000FFFFFFFFuLL;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v34, v33, 0, (uint64_t)v121);
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v35);
      else
        *(_DWORD *)v34 -= 2;
    }
  }
  if (*((_BYTE *)a3 + 136))
  {
    v36 = *((unsigned int *)a3 + 33);
    v121[0] = 0;
    LODWORD(v121[1]) = 0;
    HIDWORD(v121[1]) = v36;
    if ((_DWORD)v36)
    {
      if (v36 >> 29)
        goto LABEL_229;
      v99 = (WTF *)WTF::fastMalloc((WTF *)(8 * v36));
      LODWORD(v121[1]) = v36;
      v121[0] = v99;
      v100 = *((unsigned int *)a3 + 33);
      if ((_DWORD)v100)
      {
        v101 = (_DWORD **)*((_QWORD *)a3 + 15);
        v102 = 8 * v100;
        do
        {
          v103 = *v101;
          if (*v101)
            *v103 += 2;
          *(_QWORD *)v99 = v103;
          v99 = (WTF *)((char *)v99 + 8);
          ++v101;
          v102 -= 8;
        }
        while (v102);
      }
    }
    v38 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLDOMString>>::convert<WTF::String,0ul>((uint64_t)this, (uint64_t)a2, (uint64_t)v121);
    if (HIDWORD(v121[1]))
    {
      v109 = (WTF::StringImpl **)v121[0];
      v110 = 8 * HIDWORD(v121[1]);
      do
      {
        v111 = *v109;
        *v109 = 0;
        if (v111)
        {
          if (*(_DWORD *)v111 == 2)
            WTF::StringImpl::destroy(v111, v37);
          else
            *(_DWORD *)v111 -= 2;
        }
        ++v109;
        v110 -= 8;
      }
      while (v110);
    }
    v39 = v121[0];
    if (v121[0])
    {
      v121[0] = 0;
      LODWORD(v121[1]) = 0;
      WTF::fastFree(v39, v37);
    }
    if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v40 = v121[0];
    v121[0] = 0;
    v121[1] = (WTF *)v10;
    v122 = 0x1000000FFFFFFFFuLL;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v40, v38, 0, (uint64_t)v121);
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v41);
      else
        *(_DWORD *)v40 -= 2;
    }
  }
  if (*((_BYTE *)a3 + 304))
  {
    v42 = *((_OWORD *)a3 + 18);
    *(_OWORD *)v121 = *((_OWORD *)a3 + 17);
    v122 = v42;
    v43 = WebCore::convertDictionaryToJS((uint64_t)this, (uint64_t)a2, (uint64_t)v121);
    if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v44 = v121[0];
    v121[0] = 0;
    v121[1] = (WTF *)v10;
    v122 = 0x1000000FFFFFFFFuLL;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v44, v43, 0, (uint64_t)v121);
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
        WTF::StringImpl::destroy(v44, v45);
      else
        *(_DWORD *)v44 -= 2;
    }
  }
  if (*((_BYTE *)a3 + 112))
  {
    v46 = *((_OWORD *)a3 + 6);
    *(_OWORD *)v121 = *((_OWORD *)a3 + 5);
    v122 = v46;
    v47 = WebCore::convertDictionaryToJS((uint64_t)this, (uint64_t)a2, (uint64_t)v121);
    if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v48 = v121[0];
    v121[0] = 0;
    v121[1] = (WTF *)v10;
    v122 = 0x1000000FFFFFFFFuLL;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v48, v47, 0, (uint64_t)v121);
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
        WTF::StringImpl::destroy(v48, v49);
      else
        *(_DWORD *)v48 -= 2;
    }
  }
  v50 = *((_QWORD *)a3 + 32);
  if (v50)
  {
    v51 = *((_QWORD *)this + 7);
    v52 = *(_DWORD *)(v50 + 4);
    if (v52)
    {
      if (v52 != 1)
      {
LABEL_64:
        v53 = *(_QWORD *)(v51 + 64760);
        if (!v53 || v50 != *(_QWORD *)(v53 + 8))
          v53 = JSC::jsStringWithCacheSlowCase();
        goto LABEL_67;
      }
      v94 = *(unsigned __int8 **)(v50 + 8);
      if ((*(_BYTE *)(v50 + 16) & 4) != 0)
      {
        v95 = *v94;
      }
      else
      {
        v98 = *(unsigned __int16 *)v94;
        if (v98 > 0xFF)
          goto LABEL_64;
        v95 = v98;
      }
      v53 = *(_QWORD *)(v51 + 8 * v95 + 42216);
    }
    else
    {
      v53 = *(_QWORD *)(v51 + 41968);
    }
LABEL_67:
    if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v54 = v121[0];
    v121[0] = 0;
    v121[1] = (WTF *)v10;
    v122 = 0x1000000FFFFFFFFuLL;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v54, v53, 0, (uint64_t)v121);
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
        WTF::StringImpl::destroy(v54, v55);
      else
        *(_DWORD *)v54 -= 2;
    }
  }
  if (*((_BYTE *)a3 + 36))
  {
    *(_OWORD *)v121 = *(_OWORD *)((char *)a3 + 20);
    v56 = WebCore::convertDictionaryToJS((uint64_t)this, (uint64_t)a2, (unsigned int *)v121);
    if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v57 = v121[0];
    v121[0] = 0;
    v121[1] = (WTF *)v10;
    v122 = 0x1000000FFFFFFFFuLL;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v57, v56, 0, (uint64_t)v121);
    if (v57)
    {
      if (*(_DWORD *)v57 == 2)
        WTF::StringImpl::destroy(v57, v58);
      else
        *(_DWORD *)v57 -= 2;
    }
  }
  if (*((_BYTE *)a3 + 424))
  {
    v59 = (WTF *)*((unsigned int *)a3 + 105);
    v121[0] = 0;
    LODWORD(v121[1]) = 0;
    HIDWORD(v121[1]) = (_DWORD)v59;
    if ((_DWORD)v59)
    {
      v119 = (WTF *)WTF::fastMalloc(v59);
      LODWORD(v121[1]) = (_DWORD)v59;
      v121[0] = v119;
      memcpy(v119, *((const void **)a3 + 51), *((unsigned int *)a3 + 105));
      v60 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLBoolean>>::convert<BOOL,0ul>((uint64_t)this, (uint64_t)a2, (uint64_t)v121);
      WTF::fastFree(v119, v120);
    }
    else
    {
      v60 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLBoolean>>::convert<BOOL,0ul>((uint64_t)this, (uint64_t)a2, (uint64_t)v121);
    }
    if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v61 = v121[0];
    v121[0] = 0;
    v121[1] = (WTF *)v10;
    v122 = 0x1000000FFFFFFFFuLL;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v61, v60, 0, (uint64_t)v121);
    if (v61)
    {
      if (*(_DWORD *)v61 == 2)
        WTF::StringImpl::destroy(v61, v62);
      else
        *(_DWORD *)v61 -= 2;
    }
  }
  if (*((_BYTE *)a3 + 200))
  {
    *(_OWORD *)v121 = *(_OWORD *)((char *)a3 + 184);
    v63 = WebCore::convertDictionaryToJS((uint64_t)this, (uint64_t)a2, (unsigned int *)v121);
    if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v64 = v121[0];
    v121[0] = 0;
    v121[1] = (WTF *)v10;
    v122 = 0x1000000FFFFFFFFuLL;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v64, v63, 0, (uint64_t)v121);
    if (v64)
    {
      if (*(_DWORD *)v64 == 2)
        WTF::StringImpl::destroy(v64, v65);
      else
        *(_DWORD *)v64 -= 2;
    }
  }
  if (*((_BYTE *)a3 + 220))
  {
    *(_OWORD *)v121 = *(_OWORD *)((char *)a3 + 204);
    v66 = WebCore::convertDictionaryToJS((uint64_t)this, (uint64_t)a2, (unsigned int *)v121);
    if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v67 = v121[0];
    v121[0] = 0;
    v121[1] = (WTF *)v10;
    v122 = 0x1000000FFFFFFFFuLL;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v67, v66, 0, (uint64_t)v121);
    if (v67)
    {
      if (*(_DWORD *)v67 == 2)
        WTF::StringImpl::destroy(v67, v68);
      else
        *(_DWORD *)v67 -= 2;
    }
  }
  if (*((_BYTE *)a3 + 377))
  {
    if (*((_BYTE *)a3 + 376))
      v69 = 7;
    else
      v69 = 6;
    if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v70 = v121[0];
    v121[0] = 0;
    v121[1] = (WTF *)v10;
    v122 = 0x1000000FFFFFFFFuLL;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v70, v69, 0, (uint64_t)v121);
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
        WTF::StringImpl::destroy(v70, v71);
      else
        *(_DWORD *)v70 -= 2;
    }
  }
  if (*((_BYTE *)a3 + 176))
  {
    v72 = *((_OWORD *)a3 + 10);
    *(_OWORD *)v121 = *((_OWORD *)a3 + 9);
    v122 = v72;
    v73 = WebCore::convertDictionaryToJS((uint64_t)this, (uint64_t)a2, (uint64_t)v121);
    if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v74 = v121[0];
    v121[0] = 0;
    v121[1] = (WTF *)v10;
    v122 = 0x1000000FFFFFFFFuLL;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v74, v73, 0, (uint64_t)v121);
    if (v74)
    {
      if (*(_DWORD *)v74 == 2)
        WTF::StringImpl::destroy(v74, v75);
      else
        *(_DWORD *)v74 -= 2;
    }
  }
  if (*((_BYTE *)a3 + 328))
  {
    v76 = *((unsigned int *)a3 + 81);
    v121[0] = 0;
    LODWORD(v121[1]) = 0;
    HIDWORD(v121[1]) = v76;
    if (!(_DWORD)v76)
    {
LABEL_108:
      v78 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLDOMString>>::convert<WTF::String,0ul>((uint64_t)this, (uint64_t)a2, (uint64_t)v121);
      if (HIDWORD(v121[1]))
      {
        v112 = (WTF::StringImpl **)v121[0];
        v113 = 8 * HIDWORD(v121[1]);
        do
        {
          v114 = *v112;
          *v112 = 0;
          if (v114)
          {
            if (*(_DWORD *)v114 == 2)
              WTF::StringImpl::destroy(v114, v77);
            else
              *(_DWORD *)v114 -= 2;
          }
          ++v112;
          v113 -= 8;
        }
        while (v113);
      }
      v79 = v121[0];
      if (v121[0])
      {
        v121[0] = 0;
        LODWORD(v121[1]) = 0;
        WTF::fastFree(v79, v77);
      }
      if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
        return 0;
      WTF::AtomStringImpl::addLiteral();
      v80 = v121[0];
      v121[0] = 0;
      v121[1] = (WTF *)v10;
      v122 = 0x1000000FFFFFFFFuLL;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v80, v78, 0, (uint64_t)v121);
      if (v80)
      {
        if (*(_DWORD *)v80 == 2)
          WTF::StringImpl::destroy(v80, v81);
        else
          *(_DWORD *)v80 -= 2;
      }
      goto LABEL_115;
    }
    if (!(v76 >> 29))
    {
      v104 = (WTF *)WTF::fastMalloc((WTF *)(8 * v76));
      LODWORD(v121[1]) = v76;
      v121[0] = v104;
      v105 = *((unsigned int *)a3 + 81);
      if ((_DWORD)v105)
      {
        v106 = (_DWORD **)*((_QWORD *)a3 + 39);
        v107 = 8 * v105;
        do
        {
          v108 = *v106;
          if (*v106)
            *v108 += 2;
          *(_QWORD *)v104 = v108;
          v104 = (WTF *)((char *)v104 + 8);
          ++v106;
          v107 -= 8;
        }
        while (v107);
      }
      goto LABEL_108;
    }
LABEL_229:
    __break(0xC471u);
    JUMPOUT(0x194D46500);
  }
LABEL_115:
  if (*((_BYTE *)a3 + 16))
  {
    *(_OWORD *)v121 = *(_OWORD *)a3;
    v82 = WebCore::convertDictionaryToJS((uint64_t)this, (uint64_t)a2, (unsigned int *)v121);
    if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v83 = v121[0];
    v121[0] = 0;
    v121[1] = (WTF *)v10;
    v122 = 0x1000000FFFFFFFFuLL;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v83, v82, 0, (uint64_t)v121);
    if (v83)
    {
      if (*(_DWORD *)v83 == 2)
        WTF::StringImpl::destroy(v83, v84);
      else
        *(_DWORD *)v83 -= 2;
    }
  }
  if (*((_BYTE *)a3 + 368))
  {
    v85 = *((_OWORD *)a3 + 22);
    *(_OWORD *)v121 = *((_OWORD *)a3 + 21);
    v122 = v85;
    v86 = WebCore::convertDictionaryToJS((uint64_t)this, (uint64_t)a2, (uint64_t)v121);
    if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v87 = v121[0];
    v121[0] = 0;
    v121[1] = (WTF *)v10;
    v122 = 0x1000000FFFFFFFFuLL;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v10, (JSC::VM *)v7, (unint64_t)v87, v86, 0, (uint64_t)v121);
    if (v87)
    {
      if (*(_DWORD *)v87 == 2)
        WTF::StringImpl::destroy(v87, v88);
      else
        *(_DWORD *)v87 -= 2;
    }
  }
  return v10;
}

void WebCore::convertDictionary<WebCore::MediaTrackConstraints>(JSC::JSCell *this@<X1>, JSC::JSGlobalObject *a2@<X0>, uint64_t a3@<X8>)
{
  JSC::VM *v5;
  unint64_t v6;
  JSC::Structure *Object;
  void *v8;
  WTF *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  JSC::JSCell *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t (*v21)();
  int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t (*v28)();
  int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t (*v38)();
  int v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  JSC::JSCell *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t (*v48)();
  int v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  JSC::JSCell *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  unint64_t v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  unint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  JSC::JSCell *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  JSC::JSCell *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  unint64_t v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  JSC::JSCell *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t (*v76)();
  int v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  JSC::JSCell *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  JSC::JSCell *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  uint64_t v86;
  uint64_t v87;
  JSValue v88;
  int i;
  unsigned int v90;
  JSC::JSCell *IndexQuickly;
  WTF::StringImpl *v92;
  uint64_t v93;
  JSC::JSCell *v95;
  uint64_t v96;
  unint64_t v97;
  WTF *v98;
  unsigned int v99;
  unsigned int v100;
  WTF *v101;
  int hasExceptionsAfterHandlingTraps;
  JSC::VM *v103;
  _BYTE *v104;
  uint64_t v105;
  _BYTE v106[64];
  int v107;
  _BYTE v108[56];
  __int128 v109;
  __int128 v110;
  int v111;
  _OWORD v112[2];
  uint64_t v113;
  char v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  char v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  char v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  char v130;
  char v131;
  _BYTE v132[64];
  int v133;
  char v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  char v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  char v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  int v150;
  char v151;
  char v152;
  _BYTE v153[64];
  int v154;
  char v155;
  char v156;
  _BYTE v157[64];
  int v158;
  char v159;
  char v160;
  _BYTE v161[64];
  int v162;
  char v163;
  uint64_t v164;
  int v165;
  char v166;
  char v167;
  _BYTE v168[64];
  int v169;
  char v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  char v176;
  uint64_t v177;
  int v178;
  char v179;
  uint64_t v180;
  int v181;
  char v182;
  uint64_t v183;
  int v184;
  char v185;
  WTF *v186;
  unint64_t v187;
  char v188;
  uint64_t v189;

  v189 = *MEMORY[0x1E0C80C00];
  v5 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v103 = v5;
  v6 = (unint64_t)this & 0xFFFFFFFFFFFFFFF7;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    Object = 0;
    goto LABEL_5;
  }
  if (((unint64_t)this & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::Structure *)JSC::JSCell::getObject(this);
    if (Object)
    {
LABEL_5:
      LOBYTE(v112[0]) = 0;
      v114 = 0;
      LOBYTE(v115) = 0;
      v118 = 0;
      LOBYTE(v119) = 0;
      v124 = 0;
      LOBYTE(v125) = 0;
      v130 = 0;
      v131 = 0;
      v134 = 0;
      LOBYTE(v135) = 0;
      v140 = 0;
      LOBYTE(v141) = 0;
      v144 = 0;
      LOBYTE(v145) = 0;
      v148 = 0;
      LOBYTE(v149) = 0;
      v151 = 0;
      v152 = 0;
      v155 = 0;
      v156 = 0;
      v159 = 0;
      v160 = 0;
      v163 = 0;
      LOBYTE(v164) = 0;
      v166 = 0;
      v167 = 0;
      v170 = 0;
      LOBYTE(v171) = 0;
      v176 = 0;
      LOBYTE(v177) = 0;
      v179 = 0;
      LOBYTE(v180) = 0;
      v182 = 0;
      LOBYTE(v183) = 0;
      v185 = 0;
      LOBYTE(v186) = 0;
      v188 = 0;
      if (v6 == 2)
      {
LABEL_6:
        WebCore::MediaTrackConstraintSet::MediaTrackConstraintSet(a3 + 8, (uint64_t)v112);
        *(_BYTE *)(a3 + 1056) = 0;
        *(_BYTE *)(a3 + 1072) = 0;
        if (v188)
        {
          v9 = v186;
          v186 = 0;
          *(_QWORD *)(a3 + 1056) = v9;
          v10 = v187;
          v187 = 0;
          *(_QWORD *)(a3 + 1064) = v10;
          *(_BYTE *)(a3 + 1072) = 1;
        }
        *(_DWORD *)(a3 + 1080) = 0;
        goto LABEL_258;
      }
      WTF::AtomStringImpl::addLiteral();
      v12 = (JSC::JSCell *)JSC::JSObject::get(Object, a2, *(unint64_t *)v108);
      if (*(_QWORD *)v108)
      {
        if (**(_DWORD **)v108 == 2)
          WTF::StringImpl::destroy(*(WTF::StringImpl **)v108, v11);
        else
          **(_DWORD **)v108 -= 2;
      }
      if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
      {
LABEL_257:
        *(_DWORD *)(a3 + 1080) = 1;
LABEL_258:
        WebCore::MediaTrackConstraints::~MediaTrackConstraints((WebCore::MediaTrackConstraints *)v112, v8);
        return;
      }
      if (v12 != (JSC::JSCell *)10)
      {
        WebCore::Converter<WebCore::IDLUnion<WebCore::IDLDouble,WebCore::IDLDictionary<WebCore::ConstrainDoubleRange>>>::convert((uint64_t)v108, a2, v12);
        if (v111)
          goto LABEL_257;
        v121 = *(_OWORD *)&v108[40];
        v122 = v109;
        v123 = v110;
        v119 = *(_OWORD *)&v108[8];
        v120 = *(_OWORD *)&v108[24];
        if (!v124)
          v124 = 1;
      }
      WTF::AtomStringImpl::addLiteral();
      v13 = *(WTF::StringImpl **)v108;
      v15 = JSC::JSObject::get(Object, a2, *(unint64_t *)v108);
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v14);
        else
          *(_DWORD *)v13 -= 2;
      }
      if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
        goto LABEL_257;
      if (v15 != 10)
      {
        WebCore::Converter<WebCore::IDLUnion<WebCore::IDLBoolean,WebCore::IDLDictionary<WebCore::ConstrainBooleanParameters>>>::convert(v108, a2, v15);
        if (*(_DWORD *)&v108[16])
          goto LABEL_257;
        v180 = *(_QWORD *)&v108[4];
        v181 = *(_DWORD *)&v108[12];
        if (!v182)
          v182 = 1;
      }
      WTF::AtomStringImpl::addLiteral();
      v16 = *(WTF::StringImpl **)v108;
      v18 = JSC::JSObject::get(Object, a2, *(unint64_t *)v108);
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v17);
        else
          *(_DWORD *)v16 -= 2;
      }
      if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
        goto LABEL_257;
      if (v18 == 10)
      {
LABEL_49:
        WTF::AtomStringImpl::addLiteral();
        v23 = *(WTF::StringImpl **)v108;
        v25 = JSC::JSObject::get(Object, a2, *(unint64_t *)v108);
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, v24);
          else
            *(_DWORD *)v23 -= 2;
        }
        if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
          goto LABEL_257;
        if (v25 == 10)
        {
LABEL_71:
          WTF::AtomStringImpl::addLiteral();
          v30 = *(WTF::StringImpl **)v108;
          v32 = JSC::JSObject::get(Object, a2, *(unint64_t *)v108);
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, v31);
            else
              *(_DWORD *)v30 -= 2;
          }
          if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
            goto LABEL_257;
          if (v32 != 10)
          {
            WebCore::Converter<WebCore::IDLUnion<WebCore::IDLBoolean,WebCore::IDLDictionary<WebCore::ConstrainBooleanParameters>>>::convert(v108, a2, v32);
            if (*(_DWORD *)&v108[16])
              goto LABEL_257;
            v149 = *(_QWORD *)&v108[4];
            v150 = *(_DWORD *)&v108[12];
            if (!v151)
              v151 = 1;
          }
          WTF::AtomStringImpl::addLiteral();
          v33 = *(WTF::StringImpl **)v108;
          v35 = JSC::JSObject::get(Object, a2, *(unint64_t *)v108);
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, v34);
            else
              *(_DWORD *)v33 -= 2;
          }
          if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
            goto LABEL_257;
          if (v35 == 10)
          {
LABEL_102:
            WTF::AtomStringImpl::addLiteral();
            v40 = *(WTF::StringImpl **)v108;
            v42 = (JSC::JSCell *)JSC::JSObject::get(Object, a2, *(unint64_t *)v108);
            if (v40)
            {
              if (*(_DWORD *)v40 == 2)
                WTF::StringImpl::destroy(v40, v41);
              else
                *(_DWORD *)v40 -= 2;
            }
            if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
              goto LABEL_257;
            if (v42 != (JSC::JSCell *)10)
            {
              WebCore::Converter<WebCore::IDLUnion<WebCore::IDLDouble,WebCore::IDLDictionary<WebCore::ConstrainDoubleRange>>>::convert((uint64_t)v108, a2, v42);
              if (v111)
                goto LABEL_257;
              v127 = *(_OWORD *)&v108[40];
              v128 = v109;
              v129 = v110;
              v125 = *(_OWORD *)&v108[8];
              v126 = *(_OWORD *)&v108[24];
              if (!v130)
                v130 = 1;
            }
            WTF::AtomStringImpl::addLiteral();
            v43 = *(WTF::StringImpl **)v108;
            v45 = JSC::JSObject::get(Object, a2, *(unint64_t *)v108);
            if (v43)
            {
              if (*(_DWORD *)v43 == 2)
                WTF::StringImpl::destroy(v43, v44);
              else
                *(_DWORD *)v43 -= 2;
            }
            if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
              goto LABEL_257;
            if (v45 == 10)
            {
LABEL_133:
              WTF::AtomStringImpl::addLiteral();
              v50 = *(WTF::StringImpl **)v108;
              v52 = (JSC::JSCell *)JSC::JSObject::get(Object, a2, *(unint64_t *)v108);
              if (v50)
              {
                if (*(_DWORD *)v50 == 2)
                  WTF::StringImpl::destroy(v50, v51);
                else
                  *(_DWORD *)v50 -= 2;
              }
              if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
                goto LABEL_257;
              if (v52 != (JSC::JSCell *)10)
              {
                WebCore::Converter<WebCore::IDLUnion<WebCore::IDLLong,WebCore::IDLDictionary<WebCore::ConstrainLongRange>>>::convert((uint64_t)v108, a2, v52);
                if (*(_DWORD *)&v108[44])
                  goto LABEL_257;
                v115 = *(_OWORD *)&v108[4];
                v116 = *(_OWORD *)&v108[20];
                v117 = *(_QWORD *)&v108[36];
                if (!v118)
                  v118 = 1;
              }
              WTF::AtomStringImpl::addLiteral();
              v53 = *(WTF::StringImpl **)v108;
              v55 = JSC::JSObject::get(Object, a2, *(unint64_t *)v108);
              if (v53)
              {
                if (*(_DWORD *)v53 == 2)
                  WTF::StringImpl::destroy(v53, v54);
                else
                  *(_DWORD *)v53 -= 2;
              }
              if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
                goto LABEL_257;
              if (v55 != 10)
              {
                WebCore::Converter<WebCore::IDLUnion<WebCore::IDLBoolean,WebCore::IDLDictionary<WebCore::ConstrainBooleanParameters>>>::convert(v108, a2, v55);
                if (*(_DWORD *)&v108[16])
                  goto LABEL_257;
                v164 = *(_QWORD *)&v108[4];
                v165 = *(_DWORD *)&v108[12];
                if (!v166)
                  v166 = 1;
              }
              WTF::AtomStringImpl::addLiteral();
              v56 = *(WTF::StringImpl **)v108;
              v58 = JSC::JSObject::get(Object, a2, *(unint64_t *)v108);
              if (v56)
              {
                if (*(_DWORD *)v56 == 2)
                  WTF::StringImpl::destroy(v56, v57);
                else
                  *(_DWORD *)v56 -= 2;
              }
              if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
                goto LABEL_257;
              if (v58 != 10)
              {
                WebCore::Converter<WebCore::IDLUnion<WebCore::IDLBoolean,WebCore::IDLDictionary<WebCore::ConstrainBooleanParameters>>>::convert(v108, a2, v58);
                if (*(_DWORD *)&v108[16])
                  goto LABEL_257;
                v183 = *(_QWORD *)&v108[4];
                v184 = *(_DWORD *)&v108[12];
                if (!v185)
                  v185 = 1;
              }
              WTF::AtomStringImpl::addLiteral();
              v59 = *(WTF::StringImpl **)v108;
              v61 = (JSC::JSCell *)JSC::JSObject::get(Object, a2, *(unint64_t *)v108);
              if (v59)
              {
                if (*(_DWORD *)v59 == 2)
                  WTF::StringImpl::destroy(v59, v60);
                else
                  *(_DWORD *)v59 -= 2;
              }
              if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
                goto LABEL_257;
              if (v61 != (JSC::JSCell *)10)
              {
                WebCore::Converter<WebCore::IDLUnion<WebCore::IDLLong,WebCore::IDLDictionary<WebCore::ConstrainLongRange>>>::convert((uint64_t)v108, a2, v61);
                if (*(_DWORD *)&v108[44])
                  goto LABEL_257;
                v141 = *(_OWORD *)&v108[4];
                v142 = *(_OWORD *)&v108[20];
                v143 = *(_QWORD *)&v108[36];
                if (!v144)
                  v144 = 1;
              }
              WTF::AtomStringImpl::addLiteral();
              v62 = *(WTF::StringImpl **)v108;
              v64 = (JSC::JSCell *)JSC::JSObject::get(Object, a2, *(unint64_t *)v108);
              if (v62)
              {
                if (*(_DWORD *)v62 == 2)
                  WTF::StringImpl::destroy(v62, v63);
                else
                  *(_DWORD *)v62 -= 2;
              }
              if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
                goto LABEL_257;
              if (v64 != (JSC::JSCell *)10)
              {
                WebCore::Converter<WebCore::IDLUnion<WebCore::IDLLong,WebCore::IDLDictionary<WebCore::ConstrainLongRange>>>::convert((uint64_t)v108, a2, v64);
                if (*(_DWORD *)&v108[44])
                  goto LABEL_257;
                v145 = *(_OWORD *)&v108[4];
                v146 = *(_OWORD *)&v108[20];
                v147 = *(_QWORD *)&v108[36];
                if (!v148)
                  v148 = 1;
              }
              WTF::AtomStringImpl::addLiteral();
              v65 = *(WTF::StringImpl **)v108;
              v67 = JSC::JSObject::get(Object, a2, *(unint64_t *)v108);
              if (v65)
              {
                if (*(_DWORD *)v65 == 2)
                  WTF::StringImpl::destroy(v65, v66);
                else
                  *(_DWORD *)v65 -= 2;
              }
              if (*((_DWORD *)v103 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v103))
                goto LABEL_257;
              if (v67 != 10)
              {
                WebCore::Converter<WebCore::IDLUnion<WebCore::IDLBoolean,WebCore::IDLDictionary<WebCore::ConstrainBooleanParameters>>>::convert(v108, a2, v67);
                if (*(_DWORD *)&v108[16])
                  goto LABEL_257;
                v177 = *(_QWORD *)&v108[4];
                v178 = *(_DWORD *)&v108[12];
                if (!v179)
                  v179 = 1;
              }
              WTF::AtomStringImpl::addLiteral();
              v68 = *(WTF::StringImpl **)v108;
              v70 = (JSC::JSCell *)JSC::JSObject::get(Object, a2, *(unint64_t *)v108);
              if (v68)
              {
                if (*(_DWORD *)v68 == 2)
                  WTF::StringImpl::destroy(v68, v69);
                else
                  *(_DWORD *)v68 -= 2;
              }
              if (*((_DWORD *)v103 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v103))
                goto LABEL_257;
              if (v70 != (JSC::JSCell *)10)
              {
                WebCore::Converter<WebCore::IDLUnion<WebCore::IDLDouble,WebCore::IDLDictionary<WebCore::ConstrainDoubleRange>>>::convert((uint64_t)v108, a2, v70);
                if (v111)
                  goto LABEL_257;
                v137 = *(_OWORD *)&v108[40];
                v138 = v109;
                v139 = v110;
                v135 = *(_OWORD *)&v108[8];
                v136 = *(_OWORD *)&v108[24];
                if (!v140)
                  v140 = 1;
              }
              WTF::AtomStringImpl::addLiteral();
              v71 = *(WTF::StringImpl **)v108;
              v73 = JSC::JSObject::get(Object, a2, *(unint64_t *)v108);
              if (v71)
              {
                if (*(_DWORD *)v71 == 2)
                  WTF::StringImpl::destroy(v71, v72);
                else
                  *(_DWORD *)v71 -= 2;
              }
              if (*((_DWORD *)v103 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v103))
                goto LABEL_257;
              if (v73 == 10)
              {
LABEL_218:
                WTF::AtomStringImpl::addLiteral();
                v78 = *(WTF::StringImpl **)v108;
                v80 = (JSC::JSCell *)JSC::JSObject::get(Object, a2, *(unint64_t *)v108);
                if (v78)
                {
                  if (*(_DWORD *)v78 == 2)
                    WTF::StringImpl::destroy(v78, v79);
                  else
                    *(_DWORD *)v78 -= 2;
                }
                if (*((_DWORD *)v103 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v103))
                  goto LABEL_257;
                if (v80 != (JSC::JSCell *)10)
                {
                  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLLong,WebCore::IDLDictionary<WebCore::ConstrainLongRange>>>::convert((uint64_t)v108, a2, v80);
                  if (*(_DWORD *)&v108[44])
                    goto LABEL_257;
                  v112[0] = *(_OWORD *)&v108[4];
                  v112[1] = *(_OWORD *)&v108[20];
                  v113 = *(_QWORD *)&v108[36];
                  if (!v114)
                    v114 = 1;
                }
                WTF::AtomStringImpl::addLiteral();
                v81 = *(WTF::StringImpl **)v108;
                v83 = (JSC::JSCell *)JSC::JSObject::get(Object, a2, *(unint64_t *)v108);
                if (v81)
                {
                  if (*(_DWORD *)v81 == 2)
                    WTF::StringImpl::destroy(v81, v82);
                  else
                    *(_DWORD *)v81 -= 2;
                }
                if (*((_DWORD *)v103 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v103))
                  goto LABEL_257;
                if (v83 != (JSC::JSCell *)10)
                {
                  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLDouble,WebCore::IDLDictionary<WebCore::ConstrainDoubleRange>>>::convert((uint64_t)v108, a2, v83);
                  if (v111)
                    goto LABEL_257;
                  v173 = *(_OWORD *)&v108[40];
                  v174 = v109;
                  v175 = v110;
                  v171 = *(_OWORD *)&v108[8];
                  v172 = *(_OWORD *)&v108[24];
                  if (!v176)
                    v176 = 1;
                }
                WTF::AtomStringImpl::addLiteral();
                v84 = *(WTF::StringImpl **)v108;
                v86 = JSC::JSObject::get(Object, a2, *(unint64_t *)v108);
                if (v84)
                {
                  if (*(_DWORD *)v84 == 2)
                    WTF::StringImpl::destroy(v84, v85);
                  else
                    *(_DWORD *)v84 -= 2;
                }
                if (*((_DWORD *)v103 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v103))
                  goto LABEL_257;
                if (v86 == 10)
                  goto LABEL_6;
                v87 = *((_QWORD *)a2 + 7);
                v105 = v87;
                if ((v86 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v86 + 5) <= 0x16u)
                {
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  JSC::throwTypeError();
                  v92 = *(WTF::StringImpl **)v108;
                  *(_QWORD *)v108 = 0;
                  if (v92)
                  {
                    if (*(_DWORD *)v92 == 2)
                      WTF::StringImpl::destroy(v92, (WTF::StringImpl *)v8);
                    else
                      *(_DWORD *)v92 -= 2;
                  }
                  goto LABEL_257;
                }
                *(_QWORD *)v108 = 0;
                *(_QWORD *)&v108[8] = 0;
                if (JSC::getIterationMode() == 2)
                {
                  for (i = 1; ; ++i)
                  {
                    v90 = (*(_BYTE *)(v86 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(v86 + 8) - 8) : 0;
                    if (i - 1 >= v90)
                      break;
                    IndexQuickly = (JSC::JSCell *)JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)v86, i - 1, 0);
                    if (!IndexQuickly)
                      IndexQuickly = (JSC::JSCell *)JSC::JSObject::get((JSC::JSObject *)v86, a2, (i - 1));
                    if (*(_DWORD *)(v87 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v87) & 1) != 0)
                      break;
                    WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::MediaTrackConstraintSet>>::convert(a2, IndexQuickly, (uint64_t)v108);
                    if (*(_QWORD *)(v87 + 16))
                    {
                      v96 = JSC::JSArrayIterator::create();
                      v97 = i | 0xFFFE000000000000;
                      if (i < 0)
                        v97 = COERCE__INT64((double)i) + 0x2000000000000;
                      *(_QWORD *)(v96 + 16) = v97;
                      goto LABEL_290;
                    }
                  }
                }
                else
                {
                  JSC::iteratorForIterable(a2, (JSC::JSGlobalObject *)v86, v88);
                  if (!*(_DWORD *)(v87 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v87) & 1) == 0)
                  {
                    while (1)
                    {
                      v93 = JSC::iteratorStep();
                      if (*(_QWORD *)(v87 + 16) || v93 == 6)
                        break;
                      v95 = (JSC::JSCell *)JSC::iteratorValue();
                      if (*(_DWORD *)(v87 + 80))
                      {
                        if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v87) & 1) != 0)
                          break;
                      }
                      WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::MediaTrackConstraintSet>>::convert(a2, v95, (uint64_t)v108);
                      if (*(_QWORD *)(v87 + 16))
                      {
LABEL_290:
                        JSC::iteratorClose();
                        break;
                      }
                    }
                  }
                }
                if (*(_DWORD *)(v87 + 80))
                {
                  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v87);
                  v98 = *(WTF **)v108;
                  if (hasExceptionsAfterHandlingTraps)
                  {
                    if (*(_DWORD *)&v108[12])
                      WTF::VectorDestructor<true,WebCore::MediaTrackConstraintSet>::destruct(*(uint64_t *)v108, *(_QWORD *)v108 + 1048 * *(unsigned int *)&v108[12]);
                    if (v98)
                      WTF::fastFree(v98, v8);
                    goto LABEL_257;
                  }
                }
                else
                {
                  v98 = *(WTF **)v108;
                }
                v100 = *(_DWORD *)&v108[8];
                v99 = *(_DWORD *)&v108[12];
                if (v188)
                {
                  if (HIDWORD(v187))
                    WTF::VectorDestructor<true,WebCore::MediaTrackConstraintSet>::destruct((uint64_t)v186, (uint64_t)v186 + 1048 * HIDWORD(v187));
                  v101 = v186;
                  if (v186)
                  {
                    v186 = 0;
                    LODWORD(v187) = 0;
                    WTF::fastFree(v101, v8);
                  }
                  v186 = v98;
                  v187 = __PAIR64__(v99, v100);
                }
                else
                {
                  v186 = v98;
                  v187 = *(_QWORD *)&v108[8];
                  v188 = 1;
                }
                goto LABEL_6;
              }
              WebCore::Converter<WebCore::IDLUnion<WebCore::IDLDOMString,WebCore::IDLSequence<WebCore::IDLDOMString>,WebCore::IDLDictionary<WebCore::ConstrainDOMStringParameters>>>::convert((uint64_t)v108, a2, v73);
              v74 = v111;
              if (v111)
              {
                *(_DWORD *)(a3 + 1080) = 1;
                v77 = v74;
LABEL_215:
                if (v77 != -1)
                  ((void (*)(uint64_t *, _BYTE *))off_1E32BEA50[v77])(&v105, &v108[8]);
                if (v74)
                  goto LABEL_258;
                goto LABEL_218;
              }
              v106[0] = 0;
              v107 = -1;
              v75 = DWORD2(v110);
              if (DWORD2(v110) == -1)
              {
                if (v170)
                {
                  if (v169 == -1)
                  {
LABEL_214:
                    v77 = v111;
                    goto LABEL_215;
                  }
                  ((void (*)(_BYTE **, _BYTE *))off_1E32BE9D8[v169])(&v104, v168);
                  v169 = -1;
LABEL_212:
                  if (v107 != -1)
                    ((void (*)(_BYTE **, _BYTE *))off_1E32BE9D8[v107])(&v104, v106);
                  goto LABEL_214;
                }
                v168[0] = 0;
                v169 = -1;
              }
              else
              {
                v76 = off_1E32BE9F0[DWORD2(v110)];
                ((void (*)(_BYTE **, _BYTE *, _BYTE *))v76)(&v104, v106, &v108[16]);
                v107 = v75;
                if (v170)
                {
                  v104 = v168;
                  ((void (*)(_BYTE **))off_1E32BEA28[v75])(&v104);
                  goto LABEL_212;
                }
                v168[0] = 0;
                v169 = -1;
                ((void (*)(_BYTE **, _BYTE *, _BYTE *))v76)(&v104, v168, v106);
                v169 = v75;
              }
              v170 = 1;
              goto LABEL_212;
            }
            WebCore::Converter<WebCore::IDLUnion<WebCore::IDLDOMString,WebCore::IDLSequence<WebCore::IDLDOMString>,WebCore::IDLDictionary<WebCore::ConstrainDOMStringParameters>>>::convert((uint64_t)v108, a2, v45);
            v46 = v111;
            if (v111)
            {
              *(_DWORD *)(a3 + 1080) = 1;
              v49 = v46;
LABEL_130:
              if (v49 != -1)
                ((void (*)(uint64_t *, _BYTE *))off_1E32BEA50[v49])(&v105, &v108[8]);
              if (v46)
                goto LABEL_258;
              goto LABEL_133;
            }
            v106[0] = 0;
            v107 = -1;
            v47 = DWORD2(v110);
            if (DWORD2(v110) == -1)
            {
              if (v159)
              {
                if (v158 == -1)
                {
LABEL_129:
                  v49 = v111;
                  goto LABEL_130;
                }
                ((void (*)(_BYTE **, _BYTE *))off_1E32BE9D8[v158])(&v104, v157);
                v158 = -1;
LABEL_127:
                if (v107 != -1)
                  ((void (*)(_BYTE **, _BYTE *))off_1E32BE9D8[v107])(&v104, v106);
                goto LABEL_129;
              }
              v157[0] = 0;
              v158 = -1;
            }
            else
            {
              v48 = off_1E32BE9F0[DWORD2(v110)];
              ((void (*)(_BYTE **, _BYTE *, _BYTE *))v48)(&v104, v106, &v108[16]);
              v107 = v47;
              if (v159)
              {
                v104 = v157;
                ((void (*)(_BYTE **))off_1E32BEA28[v47])(&v104);
                goto LABEL_127;
              }
              v157[0] = 0;
              v158 = -1;
              ((void (*)(_BYTE **, _BYTE *, _BYTE *))v48)(&v104, v157, v106);
              v158 = v47;
            }
            v159 = 1;
            goto LABEL_127;
          }
          WebCore::Converter<WebCore::IDLUnion<WebCore::IDLDOMString,WebCore::IDLSequence<WebCore::IDLDOMString>,WebCore::IDLDictionary<WebCore::ConstrainDOMStringParameters>>>::convert((uint64_t)v108, a2, v35);
          v36 = v111;
          if (v111)
          {
            *(_DWORD *)(a3 + 1080) = 1;
            v39 = v36;
LABEL_99:
            if (v39 != -1)
              ((void (*)(uint64_t *, _BYTE *))off_1E32BEA50[v39])(&v105, &v108[8]);
            if (v36)
              goto LABEL_258;
            goto LABEL_102;
          }
          v106[0] = 0;
          v107 = -1;
          v37 = DWORD2(v110);
          if (DWORD2(v110) == -1)
          {
            if (v134)
            {
              if (v133 == -1)
              {
LABEL_98:
                v39 = v111;
                goto LABEL_99;
              }
              ((void (*)(_BYTE **, _BYTE *))off_1E32BE9D8[v133])(&v104, v132);
              v133 = -1;
LABEL_96:
              if (v107 != -1)
                ((void (*)(_BYTE **, _BYTE *))off_1E32BE9D8[v107])(&v104, v106);
              goto LABEL_98;
            }
            v132[0] = 0;
            v133 = -1;
          }
          else
          {
            v38 = off_1E32BE9F0[DWORD2(v110)];
            ((void (*)(_BYTE **, _BYTE *, _BYTE *))v38)(&v104, v106, &v108[16]);
            v107 = v37;
            if (v134)
            {
              v104 = v132;
              ((void (*)(_BYTE **))off_1E32BEA28[v37])(&v104);
              goto LABEL_96;
            }
            v132[0] = 0;
            v133 = -1;
            ((void (*)(_BYTE **, _BYTE *, _BYTE *))v38)(&v104, v132, v106);
            v133 = v37;
          }
          v134 = 1;
          goto LABEL_96;
        }
        WebCore::Converter<WebCore::IDLUnion<WebCore::IDLDOMString,WebCore::IDLSequence<WebCore::IDLDOMString>,WebCore::IDLDictionary<WebCore::ConstrainDOMStringParameters>>>::convert((uint64_t)v108, a2, v25);
        v26 = v111;
        if (v111)
        {
          *(_DWORD *)(a3 + 1080) = 1;
          v29 = v26;
LABEL_68:
          if (v29 != -1)
            ((void (*)(uint64_t *, _BYTE *))off_1E32BEA50[v29])(&v105, &v108[8]);
          if (v26)
            goto LABEL_258;
          goto LABEL_71;
        }
        v106[0] = 0;
        v107 = -1;
        v27 = DWORD2(v110);
        if (DWORD2(v110) == -1)
        {
          if (v163)
          {
            if (v162 == -1)
            {
LABEL_67:
              v29 = v111;
              goto LABEL_68;
            }
            ((void (*)(_BYTE **, _BYTE *))off_1E32BE9D8[v162])(&v104, v161);
            v162 = -1;
LABEL_65:
            if (v107 != -1)
              ((void (*)(_BYTE **, _BYTE *))off_1E32BE9D8[v107])(&v104, v106);
            goto LABEL_67;
          }
          v161[0] = 0;
          v162 = -1;
        }
        else
        {
          v28 = off_1E32BE9F0[DWORD2(v110)];
          ((void (*)(_BYTE **, _BYTE *, _BYTE *))v28)(&v104, v106, &v108[16]);
          v107 = v27;
          if (v163)
          {
            v104 = v161;
            ((void (*)(_BYTE **))off_1E32BEA28[v27])(&v104);
            goto LABEL_65;
          }
          v161[0] = 0;
          v162 = -1;
          ((void (*)(_BYTE **, _BYTE *, _BYTE *))v28)(&v104, v161, v106);
          v162 = v27;
        }
        v163 = 1;
        goto LABEL_65;
      }
      WebCore::Converter<WebCore::IDLUnion<WebCore::IDLDOMString,WebCore::IDLSequence<WebCore::IDLDOMString>,WebCore::IDLDictionary<WebCore::ConstrainDOMStringParameters>>>::convert((uint64_t)v108, a2, v18);
      v19 = v111;
      if (v111)
      {
        *(_DWORD *)(a3 + 1080) = 1;
        v22 = v19;
LABEL_46:
        if (v22 != -1)
          ((void (*)(uint64_t *, _BYTE *))off_1E32BEA50[v22])(&v105, &v108[8]);
        if (v19)
          goto LABEL_258;
        goto LABEL_49;
      }
      v106[0] = 0;
      v107 = -1;
      v20 = DWORD2(v110);
      if (DWORD2(v110) == -1)
      {
        if (v155)
        {
          if (v154 == -1)
          {
LABEL_45:
            v22 = v111;
            goto LABEL_46;
          }
          ((void (*)(_BYTE **, _BYTE *))off_1E32BE9D8[v154])(&v104, v153);
          v154 = -1;
LABEL_43:
          if (v107 != -1)
            ((void (*)(_BYTE **, _BYTE *))off_1E32BE9D8[v107])(&v104, v106);
          goto LABEL_45;
        }
        v153[0] = 0;
        v154 = -1;
      }
      else
      {
        v21 = off_1E32BE9F0[DWORD2(v110)];
        ((void (*)(_BYTE **, _BYTE *, _BYTE *))v21)(&v104, v106, &v108[16]);
        v107 = v20;
        if (v155)
        {
          v104 = v153;
          ((void (*)(_BYTE **))off_1E32BEA28[v20])(&v104);
          goto LABEL_43;
        }
        v153[0] = 0;
        v154 = -1;
        ((void (*)(_BYTE **, _BYTE *, _BYTE *))v21)(&v104, v153, v106);
        v154 = v20;
      }
      v155 = 1;
      goto LABEL_43;
    }
  }
  JSC::throwTypeError();
  *(_DWORD *)(a3 + 1080) = 1;
}

void WebCore::convertDictionaryToJS(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSDOMGlobalObject *a3, const WebCore::MediaTrackConstraints *a4)
{
  uint64_t v4;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  WebCore::JSDOMGlobalObject *v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  __int128 v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  unint64_t v59;
  __int128 v60;
  unint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  unint64_t v65;
  __int128 v66;
  unint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  __int128 v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WebCore::JSDOMGlobalObject *v97;
  unsigned int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  size_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  uint64_t v117;
  uint64_t v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  uint64_t v121;
  uint64_t v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  uint64_t v131;
  uint64_t v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  uint64_t v140;
  uint64_t v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  unint64_t v144;
  unint64_t v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  WTF::StringImpl *v164;
  WTF::StringImpl *v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  WTF::StringImpl *v176;
  WTF::StringImpl *v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  WTF::StringImpl *v181;
  WTF::StringImpl *v182;
  uint64_t v183;
  uint64_t v184;
  WTF::StringImpl *v185;
  WTF::StringImpl *v186;
  unint64_t v187;
  unint64_t v188;
  WTF::StringImpl *v189;
  WTF::StringImpl *v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  WTF::StringImpl *v194;
  WTF::StringImpl *v195;
  int v196;
  JSValue v197;
  void *v198;
  JSC::VM *v199;
  WTF::StringImpl *v200;
  WTF::StringImpl *v201;
  _QWORD *v202;
  JSC::MarkedVectorBase *v203;
  WebCore::JSDOMGlobalObject *v204;
  int v205;
  unint64_t v206;
  WebCore::JSDOMGlobalObject *v207;
  JSC::VM *v208;
  WebCore::JSDOMGlobalObject *v209;
  _BYTE *v210;
  uint64_t v211;
  char v212;
  uint64_t v213;
  char v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t *v217;
  WebCore *v218;
  JSC::JSGlobalObject *v219;
  __int128 *v220;
  __int128 v221;
  _BYTE v222[72];
  uint64_t v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  uint64_t v229;

  v229 = *MEMORY[0x1E0C80C00];
  v8 = *((_QWORD *)this + 7);
  v9 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v10 = 8 * *(unsigned __int8 *)(v9 + 14);
  v11 = (WebCore::JSDOMGlobalObject *)JSC::allocateCell<JSC::JSFinalObject>(v8, v10 + 16);
  v12 = *(_DWORD *)(v9 + 8);
  *(_DWORD *)v11 = v9 >> 4;
  *((_DWORD *)v11 + 1) = v12;
  *((_QWORD *)v11 + 1) = 0;
  bzero((char *)v11 + 16, v10);
  if (*(_BYTE *)(v8 + 755))
    __dmb(0xAu);
  if (*((_BYTE *)a3 + 168))
  {
    v13 = *(_OWORD *)((char *)a3 + 152);
    v14 = *(_OWORD *)((char *)a3 + 120);
    v15 = *(_OWORD *)((char *)a3 + 136);
    *(_OWORD *)v222 = *(_OWORD *)((char *)a3 + 104);
    *(_OWORD *)&v222[16] = v14;
    *(_OWORD *)&v222[32] = v15;
    *(_OWORD *)&v222[48] = v13;
    v221 = *(_OWORD *)((char *)a3 + 88);
    if (DWORD2(v13) == -1)
      v16 = -1;
    else
      v16 = DWORD2(v13);
    if (v16 == 1)
    {
      if (DWORD2(v13) != 1)
        goto LABEL_695;
      v9 = WebCore::convertDictionaryToJS((uint64_t)this, *((_QWORD *)a2 + 82), (uint64_t)&v221 + 8);
    }
    else
    {
      if (v16)
        goto LABEL_696;
      if (DWORD2(v13))
        goto LABEL_695;
      if ((*((_QWORD *)&v221 + 1) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (v17 = (int)*((double *)&v221 + 1), *((double *)&v221 + 1) == (double)(int)v17)
        && ((_DWORD)v17 || (*((_QWORD *)&v221 + 1) & 0x8000000000000000) == 0))
      {
        v9 = v17 | 0xFFFE000000000000;
      }
      else
      {
        v9 = *((_QWORD *)&v221 + 1) + 0x2000000000000;
      }
    }
    if (*(_DWORD *)(v8 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8) & 1) != 0)
      return;
    WTF::AtomStringImpl::addLiteral();
    v18 = (WTF::StringImpl *)v221;
    *(_QWORD *)&v221 = 0;
    *((_QWORD *)&v221 + 1) = v11;
    *(_QWORD *)v222 = 0x1000000FFFFFFFFLL;
    *(_QWORD *)&v222[8] = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v11, (JSC::VM *)v8, (unint64_t)v18, v9, 0, (uint64_t)&v221);
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v19);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
  if (*((_BYTE *)a3 + 1028))
  {
    v20 = *((_QWORD *)a3 + 127);
    v21 = *((unsigned int *)a3 + 256);
    *(_QWORD *)&v221 = v20;
    DWORD2(v221) = v21;
    if ((_DWORD)v21 == -1)
      v22 = -1;
    else
      v22 = v21;
    if (v22 == 1)
    {
      if ((_DWORD)v21 != 1)
        goto LABEL_695;
      v9 = WebCore::convertDictionaryToJS((uint64_t)this, *((_QWORD *)a2 + 82), (_BYTE *)&v221 + 4);
    }
    else
    {
      if (v22)
        goto LABEL_696;
      if ((_DWORD)v21)
        goto LABEL_695;
      if ((v20 & 0xFF00000000) != 0)
        v9 = 7;
      else
        v9 = 6;
    }
    if (*(_DWORD *)(v8 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8) & 1) != 0)
      return;
    WTF::AtomStringImpl::addLiteral();
    v23 = (WTF::StringImpl *)v221;
    *(_QWORD *)&v221 = 0;
    *((_QWORD *)&v221 + 1) = v11;
    *(_QWORD *)v222 = 0x1000000FFFFFFFFLL;
    *(_QWORD *)&v222[8] = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v11, (JSC::VM *)v8, (unint64_t)v23, v9, 0, (uint64_t)&v221);
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v24);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
  if (!*((_BYTE *)a3 + 624))
  {
LABEL_49:
    if (*((_BYTE *)a3 + 800))
    {
      v9 = (unint64_t)&v221 + 8;
      BYTE8(v221) = 0;
      *(_DWORD *)&v222[56] = -1;
      v4 = *((unsigned int *)a3 + 198);
      if ((_DWORD)v4 == -1)
      {
        v4 = -1;
      }
      else
      {
        ((void (*)(__int128 *, char *, char *))off_1E32C3138[v4])(&v224, (char *)&v221 + 8, (char *)a3 + 728);
        *(_DWORD *)&v222[56] = v4;
      }
      v213 = v4;
      LOBYTE(v211) = 0;
      v212 = 0;
      *(_QWORD *)&v224 = &v213;
      *((_QWORD *)&v224 + 1) = &v211;
      *(_QWORD *)&v225 = this;
      *((_QWORD *)&v225 + 1) = a2;
      *(_QWORD *)&v226 = &v221;
      _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_12IDLDOMStringENS_11IDLSequenceIS4_EENS_13IDLDictionaryINS_28ConstrainDOMStringParametersEEEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6StringENSJ_6VectorISK_Lm0ENSJ_15CrashOnOverflowELm16ENSJ_10FastMallocEEES8_EEEEUlTyvE_JNSH_17integral_constantIlLl0EEENST_IlLl1EEENST_IlLl2EEEEEET_SX_((uint64_t)&v216, (uint64_t **)&v224);
      if (!v212)
        goto LABEL_696;
      v27 = v211;
      if (*(_DWORD *)&v222[56] != -1)
        ((void (*)(__int128 *, char *))off_1E32BE9D8[*(unsigned int *)&v222[56]])(&v224, (char *)&v221 + 8);
      if (*(_DWORD *)(v8 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8) & 1) != 0)
        return;
      WTF::AtomStringImpl::addLiteral();
      v9 = v221;
      *(_QWORD *)&v221 = 0;
      *((_QWORD *)&v221 + 1) = v11;
      *(_QWORD *)v222 = 0x1000000FFFFFFFFLL;
      *(_QWORD *)&v222[8] = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v11, (JSC::VM *)v8, v9, v27, 0, (uint64_t)&v221);
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy((WTF::StringImpl *)v9, v28);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
    if (*((_BYTE *)a3 + 540))
    {
      v29 = *((_QWORD *)a3 + 66);
      v30 = *((unsigned int *)a3 + 134);
      *(_QWORD *)&v221 = v29;
      DWORD2(v221) = v30;
      if ((_DWORD)v30 == -1)
        v31 = -1;
      else
        v31 = v30;
      if (v31 == 1)
      {
        if ((_DWORD)v30 != 1)
          goto LABEL_695;
        v9 = WebCore::convertDictionaryToJS((uint64_t)this, *((_QWORD *)a2 + 82), (_BYTE *)&v221 + 4);
      }
      else
      {
        if (v31)
          goto LABEL_696;
        if ((_DWORD)v30)
          goto LABEL_695;
        if ((v29 & 0xFF00000000) != 0)
          v9 = 7;
        else
          v9 = 6;
      }
      if (*(_DWORD *)(v8 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8) & 1) != 0)
        return;
      WTF::AtomStringImpl::addLiteral();
      v32 = (WTF::StringImpl *)v221;
      *(_QWORD *)&v221 = 0;
      *((_QWORD *)&v221 + 1) = v11;
      *(_QWORD *)v222 = 0x1000000FFFFFFFFLL;
      *(_QWORD *)&v222[8] = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v11, (JSC::VM *)v8, (unint64_t)v32, v9, 0, (uint64_t)&v221);
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v33);
        else
          *(_DWORD *)v32 -= 2;
      }
    }
    if (*((_BYTE *)a3 + 344))
    {
      v9 = (unint64_t)&v221 + 8;
      BYTE8(v221) = 0;
      *(_DWORD *)&v222[56] = -1;
      v4 = *((unsigned int *)a3 + 84);
      if ((_DWORD)v4 == -1)
      {
        v4 = -1;
      }
      else
      {
        ((void (*)(__int128 *, char *, char *))off_1E32C3138[v4])(&v224, (char *)&v221 + 8, (char *)a3 + 272);
        *(_DWORD *)&v222[56] = v4;
      }
      v213 = v4;
      LOBYTE(v211) = 0;
      v212 = 0;
      *(_QWORD *)&v224 = &v213;
      *((_QWORD *)&v224 + 1) = &v211;
      *(_QWORD *)&v225 = this;
      *((_QWORD *)&v225 + 1) = a2;
      *(_QWORD *)&v226 = &v221;
      _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_12IDLDOMStringENS_11IDLSequenceIS4_EENS_13IDLDictionaryINS_28ConstrainDOMStringParametersEEEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6StringENSJ_6VectorISK_Lm0ENSJ_15CrashOnOverflowELm16ENSJ_10FastMallocEEES8_EEEEUlTyvE_JNSH_17integral_constantIlLl0EEENST_IlLl1EEENST_IlLl2EEEEEET_SX_((uint64_t)&v216, (uint64_t **)&v224);
      if (!v212)
        goto LABEL_696;
      v34 = v211;
      if (*(_DWORD *)&v222[56] != -1)
        ((void (*)(__int128 *, char *))off_1E32BE9D8[*(unsigned int *)&v222[56]])(&v224, (char *)&v221 + 8);
      if (*(_DWORD *)(v8 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8) & 1) != 0)
        return;
      WTF::AtomStringImpl::addLiteral();
      v9 = v221;
      *(_QWORD *)&v221 = 0;
      *((_QWORD *)&v221 + 1) = v11;
      *(_QWORD *)v222 = 0x1000000FFFFFFFFLL;
      *(_QWORD *)&v222[8] = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v11, (JSC::VM *)v8, v9, v34, 0, (uint64_t)&v221);
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy((WTF::StringImpl *)v9, v35);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
    if (*((_BYTE *)a3 + 256))
    {
      v36 = *((_OWORD *)a3 + 15);
      *(_OWORD *)&v222[32] = *((_OWORD *)a3 + 14);
      *(_OWORD *)&v222[48] = v36;
      v37 = *((_OWORD *)a3 + 13);
      v38 = *((_OWORD *)a3 + 11);
      *(_OWORD *)v222 = *((_OWORD *)a3 + 12);
      *(_OWORD *)&v222[16] = v37;
      v221 = v38;
      if (DWORD2(v36) == -1)
        v39 = -1;
      else
        v39 = *(unsigned int *)&v222[56];
      if (v39 == 1)
      {
        if (DWORD2(v36) != 1)
          goto LABEL_695;
        v9 = WebCore::convertDictionaryToJS((uint64_t)this, *((_QWORD *)a2 + 82), (uint64_t)&v221 + 8);
      }
      else
      {
        if (v39)
          goto LABEL_696;
        if (DWORD2(v36))
          goto LABEL_695;
        if ((*((_QWORD *)&v221 + 1) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (v40 = (int)*((double *)&v221 + 1), *((double *)&v221 + 1) == (double)(int)v40)
          && ((_DWORD)v40 || (*((_QWORD *)&v221 + 1) & 0x8000000000000000) == 0))
        {
          v9 = v40 | 0xFFFE000000000000;
        }
        else
        {
          v9 = *((_QWORD *)&v221 + 1) + 0x2000000000000;
        }
      }
      if (*(_DWORD *)(v8 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8) & 1) != 0)
        return;
      WTF::AtomStringImpl::addLiteral();
      v41 = (WTF::StringImpl *)v221;
      *(_QWORD *)&v221 = 0;
      *((_QWORD *)&v221 + 1) = v11;
      *(_QWORD *)v222 = 0x1000000FFFFFFFFLL;
      *(_QWORD *)&v222[8] = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v11, (JSC::VM *)v8, (unint64_t)v41, v9, 0, (uint64_t)&v221);
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v42);
        else
          *(_DWORD *)v41 -= 2;
      }
    }
    if (*((_BYTE *)a3 + 712))
    {
      v9 = (unint64_t)&v221 + 8;
      BYTE8(v221) = 0;
      *(_DWORD *)&v222[56] = -1;
      v4 = *((unsigned int *)a3 + 176);
      if ((_DWORD)v4 == -1)
      {
        v4 = -1;
      }
      else
      {
        ((void (*)(__int128 *, char *, char *))off_1E32C3138[v4])(&v224, (char *)&v221 + 8, (char *)a3 + 640);
        *(_DWORD *)&v222[56] = v4;
      }
      v213 = v4;
      LOBYTE(v211) = 0;
      v212 = 0;
      *(_QWORD *)&v224 = &v213;
      *((_QWORD *)&v224 + 1) = &v211;
      *(_QWORD *)&v225 = this;
      *((_QWORD *)&v225 + 1) = a2;
      *(_QWORD *)&v226 = &v221;
      _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_12IDLDOMStringENS_11IDLSequenceIS4_EENS_13IDLDictionaryINS_28ConstrainDOMStringParametersEEEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6StringENSJ_6VectorISK_Lm0ENSJ_15CrashOnOverflowELm16ENSJ_10FastMallocEEES8_EEEEUlTyvE_JNSH_17integral_constantIlLl0EEENST_IlLl1EEENST_IlLl2EEEEEET_SX_((uint64_t)&v216, (uint64_t **)&v224);
      if (!v212)
        goto LABEL_696;
      v43 = v211;
      if (*(_DWORD *)&v222[56] != -1)
        ((void (*)(__int128 *, char *))off_1E32BE9D8[*(unsigned int *)&v222[56]])(&v224, (char *)&v221 + 8);
      if (*(_DWORD *)(v8 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8) & 1) != 0)
        return;
      WTF::AtomStringImpl::addLiteral();
      v9 = v221;
      *(_QWORD *)&v221 = 0;
      *((_QWORD *)&v221 + 1) = v11;
      *(_QWORD *)v222 = 0x1000000FFFFFFFFLL;
      *(_QWORD *)&v222[8] = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v11, (JSC::VM *)v8, v9, v43, 0, (uint64_t)&v221);
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy((WTF::StringImpl *)v9, v44);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
    if (*((_BYTE *)a3 + 84))
    {
      *(_QWORD *)&v222[16] = *(_QWORD *)((char *)a3 + 76);
      v45 = *(_OWORD *)((char *)a3 + 60);
      v221 = *(_OWORD *)((char *)a3 + 44);
      *(_OWORD *)v222 = v45;
      if (*(_DWORD *)&v222[20] == -1)
        v46 = -1;
      else
        v46 = HIDWORD(*(_QWORD *)&v222[16]);
      if (v46 == 1)
      {
        if (*(_DWORD *)&v222[20] != 1)
          goto LABEL_695;
        v9 = WebCore::convertDictionaryToJS((uint64_t)this, *((_QWORD *)a2 + 82), (unsigned int *)&v221 + 1);
      }
      else
      {
        if (v46)
          goto LABEL_696;
        if (*(_DWORD *)&v222[20])
          goto LABEL_695;
        v9 = DWORD1(v221) | 0xFFFE000000000000;
      }
      if (*(_DWORD *)(v8 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8) & 1) != 0)
        return;
      WTF::AtomStringImpl::addLiteral();
      v47 = (WTF::StringImpl *)v221;
      *(_QWORD *)&v221 = 0;
      *((_QWORD *)&v221 + 1) = v11;
      *(_QWORD *)v222 = 0x1000000FFFFFFFFLL;
      *(_QWORD *)&v222[8] = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v11, (JSC::VM *)v8, (unint64_t)v47, v9, 0, (uint64_t)&v221);
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
          WTF::StringImpl::destroy(v47, v48);
        else
          *(_DWORD *)v47 -= 2;
      }
    }
    if (*((_BYTE *)a3 + 820))
    {
      v49 = *((_QWORD *)a3 + 101);
      v50 = *((unsigned int *)a3 + 204);
      *(_QWORD *)&v221 = v49;
      DWORD2(v221) = v50;
      if ((_DWORD)v50 == -1)
        v51 = -1;
      else
        v51 = v50;
      if (v51 == 1)
      {
        if ((_DWORD)v50 != 1)
          goto LABEL_695;
        v9 = WebCore::convertDictionaryToJS((uint64_t)this, *((_QWORD *)a2 + 82), (_BYTE *)&v221 + 4);
      }
      else
      {
        if (v51)
          goto LABEL_696;
        if ((_DWORD)v50)
          goto LABEL_695;
        if ((v49 & 0xFF00000000) != 0)
          v9 = 7;
        else
          v9 = 6;
      }
      if (*(_DWORD *)(v8 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8) & 1) != 0)
        return;
      WTF::AtomStringImpl::addLiteral();
      v52 = (WTF::StringImpl *)v221;
      *(_QWORD *)&v221 = 0;
      *((_QWORD *)&v221 + 1) = v11;
      *(_QWORD *)v222 = 0x1000000FFFFFFFFLL;
      *(_QWORD *)&v222[8] = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v11, (JSC::VM *)v8, (unint64_t)v52, v9, 0, (uint64_t)&v221);
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
          WTF::StringImpl::destroy(v52, v53);
        else
          *(_DWORD *)v52 -= 2;
      }
    }
    if (*((_BYTE *)a3 + 1044))
    {
      v54 = *((_QWORD *)a3 + 129);
      v55 = *((unsigned int *)a3 + 260);
      *(_QWORD *)&v221 = v54;
      DWORD2(v221) = v55;
      if ((_DWORD)v55 == -1)
        v56 = -1;
      else
        v56 = v55;
      if (v56 == 1)
      {
        if ((_DWORD)v55 != 1)
          goto LABEL_695;
        v9 = WebCore::convertDictionaryToJS((uint64_t)this, *((_QWORD *)a2 + 82), (_BYTE *)&v221 + 4);
      }
      else
      {
        if (v56)
          goto LABEL_696;
        if ((_DWORD)v55)
          goto LABEL_695;
        if ((v54 & 0xFF00000000) != 0)
          v9 = 7;
        else
          v9 = 6;
      }
      if (*(_DWORD *)(v8 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8) & 1) != 0)
        return;
      WTF::AtomStringImpl::addLiteral();
      v57 = (WTF::StringImpl *)v221;
      *(_QWORD *)&v221 = 0;
      *((_QWORD *)&v221 + 1) = v11;
      *(_QWORD *)v222 = 0x1000000FFFFFFFFLL;
      *(_QWORD *)&v222[8] = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v11, (JSC::VM *)v8, (unint64_t)v57, v9, 0, (uint64_t)&v221);
      if (v57)
      {
        if (*(_DWORD *)v57 == 2)
          WTF::StringImpl::destroy(v57, v58);
        else
          *(_DWORD *)v57 -= 2;
      }
    }
    if (*((_BYTE *)a3 + 480))
    {
      v59 = *((_QWORD *)a3 + 59);
      *(_QWORD *)&v222[16] = v59;
      v60 = *(_OWORD *)((char *)a3 + 456);
      v221 = *(_OWORD *)((char *)a3 + 440);
      *(_OWORD *)v222 = v60;
      v61 = HIDWORD(v59);
      if (HIDWORD(v59) == -1)
        v62 = -1;
      else
        v62 = HIDWORD(v59);
      if (v62 == 1)
      {
        if ((_DWORD)v61 != 1)
          goto LABEL_695;
        v9 = WebCore::convertDictionaryToJS((uint64_t)this, *((_QWORD *)a2 + 82), (unsigned int *)&v221 + 1);
      }
      else
      {
        if (v62)
          goto LABEL_696;
        if ((_DWORD)v61)
          goto LABEL_695;
        v9 = DWORD1(v221) | 0xFFFE000000000000;
      }
      if (*(_DWORD *)(v8 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8) & 1) != 0)
        return;
      WTF::AtomStringImpl::addLiteral();
      v63 = (WTF::StringImpl *)v221;
      *(_QWORD *)&v221 = 0;
      *((_QWORD *)&v221 + 1) = v11;
      *(_QWORD *)v222 = 0x1000000FFFFFFFFLL;
      *(_QWORD *)&v222[8] = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v11, (JSC::VM *)v8, (unint64_t)v63, v9, 0, (uint64_t)&v221);
      if (v63)
      {
        if (*(_DWORD *)v63 == 2)
          WTF::StringImpl::destroy(v63, v64);
        else
          *(_DWORD *)v63 -= 2;
      }
    }
    if (*((_BYTE *)a3 + 524))
    {
      v65 = *(_QWORD *)((char *)a3 + 516);
      *(_QWORD *)&v222[16] = v65;
      v66 = *(_OWORD *)((char *)a3 + 500);
      v221 = *(_OWORD *)((char *)a3 + 484);
      *(_OWORD *)v222 = v66;
      v67 = HIDWORD(v65);
      if (HIDWORD(v65) == -1)
        v68 = -1;
      else
        v68 = HIDWORD(v65);
      if (v68 == 1)
      {
        if ((_DWORD)v67 != 1)
          goto LABEL_695;
        v9 = WebCore::convertDictionaryToJS((uint64_t)this, *((_QWORD *)a2 + 82), (unsigned int *)&v221 + 1);
      }
      else
      {
        if (v68)
          goto LABEL_696;
        if ((_DWORD)v67)
          goto LABEL_695;
        v9 = DWORD1(v221) | 0xFFFE000000000000;
      }
      if (*(_DWORD *)(v8 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8) & 1) != 0)
        return;
      WTF::AtomStringImpl::addLiteral();
      v69 = (WTF::StringImpl *)v221;
      *(_QWORD *)&v221 = 0;
      *((_QWORD *)&v221 + 1) = v11;
      *(_QWORD *)v222 = 0x1000000FFFFFFFFLL;
      *(_QWORD *)&v222[8] = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v11, (JSC::VM *)v8, (unint64_t)v69, v9, 0, (uint64_t)&v221);
      if (v69)
      {
        if (*(_DWORD *)v69 == 2)
          WTF::StringImpl::destroy(v69, v70);
        else
          *(_DWORD *)v69 -= 2;
      }
    }
    if (*((_BYTE *)a3 + 1012))
    {
      v71 = *((_QWORD *)a3 + 125);
      v72 = *((unsigned int *)a3 + 252);
      *(_QWORD *)&v221 = v71;
      DWORD2(v221) = v72;
      if ((_DWORD)v72 == -1)
        v73 = -1;
      else
        v73 = v72;
      if (v73 == 1)
      {
        if ((_DWORD)v72 != 1)
          goto LABEL_695;
        v9 = WebCore::convertDictionaryToJS((uint64_t)this, *((_QWORD *)a2 + 82), (_BYTE *)&v221 + 4);
      }
      else
      {
        if (v73)
          goto LABEL_696;
        if ((_DWORD)v72)
          goto LABEL_695;
        if ((v71 & 0xFF00000000) != 0)
          v9 = 7;
        else
          v9 = 6;
      }
      if (*(_DWORD *)(v8 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8) & 1) != 0)
        return;
      WTF::AtomStringImpl::addLiteral();
      v74 = (WTF::StringImpl *)v221;
      *(_QWORD *)&v221 = 0;
      *((_QWORD *)&v221 + 1) = v11;
      *(_QWORD *)v222 = 0x1000000FFFFFFFFLL;
      *(_QWORD *)&v222[8] = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v11, (JSC::VM *)v8, (unint64_t)v74, v9, 0, (uint64_t)&v221);
      if (v74)
      {
        if (*(_DWORD *)v74 == 2)
          WTF::StringImpl::destroy(v74, v75);
        else
          *(_DWORD *)v74 -= 2;
      }
    }
    if (*((_BYTE *)a3 + 432))
    {
      v76 = *((_OWORD *)a3 + 26);
      *(_OWORD *)&v222[32] = *((_OWORD *)a3 + 25);
      *(_OWORD *)&v222[48] = v76;
      v77 = *((_OWORD *)a3 + 24);
      v78 = *((_OWORD *)a3 + 22);
      *(_OWORD *)v222 = *((_OWORD *)a3 + 23);
      *(_OWORD *)&v222[16] = v77;
      v221 = v78;
      if (DWORD2(v76) == -1)
        v79 = -1;
      else
        v79 = *(unsigned int *)&v222[56];
      if (v79 == 1)
      {
        if (DWORD2(v76) != 1)
          goto LABEL_695;
        v9 = WebCore::convertDictionaryToJS((uint64_t)this, *((_QWORD *)a2 + 82), (uint64_t)&v221 + 8);
      }
      else
      {
        if (v79)
          goto LABEL_696;
        if (DWORD2(v76))
          goto LABEL_695;
        if ((*((_QWORD *)&v221 + 1) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (v80 = (int)*((double *)&v221 + 1), *((double *)&v221 + 1) == (double)(int)v80)
          && ((_DWORD)v80 || (*((_QWORD *)&v221 + 1) & 0x8000000000000000) == 0))
        {
          v9 = v80 | 0xFFFE000000000000;
        }
        else
        {
          v9 = *((_QWORD *)&v221 + 1) + 0x2000000000000;
        }
      }
      if (*(_DWORD *)(v8 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8) & 1) != 0)
        return;
      WTF::AtomStringImpl::addLiteral();
      v81 = (WTF::StringImpl *)v221;
      *(_QWORD *)&v221 = 0;
      *((_QWORD *)&v221 + 1) = v11;
      *(_QWORD *)v222 = 0x1000000FFFFFFFFLL;
      *(_QWORD *)&v222[8] = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v11, (JSC::VM *)v8, (unint64_t)v81, v9, 0, (uint64_t)&v221);
      if (v81)
      {
        if (*(_DWORD *)v81 == 2)
          WTF::StringImpl::destroy(v81, v82);
        else
          *(_DWORD *)v81 -= 2;
      }
    }
    if (*((_BYTE *)a3 + 904))
    {
      v9 = (unint64_t)&v221 + 8;
      BYTE8(v221) = 0;
      *(_DWORD *)&v222[56] = -1;
      v4 = *((unsigned int *)a3 + 224);
      if ((_DWORD)v4 == -1)
      {
        v4 = -1;
      }
      else
      {
        ((void (*)(__int128 *, char *, char *))off_1E32C3138[v4])(&v224, (char *)&v221 + 8, (char *)a3 + 832);
        *(_DWORD *)&v222[56] = v4;
      }
      v213 = v4;
      LOBYTE(v211) = 0;
      v212 = 0;
      *(_QWORD *)&v224 = &v213;
      *((_QWORD *)&v224 + 1) = &v211;
      *(_QWORD *)&v225 = this;
      *((_QWORD *)&v225 + 1) = a2;
      *(_QWORD *)&v226 = &v221;
      _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_12IDLDOMStringENS_11IDLSequenceIS4_EENS_13IDLDictionaryINS_28ConstrainDOMStringParametersEEEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6StringENSJ_6VectorISK_Lm0ENSJ_15CrashOnOverflowELm16ENSJ_10FastMallocEEES8_EEEEUlTyvE_JNSH_17integral_constantIlLl0EEENST_IlLl1EEENST_IlLl2EEEEEET_SX_((uint64_t)&v216, (uint64_t **)&v224);
      if (!v212)
        goto LABEL_696;
      v83 = v211;
      if (*(_DWORD *)&v222[56] != -1)
        ((void (*)(__int128 *, char *))off_1E32BE9D8[*(unsigned int *)&v222[56]])(&v224, (char *)&v221 + 8);
      if (*(_DWORD *)(v8 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8) & 1) != 0)
        return;
      WTF::AtomStringImpl::addLiteral();
      v9 = v221;
      *(_QWORD *)&v221 = 0;
      *((_QWORD *)&v221 + 1) = v11;
      *(_QWORD *)v222 = 0x1000000FFFFFFFFLL;
      *(_QWORD *)&v222[8] = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v11, (JSC::VM *)v8, v9, v83, 0, (uint64_t)&v221);
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy((WTF::StringImpl *)v9, v84);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
    if (!*((_BYTE *)a3 + 40))
    {
LABEL_251:
      if (!*((_BYTE *)a3 + 992))
      {
LABEL_270:
        if (!*((_BYTE *)a3 + 1064))
          return;
        LODWORD(v4) = *((_DWORD *)a3 + 265);
        if ((_DWORD)v4)
        {
          if (v4 >= 0x3E88CC)
          {
            __break(0xC471u);
            return;
          }
          v97 = (WebCore::JSDOMGlobalObject *)WTF::fastMalloc((WTF *)(1048 * v4));
          v98 = *((_DWORD *)a3 + 265);
          if (v98)
          {
            v99 = v4;
            v100 = 0;
            v101 = *((_QWORD *)a3 + 131);
            v102 = 1048 * v98;
            a3 = v97;
            do
            {
              WebCore::MediaTrackConstraintSet::MediaTrackConstraintSet((uint64_t)a3 + v100, v101 + v100);
              v100 += 1048;
            }
            while (v102 != v100);
            LODWORD(v4) = v99;
          }
          else
          {
            a3 = v97;
          }
        }
        else
        {
          a3 = 0;
        }
        v208 = (JSC::VM *)*((_QWORD *)this + 7);
        LOBYTE(v221) = 0;
        v203 = (JSC::MarkedVectorBase *)((char *)&v221 + 8);
        *((_QWORD *)&v221 + 1) = 0x800000000;
        memset(&v222[8], 0, 64);
        v210 = &v222[16];
        *(_QWORD *)v222 = &v222[16];
        v223 = 0;
        if (v4 >= 9)
        {
          LOBYTE(v221) = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)((char *)&v221 + 8)) == 1;
          v209 = (WebCore::JSDOMGlobalObject *)((char *)a3 + 1048 * v4);
        }
        else
        {
          v209 = (WebCore::JSDOMGlobalObject *)((char *)a3 + 1048 * v4);
          if (!(_DWORD)v4)
          {
LABEL_618:
            *(_QWORD *)&v224 = *(_QWORD *)v222;
            DWORD2(v224) = DWORD2(v221);
            v199 = (JSC::VM *)*((_QWORD *)a2 + 7);
            if (*((_DWORD *)v199 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v199) & 1) != 0)
              v9 = 0;
            else
              v9 = JSC::constructArray();
            goto LABEL_620;
          }
        }
        v205 = v4;
        v206 = v8;
        v207 = v11;
        v4 = (uint64_t)&v224;
        v11 = a3;
        a3 = (WebCore::JSDOMGlobalObject *)((char *)&v224 + 8);
        v204 = v11;
        while (1)
        {
          v9 = *((_QWORD *)this + 7);
          v103 = JSC::StructureCache::emptyObjectStructureForPrototype();
          v104 = 8 * *(unsigned __int8 *)(v103 + 14);
          v8 = JSC::allocateCell<JSC::JSFinalObject>(v9, v104 + 16);
          v105 = *(_DWORD *)(v103 + 8);
          *(_DWORD *)v8 = v103 >> 4;
          *(_DWORD *)(v8 + 4) = v105;
          *(_QWORD *)(v8 + 8) = 0;
          bzero((void *)(v8 + 16), v104);
          if (*(_BYTE *)(v9 + 755))
            __dmb(0xAu);
          if (*((_BYTE *)v11 + 168))
          {
            v228 = *(_OWORD *)((char *)v11 + 152);
            v225 = *(_OWORD *)((char *)v11 + 104);
            v226 = *(_OWORD *)((char *)v11 + 120);
            v227 = *(_OWORD *)((char *)v11 + 136);
            v224 = *(_OWORD *)((char *)v11 + 88);
            if (DWORD2(v228) == -1)
              v106 = -1;
            else
              v106 = DWORD2(v228);
            if (v106 == 1)
            {
              if (DWORD2(v228) != 1)
                goto LABEL_695;
              v108 = WebCore::convertDictionaryToJS((uint64_t)this, *((_QWORD *)a2 + 82), (uint64_t)&v224 + 8);
            }
            else
            {
              if (v106)
                goto LABEL_696;
              if (DWORD2(v228))
                goto LABEL_695;
              if ((*((_QWORD *)&v224 + 1) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
                && (v107 = (int)*((double *)&v224 + 1), *((double *)&v224 + 1) == (double)(int)v107)
                && ((_DWORD)v107 || (*((_QWORD *)&v224 + 1) & 0x8000000000000000) == 0))
              {
                v108 = v107 | 0xFFFE000000000000;
              }
              else
              {
                v108 = *((_QWORD *)&v224 + 1) + 0x2000000000000;
              }
            }
            if (*(_DWORD *)(v9 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
              goto LABEL_615;
            WTF::AtomStringImpl::addLiteral();
            v109 = (WTF::StringImpl *)v224;
            *(_QWORD *)&v224 = 0;
            *((_QWORD *)&v224 + 1) = v8;
            v225 = 0x1000000FFFFFFFFuLL;
            JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v9, (unint64_t)v109, v108, 0, (uint64_t)&v224);
            if (v109)
            {
              if (*(_DWORD *)v109 == 2)
                WTF::StringImpl::destroy(v109, v110);
              else
                *(_DWORD *)v109 -= 2;
            }
          }
          if (*((_BYTE *)v11 + 1028))
          {
            v111 = *((_QWORD *)v11 + 127);
            v112 = *((unsigned int *)v11 + 256);
            *(_QWORD *)&v224 = v111;
            DWORD2(v224) = v112;
            if ((_DWORD)v112 == -1)
              v113 = -1;
            else
              v113 = v112;
            if (v113 == 1)
            {
              if ((_DWORD)v112 != 1)
                goto LABEL_695;
              v114 = WebCore::convertDictionaryToJS((uint64_t)this, *((_QWORD *)a2 + 82), (_BYTE *)&v224 + 4);
            }
            else
            {
              if (v113)
                goto LABEL_696;
              if ((_DWORD)v112)
                goto LABEL_695;
              if ((v111 & 0xFF00000000) != 0)
                v114 = 7;
              else
                v114 = 6;
            }
            if (*(_DWORD *)(v9 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
              goto LABEL_615;
            WTF::AtomStringImpl::addLiteral();
            v115 = (WTF::StringImpl *)v224;
            *(_QWORD *)&v224 = 0;
            *((_QWORD *)&v224 + 1) = v8;
            v225 = 0x1000000FFFFFFFFuLL;
            JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v9, (unint64_t)v115, v114, 0, (uint64_t)&v224);
            if (v115)
            {
              if (*(_DWORD *)v115 == 2)
                WTF::StringImpl::destroy(v115, v116);
              else
                *(_DWORD *)v115 -= 2;
            }
          }
          if (*((_BYTE *)v11 + 624))
          {
            BYTE8(v224) = 0;
            DWORD2(v228) = -1;
            v117 = *((unsigned int *)v11 + 154);
            if ((_DWORD)v117 == -1)
            {
              v117 = -1;
            }
            else
            {
              ((void (*)(uint64_t **, char *, char *))off_1E32C3138[v117])(&v216, (char *)&v224 + 8, (char *)v11 + 552);
              DWORD2(v228) = v117;
            }
            LOBYTE(v213) = 0;
            v214 = 0;
            v215 = v117;
            v216 = &v215;
            v217 = &v213;
            v218 = this;
            v219 = a2;
            v220 = &v224;
            _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_12IDLDOMStringENS_11IDLSequenceIS4_EENS_13IDLDictionaryINS_28ConstrainDOMStringParametersEEEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6StringENSJ_6VectorISK_Lm0ENSJ_15CrashOnOverflowELm16ENSJ_10FastMallocEEES8_EEEEUlTyvE_JNSH_17integral_constantIlLl0EEENST_IlLl1EEENST_IlLl2EEEEEET_SX_((uint64_t)&v211, &v216);
            if (!v214)
              goto LABEL_696;
            v118 = v213;
            if (DWORD2(v228) != -1)
              ((void (*)(uint64_t **, char *))off_1E32BE9D8[DWORD2(v228)])(&v216, (char *)&v224 + 8);
            if (*(_DWORD *)(v9 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
              goto LABEL_615;
            WTF::AtomStringImpl::addLiteral();
            v119 = (WTF::StringImpl *)v224;
            *(_QWORD *)&v224 = 0;
            *((_QWORD *)&v224 + 1) = v8;
            v225 = 0x1000000FFFFFFFFuLL;
            JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v9, (unint64_t)v119, v118, 0, (uint64_t)&v224);
            if (v119)
            {
              if (*(_DWORD *)v119 == 2)
                WTF::StringImpl::destroy(v119, v120);
              else
                *(_DWORD *)v119 -= 2;
            }
          }
          if (*((_BYTE *)v11 + 800))
          {
            BYTE8(v224) = 0;
            DWORD2(v228) = -1;
            v121 = *((unsigned int *)v11 + 198);
            if ((_DWORD)v121 == -1)
            {
              v121 = -1;
            }
            else
            {
              ((void (*)(uint64_t **, char *, char *))off_1E32C3138[v121])(&v216, (char *)&v224 + 8, (char *)v11 + 728);
              DWORD2(v228) = v121;
            }
            LOBYTE(v213) = 0;
            v214 = 0;
            v215 = v121;
            v216 = &v215;
            v217 = &v213;
            v218 = this;
            v219 = a2;
            v220 = &v224;
            _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_12IDLDOMStringENS_11IDLSequenceIS4_EENS_13IDLDictionaryINS_28ConstrainDOMStringParametersEEEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6StringENSJ_6VectorISK_Lm0ENSJ_15CrashOnOverflowELm16ENSJ_10FastMallocEEES8_EEEEUlTyvE_JNSH_17integral_constantIlLl0EEENST_IlLl1EEENST_IlLl2EEEEEET_SX_((uint64_t)&v211, &v216);
            if (!v214)
              goto LABEL_696;
            v122 = v213;
            if (DWORD2(v228) != -1)
              ((void (*)(uint64_t **, char *))off_1E32BE9D8[DWORD2(v228)])(&v216, (char *)&v224 + 8);
            if (*(_DWORD *)(v9 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
              goto LABEL_615;
            WTF::AtomStringImpl::addLiteral();
            v123 = (WTF::StringImpl *)v224;
            *(_QWORD *)&v224 = 0;
            *((_QWORD *)&v224 + 1) = v8;
            v225 = 0x1000000FFFFFFFFuLL;
            JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v9, (unint64_t)v123, v122, 0, (uint64_t)&v224);
            if (v123)
            {
              if (*(_DWORD *)v123 == 2)
                WTF::StringImpl::destroy(v123, v124);
              else
                *(_DWORD *)v123 -= 2;
            }
          }
          if (*((_BYTE *)v11 + 540))
          {
            v125 = *((_QWORD *)v11 + 66);
            v126 = *((unsigned int *)v11 + 134);
            *(_QWORD *)&v224 = v125;
            DWORD2(v224) = v126;
            if ((_DWORD)v126 == -1)
              v127 = -1;
            else
              v127 = v126;
            if (v127 == 1)
            {
              if ((_DWORD)v126 != 1)
                goto LABEL_695;
              v128 = WebCore::convertDictionaryToJS((uint64_t)this, *((_QWORD *)a2 + 82), (_BYTE *)&v224 + 4);
            }
            else
            {
              if (v127)
                goto LABEL_696;
              if ((_DWORD)v126)
                goto LABEL_695;
              if ((v125 & 0xFF00000000) != 0)
                v128 = 7;
              else
                v128 = 6;
            }
            if (*(_DWORD *)(v9 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
              goto LABEL_615;
            WTF::AtomStringImpl::addLiteral();
            v129 = (WTF::StringImpl *)v224;
            *(_QWORD *)&v224 = 0;
            *((_QWORD *)&v224 + 1) = v8;
            v225 = 0x1000000FFFFFFFFuLL;
            JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v9, (unint64_t)v129, v128, 0, (uint64_t)&v224);
            if (v129)
            {
              if (*(_DWORD *)v129 == 2)
                WTF::StringImpl::destroy(v129, v130);
              else
                *(_DWORD *)v129 -= 2;
            }
          }
          if (*((_BYTE *)v11 + 344))
          {
            BYTE8(v224) = 0;
            DWORD2(v228) = -1;
            v131 = *((unsigned int *)v11 + 84);
            if ((_DWORD)v131 == -1)
            {
              v131 = -1;
            }
            else
            {
              ((void (*)(uint64_t **, char *, char *))off_1E32C3138[v131])(&v216, (char *)&v224 + 8, (char *)v11 + 272);
              DWORD2(v228) = v131;
            }
            LOBYTE(v213) = 0;
            v214 = 0;
            v215 = v131;
            v216 = &v215;
            v217 = &v213;
            v218 = this;
            v219 = a2;
            v220 = &v224;
            _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_12IDLDOMStringENS_11IDLSequenceIS4_EENS_13IDLDictionaryINS_28ConstrainDOMStringParametersEEEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6StringENSJ_6VectorISK_Lm0ENSJ_15CrashOnOverflowELm16ENSJ_10FastMallocEEES8_EEEEUlTyvE_JNSH_17integral_constantIlLl0EEENST_IlLl1EEENST_IlLl2EEEEEET_SX_((uint64_t)&v211, &v216);
            if (!v214)
              goto LABEL_696;
            v132 = v213;
            if (DWORD2(v228) != -1)
              ((void (*)(uint64_t **, char *))off_1E32BE9D8[DWORD2(v228)])(&v216, (char *)&v224 + 8);
            if (*(_DWORD *)(v9 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
              goto LABEL_615;
            WTF::AtomStringImpl::addLiteral();
            v133 = (WTF::StringImpl *)v224;
            *(_QWORD *)&v224 = 0;
            *((_QWORD *)&v224 + 1) = v8;
            v225 = 0x1000000FFFFFFFFuLL;
            JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v9, (unint64_t)v133, v132, 0, (uint64_t)&v224);
            if (v133)
            {
              if (*(_DWORD *)v133 == 2)
                WTF::StringImpl::destroy(v133, v134);
              else
                *(_DWORD *)v133 -= 2;
            }
          }
          if (*((_BYTE *)v11 + 256))
          {
            v228 = *((_OWORD *)v11 + 15);
            v225 = *((_OWORD *)v11 + 12);
            v226 = *((_OWORD *)v11 + 13);
            v227 = *((_OWORD *)v11 + 14);
            v224 = *((_OWORD *)v11 + 11);
            if (DWORD2(v228) == -1)
              v135 = -1;
            else
              v135 = DWORD2(v228);
            if (v135 == 1)
            {
              if (DWORD2(v228) != 1)
                goto LABEL_695;
              v137 = WebCore::convertDictionaryToJS((uint64_t)this, *((_QWORD *)a2 + 82), (uint64_t)&v224 + 8);
            }
            else
            {
              if (v135)
                goto LABEL_696;
              if (DWORD2(v228))
                goto LABEL_695;
              if ((*((_QWORD *)&v224 + 1) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
                && (v136 = (int)*((double *)&v224 + 1), *((double *)&v224 + 1) == (double)(int)v136)
                && ((_DWORD)v136 || (*((_QWORD *)&v224 + 1) & 0x8000000000000000) == 0))
              {
                v137 = v136 | 0xFFFE000000000000;
              }
              else
              {
                v137 = *((_QWORD *)&v224 + 1) + 0x2000000000000;
              }
            }
            if (*(_DWORD *)(v9 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
              goto LABEL_615;
            WTF::AtomStringImpl::addLiteral();
            v138 = (WTF::StringImpl *)v224;
            *(_QWORD *)&v224 = 0;
            *((_QWORD *)&v224 + 1) = v8;
            v225 = 0x1000000FFFFFFFFuLL;
            JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v9, (unint64_t)v138, v137, 0, (uint64_t)&v224);
            if (v138)
            {
              if (*(_DWORD *)v138 == 2)
                WTF::StringImpl::destroy(v138, v139);
              else
                *(_DWORD *)v138 -= 2;
            }
          }
          if (*((_BYTE *)v11 + 712))
          {
            BYTE8(v224) = 0;
            DWORD2(v228) = -1;
            v140 = *((unsigned int *)v11 + 176);
            if ((_DWORD)v140 == -1)
            {
              v140 = -1;
            }
            else
            {
              ((void (*)(uint64_t **, char *, char *))off_1E32C3138[v140])(&v216, (char *)&v224 + 8, (char *)v11 + 640);
              DWORD2(v228) = v140;
            }
            LOBYTE(v213) = 0;
            v214 = 0;
            v215 = v140;
            v216 = &v215;
            v217 = &v213;
            v218 = this;
            v219 = a2;
            v220 = &v224;
            _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_12IDLDOMStringENS_11IDLSequenceIS4_EENS_13IDLDictionaryINS_28ConstrainDOMStringParametersEEEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6StringENSJ_6VectorISK_Lm0ENSJ_15CrashOnOverflowELm16ENSJ_10FastMallocEEES8_EEEEUlTyvE_JNSH_17integral_constantIlLl0EEENST_IlLl1EEENST_IlLl2EEEEEET_SX_((uint64_t)&v211, &v216);
            if (!v214)
              goto LABEL_696;
            v141 = v213;
            if (DWORD2(v228) != -1)
              ((void (*)(uint64_t **, char *))off_1E32BE9D8[DWORD2(v228)])(&v216, (char *)&v224 + 8);
            if (*(_DWORD *)(v9 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
              goto LABEL_615;
            WTF::AtomStringImpl::addLiteral();
            v142 = (WTF::StringImpl *)v224;
            *(_QWORD *)&v224 = 0;
            *((_QWORD *)&v224 + 1) = v8;
            v225 = 0x1000000FFFFFFFFuLL;
            JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v9, (unint64_t)v142, v141, 0, (uint64_t)&v224);
            if (v142)
            {
              if (*(_DWORD *)v142 == 2)
                WTF::StringImpl::destroy(v142, v143);
              else
                *(_DWORD *)v142 -= 2;
            }
          }
          if (*((_BYTE *)v11 + 84))
          {
            *(_QWORD *)&v226 = *(_QWORD *)((char *)v11 + 76);
            v224 = *(_OWORD *)((char *)v11 + 44);
            v225 = *(_OWORD *)((char *)v11 + 60);
            if (DWORD1(v226) == -1)
              v144 = -1;
            else
              v144 = DWORD1(v226);
            if (v144 == 1)
            {
              if (DWORD1(v226) != 1)
                goto LABEL_695;
              v145 = WebCore::convertDictionaryToJS((uint64_t)this, *((_QWORD *)a2 + 82), (unsigned int *)&v224 + 1);
            }
            else
            {
              if (v144)
                goto LABEL_696;
              if (DWORD1(v226))
                goto LABEL_695;
              v145 = DWORD1(v224) | 0xFFFE000000000000;
            }
            if (*(_DWORD *)(v9 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
              goto LABEL_615;
            WTF::AtomStringImpl::addLiteral();
            v146 = (WTF::StringImpl *)v224;
            *(_QWORD *)&v224 = 0;
            *((_QWORD *)&v224 + 1) = v8;
            v225 = 0x1000000FFFFFFFFuLL;
            JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v9, (unint64_t)v146, v145, 0, (uint64_t)&v224);
            if (v146)
            {
              if (*(_DWORD *)v146 == 2)
                WTF::StringImpl::destroy(v146, v147);
              else
                *(_DWORD *)v146 -= 2;
            }
          }
          if (*((_BYTE *)v11 + 820))
          {
            v148 = *((_QWORD *)v11 + 101);
            v149 = *((unsigned int *)v11 + 204);
            *(_QWORD *)&v224 = v148;
            DWORD2(v224) = v149;
            if ((_DWORD)v149 == -1)
              v150 = -1;
            else
              v150 = v149;
            if (v150 == 1)
            {
              if ((_DWORD)v149 != 1)
                goto LABEL_695;
              v151 = WebCore::convertDictionaryToJS((uint64_t)this, *((_QWORD *)a2 + 82), (_BYTE *)&v224 + 4);
            }
            else
            {
              if (v150)
                goto LABEL_696;
              if ((_DWORD)v149)
                goto LABEL_695;
              if ((v148 & 0xFF00000000) != 0)
                v151 = 7;
              else
                v151 = 6;
            }
            if (*(_DWORD *)(v9 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
              goto LABEL_615;
            WTF::AtomStringImpl::addLiteral();
            v152 = (WTF::StringImpl *)v224;
            *(_QWORD *)&v224 = 0;
            *((_QWORD *)&v224 + 1) = v8;
            v225 = 0x1000000FFFFFFFFuLL;
            JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v9, (unint64_t)v152, v151, 0, (uint64_t)&v224);
            if (v152)
            {
              if (*(_DWORD *)v152 == 2)
                WTF::StringImpl::destroy(v152, v153);
              else
                *(_DWORD *)v152 -= 2;
            }
          }
          if (*((_BYTE *)v11 + 1044))
          {
            v154 = *((_QWORD *)v11 + 129);
            v155 = *((unsigned int *)v11 + 260);
            *(_QWORD *)&v224 = v154;
            DWORD2(v224) = v155;
            if ((_DWORD)v155 == -1)
              v156 = -1;
            else
              v156 = v155;
            if (v156 == 1)
            {
              if ((_DWORD)v155 != 1)
                goto LABEL_695;
              v157 = WebCore::convertDictionaryToJS((uint64_t)this, *((_QWORD *)a2 + 82), (_BYTE *)&v224 + 4);
            }
            else
            {
              if (v156)
                goto LABEL_696;
              if ((_DWORD)v155)
                goto LABEL_695;
              if ((v154 & 0xFF00000000) != 0)
                v157 = 7;
              else
                v157 = 6;
            }
            if (*(_DWORD *)(v9 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
              goto LABEL_615;
            WTF::AtomStringImpl::addLiteral();
            v158 = (WTF::StringImpl *)v224;
            *(_QWORD *)&v224 = 0;
            *((_QWORD *)&v224 + 1) = v8;
            v225 = 0x1000000FFFFFFFFuLL;
            JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v9, (unint64_t)v158, v157, 0, (uint64_t)&v224);
            if (v158)
            {
              if (*(_DWORD *)v158 == 2)
                WTF::StringImpl::destroy(v158, v159);
              else
                *(_DWORD *)v158 -= 2;
            }
          }
          if (*((_BYTE *)v11 + 480))
          {
            v160 = *((_QWORD *)v11 + 59);
            *(_QWORD *)&v226 = v160;
            v224 = *(_OWORD *)((char *)v11 + 440);
            v225 = *(_OWORD *)((char *)v11 + 456);
            v161 = HIDWORD(v160);
            if (HIDWORD(v160) == -1)
              v162 = -1;
            else
              v162 = HIDWORD(v160);
            if (v162 == 1)
            {
              if ((_DWORD)v161 != 1)
                goto LABEL_695;
              v163 = WebCore::convertDictionaryToJS((uint64_t)this, *((_QWORD *)a2 + 82), (unsigned int *)&v224 + 1);
            }
            else
            {
              if (v162)
                goto LABEL_696;
              if ((_DWORD)v161)
                goto LABEL_695;
              v163 = DWORD1(v224) | 0xFFFE000000000000;
            }
            if (*(_DWORD *)(v9 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
              goto LABEL_615;
            WTF::AtomStringImpl::addLiteral();
            v164 = (WTF::StringImpl *)v224;
            *(_QWORD *)&v224 = 0;
            *((_QWORD *)&v224 + 1) = v8;
            v225 = 0x1000000FFFFFFFFuLL;
            JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v9, (unint64_t)v164, v163, 0, (uint64_t)&v224);
            if (v164)
            {
              if (*(_DWORD *)v164 == 2)
                WTF::StringImpl::destroy(v164, v165);
              else
                *(_DWORD *)v164 -= 2;
            }
          }
          if (*((_BYTE *)v11 + 524))
          {
            v166 = *(_QWORD *)((char *)v11 + 516);
            *(_QWORD *)&v226 = v166;
            v224 = *(_OWORD *)((char *)v11 + 484);
            v225 = *(_OWORD *)((char *)v11 + 500);
            v167 = HIDWORD(v166);
            if (HIDWORD(v166) == -1)
              v168 = -1;
            else
              v168 = HIDWORD(v166);
            if (v168 == 1)
            {
              if ((_DWORD)v167 != 1)
                goto LABEL_695;
              v169 = WebCore::convertDictionaryToJS((uint64_t)this, *((_QWORD *)a2 + 82), (unsigned int *)&v224 + 1);
            }
            else
            {
              if (v168)
                goto LABEL_696;
              if ((_DWORD)v167)
                goto LABEL_695;
              v169 = DWORD1(v224) | 0xFFFE000000000000;
            }
            if (*(_DWORD *)(v9 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
              goto LABEL_615;
            WTF::AtomStringImpl::addLiteral();
            v170 = (WTF::StringImpl *)v224;
            *(_QWORD *)&v224 = 0;
            *((_QWORD *)&v224 + 1) = v8;
            v225 = 0x1000000FFFFFFFFuLL;
            JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v9, (unint64_t)v170, v169, 0, (uint64_t)&v224);
            if (v170)
            {
              if (*(_DWORD *)v170 == 2)
                WTF::StringImpl::destroy(v170, v171);
              else
                *(_DWORD *)v170 -= 2;
            }
          }
          if (*((_BYTE *)v11 + 1012))
          {
            v172 = *((_QWORD *)v11 + 125);
            v173 = *((unsigned int *)v11 + 252);
            *(_QWORD *)&v224 = v172;
            DWORD2(v224) = v173;
            if ((_DWORD)v173 == -1)
              v174 = -1;
            else
              v174 = v173;
            if (v174 == 1)
            {
              if ((_DWORD)v173 != 1)
                goto LABEL_695;
              v175 = WebCore::convertDictionaryToJS((uint64_t)this, *((_QWORD *)a2 + 82), (_BYTE *)&v224 + 4);
            }
            else
            {
              if (v174)
                goto LABEL_696;
              if ((_DWORD)v173)
                goto LABEL_695;
              if ((v172 & 0xFF00000000) != 0)
                v175 = 7;
              else
                v175 = 6;
            }
            if (*(_DWORD *)(v9 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
              goto LABEL_615;
            WTF::AtomStringImpl::addLiteral();
            v176 = (WTF::StringImpl *)v224;
            *(_QWORD *)&v224 = 0;
            *((_QWORD *)&v224 + 1) = v8;
            v225 = 0x1000000FFFFFFFFuLL;
            JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v9, (unint64_t)v176, v175, 0, (uint64_t)&v224);
            if (v176)
            {
              if (*(_DWORD *)v176 == 2)
                WTF::StringImpl::destroy(v176, v177);
              else
                *(_DWORD *)v176 -= 2;
            }
          }
          if (*((_BYTE *)v11 + 432))
          {
            v228 = *((_OWORD *)v11 + 26);
            v225 = *((_OWORD *)v11 + 23);
            v226 = *((_OWORD *)v11 + 24);
            v227 = *((_OWORD *)v11 + 25);
            v224 = *((_OWORD *)v11 + 22);
            if (DWORD2(v228) == -1)
              v178 = -1;
            else
              v178 = DWORD2(v228);
            if (v178 == 1)
            {
              if (DWORD2(v228) != 1)
                goto LABEL_695;
              v180 = WebCore::convertDictionaryToJS((uint64_t)this, *((_QWORD *)a2 + 82), (uint64_t)&v224 + 8);
            }
            else
            {
              if (v178)
                goto LABEL_696;
              if (DWORD2(v228))
                goto LABEL_695;
              if ((*((_QWORD *)&v224 + 1) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
                && (v179 = (int)*((double *)&v224 + 1), *((double *)&v224 + 1) == (double)(int)v179)
                && ((_DWORD)v179 || (*((_QWORD *)&v224 + 1) & 0x8000000000000000) == 0))
              {
                v180 = v179 | 0xFFFE000000000000;
              }
              else
              {
                v180 = *((_QWORD *)&v224 + 1) + 0x2000000000000;
              }
            }
            if (*(_DWORD *)(v9 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
              goto LABEL_615;
            WTF::AtomStringImpl::addLiteral();
            v181 = (WTF::StringImpl *)v224;
            *(_QWORD *)&v224 = 0;
            *((_QWORD *)&v224 + 1) = v8;
            v225 = 0x1000000FFFFFFFFuLL;
            JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v9, (unint64_t)v181, v180, 0, (uint64_t)&v224);
            if (v181)
            {
              if (*(_DWORD *)v181 == 2)
                WTF::StringImpl::destroy(v181, v182);
              else
                *(_DWORD *)v181 -= 2;
            }
          }
          if (*((_BYTE *)v11 + 904))
          {
            BYTE8(v224) = 0;
            DWORD2(v228) = -1;
            v183 = *((unsigned int *)v11 + 224);
            if ((_DWORD)v183 == -1)
            {
              v183 = -1;
            }
            else
            {
              ((void (*)(uint64_t **, char *, char *))off_1E32C3138[v183])(&v216, (char *)&v224 + 8, (char *)v11 + 832);
              DWORD2(v228) = v183;
            }
            LOBYTE(v213) = 0;
            v214 = 0;
            v215 = v183;
            v216 = &v215;
            v217 = &v213;
            v218 = this;
            v219 = a2;
            v220 = &v224;
            _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_12IDLDOMStringENS_11IDLSequenceIS4_EENS_13IDLDictionaryINS_28ConstrainDOMStringParametersEEEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6StringENSJ_6VectorISK_Lm0ENSJ_15CrashOnOverflowELm16ENSJ_10FastMallocEEES8_EEEEUlTyvE_JNSH_17integral_constantIlLl0EEENST_IlLl1EEENST_IlLl2EEEEEET_SX_((uint64_t)&v211, &v216);
            if (!v214)
              goto LABEL_696;
            v184 = v213;
            if (DWORD2(v228) != -1)
              ((void (*)(uint64_t **, char *))off_1E32BE9D8[DWORD2(v228)])(&v216, (char *)&v224 + 8);
            if (*(_DWORD *)(v9 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
              goto LABEL_615;
            WTF::AtomStringImpl::addLiteral();
            v185 = (WTF::StringImpl *)v224;
            *(_QWORD *)&v224 = 0;
            *((_QWORD *)&v224 + 1) = v8;
            v225 = 0x1000000FFFFFFFFuLL;
            JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v9, (unint64_t)v185, v184, 0, (uint64_t)&v224);
            if (v185)
            {
              if (*(_DWORD *)v185 == 2)
                WTF::StringImpl::destroy(v185, v186);
              else
                *(_DWORD *)v185 -= 2;
            }
          }
          if (*((_BYTE *)v11 + 40))
          {
            *(_QWORD *)&v226 = *((_QWORD *)v11 + 4);
            v224 = *(_OWORD *)v11;
            v225 = *((_OWORD *)v11 + 1);
            if (DWORD1(v226) == -1)
              v187 = -1;
            else
              v187 = DWORD1(v226);
            if (v187 == 1)
            {
              if (DWORD1(v226) != 1)
                goto LABEL_695;
              v188 = WebCore::convertDictionaryToJS((uint64_t)this, *((_QWORD *)a2 + 82), (unsigned int *)&v224 + 1);
            }
            else
            {
              if (v187)
                goto LABEL_696;
              if (DWORD1(v226))
                goto LABEL_695;
              v188 = DWORD1(v224) | 0xFFFE000000000000;
            }
            if (*(_DWORD *)(v9 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
              goto LABEL_615;
            WTF::AtomStringImpl::addLiteral();
            v189 = (WTF::StringImpl *)v224;
            *(_QWORD *)&v224 = 0;
            *((_QWORD *)&v224 + 1) = v8;
            v225 = 0x1000000FFFFFFFFuLL;
            JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v9, (unint64_t)v189, v188, 0, (uint64_t)&v224);
            if (v189)
            {
              if (*(_DWORD *)v189 == 2)
                WTF::StringImpl::destroy(v189, v190);
              else
                *(_DWORD *)v189 -= 2;
            }
          }
          if (!*((_BYTE *)v11 + 992))
            goto LABEL_551;
          v228 = *((_OWORD *)v11 + 61);
          v225 = *((_OWORD *)v11 + 58);
          v226 = *((_OWORD *)v11 + 59);
          v227 = *((_OWORD *)v11 + 60);
          v224 = *((_OWORD *)v11 + 57);
          if (DWORD2(v228) == -1)
            v191 = -1;
          else
            v191 = DWORD2(v228);
          if (v191 == 1)
          {
            if (DWORD2(v228) != 1)
              goto LABEL_695;
            v193 = WebCore::convertDictionaryToJS((uint64_t)this, *((_QWORD *)a2 + 82), (uint64_t)&v224 + 8);
          }
          else
          {
            if (v191)
              goto LABEL_696;
            if (DWORD2(v228))
              goto LABEL_695;
            if ((*((_QWORD *)&v224 + 1) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
              && (v192 = (int)*((double *)&v224 + 1), *((double *)&v224 + 1) == (double)(int)v192)
              && ((_DWORD)v192 || (*((_QWORD *)&v224 + 1) & 0x8000000000000000) == 0))
            {
              v193 = v192 | 0xFFFE000000000000;
            }
            else
            {
              v193 = *((_QWORD *)&v224 + 1) + 0x2000000000000;
            }
          }
          if (!*(_DWORD *)(v9 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) == 0)
          {
            WTF::AtomStringImpl::addLiteral();
            v194 = (WTF::StringImpl *)v224;
            *(_QWORD *)&v224 = 0;
            *((_QWORD *)&v224 + 1) = v8;
            v225 = 0x1000000FFFFFFFFuLL;
            JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v9, (unint64_t)v194, v193, 0, (uint64_t)&v224);
            if (v194)
            {
              if (*(_DWORD *)v194 == 2)
                WTF::StringImpl::destroy(v194, v195);
              else
                *(_DWORD *)v194 -= 2;
            }
            goto LABEL_551;
          }
LABEL_615:
          v8 = 0;
LABEL_551:
          if (*((_DWORD *)v208 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v208) & 1) != 0)
            goto LABEL_692;
          v196 = DWORD2(v221);
          if (DWORD2(v221) == HIDWORD(v221) || *(_BYTE **)v222 != &v222[16] && *(_QWORD *)v222)
          {
            v197.super.isa = (Class)v8;
            if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)((char *)&v221 + 8), v197) == 1)
              LOBYTE(v221) = 1;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)v222 + 8 * DWORD2(v221)) = v8;
            DWORD2(v221) = v196 + 1;
          }
          v11 = (WebCore::JSDOMGlobalObject *)((char *)v11 + 1048);
          if (v11 == v209)
          {
            if (!(_BYTE)v221)
            {
              v8 = v206;
              v11 = v207;
              a3 = v204;
              LODWORD(v4) = v205;
              goto LABEL_618;
            }
            JSC::throwOutOfMemoryError();
LABEL_692:
            v9 = 0;
            v8 = v206;
            v11 = v207;
            a3 = v204;
            LODWORD(v4) = v205;
LABEL_620:
            a2 = *(JSC::JSGlobalObject **)&v222[8];
            if (!*(_QWORD *)&v222[8])
            {
LABEL_621:
              if (*(_BYTE **)v222 != v210 && *(_QWORD *)v222)
                WTF::fastFree(*(WTF **)v222, v198);
              if ((_DWORD)v4)
                WTF::VectorDestructor<true,WebCore::MediaTrackConstraintSet>::destruct((uint64_t)a3, (uint64_t)v209);
              if (a3)
                WTF::fastFree(a3, v198);
              if (!*(_DWORD *)(v8 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8) & 1) == 0)
              {
                WTF::AtomStringImpl::addLiteral();
                v200 = (WTF::StringImpl *)v221;
                *(_QWORD *)&v221 = 0;
                *((_QWORD *)&v221 + 1) = v11;
                *(_QWORD *)v222 = 0x1000000FFFFFFFFLL;
                *(_QWORD *)&v222[8] = 0;
                JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v11, (JSC::VM *)v8, (unint64_t)v200, v9, 0, (uint64_t)&v221);
                if (v200)
                {
                  if (*(_DWORD *)v200 == 2)
                    WTF::StringImpl::destroy(v200, v201);
                  else
                    *(_DWORD *)v200 -= 2;
                }
              }
              return;
            }
LABEL_697:
            *(_QWORD *)&v224 = v203;
            v202 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>((uint64_t *)a2, (uint64_t *)&v224);
            WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove((uint64_t *)a2, v202);
            goto LABEL_621;
          }
        }
      }
      v89 = *((_OWORD *)a3 + 61);
      *(_OWORD *)&v222[32] = *((_OWORD *)a3 + 60);
      *(_OWORD *)&v222[48] = v89;
      v90 = *((_OWORD *)a3 + 59);
      v91 = *((_OWORD *)a3 + 57);
      *(_OWORD *)v222 = *((_OWORD *)a3 + 58);
      *(_OWORD *)&v222[16] = v90;
      v221 = v91;
      if (DWORD2(v89) == -1)
        v92 = -1;
      else
        v92 = *(unsigned int *)&v222[56];
      if (v92 == 1)
      {
        if (DWORD2(v89) == 1)
        {
          v94 = WebCore::convertDictionaryToJS((uint64_t)this, *((_QWORD *)a2 + 82), (uint64_t)&v221 + 8);
LABEL_266:
          if (*(_DWORD *)(v8 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8) & 1) != 0)
            return;
          WTF::AtomStringImpl::addLiteral();
          v95 = (WTF::StringImpl *)v221;
          *(_QWORD *)&v221 = 0;
          *((_QWORD *)&v221 + 1) = v11;
          *(_QWORD *)v222 = 0x1000000FFFFFFFFLL;
          *(_QWORD *)&v222[8] = 0;
          JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v11, (JSC::VM *)v8, (unint64_t)v95, v94, 0, (uint64_t)&v221);
          if (v95)
          {
            if (*(_DWORD *)v95 == 2)
              WTF::StringImpl::destroy(v95, v96);
            else
              *(_DWORD *)v95 -= 2;
          }
          goto LABEL_270;
        }
        goto LABEL_695;
      }
      if (!v92)
      {
        if (!DWORD2(v89))
        {
          if ((*((_QWORD *)&v221 + 1) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v93 = (int)*((double *)&v221 + 1), *((double *)&v221 + 1) == (double)(int)v93)
            && ((_DWORD)v93 || (*((_QWORD *)&v221 + 1) & 0x8000000000000000) == 0))
          {
            v94 = v93 | 0xFFFE000000000000;
          }
          else
          {
            v94 = *((_QWORD *)&v221 + 1) + 0x2000000000000;
          }
          goto LABEL_266;
        }
        goto LABEL_695;
      }
LABEL_696:
      std::__throw_bad_optional_access[abi:sn180100]();
      goto LABEL_697;
    }
    *(_QWORD *)&v222[16] = *((_QWORD *)a3 + 4);
    v85 = *((_OWORD *)a3 + 1);
    v221 = *(_OWORD *)a3;
    *(_OWORD *)v222 = v85;
    if (*(_DWORD *)&v222[20] == -1)
      v86 = -1;
    else
      v86 = HIDWORD(*(_QWORD *)&v222[16]);
    if (v86 == 1)
    {
      if (*(_DWORD *)&v222[20] == 1)
      {
        v9 = WebCore::convertDictionaryToJS((uint64_t)this, *((_QWORD *)a2 + 82), (unsigned int *)&v221 + 1);
LABEL_247:
        if (*(_DWORD *)(v8 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8) & 1) != 0)
          return;
        WTF::AtomStringImpl::addLiteral();
        v87 = (WTF::StringImpl *)v221;
        *(_QWORD *)&v221 = 0;
        *((_QWORD *)&v221 + 1) = v11;
        *(_QWORD *)v222 = 0x1000000FFFFFFFFLL;
        *(_QWORD *)&v222[8] = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v11, (JSC::VM *)v8, (unint64_t)v87, v9, 0, (uint64_t)&v221);
        if (v87)
        {
          if (*(_DWORD *)v87 == 2)
            WTF::StringImpl::destroy(v87, v88);
          else
            *(_DWORD *)v87 -= 2;
        }
        goto LABEL_251;
      }
    }
    else
    {
      if (v86)
        goto LABEL_696;
      if (!*(_DWORD *)&v222[20])
      {
        v9 = DWORD1(v221) | 0xFFFE000000000000;
        goto LABEL_247;
      }
    }
LABEL_695:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_696;
  }
  v9 = (unint64_t)&v221 + 8;
  BYTE8(v221) = 0;
  *(_DWORD *)&v222[56] = -1;
  v4 = *((unsigned int *)a3 + 154);
  if ((_DWORD)v4 == -1)
  {
    v4 = -1;
  }
  else
  {
    ((void (*)(__int128 *, char *, char *))off_1E32C3138[v4])(&v224, (char *)&v221 + 8, (char *)a3 + 552);
    *(_DWORD *)&v222[56] = v4;
  }
  v213 = v4;
  LOBYTE(v211) = 0;
  v212 = 0;
  *(_QWORD *)&v224 = &v213;
  *((_QWORD *)&v224 + 1) = &v211;
  *(_QWORD *)&v225 = this;
  *((_QWORD *)&v225 + 1) = a2;
  *(_QWORD *)&v226 = &v221;
  _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_12IDLDOMStringENS_11IDLSequenceIS4_EENS_13IDLDictionaryINS_28ConstrainDOMStringParametersEEEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6StringENSJ_6VectorISK_Lm0ENSJ_15CrashOnOverflowELm16ENSJ_10FastMallocEEES8_EEEEUlTyvE_JNSH_17integral_constantIlLl0EEENST_IlLl1EEENST_IlLl2EEEEEET_SX_((uint64_t)&v216, (uint64_t **)&v224);
  if (!v212)
    goto LABEL_696;
  v25 = v211;
  if (*(_DWORD *)&v222[56] != -1)
    ((void (*)(__int128 *, char *))off_1E32BE9D8[*(unsigned int *)&v222[56]])(&v224, (char *)&v221 + 8);
  if (!*(_DWORD *)(v8 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8) & 1) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v9 = v221;
    *(_QWORD *)&v221 = 0;
    *((_QWORD *)&v221 + 1) = v11;
    *(_QWORD *)v222 = 0x1000000FFFFFFFFLL;
    *(_QWORD *)&v222[8] = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v11, (JSC::VM *)v8, v9, v25, 0, (uint64_t)&v221);
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v9, v26);
      else
        *(_DWORD *)v9 -= 2;
    }
    goto LABEL_49;
  }
}

uint64_t WebCore::convertDictionary<WebCore::ConstrainBooleanParameters>(uint64_t result, JSC::JSGlobalObject *a2, JSC::JSCell *this)
{
  uint64_t v3;
  JSC::VM *v4;
  int v5;
  uint64_t Object;
  JSC::Structure *v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  JSC::VM *v11;
  double v12;
  _BOOL4 v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  int v16;
  _BOOL4 v17;
  int v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  int *v22;
  int v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  int *v27;
  int v28;
  WTF::StringImpl *v29;

  v3 = result;
  v4 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
    {
      result = JSC::throwTypeError();
      goto LABEL_36;
    }
    v8 = (JSC::Structure *)Object;
    WTF::AtomStringImpl::addLiteral();
    v10 = JSC::JSObject::get(v8, a2, (unint64_t)v29);
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v9);
      else
        *(_DWORD *)v29 -= 2;
    }
    if (*((_DWORD *)v4 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
      if ((result & 1) != 0)
        goto LABEL_36;
    }
    if (v10 == 10)
    {
      v5 = 0;
      goto LABEL_17;
    }
    v11 = (JSC::VM *)*((_QWORD *)a2 + 7);
    if (v10 >= 0xFFFE000000000000)
    {
      v19 = (_DWORD)v10 == 0;
      goto LABEL_74;
    }
    *(_QWORD *)&v12 = v10 - 0x2000000000000;
    if (v10 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      v13 = v12 > 0.0 || v12 < 0.0;
      goto LABEL_15;
    }
    if ((v10 & 0xFFFE000000000002) != 0)
    {
      v13 = v10 == 7;
      goto LABEL_15;
    }
    v20 = *(unsigned __int8 *)(v10 + 5);
    if (v20 == 3)
    {
      v23 = *(_DWORD *)(v10 + 8);
    }
    else
    {
      if (v20 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v13 = 1;
LABEL_15:
          if (*((_DWORD *)v11 + 20))
          {
            result = JSC::VM::hasExceptionsAfterHandlingTraps(v11);
            if ((result & 1) != 0)
              goto LABEL_36;
          }
          v5 = v13 | 0x100;
LABEL_17:
          WTF::AtomStringImpl::addLiteral();
          result = JSC::JSObject::get(v8, a2, (unint64_t)v29);
          v15 = result;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              result = WTF::StringImpl::destroy(v29, v14);
            else
              *(_DWORD *)v29 -= 2;
          }
          if (*((_DWORD *)v4 + 20))
          {
            result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
            if ((result & 1) != 0)
              goto LABEL_36;
          }
          if (v15 == 10)
            goto LABEL_22;
          result = *((_QWORD *)a2 + 7);
          if (v15 >= 0xFFFE000000000000)
          {
            v24 = (_DWORD)v15 == 0;
          }
          else
          {
            if (v15 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
            {
              v17 = COERCE_DOUBLE(v15 - 0x2000000000000) > 0.0 || COERCE_DOUBLE(v15 - 0x2000000000000) < 0.0;
LABEL_27:
              if (!*(_DWORD *)(result + 80)
                || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)result), (result & 1) == 0))
              {
                if (v17)
                  v16 = 16842752;
                else
                  v16 = 0x1000000;
                goto LABEL_31;
              }
LABEL_36:
              v18 = 1;
              goto LABEL_32;
            }
            if ((v15 & 0xFFFE000000000002) != 0)
            {
              v17 = v15 == 7;
              goto LABEL_27;
            }
            v25 = *(unsigned __int8 *)(v15 + 5);
            if (v25 == 3)
            {
              v28 = *(_DWORD *)(v15 + 8);
            }
            else
            {
              if (v25 != 2)
              {
                if ((*(_BYTE *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0xA) & 1) == 0)
                {
                  v17 = 1;
                  goto LABEL_27;
                }
                v24 = *(_QWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x28) == (_QWORD)a2;
                goto LABEL_78;
              }
              v26 = *(_QWORD *)(v15 + 8);
              if ((v26 & 1) != 0)
                v27 = (int *)(v15 + 16);
              else
                v27 = (int *)(v26 + 4);
              v28 = *v27;
            }
            v24 = v28 == 0;
          }
LABEL_78:
          v17 = !v24;
          goto LABEL_27;
        }
        v19 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28) == (_QWORD)a2;
LABEL_74:
        v13 = !v19;
        goto LABEL_15;
      }
      v21 = *(_QWORD *)(v10 + 8);
      if ((v21 & 1) != 0)
        v22 = (int *)(v10 + 16);
      else
        v22 = (int *)(v21 + 4);
      v23 = *v22;
    }
    v19 = v23 == 0;
    goto LABEL_74;
  }
  v5 = 0;
LABEL_22:
  v16 = 0;
LABEL_31:
  v18 = 0;
  *(_DWORD *)(v3 + 4) = v16 | v5;
LABEL_32:
  *(_DWORD *)(v3 + 8) = v18;
  return result;
}

unint64_t WebCore::convertDictionaryToJS(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v4;
  unint64_t v5;
  size_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v16;
  unint64_t v17;
  int v18;
  int v19;
  uint64_t v20;

  v4 = *(_QWORD *)(a1 + 56);
  v5 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v6 = 8 * *(unsigned __int8 *)(v5 + 14);
  v7 = JSC::allocateCell<JSC::JSFinalObject>(v4, v6 + 16);
  v8 = *(_DWORD *)(v5 + 8);
  *(_DWORD *)v7 = v5 >> 4;
  *(_DWORD *)(v7 + 4) = v8;
  *(_QWORD *)(v7 + 8) = 0;
  bzero((void *)(v7 + 16), v6);
  if (*(_BYTE *)(v4 + 755))
    __dmb(0xAu);
  if (a3[1])
  {
    if (*a3)
      v9 = 7;
    else
      v9 = 6;
    if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v10 = v16;
    v16 = 0;
    v17 = v7;
    v18 = -1;
    v19 = 0x1000000;
    v20 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v7, (JSC::VM *)v4, (unint64_t)v10, v9, 0, (uint64_t)&v16);
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v11);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  if (a3[3])
  {
    if (a3[2])
      v12 = 7;
    else
      v12 = 6;
    if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v13 = v16;
    v16 = 0;
    v17 = v7;
    v18 = -1;
    v19 = 0x1000000;
    v20 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v7, (JSC::VM *)v4, (unint64_t)v13, v12, 0, (uint64_t)&v16);
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v14);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return v7;
}

{
  uint64_t v4;
  unint64_t v5;
  size_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v61;
  unint64_t v62;
  int v63;
  int v64;
  uint64_t v65;

  v4 = *(_QWORD *)(a1 + 56);
  v5 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v6 = 8 * *(unsigned __int8 *)(v5 + 14);
  v7 = JSC::allocateCell<JSC::JSFinalObject>(v4, v6 + 16);
  v8 = *(_DWORD *)(v5 + 8);
  *(_DWORD *)v7 = v5 >> 4;
  *(_DWORD *)(v7 + 4) = v8;
  *(_QWORD *)(v7 + 8) = 0;
  bzero((void *)(v7 + 16), v6);
  if (*(_BYTE *)(v4 + 755))
    __dmb(0xAu);
  if (a3[2])
    v9 = 7;
  else
    v9 = 6;
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v10 = v61;
  v61 = 0;
  v62 = v7;
  v63 = -1;
  v64 = 0x1000000;
  v65 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v7, (JSC::VM *)v4, (unint64_t)v10, v9, 0, (uint64_t)&v61);
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v11);
    else
      *(_DWORD *)v10 -= 2;
  }
  v12 = a3[15] ? 7 : 6;
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v13 = v61;
  v61 = 0;
  v62 = v7;
  v63 = -1;
  v64 = 0x1000000;
  v65 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v7, (JSC::VM *)v4, (unint64_t)v13, v12, 0, (uint64_t)&v61);
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v14);
    else
      *(_DWORD *)v13 -= 2;
  }
  v15 = a3[9] ? 7 : 6;
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v16 = v61;
  v61 = 0;
  v62 = v7;
  v63 = -1;
  v64 = 0x1000000;
  v65 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v7, (JSC::VM *)v4, (unint64_t)v16, v15, 0, (uint64_t)&v61);
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v17);
    else
      *(_DWORD *)v16 -= 2;
  }
  v18 = a3[11] ? 7 : 6;
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v19 = v61;
  v61 = 0;
  v62 = v7;
  v63 = -1;
  v64 = 0x1000000;
  v65 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v7, (JSC::VM *)v4, (unint64_t)v19, v18, 0, (uint64_t)&v61);
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v20);
    else
      *(_DWORD *)v19 -= 2;
  }
  v21 = a3[8] ? 7 : 6;
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v22 = v61;
  v61 = 0;
  v62 = v7;
  v63 = -1;
  v64 = 0x1000000;
  v65 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v7, (JSC::VM *)v4, (unint64_t)v22, v21, 0, (uint64_t)&v61);
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v23);
    else
      *(_DWORD *)v22 -= 2;
  }
  v24 = a3[4] ? 7 : 6;
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v25 = v61;
  v61 = 0;
  v62 = v7;
  v63 = -1;
  v64 = 0x1000000;
  v65 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v7, (JSC::VM *)v4, (unint64_t)v25, v24, 0, (uint64_t)&v61);
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v26);
    else
      *(_DWORD *)v25 -= 2;
  }
  v27 = a3[3] ? 7 : 6;
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v28 = v61;
  v61 = 0;
  v62 = v7;
  v63 = -1;
  v64 = 0x1000000;
  v65 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v7, (JSC::VM *)v4, (unint64_t)v28, v27, 0, (uint64_t)&v61);
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v29);
    else
      *(_DWORD *)v28 -= 2;
  }
  v30 = a3[10] ? 7 : 6;
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v31 = v61;
  v61 = 0;
  v62 = v7;
  v63 = -1;
  v64 = 0x1000000;
  v65 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v7, (JSC::VM *)v4, (unint64_t)v31, v30, 0, (uint64_t)&v61);
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v32);
    else
      *(_DWORD *)v31 -= 2;
  }
  v33 = a3[1] ? 7 : 6;
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v34 = v61;
  v61 = 0;
  v62 = v7;
  v63 = -1;
  v64 = 0x1000000;
  v65 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v7, (JSC::VM *)v4, (unint64_t)v34, v33, 0, (uint64_t)&v61);
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v35);
    else
      *(_DWORD *)v34 -= 2;
  }
  v36 = a3[16] ? 7 : 6;
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v37 = v61;
  v61 = 0;
  v62 = v7;
  v63 = -1;
  v64 = 0x1000000;
  v65 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v7, (JSC::VM *)v4, (unint64_t)v37, v36, 0, (uint64_t)&v61);
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v38);
    else
      *(_DWORD *)v37 -= 2;
  }
  v39 = a3[6] ? 7 : 6;
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v40 = v61;
  v61 = 0;
  v62 = v7;
  v63 = -1;
  v64 = 0x1000000;
  v65 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v7, (JSC::VM *)v4, (unint64_t)v40, v39, 0, (uint64_t)&v61);
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v41);
    else
      *(_DWORD *)v40 -= 2;
  }
  v42 = a3[7] ? 7 : 6;
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v43 = v61;
  v61 = 0;
  v62 = v7;
  v63 = -1;
  v64 = 0x1000000;
  v65 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v7, (JSC::VM *)v4, (unint64_t)v43, v42, 0, (uint64_t)&v61);
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v44);
    else
      *(_DWORD *)v43 -= 2;
  }
  v45 = a3[14] ? 7 : 6;
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v46 = v61;
  v61 = 0;
  v62 = v7;
  v63 = -1;
  v64 = 0x1000000;
  v65 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v7, (JSC::VM *)v4, (unint64_t)v46, v45, 0, (uint64_t)&v61);
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, v47);
    else
      *(_DWORD *)v46 -= 2;
  }
  v48 = a3[5] ? 7 : 6;
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v49 = v61;
  v61 = 0;
  v62 = v7;
  v63 = -1;
  v64 = 0x1000000;
  v65 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v7, (JSC::VM *)v4, (unint64_t)v49, v48, 0, (uint64_t)&v61);
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, v50);
    else
      *(_DWORD *)v49 -= 2;
  }
  v51 = a3[12] ? 7 : 6;
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v52 = v61;
  v61 = 0;
  v62 = v7;
  v63 = -1;
  v64 = 0x1000000;
  v65 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v7, (JSC::VM *)v4, (unint64_t)v52, v51, 0, (uint64_t)&v61);
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
      WTF::StringImpl::destroy(v52, v53);
    else
      *(_DWORD *)v52 -= 2;
  }
  v54 = *a3 ? 7 : 6;
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v55 = v61;
  v61 = 0;
  v62 = v7;
  v63 = -1;
  v64 = 0x1000000;
  v65 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v7, (JSC::VM *)v4, (unint64_t)v55, v54, 0, (uint64_t)&v61);
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
      WTF::StringImpl::destroy(v55, v56);
    else
      *(_DWORD *)v55 -= 2;
  }
  v57 = a3[13] ? 7 : 6;
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v58 = v61;
  v61 = 0;
  v62 = v7;
  v63 = -1;
  v64 = 0x1000000;
  v65 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v7, (JSC::VM *)v4, (unint64_t)v58, v57, 0, (uint64_t)&v61);
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
      WTF::StringImpl::destroy(v58, v59);
    else
      *(_DWORD *)v58 -= 2;
  }
  return v7;
}

uint64_t WebCore::convertDictionary<WebCore::ConstrainDOMStringParameters>(uint64_t result, JSC::JSGlobalObject *a2, JSC::JSCell *this)
{
  uint64_t v3;
  JSC::VM *v4;
  uint64_t Object;
  JSC::Structure *v7;
  WTF::StringImpl *v8;
  JSC::JSObject *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t (*v13)();
  int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  JSC::JSObject *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t (*v21)();
  int v22;
  int v23;
  int v24;
  int v25;
  _BYTE v26[16];
  int v27;
  _BYTE v28[16];
  int v29;
  char v30;
  _BYTE v31[16];
  int v32;
  unsigned __int8 v33;
  JSC::VM *v34;
  _BYTE *v35;
  WTF::StringImpl *v36;
  _BYTE v37[16];
  unsigned int v38;
  int v39;
  uint64_t v40;

  v3 = result;
  v40 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v34 = v4;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v28[0] = 0;
    v30 = 0;
    v31[0] = 0;
    v33 = 0;
LABEL_49:
    *(_BYTE *)(v3 + 8) = 0;
    *(_BYTE *)(v3 + 32) = 0;
    if (v30)
    {
      *(_DWORD *)(v3 + 24) = -1;
      v23 = v29;
      if (v29 != -1)
      {
        result = ((uint64_t (*)(WTF::StringImpl **))off_1E32BEA18[v29])(&v36);
        *(_DWORD *)(v3 + 24) = v23;
      }
      *(_BYTE *)(v3 + 32) = 1;
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_BYTE *)(v3 + 64) = 0;
    v24 = v33;
    if (v33)
    {
      *(_DWORD *)(v3 + 56) = -1;
      v25 = v32;
      if (v32 != -1)
      {
        result = ((uint64_t (*)(WTF::StringImpl **))off_1E32BEA18[v32])(&v36);
        *(_DWORD *)(v3 + 56) = v25;
      }
      v24 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    goto LABEL_57;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = JSC::throwTypeError();
    *(_DWORD *)(v3 + 72) = 1;
    return result;
  }
  v7 = (JSC::Structure *)Object;
  v28[0] = 0;
  v30 = 0;
  v31[0] = 0;
  v33 = 0;
  WTF::AtomStringImpl::addLiteral();
  v10 = JSC::JSObject::get(v7, a2, (unint64_t)v36);
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v8);
    else
      *(_DWORD *)v36 -= 2;
  }
  if (!*((_DWORD *)v4 + 20) || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v4), (result & 1) == 0))
  {
    if (v10 == 10)
      goto LABEL_27;
    result = WebCore::Converter<WebCore::IDLUnion<WebCore::IDLDOMString,WebCore::IDLSequence<WebCore::IDLDOMString>>>::convert(a2, v10, v9, (uint64_t)&v36);
    v11 = v39;
    if (v39)
    {
      *(_DWORD *)(v3 + 72) = 1;
      v14 = v11;
LABEL_24:
      if (v14 != -1)
        result = ((uint64_t (*)(_BYTE *, _BYTE *))off_1E32BEA60[v14])(v26, v37);
      if (v11)
        goto LABEL_58;
LABEL_27:
      WTF::AtomStringImpl::addLiteral();
      v15 = v36;
      result = JSC::JSObject::get(v7, a2, (unint64_t)v36);
      v18 = result;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          result = WTF::StringImpl::destroy(v15, v16);
        else
          *(_DWORD *)v15 -= 2;
      }
      if (*((_DWORD *)v4 + 20))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
        if ((result & 1) != 0)
          goto LABEL_70;
      }
      if (v18 == 10)
        goto LABEL_49;
      result = WebCore::Converter<WebCore::IDLUnion<WebCore::IDLDOMString,WebCore::IDLSequence<WebCore::IDLDOMString>>>::convert(a2, v18, v17, (uint64_t)&v36);
      v19 = v39;
      if (v39)
      {
        *(_DWORD *)(v3 + 72) = 1;
        v22 = v19;
LABEL_46:
        if (v22 != -1)
          result = ((uint64_t (*)(_BYTE *, _BYTE *))off_1E32BEA60[v22])(v26, v37);
        if (v19)
          goto LABEL_58;
        goto LABEL_49;
      }
      v26[0] = 0;
      v27 = -1;
      v20 = v38;
      if (v38 == -1)
      {
        if (v33)
        {
          if (v32 == -1)
          {
LABEL_45:
            v22 = v39;
            goto LABEL_46;
          }
          result = ((uint64_t (*)(_BYTE **, _BYTE *))off_1E32BEA08[v32])(&v35, v31);
          v32 = -1;
LABEL_43:
          if (v27 != -1)
            result = ((uint64_t (*)(_BYTE **, _BYTE *))off_1E32BEA08[v27])(&v35, v26);
          goto LABEL_45;
        }
        v31[0] = 0;
        v32 = -1;
      }
      else
      {
        v21 = off_1E32BEA18[v38];
        ((void (*)(_BYTE **, _BYTE *, _BYTE *))v21)(&v35, v26, v37);
        v27 = v20;
        if (v33)
        {
          v35 = v31;
          result = ((uint64_t (*)(_BYTE **, _BYTE *, _BYTE *))off_1E32BEA40[v20])(&v35, v31, v26);
          goto LABEL_43;
        }
        v31[0] = 0;
        v32 = -1;
        result = ((uint64_t (*)(_BYTE **, _BYTE *, _BYTE *))v21)(&v35, v31, v26);
        v32 = v20;
      }
      v33 = 1;
      goto LABEL_43;
    }
    v26[0] = 0;
    v27 = -1;
    v12 = v38;
    if (v38 == -1)
    {
      if (v30)
      {
        if (v29 == -1)
        {
LABEL_23:
          v14 = v39;
          goto LABEL_24;
        }
        result = ((uint64_t (*)(_BYTE **, _BYTE *))off_1E32BEA08[v29])(&v35, v28);
        v29 = -1;
LABEL_21:
        if (v27 != -1)
          result = ((uint64_t (*)(_BYTE **, _BYTE *))off_1E32BEA08[v27])(&v35, v26);
        goto LABEL_23;
      }
      v28[0] = 0;
      v29 = -1;
    }
    else
    {
      v13 = off_1E32BEA18[v38];
      ((void (*)(_BYTE **, _BYTE *, _BYTE *))v13)(&v35, v26, v37);
      v27 = v12;
      if (v30)
      {
        v35 = v28;
        result = ((uint64_t (*)(_BYTE **, _BYTE *, _BYTE *))off_1E32BEA40[v12])(&v35, v28, v26);
        goto LABEL_21;
      }
      v28[0] = 0;
      v29 = -1;
      result = ((uint64_t (*)(_BYTE **, _BYTE *, _BYTE *))v13)(&v35, v28, v26);
      v29 = v12;
    }
    v30 = 1;
    goto LABEL_21;
  }
LABEL_70:
  v24 = 1;
LABEL_57:
  *(_DWORD *)(v3 + 72) = v24;
LABEL_58:
  if (v33)
  {
    if (v32 != -1)
      result = ((uint64_t (*)(WTF::StringImpl **, _BYTE *))off_1E32BEA08[v32])(&v36, v31);
    v32 = -1;
  }
  if (v30)
  {
    if (v29 != -1)
      return ((uint64_t (*)(WTF::StringImpl **, _BYTE *))off_1E32BEA08[v29])(&v36, v28);
  }
  return result;
}

uint64_t WebCore::convertDictionary<WebCore::ConstrainDoubleRange>(uint64_t result, JSC::JSGlobalObject *a2, JSC::JSCell *this)
{
  uint64_t v3;
  JSC::VM *v4;
  char v5;
  char v6;
  char v7;
  char v8;
  double v9;
  double v10;
  double v11;
  uint64_t Object;
  JSC::Structure *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  JSC::VM *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  JSC::VM *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  JSC::VM *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  double v29;
  JSC::VM *v30;
  int v31;
  JSC::VM *v32;
  double v33;
  JSC::VM *v34;
  double v35;
  JSC::VM *v36;
  double v37;
  double v38;
  _BYTE v39[7];
  _BYTE v40[7];
  _BYTE v41[7];
  _BYTE v42[7];
  WTF::StringImpl *v43;

  v3 = result;
  v4 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
    {
      result = JSC::throwTypeError();
      goto LABEL_65;
    }
    v14 = (JSC::Structure *)Object;
    WTF::AtomStringImpl::addLiteral();
    v16 = (WTF::StringImpl *)JSC::JSObject::get(v14, a2, (unint64_t)v43);
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
        WTF::StringImpl::destroy(v43, v15);
      else
        *(_DWORD *)v43 -= 2;
    }
    if (*((_DWORD *)v4 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
      if ((result & 1) != 0)
        goto LABEL_65;
    }
    if (v16 == (WTF::StringImpl *)10)
    {
      v5 = 0;
      v9 = 0.0;
    }
    else
    {
      v17 = (JSC::VM *)*((_QWORD *)a2 + 7);
      v43 = v16;
      if ((unint64_t)v16 >= 0xFFFE000000000000)
      {
        v9 = (double)(int)v16;
      }
      else if ((unint64_t)v16 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        v32 = v17;
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v43, a2);
        v17 = v32;
        v9 = v33;
      }
      else
      {
        *(_QWORD *)&v9 = (char *)v16 - 0x2000000000000;
      }
      if (*((_DWORD *)v17 + 20))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps(v17);
        if ((result & 1) != 0)
          goto LABEL_65;
      }
      if ((*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        goto LABEL_66;
      v5 = 1;
    }
    WTF::AtomStringImpl::addLiteral();
    v18 = v43;
    v20 = (WTF::StringImpl *)JSC::JSObject::get(v14, a2, (unint64_t)v43);
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v19);
      else
        *(_DWORD *)v18 -= 2;
    }
    if (*((_DWORD *)v4 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
      if ((result & 1) != 0)
        goto LABEL_65;
    }
    if (v20 == (WTF::StringImpl *)10)
    {
      v6 = 0;
      v10 = 0.0;
    }
    else
    {
      v21 = (JSC::VM *)*((_QWORD *)a2 + 7);
      v43 = v20;
      if ((unint64_t)v20 >= 0xFFFE000000000000)
      {
        v10 = (double)(int)v20;
      }
      else if ((unint64_t)v20 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        v34 = v21;
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v43, a2);
        v21 = v34;
        v10 = v35;
      }
      else
      {
        *(_QWORD *)&v10 = (char *)v20 - 0x2000000000000;
      }
      if (*((_DWORD *)v21 + 20))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps(v21);
        if ((result & 1) != 0)
          goto LABEL_65;
      }
      if ((*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        goto LABEL_66;
      v6 = 1;
    }
    WTF::AtomStringImpl::addLiteral();
    v22 = v43;
    v24 = (WTF::StringImpl *)JSC::JSObject::get(v14, a2, (unint64_t)v43);
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v23);
      else
        *(_DWORD *)v22 -= 2;
    }
    if (*((_DWORD *)v4 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
      if ((result & 1) != 0)
        goto LABEL_65;
    }
    if (v24 == (WTF::StringImpl *)10)
    {
      v7 = 0;
      v11 = 0.0;
    }
    else
    {
      v25 = (JSC::VM *)*((_QWORD *)a2 + 7);
      v43 = v24;
      if ((unint64_t)v24 >= 0xFFFE000000000000)
      {
        v11 = (double)(int)v24;
      }
      else if ((unint64_t)v24 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        v36 = v25;
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v43, a2);
        v25 = v36;
        v11 = v37;
      }
      else
      {
        *(_QWORD *)&v11 = (char *)v24 - 0x2000000000000;
      }
      if (*((_DWORD *)v25 + 20))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps(v25);
        if ((result & 1) != 0)
          goto LABEL_65;
      }
      if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        goto LABEL_66;
      v7 = 1;
    }
    WTF::AtomStringImpl::addLiteral();
    v26 = v43;
    result = JSC::JSObject::get(v14, a2, (unint64_t)v43);
    v28 = (WTF::StringImpl *)result;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        result = WTF::StringImpl::destroy(v26, v27);
      else
        *(_DWORD *)v26 -= 2;
    }
    if (*((_DWORD *)v4 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
      if ((result & 1) != 0)
        goto LABEL_65;
    }
    if (v28 == (WTF::StringImpl *)10)
    {
      v8 = 0;
      goto LABEL_47;
    }
    v30 = (JSC::VM *)*((_QWORD *)a2 + 7);
    v43 = v28;
    if ((unint64_t)v28 >= 0xFFFE000000000000)
    {
      v29 = (double)(int)v28;
    }
    else if ((unint64_t)v28 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      result = JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v43, a2);
    }
    else
    {
      *(_QWORD *)&v29 = (char *)v28 - 0x2000000000000;
    }
    if (*((_DWORD *)v30 + 20))
    {
      v38 = v29;
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v30);
      v29 = v38;
      if ((result & 1) != 0)
      {
LABEL_65:
        v31 = 1;
        goto LABEL_55;
      }
    }
    if ((*(_QWORD *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      v8 = 1;
      goto LABEL_54;
    }
LABEL_66:
    result = JSC::throwTypeError();
    goto LABEL_65;
  }
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0.0;
  v10 = 0.0;
  v11 = 0.0;
LABEL_47:
  v29 = 0.0;
LABEL_54:
  v31 = 0;
  *(_BYTE *)(v3 + 16) = v5;
  *(_DWORD *)(v3 + 17) = *(_DWORD *)v42;
  *(_DWORD *)(v3 + 20) = *(_DWORD *)&v42[3];
  *(double *)(v3 + 8) = v9;
  *(double *)(v3 + 24) = v10;
  *(_BYTE *)(v3 + 32) = v6;
  *(_DWORD *)(v3 + 33) = *(_DWORD *)v41;
  *(_DWORD *)(v3 + 36) = *(_DWORD *)&v41[3];
  *(double *)(v3 + 40) = v11;
  *(_BYTE *)(v3 + 48) = v7;
  *(_DWORD *)(v3 + 52) = *(_DWORD *)&v40[3];
  *(_DWORD *)(v3 + 49) = *(_DWORD *)v40;
  *(double *)(v3 + 56) = v29;
  *(_BYTE *)(v3 + 64) = v8;
  *(_DWORD *)(v3 + 68) = *(_DWORD *)&v39[3];
  *(_DWORD *)(v3 + 65) = *(_DWORD *)v39;
LABEL_55:
  *(_DWORD *)(v3 + 72) = v31;
  return result;
}

uint64_t WebCore::convertDictionary<WebCore::ConstrainLongRange>(uint64_t result, JSC::JSGlobalObject *a2, JSC::JSCell *this)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  JSC::VM *v7;
  char v8;
  WTF::StringImpl *v9;
  char v10;
  WTF::StringImpl *v11;
  char v12;
  WTF::StringImpl *v13;
  char v14;
  int v15;
  int v16;
  uint64_t Object;
  JSC::Structure *v19;
  WTF::StringImpl *v20;
  char v21;
  JSC::VM *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  JSC::VM *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  JSC::VM *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  JSC::VM *v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  unint64_t v48;
  int v49;
  unint64_t v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  JSC::VM *v54;
  unint64_t v55;
  unint64_t v56;
  unsigned int v57;
  unsigned int v58;
  char v59;
  char v60;
  __int16 v61;
  char v62;
  __int16 v63;
  char v64;
  __int16 v65;
  char v66;
  __int16 v67;
  char v68;
  WTF::StringImpl *v69;

  v6 = result;
  v7 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
    {
      result = JSC::throwTypeError();
    }
    else
    {
      v19 = (JSC::Structure *)Object;
      WTF::AtomStringImpl::addLiteral();
      v9 = (WTF::StringImpl *)JSC::JSObject::get(v19, a2, (unint64_t)v69);
      if (v69)
      {
        if (*(_DWORD *)v69 == 2)
          WTF::StringImpl::destroy(v69, v20);
        else
          *(_DWORD *)v69 -= 2;
      }
      if (*((_DWORD *)v7 + 20))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps(v7);
        if ((result & 1) != 0)
          goto LABEL_98;
      }
      if (v9 == (WTF::StringImpl *)10)
      {
        v21 = 0;
        LOBYTE(v9) = 0;
      }
      else
      {
        v69 = v9;
        v22 = (JSC::VM *)*((_QWORD *)a2 + 7);
        if ((unint64_t)v9 < 0xFFFE000000000000)
        {
          v34 = (unint64_t)v9 - 0x2000000000000;
          if ((unint64_t)v9 - 0x2000000000000 >= 0xFFFC000000000000)
          {
            JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v69, a2);
            v34 = v52;
          }
          v35 = (v34 >> 52) & 0x7FF;
          v36 = v35 - 1023;
          v37 = v34 >> (51 - (v34 >> 52));
          if (v35 > 0x433)
            LODWORD(v37) = v34 << ((v34 >> 52) - 51);
          if (v35 >= 0x41F)
            v38 = v37;
          else
            v38 = (((1 << ((v34 >> 52) + 1)) - 1) & v37) + (1 << ((v34 >> 52) + 1));
          if ((v34 & 0x8000000000000000) == 0)
            v39 = v38;
          else
            v39 = -v38;
          if (v36 <= 0x53)
            LODWORD(v9) = v39;
          else
            LODWORD(v9) = 0;
        }
        if (*((_DWORD *)v22 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v22);
          if ((_DWORD)result)
            goto LABEL_98;
        }
        v58 = v9 >> 8;
        v21 = 1;
      }
      WTF::AtomStringImpl::addLiteral();
      v23 = v69;
      v11 = (WTF::StringImpl *)JSC::JSObject::get(v19, a2, (unint64_t)v69);
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v24);
        else
          *(_DWORD *)v23 -= 2;
      }
      if (!*((_DWORD *)v7 + 20) || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v7), (result & 1) == 0))
      {
        v60 = v21;
        if (v11 == (WTF::StringImpl *)10)
        {
          v59 = 0;
          LOBYTE(v11) = 0;
        }
        else
        {
          v69 = v11;
          v25 = (JSC::VM *)*((_QWORD *)a2 + 7);
          if ((unint64_t)v11 < 0xFFFE000000000000)
          {
            v40 = (unint64_t)v11 - 0x2000000000000;
            if ((unint64_t)v11 - 0x2000000000000 >= 0xFFFC000000000000)
            {
              JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v69, a2);
              v40 = v53;
            }
            v41 = (v40 >> 52) & 0x7FF;
            if ((v41 - 1023) <= 0x53)
            {
              v46 = v40 >> (51 - (v40 >> 52));
              if (v41 > 0x433)
                LODWORD(v46) = v40 << ((v40 >> 52) - 51);
              if (v41 >= 0x41F)
                v47 = v46;
              else
                v47 = (((1 << ((v40 >> 52) + 1)) - 1) & v46) + (1 << ((v40 >> 52) + 1));
              if ((v40 & 0x8000000000000000) == 0)
                LODWORD(v11) = v47;
              else
                LODWORD(v11) = -v47;
            }
            else
            {
              LODWORD(v11) = 0;
            }
          }
          if (*((_DWORD *)v25 + 20))
          {
            result = JSC::VM::hasExceptionsAfterHandlingTraps(v25);
            if ((_DWORD)result)
              goto LABEL_98;
          }
          v57 = v11 >> 8;
          v59 = 1;
        }
        WTF::AtomStringImpl::addLiteral();
        v26 = v69;
        v13 = (WTF::StringImpl *)JSC::JSObject::get(v19, a2, (unint64_t)v69);
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, v27);
          else
            *(_DWORD *)v26 -= 2;
        }
        if (!*((_DWORD *)v7 + 20) || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v7), (result & 1) == 0))
        {
          if (v13 == (WTF::StringImpl *)10)
          {
            v12 = 0;
            LOBYTE(v13) = 0;
          }
          else
          {
            v69 = v13;
            v28 = (JSC::VM *)*((_QWORD *)a2 + 7);
            if ((unint64_t)v13 < 0xFFFE000000000000)
            {
              v42 = (unint64_t)v13 - 0x2000000000000;
              if ((unint64_t)v13 - 0x2000000000000 >= 0xFFFC000000000000)
              {
                v54 = (JSC::VM *)*((_QWORD *)a2 + 7);
                JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v69, a2);
                v28 = v54;
                v42 = v55;
              }
              v43 = (v42 >> 52) & 0x7FF;
              if ((v43 - 1023) <= 0x53)
              {
                v48 = v42 >> (51 - (v42 >> 52));
                if (v43 > 0x433)
                  LODWORD(v48) = v42 << ((v42 >> 52) - 51);
                if (v43 >= 0x41F)
                  v49 = v48;
                else
                  v49 = (((1 << ((v42 >> 52) + 1)) - 1) & v48) + (1 << ((v42 >> 52) + 1));
                if ((v42 & 0x8000000000000000) == 0)
                  LODWORD(v13) = v49;
                else
                  LODWORD(v13) = -v49;
              }
              else
              {
                LODWORD(v13) = 0;
              }
            }
            if (*((_DWORD *)v28 + 20))
            {
              result = JSC::VM::hasExceptionsAfterHandlingTraps(v28);
              if ((_DWORD)result)
                goto LABEL_98;
            }
            v5 = v13 >> 8;
            v12 = 1;
          }
          WTF::AtomStringImpl::addLiteral();
          v29 = v69;
          result = JSC::JSObject::get(v19, a2, (unint64_t)v69);
          v31 = result;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              result = WTF::StringImpl::destroy(v29, v30);
            else
              *(_DWORD *)v29 -= 2;
          }
          if (!*((_DWORD *)v7 + 20) || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v7), (result & 1) == 0))
          {
            if (v31 == 10)
            {
              v14 = 0;
              v15 = 0;
              v16 = 0;
              v8 = v60;
            }
            else
            {
              v69 = (WTF::StringImpl *)v31;
              v32 = (JSC::VM *)*((_QWORD *)a2 + 7);
              v8 = v60;
              if (v31 < 0xFFFE000000000000)
              {
                v44 = v31 - 0x2000000000000;
                if (v31 - 0x2000000000000 >= 0xFFFC000000000000)
                {
                  result = JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v69, a2);
                  v44 = v56;
                }
                v45 = (v44 >> 52) & 0x7FF;
                if ((v45 - 1023) <= 0x53)
                {
                  v50 = v44 >> (51 - (v44 >> 52));
                  if (v45 > 0x433)
                    LODWORD(v50) = v44 << ((v44 >> 52) - 51);
                  if (v45 >= 0x41F)
                    v51 = v50;
                  else
                    v51 = (((1 << ((v44 >> 52) + 1)) - 1) & v50) + (1 << ((v44 >> 52) + 1));
                  if ((v44 & 0x8000000000000000) == 0)
                    LODWORD(v31) = v51;
                  else
                    LODWORD(v31) = -v51;
                }
                else
                {
                  LODWORD(v31) = 0;
                }
              }
              if (*((_DWORD *)v32 + 20))
              {
                result = JSC::VM::hasExceptionsAfterHandlingTraps(v32);
                if ((_DWORD)result)
                  goto LABEL_98;
              }
              v16 = v31 & 0xFFFFFF00;
              v15 = v31;
              v14 = 1;
            }
            v3 = v58;
            v10 = v59;
            v4 = v57;
            goto LABEL_42;
          }
        }
      }
    }
LABEL_98:
    v33 = 1;
    goto LABEL_43;
  }
  v8 = 0;
  LOBYTE(v9) = 0;
  v10 = 0;
  LOBYTE(v11) = 0;
  v12 = 0;
  LOBYTE(v13) = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
LABEL_42:
  v33 = 0;
  *(_DWORD *)(v6 + 4) = v9 | (v3 << 8);
  *(_BYTE *)(v6 + 8) = v8;
  *(_WORD *)(v6 + 9) = v67;
  *(_BYTE *)(v6 + 11) = v68;
  *(_DWORD *)(v6 + 12) = v11 | (v4 << 8);
  *(_BYTE *)(v6 + 16) = v10;
  *(_WORD *)(v6 + 17) = v65;
  *(_BYTE *)(v6 + 19) = v66;
  *(_DWORD *)(v6 + 20) = v13 | (v5 << 8);
  *(_BYTE *)(v6 + 24) = v12;
  *(_BYTE *)(v6 + 27) = v64;
  *(_WORD *)(v6 + 25) = v63;
  *(_DWORD *)(v6 + 28) = v16 | v15;
  *(_BYTE *)(v6 + 32) = v14;
  *(_BYTE *)(v6 + 35) = v62;
  *(_WORD *)(v6 + 33) = v61;
LABEL_43:
  *(_DWORD *)(v6 + 36) = v33;
  return result;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSMerchantValidationEvent>::construct(JSC *this, uint64_t a2)
{
  JSC::VM *v3;
  unint64_t v5;
  uint64_t v6;
  JSC::VM *v7;
  int v8;
  JSC::VM **v9;
  JSC::JSCell *v10;
  JSC::VM *v11;
  uint64_t Object;
  JSC::Structure *v13;
  WTF::StringImpl *v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  char v18;
  JSC::VM *v19;
  double v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  JSC::VM *v24;
  double v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  JSC::VM *v29;
  double v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  JSC::VM *v34;
  _DWORD *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  _DWORD *v39;
  WTF::StringImpl *v40;
  int v41;
  int v42;
  uint64_t v43;
  __int128 v44;
  WTF::StringImpl *v45;
  WebCore::JSDOMGlobalObject *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  JSC::VM *v50;
  void (***v51)(WebCore::MerchantValidationEvent *__hidden);
  uint64_t v52;
  unsigned int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char **v58;
  int v59;
  unint64_t v60;
  WebCore::JSEvent *v61;
  JSC::JSCell *v62;
  unint64_t Structure;
  JSC::Structure *v64;
  JSC::JSCell *v65;
  uint64_t v66;
  JSCell *v67;
  _DWORD *v68;
  JSC::JSCell *v69;
  JSC::JSGlobalObject *v70;
  JSC::JSObject *v71;
  JSC::JSGlobalObject *v72;
  JSC::VM *v73;
  WebCore::JSDOMGlobalObject *v74;
  JSC::Structure *v75;
  JSC::VM *FunctionRealm;
  uint64_t v77;
  unsigned int v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char **v83;
  int v84;
  JSC::JSCell *v85;
  unint64_t v86;
  JSC::Structure *v87;
  JSC::JSCell *v88;
  uint64_t v89;
  unint64_t SubclassStructure;
  JSValue v92;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  JSValue v96;
  int hasExceptionsAfterHandlingTraps;
  BOOL v98;
  int v99;
  uint64_t v100;
  int *v101;
  int v102;
  BOOL v103;
  int v104;
  uint64_t v105;
  int *v106;
  int v107;
  BOOL v108;
  int v109;
  uint64_t v110;
  int *v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  WTF::StringImpl *v115[2];
  int v116[2];
  WTF::StringImpl *v117;
  int v118;
  __int16 v119;
  BOOL v120;
  __int128 v121;
  int v122;
  uint64_t v123;
  int v124;
  JSC::VM *v125;
  JSC::VM *v126;
  _QWORD v127[2];

  v3 = (JSC::VM *)*((_QWORD *)this + 7);
  v125 = v3;
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v92.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, this, v92);
  }
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(this, &v125, (uint64_t)"MerchantValidationEvent", 24);
  v7 = (JSC::VM *)v6;
  if (*(_BYTE *)(v6 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194D4D6A4);
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(this, *(_QWORD *)(a2 + 48), (uint64_t)&v123);
  v8 = v124;
  if (!v124)
  {
    v9 = (JSC::VM **)MEMORY[0x1E0CBF738];
    if ((unint64_t)(*(int *)(a2 + 32) - 3) >= 0xFFFFFFFFFFFFFFFELL)
    {
      v126 = (JSC::VM *)*((_QWORD *)this + 7);
    }
    else
    {
      v10 = *(JSC::JSCell **)(a2 + 56);
      v11 = (JSC::VM *)*((_QWORD *)this + 7);
      v126 = v11;
      if (((unint64_t)v10 & 0xFFFFFFFFFFFFFFF7) != 2)
      {
        if (((unint64_t)v10 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v10)) == 0)
        {
          JSC::throwTypeError();
          goto LABEL_143;
        }
        v13 = (JSC::Structure *)Object;
        v113 = v5;
        WTF::AtomStringImpl::addLiteral();
        v5 = JSC::JSObject::get(v13, this, *(unint64_t *)v116);
        if (*(_QWORD *)v116)
        {
          if (**(_DWORD **)v116 == 2)
            WTF::StringImpl::destroy(*(WTF::StringImpl **)v116, v14);
          else
            **(_DWORD **)v116 -= 2;
        }
        if (*((_DWORD *)v11 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v11) & 1) != 0)
        {
LABEL_143:
          v67 = 0;
          v42 = 1;
          v122 = 1;
LABEL_122:
          ((void (*)(int *, __int16 *))off_1E32BEA90[v42])(v116, &v119);
LABEL_123:
          v8 = v124;
          goto LABEL_124;
        }
        if (v5 == 10)
        {
          v15 = 0;
          while (1)
          {
            WTF::AtomStringImpl::addLiteral();
            v21 = *(WTF::StringImpl **)v116;
            v23 = JSC::JSObject::get(v13, this, *(unint64_t *)v116);
            if (v21)
            {
              if (*(_DWORD *)v21 == 2)
                WTF::StringImpl::destroy(v21, v22);
              else
                *(_DWORD *)v21 -= 2;
            }
            if (*((_DWORD *)v11 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v11) & 1) != 0)
              goto LABEL_143;
            if (v23 == 10)
            {
              v16 = 0;
              goto LABEL_37;
            }
            v24 = (JSC::VM *)*((_QWORD *)this + 7);
            if (v23 >= 0xFFFE000000000000)
              break;
            *(_QWORD *)&v25 = v23 - 0x2000000000000;
            if (v23 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
            {
              if ((v23 & 0xFFFE000000000002) != 0)
              {
                v16 = v23 == 7;
                goto LABEL_36;
              }
              v104 = *(unsigned __int8 *)(v23 + 5);
              if (v104 == 3)
              {
                v107 = *(_DWORD *)(v23 + 8);
                goto LABEL_226;
              }
              if (v104 == 2)
              {
                v105 = *(_QWORD *)(v23 + 8);
                if ((v105 & 1) != 0)
                  v106 = (int *)(v23 + 16);
                else
                  v106 = (int *)(v105 + 4);
                v107 = *v106;
LABEL_226:
                v103 = v107 == 0;
              }
              else
              {
                if ((*(_BYTE *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0xA) & 1) == 0)
                {
LABEL_228:
                  v16 = 1;
                  goto LABEL_36;
                }
                v103 = *(_QWORD *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
              }
LABEL_238:
              v16 = !v103;
              goto LABEL_36;
            }
            if (v25 > 0.0)
              goto LABEL_228;
            v16 = v25 < 0.0;
LABEL_36:
            if (*((_DWORD *)v24 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v24) & 1) != 0)
              goto LABEL_143;
LABEL_37:
            WTF::AtomStringImpl::addLiteral();
            v26 = *(WTF::StringImpl **)v116;
            v28 = JSC::JSObject::get(v13, this, *(unint64_t *)v116);
            if (v26)
            {
              if (*(_DWORD *)v26 == 2)
                WTF::StringImpl::destroy(v26, v27);
              else
                *(_DWORD *)v26 -= 2;
            }
            if (*((_DWORD *)v11 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v11) & 1) != 0)
              goto LABEL_143;
            if (v28 == 10)
            {
              v17 = 0;
              goto LABEL_48;
            }
            v29 = (JSC::VM *)*((_QWORD *)this + 7);
            if (v28 >= 0xFFFE000000000000)
            {
              v108 = (_DWORD)v28 == 0;
              goto LABEL_242;
            }
            *(_QWORD *)&v30 = v28 - 0x2000000000000;
            if (v28 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
            {
              if ((v28 & 0xFFFE000000000002) != 0)
              {
                v17 = v28 == 7;
                goto LABEL_47;
              }
              v109 = *(unsigned __int8 *)(v28 + 5);
              if (v109 == 3)
              {
                v112 = *(_DWORD *)(v28 + 8);
              }
              else
              {
                if (v109 != 2)
                {
                  if ((*(_BYTE *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0xA) & 1) == 0)
                  {
LABEL_232:
                    v17 = 1;
                    goto LABEL_47;
                  }
                  v108 = *(_QWORD *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
                  goto LABEL_242;
                }
                v110 = *(_QWORD *)(v28 + 8);
                if ((v110 & 1) != 0)
                  v111 = (int *)(v28 + 16);
                else
                  v111 = (int *)(v110 + 4);
                v112 = *v111;
              }
              v108 = v112 == 0;
LABEL_242:
              v17 = !v108;
              goto LABEL_47;
            }
            if (v30 > 0.0)
              goto LABEL_232;
            v17 = v30 < 0.0;
LABEL_47:
            if (*((_DWORD *)v29 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v29) & 1) != 0)
              goto LABEL_143;
LABEL_48:
            WTF::AtomStringImpl::addLiteral();
            v31 = *(WTF::StringImpl **)v116;
            v33 = JSC::JSObject::get(v13, this, *(unint64_t *)v116);
            if (v31)
            {
              if (*(_DWORD *)v31 == 2)
                WTF::StringImpl::destroy(v31, v32);
              else
                *(_DWORD *)v31 -= 2;
            }
            if (*((_DWORD *)v11 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v11) & 1) != 0)
              goto LABEL_143;
            if (v33 == 10)
            {
              v18 = 0;
              v5 = v113;
              v9 = (JSC::VM **)MEMORY[0x1E0CBF738];
LABEL_17:
              v11 = *v9;
              if (*v9)
                *(_DWORD *)v11 += 2;
              LODWORD(v117) = 0;
              *(_QWORD *)v116 = 0;
              if ((v18 & 1) != 0)
                goto LABEL_69;
              v113 = v5;
              goto LABEL_63;
            }
            v114 = v33;
            v34 = (JSC::VM *)*((_QWORD *)this + 7);
            if ((v33 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v33 + 5) != 2)
            {
              JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v114, this);
              goto LABEL_60;
            }
            v35 = *(_DWORD **)(v33 + 8);
            if ((v35 & 1) != 0)
            {
              v35 = *(_DWORD **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v33, this);
              if (!v35)
                goto LABEL_59;
LABEL_58:
              *v35 += 2;
              goto LABEL_59;
            }
            if (v35)
              goto LABEL_58;
LABEL_59:
            v127[0] = v35;
LABEL_60:
            if (*((_DWORD *)v34 + 20))
            {
              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v34);
              v11 = (JSC::VM *)v127[0];
              if (hasExceptionsAfterHandlingTraps)
              {
                v42 = 1;
                LODWORD(v117) = 1;
                v127[0] = 0;
                if (v11)
                {
                  if (*(_DWORD *)v11 == 2)
                    WTF::StringImpl::destroy(v11, v40);
                  else
                    *(_DWORD *)v11 -= 2;
                }
                v11 = 0;
                goto LABEL_190;
              }
            }
            else
            {
              v11 = (JSC::VM *)v127[0];
            }
            LODWORD(v117) = 0;
            *(_QWORD *)v116 = 0;
LABEL_63:
            WTF::AtomStringImpl::addLiteral();
            v36 = (WTF::StringImpl *)v114;
            v38 = JSC::JSObject::get(v13, this, v114);
            if (v36)
            {
              if (*(_DWORD *)v36 == 2)
                WTF::StringImpl::destroy(v36, v37);
              else
                *(_DWORD *)v36 -= 2;
            }
            if (*((_DWORD *)v126 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v126))
            {
              v42 = 1;
LABEL_190:
              v122 = 1;
              v5 = v113;
              v13 = (JSC::Structure *)off_1E32BEA70;
              goto LABEL_76;
            }
            v5 = v113;
            if (v38 == 10)
            {
              v9 = (JSC::VM **)MEMORY[0x1E0CBF738];
LABEL_69:
              v39 = *v9;
              v13 = (JSC::Structure *)off_1E32BEA70;
              if (*v9)
                *v39 += 2;
              LODWORD(v115[0]) = 0;
LABEL_74:
              v42 = 0;
              v41 = 0;
              v114 = 0;
              LOBYTE(v119) = v15;
              HIBYTE(v119) = v16;
              v120 = v17;
              *(_QWORD *)&v121 = v11;
              *((_QWORD *)&v121 + 1) = v39;
              v122 = 0;
              v11 = 0;
LABEL_75:
              ((void (*)(_QWORD *, unint64_t *))off_1E32BEA70[v41])(v127, &v114);
              goto LABEL_76;
            }
            WebCore::valueToUSVString(this, v38, (uint64_t)&v114);
            v41 = (int)v115[0];
            if (!LODWORD(v115[0]))
            {
              v39 = (_DWORD *)v114;
              v13 = (JSC::Structure *)off_1E32BEA70;
              goto LABEL_74;
            }
            v42 = 1;
            v122 = 1;
            v13 = (JSC::Structure *)off_1E32BEA70;
            if (LODWORD(v115[0]) != -1)
              goto LABEL_75;
LABEL_76:
            if ((_DWORD)v117 != -1)
              ((void (*)(unint64_t *, int *))off_1E32BEA70[v117])(&v114, v116);
            if (!v11)
              goto LABEL_81;
            if (*(_DWORD *)v11 != 2)
            {
              *(_DWORD *)v11 -= 2;
LABEL_81:
              if (v42)
                goto LABEL_128;
              goto LABEL_82;
            }
            WTF::StringImpl::destroy(v11, v40);
            v42 = v122;
            if (v122)
            {
LABEL_128:
              v67 = 0;
              if (v42 == -1)
                goto LABEL_123;
              goto LABEL_122;
            }
LABEL_82:
            if (!v124)
            {
              v43 = v123;
              v123 = 0;
              v127[0] = v43;
              LOWORD(v114) = v119;
              BYTE2(v114) = v120;
              v44 = v121;
              v121 = 0uLL;
              *(_OWORD *)v115 = v44;
              WebCore::MerchantValidationEvent::create((JSC::VM *)((char *)v7 - 192), v127, (unsigned __int8 *)&v114, (uint64_t)v116);
              v47 = v115[1];
              v115[1] = 0;
              if (v47)
              {
                if (*(_DWORD *)v47 == 2)
                  WTF::StringImpl::destroy(v47, v45);
                else
                  *(_DWORD *)v47 -= 2;
              }
              v48 = v115[0];
              v115[0] = 0;
              if (v48)
              {
                if (*(_DWORD *)v48 == 2)
                  WTF::StringImpl::destroy(v48, v45);
                else
                  *(_DWORD *)v48 -= 2;
              }
              v49 = (WTF::StringImpl *)v127[0];
              v127[0] = 0;
              if (v49)
              {
                if (*(_DWORD *)v49 == 2)
                  WTF::StringImpl::destroy(v49, v45);
                else
                  *(_DWORD *)v49 -= 2;
              }
              v7 = v125;
              if (*((_DWORD *)v125 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v125) & 1) != 0)
                goto LABEL_162;
              if (!v118)
              {
                v50 = *(JSC::VM **)(v5 + 40);
                v51 = *(void (****)(WebCore::MerchantValidationEvent *__hidden))v116;
                *(_QWORD *)v116 = 0;
                v114 = (unint64_t)v51;
                if (*v51 != off_1E33649B0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x194D4D754);
                }
                v52 = *((_QWORD *)v50 + 412);
                if (!v52)
                  goto LABEL_101;
                v53 = *(_DWORD *)(v52 - 8);
                v54 = ((unint64_t)&WebCore::JSMerchantValidationEvent::s_info
                     + ~((_QWORD)&WebCore::JSMerchantValidationEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSMerchantValidationEvent::s_info
                                                                                       + ~((_QWORD)&WebCore::JSMerchantValidationEvent::s_info << 32)) >> 22);
                v55 = 9 * ((v54 + ~(v54 << 13)) ^ ((v54 + ~(v54 << 13)) >> 8));
                v56 = (v55 ^ (v55 >> 15)) + ~((v55 ^ (v55 >> 15)) << 27);
                v57 = v53 & ((v56 >> 31) ^ v56);
                v58 = *(char ***)(v52 + 16 * v57);
                if (v58 == &WebCore::JSMerchantValidationEvent::s_info)
                {
LABEL_100:
                  v60 = *(_QWORD *)(v52 + 16 * v57 + 8);
                  if (!v60)
                    goto LABEL_101;
                }
                else
                {
                  v59 = 1;
                  while (v58)
                  {
                    v57 = ((_DWORD)v57 + v59) & v53;
                    v58 = *(char ***)(v52 + 16 * v57);
                    ++v59;
                    if (v58 == &WebCore::JSMerchantValidationEvent::s_info)
                      goto LABEL_100;
                  }
LABEL_101:
                  v61 = (WebCore::JSEvent *)*((_QWORD *)v50 + 7);
                  v62 = (JSC::JSCell *)WebCore::JSEvent::prototype(v61, v50, v46);
                  Structure = WebCore::JSMerchantValidationEventPrototype::createStructure((uint64_t *)v61, (uint64_t)v50, v62);
                  *(_DWORD *)(Structure + 16) |= 0x80000u;
                  v65 = (JSC::JSCell *)WebCore::JSMerchantValidationEventPrototype::create(v61, v50, Structure, v64);
                  v66 = WebCore::JSMerchantValidationEvent::createStructure((uint64_t *)v61, (uint64_t)v50, v65);
                  v60 = WebCore::cacheDOMStructure((JSCell *)v50, v66, (uint64_t)&WebCore::JSMerchantValidationEvent::s_info);
                }
                v67 = (JSCell *)WebCore::JSMerchantValidationEvent::create(v60, v50, (uint64_t *)&v114);
                WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)v50 + 415), (uint64_t)v51, (uint64_t)v67);
                v68 = (_DWORD *)v114;
                v114 = 0;
                if (v68)
                {
                  if (v68[4] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v68 + 8))(v68);
                  else
                    --v68[4];
                }
LABEL_105:
                if (*((_DWORD *)v7 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v7) & 1) != 0)
                {
LABEL_162:
                  v67 = 0;
                  goto LABEL_120;
                }
                v69 = *(JSC::JSCell **)(a2 + 40);
                if (((unint64_t)v69 & 0xFFFE000000000002) != 0
                  || (v70 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v69)) == 0
                  || (v72 = v70, v70 == *(JSC::JSGlobalObject **)(a2 + 24))
                  || (v73 = (JSC::VM *)*((_QWORD *)this + 7),
                      FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(this, v70, v71),
                      *((_DWORD *)v73 + 20))
                  && (JSC::VM::hasExceptionsAfterHandlingTraps(v73) & 1) != 0)
                {
LABEL_119:
                  if (*((_DWORD *)v7 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v7) & 1) != 0)
                    goto LABEL_162;
LABEL_120:
                  if (v118 != -1)
                    ((void (*)(unint64_t *, int *))off_1E32BEA80[v118])(&v114, v116);
                  goto LABEL_122;
                }
                v77 = *((_QWORD *)FunctionRealm + 412);
                if (v77)
                {
                  v78 = *(_DWORD *)(v77 - 8);
                  v79 = ((unint64_t)&WebCore::JSMerchantValidationEvent::s_info
                       + ~((_QWORD)&WebCore::JSMerchantValidationEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSMerchantValidationEvent::s_info
                                                                                         + ~((_QWORD)&WebCore::JSMerchantValidationEvent::s_info << 32)) >> 22);
                  v80 = 9 * ((v79 + ~(v79 << 13)) ^ ((v79 + ~(v79 << 13)) >> 8));
                  v81 = (v80 ^ (v80 >> 15)) + ~((v80 ^ (v80 >> 15)) << 27);
                  v82 = v78 & ((v81 >> 31) ^ v81);
                  v83 = *(char ***)(v77 + 16 * v82);
                  if (v83 != &WebCore::JSMerchantValidationEvent::s_info)
                  {
                    v84 = 1;
                    while (v83)
                    {
                      v82 = ((_DWORD)v82 + v84) & v78;
                      v83 = *(char ***)(v77 + 16 * v82);
                      ++v84;
                      if (v83 == &WebCore::JSMerchantValidationEvent::s_info)
                        goto LABEL_115;
                    }
                    goto LABEL_116;
                  }
LABEL_115:
                  v74 = *(WebCore::JSDOMGlobalObject **)(v77 + 16 * v82 + 8);
                  if (!v74)
                    goto LABEL_116;
                }
                else
                {
LABEL_116:
                  v85 = (JSC::JSCell *)WebCore::JSEvent::prototype(v73, FunctionRealm, v74);
                  v86 = WebCore::JSMerchantValidationEventPrototype::createStructure((uint64_t *)v73, (uint64_t)FunctionRealm, v85);
                  *(_DWORD *)(v86 + 16) |= 0x80000u;
                  v88 = (JSC::JSCell *)WebCore::JSMerchantValidationEventPrototype::create(v73, FunctionRealm, v86, v87);
                  v89 = WebCore::JSMerchantValidationEvent::createStructure((uint64_t *)v73, (uint64_t)FunctionRealm, v88);
                  v74 = (WebCore::JSDOMGlobalObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v89, (uint64_t)&WebCore::JSMerchantValidationEvent::s_info);
                }
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, v72, v74, v75);
                if (!*((_DWORD *)v73 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v73) & 1) == 0)
                  JSC::JSObject::setStructure(v67, v73, SubclassStructure);
                goto LABEL_119;
              }
              if (v118 == 1)
              {
                v94 = (WTF::StringImpl *)LOBYTE(v116[0]);
                LOBYTE(v114) = v116[0];
                v95 = v117;
                v117 = 0;
                v115[0] = v95;
                if (!*((_QWORD *)v7 + 2))
                {
                  v96.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v116[0]), (JSC::JSGlobalObject *)v115);
                  JSC::VM::throwException(v7, this, v96);
                  v95 = v115[0];
                }
                v115[0] = 0;
                if (v95)
                {
                  if (*(_DWORD *)v95 == 2)
                    WTF::StringImpl::destroy(v95, v94);
                  else
                    *(_DWORD *)v95 -= 2;
                }
                v67 = 0;
                goto LABEL_105;
              }
            }
            v19 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_194:
            v98 = (_DWORD)v5 == 0;
LABEL_234:
            v15 = !v98;
LABEL_25:
            if (*((_DWORD *)v19 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v19) & 1) != 0)
              goto LABEL_143;
          }
          v103 = (_DWORD)v23 == 0;
          goto LABEL_238;
        }
        v19 = (JSC::VM *)*((_QWORD *)this + 7);
        if (v5 >= 0xFFFE000000000000)
          goto LABEL_194;
        *(_QWORD *)&v20 = v5 - 0x2000000000000;
        if (v5 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          if (v20 <= 0.0)
          {
            v15 = v20 < 0.0;
            goto LABEL_25;
          }
        }
        else
        {
          if ((v5 & 0xFFFE000000000002) != 0)
          {
            v15 = v5 == 7;
            goto LABEL_25;
          }
          v99 = *(unsigned __int8 *)(v5 + 5);
          if (v99 == 3)
          {
            v102 = *(_DWORD *)(v5 + 8);
LABEL_222:
            v98 = v102 == 0;
            goto LABEL_234;
          }
          if (v99 == 2)
          {
            v100 = *(_QWORD *)(v5 + 8);
            if ((v100 & 1) != 0)
              v101 = (int *)(v5 + 16);
            else
              v101 = (int *)(v100 + 4);
            v102 = *v101;
            goto LABEL_222;
          }
          if ((*(_BYTE *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0xA) & 1) != 0)
          {
            v98 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
            goto LABEL_234;
          }
        }
        v15 = 1;
        goto LABEL_25;
      }
    }
    v13 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 1;
    goto LABEL_17;
  }
  v67 = 0;
LABEL_124:
  if (v8 != -1)
    ((void (*)(__int16 *, uint64_t *))off_1E32BEAA0[v8])(&v119, &v123);
  return v67;
}

uint64_t WebCore::JSMerchantValidationEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSMerchantValidationEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSMerchantValidationEventPrototype::create(WebCore::JSMerchantValidationEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>(this, (uint64_t)&WebCore::JSMerchantValidationEvent::s_info, &WebCore::JSMerchantValidationEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSMerchantValidationEvent>,(WebCore::DOMConstructorID)176>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1408);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSMerchantValidationEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSMerchantValidationEvent::s_info
         + ~((_QWORD)&WebCore::JSMerchantValidationEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSMerchantValidationEvent::s_info
                                                                           + ~((_QWORD)&WebCore::JSMerchantValidationEvent::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSMerchantValidationEvent::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSMerchantValidationEvent::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEvent::prototype((WebCore::JSEvent *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSMerchantValidationEventPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSMerchantValidationEventPrototype::create((WebCore::JSMerchantValidationEventPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSMerchantValidationEvent::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSMerchantValidationEvent::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1408) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsMerchantValidationEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSMerchantValidationEventPrototype::s_info != (char **)(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                         + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSMerchantValidationEvent>,(WebCore::DOMConstructorID)176>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsMerchantValidationEvent_methodName(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 80);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsMerchantValidationEvent_validationURL(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 88);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::JSMerchantValidationEvent::subspaceForImpl(WebCore::JSMerchantValidationEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 1432);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 1432))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 1432);
    *(_QWORD *)(v8 + 1432) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 1432);
  *(_QWORD *)(v3 + 1432) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSMessageChannel::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 88);
  if (!v2 || !*(_BYTE *)(v2 + 24))
    return WebCore::JSMessageChannel::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
  result = 75;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSMessageChannel::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSMessageChannel::visitChildren(uint64_t a1, uint64_t a2)
{
  JSC::JSObject::visitChildren();
  return WebCore::JSMessageChannel::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
}

uint64_t WebCore::JSMessageChannel::visitChildren(WebCore::JSMessageChannel *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren();
    result = WebCore::JSMessageChannel::visitAdditionalChildren<JSC::AbstractSlotVisitor>((uint64_t)this, (uint64_t)a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t WebCore::JSMessageChannelPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSMessageChannelPrototype::create(WebCore::JSMessageChannelPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSMessageChannel::s_info, &WebCore::JSMessageChannelPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSMessageChannel>,(WebCore::DOMConstructorID)458>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v6;
  JSC::JSCell *v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char **v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3664);
  if (v2)
    return v2;
  v6 = (uint64_t *)(a1 + 40136);
  v7 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v7 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v7);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v6;
  if (*v6 < (unint64_t)v6[1])
    goto LABEL_7;
  SlowCase = v6[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v6[3];
    v6[1] = SlowCase + HIDWORD(v32);
    v6[2] = SlowCase + (int)v32;
LABEL_7:
    *v6 = SlowCase + 128;
    goto LABEL_8;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_8:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v34, &WebCore::JSDOMConstructor<WebCore::JSMessageChannel>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v6[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_11;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v33);
    v10[2848] = v2 + (int)v33;
LABEL_11:
    v10[2846] = v2 + 48;
    goto LABEL_12;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_12:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v6[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v34);
  v14 = v34;
  v34 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v6[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v34);
  v16 = *(_QWORD *)(v6[227] + 2160);
  v17 = *(_QWORD *)(a2 + 3296);
  if (v17)
  {
    v18 = *(_DWORD *)(v17 - 8);
    v19 = ((unint64_t)&WebCore::JSMessageChannel::s_info + ~((_QWORD)&WebCore::JSMessageChannel::s_info << 32)) ^ (((unint64_t)&WebCore::JSMessageChannel::s_info + ~((_QWORD)&WebCore::JSMessageChannel::s_info << 32)) >> 22);
    v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
    v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
    v22 = v18 & ((v21 >> 31) ^ v21);
    v23 = *(char ***)(v17 + 16 * v22);
    if (v23 == &WebCore::JSMessageChannel::s_info)
    {
LABEL_18:
      v24 = *(_QWORD *)(v17 + 16 * v22 + 8);
      if (v24)
        goto LABEL_20;
    }
    else
    {
      v31 = 1;
      while (v23)
      {
        v22 = ((_DWORD)v22 + v31) & v18;
        v23 = *(char ***)(v17 + 16 * v22);
        ++v31;
        if (v23 == &WebCore::JSMessageChannel::s_info)
          goto LABEL_18;
      }
    }
  }
  Structure = WebCore::JSMessageChannelPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSMessageChannelPrototype::create((WebCore::JSMessageChannelPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSMessageChannel::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSMessageChannel::s_info);
LABEL_20:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3664) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsMessageChannelConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSMessageChannelPrototype::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSMessageChannel>,(WebCore::DOMConstructorID)458>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsMessageChannel_port1(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::MessagePort>(a1, *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8));
}

unint64_t WebCore::jsMessageChannel_port2(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::MessagePort>(a1, *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16));
}

uint64_t WebCore::JSMessageChannelOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

uint64_t WebCore::JSMessageEvent::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t result;

  v4 = a2[11];
  if (v4 && *(_BYTE *)(v4 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    v5 = *(uint64_t **)(*(_QWORD *)(a1 + 24) + 152);
    if (!v5 || (v5[1] & 3) != 0)
      v6 = 0;
    else
      v6 = *v5;
    (*(void (**)(_QWORD *, uint64_t))(*a2 + 24))(a2, v6);
    v7 = *(uint64_t **)(*(_QWORD *)(a1 + 24) + 168);
    if (!v7 || (v7[1] & 3) != 0)
      v8 = 0;
    else
      v8 = *v7;
    (*(void (**)(_QWORD *, uint64_t))(*a2 + 24))(a2, v8);
    v9 = *(uint64_t **)(*(_QWORD *)(a1 + 24) + 184);
    if (!v9 || (v9[1] & 3) != 0)
      v10 = 0;
    else
      v10 = *v9;
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 24))(a2, v10);
  }
  return result;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSMessageEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  WTF::StringImpl *v6;
  int v7;
  JSC::JSCell *v8;
  JSC::VM *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t Object;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  JSC::VM *v17;
  double v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  JSC::VM *v21;
  double v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  JSC::VM *v25;
  double v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  JSC::VM *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  int v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  __int128 v48;
  int v49;
  uint64_t v50;
  int v51;
  WTF *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  int v55;
  WTF::StringImpl *v56;
  __int128 v57;
  int v58;
  uint64_t v59;
  void (***v60)(WebCore::MessageEvent *__hidden);
  void *v61;
  WebCore::JSDOMGlobalObject *v62;
  WTF *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  JSCell *v67;
  JSC::JSCell *v68;
  JSC::JSGlobalObject *v69;
  JSC::JSObject *v70;
  JSC::JSGlobalObject *v71;
  WebCore::JSEvent *v72;
  JSC::VM *FunctionRealm;
  JSC::JSObject *v74;
  JSC::Structure *v75;
  unint64_t SubclassStructure;
  _DWORD *v77;
  JSValue v79;
  int hasExceptionsAfterHandlingTraps;
  uint64_t *v81;
  uint64_t v82;
  BOOL v83;
  int v84;
  uint64_t v85;
  int *v86;
  int v87;
  BOOL v88;
  int v89;
  uint64_t v90;
  int *v91;
  int v92;
  BOOL v93;
  int v94;
  uint64_t v95;
  int *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  JSC::VM *v100;
  uint64_t v101;
  __int16 v102;
  char v103;
  uint64_t v104;
  __int128 v105;
  char v106[8];
  int v107;
  char v108;
  WTF *v109;
  uint64_t v110;
  int v111;
  WTF::StringImpl *v112;
  int v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  WTF::StringImpl *v117;
  int v118;
  uint64_t v119;
  int v120;
  __int16 v121;
  char v122;
  uint64_t v123;
  WTF::StringImpl *v124[2];
  char v125[8];
  int v126;
  unsigned __int8 v127;
  WTF *v128;
  uint64_t v129;
  JSC::VM *v130;
  char *v131;
  unint64_t v132;
  char v133[8];
  int v134;
  unsigned __int8 v135;
  int v136;
  WTF::StringImpl *v137;
  int v138;
  char v139;
  int v140;
  uint64_t v141;

  v141 = *MEMORY[0x1E0C80C00];
  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v79.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, a1, v79);
  }
  v5 = *(_QWORD *)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v112);
  v7 = v113;
  if (v113)
  {
    v67 = 0;
    goto LABEL_193;
  }
  v101 = v5;
  if ((unint64_t)(*(int *)(a2 + 32) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v10 = 0;
    v9 = (JSC::VM *)*((_QWORD *)a1 + 7);
    v130 = v9;
    LODWORD(v11) = 1;
  }
  else
  {
    v8 = *(JSC::JSCell **)(a2 + 56);
    v9 = (JSC::VM *)*((_QWORD *)a1 + 7);
    v130 = v9;
    if (((unint64_t)v8 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v10 = 0;
      LODWORD(v11) = 1;
    }
    else
    {
      if (((unint64_t)v8 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v8)) == 0)
      {
        JSC::throwTypeError();
        v67 = 0;
        v55 = 1;
        v111 = 1;
        goto LABEL_191;
      }
      v10 = Object;
      LODWORD(v11) = 0;
    }
  }
  v100 = v3;
  v121 = 0;
  v122 = 0;
  v127 = 0;
  v128 = 0;
  v129 = 0;
  v124[0] = 0;
  v124[1] = 0;
  v123 = 0;
  v125[0] = 0;
  v13 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
  if ((v11 & 1) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v14 = (WTF::StringImpl *)v132;
    v16 = JSC::JSObject::get((JSC::Structure *)v10, a1, v132);
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v15);
      else
        *(_DWORD *)v14 -= 2;
    }
    if (!*((_DWORD *)v9 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v9))
    {
      if (v16 == 10)
      {
        LOBYTE(v16) = 0;
        goto LABEL_23;
      }
      v17 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v16 >= 0xFFFE000000000000)
        goto LABEL_267;
      *(_QWORD *)&v18 = v16 - 0x2000000000000;
      if (v16 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        LODWORD(v16) = v18 > 0.0 || v18 < 0.0;
        goto LABEL_22;
      }
      if ((v16 & 0xFFFE000000000002) != 0)
      {
        LODWORD(v16) = v16 == 7;
        goto LABEL_22;
      }
      v84 = *(unsigned __int8 *)(v16 + 5);
      if (v84 == 3)
      {
        v87 = *(_DWORD *)(v16 + 8);
      }
      else
      {
        if (v84 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0xA) & 1) != 0)
          {
            v83 = *(_QWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
            goto LABEL_308;
          }
          LODWORD(v16) = 1;
          goto LABEL_22;
        }
        v85 = *(_QWORD *)(v16 + 8);
        if ((v85 & 1) != 0)
          v86 = (int *)(v16 + 16);
        else
          v86 = (int *)(v85 + 4);
        v87 = *v86;
      }
      v83 = v87 == 0;
      goto LABEL_308;
    }
    goto LABEL_251;
  }
  v123 = 2;
LABEL_56:
  v31 = *v13;
  if (*v13)
    *(_DWORD *)v31 += 2;
LABEL_66:
  v120 = 0;
  v119 = 0;
  v34 = v124[1];
  v124[1] = v31;
  if (!v34)
  {
LABEL_69:
    if (!(_DWORD)v11)
      goto LABEL_70;
LABEL_75:
    v36 = *v13;
    if (*v13)
      *(_DWORD *)v36 += 2;
    v118 = 0;
LABEL_80:
    v117 = 0;
    v38 = v124[0];
    v124[0] = v36;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
      {
        WTF::StringImpl::destroy(v38, v6);
        if ((_DWORD)v11)
          goto LABEL_89;
LABEL_84:
        WTF::AtomStringImpl::addLiteral();
        v39 = (WTF::StringImpl *)v132;
        v16 = JSC::JSObject::get((JSC::Structure *)v10, a1, v132);
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
            WTF::StringImpl::destroy(v39, v6);
          else
            *(_DWORD *)v39 -= 2;
        }
        if (*((_DWORD *)v9 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v9))
        {
          v111 = 1;
          v11 = (uint64_t)off_1E32BEA70;
LABEL_139:
          v37 = v118;
          goto LABEL_140;
        }
        if (v16 != 10)
        {
          WebCore::Detail::SequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::MessagePort>>>::convert(a1, v16, (uint64_t)&v114);
          v41 = v116;
          if (v116)
          {
            v111 = 1;
            v11 = (uint64_t)off_1E32BEA70;
LABEL_137:
            if (v41 != -1)
              ((void (*)(unint64_t *, unint64_t *))off_1E32BEC30[v41])(&v132, &v114);
            goto LABEL_139;
          }
          v16 = v114;
          v40 = v115;
          goto LABEL_92;
        }
LABEL_89:
        v16 = 0;
        v116 = 0;
        v40 = 0;
LABEL_92:
        v114 = 0;
        v115 = 0;
        v42 = (uint64_t *)v128;
        if (HIDWORD(v129))
        {
          v98 = v40;
          v43 = 8 * HIDWORD(v129);
          do
          {
            v42 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v42, v6)+ 1;
            v43 -= 8;
          }
          while (v43);
          v42 = (uint64_t *)v128;
          v40 = v98;
        }
        if (v42)
        {
          v128 = 0;
          LODWORD(v129) = 0;
          v99 = v40;
          WTF::fastFree((WTF *)v42, v6);
          v40 = v99;
        }
        v128 = (WTF *)v16;
        v129 = v40;
        if ((_DWORD)v11)
          goto LABEL_104;
        WTF::AtomStringImpl::addLiteral();
        v16 = v132;
        v10 = JSC::JSObject::get((JSC::Structure *)v10, a1, v132);
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v16, v6);
          else
            *(_DWORD *)v16 -= 2;
        }
        if (*((_DWORD *)v9 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v9))
        {
          v111 = 1;
          v11 = (uint64_t)off_1E32BEA70;
LABEL_136:
          v41 = v116;
          goto LABEL_137;
        }
        if ((v10 | 8) == 0xA)
        {
LABEL_104:
          v44 = 0;
          v133[0] = 0;
          v135 = 0;
          v136 = 0;
          LOBYTE(v137) = 0;
          v139 = 0;
        }
        else
        {
          WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::WindowProxy>,WebCore::IDLInterface<WebCore::MessagePort>,WebCore::IDLInterface<WebCore::ServiceWorker>>>::convert((uint64_t)&v137, (uint64_t)a1, v10);
          WebCore::Detail::ConversionResultStorage<std::optional<std::variant<WTF::RefPtr<WebCore::WindowProxy,WTF::RawPtrTraits<WebCore::WindowProxy>,WTF::DefaultRefDerefTraits<WebCore::WindowProxy>>,WTF::RefPtr<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,WTF::RefPtr<WebCore::ServiceWorker,WTF::RawPtrTraits<WebCore::ServiceWorker>,WTF::DefaultRefDerefTraits<WebCore::ServiceWorker>>>>>::ConversionResultStorage<std::variant<WTF::RefPtr<WebCore::WindowProxy,WTF::RawPtrTraits<WebCore::WindowProxy>,WTF::DefaultRefDerefTraits<WebCore::WindowProxy>>,WTF::RefPtr<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,WTF::RefPtr<WebCore::ServiceWorker,WTF::RawPtrTraits<WebCore::ServiceWorker>,WTF::DefaultRefDerefTraits<WebCore::ServiceWorker>>>>((uint64_t)&v132, (uint64_t)&v137);
          if (v140 != -1)
            ((void (*)(char **, int *))off_1E32BED68[v140])(&v131, &v138);
          v46 = v136;
          if (v136)
          {
            v111 = 1;
LABEL_134:
            v11 = (uint64_t)off_1E32BEA70;
            if (v46 != -1)
              ((void (*)(WTF::StringImpl **, char *))off_1E32BEC20[v46])(&v137, v133);
            goto LABEL_136;
          }
          v44 = v135;
          LOBYTE(v137) = 0;
          v139 = 0;
          if (v135)
          {
            v138 = -1;
            v47 = v134;
            if (v134 != -1)
            {
              ((void (*)(char **, WTF::StringImpl **, char *))off_1E32BEBF0[v134])(&v131, &v137, v133);
              v138 = v47;
            }
            v44 = 1;
            v139 = 1;
          }
        }
        v9 = (JSC::VM *)v125;
        if (v127 != v44)
        {
          if (v127)
          {
            if (v126 != -1)
              ((void (*)(char **, char *))off_1E32BEBD8[v126])(&v131, v125);
            v126 = -1;
            v127 = 0;
          }
          else
          {
            v125[0] = 0;
            v126 = -1;
            v45 = v138;
            if (v138 != -1)
            {
              ((void (*)(char **, char *, WTF::StringImpl **))off_1E32BEBF0[v138])(&v131, v125, &v137);
              v126 = v45;
            }
            v127 = 1;
          }
          goto LABEL_126;
        }
        if (!v127)
        {
LABEL_129:
          v102 = v121;
          v103 = v122;
          v104 = v123;
          v48 = *(_OWORD *)v124;
          v124[0] = 0;
          v124[1] = 0;
          v105 = v48;
          v106[0] = 0;
          v108 = 0;
          if (v127)
          {
            v107 = -1;
            v49 = v126;
            if (v126 != -1)
            {
              ((void (*)(WTF::StringImpl **, char *, char *))off_1E32BEBF0[v126])(&v137, v106, v125);
              v107 = v49;
            }
            v108 = 1;
          }
          v109 = v128;
          v50 = v129;
          v128 = 0;
          v129 = 0;
          v110 = v50;
          v111 = 0;
          v46 = v136;
          goto LABEL_134;
        }
        if (v126 == -1)
        {
          if (v138 == -1)
            goto LABEL_126;
        }
        else if (v138 == -1)
        {
          ((void (*)(char **, char *))off_1E32BEBD8[v126])(&v131, v125);
          v126 = -1;
LABEL_126:
          if (v139 && v138 != -1)
            ((void (*)(char **, WTF::StringImpl **))off_1E32BEBD8[v138])(&v131, &v137);
          goto LABEL_129;
        }
        v131 = v125;
        ((void (*)(char **, char *, WTF::StringImpl **))off_1E32BEC08[v138])(&v131, v125, &v137);
        goto LABEL_126;
      }
      *(_DWORD *)v38 -= 2;
    }
    if ((_DWORD)v11)
      goto LABEL_89;
    goto LABEL_84;
  }
  if (*(_DWORD *)v34 != 2)
  {
    *(_DWORD *)v34 -= 2;
    goto LABEL_69;
  }
  WTF::StringImpl::destroy(v34, v6);
  if ((_DWORD)v11)
    goto LABEL_75;
LABEL_70:
  WTF::AtomStringImpl::addLiteral();
  v35 = (WTF::StringImpl *)v132;
  v16 = JSC::JSObject::get((JSC::Structure *)v10, a1, v132);
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v6);
    else
      *(_DWORD *)v35 -= 2;
  }
  if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
  {
    v51 = 0;
LABEL_257:
    v111 = 1;
    v11 = (uint64_t)off_1E32BEA70;
LABEL_143:
    ((void (*)(unint64_t *, uint64_t *))off_1E32BEA70[v51])(&v132, &v119);
    goto LABEL_144;
  }
  if (v16 == 10)
    goto LABEL_75;
  WebCore::valueToUSVString(a1, v16, (uint64_t)&v117);
  v37 = v118;
  if (!v118)
  {
    v36 = v117;
    goto LABEL_80;
  }
  v111 = 1;
  v11 = (uint64_t)off_1E32BEA70;
LABEL_140:
  if (v37 != -1)
    ((void (*)(unint64_t *, WTF::StringImpl **))off_1E32BEA70[v37])(&v132, &v117);
  v51 = v120;
  if (v120 != -1)
    goto LABEL_143;
  while (1)
  {
LABEL_144:
    v52 = v128;
    if (!HIDWORD(v129))
    {
      if (!v128)
        goto LABEL_146;
LABEL_261:
      v128 = 0;
      LODWORD(v129) = 0;
      WTF::fastFree(v52, v6);
      goto LABEL_146;
    }
    v11 = 8 * HIDWORD(v129);
    do
    {
      v52 = (WTF *)(WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref((uint64_t *)v52, v6)+ 1);
      v11 -= 8;
    }
    while (v11);
    v52 = v128;
    if (v128)
      goto LABEL_261;
LABEL_146:
    if (v127)
    {
      if (v126 != -1)
        ((void (*)(unint64_t *, char *))off_1E32BEBD8[v126])(&v132, v125);
      v126 = -1;
    }
    v53 = v124[1];
    v124[1] = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2)
        WTF::StringImpl::destroy(v53, v6);
      else
        *(_DWORD *)v53 -= 2;
    }
    v54 = v124[0];
    v124[0] = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
        WTF::StringImpl::destroy(v54, v6);
      else
        *(_DWORD *)v54 -= 2;
    }
    v55 = v111;
    if (v111)
    {
      v67 = 0;
      goto LABEL_190;
    }
    if (!v113)
      break;
    v17 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_267:
    v83 = (_DWORD)v16 == 0;
LABEL_308:
    LODWORD(v16) = !v83;
LABEL_22:
    if (!*((_DWORD *)v17 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v17))
    {
LABEL_23:
      LOBYTE(v121) = v16;
      WTF::AtomStringImpl::addLiteral();
      v19 = (WTF::StringImpl *)v132;
      v16 = JSC::JSObject::get((JSC::Structure *)v10, a1, v132);
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v20);
        else
          *(_DWORD *)v19 -= 2;
      }
      if (*((_DWORD *)v9 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v9))
        goto LABEL_251;
      if (v16 == 10)
      {
        LOBYTE(v16) = 0;
        goto LABEL_34;
      }
      v21 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v16 >= 0xFFFE000000000000)
      {
        v88 = (_DWORD)v16 == 0;
        goto LABEL_312;
      }
      *(_QWORD *)&v22 = v16 - 0x2000000000000;
      if (v16 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        if (v22 <= 0.0)
        {
          LODWORD(v16) = v22 < 0.0;
          goto LABEL_33;
        }
      }
      else
      {
        if ((v16 & 0xFFFE000000000002) != 0)
        {
          LODWORD(v16) = v16 == 7;
          goto LABEL_33;
        }
        v89 = *(unsigned __int8 *)(v16 + 5);
        if (v89 == 3)
        {
          v92 = *(_DWORD *)(v16 + 8);
LABEL_300:
          v88 = v92 == 0;
          goto LABEL_312;
        }
        if (v89 == 2)
        {
          v90 = *(_QWORD *)(v16 + 8);
          if ((v90 & 1) != 0)
            v91 = (int *)(v16 + 16);
          else
            v91 = (int *)(v90 + 4);
          v92 = *v91;
          goto LABEL_300;
        }
        if ((*(_BYTE *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0xA) & 1) != 0)
        {
          v88 = *(_QWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
LABEL_312:
          LODWORD(v16) = !v88;
LABEL_33:
          if (*((_DWORD *)v21 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v21))
            goto LABEL_251;
LABEL_34:
          HIBYTE(v121) = v16;
          WTF::AtomStringImpl::addLiteral();
          v23 = (WTF::StringImpl *)v132;
          v16 = JSC::JSObject::get((JSC::Structure *)v10, a1, v132);
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v24);
            else
              *(_DWORD *)v23 -= 2;
          }
          if (*((_DWORD *)v9 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v9))
            goto LABEL_251;
          if (v16 == 10)
          {
            LOBYTE(v16) = 0;
            goto LABEL_45;
          }
          v25 = (JSC::VM *)*((_QWORD *)a1 + 7);
          if (v16 >= 0xFFFE000000000000)
          {
            v93 = (_DWORD)v16 == 0;
            goto LABEL_316;
          }
          *(_QWORD *)&v26 = v16 - 0x2000000000000;
          if (v16 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
          {
            if (v26 <= 0.0)
            {
              LODWORD(v16) = v26 < 0.0;
              goto LABEL_44;
            }
          }
          else
          {
            if ((v16 & 0xFFFE000000000002) != 0)
            {
              LODWORD(v16) = v16 == 7;
              goto LABEL_44;
            }
            v94 = *(unsigned __int8 *)(v16 + 5);
            if (v94 == 3)
            {
              v97 = *(_DWORD *)(v16 + 8);
LABEL_304:
              v93 = v97 == 0;
              goto LABEL_316;
            }
            if (v94 == 2)
            {
              v95 = *(_QWORD *)(v16 + 8);
              if ((v95 & 1) != 0)
                v96 = (int *)(v16 + 16);
              else
                v96 = (int *)(v95 + 4);
              v97 = *v96;
              goto LABEL_304;
            }
            if ((*(_BYTE *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0xA) & 1) != 0)
            {
              v93 = *(_QWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
LABEL_316:
              LODWORD(v16) = !v93;
LABEL_44:
              if (*((_DWORD *)v25 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v25))
                goto LABEL_251;
LABEL_45:
              v122 = v16;
              WTF::AtomStringImpl::addLiteral();
              v27 = (WTF::StringImpl *)v132;
              v16 = JSC::JSObject::get((JSC::Structure *)v10, a1, v132);
              if (v27)
              {
                if (*(_DWORD *)v27 == 2)
                  WTF::StringImpl::destroy(v27, v28);
                else
                  *(_DWORD *)v27 -= 2;
              }
              if (*((_DWORD *)v9 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v9))
                goto LABEL_251;
              v29 = 2;
              if (v16 != 10)
                v29 = v16;
              v123 = v29;
              WTF::AtomStringImpl::addLiteral();
              v30 = (WTF::StringImpl *)v132;
              v16 = JSC::JSObject::get((JSC::Structure *)v10, a1, v132);
              if (v30)
              {
                if (*(_DWORD *)v30 == 2)
                  WTF::StringImpl::destroy(v30, v6);
                else
                  *(_DWORD *)v30 -= 2;
              }
              if (*((_DWORD *)v9 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v9))
                goto LABEL_251;
              if (v16 == 10)
                goto LABEL_56;
              v132 = v16;
              v32 = (JSC::VM *)*((_QWORD *)a1 + 7);
              if ((v16 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v16 + 5) != 2)
              {
                JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v132, a1);
LABEL_64:
                if (*((_DWORD *)v32 + 20))
                {
                  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v32);
                  v31 = v137;
                  if (hasExceptionsAfterHandlingTraps)
                  {
                    v120 = 1;
                    v137 = 0;
                    if (v31)
                    {
                      if (*(_DWORD *)v31 == 2)
                        WTF::StringImpl::destroy(v31, v6);
                      else
                        *(_DWORD *)v31 -= 2;
                    }
                    v51 = 1;
                    goto LABEL_257;
                  }
                }
                else
                {
                  v31 = v137;
                }
                goto LABEL_66;
              }
              v33 = *(WTF::StringImpl **)(v16 + 8);
              if ((v33 & 1) != 0)
              {
                v33 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v16, a1);
                if (!v33)
                  goto LABEL_63;
              }
              else if (!v33)
              {
LABEL_63:
                v137 = v33;
                goto LABEL_64;
              }
              *(_DWORD *)v33 += 2;
              goto LABEL_63;
            }
          }
          LODWORD(v16) = 1;
          goto LABEL_44;
        }
      }
      LODWORD(v16) = 1;
      goto LABEL_33;
    }
LABEL_251:
    v111 = 1;
  }
  v56 = v112;
  v112 = 0;
  v137 = v56;
  v121 = v102;
  v122 = v103;
  v123 = v104;
  v57 = v105;
  v105 = 0uLL;
  *(_OWORD *)v124 = v57;
  v125[0] = 0;
  v127 = 0;
  if (v108)
  {
    v126 = -1;
    v58 = v107;
    if (v107 != -1)
    {
      ((void (*)(unint64_t *, char *, char *))off_1E32BEBF0[v107])(&v132, v125, v106);
      v126 = v58;
    }
    v127 = 1;
  }
  v128 = v109;
  v59 = v110;
  v109 = 0;
  v110 = 0;
  v129 = v59;
  v60 = (void (***)(WebCore::MessageEvent *__hidden))bmalloc::api::isoAllocate();
  v132 = WebCore::MessageEvent::MessageEvent((uint64_t)v60, &v137, (unsigned __int8 *)&v121, 0);
  if (HIDWORD(v129))
  {
    v81 = (uint64_t *)v128;
    v82 = 8 * HIDWORD(v129);
    do
    {
      v81 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v81, v61)+ 1;
      v82 -= 8;
    }
    while (v82);
  }
  v63 = v128;
  if (v128)
  {
    v128 = 0;
    LODWORD(v129) = 0;
    WTF::fastFree(v63, v61);
  }
  if (v127)
  {
    if (v126 != -1)
      ((void (*)(unint64_t *, char *))off_1E32BEBD8[v126])(&v114, v125);
    v126 = -1;
  }
  v64 = v124[1];
  v124[1] = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
      WTF::StringImpl::destroy(v64, (WTF::StringImpl *)v61);
    else
      *(_DWORD *)v64 -= 2;
  }
  v65 = v124[0];
  v124[0] = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
      WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v61);
    else
      *(_DWORD *)v65 -= 2;
  }
  v66 = v137;
  v137 = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
      WTF::StringImpl::destroy(v66, (WTF::StringImpl *)v61);
    else
      *(_DWORD *)v66 -= 2;
  }
  if (*v60 != off_1E33A5A68)
  {
    __break(0xC471u);
    JUMPOUT(0x194D4FDCCLL);
  }
  v67 = (JSCell *)WebCore::createWrapper<WebCore::MessageEvent,WebCore::MessageEvent>(*(JSC::VM **)(v101 + 40), (uint64_t *)&v132, v62);
  v68 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v68 & 0xFFFE000000000002) == 0)
  {
    v69 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v68);
    if (v69)
    {
      v71 = v69;
      if (v69 != *(JSC::JSGlobalObject **)(a2 + 24))
      {
        v72 = (WebCore::JSEvent *)*((_QWORD *)a1 + 7);
        FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v69, v70);
        if (!*((_DWORD *)v72 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v72) & 1) == 0)
        {
          v74 = (JSC::JSObject *)WebCore::getDOMStructure<WebCore::JSMessageEvent>(v72, FunctionRealm);
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v71, v74, v75);
          if (!*((_DWORD *)v72 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v72) & 1) == 0)
            JSC::JSObject::setStructure(v67, v72, SubclassStructure);
        }
      }
    }
  }
  if (*((_DWORD *)v100 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v100) & 1) != 0)
    v67 = 0;
  v77 = (_DWORD *)v132;
  v132 = 0;
  if (v77)
  {
    if (v77[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v77 + 8))(v77);
    else
      --v77[4];
  }
  v55 = v111;
LABEL_190:
  if (v55 != -1)
LABEL_191:
    ((void (*)(__int16 *, __int16 *))off_1E32BEC40[v55])(&v121, &v102);
  v7 = v113;
LABEL_193:
  if (v7 != -1)
    ((void (*)(__int16 *, WTF::StringImpl **))off_1E32BEAA0[v7])(&v102, &v112);
  return v67;
}

uint64_t WebCore::JSMessageEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSMessageEvent::estimatedSize(WebCore::JSMessageEvent *this, JSC::JSCell *a2, JSC::VM *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  char v13;
  char *v14;

  v4 = JSC::JSObject::estimatedSize(this, a2, a3);
  v5 = *((_QWORD *)this + 3);
  v6 = (unsigned __int8 *)(v5 + 192);
  if (__ldaxr((unsigned __int8 *)(v5 + 192)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v5 + 192);
LABEL_5:
  v8 = *(unsigned int *)(v5 + 80);
  if ((_DWORD)v8 != -1)
  {
    v14 = &v13;
    v9 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore12MessageEvent10memoryCostEvE3__0JZNKS9_10memoryCostEvE3__1ZNKS9_10memoryCostEvE3__2ZNKS9_10memoryCostEvE3__3ZNKS9_10memoryCostEvE3__4EEEEEJRKNS0_6__implIJNS9_10JSValueTagENS6_3RefINS8_21SerializedScriptValueENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS6_6StringENSJ_INS8_4BlobENSL_ISR_EENSN_ISR_EEEENSJ_IN3JSC11ArrayBufferENSL_ISW_EENSN_ISW_EEEEEEEEEEDcOT_DpOT0____fmatrix[v8])(&v14, v5 + 72);
    v10 = __ldxr(v6);
    if (v10 == 1)
    {
      if (!__stlxr(0, v6))
        return v9 + v4;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    return v9 + v4;
  }
  v12 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::JSMessageEvent::visitChildren(v12);
}

uint64_t WebCore::JSMessageEvent::visitChildren(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  WebCore::JSMessageEvent *v14;
  JSC::JSCell *v15;
  JSC::AbstractSlotVisitor *v16;
  char v17;
  char *v18;

  JSC::JSObject::visitChildren();
  WebCore::JSMessageEvent::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = (unsigned __int8 *)(v4 + 192);
  if (__ldaxr((unsigned __int8 *)(v4 + 192)))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEA534C](v4 + 192);
    goto LABEL_4;
  }
  if (__stxr(1u, v5))
    goto LABEL_3;
LABEL_4:
  v7 = *(unsigned int *)(v4 + 80);
  if ((_DWORD)v7 == -1)
  {
    v14 = (WebCore::JSMessageEvent *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::JSMessageEvent::visitChildren(v14, v15, v16);
  }
  v18 = &v17;
  result = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore12MessageEvent10memoryCostEvE3__0JZNKS9_10memoryCostEvE3__1ZNKS9_10memoryCostEvE3__2ZNKS9_10memoryCostEvE3__3ZNKS9_10memoryCostEvE3__4EEEEEJRKNS0_6__implIJNS9_10JSValueTagENS6_3RefINS8_21SerializedScriptValueENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS6_6StringENSJ_INS8_4BlobENSL_ISR_EENSN_ISR_EEEENSJ_IN3JSC11ArrayBufferENSL_ISW_EENSN_ISW_EEEEEEEEEEDcOT_DpOT0____fmatrix[v7])(&v18, v4 + 72);
  v9 = result;
  v10 = __ldxr(v5);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v5))
LABEL_9:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (*(_BYTE *)(a2 + 184))
  {
    *(_QWORD *)(a2 + 144) += v9;
    v11 = *(_QWORD *)(a2 + 160);
    v12 = __CFADD__(v11, v9);
    v13 = v11 + v9;
    if (v12)
      *(_BYTE *)(a2 + 152) = 1;
    else
      *(_QWORD *)(a2 + 160) = v13;
  }
  return result;
}

uint64_t WebCore::JSMessageEvent::visitChildren(WebCore::JSMessageEvent *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t result;
  uint64_t *v19;
  uint64_t v20;
  JSC::JSCell *v21;
  _QWORD v22[2];
  uint64_t v23;
  char v24;
  char v25;
  char *v26;

  v22[0] = a2;
  v22[1] = this;
  v24 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v23 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x194D50610);
  }
  *((_QWORD *)a2 + 11) = v22;
  JSC::JSObject::visitChildren();
  v6 = *(uint64_t **)(*((_QWORD *)this + 3) + 152);
  if (!v6 || (v6[1] & 3) != 0)
    v7 = 0;
  else
    v7 = *v6;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v7);
  v8 = *(uint64_t **)(*((_QWORD *)this + 3) + 168);
  if (!v8 || (v8[1] & 3) != 0)
    v9 = 0;
  else
    v9 = *v8;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v9);
  v10 = *(uint64_t **)(*((_QWORD *)this + 3) + 184);
  if (!v10 || (v10[1] & 3) != 0)
    v11 = 0;
  else
    v11 = *v10;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v11);
  v12 = *((_QWORD *)this + 3);
  v13 = (unsigned __int8 *)(v12 + 192);
  if (__ldaxr((unsigned __int8 *)(v12 + 192)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v13))
  {
    goto LABEL_16;
  }
  MEMORY[0x19AEA534C](v12 + 192);
LABEL_16:
  v15 = *(unsigned int *)(v12 + 80);
  if ((_DWORD)v15 != -1)
  {
    v26 = &v25;
    v16 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore12MessageEvent10memoryCostEvE3__0JZNKS9_10memoryCostEvE3__1ZNKS9_10memoryCostEvE3__2ZNKS9_10memoryCostEvE3__3ZNKS9_10memoryCostEvE3__4EEEEEJRKNS0_6__implIJNS9_10JSValueTagENS6_3RefINS8_21SerializedScriptValueENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS6_6StringENSJ_INS8_4BlobENSL_ISR_EENSN_ISR_EEEENSJ_IN3JSC11ArrayBufferENSL_ISW_EENSN_ISW_EEEEEEEEEEDcOT_DpOT0____fmatrix[v15])(&v26, v12 + 72);
    v17 = __ldxr(v13);
    if (v17 == 1)
    {
      if (!__stlxr(0, v13))
        goto LABEL_22;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
LABEL_22:
    result = (*(uint64_t (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 96))(a2, v16);
    *(_QWORD *)(v22[0] + 88) = v23;
    return result;
  }
  v19 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::JSMessageEventPrototype::createStructure(v19, v20, v21);
}

uint64_t WebCore::JSMessageEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSMessageEvent>,(WebCore::DOMConstructorID)459>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3672);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(a1, a2);
  v7 = v6;
  LODWORD(v21) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v19 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v19);
    v5[2] = SlowCase + (int)v19;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v21, &WebCore::JSDOMConstructor<WebCore::JSMessageEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v20 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v20);
    v10[2848] = v2 + (int)v20;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v21);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v21);
  v14 = v21;
  v21 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v21);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v17 = *(_QWORD *)(WebCore::getDOMStructure<WebCore::JSMessageEvent>((WebCore::JSEvent *)a1, (JSC::VM *)a2) + 48);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v17, 14, (uint64_t)&v21);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3672) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsMessageEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSMessageEventPrototype::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSMessageEvent>,(WebCore::DOMConstructorID)459>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsMessageEvent_origin(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 88);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsMessageEvent_lastEventId(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 96);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsMessageEvent_source(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  JSC::VM *v3;
  uint64_t v4;
  int v6;
  uint64_t v7;
  unint64_t v8;
  WebCore::JSWindowProxy *v10;
  uint64_t v11;
  WebCore::WindowProxy *v12;
  int v13;
  char v14;

  v2 = *(_QWORD *)(a2 + 24);
  if (!*(_BYTE *)(v2 + 120))
    return 2;
  v3 = *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  LOBYTE(v12) = 0;
  v13 = -1;
  v4 = *(unsigned int *)(v2 + 112);
  if ((_DWORD)v4 == -1)
    goto LABEL_24;
  ((void (*)(char *, WebCore::WindowProxy **, uint64_t))off_1E32C3160[v4])(&v14, &v12, v2 + 104);
  v13 = v4;
  switch((_DWORD)v4)
  {
    case 2:
      if (!v12)
      {
        v7 = 2;
        v6 = 2;
LABEL_19:
        ((void (*)(char *, WebCore::WindowProxy **))off_1E32BEBD8[v6])(&v14, &v12);
        return v7;
      }
      v8 = WebCore::wrap<WebCore::ServiceWorker>(a1, v3, (uint64_t)v12);
LABEL_13:
      v7 = v8;
      goto LABEL_14;
    case 1:
      if (!v12)
      {
        v6 = 1;
        goto LABEL_18;
      }
      v8 = WebCore::wrap<WebCore::MessagePort>(a1, v3, (uint64_t)v12);
      goto LABEL_13;
    case 0:
      if (!v12)
      {
        v6 = 0;
LABEL_18:
        v7 = 2;
        goto LABEL_19;
      }
      v10 = WebCore::WindowProxy::jsWindowProxy(v12, *(WebCore::DOMWrapperWorld **)(a1 + 3320));
      if (v10)
        v7 = (uint64_t)v10;
      else
        v7 = 2;
LABEL_14:
      v6 = v13;
      if (v13 == -1)
        return v7;
      goto LABEL_19;
  }
LABEL_24:
  v11 = std::__throw_bad_optional_access[abi:sn180100]();
  return WebCore::jsMessageEvent_data(v11);
}

uint64_t WebCore::jsMessageEvent_data(JSC::JSGlobalObject *a1, WebCore::JSMessageEvent *a2)
{
  return WebCore::JSMessageEvent::data(a2, a1);
}

uint64_t WebCore::JSMessagePort::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2)
{
  WebCore::JSEventTarget::visitOutputConstraints<JSC::AbstractSlotVisitor>(a1, a2);
  return JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::singletonFlag(a1);
}

uint64_t WebCore::JSMessagePort::prototype(WebCore::JSMessagePort *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  JSC::JSCell *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSMessagePort::s_info + ~((_QWORD)&WebCore::JSMessagePort::s_info << 32)) ^ (((unint64_t)&WebCore::JSMessagePort::s_info + ~((_QWORD)&WebCore::JSMessagePort::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSMessagePort::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSMessagePort::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    v14 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(this, a2, a3);
    Structure = WebCore::JSMessagePortPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v14);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v18 = (JSC::JSCell *)WebCore::JSMessagePortPrototype::create(this, Structure, v16, v17);
    v19 = WebCore::JSMessagePort::createStructure((uint64_t *)this, (uint64_t)a2, v18);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v19, (uint64_t)&WebCore::JSMessagePort::s_info);
  }
  return *(_QWORD *)(v13 + 48);
}

uint64_t WebCore::JSMessagePort::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24) - 24);
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSMessagePort::visitChildren(WebCore::JSMessagePort *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v4;
  uint64_t result;
  _QWORD v6[2];
  uint64_t v7;
  char v8;

  v6[0] = a2;
  v6[1] = this;
  v8 = 0;
  v4 = *((_QWORD *)a2 + 11);
  v7 = v4;
  if (v4 && *(_BYTE *)(v4 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v6;
    WebCore::JSEventTarget::visitChildren(this, a2, a3);
    result = JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::singletonFlag(this);
    *(_QWORD *)(v6[0] + 88) = v7;
  }
  return result;
}

uint64_t WebCore::JSMessagePort::JSMessagePort(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  v5 = v4 + 24;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v5;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  v5 = v4 + 24;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v5;
  return result;
}

uint64_t WebCore::JSMessagePort::protectedWrapped@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v6;

  v3 = *(_QWORD *)(this + 24);
  v4 = *(_QWORD *)(v3 + 24);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
LABEL_3:
    this = MEMORY[0x19AEA534C](v4);
    goto LABEL_4;
  }
  if (__stxr(1u, (unsigned __int8 *)v4))
    goto LABEL_3;
LABEL_4:
  ++*(_QWORD *)(v4 + 8);
  v6 = __ldxr((unsigned __int8 *)v4);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_9;
  }
  else
  {
    __clrex();
  }
  this = WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_9:
  *a2 = v3 - 24;
  return this;
}

unint64_t WebCore::JSMessagePort::createPrototype(WebCore::JSMessagePort *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  JSC::JSCell *v5;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v7;
  JSC::Structure *v8;

  v5 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(this, a2, a3);
  Structure = WebCore::JSMessagePortPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v5);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSMessagePortPrototype::create(this, Structure, v7, v8);
}

uint64_t WebCore::JSMessagePortPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSMessagePortPrototype::create(WebCore::JSMessagePortPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<6u>(this, (uint64_t)&WebCore::JSMessagePort::s_info, &WebCore::JSMessagePortPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSMessagePort>,(WebCore::DOMConstructorID)460>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3680);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v22) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v20);
    v5[2] = SlowCase + (int)v20;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v22, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSMessagePort>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v21 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v21);
    v10[2848] = v2 + (int)v21;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v22);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v22);
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v22);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v18 = WebCore::JSMessagePort::prototype((WebCore::JSMessagePort *)a1, (JSC::VM *)a2, v17);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v18, 14, (uint64_t)&v22);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3680) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsMessagePortConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSMessagePortPrototype::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSMessagePort>,(WebCore::DOMConstructorID)460>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsMessagePort_onmessage(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  WebCore::MessagePort *v18;
  BOOL v19;
  int v20;
  bmalloc::api *v21;
  void *v22;
  uint64_t v24;

  v5 = *(WebCore **)(a2 + 24);
  v6 = *((_QWORD *)v5 + 3);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  a1 = (WebCore *)MEMORY[0x19AEA534C](v6);
LABEL_5:
  ++*(_QWORD *)(v6 + 8);
  v8 = __ldxr((unsigned __int8 *)v6);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  a1 = (WebCore *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_10:
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(a1);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  v13 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v11 + 1192), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  v14 = *((_QWORD *)v5 + 3);
  if (__ldaxr((unsigned __int8 *)v14))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v14))
  {
    goto LABEL_19;
  }
  MEMORY[0x19AEA534C](v14);
LABEL_19:
  v16 = *(_QWORD *)(v14 + 8);
  v17 = v16 - 1;
  *(_QWORD *)(v14 + 8) = v16 - 1;
  if (v16 == 1)
  {
    v24 = *(_QWORD *)(v14 + 16);
    v18 = *(WebCore::MessagePort **)(v14 + 24);
    *(_QWORD *)(v14 + 24) = 0;
    v19 = v24 != 0;
  }
  else
  {
    v18 = 0;
    v19 = 1;
  }
  v20 = __ldxr((unsigned __int8 *)v14);
  if (v20 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v14))
    {
      if (v17)
        return v13;
      goto LABEL_27;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v14);
  if (v17)
    return v13;
LABEL_27:
  if (v18)
  {
    WebCore::MessagePort::~MessagePort(v18, v12);
    bmalloc::api::isoDeallocate(v21, v22);
  }
  if (!v19)
    WTF::fastFree((WTF *)v14, v12);
  return v13;
}

uint64_t WebCore::setJSMessagePort_onmessage(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  WebCore::MessagePort *v22;
  BOOL v23;
  int v24;
  bmalloc::api *v27;
  void *v28;
  uint64_t v29;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMessagePort::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMessagePort::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(WebCore::EventTarget **)(a2 + 24);
  v11 = *((_QWORD *)v10 + 3);
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
LABEL_10:
    a1 = (WebCore *)MEMORY[0x19AEA534C](v11);
    goto LABEL_11;
  }
  if (__stxr(1u, (unsigned __int8 *)v11))
    goto LABEL_10;
LABEL_11:
  ++*(_QWORD *)(v11 + 8);
  v13 = __ldxr((unsigned __int8 *)v11);
  if (v13 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v11))
      goto LABEL_16;
  }
  else
  {
    __clrex();
  }
  a1 = (WebCore *)WTF::Lock::unlockSlow((WTF::Lock *)v11);
LABEL_16:
  v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v14 || (v15 = *(_QWORD *)(v14 + 96)) == 0)
    v15 = WebCore::threadGlobalDataSlow(a1);
  v16 = *(_QWORD *)(v15 + 40);
  if (!v16)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v15);
    v16 = *(_QWORD *)(v15 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v10, (WTF::StringImpl **)(v16 + 1192), a3, (_DWORD *)a2);
  v18 = *((_QWORD *)v10 + 3);
  if (__ldaxr((unsigned __int8 *)v18))
  {
    __clrex();
LABEL_23:
    MEMORY[0x19AEA534C](v18);
    goto LABEL_24;
  }
  if (__stxr(1u, (unsigned __int8 *)v18))
    goto LABEL_23;
LABEL_24:
  v20 = *(_QWORD *)(v18 + 8);
  v21 = v20 - 1;
  *(_QWORD *)(v18 + 8) = v20 - 1;
  if (v20 == 1)
  {
    v29 = *(_QWORD *)(v18 + 16);
    v22 = *(WebCore::MessagePort **)(v18 + 24);
    *(_QWORD *)(v18 + 24) = 0;
    v23 = v29 != 0;
  }
  else
  {
    v22 = 0;
    v23 = 1;
  }
  v24 = __ldxr((unsigned __int8 *)v18);
  if (v24 != 1)
  {
    __clrex();
    goto LABEL_33;
  }
  if (__stlxr(0, (unsigned __int8 *)v18))
LABEL_33:
    WTF::Lock::unlockSlow((WTF::Lock *)v18);
  if (!v21)
  {
    if (v22)
    {
      WebCore::MessagePort::~MessagePort(v22, v17);
      bmalloc::api::isoDeallocate(v27, v28);
    }
    if (!v23)
      WTF::fastFree((WTF *)v18, v17);
  }
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::jsMessagePort_onmessageerror(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  WebCore::MessagePort *v18;
  BOOL v19;
  int v20;
  bmalloc::api *v21;
  void *v22;
  uint64_t v24;

  v5 = *(WebCore **)(a2 + 24);
  v6 = *((_QWORD *)v5 + 3);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  a1 = (WebCore *)MEMORY[0x19AEA534C](v6);
LABEL_5:
  ++*(_QWORD *)(v6 + 8);
  v8 = __ldxr((unsigned __int8 *)v6);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  a1 = (WebCore *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_10:
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(a1);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  v13 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v11 + 1200), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  v14 = *((_QWORD *)v5 + 3);
  if (__ldaxr((unsigned __int8 *)v14))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v14))
  {
    goto LABEL_19;
  }
  MEMORY[0x19AEA534C](v14);
LABEL_19:
  v16 = *(_QWORD *)(v14 + 8);
  v17 = v16 - 1;
  *(_QWORD *)(v14 + 8) = v16 - 1;
  if (v16 == 1)
  {
    v24 = *(_QWORD *)(v14 + 16);
    v18 = *(WebCore::MessagePort **)(v14 + 24);
    *(_QWORD *)(v14 + 24) = 0;
    v19 = v24 != 0;
  }
  else
  {
    v18 = 0;
    v19 = 1;
  }
  v20 = __ldxr((unsigned __int8 *)v14);
  if (v20 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v14))
    {
      if (v17)
        return v13;
      goto LABEL_27;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v14);
  if (v17)
    return v13;
LABEL_27:
  if (v18)
  {
    WebCore::MessagePort::~MessagePort(v18, v12);
    bmalloc::api::isoDeallocate(v21, v22);
  }
  if (!v19)
    WTF::fastFree((WTF *)v14, v12);
  return v13;
}

BOOL WebCore::setJSMessagePort_onmessageerror(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  WebCore::MessagePort *v23;
  BOOL v24;
  int v25;
  bmalloc::api *v26;
  void *v27;
  uint64_t v29;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSMessagePort::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSMessagePort::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      v12 = *((_QWORD *)v11 + 3);
      if (__ldaxr((unsigned __int8 *)v12))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v12))
      {
        goto LABEL_16;
      }
      a1 = (WebCore *)MEMORY[0x19AEA534C](v12);
LABEL_16:
      ++*(_QWORD *)(v12 + 8);
      v14 = __ldxr((unsigned __int8 *)v12);
      if (v14 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v12))
          goto LABEL_21;
      }
      else
      {
        __clrex();
      }
      a1 = (WebCore *)WTF::Lock::unlockSlow((WTF::Lock *)v12);
LABEL_21:
      v15 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v15 || (v16 = *(_QWORD *)(v15 + 96)) == 0)
        v16 = WebCore::threadGlobalDataSlow(a1);
      v17 = *(_QWORD *)(v16 + 40);
      if (!v17)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v16);
        v17 = *(_QWORD *)(v16 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v17 + 1200), a3, (_DWORD *)a2);
      v19 = *((_QWORD *)v11 + 3);
      if (__ldaxr((unsigned __int8 *)v19))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v19))
      {
        goto LABEL_30;
      }
      MEMORY[0x19AEA534C](v19);
LABEL_30:
      v21 = *(_QWORD *)(v19 + 8);
      v22 = v21 - 1;
      *(_QWORD *)(v19 + 8) = v21 - 1;
      if (v21 == 1)
      {
        v29 = *(_QWORD *)(v19 + 16);
        v23 = *(WebCore::MessagePort **)(v19 + 24);
        *(_QWORD *)(v19 + 24) = 0;
        v24 = v29 != 0;
      }
      else
      {
        v23 = 0;
        v24 = 1;
      }
      v25 = __ldxr((unsigned __int8 *)v19);
      if (v25 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v19))
        {
          if (v22)
            goto LABEL_41;
LABEL_38:
          if (v23)
          {
            WebCore::MessagePort::~MessagePort(v23, v18);
            bmalloc::api::isoDeallocate(v26, v27);
          }
          if (!v24)
          {
            WTF::fastFree((WTF *)v19, v18);
            if (a3)
            {
LABEL_42:
              if ((a3 & 0xFFFE000000000002) == 0
                && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
              {
                JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
              }
            }
            return 1;
          }
LABEL_41:
          if (a3)
            goto LABEL_42;
          return 1;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v19);
      if (v22)
        goto LABEL_41;
      goto LABEL_38;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::JSMessagePort::subspaceForImpl(WebCore::JSMessagePort *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 3760);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  v19 = *(_QWORD *)(v9 + 3760);
  if (!v19)
  {
    v17 = 32;
    std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[11],JSC::Heap &,JSC::JSDestructibleObjectHeapCellType &,unsigned long,unsigned char const&>("IsoSpace T", (uint64_t)this + 192, (uint64_t)this + 1872, &v17, JSC::JSCell::numberOfLowerTierCells, &v18);
    v14 = v18;
    v19 = v18;
    v15 = *(_QWORD *)(v9 + 3760);
    *(_QWORD *)(v9 + 3760) = v18;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v16 = *(unsigned int *)(v7 + 2844);
    if ((_DWORD)v16 == *(_DWORD *)(v7 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v7 + 2832, (unint64_t)&v19);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v16) = v14;
      *(_DWORD *)(v7 + 2844) = v16 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v10 = *(_QWORD *)(v3 + 3760);
  *(_QWORD *)(v3 + 3760) = v4;
  if (v10)
  {
    v11 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v11, v12);
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

uint64_t WebCore::JSMessagePortOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  WTF::ConcurrentPtrHashSet *v12;
  _DWORD *v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  void *v20;
  uint64_t result;
  void *v22;

  v7 = *a2;
  v8 = *(_QWORD *)(*a2 + 24);
  v9 = *(_QWORD *)(v8 - 16);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      if (!*(_BYTE *)(v10 + 180))
      {
        if (*(_QWORD *)(v8 - 8)
          || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 - 24) + 64))(v8 - 24) & 1) != 0)
        {
          if (a5)
          {
            *a5 = "ActiveDOMObject with pending activity";
            a5[1] = 38;
          }
          return 1;
        }
        v8 = *(_QWORD *)(v7 + 24);
      }
    }
  }
  v11 = (void *)(v8 - 24);
  if (a5)
  {
    *a5 = "Reachable from MessagePort";
    a5[1] = 27;
  }
  v12 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v13 = (_DWORD *)*((_QWORD *)v12 + 6);
  if ((_DWORD *)((char *)v12 + 56) == v13)
  {
    v22 = v11;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v12, v11);
    v11 = v22;
    if (!(_DWORD)result)
      return result;
LABEL_20:
    if (*(_BYTE *)(a4 + 131))
      (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v11);
    return 1;
  }
  v14 = v13[1];
  v15 = ((unint64_t)v11 + ~((_QWORD)v11 << 32)) ^ (((unint64_t)v11 + ~((_QWORD)v11 << 32)) >> 22);
  v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = v14 & ((v17 >> 31) ^ v17);
  v19 = v18;
  while (1)
  {
    v20 = *(void **)&v13[2 * v19 + 4];
    if (!v20)
      return 0;
    if (v11 == v20)
      goto LABEL_20;
    v19 = (v19 + 1) & v14;
    if (v19 == v18)
    {
      __break(0xC471u);
      JUMPOUT(0x194D521DCLL);
    }
  }
}

unint64_t WebCore::JSMessagePort::toWrapped(uint64_t a1, unint64_t a2)
{
  unint64_t result;

  result = JSC::jsDynamicCast<WebCore::JSMessagePort *>(a2);
  if (result)
    return *(_QWORD *)(result + 24) - 24;
  return result;
}

unint64_t JSC::jsDynamicCast<WebCore::JSMessagePort *>(unint64_t result)
{
  uint64_t v1;
  _BOOL4 v2;
  char **v3;
  BOOL v4;

  if ((result & 0xFFFE000000000002) != 0)
    return 0;
  v1 = *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C);
  v2 = *(_DWORD *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C) != 0;
  v3 = (char **)(16 * v1);
  if ((_DWORD)v1)
    v4 = v3 == &WebCore::JSMessagePort::s_info;
  else
    v4 = 1;
  if (!v4)
  {
    do
    {
      v3 = (char **)v3[2];
      v2 = v3 != 0;
    }
    while (v3 != &WebCore::JSMessagePort::s_info && v3 != 0);
  }
  if (!v2)
    return 0;
  return result;
}

uint64_t WebCore::parseEnumerationFromString<WebCore::MeteringMode>(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  const char *v3;
  int v4;
  int v6;
  __int32 v7;
  char **v10;
  uint16x8_t v11;
  uint16x8_t v12;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v17;
  _BOOL4 v18;
  int v20;
  uint16x8_t v21;
  uint16x8_t v22;

  v1 = *a1;
  if (!*a1)
    goto LABEL_11;
  v2 = *(_DWORD *)(v1 + 16);
  v3 = *(const char **)(v1 + 8);
  v4 = *(_DWORD *)(v1 + 4);
  if (v3 != "continuous" && v4 == 10)
  {
    if ((v2 & 4) != 0)
    {
      if (*v3 != 99 || *(_QWORD *)(v3 + 1) != 0x756F756E69746E6FLL || *(_QWORD *)(v3 + 2) != 0x73756F756E69746ELL)
        goto LABEL_11;
    }
    else
    {
      if (*(_WORD *)v3 != 99)
        goto LABEL_11;
      v11 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 2), (int16x8_t)xmmword_1968C0430);
      v11.i16[0] = vminvq_u16(v11);
      v6 = v11.i32[0];
      if (!v11.i32[0])
        goto LABEL_12;
      v12 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 4), (int16x8_t)xmmword_1968C0440);
      v12.i16[0] = vminvq_u16(v12);
      if (!v12.i32[0])
      {
        v17 = 0;
        v18 = v3 == "single-shot";
        goto LABEL_41;
      }
    }
    goto LABEL_30;
  }
  if (v3 == "continuous" && v4 == 10)
  {
LABEL_30:
    v10 = &WebCore::parseEnumerationFromString<WebCore::MeteringMode>(WTF::String const&)::mappings;
    goto LABEL_31;
  }
  if (v3 != "manual" && v4 == 6)
  {
    if ((v2 & 4) != 0)
    {
      if (*v3 != 109 || *(_DWORD *)(v3 + 1) != 1635085921 || *(_DWORD *)(v3 + 2) != 1818326382)
        goto LABEL_11;
    }
    else
    {
      if (*(_WORD *)v3 != 109)
        goto LABEL_11;
      v14 = *(_QWORD *)(v3 + 2);
      v15 = *(_QWORD *)(v3 + 4);
      if (v14 != 0x610075006E0061 || v15 != 0x6C00610075006ELL)
        goto LABEL_11;
    }
    goto LABEL_26;
  }
  if (v3 == "manual" && v4 == 6)
  {
LABEL_26:
    v10 = &off_1E32B8C48;
LABEL_31:
    v7 = *((unsigned __int8 *)v10 + 16);
    v6 = 1;
    return v7 | (v6 << 8);
  }
  if (v3 != "none" && v4 == 4)
  {
    if ((v2 & 4) != 0)
    {
      if (*v3 == 110 && *(_WORD *)(v3 + 1) == 28271 && *((_WORD *)v3 + 1) == 25966)
      {
LABEL_53:
        v10 = &off_1E32B8C60;
        goto LABEL_31;
      }
    }
    else if (*(_WORD *)v3 == 110)
    {
      v6 = 0;
      if (*(_DWORD *)(v3 + 2) != 7209071)
      {
        v7 = 0;
        return v7 | (v6 << 8);
      }
      v20 = *((_DWORD *)v3 + 1) - 6619136;
      v7 = 0;
      if (v20 != 110)
        return v7 | (v6 << 8);
      goto LABEL_53;
    }
    goto LABEL_11;
  }
  if (v3 == "none" && v4 == 4)
    goto LABEL_53;
  v17 = v4 == 11;
  v18 = v3 == "single-shot";
  if (v3 != "single-shot" && v4 == 11)
  {
    if ((v2 & 4) != 0)
    {
      if (*v3 == 115 && *(_QWORD *)(v3 + 1) == 0x68732D656C676E69 && *(_QWORD *)(v3 + 3) == 0x746F68732D656C67)
        goto LABEL_42;
    }
    else if (*(_WORD *)v3 == 115)
    {
      v21 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 2), (int16x8_t)xmmword_1968C0450);
      v21.i16[0] = vminvq_u16(v21);
      v6 = v21.i32[0];
      if (!v21.i32[0])
        goto LABEL_12;
      v22 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 6), (int16x8_t)xmmword_1968C0460);
      v22.i16[0] = vminvq_u16(v22);
      v7 = v22.i32[0];
      if (!v22.i32[0])
      {
        v6 = 0;
        return v7 | (v6 << 8);
      }
      goto LABEL_42;
    }
    goto LABEL_11;
  }
LABEL_41:
  if (v18 && v17)
  {
LABEL_42:
    v10 = &off_1E32B8C78;
    goto LABEL_31;
  }
LABEL_11:
  v6 = 0;
LABEL_12:
  v7 = 0;
  return v7 | (v6 << 8);
}

uint64_t WebCore::JSDOMConstructor<WebCore::JSMouseEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  unint64_t v2;
  JSC::VM *v4;
  uint64_t FunctionRealm;
  unint64_t v6;
  int v7;
  uint64_t v8;
  JSC::VM *v9;
  uint64_t Object;
  JSC::Structure *v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int16 v17;
  __int8 v18;
  BOOL v19;
  BOOL v20;
  int v21;
  WTF *v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  uint64_t v29;
  double v30;
  double v31;
  JSC::JSGlobalObject *v32;
  uint64_t v33;
  JSC::VM *v34;
  WebCore::Node *v35;
  WebCore::MouseRelatedEvent *v36;
  WTF::StringImpl *v37;
  WebCore::JSDOMGlobalObject *v38;
  WebCore::Node *v39;
  WTF *v40;
  WTF::StringImpl *v41;
  JSC::JSCell *v42;
  JSC::JSGlobalObject *v43;
  JSC::JSObject *v44;
  WebCore::MouseRelatedEvent *v45;
  uint64_t v46;
  JSC::VM *v48;
  double v49;
  BOOL v50;
  WTF::StringImpl *v51;
  unint64_t v52;
  JSC::VM *v53;
  double v54;
  BOOL v55;
  WTF::StringImpl *v56;
  unint64_t v57;
  JSC::VM *v58;
  double v59;
  BOOL v60;
  WTF::StringImpl *v61;
  unint64_t v62;
  JSC::VM *v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  unint64_t v67;
  JSC::VM *v68;
  double v69;
  BOOL v70;
  WTF::StringImpl *v71;
  unint64_t v72;
  JSC::VM *v73;
  double v74;
  BOOL v75;
  WTF::StringImpl *v76;
  unint64_t v77;
  JSC::VM *v78;
  double v79;
  BOOL v80;
  WTF::StringImpl *v81;
  unint64_t v82;
  JSC::VM *v83;
  double v84;
  BOOL v85;
  WTF::StringImpl *v86;
  unint64_t v87;
  JSC::VM *v88;
  double v89;
  BOOL v90;
  WTF::StringImpl *v91;
  unint64_t v92;
  JSC::VM *v93;
  double v94;
  BOOL v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  JSC::VM *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  JSC::VM *v102;
  double v103;
  double v104;
  double v105;
  double v106;
  JSC::VM *v107;
  double v108;
  double v109;
  double v110;
  double v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  JSC::VM *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  unint64_t v117;
  WebCore::MouseRelatedEvent *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  unint64_t v121;
  WebCore::MouseRelatedEvent *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  uint64_t v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  unint64_t v129;
  JSC::VM *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  JSC::VM *v133;
  uint64_t *v134;
  unsigned int *v135;
  unsigned int v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _DWORD *v149;
  uint64_t v150;
  uint64_t *v151;
  unsigned int *v152;
  WTF *v153;
  unsigned int v154;
  unsigned int v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  int v161;
  unint64_t v162;
  int v163;
  unint64_t v164;
  unsigned int v165;
  unint64_t v166;
  int v167;
  unint64_t v168;
  int v169;
  uint64_t v170;
  uint64_t v172;
  JSValue v175;
  JSC::JSObject *v176;
  JSC::Structure *v177;
  unint64_t SubclassStructure;
  double v179;
  double v180;
  double v181;
  double v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  BOOL v188;
  int v189;
  uint64_t v190;
  int *v191;
  int v192;
  BOOL v193;
  int v194;
  uint64_t v195;
  int *v196;
  int v197;
  BOOL v198;
  int v199;
  uint64_t v200;
  int *v201;
  int v202;
  BOOL v203;
  int v204;
  uint64_t v205;
  int *v206;
  int v207;
  BOOL v208;
  int v209;
  uint64_t v210;
  int *v211;
  int v212;
  BOOL v213;
  int v214;
  uint64_t v215;
  int *v216;
  int v217;
  BOOL v218;
  int v219;
  uint64_t v220;
  int *v221;
  int v222;
  BOOL v223;
  int v224;
  uint64_t v225;
  int *v226;
  int v227;
  BOOL v228;
  int v229;
  uint64_t v230;
  int *v231;
  int v232;
  BOOL v233;
  BOOL v234;
  BOOL v235;
  BOOL v236;
  BOOL v237;
  BOOL v238;
  BOOL v239;
  BOOL v240;
  BOOL v241;
  int v242;
  __int16 v243;
  BOOL v244;
  BOOL v245;
  BOOL v246;
  BOOL v247;
  BOOL v248;
  BOOL v249;
  WTF *v250;
  BOOL v251;
  BOOL v252;
  BOOL v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  JSC::VM *v257;
  WTF::StringImpl *v258;
  WTF *v259;
  int v260;
  int v261;
  __int16 v262;
  _BYTE v263[28];
  unint64_t v264;
  int v265;
  WebCore::Node *v266;
  __int16 v267;
  __int8 v268;
  WTF *v269;
  int v270;
  int v271;
  __int16 v272;
  _BYTE v273[28];
  unint64_t v274;
  int v275;
  WebCore::Node *v276;
  unsigned int v277;
  JSC::VM *v278;
  int v279;
  JSC::VM *v280;
  WebCore::MouseRelatedEvent *v281;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v175.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return JSC::VM::throwException(v4, a1, v175);
  }
  FunctionRealm = a2;
  v6 = *(_QWORD *)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v278);
  v7 = v279;
  if (!v279)
  {
    v257 = v4;
    if ((unint64_t)(*(int *)(FunctionRealm + 32) - 3) >= 0xFFFFFFFFFFFFFFFELL)
    {
      v255 = v6;
      LODWORD(v14) = 0;
      LODWORD(v15) = 0;
      LODWORD(v16) = 0;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v27 = 0;
      v28 = 0;
      LOWORD(v6) = 0;
      v2 = 0;
      v29 = 0;
      v280 = (JSC::VM *)*((_QWORD *)a1 + 7);
      v30 = 0.0;
      v256 = 10;
    }
    else
    {
      v8 = *(_QWORD *)(FunctionRealm + 56);
      v9 = (JSC::VM *)*((_QWORD *)a1 + 7);
      v280 = v9;
      v256 = v8;
      if ((v8 & 0xFFFFFFFFFFFFFFF7) != 2)
      {
        if ((v8 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject((JSC::JSCell *)v8)) == 0)
        {
          JSC::throwTypeError();
          v277 = 1;
          goto LABEL_16;
        }
        v11 = (JSC::Structure *)Object;
        WTF::AtomStringImpl::addLiteral();
        v2 = (unint64_t)v258;
        v13 = JSC::JSObject::get(v11, a1, (unint64_t)v258);
        if (v258)
        {
          if (*(_DWORD *)v258 == 2)
            WTF::StringImpl::destroy(v258, v12);
          else
            *(_DWORD *)v258 -= 2;
        }
        if (*((_DWORD *)v9 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v9))
          goto LABEL_418;
        v254 = FunctionRealm;
        if (v13 == 10)
        {
          v253 = 0;
          goto LABEL_46;
        }
        v48 = (JSC::VM *)*((_QWORD *)a1 + 7);
        if (v13 >= 0xFFFE000000000000)
        {
          v50 = (_DWORD)v13 != 0;
          goto LABEL_44;
        }
        *(_QWORD *)&v49 = v13 - 0x2000000000000;
        if (v13 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          if (v49 <= 0.0)
          {
            v188 = v49 < 0.0;
            goto LABEL_614;
          }
        }
        else
        {
          if ((v13 & 0xFFFE000000000002) != 0)
          {
            v50 = v13 == 7;
LABEL_44:
            v253 = v50;
LABEL_45:
            if (*((_DWORD *)v48 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v48))
            {
LABEL_418:
              v277 = 1;
              v32 = (JSC::JSGlobalObject *)0xFFFE000000000002;
LABEL_425:
              v8 = v256;
              goto LABEL_17;
            }
LABEL_46:
            WTF::AtomStringImpl::addLiteral();
            v2 = (unint64_t)v258;
            v52 = JSC::JSObject::get(v11, a1, (unint64_t)v258);
            v32 = (JSC::JSGlobalObject *)0xFFFE000000000002;
            if (v258)
            {
              if (*(_DWORD *)v258 == 2)
                WTF::StringImpl::destroy(v258, v51);
              else
                *(_DWORD *)v258 -= 2;
            }
            if (*((_DWORD *)v9 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v9))
              goto LABEL_424;
            if (v52 == 10)
            {
              v252 = 0;
              goto LABEL_58;
            }
            v53 = (JSC::VM *)*((_QWORD *)a1 + 7);
            if (v52 >= 0xFFFE000000000000)
            {
              v55 = (_DWORD)v52 != 0;
              goto LABEL_56;
            }
            *(_QWORD *)&v54 = v52 - 0x2000000000000;
            if (v52 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
            {
              if (v54 <= 0.0)
              {
                v193 = v54 < 0.0;
                goto LABEL_622;
              }
            }
            else
            {
              if ((v52 & 0xFFFE000000000002) != 0)
              {
                v55 = v52 == 7;
LABEL_56:
                v252 = v55;
LABEL_57:
                if (*((_DWORD *)v53 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v53))
                  goto LABEL_424;
LABEL_58:
                WTF::AtomStringImpl::addLiteral();
                v2 = (unint64_t)v258;
                v57 = JSC::JSObject::get(v11, a1, (unint64_t)v258);
                if (v258)
                {
                  if (*(_DWORD *)v258 == 2)
                    WTF::StringImpl::destroy(v258, v56);
                  else
                    *(_DWORD *)v258 -= 2;
                }
                if (*((_DWORD *)v9 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v9))
                  goto LABEL_424;
                if (v57 == 10)
                {
                  v251 = 0;
                  goto LABEL_70;
                }
                v58 = (JSC::VM *)*((_QWORD *)a1 + 7);
                if (v57 >= 0xFFFE000000000000)
                {
                  v60 = (_DWORD)v57 != 0;
                  goto LABEL_68;
                }
                *(_QWORD *)&v59 = v57 - 0x2000000000000;
                if (v57 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
                {
                  if (v59 <= 0.0)
                  {
                    v198 = v59 < 0.0;
                    goto LABEL_630;
                  }
                }
                else
                {
                  if ((v57 & 0xFFFE000000000002) != 0)
                  {
                    v60 = v57 == 7;
LABEL_68:
                    v251 = v60;
LABEL_69:
                    if (!*((_DWORD *)v58 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v58))
                    {
LABEL_70:
                      WTF::AtomStringImpl::addLiteral();
                      v62 = JSC::JSObject::get(v11, a1, (unint64_t)v258);
                      if (v258)
                      {
                        if (*(_DWORD *)v258 == 2)
                          WTF::StringImpl::destroy(v258, v61);
                        else
                          *(_DWORD *)v258 -= 2;
                      }
                      if (*((_DWORD *)v9 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v9))
                        goto LABEL_424;
                      if (v62 == 10)
                      {
                        LODWORD(v62) = 0;
                      }
                      else
                      {
                        v258 = (WTF::StringImpl *)v62;
                        v63 = (JSC::VM *)*((_QWORD *)a1 + 7);
                        if (v62 < 0xFFFE000000000000)
                        {
                          v141 = v62 - 0x2000000000000;
                          if (v62 - 0x2000000000000 >= 0xFFFC000000000000)
                          {
                            JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v258, a1);
                            v141 = v183;
                          }
                          v142 = (v141 >> 52) & 0x7FF;
                          if ((v142 - 1023) <= 0x53)
                          {
                            v160 = v141 >> (51 - (v141 >> 52));
                            if (v142 > 0x433)
                              LODWORD(v160) = v141 << ((v141 >> 52) - 51);
                            if (v142 >= 0x41F)
                              v161 = v160;
                            else
                              v161 = (((1 << ((v141 >> 52) + 1)) - 1) & v160) + (1 << ((v141 >> 52) + 1));
                            if ((v141 & 0x8000000000000000) == 0)
                              LODWORD(v62) = v161;
                            else
                              LODWORD(v62) = -v161;
                          }
                          else
                          {
                            LODWORD(v62) = 0;
                          }
                        }
                        if (*((_DWORD *)v63 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v63))
                          goto LABEL_244;
                      }
                      WTF::AtomStringImpl::addLiteral();
                      v2 = (unint64_t)v258;
                      v65 = JSC::JSObject::get(v11, a1, (unint64_t)v258);
                      if (v2)
                      {
                        if (*(_DWORD *)v2 == 2)
                          WTF::StringImpl::destroy((WTF::StringImpl *)v2, v64);
                        else
                          *(_DWORD *)v2 -= 2;
                      }
                      if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
                      {
LABEL_244:
                        v129 = 0;
LABEL_245:
                        v8 = v256;
                        v277 = 1;
                        goto LABEL_246;
                      }
                      if ((v65 | 8) == 0xA)
                      {
                        v250 = 0;
                      }
                      else
                      {
                        v258 = (WTF::StringImpl *)*((_QWORD *)a1 + 7);
                        if ((v65 & 0xFFFE000000000002) != 0
                          || *(unsigned __int8 *)(v65 + 5) < 0x17u
                          || &WebCore::JSWindowProxy::s_info != (char **)(16
                                                                        * *(unsigned int *)(16
                                                                                          * (*(_DWORD *)v65 & 0xFFFFFFFE)
                                                                                          + 0x4C))
                          || (v147 = *(_QWORD *)(*(_QWORD *)(v65 + 16) + 3408),
                              !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v147 + 104))(v147))
                          || (v148 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v147 + 104))(v147),
                              (v149 = *(_DWORD **)(v148 + 112)) == 0))
                        {
                          JSC::throwTypeError();
                          goto LABEL_244;
                        }
                        v250 = *(WTF **)(v148 + 112);
                        ++*v149;
                      }
                      WTF::AtomStringImpl::addLiteral();
                      v2 = (unint64_t)v258;
                      v67 = JSC::JSObject::get(v11, a1, (unint64_t)v258);
                      if (v2)
                      {
                        if (*(_DWORD *)v2 == 2)
                          WTF::StringImpl::destroy((WTF::StringImpl *)v2, v66);
                        else
                          *(_DWORD *)v2 -= 2;
                      }
                      if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
                      {
LABEL_442:
                        v129 = (unint64_t)v250;
                        goto LABEL_245;
                      }
                      if (v67 == 10)
                      {
                        v249 = 0;
                        goto LABEL_96;
                      }
                      v68 = (JSC::VM *)*((_QWORD *)a1 + 7);
                      if (v67 >= 0xFFFE000000000000)
                      {
                        v70 = (_DWORD)v67 != 0;
                        goto LABEL_94;
                      }
                      *(_QWORD *)&v69 = v67 - 0x2000000000000;
                      if (v67 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
                      {
                        if (v69 <= 0.0)
                        {
                          v203 = v69 < 0.0;
                          goto LABEL_638;
                        }
                      }
                      else
                      {
                        if ((v67 & 0xFFFE000000000002) != 0)
                        {
                          v70 = v67 == 7;
LABEL_94:
                          v249 = v70;
LABEL_95:
                          if (*((_DWORD *)v68 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v68) & 1) != 0)
                            goto LABEL_442;
LABEL_96:
                          WTF::AtomStringImpl::addLiteral();
                          v2 = (unint64_t)v258;
                          v72 = JSC::JSObject::get(v11, a1, (unint64_t)v258);
                          if (v2)
                          {
                            if (*(_DWORD *)v2 == 2)
                              WTF::StringImpl::destroy((WTF::StringImpl *)v2, v71);
                            else
                              *(_DWORD *)v2 -= 2;
                          }
                          if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
                            goto LABEL_442;
                          if (v72 == 10)
                          {
                            v248 = 0;
                            goto LABEL_108;
                          }
                          v73 = (JSC::VM *)*((_QWORD *)a1 + 7);
                          if (v72 >= 0xFFFE000000000000)
                          {
                            v75 = (_DWORD)v72 != 0;
                            goto LABEL_106;
                          }
                          *(_QWORD *)&v74 = v72 - 0x2000000000000;
                          if (v72 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
                          {
                            if (v74 <= 0.0)
                            {
                              v208 = v74 < 0.0;
                              goto LABEL_646;
                            }
                          }
                          else
                          {
                            if ((v72 & 0xFFFE000000000002) != 0)
                            {
                              v75 = v72 == 7;
LABEL_106:
                              v248 = v75;
LABEL_107:
                              if (*((_DWORD *)v73 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v73) & 1) != 0)
                                goto LABEL_442;
LABEL_108:
                              WTF::AtomStringImpl::addLiteral();
                              v2 = (unint64_t)v258;
                              v77 = JSC::JSObject::get(v11, a1, (unint64_t)v258);
                              if (v2)
                              {
                                if (*(_DWORD *)v2 == 2)
                                  WTF::StringImpl::destroy((WTF::StringImpl *)v2, v76);
                                else
                                  *(_DWORD *)v2 -= 2;
                              }
                              if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
                                goto LABEL_442;
                              if (v77 == 10)
                              {
                                v247 = 0;
                                goto LABEL_120;
                              }
                              v78 = (JSC::VM *)*((_QWORD *)a1 + 7);
                              if (v77 >= 0xFFFE000000000000)
                              {
                                v80 = (_DWORD)v77 != 0;
                                goto LABEL_118;
                              }
                              *(_QWORD *)&v79 = v77 - 0x2000000000000;
                              if (v77 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
                              {
                                if (v79 <= 0.0)
                                {
                                  v213 = v79 < 0.0;
                                  goto LABEL_654;
                                }
                              }
                              else
                              {
                                if ((v77 & 0xFFFE000000000002) != 0)
                                {
                                  v80 = v77 == 7;
LABEL_118:
                                  v247 = v80;
LABEL_119:
                                  if (*((_DWORD *)v78 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v78) & 1) != 0)
                                    goto LABEL_442;
LABEL_120:
                                  WTF::AtomStringImpl::addLiteral();
                                  v2 = (unint64_t)v258;
                                  v82 = JSC::JSObject::get(v11, a1, (unint64_t)v258);
                                  if (v2)
                                  {
                                    if (*(_DWORD *)v2 == 2)
                                      WTF::StringImpl::destroy((WTF::StringImpl *)v2, v81);
                                    else
                                      *(_DWORD *)v2 -= 2;
                                  }
                                  if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
                                    goto LABEL_442;
                                  if (v82 == 10)
                                  {
                                    v246 = 0;
                                    goto LABEL_132;
                                  }
                                  v83 = (JSC::VM *)*((_QWORD *)a1 + 7);
                                  if (v82 >= 0xFFFE000000000000)
                                  {
                                    v85 = (_DWORD)v82 != 0;
                                    goto LABEL_130;
                                  }
                                  *(_QWORD *)&v84 = v82 - 0x2000000000000;
                                  if (v82 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
                                  {
                                    if (v84 <= 0.0)
                                    {
                                      v218 = v84 < 0.0;
                                      goto LABEL_662;
                                    }
                                  }
                                  else
                                  {
                                    if ((v82 & 0xFFFE000000000002) != 0)
                                    {
                                      v85 = v82 == 7;
LABEL_130:
                                      v246 = v85;
LABEL_131:
                                      if (*((_DWORD *)v83 + 20)
                                        && (JSC::VM::hasExceptionsAfterHandlingTraps(v83) & 1) != 0)
                                      {
                                        goto LABEL_442;
                                      }
LABEL_132:
                                      WTF::AtomStringImpl::addLiteral();
                                      v2 = (unint64_t)v258;
                                      v87 = JSC::JSObject::get(v11, a1, (unint64_t)v258);
                                      if (v2)
                                      {
                                        if (*(_DWORD *)v2 == 2)
                                          WTF::StringImpl::destroy((WTF::StringImpl *)v2, v86);
                                        else
                                          *(_DWORD *)v2 -= 2;
                                      }
                                      if (*((_DWORD *)v9 + 20)
                                        && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
                                      {
                                        goto LABEL_442;
                                      }
                                      if (v87 == 10)
                                      {
                                        v245 = 0;
                                        goto LABEL_144;
                                      }
                                      v88 = (JSC::VM *)*((_QWORD *)a1 + 7);
                                      if (v87 >= 0xFFFE000000000000)
                                      {
                                        v90 = (_DWORD)v87 != 0;
                                        goto LABEL_142;
                                      }
                                      *(_QWORD *)&v89 = v87 - 0x2000000000000;
                                      if (v87 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
                                      {
                                        if (v89 <= 0.0)
                                        {
                                          v223 = v89 < 0.0;
                                          goto LABEL_670;
                                        }
                                      }
                                      else
                                      {
                                        if ((v87 & 0xFFFE000000000002) != 0)
                                        {
                                          v90 = v87 == 7;
LABEL_142:
                                          v245 = v90;
LABEL_143:
                                          if (*((_DWORD *)v88 + 20)
                                            && (JSC::VM::hasExceptionsAfterHandlingTraps(v88) & 1) != 0)
                                          {
                                            goto LABEL_442;
                                          }
LABEL_144:
                                          WTF::AtomStringImpl::addLiteral();
                                          v2 = (unint64_t)v258;
                                          v92 = JSC::JSObject::get(v11, a1, (unint64_t)v258);
                                          if (v2)
                                          {
                                            if (*(_DWORD *)v2 == 2)
                                              WTF::StringImpl::destroy((WTF::StringImpl *)v2, v91);
                                            else
                                              *(_DWORD *)v2 -= 2;
                                          }
                                          if (*((_DWORD *)v9 + 20)
                                            && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
                                          {
                                            goto LABEL_442;
                                          }
                                          if (v92 == 10)
                                          {
                                            v244 = 0;
                                            goto LABEL_156;
                                          }
                                          v93 = (JSC::VM *)*((_QWORD *)a1 + 7);
                                          if (v92 >= 0xFFFE000000000000)
                                          {
                                            v95 = (_DWORD)v92 != 0;
                                            goto LABEL_154;
                                          }
                                          *(_QWORD *)&v94 = v92 - 0x2000000000000;
                                          if (v92 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
                                          {
                                            if (v94 <= 0.0)
                                            {
                                              v228 = v94 < 0.0;
                                              goto LABEL_678;
                                            }
                                          }
                                          else
                                          {
                                            if ((v92 & 0xFFFE000000000002) != 0)
                                            {
                                              v95 = v92 == 7;
LABEL_154:
                                              v244 = v95;
LABEL_155:
                                              if (*((_DWORD *)v93 + 20)
                                                && (JSC::VM::hasExceptionsAfterHandlingTraps(v93) & 1) != 0)
                                              {
                                                goto LABEL_442;
                                              }
LABEL_156:
                                              WTF::AtomStringImpl::addLiteral();
                                              v96 = v258;
                                              v2 = JSC::JSObject::get(v11, a1, (unint64_t)v258);
                                              if (v96)
                                              {
                                                if (*(_DWORD *)v96 == 2)
                                                  WTF::StringImpl::destroy(v96, v97);
                                                else
                                                  *(_DWORD *)v96 -= 2;
                                              }
                                              v98 = v280;
                                              if (*((_DWORD *)v280 + 20)
                                                && (JSC::VM::hasExceptionsAfterHandlingTraps(v280) & 1) != 0)
                                              {
                                                v32 = (JSC::JSGlobalObject *)0xFFFE000000000002;
                                                goto LABEL_442;
                                              }
                                              v255 = v6;
                                              if (v2 == 10)
                                              {
                                                v2 = 0;
                                              }
                                              else
                                              {
                                                v258 = (WTF::StringImpl *)v2;
                                                if (v2 < 0xFFFE000000000000)
                                                {
                                                  v102 = (JSC::VM *)*((_QWORD *)a1 + 7);
                                                  if (v2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                                                  {
                                                    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v258, a1);
                                                    v103 = v181;
                                                  }
                                                  else
                                                  {
                                                    *(_QWORD *)&v103 = v2 - 0x2000000000000;
                                                  }
                                                  if (*((_DWORD *)v102 + 20)
                                                    && (JSC::VM::hasExceptionsAfterHandlingTraps(v102) & 1) != 0)
                                                  {
                                                    goto LABEL_446;
                                                  }
                                                  v2 = 0;
                                                  if (fabs(v103) != INFINITY && v103 != 0.0)
                                                  {
                                                    v104 = -floor(-v103);
                                                    v105 = floor(v103);
                                                    if (v103 >= 0.0)
                                                      v104 = v105;
                                                    v106 = fmod(v104, 65536.0);
                                                    if (v106 > 32767.0)
                                                      v106 = v106 + -65536.0;
                                                    v2 = (int)v106;
                                                  }
                                                }
                                              }
                                              WTF::AtomStringImpl::addLiteral();
                                              v99 = v258;
                                              v6 = JSC::JSObject::get(v11, a1, (unint64_t)v258);
                                              if (v99)
                                              {
                                                if (*(_DWORD *)v99 == 2)
                                                  WTF::StringImpl::destroy(v99, v100);
                                                else
                                                  *(_DWORD *)v99 -= 2;
                                              }
                                              if (*((_DWORD *)v98 + 20)
                                                && (JSC::VM::hasExceptionsAfterHandlingTraps(v98) & 1) != 0)
                                              {
                                                goto LABEL_446;
                                              }
                                              v243 = v2;
                                              if (v6 == 10)
                                              {
                                                LOWORD(v6) = 0;
                                                goto LABEL_168;
                                              }
                                              v258 = (WTF::StringImpl *)v6;
                                              v107 = (JSC::VM *)*((_QWORD *)a1 + 7);
                                              if (v6 < 0xFFFE000000000000 || (v6 & 0x80000000) != 0)
                                              {
                                                if (v6 >= 0xFFFE000000000000)
                                                {
                                                  v108 = (double)(int)v6;
                                                }
                                                else if (v6 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                                                {
                                                  JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v258, a1);
                                                  v108 = v182;
                                                }
                                                else
                                                {
                                                  *(_QWORD *)&v108 = v6 - 0x2000000000000;
                                                }
                                                if (*((_DWORD *)v107 + 20)
                                                  && (JSC::VM::hasExceptionsAfterHandlingTraps(v107) & 1) != 0)
                                                {
LABEL_446:
                                                  v277 = 1;
LABEL_447:
                                                  v6 = v255;
                                                  v32 = (JSC::JSGlobalObject *)0xFFFE000000000002;
LABEL_448:
                                                  v129 = (unint64_t)v250;
LABEL_449:
                                                  v8 = v256;
LABEL_246:
                                                  if (v129)
                                                  {
                                                    if (*(_DWORD *)v129 == 1)
                                                    {
                                                      v150 = v8;
                                                      v151 = *(uint64_t **)(v129 + 16);
                                                      *(_QWORD *)(v129 + 16) = 0;
                                                      if (v151)
                                                      {
                                                        v2 = v129;
                                                        if (*v151)
                                                          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v151, v128);
                                                        WTF::fastFree((WTF *)v151, v128);
                                                        v129 = v2;
                                                      }
                                                      v152 = *(unsigned int **)(v129 + 8);
                                                      v153 = (WTF *)v129;
                                                      *(_QWORD *)(v129 + 8) = 0;
                                                      if (v152)
                                                      {
                                                        do
                                                        {
                                                          v154 = __ldaxr(v152);
                                                          v155 = v154 - 1;
                                                        }
                                                        while (__stlxr(v155, v152));
                                                        if (!v155)
                                                        {
                                                          atomic_store(1u, v152);
                                                          WTF::fastFree((WTF *)v152, v128);
                                                        }
                                                      }
                                                      WTF::fastFree(v153, v128);
                                                      v8 = v150;
                                                    }
                                                    else
                                                    {
                                                      --*(_DWORD *)v129;
                                                    }
                                                  }
LABEL_17:
                                                  v33 = v277;
                                                  if (v277)
                                                  {
                                                    v8 = 0;
                                                    v46 = 0;
                                                    if (v277 == -1)
                                                      goto LABEL_36;
                                                    goto LABEL_35;
                                                  }
                                                  if (v279)
                                                  {
                                                    std::__throw_bad_variant_access[abi:sn180100]();
                                                  }
                                                  else
                                                  {
                                                    v34 = v278;
                                                    v278 = 0;
                                                    v280 = v34;
                                                    LOWORD(v258) = v267;
                                                    BYTE2(v258) = v268;
                                                    v259 = v269;
                                                    v260 = v270;
                                                    v261 = v271;
                                                    v262 = v272;
                                                    *(_OWORD *)&v263[12] = *(_OWORD *)&v273[12];
                                                    *(_OWORD *)v263 = *(_OWORD *)v273;
                                                    v265 = v275;
                                                    v264 = v274;
                                                    v35 = v276;
                                                    v269 = 0;
                                                    v276 = 0;
                                                    v266 = v35;
                                                    v36 = (WebCore::MouseRelatedEvent *)bmalloc::api::isoAllocate();
                                                    v281 = WebCore::MouseEvent::MouseEvent(v36, 76, &v280, (int32x2_t *)&v258);
                                                    v39 = v266;
                                                    v266 = 0;
                                                    if (v39)
                                                    {
                                                      if ((*((_BYTE *)v39 + 22) & 2) != 0)
                                                      {
                                                        if (*((_DWORD *)v39 + 6) == 2)
                                                        {
                                                          if ((*((_WORD *)v39 + 15) & 0x400) == 0)
                                                            WebCore::Node::removedLastRef(v39);
                                                        }
                                                        else
                                                        {
                                                          *((_DWORD *)v39 + 6) -= 2;
                                                        }
                                                      }
                                                      else
                                                      {
                                                        (*(void (**)(WebCore::Node *))(*(_QWORD *)v39 + 96))(v39);
                                                      }
                                                    }
                                                    v40 = v259;
                                                    v259 = 0;
                                                    if (v40)
                                                    {
                                                      if (*(_DWORD *)v40 == 1)
                                                      {
                                                        v134 = (uint64_t *)*((_QWORD *)v40 + 2);
                                                        *((_QWORD *)v40 + 2) = 0;
                                                        if (v134)
                                                        {
                                                          if (*v134)
                                                            WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v134, v37);
                                                          WTF::fastFree((WTF *)v134, v37);
                                                        }
                                                        v135 = (unsigned int *)*((_QWORD *)v40 + 1);
                                                        *((_QWORD *)v40 + 1) = 0;
                                                        if (v135)
                                                        {
                                                          do
                                                          {
                                                            v136 = __ldaxr(v135);
                                                            v137 = v136 - 1;
                                                          }
                                                          while (__stlxr(v137, v135));
                                                          if (!v137)
                                                          {
                                                            atomic_store(1u, v135);
                                                            WTF::fastFree((WTF *)v135, v37);
                                                          }
                                                        }
                                                        WTF::fastFree(v40, v37);
                                                      }
                                                      else
                                                      {
                                                        --*(_DWORD *)v40;
                                                      }
                                                    }
                                                    v41 = v280;
                                                    v280 = 0;
                                                    if (v41)
                                                    {
                                                      if (*(_DWORD *)v41 == 2)
                                                        WTF::StringImpl::destroy(v41, v37);
                                                      else
                                                        *(_DWORD *)v41 -= 2;
                                                    }
                                                    if (*(void (***)(WebCore::MouseEvent *__hidden))v281 != off_1E33A5C38)
                                                    {
                                                      __break(0xC471u);
                                                      JUMPOUT(0x194D53B24);
                                                    }
                                                    v8 = WebCore::createWrapper<WebCore::MouseEvent,WebCore::MouseEvent>(*(JSC::VM **)(v6 + 40), (uint64_t *)&v281, v38);
                                                    v42 = *(JSC::JSCell **)(FunctionRealm + 40);
                                                    if (((unint64_t)v42 & 0xFFFE000000000002) != 0)
                                                      goto LABEL_33;
                                                    v43 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v42);
                                                    if (!v43)
                                                      goto LABEL_33;
                                                    v32 = v43;
                                                    if (v43 == *(JSC::JSGlobalObject **)(FunctionRealm + 24))
                                                      goto LABEL_33;
                                                    v2 = *((_QWORD *)a1 + 7);
                                                    FunctionRealm = JSC::getFunctionRealm(a1, v43, v44);
                                                    if (!*(_DWORD *)(v2 + 80))
                                                      goto LABEL_415;
                                                  }
                                                  if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v2) & 1) != 0)
                                                  {
LABEL_33:
                                                    if (*((_DWORD *)v257 + 20)
                                                      && (JSC::VM::hasExceptionsAfterHandlingTraps(v257) & 1) != 0)
                                                    {
                                                      v8 = 0;
                                                    }
                                                    v45 = v281;
                                                    v281 = 0;
                                                    if (v45)
                                                    {
                                                      if (*((_DWORD *)v45 + 4) == 1)
                                                        (*(void (**)(WebCore::MouseRelatedEvent *))(*(_QWORD *)v45 + 8))(v45);
                                                      else
                                                        --*((_DWORD *)v45 + 4);
                                                    }
LABEL_35:
                                                    ((void (*)(WTF::StringImpl **, __int16 *))off_1E32BEE88[v33])(&v258, &v267);
                                                    v46 = v8;
LABEL_36:
                                                    v7 = v279;
                                                    goto LABEL_37;
                                                  }
LABEL_415:
                                                  v176 = (JSC::JSObject *)WebCore::getDOMStructure<WebCore::JSMouseEvent>((WebCore::JSUIEvent *)v2, (JSC::VM *)FunctionRealm);
                                                  SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v32, v176, v177);
                                                  if (!*(_DWORD *)(v2 + 80)
                                                    || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v2) & 1) == 0)
                                                  {
                                                    JSC::JSObject::setStructure((JSCell *)v8, (JSC::VM *)v2, SubclassStructure);
                                                  }
                                                  goto LABEL_33;
                                                }
                                                LOWORD(v6) = 0;
                                                if (fabs(v108) != INFINITY && v108 != 0.0)
                                                {
                                                  v109 = -floor(-v108);
                                                  v110 = floor(v108);
                                                  if (v108 >= 0.0)
                                                    v109 = v110;
                                                  v111 = fmod(v109, 65536.0);
                                                  if (v111 < 0.0)
                                                    v111 = v111 + 65536.0;
                                                  LODWORD(v6) = (int)v111;
                                                }
                                              }
LABEL_168:
                                              WTF::AtomStringImpl::addLiteral();
                                              v2 = (unint64_t)v258;
                                              v16 = JSC::JSObject::get(v11, a1, (unint64_t)v258);
                                              if (v2)
                                              {
                                                if (*(_DWORD *)v2 == 2)
                                                  WTF::StringImpl::destroy((WTF::StringImpl *)v2, v101);
                                                else
                                                  *(_DWORD *)v2 -= 2;
                                              }
                                              if (*((_DWORD *)v98 + 20)
                                                && (JSC::VM::hasExceptionsAfterHandlingTraps(v98) & 1) != 0)
                                              {
                                                goto LABEL_446;
                                              }
                                              if (v16 == 10)
                                              {
                                                LODWORD(v16) = 0;
                                              }
                                              else
                                              {
                                                v258 = (WTF::StringImpl *)v16;
                                                v2 = *((_QWORD *)a1 + 7);
                                                if (v16 < 0xFFFE000000000000)
                                                {
                                                  v143 = v16 - 0x2000000000000;
                                                  if (v16 - 0x2000000000000 >= 0xFFFC000000000000)
                                                  {
                                                    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v258, a1);
                                                    v143 = v184;
                                                  }
                                                  v144 = (v143 >> 52) & 0x7FF;
                                                  if ((v144 - 1023) <= 0x53)
                                                  {
                                                    v162 = v143 >> (51 - (v143 >> 52));
                                                    if (v144 > 0x433)
                                                      LODWORD(v162) = v143 << ((v143 >> 52) - 51);
                                                    if (v144 >= 0x41F)
                                                      v163 = v162;
                                                    else
                                                      v163 = (((1 << ((v143 >> 52) + 1)) - 1) & v162)
                                                           + (1 << ((v143 >> 52) + 1));
                                                    if ((v143 & 0x8000000000000000) == 0)
                                                      LODWORD(v16) = v163;
                                                    else
                                                      LODWORD(v16) = -v163;
                                                  }
                                                  else
                                                  {
                                                    LODWORD(v16) = 0;
                                                  }
                                                }
                                                if (*(_DWORD *)(v2 + 80)
                                                  && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v2))
                                                {
                                                  goto LABEL_451;
                                                }
                                              }
                                              WTF::AtomStringImpl::addLiteral();
                                              v112 = v258;
                                              v2 = JSC::JSObject::get(v11, a1, (unint64_t)v258);
                                              if (v112)
                                              {
                                                if (*(_DWORD *)v112 == 2)
                                                  WTF::StringImpl::destroy(v112, v113);
                                                else
                                                  *(_DWORD *)v112 -= 2;
                                              }
                                              if (*((_DWORD *)v98 + 20)
                                                && (JSC::VM::hasExceptionsAfterHandlingTraps(v98) & 1) != 0)
                                              {
LABEL_451:
                                                v277 = 1;
                                                FunctionRealm = v254;
                                                goto LABEL_447;
                                              }
                                              v242 = v62;
                                              if (v2 == 10)
                                              {
                                                v2 = 0;
                                              }
                                              else
                                              {
                                                v258 = (WTF::StringImpl *)v2;
                                                v114 = (JSC::VM *)*((_QWORD *)a1 + 7);
                                                if (v2 < 0xFFFE000000000000)
                                                {
                                                  v145 = v2 - 0x2000000000000;
                                                  if (v2 - 0x2000000000000 >= 0xFFFC000000000000)
                                                  {
                                                    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v258, a1);
                                                    v145 = v185;
                                                  }
                                                  v146 = (v145 >> 52) & 0x7FF;
                                                  if ((v146 - 1023) <= 0x53)
                                                  {
                                                    v164 = v145 >> (51 - (v145 >> 52));
                                                    if (v146 > 0x433)
                                                      LODWORD(v164) = v145 << ((v145 >> 52) - 51);
                                                    if (v146 >= 0x41F)
                                                      v165 = v164;
                                                    else
                                                      v165 = (((1 << ((v145 >> 52) + 1)) - 1) & v164)
                                                           + (1 << ((v145 >> 52) + 1));
                                                    if ((v145 & 0x8000000000000000) == 0)
                                                      v2 = v165;
                                                    else
                                                      v2 = -v165;
                                                  }
                                                  else
                                                  {
                                                    v2 = 0;
                                                  }
                                                }
                                                if (*((_DWORD *)v114 + 20)
                                                  && JSC::VM::hasExceptionsAfterHandlingTraps(v114))
                                                {
                                                  goto LABEL_262;
                                                }
                                              }
                                              WTF::AtomStringImpl::addLiteral();
                                              v115 = v258;
                                              v117 = JSC::JSObject::get(v11, a1, (unint64_t)v258);
                                              if (v115)
                                              {
                                                if (*(_DWORD *)v115 == 2)
                                                  WTF::StringImpl::destroy(v115, v116);
                                                else
                                                  *(_DWORD *)v115 -= 2;
                                              }
                                              if (*((_DWORD *)v98 + 20)
                                                && (JSC::VM::hasExceptionsAfterHandlingTraps(v98) & 1) != 0)
                                              {
LABEL_262:
                                                v277 = 1;
                                                v8 = v256;
                                                FunctionRealm = v254;
                                                goto LABEL_263;
                                              }
                                              v31 = 0.0;
                                              if (v117 != 10)
                                              {
                                                v258 = (WTF::StringImpl *)v117;
                                                v118 = (WebCore::MouseRelatedEvent *)*((_QWORD *)a1 + 7);
                                                v281 = v118;
                                                if (v117 >= 0xFFFE000000000000)
                                                {
                                                  v31 = (double)(int)v117;
                                                }
                                                else if (v117 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                                                {
                                                  JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v258, a1);
                                                  v31 = v179;
                                                }
                                                else
                                                {
                                                  *(_QWORD *)&v31 = v117 - 0x2000000000000;
                                                }
                                                if (*((_DWORD *)v118 + 20)
                                                  && (JSC::VM::hasExceptionsAfterHandlingTraps(v118) & 1) != 0)
                                                {
                                                  goto LABEL_262;
                                                }
                                                if ((*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                                                  goto LABEL_456;
                                              }
                                              WTF::AtomStringImpl::addLiteral();
                                              v119 = v258;
                                              v121 = JSC::JSObject::get(v11, a1, (unint64_t)v258);
                                              if (v119)
                                              {
                                                if (*(_DWORD *)v119 == 2)
                                                  WTF::StringImpl::destroy(v119, v120);
                                                else
                                                  *(_DWORD *)v119 -= 2;
                                              }
                                              if (*((_DWORD *)v98 + 20)
                                                && (JSC::VM::hasExceptionsAfterHandlingTraps(v98) & 1) != 0)
                                              {
                                                goto LABEL_262;
                                              }
                                              v30 = 0.0;
                                              if (v121 != 10)
                                              {
                                                v258 = (WTF::StringImpl *)v121;
                                                v122 = (WebCore::MouseRelatedEvent *)*((_QWORD *)a1 + 7);
                                                v281 = v122;
                                                if (v121 >= 0xFFFE000000000000)
                                                {
                                                  v30 = (double)(int)v121;
                                                }
                                                else if (v121 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                                                {
                                                  JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v258, a1);
                                                  v30 = v180;
                                                }
                                                else
                                                {
                                                  *(_QWORD *)&v30 = v121 - 0x2000000000000;
                                                }
                                                if (*((_DWORD *)v122 + 20)
                                                  && (JSC::VM::hasExceptionsAfterHandlingTraps(v122) & 1) != 0)
                                                {
                                                  goto LABEL_262;
                                                }
                                                if ((*(_QWORD *)&v30 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                                                {
LABEL_456:
                                                  JSC::throwTypeError();
                                                  goto LABEL_262;
                                                }
                                              }
                                              WTF::AtomStringImpl::addLiteral();
                                              v123 = v258;
                                              v125 = JSC::JSObject::get(v11, a1, (unint64_t)v258);
                                              if (v123)
                                              {
                                                if (*(_DWORD *)v123 == 2)
                                                  WTF::StringImpl::destroy(v123, v124);
                                                else
                                                  *(_DWORD *)v123 -= 2;
                                              }
                                              if (*((_DWORD *)v98 + 20)
                                                && (JSC::VM::hasExceptionsAfterHandlingTraps(v98) & 1) != 0)
                                              {
                                                goto LABEL_262;
                                              }
                                              if ((v125 | 8) == 0xA)
                                              {
                                                v29 = 0;
LABEL_234:
                                                WTF::AtomStringImpl::addLiteral();
                                                v126 = v258;
                                                v15 = JSC::JSObject::get(v11, a1, (unint64_t)v258);
                                                if (v126)
                                                {
                                                  if (*(_DWORD *)v126 == 2)
                                                    WTF::StringImpl::destroy(v126, v127);
                                                  else
                                                    *(_DWORD *)v126 -= 2;
                                                }
                                                if (*((_DWORD *)v98 + 20)
                                                  && (JSC::VM::hasExceptionsAfterHandlingTraps(v98) & 1) != 0)
                                                {
                                                  goto LABEL_462;
                                                }
                                                if (v15 == 10)
                                                {
                                                  LODWORD(v15) = 0;
                                                }
                                                else
                                                {
                                                  v258 = (WTF::StringImpl *)v15;
                                                  v130 = (JSC::VM *)*((_QWORD *)a1 + 7);
                                                  if (v15 < 0xFFFE000000000000)
                                                  {
                                                    v156 = v15 - 0x2000000000000;
                                                    if (v15 - 0x2000000000000 >= 0xFFFC000000000000)
                                                    {
                                                      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v258, a1);
                                                      v156 = v186;
                                                    }
                                                    v157 = (v156 >> 52) & 0x7FF;
                                                    if ((v157 - 1023) <= 0x53)
                                                    {
                                                      v166 = v156 >> (51 - (v156 >> 52));
                                                      if (v157 > 0x433)
                                                        LODWORD(v166) = v156 << ((v156 >> 52) - 51);
                                                      if (v157 >= 0x41F)
                                                        v167 = v166;
                                                      else
                                                        v167 = (((1 << ((v156 >> 52) + 1)) - 1) & v166)
                                                             + (1 << ((v156 >> 52) + 1));
                                                      if ((v156 & 0x8000000000000000) == 0)
                                                        LODWORD(v15) = v167;
                                                      else
                                                        LODWORD(v15) = -v167;
                                                    }
                                                    else
                                                    {
                                                      LODWORD(v15) = 0;
                                                    }
                                                  }
                                                  if (*((_DWORD *)v130 + 20)
                                                    && (JSC::VM::hasExceptionsAfterHandlingTraps(v130) & 1) != 0)
                                                  {
                                                    goto LABEL_462;
                                                  }
                                                }
                                                WTF::AtomStringImpl::addLiteral();
                                                v131 = v258;
                                                v14 = JSC::JSObject::get(v11, a1, (unint64_t)v258);
                                                if (v131)
                                                {
                                                  if (*(_DWORD *)v131 == 2)
                                                    WTF::StringImpl::destroy(v131, v132);
                                                  else
                                                    *(_DWORD *)v131 -= 2;
                                                }
                                                if (*((_DWORD *)v98 + 20)
                                                  && (JSC::VM::hasExceptionsAfterHandlingTraps(v98) & 1) != 0)
                                                {
LABEL_462:
                                                  v277 = 1;
                                                  FunctionRealm = v254;
                                                  if (v29)
                                                  {
                                                    v6 = v255;
                                                    v32 = (JSC::JSGlobalObject *)0xFFFE000000000002;
                                                    v129 = (unint64_t)v250;
                                                    if ((*(_BYTE *)(v29 + 22) & 2) == 0)
                                                    {
                                                      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 96))(v29);
                                                      goto LABEL_448;
                                                    }
                                                    if (*(_DWORD *)(v29 + 24) != 2)
                                                    {
                                                      *(_DWORD *)(v29 + 24) -= 2;
                                                      goto LABEL_449;
                                                    }
                                                    if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
                                                      WebCore::Node::removedLastRef((WebCore::Node *)v29);
                                                    v8 = v256;
                                                    FunctionRealm = v254;
LABEL_264:
                                                    v129 = (unint64_t)v250;
                                                    goto LABEL_246;
                                                  }
                                                  v8 = v256;
LABEL_263:
                                                  v6 = v255;
                                                  v32 = (JSC::JSGlobalObject *)0xFFFE000000000002;
                                                  goto LABEL_264;
                                                }
                                                if (v14 == 10)
                                                {
                                                  LODWORD(v14) = 0;
                                                  FunctionRealm = v254;
                                                }
                                                else
                                                {
                                                  v258 = (WTF::StringImpl *)v14;
                                                  v133 = (JSC::VM *)*((_QWORD *)a1 + 7);
                                                  FunctionRealm = v254;
                                                  if (v14 < 0xFFFE000000000000)
                                                  {
                                                    v158 = v14 - 0x2000000000000;
                                                    if (v14 - 0x2000000000000 >= 0xFFFC000000000000)
                                                    {
                                                      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v258, a1);
                                                      v158 = v187;
                                                    }
                                                    v159 = (v158 >> 52) & 0x7FF;
                                                    if ((v159 - 1023) <= 0x53)
                                                    {
                                                      v168 = v158 >> (51 - (v158 >> 52));
                                                      if (v159 > 0x433)
                                                        LODWORD(v168) = v158 << ((v158 >> 52) - 51);
                                                      if (v159 >= 0x41F)
                                                        v169 = v168;
                                                      else
                                                        v169 = (((1 << ((v158 >> 52) + 1)) - 1) & v168)
                                                             + (1 << ((v158 >> 52) + 1));
                                                      if ((v158 & 0x8000000000000000) == 0)
                                                        LODWORD(v14) = v169;
                                                      else
                                                        LODWORD(v14) = -v169;
                                                    }
                                                    else
                                                    {
                                                      LODWORD(v14) = 0;
                                                    }
                                                  }
                                                  if (*((_DWORD *)v133 + 20)
                                                    && (JSC::VM::hasExceptionsAfterHandlingTraps(v133) & 1) != 0)
                                                  {
                                                    goto LABEL_462;
                                                  }
                                                }
                                                v19 = v252;
                                                v20 = v253;
                                                v18 = v251;
                                                v22 = v250;
                                                v21 = v242;
                                                v17 = v243;
                                                v24 = v248;
                                                v23 = v249;
                                                v26 = v246;
                                                v25 = v247;
                                                v28 = v244;
                                                v27 = v245;
                                                goto LABEL_15;
                                              }
                                              v258 = (WTF::StringImpl *)*((_QWORD *)a1 + 7);
                                              if ((v125 & 0xFFFE000000000002) != 0)
                                              {
LABEL_261:
                                                JSC::throwTypeError();
                                                goto LABEL_262;
                                              }
                                              v138 = *(unsigned int *)(16 * (*(_DWORD *)v125 & 0xFFFFFFFE) + 0x4C);
                                              v139 = 16 * v138;
                                              if ((char **)(16 * v138) == &WebCore::JSWindowProxy::s_info)
                                              {
                                                v140 = (uint64_t *)(*(_QWORD *)(v125 + 16) + 3408);
                                              }
                                              else
                                              {
                                                if (!(_DWORD)v138 || (char **)v139 == &WebCore::JSDOMWindow::s_info)
                                                {
                                                  if (!(_DWORD)v138)
                                                    goto LABEL_261;
                                                  goto LABEL_279;
                                                }
                                                v170 = 16 * v138;
                                                do
                                                  v170 = *(_QWORD *)(v170 + 16);
                                                while ((char **)v170 != &WebCore::JSDOMWindow::s_info && v170 != 0);
                                                if (v170)
                                                {
LABEL_279:
                                                  v140 = (uint64_t *)(v125 + 3408);
                                                  goto LABEL_280;
                                                }
                                                if ((char **)v139 == &WebCore::JSWorkerGlobalScope::s_info)
                                                  goto LABEL_393;
                                                v172 = v139;
                                                do
                                                  v172 = *(_QWORD *)(v172 + 16);
                                                while ((char **)v172 != &WebCore::JSWorkerGlobalScope::s_info
                                                     && v172 != 0);
                                                if (v172)
                                                {
LABEL_393:
                                                  v29 = *(_QWORD *)(v125 + 3400) + 320;
                                                  goto LABEL_281;
                                                }
                                                if ((char **)v139 != &WebCore::JSEventTarget::s_info)
                                                {
                                                  do
                                                    v139 = *(_QWORD *)(v139 + 16);
                                                  while ((char **)v139 != &WebCore::JSEventTarget::s_info && v139 != 0);
                                                  if (!v139)
                                                    goto LABEL_261;
                                                }
                                                v140 = (uint64_t *)(v125 + 24);
                                              }
LABEL_280:
                                              v29 = *v140;
                                              if (!*v140)
                                                goto LABEL_261;
LABEL_281:
                                              if ((*(_BYTE *)(v29 + 22) & 2) != 0)
                                                *(_DWORD *)(v29 + 24) += 2;
                                              else
                                                (*(void (**)(uint64_t))(*(_QWORD *)v29 + 88))(v29);
                                              goto LABEL_234;
                                            }
                                            v229 = *(unsigned __int8 *)(v92 + 5);
                                            if (v229 == 3)
                                            {
                                              v232 = *(_DWORD *)(v92 + 8);
LABEL_674:
                                              v241 = v232 == 0;
                                              goto LABEL_675;
                                            }
                                            if (v229 == 2)
                                            {
                                              v230 = *(_QWORD *)(v92 + 8);
                                              if ((v230 & 1) != 0)
                                                v231 = (int *)(v92 + 16);
                                              else
                                                v231 = (int *)(v230 + 4);
                                              v232 = *v231;
                                              goto LABEL_674;
                                            }
                                            if ((*(_BYTE *)(16 * (*(_DWORD *)v92 & 0xFFFFFFFE) + 0xA) & 1) != 0)
                                            {
                                              v241 = *(_QWORD *)(16 * (*(_DWORD *)v92 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
LABEL_675:
                                              v228 = !v241;
                                              goto LABEL_678;
                                            }
                                          }
                                          v228 = 1;
LABEL_678:
                                          v244 = v228;
                                          goto LABEL_155;
                                        }
                                        v224 = *(unsigned __int8 *)(v87 + 5);
                                        if (v224 == 3)
                                        {
                                          v227 = *(_DWORD *)(v87 + 8);
LABEL_666:
                                          v240 = v227 == 0;
                                          goto LABEL_667;
                                        }
                                        if (v224 == 2)
                                        {
                                          v225 = *(_QWORD *)(v87 + 8);
                                          if ((v225 & 1) != 0)
                                            v226 = (int *)(v87 + 16);
                                          else
                                            v226 = (int *)(v225 + 4);
                                          v227 = *v226;
                                          goto LABEL_666;
                                        }
                                        if ((*(_BYTE *)(16 * (*(_DWORD *)v87 & 0xFFFFFFFE) + 0xA) & 1) != 0)
                                        {
                                          v240 = *(_QWORD *)(16 * (*(_DWORD *)v87 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
LABEL_667:
                                          v223 = !v240;
                                          goto LABEL_670;
                                        }
                                      }
                                      v223 = 1;
LABEL_670:
                                      v245 = v223;
                                      goto LABEL_143;
                                    }
                                    v219 = *(unsigned __int8 *)(v82 + 5);
                                    if (v219 == 3)
                                    {
                                      v222 = *(_DWORD *)(v82 + 8);
LABEL_658:
                                      v239 = v222 == 0;
                                      goto LABEL_659;
                                    }
                                    if (v219 == 2)
                                    {
                                      v220 = *(_QWORD *)(v82 + 8);
                                      if ((v220 & 1) != 0)
                                        v221 = (int *)(v82 + 16);
                                      else
                                        v221 = (int *)(v220 + 4);
                                      v222 = *v221;
                                      goto LABEL_658;
                                    }
                                    if ((*(_BYTE *)(16 * (*(_DWORD *)v82 & 0xFFFFFFFE) + 0xA) & 1) != 0)
                                    {
                                      v239 = *(_QWORD *)(16 * (*(_DWORD *)v82 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
LABEL_659:
                                      v218 = !v239;
                                      goto LABEL_662;
                                    }
                                  }
                                  v218 = 1;
LABEL_662:
                                  v246 = v218;
                                  goto LABEL_131;
                                }
                                v214 = *(unsigned __int8 *)(v77 + 5);
                                if (v214 == 3)
                                {
                                  v217 = *(_DWORD *)(v77 + 8);
LABEL_650:
                                  v238 = v217 == 0;
                                  goto LABEL_651;
                                }
                                if (v214 == 2)
                                {
                                  v215 = *(_QWORD *)(v77 + 8);
                                  if ((v215 & 1) != 0)
                                    v216 = (int *)(v77 + 16);
                                  else
                                    v216 = (int *)(v215 + 4);
                                  v217 = *v216;
                                  goto LABEL_650;
                                }
                                if ((*(_BYTE *)(16 * (*(_DWORD *)v77 & 0xFFFFFFFE) + 0xA) & 1) != 0)
                                {
                                  v238 = *(_QWORD *)(16 * (*(_DWORD *)v77 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
LABEL_651:
                                  v213 = !v238;
                                  goto LABEL_654;
                                }
                              }
                              v213 = 1;
LABEL_654:
                              v247 = v213;
                              goto LABEL_119;
                            }
                            v209 = *(unsigned __int8 *)(v72 + 5);
                            if (v209 == 3)
                            {
                              v212 = *(_DWORD *)(v72 + 8);
LABEL_642:
                              v237 = v212 == 0;
                              goto LABEL_643;
                            }
                            if (v209 == 2)
                            {
                              v210 = *(_QWORD *)(v72 + 8);
                              if ((v210 & 1) != 0)
                                v211 = (int *)(v72 + 16);
                              else
                                v211 = (int *)(v210 + 4);
                              v212 = *v211;
                              goto LABEL_642;
                            }
                            if ((*(_BYTE *)(16 * (*(_DWORD *)v72 & 0xFFFFFFFE) + 0xA) & 1) != 0)
                            {
                              v237 = *(_QWORD *)(16 * (*(_DWORD *)v72 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
LABEL_643:
                              v208 = !v237;
                              goto LABEL_646;
                            }
                          }
                          v208 = 1;
LABEL_646:
                          v248 = v208;
                          goto LABEL_107;
                        }
                        v204 = *(unsigned __int8 *)(v67 + 5);
                        if (v204 == 3)
                        {
                          v207 = *(_DWORD *)(v67 + 8);
LABEL_634:
                          v236 = v207 == 0;
                          goto LABEL_635;
                        }
                        if (v204 == 2)
                        {
                          v205 = *(_QWORD *)(v67 + 8);
                          if ((v205 & 1) != 0)
                            v206 = (int *)(v67 + 16);
                          else
                            v206 = (int *)(v205 + 4);
                          v207 = *v206;
                          goto LABEL_634;
                        }
                        if ((*(_BYTE *)(16 * (*(_DWORD *)v67 & 0xFFFFFFFE) + 0xA) & 1) != 0)
                        {
                          v236 = *(_QWORD *)(16 * (*(_DWORD *)v67 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
LABEL_635:
                          v203 = !v236;
                          goto LABEL_638;
                        }
                      }
                      v203 = 1;
LABEL_638:
                      v249 = v203;
                      goto LABEL_95;
                    }
LABEL_424:
                    v277 = 1;
                    goto LABEL_425;
                  }
                  v199 = *(unsigned __int8 *)(v57 + 5);
                  if (v199 == 3)
                  {
                    v202 = *(_DWORD *)(v57 + 8);
LABEL_626:
                    v235 = v202 == 0;
                    goto LABEL_627;
                  }
                  if (v199 == 2)
                  {
                    v200 = *(_QWORD *)(v57 + 8);
                    if ((v200 & 1) != 0)
                      v201 = (int *)(v57 + 16);
                    else
                      v201 = (int *)(v200 + 4);
                    v202 = *v201;
                    goto LABEL_626;
                  }
                  if ((*(_BYTE *)(16 * (*(_DWORD *)v57 & 0xFFFFFFFE) + 0xA) & 1) != 0)
                  {
                    v235 = *(_QWORD *)(16 * (*(_DWORD *)v57 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
LABEL_627:
                    v198 = !v235;
                    goto LABEL_630;
                  }
                }
                v198 = 1;
LABEL_630:
                v251 = v198;
                goto LABEL_69;
              }
              v194 = *(unsigned __int8 *)(v52 + 5);
              if (v194 == 3)
              {
                v197 = *(_DWORD *)(v52 + 8);
LABEL_618:
                v234 = v197 == 0;
                goto LABEL_619;
              }
              if (v194 == 2)
              {
                v195 = *(_QWORD *)(v52 + 8);
                if ((v195 & 1) != 0)
                  v196 = (int *)(v52 + 16);
                else
                  v196 = (int *)(v195 + 4);
                v197 = *v196;
                goto LABEL_618;
              }
              if ((*(_BYTE *)(16 * (*(_DWORD *)v52 & 0xFFFFFFFE) + 0xA) & 1) != 0)
              {
                v234 = *(_QWORD *)(16 * (*(_DWORD *)v52 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
LABEL_619:
                v193 = !v234;
                goto LABEL_622;
              }
            }
            v193 = 1;
LABEL_622:
            v252 = v193;
            goto LABEL_57;
          }
          v189 = *(unsigned __int8 *)(v13 + 5);
          if (v189 == 3)
          {
            v192 = *(_DWORD *)(v13 + 8);
LABEL_610:
            v233 = v192 == 0;
            goto LABEL_611;
          }
          if (v189 == 2)
          {
            v190 = *(_QWORD *)(v13 + 8);
            if ((v190 & 1) != 0)
              v191 = (int *)(v13 + 16);
            else
              v191 = (int *)(v190 + 4);
            v192 = *v191;
            goto LABEL_610;
          }
          if ((*(_BYTE *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0xA) & 1) != 0)
          {
            v233 = *(_QWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
LABEL_611:
            v188 = !v233;
            goto LABEL_614;
          }
        }
        v188 = 1;
LABEL_614:
        v253 = v188;
        goto LABEL_45;
      }
      v255 = v6;
      LODWORD(v14) = 0;
      LODWORD(v15) = 0;
      LODWORD(v16) = 0;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v27 = 0;
      v28 = 0;
      LOWORD(v6) = 0;
      v2 = 0;
      v29 = 0;
      v30 = 0.0;
    }
    v31 = 0.0;
LABEL_15:
    LOBYTE(v267) = v20;
    HIBYTE(v267) = v19;
    v268 = v18;
    v269 = v22;
    v270 = v21;
    LOBYTE(v271) = v24;
    BYTE1(v271) = v28;
    BYTE2(v271) = v23;
    HIBYTE(v271) = v25;
    LOBYTE(v272) = v26;
    HIBYTE(v272) = v27;
    *(_DWORD *)v273 = v15;
    *(_DWORD *)&v273[4] = v14;
    *(double *)&v273[12] = v31;
    *(double *)&v273[20] = v30;
    v274 = __PAIR64__(v2, v16);
    LOWORD(v275) = v17;
    HIWORD(v275) = v6;
    v276 = (WebCore::Node *)v29;
    v277 = 0;
    v6 = v255;
    v8 = v256;
LABEL_16:
    v32 = (JSC::JSGlobalObject *)0xFFFE000000000002;
    goto LABEL_17;
  }
  v46 = 0;
LABEL_37:
  if (v7 != -1)
    ((void (*)(__int16 *, JSC::VM **))off_1E32BEAA0[v7])(&v267, &v278);
  return v46;
}

