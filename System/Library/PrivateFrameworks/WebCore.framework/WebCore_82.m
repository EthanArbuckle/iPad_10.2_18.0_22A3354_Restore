void sub_195F88B10(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::EventHandler::performDragAndDrop(uint64_t a1, void *a2, uint64_t *a3, unsigned __int8 a4, uint64_t a5)
{
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  WebCore *Ref;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::DataTransfer *v29;
  void *v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *v40;
  unsigned int v41;
  WTF *v42;
  void *v43;
  uint64_t v44;
  WebCore::DataTransfer *v45;
  uint64_t v46;
  WebCore::DataTransfer *v47;
  WebCore::DataTransfer *v48;

  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v11 = (unsigned int *)(v10 + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  v13 = *(_QWORD *)(a1 + 696);
  if (!v13)
    goto LABEL_41;
  v14 = *(_DWORD *)(v13 + 24);
  v15 = v14 + 2;
  *(_DWORD *)(v13 + 24) = v14 + 2;
  if ((*(_WORD *)(v13 + 28) & 0x10) == 0
    || (v16 = *(_QWORD *)(*(_QWORD *)(v13 + 96) + 24), v16 != *(_QWORD *)(WebCore::HTMLNames::frameTag + 24))
    && v16 != *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24))
  {
    v19 = 0;
    v20 = 1;
    goto LABEL_14;
  }
  v17 = v14 + 4;
  *(_DWORD *)(v13 + 24) = v17;
  v18 = *(_QWORD *)(v13 + 112);
  if (!v18)
    goto LABEL_10;
  v19 = *(_QWORD *)(v18 + 8);
  if (!v19)
    goto LABEL_11;
  if (*(_BYTE *)(v19 + 144))
  {
LABEL_10:
    v19 = 0;
LABEL_11:
    if (v15)
    {
LABEL_12:
      v20 = 0;
      *(_DWORD *)(v13 + 24) = v15;
      goto LABEL_14;
    }
    goto LABEL_45;
  }
  v40 = (unsigned int *)(v19 + 8);
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 + 1, v40));
  v17 = *(_DWORD *)(v13 + 24);
  v15 = v17 - 2;
  if (v17 != 2)
    goto LABEL_12;
LABEL_45:
  if ((*(_WORD *)(v13 + 30) & 0x400) != 0)
  {
    v20 = 0;
    v15 = v17;
  }
  else
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v13, a2);
    v20 = 0;
    v15 = *(_DWORD *)(v13 + 24);
  }
LABEL_14:
  v21 = v15 - 2;
  if (v21)
  {
    *(_DWORD *)(v13 + 24) = v21;
  }
  else if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v13, a2);
  }
  if ((v20 & 1) == 0)
  {
    if (v19)
    {
      v32 = *(_DWORD **)(v19 + 640);
      ++*v32;
      v33 = WebCore::EventHandler::performDragAndDrop(v32, a2, a3, a4, a5);
      if (!*v32)
      {
        __break(0xC471u);
        JUMPOUT(0x195F88ECCLL);
      }
      v31 = v33;
      --*v32;
      goto LABEL_34;
    }
LABEL_41:
    v31 = 0;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(a1 + 696);
  if (v22)
  {
    *(_DWORD *)(v22 + 24) += 2;
    v23 = *(_QWORD *)(*(_QWORD *)(v22 + 40) + 8);
    *(_DWORD *)(v23 + 24) += 2;
    Ref = WebCore::DataTransfer::createForDrop((WebCore::Document *)v23, a3, a5, (uint64_t *)&v48);
    if (*(_DWORD *)(v23 + 24) == 2)
    {
      if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
        Ref = (WebCore *)WebCore::Node::removedLastRef((WebCore::Node *)v23, v25);
    }
    else
    {
      *(_DWORD *)(v23 + 24) -= 2;
    }
    v26 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v26 || (v27 = *(_QWORD *)(v26 + 96)) == 0)
      v27 = WebCore::threadGlobalDataSlow(Ref);
    v28 = *(_QWORD *)(v27 + 40);
    if (!v28)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v27);
      v28 = *(_QWORD *)(v27 + 40);
    }
    v29 = v48;
    v31 = WebCore::EventHandler::dispatchDragEvent(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 8), (uint64_t *)(v28 + 704), (WebCore::Node *)v22, (uint64_t)a2, v48);
    *((_DWORD *)v29 + 6) = 0;
    if (*(_DWORD *)v29 == 1)
    {
      WebCore::DataTransfer::~DataTransfer(v29, v30);
      WTF::fastFree(v42, v43);
    }
    else
    {
      --*(_DWORD *)v29;
    }
    if (*(_DWORD *)(v22 + 24) == 2)
    {
      if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v22, v30);
    }
    else
    {
      *(_DWORD *)(v22 + 24) -= 2;
    }
  }
  else
  {
    v31 = 0;
  }
  if (v19)
  {
LABEL_34:
    v34 = (unsigned int *)(v19 + 8);
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
    {
      atomic_store(1u, v34);
      v46 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v46 = off_1E31FE290;
      *(_QWORD *)(v46 + 8) = v34;
      v48 = (WebCore::DataTransfer *)v46;
      WTF::ensureOnMainThread();
      v47 = v48;
      v48 = 0;
      if (v47)
        (*(void (**)(WebCore::DataTransfer *))(*(_QWORD *)v47 + 8))(v47);
    }
  }
LABEL_37:
  WebCore::EventHandler::clearDragState((WebCore::AutoscrollController **)a1);
  if (v10)
  {
    do
    {
      v37 = __ldaxr(v11);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v11));
    if (!v38)
    {
      atomic_store(1u, v11);
      v44 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v44 = off_1E31FE290;
      *(_QWORD *)(v44 + 8) = v11;
      v48 = (WebCore::DataTransfer *)v44;
      WTF::ensureOnMainThread();
      v45 = v48;
      v48 = 0;
      if (v45)
        (*(void (**)(WebCore::DataTransfer *))(*(_QWORD *)v45 + 8))(v45);
    }
  }
  return v31;
}

uint64_t WebCore::DragController::operationForLoad(WebCore::DragController *this, const WebCore::DragData *a2, const WebCore::IntPoint *a3)
{
  unsigned int *v4;
  BOOL v5;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  __int16 v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t result;
  unsigned __int8 v23;
  int v24;
  __int16 v25;
  _QWORD *v26;
  _QWORD *v27;

  v4 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)this + 8) + 160);
  if (v4)
    v5 = *((_BYTE *)v4 + 144) == 0;
  else
    v5 = 0;
  if (!v5)
  {
    v23 = 0;
    v24 = 0;
    return v23 | (v24 << 8);
  }
  v7 = v4 + 2;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = WebCore::LocalFrame::documentAtPoint((WebCore::LocalFrame *)v4, a2, a3);
  if (!v9)
  {
    v25 = WebCore::DragController::dragOperation(this, a2);
    v23 = v25;
    v24 = HIBYTE(v25);
    do
    {
LABEL_33:
      v20 = __ldaxr(v7);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v7));
    if (!v21)
    {
      atomic_store(1u, v7);
      v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v26 = off_1E31FE290;
      v26[1] = v7;
      v27 = v26;
      WTF::ensureOnMainThread();
      if (v27)
        (*(void (**)(_QWORD *))(*v27 + 8))(v27);
    }
    return v23 | (v24 << 8);
  }
  v11 = v9;
  v12 = *(_DWORD *)(v9 + 24);
  *(_DWORD *)(v9 + 24) = v12 + 4;
  if ((*(_WORD *)(v9 + 3358) & 8) == 0)
  {
    v13 = v12 + 2;
    if (!v13)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, v10);
      v14 = 0;
      goto LABEL_23;
    }
    v14 = 0;
LABEL_22:
    *(_DWORD *)(v11 + 24) = v13;
LABEL_23:
    if (*((_BYTE *)this + 47) || ((*(_WORD *)(v11 + 3358) & 8) == 0 ? (v18 = 1) : (v18 = v14), v18 != 1))
    {
      v23 = 0;
      v24 = 0;
    }
    else
    {
      v23 = 0;
      v24 = 0;
      if (!WebCore::Node::computeEditability(v11, 0, 1))
      {
        v19 = WebCore::DragController::dragOperation(this, a2);
        v23 = v19;
        v24 = HIBYTE(v19);
      }
    }
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11, v10);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
    goto LABEL_33;
  }
  v15 = *(_QWORD *)(v9 + 3528);
  if (!v15)
    goto LABEL_20;
  v16 = *(_QWORD *)(v15 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v16)
    goto LABEL_20;
  if ((*(_BYTE *)(v16 + 45) & 2) == 0)
  {
    if (*(_BYTE *)(v16 + 46) == 7)
    {
      v17 = *(_DWORD **)(v16 + 232);
      if (v17)
      {
        if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v17 + 88))(v17))
        {
          ++v17[2];
          v14 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v17 + 320))(v17);
          if (v17[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
          else
            --v17[2];
LABEL_21:
          v13 = *(_DWORD *)(v11 + 24) - 2;
          if (*(_DWORD *)(v11 + 24) == 2)
          {
            if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v11, v10);
            goto LABEL_23;
          }
          goto LABEL_22;
        }
      }
    }
LABEL_20:
    v14 = 0;
    goto LABEL_21;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

void WebCore::DragController::dragEnteredOrUpdated(Node **a1@<X2>, uint64_t a2@<X0>, _QWORD *a3@<X1>, uint64_t a4@<X8>)
{
  WebCore::ScrollView *v8;
  unint64_t v9;
  int8x8_t v10;
  int32x2_t v11;
  uint64_t v12;
  _DWORD *v13;
  void *v14;
  void *v15;
  _DWORD **v16;
  uint64_t v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  void *v31;
  const WebCore::IntPoint *v32;
  uint64_t Ref;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  WTF::StringImpl ***v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  char v45;
  unsigned int *v46;
  WTF::StringImpl *v47;
  unsigned int *v48;
  unsigned int v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  WebCore::DragCaretController *v54;
  Node *v55;
  Node *v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  Node *v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned __int8 v66;
  int v67;
  _BOOL4 v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  _DWORD *v72;
  _DWORD *v73;
  WTF::WallTime *v74;
  char v75;
  Node *v76;
  WTF::StringImpl *v77;
  int v78;
  _BOOL8 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  WTF::StringImpl *v84;
  int updated;
  int32x2_t *v86;
  uint64_t v87;
  WTF::StringImpl **v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  BOOL v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  WebCore::ScrollView *v97;
  WebCore::DragCaretController *v98;
  void *v99;
  Node *v100;
  int v101;
  unsigned __int8 v102;
  WebCore::DragCaretController *v103;
  void *v104;
  Node *v105;
  WebCore::Node *v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  const WebCore::IntPoint *v112;
  uint64_t v113;
  WebCore::Node *v114;
  void *v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  WebCore::DragCaretController *v123;
  void *v124;
  Node *v125;
  WebCore::DragCaretController *v126;
  uint64_t v127;
  WebCore::LocalFrame *v128;
  Node *v129;
  uint64_t v130;
  unsigned int *v131;
  unsigned int v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  unsigned int v136;
  int v137;
  unsigned __int8 *v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _DWORD *v145;
  uint64_t v146;
  unsigned int v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  __int16 v151;
  __int16 v152;
  uint64_t v153;
  uint64_t v154;
  WTF *v155;
  void *v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  uint64_t v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  uint64_t v162;
  unsigned __int16 v163;
  uint64_t v164;
  Node *v165;
  uint64_t v166;
  Node *var0;
  unsigned int v168;
  unsigned int v169;
  uint64_t v170;
  Node *v171;
  char v172;
  _QWORD v173[4];
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  __int16 v182;
  uint64_t v183;
  uint64_t v184;
  int32x2_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char v189;
  uint64_t v190;
  __int128 v191;
  VisiblePosition v192;
  char v193;
  __int16 v194;
  __int128 v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  WTF::StringImpl *v200;
  uint64_t v201;
  __int16 v202;
  int32x2_t v203[3];
  int32x2_t *v204;
  uint64_t v205;

  v205 = *MEMORY[0x1E0C80C00];
  v8 = (WebCore::ScrollView *)a3[36];
  if (v8)
  {
    ++*((_DWORD *)v8 + 2);
    v9 = WebCore::ScrollView::windowToContents(v8, (const WebCore::IntPoint *)a1, (const WebCore::IntPoint *)a1);
    if (*((_DWORD *)v8 + 2) == 1)
      (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v8 + 8))(v8);
    else
      --*((_DWORD *)v8 + 2);
  }
  else
  {
    v9 = WebCore::ScrollView::windowToContents(0, (const WebCore::IntPoint *)a1, (const WebCore::IntPoint *)a1);
  }
  v173[2] = 0x4000000040;
  v10 = (int8x8_t)vcgt_s32((int32x2_t)v9, (int32x2_t)0xFE000000FE000000);
  v11 = (int32x2_t)vorr_s8((int8x8_t)(*(_QWORD *)&v10 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)v9), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32((int32x2_t)v9, 6uLL)), v10));
  v173[0] = v11;
  v173[1] = v11.i32[0] & 0xFFFFFFC0 | ((unint64_t)((v11.i32[1] & 0xFFFFFFC0) >> 6) << 38);
  v173[3] = vmul_f32(vcvt_f32_s32(v11), (float32x2_t)vdup_n_s32(0x3C800000u));
  v174 = (float)(int)(v11.i32[0] & 0xFFFFFFC0) * 0.015625;
  v175 = (float)(int)(v11.i32[1] & 0xFFFFFFC0) * 0.015625;
  v176 = v174 + 1.0;
  v177 = v175;
  v178 = v174 + 1.0;
  v179 = v175 + 1.0;
  v180 = v174;
  v181 = v175 + 1.0;
  v182 = 256;
  v183 = 0;
  v184 = 0;
  v190 = 0;
  v185 = v11;
  v186 = 0;
  v187 = 0;
  v188 = 0;
  v189 = 0;
  v12 = a3[37];
  if (!v12 || !*(_QWORD *)(v12 + 1944))
  {
    v16 = (_DWORD **)(a3 + 80);
    v18 = (int *)a3[80];
    v19 = *v18;
    v20 = *v18 + 1;
    *v18 = v20;
    goto LABEL_22;
  }
  v13 = (_DWORD *)a3[80];
  ++*v13;
  v203[0] = v11;
  WebCore::EventHandler::hitTestResultAtPoint((uint64_t)v13, (int *)v203, 0x903u, (uint64_t)&v192);
  WebCore::HitTestResult::operator=((uint64_t)v173, (uint64_t)&v192);
  WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)&v192, v14);
  if (!*v13)
  {
    __break(0xC471u);
    JUMPOUT(0x195F8A090);
  }
  v16 = (_DWORD **)(a3 + 80);
  --*v13;
  v17 = v183;
  v18 = (int *)a3[80];
  v19 = *v18;
  v20 = *v18 + 1;
  *v18 = v20;
  if (!v17)
  {
LABEL_22:
    if (v20)
    {
      v30 = 0;
      *v18 = v19;
      goto LABEL_24;
    }
LABEL_244:
    __break(0xC471u);
    JUMPOUT(0x195F89F7CLL);
  }
  v21 = *(_QWORD *)(v17 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v21)
    goto LABEL_20;
  v22 = (*(unsigned __int8 *)((*(_QWORD *)(v17 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
  if ((*(_BYTE *)((*(_QWORD *)(v17 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
    v22 = 0;
  if (v22 != 1)
    goto LABEL_20;
  v23 = *(_DWORD *)((*(_QWORD *)(v17 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
  *(_DWORD *)((*(_QWORD *)(v17 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v23 + 1;
  v24 = *(_QWORD *)(v21 + 232);
  if (v24)
  {
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v24 + 72))(*(_QWORD *)(v21 + 232)) & 1) == 0
      && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v24 + 80))(v24))
    {
      v121 = *(_DWORD *)(v21 + 16);
      if (v121)
      {
        v25 = 0;
        v23 = v121 - 1;
        goto LABEL_57;
      }
LABEL_278:
      __break(0xC471u);
      JUMPOUT(0x195F8A12CLL);
    }
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 720))(v24);
    v26 = (unsigned int *)(v25 + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 + 1, v26));
    v28 = *(_DWORD *)(v21 + 16);
    if (!v28)
      goto LABEL_278;
    *(_DWORD *)(v21 + 16) = v28 - 1;
    if (*(_BYTE *)(v25 + 144))
      goto LABEL_58;
    do
      v29 = __ldaxr(v26);
    while (__stlxr(v29 - 1, v26));
    if (v29 == 1)
    {
      atomic_store(1u, v26);
      v166 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v166 = off_1E31FE290;
      *(_QWORD *)(v166 + 8) = v26;
      v192.var0.var0.var0 = (Node *)v166;
      WTF::ensureOnMainThread();
      var0 = v192.var0.var0.var0;
      v192.var0.var0.var0 = 0;
      if (var0)
        (*(void (**)(Node *))(*(_QWORD *)var0 + 8))(var0);
    }
LABEL_20:
    v25 = 0;
    goto LABEL_58;
  }
  if (v23 == -1)
    goto LABEL_278;
  v25 = 0;
LABEL_57:
  *(_DWORD *)(v21 + 16) = v23;
LABEL_58:
  if (!*v18)
    goto LABEL_244;
  --*v18;
  if (!v25)
  {
    if (v183)
    {
      v30 = *(_QWORD *)(*(_QWORD *)(v183 + 40) + 8);
      *(_DWORD *)(v30 + 24) += 2;
    }
    else
    {
      v30 = 0;
    }
LABEL_24:
    v192.var0.var0.var0 = (Node *)v30;
    WebCore::DragController::mouseMovedIntoDocument((unsigned int *)a2, (uint64_t *)&v192);
    Ref = (uint64_t)v192.var0.var0.var0;
    if (v192.var0.var0.var0)
    {
      if (*((_DWORD *)v192.var0.var0.var0 + 6) == 2)
      {
        if ((*((_WORD *)v192.var0.var0.var0 + 15) & 0x400) == 0)
          Ref = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v192.var0.var0.var0, v31);
      }
      else
      {
        *((_DWORD *)v192.var0.var0.var0 + 6) -= 2;
      }
    }
    v34 = *((unsigned __int8 *)a1 + 48);
    *(_BYTE *)(a2 + 45) = v34;
    if (!v34)
    {
      v54 = *(WebCore::DragCaretController **)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 56);
      *(_QWORD *)&v192.var0.var1 = 0;
      v192.var0.var0.var0 = 0;
      *(_QWORD *)&v192.var1 = 1;
      WebCore::DragCaretController::setCaretPosition(v54, &v192);
      v55 = v192.var0.var0.var0;
      v192.var0.var0.var0 = 0;
      if (v55)
      {
        if (*((_DWORD *)v55 + 6) == 2)
        {
          if ((*((_WORD *)v55 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v55, v15);
        }
        else
        {
          *((_DWORD *)v55 + 6) -= 2;
        }
      }
      *(_WORD *)(a4 + 8) = 0;
      goto LABEL_314;
    }
    v35 = *(_QWORD *)(a2 + 16);
    if (!v35)
      goto LABEL_306;
    v36 = *(_QWORD *)(v35 + 528);
    if (v36)
    {
      v37 = *(_QWORD *)(v36 + 8);
      if (v37)
      {
        v38 = (unsigned int *)(v37 + 8);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 + 1, v38));
        Ref = WebCore::EventHandler::canDropCurrentlyDraggedImageAsFile(*(WebCore::EventHandler **)(v37 + 640), (WTF::StringImpl *)v31);
        if ((Ref & 1) == 0)
        {
          v40 = (WTF::StringImpl ***)(a1 + 4);
          v41 = *((unsigned int *)a1 + 11);
          if ((_DWORD)v41)
          {
            v88 = *v40;
            v89 = 8 * v41;
            do
            {
              v90 = *v88;
              *v88 = 0;
              if (v90)
              {
                if (*(_DWORD *)v90 == 2)
                  WTF::StringImpl::destroy(v90, (WTF::StringImpl *)v31);
                else
                  *(_DWORD *)v90 -= 2;
              }
              ++v88;
              v89 -= 8;
            }
            while (v89);
          }
          Ref = (uint64_t)*v40;
          if (*v40)
          {
            a1[4] = 0;
            *((_DWORD *)a1 + 10) = 0;
            Ref = WTF::fastFree((WTF *)Ref, v31);
          }
          *v40 = 0;
          a1[5] = 0;
          *((_BYTE *)a1 + 80) = 1;
        }
        do
        {
          v42 = __ldaxr(v38);
          v43 = v42 - 1;
        }
        while (__stlxr(v43, v38));
        if (!v43)
        {
          atomic_store(1u, v38);
          v154 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v154 = off_1E31FE290;
          *(_QWORD *)(v154 + 8) = v38;
          v192.var0.var0.var0 = (Node *)v154;
          WTF::ensureOnMainThread();
          Ref = (uint64_t)v192.var0.var0.var0;
          v192.var0.var0.var0 = 0;
          if (Ref)
            Ref = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Ref + 8))(Ref);
        }
      }
    }
    v44 = *(_QWORD *)(a2 + 16);
    if (!v44)
      goto LABEL_306;
    v45 = *(_BYTE *)(a2 + 45);
    if (!*(_QWORD *)(a2 + 24))
      goto LABEL_75;
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v44 + 192), (WTF::StringImpl *)v31);
    v48 = v46;
    if (v46)
    {
      do
        v49 = __ldaxr(v46);
      while (__stlxr(v49 + 1, v46));
    }
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(a2 + 24) + 192), v47);
    v51 = Ref;
    if (Ref)
    {
      do
        v52 = __ldaxr((unsigned int *)Ref);
      while (__stlxr(v52 + 1, (unsigned int *)Ref));
    }
    if (v48 == (unsigned int *)Ref || *(_BYTE *)(Ref + 63) && *((_BYTE *)v48 + 63))
    {
      v53 = 1;
    }
    else
    {
      Ref = WebCore::SecurityOrigin::isSameOriginDomain((WebCore::SecurityOrigin *)v48, (const WebCore::SecurityOrigin *)Ref);
      v53 = Ref;
    }
    do
    {
      v62 = __ldaxr((unsigned int *)v51);
      v63 = v62 - 1;
    }
    while (__stlxr(v63, (unsigned int *)v51));
    if (v63)
    {
      if (!v48)
        goto LABEL_74;
    }
    else
    {
      atomic_store(1u, (unsigned int *)v51);
      v157 = *(WTF::StringImpl **)(v51 + 48);
      *(_QWORD *)(v51 + 48) = 0;
      if (v157)
      {
        if (*(_DWORD *)v157 == 2)
          WTF::StringImpl::destroy(v157, v50);
        else
          *(_DWORD *)v157 -= 2;
      }
      v158 = *(WTF::StringImpl **)(v51 + 40);
      *(_QWORD *)(v51 + 40) = 0;
      if (v158)
      {
        if (*(_DWORD *)v158 == 2)
          WTF::StringImpl::destroy(v158, v50);
        else
          *(_DWORD *)v158 -= 2;
      }
      v159 = *(unsigned int *)(v51 + 32);
      if ((_DWORD)v159 != -1)
        ((void (*)(VisiblePosition *, uint64_t))off_1E33FE860[v159])(&v192, v51 + 8);
      *(_DWORD *)(v51 + 32) = -1;
      Ref = WTF::fastFree((WTF *)v51, v50);
      if (!v48)
        goto LABEL_74;
    }
    do
    {
      v64 = __ldaxr(v48);
      v65 = v64 - 1;
    }
    while (__stlxr(v65, v48));
    if (!v65)
    {
      atomic_store(1u, v48);
      v160 = (WTF::StringImpl *)*((_QWORD *)v48 + 6);
      *((_QWORD *)v48 + 6) = 0;
      if (v160)
      {
        if (*(_DWORD *)v160 == 2)
          WTF::StringImpl::destroy(v160, v50);
        else
          *(_DWORD *)v160 -= 2;
      }
      v161 = (WTF::StringImpl *)*((_QWORD *)v48 + 5);
      *((_QWORD *)v48 + 5) = 0;
      if (v161)
      {
        if (*(_DWORD *)v161 == 2)
          WTF::StringImpl::destroy(v161, v50);
        else
          *(_DWORD *)v161 -= 2;
      }
      v162 = v48[8];
      if ((_DWORD)v162 != -1)
        ((void (*)(VisiblePosition *, unsigned int *))off_1E33FE860[v162])(&v192, v48 + 2);
      v48[8] = -1;
      Ref = WTF::fastFree((WTF *)v48, v50);
      if ((v53 & 1) != 0)
      {
LABEL_75:
        if ((v45 & 1) == 0)
        {
          v66 = 0;
          LOBYTE(v67) = 0;
          v68 = 0;
          v69 = *(_QWORD *)(a2 + 16);
LABEL_131:
          v95 = *(_QWORD *)(v69 + 528);
          if (v95)
          {
            v96 = *(_QWORD *)(v95 + 8);
            if (v96)
            {
              v97 = *(WebCore::ScrollView **)(v96 + 288);
              if (v97)
              {
                ++*((_DWORD *)v97 + 2);
                if (v68)
                {
                  v98 = *(WebCore::DragCaretController **)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 56);
                  *(_QWORD *)&v192.var0.var1 = 0;
                  v192.var0.var0.var0 = 0;
                  *(_QWORD *)&v192.var1 = 1;
                  WebCore::DragCaretController::setCaretPosition(v98, &v192);
                  v100 = v192.var0.var0.var0;
                  v192.var0.var0.var0 = 0;
                  if (v100)
                  {
                    if (*((_DWORD *)v100 + 6) == 2)
                    {
                      if ((*((_WORD *)v100 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v100, v99);
                    }
                    else
                    {
                      *((_DWORD *)v100 + 6) -= 2;
                    }
                  }
                  if (*((_BYTE *)a1 + 80))
                  {
                    v101 = 0;
                  }
                  else
                  {
                    v192.var0.var0.var0 = a1[7];
                    LOBYTE(v192.var0.var1) = *((_BYTE *)a1 + 64);
                    v109 = WTF::fastMalloc((WTF *)0x18);
                    *(_QWORD *)v109 = off_1E327FAB0;
                    *(Position *)(v109 + 8) = v192.var0;
                    v110 = WebCore::s_platformStrategies;
                    v111 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
                    if (!v111)
                    {
                      v111 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
                      *(_QWORD *)(v110 + 16) = v111;
                    }
                    v101 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v111 + 104))(v111, (char *)a1 + 72, v109);
                    (*(void (**)(uint64_t))(*(_QWORD *)v109 + 8))(v109);
                  }
                  *(_DWORD *)(a2 + 40) = v101;
                  v102 = 6;
                  goto LABEL_220;
                }
                if ((v45 & 2) != 0
                  && WebCore::DragController::canProcessDrag((WebCore::DragController *)a2, (const WebCore::DragData *)a1, v32))
                {
                  if ((WebCore::DragData::containsColor((WTF::StringImpl **)a1) & 1) != 0)
                  {
                    v102 = 5;
                    LOBYTE(v67) = 4;
                    v66 = 1;
LABEL_220:
                    if (*((_DWORD *)v97 + 2) == 1)
                      (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v97 + 8))(v97);
                    else
                      --*((_DWORD *)v97 + 2);
                    *(_BYTE *)(a2 + 44) = v102;
                    v139 = (unsigned __int8 *)(a2 + 44);
                    if (v102 == 5)
                    {
                      v102 = 5;
                      v66 = 1;
                      LOBYTE(v67) = 1;
LABEL_313:
                      WebCore::DragController::updateSupportedTypeIdentifiersForDragHandlingMethod((WebCore::Pasteboard *)a2, v102, (uint64_t)a1);
                      *(_WORD *)(a4 + 8) = v67 | (v66 << 8);
LABEL_314:
                      *(_DWORD *)(a4 + 32) = 0;
                      goto LABEL_315;
                    }
                    if (v102)
                      goto LABEL_313;
LABEL_308:
                    if ((*(_BYTE *)(a2 + 45) & 4) != 0)
                    {
                      v163 = WebCore::DragController::operationForLoad((WebCore::DragController *)a2, (const WebCore::DragData *)a1, v32);
                      LOBYTE(v67) = v163;
                      v66 = HIBYTE(v163);
                      if (v163 > 0xFFu)
                      {
                        v102 = 4;
                        *v139 = 4;
                      }
                      else
                      {
                        v102 = *v139;
                      }
                    }
                    else
                    {
                      v102 = 0;
                    }
                    goto LABEL_313;
                  }
                  v203[0] = (int32x2_t)WebCore::ScrollView::windowToContents(v97, (const WebCore::IntPoint *)a1, v32);
                  v113 = *(_QWORD *)(a2 + 16);
                  if (v113)
                    *(_DWORD *)(v113 + 24) += 2;
                  v114 = WebCore::elementUnderMouse((WebCore *)v113, (WebCore::Document *)v203, v112);
                  v106 = v114;
                  if (v114)
                    *((_DWORD *)v114 + 6) += 2;
                  if (*(_DWORD *)(v113 + 24) == 2)
                  {
                    if ((*(_WORD *)(v113 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v113, v115);
                  }
                  else
                  {
                    *(_DWORD *)(v113 + 24) -= 2;
                  }
                  if (v106)
                  {
                    WebCore::asFileInput((unsigned int *)&v191, v106);
                    v117 = *(_QWORD *)(a2 + 32);
                    v118 = v191;
                    if (v117 == (_QWORD)v191)
                    {
                      v118 = *(_QWORD *)(a2 + 32);
                    }
                    else
                    {
                      if (v117)
                      {
                        if ((*(_WORD *)(v117 + 232) & 0x200) != 0)
                        {
                          *(_WORD *)(v117 + 232) &= ~0x200u;
                          v119 = *(_QWORD *)(v117 + 64) & 0xFFFFFFFFFFFFLL;
                          if (v119)
                          {
                            if ((*(_BYTE *)((*(_QWORD *)(v117 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x195F8A540);
                            }
                            (*(void (**)(uint64_t))(*(_QWORD *)v119 + 312))(v119);
                          }
                        }
                      }
                      if (v118)
                        *(_DWORD *)(v118 + 24) += 2;
                      v120 = *(_QWORD *)(a2 + 32);
                      *(_QWORD *)(a2 + 32) = v118;
                      if (v120)
                      {
                        if (*(_DWORD *)(v120 + 24) == 2)
                        {
                          if ((*(_WORD *)(v120 + 30) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)v120, v116);
                        }
                        else
                        {
                          *(_DWORD *)(v120 + 24) -= 2;
                        }
                        v118 = *(_QWORD *)(a2 + 32);
                      }
                    }
                    v122 = *(_QWORD *)(*(_QWORD *)a2 + 8);
                    if (v118)
                    {
                      v123 = *(WebCore::DragCaretController **)(v122 + 56);
                      *(_QWORD *)&v192.var0.var1 = 0;
                      v192.var0.var0.var0 = 0;
                      *(_QWORD *)&v192.var1 = 1;
                      WebCore::DragCaretController::setCaretPosition(v123, &v192);
                      v125 = v192.var0.var0.var0;
                      v192.var0.var0.var0 = 0;
                      if (v125)
                      {
                        if (*((_DWORD *)v125 + 6) == 2)
                        {
                          if ((*((_WORD *)v125 + 15) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)v125, v124);
                        }
                        else
                        {
                          *((_DWORD *)v125 + 6) -= 2;
                        }
                      }
                    }
                    else
                    {
                      ++*(_DWORD *)v122;
                      v126 = *(WebCore::DragCaretController **)(v122 + 56);
                      v127 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 528);
                      if (v127)
                        v128 = *(WebCore::LocalFrame **)(v127 + 8);
                      else
                        v128 = 0;
                      WebCore::LocalFrame::visiblePositionForPoint(v128, v203, (int8x8_t *)&v192);
                      WebCore::DragCaretController::setCaretPosition(v126, &v192);
                      v129 = v192.var0.var0.var0;
                      v192.var0.var0.var0 = 0;
                      if (v129)
                      {
                        if (*((_DWORD *)v129 + 6) == 2)
                        {
                          if ((*((_WORD *)v129 + 15) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)v129, v124);
                        }
                        else
                        {
                          *((_DWORD *)v129 + 6) -= 2;
                        }
                      }
                      if (*(_DWORD *)v122 == 1)
                      {
                        WebCore::Page::~Page(v122);
                        WTF::fastFree(v155, v156);
                      }
                      else
                      {
                        --*(_DWORD *)v122;
                      }
                    }
                    v130 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v106 + 5) + 8) + 528) + 8);
                    v131 = (unsigned int *)(v130 + 8);
                    do
                      v132 = __ldaxr(v131);
                    while (__stlxr(v132 + 1, v131));
                    v133 = *(_QWORD *)(*(_QWORD *)(v130 + 296) + 3064);
                    v134 = *(_DWORD *)(v133 + 28) + 1;
                    *(_DWORD *)(v133 + 28) = v134;
                    if (*(_QWORD *)(a2 + 16) != *(_QWORD *)(a2 + 24))
                    {
                      LOBYTE(v67) = 1;
                      goto LABEL_231;
                    }
                    v135 = *(_QWORD *)(v133 + 120);
                    if (!v135)
                      goto LABEL_214;
                    v136 = *(_BYTE *)(v133 + 132) & 7;
                    LOBYTE(v67) = 1;
                    if (v136 > 4)
                      goto LABEL_230;
                    if (((1 << v136) & 0x19) == 0)
                    {
                      v135 = *(_QWORD *)(v135 + 32);
                      if (!v135)
                        goto LABEL_230;
                    }
                    *(_DWORD *)(v135 + 24) += 2;
                    v137 = WebCore::Node::computeEditability(v135, 0, 0);
                    if (*(_DWORD *)(v135 + 24) == 2)
                    {
                      if ((*(_WORD *)(v135 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v135, v124);
                    }
                    else
                    {
                      *(_DWORD *)(v135 + 24) -= 2;
                    }
                    if (v137 && *(_BYTE *)(v133 + 153) == 2)
                    {
                      if ((*((_BYTE *)a1 + 25) & 8) != 0)
                        LOBYTE(v67) = 1;
                      else
                        LOBYTE(v67) = 16;
                    }
                    else
                    {
LABEL_214:
                      LOBYTE(v67) = 1;
                    }
LABEL_230:
                    v134 = *(_DWORD *)(v133 + 28);
LABEL_231:
                    if (!v134)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195F8A438);
                    }
                    *(_DWORD *)(v133 + 28) = v134 - 1;
                    if (*((_BYTE *)a1 + 80))
                    {
                      v140 = 0;
                    }
                    else
                    {
                      v192.var0.var0.var0 = a1[7];
                      LOBYTE(v192.var0.var1) = *((_BYTE *)a1 + 64);
                      v141 = WTF::fastMalloc((WTF *)0x18);
                      *(_QWORD *)v141 = off_1E327FAB0;
                      *(Position *)(v141 + 8) = v192.var0;
                      v142 = WebCore::s_platformStrategies;
                      v143 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
                      if (!v143)
                      {
                        v143 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
                        *(_QWORD *)(v142 + 16) = v143;
                      }
                      v140 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v143 + 104))(v143, (char *)a1 + 72, v141);
                      (*(void (**)(uint64_t))(*(_QWORD *)v141 + 8))(v141);
                    }
                    v144 = *(_QWORD *)(a2 + 32);
                    if (!v144)
                    {
                      *(_DWORD *)(a2 + 40) = v140;
                      v66 = 1;
                      goto LABEL_332;
                    }
                    *(_DWORD *)(v144 + 24) += 2;
                    if ((*(_BYTE *)(v144 + 160) & 0x18) != 0)
                    {
                      v145 = (_DWORD *)(a2 + 40);
LABEL_256:
                      *v145 = 0;
LABEL_257:
                      v151 = *(_WORD *)(v144 + 232);
                      if ((v151 & 0x200) == 0)
                      {
                        v66 = 0;
                        goto LABEL_263;
                      }
                      v66 = 0;
                      v152 = 0;
                      goto LABEL_260;
                    }
                    v146 = *(_QWORD *)(v144 + 104);
                    if (v146
                      && ((v147 = *(_DWORD *)(v146 + 4), (v147 & 1) != 0)
                        ? (v148 = *(uint64_t **)(v146 + 40), LODWORD(v149) = *(_DWORD *)(v146 + 52))
                        : (v148 = (uint64_t *)(v146 + 32), LODWORD(v149) = v147 >> 5),
                          (_DWORD)v149))
                    {
                      v149 = v149;
                      while (1)
                      {
                        v150 = *v148;
                        if (*v148 == WebCore::HTMLNames::multipleAttr
                          || *(_QWORD *)(v150 + 24) == *(_QWORD *)(WebCore::HTMLNames::multipleAttr + 24)
                          && *(_QWORD *)(v150 + 32) == *(_QWORD *)(WebCore::HTMLNames::multipleAttr + 32))
                        {
                          break;
                        }
                        v148 += 2;
                        if (!--v149)
                          goto LABEL_255;
                      }
                      *(_DWORD *)(a2 + 40) = v140;
                      if (!v140)
                        goto LABEL_257;
                    }
                    else
                    {
LABEL_255:
                      v145 = (_DWORD *)(a2 + 40);
                      if (v140 > 1)
                        goto LABEL_256;
                      *v145 = 1;
                    }
                    v151 = *(_WORD *)(v144 + 232);
                    v66 = 1;
                    if ((v151 & 0x200) != 0)
                      goto LABEL_263;
                    v152 = 512;
LABEL_260:
                    *(_WORD *)(v144 + 232) = v151 & 0xFDFF | v152;
                    v153 = *(_QWORD *)(v144 + 64) & 0xFFFFFFFFFFFFLL;
                    if (v153)
                    {
                      if ((*(_BYTE *)((*(_QWORD *)(v144 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x195F8A520);
                      }
                      (*(void (**)(uint64_t))(*(_QWORD *)v153 + 312))(v153);
                    }
LABEL_263:
                    if (*(_DWORD *)(v144 + 24) == 2)
                    {
                      if ((*(_WORD *)(v144 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v144, v124);
                    }
                    else
                    {
                      *(_DWORD *)(v144 + 24) -= 2;
                    }
                    if (*(_QWORD *)(a2 + 32))
                    {
                      v102 = 3;
                      do
                      {
LABEL_335:
                        v168 = __ldaxr(v131);
                        v169 = v168 - 1;
                      }
                      while (__stlxr(v169, v131));
                      if (!v169)
                      {
                        atomic_store(1u, v131);
                        v170 = WTF::fastMalloc((WTF *)0x10);
                        *(_QWORD *)v170 = off_1E31FE290;
                        *(_QWORD *)(v170 + 8) = v131;
                        v192.var0.var0.var0 = (Node *)v170;
                        WTF::ensureOnMainThread();
                        v171 = v192.var0.var0.var0;
                        v192.var0.var0.var0 = 0;
                        if (v171)
                          (*(void (**)(Node *))(*(_QWORD *)v171 + 8))(v171);
                      }
                      if ((_QWORD)v191)
                      {
                        if (*(_DWORD *)(v191 + 24) == 2)
                        {
                          if ((*(_WORD *)(v191 + 30) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)v191, v124);
                        }
                        else
                        {
                          *(_DWORD *)(v191 + 24) -= 2;
                        }
                      }
                      v108 = *((_DWORD *)v106 + 6) - 2;
                      if (*((_DWORD *)v106 + 6) == 2)
                      {
                        if ((*((_WORD *)v106 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef(v106, v124);
                        goto LABEL_220;
                      }
                      goto LABEL_154;
                    }
LABEL_332:
                    if (WebCore::DragCaretController::isContentRichlyEditable(*(WebCore::DragCaretController **)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 56), (const WebCore::Position *)v124))
                    {
                      v102 = 2;
                    }
                    else
                    {
                      v102 = 1;
                    }
                    goto LABEL_335;
                  }
                }
                else
                {
                  v103 = *(WebCore::DragCaretController **)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 56);
                  *(_QWORD *)&v192.var0.var1 = 0;
                  v192.var0.var0.var0 = 0;
                  *(_QWORD *)&v192.var1 = 1;
                  WebCore::DragCaretController::setCaretPosition(v103, &v192);
                  v105 = v192.var0.var0.var0;
                  v192.var0.var0.var0 = 0;
                  if (v105)
                  {
                    if (*((_DWORD *)v105 + 6) == 2)
                    {
                      if ((*((_WORD *)v105 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v105, v104);
                    }
                    else
                    {
                      *((_DWORD *)v105 + 6) -= 2;
                    }
                  }
                  v106 = *(WebCore::Node **)(a2 + 32);
                  *(_QWORD *)(a2 + 32) = 0;
                  if (v106)
                  {
                    if ((*((_WORD *)v106 + 116) & 0x200) != 0)
                    {
                      *((_WORD *)v106 + 116) &= ~0x200u;
                      v107 = *((_QWORD *)v106 + 8) & 0xFFFFFFFFFFFFLL;
                      if (v107)
                      {
                        if ((*(_BYTE *)((*((_QWORD *)v106 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x195F8A3F0);
                        }
                        (*(void (**)(uint64_t))(*(_QWORD *)v107 + 312))(v107);
                      }
                    }
                    v108 = *((_DWORD *)v106 + 6) - 2;
                    if (*((_DWORD *)v106 + 6) != 2)
                    {
                      v102 = 0;
LABEL_154:
                      *((_DWORD *)v106 + 6) = v108;
                      goto LABEL_220;
                    }
                    if ((*((_WORD *)v106 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v106, v104);
                  }
                }
                v102 = 0;
                goto LABEL_220;
              }
            }
          }
LABEL_307:
          *(_BYTE *)(a2 + 44) = 0;
          v139 = (unsigned __int8 *)(a2 + 44);
          goto LABEL_308;
        }
        v172 = v45;
        v70 = (unsigned int *)(a3 + 1);
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 + 1, v70));
        v72 = (_DWORD *)a3[36];
        if (!v72)
        {
          v66 = 0;
          LOBYTE(v67) = 0;
          v68 = 0;
          do
          {
LABEL_128:
            v93 = __ldaxr(v70);
            v94 = v93 - 1;
          }
          while (__stlxr(v94, v70));
          if (!v94)
          {
            atomic_store(1u, v70);
            v164 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v164 = off_1E31FE290;
            *(_QWORD *)(v164 + 8) = v70;
            v192.var0.var0.var0 = (Node *)v164;
            WTF::ensureOnMainThread();
            v165 = v192.var0.var0.var0;
            v192.var0.var0.var0 = 0;
            if (v165)
              (*(void (**)(Node *))(*(_QWORD *)v165 + 8))(v165);
          }
          v69 = *(_QWORD *)(a2 + 16);
          v45 = v172;
          if (!v69)
            goto LABEL_307;
          goto LABEL_131;
        }
        ++v72[2];
        v67 = *((unsigned __int8 *)a1 + 24);
        v73 = *v16;
        ++**v16;
        v74 = (WTF::WallTime *)WebCore::PlatformKeyboardEvent::currentStateOfModifierKeys((WebCore::PlatformKeyboardEvent *)Ref);
        v75 = (char)v74;
        WTF::WallTime::now(v74);
        v192.var0.var0.var0 = v76;
        LOBYTE(v192.var0.var1) = 5;
        BYTE1(v192.var0.var1) = v75;
        v192.var1 = 0;
        v193 = 0;
        v194 = 0;
        v195 = *(_OWORD *)a1;
        v197 = 0;
        v196 = 0;
        v198 = 0x3FF0000000000000;
        v199 = 1;
        {
          v77 = (WTF::StringImpl *)WebCore::mousePointerEventType(void)::mouseType;
          if (!WebCore::mousePointerEventType(void)::mouseType)
          {
LABEL_84:
            v79 = 0;
            v200 = v77;
            v201 = 0;
            v202 = 0;
            v203[0] = (int32x2_t)&off_1E33FE8E8;
            v203[1] = (int32x2_t)a1;
            v204 = v203;
            if (!*((_BYTE *)a1 + 80))
            {
              *(_QWORD *)&v191 = a1[7];
              BYTE8(v191) = *((_BYTE *)a1 + 64);
              v80 = WTF::fastMalloc((WTF *)0x18);
              *(_QWORD *)v80 = off_1E327FAB0;
              *(_OWORD *)(v80 + 8) = v191;
              v81 = WebCore::s_platformStrategies;
              v82 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
              if (!v82)
              {
                v82 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
                *(_QWORD *)(v81 + 16) = v82;
              }
              v83 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v82 + 104))(v82, (char *)a1 + 72, v80);
              (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
              v79 = v83 != 0;
            }
            updated = WebCore::EventHandler::updateDragAndDrop((uint64_t)v73, (uint64_t)&v192, (uint64_t)v203, v67, v79);
            v86 = v204;
            if (v204 == v203)
            {
              v87 = 4;
              v86 = v203;
            }
            else
            {
              if (!v204)
                goto LABEL_102;
              v87 = 5;
            }
            (*(void (**)(void))(*(_QWORD *)v86 + 8 * v87))();
LABEL_102:
            v91 = v200;
            v200 = 0;
            if (v91)
            {
              if (*(_DWORD *)v91 == 2)
                WTF::StringImpl::destroy(v91, v84);
              else
                *(_DWORD *)v91 -= 2;
            }
            if (!*v73)
            {
              __break(0xC471u);
              JUMPOUT(0x195F8A340);
            }
            --*v73;
            v68 = updated != 0;
            if ((_BYTE)updated)
            {
              if ((updated & 0xFF0000) == 0)
              {
                if ((~v67 & 0x3F) == 0)
                  goto LABEL_115;
                if (!v67)
                {
                  v66 = 0;
LABEL_126:
                  if (v72[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v72 + 8))(v72);
                  else
                    --v72[2];
                  goto LABEL_128;
                }
                if ((v67 & 0x10) == 0)
                {
                  if ((v67 & 5) == 0)
                  {
                    v92 = (v67 & 2) == 0;
                    goto LABEL_122;
                  }
                  goto LABEL_115;
                }
                goto LABEL_179;
              }
              if ((v67 & BYTE1(updated)) != 0)
              {
                if ((~BYTE1(updated) & 0x3F) == 0)
                  goto LABEL_115;
                if (BYTE1(updated))
                {
                  if ((updated & 0x1000) == 0)
                  {
                    if ((updated & 0x500) == 0)
                    {
                      v92 = (updated & 0x200) == 0;
LABEL_122:
                      if (v92)
                        LOBYTE(v67) = 4;
                      else
                        LOBYTE(v67) = 2;
                      goto LABEL_180;
                    }
LABEL_115:
                    v66 = 1;
                    LOBYTE(v67) = 1;
                    goto LABEL_126;
                  }
LABEL_179:
                  LOBYTE(v67) = 16;
LABEL_180:
                  v66 = 1;
                  goto LABEL_126;
                }
              }
            }
            v66 = 0;
            LOBYTE(v67) = 0;
            goto LABEL_126;
          }
          v78 = *(_DWORD *)WebCore::mousePointerEventType(void)::mouseType;
        }
        else
        {
          v77 = (WTF::StringImpl *)&WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
          v78 = WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl + 2;
          WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl += 2;
          WebCore::mousePointerEventType(void)::mouseType = (uint64_t)&WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
        }
        *(_DWORD *)v77 = v78 + 2;
        goto LABEL_84;
      }
LABEL_306:
      v66 = 0;
      LOBYTE(v67) = 0;
      goto LABEL_307;
    }
LABEL_74:
    if (v53)
      goto LABEL_75;
    goto LABEL_306;
  }
  v56 = *a1;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)(v25 + 32);
  *(_QWORD *)(a4 + 24) = v56;
  *(_DWORD *)(a4 + 32) = 1;
  v57 = (unsigned int *)(v25 + 8);
  do
  {
    v58 = __ldaxr(v57);
    v59 = v58 - 1;
  }
  while (__stlxr(v59, v57));
  if (!v59)
  {
    atomic_store(1u, v57);
    v60 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v60 = off_1E31FE290;
    *(_QWORD *)(v60 + 8) = v57;
    v192.var0.var0.var0 = (Node *)v60;
    WTF::ensureOnMainThread();
    v61 = v192.var0.var0.var0;
    v192.var0.var0.var0 = 0;
    if (v61)
      (*(void (**)(Node *))(*(_QWORD *)v61 + 8))(v61);
  }
LABEL_315:
  WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v173, v15);
}

void sub_195F8A570(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::EventHandler::hitTestResultAtPoint@<X0>(uint64_t result@<X0>, int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  float v16;
  float v17;
  float v18;
  uint64_t *v19;
  uint64_t v20;
  const WebCore::Node *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD *v25;
  unsigned int *v27;
  unsigned int v28;
  WebCore::ScrollView *v29;
  int v30;
  WebCore::ScrollView *v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  int8x8_t v35;
  uint64_t v36;
  unint64_t v37;
  _DWORD *v38;
  int v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;

  v7 = *(_QWORD **)(*(_QWORD *)(result + 8) + 8);
  v8 = (unsigned int *)(v7 + 1);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = *(_QWORD *)(v7[16] + 8);
  if ((_QWORD *)v10 != v7 && v10 && *(_BYTE *)(v10 + 144) == 0)
  {
    v27 = (unsigned int *)(v10 + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 + 1, v27));
    v40 = v7;
    v29 = (WebCore::ScrollView *)v7[36];
    if (v29)
    {
      v30 = *((_DWORD *)v29 + 2);
      *((_DWORD *)v29 + 2) = v30 + 1;
      v31 = *(WebCore::ScrollView **)(v10 + 288);
      if (v31)
      {
        ++*((_DWORD *)v31 + 2);
        v32 = *a2 + 63;
        if (*a2 >= 0)
          v32 = *a2;
        v41 = (((int)(*a2 - (v32 & 0xFFFFFFC0) + 32) >> 6) + (v32 >> 6)) | ((unint64_t)(((int)(a2[1] - (v32 & 0xFFFFFFC0) + 32) >> 6) + a2[1] / 64) << 32);
        v42 = WebCore::ScrollView::contentsToRootView(v29, (const WebCore::IntPoint *)&v41);
        v33 = WebCore::ScrollView::rootViewToContents(v31, (const WebCore::IntPoint *)&v42);
        v34 = *(_QWORD *)(v10 + 640);
        v35 = (int8x8_t)vcgt_s32((int32x2_t)v33, (int32x2_t)0xFE000000FE000000);
        v42 = (uint64_t)vorr_s8((int8x8_t)(*(_QWORD *)&v35 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)v33), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32((int32x2_t)v33, 6uLL)), v35));
        WebCore::EventHandler::hitTestResultAtPoint(v34, &v42, a3);
        if (*((_DWORD *)v31 + 2) == 1)
          (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v31 + 8))(v31);
        else
          --*((_DWORD *)v31 + 2);
        if (*((_DWORD *)v29 + 2) == 1)
          (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v29 + 8))(v29);
        else
          --*((_DWORD *)v29 + 2);
        result = (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v10 + 8));
        goto LABEL_18;
      }
      if (v30)
        *((_DWORD *)v29 + 2) = v30;
      else
        (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v29 + 8))(v29);
    }
    else
    {
      v38 = *(_DWORD **)(v10 + 288);
      if (v38)
      {
        v39 = v38[2];
        v38[2] = v39 + 1;
        if (v39)
          v38[2] = v39;
        else
          (*(void (**)(_DWORD *))(*(_QWORD *)v38 + 8))(v38);
      }
    }
    result = (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v10 + 8));
    v7 = v40;
  }
  v11 = (_DWORD *)v7[36];
  if (v11)
  {
    ++v11[2];
    result = WebCore::LocalFrameView::updateLayoutAndStyleIfNeededRecursive(v11, 0);
    if (v11[2] == 1)
      result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
    else
      --v11[2];
  }
  v12 = *(_QWORD *)a2;
  v13 = HIDWORD(*(_QWORD *)a2);
  v14 = *(_QWORD *)a2 & 0xFFFFFFC0;
  v15 = *(_QWORD *)a2 & 0xFFFFFFC0FFFFFFC0;
  *(_QWORD *)a4 = *(_QWORD *)a2;
  *(_QWORD *)(a4 + 8) = v15;
  *(_QWORD *)(a4 + 16) = 0x4000000040;
  *(float *)(a4 + 24) = (float)(int)v12 * 0.015625;
  *(float *)(a4 + 28) = (float)(int)v13 * 0.015625;
  v16 = (float)(int)v14 * 0.015625;
  v17 = (float)(v13 & 0xFFFFFFC0) * 0.015625;
  *(float *)(a4 + 32) = v16;
  *(float *)(a4 + 36) = v17;
  *(float *)(a4 + 40) = v16 + 1.0;
  *(float *)(a4 + 44) = v17;
  v18 = v17 + 1.0;
  *(float *)(a4 + 48) = v16 + 1.0;
  *(float *)(a4 + 52) = v18;
  *(float *)(a4 + 56) = v16;
  *(float *)(a4 + 60) = v18;
  *(_WORD *)(a4 + 64) = 256;
  *(_QWORD *)(a4 + 72) = 0;
  v19 = (uint64_t *)(a4 + 72);
  *(_QWORD *)(a4 + 80) = 0;
  *(_QWORD *)(a4 + 88) = v12;
  *(_QWORD *)(a4 + 128) = 0;
  *(_QWORD *)(a4 + 104) = 0;
  *(_QWORD *)(a4 + 112) = 0;
  *(_QWORD *)(a4 + 96) = 0;
  *(_BYTE *)(a4 + 120) = 0;
  v20 = v7[37];
  if (v20)
  {
    *(_DWORD *)(v20 + 24) += 2;
    LODWORD(v42) = a3;
    BYTE4(v42) = 1;
    result = WebCore::Document::hitTest(v20, &v42, (WebCore::HitTestingTransformState *)a4, a4);
    if ((v42 & 1) == 0)
    {
      v36 = v7[37];
      if (v36)
        *(_DWORD *)(v36 + 24) += 2;
      WebCore::HitTestResult::protectedTargetElement((_QWORD *)a4, &v41);
      v37 = v41;
      result = (uint64_t)WebCore::Document::updateHoverActiveState((unsigned __int8 *)v36, (unsigned __int8 *)&v42, v41, 0);
      if (v37)
      {
        if (*(_DWORD *)(v37 + 24) == 2)
        {
          if ((*(_WORD *)(v37 + 30) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)v37);
        }
        else
        {
          *(_DWORD *)(v37 + 24) -= 2;
        }
      }
      if (v36)
      {
        if (*(_DWORD *)(v36 + 24) == 2)
        {
          if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)v36);
        }
        else
        {
          *(_DWORD *)(v36 + 24) -= 2;
        }
      }
    }
    v22 = *v19;
    if (*v19)
      *(_DWORD *)(v22 + 24) += 2;
    if ((v42 & 0x100) == 0)
    {
      if ((v42 & 0x200) == 0)
      {
LABEL_13:
        if (v22)
          goto LABEL_14;
LABEL_16:
        if (*(_DWORD *)(v20 + 24) == 2)
        {
          if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)v20);
        }
        else
        {
          *(_DWORD *)(v20 + 24) -= 2;
        }
        goto LABEL_18;
      }
      if (!v22)
        goto LABEL_16;
      result = WebCore::ImageOverlay::isInsideOverlay((WebCore::ImageOverlay *)v22, v21);
      if ((result & 1) != 0)
      {
LABEL_14:
        if (*(_DWORD *)(v22 + 24) == 2)
        {
          if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)v22);
        }
        else
        {
          *(_DWORD *)(v22 + 24) -= 2;
        }
        goto LABEL_16;
      }
    }
    result = WebCore::HitTestResult::setToNonUserAgentShadowAncestor(a4);
    goto LABEL_13;
  }
  do
  {
LABEL_18:
    v23 = __ldaxr(v8);
    v24 = v23 - 1;
  }
  while (__stlxr(v24, v8));
  if (!v24)
  {
    atomic_store(1u, v8);
    v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v25 = off_1E31FE290;
    v25[1] = v8;
    v42 = (uint64_t)v25;
    WTF::ensureOnMainThread();
    result = v42;
    v42 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebCore::EventHandler::subframeForTargetNode@<X0>(uint64_t this@<X0>, WebCore::Node *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  if (!this)
    goto LABEL_11;
  v4 = *(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL;
  if (!v4)
    goto LABEL_11;
  v5 = (*(unsigned __int8 *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
  if ((*(_BYTE *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
    v5 = 0;
  if (v5 == 1)
  {
    v6 = *(_DWORD *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x10) + 1;
    *(_DWORD *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v6;
    v7 = *(_QWORD *)(v4 + 232);
    if (v7)
    {
      if (((*(uint64_t (**)(_QWORD, WebCore::Node *))(*(_QWORD *)v7 + 72))(*(_QWORD *)(v4 + 232), a2) & 1) != 0
        || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 80))(v7))
      {
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 720))(v7);
        v8 = (unsigned int *)(this + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
      }
      else
      {
        this = 0;
      }
      v6 = *(_DWORD *)(v4 + 16);
    }
    else
    {
      this = 0;
    }
    *a3 = this;
    if (v6)
    {
      *(_DWORD *)(v4 + 16) = v6 - 1;
    }
    else
    {
      this = 286;
      __break(0xC471u);
    }
  }
  else
  {
LABEL_11:
    *a3 = 0;
  }
  return this;
}

uint64_t WebCore::EventHandler::canDropCurrentlyDraggedImageAsFile(WebCore::EventHandler *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t isSameOriginDomain;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  char v20;
  char v21;

  {
    WebCore::EventHandler::dragState(void)::state = 0u;
    *(_OWORD *)&qword_1EE2F7E10 = 0u;
    isSameOriginDomain = 1;
    return isSameOriginDomain;
  }
  v2 = qword_1EE2F7E18;
  if (!qword_1EE2F7E18)
    return 1;
  do
    v3 = __ldaxr((unsigned int *)v2);
  while (__stlxr(v3 + 1, (unsigned int *)v2));
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 296) + 192), a2);
  v6 = v4;
  if (v4)
  {
    do
      v7 = __ldaxr((unsigned int *)v4);
    while (__stlxr(v7 + 1, (unsigned int *)v4));
  }
  if (v4 == v2)
  {
    isSameOriginDomain = 1;
    if (!v4)
      goto LABEL_15;
    do
    {
LABEL_13:
      v9 = __ldaxr((unsigned int *)v6);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unsigned int *)v6));
    if (!v10)
    {
      atomic_store(1u, (unsigned int *)v6);
      v17 = *(WTF::StringImpl **)(v6 + 48);
      *(_QWORD *)(v6 + 48) = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v5);
        else
          *(_DWORD *)v17 -= 2;
      }
      v18 = *(WTF::StringImpl **)(v6 + 40);
      *(_QWORD *)(v6 + 40) = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v5);
        else
          *(_DWORD *)v18 -= 2;
      }
      v19 = *(unsigned int *)(v6 + 32);
      if ((_DWORD)v19 != -1)
        ((void (*)(char *, uint64_t))off_1E33FE860[v19])(&v20, v6 + 8);
      *(_DWORD *)(v6 + 32) = -1;
      WTF::fastFree((WTF *)v6, v5);
    }
    goto LABEL_15;
  }
  if (*(_BYTE *)(v2 + 63) && *(_BYTE *)(v4 + 63))
  {
    isSameOriginDomain = 1;
    goto LABEL_13;
  }
  isSameOriginDomain = WebCore::SecurityOrigin::isSameOriginDomain((WebCore::SecurityOrigin *)v4, (const WebCore::SecurityOrigin *)v2);
  if (v6)
    goto LABEL_13;
  do
  {
LABEL_15:
    v11 = __ldaxr((unsigned int *)v2);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, (unsigned int *)v2));
  if (!v12)
  {
    atomic_store(1u, (unsigned int *)v2);
    v14 = *(WTF::StringImpl **)(v2 + 48);
    *(_QWORD *)(v2 + 48) = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v5);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = *(WTF::StringImpl **)(v2 + 40);
    *(_QWORD *)(v2 + 40) = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v5);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = *(unsigned int *)(v2 + 32);
    if ((_DWORD)v16 != -1)
      ((void (*)(char *, uint64_t))off_1E33FE860[v16])(&v21, v2 + 8);
    *(_DWORD *)(v2 + 32) = -1;
    WTF::fastFree((WTF *)v2, v5);
  }
  return isSameOriginDomain;
}

uint64_t WebCore::DragController::canProcessDrag(WebCore::DragController *this, const WebCore::DragData *a2, const WebCore::IntPoint *a3)
{
  uint64_t v3;
  BOOL v4;
  unsigned int *v7;
  unsigned int v8;
  WebCore::ScrollView *v9;
  void *v10;
  unint64_t v11;
  int8x8_t v12;
  int32x2_t v13;
  uint64_t v14;
  _DWORD *v15;
  void *v16;
  WebCore::Node *v17;
  void *v18;
  WebCore::Node *v19;
  char v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int32x2_t v39;
  WebCore::Node *v40[17];
  _QWORD v41[4];
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  __int16 v50;
  uint64_t v51;
  WebCore::Node *v52;
  int32x2_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 8) + 160);
  if (v3)
    v4 = *(_BYTE *)(v3 + 144) == 0;
  else
    v4 = 0;
  if (!v4)
    return 0;
  v7 = (unsigned int *)(v3 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = *(WebCore::ScrollView **)(v3 + 288);
  if (v9)
  {
    ++*((_DWORD *)v9 + 2);
    v11 = WebCore::ScrollView::windowToContents(v9, a2, a3);
    if (*((_DWORD *)v9 + 2) == 1)
      (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v9 + 8))(v9);
    else
      --*((_DWORD *)v9 + 2);
  }
  else
  {
    v11 = WebCore::ScrollView::windowToContents(0, a2, a3);
  }
  v41[2] = 0x4000000040;
  v12 = (int8x8_t)vcgt_s32((int32x2_t)v11, (int32x2_t)0xFE000000FE000000);
  v13 = (int32x2_t)vorr_s8((int8x8_t)(*(_QWORD *)&v12 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)v11), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32((int32x2_t)v11, 6uLL)), v12));
  v41[0] = v13;
  v41[1] = v13.i32[0] & 0xFFFFFFC0 | ((unint64_t)((v13.i32[1] & 0xFFFFFFC0) >> 6) << 38);
  v41[3] = vmul_f32(vcvt_f32_s32(v13), (float32x2_t)vdup_n_s32(0x3C800000u));
  v42 = (float)(int)(v13.i32[0] & 0xFFFFFFC0) * 0.015625;
  v43 = (float)(int)(v13.i32[1] & 0xFFFFFFC0) * 0.015625;
  v44 = v42 + 1.0;
  v45 = v43;
  v46 = v42 + 1.0;
  v47 = v43 + 1.0;
  v48 = v42;
  v49 = v43 + 1.0;
  v50 = 256;
  v51 = 0;
  v52 = 0;
  v58 = 0;
  v53 = v13;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v14 = *(_QWORD *)(v3 + 296);
  if (v14 && *(_QWORD *)(v14 + 1944))
  {
    v15 = *(_DWORD **)(v3 + 640);
    ++*v15;
    v39 = v13;
    WebCore::EventHandler::hitTestResultAtPoint((uint64_t)v15, (int *)&v39, 0x803u, (uint64_t)v40);
    WebCore::HitTestResult::operator=((uint64_t)v41, (uint64_t)v40);
    WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v40, v16);
    if (!*v15)
    {
      __break(0xC471u);
      JUMPOUT(0x195F8B0B0);
    }
    --*v15;
    v17 = v52;
    if (v52)
    {
      *((_DWORD *)v52 + 6) += 2;
      WebCore::asFileInput((unsigned int *)v40, v17);
      v19 = v40[0];
      if (v40[0])
      {
        if (*((_DWORD *)v40[0] + 6) == 2)
        {
          if ((*((_WORD *)v40[0] + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v40[0], v18);
        }
        else
        {
          *((_DWORD *)v40[0] + 6) -= 2;
        }
        v20 = 0;
        v21 = 1;
        goto LABEL_19;
      }
      if ((*((_WORD *)v17 + 14) & 0x10) != 0
        && *(_QWORD *)(*((_QWORD *)v17 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
      {
        v32 = *((_DWORD *)v17 + 6);
        *((_DWORD *)v17 + 6) = v32 + 2;
        if (*(_DWORD *)(*((_QWORD *)v17 + 30) + 12) == 4)
        {
          v33 = *((_BYTE *)v17 + 160) & 0x18;
          if (v32)
          {
            *((_DWORD *)v17 + 6) = v32;
          }
          else if ((*((_WORD *)v17 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v17, v18);
          }
          if (!v33)
            goto LABEL_54;
        }
        else if (v32)
        {
          *((_DWORD *)v17 + 6) = v32;
        }
        else if ((*((_WORD *)v17 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v17, v18);
        }
      }
      v20 = 0;
      v34 = **((_QWORD **)v17 + 5);
      if (!v34)
      {
        v21 = 0;
        goto LABEL_19;
      }
      v21 = 0;
      if ((*(_WORD *)(v34 + 28) & 0x80) == 0)
      {
LABEL_19:
        v22 = WebCore::DragData::containsCompatibleContent((WTF::StringImpl **)a2, v21);
        v23 = v22 ^ 1;
        if (v19)
          v23 = 1;
        v29 = v22 | v23 ^ 1u;
        if ((v20 & 1) == 0 && (v23 & 1) == 0)
        {
          v29 = 0;
          if (WebCore::Node::computeEditability((uint64_t)v17, 0, 1))
          {
            if (!*((_BYTE *)this + 47)
              || *((_QWORD *)this + 2) != *((_QWORD *)this + 3)
              || !v52
              || (v24 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v52 + 5) + 8) + 528)) == 0
              || (v25 = *(_QWORD *)(v24 + 8)) == 0
              || !WebCore::FrameSelection::contains(*(WebCore::FrameSelection **)(*(_QWORD *)(v25 + 296) + 3064), (const WebCore::LayoutPoint *)v41))
            {
              v29 = 1;
            }
          }
        }
        if (*((_DWORD *)v17 + 6) == 2)
        {
          if ((*((_WORD *)v17 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v17, v10);
        }
        else
        {
          *((_DWORD *)v17 + 6) -= 2;
        }
        goto LABEL_36;
      }
      v35 = *(_QWORD *)(v34 + 200);
      if (v35)
      {
        v36 = *(_QWORD *)(v35 + 8);
        if (v36)
        {
          if ((*(_WORD *)(v36 + 28) & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(v36 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
          {
            v37 = *(_DWORD *)(v36 + 24);
            *(_DWORD *)(v36 + 24) = v37 + 2;
            if (*(_DWORD *)(*(_QWORD *)(v36 + 240) + 12) == 4)
            {
              v38 = *(_BYTE *)(v36 + 160) & 0x18;
              if (v37)
              {
                *(_DWORD *)(v36 + 24) = v37;
              }
              else if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v36, 0);
              }
              if (!v38)
              {
LABEL_54:
                v21 = 2;
                v20 = 1;
                goto LABEL_19;
              }
            }
            else
            {
              if (v37)
              {
                v20 = 0;
                v21 = 0;
                *(_DWORD *)(v36 + 24) = v37;
                goto LABEL_19;
              }
              if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v36, 0);
            }
          }
        }
      }
      v20 = 0;
      v21 = 0;
      goto LABEL_19;
    }
  }
  v29 = 0;
LABEL_36:
  WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v41, v10);
  do
  {
    v26 = __ldaxr(v7);
    v27 = v26 - 1;
  }
  while (__stlxr(v27, v7));
  if (!v27)
  {
    atomic_store(1u, v7);
    v30 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v30 = off_1E31FE290;
    v30[1] = v7;
    v41[0] = v30;
    WTF::ensureOnMainThread();
    v31 = v41[0];
    v41[0] = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  return v29;
}

WebCore::Node *WebCore::elementUnderMouse(WebCore *this, WebCore::Document *a2, const WebCore::IntPoint *a3)
{
  uint64_t v3;
  float v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  char v8;
  float v9;
  float v10;
  double v11;
  unsigned int v12;
  double v13;
  uint64_t v14;
  void *v15;
  WebCore::Node *v16;
  int v17;
  int v18;
  WebCore::Node *v19;
  WebCore::Node *v20;
  uint64_t v21;
  WebCore::Node *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  char v30;
  _QWORD v31[4];
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  __int16 v40;
  WebCore::Node *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;

  v3 = *((_QWORD *)this + 66);
  v4 = 1.0;
  if (v3)
  {
    v5 = *(_QWORD *)(v3 + 8);
    if (v5)
    {
      v6 = (unsigned int *)(v5 + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
      v8 = 0;
      v4 = *(float *)(v5 + 592);
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
  }
  v8 = 1;
LABEL_6:
  v9 = v4 * (float)*(int *)a2;
  v10 = v4 * (float)*((int *)a2 + 1);
  v11 = v9 * 64.0;
  if (v11 >= 2147483650.0)
  {
    v12 = 0x7FFFFFFF;
  }
  else if (v11 <= -2147483650.0)
  {
    v12 = 0x80000000;
  }
  else
  {
    v12 = (int)v11;
  }
  v13 = v10 * 64.0;
  if (v13 >= 2147483650.0)
  {
    v14 = 0x7FFFFFFFLL;
  }
  else if (v13 <= -2147483650.0)
  {
    v14 = 0x80000000;
  }
  else
  {
    v14 = (int)v13;
  }
  v31[0] = v12 | (unint64_t)(v14 << 32);
  v31[1] = v12 & 0xFFFFFFC0 | ((unint64_t)((v14 & 0xFFFFFFC0) >> 6) << 38);
  v31[2] = 0x4000000040;
  v31[3] = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v14, v12)), (float32x2_t)vdup_n_s32(0x3C800000u));
  v32 = (float)(int)(v12 & 0xFFFFFFC0) * 0.015625;
  v33 = (float)(v14 & 0xFFFFFFC0) * 0.015625;
  v34 = v32 + 1.0;
  v35 = v33;
  v36 = v32 + 1.0;
  v37 = v33 + 1.0;
  v38 = v32;
  v39 = v33 + 1.0;
  v40 = 256;
  v41 = 0;
  v42 = 0;
  v48 = 0;
  v43 = v31[0];
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v29 = 259;
  v30 = 1;
  WebCore::Document::hitTest((uint64_t)this, &v29, (WebCore::HitTestingTransformState *)v31, (uint64_t)v31);
  v16 = v41;
  if (v41)
  {
    v17 = *((_DWORD *)v41 + 6);
    v18 = v17 + 2;
    *((_DWORD *)v41 + 6) = v17 + 2;
    if ((*((_WORD *)v16 + 14) & 8) != 0)
    {
      *((_DWORD *)v16 + 6) = v17 + 4;
      v19 = v16;
    }
    else
    {
      v19 = (WebCore::Node *)*((_QWORD *)v16 + 4);
      v18 = *((_DWORD *)v19 + 6);
      *((_DWORD *)v19 + 6) = v18 + 2;
    }
    v20 = 0;
    v21 = **((_QWORD **)v19 + 5);
    if (v21)
    {
      if ((*(_WORD *)(v21 + 28) & 0x80) != 0)
      {
        v20 = *(WebCore::Node **)(v21 + 200);
        if (v20)
          v20 = (WebCore::Node *)*((_QWORD *)v20 + 1);
      }
    }
    if (v20)
      v22 = v20;
    else
      v22 = v19;
    if (v18)
    {
      *((_DWORD *)v19 + 6) = v18;
    }
    else if ((*((_WORD *)v19 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v19, v15);
    }
    if (*((_DWORD *)v16 + 6) == 2)
    {
      if ((*((_WORD *)v16 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v16, v15);
    }
    else
    {
      *((_DWORD *)v16 + 6) -= 2;
    }
  }
  else
  {
    v22 = 0;
  }
  WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v31, v15);
  if ((v8 & 1) == 0)
  {
    v23 = (unsigned int *)(v5 + 8);
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, v23);
      v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v27 = off_1E31FE290;
      v27[1] = v23;
      v31[0] = v27;
      WTF::ensureOnMainThread();
      v28 = v31[0];
      v31[0] = 0;
      if (v28)
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    }
  }
  return v22;
}

unsigned int *WebCore::asFileInput(unsigned int *this, WebCore::Node *a2)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::Node *v11;

  v2 = this;
  if ((*((_WORD *)a2 + 14) & 0x10) == 0)
    goto LABEL_20;
  v3 = *(_QWORD *)(WebCore::HTMLNames::inputTag + 24);
  if (*(_QWORD *)(*((_QWORD *)a2 + 12) + 24) != v3)
    goto LABEL_20;
  v4 = *((_DWORD *)a2 + 6);
  v5 = v4 + 2;
  *((_DWORD *)a2 + 6) = v4 + 2;
  v6 = *(_DWORD *)(*((_QWORD *)a2 + 30) + 12);
  if ((v6 & 0x14001) != 0)
  {
    v7 = **((_QWORD **)a2 + 5);
    if (v7)
      v8 = (*(_WORD *)(v7 + 28) & 0x80) == 0;
    else
      v8 = 1;
    if (v8)
      goto LABEL_13;
    v9 = *(_QWORD *)(v7 + 200);
    if (!v9)
      goto LABEL_13;
    v10 = *(_QWORD *)(v9 + 8);
    if (!v10)
      goto LABEL_14;
    if ((*(_WORD *)(v10 + 28) & 0x10) != 0 && *(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) == v3)
    {
      *(_DWORD *)(v10 + 24) += 2;
      v4 = *((_DWORD *)a2 + 6) - 2;
    }
    else
    {
LABEL_13:
      v10 = 0;
    }
LABEL_14:
    if (v4)
    {
      *((_DWORD *)a2 + 6) = v4;
    }
    else if ((*((_WORD *)a2 + 15) & 0x400) == 0)
    {
      this = WebCore::Node::removedLastRef(a2, a2);
    }
    if (v10)
    {
      v6 = *(_DWORD *)(*(_QWORD *)(v10 + 240) + 12);
      v5 = *(_DWORD *)(v10 + 24);
      a2 = (WebCore::Node *)v10;
      goto LABEL_18;
    }
LABEL_20:
    *v2 = 0;
    return this;
  }
LABEL_18:
  if (v6 == 64)
  {
    *((_DWORD *)a2 + 6) = v5 + 2;
    v11 = a2;
  }
  else
  {
    v11 = 0;
    v5 -= 2;
  }
  *v2 = v11;
  if (v5)
  {
    *((_DWORD *)a2 + 6) = v5;
  }
  else if ((*((_WORD *)a2 + 15) & 0x400) == 0)
  {
    return WebCore::Node::removedLastRef(a2, a2);
  }
  return this;
}

BOOL WebCore::setSelectionToDragCaret(WebCore *this, WebCore::LocalFrame *a2, int32x2_t *a3, const WebCore::IntPoint *a4)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  WebCore::Node *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  void *v16;
  _BOOL8 v17;
  unsigned int v18;
  unsigned int v19;
  _QWORD *v21;
  uint64_t v22;
  WebCore::Node *v23[3];
  uint64_t v24[13];

  v7 = (unsigned int *)((char *)this + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  WebCore::FrameSelection::setSelection(*(_QWORD *)(*((_QWORD *)this + 37) + 3064), (uint64_t)a2, 6u, 0, 0, 0, 0);
  v9 = *(_QWORD *)(*((_QWORD *)this + 37) + 3064);
  if (!*(_BYTE *)(v9 + 153))
  {
    WebCore::LocalFrame::visiblePositionForPoint(this, a3, (int8x8_t *)v23);
    WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)v24, (const WebCore::VisiblePosition *)v23, 0);
    WebCore::VisibleSelection::operator=((uint64_t *)a2, v24);
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v24);
    v11 = v23[0];
    v23[0] = 0;
    if (v11)
    {
      if (*((_DWORD *)v11 + 6) == 2)
      {
        if ((*((_WORD *)v11 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v11, v10);
      }
      else
      {
        *((_DWORD *)v11 + 6) -= 2;
      }
    }
    v12 = *(_QWORD *)(*((_QWORD *)this + 37) + 3064);
    ++*(_DWORD *)(v12 + 28);
    WebCore::FrameSelection::setSelection(v12, (uint64_t)a2, 6u, 0, 0, 0, 0);
    v13 = *(_DWORD *)(v12 + 28);
    if (!v13)
    {
      __break(0xC471u);
      JUMPOUT(0x195F8B834);
    }
    *(_DWORD *)(v12 + 28) = v13 - 1;
    v9 = *(_QWORD *)(*((_QWORD *)this + 37) + 3064);
    if (!*(_BYTE *)(v9 + 153))
      goto LABEL_25;
  }
  v14 = *(_QWORD *)(v9 + 120);
  if (v14
    && (v15 = *(_BYTE *)(v9 + 132) & 7, v15 <= 4)
    && (((1 << v15) & 0x19) != 0 || (v14 = *(_QWORD *)(v14 + 32)) != 0))
  {
    *(_DWORD *)(v14 + 24) += 2;
    v17 = WebCore::Node::computeEditability(v14, 0, 0) != 0;
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v14, v16);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
  }
  else
  {
LABEL_25:
    v17 = 0;
  }
  do
  {
    v18 = __ldaxr(v7);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v7));
  if (!v19)
  {
    atomic_store(1u, v7);
    v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v21 = off_1E31FE290;
    v21[1] = v7;
    v24[0] = (uint64_t)v21;
    WTF::ensureOnMainThread();
    v22 = v24[0];
    v24[0] = 0;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  return v17;
}

uint64_t WebCore::EventHandler::updateDragAndDrop(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  unint64_t StatusReg;
  uint64_t v9;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  void *v14;
  WebCore::Node *v15;
  int v16;
  __int16 v17;
  uint64_t *v18;
  uint64_t v19;
  __int16 v20;
  int v21;
  int v22;
  unsigned __int8 v23;
  int v24;
  WebCore *updated;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int *v33;
  unsigned int v34;
  WebCore::DataTransfer *v35;
  WebCore::DataTransfer *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  WebCore::DataTransfer *v44;
  WebCore::DataTransfer *v45;
  uint64_t v46;
  WebCore *v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  _DWORD *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  WebCore::DataTransfer *v58;
  int v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  char v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  unsigned int *Ref;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WebCore::DataTransfer *v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  WebCore *v79;
  uint64_t v80;
  uint64_t v81;
  _DWORD *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 v88;
  uint64_t *v89;
  WebCore::DataTransfer *v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int *v97;
  unsigned int v98;
  WTF *v99;
  void *v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int *v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  WebCore::DataTransfer *v109;
  WebCore::DataTransfer *v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int *v113;
  WebCore::DataTransfer *v114;
  _QWORD *v115;
  WTF::StringImpl *v116;
  uint64_t v117;
  WebCore::Node *v118;
  uint64_t v119;

  v9 = a2;
  v119 = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v12 = (unsigned int *)(v11 + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  if (!*(_QWORD *)(v11 + 288))
  {
    LOBYTE(v22) = 0;
    v23 = 0;
    v24 = 0;
    goto LABEL_136;
  }
  LODWORD(v114) = 257;
  BYTE4(v114) = 1;
  WebCore::EventHandler::prepareMouseEvent((uint64_t)&v115, a1, (const WebCore::IntPoint *)&v114, a2);
  v15 = v118;
  if (!v118)
  {
    v19 = 0;
    goto LABEL_16;
  }
  v16 = *((_DWORD *)v118 + 6) + 2;
  *((_DWORD *)v118 + 6) = v16;
  v17 = *((_WORD *)v15 + 14);
  if ((v17 & 8) != 0)
  {
    v19 = (uint64_t)v15;
    goto LABEL_16;
  }
  if ((v17 & 0x80) != 0)
  {
    v105 = *((_QWORD *)v15 + 25);
    if (!v105)
      goto LABEL_174;
    v18 = (uint64_t *)(v105 + 8);
  }
  else
  {
    v18 = (uint64_t *)((char *)v15 + 32);
  }
  v19 = *v18;
  if (!*v18)
    goto LABEL_12;
  v20 = *(_WORD *)(v19 + 28);
  if ((v20 & 0x80) == 0)
  {
    if ((v20 & 8) != 0)
    {
LABEL_11:
      *(_DWORD *)(v19 + 24) += 2;
      v16 = *((_DWORD *)v15 + 6);
      goto LABEL_12;
    }
    goto LABEL_174;
  }
  v106 = *(_QWORD *)(v19 + 200);
  if (!v106)
  {
LABEL_174:
    v19 = 0;
    goto LABEL_12;
  }
  v19 = *(_QWORD *)(v106 + 8);
  if (v19)
    goto LABEL_11;
LABEL_12:
  v21 = v16 - 2;
  if (v21)
  {
    *((_DWORD *)v15 + 6) = v21;
  }
  else if ((*((_WORD *)v15 + 15) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef(v15, v14);
  }
LABEL_16:
  updated = WebCore::AutoscrollController::updateDragAndDrop(*(_QWORD *)(a1 + 144), (WebCore::RenderObject *)v19, (const WebCore::IntPoint *)(v9 + 52), *(double *)v9);
  v27 = *(_QWORD *)(a1 + 696);
  if (v27 != v19)
  {
    if (v19)
    {
      if ((*(_WORD *)(v19 + 28) & 0x10) == 0
        || (v28 = *(_QWORD *)(*(_QWORD *)(v19 + 96) + 24), v28 != *(_QWORD *)(WebCore::HTMLNames::frameTag + 24))
        && v28 != *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24))
      {
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        v46 = *(_QWORD *)(StatusReg + 736);
        if (!v46 || (v47 = *(WebCore **)(v46 + 96)) == 0)
        {
          updated = (WebCore *)WebCore::threadGlobalDataSlow(updated);
          v47 = updated;
        }
        v48 = *((_QWORD *)v47 + 5);
        if (!v48)
        {
          updated = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v47);
          v48 = *((_QWORD *)v47 + 5);
        }
        v49 = &unk_1EE2F7000;
        {
          v50 = WebCore::EventHandler::dragState(void)::state;
          if ((_QWORD)WebCore::EventHandler::dragState(void)::state)
          {
            v51 = (_DWORD *)qword_1EE2F7E10;
            if (qword_1EE2F7E10)
            {
              if (BYTE8(WebCore::EventHandler::dragState(void)::state))
              {
                *(_DWORD *)(WebCore::EventHandler::dragState(void)::state + 24) += 2;
                updated = (WebCore *)WebCore::EventHandler::dispatchDragEvent(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 8), (uint64_t *)(v48 + 656), (WebCore::Node *)v50, v9, v51);
                if (*(_DWORD *)(v50 + 24) == 2)
                {
                  if ((*(_WORD *)(v50 + 30) & 0x400) == 0)
                    updated = (WebCore *)WebCore::Node::removedLastRef((WebCore::Node *)v50, v52);
                }
                else
                {
                  *(_DWORD *)(v50 + 24) -= 2;
                }
              }
            }
          }
          goto LABEL_60;
        }
        goto LABEL_185;
      }
      v29 = *(_DWORD *)(v19 + 24);
      *(_DWORD *)(v19 + 24) = v29 + 2;
      v30 = *(_QWORD *)(v19 + 112);
      if (v30)
      {
        v31 = *(_QWORD *)(v30 + 8);
        if (!v31)
          goto LABEL_25;
        if (!*(_BYTE *)(v31 + 144))
        {
          v101 = (unsigned int *)(v31 + 8);
          do
            v102 = __ldaxr(v101);
          while (__stlxr(v102 + 1, v101));
          v29 = *(_DWORD *)(v19 + 24) - 2;
          if (*(_DWORD *)(v19 + 24) != 2)
            goto LABEL_26;
          goto LABEL_156;
        }
      }
      v31 = 0;
LABEL_25:
      if (v29)
      {
LABEL_26:
        *(_DWORD *)(v19 + 24) = v29;
LABEL_27:
        if (v31)
        {
          v32 = WebCore::EventHandler::updateDragAndDrop(*(_QWORD *)(v31 + 640), v9, a3, a4, a5);
          LOBYTE(v22) = v32;
          v33 = (unsigned int *)(v31 + 8);
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          LOBYTE(v112) = BYTE1(v32);
          HIDWORD(v112) = BYTE2(v32);
          if (v34 == 1)
          {
            atomic_store(1u, v33);
            v35 = (WebCore::DataTransfer *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v35 = off_1E31FE290;
            *((_QWORD *)v35 + 1) = v33;
            v114 = v35;
            WTF::ensureOnMainThread();
            v36 = v114;
            v114 = 0;
            if (v36)
              (*(void (**)(WebCore::DataTransfer *))(*(_QWORD *)v36 + 8))(v36);
          }
        }
        else
        {
          v112 = 0;
          LOBYTE(v22) = 0;
        }
        while (1)
        {
          v27 = *(_QWORD *)(a1 + 696);
          if (!v27)
            goto LABEL_108;
LABEL_70:
          v59 = *(_DWORD *)(v27 + 24);
          v60 = v59 + 2;
          *(_DWORD *)(v27 + 24) = v59 + 2;
          v111 = v9;
          if ((*(_WORD *)(v27 + 28) & 0x10) == 0
            || (v61 = *(_QWORD *)(*(_QWORD *)(v27 + 96) + 24), v61 != *(_QWORD *)(WebCore::HTMLNames::frameTag + 24))
            && v61 != *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24))
          {
            StatusReg = 0;
            v64 = 1;
            goto LABEL_80;
          }
          v62 = v59 + 4;
          *(_DWORD *)(v27 + 24) = v62;
          v63 = *(_QWORD *)(v27 + 112);
          if (v63)
          {
            StatusReg = *(_QWORD *)(v63 + 8);
            if (!StatusReg)
              goto LABEL_77;
            if (!*(_BYTE *)(StatusReg + 144))
            {
              v97 = (unsigned int *)(StatusReg + 8);
              do
                v98 = __ldaxr(v97);
              while (__stlxr(v98 + 1, v97));
              v62 = *(_DWORD *)(v27 + 24);
              v60 = v62 - 2;
              if (v62 != 2)
              {
LABEL_78:
                v64 = 0;
                *(_DWORD *)(v27 + 24) = v60;
                goto LABEL_80;
              }
              goto LABEL_145;
            }
          }
          StatusReg = 0;
LABEL_77:
          if (v60)
            goto LABEL_78;
LABEL_145:
          if ((*(_WORD *)(v27 + 30) & 0x400) != 0)
          {
            v64 = 0;
            v60 = v62;
          }
          else
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v27, v26);
            v64 = 0;
            v60 = *(_DWORD *)(v27 + 24);
          }
LABEL_80:
          v65 = v60 - 2;
          if (v65)
          {
            *(_DWORD *)(v27 + 24) = v65;
          }
          else if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v27, v26);
          }
          if ((v64 & 1) == 0)
          {
            v23 = v112;
            v24 = HIDWORD(v112);
            if (!StatusReg)
              goto LABEL_105;
            v74 = WebCore::EventHandler::updateDragAndDrop(*(_QWORD *)(StatusReg + 640), v111, a3, a4, a5);
            LOBYTE(v22) = v74;
            v23 = BYTE1(v74);
            v24 = BYTE2(v74);
            goto LABEL_102;
          }
          v66 = *(_QWORD *)(a1 + 696);
          if (!v66)
            goto LABEL_98;
          *(_DWORD *)(v66 + 24) += 2;
          v9 = *(_QWORD *)(*(_QWORD *)(v66 + 40) + 8);
          *(_DWORD *)(v9 + 24) += 2;
          v67 = *(_QWORD *)(a3 + 24);
          if (v67)
          {
            (*(void (**)(unsigned int **__return_ptr))(*(_QWORD *)v67 + 48))(&v113);
            WebCore::DataTransfer::createForUpdatingDropTarget((WebCore::Document *)v9, (uint64_t *)&v113, a5, (uint64_t *)&v114);
            Ref = v113;
            v113 = 0;
            if (Ref)
              Ref = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)Ref + 8))(Ref);
            if (*(_DWORD *)(v9 + 24) == 2)
            {
              if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
                Ref = WebCore::Node::removedLastRef((WebCore::Node *)v9, v68);
            }
            else
            {
              *(_DWORD *)(v9 + 24) -= 2;
            }
            v70 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
            if (!v70 || (v71 = *(_QWORD *)(v70 + 96)) == 0)
              v71 = WebCore::threadGlobalDataSlow((WebCore *)Ref);
            v72 = *(_QWORD *)(v71 + 40);
            if (!v72)
            {
              WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v71);
              v72 = *(_QWORD *)(v71 + 40);
            }
            WebCore::EventHandler::dispatchDragEvent(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 8), (uint64_t *)(v72 + 680), (WebCore::Node *)v66, v111, v114);
            v73 = v114;
            *((_DWORD *)v114 + 6) = 0;
            if (*(_DWORD *)v73 == 1)
            {
              WebCore::DataTransfer::~DataTransfer(v73, v26);
              WTF::fastFree(v99, v100);
            }
            else
            {
              --*(_DWORD *)v73;
            }
            if (*(_DWORD *)(v66 + 24) == 2)
            {
              if ((*(_WORD *)(v66 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v66, v26);
            }
            else
            {
              *(_DWORD *)(v66 + 24) -= 2;
            }
LABEL_98:
            v23 = v112;
            v24 = HIDWORD(v112);
            if (!StatusReg)
              goto LABEL_105;
LABEL_102:
            v75 = (unsigned int *)(StatusReg + 8);
            do
            {
              v76 = __ldaxr(v75);
              v77 = v76 - 1;
            }
            while (__stlxr(v77, v75));
            if (!v77)
            {
              atomic_store(1u, v75);
              v109 = (WebCore::DataTransfer *)WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v109 = off_1E31FE290;
              *((_QWORD *)v109 + 1) = v75;
              v114 = v109;
              WTF::ensureOnMainThread();
              v110 = v114;
              v114 = 0;
              if (v110)
                (*(void (**)(WebCore::DataTransfer *))(*(_QWORD *)v110 + 8))(v110);
            }
            goto LABEL_105;
          }
          do
          {
LABEL_184:
            updated = (WebCore *)std::__throw_bad_function_call[abi:sn180100]();
LABEL_185:
            WebCore::EventHandler::dragState(void)::state = 0u;
            *(_OWORD *)&qword_1EE2F7E10 = 0u;
            v49[3616] = 1;
LABEL_60:
            v53 = *(_QWORD *)(StatusReg + 736);
            if (!v53 || (v54 = *(_QWORD *)(v53 + 96)) == 0)
              v54 = WebCore::threadGlobalDataSlow(updated);
            v55 = *(_QWORD *)(v54 + 40);
            if (!v55)
            {
              WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v54);
              v55 = *(_QWORD *)(v54 + 40);
            }
            v56 = *(_QWORD *)(a3 + 24);
          }
          while (!v56);
          v57 = (uint64_t *)(v55 + 672);
          (*(void (**)(WebCore::DataTransfer **__return_ptr))(*(_QWORD *)v56 + 48))(&v114);
          v22 = WebCore::EventHandler::dispatchDragEnterOrDragOverEvent(a1, v57, v19, v9, (uint64_t *)&v114, a4, a5);
          v58 = v114;
          v114 = 0;
          if (v58)
            (*(void (**)(WebCore::DataTransfer *))(*(_QWORD *)v58 + 8))(v58);
          LOBYTE(v112) = BYTE1(v22);
          HIDWORD(v112) = BYTE2(v22);
        }
      }
LABEL_156:
      if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v19, v26);
      goto LABEL_27;
    }
    v112 = 0;
    LOBYTE(v22) = 0;
    if (v27)
      goto LABEL_70;
LABEL_108:
    v23 = v112;
    v24 = HIDWORD(v112);
LABEL_105:
    if (v19)
      *(_BYTE *)(a1 + 706) = 1;
    goto LABEL_130;
  }
  if (v19)
  {
    if ((*(_WORD *)(v19 + 28) & 0x10) == 0
      || (v37 = *(_QWORD *)(*(_QWORD *)(v19 + 96) + 24), v37 != *(_QWORD *)(WebCore::HTMLNames::frameTag + 24))
      && v37 != *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24))
    {
      if (!*(_BYTE *)(a1 + 706))
      {
        v78 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v78 || (v79 = *(WebCore **)(v78 + 96)) == 0)
        {
          updated = (WebCore *)WebCore::threadGlobalDataSlow(updated);
          v79 = updated;
        }
        v80 = *((_QWORD *)v79 + 5);
        if (!v80)
        {
          updated = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v79);
          v80 = *((_QWORD *)v79 + 5);
        }
        {
          v81 = WebCore::EventHandler::dragState(void)::state;
          if ((_QWORD)WebCore::EventHandler::dragState(void)::state)
          {
            v82 = (_DWORD *)qword_1EE2F7E10;
            if (qword_1EE2F7E10)
            {
              if (BYTE8(WebCore::EventHandler::dragState(void)::state))
              {
                *(_DWORD *)(WebCore::EventHandler::dragState(void)::state + 24) += 2;
                updated = (WebCore *)WebCore::EventHandler::dispatchDragEvent(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 8), (uint64_t *)(v80 + 656), (WebCore::Node *)v81, v9, v82);
                if (*(_DWORD *)(v81 + 24) == 2)
                {
                  if ((*(_WORD *)(v81 + 30) & 0x400) == 0)
                    updated = (WebCore *)WebCore::Node::removedLastRef((WebCore::Node *)v81, v83);
                }
                else
                {
                  *(_DWORD *)(v81 + 24) -= 2;
                }
              }
            }
          }
        }
        else
        {
          WebCore::EventHandler::dragState(void)::state = 0u;
          *(_OWORD *)&qword_1EE2F7E10 = 0u;
        }
      }
      v84 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v84 || (v85 = *(_QWORD *)(v84 + 96)) == 0)
        v85 = WebCore::threadGlobalDataSlow(updated);
      v86 = *(_QWORD *)(v85 + 40);
      if (!v86)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v85);
        v86 = *(_QWORD *)(v85 + 40);
      }
      v87 = *(_QWORD *)(a3 + 24);
      if (!v87)
        goto LABEL_184;
      v88 = a4;
      v89 = (uint64_t *)(v86 + 688);
      (*(void (**)(WebCore::DataTransfer **__return_ptr))(*(_QWORD *)v87 + 48))(&v114);
      v22 = WebCore::EventHandler::dispatchDragEnterOrDragOverEvent(a1, v89, v19, v9, (uint64_t *)&v114, v88, a5);
      v90 = v114;
      v114 = 0;
      if (v90)
        (*(void (**)(WebCore::DataTransfer *))(*(_QWORD *)v90 + 8))(v90);
      v24 = BYTE2(v22);
      v23 = BYTE1(v22);
      *(_BYTE *)(a1 + 706) = 0;
      goto LABEL_130;
    }
    v38 = *(_DWORD *)(v19 + 24);
    *(_DWORD *)(v19 + 24) = v38 + 2;
    v39 = *(_QWORD *)(v19 + 112);
    if (v39)
    {
      v40 = *(_QWORD *)(v39 + 8);
      if (!v40)
        goto LABEL_41;
      if (!*(_BYTE *)(v40 + 144))
      {
        v103 = (unsigned int *)(v40 + 8);
        do
          v104 = __ldaxr(v103);
        while (__stlxr(v104 + 1, v103));
        v38 = *(_DWORD *)(v19 + 24) - 2;
        if (*(_DWORD *)(v19 + 24) != 2)
          goto LABEL_42;
        goto LABEL_163;
      }
    }
    v40 = 0;
LABEL_41:
    if (v38)
    {
LABEL_42:
      *(_DWORD *)(v19 + 24) = v38;
LABEL_43:
      if (v40)
      {
        v41 = WebCore::EventHandler::updateDragAndDrop(*(_QWORD *)(v40 + 640), v9, a3, a4, a5);
        LOBYTE(v22) = v41;
        v42 = (unsigned int *)(v40 + 8);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        v24 = BYTE2(v41);
        v23 = BYTE1(v41);
        if (v43 == 1)
        {
          atomic_store(1u, v42);
          v44 = (WebCore::DataTransfer *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v44 = off_1E31FE290;
          *((_QWORD *)v44 + 1) = v42;
          v114 = v44;
          WTF::ensureOnMainThread();
          v45 = v114;
          v114 = 0;
          if (v45)
            (*(void (**)(WebCore::DataTransfer *))(*(_QWORD *)v45 + 8))(v45);
        }
      }
      else
      {
        LOBYTE(v22) = 0;
        v23 = 0;
        v24 = 0;
      }
LABEL_130:
      v91 = *(_QWORD *)(a1 + 696);
      *(_QWORD *)(a1 + 696) = v19;
      if (v91)
      {
        if (*(_DWORD *)(v91 + 24) == 2)
        {
          if ((*(_WORD *)(v91 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v91, v26);
        }
        else
        {
          *(_DWORD *)(v91 + 24) -= 2;
        }
      }
      goto LABEL_133;
    }
LABEL_163:
    if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v19, v26);
    goto LABEL_43;
  }
  v24 = 0;
  v23 = 0;
  LOBYTE(v22) = 0;
  *(_QWORD *)(a1 + 696) = 0;
LABEL_133:
  WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)&v117, v26);
  v93 = v116;
  v116 = 0;
  if (v93)
  {
    if (*(_DWORD *)v93 == 2)
      WTF::StringImpl::destroy(v93, v92);
    else
      *(_DWORD *)v93 -= 2;
  }
  do
  {
LABEL_136:
    v94 = __ldaxr(v12);
    v95 = v94 - 1;
  }
  while (__stlxr(v95, v12));
  if (!v95)
  {
    atomic_store(1u, v12);
    v107 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v107 = off_1E31FE290;
    v107[1] = v12;
    v115 = v107;
    WTF::ensureOnMainThread();
    v108 = v115;
    v115 = 0;
    if (v108)
      (*(void (**)(_QWORD *))(*v108 + 8))(v108);
  }
  return (v23 << 8) | (v24 << 16) | v22;
}

uint64_t WebCore::DragController::draggableElement(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, uint64_t a6)
{
  WebCore::FrameSelection *v10;
  int8x8_t v11;
  void *v12;
  char v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  __int16 v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  __int16 v33;
  uint64_t v34;
  int v35;
  char v36;
  char v37;
  WebCore::Node *v38;
  WebCore::Node *v39;
  int v40;
  uint64_t v41;
  char v42;
  void *v43;
  int v44;
  uint64_t *v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  int v60;
  __int16 v61;
  int v62;
  int v63;
  int v64;
  __int16 v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  char v78;
  uint64_t v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  void *v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WebCore::Node *v89[2];
  WebCore::Node *v90;
  char v91;
  unsigned int *v92;
  unsigned int **v93;

  v10 = *(WebCore::FrameSelection **)(*(_QWORD *)(a2 + 296) + 3064);
  v11 = (int8x8_t)vcgt_s32((int32x2_t)__PAIR64__(a5, a4), (int32x2_t)0xFE000000FE000000);
  v89[0] = (WebCore::Node *)vorr_s8((int8x8_t)(*(_QWORD *)&v11 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)__PAIR64__(a5, a4)), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32((int32x2_t)__PAIR64__(a5, a4), 6uLL)), v11));
  if (WebCore::FrameSelection::contains(v10, (const WebCore::LayoutPoint *)v89))
    v13 = 8;
  else
    v13 = 0;
  *(_BYTE *)(a6 + 9) = v13;
  if (!a3)
    return 0;
  v14 = *(_WORD *)(a3 + 28);
  if ((v14 & 0x10) != 0
    && (v14 & 0x110) != 0x110
    && *(_QWORD *)(*(_QWORD *)(a3 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::attachmentTag + 24))
  {
    v15 = a3;
LABEL_18:
    v18 = *(_DWORD *)(v15 + 24);
    v19 = *(_QWORD *)(*(_QWORD *)(a2 + 296) + 3064);
    v20 = v18 + 4;
    *(_DWORD *)(v15 + 24) = v18 + 4;
    if (*(_QWORD *)(v19 + 120) != v15)
      goto LABEL_44;
    if ((*(_BYTE *)(v19 + 132) & 8) == 0
      && ((v21 = *(_BYTE *)(v19 + 132) & 7, v21 != 4) ? (v22 = v21 == 2) : (v22 = 1), v22))
    {
      *(_DWORD *)(v15 + 24) = v18 + 6;
      if ((v14 & 1) != 0)
      {
        v86 = *(_QWORD *)(v15 + 80);
        v24 = v86 ? *(_DWORD *)(v86 + 4) : 0;
      }
      else if ((v14 & 4) != 0 && (v23 = *(_QWORD *)(v15 + 80)) != 0)
      {
        v24 = 0;
        do
        {
          ++v24;
          v23 = *(_QWORD *)(v23 + 56);
        }
        while (v23);
      }
      else
      {
        v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 208))(v15) ^ 1;
        v20 = *(_DWORD *)(v15 + 24) - 2;
      }
      if (v20)
      {
        *(_DWORD *)(v15 + 24) = v20;
      }
      else if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v15, v12);
      }
    }
    else
    {
      v24 = *(_DWORD *)(v19 + 128);
    }
    if (!v24 && (*(_BYTE *)(v19 + 132) & 7) == 1)
    {
      v25 = *(_DWORD *)(v15 + 24);
      v26 = v25 + 2;
      *(_DWORD *)(v15 + 24) = v25 + 2;
      if (*(_QWORD *)(v19 + 136) != v15)
        goto LABEL_55;
      if ((*(_BYTE *)(v19 + 148) & 8) == 0 && ((v27 = *(_BYTE *)(v19 + 148) & 7, v27 == 4) || v27 == 2))
      {
        v28 = v25 + 4;
        *(_DWORD *)(v15 + 24) = v28;
        v29 = *(_WORD *)(v15 + 28);
        if ((v29 & 1) != 0)
        {
          v88 = *(_QWORD *)(v15 + 80);
          if (v88)
            v31 = *(_DWORD *)(v88 + 4);
          else
            v31 = 0;
        }
        else if ((v29 & 4) != 0 && (v30 = *(_QWORD *)(v15 + 80)) != 0)
        {
          v31 = 0;
          do
          {
            ++v31;
            v30 = *(_QWORD *)(v30 + 56);
          }
          while (v30);
        }
        else
        {
          v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 208))(v15) ^ 1;
          v28 = *(_DWORD *)(v15 + 24);
          v26 = v28 - 2;
        }
        if (!v26)
        {
          if ((*(_WORD *)(v15 + 30) & 0x400) != 0)
          {
            v26 = v28;
          }
          else
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v15, v12);
            v26 = *(_DWORD *)(v15 + 24);
          }
        }
      }
      else
      {
        v31 = *(_DWORD *)(v19 + 144);
      }
      *(_DWORD *)(v15 + 24) = v26 + 2;
      v33 = *(_WORD *)(v15 + 28);
      if ((v33 & 1) != 0)
      {
        v87 = *(_QWORD *)(v15 + 80);
        v35 = v87 ? *(_DWORD *)(v87 + 4) : 0;
      }
      else if ((v33 & 4) != 0 && (v34 = *(_QWORD *)(v15 + 80)) != 0)
      {
        v35 = 0;
        do
        {
          ++v35;
          v34 = *(_QWORD *)(v34 + 56);
        }
        while (v34);
      }
      else
      {
        v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 208))(v15) ^ 1;
        v26 = *(_DWORD *)(v15 + 24) - 2;
      }
      if (v26)
      {
        *(_DWORD *)(v15 + 24) = v26;
      }
      else if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v15, v12);
      }
      if (v31 == v35)
        v32 = (*(_BYTE *)(v19 + 148) & 7) == 2;
      else
LABEL_55:
        v32 = 0;
      if (*(_DWORD *)(v15 + 24) == 2)
      {
        if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v15, v12);
      }
      else
      {
        *(_DWORD *)(v15 + 24) -= 2;
      }
    }
    else
    {
LABEL_44:
      v32 = 0;
    }
    if (*(_DWORD *)(v15 + 24) == 2)
    {
      if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v15, v12);
    }
    else
    {
      *(_DWORD *)(v15 + 24) -= 2;
    }
    if ((*(_QWORD *)(v15 + 64) & 0xFFFFFFFFFFFFLL) == 0)
      goto LABEL_63;
    if ((*(_BYTE *)((*(_QWORD *)(v15 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195F8CDA0);
    }
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v15 + 64) & 0xFFFFFFFFFFFFLL) + 0x58) + 32) + 148) & 0xC00000) != 0x400000)
    {
      WebCore::VisibleSelection::firstRange((WebCore::Node *)(v19 + 56), v89);
      if (v91)
        v36 = v32;
      else
        v36 = 1;
      if ((v36 & 1) != 0 || !WebCore::contains<(WebCore::TreeType)2>((int *)v89, (_QWORD *)v15))
      {
        v37 = 0;
        *(_BYTE *)(a6 + 9) = 16;
      }
      else
      {
        v37 = 1;
      }
      if (v91)
      {
        v38 = v90;
        v90 = 0;
        if (v38)
        {
          if (*((_DWORD *)v38 + 6) == 2)
          {
            if ((*((_WORD *)v38 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v38, v12);
          }
          else
          {
            *((_DWORD *)v38 + 6) -= 2;
          }
        }
        v39 = v89[0];
        v89[0] = 0;
        if (v39)
        {
          if (*((_DWORD *)v39 + 6) == 2)
          {
            if ((*((_WORD *)v39 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v39, v12);
          }
          else
          {
            *((_DWORD *)v39 + 6) -= 2;
          }
        }
      }
      v16 = v15;
      if ((v37 & 1) != 0)
      {
        v40 = 1;
        v16 = v15;
LABEL_81:
        if (*(_DWORD *)(v15 + 24) == 2)
        {
          if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v15, v12);
        }
        else
        {
          *(_DWORD *)(v15 + 24) -= 2;
        }
        if (!v40)
          return v16;
        v13 = *(_BYTE *)(a6 + 9);
        goto LABEL_85;
      }
    }
    else
    {
LABEL_63:
      v16 = 0;
    }
    v40 = 0;
    goto LABEL_81;
  }
  if ((v14 & 0x80) != 0)
  {
    v80 = *(_QWORD *)(a3 + 200);
    if (!v80)
      goto LABEL_85;
    v17 = (uint64_t *)(v80 + 8);
  }
  else
  {
    v17 = (uint64_t *)(a3 + 32);
  }
  v15 = *v17;
  if (*v17)
  {
    v14 = *(_WORD *)(v15 + 28);
    if ((v14 & 0x80) != 0)
    {
      v85 = *(_QWORD *)(v15 + 200);
      if (!v85)
        goto LABEL_85;
      v15 = *(_QWORD *)(v85 + 8);
      if (!v15)
        goto LABEL_85;
      v14 = *(_WORD *)(v15 + 28);
      if ((v14 & 0x10) == 0)
        goto LABEL_85;
    }
    else if ((v14 & 8) == 0 || (v14 & 0x10) == 0)
    {
      goto LABEL_85;
    }
    if ((v14 & 0x110) != 0x110
      && *(_QWORD *)(*(_QWORD *)(v15 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::attachmentTag + 24))
    {
      goto LABEL_18;
    }
  }
LABEL_85:
  if ((v13 & 8) != 0 && (*(_BYTE *)(a1 + 46) & 8) != 0)
  {
    v42 = 0;
    *(_DWORD *)(a3 + 24) += 2;
    v41 = a3;
  }
  else
  {
    v41 = 0;
    v42 = 1;
  }
  v16 = v41;
  if ((WebCore::ImageOverlay::isOverlayText((WebCore::ImageOverlay *)a3, (const WebCore::Node *)v12) & 1) != 0)
    goto LABEL_202;
  v16 = a3;
  while (1)
  {
    if ((*(_QWORD *)(v16 + 64) & 0xFFFFFFFFFFFFLL) == 0)
      goto LABEL_96;
    if ((*(_BYTE *)((*(_QWORD *)(v16 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195F8CD6CLL);
    }
    v44 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v16 + 64) & 0xFFFFFFFFFFFFLL) + 0x58) + 32) + 148) >> 22) & 3;
    if ((*(_BYTE *)(a1 + 46) & 1) != 0 && v44 == 2)
    {
      v84 = 1;
      goto LABEL_196;
    }
    if (v44)
      goto LABEL_96;
    if ((*(_WORD *)(v16 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v16 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
    {
      *(_DWORD *)(v16 + 24) += 2;
      if ((*(_BYTE *)(a1 + 46) & 2) == 0)
        goto LABEL_133;
      v47 = *(_QWORD *)(v16 + 280);
      if (!v47)
        goto LABEL_124;
      v48 = *(_QWORD *)(v47 + 8);
      if (!v48)
        goto LABEL_124;
      v49 = *(_QWORD *)(v48 + 104);
      if (!v49)
        goto LABEL_122;
      v50 = *(unsigned int *)(v49 + 4);
      if ((v50 & 1) != 0)
      {
        v51 = *(_QWORD *)(v49 + 40);
        v52 = *(unsigned int *)(v49 + 52);
        if (!v52)
        {
LABEL_122:
          v54 = (_QWORD *)MEMORY[0x1E0CBF2F8];
          goto LABEL_123;
        }
      }
      else
      {
        v51 = v49 + 32;
        v52 = v50 >> 5;
        if (!(v50 >> 5))
          goto LABEL_122;
      }
      v54 = (_QWORD *)(v51 + 8);
      while (1)
      {
        v55 = *(v54 - 1);
        if (v55 == WebCore::HTMLNames::typeAttr
          || *(_QWORD *)(v55 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
          && *(_QWORD *)(v55 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
        {
          break;
        }
        v54 += 2;
        if (!--v52)
          goto LABEL_122;
      }
LABEL_123:
      if ((MEMORY[0x19AEA53F4](*v54, "image/x-apple-adaptive-glyph", 28) & 1) == 0)
      {
LABEL_124:
        if ((*(_QWORD *)(*(_QWORD *)(a2 + 136) + 680) & 0x2000000000000000) != 0)
          goto LABEL_226;
        v56 = *(_QWORD *)(v16 + 64) & 0xFFFFFFFFFFFFLL;
        if (v56)
        {
          if ((*(_BYTE *)((*(_QWORD *)(v16 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195F8CE28);
          }
          if ((((*(_BYTE *)((*(_QWORD *)(v16 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3) & *(_BYTE *)((*(_QWORD *)(v16 + 64) & 0xFFFFFFFFFFFFLL) + 0x35)) == 1)
          {
            ++*(_DWORD *)((*(_QWORD *)(v16 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
            v57 = *(_QWORD *)(*(_QWORD *)(v56 + 224) + 24);
            if (!v57)
              goto LABEL_130;
            v58 = *(_QWORD *)(v57 + 8);
            if (!v58)
              goto LABEL_130;
            v69 = *(unsigned int **)(v58 + 8);
            if (v69)
              goto LABEL_271;
            v69 = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
            *v69 = 1;
            *((_QWORD *)v69 + 1) = v58;
            v74 = *(unsigned int **)(v58 + 8);
            *(_QWORD *)(v58 + 8) = v69;
            if (!v74)
              goto LABEL_271;
            do
            {
              v75 = __ldaxr(v74);
              v76 = v75 - 1;
            }
            while (__stlxr(v76, v74));
            if (!v76)
            {
              atomic_store(1u, v74);
              WTF::fastFree((WTF *)v74, v43);
            }
            v69 = *(unsigned int **)(v58 + 8);
            if (v69)
            {
LABEL_271:
              do
                v70 = __ldaxr(v69);
              while (__stlxr(v70 + 1, v69));
              v92 = v69;
              v71 = *((_QWORD *)v69 + 1);
              if (!v71)
                goto LABEL_184;
              v93 = &v92;
              ++*(_DWORD *)(v71 + 548);
              v72 = *(_QWORD *)(v71 + 488);
              if (v72)
              {
                if (*(_QWORD *)(v72 + 8))
                {
                  WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v71 + 464), (uint64_t *)&v93, (uint64_t)v89);
                  v69 = v92;
                  if (!v92)
                    goto LABEL_184;
                }
              }
              v73 = *((_QWORD *)v69 + 1);
              if (v73 && (*(_WORD *)(v73 + 557) >> 5) - 3 >= 2)
                v59 = WebCore::CachedImage::imageForRenderer((WebCore::CachedImage *)v73, (const WebCore::RenderObject *)v56) != 0;
              else
LABEL_184:
                v59 = 0;
            }
            else
            {
LABEL_130:
              v59 = 0;
              v92 = 0;
            }
            WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v92, v43);
            v60 = *(_DWORD *)(v56 + 16);
            if (!v60)
            {
              __break(0xC471u);
              JUMPOUT(0x195F8CE48);
            }
            *(_DWORD *)(v56 + 16) = v60 - 1;
            if (v59)
            {
LABEL_226:
              v78 = *(_BYTE *)(a6 + 9) | 2;
              goto LABEL_200;
            }
          }
        }
      }
LABEL_133:
      if (*(_DWORD *)(v16 + 24) == 2)
      {
        if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v16, v43);
      }
      else
      {
        *(_DWORD *)(v16 + 24) -= 2;
      }
    }
    if ((*(_BYTE *)(a1 + 46) & 4) != 0
      && WebCore::isDraggableLink((WebCore *)v16, (const WebCore::Element *)v43))
    {
      v84 = *(_BYTE *)(a6 + 9) | 4;
      goto LABEL_196;
    }
    v61 = *(_WORD *)(v16 + 28);
    if ((v61 & 0x10) != 0
      && (v61 & 0x110) != 0x110
      && *(_QWORD *)(*(_QWORD *)(v16 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::attachmentTag + 24))
    {
      v62 = *(_DWORD *)(v16 + 24);
      *(_DWORD *)(v16 + 24) = v62 + 2;
      if ((*(_BYTE *)(a1 + 46) & 0x10) != 0 && *(_QWORD *)(v16 + 120))
      {
        *(_BYTE *)(a6 + 9) |= 0x10u;
        if (v62)
          goto LABEL_201;
        goto LABEL_218;
      }
      if (v62)
      {
        *(_DWORD *)(v16 + 24) = v62;
      }
      else if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v16, v43);
      }
    }
    if ((*(_BYTE *)(a1 + 46) & 0x20) != 0
      && (*(_WORD *)(v16 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v16 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    {
      v63 = *(_DWORD *)(v16 + 24);
      *(_DWORD *)(v16 + 24) = v63 + 2;
      if (*(_DWORD *)(*(_QWORD *)(v16 + 240) + 12) == 4)
      {
        v64 = *(_BYTE *)(v16 + 160) & 0x18;
        if (v63)
        {
          *(_DWORD *)(v16 + 24) = v63;
        }
        else if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v16, v43);
        }
        if (!v64)
        {
          v84 = *(_BYTE *)(a6 + 9) | 0x20;
LABEL_196:
          *(_BYTE *)(a6 + 9) = v84;
          goto LABEL_202;
        }
      }
      else if (v63)
      {
        *(_DWORD *)(v16 + 24) = v63;
      }
      else if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v16, v43);
      }
    }
    v65 = *(_WORD *)(v16 + 28);
    if ((v65 & 0x10) != 0
      && (v65 & 0x110) != 0x110
      && *(_QWORD *)(*(_QWORD *)(v16 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::modelTag + 24))
    {
      break;
    }
LABEL_96:
    if ((*(_WORD *)(v16 + 28) & 0x80) != 0)
    {
      v53 = *(_QWORD *)(v16 + 200);
      if (!v53)
        goto LABEL_194;
      v45 = (uint64_t *)(v53 + 8);
    }
    else
    {
      v45 = (uint64_t *)(v16 + 32);
    }
    v16 = *v45;
    if (!*v45)
      goto LABEL_194;
    v46 = *(_WORD *)(v16 + 28);
    if ((v46 & 0x80) != 0)
    {
      v68 = *(_QWORD *)(v16 + 200);
      if (!v68 || (v16 = *(_QWORD *)(v68 + 8)) == 0)
      {
LABEL_194:
        v16 = v41;
        goto LABEL_202;
      }
    }
    else if ((v46 & 8) == 0 || !v16)
    {
      goto LABEL_194;
    }
  }
  *(_DWORD *)(v16 + 24) += 2;
  if ((*(_BYTE *)(a1 + 46) & 0x40) == 0
    || (v66 = *(_QWORD *)(v16 + 248)) != 0 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v66 + 80))(v66)
    || !*(_BYTE *)(v16 + 240)
    || (v67 = *(uint64_t **)(v16 + 224)) == 0)
  {
    if (*(_DWORD *)(v16 + 24) == 2)
    {
      if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v16, v43);
    }
    else
    {
      *(_DWORD *)(v16 + 24) -= 2;
    }
    goto LABEL_96;
  }
  v77 = (*(_DWORD *)v67)++;
  if (v77)
  {
    *(_DWORD *)v67 = v77;
  }
  else
  {
    v81 = (WTF::StringImpl *)v67[3];
    v67[3] = 0;
    if (v81)
    {
      if (*(_DWORD *)v81 == 2)
        WTF::StringImpl::destroy(v81, (WTF::StringImpl *)v43);
      else
        *(_DWORD *)v81 -= 2;
    }
    v82 = (WTF::StringImpl *)v67[2];
    v67[2] = 0;
    if (v82)
    {
      if (*(_DWORD *)v82 == 2)
        WTF::StringImpl::destroy(v82, (WTF::StringImpl *)v43);
      else
        *(_DWORD *)v82 -= 2;
    }
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v67 + 1, v43);
    WTF::fastFree((WTF *)v67, v83);
  }
  v78 = *(_BYTE *)(a6 + 9) | 0x40;
LABEL_200:
  *(_BYTE *)(a6 + 9) = v78;
  v62 = *(_DWORD *)(v16 + 24) - 2;
  if (*(_DWORD *)(v16 + 24) != 2)
  {
LABEL_201:
    *(_DWORD *)(v16 + 24) = v62;
    goto LABEL_202;
  }
LABEL_218:
  if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v16, v43);
LABEL_202:
  if ((v42 & 1) == 0)
  {
    if (*(_DWORD *)(v41 + 24) == 2)
    {
      if ((*(_WORD *)(v41 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v41, v43);
    }
    else
    {
      *(_DWORD *)(v41 + 24) -= 2;
    }
  }
  return v16;
}

void WebCore::DragController::hitTestResultForDragStart(WebCore::DragController *this, WebCore::LocalFrame *a2, WebCore::Element *a3, const WebCore::IntPoint *a4, unsigned int a5)
{
  uint64_t v6;
  uint64_t v8;
  int8x8_t v9;
  void *v10;
  WebCore::Element *v11;
  BOOL v12;
  uint64_t v13;
  WebCore::Element **v14;
  char v16;
  int8x8_t v17;
  _BYTE v18[72];
  WebCore::Element *v19;

  if (*((_QWORD *)a2 + 36) && (v6 = *((_QWORD *)a2 + 37)) != 0 && *(_QWORD *)(v6 + 1944))
  {
    v8 = *((_QWORD *)a2 + 80);
    v9 = (int8x8_t)vcgt_s32((int32x2_t)__PAIR64__(a5, a4), (int32x2_t)0xFE000000FE000000);
    v17 = vorr_s8((int8x8_t)(*(_QWORD *)&v9 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)__PAIR64__(a5, a4)), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32((int32x2_t)__PAIR64__(a5, a4), 6uLL)), v9));
    WebCore::EventHandler::hitTestResultAtPoint(v8, (int *)&v17, 0x803u, (uint64_t)v18);
    v11 = v19;
    v12 = v19 != 0;
    if (v19 != a3 && v19)
    {
      do
      {
        if ((*((_WORD *)v11 + 14) & 0x80) != 0)
        {
          v13 = *((_QWORD *)v11 + 25);
          if (!v13)
            goto LABEL_19;
          v14 = (WebCore::Element **)(v13 + 8);
        }
        else
        {
          v14 = (WebCore::Element **)((char *)v11 + 32);
        }
        v11 = *v14;
        v12 = v11 != 0;
      }
      while (v11 != a3 && v11 != 0);
    }
    if (v12)
    {
      WebCore::HitTestResult::HitTestResult(this, (const WebCore::HitTestResult *)v18);
      v16 = 1;
    }
    else
    {
LABEL_19:
      v16 = 0;
      *(_BYTE *)this = 0;
    }
    *((_BYTE *)this + 136) = v16;
    WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v18, v10);
  }
  else
  {
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 136) = 0;
  }
}

uint64_t WebCore::getImage(unint64_t this, WebCore::Element *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  _BYTE v16[24];
  unsigned int **v17;

  if ((this & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_7;
  if ((*(_BYTE *)((this & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195F8D02CLL);
  }
  if ((((*(_BYTE *)((this & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3) & *(_BYTE *)((this & 0xFFFFFFFFFFFFLL) + 0x35)) != 1)
    goto LABEL_7;
  v2 = *(_DWORD *)((this & 0xFFFFFFFFFFFFLL) + 0x10);
  *(_DWORD *)((this & 0xFFFFFFFFFFFFLL) + 0x10) = v2 + 1;
  if (v2 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x195F8D04CLL);
  }
  v3 = *(_QWORD *)(*(_QWORD *)((this & 0xFFFFFFFFFFFFLL) + 0xE0) + 24);
  if (!v3)
  {
    *(_DWORD *)((this & 0xFFFFFFFFFFFFLL) + 0x10) = v2;
LABEL_7:
    v5 = 0;
    v15 = 0;
    goto LABEL_8;
  }
  v4 = *(_QWORD *)(v3 + 8);
  *(_DWORD *)((this & 0xFFFFFFFFFFFFLL) + 0x10) = v2;
  if (!v4)
    goto LABEL_7;
  v7 = *(unsigned int **)(v4 + 8);
  if (!v7)
  {
    v7 = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
    *v7 = 1;
    *((_QWORD *)v7 + 1) = v4;
    v12 = *(unsigned int **)(v4 + 8);
    *(_QWORD *)(v4 + 8) = v7;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, a2);
      }
      v7 = *(unsigned int **)(v4 + 8);
      if (!v7)
        goto LABEL_7;
    }
  }
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v15 = v7;
  v9 = *((_QWORD *)v7 + 1);
  if (v9
    && ((v17 = &v15, ++*(_DWORD *)(v9 + 548), (v10 = *(_QWORD *)(v9 + 488)) == 0)
     || !*(_QWORD *)(v10 + 8)
     || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v9 + 464), (uint64_t *)&v17, (uint64_t)v16), (v7 = v15) != 0))&& (v11 = *((_QWORD *)v7 + 1)) != 0&& (*(_WORD *)(v11 + 557) >> 5) - 3 >= 2)
  {
    v5 = *(_QWORD *)(v11 + 688);
    if (!v5)
      v5 = WebCore::Image::nullImage((WebCore::Image *)v7);
  }
  else
  {
    v5 = 0;
  }
LABEL_8:
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v15, a2);
  return v5;
}

uint64_t WebCore::DragController::startDrag(uint64_t a1, WebCore::ScrollView **a2, char a3, WTF::StringImpl **a4, int32x2_t *a5, char a6)
{
  __int128 *v6;
  WTF::StringImpl *v10;
  CFTypeRef *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  WTF::String *v17;
  __n128 v18;
  const WebCore::Node *v19;
  const WebCore::IntPoint *v20;
  unint64_t v21;
  CFTypeRef v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  __int128 v25;
  int v26;
  void *v27;
  CFTypeRef v28;
  CFTypeRef v29;
  CFTypeRef v30;
  int32x2_t *v31;
  int v32;
  uint64_t v33;
  int32x2_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t Image;
  WTF::StringImpl *v38;
  _DWORD *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WebCore::Node *v42;
  uint64_t v43;
  uint64_t v44;
  WebCore::Node *v45;
  uint64_t v46;
  _DWORD *v47;
  WebCore::Node *v48;
  uint64_t v49;
  WTF *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WebCore::Node *v53;
  const WebCore::SimpleRange *v54;
  int isInsideOverlay;
  void *v56;
  int v57;
  WebCore::Node *v58;
  WebCore::Node *v59;
  WebCore::Document *v60;
  WebCore::Editor *v61;
  unsigned int *v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t canDisplay;
  WTF::StringBuilder *v66;
  __n128 v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  __int16 v71;
  WebCore *v72;
  uint64_t v73;
  int v74;
  WebCore::ColorInputType *v75;
  uint64_t v76;
  int v77;
  int v78;
  double v79;
  CFTypeRef v80;
  void *v81;
  CFTypeRef v82;
  CFTypeRef v83;
  WebCore::DataTransfer *v84;
  int v85;
  __int16 v86;
  void *v87;
  WTF *v88;
  uint64_t v89;
  CFTypeRef v90;
  CFTypeRef v91;
  CFTypeRef v92;
  float v93;
  WebCore::Document *v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  void *v104;
  CFTypeRef v105;
  CFTypeRef v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  WTF *v109;
  WTF::StringImpl *v110;
  uint64_t v111;
  WebCore::Document *v112;
  uint64_t v113;
  uint64_t v114;
  __int16 v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WebCore::Document *v118;
  uint64_t v119;
  uint64_t v120;
  __int16 v121;
  WebCore::Document *v122;
  int *v123;
  int v124;
  int v125;
  uint64_t v126;
  WTF::StringImpl *v127;
  WebCore::Node *v128;
  uint64_t v129;
  WTF *v130;
  uint64_t v131;
  uint64_t v132;
  WebCore::Document *v133;
  WebCore::Editor *v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  WebCore::Node *v139;
  WebCore::Node *v140;
  uint64_t v141;
  uint64_t v142;
  WebCore::Document *v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  WebCore::Node *v149;
  WTF::StringImpl *v150;
  CFTypeRef v151;
  void *v152;
  CFTypeRef v153;
  CFTypeRef v154;
  CFTypeRef v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  int v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  float v177;
  float v178;
  int v179;
  int v180;
  int v181;
  int v182;
  _DWORD *v183;
  _DWORD *v184;
  _DWORD *v185;
  WTF *v186;
  void *v187;
  WTF *v188;
  uint64_t v189;
  CFTypeRef v190;
  CFTypeRef v191;
  CFTypeRef v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  int v206;
  int v207;
  float v208;
  float v209;
  int v210;
  int v211;
  WTF::StringImpl *v212;
  WTF::StringImpl *v213;
  WTF::StringImpl *v214;
  WTF::StringImpl *v215;
  WTF::StringImpl *v216;
  void *v217;
  uint64_t v218;
  unsigned int *v219;
  unsigned int v220;
  unsigned int *v221;
  unsigned int v222;
  unsigned int *v223;
  unsigned int v224;
  unsigned int *v225;
  unsigned int v226;
  _DWORD *v227;
  _DWORD *v228;
  unsigned int v229;
  _QWORD *v230;
  _DWORD **v231;
  _DWORD **v232;
  _DWORD *v233;
  unsigned int *v234;
  unsigned int v235;
  void *v236;
  void *v237;
  void *v238;
  CFTypeRef v239;
  CFTypeRef v240;
  CFTypeRef v241;
  uint64_t v242;
  WTF::StringImpl *v243;
  WTF::StringImpl *v244;
  WTF::StringImpl *v245;
  int v246;
  uint64_t *v247;
  WTF::StringImpl *v248;
  WTF::StringImpl *v249;
  WebCore::Document *v250;
  WebCore::Editor *v251;
  WTF::StringImpl *v252;
  WTF::StringImpl *v253;
  uint64_t *v254;
  unsigned int *v255;
  unsigned int v256;
  WTF *v257;
  unsigned int v258;
  unsigned int v259;
  WTF::StringImpl *v260;
  CGImage *v261;
  unsigned int v262;
  unsigned int v263;
  void *v264;
  WTF *v265;
  uint64_t v266;
  CFTypeRef v267;
  CFTypeRef v268;
  WTF::StringImpl *v269;
  CFTypeRef v270;
  uint64_t v271;
  int32x2_t *v272;
  uint64_t v273;
  int v274;
  WTF::StringImpl *v275;
  WTF::StringImpl *v276;
  WTF::StringImpl *v277;
  WTF::StringImpl *v278;
  WTF::StringImpl *v279;
  WTF::StringImpl *v280;
  WTF::StringImpl *v281;
  WTF::StringImpl *v282;
  uint64_t v283;
  uint64_t v284;
  unsigned int v285;
  void *v286;
  int v287;
  uint64_t v288;
  void *v289;
  WebCore::VisibleSelection *v290;
  uint64_t v291;
  int v292;
  void *v293;
  CFTypeRef v294;
  void *v295;
  CFTypeRef v296;
  CFTypeRef v297;
  void *v298;
  int Width;
  int v300;
  CFTypeRef v301;
  void *v302;
  CFTypeRef v303;
  CFTypeRef v304;
  char v305;
  WebCore::Element *v306;
  unint64_t v307;
  int32x2_t v308;
  unint64_t v309;
  WebCore::Element *v310;
  uint64_t v311;
  __int16 v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t v315;
  uint64_t v316;
  void *v317;
  _DWORD *v318;
  void *v319;
  uint64_t v320;
  CFTypeRef v321;
  CFTypeRef v322;
  CFTypeRef v323;
  CFTypeRef v324;
  void *v325;
  CFTypeRef v326;
  CFTypeRef v327;
  CFTypeRef v328;
  CGImage *v329;
  int v330;
  CFTypeRef v331;
  void *v332;
  CFTypeRef v333;
  CFTypeRef v334;
  CFTypeRef v335;
  void *v336;
  CFTypeRef v337;
  CFTypeRef v338;
  float v339;
  __int32 v340;
  int v341;
  int v342;
  CFTypeRef v343;
  void *v344;
  CFTypeRef v345;
  CFTypeRef v346;
  CFTypeRef v347;
  int v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  void *v352;
  float v353;
  float v354;
  float v355;
  float v356;
  float v357;
  float v358;
  float v359;
  float v360;
  float v361;
  float v362;
  float v363;
  float v364;
  float v365;
  int v366;
  uint64_t v367;
  int v368;
  uint64_t v369;
  float v370;
  float v371;
  int v372;
  int v373;
  int v374;
  int v375;
  _DWORD *v376;
  _DWORD *v377;
  _DWORD *v378;
  WTF *v379;
  void *v380;
  CFTypeRef v381;
  CFTypeRef v382;
  void *v383;
  uint64_t v384;
  int v385;
  WebCore::Document *v386;
  uint64_t v387;
  int v388;
  uint64_t v389;
  WTF *v390;
  uint64_t v391;
  CFTypeRef v392;
  uint64_t v393;
  int v394;
  uint64_t v395;
  uint64_t v396;
  void *v397;
  CFTypeRef v398;
  CFTypeRef v399;
  CFTypeRef v400;
  CGImage *v401;
  unsigned int v402;
  unsigned int v403;
  void *v404;
  WTF *v405;
  uint64_t v406;
  CFTypeRef v407;
  CFTypeRef v408;
  CFTypeRef v409;
  WebCore::Node *v410;
  WTF::StringImpl *v411;
  WTF::StringImpl *v412;
  void *v413;
  WTF::StringImpl *v414;
  WTF::StringImpl *v415;
  void *v416;
  int v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  _DWORD *v421;
  _DWORD *v422;
  _DWORD *v423;
  WTF *v424;
  void *v425;
  WTF *v426;
  uint64_t v427;
  CFTypeRef v428;
  CFTypeRef v429;
  WTF::StringImpl *v430;
  CFTypeRef v431;
  void *v432;
  int Height;
  WTF::StringImpl *v434;
  WTF::StringImpl *v435;
  WTF::StringImpl *v436;
  WTF::StringImpl *v437;
  WTF::StringImpl *v438;
  void *v439;
  uint64_t v440;
  unsigned int *v441;
  unsigned int v442;
  unsigned int *v443;
  unsigned int v444;
  unsigned int *v445;
  unsigned int v446;
  unsigned int *v447;
  unsigned int v448;
  _DWORD *v449;
  _DWORD *v450;
  unsigned int v451;
  _QWORD *v452;
  _DWORD **v453;
  _DWORD **v454;
  _DWORD *v455;
  unsigned int *v456;
  unsigned int v457;
  void *v458;
  void *v459;
  WTF::StringImpl *v460;
  _OWORD *v461;
  WTF *v462;
  uint64_t v463;
  __int128 v464;
  WTF::StringImpl *v465;
  WTF::StringImpl *v466;
  uint64_t v467;
  uint64_t v468;
  int v469;
  uint64_t v470;
  int v471;
  WTF::StringImpl *v472;
  WTF::StringImpl *v473;
  CFTypeRef v474;
  WTF::StringImpl *v475;
  CFTypeRef v476;
  WTF::StringImpl *v477;
  WTF::StringImpl *v478;
  unsigned int v479;
  unsigned int v480;
  WTF *v482;
  void *v483;
  _QWORD *v484;
  CFTypeRef v485;
  _OWORD *v486;
  WTF *v487;
  uint64_t v488;
  __int128 v489;
  WebCore::Editor *v490;
  WebCore::Editor *v491;
  uint64_t v492;
  WebCore::Editor *v493;
  void *v494;
  WebCore::Editor *v495;
  uint64_t v496;
  void *v497;
  _OWORD *v498;
  WTF *v499;
  uint64_t v500;
  __int128 v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  unsigned int *v505;
  unsigned int v506;
  unsigned int v507;
  uint64_t v508;
  WTF *v509;
  void *v511;
  unsigned int *v512;
  unsigned int v513;
  WebCore::Editor *v514;
  void *v515;
  WebCore::Editor *v516;
  uint64_t v517;
  void *v518;
  WebCore::Editor *v519;
  void *v520;
  WebCore::Editor *v521;
  uint64_t v522;
  void *v523;
  WebCore::Editor *v524;
  WebCore::Editor *v525;
  uint64_t v526;
  WebCore::Editor *v527;
  WebCore::Editor *v528;
  uint64_t v529;
  WebCore::Editor *v530;
  void *v531;
  WebCore::Editor *v532;
  uint64_t v533;
  void *v534;
  WebCore::Editor *v535;
  void *v536;
  WebCore::Editor *v537;
  uint64_t v538;
  void *v539;
  WebCore::Editor *v540;
  void *v541;
  WebCore::Editor *v542;
  uint64_t v543;
  void *v544;
  WebCore::Editor *v545;
  void *v546;
  WebCore::Editor *v547;
  uint64_t v548;
  void *v549;
  WebCore::Editor *v550;
  void *v551;
  WebCore::Editor *v552;
  uint64_t v553;
  void *v554;
  unsigned int *v555;
  unsigned int v556;
  unsigned int *v557;
  unsigned int v558;
  uint64_t v559;
  unsigned int v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t *v563;
  unint64_t v564;
  void *v565;
  void *v566;
  CFTypeRef v567;
  CFTypeRef v568;
  WTF::StringImpl *v569;
  CFTypeRef v570;
  void *v571;
  CFTypeRef v572;
  CFTypeRef v573;
  CGImage *v574;
  int v575;
  unsigned int *v576;
  unsigned int v577;
  unsigned int v578;
  unsigned int *v579;
  unsigned int v580;
  unsigned int v581;
  unsigned int *v582;
  unsigned int v583;
  unsigned int v584;
  unsigned int *v585;
  unsigned int v586;
  unsigned int v587;
  unsigned int *v588;
  unsigned int v589;
  unsigned int v590;
  unint64_t v591;
  uint64_t v592;
  int v593;
  __int32 v594;
  WebCore::DataTransfer *v595;
  int32x2_t *v596;
  WebCore *v597;
  uint64_t v598;
  CFTypeRef v599;
  CFTypeRef v600;
  CFTypeRef v601;
  CFTypeRef v602;
  WTF::StringImpl *v603;
  __int128 v604;
  __int128 v605;
  WTF::StringImpl *v606;
  WTF::StringImpl *v607;
  CFTypeRef v608;
  WTF::StringImpl *v609[2];
  WebCore::Node *v610[2];
  __int128 v611;
  WTF *v612[2];
  uint64_t v613;
  __int128 v614;
  __int128 v615;
  int v616;
  CFTypeRef v617[2];
  WebCore::Node *v618;
  char v619;
  CFTypeRef cf;
  unint64_t v621;
  unint64_t v622;
  unint64_t v623;
  WTF::StringImpl *v624;
  __int128 v625;
  __int128 v626;
  WTF::StringImpl *v627;
  __int128 v628;
  __int128 v629;
  WebCore::ImageOverlay *v630[13];
  WebCore::Node *v631;
  char v632;
  WebCore::Element *v633;
  unsigned int *v634;
  CFTypeRef v635;
  char v636;
  CFTypeRef v637;
  uint64_t v638;
  uint64_t v639;
  int v640;
  char v641;
  CFTypeRef v642;
  uint64_t v643;
  uint64_t v644;
  int v645;
  char v646;
  CFTypeRef v647;
  uint64_t v648;
  uint64_t v649;
  int v650;
  char v651;
  CFTypeRef v652;
  uint64_t v653;
  uint64_t v654;
  int v655;
  char v656;
  _BYTE v657[512];
  CFTypeRef v658;
  uint64_t v659;
  uint64_t v660;
  int v661;
  char v662;
  CFTypeRef v663;
  uint64_t v664;
  uint64_t v665;
  int v666;
  char v667;
  _BYTE v668[512];
  CFTypeRef v669[2];
  WebCore::Node *v670;
  __int128 v671;
  int v672;
  char v673;
  WTF *v674[2];
  WTF::StringImpl *v675[2];
  WTF::StringImpl *v676[2];
  uint64_t v677;
  char v678;
  char v679;
  _BYTE v680[56];
  int v681;
  char v682;
  float32x2_t v683;
  __int16 v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  _QWORD v689[5];
  uint64_t v690;
  uint64_t v691;
  char v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  char v696;
  WTF::StringImpl *v697;
  unsigned __int8 v698;
  _BYTE v699[48];
  char v700;
  uint64_t v701;
  char v702;
  unsigned int *v703;
  unsigned int *v704;
  unsigned int *v705;
  unsigned int *v706;
  _DWORD *v707;
  _DWORD *v708;
  _QWORD *v709;
  unsigned int v710;
  unsigned int v711;
  char v712;
  CFTypeRef v713;
  uint64_t v714;
  uint64_t v715;
  int v716;
  char v717;
  CFTypeRef v718;
  __int128 v719;
  __int128 v720;
  __int128 v721;
  _OWORD *v722;
  int v723;
  int v724;
  int v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  int v730;
  char v731;
  char v732;
  _BYTE v733[56];
  int v734;
  char v735;
  CFTypeRef v736[2];
  __int128 v737;
  __int128 v738;
  WTF *v739[2];
  int v740;
  __int128 v741;
  __int128 v742;
  unsigned int *v743;
  unsigned int *v744;
  unsigned int *v745;
  _DWORD *v746;
  _DWORD *v747;
  _DWORD **v748;
  unsigned int v749;
  char v750;
  int v751;
  char v752;
  uint64_t v753;

  v753 = *MEMORY[0x1E0C80C00];
  v6 = (__int128 *)&unk_1EE2F7000;
  if (!(_QWORD)WebCore::EventHandler::dragState(void)::state)
    return 0;
  LOBYTE(v10) = a3;
  v13 = v669;
  v14 = (unsigned int *)(a2 + 1);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  WebCore::DragController::hitTestResultForDragStart((WebCore::DragController *)v630, (WebCore::LocalFrame *)a2, (WebCore::Element *)WebCore::EventHandler::dragState(void)::state, (const WebCore::IntPoint *)a5->u32[0], a5->u32[1]);
  if (!v632)
  {
    v35 = 0;
    goto LABEL_1065;
  }
  WebCore::HitTestResult::absoluteLinkURL((WebCore::HitTestResult *)v630, v16, v17, (uint64_t)&v627, v18);
  if (!v632)
    goto LABEL_989;
  WebCore::HitTestResult::absoluteImageURL((WebCore::HitTestResult *)v630, v19, (uint64_t)&v624);
  v21 = WebCore::ScrollView::windowToContents(a2[36], (const WebCore::IntPoint *)((char *)a4 + 52), v20);
  HIDWORD(a4) = HIDWORD(v21);
  v623 = v21;
  v669[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v669);
  v22 = v669[0];
  v669[0] = 0;
  v23 = *(WTF::StringImpl **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v22;
  v596 = a5;
  v597 = (WebCore *)a2;
  if (!v23)
    goto LABEL_990;
  if (*(_DWORD *)v23 == 2)
  {
    WTF::StringImpl::destroy(v23, v19);
    v24 = (WTF::StringImpl *)v669[0];
  }
  else
  {
    v24 = 0;
    *(_DWORD *)v23 -= 2;
  }
  while (1)
  {
    v25 = *(_OWORD *)(v13 + 1);
    *(_OWORD *)(a1 + 72) = v25;
    v13 = (CFTypeRef *)(a1 + 72);
    LODWORD(v669[1]) = v25 & 0xFFFFFFFE;
    *(_OWORD *)(a1 + 88) = v671;
    v669[0] = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v19);
      else
        *(_DWORD *)v24 -= 2;
    }
    v598 = a1;
    *(_BYTE *)(a1 + 48) = (_BYTE)v10;
    v718 = 0;
    LOBYTE(v719) = 0;
    v731 = 0;
    v732 = 0;
    v735 = 0;
    v621 = 0;
    v622 = 0;
    a1 = qword_1EE2F7E10;
    ++*(_DWORD *)qword_1EE2F7E10;
    v26 = BYTE9(WebCore::EventHandler::dragState(void)::state);
    v10 = (WTF::StringImpl *)&unk_1EE2F7000;
    if (BYTE9(WebCore::EventHandler::dragState(void)::state) == 1)
    {
      WebCore::DataTransfer::createDragImage((WebCore::DataTransfer *)a1, (WebCore::IntPoint *)&v621, &cf);
      v669[0] = cf;
      if (cf)
        CFRetain(cf);
      LOBYTE(v669[1]) = 0;
      v678 = 0;
      v679 = 0;
      v682 = 0;
      WebCore::DragImage::operator=((uint64_t)&v718, (uint64_t *)v669);
      v28 = v669[0];
      if (v669[0])
      {
        CFRetain(v669[0]);
        CFRelease(v28);
      }
      if (v682)
      {
        if (v681 != -1)
          ((void (*)(CFTypeRef *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_4[v681])(v736, v680);
        v681 = -1;
      }
      std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v669[1], v27);
      v29 = v669[0];
      v669[0] = 0;
      if (v29)
        CFRelease(v29);
      v30 = cf;
      cf = 0;
      if (v30)
        CFRelease(v30);
      if (!v718)
        goto LABEL_30;
      if (v627)
      {
        v32 = v621;
        if (*((_DWORD *)v627 + 1))
        {
          v33 = (HIDWORD(a4) - HIDWORD(v621));
          v34 = (int32x2_t *)&v623;
          goto LABEL_29;
        }
        v31 = v596;
        v33 = (v596->i32[1] - HIDWORD(v621));
      }
      else
      {
        v31 = v596;
        v32 = v621;
        v33 = (v596->i32[1] - HIDWORD(v621));
      }
      v34 = v31;
LABEL_29:
      v622 = (v34->i32[0] - v32) | (unint64_t)(v33 << 32);
      *(_QWORD *)(v598 + 52) = v621;
LABEL_30:
      v26 = BYTE9(WebCore::EventHandler::dragState(void)::state);
    }
    if (v26 == 8 || v624 && *((_DWORD *)v624 + 1) || v627 && *((_DWORD *)v627 + 1))
      *(_BYTE *)(v598 + 48) |= 5u;
    v36 = *((_QWORD *)v6 + 448);
    *(_DWORD *)(v36 + 24) += 2;
    if ((a6 & 1) != 0)
      v593 = 1;
    else
      v593 = (***(uint64_t (****)(_QWORD))(v598 + 8))(*(_QWORD *)(v598 + 8));
    Image = WebCore::getImage(*(_QWORD *)(v36 + 64), v19);
    v39 = (_DWORD *)Image;
    if (Image)
      ++*(_DWORD *)(Image + 8);
    v595 = (WebCore::DataTransfer *)a1;
    if (BYTE9(WebCore::EventHandler::dragState(void)::state) == 8)
      break;
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*((_QWORD *)v597 + 37) + 192), v38);
    v63 = v62;
    if (v62)
    {
      do
        v64 = __ldaxr(v62);
      while (__stlxr(v64 + 1, v62));
    }
    {
      WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
    }
    canDisplay = WebCore::SecurityOrigin::canDisplay((uint64_t)v62, (WTF::URL *)&v627, (uint64_t (***)(_QWORD, WebCore::SecurityOrigin *))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance);
    a4 = (WTF::StringImpl **)canDisplay;
    if (v63)
    {
      do
      {
        v68 = __ldaxr(v63);
        v69 = v68 - 1;
      }
      while (__stlxr(v69, v63));
      if (!v69)
      {
        atomic_store(1u, v63);
        v465 = (WTF::StringImpl *)*((_QWORD *)v63 + 6);
        *((_QWORD *)v63 + 6) = 0;
        if (v465)
        {
          if (*(_DWORD *)v465 == 2)
            WTF::StringImpl::destroy(v465, v19);
          else
            *(_DWORD *)v465 -= 2;
        }
        v466 = (WTF::StringImpl *)*((_QWORD *)v63 + 5);
        *((_QWORD *)v63 + 5) = 0;
        if (v466)
        {
          if (*(_DWORD *)v466 == 2)
            WTF::StringImpl::destroy(v466, v19);
          else
            *(_DWORD *)v466 -= 2;
        }
        v467 = v63[8];
        if ((_DWORD)v467 != -1)
          ((void (*)(CFTypeRef *, unsigned int *))off_1E33FE860[v467])(v669, v63 + 2);
        v63[8] = -1;
        WTF::fastFree((WTF *)v63, v19);
        if ((a4 & 1) != 0)
          goto LABEL_92;
LABEL_1024:
        v468 = *((_QWORD *)v597 + 37);
        a1 = (uint64_t)v595;
        if (v468)
          *(_DWORD *)(v468 + 24) += 2;
        WTF::URL::stringCenterEllipsizedToLength((WTF::URL *)&v627);
        if (v607)
        {
          v469 = *((_DWORD *)v607 + 1);
          if (v469 < 0 || (v470 = (v469 + 36), __OFADD__(v469, 36)))
          {
            v669[0] = 0;
            goto LABEL_1258;
          }
          v471 = (*((unsigned __int8 *)v607 + 16) >> 2) & 1;
        }
        else
        {
          v471 = 1;
          v470 = 36;
        }
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v470, v471, (int8x16_t *)"Not allowed to drag local resource: ", 0x24u, (uint64_t)v607, v669);
        if (v669[0])
        {
          WebCore::Document::addConsoleMessage((_QWORD *)v468, 8, 2, (WTF::StringImpl **)v669, 0);
          v472 = (WTF::StringImpl *)v669[0];
          v669[0] = 0;
          if (v472)
          {
            if (*(_DWORD *)v472 == 2)
              WTF::StringImpl::destroy(v472, v19);
            else
              *(_DWORD *)v472 -= 2;
          }
          v473 = v607;
          v607 = 0;
          if (v473)
          {
            if (*(_DWORD *)v473 == 2)
            {
              WTF::StringImpl::destroy(v473, v19);
              if (v468)
                goto LABEL_1038;
              goto LABEL_1081;
            }
            *(_DWORD *)v473 -= 2;
          }
          if (v468)
          {
LABEL_1038:
            if (*(_DWORD *)(v468 + 24) != 2)
            {
              v35 = 0;
              *(_DWORD *)(v468 + 24) -= 2;
              goto LABEL_1040;
            }
            if ((*(_WORD *)(v468 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v468, v19);
          }
LABEL_1081:
          v35 = 0;
          goto LABEL_1040;
        }
LABEL_1258:
        __break(0xC471u);
        JUMPOUT(0x195F91C38);
      }
    }
    if ((canDisplay & 1) == 0)
      goto LABEL_1024;
LABEL_92:
    a1 = (uint64_t)v595;
    if (!v624
      || !v39
      || !*((_DWORD *)v624 + 1)
      || (v67.n128_f32[0] = (*(float (**)(_DWORD *, _QWORD))(*(_QWORD *)v39 + 168))(v39, 0),
          v67.n128_f32[0] <= 0.0)
      || v93 <= 0.0
      || (*(_BYTE *)(v598 + 46) & 2) == 0)
    {
      if (v627 && *((_DWORD *)v627 + 1) && (*(_BYTE *)(v598 + 46) & 4) != 0)
      {
        LOBYTE(v736[0]) = 0;
        LOBYTE(v737) = 0;
        BYTE8(v737) = 0;
        LOBYTE(v741) = 0;
        BYTE8(v741) = 0;
        v750 = 0;
        v13 = (CFTypeRef *)v597;
        if (!v632)
          goto LABEL_989;
        if (v631)
          WebCore::Node::textContent(v631, 0, v66, (WTF::StringImpl **)v669, v67);
        else
          v669[0] = 0;
        WTF::String::simplifyWhiteSpace();
        v249 = (WTF::StringImpl *)v669[0];
        v669[0] = 0;
        if (v249)
        {
          if (*(_DWORD *)v249 == 2)
          {
            WTF::StringImpl::destroy(v249, v248);
            if ((a6 & 1) == 0)
              goto LABEL_476;
            goto LABEL_549;
          }
          *(_DWORD *)v249 -= 2;
        }
        if ((a6 & 1) == 0)
        {
LABEL_476:
          v250 = (WebCore::Document *)*((_QWORD *)v597 + 37);
          v251 = (WebCore::Editor *)*((_QWORD *)v250 + 382);
          if (!v251)
          {
            v545 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
            WebCore::Editor::Editor(v545, v250);
            v547 = (WebCore::Editor *)*((_QWORD *)v250 + 382);
            *((_QWORD *)v250 + 382) = v545;
            if (v547)
            {
              WebCore::Editor::~Editor(v547, v546);
              if (*(_DWORD *)v548)
              {
                *(_QWORD *)(v548 + 496) = 0;
                *(_OWORD *)(v548 + 464) = 0u;
                *(_OWORD *)(v548 + 480) = 0u;
                *(_OWORD *)(v548 + 432) = 0u;
                *(_OWORD *)(v548 + 448) = 0u;
                *(_OWORD *)(v548 + 400) = 0u;
                *(_OWORD *)(v548 + 416) = 0u;
                *(_OWORD *)(v548 + 368) = 0u;
                *(_OWORD *)(v548 + 384) = 0u;
                *(_OWORD *)(v548 + 336) = 0u;
                *(_OWORD *)(v548 + 352) = 0u;
                *(_OWORD *)(v548 + 304) = 0u;
                *(_OWORD *)(v548 + 320) = 0u;
                *(_OWORD *)(v548 + 272) = 0u;
                *(_OWORD *)(v548 + 288) = 0u;
                *(_OWORD *)(v548 + 240) = 0u;
                *(_OWORD *)(v548 + 256) = 0u;
                *(_OWORD *)(v548 + 208) = 0u;
                *(_OWORD *)(v548 + 224) = 0u;
                *(_OWORD *)(v548 + 176) = 0u;
                *(_OWORD *)(v548 + 192) = 0u;
                *(_OWORD *)(v548 + 144) = 0u;
                *(_OWORD *)(v548 + 160) = 0u;
                *(_OWORD *)(v548 + 112) = 0u;
                *(_OWORD *)(v548 + 128) = 0u;
                *(_OWORD *)(v548 + 80) = 0u;
                *(_OWORD *)(v548 + 96) = 0u;
                *(_OWORD *)(v548 + 48) = 0u;
                *(_OWORD *)(v548 + 64) = 0u;
                *(_OWORD *)(v548 + 16) = 0u;
                *(_OWORD *)(v548 + 32) = 0u;
                *(_OWORD *)v548 = 0u;
              }
              else
              {
                WTF::fastFree((WTF *)v548, v549);
              }
            }
            v251 = (WebCore::Editor *)*((_QWORD *)v250 + 382);
            a1 = (uint64_t)v595;
            v13 = (CFTypeRef *)v597;
          }
          if (v593)
          {
            WebCore::Editor::copyURL(v251, (const WTF::URL *)&v627, (WTF::StringImpl **)v617, *(WebCore::Pasteboard **)(a1 + 32));
          }
          else
          {
            v603 = 0;
            WTF::URL::invalidate((WTF::URL *)&v603);
            v606 = 0;
            v276 = v627;
            if (v627)
              *(_DWORD *)v627 += 2;
            v277 = v603;
            v603 = v276;
            if (v277)
            {
              if (*(_DWORD *)v277 == 2)
                WTF::StringImpl::destroy(v277, v275);
              else
                *(_DWORD *)v277 -= 2;
            }
            v604 = v628;
            v605 = v629;
            v278 = (WTF::StringImpl *)v617[0];
            if (v617[0])
              *(_DWORD *)v617[0] += 2;
            v279 = v606;
            v606 = v278;
            if (v279)
            {
              if (*(_DWORD *)v279 == 2)
                WTF::StringImpl::destroy(v279, v275);
              else
                *(_DWORD *)v279 -= 2;
            }
            std::optional<WebCore::PasteboardWriterData::URLData>::operator=[abi:sn180100]<WebCore::PasteboardWriterData::URLData,void>((uint64_t)&v737 + 8, (uint64_t *)&v603);
            v281 = v606;
            v606 = 0;
            if (v281)
            {
              if (*(_DWORD *)v281 == 2)
                WTF::StringImpl::destroy(v281, v280);
              else
                *(_DWORD *)v281 -= 2;
            }
            v282 = v603;
            v603 = 0;
            if (v282)
            {
              if (*(_DWORD *)v282 == 2)
                WTF::StringImpl::destroy(v282, v280);
              else
                *(_DWORD *)v282 -= 2;
            }
          }
        }
LABEL_549:
        v283 = *((_QWORD *)v13[37] + 383);
        if (*(_BYTE *)(v283 + 153) == 1)
        {
          v284 = *(_QWORD *)(v283 + 120);
          if (v284)
          {
            v285 = *(_BYTE *)(v283 + 132) & 7;
            if (v285 <= 4 && (((1 << v285) & 0x19) != 0 || (v284 = *(_QWORD *)(v284 + 32)) != 0))
            {
              *(_DWORD *)(v284 + 24) += 2;
              v287 = WebCore::Node::computeEditability(v284, 0, 0);
              if (*(_DWORD *)(v284 + 24) == 2)
              {
                if ((*(_WORD *)(v284 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v284, v286);
              }
              else
              {
                *(_DWORD *)(v284 + 24) -= 2;
              }
              if (v287)
              {
                v288 = *(_QWORD *)(v283 + 88);
                if (v288)
                  *(_DWORD *)(v288 + 24) += 2;
                v609[0] = (WTF::StringImpl *)v288;
                LODWORD(v609[1]) = *(_DWORD *)(v283 + 96);
                BYTE4(v609[1]) = *(_BYTE *)(v283 + 100);
                WebCore::enclosingAnchorElement((uint64_t *)v609, &v635);
                v290 = (WebCore::VisibleSelection *)v635;
                if (v635)
                {
                  v291 = *((_QWORD *)v13[37] + 383);
                  ++*(_DWORD *)(v291 + 28);
                  WebCore::VisibleSelection::selectionFromContentsOfNode(v290, (WebCore::VisibleSelection *)v669);
                  WebCore::FrameSelection::setSelection(v291, (uint64_t)v669, 6u, 0, 0, 0, 0);
                  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v669);
                  v292 = *(_DWORD *)(v291 + 28);
                  if (!v292)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195F91480);
                  }
                  *(_DWORD *)(v291 + 28) = v292 - 1;
                  if (*((_DWORD *)v290 + 6) == 2)
                  {
                    if ((*((_WORD *)v290 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v290, v289);
                  }
                  else
                  {
                    *((_DWORD *)v290 + 6) -= 2;
                  }
                }
                if (v288)
                {
                  if (*(_DWORD *)(v288 + 24) == 2)
                  {
                    if ((*(_WORD *)(v288 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v288, v289);
                  }
                  else
                  {
                    *(_DWORD *)(v288 + 24) -= 2;
                  }
                }
              }
            }
          }
        }
        a1 = (uint64_t)v595;
        (*(void (**)(_QWORD, uint64_t, int32x2_t *, WebCore::DataTransfer *))(**(_QWORD **)(v598 + 8) + 16))(*(_QWORD *)(v598 + 8), 4, v596, v595);
        if (!v718)
        {
          v611 = 0u;
          *(_OWORD *)v612 = 0u;
          *(_OWORD *)v609 = 0u;
          *(_OWORD *)v610 = 0u;
          LODWORD(v613) = 1065353216;
          HIWORD(v616) = 0;
          v614 = 0u;
          v615 = 0u;
          LOBYTE(v616) = 0;
          WebCore::createDragImageForLink(v36, (uint64_t)v609, &v602);
          v669[0] = v602;
          if (v602)
            CFRetain(v602);
          LOBYTE(v669[1]) = 0;
          v678 = 0;
          v679 = 0;
          v682 = 0;
          WebCore::DragImage::operator=((uint64_t)&v718, (uint64_t *)v669);
          v294 = v669[0];
          if (v669[0])
          {
            CFRetain(v669[0]);
            CFRelease(v294);
          }
          a1 = (uint64_t)v595;
          if (v682)
          {
            if (v681 != -1)
              ((void (*)(CFTypeRef *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_4[v681])(&v635, v680);
            v681 = -1;
          }
          std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v669[1], v293);
          v296 = v669[0];
          v669[0] = 0;
          if (v296)
            CFRelease(v296);
          v297 = v602;
          v602 = 0;
          if (v297)
            CFRelease(v297);
          v298 = (void *)v718;
          if (v718)
          {
            CFRetain(v718);
            CFRetain(v298);
            Width = CGImageGetWidth((CGImageRef)v298);
            CGImageGetHeight((CGImageRef)v298);
            CFRelease(v298);
            if (Width >= 0)
              v300 = Width;
            else
              v300 = Width + 1;
            *(_QWORD *)(v598 + 52) = -(v300 >> 1) | 0xFFFFFFFE00000000;
            CFRelease(v298);
            v622 = (v596->i32[0] + *(_DWORD *)(v598 + 52)) | ((unint64_t)(v596->i32[1] + *(_DWORD *)(v598 + 56)) << 32);
            v301 = v718;
            if (v718)
            {
              CFRetain(v718);
              v669[0] = v301;
              CFRetain(v301);
            }
            else
            {
              v669[0] = 0;
            }
            LOBYTE(v669[1]) = 0;
            v678 = 0;
            v679 = 0;
            v682 = 0;
            WebCore::DragImage::operator=((uint64_t)&v718, (uint64_t *)v669);
            v303 = v669[0];
            if (v669[0])
            {
              CFRetain(v669[0]);
              CFRelease(v303);
            }
            a1 = (uint64_t)v595;
            if (v682)
            {
              if (v681 != -1)
                ((void (*)(CFTypeRef *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_4[v681])(&v635, v680);
              v681 = -1;
            }
            std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v669[1], v302);
            v304 = v669[0];
            v669[0] = 0;
            if (v304)
              CFRelease(v304);
            if (v301)
              CFRelease(v301);
            if ((_QWORD)v615)
            {
              if (v731)
              {
                WebCore::TextIndicatorData::operator=((uint64_t)&v719, (__int128 *)v609);
              }
              else
              {
                v719 = *(_OWORD *)v609;
                v720 = *(_OWORD *)v610;
                v721 = v611;
                v417 = HIDWORD(v612[1]);
                v723 = 0;
                v722 = 0;
                v724 = HIDWORD(v612[1]);
                if (HIDWORD(v612[1]))
                {
                  if (HIDWORD(v612[1]) >> 28)
                  {
                    __break(0xC471u);
LABEL_1293:
                    JUMPOUT(0x195F90F6CLL);
                  }
                  v498 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * HIDWORD(v612[1])));
                  v723 = v417;
                  v722 = v498;
                  a1 = (uint64_t)v595;
                  v13 = (CFTypeRef *)v597;
                  if (HIDWORD(v612[1]))
                  {
                    v499 = v612[0];
                    v500 = 16 * HIDWORD(v612[1]);
                    do
                    {
                      v501 = *(_OWORD *)v499;
                      v499 = (WTF *)((char *)v499 + 16);
                      *v498++ = v501;
                      v500 -= 16;
                    }
                    while (v500);
                  }
                }
                v725 = v613;
                v418 = v614;
                if ((_QWORD)v614)
                  ++*(_DWORD *)(v614 + 8);
                v726 = v418;
                v419 = *((_QWORD *)&v614 + 1);
                if (*((_QWORD *)&v614 + 1))
                  ++*(_DWORD *)(*((_QWORD *)&v614 + 1) + 8);
                v727 = v419;
                v420 = v615;
                if ((_QWORD)v615)
                  ++*(_DWORD *)(v615 + 8);
                v728 = v420;
                v729 = *((_QWORD *)&v615 + 1);
                if ((*((_QWORD *)&v615 + 1) & 0x8000000000000) != 0)
                {
                  v557 = (unsigned int *)(*((_QWORD *)&v615 + 1) & 0xFFFFFFFFFFFFLL);
                  do
                    v558 = __ldaxr(v557);
                  while (__stlxr(v558 + 1, v557));
                }
                v730 = v616;
                v731 = 1;
              }
            }
          }
          if ((*((_QWORD *)&v615 + 1) & 0x8000000000000) != 0)
          {
            v585 = (unsigned int *)(*((_QWORD *)&v615 + 1) & 0xFFFFFFFFFFFFLL);
            do
            {
              v586 = __ldaxr(v585);
              v587 = v586 - 1;
            }
            while (__stlxr(v587, v585));
            a1 = (uint64_t)v595;
            v13 = (CFTypeRef *)v597;
            if (!v587)
            {
              atomic_store(1u, v585);
              WTF::fastFree((WTF *)v585, v295);
            }
          }
          v421 = (_DWORD *)v615;
          *(_QWORD *)&v615 = 0;
          if (v421)
          {
            if (v421[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v421 + 8))(v421);
            else
              --v421[2];
          }
          v422 = (_DWORD *)*((_QWORD *)&v614 + 1);
          *((_QWORD *)&v614 + 1) = 0;
          if (v422)
          {
            if (v422[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v422 + 8))(v422);
            else
              --v422[2];
          }
          v423 = (_DWORD *)v614;
          *(_QWORD *)&v614 = 0;
          if (v423)
          {
            if (v423[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v423 + 8))(v423);
            else
              --v423[2];
          }
          v424 = v612[0];
          if (v612[0])
          {
            v612[0] = 0;
            LODWORD(v612[1]) = 0;
            WTF::fastFree(v424, v295);
          }
        }
        if (v593)
        {
          WebCore::DragImage::DragImage((uint64_t)&v658, (uint64_t)&v718);
          v669[1] = 0;
          v669[0] = 0;
          v670 = 0;
          WebCore::DragController::doSystemDrag(v598, &v658, (const WebCore::IntPoint *)&v622, v596, v13, (uint64_t)v669);
          v426 = (WTF *)v669[1];
          if (HIDWORD(v670))
          {
            v427 = 16 * HIDWORD(v670);
            v428 = v669[1];
            do
            {
              v428 = (CFTypeRef)(std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>::~pair((uint64_t)v428, v425)+ 16);
              v427 -= 16;
            }
            while (v427);
          }
          if (v426)
            WTF::fastFree(v426, v425);
          if (v669[0])
          {
            if (*(_DWORD *)v669[0] == 2)
              WTF::StringImpl::destroy((WTF::StringImpl *)v669[0], (WTF::StringImpl *)v425);
            else
              *(_DWORD *)v669[0] -= 2;
          }
          v429 = v658;
          if (v658)
          {
            CFRetain(v658);
            CFRelease(v429);
          }
          if (v662)
          {
            if (v661 != -1)
              ((void (*)(CFTypeRef *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_4[v661])(v669, &v660);
            v661 = -1;
          }
          std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v659, v425);
          v431 = v658;
          v658 = 0;
          if (v431)
            CFRelease(v431);
        }
        else
        {
          v669[0] = 0;
          LOBYTE(v669[1]) = 0;
          v678 = 0;
          v679 = 0;
          v682 = 0;
          v683 = 0;
          v684 = 0;
          v685 = 0;
          v687 = 0;
          v686 = 0;
          v689[0] = 0;
          v688 = 0;
          WTF::URL::invalidate((WTF::URL *)v689);
          v691 = 0;
          v690 = 0;
          v692 = 0;
          v698 = 0;
          v699[0] = 0;
          v700 = 0;
          LOBYTE(v701) = 0;
          v712 = 0;
          v695 = 0;
          v693 = 0;
          v694 = 0;
          v696 = 0;
          v432 = (void *)v718;
          if (v718)
          {
            CFRetain(v718);
            CFRetain(v432);
            CGImageGetWidth((CGImageRef)v432);
            Height = CGImageGetHeight((CGImageRef)v432);
            CFRelease(v432);
            v683.i32[0] = 1056964608;
            v683.f32[1] = (float)((Height - 2) / Height);
            CFRelease(v432);
          }
          else
          {
            v683 = 0;
          }
          WebCore::DragImage::operator=((uint64_t)v669, (uint64_t *)&v718);
          if (v698 == v737)
          {
            a1 = (uint64_t)v595;
            if (v698)
            {
              v696 = (char)v736[0];
              v435 = (WTF::StringImpl *)v736[1];
              if (v736[1])
                *(_DWORD *)v736[1] += 2;
              v436 = v697;
              v697 = v435;
              if (v436)
              {
                if (*(_DWORD *)v436 == 2)
                  WTF::StringImpl::destroy(v436, v434);
                else
                  *(_DWORD *)v436 -= 2;
              }
            }
          }
          else if (v698)
          {
            v437 = v697;
            v697 = 0;
            a1 = (uint64_t)v595;
            if (v437)
            {
              if (*(_DWORD *)v437 == 2)
                WTF::StringImpl::destroy(v437, v434);
              else
                *(_DWORD *)v437 -= 2;
            }
            v698 = 0;
          }
          else
          {
            v696 = (char)v736[0];
            v438 = (WTF::StringImpl *)v736[1];
            a1 = (uint64_t)v595;
            if (v736[1])
              *(_DWORD *)v736[1] += 2;
            v697 = v438;
            v698 = 1;
          }
          std::__optional_storage_base<WebCore::PasteboardWriterData::URLData,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::PasteboardWriterData::URLData,false> const&>((uint64_t)v699, (uint64_t)&v737 + 8);
          if (v712 == v750)
          {
            if (v712)
              WebCore::PasteboardWriterData::WebContent::operator=((uint64_t)&v701, (uint64_t)&v741 + 8);
          }
          else if (v712)
          {
            WebCore::PasteboardWriterData::WebContent::~WebContent((WebCore::PasteboardWriterData::WebContent *)&v701, v439);
            v712 = 0;
          }
          else
          {
            v440 = *((_QWORD *)&v741 + 1);
            if (*((_QWORD *)&v741 + 1))
              **((_DWORD **)&v741 + 1) += 2;
            v701 = v440;
            v702 = v742;
            v441 = (unsigned int *)*((_QWORD *)&v742 + 1);
            if (*((_QWORD *)&v742 + 1))
            {
              do
                v442 = __ldaxr(v441);
              while (__stlxr(v442 + 1, v441));
            }
            v703 = v441;
            v443 = v743;
            if (v743)
            {
              do
                v444 = __ldaxr(v443);
              while (__stlxr(v444 + 1, v443));
            }
            v704 = v443;
            v445 = v744;
            if (v744)
            {
              do
                v446 = __ldaxr(v445);
              while (__stlxr(v446 + 1, v445));
            }
            v705 = v445;
            v447 = v745;
            if (v745)
            {
              do
                v448 = __ldaxr(v447);
              while (__stlxr(v448 + 1, v447));
            }
            v706 = v447;
            v449 = v746;
            if (v746)
              *v746 += 2;
            v707 = v449;
            v450 = v747;
            if (v747)
              *v747 += 2;
            v451 = v749;
            v710 = 0;
            v708 = v450;
            v709 = 0;
            v711 = v749;
            if (v749)
            {
              if (v749 >> 28)
              {
                __break(0xC471u);
                JUMPOUT(0x195F91D80);
              }
              v452 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v749));
              v710 = v451;
              v709 = v452;
              if (v749)
              {
                v453 = v748;
                v454 = &v748[2 * v749];
                do
                {
                  v455 = *v453;
                  if (*v453)
                    *v455 += 2;
                  *v452 = v455;
                  v456 = v453[1];
                  if (v456)
                  {
                    do
                      v457 = __ldaxr(v456);
                    while (__stlxr(v457 + 1, v456));
                  }
                  v452[1] = v456;
                  v452 += 2;
                  v453 += 2;
                }
                while (v453 != v454);
              }
            }
            v712 = 1;
          }
          v692 = 1;
          WebCore::DragItem::DragItem((uint64_t)v657, (uint64_t)v669);
          WebCore::DragController::beginDrag(v598, v657, (uint64_t)v13, (const WebCore::IntPoint *)v596, (const WebCore::IntPoint *)&v623, a1);
          WebCore::DragItem::~DragItem((WebCore::DragItem *)v657, v458);
          WebCore::DragItem::~DragItem((WebCore::DragItem *)v669, v459);
        }
        v460 = (WTF::StringImpl *)v617[0];
        v617[0] = 0;
        if (v460)
        {
          if (*(_DWORD *)v460 == 2)
            WTF::StringImpl::destroy(v460, v430);
          else
            *(_DWORD *)v460 -= 2;
        }
        WebCore::PasteboardWriterData::~PasteboardWriterData((WebCore::PasteboardWriterData *)v736, v430);
        goto LABEL_973;
      }
      v70 = *(_DWORD *)(v36 + 24);
      *(_DWORD *)(v36 + 24) = v70 + 2;
      v71 = *(_WORD *)(v36 + 28);
      v72 = v597;
      if ((v71 & 0x10) == 0
        || (v71 & 0x110) == 0x110
        || *(_QWORD *)(*(_QWORD *)(v36 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::attachmentTag + 24))
      {
        if (v70)
        {
LABEL_98:
          *(_DWORD *)(v36 + 24) = v70;
LABEL_99:
          v73 = *((_QWORD *)v6 + 448);
          if (!v73)
            goto LABEL_128;
          v74 = *(_DWORD *)(v73 + 24);
          *(_DWORD *)(v73 + 24) = v74 + 2;
          if ((*(_WORD *)(v73 + 28) & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(v73 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24)
            && (*(_BYTE *)(v598 + 46) & 0x20) != 0)
          {
            v75 = *(WebCore::ColorInputType **)(v73 + 240);
            if (*((_DWORD *)v75 + 3) == 4)
            {
              WebCore::ColorInputType::valueAsColor(v75, (uint64_t *)v617);
              v740 = 0;
              v76 = WebCore::Element::boundsInRootViewSpace((WebCore::Element *)v73);
              *(float *)v609 = (float)(int)v76;
              *((float *)v609 + 1) = (float)SHIDWORD(v76);
              *(float *)&v609[1] = (float)v77;
              *((float *)&v609[1] + 1) = (float)v78;
              LODWORD(v79) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v73 + 40) + 8)
                                                                                       + 528)
                                                                           + 8)
                                                               + 24)
                                                   + 8)
                                       + 356);
              WebCore::createDragImageForColor((WebCore *)v617, (const WebCore::Color *)v609, (const WebCore::FloatRect *)v736, v79, &v600);
              v80 = v600;
              v669[0] = v600;
              if (v600)
                CFRetain(v600);
              LOBYTE(v669[1]) = 0;
              v678 = 0;
              v679 = 0;
              v682 = 0;
              WebCore::DragImage::operator=((uint64_t)&v718, (uint64_t *)v669);
              v82 = v669[0];
              if (v669[0])
              {
                CFRetain(v669[0]);
                CFRelease(v82);
              }
              if (v682)
              {
                if (v681 != -1)
                  ((void (*)(CFTypeRef *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_4[v681])(&v635, v680);
                v681 = -1;
              }
              std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v669[1], v81);
              v83 = v669[0];
              v669[0] = 0;
              if (v83)
                CFRelease(v83);
              v600 = 0;
              if (v80)
                CFRelease(v80);
              if (!v735)
              {
                v734 = 0;
                v84 = v595;
                if (v740 == -1)
                {
                  v734 = -1;
                }
                else
                {
                  v669[0] = v733;
                  ((void (*)(CFTypeRef *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_1[v740])(v669);
                }
                v735 = 1;
                goto LABEL_825;
              }
              v84 = v595;
              if (v734 == -1)
              {
                if (v740 == -1)
                  goto LABEL_825;
              }
              else if (v740 == -1)
              {
                ((void (*)(CFTypeRef *, _BYTE *))off_1E33FE770[v734])(v669, v733);
                v734 = -1;
LABEL_825:
                (*(void (**)(_QWORD, CFTypeRef *))(**((_QWORD **)v84 + 4) + 128))(*((_QWORD *)v84 + 4), v617);
                v401 = (CGImage *)v718;
                if (v718)
                  CFRetain(v718);
                v402 = CGImageGetWidth(v401);
                v403 = CGImageGetHeight(v401);
                v621 = v402 | ((unint64_t)v403 << 32);
                if (v401)
                {
                  CFRelease(v401);
                  v402 = v621;
                  v403 = HIDWORD(v621);
                }
                a1 = (uint64_t)v595;
                v622 = (v596->i32[0] - v402) | ((unint64_t)(v596->i32[1] - v403) << 32);
                (*(void (**)(_QWORD, uint64_t, int32x2_t *, WebCore::DataTransfer *))(**(_QWORD **)(v598 + 8)
                                                                                              + 16))(*(_QWORD *)(v598 + 8), 32, v596, v595);
                WebCore::DragImage::DragImage((uint64_t)&v647, (uint64_t)&v718);
                v669[1] = 0;
                v669[0] = 0;
                v670 = 0;
                WebCore::DragController::doSystemDrag(v598, &v647, (const WebCore::IntPoint *)&v622, v596, v597, (uint64_t)v669);
                v405 = (WTF *)v669[1];
                if (HIDWORD(v670))
                {
                  v406 = 16 * HIDWORD(v670);
                  v407 = v669[1];
                  do
                  {
                    v407 = (CFTypeRef)(std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>::~pair((uint64_t)v407, v404)+ 16);
                    v406 -= 16;
                  }
                  while (v406);
                }
                if (v405)
                  WTF::fastFree(v405, v404);
                if (v669[0])
                {
                  if (*(_DWORD *)v669[0] == 2)
                    WTF::StringImpl::destroy((WTF::StringImpl *)v669[0], (WTF::StringImpl *)v404);
                  else
                    *(_DWORD *)v669[0] -= 2;
                }
                v408 = v647;
                if (v647)
                {
                  CFRetain(v647);
                  CFRelease(v408);
                }
                if (v651)
                {
                  if (v650 != -1)
                    ((void (*)(CFTypeRef *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_4[v650])(v669, &v649);
                  v650 = -1;
                }
                std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v648, v404);
                v409 = v647;
                v647 = 0;
                if (v409)
                  CFRelease(v409);
                if (v740 != -1)
                  ((void (*)(CFTypeRef *, CFTypeRef *))off_1E33FE770[v740])(v669, &v736[1]);
                if (((unint64_t)v617[0] & 0x8000000000000) != 0)
                {
                  v582 = (unsigned int *)((unint64_t)v617[0] & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v583 = __ldaxr(v582);
                    v584 = v583 - 1;
                  }
                  while (__stlxr(v584, v582));
                  a1 = (uint64_t)v595;
                  if (!v584)
                  {
                    atomic_store(1u, v582);
                    WTF::fastFree((WTF *)v582, v19);
                  }
                }
LABEL_848:
                if (*(_DWORD *)(v73 + 24) != 2)
                {
                  *(_DWORD *)(v73 + 24) -= 2;
                  goto LABEL_973;
                }
                if ((*(_WORD *)(v73 + 30) & 0x400) != 0)
                  goto LABEL_973;
                v410 = (WebCore::Node *)v73;
                goto LABEL_880;
              }
              v669[0] = v733;
              ((void (*)(CFTypeRef *))off_1E33FE788[v740])(v669);
              goto LABEL_825;
            }
          }
          if (v74)
          {
            *(_DWORD *)(v73 + 24) = v74;
          }
          else if ((*(_WORD *)(v73 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v73, v19);
          }
          v73 = *((_QWORD *)v6 + 448);
          if (!v73)
          {
LABEL_128:
            v35 = 0;
            if (BYTE9(WebCore::EventHandler::dragState(void)::state) != 1 || !v718)
              goto LABEL_1040;
            (*(void (**)(_QWORD, uint64_t, int32x2_t *, WebCore::DataTransfer *))(**(_QWORD **)(v598 + 8)
                                                                                          + 16))(*(_QWORD *)(v598 + 8), 1, v596, v595);
            WebCore::DragImage::DragImage((uint64_t)&v637, (uint64_t)&v718);
            v669[1] = 0;
            v669[0] = 0;
            v670 = 0;
            WebCore::DragController::doSystemDrag(v598, &v637, (const WebCore::IntPoint *)&v622, v596, v597, (uint64_t)v669);
            v88 = (WTF *)v669[1];
            if (HIDWORD(v670))
            {
              v89 = 16 * HIDWORD(v670);
              v90 = v669[1];
              do
              {
                v90 = (CFTypeRef)(std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>::~pair((uint64_t)v90, v87)+ 16);
                v89 -= 16;
              }
              while (v89);
            }
            if (v88)
              WTF::fastFree(v88, v87);
            if (v669[0])
            {
              if (*(_DWORD *)v669[0] == 2)
                WTF::StringImpl::destroy((WTF::StringImpl *)v669[0], (WTF::StringImpl *)v87);
              else
                *(_DWORD *)v669[0] -= 2;
            }
            v91 = v637;
            if (v637)
            {
              CFRetain(v637);
              CFRelease(v91);
            }
            if (v641)
            {
              if (v640 != -1)
                ((void (*)(CFTypeRef *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_4[v640])(v669, &v639);
              v640 = -1;
            }
            std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v638, v87);
            v92 = v637;
            v637 = 0;
            if (v92)
              CFRelease(v92);
            goto LABEL_973;
          }
          v85 = *(_DWORD *)(v73 + 24);
          *(_DWORD *)(v73 + 24) = v85 + 2;
          v86 = *(_WORD *)(v73 + 28);
          if ((v86 & 0x10) == 0
            || (v86 & 0x110) == 0x110
            || *(_QWORD *)(*(_QWORD *)(v73 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::modelTag + 24))
          {
            if (v85)
            {
LABEL_127:
              *(_DWORD *)(v73 + 24) = v85;
              goto LABEL_128;
            }
LABEL_263:
            if ((*(_WORD *)(v73 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v73, v19);
            goto LABEL_128;
          }
          if ((*(_BYTE *)(v598 + 46) & 0x40) == 0)
          {
            if (v85)
              goto LABEL_127;
            goto LABEL_263;
          }
          WebCore::createDragImageForNode(v597, (WebCore::LocalFrame *)v73, &v599);
          v669[0] = v599;
          if (v599)
            CFRetain(v599);
          LOBYTE(v669[1]) = 0;
          v678 = 0;
          v679 = 0;
          v682 = 0;
          WebCore::DragImage::operator=((uint64_t)&v718, (uint64_t *)v669);
          v239 = v669[0];
          if (v669[0])
          {
            CFRetain(v669[0]);
            CFRelease(v239);
          }
          if (v682)
          {
            if (v681 != -1)
              ((void (*)(CFTypeRef *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_4[v681])(v736, v680);
            v681 = -1;
          }
          std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v669[1], v238);
          v240 = v669[0];
          v669[0] = 0;
          if (v240)
            CFRelease(v240);
          v241 = v599;
          v599 = 0;
          if (v241)
            CFRelease(v241);
          v669[1] = 0;
          v669[0] = 0;
          WTF::URL::invalidate((WTF::URL *)&v669[1]);
          v677 = 0;
          *(_OWORD *)v676 = 0u;
          *(_OWORD *)v675 = 0u;
          *(_OWORD *)v674 = 0u;
          WTF::URL::lastPathComponent((WTF::URL *)(v73 + 168));
          if ((v242 & 0xFF00000000) != 0)
            WTF::String::String();
          else
            WTF::String::String();
          v244 = (WTF::StringImpl *)v736[0];
          v736[0] = 0;
          v245 = v676[1];
          v676[1] = v244;
          if (v245)
          {
            v246 = *(_DWORD *)v245 - 2;
            if (*(_DWORD *)v245 != 2)
            {
LABEL_463:
              *(_DWORD *)v245 = v246;
              goto LABEL_464;
            }
            WTF::StringImpl::destroy(v245, v243);
            v245 = (WTF::StringImpl *)v736[0];
            v736[0] = 0;
            if (v245)
            {
              v246 = *(_DWORD *)v245 - 2;
              if (*(_DWORD *)v245 != 2)
                goto LABEL_463;
              WTF::StringImpl::destroy(v245, v243);
            }
          }
LABEL_464:
          if (*(_BYTE *)(v73 + 240))
          {
            v247 = *(uint64_t **)(v73 + 224);
            if (v247)
              ++*(_DWORD *)v247;
          }
          else
          {
            v247 = 0;
          }
          v252 = (WTF::StringImpl *)v247[2];
          if (v252)
            *(_DWORD *)v252 += 2;
          v253 = v675[0];
          v675[0] = v252;
          if (v253)
          {
            if (*(_DWORD *)v253 == 2)
              WTF::StringImpl::destroy(v253, v243);
            else
              *(_DWORD *)v253 -= 2;
          }
          if (*(_DWORD *)v247 == 1)
          {
            v411 = (WTF::StringImpl *)v247[3];
            v247[3] = 0;
            if (v411)
            {
              if (*(_DWORD *)v411 == 2)
                WTF::StringImpl::destroy(v411, v243);
              else
                *(_DWORD *)v411 -= 2;
            }
            v412 = (WTF::StringImpl *)v247[2];
            v247[2] = 0;
            if (v412)
            {
              if (*(_DWORD *)v412 == 2)
                WTF::StringImpl::destroy(v412, v243);
              else
                *(_DWORD *)v412 -= 2;
            }
            WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v247 + 1, v243);
            WTF::fastFree((WTF *)v247, v413);
          }
          else
          {
            --*(_DWORD *)v247;
          }
          if (*(_BYTE *)(v73 + 240))
          {
            v254 = *(uint64_t **)(v73 + 224);
            if (v254)
              ++*(_DWORD *)v254;
          }
          else
          {
            v254 = 0;
          }
          v255 = (unsigned int *)v254[1];
          do
            v256 = __ldaxr(v255);
          while (__stlxr(v256 + 1, v255));
          v736[0] = 0;
          v257 = v674[1];
          v674[1] = (WTF *)v255;
          if (!v257)
            goto LABEL_498;
          do
          {
            v258 = __ldaxr((unsigned int *)v257);
            v259 = v258 - 1;
          }
          while (__stlxr(v259, (unsigned int *)v257));
          if (!v259)
          {
            atomic_store(1u, (unsigned int *)v257);
            v502 = *((unsigned int *)v257 + 5);
            if ((_DWORD)v502)
            {
              v503 = *((_QWORD *)v257 + 1);
              v504 = v503 + 16 * v502;
              do
              {
                v505 = *(unsigned int **)(v503 + 8);
                *(_QWORD *)(v503 + 8) = 0;
                if (v505)
                {
                  do
                  {
                    v506 = __ldaxr(v505);
                    v507 = v506 - 1;
                  }
                  while (__stlxr(v507, v505));
                  if (!v507)
                  {
                    atomic_store(1u, v505);
                    v508 = v505[6];
                    if ((_DWORD)v508 != -1)
                      ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33FE750[v508])(v609, v505 + 2);
                    v505[6] = -1;
                    WTF::fastFree((WTF *)v505, v243);
                  }
                }
                v503 += 16;
              }
              while (v503 != v504);
            }
            v509 = (WTF *)*((_QWORD *)v257 + 1);
            if ((WTF *)((char *)v257 + 24) != v509 && v509 != 0)
            {
              *((_QWORD *)v257 + 1) = 0;
              *((_DWORD *)v257 + 4) = 0;
              WTF::fastFree(v509, v243);
            }
            WTF::fastFree(v257, v243);
            WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)v736, v511);
            v72 = v597;
            if (!v254)
              goto LABEL_501;
          }
          else
          {
LABEL_498:
            WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)v736, v243);
          }
          if (*(_DWORD *)v254 == 1)
          {
            v414 = (WTF::StringImpl *)v254[3];
            v254[3] = 0;
            if (v414)
            {
              if (*(_DWORD *)v414 == 2)
                WTF::StringImpl::destroy(v414, v260);
              else
                *(_DWORD *)v414 -= 2;
            }
            v415 = (WTF::StringImpl *)v254[2];
            v254[2] = 0;
            if (v415)
            {
              if (*(_DWORD *)v415 == 2)
                WTF::StringImpl::destroy(v415, v260);
              else
                *(_DWORD *)v415 -= 2;
            }
            WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v254 + 1, v260);
            WTF::fastFree((WTF *)v254, v416);
          }
          else
          {
            --*(_DWORD *)v254;
          }
LABEL_501:
          (*(void (**)(_QWORD, CFTypeRef *))(**((_QWORD **)v595 + 4) + 152))(*((_QWORD *)v595 + 4), v669);
          v261 = (CGImage *)v718;
          if (v718)
            CFRetain(v718);
          v262 = CGImageGetWidth(v261);
          v263 = CGImageGetHeight(v261);
          v621 = v262 | ((unint64_t)v263 << 32);
          if (v261)
          {
            CFRelease(v261);
            v262 = v621;
            v263 = HIDWORD(v621);
          }
          a1 = (uint64_t)v595;
          v622 = (v596->i32[0] - v262) | ((unint64_t)(v596->i32[1] - v263) << 32);
          (*(void (**)(_QWORD, uint64_t, int32x2_t *, WebCore::DataTransfer *))(**(_QWORD **)(v598 + 8) + 16))(*(_QWORD *)(v598 + 8), 64, v596, v595);
          WebCore::DragImage::DragImage((uint64_t)&v642, (uint64_t)&v718);
          v736[1] = 0;
          v736[0] = 0;
          *(_QWORD *)&v737 = 0;
          WebCore::DragController::doSystemDrag(v598, &v642, (const WebCore::IntPoint *)&v622, v596, v72, (uint64_t)v736);
          v265 = (WTF *)v736[1];
          if (DWORD1(v737))
          {
            v266 = 16 * DWORD1(v737);
            v267 = v736[1];
            do
            {
              v267 = (CFTypeRef)(std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>::~pair((uint64_t)v267, v264)+ 16);
              v266 -= 16;
            }
            while (v266);
          }
          if (v265)
            WTF::fastFree(v265, v264);
          if (v736[0])
          {
            if (*(_DWORD *)v736[0] == 2)
              WTF::StringImpl::destroy((WTF::StringImpl *)v736[0], (WTF::StringImpl *)v264);
            else
              *(_DWORD *)v736[0] -= 2;
          }
          v268 = v642;
          if (v642)
          {
            CFRetain(v642);
            CFRelease(v268);
          }
          if (v646)
          {
            if (v645 != -1)
              ((void (*)(CFTypeRef *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_4[v645])(v736, &v644);
            v645 = -1;
          }
          std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v643, v264);
          v270 = v642;
          v642 = 0;
          if (v270)
            CFRelease(v270);
          WebCore::PasteboardImage::~PasteboardImage((WebCore::PasteboardImage *)v669, v269);
          goto LABEL_848;
        }
LABEL_154:
        if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v36, v19);
        goto LABEL_99;
      }
      if ((*(_BYTE *)(v598 + 46) & 0x10) == 0)
      {
        if (v70)
          goto LABEL_98;
        goto LABEL_154;
      }
      v122 = (WebCore::Document *)*((_QWORD *)v597 + 37);
      v123 = (int *)*((_QWORD *)v122 + 382);
      if (!v123)
      {
        v524 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
        WebCore::Editor::Editor(v524, v122);
        v525 = (WebCore::Editor *)*((_QWORD *)v122 + 382);
        *((_QWORD *)v122 + 382) = v524;
        if (v525)
        {
          WebCore::Editor::~Editor(v525, v19);
          if (*(_DWORD *)v526)
          {
            *(_QWORD *)(v526 + 496) = 0;
            *(_OWORD *)(v526 + 464) = 0u;
            *(_OWORD *)(v526 + 480) = 0u;
            *(_OWORD *)(v526 + 432) = 0u;
            *(_OWORD *)(v526 + 448) = 0u;
            *(_OWORD *)(v526 + 400) = 0u;
            *(_OWORD *)(v526 + 416) = 0u;
            *(_OWORD *)(v526 + 368) = 0u;
            *(_OWORD *)(v526 + 384) = 0u;
            *(_OWORD *)(v526 + 336) = 0u;
            *(_OWORD *)(v526 + 352) = 0u;
            *(_OWORD *)(v526 + 304) = 0u;
            *(_OWORD *)(v526 + 320) = 0u;
            *(_OWORD *)(v526 + 272) = 0u;
            *(_OWORD *)(v526 + 288) = 0u;
            *(_OWORD *)(v526 + 240) = 0u;
            *(_OWORD *)(v526 + 256) = 0u;
            *(_OWORD *)(v526 + 208) = 0u;
            *(_OWORD *)(v526 + 224) = 0u;
            *(_OWORD *)(v526 + 176) = 0u;
            *(_OWORD *)(v526 + 192) = 0u;
            *(_OWORD *)(v526 + 144) = 0u;
            *(_OWORD *)(v526 + 160) = 0u;
            *(_OWORD *)(v526 + 112) = 0u;
            *(_OWORD *)(v526 + 128) = 0u;
            *(_OWORD *)(v526 + 80) = 0u;
            *(_OWORD *)(v526 + 96) = 0u;
            *(_OWORD *)(v526 + 48) = 0u;
            *(_OWORD *)(v526 + 64) = 0u;
            *(_OWORD *)(v526 + 16) = 0u;
            *(_OWORD *)(v526 + 32) = 0u;
            *(_OWORD *)v526 = 0u;
          }
          else
          {
            WTF::fastFree((WTF *)v526, v19);
          }
        }
        v123 = (int *)*((_QWORD *)v122 + 382);
        a1 = (uint64_t)v595;
        v72 = v597;
      }
      v124 = *v123;
      v125 = *v123 + 1;
      *v123 = v125;
      if (!*((_BYTE *)v123 + 88))
        *((_BYTE *)v123 + 88) = 1;
      if (!v125)
      {
        __break(0xC471u);
        JUMPOUT(0x195F90FF8);
      }
      *v123 = v124;
      v126 = *(_QWORD *)(*((_QWORD *)v72 + 37) + 3064);
      v127 = *(WTF::StringImpl **)(v126 + 56);
      if (v127)
        *((_DWORD *)v127 + 6) += 2;
      v609[0] = v127;
      LODWORD(v609[1]) = *(_DWORD *)(v126 + 64);
      BYTE4(v609[1]) = *(_BYTE *)(v126 + 68);
      v128 = *(WebCore::Node **)(v126 + 72);
      if (v128)
        *((_DWORD *)v128 + 6) += 2;
      v610[0] = v128;
      LODWORD(v610[1]) = *(_DWORD *)(v126 + 80);
      BYTE4(v610[1]) = *(_BYTE *)(v126 + 84);
      v129 = *(_QWORD *)(v126 + 88);
      if (v129)
        *(_DWORD *)(v129 + 24) += 2;
      *(_QWORD *)&v611 = v129;
      DWORD2(v611) = *(_DWORD *)(v126 + 96);
      BYTE12(v611) = *(_BYTE *)(v126 + 100);
      v130 = *(WTF **)(v126 + 104);
      if (v130)
        *((_DWORD *)v130 + 6) += 2;
      v612[0] = v130;
      LODWORD(v612[1]) = *(_DWORD *)(v126 + 112);
      BYTE4(v612[1]) = *(_BYTE *)(v126 + 116);
      v131 = *(_QWORD *)(v126 + 120);
      if (v131)
        *(_DWORD *)(v131 + 24) += 2;
      v613 = v131;
      LODWORD(v614) = *(_DWORD *)(v126 + 128);
      BYTE4(v614) = *(_BYTE *)(v126 + 132);
      v132 = *(_QWORD *)(v126 + 136);
      if (v132)
        *(_DWORD *)(v132 + 24) += 2;
      *((_QWORD *)&v614 + 1) = v132;
      LODWORD(v615) = *(_DWORD *)(v126 + 144);
      BYTE4(v615) = *(_BYTE *)(v126 + 148);
      WORD4(v615) = *(_WORD *)(v126 + 152);
      BYTE10(v615) = *(_BYTE *)(v126 + 154);
      WebCore::selectElement((WebCore *)v36, v19);
      v617[0] = 0;
      v617[1] = 0;
      v618 = 0;
      if ((a6 & 1) == 0)
      {
        v133 = (WebCore::Document *)*((_QWORD *)v72 + 37);
        v134 = (WebCore::Editor *)*((_QWORD *)v133 + 382);
        if (!v134)
        {
          v540 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
          WebCore::Editor::Editor(v540, v133);
          v542 = (WebCore::Editor *)*((_QWORD *)v133 + 382);
          *((_QWORD *)v133 + 382) = v540;
          if (v542)
          {
            WebCore::Editor::~Editor(v542, v541);
            if (*(_DWORD *)v543)
            {
              *(_QWORD *)(v543 + 496) = 0;
              *(_OWORD *)(v543 + 464) = 0u;
              *(_OWORD *)(v543 + 480) = 0u;
              *(_OWORD *)(v543 + 432) = 0u;
              *(_OWORD *)(v543 + 448) = 0u;
              *(_OWORD *)(v543 + 400) = 0u;
              *(_OWORD *)(v543 + 416) = 0u;
              *(_OWORD *)(v543 + 368) = 0u;
              *(_OWORD *)(v543 + 384) = 0u;
              *(_OWORD *)(v543 + 336) = 0u;
              *(_OWORD *)(v543 + 352) = 0u;
              *(_OWORD *)(v543 + 304) = 0u;
              *(_OWORD *)(v543 + 320) = 0u;
              *(_OWORD *)(v543 + 272) = 0u;
              *(_OWORD *)(v543 + 288) = 0u;
              *(_OWORD *)(v543 + 240) = 0u;
              *(_OWORD *)(v543 + 256) = 0u;
              *(_OWORD *)(v543 + 208) = 0u;
              *(_OWORD *)(v543 + 224) = 0u;
              *(_OWORD *)(v543 + 176) = 0u;
              *(_OWORD *)(v543 + 192) = 0u;
              *(_OWORD *)(v543 + 144) = 0u;
              *(_OWORD *)(v543 + 160) = 0u;
              *(_OWORD *)(v543 + 112) = 0u;
              *(_OWORD *)(v543 + 128) = 0u;
              *(_OWORD *)(v543 + 80) = 0u;
              *(_OWORD *)(v543 + 96) = 0u;
              *(_OWORD *)(v543 + 48) = 0u;
              *(_OWORD *)(v543 + 64) = 0u;
              *(_OWORD *)(v543 + 16) = 0u;
              *(_OWORD *)(v543 + 32) = 0u;
              *(_OWORD *)v543 = 0u;
            }
            else
            {
              WTF::fastFree((WTF *)v543, v544);
            }
          }
          v134 = (WebCore::Editor *)*((_QWORD *)v133 + 382);
          a1 = (uint64_t)v595;
          v72 = v597;
        }
        ++*(_DWORD *)v134;
        WebCore::Editor::promisedAttachmentInfo((uint64_t)v134, (WebCore::Element *)v36, v669);
        *(_OWORD *)v617 = *(_OWORD *)v669;
        v618 = v670;
        if (!v669[0] || !*((_DWORD *)v669[0] + 1))
        {
          v135 = *((_QWORD *)v134 + 1);
          if (v135)
          {
            if (*(_QWORD *)(v135 + 8))
            {
              WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(*(_QWORD *)(*((_QWORD *)v72 + 37) + 3064) + 56), v669);
              v137 = *((_QWORD *)v134 + 1);
              if (v137)
              {
                v138 = *(_QWORD *)(v137 + 8);
                if (v138)
                  (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v138 + 288))(v138, v669);
              }
              if (BYTE8(v671))
              {
                v139 = v670;
                v670 = 0;
                if (v139)
                {
                  if (*((_DWORD *)v139 + 6) == 2)
                  {
                    if ((*((_WORD *)v139 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v139, v136);
                  }
                  else
                  {
                    *((_DWORD *)v139 + 6) -= 2;
                  }
                }
                v140 = (WebCore::Node *)v669[0];
                v669[0] = 0;
                if (v140)
                {
                  if (*((_DWORD *)v140 + 6) == 2)
                  {
                    if ((*((_WORD *)v140 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v140, v136);
                  }
                  else
                  {
                    *((_DWORD *)v140 + 6) -= 2;
                  }
                }
              }
              WebCore::Editor::writeSelectionToPasteboard(v134, *(WebCore::Pasteboard **)(a1 + 32));
              v141 = *((_QWORD *)v134 + 1);
              if (v141)
              {
                v142 = *(_QWORD *)(v141 + 8);
                if (v142)
                  (*(void (**)(uint64_t))(*(_QWORD *)v142 + 296))(v142);
              }
            }
          }
        }
        if (!*(_DWORD *)v134)
        {
          __break(0xC471u);
          JUMPOUT(0x195F91108);
        }
        --*(_DWORD *)v134;
      }
      v271 = v598;
      v272 = v596;
      (*(void (**)(_QWORD, uint64_t, int32x2_t *, uint64_t))(**(_QWORD **)(v598 + 8) + 16))(*(_QWORD *)(v598 + 8), 16, v596, a1);
      if (v718)
      {
LABEL_766:
        WebCore::DragImage::DragImage((uint64_t)&v652, (uint64_t)&v718);
        WebCore::DragController::doSystemDrag(v271, &v652, (const WebCore::IntPoint *)&v622, v272, v72, (uint64_t)v617);
        v381 = v652;
        if (v652)
        {
          CFRetain(v652);
          CFRelease(v381);
        }
        if (v656)
        {
          if (v655 != -1)
            ((void (*)(CFTypeRef *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_4[v655])(v669, &v654);
          v655 = -1;
        }
        std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v653, v380);
        v382 = v652;
        v652 = 0;
        if (v382)
          CFRelease(v382);
        if (WebCore::Node::computeEditability(v36, 0, 0) != 2)
        {
          v384 = *(_QWORD *)(*((_QWORD *)v72 + 37) + 3064);
          ++*(_DWORD *)(v384 + 28);
          WebCore::FrameSelection::setSelection(v384, (uint64_t)v609, 6u, 0, 0, 0, 0);
          v385 = *(_DWORD *)(v384 + 28);
          if (!v385)
          {
            __break(0xC471u);
            JUMPOUT(0x195F91128);
          }
          *(_DWORD *)(v384 + 28) = v385 - 1;
        }
        v386 = (WebCore::Document *)*((_QWORD *)v72 + 37);
        v387 = *((_QWORD *)v386 + 382);
        if (!v387)
        {
          v527 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
          WebCore::Editor::Editor(v527, v386);
          v528 = (WebCore::Editor *)*((_QWORD *)v386 + 382);
          *((_QWORD *)v386 + 382) = v527;
          if (v528)
          {
            WebCore::Editor::~Editor(v528, v383);
            if (*(_DWORD *)v529)
            {
              *(_QWORD *)(v529 + 496) = 0;
              *(_OWORD *)(v529 + 464) = 0u;
              *(_OWORD *)(v529 + 480) = 0u;
              *(_OWORD *)(v529 + 432) = 0u;
              *(_OWORD *)(v529 + 448) = 0u;
              *(_OWORD *)(v529 + 400) = 0u;
              *(_OWORD *)(v529 + 416) = 0u;
              *(_OWORD *)(v529 + 368) = 0u;
              *(_OWORD *)(v529 + 384) = 0u;
              *(_OWORD *)(v529 + 336) = 0u;
              *(_OWORD *)(v529 + 352) = 0u;
              *(_OWORD *)(v529 + 304) = 0u;
              *(_OWORD *)(v529 + 320) = 0u;
              *(_OWORD *)(v529 + 272) = 0u;
              *(_OWORD *)(v529 + 288) = 0u;
              *(_OWORD *)(v529 + 240) = 0u;
              *(_OWORD *)(v529 + 256) = 0u;
              *(_OWORD *)(v529 + 208) = 0u;
              *(_OWORD *)(v529 + 224) = 0u;
              *(_OWORD *)(v529 + 176) = 0u;
              *(_OWORD *)(v529 + 192) = 0u;
              *(_OWORD *)(v529 + 144) = 0u;
              *(_OWORD *)(v529 + 160) = 0u;
              *(_OWORD *)(v529 + 112) = 0u;
              *(_OWORD *)(v529 + 128) = 0u;
              *(_OWORD *)(v529 + 80) = 0u;
              *(_OWORD *)(v529 + 96) = 0u;
              *(_OWORD *)(v529 + 48) = 0u;
              *(_OWORD *)(v529 + 64) = 0u;
              *(_OWORD *)(v529 + 16) = 0u;
              *(_OWORD *)(v529 + 32) = 0u;
              *(_OWORD *)v529 = 0u;
            }
            else
            {
              WTF::fastFree((WTF *)v529, v383);
            }
          }
          v387 = *((_QWORD *)v386 + 382);
          a1 = (uint64_t)v595;
        }
        v388 = *(_DWORD *)v387 + 1;
        *(_DWORD *)v387 = v388;
        if (*(_BYTE *)(v387 + 88))
        {
          *(_BYTE *)(v387 + 88) = 0;
          WebCore::Editor::respondToChangedSelection(v387, (WTF::StringImpl *)v383, 0);
          if (!*(_BYTE *)(v387 + 88))
          {
            v389 = *(_QWORD *)(*(_QWORD *)(v387 + 16) + 8);
            *(_DWORD *)(v389 + 24) += 2;
            WebCore::FrameSelection::revealSelection(*(_QWORD *)(v389 + 3064), 0, (uint64_t)&WebCore::ScrollAlignment::alignToEdgeIfNeeded, 0, 1);
            if (*(_DWORD *)(v389 + 24) == 2)
            {
              if ((*(_WORD *)(v389 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v389, v383);
            }
            else
            {
              *(_DWORD *)(v389 + 24) -= 2;
            }
          }
          v388 = *(_DWORD *)v387;
        }
        if (!v388)
        {
          __break(0xC471u);
          JUMPOUT(0x195F91018);
        }
        *(_DWORD *)v387 = v388 - 1;
        v390 = (WTF *)v617[1];
        if (HIDWORD(v618))
        {
          v391 = 16 * HIDWORD(v618);
          v392 = v617[1];
          do
          {
            v392 = (CFTypeRef)(std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>::~pair((uint64_t)v392, v383)+ 16);
            v391 -= 16;
          }
          while (v391);
        }
        if (v390)
          WTF::fastFree(v390, v383);
        if (v617[0])
        {
          if (*(_DWORD *)v617[0] == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v617[0], (WTF::StringImpl *)v383);
          else
            *(_DWORD *)v617[0] -= 2;
        }
        WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v609);
        if (*(_DWORD *)(v36 + 24) != 2)
        {
          *(_DWORD *)(v36 + 24) -= 2;
          goto LABEL_973;
        }
        if ((*(_WORD *)(v36 + 30) & 0x400) != 0)
          goto LABEL_973;
        v410 = (WebCore::Node *)v36;
LABEL_880:
        WebCore::Node::removedLastRef(v410, v19);
        goto LABEL_973;
      }
      *(_OWORD *)v739 = 0u;
      v738 = 0u;
      v737 = 0u;
      *(_OWORD *)v736 = 0u;
      v740 = 1065353216;
      WORD1(v743) = 0;
      v741 = 0u;
      v742 = 0u;
      LOBYTE(v743) = 0;
      v273 = *(_QWORD *)(v36 + 64) & 0xFFFFFFFFFFFFLL;
      if (v273)
      {
        if ((*(_BYTE *)((*(_QWORD *)(v36 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195F91270);
        }
        if (!*(_BYTE *)((*(_QWORD *)(v36 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E))
        {
          v305 = 0;
          ++*(_DWORD *)((*(_QWORD *)(v36 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
          *(_BYTE *)(v273 + 220) = 0;
          v274 = 1;
LABEL_686:
          WebCore::createDragImageForSelection(v597, (uint64_t)v736, 0, &v601);
          v343 = v601;
          v601 = 0;
          v669[0] = v343;
          if (v343)
            CFRetain(v343);
          LOBYTE(v669[1]) = 0;
          v678 = 0;
          v679 = 0;
          v682 = 0;
          WebCore::DragImage::operator=((uint64_t)&v718, (uint64_t *)v669);
          v345 = v669[0];
          if (v669[0])
          {
            CFRetain(v669[0]);
            CFRelease(v345);
          }
          a1 = (uint64_t)v595;
          if (v682)
          {
            if (v681 != -1)
              ((void (*)(CFTypeRef *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_4[v681])(&v635, v680);
            v681 = -1;
          }
          std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v669[1], v344);
          v346 = v669[0];
          v669[0] = 0;
          if (v346)
            CFRelease(v346);
          if (v343)
            CFRelease(v343);
          v347 = v601;
          v601 = 0;
          if (v347)
            CFRelease(v347);
          if (v274)
            *(_BYTE *)(v273 + 220) = 1;
          v72 = v597;
          if ((_QWORD)v742)
          {
            if (v731)
            {
              WebCore::TextIndicatorData::operator=((uint64_t)&v719, (__int128 *)v736);
            }
            else
            {
              v719 = *(_OWORD *)v736;
              v720 = v737;
              v721 = v738;
              v348 = HIDWORD(v739[1]);
              v723 = 0;
              v722 = 0;
              v724 = HIDWORD(v739[1]);
              if (HIDWORD(v739[1]))
              {
                if (HIDWORD(v739[1]) >> 28)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195F91D98);
                }
                v486 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * HIDWORD(v739[1])));
                v723 = v348;
                v722 = v486;
                a1 = (uint64_t)v595;
                v72 = v597;
                if (HIDWORD(v739[1]))
                {
                  v487 = v739[0];
                  v488 = 16 * HIDWORD(v739[1]);
                  do
                  {
                    v489 = *(_OWORD *)v487;
                    v487 = (WTF *)((char *)v487 + 16);
                    *v486++ = v489;
                    v488 -= 16;
                  }
                  while (v488);
                }
              }
              v725 = v740;
              v349 = v741;
              if ((_QWORD)v741)
                ++*(_DWORD *)(v741 + 8);
              v726 = v349;
              v350 = *((_QWORD *)&v741 + 1);
              if (*((_QWORD *)&v741 + 1))
                ++*(_DWORD *)(*((_QWORD *)&v741 + 1) + 8);
              v727 = v350;
              v351 = v742;
              if ((_QWORD)v742)
                ++*(_DWORD *)(v742 + 8);
              v728 = v351;
              v729 = *((_QWORD *)&v742 + 1);
              if ((*((_QWORD *)&v742 + 1) & 0x8000000000000) != 0)
              {
                v555 = (unsigned int *)(*((_QWORD *)&v742 + 1) & 0xFFFFFFFFFFFFLL);
                do
                  v556 = __ldaxr(v555);
                while (__stlxr(v556 + 1, v555));
              }
              v730 = (int)v743;
              v731 = 1;
            }
          }
          WebCore::FrameSelection::selectionBounds(*(_QWORD *)(*((_QWORD *)v72 + 37) + 3064), 1);
          v357 = floorf(v353);
          v358 = 2147500000.0;
          if (v357 < 2147500000.0)
          {
            v358 = -2147500000.0;
            if (v357 > -2147500000.0)
              v358 = (float)(int)v357;
          }
          v359 = floorf(v354);
          v360 = 2147500000.0;
          if (v359 < 2147500000.0)
          {
            v360 = -2147500000.0;
            if (v359 > -2147500000.0)
              v360 = (float)(int)v359;
          }
          v361 = v354 + v356;
          v362 = ceilf(v353 + v355);
          v363 = 2147500000.0;
          if (v362 < 2147500000.0)
          {
            v363 = -2147500000.0;
            if (v362 > -2147500000.0)
              v363 = (float)(int)v362;
          }
          v364 = ceilf(v361);
          v365 = 2147500000.0;
          if (v364 < 2147500000.0)
          {
            v365 = -2147500000.0;
            if (v364 > -2147500000.0)
              v365 = (float)(int)v364;
          }
          if (v358 > -2147500000.0)
            v366 = (int)v358;
          else
            v366 = 0x80000000;
          if (v358 < 2147500000.0)
            LODWORD(v367) = v366;
          else
            LODWORD(v367) = 0x7FFFFFFF;
          if (v360 > -2147500000.0)
            v368 = (int)v360;
          else
            v368 = 0x80000000;
          if (v360 < 2147500000.0)
            LODWORD(v369) = v368;
          else
            LODWORD(v369) = 0x7FFFFFFF;
          v370 = v363 - v358;
          v371 = v365 - v360;
          if (v370 >= 2147500000.0)
          {
            v372 = 0x7FFFFFFF;
          }
          else if (v370 <= -2147500000.0)
          {
            v372 = 0x80000000;
          }
          else
          {
            v372 = (int)v370;
          }
          if (v371 >= 2147500000.0)
          {
            v373 = 0x7FFFFFFF;
          }
          else if (v371 <= -2147500000.0)
          {
            v373 = 0x80000000;
          }
          else
          {
            v373 = (int)v371;
          }
          v374 = v372 + v367;
          if (v374 >= (int)v367)
            v367 = v367;
          else
            v367 = v374;
          if (v373 + (int)v369 <= (int)v369)
            v369 = v369;
          else
            v369 = (v373 + v369);
          v622 = v367 | (v369 << 32);
          *(_QWORD *)(v598 + 52) = (v596->i32[0] - v367) | ((unint64_t)(v596->i32[1] - v369) << 32);
          if ((v305 & 1) == 0)
          {
            v375 = *(_DWORD *)(v273 + 16);
            if (!v375)
            {
              __break(0xC471u);
              JUMPOUT(0x195F9118CLL);
            }
            *(_DWORD *)(v273 + 16) = v375 - 1;
          }
          if ((*((_QWORD *)&v742 + 1) & 0x8000000000000) != 0)
          {
            v579 = (unsigned int *)(*((_QWORD *)&v742 + 1) & 0xFFFFFFFFFFFFLL);
            do
            {
              v580 = __ldaxr(v579);
              v581 = v580 - 1;
            }
            while (__stlxr(v581, v579));
            a1 = (uint64_t)v595;
            v72 = v597;
            if (!v581)
            {
              atomic_store(1u, v579);
              WTF::fastFree((WTF *)v579, v352);
            }
          }
          v376 = (_DWORD *)v742;
          *(_QWORD *)&v742 = 0;
          if (v376)
          {
            if (v376[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v376 + 8))(v376);
            else
              --v376[2];
          }
          v377 = (_DWORD *)*((_QWORD *)&v741 + 1);
          *((_QWORD *)&v741 + 1) = 0;
          if (v377)
          {
            if (v377[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v377 + 8))(v377);
            else
              --v377[2];
          }
          v378 = (_DWORD *)v741;
          *(_QWORD *)&v741 = 0;
          if (v378)
          {
            if (v378[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v378 + 8))(v378);
            else
              --v378[2];
          }
          v379 = v739[0];
          if (v739[0])
          {
            v739[0] = 0;
            LODWORD(v739[1]) = 0;
            WTF::fastFree(v379, v352);
          }
          v272 = v596;
          v271 = v598;
          goto LABEL_766;
        }
        v274 = 0;
        v273 = 0;
      }
      else
      {
        v274 = 0;
      }
      v305 = 1;
      goto LABEL_686;
    }
    v94 = (WebCore::Document *)*((_QWORD *)v597 + 37);
    v95 = *((_QWORD *)v94 + 382);
    if (!v95)
    {
      v550 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v550, v94);
      v552 = (WebCore::Editor *)*((_QWORD *)v94 + 382);
      *((_QWORD *)v94 + 382) = v550;
      if (v552)
      {
        WebCore::Editor::~Editor(v552, v551);
        if (*(_DWORD *)v553)
        {
          *(_QWORD *)(v553 + 496) = 0;
          *(_OWORD *)(v553 + 464) = 0u;
          *(_OWORD *)(v553 + 480) = 0u;
          *(_OWORD *)(v553 + 432) = 0u;
          *(_OWORD *)(v553 + 448) = 0u;
          *(_OWORD *)(v553 + 400) = 0u;
          *(_OWORD *)(v553 + 416) = 0u;
          *(_OWORD *)(v553 + 368) = 0u;
          *(_OWORD *)(v553 + 384) = 0u;
          *(_OWORD *)(v553 + 336) = 0u;
          *(_OWORD *)(v553 + 352) = 0u;
          *(_OWORD *)(v553 + 304) = 0u;
          *(_OWORD *)(v553 + 320) = 0u;
          *(_OWORD *)(v553 + 272) = 0u;
          *(_OWORD *)(v553 + 288) = 0u;
          *(_OWORD *)(v553 + 240) = 0u;
          *(_OWORD *)(v553 + 256) = 0u;
          *(_OWORD *)(v553 + 208) = 0u;
          *(_OWORD *)(v553 + 224) = 0u;
          *(_OWORD *)(v553 + 176) = 0u;
          *(_OWORD *)(v553 + 192) = 0u;
          *(_OWORD *)(v553 + 144) = 0u;
          *(_OWORD *)(v553 + 160) = 0u;
          *(_OWORD *)(v553 + 112) = 0u;
          *(_OWORD *)(v553 + 128) = 0u;
          *(_OWORD *)(v553 + 80) = 0u;
          *(_OWORD *)(v553 + 96) = 0u;
          *(_OWORD *)(v553 + 48) = 0u;
          *(_OWORD *)(v553 + 64) = 0u;
          *(_OWORD *)(v553 + 16) = 0u;
          *(_OWORD *)(v553 + 32) = 0u;
          *(_OWORD *)v553 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v553, v554);
        }
      }
      v95 = *((_QWORD *)v94 + 382);
      a1 = (uint64_t)v595;
    }
    WebCore::Editor::promisedAttachmentInfo(v95, (WebCore::Element *)v36, v609);
    v6 = &v719;
    if ((a6 & 1) == 0)
    {
      v97 = v624;
      if (v624)
        *(_DWORD *)v624 += 2;
      v98 = *(WTF::StringImpl **)(v598 + 64);
      *(_QWORD *)(v598 + 64) = v97;
      if (v98)
      {
        if (*(_DWORD *)v98 == 2)
          WTF::StringImpl::destroy(v98, v96);
        else
          *(_DWORD *)v98 -= 2;
      }
      v99 = v626;
      *(_OWORD *)v13 = v625;
      *((_OWORD *)v13 + 1) = v99;
      if (WebCore::Node::computeEditability(v36, 0, 0) == 2)
        WebCore::selectElement((WebCore *)v36, v19);
      if (!v609[0] || !*((_DWORD *)v609[0] + 1))
      {
        if (v627 && *((_DWORD *)v627 + 1))
          a4 = &v627;
        else
          a4 = &v624;
        if (!v632)
          goto LABEL_989;
        WebCore::HitTestResult::altDisplayString((unsigned int *)v630, v19, (WTF::StringImpl **)v669);
        v100 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v36 + 40) + 8) + 528);
        if (v100)
          v101 = *(_QWORD *)(v100 + 8);
        else
          v101 = 0;
        (*(void (**)(_QWORD, uint64_t, uint64_t, WTF::StringImpl **, CFTypeRef *, uint64_t))(**(_QWORD **)(v598 + 8) + 64))(*(_QWORD *)(v598 + 8), *(_QWORD *)(a1 + 32) + 16, v36, a4, v669, v101);
        v103 = (WTF::StringImpl *)v669[0];
        v669[0] = 0;
        if (v103)
        {
          if (*(_DWORD *)v103 == 2)
            WTF::StringImpl::destroy(v103, v102);
          else
            *(_DWORD *)v103 -= 2;
        }
      }
    }
    HIDWORD(a4) = HIDWORD(v598);
    LOBYTE(v10) = (_BYTE)v596;
    (*(void (**)(_QWORD, uint64_t, int32x2_t *, uint64_t))(**(_QWORD **)(v598 + 8) + 16))(*(_QWORD *)(v598 + 8), 2, v596, a1);
    if (v718)
    {
      WebCore::DragImage::DragImage((uint64_t)&v663, (uint64_t)&v718);
      WebCore::DragController::doSystemDrag(v598, &v663, (const WebCore::IntPoint *)&v622, v596, v597, (uint64_t)v609);
      v105 = v663;
      if (v663)
      {
        CFRetain(v663);
        CFRelease(v105);
      }
      if (v667)
      {
        if (v666 != -1)
          ((void (*)(CFTypeRef *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_4[v666])(v669, &v665);
        v666 = -1;
      }
      std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v664, v104);
      v106 = v663;
      v663 = 0;
      if (v106)
        goto LABEL_189;
      goto LABEL_190;
    }
    v13 = (CFTypeRef *)v597;
    if (v632)
    {
      v307 = WebCore::HitTestResult::imageRect(v630, v19);
      v308 = *v596;
      v669[0] = 0;
      LOBYTE(v669[1]) = 0;
      v678 = 0;
      v679 = 0;
      v682 = 0;
      v309 = *(_QWORD *)(v36 + 64);
      if ((v309 & 0xFFFFFFFFFFFFLL) == 0)
        goto LABEL_815;
      if ((*(_BYTE *)((v309 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195F914A0);
      }
      v310 = v306;
      v591 = v307;
      if ((*(_BYTE *)((v309 & 0xFFFFFFFFFFFFLL) + 0x2D) & 1) != 0)
        goto LABEL_622;
      v311 = *(_QWORD *)(*(_QWORD *)((v309 & 0xFFFFFFFFFFFFLL) + 0x18) + 8);
      if (!v311)
        goto LABEL_622;
      v312 = *(_WORD *)(v311 + 28);
      if ((v312 & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195F914C0);
      }
      if ((v312 & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v311 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24)
        && (v313 = *(_QWORD *)(*(_QWORD *)(v311 + 176) + 24)) != 0
        && (v314 = *(_QWORD *)(v313 + 8)) != 0
        && (*(char *)(v314 + 720) & 0x80000000) == 0)
      {
        LOBYTE(v315) = 0;
      }
      else
      {
LABEL_622:
        v315 = ((unint64_t)*(unsigned int *)(*(_QWORD *)((v309 & 0xFFFFFFFFFFFFLL) + 0x68) + 232) >> 15) & 1;
      }
      v592 = HIDWORD(*(_QWORD *)&v308);
      v594 = v308.i32[0];
      v316 = WebCore::getImage(v309, v306);
      v318 = (_DWORD *)v316;
      if (v316)
      {
        ++*(_DWORD *)(v316 + 8);
        if ((int)v310 >= 1 && SHIDWORD(v310) >= 1)
        {
          WebCore::createDragImageFromImage(v316, v315, &v635);
          v736[0] = v635;
          if (v635)
            CFRetain(v635);
          LOBYTE(v736[1]) = 0;
          LOBYTE(v745) = 0;
          LOBYTE(v746) = 0;
          v752 = 0;
          v320 = *(_QWORD *)WebCore::DragImage::operator=((uint64_t)v669, (uint64_t *)v736);
          v321 = v736[0];
          if (v736[0])
          {
            CFRetain(v736[0]);
            CFRelease(v321);
          }
          a1 = (uint64_t)v595;
          if (v752)
          {
            if (v751 != -1)
              ((void (*)(CFTypeRef *, _DWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_4[v751])(v617, &v747);
            v751 = -1;
          }
          std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v736[1], v319);
          v322 = v736[0];
          v736[0] = 0;
          if (v322)
            CFRelease(v322);
          v323 = v635;
          v635 = 0;
          if (v323)
            CFRelease(v323);
          if (v320)
          {
            v324 = v669[0];
            v634 = (unsigned int *)v669[0];
            if (v669[0])
              CFRetain(v669[0]);
            v633 = v310;
            WebCore::fitDragImageToMaxSize((CFTypeRef *)&v634, (int *)&v633, (int *)&WebCore::DragController::maxDragImageSize(void)::maxDragImageSize, v617);
            v736[0] = v617[0];
            if (v617[0])
              CFRetain(v617[0]);
            LOBYTE(v736[1]) = 0;
            LOBYTE(v745) = 0;
            LOBYTE(v746) = 0;
            v752 = 0;
            WebCore::DragImage::operator=((uint64_t)v669, (uint64_t *)v736);
            v326 = v736[0];
            if (v736[0])
            {
              CFRetain(v736[0]);
              CFRelease(v326);
            }
            if (v752)
            {
              if (v751 != -1)
                ((void (*)(char *, _DWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_4[v751])(&v636, &v747);
              v751 = -1;
            }
            std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v736[1], v325);
            v327 = v736[0];
            v736[0] = 0;
            if (v327)
              CFRelease(v327);
            v328 = v617[0];
            v617[0] = 0;
            if (v328)
              CFRelease(v328);
            v634 = 0;
            if (v324)
              CFRelease(v324);
            v329 = (CGImage *)v669[0];
            if (v669[0])
              CFRetain(v669[0]);
            v330 = CGImageGetWidth(v329);
            CGImageGetHeight(v329);
            if (v329)
              CFRelease(v329);
            v331 = v669[0];
            if (v669[0])
            {
              CFRetain(v669[0]);
              v736[0] = v331;
              CFRetain(v331);
            }
            else
            {
              v736[0] = 0;
            }
            LOBYTE(v736[1]) = 0;
            LOBYTE(v745) = 0;
            LOBYTE(v746) = 0;
            v752 = 0;
            WebCore::DragImage::operator=((uint64_t)v669, (uint64_t *)v736);
            v333 = v736[0];
            if (v736[0])
            {
              CFRetain(v736[0]);
              CFRelease(v333);
            }
            if (v752)
            {
              if (v751 != -1)
                ((void (*)(WebCore::Element **, _DWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_4[v751])(&v633, &v747);
              v751 = -1;
            }
            std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v736[1], v332);
            v334 = v736[0];
            v736[0] = 0;
            if (v334)
              CFRelease(v334);
            if (v331)
              CFRelease(v331);
            v335 = v669[0];
            if (v669[0])
            {
              CFRetain(v669[0]);
              v736[0] = v335;
              CFRetain(v335);
            }
            else
            {
              v736[0] = 0;
            }
            LOBYTE(v736[1]) = 0;
            LOBYTE(v745) = 0;
            LOBYTE(v746) = 0;
            v752 = 0;
            WebCore::DragImage::operator=((uint64_t)v669, (uint64_t *)v736);
            v337 = v736[0];
            if (v736[0])
            {
              CFRetain(v736[0]);
              CFRelease(v337);
            }
            if (v752)
            {
              if (v751 != -1)
                ((void (*)(WebCore::Element **, _DWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_4[v751])(&v633, &v747);
              v751 = -1;
            }
            std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v736[1], v336);
            v338 = v736[0];
            v736[0] = 0;
            if (v338)
              CFRelease(v338);
            if (v335)
              CFRelease(v335);
            v339 = (float)v330 / (float)(int)v310;
            v340 = v594;
            v341 = (int)((float)((float)((float)((float)SHIDWORD(v591) + (float)SHIDWORD(v310)) - (float)(int)v592)
                               * v339)
                       + 0.5);
            v342 = (int)((float)(v339 * (float)((int)v591 - v594)) + 0.5);
            a1 = (uint64_t)v595;
LABEL_803:
            if (v669[0])
            {
              *(_QWORD *)(v598 + 52) = (v342 + v340) | ((unint64_t)(v341 + v592) << 32);
              WebCore::DragImage::DragImage((uint64_t)v736, (uint64_t)v669);
              WebCore::DragController::doSystemDrag(v598, v736, (const WebCore::IntPoint *)(v598 + 52), v596, v13, (uint64_t)v609);
              v398 = v736[0];
              if (v736[0])
              {
                CFRetain(v736[0]);
                CFRelease(v398);
              }
              if (v752)
              {
                if (v751 != -1)
                  ((void (*)(WebCore::Element **, _DWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_4[v751])(&v633, &v747);
                v751 = -1;
              }
              std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v736[1], v397);
              v399 = v736[0];
              v736[0] = 0;
              if (v399)
                CFRelease(v399);
            }
            if (v318)
            {
              if (v318[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v318 + 8))(v318);
              else
                --v318[2];
            }
LABEL_815:
            v400 = v669[0];
            if (v669[0])
            {
              CFRetain(v669[0]);
              CFRelease(v400);
            }
            if (v682)
            {
              if (v681 != -1)
                ((void (*)(WebCore::Element **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_4[v681])(&v633, v680);
              v681 = -1;
            }
            std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v669[1], v306);
            v106 = v669[0];
            v669[0] = 0;
            if (v106)
LABEL_189:
              CFRelease(v106);
LABEL_190:
            if (HIDWORD(v610[0]))
            {
              v107 = v609[1];
              v108 = 16 * HIDWORD(v610[0]);
              do
              {
                v107 = (WTF::StringImpl *)(std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>::~pair((uint64_t)v107, v19)+ 16);
                v108 -= 16;
              }
              while (v108);
            }
            v109 = v609[1];
            if (v609[1])
            {
              v609[1] = 0;
              LODWORD(v610[0]) = 0;
              WTF::fastFree(v109, v19);
            }
            v110 = v609[0];
            v609[0] = 0;
            if (v110)
            {
              if (*(_DWORD *)v110 == 2)
                WTF::StringImpl::destroy(v110, v19);
              else
                *(_DWORD *)v110 -= 2;
            }
LABEL_973:
            v35 = 1;
            goto LABEL_1040;
          }
        }
      }
      v393 = *(_QWORD *)(v36 + 64) & 0xFFFFFFFFFFFFLL;
      if (!v393)
        goto LABEL_801;
      if ((*(_BYTE *)((*(_QWORD *)(v36 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195F91520);
      }
      if ((((*(_BYTE *)((*(_QWORD *)(v36 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3) & *(_BYTE *)((*(_QWORD *)(v36 + 64) & 0xFFFFFFFFFFFFLL)
                                                                                                  + 0x35)) != 1)
        goto LABEL_801;
      v394 = *(_DWORD *)((*(_QWORD *)(v36 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
      *(_DWORD *)((*(_QWORD *)(v36 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v394 + 1;
      if (v394 == -1)
      {
        __break(0xC471u);
        JUMPOUT(0x195F91540);
      }
      v395 = *(_QWORD *)(*(_QWORD *)(v393 + 224) + 24);
      if (!v395)
      {
        *(_DWORD *)(v393 + 16) = v394;
        goto LABEL_801;
      }
      v396 = *(_QWORD *)(v395 + 8);
      *(_DWORD *)(v393 + 16) = v394;
      if (!v396)
        goto LABEL_801;
      v559 = *(_QWORD *)(v396 + 8);
      if (v559)
        goto LABEL_1315;
      v559 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v559 = 1;
      *(_QWORD *)(v559 + 8) = v396;
      v588 = *(unsigned int **)(v396 + 8);
      *(_QWORD *)(v396 + 8) = v559;
      if (!v588)
        goto LABEL_1315;
      do
      {
        v589 = __ldaxr(v588);
        v590 = v589 - 1;
      }
      while (__stlxr(v590, v588));
      if (!v590)
      {
        atomic_store(1u, v588);
        WTF::fastFree((WTF *)v588, v317);
      }
      v559 = *(_QWORD *)(v396 + 8);
      a1 = (uint64_t)v595;
      v13 = (CFTypeRef *)v597;
      if (v559)
      {
LABEL_1315:
        do
          v560 = __ldaxr((unsigned int *)v559);
        while (__stlxr(v560 + 1, (unsigned int *)v559));
        v634 = (unsigned int *)v559;
        v561 = *(_QWORD *)(v559 + 8);
        if (!v561)
          goto LABEL_1267;
        v617[0] = &v634;
        ++*(_DWORD *)(v561 + 548);
        v562 = *(_QWORD *)(v561 + 488);
        if (v562)
        {
          if (*(_QWORD *)(v562 + 8))
          {
            WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v561 + 464), (uint64_t *)v617, (uint64_t)v736);
            if (!v634)
              goto LABEL_1267;
            v561 = *((_QWORD *)v634 + 1);
            if (!v561)
              goto LABEL_1267;
          }
        }
        v563 = *(uint64_t **)(v561 + 400);
        if (!v563)
        {
          v564 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
          if (v564 != -1)
          {
            v736[0] = &v633;
            v617[0] = v736;
            std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, v617, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
          }
          v563 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
        }
        v565 = (void *)v563[30];
        if (!v565)
        {
          if ((*((_BYTE *)v563 + 138) & 1) != 0)
          {
            v565 = 0;
          }
          else
          {
            WebCore::ResourceResponse::initNSURLResponse((WebCore::ResourceResponse *)v563);
            v565 = (void *)v563[30];
          }
        }
        MEMORY[0x19AEA5508](v617, objc_msgSend(v565, "suggestedFilename"));
        v736[0] = 0;
        LOBYTE(v736[1]) = 0;
        LOBYTE(v745) = 0;
        LOBYTE(v746) = 0;
        v752 = 0;
        WebCore::DragImage::operator=((uint64_t)v669, (uint64_t *)v736);
        v567 = v736[0];
        if (v736[0])
        {
          CFRetain(v736[0]);
          CFRelease(v567);
        }
        if (v752)
        {
          if (v751 != -1)
            ((void (*)(WebCore::Element **, _DWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_4[v751])(&v633, &v747);
          v751 = -1;
        }
        std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v736[1], v566);
        v568 = v736[0];
        v736[0] = 0;
        if (v568)
          CFRelease(v568);
        v569 = (WTF::StringImpl *)v617[0];
        v617[0] = 0;
        if (v569)
        {
          if (*(_DWORD *)v569 == 2)
            WTF::StringImpl::destroy(v569, (WTF::StringImpl *)v317);
          else
            *(_DWORD *)v569 -= 2;
        }
        v570 = v669[0];
        if (v669[0])
        {
          CFRetain(v669[0]);
          v736[0] = v570;
          CFRetain(v570);
          LOBYTE(v736[1]) = 0;
          LOBYTE(v745) = 0;
          LOBYTE(v746) = 0;
          v752 = 0;
          WebCore::DragImage::operator=((uint64_t)v669, (uint64_t *)v736);
          v572 = v736[0];
          if (v736[0])
          {
            CFRetain(v736[0]);
            CFRelease(v572);
          }
          if (v752)
          {
            if (v751 != -1)
              ((void (*)(CFTypeRef *, _DWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_4[v751])(v617, &v747);
            v751 = -1;
          }
          std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v736[1], v571);
          v573 = v736[0];
          v736[0] = 0;
          if (v573)
            CFRelease(v573);
          CFRelease(v570);
          v574 = (CGImage *)v669[0];
          if (v669[0])
            CFRetain(v669[0]);
          v575 = CGImageGetWidth(v574);
          CGImageGetHeight(v574);
          v342 = 7 - v575;
          if (v574)
            CFRelease(v574);
          v341 = 3;
        }
        else
        {
LABEL_1267:
          v342 = 0;
          v341 = 0;
        }
        a1 = (uint64_t)v595;
        v13 = (CFTypeRef *)v597;
      }
      else
      {
LABEL_801:
        v342 = 0;
        v341 = 0;
        v634 = 0;
      }
      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v634, v317);
      v340 = v594;
      goto LABEL_803;
    }
LABEL_989:
    __break(1u);
LABEL_990:
    v24 = 0;
  }
  LOBYTE(v736[0]) = 0;
  LOBYTE(v737) = 0;
  BYTE8(v737) = 0;
  LOBYTE(v741) = 0;
  BYTE8(v741) = 0;
  v750 = 0;
  v6 = &v719;
  v13 = (CFTypeRef *)v597;
  if ((a6 & 1) != 0)
    goto LABEL_279;
  v40 = *(_QWORD *)(*((_QWORD *)v597 + 37) + 3064);
  if (!*(_BYTE *)(v40 + 153))
    goto LABEL_407;
  WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(v40 + 56), v609);
  a4 = (WTF::StringImpl **)*((_QWORD *)v597 + 37);
  v10 = a4[382];
  if (!v10)
  {
    v490 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v490, (WebCore::Document *)a4);
    v491 = a4[382];
    a4[382] = v490;
    if (v491)
    {
      WebCore::Editor::~Editor(v491, v19);
      if (*(_DWORD *)v492)
      {
        *(_QWORD *)(v492 + 496) = 0;
        *(_OWORD *)(v492 + 464) = 0u;
        *(_OWORD *)(v492 + 480) = 0u;
        *(_OWORD *)(v492 + 432) = 0u;
        *(_OWORD *)(v492 + 448) = 0u;
        *(_OWORD *)(v492 + 400) = 0u;
        *(_OWORD *)(v492 + 416) = 0u;
        *(_OWORD *)(v492 + 368) = 0u;
        *(_OWORD *)(v492 + 384) = 0u;
        *(_OWORD *)(v492 + 336) = 0u;
        *(_OWORD *)(v492 + 352) = 0u;
        *(_OWORD *)(v492 + 304) = 0u;
        *(_OWORD *)(v492 + 320) = 0u;
        *(_OWORD *)(v492 + 272) = 0u;
        *(_OWORD *)(v492 + 288) = 0u;
        *(_OWORD *)(v492 + 240) = 0u;
        *(_OWORD *)(v492 + 256) = 0u;
        *(_OWORD *)(v492 + 208) = 0u;
        *(_OWORD *)(v492 + 224) = 0u;
        *(_OWORD *)(v492 + 176) = 0u;
        *(_OWORD *)(v492 + 192) = 0u;
        *(_OWORD *)(v492 + 144) = 0u;
        *(_OWORD *)(v492 + 160) = 0u;
        *(_OWORD *)(v492 + 112) = 0u;
        *(_OWORD *)(v492 + 128) = 0u;
        *(_OWORD *)(v492 + 80) = 0u;
        *(_OWORD *)(v492 + 96) = 0u;
        *(_OWORD *)(v492 + 48) = 0u;
        *(_OWORD *)(v492 + 64) = 0u;
        *(_OWORD *)(v492 + 16) = 0u;
        *(_OWORD *)(v492 + 32) = 0u;
        *(_OWORD *)v492 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v492, v19);
      }
    }
    v10 = a4[382];
    v6 = &v719;
    a1 = (uint64_t)v595;
    v13 = (CFTypeRef *)v597;
  }
  ++*(_DWORD *)v10;
  if (!(_BYTE)v611)
    goto LABEL_989;
  v41 = v609[0];
  *((_DWORD *)v609[0] + 6) += 2;
  v669[0] = v41;
  LODWORD(v669[1]) = v609[1];
  v42 = v610[0];
  *((_DWORD *)v610[0] + 6) += 2;
  v670 = v42;
  LODWORD(v671) = v610[1];
  BYTE8(v671) = 1;
  v43 = *((_QWORD *)v10 + 1);
  if (!v43)
  {
    v670 = 0;
    goto LABEL_51;
  }
  v44 = *(_QWORD *)(v43 + 8);
  if (!v44 || ((*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v44 + 288))(v44, v669), BYTE8(v671)))
  {
    v42 = v670;
    v670 = 0;
    if (v42)
    {
LABEL_51:
      if (*((_DWORD *)v42 + 6) == 2)
      {
        if ((*((_WORD *)v42 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v42, v19);
      }
      else
      {
        *((_DWORD *)v42 + 6) -= 2;
      }
    }
    v45 = (WebCore::Node *)v669[0];
    v669[0] = 0;
    if (v45)
    {
      if (*((_DWORD *)v45 + 6) == 2)
      {
        if ((*((_WORD *)v45 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v45, v19);
      }
      else
      {
        *((_DWORD *)v45 + 6) -= 2;
      }
    }
  }
  if (!*(_DWORD *)v10)
  {
    __break(0xC471u);
    goto LABEL_1293;
  }
  --*(_DWORD *)v10;
  v46 = *((_QWORD *)v13[37] + 383);
  v47 = *(_DWORD **)(v46 + 56);
  if (v47)
    v47[6] += 2;
  v669[0] = v47;
  LODWORD(v669[1]) = *(_DWORD *)(v46 + 64);
  BYTE4(v669[1]) = *(_BYTE *)(v46 + 68);
  v48 = *(WebCore::Node **)(v46 + 72);
  if (v48)
    *((_DWORD *)v48 + 6) += 2;
  v670 = v48;
  LODWORD(v671) = *(_DWORD *)(v46 + 80);
  BYTE4(v671) = *(_BYTE *)(v46 + 84);
  v49 = *(_QWORD *)(v46 + 88);
  if (v49)
    *(_DWORD *)(v49 + 24) += 2;
  *((_QWORD *)&v671 + 1) = v49;
  v672 = *(_DWORD *)(v46 + 96);
  v673 = *(_BYTE *)(v46 + 100);
  v50 = *(WTF **)(v46 + 104);
  if (v50)
    *((_DWORD *)v50 + 6) += 2;
  v674[0] = v50;
  LODWORD(v674[1]) = *(_DWORD *)(v46 + 112);
  BYTE4(v674[1]) = *(_BYTE *)(v46 + 116);
  v51 = *(WTF::StringImpl **)(v46 + 120);
  if (v51)
    *((_DWORD *)v51 + 6) += 2;
  v675[0] = v51;
  LODWORD(v675[1]) = *(_DWORD *)(v46 + 128);
  BYTE4(v675[1]) = *(_BYTE *)(v46 + 132);
  v52 = *(WTF::StringImpl **)(v46 + 136);
  if (v52)
    *((_DWORD *)v52 + 6) += 2;
  v676[0] = v52;
  LODWORD(v676[1]) = *(_DWORD *)(v46 + 144);
  BYTE4(v676[1]) = *(_BYTE *)(v46 + 148);
  LOWORD(v677) = *(_WORD *)(v46 + 152);
  BYTE2(v677) = *(_BYTE *)(v46 + 154);
  v53 = WebCore::enclosingTextFormControl((WebCore *)v675, v19);
  WebCore::VisibleSelection::range((WebCore::VisibleSelection *)v669, (uint64_t)v617);
  if (!v619)
  {
    if (v53)
      goto LABEL_204;
LABEL_80:
    v60 = (WebCore::Document *)v13[37];
    v61 = (WebCore::Editor *)*((_QWORD *)v60 + 382);
    if (v593)
    {
      if (!v61)
      {
        v530 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
        WebCore::Editor::Editor(v530, v60);
        v532 = (WebCore::Editor *)*((_QWORD *)v60 + 382);
        *((_QWORD *)v60 + 382) = v530;
        if (v532)
        {
          WebCore::Editor::~Editor(v532, v531);
          if (*(_DWORD *)v533)
          {
            *(_QWORD *)(v533 + 496) = 0;
            *(_OWORD *)(v533 + 464) = 0u;
            *(_OWORD *)(v533 + 480) = 0u;
            *(_OWORD *)(v533 + 432) = 0u;
            *(_OWORD *)(v533 + 448) = 0u;
            *(_OWORD *)(v533 + 400) = 0u;
            *(_OWORD *)(v533 + 416) = 0u;
            *(_OWORD *)(v533 + 368) = 0u;
            *(_OWORD *)(v533 + 384) = 0u;
            *(_OWORD *)(v533 + 336) = 0u;
            *(_OWORD *)(v533 + 352) = 0u;
            *(_OWORD *)(v533 + 304) = 0u;
            *(_OWORD *)(v533 + 320) = 0u;
            *(_OWORD *)(v533 + 272) = 0u;
            *(_OWORD *)(v533 + 288) = 0u;
            *(_OWORD *)(v533 + 240) = 0u;
            *(_OWORD *)(v533 + 256) = 0u;
            *(_OWORD *)(v533 + 208) = 0u;
            *(_OWORD *)(v533 + 224) = 0u;
            *(_OWORD *)(v533 + 176) = 0u;
            *(_OWORD *)(v533 + 192) = 0u;
            *(_OWORD *)(v533 + 144) = 0u;
            *(_OWORD *)(v533 + 160) = 0u;
            *(_OWORD *)(v533 + 112) = 0u;
            *(_OWORD *)(v533 + 128) = 0u;
            *(_OWORD *)(v533 + 80) = 0u;
            *(_OWORD *)(v533 + 96) = 0u;
            *(_OWORD *)(v533 + 48) = 0u;
            *(_OWORD *)(v533 + 64) = 0u;
            *(_OWORD *)(v533 + 16) = 0u;
            *(_OWORD *)(v533 + 32) = 0u;
            *(_OWORD *)v533 = 0u;
          }
          else
          {
            WTF::fastFree((WTF *)v533, v534);
          }
        }
        v61 = (WebCore::Editor *)*((_QWORD *)v60 + 382);
        v13 = (CFTypeRef *)v597;
      }
      ++*(_DWORD *)v61;
      a1 = (uint64_t)v595;
      WebCore::Editor::writeSelectionToPasteboard(v61, *((WebCore::Pasteboard **)v595 + 4));
      if (!*(_DWORD *)v61)
      {
        __break(0xC471u);
        JUMPOUT(0x195F91038);
      }
      --*(_DWORD *)v61;
      goto LABEL_267;
    }
    if (!v61)
    {
      v535 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v535, v60);
      v537 = (WebCore::Editor *)*((_QWORD *)v60 + 382);
      *((_QWORD *)v60 + 382) = v535;
      if (v537)
      {
        WebCore::Editor::~Editor(v537, v536);
        if (*(_DWORD *)v538)
        {
          *(_QWORD *)(v538 + 496) = 0;
          *(_OWORD *)(v538 + 464) = 0u;
          *(_OWORD *)(v538 + 480) = 0u;
          *(_OWORD *)(v538 + 432) = 0u;
          *(_OWORD *)(v538 + 448) = 0u;
          *(_OWORD *)(v538 + 400) = 0u;
          *(_OWORD *)(v538 + 416) = 0u;
          *(_OWORD *)(v538 + 368) = 0u;
          *(_OWORD *)(v538 + 384) = 0u;
          *(_OWORD *)(v538 + 336) = 0u;
          *(_OWORD *)(v538 + 352) = 0u;
          *(_OWORD *)(v538 + 304) = 0u;
          *(_OWORD *)(v538 + 320) = 0u;
          *(_OWORD *)(v538 + 272) = 0u;
          *(_OWORD *)(v538 + 288) = 0u;
          *(_OWORD *)(v538 + 240) = 0u;
          *(_OWORD *)(v538 + 256) = 0u;
          *(_OWORD *)(v538 + 208) = 0u;
          *(_OWORD *)(v538 + 224) = 0u;
          *(_OWORD *)(v538 + 176) = 0u;
          *(_OWORD *)(v538 + 192) = 0u;
          *(_OWORD *)(v538 + 144) = 0u;
          *(_OWORD *)(v538 + 160) = 0u;
          *(_OWORD *)(v538 + 112) = 0u;
          *(_OWORD *)(v538 + 128) = 0u;
          *(_OWORD *)(v538 + 80) = 0u;
          *(_OWORD *)(v538 + 96) = 0u;
          *(_OWORD *)(v538 + 48) = 0u;
          *(_OWORD *)(v538 + 64) = 0u;
          *(_OWORD *)(v538 + 16) = 0u;
          *(_OWORD *)(v538 + 32) = 0u;
          *(_OWORD *)v538 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v538, v539);
        }
      }
      v61 = (WebCore::Editor *)*((_QWORD *)v60 + 382);
      v13 = (CFTypeRef *)v597;
    }
    ++*(_DWORD *)v61;
    WebCore::Editor::writeSelection(v61, (WebCore::PasteboardWriterData *)v736);
    if (!*(_DWORD *)v61)
    {
      __break(0xC471u);
      JUMPOUT(0x195F91058);
    }
    --*(_DWORD *)v61;
    goto LABEL_266;
  }
  isInsideOverlay = WebCore::ImageOverlay::isInsideOverlay((WebCore::ImageOverlay *)v617, v54);
  if (v53)
    v57 = 1;
  else
    v57 = isInsideOverlay;
  if (!v619)
    goto LABEL_855;
  v58 = v618;
  v618 = 0;
  if (v58)
  {
    if (*((_DWORD *)v58 + 6) == 2)
    {
      if ((*((_WORD *)v58 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v58, v56);
    }
    else
    {
      *((_DWORD *)v58 + 6) -= 2;
    }
  }
  v59 = (WebCore::Node *)v617[0];
  v617[0] = 0;
  if (!v59)
  {
LABEL_855:
    if (v57)
      goto LABEL_204;
    goto LABEL_80;
  }
  if (*((_DWORD *)v59 + 6) == 2)
  {
    if ((*((_WORD *)v59 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v59, v56);
      if ((v57 & 1) != 0)
        goto LABEL_204;
      goto LABEL_80;
    }
    goto LABEL_855;
  }
  *((_DWORD *)v59 + 6) -= 2;
  if ((v57 & 1) == 0)
    goto LABEL_80;
LABEL_204:
  if (!v593)
  {
    v118 = (WebCore::Document *)v13[37];
    v119 = *((_QWORD *)v118 + 382);
    if (!v119)
    {
      v519 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v519, v118);
      v521 = (WebCore::Editor *)*((_QWORD *)v118 + 382);
      *((_QWORD *)v118 + 382) = v519;
      if (v521)
      {
        WebCore::Editor::~Editor(v521, v520);
        if (*(_DWORD *)v522)
        {
          *(_QWORD *)(v522 + 496) = 0;
          *(_OWORD *)(v522 + 464) = 0u;
          *(_OWORD *)(v522 + 480) = 0u;
          *(_OWORD *)(v522 + 432) = 0u;
          *(_OWORD *)(v522 + 448) = 0u;
          *(_OWORD *)(v522 + 400) = 0u;
          *(_OWORD *)(v522 + 416) = 0u;
          *(_OWORD *)(v522 + 368) = 0u;
          *(_OWORD *)(v522 + 384) = 0u;
          *(_OWORD *)(v522 + 336) = 0u;
          *(_OWORD *)(v522 + 352) = 0u;
          *(_OWORD *)(v522 + 304) = 0u;
          *(_OWORD *)(v522 + 320) = 0u;
          *(_OWORD *)(v522 + 272) = 0u;
          *(_OWORD *)(v522 + 288) = 0u;
          *(_OWORD *)(v522 + 240) = 0u;
          *(_OWORD *)(v522 + 256) = 0u;
          *(_OWORD *)(v522 + 208) = 0u;
          *(_OWORD *)(v522 + 224) = 0u;
          *(_OWORD *)(v522 + 176) = 0u;
          *(_OWORD *)(v522 + 192) = 0u;
          *(_OWORD *)(v522 + 144) = 0u;
          *(_OWORD *)(v522 + 160) = 0u;
          *(_OWORD *)(v522 + 112) = 0u;
          *(_OWORD *)(v522 + 128) = 0u;
          *(_OWORD *)(v522 + 80) = 0u;
          *(_OWORD *)(v522 + 96) = 0u;
          *(_OWORD *)(v522 + 48) = 0u;
          *(_OWORD *)(v522 + 64) = 0u;
          *(_OWORD *)(v522 + 16) = 0u;
          *(_OWORD *)(v522 + 32) = 0u;
          *(_OWORD *)v522 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v522, v523);
        }
      }
      v119 = *((_QWORD *)v118 + 382);
      v13 = (CFTypeRef *)v597;
    }
    v120 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v119 + 16) + 8) + 688);
    if (!v120)
      v120 = WebCore::Document::ensureQuirks(*(WebCore::Document **)(*(_QWORD *)(v119 + 16) + 8));
    if (*(_BYTE *)(v120 + 66))
      v121 = 576;
    else
      v121 = 2624;
    WebCore::Editor::selectedText(v119, v121, v617);
    LOBYTE(v736[0]) = 0;
    if ((_BYTE)v737)
    {
      v117 = (WTF::StringImpl *)v736[1];
      v736[1] = v617[0];
      goto LABEL_220;
    }
    v736[1] = v617[0];
    LOBYTE(v737) = 1;
LABEL_266:
    a1 = (uint64_t)v595;
    goto LABEL_267;
  }
  v111 = *(_QWORD *)(a1 + 32);
  v112 = (WebCore::Document *)v13[37];
  v113 = *((_QWORD *)v112 + 382);
  if (!v113)
  {
    v514 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v514, v112);
    v516 = (WebCore::Editor *)*((_QWORD *)v112 + 382);
    *((_QWORD *)v112 + 382) = v514;
    if (v516)
    {
      WebCore::Editor::~Editor(v516, v515);
      if (*(_DWORD *)v517)
      {
        *(_QWORD *)(v517 + 496) = 0;
        *(_OWORD *)(v517 + 464) = 0u;
        *(_OWORD *)(v517 + 480) = 0u;
        *(_OWORD *)(v517 + 432) = 0u;
        *(_OWORD *)(v517 + 448) = 0u;
        *(_OWORD *)(v517 + 400) = 0u;
        *(_OWORD *)(v517 + 416) = 0u;
        *(_OWORD *)(v517 + 368) = 0u;
        *(_OWORD *)(v517 + 384) = 0u;
        *(_OWORD *)(v517 + 336) = 0u;
        *(_OWORD *)(v517 + 352) = 0u;
        *(_OWORD *)(v517 + 304) = 0u;
        *(_OWORD *)(v517 + 320) = 0u;
        *(_OWORD *)(v517 + 272) = 0u;
        *(_OWORD *)(v517 + 288) = 0u;
        *(_OWORD *)(v517 + 240) = 0u;
        *(_OWORD *)(v517 + 256) = 0u;
        *(_OWORD *)(v517 + 208) = 0u;
        *(_OWORD *)(v517 + 224) = 0u;
        *(_OWORD *)(v517 + 176) = 0u;
        *(_OWORD *)(v517 + 192) = 0u;
        *(_OWORD *)(v517 + 144) = 0u;
        *(_OWORD *)(v517 + 160) = 0u;
        *(_OWORD *)(v517 + 112) = 0u;
        *(_OWORD *)(v517 + 128) = 0u;
        *(_OWORD *)(v517 + 80) = 0u;
        *(_OWORD *)(v517 + 96) = 0u;
        *(_OWORD *)(v517 + 48) = 0u;
        *(_OWORD *)(v517 + 64) = 0u;
        *(_OWORD *)(v517 + 16) = 0u;
        *(_OWORD *)(v517 + 32) = 0u;
        *(_OWORD *)v517 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v517, v518);
      }
    }
    v113 = *((_QWORD *)v112 + 382);
    v13 = (CFTypeRef *)v597;
  }
  v114 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v113 + 16) + 8) + 688);
  if (!v114)
    v114 = WebCore::Document::ensureQuirks(*(WebCore::Document **)(*(_QWORD *)(v113 + 16) + 8));
  if (*(_BYTE *)(v114 + 66))
    v115 = 576;
  else
    v115 = 2624;
  WebCore::Editor::selectedText(v113, v115, v617);
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t))(*(_QWORD *)v111 + 208))(v111, v617, 1);
  v117 = (WTF::StringImpl *)v617[0];
  v617[0] = 0;
LABEL_220:
  a1 = (uint64_t)v595;
  if (v117)
  {
    if (*(_DWORD *)v117 == 2)
      WTF::StringImpl::destroy(v117, v116);
    else
      *(_DWORD *)v117 -= 2;
  }
LABEL_267:
  v143 = (WebCore::Document *)v13[37];
  v144 = *((_QWORD *)v143 + 382);
  if (!v144)
  {
    v493 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v493, v143);
    v495 = (WebCore::Editor *)*((_QWORD *)v143 + 382);
    *((_QWORD *)v143 + 382) = v493;
    if (v495)
    {
      WebCore::Editor::~Editor(v495, v494);
      if (*(_DWORD *)v496)
      {
        *(_QWORD *)(v496 + 496) = 0;
        *(_OWORD *)(v496 + 464) = 0u;
        *(_OWORD *)(v496 + 480) = 0u;
        *(_OWORD *)(v496 + 432) = 0u;
        *(_OWORD *)(v496 + 448) = 0u;
        *(_OWORD *)(v496 + 400) = 0u;
        *(_OWORD *)(v496 + 416) = 0u;
        *(_OWORD *)(v496 + 368) = 0u;
        *(_OWORD *)(v496 + 384) = 0u;
        *(_OWORD *)(v496 + 336) = 0u;
        *(_OWORD *)(v496 + 352) = 0u;
        *(_OWORD *)(v496 + 304) = 0u;
        *(_OWORD *)(v496 + 320) = 0u;
        *(_OWORD *)(v496 + 272) = 0u;
        *(_OWORD *)(v496 + 288) = 0u;
        *(_OWORD *)(v496 + 240) = 0u;
        *(_OWORD *)(v496 + 256) = 0u;
        *(_OWORD *)(v496 + 208) = 0u;
        *(_OWORD *)(v496 + 224) = 0u;
        *(_OWORD *)(v496 + 176) = 0u;
        *(_OWORD *)(v496 + 192) = 0u;
        *(_OWORD *)(v496 + 144) = 0u;
        *(_OWORD *)(v496 + 160) = 0u;
        *(_OWORD *)(v496 + 112) = 0u;
        *(_OWORD *)(v496 + 128) = 0u;
        *(_OWORD *)(v496 + 80) = 0u;
        *(_OWORD *)(v496 + 96) = 0u;
        *(_OWORD *)(v496 + 48) = 0u;
        *(_OWORD *)(v496 + 64) = 0u;
        *(_OWORD *)(v496 + 16) = 0u;
        *(_OWORD *)(v496 + 32) = 0u;
        *(_OWORD *)v496 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v496, v497);
      }
    }
    v144 = *((_QWORD *)v143 + 382);
    a1 = (uint64_t)v595;
    v13 = (CFTypeRef *)v597;
  }
  v145 = *(_DWORD *)v144 + 1;
  *(_DWORD *)v144 = v145;
  v146 = *(_QWORD *)(v144 + 8);
  if (v146)
  {
    v147 = *(_QWORD *)(v146 + 8);
    if (v147)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v147 + 296))(v147);
      v145 = *(_DWORD *)v144;
    }
  }
  if (!v145)
  {
    __break(0xC471u);
    JUMPOUT(0x195F90F8CLL);
  }
  *(_DWORD *)v144 = v145 - 1;
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v669);
  if ((_BYTE)v611)
  {
    v149 = v610[0];
    v610[0] = 0;
    if (v149)
    {
      if (*((_DWORD *)v149 + 6) == 2)
      {
        if ((*((_WORD *)v149 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v149, v148);
      }
      else
      {
        *((_DWORD *)v149 + 6) -= 2;
      }
    }
    v150 = v609[0];
    v609[0] = 0;
    if (v150)
    {
      if (*((_DWORD *)v150 + 6) == 2)
      {
        if ((*((_WORD *)v150 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v150, v148);
      }
      else
      {
        *((_DWORD *)v150 + 6) -= 2;
      }
    }
  }
LABEL_279:
  (*(void (**)(_QWORD, uint64_t, int32x2_t *, uint64_t))(**(_QWORD **)(v598 + 8) + 16))(*(_QWORD *)(v598 + 8), 8, v596, a1);
  if (v718)
    goto LABEL_358;
  v611 = 0u;
  *(_OWORD *)v612 = 0u;
  *(_OWORD *)v609 = 0u;
  *(_OWORD *)v610 = 0u;
  LODWORD(v613) = 1065353216;
  HIWORD(v616) = 0;
  v614 = 0u;
  v615 = 0u;
  LOBYTE(v616) = 0;
  WebCore::createDragImageForSelection((WebCore::SimpleRange *)v13, (uint64_t)v609, 0, &v608);
  v151 = v608;
  v608 = 0;
  v669[0] = v151;
  if (v151)
    CFRetain(v151);
  LOBYTE(v669[1]) = 0;
  v678 = 0;
  v679 = 0;
  v682 = 0;
  WebCore::DragImage::operator=((uint64_t)&v718, (uint64_t *)v669);
  v153 = v669[0];
  if (v669[0])
  {
    CFRetain(v669[0]);
    CFRelease(v153);
  }
  if (v682)
  {
    if (v681 != -1)
      ((void (*)(CFTypeRef *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_4[v681])(v617, v680);
    v681 = -1;
  }
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v669[1], v152);
  v154 = v669[0];
  v669[0] = 0;
  if (v154)
    CFRelease(v154);
  if (v151)
    CFRelease(v151);
  v155 = v608;
  v608 = 0;
  if (v155)
    CFRelease(v155);
  a1 = (uint64_t)v595;
  if ((_QWORD)v615)
  {
    if (v731)
    {
      WebCore::TextIndicatorData::operator=((uint64_t)&v719, (__int128 *)v609);
    }
    else
    {
      v719 = *(_OWORD *)v609;
      v720 = *(_OWORD *)v610;
      v721 = v611;
      v156 = HIDWORD(v612[1]);
      v723 = 0;
      v722 = 0;
      v724 = HIDWORD(v612[1]);
      if (HIDWORD(v612[1]))
      {
        if (HIDWORD(v612[1]) >> 28)
        {
          __break(0xC471u);
          JUMPOUT(0x195F91D90);
        }
        v461 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * HIDWORD(v612[1])));
        v723 = v156;
        v722 = v461;
        if (HIDWORD(v612[1]))
        {
          v462 = v612[0];
          v463 = 16 * HIDWORD(v612[1]);
          do
          {
            v464 = *(_OWORD *)v462;
            v462 = (WTF *)((char *)v462 + 16);
            *v461++ = v464;
            v463 -= 16;
          }
          while (v463);
        }
      }
      v725 = v613;
      v157 = v614;
      if ((_QWORD)v614)
        ++*(_DWORD *)(v614 + 8);
      v726 = v157;
      v158 = *((_QWORD *)&v614 + 1);
      if (*((_QWORD *)&v614 + 1))
        ++*(_DWORD *)(*((_QWORD *)&v614 + 1) + 8);
      v727 = v158;
      v159 = v615;
      if ((_QWORD)v615)
        ++*(_DWORD *)(v615 + 8);
      v728 = v159;
      v729 = *((_QWORD *)&v615 + 1);
      if ((*((_QWORD *)&v615 + 1) & 0x8000000000000) != 0)
      {
        v512 = (unsigned int *)(*((_QWORD *)&v615 + 1) & 0xFFFFFFFFFFFFLL);
        do
          v513 = __ldaxr(v512);
        while (__stlxr(v513 + 1, v512));
      }
      v730 = v616;
      v731 = 1;
    }
  }
  WebCore::FrameSelection::selectionBounds(*((_QWORD *)v13[37] + 383), 1);
  v164 = floorf(v160);
  v165 = 2147500000.0;
  if (v164 < 2147500000.0)
  {
    v165 = -2147500000.0;
    if (v164 > -2147500000.0)
      v165 = (float)(int)v164;
  }
  v166 = floorf(v161);
  v167 = 2147500000.0;
  if (v166 < 2147500000.0)
  {
    v167 = -2147500000.0;
    if (v166 > -2147500000.0)
      v167 = (float)(int)v166;
  }
  v168 = v161 + v163;
  v169 = ceilf(v160 + v162);
  v170 = 2147500000.0;
  if (v169 < 2147500000.0)
  {
    v170 = -2147500000.0;
    if (v169 > -2147500000.0)
      v170 = (float)(int)v169;
  }
  v171 = ceilf(v168);
  v172 = 2147500000.0;
  if (v171 < 2147500000.0)
  {
    v172 = -2147500000.0;
    if (v171 > -2147500000.0)
      v172 = (float)(int)v171;
  }
  if (v165 > -2147500000.0)
    v173 = (int)v165;
  else
    v173 = 0x80000000;
  if (v165 < 2147500000.0)
    LODWORD(v174) = v173;
  else
    LODWORD(v174) = 0x7FFFFFFF;
  if (v167 > -2147500000.0)
    v175 = (int)v167;
  else
    v175 = 0x80000000;
  if (v167 < 2147500000.0)
    LODWORD(v176) = v175;
  else
    LODWORD(v176) = 0x7FFFFFFF;
  v177 = v170 - v165;
  v178 = v172 - v167;
  if (v177 >= 2147500000.0)
  {
    v179 = 0x7FFFFFFF;
  }
  else if (v177 <= -2147500000.0)
  {
    v179 = 0x80000000;
  }
  else
  {
    v179 = (int)v177;
  }
  if (v178 > -2147500000.0)
    v180 = (int)v178;
  else
    v180 = 0x80000000;
  if (v178 < 2147500000.0)
    v181 = v180;
  else
    v181 = 0x7FFFFFFF;
  v182 = v179 + v174;
  if (v182 >= (int)v174)
    v174 = v174;
  else
    v174 = v182;
  if (v181 + (int)v176 <= (int)v176)
    v176 = v176;
  else
    v176 = (v181 + v176);
  v622 = v174 | (v176 << 32);
  *(_QWORD *)(v598 + 52) = (v596->i32[0] - v174) | ((unint64_t)(v596->i32[1] - v176) << 32);
  if ((*((_QWORD *)&v615 + 1) & 0x8000000000000) != 0)
  {
    v576 = (unsigned int *)(*((_QWORD *)&v615 + 1) & 0xFFFFFFFFFFFFLL);
    do
    {
      v577 = __ldaxr(v576);
      v578 = v577 - 1;
    }
    while (__stlxr(v578, v576));
    a1 = (uint64_t)v595;
    v13 = (CFTypeRef *)v597;
    if (!v578)
    {
      atomic_store(1u, v576);
      WTF::fastFree((WTF *)v576, v38);
    }
  }
  v183 = (_DWORD *)v615;
  *(_QWORD *)&v615 = 0;
  if (v183)
  {
    if (v183[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v183 + 8))(v183);
    else
      --v183[2];
  }
  v184 = (_DWORD *)*((_QWORD *)&v614 + 1);
  *((_QWORD *)&v614 + 1) = 0;
  if (v184)
  {
    if (v184[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v184 + 8))(v184);
    else
      --v184[2];
  }
  v185 = (_DWORD *)v614;
  *(_QWORD *)&v614 = 0;
  if (v185)
  {
    if (v185[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v185 + 8))(v185);
    else
      --v185[2];
  }
  v186 = v612[0];
  if (v612[0])
  {
    v612[0] = 0;
    LODWORD(v612[1]) = 0;
    WTF::fastFree(v186, v38);
  }
  if (v718)
  {
LABEL_358:
    if (v593)
    {
      WebCore::DragImage::DragImage((uint64_t)&v713, (uint64_t)&v718);
      v669[1] = 0;
      v669[0] = 0;
      v670 = 0;
      WebCore::DragController::doSystemDrag(v598, &v713, (const WebCore::IntPoint *)&v622, v596, v13, (uint64_t)v669);
      v188 = (WTF *)v669[1];
      if (HIDWORD(v670))
      {
        v189 = 16 * HIDWORD(v670);
        v190 = v669[1];
        do
        {
          v190 = (CFTypeRef)(std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>::~pair((uint64_t)v190, v187)+ 16);
          v189 -= 16;
        }
        while (v189);
      }
      if (v188)
        WTF::fastFree(v188, v187);
      if (v669[0])
      {
        if (*(_DWORD *)v669[0] == 2)
          WTF::StringImpl::destroy((WTF::StringImpl *)v669[0], (WTF::StringImpl *)v187);
        else
          *(_DWORD *)v669[0] -= 2;
      }
      v191 = v713;
      if (v713)
      {
        CFRetain(v713);
        CFRelease(v191);
      }
      if (v717)
      {
        if (v716 != -1)
          ((void (*)(CFTypeRef *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_4[v716])(v669, &v715);
        v716 = -1;
      }
      std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v714, v187);
      v192 = v713;
      v713 = 0;
      if (v192)
        CFRelease(v192);
      v35 = 1;
    }
    else
    {
      v669[0] = 0;
      LOBYTE(v669[1]) = 0;
      v678 = 0;
      v679 = 0;
      v682 = 0;
      v683 = 0;
      v684 = 0;
      v685 = 0;
      v687 = 0;
      v686 = 0;
      v689[0] = 0;
      v688 = 0;
      WTF::URL::invalidate((WTF::URL *)v689);
      v691 = 0;
      v690 = 0;
      v692 = 0;
      v698 = 0;
      v699[0] = 0;
      v700 = 0;
      LOBYTE(v701) = 0;
      v712 = 0;
      v695 = 0;
      v693 = 0;
      v694 = 0;
      v696 = 0;
      WebCore::FrameSelection::selectionBounds(*((_QWORD *)v13[37] + 383), 1);
      v197 = floorf(v193);
      v198 = 2147500000.0;
      if (v197 < 2147500000.0)
      {
        v198 = -2147500000.0;
        if (v197 > -2147500000.0)
          v198 = (float)(int)v197;
      }
      v199 = floorf(v194);
      v200 = 2147500000.0;
      if (v199 < 2147500000.0)
      {
        v200 = -2147500000.0;
        if (v199 > -2147500000.0)
          v200 = (float)(int)v199;
      }
      v201 = v194 + v196;
      v202 = ceilf(v193 + v195);
      v203 = 2147500000.0;
      if (v202 < 2147500000.0)
      {
        v203 = -2147500000.0;
        if (v202 > -2147500000.0)
          v203 = (float)(int)v202;
      }
      v204 = ceilf(v201);
      v205 = 2147500000.0;
      if (v204 < 2147500000.0)
      {
        v205 = -2147500000.0;
        if (v204 > -2147500000.0)
          v205 = (float)(int)v204;
      }
      if (v198 >= 2147500000.0)
      {
        v206 = 0x7FFFFFFF;
      }
      else if (v198 <= -2147500000.0)
      {
        v206 = 0x80000000;
      }
      else
      {
        v206 = (int)v198;
      }
      if (v200 >= 2147500000.0)
      {
        v207 = 0x7FFFFFFF;
      }
      else if (v200 <= -2147500000.0)
      {
        v207 = 0x80000000;
      }
      else
      {
        v207 = (int)v200;
      }
      v208 = v203 - v198;
      v209 = v205 - v200;
      if (v208 >= 2147500000.0)
      {
        v210 = 0x7FFFFFFF;
      }
      else if (v208 <= -2147500000.0)
      {
        v210 = 0x80000000;
      }
      else
      {
        v210 = (int)v208;
      }
      if (v209 >= 2147500000.0)
      {
        v211 = 0x7FFFFFFF;
      }
      else if (v209 <= -2147500000.0)
      {
        v211 = 0x80000000;
      }
      else
      {
        v211 = (int)v209;
      }
      v683 = vdiv_f32(vcvt_f32_s32(vsub_s32((int32x2_t)v623, (int32x2_t)__PAIR64__(v207, v206))), vcvt_f32_s32((int32x2_t)__PAIR64__(v211, v210)));
      WebCore::DragImage::operator=((uint64_t)v669, (uint64_t *)&v718);
      if (v698 == v737)
      {
        if (v698)
        {
          v696 = (char)v736[0];
          v213 = (WTF::StringImpl *)v736[1];
          if (v736[1])
            *(_DWORD *)v736[1] += 2;
          v214 = v697;
          v697 = v213;
          if (v214)
          {
            if (*(_DWORD *)v214 == 2)
              WTF::StringImpl::destroy(v214, v212);
            else
              *(_DWORD *)v214 -= 2;
          }
        }
      }
      else if (v698)
      {
        v215 = v697;
        v697 = 0;
        if (v215)
        {
          if (*(_DWORD *)v215 == 2)
            WTF::StringImpl::destroy(v215, v212);
          else
            *(_DWORD *)v215 -= 2;
        }
        v698 = 0;
      }
      else
      {
        v696 = (char)v736[0];
        v216 = (WTF::StringImpl *)v736[1];
        if (v736[1])
          *(_DWORD *)v736[1] += 2;
        v697 = v216;
        v698 = 1;
      }
      std::__optional_storage_base<WebCore::PasteboardWriterData::URLData,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::PasteboardWriterData::URLData,false> const&>((uint64_t)v699, (uint64_t)&v737 + 8);
      if (v712 == v750)
      {
        a1 = (uint64_t)v595;
        if (v712)
          WebCore::PasteboardWriterData::WebContent::operator=((uint64_t)&v701, (uint64_t)&v741 + 8);
      }
      else
      {
        a1 = (uint64_t)v595;
        if (v712)
        {
          WebCore::PasteboardWriterData::WebContent::~WebContent((WebCore::PasteboardWriterData::WebContent *)&v701, v217);
          v712 = 0;
        }
        else
        {
          v218 = *((_QWORD *)&v741 + 1);
          if (*((_QWORD *)&v741 + 1))
            **((_DWORD **)&v741 + 1) += 2;
          v701 = v218;
          v702 = v742;
          v219 = (unsigned int *)*((_QWORD *)&v742 + 1);
          if (*((_QWORD *)&v742 + 1))
          {
            do
              v220 = __ldaxr(v219);
            while (__stlxr(v220 + 1, v219));
          }
          v703 = v219;
          v221 = v743;
          if (v743)
          {
            do
              v222 = __ldaxr(v221);
            while (__stlxr(v222 + 1, v221));
          }
          v704 = v221;
          v223 = v744;
          if (v744)
          {
            do
              v224 = __ldaxr(v223);
            while (__stlxr(v224 + 1, v223));
          }
          v705 = v223;
          v225 = v745;
          if (v745)
          {
            do
              v226 = __ldaxr(v225);
            while (__stlxr(v226 + 1, v225));
          }
          v706 = v225;
          v227 = v746;
          if (v746)
            *v746 += 2;
          v707 = v227;
          v228 = v747;
          if (v747)
            *v747 += 2;
          v229 = v749;
          v710 = 0;
          v708 = v228;
          v709 = 0;
          v711 = v749;
          if (v749)
          {
            if (v749 >> 28)
            {
              __break(0xC471u);
              JUMPOUT(0x195F91D78);
            }
            v230 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v749));
            v710 = v229;
            v709 = v230;
            if (v749)
            {
              v231 = v748;
              v232 = &v748[2 * v749];
              do
              {
                v233 = *v231;
                if (*v231)
                  *v233 += 2;
                *v230 = v233;
                v234 = v231[1];
                if (v234)
                {
                  do
                    v235 = __ldaxr(v234);
                  while (__stlxr(v235 + 1, v234));
                }
                v230[1] = v234;
                v230 += 2;
                v231 += 2;
              }
              while (v231 != v232);
            }
          }
          v712 = 1;
        }
      }
      v35 = 1;
      v692 = 1;
      WebCore::DragItem::DragItem((uint64_t)v668, (uint64_t)v669);
      WebCore::DragController::beginDrag(v598, v668, (uint64_t)v13, (const WebCore::IntPoint *)v596, (const WebCore::IntPoint *)&v623, a1);
      WebCore::DragItem::~DragItem((WebCore::DragItem *)v668, v236);
      WebCore::DragItem::~DragItem((WebCore::DragItem *)v669, v237);
    }
  }
  else
  {
LABEL_407:
    v35 = 0;
  }
  WebCore::PasteboardWriterData::~PasteboardWriterData((WebCore::PasteboardWriterData *)v736, v38);
LABEL_1040:
  if (v39)
  {
    if (v39[2] != 1)
    {
      --v39[2];
      goto LABEL_1043;
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)v39 + 8))(v39);
    if (v36)
    {
LABEL_1044:
      if (*(_DWORD *)(v36 + 24) == 2)
      {
        if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v36, v19);
      }
      else
      {
        *(_DWORD *)(v36 + 24) -= 2;
      }
    }
  }
  else
  {
LABEL_1043:
    if (v36)
      goto LABEL_1044;
  }
  if (a1)
  {
    if (*(_DWORD *)a1 == 1)
    {
      WebCore::DataTransfer::~DataTransfer((WebCore::DataTransfer *)a1, v19);
      WTF::fastFree(v482, v483);
    }
    else
    {
      --*(_DWORD *)a1;
    }
  }
  v474 = v718;
  if (v718)
  {
    CFRetain(v718);
    CFRelease(v474);
  }
  if (v735)
  {
    if (v734 != -1)
      ((void (*)(CFTypeRef *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_4[v734])(v669, v733);
    v734 = -1;
  }
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v719, v19);
  v476 = v718;
  v718 = 0;
  if (v476)
    CFRelease(v476);
  v477 = v624;
  v624 = 0;
  if (v477)
  {
    if (*(_DWORD *)v477 == 2)
      WTF::StringImpl::destroy(v477, v475);
    else
      *(_DWORD *)v477 -= 2;
  }
  v478 = v627;
  v627 = 0;
  if (v478)
  {
    if (*(_DWORD *)v478 == 2)
      WTF::StringImpl::destroy(v478, v475);
    else
      *(_DWORD *)v478 -= 2;
  }
  if (v632)
    WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v630, v475);
  do
  {
LABEL_1065:
    v479 = __ldaxr(v14);
    v480 = v479 - 1;
  }
  while (__stlxr(v480, v14));
  if (!v480)
  {
    atomic_store(1u, v14);
    v484 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v484 = off_1E31FE290;
    v484[1] = v14;
    v669[0] = v484;
    WTF::ensureOnMainThread();
    v485 = v669[0];
    v669[0] = 0;
    if (v485)
      (*(void (**)(CFTypeRef))(*(_QWORD *)v485 + 8))(v485);
  }
  return v35;
}

void WebCore::DragController::doSystemDrag(uint64_t a1, void *a2, const WebCore::IntPoint *a3, int32x2_t *a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  WebCore::ScrollView *v16;
  uint64_t v17;
  WebCore::ScrollView *v18;
  WTF::StringImpl *v19;
  __int16 v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF *v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  WebCore::FrameSelection *v27;
  int8x8_t v28;
  const WebCore::IntPoint *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::String *v34;
  __n128 v35;
  unint64_t v36;
  size_t Height;
  int Width;
  uint64_t v39;
  WTF::StringImpl *v40;
  CGImage *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl **v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  int v54;
  int v55;
  int v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WebCore::Document *v59;
  _QWORD *Attribute;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  __int128 v64;
  uint64_t v65;
  void *v66;
  void *v67;
  unsigned int v68;
  unsigned int v69;
  _QWORD *v70;
  CFTypeRef v71;
  WTF *v72;
  void *v73;
  unsigned int *v74;
  WTF::StringImpl *v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE v81[512];
  CFTypeRef cf;
  char v83;
  char v84;
  char v85;
  char v86;
  uint64_t v87;
  __int16 v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  BOOL v98;
  WTF::StringImpl *v99;
  WTF *v100;
  uint64_t v101;
  char v102;
  char v103;
  char v104;
  char v105;
  char v106;
  char v107;
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 47) = 1;
  v11 = a5[37];
  if (v11)
    *(_DWORD *)(v11 + 24) += 2;
  v12 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v11;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12, a2);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  v13 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 160);
  v14 = v13 + 2;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  v16 = (WebCore::ScrollView *)a5[36];
  if (v16)
    ++*((_DWORD *)v16 + 2);
  v74 = v13;
  v17 = (*(uint64_t (**)(void))(*(_QWORD *)v13 + 56))();
  v18 = (WebCore::ScrollView *)v17;
  if (v17)
    ++*(_DWORD *)(v17 + 8);
  cf = 0;
  v83 = 0;
  v84 = 0;
  v85 = 0;
  v86 = 0;
  v87 = 0;
  v88 = 0;
  v89 = 0;
  v91 = 0;
  v90 = 0;
  v93 = 0;
  v92 = 0;
  WTF::URL::invalidate((WTF::URL *)&v93);
  v97 = 0;
  v96 = 0;
  v98 = 0;
  v103 = 0;
  v104 = 0;
  v105 = 0;
  v106 = 0;
  v107 = 0;
  v101 = 0;
  v99 = 0;
  v100 = 0;
  v102 = 0;
  WebCore::DragImage::operator=((uint64_t)&cf, (uint64_t *)a2);
  v20 = BYTE9(WebCore::EventHandler::dragState(void)::state);
  if (BYTE9(WebCore::EventHandler::dragState(void)::state) == 0
    || (BYTE9(WebCore::EventHandler::dragState(void)::state) & (BYTE9(WebCore::EventHandler::dragState(void)::state)
                                                                               - 1)) != 0)
  {
    v20 = 0;
  }
  v88 = v20 | ((BYTE9(WebCore::EventHandler::dragState(void)::state) != 0
             && (BYTE9(WebCore::EventHandler::dragState(void)::state) & (BYTE9(WebCore::EventHandler::dragState(void)::state)
                                                                                        - 1)) == 0) << 8);
  v21 = *(WTF::StringImpl **)a6;
  *(_QWORD *)a6 = 0;
  v22 = v99;
  v99 = v21;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v19);
    else
      *(_DWORD *)v22 -= 2;
  }
  if (HIDWORD(v101))
  {
    v23 = v100;
    v24 = 16 * HIDWORD(v101);
    do
    {
      v23 = (WTF *)(std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>::~pair((uint64_t)v23, v19)+ 16);
      v24 -= 16;
    }
    while (v24);
  }
  v25 = v100;
  if (v100)
  {
    v100 = 0;
    LODWORD(v101) = 0;
    WTF::fastFree(v25, v19);
  }
  v100 = *(WTF **)(a6 + 8);
  v26 = *(_QWORD *)(a6 + 16);
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  v101 = v26;
  v27 = *(WebCore::FrameSelection **)(a5[37] + 3064);
  v28 = (int8x8_t)vcgt_s32(*a4, (int32x2_t)0xFE000000FE000000);
  v76 = (WTF::StringImpl *)vorr_s8((int8x8_t)(*(_QWORD *)&v28 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, *a4), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(*a4, 6uLL)), v28));
  v98 = WebCore::FrameSelection::contains(v27, (const WebCore::LayoutPoint *)&v76);
  v80 = WebCore::ScrollView::contentsToRootView(v16, (const WebCore::IntPoint *)a4);
  v79 = WebCore::ScrollView::contentsToRootView(v16, a3);
  v89 = WebCore::ScrollView::rootViewToContents(v18, (const WebCore::IntPoint *)&v80);
  v90 = WebCore::ScrollView::rootViewToContents(v18, (const WebCore::IntPoint *)&v79);
  v91 = WebCore::ScrollView::contentsToWindow(v18, (const WebCore::IntPoint *)&v90, v29);
  v30 = WebCore::EventHandler::dragState(void)::state;
  v31 = &unk_1EE2F7000;
  if (!(_QWORD)WebCore::EventHandler::dragState(void)::state)
    goto LABEL_85;
  *(_DWORD *)(WebCore::EventHandler::dragState(void)::state + 24) += 2;
  v32 = *(_QWORD *)(qword_1EE2F7E10 + 104);
  if (!v32)
  {
    if (BYTE9(WebCore::EventHandler::dragState(void)::state) == 1)
    {
      v41 = (CGImage *)cf;
      if (cf)
        CFRetain(cf);
      Width = CGImageGetWidth(v41);
      Height = CGImageGetHeight(v41);
      if (v41)
        CFRelease(v41);
      v42 = a5[3];
      if (v42)
      {
        v43 = *(_QWORD *)(v42 + 8);
        if (v43)
        {
          v44 = *(_DWORD *)v43;
          v45 = 1.0 / *(float *)(v43 + 364);
          Width = (int)(float)(v45 * (float)Width);
          ++*(_DWORD *)v43;
          v35.n128_f32[0] = v45 * (float)(int)Height;
          Height = (int)v35.n128_f32[0];
          if (v44)
          {
            *(_DWORD *)v43 = v44;
          }
          else
          {
            WebCore::Page::~Page(v43);
            WTF::fastFree(v72, v73);
          }
        }
      }
      goto LABEL_26;
    }
LABEL_39:
    v39 = WebCore::Element::boundsInRootViewSpace((WebCore::Element *)v30);
    goto LABEL_40;
  }
  *(_DWORD *)(v32 + 24) += 2;
  if (BYTE9(WebCore::EventHandler::dragState(void)::state) != 1)
    goto LABEL_39;
  WebCore::Element::boundsInRootViewSpace((WebCore::Element *)v32);
  Height = HIDWORD(v36);
  Width = v36;
LABEL_26:
  v39 = v79;
  v40 = (WTF::StringImpl *)(Width | (Height << 32));
LABEL_40:
  v96 = v39;
  v97 = v40;
  v46 = v30;
  while ((*(_WORD *)(v46 + 30) & 1) == 0)
  {
    v46 = *(_QWORD *)(v46 + 32);
    if (!v46 || (*(_WORD *)(v46 + 28) & 8) == 0)
      goto LABEL_80;
  }
  *(_DWORD *)(v46 + 24) += 2;
  v47 = *(_QWORD *)(v46 + 104);
  if (!v47)
    goto LABEL_56;
  v48 = *(_DWORD *)(v47 + 4);
  if ((v48 & 1) == 0)
  {
    v49 = v47 + 32;
    LODWORD(v50) = v48 >> 5;
    if ((_DWORD)v50)
      goto LABEL_48;
LABEL_56:
    v51 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    goto LABEL_57;
  }
  v49 = *(_QWORD *)(v47 + 40);
  LODWORD(v50) = *(_DWORD *)(v47 + 52);
  if (!(_DWORD)v50)
    goto LABEL_56;
LABEL_48:
  v50 = v50;
  v51 = (WTF::StringImpl **)(v49 + 8);
  while (1)
  {
    v52 = (uint64_t)*(v51 - 1);
    if (v52 == WebCore::HTMLNames::titleAttr
      || *(_QWORD *)(v52 + 24) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 24)
      && *(_QWORD *)(v52 + 32) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 32))
    {
      break;
    }
    v51 += 2;
    if (!--v50)
    {
      v51 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_57:
  v53 = *v51;
  if (*v51 && (v54 = *(_DWORD *)v53, v55 = *((_DWORD *)v53 + 1), *(_DWORD *)v53 += 2, v55))
  {
    v56 = v54 + 4;
    *(_DWORD *)v53 = v56;
    v76 = v53;
    v57 = v53;
  }
  else
  {
    WebCore::Element::innerText((WebCore::Element *)v46, &v76);
    v57 = v76;
    if (!v76)
      goto LABEL_63;
    v56 = *(_DWORD *)v76;
  }
  *(_DWORD *)v57 = v56 + 2;
LABEL_63:
  v58 = v92;
  v92 = v57;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
    {
      WTF::StringImpl::destroy(v58, v40);
      v57 = v76;
    }
    else
    {
      *(_DWORD *)v58 -= 2;
    }
  }
  v76 = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
      WTF::StringImpl::destroy(v57, v40);
    else
      *(_DWORD *)v57 -= 2;
  }
  v59 = (WebCore::Document *)a5[37];
  Attribute = (_QWORD *)WebCore::Element::getAttribute((WebCore::Element *)v46, (const WebCore::QualifiedName *)&WebCore::HTMLNames::hrefAttr, v33, v34, v35);
  WebCore::Document::completeURL(v59, Attribute, (uint64_t)v59 + 848, 0, (WTF::URL *)&v76);
  v61 = v76;
  v76 = 0;
  v62 = v93;
  v93 = v61;
  if (v62)
  {
    v31 = &unk_1EE2F7000;
    if (*(_DWORD *)v62 == 2)
    {
      WTF::StringImpl::destroy(v62, v40);
      v63 = v76;
    }
    else
    {
      v63 = 0;
      *(_DWORD *)v62 -= 2;
    }
  }
  else
  {
    v63 = 0;
    v31 = (_QWORD *)&unk_1EE2F7000;
  }
  v64 = v77;
  LODWORD(v77) = v77 & 0xFFFFFFFE;
  v94 = v64;
  v95 = v78;
  v76 = 0;
  if (!v63)
  {
LABEL_75:
    if (v53)
      goto LABEL_76;
    goto LABEL_78;
  }
  if (*(_DWORD *)v63 != 2)
  {
    *(_DWORD *)v63 -= 2;
    goto LABEL_75;
  }
  WTF::StringImpl::destroy(v63, v40);
  if (v53)
  {
LABEL_76:
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v40);
    else
      *(_DWORD *)v53 -= 2;
  }
LABEL_78:
  if (*(_DWORD *)(v46 + 24) == 2)
  {
    if ((*(_WORD *)(v46 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v46, v40);
  }
  else
  {
    *(_DWORD *)(v46 + 24) -= 2;
  }
LABEL_80:
  if (v32)
  {
    if (*(_DWORD *)(v32 + 24) == 2)
    {
      if ((*(_WORD *)(v32 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v32, v40);
    }
    else
    {
      *(_DWORD *)(v32 + 24) -= 2;
    }
  }
  if (*(_DWORD *)(v30 + 24) == 2)
  {
    if ((*(_WORD *)(v30 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v30, v40);
  }
  else
  {
    *(_DWORD *)(v30 + 24) -= 2;
  }
LABEL_85:
  v65 = *(_QWORD *)(a1 + 8);
  WebCore::DragItem::DragItem((uint64_t)v81, (uint64_t)&cf);
  (*(void (**)(uint64_t, _BYTE *, _QWORD, unsigned int *))(*(_QWORD *)v65 + 40))(v65, v81, v31[450], v74);
  WebCore::DragItem::~DragItem((WebCore::DragItem *)v81, v66);
  WebCore::DragItem::~DragItem((WebCore::DragItem *)&cf, v67);
  if (!v18)
    goto LABEL_88;
  if (*((_DWORD *)v18 + 2) != 1)
  {
    --*((_DWORD *)v18 + 2);
LABEL_88:
    if (v16)
      goto LABEL_89;
    goto LABEL_91;
  }
  (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v18 + 8))(v18);
  if (v16)
  {
LABEL_89:
    if (*((_DWORD *)v16 + 2) == 1)
      (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v16 + 8))(v16);
    else
      --*((_DWORD *)v16 + 2);
    goto LABEL_91;
  }
  do
  {
LABEL_91:
    v68 = __ldaxr(v14);
    v69 = v68 - 1;
  }
  while (__stlxr(v69, v14));
  if (!v69)
  {
    atomic_store(1u, v14);
    v70 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v70 = off_1E31FE290;
    v70[1] = v14;
    cf = v70;
    WTF::ensureOnMainThread();
    v71 = cf;
    cf = 0;
    if (v71)
      (*(void (**)(CFTypeRef))(*(_QWORD *)v71 + 8))(v71);
  }
}

void WebCore::DragController::beginDrag(uint64_t a1, void *a2, uint64_t a3, const WebCore::IntPoint *a4, const WebCore::IntPoint *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  WebCore::ScrollView *v17;
  uint64_t v18;
  WebCore::ScrollView *v19;
  uint64_t v20;
  void *v21;
  unsigned int v22;
  unsigned int v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _BYTE v29[512];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 47) = 1;
  v12 = *(_QWORD *)(a3 + 296);
  if (v12)
    *(_DWORD *)(v12 + 24) += 2;
  v13 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v12;
  if (v13)
  {
    if (*(_DWORD *)(v13 + 24) == 2)
    {
      if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v13, a2);
    }
    else
    {
      *(_DWORD *)(v13 + 24) -= 2;
    }
  }
  v14 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 160);
  v15 = v14 + 2;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  v17 = *(WebCore::ScrollView **)(a3 + 288);
  if (v17)
    ++*((_DWORD *)v17 + 2);
  v18 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v14 + 56))(v14);
  v19 = (WebCore::ScrollView *)v18;
  if (v18)
    ++*(_DWORD *)(v18 + 8);
  v27 = WebCore::ScrollView::contentsToRootView(v17, a4);
  v28 = WebCore::ScrollView::rootViewToContents(v19, (const WebCore::IntPoint *)&v27);
  v26 = WebCore::ScrollView::contentsToRootView(v17, a5);
  v27 = WebCore::ScrollView::rootViewToContents(v19, (const WebCore::IntPoint *)&v26);
  v20 = *(_QWORD *)(a1 + 8);
  WebCore::DragItem::DragItem((uint64_t)v29, (uint64_t)a2);
  (*(void (**)(uint64_t, _BYTE *, uint64_t, unint64_t *, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v20 + 56))(v20, v29, a3, &v28, &v27, a6, 8);
  WebCore::DragItem::~DragItem((WebCore::DragItem *)v29, v21);
  if (!v19)
  {
LABEL_15:
    if (v17)
      goto LABEL_16;
    goto LABEL_18;
  }
  if (*((_DWORD *)v19 + 2) != 1)
  {
    --*((_DWORD *)v19 + 2);
    goto LABEL_15;
  }
  (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v19 + 8))(v19);
  if (v17)
  {
LABEL_16:
    if (*((_DWORD *)v17 + 2) == 1)
      (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v17 + 8))(v17);
    else
      --*((_DWORD *)v17 + 2);
    goto LABEL_18;
  }
  do
  {
LABEL_18:
    v22 = __ldaxr(v15);
    v23 = v22 - 1;
  }
  while (__stlxr(v23, v15));
  if (!v23)
  {
    atomic_store(1u, v15);
    v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v24 = off_1E31FE290;
    v24[1] = v15;
    v28 = (unint64_t)v24;
    WTF::ensureOnMainThread();
    v25 = v28;
    v28 = 0;
    if (v25)
      (*(void (**)(unint64_t))(*(_QWORD *)v25 + 8))(v25);
  }
}

void WebCore::selectElement(WebCore *this, WebCore::Element *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD v20[13];
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  char v25;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v5 = (unsigned int *)(v3 + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
      v7 = *((_QWORD *)this + 4);
      if (v7)
      {
        v8 = *(_DWORD *)(v7 + 24);
        v9 = *((_QWORD *)this + 6) & 0xFFFFFFFFFFFFLL;
        if (v9)
        {
          v10 = 0;
          do
          {
            ++v10;
            v9 = *(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFLL;
          }
          while (v9);
        }
        else
        {
          v10 = 0;
        }
        *(_DWORD *)(v7 + 24) = v8 + 6;
        v21 = v7;
        v22 = v10;
        v23 = v7;
        v24 = v10 + 1;
        v25 = 1;
        if (v8 == -4)
        {
          if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
        }
        else
        {
          *(_DWORD *)(v7 + 24) = v8 + 4;
        }
        v11 = *(_QWORD *)(*(_QWORD *)(v3 + 296) + 3064);
        ++*(_DWORD *)(v11 + 28);
        WebCore::VisibleSelection::VisibleSelection((uint64_t)v20, (uint64_t)&v21, 1, 0);
        WebCore::FrameSelection::setSelection(v11, (uint64_t)v20, 6u, 0, 0, 0, 0);
        WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v20);
        v13 = *(_DWORD *)(v11 + 28);
        if (!v13)
        {
          __break(0xC471u);
          JUMPOUT(0x195F92934);
        }
        *(_DWORD *)(v11 + 28) = v13 - 1;
        if (v25)
        {
          v14 = v23;
          v23 = 0;
          if (v14)
          {
            if (*(_DWORD *)(v14 + 24) == 2)
            {
              if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v14, v12);
            }
            else
            {
              *(_DWORD *)(v14 + 24) -= 2;
            }
          }
          v15 = v21;
          v21 = 0;
          if (v15)
          {
            if (*(_DWORD *)(v15 + 24) == 2)
            {
              if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v15, v12);
            }
            else
            {
              *(_DWORD *)(v15 + 24) -= 2;
            }
          }
        }
      }
      do
      {
        v16 = __ldaxr(v5);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v5));
      if (!v17)
      {
        atomic_store(1u, v5);
        v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v18 = off_1E31FE290;
        v18[1] = v5;
        v20[0] = v18;
        WTF::ensureOnMainThread();
        v19 = v20[0];
        v20[0] = 0;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      }
    }
  }
}

unsigned int *WebCore::DragController::insertDroppedImagePlaceholdersAtCaret(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  unsigned int *result;
  void *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  WebCore::Node *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  Node *var0;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  Node *v38;
  WTF::StringImpl *v39;
  Node *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  WebCore::Node *v46;
  WebCore::CompositeEditCommand *v47;
  uint64_t v48;
  void *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  WebCore::Node *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int16 v59;
  BOOL v60;
  void *v61;
  unsigned int v62;
  void *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  WTF *v68;
  WebCore::FrameSelection *v69;
  int v70;
  WebCore::Node *v71;
  int v72;
  char v73;
  Node *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  __int16 v84;
  BOOL v85;
  BOOL v86;
  void *v87;
  int v88;
  unint64_t i;
  int *v90;
  int v91;
  int v92;
  WTF::AtomString *v93;
  WTF::StringImpl *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF::StringImpl *v101;
  Node *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  BOOL v106;
  unint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  unsigned int v114;
  int v115;
  WebCore::DragCaretController *v116;
  uint64_t v117;
  unsigned int *v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  char v122;
  VisiblePosition v123;
  char v124[8];
  WTF::StringImpl *v125;
  char v126;
  WebCore::Node *v127;
  _QWORD v128[16];
  WebCore::Node *v129;
  int v130;
  char v131;
  char v132;
  uint64_t v133[2];
  uint64_t v134;
  char v135;
  char v136;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 56);
  result = (unsigned int *)WebCore::DragCaretController::isContentRichlyEditable((WebCore::DragCaretController *)v4, (const WebCore::Position *)a2);
  if (!(_DWORD)result)
    return result;
  v7 = *(_QWORD *)(v4 + 24);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 + 24);
    *(_DWORD *)(v7 + 24) = v8 + 2;
    v129 = (WebCore::Node *)v7;
    v130 = *(_DWORD *)(v4 + 32);
    v131 = *(_BYTE *)(v4 + 36);
    v132 = *(_BYTE *)(v4 + 40);
    v9 = v8 + 4;
    *(_DWORD *)(v7 + 24) = v9;
    v10 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8);
    if (v10)
    {
      *(_DWORD *)(v10 + 24) += 2;
      v9 = *(_DWORD *)(v7 + 24);
    }
    v11 = v9 - 2;
    if (v11)
    {
      *(_DWORD *)(v7 + 24) = v11;
    }
    else if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v7, v6);
    }
    if (!v10)
      goto LABEL_129;
    v12 = *(_QWORD *)(v10 + 528);
    if (!v12)
      goto LABEL_127;
    v13 = *(_QWORD *)(v12 + 8);
    if (!v13)
      goto LABEL_127;
    v14 = (unsigned int *)(v13 + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
    v116 = (WebCore::DragCaretController *)v4;
    v117 = a1;
    v119 = v13;
    v16 = *(_QWORD *)(v13 + 296);
    LOBYTE(v133[0]) = 0;
    v136 = 0;
    WebCore::TemporarySelectionChange::TemporarySelectionChange((uint64_t)v128, v16, (uint64_t)v133, 4);
    if (v136)
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v133);
    WebCore::DocumentFragment::create((WebCore::DocumentFragment *)v10, (uint64_t *)&v127);
    v118 = a2;
    v17 = a2[3];
    if ((_DWORD)v17)
    {
      v18 = *(unsigned int **)a2;
      v19 = *(_QWORD *)a2 + 8 * v17;
      v20 = v127;
      while (1)
      {
        v21 = v10;
        WebCore::HTMLImageElement::create((WebCore::HTMLImageElement *)v10, v133);
        v22 = v133[0];
        WTF::AtomString::number((WTF::AtomString *)*v18);
        v23 = *(_QWORD *)(v22 + 104);
        if (!v23)
          break;
        v24 = *(unsigned int *)(v23 + 4);
        if ((v24 & 1) != 0)
        {
          v25 = *(uint64_t **)(v23 + 40);
          v26 = *(unsigned int *)(v23 + 52);
          if (!v26)
            break;
        }
        else
        {
          v25 = (uint64_t *)(v23 + 32);
          v26 = v24 >> 5;
          if (!(v24 >> 5))
            break;
        }
        v27 = 0;
        while (1)
        {
          v28 = *v25;
          if (*v25 == WebCore::HTMLNames::widthAttr
            || *(_QWORD *)(v28 + 24) == *(_QWORD *)(WebCore::HTMLNames::widthAttr + 24)
            && *(_QWORD *)(v28 + 32) == *(_QWORD *)(WebCore::HTMLNames::widthAttr + 32))
          {
            break;
          }
          ++v27;
          v25 += 2;
          if (v26 == v27)
            goto LABEL_28;
        }
LABEL_29:
        WebCore::Element::setAttributeInternal((WTF::StringImpl *)v22, v27, (WebCore::TreeScope *)&WebCore::HTMLNames::widthAttr, (WTF::StringImpl **)&v123, 0);
        var0 = v123.var0.var0.var0;
        v123.var0.var0.var0 = 0;
        if (var0)
        {
          if (*(_DWORD *)var0 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)var0, v29);
          else
            *(_DWORD *)var0 -= 2;
        }
        WTF::AtomString::number((WTF::AtomString *)v18[1]);
        v31 = *(_QWORD *)(v22 + 104);
        if (v31)
        {
          v32 = *(unsigned int *)(v31 + 4);
          if ((v32 & 1) != 0)
          {
            v33 = *(uint64_t **)(v31 + 40);
            v34 = *(unsigned int *)(v31 + 52);
            if (v34)
            {
LABEL_37:
              v35 = 0;
              do
              {
                v36 = *v33;
                if (*v33 == WebCore::HTMLNames::heightAttr
                  || *(_QWORD *)(v36 + 24) == *(_QWORD *)(WebCore::HTMLNames::heightAttr + 24)
                  && *(_QWORD *)(v36 + 32) == *(_QWORD *)(WebCore::HTMLNames::heightAttr + 32))
                {
                  goto LABEL_45;
                }
                ++v35;
                v33 += 2;
              }
              while (v34 != v35);
            }
          }
          else
          {
            v33 = (uint64_t *)(v31 + 32);
            v34 = v32 >> 5;
            if (v32 >> 5)
              goto LABEL_37;
          }
        }
        v35 = 0xFFFFFFFFLL;
LABEL_45:
        WebCore::Element::setAttributeInternal((WTF::StringImpl *)v22, v35, (WebCore::TreeScope *)&WebCore::HTMLNames::heightAttr, (WTF::StringImpl **)&v123, 0);
        v38 = v123.var0.var0.var0;
        v123.var0.var0.var0 = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v38, v37);
          else
            *(_DWORD *)v38 -= 2;
        }
        WebCore::StyledElement::setInlineStyleProperty((WebCore::StyledElement *)v22, (WTF::StringImpl *)0x19E, 3, 0, 100.0);
        v120 = 0x110400000000000DLL;
        WebCore::Color::callOnUnderlyingType<WebCore::serializationForCSS(WebCore::Color const&)::$_0>(&v123, 0x110400000000000DuLL, &v120);
        WebCore::StyledElement::setInlineStyleProperty((WebCore::StyledElement *)v22, (WTF::StringImpl *)0x3D, (uint64_t)&v123, 0, 0);
        v40 = v123.var0.var0.var0;
        v123.var0.var0.var0 = 0;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v40, v39);
          else
            *(_DWORD *)v40 -= 2;
        }
        *(_BYTE *)(v22 + 265) = 1;
        WebCore::ContainerNode::appendChild((uint64_t)v20, (WebCore::Node *)v22, (uint64_t)v124);
        if (v126)
        {
          v42 = v125;
          v125 = 0;
          if (v42)
          {
            if (*(_DWORD *)v42 == 2)
              WTF::StringImpl::destroy(v42, v41);
            else
              *(_DWORD *)v42 -= 2;
          }
        }
        if (*(_DWORD *)(v22 + 24) == 2)
        {
          if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v22, v41);
        }
        else
        {
          *(_DWORD *)(v22 + 24) -= 2;
        }
        v18 += 2;
        v10 = v21;
        if (v18 == (unsigned int *)v19)
          goto LABEL_65;
      }
LABEL_28:
      v27 = 0xFFFFFFFFLL;
      goto LABEL_29;
    }
LABEL_65:
    v43 = v119;
    v44 = *(_QWORD *)(*(_QWORD *)(v119 + 296) + 3064);
    ++*(_DWORD *)(v44 + 28);
    WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)v133, (const WebCore::VisiblePosition *)&v129, 0);
    WebCore::FrameSelection::setSelection(v44, (uint64_t)v133, 6u, 0, 0, 0, 0);
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v133);
    v45 = *(_DWORD *)(v44 + 28);
    if (!v45)
    {
      __break(0xC471u);
      goto LABEL_242;
    }
    *(_DWORD *)(v44 + 28) = v45 - 1;
    *(_DWORD *)(v10 + 24) += 2;
    v133[0] = v10;
    v46 = v127;
    v127 = 0;
    v47 = (WebCore::CompositeEditCommand *)WTF::fastMalloc((WTF *)0x1D8);
    v48 = WebCore::EditCommand::EditCommand((uint64_t)v47, v133, 15);
    *(_OWORD *)(v48 + 248) = 0u;
    *(_OWORD *)(v48 + 264) = 0u;
    *(_QWORD *)v48 = off_1E33ADA18;
    *(_QWORD *)(v48 + 280) = 0;
    *(_DWORD *)(v48 + 288) = 0;
    *(_BYTE *)(v48 + 292) &= 0xF0u;
    *(_QWORD *)(v48 + 296) = 0;
    *(_DWORD *)(v48 + 304) = 0;
    *(_BYTE *)(v48 + 308) &= 0xF0u;
    *(_QWORD *)(v48 + 312) = 0;
    *(_DWORD *)(v48 + 320) = 0;
    *(_BYTE *)(v48 + 324) &= 0xF0u;
    *(_QWORD *)(v48 + 328) = 0;
    *(_DWORD *)(v48 + 336) = 0;
    *(_BYTE *)(v48 + 340) &= 0xF0u;
    *(_QWORD *)(v48 + 344) = 0;
    *(_DWORD *)(v48 + 352) = 0;
    *(_BYTE *)(v48 + 356) &= 0xF0u;
    *(_QWORD *)(v48 + 360) = 0;
    *(_DWORD *)(v48 + 368) = 0;
    *(_BYTE *)(v48 + 372) &= 0xF0u;
    *(_WORD *)(v48 + 376) = 1;
    *(_BYTE *)(v48 + 378) = *(_BYTE *)(v48 + 378) & 0xFC | 1;
    v50 = (uint64_t *)(v48 + 384);
    *(_QWORD *)(v48 + 384) = 0;
    *(_DWORD *)(v48 + 392) = 0;
    *(_BYTE *)(v48 + 396) &= 0xF0u;
    v51 = (uint64_t *)(v48 + 400);
    *(_QWORD *)(v48 + 400) = 0;
    *(_DWORD *)(v48 + 408) = 0;
    *(_BYTE *)(v48 + 412) &= 0xF0u;
    *(_QWORD *)(v48 + 416) = 0;
    *(_WORD *)(v48 + 424) = 256;
    *(_BYTE *)(v48 + 426) = 0;
    *(_QWORD *)(v48 + 432) = v46;
    *(_QWORD *)(v48 + 440) = 0;
    *(_QWORD *)(v48 + 448) = 0;
    *(_QWORD *)(v48 + 456) = 0;
    *(_BYTE *)(v48 + 464) = 1;
    *(_DWORD *)(v48 + 465) = 0;
    v52 = v133[0];
    v133[0] = 0;
    if (v52)
    {
      if (*(_DWORD *)(v52 + 24) == 2)
      {
        if ((*(_WORD *)(v52 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v52, v49);
      }
      else
      {
        *(_DWORD *)(v52 + 24) -= 2;
      }
    }
    WebCore::CompositeEditCommand::apply(v47);
    WebCore::makeSimpleRange<WebCore::Position &,WebCore::Position &>(v50, v51, (uint64_t)v133);
    if (!v135)
    {
LABEL_119:
      if (*((_DWORD *)v47 + 2) == 1)
        (*(void (**)(WebCore::CompositeEditCommand *))(*(_QWORD *)v47 + 8))(v47);
      else
        --*((_DWORD *)v47 + 2);
      if (v127)
      {
        if (*((_DWORD *)v127 + 6) == 2)
        {
          if ((*((_WORD *)v127 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v127, v53);
        }
        else
        {
          *((_DWORD *)v127 + 6) -= 2;
        }
      }
      WebCore::TemporarySelectionChange::~TemporarySelectionChange((WebCore::TemporarySelectionChange *)v128, v53);
      do
      {
        v77 = __ldaxr(v14);
        v78 = v77 - 1;
      }
      while (__stlxr(v78, v14));
      if (v78)
        goto LABEL_127;
      goto LABEL_243;
    }
    v54 = v10;
    v55 = (WebCore::Node *)v133[0];
    v56 = v134;
    if (v133[0] == v134)
    {
      v57 = v133[0];
      v10 = v54;
    }
    else
    {
      v103 = WebCore::depth<(WebCore::TreeType)2>(v133[0]);
      v104 = WebCore::depth<(WebCore::TreeType)2>(v56);
      v105 = v104 - v103;
      v106 = v103 >= v104;
      v107 = v103 - v104;
      if (v103 >= v104)
        v57 = (uint64_t)v55;
      else
        v57 = v56;
      if (v106)
        v55 = (WebCore::Node *)v56;
      v10 = v54;
      if (v106)
        v108 = v107;
      else
        v108 = v105;
      for (; v108; --v108)
        v57 = WebCore::Node::parentInComposedTree((WebCore::Node *)v57);
      if ((WebCore::Node *)v57 == v55)
      {
        v57 = (uint64_t)v55;
      }
      else
      {
        do
        {
          v57 = WebCore::Node::parentInComposedTree((WebCore::Node *)v57);
          v55 = (WebCore::Node *)WebCore::Node::parentInComposedTree(v55);
        }
        while ((WebCore::Node *)v57 != v55);
      }
    }
    if (!v57 || (*(_WORD *)(v57 + 28) & 4) == 0)
    {
LABEL_112:
      if (v135)
      {
        v75 = v134;
        v134 = 0;
        if (v75)
        {
          if (*(_DWORD *)(v75 + 24) == 2)
          {
            if ((*(_WORD *)(v75 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v75, v53);
          }
          else
          {
            *(_DWORD *)(v75 + 24) -= 2;
          }
        }
        v76 = v133[0];
        v133[0] = 0;
        if (v76)
        {
          if (*(_DWORD *)(v76 + 24) == 2)
          {
            if ((*(_WORD *)(v76 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v76, v53);
          }
          else
          {
            *(_DWORD *)(v76 + 24) -= 2;
          }
        }
      }
      goto LABEL_119;
    }
    *(_DWORD *)(v57 + 24) += 2;
    v58 = *(_QWORD *)(v57 + 80);
    if (v58)
    {
      while (1)
      {
        v10 = v58;
        v59 = *(_WORD *)(v58 + 28);
        if ((v59 & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
        {
          break;
        }
        if ((v59 & 4) != 0)
        {
          v58 = *(_QWORD *)(v10 + 80);
          if (v58)
            continue;
        }
        if (v10 == v57)
          goto LABEL_87;
        while (1)
        {
          v58 = *(_QWORD *)(v10 + 56);
          if (v58)
            break;
          v10 = *(_QWORD *)(v10 + 32);
          if (v10)
            v60 = v10 == v57;
          else
            v60 = 1;
          if (v60)
            goto LABEL_87;
        }
      }
      if (!v135)
        goto LABEL_242;
      v61 = 0;
      v115 = 0;
      v114 = 0;
      while (1)
      {
        if (WebCore::intersects<(WebCore::TreeType)2>((int *)v133, v10))
        {
          v79 = v114;
          if (v114 == v115)
          {
            v80 = v114 + ((unint64_t)v114 >> 2);
            if (v80 >= 0x10)
              v81 = v80 + 1;
            else
              v81 = 16;
            if (v81 <= (unint64_t)v114 + 1)
              v81 = v114 + 1;
            if (v81 >> 29)
              goto LABEL_258;
            v115 = v81;
            v82 = (void *)WTF::fastMalloc((WTF *)(8 * v81));
            memcpy(v82, v61, 8 * v114);
            if (v61)
            {
              if (v82 == v61)
                v87 = 0;
              else
                v87 = v82;
              if (v82 == v61)
                v88 = 0;
              else
                v88 = v115;
              v115 = v88;
              WTF::fastFree((WTF *)v61, v53);
              v61 = v87;
              v43 = v119;
            }
            else
            {
              v61 = v82;
            }
          }
          ++v114;
          *(_DWORD *)(v10 + 24) += 2;
          *((_QWORD *)v61 + v79) = v10;
        }
        v83 = *(_QWORD *)(v10 + 80);
        if (!v83)
          break;
LABEL_164:
        while (1)
        {
          v10 = v83;
          v84 = *(_WORD *)(v83 + 28);
          if ((v84 & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
          {
            break;
          }
          if ((v84 & 4) != 0)
          {
            v83 = *(_QWORD *)(v10 + 80);
            if (v83)
              continue;
          }
          if (v10 == v57)
            goto LABEL_193;
          while (1)
          {
            v83 = *(_QWORD *)(v10 + 56);
            if (v83)
              break;
            v10 = *(_QWORD *)(v10 + 32);
            if (v10)
              v85 = v10 == v57;
            else
              v85 = 1;
            if (v85)
              goto LABEL_193;
          }
        }
        if (!v135)
          goto LABEL_242;
      }
      if (v10 != v57)
      {
        do
        {
          v83 = *(_QWORD *)(v10 + 56);
          if (v83)
            goto LABEL_164;
          v10 = *(_QWORD *)(v10 + 32);
          if (v10)
            v86 = v10 == v57;
          else
            v86 = 1;
        }
        while (!v86);
      }
LABEL_193:
      if (v114 != v118[3])
      {
        v10 = v54;
        if (v114)
        {
          v111 = 8 * v114;
          v112 = (uint64_t *)v61;
          do
          {
            v113 = *v112;
            *v112 = 0;
            if (v113)
            {
              if (*(_DWORD *)(v113 + 24) == 2)
              {
                v10 = v54;
                if ((*(_WORD *)(v113 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v113, v53);
              }
              else
              {
                *(_DWORD *)(v113 + 24) -= 2;
                v10 = v54;
              }
            }
            ++v112;
            v111 -= 8;
          }
          while (v111);
        }
        if (v61)
          WTF::fastFree((WTF *)v61, v53);
        goto LABEL_110;
      }
      if (v114)
      {
        for (i = 0; i != v114; ++i)
        {
          if (i >= v118[3])
          {
            __break(0xC471u);
            JUMPOUT(0x195F936D4);
          }
          v90 = (int *)(*(_QWORD *)v118 + 8 * i);
          v91 = *v90;
          v92 = v90[1];
          v93 = (WTF::AtomString *)WebCore::Element::clientWidth(*((WebCore::Element **)v61 + i));
          v94 = (WTF::StringImpl *)*((_QWORD *)v61 + i);
          WTF::AtomString::number(v93, (double)v92 * (double)(int)v93 / (double)v91);
          v95 = *((_QWORD *)v94 + 13);
          if (v95)
          {
            v96 = *(unsigned int *)(v95 + 4);
            if ((v96 & 1) != 0)
            {
              v97 = *(uint64_t **)(v95 + 40);
              v98 = *(unsigned int *)(v95 + 52);
            }
            else
            {
              v97 = (uint64_t *)(v95 + 32);
              v98 = v96 >> 5;
            }
            v43 = v119;
            if (v98)
            {
              v99 = 0;
              while (1)
              {
                v100 = *v97;
                if (*v97 == WebCore::HTMLNames::heightAttr
                  || *(_QWORD *)(v100 + 24) == *(_QWORD *)(WebCore::HTMLNames::heightAttr + 24)
                  && *(_QWORD *)(v100 + 32) == *(_QWORD *)(WebCore::HTMLNames::heightAttr + 32))
                {
                  break;
                }
                ++v99;
                v97 += 2;
                if (v98 == v99)
                  goto LABEL_210;
              }
            }
            else
            {
LABEL_210:
              v99 = 0xFFFFFFFFLL;
            }
          }
          else
          {
            v99 = 0xFFFFFFFFLL;
            v43 = v119;
          }
          WebCore::Element::setAttributeInternal(v94, v99, (WebCore::TreeScope *)&WebCore::HTMLNames::heightAttr, (WTF::StringImpl **)&v123, 0);
          v102 = v123.var0.var0.var0;
          v123.var0.var0.var0 = 0;
          v10 = v54;
          if (v102)
          {
            if (*(_DWORD *)v102 == 2)
              WTF::StringImpl::destroy((WTF::StringImpl *)v102, v101);
            else
              *(_DWORD *)v102 -= 2;
          }
        }
        v62 = v114;
LABEL_90:
        WebCore::Document::updateLayout(v10, 0, 0);
        v64 = *(unsigned int *)(v117 + 124);
        if ((_DWORD)v64)
        {
          v65 = *(uint64_t **)(v117 + 112);
          v66 = 8 * v64;
          do
          {
            v67 = *v65;
            *v65 = 0;
            if (v67)
            {
              if (*(_DWORD *)(v67 + 24) == 2)
              {
                if ((*(_WORD *)(v67 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v67, v63);
              }
              else
              {
                *(_DWORD *)(v67 + 24) -= 2;
              }
            }
            ++v65;
            v66 -= 8;
          }
          while (v66);
        }
        v68 = *(WTF **)(v117 + 112);
        if (v68)
        {
          *(_QWORD *)(v117 + 112) = 0;
          *(_DWORD *)(v117 + 120) = 0;
          WTF::fastFree(v68, v63);
        }
        *(_QWORD *)(v117 + 112) = v61;
        *(_DWORD *)(v117 + 120) = v115;
        *(_DWORD *)(v117 + 124) = v62;
        std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>(v117 + 128, v133);
        v69 = *(WebCore::FrameSelection **)(*(_QWORD *)(v43 + 296) + 3064);
        ++*((_DWORD *)v69 + 7);
        WebCore::FrameSelection::clear(v69);
        v70 = *((_DWORD *)v69 + 7);
        if (!v70)
        {
LABEL_258:
          __break(0xC471u);
          JUMPOUT(0x195F93660);
        }
        *((_DWORD *)v69 + 7) = v70 - 1;
        if (*(_BYTE *)(v117 + 160))
        {
          v71 = *(WebCore::Node **)(v117 + 128);
          *((_DWORD *)v71 + 6) += 2;
          v72 = *(_DWORD *)(v117 + 136);
          v120 = (uint64_t)v71;
          v121 = v72;
          if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v71 + 208))(v71) & 1) != 0)
          {
            v73 = 8;
          }
          else if (v72)
          {
            v73 = 10;
          }
          else
          {
            v73 = 9;
          }
          v122 = v122 & 0xF0 | v73;
          WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v120, (uint64_t)&v123);
          v123.var1 = 1;
          WebCore::DragCaretController::setCaretPosition(v116, &v123);
          v74 = v123.var0.var0.var0;
          v123.var0.var0.var0 = 0;
          if (v74)
          {
            if (*((_DWORD *)v74 + 6) == 2)
            {
              if ((*((_WORD *)v74 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v74, v53);
            }
            else
            {
              *((_DWORD *)v74 + 6) -= 2;
            }
          }
          if (*((_DWORD *)v71 + 6) == 2)
          {
            if ((*((_WORD *)v71 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v71, v53);
          }
          else
          {
            *((_DWORD *)v71 + 6) -= 2;
          }
          goto LABEL_110;
        }
LABEL_242:
        __break(1u);
LABEL_243:
        atomic_store(1u, v14);
        v109 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v109 = off_1E31FE290;
        v109[1] = v14;
        v128[0] = v109;
        WTF::ensureOnMainThread();
        v110 = v128[0];
        v128[0] = 0;
        if (v110)
          (*(void (**)(uint64_t))(*(_QWORD *)v110 + 8))(v110);
LABEL_127:
        if (*(_DWORD *)(v10 + 24) == 2)
        {
          if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v10, v6);
        }
        else
        {
          *(_DWORD *)(v10 + 24) -= 2;
        }
        goto LABEL_129;
      }
      v10 = v54;
    }
    else
    {
LABEL_87:
      v10 = v54;
      if (v118[3])
      {
LABEL_110:
        if (*(_DWORD *)(v57 + 24) == 2)
        {
          if ((*(_WORD *)(v57 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v57, v53);
        }
        else
        {
          *(_DWORD *)(v57 + 24) -= 2;
        }
        goto LABEL_112;
      }
      v61 = 0;
      v115 = 0;
    }
    v62 = 0;
    goto LABEL_90;
  }
  v129 = 0;
LABEL_129:
  result = (unsigned int *)v129;
  if (v129)
  {
    if (*((_DWORD *)v129 + 6) == 2)
    {
      if ((*((_WORD *)v129 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(v129, v6);
    }
    else
    {
      *((_DWORD *)v129 + 6) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::DragController::finalizeDroppedImagePlaceholder(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t result;
  int v11;
  _QWORD *v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = WebCore::Document::eventLoop((WebCore::Document *)v5, (WTF::StringImpl *)a2);
  ++*(_DWORD *)(v6 + 8);
  v7 = *a3;
  *a3 = 0;
  *(_DWORD *)(a2 + 24) += 2;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = &off_1E33FE930;
  v8[1] = v7;
  v8[2] = a2;
  v12 = v8;
  WebCore::EventLoopTaskGroup::queueTask(v6, 25, (uint64_t *)&v12);
  result = (uint64_t)v12;
  v12 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v11 = *(_DWORD *)(v6 + 8);
  if (v11)
  {
    *(_DWORD *)(v6 + 8) = v11 - 1;
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v5, v9);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  else
  {
    result = 286;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::DragController::placeDragCaret(WebCore::DragController *this, const WebCore::IntPoint *a2, const WebCore::IntPoint *a3)
{
  uint64_t result;
  BOOL v5;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  const WebCore::IntPoint *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  char v17;
  WebCore::ScrollView *v18;
  uint64_t v19;
  WebCore::DragCaretController *v20;
  void *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  WTF *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  VisiblePosition v31;
  unint64_t v32;

  result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 8) + 160);
  if (result)
    v5 = *(_BYTE *)(result + 144) == 0;
  else
    v5 = 0;
  if (!v5)
    return result;
  v7 = (unsigned int *)(result + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = WebCore::LocalFrame::documentAtPoint((WebCore::LocalFrame *)result, a2, a3);
  if (v9)
    *(_DWORD *)(v9 + 24) += 2;
  v31.var0.var0.var0 = (Node *)v9;
  WebCore::DragController::mouseMovedIntoDocument((unsigned int *)this, (uint64_t *)&v31);
  result = (uint64_t)v31.var0.var0.var0;
  if (v31.var0.var0.var0)
  {
    if (*((_DWORD *)v31.var0.var0.var0 + 6) == 2)
    {
      if ((*((_WORD *)v31.var0.var0.var0 + 15) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v31.var0.var0.var0, v10);
    }
    else
    {
      *((_DWORD *)v31.var0.var0.var0 + 6) -= 2;
    }
  }
  v12 = *((_QWORD *)this + 2);
  if (!v12)
    goto LABEL_31;
  v13 = *(_QWORD *)(v12 + 528);
  if (!v13)
  {
    v14 = 0;
    goto LABEL_42;
  }
  v14 = *(unsigned int **)(v13 + 8);
  if (!v14)
  {
LABEL_42:
    v17 = 1;
    goto LABEL_19;
  }
  v15 = v14 + 2;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  v17 = 0;
LABEL_19:
  v18 = (WebCore::ScrollView *)*((_QWORD *)v14 + 36);
  if (v18)
  {
    ++*((_DWORD *)v18 + 2);
    v32 = WebCore::ScrollView::windowToContents(v18, a2, v11);
    v19 = *(_QWORD *)(*(_QWORD *)this + 8);
    ++*(_DWORD *)v19;
    v20 = *(WebCore::DragCaretController **)(v19 + 56);
    WebCore::LocalFrame::visiblePositionForPoint((WebCore::LocalFrame *)v14, (int32x2_t *)&v32, (int8x8_t *)&v31);
    WebCore::DragCaretController::setCaretPosition(v20, &v31);
    result = (uint64_t)v31.var0.var0.var0;
    v31.var0.var0.var0 = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 24) == 2)
      {
        if ((*(_WORD *)(result + 30) & 0x400) == 0)
          result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v21);
      }
      else
      {
        *(_DWORD *)(result + 24) -= 2;
      }
    }
    if (*(_DWORD *)v19 == 1)
    {
      WebCore::Page::~Page(v19);
      result = WTF::fastFree(v27, v28);
    }
    else
    {
      --*(_DWORD *)v19;
    }
    if (*((_DWORD *)v18 + 2) == 1)
    {
      result = (*(uint64_t (**)(WebCore::ScrollView *))(*(_QWORD *)v18 + 8))(v18);
      if ((v17 & 1) == 0)
        goto LABEL_28;
      goto LABEL_31;
    }
    --*((_DWORD *)v18 + 2);
  }
  if ((v17 & 1) == 0)
  {
LABEL_28:
    v22 = v14 + 2;
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, v22);
      v30 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v30 = off_1E31FE290;
      *(_QWORD *)(v30 + 8) = v22;
      v31.var0.var0.var0 = (Node *)v30;
      WTF::ensureOnMainThread();
      result = (uint64_t)v31.var0.var0.var0;
      v31.var0.var0.var0 = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    goto LABEL_31;
  }
  do
  {
LABEL_31:
    v25 = __ldaxr(v7);
    v26 = v25 - 1;
  }
  while (__stlxr(v26, v7));
  if (!v26)
  {
    atomic_store(1u, v7);
    v29 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v29 = off_1E31FE290;
    *(_QWORD *)(v29 + 8) = v7;
    v31.var0.var0.var0 = (Node *)v29;
    WTF::ensureOnMainThread();
    result = (uint64_t)v31.var0.var0.var0;
    v31.var0.var0.var0 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

WebCore::ElementTargetingController *WebCore::ElementTargetingController::ElementTargetingController(WebCore::ElementTargetingController *this, WebCore::Page *a2)
{
  *(_DWORD *)this = 0;
  WTF::WeakPtr<WebCore::Page,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>((uint64_t *)this + 1, (uint64_t)a2);
  WebCore::DeferrableOneShotTimer::DeferrableOneShotTimer<WebCore::ElementTargetingController>((uint64_t)this + 16, (uint64_t)this);
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  WebCore::Timer::Timer<WebCore::ElementTargetingController,WebCore::ElementTargetingController>((uint64_t)this + 112, (uint64_t)this);
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 262) = 0u;
  return this;
}

uint64_t WebCore::ElementTargetingController::cleanUpAdjustmentClientRects(uint64_t this, void *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 96);
  *(_QWORD *)(this + 96) = 0;
  if (v2)
    return WTF::fastFree((WTF *)(v2 - 16), a2);
  return this;
}

uint64_t WebCore::DeferrableOneShotTimer::DeferrableOneShotTimer<WebCore::ElementTargetingController>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t StatusReg;
  unsigned int *v6;
  unsigned int v7;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v4 = off_1E33FE958;
  v4[1] = WebCore::ElementTargetingController::cleanUpAdjustmentClientRects;
  v4[2] = 0;
  v4[3] = a2;
  *(_QWORD *)a1 = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v6 = *(unsigned int **)(StatusReg + 736);
  if (!v6)
    v6 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  *(_QWORD *)a1 = off_1E33DC988;
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = 0x402E000000000000;
  return a1;
}

WTF *WebCore::ElementTargetingController::findTargets@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  const WebCore::HTMLBodyElement *v6;
  uint64_t v7;
  WebCore::Page *v8;
  uint64_t v9;
  BOOL v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  WebCore::Node *v14;
  WebCore::LocalFrameView *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  float v19;
  WebCore *OnlyMainElement;
  uint64_t v21;
  unsigned int v22;
  WTF::MonotonicTime *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  int v37;
  WebCore::Node *v38;
  uint64_t v39;
  WebCore::Element *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  const WebCore::HTMLBodyElement *v45;
  unint64_t v46;
  unsigned int v47;
  unint64_t v48;
  float v49;
  uint64_t v50;
  uint64_t (*v51)();
  _BOOL4 v52;
  BOOL v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  WTF *v59;
  WTF *v60;
  WTF *v61;
  WebCore::Element **v62;
  int v63;
  WebCore::Element **v64;
  int v65;
  WebCore::Element **v66;
  WebCore::Element **v67;
  WebCore::Element **v68;
  WebCore::Node *v69;
  WebCore::Node *v70;
  int v71;
  uint64_t v72;
  WebCore::Node *v73;
  uint64_t v74;
  unint64_t v75;
  unsigned int v76;
  unint64_t v77;
  WTF *v78;
  WTF *v79;
  WTF *v81;
  WebCore::Element *v82;
  WebCore::Node *v83;
  WebCore::Node **v84;
  uint64_t v86;
  WebCore::Element **v87;
  uint64_t v88;
  WebCore::Node *v89;
  int v90;
  WebCore::Node *v91;
  uint64_t *v92;
  WTF *v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  unsigned int v103;
  uint64_t v104;
  double v105;
  double v106;
  const WebCore::RenderObject *v107;
  const WebCore::Element *v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  WTF *v114;
  WTF *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  __int16 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t *v143;
  BOOL v144;
  WebCore::LocalFrameView *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  WTF *v150;
  const WebCore::Element *v151;
  WTF *v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  WTF *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v172;
  int v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unsigned int v177;
  int i;
  uint64_t v179;
  uint64_t v180;
  WTF *v181;
  uint64_t v182;
  unsigned int v183;
  unint64_t v184;
  _BOOL4 v185;
  WTF *v186;
  WTF *v187;
  WTF *v188;
  unint64_t v189;
  float v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  WebCore::Node *v194;
  WebCore::Node *v195;
  _QWORD *v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t *v200;
  char v201;
  unint64_t v202;
  unsigned int v203;
  int v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unsigned int v208;
  int j;
  uint64_t v210;
  int v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unsigned int n;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  _QWORD *v220;
  _QWORD *v221;
  int v222;
  _QWORD *v223;
  _OWORD *v224;
  _OWORD *v225;
  _QWORD *v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unsigned int v231;
  int k;
  uint64_t v233;
  uint64_t *v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  uint64_t v238;
  unint64_t v239;
  unsigned int v240;
  _DWORD *v241;
  void *v242;
  _DWORD *v243;
  uint64_t m;
  uint64_t *v245;
  uint64_t v246;
  int v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unsigned int v251;
  int v252;
  unsigned int v253;
  uint64_t v254;
  _QWORD *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t *v259;
  int v260;
  WTF *v261;
  uint64_t v262;
  uint64_t *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t *v266;
  uint64_t v267;
  int v268;
  WebCore::Node *v269;
  uint64_t *v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  __int128 v282;
  __int128 v283;
  uint64_t v284;
  uint64_t v285;
  int v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  __int128 v294;
  __int128 v295;
  uint64_t v296;
  uint64_t v297;
  WebCore::Element *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  WTF::StringImpl *v303;
  WTF *v304;
  WTF *v305;
  WTF *v307;
  WTF *v309;
  WTF *v310;
  unsigned int v311;
  unsigned int v312;
  WebCore::HTMLElement *v313;
  WTF *result;
  WTF *v315;
  void *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  _QWORD *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  WTF *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  WebCore::Node *v329;
  uint64_t v330;
  _QWORD *v331;
  WebCore::Node *v332;
  WebCore::Node *v333;
  int v334;
  uint64_t *v335;
  unsigned int *v336;
  WebCore::Element *v337;
  WebCore::Page *v338;
  WTF::MonotonicTime *v339;
  WebCore::LocalFrameView *v340;
  WebCore::Node *v342;
  int v343;
  uint64_t v344;
  WTF *v345;
  int v346;
  unsigned int v347;
  WebCore::HTMLElement *v348;
  WTF *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  WTF *v354;
  WTF *v355;
  uint64_t v356;
  WTF *v357;
  uint64_t v358;
  WebCore::Node *v359[3];
  uint64_t v360;
  __int128 v361;
  char v362;
  __int128 v363;
  WTF *v364[2];
  __int128 v365;
  int v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  int v371;
  int v372;
  __int128 v373;
  __int128 v374;
  char v375;
  uint64_t v376;
  int v377;
  int v378;
  uint64_t v379;
  int v380;
  __int16 v381;
  char v382;
  uint64_t v383;

  v383 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v363 = a1;
  *((_QWORD *)&v363 + 1) = a1;
  v364[0] = (WTF *)a2;
  v364[1] = (WTF *)a1;
  v4 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v4 == -1)
    std::__throw_bad_variant_access[abi:sn180100]();
  v359[0] = (WebCore::Node *)&v363;
  ((void (*)(WTF **__return_ptr, WebCore::Node **))off_1E33FE970[v4])(&v345, v359);
  if (!v347 || (v7 = *(_QWORD *)(a1 + 8)) == 0 || (v8 = *(WebCore::Page **)(v7 + 8)) == 0)
  {
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_540;
  }
  v343 = *(unsigned __int8 *)(a2 + 24);
  ++*(_DWORD *)v8;
  v338 = v8;
  v9 = *((_QWORD *)v8 + 20);
  if (v9)
    v10 = *(_BYTE *)(v9 + 144) == 0;
  else
    v10 = 0;
  if (!v10)
  {
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_538;
  }
  v11 = (unsigned int *)(v9 + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  v13 = *(_QWORD *)(v9 + 296);
  if (!v13)
  {
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_536;
  }
  v342 = *(WebCore::Node **)(v9 + 296);
  *(_DWORD *)(v13 + 24) += 2;
  v14 = v342;
  v15 = *(WebCore::LocalFrameView **)(v9 + 288);
  if (!v15)
  {
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_534;
  }
  v340 = *(WebCore::LocalFrameView **)(v9 + 288);
  ++*((_DWORD *)v15 + 2);
  v16 = *((_QWORD *)v342 + 159);
  if (!v16
    || (*(_WORD *)(v16 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v16 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24)
    || (v17 = *(_QWORD *)(v16 + 80)) == 0)
  {
LABEL_21:
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_555;
  }
  while ((*(_WORD *)(v17 + 28) & 0x10) == 0
       || *(_QWORD *)(*(_QWORD *)(v17 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
  {
    v17 = *(_QWORD *)(v17 + 56);
    if (!v17)
      goto LABEL_21;
  }
  *(_DWORD *)(v17 + 24) += 2;
  v18 = WebCore::LocalFrameView::baseLayoutViewportSize(v15);
  v19 = (float)((float)(int)v18 * 0.015625) * (float)((float)SHIDWORD(v18) * 0.015625);
  if (v19 == 0.0)
  {
    *a3 = 0;
    a3[1] = 0;
    v145 = v340;
    v23 = (WTF::MonotonicTime *)v17;
    goto LABEL_529;
  }
  v336 = v11;
  v339 = (WTF::MonotonicTime *)v17;
  OnlyMainElement = WebCore::findOnlyMainElement((WebCore *)v17, v6);
  if (OnlyMainElement)
    *((_DWORD *)OnlyMainElement + 6) += 2;
  v337 = OnlyMainElement;
  v21 = 0;
  v357 = 0;
  v358 = 0;
  v22 = v347;
  v23 = (WTF::MonotonicTime *)v17;
  if (!v347)
    goto LABEL_27;
  if (v347 >> 29)
  {
    __break(0xC471u);
    JUMPOUT(0x195F95BF8);
  }
  v150 = (WTF *)WTF::fastMalloc((WTF *)(8 * v347));
  LODWORD(v358) = v22;
  v357 = v150;
  if (v347)
  {
    v152 = v345;
    v153 = 8 * v347;
    v23 = v339;
    while (1)
    {
      v154 = *(_QWORD *)v152;
      v155 = *(_DWORD *)(*(_QWORD *)v152 + 24);
      *(_DWORD *)(v154 + 24) = v155 + 2;
      if ((*(_BYTE *)(v154 + 28) & 8) != 0)
        break;
      if (v155)
      {
        *(_DWORD *)(v154 + 24) = v155;
      }
      else if ((*(_WORD *)(v154 + 30) & 0x400) == 0)
      {
        goto LABEL_259;
      }
LABEL_256:
      v152 = (WTF *)((char *)v152 + 8);
      v153 -= 8;
      if (!v153)
      {
        v21 = HIDWORD(v358);
        goto LABEL_27;
      }
    }
    if (WebCore::isTargetCandidate((WebCore *)v154, v337, v348, v151))
    {
      *(_QWORD *)&v363 = v154;
      LODWORD(v157) = HIDWORD(v358);
      if (HIDWORD(v358) == (_DWORD)v358)
      {
        v158 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v357, HIDWORD(v358) + 1, (unint64_t)&v363);
        v157 = HIDWORD(v358);
        v159 = v357;
        v160 = *v158;
        *v158 = 0;
        *((_QWORD *)v159 + v157) = v160;
      }
      else
      {
        *(_QWORD *)&v363 = 0;
        *((_QWORD *)v357 + HIDWORD(v358)) = v154;
      }
      HIDWORD(v358) = v157 + 1;
      v156 = v363;
      *(_QWORD *)&v363 = 0;
      if (!v156)
        goto LABEL_261;
      if (*(_DWORD *)(v156 + 24) != 2)
      {
        *(_DWORD *)(v156 + 24) -= 2;
        goto LABEL_261;
      }
      if ((*(_WORD *)(v156 + 30) & 0x400) != 0)
        goto LABEL_261;
    }
    else
    {
      if (*(_DWORD *)(v154 + 24) != 2)
      {
        *(_DWORD *)(v154 + 24) -= 2;
        goto LABEL_261;
      }
      v23 = v339;
      if ((*(_WORD *)(v154 + 30) & 0x400) != 0)
        goto LABEL_256;
LABEL_259:
      v156 = v154;
    }
    WebCore::Node::removedLastRef((WebCore::Node *)v156, v6);
LABEL_261:
    v23 = v339;
    goto LABEL_256;
  }
  v21 = 0;
  v23 = (WTF::MonotonicTime *)v17;
LABEL_27:
  v24 = (float)(v19 + -200000.0) / -600000.0;
  v25 = 0.5;
  v26 = (float)(v24 * 0.25) + 0.5;
  if (v26 > 0.25)
    v27 = (float)(v24 * 0.25) + 0.5;
  else
    v27 = 0.25;
  v355 = 0;
  v356 = 0;
  if (v26 >= 0.5)
    v28 = 0.5;
  else
    v28 = v27;
  v352 = 0;
  v353 = 0;
  v354 = 0;
  if (!v21)
    goto LABEL_248;
  v29 = (float)(v24 * 0.25) + 1.0;
  v30 = 0.75;
  if (v29 > 0.75)
    v30 = (float)(v24 * 0.25) + 1.0;
  if (v29 >= 1.0)
    v31 = 1.0;
  else
    v31 = v30;
  v32 = 0.005;
  v33 = (float)(v24 * 0.005) + 0.01;
  if (v33 > 0.005)
    v32 = (float)(v24 * 0.005) + 0.01;
  if (v33 >= 0.01)
    v34 = 0.01;
  else
    v34 = v32;
  v35 = (float)(v24 * 0.5) + 1.0;
  if (v35 > 0.5)
    v25 = v35;
  if (v35 >= 1.0)
    v36 = 1.0;
  else
    v36 = v25;
  v344 = (uint64_t)a3;
  do
  {
    v37 = v21 - 1;
    v38 = (WebCore::Node *)*((_QWORD *)v357 + v21 - 1);
    *((_QWORD *)v357 + v21 - 1) = 0;
    v359[0] = v38;
    v39 = *((_QWORD *)v357 + v21 - 1);
    *((_QWORD *)v357 + v21 - 1) = 0;
    if (v39)
    {
      if (*(_DWORD *)(v39 + 24) == 2)
      {
        if ((*(_WORD *)(v39 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v39, v6);
      }
      else
      {
        *(_DWORD *)(v39 + 24) -= 2;
      }
    }
    HIDWORD(v358) = v37;
    v40 = v359[0];
    v41 = *((_QWORD *)v359[0] + 8);
    v42 = v41 & 0xFFFFFFFFFFFFLL;
    if ((v41 & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_BYTE *)((v41 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195F95418);
      }
      ++*(_DWORD *)((v41 & 0xFFFFFFFFFFFFLL) + 0x10);
    }
    v43 = WebCore::Element::boundingBoxInRootViewCoordinates(v40);
    v45 = v6;
    v46 = (unint64_t)v6 >> 32;
    if ((int)v6 >= 0)
      v47 = v6;
    else
      v47 = -(int)v6;
    if (SHIDWORD(v6) < 0)
      LODWORD(v46) = -HIDWORD(v6);
    v48 = v46 * (unint64_t)v47;
    if ((v48 & 0xFFFFFFFF00000000) != 0)
      v49 = 3.4028e38;
    else
      v49 = (float)v48 / v19;
    v44.n128_f64[0] = v49;
    if (v49 < 0.95)
      goto LABEL_76;
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 88) + 8) + 60) & 0x80000000) != 0)
      goto LABEL_187;
    if ((*(_DWORD *)(v42 + 20) & 0x1800000) != 0x1000000)
    {
LABEL_76:
      v53 = 0;
      goto LABEL_77;
    }
    WebCore::RenderStyle::visitedDependentColor(v42 + 80, 61, 0, (uint64_t *)&v363);
    if ((v363 & 0x8000000000000) != 0)
    {
      v96 = (unsigned int *)(v363 & 0xFFFFFFFFFFFFLL);
      v44.n128_u32[0] = *(_DWORD *)((v363 & 0xFFFFFFFFFFFFLL) + 0x10);
      if (v44.n128_f32[0] <= 0.0)
      {
LABEL_69:
        v50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 88) + 16) + 8);
        if (*(_QWORD *)(v50 + 8))
        {
          while (1)
          {
            v95 = *(_QWORD *)(v50 + 16);
            v52 = v95 != 0;
            if (v95)
              break;
            v50 = *(_QWORD *)(v50 + 8);
            a3 = (_QWORD *)v344;
            if (!v50)
              goto LABEL_73;
          }
          a3 = (_QWORD *)v344;
        }
        else
        {
          v10 = *(_QWORD *)(v50 + 16) == 0;
          v51 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
          if (v10)
            v51 = 0;
          v52 = v51 != 0;
        }
LABEL_73:
        if ((v363 & 0x8000000000000) == 0)
        {
          if (!v52)
            goto LABEL_210;
          goto LABEL_75;
        }
        v96 = (unsigned int *)(v363 & 0xFFFFFFFFFFFFLL);
      }
      else
      {
        v52 = 1;
      }
      do
      {
        v97 = __ldaxr(v96);
        v98 = v97 - 1;
      }
      while (__stlxr(v98, v96));
      if (v98)
      {
        a3 = (_QWORD *)v344;
        if (!v52)
          goto LABEL_210;
      }
      else
      {
        atomic_store(1u, v96);
        WTF::fastFree((WTF *)v96, v6);
        a3 = (_QWORD *)v344;
        if (!v52)
          goto LABEL_210;
      }
      goto LABEL_75;
    }
    if (!(_BYTE)v363)
      goto LABEL_69;
LABEL_75:
    v44.n128_u32[0] = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 88) + 32) + 4);
    if (v44.n128_f32[0] != 0.0)
      goto LABEL_76;
LABEL_210:
    v99 = *(_QWORD *)(*(_QWORD *)(v42 + 24) + 8);
    v100 = *(_QWORD *)(*(_QWORD *)(v99 + 40) + 8);
    if (*(_BYTE *)(v100 + 3441) && *(_QWORD *)(v100 + 1272) != v99)
      goto LABEL_218;
    v101 = v42;
    if ((*(_BYTE *)(v42 + 45) & 2) != 0)
    {
      v101 = *(_QWORD *)(v42 + 32);
      if (v101)
        v101 = *(_QWORD *)(v101 + 8);
    }
    if ((*(_BYTE *)(*(_QWORD *)(v101 + 104) + 239) & 1) != 0)
LABEL_218:
      v102 = 0;
    else
      v102 = (*(_DWORD *)(v101 + 124) >> 6) & 0xF;
    v53 = v102 == 0;
LABEL_77:
    if (v49 <= 0.0 || v53)
      goto LABEL_187;
    v54 = *(_DWORD *)(v42 + 20) & 0x1800000;
    if (v54 == 0x1000000)
    {
      if ((*(_BYTE *)(v42 + 45) & 2) != 0)
        v56 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 32) + 8) + 96);
      else
        v56 = *(_QWORD *)(v42 + 96);
      v57 = v56 & 0x380000;
      if (v57 != 3145728 && (v49 >= v31 || v57 != 0x100000))
        goto LABEL_81;
LABEL_92:
      if (v343)
      {
        v58 = 1;
        if (v49 < v28 && v54 == 0x1000000)
        {
          if ((v48 & 0xFFFFFFFF00000000) != 0)
            v44.n128_u32[0] = 2139095039;
          else
            v44.n128_f32[0] = (float)v48 / v19;
          if (v44.n128_f32[0] < v28)
          {
            *(_QWORD *)&v363 = v43;
            *((_QWORD *)&v363 + 1) = v45;
            v364[0] = 0;
            WebCore::Region::unite((WTF *)&v352, (const WebCore::Region *)&v363);
            v59 = v364[0];
            v364[0] = 0;
            if (v59)
            {
              v60 = (WTF *)*((_QWORD *)v59 + 18);
              if ((WTF *)((char *)v59 + 160) != v60 && v60)
              {
                *((_QWORD *)v59 + 18) = 0;
                *((_DWORD *)v59 + 38) = 0;
                WTF::fastFree(v60, v6);
              }
              v61 = *(WTF **)v59;
              if ((WTF *)((char *)v59 + 16) != *(WTF **)v59 && v61)
              {
                *(_QWORD *)v59 = 0;
                *((_DWORD *)v59 + 2) = 0;
                WTF::fastFree(v61, v6);
              }
              WTF::fastFree(v59, v6);
            }
          }
          v58 = 0;
        }
      }
      else
      {
        v58 = 1;
      }
      v62 = (WebCore::Element **)v357;
      v63 = HIDWORD(v358);
      v64 = (WebCore::Element **)((char *)v357 + 8 * HIDWORD(v358));
      v65 = 0;
      v66 = v64;
      if (!HIDWORD(v358))
      {
LABEL_182:
        v87 = &v62[v63];
        if (v66 != v87)
        {
          memmove(v64, v66, (char *)v87 - (char *)v66);
          v63 = HIDWORD(v358);
        }
        HIDWORD(v358) = v63 - v65;
        LODWORD(v88) = HIDWORD(v356);
        if (HIDWORD(v356) == (_DWORD)v356)
        {
          v92 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v355, HIDWORD(v356) + 1, (unint64_t)v359);
          v88 = HIDWORD(v356);
          v93 = v355;
          v94 = *v92;
          *v92 = 0;
          *((_QWORD *)v93 + v88) = v94;
        }
        else
        {
          v89 = v359[0];
          v359[0] = 0;
          *((_QWORD *)v355 + HIDWORD(v356)) = v89;
        }
        HIDWORD(v356) = v88 + 1;
        goto LABEL_187;
      }
      v67 = (WebCore::Element **)((char *)v357 + 8 * HIDWORD(v358));
      while (1)
      {
        v68 = v67;
        v69 = v359[0];
        v70 = *v62;
        if (v359[0] == *v62)
          goto LABEL_120;
        if ((~*((unsigned __int16 *)v70 + 14) & 0x408) != 0
          || !(*(unsigned int (**)(WebCore::Element *, __n128))(*(_QWORD *)v70 + 368))(*v62, v44))
        {
          *((_DWORD *)v70 + 6) += 2;
          v73 = v70;
        }
        else
        {
          v71 = *((_DWORD *)v70 + 6);
          *((_DWORD *)v70 + 6) = v71 + 2;
          v72 = *((_QWORD *)v70 + 14);
          if (v72)
          {
            v73 = *(WebCore::Node **)(v72 + 8);
            if (v73)
            {
              *((_DWORD *)v73 + 6) += 2;
              v71 = *((_DWORD *)v70 + 6) - 2;
            }
          }
          else
          {
            v73 = 0;
          }
          if (v71)
          {
            *((_DWORD *)v70 + 6) = v71;
          }
          else if ((*((_WORD *)v70 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v70, v6);
          }
          if (!v73)
            goto LABEL_169;
        }
        if (v73 == v69)
        {
          if (*((_DWORD *)v69 + 6) == 2)
          {
            if ((*((_WORD *)v69 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v69, v6);
          }
          else
          {
            *((_DWORD *)v69 + 6) -= 2;
          }
LABEL_120:
          if ((v58 & 1) == 0)
          {
            v74 = WebCore::Element::boundingBoxInRootViewCoordinates(*v62);
            v75 = (unint64_t)v6 >> 32;
            if ((int)v6 >= 0)
              v76 = v6;
            else
              v76 = -(int)v6;
            if (SHIDWORD(v6) < 0)
              LODWORD(v75) = -HIDWORD(v6);
            v77 = v75 * (unint64_t)v76;
            if ((v77 & 0xFFFFFFFF00000000) != 0)
              v44.n128_u32[0] = 2139095039;
            else
              v44.n128_f32[0] = (float)v77 / v19;
            if (v44.n128_f32[0] < v28)
            {
              *(_QWORD *)&v363 = v74;
              *((_QWORD *)&v363 + 1) = v6;
              v364[0] = 0;
              WebCore::Region::unite((WTF *)&v352, (const WebCore::Region *)&v363);
              v78 = v364[0];
              v364[0] = 0;
              if (v78)
              {
                v79 = (WTF *)*((_QWORD *)v78 + 18);
                if ((WTF *)((char *)v78 + 160) != v79 && v79 != 0)
                {
                  *((_QWORD *)v78 + 18) = 0;
                  *((_DWORD *)v78 + 38) = 0;
                  WTF::fastFree(v79, v6);
                }
                v81 = *(WTF **)v78;
                if ((WTF *)((char *)v78 + 16) != *(WTF **)v78 && v81)
                {
                  *(_QWORD *)v78 = 0;
                  *((_DWORD *)v78 + 2) = 0;
                  WTF::fastFree(v81, v6);
                }
                WTF::fastFree(v78, v6);
              }
            }
          }
          v67 = v62;
          if (v68 != (WebCore::Element **)((char *)v357 + 8 * HIDWORD(v358)))
          {
            if (v66 == v62)
            {
              v67 = v68;
            }
            else
            {
              memmove(v68, v66, (char *)v62 - (char *)v66);
              v67 = (WebCore::Element **)((char *)v68 + (char *)v62 - (char *)v66);
            }
          }
          v82 = *v62;
          *v62 = 0;
          v66 = v62 + 1;
          if (v82)
          {
            if (*((_DWORD *)v82 + 6) == 2)
            {
              if ((*((_WORD *)v82 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v82, v6);
            }
            else
            {
              *((_DWORD *)v82 + 6) -= 2;
            }
          }
          ++v65;
          goto LABEL_148;
        }
        v83 = v73;
        do
        {
          if ((*((_WORD *)v83 + 14) & 0x80) != 0)
          {
            v86 = *((_QWORD *)v83 + 25);
            if (!v86)
            {
              if (*((_DWORD *)v73 + 6) == 2)
              {
                if ((*((_WORD *)v73 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v73, v6);
              }
              else
              {
                *((_DWORD *)v73 + 6) -= 2;
              }
              goto LABEL_169;
            }
            v84 = (WebCore::Node **)(v86 + 8);
          }
          else
          {
            v84 = (WebCore::Node **)((char *)v83 + 32);
          }
          v83 = *v84;
        }
        while (*v84 != v69 && v83 != 0);
        if (*((_DWORD *)v73 + 6) == 2)
        {
          if ((*((_WORD *)v73 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v73, v6);
        }
        else
        {
          *((_DWORD *)v73 + 6) -= 2;
        }
        if (v83)
          goto LABEL_120;
LABEL_169:
        v67 = v68;
LABEL_148:
        if (++v62 >= v64)
        {
          v62 = (WebCore::Element **)v357;
          v63 = HIDWORD(v358);
          v64 = v67;
          a3 = (_QWORD *)v344;
          goto LABEL_182;
        }
      }
    }
    if (v54 == 25165824)
      goto LABEL_92;
LABEL_81:
    if (v34 < v49 && v49 < v36)
      goto LABEL_92;
    v55 = *((_QWORD *)v359[0] + 10);
    if (!v55)
      goto LABEL_92;
    while ((*(_WORD *)(v55 + 28) & 8) == 0)
    {
      v55 = *(_QWORD *)(v55 + 56);
      if (!v55)
        goto LABEL_92;
    }
LABEL_187:
    if (v42)
    {
      v90 = *(_DWORD *)(v42 + 16);
      if (!v90)
      {
LABEL_617:
        __break(0xC471u);
        JUMPOUT(0x195F953ECLL);
      }
      *(_DWORD *)(v42 + 16) = v90 - 1;
    }
    v91 = v359[0];
    v359[0] = 0;
    if (v91)
    {
      if (*((_DWORD *)v91 + 6) == 2)
      {
        if ((*((_WORD *)v91 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v91, v6);
      }
      else
      {
        *((_DWORD *)v91 + 6) -= 2;
      }
    }
    v21 = HIDWORD(v358);
  }
  while (HIDWORD(v358));
  v103 = HIDWORD(v356);
  v23 = v339;
  if (!HIDWORD(v356))
  {
LABEL_248:
    *a3 = 0;
    a3[1] = 0;
    v145 = v340;
    goto LABEL_510;
  }
  v104 = *(_QWORD *)(a1 + 48);
  if ((v104 & 0xFFFFFFFFFFFFLL) == 0 || *(double *)((v104 & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
  {
    v105 = *(double *)(a1 + 72);
    *(_QWORD *)(a1 + 40) = 0;
    WTF::MonotonicTime::now(v339);
    WebCore::TimerBase::setNextFireTime(a1 + 16, v105 + v106);
    v103 = HIDWORD(v356);
    v351 = 0;
    *a3 = 0;
    a3[1] = 0;
    if (v103)
      goto LABEL_225;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = v104 & 0xFDFFFFFFFFFFFFLL | 0x2000000000000;
    v351 = 0;
    *a3 = 0;
    a3[1] = 0;
LABEL_225:
    if (v103 >= 0x1745D18)
    {
      __break(0xC471u);
      JUMPOUT(0x195F95BF0);
    }
    v109 = 176 * v103;
    v110 = WTF::fastMalloc((WTF *)(176 * v103));
    *(_DWORD *)(v344 + 8) = (v109 & 0xFFFFFFF0) / 0xB0;
    *(_QWORD *)v344 = v110;
    if (HIDWORD(v356))
    {
      v111 = v110;
      v112 = 0;
      v113 = 0;
      v114 = (WTF *)((char *)v355 + 8 * HIDWORD(v356));
      v115 = v114;
      do
      {
        v116 = *((_QWORD *)v115 - 1);
        v115 = (WTF *)((char *)v115 - 8);
        WebCore::targetedElementInfo((uint64_t)&v363, v116, 0, &v351);
        if (v382)
        {
          if (v113 == *(_DWORD *)(v344 + 8))
          {
            v117 = WTF::Vector<WebCore::TargetedElementInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v344, v113 + 1, (unint64_t)&v363);
            v112 = *(_DWORD *)(v344 + 12);
            v111 = *(_QWORD *)v344;
            v118 = *(_QWORD *)v344 + 176 * v112;
            v120 = *(_OWORD *)(v117 + 16);
            v119 = *(_OWORD *)(v117 + 32);
            v121 = *(_OWORD *)v117;
            *(_DWORD *)(v118 + 48) = *(_DWORD *)(v117 + 48);
            *(_OWORD *)(v118 + 16) = v120;
            *(_OWORD *)(v118 + 32) = v119;
            *(_OWORD *)v118 = v121;
            v122 = *(_QWORD *)(v117 + 56);
            *(_QWORD *)(v117 + 56) = 0;
            *(_QWORD *)(v118 + 56) = v122;
            v123 = *(_QWORD *)(v117 + 64);
            *(_QWORD *)(v117 + 64) = 0;
            *(_QWORD *)(v118 + 64) = v123;
            v124 = *(_QWORD *)(v117 + 72);
            *(_QWORD *)(v117 + 72) = 0;
            *(_QWORD *)(v118 + 80) = 0;
            *(_QWORD *)(v118 + 88) = 0;
            *(_QWORD *)(v118 + 72) = v124;
            v125 = *(_QWORD *)(v117 + 80);
            *(_QWORD *)(v117 + 80) = 0;
            *(_QWORD *)(v118 + 80) = v125;
            LODWORD(v125) = *(_DWORD *)(v117 + 88);
            *(_DWORD *)(v117 + 88) = 0;
            *(_DWORD *)(v118 + 88) = v125;
            LODWORD(v125) = *(_DWORD *)(v117 + 92);
            *(_DWORD *)(v117 + 92) = 0;
            *(_DWORD *)(v118 + 92) = v125;
            v126 = *(_OWORD *)(v117 + 96);
            v127 = *(_OWORD *)(v117 + 112);
            *(_BYTE *)(v118 + 128) = *(_BYTE *)(v117 + 128);
            *(_OWORD *)(v118 + 96) = v126;
            *(_OWORD *)(v118 + 112) = v127;
            *(_QWORD *)(v118 + 136) = 0;
            *(_QWORD *)(v118 + 144) = 0;
            v128 = *(_QWORD *)(v117 + 136);
            *(_QWORD *)(v117 + 136) = 0;
            *(_QWORD *)(v118 + 136) = v128;
            LODWORD(v128) = *(_DWORD *)(v117 + 144);
            *(_DWORD *)(v117 + 144) = 0;
            *(_DWORD *)(v118 + 144) = v128;
            LODWORD(v128) = *(_DWORD *)(v117 + 148);
            *(_DWORD *)(v117 + 148) = 0;
            *(_DWORD *)(v118 + 148) = v128;
            *(_QWORD *)(v118 + 152) = 0;
            v129 = *(_QWORD *)(v117 + 152);
            *(_QWORD *)(v117 + 152) = 0;
            *(_QWORD *)(v118 + 152) = v129;
            v130 = *(_DWORD *)(v117 + 160);
            v131 = *(_WORD *)(v117 + 164);
          }
          else
          {
            v118 = v111 + 176 * v113;
            v132 = v363;
            v133 = *(_OWORD *)v364;
            v134 = v365;
            *(_DWORD *)(v118 + 48) = v366;
            *(_OWORD *)(v118 + 16) = v133;
            *(_OWORD *)(v118 + 32) = v134;
            *(_OWORD *)v118 = v132;
            v135 = v367;
            v367 = 0;
            *(_QWORD *)(v118 + 56) = v135;
            v136 = v368;
            v368 = 0;
            *(_QWORD *)(v118 + 64) = v136;
            v137 = v369;
            v369 = 0;
            *(_QWORD *)(v118 + 80) = 0;
            *(_QWORD *)(v118 + 88) = 0;
            *(_QWORD *)(v118 + 72) = v137;
            v138 = v370;
            v370 = 0;
            *(_QWORD *)(v118 + 80) = v138;
            LODWORD(v138) = v371;
            v371 = 0;
            *(_DWORD *)(v118 + 88) = v138;
            LODWORD(v138) = v372;
            v372 = 0;
            *(_DWORD *)(v118 + 92) = v138;
            v139 = v373;
            v140 = v374;
            *(_BYTE *)(v118 + 128) = v375;
            *(_OWORD *)(v118 + 96) = v139;
            *(_OWORD *)(v118 + 112) = v140;
            *(_QWORD *)(v118 + 136) = 0;
            *(_QWORD *)(v118 + 144) = 0;
            v141 = v376;
            v376 = 0;
            *(_QWORD *)(v118 + 136) = v141;
            LODWORD(v141) = v377;
            v377 = 0;
            *(_DWORD *)(v118 + 144) = v141;
            LODWORD(v141) = v378;
            v378 = 0;
            *(_DWORD *)(v118 + 148) = v141;
            *(_QWORD *)(v118 + 152) = 0;
            v142 = v379;
            v379 = 0;
            *(_QWORD *)(v118 + 152) = v142;
            v130 = v380;
            v131 = v381;
          }
          *(_WORD *)(v118 + 164) = v131;
          *(_DWORD *)(v118 + 160) = v130;
          *(_DWORD *)(v344 + 12) = ++v112;
          v143 = (unint64_t *)*((_QWORD *)v114 - 1);
          WebCore::inflatedClientRectForAdjustmentRegionTracking(&v361, v143[8], v19);
          if (v362)
          {
            v349 = (WTF *)WebCore::Element::identifier((WebCore::Element *)v143);
            WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::IntRect,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::IntRect>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::IntRect&>(v359, (uint64_t *)(a1 + 96), (uint64_t *)&v349, &v361);
          }
          if (v382)
            WebCore::TargetedElementInfo::~TargetedElementInfo((WebCore::TargetedElementInfo *)&v363, v6);
          v113 = v112;
        }
        v114 = v115;
      }
      while (v115 != v355);
    }
  }
  v144 = (int)v353 < 1 || SHIDWORD(v353) < 1;
  v23 = v339;
  v145 = v340;
  if (v144)
    goto LABEL_493;
  v359[0] = 0;
  v146 = *((_QWORD *)v339 + 8) & 0xFFFFFFFFFFFFLL;
  if (!v146)
  {
    v349 = 0;
    v350 = 0;
    goto LABEL_478;
  }
  if ((*(_BYTE *)((*((_QWORD *)v339 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195F95AF8);
  }
  ++*(_DWORD *)((*((_QWORD *)v339 + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
  v147 = *(unsigned int *)(v146 + 64);
  if (!(v147 | ((unint64_t)*(unsigned __int8 *)(v146 + 68) << 32))
    || (v148 = *(_QWORD *)((v147 | ((unint64_t)*(unsigned __int8 *)(v146 + 68) << 32)) + 8)) == 0)
  {
LABEL_347:
    v349 = 0;
    v350 = 0;
    goto LABEL_476;
  }
  if ((*(_BYTE *)(v148 + 45) & 2) != 0)
  {
    while (1)
    {
      v149 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v148 + 112))(v148);
      if (!v149)
      {
        v23 = v339;
        if (v148 == v146)
          goto LABEL_347;
        v161 = *(unsigned int *)(v148 + 47);
        if (!(v161 | ((unint64_t)*(unsigned __int8 *)(v148 + 51) << 32)))
          break;
        v149 = *(_QWORD *)((v161 | ((unint64_t)*(unsigned __int8 *)(v148 + 51) << 32)) + 8);
        if (!v149)
          break;
      }
LABEL_289:
      v148 = v149;
      if ((*(_BYTE *)(v149 + 45) & 2) == 0)
        goto LABEL_290;
    }
    v162 = *(_QWORD *)(v148 + 32);
    v23 = v339;
    if (v162)
    {
      while (1)
      {
        v163 = *(_QWORD *)(v162 + 8);
        if (!v163 || v163 == v146)
          break;
        v165 = *(unsigned int *)(v163 + 47);
        if (v165 | ((unint64_t)*(unsigned __int8 *)(v163 + 51) << 32))
        {
          v149 = *(_QWORD *)((v165 | ((unint64_t)*(unsigned __int8 *)(v163 + 51) << 32)) + 8);
          if (v149)
            goto LABEL_289;
        }
        v162 = *(_QWORD *)(v163 + 32);
        if (!v162)
          goto LABEL_347;
      }
    }
    goto LABEL_347;
  }
  v149 = *(_QWORD *)((v147 | ((unint64_t)*(unsigned __int8 *)(v146 + 68) << 32)) + 8);
LABEL_290:
  while (2)
  {
    if ((*(_DWORD *)(v149 + 20) & 0x1800000) == 0x1000000 && (*(_BYTE *)(v149 + 45) & 1) == 0)
    {
      v166 = *(_QWORD *)(*(_QWORD *)(v149 + 24) + 8);
      if (v166)
      {
        if ((*(_WORD *)(v166 + 28) & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195F95A7CLL);
        }
        *(_DWORD *)(v166 + 24) += 2;
        if (HIDWORD(v356))
        {
          v167 = 0;
          while (1)
          {
            v168 = *((_QWORD *)v355 + v167);
            if (v166 == v168)
              break;
            v169 = v166;
            do
            {
              if ((*(_WORD *)(v169 + 28) & 0x80) != 0)
              {
                v172 = *(_QWORD *)(v169 + 200);
                if (!v172)
                  goto LABEL_308;
                v170 = (uint64_t *)(v172 + 8);
              }
              else
              {
                v170 = (uint64_t *)(v169 + 32);
              }
              v169 = *v170;
            }
            while (v169 != v168 && v169 != 0);
            if (v169)
              break;
LABEL_308:
            if (++v167 == HIDWORD(v356))
              goto LABEL_309;
          }
LABEL_335:
          if (*(_DWORD *)(v166 + 24) != 2)
          {
            *(_DWORD *)(v166 + 24) -= 2;
            goto LABEL_337;
          }
          if ((*(_WORD *)(v166 + 30) & 0x400) == 0)
          {
            v191 = v166;
            goto LABEL_341;
          }
        }
        else
        {
LABEL_309:
          if (v359[0])
          {
            v173 = *((_DWORD *)v359[0] - 2);
            v174 = (~(v166 << 32) + v166) ^ ((unint64_t)(~(v166 << 32) + v166) >> 22);
            v175 = 9 * ((v174 + ~(v174 << 13)) ^ ((v174 + ~(v174 << 13)) >> 8));
            v176 = (v175 ^ (v175 >> 15)) + ~((v175 ^ (v175 >> 15)) << 27);
            v177 = v173 & ((v176 >> 31) ^ v176);
            for (i = 1; ; ++i)
            {
              v179 = *((_QWORD *)v359[0] + v177);
              if (v179 != -1)
              {
                if (!v179)
                  goto LABEL_315;
                if (v179 == v166)
                  break;
              }
              v177 = (v177 + i) & v173;
            }
            goto LABEL_335;
          }
LABEL_315:
          v180 = v347;
          if (v347)
          {
            v181 = v345;
            while (v166 != *(_QWORD *)v181)
            {
              v181 = (WTF *)((char *)v181 + 8);
              if (!--v180)
                goto LABEL_319;
            }
            goto LABEL_335;
          }
LABEL_319:
          if (!WebCore::isTargetCandidate((WebCore *)v166, v337, v348, v108))
            goto LABEL_335;
          v182 = WebCore::Element::boundingBoxInRootViewCoordinates((WebCore::Element *)v166);
          v183 = v6;
          if ((int)v6 < 3)
            goto LABEL_335;
          v184 = (unint64_t)v6 >> 32;
          if (SHIDWORD(v6) < 3)
            goto LABEL_335;
          *(_QWORD *)&v363 = v182;
          *((_QWORD *)&v363 + 1) = v6;
          v364[0] = 0;
          v185 = WebCore::Region::contains((WebCore::Region *)&v352, (const WebCore::Region *)&v363);
          v186 = v364[0];
          v364[0] = 0;
          if (v186)
          {
            v187 = (WTF *)*((_QWORD *)v186 + 18);
            if ((WTF *)((char *)v186 + 160) != v187 && v187)
            {
              *((_QWORD *)v186 + 18) = 0;
              *((_DWORD *)v186 + 38) = 0;
              WTF::fastFree(v187, v6);
            }
            v188 = *(WTF **)v186;
            if ((WTF *)((char *)v186 + 16) != *(WTF **)v186 && v188)
            {
              *(_QWORD *)v186 = 0;
              *((_DWORD *)v186 + 2) = 0;
              WTF::fastFree(v188, v6);
            }
            WTF::fastFree(v186, v6);
          }
          if (!v185)
            goto LABEL_335;
          v189 = v184 * (unint64_t)v183;
          v190 = (v189 & 0xFFFFFFFF00000000) != 0 ? 3.4028e38 : (float)v189 / v19;
          if (v190 > v28)
            goto LABEL_335;
          *(_QWORD *)&v361 = v166;
          WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::add((uint64_t *)v359, (uint64_t *)&v361, (uint64_t)&v363);
          v191 = v361;
          *(_QWORD *)&v361 = 0;
          if (v191)
          {
            if (*(_DWORD *)(v191 + 24) == 2)
            {
              if ((*(_WORD *)(v191 + 30) & 0x400) == 0)
LABEL_341:
                WebCore::Node::removedLastRef((WebCore::Node *)v191, v6);
            }
            else
            {
              *(_DWORD *)(v191 + 24) -= 2;
            }
          }
        }
      }
    }
LABEL_337:
    v149 = WebCore::RenderTraversal::next<WebCore::RenderElement,WebCore::RenderElement>(v149, (WebCore::RenderObject *)v146, v107);
    if (v149)
      continue;
    break;
  }
  v349 = 0;
  v350 = 0;
  v23 = v339;
  if (v359[0] && *((_DWORD *)v359[0] - 3))
  {
    v192 = *((unsigned int *)v359[0] - 1);
    if ((_DWORD)v192)
    {
      v193 = 8 * v192;
      v194 = v359[0];
      while ((unint64_t)(*(_QWORD *)v194 + 1) <= 1)
      {
        v194 = (WebCore::Node *)((char *)v194 + 8);
        v193 -= 8;
        if (!v193)
          goto LABEL_476;
      }
    }
    else
    {
      v194 = v359[0];
    }
    v195 = (WebCore::Node *)((char *)v359[0] + 8 * v192);
    if (v195 != v194)
    {
      v196 = 0;
      v197 = *(_QWORD *)v194;
      do
      {
        v198 = *(_QWORD *)(v197 + 32);
        if (!v198 || (*(_WORD *)(v198 + 28) & 8) == 0)
        {
          v199 = 0;
          v200 = 0;
          v201 = 1;
          goto LABEL_435;
        }
        v199 = 0;
        LODWORD(v202) = 0;
        v203 = 0;
        while (1)
        {
          if (v359[0])
          {
            v204 = *((_DWORD *)v359[0] - 2);
            v205 = (~(v198 << 32) + v198) ^ ((unint64_t)(~(v198 << 32) + v198) >> 22);
            v206 = 9 * ((v205 + ~(v205 << 13)) ^ ((v205 + ~(v205 << 13)) >> 8));
            v207 = (v206 ^ (v206 >> 15)) + ~((v206 ^ (v206 >> 15)) << 27);
            v208 = v204 & ((v207 >> 31) ^ v207);
            for (j = 1; ; ++j)
            {
              v210 = *((_QWORD *)v359[0] + v208);
              if (v210 != -1)
              {
                if (!v210)
                  goto LABEL_368;
                if (v210 == v198)
                  break;
              }
              v208 = (v208 + j) & v204;
            }
            if (!v203)
              goto LABEL_439;
            v333 = v195;
            v222 = 0;
            v200 = &v199[v203];
LABEL_395:
            v223 = v199;
            v331 = v199;
            v335 = v200;
            v334 = v222;
LABEL_396:
            v224 = v196;
            if (!v196)
            {
              v225 = (_OWORD *)WTF::fastZeroedMalloc((WTF *)0x90);
              v23 = v339;
              *v225 = xmmword_1968A5190;
              v224 = v225 + 1;
            }
            v226 = 0;
            v227 = *v223;
            v228 = ~(*v223 << 32) + *v223;
            v229 = (v228 ^ (v228 >> 22)) + ~((v228 ^ (v228 >> 22)) << 13);
            v230 = (9 * (v229 ^ (v229 >> 8))) ^ ((9 * (v229 ^ (v229 >> 8))) >> 15);
            v231 = ((v230 + ~(v230 << 27)) >> 31) ^ (v230 + ~((_DWORD)v230 << 27));
            for (k = 1; ; ++k)
            {
              v233 = v231 & *((_DWORD *)v224 - 2);
              v234 = (uint64_t *)&v224[v233];
              v235 = *v234;
              if (*v234 == -1)
              {
                v226 = &v224[v233];
              }
              else
              {
                if (!v235)
                {
                  if (v226)
                  {
                    *v226 = 0;
                    v226[1] = 0;
                    --*((_DWORD *)v224 - 4);
                    v236 = *v223;
                    *(_DWORD *)(v236 + 24) = *(_DWORD *)(*v223 + 24) + 2;
                    *v226 = v236;
                  }
                  else
                  {
                    *(_DWORD *)(v227 + 24) += 2;
                    *v234 = v227;
                    v226 = &v224[v233];
                  }
                  *((_BYTE *)v226 + 8) = v222;
                  v237 = *((_DWORD *)v224 - 3) + 1;
                  *((_DWORD *)v224 - 3) = v237;
                  v238 = (*((_DWORD *)v224 - 4) + v237);
                  v239 = *((unsigned int *)v224 - 1);
                  if (v239 > 0x400)
                  {
                    if (v239 > 2 * v238)
                      goto LABEL_410;
                    goto LABEL_412;
                  }
                  if (3 * v239 > 4 * v238)
                  {
LABEL_410:
                    v196 = v224;
                    goto LABEL_429;
                  }
                  if ((_DWORD)v239)
LABEL_412:
                    v240 = (_DWORD)v239 << (6 * v237 >= (2 * v239));
                  else
                    v240 = 8;
                  v241 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * v240 + 16));
                  v196 = v241 + 4;
                  v241[2] = v240 - 1;
                  v241[3] = v240;
                  *v241 = 0;
                  v241[1] = v237;
                  v222 = v334;
                  if ((_DWORD)v239)
                  {
                    v243 = v241;
                    for (m = 0; m != v239; ++m)
                    {
                      v245 = (uint64_t *)&v224[m];
                      v246 = *v245;
                      if (*v245 != -1)
                      {
                        if (v246)
                        {
                          v247 = v243[2];
                          v248 = (~(v246 << 32) + v246) ^ ((unint64_t)(~(v246 << 32) + v246) >> 22);
                          v249 = 9 * ((v248 + ~(v248 << 13)) ^ ((v248 + ~(v248 << 13)) >> 8));
                          v250 = (v249 ^ (v249 >> 15)) + ~((v249 ^ (v249 >> 15)) << 27);
                          v251 = v247 & ((v250 >> 31) ^ v250);
                          v252 = 1;
                          do
                          {
                            v253 = v251;
                            v254 = v196[2 * v251];
                            v251 = (v251 + v252++) & v247;
                          }
                          while (v254);
                          v255 = &v196[2 * v253];
                          *v255 = 0;
                          v256 = *v245;
                          *v245 = 0;
                          *v255 = v256;
                          *((_BYTE *)v255 + 8) = BYTE8(v224[m]);
                          v257 = *v245;
                          *v245 = 0;
                          if (v257)
                          {
                            if (*(_DWORD *)(v257 + 24) == 2)
                            {
                              if ((*(_WORD *)(v257 + 30) & 0x400) == 0)
                                WebCore::Node::removedLastRef((WebCore::Node *)v257, v242);
                            }
                            else
                            {
                              *(_DWORD *)(v257 + 24) -= 2;
                            }
                          }
                        }
                        else
                        {
                          *v245 = 0;
                        }
                      }
                    }
                  }
                  WTF::fastFree((WTF *)(v224 - 1), v242);
                  v23 = v339;
                  v200 = v335;
LABEL_429:
                  if (++v223 == v200)
                  {
                    if (v222)
                    {
                      v201 = 0;
                      v199 = v331;
                      v195 = v333;
                      goto LABEL_435;
                    }
                    v199 = v331;
                    v195 = v333;
LABEL_446:
                    v263 = v199;
                    do
                    {
                      v264 = *v263;
                      *v263 = 0;
                      if (v264)
                      {
                        if (*(_DWORD *)(v264 + 24) == 2)
                        {
                          if ((*(_WORD *)(v264 + 30) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)v264, v6);
                        }
                        else
                        {
                          *(_DWORD *)(v264 + 24) -= 2;
                        }
                      }
                      ++v263;
                    }
                    while (v263 != v200);
                    v23 = v339;
                    goto LABEL_439;
                  }
                  goto LABEL_396;
                }
                if (v235 == v227)
                  goto LABEL_410;
              }
              v231 = k + v233;
            }
          }
LABEL_368:
          if (v196)
          {
            v211 = 0;
            v212 = (~(v198 << 32) + v198) ^ ((unint64_t)(~(v198 << 32) + v198) >> 22);
            v213 = 9 * ((v212 + ~(v212 << 13)) ^ ((v212 + ~(v212 << 13)) >> 8));
            v214 = (v213 ^ (v213 >> 15)) + ~((v213 ^ (v213 >> 15)) << 27);
            for (n = (v214 >> 31) ^ v214; ; n = v211 + v216)
            {
              v216 = n & *(_DWORD *)(v196 - 1);
              v217 = v196[2 * v216];
              if (v217 != -1)
              {
                if (!v217)
                  goto LABEL_375;
                if (v217 == v198)
                  break;
              }
              ++v211;
            }
            if ((_DWORD)v216 != *((_DWORD *)v196 - 1))
              break;
          }
LABEL_375:
          if (v203 == (_DWORD)v202)
          {
            v332 = v195;
            v218 = ((unint64_t)v202 >> 2) + v202;
            if (v218 >= 0x10)
              v219 = v218 + 1;
            else
              v219 = 16;
            if (v219 <= (unint64_t)v203 + 1)
              v202 = v203 + 1;
            else
              v202 = v219;
            if (v202 >> 29)
              goto LABEL_617;
            v220 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v202));
            memcpy(v220, v199, 8 * v203);
            if (v199)
            {
              if (v220 == v199)
              {
                LODWORD(v202) = 0;
                v221 = 0;
              }
              else
              {
                v221 = v220;
              }
              WTF::fastFree((WTF *)v199, v6);
              v199 = v221;
            }
            else
            {
              v199 = v220;
            }
            v23 = v339;
            v195 = v332;
          }
          *(_DWORD *)(v198 + 24) += 2;
          v199[v203++] = v198;
          v198 = *(_QWORD *)(v198 + 32);
          if (!v198 || (*(_WORD *)(v198 + 28) & 8) == 0)
          {
            v333 = v195;
            v222 = 1;
            goto LABEL_456;
          }
        }
        v333 = v195;
        v222 = LOBYTE(v196[2 * v216 + 1]);
LABEL_456:
        v200 = &v199[v203];
        if (v203)
        {
          v23 = v339;
          goto LABEL_395;
        }
        if (v222)
        {
          v201 = 1;
          v23 = v339;
          v195 = v333;
LABEL_435:
          v258 = HIDWORD(v350);
          if (HIDWORD(v350) == (_DWORD)v350)
          {
            v259 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v349, HIDWORD(v350) + 1, (unint64_t)v194);
            v258 = HIDWORD(v350);
            v260 = HIDWORD(v350) + 1;
            v261 = v349;
            v262 = *v259;
            v23 = v339;
          }
          else
          {
            v260 = HIDWORD(v350) + 1;
            v261 = v349;
            v262 = *(_QWORD *)v194;
          }
          *(_DWORD *)(v262 + 24) += 2;
          *((_QWORD *)v261 + v258) = v262;
          HIDWORD(v350) = v260;
          if ((v201 & 1) == 0)
            goto LABEL_446;
        }
        else
        {
          v23 = v339;
          v195 = v333;
        }
LABEL_439:
        if (v199)
        {
          WTF::fastFree((WTF *)v199, v6);
          v23 = v339;
        }
        do
        {
          v194 = (WebCore::Node *)((char *)v194 + 8);
          if (v194 == v195)
            goto LABEL_461;
          v197 = *(_QWORD *)v194;
        }
        while ((unint64_t)(*(_QWORD *)v194 + 1) <= 1);
      }
      while (v194 != v195);
LABEL_461:
      if (v196)
      {
        v265 = *((unsigned int *)v196 - 1);
        if ((_DWORD)v265)
        {
          v266 = v196;
          do
          {
            v267 = *v266;
            if (*v266 != -1)
            {
              *v266 = 0;
              if (v267)
              {
                if (*(_DWORD *)(v267 + 24) == 2)
                {
                  if ((*(_WORD *)(v267 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v267, v6);
                }
                else
                {
                  *(_DWORD *)(v267 + 24) -= 2;
                }
              }
            }
            v266 += 2;
            --v265;
          }
          while (v265);
        }
        WTF::fastFree((WTF *)(v196 - 2), v6);
        v23 = v339;
      }
    }
  }
LABEL_476:
  v268 = *(_DWORD *)(v146 + 16);
  if (!v268)
  {
    __break(0xC471u);
    JUMPOUT(0x195F95B18);
  }
  *(_DWORD *)(v146 + 16) = v268 - 1;
  v269 = v359[0];
  v145 = v340;
  if (v359[0])
  {
    v328 = *((unsigned int *)v359[0] - 1);
    if ((_DWORD)v328)
    {
      v329 = v359[0];
      do
      {
        v330 = *(_QWORD *)v329;
        if (*(_QWORD *)v329 != -1)
        {
          *(_QWORD *)v329 = 0;
          if (v330)
          {
            if (*(_DWORD *)(v330 + 24) == 2)
            {
              if ((*(_WORD *)(v330 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v330, v6);
            }
            else
            {
              *(_DWORD *)(v330 + 24) -= 2;
            }
          }
        }
        v329 = (WebCore::Node *)((char *)v329 + 8);
        --v328;
      }
      while (v328);
    }
    WTF::fastFree((WebCore::Node *)((char *)v269 - 16), v6);
    v23 = v339;
    v145 = v340;
  }
LABEL_478:
  v270 = (uint64_t *)v349;
  if (HIDWORD(v350))
  {
    v271 = 8 * HIDWORD(v350);
    do
    {
      WebCore::targetedElementInfo((uint64_t)&v363, *v270, 1, &v351);
      if (v382)
      {
        v272 = *(unsigned int *)(v344 + 12);
        if ((_DWORD)v272 == *(_DWORD *)(v344 + 8))
        {
          v273 = WTF::Vector<WebCore::TargetedElementInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v344, v272 + 1, (unint64_t)&v363);
          LODWORD(v272) = *(_DWORD *)(v344 + 12);
          v274 = *(_QWORD *)v344 + 176 * v272;
          v276 = *(_OWORD *)(v273 + 16);
          v275 = *(_OWORD *)(v273 + 32);
          v277 = *(_OWORD *)v273;
          *(_DWORD *)(v274 + 48) = *(_DWORD *)(v273 + 48);
          *(_OWORD *)(v274 + 16) = v276;
          *(_OWORD *)(v274 + 32) = v275;
          *(_OWORD *)v274 = v277;
          v278 = *(_QWORD *)(v273 + 56);
          *(_QWORD *)(v273 + 56) = 0;
          *(_QWORD *)(v274 + 56) = v278;
          v279 = *(_QWORD *)(v273 + 64);
          *(_QWORD *)(v273 + 64) = 0;
          *(_QWORD *)(v274 + 64) = v279;
          v280 = *(_QWORD *)(v273 + 72);
          *(_QWORD *)(v273 + 72) = 0;
          *(_QWORD *)(v274 + 80) = 0;
          *(_QWORD *)(v274 + 88) = 0;
          *(_QWORD *)(v274 + 72) = v280;
          v281 = *(_QWORD *)(v273 + 80);
          *(_QWORD *)(v273 + 80) = 0;
          *(_QWORD *)(v274 + 80) = v281;
          LODWORD(v281) = *(_DWORD *)(v273 + 88);
          *(_DWORD *)(v273 + 88) = 0;
          *(_DWORD *)(v274 + 88) = v281;
          LODWORD(v281) = *(_DWORD *)(v273 + 92);
          *(_DWORD *)(v273 + 92) = 0;
          *(_DWORD *)(v274 + 92) = v281;
          v282 = *(_OWORD *)(v273 + 96);
          v283 = *(_OWORD *)(v273 + 112);
          *(_BYTE *)(v274 + 128) = *(_BYTE *)(v273 + 128);
          *(_OWORD *)(v274 + 96) = v282;
          *(_OWORD *)(v274 + 112) = v283;
          *(_QWORD *)(v274 + 136) = 0;
          *(_QWORD *)(v274 + 144) = 0;
          v284 = *(_QWORD *)(v273 + 136);
          *(_QWORD *)(v273 + 136) = 0;
          *(_QWORD *)(v274 + 136) = v284;
          LODWORD(v284) = *(_DWORD *)(v273 + 144);
          *(_DWORD *)(v273 + 144) = 0;
          *(_DWORD *)(v274 + 144) = v284;
          LODWORD(v284) = *(_DWORD *)(v273 + 148);
          *(_DWORD *)(v273 + 148) = 0;
          *(_DWORD *)(v274 + 148) = v284;
          *(_QWORD *)(v274 + 152) = 0;
          v285 = *(_QWORD *)(v273 + 152);
          *(_QWORD *)(v273 + 152) = 0;
          *(_QWORD *)(v274 + 152) = v285;
          v286 = *(_DWORD *)(v273 + 160);
          *(_WORD *)(v274 + 164) = *(_WORD *)(v273 + 164);
        }
        else
        {
          v274 = *(_QWORD *)v344 + 176 * v272;
          v288 = *(_OWORD *)v364;
          v287 = v365;
          v289 = v363;
          *(_DWORD *)(v274 + 48) = v366;
          *(_OWORD *)(v274 + 16) = v288;
          *(_OWORD *)(v274 + 32) = v287;
          *(_OWORD *)v274 = v289;
          v290 = v367;
          v367 = 0;
          *(_QWORD *)(v274 + 56) = v290;
          v291 = v368;
          v368 = 0;
          *(_QWORD *)(v274 + 64) = v291;
          v292 = v369;
          v369 = 0;
          *(_QWORD *)(v274 + 80) = 0;
          *(_QWORD *)(v274 + 88) = 0;
          *(_QWORD *)(v274 + 72) = v292;
          v293 = v370;
          v370 = 0;
          *(_QWORD *)(v274 + 80) = v293;
          LODWORD(v293) = v371;
          v371 = 0;
          *(_DWORD *)(v274 + 88) = v293;
          LODWORD(v293) = v372;
          v372 = 0;
          *(_DWORD *)(v274 + 92) = v293;
          v294 = v373;
          v295 = v374;
          *(_BYTE *)(v274 + 128) = v375;
          *(_OWORD *)(v274 + 96) = v294;
          *(_OWORD *)(v274 + 112) = v295;
          *(_QWORD *)(v274 + 136) = 0;
          *(_QWORD *)(v274 + 144) = 0;
          v296 = v376;
          v376 = 0;
          *(_QWORD *)(v274 + 136) = v296;
          LODWORD(v296) = v377;
          v377 = 0;
          *(_DWORD *)(v274 + 144) = v296;
          LODWORD(v296) = v378;
          v378 = 0;
          *(_DWORD *)(v274 + 148) = v296;
          *(_QWORD *)(v274 + 152) = 0;
          v297 = v379;
          v379 = 0;
          *(_QWORD *)(v274 + 152) = v297;
          v286 = v380;
          *(_WORD *)(v274 + 164) = v381;
        }
        *(_DWORD *)(v274 + 160) = v286;
        *(_DWORD *)(v344 + 12) = v272 + 1;
        v298 = (WebCore::Element *)*v270;
        WebCore::inflatedClientRectForAdjustmentRegionTracking(&v361, *(_QWORD *)(*v270 + 64), v19);
        if (v362)
        {
          v360 = WebCore::Element::identifier(v298);
          WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::IntRect,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::IntRect>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::IntRect&>(v359, (uint64_t *)(a1 + 96), &v360, &v361);
        }
        if (v382)
          WebCore::TargetedElementInfo::~TargetedElementInfo((WebCore::TargetedElementInfo *)&v363, v6);
      }
      ++v270;
      v271 -= 8;
    }
    while (v271);
    v270 = (uint64_t *)v349;
    v145 = v340;
    if (HIDWORD(v350))
    {
      v323 = 8 * HIDWORD(v350);
      do
      {
        v324 = *v270;
        *v270 = 0;
        if (v324)
        {
          if (*(_DWORD *)(v324 + 24) == 2)
          {
            if ((*(_WORD *)(v324 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v324, v6);
          }
          else
          {
            *(_DWORD *)(v324 + 24) -= 2;
          }
        }
        ++v270;
        v323 -= 8;
      }
      while (v323);
      v270 = (uint64_t *)v349;
      v145 = v340;
    }
    v23 = v339;
  }
  if (v270)
  {
    v349 = 0;
    LODWORD(v350) = 0;
    WTF::fastFree((WTF *)v270, v6);
    v23 = v339;
    v145 = v340;
  }
LABEL_493:
  v299 = v351;
  if (v351)
  {
    v300 = *(unsigned int *)(v351 - 4);
    if ((_DWORD)v300)
    {
      v301 = v351;
      do
      {
        v302 = *(_QWORD *)v301;
        if (*(_QWORD *)v301 != -1)
        {
          if (*(_BYTE *)(v301 + 16))
          {
            v303 = *(WTF::StringImpl **)(v301 + 8);
            *(_QWORD *)(v301 + 8) = 0;
            if (v303)
            {
              if (*(_DWORD *)v303 == 2)
              {
                WTF::StringImpl::destroy(v303, v6);
                v302 = *(_QWORD *)v301;
              }
              else
              {
                *(_DWORD *)v303 -= 2;
              }
            }
          }
          *(_QWORD *)v301 = 0;
          if (v302)
          {
            if (*(_DWORD *)(v302 + 24) == 2)
            {
              if ((*(_WORD *)(v302 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v302, v6);
            }
            else
            {
              *(_DWORD *)(v302 + 24) -= 2;
            }
          }
        }
        v301 += 24;
        --v300;
      }
      while (v300);
    }
    WTF::fastFree((WTF *)(v299 - 16), v6);
    v23 = v339;
    v145 = v340;
  }
LABEL_510:
  v304 = v354;
  v354 = 0;
  if (v304)
  {
    v305 = (WTF *)*((_QWORD *)v304 + 18);
    if ((WTF *)((char *)v304 + 160) != v305 && v305 != 0)
    {
      *((_QWORD *)v304 + 18) = 0;
      *((_DWORD *)v304 + 38) = 0;
      WTF::fastFree(v305, v6);
    }
    v307 = *(WTF **)v304;
    if ((WTF *)((char *)v304 + 16) != *(WTF **)v304 && v307 != 0)
    {
      *(_QWORD *)v304 = 0;
      *((_DWORD *)v304 + 2) = 0;
      WTF::fastFree(v307, v6);
    }
    WTF::fastFree(v304, v6);
    v23 = v339;
    v145 = v340;
  }
  v309 = v355;
  if (HIDWORD(v356))
  {
    v317 = 8 * HIDWORD(v356);
    do
    {
      v318 = *(_QWORD *)v309;
      *(_QWORD *)v309 = 0;
      if (v318)
      {
        if (*(_DWORD *)(v318 + 24) == 2)
        {
          if ((*(_WORD *)(v318 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v318, v6);
            v145 = v340;
          }
        }
        else
        {
          *(_DWORD *)(v318 + 24) -= 2;
        }
      }
      v309 = (WTF *)((char *)v309 + 8);
      v317 -= 8;
    }
    while (v317);
    v309 = v355;
    v23 = v339;
    if (v355)
      goto LABEL_575;
  }
  else
  {
    if (!v355)
      goto LABEL_524;
LABEL_575:
    v355 = 0;
    LODWORD(v356) = 0;
    WTF::fastFree(v309, v6);
    v23 = v339;
    v145 = v340;
  }
LABEL_524:
  v310 = v357;
  if (!HIDWORD(v358))
  {
    if (!v357)
      goto LABEL_526;
LABEL_577:
    v357 = 0;
    LODWORD(v358) = 0;
    WTF::fastFree(v310, v6);
    v23 = v339;
    v145 = v340;
    goto LABEL_526;
  }
  v319 = 8 * HIDWORD(v358);
  do
  {
    v320 = *(_QWORD *)v310;
    *(_QWORD *)v310 = 0;
    if (v320)
    {
      if (*(_DWORD *)(v320 + 24) == 2)
      {
        if ((*(_WORD *)(v320 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v320, v6);
          v145 = v340;
        }
      }
      else
      {
        *(_DWORD *)(v320 + 24) -= 2;
      }
    }
    v310 = (WTF *)((char *)v310 + 8);
    v319 -= 8;
  }
  while (v319);
  v310 = v357;
  v23 = v339;
  if (v357)
    goto LABEL_577;
LABEL_526:
  v11 = v336;
  if (v337)
  {
    if (*((_DWORD *)v337 + 6) == 2)
    {
      if ((*((_WORD *)v337 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v337, v6);
        v23 = v339;
        v145 = v340;
      }
    }
    else
    {
      *((_DWORD *)v337 + 6) -= 2;
    }
  }
LABEL_529:
  if (*((_DWORD *)v23 + 6) != 2)
  {
    *((_DWORD *)v23 + 6) -= 2;
    goto LABEL_531;
  }
  if ((*((_WORD *)v23 + 15) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef(v23, v6);
LABEL_555:
    v145 = v340;
  }
LABEL_531:
  if (*((_DWORD *)v145 + 2) == 1)
    (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v145 + 8))(v145);
  else
    --*((_DWORD *)v145 + 2);
  v14 = v342;
LABEL_534:
  if (*((_DWORD *)v14 + 6) == 2)
  {
    if ((*((_WORD *)v14 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v14, v6);
  }
  else
  {
    *((_DWORD *)v14 + 6) -= 2;
  }
  do
  {
LABEL_536:
    v311 = __ldaxr(v11);
    v312 = v311 - 1;
  }
  while (__stlxr(v312, v11));
  if (!v312)
  {
    atomic_store(1u, v11);
    v321 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v321 = off_1E31FE290;
    v321[1] = v11;
    *(_QWORD *)&v363 = v321;
    WTF::ensureOnMainThread();
    v322 = v363;
    *(_QWORD *)&v363 = 0;
    if (v322)
      (*(void (**)(uint64_t))(*(_QWORD *)v322 + 8))(v322);
  }
LABEL_538:
  if (*(_DWORD *)v338 == 1)
  {
    WebCore::Page::~Page((uint64_t)v338);
    WTF::fastFree(v315, v316);
  }
  else
  {
    --*(_DWORD *)v338;
  }
LABEL_540:
  v313 = v348;
  v348 = 0;
  if (v313)
  {
    if (*((_DWORD *)v313 + 6) == 2)
    {
      if ((*((_WORD *)v313 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v313, v6);
    }
    else
    {
      *((_DWORD *)v313 + 6) -= 2;
    }
  }
  if (v347)
  {
    v325 = v345;
    v326 = 8 * v347;
    do
    {
      v327 = *(_QWORD *)v325;
      *(_QWORD *)v325 = 0;
      if (v327)
      {
        if (*(_DWORD *)(v327 + 24) == 2)
        {
          if ((*(_WORD *)(v327 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v327, v6);
        }
        else
        {
          *(_DWORD *)(v327 + 24) -= 2;
        }
      }
      v325 = (WTF *)((char *)v325 + 8);
      v326 -= 8;
    }
    while (v326);
  }
  result = v345;
  if (v345)
  {
    v345 = 0;
    v346 = 0;
    return (WTF *)WTF::fastFree(result, v6);
  }
  return result;
}

_QWORD *WebCore::ElementTargetingController::mainDocument(_QWORD *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;

  if (a2 && (v2 = *(_QWORD *)(a2 + 8)) != 0)
  {
    ++*(_DWORD *)v2;
    v3 = *(_QWORD *)(v2 + 160);
    if (v3)
      v4 = *(_BYTE *)(v3 + 144) == 0;
    else
      v4 = 0;
    if (v4)
    {
      v5 = (unsigned int *)(v3 + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
      v7 = *(_QWORD *)(v3 + 296);
      if (v7)
        *(_DWORD *)(v7 + 24) += 2;
      *this = v7;
      do
      {
        v8 = __ldaxr(v5);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v5));
      if (!v9)
      {
        atomic_store(1u, v5);
        v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v12 = off_1E31FE290;
        v12[1] = v5;
        v13 = (uint64_t)v12;
        WTF::ensureOnMainThread();
        this = (_QWORD *)v13;
        if (v13)
          this = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      }
    }
    else
    {
      *this = 0;
    }
    if (*(_DWORD *)v2 == 1)
    {
      WebCore::Page::~Page(v2);
      return (_QWORD *)WTF::fastFree(v10, v11);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  else
  {
    *this = 0;
  }
  return this;
}

uint64_t WebCore::searchForElementContainingText(WebCore *this, WebCore::ContainerNode *a2, const WTF::String *a3)
{
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  WTF *v9;
  void *v10;
  WTF *i;
  WebCore::Node *v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::Node *v18;
  WebCore::Node *v19;
  WebCore::Node *v20;
  WTF *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  WebCore::Node *v27;
  unint64_t v28;
  WebCore::Node *v29;
  WebCore::Node *v30;
  const WTF::String *v31;
  WebCore **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  WebCore *v38;
  WebCore::Node *v39;
  WebCore::Node *v40;
  uint64_t v42;
  WTF *v43;
  int v44;
  unsigned int v45;
  WebCore::Node *v46;
  int v47;
  WebCore::Node *v48;
  int v49;
  WebCore::Node *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  char v54;

  *((_DWORD *)this + 6) += 4;
  v5 = *((_WORD *)this + 14);
  if ((v5 & 1) != 0)
  {
    v6 = *((_QWORD *)this + 10);
    if (v6)
      LODWORD(v6) = *(_DWORD *)(v6 + 4);
  }
  else
  {
    LODWORD(v6) = 0;
    if ((v5 & 4) != 0)
    {
      v7 = *((_QWORD *)this + 10);
      if (v7)
      {
        LODWORD(v6) = 0;
        do
        {
          LODWORD(v6) = v6 + 1;
          v7 = *(_QWORD *)(v7 + 56);
        }
        while (v7);
      }
    }
  }
  v48 = this;
  v49 = 0;
  v50 = this;
  v51 = v6;
  while (1)
  {
    v8 = WebCore::treeOrder<(WebCore::TreeType)0>((int *)&v48, (uint64_t)&v50);
    if (v8 == 129 || ((char)v8 & 0x80000000) == 0)
      break;
    v54 = 1;
    v52 = 0;
    v53 = 0;
    v9 = (WTF *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v9 = off_1E33ADFB8;
    *((_QWORD *)v9 + 1) = &v52;
    *((_QWORD *)v9 + 2) = &v54;
    v43 = v9;
    WebCore::forEachMatch(&v48, a2, 576, &v43);
    (*(void (**)(WTF *))(*(_QWORD *)v9 + 8))(v9);
    WebCore::rangeForMatch((uint64_t)&v43, &v48, 576, v52, v53);
    i = v43;
    v12 = v46;
    if (v43 != v46 || v44 != v47)
    {
      if (v43 != v46)
      {
        v22 = WebCore::depth<(WebCore::TreeType)2>((uint64_t)v43);
        v23 = WebCore::depth<(WebCore::TreeType)2>((uint64_t)v12);
        v24 = v23 - v22;
        v25 = v22 >= v23;
        v26 = v22 - v23;
        if (v22 >= v23)
          v27 = i;
        else
          v27 = v12;
        if (v25)
        {
          v28 = v26;
        }
        else
        {
          v12 = i;
          v28 = v24;
        }
        for (; v28; --v28)
          v27 = (WebCore::Node *)WebCore::Node::parentInComposedTree(v27);
        for (i = v12; v27 != v12; i = v27)
        {
          v27 = (WebCore::Node *)WebCore::Node::parentInComposedTree(v27);
          v12 = (WebCore::Node *)WebCore::Node::parentInComposedTree(v12);
        }
      }
      if (!i)
      {
        v29 = v46;
        *((_DWORD *)v46 + 6) += 2;
        v30 = v48;
        v48 = v29;
        if (v30)
        {
          if (*((_DWORD *)v30 + 6) == 2)
          {
            if ((*((_WORD *)v30 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v30, v10);
          }
          else
          {
            *((_DWORD *)v30 + 6) -= 2;
          }
        }
        v49 = v47;
        v13 = 2;
        goto LABEL_35;
      }
      *((_DWORD *)i + 6) += 2;
      v14 = *((_QWORD *)i + 8) & 0xFFFFFFFFFFFFLL;
      if (!v14)
        goto LABEL_26;
      v15 = *(_DWORD *)((*((_QWORD *)i + 8) & 0xFFFFFFFFFFFFLL) + 0x10) + 1;
      *(_DWORD *)((*((_QWORD *)i + 8) & 0xFFFFFFFFFFFFLL) + 0x10) = v15;
      v16 = v14;
      if ((*(_BYTE *)(v14 + 45) & 2) != 0)
        v16 = *(_QWORD *)(*(_QWORD *)(v14 + 32) + 8);
      if ((*(_BYTE *)(*(_QWORD *)(v16 + 104) + 239) & 4) != 0)
      {
LABEL_26:
        v18 = v46;
        *((_DWORD *)v46 + 6) += 2;
        v19 = v48;
        v48 = v18;
        if (v19)
        {
          if (*((_DWORD *)v19 + 6) == 2)
          {
            if ((*((_WORD *)v19 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v19, v10);
          }
          else
          {
            *((_DWORD *)v19 + 6) -= 2;
          }
        }
        v49 = v47;
        if (v14)
        {
          v15 = *(_DWORD *)(v14 + 16);
          v13 = 2;
          goto LABEL_31;
        }
        v13 = 2;
      }
      else
      {
        v17 = *((_QWORD *)i + 4);
        if (v17)
        {
          if ((*(_WORD *)(v17 + 28) & 8) == 0)
            v17 = 0;
          v42 = v17;
        }
        else
        {
          v42 = 0;
        }
        v13 = 1;
LABEL_31:
        if (!v15)
        {
          __break(0xC471u);
          JUMPOUT(0x195F961C8);
        }
        *(_DWORD *)(v14 + 16) = v15 - 1;
      }
      if (*((_DWORD *)i + 6) == 2)
      {
        if ((*((_WORD *)i + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(i, v10);
      }
      else
      {
        *((_DWORD *)i + 6) -= 2;
      }
      goto LABEL_35;
    }
    v13 = 3;
LABEL_35:
    v20 = v46;
    v46 = 0;
    if (v20)
    {
      if (*((_DWORD *)v20 + 6) == 2)
      {
        if ((*((_WORD *)v20 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v20, v10);
      }
      else
      {
        *((_DWORD *)v20 + 6) -= 2;
      }
    }
    v21 = v43;
    v43 = 0;
    if (v21)
    {
      if (*((_DWORD *)v21 + 6) == 2)
      {
        if ((*((_WORD *)v21 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v21, v10);
      }
      else
      {
        *((_DWORD *)v21 + 6) -= 2;
      }
    }
    if (v13 != 2)
    {
      if (v13 != 3)
      {
        v35 = v42;
        goto LABEL_90;
      }
      break;
    }
  }
  WebCore::collectDocumentElementsFromChildFrames((WebCore *)&v43, this);
  v32 = (WebCore **)v43;
  if (!v45)
  {
    v35 = 0;
    goto LABEL_89;
  }
  v33 = 8 * v45;
  while (1)
  {
    v34 = WebCore::searchForElementContainingText(*v32, a2, v31);
    v35 = v34;
    if (v34)
      break;
    ++v32;
    v33 -= 8;
    if (!v33)
      goto LABEL_78;
  }
  v36 = *(_DWORD *)(v34 + 24);
  *(_DWORD *)(v34 + 24) = v36 + 2;
  if (v36)
  {
    *(_DWORD *)(v34 + 24) = v36;
  }
  else if ((*(_WORD *)(v34 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v34, v10);
  }
LABEL_78:
  v32 = (WebCore **)v43;
  if (!v45)
  {
LABEL_89:
    if (v32)
      goto LABEL_105;
    goto LABEL_90;
  }
  v37 = 8 * v45;
  do
  {
    v38 = *v32;
    *v32 = 0;
    if (v38)
    {
      if (*((_DWORD *)v38 + 6) == 2)
      {
        if ((*((_WORD *)v38 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v38, v10);
      }
      else
      {
        *((_DWORD *)v38 + 6) -= 2;
      }
    }
    ++v32;
    v37 -= 8;
  }
  while (v37);
  v32 = (WebCore **)v43;
  if (v43)
  {
LABEL_105:
    v43 = 0;
    v44 = 0;
    WTF::fastFree((WTF *)v32, v10);
  }
LABEL_90:
  v39 = v50;
  v50 = 0;
  if (v39)
  {
    if (*((_DWORD *)v39 + 6) == 2)
    {
      if ((*((_WORD *)v39 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v39, v10);
    }
    else
    {
      *((_DWORD *)v39 + 6) -= 2;
    }
  }
  v40 = v48;
  v48 = 0;
  if (v40)
  {
    if (*((_DWORD *)v40 + 6) == 2)
    {
      if ((*((_WORD *)v40 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v40, v10);
    }
    else
    {
      *((_DWORD *)v40 + 6) -= 2;
    }
  }
  return v35;
}

unsigned int *WebCore::ElementTargetingController::findElementFromSelectors(unsigned int *result, uint64_t a2, uint64_t a3)
{
  unsigned int *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WebCore::Node *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD **v9;
  const WTF::String *v10;
  const WTF::String *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WebCore::Node *v14;
  int16x8_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  int v18;
  WebCore::Node *v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  WebCore::Node *v26;
  int v27;
  int v28;
  WebCore::Node *v29;
  WebCore::Node **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WebCore::Node *v34[2];
  unsigned int v35;
  WTF::StringImpl *v36;
  char v37;
  WebCore::Node *v38;
  float32x4_t v39;

  v3 = result;
  if (!*(_DWORD *)(a3 + 12)
    || (v4 = a3,
        result = (unsigned int *)WebCore::ElementTargetingController::mainDocument(&v38, *(_QWORD *)(a2 + 8)),
        (v6 = v38) == 0))
  {
    *(_QWORD *)v3 = 0;
    *((_QWORD *)v3 + 1) = 0;
    return result;
  }
  v30 = (WebCore::Node **)v3;
  *((_DWORD *)v38 + 6) += 2;
  v7 = *(unsigned int *)(v4 + 12);
  if (!(_DWORD)v7)
    goto LABEL_88;
  v8 = 0;
  v9 = *(_QWORD ***)v4;
  v31 = *(_QWORD *)v4 + 8 * v7;
  v32 = v4;
  while (2)
  {
    v33 = *(unsigned int *)(v4 + 12);
    v10 = (const WTF::String *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(v9);
    v11 = v10;
    v12 = v5;
    v13 = *v9 ? (uint64_t)&(*v9)[*((unsigned int *)*v9 - 1)] : 0;
    if ((const WTF::String *)v13 == v10)
      goto LABEL_88;
    v14 = 0;
    ++v8;
    while (1)
    {
      WebCore::resolveSelectorToQuery((WebCore *)&v36, v11);
      v16 = v36;
      if (!v36)
        goto LABEL_51;
      if (!*((_DWORD *)v36 + 1))
      {
        v36 = 0;
        v18 = 5;
LABEL_48:
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v5);
        else
          *(_DWORD *)v16 -= 2;
        goto LABEL_50;
      }
      WebCore::ContainerNode::querySelector(v6, &v36, (uint64_t)v34, v15);
      v17 = v35;
      if (v35)
      {
        v18 = 5;
        goto LABEL_45;
      }
      v19 = v34[0];
      if (v34[0])
      {
        v20 = *((_DWORD *)v34[0] + 6) + 2;
        *((_DWORD *)v34[0] + 6) = v20;
        v21 = *((_QWORD *)v19 + 8) & 0xFFFFFFFFFFFFLL;
        if (!v21)
        {
          v18 = 5;
LABEL_42:
          v28 = v20 - 2;
          if (v28)
          {
            *((_DWORD *)v19 + 6) = v28;
          }
          else if ((*((_WORD *)v19 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v19, v5);
          }
          goto LABEL_44;
        }
        if ((*(_BYTE *)((*((_QWORD *)v19 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          goto LABEL_99;
        ++*(_DWORD *)((*((_QWORD *)v19 + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
        if (v37 == 2)
        {
          if ((*((_QWORD *)v19 + 9) & 0xFFFFFFFFFFFFLL) == 0
            || !*(_QWORD *)((*((_QWORD *)v19 + 9) & 0xFFFFFFFFFFFFLL) + 0xA8))
          {
            goto LABEL_23;
          }
        }
        else if (v37 == 4
               && ((*((_QWORD *)v19 + 9) & 0xFFFFFFFFFFFFLL) == 0
                || !*(_QWORD *)((*((_QWORD *)v19 + 9) & 0xFFFFFFFFFFFFLL) + 0xB0)))
        {
LABEL_23:
          v18 = 5;
LABEL_39:
          v27 = *(_DWORD *)(v21 + 16);
          if (!v27)
          {
LABEL_99:
            __break(0xC471u);
            JUMPOUT(0x195F9667CLL);
          }
          *(_DWORD *)(v21 + 16) = v27 - 1;
          if (!v19)
            goto LABEL_44;
          v20 = *((_DWORD *)v19 + 6);
          goto LABEL_42;
        }
        if (v8 == v33)
        {
          v22 = WebCore::RenderObject::absoluteBoundingBoxRect((WebCore::RenderObject *)v21, 1, 0);
          v39.f32[0] = (float)(int)v22;
          v39.f32[1] = (float)SHIDWORD(v22);
          v39.f32[2] = (float)v23;
          v39.f32[3] = (float)v24;
          v25 = v21;
          if ((*(_BYTE *)(v21 + 45) & 2) != 0)
          {
            v25 = *(_QWORD *)(v21 + 32);
            if (v25)
              v25 = *(_QWORD *)(v25 + 8);
          }
          WebCore::Document::convertAbsoluteToClientRect(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 24) + 8) + 40) + 8), &v39, (const WebCore::RenderStyle *)(v25 + 80));
          if (v39.f32[2] <= 0.0 || v39.f32[3] <= 0.0)
          {
            *v30 = 0;
            v30[1] = 0;
          }
          else
          {
            *v30 = v19;
            v26 = *(WebCore::Node **)v11;
            if (*(_QWORD *)v11)
              *(_DWORD *)v26 += 2;
            v19 = 0;
            v30[1] = v26;
          }
          v18 = 1;
        }
        else
        {
          if (v14)
          {
            if (*((_DWORD *)v14 + 6) == 2)
            {
              if ((*((_WORD *)v14 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v14, v5);
            }
            else
            {
              *((_DWORD *)v14 + 6) -= 2;
            }
          }
          v18 = 4;
          v14 = v19;
          v19 = 0;
        }
        goto LABEL_39;
      }
      v18 = 5;
LABEL_44:
      v17 = v35;
LABEL_45:
      if (v17 != 0xFFFFFFFFLL)
        ((void (*)(float32x4_t *, WebCore::Node **))off_1E33FE7B0[v17])(&v39, v34);
      v16 = v36;
      v36 = 0;
      if (v16)
        goto LABEL_48;
LABEL_50:
      if (v18 != 5)
        break;
LABEL_51:
      while (1)
      {
        v11 = (const WTF::String *)((char *)v11 + 8);
        if (v11 == v12)
          break;
        if ((unint64_t)(*(_QWORD *)v11 + 1) > 1)
          goto LABEL_55;
      }
      v11 = v12;
LABEL_55:
      if (v11 == (const WTF::String *)v13)
        goto LABEL_67;
    }
    if (v18 != 4)
      goto LABEL_74;
LABEL_67:
    v18 = 2;
    if (v14 && v8 != v33)
    {
      if ((*((_QWORD *)v14 + 9) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v29 = *(WebCore::Node **)((*((_QWORD *)v14 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
        if (v29)
        {
          *((_DWORD *)v29 + 6) += 2;
          if (*((_DWORD *)v6 + 6) == 2)
          {
            if ((*((_WORD *)v6 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v6, v5);
            v18 = 0;
          }
          else
          {
            v18 = 0;
            *((_DWORD *)v6 + 6) -= 2;
          }
          v6 = v29;
        }
      }
      goto LABEL_75;
    }
LABEL_74:
    if (!v14)
      break;
LABEL_75:
    if (*((_DWORD *)v14 + 6) == 2)
    {
      if ((*((_WORD *)v14 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v14, v5);
    }
    else
    {
      *((_DWORD *)v14 + 6) -= 2;
    }
    if (!v18)
    {
      ++v9;
      v4 = v32;
      if (v9 != (_QWORD **)v31)
        continue;
      goto LABEL_88;
    }
    break;
  }
  if (v18 != 2)
    goto LABEL_89;
LABEL_88:
  *v30 = 0;
  v30[1] = 0;
LABEL_89:
  if (*((_DWORD *)v6 + 6) == 2)
  {
    if ((*((_WORD *)v6 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v6, v5);
  }
  else
  {
    *((_DWORD *)v6 + 6) -= 2;
  }
  result = (unsigned int *)v38;
  if (v38)
  {
    if (*((_DWORD *)v38 + 6) == 2)
    {
      if ((*((_WORD *)v38 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(v38, v5);
    }
    else
    {
      *((_DWORD *)v38 + 6) -= 2;
    }
  }
  return result;
}

WebCore *WebCore::findOnlyMainElement(WebCore *this, const WebCore::HTMLBodyElement *a2)
{
  WebCore *v2;
  __int16 v3;
  WebCore *v4;
  BOOL v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  WebCore *v10;
  BOOL v11;
  BOOL v12;

  v2 = (WebCore *)*((_QWORD *)this + 10);
  if (v2)
  {
    v3 = *((_WORD *)v2 + 14);
    if ((v3 & 0x10) != 0)
    {
      v4 = (WebCore *)*((_QWORD *)this + 10);
    }
    else
    {
      do
      {
        if ((v3 & 4) == 0 || (v4 = (WebCore *)*((_QWORD *)v2 + 10)) == 0)
        {
          if (v2 == this)
            return 0;
          while (1)
          {
            v4 = (WebCore *)*((_QWORD *)v2 + 7);
            if (v4)
              break;
            v2 = (WebCore *)*((_QWORD *)v2 + 4);
            if (v2)
              v5 = v2 == this;
            else
              v5 = 1;
            if (v5)
              return 0;
          }
        }
        v3 = *((_WORD *)v4 + 14);
        v2 = v4;
      }
      while ((v3 & 0x10) == 0);
    }
    v6 = 0;
    v7 = *(_QWORD *)(WebCore::HTMLNames::mainTag + 24);
    while (1)
    {
      if (*(_QWORD *)(*((_QWORD *)v4 + 12) + 24) == v7)
      {
        if (v6)
        {
          if (*((_DWORD *)v6 + 6) == 2)
          {
            if ((*((_WORD *)v6 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v6, a2);
          }
          else
          {
            *((_DWORD *)v6 + 6) -= 2;
          }
          return 0;
        }
        *((_DWORD *)v4 + 6) += 2;
        v6 = v4;
      }
      v8 = *((_QWORD *)v4 + 10);
      if (!v8)
      {
        if (v4 == this)
        {
LABEL_39:
          if (v6)
          {
            if (*((_DWORD *)v6 + 6) == 2)
            {
              if ((*((_WORD *)v6 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v6, a2);
            }
            else
            {
              *((_DWORD *)v6 + 6) -= 2;
            }
          }
          return v6;
        }
        while (1)
        {
          v8 = *((_QWORD *)v4 + 7);
          if (v8)
            break;
          v4 = (WebCore *)*((_QWORD *)v4 + 4);
          if (v4)
            v12 = v4 == this;
          else
            v12 = 1;
          if (v12)
            goto LABEL_39;
        }
      }
      v9 = *(_WORD *)(v8 + 28);
      v4 = (WebCore *)v8;
      if ((v9 & 0x10) == 0)
      {
        do
        {
          v10 = (WebCore *)v8;
          if ((v9 & 4) == 0 || (v8 = *(_QWORD *)(v8 + 80)) == 0)
          {
            if (v10 == this)
              goto LABEL_39;
            while (1)
            {
              v8 = *((_QWORD *)v10 + 7);
              if (v8)
                break;
              v10 = (WebCore *)*((_QWORD *)v10 + 4);
              if (v10)
                v11 = v10 == this;
              else
                v11 = 1;
              if (v11)
                goto LABEL_39;
            }
          }
          v9 = *(_WORD *)(v8 + 28);
        }
        while ((v9 & 0x10) == 0);
        v4 = (WebCore *)v8;
      }
    }
  }
  return 0;
}

WTF *WebCore::targetedElementInfo(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  WTF *result;
  void *v9;
  uint64_t v10;
  WebCore::RenderObject **v11;
  int v12;
  WebCore::RenderObject *v13;
  unsigned __int8 *v14;
  int v15;
  unsigned int v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v23;
  int v25;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  unint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  void *v37;
  float32x4_t v38;
  uint64_t v39;
  __int128 v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  int v44;
  int v45;
  _QWORD *v46;
  _QWORD *i;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  __int128 v55;
  unsigned int v56;
  unsigned int v57;
  _QWORD *v58;
  BOOL v59;
  BOOL v60;
  _QWORD *v61;
  uint64_t v62;
  BOOL v63;
  BOOL v64;
  const WebCore::Element *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  float32x4_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  char v79;
  __int128 v80;
  float32x4_t v81;
  __int128 v82;
  __int128 v83;
  int v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  float32x4_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  __int16 v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  result = (WTF *)WebCore::Document::updateLayout(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 8), 2u, 0);
  v10 = *(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v10)
    goto LABEL_100;
  if ((*(_BYTE *)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195F96E54);
  }
  v11 = *(WebCore::RenderObject ***)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL) + 8);
  if (!v11)
  {
    v11 = (WebCore::RenderObject **)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v11 = 1;
    v11[1] = (WebCore::RenderObject *)v10;
    result = *(WTF **)(v10 + 8);
    *(_QWORD *)(v10 + 8) = v11;
    if (result)
    {
      if (*(_DWORD *)result != 1)
      {
        --*(_DWORD *)result;
        goto LABEL_4;
      }
      result = (WTF *)WTF::fastFree(result, v9);
      v11 = *(WebCore::RenderObject ***)(v10 + 8);
      if (!v11)
      {
LABEL_100:
        *(_BYTE *)a1 = 0;
        *(_BYTE *)(a1 + 176) = 0;
        return result;
      }
    }
  }
LABEL_4:
  v12 = (*(_DWORD *)v11)++;
  v13 = v11[1];
  if (v13)
  {
    v14 = *(unsigned __int8 **)(*((_QWORD *)v13 + 11) + 24);
    v15 = v14[12];
    v17 = v15 == 4;
    v16 = v15 & 0xFFFFFFF7;
    v17 = v17 || v16 == 3;
    v18 = v17;
    v19 = v14[20];
    v20 = v14[28];
    v21 = v14[36];
    if ((v21 & 0xFFFFFFF7) == 3 || v21 == 4)
      v23 = 0x1000000;
    else
      v23 = 0;
    if ((v20 & 0xFFFFFFF7) == 3 || v20 == 4)
      v25 = 0x10000;
    else
      v25 = 0;
    if ((v19 & 0xFFFFFFF7) == 3 || v19 == 4)
      v27 = 256;
    else
      v27 = 0;
    v28 = v27 | v18;
    v29 = v25 | v23;
    v30 = *((_DWORD *)v13 + 24);
    v31 = WebCore::RenderObject::absoluteBoundingBoxRect(v11[1], 1, 0);
    v81.f32[0] = (float)(int)v31;
    v81.f32[1] = (float)SHIDWORD(v31);
    v81.f32[2] = (float)v32;
    v81.f32[3] = (float)v33;
    v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v13 + 3) + 8) + 40) + 8);
    if ((*((_BYTE *)v13 + 45) & 2) != 0)
    {
      v76 = *((_QWORD *)v13 + 4);
      if (v76)
        v13 = *(WebCore::RenderObject **)(v76 + 8);
      else
        v13 = 0;
    }
    v35 = v28 | v29;
    v36 = (v30 >> 19) & 7;
    WebCore::Document::convertAbsoluteToClientRect(v34, &v81, (WebCore::RenderObject *)((char *)v13 + 80));
    v38 = v81;
    if (*(_DWORD *)v11 == 1)
      WTF::fastFree((WTF *)v11, v37);
    else
      --*(_DWORD *)v11;
    WebCore::TextExtraction::extractRenderedText((_QWORD *)a2, (uint64_t)&v77);
    v81.i64[0] = WebCore::Element::identifier((WebCore::Element *)a2);
    v39 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8);
    v40 = *(_OWORD *)(v39 + 432);
    v82 = *(_OWORD *)(v39 + 416);
    v83 = v40;
    v84 = v35;
    v41 = v77;
    v77 = 0;
    *(_QWORD *)&v85 = v41;
    WebCore::searchableTextForTarget((WebCore *)((char *)&v85 + 8), (WebCore::Element *)a2);
    v42 = v78;
    v78 = 0;
    *(_QWORD *)&v86 = v42;
    WebCore::selectorsForTarget((uint64_t)&v86 + 8, a2, a4);
    v43 = WebCore::Element::boundingBoxInRootViewCoordinates((WebCore::Element *)a2);
    *(float *)&v88 = (float)(int)v43;
    *((float *)&v88 + 1) = (float)SHIDWORD(v43);
    *((float *)&v88 + 2) = (float)v44;
    *((float *)&v88 + 3) = (float)v45;
    v89 = v38;
    v90 = v36;
    v91 = 0;
    v92 = 0;
    v46 = *(_QWORD **)(a2 + 80);
    if (v46)
    {
      if (((*(uint64_t (**)(_QWORD))(*v46 + 192))(*(_QWORD *)(a2 + 80)) & 1) != 0)
      {
        i = v46;
        while (1)
        {
LABEL_35:
          v48 = i[14];
          if (v48)
          {
            v49 = *(_QWORD *)(v48 + 8);
            if (v49)
            {
              v50 = (unsigned int *)(v49 + 8);
              do
                v51 = __ldaxr(v50);
              while (__stlxr(v51 + 1, v50));
              v80 = *(_OWORD *)(v49 + 32);
              v52 = HIDWORD(v92);
              if (HIDWORD(v92) == (_DWORD)v92)
              {
                v53 = WTF::Vector<std::optional<WebCore::GPUColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v91, HIDWORD(v92) + 1, (unint64_t)&v80);
                v52 = HIDWORD(v92);
                v54 = v91;
                v55 = *(_OWORD *)v53;
              }
              else
              {
                v54 = v91;
                v55 = v80;
              }
              *(_OWORD *)(v54 + 16 * v52) = v55;
              ++HIDWORD(v92);
              do
              {
                v56 = __ldaxr(v50);
                v57 = v56 - 1;
              }
              while (__stlxr(v57, v50));
              if (!v57)
              {
                atomic_store(1u, v50);
                v61 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                *v61 = off_1E31FE290;
                v61[1] = v50;
                *(_QWORD *)&v80 = v61;
                WTF::ensureOnMainThread();
                v62 = v80;
                *(_QWORD *)&v80 = 0;
                if (v62)
                  (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
              }
            }
          }
          v58 = (_QWORD *)i[10];
          if (!v58)
          {
            if (i == (_QWORD *)a2)
              goto LABEL_79;
            while (1)
            {
              v58 = (_QWORD *)i[7];
              if (v58)
                break;
              i = (_QWORD *)i[4];
              if (i)
                v60 = i == (_QWORD *)a2;
              else
                v60 = 1;
              if (v60)
                goto LABEL_79;
            }
          }
          for (i = v58; ((*(uint64_t (**)(_QWORD *))(*i + 192))(i) & 1) == 0; v58 = i)
          {
            if ((*((_WORD *)v58 + 14) & 4) != 0)
            {
              i = (_QWORD *)v58[10];
              if (i)
                continue;
            }
            if (v58 == (_QWORD *)a2)
              goto LABEL_79;
            while (1)
            {
              i = (_QWORD *)v58[7];
              if (i)
                break;
              v58 = (_QWORD *)v58[4];
              if (v58)
                v59 = v58 == (_QWORD *)a2;
              else
                v59 = 1;
              if (v59)
                goto LABEL_79;
            }
          }
        }
      }
      while (1)
      {
        if ((*((_WORD *)v46 + 14) & 4) == 0 || (i = (_QWORD *)v46[10]) == 0)
        {
          if (v46 == (_QWORD *)a2)
            break;
          while (1)
          {
            i = (_QWORD *)v46[7];
            if (i)
              break;
            v46 = (_QWORD *)v46[4];
            if (v46)
              v63 = v46 == (_QWORD *)a2;
            else
              v63 = 1;
            if (v63)
              goto LABEL_79;
          }
        }
        v46 = i;
        if ((*(unsigned int (**)(_QWORD *))(*i + 192))(i))
          goto LABEL_35;
      }
    }
LABEL_79:
    v93 = 0;
    WebCore::collectMediaAndLinkURLsRecursive((WebCore::HTMLAnchorElement *)a2, (uint64_t)&v93);
    LOBYTE(v94) = a3;
    v64 = (~*(unsigned __int16 *)(a2 + 28) & 0x408) == 0
       && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 368))(a2) != 0;
    BYTE1(v94) = v64;
    BYTE2(v94) = (*(_QWORD *)(a2 + 16) & 0x10000000000000) != 0;
    HIBYTE(v94) = WebCore::Element::isInVisibilityAdjustmentSubtree((WebCore::Element *)a2);
    LOBYTE(v95) = v79;
    HIBYTE(v95) = WebCore::hasAudibleMedia((WebCore *)a2, v65);
    v66 = v82;
    *(float32x4_t *)a1 = v81;
    *(_OWORD *)(a1 + 16) = v66;
    *(_OWORD *)(a1 + 32) = v83;
    *(_DWORD *)(a1 + 48) = v84;
    v67 = v85;
    v85 = 0u;
    *(_OWORD *)(a1 + 56) = v67;
    v68 = v86;
    v86 = 0u;
    *(_OWORD *)(a1 + 72) = v68;
    *(_QWORD *)&v68 = v87;
    v87 = 0;
    *(_QWORD *)(a1 + 88) = v68;
    v69 = v88;
    v70 = v89;
    *(_BYTE *)(a1 + 128) = v90;
    *(_OWORD *)(a1 + 96) = v69;
    *(float32x4_t *)(a1 + 112) = v70;
    v71 = v91;
    v91 = 0;
    *(_QWORD *)(a1 + 136) = v71;
    *(_QWORD *)&v69 = v92;
    v92 = 0;
    *(_QWORD *)(a1 + 144) = v69;
    v72 = v93;
    v93 = 0;
    *(_QWORD *)(a1 + 152) = v72;
    LODWORD(v72) = v94;
    *(_WORD *)(a1 + 164) = v95;
    *(_DWORD *)(a1 + 160) = v72;
    *(_BYTE *)(a1 + 176) = 1;
    WebCore::TargetedElementInfo::~TargetedElementInfo((WebCore::TargetedElementInfo *)&v81, v73);
    v75 = v78;
    v78 = 0;
    if (v75)
    {
      if (*(_DWORD *)v75 == 2)
        WTF::StringImpl::destroy(v75, v74);
      else
        *(_DWORD *)v75 -= 2;
    }
    result = v77;
    v77 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF *)WTF::StringImpl::destroy(result, v74);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 176) = 0;
    if (v12)
      *(_DWORD *)v11 = v12;
    else
      return (WTF *)WTF::fastFree((WTF *)v11, v9);
  }
  return result;
}

uint64_t WebCore::ElementTargetingController::adjustVisibility(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  unsigned int *v8;
  unsigned int v9;
  WebCore::LocalFrameView *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  WTF *v24;
  void *v26;
  WTF *v27;
  WTF *v28;
  WTF *v30;
  void *v31;
  WTF *v32;
  WTF *v33;
  WTF *v35;
  void *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WebCore::Document *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  WebCore::Document *v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  WTF *v55;
  WTF *v57;
  unsigned int v59;
  unsigned int v60;
  WTF *v62;
  void *v63;
  WTF *v64;
  uint64_t v65;
  WebCore::Node **v66;
  WebCore::Node **v67;
  WebCore::Node *v68;
  WebCore::Node *v69;
  WebCore::Node *v70;
  WebCore::Node *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  _QWORD *v78;
  WebCore::Node *v79;
  WebCore::Node *v80;
  WebCore::Node *v81;
  uint64_t v84;
  WebCore::Node *v85;
  WTF *v86;
  WTF *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  WTF *v94;
  WTF::StringImpl ***v95;
  uint64_t v96;
  uint64_t *v97;
  WTF *v98;
  uint64_t v99;
  WTF *v100;
  void *v101;
  char v102;
  _QWORD *v103;
  uint64_t v104;
  WebCore::Node *v105;
  WebCore::Node *v106;
  uint64_t v107;
  WebCore::Document *v108;
  char v109;
  WTF *v110;
  uint64_t v111;
  WebCore::Node *v112;
  WTF *v113;
  WTF *v114;
  _QWORD v115[2];
  WTF *v116;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 8)) == 0)
  {
    v102 = 0;
    return v102 & 1;
  }
  ++*(_DWORD *)v3;
  v4 = *(_QWORD *)(v3 + 160);
  if (v4)
    v5 = *(_BYTE *)(v4 + 144) == 0;
  else
    v5 = 0;
  if (!v5)
  {
    v102 = 0;
    goto LABEL_105;
  }
  v8 = (unsigned int *)(v4 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = *(WebCore::LocalFrameView **)(v4 + 288);
  if (!v10)
  {
    v102 = 0;
    goto LABEL_103;
  }
  ++*((_DWORD *)v10 + 2);
  v11 = WebCore::LocalFrameView::baseLayoutViewportSize(v10);
  if ((float)((float)((float)(int)v11 * 0.015625) * (float)((float)SHIDWORD(v11) * 0.015625)) == 0.0)
  {
    v102 = 0;
    goto LABEL_101;
  }
  v115[0] = 0;
  v115[1] = 0;
  v116 = 0;
  v12 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v12)
  {
    v13 = *(_QWORD *)(a1 + 96);
    if (v13)
    {
      v14 = *(_QWORD **)a2;
      v15 = (_QWORD *)(*(_QWORD *)a2 + (v12 << 6));
LABEL_16:
      v16 = *(_DWORD *)(v13 - 8);
      v17 = *v14 + ~(*v14 << 32);
      v18 = (v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13);
      v19 = (9 * (v18 ^ (v18 >> 8))) ^ ((9 * (v18 ^ (v18 >> 8))) >> 15);
      v20 = v16 & (((v19 + ~(v19 << 27)) >> 31) ^ (v19 + ~((_DWORD)v19 << 27)));
      v21 = *(_QWORD *)(v13 + 24 * v20);
      if (v21 != *v14)
      {
        v22 = 1;
        do
        {
          if (!v21)
            goto LABEL_34;
          v20 = (v20 + v22) & v16;
          v21 = *(_QWORD *)(v13 + 24 * v20);
          ++v22;
        }
        while (v21 != *v14);
      }
      v23 = v13 + 24 * v20;
      v24 = *(WTF **)(v23 + 16);
      if ((int)v24 >= 1 && SHIDWORD(v24) >= 1)
      {
        v112 = *(WebCore::Node **)(v23 + 8);
        v113 = v24;
        v114 = 0;
        WebCore::Region::unite((WTF *)v115, (const WebCore::Region *)&v112);
        v27 = v114;
        v114 = 0;
        if (v27)
        {
          v28 = (WTF *)*((_QWORD *)v27 + 18);
          if ((WTF *)((char *)v27 + 160) != v28 && v28 != 0)
          {
            *((_QWORD *)v27 + 18) = 0;
            *((_DWORD *)v27 + 38) = 0;
            WTF::fastFree(v28, v26);
          }
          v30 = *(WTF **)v27;
          if ((WTF *)((char *)v27 + 16) != *(WTF **)v27 && v30)
          {
            *(_QWORD *)v27 = 0;
            *((_DWORD *)v27 + 2) = 0;
            WTF::fastFree(v30, v26);
          }
          WTF::fastFree(v27, v26);
        }
      }
LABEL_34:
      while (1)
      {
        v14 += 8;
        if (v14 == v15)
          break;
        v13 = *(_QWORD *)(a1 + 96);
        if (v13)
          goto LABEL_16;
      }
    }
  }
  WebCore::Region::Region((uint64_t)&v112, (const WebCore::Region *)(a1 + 200));
  WebCore::Region::intersect((int *)&v112, (const WebCore::Region *)v115);
  WebCore::Region::unite((WTF *)(a1 + 224), (const WebCore::Region *)&v112);
  v32 = v114;
  v114 = 0;
  if (v32)
  {
    v33 = (WTF *)*((_QWORD *)v32 + 18);
    if ((WTF *)((char *)v32 + 160) != v33 && v33 != 0)
    {
      *((_QWORD *)v32 + 18) = 0;
      *((_DWORD *)v32 + 38) = 0;
      WTF::fastFree(v33, v31);
    }
    v35 = *(WTF **)v32;
    if ((WTF *)((char *)v32 + 16) != *(WTF **)v32 && v35 != 0)
    {
      *(_QWORD *)v32 = 0;
      *((_DWORD *)v32 + 2) = 0;
      WTF::fastFree(v35, v31);
    }
    WTF::fastFree(v32, v31);
  }
  v107 = v3;
  WebCore::Region::unite((WTF *)(a1 + 200), (const WebCore::Region *)v115);
  v38 = 0;
  v110 = 0;
  v111 = 0;
  v39 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v39)
  {
    if (v39 >> 29)
    {
      __break(0xC471u);
LABEL_173:
      JUMPOUT(0x195F976A0);
    }
    v64 = (WTF *)WTF::fastMalloc((WTF *)(8 * v39));
    LODWORD(v111) = v39;
    v110 = v64;
    v65 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v65)
    {
      v66 = *(WebCore::Node ***)a2;
      v67 = (WebCore::Node **)(*(_QWORD *)a2 + (v65 << 6));
      do
      {
        {
          if (WebCore::elementIdentifiersMap(void)::map && *(_DWORD *)(WebCore::elementIdentifiersMap(void)::map - 12))
          {
            v68 = *v66;
            v70 = v66[2];
            v69 = v66[3];
            v71 = v66[4];
            v72 = *(unsigned int *)(WebCore::elementIdentifiersMap(void)::map - 4);
            if ((_DWORD)v72)
            {
              v73 = 16 * v72;
              v74 = (_QWORD *)WebCore::elementIdentifiersMap(void)::map;
              while ((unint64_t)(*v74 + 1) <= 1)
              {
                v74 += 2;
                v73 -= 16;
                if (!v73)
                  goto LABEL_120;
              }
            }
            else
            {
              v74 = (_QWORD *)WebCore::elementIdentifiersMap(void)::map;
            }
            v75 = WebCore::elementIdentifiersMap(void)::map + 16 * v72;
LABEL_124:
            if (v74 != (_QWORD *)v75)
            {
              if ((WebCore::Node *)v74[1] == v68)
              {
                v76 = *(_QWORD *)(*v74 + 8);
                if (v76)
                {
                  v77 = *(_DWORD *)(v76 + 24);
                  *(_DWORD *)(v76 + 24) = v77 + 2;
                  v78 = *(_QWORD **)(*(_QWORD *)(v76 + 40) + 8);
                  v79 = (WebCore::Node *)v78[52];
                  v80 = (WebCore::Node *)v78[53];
                  v81 = (WebCore::Node *)v78[54];
                  if (v80 == v69 && v79 == v70 && v81 == v71)
                  {
                    v112 = (WebCore::Node *)v76;
                    LODWORD(v84) = HIDWORD(v111);
                    if (HIDWORD(v111) == (_DWORD)v111)
                    {
                      v97 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v110, HIDWORD(v111) + 1, (unint64_t)&v112);
                      v84 = HIDWORD(v111);
                      v98 = v110;
                      v99 = *v97;
                      *v97 = 0;
                      *((_QWORD *)v98 + v84) = v99;
                    }
                    else
                    {
                      v112 = 0;
                      *((_QWORD *)v110 + HIDWORD(v111)) = v76;
                    }
                    HIDWORD(v111) = v84 + 1;
                    v85 = v112;
                    v112 = 0;
                    if (v85)
                    {
                      if (*((_DWORD *)v85 + 6) == 2)
                      {
                        if ((*((_WORD *)v85 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef(v85, v37);
                      }
                      else
                      {
                        *((_DWORD *)v85 + 6) -= 2;
                      }
                    }
                    if (*(_DWORD *)(a1 + 272) <= 0x13u)
                    {
                      v86 = v66[6];
                      v112 = v68;
                      v113 = v86;
                      v87 = v66[7];
                      v66[6] = 0;
                      v66[7] = 0;
                      v114 = v87;
                      v88 = *(unsigned int *)(a1 + 180);
                      if ((_DWORD)v88 == *(_DWORD *)(a1 + 176))
                      {
                        v89 = WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 168, v88 + 1, (unint64_t)&v112);
                        v90 = *(_QWORD *)(a1 + 168) + 24 * *(unsigned int *)(a1 + 180);
                        v91 = *(_QWORD *)v89;
                        *(_QWORD *)(v90 + 8) = 0;
                        *(_QWORD *)(v90 + 16) = 0;
                        *(_QWORD *)v90 = v91;
                        v92 = *(_QWORD *)(v89 + 8);
                        *(_QWORD *)(v89 + 8) = 0;
                        *(_QWORD *)(v90 + 8) = v92;
                        LODWORD(v92) = *(_DWORD *)(v89 + 16);
                        *(_DWORD *)(v89 + 16) = 0;
                        *(_DWORD *)(v90 + 16) = v92;
                        v93 = *(_DWORD *)(v89 + 20);
                        *(_DWORD *)(v89 + 20) = 0;
                      }
                      else
                      {
                        v90 = *(_QWORD *)(a1 + 168) + 24 * v88;
                        *(_QWORD *)(v90 + 8) = 0;
                        *(_QWORD *)(v90 + 16) = 0;
                        *(_QWORD *)v90 = v68;
                        v94 = v113;
                        v113 = 0;
                        *(_QWORD *)(v90 + 8) = v94;
                        LODWORD(v94) = (_DWORD)v114;
                        LODWORD(v114) = 0;
                        *(_DWORD *)(v90 + 16) = (_DWORD)v94;
                        v93 = HIDWORD(v114);
                        HIDWORD(v114) = 0;
                      }
                      *(_DWORD *)(v90 + 20) = v93;
                      ++*(_DWORD *)(a1 + 180);
                      v95 = (WTF::StringImpl ***)v113;
                      if (HIDWORD(v114))
                      {
                        v96 = 8 * HIDWORD(v114);
                        do
                        {
                          if (*v95)
                            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v95, (WTF::StringImpl *)v37);
                          ++v95;
                          v96 -= 8;
                        }
                        while (v96);
                        v95 = (WTF::StringImpl ***)v113;
                      }
                      if (v95)
                      {
                        v113 = 0;
                        LODWORD(v114) = 0;
                        WTF::fastFree((WTF *)v95, v37);
                      }
                      ++*(_DWORD *)(a1 + 272);
                    }
                  }
                  else if (v77)
                  {
                    *(_DWORD *)(v76 + 24) = v77;
                  }
                  else if ((*(_WORD *)(v76 + 30) & 0x400) == 0)
                  {
                    WebCore::Node::removedLastRef((WebCore::Node *)v76, v37);
                  }
                }
              }
              else
              {
                while (1)
                {
                  v74 += 2;
                  if (v74 == (_QWORD *)v75)
                    break;
                  if ((unint64_t)(*v74 + 1) > 1)
                    goto LABEL_124;
                }
              }
            }
          }
        }
        else
        {
          WebCore::elementIdentifiersMap(void)::map = 0;
        }
LABEL_120:
        v66 += 8;
      }
      while (v66 != v67);
      v38 = (uint64_t *)v110;
    }
    else
    {
      v38 = (uint64_t *)v64;
    }
  }
  if (!HIDWORD(v111))
  {
    v102 = 0;
    goto LABEL_87;
  }
  v102 = 0;
  v40 = 8 * HIDWORD(v111);
  do
  {
    v37 = (void *)*v38;
    v41 = *(_QWORD *)(*v38 + 64) & 0xFFFFFFFFFFFFLL;
    if (!v41)
      goto LABEL_61;
    if ((*(_BYTE *)((*(_QWORD *)(*v38 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      goto LABEL_173;
    }
    ++*(_DWORD *)((*(_QWORD *)(*v38 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
    WebCore::adjustVisibilityIfNeeded((unsigned int *)&v108, (WebCore::Element *)v37);
    v42 = v108;
    if (v108)
    {
      if (v109)
        WebCore::Node::invalidateStyle((uint64_t)v108, 4u, 2);
      else
        WebCore::Element::invalidateStyle(v108);
      WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>((uint64_t)&v112, a1 + 248, v38);
      WTF::WeakHashSet<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Document>(a1 + 80, *(_QWORD *)(*(_QWORD *)(*v38 + 40) + 8), (uint64_t)&v112);
      if (*((_DWORD *)v42 + 6) == 2)
      {
        if ((*((_WORD *)v42 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v42, v37);
      }
      else
      {
        *((_DWORD *)v42 + 6) -= 2;
      }
      v102 = 1;
    }
    v43 = *(_DWORD *)(v41 + 16);
    if (!v43)
    {
      __break(0xC471u);
      JUMPOUT(0x195F976C0);
    }
    *(_DWORD *)(v41 + 16) = v43 - 1;
LABEL_61:
    ++v38;
    v40 -= 8;
  }
  while (v40);
  if ((v102 & 1) != 0)
  {
    v44 = *(_QWORD *)(a1 + 8);
    if (v44)
    {
      v45 = *(_QWORD *)(v44 + 8);
      if (v45)
      {
        ++*(_DWORD *)v45;
        v46 = (WebCore::Document *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v46 = off_1E33FE998;
        v108 = v46;
        v47 = *(_QWORD *)(v45 + 160);
        v48 = (unsigned int *)(v47 + 8);
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 + 1, v48));
        WebCore::Page::forEachDocumentFromMainFrame(v47, &v108);
        do
        {
          v50 = __ldaxr(v48);
          v51 = v50 - 1;
        }
        while (__stlxr(v51, v48));
        if (!v51)
        {
          atomic_store(1u, v48);
          v105 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v105 = off_1E31FE290;
          *((_QWORD *)v105 + 1) = v48;
          v112 = v105;
          WTF::ensureOnMainThread();
          v106 = v112;
          v112 = 0;
          if (v106)
            (*(void (**)(WebCore::Node *))(*(_QWORD *)v106 + 8))(v106);
        }
        (*(void (**)(WebCore::Document *))(*(_QWORD *)v46 + 8))(v46);
        if (*(_DWORD *)v45 == 1)
        {
          WebCore::Page::~Page(v45);
          WTF::fastFree(v100, v101);
        }
        else
        {
          --*(_DWORD *)v45;
        }
      }
    }
  }
  v38 = (uint64_t *)v110;
  if (HIDWORD(v111))
  {
    v52 = 8 * HIDWORD(v111);
    do
    {
      v53 = *v38;
      *v38 = 0;
      if (v53)
      {
        if (*(_DWORD *)(v53 + 24) == 2)
        {
          if ((*(_WORD *)(v53 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v53, v37);
        }
        else
        {
          *(_DWORD *)(v53 + 24) -= 2;
        }
      }
      ++v38;
      v52 -= 8;
    }
    while (v52);
    v38 = (uint64_t *)v110;
  }
LABEL_87:
  v3 = v107;
  if (v38)
  {
    v110 = 0;
    LODWORD(v111) = 0;
    WTF::fastFree((WTF *)v38, v37);
  }
  v54 = v116;
  v116 = 0;
  if (v54)
  {
    v55 = (WTF *)*((_QWORD *)v54 + 18);
    if ((WTF *)((char *)v54 + 160) != v55 && v55 != 0)
    {
      *((_QWORD *)v54 + 18) = 0;
      *((_DWORD *)v54 + 38) = 0;
      WTF::fastFree(v55, v37);
    }
    v57 = *(WTF **)v54;
    if ((WTF *)((char *)v54 + 16) != *(WTF **)v54 && v57 != 0)
    {
      *(_QWORD *)v54 = 0;
      *((_DWORD *)v54 + 2) = 0;
      WTF::fastFree(v57, v37);
    }
    WTF::fastFree(v54, v37);
  }
LABEL_101:
  if (*((_DWORD *)v10 + 2) == 1)
    (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v10 + 8))(v10);
  else
    --*((_DWORD *)v10 + 2);
  do
  {
LABEL_103:
    v59 = __ldaxr(v8);
    v60 = v59 - 1;
  }
  while (__stlxr(v60, v8));
  if (!v60)
  {
    atomic_store(1u, v8);
    v103 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v103 = off_1E31FE290;
    v103[1] = v8;
    v115[0] = v103;
    WTF::ensureOnMainThread();
    v104 = v115[0];
    v115[0] = 0;
    if (v104)
      (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  }
LABEL_105:
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::Page::~Page(v3);
    WTF::fastFree(v62, v63);
  }
  else
  {
    --*(_DWORD *)v3;
  }
  return v102 & 1;
}

unsigned int *WebCore::adjustVisibilityIfNeeded(unsigned int *this, WebCore::Element *a2)
{
  unsigned int *v3;
  uint64_t v4;
  WebCore::Element *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  WebCore::Element *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  WTF *v18;
  void *v19;

  v3 = this;
  if ((~*((unsigned __int16 *)a2 + 14) & 0x408) != 0
    || (this = (unsigned int *)(*(uint64_t (**)(WebCore::Element *))(*(_QWORD *)a2 + 368))(a2), !(_DWORD)this))
  {
LABEL_12:
    v5 = a2;
    goto LABEL_13;
  }
  *((_DWORD *)a2 + 6) += 2;
  v4 = *((_QWORD *)a2 + 14);
  if (!v4)
  {
    v5 = 0;
LABEL_5:
    v6 = 1;
    goto LABEL_9;
  }
  v5 = *(WebCore::Element **)(v4 + 8);
  if (!v5)
    goto LABEL_5;
  v7 = *((_DWORD *)v5 + 6);
  *((_DWORD *)v5 + 6) = v7 + 2;
  if (v7)
  {
    v6 = 0;
    *((_DWORD *)v5 + 6) = v7;
  }
  else
  {
    if ((*((_WORD *)v5 + 15) & 0x400) == 0)
      this = WebCore::Node::removedLastRef(v5, a2);
    v6 = 0;
  }
LABEL_9:
  if (*((_DWORD *)a2 + 6) == 2)
  {
    if ((*((_WORD *)a2 + 15) & 0x400) == 0)
      this = WebCore::Node::removedLastRef(a2, a2);
  }
  else
  {
    *((_DWORD *)a2 + 6) -= 2;
  }
  if (v6)
    goto LABEL_12;
LABEL_13:
  *((_DWORD *)v5 + 6) += 2;
  v8 = *((unsigned __int16 *)a2 + 14);
  if ((~v8 & 0x408) == 0)
  {
    this = (unsigned int *)(*(uint64_t (**)(WebCore::Element *))(*(_QWORD *)a2 + 368))(a2);
    if ((_DWORD)this == 7)
    {
      v9 = 4;
      goto LABEL_21;
    }
    v8 = *((unsigned __int16 *)a2 + 14);
  }
  v9 = 1;
  if ((~v8 & 0x408) == 0)
  {
    this = (unsigned int *)(*(uint64_t (**)(WebCore::Element *))(*(_QWORD *)a2 + 368))(a2);
    if ((_DWORD)this == 6)
      v9 = 2;
    else
      v9 = 1;
  }
LABEL_21:
  v10 = *((_QWORD *)v5 + 9) & 0xFFFFFFFFFFFFLL;
  if (v10)
  {
    v11 = *(unsigned __int8 *)((*((_QWORD *)v5 + 9) & 0xFFFFFFFFFFFFLL) + 0xF8);
    if ((v11 & v9) != 0)
    {
      v12 = 0;
      v13 = 0;
      goto LABEL_32;
    }
  }
  else
  {
    this = (unsigned int *)WebCore::Node::materializeRareData(v5);
    LOBYTE(v11) = 0;
    v10 = *((_QWORD *)v5 + 9) & 0xFFFFFFFFFFFFLL;
  }
  *(_BYTE *)(v10 + 248) = v11 | v9;
  v14 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 5) + 8) + 528);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 8);
    if (v15)
    {
      v16 = *(_QWORD *)(v15 + 24);
      if (v16)
      {
        this = *(unsigned int **)(v16 + 8);
        if (this)
        {
          v17 = (*this)++;
          *((_BYTE *)this + 1099) = 1;
          if (v17)
          {
            *this = v17;
          }
          else
          {
            WebCore::Page::~Page((uint64_t)this);
            this = (unsigned int *)WTF::fastFree(v18, v19);
          }
        }
      }
    }
  }
  *((_DWORD *)v5 + 6) += 2;
  v13 = v9 == 1;
  v12 = v5;
LABEL_32:
  *(_QWORD *)v3 = v12;
  *((_BYTE *)v3 + 8) = v13;
  if (*((_DWORD *)v5 + 6) == 2)
  {
    if ((*((_WORD *)v5 + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef(v5, a2);
  }
  else
  {
    *((_DWORD *)v5 + 6) -= 2;
  }
  return this;
}

uint64_t WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t result;
  void *v19;
  WTF *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF *v31;
  WTF *v32;
  char v33;

  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  if (v7 > v6)
  {
    _ZN3WTF9HashTableINS_3RefIN7WebCore30WeakPtrImplWithEventTargetDataENS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEES8_NS_17IdentityExtractorENS_11DefaultHashIS8_EENS_10HashTraitsIS8_EESD_E8removeIfIZNS_11WeakHashSetINS2_7ElementES3_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)a2, &v33);
    v25 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    if (*(_QWORD *)a2)
    {
      v25 = *(_DWORD *)(*(_QWORD *)a2 - 12);
      if (v25 > 0x7FFFFFFE)
        v25 = 0x7FFFFFFF;
    }
    *(_DWORD *)(a2 + 12) = 2 * v25;
  }
  v8 = *a3;
  if ((*(_QWORD *)(*a3 + 16) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v9 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v9 = 1;
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 8) = v8;
    *(_BYTE *)(v9 + 32) = 0;
    v11 = *(_QWORD *)(v8 + 16);
    *(_QWORD *)(v8 + 16) = v11 & 0xFFFF000000000000 | v9;
    v12 = v11 & 0xFFFFFFFFFFFFLL;
    if ((v11 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v13 = __ldaxr((unsigned int *)v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, (unsigned int *)v12));
      if (!v14)
      {
        atomic_store(1u, (unsigned int *)v12);
        v28 = *(unsigned int *)(v12 + 28);
        if ((_DWORD)v28)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (WTF::StringImpl *)(*(_QWORD *)(v12 + 16) + 32 * v28));
        v29 = *(WTF **)(v12 + 16);
        if (v29)
        {
          *(_QWORD *)(v12 + 16) = 0;
          *(_DWORD *)(v12 + 24) = 0;
          WTF::fastFree(v29, v10);
        }
        WTF::fastFree((WTF *)v12, v10);
      }
    }
  }
  v15 = *(_QWORD *)(v8 + 16) & 0xFFFFFFFFFFFFLL;
  do
    v16 = __ldaxr((unsigned int *)v15);
  while (__stlxr(v16 + 1, (unsigned int *)v15));
  do
    v17 = __ldaxr((unsigned int *)v15);
  while (__stlxr(v17 + 1, (unsigned int *)v15));
  v32 = (WTF *)v15;
  result = (uint64_t)WTF::HashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::add((uint64_t *)a2, (uint64_t *)&v32, a1);
  v20 = v32;
  v32 = 0;
  if (!v20)
    goto LABEL_12;
  do
  {
    v21 = __ldaxr((unsigned int *)v20);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, (unsigned int *)v20));
  if (v22)
  {
LABEL_12:
    if (!v15)
      return result;
    goto LABEL_13;
  }
  atomic_store(1u, (unsigned int *)v20);
  v30 = *((unsigned int *)v20 + 7);
  if ((_DWORD)v30)
    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v20 + 2), (WTF::StringImpl *)(*((_QWORD *)v20 + 2) + 32 * v30));
  v31 = (WTF *)*((_QWORD *)v20 + 2);
  if (v31)
  {
    *((_QWORD *)v20 + 2) = 0;
    *((_DWORD *)v20 + 6) = 0;
    WTF::fastFree(v31, v19);
  }
  result = WTF::fastFree(v20, v19);
  if (v15)
  {
    do
    {
LABEL_13:
      v23 = __ldaxr((unsigned int *)v15);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, (unsigned int *)v15));
    if (!v24)
    {
      atomic_store(1u, (unsigned int *)v15);
      v26 = *(unsigned int *)(v15 + 28);
      if ((_DWORD)v26)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v15 + 16), (WTF::StringImpl *)(*(_QWORD *)(v15 + 16) + 32 * v26));
      v27 = *(WTF **)(v15 + 16);
      if (v27)
      {
        *(_QWORD *)(v15 + 16) = 0;
        *(_DWORD *)(v15 + 24) = 0;
        WTF::fastFree(v27, v19);
      }
      return WTF::fastFree((WTF *)v15, v19);
    }
  }
  return result;
}

uint64_t WebCore::ElementTargetingController::dispatchVisibilityAdjustmentStateDidChange(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;

  if (this)
  {
    v1 = *(_QWORD *)(this + 8);
    if (v1)
    {
      ++*(_DWORD *)v1;
      v2 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v2 = off_1E33FE998;
      v12 = v2;
      v3 = *(_QWORD *)(v1 + 160);
      v4 = (unsigned int *)(v3 + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
      WebCore::Page::forEachDocumentFromMainFrame(v3, &v12);
      do
      {
        v6 = __ldaxr(v4);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v4));
      if (!v7)
      {
        atomic_store(1u, v4);
        v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v10 = off_1E31FE290;
        v10[1] = v4;
        v13 = v10;
        WTF::ensureOnMainThread();
        v11 = v13;
        v13 = 0;
        if (v11)
          (*(void (**)(_QWORD *))(*v11 + 8))(v11);
      }
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
      if (*(_DWORD *)v1 == 1)
      {
        WebCore::Page::~Page(v1);
        return WTF::fastFree(v8, v9);
      }
      else
      {
        --*(_DWORD *)v1;
      }
    }
  }
  return this;
}

void WebCore::ElementTargetingController::adjustVisibilityInRepeatedlyTargetedRegions(WebCore::ElementTargetingController *this, WebCore::Document *a2)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::LocalFrameView *v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  WTF::ApproximateTime *v12;
  const WebCore::HTMLBodyElement *v13;
  float v14;
  float v15;
  float v16;
  float v17;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  void *v26;
  WTF::ApproximateTime *v27;
  uint64_t v28;
  WTF::MonotonicTime *v29;
  double v30;
  double v31;
  WebCore *OnlyMainElement;
  WebCore *v33;
  uint64_t v34;
  const WebCore::IntRect *v35;
  uint64_t v36;
  uint64_t v37;
  WebCore::RenderElement *v38;
  const WebCore::RenderObject *v39;
  WebCore::RenderObject *v40;
  WebCore::RenderElement *v41;
  uint64_t v42;
  uint64_t v43;
  WebCore::RenderObject *v44;
  int v45;
  int v46;
  int v47;
  const WebCore::FloatRect *v48;
  uint64_t v49;
  _BOOL4 v50;
  void *v51;
  const WebCore::Element *v52;
  int v53;
  WebCore::Element **v54;
  uint64_t v55;
  uint64_t v56;
  WebCore::Document *v57;
  int v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WebCore::Element **v64;
  uint64_t v65;
  _QWORD v66[2];

  if (WebCore::Document::isTopDocument(a2))
  {
    v4 = *((_QWORD *)a2 + 66);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v6 = *(WebCore::LocalFrameView **)(v5 + 288);
        if (v6)
        {
          v7 = *((_DWORD *)v6 + 2) + 1;
          *((_DWORD *)v6 + 2) = v7;
          v8 = *((_QWORD *)a2 + 243);
          if (!v8)
            goto LABEL_36;
          v9 = *(_DWORD *)(v8 + 16);
          *(_DWORD *)(v8 + 16) = v9 + 1;
          v10 = *((_QWORD *)a2 + 159);
          if (v10
            && (*(_WORD *)(v10 + 28) & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24)
            && (v11 = *(_QWORD *)(v10 + 80)) != 0)
          {
            while ((*(_WORD *)(v11 + 28) & 0x10) == 0
                 || *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
            {
              v11 = *(_QWORD *)(v11 + 56);
              if (!v11)
                goto LABEL_13;
            }
            *(_DWORD *)(v11 + 24) += 2;
            v12 = (WTF::ApproximateTime *)WebCore::LocalFrameView::baseLayoutViewportSize(v6);
            v14 = *((float *)this + 66);
            v15 = *((float *)this + 67);
            v16 = (float)(int)v12 * 0.015625;
            v17 = (float)SHIDWORD(v12) * 0.015625;
            *((float *)this + 66) = v16;
            *((float *)this + 67) = v17;
            if (v14 != v16 || v15 != v17)
            {
              WebCore::adjustRegionAfterViewportSizeChange((int *)this + 50, v14, v15, v16, v17);
              WebCore::adjustRegionAfterViewportSizeChange((int *)this + 56, v14, v15, *((float *)this + 66), *((float *)this + 67));
            }
            v19 = *((_QWORD *)a2 + 66);
            if (v19)
            {
              v20 = *(_QWORD *)(v19 + 8);
              if (v20)
              {
                v21 = *(_DWORD **)(*(_QWORD *)(v20 + 280) + 88);
                if (v21)
                {
                  if (*(WebCore::Document **)(v20 + 296) == a2)
                  {
                    v22 = v21[6] + 1;
                    v21[6] = v22;
                    if (!*((_BYTE *)this + 276))
                    {
                      WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t *)this + 23, (uint64_t)(v21 + 862));
                      WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::map<WebCore::ElementTargetingController::adjustVisibilityInRepeatedlyTargetedRegions(WebCore::Document &)::$_0>((uint64_t)&v60, (uint64_t)this + 184);
                      WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((uint64_t)this + 168, (uint64_t)&v60);
                      v27 = (WTF::ApproximateTime *)WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v60, v26);
                      v12 = (WTF::ApproximateTime *)WTF::ApproximateTime::now(v27);
                      *((_QWORD *)this + 13) = v28;
                      *((_BYTE *)this + 276) = 1;
                      v22 = v21[6];
                    }
                    v23 = v22 - 1;
                    if (v23)
                      v21[6] = v23;
                    else
                      v12 = (WTF::ApproximateTime *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v21 + 24))(v21);
                  }
                }
              }
            }
            if (*((_DWORD *)this + 45))
            {
              v29 = (WTF::MonotonicTime *)WTF::ApproximateTime::now(v12);
              if (v30 - *((double *)this + 13) <= 10.0)
              {
                WebCore::ElementTargetingController::applyVisibilityAdjustmentFromSelectors((uint64_t)this);
              }
              else if ((*((_QWORD *)this + 18) & 0xFFFFFFFFFFFFLL) == 0
                     || *(double *)((*((_QWORD *)this + 18) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
              {
                *((_QWORD *)this + 17) = 0;
                WTF::MonotonicTime::now(v29);
                WebCore::TimerBase::setNextFireTime((uint64_t)this + 112, v31 + 1.0);
              }
            }
            if (*((int *)this + 58) >= 1 && *((int *)this + 59) >= 1)
            {
              v56 = v8;
              OnlyMainElement = WebCore::findOnlyMainElement((WebCore *)v11, v13);
              v33 = OnlyMainElement;
              if (OnlyMainElement)
                *((_DWORD *)OnlyMainElement + 6) += 2;
              v60 = WebCore::LocalFrameView::windowClipRect(v6);
              v61 = v34;
              v66[0] = WebCore::ScrollView::windowToContents((WebCore::Widget **)v6, (const WebCore::IntRect *)&v60, v35);
              v66[1] = v36;
              v64 = 0;
              v65 = 0;
              v63 = v8;
              v37 = WebCore::RenderDescendantIteratorAdapter<WebCore::RenderElement>::begin(&v63);
              if (v38)
              {
                v40 = (WebCore::RenderObject *)v37;
                v41 = v38;
                do
                {
                  if ((*((_DWORD *)v41 + 5) & 0x1800000) == 0x1000000)
                  {
                    v42 = WebCore::RenderElement::element(v41);
                    if (v42)
                    {
                      v43 = v42;
                      *(_DWORD *)(v42 + 24) += 2;
                      if (!WebCore::RenderElement::isVisibleInDocumentRect(v41, (const WebCore::IntRect *)v66))goto LABEL_59;
                      LODWORD(v57) = WebCore::computeClientRect(v41, v44);
                      HIDWORD(v57) = v45;
                      v58 = v46;
                      v59 = v47;
                      v60 = WebCore::enclosingIntRect((WebCore *)&v57, v48);
                      v61 = v49;
                      v62 = 0;
                      v50 = WebCore::Region::contains((WebCore::ElementTargetingController *)((char *)this + 224), (const WebCore::Region *)&v60);
                      WebCore::Region::~Region((WebCore::Region *)&v60, v51);
                      if (!v50)
                        goto LABEL_59;
                      if (WebCore::isTargetCandidate((WebCore *)v43, v33, 0, v52))
                      {
                        v60 = v43;
                        v53 = HIDWORD(v65);
                        if (HIDWORD(v65) == (_DWORD)v65)
                        {
                          WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>((uint64_t)&v64, (unint64_t)&v60);
                        }
                        else
                        {
                          v60 = 0;
                          v64[HIDWORD(v65)] = (WebCore::Element *)v43;
                          HIDWORD(v65) = v53 + 1;
                        }
                        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v60);
                      }
                      else
                      {
LABEL_59:
                        if (*(_DWORD *)(v43 + 24) == 2)
                        {
                          if ((*(_WORD *)(v43 + 30) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)v43, v44);
                        }
                        else
                        {
                          *(_DWORD *)(v43 + 24) -= 2;
                        }
                      }
                    }
                  }
                  v41 = (WebCore::RenderElement *)WebCore::RenderTraversal::next<WebCore::RenderElement,WebCore::RenderElement>((uint64_t)v41, v40, v39);
                }
                while (v41);
              }
              if (HIDWORD(v65))
              {
                v54 = v64;
                v55 = 8 * HIDWORD(v65);
                do
                {
                  WebCore::adjustVisibilityIfNeeded((unsigned int *)&v57, *v54);
                  if (v57)
                  {
                    if ((_BYTE)v58)
                      WebCore::Node::invalidateStyle((uint64_t)v57, 4u, 2);
                    else
                      WebCore::Element::invalidateStyle(v57);
                    WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>((uint64_t)&v60, (uint64_t)this + 248, (uint64_t *)v54);
                    WTF::WeakHashSet<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Document>((uint64_t)this + 80, *(_QWORD *)(*((_QWORD *)*v54 + 5) + 8), (uint64_t)&v60);
                  }
                  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v57);
                  ++v54;
                  v55 -= 8;
                }
                while (v55);
                WebCore::ElementTargetingController::dispatchVisibilityAdjustmentStateDidChange(*((_QWORD *)this + 1));
              }
              WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v64, v38);
              v8 = v56;
              if (v33)
              {
                if (*((_DWORD *)v33 + 6) == 2)
                {
                  v8 = v56;
                  if ((*((_WORD *)v33 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v33, v13);
                }
                else
                {
                  *((_DWORD *)v33 + 6) -= 2;
                  v8 = v56;
                }
              }
            }
            if (*(_DWORD *)(v11 + 24) == 2)
            {
              if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v11, v13);
            }
            else
            {
              *(_DWORD *)(v11 + 24) -= 2;
            }
            v24 = *(_DWORD *)(v8 + 16);
            if (v24)
            {
              v7 = *((_DWORD *)v6 + 2);
              v9 = v24 - 1;
              goto LABEL_35;
            }
          }
          else
          {
LABEL_13:
            if (v9 != -1)
            {
LABEL_35:
              *(_DWORD *)(v8 + 16) = v9;
LABEL_36:
              v25 = v7 - 1;
              if (v25)
                *((_DWORD *)v6 + 2) = v25;
              else
                (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v6 + 8))(v6);
              return;
            }
          }
          __break(0xC471u);
          JUMPOUT(0x195F97F2CLL);
        }
      }
    }
  }
}

void WebCore::adjustRegionAfterViewportSizeChange(int *a1, float a2, float a3, float a4, float a5)
{
  void *v7;
  WTF *v8;
  void *v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  __int128 v14;
  char *v15;
  WTF *v16[2];
  uint64_t v17;
  WTF *v18;
  unsigned int v19;
  char v20;
  _DWORD v21[2];
  _DWORD v22[2];

  *(float *)v22 = a2;
  *(float *)&v22[1] = a3;
  *(float *)v21 = a4;
  *(float *)&v21[1] = a5;
  if (a1[2] >= 1 && a1[3] >= 1)
  {
    v20 = 0;
    WebCore::Region::rects((uint64_t)a1, (uint64_t)v16);
    *(_QWORD *)&v14 = v22;
    *((_QWORD *)&v14 + 1) = v21;
    v15 = &v20;
    WTF::Vector<WebCore::IntRect,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::map<WebCore::adjustRegionAfterViewportSizeChange(WebCore::Region &,WebCore::FloatSize,WebCore::FloatSize)::$_0>(&v18, (uint64_t)v16, (uint64_t)&v14);
    v8 = v16[0];
    if (&v17 != (uint64_t *)v16[0] && v16[0])
    {
      v16[0] = 0;
      LODWORD(v16[1]) = 0;
      WTF::fastFree(v8, v7);
    }
    if (v20)
    {
      v16[0] = 0;
      v16[1] = 0;
      v17 = 0;
      WebCore::Region::operator=((uint64_t)a1, v16);
      WebCore::Region::~Region((WebCore::Region *)v16, v9);
      v10 = v18;
      if (v19)
      {
        v11 = 0;
        v12 = 16 * v19;
        do
        {
          v14 = *(_OWORD *)((char *)v10 + v11);
          *(_OWORD *)v16 = v14;
          v17 = 0;
          WebCore::Region::unite((WTF *)a1, (const WebCore::Region *)v16);
          WebCore::Region::~Region((WebCore::Region *)v16, v13);
          v11 += 16;
        }
        while (v12 != v11);
      }
    }
    else
    {
      v10 = v18;
    }
    if (v10)
      WTF::fastFree(v10, v7);
  }
}

uint64_t *WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t v11;
  unsigned int v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t **v20;
  uint64_t *v21;
  _QWORD **v22;
  uint64_t **v23;
  _QWORD **v24;
  uint64_t *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unint64_t v29;
  double v30;
  double v31;
  unsigned int v32;
  _DWORD *v33;
  WTF::StringImpl **v34;
  WTF::StringImpl **v35;
  WTF::StringImpl **v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD **v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v2 = (uint64_t)result;
  if ((uint64_t *)a2 == result)
    return (uint64_t *)v2;
  v4 = (WTF::StringImpl *)*(unsigned int *)(a2 + 12);
  if (*((_DWORD *)result + 3) > v4)
  {
    result = (uint64_t *)WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((uint64_t)result, v4);
  }
  else if (v4 > *((_DWORD *)result + 2))
  {
    WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear((uint64_t)result, v4);
    result = (uint64_t *)WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v2, *(unsigned int *)(a2 + 12));
  }
  v53 = a2;
  v54 = v2;
  v5 = *(_QWORD *)a2;
  v6 = *(unsigned int *)(v2 + 12);
  v7 = *(_QWORD *)v2;
  if (!(_DWORD)v6)
  {
    v48 = a2;
LABEL_83:
    v49 = *(unsigned int *)(v48 + 12);
    if ((_DWORD)v6 != (_DWORD)v49)
    {
      v50 = v7 + 16 * v6;
      v51 = v5 + 16 * v6;
      v52 = 16 * v49 - 16 * v6;
      do
      {
        v50 = WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v50, v51)+ 16;
        v51 += 16;
        v52 -= 16;
      }
      while (v52);
      LODWORD(v6) = *(_DWORD *)(v53 + 12);
    }
    v2 = v54;
    *(_DWORD *)(v54 + 12) = v6;
    return (uint64_t *)v2;
  }
  v55 = v5 + 16 * v6;
  while (1)
  {
    if (v5 == v7)
      goto LABEL_80;
    v8 = *(unsigned int *)(v7 + 12);
    v9 = *(unsigned int *)(v5 + 12);
    if (v8 > v9)
    {
      v10 = (uint64_t **)(*(_QWORD *)v7 + 8 * v9);
      v11 = 8 * v8 - 8 * v9;
      do
      {
        result = *v10;
        if (*v10)
          result = (uint64_t *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)result, v4);
        ++v10;
        v11 -= 8;
      }
      while (v11);
      *(_DWORD *)(v7 + 12) = v9;
      goto LABEL_36;
    }
    v12 = *(_DWORD *)(v7 + 8);
    if (v9 > v12)
    {
      if (v12)
      {
        v13 = *(WTF **)v7;
        if ((_DWORD)v8)
        {
          v14 = 8 * v8;
          do
          {
            result = *(uint64_t **)v13;
            if (*(_QWORD *)v13)
              result = (uint64_t *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)result, v4);
            v13 = (WTF *)((char *)v13 + 8);
            v14 -= 8;
          }
          while (v14);
          *(_DWORD *)(v7 + 12) = 0;
          v13 = *(WTF **)v7;
        }
        if (v13)
        {
          *(_QWORD *)v7 = 0;
          *(_DWORD *)(v7 + 8) = 0;
          result = (uint64_t *)WTF::fastFree(v13, v4);
        }
      }
      v15 = *(unsigned int *)(v5 + 12);
      if (*(_DWORD *)(v7 + 8) < v15)
        break;
    }
LABEL_35:
    v9 = *(unsigned int *)(v7 + 12);
LABEL_36:
    v22 = *(_QWORD ***)v5;
    v23 = *(uint64_t ***)v7;
    if ((_DWORD)v9)
    {
      v24 = &v22[v9];
      v56 = v5;
      while (1)
      {
        if (*v22)
        {
          v26 = *((unsigned int *)*v22 - 3);
          if ((_DWORD)v26)
            break;
        }
        v25 = 0;
LABEL_40:
        result = *v23;
        *v23 = v25;
        if (result)
          result = (uint64_t *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)result, v4);
        ++v22;
        ++v23;
        if (v22 == v24)
        {
          v22 = *(_QWORD ***)v5;
          v44 = *(unsigned int *)(v7 + 12);
          v23 = *(uint64_t ***)v7;
          goto LABEL_75;
        }
      }
      v27 = (v26 - 1) | ((v26 - 1) >> 1) | ((((_DWORD)v26 - 1) | ((v26 - 1) >> 1)) >> 2);
      v28 = v27 | (v27 >> 4) | ((v27 | (v27 >> 4)) >> 8);
      v29 = (v28 | HIWORD(v28)) + 1;
      if (v29 > 0x400)
      {
        if (v29 <= 2 * v26)
        {
LABEL_47:
          LODWORD(v29) = 2 * v29;
          if (v29 <= 0x400)
            goto LABEL_48;
        }
        v30 = (double)v26;
        v31 = (double)v29 * 0.416666667;
      }
      else
      {
        if (3 * v29 <= 4 * v26)
          goto LABEL_47;
LABEL_48:
        v30 = (double)v26;
        v31 = (double)v29 * 0.604166667;
      }
      if (v31 <= v30)
        LODWORD(v29) = 2 * v29;
      if (v29 <= 8)
        v32 = 8;
      else
        v32 = v29;
      v33 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(8 * v32 + 16));
      v33[2] = v32 - 1;
      v33[3] = v32;
      *v33 = 0;
      v33[1] = v26;
      v34 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(v22);
      v35 = v34;
      v36 = (WTF::StringImpl **)v4;
      if (*v22)
        v37 = (uint64_t)&(*v22)[*((unsigned int *)*v22 - 1)];
      else
        v37 = 0;
      v25 = (uint64_t *)(v33 + 4);
      if ((WTF::StringImpl **)v37 != v34)
      {
        do
        {
          v39 = v33[2];
          v40 = *((_DWORD *)*v35 + 4);
          if (v40 < 0x100)
            v38 = WTF::StringImpl::hashSlowCase(*v35);
          else
            v38 = v40 >> 8;
          v41 = 0;
          do
          {
            v42 = v38 & v39;
            v38 = ++v41 + v42;
          }
          while (v25[v42]);
          v43 = *v35;
          if (*v35)
            *(_DWORD *)v43 += 2;
          v25[v42] = (uint64_t)v43;
          while (++v35 != v36)
          {
            if ((unint64_t)*v35 + 1 > 1)
              goto LABEL_70;
          }
          v35 = v36;
LABEL_70:
          ;
        }
        while (v35 != (WTF::StringImpl **)v37);
      }
      v5 = v56;
      goto LABEL_40;
    }
    v44 = 0;
LABEL_75:
    v45 = *(unsigned int *)(v5 + 12);
    if (v44 != v45)
    {
      result = (uint64_t *)&v23[v44];
      v46 = &v22[v44];
      v47 = 8 * v45 - 8 * v44;
      do
      {
        result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(result, v46++)+ 1;
        v47 -= 8;
      }
      while (v47);
      LODWORD(v44) = *(_DWORD *)(v5 + 12);
    }
    *(_DWORD *)(v7 + 12) = v44;
LABEL_80:
    v5 += 16;
    v7 += 16;
    if (v5 == v55)
    {
      v48 = v53;
      v5 = *(_QWORD *)v53;
      LODWORD(v6) = *(_DWORD *)(v54 + 12);
      v7 = *(_QWORD *)v54;
      goto LABEL_83;
    }
  }
  if (!(v15 >> 29))
  {
    v16 = *(WTF **)v7;
    v17 = *(unsigned int *)(v7 + 12);
    result = (uint64_t *)WTF::fastMalloc((WTF *)(8 * v15));
    *(_DWORD *)(v7 + 8) = v15;
    *(_QWORD *)v7 = result;
    if ((_DWORD)v17)
    {
      v18 = result;
      v19 = 8 * v17;
      v20 = (uint64_t **)v16;
      do
      {
        *v18 = 0;
        v21 = *v20;
        *v20 = 0;
        *v18 = (uint64_t)v21;
        result = *v20;
        if (*v20)
          result = (uint64_t *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)result, v4);
        ++v18;
        ++v20;
        v19 -= 8;
      }
      while (v19);
    }
    if (v16)
    {
      if (*(WTF **)v7 == v16)
      {
        *(_QWORD *)v7 = 0;
        *(_DWORD *)(v7 + 8) = 0;
      }
      result = (uint64_t *)WTF::fastFree(v16, v4);
    }
    goto LABEL_35;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  v3 = result;
  v4 = *(unsigned int *)(a2 + 12);
  v5 = *(unsigned int *)(result + 8);
  v6 = v4 + *(unsigned int *)(result + 12);
  if (v6 > v5)
  {
    v7 = v5 + (v5 >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 <= v6)
      v9 = v6;
    else
      v9 = v8;
    result = WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(result, v9);
    v4 = *(unsigned int *)(a2 + 12);
  }
  if ((_DWORD)v4)
  {
    v10 = *(uint64_t **)a2;
    v11 = 24 * v4;
    do
    {
      result = WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::unsafeAppendWithoutCapacityCheck(v3, v10);
      v10 += 3;
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

int32x2_t WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::map<WebCore::ElementTargetingController::adjustVisibilityInRepeatedlyTargetedRegions(WebCore::Document &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v5;
  uint64_t v6;
  int32x2_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int32x2_t *v17;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2)
  {
    if (v2 >= 0xAAAAAAB)
    {
LABEL_15:
      __break(0xC471u);
      JUMPOUT(0x195F98980);
    }
    v5 = 24 * v2;
    v6 = WTF::fastMalloc((WTF *)(24 * v2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)a1 = v6;
    if (*(_DWORD *)(a2 + 12))
    {
      v8 = v6;
      v9 = 0;
      do
      {
        v10 = *(_QWORD *)a2 + 16 * v9;
        v11 = *(unsigned int *)(v10 + 12);
        if ((_DWORD)v11)
        {
          if (v11 >> 29)
            goto LABEL_15;
          v12 = WTF::fastMalloc((WTF *)(8 * v11));
          v13 = *(unsigned int *)(v10 + 12);
          if ((_DWORD)v13)
          {
            v14 = 0;
            v15 = *(_QWORD *)v10;
            v16 = 8 * v13;
            do
            {
              WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)(v12 + v14), (_QWORD **)(v15 + v14));
              v14 += 8;
            }
            while (v16 != v14);
          }
        }
        else
        {
          v12 = 0;
        }
        v17 = (int32x2_t *)(v8 + 24 * v9);
        *v17 = 0;
        v17[1] = 0;
        result = vdup_n_s32(v11);
        v17[1] = (int32x2_t)v12;
        v17[2] = result;
        *(_DWORD *)(a1 + 12) = ++v9;
      }
      while (v9 < *(unsigned int *)(a2 + 12));
    }
  }
  return result;
}

uint64_t WebCore::ElementTargetingController::applyVisibilityAdjustmentFromSelectors(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  __n128 v6;
  __n128 v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::Node *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  WTF *v22;
  WTF *v23;
  WTF *v24;
  int v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WebCore::Node *v30;
  WTF *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  WTF *v41;
  WTF *v42;
  WTF *v44;
  WTF *v46;
  void *v47;
  WTF *v48;
  void *v49;
  WTF *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  char v57;
  __int128 v58;
  WTF *v59;
  WTF::StringImpl *v60;
  unsigned __int8 v61;
  WebCore::Node *v62;
  WTF::StringImpl *v63;
  WTF *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF *v68;
  uint64_t v69;

  if (!*(_DWORD *)(this + 180))
    return this;
  v1 = this;
  v2 = *(_QWORD *)(this + 8);
  if (!v2)
    return this;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return this;
  ++*(_DWORD *)v3;
  this = (uint64_t)WebCore::ElementTargetingController::mainDocument(&v69, v2);
  v4 = v69;
  if (!v69)
    goto LABEL_81;
  WebCore::Document::updateLayout(v69, 2u, 0);
  v6.n128_u32[0] = *(_DWORD *)(v1 + 264);
  v7.n128_u32[0] = *(_DWORD *)(v1 + 268);
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v64 = 0;
  v65 = 0;
  v8 = *(unsigned int *)(v1 + 180);
  if (!(_DWORD)v8)
    goto LABEL_54;
  v55 = v4;
  v9 = v6.n128_f32[0] * v7.n128_f32[0];
  v10 = 24 * v8;
  v11 = *(_QWORD *)(v1 + 168) + 8;
  do
  {
    WebCore::ElementTargetingController::findElementFromSelectors((unsigned int *)&v62, v1, v11);
    if (!v62)
      goto LABEL_37;
    WebCore::resolveSelectorToQuery((WebCore *)&v60, (const WTF::String *)&v63);
    v12 = v62;
    v13 = *((_QWORD *)v62 + 9) & 0xFFFFFFFFFFFFLL;
    if (!v13)
    {
      v14 = v61;
      WebCore::Node::materializeRareData(v62);
      v13 = *((_QWORD *)v12 + 9) & 0xFFFFFFFFFFFFLL;
      v15 = v14;
      goto LABEL_12;
    }
    v16 = *(unsigned __int8 *)((*((_QWORD *)v62 + 9) & 0xFFFFFFFFFFFFLL) + 0xF8);
    v15 = v61;
    if ((v61 & v16) == 0)
    {
      v14 = v61 | v16;
LABEL_12:
      *(_BYTE *)(v13 + 248) = v14;
      if (v14)
      {
        v17 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v12 + 5) + 8) + 528);
        if (v17)
        {
          v18 = *(_QWORD *)(v17 + 8);
          if (v18)
          {
            v19 = *(_QWORD *)(v18 + 24);
            if (v19)
            {
              v20 = *(_QWORD *)(v19 + 8);
              if (v20)
              {
                v21 = (*(_DWORD *)v20)++;
                *(_BYTE *)(v20 + 1099) = 1;
                if (v21)
                {
                  *(_DWORD *)v20 = v21;
                }
                else
                {
                  WebCore::Page::~Page(v20);
                  WTF::fastFree(v31, v32);
                }
              }
            }
          }
        }
      }
      if (v15 == 1)
        WebCore::Node::invalidateStyle((uint64_t)v62, 4u, 2);
      else
        WebCore::Element::invalidateStyle(v62);
      WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Element>(v1 + 248, v62, (uint64_t)&v58);
      WTF::WeakHashSet<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Document>(v1 + 80, *(_QWORD *)(*((_QWORD *)v62 + 5) + 8), (uint64_t)&v58);
      WebCore::inflatedClientRectForAdjustmentRegionTracking(&v56, *((_QWORD *)v62 + 8), v9);
      if (v57)
      {
        v58 = v56;
        v59 = 0;
        WebCore::Region::unite((WTF *)&v66, (const WebCore::Region *)&v58);
        v22 = v59;
        v59 = 0;
        if (v22)
        {
          v23 = (WTF *)*((_QWORD *)v22 + 18);
          if ((WTF *)((char *)v22 + 160) != v23 && v23)
          {
            *((_QWORD *)v22 + 18) = 0;
            *((_DWORD *)v22 + 38) = 0;
            WTF::fastFree(v23, v5);
          }
          v24 = *(WTF **)v22;
          if ((WTF *)((char *)v22 + 16) != *(WTF **)v22 && v24)
          {
            *(_QWORD *)v22 = 0;
            *((_DWORD *)v22 + 2) = 0;
            WTF::fastFree(v24, v5);
          }
          WTF::fastFree(v22, v5);
        }
      }
      v25 = HIDWORD(v65);
      if (HIDWORD(v65) == (_DWORD)v65)
      {
        v27 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v64, HIDWORD(v65) + 1, (unint64_t)&v63);
        v25 = HIDWORD(v65);
        v26 = (_QWORD *)((char *)v64 + 8 * HIDWORD(v65));
      }
      else
      {
        v26 = (_QWORD *)((char *)v64 + 8 * HIDWORD(v65));
        v27 = (uint64_t *)&v63;
      }
      v28 = *v27;
      *v27 = 0;
      *v26 = v28;
      HIDWORD(v65) = v25 + 1;
    }
    if (v60)
    {
      if (*(_DWORD *)v60 == 2)
        WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)v60 -= 2;
    }
LABEL_37:
    v29 = v63;
    v63 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)v29 -= 2;
    }
    v30 = v62;
    v62 = 0;
    if (v30)
    {
      if (*((_DWORD *)v30 + 6) == 2)
      {
        if ((*((_WORD *)v30 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v30, v5);
      }
      else
      {
        *((_DWORD *)v30 + 6) -= 2;
      }
    }
    v11 += 24;
    v10 -= 24;
  }
  while (v10);
  v4 = v55;
  if ((int)v67 >= 1 && SHIDWORD(v67) >= 1)
    WebCore::Region::unite((WTF *)(v1 + 200), (const WebCore::Region *)&v66);
LABEL_54:
  if (HIDWORD(v65))
  {
    v33 = *(_QWORD *)(v1 + 8);
    if (v33)
    {
      v34 = *(_QWORD *)(v33 + 8);
      if (v34)
      {
        ++*(_DWORD *)v34;
        v35 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v35 = off_1E33FE998;
        *(_QWORD *)&v56 = v35;
        v36 = *(_QWORD *)(v34 + 160);
        v37 = (unsigned int *)(v36 + 8);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 + 1, v37));
        WebCore::Page::forEachDocumentFromMainFrame(v36, &v56);
        do
        {
          v39 = __ldaxr(v37);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, v37));
        if (!v40)
        {
          atomic_store(1u, v37);
          v53 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v53 = off_1E31FE290;
          v53[1] = v37;
          *(_QWORD *)&v58 = v53;
          WTF::ensureOnMainThread();
          v54 = v58;
          *(_QWORD *)&v58 = 0;
          if (v54)
            (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
        if (*(_DWORD *)v34 == 1)
        {
          WebCore::Page::~Page(v34);
          WTF::fastFree(v48, v49);
        }
        else
        {
          --*(_DWORD *)v34;
        }
      }
    }
    (*(void (**)(_QWORD, WTF **, __n128, __n128))(**(_QWORD **)(*(_QWORD *)(v3 + 48) + 16) + 1784))(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 16), &v64, v6, v7);
    if (HIDWORD(v65))
    {
      v50 = v64;
      v51 = 8 * HIDWORD(v65);
      do
      {
        v52 = *(WTF::StringImpl **)v50;
        *(_QWORD *)v50 = 0;
        if (v52)
        {
          if (*(_DWORD *)v52 == 2)
            WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v5);
          else
            *(_DWORD *)v52 -= 2;
        }
        v50 = (WTF *)((char *)v50 + 8);
        v51 -= 8;
      }
      while (v51);
    }
  }
  this = (uint64_t)v64;
  if (v64)
  {
    v64 = 0;
    LODWORD(v65) = 0;
    this = WTF::fastFree((WTF *)this, v5);
  }
  v41 = v68;
  v68 = 0;
  if (v41)
  {
    v42 = (WTF *)*((_QWORD *)v41 + 18);
    if ((WTF *)((char *)v41 + 160) != v42 && v42 != 0)
    {
      *((_QWORD *)v41 + 18) = 0;
      *((_DWORD *)v41 + 38) = 0;
      WTF::fastFree(v42, v5);
    }
    v44 = *(WTF **)v41;
    if ((WTF *)((char *)v41 + 16) != *(WTF **)v41 && v44 != 0)
    {
      *(_QWORD *)v41 = 0;
      *((_DWORD *)v41 + 2) = 0;
      WTF::fastFree(v44, v5);
    }
    this = WTF::fastFree(v41, v5);
  }
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
LABEL_81:
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::Page::~Page(v3);
    return WTF::fastFree(v46, v47);
  }
  else
  {
    --*(_DWORD *)v3;
  }
  return this;
}

float32_t WebCore::computeClientRect(WebCore *this, WebCore::RenderObject *a2)
{
  WebCore *v2;
  unint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v8;
  float32x4_t v9;

  v2 = this;
  v3 = WebCore::RenderObject::absoluteBoundingBoxRect(this, 1, 0);
  v9.f32[0] = (float)(int)v3;
  v9.f32[1] = (float)SHIDWORD(v3);
  v9.f32[2] = (float)v4;
  v9.f32[3] = (float)v5;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 3) + 8) + 40) + 8);
  if ((*((_BYTE *)v2 + 45) & 2) != 0)
  {
    v8 = *((_QWORD *)v2 + 4);
    if (v8)
      v2 = *(WebCore **)(v8 + 8);
    else
      v2 = 0;
  }
  WebCore::Document::convertAbsoluteToClientRect(v6, &v9, (WebCore *)((char *)v2 + 80));
  return v9.f32[0];
}

uint64_t WebCore::isTargetCandidate(WebCore *this, WebCore::Element *a2, const WebCore::HTMLElement *a3, const WebCore::Element *a4)
{
  WebCore::Element *v5;
  int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  _BOOL4 v23;
  int v24;
  unint64_t v26;
  uint64_t v27;
  const WebCore::Element *v28;
  const WebCore::Element *v29;
  WebCore *v30;
  __int16 v31;
  WebCore *v32;
  BOOL v33;
  const WebCore::Element *v34;
  WebCore *v35;
  __int16 v36;
  BOOL v37;
  BOOL isNavigationalElement;
  BOOL v39;

  if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) == 0)
    return 0;
  if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    goto LABEL_110;
  v5 = a2;
  v7 = *((unsigned __int16 *)this + 14);
  if ((~v7 & 0x408) == 0)
  {
    if ((*(unsigned int (**)(WebCore *, WebCore::Element *, const WebCore::HTMLElement *, const WebCore::Element *))(*(_QWORD *)this + 368))(this, a2, a3, a4) == 6)return 1;
    v7 = *((unsigned __int16 *)this + 14);
  }
  if ((~v7 & 0x408) == 0 && (*(unsigned int (**)(WebCore *))(*(_QWORD *)this + 368))(this) == 7)
    return 1;
  v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 1272);
  if (v9
    && (*(_WORD *)(v9 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24)
    && (v10 = *(_QWORD *)(v9 + 80)) != 0)
  {
    while ((*(_WORD *)(v10 + 28) & 0x10) == 0
         || *(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
    {
      v10 = *(_QWORD *)(v10 + 56);
      if (!v10)
        goto LABEL_16;
    }
    result = 0;
    if ((WebCore *)v10 == this || (WebCore *)v9 == this)
      return result;
  }
  else
  {
LABEL_16:
    if ((WebCore *)v9 == this)
      return 0;
  }
  if (v5)
  {
    if (v5 == this)
      return 0;
    v11 = *((_WORD *)this + 14);
    if ((v11 & 0xF000) == 0x9000)
    {
      if (**((WebCore ***)v5 + 5) == this && (*((_WORD *)v5 + 14) & 0xF000) != 0x9000 && (*((_BYTE *)v5 + 22) & 8) != 0)
        return 0;
    }
    else if ((v11 & 4) != 0
           && *((_QWORD *)this + 10)
           && ((*((unsigned __int8 *)v5 + 22) ^ *((unsigned __int8 *)this + 22)) & 8) == 0)
    {
      do
        v5 = (WebCore::Element *)*((_QWORD *)v5 + 4);
      while (v5 != this && v5 != 0);
      if (v5)
        return 0;
    }
  }
  v13 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (v13)
  {
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195F99354);
    }
    v14 = *(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
    *(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10) = v14 + 1;
    v15 = *(_QWORD *)(v13 + 32);
    if (v15 && (v16 = *(_QWORD *)(v15 + 8)) != 0)
    {
      while (1)
      {
        v17 = *(unsigned int *)(v16 + 64);
        if (v17 | ((unint64_t)*(unsigned __int8 *)(v16 + 68) << 32))
        {
          v18 = *(_QWORD *)((v17 | ((unint64_t)*(unsigned __int8 *)(v16 + 68) << 32)) + 8);
          if (v18)
          {
            v19 = 0;
            while (1)
            {
              v20 = v18;
              if ((*(_BYTE *)(v18 + 45) & 2) != 0)
              {
                v20 = *(_QWORD *)(v18 + 32);
                if (v20)
                  v20 = *(_QWORD *)(v20 + 8);
              }
              if ((*(_BYTE *)(*(_QWORD *)(v20 + 104) + 239) & 4) == 0)
              {
                v21 = *(_DWORD *)(v20 + 120) & 0x30;
                v22 = v19 + 1;
                v23 = (v19 + 1) > 1;
                if (v21 == 16)
                {
                  v24 = 5;
                }
                else
                {
                  ++v19;
                  v24 = v23;
                }
                if (v24 != 5 && v24 != 0)
                  break;
              }
              v26 = *(unsigned int *)(v18 + 47) | ((unint64_t)*(unsigned __int8 *)(v18 + 51) << 32);
              if (v26)
              {
                v18 = *(_QWORD *)(v26 + 8);
                if (v18)
                  continue;
              }
              goto LABEL_60;
            }
            if (v22 > 1)
              break;
          }
        }
LABEL_60:
        v27 = *(_QWORD *)(v16 + 32);
        if (v27)
        {
          v16 = *(_QWORD *)(v27 + 8);
          if (v16)
            continue;
        }
        goto LABEL_62;
      }
      if (v14 != -1)
      {
        *(_DWORD *)(v13 + 16) = v14;
        goto LABEL_67;
      }
    }
    else
    {
LABEL_62:
      if (v14 != -1)
      {
        result = 0;
        *(_DWORD *)(v13 + 16) = v14;
        return result;
      }
    }
LABEL_110:
    __break(0xC471u);
    JUMPOUT(0x195F990FCLL);
  }
LABEL_67:
  if (!a3 || !(*(unsigned int (**)(const WebCore::HTMLElement *))(*(_QWORD *)a3 + 192))(a3))
    return 1;
  if (WebCore::isNavigationalElement(this, v28))
    return 0;
  v30 = (WebCore *)*((_QWORD *)this + 10);
  if (!v30)
    return 1;
  v31 = *((_WORD *)v30 + 14);
  if ((v31 & 0x10) != 0)
  {
    v32 = (WebCore *)*((_QWORD *)this + 10);
  }
  else
  {
    do
    {
      if ((v31 & 4) == 0 || (v32 = (WebCore *)*((_QWORD *)v30 + 10)) == 0)
      {
        if (v30 == this)
          return 1;
        while (1)
        {
          v32 = (WebCore *)*((_QWORD *)v30 + 7);
          if (v32)
            break;
          v30 = (WebCore *)*((_QWORD *)v30 + 4);
          if (v30)
            v33 = v30 == this;
          else
            v33 = 1;
          if (v33)
            return 1;
        }
      }
      v31 = *((_WORD *)v32 + 14);
      v30 = v32;
    }
    while ((v31 & 0x10) == 0);
  }
  if (WebCore::isNavigationalElement(v32, v29))
    return 0;
  do
  {
    v35 = (WebCore *)*((_QWORD *)v32 + 10);
    if (!v35)
    {
      if (v32 == this)
        return 1;
      while (1)
      {
        v35 = (WebCore *)*((_QWORD *)v32 + 7);
        if (v35)
          break;
        v32 = (WebCore *)*((_QWORD *)v32 + 4);
        if (v32)
          v39 = v32 == this;
        else
          v39 = 1;
        if (v39)
          return 1;
      }
    }
    v36 = *((_WORD *)v35 + 14);
    if ((v36 & 0x10) != 0)
    {
      v32 = v35;
    }
    else
    {
      do
      {
        if ((v36 & 4) == 0 || (v32 = (WebCore *)*((_QWORD *)v35 + 10)) == 0)
        {
          if (v35 == this)
            return 1;
          while (1)
          {
            v32 = (WebCore *)*((_QWORD *)v35 + 7);
            if (v32)
              break;
            v35 = (WebCore *)*((_QWORD *)v35 + 4);
            if (v35)
              v37 = v35 == this;
            else
              v37 = 1;
            if (v37)
              return 1;
          }
        }
        v36 = *((_WORD *)v32 + 14);
        v35 = v32;
      }
      while ((v36 & 0x10) == 0);
    }
    isNavigationalElement = WebCore::isNavigationalElement(v32, v34);
    result = 0;
  }
  while (!isNavigationalElement);
  return result;
}

uint64_t WebCore::resolveSelectorToQuery(WebCore *this, const WTF::String *a2)
{
  uint64_t result;
  WTF::StringImpl *v4;
  _DWORD *v5;
  int v6;
  int v7;
  WTF *v8;
  uint64_t v9;
  int v10;
  _DWORD *v11;
  char v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  WTF *v16;
  unsigned int v17;

  result = WTF::String::splitAllowingEmptyEntries();
  if (v17 != 2)
  {
    if (v17 == 1)
    {
      v5 = *(_DWORD **)v16;
      if (*(_QWORD *)v16)
        *v5 += 2;
      *(_QWORD *)this = v5;
      goto LABEL_12;
    }
LABEL_11:
    *(_QWORD *)this = 0;
LABEL_12:
    *((_BYTE *)this + 8) = 1;
    goto LABEL_13;
  }
  result = *((_QWORD *)v16 + 1);
  if (!result)
    goto LABEL_11;
  v6 = *(_DWORD *)result;
  v7 = *(_DWORD *)(result + 4);
  *(_DWORD *)result += 2;
  if (v7 == 5)
  {
    v9 = *(_QWORD *)(result + 8);
    if ((*(_BYTE *)(result + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v9 & 0xDF) != 0x41
        || (*(_BYTE *)(v9 + 1) & 0xDF) != 0x46
        || (*(_BYTE *)(v9 + 2) & 0xDF) != 0x54
        || (*(_BYTE *)(v9 + 3) & 0xDF) != 0x45)
      {
        goto LABEL_9;
      }
      v10 = *(unsigned __int8 *)(v9 + 4);
    }
    else
    {
      if ((*(_WORD *)v9 & 0xFFDF) != 0x41
        || (*(_WORD *)(v9 + 2) & 0xFFDF) != 0x46
        || (*(_WORD *)(v9 + 4) & 0xFFDF) != 0x54
        || (*(_WORD *)(v9 + 6) & 0xFFDF) != 0x45)
      {
        goto LABEL_9;
      }
      v10 = *(unsigned __int16 *)(v9 + 8);
    }
    if ((v10 & 0xFFFFFFDF) == 0x52)
    {
      v11 = *(_DWORD **)v16;
      v12 = 4;
      if (!*(_QWORD *)v16)
        goto LABEL_25;
      goto LABEL_24;
    }
LABEL_9:
    if (v6)
      *(_DWORD *)result = v6;
    else
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v4);
    goto LABEL_11;
  }
  if (v7 != 6)
    goto LABEL_9;
  v13 = *(_QWORD *)(result + 8);
  if ((*(_BYTE *)(result + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v13 & 0xDF) != 0x42
      || (*(_BYTE *)(v13 + 1) & 0xDF) != 0x45
      || (*(_BYTE *)(v13 + 2) & 0xDF) != 0x46
      || (*(_BYTE *)(v13 + 3) & 0xDF) != 0x4F
      || (*(_BYTE *)(v13 + 4) & 0xDF) != 0x52)
    {
      goto LABEL_9;
    }
    v14 = *(unsigned __int8 *)(v13 + 5);
  }
  else
  {
    if ((*(_WORD *)v13 & 0xFFDF) != 0x42
      || (*(_WORD *)(v13 + 2) & 0xFFDF) != 0x45
      || (*(_WORD *)(v13 + 4) & 0xFFDF) != 0x46
      || (*(_WORD *)(v13 + 6) & 0xFFDF) != 0x4F
      || (*(_WORD *)(v13 + 8) & 0xFFDF) != 0x52)
    {
      goto LABEL_9;
    }
    v14 = *(unsigned __int16 *)(v13 + 10);
  }
  if ((v14 & 0xFFFFFFDF) != 0x45)
    goto LABEL_9;
  v11 = *(_DWORD **)v16;
  v12 = 2;
  if (*(_QWORD *)v16)
  {
LABEL_24:
    *v11 += 2;
    v6 = *(_DWORD *)result - 2;
  }
LABEL_25:
  *(_QWORD *)this = v11;
  *((_BYTE *)this + 8) = v12;
  if (v6)
    *(_DWORD *)result = v6;
  else
    result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v4);
LABEL_13:
  v8 = v16;
  if (!v17)
  {
    if (!v16)
      return result;
    return WTF::fastFree(v8, v4);
  }
  v15 = 8 * v17;
  do
  {
    result = *(_QWORD *)v8;
    *(_QWORD *)v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v4);
      else
        *(_DWORD *)result -= 2;
    }
    v8 = (WTF *)((char *)v8 + 8);
    v15 -= 8;
  }
  while (v15);
  v8 = v16;
  if (v16)
    return WTF::fastFree(v8, v4);
  return result;
}

_BYTE *WebCore::inflatedClientRectForAdjustmentRegionTracking(_BYTE *this, unint64_t a2, float a3)
{
  _BYTE *v3;
  unint64_t v4;
  int v5;
  int v6;
  unint64_t v8;
  int v9;
  int v10;
  unint64_t v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  float32x4_t v32;

  v3 = this;
  v4 = a2 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0xFFFFFFFFFFFFLL) == 0)
  {
    *this = 0;
    this[16] = 0;
    return this;
  }
  if ((*(_BYTE *)((a2 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195F9991CLL);
  }
  v5 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFLL) + 0x14);
  v6 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFLL) + 0x10) + 1;
  *(_DWORD *)((a2 & 0xFFFFFFFFFFFFLL) + 0x10) = v6;
  if ((v5 & 0x1800000) == 0x1000000)
  {
    v8 = WebCore::RenderObject::absoluteBoundingBoxRect((WebCore::RenderObject *)(a2 & 0xFFFFFFFFFFFFLL), 1, 0);
    v32.f32[0] = (float)(int)v8;
    v32.f32[1] = (float)SHIDWORD(v8);
    v32.f32[2] = (float)v9;
    v32.f32[3] = (float)v10;
    v11 = v4;
    if ((*(_BYTE *)(v4 + 45) & 2) != 0)
    {
      v11 = *(_QWORD *)(v4 + 32);
      if (v11)
        v11 = *(_QWORD *)(v11 + 8);
    }
    this = (_BYTE *)WebCore::Document::convertAbsoluteToClientRect(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8) + 40) + 8), &v32, (const WebCore::RenderStyle *)(v11 + 80));
    if (v32.f32[2] <= 0.0 || v32.f32[3] <= 0.0)
      goto LABEL_39;
    v12 = (float)((float)((float)(a3 + -200000.0) / -600000.0) * 0.05) + 0.3;
    v13 = 0.25;
    if (v12 > 0.25)
      v13 = (float)((float)((float)(a3 + -200000.0) / -600000.0) * 0.05) + 0.3;
    v14 = v12 >= 0.3 ? 0.3 : v13;
    if ((float)((float)(v32.f32[2] * v32.f32[3]) / a3) >= v14)
    {
LABEL_39:
      v29 = 0;
      *v3 = 0;
      goto LABEL_40;
    }
    v15 = floorf(v32.f32[0]);
    v16 = 2147500000.0;
    if (v15 < 2147500000.0)
    {
      v16 = -2147500000.0;
      if (v15 > -2147500000.0)
        v16 = (float)(int)v15;
    }
    v17 = floorf(v32.f32[1]);
    v18 = 2147500000.0;
    if (v17 < 2147500000.0)
    {
      v18 = -2147500000.0;
      if (v17 > -2147500000.0)
        v18 = (float)(int)v17;
    }
    v19 = ceilf(v32.f32[0] + v32.f32[2]);
    v20 = 2147500000.0;
    if (v19 < 2147500000.0)
    {
      v20 = -2147500000.0;
      if (v19 > -2147500000.0)
        v20 = (float)(int)v19;
    }
    v21 = ceilf(v32.f32[1] + v32.f32[3]);
    v22 = 2147500000.0;
    if (v21 < 2147500000.0)
    {
      v22 = -2147500000.0;
      if (v21 > -2147500000.0)
        v22 = (float)(int)v21;
    }
    v23 = 2147483642;
    if (v16 < 2147500000.0)
    {
      if (v16 <= -2147500000.0)
        v23 = 2147483643;
      else
        v23 = ((int)v16 - 5);
    }
    if (v18 >= 2147500000.0)
    {
      v30 = 0xFFFA00000000;
    }
    else
    {
      if (v18 > -2147500000.0)
      {
        v24 = ((unint64_t)(int)v18 << 32) - 0x500000000;
        goto LABEL_31;
      }
      v30 = 0xFFFB00000000;
    }
    v24 = v30 & 0xFFFFFFFFFFFFLL | 0x7FFF000000000000;
LABEL_31:
    v25 = v20 - v16;
    v26 = v22 - v18;
    if (v25 >= 2147500000.0)
    {
      v27 = 2147483657;
    }
    else if (v25 <= -2147500000.0)
    {
      v27 = 2147483658;
    }
    else
    {
      v27 = ((int)v25 + 10);
    }
    if (v26 >= 2147500000.0)
    {
      v31 = 0x900000000;
    }
    else
    {
      if (v26 > -2147500000.0)
      {
        v28 = ((unint64_t)(int)v26 << 32) + 0xA00000000;
LABEL_37:
        *(_QWORD *)v3 = v24 | v23;
        *((_QWORD *)v3 + 1) = v28 | v27;
        v29 = 1;
LABEL_40:
        v3[16] = v29;
        v6 = *(_DWORD *)(v4 + 16);
        goto LABEL_41;
      }
      v31 = 0xA00000000;
    }
    v28 = v31 & 0xFFFFFFFFFFFFLL | 0x8000000000000000;
    goto LABEL_37;
  }
  *this = 0;
  this[16] = 0;
LABEL_41:
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x195F9993CLL);
  }
  *(_DWORD *)(v4 + 16) = v6 - 1;
  return this;
}

uint64_t WebCore::ElementTargetingController::reset(WebCore::ElementTargetingController *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v11 = 0;
  v12 = 0;
  v13 = 0;
  WebCore::Region::operator=((uint64_t)this + 200, &v11);
  WebCore::Region::~Region((WebCore::Region *)&v11, v2);
  v11 = 0;
  v12 = 0;
  v13 = 0;
  WebCore::Region::operator=((uint64_t)this + 224, &v11);
  WebCore::Region::~Region((WebCore::Region *)&v11, v3);
  *((_QWORD *)this + 33) = 0;
  v11 = 0;
  v12 = 0;
  WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::operator=((uint64_t *)this + 31, &v11);
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable(&v11, v4);
  v11 = 0;
  v12 = 0;
  WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)this + 168, &v11);
  WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v11, v5);
  v11 = 0;
  v12 = 0;
  WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)this + 184, &v11);
  result = WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v11, v6);
  *((_BYTE *)this + 276) = 0;
  *((_DWORD *)this + 68) = 0;
  if ((*((_QWORD *)this + 18) & 0xFFFFFFFFFFFFLL) != 0)
    result = WebCore::TimerBase::stopSlowCase((WebCore::ElementTargetingController *)((char *)this + 112));
  *((_QWORD *)this + 13) = 0;
  v9 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v9 & 0xFDFFFFFFFFFFFFLL;
  if ((v9 & 0xFFFFFFFFFFFFLL) != 0)
    result = WebCore::TimerBase::stopSlowCase((WebCore::ElementTargetingController *)((char *)this + 16));
  v10 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v10)
    return WTF::fastFree((WTF *)(v10 - 16), v8);
  return result;
}

uint64_t *WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *a2;
  *a2 = 0;
  v5 = *a1;
  *a1 = v4;
  if (v5)
  {
    v7 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v7)
    {
      for (i = 0; i != v7; ++i)
      {
        v9 = *(_QWORD *)(v5 + 8 * i);
        if (v9 != -1)
        {
          *(_QWORD *)(v5 + 8 * i) = 0;
          if (v9)
          {
            do
            {
              v10 = __ldaxr((unsigned int *)v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, (unsigned int *)v9));
            if (!v11)
            {
              v17 = v7;
              v18 = i;
              v16 = v5;
              atomic_store(1u, (unsigned int *)v9);
              v12 = *(unsigned int *)(v9 + 28);
              if ((_DWORD)v12)
              {
                v15 = v9;
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v9 + 16), (WTF::StringImpl *)(*(_QWORD *)(v9 + 16) + 32 * v12));
                v9 = v15;
              }
              v13 = *(WTF **)(v9 + 16);
              if (v13)
              {
                *(_QWORD *)(v9 + 16) = 0;
                *(_DWORD *)(v9 + 24) = 0;
                v14 = v9;
                WTF::fastFree(v13, a2);
                v9 = v14;
              }
              WTF::fastFree((WTF *)v9, a2);
              v5 = v16;
              v7 = v17;
              i = v18;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  a1[1] = a2[1];
  return a1;
}

uint64_t WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;

  v4 = *(_DWORD *)(a1 + 12);
  if (v4)
    WTF::VectorTypeOperations<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl ***)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 24 * v4));
  WTF::VectorBuffer<WTF::Function<void ()(void)>,0ul,WTF::FastMalloc>::adopt(a1, a2);
  return a1;
}

uint64_t WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;

  v4 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v4)
    WTF::VectorTypeOperations<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::destruct(*(WTF::StringImpl ***)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 16 * v4));
  WTF::VectorBuffer<WTF::Function<void ()(void)>,0ul,WTF::FastMalloc>::adopt(a1, a2);
  return a1;
}

uint64_t WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v6;
  uint64_t v7;
  WTF::StringImpl ***v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl ***v11;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(WTF **)a1;
  if (!(_DWORD)v3)
  {
    if (!v4)
      return a1;
LABEL_15:
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
    return a1;
  }
  v6 = (WTF *)((char *)v4 + 16 * v3);
  do
  {
    v7 = *((unsigned int *)v4 + 3);
    v8 = *(WTF::StringImpl ****)v4;
    if ((_DWORD)v7)
    {
      v9 = 8 * v7;
      do
      {
        if (*v8)
        {
          v10 = v9;
          v11 = v8;
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v8, (WTF::StringImpl *)a2);
          v9 = v10;
          v8 = v11;
        }
        ++v8;
        v9 -= 8;
      }
      while (v9);
      v8 = *(WTF::StringImpl ****)v4;
    }
    if (v8)
    {
      *(_QWORD *)v4 = 0;
      *((_DWORD *)v4 + 2) = 0;
      WTF::fastFree((WTF *)v8, a2);
    }
    v4 = (WTF *)((char *)v4 + 16);
  }
  while (v4 != v6);
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
    goto LABEL_15;
  return a1;
}

uint64_t WebCore::ElementTargetingController::resetVisibilityAdjustments(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  unsigned int *v8;
  unsigned int v9;
  WebCore::LocalFrameView *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  double v16;
  double v17;
  double v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  double v25;
  double v26;
  double v27;
  unsigned int v28;
  _DWORD *v29;
  void *v30;
  unsigned int v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WebCore::Node *v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  _DWORD *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WebCore::Node *v64;
  WebCore::Node *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _DWORD *v72;
  WTF::StringImpl **v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  WTF::StringImpl **v77;
  unint64_t v78;
  WTF::StringImpl *v79;
  WTF *v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unsigned int v85;
  int i;
  WTF *v87;
  _DWORD *v88;
  uint64_t v89;
  WTF::StringImpl ***v90;
  uint64_t v91;
  char v92;
  void *v93;
  WTF::StringImpl *v94;
  WTF *v95;
  WTF::StringImpl *v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  unsigned __int16 **v101;
  unsigned __int16 **v102;
  char v103;
  unsigned __int16 *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  unsigned __int16 *v109;
  int v110;
  int v111;
  int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  WTF *v119;
  void *v120;
  unint64_t v121;
  uint64_t v122;
  WTF *v123;
  WTF *v125;
  uint64_t v127;
  WTF *v128;
  WTF *v130;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  WebCore::Node *v135;
  uint64_t v136;
  unsigned int *v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t v141;
  unsigned int v142;
  unsigned int v143;
  WTF *v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  int v150;
  WTF *v151;
  WTF *v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int32x2_t *v161;
  WTF *v162;
  void *v163;
  WTF *v164;
  WTF *v165;
  WTF *v166;
  WTF *v167;
  uint64_t v168;
  WTF::StringImpl ***v169;
  uint64_t v170;
  WTF *v171;
  WTF *v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unsigned __int16 **v182;
  unsigned __int16 *v183;
  uint64_t v184;
  uint64_t v185;
  float v186;
  WTF *v187;
  WTF *v188;
  WTF *v190;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  WebCore::LocalFrameView *v195;
  uint64_t v196;
  WebCore::Node *v197[2];
  char v198;
  WTF *v199[2];
  WTF *v200;
  unsigned __int16 **v201;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  ++*(_DWORD *)v3;
  v4 = *(_QWORD *)(v3 + 160);
  if (v4)
    v5 = *(_BYTE *)(v4 + 144) == 0;
  else
    v5 = 0;
  if (v5)
  {
    v8 = (unsigned int *)(v4 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    v10 = *(WebCore::LocalFrameView **)(v4 + 288);
    if (!v10)
    {
      v61 = 0;
      goto LABEL_296;
    }
    ++*((_DWORD *)v10 + 2);
    v11 = *(_QWORD *)(v4 + 296);
    if (!v11)
    {
      v61 = 0;
LABEL_294:
      if (*((_DWORD *)v10 + 2) == 1)
        (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v10 + 8))(v10);
      else
        --*((_DWORD *)v10 + 2);
      do
      {
LABEL_296:
        v142 = __ldaxr(v8);
        v143 = v142 - 1;
      }
      while (__stlxr(v143, v8));
      if (!v143)
      {
        atomic_store(1u, v8);
        v164 = (WTF *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v164 = off_1E31FE290;
        *((_QWORD *)v164 + 1) = v8;
        v199[0] = v164;
        WTF::ensureOnMainThread();
        v165 = v199[0];
        v199[0] = 0;
        if (v165)
          (*(void (**)(WTF *))(*(_QWORD *)v165 + 8))(v165);
      }
      goto LABEL_298;
    }
    *(_DWORD *)(v11 + 24) += 2;
    v201 = 0;
    v12 = *(unsigned int *)(a2 + 12);
    v195 = v10;
    v196 = v11;
    v194 = v3;
    if ((_DWORD)v12)
    {
      v13 = (v12 - 1) | ((v12 - 1) >> 1) | ((((_DWORD)v12 - 1) | ((v12 - 1) >> 1)) >> 2);
      v14 = v13 | (v13 >> 4) | ((v13 | (v13 >> 4)) >> 8);
      v15 = (v14 | HIWORD(v14)) + 1;
      if (v15 > 0x400)
      {
        if (v15 > 2 * v12)
          goto LABEL_25;
      }
      else if (3 * v15 > 4 * v12)
      {
LABEL_16:
        v16 = (double)v12;
        v17 = (double)v15;
        v18 = 0.604166667;
        goto LABEL_26;
      }
      LODWORD(v15) = 2 * v15;
      if (v15 <= 0x400)
        goto LABEL_16;
LABEL_25:
      v16 = (double)v12;
      v17 = (double)v15;
      v18 = 0.416666667;
LABEL_26:
      if (v17 * v18 <= v16)
        LODWORD(v15) = 2 * v15;
      if (v15 <= 8)
        v28 = 8;
      else
        v28 = v15;
      v29 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(8 * v28 + 16));
      v201 = (unsigned __int16 **)(v29 + 4);
      v29[2] = v28 - 1;
      v29[3] = v28;
      *v29 = 0;
      *((_DWORD *)v201 - 3) = 0;
      v31 = *(_DWORD *)(a2 + 12);
      if (v31)
      {
        v32 = *(_QWORD **)a2;
        v33 = *(_QWORD *)a2 + 48 * v31;
        while (1)
        {
          {
            WebCore::elementIdentifiersMap(void)::map = 0;
            goto LABEL_40;
          }
          if (!WebCore::elementIdentifiersMap(void)::map
            || !*(_DWORD *)(WebCore::elementIdentifiersMap(void)::map - 12))
          {
            goto LABEL_40;
          }
          v35 = v32[2];
          v34 = v32[3];
          v36 = v32[4];
          v37 = *(unsigned int *)(WebCore::elementIdentifiersMap(void)::map - 4);
          if ((_DWORD)v37)
          {
            v38 = 16 * v37;
            v39 = (_QWORD *)WebCore::elementIdentifiersMap(void)::map;
            while ((unint64_t)(*v39 + 1) <= 1)
            {
              v39 += 2;
              v38 -= 16;
              if (!v38)
                goto LABEL_40;
            }
          }
          else
          {
            v39 = (_QWORD *)WebCore::elementIdentifiersMap(void)::map;
          }
          v40 = WebCore::elementIdentifiersMap(void)::map + 16 * v37;
LABEL_44:
          if (v39 == (_QWORD *)v40)
            goto LABEL_40;
          if (v39[1] != *v32)
          {
            while (1)
            {
              v39 += 2;
              if (v39 == (_QWORD *)v40)
                goto LABEL_40;
              if ((unint64_t)(*v39 + 1) > 1)
                goto LABEL_44;
            }
          }
          v41 = *(_QWORD *)(*v39 + 8);
          if (!v41)
            goto LABEL_40;
          v42 = *(_DWORD *)(v41 + 24) + 2;
          *(_DWORD *)(v41 + 24) = v42;
          v43 = *(_QWORD **)(*(_QWORD *)(v41 + 40) + 8);
          v44 = v43[52];
          v45 = v43[53];
          v46 = v43[54];
          if (v45 != v34 || v44 != v35 || v46 != v36)
            goto LABEL_63;
          if ((WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::Element>(a1 + 248, (_QWORD *)v41) & 1) == 0)break;
          v197[0] = (WebCore::Node *)v41;
          WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::add((uint64_t *)&v201, (uint64_t *)v197, (uint64_t)v199);
          v49 = v197[0];
          v197[0] = 0;
          if (v49)
          {
            if (*((_DWORD *)v49 + 6) == 2)
            {
              if ((*((_WORD *)v49 + 15) & 0x400) != 0)
                goto LABEL_40;
              goto LABEL_67;
            }
            *((_DWORD *)v49 + 6) -= 2;
          }
LABEL_40:
          v32 += 6;
          if (v32 == (_QWORD *)v33)
            goto LABEL_138;
        }
        v42 = *(_DWORD *)(v41 + 24);
LABEL_63:
        if (v42 == 2)
        {
          if ((*(_WORD *)(v41 + 30) & 0x400) == 0)
          {
            v49 = (WebCore::Node *)v41;
LABEL_67:
            WebCore::Node::removedLastRef(v49, v30);
            goto LABEL_40;
          }
        }
        else
        {
          *(_DWORD *)(v41 + 24) = v42 - 2;
        }
        goto LABEL_40;
      }
LABEL_138:
      v69 = v196;
      v70 = *(_QWORD *)(v196 + 528);
      if (v70)
      {
        v71 = *(_QWORD *)(v70 + 8);
        if (v71)
        {
          v72 = *(_DWORD **)(*(_QWORD *)(v71 + 280) + 88);
          if (!v72)
          {
LABEL_325:
            v92 = 1;
            goto LABEL_181;
          }
          if (*(_QWORD *)(v71 + 296) == v196)
          {
            ++v72[6];
            if (*(_DWORD *)(a2 + 12))
            {
              v73 = *(WTF::StringImpl ***)(a1 + 184);
              v74 = *(unsigned int *)(a1 + 196);
              v75 = (unint64_t)&v73[2 * v74];
              v76 = 0;
              if ((_DWORD)v74)
              {
                v77 = &v73[2 * v74];
                v78 = (unint64_t)v77;
                while (1)
                {
                  WebCore::ElementTargetingController::findElementFromSelectors((unsigned int *)v199, a1, (uint64_t)v73);
                  v80 = v199[0];
                  if (!v199[1])
                    goto LABEL_148;
                  if (*(_DWORD *)v199[1] != 2)
                    break;
                  WTF::StringImpl::destroy(v199[1], v79);
                  if (v80)
                  {
LABEL_149:
                    if (v201)
                    {
                      v81 = *((_DWORD *)v201 - 2);
                      v82 = ((unint64_t)v80 + ~((_QWORD)v80 << 32)) ^ (((unint64_t)v80
                                                                             + ~((_QWORD)v80 << 32)) >> 22);
                      v83 = 9 * ((v82 + ~(v82 << 13)) ^ ((v82 + ~(v82 << 13)) >> 8));
                      v84 = (v83 ^ (v83 >> 15)) + ~((v83 ^ (v83 >> 15)) << 27);
                      v85 = v81 & ((v84 >> 31) ^ v84);
                      for (i = 1; ; ++i)
                      {
                        v87 = (WTF *)v201[v85];
                        if (v87 != (WTF *)-1)
                        {
                          if (!v87)
                            goto LABEL_160;
                          if (v87 == v80)
                            break;
                        }
                        v85 = (v85 + i) & v81;
                      }
                      if (*((_DWORD *)v80 + 6) == 2)
                      {
                        if ((*((_WORD *)v80 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef(v80, v79);
                      }
                      else
                      {
                        *((_DWORD *)v80 + 6) -= 2;
                      }
                      v88 = v73;
                      if (v78 != *(_QWORD *)(a1 + 184) + 16 * *(unsigned int *)(a1 + 196))
                      {
                        if (v77 == v73)
                        {
                          v88 = (_DWORD *)v78;
                        }
                        else
                        {
                          WTF::VectorMover<false,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::moveOverlapping(v77, (WTF::StringImpl *)v73, v78);
                          v88 = (_DWORD *)(v78 + (char *)v73 - (char *)v77);
                        }
                      }
                      v89 = *((unsigned int *)v73 + 3);
                      v90 = (WTF::StringImpl ***)*v73;
                      if ((_DWORD)v89)
                      {
                        v91 = 8 * v89;
                        do
                        {
                          if (*v90)
                            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v90, v79);
                          ++v90;
                          v91 -= 8;
                        }
                        while (v91);
                        v90 = (WTF::StringImpl ***)*v73;
                      }
                      if (v90)
                      {
                        *v73 = 0;
                        *((_DWORD *)v73 + 2) = 0;
                        WTF::fastFree((WTF *)v90, v79);
                      }
                      v77 = v73 + 2;
                      ++v76;
                      v78 = (unint64_t)v88;
                    }
                    else
                    {
LABEL_160:
                      if (*((_DWORD *)v80 + 6) == 2)
                      {
                        if ((*((_WORD *)v80 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef(v80, v79);
                      }
                      else
                      {
                        *((_DWORD *)v80 + 6) -= 2;
                      }
                    }
                  }
LABEL_172:
                  v73 += 2;
                  if ((unint64_t)v73 >= v75)
                  {
                    v73 = *(WTF::StringImpl ***)(a1 + 184);
                    LODWORD(v74) = *(_DWORD *)(a1 + 196);
                    v75 = v78;
                    goto LABEL_187;
                  }
                }
                *(_DWORD *)v199[1] -= 2;
LABEL_148:
                if (v80)
                  goto LABEL_149;
                goto LABEL_172;
              }
              v77 = &v73[2 * v74];
LABEL_187:
              v96 = (WTF::StringImpl *)&v73[2 * v74];
              if (v77 != (WTF::StringImpl **)v96)
              {
                WTF::VectorMover<false,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::moveOverlapping(v77, v96, v75);
                LODWORD(v74) = *(_DWORD *)(a1 + 196);
              }
              v199[0] = 0;
              v199[1] = 0;
              v97 = (v74 - v76);
              *(_DWORD *)(a1 + 196) = v97;
              if ((_DWORD)v97)
              {
                if (v97 >= 0xAAAAAAB)
                {
LABEL_426:
                  __break(0xC471u);
                  JUMPOUT(0x195F9AFACLL);
                }
                v150 = 24 * v97;
                v151 = (WTF *)WTF::fastMalloc((WTF *)(24 * v97));
                LODWORD(v199[1]) = (v150 & 0xFFFFFFF8) / 0x18;
                v199[0] = v151;
                if (*(_DWORD *)(a1 + 196))
                {
                  v152 = v151;
                  v153 = 0;
                  do
                  {
                    v154 = *(_QWORD *)(a1 + 184) + 16 * v153;
                    v155 = *(unsigned int *)(v154 + 12);
                    if ((_DWORD)v155)
                    {
                      if (v155 >> 29)
                        goto LABEL_426;
                      v156 = WTF::fastMalloc((WTF *)(8 * v155));
                      v157 = *(unsigned int *)(v154 + 12);
                      if ((_DWORD)v157)
                      {
                        v158 = 0;
                        v159 = *(_QWORD *)v154;
                        v160 = 8 * v157;
                        do
                        {
                          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)(v156 + v158), (_QWORD **)(v159 + v158));
                          v158 += 8;
                        }
                        while (v160 != v158);
                      }
                    }
                    else
                    {
                      v156 = 0;
                    }
                    v161 = (int32x2_t *)((char *)v152 + 24 * v153);
                    *v161 = 0;
                    v161[1] = 0;
                    v161[1] = (int32x2_t)v156;
                    v161[2] = vdup_n_s32(v155);
                    HIDWORD(v199[1]) = ++v153;
                  }
                  while (v153 < *(unsigned int *)(a1 + 196));
                }
              }
              WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 168, v199);
              WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v199, v98);
              v10 = v195;
              v69 = v196;
              goto LABEL_191;
            }
            v92 = 0;
LABEL_181:
            v199[0] = 0;
            v199[1] = 0;
            WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 168, v199);
            WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v199, v93);
            v199[0] = 0;
            v199[1] = 0;
            WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 184, v199);
            v95 = v199[0];
            if (HIDWORD(v199[1]))
            {
              v166 = (WTF *)((char *)v199[0] + 16 * HIDWORD(v199[1]));
              v167 = v199[0];
              do
              {
                v168 = *((unsigned int *)v167 + 3);
                v169 = *(WTF::StringImpl ****)v167;
                if ((_DWORD)v168)
                {
                  v170 = 8 * v168;
                  do
                  {
                    if (*v169)
                      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v169, v94);
                    ++v169;
                    v170 -= 8;
                  }
                  while (v170);
                  v169 = *(WTF::StringImpl ****)v167;
                }
                if (v169)
                {
                  *(_QWORD *)v167 = 0;
                  *((_DWORD *)v167 + 2) = 0;
                  WTF::fastFree((WTF *)v169, v94);
                }
                v167 = (WTF *)((char *)v167 + 16);
                v69 = v196;
              }
              while (v167 != v166);
            }
            if (v95)
              WTF::fastFree(v95, v94);
            v10 = v195;
            if ((v92 & 1) != 0)
            {
LABEL_193:
              *(_DWORD *)(a1 + 272) = 0;
              *(_BYTE *)(a1 + 276) = 1;
              if (!v201)
              {
                v61 = 0;
LABEL_292:
                v3 = v194;
                if (*(_DWORD *)(v69 + 24) == 2)
                {
                  if ((*(_WORD *)(v69 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v69, v94);
                }
                else
                {
                  *(_DWORD *)(v69 + 24) -= 2;
                }
                goto LABEL_294;
              }
              if (!*((_DWORD *)v201 - 3))
              {
                v61 = 0;
                goto LABEL_291;
              }
              v99 = *((unsigned int *)v201 - 1);
              if ((_DWORD)v99)
              {
                v100 = 8 * v99;
                v101 = v201;
                while ((unint64_t)*v101 + 1 <= 1)
                {
                  ++v101;
                  v100 -= 8;
                  if (!v100)
                    goto LABEL_252;
                }
              }
              else
              {
                v101 = v201;
              }
              v102 = &v201[v99];
              if (v101 == v102)
              {
LABEL_252:
                v103 = 0;
LABEL_253:
                v10 = v195;
                v121 = WebCore::LocalFrameView::baseLayoutViewportSize(v195);
                *(float *)(a1 + 264) = (float)(int)v121 * 0.015625;
                *(float *)(a1 + 268) = (float)SHIDWORD(v121) * 0.015625;
                *(_QWORD *)(a1 + 224) = 0;
                *(_QWORD *)(a1 + 232) = 0;
                v122 = *(_QWORD *)(a1 + 240);
                *(_QWORD *)(a1 + 240) = 0;
                if (v122)
                {
                  v123 = *(WTF **)(v122 + 144);
                  if ((WTF *)(v122 + 160) != v123 && v123 != 0)
                  {
                    *(_QWORD *)(v122 + 144) = 0;
                    *(_DWORD *)(v122 + 152) = 0;
                    WTF::fastFree(v123, v94);
                  }
                  v125 = *(WTF **)v122;
                  if (v122 + 16 != *(_QWORD *)v122 && v125 != 0)
                  {
                    *(_QWORD *)v122 = 0;
                    *(_DWORD *)(v122 + 8) = 0;
                    WTF::fastFree(v125, v94);
                  }
                  WTF::fastFree((WTF *)v122, v94);
                }
                *(_QWORD *)(a1 + 200) = 0;
                v127 = *(_QWORD *)(a1 + 216);
                *(_QWORD *)(a1 + 208) = 0;
                *(_QWORD *)(a1 + 216) = 0;
                if (v127)
                {
                  v128 = *(WTF **)(v127 + 144);
                  if ((WTF *)(v127 + 160) != v128 && v128 != 0)
                  {
                    *(_QWORD *)(v127 + 144) = 0;
                    *(_DWORD *)(v127 + 152) = 0;
                    WTF::fastFree(v128, v94);
                  }
                  v130 = *(WTF **)v127;
                  if (v127 + 16 != *(_QWORD *)v127 && v130 != 0)
                  {
                    *(_QWORD *)v127 = 0;
                    *(_DWORD *)(v127 + 8) = 0;
                    WTF::fastFree(v130, v94);
                  }
                  WTF::fastFree((WTF *)v127, v94);
                }
                if ((v103 & 1) != 0)
                {
                  v132 = *(_QWORD *)(a1 + 248);
                  if (!v132 || !*(_DWORD *)(v132 - 12))
                    goto LABEL_279;
                  v147 = *(unsigned int *)(v132 - 4);
                  if ((_DWORD)v147)
                  {
                    v148 = 8 * v147;
                    v149 = *(uint64_t **)(a1 + 248);
                    while ((unint64_t)(*v149 + 1) <= 1)
                    {
                      ++v149;
                      v148 -= 8;
                      if (!v148)
                        goto LABEL_279;
                    }
                  }
                  else
                  {
                    v149 = *(uint64_t **)(a1 + 248);
                  }
                  v173 = (uint64_t *)(v132 + 8 * v147);
                  if (v149 == v173)
                    goto LABEL_279;
                  v174 = *v149;
LABEL_346:
                  if (!*(_QWORD *)(v174 + 8))
                  {
                    while (++v149 != v173)
                    {
                      v174 = *v149;
                      if ((unint64_t)(*v149 + 1) > 1)
                      {
                        if (v149 == v173)
                          break;
                        goto LABEL_346;
                      }
                    }
LABEL_279:
                    v133 = *(_QWORD *)(a1 + 8);
                    if (v133 && (v134 = *(_QWORD *)(v133 + 8)) != 0)
                    {
                      ++*(_DWORD *)v134;
                      v135 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v135 = off_1E33FE998;
                      v197[0] = v135;
                      v136 = *(_QWORD *)(v134 + 160);
                      v137 = (unsigned int *)(v136 + 8);
                      do
                        v138 = __ldaxr(v137);
                      while (__stlxr(v138 + 1, v137));
                      WebCore::Page::forEachDocumentFromMainFrame(v136, v197);
                      v10 = v195;
                      v69 = v196;
                      do
                      {
                        v139 = __ldaxr(v137);
                        v140 = v139 - 1;
                      }
                      while (__stlxr(v140, v137));
                      if (!v140)
                      {
                        atomic_store(1u, v137);
                        v171 = (WTF *)WTF::fastMalloc((WTF *)0x10);
                        *(_QWORD *)v171 = off_1E31FE290;
                        *((_QWORD *)v171 + 1) = v137;
                        v199[0] = v171;
                        WTF::ensureOnMainThread();
                        v172 = v199[0];
                        v199[0] = 0;
                        if (v172)
                          (*(void (**)(WTF *))(*(_QWORD *)v172 + 8))(v172);
                        v10 = v195;
                        v69 = v196;
                      }
                      (*(void (**)(WebCore::Node *))(*(_QWORD *)v135 + 8))(v135);
                      if (*(_DWORD *)v134 == 1)
                      {
                        WebCore::Page::~Page(v134);
                        WTF::fastFree(v162, v163);
                      }
                      else
                      {
                        --*(_DWORD *)v134;
                      }
                      v61 = 1;
                    }
                    else
                    {
                      v61 = 1;
                      v10 = v195;
                      v69 = v196;
                    }
                    goto LABEL_291;
                  }
                  WebCore::Document::updateLayout(v196, 2u, 0);
                  v175 = *(_QWORD *)(a1 + 248);
                  if (v175)
                  {
                    v177 = *(unsigned int *)(v175 - 4);
                    v176 = v175 + 8 * v177;
                    if (*(_DWORD *)(v175 - 12))
                    {
                      if (!(_DWORD)v177)
                      {
                        v178 = *(_QWORD *)(a1 + 248);
                        goto LABEL_357;
                      }
                      v180 = 8 * v177;
                      v178 = *(_QWORD *)(a1 + 248);
                      while ((unint64_t)(*(_QWORD *)v178 + 1) <= 1)
                      {
                        v178 += 8;
                        v180 -= 8;
                        if (!v180)
                        {
                          v178 = v176;
                          break;
                        }
                      }
LABEL_354:
                      if (!v175)
                      {
                        v179 = 0;
LABEL_358:
                        if (v179 != v178)
                        {
                          while (!*(_QWORD *)(*(_QWORD *)v178 + 8))
                          {
                            v184 = v178 + 8;
                            v178 = v176;
                            if (v184 != v176)
                            {
                              v178 = v184;
                              while ((unint64_t)(*(_QWORD *)v178 + 1) <= 1)
                              {
                                v178 += 8;
                                if (v178 == v176)
                                {
                                  v178 = v176;
                                  break;
                                }
                              }
                            }
                            if (v178 == v179)
                            {
                              v178 = v179;
                              if (!v175)
                                goto LABEL_390;
                              goto LABEL_392;
                            }
                          }
                        }
                        if (v175)
LABEL_392:
                          v185 = v175 + 8 * *(unsigned int *)(v175 - 4);
                        else
LABEL_390:
                          v185 = 0;
                        if (v178 != v185)
                        {
                          v186 = *(float *)(a1 + 264) * *(float *)(a1 + 268);
                          do
                          {
                            WebCore::inflatedClientRectForAdjustmentRegionTracking(v197, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v178 + 8) + 64), v186);
                            if (v198)
                            {
                              *(_OWORD *)v199 = *(_OWORD *)v197;
                              v200 = 0;
                              WebCore::Region::unite((WTF *)(a1 + 200), (const WebCore::Region *)v199);
                              v187 = v200;
                              v200 = 0;
                              if (v187)
                              {
                                v188 = (WTF *)*((_QWORD *)v187 + 18);
                                if ((WTF *)((char *)v187 + 160) != v188 && v188 != 0)
                                {
                                  *((_QWORD *)v187 + 18) = 0;
                                  *((_DWORD *)v187 + 38) = 0;
                                  WTF::fastFree(v188, v94);
                                }
                                v190 = *(WTF **)v187;
                                if ((WTF *)((char *)v187 + 16) != *(WTF **)v187 && v190 != 0)
                                {
                                  *(_QWORD *)v187 = 0;
                                  *((_DWORD *)v187 + 2) = 0;
                                  WTF::fastFree(v190, v94);
                                }
                                WTF::fastFree(v187, v94);
                              }
                            }
                            v192 = v176;
                            if (v178 + 8 != v176)
                            {
                              v192 = v178 + 8;
                              while ((unint64_t)(*(_QWORD *)v192 + 1) <= 1)
                              {
                                v192 += 8;
                                if (v192 == v176)
                                {
                                  v192 = v176;
                                  break;
                                }
                              }
                            }
                            v178 = v179;
                            if (v192 != v179)
                            {
                              v178 = v192;
                              if (!*(_QWORD *)(*(_QWORD *)v192 + 8))
                              {
                                while (1)
                                {
                                  v193 = v178 + 8;
                                  v178 = v176;
                                  if (v193 != v176)
                                  {
                                    v178 = v193;
                                    while ((unint64_t)(*(_QWORD *)v178 + 1) <= 1)
                                    {
                                      v178 += 8;
                                      if (v178 == v176)
                                      {
                                        v178 = v176;
                                        break;
                                      }
                                    }
                                  }
                                  if (v178 == v179)
                                    break;
                                  if (*(_QWORD *)(*(_QWORD *)v178 + 8))
                                    goto LABEL_415;
                                }
                                v178 = v179;
                              }
                            }
LABEL_415:
                            ++*(_DWORD *)(a1 + 256);
                          }
                          while (v178 != v185);
                        }
                        goto LABEL_279;
                      }
                      LODWORD(v177) = *(_DWORD *)(v175 - 4);
LABEL_357:
                      v179 = v175 + 8 * v177;
                      goto LABEL_358;
                    }
                  }
                  else
                  {
                    v176 = 0;
                    v177 = 0;
                  }
                  v178 = v176;
                  v176 = v175 + 8 * v177;
                  goto LABEL_354;
                }
                v61 = 0;
                v69 = v196;
LABEL_291:
                v141 = (uint64_t)v201;
                if (v201)
                {
                  v181 = *((unsigned int *)v201 - 1);
                  if ((_DWORD)v181)
                  {
                    v182 = v201;
                    do
                    {
                      v183 = *v182;
                      if (*v182 != (unsigned __int16 *)-1)
                      {
                        *v182 = 0;
                        if (v183)
                        {
                          if (*((_DWORD *)v183 + 6) == 2)
                          {
                            if ((v183[15] & 0x400) == 0)
                              WebCore::Node::removedLastRef((WebCore::Node *)v183, v94);
                          }
                          else
                          {
                            *((_DWORD *)v183 + 6) -= 2;
                          }
                        }
                      }
                      ++v182;
                      --v181;
                    }
                    while (v181);
                  }
                  WTF::fastFree((WTF *)(v141 - 16), v94);
                  v10 = v195;
                  v69 = v196;
                }
                goto LABEL_292;
              }
              v103 = 0;
              v104 = *v101;
LABEL_204:
              if ((~v104[14] & 0x408) != 0
                || !(*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v104 + 368))(v104))
              {
                goto LABEL_215;
              }
              *((_DWORD *)v104 + 6) += 2;
              v105 = *((_QWORD *)v104 + 14);
              if (v105)
              {
                v106 = *(_QWORD *)(v105 + 8);
                if (v106)
                {
                  v108 = *(_DWORD *)(v106 + 24);
                  *(_DWORD *)(v106 + 24) = v108 + 2;
                  if (v108)
                  {
                    v107 = 0;
                    *(_DWORD *)(v106 + 24) = v108;
                  }
                  else
                  {
                    if ((*(_WORD *)(v106 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v106, v94);
                    v107 = 0;
                  }
LABEL_212:
                  if (*((_DWORD *)v104 + 6) == 2)
                  {
                    if ((v104[15] & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v104, v94);
                  }
                  else
                  {
                    *((_DWORD *)v104 + 6) -= 2;
                  }
                  if (!v107)
                  {
LABEL_216:
                    *(_DWORD *)(v106 + 24) += 2;
                    v109 = *v101;
                    v110 = (*v101)[14];
                    if ((~v110 & 0x408) == 0)
                    {
                      if ((*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v109 + 368))(*v101) == 7)
                      {
                        v111 = 4;
                        goto LABEL_225;
                      }
                      v110 = v109[14];
                    }
                    if ((~v110 & 0x408) != 0)
                    {
                      v111 = 1;
                    }
                    else if ((*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v109 + 368))(v109) == 6)
                    {
                      v111 = 2;
                    }
                    else
                    {
                      v111 = 1;
                    }
LABEL_225:
                    if ((*(_QWORD *)(v106 + 72) & 0xFFFFFFFFFFFFLL) != 0)
                    {
                      v112 = *(unsigned __int8 *)((*(_QWORD *)(v106 + 72) & 0xFFFFFFFFFFFFLL) + 0xF8);
                      if ((v112 & v111) != 0)
                      {
                        v113 = v112 & ~v111;
                        *(_BYTE *)((*(_QWORD *)(v106 + 72) & 0xFFFFFFFFFFFFLL) + 0xF8) = v113;
                        if (v113)
                        {
                          v114 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v106 + 40) + 8) + 528);
                          if (v114)
                          {
                            v115 = *(_QWORD *)(v114 + 8);
                            if (v115)
                            {
                              v116 = *(_QWORD *)(v115 + 24);
                              if (v116)
                              {
                                v117 = *(_QWORD *)(v116 + 8);
                                if (v117)
                                {
                                  v118 = (*(_DWORD *)v117)++;
                                  *(_BYTE *)(v117 + 1099) = 1;
                                  if (v118)
                                  {
                                    *(_DWORD *)v117 = v118;
                                  }
                                  else
                                  {
                                    WebCore::Page::~Page(v117);
                                    WTF::fastFree(v119, v120);
                                  }
                                }
                              }
                            }
                          }
                        }
                        if (v111 == 1)
                          WebCore::Node::invalidateStyle(v106, 4u, 2);
                        else
                          WebCore::Element::invalidateStyle((WebCore::Node *)v106);
                        v103 = 1;
                      }
                    }
                    if (*(_DWORD *)(v106 + 24) == 2)
                    {
                      if ((*(_WORD *)(v106 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v106, v94);
                    }
                    else
                    {
                      *(_DWORD *)(v106 + 24) -= 2;
                    }
                    while (1)
                    {
                      if (++v101 == v102)
                        goto LABEL_253;
                      v104 = *v101;
                      if ((unint64_t)*v101 + 1 > 1)
                      {
                        if (v101 != v102)
                          goto LABEL_204;
                        goto LABEL_253;
                      }
                    }
                  }
LABEL_215:
                  v106 = (uint64_t)v104;
                  goto LABEL_216;
                }
              }
              else
              {
                v106 = 0;
              }
              v107 = 1;
              goto LABEL_212;
            }
LABEL_191:
            if (v72[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v72 + 24))(v72);
            else
              --v72[6];
            goto LABEL_193;
          }
        }
      }
      v72 = 0;
      goto LABEL_325;
    }
    v19 = (uint64_t *)(a1 + 248);
    _ZN3WTF9HashTableINS_3RefIN7WebCore30WeakPtrImplWithEventTargetDataENS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEES8_NS_17IdentityExtractorENS_11DefaultHashIS8_EENS_10HashTraitsIS8_EESD_E8removeIfIZNS_11WeakHashSetINS2_7ElementES3_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)(a1 + 248), v199);
    *(_DWORD *)(a1 + 256) = 0;
    v20 = *(_QWORD *)(a1 + 248);
    if (v20)
    {
      v50 = *(_DWORD *)(v20 - 12);
      if (v50 >= 0x7FFFFFFF)
        v51 = -2;
      else
        v51 = 2 * v50;
      *(_DWORD *)(a1 + 260) = v51;
      v21 = *(_DWORD *)(v20 - 12);
    }
    else
    {
      v21 = 0;
      *(_DWORD *)(a1 + 260) = 0;
    }
    v22 = (v21 - 1) | ((v21 - 1) >> 1) | (((v21 - 1) | ((v21 - 1) >> 1)) >> 2);
    v23 = v22 | (v22 >> 4) | ((v22 | (v22 >> 4)) >> 8);
    v24 = (v23 | HIWORD(v23)) + 1;
    if (v24 > 0x400)
    {
      if (v24 > 2 * (unint64_t)v21)
        goto LABEL_76;
    }
    else if (3 * v24 > 4 * (unint64_t)v21)
    {
LABEL_23:
      v25 = (double)v21;
      v26 = (double)v24;
      v27 = 0.604166667;
      goto LABEL_77;
    }
    LODWORD(v24) = 2 * v24;
    if (v24 <= 0x400)
      goto LABEL_23;
LABEL_76:
    v25 = (double)v21;
    v26 = (double)v24;
    v27 = 0.416666667;
LABEL_77:
    if (v26 * v27 <= v25)
      LODWORD(v24) = 2 * v24;
    if (v24 <= 8)
      v52 = 8;
    else
      v52 = v24;
    v53 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(8 * v52 + 16));
    v201 = (unsigned __int16 **)(v53 + 4);
    v53[2] = v52 - 1;
    v53[3] = v52;
    *v53 = 0;
    *((_DWORD *)v201 - 3) = 0;
    v55 = *v19;
    if (*v19)
    {
      v57 = *(unsigned int *)(v55 - 4);
      v56 = v55 + 8 * v57;
      if (*(_DWORD *)(v55 - 12))
      {
        if (!(_DWORD)v57)
        {
          v58 = *v19;
          goto LABEL_88;
        }
        v60 = 8 * v57;
        v58 = *v19;
        while ((unint64_t)(*(_QWORD *)v58 + 1) <= 1)
        {
          v58 += 8;
          v60 -= 8;
          if (!v60)
          {
            v58 = v56;
            break;
          }
        }
LABEL_85:
        if (!v55)
        {
          v59 = 0;
LABEL_89:
          if (v59 != v58)
          {
            while (!*(_QWORD *)(*(_QWORD *)v58 + 8))
            {
              v62 = v58 + 8;
              v58 = v56;
              if (v62 != v56)
              {
                v58 = v62;
                while ((unint64_t)(*(_QWORD *)v58 + 1) <= 1)
                {
                  v58 += 8;
                  if (v58 == v56)
                  {
                    v58 = v56;
                    break;
                  }
                }
              }
              if (v58 == v59)
              {
                v58 = v59;
                if (!v55)
                  goto LABEL_108;
                goto LABEL_110;
              }
            }
          }
          if (v55)
LABEL_110:
            v63 = v55 + 8 * *(unsigned int *)(v55 - 4);
          else
LABEL_108:
            v63 = 0;
          if (v58 != v63)
          {
            do
            {
              v64 = *(WebCore::Node **)(*(_QWORD *)v58 + 8);
              *((_DWORD *)v64 + 6) += 2;
              v197[0] = v64;
              WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::add((uint64_t *)&v201, (uint64_t *)v197, (uint64_t)v199);
              v65 = v197[0];
              v197[0] = 0;
              if (v65)
              {
                if (*((_DWORD *)v65 + 6) == 2)
                {
                  if ((*((_WORD *)v65 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v65, v54);
                }
                else
                {
                  *((_DWORD *)v65 + 6) -= 2;
                }
              }
              v66 = v56;
              if (v58 + 8 != v56)
              {
                v66 = v58 + 8;
                while ((unint64_t)(*(_QWORD *)v66 + 1) <= 1)
                {
                  v66 += 8;
                  if (v66 == v56)
                  {
                    v66 = v56;
                    break;
                  }
                }
              }
              v58 = v59;
              if (v66 != v59)
              {
                v58 = v66;
                if (!*(_QWORD *)(*(_QWORD *)v66 + 8))
                {
                  while (1)
                  {
                    v67 = v58 + 8;
                    v58 = v56;
                    if (v67 != v56)
                    {
                      v58 = v67;
                      while ((unint64_t)(*(_QWORD *)v58 + 1) <= 1)
                      {
                        v58 += 8;
                        if (v58 == v56)
                        {
                          v58 = v56;
                          break;
                        }
                      }
                    }
                    if (v58 == v59)
                      break;
                    if (*(_QWORD *)(*(_QWORD *)v58 + 8))
                      goto LABEL_122;
                  }
                  v58 = v59;
                }
              }
LABEL_122:
              ++*(_DWORD *)(a1 + 256);
            }
            while (v58 != v63);
            v55 = *v19;
          }
          if (v55)
          {
            *(_QWORD *)(a1 + 248) = 0;
            WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(v55, v54);
            v68 = *(_QWORD *)(a1 + 248);
            *(_DWORD *)(a1 + 256) = 0;
            if (v68)
            {
              LODWORD(v68) = *(_DWORD *)(v68 - 12);
              if (v68 > 0x7FFFFFFE)
                LODWORD(v68) = 0x7FFFFFFF;
            }
          }
          else
          {
            LODWORD(v68) = 0;
            *(_DWORD *)(a1 + 256) = 0;
          }
          *(_DWORD *)(a1 + 260) = 2 * v68;
          goto LABEL_138;
        }
        LODWORD(v57) = *(_DWORD *)(v55 - 4);
LABEL_88:
        v59 = v55 + 8 * v57;
        goto LABEL_89;
      }
    }
    else
    {
      v56 = 0;
      v57 = 0;
    }
    v58 = v56;
    v56 = v55 + 8 * v57;
    goto LABEL_85;
  }
  v61 = 0;
LABEL_298:
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::Page::~Page(v3);
    WTF::fastFree(v145, v146);
  }
  else
  {
    --*(_DWORD *)v3;
  }
  return v61;
}

uint64_t WebCore::ElementTargetingController::numberOfVisibilityAdjustmentRects(WebCore::ElementTargetingController *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  WebCore::Node *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t **v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  float *v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  unint64_t v34;
  float v35;
  float v36;
  uint64_t v37;
  unint64_t v38;
  WebCore::Node *v39;
  unint64_t v40;
  BOOL v41;
  WTF *v42;
  WTF *v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  WTF *v47;
  WTF *v48;
  WTF *v49;
  WTF *v50;
  WTF *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v55;
  int v56;
  WTF *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  WTF *v62;
  void *v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  BOOL v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  WTF *v82;
  int v83;
  __n128 *v84;
  unsigned int v85;
  uint64_t v86;
  WebCore::Node *v87;
  unint64_t v88;
  WTF *v89;
  WTF *v90;
  uint64_t v91;
  __n128 v92;
  WTF *v93;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  ++*(_DWORD *)v2;
  v3 = *(_QWORD *)(v2 + 160);
  if (v3)
    v4 = *(_BYTE *)(v3 + 144) == 0;
  else
    v4 = 0;
  if (v4)
  {
    v6 = (unsigned int *)(v3 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    v8 = *(_QWORD *)(v3 + 296);
    if (!v8)
    {
      v70 = 0;
      do
      {
LABEL_90:
        v52 = __ldaxr(v6);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, v6));
      if (!v53)
      {
        atomic_store(1u, v6);
        v71 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v71 = off_1E31FE290;
        v71[1] = v6;
        v92.n128_u64[0] = (unint64_t)v71;
        WTF::ensureOnMainThread();
        v72 = v92.n128_u64[0];
        v92.n128_u64[0] = 0;
        if (v72)
          (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
      }
      goto LABEL_92;
    }
    *(_DWORD *)(v8 + 24) += 2;
    WebCore::Document::updateLayout(v8, 2u, 0);
    if (!*((_BYTE *)this + 277)
      || (*((_BYTE *)this + 277) = 0,
          WebCore::ElementTargetingController::mainDocument(&v87, *((_QWORD *)this + 1)),
          (v10 = v87) == 0))
    {
LABEL_19:
      v90 = 0;
      v91 = 0;
      v14 = (uint64_t **)((char *)this + 248);
      _ZN3WTF9HashTableINS_3RefIN7WebCore30WeakPtrImplWithEventTargetDataENS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEES8_NS_17IdentityExtractorENS_11DefaultHashIS8_EENS_10HashTraitsIS8_EESD_E8removeIfIZNS_11WeakHashSetINS2_7ElementES3_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)this + 31, &v92);
      *((_DWORD *)this + 64) = 0;
      v16 = *((_QWORD *)this + 31);
      if (v16)
      {
        v55 = *(_DWORD *)(v16 - 12);
        if (v55 >= 0x7FFFFFFF)
          v56 = -2;
        else
          v56 = 2 * v55;
        *((_DWORD *)this + 65) = v56;
        v17 = *(unsigned int *)(v16 - 12);
        if ((_DWORD)v17)
        {
          if (v17 >> 28)
          {
LABEL_201:
            __break(0xC471u);
            JUMPOUT(0x195F9B8BCLL);
          }
          v57 = (WTF *)WTF::fastMalloc((WTF *)(16 * v17));
          LODWORD(v91) = v17;
          v90 = v57;
          v58 = *v14;
          if (!*v14 || !*((_DWORD *)v58 - 3))
            goto LABEL_106;
          v59 = *((unsigned int *)v58 - 1);
          if ((_DWORD)v59)
          {
            v60 = 8 * v59;
            v61 = *v14;
            while ((unint64_t)(*v61 + 1) <= 1)
            {
              ++v61;
              v60 -= 8;
              if (!v60)
                goto LABEL_106;
            }
          }
          else
          {
            v61 = *v14;
          }
          v73 = &v58[v59];
          if (v61 != v73)
          {
            if (*(_QWORD *)(*v61 + 8))
            {
LABEL_166:
              LODWORD(v17) = 0;
              v74 = *v61;
              while (1)
              {
                v75 = *(_QWORD *)(v74 + 8);
                if ((*(_BYTE *)(v75 + 22) & 8) == 0)
                  goto LABEL_179;
                v76 = *(_QWORD *)(v75 + 64) & 0xFFFFFFFFFFFFLL;
                if (!v76)
                {
                  LODWORD(v17) = v17 + 1;
                  goto LABEL_179;
                }
                if ((*(_BYTE *)((*(_QWORD *)(v75 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                  goto LABEL_201;
                ++*(_DWORD *)((*(_QWORD *)(v75 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
                v77 = WebCore::RenderObject::absoluteBoundingBoxRect((WebCore::RenderObject *)v76, 1, 0);
                v92.n128_f32[0] = (float)(int)v77;
                v92.n128_f32[1] = (float)SHIDWORD(v77);
                v92.n128_f32[2] = (float)v78;
                v92.n128_f32[3] = (float)v79;
                v80 = v76;
                if ((*(_BYTE *)(v76 + 45) & 2) != 0)
                {
                  v80 = *(_QWORD *)(v76 + 32);
                  if (v80)
                    v80 = *(_QWORD *)(v80 + 8);
                }
                WebCore::Document::convertAbsoluteToClientRect(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v76 + 24) + 8) + 40) + 8), (float32x4_t *)&v92, (const WebCore::RenderStyle *)(v80 + 80));
                v15.n128_u32[0] = v92.n128_u32[3];
                if (v92.n128_f32[2] <= 0.0 || v92.n128_f32[3] <= 0.0)
                {
                  LODWORD(v17) = v17 + 1;
                }
                else
                {
                  v81 = HIDWORD(v91);
                  if (HIDWORD(v91) == (_DWORD)v91)
                  {
                    v84 = (__n128 *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v90, HIDWORD(v91) + 1, (unint64_t)&v92);
                    v81 = HIDWORD(v91);
                    v82 = v90;
                    v15 = *v84;
                  }
                  else
                  {
                    v82 = v90;
                    v15 = v92;
                  }
                  *((__n128 *)v82 + v81) = v15;
                  ++HIDWORD(v91);
                }
                v83 = *(_DWORD *)(v76 + 16);
                if (!v83)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195F9B8DCLL);
                }
                *(_DWORD *)(v76 + 16) = v83 - 1;
                do
                {
LABEL_179:
                  if (++v61 == v73)
                    goto LABEL_191;
                  v74 = *v61;
                }
                while ((unint64_t)(*v61 + 1) <= 1);
LABEL_188:
                if (v61 == v73)
                  goto LABEL_191;
                if (!*(_QWORD *)(v74 + 8))
                  break;
                ++*((_DWORD *)this + 64);
              }
              while (++v61 != v73)
              {
                v74 = *v61;
                if ((unint64_t)(*v61 + 1) > 1)
                  goto LABEL_188;
              }
LABEL_191:
              ++*((_DWORD *)this + 64);
            }
            else
            {
              while (++v61 != v73)
              {
                while ((unint64_t)(*v61 + 1) <= 1)
                {
                  LODWORD(v17) = 0;
                  if (++v61 == v73)
                    goto LABEL_21;
                }
                if (v61 == v73)
                  break;
                if (*(_QWORD *)(*v61 + 8))
                  goto LABEL_166;
              }
              LODWORD(v17) = 0;
            }
          }
          else
          {
LABEL_106:
            LODWORD(v17) = 0;
          }
        }
      }
      else
      {
        LODWORD(v17) = 0;
        *((_DWORD *)this + 65) = 0;
      }
LABEL_21:
      v18 = 126 - 2 * __clz(HIDWORD(v91));
      if (HIDWORD(v91))
        v19 = v18;
      else
        v19 = 0;
      std::__introsort<std::_ClassicAlgPolicy,WebCore::ElementTargetingController::numberOfVisibilityAdjustmentRects(void)::$_0 &,WebCore::FloatRect *,false>((__n128 *)v90, (__n128 *)v90 + HIDWORD(v91), v19, 1, v15);
      v92 = 0uLL;
      v93 = 0;
      if (HIDWORD(v91))
      {
        v85 = v17;
        v86 = v2;
        v21 = 0;
        v22 = (float *)v90;
        v23 = (float *)((char *)v90 + 16 * HIDWORD(v91));
        do
        {
          v24 = floorf(*v22);
          v25 = 2147500000.0;
          if (v24 < 2147500000.0)
          {
            v25 = -2147500000.0;
            if (v24 > -2147500000.0)
              v25 = (float)(int)v24;
          }
          v26 = v22[1];
          v27 = floorf(v26);
          v28 = 2147500000.0;
          if (v27 < 2147500000.0)
          {
            v28 = -2147500000.0;
            if (v27 > -2147500000.0)
              v28 = (float)(int)v27;
          }
          v29 = ceilf(*v22 + v22[2]);
          v30 = 2147500000.0;
          if (v29 < 2147500000.0)
          {
            v30 = -2147500000.0;
            if (v29 > -2147500000.0)
              v30 = (float)(int)v29;
          }
          v31 = ceilf(v26 + v22[3]);
          v32 = 2147500000.0;
          if (v31 < 2147500000.0)
          {
            v32 = -2147500000.0;
            if (v31 > -2147500000.0)
              v32 = (float)(int)v31;
          }
          v33 = (int)v25;
          if (v25 <= -2147500000.0)
            v33 = 0x80000000;
          if (v25 >= 2147500000.0)
            v33 = 0x7FFFFFFFLL;
          v34 = (unint64_t)(int)v28 << 32;
          if (v28 <= -2147500000.0)
            v34 = 0x8000000000000000;
          if (v28 >= 2147500000.0)
            v34 = 0x7FFFFFFF00000000;
          v35 = v30 - v25;
          v36 = v32 - v28;
          v37 = (int)v35;
          if (v35 <= -2147500000.0)
            v37 = 0x80000000;
          if (v35 >= 2147500000.0)
            v37 = 0x7FFFFFFFLL;
          if (v36 >= 2147500000.0)
          {
            v38 = 0x7FFFFFFF00000000;
          }
          else if (v36 <= -2147500000.0)
          {
            v38 = 0x8000000000000000;
          }
          else
          {
            v38 = (unint64_t)(int)v36 << 32;
          }
          v39 = (WebCore::Node *)(v34 | v33);
          v40 = v38 | v37;
          v87 = (WebCore::Node *)(v34 | v33);
          v88 = v38 | v37;
          v89 = 0;
          v41 = WebCore::Region::contains((WebCore::Region *)&v92, (const WebCore::Region *)&v87);
          v42 = v89;
          v89 = 0;
          if (v42)
          {
            v43 = (WTF *)*((_QWORD *)v42 + 18);
            if ((WTF *)((char *)v42 + 160) != v43 && v43)
            {
              *((_QWORD *)v42 + 18) = 0;
              *((_DWORD *)v42 + 38) = 0;
              WTF::fastFree(v43, v20);
            }
            v44 = *(WTF **)v42;
            if ((WTF *)((char *)v42 + 16) != *(WTF **)v42 && v44)
            {
              *(_QWORD *)v42 = 0;
              *((_DWORD *)v42 + 2) = 0;
              WTF::fastFree(v44, v20);
            }
            WTF::fastFree(v42, v20);
          }
          if (!v41)
          {
            v87 = v39;
            v88 = v40;
            v89 = 0;
            WebCore::Region::unite((WTF *)&v92, (const WebCore::Region *)&v87);
            v45 = v89;
            v89 = 0;
            if (v45)
            {
              v46 = (WTF *)*((_QWORD *)v45 + 18);
              if ((WTF *)((char *)v45 + 160) != v46 && v46)
              {
                *((_QWORD *)v45 + 18) = 0;
                *((_DWORD *)v45 + 38) = 0;
                WTF::fastFree(v46, v20);
              }
              v47 = *(WTF **)v45;
              if ((WTF *)((char *)v45 + 16) != *(WTF **)v45 && v47)
              {
                *(_QWORD *)v45 = 0;
                *((_DWORD *)v45 + 2) = 0;
                WTF::fastFree(v47, v20);
              }
              WTF::fastFree(v45, v20);
            }
            ++v21;
          }
          v22 += 4;
        }
        while (v22 != v23);
        v48 = v93;
        v70 = v21 + v85;
        v93 = 0;
        if (v48)
        {
          v49 = (WTF *)*((_QWORD *)v48 + 18);
          v2 = v86;
          if ((WTF *)((char *)v48 + 160) != v49 && v49)
          {
            *((_QWORD *)v48 + 18) = 0;
            *((_DWORD *)v48 + 38) = 0;
            WTF::fastFree(v49, v20);
          }
          v50 = *(WTF **)v48;
          if ((WTF *)((char *)v48 + 16) != *(WTF **)v48 && v50)
          {
            *(_QWORD *)v48 = 0;
            *((_DWORD *)v48 + 2) = 0;
            WTF::fastFree(v50, v20);
          }
          WTF::fastFree(v48, v20);
        }
        else
        {
          v2 = v86;
        }
      }
      else
      {
        v70 = v17;
      }
      v51 = v90;
      if (v90)
      {
        v90 = 0;
        LODWORD(v91) = 0;
        WTF::fastFree(v51, v20);
      }
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v8, v20);
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
      }
      goto LABEL_90;
    }
    v11 = *((_QWORD *)v87 + 159);
    if (!v11)
    {
LABEL_17:
      if (*((_DWORD *)v10 + 6) == 2)
      {
        if ((*((_WORD *)v10 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v10, v9);
      }
      else
      {
        *((_DWORD *)v10 + 6) -= 2;
      }
      goto LABEL_19;
    }
    v12 = *(_DWORD *)(v11 + 24);
    *(_DWORD *)(v11 + 24) = v12 + 2;
    v13 = *(_QWORD *)(v11 + 80);
    if (v13)
    {
      while ((*(_WORD *)(v13 + 28) & 8) == 0)
      {
        v13 = *(_QWORD *)(v13 + 56);
        if (!v13)
          goto LABEL_15;
      }
      do
      {
LABEL_115:
        *(_DWORD *)(v13 + 24) += 2;
        v90 = (WTF *)v13;
        if ((*(_QWORD *)(v13 + 72) & 0xFFFFFFFFFFFFLL) != 0)
        {
          v64 = *(_BYTE *)((*(_QWORD *)(v13 + 72) & 0xFFFFFFFFFFFFLL) + 0xF8);
          if (v64)
          {
            if ((*(_BYTE *)((*(_QWORD *)(v13 + 72) & 0xFFFFFFFFFFFFLL) + 0xF8) & 1) != 0)
              WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>((uint64_t)&v92, (uint64_t)this + 248, (uint64_t *)&v90);
            if ((v64 & 4) != 0 && (*(_QWORD *)(v13 + 72) & 0xFFFFFFFFFFFFLL) != 0)
            {
              v65 = *(_QWORD *)((*(_QWORD *)(v13 + 72) & 0xFFFFFFFFFFFFLL) + 0xB0);
              if (v65)
              {
                *(_DWORD *)(v65 + 24) += 2;
                WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::PseudoElement>((uint64_t)&v92, (uint64_t)this + 248, v65);
                if (*(_DWORD *)(v65 + 24) == 2)
                {
                  if ((*(_WORD *)(v65 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v65, v9);
                }
                else
                {
                  *(_DWORD *)(v65 + 24) -= 2;
                }
              }
            }
            if ((v64 & 2) != 0 && (*(_QWORD *)(v13 + 72) & 0xFFFFFFFFFFFFLL) != 0)
            {
              v66 = *(_QWORD *)((*(_QWORD *)(v13 + 72) & 0xFFFFFFFFFFFFLL) + 0xA8);
              if (v66)
              {
                *(_DWORD *)(v66 + 24) += 2;
                WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::PseudoElement>((uint64_t)&v92, (uint64_t)this + 248, v66);
                if (*(_DWORD *)(v66 + 24) == 2)
                {
                  if ((*(_WORD *)(v66 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v66, v9);
                }
                else
                {
                  *(_DWORD *)(v66 + 24) -= 2;
                }
              }
            }
          }
        }
        v90 = 0;
        if (*(_DWORD *)(v13 + 24) == 2)
        {
          if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v13, v9);
        }
        else
        {
          *(_DWORD *)(v13 + 24) -= 2;
        }
        v67 = *(_QWORD *)(v13 + 80);
        if (!v67)
        {
          if (v13 == v11)
            goto LABEL_157;
          while (1)
          {
            v67 = *(_QWORD *)(v13 + 56);
            if (v67)
              break;
            v13 = *(_QWORD *)(v13 + 32);
            if (v13)
              v69 = v13 == v11;
            else
              v69 = 1;
            if (v69)
              goto LABEL_157;
          }
        }
        v13 = v67;
      }
      while ((*(_WORD *)(v67 + 28) & 8) != 0);
      while (v67 != v11)
      {
        while (1)
        {
          v13 = *(_QWORD *)(v67 + 56);
          if (v13)
            break;
          v67 = *(_QWORD *)(v67 + 32);
          if (v67)
            v68 = v67 == v11;
          else
            v68 = 1;
          if (v68)
            goto LABEL_157;
        }
        v67 = *(_QWORD *)(v67 + 56);
        if ((*(_WORD *)(v13 + 28) & 8) != 0)
          goto LABEL_115;
      }
LABEL_157:
      v12 = *(_DWORD *)(v11 + 24) - 2;
      if (*(_DWORD *)(v11 + 24) != 2)
        goto LABEL_16;
    }
    else
    {
LABEL_15:
      if (v12)
      {
LABEL_16:
        *(_DWORD *)(v11 + 24) = v12;
        goto LABEL_17;
      }
    }
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v9);
    goto LABEL_17;
  }
  v70 = 0;
LABEL_92:
  if (*(_DWORD *)v2 == 1)
  {
    WebCore::Page::~Page(v2);
    WTF::fastFree(v62, v63);
  }
  else
  {
    --*(_DWORD *)v2;
  }
  return v70;
}

uint64_t WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::PseudoElement>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t result;
  void *v18;
  WTF *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  char v34;

  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  if (v7 > v6)
  {
    _ZN3WTF9HashTableINS_3RefIN7WebCore30WeakPtrImplWithEventTargetDataENS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEES8_NS_17IdentityExtractorENS_11DefaultHashIS8_EENS_10HashTraitsIS8_EESD_E8removeIfIZNS_11WeakHashSetINS2_7ElementES3_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)a2, &v34);
    v24 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    if (*(_QWORD *)a2)
    {
      v24 = *(_DWORD *)(*(_QWORD *)a2 - 12);
      if (v24 > 0x7FFFFFFE)
        v24 = 0x7FFFFFFF;
    }
    *(_DWORD *)(a2 + 12) = 2 * v24;
  }
  if ((*(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v8 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = 0;
    *(_QWORD *)(v8 + 8) = a3;
    *(_BYTE *)(v8 + 32) = 0;
    v10 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = v10 & 0xFFFF000000000000 | v8;
    v11 = v10 & 0xFFFFFFFFFFFFLL;
    if ((v10 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v12 = __ldaxr((unsigned int *)v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, (unsigned int *)v11));
      if (!v13)
      {
        atomic_store(1u, (unsigned int *)v11);
        v27 = *(unsigned int *)(v11 + 28);
        if ((_DWORD)v27)
        {
          v32 = v11;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v11 + 16), (WTF::StringImpl *)(*(_QWORD *)(v11 + 16) + 32 * v27));
          v11 = v32;
        }
        v28 = *(WTF **)(v11 + 16);
        if (v28)
        {
          *(_QWORD *)(v11 + 16) = 0;
          *(_DWORD *)(v11 + 24) = 0;
          v31 = v11;
          WTF::fastFree(v28, v9);
          v11 = v31;
        }
        WTF::fastFree((WTF *)v11, v9);
      }
    }
  }
  v14 = *(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFLL;
  do
    v15 = __ldaxr((unsigned int *)v14);
  while (__stlxr(v15 + 1, (unsigned int *)v14));
  do
    v16 = __ldaxr((unsigned int *)v14);
  while (__stlxr(v16 + 1, (unsigned int *)v14));
  v33 = (WTF *)v14;
  result = (uint64_t)WTF::HashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::add((uint64_t *)a2, (uint64_t *)&v33, a1);
  v19 = v33;
  v33 = 0;
  if (!v19)
    goto LABEL_12;
  do
  {
    v20 = __ldaxr((unsigned int *)v19);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, (unsigned int *)v19));
  if (v21)
  {
LABEL_12:
    if (!v14)
      return result;
    goto LABEL_13;
  }
  atomic_store(1u, (unsigned int *)v19);
  v29 = *((unsigned int *)v19 + 7);
  if ((_DWORD)v29)
    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v19 + 2), (WTF::StringImpl *)(*((_QWORD *)v19 + 2) + 32 * v29));
  v30 = (WTF *)*((_QWORD *)v19 + 2);
  if (v30)
  {
    *((_QWORD *)v19 + 2) = 0;
    *((_DWORD *)v19 + 6) = 0;
    WTF::fastFree(v30, v18);
  }
  result = WTF::fastFree(v19, v18);
  if (v14)
  {
    do
    {
LABEL_13:
      v22 = __ldaxr((unsigned int *)v14);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, (unsigned int *)v14));
    if (!v23)
    {
      atomic_store(1u, (unsigned int *)v14);
      v25 = *(unsigned int *)(v14 + 28);
      if ((_DWORD)v25)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v14 + 16), (WTF::StringImpl *)(*(_QWORD *)(v14 + 16) + 32 * v25));
      v26 = *(WTF **)(v14 + 16);
      if (v26)
      {
        *(_QWORD *)(v14 + 16) = 0;
        *(_DWORD *)(v14 + 24) = 0;
        WTF::fastFree(v26, v18);
      }
      return WTF::fastFree((WTF *)v14, v18);
    }
  }
  return result;
}

unsigned int *WebCore::ElementTargetingController::snapshotIgnoringVisibilityAdjustment@<X0>(unsigned int *result@<X0>, void *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  char v24;
  char v25;
  WebCore::RenderObject *v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  CFTypeRef v30;
  uint64_t *v31;
  WebCore::LocalFrameView *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  int v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  WTF *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  BOOL v80;
  char v81;
  char v82;
  uint64_t v83;
  CFTypeRef cf;
  int32x4_t v85;
  WebCore::LocalFrameView *v86;
  uint64_t v87;
  char v88;
  char v89;
  uint64_t *v90;
  uint64_t v91[2];

  v5 = *((_QWORD *)result + 1);
  if (!v5 || (v6 = *(_QWORD *)(v5 + 8)) == 0)
  {
    *a4 = 0;
    return result;
  }
  ++*(_DWORD *)v6;
  v7 = *(_QWORD *)(v6 + 160);
  if (v7)
    v8 = *(_BYTE *)(v7 + 144) == 0;
  else
    v8 = 0;
  if (v8)
  {
    v9 = (unsigned int *)(v7 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    {
      if (!WebCore::elementIdentifiersMap(void)::map || !*(_DWORD *)(WebCore::elementIdentifiersMap(void)::map - 12))
        goto LABEL_17;
      v11 = *(unsigned int *)(WebCore::elementIdentifiersMap(void)::map - 4);
      if ((_DWORD)v11)
      {
        v12 = 16 * v11;
        v13 = (_QWORD *)WebCore::elementIdentifiersMap(void)::map;
        while ((unint64_t)(*v13 + 1) <= 1)
        {
          v13 += 2;
          v12 -= 16;
          if (!v12)
            goto LABEL_17;
        }
      }
      else
      {
        v13 = (_QWORD *)WebCore::elementIdentifiersMap(void)::map;
      }
      v16 = WebCore::elementIdentifiersMap(void)::map + 16 * v11;
LABEL_24:
      if (v13 == (_QWORD *)v16)
        goto LABEL_17;
      if ((void *)v13[1] != a2)
      {
        while (1)
        {
          v13 += 2;
          if (v13 == (_QWORD *)v16)
            goto LABEL_17;
          if ((unint64_t)(*v13 + 1) > 1)
            goto LABEL_24;
        }
      }
      v19 = *(_QWORD *)(*v13 + 8);
      if (v19)
      {
        v20 = *(_DWORD *)(v19 + 24);
        *(_DWORD *)(v19 + 24) = v20 + 2;
        v21 = *(_QWORD *)(v7 + 288);
        if (!v21)
        {
          *a4 = 0;
          goto LABEL_143;
        }
        ++*(_DWORD *)(v21 + 8);
        result = *(unsigned int **)(*(_QWORD *)(v19 + 40) + 8);
        if (*((_QWORD *)result + 53) != a3[1] || *((_QWORD *)result + 52) != *a3 || *((_QWORD *)result + 54) != a3[2])
        {
          *a4 = 0;
LABEL_141:
          if (*(_DWORD *)(v21 + 8) == 1)
            result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          else
            --*(_DWORD *)(v21 + 8);
LABEL_143:
          if (*(_DWORD *)(v19 + 24) == 2)
          {
            if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
              result = WebCore::Node::removedLastRef((WebCore::Node *)v19, a2);
          }
          else
          {
            *(_DWORD *)(v19 + 24) -= 2;
          }
          goto LABEL_18;
        }
        *(_DWORD *)(v19 + 24) = v20 + 4;
        if ((*(_QWORD *)(v19 + 72) & 0xFFFFFFFFFFFFLL) != 0)
        {
          v24 = *(_BYTE *)((*(_QWORD *)(v19 + 72) & 0xFFFFFFFFFFFFLL) + 0xF8);
          if (v24)
          {
            *(_BYTE *)((*(_QWORD *)(v19 + 72) & 0xFFFFFFFFFFFFLL) + 0xF8) = 0;
            WebCore::Node::invalidateStyle(v19, 4u, 2);
            v25 = 0;
            result = *(unsigned int **)(*(_QWORD *)(v19 + 40) + 8);
            goto LABEL_46;
          }
        }
        else
        {
          v24 = 0;
        }
        v25 = 1;
LABEL_46:
        result = (unsigned int *)WebCore::Document::updateLayout((uint64_t)result, 2u, 0);
        v26 = (WebCore::RenderObject *)(*(_QWORD *)(v19 + 64) & 0xFFFFFFFFFFFFLL);
        if (!v26)
        {
          *a4 = 0;
LABEL_129:
          if ((v25 & 1) == 0)
          {
            v57 = *(_QWORD *)(v19 + 72) & 0xFFFFFFFFFFFFLL;
            if (!v57)
            {
              WebCore::Node::materializeRareData((WebCore::Node *)v19);
              v57 = *(_QWORD *)(v19 + 72) & 0xFFFFFFFFFFFFLL;
            }
            *(_BYTE *)(v57 + 248) = v24;
            v58 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 40) + 8) + 528);
            if (v58)
            {
              v59 = *(_QWORD *)(v58 + 8);
              if (v59)
              {
                v60 = *(_QWORD *)(v59 + 24);
                if (v60)
                {
                  v61 = *(_QWORD *)(v60 + 8);
                  if (v61)
                  {
                    v62 = (*(_DWORD *)v61)++;
                    *(_BYTE *)(v61 + 1099) = 1;
                    if (v62)
                    {
                      *(_DWORD *)v61 = v62;
                    }
                    else
                    {
                      WebCore::Page::~Page(v61);
                      WTF::fastFree(v65, v66);
                    }
                  }
                }
              }
            }
            result = (unsigned int *)WebCore::Node::invalidateStyle(v19, 4u, 2);
          }
          if (*(_DWORD *)(v19 + 24) == 2)
          {
            if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
              result = WebCore::Node::removedLastRef((WebCore::Node *)v19, a2);
          }
          else
          {
            *(_DWORD *)(v19 + 24) -= 2;
          }
          goto LABEL_141;
        }
        if ((*(_BYTE *)((*(_QWORD *)(v19 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195F9C2CCLL);
        }
        ++*(_DWORD *)((*(_QWORD *)(v19 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
        v27 = *(_QWORD *)(v21 + 1024);
        if ((v27 & 0x8000000000000) != 0)
        {
          v70 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFLL);
          do
            v71 = __ldaxr(v70);
          while (__stlxr(v71 + 1, v70));
        }
        v86 = (WebCore::LocalFrameView *)0x1104000000000000;
        WebCore::LocalFrameView::setBaseBackgroundColor((WebCore::LocalFrameView *)v21, (const WebCore::Color *)&v86);
        if (((unint64_t)v86 & 0x8000000000000) != 0)
        {
          v74 = (unsigned int *)((unint64_t)v86 & 0xFFFFFFFFFFFFLL);
          do
          {
            v75 = __ldaxr(v74);
            v76 = v75 - 1;
          }
          while (__stlxr(v76, v74));
          if (!v76)
          {
            atomic_store(1u, v74);
            WTF::fastFree((WTF *)v74, v28);
          }
        }
        WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)(v21 + 600), v19);
        ++*(_DWORD *)(v21 + 8);
        if ((v27 & 0x8000000000000) != 0)
        {
          v72 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFLL);
          do
            v73 = __ldaxr(v72);
          while (__stlxr(v73 + 1, v72));
          v86 = (WebCore::LocalFrameView *)v21;
        }
        else
        {
          v86 = (WebCore::LocalFrameView *)v21;
          v87 = 0;
          if (!v27)
          {
LABEL_53:
            v88 = 1;
            v85.i64[0] = WebCore::RenderObject::absoluteBoundingBoxRect(v26, 1, 0);
            v85.i64[1] = (uint64_t)a2;
            if ((int)a2 < 1 || (uint64_t)a2 <= 0)
            {
              *a4 = 0;
              goto LABEL_120;
            }
            LOWORD(v83) = 0;
            BYTE2(v83) = 1;
            v29 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
            if (v29 != -1)
            {
              v91[0] = (uint64_t)&v89;
              v90 = v91;
              std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v90, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
            }
            cf = (CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
            if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
              CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
            v91[0] = 0;
            v91[1] = 0;
            WebCore::snapshotFrameRectWithClip((uint64_t *)v7, &v85, (uint64_t)v91, (unsigned __int16 *)&v83, (uint64_t *)&v90);
            v30 = cf;
            cf = 0;
            if (v30)
              CFRelease(v30);
            v31 = v90;
            v90 = 0;
            if (v31)
              (*(void (**)(uint64_t *__return_ptr, uint64_t *))(*v31 + 136))(&v83, v31);
            else
              v83 = 0;
            v81 = v25;
            v82 = v24;
            WebCore::BitmapImage::create(&v83, v91);
            *a4 = v91[0];
            v91[0] = 0;
            v33 = v83;
            v83 = 0;
            if (!v33)
            {
LABEL_85:
              if (!v31)
                goto LABEL_102;
              v41 = v31[1];
              if (__ldaxr((unsigned __int8 *)v41))
              {
                __clrex();
              }
              else if (!__stxr(1u, (unsigned __int8 *)v41))
              {
                goto LABEL_90;
              }
              MEMORY[0x19AEA534C](v41);
LABEL_90:
              v43 = *(_QWORD *)(v41 + 8);
              v44 = v43 - 1;
              *(_QWORD *)(v41 + 8) = v43 - 1;
              if (v43 == 1)
              {
                v68 = *(_QWORD *)(v41 + 16);
                v45 = *(_QWORD *)(v41 + 24);
                *(_QWORD *)(v41 + 24) = 0;
                v46 = v68 != 0;
              }
              else
              {
                v45 = 0;
                v46 = 1;
              }
              v47 = __ldxr((unsigned __int8 *)v41);
              if (v47 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v41))
                {
LABEL_97:
                  if (!v44)
                  {
                    if (v45)
                      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
                    if (!v46)
                      WTF::fastFree((WTF *)v41, a2);
                  }
LABEL_102:
                  v48 = (uint64_t)v90;
                  v90 = 0;
                  if (!v48)
                  {
LABEL_119:
                    v25 = v81;
                    v24 = v82;
LABEL_120:
                    if (v88)
                    {
                      WebCore::LocalFrameView::setBaseBackgroundColor(v86, (const WebCore::Color *)&v87);
                      WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)v86 + 75, 0);
                    }
                    if ((v87 & 0x8000000000000) != 0)
                    {
                      v77 = (unsigned int *)(v87 & 0xFFFFFFFFFFFFLL);
                      do
                      {
                        v78 = __ldaxr(v77);
                        v79 = v78 - 1;
                      }
                      while (__stlxr(v79, v77));
                      if (!v79)
                      {
                        atomic_store(1u, v77);
                        WTF::fastFree((WTF *)v77, a2);
                      }
                    }
                    result = (unsigned int *)v86;
                    v86 = 0;
                    if (result)
                    {
                      if (result[2] == 1)
                      {
                        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
                        if ((v27 & 0x8000000000000) == 0)
                          goto LABEL_127;
                        goto LABEL_149;
                      }
                      --result[2];
                    }
                    if ((v27 & 0x8000000000000) == 0)
                    {
LABEL_127:
                      v56 = *((_DWORD *)v26 + 4);
                      if (!v56)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x195F9C2ECLL);
                      }
                      *((_DWORD *)v26 + 4) = v56 - 1;
                      goto LABEL_129;
                    }
LABEL_149:
                    result = (unsigned int *)(v27 & 0xFFFFFFFFFFFFLL);
                    do
                    {
                      v63 = __ldaxr(result);
                      v64 = v63 - 1;
                    }
                    while (__stlxr(v64, result));
                    if (!v64)
                    {
                      atomic_store(1u, result);
                      result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
                    }
                    goto LABEL_127;
                  }
                  v49 = *(_QWORD *)(v48 + 8);
                  if (__ldaxr((unsigned __int8 *)v49))
                  {
                    __clrex();
                  }
                  else if (!__stxr(1u, (unsigned __int8 *)v49))
                  {
                    goto LABEL_107;
                  }
                  MEMORY[0x19AEA534C](v49);
LABEL_107:
                  v51 = *(_QWORD *)(v49 + 8);
                  v52 = v51 - 1;
                  *(_QWORD *)(v49 + 8) = v51 - 1;
                  if (v51 == 1)
                  {
                    v69 = *(_QWORD *)(v49 + 16);
                    v53 = *(_QWORD *)(v49 + 24);
                    *(_QWORD *)(v49 + 24) = 0;
                    v54 = v69 != 0;
                  }
                  else
                  {
                    v53 = 0;
                    v54 = 1;
                  }
                  v55 = __ldxr((unsigned __int8 *)v49);
                  if (v55 == 1)
                  {
                    if (!__stlxr(0, (unsigned __int8 *)v49))
                    {
LABEL_114:
                      if (!v52)
                      {
                        if (v53)
                          (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
                        if (!v54)
                          WTF::fastFree((WTF *)v49, a2);
                      }
                      goto LABEL_119;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow((WTF::Lock *)v49);
                  goto LABEL_114;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v41);
              goto LABEL_97;
            }
            v34 = *(_QWORD *)(v33 + 8);
            if (__ldaxr((unsigned __int8 *)v34))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v34))
            {
              goto LABEL_73;
            }
            MEMORY[0x19AEA534C](v34);
LABEL_73:
            v36 = *(_QWORD *)(v34 + 8);
            v37 = v36 - 1;
            *(_QWORD *)(v34 + 8) = v36 - 1;
            if (v36 == 1)
            {
              v67 = *(_QWORD *)(v34 + 16);
              v38 = *(_QWORD *)(v34 + 24);
              *(_QWORD *)(v34 + 24) = 0;
              v39 = v67 != 0;
            }
            else
            {
              v38 = 0;
              v39 = 1;
            }
            v80 = v39;
            v40 = __ldxr((unsigned __int8 *)v34);
            if (v40 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v34))
              {
LABEL_80:
                if (!v37)
                {
                  if (v38)
                    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
                  if (!v80)
                    WTF::fastFree((WTF *)v34, a2);
                }
                goto LABEL_85;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v34);
            goto LABEL_80;
          }
        }
        v87 = v27;
        goto LABEL_53;
      }
    }
    else
    {
      WebCore::elementIdentifiersMap(void)::map = 0;
    }
LABEL_17:
    *a4 = 0;
    do
    {
LABEL_18:
      v14 = __ldaxr(v9);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v9));
    if (!v15)
    {
      atomic_store(1u, v9);
      v32 = (WebCore::LocalFrameView *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v32 = off_1E31FE290;
      *((_QWORD *)v32 + 1) = v9;
      v86 = v32;
      WTF::ensureOnMainThread();
      result = (unsigned int *)v86;
      v86 = 0;
      if (result)
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
    goto LABEL_20;
  }
  *a4 = 0;
LABEL_20:
  if (*(_DWORD *)v6 == 1)
  {
    WebCore::Page::~Page(v6);
    return (unsigned int *)WTF::fastFree(v17, v18);
  }
  else
  {
    --*(_DWORD *)v6;
  }
  return result;
}

void WebCore::EventHandler::hoverTimerFired(WebCore::EventHandler *this, void *a2, const WebCore::IntPoint *a3)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  WebCore::ScrollView *v8;
  uint64_t v9;
  unint64_t v10;
  int8x8_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  unsigned int v22;
  unsigned int v23;
  _QWORD *v24;
  int32x2_t v25;
  uint64_t v26;
  uint64_t v27;
  int32x2_t v28[4];
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;
  int32x2_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;

  if ((*((_QWORD *)this + 7) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::EventHandler *)((char *)this + 24));
  v4 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v5 = (unsigned int *)(v4 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = *(_QWORD *)(v4 + 296);
  if (v7)
  {
    *(_DWORD *)(v7 + 24) += 2;
    v8 = *(WebCore::ScrollView **)(v4 + 288);
    if (v8)
    {
      ++*((_DWORD *)v8 + 2);
      v9 = *(_QWORD *)((char *)this + 300);
      if (!*((_BYTE *)this + 308))
        v9 = 0;
      v27 = v9;
      v10 = WebCore::ScrollView::windowToContents(v8, (const WebCore::IntPoint *)&v27, a3);
      v11 = (int8x8_t)vcgt_s32((int32x2_t)v10, (int32x2_t)0xFE000000FE000000);
      v28[2] = (int32x2_t)0x4000000040;
      v28[0] = (int32x2_t)vorr_s8((int8x8_t)(*(_QWORD *)&v11 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)v10), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32((int32x2_t)v10, 6uLL)), v11));
      v28[1] = (int32x2_t)(v28[0].i32[0] & 0xFFFFFFC0 | ((unint64_t)((v28[0].i32[1] & 0xFFFFFFC0) >> 6) << 38));
      v28[3] = (int32x2_t)vmul_f32(vcvt_f32_s32(v28[0]), (float32x2_t)vdup_n_s32(0x3C800000u));
      v29 = (float)(int)(v28[0].i32[0] & 0xFFFFFFC0) * 0.015625;
      v30 = (float)(int)(v28[0].i32[1] & 0xFFFFFFC0) * 0.015625;
      v31 = v29 + 1.0;
      v32 = v30;
      v33 = v29 + 1.0;
      v34 = v30 + 1.0;
      v35 = v29;
      v36 = v30 + 1.0;
      v37 = 256;
      v38 = 0;
      v39 = 0;
      v45 = 0;
      v40 = v28[0];
      v41 = 0;
      v44 = 0;
      v42 = 0;
      v43 = 0;
      LODWORD(v27) = 260;
      BYTE4(v27) = 1;
      WebCore::Document::hitTest(v7, &v27, (WebCore::HitTestingTransformState *)v28, (uint64_t)v28);
      LODWORD(v27) = 260;
      BYTE4(v27) = 1;
      v12 = v38;
      if (v38)
      {
        do
        {
          v13 = *(_WORD *)(v12 + 28);
          if ((v13 & 8) != 0)
            break;
          v15 = (uint64_t *)(v12 + 32);
          v14 = *(_QWORD *)(v12 + 32);
          if (v14)
          {
            if ((*(_WORD *)(v14 + 28) & 8) != 0)
            {
              v16 = *(_QWORD *)(v14 + 72) & 0xFFFFFFFFFFFFLL;
              if (v16)
              {
                v18 = *(_QWORD *)(v16 + 88);
                if (v18)
                {
                  v19 = *(_QWORD *)(v18 + 224);
                  if (v19)
                  {
                    v26 = v12;
                    v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v12);
                    if (v17)
                      goto LABEL_16;
                    v12 = v26;
                    v13 = *(_WORD *)(v26 + 28);
                  }
                }
              }
            }
          }
          if ((v13 & 0x80) != 0)
          {
            v20 = *(_QWORD *)(v12 + 200);
            if (!v20)
            {
              v12 = 0;
              break;
            }
            v15 = (uint64_t *)(v20 + 8);
          }
          v17 = *v15;
LABEL_16:
          v12 = v17;
        }
        while (v17);
      }
      WebCore::Document::updateHoverActiveState((unsigned __int8 *)v7, (unsigned __int8 *)&v27, v12, 0);
      WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v28, v21);
      if (*((_DWORD *)v8 + 2) == 1)
        (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v8 + 8))(v8);
      else
        --*((_DWORD *)v8 + 2);
    }
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  do
  {
    v22 = __ldaxr(v5);
    v23 = v22 - 1;
  }
  while (__stlxr(v23, v5));
  if (!v23)
  {
    atomic_store(1u, v5);
    v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v24 = off_1E31FE290;
    v24[1] = v5;
    v28[0] = (int32x2_t)v24;
    WTF::ensureOnMainThread();
    v25 = v28[0];
    v28[0] = 0;
    if (v25)
      (*(void (**)(int32x2_t))(**(_QWORD **)&v25 + 8))(v25);
  }
}

unsigned int *WebCore::EventHandler::textRecognitionHoverTimerFired(WebCore::EventHandler *this, void *a2)
{
  unsigned int *result;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF *v11;
  void *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  char v16;
  uint64_t v17;

  result = (unsigned int *)WebCore::EventHandler::textRecognitionCandidateElement(this, a2, &v17);
  v5 = v17;
  if (v17)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 24);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
      {
        ++*(_DWORD *)v7;
        v8 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 16);
        v14 = 0;
        v15 = 0;
        v16 = 1;
        v13 = 0;
        (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, uint64_t *))(*(_QWORD *)v8 + 1688))(v8, v5, &v14, &v13);
        v9 = v13;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        v10 = v15;
        v15 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, v4);
          else
            *(_DWORD *)v10 -= 2;
        }
        result = (unsigned int *)v14;
        v14 = 0;
        if (result)
        {
          if (*result == 2)
            result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v4);
          else
            *result -= 2;
        }
        if (*(_DWORD *)v7 == 1)
        {
          WebCore::Page::~Page(v7);
          result = (unsigned int *)WTF::fastFree(v11, v12);
        }
        else
        {
          --*(_DWORD *)v7;
        }
      }
    }
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v5, v4);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::EventHandler::autoHideCursorTimerFired(uint64_t this)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  void *v8;

  v1 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(this + 8) + 8) + 288);
  if (v1)
  {
    v2 = this;
    ++v1[2];
    this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 720))(v1);
    v3 = *(_QWORD *)(this + 24);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        if ((*(_WORD *)(*(_QWORD *)(v4 + 72) + 26) & 1) != 0)
        {
          v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 8) + 24);
          if (v5)
          {
            v6 = *(_QWORD *)(v5 + 8);
            if (v6)
            {
              ++*(_DWORD *)v6;
              this = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 + 48) + 144))(*(_QWORD *)(v6 + 48), 1);
              if (*(_DWORD *)v6 == 1)
              {
                WebCore::Page::~Page(v6);
                this = WTF::fastFree(v7, v8);
              }
              else
              {
                --*(_DWORD *)v6;
              }
            }
          }
        }
      }
    }
    if (v1[2] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
    else
      --v1[2];
  }
  return this;
}

void WebCore::EventHandler::~EventHandler(WebCore::EventHandler *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  WTF **v9;
  uint64_t v10;
  WTF *v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  WTF *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  WebCore::TimerBase *v33;
  WTF *v34;
  uint64_t v35;
  WTF *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;

  v3 = *((_QWORD *)this + 97);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  v4 = *((_QWORD *)this + 96);
  *((_QWORD *)this + 96) = 0;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v48 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v48 = off_1E31FE290;
      v48[1] = v5;
      v50 = v48;
      WTF::ensureOnMainThread();
      if (v50)
        (*(void (**)(_QWORD *))(*v50 + 8))(v50);
    }
  }
  v8 = *((unsigned int *)this + 191);
  if ((_DWORD)v8)
  {
    v9 = (WTF **)*((_QWORD *)this + 94);
    v10 = 8 * v8;
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
        WTF::RefCounted<WebCore::Touch>::deref(v11, (WTF::StringImpl *)a2);
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  v12 = (WTF *)*((_QWORD *)this + 94);
  if (v12)
  {
    *((_QWORD *)this + 94) = 0;
    *((_DWORD *)this + 190) = 0;
    WTF::fastFree(v12, a2);
  }
  v13 = *((_QWORD *)this + 91);
  if (v13)
  {
    v45 = *(unsigned int *)(v13 - 4);
    if ((_DWORD)v45)
    {
      v46 = (uint64_t *)*((_QWORD *)this + 91);
      do
      {
        v47 = *v46;
        if (*v46 != -1)
        {
          *v46 = 0;
          if (v47)
          {
            if ((*(_BYTE *)(v47 + 22) & 2) != 0)
            {
              if (*(_DWORD *)(v47 + 24) == 2)
              {
                if ((*(_WORD *)(v47 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v47, a2);
              }
              else
              {
                *(_DWORD *)(v47 + 24) -= 2;
              }
            }
            else
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v47 + 96))(v47);
            }
          }
        }
        ++v46;
        --v45;
      }
      while (v45);
    }
    WTF::fastFree((WTF *)(v13 - 16), a2);
  }
  v14 = *((_QWORD *)this + 87);
  *((_QWORD *)this + 87) = 0;
  if (v14)
  {
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v14, a2);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
  }
  if (*((_BYTE *)this + 688))
  {
    v15 = *((_QWORD *)this + 84);
    *((_QWORD *)this + 84) = 0;
    if (v15)
    {
      if (*(_DWORD *)(v15 + 24) == 2)
      {
        if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v15, a2);
      }
      else
      {
        *(_DWORD *)(v15 + 24) -= 2;
      }
    }
    v16 = *((_QWORD *)this + 82);
    *((_QWORD *)this + 82) = 0;
    if (v16)
    {
      if (*(_DWORD *)(v16 + 24) == 2)
      {
        if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v16, a2);
      }
      else
      {
        *(_DWORD *)(v16 + 24) -= 2;
      }
    }
  }
  *((_QWORD *)this + 74) = off_1E31F7378;
  v17 = *((_QWORD *)this + 80);
  *((_QWORD *)this + 80) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  WebCore::TimerBase::~TimerBase((WebCore::EventHandler *)((char *)this + 592));
  v19 = (WTF::StringImpl *)*((_QWORD *)this + 71);
  *((_QWORD *)this + 71) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = (WTF::StringImpl *)*((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v18);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v21)
  {
    if (*(_DWORD *)(v21 + 24) == 2)
    {
      if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v21, v18);
    }
    else
    {
      *(_DWORD *)(v21 + 24) -= 2;
    }
  }
  v22 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v22)
  {
    if (*(_DWORD *)(v22 + 24) == 2)
    {
      if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v22, v18);
    }
    else
    {
      *(_DWORD *)(v22 + 24) -= 2;
    }
  }
  v23 = (_DWORD *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v23)
  {
    if (v23[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
    else
      --v23[2];
  }
  v24 = (WTF *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::fastFree(v24, v18);
    else
      --*(_DWORD *)v24;
  }
  v25 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v25)
  {
    v26 = (unsigned int *)(v25 + 8);
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v26);
      v49 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v49 = off_1E31FE290;
      v49[1] = v26;
      v51 = v49;
      WTF::ensureOnMainThread();
      if (v51)
        (*(void (**)(_QWORD *))(*v51 + 8))(v51);
    }
  }
  v29 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v29)
  {
    if (*(_DWORD *)(v29 + 24) == 2)
    {
      if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v29, v18);
    }
    else
    {
      *(_DWORD *)(v29 + 24) -= 2;
    }
  }
  v30 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v30)
  {
    if (*(_DWORD *)(v30 + 24) == 2)
    {
      if ((*(_WORD *)(v30 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v30, v18);
    }
    else
    {
      *(_DWORD *)(v30 + 24) -= 2;
    }
  }
  v31 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v31)
  {
    if (*(_DWORD *)(v31 + 24) == 2)
    {
      if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v31, v18);
    }
    else
    {
      *(_DWORD *)(v31 + 24) -= 2;
    }
  }
  v32 = (WTF *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 1)
      WTF::fastFree(v32, v18);
    else
      --*(_DWORD *)v32;
  }
  v33 = (WebCore::TimerBase *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v33)
  {
    v34 = (WTF *)*((_QWORD *)v33 + 7);
    *((_QWORD *)v33 + 7) = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::fastFree(v34, v18);
      else
        --*(_DWORD *)v34;
    }
    *(_QWORD *)v33 = off_1E31F7378;
    v35 = *((_QWORD *)v33 + 6);
    *((_QWORD *)v33 + 6) = 0;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    WebCore::TimerBase::~TimerBase(v33);
    WTF::fastFree(v36, v37);
  }
  *((_QWORD *)this + 10) = off_1E33DC988;
  v38 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  WebCore::TimerBase::~TimerBase((WebCore::EventHandler *)((char *)this + 80));
  *((_QWORD *)this + 3) = off_1E31F7378;
  v39 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  WebCore::TimerBase::~TimerBase((WebCore::EventHandler *)((char *)this + 24));
  v41 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v41)
  {
    if (*(_DWORD *)(v41 + 24) == 2)
    {
      if ((*(_WORD *)(v41 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v41, v40);
    }
    else
    {
      *(_DWORD *)(v41 + 24) -= 2;
    }
  }
  v42 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v42)
  {
    do
    {
      v43 = __ldaxr(v42);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v42));
    if (!v44)
    {
      atomic_store(1u, v42);
      WTF::fastFree((WTF *)v42, v40);
    }
  }
}

double WebCore::EventHandler::draggedElement(WebCore::EventHandler *this)
{
  double result;

  {
    result = 0.0;
    WebCore::EventHandler::dragState(void)::state = 0u;
    *(_OWORD *)&qword_1EE2F7E10 = 0u;
  }
  return result;
}

uint64_t *WebCore::EventHandler::clearElementUnderMouse(WebCore::EventHandler *this)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::Page *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;

  v3 = *((_QWORD *)this + 26);
  result = (uint64_t *)((char *)this + 208);
  if (v3)
  {
    result = WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=(result, 0);
    v4 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
    v5 = *(_QWORD *)(v4 + 24);
    if (v5)
    {
      v6 = *(WebCore::Page **)(v5 + 8);
      if (v6)
      {
        ++*(_DWORD *)v6;
        if (*((_QWORD *)v6 + 151))
        {
          v7 = (unsigned int *)(v4 + 8);
          do
            v8 = __ldaxr(v7);
          while (__stlxr(v8 + 1, v7));
          v9 = v4;
          WTF::Ref<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>::~Ref(&v9);
        }
        return (uint64_t *)WTF::RefCounted<WebCore::Page>::deref(v6);
      }
    }
  }
  return result;
}

uint64_t WebCore::EventHandler::CapturesDragging::operator=(uint64_t a1)
{
  int v2;
  unsigned int v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  int *v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE v12[4];
  int v13;
  uint64_t v14;
  char v15;

  v12[0] = 2;
  v13 = 1;
  v2 = *(_DWORD *)(a1 + 4);
  if (v2 == 1)
  {
    *(_BYTE *)a1 = 2;
  }
  else
  {
    v4 = v2 + 1;
    if (v4 >= 3)
      v5 = (_BYTE *)a1;
    else
      v5 = v12;
    if (v4 >= 3)
      v6 = v12;
    else
      v6 = (_BYTE *)a1;
    v7 = *(_QWORD *)v6;
    v14 = *(_QWORD *)v6;
    if (v4 >= 3)
      v8 = &v13;
    else
      v8 = (int *)(a1 + 4);
    *((_DWORD *)v6 + 1) = -1;
    if (v4 >= 3)
      v9 = (int *)(a1 + 4);
    else
      v9 = &v13;
    v10 = *((unsigned int *)v5 + 1);
    v11 = HIDWORD(v7);
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(char *))off_1E33FE7D0[v10])(&v15);
      *v8 = v10;
    }
    *v9 = -1;
    if ((_DWORD)v11 != -1)
    {
      ((void (*)(char *, _BYTE *, uint64_t *))off_1E33FE7D0[v11])(&v15, v5, &v14);
      *v9 = v11;
    }
  }
  return a1;
}

unsigned int *WebCore::EventHandler::resetCapturingMouseEventsElement(WebCore::EventHandler *this, void *a2)
{
  unsigned int *result;

  result = (unsigned int *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  *((_BYTE *)this + 194) = 0;
  return result;
}

uint64_t *WebCore::EventHandler::nodeWillBeRemoved(WebCore::EventHandler *this, WebCore::Node *a2)
{
  uint64_t *result;
  int v4;
  WebCore::Node *v5;
  WebCore::Node **v6;
  uint64_t v8;

  result = (uint64_t *)*((_QWORD *)this + 34);
  if (result)
  {
    v4 = *((_DWORD *)result + 6);
    *((_DWORD *)result + 6) = v4 + 2;
    if (result == (uint64_t *)a2)
    {
      if (v4)
      {
        *((_DWORD *)result + 6) = v4;
      }
      else if ((*((_WORD *)result + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
      return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)this + 34);
    }
    else
    {
      v5 = (WebCore::Node *)result;
      do
      {
        if ((*((_WORD *)v5 + 14) & 0x80) != 0)
        {
          v8 = *((_QWORD *)v5 + 25);
          if (!v8)
          {
            if (v4)
            {
              *((_DWORD *)result + 6) = v4;
            }
            else if ((*((_WORD *)result + 15) & 0x400) == 0)
            {
              return (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)result);
            }
            return result;
          }
          v6 = (WebCore::Node **)(v8 + 8);
        }
        else
        {
          v6 = (WebCore::Node **)((char *)v5 + 32);
        }
        v5 = *v6;
      }
      while (*v6 != a2 && v5 != 0);
      if (v4)
      {
        *((_DWORD *)result + 6) = v4;
      }
      else if ((*((_WORD *)result + 15) & 0x400) == 0)
      {
        result = (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
      if (v5)
        return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)this + 34);
    }
  }
  return result;
}

uint64_t WebCore::EventHandler::updateSelectionForMouseDownDispatchingSelectStart(uint64_t a1, _QWORD *a2, WebCore::VisibleSelection *this, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  WebCore::Node *v25;
  WebCore::Node *v26;
  uint64_t result;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  WebCore::Node *v32;
  WebCore::Node *v33;
  WebCore::Node *v34[2];
  WebCore::Node *v35;
  char v36;

  if (a2)
  {
    v8 = (_QWORD *)(a2[8] & 0xFFFFFFFFFFFFLL);
    if (!v8)
      goto LABEL_16;
    if ((*(_BYTE *)((a2[8] & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      v8 = *(_QWORD **)((a2[8] & 0xFFFFFFFFFFFFLL) + 0x20);
      if (v8)
        v8 = (_QWORD *)v8[1];
    }
    v9 = v8[13];
    if ((*(_BYTE *)(v9 + 239) & 1) != 0)
      return 0;
    v10 = *(_DWORD *)(v9 + 228);
    if (((v10 & 0x30) == 0 || (*(_DWORD *)(*(_QWORD *)(v8[11] + 32) + 148) & 0xC00000) == 0x800000)
      && (v10 & 0x18000) == 0)
    {
      return 0;
    }
  }
  else if ((MEMORY[0x40] & 0xFFFFFFFFFFFFLL) == 0)
  {
    goto LABEL_16;
  }
  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v11 || (v12 = *(_QWORD *)(v11 + 96)) == 0)
    v12 = WebCore::threadGlobalDataSlow((WebCore *)a1);
  v13 = *(_QWORD *)(v12 + 40);
  if (!v13)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v12);
    v13 = *(_QWORD *)(v12 + 40);
  }
  v14 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v14);
  *(_DWORD *)(v14 + 16) = 1;
  *(_QWORD *)v14 = off_1E33A4B48;
  *(_QWORD *)(v14 + 8) = 0;
  *(_DWORD *)(v14 + 20) = *(_DWORD *)(v14 + 20) & 0xFFC00000 | 0x1E8206 | (*(_QWORD *)(v13 + 1808) != 0);
  v16 = *(_DWORD **)(v13 + 1808);
  if (v16)
    *v16 += 2;
  *(_QWORD *)(v14 + 24) = v16;
  *(_QWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 40) = 0;
  *(_QWORD *)(v14 + 48) = 0;
  *(_QWORD *)(v14 + 56) = v15;
  *(_QWORD *)(v14 + 64) = 0;
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 48))(a2, v14);
  v17 = *(_DWORD *)(v14 + 20);
  if (*(_DWORD *)(v14 + 16) != 1)
  {
    --*(_DWORD *)(v14 + 16);
    if ((v17 & 0x40) == 0)
      goto LABEL_16;
LABEL_49:
    result = 0;
    *(_BYTE *)(a1 + 180) = 0;
    return result;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if ((v17 & 0x40) != 0)
    goto LABEL_49;
LABEL_16:
  v18 = *((_QWORD *)this + 4);
  if (v18 && (*(_BYTE *)(v18 + 22) & 8) == 0)
    goto LABEL_49;
  v19 = *((_QWORD *)this + 6);
  if (v19)
  {
    if ((*(_BYTE *)(v19 + 22) & 8) == 0)
      goto LABEL_49;
  }
  v20 = *((_QWORD *)this + 8);
  if (v20)
  {
    if ((*(_BYTE *)(v20 + 22) & 8) == 0)
      goto LABEL_49;
  }
  v21 = *((_QWORD *)this + 10);
  if (v21)
  {
    if ((*(_BYTE *)(v21 + 22) & 8) == 0)
      goto LABEL_49;
  }
  v22 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    if ((*(_BYTE *)(v22 + 22) & 8) == 0
      && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 40) + 8) + 680) + 680) & 0x800000000000000) != 0)
    {
      goto LABEL_49;
    }
  }
  v23 = *((_QWORD *)this + 2);
  if (v23)
  {
    if ((*(_BYTE *)(v23 + 22) & 8) == 0
      && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 40) + 8) + 680) + 680) & 0x800000000000000) != 0)
    {
      goto LABEL_49;
    }
  }
  if (*((_BYTE *)this + 97) == 2)
  {
    *(_BYTE *)(a1 + 192) = 2;
    WebCore::VisibleSelection::range(this, (uint64_t)v34);
    std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>(a1 + 656, (uint64_t *)v34);
    if (v36)
    {
      v25 = v35;
      v35 = 0;
      if (v25)
      {
        if (*((_DWORD *)v25 + 6) == 2)
        {
          if ((*((_WORD *)v25 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v25, v24);
        }
        else
        {
          *((_DWORD *)v25 + 6) -= 2;
        }
      }
      v26 = v34[0];
      v34[0] = 0;
      if (v26)
      {
        if (*((_DWORD *)v26 + 6) == 2)
        {
          if ((*((_WORD *)v26 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v26, v24);
        }
        else
        {
          *((_DWORD *)v26 + 6) -= 2;
        }
      }
    }
  }
  else
  {
    a4 = 0;
    *(_BYTE *)(a1 + 192) = 1;
  }
  v28 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v29 = (unsigned int *)(v28 + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 + 1, v29));
  WebCore::FrameSelection::setSelectionByMouseIfDifferent(*(_QWORD *)(*(_QWORD *)(v28 + 296) + 3064), (uint64_t)this, a4, 0);
  do
    v31 = __ldaxr(v29);
  while (__stlxr(v31 - 1, v29));
  result = 1;
  if (v31 == 1)
  {
    atomic_store(1u, v29);
    v32 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v32 = off_1E31FE290;
    *((_QWORD *)v32 + 1) = v29;
    v34[0] = v32;
    WTF::ensureOnMainThread();
    v33 = v34[0];
    v34[0] = 0;
    if (v33)
      (*(void (**)(WebCore::Node *))(*(_QWORD *)v33 + 8))(v33);
    return 1;
  }
  return result;
}

void WebCore::EventHandler::selectClosestWordFromHitTestResult(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v5;
  WebCore::Node *v7;
  uint64_t (*v8)();
  void *v9;
  WebCore::Node *v10;
  void *v11;
  uint64_t v12[13];
  WebCore::Node *v13[3];
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;
  int v30;
  char v31;
  __int16 v32;
  char v33;

  v3 = *(_QWORD *)(a2 + 72);
  if (v3)
  {
    *(_DWORD *)(v3 + 24) += 2;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 &= 0xF0u;
    v20 = 0;
    v21 = 0;
    v22 &= 0xF0u;
    v23 = 0;
    v24 = 0;
    v25 &= 0xF0u;
    v26 = 0;
    v27 = 0;
    v28 &= 0xF0u;
    v29 = 0;
    v30 = 0;
    v31 &= 0xF0u;
    v32 = 1;
    v33 = v33 & 0xFC | 1;
    v5 = *(_QWORD *)(v3 + 64) & 0xFFFFFFFFFFFFLL;
    if (v5)
    {
      (*(void (**)(WebCore::Node **__return_ptr, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 352))(v13, v5, a2 + 96, 1, 0);
      if (v13[0])
        v8 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
      else
        v8 = 0;
      if (v8)
      {
        WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)v12, (const WebCore::VisiblePosition *)v13, 0);
        WebCore::VisibleSelection::operator=(&v14, v12);
        WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v12);
        if (HIBYTE(v32))
          WebCore::VisibleSelection::validate((uint64_t)&v14, 1);
      }
      if (!a3 && HIBYTE(v32) == 2)
        WebCore::VisibleSelection::appendTrailingWhitespace((WebCore::VisibleSelection *)&v14, v7);
      WebCore::expandSelectionToRespectSelectOnMouseDown((WebCore *)v12, (WebCore::Node *)v3, (const WebCore::VisibleSelection *)&v14);
      WebCore::EventHandler::updateSelectionForMouseDownDispatchingSelectStart(a1, (_QWORD *)v3, (WebCore::VisibleSelection *)v12, 1);
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v12);
      v10 = v13[0];
      v13[0] = 0;
      if (v10)
      {
        if (*((_DWORD *)v10 + 6) == 2)
        {
          if ((*((_WORD *)v10 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v10, v9);
        }
        else
        {
          *((_DWORD *)v10 + 6) -= 2;
        }
      }
    }
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v14);
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, v11);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 1;
    v33 = 1;
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v14);
  }
}

uint64_t WebCore::expandSelectionToRespectSelectOnMouseDown(WebCore *this, WebCore::Node *a2, const WebCore::VisibleSelection *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  WebCore::Node *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  WebCore::Node *v22;
  uint64_t v23;
  void *v24;
  WebCore::Node *v25;
  WebCore::Node *v26;
  void *v27;
  WebCore::Node *v28;
  uint64_t v29;
  void *v30;
  WebCore::Node *v31;
  WebCore::Node *v32;
  int v33;
  char v34;
  WebCore::Node *v35;
  int v36;
  char v37;

  result = WebCore::ImageOverlay::isInsideOverlay(a2, a2);
  if ((result & 1) != 0)
    goto LABEL_2;
  WebCore::Position::rootUserSelectAllForNode((uint64_t)a2, (uint64_t *)&v35);
  v14 = v35;
  v35 = 0;
  if (v14)
  {
    if (*((_DWORD *)v14 + 6) == 2)
    {
      if ((*((_WORD *)v14 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v14, v13);
    }
    else
    {
      *((_DWORD *)v14 + 6) -= 2;
    }
  }
  else
  {
    result = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)a2 + 256))(a2);
    v14 = a2;
    if ((result & 1) == 0)
    {
LABEL_2:
      v7 = *(_QWORD *)a3;
      if (*(_QWORD *)a3)
        *(_DWORD *)(v7 + 24) += 2;
      *(_QWORD *)this = v7;
      *((_DWORD *)this + 2) = *((_DWORD *)a3 + 2);
      *((_BYTE *)this + 12) = *((_BYTE *)a3 + 12);
      v8 = *((_QWORD *)a3 + 2);
      if (v8)
        *(_DWORD *)(v8 + 24) += 2;
      *((_QWORD *)this + 2) = v8;
      *((_DWORD *)this + 6) = *((_DWORD *)a3 + 6);
      *((_BYTE *)this + 28) = *((_BYTE *)a3 + 28);
      v9 = *((_QWORD *)a3 + 4);
      if (v9)
        *(_DWORD *)(v9 + 24) += 2;
      *((_QWORD *)this + 4) = v9;
      *((_DWORD *)this + 10) = *((_DWORD *)a3 + 10);
      *((_BYTE *)this + 44) = *((_BYTE *)a3 + 44);
      v10 = *((_QWORD *)a3 + 6);
      if (v10)
        *(_DWORD *)(v10 + 24) += 2;
      *((_QWORD *)this + 6) = v10;
      *((_DWORD *)this + 14) = *((_DWORD *)a3 + 14);
      *((_BYTE *)this + 60) = *((_BYTE *)a3 + 60);
      v11 = *((_QWORD *)a3 + 8);
      if (v11)
        *(_DWORD *)(v11 + 24) += 2;
      *((_QWORD *)this + 8) = v11;
      *((_DWORD *)this + 18) = *((_DWORD *)a3 + 18);
      *((_BYTE *)this + 76) = *((_BYTE *)a3 + 76);
      v12 = *((_QWORD *)a3 + 10);
      if (v12)
        *(_DWORD *)(v12 + 24) += 2;
      *((_QWORD *)this + 10) = v12;
      *((_DWORD *)this + 22) = *((_DWORD *)a3 + 22);
      *((_BYTE *)this + 92) = *((_BYTE *)a3 + 92);
      *((_WORD *)this + 48) = *((_WORD *)a3 + 48);
      *((_BYTE *)this + 98) = *((_BYTE *)a3 + 98);
      return result;
    }
  }
  *((_DWORD *)v14 + 6) += 2;
  v15 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
    *(_DWORD *)(v15 + 24) += 2;
  *(_QWORD *)this = v15;
  *((_DWORD *)this + 2) = *((_DWORD *)a3 + 2);
  *((_BYTE *)this + 12) = *((_BYTE *)a3 + 12);
  v16 = *((_QWORD *)a3 + 2);
  if (v16)
    *(_DWORD *)(v16 + 24) += 2;
  *((_DWORD *)this + 6) = *((_DWORD *)a3 + 6);
  *((_QWORD *)this + 2) = v16;
  *((_BYTE *)this + 28) = *((_BYTE *)a3 + 28);
  v17 = *((_QWORD *)a3 + 4);
  if (v17)
    *(_DWORD *)(v17 + 24) += 2;
  *((_QWORD *)this + 4) = v17;
  *((_DWORD *)this + 10) = *((_DWORD *)a3 + 10);
  *((_BYTE *)this + 44) = *((_BYTE *)a3 + 44);
  v18 = *((_QWORD *)a3 + 6);
  if (v18)
    *(_DWORD *)(v18 + 24) += 2;
  *((_QWORD *)this + 6) = v18;
  *((_DWORD *)this + 14) = *((_DWORD *)a3 + 14);
  *((_BYTE *)this + 60) = *((_BYTE *)a3 + 60);
  v19 = *((_QWORD *)a3 + 8);
  if (v19)
    *(_DWORD *)(v19 + 24) += 2;
  *((_QWORD *)this + 8) = v19;
  *((_DWORD *)this + 18) = *((_DWORD *)a3 + 18);
  *((_BYTE *)this + 76) = *((_BYTE *)a3 + 76);
  v20 = *((_QWORD *)a3 + 10);
  if (v20)
    *(_DWORD *)(v20 + 24) += 2;
  *((_QWORD *)this + 10) = v20;
  *((_DWORD *)this + 22) = *((_DWORD *)a3 + 22);
  *((_BYTE *)this + 92) = *((_BYTE *)a3 + 92);
  *((_WORD *)this + 48) = *((_WORD *)a3 + 48);
  *((_BYTE *)this + 98) = *((_BYTE *)a3 + 98);
  *((_DWORD *)v14 + 6) += 2;
  v32 = v14;
  v33 = 0;
  v34 = v34 & 0xF0 | 1;
  WebCore::Position::upstream((uint64_t)&v32, 0, (uint64_t)&v35);
  v22 = v35;
  if (v35)
    *((_DWORD *)v35 + 6) += 2;
  v23 = *(_QWORD *)this;
  *(_QWORD *)this = v22;
  if (v23)
  {
    if (*(_DWORD *)(v23 + 24) == 2)
    {
      if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v23, v21);
    }
    else
    {
      *(_DWORD *)(v23 + 24) -= 2;
    }
  }
  *((_DWORD *)this + 2) = v36;
  *((_BYTE *)this + 12) = v37;
  WebCore::VisibleSelection::validate((uint64_t)this, 0);
  v25 = v35;
  v35 = 0;
  if (v25)
  {
    if (*((_DWORD *)v25 + 6) == 2)
    {
      if ((*((_WORD *)v25 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v25, v24);
    }
    else
    {
      *((_DWORD *)v25 + 6) -= 2;
    }
  }
  v26 = v32;
  v32 = 0;
  if (v26)
  {
    if (*((_DWORD *)v26 + 6) == 2)
    {
      if ((*((_WORD *)v26 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v26, v24);
    }
    else
    {
      *((_DWORD *)v26 + 6) -= 2;
    }
  }
  *((_DWORD *)v14 + 6) += 2;
  v32 = v14;
  v33 = 0;
  v34 = 2;
  WebCore::Position::downstream((uint64_t)&v32, 0, (uint64_t)&v35);
  v28 = v35;
  if (v35)
    *((_DWORD *)v35 + 6) += 2;
  v29 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v28;
  if (v29)
  {
    if (*(_DWORD *)(v29 + 24) == 2)
    {
      if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v29, v27);
    }
    else
    {
      *(_DWORD *)(v29 + 24) -= 2;
    }
  }
  *((_DWORD *)this + 6) = v36;
  *((_BYTE *)this + 28) = v37;
  WebCore::VisibleSelection::validate((uint64_t)this, 0);
  v31 = v35;
  v35 = 0;
  if (v31)
  {
    if (*((_DWORD *)v31 + 6) == 2)
    {
      if ((*((_WORD *)v31 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v31, v30);
    }
    else
    {
      *((_DWORD *)v31 + 6) -= 2;
    }
  }
  result = (uint64_t)v32;
  v32 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v30);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  if (*((_DWORD *)v14 + 6) == 2)
  {
    if ((*((_WORD *)v14 + 15) & 0x400) == 0)
      return (uint64_t)WebCore::Node::removedLastRef(v14, v30);
  }
  else
  {
    *((_DWORD *)v14 + 6) -= 2;
  }
  return result;
}

void WebCore::EventHandler::selectClosestContextualWordOrLinkFromHitTestResult(WebCore::EventHandler *a1, _QWORD *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  int v13;
  void *v14;
  WebCore::Node *v15;
  uint64_t (*v16)();
  int v17;
  __int16 v18;
  WebCore::Node *v19;
  int v20;
  uint64_t v22;
  void *v23;
  void *v24;
  int v25;
  WebCore::Node *v26;
  uint64_t (*v27)();
  uint64_t v28;
  void *v29;
  WebCore::Node *v30;
  WebCore::Node *v31[3];
  uint64_t v32[13];
  uint64_t v33;
  int v34;
  char v35;
  uint64_t v36;
  int v37;
  char v38;
  uint64_t v39;
  int v40;
  char v41;
  uint64_t v42;
  int v43;
  char v44;
  uint64_t v45;
  int v46;
  char v47;
  uint64_t v48;
  int v49;
  char v50;
  __int16 v51;
  char v52;

  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) + 296) + 3064);
  v7 = *(_QWORD *)(v6 + 120);
  if (v7)
  {
    v8 = *(_BYTE *)(v6 + 132) & 7;
    if (v8 <= 4 && (((1 << v8) & 0x19) != 0 || (v7 = *(_QWORD *)(v7 + 32)) != 0))
    {
      *(_DWORD *)(v7 + 24) += 2;
      v9 = WebCore::Node::computeEditability(v7, 0, 0);
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
      if (v9)
        goto LABEL_7;
    }
  }
  v28 = a2[9];
  if (v28)
  {
    if ((*(_WORD *)(v28 + 28) & 2) != 0)
    {
LABEL_7:
      if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) + 136) + 696) & 0x10000000000000) != 0)
      {
        v10 = a2[13];
        if (v10)
        {
          *(_DWORD *)(v10 + 24) += 2;
          if ((WebCore::isDraggableLink((WebCore *)v10, (const WebCore::Element *)a2) & 1) != 0)
          {
            v12 = a2[9];
            if (!v12)
            {
LABEL_84:
              if (*(_DWORD *)(v10 + 24) == 2)
              {
                if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v10, v11);
              }
              else
              {
                *(_DWORD *)(v10 + 24) -= 2;
              }
              return;
            }
            v13 = *(_DWORD *)(v12 + 24);
            *(_DWORD *)(v12 + 24) = v13 + 2;
            if ((*(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFLL) == 0)
            {
LABEL_82:
              if (v13)
              {
                *(_DWORD *)(v12 + 24) = v13;
              }
              else if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v12, v11);
              }
              goto LABEL_84;
            }
            v33 = 0;
            v34 = 0;
            v35 = 0;
            v36 = 0;
            v37 = 0;
            v38 &= 0xF0u;
            v39 = 0;
            v40 = 0;
            v41 &= 0xF0u;
            v42 = 0;
            v43 = 0;
            v44 &= 0xF0u;
            v45 = 0;
            v46 = 0;
            v47 &= 0xF0u;
            v48 = 0;
            v49 = 0;
            v50 &= 0xF0u;
            v51 = 1;
            v52 = v52 & 0xFC | 1;
            (*(void (**)(WebCore::Node **__return_ptr, uint64_t, _QWORD *, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFLL) + 352))(v31, *(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFLL, a2 + 12, 1, 0);
            v15 = v31[0];
            v16 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
            if (!v31[0])
              v16 = 0;
            if (!v16)
              goto LABEL_78;
            if (!v31[0])
            {
              if ((*(_WORD *)(v10 + 28) & 0xF000) != 0x9000
                || *MEMORY[0x28] != v10
                || (MEMORY[0x1C] & 0xF000) == 0x9000
                || (MEMORY[0x16] & 8) == 0)
              {
                goto LABEL_78;
              }
              goto LABEL_77;
            }
            v17 = *((_DWORD *)v31[0] + 6);
            *((_DWORD *)v31[0] + 6) = v17 + 2;
            v18 = *(_WORD *)(v10 + 28);
            if ((v18 & 0xF000) == 0x9000)
            {
              if (**((_QWORD **)v15 + 5) == v10 && (*((_WORD *)v15 + 14) & 0xF000) != 0x9000)
              {
                v20 = (*((unsigned __int8 *)v15 + 22) >> 3) & 1;
                if (v17)
                {
LABEL_76:
                  *((_DWORD *)v15 + 6) = v17;
                  if ((v20 & 1) != 0)
                  {
LABEL_77:
                    WebCore::VisibleSelection::selectionFromContentsOfNode((WebCore::VisibleSelection *)v10, (WebCore::VisibleSelection *)v32);
                    WebCore::VisibleSelection::operator=(&v33, v32);
                    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v32);
                  }
LABEL_78:
                  WebCore::expandSelectionToRespectSelectOnMouseDown((WebCore *)v32, (WebCore::Node *)v12, (const WebCore::VisibleSelection *)&v33);
                  WebCore::EventHandler::updateSelectionForMouseDownDispatchingSelectStart((uint64_t)a1, (_QWORD *)v12, (WebCore::VisibleSelection *)v32, 1);
                  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v32);
                  v30 = v31[0];
                  v31[0] = 0;
                  if (v30)
                  {
                    if (*((_DWORD *)v30 + 6) == 2)
                    {
                      if ((*((_WORD *)v30 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v30, v29);
                    }
                    else
                    {
                      *((_DWORD *)v30 + 6) -= 2;
                    }
                  }
                  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v33);
                  v13 = *(_DWORD *)(v12 + 24) - 2;
                  goto LABEL_82;
                }
LABEL_94:
                if ((*((_WORD *)v15 + 15) & 0x400) != 0)
                {
                  if (!v20)
                    goto LABEL_78;
                }
                else
                {
                  WebCore::Node::removedLastRef(v15, v14);
                  if ((v20 & 1) == 0)
                    goto LABEL_78;
                }
                goto LABEL_77;
              }
            }
            else if ((v18 & 4) != 0
                   && *(_QWORD *)(v10 + 80)
                   && ((*((unsigned __int8 *)v15 + 22) ^ *(unsigned __int8 *)(v10 + 22)) & 8) == 0)
            {
              v19 = v15;
              do
              {
                v19 = (WebCore::Node *)*((_QWORD *)v19 + 4);
                v20 = v19 != 0;
              }
              while (v19 != (WebCore::Node *)v10 && v19 != 0);
LABEL_75:
              if (v17)
                goto LABEL_76;
              goto LABEL_94;
            }
            v20 = 0;
            goto LABEL_75;
          }
        }
        v22 = a2[9];
        if (v22)
        {
          *(_DWORD *)(v22 + 24) += 2;
          if (WebCore::Node::computeEditability(v22, 0, 0))
          {
            WebCore::EventHandler::selectClosestWordFromHitTestResult((uint64_t)a1, (uint64_t)a2, a3);
LABEL_50:
            if (*(_DWORD *)(v22 + 24) == 2)
            {
              if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v22, v11);
            }
            else
            {
              *(_DWORD *)(v22 + 24) -= 2;
            }
LABEL_52:
            if (!v10)
              return;
            goto LABEL_84;
          }
          if (*(_DWORD *)(v22 + 24) == 2)
          {
            if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v22, v23);
          }
          else
          {
            *(_DWORD *)(v22 + 24) -= 2;
          }
          v22 = a2[9];
          if (v22)
          {
            *(_DWORD *)(v22 + 24) += 2;
            v33 = 0;
            v34 = 0;
            v35 = 0;
            v36 = 0;
            v37 = 0;
            v38 &= 0xF0u;
            v39 = 0;
            v40 = 0;
            v41 &= 0xF0u;
            v42 = 0;
            v43 = 0;
            v44 &= 0xF0u;
            v45 = 0;
            v46 = 0;
            v47 &= 0xF0u;
            v48 = 0;
            v49 = 0;
            v50 &= 0xF0u;
            v51 = 1;
            v52 = v52 & 0xFC | 1;
            if ((*(_QWORD *)(v22 + 64) & 0xFFFFFFFFFFFFLL) != 0)
            {
              WebCore::EventHandler::selectClosestWordFromHitTestResultBasedOnLookup(a1, (const WebCore::HitTestResult *)a2, (uint64_t)v32);
              WebCore::VisibleSelection::operator=(&v33, v32);
              WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v32);
              v25 = HIBYTE(v51);
              if (!HIBYTE(v51))
              {
                (*(void (**)(WebCore::Node **__return_ptr, uint64_t, _QWORD *, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v22 + 64) & 0xFFFFFFFFFFFFLL) + 352))(v31, *(_QWORD *)(v22 + 64) & 0xFFFFFFFFFFFFLL, a2 + 12, 1, 0);
                v26 = v31[0];
                v27 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
                if (!v31[0])
                  v27 = 0;
                if (v27)
                {
                  WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)v32, (const WebCore::VisiblePosition *)v31, 0);
                  WebCore::VisibleSelection::operator=(&v33, v32);
                  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v32);
                  if (HIBYTE(v51))
                    WebCore::VisibleSelection::validate((uint64_t)&v33, 1);
                  v26 = v31[0];
                }
                v31[0] = 0;
                if (v26)
                {
                  if (*((_DWORD *)v26 + 6) == 2)
                  {
                    if ((*((_WORD *)v26 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v26, v24);
                  }
                  else
                  {
                    *((_DWORD *)v26 + 6) -= 2;
                  }
                }
                v25 = HIBYTE(v51);
              }
              if (!a3 && v25 == 2)
                WebCore::VisibleSelection::appendTrailingWhitespace((WebCore::VisibleSelection *)&v33, (WebCore::Node *)v24);
              WebCore::expandSelectionToRespectSelectOnMouseDown((WebCore *)v32, (WebCore::Node *)v22, (const WebCore::VisibleSelection *)&v33);
              WebCore::EventHandler::updateSelectionForMouseDownDispatchingSelectStart((uint64_t)a1, (_QWORD *)v22, (WebCore::VisibleSelection *)v32, 1);
              WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v32);
            }
            WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v33);
            goto LABEL_50;
          }
        }
        v33 = 0;
        v34 = 0;
        v35 = 0;
        v36 = 0;
        v37 = 0;
        v38 = 0;
        v39 = 0;
        v40 = 0;
        v41 = 0;
        v42 = 0;
        v43 = 0;
        v44 = 0;
        v45 = 0;
        v46 = 0;
        v47 = 0;
        v48 = 0;
        v49 = 0;
        v50 = 0;
        v51 = 1;
        v52 = 1;
        WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v33);
        goto LABEL_52;
      }
    }
  }
}

uint64_t WebCore::textDistance(WebCore *this, const WebCore::Position *a2, const WebCore::Position *a3)
{
  void *v3;
  uint64_t v4;
  WebCore::Node *v5;
  WebCore::Node *v6;
  WebCore::Node *v8[2];
  WebCore::Node *v9;
  char v10;

  WebCore::makeSimpleRange<WebCore::Position &,WebCore::Position &>((uint64_t *)this, (uint64_t *)a2, (uint64_t)v8);
  if (!v10)
    return 0;
  v4 = WebCore::characterCount((int *)v8, 1);
  if (v10)
  {
    v5 = v9;
    v9 = 0;
    if (v5)
    {
      if (*((_DWORD *)v5 + 6) == 2)
      {
        if ((*((_WORD *)v5 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v5, v3);
      }
      else
      {
        *((_DWORD *)v5 + 6) -= 2;
      }
    }
    v6 = v8[0];
    v8[0] = 0;
    if (v6)
    {
      if (*((_DWORD *)v6 + 6) == 2)
      {
        if ((*((_WORD *)v6 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v6, v3);
      }
      else
      {
        *((_DWORD *)v6 + 6) -= 2;
      }
    }
  }
  return v4;
}

uint64_t WebCore::EventHandler::handleMousePressEvent(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const WebCore::IntPoint *v10;
  WebCore::ScrollView *v11;
  BOOL isPointInScrollbarCorner;
  int v13;
  uint64_t updated;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  WTF *v33;
  void *v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  int isOverlayText;
  uint64_t v39;
  WTF *v40;
  int v41;
  BOOL v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _DWORD *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int *v58;
  int v59;
  WebCore::ScrollView *v60;
  void *v61;
  unint64_t v62;
  uint64_t v63;
  float v64;
  uint64_t v65;
  float v66;
  WTF *v67;
  void *v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  _BYTE *v76;
  int v77;
  int v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  WebCore::Node *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  unsigned int v90;
  uint64_t v91;
  void *v92;
  const WebCore::IntPoint *v93;
  uint64_t v94;
  unsigned int v95;
  unsigned int v96;
  _QWORD *v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  WebCore::Document *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t (*v109)();
  void *v110;
  WebCore::Node *v111;
  unsigned int v112;
  int v113;
  int v114;
  int v115;
  uint64_t v116;
  WebCore::ScrollView *v117;
  unint64_t v118;
  int8x8_t v119;
  uint64_t v120;
  WebCore::Node *v121;
  WebCore::Node *v122;
  void *v123;
  WebCore::Node *v124;
  WebCore::Node *v125;
  WebCore::Document *v126;
  uint64_t v127;
  uint64_t v128;
  WebCore::Node *v129;
  uint64_t v130;
  uint64_t v131;
  WebCore::Node *v132;
  WebCore::Node *v133;
  uint64_t v134;
  void *v135;
  const WebCore::Position *v136;
  unsigned __int8 v137;
  WebCore::Node *v138;
  WebCore::Node *v139;
  uint64_t *v140;
  void *v141;
  uint64_t (*v142)();
  char v143;
  WebCore::Node *v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int v147;
  unsigned int v148;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  unsigned __int8 v153;
  WebCore::Node *v154;
  WebCore::Node *v155;
  WebCore::Document *v156;
  uint64_t v157;
  int v158;
  WebCore::Node *v160;
  WebCore::Node *v161;
  int v162;
  const WebCore::Position *v163;
  int *v164;
  WebCore::Node *v165;
  WebCore::Node *v166;
  void *v167;
  WebCore::Node *v168;
  WebCore::Node *v169;
  unint64_t v170;
  uint64_t v171;
  float v172;
  uint64_t v173;
  float v174;
  WebCore::Editor *v175;
  void *v176;
  WebCore::Editor *v177;
  uint64_t v178;
  void *v179;
  WebCore::Editor *v180;
  void *v181;
  WebCore::Editor *v182;
  uint64_t v183;
  void *v184;
  WebCore::Editor *v185;
  WebCore::Editor *v186;
  WebCore::Editor *v187;
  _DWORD *v188;
  char v189;
  int v190;
  uint64_t v191;
  int v192;
  BOOL v193;
  char v194;
  int v195;
  char v196;
  char v197;
  const WebCore::VisiblePosition *v198;
  int v199;
  void *v200;
  WebCore::Node *v201;
  char v202;
  unsigned __int8 v203;
  void *v204;
  uint64_t *v205;
  unsigned __int8 v206;
  uint64_t v207;
  uint64_t v208;
  WebCore::Node *v209;
  WebCore::Node *v210;
  BOOL v211;
  WebCore::Node *v212;
  WebCore::Node *v213;
  WebCore::Node *v214;
  void *v215;
  WebCore::Node *v216;
  WTF *v217;
  WebCore::Node *v218;
  int v219;
  char v220;
  char v221;
  WebCore::Node *v222;
  int v223;
  char v224;
  char v225;
  WebCore::Node *v226;
  int v227;
  char v228;
  WebCore::Node *v229;
  int v230;
  char v231;
  uint64_t v232;
  int v233;
  char v234;
  uint64_t v235;
  int v236;
  char v237;
  uint64_t v238;
  int v239;
  char v240;
  uint64_t v241;
  int v242;
  char v243;
  __int16 v244;
  char v245;
  WebCore::Node *v246;
  int v247;
  char v248;
  char v249;
  WebCore::Node *v250;
  uint64_t v251;
  WebCore::Node *v252;
  _BYTE v253[16];
  int8x8_t v254;
  int v255;
  char v256;
  WebCore::Node *v257;
  int v258;
  char v259;
  uint64_t v260;
  int v261;
  char v262;
  uint64_t v263;
  int v264;
  char v265;
  WebCore::Node *v266;
  int v267;
  char v268;
  WebCore::Node *v269;
  int v270;
  char v271;
  __int16 v272;
  char v273;
  WebCore::Node *v274;
  int v275;
  char v276;
  WebCore::Node *v277;
  int v278;
  char v279;
  char v280;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v5 = (unsigned int *)(v4 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  {
    v7 = WebCore::EventHandler::dragState(void)::state;
    *(_QWORD *)&WebCore::EventHandler::dragState(void)::state = 0;
    if (v7)
    {
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
    }
  }
  else
  {
    WebCore::EventHandler::dragState(void)::state = 0u;
    *(_OWORD *)&qword_1EE2F7E10 = 0u;
  }
  v8 = *(_QWORD *)(v4 + 296);
  if (v8)
  {
    *(_DWORD *)(v8 + 24) += 2;
    WebCore::Document::updateLayout(v8, 2u, 0);
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8, v9);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  else
  {
    WebCore::Document::updateLayout(0, 2u, 0);
  }
  v11 = *(WebCore::ScrollView **)(v4 + 288);
  if (v11)
  {
    ++*((_DWORD *)v11 + 2);
    isPointInScrollbarCorner = WebCore::ScrollView::isPointInScrollbarCorner(v11, (const WebCore::IntPoint *)((char *)a2 + 52), v10);
    v13 = *((_DWORD *)v11 + 2) - 1;
    if (isPointInScrollbarCorner)
    {
      if (*((_DWORD *)v11 + 2) == 1)
      {
        (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v11 + 8))(v11);
        updated = 0;
      }
      else
      {
        updated = 0;
        *((_DWORD *)v11 + 2) = v13;
      }
      goto LABEL_317;
    }
    if (*((_DWORD *)v11 + 2) == 1)
      (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v11 + 8))(v11);
    else
      *((_DWORD *)v11 + 2) = v13;
  }
  v15 = (uint64_t *)(a2 + 7);
  v16 = *((_DWORD *)a2 + 28);
  v17 = *((_QWORD *)a2 + 25);
  if (v17)
    *(_DWORD *)(v17 + 24) += 2;
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 24);
  if (!v18 || (v19 = *(_QWORD *)(v18 + 8)) == 0)
  {
LABEL_23:
    if (v17)
      goto LABEL_24;
LABEL_53:
    v26 = 1;
    goto LABEL_54;
  }
  ++*(_DWORD *)v19;
  v20 = (*(uint64_t (**)(_QWORD, __int128 *))(**(_QWORD **)(*(_QWORD *)(v19 + 48) + 16) + 424))(*(_QWORD *)(*(_QWORD *)(v19 + 48) + 16), a2);
  v21 = *(_DWORD *)v19 - 1;
  if (!v20)
  {
    if (*(_DWORD *)v19 == 1)
    {
      WebCore::Page::~Page(v19);
      WTF::fastFree(v67, v68);
    }
    else
    {
      *(_DWORD *)v19 = v21;
    }
    v26 = 0;
    if (!v17)
      goto LABEL_54;
    goto LABEL_48;
  }
  if (*(_DWORD *)v19 != 1)
  {
    *(_DWORD *)v19 = v21;
    goto LABEL_23;
  }
  WebCore::Page::~Page(v19);
  WTF::fastFree(v33, v34);
  if (!v17)
    goto LABEL_53;
LABEL_24:
  if ((*(_QWORD *)(v17 + 64) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if (WebCore::ImageOverlay::isOverlayText((WebCore::ImageOverlay *)v17, (const WebCore::Node *)v9))
    {
      v22 = *(_QWORD *)(v17 + 64) & 0xFFFFFFFFFFFFLL;
      if ((*(_BYTE *)(v22 + 0x2D) & 2) != 0)
      {
        v22 = *(_QWORD *)((*(_QWORD *)(v17 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
        if (v22)
          v22 = *(_QWORD *)(v22 + 8);
      }
      v23 = *(_QWORD *)(v22 + 104);
      if ((*(_BYTE *)(v23 + 239) & 1) != 0)
      {
        v25 = 0;
      }
      else
      {
        v24 = *(_DWORD *)(v23 + 228);
        v25 = (v24 >> 15) & 3;
        if ((v24 & 0x30) != 0)
        {
          v69 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 88) + 32) + 148) & 0xC00000;
          v70 = v25 <= 1 ? 1 : (v24 >> 15) & 3;
          if (v69 != 0x800000)
            v25 = v70;
        }
      }
      v26 = v25 != 0;
      goto LABEL_48;
    }
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 248))(v17) & 1) == 0)
    {
      v27 = *(_QWORD *)(v17 + 64) & 0xFFFFFFFFFFFFLL;
      if (v27)
      {
        v28 = *(_DWORD *)((*(_QWORD *)(v17 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
        *(_DWORD *)((*(_QWORD *)(v17 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v28 + 1;
        v29 = (_QWORD *)v27;
        if ((*(_BYTE *)(v27 + 45) & 2) != 0)
        {
          v29 = *(_QWORD **)(v27 + 32);
          if (v29)
            v29 = (_QWORD *)v29[1];
        }
        if (v28 == -1)
        {
          __break(0xC471u);
          JUMPOUT(0x195F9F748);
        }
        v30 = v29[13];
        if ((*(_BYTE *)(v30 + 239) & 1) != 0)
        {
          v32 = 0;
        }
        else
        {
          v31 = *(_DWORD *)(v30 + 228);
          v32 = (v31 >> 15) & 3;
          if ((v31 & 0x30) != 0)
          {
            v114 = *(_DWORD *)(*(_QWORD *)(v29[11] + 32) + 148) & 0xC00000;
            v115 = v32 <= 1 ? 1 : (v31 >> 15) & 3;
            if (v114 != 0x800000)
              v32 = v115;
          }
        }
        v26 = v32 == 2;
        *(_DWORD *)(v27 + 16) = v28;
      }
      else
      {
        v26 = 0;
      }
      goto LABEL_48;
    }
  }
  v26 = 1;
LABEL_48:
  if (*(_DWORD *)(v17 + 24) == 2)
  {
    if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v17, v9);
  }
  else
  {
    *(_DWORD *)(v17 + 24) -= 2;
  }
LABEL_54:
  v35 = (uint64_t)(a2 + 8);
  if (*((_QWORD *)a2 + 30))
    v36 = 0;
  else
    v36 = v26;
  *(_BYTE *)(a1 + 180) = v36;
  v37 = *((_QWORD *)a2 + 25);
  if (v37)
  {
    *(_DWORD *)(v37 + 24) += 2;
    isOverlayText = WebCore::ImageOverlay::isOverlayText((WebCore::ImageOverlay *)v37, (const WebCore::Node *)v9);
    if (*(_DWORD *)(v37 + 24) == 2)
    {
      if ((*(_WORD *)(v37 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v37, v9);
    }
    else
    {
      *(_DWORD *)(v37 + 24) -= 2;
    }
  }
  else
  {
    isOverlayText = 0;
  }
  v39 = *((_QWORD *)a2 + 29);
  if (v39 && (*(_WORD *)(v39 + 30) & 1) != 0)
  {
    v41 = 1;
  }
  else
  {
    v40 = WebCore::HitTestResult::image((WebCore::HitTestResult *)(a2 + 8), (const WebCore::Node *)v9);
    v41 = isOverlayText ^ 1;
    if (!v40)
      v41 = 0;
  }
  if (v16 > 1)
    goto LABEL_71;
  if ((*((_BYTE *)a2 + 9) & 8) == 0)
    v41 = 1;
  if (v41 == 1)
    v42 = *(_BYTE *)(a1 + 793) != 0;
  else
LABEL_71:
    v42 = 0;
  *(_BYTE *)(a1 + 704) = v42;
  *(_BYTE *)(a1 + 182) = 0;
  v43 = *a2;
  v44 = a2[2];
  *(_OWORD *)(a1 + 352) = a2[1];
  *(_OWORD *)(a1 + 368) = v44;
  *(_OWORD *)(a1 + 336) = v43;
  v45 = a2[3];
  v46 = a2[4];
  v47 = a2[5];
  *(_DWORD *)(a1 + 432) = *((_DWORD *)a2 + 24);
  *(_OWORD *)(a1 + 400) = v46;
  *(_OWORD *)(a1 + 416) = v47;
  *(_OWORD *)(a1 + 384) = v45;
  v48 = (_DWORD *)*((_QWORD *)a2 + 13);
  if (v48)
    *v48 += 2;
  v49 = *(WTF::StringImpl **)(a1 + 440);
  *(_QWORD *)(a1 + 440) = v48;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v9);
    else
      *(_DWORD *)v49 -= 2;
  }
  v50 = *v15;
  *(_WORD *)(a1 + 456) = *((_WORD *)a2 + 60);
  *(_QWORD *)(a1 + 448) = v50;
  if (*(_BYTE *)(a1 + 193) != 1)
    *(_BYTE *)(a1 + 193) = 0;
  if (*((_BYTE *)a2 + 248))
  {
    v51 = *((_QWORD *)a2 + 25);
    if (v51)
    {
      v52 = *(_QWORD *)(v51 + 64) & 0xFFFFFFFFFFFFLL;
      if (v52)
      {
        v53 = (*(unsigned __int8 *)(v52 + 53) >> 2) & 1;
        if ((*(_BYTE *)(v52 + 52) & 7) != 3)
          v53 = 0;
        if (v53 == 1
          && WebCore::EventHandler::passMouseDownEventToWidget((WebCore::EventHandler *)a1, *(WebCore::Widget **)(v52 + 232)))
        {
          goto LABEL_116;
        }
      }
    }
  }
  v54 = *(_QWORD *)(v4 + 296);
  if (v54)
    *(_DWORD *)(v54 + 24) += 2;
  if ((*(_WORD *)(v54 + 3358) & 0x20) != 0)
    v55 = v54;
  else
    v55 = 0;
  if (v55)
    *(_DWORD *)(v55 + 24) += 2;
  if (*(_DWORD *)(v54 + 24) == 2)
  {
    if ((*(_WORD *)(v54 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v54, v9);
  }
  else
  {
    *(_DWORD *)(v54 + 24) -= 2;
  }
  if (v55)
  {
    v56 = *(_QWORD *)(v55 + 1272);
    if (v56
      && (*(_WORD *)(v56 + 28) & 0x20) != 0
      && *(_QWORD *)(*(_QWORD *)(v56 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
    {
      v57 = *(_DWORD *)(v56 + 24);
      *(_DWORD *)(v56 + 24) = v57 + 2;
      if (*(_BYTE *)(v56 + 240))
      {
        v58 = (int *)(WebCore::SVGSVGElement::currentView((WebCore::SVGSVGElement *)v56) + 28);
        v57 = *(_DWORD *)(v56 + 24) - 2;
      }
      else
      {
        v58 = (int *)(v56 + 236);
      }
      v59 = *v58;
      if (v57)
      {
        *(_DWORD *)(v56 + 24) = v57;
        if (v59 == 2)
          goto LABEL_104;
      }
      else
      {
        if ((*(_WORD *)(v56 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v56, v9);
        if (v59 == 2)
        {
LABEL_104:
          if ((*((_BYTE *)a2 + 9) & 8) != 0 && v16 <= 1)
          {
            *(_BYTE *)(a1 + 189) = 1;
            v60 = *(WebCore::ScrollView **)(v4 + 288);
            if (v60)
            {
              ++*((_DWORD *)v60 + 2);
              v62 = WebCore::ScrollView::windowToContents(v60, (const WebCore::IntPoint *)((char *)a2 + 52), v10);
              v63 = *(_QWORD *)(v55 + 1272);
              if (v63
                && (*(_WORD *)(v63 + 28) & 0x20) != 0
                && *(_QWORD *)(*(_QWORD *)(v63 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
              {
                v64 = (float)(int)v62;
                LODWORD(v62) = *(_DWORD *)(v63 + 24);
                *(_DWORD *)(v63 + 24) = v62 + 2;
                v65 = *(_QWORD *)(v63 + 280);
                v66 = (float)SHIDWORD(v62) - *(float *)(v65 + 32);
                *(float *)(v55 + 3512) = v64 - *(float *)(v65 + 28);
                *(float *)(v55 + 3516) = v66;
                if ((_DWORD)v62)
                {
                  *(_DWORD *)(v63 + 24) = v62;
                }
                else if ((*(_WORD *)(v63 + 30) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef((WebCore::Node *)v63, v61);
                }
              }
              if (*((_DWORD *)v60 + 2) == 1)
                (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v60 + 8))(v60);
              else
                --*((_DWORD *)v60 + 2);
            }
            else
            {
              v170 = WebCore::ScrollView::windowToContents(0, (const WebCore::IntPoint *)((char *)a2 + 52), v10);
              v171 = *(_QWORD *)(v55 + 1272);
              if (v171
                && (*(_WORD *)(v171 + 28) & 0x20) != 0
                && *(_QWORD *)(*(_QWORD *)(v171 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
              {
                v172 = (float)(int)v170;
                LODWORD(v170) = *(_DWORD *)(v171 + 24);
                *(_DWORD *)(v171 + 24) = v170 + 2;
                v173 = *(_QWORD *)(v171 + 280);
                v174 = (float)SHIDWORD(v170) - *(float *)(v173 + 32);
                *(float *)(v55 + 3512) = v172 - *(float *)(v173 + 28);
                *(float *)(v55 + 3516) = v174;
                if ((_DWORD)v170)
                {
                  *(_DWORD *)(v171 + 24) = v170;
                }
                else if ((*(_WORD *)(v171 + 30) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef((WebCore::Node *)v171, v61);
                }
              }
            }
            if (*(_DWORD *)(v55 + 24) == 2)
            {
              if ((*(_WORD *)(v55 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v55, v61);
            }
            else
            {
              *(_DWORD *)(v55 + 24) -= 2;
            }
LABEL_116:
            updated = 1;
            goto LABEL_317;
          }
        }
      }
    }
    if (*(_DWORD *)(v55 + 24) == 2)
    {
      if ((*(_WORD *)(v55 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v55, v9);
    }
    else
    {
      *(_DWORD *)(v55 + 24) -= 2;
    }
  }
  if (v16 <= 1)
    WebCore::EventHandler::focusDocumentView(a1);
  v71 = *((_QWORD *)a2 + 25);
  if (v71)
    *(_DWORD *)(v71 + 24) += 2;
  v72 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v71;
  if (v72)
  {
    if (*(_DWORD *)(v72 + 24) == 2)
    {
      if ((*(_WORD *)(v72 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v72, v9);
    }
    else
    {
      *(_DWORD *)(v72 + 24) -= 2;
    }
  }
  v73 = *(_QWORD *)(v4 + 296);
  if (v73)
    *(_DWORD *)(v73 + 24) += 2;
  v74 = *((_QWORD *)a2 + 25);
  if (v74)
  {
    *(_DWORD *)(v74 + 24) += 2;
    WebCore::Document::setFocusNavigationStartingNode((uint64_t *)v73, (WebCore::Node *)v74);
    if (*(_DWORD *)(v74 + 24) == 2)
    {
      if ((*(_WORD *)(v74 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v74, v75);
    }
    else
    {
      *(_DWORD *)(v74 + 24) -= 2;
    }
  }
  else
  {
    WebCore::Document::setFocusNavigationStartingNode((uint64_t *)v73, 0);
  }
  if (v73)
  {
    if (*(_DWORD *)(v73 + 24) == 2)
    {
      if ((*(_WORD *)(v73 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v73, v75);
    }
    else
    {
      *(_DWORD *)(v73 + 24) -= 2;
    }
  }
  v76 = a2 + 3;
  v77 = *((_DWORD *)a2 + 13);
  v78 = *((_DWORD *)a2 + 14);
  LODWORD(v79) = v77 << 6;
  if (v77 < -33554432)
    LODWORD(v79) = 0x80000000;
  if (v77 <= 0x1FFFFFF)
    v79 = v79;
  else
    v79 = 0x7FFFFFFFLL;
  if (v78 >= -33554432)
    v80 = v78 << 6;
  else
    v80 = 0x80000000;
  if (v78 <= 0x1FFFFFF)
    v81 = v80;
  else
    v81 = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 648) = v79 | (v81 << 32);
  *(_BYTE *)(a1 + 168) = 1;
  *(_BYTE *)(a1 + 192) = 0;
  v82 = *((_DWORD *)a2 + 28);
  if (v82 != 2)
  {
    if (v82 >= 3)
    {
      if (!*v76)
      {
        v106 = *((_QWORD *)a2 + 25);
        if (v106)
        {
          v107 = *(_DWORD *)(v106 + 24);
          *(_DWORD *)(v106 + 24) = v107 + 2;
          v108 = *(_QWORD *)(v106 + 64) & 0xFFFFFFFFFFFFLL;
          if (v108
            && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 136) + 696) & 0x10000000000000) != 0
            && *(_BYTE *)(a1 + 180))
          {
            v254 = 0;
            v255 = 0;
            v256 = 0;
            v257 = 0;
            v258 = 0;
            v259 = 0;
            v260 = 0;
            v261 = 0;
            v262 = 0;
            v263 = 0;
            v264 = 0;
            v265 = 0;
            v266 = 0;
            v267 = 0;
            v268 = 0;
            v269 = 0;
            v270 = 0;
            v271 = 0;
            v272 = 1;
            v273 = 1;
            v246 = (WebCore::Node *)*((_QWORD *)a2 + 28);
            (*(void (**)(WebCore::Node **__return_ptr, uint64_t, WebCore::Node **, uint64_t, _QWORD))(*(_QWORD *)v108 + 352))(&v226, v108, &v246, 1, 0);
            if (v226)
              v109 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
            else
              v109 = 0;
            if (v109)
            {
              WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v246, (const WebCore::VisiblePosition *)&v226, 0);
              WebCore::VisibleSelection::operator=((uint64_t *)&v254, (uint64_t *)&v246);
              WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v246);
              if (HIBYTE(v272))
                WebCore::VisibleSelection::validate((uint64_t)&v254, 4);
            }
            WebCore::expandSelectionToRespectSelectOnMouseDown((WebCore *)&v246, (WebCore::Node *)v106, (const WebCore::VisibleSelection *)&v254);
            updated = WebCore::EventHandler::updateSelectionForMouseDownDispatchingSelectStart(a1, (_QWORD *)v106, (WebCore::VisibleSelection *)&v246, 4);
            WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v246);
            v111 = v226;
            v226 = 0;
            if (v111)
            {
              if (*((_DWORD *)v111 + 6) == 2)
              {
                if ((*((_WORD *)v111 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v111, v110);
              }
              else
              {
                *((_DWORD *)v111 + 6) -= 2;
              }
            }
            WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v254);
            v107 = *(_DWORD *)(v106 + 24) - 2;
          }
          else
          {
            updated = 0;
          }
          if (v107)
          {
            *(_DWORD *)(v106 + 24) = v107;
          }
          else if ((*(_WORD *)(v106 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v106, v75);
          }
          goto LABEL_308;
        }
      }
LABEL_171:
      updated = 0;
      goto LABEL_308;
    }
    v88 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    v89 = (unsigned int *)(v88 + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 + 1, v89));
    v91 = *(_QWORD *)(v88 + 296);
    if (v91)
    {
      *(_DWORD *)(v91 + 24) += 2;
      WebCore::Document::updateLayout(v91, 2u, 0);
      if (*(_DWORD *)(v91 + 24) == 2)
      {
        if ((*(_WORD *)(v91 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v91, v92);
      }
      else
      {
        *(_DWORD *)(v91 + 24) -= 2;
      }
    }
    else
    {
      WebCore::Document::updateLayout(0, 2u, 0);
    }
    v94 = *((_QWORD *)a2 + 25);
    if (!v94)
    {
      updated = 0;
      do
      {
LABEL_185:
        v95 = __ldaxr(v89);
        v96 = v95 - 1;
      }
      while (__stlxr(v96, v89));
      if (v96)
        goto LABEL_308;
      atomic_store(1u, v89);
      v97 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v97 = off_1E31FE290;
      v97[1] = v89;
      goto LABEL_188;
    }
    *(_DWORD *)(v94 + 24) += 2;
    if ((*(_QWORD *)(v94 + 64) & 0xFFFFFFFFFFFFLL) == 0
      || (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 136) + 696) & 0x10000000000000) == 0
      || !*(_BYTE *)(a1 + 180)
      || *(_BYTE *)(a1 + 181))
    {
      goto LABEL_182;
    }
    if ((*((_BYTE *)a2 + 9) & 8) != 0)
    {
      v116 = *((_QWORD *)a2 + 29);
      if (v116)
        LODWORD(v116) = *(_WORD *)(v116 + 30) & 1;
      v113 = v116 ^ 1;
    }
    else
    {
      v113 = 0;
    }
    v117 = *(WebCore::ScrollView **)(v88 + 288);
    if (v117)
    {
      ++*((_DWORD *)v117 + 2);
      v118 = WebCore::ScrollView::windowToContents(v117, (const WebCore::IntPoint *)((char *)a2 + 52), v93);
      v119 = (int8x8_t)vcgt_s32((int32x2_t)v118, (int32x2_t)0xFE000000FE000000);
      v254 = vorr_s8((int8x8_t)(*(_QWORD *)&v119 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)v118), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32((int32x2_t)v118, 6uLL)), v119));
      if ((v113 & 1) == 0
        && WebCore::FrameSelection::contains(*(WebCore::FrameSelection **)(*(_QWORD *)(v88 + 296) + 3064), (const WebCore::LayoutPoint *)&v254))
      {
        *(_BYTE *)(a1 + 182) = 1;
        if (*((_DWORD *)v117 + 2) != 1)
        {
          updated = 0;
          --*((_DWORD *)v117 + 2);
LABEL_183:
          if (*(_DWORD *)(v94 + 24) == 2)
          {
            if ((*(_WORD *)(v94 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v94, v92);
          }
          else
          {
            *(_DWORD *)(v94 + 24) -= 2;
          }
          goto LABEL_185;
        }
        (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v117 + 8))(v117);
LABEL_182:
        updated = 0;
        goto LABEL_183;
      }
      if (*((_DWORD *)v117 + 2) == 1)
        (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v117 + 8))(v117);
      else
        --*((_DWORD *)v117 + 2);
    }
    v120 = *(_QWORD *)(v94 + 64) & 0xFFFFFFFFFFFFLL;
    v254 = (int8x8_t)a2[14];
    (*(void (**)(WebCore::Node **__return_ptr, uint64_t, int8x8_t *, uint64_t, _QWORD))(*(_QWORD *)v120 + 352))(&v277, v120, &v254, 1, 0);
    v122 = v277;
    if (v277)
      goto LABEL_258;
    WebCore::firstPositionInOrBeforeNode(v94, v121, (uint64_t)&v246);
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v246, (uint64_t)&v254);
    LOBYTE(v257) = 1;
    v124 = v277;
    v277 = (WebCore::Node *)v254;
    if (v124)
    {
      if (*((_DWORD *)v124 + 6) == 2)
      {
        if ((*((_WORD *)v124 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v124, v123);
      }
      else
      {
        *((_DWORD *)v124 + 6) -= 2;
      }
    }
    v278 = v255;
    v279 = v256;
    v280 = 1;
    v125 = v246;
    v246 = 0;
    if (v125)
    {
      if (*((_DWORD *)v125 + 6) == 2)
      {
        if ((*((_WORD *)v125 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v125, v123);
      }
      else
      {
        *((_DWORD *)v125 + 6) -= 2;
      }
    }
    v122 = v277;
    if (v277)
LABEL_258:
      *((_DWORD *)v122 + 6) += 2;
    v274 = v122;
    v275 = v278;
    v276 = v279;
    v126 = *(WebCore::Document **)(v88 + 296);
    v127 = *((_QWORD *)v126 + 383);
    v128 = *(_QWORD *)(v127 + 56);
    if (v128)
      *(_DWORD *)(v128 + 24) += 2;
    v254 = (int8x8_t)v128;
    v255 = *(_DWORD *)(v127 + 64);
    v256 = *(_BYTE *)(v127 + 68);
    v129 = *(WebCore::Node **)(v127 + 72);
    if (v129)
      *((_DWORD *)v129 + 6) += 2;
    v257 = v129;
    v258 = *(_DWORD *)(v127 + 80);
    v259 = *(_BYTE *)(v127 + 84);
    v130 = *(_QWORD *)(v127 + 88);
    if (v130)
      *(_DWORD *)(v130 + 24) += 2;
    v260 = v130;
    v261 = *(_DWORD *)(v127 + 96);
    v262 = *(_BYTE *)(v127 + 100);
    v131 = *(_QWORD *)(v127 + 104);
    if (v131)
      *(_DWORD *)(v131 + 24) += 2;
    v263 = v131;
    v264 = *(_DWORD *)(v127 + 112);
    v265 = *(_BYTE *)(v127 + 116);
    v132 = *(WebCore::Node **)(v127 + 120);
    if (v132)
      *((_DWORD *)v132 + 6) += 2;
    v266 = v132;
    v267 = *(_DWORD *)(v127 + 128);
    v268 = *(_BYTE *)(v127 + 132);
    v133 = *(WebCore::Node **)(v127 + 136);
    if (v133)
      *((_DWORD *)v133 + 6) += 2;
    v269 = v133;
    v270 = *(_DWORD *)(v127 + 144);
    v271 = *(_BYTE *)(v127 + 148);
    v272 = *(_WORD *)(v127 + 152);
    v273 = *(_BYTE *)(v127 + 154);
    v134 = *((_QWORD *)v126 + 382);
    if (!v134)
    {
      v180 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v180, v126);
      v182 = (WebCore::Editor *)*((_QWORD *)v126 + 382);
      *((_QWORD *)v126 + 382) = v180;
      if (v182)
      {
        WebCore::Editor::~Editor(v182, v181);
        if (*(_DWORD *)v183)
        {
          *(_QWORD *)(v183 + 496) = 0;
          *(_OWORD *)(v183 + 464) = 0u;
          *(_OWORD *)(v183 + 480) = 0u;
          *(_OWORD *)(v183 + 432) = 0u;
          *(_OWORD *)(v183 + 448) = 0u;
          *(_OWORD *)(v183 + 400) = 0u;
          *(_OWORD *)(v183 + 416) = 0u;
          *(_OWORD *)(v183 + 368) = 0u;
          *(_OWORD *)(v183 + 384) = 0u;
          *(_OWORD *)(v183 + 336) = 0u;
          *(_OWORD *)(v183 + 352) = 0u;
          *(_OWORD *)(v183 + 304) = 0u;
          *(_OWORD *)(v183 + 320) = 0u;
          *(_OWORD *)(v183 + 272) = 0u;
          *(_OWORD *)(v183 + 288) = 0u;
          *(_OWORD *)(v183 + 240) = 0u;
          *(_OWORD *)(v183 + 256) = 0u;
          *(_OWORD *)(v183 + 208) = 0u;
          *(_OWORD *)(v183 + 224) = 0u;
          *(_OWORD *)(v183 + 176) = 0u;
          *(_OWORD *)(v183 + 192) = 0u;
          *(_OWORD *)(v183 + 144) = 0u;
          *(_OWORD *)(v183 + 160) = 0u;
          *(_OWORD *)(v183 + 112) = 0u;
          *(_OWORD *)(v183 + 128) = 0u;
          *(_OWORD *)(v183 + 80) = 0u;
          *(_OWORD *)(v183 + 96) = 0u;
          *(_OWORD *)(v183 + 48) = 0u;
          *(_OWORD *)(v183 + 64) = 0u;
          *(_OWORD *)(v183 + 16) = 0u;
          *(_OWORD *)(v183 + 32) = 0u;
          *(_OWORD *)v183 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v183, v184);
        }
      }
      v134 = *((_QWORD *)v126 + 382);
    }
    if (!(*(unsigned int (**)(_QWORD, uint64_t, int8x8_t *))(**(_QWORD **)(*(_QWORD *)(v134 + 8) + 8)
                                                                      + 656))(*(_QWORD *)(*(_QWORD *)(v134 + 8) + 8), v94, &v254))
    {
      updated = 1;
LABEL_493:
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v254);
      v212 = v274;
      v274 = 0;
      if (v212)
      {
        if (*((_DWORD *)v212 + 6) == 2)
        {
          if ((*((_WORD *)v212 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v212, v92);
        }
        else
        {
          *((_DWORD *)v212 + 6) -= 2;
        }
      }
      v213 = v277;
      v277 = 0;
      if (v213)
      {
        if (*((_DWORD *)v213 + 6) == 2)
        {
          if ((*((_WORD *)v213 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v213, v92);
        }
        else
        {
          *((_DWORD *)v213 + 6) -= 2;
        }
      }
      goto LABEL_183;
    }
    if (!v113 || !HIBYTE(v272))
    {
      if (*((_BYTE *)a2 + 49))
      {
        WebCore::wordBoundaryForPositionWithoutCrossingLine((WebCore *)&v277, (uint64_t)&v246);
        LODWORD(v226) = v247;
        BYTE4(v226) = v248;
        v142 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
        if (!v246)
          v142 = 0;
        if (v142)
        {
          v143 = v249;
          v144 = v277;
          v277 = v246;
          if (v144)
          {
            if (*((_DWORD *)v144 + 6) == 2)
            {
              if ((*((_WORD *)v144 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v144, v141);
            }
            else
            {
              *((_DWORD *)v144 + 6) -= 2;
            }
          }
          v278 = (int)v226;
          v279 = BYTE4(v226);
          v280 = v143;
        }
        else if (v246)
        {
          if (*((_DWORD *)v246 + 6) == 2)
          {
            if ((*((_WORD *)v246 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v246, v141);
          }
          else
          {
            *((_DWORD *)v246 + 6) -= 2;
          }
        }
      }
      WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v226, (const WebCore::VisiblePosition *)&v277, 0);
      WebCore::expandSelectionToRespectSelectOnMouseDown((WebCore *)&v246, (WebCore::Node *)v94, (const WebCore::VisibleSelection *)&v226);
      WebCore::VisibleSelection::operator=((uint64_t *)&v254, (uint64_t *)&v246);
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v246);
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v226);
      v152 = 0;
      goto LABEL_492;
    }
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v274, (uint64_t)&v222);
    v225 = 1;
    WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v226, (const WebCore::VisiblePosition *)&v222, 0);
    WebCore::expandSelectionToRespectSelectOnMouseDown((WebCore *)&v246, (WebCore::Node *)v94, (const WebCore::VisibleSelection *)&v226);
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v226);
    if (v222)
    {
      if (*((_DWORD *)v222 + 6) == 2)
      {
        if ((*((_WORD *)v222 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v222, v135);
      }
      else
      {
        *((_DWORD *)v222 + 6) -= 2;
      }
    }
    if (v253[9] == 2)
    {
      v137 = WebCore::treeOrder<(WebCore::TreeType)2>((WebCore *)&v250, (uint64_t)&v266);
      if (v137 != 129 && (char)v137 < 0)
      {
        v138 = v250;
        if (v250)
          *((_DWORD *)v250 + 6) += 2;
        v139 = v274;
        v274 = v138;
        if (v139)
        {
          if (*((_DWORD *)v139 + 6) == 2)
          {
            if ((*((_WORD *)v139 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v139, v135);
          }
          else
          {
            *((_DWORD *)v139 + 6) -= 2;
          }
        }
        v140 = &v251;
LABEL_343:
        v275 = *(_DWORD *)v140;
        v276 = *((_BYTE *)v140 + 4);
        goto LABEL_344;
      }
      v153 = WebCore::treeOrder<(WebCore::TreeType)2>((WebCore *)&v269, (uint64_t)&v252);
      if (v153 != 129 && (char)v153 < 0)
      {
        v154 = v252;
        if (v252)
          *((_DWORD *)v252 + 6) += 2;
        v155 = v274;
        v274 = v154;
        if (v155)
        {
          if (*((_DWORD *)v155 + 6) == 2)
          {
            if ((*((_WORD *)v155 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v155, v135);
          }
          else
          {
            *((_DWORD *)v155 + 6) -= 2;
          }
        }
        v140 = (uint64_t *)v253;
        goto LABEL_343;
      }
    }
LABEL_344:
    v156 = *(WebCore::Document **)(v88 + 296);
    v157 = *((_QWORD *)v156 + 382);
    if (!v157)
    {
      v185 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      v186 = WebCore::Editor::Editor(v185, v156);
      v187 = (WebCore::Editor *)*((_QWORD *)v156 + 382);
      *((_QWORD *)v156 + 382) = v186;
      v217 = v187;
      if (v187)
      {
        WebCore::Editor::~Editor(v187, v135);
        if (*v188)
        {
          *((_QWORD *)v217 + 62) = 0;
          *((_OWORD *)v217 + 29) = 0u;
          *((_OWORD *)v217 + 30) = 0u;
          *((_OWORD *)v217 + 27) = 0u;
          *((_OWORD *)v217 + 28) = 0u;
          *((_OWORD *)v217 + 25) = 0u;
          *((_OWORD *)v217 + 26) = 0u;
          *((_OWORD *)v217 + 23) = 0u;
          *((_OWORD *)v217 + 24) = 0u;
          *((_OWORD *)v217 + 21) = 0u;
          *((_OWORD *)v217 + 22) = 0u;
          *((_OWORD *)v217 + 19) = 0u;
          *((_OWORD *)v217 + 20) = 0u;
          *((_OWORD *)v217 + 17) = 0u;
          *((_OWORD *)v217 + 18) = 0u;
          *((_OWORD *)v217 + 15) = 0u;
          *((_OWORD *)v217 + 16) = 0u;
          *((_OWORD *)v217 + 13) = 0u;
          *((_OWORD *)v217 + 14) = 0u;
          *((_OWORD *)v217 + 11) = 0u;
          *((_OWORD *)v217 + 12) = 0u;
          *((_OWORD *)v217 + 9) = 0u;
          *((_OWORD *)v217 + 10) = 0u;
          *((_OWORD *)v217 + 7) = 0u;
          *((_OWORD *)v217 + 8) = 0u;
          *((_OWORD *)v217 + 5) = 0u;
          *((_OWORD *)v217 + 6) = 0u;
          *((_OWORD *)v217 + 3) = 0u;
          *((_OWORD *)v217 + 4) = 0u;
          *((_OWORD *)v217 + 1) = 0u;
          *((_OWORD *)v217 + 2) = 0u;
          *(_OWORD *)v217 = 0u;
        }
        else
        {
          WTF::fastFree(v217, v135);
        }
      }
      v157 = *((_QWORD *)v156 + 382);
    }
    v158 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v157 + 16) + 8) + 680) + 370);
    if (!v158 || v158 == 3)
    {
      if (v274
         ? WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance
         : 0)
      {
        v160 = v266;
        if (v266)
          *((_DWORD *)v266 + 6) += 2;
        v222 = v160;
        v223 = v267;
        v224 = v268;
        v161 = v269;
        if (v269)
          *((_DWORD *)v269 + 6) += 2;
        v218 = v161;
        v219 = v270;
        v220 = v271;
        v162 = WebCore::textDistance((WebCore *)&v222, (const WebCore::Position *)&v274, v136);
        if (v162 <= (int)WebCore::textDistance((WebCore *)&v274, (const WebCore::Position *)&v218, v163))
        {
          v164 = &v219;
          v165 = v218;
          if (!v218)
            goto LABEL_357;
        }
        else
        {
          v164 = &v223;
          v165 = v222;
          if (!v222)
          {
LABEL_357:
            v226 = v165;
            v227 = *v164;
            v228 = *((_BYTE *)v164 + 4);
            v166 = v274;
            if (v274)
              *((_DWORD *)v274 + 6) += 2;
            v229 = v166;
            v230 = v275;
            v231 = v276;
            v232 = 0;
            v233 = 0;
            v234 &= 0xF0u;
            v235 = 0;
            v236 = 0;
            v237 &= 0xF0u;
            v238 = 0;
            v239 = 0;
            v240 &= 0xF0u;
            v241 = 0;
            v242 = 0;
            v243 &= 0xF0u;
            v244 = 1;
            v245 &= ~2u;
            WebCore::VisibleSelection::validate((uint64_t)&v226, 0);
            WebCore::VisibleSelection::operator=((uint64_t *)&v254, (uint64_t *)&v226);
            WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v226);
            v168 = v218;
            v218 = 0;
            if (v168)
            {
              if (*((_DWORD *)v168 + 6) == 2)
              {
                if ((*((_WORD *)v168 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v168, v167);
              }
              else
              {
                *((_DWORD *)v168 + 6) -= 2;
              }
            }
            v169 = v222;
            v222 = 0;
            if (v169)
            {
              if (*((_DWORD *)v169 + 6) == 2)
              {
                if ((*((_WORD *)v169 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v169, v167);
              }
              else
              {
                *((_DWORD *)v169 + 6) -= 2;
              }
            }
LABEL_486:
            v152 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v88 + 296) + 3064) + 184);
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v88 + 296) + 3064) + 184))
              v211 = HIBYTE(v272) == 0;
            else
              v211 = 1;
            if (!v211)
              WebCore::VisibleSelection::validate((uint64_t)&v254, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v88 + 296) + 3064) + 184));
            WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v246);
LABEL_492:
            updated = WebCore::EventHandler::updateSelectionForMouseDownDispatchingSelectStart(a1, (_QWORD *)v94, (WebCore::VisibleSelection *)&v254, v152);
            goto LABEL_493;
          }
        }
        *((_DWORD *)v165 + 6) += 2;
        goto LABEL_357;
      }
    }
    if ((v273 & 2) == 0)
      goto LABEL_480;
    if ((v273 & 1) != 0)
    {
      if (!v260)
        goto LABEL_480;
      v189 = v262;
      v190 = v262 & 7;
      v191 = v260;
      switch(v262 & 7)
      {
        case 0:
          if ((*(_WORD *)(v260 + 28) & 4) == 0)
            goto LABEL_453;
          v191 = *(_QWORD *)(v260 + 80);
          if (v261 && v191)
          {
            v192 = v261 - 1;
            do
            {
              v191 = *(_QWORD *)(v191 + 56);
              v193 = v192-- != 0;
              v194 = v193;
            }
            while (v191 && (v194 & 1) != 0);
          }
          break;
        case 1:
          goto LABEL_454;
        case 2:
          v191 = *(_QWORD *)(v260 + 56);
          goto LABEL_420;
        case 3:
          if ((*(_WORD *)(v260 + 28) & 4) == 0)
            goto LABEL_453;
          v191 = *(_QWORD *)(v260 + 80);
          break;
        default:
          goto LABEL_451;
      }
      goto LABEL_420;
    }
    if (!v260)
      goto LABEL_480;
    v189 = v262;
    v190 = v262 & 7;
    if (v190 == 4)
    {
      if ((*(_WORD *)(v260 + 28) & 4) != 0)
      {
        v191 = *(_QWORD *)(v260 + 88);
LABEL_420:
        if (v191)
          goto LABEL_454;
        v190 = v189 & 7;
        goto LABEL_451;
      }
    }
    else
    {
      if ((v262 & 7) == 0)
      {
        if (!v261 || (*(_WORD *)(v260 + 28) & 4) == 0)
          goto LABEL_453;
        v191 = *(_QWORD *)(v260 + 80);
        if (v261 != 1 && v191)
        {
          v195 = v261 - 2;
          do
          {
            v191 = *(_QWORD *)(v191 + 56);
            v193 = v195-- != 0;
            v196 = v193;
          }
          while (v191 && (v196 & 1) != 0);
        }
        goto LABEL_420;
      }
      if (v190 == 1)
      {
        v191 = *(_QWORD *)(v260 + 48) & 0xFFFFFFFFFFFFLL;
        goto LABEL_420;
      }
      if (v190 != 2)
      {
LABEL_451:
        if ((v190 - 3) < 2 || !v190)
          goto LABEL_453;
        if ((v190 - 1) <= 1)
        {
          v191 = *(_QWORD *)(v260 + 32);
          if (v191)
          {
LABEL_454:
            *(_DWORD *)(v191 + 24) += 2;
            if (HIBYTE(v272) == 2)
            {
              v197 = v273;
              WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v260, (uint64_t)&v218);
              v221 = 1;
              if ((v197 & 1) == 0)
                goto LABEL_458;
            }
            else
            {
              v199 = v272;
              WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v260, (uint64_t)&v218);
              v221 = 1;
              if (v199)
                goto LABEL_458;
            }
            v214 = v218;
            if (v218)
            {
              *((_DWORD *)v218 + 6) += 2;
              v226 = v214;
              v227 = v219;
              v228 = v220;
              LOBYTE(v229) = 0;
              if (!WebCore::inSameLine((WebCore *)&v218, (const WebCore::VisiblePosition *)&v226, v198))
                v221 = 0;
              v216 = v226;
              v226 = 0;
              if (v216)
              {
                if (*((_DWORD *)v216 + 6) == 2)
                {
                  if ((*((_WORD *)v216 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v216, v215);
                }
                else
                {
                  *((_DWORD *)v216 + 6) -= 2;
                }
              }
            }
LABEL_458:
            WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v222, (const WebCore::VisiblePosition *)&v218, 0);
            WebCore::expandSelectionToRespectSelectOnMouseDown((WebCore *)&v226, (WebCore::Node *)v191, (const WebCore::VisibleSelection *)&v222);
            WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v222);
            v201 = v218;
            v218 = 0;
            if (v201)
            {
              if (*((_DWORD *)v201 + 6) == 2)
              {
                if ((*((_WORD *)v201 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v201, v200);
              }
              else
              {
                *((_DWORD *)v201 + 6) -= 2;
              }
            }
            if (!HIBYTE(v244))
              goto LABEL_478;
            WebCore::VisibleSelection::validate((uint64_t)&v226, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v88 + 296) + 3064) + 184));
            if (HIBYTE(v244) != 2)
              goto LABEL_478;
            v202 = v273;
            if ((v273 & 1) != 0)
            {
              v203 = WebCore::treeOrder<(WebCore::TreeType)2>((WebCore *)&v274, (uint64_t)&v266);
              if (v203 != 129 && (char)v203 < 0)
              {
                v205 = &v241;
                goto LABEL_472;
              }
              v202 = v273;
            }
            if ((v202 & 1) != 0
              || (v206 = WebCore::treeOrder<(WebCore::TreeType)2>((WebCore *)&v269, (uint64_t)&v274), v206 == 129)
              || ((char)v206 & 0x80000000) == 0)
            {
LABEL_478:
              WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v226);
              if (*(_DWORD *)(v191 + 24) == 2)
              {
                if ((*(_WORD *)(v191 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v191, v135);
              }
              else
              {
                *(_DWORD *)(v191 + 24) -= 2;
              }
              goto LABEL_480;
            }
            v205 = &v238;
LABEL_472:
            v207 = *v205;
            if (*v205)
              *(_DWORD *)(v207 + 24) += 2;
            v208 = (uint64_t)v254;
            v254 = (int8x8_t)v207;
            if (v208)
            {
              if (*(_DWORD *)(v208 + 24) == 2)
              {
                if ((*(_WORD *)(v208 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v208, v204);
              }
              else
              {
                *(_DWORD *)(v208 + 24) -= 2;
              }
            }
            v255 = *((_DWORD *)v205 + 2);
            v256 = *((_BYTE *)v205 + 12);
            WebCore::VisibleSelection::validate((uint64_t)&v254, 0);
            goto LABEL_478;
          }
        }
LABEL_480:
        v209 = v274;
        if (v274)
          *((_DWORD *)v274 + 6) += 2;
        v210 = v257;
        v257 = v209;
        if (v210)
        {
          if (*((_DWORD *)v210 + 6) == 2)
          {
            if ((*((_WORD *)v210 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v210, v135);
          }
          else
          {
            *((_DWORD *)v210 + 6) -= 2;
          }
        }
        v258 = v275;
        v259 = v276;
        WebCore::VisibleSelection::validate((uint64_t)&v254, 0);
        goto LABEL_486;
      }
    }
LABEL_453:
    v191 = v260;
    goto LABEL_454;
  }
  if (*v76)
    goto LABEL_171;
  v83 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v84 = *(_QWORD *)(*(_QWORD *)(v83 + 296) + 3064);
  if (*(_BYTE *)(v84 + 153) == 2)
  {
    *(_BYTE *)(a1 + 192) = 2;
    WebCore::VisibleSelection::range((WebCore::VisibleSelection *)(v84 + 56), (uint64_t)&v254);
    std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>(a1 + 656, (uint64_t *)&v254);
    if ((_BYTE)v260)
    {
      v86 = v257;
      v257 = 0;
      if (v86)
      {
        if (*((_DWORD *)v86 + 6) == 2)
        {
          if ((*((_WORD *)v86 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v86, v85);
        }
        else
        {
          *((_DWORD *)v86 + 6) -= 2;
        }
      }
      v87 = (uint64_t)v254;
      v254 = 0;
      if (v87)
      {
        if (*(_DWORD *)(v87 + 24) == 2)
        {
          if ((*(_WORD *)(v87 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v87, v85);
        }
        else
        {
          *(_DWORD *)(v87 + 24) -= 2;
        }
      }
    }
    goto LABEL_307;
  }
  if ((*(_QWORD *)(*(_QWORD *)(v83 + 136) + 696) & 0x10000000000000) == 0 || !*(_BYTE *)(a1 + 180))
  {
LABEL_307:
    updated = 1;
    goto LABEL_308;
  }
  v99 = (unsigned int *)(v83 + 8);
  do
    v100 = __ldaxr(v99);
  while (__stlxr(v100 + 1, v99));
  if (*(_DWORD *)v15 != 2)
    goto LABEL_224;
  v101 = *(WebCore::Document **)(v83 + 296);
  v102 = *((_QWORD *)v101 + 382);
  if (!v102)
  {
    v175 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v175, v101);
    v177 = (WebCore::Editor *)*((_QWORD *)v101 + 382);
    *((_QWORD *)v101 + 382) = v175;
    if (v177)
    {
      WebCore::Editor::~Editor(v177, v176);
      if (*(_DWORD *)v178)
      {
        *(_QWORD *)(v178 + 496) = 0;
        *(_OWORD *)(v178 + 464) = 0u;
        *(_OWORD *)(v178 + 480) = 0u;
        *(_OWORD *)(v178 + 432) = 0u;
        *(_OWORD *)(v178 + 448) = 0u;
        *(_OWORD *)(v178 + 400) = 0u;
        *(_OWORD *)(v178 + 416) = 0u;
        *(_OWORD *)(v178 + 368) = 0u;
        *(_OWORD *)(v178 + 384) = 0u;
        *(_OWORD *)(v178 + 336) = 0u;
        *(_OWORD *)(v178 + 352) = 0u;
        *(_OWORD *)(v178 + 304) = 0u;
        *(_OWORD *)(v178 + 320) = 0u;
        *(_OWORD *)(v178 + 272) = 0u;
        *(_OWORD *)(v178 + 288) = 0u;
        *(_OWORD *)(v178 + 240) = 0u;
        *(_OWORD *)(v178 + 256) = 0u;
        *(_OWORD *)(v178 + 208) = 0u;
        *(_OWORD *)(v178 + 224) = 0u;
        *(_OWORD *)(v178 + 176) = 0u;
        *(_OWORD *)(v178 + 192) = 0u;
        *(_OWORD *)(v178 + 144) = 0u;
        *(_OWORD *)(v178 + 160) = 0u;
        *(_OWORD *)(v178 + 112) = 0u;
        *(_OWORD *)(v178 + 128) = 0u;
        *(_OWORD *)(v178 + 80) = 0u;
        *(_OWORD *)(v178 + 96) = 0u;
        *(_OWORD *)(v178 + 48) = 0u;
        *(_OWORD *)(v178 + 64) = 0u;
        *(_OWORD *)(v178 + 16) = 0u;
        *(_OWORD *)(v178 + 32) = 0u;
        *(_OWORD *)v178 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v178, v179);
      }
    }
    v102 = *((_QWORD *)v101 + 382);
  }
  v103 = *(_QWORD *)(v102 + 8);
  if (v103 && (v104 = *(_QWORD *)(v103 + 8)) != 0)
    v105 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v104 + 32))(v104) ^ 1;
  else
LABEL_224:
    v105 = 1;
  WebCore::EventHandler::selectClosestWordFromHitTestResult(a1, v35, v105);
  do
    v112 = __ldaxr(v99);
  while (__stlxr(v112 - 1, v99));
  updated = 1;
  if (v112 == 1)
  {
    atomic_store(1u, v99);
    v97 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v97 = off_1E31FE290;
    v97[1] = v99;
LABEL_188:
    v254 = (int8x8_t)v97;
    WTF::ensureOnMainThread();
    v98 = (uint64_t)v254;
    v254 = 0;
    if (v98)
      (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  }
LABEL_308:
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 136) + 696) & 0x10000000000000) == 0
    || !*(_BYTE *)(a1 + 180))
  {
    v146 = *(_QWORD *)(a1 + 16);
    if (v146)
    {
      v145 = *(_QWORD *)(v146 + 64) & 0xFFFFFFFFFFFFLL;
      if (!v145)
        goto LABEL_316;
      if ((*(_BYTE *)((*(_QWORD *)(v146 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
      {
        LOBYTE(v145) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v145 + 1384))(v145);
        goto LABEL_316;
      }
    }
    LOBYTE(v145) = 0;
    goto LABEL_316;
  }
  LOBYTE(v145) = 1;
LABEL_316:
  *(_BYTE *)(a1 + 184) = v145;
  do
  {
LABEL_317:
    v147 = __ldaxr(v5);
    v148 = v147 - 1;
  }
  while (__stlxr(v148, v5));
  if (!v148)
  {
    atomic_store(1u, v5);
    v150 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v150 = off_1E31FE290;
    v150[1] = v5;
    v254 = (int8x8_t)v150;
    WTF::ensureOnMainThread();
    v151 = (uint64_t)v254;
    v254 = 0;
    if (v151)
      (*(void (**)(uint64_t))(*(_QWORD *)v151 + 8))(v151);
  }
  return updated;
}

unsigned int *WebCore::EventHandler::selectionExtentRespectingEditingBoundary@<X0>(const WebCore::VisibleSelection *a1@<X1>, int32x2_t *a2@<X2>, WebCore::Node *a3@<X3>, _QWORD *a4@<X8>)
{
  int32x2_t v7;
  unsigned int *result;
  void *v9;
  uint64_t v10;
  float32x2_t v11;
  int v12;
  float v13;
  __int16 v14;
  WebCore::Node *v15;
  void *v17;
  unint64_t v18;
  WTF *v19;
  WTF *v20;
  uint64_t v21;
  void *v22;
  WTF *v23;
  WTF *v24;
  uint64_t v25;
  double v26;
  int v27;
  int v28;
  double v29;
  int v30;
  __int32 v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  char v35;
  char v36;
  WTF *v37;
  WTF *v38;
  uint64_t v39;
  char v40;
  __int16 v41;
  uint64_t v42;

  v7 = *a2;
  result = (unsigned int *)WebCore::editableRootForPosition((uint64_t)a1 + 64, 0);
  v10 = (uint64_t)result;
  if (result)
    result[6] += 2;
  if (!a3 || (result = (unsigned int *)(*((_QWORD *)a3 + 8) & 0xFFFFFFFFFFFFLL)) == 0)
  {
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    *((_BYTE *)a4 + 16) = 1;
    goto LABEL_46;
  }
  v11 = vmul_f32(vcvt_f32_s32(v7), (float32x2_t)vdup_n_s32(0x3C800000u));
  v12 = *((_DWORD *)a3 + 6);
  *((_DWORD *)a3 + 6) = v12 + 2;
  v13 = v11.f32[1];
  if (!v10 || (WebCore::Node *)v10 == a3)
    goto LABEL_32;
  v14 = *(_WORD *)(v10 + 28);
  if ((v14 & 0xF000) == 0x9000)
  {
    if (**((_QWORD **)a3 + 5) == v10 && (*((_WORD *)a3 + 14) & 0xF000) != 0x9000 && (*((_BYTE *)a3 + 22) & 8) != 0)
      goto LABEL_32;
  }
  else if ((v14 & 4) != 0
         && *(_QWORD *)(v10 + 80)
         && ((*((unsigned __int8 *)a3 + 22) ^ *(unsigned __int8 *)(v10 + 22)) & 8) == 0)
  {
    v15 = a3;
    do
      v15 = (WebCore::Node *)*((_QWORD *)v15 + 4);
    while (v15 != (WebCore::Node *)v10 && v15 != 0);
    if (v15)
      goto LABEL_32;
  }
  if ((*(_QWORD *)(v10 + 64) & 0xFFFFFFFFFFFFLL) == 0)
  {
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    *((_BYTE *)a4 + 16) = 1;
    if (v12)
    {
LABEL_44:
      *((_DWORD *)a3 + 6) = v12;
      goto LABEL_46;
    }
    goto LABEL_53;
  }
  if ((*(_BYTE *)((*(_QWORD *)(v10 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195FA0134);
  }
  v32 = (unint64_t)v11;
  v36 = 0;
  v33 = 0u;
  v34 = 0u;
  v35 = 0;
  v38 = 0;
  v39 = 0;
  v37 = 0;
  v40 = 0;
  v41 = 1;
  v42 = 0;
  (*(void (**)(unsigned int *, _QWORD, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)result + 576))(result, 0, &v32, 4, 0);
  WebCore::TransformState::flatten((WebCore::TransformState *)&v32, 0);
  v18 = v32;
  v19 = v38;
  v38 = 0;
  if (v19)
    WTF::fastFree(v19, v17);
  v20 = v37;
  v37 = 0;
  if (v20)
    WTF::fastFree(v20, v17);
  v21 = *(_QWORD *)(v10 + 64) & 0xFFFFFFFFFFFFLL;
  if (v21 && (*(_BYTE *)((*(_QWORD *)(v10 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195FA0154);
  }
  v32 = v18;
  v36 = 0;
  v33 = 0u;
  v34 = 0u;
  v35 = 0;
  v38 = 0;
  v39 = 0;
  v37 = 0;
  v40 = 0;
  v41 = 1;
  v42 = 0x100000000;
  (*(void (**)(uint64_t, _QWORD, unint64_t *))(*(_QWORD *)v21 + 584))(v21, 0, &v32);
  WebCore::TransformState::flatten((WebCore::TransformState *)&v32, 0);
  v13 = *((float *)&v32 + 1);
  v11.i32[0] = v32;
  v23 = v38;
  v38 = 0;
  v31 = v32;
  if (v23)
  {
    WTF::fastFree(v23, v22);
    v11.i32[0] = v31;
  }
  v24 = v37;
  v37 = 0;
  if (v24)
  {
    WTF::fastFree(v24, v22);
    v11.i32[0] = v31;
  }
  *(_DWORD *)(v10 + 24) += 2;
  if (*((_DWORD *)a3 + 6) == 2)
  {
    if ((*((_WORD *)a3 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(a3, v22);
    a3 = (WebCore::Node *)v10;
    v11.i32[0] = v31;
  }
  else
  {
    *((_DWORD *)a3 + 6) -= 2;
    a3 = (WebCore::Node *)v10;
  }
LABEL_32:
  v25 = *((_QWORD *)a3 + 8) & 0xFFFFFFFFFFFFLL;
  v26 = v11.f32[0] * 64.0;
  if (v26 > -2147483650.0)
    v27 = (int)v26;
  else
    v27 = 0x80000000;
  if (v26 < 2147483650.0)
    v28 = v27;
  else
    v28 = 0x7FFFFFFF;
  v29 = v13 * 64.0;
  if (v29 > -2147483650.0)
    v30 = (int)v29;
  else
    v30 = 0x80000000;
  if (v29 >= 2147483650.0)
    v30 = 0x7FFFFFFF;
  v32 = __PAIR64__(v30, v28);
  result = (unsigned int *)(*(uint64_t (**)(uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v25 + 352))(v25, &v32, 1, 0);
  v12 = *((_DWORD *)a3 + 6) - 2;
  if (*((_DWORD *)a3 + 6) != 2)
    goto LABEL_44;
LABEL_53:
  if ((*((_WORD *)a3 + 15) & 0x400) == 0)
    result = WebCore::Node::removedLastRef(a3, v9);
LABEL_46:
  if (v10)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v10, v9);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::EventHandler::handleMouseDraggedEvent(uint64_t a1, _BYTE *a2, const WebCore::IntPoint *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  WebCore::ScrollView **v11;
  unsigned int *v12;
  unsigned int v13;
  _BYTE *v14;
  WTF::StringImpl *v15;
  char v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int32x2_t v20;
  int8x8_t v21;
  uint64_t v22;
  void *v23;
  WebCore::ScrollView *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  void *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  int v44;
  WebCore::ScrollView *v46;
  uint64_t v47;
  WebCore::ScrollView *i;
  WebCore::ScrollView *v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  unsigned int v54;
  WebCore::ScrollView *v56;
  float v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  int v64;
  int v65;
  _BOOL4 v67;
  uint64_t v68;
  _QWORD *v69;
  WebCore::DataTransfer *v70;
  WebCore::DataTransfer *v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  WebCore *started;
  void *v76;
  unsigned int *v77;
  uint64_t v78;
  _DWORD *v79;
  unsigned int *v80;
  unsigned int v81;
  uint64_t v82;
  int v83;
  unsigned int v84;
  void *v85;
  WebCore::Document *v86;
  WebCore::Editor *v87;
  uint64_t v88;
  __int16 v89;
  char v90;
  char v91;
  uint64_t Image;
  const WebCore::Node *v93;
  _DWORD *v94;
  uint64_t v95;
  WTF::String *v96;
  __n128 v97;
  WTF::StringImpl *v98;
  WTF *v99;
  void *v100;
  _BYTE *v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unint64_t StatusReg;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  const WebCore::Position *v111;
  BOOL v112;
  WebCore::Node *v113;
  int v114;
  BOOL v115;
  _DWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  WTF *v124;
  unsigned int v125;
  unsigned int v126;
  WTF *v127;
  unsigned int v128;
  unsigned int v129;
  uint64_t v130;
  WebCore::ScrollView *v131;
  uint64_t v132;
  _BYTE *v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _DWORD *v140;
  WTF *v141;
  void *v142;
  WTF *v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  WTF *v148;
  WTF *v149;
  WTF *v150;
  float v151;
  int v152;
  float v153;
  int v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  WTF *v158;
  uint64_t v159;
  BOOL v160;
  float v161;
  unsigned int *v162;
  unsigned int *v163;
  unsigned int v164;
  int canDisplay;
  WTF::StringBuilder *v166;
  __n128 v167;
  char v168;
  unsigned int v169;
  unsigned int v170;
  WebCore::DataTransfer *v171;
  WTF *v172;
  void *v173;
  WTF *v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _DWORD *v181;
  int v182;
  WebCore::DataTransfer *v183;
  uint64_t v184;
  WTF::StringImpl *v185;
  WTF::StringImpl *v186;
  WTF *v187;
  void *v188;
  WTF *v189;
  WTF *v190;
  WebCore::Editor *v191;
  WebCore::Editor *v192;
  uint64_t v193;
  WTF::StringImpl *v194;
  WTF::StringImpl *v195;
  uint64_t v196;
  WTF::StringImpl *v197;
  WTF::StringImpl *v198;
  uint64_t v199;
  WTF::StringImpl *v200;
  WTF::StringImpl *v201;
  uint64_t v202;
  _BYTE *v203;
  WebCore::DataTransfer *v204;
  uint64_t v205;
  unsigned int v206;
  unsigned int v207;
  WTF *v208;
  void *v209;
  WTF *v210;
  void *v211;
  WTF *v212;
  WTF *v213;
  uint64_t v214;
  WebCore::RenderObject *v215;
  uint64_t v216;
  int32x2_t v217;
  int8x8_t v218;
  uint64_t v219;
  void *v220;
  unsigned int v221;
  unsigned int v222;
  uint64_t *v224;
  uint64_t v225;
  __int16 v226;
  int v227;
  int v228;
  uint64_t v229;
  WTF *v230;
  WTF *v231;
  uint64_t v232;
  WebCore::Pasteboard *v233;
  uint64_t v234;
  uint64_t v235;
  WebCore::DataTransfer *v236;
  WebCore::Node *v237;
  WebCore::ScrollView **v238;
  WebCore::DataTransfer *v239;
  WTF::StringImpl *v240;
  WTF::StringImpl *v241;
  WTF::StringImpl *v242[5];
  WTF::StringImpl *v243[5];
  WTF *v244[2];
  _BYTE v245[28];
  float v246;
  float v247;
  float v248;
  float v249;
  float v250;
  __int16 v251;
  uint64_t v252;
  WTF *v253;
  WTF *v254;
  uint64_t v255;
  WebCore::Node *v256;
  uint64_t v257;
  char v258;
  uint64_t v259;
  char v260;

  if (!*(_BYTE *)(a1 + 168))
    return 0;
  v3 = (int)a3;
  v4 = (uint64_t)a2;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v7 = (unsigned int *)(v6 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  if (a2[48])
    v9 = 0;
  else
    v9 = a2[8] == 5;
  if (!v9)
  {
    *(_BYTE *)(a1 + 168) = 0;
    goto LABEL_502;
  }
  v11 = *(WebCore::ScrollView ***)(*(_QWORD *)(a1 + 8) + 8);
  v12 = (unsigned int *)(v11 + 1);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  if (!*(_BYTE *)(a1 + 704))
    goto LABEL_322;
  v14 = &unk_1EE2F7000;
  v238 = v11;
  {
    if ((_QWORD)WebCore::EventHandler::dragState(void)::state)
    {
      if (*(_BYTE *)(a1 + 705))
        goto LABEL_86;
      goto LABEL_94;
    }
  }
  else
  {
    WebCore::EventHandler::dragState(void)::state = 0u;
    *(_OWORD *)&qword_1EE2F7E10 = 0u;
  }
  v16 = WebCore::EventHandler::updateDragSourceActionsAllowed((WebCore::EventHandler *)a1) & 1;
  {
    v17 = qword_1EE2F7E18;
    BYTE8(WebCore::EventHandler::dragState(void)::state) = v16;
    qword_1EE2F7E18 = 0;
    if (v17)
    {
      do
      {
        v18 = __ldaxr((unsigned int *)v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, (unsigned int *)v17));
      if (!v19)
      {
        atomic_store(1u, (unsigned int *)v17);
        v41 = *(WTF::StringImpl **)(v17 + 48);
        *(_QWORD *)(v17 + 48) = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2)
            WTF::StringImpl::destroy(v41, v15);
          else
            *(_DWORD *)v41 -= 2;
        }
        v42 = *(WTF::StringImpl **)(v17 + 40);
        *(_QWORD *)(v17 + 40) = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2)
            WTF::StringImpl::destroy(v42, v15);
          else
            *(_DWORD *)v42 -= 2;
        }
        v43 = *(unsigned int *)(v17 + 32);
        if ((_DWORD)v43 != -1)
          ((void (*)(WTF **, uint64_t))off_1E33FE860[v43])(v244, v17 + 8);
        *(_DWORD *)(v17 + 32) = -1;
        WTF::fastFree((WTF *)v17, v15);
        v14 = (_BYTE *)&unk_1EE2F7000;
      }
    }
  }
  else
  {
    WebCore::EventHandler::dragState(void)::state = 0u;
    *(_OWORD *)&qword_1EE2F7E10 = 0u;
    BYTE8(WebCore::EventHandler::dragState(void)::state) = v16;
  }
  *(_QWORD *)v245 = 0x4000000040;
  v20 = *(int32x2_t *)(a1 + 320);
  v21 = (int8x8_t)vcgt_s32(v20, (int32x2_t)0xFE000000FE000000);
  v244[0] = (WTF *)vorr_s8((int8x8_t)(*(_QWORD *)&v21 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, v20), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(v20, 6uLL)), v21));
  v244[1] = (WTF *)((uint64_t)v244[0] & 0xFFFFFFC0 | ((unint64_t)((HIDWORD(v244[0]) & 0xFFFFFFC0) >> 6) << 38));
  *(float32x2_t *)&v245[8] = vmul_f32(vcvt_f32_s32((int32x2_t)v244[0]), (float32x2_t)vdup_n_s32(0x3C800000u));
  *(float *)&v245[16] = (float)(int)((uint64_t)v244[0] & 0xFFFFFFC0) * 0.015625;
  *(float *)&v245[20] = (float)(int)(HIDWORD(v244[0]) & 0xFFFFFFC0) * 0.015625;
  *(float *)&v245[24] = *(float *)&v245[16] + 1.0;
  v246 = *(float *)&v245[20];
  v247 = *(float *)&v245[16] + 1.0;
  v248 = *(float *)&v245[20] + 1.0;
  v249 = *(float *)&v245[16];
  v250 = *(float *)&v245[20] + 1.0;
  v251 = 256;
  v252 = 0;
  v253 = 0;
  v259 = 0;
  v254 = v244[0];
  v255 = 0;
  v258 = 0;
  v256 = 0;
  v257 = 0;
  v22 = (uint64_t)v11[37];
  if (v22)
  {
    *(_DWORD *)(v22 + 24) += 2;
    LODWORD(v243[0]) = 257;
    BYTE4(v243[0]) = 1;
    WebCore::Document::hitTest(v22, v243, (WebCore::HitTestingTransformState *)v244, (uint64_t)v244);
    if (*(_DWORD *)(v22 + 24) == 2)
    {
      if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v22, v23);
    }
    else
    {
      *(_DWORD *)(v22 + 24) -= 2;
    }
  }
  else
  {
    LODWORD(v243[0]) = 257;
    BYTE4(v243[0]) = 1;
    WebCore::Document::hitTest(0, v243, (WebCore::HitTestingTransformState *)v244, (uint64_t)v244);
  }
  v24 = v11[3];
  if (!v24)
    goto LABEL_57;
  v25 = *((_QWORD *)v24 + 1);
  if (!v25)
    goto LABEL_57;
  ++*(_DWORD *)v25;
  v26 = *(_QWORD *)(v25 + 64);
  v27 = v252;
  if (!v252)
    goto LABEL_43;
  while (1)
  {
    v28 = *(_WORD *)(v27 + 28);
    if ((v28 & 8) != 0)
    {
      *(_DWORD *)(v27 + 24) += 2;
      goto LABEL_43;
    }
    v30 = (uint64_t *)(v27 + 32);
    v29 = *(_QWORD *)(v27 + 32);
    if (v29)
    {
      if ((*(_WORD *)(v29 + 28) & 8) != 0)
      {
        v31 = *(_QWORD *)(v29 + 72) & 0xFFFFFFFFFFFFLL;
        if (v31)
        {
          v33 = *(_QWORD *)(v31 + 88);
          if (v33)
          {
            v34 = *(_QWORD *)(v33 + 224);
            if (v34)
            {
              v35 = v26;
              v32 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v27);
              v26 = v35;
              if (v32)
                goto LABEL_34;
              v28 = *(_WORD *)(v27 + 28);
            }
          }
        }
      }
    }
    if ((v28 & 0x80) != 0)
      break;
LABEL_33:
    v32 = *v30;
LABEL_34:
    v27 = v32;
    if (!v32)
      goto LABEL_43;
  }
  v36 = *(_QWORD *)(v27 + 200);
  if (v36)
  {
    v30 = (uint64_t *)(v36 + 8);
    goto LABEL_33;
  }
  v27 = 0;
LABEL_43:
  v14 = &unk_1EE2F7000;
  {
    WebCore::EventHandler::dragState(void)::state = 0u;
    *(_OWORD *)&qword_1EE2F7E10 = 0u;
  }
  v37 = WebCore::DragController::draggableElement(v26, (uint64_t)v238, v27, *(_DWORD *)(a1 + 320), *(_DWORD *)(a1 + 324), (uint64_t)&WebCore::EventHandler::dragState(void)::state);
  {
    if (v37)
      goto LABEL_47;
  }
  else
  {
    WebCore::EventHandler::dragState(void)::state = 0u;
    *(_OWORD *)&qword_1EE2F7E10 = 0u;
    if (v37)
LABEL_47:
      *(_DWORD *)(v37 + 24) += 2;
  }
  v38 = WebCore::EventHandler::dragState(void)::state;
  *(_QWORD *)&WebCore::EventHandler::dragState(void)::state = v37;
  if (v38)
  {
    if (*(_DWORD *)(v38 + 24) == 2)
    {
      if ((*(_WORD *)(v38 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v38, v23);
    }
    else
    {
      *(_DWORD *)(v38 + 24) -= 2;
    }
  }
  if (v27)
  {
    if (*(_DWORD *)(v27 + 24) == 2)
    {
      if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v27, v23);
    }
    else
    {
      *(_DWORD *)(v27 + 24) -= 2;
    }
  }
  if (*(_DWORD *)v25 == 1)
  {
    WebCore::Page::~Page(v25);
    WTF::fastFree(v39, v40);
  }
  else
  {
    --*(_DWORD *)v25;
  }
  v11 = v238;
LABEL_57:
  if ((v14[3616] & 1) != 0)
  {
    if ((_QWORD)WebCore::EventHandler::dragState(void)::state)
    {
      *(_BYTE *)(a1 + 705) = (BYTE9(WebCore::EventHandler::dragState(void)::state) & 8) != 0;
      goto LABEL_83;
    }
  }
  else
  {
    WebCore::EventHandler::dragState(void)::state = 0u;
    *(_OWORD *)&qword_1EE2F7E10 = 0u;
    v14[3616] = 1;
  }
  *(_BYTE *)(a1 + 704) = 0;
LABEL_83:
  WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v244, v23);
  if (!*(_BYTE *)(a1 + 704))
    goto LABEL_322;
  if (!*(_BYTE *)(a1 + 705))
  {
    if (!v14[3616])
      goto LABEL_92;
    goto LABEL_94;
  }
  if ((v14[3616] & 1) == 0)
    goto LABEL_92;
LABEL_86:
  v44 = BYTE9(WebCore::EventHandler::dragState(void)::state);
  if ((BYTE9(WebCore::EventHandler::dragState(void)::state) & 8) == 0)
  {
LABEL_95:
    if ((v44 & (v44 - 1)) != 0 || v44 == 0)
      BYTE9(WebCore::EventHandler::dragState(void)::state) = 8;
    v46 = v11[36];
    if (v46)
    {
      ++*((_DWORD *)v46 + 2);
      {
        WebCore::pointerCursor(void)::c = 1;
        xmmword_1EE2F7FC0 = 0uLL;
        qword_1EE2F7FB8 = 0;
      }
      v47 = *((_QWORD *)v46 + 4);
      i = v46;
      if (v47)
      {
        v49 = *(WebCore::ScrollView **)(v47 + 8);
        for (i = v46; v49; v49 = *(WebCore::ScrollView **)(v176 + 8))
        {
          i = v49;
          v176 = *((_QWORD *)v49 + 4);
          if (!v176)
            break;
        }
      }
      if (((*(uint64_t (**)(WebCore::ScrollView *))(*(_QWORD *)i + 72))(i) & 1) != 0
        || (*(unsigned int (**)(WebCore::ScrollView *))(*(_QWORD *)i + 80))(i))
      {
        v50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(WebCore::ScrollView *))(*(_QWORD *)i + 720))(i)
                                                + 24)
                                    + 8)
                        + 48);
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v50 + 136))(v50, &WebCore::pointerCursor(void)::c);
      }
      if (*((_DWORD *)v46 + 2) == 1)
        (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v46 + 8))(v46);
      else
        --*((_DWORD *)v46 + 2);
      v11 = v238;
    }
    if (v3)
      goto LABEL_146;
    v51 = *(_DWORD *)(v4 + 52);
    v52 = *(_DWORD *)(v4 + 56);
    if (v14[3616] == 1)
    {
      v53 = BYTE9(WebCore::EventHandler::dragState(void)::state);
    }
    else
    {
      v53 = 0;
      WebCore::EventHandler::dragState(void)::state = 0u;
      *(_OWORD *)&qword_1EE2F7E10 = 0u;
      v14[3616] = 1;
    }
    v54 = 3;
    if ((v53 & (v53 - 1)) == 0 && v53 != 0)
    {
      if (v53 > 15)
      {
        if (v53 != 64 && v53 != 16)
          goto LABEL_125;
      }
      else if (v53 != 2)
      {
        if (v53 == 4)
          v54 = 40;
        goto LABEL_125;
      }
      v54 = 5;
    }
LABEL_125:
    v56 = *(WebCore::ScrollView **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 288);
    if (v56)
    {
      v57 = (float)v51;
      v58 = (float)v52;
      ++*((_DWORD *)v56 + 2);
      v59 = 0x7FFFFFFFLL;
      v60 = 0x80000000;
      if (v57 > -2147500000.0)
        v60 = (int)v57;
      if (v57 < 2147500000.0)
        v59 = v60;
      v61 = 0x7FFFFFFF00000000;
      v62 = 0x8000000000000000;
      if (v58 > -2147500000.0)
        v62 = (unint64_t)(int)v58 << 32;
      if (v58 < 2147500000.0)
        v61 = v62;
      v244[0] = (WTF *)(v61 | v59);
      v63 = WebCore::ScrollView::windowToContents(v56, (const WebCore::IntPoint *)v244, a3);
      v64 = v63 - *(_DWORD *)(a1 + 320);
      v65 = HIDWORD(v63) - *(_DWORD *)(a1 + 324);
      if (v64 < 0)
        v64 = *(_DWORD *)(a1 + 320) - v63;
      if (v65 < 0)
        v65 = *(_DWORD *)(a1 + 324) - HIDWORD(v63);
      v67 = v64 >= v54 || v65 >= v54;
      if (*((_DWORD *)v56 + 2) == 1)
      {
        (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v56 + 8))(v56);
        if (v67)
          goto LABEL_146;
      }
      else
      {
        --*((_DWORD *)v56 + 2);
        if (v67)
        {
LABEL_146:
          *(_DWORD *)(a1 + 296) = 0;
          v68 = *(_QWORD *)(a1 + 272);
          *(_QWORD *)(a1 + 272) = 0;
          if (v68)
          {
            if (*(_DWORD *)(v68 + 24) == 2)
            {
              if ((*(_WORD *)(v68 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v68, a2);
            }
            else
            {
              *(_DWORD *)(v68 + 24) -= 2;
            }
          }
          v69 = &unk_1EE2F7000;
          if ((v14[3616] & 1) != 0)
          {
            v70 = (WebCore::DataTransfer *)qword_1EE2F7E10;
            if (qword_1EE2F7E10)
            {
              *(_DWORD *)(qword_1EE2F7E10 + 24) = 0;
              qword_1EE2F7E10 = 0;
              if (*(_DWORD *)v70 == 1)
              {
                WebCore::DataTransfer::~DataTransfer(v70, a2);
                WTF::fastFree(v141, v142);
              }
              else
              {
                --*(_DWORD *)v70;
              }
            }
          }
          else
          {
            WebCore::EventHandler::dragState(void)::state = 0u;
            *(_OWORD *)&qword_1EE2F7E10 = 0u;
            v14[3616] = 1;
          }
          v71 = v11[37];
          if (!v71)
          {
            v160 = 0;
            do
            {
LABEL_488:
              v206 = __ldaxr(v12);
              v207 = v206 - 1;
            }
            while (__stlxr(v207, v12));
            if (v207)
              goto LABEL_490;
            atomic_store(1u, v12);
            v212 = (WTF *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v212 = off_1E31FE290;
            *((_QWORD *)v212 + 1) = v12;
            v244[0] = v212;
            WTF::ensureOnMainThread();
            v213 = v244[0];
            v244[0] = 0;
            if (v213)
              (*(void (**)(WTF *))(*(_QWORD *)v213 + 8))(v213);
            if (!v160)
              goto LABEL_502;
LABEL_491:
            v10 = 1;
            goto LABEL_518;
          }
          *((_DWORD *)v71 + 6) += 2;
          v72 = WebCore::DataTransfer::createForDrag(v71, (uint64_t *)v244);
          v73 = &unk_1EE2F7000;
          v237 = v71;
          if ((v14[3616] & 1) == 0)
          {
            v203 = v14;
            v90 = 0;
            v91 = 0;
            WebCore::EventHandler::dragState(void)::state = 0u;
            *(_OWORD *)&qword_1EE2F7E10 = 0u;
            v203[3616] = 1;
            qword_1EE2F7E10 = (uint64_t)v244[0];
            goto LABEL_267;
          }
          v72 = qword_1EE2F7E10;
          qword_1EE2F7E10 = (uint64_t)v244[0];
          if (v72)
          {
            if (*(_DWORD *)v72 == 1)
            {
              WebCore::DataTransfer::~DataTransfer((WebCore::DataTransfer *)v72, a2);
              v72 = WTF::fastFree(v99, v100);
              v73 = (_BYTE *)&unk_1EE2F7000;
              if ((v14[3616] & 1) == 0)
              {
                v101 = v14;
                v90 = 0;
                v91 = 0;
                WebCore::EventHandler::dragState(void)::state = 0u;
                *(_OWORD *)&qword_1EE2F7E10 = 0u;
                v101[3616] = 1;
                goto LABEL_267;
              }
            }
            else
            {
              --*(_DWORD *)v72;
            }
          }
          if (!v73[3592])
          {
            v90 = 0;
            v91 = 0;
            goto LABEL_267;
          }
          v74 = *(_QWORD *)(*(_QWORD *)(WebCore::EventHandler::dragState(void)::state + 40) + 8);
          *(_DWORD *)(v74 + 24) += 2;
          started = WebCore::DataTransfer::createForDragStartEvent((WebCore::DataTransfer *)v74, (uint64_t *)&v239);
          v235 = v4;
          if (*(_DWORD *)(v74 + 24) == 2)
          {
            if ((*(_WORD *)(v74 + 30) & 0x400) == 0)
              started = (WebCore *)WebCore::Node::removedLastRef((WebCore::Node *)v74, v76);
          }
          else
          {
            *(_DWORD *)(v74 + 24) -= 2;
          }
          v236 = v239;
          v77 = *(unsigned int **)(*(_QWORD *)(a1 + 8) + 8);
          v78 = *((_QWORD *)v77 + 3);
          if (!v78 || (v79 = *(_DWORD **)(v78 + 8)) == 0)
          {
LABEL_214:
            StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
            v107 = *(_QWORD *)(StatusReg + 736);
            if (!v107 || (v108 = *(_QWORD *)(v107 + 96)) == 0)
              v108 = WebCore::threadGlobalDataSlow(started);
            v109 = *(_QWORD *)(v108 + 40);
            v4 = v235;
            if (!v109)
            {
              WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v108);
              v109 = *(_QWORD *)(v108 + 40);
            }
            v110 = WebCore::EventHandler::dragState(void)::state;
            *(_DWORD *)(WebCore::EventHandler::dragState(void)::state + 24) += 2;
            if ((WebCore::EventHandler::dispatchDragEvent(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 8), (uint64_t *)(v109 + 696), (WebCore::Node *)v110, a1 + 336, v236) & 1) != 0)
            {
              v112 = 0;
            }
            else
            {
              v113 = WebCore::enclosingTextFormControl((WebCore *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 296) + 3064)+ 120), v111);
              if (v113 && *(_QWORD *)(*((_QWORD *)v113 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
              {
                v114 = *((_DWORD *)v113 + 6);
                *((_DWORD *)v113 + 6) = v114 + 2;
                v115 = *(_DWORD *)(*((_QWORD *)v113 + 30) + 12) == 2048;
                if (v114)
                {
                  *((_DWORD *)v113 + 6) = v114;
                }
                else if ((*((_WORD *)v113 + 15) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef(v113, v111);
                }
              }
              else
              {
                v115 = 0;
              }
              v112 = !v115;
            }
            if (*(_DWORD *)(v110 + 24) == 2)
            {
              if ((*(_WORD *)(v110 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v110, v111);
            }
            else
            {
              *(_DWORD *)(v110 + 24) -= 2;
            }
            *(_BYTE *)(a1 + 704) = v112;
            v116 = (_DWORD *)*((_QWORD *)v239 + 4);
            if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v116 + 16))(v116) & 1) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195FA1674);
            }
            v91 = v116[25] != 0;
            if (v14[3616] == 1)
            {
              v117 = qword_1EE2F7E10;
            }
            else
            {
              v117 = 0;
              WebCore::EventHandler::dragState(void)::state = 0u;
              *(_OWORD *)&qword_1EE2F7E10 = 0u;
              v14[3616] = 1;
            }
            WebCore::DataTransfer::moveDragState(v117, &v239);
            if (v14[3616] != 1)
              goto LABEL_460;
            v118 = WebCore::EventHandler::dragState(void)::state;
            if (!(_QWORD)WebCore::EventHandler::dragState(void)::state)
              goto LABEL_260;
            *(_DWORD *)(WebCore::EventHandler::dragState(void)::state + 24) += 2;
            if (BYTE9(WebCore::EventHandler::dragState(void)::state) != 1
              || (v119 = *(_QWORD *)(qword_1EE2F7E10 + 96)) != 0 && *(_QWORD *)(v119 + 8)
              || *(_QWORD *)(qword_1EE2F7E10 + 104))
            {
              v120 = 1;
LABEL_239:
              if (*(_DWORD *)(v118 + 24) != 2)
              {
                *(_DWORD *)(v118 + 24) -= 2;
                if ((v120 & 1) != 0)
                  goto LABEL_241;
LABEL_353:
                v171 = v239;
                v239 = 0;
                if (!v171)
                  goto LABEL_485;
                if (*(_DWORD *)v171 != 1)
                {
                  --*(_DWORD *)v171;
                  goto LABEL_485;
                }
                WebCore::DataTransfer::~DataTransfer(v171, a2);
                goto LABEL_367;
              }
              if ((*(_WORD *)(v118 + 30) & 0x400) != 0)
              {
                if (!v120)
                  goto LABEL_353;
              }
              else
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v118, a2);
                if ((v120 & 1) == 0)
                  goto LABEL_353;
              }
LABEL_241:
              v14 = &unk_1EE2F7000;
              {
                if ((_QWORD)WebCore::EventHandler::dragState(void)::state)
                {
                  if ((BYTE9(WebCore::EventHandler::dragState(void)::state) & 3) != 0
                    && (*(_QWORD *)(WebCore::EventHandler::dragState(void)::state + 64) & 0xFFFFFFFFFFFFLL) != 0)
                  {
                    if ((*(_BYTE *)((*(_QWORD *)(WebCore::EventHandler::dragState(void)::state + 64) & 0xFFFFFFFFFFFFLL)
                                   + 0x2D) & 2) != 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195FA176CLL);
                    }
                    if ((((*(_BYTE *)((*(_QWORD *)(WebCore::EventHandler::dragState(void)::state + 64) & 0xFFFFFFFFFFFFLL)
                                     + 0x34) & 7) == 3) & *(_BYTE *)((*(_QWORD *)(WebCore::EventHandler::dragState(void)::state
                                                                                + 64) & 0xFFFFFFFFFFFFLL)
                                                                   + 0x35)) == 1)
                    {
                      v121 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(WebCore::EventHandler::dragState(void)::state + 64) & 0xFFFFFFFFFFFFLL)
                                                   + 0xE0)
                                       + 24);
                      if (v121)
                      {
                        v122 = *(_QWORD *)(v121 + 8);
                        if (v122)
                        {
                          if (!WebCore::CachedResource::isCORSSameOrigin(*(WebCore::CachedResource **)(v121 + 8)))
                          {
                            if ((*(_BYTE *)(v122 + 344) & 1) == 0)
                            {
                              WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v122 + 160));
                              *(_BYTE *)(v122 + 344) |= 1u;
                            }
                            WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)(v122 + 160), (uint64_t *)v244);
                            v14 = &unk_1EE2F7000;
                            {
                              v123 = qword_1EE2F7E18;
                              v124 = v244[0];
                              v244[0] = 0;
                              qword_1EE2F7E18 = (uint64_t)v124;
                              if (v123)
                              {
                                do
                                {
                                  v125 = __ldaxr((unsigned int *)v123);
                                  v126 = v125 - 1;
                                }
                                while (__stlxr(v126, (unsigned int *)v123));
                                if (!v126)
                                {
                                  atomic_store(1u, (unsigned int *)v123);
                                  v194 = *(WTF::StringImpl **)(v123 + 48);
                                  *(_QWORD *)(v123 + 48) = 0;
                                  if (v194)
                                  {
                                    if (*(_DWORD *)v194 == 2)
                                      WTF::StringImpl::destroy(v194, (WTF::StringImpl *)a2);
                                    else
                                      *(_DWORD *)v194 -= 2;
                                  }
                                  v195 = *(WTF::StringImpl **)(v123 + 40);
                                  *(_QWORD *)(v123 + 40) = 0;
                                  if (v195)
                                  {
                                    if (*(_DWORD *)v195 == 2)
                                      WTF::StringImpl::destroy(v195, (WTF::StringImpl *)a2);
                                    else
                                      *(_DWORD *)v195 -= 2;
                                  }
                                  v196 = *(unsigned int *)(v123 + 32);
                                  if ((_DWORD)v196 != -1)
                                    ((void (*)(WTF::StringImpl **, uint64_t))off_1E33FE860[v196])(v243, v123 + 8);
                                  *(_DWORD *)(v123 + 32) = -1;
                                  WTF::fastFree((WTF *)v123, a2);
                                  v14 = (_BYTE *)&unk_1EE2F7000;
                                }
                                v127 = v244[0];
                                v244[0] = 0;
                                if (v127)
                                {
                                  do
                                  {
                                    v128 = __ldaxr((unsigned int *)v127);
                                    v129 = v128 - 1;
                                  }
                                  while (__stlxr(v129, (unsigned int *)v127));
                                  if (!v129)
                                  {
                                    atomic_store(1u, (unsigned int *)v127);
                                    v197 = (WTF::StringImpl *)*((_QWORD *)v127 + 6);
                                    *((_QWORD *)v127 + 6) = 0;
                                    if (v197)
                                    {
                                      if (*(_DWORD *)v197 == 2)
                                        WTF::StringImpl::destroy(v197, (WTF::StringImpl *)a2);
                                      else
                                        *(_DWORD *)v197 -= 2;
                                    }
                                    v198 = (WTF::StringImpl *)*((_QWORD *)v127 + 5);
                                    *((_QWORD *)v127 + 5) = 0;
                                    if (v198)
                                    {
                                      if (*(_DWORD *)v198 == 2)
                                        WTF::StringImpl::destroy(v198, (WTF::StringImpl *)a2);
                                      else
                                        *(_DWORD *)v198 -= 2;
                                    }
                                    v199 = *((unsigned int *)v127 + 8);
                                    if ((_DWORD)v199 != -1)
                                      ((void (*)(WTF::StringImpl **, char *))off_1E33FE860[v199])(v243, (char *)v127 + 8);
                                    *((_DWORD *)v127 + 8) = -1;
                                    WTF::fastFree(v127, a2);
                                    v14 = (_BYTE *)&unk_1EE2F7000;
                                  }
                                }
                              }
                            }
                            else
                            {
                              WebCore::EventHandler::dragState(void)::state = 0uLL;
                              qword_1EE2F7E10 = 0;
                              qword_1EE2F7E18 = (uint64_t)v244[0];
                            }
                          }
                        }
                      }
                    }
                  }
                  if ((v14[3616] & 1) == 0)
                  {
                    v130 = 0;
                    WebCore::EventHandler::dragState(void)::state = 0u;
                    *(_OWORD *)&qword_1EE2F7E10 = 0u;
                    v14[3616] = 1;
                    v69 = (_QWORD *)&unk_1EE2F7000;
LABEL_261:
                    *(_DWORD *)(v130 + 24) = 0;
                    v11 = v238;
                    if (*(_BYTE *)(a1 + 704))
                    {
                      v90 = WebCore::dragOpFromIEOp((WebCore *)(v130 + 72), (const WTF::String *)a2);
                      *(_BYTE *)(v69[450] + 80) = 1;
                    }
                    else
                    {
                      v90 = 0;
                    }
                    v73 = &unk_1EE2F7000;
                    v72 = (uint64_t)v239;
                    v239 = 0;
                    if (v72)
                    {
                      if (*(_DWORD *)v72 == 1)
                      {
                        WebCore::DataTransfer::~DataTransfer((WebCore::DataTransfer *)v72, a2);
                        v72 = WTF::fastFree(v172, v173);
                        v73 = (_BYTE *)&unk_1EE2F7000;
                      }
                      else
                      {
                        --*(_DWORD *)v72;
                      }
                    }
LABEL_267:
                    if (!*(_BYTE *)(a1 + 704))
                    {
LABEL_478:
                      {
                        v204 = (WebCore::DataTransfer *)v69[450];
                        if (!v204)
                          goto LABEL_482;
                        *((_DWORD *)v204 + 6) = 0;
                        v69[450] = 0;
                        if (*(_DWORD *)v204 != 1)
                        {
                          --*(_DWORD *)v204;
                          goto LABEL_482;
                        }
                        WebCore::DataTransfer::~DataTransfer(v204, a2);
                        WTF::fastFree(v210, v211);
                        {
LABEL_482:
                          v205 = WebCore::EventHandler::dragState(void)::state;
                          *(_QWORD *)&WebCore::EventHandler::dragState(void)::state = 0;
                          if (v205)
                          {
                            if (*(_DWORD *)(v205 + 24) == 2)
                            {
                              if ((*(_WORD *)(v205 + 30) & 0x400) == 0)
                                WebCore::Node::removedLastRef((WebCore::Node *)v205, a2);
                            }
                            else
                            {
                              *(_DWORD *)(v205 + 24) -= 2;
                            }
                          }
                          goto LABEL_485;
                        }
                      }
                      WebCore::EventHandler::dragState(void)::state = 0u;
                      *(_OWORD *)&qword_1EE2F7E10 = 0u;
LABEL_485:
                      if (*((_DWORD *)v237 + 6) == 2)
                      {
                        if ((*((_WORD *)v237 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef(v237, a2);
                      }
                      else
                      {
                        *((_DWORD *)v237 + 6) -= 2;
                      }
                      goto LABEL_487;
                    }
                    v131 = v11[3];
                    if (v131 && (v132 = *((_QWORD *)v131 + 1)) != 0)
                    {
                      v133 = v73;
                      ++*(_DWORD *)v132;
                      v134 = *(_QWORD *)(v132 + 64);
                      {
                        WebCore::EventHandler::dragState(void)::state = 0u;
                        *(_OWORD *)&qword_1EE2F7E10 = 0u;
                      }
                      v72 = WebCore::DragController::startDrag(v134, v238, v90, (WTF::StringImpl **)v4, (int32x2_t *)(a1 + 320), v91);
                      *(_BYTE *)(a1 + 186) = v72;
                      if ((v72 & 1) != 0)
                      {
                        *(_BYTE *)(a1 + 704) = 0;
                        if (*(_DWORD *)v132 != 1)
                        {
                          --*(_DWORD *)v132;
                          goto LABEL_485;
                        }
                        WebCore::Page::~Page(v132);
LABEL_367:
                        WTF::fastFree(v174, v175);
                        goto LABEL_485;
                      }
                      v135 = 0;
                      v73 = v133;
                    }
                    else
                    {
                      v132 = 0;
                      *(_BYTE *)(a1 + 186) = 0;
                      v135 = 1;
                    }
                    {
                      if ((_QWORD)WebCore::EventHandler::dragState(void)::state && qword_1EE2F7E10 && v73[3592])
                      {
                        v136 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
                        if (!v136 || (v137 = *(_QWORD *)(v136 + 96)) == 0)
                          v137 = WebCore::threadGlobalDataSlow((WebCore *)v72);
                        v138 = *(_QWORD *)(v137 + 40);
                        if (!v138)
                        {
                          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v137);
                          v138 = *(_QWORD *)(v137 + 40);
                        }
                        {
                          v139 = WebCore::EventHandler::dragState(void)::state;
                          if ((_QWORD)WebCore::EventHandler::dragState(void)::state)
                          {
                            v140 = (_DWORD *)qword_1EE2F7E10;
                            if (qword_1EE2F7E10)
                            {
                              if (BYTE8(WebCore::EventHandler::dragState(void)::state))
                              {
                                *(_DWORD *)(WebCore::EventHandler::dragState(void)::state + 24) += 2;
                                WebCore::EventHandler::dispatchDragEvent(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 8), (uint64_t *)(v138 + 664), (WebCore::Node *)v139, v4, v140);
                                if (*(_DWORD *)(v139 + 24) == 2)
                                {
                                  if ((*(_WORD *)(v139 + 30) & 0x400) == 0)
                                    WebCore::Node::removedLastRef((WebCore::Node *)v139, a2);
                                }
                                else
                                {
                                  *(_DWORD *)(v139 + 24) -= 2;
                                }
                              }
                            }
                          }
                        }
                        else
                        {
                          WebCore::EventHandler::dragState(void)::state = 0u;
                          *(_OWORD *)&qword_1EE2F7E10 = 0u;
                        }
                        *(_BYTE *)(a1 + 704) = 0;
                        if ((v135 & 1) != 0)
                          goto LABEL_478;
LABEL_475:
                        if (*(_DWORD *)v132 == 1)
                        {
                          WebCore::Page::~Page(v132);
                          WTF::fastFree(v208, v209);
                        }
                        else
                        {
                          --*(_DWORD *)v132;
                        }
LABEL_477:
                        if (*(_BYTE *)(a1 + 704))
                          goto LABEL_485;
                        goto LABEL_478;
                      }
                    }
                    else
                    {
                      WebCore::EventHandler::dragState(void)::state = 0u;
                      *(_OWORD *)&qword_1EE2F7E10 = 0u;
                    }
                    if ((v135 & 1) != 0)
                      goto LABEL_477;
                    goto LABEL_475;
                  }
                }
LABEL_260:
                v69 = &unk_1EE2F7000;
                v130 = qword_1EE2F7E10;
                goto LABEL_261;
              }
LABEL_460:
              WebCore::EventHandler::dragState(void)::state = 0u;
              *(_OWORD *)&qword_1EE2F7E10 = 0u;
              v14[3616] = 1;
              goto LABEL_260;
            }
            v145 = *(_QWORD *)(*(_QWORD *)(v118 + 40) + 8);
            *(_DWORD *)(v145 + 24) += 2;
            WebCore::Document::updateStyleIfNeeded((WebCore::Document *)v145);
            if (*(_DWORD *)(v145 + 24) == 2)
            {
              if ((*(_WORD *)(v145 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v145, a2);
            }
            else
            {
              *(_DWORD *)(v145 + 24) -= 2;
            }
            v146 = *(_QWORD *)(v118 + 64) & 0xFFFFFFFFFFFFLL;
            if (v146)
            {
              if ((*(_BYTE *)((*(_QWORD *)(v118 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
              {
                __break(0xC471u);
                JUMPOUT(0x195FA17D4);
              }
              LOBYTE(v252) = 0;
              v254 = 0;
              v255 = 0;
              v253 = 0;
              LOBYTE(v256) = 0;
              *(_OWORD *)v244 = 0u;
              memset(v245, 0, 25);
              *(_WORD *)((char *)&v256 + 1) = 1;
              LODWORD(v257) = 0;
              HIDWORD(v256) = 0;
              (*(void (**)(uint64_t, _QWORD, WTF **, uint64_t, _QWORD))(*(_QWORD *)v146 + 576))(v146, 0, v244, 4, 0);
              WebCore::TransformState::flatten((WebCore::TransformState *)v244, 0);
              v148 = v244[0];
              v149 = v254;
              v254 = 0;
              if (v149)
                WTF::fastFree(v149, v147);
              v150 = v253;
              v253 = 0;
              if (v150)
                WTF::fastFree(v150, v147);
              v151 = roundf(*(float *)&v148);
              if (v151 >= 2147500000.0)
              {
                v152 = 0x7FFFFFFF;
              }
              else if (v151 <= -2147500000.0)
              {
                v152 = 0x80000000;
              }
              else
              {
                v152 = (int)v151;
              }
              v153 = roundf(*((float *)&v148 + 1));
              if (v153 >= 2147500000.0)
              {
                v154 = 0x7FFFFFFF;
              }
              else if (v153 <= -2147500000.0)
              {
                v154 = 0x80000000;
              }
              else
              {
                v154 = (int)v153;
              }
              v155 = *(_DWORD *)(a1 + 320) - v152;
              v156 = (*(_DWORD *)(a1 + 324) - v154);
              {
                v157 = qword_1EE2F7E10;
              }
              else
              {
                v157 = 0;
                WebCore::EventHandler::dragState(void)::state = 0u;
                *(_OWORD *)&qword_1EE2F7E10 = 0u;
              }
              v244[0] = (WTF *)v118;
              WebCore::DataTransfer::setDragImage(v157, (uint64_t *)v244, v155, v156);
              v158 = v244[0];
              v244[0] = 0;
              if (v158)
              {
                if (*((_DWORD *)v158 + 6) == 2)
                {
                  if ((*((_WORD *)v158 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v158, a2);
                }
                else
                {
                  *((_DWORD *)v158 + 6) -= 2;
                }
              }
              goto LABEL_241;
            }
            v177 = *(_QWORD *)(StatusReg + 736);
            if (!v177 || (v178 = *(_QWORD *)(v177 + 96)) == 0)
              v178 = WebCore::threadGlobalDataSlow(0);
            v179 = *(_QWORD *)(v178 + 40);
            if (!v179)
            {
              WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v178);
              v179 = *(_QWORD *)(v178 + 40);
            }
            {
              v120 = 0;
              *(_BYTE *)(a1 + 704) = 0;
              WebCore::EventHandler::dragState(void)::state = 0u;
              *(_OWORD *)&qword_1EE2F7E10 = 0u;
              goto LABEL_239;
            }
            v180 = WebCore::EventHandler::dragState(void)::state;
            if ((_QWORD)WebCore::EventHandler::dragState(void)::state)
            {
              v181 = (_DWORD *)qword_1EE2F7E10;
              if (qword_1EE2F7E10)
              {
                if (BYTE8(WebCore::EventHandler::dragState(void)::state))
                {
                  *(_DWORD *)(WebCore::EventHandler::dragState(void)::state + 24) += 2;
                  WebCore::EventHandler::dispatchDragEvent(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 8), (uint64_t *)(v179 + 664), (WebCore::Node *)v180, v235, v181);
                  if (*(_DWORD *)(v180 + 24) == 2)
                  {
                    if ((*(_WORD *)(v180 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v180, a2);
                  }
                  else
                  {
                    *(_DWORD *)(v180 + 24) -= 2;
                  }
                }
              }
            }
            *(_BYTE *)(a1 + 704) = 0;
            if (v182 == 1)
            {
              v183 = (WebCore::DataTransfer *)qword_1EE2F7E10;
              if (!qword_1EE2F7E10)
                goto LABEL_385;
              *(_DWORD *)(qword_1EE2F7E10 + 24) = 0;
              qword_1EE2F7E10 = 0;
              if (*(_DWORD *)v183 != 1)
              {
                --*(_DWORD *)v183;
                goto LABEL_385;
              }
              WebCore::DataTransfer::~DataTransfer(v183, a2);
              WTF::fastFree(v187, v188);
              {
LABEL_385:
                v184 = WebCore::EventHandler::dragState(void)::state;
                *(_QWORD *)&WebCore::EventHandler::dragState(void)::state = 0;
                if (v184)
                {
                  if (*(_DWORD *)(v184 + 24) != 2)
                  {
                    v120 = 0;
                    *(_DWORD *)(v184 + 24) -= 2;
                    goto LABEL_239;
                  }
                  if ((*(_WORD *)(v184 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v184, a2);
                }
                v120 = 0;
                goto LABEL_239;
              }
            }
            v120 = 0;
            WebCore::EventHandler::dragState(void)::state = 0u;
            *(_OWORD *)&qword_1EE2F7E10 = 0u;
            goto LABEL_239;
          }
          ++*v79;
          v80 = v77 + 2;
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 + 1, v80));
          if ((v14[3616] & 1) != 0)
          {
            v82 = WebCore::EventHandler::dragState(void)::state;
            v83 = BYTE9(WebCore::EventHandler::dragState(void)::state);
            if ((_QWORD)WebCore::EventHandler::dragState(void)::state)
              *(_DWORD *)(WebCore::EventHandler::dragState(void)::state + 24) += 2;
          }
          else
          {
            v82 = 0;
            v83 = 0;
            WebCore::EventHandler::dragState(void)::state = 0u;
            *(_OWORD *)&qword_1EE2F7E10 = 0u;
          }
          do
            v84 = __ldaxr(v80);
          while (__stlxr(v84 + 1, v80));
          WebCore::DragController::hitTestResultForDragStart((WebCore::DragController *)v244, (WebCore::LocalFrame *)v77, (WebCore::Element *)v82, (const WebCore::IntPoint *)*(unsigned int *)(a1 + 320), *(_DWORD *)(a1 + 324));
          if (!v260)
          {
            do
            {
LABEL_206:
              v102 = __ldaxr(v80);
              v103 = v102 - 1;
            }
            while (__stlxr(v103, v80));
            if (!v103)
            {
              atomic_store(1u, v80);
              v189 = (WTF *)WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v189 = off_1E31FE290;
              *((_QWORD *)v189 + 1) = v80;
              v244[0] = v189;
              WTF::ensureOnMainThread();
              started = v244[0];
              v244[0] = 0;
              if (started)
                started = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)started + 8))(started);
            }
            if (*(_DWORD *)(v82 + 24) == 2)
            {
              if ((*(_WORD *)(v82 + 30) & 0x400) == 0)
                started = (WebCore *)WebCore::Node::removedLastRef((WebCore::Node *)v82, v85);
            }
            else
            {
              *(_DWORD *)(v82 + 24) -= 2;
            }
            do
            {
              v104 = __ldaxr(v80);
              v105 = v104 - 1;
            }
            while (__stlxr(v105, v80));
            v14 = &unk_1EE2F7000;
            if (!v105)
            {
              atomic_store(1u, v80);
              v190 = (WTF *)WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v190 = off_1E31FE290;
              *((_QWORD *)v190 + 1) = v80;
              v244[0] = v190;
              WTF::ensureOnMainThread();
              started = v244[0];
              v244[0] = 0;
              if (started)
                started = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)started + 8))(started);
            }
            if (*v79 == 1)
            {
              WebCore::Page::~Page((uint64_t)v79);
              started = (WebCore *)WTF::fastFree(v143, v144);
            }
            else
            {
              --*v79;
            }
            goto LABEL_214;
          }
          v233 = (WebCore::Pasteboard *)*((_QWORD *)v236 + 4);
          v234 = v6;
          v86 = (WebCore::Document *)*((_QWORD *)v77 + 37);
          v87 = (WebCore::Editor *)*((_QWORD *)v86 + 382);
          if (!v87)
          {
            v191 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
            WebCore::Editor::Editor(v191, v86);
            v192 = (WebCore::Editor *)*((_QWORD *)v86 + 382);
            *((_QWORD *)v86 + 382) = v191;
            if (v192)
            {
              WebCore::Editor::~Editor(v192, v85);
              if (*(_DWORD *)v193)
              {
                *(_QWORD *)(v193 + 496) = 0;
                *(_OWORD *)(v193 + 464) = 0u;
                *(_OWORD *)(v193 + 480) = 0u;
                *(_OWORD *)(v193 + 432) = 0u;
                *(_OWORD *)(v193 + 448) = 0u;
                *(_OWORD *)(v193 + 400) = 0u;
                *(_OWORD *)(v193 + 416) = 0u;
                *(_OWORD *)(v193 + 368) = 0u;
                *(_OWORD *)(v193 + 384) = 0u;
                *(_OWORD *)(v193 + 336) = 0u;
                *(_OWORD *)(v193 + 352) = 0u;
                *(_OWORD *)(v193 + 304) = 0u;
                *(_OWORD *)(v193 + 320) = 0u;
                *(_OWORD *)(v193 + 272) = 0u;
                *(_OWORD *)(v193 + 288) = 0u;
                *(_OWORD *)(v193 + 240) = 0u;
                *(_OWORD *)(v193 + 256) = 0u;
                *(_OWORD *)(v193 + 208) = 0u;
                *(_OWORD *)(v193 + 224) = 0u;
                *(_OWORD *)(v193 + 176) = 0u;
                *(_OWORD *)(v193 + 192) = 0u;
                *(_OWORD *)(v193 + 144) = 0u;
                *(_OWORD *)(v193 + 160) = 0u;
                *(_OWORD *)(v193 + 112) = 0u;
                *(_OWORD *)(v193 + 128) = 0u;
                *(_OWORD *)(v193 + 80) = 0u;
                *(_OWORD *)(v193 + 96) = 0u;
                *(_OWORD *)(v193 + 48) = 0u;
                *(_OWORD *)(v193 + 64) = 0u;
                *(_OWORD *)(v193 + 16) = 0u;
                *(_OWORD *)(v193 + 32) = 0u;
                *(_OWORD *)v193 = 0u;
              }
              else
              {
                WTF::fastFree((WTF *)v193, v85);
              }
            }
            v87 = (WebCore::Editor *)*((_QWORD *)v86 + 382);
          }
          ++*(_DWORD *)v87;
          if (v83 == 8)
          {
            if (WebCore::enclosingTextFormControl((WebCore *)(*(_QWORD *)(*((_QWORD *)v77 + 37) + 3064) + 120), (const WebCore::Position *)v85))
            {
              v88 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v87 + 2) + 8) + 688);
              if (!v88)
                v88 = WebCore::Document::ensureQuirks(*(WebCore::Document **)(*((_QWORD *)v87 + 2) + 8));
              if (*(_BYTE *)(v88 + 66))
                v89 = 576;
              else
                v89 = 2624;
              WebCore::Editor::selectedText((uint64_t)v87, v89, v243);
              (*(void (**)(WebCore::Pasteboard *, WTF::StringImpl **, uint64_t))(*(_QWORD *)v233 + 208))(v233, v243, 1);
              started = v243[0];
              v243[0] = 0;
              if (started)
              {
                if (*(_DWORD *)started == 2)
                  started = (WebCore *)WTF::StringImpl::destroy(started, (WTF::StringImpl *)v85);
                else
                  *(_DWORD *)started -= 2;
              }
            }
            else
            {
              WebCore::Editor::writeSelectionToPasteboard(v87, v233);
            }
LABEL_203:
            if (*(_DWORD *)v87)
            {
              --*(_DWORD *)v87;
              v6 = v234;
              if (v260)
                WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v244, v85);
              goto LABEL_206;
            }
LABEL_421:
            __break(0xC471u);
            JUMPOUT(0x195FA1738);
          }
          Image = WebCore::getImage(*(_QWORD *)(v82 + 64), (WebCore::Element *)v85);
          v94 = (_DWORD *)Image;
          if (Image)
            ++*(_DWORD *)(Image + 8);
          if (!v260)
            goto LABEL_420;
          WebCore::HitTestResult::absoluteImageURL((WebCore::HitTestResult *)v244, v93, (uint64_t)v243);
          if ((v83 & 2) != 0)
          {
            if (v243[0])
            {
              if (v94)
              {
                if (*((_DWORD *)v243[0] + 1))
                {
                  v97.n128_f32[0] = (*(float (**)(_DWORD *, _QWORD))(*(_QWORD *)v94 + 168))(v94, 0);
                  if (v97.n128_f32[0] > 0.0 && v161 > 0.0)
                  {
                    v242[0] = 0;
                    WebCore::Editor::writeImageToPasteboard(v87, v233, (WebCore::Element *)v82, v243, v242);
                    goto LABEL_189;
                  }
                }
              }
            }
          }
          if (!v260)
          {
LABEL_420:
            __break(1u);
            goto LABEL_421;
          }
          WebCore::HitTestResult::absoluteLinkURL((WebCore::HitTestResult *)v244, v95, v96, (uint64_t)v242, v97);
          if ((v83 & 4) != 0)
          {
            if (!v242[0])
              goto LABEL_194;
            if (*((_DWORD *)v242[0] + 1))
            {
              WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*((_QWORD *)v77 + 37) + 192), (WTF::StringImpl *)v85);
              v163 = v162;
              if (v162)
              {
                do
                  v164 = __ldaxr(v162);
                while (__stlxr(v164 + 1, v162));
              }
              {
                WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
              }
              canDisplay = WebCore::SecurityOrigin::canDisplay((uint64_t)v162, (WTF::URL *)v242, (uint64_t (***)(_QWORD, WebCore::SecurityOrigin *))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance);
              v168 = canDisplay;
              if (v163)
              {
                do
                {
                  v169 = __ldaxr(v163);
                  v170 = v169 - 1;
                }
                while (__stlxr(v170, v163));
                if (!v170)
                {
                  atomic_store(1u, v163);
                  v200 = (WTF::StringImpl *)*((_QWORD *)v163 + 6);
                  *((_QWORD *)v163 + 6) = 0;
                  if (v200)
                  {
                    if (*(_DWORD *)v200 == 2)
                      WTF::StringImpl::destroy(v200, (WTF::StringImpl *)v85);
                    else
                      *(_DWORD *)v200 -= 2;
                  }
                  v201 = (WTF::StringImpl *)*((_QWORD *)v163 + 5);
                  *((_QWORD *)v163 + 5) = 0;
                  if (v201)
                  {
                    if (*(_DWORD *)v201 == 2)
                      WTF::StringImpl::destroy(v201, (WTF::StringImpl *)v85);
                    else
                      *(_DWORD *)v201 -= 2;
                  }
                  v202 = v163[8];
                  if ((_DWORD)v202 != -1)
                    ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33FE860[v202])(&v241, v163 + 2);
                  v163[8] = -1;
                  WTF::fastFree((WTF *)v163, v85);
                  if ((v168 & 1) == 0)
                    goto LABEL_189;
LABEL_342:
                  if (v260)
                  {
                    if (v256)
                      WebCore::Node::textContent(v256, 0, v166, &v240, v167);
                    else
                      v240 = 0;
                    WTF::String::simplifyWhiteSpace();
                    WebCore::Editor::copyURL(v87, (const WTF::URL *)v242, &v241, v233);
                    v185 = v241;
                    v241 = 0;
                    if (v185)
                    {
                      if (*(_DWORD *)v185 == 2)
                        WTF::StringImpl::destroy(v185, (WTF::StringImpl *)v85);
                      else
                        *(_DWORD *)v185 -= 2;
                    }
                    v186 = v240;
                    v240 = 0;
                    if (v186)
                    {
                      if (*(_DWORD *)v186 == 2)
                        WTF::StringImpl::destroy(v186, (WTF::StringImpl *)v85);
                      else
                        *(_DWORD *)v186 -= 2;
                    }
                    goto LABEL_189;
                  }
                  goto LABEL_420;
                }
              }
              if (canDisplay)
                goto LABEL_342;
            }
          }
LABEL_189:
          v98 = v242[0];
          v242[0] = 0;
          if (v98)
          {
            if (*(_DWORD *)v98 == 2)
              WTF::StringImpl::destroy(v98, (WTF::StringImpl *)v85);
            else
              *(_DWORD *)v98 -= 2;
          }
LABEL_194:
          started = v243[0];
          v243[0] = 0;
          if (started)
          {
            if (*(_DWORD *)started == 2)
            {
              started = (WebCore *)WTF::StringImpl::destroy(started, (WTF::StringImpl *)v85);
              if (!v94)
                goto LABEL_203;
              goto LABEL_198;
            }
            *(_DWORD *)started -= 2;
          }
          if (!v94)
            goto LABEL_203;
LABEL_198:
          if (v94[2] == 1)
            started = (WebCore *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v94 + 8))(v94);
          else
            --v94[2];
          goto LABEL_203;
        }
      }
    }
LABEL_487:
    v160 = 1;
    goto LABEL_488;
  }
  if (*(double *)v4 - *(double *)(a1 + 328) >= 0.0)
    goto LABEL_94;
  if ((BYTE9(WebCore::EventHandler::dragState(void)::state) & 2) != 0)
  {
    BYTE9(WebCore::EventHandler::dragState(void)::state) = 2;
    goto LABEL_94;
  }
  if ((BYTE9(WebCore::EventHandler::dragState(void)::state) & 5) != 0)
  {
    *(_BYTE *)(a1 + 705) = 0;
    goto LABEL_94;
  }
  *(_BYTE *)(a1 + 704) = 0;
  v159 = WebCore::EventHandler::dragState(void)::state;
  *(_QWORD *)&WebCore::EventHandler::dragState(void)::state = 0;
  if (v159)
  {
    if (*(_DWORD *)(v159 + 24) != 2)
    {
      *(_DWORD *)(v159 + 24) -= 2;
      goto LABEL_322;
    }
    if ((*(_WORD *)(v159 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v159, a2);
      if (*(_BYTE *)(a1 + 704))
      {
        if ((v14[3616] & 1) == 0)
        {
LABEL_92:
          v44 = 0;
          WebCore::EventHandler::dragState(void)::state = 0u;
          *(_OWORD *)&qword_1EE2F7E10 = 0u;
          v14[3616] = 1;
          goto LABEL_95;
        }
LABEL_94:
        v44 = BYTE9(WebCore::EventHandler::dragState(void)::state);
        goto LABEL_95;
      }
    }
  }
LABEL_322:
  v160 = ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 136) + 696) & 0x10000000000000) == 0
       || !*(_BYTE *)(a1 + 180))
      && *(_BYTE *)(a1 + 184) == 0;
  if (v11)
    goto LABEL_488;
LABEL_490:
  if (v160)
    goto LABEL_491;
LABEL_502:
  v214 = *(_QWORD *)(v4 + 200);
  if (!v214)
  {
    v10 = 0;
    goto LABEL_518;
  }
  *(_DWORD *)(v214 + 24) += 2;
  if (*(_BYTE *)(v4 + 48))
    goto LABEL_504;
  v215 = (WebCore::RenderObject *)(*(_QWORD *)(v214 + 64) & 0xFFFFFFFFFFFFLL);
  if (!v215)
  {
    if ((*(_WORD *)(v214 + 28) & 0x80) != 0)
    {
      v229 = *(_QWORD *)(v214 + 200);
      if (!v229)
        goto LABEL_504;
      v224 = (uint64_t *)(v229 + 8);
    }
    else
    {
      v224 = (uint64_t *)(v214 + 32);
    }
    v225 = *v224;
    if (*v224)
    {
      v226 = *(_WORD *)(v225 + 28);
      if ((v226 & 0x80) != 0)
      {
        v232 = *(_QWORD *)(v225 + 200);
        if (v232)
        {
          v225 = *(_QWORD *)(v232 + 8);
          if (v225)
          {
LABEL_527:
            v227 = *(_DWORD *)(v225 + 24);
            *(_DWORD *)(v225 + 24) = v227 + 2;
            v215 = (WebCore::RenderObject *)(*(_QWORD *)(v225 + 64) & 0xFFFFFFFFFFFFLL);
            if (v215)
            {
              if ((*(_BYTE *)((*(_QWORD *)(v225 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
              {
                __break(0xC471u);
                JUMPOUT(0x195FA1FB0);
              }
              v228 = *(unsigned __int8 *)((*(_QWORD *)(v225 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E);
              if (v227)
              {
                *(_DWORD *)(v225 + 24) = v227;
              }
              else if ((*(_WORD *)(v225 + 30) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v225, a2);
              }
              if (v228 == 18)
                goto LABEL_506;
            }
            else
            {
              if (v227)
              {
                v10 = 0;
                *(_DWORD *)(v225 + 24) = v227;
                goto LABEL_516;
              }
              if ((*(_WORD *)(v225 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v225, a2);
            }
          }
        }
      }
      else if ((v226 & 8) != 0)
      {
        goto LABEL_527;
      }
    }
LABEL_504:
    v10 = 0;
    goto LABEL_516;
  }
LABEL_506:
  *(_BYTE *)(a1 + 704) = 0;
  if (*(_BYTE *)(a1 + 184))
  {
    WebCore::AutoscrollController::startAutoscrollForSelection(*(WebCore::AutoscrollController **)(a1 + 144), v215);
    *(_BYTE *)(a1 + 184) = 0;
  }
  if (*(_BYTE *)(a1 + 192) == 2)
  {
    v216 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 200) + 40) + 8);
    *(_DWORD *)(v216 + 24) += 2;
    WebCore::Document::updateStyleIfNeeded((WebCore::Document *)v216);
    if (*(_DWORD *)(v216 + 24) == 2)
    {
      if ((*(_WORD *)(v216 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v216, a2);
    }
    else
    {
      *(_DWORD *)(v216 + 24) -= 2;
    }
  }
  else
  {
    *(_QWORD *)v245 = 0x4000000040;
    v217 = *(int32x2_t *)(a1 + 320);
    v218 = (int8x8_t)vcgt_s32(v217, (int32x2_t)0xFE000000FE000000);
    v244[0] = (WTF *)vorr_s8((int8x8_t)(*(_QWORD *)&v218 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, v217), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(v217, 6uLL)), v218));
    v244[1] = (WTF *)((uint64_t)v244[0] & 0xFFFFFFC0 | ((unint64_t)((HIDWORD(v244[0]) & 0xFFFFFFC0) >> 6) << 38));
    *(float32x2_t *)&v245[8] = vmul_f32(vcvt_f32_s32((int32x2_t)v244[0]), (float32x2_t)vdup_n_s32(0x3C800000u));
    *(float *)&v245[16] = (float)(int)((uint64_t)v244[0] & 0xFFFFFFC0) * 0.015625;
    *(float *)&v245[20] = (float)(int)(HIDWORD(v244[0]) & 0xFFFFFFC0) * 0.015625;
    *(float *)&v245[24] = *(float *)&v245[16] + 1.0;
    v246 = *(float *)&v245[20];
    v247 = *(float *)&v245[16] + 1.0;
    v248 = *(float *)&v245[20] + 1.0;
    v249 = *(float *)&v245[16];
    v250 = *(float *)&v245[20] + 1.0;
    v251 = 256;
    v252 = 0;
    v253 = 0;
    v259 = 0;
    v254 = v244[0];
    v255 = 0;
    v258 = 0;
    v256 = 0;
    v257 = 0;
    v219 = *(_QWORD *)(v6 + 296);
    if (v219)
    {
      *(_DWORD *)(v219 + 24) += 2;
      LODWORD(v243[0]) = 259;
      BYTE4(v243[0]) = 1;
      WebCore::Document::hitTest(v219, v243, (WebCore::HitTestingTransformState *)v244, (uint64_t)v244);
      if (*(_DWORD *)(v219 + 24) == 2)
      {
        if ((*(_WORD *)(v219 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v219, v220);
      }
      else
      {
        *(_DWORD *)(v219 + 24) -= 2;
      }
    }
    else
    {
      LODWORD(v243[0]) = 259;
      BYTE4(v243[0]) = 1;
      WebCore::Document::hitTest(0, v243, (WebCore::HitTestingTransformState *)v244, (uint64_t)v244);
    }
    WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v244, v220);
  }
  v10 = 1;
LABEL_516:
  if (*(_DWORD *)(v214 + 24) == 2)
  {
    if ((*(_WORD *)(v214 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v214, a2);
  }
  else
  {
    *(_DWORD *)(v214 + 24) -= 2;
  }
LABEL_518:
  if (v6)
  {
    do
    {
      v221 = __ldaxr(v7);
      v222 = v221 - 1;
    }
    while (__stlxr(v222, v7));
    if (!v222)
    {
      atomic_store(1u, v7);
      v230 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v230 = off_1E31FE290;
      *((_QWORD *)v230 + 1) = v7;
      v244[0] = v230;
      WTF::ensureOnMainThread();
      v231 = v244[0];
      v244[0] = 0;
      if (v231)
        (*(void (**)(WTF *))(*(_QWORD *)v231 + 8))(v231);
    }
  }
  return v10;
}

BOOL WebCore::EventHandler::eventMayStartDrag(WebCore::EventHandler *a1, uint64_t a2)
{
  _QWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  BOOL v7;
  _BOOL8 v8;
  WebCore::ScrollView *v9;
  uint64_t v10;
  uint64_t v11;
  const WebCore::IntPoint *v12;
  unint64_t v13;
  int8x8_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  WTF *v26;
  void *v27;
  WTF *v28;
  void *v29;
  _QWORD *v30;
  int32x2_t v31;
  WebCore::Node *v32;
  char v33;
  WebCore::DataTransfer *v34;
  WTF *v35;
  int32x2_t v36[4];
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;
  int32x2_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;

  v3 = *(_QWORD **)(*((_QWORD *)a1 + 1) + 8);
  v4 = (unsigned int *)(v3 + 1);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = v3[37];
  if (!v6)
  {
    v8 = 0;
    goto LABEL_45;
  }
  *(_DWORD *)(v6 + 24) += 2;
  if (*(_BYTE *)(a2 + 48))
    v7 = 0;
  else
    v7 = *(_DWORD *)(a2 + 112) == 1;
  if (!v7 || (v9 = (WebCore::ScrollView *)v3[36]) == 0)
  {
    v8 = 0;
    goto LABEL_43;
  }
  ++*((_DWORD *)v9 + 2);
  v10 = v3[3];
  if (!v10 || (v11 = *(_QWORD *)(v10 + 8)) == 0)
  {
    v8 = 0;
    goto LABEL_41;
  }
  ++*(_DWORD *)v11;
  WebCore::EventHandler::updateDragSourceActionsAllowed(a1);
  v13 = WebCore::ScrollView::windowToContents(v9, (const WebCore::IntPoint *)(a2 + 52), v12);
  v14 = (int8x8_t)vcgt_s32((int32x2_t)v13, (int32x2_t)0xFE000000FE000000);
  v36[2] = (int32x2_t)0x4000000040;
  v36[0] = (int32x2_t)vorr_s8((int8x8_t)(*(_QWORD *)&v14 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)v13), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32((int32x2_t)v13, 6uLL)), v14));
  v36[1] = (int32x2_t)(v36[0].i32[0] & 0xFFFFFFC0 | ((unint64_t)((v36[0].i32[1] & 0xFFFFFFC0) >> 6) << 38));
  v36[3] = (int32x2_t)vmul_f32(vcvt_f32_s32(v36[0]), (float32x2_t)vdup_n_s32(0x3C800000u));
  v37 = (float)(int)(v36[0].i32[0] & 0xFFFFFFC0) * 0.015625;
  v38 = (float)(int)(v36[0].i32[1] & 0xFFFFFFC0) * 0.015625;
  v39 = v37 + 1.0;
  v40 = v38;
  v41 = v37 + 1.0;
  v42 = v38 + 1.0;
  v43 = v37;
  v44 = v38 + 1.0;
  v45 = 256;
  v46 = 0;
  v47 = 0;
  v53 = 0;
  v48 = v36[0];
  v49 = 0;
  v52 = 0;
  v50 = 0;
  v51 = 0;
  LODWORD(v32) = 257;
  BYTE4(v32) = 1;
  WebCore::Document::hitTest(v6, &v32, (WebCore::HitTestingTransformState *)v36, (uint64_t)v36);
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v17 = v46;
  if (!v46)
  {
LABEL_27:
    v8 = 0;
    goto LABEL_31;
  }
  while (1)
  {
    v18 = *(_WORD *)(v17 + 28);
    if ((v18 & 8) != 0)
      break;
    v19 = (uint64_t *)(v17 + 32);
    v16 = *(_QWORD *)(v17 + 32);
    if (v16)
    {
      if ((*(_WORD *)(v16 + 28) & 8) != 0)
      {
        v16 = *(_QWORD *)(v16 + 72) & 0xFFFFFFFFFFFFLL;
        if (v16)
        {
          v16 = *(_QWORD *)(v16 + 88);
          if (v16)
          {
            v21 = *(_QWORD *)(v16 + 224);
            if (v21)
            {
              v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v17);
              if (v20)
                goto LABEL_19;
              v18 = *(_WORD *)(v17 + 28);
              v19 = (uint64_t *)(v17 + 32);
            }
          }
        }
      }
    }
    if ((v18 & 0x80) != 0)
    {
      v22 = *(_QWORD *)(v17 + 200);
      if (!v22)
        goto LABEL_27;
      v19 = (uint64_t *)(v22 + 8);
    }
    v20 = *v19;
LABEL_19:
    v17 = v20;
    if (!v20)
      goto LABEL_27;
  }
  *(_DWORD *)(v17 + 24) += 2;
  v8 = WebCore::DragController::draggableElement(*(_QWORD *)(v11 + 64), (uint64_t)v3, v17, ((int)(v48.i32[0] - (v16 & 0xFFFFFFC0) + 32) >> 6) + v48.i32[0] / 64, ((int)(v48.i32[1] - (v48.i32[0] & 0xFFFFFFC0) + 32) >> 6) + v48.i32[1] / 64, (uint64_t)&v32) != 0;
  if (*(_DWORD *)(v17 + 24) == 2)
  {
    if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v17, v15);
  }
  else
  {
    *(_DWORD *)(v17 + 24) -= 2;
  }
LABEL_31:
  if (v35)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v35, (WTF::StringImpl *)v15);
  if (v34)
  {
    if (*(_DWORD *)v34 == 1)
    {
      WebCore::DataTransfer::~DataTransfer(v34, v15);
      WTF::fastFree(v28, v29);
    }
    else
    {
      --*(_DWORD *)v34;
    }
  }
  if (v32)
  {
    if (*((_DWORD *)v32 + 6) == 2)
    {
      if ((*((_WORD *)v32 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v32, v15);
    }
    else
    {
      *((_DWORD *)v32 + 6) -= 2;
    }
  }
  WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v36, v15);
  if (*(_DWORD *)v11 == 1)
  {
    WebCore::Page::~Page(v11);
    WTF::fastFree(v26, v27);
  }
  else
  {
    --*(_DWORD *)v11;
  }
LABEL_41:
  if (*((_DWORD *)v9 + 2) == 1)
    (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v9 + 8))(v9);
  else
    --*((_DWORD *)v9 + 2);
LABEL_43:
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, (void *)a2);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  do
  {
LABEL_45:
    v23 = __ldaxr(v4);
    v24 = v23 - 1;
  }
  while (__stlxr(v24, v4));
  if (!v24)
  {
    atomic_store(1u, v4);
    v30 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v30 = off_1E31FE290;
    v30[1] = v4;
    v36[0] = (int32x2_t)v30;
    WTF::ensureOnMainThread();
    v31 = v36[0];
    v36[0] = 0;
    if (v31)
      (*(void (**)(int32x2_t))(**(_QWORD **)&v31 + 8))(v31);
  }
  return v8;
}

uint64_t WebCore::EventHandler::updateDragSourceActionsAllowed(WebCore::EventHandler *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  WebCore::ScrollView *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v8;
  void *v9;
  uint64_t v10;

  v1 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v2 = *(_QWORD *)(v1 + 24);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  ++*(_DWORD *)v3;
  v4 = *(WebCore::ScrollView **)(v1 + 288);
  if (v4)
  {
    ++*((_DWORD *)v4 + 2);
    v5 = *(_QWORD *)(v3 + 64);
    v10 = WebCore::ScrollView::contentsToRootView(v4, (WebCore::EventHandler *)((char *)this + 320));
    v6 = (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(v5 + 8) + 32))(*(_QWORD *)(v5 + 8), &v10);
    *(_BYTE *)(v5 + 46) = v6;
    if (*((_DWORD *)v4 + 2) == 1)
      (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v4 + 8))(v4);
    else
      --*((_DWORD *)v4 + 2);
  }
  else
  {
    v6 = 0;
  }
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::Page::~Page(v3);
    WTF::fastFree(v8, v9);
  }
  else
  {
    --*(_DWORD *)v3;
  }
  return v6;
}

unsigned int *WebCore::EventHandler::invalidateClick(WebCore::EventHandler *this, void *a2)
{
  unsigned int *result;

  *((_DWORD *)this + 74) = 0;
  result = (unsigned int *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

uint64_t WebCore::EventHandler::lostMouseCapture(WebCore::EventHandler *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t result;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;

  v1 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v2 = (unsigned int *)(v1 + 8);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 296) + 3064) + 248);
  result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, 0);
  do
  {
    v6 = __ldaxr(v2);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v2));
  if (!v7)
  {
    atomic_store(1u, v2);
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = off_1E31FE290;
    v8[1] = v2;
    v9 = (uint64_t)v8;
    WTF::ensureOnMainThread();
    result = v9;
    if (v9)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  return result;
}

uint64_t WebCore::EventHandler::handleMouseReleaseEvent(int32x2_t *a1, uint64_t a2, WAKView *a3)
{
  WebCore::AutoscrollController *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  int32x2_t v10;
  int8x8_t v11;
  int32x2_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  char v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WebCore::FrameSelection *v30;
  WebCore::Document *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  WebCore::Document *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  WebCore::Node *v50;
  WTF::StringImpl *v51;
  unsigned int v52;
  unsigned int v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WebCore::Editor *v68;
  void *v69;
  WebCore::Editor *v70;
  uint64_t v71;
  void *v72;
  WebCore::Editor *v73;
  void *v74;
  WebCore::Editor *v75;
  uint64_t v76;
  void *v77;
  WTF::StringImpl *v78[13];
  WTF::StringImpl *v79[3];
  _QWORD *v80;
  int v81;
  char v82;
  WebCore::Node *v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  char v87;
  uint64_t v88;
  int v89;
  char v90;
  uint64_t v91;
  int v92;
  char v93;
  uint64_t v94;
  int v95;
  char v96;
  __int16 v97;
  char v98;

  v5 = (WebCore::AutoscrollController *)a1[18];
  if (*((_BYTE *)v5 + 64) == 2)
    WebCore::AutoscrollController::stopAutoscrollTimer(v5, 0);
  v6 = *(_QWORD *)(*(_QWORD *)&a1[1] + 8);
  v7 = (unsigned int *)(v6 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  if ((WebCore::EventHandler::eventLoopHandleMouseUp((uint64_t)a1, a2, a3) & 1) != 0)
  {
    v9 = 1;
    goto LABEL_78;
  }
  a1[21].i8[0] = 0;
  WebCore::EventHandler::CapturesDragging::operator=((uint64_t)&a1[21] + 4);
  a1[88].i8[0] = 0;
  a1[22].i8[4] = 0;
  a1[23].i16[0] = 0;
  if (!a1[22].i8[6]
    || a1[24].i8[0] == 2
    || (v10 = *(int32x2_t *)(a2 + 52),
        v11 = (int8x8_t)vcgt_s32(v10, (int32x2_t)0xFE000000FE000000),
        v12 = vceq_s32(a1[81], (int32x2_t)vorr_s8((int8x8_t)(*(_QWORD *)&v11 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, v10), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(v10, 6uLL)), v11))), (v12.i32[0] & v12.i32[1] & 1) == 0)|| (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 296) + 3064) + 153) == 2? (v13 = *(_BYTE *)(a2 + 48) == 2): (v13 = 1), v13))
  {
    v9 = 0;
    goto LABEL_16;
  }
  v80 = 0;
  v81 = 0;
  v82 &= 0xF0u;
  v83 = 0;
  LODWORD(v84) = 0;
  BYTE4(v84) &= 0xF0u;
  v85 = 0;
  v86 = 0;
  v87 &= 0xF0u;
  v88 = 0;
  v89 = 0;
  v90 &= 0xF0u;
  v91 = 0;
  v92 = 0;
  v93 &= 0xF0u;
  v94 = 0;
  v95 = 0;
  v96 &= 0xF0u;
  v97 = 1;
  v98 = v98 & 0xFC | 1;
  v24 = *(_QWORD *)(a2 + 200);
  if (!v24)
    goto LABEL_39;
  *(_DWORD *)(v24 + 24) += 2;
  v25 = *(_QWORD *)(v24 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v25)
    goto LABEL_39;
  if ((*(_QWORD *)(*(_QWORD *)(v6 + 136) + 664) & 0x4000000000000) == 0)
  {
    if (!WebCore::Node::computeEditability(v24, 0, 1))
      goto LABEL_39;
    v25 = *(_QWORD *)(v24 + 64) & 0xFFFFFFFFFFFFLL;
  }
  v78[0] = *(WTF::StringImpl **)(a2 + 224);
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, WTF::StringImpl **, uint64_t, _QWORD))(*(_QWORD *)v25 + 352))(v79, v25, v78, 1, 0);
  WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)v78, (const WebCore::VisiblePosition *)v79, 0);
  WebCore::VisibleSelection::operator=((uint64_t *)&v80, (uint64_t *)v78);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v78);
  v26 = WebCore::editableRootForPosition(*(_QWORD *)(*(_QWORD *)(v6 + 296) + 3064) + 120, 0);
  v28 = WebCore::editableRootForPosition((uint64_t)&v91, 0);
  v29 = v79[0];
  v79[0] = 0;
  if (v29)
  {
    if (*((_DWORD *)v29 + 6) == 2)
    {
      if ((*((_WORD *)v29 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v29, v27);
    }
    else
    {
      *((_DWORD *)v29 + 6) -= 2;
    }
  }
  if (v26 != v28)
  {
LABEL_39:
    v30 = *(WebCore::FrameSelection **)(*(_QWORD *)(v6 + 296) + 3064);
    if ((WebCore::operator==((uint64_t)v30 + 56, (uint64_t)&v80) & 1) == 0
      && WebCore::FrameSelection::shouldChangeSelection(v30, (const WebCore::VisibleSelection *)&v80))
    {
      WebCore::FrameSelection::setSelection((uint64_t)v30, (uint64_t)&v80, 0xC7u, 0, 0, 0, 0);
    }
    if (!v24)
      goto LABEL_45;
  }
  if (*(_DWORD *)(v24 + 24) == 2)
  {
    if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v24, v27);
  }
  else
  {
    *(_DWORD *)(v24 + 24) -= 2;
  }
LABEL_45:
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v80);
  v9 = 1;
LABEL_16:
  if (*(_BYTE *)(a2 + 48) != 1)
    goto LABEL_78;
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&a1[1] + 8) + 24);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 8);
    if (v15)
    {
      v16 = *(_QWORD *)(v15 + 72);
      v17 = *(_DWORD *)v16 + 1;
      *(_DWORD *)v16 = v17;
      v18 = *(_QWORD *)(v16 + 16);
      if ((!v18 || (v19 = *(_QWORD *)(v18 + 8)) == 0 || *(_BYTE *)(v19 + 144))
        && (v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 8) + 8) + 160), *(_BYTE *)(v19 + 144)))
      {
        v19 = 0;
        v22 = 1;
        if (v17)
          goto LABEL_26;
      }
      else
      {
        v20 = (unsigned int *)(v19 + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 + 1, v20));
        v22 = 0;
        v17 = *(_DWORD *)v16;
        if (*(_DWORD *)v16)
        {
LABEL_26:
          *(_DWORD *)v16 = v17 - 1;
          if (*(_QWORD *)(*(_QWORD *)&a1[1] + 8) == v19)
          {
            v31 = *(WebCore::Document **)(v19 + 296);
            v32 = *((_QWORD *)v31 + 382);
            if (!v32)
            {
              v68 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
              WebCore::Editor::Editor(v68, v31);
              v70 = (WebCore::Editor *)*((_QWORD *)v31 + 382);
              *((_QWORD *)v31 + 382) = v68;
              if (v70)
              {
                WebCore::Editor::~Editor(v70, v69);
                if (*(_DWORD *)v71)
                {
                  *(_QWORD *)(v71 + 496) = 0;
                  *(_OWORD *)(v71 + 464) = 0u;
                  *(_OWORD *)(v71 + 480) = 0u;
                  *(_OWORD *)(v71 + 432) = 0u;
                  *(_OWORD *)(v71 + 448) = 0u;
                  *(_OWORD *)(v71 + 400) = 0u;
                  *(_OWORD *)(v71 + 416) = 0u;
                  *(_OWORD *)(v71 + 368) = 0u;
                  *(_OWORD *)(v71 + 384) = 0u;
                  *(_OWORD *)(v71 + 336) = 0u;
                  *(_OWORD *)(v71 + 352) = 0u;
                  *(_OWORD *)(v71 + 304) = 0u;
                  *(_OWORD *)(v71 + 320) = 0u;
                  *(_OWORD *)(v71 + 272) = 0u;
                  *(_OWORD *)(v71 + 288) = 0u;
                  *(_OWORD *)(v71 + 240) = 0u;
                  *(_OWORD *)(v71 + 256) = 0u;
                  *(_OWORD *)(v71 + 208) = 0u;
                  *(_OWORD *)(v71 + 224) = 0u;
                  *(_OWORD *)(v71 + 176) = 0u;
                  *(_OWORD *)(v71 + 192) = 0u;
                  *(_OWORD *)(v71 + 144) = 0u;
                  *(_OWORD *)(v71 + 160) = 0u;
                  *(_OWORD *)(v71 + 112) = 0u;
                  *(_OWORD *)(v71 + 128) = 0u;
                  *(_OWORD *)(v71 + 80) = 0u;
                  *(_OWORD *)(v71 + 96) = 0u;
                  *(_OWORD *)(v71 + 48) = 0u;
                  *(_OWORD *)(v71 + 64) = 0u;
                  *(_OWORD *)(v71 + 16) = 0u;
                  *(_OWORD *)(v71 + 32) = 0u;
                  *(_OWORD *)v71 = 0u;
                }
                else
                {
                  WTF::fastFree((WTF *)v71, v72);
                }
              }
              v32 = *((_QWORD *)v31 + 382);
            }
            if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v32 + 8) + 8) + 640))(*(_QWORD *)(*(_QWORD *)(v32 + 8) + 8)))
            {
              v33 = *(_QWORD *)(*(_QWORD *)&a1[1] + 8);
              v34 = (unsigned int *)(v33 + 8);
              do
                v35 = __ldaxr(v34);
              while (__stlxr(v35 + 1, v34));
              v36 = *(WebCore::Document **)(v33 + 296);
              v37 = *((_QWORD *)v36 + 382);
              if (!v37)
              {
                v73 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
                WebCore::Editor::Editor(v73, v36);
                v75 = (WebCore::Editor *)*((_QWORD *)v36 + 382);
                *((_QWORD *)v36 + 382) = v73;
                if (v75)
                {
                  WebCore::Editor::~Editor(v75, v74);
                  if (*(_DWORD *)v76)
                  {
                    *(_QWORD *)(v76 + 496) = 0;
                    *(_OWORD *)(v76 + 464) = 0u;
                    *(_OWORD *)(v76 + 480) = 0u;
                    *(_OWORD *)(v76 + 432) = 0u;
                    *(_OWORD *)(v76 + 448) = 0u;
                    *(_OWORD *)(v76 + 400) = 0u;
                    *(_OWORD *)(v76 + 416) = 0u;
                    *(_OWORD *)(v76 + 368) = 0u;
                    *(_OWORD *)(v76 + 384) = 0u;
                    *(_OWORD *)(v76 + 336) = 0u;
                    *(_OWORD *)(v76 + 352) = 0u;
                    *(_OWORD *)(v76 + 304) = 0u;
                    *(_OWORD *)(v76 + 320) = 0u;
                    *(_OWORD *)(v76 + 272) = 0u;
                    *(_OWORD *)(v76 + 288) = 0u;
                    *(_OWORD *)(v76 + 240) = 0u;
                    *(_OWORD *)(v76 + 256) = 0u;
                    *(_OWORD *)(v76 + 208) = 0u;
                    *(_OWORD *)(v76 + 224) = 0u;
                    *(_OWORD *)(v76 + 176) = 0u;
                    *(_OWORD *)(v76 + 192) = 0u;
                    *(_OWORD *)(v76 + 144) = 0u;
                    *(_OWORD *)(v76 + 160) = 0u;
                    *(_OWORD *)(v76 + 112) = 0u;
                    *(_OWORD *)(v76 + 128) = 0u;
                    *(_OWORD *)(v76 + 80) = 0u;
                    *(_OWORD *)(v76 + 96) = 0u;
                    *(_OWORD *)(v76 + 48) = 0u;
                    *(_OWORD *)(v76 + 64) = 0u;
                    *(_OWORD *)(v76 + 16) = 0u;
                    *(_OWORD *)(v76 + 32) = 0u;
                    *(_OWORD *)v76 = 0u;
                  }
                  else
                  {
                    WTF::fastFree((WTF *)v76, v77);
                  }
                }
                v37 = *((_QWORD *)v36 + 382);
              }
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v39 = WebCore::internalCommand((WebCore *)v79, v38);
              v40 = *(_QWORD *)(*(_QWORD *)(v37 + 16) + 8);
              v80 = (_QWORD *)v39;
              LOBYTE(v81) = 0;
              if (v39)
              {
                *(_DWORD *)(v40 + 24) += 2;
                v83 = (WebCore::Node *)v40;
                v41 = *(_QWORD *)(v40 + 528);
                if (v41)
                {
                  v42 = *(_QWORD *)(v41 + 8);
                  if (v42)
                  {
                    v43 = (unsigned int *)(v42 + 8);
                    do
                      v44 = __ldaxr(v43);
                    while (__stlxr(v44 + 1, v43));
                  }
                }
                else
                {
                  v42 = 0;
                }
              }
              else
              {
                v42 = 0;
                v83 = 0;
              }
              v84 = v42;
              v78[0] = 0;
              v23 = WebCore::Editor::Command::execute((WebCore::Editor::Command *)&v80, (const WTF::String *)v78, 0);
              v46 = v78[0];
              v78[0] = 0;
              if (v46)
              {
                if (*(_DWORD *)v46 == 2)
                  WTF::StringImpl::destroy(v46, v45);
                else
                  *(_DWORD *)v46 -= 2;
              }
              v84 = 0;
              if (v42)
              {
                v47 = (unsigned int *)(v42 + 8);
                do
                {
                  v48 = __ldaxr(v47);
                  v49 = v48 - 1;
                }
                while (__stlxr(v49, v47));
                if (!v49)
                {
                  atomic_store(1u, v47);
                  v66 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v66 = off_1E31FE290;
                  *((_QWORD *)v66 + 1) = v47;
                  v78[0] = v66;
                  WTF::ensureOnMainThread();
                  v67 = v78[0];
                  v78[0] = 0;
                  if (v67)
                    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v67 + 8))(v67);
                }
              }
              v50 = v83;
              v83 = 0;
              if (v50)
              {
                if (*((_DWORD *)v50 + 6) == 2)
                {
                  if ((*((_WORD *)v50 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v50, v45);
                }
                else
                {
                  *((_DWORD *)v50 + 6) -= 2;
                }
              }
              v51 = v79[0];
              v79[0] = 0;
              if (v51)
              {
                if (*(_DWORD *)v51 == 2)
                  WTF::StringImpl::destroy(v51, v45);
                else
                  *(_DWORD *)v51 -= 2;
              }
              do
              {
                v52 = __ldaxr(v34);
                v53 = v52 - 1;
              }
              while (__stlxr(v53, v34));
              if (!v53)
              {
                atomic_store(1u, v34);
                v54 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v54 = off_1E31FE290;
                *((_QWORD *)v54 + 1) = v34;
                v78[0] = v54;
                WTF::ensureOnMainThread();
                v55 = v78[0];
                v78[0] = 0;
                if (v55)
                  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v55 + 8))(v55);
              }
            }
            else
            {
              v23 = 0;
            }
          }
          else
          {
            v23 = 0;
            if ((v22 & 1) != 0)
              goto LABEL_77;
          }
          v56 = (unsigned int *)(v19 + 8);
          do
          {
            v57 = __ldaxr(v56);
            v58 = v57 - 1;
          }
          while (__stlxr(v58, v56));
          if (!v58)
          {
            atomic_store(1u, v56);
            v64 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v64 = off_1E31FE290;
            v64[1] = v56;
            v80 = v64;
            WTF::ensureOnMainThread();
            v65 = (uint64_t)v80;
            v80 = 0;
            if (v65)
              (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
          }
          goto LABEL_77;
        }
      }
      __break(0xC471u);
      JUMPOUT(0x195FA2DE4);
    }
  }
  v23 = 0;
LABEL_77:
  v9 = v9 | v23;
LABEL_78:
  if (v6)
  {
    do
    {
      v59 = __ldaxr(v7);
      v60 = v59 - 1;
    }
    while (__stlxr(v60, v7));
    if (!v60)
    {
      atomic_store(1u, v7);
      v62 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v62 = off_1E31FE290;
      v62[1] = v7;
      v80 = v62;
      WTF::ensureOnMainThread();
      v63 = (uint64_t)v80;
      v80 = 0;
      if (v63)
        (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
    }
  }
  return v9;
}

uint64_t WebCore::EventHandler::stopAutoscrollTimer(WebCore::AutoscrollController **this, BOOL a2)
{
  return WebCore::AutoscrollController::stopAutoscrollTimer(this[18], a2);
}

uint64_t WebCore::EventHandler::scrollOverflow(uint64_t a1, void *a2, uint64_t a3, WebCore::Node *this)
{
  WebCore::Node *v4;
  uint64_t v6;
  uint64_t v7;
  WebCore::LocalFrameView *v9;
  uint64_t v10;

  v4 = this;
  if (!this)
  {
    v4 = *(WebCore::Node **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 296) + 1248);
    if (!v4)
    {
      v4 = *(WebCore::Node **)(a1 + 16);
      if (!v4)
        return 0;
    }
  }
  *((_DWORD *)v4 + 6) += 2;
  v6 = *((_QWORD *)v4 + 8) & 0xFFFFFFFFFFFFLL;
  if (v6 && *(_BYTE *)((*((_QWORD *)v4 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) != 18)
  {
    while ((*(_BYTE *)(v6 + 45) & 4) == 0)
      v6 = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8);
    v10 = 0;
    v7 = 0;
    if ((*(unsigned int (**)(uint64_t, void *, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t *))(*(_QWORD *)v6 + 1368))(v6, a2, a3, 1, 0, 0, &v10))
    {
      v9 = *(WebCore::LocalFrameView **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 288);
      if (v9)
      {
        ++*((_DWORD *)v9 + 2);
        WebCore::LocalFrameView::setWasScrolledByUser(v9, (WTF::StringImpl *)1);
        if (*((_DWORD *)v9 + 2) == 1)
          (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v9 + 8))(v9);
        else
          --*((_DWORD *)v9 + 2);
      }
      v7 = 1;
    }
  }
  else
  {
    v7 = 0;
  }
  if (*((_DWORD *)v4 + 6) == 2)
  {
    if ((*((_WORD *)v4 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v4, a2);
  }
  else
  {
    *((_DWORD *)v4 + 6) -= 2;
  }
  return v7;
}

uint64_t WebCore::EventHandler::logicalScrollOverflow(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  WebCore::LocalFrameView *v7;
  uint64_t v8;

  v4 = a4;
  if (!a4)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 296) + 1248);
    if (!v4)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (!v4)
        return 0;
    }
  }
  *(_DWORD *)(v4 + 24) += 2;
  v6 = *(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v6 || *(_BYTE *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) == 18)
    goto LABEL_11;
  while ((*(_BYTE *)(v6 + 45) & 4) == 0)
    v6 = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8);
  if ((*(unsigned int (**)(uint64_t, void *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 1376))(v6, a2, a3, 1, 0))
  {
    v7 = *(WebCore::LocalFrameView **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 288);
    if (v7)
    {
      ++*((_DWORD *)v7 + 2);
      WebCore::LocalFrameView::setWasScrolledByUser(v7, (WTF::StringImpl *)1);
      if (*((_DWORD *)v7 + 2) == 1)
        (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v7 + 8))(v7);
      else
        --*((_DWORD *)v7 + 2);
    }
    v8 = 1;
  }
  else
  {
LABEL_11:
    v8 = 0;
  }
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return v8;
}

uint64_t WebCore::EventHandler::scrollRecursively(uint64_t a1, void *a2, uint64_t a3, WebCore::Node *a4)
{
  _QWORD *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;

  v8 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
  v9 = (unsigned int *)(v8 + 1);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  v11 = v8[37];
  if (v11)
  {
    *(_DWORD *)(v11 + 24) += 2;
    WebCore::Document::updateLayout(v11, 2u, 0);
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11, v12);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
  else
  {
    WebCore::Document::updateLayout(0, 2u, 0);
  }
  if ((WebCore::EventHandler::scrollOverflow(a1, a2, a3, a4) & 1) != 0)
  {
    v13 = 1;
  }
  else
  {
    v14 = v8[36];
    if (v14)
    {
      ++*(_DWORD *)(v14 + 8);
      if (!*(_QWORD *)(v14 + 40))
      {
        v13 = 1;
        if ((WebCore::ScrollableArea::scroll((WebCore::ScrollableArea *)(v14 + 64), a2, a3, 1u) & 1) != 0)
          goto LABEL_33;
      }
    }
    v15 = v8[7];
    if (v15 && (v16 = *(_QWORD *)(v15 + 8)) != 0)
    {
      v17 = (unsigned int *)(v16 + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 + 1, v17));
      if (*(_BYTE *)(v16 + 144))
        v19 = 0;
      else
        v19 = v16;
      if (v19)
      {
        v20 = (unsigned int *)(v19 + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 + 1, v20));
      }
      v22 = *(_DWORD **)(v19 + 640);
      ++*v22;
      v23 = v8[15];
      if (v23 && (v24 = *(_QWORD *)(v23 + 8)) != 0)
      {
        *(_DWORD *)(v24 + 24) += 2;
        v13 = WebCore::EventHandler::scrollRecursively(v22, a2, a3, v24);
        if (*(_DWORD *)(v24 + 24) == 2)
        {
          if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v24, v25);
        }
        else
        {
          *(_DWORD *)(v24 + 24) -= 2;
        }
      }
      else
      {
        v13 = WebCore::EventHandler::scrollRecursively(v22, a2, a3, 0);
      }
      if (!*v22)
      {
        __break(0xC471u);
        JUMPOUT(0x195FA33A8);
      }
      --*v22;
      v26 = (unsigned int *)(v19 + 8);
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        atomic_store(1u, v26);
        v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v35 = off_1E31FE290;
        v35[1] = v26;
        v38 = v35;
        WTF::ensureOnMainThread();
        if (v38)
          (*(void (**)(_QWORD *))(*v38 + 8))(v38);
      }
      do
      {
        v29 = __ldaxr(v17);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v17));
      if (!v30)
      {
        atomic_store(1u, v17);
        v36 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v36 = off_1E31FE290;
        v36[1] = v17;
        v39 = v36;
        WTF::ensureOnMainThread();
        if (v39)
          (*(void (**)(_QWORD *))(*v39 + 8))(v39);
      }
    }
    else
    {
      v13 = 0;
    }
    if (v14)
    {
LABEL_33:
      if (*(_DWORD *)(v14 + 8) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      else
        --*(_DWORD *)(v14 + 8);
    }
  }
  do
  {
    v31 = __ldaxr(v9);
    v32 = v31 - 1;
  }
  while (__stlxr(v32, v9));
  if (!v32)
  {
    atomic_store(1u, v9);
    v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v34 = off_1E31FE290;
    v34[1] = v9;
    v37 = v34;
    WTF::ensureOnMainThread();
    if (v37)
      (*(void (**)(_QWORD *))(*v37 + 8))(v37);
  }
  return v13;
}

uint64_t WebCore::EventHandler::logicalScrollRecursively(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int8x16_t v21;
  double v22;
  int8x16_t v23;
  int v24;
  int v25;
  int v26;
  unsigned __int8 v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  _QWORD *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  __int32 v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;

  v8 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
  v9 = (unsigned int *)(v8 + 1);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  v11 = v8[37];
  if (v11)
  {
    *(_DWORD *)(v11 + 24) += 2;
    WebCore::Document::updateLayout(v11, 2u, 0);
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11, v12);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
  else
  {
    WebCore::Document::updateLayout(0, 2u, 0);
  }
  if ((WebCore::EventHandler::logicalScrollOverflow(a1, a2, a3, a4) & 1) != 0)
  {
    v13 = 1;
    goto LABEL_61;
  }
  v14 = v8[36];
  if (v14)
  {
    ++*(_DWORD *)(v14 + 8);
    if ((_DWORD)a3 != 2)
      goto LABEL_14;
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 624))(v14);
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 632))(v14);
    if (*(_QWORD *)(v14 + 40))
      goto LABEL_14;
    v17 = v16;
    v18 = (_QWORD *)(v14 + 64);
    v19 = 50;
    if (v15)
      v19 = 49;
    v20 = (*(uint64_t (**)(uint64_t))(*v18 + 8 * v19))(v14 + 64);
    if (v20)
    {
      *(float *)v21.i32 = (float)*(int *)(v20 + 92);
      v46 = v15 ^ 1;
      *(float *)&v22 = -*(float *)v21.i32;
      if (!v17)
        *(float *)v21.i32 = -*(float *)v21.i32;
      v47 = *(_QWORD *)(v14 + 80);
      if (!v47)
      {
        v53 = v21.i32[0];
        v48 = WTF::fastMalloc((WTF *)0xB0);
        *(_QWORD *)v48 = off_1E3405EF0;
        *(_QWORD *)(v48 + 8) = v18;
        *(_QWORD *)(v48 + 16) = 0;
        *(_QWORD *)(v48 + 24) = &off_1E3406D78;
        *(_OWORD *)(v48 + 32) = 0u;
        *(_OWORD *)(v48 + 48) = 0u;
        *(_OWORD *)(v48 + 64) = 0u;
        *(_QWORD *)(v48 + 80) = 0;
        *(_QWORD *)(v48 + 88) = v48;
        *(_QWORD *)(v48 + 96) = 0;
        *(_QWORD *)(v48 + 104) = 0;
        *(_QWORD *)(v48 + 110) = 0;
        *(_QWORD *)(v48 + 120) = 0;
        v49 = WTF::fastMalloc((WTF *)0x20);
        *(_QWORD *)v49 = 0;
        *(_DWORD *)(v49 + 8) = 0;
        *(_QWORD *)(v49 + 16) = v18;
        *(_BYTE *)(v49 + 24) = 0;
        *(_QWORD *)(v48 + 128) = v49;
        *(_BYTE *)(v48 + 136) = 0;
        *(_QWORD *)v48 = off_1E3354B08;
        *(_QWORD *)(v48 + 168) = 0;
        *(_DWORD *)(v48 + 140) = 0;
        *(_DWORD *)(v48 + 143) = 0;
        *(_QWORD *)(v48 + 156) = 0;
        *(_QWORD *)(v48 + 148) = 0;
        v50 = *(_QWORD *)(v14 + 80);
        *(_QWORD *)(v14 + 80) = v48;
        if (v50)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
          v47 = *(_QWORD *)(v14 + 80);
        }
        else
        {
          v47 = v48;
        }
        v21.i32[0] = v53;
      }
      v24 = WebCore::ScrollAnimator::singleAxisScroll(v47, v46, 1, v21, v22, v23);
    }
    else
    {
LABEL_14:
      v24 = 0;
    }
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 624))(v14);
    v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 632))(v14);
    switch((int)a2)
    {
      case 0:
        if (v26)
          v27 = 3;
        else
          v27 = 2;
        if (v25)
          v27 = v26;
        break;
      case 1:
        if (v26)
          v27 = 2;
        else
          v27 = 3;
        v28 = v26 ^ 1;
        goto LABEL_35;
      case 2:
        if (v26)
          v27 = 3;
        else
          v27 = 2;
        if (!v25)
          v27 = v26;
        break;
      case 3:
        v27 = v26 ^ 1;
        if (v26)
          v28 = 2;
        else
          v28 = 3;
LABEL_35:
        if (v25)
          v27 = v28;
        break;
      default:
        v27 = 0;
        break;
    }
    if (*(_QWORD *)(v14 + 40))
    {
      if ((v24 & 1) != 0)
      {
        v13 = 1;
        goto LABEL_59;
      }
    }
    else
    {
      v13 = 1;
      if (((WebCore::ScrollableArea::scroll((WebCore::ScrollableArea *)(v14 + 64), v27, a3, 1u) | v24) & 1) != 0)
      {
LABEL_59:
        if (*(_DWORD *)(v14 + 8) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        else
          --*(_DWORD *)(v14 + 8);
        goto LABEL_61;
      }
    }
  }
  v29 = v8[7];
  if (v29 && (v30 = *(_QWORD *)(v29 + 8)) != 0)
  {
    v31 = (unsigned int *)(v30 + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 + 1, v31));
    if (*(_BYTE *)(v30 + 144))
    {
      v13 = 0;
    }
    else
    {
      do
        v33 = __ldaxr(v31);
      while (__stlxr(v33 + 1, v31));
      v34 = *(_DWORD **)(v30 + 640);
      ++*v34;
      v35 = v8[15];
      if (v35 && (v36 = *(_QWORD *)(v35 + 8)) != 0)
      {
        *(_DWORD *)(v36 + 24) += 2;
        v13 = WebCore::EventHandler::logicalScrollRecursively(v34, a2, a3, v36);
        if (*(_DWORD *)(v36 + 24) == 2)
        {
          if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v36, v37);
        }
        else
        {
          *(_DWORD *)(v36 + 24) -= 2;
        }
      }
      else
      {
        v13 = WebCore::EventHandler::logicalScrollRecursively(v34, a2, a3, 0);
      }
      if (!*v34)
      {
        __break(0xC471u);
        JUMPOUT(0x195FA38E8);
      }
      --*v34;
      do
      {
        v38 = __ldaxr(v31);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v31));
      if (!v39)
      {
        atomic_store(1u, v31);
        v51 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v51 = off_1E31FE290;
        v51[1] = v31;
        v55 = v51;
        WTF::ensureOnMainThread();
        if (v55)
          (*(void (**)(_QWORD *))(*v55 + 8))(v55);
      }
    }
    do
    {
      v40 = __ldaxr(v31);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v31));
    if (!v41)
    {
      atomic_store(1u, v31);
      v52 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v52 = off_1E31FE290;
      v52[1] = v31;
      v56 = v52;
      WTF::ensureOnMainThread();
      if (v56)
        (*(void (**)(_QWORD *))(*v56 + 8))(v56);
    }
  }
  else
  {
    v13 = 0;
  }
  if (v14)
    goto LABEL_59;
  do
  {
LABEL_61:
    v42 = __ldaxr(v9);
    v43 = v42 - 1;
  }
  while (__stlxr(v43, v9));
  if (!v43)
  {
    atomic_store(1u, v9);
    v45 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v45 = off_1E31FE290;
    v45[1] = v9;
    v54 = v45;
    WTF::ensureOnMainThread();
    if (v54)
      (*(void (**)(_QWORD *))(*v54 + 8))(v54);
  }
  return v13;
}

uint64_t WebCore::EventHandler::subframeForHitTestResult@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  if (!*(_BYTE *)(result + 248) || (v4 = *(_QWORD *)(result + 200)) == 0)
  {
    *a3 = 0;
    return result;
  }
  v5 = *(_DWORD *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v5 + 2;
  v6 = *(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL;
  if (v6)
  {
    v7 = (*(unsigned __int8 *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
    if ((*(_BYTE *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
      v7 = 0;
    if (v7 == 1)
    {
      v8 = *(_DWORD *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) + 1;
      *(_DWORD *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v8;
      v9 = *(_QWORD *)(v6 + 232);
      if (v9)
      {
        if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v9 + 72))(*(_QWORD *)(v6 + 232)) & 1) != 0
          || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 80))(v9))
        {
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 720))(v9);
          v10 = (unsigned int *)(result + 8);
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 + 1, v10));
        }
        else
        {
          result = 0;
        }
        v8 = *(_DWORD *)(v6 + 16);
      }
      else
      {
        result = 0;
      }
      *a3 = result;
      if (!v8)
      {
        result = 286;
        __break(0xC471u);
        return result;
      }
      *(_DWORD *)(v6 + 16) = v8 - 1;
      v5 = *(_DWORD *)(v4 + 24) - 2;
      if (*(_DWORD *)(v4 + 24) == 2)
        goto LABEL_19;
LABEL_14:
      *(_DWORD *)(v4 + 24) = v5;
      return result;
    }
  }
  *a3 = 0;
  if (v5)
    goto LABEL_14;
LABEL_19:
  if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
    return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
  return result;
}

void WebCore::EventHandler::updateCursor(WebCore::EventHandler *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::ScrollView *v5;
  uint64_t v6;
  void *v7;
  BOOL *v8;
  const WebCore::IntPoint *v9;
  unint64_t v10;
  int8x8_t v11;
  void *v12;
  int v13;
  char v14;
  int32x2_t v15[4];
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  int32x2_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  BOOL v33[4];

  if (*((_BYTE *)this + 308))
  {
    v2 = *(_QWORD **)(*((_QWORD *)this + 1) + 8);
    v3 = v2[3];
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 48) + 16) + 416))(*(_QWORD *)(*(_QWORD *)(v4 + 48) + 16)))
          return;
        v2 = *(_QWORD **)(*((_QWORD *)this + 1) + 8);
      }
    }
    v5 = (WebCore::ScrollView *)v2[36];
    if (v5)
    {
      ++*((_DWORD *)v5 + 2);
      v6 = v2[37];
      if (v6)
      {
        *(_DWORD *)(v6 + 24) += 2;
        if (WebCore::LocalFrameView::shouldSetCursor(v5))
        {
          *(_DWORD *)v33 = 0;
          WebCore::PlatformKeyboardEvent::getCurrentModifierState((WebCore::PlatformKeyboardEvent *)&v33[3], &v33[2], &v33[1], v33, v8);
          if (!*((_BYTE *)this + 308))
          {
            __break(1u);
            return;
          }
          v10 = WebCore::ScrollView::windowToContents(v5, (WebCore::EventHandler *)((char *)this + 300), v9);
          v11 = (int8x8_t)vcgt_s32((int32x2_t)v10, (int32x2_t)0xFE000000FE000000);
          v15[2] = (int32x2_t)0x4000000040;
          v15[0] = (int32x2_t)vorr_s8((int8x8_t)(*(_QWORD *)&v11 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)v10), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32((int32x2_t)v10, 6uLL)), v11));
          v15[1] = (int32x2_t)(v15[0].i32[0] & 0xFFFFFFC0 | ((unint64_t)((v15[0].i32[1] & 0xFFFFFFC0) >> 6) << 38));
          v15[3] = (int32x2_t)vmul_f32(vcvt_f32_s32(v15[0]), (float32x2_t)vdup_n_s32(0x3C800000u));
          v16 = (float)(int)(v15[0].i32[0] & 0xFFFFFFC0) * 0.015625;
          v17 = (float)(int)(v15[0].i32[1] & 0xFFFFFFC0) * 0.015625;
          v18 = v16 + 1.0;
          v19 = v17;
          v20 = v16 + 1.0;
          v21 = v17 + 1.0;
          v22 = v16;
          v23 = v17 + 1.0;
          v24 = 256;
          v25 = 0;
          v26 = 0;
          v32 = 0;
          v27 = v15[0];
          v28 = 0;
          v31 = 0;
          v29 = 0;
          v30 = 0;
          v13 = 1025;
          v14 = 1;
          WebCore::Document::hitTest(v6, &v13, (WebCore::HitTestingTransformState *)v15, (uint64_t)v15);
          WebCore::EventHandler::updateCursor(this, v5, (const WebCore::HitTestResult *)v15, v33[3]);
          WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v15, v12);
        }
        if (*(_DWORD *)(v6 + 24) == 2)
        {
          if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v6, v7);
        }
        else
        {
          *(_DWORD *)(v6 + 24) -= 2;
        }
      }
      if (*((_DWORD *)v5 + 2) == 1)
        (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v5 + 8))(v5);
      else
        --*((_DWORD *)v5 + 2);
    }
  }
}

_DWORD *WebCore::EventHandler::updateCursor(WebCore::EventHandler *this, WebCore::LocalFrameView *a2, const WebCore::HitTestResult *a3, int a4)
{
  _DWORD *result;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t i;
  WebCore::LocalFrameView *v10;
  uint64_t v11;
  _BYTE v12[8];
  _DWORD *v13;
  __int128 v14;
  char v15;

  result = (_DWORD *)WebCore::EventHandler::selectCursor((uint64_t)this, a3, a4, (uint64_t)v12);
  if (v15)
  {
    *((_BYTE *)this + 240) = v12[0];
    v7 = v13;
    v13 = 0;
    v8 = (_DWORD *)*((_QWORD *)this + 31);
    *((_QWORD *)this + 31) = v7;
    if (v8)
    {
      if (v8[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
      else
        --v8[2];
    }
    *((_OWORD *)this + 16) = v14;
    for (i = *((_QWORD *)a2 + 4); i; i = *((_QWORD *)v10 + 4))
    {
      v10 = *(WebCore::LocalFrameView **)(i + 8);
      if (!v10)
        break;
      a2 = v10;
    }
    if (((*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)a2 + 72))(a2) & 1) != 0
      || (result = (_DWORD *)(*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)a2 + 80))(a2),
          (_DWORD)result))
    {
      v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)a2 + 720))(a2)
                                              + 24)
                                  + 8)
                      + 48);
      result = (_DWORD *)(*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v11 + 136))(v11, (char *)this + 240);
    }
    if (v15)
    {
      result = v13;
      v13 = 0;
      if (result)
      {
        if (result[2] == 1)
          return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
        else
          --result[2];
      }
    }
  }
  return result;
}

uint64_t WebCore::EventHandler::selectCursor@<X0>(uint64_t this@<X0>, const WebCore::HitTestResult *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  const WebCore::RenderObject *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  uint32x2_t v26;
  int32x2_t v27;
  int32x2_t v28;
  int8x8_t v29;
  void *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  float v40;
  WTF *v41;
  float v42;
  float v43;
  float v44;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t i;
  unsigned int v60;
  unsigned int v61;
  int v62;
  int v63;
  uint64_t v64;
  __int128 *v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  WTF *v69;
  void *v70;
  WTF *v71;
  WTF *v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  char *v86;
  int8x8_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;

  v6 = this;
  v8 = *(_QWORD *)(this + 152);
  if (v8 && (v9 = *(_QWORD *)(v8 + 8)) != 0 && (*(_BYTE *)(v9 + 25) & 4) != 0
    || (v10 = *(_QWORD *)(*(_QWORD *)(this + 8) + 8), (v11 = *(_QWORD *)(v10 + 24)) == 0)
    || !*(_QWORD *)(v11 + 8))
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 32) = 0;
    return this;
  }
  v12 = (unsigned int *)(v10 + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  if (*((_QWORD *)a2 + 14))
  {
    if ((*(_QWORD *)(this + 624) & 0xFFFFFFFFFFFFLL) != 0
      && *(double *)((*(_QWORD *)(this + 624) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
    {
      this = WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(this + 592));
    }
    {
      v14 = qword_1EE2F7FB8;
      *(_BYTE *)a4 = WebCore::pointerCursor(void)::c;
      if (v14)
        ++*(_DWORD *)(v14 + 8);
    }
    else
    {
      v14 = 0;
      WebCore::pointerCursor(void)::c = 1;
      xmmword_1EE2F7FC0 = 0uLL;
      qword_1EE2F7FB8 = 0;
      *(_BYTE *)a4 = 1;
    }
    *(_QWORD *)(a4 + 8) = v14;
    *(_OWORD *)(a4 + 16) = xmmword_1EE2F7FC0;
    v15 = 1;
    goto LABEL_14;
  }
  v16 = *((_QWORD *)a2 + 9);
  if (!v16)
  {
    v15 = 0;
    *(_BYTE *)a4 = 0;
LABEL_14:
    *(_BYTE *)(a4 + 32) = v15;
    do
    {
LABEL_121:
      v67 = __ldaxr(v12);
      v68 = v67 - 1;
    }
    while (__stlxr(v68, v12));
    if (!v68)
    {
      atomic_store(1u, v12);
      v74 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v74 = off_1E31FE290;
      v74[1] = v12;
      v88 = (uint64_t)v74;
      WTF::ensureOnMainThread();
      this = v88;
      v88 = 0;
      if (this)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    }
    return this;
  }
  *(_DWORD *)(v16 + 24) += 2;
  v17 = (const WebCore::RenderObject *)(*(_QWORD *)(v16 + 64) & 0xFFFFFFFFFFFFLL);
  if (!v17)
  {
    v20 = &WebCore::iBeamCursor(void)::c;
    v19 = 0;
    {
      WebCore::iBeamCursor(void)::c = 4;
      qword_1ECE90BE8 = 0;
      unk_1ECE90BF0 = 0;
      qword_1ECE90BE0 = 0;
    }
    goto LABEL_29;
  }
  v18 = *(_QWORD *)(v16 + 64) & 0xFFFFFFFFFFFFLL;
  if ((*(_BYTE *)(v18 + 0x2D) & 2) != 0)
  {
    v18 = *(_QWORD *)((*(_QWORD *)(v16 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
    if (v18)
      v18 = *(_QWORD *)(v18 + 8);
  }
  v19 = v18 + 80;
  if (((*(_DWORD *)(v18 + 124) >> 13) & 6u) - 2 > 3)
  {
    v20 = &WebCore::iBeamCursor(void)::c;
      goto LABEL_21;
    WebCore::iBeamCursor(void)::c = 4;
    qword_1ECE90BE8 = 0;
    unk_1ECE90BF0 = 0;
    qword_1ECE90BE0 = 0;
    v76 = &WebCore::iBeamCursor(void)::c;
    goto LABEL_155;
  }
  v20 = &WebCore::verticalTextCursor(void)::c;
  {
    WebCore::verticalTextCursor(void)::c = 31;
    qword_1EE2F8030 = 0;
    unk_1EE2F8038 = 0;
    qword_1EE2F8028 = 0;
    v76 = &WebCore::verticalTextCursor(void)::c;
LABEL_155:
    *v77 = 1;
    v20 = v76;
  }
LABEL_21:
  if ((*(_BYTE *)(v18 + 123) & 2) != 0)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 8) + 8) + 24);
    if (v21)
    {
      v83 = v19;
      v22 = v16;
      v23 = *(_QWORD *)(v21 + 8);
      if (v23)
      {
        ++*(_DWORD *)v23;
        v24 = *(double *)(*(_QWORD *)(v23 + 112) + 552);
        *(_QWORD *)(this + 616) = 0;
        WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
        WebCore::TimerBase::setNextFireTime(v6 + 592, v24 + v25);
        if (*(_DWORD *)v23 == 1)
        {
          WebCore::Page::~Page(v23);
          WTF::fastFree(v69, v70);
        }
        else
        {
          --*(_DWORD *)v23;
        }
      }
      v16 = v22;
      v19 = v83;
    }
    goto LABEL_31;
  }
LABEL_29:
  v86 = v20;
  if ((*(_QWORD *)(this + 624) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*(_QWORD *)(this + 624) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(this + 592));
  }
  if (!v17)
  {
    this = WebCore::ImageOverlay::isOverlayText((WebCore::ImageOverlay *)v16, a2);
    if ((_DWORD)this)
    {
      v47 = (_QWORD *)(*(_QWORD *)(v16 + 64) & 0xFFFFFFFFFFFFLL);
      if (v47)
      {
        if ((*(_BYTE *)((*(_QWORD *)(v16 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          v47 = *(_QWORD **)((*(_QWORD *)(v16 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
          if (v47)
            v47 = (_QWORD *)v47[1];
        }
        v48 = v47[13];
        if ((*(_BYTE *)(v48 + 239) & 1) == 0)
        {
          v49 = *(_DWORD *)(v48 + 228);
          if ((v49 & 0x30) != 0 && (*(_DWORD *)(*(_QWORD *)(v47[11] + 32) + 148) & 0xC00000) != 0x800000)
            goto LABEL_135;
          if ((v49 & 0x18000) != 0)
            goto LABEL_135;
        }
      }
    }
    v50 = WebCore::Node::computeEditability(v16, 0, 1);
    v51 = *((_QWORD *)a2 + 13);
    v85 = v50;
    if (v51)
      v52 = *(_WORD *)(v51 + 30) & 1;
    else
      LOBYTE(v52) = 0;
    this = WebCore::Node::computeEditability(v16, 0, 1);
    if ((_DWORD)this
      && (v53 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8),
          v54 = *(unsigned __int8 *)(*(_QWORD *)(v53 + 136) + 369),
          v54 >= 2))
    {
      if (v54 != 2)
      {
        if (v54 != 3)
        {
          if ((v52 & 1) != 0)
            goto LABEL_106;
          a3 = 0;
          goto LABEL_96;
        }
        v80 = v10;
        v82 = v16;
        v55 = (unsigned int *)(v53 + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 + 1, v55));
        v78 = WebCore::editableRootForPosition(*(_QWORD *)(*(_QWORD *)(v53 + 296) + 3064) + 120, 0);
        v57 = 0;
        v58 = v82;
        do
        {
          this = WebCore::Node::hasEditableStyle(v58, 0);
          if (!(_DWORD)this)
            break;
          if ((*(_WORD *)(v58 + 28) & 8) != 0)
            v57 = v58;
          i = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v82 + 40) + 8) + 1272);
          if (i)
          {
            if ((*(_WORD *)(i + 28) & 0x10) != 0
              && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
            {
              for (i = *(_QWORD *)(i + 80); i; i = *(_QWORD *)(i + 56))
              {
                if ((*(_WORD *)(i + 28) & 0x10) != 0
                  && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
                {
                  break;
                }
              }
            }
            else
            {
              i = 0;
            }
          }
          if (i == v58)
            break;
          v58 = *(_QWORD *)(v58 + 32);
        }
        while (v58);
        if (v78 != v57)
          a3 = 1;
        do
        {
          v60 = __ldaxr(v55);
          v61 = v60 - 1;
        }
        while (__stlxr(v61, v55));
        v10 = v80;
        if (!v61)
        {
          atomic_store(1u, v55);
          v75 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v75 = off_1E31FE290;
          v75[1] = v55;
          v88 = (uint64_t)v75;
          WTF::ensureOnMainThread();
          this = v88;
          v88 = 0;
          if (this)
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
          v10 = v80;
        }
        v16 = v82;
      }
    }
    else
    {
      a3 = 1;
    }
    if ((v52 & 1) != 0)
    {
      if (!a3)
        goto LABEL_106;
      goto LABEL_102;
    }
LABEL_96:
    if ((*(_WORD *)(v16 + 28) & 0x10) == 0
      || *(_QWORD *)(*(_QWORD *)(v16 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    {
      goto LABEL_106;
    }
    v62 = *(_DWORD *)(v16 + 24);
    *(_DWORD *)(v16 + 24) = v62 + 2;
    v63 = *(_DWORD *)(*(_QWORD *)(v16 + 240) + 12);
    if (v62)
    {
      *(_DWORD *)(v16 + 24) = v62;
    }
    else if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
    {
      this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v16, v30);
    }
    if (v63 != 256 || ((a3 ^ 1) & 1) != 0)
    {
LABEL_106:
      if ((!*(_BYTE *)(v6 + 168)
         || (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) + 8) + 136) + 696) & 0x10000000000000) == 0
         || !*(_BYTE *)(v6 + 180)
         || *(_BYTE *)(v6 + 704)
         || !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v10 + 296) + 3064) + 153)
         || *(_QWORD *)(v6 + 200))
        && (!v85 || *((_QWORD *)a2 + 14)))
      {
        {
LABEL_142:
          v66 = 0;
          WebCore::pointerCursor(void)::c = 1;
          xmmword_1EE2F7FC0 = 0uLL;
          qword_1EE2F7FB8 = 0;
          *(_BYTE *)a4 = 1;
LABEL_115:
          *(_QWORD *)(a4 + 8) = v66;
          v65 = &xmmword_1EE2F7FC0;
LABEL_116:
          v32 = *v65;
          goto LABEL_117;
        }
LABEL_113:
        v66 = qword_1EE2F7FB8;
        *(_BYTE *)a4 = WebCore::pointerCursor(void)::c;
        if (v66)
          ++*(_DWORD *)(v66 + 8);
        goto LABEL_115;
      }
LABEL_135:
      *(_BYTE *)a4 = *v86;
      v73 = *((_QWORD *)v86 + 1);
      if (v73)
        ++*(_DWORD *)(v73 + 8);
      *(_QWORD *)(a4 + 8) = v73;
      v32 = *((_OWORD *)v86 + 1);
      goto LABEL_117;
    }
LABEL_102:
    {
      v64 = qword_1ECE90BB8;
      *(_BYTE *)a4 = WebCore::handCursor(void)::c;
      if (v64)
        ++*(_DWORD *)(v64 + 8);
    }
    else
    {
      v64 = 0;
      WebCore::handCursor(void)::c = 3;
      xmmword_1ECE90BC0 = 0uLL;
      qword_1ECE90BB8 = 0;
      *(_BYTE *)a4 = 3;
    }
    *(_QWORD *)(a4 + 8) = v64;
    v65 = &xmmword_1ECE90BC0;
    goto LABEL_116;
  }
LABEL_31:
  LOBYTE(v88) = 0;
  v90 = 0uLL;
  v89 = 0;
  v26 = *(uint32x2_t *)((char *)a2 + 96);
  v27 = (int32x2_t)vsra_n_u32(v26, (uint32x2_t)vcltz_s32((int32x2_t)v26), 0x1AuLL);
  v28 = vsra_n_s32(vshr_n_s32(vadd_s32(vsub_s32((int32x2_t)v26, (int32x2_t)(*(_QWORD *)&v27 & 0xFFFFFFC0FFFFFFC0)), (int32x2_t)0x2000000020), 6uLL), v27, 6uLL);
  v29 = (int8x8_t)vcgt_s32(v28, (int32x2_t)0xFE000000FE000000);
  v87 = vorr_s8((int8x8_t)(*(_QWORD *)&v29 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, v28), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(v28, 6uLL)), v29));
  this = (*(uint64_t (**)(const WebCore::RenderObject *, int8x8_t *, uint64_t *))(*(_QWORD *)v17 + 432))(v17, &v87, &v88);
  if ((_DWORD)this == 2)
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 32) = 0;
    this = v89;
    v89 = 0;
    if (this)
    {
      if (*(_DWORD *)(this + 8) == 1)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      else
        --*(_DWORD *)(this + 8);
    }
    goto LABEL_118;
  }
  if ((_DWORD)this == 1)
  {
    *(_BYTE *)a4 = v88;
    v31 = v89;
    v89 = 0;
    *(_QWORD *)(a4 + 8) = v31;
    v32 = v90;
LABEL_117:
    *(_OWORD *)(a4 + 16) = v32;
    *(_BYTE *)(a4 + 32) = 1;
    goto LABEL_118;
  }
  this = v89;
  v89 = 0;
  if (this)
  {
    if (*(_DWORD *)(this + 8) == 1)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    else
      --*(_DWORD *)(this + 8);
  }
  v79 = v10;
  v81 = v16;
  v84 = v19;
  v33 = *(_QWORD *)(*(_QWORD *)(v19 + 24) + 168);
  if (!v33 || (v34 = *(_DWORD *)(v33 + 20)) == 0)
  {
LABEL_53:
    v46 = *(unsigned int *)(v84 + 40);
    if (((v46 >> 19) & 0x3F) <= 0x23)
      __asm { BR              X10 }
    v10 = v79;
    v16 = v81;
      goto LABEL_142;
    goto LABEL_113;
  }
  v35 = 0;
  while (1)
  {
    if (v34 <= (unint64_t)v35)
    {
      __break(0xC471u);
      JUMPOUT(0x195FA5748);
    }
    v36 = v35;
    v37 = *(_QWORD *)(*(_QWORD *)(v33 + 8) + 16 * v35);
    if (v37)
    {
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 200))(v37);
      if (this)
      {
        v38 = this;
        (*(void (**)(uint64_t))(*(_QWORD *)v37 + 160))(v37);
        if (*(unsigned int *)(v33 + 20) <= v36)
        {
          __break(0xC471u);
          JUMPOUT(0x195FA5750);
        }
        v40 = v39;
        v88 = *(_QWORD *)(*(_QWORD *)(v33 + 8) + 16 * v36 + 8);
        v41 = WebCore::CachedImage::imageForRenderer((WebCore::CachedImage *)v38, v17);
        this = (*(uint64_t (**)(WTF *, _QWORD))(*(_QWORD *)v41 + 168))(v41, 0);
        if ((*(_WORD *)(v38 + 557) >> 5) - 3 >= 2)
        {
          v44 = (float)(1.0 / v40) * v43;
          if ((float)((float)(1.0 / v40) * v42) <= 128.0 && v44 <= 128.0)
            break;
        }
      }
    }
    v35 = v36 + 1;
    v34 = *(_DWORD *)(v33 + 20);
    if (v34 <= (int)v36 + 1)
      goto LABEL_53;
  }
  v71 = WebCore::CachedImage::imageForRenderer((WebCore::CachedImage *)v38, v17);
  v72 = v71;
  if (v71)
    ++*((_DWORD *)v71 + 2);
  this = WebCore::determineHotSpot((uint64_t)v71, (uint64_t)&v88);
  *(_BYTE *)a4 = 44;
  *(_QWORD *)(a4 + 8) = v72;
  *(_QWORD *)(a4 + 16) = this;
  *(_QWORD *)(a4 + 24) = 0;
  *(_BYTE *)(a4 + 32) = 1;
  v10 = v79;
  v16 = v81;
LABEL_118:
  if (*(_DWORD *)(v16 + 24) == 2)
  {
    if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
      this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v16, v30);
  }
  else
  {
    *(_DWORD *)(v16 + 24) -= 2;
  }
  if (v10)
    goto LABEL_121;
  return this;
}

void WebCore::EventHandler::handleMousePressEvent(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  _DWORD *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  int v20;
  int v21;
  WTF *v22;
  void *v23;
  uint64_t v24;
  int v25;
  int v26;
  void *v27;
  WebCore::FrameLoader *v28;
  __int128 *v29;
  const WebCore::IntPoint *v30;
  int v31;
  _DWORD *v32;
  char *v33;
  unsigned int v34;
  BOOL v35;
  __int128 *v36;
  char *v37;
  unint64_t v38;
  _DWORD *v39;
  _DWORD *v40;
  _DWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  WebCore::ScrollView *v47;
  uint64_t v48;
  const WebCore::IntPoint *v49;
  WebCore::ScrollView *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  const WebCore::IntPoint *v57;
  WebCore::Node *v58;
  uint64_t v59;
  uint64_t v60;
  WebCore::Node *v61;
  _QWORD *v62;
  WebCore::ScrollView *v63;
  WebCore::Scrollbar *v64;
  WebCore::Scrollbar *v65;
  WebCore::LocalFrameView *v66;
  _QWORD *v67;
  unint64_t v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  WebCore::ScrollView *v77;
  unint64_t v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  void (*v91)(WebCore::ScrollView *);
  WebCore::ScrollView *v92;
  unint64_t v93;
  uint64_t v94;
  WebCore::Node *v95;
  void *v96;
  uint64_t v97;
  int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int *v109;
  unsigned int v110;
  unsigned int v111;
  WebCore::Node *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int *v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  unsigned int v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  _DWORD *v131;
  int v132;
  int v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  WebCore *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _DWORD *v141;
  uint64_t *v142;
  WebCore::Node *v143;
  int v144;
  char v145;
  int v146;
  _DWORD *v147;
  unsigned int v148;
  BOOL v149;
  uint64_t *v150;
  unint64_t v151;
  _DWORD *v152;
  _DWORD *v153;
  uint64_t v154;
  unint64_t v155;
  WebCore::Scrollbar *v156;
  _DWORD *v157;
  uint64_t v158;
  _QWORD *v159;
  WebCore::Scrollbar *v160;
  uint64_t v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  void *v165;
  WTF::StringImpl *v166;
  _QWORD *v167;
  BOOL v168;
  int v169;
  WebCore::Node *v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  unsigned int v173;
  unsigned int v174;
  WebCore::Scrollbar **v175;
  void *v176;
  int v177;
  uint64_t v178;
  WTF *v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  BOOL v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  WTF::StringImpl *v193;
  WTF::StringImpl *v194;
  WTF::StringImpl *v195;
  void *v196;
  WTF::StringImpl *v197;
  _QWORD *v198;
  uint64_t v199;
  WTF *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _DWORD *v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v212;
  int v213;
  _DWORD *v214;
  _QWORD *v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  int v227;
  WTF::StringImpl *v228;
  uint64_t v229;
  __int16 v230;
  _BYTE v231[144];
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  int v238;
  WTF::StringImpl *v239;
  uint64_t v240;
  __int16 v241;
  _BYTE v242[72];
  WebCore::Node *v243;
  int v244;
  int v245;
  int v246;
  int v247;
  WebCore::Scrollbar *v248;
  __int128 v249;
  char v250;
  uint64_t v251;

  v4 = a1;
  v251 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
  v7 = (unsigned int *)(v6 + 1);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = (_DWORD *)v6[36];
  if (v9)
    ++v9[2];
  v10 = atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter);
  v11 = v6[3];
  if (v10)
  {
    v12 = *(_QWORD *)(v11 + 8);
    v94 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 80) + 8) + 40);
    if (v94)
    {
      if (*(_BYTE *)(v94 + 436))
      {
        v95 = *(WebCore::Node **)(*(_QWORD *)(v94 + 72) + 16);
        if (v95)
        {
          WebCore::InspectorDOMAgent::inspect((WebCore::InspectorDOMAgent *)v94, v95);
          *(_DWORD *)(v4 + 296) = 0;
          v97 = *(_QWORD *)(v4 + 272);
          *(_QWORD *)(v4 + 272) = 0;
          if (v97)
          {
            if (*(_DWORD *)(v97 + 24) == 2)
            {
              if ((*(_WORD *)(v97 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v97, v96);
            }
            else
            {
              *(_DWORD *)(v97 + 24) -= 2;
            }
          }
          goto LABEL_15;
        }
      }
    }
  }
  else
  {
    v12 = *(_QWORD *)(v11 + 8);
  }
  v13 = *(_DWORD *)v12 + 1;
  *(_DWORD *)v12 = v13;
  v14 = *(_QWORD *)(v12 + 1232);
  v15 = *(unsigned int *)(v14 + 60);
  if ((_DWORD)v15)
  {
    v16 = v9;
    v17 = *(_QWORD *)(v14 + 48) - 8;
    v18 = 8 * v15;
    do
    {
      v19 = v18 != 0;
      if (!v18)
        break;
      v20 = WebCore::PageOverlay::mouseEvent(*(WebCore::PageOverlay **)(v17 + v18), a2);
      v18 -= 8;
    }
    while (!v20);
    v13 = *(_DWORD *)v12;
    v9 = v16;
  }
  else
  {
    v19 = 0;
  }
  v21 = v13 - 1;
  if (!v21)
  {
    WebCore::Page::~Page(v12);
    WTF::fastFree(v22, v23);
    if (v19)
      goto LABEL_15;
LABEL_17:
    v24 = v6[37];
    if (v24)
    {
      *(_DWORD *)(v24 + 24) += 2;
      v25 = *(unsigned __int8 *)(a2 + 8);
      LOBYTE(v249) = 0;
      v250 = 0;
      if (v25 == 6)
        v26 = 1;
      else
        v26 = 2;
      WebCore::UserGestureIndicator::UserGestureIndicator(&v219, 257, v24, v26, 0, &v249, 1);
      if (*(_DWORD *)(v24 + 24) == 2)
      {
        if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v24, v27);
      }
      else
      {
        *(_DWORD *)(v24 + 24) -= 2;
      }
    }
    else
    {
      v98 = *(unsigned __int8 *)(a2 + 8);
      LOBYTE(v249) = 0;
      v250 = 0;
      if (v98 == 6)
        v99 = 1;
      else
        v99 = 2;
      WebCore::UserGestureIndicator::UserGestureIndicator(&v219, 257, 0, v99, 0, &v249, 1);
    }
    v28 = (WebCore::FrameLoader *)v6[35];
    ++*(_DWORD *)v28;
    WebCore::FrameLoader::resetMultipleFormSubmissionProtection(v28);
    if (!*(_DWORD *)v28)
    {
      __break(0xC471u);
      JUMPOUT(0x195FA6048);
    }
    v216 = a3;
    --*(_DWORD *)v28;
    if (*(_BYTE *)(v4 + 190))
      WebCore::EventHandler::resetCapturingMouseEventsElement((WebCore::EventHandler *)v4, v29);
    *(_BYTE *)(v4 + 168) = 1;
    v32 = (_DWORD *)(v4 + 176);
    v31 = *(_DWORD *)(v4 + 176);
    v33 = (char *)(v4 + 172);
    DWORD1(v221) = 0;
    v214 = v9;
    v215 = v6;
    if (v31)
    {
      v206 = a2;
      v208 = v4;
      v34 = v31 + 1;
      v35 = v34 >= 3;
      if (v34 >= 3)
        v36 = (__int128 *)(v4 + 172);
      else
        v36 = &v221;
      v37 = (char *)(v4 + 172);
      if (v34 >= 3)
        v29 = &v221;
      else
        v29 = (__int128 *)(v4 + 172);
      v38 = *(_QWORD *)v29;
      *(_QWORD *)&v232 = *(_QWORD *)v29;
      if (v35)
        v39 = (_DWORD *)&v221 + 1;
      else
        v39 = (_DWORD *)(v4 + 176);
      *v39 = -1;
      v40 = v32;
      if (v35)
        v41 = v32;
      else
        v41 = (_DWORD *)&v221 + 1;
      v42 = *v41;
      v43 = HIDWORD(v38);
      if ((_DWORD)v42 != -1)
      {
        ((void (*)(uint64_t *))off_1E33FE7D0[v42])(&v220);
        *v39 = v42;
      }
      *v41 = -1;
      if ((_DWORD)v43 != -1)
      {
        ((void (*)(uint64_t *, __int128 *, __int128 *))off_1E33FE7D0[v43])(&v220, v36, &v232);
        *v41 = v43;
      }
      v4 = v208;
      v33 = v37;
      v9 = v214;
      v32 = v40;
      a2 = v206;
    }
    v44 = *(_QWORD *)(a2 + 52);
    v45 = *(_QWORD *)(a2 + 60);
    if (!*(_BYTE *)(v4 + 308))
      *(_BYTE *)(v4 + 308) = 1;
    *(_QWORD *)(v4 + 300) = v44;
    *(_QWORD *)(v4 + 312) = v45;
    *(_QWORD *)(v4 + 328) = *(_QWORD *)a2;
    *(_BYTE *)(v4 + 704) = 0;
    *(_BYTE *)(v4 + 180) = 0;
    *(_BYTE *)(v4 + 184) = 0;
    v46 = v6;
    v47 = (WebCore::ScrollView *)v6[36];
    v48 = v216;
    if (!v47)
    {
      *(_DWORD *)(v4 + 296) = 0;
      v100 = *(_QWORD *)(v4 + 272);
      *(_QWORD *)(v4 + 272) = 0;
      if (v100)
      {
        if (*(_DWORD *)(v100 + 24) == 2)
        {
          if ((*(_WORD *)(v100 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v100, v29);
        }
        else
        {
          *(_DWORD *)(v100 + 24) -= 2;
        }
      }
      *(_BYTE *)v216 = 0;
      *(_DWORD *)(v216 + 24) = 0;
      goto LABEL_297;
    }
    ++*((_DWORD *)v47 + 2);
    *(_QWORD *)(v4 + 320) = WebCore::ScrollView::windowToContents(v47, (const WebCore::IntPoint *)(a2 + 52), v30);
    if (*((_DWORD *)v47 + 2) == 1)
      (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v47 + 8))(v47);
    else
      --*((_DWORD *)v47 + 2);
    *(_BYTE *)(v4 + 185) = 0;
    v50 = (WebCore::ScrollView *)v46[36];
    if (v50)
      v51 = WebCore::ScrollView::windowToContents(v50, (const WebCore::IntPoint *)(a2 + 52), v49);
    else
      v51 = *(_QWORD *)(a2 + 52);
    v52 = ((_DWORD)v51 << 6);
    if ((int)v51 < -33554432)
      v52 = 0x80000000;
    v53 = 0x8000000000000000;
    if (SHIDWORD(v51) >= -33554432)
      v53 = HIDWORD(v51) << 38;
    v54 = 0x7FFFFFFF00000000;
    if (SHIDWORD(v51) <= 0x1FFFFFF)
      v54 = v53;
    if ((int)v51 > 0x1FFFFFF)
      v52 = 0x7FFFFFFFLL;
    v218 = v54 | v52;
    v55 = v46[37];
    if (v55)
    {
      *(_DWORD *)(v55 + 24) += 2;
      LODWORD(v221) = 258;
      BYTE4(v221) = 1;
      WebCore::Document::prepareMouseEvent(v55, (unsigned __int8 *)&v221, (unint64_t *)&v218, a2, (uint64_t)&v232);
      if (*(_DWORD *)(v55 + 24) == 2)
      {
        if ((*(_WORD *)(v55 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v55, v56);
      }
      else
      {
        *(_DWORD *)(v55 + 24) -= 2;
      }
    }
    else
    {
      LODWORD(v221) = 258;
      BYTE4(v221) = 1;
      WebCore::Document::prepareMouseEvent(0, (unsigned __int8 *)&v221, (unint64_t *)&v218, a2, (uint64_t)&v232);
    }
    v58 = v243;
    if (!v243)
    {
      *(_DWORD *)(v4 + 296) = 0;
      v85 = *(_QWORD *)(v4 + 272);
      *(_QWORD *)(v4 + 272) = 0;
      if (v85)
      {
        if (*(_DWORD *)(v85 + 24) != 2)
        {
          v86 = 0;
          *(_DWORD *)(v85 + 24) -= 2;
          goto LABEL_293;
        }
        if ((*(_WORD *)(v85 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v85, v56);
      }
      v86 = 0;
      goto LABEL_293;
    }
    *((_DWORD *)v243 + 6) += 2;
    v59 = *(_QWORD *)(v4 + 16);
    *(_QWORD *)(v4 + 16) = v58;
    if (v59)
    {
      if (*(_DWORD *)(v59 + 24) == 2)
      {
        if ((*(_WORD *)(v59 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v59, v56);
      }
      else
      {
        *(_DWORD *)(v59 + 24) -= 2;
      }
    }
    v60 = v46[37];
    if (v60)
      *(_DWORD *)(v60 + 24) += 2;
    v61 = v243;
    if (v243)
    {
      *((_DWORD *)v243 + 6) += 2;
      WebCore::Document::setFocusNavigationStartingNode((uint64_t *)v60, v61);
      if (*((_DWORD *)v61 + 6) == 2)
      {
        if ((*((_WORD *)v61 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v61, v56);
      }
      else
      {
        *((_DWORD *)v61 + 6) -= 2;
      }
      v62 = v46;
      if (!v60)
      {
LABEL_75:
        v63 = (WebCore::ScrollView *)v62[36];
        if (v63
          && (v64 = WebCore::ScrollView::scrollbarAtPoint(v63, (const WebCore::IntPoint *)((char *)&v235 + 4), v57)) != 0)
        {
          v65 = v64;
          WebCore::EventHandler::updateLastScrollbarUnderMouse((WebCore::Scrollbar *)v4, v64, 1);
        }
        else
        {
          v65 = v248;
          WebCore::EventHandler::updateLastScrollbarUnderMouse((WebCore::Scrollbar *)v4, v248, 1);
          if (!v65)
            goto LABEL_85;
        }
        if (*((_BYTE *)v65 + 136))
        {
          v66 = *(WebCore::LocalFrameView **)(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 8) + 288);
          if (v66)
          {
            ++*((_DWORD *)v66 + 2);
            WebCore::LocalFrameView::setWasScrolledByUser(v66, (WTF::StringImpl *)1);
            if (*((_DWORD *)v66 + 2) == 1)
              (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v66 + 8))(v66);
            else
              --*((_DWORD *)v66 + 2);
          }
          if ((WebCore::Scrollbar::mouseDown((uint64_t)v65, (uint64_t)&v232) & 1) != 0)
          {
            v67 = v46;
            v207 = 1;
LABEL_174:
            *(_DWORD *)(v4 + 296) = *(_DWORD *)(a2 + 112);
            v112 = v243;
            if (v243)
              *((_DWORD *)v243 + 6) += 2;
            v113 = *(_QWORD *)(v4 + 272);
            *(_QWORD *)(v4 + 272) = v112;
            if (v113)
            {
              if (*(_DWORD *)(v113 + 24) == 2)
              {
                if ((*(_WORD *)(v113 + 30) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef((WebCore::Node *)v113, v56);
                  v112 = *(WebCore::Node **)(v4 + 272);
                }
              }
              else
              {
                *(_DWORD *)(v113 + 24) -= 2;
              }
            }
            if (v112)
            {
              v114 = *((_QWORD *)v112 + 8) & 0xFFFFFFFFFFFFLL;
              if (v114)
              {
                if ((*(_BYTE *)(v114 + 45) & 0x10) == 0)
                {
                  v128 = *(_QWORD *)(v114 + 32);
                  if (!v128)
                    goto LABEL_229;
                  v114 = *(_QWORD *)(v128 + 8);
                  if (!v114)
                    goto LABEL_229;
                  v115 = 0;
                  while ((*(_BYTE *)(v114 + 45) & 0x10) == 0)
                  {
                    v129 = *(_QWORD *)(v114 + 32);
                    if (!v129)
                      goto LABEL_229;
                    v114 = *(_QWORD *)(v129 + 8);
                    if (!v114)
                      goto LABEL_230;
                  }
                }
                if ((*(_BYTE *)(v114 + 21) & 0x80) != 0)
                {
LABEL_191:
                  v115 = *(uint64_t **)(v114 + 144);
                  goto LABEL_230;
                }
                v115 = 0;
                while (1)
                {
                  v116 = *(_QWORD *)(v114 + 32);
                  if (!v116)
                    break;
                  v114 = *(_QWORD *)(v116 + 8);
                  if (!v114)
                    break;
                  while ((*(_BYTE *)(v114 + 45) & 0x10) == 0)
                  {
                    v117 = *(_QWORD *)(v114 + 32);
                    if (!v117)
                      goto LABEL_229;
                    v114 = *(_QWORD *)(v117 + 8);
                    if (!v114)
                      goto LABEL_230;
                  }
                  if ((*(_BYTE *)(v114 + 21) & 0x80) != 0)
                    goto LABEL_191;
                }
              }
LABEL_229:
              v115 = 0;
LABEL_230:
              v130 = v67;
              v131 = v32;
              v132 = v247;
              v133 = v246 + 63;
              if (v246 >= 0)
                v133 = v246;
              if (v247 >= 0)
                v134 = v247;
              else
                v134 = v247 + 63;
              if (v115)
              {
                v135 = v115[4];
                if (((*(_BYTE *)(v135 + 22) & 1) != 0 || *(_BYTE *)(v135 + 46) == 14)
                  && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v135 + 88) + 32) + 151) & 0x38) != 0)
                {
                  v213 = ((int)(v246 - (v133 & 0xFFFFFFC0) + 32) >> 6) + (v133 >> 6);
                  WebCore::RenderLayer::overflowControlsRects((WebCore::RenderLayer *)v115, (uint64_t)&v221);
                  if ((int)v224 <= v213 && DWORD2(v224) + (int)v224 > v213)
                  {
                    v177 = ((int)(v132 - (v134 & 0xFFFFFFC0) + 32) >> 6) + (v134 >> 6);
                    if (SDWORD1(v224) <= v177 && HIDWORD(v224) + DWORD1(v224) > v177)
                    {
                      v115[3] |= 0x400uLL;
                      v178 = *v115;
                      v48 = v216;
                      if (!*v115)
                      {
                        v178 = WTF::fastCompactMalloc((WTF *)0x10);
                        *(_DWORD *)v178 = 1;
                        *(_QWORD *)(v178 + 8) = v115;
                        v200 = (WTF *)*v115;
                        *v115 = v178;
                        if (v200)
                        {
                          if (*(_DWORD *)v200 == 1)
                          {
                            WTF::fastFree(v200, v176);
                            v178 = *v115;
                            v48 = v216;
                            if (!*v115)
                              goto LABEL_317;
                            goto LABEL_316;
                          }
                          --*(_DWORD *)v200;
                        }
                        v48 = v216;
                      }
LABEL_316:
                      ++*(_DWORD *)v178;
LABEL_317:
                      v179 = *(WTF **)(v4 + 152);
                      *(_QWORD *)(v4 + 152) = v178;
                      if (v179)
                      {
                        if (*(_DWORD *)v179 == 1)
                          WTF::fastFree(v179, v176);
                        else
                          --*(_DWORD *)v179;
                      }
                      WebCore::RenderLayer::overflowControlsRects((WebCore::RenderLayer *)v115, (uint64_t)&v221);
                      v180 = v213 - (v224 + DWORD2(v224));
                      v181 = (v177 - (DWORD1(v224) + HIDWORD(v224)));
                      v182 = (v180 << 6);
                      if (v180 < -33554432)
                        v182 = 0x80000000;
                      v183 = 0x8000000000000000;
                      if ((int)v181 >= -33554432)
                        v183 = v181 << 38;
                      v184 = (int)v181 <= 0x1FFFFFF;
                      v185 = 0x7FFFFFFF00000000;
                      if (v184)
                        v185 = v183;
                      v184 = v180 <= 0x1FFFFFF;
                      v186 = 0x7FFFFFFFLL;
                      if (v184)
                        v186 = v182;
                      *(_QWORD *)(v4 + 288) = v185 | v186;
LABEL_290:
                      v86 = 1;
                      goto LABEL_293;
                    }
                  }
                }
              }
              v136 = *(_QWORD *)(*(_QWORD *)(v130[37] + 3064) + 248);
              v137 = (WebCore *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v136 + 40))(v136, 1);
              v138 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
              if (!v138 || (v139 = *(_QWORD *)(v138 + 96)) == 0)
                v139 = WebCore::threadGlobalDataSlow(v137);
              v140 = *(_QWORD *)(v139 + 40);
              v141 = v131;
              if (!v140)
              {
                WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v139);
                v140 = *(_QWORD *)(v139 + 40);
              }
              v142 = (uint64_t *)(v140 + 1208);
              v143 = v243;
              if (v243)
              {
                *((_DWORD *)v243 + 6) += 2;
                v144 = WebCore::EventHandler::dispatchMouseEvent(v4, v142, (uint64_t)v143, *(_DWORD *)(v4 + 296), a2, 1);
                if (*((_DWORD *)v143 + 6) == 2)
                {
                  if ((*((_WORD *)v143 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v143, v56);
                }
                else
                {
                  *((_DWORD *)v143 + 6) -= 2;
                }
              }
              else
              {
                v144 = WebCore::EventHandler::dispatchMouseEvent(v4, v142, 0, *(_DWORD *)(v4 + 296), a2, 1);
              }
              if ((v144 & 1) != 0 || v248)
              {
                HIDWORD(v220) = 0;
                v146 = *v131;
                if (*v131)
                {
                  v147 = v9;
                  v212 = v4;
                  v148 = v146 + 1;
                  v149 = v148 >= 3;
                  if (v148 >= 3)
                    v150 = (uint64_t *)v33;
                  else
                    v150 = &v220;
                  if (v148 >= 3)
                    v56 = &v220;
                  else
                    v56 = (uint64_t *)v33;
                  v151 = *v56;
                  *(_QWORD *)&v221 = *v56;
                  if (v149)
                    v152 = (_DWORD *)&v220 + 1;
                  else
                    v152 = v141;
                  *v152 = -1;
                  if (v149)
                    v153 = v141;
                  else
                    v153 = (_DWORD *)&v220 + 1;
                  v154 = *v153;
                  v155 = HIDWORD(v151);
                  if ((_DWORD)v154 != -1)
                  {
                    ((void (*)(unint64_t *))off_1E33FE7D0[v154])(&v217);
                    *v152 = v154;
                  }
                  *v153 = -1;
                  if ((_DWORD)v155 != -1)
                  {
                    ((void (*)(unint64_t *, uint64_t *, __int128 *))off_1E33FE7D0[v155])(&v217, v150, &v221);
                    *v153 = v155;
                  }
                  v4 = v212;
                  v130 = v215;
                  v9 = v147;
                }
              }
              else
              {
                if (*v131)
                {
                  if (*v131 != 1)
                  {
                    v201 = std::__throw_bad_variant_access[abi:sn180100]();
                    WebCore::EventHandler::setLastKnownMousePosition(v201, v202, v203);
                    return;
                  }
                  v145 = *v33;
                }
                else
                {
                  v145 = 2;
                }
                std::experimental::fundamentals_v3::expected<std::monostate,WebCore::EventHandler::CapturesDragging::InabilityReason>::operator=((uint64_t)v33, v145);
              }
              v156 = v248;
              if (!v248)
              {
LABEL_287:
                if (!v144)
                {
                  v86 = 1;
                  v48 = v216;
                  goto LABEL_293;
                }
                v169 = v144 ^ 1;
                v170 = v243;
                if ((*((_WORD *)v243 + 14) & 0x80) == 0)
                  goto LABEL_289;
                v189 = *((_DWORD *)v243 + 6);
                *((_DWORD *)v243 + 6) = v189 + 2;
                v190 = *((_QWORD *)v170 + 25);
                if (!v190
                  || (v191 = *(_QWORD *)(v190 + 8)) == 0
                  || (*(_WORD *)(v191 + 28) & 0x10) == 0
                  || *(_QWORD *)(*(_QWORD *)(v191 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
                {
LABEL_363:
                  if (v189)
                  {
                    *((_DWORD *)v170 + 6) = v189;
                  }
                  else if ((*((_WORD *)v170 + 15) & 0x400) == 0)
                  {
                    WebCore::Node::removedLastRef(v170, v56);
                  }
LABEL_289:
                  v48 = v216;
                  if (((v207 | v169) & 1) == 0)
                  {
                    v86 = WebCore::EventHandler::handleMousePressEvent(v4, &v232);
                    goto LABEL_293;
                  }
                  goto LABEL_290;
                }
                v192 = v130[37];
                if (v192)
                  *(_DWORD *)(v192 + 24) += 2;
                LODWORD(v220) = 259;
                BYTE4(v220) = 1;
                WebCore::Document::prepareMouseEvent(v192, (unsigned __int8 *)&v220, (unint64_t *)&v218, a2, (uint64_t)&v221);
                v232 = v221;
                v233 = v222;
                v234 = v223;
                v235 = v224;
                v236 = v225;
                v237 = v226;
                v238 = v227;
                v194 = v228;
                v228 = 0;
                v195 = v239;
                v239 = v194;
                if (v195)
                {
                  if (*(_DWORD *)v195 == 2)
                    WTF::StringImpl::destroy(v195, v193);
                  else
                    *(_DWORD *)v195 -= 2;
                }
                v240 = v229;
                v241 = v230;
                WebCore::HitTestResult::operator=((uint64_t)v242, (uint64_t)v231);
                WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v231, v196);
                v197 = v228;
                v228 = 0;
                if (v197)
                {
                  if (*(_DWORD *)v197 == 2)
                  {
                    WTF::StringImpl::destroy(v197, (WTF::StringImpl *)v56);
                    if (v192)
                    {
LABEL_360:
                      if (*(_DWORD *)(v192 + 24) == 2)
                      {
                        if ((*(_WORD *)(v192 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v192, v56);
                      }
                      else
                      {
                        *(_DWORD *)(v192 + 24) -= 2;
                      }
                    }
LABEL_362:
                    v189 = *((_DWORD *)v170 + 6) - 2;
                    goto LABEL_363;
                  }
                  *(_DWORD *)v197 -= 2;
                }
                if (v192)
                  goto LABEL_360;
                goto LABEL_362;
              }
              v157 = v9;
              v158 = *(_QWORD *)(v4 + 232);
              v159 = v130;
              if (v158)
                v160 = *(WebCore::Scrollbar **)(v158 + 8);
              else
                v160 = 0;
              v161 = v159[37];
              if (v161)
                *(_DWORD *)(v161 + 24) += 2;
              LODWORD(v220) = 259;
              BYTE4(v220) = 1;
              WebCore::Document::prepareMouseEvent(v161, (unsigned __int8 *)&v220, (unint64_t *)&v218, a2, (uint64_t)&v221);
              v232 = v221;
              v233 = v222;
              v234 = v223;
              v235 = v224;
              v236 = v225;
              v237 = v226;
              v238 = v227;
              v163 = v228;
              v228 = 0;
              v164 = v239;
              v239 = v163;
              if (v164)
              {
                if (*(_DWORD *)v164 == 2)
                  WTF::StringImpl::destroy(v164, v162);
                else
                  *(_DWORD *)v164 -= 2;
              }
              v240 = v229;
              v241 = v230;
              WebCore::HitTestResult::operator=((uint64_t)v242, (uint64_t)v231);
              WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v231, v165);
              v166 = v228;
              v228 = 0;
              v167 = v159;
              v9 = v157;
              if (v166)
              {
                if (*(_DWORD *)v166 == 2)
                {
                  WTF::StringImpl::destroy(v166, (WTF::StringImpl *)v56);
                  if (v161)
                  {
LABEL_284:
                    if (*(_DWORD *)(v161 + 24) == 2)
                    {
                      if ((*(_WORD *)(v161 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v161, v56);
                    }
                    else
                    {
                      *(_DWORD *)(v161 + 24) -= 2;
                    }
                  }
LABEL_286:
                  v168 = v160 == v156;
                  v130 = v167;
                  if (v168)
                  {
                    v175 = *(WebCore::Scrollbar ***)(v4 + 232);
                    if (v175)
                    {
                      if (v175[1] != v248)
                      {
                        *(_QWORD *)(v4 + 232) = 0;
                        if (*(_DWORD *)v175 == 1)
                          WTF::fastFree((WTF *)v175, v56);
                        else
                          --*(_DWORD *)v175;
                      }
                    }
                    else if (v248)
                    {
                      *(_QWORD *)(v4 + 232) = 0;
                    }
                  }
                  goto LABEL_287;
                }
                *(_DWORD *)v166 -= 2;
              }
              if (v161)
                goto LABEL_284;
              goto LABEL_286;
            }
            v86 = 0;
            *(_DWORD *)(v4 + 296) = 0;
            *(_QWORD *)(v4 + 272) = 0;
LABEL_293:
            *(_BYTE *)v48 = v86;
            *(_DWORD *)(v48 + 24) = 0;
LABEL_294:
            WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v242, v56);
            v172 = v239;
            v239 = 0;
            if (v172)
            {
              if (*(_DWORD *)v172 == 2)
                WTF::StringImpl::destroy(v172, v171);
              else
                *(_DWORD *)v172 -= 2;
            }
LABEL_297:
            WebCore::UserGestureIndicator::~UserGestureIndicator((WebCore::UserGestureIndicator *)&v219);
            goto LABEL_298;
          }
        }
LABEL_85:
        v68 = WebCore::EventHandler::subframeForHitTestResult((uint64_t)&v232, v56, &v220);
        v70 = v220;
        v204 = v32;
        v205 = (uint64_t)v33;
        if (v220)
        {
          v71 = (unsigned int *)(v220 + 8);
          do
            v69 = __ldaxr(v71);
          while (__stlxr(v69 + 1, v71));
          if (*(_BYTE *)(v70 + 144))
            v72 = 0;
          else
            v72 = v70;
          if (*(_BYTE *)(v70 + 144))
            v73 = (_QWORD *)v70;
          else
            v73 = 0;
        }
        else
        {
          v72 = 0;
          v73 = 0;
        }
        v74 = (((int)(v244 - (v69 & 0xFFFFFFC0) + 32) >> 6) + v244 / 64);
        LODWORD(v75) = v245 + 63;
        if (v245 >= 0)
          v75 = v245;
        else
          v75 = v75;
        v217 = v74 | ((unint64_t)(((int)(v245 - (v75 & 0xFFFFFFC0) + 32) >> 6) + ((int)v75 >> 6)) << 32);
        if (v73)
        {
          v76 = v4;
          v77 = *(WebCore::ScrollView **)(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 8) + 288);
          if (v77)
          {
            ++*((_DWORD *)v77 + 2);
            v4 = v73[32];
            if (v4)
            {
              ++*(_DWORD *)(v4 + 8);
              v78 = v73[4];
              v46 = (_QWORD *)v73[5];
              *(_QWORD *)&v221 = WebCore::ScrollView::contentsToRootView(v77, (const WebCore::IntPoint *)&v217);
              v68 = WebCore::ScrollView::rootViewToContents((WebCore::ScrollView *)v4, (const WebCore::IntPoint *)&v221);
              v75 = v78 >> 8;
              if (*(_DWORD *)(v4 + 8) == 1)
              {
                v211 = v68;
                (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
                v75 = v78 >> 8;
                v68 = v211;
              }
              else
              {
                --*(_DWORD *)(v4 + 8);
              }
              LODWORD(v4) = 1;
            }
            else
            {
              LOBYTE(v78) = 0;
            }
            if (*((_DWORD *)v77 + 2) == 1)
            {
              v91 = *(void (**)(WebCore::ScrollView *))(*(_QWORD *)v77 + 8);
              v210 = v68;
              v92 = v77;
              v93 = v75;
              v91(v92);
              v75 = v93;
              v68 = v210;
            }
            else
            {
              --*((_DWORD *)v77 + 2);
            }
          }
          else
          {
            LOBYTE(v78) = 0;
            LODWORD(v4) = 0;
          }
          v79 = (unsigned int *)(v73 + 1);
          do
          {
            v80 = __ldaxr(v79);
            v81 = v80 - 1;
          }
          while (__stlxr(v81, v79));
          if (!v81)
          {
            v209 = v75;
            v82 = v68;
            atomic_store(1u, v79);
            v83 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v83 = off_1E31FE290;
            v83[1] = v79;
            *(_QWORD *)&v221 = v83;
            WTF::ensureOnMainThread();
            v84 = v221;
            *(_QWORD *)&v221 = 0;
            if (v84)
              (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
            v68 = v82;
            v75 = v209;
          }
        }
        else
        {
          v76 = v4;
          LODWORD(v4) = 0;
          LOBYTE(v78) = 0;
        }
        if (!v72)
          goto LABEL_119;
        v87 = (unsigned int *)(v72 + 8);
        do
        {
          v88 = __ldaxr(v87);
          v89 = v88 - 1;
        }
        while (__stlxr(v89, v87));
        if (!v89)
        {
          v103 = v75;
          v104 = v68;
          atomic_store(1u, v87);
          v105 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v105 = off_1E31FE290;
          v105[1] = v87;
          *(_QWORD *)&v221 = v105;
          WTF::ensureOnMainThread();
          v106 = v221;
          *(_QWORD *)&v221 = 0;
          if (v106)
            (*(void (**)(uint64_t))(*(_QWORD *)v106 + 8))(v106);
          v68 = v104;
          v75 = v103;
          if ((_DWORD)v4)
            goto LABEL_120;
        }
        else
        {
LABEL_119:
          if ((_DWORD)v4)
          {
LABEL_120:
            *(_QWORD *)v216 = v78 | (v75 << 8);
            *(_QWORD *)(v216 + 8) = v46;
            *(_QWORD *)(v216 + 16) = v68;
            v90 = 1;
            *(_DWORD *)(v216 + 24) = 1;
            v4 = v76;
LABEL_166:
            v9 = v214;
            v67 = v215;
LABEL_167:
            v108 = v220;
            v220 = 0;
            if (v108)
            {
              v109 = (unsigned int *)(v108 + 8);
              do
              {
                v110 = __ldaxr(v109);
                v111 = v110 - 1;
              }
              while (__stlxr(v111, v109));
              if (!v111)
              {
                atomic_store(1u, v109);
                v198 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                *v198 = off_1E31FE290;
                v198[1] = v109;
                *(_QWORD *)&v221 = v198;
                WTF::ensureOnMainThread();
                v199 = v221;
                *(_QWORD *)&v221 = 0;
                if (v199)
                  (*(void (**)(uint64_t))(*(_QWORD *)v199 + 8))(v199);
              }
            }
            if (v90)
              goto LABEL_294;
            v207 = 0;
            goto LABEL_173;
          }
        }
        v107 = v220;
        if (!v220)
        {
          v207 = 0;
          v4 = v76;
          v9 = v214;
          v67 = v215;
LABEL_173:
          v32 = v204;
          v33 = (char *)v205;
          goto LABEL_174;
        }
        v4 = v76;
        if (*(_BYTE *)(v220 + 144))
        {
          v90 = 0;
          goto LABEL_166;
        }
        v118 = (unsigned int *)(v220 + 8);
        v9 = v214;
        v67 = v215;
        do
          v119 = __ldaxr(v118);
        while (__stlxr(v119 + 1, v118));
        v120 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 8) + 288);
        if (v120 && *(_QWORD *)(v120 + 40))
        {
          if (!WebCore::EventHandler::passSubframeEventToSubframe((WebCore::EventHandler *)v4, (uint64_t)&v232, v107, 0))
          {
            v90 = 0;
            do
            {
LABEL_214:
              v124 = __ldaxr(v118);
              v125 = v124 - 1;
            }
            while (__stlxr(v125, v118));
            if (!v125)
            {
              atomic_store(1u, v118);
              v126 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v126 = off_1E31FE290;
              v126[1] = v118;
              *(_QWORD *)&v221 = v126;
              WTF::ensureOnMainThread();
              v127 = v221;
              *(_QWORD *)&v221 = 0;
              if (v127)
                (*(void (**)(uint64_t))(*(_QWORD *)v127 + 8))(v127);
              v67 = v215;
              v48 = v216;
            }
            goto LABEL_167;
          }
        }
        else
        {
          WebCore::EventHandler::handleMousePressEvent(&v221, *(_QWORD *)(v107 + 640), &v232);
        }
        *(_QWORD *)&v221 = *(_QWORD *)(*(_QWORD *)(v107 + 640) + 172);
        std::experimental::fundamentals_v3::expected<std::monostate,WebCore::EventHandler::CapturesDragging::InabilityReason>::swap((uint64_t)&v221, v205);
        if (*(_BYTE *)(v4 + 168))
        {
          v121 = *(_QWORD *)(v107 + 120);
          if (v121)
          {
            v121 = *(_QWORD *)(v121 + 8);
            if (v121)
              *(_DWORD *)(v121 + 24) += 2;
          }
          v122 = *(_QWORD *)(v4 + 200);
          *(_QWORD *)(v4 + 200) = v121;
          if (v122)
          {
            if (*(_DWORD *)(v122 + 24) == 2)
            {
              if ((*(_WORD *)(v122 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v122, v56);
            }
            else
            {
              *(_DWORD *)(v122 + 24) -= 2;
            }
            v121 = *(_QWORD *)(v4 + 200);
          }
          *(_BYTE *)(v4 + 190) = 1;
          if (!v121)
            *(_BYTE *)(v4 + 194) = 1;
        }
        *(_DWORD *)(v4 + 296) = 0;
        v123 = *(_QWORD *)(v4 + 272);
        *(_QWORD *)(v4 + 272) = 0;
        if (v123)
        {
          if (*(_DWORD *)(v123 + 24) == 2)
          {
            if ((*(_WORD *)(v123 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v123, v56);
          }
          else
          {
            *(_DWORD *)(v123 + 24) -= 2;
          }
        }
        v90 = 1;
        *(_BYTE *)v216 = 1;
        *(_DWORD *)(v216 + 24) = 0;
        goto LABEL_214;
      }
    }
    else
    {
      v101 = *(_QWORD *)(v60 + 528);
      v62 = v46;
      if (v101)
      {
        if (*(_QWORD *)(v101 + 8))
        {
          *(_BYTE *)(v60 + 3381) = 0;
          v102 = *(_QWORD *)(v60 + 1208);
          *(_QWORD *)(v60 + 1208) = 0;
          if (v102)
          {
            if (*(_DWORD *)(v102 + 24) == 2)
            {
              if ((*(_WORD *)(v102 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v102, v56);
            }
            else
            {
              *(_DWORD *)(v102 + 24) -= 2;
            }
          }
        }
      }
    }
    if (*(_DWORD *)(v60 + 24) == 2)
    {
      if ((*(_WORD *)(v60 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v60, v56);
    }
    else
    {
      *(_DWORD *)(v60 + 24) -= 2;
    }
    goto LABEL_75;
  }
  *(_DWORD *)v12 = v21;
  if (!v19)
    goto LABEL_17;
LABEL_15:
  *(_BYTE *)a3 = 1;
  *(_DWORD *)(a3 + 24) = 0;
LABEL_298:
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  do
  {
    v173 = __ldaxr(v7);
    v174 = v173 - 1;
  }
  while (__stlxr(v174, v7));
  if (!v174)
  {
    atomic_store(1u, v7);
    v187 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v187 = off_1E31FE290;
    v187[1] = v7;
    *(_QWORD *)&v232 = v187;
    WTF::ensureOnMainThread();
    v188 = v232;
    *(_QWORD *)&v232 = 0;
    if (v188)
      (*(void (**)(uint64_t))(*(_QWORD *)v188 + 8))(v188);
  }
}

uint64_t WebCore::EventHandler::setLastKnownMousePosition(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!*(_BYTE *)(result + 308))
    *(_BYTE *)(result + 308) = 1;
  *(_QWORD *)(result + 300) = a2;
  *(_QWORD *)(result + 312) = a3;
  return result;
}

WebCore::Scrollbar *WebCore::EventHandler::updateLastScrollbarUnderMouse(WebCore::Scrollbar *result, WebCore::Scrollbar *a2, int a3)
{
  WebCore::Scrollbar *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  WTF *v9;
  WebCore::Scrollbar *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = result;
  v6 = *((_QWORD *)result + 29);
  if (v6)
  {
    result = *(WebCore::Scrollbar **)(v6 + 8);
    if (result == a2)
      return result;
    if (result)
      WebCore::Scrollbar::mouseExited(result);
  }
  else if (!a2)
  {
    return result;
  }
  if (a2 && a3 == 1)
  {
    v7 = (_QWORD *)*((_QWORD *)a2 + 8);
    v8 = v7[3];
    if (!v8)
    {
      if ((*(unsigned int (**)(_QWORD))(*v7 + 688))(*((_QWORD *)a2 + 8)))
      {
        v13 = WTF::fastMalloc((WTF *)0x30);
        v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v14 = off_1E3406CB0;
        v14[1] = v7;
        v11 = 1;
        *(_BYTE *)(v13 + 16) = 1;
        *(_QWORD *)v13 = off_1E341C188;
        *(_QWORD *)(v13 + 8) = v7;
        *(_QWORD *)(v13 + 24) = v14;
        *(_QWORD *)(v13 + 32) = 0;
        *(_QWORD *)(v13 + 40) = 0;
        v12 = (_QWORD *)v7[3];
        v7[3] = v13;
        if (!v12)
        {
          v8 = v13;
          goto LABEL_9;
        }
      }
      else
      {
        v11 = 38;
        v12 = v7;
      }
      (*(void (**)(void))(*v12 + 8 * v11))();
      v8 = v7[3];
      if (!v8)
      {
        __break(0xC471u);
        JUMPOUT(0x195FA6DF8);
      }
    }
LABEL_9:
    (*(void (**)(uint64_t, WebCore::Scrollbar *))(*(_QWORD *)v8 + 112))(v8, a2);
    result = (WebCore::Scrollbar *)*((_QWORD *)a2 + 2);
    if (!result)
    {
      result = (WebCore::Scrollbar *)WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)result = 1;
      *((_QWORD *)result + 1) = a2;
      v9 = (WTF *)*((_QWORD *)a2 + 2);
      *((_QWORD *)a2 + 2) = result;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          WTF::fastFree(v9, a2);
          result = (WebCore::Scrollbar *)*((_QWORD *)a2 + 2);
          if (!result)
          {
LABEL_14:
            v10 = (WebCore::Scrollbar *)*((_QWORD *)v5 + 29);
            *((_QWORD *)v5 + 29) = result;
            if (v10)
            {
              if (*(_DWORD *)v10 != 1)
              {
                --*(_DWORD *)v10;
                return result;
              }
              result = v10;
              return (WebCore::Scrollbar *)WTF::fastFree(result, a2);
            }
            return result;
          }
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
    }
    ++*(_DWORD *)result;
    goto LABEL_14;
  }
  result = (WebCore::Scrollbar *)*((_QWORD *)v5 + 29);
  *((_QWORD *)v5 + 29) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WebCore::Scrollbar *)WTF::fastFree(result, a2);
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::EventHandler::dispatchMouseEvent(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  unsigned int *v11;
  unsigned int v12;
  WebCore *updated;
  const WebCore::IntPoint *v14;
  unint64_t StatusReg;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  WebCore *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  int v32;
  uint64_t v33;
  WebCore::ScrollView *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  char v43;
  uint64_t v44;
  int v45;
  char v46;
  WebCore::Node *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  WebCore::Node *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  __int16 v55;
  uint64_t v56;
  int v57;
  int v59;
  int32x2_t v60;
  int8x8_t v61;
  uint64_t v62;
  void *v63;
  char v64;
  WebCore *v65;
  WebCore::Node *v66;
  WebCore::Node *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  char v82;
  uint64_t v83;
  WebCore::Node *v84;
  int v85;
  WebCore::Node *v86;
  WebCore::Node *v87;
  unsigned int v88;
  unsigned int v89;
  WTF *v91;
  void *v92;
  WebCore::Node *v93;
  WebCore::Node *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  int v98;
  char v99;
  WebCore::Node *v100[2];
  WebCore::Node *v101;
  float32x2_t v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  __int16 v111;
  uint64_t v112;
  uint64_t v113;
  WebCore::Node *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t v119;

  v6 = a5;
  v9 = a1;
  v10 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
  v11 = (unsigned int *)(v10 + 1);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  updated = (WebCore *)WebCore::EventHandler::updateMouseEventTargetNode(a1, a2, a3, a5, a6);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v16 = *(_QWORD *)(StatusReg + 736);
  if (!v16 || (v17 = *(_QWORD *)(v16 + 96)) == 0)
    v17 = WebCore::threadGlobalDataSlow(updated);
  v18 = *(_QWORD *)(v17 + 40);
  if (!v18)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v17);
    v18 = *(_QWORD *)(v17 + 40);
  }
  v19 = *a2;
  v20 = *(_QWORD *)(v18 + 1208);
  v21 = *(_QWORD *)(v9 + 208);
  v97 = v10;
  if (!v21)
    goto LABEL_23;
  *(_DWORD *)(v21 + 24) += 2;
  v95 = v6;
  v22 = WebCore::Element::dispatchMouseEvent(v21, v6, (WebCore *)a2, a4, 0, 0);
  v23 = v22;
  v24 = v22;
  v25 = v9;
  v26 = v9 + 172;
  v27 = (WebCore *)std::experimental::fundamentals_v3::expected<std::monostate,WebCore::EventHandler::CapturesDragging::InabilityReason>::operator=(v26, 2);
  if (v24 >= 0x100)
  {
    if (v19 == v20)
    {
      v31 = 0;
    }
    else
    {
      v29 = *(_QWORD *)(StatusReg + 736);
      if (!v29 || (v27 = *(WebCore **)(v29 + 96)) == 0)
        v27 = (WebCore *)WebCore::threadGlobalDataSlow(v27);
      v30 = *((_QWORD *)v27 + 5);
      if (!v30)
      {
        v65 = v27;
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v27);
        v30 = *((_QWORD *)v65 + 5);
      }
      if (*a2 != *(_QWORD *)(v30 + 1232))
        goto LABEL_20;
      v31 = 1;
    }
    std::experimental::fundamentals_v3::expected<std::monostate,WebCore::EventHandler::CapturesDragging::InabilityReason>::operator=(v26, v31);
  }
LABEL_20:
  v32 = *(_DWORD *)(v21 + 24) - 2;
  v10 = v97;
  if (!v23)
  {
    if (*(_DWORD *)(v21 + 24) == 2)
    {
      if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v21, v28);
      v33 = 0;
      if (!v97)
        return v33;
    }
    else
    {
      v33 = 0;
      *(_DWORD *)(v21 + 24) = v32;
      if (!v97)
        return v33;
    }
    goto LABEL_191;
  }
  if (*(_DWORD *)(v21 + 24) == 2)
  {
    v9 = v25;
    v6 = v95;
    if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v21, v28);
  }
  else
  {
    *(_DWORD *)(v21 + 24) = v32;
    v9 = v25;
    v6 = v95;
  }
LABEL_23:
  if (v19 != v20)
  {
    v33 = 1;
    if (!v10)
      return v33;
    goto LABEL_191;
  }
  *(_BYTE *)(v9 + 181) = 0;
  v34 = (WebCore::ScrollView *)v10[36];
  if (v34)
  {
    ++*((_DWORD *)v34 + 2);
    if (WebCore::ScrollView::scrollbarAtPoint(v34, (const WebCore::IntPoint *)(v6 + 52), v14))
    {
      v33 = 1;
      goto LABEL_188;
    }
  }
  v35 = v10[37];
  if (v35)
  {
    *(_DWORD *)(v35 + 24) += 2;
    WebCore::Document::updateLayout(v35, 2u, 0);
    if (*(_DWORD *)(v35 + 24) == 2)
    {
      if ((*(_WORD *)(v35 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v35, v36);
    }
    else
    {
      *(_DWORD *)(v35 + 24) -= 2;
    }
  }
  else
  {
    WebCore::Document::updateLayout(0, 2u, 0);
  }
  v96 = v9;
  v37 = *(_QWORD *)(v9 + 208);
  if (!v37)
  {
LABEL_104:
    v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) + 8) + 296);
    if (v37)
    {
      v60 = *(int32x2_t *)(v6 + 52);
      *(_DWORD *)(v37 + 24) += 2;
      v61 = (int8x8_t)vcgt_s32(v60, (int32x2_t)0xFE000000FE000000);
      v100[0] = (WebCore::Node *)vorr_s8((int8x8_t)(*(_QWORD *)&v61 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, v60), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(v60, 6uLL)), v61));
      v100[1] = (WebCore::Node *)((uint64_t)v100[0] & 0xFFFFFFC0 | ((unint64_t)((HIDWORD(v100[0]) & 0xFFFFFFC0) >> 6) << 38));
      v101 = (WebCore::Node *)0x4000000040;
      v102 = vmul_f32(vcvt_f32_s32((int32x2_t)v100[0]), (float32x2_t)vdup_n_s32(0x3C800000u));
      v103 = (float)(int)((uint64_t)v100[0] & 0xFFFFFFC0) * 0.015625;
      v104 = (float)(int)(HIDWORD(v100[0]) & 0xFFFFFFC0) * 0.015625;
      v105 = v103 + 1.0;
      v106 = v104;
      v107 = v103 + 1.0;
      v108 = v104 + 1.0;
      v109 = v103;
      v110 = v104 + 1.0;
      v111 = 256;
      v112 = 0;
      v113 = 0;
      v119 = 0;
      v114 = v100[0];
      v115 = 0;
      v116 = 0;
      v117 = 0;
      v118 = 0;
      v98 = 257;
      v99 = 1;
      WebCore::Document::hitTest(v37, &v98, (WebCore::HitTestingTransformState *)v100, (uint64_t)v100);
      v62 = v117;
      WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v100, v63);
      if (*(_DWORD *)(v37 + 24) == 2)
      {
        if ((*(_WORD *)(v37 + 30) & 0x400) != 0)
        {
          v59 = 0;
          if (!v62)
          {
            v37 = 0;
            v10 = v97;
            goto LABEL_138;
          }
          v33 = 0;
          v10 = v97;
          goto LABEL_187;
        }
        WebCore::Node::removedLastRef((WebCore::Node *)v37, v36);
        v59 = 0;
        if (v62)
        {
LABEL_107:
          v33 = 0;
          goto LABEL_187;
        }
      }
      else
      {
        v59 = 0;
        *(_DWORD *)(v37 + 24) -= 2;
        if (v62)
          goto LABEL_107;
      }
      v37 = 0;
    }
    else
    {
      v59 = 0;
    }
LABEL_138:
    v68 = *(_QWORD *)(v9 + 208);
    if (v68)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v68 + 568))(v68) & 1) == 0)
      {
        v69 = *(_QWORD *)(v9 + 208);
        if (v69)
        {
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v69 + 848))(v69))
          {
            v70 = v10[37];
            if (v70)
            {
              v71 = *(_DWORD *)(v70 + 24) + 2;
              *(_DWORD *)(v70 + 24) = v71;
            }
            else
            {
              v71 = MEMORY[0x18];
            }
            *(_BYTE *)(v70 + 3366) = 1;
            v72 = v71 - 2;
            if (v72)
            {
              *(_DWORD *)(v70 + 24) = v72;
            }
            else if ((*(_WORD *)(v70 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v70, v36);
            }
          }
        }
      }
    }
    v73 = v10[3];
    if (v73)
    {
      v74 = *(_QWORD *)(v73 + 8);
      if (!v74)
      {
        v82 = 1;
        if (v59)
        {
LABEL_158:
          if (*(_BYTE *)(v9 + 181))
          {
            v83 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 848))(v37);
            (*(void (**)(WebCore::Node **__return_ptr, uint64_t))(*(_QWORD *)v37 + 672))(v100, v37);
            if (v100[0])
            {
              (*(void (**)(WebCore::Node *, uint64_t, uint64_t))(*(_QWORD *)v100[0] + 680))(v100[0], 1, v83);
              v84 = v100[0];
              v100[0] = 0;
              if (v84)
              {
                if (*((_DWORD *)v84 + 6) == 2)
                {
                  if ((*((_WORD *)v84 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v84, v36);
                }
                else
                {
                  *((_DWORD *)v84 + 6) -= 2;
                }
              }
            }
            v33 = 1;
            v10 = v97;
            if ((v82 & 1) != 0)
              goto LABEL_185;
            goto LABEL_182;
          }
        }
LABEL_181:
        v33 = 1;
        if ((v82 & 1) != 0)
        {
LABEL_184:
          if (v37)
            goto LABEL_185;
          goto LABEL_187;
        }
LABEL_182:
        if (*(_DWORD *)v74 == 1)
        {
          WebCore::Page::~Page(v74);
          WTF::fastFree(v91, v92);
          if (v37)
            goto LABEL_185;
          goto LABEL_187;
        }
        --*(_DWORD *)v74;
        goto LABEL_184;
      }
      ++*(_DWORD *)v74;
      v75 = *(_QWORD **)(v74 + 72);
      ++*(_DWORD *)v75;
      v76 = *(unsigned int **)(*(_QWORD *)(v96 + 8) + 8);
      v77 = v76 + 2;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 + 1, v77));
      LODWORD(v100[0]) = 0x1000000;
      WORD2(v100[0]) = 0;
      v79 = WebCore::FocusController::setFocusedElement(v75, v37, v76, v100);
      do
      {
        v80 = __ldaxr(v77);
        v81 = v80 - 1;
      }
      while (__stlxr(v81, v77));
      if (!v81)
      {
        v85 = v79;
        atomic_store(1u, v77);
        v86 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v86 = off_1E31FE290;
        *((_QWORD *)v86 + 1) = v77;
        v100[0] = v86;
        WTF::ensureOnMainThread();
        v87 = v100[0];
        v100[0] = 0;
        if (v87)
          (*(void (**)(WebCore::Node *))(*(_QWORD *)v87 + 8))(v87);
        v79 = v85;
        v10 = v97;
      }
      if (!*(_DWORD *)v75)
      {
        __break(0xC471u);
        JUMPOUT(0x195FA7774);
      }
      v82 = 0;
      v33 = 0;
      --*(_DWORD *)v75;
      v9 = v96;
      if (!v79)
        goto LABEL_182;
    }
    else
    {
      v74 = 0;
      v82 = 1;
    }
    if (v59)
      goto LABEL_158;
    goto LABEL_181;
  }
  *(_DWORD *)(v37 + 24) += 2;
  while (1)
  {
    if ((*(_QWORD *)(v37 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v44 = *(_QWORD *)((*(_QWORD *)(v37 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
      if (v44)
      {
        v45 = *(_DWORD *)(v44 + 24) + 2;
        *(_DWORD *)(v44 + 24) = v45;
        v46 = *(_BYTE *)(v44 + 192);
        if ((v46 & 2) != 0)
        {
          WebCore::Element::findFocusDelegateForTarget(v44, (void *)1, (uint64_t *)v100);
          v47 = v100[0];
          v100[0] = 0;
          if (*(_DWORD *)(v37 + 24) == 2)
          {
            if ((*(_WORD *)(v37 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v37, v36);
              v51 = v100[0];
              v100[0] = 0;
              if (v51)
              {
                if (*((_DWORD *)v51 + 6) == 2)
                {
                  if ((*((_WORD *)v51 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v51, v36);
                }
                else
                {
                  *((_DWORD *)v51 + 6) -= 2;
                }
              }
            }
          }
          else
          {
            *(_DWORD *)(v37 + 24) -= 2;
          }
          *(_BYTE *)(v9 + 181) = 1;
          v45 = *(_DWORD *)(v44 + 24);
          v37 = (uint64_t)v47;
        }
        v48 = v45 - 2;
        if (v48)
        {
          *(_DWORD *)(v44 + 24) = v48;
        }
        else if ((*(_WORD *)(v44 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v44, v36);
        }
        if ((v46 & 2) != 0)
          break;
      }
    }
    v38 = v37;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 568))(v37) & 1) != 0)
      goto LABEL_81;
    v39 = *(_QWORD *)(v37 + 32);
    if (v39)
    {
      if ((*(_WORD *)(v39 + 28) & 8) != 0)
      {
        v40 = *(_QWORD *)(v39 + 72) & 0xFFFFFFFFFFFFLL;
        if (v40)
        {
          v49 = *(_QWORD *)(v40 + 88);
          if (v49)
          {
            v50 = *(_QWORD *)(v49 + 224);
            if (v50)
            {
              v37 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 16))(v50, v37);
              if (v37)
              {
LABEL_64:
                v43 = 0;
                *(_DWORD *)(v37 + 24) += 2;
                goto LABEL_65;
              }
            }
          }
        }
      }
    }
    if ((~*(unsigned __int16 *)(v38 + 28) & 0x408) != 0
      || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v38 + 368))(v38))
    {
      v37 = *(_QWORD *)(v38 + 32);
      if (!v37)
        goto LABEL_51;
      v42 = *(_WORD *)(v37 + 28);
      if ((v42 & 0x80) == 0)
      {
        if ((v42 & 8) != 0)
          goto LABEL_64;
LABEL_50:
        v37 = 0;
        goto LABEL_51;
      }
      v41 = *(_QWORD *)(v37 + 200);
      if (!v41)
        goto LABEL_50;
    }
    else
    {
      v41 = *(_QWORD *)(v38 + 112);
      if (!v41)
        goto LABEL_50;
    }
    v37 = *(_QWORD *)(v41 + 8);
    if (v37)
      goto LABEL_64;
LABEL_51:
    v43 = 1;
LABEL_65:
    if (*(_DWORD *)(v38 + 24) == 2)
    {
      if ((*(_WORD *)(v38 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v38, v36);
    }
    else
    {
      *(_DWORD *)(v38 + 24) -= 2;
    }
    if ((v43 & 1) != 0)
      goto LABEL_104;
  }
  if (!v37)
    goto LABEL_104;
LABEL_81:
  v52 = *(_QWORD *)(v10[37] + 3064);
  if (*(_BYTE *)(v52 + 153) != 2)
  {
    v59 = 1;
    goto LABEL_138;
  }
  WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(v52 + 56), v100);
  if (LOBYTE(v103)
    && WebCore::contains<(WebCore::TreeType)2>((int *)v100, (_QWORD *)v37)
    && (v53 = *(_QWORD *)(v10[37] + 1248)) != 0)
  {
    v54 = *(_DWORD *)(v53 + 24);
    *(_DWORD *)(v53 + 24) = v54 + 2;
    v55 = *(_WORD *)(v53 + 28);
    if ((v55 & 0xF000) == 0x9000)
    {
      if (**(_QWORD **)(v37 + 40) == v53 && (*(_WORD *)(v37 + 28) & 0xF000) != 0x9000)
        v57 = (*(unsigned __int8 *)(v37 + 22) >> 3) & 1;
      else
        LOBYTE(v57) = 0;
      v10 = v97;
      if (v54)
        goto LABEL_112;
    }
    else
    {
      if ((v55 & 4) != 0
        && *(_QWORD *)(v53 + 80)
        && ((*(unsigned __int8 *)(v37 + 22) ^ *(unsigned __int8 *)(v53 + 22)) & 8) == 0)
      {
        v56 = v37;
        do
        {
          v56 = *(_QWORD *)(v56 + 32);
          LOBYTE(v57) = v56 != 0;
        }
        while (v56 != v53 && v56 != 0);
      }
      else
      {
        LOBYTE(v57) = 0;
      }
      if (v54)
      {
LABEL_112:
        *(_DWORD *)(v53 + 24) = v54;
        goto LABEL_113;
      }
    }
    if ((*(_WORD *)(v53 + 30) & 0x400) != 0)
    {
LABEL_113:
      if ((v57 & 1) == 0)
        goto LABEL_128;
    }
    else
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v53, v36);
      if ((v57 & 1) == 0)
        goto LABEL_128;
    }
    v64 = 0;
    v33 = 1;
  }
  else
  {
LABEL_128:
    v33 = 0;
    v64 = 1;
  }
  if (LOBYTE(v103))
  {
    v66 = v101;
    v101 = 0;
    if (v66)
    {
      if (*((_DWORD *)v66 + 6) == 2)
      {
        if ((*((_WORD *)v66 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v66, v36);
      }
      else
      {
        *((_DWORD *)v66 + 6) -= 2;
      }
    }
    v67 = v100[0];
    v100[0] = 0;
    if (v67)
    {
      if (*((_DWORD *)v67 + 6) == 2)
      {
        if ((*((_WORD *)v67 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v67, v36);
      }
      else
      {
        *((_DWORD *)v67 + 6) -= 2;
      }
    }
  }
  if ((v64 & 1) != 0)
  {
    v59 = 1;
    goto LABEL_138;
  }
LABEL_185:
  if (*(_DWORD *)(v37 + 24) == 2)
  {
    if ((*(_WORD *)(v37 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v37, v36);
  }
  else
  {
    *(_DWORD *)(v37 + 24) -= 2;
  }
LABEL_187:
  if (!v34)
  {
LABEL_190:
    if (!v10)
      return v33;
    goto LABEL_191;
  }
LABEL_188:
  if (*((_DWORD *)v34 + 2) != 1)
  {
    --*((_DWORD *)v34 + 2);
    goto LABEL_190;
  }
  (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v34 + 8))(v34);
  if (v10)
  {
    do
    {
LABEL_191:
      v88 = __ldaxr(v11);
      v89 = v88 - 1;
    }
    while (__stlxr(v89, v11));
    if (!v89)
    {
      atomic_store(1u, v11);
      v93 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v93 = off_1E31FE290;
      *((_QWORD *)v93 + 1) = v11;
      v100[0] = v93;
      WTF::ensureOnMainThread();
      v94 = v100[0];
      v100[0] = 0;
      if (v94)
        (*(void (**)(WebCore::Node *))(*(_QWORD *)v94 + 8))(v94);
    }
  }
  return v33;
}

void WebCore::EventHandler::prepareMouseEvent(uint64_t a1, uint64_t a2, const WebCore::IntPoint *a3, uint64_t a4)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _DWORD *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  const WebCore::IntPoint *v20;
  WebCore::ScrollView *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  unsigned int v27;
  unsigned int v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;

  v8 = *(_OWORD *)a4;
  v9 = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(a2 + 480) = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a2 + 496) = v9;
  *(_OWORD *)(a2 + 464) = v8;
  v10 = *(_OWORD *)(a4 + 48);
  v11 = *(_OWORD *)(a4 + 64);
  v12 = *(_OWORD *)(a4 + 80);
  *(_DWORD *)(a2 + 560) = *(_DWORD *)(a4 + 96);
  *(_OWORD *)(a2 + 528) = v11;
  *(_OWORD *)(a2 + 544) = v12;
  *(_OWORD *)(a2 + 512) = v10;
  v13 = *(_DWORD **)(a4 + 104);
  if (v13)
    *v13 += 2;
  v14 = *(WTF::StringImpl **)(a2 + 568);
  *(_QWORD *)(a2 + 568) = v13;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(_QWORD *)(a4 + 112);
  *(_WORD *)(a2 + 584) = *(_WORD *)(a4 + 120);
  *(_QWORD *)(a2 + 576) = v15;
  v16 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
  v17 = (unsigned int *)(v16 + 8);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 + 1, v17));
  v19 = *(_QWORD *)(v16 + 296);
  if (v19)
    *(_DWORD *)(v19 + 24) += 2;
  v20 = (const WebCore::IntPoint *)(a4 + 52);
  v21 = *(WebCore::ScrollView **)(v16 + 288);
  if (v21)
    v22 = WebCore::ScrollView::windowToContents(v21, v20, a3);
  else
    v22 = *(_QWORD *)v20;
  v23 = ((_DWORD)v22 << 6);
  if ((int)v22 < -33554432)
    v23 = 0x80000000;
  v24 = 0x8000000000000000;
  if (SHIDWORD(v22) >= -33554432)
    v24 = HIDWORD(v22) << 38;
  v25 = 0x7FFFFFFF00000000;
  if (SHIDWORD(v22) <= 0x1FFFFFF)
    v25 = v24;
  if ((int)v22 > 0x1FFFFFF)
    v23 = 0x7FFFFFFFLL;
  v31 = (_QWORD *)(v25 | v23);
  WebCore::Document::prepareMouseEvent(v19, (unsigned __int8 *)a3, (unint64_t *)&v31, a4, a1);
  if (v19)
  {
    if (*(_DWORD *)(v19 + 24) == 2)
    {
      if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v19, v26);
    }
    else
    {
      *(_DWORD *)(v19 + 24) -= 2;
    }
  }
  do
  {
    v27 = __ldaxr(v17);
    v28 = v27 - 1;
  }
  while (__stlxr(v28, v17));
  if (!v28)
  {
    atomic_store(1u, v17);
    v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v29 = off_1E31FE290;
    v29[1] = v17;
    v31 = v29;
    WTF::ensureOnMainThread();
    v30 = (unint64_t)v31;
    v31 = 0;
    if (v30)
      (*(void (**)(unint64_t))(*(_QWORD *)v30 + 8))(v30);
  }
}

uint64_t WebCore::EventHandler::enclosingScrollableArea(WebCore::EventHandler *this, WebCore::Node *a2)
{
  WebCore::Node *v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::Node **v17;
  uint64_t v18;
  uint64_t v19;
  int v21;

  if (a2)
  {
    v3 = a2;
    do
    {
      v4 = *((_WORD *)v3 + 14);
      if ((v4 & 0x10) != 0)
      {
        v5 = *(_QWORD *)(*((_QWORD *)v3 + 12) + 24);
        if (v5 == *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24))
          return 0;
        if (v5 == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
          break;
      }
      if ((v4 & 0xF000) == 0x9000 && (*((_WORD *)v3 + 1679) & 1) != 0)
        break;
      v6 = *((_QWORD *)v3 + 8) & 0xFFFFFFFFFFFFLL;
      if (v6)
      {
        v7 = *(unsigned __int8 *)((*((_QWORD *)v3 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E);
        if (v7 == 18)
        {
          v8 = v6 + 248;
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)((*((_QWORD *)v3 + 8) & 0xFFFFFFFFFFFFLL) + 0xF8) + 592))(v6 + 248) & 1) != 0)
            return v8;
          v7 = *(unsigned __int8 *)(v6 + 46);
        }
        if (v7 == 7)
        {
          v9 = *(_DWORD *)(v6 + 224) + 1;
          *(_DWORD *)(v6 + 224) = v9;
          v10 = *(_DWORD **)(v6 + 232);
          if (v10)
          {
            if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v10 + 88))(*(_QWORD *)(v6 + 232)) & 1) != 0)
            {
              ++v10[2];
              v8 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 336))(v10);
              if (v10[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
              else
                --v10[2];
              v9 = *(_DWORD *)(v6 + 224);
              if (v8)
              {
                v21 = v9 - 1;
                if (v21)
                  *(_DWORD *)(v6 + 224) = v21;
                else
                  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
                return v8;
              }
            }
            else
            {
              v9 = *(_DWORD *)(v6 + 224);
            }
          }
          v11 = v9 - 1;
          if (v11)
            *(_DWORD *)(v6 + 224) = v11;
          else
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        }
        if ((*(_BYTE *)(v6 + 45) & 0x10) == 0)
        {
          v12 = *(_QWORD *)(v6 + 32);
          if (!v12)
            return 0;
          v6 = *(_QWORD *)(v12 + 8);
          if (!v6)
            return 0;
          while ((*(_BYTE *)(v6 + 45) & 0x10) == 0)
          {
            v13 = *(_QWORD *)(v6 + 32);
            if (!v13)
              return 0;
            v8 = 0;
            v6 = *(_QWORD *)(v13 + 8);
            if (!v6)
              return v8;
          }
        }
LABEL_31:
        if ((*(_BYTE *)(v6 + 21) & 0x80) == 0)
        {
          while (1)
          {
            v14 = *(_QWORD *)(v6 + 32);
            if (!v14)
              return 0;
            v6 = *(_QWORD *)(v14 + 8);
            if (!v6)
              return 0;
            if ((*(_BYTE *)(v6 + 45) & 0x10) != 0)
              goto LABEL_31;
          }
        }
        v15 = *(_QWORD *)(v6 + 144);
        if (!v15)
          return 0;
        v16 = WebCore::RenderLayer::enclosingScrollableLayer(v15, 0, 0);
        if (v16 && (*(_BYTE *)(v16 + 24) & 1) == 0)
          return *(_QWORD *)(v16 + 264);
      }
      if ((*((_WORD *)v3 + 14) & 0x80) != 0)
      {
        v18 = *((_QWORD *)v3 + 25);
        if (!v18)
          break;
        v17 = (WebCore::Node **)(v18 + 8);
      }
      else
      {
        v17 = (WebCore::Node **)((char *)v3 + 32);
      }
      v3 = *v17;
    }
    while (*v17);
  }
  v19 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 288);
  if (v19)
    return v19 + 64;
  else
    return 0;
}

uint64_t WebCore::EventHandler::mouseMoved@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  _DWORD *v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::String *v23;
  __n128 v24;
  uint64_t v25;
  uint64_t result;
  double v27;
  double v28;
  unsigned int v29;
  unsigned int v30;
  WTF *v31;
  void *v32;
  WTF *v33;
  void *v34;
  WTF *v35;
  void *v36;
  _QWORD *v37;
  _OWORD v38[4];
  __int16 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  char v43;
  uint64_t v44;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v7 = (unsigned int *)(v6 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = *(_DWORD **)(v6 + 288);
  if (v9)
    ++v9[2];
  WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  v11 = v10;
  v12 = *(_QWORD *)(v6 + 24);
  if (!v12)
    goto LABEL_17;
  v13 = *(_QWORD *)(v12 + 8);
  if (!v13)
    goto LABEL_17;
  v14 = (*(_DWORD *)v13)++;
  v15 = *(_QWORD *)(v13 + 1232);
  v16 = *(unsigned int *)(v15 + 60);
  if (!(_DWORD)v16)
  {
LABEL_15:
    if (v14)
    {
      *(_DWORD *)v13 = v14;
    }
    else
    {
      WebCore::Page::~Page(v13);
      WTF::fastFree(v33, v34);
    }
LABEL_17:
    memset(v38, 0, sizeof(v38));
    v39 = 256;
    v44 = 0;
    v40 = 0u;
    v41 = 0u;
    v42 = 0u;
    v43 = 0;
    WebCore::EventHandler::handleMouseMoveEvent(a1, a2, (const WebCore::IntPoint *)v38, 0, a3);
    v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 24);
    if (v21)
    {
      v22 = *(_QWORD *)(v21 + 8);
      if (v22)
      {
        ++*(_DWORD *)v22;
        WebCore::HitTestResult::setToNonUserAgentShadowAncestor((uint64_t)v38);
        WebCore::Chrome::mouseDidMoveOverElement(*(_QWORD *)(v22 + 48), (WTF::StringImpl *)v38, *(unsigned __int8 *)(a2 + 9), v23, v24);
        if (!*(_BYTE *)(a2 + 49))
        {
          v25 = *(_QWORD *)(a1 + 112);
          if ((v25 & 0xFFFFFFFFFFFFLL) != 0 && *(double *)((v25 & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
            *(_QWORD *)(a1 + 112) = v25 & 0xFDFFFFFFFFFFFFLL | 0x2000000000000;
        }
        if (*(_DWORD *)v22 == 1)
        {
          WebCore::Page::~Page(v22);
          WTF::fastFree(v31, v32);
        }
        else
        {
          --*(_DWORD *)v22;
        }
      }
    }
    WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v38, v20);
    goto LABEL_24;
  }
  v17 = *(_QWORD *)(v15 + 48) - 8;
  v18 = 8 * v16;
  do
  {
    if (!v18)
    {
      v14 = *(_DWORD *)v13 - 1;
      goto LABEL_15;
    }
    v19 = WebCore::PageOverlay::mouseEvent(*(WebCore::PageOverlay **)(v17 + v18), a2);
    v18 -= 8;
  }
  while ((v19 & 1) == 0);
  if (*(_DWORD *)v13 == 1)
  {
    WebCore::Page::~Page(v13);
    v19 = WTF::fastFree(v35, v36);
  }
  else
  {
    --*(_DWORD *)v13;
  }
  *(_BYTE *)a3 = 1;
  *(_DWORD *)(a3 + 24) = 0;
LABEL_24:
  result = WTF::MonotonicTime::now((WTF::MonotonicTime *)v19);
  v28 = v27 - v11;
  if (*(double *)(a1 + 160) >= v28)
    v28 = *(double *)(a1 + 160);
  *(double *)(a1 + 160) = v28;
  if (v9)
  {
    if (v9[2] == 1)
      result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  do
  {
    v29 = __ldaxr(v7);
    v30 = v29 - 1;
  }
  while (__stlxr(v30, v7));
  if (!v30)
  {
    atomic_store(1u, v7);
    v37 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v37 = off_1E31FE290;
    v37[1] = v7;
    *(_QWORD *)&v38[0] = v37;
    WTF::ensureOnMainThread();
    result = *(_QWORD *)&v38[0];
    *(_QWORD *)&v38[0] = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void WebCore::EventHandler::handleMouseMoveEvent(uint64_t a1@<X0>, uint64_t a2@<X1>, const WebCore::IntPoint *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *i;
  unsigned int *v11;
  unsigned int v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::ScrollView *v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  int v22;
  float v23;
  float v24;
  uint64_t v25;
  BOOL v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  const WTF::StringImpl *v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  WebCore::Scrollbar *v39;
  _QWORD *updated;
  void *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  _QWORD *v50;
  _QWORD *v51;
  unsigned int *v52;
  unsigned int v53;
  unint64_t v54;
  WebCore::ScrollView *v55;
  WebCore::ScrollView *v56;
  unint64_t v57;
  unint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  char v62;
  _QWORD *v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  int v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int *v74;
  uint64_t v75;
  uint64_t v76;
  _BOOL4 v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  int v88;
  uint64_t v89;
  WebCore *v90;
  _DWORD *v91;
  uint64_t v92;
  unsigned int *v93;
  uint64_t v94;
  unsigned int *v95;
  unsigned int v96;
  uint64_t v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  uint64_t (*v115)(WebCore::ScrollView *);
  WebCore::ScrollView *v116;
  unint64_t v117;
  uint64_t (*v118)(WebCore::ScrollView *);
  WebCore::ScrollView *v119;
  unint64_t v120;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  _QWORD *v132;
  uint64_t v133;
  unint64_t v134;
  char v135;
  char v136;
  unint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  unint64_t v141;
  _QWORD *v142;
  int v143;
  char v144;
  uint64_t v145;
  WebCore *v146;
  __int128 v147;
  char v148;
  _QWORD v149[13];
  WTF::StringImpl *v150;
  _BYTE v151[72];
  uint64_t v152;
  int v153;
  int v154;
  WebCore::Scrollbar *v155;
  uint64_t v156;

  v6 = (uint64_t)a3;
  v7 = a2;
  v8 = a1;
  v156 = *MEMORY[0x1E0C80C00];
  i = *(unsigned int **)(*(_QWORD *)(a1 + 8) + 8);
  v11 = i + 2;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  v13 = (_DWORD *)*((_QWORD *)i + 36);
  if (v13)
    ++v13[2];
  v14 = *(_QWORD *)(a2 + 52);
  v15 = *(_QWORD *)(a2 + 60);
  if (!*(_BYTE *)(a1 + 308))
    *(_BYTE *)(a1 + 308) = 1;
  *(_QWORD *)(a1 + 300) = v14;
  *(_QWORD *)(a1 + 312) = v15;
  if ((*(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    a1 = WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(a1 + 24));
  }
  *(_BYTE *)(v8 + 183) = 0;
  if (*(_BYTE *)(v8 + 189))
  {
    v16 = *((_QWORD *)i + 37);
    if (v16)
      *(_DWORD *)(v16 + 24) += 2;
    if ((*(_WORD *)(v16 + 3358) & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195FA8B24);
    }
    v17 = (WebCore::ScrollView *)*((_QWORD *)i + 36);
    if (v17)
      ++*((_DWORD *)v17 + 2);
    if (*(_BYTE *)(v8 + 308))
      v18 = *(_QWORD *)(v8 + 300);
    else
      v18 = 0;
    v149[0] = v18;
    v19 = WebCore::ScrollView::windowToContents(v17, (const WebCore::IntPoint *)v149, a3);
    v21 = *(_QWORD *)(v16 + 1272);
    if (v21
      && (*(_WORD *)(v21 + 28) & 0x20) != 0
      && *(_QWORD *)(*(_QWORD *)(v21 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
    {
      v22 = *(_DWORD *)(v21 + 24);
      *(_DWORD *)(v21 + 24) = v22 + 2;
      v23 = (float)(int)v19 - *(float *)(v16 + 3512);
      v24 = (float)SHIDWORD(v19) - *(float *)(v16 + 3516);
      v25 = *(_QWORD *)(v21 + 280);
      v26 = *(float *)(v25 + 28) == v23 && *(float *)(v25 + 32) == v24;
      if (!v26)
      {
        *(float *)(v25 + 28) = v23;
        *(float *)(v25 + 32) = v24;
        WebCore::SVGSVGElement::updateCurrentTranslate((WebCore::SVGSVGElement *)v21);
        v22 = *(_DWORD *)(v21 + 24) - 2;
      }
      if (v22)
      {
        *(_DWORD *)(v21 + 24) = v22;
      }
      else if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v21, v20);
      }
    }
    if (v17)
    {
      if (*((_DWORD *)v17 + 2) == 1)
        (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v17 + 8))(v17);
      else
        --*((_DWORD *)v17 + 2);
    }
    if (*(_DWORD *)(v16 + 24) == 2)
    {
      if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v16, v20);
    }
    else
    {
      *(_DWORD *)(v16 + 24) -= 2;
    }
    v27 = 1;
LABEL_40:
    *(_BYTE *)a5 = v27;
    *(_DWORD *)(a5 + 24) = 0;
    goto LABEL_41;
  }
  if (*(_QWORD *)(v8 + 280))
  {
    v28 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v28 || (v29 = *(_QWORD *)(v28 + 96)) == 0)
      v29 = WebCore::threadGlobalDataSlow((WebCore *)a1);
    v30 = *(_QWORD *)(v29 + 40);
    if (!v30)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v29);
      v30 = *(_QWORD *)(v29 + 40);
    }
    v27 = WebCore::EventHandler::dispatchMouseEvent(v8, (uint64_t *)(v30 + 1232), *(_QWORD *)(v8 + 280), 0, v7, 0) ^ 1;
    goto LABEL_40;
  }
  if (*(_BYTE *)(v8 + 168))
    v33 = 1286;
  else
    v33 = a4 | 0x504;
  {
    v34 = (const WTF::StringImpl *)WebCore::penPointerEventType(void)::penType;
  }
  else
  {
    v34 = (const WTF::StringImpl *)&WebCore::penPointerEventType(void)::$_0::operator() const(void)::impl;
    WebCore::penPointerEventType(void)::$_0::operator() const(void)::impl += 2;
    WebCore::penPointerEventType(void)::penType = (uint64_t)&WebCore::penPointerEventType(void)::$_0::operator() const(void)::impl;
  }
  v35 = WTF::equal(*(WTF **)(v7 + 104), v34, a3);
  v36 = v33 | 0x20000;
  if (!v35)
    v36 = v33;
  v143 = v36;
  v144 = 1;
  WebCore::EventHandler::prepareMouseEvent((uint64_t)v149, v8, (const WebCore::IntPoint *)&v143, v7);
  if (v6)
    WebCore::HitTestResult::operator=(v6, (uint64_t)v151);
  v37 = *(_QWORD *)(v8 + 152);
  if (v37 && (v38 = *(_QWORD *)(v37 + 8)) != 0 && (*(_BYTE *)(v38 + 25) & 4) != 0)
  {
    updated = (_QWORD *)WebCore::RenderLayer::resize(v38, v7, (int *)(v8 + 288));
  }
  else
  {
    v39 = v155;
    if (v155)
      ++*((_DWORD *)v155 + 2);
    updated = WebCore::EventHandler::updateLastScrollbarUnderMouse((WebCore::Scrollbar *)v8, v39, *(_BYTE *)(v8 + 168) == 0);
    if (a4)
    {
      *(_BYTE *)a5 = 1;
      *(_DWORD *)(a5 + 24) = 0;
      if (v39)
      {
        if (*((_DWORD *)v39 + 2) == 1)
          (*(void (**)(WebCore::Scrollbar *))(*(_QWORD *)v39 + 8))(v39);
        else
          --*((_DWORD *)v39 + 2);
      }
      goto LABEL_209;
    }
    if (v39)
    {
      if (*((_DWORD *)v39 + 2) == 1)
        updated = (_QWORD *)(*(uint64_t (**)(WebCore::Scrollbar *))(*(_QWORD *)v39 + 8))(v39);
      else
        --*((_DWORD *)v39 + 2);
    }
  }
  v43 = *(_QWORD *)(v8 + 200);
  if (v43)
  {
    v44 = *(_QWORD *)(v43 + 64) & 0xFFFFFFFFFFFFLL;
    if (v44)
    {
      v26 = (*(_BYTE *)((*(_QWORD *)(v43 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3;
      v45 = (*(unsigned __int8 *)((*(_QWORD *)(v43 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
      if (!v26)
        v45 = 0;
      if (v45 == 1)
      {
        v46 = *(_DWORD *)(v44 + 16) + 1;
        *(_DWORD *)(v44 + 16) = v46;
        v47 = *(_QWORD *)(v44 + 232);
        if (v47)
        {
          if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v47 + 72))(*(_QWORD *)(v44 + 232)) & 1) != 0
            || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v47 + 80))(v47))
          {
            updated = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 720))(v47);
            v48 = (unsigned int *)(updated + 1);
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 + 1, v48));
          }
          else
          {
            updated = 0;
          }
          v46 = *(_DWORD *)(v44 + 16);
        }
        else
        {
          updated = 0;
        }
        v142 = updated;
        if (!v46)
        {
          __break(0xC471u);
          JUMPOUT(0x195FA8D14);
        }
        *(_DWORD *)(v44 + 16) = v46 - 1;
        goto LABEL_91;
      }
    }
LABEL_82:
    v50 = 0;
    v51 = 0;
    v142 = 0;
    goto LABEL_100;
  }
  if (*(_BYTE *)(v8 + 194))
    goto LABEL_82;
  WebCore::EventHandler::subframeForHitTestResult((uint64_t)v149, v41, (uint64_t *)&v142);
  updated = v142;
LABEL_91:
  if (!updated)
    goto LABEL_262;
  v52 = (unsigned int *)(updated + 1);
  do
    v53 = __ldaxr(v52);
  while (__stlxr(v53 + 1, v52));
  if (*((_BYTE *)updated + 144))
    v50 = 0;
  else
    v50 = updated;
  if (*((_BYTE *)updated + 144))
    v51 = updated;
  else
    v51 = 0;
  while (1)
  {
LABEL_100:
    v54 = v42 & 0xFFFFFFC0;
    v141 = (((int)(v153 - (v42 & 0xFFFFFFC0) + 32) >> 6) + v153 / 64) | ((unint64_t)(((v154 - (int)v54 + 32) >> 6) + v154 / 64) << 32);
    v138 = v6;
    if (v51)
    {
      v139 = v50;
      v55 = *(WebCore::ScrollView **)(*(_QWORD *)(*(_QWORD *)(v8 + 8) + 8) + 288);
      if (v55)
      {
        ++*((_DWORD *)v55 + 2);
        v56 = (WebCore::ScrollView *)v51[32];
        if (v56)
        {
          ++*((_DWORD *)v56 + 2);
          v57 = v51[4];
          v140 = v51[5];
          v145 = WebCore::ScrollView::contentsToRootView(v55, (const WebCore::IntPoint *)&v141);
          updated = (_QWORD *)WebCore::ScrollView::rootViewToContents(v56, (const WebCore::IntPoint *)&v145);
          v58 = v57;
          v6 = (uint64_t)updated;
          v54 = v58 >> 8;
          if (*((_DWORD *)v56 + 2) == 1)
          {
            v118 = *(uint64_t (**)(WebCore::ScrollView *))(*(_QWORD *)v56 + 8);
            v119 = v56;
            v136 = v58;
            v120 = v58 >> 8;
            updated = (_QWORD *)v118(v119);
            v54 = v120;
            LOBYTE(v58) = v136;
          }
          else
          {
            --*((_DWORD *)v56 + 2);
          }
          LODWORD(v56) = 1;
        }
        else
        {
          LOBYTE(v58) = 0;
        }
        if (*((_DWORD *)v55 + 2) == 1)
        {
          v115 = *(uint64_t (**)(WebCore::ScrollView *))(*(_QWORD *)v55 + 8);
          v116 = v55;
          v135 = v58;
          v117 = v54;
          updated = (_QWORD *)v115(v116);
          v54 = v117;
          LOBYTE(v58) = v135;
        }
        else
        {
          --*((_DWORD *)v55 + 2);
        }
      }
      else
      {
        LOBYTE(v58) = 0;
        LODWORD(v56) = 0;
      }
      v59 = (unsigned int *)(v51 + 1);
      v50 = v139;
      do
      {
        v60 = __ldaxr(v59);
        v61 = v60 - 1;
      }
      while (__stlxr(v61, v59));
      if (!v61)
      {
        v134 = v54;
        v62 = v58;
        atomic_store(1u, v59);
        v63 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v63 = off_1E31FE290;
        v63[1] = v59;
        v145 = (uint64_t)v63;
        WTF::ensureOnMainThread();
        updated = (_QWORD *)v145;
        v145 = 0;
        if (updated)
          updated = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*updated + 8))(updated);
        v50 = v139;
        LOBYTE(v58) = v62;
        v54 = v134;
      }
    }
    else
    {
      LODWORD(v56) = 0;
      LOBYTE(v58) = 0;
    }
    if (v50)
    {
      v64 = (unsigned int *)(v50 + 1);
      do
      {
        v65 = __ldaxr(v64);
        v66 = v65 - 1;
      }
      while (__stlxr(v66, v64));
      if (!v66)
      {
        v137 = v54;
        v126 = v58;
        atomic_store(1u, v64);
        v127 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v127 = off_1E31FE290;
        v127[1] = v64;
        v145 = (uint64_t)v127;
        WTF::ensureOnMainThread();
        updated = (_QWORD *)v145;
        v145 = 0;
        if (updated)
          updated = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*updated + 8))(updated);
        LOBYTE(v58) = v126;
        v54 = v137;
      }
    }
    if ((_DWORD)v56)
    {
      *(_QWORD *)a5 = v58 | (v54 << 8);
      *(_QWORD *)(a5 + 8) = v140;
      *(_QWORD *)(a5 + 16) = v6;
      *(_DWORD *)(a5 + 24) = 1;
      goto LABEL_205;
    }
    v67 = (uint64_t)v142;
    if (!v142)
      goto LABEL_124;
    if (*((_BYTE *)v142 + 144))
    {
      v67 = 0;
LABEL_124:
      v68 = 1;
      goto LABEL_128;
    }
    v69 = (unsigned int *)(v142 + 1);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 + 1, v69));
    v68 = 0;
LABEL_128:
    v71 = *(_QWORD *)(v8 + 224);
    if (v71)
    {
      v72 = (unsigned int *)(v71 + 8);
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 + 1, v72));
      v74 = *(unsigned int **)(*(_QWORD *)(v71 + 48) + 8);
      v75 = *((_QWORD *)v74 + 3);
      if (v75)
        v75 = *(_QWORD *)(v75 + 8);
      v76 = *((_QWORD *)i + 3);
      if (v76)
        v76 = *(_QWORD *)(v76 + 8);
      if (v75 == v76)
      {
        if (v74 == i)
        {
          v77 = 1;
LABEL_138:
          if (v71 != v67 && v77)
          {
            v78 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) + 8) + 288);
            if (v78 && *(_QWORD *)(v78 + 40))
              updated = (_QWORD *)WebCore::EventHandler::passSubframeEventToSubframe(v8, v149);
            else
              updated = WebCore::EventHandler::handleMouseMoveEvent(&v145, *(_QWORD *)(v71 + 640), v149, 0, 0);
          }
        }
        else
        {
          while (1)
          {
            v122 = *((_QWORD *)v74 + 7);
            if (!v122)
              break;
            v74 = *(unsigned int **)(v122 + 8);
            v77 = v74 != 0;
            if (v74 == i || v74 == 0)
              goto LABEL_138;
          }
        }
      }
      do
      {
        v79 = __ldaxr(v72);
        v80 = v79 - 1;
      }
      while (__stlxr(v80, v72));
      if (!v80)
      {
        atomic_store(1u, v72);
        v130 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v130 = off_1E31FE290;
        v130[1] = v72;
        v145 = (uint64_t)v130;
        WTF::ensureOnMainThread();
        updated = (_QWORD *)v145;
        v145 = 0;
        if (updated)
          updated = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*updated + 8))(updated);
      }
    }
    if (!v67)
      goto LABEL_159;
    v81 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v81 || (v82 = *(_QWORD *)(v81 + 96)) == 0)
      v82 = WebCore::threadGlobalDataSlow((WebCore *)updated);
    v83 = *(_QWORD *)(v82 + 40);
    if (!v83)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v82);
      v83 = *(_QWORD *)(v82 + 40);
    }
    v84 = (void *)(v83 + 1232);
    v85 = v152;
    if (v152)
    {
      *(_DWORD *)(v152 + 24) += 2;
      updated = (_QWORD *)WebCore::EventHandler::updateMouseEventTargetNode(v8, v84, v85, v7, 1);
      if (*(_DWORD *)(v85 + 24) == 2)
      {
        if ((*(_WORD *)(v85 + 30) & 0x400) == 0)
          updated = WebCore::Node::removedLastRef((WebCore::Node *)v85, v41);
      }
      else
      {
        *(_DWORD *)(v85 + 24) -= 2;
      }
    }
    else
    {
      updated = (_QWORD *)WebCore::EventHandler::updateMouseEventTargetNode(v8, v84, 0, v7, 1);
    }
    if (*(_QWORD *)(v67 + 288))
    {
      v86 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) + 8) + 288);
      if (v86 && *(_QWORD *)(v86 + 40))
      {
        updated = (_QWORD *)WebCore::EventHandler::passSubframeEventToSubframe(v8, v149);
        v87 = (char)updated;
      }
      else
      {
        updated = WebCore::EventHandler::handleMouseMoveEvent(&v145, *(_QWORD *)(v67 + 640), v149, v138, 0);
        v87 = 1;
      }
    }
    else
    {
LABEL_159:
      v87 = 0;
    }
    if (v155)
      v88 = 1;
    else
      v88 = v68;
    if (v88 == 1)
    {
      v89 = *((_QWORD *)i + 36);
      if (!v89)
        goto LABEL_180;
      ++*(_DWORD *)(v89 + 8);
      updated = (_QWORD *)WebCore::EventHandler::selectCursor(v8, (const WebCore::HitTestResult *)v151, (*(unsigned __int8 *)(v7 + 9) >> 3) & 1, (uint64_t)&v145);
      if (v148)
      {
        LODWORD(v140) = v68;
        *(_BYTE *)(v8 + 240) = v145;
        v90 = v146;
        v146 = 0;
        v91 = *(_DWORD **)(v8 + 248);
        *(_QWORD *)(v8 + 248) = v90;
        if (v91)
        {
          if (v91[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v91 + 8))(v91);
          else
            --v91[2];
        }
        *(_OWORD *)(v8 + 256) = v147;
        v92 = *(_QWORD *)(v89 + 32);
        i = (unsigned int *)v89;
        if (v92)
        {
          v93 = *(unsigned int **)(v92 + 8);
          for (i = (unsigned int *)v89; v93; v93 = *(unsigned int **)(v125 + 8))
          {
            i = v93;
            v125 = *((_QWORD *)v93 + 4);
            if (!v125)
              break;
          }
        }
        if (((*(uint64_t (**)(unsigned int *))(*(_QWORD *)i + 72))(i) & 1) != 0
          || (updated = (_QWORD *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)i + 80))(i), (_DWORD)updated))
        {
          v94 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(unsigned int *))(*(_QWORD *)i + 720))(i)
                                                  + 24)
                                      + 8)
                          + 48);
          updated = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v94 + 136))(v94, v8 + 240);
        }
        if (v148)
        {
          updated = v146;
          v146 = 0;
          if (updated)
          {
            if (*((_DWORD *)updated + 2) == 1)
              updated = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*updated + 8))(updated);
            else
              --*((_DWORD *)updated + 2);
          }
        }
      }
      if (*(_DWORD *)(v89 + 8) != 1)
      {
        --*(_DWORD *)(v89 + 8);
LABEL_180:
        if ((v68 & 1) != 0)
          goto LABEL_183;
        goto LABEL_181;
      }
      updated = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
      if ((v68 & 1) != 0)
        goto LABEL_183;
    }
LABEL_181:
    v95 = (unsigned int *)(v67 + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 + 1, v95));
LABEL_183:
    v97 = *(_QWORD *)(v8 + 224);
    *(_QWORD *)(v8 + 224) = v67;
    if (v97)
    {
      v98 = (unsigned int *)(v97 + 8);
      do
      {
        v99 = __ldaxr(v98);
        v100 = v99 - 1;
      }
      while (__stlxr(v100, v98));
      if (!v100)
      {
        atomic_store(1u, v98);
        v131 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v131 = off_1E31FE290;
        v131[1] = v98;
        v145 = (uint64_t)v131;
        WTF::ensureOnMainThread();
        updated = (_QWORD *)v145;
        v145 = 0;
        if (updated)
          updated = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*updated + 8))(updated);
      }
    }
    if ((v87 & 1) != 0)
      goto LABEL_188;
    v102 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v102 || (v103 = *(_QWORD *)(v102 + 96)) == 0)
      v103 = WebCore::threadGlobalDataSlow((WebCore *)updated);
    v104 = *(_QWORD *)(v103 + 40);
    if (!v104)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v103);
      v104 = *(_QWORD *)(v103 + 40);
    }
    v105 = (uint64_t *)(v104 + 1232);
    v6 = v152;
    if (v152)
    {
      *(_DWORD *)(v152 + 24) += 2;
      v7 = WebCore::EventHandler::dispatchMouseEvent(v8, v105, v6, 0, v7, 1);
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v6, v41);
      }
      else
      {
        *(_DWORD *)(v6 + 24) -= 2;
      }
      if ((v7 & 1) != 0)
        goto LABEL_200;
    }
    else if ((WebCore::EventHandler::dispatchMouseEvent(v8, v105, 0, 0, v7, 1) & 1) != 0)
    {
      goto LABEL_200;
    }
    if (*(_DWORD *)(v8 + 176) == 1)
      break;
    updated = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_262:
    v50 = 0;
    v51 = 0;
  }
  if (*(_BYTE *)(v8 + 172) != 1)
  {
LABEL_188:
    v101 = 1;
    goto LABEL_201;
  }
LABEL_200:
  v101 = WebCore::EventHandler::handleMouseDraggedEvent(v8, v149, 0);
LABEL_201:
  *(_BYTE *)a5 = v101;
  *(_DWORD *)(a5 + 24) = 0;
  if ((v68 & 1) == 0)
  {
    v106 = (unsigned int *)(v67 + 8);
    do
    {
      v107 = __ldaxr(v106);
      v108 = v107 - 1;
    }
    while (__stlxr(v108, v106));
    if (!v108)
    {
      atomic_store(1u, v106);
      v132 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v132 = off_1E31FE290;
      v132[1] = v106;
      v145 = (uint64_t)v132;
      WTF::ensureOnMainThread();
      v133 = v145;
      v145 = 0;
      if (v133)
        (*(void (**)(uint64_t))(*(_QWORD *)v133 + 8))(v133);
    }
  }
LABEL_205:
  v109 = (uint64_t)v142;
  v142 = 0;
  if (v109)
  {
    v110 = (unsigned int *)(v109 + 8);
    do
    {
      v111 = __ldaxr(v110);
      v112 = v111 - 1;
    }
    while (__stlxr(v112, v110));
    if (!v112)
    {
      atomic_store(1u, v110);
      v128 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v128 = off_1E31FE290;
      v128[1] = v110;
      v145 = (uint64_t)v128;
      WTF::ensureOnMainThread();
      v129 = v145;
      v145 = 0;
      if (v129)
        (*(void (**)(uint64_t))(*(_QWORD *)v129 + 8))(v129);
    }
  }
LABEL_209:
  WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v151, v41);
  v114 = v150;
  v150 = 0;
  if (v114)
  {
    if (*(_DWORD *)v114 == 2)
      WTF::StringImpl::destroy(v114, v113);
    else
      *(_DWORD *)v114 -= 2;
  }
LABEL_41:
  if (v13)
  {
    if (v13[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
    else
      --v13[2];
  }
  do
  {
    v31 = __ldaxr(v11);
    v32 = v31 - 1;
  }
  while (__stlxr(v32, v11));
  if (!v32)
  {
    atomic_store(1u, v11);
    v123 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v123 = off_1E31FE290;
    v123[1] = v11;
    v149[0] = v123;
    WTF::ensureOnMainThread();
    v124 = v149[0];
    v149[0] = 0;
    if (v124)
      (*(void (**)(uint64_t))(*(_QWORD *)v124 + 8))(v124);
  }
}

uint64_t WebCore::EventHandler::passMouseMovedEventToScrollbars(uint64_t a1, uint64_t a2)
{
  void *v2;
  BOOL v3;
  uint64_t v4;
  _BYTE v6[24];
  int v7;
  _OWORD v8[4];
  __int16 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char v13;
  uint64_t v14;

  memset(v8, 0, sizeof(v8));
  v9 = 256;
  v14 = 0;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0;
  WebCore::EventHandler::handleMouseMoveEvent(a1, a2, (const WebCore::IntPoint *)v8, 1, (uint64_t)v6);
  if (v7)
    v3 = 1;
  else
    v3 = v6[0] == 0;
  v4 = !v3;
  WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v8, v2);
  return v4;
}

uint64_t WebCore::EventHandler::getHitTypeForMouseMoveEvent(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  int v3;
  const WTF::StringImpl *v4;
  unsigned int v5;

  v3 = *(unsigned __int8 *)(a1 + 168);
  {
    v4 = (const WTF::StringImpl *)WebCore::penPointerEventType(void)::penType;
  }
  else
  {
    v4 = (const WTF::StringImpl *)&WebCore::penPointerEventType(void)::$_0::operator() const(void)::impl;
    WebCore::penPointerEventType(void)::$_0::operator() const(void)::impl += 2;
    WebCore::penPointerEventType(void)::penType = (uint64_t)&WebCore::penPointerEventType(void)::$_0::operator() const(void)::impl;
  }
  if (v3)
    v5 = 1286;
  else
    v5 = a3 | 0x504;
  if (WTF::equal(*(WTF **)(a2 + 104), v4, a3))
    return v5 | 0x20000;
  else
    return v5;
}

WTF::StringImpl *WebCore::EventHandler::getHitTestResultForMouseEvent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const WTF::StringImpl *a3@<X2>, WebCore::HitTestResult *a4@<X8>)
{
  int v7;
  const WTF::StringImpl *v8;
  int v9;
  int v10;
  void *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  int v14;
  char v15;
  _BYTE v16[104];
  WTF::StringImpl *v17;
  _QWORD v18[20];

  v18[19] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 168))
    v7 = 1286;
  else
    v7 = 1284;
  {
    v8 = (const WTF::StringImpl *)WebCore::penPointerEventType(void)::penType;
  }
  else
  {
    v8 = (const WTF::StringImpl *)&WebCore::penPointerEventType(void)::$_0::operator() const(void)::impl;
    WebCore::penPointerEventType(void)::$_0::operator() const(void)::impl += 2;
    WebCore::penPointerEventType(void)::penType = (uint64_t)&WebCore::penPointerEventType(void)::$_0::operator() const(void)::impl;
  }
  v9 = WTF::equal(*(WTF **)(a2 + 104), v8, a3);
  v10 = v7 | 0x20000;
  if (!v9)
    v10 = v7;
  v14 = v10;
  v15 = 1;
  WebCore::EventHandler::prepareMouseEvent((uint64_t)v16, a1, (const WebCore::IntPoint *)&v14, a2);
  WebCore::HitTestResult::HitTestResult(a4, (const WebCore::HitTestResult *)v18);
  WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v18, v11);
  result = v17;
  v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::EventHandler::updateMouseEventTargetNode(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v7;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  char v15;
  __int16 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const WTF::AtomString *v26;
  uint64_t result;
  uint64_t v28;
  double v29;
  double v30;
  uint64_t v31;
  WebCore::ImageOverlayController **v32;
  int v33;
  int v34;
  _QWORD *v35;
  WebCore::Node *v36;
  WebCore::Node *v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  char HasCapturingEventListeners;
  WebCore *v74;
  const WTF::AtomString *v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  WTF::MonotonicTime *v83;
  WTF::MonotonicTime *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int16 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  WTF *v99;
  WTF *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int16 v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  WTF *v120;
  void *v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  WTF *v133;
  WTF *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  WTF::MonotonicTime *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v151;
  unsigned int v152;
  unsigned int v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  WebCore::ImageOverlayController *v157;
  void *v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  _QWORD *v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  WTF::MonotonicTime *v172;
  _QWORD *v173;
  uint64_t v174;
  _QWORD *v175;
  WTF::MonotonicTime *v176;
  WTF::MonotonicTime *v177;
  uint64_t v178;
  _QWORD *v179;
  _QWORD *v180;
  _QWORD *v181;
  _QWORD *v182;
  _QWORD *v183;
  _QWORD *v184;
  _QWORD *v185;
  _QWORD *v186;
  _QWORD *v187;
  _QWORD *v188;
  WebCore *v189;
  _QWORD *v190;
  int __dst;
  int __dsta;
  _QWORD *v193;
  WebCore *v194;
  uint64_t v195;
  char v196;
  uint64_t v197;
  WTF *v198;
  uint64_t v199;
  _BYTE v200[256];
  WTF::MonotonicTime *v201;
  uint64_t v202;
  _BYTE v203[264];

  v7 = a3;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v11 = (unsigned int *)(v10 + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  v13 = *(_QWORD *)(a1 + 200);
  if (v13)
  {
    v14 = *(_DWORD *)(v13 + 24) + 2;
    *(_DWORD *)(v13 + 24) = v14;
    v7 = v13;
LABEL_5:
    v15 = 0;
    *(_DWORD *)(v7 + 24) = v14 + 2;
    goto LABEL_24;
  }
  if (!a3)
    goto LABEL_23;
  while (1)
  {
    v16 = *(_WORD *)(v7 + 28);
    if ((v16 & 8) != 0)
    {
      v14 = *(_DWORD *)(v7 + 24) + 2;
      *(_DWORD *)(v7 + 24) = v14;
      goto LABEL_5;
    }
    v18 = (uint64_t *)(v7 + 32);
    v17 = *(_QWORD *)(v7 + 32);
    if (v17)
    {
      if ((*(_WORD *)(v17 + 28) & 8) != 0)
      {
        v19 = *(_QWORD *)(v17 + 72) & 0xFFFFFFFFFFFFLL;
        if (v19)
        {
          v21 = *(_QWORD *)(v19 + 88);
          if (v21)
          {
            v22 = *(_QWORD *)(v21 + 224);
            if (v22)
            {
              v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, v7);
              if (v20)
                goto LABEL_13;
              v16 = *(_WORD *)(v7 + 28);
            }
          }
        }
      }
    }
    if ((v16 & 0x80) != 0)
      break;
LABEL_12:
    v20 = *v18;
LABEL_13:
    v7 = v20;
    if (!v20)
      goto LABEL_23;
  }
  v23 = *(_QWORD *)(v7 + 200);
  if (v23)
  {
    v18 = (uint64_t *)(v23 + 8);
    goto LABEL_12;
  }
  v7 = 0;
LABEL_23:
  v15 = 1;
LABEL_24:
  v24 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v7;
  if (v24)
  {
    if (*(_DWORD *)(v24 + 24) == 2)
    {
      if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v24, a2);
    }
    else
    {
      *(_DWORD *)(v24 + 24) -= 2;
    }
  }
  WebCore::EventHandler::textRecognitionCandidateElement((WebCore::EventHandler *)a1, a2, (uint64_t *)&v201);
  result = (uint64_t)v201;
  if (v201)
  {
    if (*((_DWORD *)v201 + 6) == 2)
    {
      if ((*((_WORD *)v201 + 15) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef(v201, v25);
    }
    else
    {
      *((_DWORD *)v201 + 6) -= 2;
    }
    if (*(_QWORD *)(a4 + 68))
    {
      v28 = *(_QWORD *)(a1 + 112);
      if ((v28 & 0xFFFFFFFFFFFFLL) == 0 || *(double *)((v28 & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
      {
        v29 = *(double *)(a1 + 136);
        *(_QWORD *)(a1 + 104) = 0;
        WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
        result = WebCore::TimerBase::setNextFireTime(a1 + 80, v29 + v30);
      }
      else
      {
        *(_QWORD *)(a1 + 112) = v28 & 0xFDFFFFFFFFFFFFLL | 0x2000000000000;
      }
    }
  }
  else
  {
    v169 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v169 & 0xFDFFFFFFFFFFFFLL;
    if ((v169 & 0xFFFFFFFFFFFFLL) != 0)
      result = WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(a1 + 80));
  }
  v31 = *(_QWORD *)(v10 + 24);
  if (!v31 || (v32 = *(WebCore::ImageOverlayController ***)(v31 + 8)) == 0)
  {
LABEL_39:
    if (!a5)
      goto LABEL_283;
LABEL_40:
    v35 = a2;
    v196 = v15;
    v197 = v10;
    v36 = *(WebCore::Node **)(a1 + 208);
    v37 = *(WebCore::Node **)(a1 + 216);
    v38 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    v39 = (unsigned int *)(v38 + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 + 1, v39));
    v41 = *(_QWORD *)(v38 + 288);
    if (!v41)
      goto LABEL_93;
    ++*(_DWORD *)(v41 + 8);
    v42 = WebCore::EventHandler::enclosingScrollableArea((WebCore::EventHandler *)a1, v37);
    v43 = WebCore::EventHandler::enclosingScrollableArea((WebCore::EventHandler *)a1, v36);
    if ((v37 == 0) != (v36 != 0))
    {
      if (!(v42 | v43))
        goto LABEL_91;
      if (v42)
        v44 = v43 == 0;
      else
        v44 = 1;
      v46 = !v44 && v42 != v43;
      v47 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v47 || (v48 = *(_QWORD *)(v47 + 96)) == 0)
      {
        __dst = v46;
        v49 = v43;
        v48 = WebCore::threadGlobalDataSlow((WebCore *)v43);
        v43 = v49;
        v46 = __dst;
      }
      v50 = *(_QWORD *)(v48 + 40);
      if (!v50)
      {
        __dsta = v46;
        v178 = v43;
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v48);
        v43 = v178;
        v46 = __dsta;
        v50 = *(_QWORD *)(v48 + 40);
      }
      if (*v35 != *(_QWORD *)(v50 + 1232))
        goto LABEL_68;
      v193 = (_QWORD *)v43;
      v51 = (_QWORD *)(v41 + 64);
      v52 = *(_QWORD *)(v41 + 88);
      if (!v52)
      {
        if ((*(unsigned int (**)(uint64_t))(*v51 + 688))(v41 + 64))
        {
          v52 = WTF::fastMalloc((WTF *)0x30);
          v183 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v183 = off_1E3406CB0;
          v183[1] = v51;
          v167 = 1;
          *(_BYTE *)(v52 + 16) = 1;
          *(_QWORD *)v52 = off_1E341C188;
          *(_QWORD *)(v52 + 8) = v51;
          *(_QWORD *)(v52 + 24) = v183;
          *(_QWORD *)(v52 + 32) = 0;
          *(_QWORD *)(v52 + 40) = 0;
          v168 = *(_QWORD **)(v41 + 88);
          *(_QWORD *)(v41 + 88) = v52;
          if (!v168)
            goto LABEL_61;
        }
        else
        {
          v167 = 38;
          v168 = (_QWORD *)(v41 + 64);
        }
        (*(void (**)(void))(*v168 + 8 * v167))();
        v52 = *(_QWORD *)(v41 + 88);
        if (!v52)
        {
          __break(0xC471u);
          JUMPOUT(0x195FA9F50);
        }
      }
LABEL_61:
      (*(void (**)(uint64_t))(*(_QWORD *)v52 + 104))(v52);
      v43 = (uint64_t)v193;
      if (v193)
        v53 = v46;
      else
        v53 = 1;
      if ((v53 & 1) == 0 && v51 != v193)
      {
        v54 = v193[3];
        if (v54)
        {
LABEL_67:
          (*(void (**)(uint64_t))(*(_QWORD *)v54 + 104))(v54);
          v43 = (uint64_t)v193;
          goto LABEL_68;
        }
        v173 = v193;
        if ((*(unsigned int (**)(void))(*v193 + 688))())
        {
          v54 = WTF::fastMalloc((WTF *)0x30);
          v186 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v186 = off_1E3406CB0;
          v186[1] = v193;
          v174 = 1;
          *(_BYTE *)(v54 + 16) = 1;
          *(_QWORD *)v54 = off_1E341C188;
          *(_QWORD *)(v54 + 8) = v193;
          *(_QWORD *)(v54 + 24) = v186;
          *(_QWORD *)(v54 + 32) = 0;
          *(_QWORD *)(v54 + 40) = 0;
          v175 = (_QWORD *)v193[3];
          v193[3] = v54;
          if (!v175)
            goto LABEL_67;
          v173 = v193;
        }
        else
        {
          v174 = 38;
          v175 = v193;
        }
        (*(void (**)(void))(*v175 + 8 * v174))();
        v54 = v173[3];
        if (!v54)
        {
          __break(0xC471u);
          JUMPOUT(0x195FAA058);
        }
        goto LABEL_67;
      }
LABEL_68:
      if (!v46)
        goto LABEL_91;
      if (v41 + 64 == v42)
        goto LABEL_72;
      v55 = v43;
      v56 = *(_QWORD *)(v42 + 24);
      if (v56)
      {
LABEL_71:
        (*(void (**)(uint64_t))(*(_QWORD *)v56 + 96))(v56);
        v43 = v55;
LABEL_72:
        if (v41 + 64 == v43)
          goto LABEL_91;
        v57 = *(_QWORD *)(v43 + 24);
        if (v57)
          goto LABEL_84;
        v58 = (_QWORD *)v43;
        if (!(*(unsigned int (**)(void))(*(_QWORD *)v43 + 688))())
        {
          v59 = 38;
          v60 = v58;
          goto LABEL_76;
        }
        v57 = WTF::fastMalloc((WTF *)0x30);
        v185 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v185 = off_1E3406CB0;
        v185[1] = v58;
        v59 = 1;
        *(_BYTE *)(v57 + 16) = 1;
        *(_QWORD *)v57 = off_1E341C188;
        *(_QWORD *)(v57 + 8) = v58;
        *(_QWORD *)(v57 + 24) = v185;
        *(_QWORD *)(v57 + 32) = 0;
        *(_QWORD *)(v57 + 40) = 0;
        v60 = (_QWORD *)v58[3];
        v58[3] = v57;
        if (v60)
        {
LABEL_76:
          (*(void (**)(void))(*v60 + 8 * v59))();
          v57 = v58[3];
          if (!v57)
          {
            __break(0xC471u);
            JUMPOUT(0x195FA9358);
          }
        }
LABEL_84:
        v64 = 11;
LABEL_90:
        (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8 * v64))(v57);
LABEL_91:
        if (*(_DWORD *)(v41 + 8) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
        else
          --*(_DWORD *)(v41 + 8);
        do
        {
LABEL_93:
          v66 = __ldaxr(v39);
          v67 = v66 - 1;
        }
        while (__stlxr(v67, v39));
        v10 = v197;
        v15 = v196;
        if (!v67)
        {
          atomic_store(1u, v39);
          v176 = (WTF::MonotonicTime *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v176 = off_1E31FE290;
          *((_QWORD *)v176 + 1) = v39;
          v201 = v176;
          WTF::ensureOnMainThread();
          v177 = v201;
          v201 = 0;
          if (v177)
            (*(void (**)(WTF::MonotonicTime *))(*(_QWORD *)v177 + 8))(v177);
        }
        v68 = *(_QWORD *)(a1 + 216);
        if (v68 && *(_QWORD *)(*(_QWORD *)(v68 + 40) + 8) != *(_QWORD *)(v197 + 296))
        {
          *(_QWORD *)(a1 + 216) = 0;
          if (*(_DWORD *)(v68 + 24) == 2)
          {
            if ((*(_WORD *)(v68 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v68, v25);
          }
          else
          {
            *(_DWORD *)(v68 + 24) -= 2;
          }
          v68 = *(_QWORD *)(a1 + 232);
          *(_QWORD *)(a1 + 232) = 0;
          if (v68)
          {
            if (*(_DWORD *)v68 == 1)
              v68 = WTF::fastFree((WTF *)v68, v25);
            else
              --*(_DWORD *)v68;
          }
        }
        v69 = *(_QWORD *)(a1 + 216);
        if (v69 != *(_QWORD *)(a1 + 208))
        {
          v70 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v70 || (v71 = *(_QWORD *)(v70 + 96)) == 0)
            v71 = WebCore::threadGlobalDataSlow((WebCore *)v68);
          v72 = *(_QWORD **)(v71 + 40);
          if (!v72)
          {
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v71);
            v72 = *(_QWORD **)(v71 + 40);
          }
          v188 = v72 + 187;
          v189 = (WebCore *)(v72 + 152);
          HasCapturingEventListeners = WebCore::hierarchyHasCapturingEventListeners(*(_QWORD *)(a1 + 208), (WebCore::Element *)(v72 + 187), (const WTF::AtomString *)(v72 + 152), v26);
          v190 = v72;
          v74 = (WebCore *)(v72 + 153);
          v187 = v72 + 188;
          v76 = WebCore::hierarchyHasCapturingEventListeners(*(_QWORD *)(a1 + 216), (WebCore::Element *)(v72 + 188), (const WTF::AtomString *)(v72 + 153), v75);
          v201 = (WTF::MonotonicTime *)v203;
          v202 = 32;
          v77 = *(_QWORD *)(a1 + 216);
          v194 = (WebCore *)(v72 + 153);
          if (v77)
          {
            do
            {
              v78 = HIDWORD(v202);
              if (HIDWORD(v202) == (_DWORD)v202)
              {
                v79 = a4;
                v80 = HIDWORD(v202) + ((unint64_t)HIDWORD(v202) >> 2);
                if (v80 >= 0x10)
                  v81 = v80 + 1;
                else
                  v81 = 16;
                if (v81 <= (unint64_t)HIDWORD(v202) + 1)
                  v82 = HIDWORD(v202) + 1;
                else
                  v82 = v81;
                v83 = v201;
                if (v82 < 0x21)
                {
                  v201 = (WTF::MonotonicTime *)v203;
                  LODWORD(v202) = 32;
                  v84 = (WTF::MonotonicTime *)v203;
                }
                else
                {
                  if (v82 >> 29)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195FAA380);
                  }
                  v84 = (WTF::MonotonicTime *)WTF::fastMalloc((WTF *)(8 * v82));
                  LODWORD(v202) = v82;
                  v201 = v84;
                }
                memcpy(v84, v83, 8 * v78);
                a4 = v79;
                v74 = v194;
                if (v203 != (_BYTE *)v83 && v83)
                {
                  if (v201 == v83)
                  {
                    v201 = 0;
                    LODWORD(v202) = 0;
                  }
                  WTF::fastFree(v83, v25);
                }
                LODWORD(v78) = HIDWORD(v202);
                v85 = (uint64_t *)((char *)v201 + 8 * HIDWORD(v202));
              }
              else
              {
                v85 = (uint64_t *)((char *)v201 + 8 * HIDWORD(v202));
              }
              *(_DWORD *)(v77 + 24) += 2;
              *v85 = v77;
              HIDWORD(v202) = v78 + 1;
              v86 = *(_QWORD *)(v77 + 32);
              if (!v86
                || (*(_WORD *)(v86 + 28) & 8) == 0
                || (v87 = *(_QWORD *)(v86 + 72) & 0xFFFFFFFFFFFFLL) == 0
                || (v91 = *(_QWORD *)(v87 + 88)) == 0
                || (v92 = *(_QWORD *)(v91 + 224)) == 0
                || (v89 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v92 + 16))(v92, v77)) == 0)
              {
                if ((~*(unsigned __int16 *)(v77 + 28) & 0x408) != 0
                  || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v77 + 368))(v77))
                {
                  v89 = *(_QWORD *)(v77 + 32);
                  if (!v89)
                    break;
                  v90 = *(_WORD *)(v89 + 28);
                  if ((v90 & 0x80) == 0)
                  {
                    if ((v90 & 8) == 0)
                      break;
                    goto LABEL_134;
                  }
                  v88 = *(_QWORD *)(v89 + 200);
                  if (!v88)
                    break;
                }
                else
                {
                  v88 = *(_QWORD *)(v77 + 112);
                  if (!v88)
                    break;
                }
                v89 = *(_QWORD *)(v88 + 8);
              }
LABEL_134:
              v77 = v89;
            }
            while (v89);
          }
          v198 = (WTF *)v200;
          v199 = 32;
          v93 = *(_QWORD *)(a1 + 208);
          if (v93)
          {
            do
            {
              v94 = HIDWORD(v199);
              if (HIDWORD(v199) == (_DWORD)v199)
              {
                v95 = a4;
                v96 = HIDWORD(v199) + ((unint64_t)HIDWORD(v199) >> 2);
                if (v96 >= 0x10)
                  v97 = v96 + 1;
                else
                  v97 = 16;
                if (v97 <= (unint64_t)HIDWORD(v199) + 1)
                  v98 = HIDWORD(v199) + 1;
                else
                  v98 = v97;
                v99 = v198;
                if (v98 < 0x21)
                {
                  v198 = (WTF *)v200;
                  LODWORD(v199) = 32;
                  v100 = (WTF *)v200;
                }
                else
                {
                  if (v98 >> 29)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195FAA388);
                  }
                  v100 = (WTF *)WTF::fastMalloc((WTF *)(8 * v98));
                  LODWORD(v199) = v98;
                  v198 = v100;
                }
                memcpy(v100, v99, 8 * HIDWORD(v199));
                a4 = v95;
                v74 = v194;
                if (v200 != (_BYTE *)v99 && v99)
                {
                  if (v198 == v99)
                  {
                    v198 = 0;
                    LODWORD(v199) = 0;
                  }
                  WTF::fastFree(v99, v25);
                }
                v94 = HIDWORD(v199);
                v101 = (uint64_t *)((char *)v198 + 8 * HIDWORD(v199));
              }
              else
              {
                v101 = (uint64_t *)((char *)v198 + 8 * HIDWORD(v199));
              }
              *(_DWORD *)(v93 + 24) += 2;
              *v101 = v93;
              HIDWORD(v199) = v94 + 1;
              v102 = *(_QWORD *)(v93 + 32);
              if (!v102
                || (*(_WORD *)(v102 + 28) & 8) == 0
                || (v103 = *(_QWORD *)(v102 + 72) & 0xFFFFFFFFFFFFLL) == 0
                || (v107 = *(_QWORD *)(v103 + 88)) == 0
                || (v108 = *(_QWORD *)(v107 + 224)) == 0
                || (v105 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v108 + 16))(v108, v93)) == 0)
              {
                if ((~*(unsigned __int16 *)(v93 + 28) & 0x408) != 0
                  || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v93 + 368))(v93))
                {
                  v105 = *(_QWORD *)(v93 + 32);
                  if (!v105)
                    break;
                  v106 = *(_WORD *)(v105 + 28);
                  if ((v106 & 0x80) == 0)
                  {
                    if ((v106 & 8) == 0)
                      break;
                    goto LABEL_171;
                  }
                  v104 = *(_QWORD *)(v105 + 200);
                  if (!v104)
                    break;
                }
                else
                {
                  v104 = *(_QWORD *)(v93 + 112);
                  if (!v104)
                    break;
                }
                v105 = *(_QWORD *)(v104 + 8);
              }
LABEL_171:
              v93 = v105;
            }
            while (v105);
          }
          if (HIDWORD(v202))
          {
            v109 = HIDWORD(v199);
            if (HIDWORD(v199))
            {
              v110 = (char *)v201 + 8 * HIDWORD(v202);
              v111 = (char *)v198 + 8 * HIDWORD(v199);
              if (*((_QWORD *)v110 - 1) == *((_QWORD *)v111 - 1))
              {
                v112 = 0;
                if (HIDWORD(v199) >= (unint64_t)HIDWORD(v202))
                  v113 = HIDWORD(v202);
                else
                  v113 = HIDWORD(v199);
                v114 = v111 - 8;
                v115 = v110 - 8;
                while (1)
                {
                  if ((unint64_t)HIDWORD(v202) + v112 - 1 >= HIDWORD(v202))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195FAA370);
                  }
                  if ((unint64_t)HIDWORD(v199) - 1 + v112 >= HIDWORD(v199))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195FAA378);
                  }
                  if (*(_QWORD *)&v115[8 * v112] != *(_QWORD *)&v114[8 * v112])
                    break;
                  if (-v113 == --v112)
                  {
                    v116 = HIDWORD(v202) - v113;
                    goto LABEL_194;
                  }
                }
                if (!v112)
                  goto LABEL_210;
                v116 = HIDWORD(v202) + v112;
                v113 = -v112;
LABEL_194:
                v117 = (uint64_t *)((char *)v201 + 8 * v116);
                v118 = 8 * HIDWORD(v202) - 8 * v116;
                do
                {
                  v119 = *v117;
                  *v117 = 0;
                  if (v119)
                  {
                    if (*(_DWORD *)(v119 + 24) == 2)
                    {
                      if ((*(_WORD *)(v119 + 30) & 0x400) == 0)
                      {
                        v195 = v116;
                        WebCore::Node::removedLastRef((WebCore::Node *)v119, v25);
                        v116 = v195;
                      }
                    }
                    else
                    {
                      *(_DWORD *)(v119 + 24) -= 2;
                    }
                  }
                  ++v117;
                  v118 -= 8;
                }
                while (v118);
                HIDWORD(v202) = v116;
                v109 = HIDWORD(v199) - v113;
                v154 = (char *)v198 + 8 * HIDWORD(v199);
                v155 = -8 * v113;
                do
                {
                  v156 = *(_QWORD *)&v154[v155];
                  *(_QWORD *)&v154[v155] = 0;
                  if (v156)
                  {
                    if (*(_DWORD *)(v156 + 24) == 2)
                    {
                      if ((*(_WORD *)(v156 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v156, v25);
                    }
                    else
                    {
                      *(_DWORD *)(v156 + 24) -= 2;
                    }
                  }
                  v155 += 8;
                }
                while (v155);
LABEL_210:
                HIDWORD(v199) = v109;
              }
            }
          }
          v122 = *(_QWORD *)(a1 + 216);
          if (v122)
          {
            *(_DWORD *)(v122 + 24) += 2;
            WebCore::Element::dispatchMouseEvent(v122, a4, (WebCore *)(v190 + 155), 0, *(_QWORD *)(a1 + 208), 0);
            if (*(_DWORD *)(v122 + 24) == 2)
            {
              if ((*(_WORD *)(v122 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v122, v25);
            }
            else
            {
              *(_DWORD *)(v122 + 24) -= 2;
            }
          }
          if (HIDWORD(v202))
          {
            v123 = (uint64_t *)v201;
            v124 = (uint64_t *)((char *)v201 + 8 * HIDWORD(v202));
            do
            {
              if ((v76 & 1) == 0)
              {
                v125 = *(_QWORD *)(*v123 + 16);
                if ((v125 & 0x1000000000000) == 0)
                  goto LABEL_219;
                v126 = v125 & 0xFFFFFFFFFFFFLL;
                v127 = *(unsigned int *)(v126 + 28);
                if (!(_DWORD)v127)
                  goto LABEL_219;
                v128 = *(_QWORD **)(v126 + 16);
                v129 = 32 * v127;
                v130 = v129;
                v131 = v128;
                while (*v131 != *v187)
                {
                  v131 += 4;
                  v130 -= 32;
                  if (!v130)
                  {
                    while (*v128 != *(_QWORD *)v74)
                    {
                      v128 += 4;
                      v129 -= 32;
                      if (!v129)
                        goto LABEL_219;
                    }
                    break;
                  }
                }
              }
              WebCore::Element::dispatchMouseEvent(*v123, a4, v74, 0, *(_QWORD *)(a1 + 208), 0);
LABEL_219:
              ++v123;
            }
            while (v123 != v124);
          }
          v132 = *(_QWORD *)(a1 + 208);
          v10 = v197;
          v15 = v196;
          if (v132)
          {
            *(_DWORD *)(v132 + 24) += 2;
            WebCore::Element::dispatchMouseEvent(v132, a4, (WebCore *)(v190 + 156), 0, *(_QWORD *)(a1 + 216), 0);
            if (*(_DWORD *)(v132 + 24) == 2)
            {
              if ((*(_WORD *)(v132 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v132, v25);
            }
            else
            {
              *(_DWORD *)(v132 + 24) -= 2;
            }
          }
          v133 = v198;
          if (HIDWORD(v199))
          {
            v134 = (WTF *)((char *)v198 + 8 * HIDWORD(v199));
            while (1)
            {
              v136 = *((_QWORD *)v134 - 1);
              v134 = (WTF *)((char *)v134 - 8);
              v135 = v136;
              if ((HasCapturingEventListeners & 1) == 0)
              {
                v137 = *(_QWORD *)(v135 + 16);
                if ((v137 & 0x1000000000000) == 0)
                  goto LABEL_236;
                v138 = v137 & 0xFFFFFFFFFFFFLL;
                v139 = *(unsigned int *)(v138 + 28);
                if (!(_DWORD)v139)
                  goto LABEL_236;
                v140 = *(_QWORD **)(v138 + 16);
                v141 = 32 * v139;
                v142 = v141;
                v143 = v140;
                while (*v143 != *v188)
                {
                  v143 += 4;
                  v142 -= 32;
                  if (!v142)
                  {
                    while (*v140 != *(_QWORD *)v189)
                    {
                      v140 += 4;
                      v141 -= 32;
                      if (!v141)
                        goto LABEL_236;
                    }
                    break;
                  }
                }
              }
              WebCore::Element::dispatchMouseEvent(v135, a4, v189, 0, *(_QWORD *)(a1 + 216), 0);
LABEL_236:
              if (v134 == v198)
              {
                v133 = v198;
                if (HIDWORD(v199))
                {
                  v144 = 8 * HIDWORD(v199);
                  do
                  {
                    v145 = *(_QWORD *)v133;
                    *(_QWORD *)v133 = 0;
                    if (v145)
                    {
                      if (*(_DWORD *)(v145 + 24) == 2)
                      {
                        if ((*(_WORD *)(v145 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v145, v25);
                      }
                      else
                      {
                        *(_DWORD *)(v145 + 24) -= 2;
                      }
                    }
                    v133 = (WTF *)((char *)v133 + 8);
                    v144 -= 8;
                  }
                  while (v144);
                  v133 = v198;
                }
                break;
              }
            }
          }
          if (v200 != (_BYTE *)v133 && v133 != 0)
          {
            LODWORD(v199) = 0;
            WTF::fastFree(v133, v25);
          }
          v147 = v201;
          if (HIDWORD(v202))
          {
            v148 = 8 * HIDWORD(v202);
            do
            {
              v149 = *(_QWORD *)v147;
              *(_QWORD *)v147 = 0;
              if (v149)
              {
                if (*(_DWORD *)(v149 + 24) == 2)
                {
                  if ((*(_WORD *)(v149 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v149, v25);
                }
                else
                {
                  *(_DWORD *)(v149 + 24) -= 2;
                }
              }
              v147 = (WTF::MonotonicTime *)((char *)v147 + 8);
              v148 -= 8;
            }
            while (v148);
            v147 = v201;
          }
          if (v203 != (_BYTE *)v147 && v147 != 0)
          {
            v201 = 0;
            LODWORD(v202) = 0;
            WTF::fastFree(v147, v25);
          }
          v69 = *(_QWORD *)(a1 + 208);
        }
        if (v69)
        {
          if (*(_QWORD *)(*(_QWORD *)(v69 + 40) + 8) == *(_QWORD *)(v10 + 296))
            goto LABEL_279;
          v151 = *(_QWORD *)(a1 + 112);
          *(_QWORD *)(a1 + 112) = v151 & 0xFDFFFFFFFFFFFFLL;
          if ((v151 & 0xFFFFFFFFFFFFLL) != 0)
            WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(a1 + 80));
          WebCore::EventHandler::clearElementUnderMouse((WebCore::EventHandler *)a1);
          v69 = *(_QWORD *)(a1 + 208);
          if (v69)
LABEL_279:
            *(_DWORD *)(v69 + 24) += 2;
        }
        result = *(_QWORD *)(a1 + 216);
        *(_QWORD *)(a1 + 216) = v69;
        if (result)
        {
          if (*(_DWORD *)(result + 24) == 2)
          {
            if ((*(_WORD *)(result + 30) & 0x400) == 0)
              result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v25);
          }
          else
          {
            *(_DWORD *)(result + 24) -= 2;
          }
        }
        goto LABEL_283;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v42 + 688))(v42))
      {
        v56 = WTF::fastMalloc((WTF *)0x30);
        v184 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v184 = off_1E3406CB0;
        v184[1] = v42;
        v170 = 1;
        *(_BYTE *)(v56 + 16) = 1;
        *(_QWORD *)v56 = off_1E341C188;
        *(_QWORD *)(v56 + 8) = v42;
        *(_QWORD *)(v56 + 24) = v184;
        *(_QWORD *)(v56 + 32) = 0;
        *(_QWORD *)(v56 + 40) = 0;
        v171 = *(_QWORD **)(v42 + 24);
        *(_QWORD *)(v42 + 24) = v56;
        if (!v171)
          goto LABEL_71;
      }
      else
      {
        v170 = 38;
        v171 = (_QWORD *)v42;
      }
      (*(void (**)(void))(*v171 + 8 * v170))();
      v56 = *(_QWORD *)(v42 + 24);
      if (!v56)
      {
        __break(0xC471u);
        JUMPOUT(0x195FA9FC4);
      }
      goto LABEL_71;
    }
    if (v36)
    {
      v61 = v41 + 64;
      if (v41 + 64 == v43)
        goto LABEL_82;
      v62 = v43;
      v63 = *(_QWORD *)(v41 + 88);
      if (v63)
      {
LABEL_81:
        (*(void (**)(uint64_t))(*(_QWORD *)v63 + 88))(v63);
        v43 = v62;
LABEL_82:
        if (!v43)
          goto LABEL_91;
        v57 = *(_QWORD *)(v43 + 24);
        if (v57)
          goto LABEL_84;
        v160 = (_QWORD *)v43;
        if ((*(unsigned int (**)(void))(*(_QWORD *)v43 + 688))())
        {
          v57 = WTF::fastMalloc((WTF *)0x30);
          v180 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v180 = off_1E3406CB0;
          v180[1] = v160;
          v161 = 1;
          *(_BYTE *)(v57 + 16) = 1;
          *(_QWORD *)v57 = off_1E341C188;
          *(_QWORD *)(v57 + 8) = v160;
          *(_QWORD *)(v57 + 24) = v180;
          *(_QWORD *)(v57 + 32) = 0;
          *(_QWORD *)(v57 + 40) = 0;
          v162 = (_QWORD *)v160[3];
          v160[3] = v57;
          if (!v162)
            goto LABEL_84;
        }
        else
        {
          v161 = 38;
          v162 = v160;
        }
        (*(void (**)(void))(*v162 + 8 * v161))();
        v57 = v160[3];
        if (!v57)
        {
          __break(0xC471u);
          JUMPOUT(0x195FA9E30);
        }
        goto LABEL_84;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v61 + 688))(v41 + 64))
      {
        v63 = WTF::fastMalloc((WTF *)0x30);
        v179 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v179 = off_1E3406CB0;
        v179[1] = v61;
        v159 = 1;
        *(_BYTE *)(v63 + 16) = 1;
        *(_QWORD *)v63 = off_1E341C188;
        *(_QWORD *)(v63 + 8) = v61;
        *(_QWORD *)(v63 + 24) = v179;
        *(_QWORD *)(v63 + 32) = 0;
        *(_QWORD *)(v63 + 40) = 0;
        v61 = *(_QWORD *)(v41 + 88);
        *(_QWORD *)(v41 + 88) = v63;
        if (!v61)
          goto LABEL_81;
      }
      else
      {
        v159 = 38;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8 * v159))(v61);
      v63 = *(_QWORD *)(v41 + 88);
      if (!v63)
      {
        __break(0xC471u);
        JUMPOUT(0x195FA9DE0);
      }
      goto LABEL_81;
    }
    if (!v42)
    {
LABEL_88:
      v57 = *(_QWORD *)(v41 + 88);
      if (v57)
      {
LABEL_89:
        v64 = 12;
        goto LABEL_90;
      }
      v163 = (_QWORD *)(v41 + 64);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v41 + 64) + 688))(v41 + 64))
      {
        v57 = WTF::fastMalloc((WTF *)0x30);
        v181 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v181 = off_1E3406CB0;
        v181[1] = v163;
        v164 = 1;
        *(_BYTE *)(v57 + 16) = 1;
        *(_QWORD *)v57 = off_1E341C188;
        *(_QWORD *)(v57 + 8) = v163;
        *(_QWORD *)(v57 + 24) = v181;
        *(_QWORD *)(v57 + 32) = 0;
        *(_QWORD *)(v57 + 40) = 0;
        v163 = *(_QWORD **)(v41 + 88);
        *(_QWORD *)(v41 + 88) = v57;
        if (!v163)
          goto LABEL_89;
      }
      else
      {
        v164 = 38;
      }
      (*(void (**)(_QWORD *))(*v163 + 8 * v164))(v163);
      v57 = *(_QWORD *)(v41 + 88);
      if (!v57)
      {
        __break(0xC471u);
        JUMPOUT(0x195FA9EACLL);
      }
      goto LABEL_89;
    }
    v65 = *(_QWORD *)(v42 + 24);
    if (!v65)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v42 + 688))(v42))
      {
        v65 = WTF::fastMalloc((WTF *)0x30);
        v182 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v182 = off_1E3406CB0;
        v182[1] = v42;
        v165 = 1;
        *(_BYTE *)(v65 + 16) = 1;
        *(_QWORD *)v65 = off_1E341C188;
        *(_QWORD *)(v65 + 8) = v42;
        *(_QWORD *)(v65 + 24) = v182;
        *(_QWORD *)(v65 + 32) = 0;
        *(_QWORD *)(v65 + 40) = 0;
        v166 = *(_QWORD **)(v42 + 24);
        *(_QWORD *)(v42 + 24) = v65;
        if (!v166)
          goto LABEL_87;
      }
      else
      {
        v165 = 38;
        v166 = (_QWORD *)v42;
      }
      (*(void (**)(void))(*v166 + 8 * v165))();
      v65 = *(_QWORD *)(v42 + 24);
      if (!v65)
      {
        __break(0xC471u);
        JUMPOUT(0x195FA9EFCLL);
      }
    }
LABEL_87:
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 96))(v65);
    if (v41 + 64 == v42)
      goto LABEL_91;
    goto LABEL_88;
  }
  v33 = *(_DWORD *)v32 + 1;
  *(_DWORD *)v32 = v33;
  if (!v32[151])
  {
    v157 = (WebCore::ImageOverlayController *)WTF::fastMalloc((WTF *)0x48);
    v201 = WebCore::ImageOverlayController::ImageOverlayController(v157, (WebCore::Page *)v32);
    std::unique_ptr<WebCore::ImageOverlayController>::operator=[abi:sn180100](v32 + 151, &v201);
    result = (uint64_t)std::unique_ptr<WebCore::ImageOverlayController>::~unique_ptr[abi:sn180100](&v201, v158);
    v33 = *(_DWORD *)v32;
  }
  v34 = v33 - 1;
  if (v34)
  {
    *(_DWORD *)v32 = v34;
    goto LABEL_39;
  }
  WebCore::Page::~Page((uint64_t)v32);
  result = WTF::fastFree(v120, v121);
  if (a5)
    goto LABEL_40;
LABEL_283:
  if ((v15 & 1) == 0)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v7, v25);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  if (v10)
  {
    do
    {
      v152 = __ldaxr(v11);
      v153 = v152 - 1;
    }
    while (__stlxr(v153, v11));
    if (!v153)
    {
      atomic_store(1u, v11);
      v172 = (WTF::MonotonicTime *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v172 = off_1E31FE290;
      *((_QWORD *)v172 + 1) = v11;
      v201 = v172;
      WTF::ensureOnMainThread();
      result = (uint64_t)v201;
      v201 = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void WebCore::EventHandler::handleMouseReleaseEvent(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  int v21;
  int v22;
  WTF *v23;
  void *v24;
  uint64_t v25;
  int v26;
  __int128 v27;
  int v28;
  WebCore *Ref;
  void *v30;
  const WebCore::IntPoint *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  WebCore::ScrollView *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  int v40;
  float v41;
  float v42;
  uint64_t v43;
  BOOL v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  unsigned int v51;
  unint64_t StatusReg;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WebCore *v61;
  void *v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  unint64_t v76;
  WebCore::ScrollView *v77;
  WebCore::ScrollView *v78;
  unint64_t v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  WebCore *v83;
  _QWORD *v84;
  uint64_t v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  WebCore::Node *v95;
  WebCore *v96;
  WAKView *v97;
  int v98;
  int v99;
  uint64_t v100;
  WebCore::Node *v101;
  _DWORD *v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int *v107;
  unsigned int v108;
  uint64_t v109;
  int v110;
  _DWORD *v111;
  int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  WTF *v119;
  char v120;
  void (*v121)(WebCore::ScrollView *);
  WebCore::ScrollView *v122;
  unint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  __int128 v130;
  int v131;
  unint64_t v132;
  uint64_t v133;
  int v134;
  float v135;
  float v136;
  uint64_t v137;
  int v139;
  int v140;
  uint64_t v141;
  unsigned int *v142;
  unsigned int v143;
  unsigned int v144;
  uint64_t v145;
  unsigned int *v146;
  unsigned int v147;
  unsigned int v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  WebCore *v151;
  _QWORD *v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  unint64_t v158;
  int *v159;
  unint64_t v160;
  int v161;
  unint64_t v162;
  char v163;
  WebCore *v164;
  WebCore *v165;
  uint64_t v166;
  unint64_t v167;
  WebCore *v168;
  uint64_t v169;
  _QWORD v170[4];
  _QWORD v171[13];
  WTF::StringImpl *v172;
  uint64_t v173;
  WebCore::Node *v174;
  int v175;
  int v176;
  __int128 v177;
  __int128 v178;
  uint64_t v179;

  v4 = a1;
  v179 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
  v7 = (unsigned int *)(v6 + 1);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = (_DWORD *)v6[36];
  if (v9)
    ++v9[2];
  v10 = *(_QWORD *)(*(_QWORD *)(v6[37] + 3064) + 248);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 40))(v10, 0);
  v11 = *(_QWORD *)(v6[3] + 8);
  v12 = *(_DWORD *)v11 + 1;
  *(_DWORD *)v11 = v12;
  v13 = *(_QWORD *)(v11 + 1232);
  v14 = *(unsigned int *)(v13 + 60);
  if ((_DWORD)v14)
  {
    v15 = v4;
    v16 = v9;
    v17 = a3;
    v18 = *(_QWORD *)(v13 + 48) - 8;
    v19 = 8 * v14;
    do
    {
      v20 = v19 != 0;
      if (!v19)
        break;
      v21 = WebCore::PageOverlay::mouseEvent(*(WebCore::PageOverlay **)(v18 + v19), a2);
      v19 -= 8;
    }
    while (!v21);
    v12 = *(_DWORD *)v11;
    a3 = v17;
    v9 = v16;
    v4 = v15;
  }
  else
  {
    v20 = 0;
  }
  v22 = v12 - 1;
  if (v22)
  {
    *(_DWORD *)v11 = v22;
    if (v20)
    {
LABEL_13:
      *(_BYTE *)a3 = 1;
      *(_DWORD *)(a3 + 24) = 0;
      goto LABEL_62;
    }
  }
  else
  {
    WebCore::Page::~Page(v11);
    WTF::fastFree(v23, v24);
    if (v20)
      goto LABEL_13;
  }
  v25 = v6[37];
  if (v25)
  {
    *(_DWORD *)(v25 + 24) += 2;
    v26 = *(unsigned __int8 *)(a2 + 8);
    v27 = *(_OWORD *)(a2 + 32);
    v177 = *(_OWORD *)(a2 + 16);
    v178 = v27;
    if (v26 == 6)
      v28 = 1;
    else
      v28 = 2;
    Ref = (WebCore *)WebCore::UserGestureIndicator::UserGestureIndicator(&v169, 257, v25, v28, 0, &v177, 1);
    if (*(_DWORD *)(v25 + 24) == 2)
    {
      if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
        Ref = (WebCore *)WebCore::Node::removedLastRef((WebCore::Node *)v25, v30);
    }
    else
    {
      *(_DWORD *)(v25 + 24) -= 2;
    }
  }
  else
  {
    v129 = *(unsigned __int8 *)(a2 + 8);
    v130 = *(_OWORD *)(a2 + 32);
    v177 = *(_OWORD *)(a2 + 16);
    v178 = v130;
    if (v129 == 6)
      v131 = 1;
    else
      v131 = 2;
    Ref = (WebCore *)WebCore::UserGestureIndicator::UserGestureIndicator(&v169, 257, 0, v131, 0, &v177, 1);
  }
  *(_BYTE *)(v4 + 168) = 0;
  v32 = *(_QWORD *)(a2 + 52);
  v33 = *(_QWORD *)(a2 + 60);
  if (!*(_BYTE *)(v4 + 308))
    *(_BYTE *)(v4 + 308) = 1;
  v34 = (_QWORD *)(v4 + 300);
  *(_QWORD *)(v4 + 300) = v32;
  *(_QWORD *)(v4 + 312) = v33;
  if (*(_BYTE *)(v4 + 189))
  {
    *(_BYTE *)(v4 + 189) = 0;
    v35 = v6[37];
    if (v35)
      *(_DWORD *)(v35 + 24) += 2;
    if ((*(_WORD *)(v35 + 3358) & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195FAAE68);
    }
    v36 = (WebCore::ScrollView *)v6[36];
    if (v36)
    {
      ++*((_DWORD *)v36 + 2);
      v171[0] = *v34;
      v37 = WebCore::ScrollView::windowToContents(v36, (const WebCore::IntPoint *)v171, v31);
      v39 = *(_QWORD *)(v35 + 1272);
      if (v39
        && (*(_WORD *)(v39 + 28) & 0x20) != 0
        && *(_QWORD *)(*(_QWORD *)(v39 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
      {
        v40 = *(_DWORD *)(v39 + 24);
        *(_DWORD *)(v39 + 24) = v40 + 2;
        v41 = (float)(int)v37 - *(float *)(v35 + 3512);
        v42 = (float)SHIDWORD(v37) - *(float *)(v35 + 3516);
        v43 = *(_QWORD *)(v39 + 280);
        v44 = *(float *)(v43 + 28) == v41 && *(float *)(v43 + 32) == v42;
        if (!v44)
        {
          *(float *)(v43 + 28) = v41;
          *(float *)(v43 + 32) = v42;
          WebCore::SVGSVGElement::updateCurrentTranslate((WebCore::SVGSVGElement *)v39);
          v40 = *(_DWORD *)(v39 + 24) - 2;
        }
        if (v40)
        {
          *(_DWORD *)(v39 + 24) = v40;
        }
        else if ((*(_WORD *)(v39 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v39, v38);
        }
      }
      if (*((_DWORD *)v36 + 2) == 1)
        (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v36 + 8))(v36);
      else
        --*((_DWORD *)v36 + 2);
    }
    else
    {
      v171[0] = *v34;
      v132 = WebCore::ScrollView::windowToContents(0, (const WebCore::IntPoint *)v171, v31);
      v133 = *(_QWORD *)(v35 + 1272);
      if (v133
        && (*(_WORD *)(v133 + 28) & 0x20) != 0
        && *(_QWORD *)(*(_QWORD *)(v133 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
      {
        v134 = *(_DWORD *)(v133 + 24);
        *(_DWORD *)(v133 + 24) = v134 + 2;
        v135 = (float)(int)v132 - *(float *)(v35 + 3512);
        v136 = (float)SHIDWORD(v132) - *(float *)(v35 + 3516);
        v137 = *(_QWORD *)(v133 + 280);
        if (*(float *)(v137 + 28) != v135 || *(float *)(v137 + 32) != v136)
        {
          *(float *)(v137 + 28) = v135;
          *(float *)(v137 + 32) = v136;
          WebCore::SVGSVGElement::updateCurrentTranslate((WebCore::SVGSVGElement *)v133);
          v134 = *(_DWORD *)(v133 + 24) - 2;
        }
        if (v134)
        {
          *(_DWORD *)(v133 + 24) = v134;
        }
        else if ((*(_WORD *)(v133 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v133, v38);
        }
      }
    }
    if (*(_DWORD *)(v35 + 24) == 2)
    {
      if ((*(_WORD *)(v35 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v35, v38);
    }
    else
    {
      *(_DWORD *)(v35 + 24) -= 2;
    }
    v45 = 1;
    goto LABEL_60;
  }
  if (!*(_QWORD *)(v4 + 280))
  {
    v51 = *(unsigned __int8 *)(v4 + 193);
    if (v51 <= 5 && ((1 << v51) & 0x34) != 0)
    {
      *(_BYTE *)(v4 + 193) = 0;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      goto LABEL_53;
    }
    *(_BYTE *)(v4 + 193) = 0;
    v58 = *(_QWORD *)(v4 + 232);
    if (v58 && *(_QWORD *)(v58 + 8))
    {
      *(_DWORD *)(v4 + 296) = 0;
      v59 = *(_QWORD *)(v4 + 272);
      *(_QWORD *)(v4 + 272) = 0;
      if (v59)
      {
        if (*(_DWORD *)(v59 + 24) == 2)
        {
          if ((*(_WORD *)(v59 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v59, v30);
            v58 = *(_QWORD *)(v4 + 232);
            if (!v58)
            {
              v60 = 0;
              goto LABEL_78;
            }
          }
        }
        else
        {
          *(_DWORD *)(v59 + 24) -= 2;
        }
      }
      v60 = *(_QWORD *)(v58 + 8);
LABEL_78:
      Ref = (WebCore *)WebCore::Scrollbar::mouseUp(v60, a2);
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_53:
      v53 = *(_QWORD *)(StatusReg + 736);
      if (!v53 || (v54 = *(_QWORD *)(v53 + 96)) == 0)
        v54 = WebCore::threadGlobalDataSlow(Ref);
      v55 = *(_QWORD *)(v54 + 40);
      if (!v55)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v54);
        v55 = *(_QWORD *)(v54 + 40);
      }
      v49 = (uint64_t *)(v55 + 1256);
      v50 = *(_QWORD *)(v4 + 216);
      goto LABEL_59;
    }
    LODWORD(v170[0]) = 264;
    BYTE4(v170[0]) = 1;
    WebCore::EventHandler::prepareMouseEvent((uint64_t)v171, v4, (const WebCore::IntPoint *)v170, a2);
    v64 = *(_QWORD *)(v4 + 200);
    if (v64)
    {
      v65 = *(_QWORD *)(v64 + 64) & 0xFFFFFFFFFFFFLL;
      if (v65)
      {
        v44 = (*(_BYTE *)((*(_QWORD *)(v64 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3;
        v66 = (*(unsigned __int8 *)((*(_QWORD *)(v64 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
        if (!v44)
          v66 = 0;
        if (v66 == 1)
        {
          v67 = *(_DWORD *)(v65 + 16) + 1;
          *(_DWORD *)(v65 + 16) = v67;
          v68 = *(_QWORD *)(v65 + 232);
          if (v68)
          {
            if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v68 + 72))(*(_QWORD *)(v65 + 232)) & 1) != 0
              || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v68 + 80))(v68))
            {
              v61 = (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v68 + 720))(v68);
              v69 = (unsigned int *)((char *)v61 + 8);
              do
                v70 = __ldaxr(v69);
              while (__stlxr(v70 + 1, v69));
            }
            else
            {
              v61 = 0;
            }
            v67 = *(_DWORD *)(v65 + 16);
          }
          else
          {
            v61 = 0;
          }
          v168 = v61;
          if (!v67)
          {
            __break(0xC471u);
            JUMPOUT(0x195FAB1B0);
          }
          *(_DWORD *)(v65 + 16) = v67 - 1;
LABEL_99:
          if (*(_BYTE *)(v4 + 190))
            v61 = (WebCore *)WebCore::EventHandler::resetCapturingMouseEventsElement((WebCore::EventHandler *)v4, v62);
          v71 = (uint64_t)v168;
          if (v168)
          {
            v72 = (unsigned int *)((char *)v168 + 8);
            do
              v63 = __ldaxr(v72);
            while (__stlxr(v63 + 1, v72));
            if (*(_BYTE *)(v71 + 144))
              v73 = 0;
            else
              v73 = v71;
            if (*(_BYTE *)(v71 + 144))
              v74 = (_QWORD *)v71;
            else
              v74 = 0;
          }
          else
          {
            v73 = 0;
            v74 = 0;
          }
          v75 = (((int)(v175 - (v63 & 0xFFFFFFC0) + 32) >> 6) + v175 / 64);
          LODWORD(v76) = v176 + 63;
          if (v176 >= 0)
            v76 = v176;
          else
            v76 = v76;
          v167 = v75 | ((unint64_t)(((int)(v176 - (v76 & 0xFFFFFFC0) + 32) >> 6) + ((int)v76 >> 6)) << 32);
          if (v74)
          {
            v77 = *(WebCore::ScrollView **)(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 8) + 288);
            if (v77)
            {
              ++*((_DWORD *)v77 + 2);
              v78 = (WebCore::ScrollView *)v74[32];
              if (v78)
              {
                ++*((_DWORD *)v78 + 2);
                v79 = v74[4];
                v166 = v74[5];
                v170[0] = WebCore::ScrollView::contentsToRootView(v77, (const WebCore::IntPoint *)&v167);
                v61 = (WebCore *)WebCore::ScrollView::rootViewToContents(v78, (const WebCore::IntPoint *)v170);
                if (*((_DWORD *)v78 + 2) == 1)
                {
                  v165 = v61;
                  (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v78 + 8))(v78);
                  v76 = v79 >> 8;
                  v61 = v165;
                }
                else
                {
                  v76 = v79 >> 8;
                  --*((_DWORD *)v78 + 2);
                }
                LODWORD(v78) = 1;
              }
              else
              {
                LOBYTE(v79) = 0;
              }
              if (*((_DWORD *)v77 + 2) == 1)
              {
                v121 = *(void (**)(WebCore::ScrollView *))(*(_QWORD *)v77 + 8);
                v164 = v61;
                v122 = v77;
                v123 = v76;
                v121(v122);
                v76 = v123;
                v61 = v164;
              }
              else
              {
                --*((_DWORD *)v77 + 2);
              }
            }
            else
            {
              LOBYTE(v79) = 0;
              LODWORD(v78) = 0;
            }
            v80 = (unsigned int *)(v74 + 1);
            do
            {
              v81 = __ldaxr(v80);
              v82 = v81 - 1;
            }
            while (__stlxr(v82, v80));
            if (!v82)
            {
              v160 = v76;
              v83 = v61;
              atomic_store(1u, v80);
              v84 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v84 = off_1E31FE290;
              v84[1] = v80;
              v170[0] = v84;
              WTF::ensureOnMainThread();
              v85 = v170[0];
              v170[0] = 0;
              if (v85)
                (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
              v61 = v83;
              v76 = v160;
            }
          }
          else
          {
            LODWORD(v78) = 0;
            LOBYTE(v79) = 0;
          }
          if (v73)
          {
            v86 = (unsigned int *)(v73 + 8);
            do
            {
              v87 = __ldaxr(v86);
              v88 = v87 - 1;
            }
            while (__stlxr(v88, v86));
            if (!v88)
            {
              v162 = v76;
              v151 = v61;
              atomic_store(1u, v86);
              v152 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v152 = off_1E31FE290;
              v152[1] = v86;
              v170[0] = v152;
              WTF::ensureOnMainThread();
              v153 = v170[0];
              v170[0] = 0;
              if (v153)
                (*(void (**)(uint64_t))(*(_QWORD *)v153 + 8))(v153);
              v61 = v151;
              v76 = v162;
            }
          }
          if ((_DWORD)v78)
          {
            *(_QWORD *)a3 = v79 | (v76 << 8);
            *(_QWORD *)(a3 + 8) = v166;
            *(_QWORD *)(a3 + 16) = v61;
            *(_DWORD *)(a3 + 24) = 1;
LABEL_235:
            v145 = (uint64_t)v168;
            v168 = 0;
            if (v145)
            {
              v146 = (unsigned int *)(v145 + 8);
              do
              {
                v147 = __ldaxr(v146);
                v148 = v147 - 1;
              }
              while (__stlxr(v148, v146));
              if (!v148)
              {
                atomic_store(1u, v146);
                v154 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                *v154 = off_1E31FE290;
                v154[1] = v146;
                v170[0] = v154;
                WTF::ensureOnMainThread();
                v155 = v170[0];
                v170[0] = 0;
                if (v155)
                  (*(void (**)(uint64_t))(*(_QWORD *)v155 + 8))(v155);
              }
            }
            WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)&v173, v62);
            v150 = v172;
            v172 = 0;
            if (v150)
            {
              if (*(_DWORD *)v150 == 2)
                WTF::StringImpl::destroy(v150, v149);
              else
                *(_DWORD *)v150 -= 2;
            }
            goto LABEL_61;
          }
          v89 = (uint64_t)v168;
          if (v168)
          {
            if (!*((_BYTE *)v168 + 144))
            {
              v107 = (unsigned int *)((char *)v168 + 8);
              do
                v108 = __ldaxr(v107);
              while (__stlxr(v108 + 1, v107));
              v109 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 8) + 288);
              if (v109 && *(_QWORD *)(v109 + 40))
              {
                v61 = (WebCore *)WebCore::EventHandler::passSubframeEventToSubframe(v4, v171);
                if (!(_DWORD)v61)
                {
                  v163 = 0;
                  goto LABEL_138;
                }
              }
              else
              {
                WebCore::EventHandler::handleMouseReleaseEvent(v170, *(_QWORD *)(v89 + 640), v171);
              }
              *(_BYTE *)a3 = 1;
              *(_DWORD *)(a3 + 24) = 0;
LABEL_232:
              v142 = (unsigned int *)(v89 + 8);
              do
              {
                v143 = __ldaxr(v142);
                v144 = v143 - 1;
              }
              while (__stlxr(v144, v142));
              if (!v144)
              {
                atomic_store(1u, v142);
                v156 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                *v156 = off_1E31FE290;
                v156[1] = v142;
                v170[0] = v156;
                WTF::ensureOnMainThread();
                v157 = v170[0];
                v170[0] = 0;
                if (v157)
                  (*(void (**)(uint64_t))(*(_QWORD *)v157 + 8))(v157);
              }
              goto LABEL_235;
            }
            v89 = 0;
          }
          v163 = 1;
LABEL_138:
          v90 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
          v91 = *(_QWORD *)(v90 + 736);
          if (!v91 || (v92 = *(_QWORD *)(v91 + 96)) == 0)
            v92 = WebCore::threadGlobalDataSlow(v61);
          v93 = *(_QWORD *)(v92 + 40);
          if (!v93)
          {
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v92);
            v93 = *(_QWORD *)(v92 + 40);
          }
          v94 = (uint64_t *)(v93 + 1256);
          v95 = v174;
          v158 = v90;
          if (v174)
          {
            *((_DWORD *)v174 + 6) += 2;
            v159 = (int *)(v4 + 296);
            v96 = (WebCore *)WebCore::EventHandler::dispatchMouseEvent(v4, v94, (uint64_t)v95, *(_DWORD *)(v4 + 296), a2, 0);
            v98 = (int)v96;
            if (*((_DWORD *)v95 + 6) == 2)
            {
              if ((*((_WORD *)v95 + 15) & 0x400) == 0)
                v96 = (WebCore *)WebCore::Node::removedLastRef(v95, v62);
            }
            else
            {
              *((_DWORD *)v95 + 6) -= 2;
            }
          }
          else
          {
            v159 = (int *)(v4 + 296);
            v96 = (WebCore *)WebCore::EventHandler::dispatchMouseEvent(v4, v94, 0, *(_DWORD *)(v4 + 296), a2, 0);
            v98 = (int)v96;
          }
          v99 = *(unsigned __int8 *)(a2 + 48);
          v100 = *(_QWORD *)(v4 + 272);
          v161 = v98;
          if (!v100)
          {
            v101 = v174;
            if (!v174)
            {
              v103 = 0;
              goto LABEL_167;
            }
            v103 = 0;
            v111 = (_DWORD *)((char *)v174 + 24);
            v102 = (_DWORD *)((char *)v174 + 24);
            goto LABEL_164;
          }
          *(_DWORD *)(v100 + 24) += 2;
          v101 = v174;
          if (!v174)
          {
            v103 = 0;
            v112 = v161;
LABEL_168:
            if (*(_DWORD *)(v100 + 24) == 2)
            {
              v139 = v99;
              if ((*(_WORD *)(v100 + 30) & 0x400) == 0)
                v96 = (WebCore *)WebCore::Node::removedLastRef((WebCore::Node *)v100, v62);
              v99 = v139;
            }
            else
            {
              *(_DWORD *)(v100 + 24) -= 2;
            }
LABEL_170:
            LOBYTE(v113) = 0;
            if (v103 && *v159 >= 1 && v99 != 2)
            {
              v114 = *(_QWORD *)(v158 + 736);
              if (!v114 || (v115 = *(_QWORD *)(v114 + 96)) == 0)
                v115 = WebCore::threadGlobalDataSlow(v96);
              v116 = *(_QWORD *)(v115 + 40);
              if (!v116)
              {
                WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v115);
                v116 = *(_QWORD *)(v115 + 40);
              }
              v113 = WebCore::EventHandler::dispatchMouseEvent(v4, (uint64_t *)(v116 + 400), v103, *(_DWORD *)(v4 + 296), a2, 1) ^ 1;
            }
            v117 = *(_QWORD *)(v4 + 152);
            if (v117)
            {
              v118 = *(_QWORD *)(v117 + 8);
              if (v118)
              {
                *(_QWORD *)(v118 + 24) &= ~0x400uLL;
                v119 = *(WTF **)(v4 + 152);
                *(_QWORD *)(v4 + 152) = 0;
                if (v119)
                {
                  if (*(_DWORD *)v119 == 1)
                  {
                    WTF::fastFree(v119, v62);
                    if (v112)
                      goto LABEL_185;
                    goto LABEL_224;
                  }
                  --*(_DWORD *)v119;
                }
              }
            }
            if (v112)
            {
LABEL_185:
              v120 = WebCore::EventHandler::handleMouseReleaseEvent((int32x2_t *)v4, (uint64_t)v171, v97);
              goto LABEL_225;
            }
LABEL_224:
            v120 = 0;
LABEL_225:
            *(_DWORD *)(v4 + 296) = 0;
            v141 = *(_QWORD *)(v4 + 272);
            *(_QWORD *)(v4 + 272) = 0;
            if (v141)
            {
              if (*(_DWORD *)(v141 + 24) == 2)
              {
                if ((*(_WORD *)(v141 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v141, v62);
              }
              else
              {
                *(_DWORD *)(v141 + 24) -= 2;
              }
            }
            *(_BYTE *)a3 = v112 ^ 1 | v113 | v120;
            *(_DWORD *)(a3 + 24) = 0;
            if (v103)
            {
              if (*(_DWORD *)(v103 + 24) == 2)
              {
                if ((*(_WORD *)(v103 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v103, v62);
              }
              else
              {
                *(_DWORD *)(v103 + 24) -= 2;
              }
            }
            if ((v163 & 1) != 0)
              goto LABEL_235;
            goto LABEL_232;
          }
          v102 = (_DWORD *)((char *)v174 + 24);
          *((_DWORD *)v174 + 6) += 2;
          v103 = v100;
          if ((WebCore::Node *)v100 != v101)
          {
            v104 = (uint64_t *)*((_QWORD *)v101 + 5);
            if (*(_QWORD *)(*(_QWORD *)(v100 + 40) + 8) != v104[1])
            {
LABEL_150:
              v103 = 0;
              v105 = *v104;
              if (v105 && (*(_WORD *)(v105 + 28) & 0x80) != 0)
              {
                v106 = *(_QWORD *)(v105 + 200);
                if (!v106)
                  goto LABEL_153;
                v126 = *(_QWORD *)(v106 + 8);
                if (!v126)
                  goto LABEL_153;
                v103 = 0;
                v127 = **(_QWORD **)(v100 + 40);
                if (v127 && (*(_WORD *)(v127 + 28) & 0x80) != 0)
                {
                  v128 = *(_QWORD *)(v127 + 200);
                  if (v128 && v126 == *(_QWORD *)(v128 + 8))
                  {
                    v103 = v126;
                    goto LABEL_163;
                  }
LABEL_153:
                  v103 = 0;
                }
              }
LABEL_165:
              if (*v102 == 2)
              {
                v140 = v99;
                if ((*((_WORD *)v101 + 15) & 0x400) == 0)
                  v96 = (WebCore *)WebCore::Node::removedLastRef(v101, v62);
                v99 = v140;
              }
              else
              {
                *v102 -= 2;
              }
LABEL_167:
              v112 = v161;
              if (!v100)
                goto LABEL_170;
              goto LABEL_168;
            }
            v110 = v99;
            v96 = WebCore::commonInclusiveAncestor<(WebCore::TreeType)2>(v100, (uint64_t)v101);
            v99 = v110;
            v103 = (uint64_t)v96;
            if (!v96)
            {
              v104 = (uint64_t *)*((_QWORD *)v101 + 5);
              goto LABEL_150;
            }
          }
LABEL_163:
          v111 = (_DWORD *)(v103 + 24);
LABEL_164:
          *v111 += 2;
          goto LABEL_165;
        }
      }
    }
    else if (!*(_BYTE *)(v4 + 194))
    {
      v61 = (WebCore *)WebCore::EventHandler::subframeForHitTestResult((uint64_t)v171, v62, (uint64_t *)&v168);
      goto LABEL_99;
    }
    v168 = 0;
    goto LABEL_99;
  }
  v46 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v46 || (v47 = *(_QWORD *)(v46 + 96)) == 0)
    v47 = WebCore::threadGlobalDataSlow(Ref);
  v48 = *(_QWORD *)(v47 + 40);
  if (!v48)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v47);
    v48 = *(_QWORD *)(v47 + 40);
  }
  v49 = (uint64_t *)(v48 + 1256);
  v50 = *(_QWORD *)(v4 + 280);
LABEL_59:
  v45 = WebCore::EventHandler::dispatchMouseEvent(v4, v49, v50, *(_DWORD *)(v4 + 296), a2, 0) ^ 1;
LABEL_60:
  *(_BYTE *)a3 = v45;
  *(_DWORD *)(a3 + 24) = 0;
LABEL_61:
  WebCore::UserGestureIndicator::~UserGestureIndicator((WebCore::UserGestureIndicator *)&v169);
LABEL_62:
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  do
  {
    v56 = __ldaxr(v7);
    v57 = v56 - 1;
  }
  while (__stlxr(v57, v7));
  if (!v57)
  {
    atomic_store(1u, v7);
    v124 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v124 = off_1E31FE290;
    v124[1] = v7;
    v171[0] = v124;
    WTF::ensureOnMainThread();
    v125 = v171[0];
    v171[0] = 0;
    if (v125)
      (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
  }
}

uint64_t WebCore::EventHandler::handleMouseForceEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  WebCore *v11;
  unint64_t StatusReg;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  WebCore *Ref;
  void *v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unsigned int v36;
  unsigned int v37;
  _QWORD *v39;
  _QWORD *v40;
  int v41;
  char v42;
  _QWORD *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v5 = (unsigned int *)(v4 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = *(_DWORD **)(v4 + 288);
  if (v7)
    ++v7[2];
  v8 = *(_QWORD *)(a2 + 52);
  v9 = *(_QWORD *)(a2 + 60);
  if (!*(_BYTE *)(a1 + 308))
    *(_BYTE *)(a1 + 308) = 1;
  *(_QWORD *)(a1 + 300) = v8;
  *(_QWORD *)(a1 + 312) = v9;
  if (*(double *)(a2 + 88) == 0.0)
    v10 = 256;
  else
    v10 = 258;
  v41 = v10;
  v42 = 1;
  WebCore::EventHandler::prepareMouseEvent((uint64_t)&v43, a1, (const WebCore::IntPoint *)&v41, a2);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v13 = *(_QWORD *)(StatusReg + 736);
  if (!v13 || (v14 = *(_QWORD *)(v13 + 96)) == 0)
    v14 = WebCore::threadGlobalDataSlow(v11);
  v15 = *(_QWORD *)(v14 + 40);
  if (!v15)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v14);
    v15 = *(_QWORD *)(v14 + 40);
  }
  v16 = (uint64_t *)(v15 + 2416);
  v17 = v46;
  if (v46)
  {
    *(_DWORD *)(v46 + 24) += 2;
    Ref = (WebCore *)WebCore::EventHandler::dispatchMouseEvent(a1, v16, v17, 0, a2, 0);
    v20 = (int)Ref;
    if (*(_DWORD *)(v17 + 24) == 2)
    {
      if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
        Ref = (WebCore *)WebCore::Node::removedLastRef((WebCore::Node *)v17, v19);
    }
    else
    {
      *(_DWORD *)(v17 + 24) -= 2;
    }
  }
  else
  {
    Ref = (WebCore *)WebCore::EventHandler::dispatchMouseEvent(a1, v16, 0, 0, a2, 0);
    v20 = (int)Ref;
  }
  v21 = v20 ^ 1u;
  v22 = *(unsigned __int8 *)(a2 + 8);
  if (v22 == 9)
  {
    v23 = *(_QWORD *)(StatusReg + 736);
    if (!v23 || (v24 = *(_QWORD *)(v23 + 96)) == 0)
      v24 = WebCore::threadGlobalDataSlow(Ref);
    v25 = *(_QWORD *)(v24 + 40);
    if (!v25)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v24);
      v25 = *(_QWORD *)(v24 + 40);
    }
    v26 = (uint64_t *)(v25 + 2424);
    v27 = v46;
    if (v46)
    {
      *(_DWORD *)(v46 + 24) += 2;
      Ref = (WebCore *)WebCore::EventHandler::dispatchMouseEvent(a1, v26, v27, 0, a2, 0);
      v28 = (int)Ref;
      if (*(_DWORD *)(v27 + 24) == 2)
      {
        if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
          Ref = (WebCore *)WebCore::Node::removedLastRef((WebCore::Node *)v27, v19);
      }
      else
      {
        *(_DWORD *)(v27 + 24) -= 2;
      }
    }
    else
    {
      Ref = (WebCore *)WebCore::EventHandler::dispatchMouseEvent(a1, v26, 0, 0, a2, 0);
      v28 = (int)Ref;
    }
    v21 = v21 | v28 ^ 1;
    v22 = *(unsigned __int8 *)(a2 + 8);
  }
  if (v22 == 10)
  {
    v29 = *(_QWORD *)(StatusReg + 736);
    if (!v29 || (v30 = *(_QWORD *)(v29 + 96)) == 0)
      v30 = WebCore::threadGlobalDataSlow(Ref);
    v31 = *(_QWORD *)(v30 + 40);
    if (!v31)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v30);
      v31 = *(_QWORD *)(v30 + 40);
    }
    v32 = (uint64_t *)(v31 + 2432);
    v33 = v46;
    if (v46)
    {
      *(_DWORD *)(v46 + 24) += 2;
      v21 = v21 | WebCore::EventHandler::dispatchMouseEvent(a1, v32, v33, 0, a2, 0) ^ 1;
      if (*(_DWORD *)(v33 + 24) == 2)
      {
        if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v33, v19);
      }
      else
      {
        *(_DWORD *)(v33 + 24) -= 2;
      }
    }
    else
    {
      v21 = v21 | WebCore::EventHandler::dispatchMouseEvent(a1, v32, 0, 0, a2, 0) ^ 1;
    }
  }
  WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)&v45, v19);
  v35 = v44;
  v44 = 0;
  if (!v35)
  {
LABEL_40:
    if (v7)
      goto LABEL_41;
    goto LABEL_43;
  }
  if (*(_DWORD *)v35 != 2)
  {
    *(_DWORD *)v35 -= 2;
    goto LABEL_40;
  }
  WTF::StringImpl::destroy(v35, v34);
  if (v7)
  {
LABEL_41:
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
    goto LABEL_43;
  }
  do
  {
LABEL_43:
    v36 = __ldaxr(v5);
    v37 = v36 - 1;
  }
  while (__stlxr(v37, v5));
  if (!v37)
  {
    atomic_store(1u, v5);
    v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v39 = off_1E31FE290;
    v39[1] = v5;
    v43 = v39;
    WTF::ensureOnMainThread();
    v40 = v43;
    v43 = 0;
    if (v40)
      (*(void (**)(_QWORD *))(*v40 + 8))(v40);
  }
  return v21;
}

uint64_t WebCore::EventHandler::dispatchDragEvent(_QWORD *a1, uint64_t *a2, WebCore::Node *a3, uint64_t a4, _DWORD *a5)
{
  unsigned int *v9;
  unsigned int v10;
  _DWORD *v11;
  double v13;
  double v14;
  _DWORD *v15;
  double v16;
  double v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WebCore *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WebCore::AXObjectCache *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WebCore::Node *v45;
  _QWORD *v46;

  v9 = (unsigned int *)(a1 + 1);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  v11 = (_DWORD *)a1[36];
  if (!v11)
  {
    v23 = 0;
    goto LABEL_9;
  }
  ++v11[2];
  v46 = *(_QWORD **)a4;
  WTF::WallTime::approximateMonotonicTime((WTF::WallTime *)&v46);
  v14 = v13;
  v15 = (_DWORD *)a1[14];
  ++*v15;
  v16 = (double)*(int *)(a4 + 68);
  v17 = (double)*(int *)(a4 + 72);
  v45 = a3;
  v18 = *(_BYTE *)(a4 + 9);
  v19 = *(_QWORD *)(a4 + 88);
  v20 = bmalloc::api::isoAllocate();
  v21 = WebCore::Event::Event(v20, 59, a2, 1, 1, 1, 1, v14);
  *(_QWORD *)(v21 + 72) = v15;
  *(_DWORD *)(v21 + 80) = 0;
  *(_BYTE *)(v21 + 84) = v18;
  *(_QWORD *)v21 = off_1E33A5D38;
  *(_QWORD *)(v21 + 88) = *(_QWORD *)(a4 + 60);
  *(_QWORD *)(v21 + 96) = 0;
  *(double *)(v21 + 104) = v16;
  *(double *)(v21 + 112) = v17;
  *(_OWORD *)(v21 + 120) = 0u;
  *(_OWORD *)(v21 + 136) = 0u;
  *(_WORD *)(v21 + 152) = 0;
  WebCore::MouseRelatedEvent::init((WebCore::MouseRelatedEvent *)v21, 0, (const WebCore::IntPoint *)(a4 + 52));
  *(_DWORD *)(v20 + 154) = 0;
  *(_WORD *)(v20 + 158) = 256;
  *(_QWORD *)(v20 + 160) = 0;
  *(_QWORD *)(v20 + 168) = v19;
  *(_QWORD *)v20 = off_1E33A3FA0;
  ++*a5;
  *(_QWORD *)(v20 + 176) = a5;
  v22 = (WebCore *)(*(uint64_t (**)(WebCore::Node *, uint64_t))(*(_QWORD *)v45 + 48))(v45, v20);
  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    v29 = a1[37];
    if (*(_BYTE *)(v29 + 3362) || *(_BYTE *)(v29 + 3405))
    {
      while (1)
      {
        v41 = *(_QWORD *)(v29 + 528);
        if (!v41)
          break;
        v42 = *(_QWORD *)(v41 + 8);
        if (!v42)
          break;
        v43 = *(_QWORD *)(v42 + 120);
        if (!v43)
          break;
        v44 = *(_QWORD *)(v43 + 8);
        if (!v44)
          break;
        v29 = *(_QWORD *)(*(_QWORD *)(v44 + 40) + 8);
      }
    }
    else
    {
      v30 = *(_QWORD *)(v29 + 528);
      if (v30)
      {
        v31 = *(_QWORD *)(v30 + 8);
        if (v31)
        {
          v32 = *(_QWORD *)(*(_QWORD *)(v31 + 128) + 8);
          if (v32)
          {
            if (!*(_BYTE *)(v32 + 144))
            {
              v33 = *(_QWORD *)(v32 + 296);
              if (v33)
                v29 = v33;
            }
          }
        }
      }
    }
    v34 = *(WebCore::AXObjectCache **)(v29 + 1488);
    if (v34)
    {
      ++*((_DWORD *)v34 + 2);
      v35 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v35 || (v36 = *(_QWORD *)(v35 + 96)) == 0)
        v36 = WebCore::threadGlobalDataSlow(v22);
      v37 = *(_QWORD **)(v36 + 40);
      if (!v37)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v36);
        v37 = *(_QWORD **)(v36 + 40);
      }
      v38 = *a2;
      if (*a2 == v37[87])
      {
        v39 = 88;
      }
      else if (v38 == v37[83])
      {
        v39 = 89;
      }
      else if (v38 == v37[84])
      {
        v39 = 90;
      }
      else if (v38 == v37[85])
      {
        v39 = 92;
      }
      else
      {
        if (v38 != v37[88])
        {
LABEL_42:
          v40 = *((_DWORD *)v34 + 2);
          if (!v40)
          {
            __break(0xC471u);
            JUMPOUT(0x195FAB9A8);
          }
          *((_DWORD *)v34 + 2) = v40 - 1;
          goto LABEL_5;
        }
        v39 = 91;
      }
      WebCore::AXObjectCache::postNotification(v34, v45, v39, 0);
      goto LABEL_42;
    }
  }
LABEL_5:
  v23 = (*(unsigned __int8 *)(v20 + 20) >> 6) & 1;
  if (*(_DWORD *)(v20 + 16) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  else
    --*(_DWORD *)(v20 + 16);
  if (v11[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
  else
    --v11[2];
  do
  {
LABEL_9:
    v24 = __ldaxr(v9);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, v9));
  if (!v25)
  {
    atomic_store(1u, v9);
    v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v27 = off_1E31FE290;
    v27[1] = v9;
    v46 = v27;
    WTF::ensureOnMainThread();
    v28 = v46;
    v46 = 0;
    if (v28)
      (*(void (**)(_QWORD *))(*v28 + 8))(v28);
  }
  return v23;
}

uint64_t WebCore::EventHandler::dispatchDragEnterOrDragOverEvent(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, int a7)
{
  uint64_t v8;
  uint64_t v11;
  void *v12;
  _DWORD *v13;
  WTF::StringImpl *v14;
  int v15;
  WTF::AtomString *v16;
  WebCore::Node *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  WTF::AtomString *v22;
  uint64_t v23;
  const WTF::AtomString *v24;
  WTF::StringImpl *v25;
  WTF *v26;
  uint64_t v27;
  WTF::StringImpl **v28;
  int v29;
  unsigned int v30;
  char v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unsigned __int8 v36;
  int v37;
  WTF *v39;
  void *v40;
  _QWORD *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF *v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl **v47;
  _BOOL4 v48;
  char hasStringOfType;
  WebCore::Node *v50;
  WTF::StringImpl **v51;
  uint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  WTF *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl **v58;

  v8 = a3;
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8);
  *(_DWORD *)(v11 + 24) += 2;
  WebCore::DataTransfer::createForUpdatingDropTarget((WebCore::Document *)v11, a5, a7, (uint64_t *)&v54);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v12);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  v13 = v54;
  if ((WebCore::EventHandler::dispatchDragEvent(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 8), a2, (WebCore::Node *)v8, a4, v54) & 1) == 0)
  {
    if ((*(_WORD *)(v8 + 28) & 8) == 0)
    {
      v8 = *(_QWORD *)(v8 + 32);
      if (!v8 || (*(_WORD *)(v8 + 28) & 8) == 0)
      {
LABEL_93:
        v15 = 0;
        v13[6] = 0;
        goto LABEL_94;
      }
    }
    *(_DWORD *)(v8 + 24) += 2;
    v16 = (WTF::AtomString *)MEMORY[0x1E0CBF2F8];
    while (1)
    {
      v17 = (WebCore::Node *)v8;
      v18 = *(_QWORD *)(v8 + 104);
      if (!v18)
        break;
      v19 = *(unsigned int *)(v18 + 4);
      if ((v19 & 1) != 0)
      {
        v20 = *(_QWORD *)(v18 + 40);
        v21 = *(unsigned int *)(v18 + 52);
        if (!v21)
          break;
      }
      else
      {
        v20 = v18 + 32;
        v21 = v19 >> 5;
        if (!(v19 >> 5))
          break;
      }
      v22 = (WTF::AtomString *)(v20 + 8);
      while (1)
      {
        v23 = *((_QWORD *)v22 - 1);
        if (v23 == WebCore::HTMLNames::webkitdropzoneAttr
          || *(_QWORD *)(v23 + 24) == *(_QWORD *)(WebCore::HTMLNames::webkitdropzoneAttr + 24)
          && *(_QWORD *)(v23 + 32) == *(_QWORD *)(WebCore::HTMLNames::webkitdropzoneAttr + 32))
        {
          break;
        }
        v22 = (WTF::AtomString *)((char *)v22 + 16);
        if (!--v21)
          goto LABEL_20;
      }
LABEL_21:
      if (*(_QWORD *)v22 && *(_DWORD *)(*(_QWORD *)v22 + 4))
      {
        v50 = (WebCore::Node *)v8;
        WTF::AtomString::convertToASCIILowercase(v22);
        WebCore::SpaceSplitStringData::create((WebCore::SpaceSplitStringData *)&v57, v24, &v55);
        v25 = v57;
        v57 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v14);
          else
            *(_DWORD *)v25 -= 2;
        }
        v26 = v55;
        v17 = (WebCore::Node *)v8;
        if (v55)
        {
          v27 = *((unsigned int *)v55 + 3);
          if ((_DWORD)v27)
          {
            v28 = (WTF::StringImpl **)((char *)v55 + 16);
            v51 = (WTF::StringImpl **)((char *)v55 + 8 * v27 + 16);
            v52 = 0;
            v53 = 8 * v27 - 8;
            while (1)
            {
              if ((MEMORY[0x19AEA53F4](*v28, "copy", 4) & 1) != 0)
              {
                v29 = 1;
              }
              else if ((MEMORY[0x19AEA53F4](*v28, "move", 4) & 1) != 0)
              {
                v29 = 16;
              }
              else
              {
                if ((MEMORY[0x19AEA53F4](*v28, "link", 4) & 1) == 0)
                {
                  if (*v28)
                  {
                    v31 = WTF::StringImpl::startsWith();
                    v32 = *v28;
                    if ((v31 & 1) != 0)
                    {
                      if (v32)
                        WTF::StringImpl::substring(v32);
                      else
                        v56 = 0;
                      v57 = (WTF::StringImpl *)&off_1E33A21A0;
                      v58 = 0;
                      (*(void (**)(_QWORD, WTF::StringImpl **, _QWORD, _QWORD))(**((_QWORD **)v13 + 4) + 120))(*((_QWORD *)v13 + 4), &v57, 0, 0);
                      if (v58)
                      {
                        v48 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>((uint64_t *)&v58, (WTF::ASCIICaseInsensitiveHash *)&v56) != 0;
                        v46 = (uint64_t)v58;
                        if (v58)
                        {
                          v45 = *((unsigned int *)v58 - 1);
                          if ((_DWORD)v45)
                          {
                            v47 = v58;
                            do
                            {
                              v35 = *v47;
                              if (*v47 != (WTF::StringImpl *)-1)
                              {
                                *v47 = 0;
                                if (v35)
                                {
                                  if (*(_DWORD *)v35 == 2)
                                    WTF::StringImpl::destroy(v35, v14);
                                  else
                                    *(_DWORD *)v35 -= 2;
                                }
                              }
                              ++v47;
                              --v45;
                            }
                            while (v45);
                          }
                          WTF::fastFree((WTF *)(v46 - 16), v14);
                        }
                      }
                      else
                      {
                        v48 = 0;
                      }
                      v33 = v56;
                      v56 = 0;
                      if (v33)
                      {
                        if (*(_DWORD *)v33 == 2)
                          WTF::StringImpl::destroy(v33, v14);
                        else
                          *(_DWORD *)v33 -= 2;
                      }
                      if (v48)
                        goto LABEL_105;
                    }
                    else if (v32 && WTF::StringImpl::startsWith())
                    {
                      if (*v28)
                        WTF::StringImpl::substring(*v28);
                      else
                        v57 = 0;
                      hasStringOfType = WebCore::DataTransfer::hasStringOfType((WebCore::DataTransfer *)v13, &v57);
                      v34 = v57;
                      v57 = 0;
                      if (v34)
                      {
                        if (*(_DWORD *)v34 == 2)
                          WTF::StringImpl::destroy(v34, v14);
                        else
                          *(_DWORD *)v34 -= 2;
                      }
                      if ((hasStringOfType & 1) != 0)
                      {
LABEL_105:
                        if (!HIDWORD(v52))
                        {
                          v41 = v28 + 1;
                          if (v28 + 1 != v51)
                          {
                            do
                            {
                              if (MEMORY[0x19AEA53F4](*v41, "copy", 4))
                                break;
                              if (MEMORY[0x19AEA53F4](*v41, "move", 4))
                                break;
                              if (MEMORY[0x19AEA53F4](*v41, "link", 4))
                                break;
                              ++v41;
                              v53 -= 8;
                            }
                            while (v53);
                          }
                        }
                        WTF::StringImpl::createWithoutCopyingNonEmpty();
                        WebCore::DataTransfer::setDropEffect((uint64_t)v13, (const WTF::String *)&v57);
                        v43 = v57;
                        v57 = 0;
                        if (v43)
                        {
                          if (*(_DWORD *)v43 == 2)
                            WTF::StringImpl::destroy(v43, v42);
                          else
                            *(_DWORD *)v43 -= 2;
                        }
                        v44 = v55;
                        v55 = 0;
                        if (v44)
                        {
                          if (*((_DWORD *)v44 + 2) == 1)
                            WebCore::SpaceSplitStringData::destroy(v44, v42);
                          else
                            --*((_DWORD *)v44 + 2);
                        }
                        if (*((_DWORD *)v50 + 6) == 2)
                        {
                          if ((*((_WORD *)v50 + 15) & 0x400) == 0)
                            WebCore::Node::removedLastRef(v50, v42);
                        }
                        else
                        {
                          *((_DWORD *)v50 + 6) -= 2;
                        }
                        goto LABEL_4;
                      }
                    }
                  }
                  goto LABEL_48;
                }
                v29 = 2;
              }
              v30 = v52;
              if (!HIDWORD(v52))
                v30 = v29;
              v52 = v30 | 0x100000000;
LABEL_48:
              ++v28;
              v53 -= 8;
              if (v28 == v51)
              {
                v26 = v55;
                v55 = 0;
                if (v26)
                  goto LABEL_88;
                goto LABEL_90;
              }
            }
          }
          v55 = 0;
LABEL_88:
          if (*((_DWORD *)v26 + 2) == 1)
            WebCore::SpaceSplitStringData::destroy(v26, v14);
          else
            --*((_DWORD *)v26 + 2);
LABEL_90:
          v17 = v50;
        }
      }
      v8 = *((_QWORD *)v17 + 4);
      if (v8)
      {
        if ((*(_WORD *)(v8 + 28) & 8) != 0)
          *(_DWORD *)(v8 + 24) += 2;
        else
          v8 = 0;
      }
      if (*((_DWORD *)v17 + 6) == 2)
      {
        if ((*((_WORD *)v17 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v17, v14);
      }
      else
      {
        *((_DWORD *)v17 + 6) -= 2;
      }
      if (!v8)
      {
        v13 = v54;
        goto LABEL_93;
      }
    }
LABEL_20:
    v22 = v16;
    goto LABEL_21;
  }
LABEL_4:
  v13 = v54;
  v54[6] = 0;
  if ((MEMORY[0x19AEA53F4](*((_QWORD *)v13 + 8), "uninitialized", 13) & 1) != 0)
  {
    v15 = 1;
LABEL_94:
    v36 = 0;
    v37 = 0;
    goto LABEL_96;
  }
  v36 = WebCore::dragOpFromIEOp((WebCore *)(v13 + 16), v14);
  v15 = 1;
  v37 = 1;
LABEL_96:
  v54 = 0;
  if (*v13 == 1)
  {
    WebCore::DataTransfer::~DataTransfer((WebCore::DataTransfer *)v13, v14);
    WTF::fastFree(v39, v40);
  }
  else
  {
    --*v13;
  }
  return (v36 << 8) | (v37 << 16) | v15;
}

unsigned int *WebCore::EventHandler::clearDragState(WebCore::AutoscrollController **this)
{
  void *v2;
  WebCore::AutoscrollController *v3;
  WebCore::AutoscrollController *v4;
  WebCore::AutoscrollController *v5;
  unsigned int *result;

  WebCore::AutoscrollController::stopAutoscrollTimer(this[18], 0);
  if (*((_BYTE *)this + 688))
  {
    v3 = this[84];
    this[84] = 0;
    if (v3)
    {
      if (*((_DWORD *)v3 + 6) == 2)
      {
        if ((*((_WORD *)v3 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v3, v2);
      }
      else
      {
        *((_DWORD *)v3 + 6) -= 2;
      }
    }
    v4 = this[82];
    this[82] = 0;
    if (v4)
    {
      if (*((_DWORD *)v4 + 6) == 2)
      {
        if ((*((_WORD *)v4 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v4, v2);
      }
      else
      {
        *((_DWORD *)v4 + 6) -= 2;
      }
    }
    *((_BYTE *)this + 688) = 0;
  }
  v5 = this[87];
  this[87] = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 6) == 2)
    {
      if ((*((_WORD *)v5 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v5, v2);
    }
    else
    {
      *((_DWORD *)v5 + 6) -= 2;
    }
  }
  result = (unsigned int *)this[25];
  this[25] = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result, v2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  *((_BYTE *)this + 194) = 0;
  *((_BYTE *)this + 706) = 0;
  *((_BYTE *)this + 792) = 0;
  return result;
}

unsigned int *WebCore::EventHandler::setCapturingMouseEventsElement(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *result;

  v3 = *a2;
  *a2 = 0;
  result = *(unsigned int **)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v3;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  *(_BYTE *)(a1 + 194) = 0;
  *(_BYTE *)(a1 + 190) = 0;
  return result;
}

unsigned int *WebCore::EventHandler::pointerCaptureElementDidChange(WebCore::EventHandler *this, WebCore::Element *a2)
{
  unsigned int *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = (unsigned int *)*((_QWORD *)this + 25);
  if (result != (unsigned int *)a2)
  {
    if (a2)
      *((_DWORD *)a2 + 6) += 2;
    *((_QWORD *)this + 25) = a2;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
      }
      else
      {
        result[6] -= 2;
      }
    }
    *((_BYTE *)this + 194) = 0;
    *((_BYTE *)this + 190) = 0;
    v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v5 || (v6 = *(_QWORD *)(v5 + 96)) == 0)
      v6 = WebCore::threadGlobalDataSlow((WebCore *)result);
    v7 = *(_QWORD *)(v6 + 40);
    if (!v7)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v6);
      v7 = *(_QWORD *)(v6 + 40);
    }
    return (unsigned int *)WebCore::EventHandler::updateMouseEventTargetNode((uint64_t)this, (void *)(v7 + 952), (uint64_t)a2, (uint64_t)this + 464, 1);
  }
  return result;
}

uint64_t WebCore::EventHandler::textRecognitionCandidateElement@<X0>(WebCore::EventHandler *this@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int16 v11;

  result = *((_QWORD *)this + 26);
  if (!result)
  {
    *a3 = 0;
    return result;
  }
  *(_DWORD *)(result + 24) += 2;
  v5 = **(_QWORD **)(result + 40);
  if (v5)
    v6 = (*(_WORD *)(v5 + 28) & 0x80) == 0;
  else
    v6 = 1;
  if (!v6 && (v7 = *(_QWORD *)(v5 + 200)) != 0 && (v8 = *(_QWORD *)(v7 + 8)) != 0)
  {
    *(_DWORD *)(v8 + 24) += 2;
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  else
  {
    v8 = result;
  }
  result = WebCore::Node::computeEditability(v8, 0, 1);
  if (!(_DWORD)result && (*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      result = 105;
      __break(0xC471u);
      return result;
    }
    if ((*(_BYTE *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3
      && (*(_BYTE *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) & 1) != 0)
    {
      v11 = *(_WORD *)(v8 + 28);
      if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 40) + 8) + 680) + 704) & 0x8000000000000000) != 0)
      {
        if ((v11 & 0x10) == 0
          || *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::videoTag + 24)
          && (*(_DWORD *)(v8 + 1265) & 0x400) != 0)
        {
          goto LABEL_25;
        }
      }
      else if ((v11 & 0x10) == 0)
      {
        goto LABEL_25;
      }
      if (*(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
      {
LABEL_25:
        *a3 = v8;
        return result;
      }
    }
  }
  *a3 = 0;
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v8, v9);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::hierarchyHasCapturingEventListeners(uint64_t this, WebCore::Element *a2, const WTF::AtomString *a3, const WTF::AtomString *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (!this)
    return this;
  v6 = this;
  *(_DWORD *)(this + 24) += 2;
  while (1)
  {
    v7 = v6;
    v8 = *(_QWORD *)(v6 + 16);
    if ((v8 & 0x1000000000000) == 0)
      goto LABEL_4;
    v16 = v8 & 0xFFFFFFFFFFFFLL;
    v17 = *(unsigned int *)(v16 + 28);
    if (!(_DWORD)v17)
      goto LABEL_4;
    v18 = *(_QWORD *)(v16 + 16);
    v19 = 32 * v17;
    v20 = v19;
    v21 = v18;
    while (*(_QWORD *)v21 != *(_QWORD *)a2)
    {
      v21 += 32;
      v20 -= 32;
      if (!v20)
        goto LABEL_24;
    }
    v23 = *(unsigned int *)(v21 + 20);
    if ((_DWORD)v23)
      break;
LABEL_24:
    while (*(_QWORD *)v18 != *(_QWORD *)a3)
    {
      v18 += 32;
      v19 -= 32;
      if (!v19)
        goto LABEL_4;
    }
    v26 = *(unsigned int *)(v18 + 20);
    if ((_DWORD)v26)
    {
      v27 = *(_QWORD *)(v18 + 8);
      v28 = 8 * v26;
      while ((*(_BYTE *)(*(_QWORD *)v27 + 4) & 1) == 0)
      {
        v27 += 8;
        v28 -= 8;
        if (!v28)
          goto LABEL_4;
      }
      goto LABEL_42;
    }
LABEL_4:
    v9 = (uint64_t *)(v6 + 32);
    v10 = *(_QWORD *)(v6 + 32);
    if (!v10
      || (*(_WORD *)(v10 + 28) & 8) == 0
      || (v11 = *(_QWORD *)(v10 + 72) & 0xFFFFFFFFFFFFLL) == 0
      || (v13 = *(_QWORD *)(v11 + 88)) == 0
      || (v14 = *(_QWORD *)(v13 + 224)) == 0
      || (v15 = (*(uint64_t (**)(uint64_t, uint64_t, const WTF::AtomString *, const WTF::AtomString *))(*(_QWORD *)v14 + 16))(v14, v6, a3, a4), v9 = (uint64_t *)(v6 + 32), v7 = v6, (v6 = v15) == 0))
    {
      if ((*(_WORD *)(v7 + 28) & 0x80) != 0)
      {
        v22 = *(_QWORD *)(v7 + 200);
        if (!v22)
        {
          v6 = 0;
LABEL_29:
          v12 = 1;
          goto LABEL_10;
        }
        v9 = (uint64_t *)(v22 + 8);
      }
      v6 = *v9;
      if (!*v9)
        goto LABEL_29;
    }
    v12 = 0;
    *(_DWORD *)(v6 + 24) += 2;
LABEL_10:
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
    if ((v12 & 1) != 0)
      return 0;
  }
  v24 = *(_QWORD *)(v21 + 8);
  v25 = 8 * v23;
  while ((*(_BYTE *)(*(_QWORD *)v24 + 4) & 1) == 0)
  {
    v24 += 8;
    v25 -= 8;
    if (!v25)
      goto LABEL_24;
  }
LABEL_42:
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  return 1;
}

uint64_t WebCore::EventHandler::wheelEventWasProcessedByMainThread(uint64_t result, uint64_t a2, char a3)
{
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  int v11;
  BOOL v12;
  int v13;
  void *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  uint64_t v22;

  v4 = (_WORD *)(result + 707);
  if (!*(_BYTE *)(result + 708))
  {
    v11 = *(unsigned __int8 *)(a2 + 92);
    v12 = v11 == 32 || v11 == 1;
    if (v12 && (a3 & 1) != 0)
      *v4 = ((a3 & 2) == 0) | 0x100;
  }
  v5 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8);
  v6 = *(_QWORD *)(v5 + 24);
  if (v6)
  {
    result = *(_QWORD *)(v6 + 8);
    if (result)
    {
      v7 = *(_DWORD **)(v5 + 288);
      if (v7)
        ++v7[2];
      result = WebCore::Page::scrollingCoordinator((WebCore::Page *)result);
      if (!result)
        goto LABEL_41;
      v8 = (_QWORD *)result;
      v9 = *(_QWORD *)(result + 8);
      if (__ldaxr((unsigned __int8 *)v9))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v9))
      {
        goto LABEL_18;
      }
      MEMORY[0x19AEA534C](v9);
LABEL_18:
      ++*(_QWORD *)(v9 + 8);
      v13 = __ldxr((unsigned __int8 *)v9);
      if (v13 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v9))
        {
LABEL_23:
          result = (*(uint64_t (**)(_QWORD *, _DWORD *))(*v8 + 40))(v8, v7);
          if ((_DWORD)result)
            result = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v8 + 224))(v8, a2, (unsigned __int16)*v4);
          v15 = v8[1];
          if (__ldaxr((unsigned __int8 *)v15))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v15))
          {
            goto LABEL_29;
          }
          result = MEMORY[0x19AEA534C](v15);
LABEL_29:
          v17 = *(_QWORD *)(v15 + 8);
          v18 = v17 - 1;
          *(_QWORD *)(v15 + 8) = v17 - 1;
          if (v17 == 1)
          {
            v22 = *(_QWORD *)(v15 + 16);
            v19 = *(_QWORD *)(v15 + 24);
            *(_QWORD *)(v15 + 24) = 0;
            v20 = v22 != 0;
          }
          else
          {
            v19 = 0;
            v20 = 1;
          }
          v21 = __ldxr((unsigned __int8 *)v15);
          if (v21 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v15))
            {
              if (!v18)
                goto LABEL_37;
              goto LABEL_41;
            }
          }
          else
          {
            __clrex();
          }
          result = WTF::Lock::unlockSlow((WTF::Lock *)v15);
          if (!v18)
          {
LABEL_37:
            if (v19)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
            if (!v20)
              result = WTF::fastFree((WTF *)v15, v14);
          }
LABEL_41:
          if (v7)
          {
            if (v7[2] == 1)
              return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
            else
              --v7[2];
          }
          return result;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v9);
      goto LABEL_23;
    }
  }
  return result;
}

uint64_t WebCore::EventHandler::handleWheelEvent@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  int v9;
  BOOL v10;
  uint64_t result;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v14;
  char v15;
  _QWORD *v16;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v7 = (unsigned int *)(v6 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = a2[92];
  v10 = v9 == 32 || v9 == 1;
  if (v10 && *(_BYTE *)(a1 + 708))
    *(_BYTE *)(a1 + 708) = 0;
  v15 = 0;
  WebCore::EventHandler::handleWheelEventInternal((WebCore::IntPoint *)a2, a1, (const WebCore::IntPoint *)a3, &v15, a4);
  result = WebCore::EventHandler::wheelEventWasProcessedByMainThread(a1, (uint64_t)a2, v15);
  if (v6)
  {
    do
    {
      v12 = __ldaxr(v7);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v7));
    if (!v13)
    {
      atomic_store(1u, v7);
      v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v14 = off_1E31FE290;
      v14[1] = v7;
      v16 = v14;
      WTF::ensureOnMainThread();
      result = (uint64_t)v16;
      v16 = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void WebCore::EventHandler::handleWheelEventInternal(WebCore::IntPoint *a1@<X1>, uint64_t a2@<X0>, const WebCore::IntPoint *a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 **v17;
  unsigned __int8 *v18;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  unsigned __int8 *v25;
  int v27;
  char v28;
  WebCore::LocalFrameView *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  int8x8_t v36;
  void *v37;
  int v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  WebCore::ScrollView *v60;
  WebCore::ScrollView *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  _QWORD *v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  WTF *v72;
  WTF *v73;
  int v74;
  WTF *v75;
  void *v76;
  void (*v77)(WebCore::ScrollView *);
  WebCore::ScrollView *v78;
  unint64_t v79;
  unint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  int v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  float v90;
  float v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  unsigned int *v95;
  unsigned int v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  int v101;
  BOOL v102;
  uint64_t v103;
  _QWORD *v104;
  int32x2_t v105;
  int v106;
  _QWORD *v107;
  unint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  const WebCore::IntPoint *v115;
  _WORD *v116;
  unsigned int v117;
  char v118;
  unsigned __int8 *v121;
  int32x2_t v122[4];
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  __int16 v131;
  uint64_t v132;
  uint64_t v133;
  int32x2_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  int v140;
  char v141;
  unint64_t v142;
  _OWORD v143[4];
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;

  v148 = *MEMORY[0x1E0C80C00];
  v7 = (_QWORD *)(a2 + 300);
  v8 = a3;
  v9 = *(_QWORD **)(*(_QWORD *)(a2 + 8) + 8);
  v10 = (unsigned int *)(v9 + 1);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v12 = v9[37];
  if (!v12)
  {
    *(_BYTE *)a5 = 0;
    *(_DWORD *)(a5 + 24) = 0;
    goto LABEL_14;
  }
  *(_DWORD *)(v12 + 24) += 2;
  v13 = v9[36];
  if (!v13)
  {
    *(_BYTE *)a5 = 0;
    *(_DWORD *)(a5 + 24) = 0;
    goto LABEL_12;
  }
  v14 = *(_DWORD *)(v13 + 8);
  *(_DWORD *)(v13 + 8) = v14 + 1;
  v15 = v9[3];
  if (!v15 || (v16 = *(_QWORD *)(v15 + 8)) == 0)
  {
    *(_BYTE *)a5 = 0;
    *(_DWORD *)(a5 + 24) = 0;
    if (!v14)
      goto LABEL_150;
    goto LABEL_11;
  }
  v115 = a3;
  v116 = (_WORD *)(a2 + 707);
  v17 = *(unsigned __int8 ***)(v16 + 968);
  v121 = (unsigned __int8 *)v17;
  if (!v17)
    goto LABEL_38;
  v18 = *v17;
  if (__ldaxr(*v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, v18))
  {
    goto LABEL_19;
  }
  MEMORY[0x19AEA534C](v18);
LABEL_19:
  ++*((_QWORD *)v18 + 1);
  v22 = __ldxr(v18);
  if (v22 != 1)
  {
    __clrex();
    goto LABEL_23;
  }
  if (__stlxr(0, v18))
LABEL_23:
    WTF::Lock::unlockSlow((WTF::Lock *)v18);
  v23 = *((unsigned __int8 *)a1 + 92);
  v24 = *((unsigned __int8 *)a1 + 93);
  v25 = v121 + 24;
  if (__ldaxr(v121 + 24))
  {
    __clrex();
LABEL_27:
    MEMORY[0x19AEA534C](v25);
    goto LABEL_28;
  }
  if (__stxr(1u, v25))
    goto LABEL_27;
LABEL_28:
  if (v23 == 16 || v23 == 8)
    v121[41] = 1;
  v17 = (unsigned __int8 **)v121;
  if (v24 == 8)
    v121[43] = 1;
  v27 = __ldxr(v25);
  if (v27 == 1)
  {
    if (!__stlxr(0, v25))
      goto LABEL_38;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_38:
  *(_BYTE *)(a2 + 187) = 1;
  v117 = v8;
  v28 = *(_BYTE *)(a2 + 188);
  *(_BYTE *)(a2 + 188) = (v8 & 2) != 0;
  v29 = *(WebCore::LocalFrameView **)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) + 288);
  if (v29)
  {
    ++*((_DWORD *)v29 + 2);
    WebCore::LocalFrameView::setWasScrolledByUser(v29, (WTF::StringImpl *)1);
    if (*((_DWORD *)v29 + 2) == 1)
      (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v29 + 8))(v29);
    else
      --*((_DWORD *)v29 + 2);
  }
  v30 = *(_QWORD *)((char *)a1 + 52);
  v31 = *(_QWORD *)((char *)a1 + 60);
  if (!*(_BYTE *)(a2 + 308))
    *(_BYTE *)(a2 + 308) = 1;
  *v7 = v30;
  *(_QWORD *)(a2 + 312) = v31;
  v32 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
  if (*(_QWORD *)(*(_QWORD *)(v32 + 128) + 8) == v32)
  {
    v33 = *(_QWORD *)(*(_QWORD *)(v32 + 24) + 8);
    ++*(_DWORD *)v33;
    (*(void (**)(_QWORD, WebCore::IntPoint *))(**(_QWORD **)(v33 + 1224) + 16))(*(_QWORD *)(v33 + 1224), a1);
    if (*(_DWORD *)v33 == 1)
    {
      WebCore::Page::~Page(v33);
      WTF::fastFree(v75, v76);
    }
    else
    {
      --*(_DWORD *)v33;
    }
  }
  v140 = 259;
  v34 = 1;
  v141 = 1;
  v35 = WebCore::ScrollView::windowToContents((WebCore::ScrollView *)v13, (WebCore::IntPoint *)((char *)a1 + 52), a3);
  v122[2] = (int32x2_t)0x4000000040;
  v36 = (int8x8_t)vcgt_s32((int32x2_t)v35, (int32x2_t)0xFE000000FE000000);
  v122[0] = (int32x2_t)vorr_s8((int8x8_t)(*(_QWORD *)&v36 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)v35), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32((int32x2_t)v35, 6uLL)), v36));
  v122[1] = (int32x2_t)(v122[0].i32[0] & 0xFFFFFFC0 | ((unint64_t)((v122[0].i32[1] & 0xFFFFFFC0) >> 6) << 38));
  v122[3] = (int32x2_t)vmul_f32(vcvt_f32_s32(v122[0]), (float32x2_t)vdup_n_s32(0x3C800000u));
  v123 = (float)(int)(v122[0].i32[0] & 0xFFFFFFC0) * 0.015625;
  v124 = (float)(int)(v122[0].i32[1] & 0xFFFFFFC0) * 0.015625;
  v125 = v123 + 1.0;
  v126 = v124;
  v127 = v123 + 1.0;
  v128 = v124 + 1.0;
  v129 = v123;
  v130 = v124 + 1.0;
  v131 = 256;
  v132 = 0;
  v133 = 0;
  v139 = 0;
  v134 = v122[0];
  v135 = 0;
  v138 = 0;
  v136 = 0;
  v137 = 0;
  WebCore::Document::hitTest(v12, &v140, (WebCore::HitTestingTransformState *)v122, (uint64_t)v122);
  v39 = v132;
  if (!v132)
    goto LABEL_124;
  v118 = v28;
  while (1)
  {
    v40 = *(_WORD *)(v39 + 28);
    if ((v40 & 8) != 0)
    {
      *(_DWORD *)(v39 + 24) += 2;
      if (!v138)
        goto LABEL_121;
      v48 = v132;
      if (!v132)
      {
LABEL_101:
        v17 = (unsigned __int8 **)v121;
        if ((*(_QWORD *)(v39 + 64) & 0xFFFFFFFFFFFFLL) == 0)
          goto LABEL_121;
        if ((*(_BYTE *)((*(_QWORD *)(v39 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195FAD568);
        }
        v70 = (*(unsigned __int8 *)((*(_QWORD *)(v39 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
        if ((*(_BYTE *)((*(_QWORD *)(v39 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
          v70 = 0;
        if (v70 != 1)
          goto LABEL_121;
        v71 = *(_QWORD *)((*(_QWORD *)(v39 + 64) & 0xFFFFFFFFFFFFLL) + 0xE8);
        if (!v71)
          goto LABEL_121;
        ++*(_DWORD *)(v71 + 8);
        if (!WebCore::EventHandler::passWheelEventToWidget(a2, (uint64_t)a1, v71))
        {
          if (*(_DWORD *)(v71 + 8) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
          else
            --*(_DWORD *)(v71 + 8);
          goto LABEL_121;
        }
        v72 = *(WTF **)(v71 + 16);
        if (!v72)
        {
          v72 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v72 = 1;
          *((_QWORD *)v72 + 1) = v71;
          v73 = *(WTF **)(v71 + 16);
          *(_QWORD *)(v71 + 16) = v72;
          if (v73)
          {
            if (*(_DWORD *)v73 == 1)
            {
              WTF::fastFree(v73, v37);
              v72 = *(WTF **)(v71 + 16);
              if (!v72)
              {
                *(_BYTE *)(a2 + 187) = 0;
                *(_BYTE *)a5 = 0;
                *(_DWORD *)(a5 + 24) = 0;
                v28 = v118;
LABEL_114:
                if (*(_DWORD *)(v71 + 8) == 1)
                  (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
                else
                  --*(_DWORD *)(v71 + 8);
                goto LABEL_145;
              }
            }
            else
            {
              --*(_DWORD *)v73;
            }
          }
        }
        v74 = (*(_DWORD *)v72)++;
        *(_BYTE *)(a2 + 187) = 0;
        *(_BYTE *)a5 = *((_QWORD *)v72 + 1) != 0;
        *(_DWORD *)(a5 + 24) = 0;
        v28 = v118;
        if (v74)
          *(_DWORD *)v72 = v74;
        else
          WTF::fastFree(v72, v37);
        goto LABEL_114;
      }
      *(_DWORD *)(v132 + 24) += 2;
      v49 = *(_QWORD *)(v48 + 64) & 0xFFFFFFFFFFFFLL;
      if (v49)
      {
        v50 = (*(unsigned __int8 *)((*(_QWORD *)(v48 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
        if ((*(_BYTE *)((*(_QWORD *)(v48 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
          v50 = 0;
        if (v50 == 1)
        {
          v51 = *(_DWORD *)((*(_QWORD *)(v48 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
          *(_DWORD *)((*(_QWORD *)(v48 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v51 + 1;
          v52 = *(_QWORD *)(v49 + 232);
          if (!v52)
          {
            if (v51 != -1)
            {
              v53 = 0;
LABEL_82:
              *(_DWORD *)(v49 + 16) = v51;
LABEL_83:
              if (*(_DWORD *)(v48 + 24) == 2)
              {
                if ((*(_WORD *)(v48 + 30) & 0x400) == 0)
                {
                  v103 = v53;
                  WebCore::Node::removedLastRef((WebCore::Node *)v48, v37);
                  v53 = v103;
                }
              }
              else
              {
                *(_DWORD *)(v48 + 24) -= 2;
              }
              if (v53)
              {
                v58 = (((int)(v134.i32[0] - (v38 & 0xFFFFFFC0) + 32) >> 6) + v134.i32[0] / 64);
                LODWORD(v59) = v134.i32[1] + 63;
                if (v134.i32[1] >= 0)
                  v59 = v134.u32[1];
                else
                  v59 = v59;
                v142 = v58 | ((unint64_t)(((int)(v134.i32[1] - (v59 & 0xFFFFFFC0) + 32) >> 6)
                                                             + ((int)v59 >> 6)) << 32);
                v60 = *(WebCore::ScrollView **)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) + 288);
                if (v60)
                {
                  ++*((_DWORD *)v60 + 2);
                  v61 = *(WebCore::ScrollView **)(v53 + 256);
                  if (v61)
                  {
                    ++*((_DWORD *)v61 + 2);
                    v62 = *(_QWORD *)(v53 + 32);
                    v63 = v53;
                    v115 = *(const WebCore::IntPoint **)(v53 + 40);
                    *(_QWORD *)&v143[0] = WebCore::ScrollView::contentsToRootView(v60, (const WebCore::IntPoint *)&v142);
                    v59 = WebCore::ScrollView::rootViewToContents(v61, (const WebCore::IntPoint *)v143);
                    v64 = v62 >> 8;
                    if (*((_DWORD *)v61 + 2) == 1)
                    {
                      v114 = v59;
                      (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v61 + 8))(v61);
                      v64 = v62 >> 8;
                      v59 = v114;
                    }
                    else
                    {
                      --*((_DWORD *)v61 + 2);
                    }
                  }
                  else
                  {
                    v63 = v53;
                    v64 = 0;
                    LOBYTE(v62) = 0;
                  }
                  v53 = v63;
                  if (*((_DWORD *)v60 + 2) == 1)
                  {
                    v77 = *(void (**)(WebCore::ScrollView *))(*(_QWORD *)v60 + 8);
                    v113 = v63;
                    v78 = v60;
                    v79 = v59;
                    v80 = v64;
                    v77(v78);
                    v64 = v80;
                    v59 = v79;
                    v53 = v113;
                    if (v61)
                      goto LABEL_95;
                  }
                  else
                  {
                    --*((_DWORD *)v60 + 2);
                    if (v61)
                    {
LABEL_95:
                      *(_QWORD *)a5 = v62 | (v64 << 8);
                      *(_QWORD *)(a5 + 8) = v115;
                      *(_QWORD *)(a5 + 16) = v59;
                      *(_DWORD *)(a5 + 24) = 1;
                      v65 = (unsigned int *)(v53 + 8);
                      do
                      {
                        v66 = __ldaxr(v65);
                        v67 = v66 - 1;
                      }
                      while (__stlxr(v67, v65));
                      v17 = (unsigned __int8 **)v121;
                      if (!v67)
                      {
                        atomic_store(1u, v65);
                        v68 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                        *v68 = off_1E31FE290;
                        v68[1] = v65;
                        *(_QWORD *)&v143[0] = v68;
                        WTF::ensureOnMainThread();
                        v69 = *(_QWORD *)&v143[0];
                        *(_QWORD *)&v143[0] = 0;
                        if (v69)
                          (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
                        v17 = (unsigned __int8 **)v121;
                      }
LABEL_152:
                      v28 = v118;
                      goto LABEL_145;
                    }
                  }
                }
                v81 = (unsigned int *)(v53 + 8);
                do
                {
                  v82 = __ldaxr(v81);
                  v83 = v82 - 1;
                }
                while (__stlxr(v83, v81));
                v17 = (unsigned __int8 **)v121;
                if (!v83)
                {
                  atomic_store(1u, v81);
                  v109 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                  *v109 = off_1E31FE290;
                  v109[1] = v81;
                  *(_QWORD *)&v143[0] = v109;
                  WTF::ensureOnMainThread();
                  v110 = *(_QWORD *)&v143[0];
                  *(_QWORD *)&v143[0] = 0;
                  if (v110)
                    (*(void (**)(uint64_t))(*(_QWORD *)v110 + 8))(v110);
                  v17 = (unsigned __int8 **)v121;
                }
LABEL_121:
                if (WebCore::Element::dispatchWheelEvent((_QWORD *)v39, (uint64_t)a1, a4, (v117 >> 3) & 1))
                {
                  v34 = 0;
                  goto LABEL_123;
                }
                *(_BYTE *)(a2 + 187) = 0;
                *(_BYTE *)a5 = 1;
                *(_DWORD *)(a5 + 24) = 0;
                goto LABEL_152;
              }
              goto LABEL_101;
            }
LABEL_192:
            __break(0xC471u);
            JUMPOUT(0x195FAD548);
          }
          if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v52 + 72))(*(_QWORD *)(v49 + 232)) & 1) == 0
            && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v52 + 80))(v52))
          {
            v106 = *(_DWORD *)(v49 + 16);
            if (v106)
            {
              v53 = 0;
              v51 = v106 - 1;
              goto LABEL_82;
            }
            goto LABEL_192;
          }
          v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 720))(v52);
          v54 = (unsigned int *)(v53 + 8);
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 + 1, v54));
          v56 = *(_DWORD *)(v49 + 16);
          if (!v56)
            goto LABEL_192;
          *(_DWORD *)(v49 + 16) = v56 - 1;
          if (*(_BYTE *)(v53 + 144))
            goto LABEL_83;
          do
            v57 = __ldaxr(v54);
          while (__stlxr(v57 - 1, v54));
          if (v57 == 1)
          {
            atomic_store(1u, v54);
            v111 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v111 = off_1E31FE290;
            v111[1] = v54;
            *(_QWORD *)&v143[0] = v111;
            WTF::ensureOnMainThread();
            v112 = *(_QWORD *)&v143[0];
            *(_QWORD *)&v143[0] = 0;
            if (v112)
              (*(void (**)(uint64_t))(*(_QWORD *)v112 + 8))(v112);
          }
        }
      }
      v53 = 0;
      goto LABEL_83;
    }
    v42 = (uint64_t *)(v39 + 32);
    v41 = *(_QWORD *)(v39 + 32);
    if (v41)
    {
      if ((*(_WORD *)(v41 + 28) & 8) != 0)
      {
        v43 = *(_QWORD *)(v41 + 72) & 0xFFFFFFFFFFFFLL;
        if (v43)
        {
          v45 = *(_QWORD *)(v43 + 88);
          if (v45)
          {
            v46 = *(_QWORD *)(v45 + 224);
            if (v46)
            {
              v44 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v46 + 16))(v46, v39);
              if (v44)
                goto LABEL_54;
              v40 = *(_WORD *)(v39 + 28);
            }
          }
        }
      }
    }
    if ((v40 & 0x80) != 0)
      break;
LABEL_53:
    v44 = *v42;
LABEL_54:
    v39 = v44;
    if (!v44)
    {
      v34 = 1;
      goto LABEL_123;
    }
  }
  v47 = *(_QWORD *)(v39 + 200);
  if (v47)
  {
    v42 = (uint64_t *)(v47 + 8);
    v17 = (unsigned __int8 **)v121;
    goto LABEL_53;
  }
  v39 = 0;
  v34 = 1;
  v17 = (unsigned __int8 **)v121;
LABEL_123:
  v28 = v118;
LABEL_124:
  v84 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) + 24);
  if (v84 && *(_QWORD *)(v84 + 8))
  {
    v85 = *(unsigned __int8 *)(a2 + 188);
    v86 = *((_OWORD *)a1 + 5);
    v144 = *((_OWORD *)a1 + 4);
    v145 = v86;
    v87 = *((_OWORD *)a1 + 7);
    v146 = *((_OWORD *)a1 + 6);
    v147 = v87;
    v88 = *((_OWORD *)a1 + 1);
    v143[0] = *(_OWORD *)a1;
    v143[1] = v88;
    v89 = *((_OWORD *)a1 + 3);
    v143[2] = *((_OWORD *)a1 + 2);
    v143[3] = v89;
    v91 = *((float *)&v144 + 2);
    v90 = *((float *)&v144 + 1);
    v92 = v13 + 64;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v13 + 64) + 176))(v13 + 64))
      v90 = 0.0;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v92 + 184))(v13 + 64))
      v91 = 0.0;
    if (((*(unsigned int (**)(uint64_t))(*(_QWORD *)v92 + 176))(v13 + 64)
       || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v92 + 184))(v13 + 64))
      && ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v92 + 176))(v13 + 64)
       && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v92 + 184))(v13 + 64)
       || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v92 + 176))(v13 + 64) && v91 == 0.0
       || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v92 + 184))(v13 + 64) && v90 == 0.0))
    {
      LOBYTE(v85) = 1;
    }
    else if (v85)
    {
      *(_QWORD *)((char *)&v144 + 4) = __PAIR64__(LODWORD(v91), LODWORD(v90));
      v93 = *a4;
      v94 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
      v95 = (unsigned int *)(v94 + 8);
      do
        v96 = __ldaxr(v95);
      while (__stlxr(v96 + 1, v95));
      v97 = *(_QWORD *)(v94 + 288);
      if (v97)
      {
        ++*(_DWORD *)(v97 + 8);
        if (!*(_BYTE *)(a2 + 708))
        {
          v102 = BYTE12(v145) == 32 || BYTE12(v145) == 1;
          if (v102 && (v93 & 1) != 0)
            *v116 = ((v93 & 2) == 0) | 0x100;
        }
        LOBYTE(v85) = (*(uint64_t (**)(uint64_t, _OWORD *, _QWORD))(*(_QWORD *)(v97 + 64) + 88))(v97 + 64, v143, (unsigned __int16)*v116);
        *(_BYTE *)(a2 + 187) = 0;
        if (*(_DWORD *)(v97 + 8) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
        else
          --*(_DWORD *)(v97 + 8);
      }
      else
      {
        LOBYTE(v85) = 0;
        *(_BYTE *)(a2 + 187) = 0;
      }
      do
      {
        v98 = __ldaxr(v95);
        v99 = v98 - 1;
      }
      while (__stlxr(v99, v95));
      if (!v99)
      {
        atomic_store(1u, v95);
        v107 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v107 = off_1E31FE290;
        v107[1] = v95;
        v142 = (unint64_t)v107;
        WTF::ensureOnMainThread();
        v108 = v142;
        v142 = 0;
        if (v108)
          (*(void (**)(unint64_t))(*(_QWORD *)v108 + 8))(v108);
      }
      v17 = (unsigned __int8 **)v121;
    }
    v100 = a5;
    *(_BYTE *)a5 = v85;
  }
  else
  {
    v100 = a5;
    *(_BYTE *)a5 = 0;
  }
  *(_DWORD *)(v100 + 24) = 0;
  if ((v34 & 1) == 0)
  {
LABEL_145:
    if (*(_DWORD *)(v39 + 24) == 2)
    {
      if ((*(_WORD *)(v39 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v39, v37);
    }
    else
    {
      *(_DWORD *)(v39 + 24) -= 2;
    }
  }
  WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v122, v37);
  *(_BYTE *)(a2 + 188) = v28;
  if (v17)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WheelEventTestMonitor,(WTF::DestructionThread)0>(*v17, a1);
  v101 = *(_DWORD *)(v13 + 8);
  v14 = v101 - 1;
  if (v101 == 1)
  {
LABEL_150:
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    goto LABEL_12;
  }
LABEL_11:
  *(_DWORD *)(v13 + 8) = v14;
LABEL_12:
  if (*(_DWORD *)(v12 + 24) == 2)
  {
    if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v12, a1);
  }
  else
  {
    *(_DWORD *)(v12 + 24) -= 2;
  }
  do
  {
LABEL_14:
    v20 = __ldaxr(v10);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, v10));
  if (!v21)
  {
    atomic_store(1u, v10);
    v104 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v104 = off_1E31FE290;
    v104[1] = v10;
    v122[0] = (int32x2_t)v104;
    WTF::ensureOnMainThread();
    v105 = v122[0];
    v122[0] = 0;
    if (v105)
      (*(void (**)(int32x2_t))(**(_QWORD **)&v105 + 8))(v105);
  }
}

uint64_t WebCore::EventHandler::defaultWheelEventHandler(uint64_t this, WebCore::Node *a2, WebCore::WheelEvent *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v7;
  float v8;
  unsigned int *v9;
  int v10;
  unsigned int v11;
  double *v12;
  double v13;
  float v14;
  double *v15;
  double v16;
  float v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  _BOOL4 v23;
  uint64_t v24;
  int v25;
  _OWORD *v26;
  __int16 v27;
  int v28;
  WebCore::ScrollableArea *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  double v35;
  double v36;
  float v37;
  float v38;
  unsigned int v39;
  unsigned __int8 v40;
  char v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  _QWORD *v46;
  int v47;
  __int16 v48;
  int v49;
  _WORD *v50;
  _DWORD *v51;
  _OWORD v52[4];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v3 = this;
    v4 = *(_QWORD *)(*(_QWORD *)(this + 8) + 8);
    v5 = *(_QWORD *)(v4 + 24);
    if (v5)
    {
      if (*(_QWORD *)(v5 + 8))
      {
        if (*((_BYTE *)a3 + 352))
        {
          if (!*(_BYTE *)(this + 188))
            return this;
          v7 = *((float *)a3 + 73);
          v8 = *((float *)a3 + 74);
          v9 = (unsigned int *)(v4 + 8);
          v10 = *((unsigned __int8 *)a3 + 316);
          do
            v11 = __ldaxr(v9);
          while (__stlxr(v11 + 1, v9));
          v12 = (double *)((char *)a3 + 184);
          v13 = *((double *)a3 + 23);
          v14 = v13;
          v15 = (double *)((char *)a3 + 192);
          v16 = *((double *)a3 + 24);
          v17 = v16;
          v18 = *((_DWORD *)a3 + 5);
          v51 = (_DWORD *)((char *)a3 + 20);
          v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8) + 1224);
          v20 = 0;
          if (v19 && (v10 == 4 || v10 == 1))
          {
            v7 = *(float *)(v19 + 8);
            v8 = *(float *)(v19 + 12);
            v20 = *(_QWORD *)(v19 + 16);
          }
        }
        else
        {
          v9 = (unsigned int *)(v4 + 8);
          do
            v21 = __ldaxr(v9);
          while (__stlxr(v21 + 1, v9));
          v12 = (double *)((char *)a3 + 184);
          v13 = *((double *)a3 + 23);
          v14 = v13;
          v15 = (double *)((char *)a3 + 192);
          v16 = *((double *)a3 + 24);
          v17 = v16;
          v18 = *((_DWORD *)a3 + 5);
          v51 = (_DWORD *)((char *)a3 + 20);
          v20 = 0;
          v8 = v17;
          v7 = v14;
        }
        v22 = *((_QWORD *)a2 + 8);
        v23 = v13 != 0.0;
        if (v16 != 0.0)
          v23 = 1;
        v24 = v22 & 0xFFFFFFFFFFFFLL;
        if ((v22 & 0xFFFFFFFFFFFFLL) != 0)
        {
          while ((*(_BYTE *)(v24 + 45) & 4) == 0)
            v24 = *(_QWORD *)(*(_QWORD *)(v24 + 32) + 8);
          v25 = *(unsigned __int8 *)(v24 + 46);
          if (v25 != 18)
          {
            if (!v23)
              goto LABEL_87;
            goto LABEL_22;
          }
          v47 = *(_DWORD *)(v24 + 16);
          *(_DWORD *)(v24 + 16) = v47 + 1;
          if (v47 == -1)
          {
            this = 286;
            __break(0xC471u);
            return this;
          }
          *(_DWORD *)(v24 + 16) = v47;
          if (v23)
          {
LABEL_22:
            v26 = (_OWORD *)((char *)a3 + 224);
            v50 = (_WORD *)(this + 707);
            v27 = (((v18 >> 6) & 1) == 0) | 0x100;
            if (v7 <= 0.0)
              v28 = 1;
            else
              v28 = 3;
            v48 = v27;
            v49 = v28;
            while (1)
            {
              if (v25 == 18)
              {
                v29 = (WebCore::ScrollableArea *)(v24 + 248);
              }
              else
              {
                if ((*(_BYTE *)(v24 + 21) & 0x80) == 0)
                  goto LABEL_67;
                v29 = *(WebCore::ScrollableArea **)(*(_QWORD *)(v24 + 144) + 264);
                if (!v29)
                  goto LABEL_67;
              }
              if (*((_BYTE *)a3 + 352))
                break;
              v35 = *v12;
              v36 = *v15;
              if ((*(unsigned int (**)(WebCore::ScrollableArea *))(*(_QWORD *)v29 + 176))(v29))
                v37 = 0.0;
              else
                v37 = v35;
              if ((*(unsigned int (**)(WebCore::ScrollableArea *))(*(_QWORD *)v29 + 184))(v29))
                v38 = 0.0;
              else
                v38 = v36;
              v39 = *((_DWORD *)a3 + 52);
              if (v39 >= 3)
                v40 = 3;
              else
                v40 = 0x10003u >> (8 * v39);
              if (v37 == 0.0)
              {
                if (v38 == 0.0)
                  goto LABEL_61;
                v41 = 0;
LABEL_59:
                this = WebCore::ScrollableArea::scroll(v29, v38 > 0.0, v40, fabsf(v38));
                if ((v41 & 1) != 0)
                  goto LABEL_86;
LABEL_60:
                if ((this & 1) != 0)
                  goto LABEL_86;
                goto LABEL_61;
              }
              v42 = fabsf(v37);
              if (v37 <= 0.0)
                v43 = 2;
              else
                v43 = 3;
              this = WebCore::ScrollableArea::scroll(v29, v43, v40, v42);
              v41 = this;
              if (v38 != 0.0)
                goto LABEL_59;
              if ((this & 1) != 0)
                goto LABEL_86;
LABEL_61:
              if ((*(unsigned int (**)(WebCore::ScrollableArea *))(*(_QWORD *)v29 + 176))(v29))
                v14 = 0.0;
              if ((*(unsigned int (**)(WebCore::ScrollableArea *))(*(_QWORD *)v29 + 184))(v29))
                v17 = 0.0;
              if ((*(unsigned int (**)(WebCore::ScrollableArea *))(*(_QWORD *)v29 + 176))(v29)
                || (*(unsigned int (**)(WebCore::ScrollableArea *))(*(_QWORD *)v29 + 184))(v29))
              {
                if ((*(unsigned int (**)(WebCore::ScrollableArea *))(*(_QWORD *)v29 + 176))(v29)
                  && (this = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)v29 + 184))(v29),
                      (_DWORD)this)
                  || (this = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)v29 + 176))(v29),
                      (_DWORD)this)
                  && v17 == 0.0
                  || (this = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)v29 + 184))(v29),
                      (_DWORD)this)
                  && v14 == 0.0)
                {
LABEL_86:
                  *v51 |= 0x80u;
                  goto LABEL_87;
                }
              }
LABEL_67:
              this = (uint64_t)WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v24);
              if (this)
              {
                v24 = this;
                v25 = *(unsigned __int8 *)(this + 46);
                if (v25 != 49)
                  continue;
              }
              goto LABEL_87;
            }
            v30 = *((_OWORD *)a3 + 19);
            v53 = *((_OWORD *)a3 + 18);
            v54 = v30;
            v31 = *((_OWORD *)a3 + 21);
            v55 = *((_OWORD *)a3 + 20);
            v56 = v31;
            v32 = *((_OWORD *)a3 + 15);
            v52[0] = *v26;
            v52[1] = v32;
            v33 = *((_OWORD *)a3 + 17);
            v52[2] = *((_OWORD *)a3 + 16);
            v52[3] = v33;
            *(_QWORD *)((char *)&v53 + 4) = __PAIR64__(LODWORD(v8), LODWORD(v7));
            *(_QWORD *)((char *)&v54 + 4) = v20;
            if ((v8 == 0.0
               || WebCore::ScrollableArea::isPinnedOnSide((uint64_t)v29, 2 * (v8 <= 0.0)))
              && (v7 == 0.0 || WebCore::ScrollableArea::isPinnedOnSide((uint64_t)v29, v49)))
            {
              if (!(*(unsigned int (**)(WebCore::ScrollableArea *))(*(_QWORD *)v29 + 176))(v29)
                && !(*(unsigned int (**)(WebCore::ScrollableArea *))(*(_QWORD *)v29 + 184))(v29))
              {
                goto LABEL_61;
              }
              if (!(*(unsigned int (**)(WebCore::ScrollableArea *))(*(_QWORD *)v29 + 176))(v29)
                || !(*(unsigned int (**)(WebCore::ScrollableArea *))(*(_QWORD *)v29 + 184))(v29))
              {
                v34 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)v29 + 176))(v29);
                if ((v8 != 0.0 || !v34)
                  && (!(*(unsigned int (**)(WebCore::ScrollableArea *))(*(_QWORD *)v29 + 184))(v29)
                   || v7 != 0.0))
                {
                  goto LABEL_61;
                }
              }
              if ((*(unsigned int (**)(WebCore::ScrollableArea *))(*(_QWORD *)v29 + 176))(v29) == 2
                && (*(unsigned int (**)(WebCore::ScrollableArea *))(*(_QWORD *)v29 + 184))(v29) == 2)
              {
                goto LABEL_61;
              }
            }
            if (!*(_BYTE *)(v3 + 708) && (BYTE12(v54) == 32 || BYTE12(v54) == 1))
              *v50 = v48;
            this = (*(uint64_t (**)(WebCore::ScrollableArea *, _OWORD *, _QWORD))(*(_QWORD *)v29 + 88))(v29, v52, (unsigned __int16)*v50);
            goto LABEL_60;
          }
        }
        do
        {
LABEL_87:
          v44 = __ldaxr(v9);
          v45 = v44 - 1;
        }
        while (__stlxr(v45, v9));
        if (!v45)
        {
          atomic_store(1u, v9);
          v46 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v46 = off_1E31FE290;
          v46[1] = v9;
          *(_QWORD *)&v52[0] = v46;
          WTF::ensureOnMainThread();
          this = *(_QWORD *)&v52[0];
          *(_QWORD *)&v52[0] = 0;
          if (this)
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::EventHandler::sendContextMenuEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  WebCore::ScrollView *v8;
  const WebCore::IntPoint *v9;
  unint64_t v10;
  int8x8_t v11;
  void *v12;
  const WebCore::IntPoint *v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::Document *v16;
  uint64_t v17;
  int v18;
  WebCore::Document *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unsigned int v29;
  unsigned int v30;
  _QWORD *v32;
  _QWORD *v33;
  WebCore::Editor *v34;
  void *v35;
  void *v36;
  WebCore::Editor *v37;
  void *v38;
  WebCore::Editor *v39;
  uint64_t v40;
  void *v41;
  int v42;
  char v43;
  int8x8_t v44;
  _QWORD *v45;
  WTF::StringImpl *v46;
  int v47;
  _QWORD v48[9];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v5 = (unsigned int *)(v4 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = *(_QWORD *)(v4 + 296);
  if (!v7)
  {
    v8 = *(WebCore::ScrollView **)(v4 + 288);
    if (!v8)
    {
      v14 = 0;
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  *(_DWORD *)(v7 + 24) += 2;
  v8 = *(WebCore::ScrollView **)(v4 + 288);
  if (v8)
  {
LABEL_5:
    ++*((_DWORD *)v8 + 2);
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(v7 + 3064) + 248) + 40))(*(_QWORD *)(*(_QWORD *)(v7 + 3064) + 248), 0);
    *(_BYTE *)(a1 + 168) = 0;
    v10 = WebCore::ScrollView::windowToContents(v8, (const WebCore::IntPoint *)(a2 + 52), v9);
    v11 = (int8x8_t)vcgt_s32((int32x2_t)v10, (int32x2_t)0xFE000000FE000000);
    v44 = vorr_s8((int8x8_t)(*(_QWORD *)&v11 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)v10), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32((int32x2_t)v10, 6uLL)), v11));
    v42 = 258;
    v43 = 1;
    WebCore::Document::prepareMouseEvent(v7, (unsigned __int8 *)&v42, (unint64_t *)&v44, a2, (uint64_t)&v45);
    v14 = 0;
    if (!v50)
    {
      v15 = (uint64_t)WebCore::ScrollView::scrollbarAtPoint(v8, (const WebCore::IntPoint *)(a2 + 52), v13);
      if (v15)
      {
        v14 = 0;
      }
      else
      {
        v16 = *(WebCore::Document **)(v4 + 296);
        v17 = *((_QWORD *)v16 + 382);
        if (!v17)
        {
          v34 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
          WebCore::Editor::Editor(v34, v16);
          v15 = *((_QWORD *)v16 + 382);
          *((_QWORD *)v16 + 382) = v34;
          if (v15)
          {
            WebCore::Editor::~Editor((WebCore::Editor *)v15, v35);
            if (*(_DWORD *)v15)
            {
              *(_QWORD *)(v15 + 496) = 0;
              *(_OWORD *)(v15 + 464) = 0u;
              *(_OWORD *)(v15 + 480) = 0u;
              *(_OWORD *)(v15 + 432) = 0u;
              *(_OWORD *)(v15 + 448) = 0u;
              *(_OWORD *)(v15 + 400) = 0u;
              *(_OWORD *)(v15 + 416) = 0u;
              *(_OWORD *)(v15 + 368) = 0u;
              *(_OWORD *)(v15 + 384) = 0u;
              *(_OWORD *)(v15 + 336) = 0u;
              *(_OWORD *)(v15 + 352) = 0u;
              *(_OWORD *)(v15 + 304) = 0u;
              *(_OWORD *)(v15 + 320) = 0u;
              *(_OWORD *)(v15 + 272) = 0u;
              *(_OWORD *)(v15 + 288) = 0u;
              *(_OWORD *)(v15 + 240) = 0u;
              *(_OWORD *)(v15 + 256) = 0u;
              *(_OWORD *)(v15 + 208) = 0u;
              *(_OWORD *)(v15 + 224) = 0u;
              *(_OWORD *)(v15 + 176) = 0u;
              *(_OWORD *)(v15 + 192) = 0u;
              *(_OWORD *)(v15 + 144) = 0u;
              *(_OWORD *)(v15 + 160) = 0u;
              *(_OWORD *)(v15 + 112) = 0u;
              *(_OWORD *)(v15 + 128) = 0u;
              *(_OWORD *)(v15 + 80) = 0u;
              *(_OWORD *)(v15 + 96) = 0u;
              *(_OWORD *)(v15 + 48) = 0u;
              *(_OWORD *)(v15 + 64) = 0u;
              *(_OWORD *)(v15 + 16) = 0u;
              *(_OWORD *)(v15 + 32) = 0u;
              *(_OWORD *)v15 = 0u;
            }
            else
            {
              v15 = WTF::fastFree((WTF *)v15, v36);
            }
          }
          v17 = *((_QWORD *)v16 + 382);
        }
        if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 16) + 8) + 680) + 370))
        {
          v15 = WebCore::FrameSelection::contains(*(WebCore::FrameSelection **)(*(_QWORD *)(v4 + 296) + 3064), (const WebCore::LayoutPoint *)&v44);
          if ((v15 & 1) == 0)
          {
            v18 = 1;
            *(_BYTE *)(a1 + 180) = 1;
            if (v47 == 2)
            {
              v19 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 296);
              v20 = *((_QWORD *)v19 + 382);
              if (!v20)
              {
                v37 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
                WebCore::Editor::Editor(v37, v19);
                v39 = (WebCore::Editor *)*((_QWORD *)v19 + 382);
                *((_QWORD *)v19 + 382) = v37;
                if (v39)
                {
                  WebCore::Editor::~Editor(v39, v38);
                  if (*(_DWORD *)v40)
                  {
                    *(_QWORD *)(v40 + 496) = 0;
                    *(_OWORD *)(v40 + 464) = 0u;
                    *(_OWORD *)(v40 + 480) = 0u;
                    *(_OWORD *)(v40 + 432) = 0u;
                    *(_OWORD *)(v40 + 448) = 0u;
                    *(_OWORD *)(v40 + 400) = 0u;
                    *(_OWORD *)(v40 + 416) = 0u;
                    *(_OWORD *)(v40 + 368) = 0u;
                    *(_OWORD *)(v40 + 384) = 0u;
                    *(_OWORD *)(v40 + 336) = 0u;
                    *(_OWORD *)(v40 + 352) = 0u;
                    *(_OWORD *)(v40 + 304) = 0u;
                    *(_OWORD *)(v40 + 320) = 0u;
                    *(_OWORD *)(v40 + 272) = 0u;
                    *(_OWORD *)(v40 + 288) = 0u;
                    *(_OWORD *)(v40 + 240) = 0u;
                    *(_OWORD *)(v40 + 256) = 0u;
                    *(_OWORD *)(v40 + 208) = 0u;
                    *(_OWORD *)(v40 + 224) = 0u;
                    *(_OWORD *)(v40 + 176) = 0u;
                    *(_OWORD *)(v40 + 192) = 0u;
                    *(_OWORD *)(v40 + 144) = 0u;
                    *(_OWORD *)(v40 + 160) = 0u;
                    *(_OWORD *)(v40 + 112) = 0u;
                    *(_OWORD *)(v40 + 128) = 0u;
                    *(_OWORD *)(v40 + 80) = 0u;
                    *(_OWORD *)(v40 + 96) = 0u;
                    *(_OWORD *)(v40 + 48) = 0u;
                    *(_OWORD *)(v40 + 64) = 0u;
                    *(_OWORD *)(v40 + 16) = 0u;
                    *(_OWORD *)(v40 + 32) = 0u;
                    *(_OWORD *)v40 = 0u;
                  }
                  else
                  {
                    WTF::fastFree((WTF *)v40, v41);
                  }
                }
                v20 = *((_QWORD *)v19 + 382);
                v5 = (unsigned int *)(v4 + 8);
              }
              v21 = *(_QWORD *)(v20 + 8);
              if (v21 && (v22 = *(_QWORD *)(v21 + 8)) != 0)
                v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22) ^ 1;
              else
                v18 = 1;
            }
            WebCore::EventHandler::selectClosestContextualWordOrLinkFromHitTestResult((WebCore::EventHandler *)a1, v48, v18);
          }
        }
        v23 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v23 || (v24 = *(_QWORD *)(v23 + 96)) == 0)
          v24 = WebCore::threadGlobalDataSlow((WebCore *)v15);
        v25 = *(_QWORD *)(v24 + 40);
        if (!v25)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v24);
          v25 = *(_QWORD *)(v24 + 40);
        }
        v26 = (uint64_t *)(v25 + 496);
        v27 = v49;
        if (v49)
        {
          *(_DWORD *)(v49 + 24) += 2;
          v14 = WebCore::EventHandler::dispatchMouseEvent(a1, v26, v27, 0, a2, 0) ^ 1;
          if (*(_DWORD *)(v27 + 24) == 2)
          {
            if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v27, v12);
          }
          else
          {
            *(_DWORD *)(v27 + 24) -= 2;
          }
        }
        else
        {
          v14 = WebCore::EventHandler::dispatchMouseEvent(a1, v26, 0, 0, a2, 0) ^ 1;
        }
      }
    }
    WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v48, v12);
    v28 = v46;
    v46 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v28 -= 2;
    }
    if (*((_DWORD *)v8 + 2) == 1)
      (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v8 + 8))(v8);
    else
      --*((_DWORD *)v8 + 2);
    goto LABEL_31;
  }
  v14 = 0;
LABEL_31:
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7, (void *)a2);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  do
  {
LABEL_33:
    v29 = __ldaxr(v5);
    v30 = v29 - 1;
  }
  while (__stlxr(v30, v5));
  if (!v30)
  {
    atomic_store(1u, v5);
    v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v32 = off_1E31FE290;
    v32[1] = v5;
    v45 = v32;
    WTF::ensureOnMainThread();
    v33 = v45;
    v45 = 0;
    if (v33)
      (*(void (**)(_QWORD *))(*v33 + 8))(v33);
  }
  return v14;
}

uint64_t WebCore::EventHandler::sendContextMenuEventForKey(WebCore::EventHandler *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  WebCore::ScrollView *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::Document *v12;
  WebCore::Editor *v13;
  void *v14;
  unint64_t RectForRange;
  int v16;
  WebCore::Node *v17;
  WebCore::Node *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x8_t v26;
  uint64_t v27;
  int v28;
  __int16 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WebCore::RenderObject *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *updated;
  uint64_t v47;
  WTF::StringImpl *v48;
  int v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  unsigned int v52;
  unsigned int v53;
  WebCore::Node *v55;
  WebCore::Node *v56;
  WebCore::Editor *v57;
  void *v58;
  WebCore::Editor *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WebCore::Node *v65;
  unint64_t v66;
  WebCore::Node *v67;
  float32x2_t v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  __int16 v77;
  uint64_t v78;
  uint64_t v79;
  WebCore::Node *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  __int16 v88;
  char v89;
  char v90;
  __int16 v91;
  WebCore::Document *v92;
  WebCore::Editor *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  WTF::StringImpl *v98;
  uint64_t v99;
  __int16 v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *(WebCore::ScrollView **)(v3 + 288);
  if (v6)
  {
    ++*((_DWORD *)v6 + 2);
    v7 = *(_QWORD *)(v3 + 296);
    if (!v7)
    {
      v38 = 0;
LABEL_96:
      if (*((_DWORD *)v6 + 2) == 1)
        (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v6 + 8))(v6);
      else
        --*((_DWORD *)v6 + 2);
      goto LABEL_98;
    }
    *(_DWORD *)(v7 + 24) += 2;
    *((_BYTE *)this + 168) = 0;
    v8 = *(_QWORD *)(v7 + 1248);
    if (v8)
      *(_DWORD *)(v8 + 24) += 2;
    v9 = *(_QWORD *)(v7 + 3064);
    v10 = *(_QWORD *)(v9 + 120);
    if (v10
      && ((*(_DWORD *)(v10 + 24) += 2, WebCore::editableRootForPosition(v9 + 120, 0)) || *(_BYTE *)(v9 + 153) == 2))
    {
      v11 = v9 + 56;
      v12 = *(WebCore::Document **)(v3 + 296);
      v13 = (WebCore::Editor *)*((_QWORD *)v12 + 382);
      if (!v13)
      {
        v57 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
        WebCore::Editor::Editor(v57, v12);
        v59 = (WebCore::Editor *)*((_QWORD *)v12 + 382);
        *((_QWORD *)v12 + 382) = v57;
        if (v59)
        {
          WebCore::Editor::~Editor(v59, v58);
          if (*(_DWORD *)v60)
          {
            *(_QWORD *)(v60 + 496) = 0;
            *(_OWORD *)(v60 + 464) = 0u;
            *(_OWORD *)(v60 + 480) = 0u;
            *(_OWORD *)(v60 + 432) = 0u;
            *(_OWORD *)(v60 + 448) = 0u;
            *(_OWORD *)(v60 + 400) = 0u;
            *(_OWORD *)(v60 + 416) = 0u;
            *(_OWORD *)(v60 + 368) = 0u;
            *(_OWORD *)(v60 + 384) = 0u;
            *(_OWORD *)(v60 + 336) = 0u;
            *(_OWORD *)(v60 + 352) = 0u;
            *(_OWORD *)(v60 + 304) = 0u;
            *(_OWORD *)(v60 + 320) = 0u;
            *(_OWORD *)(v60 + 272) = 0u;
            *(_OWORD *)(v60 + 288) = 0u;
            *(_OWORD *)(v60 + 240) = 0u;
            *(_OWORD *)(v60 + 256) = 0u;
            *(_OWORD *)(v60 + 208) = 0u;
            *(_OWORD *)(v60 + 224) = 0u;
            *(_OWORD *)(v60 + 176) = 0u;
            *(_OWORD *)(v60 + 192) = 0u;
            *(_OWORD *)(v60 + 144) = 0u;
            *(_OWORD *)(v60 + 160) = 0u;
            *(_OWORD *)(v60 + 112) = 0u;
            *(_OWORD *)(v60 + 128) = 0u;
            *(_OWORD *)(v60 + 80) = 0u;
            *(_OWORD *)(v60 + 96) = 0u;
            *(_OWORD *)(v60 + 48) = 0u;
            *(_OWORD *)(v60 + 64) = 0u;
            *(_OWORD *)(v60 + 16) = 0u;
            *(_OWORD *)(v60 + 32) = 0u;
            *(_OWORD *)v60 = 0u;
          }
          else
          {
            WTF::fastFree((WTF *)v60, v61);
          }
        }
        v13 = (WebCore::Editor *)*((_QWORD *)v12 + 382);
      }
      WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)v11, &v65);
      if (!LOBYTE(v69))
      {
        __break(1u);
LABEL_78:
        v27 = 0;
LABEL_79:
        updated = WebCore::Document::updateHoverActiveState((unsigned __int8 *)v7, (unsigned __int8 *)&v87, v27, 0);
        WTF::WallTime::now((WTF::WallTime *)updated);
        v87 = v47;
        v88 = 6;
        v89 = 0;
        v90 = 0;
        v91 = 2;
        v92 = v12;
        v93 = v13;
        v95 = 0;
        v94 = 0;
        v96 = 0x3FF0000000000000;
        v97 = 1;
        {
          v48 = (WTF::StringImpl *)WebCore::mousePointerEventType(void)::mouseType;
          if (!WebCore::mousePointerEventType(void)::mouseType)
          {
LABEL_83:
            v98 = v48;
            v99 = 1;
            v100 = 0;
            v38 = WebCore::EventHandler::sendContextMenuEvent((uint64_t)this, (uint64_t)&v87);
            v51 = v98;
            v98 = 0;
            if (v51)
            {
              if (*(_DWORD *)v51 == 2)
                WTF::StringImpl::destroy(v51, v50);
              else
                *(_DWORD *)v51 -= 2;
            }
            WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)&v65, v50);
            if (*(_DWORD *)(v11 + 24) == 2)
            {
              if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
            }
            else
            {
              *(_DWORD *)(v11 + 24) -= 2;
            }
            goto LABEL_88;
          }
          v49 = *(_DWORD *)WebCore::mousePointerEventType(void)::mouseType;
        }
        else
        {
          v48 = (WTF::StringImpl *)&WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
          v49 = WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl + 2;
          WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl += 2;
          WebCore::mousePointerEventType(void)::mouseType = (uint64_t)&WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
        }
        *(_DWORD *)v48 = v49 + 2;
        goto LABEL_83;
      }
      RectForRange = WebCore::Editor::firstRectForRange(v13, (const WebCore::SimpleRange *)&v65);
      v16 = HIDWORD(v14);
      if (LOBYTE(v69))
      {
        v17 = v67;
        v67 = 0;
        if (v17)
        {
          if (*((_DWORD *)v17 + 6) == 2)
          {
            if ((*((_WORD *)v17 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v17, v14);
          }
          else
          {
            *((_DWORD *)v17 + 6) -= 2;
          }
        }
        v18 = v65;
        v65 = 0;
        if (v18)
        {
          if (*((_DWORD *)v18 + 6) == 2)
          {
            if ((*((_WORD *)v18 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v18, v14);
          }
          else
          {
            *((_DWORD *)v18 + 6) -= 2;
          }
        }
      }
      v19 = v16 + HIDWORD(RectForRange) - 1;
      if (!(v16 + HIDWORD(RectForRange)))
        v19 = 0;
      v86 = RectForRange | ((unint64_t)v19 << 32);
    }
    else
    {
      if (v8)
      {
        v37 = (WebCore::RenderObject *)(*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL);
        if (!v37 || (*(_BYTE *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 8) == 0)
        {
          v38 = 0;
LABEL_88:
          if (v10)
          {
            if (*(_DWORD *)(v10 + 24) == 2)
            {
              if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
            }
            else
            {
              *(_DWORD *)(v10 + 24) -= 2;
            }
          }
          if (v8)
          {
            if (*(_DWORD *)(v8 + 24) == 2)
            {
              if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
            }
            else
            {
              *(_DWORD *)(v8 + 24) -= 2;
            }
          }
          if (*(_DWORD *)(v7 + 24) == 2)
          {
            if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
          }
          else
          {
            *(_DWORD *)(v7 + 24) -= 2;
          }
          goto LABEL_96;
        }
        v40 = WebCore::RenderObject::absoluteBoundingBoxRect(v37, 1, 0);
        v39 = (((v41 & 0xFFFFFFFF00000000) + v40) & 0xFFFFFFFF00000000 | v40) - 0x100000000;
      }
      else
      {
        v39 = 0x100000001;
      }
      v86 = v39;
    }
    v20 = *(_QWORD *)(v3 + 288);
    if (v20)
    {
      ++*(_DWORD *)(v20 + 8);
      {
        WebCore::pointerCursor(void)::c = 1;
        xmmword_1EE2F7FC0 = 0uLL;
        qword_1EE2F7FB8 = 0;
      }
      v21 = *(_QWORD *)(v20 + 32);
      i = v20;
      if (v21)
      {
        v23 = *(_QWORD *)(v21 + 8);
        for (i = v20; v23; v23 = *(_QWORD *)(v42 + 8))
        {
          i = v23;
          v42 = *(_QWORD *)(v23 + 32);
          if (!v42)
            break;
        }
      }
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)i + 72))(i) & 1) != 0
        || (*(unsigned int (**)(uint64_t))(*(_QWORD *)i + 80))(i))
      {
        v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)i + 720))(i) + 24)
                                    + 8)
                        + 48);
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v24 + 136))(v24, &WebCore::pointerCursor(void)::c);
      }
      if (*(_DWORD *)(v20 + 8) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      else
        --*(_DWORD *)(v20 + 8);
    }
    else
    {
      {
        WebCore::pointerCursor(void)::c = 1;
        xmmword_1EE2F7FC0 = 0uLL;
        qword_1EE2F7FB8 = 0;
      }
      if (MEMORY[0x20] && (v43 = *(_QWORD *)(MEMORY[0x20] + 8)) != 0)
      {
        do
        {
          v44 = v43;
          v63 = *(_QWORD *)(v43 + 32);
          if (!v63)
            break;
          v43 = *(_QWORD *)(v63 + 8);
        }
        while (v43);
      }
      else
      {
        v44 = 0;
      }
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 72))(v44) & 1) != 0
        || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v44 + 80))(v44))
      {
        v45 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 720))(v44) + 24)
                                    + 8)
                        + 48);
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v45 + 136))(v45, &WebCore::pointerCursor(void)::c);
      }
    }
    v12 = (WebCore::Document *)WebCore::ScrollView::contentsToRootView(v6, (const WebCore::IntPoint *)&v86);
    v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(WebCore::ScrollView *))(*(_QWORD *)v6 + 720))(v6)
                                            + 24)
                                + 8)
                    + 48);
    v65 = v12;
    v66 = 0;
    v13 = (WebCore::Editor *)(*(uint64_t (**)(uint64_t, WebCore::Node **))(*(_QWORD *)v25 + 96))(v25, &v65);
    if (*(_QWORD *)(v7 + 1248))
      v11 = *(_QWORD *)(v7 + 1248);
    else
      v11 = v7;
    *(_DWORD *)(v11 + 24) += 2;
    v26 = (int8x8_t)vcgt_s32((int32x2_t)v12, (int32x2_t)0xFE000000FE000000);
    v67 = (WebCore::Node *)0x4000000040;
    v65 = (WebCore::Node *)vorr_s8((int8x8_t)(*(_QWORD *)&v26 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)v12), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32((int32x2_t)v12, 6uLL)), v26));
    v66 = v65 & 0xFFFFFFC0 | ((unint64_t)((HIDWORD(v65) & 0xFFFFFFC0) >> 6) << 38);
    v68 = vmul_f32(vcvt_f32_s32((int32x2_t)v65), (float32x2_t)vdup_n_s32(0x3C800000u));
    v69 = (float)(int)(v65 & 0xFFFFFFC0) * 0.015625;
    v70 = (float)(int)(HIDWORD(v65) & 0xFFFFFFC0) * 0.015625;
    v71 = v69 + 1.0;
    v72 = v70;
    v73 = v69 + 1.0;
    v74 = v70 + 1.0;
    v75 = v69;
    v76 = v70 + 1.0;
    v77 = 256;
    v78 = 0;
    v79 = 0;
    v85 = 0;
    v80 = v65;
    v81 = 0;
    v82 = 0;
    v83 = 0;
    v84 = 0;
    v27 = v11;
    if ((~*(unsigned __int16 *)(v11 + 28) & 0x408) == 0)
    {
      v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 368))(v11);
      v27 = v11;
      if (v28)
      {
        v62 = *(_QWORD *)(v11 + 112);
        if (!v62 || (v27 = *(_QWORD *)(v62 + 8)) == 0)
        {
          v27 = 0;
          v78 = 0;
          LODWORD(v87) = 258;
          BYTE4(v87) = 1;
          goto LABEL_79;
        }
      }
    }
    *(_DWORD *)(v27 + 24) += 2;
    v78 = v27;
    LODWORD(v87) = 258;
    BYTE4(v87) = 1;
    while (1)
    {
      v29 = *(_WORD *)(v27 + 28);
      if ((v29 & 8) != 0)
        goto LABEL_79;
      v31 = (uint64_t *)(v27 + 32);
      v30 = *(_QWORD *)(v27 + 32);
      if (v30)
      {
        if ((*(_WORD *)(v30 + 28) & 8) != 0)
        {
          v32 = *(_QWORD *)(v30 + 72) & 0xFFFFFFFFFFFFLL;
          if (v32)
          {
            v34 = *(_QWORD *)(v32 + 88);
            if (v34)
            {
              v35 = *(_QWORD *)(v34 + 224);
              if (v35)
              {
                v64 = v27;
                v33 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 16))(v35, v27);
                if (v33)
                  goto LABEL_43;
                v27 = v64;
                v29 = *(_WORD *)(v64 + 28);
              }
            }
          }
        }
      }
      if ((v29 & 0x80) != 0)
      {
        v36 = *(_QWORD *)(v27 + 200);
        if (!v36)
          goto LABEL_78;
        v31 = (uint64_t *)(v36 + 8);
      }
      v33 = *v31;
LABEL_43:
      v27 = v33;
      if (!v33)
        goto LABEL_79;
    }
  }
  v38 = 0;
  do
  {
LABEL_98:
    v52 = __ldaxr(v4);
    v53 = v52 - 1;
  }
  while (__stlxr(v53, v4));
  if (!v53)
  {
    atomic_store(1u, v4);
    v55 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v55 = off_1E31FE290;
    *((_QWORD *)v55 + 1) = v4;
    v65 = v55;
    WTF::ensureOnMainThread();
    v56 = v65;
    v65 = 0;
    if (v56)
      (*(void (**)(WebCore::Node *))(*(_QWORD *)v56 + 8))(v56);
  }
  return v38;
}

WTF *WebCore::EventHandler::resizeLayerDestroyed(WebCore::EventHandler *this, void *a2)
{
  WTF *result;

  result = (WTF *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::EventHandler::handleAccessKey(WebCore::EventHandler *this, const WebCore::PlatformKeyboardEvent *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  void *v12;
  unsigned int v13;
  unsigned int v14;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v3 = (unsigned int *)(v2 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  if (WebCore::AXObjectCache::gAccessibilityEnhancedUserInterfaceEnabled)
    v5 = 2;
  else
    v5 = 3;
  if ((*((_BYTE *)a2 + 9) & 0xF7) != v5)
  {
    v10 = 0;
    if (!v2)
      return v10;
    goto LABEL_24;
  }
  v6 = *(_QWORD *)(v2 + 296);
  if (v6)
    *(_DWORD *)(v6 + 24) += 2;
  v7 = (WTF::StringImpl *)*((_QWORD *)a2 + 8);
  if (v7)
    *(_DWORD *)v7 += 2;
  v18 = v7;
  v8 = WebCore::Document::elementForAccessKey((WebCore::Document *)v6, (const WTF::String *)&v18);
  v10 = v8;
  if (v8)
    *(_DWORD *)(v8 + 24) += 2;
  v11 = v18;
  v18 = 0;
  if (!v11)
  {
LABEL_16:
    if (v6)
      goto LABEL_17;
    goto LABEL_19;
  }
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
    goto LABEL_16;
  }
  WTF::StringImpl::destroy(v11, v9);
  if (v6)
  {
LABEL_17:
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, v9);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
LABEL_19:
  if (v10)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 592))(v10, 0);
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10, v12);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
    v10 = 1;
  }
  do
  {
LABEL_24:
    v13 = __ldaxr(v3);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v3));
  if (!v14)
  {
    atomic_store(1u, v3);
    v16 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v16 = off_1E31FE290;
    *((_QWORD *)v16 + 1) = v3;
    v18 = v16;
    WTF::ensureOnMainThread();
    v17 = v18;
    v18 = 0;
    if (v17)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v17 + 8))(v17);
  }
  return v10;
}

uint64_t WebCore::EventHandler::keyEvent(WebCore::EventHandler *this, const WebCore::PlatformKeyboardEvent *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  int v15;
  double v16;
  void *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;

  v4 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v5 = (unsigned int *)(v4 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = *(_QWORD *)(v4 + 296);
  if (v7)
  {
    if (*(_BYTE *)(v7 + 3362) || *(_BYTE *)(v7 + 3405))
    {
      v25 = *(_QWORD *)(v7 + 528);
      i = *(_QWORD *)(v4 + 296);
      if (v25)
      {
        v26 = *(_QWORD *)(v25 + 8);
        i = *(_QWORD *)(v4 + 296);
        if (v26)
        {
          v27 = *(_QWORD *)(v26 + 120);
          i = *(_QWORD *)(v4 + 296);
          if (v27)
          {
            v28 = *(_QWORD *)(v27 + 8);
            for (i = *(_QWORD *)(v4 + 296); v28; v28 = *(_QWORD *)(v31 + 8))
            {
              i = *(_QWORD *)(*(_QWORD *)(v28 + 40) + 8);
              v29 = *(_QWORD *)(i + 528);
              if (!v29)
                break;
              v30 = *(_QWORD *)(v29 + 8);
              if (!v30)
                break;
              v31 = *(_QWORD *)(v30 + 120);
              if (!v31)
                break;
            }
          }
        }
      }
    }
    else
    {
      v8 = *(_QWORD *)(v7 + 528);
      i = *(_QWORD *)(v4 + 296);
      if (v8)
      {
        v10 = *(_QWORD *)(v8 + 8);
        i = *(_QWORD *)(v4 + 296);
        if (v10)
        {
          v11 = *(_QWORD *)(*(_QWORD *)(v10 + 128) + 8);
          v12 = v11 && *(_BYTE *)(v11 + 144) == 0;
          i = *(_QWORD *)(v4 + 296);
          if (v12)
          {
            v13 = *(_QWORD *)(v11 + 296);
            i = *(_QWORD *)(v4 + 296);
            if (v13)
              i = v13;
          }
        }
      }
    }
    *(_DWORD *)(i + 24) += 2;
    v14 = *(_BYTE *)(i + 3416);
    v15 = *(_DWORD *)(v7 + 24);
    *(_DWORD *)(v7 + 24) = v15 + 2;
    v16 = *(double *)(v7 + 2312);
    if (v15)
    {
      *(_DWORD *)(v7 + 24) = v15;
    }
    else if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
    }
    if ((WebCore::EventHandler::internalKeyEvent(this, a2) & 1) != 0)
    {
      {
        WebCore::ResourceLoadObserver::shared(void)::emptyObserver = (uint64_t)off_1E33F6E78;
      }
      if (WebCore::sharedObserver(void)::observer)
        v18 = (uint64_t *)WebCore::sharedObserver(void)::observer;
      else
        v18 = &WebCore::ResourceLoadObserver::shared(void)::emptyObserver;
      (*(void (**)(uint64_t *, uint64_t))(*v18 + 32))(v18, i);
      v19 = 1;
      goto LABEL_37;
    }
    *(_BYTE *)(i + 3416) = v14;
  }
  else
  {
    if ((WebCore::EventHandler::internalKeyEvent(this, a2) & 1) != 0)
    {
      v19 = 1;
      goto LABEL_39;
    }
    i = 0;
    v16 = 0.0;
  }
  v20 = *(_QWORD *)(v4 + 296);
  if (v20)
  {
    *(_DWORD *)(v20 + 24) += 2;
    WebCore::Document::updateLastHandledUserGestureTimestamp(v20, v16);
    if (*(_DWORD *)(v20 + 24) != 2)
    {
      v19 = 0;
      *(_DWORD *)(v20 + 24) -= 2;
      if (!v7)
        goto LABEL_39;
      goto LABEL_37;
    }
    if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v20, v17);
  }
  v19 = 0;
  if (!v7)
    goto LABEL_39;
LABEL_37:
  if (*(_DWORD *)(i + 24) == 2)
  {
    if ((*(_WORD *)(i + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)i, v17);
  }
  else
  {
    *(_DWORD *)(i + 24) -= 2;
  }
  do
  {
LABEL_39:
    v21 = __ldaxr(v5);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, v5));
  if (!v22)
  {
    atomic_store(1u, v5);
    v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v24 = off_1E31FE290;
    v24[1] = v5;
    v32 = v24;
    WTF::ensureOnMainThread();
    if (v32)
      (*(void (**)(_QWORD *))(*v32 + 8))(v32);
  }
  return v19;
}

uint64_t WebCore::EventHandler::internalKeyEvent(WebCore::EventHandler *this, const WebCore::PlatformKeyboardEvent *a2)
{
  WebCore::EventHandler *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  _DWORD *v7;
  int *v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  WTF::StringImpl *v23;
  int v24;
  int v25;
  int *v26;
  int v27;
  int v28;
  unsigned __int8 *v29;
  int v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  unsigned __int8 v37;
  uint64_t v38;
  WebCore::Quirks *v39;
  void *v40;
  char v41;
  uint64_t v42;
  __int128 v43;
  void *v44;
  WebCore::FrameLoader *v45;
  WTF::StringImpl *v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  void *v55;
  __int128 v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  _DWORD *v59;
  _DWORD *v60;
  _DWORD *v61;
  const void *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF *v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  WTF *v68;
  int v69;
  uint64_t v70;
  __int128 v71;
  _DWORD *v72;
  _DWORD *v73;
  _DWORD *v74;
  _DWORD *v75;
  _DWORD *v76;
  const void *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WebCore::Document *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF *v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  WTF *v92;
  int v93;
  uint64_t v94;
  WebCore *v95;
  const WTF::AtomString *v96;
  WebCore::Quirks *v97;
  _BOOL4 EditingCommand;
  _DWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _BYTE *v105;
  char v106;
  WTF *v107;
  void *v108;
  WebCore::Document *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  WebCore::Node *v114;
  uint64_t v115;
  unsigned int v116;
  unsigned int v117;
  WTF *v119;
  void *v120;
  uint64_t *v121;
  unsigned int *v122;
  unsigned int v123;
  unsigned int v124;
  _BYTE *v125;
  uint64_t v126;
  uint64_t v127;
  WTF::StringImpl *v128;
  __int128 v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  _DWORD *v132;
  _DWORD *v133;
  WTF::StringImpl *v134;
  const void *v135;
  WTF::StringImpl *v136;
  unsigned __int8 *v137;
  int v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  int v141;
  int v142;
  WTF *v143;
  uint64_t v144;
  WTF::StringImpl *v145;
  WTF *v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  WTF::StringImpl **v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  uint64_t *v155;
  unsigned int *v156;
  unsigned int v157;
  unsigned int v158;
  uint64_t v159;
  unsigned int *v160;
  unsigned int v161;
  WebCore::FullscreenManager *v162;
  uint64_t v163;
  unsigned int v164;
  uint64_t v165;
  WTF::StringImpl **v166;
  WTF::StringImpl *v167;
  WTF::StringImpl *v168;
  WTF *v169;
  WTF *v170;
  uint64_t *v171;
  unsigned int *v172;
  unsigned int v173;
  unsigned int v174;
  __int128 v175;
  WTF *v176;
  uint64_t v177;
  WTF *v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  WTF::StringImpl **v182;
  WTF::StringImpl **v183;
  WTF::StringImpl *v184;
  WTF::StringImpl *v185;
  WTF::StringImpl *v186;
  WTF::StringImpl *v187;
  WTF::StringImpl **v188;
  WTF::StringImpl **v189;
  WTF::StringImpl **v190;
  WTF::StringImpl *v191;
  WTF::StringImpl *v192;
  WTF::StringImpl *v193;
  WTF::StringImpl *v194;
  unsigned int v195;
  uint64_t v196;
  WTF::StringImpl **v197;
  WTF::StringImpl **v198;
  WTF::StringImpl *v199;
  WTF::StringImpl *v200;
  WebCore::Editor *v201;
  WebCore::Editor *v202;
  void *v203;
  WebCore::Editor *v204;
  void *v205;
  _DWORD *v206;
  WebCore::Editor *v207;
  WebCore::Editor *v208;
  uint64_t v209;
  WTF *v210;
  int v211;
  uint64_t **v212;
  WTF *v213;
  WTF *v214;
  WTF *v215;
  WTF *v216;
  __int16 *v217;
  WebCore::EventHandler *v218;
  WebCore::EventHandler *v219;
  char v220;
  WTF *v221;
  char v222[8];
  WebCore::Node *v223;
  uint64_t v224;
  WTF *v225[2];
  __int128 v226;
  __int128 v227;
  __int16 v228;
  char v229;
  WTF::StringImpl *v230;
  WTF::StringImpl *v231;
  _DWORD *v232;
  _DWORD *v233;
  WTF::StringImpl *v234;
  int v235;
  __int16 v236;
  const void *v237;
  WTF *v238[2];
  __int128 v239;
  __int128 v240;
  __int16 v241;
  char v242;
  _DWORD *v243;
  _DWORD *v244;
  _DWORD *v245;
  _DWORD *v246;
  _DWORD *v247;
  int v248;
  __int16 v249;
  const void *v250;
  uint64_t v251;
  _OWORD v252[3];
  __int16 v253;
  char v254;
  WTF::StringImpl *v255;
  WTF::StringImpl *v256;
  _DWORD *v257;
  _DWORD *v258;
  _DWORD *v259;
  int v260;
  __int16 v261;
  const void *v262;
  __int128 v263;
  __int128 v264;
  uint64_t v265;

  v3 = this;
  v265 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v5 = (unsigned int *)(v4 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = *(_DWORD **)(v4 + 288);
  if (v7)
    ++v7[2];
  v8 = (int *)((char *)a2 + 96);
  if (*((_BYTE *)a2 + 8) == 1 && *((_DWORD *)a2 + 24) == 27)
  {
    v10 = *(_QWORD *)(v4 + 24);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
      {
        v12 = *(_DWORD *)v11 + 1;
        *(_DWORD *)v11 = v12;
        v13 = *(_QWORD *)(v11 + 232);
        if (v13)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
          v12 = *(_DWORD *)v11;
        }
        v14 = v12 - 1;
        if (v14)
        {
          *(_DWORD *)v11 = v14;
        }
        else
        {
          WebCore::Page::~Page(v11);
          WTF::fastFree(v107, v108);
        }
      }
    }
  }
  v15 = *(_QWORD *)(v4 + 296);
  if (v15)
    *(_DWORD *)(v15 + 24) += 2;
  v16 = *(_QWORD *)(v15 + 1992);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 + 8) + 1;
    *(_DWORD *)(v16 + 8) = v17;
    if (!*(_QWORD *)(v16 + 56))
      goto LABEL_58;
    v18 = *((_BYTE *)a2 + 8) == 1 && *((_DWORD *)a2 + 24) == 27;
    v19 = v18;
    if (v18)
    {
      WebCore::FullscreenManager::cancelFullscreen((WebCore::FullscreenManager *)v16, a2);
      v17 = *(_DWORD *)(v16 + 8);
    }
    else
    {
      v218 = v3;
      v20 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 1) + 8) + 296);
      if (v20)
        *(_DWORD *)(v20 + 24) += 2;
      v21 = *(_QWORD *)(v20 + 1992);
      if (!v21)
      {
        v159 = WTF::fastMalloc((WTF *)0x90);
        *(_QWORD *)v159 = 0;
        *(_DWORD *)(v159 + 8) = 0;
        v160 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v20);
        do
          v161 = __ldaxr(v160);
        while (__stlxr(v161 + 1, v160));
        *(_QWORD *)(v159 + 24) = 0;
        *(_QWORD *)(v159 + 32) = 0;
        *(_QWORD *)(v159 + 16) = v160;
        *(_BYTE *)(v159 + 40) = 0;
        *(_OWORD *)(v159 + 48) = 0u;
        *(_OWORD *)(v159 + 64) = 0u;
        *(_OWORD *)(v159 + 80) = 0u;
        *(_OWORD *)(v159 + 96) = 0u;
        *(_OWORD *)(v159 + 112) = 0u;
        *(_DWORD *)(v159 + 127) = 0;
        *(_QWORD *)(v159 + 136) = WTF::cryptographicallyRandomNumber<unsigned long long>();
        v162 = *(WebCore::FullscreenManager **)(v20 + 1992);
        *(_QWORD *)(v20 + 1992) = v159;
        if (v162)
        {
          WebCore::FullscreenManager::~FullscreenManager(v162, a2);
          if (*(_DWORD *)(v163 + 8))
          {
            *(_OWORD *)(v163 + 112) = 0u;
            *(_OWORD *)(v163 + 128) = 0u;
            *(_OWORD *)(v163 + 80) = 0u;
            *(_OWORD *)(v163 + 96) = 0u;
            *(_OWORD *)(v163 + 48) = 0u;
            *(_OWORD *)(v163 + 64) = 0u;
            *(_OWORD *)(v163 + 16) = 0u;
            *(_OWORD *)(v163 + 32) = 0u;
            *(_OWORD *)v163 = 0u;
          }
          else
          {
            WTF::fastFree((WTF *)v163, a2);
          }
        }
        v21 = *(_QWORD *)(v20 + 1992);
      }
      if (*(_QWORD *)(v21 + 56) && *(_BYTE *)(v21 + 129))
      {
        v22 = 1;
      }
      else if (*((_BYTE *)a2 + 8) == 4)
      {
        v23 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
        if (!v23)
          goto LABEL_54;
        v24 = *(_DWORD *)v23;
        v25 = *((_DWORD *)v23 + 1);
        *(_DWORD *)v23 += 2;
        if (v24)
          *(_DWORD *)v23 = v24;
        else
          WTF::StringImpl::destroy(v23, a2);
        if (v25 == 1)
        {
          v26 = (int *)*((_QWORD *)a2 + 7);
          if (v26)
          {
            v27 = *v26;
            v28 = v26[1];
            *v26 += 2;
            if (v28)
            {
              v29 = (unsigned __int8 *)*((_QWORD *)v26 + 1);
              if ((v26[4] & 4) != 0)
                v30 = *v29;
              else
                v30 = *(unsigned __int16 *)v29;
            }
            else
            {
              v30 = 0;
            }
            if (v27)
              *v26 = v27;
            else
              WTF::StringImpl::destroy((WTF::StringImpl *)v26, a2);
          }
          else
          {
            v30 = 0;
          }
          v22 = v30 == 32;
        }
        else
        {
LABEL_54:
          v22 = 0;
        }
      }
      else
      {
        v31 = (*v8 - 106) < 0x76;
        if ((*v8 - 32) < 0xF)
          v31 = 1;
        if ((*v8 - 8) < 0xD)
          v31 = 1;
        v22 = (*v8 & 0xFFFFFFFE) == 0xBA || v31;
      }
      if (*(_DWORD *)(v20 + 24) == 2)
      {
        if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v20, a2);
      }
      else
      {
        *(_DWORD *)(v20 + 24) -= 2;
      }
      v17 = *(_DWORD *)(v16 + 8);
      v3 = v218;
      if (v22)
      {
LABEL_58:
        if (v17)
        {
          *(_DWORD *)(v16 + 8) = v17 - 1;
          goto LABEL_60;
        }
LABEL_379:
        __break(0xC471u);
        goto LABEL_494;
      }
    }
    if (v17)
    {
      *(_DWORD *)(v16 + 8) = v17 - 1;
      goto LABEL_226;
    }
    goto LABEL_379;
  }
LABEL_60:
  if (*v8 == 20)
  {
    v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 1) + 8) + 296) + 1248);
    if (v32)
    {
      if ((*(_WORD *)(v32 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v32 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
      {
        *(_DWORD *)(v32 + 24) += 2;
        (*(void (**)(_QWORD))(**(_QWORD **)(v32 + 240) + 784))(*(_QWORD *)(v32 + 240));
        if (*(_DWORD *)(v32 + 24) == 2)
        {
          if ((*(_WORD *)(v32 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v32, a2);
        }
        else
        {
          *(_DWORD *)(v32 + 24) -= 2;
        }
      }
    }
  }
  v219 = v3;
  v33 = *(_QWORD *)(v4 + 296);
  if (v33)
    *(_DWORD *)(v33 + 24) += 2;
  v34 = WebCore::eventTargetElementForDocument(v33, a2);
  v35 = v34;
  if (v34)
    *(_DWORD *)(v34 + 24) += 2;
  if (v33)
  {
    if (*(_DWORD *)(v33 + 24) == 2)
    {
      if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v33, a2);
    }
    else
    {
      *(_DWORD *)(v33 + 24) -= 2;
    }
  }
  if (!v35)
  {
    v19 = 0;
    goto LABEL_226;
  }
  if (*((_BYTE *)a2 + 8) == 1)
    v36 = 1;
  else
    v36 = 2;
  if (*((_DWORD *)a2 + 24) == 27)
    v37 = 0;
  else
    v37 = v36;
  v38 = *(_QWORD *)(v4 + 296);
  if (v38)
    *(_DWORD *)(v38 + 24) += 2;
  v39 = *(WebCore::Quirks **)(v38 + 688);
  if (!v39)
    v39 = (WebCore::Quirks *)WebCore::Document::ensureQuirks((WebCore::Document *)v38);
  v41 = !WebCore::Quirks::needsDisableDOMPasteAccessQuirk(v39);
  if (*(_DWORD *)(v38 + 24) == 2)
  {
    if ((*(_WORD *)(v38 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v38, v40);
  }
  else
  {
    *(_DWORD *)(v38 + 24) -= 2;
  }
  v42 = *(_QWORD *)(v4 + 296);
  if (v42)
  {
    *(_DWORD *)(v42 + 24) += 2;
    v43 = *((_OWORD *)a2 + 2);
    v263 = *((_OWORD *)a2 + 1);
    v264 = v43;
    WebCore::UserGestureIndicator::UserGestureIndicator(&v224, 257, v42, v37, 1, &v263, v41);
    if (*(_DWORD *)(v42 + 24) == 2)
    {
      if ((*(_WORD *)(v42 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v42, v44);
    }
    else
    {
      *(_DWORD *)(v42 + 24) -= 2;
    }
  }
  else
  {
    v175 = *((_OWORD *)a2 + 2);
    v263 = *((_OWORD *)a2 + 1);
    v264 = v175;
    WebCore::UserGestureIndicator::UserGestureIndicator(&v224, 257, 0, v37, 1, &v263, v41);
  }
  WebCore::UserTypingGestureIndicator::UserTypingGestureIndicator((WebCore::UserTypingGestureIndicator *)v222, (WebCore::LocalFrame *)v4);
  v45 = *(WebCore::FrameLoader **)(v4 + 280);
  ++*(_DWORD *)v45;
  WebCore::FrameLoader::resetMultipleFormSubmissionProtection(v45);
  if (!*(_DWORD *)v45)
  {
    __break(0xC471u);
    JUMPOUT(0x195FB0088);
  }
  --*(_DWORD *)v45;
  v47 = *((unsigned __int8 *)a2 + 8);
  if (v47 == 1)
  {
    v48 = WebCore::EventHandler::handleAccessKey(v219, a2);
    v47 = *((unsigned __int8 *)a2 + 8);
  }
  else
  {
    v48 = 0;
  }
  if (v47 == 2)
  {
    v49 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v219 + 1) + 8) + 24);
    if (v49)
    {
      v50 = *(_QWORD *)(v49 + 8);
      if (v50)
      {
        v51 = (*(_DWORD *)v50)++;
        v52 = *(_QWORD *)(v50 + 1760);
        if (v52)
        {
          v53 = *(_QWORD *)(v52 + 8);
          if (v53)
          {
            if (*(_BYTE *)(v53 + 24))
            {
              *(_BYTE *)(v53 + 24) = 0;
              v125 = *(_BYTE **)(v53 + 16);
              if ((*(unsigned int (**)(_BYTE *, _QWORD))(*(_QWORD *)v125 + 80))(v125, 0))
                v125[45] = 0;
            }
            v51 = *(_DWORD *)v50 - 1;
          }
        }
        if (v51)
        {
          *(_DWORD *)v50 = v51;
        }
        else
        {
          WebCore::Page::~Page(v50);
          WTF::fastFree(v119, v120);
        }
      }
    }
  }
  v54 = *((unsigned __int8 *)a2 + 8);
  if (v54 != 4 && v54 != 2)
  {
    v56 = *((_OWORD *)a2 + 1);
    v252[0] = *(_OWORD *)a2;
    v252[1] = v56;
    v252[2] = *((_OWORD *)a2 + 2);
    v217 = (__int16 *)((char *)a2 + 48);
    v253 = *((_WORD *)a2 + 24);
    v254 = *((_BYTE *)a2 + 50);
    v57 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
    if (v57)
      *(_DWORD *)v57 += 2;
    v255 = v57;
    v58 = (WTF::StringImpl *)*((_QWORD *)a2 + 8);
    if (v58)
      *(_DWORD *)v58 += 2;
    v256 = v58;
    v59 = (_DWORD *)*((_QWORD *)a2 + 9);
    if (v59)
      *v59 += 2;
    v257 = v59;
    v60 = (_DWORD *)*((_QWORD *)a2 + 10);
    if (v60)
      *v60 += 2;
    v258 = v60;
    v61 = (_DWORD *)*((_QWORD *)a2 + 11);
    if (v61)
      *v61 += 2;
    v259 = v61;
    v260 = *v8;
    v261 = *((_WORD *)a2 + 50);
    v62 = (const void *)*((_QWORD *)a2 + 13);
    v262 = v62;
    if (v62)
      CFRetain(v62);
    if (BYTE8(v252[0]) != 3)
    {
      BYTE8(v252[0]) = 3;
      v63 = v255;
      v255 = 0;
      if (v63)
      {
        if (*(_DWORD *)v63 == 2)
          WTF::StringImpl::destroy(v63, v46);
        else
          *(_DWORD *)v63 -= 2;
      }
      v64 = v256;
      v256 = 0;
      if (v64)
      {
        if (*(_DWORD *)v64 == 2)
          WTF::StringImpl::destroy(v64, v46);
        else
          *(_DWORD *)v64 -= 2;
      }
    }
    v65 = *(WTF **)(v4 + 112);
    ++*(_DWORD *)v65;
    v238[0] = v65;
    v66 = bmalloc::api::isoAllocate();
    WebCore::KeyboardEvent::KeyboardEvent(v66, (uint64_t)v252, (uint64_t (**)())v238);
    v68 = v238[0];
    v238[0] = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 == 1)
      {
        v121 = (uint64_t *)*((_QWORD *)v68 + 2);
        *((_QWORD *)v68 + 2) = 0;
        if (v121)
        {
          if (*v121)
          {
            v215 = (WTF *)v121;
            WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v121, v67);
            v121 = (uint64_t *)v215;
          }
          WTF::fastFree((WTF *)v121, v67);
        }
        v122 = (unsigned int *)*((_QWORD *)v68 + 1);
        *((_QWORD *)v68 + 1) = 0;
        if (v122)
        {
          do
          {
            v123 = __ldaxr(v122);
            v124 = v123 - 1;
          }
          while (__stlxr(v124, v122));
          if (!v124)
          {
            atomic_store(1u, v122);
            WTF::fastFree((WTF *)v122, v67);
          }
        }
        WTF::fastFree(v68, v67);
        if (!v48)
        {
LABEL_133:
          v69 = *(_DWORD *)(v35 + 24);
          *(_DWORD *)(v35 + 24) = v69 + 2;
          v70 = *(_QWORD *)(v66 + 48);
          if (v70 == v35)
          {
            if ((*(_BYTE *)(v35 + 22) & 2) != 0)
            {
              if (v69)
              {
                *(_DWORD *)(v35 + 24) = v69;
              }
              else if ((*(_WORD *)(v35 + 30) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v35, v67);
              }
            }
            else
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v35 + 96))(v35);
            }
          }
          else
          {
            *(_QWORD *)(v66 + 48) = v35;
            if (!v70)
              goto LABEL_257;
            if ((*(_BYTE *)(v70 + 22) & 2) != 0)
            {
              if (*(_DWORD *)(v70 + 24) == 2)
              {
                if ((*(_WORD *)(v70 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v70, v67);
              }
              else
              {
                *(_DWORD *)(v70 + 24) -= 2;
              }
            }
            else
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v70 + 96))(v70);
            }
            if (*(_QWORD *)(v66 + 48))
LABEL_257:
              (*(void (**)(uint64_t))(*(_QWORD *)v66 + 176))(v66);
          }
          v71 = *((_OWORD *)a2 + 1);
          *(_OWORD *)v238 = *(_OWORD *)a2;
          v239 = v71;
          v240 = *((_OWORD *)a2 + 2);
          v241 = *v217;
          v242 = *((_BYTE *)a2 + 50);
          v72 = (_DWORD *)*((_QWORD *)a2 + 7);
          if (v72)
            *v72 += 2;
          v243 = v72;
          v73 = (_DWORD *)*((_QWORD *)a2 + 8);
          if (v73)
            *v73 += 2;
          v244 = v73;
          v74 = (_DWORD *)*((_QWORD *)a2 + 9);
          if (v74)
            *v74 += 2;
          v245 = v74;
          v75 = (_DWORD *)*((_QWORD *)a2 + 10);
          if (v75)
            *v75 += 2;
          v246 = v75;
          v76 = (_DWORD *)*((_QWORD *)a2 + 11);
          if (v76)
            *v76 += 2;
          v247 = v76;
          v248 = *v8;
          v249 = *((_WORD *)a2 + 50);
          v77 = (const void *)*((_QWORD *)a2 + 13);
          v250 = v77;
          if (v77)
            CFRetain(v77);
          ++*(_DWORD *)(v66 + 16);
          v251 = v66;
          WebCore::EventHandler::internalKeyEvent(WebCore::PlatformKeyboardEvent const&)::$_0::operator()((uint64_t)v72, (WTF::StringImpl *)*(unsigned __int8 *)(v66 + 84), (uint64_t **)v35);
          if (*((_BYTE *)a2 + 8) == 3)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 48))(v35, v66);
            v79 = *(_QWORD *)(v4 + 24);
            if (v79)
            {
              v79 = *(_QWORD *)(v79 + 8);
              if (v79)
              {
                v80 = *(_QWORD *)(v79 + 72);
                v81 = *(_QWORD *)(v80 + 16);
                if (!v81 || (v82 = *(_QWORD *)(v81 + 8)) == 0 || *(_BYTE *)(v82 + 144))
                {
                  v83 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v80 + 8) + 8) + 160);
                  if (*(_BYTE *)(v83 + 144))
                    v82 = 0;
                  else
                    v82 = v83;
                }
                LODWORD(v79) = v4 != v82;
              }
            }
            if ((*(_DWORD *)(v66 + 20) & 0x80) != 0)
              v19 = 1;
            else
              v19 = v79 | ((*(_DWORD *)(v66 + 20) & 0x40u) >> 6);
            v99 = (_DWORD *)v66;
            goto LABEL_209;
          }
          v84 = *(WebCore::Document **)(v4 + 296);
          v85 = *((_QWORD *)v84 + 382);
          if (!v85)
          {
            v201 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
            v202 = WebCore::Editor::Editor(v201, v84);
            v204 = (WebCore::Editor *)*((_QWORD *)v84 + 382);
            *((_QWORD *)v84 + 382) = v202;
            v216 = v204;
            if (v204)
            {
              WebCore::Editor::~Editor(v204, v203);
              if (*v206)
              {
                *((_QWORD *)v216 + 62) = 0;
                *((_OWORD *)v216 + 29) = 0u;
                *((_OWORD *)v216 + 30) = 0u;
                *((_OWORD *)v216 + 27) = 0u;
                *((_OWORD *)v216 + 28) = 0u;
                *((_OWORD *)v216 + 25) = 0u;
                *((_OWORD *)v216 + 26) = 0u;
                *((_OWORD *)v216 + 23) = 0u;
                *((_OWORD *)v216 + 24) = 0u;
                *((_OWORD *)v216 + 21) = 0u;
                *((_OWORD *)v216 + 22) = 0u;
                *((_OWORD *)v216 + 19) = 0u;
                *((_OWORD *)v216 + 20) = 0u;
                *((_OWORD *)v216 + 17) = 0u;
                *((_OWORD *)v216 + 18) = 0u;
                *((_OWORD *)v216 + 15) = 0u;
                *((_OWORD *)v216 + 16) = 0u;
                *((_OWORD *)v216 + 13) = 0u;
                *((_OWORD *)v216 + 14) = 0u;
                *((_OWORD *)v216 + 11) = 0u;
                *((_OWORD *)v216 + 12) = 0u;
                *((_OWORD *)v216 + 9) = 0u;
                *((_OWORD *)v216 + 10) = 0u;
                *((_OWORD *)v216 + 7) = 0u;
                *((_OWORD *)v216 + 8) = 0u;
                *((_OWORD *)v216 + 5) = 0u;
                *((_OWORD *)v216 + 6) = 0u;
                *((_OWORD *)v216 + 3) = 0u;
                *((_OWORD *)v216 + 4) = 0u;
                *((_OWORD *)v216 + 1) = 0u;
                *((_OWORD *)v216 + 2) = 0u;
                *(_OWORD *)v216 = 0u;
              }
              else
              {
                WTF::fastFree(v216, v205);
              }
            }
            v85 = *((_QWORD *)v84 + 382);
          }
          v86 = *(_QWORD *)(v85 + 8);
          if (v86)
          {
            v87 = *(_QWORD *)(v86 + 8);
            if (v87)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v87 + 440))(v87, v66);
          }
          v88 = v66;
          v211 = *(_DWORD *)(v66 + 20);
          if ((v211 & 0x80) != 0)
          {
            v260 = 229;
            v89 = *(WTF **)(v4 + 112);
            ++*(_DWORD *)v89;
            v225[0] = v89;
            v90 = bmalloc::api::isoAllocate();
            v213 = (WTF *)WebCore::KeyboardEvent::KeyboardEvent(v90, (uint64_t)v252, (uint64_t (**)())v225);
            if (*(_DWORD *)(v66 + 16) == 1)
              (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
            else
              --*(_DWORD *)(v66 + 16);
            v92 = v225[0];
            v225[0] = 0;
            if (v92)
            {
              if (*(_DWORD *)v92 == 1)
              {
                v155 = (uint64_t *)*((_QWORD *)v92 + 2);
                *((_QWORD *)v92 + 2) = 0;
                if (v155)
                {
                  v210 = (WTF *)v155;
                  if (*v155)
                    WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v155, v91);
                  WTF::fastFree(v210, v91);
                }
                v156 = (unsigned int *)*((_QWORD *)v92 + 1);
                *((_QWORD *)v92 + 1) = 0;
                if (v156)
                {
                  do
                  {
                    v157 = __ldaxr(v156);
                    v158 = v157 - 1;
                  }
                  while (__stlxr(v158, v156));
                  if (!v158)
                  {
                    atomic_store(1u, v156);
                    WTF::fastFree((WTF *)v156, v91);
                  }
                }
                WTF::fastFree(v92, v91);
              }
              else
              {
                --*(_DWORD *)v92;
              }
            }
            v93 = *(_DWORD *)(v35 + 24);
            *(_DWORD *)(v35 + 24) = v93 + 2;
            v88 = (uint64_t)v213;
            v94 = *((_QWORD *)v213 + 6);
            if (v94 == v35)
            {
              if ((*(_BYTE *)(v35 + 22) & 2) != 0)
              {
                if (v93)
                {
                  *(_DWORD *)(v35 + 24) = v93;
                }
                else if ((*(_WORD *)(v35 + 30) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef((WebCore::Node *)v35, v91);
                }
              }
              else
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v35 + 96))(v35);
              }
            }
            else
            {
              *((_QWORD *)v213 + 6) = v35;
              if (!v94)
                goto LABEL_344;
              if ((*(_BYTE *)(v94 + 22) & 2) != 0)
              {
                if (*(_DWORD *)(v94 + 24) == 2)
                {
                  if ((*(_WORD *)(v94 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v94, v91);
                }
                else
                {
                  *(_DWORD *)(v94 + 24) -= 2;
                }
              }
              else
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v94 + 96))(v94);
              }
              if (*((_QWORD *)v213 + 6))
LABEL_344:
                (*(void (**)(WTF *))(*(_QWORD *)v213 + 176))(v213);
            }
            *((_DWORD *)v213 + 5) |= 0x100u;
          }
          v214 = (WTF *)v88;
          if (WebCore::AXObjectCache::gAccessibilityEnhancedUserInterfaceEnabled)
          {
            if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v219 + 1) + 8) + 136) + 688) & 0x100000000) != 0)
            {
              v95 = (WebCore *)(v88 + 112);
              if ((MEMORY[0x19AEA53F4](*((_QWORD *)v214 + 14), "U+0009", 6) & 1) != 0
                || WebCore::focusDirectionForKey(v95, v96))
              {
                *((_DWORD *)v214 + 5) |= 0x10u;
              }
            }
          }
          v97 = *(WebCore::Quirks **)(*(_QWORD *)(v4 + 296) + 688);
          if (!v97)
            v97 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(*(WebCore::Document **)(v4 + 296));
          EditingCommand = WebCore::Quirks::needsDeferKeyDownAndKeyPressTimersUntilNextEditingCommand(v97);
          v220 = WebCore::DeferDOMTimersForScope::s_isDeferring;
          v99 = v214;
          if (EditingCommand)
            WebCore::DeferDOMTimersForScope::s_isDeferring = 1;
          (*(void (**)(uint64_t, WTF *))(*(_QWORD *)v35 + 48))(v35, v214);
          if ((v211 & 0x80) != 0)
          {
            v109 = *(WebCore::Document **)(v4 + 296);
            v110 = *((_QWORD *)v109 + 382);
            if (!v110)
            {
              v207 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
              WebCore::Editor::Editor(v207, v109);
              v208 = (WebCore::Editor *)*((_QWORD *)v109 + 382);
              *((_QWORD *)v109 + 382) = v207;
              if (v208)
              {
                WebCore::Editor::~Editor(v208, v78);
                if (*(_DWORD *)v209)
                {
                  *(_QWORD *)(v209 + 496) = 0;
                  *(_OWORD *)(v209 + 464) = 0u;
                  *(_OWORD *)(v209 + 480) = 0u;
                  *(_OWORD *)(v209 + 432) = 0u;
                  *(_OWORD *)(v209 + 448) = 0u;
                  *(_OWORD *)(v209 + 400) = 0u;
                  *(_OWORD *)(v209 + 416) = 0u;
                  *(_OWORD *)(v209 + 368) = 0u;
                  *(_OWORD *)(v209 + 384) = 0u;
                  *(_OWORD *)(v209 + 336) = 0u;
                  *(_OWORD *)(v209 + 352) = 0u;
                  *(_OWORD *)(v209 + 304) = 0u;
                  *(_OWORD *)(v209 + 320) = 0u;
                  *(_OWORD *)(v209 + 272) = 0u;
                  *(_OWORD *)(v209 + 288) = 0u;
                  *(_OWORD *)(v209 + 240) = 0u;
                  *(_OWORD *)(v209 + 256) = 0u;
                  *(_OWORD *)(v209 + 208) = 0u;
                  *(_OWORD *)(v209 + 224) = 0u;
                  *(_OWORD *)(v209 + 176) = 0u;
                  *(_OWORD *)(v209 + 192) = 0u;
                  *(_OWORD *)(v209 + 144) = 0u;
                  *(_OWORD *)(v209 + 160) = 0u;
                  *(_OWORD *)(v209 + 112) = 0u;
                  *(_OWORD *)(v209 + 128) = 0u;
                  *(_OWORD *)(v209 + 80) = 0u;
                  *(_OWORD *)(v209 + 96) = 0u;
                  *(_OWORD *)(v209 + 48) = 0u;
                  *(_OWORD *)(v209 + 64) = 0u;
                  *(_OWORD *)(v209 + 16) = 0u;
                  *(_OWORD *)(v209 + 32) = 0u;
                  *(_OWORD *)v209 = 0u;
                }
                else
                {
                  WTF::fastFree((WTF *)v209, v78);
                }
              }
              v110 = *((_QWORD *)v109 + 382);
              v99 = v214;
            }
            v111 = *(_QWORD *)(v110 + 8);
            if (v111)
            {
              v112 = *(_QWORD *)(v111 + 8);
              v106 = v220;
              if (v112)
                (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v112 + 448))(v112, v99);
              v19 = 1;
              v105 = &unk_1EE2F7000;
              goto LABEL_208;
            }
            goto LABEL_197;
          }
          v100 = *(_QWORD *)(v4 + 24);
          if (v100)
          {
            v100 = *(_QWORD *)(v100 + 8);
            if (v100)
            {
              v101 = *(_QWORD *)(v100 + 72);
              v102 = *(_QWORD *)(v101 + 16);
              if (!v102 || (v103 = *(_QWORD *)(v102 + 8)) == 0 || *(_BYTE *)(v103 + 144))
              {
                v104 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v101 + 8) + 8) + 160);
                if (*(_BYTE *)(v104 + 144))
                  v103 = 0;
                else
                  v103 = v104;
              }
              LODWORD(v100) = v4 != v103;
            }
          }
          if ((*((_DWORD *)v214 + 5) & 0x80) != 0
            || ((v100 | ((*((_DWORD *)v214 + 5) & 0x40u) >> 6)) & 1) != 0)
          {
LABEL_197:
            v19 = 1;
LABEL_198:
            v105 = (_BYTE *)&unk_1EE2F7000;
LABEL_199:
            v106 = v220;
LABEL_208:
            v105[4009] = v106;
LABEL_209:
            v251 = 0;
            if (*(_DWORD *)(v66 + 16) == 1)
              (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
            else
              --*(_DWORD *)(v66 + 16);
            WebCore::PlatformKeyboardEvent::~PlatformKeyboardEvent((WebCore::PlatformKeyboardEvent *)v238, (WTF::StringImpl *)v78);
            if (v99)
            {
              if (v99[4] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v99 + 8))(v99);
              else
                --v99[4];
            }
            WebCore::PlatformKeyboardEvent::~PlatformKeyboardEvent((WebCore::PlatformKeyboardEvent *)v252, v113);
            goto LABEL_213;
          }
          v126 = *(_QWORD *)(v4 + 296);
          if (v126)
            *(_DWORD *)(v126 + 24) += 2;
          v127 = WebCore::eventTargetElementForDocument(v126, (WebCore::Document *)v78);
          if (v127)
            *(_DWORD *)(v127 + 24) += 2;
          v212 = (uint64_t **)v127;
          if (*(_DWORD *)(v35 + 24) == 2)
          {
            v105 = (_BYTE *)&unk_1EE2F7000;
            if ((*(_WORD *)(v35 + 30) & 0x400) != 0)
            {
LABEL_280:
              v35 = (uint64_t)v212;
              if (v126)
              {
                if (*(_DWORD *)(v126 + 24) == 2)
                {
                  if ((*(_WORD *)(v126 + 30) & 0x400) == 0)
                  {
                    WebCore::Node::removedLastRef((WebCore::Node *)v126, v78);
                    v105 = (_BYTE *)&unk_1EE2F7000;
                  }
                }
                else
                {
                  *(_DWORD *)(v126 + 24) -= 2;
                }
              }
              if (!v212)
              {
                v19 = 0;
                v99 = v214;
                goto LABEL_199;
              }
              WebCore::EventHandler::internalKeyEvent(WebCore::PlatformKeyboardEvent const&)::$_0::operator()((uint64_t)v72, (WTF::StringImpl *)*(unsigned __int8 *)(v66 + 84), v212);
              v129 = *((_OWORD *)a2 + 1);
              *(_OWORD *)v225 = *(_OWORD *)a2;
              v226 = v129;
              v227 = *((_OWORD *)a2 + 2);
              v99 = v214;
              v228 = *v217;
              v229 = *((_BYTE *)a2 + 50);
              v130 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
              if (v130)
                *(_DWORD *)v130 += 2;
              v230 = v130;
              v131 = (WTF::StringImpl *)*((_QWORD *)a2 + 8);
              if (v131)
                *(_DWORD *)v131 += 2;
              v231 = v131;
              v132 = (_DWORD *)*((_QWORD *)a2 + 9);
              if (v132)
                *v132 += 2;
              v232 = v132;
              v133 = (_DWORD *)*((_QWORD *)a2 + 10);
              if (v133)
                *v133 += 2;
              v233 = v133;
              v134 = (WTF::StringImpl *)*((_QWORD *)a2 + 11);
              if (v134)
                *(_DWORD *)v134 += 2;
              v234 = v134;
              v235 = *v8;
              v236 = *((_WORD *)a2 + 50);
              v135 = (const void *)*((_QWORD *)a2 + 13);
              v237 = v135;
              if (v135)
              {
                CFRetain(v135);
                v134 = v234;
              }
              LOBYTE(v225[1]) = 4;
              v234 = 0;
              if (v134)
              {
                if (*(_DWORD *)v134 == 2)
                  WTF::StringImpl::destroy(v134, v128);
                else
                  *(_DWORD *)v134 -= 2;
              }
              v235 = 0;
              v136 = v230;
              if (v230)
              {
                if (*((_DWORD *)v230 + 1) == 1)
                {
                  v137 = (unsigned __int8 *)*((_QWORD *)v230 + 1);
                  v138 = (*((_BYTE *)v230 + 16) & 4) != 0 ? *v137 : *(unsigned __int16 *)v137;
                  if ((v138 - 63232) <= 0x39 && ((1 << v138) & 0x2003B800000000FLL) != 0
                    || (unsigned __int16)(v138 + 2300) <= 0x17u)
                  {
                    v230 = 0;
                    if (*(_DWORD *)v136 == 2)
                      WTF::StringImpl::destroy(v136, v128);
                    else
                      *(_DWORD *)v136 -= 2;
                    v139 = v231;
                    v231 = 0;
                    if (v139)
                    {
                      if (*(_DWORD *)v139 == 2)
                        WTF::StringImpl::destroy(v139, v128);
                      else
                        *(_DWORD *)v139 -= 2;
                    }
                  }
                }
                v140 = v230;
                if (v230)
                {
                  v141 = *(_DWORD *)v230;
                  v142 = *((_DWORD *)v230 + 1);
                  *(_DWORD *)v230 += 2;
                  if (v141)
                  {
                    *(_DWORD *)v140 = v141;
                    if (v142)
                    {
LABEL_313:
                      v143 = *(WTF **)(v4 + 112);
                      ++*(_DWORD *)v143;
                      v221 = v143;
                      v144 = bmalloc::api::isoAllocate();
                      WebCore::KeyboardEvent::KeyboardEvent(v144, (uint64_t)v225, (uint64_t (**)())&v221);
                      v146 = v221;
                      v221 = 0;
                      if (v146)
                      {
                        if (*(_DWORD *)v146 == 1)
                        {
                          v171 = (uint64_t *)*((_QWORD *)v146 + 2);
                          *((_QWORD *)v146 + 2) = 0;
                          if (v171)
                          {
                            if (*v171)
                              WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v171, v145);
                            WTF::fastFree((WTF *)v171, v145);
                          }
                          v172 = (unsigned int *)*((_QWORD *)v146 + 1);
                          *((_QWORD *)v146 + 1) = 0;
                          v35 = (uint64_t)v212;
                          if (v172)
                          {
                            do
                            {
                              v173 = __ldaxr(v172);
                              v174 = v173 - 1;
                            }
                            while (__stlxr(v174, v172));
                            if (!v174)
                            {
                              atomic_store(1u, v172);
                              WTF::fastFree((WTF *)v172, v145);
                            }
                          }
                          WTF::fastFree(v146, v145);
                        }
                        else
                        {
                          --*(_DWORD *)v146;
                        }
                      }
                      v147 = *(_DWORD *)(v35 + 24);
                      *(_DWORD *)(v35 + 24) = v147 + 2;
                      v148 = *(_QWORD *)(v144 + 48);
                      if (v148 == v35)
                      {
                        if ((*(_BYTE *)(v35 + 22) & 2) != 0)
                        {
                          if (v147)
                          {
                            *(_DWORD *)(v35 + 24) = v147;
                          }
                          else if ((*(_WORD *)(v35 + 30) & 0x400) == 0)
                          {
                            WebCore::Node::removedLastRef((WebCore::Node *)v35, v145);
                          }
                        }
                        else
                        {
                          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 96))(v35);
                        }
                      }
                      else
                      {
                        *(_QWORD *)(v144 + 48) = v35;
                        if (!v148)
                          goto LABEL_398;
                        if ((*(_BYTE *)(v148 + 22) & 2) != 0)
                        {
                          if (*(_DWORD *)(v148 + 24) == 2)
                          {
                            if ((*(_WORD *)(v148 + 30) & 0x400) == 0)
                              WebCore::Node::removedLastRef((WebCore::Node *)v148, v145);
                          }
                          else
                          {
                            *(_DWORD *)(v148 + 24) -= 2;
                          }
                        }
                        else
                        {
                          (*(void (**)(uint64_t))(*(_QWORD *)v148 + 96))(v148);
                        }
                        if (*(_QWORD *)(v144 + 48))
LABEL_398:
                          (*(void (**)(uint64_t))(*(_QWORD *)v144 + 176))(v144);
                      }
                      if (v214 == (WTF *)v144)
                        goto LABEL_456;
                      v149 = *(unsigned int *)(v144 + 172);
                      v150 = *((unsigned int *)v214 + 43);
                      if (v149 > v150)
                      {
                        v151 = 16 * v149 - 16 * v150;
                        v152 = (WTF::StringImpl **)(*(_QWORD *)(v144 + 160) + 16 * v150 + 8);
                        do
                        {
                          v153 = *v152;
                          *v152 = 0;
                          if (v153)
                          {
                            if (*(_DWORD *)v153 == 2)
                              WTF::StringImpl::destroy(v153, v145);
                            else
                              *(_DWORD *)v153 -= 2;
                          }
                          v154 = *(v152 - 1);
                          *(v152 - 1) = 0;
                          if (v154)
                          {
                            if (*(_DWORD *)v154 == 2)
                              WTF::StringImpl::destroy(v154, v145);
                            else
                              *(_DWORD *)v154 -= 2;
                          }
                          v152 += 2;
                          v151 -= 16;
                        }
                        while (v151);
                        *(_DWORD *)(v144 + 172) = v150;
                        goto LABEL_430;
                      }
                      v164 = *(_DWORD *)(v144 + 168);
                      if (v150 <= v164)
                      {
                        v150 = *(unsigned int *)(v144 + 172);
LABEL_431:
                        v188 = (WTF::StringImpl **)*((_QWORD *)v214 + 20);
                        v189 = *(WTF::StringImpl ***)(v144 + 160);
                        if ((_DWORD)v149)
                        {
                          v190 = &v188[2 * v150];
                          do
                          {
                            v191 = *v188;
                            if (*v188)
                              *(_DWORD *)v191 += 2;
                            v192 = *v189;
                            *v189 = v191;
                            if (v192)
                            {
                              if (*(_DWORD *)v192 == 2)
                                WTF::StringImpl::destroy(v192, v145);
                              else
                                *(_DWORD *)v192 -= 2;
                            }
                            v193 = v188[1];
                            if (v193)
                              *(_DWORD *)v193 += 2;
                            v194 = v189[1];
                            v189[1] = v193;
                            if (v194)
                            {
                              if (*(_DWORD *)v194 == 2)
                                WTF::StringImpl::destroy(v194, v145);
                              else
                                *(_DWORD *)v194 -= 2;
                            }
                            v188 += 2;
                            v189 += 2;
                          }
                          while (v188 != v190);
                          v99 = v214;
                          v188 = (WTF::StringImpl **)*((_QWORD *)v214 + 20);
                          v195 = *(_DWORD *)(v144 + 172);
                          v189 = *(WTF::StringImpl ***)(v144 + 160);
                        }
                        else
                        {
                          v195 = 0;
                          v99 = v214;
                        }
                        v196 = v99[43];
                        if (v195 != (_DWORD)v196)
                        {
                          v197 = &v189[2 * v195];
                          v198 = &v188[2 * v195];
                          do
                          {
                            v199 = *v198;
                            if (*v198)
                              *(_DWORD *)v199 += 2;
                            *v197 = v199;
                            v200 = v198[1];
                            if (v200)
                              *(_DWORD *)v200 += 2;
                            v197[1] = v200;
                            v198 += 2;
                            v197 += 2;
                          }
                          while (v198 != &v188[2 * v196]);
                        }
                        *(_DWORD *)(v144 + 172) = v196;
                        v35 = (uint64_t)v212;
LABEL_456:
                        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 48))(v35, v144);
                        v19 = (*(_BYTE *)(v144 + 20) & 0xC0) != 0;
                        if (*(_DWORD *)(v144 + 16) == 1)
                          (*(void (**)(uint64_t))(*(_QWORD *)v144 + 8))(v144);
                        else
                          --*(_DWORD *)(v144 + 16);
                        goto LABEL_458;
                      }
                      if (v164)
                      {
                        if ((_DWORD)v149)
                        {
                          v165 = 16 * v149;
                          v166 = (WTF::StringImpl **)(*(_QWORD *)(v144 + 160) + 8);
                          do
                          {
                            v167 = *v166;
                            *v166 = 0;
                            if (v167)
                            {
                              if (*(_DWORD *)v167 == 2)
                                WTF::StringImpl::destroy(v167, v145);
                              else
                                *(_DWORD *)v167 -= 2;
                            }
                            v168 = *(v166 - 1);
                            *(v166 - 1) = 0;
                            if (v168)
                            {
                              if (*(_DWORD *)v168 == 2)
                                WTF::StringImpl::destroy(v168, v145);
                              else
                                *(_DWORD *)v168 -= 2;
                            }
                            v166 += 2;
                            v165 -= 16;
                          }
                          while (v165);
                          *(_DWORD *)(v144 + 172) = 0;
                        }
                        v176 = *(WTF **)(v144 + 160);
                        if (v176)
                        {
                          *(_QWORD *)(v144 + 160) = 0;
                          *(_DWORD *)(v144 + 168) = 0;
                          WTF::fastFree(v176, v145);
                        }
                      }
                      v177 = *((unsigned int *)v214 + 43);
                      if (*(_DWORD *)(v144 + 168) >= v177)
                      {
LABEL_429:
                        v150 = *(unsigned int *)(v144 + 172);
LABEL_430:
                        LODWORD(v149) = v150;
                        goto LABEL_431;
                      }
                      if (!(v177 >> 28))
                      {
                        v178 = *(WTF **)(v144 + 160);
                        v179 = *(unsigned int *)(v144 + 172);
                        v180 = WTF::fastMalloc((WTF *)(16 * v177));
                        *(_DWORD *)(v144 + 168) = v177;
                        *(_QWORD *)(v144 + 160) = v180;
                        if ((_DWORD)v179)
                        {
                          v181 = (_QWORD *)v180;
                          v182 = (WTF::StringImpl **)((char *)v178 + 16 * v179);
                          v183 = (WTF::StringImpl **)v178;
                          do
                          {
                            v184 = *v183;
                            *v183 = 0;
                            *v181 = v184;
                            v185 = v183[1];
                            v183[1] = 0;
                            v181[1] = v185;
                            v186 = v183[1];
                            v183[1] = 0;
                            if (v186)
                            {
                              if (*(_DWORD *)v186 == 2)
                                WTF::StringImpl::destroy(v186, v145);
                              else
                                *(_DWORD *)v186 -= 2;
                            }
                            v187 = *v183;
                            *v183 = 0;
                            if (v187)
                            {
                              if (*(_DWORD *)v187 == 2)
                                WTF::StringImpl::destroy(v187, v145);
                              else
                                *(_DWORD *)v187 -= 2;
                            }
                            v183 += 2;
                            v181 += 2;
                          }
                          while (v183 != v182);
                        }
                        if (v178)
                        {
                          if (*(WTF **)(v144 + 160) == v178)
                          {
                            *(_QWORD *)(v144 + 160) = 0;
                            *(_DWORD *)(v144 + 168) = 0;
                          }
                          WTF::fastFree(v178, v145);
                        }
                        goto LABEL_429;
                      }
                      __break(0xC471u);
LABEL_494:
                      JUMPOUT(0x195FAFEF0);
                    }
                  }
                  else
                  {
                    WTF::StringImpl::destroy(v140, v128);
                    if (v142)
                      goto LABEL_313;
                  }
                }
              }
              v19 = 0;
LABEL_458:
              WebCore::PlatformKeyboardEvent::~PlatformKeyboardEvent((WebCore::PlatformKeyboardEvent *)v225, v128);
              goto LABEL_198;
            }
            WebCore::Node::removedLastRef((WebCore::Node *)v35, v78);
          }
          else
          {
            *(_DWORD *)(v35 + 24) -= 2;
          }
          v105 = (_BYTE *)&unk_1EE2F7000;
          goto LABEL_280;
        }
LABEL_131:
        if ((*(_DWORD *)(v66 + 20) & 0x404) == 4)
          *(_DWORD *)(v66 + 20) |= 0x40u;
        goto LABEL_133;
      }
      --*(_DWORD *)v68;
    }
    if (!v48)
      goto LABEL_133;
    goto LABEL_131;
  }
  v19 = !WebCore::Element::dispatchKeyEvent((WebCore::Element *)v35, a2);
LABEL_213:
  WebCore::s_processingUserTypingGesture = v222[0];
  {
    WebCore::focusedNode(void)::node = 0;
  }
  v114 = v223;
  if (v223)
    *((_DWORD *)v223 + 6) += 2;
  v115 = WebCore::focusedNode(void)::node;
  WebCore::focusedNode(void)::node = (uint64_t)v114;
  if (v115)
  {
    if (*(_DWORD *)(v115 + 24) == 2)
    {
      if ((*(_WORD *)(v115 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v115, v55);
        v114 = v223;
      }
    }
    else
    {
      *(_DWORD *)(v115 + 24) -= 2;
    }
  }
  v223 = 0;
  if (v114)
  {
    if (*((_DWORD *)v114 + 6) == 2)
    {
      if ((*((_WORD *)v114 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v114, v55);
    }
    else
    {
      *((_DWORD *)v114 + 6) -= 2;
    }
  }
  WebCore::UserGestureIndicator::~UserGestureIndicator((WebCore::UserGestureIndicator *)&v224);
  if (v35)
  {
    if (*(_DWORD *)(v35 + 24) == 2)
    {
      if ((*(_WORD *)(v35 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v35, a2);
    }
    else
    {
      *(_DWORD *)(v35 + 24) -= 2;
    }
  }
LABEL_226:
  if (*(_DWORD *)(v15 + 24) == 2)
  {
    if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v15, a2);
  }
  else
  {
    *(_DWORD *)(v15 + 24) -= 2;
  }
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  do
  {
    v116 = __ldaxr(v5);
    v117 = v116 - 1;
  }
  while (__stlxr(v117, v5));
  if (!v117)
  {
    atomic_store(1u, v5);
    v169 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v169 = off_1E31FE290;
    *((_QWORD *)v169 + 1) = v5;
    v238[0] = v169;
    WTF::ensureOnMainThread();
    v170 = v238[0];
    v238[0] = 0;
    if (v170)
      (*(void (**)(WTF *))(*(_QWORD *)v170 + 8))(v170);
  }
  return v19;
}

unsigned int *WebCore::EventHandler::capsLockStateMayHaveChanged(unsigned int *this)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 296) + 1248);
  if (v1
    && (*(_WORD *)(v1 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    *(_DWORD *)(v1 + 24) += 2;
    this = (unsigned int *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 240) + 784))(*(_QWORD *)(v1 + 240));
    if (*(_DWORD *)(v1 + 24) == 2)
    {
      if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v1, v2);
    }
    else
    {
      *(_DWORD *)(v1 + 24) -= 2;
    }
  }
  return this;
}

uint64_t WebCore::EventHandler::internalKeyEvent(WebCore::PlatformKeyboardEvent const&)::$_0::operator()(uint64_t result, WTF::StringImpl *a2, uint64_t **this)
{
  _BOOL4 v4;
  int v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  void *v15;
  int v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  WebCore::Element *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;

  if ((_BYTE)a2)
  {
    v4 = 1;
    if ((a2 & 0x18) != 0 && result)
    {
      v5 = *(_DWORD *)result;
      v6 = *(_DWORD *)(result + 4);
      *(_DWORD *)result += 2;
      v4 = v6 == 0;
      if (v5)
        *(_DWORD *)result = v5;
      else
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
    }
  }
  else
  {
    v4 = 0;
  }
  if ((*((_BYTE *)this + 54) & 2) != 0)
  {
    result = WebCore::Element::isUserActionElementFocused((WebCore::Element *)this);
    if (((result ^ 1 | v4) & 1) == 0)
    {
      if ((*((_BYTE *)this + 22) & 8) == 0)
        goto LABEL_30;
      v7 = this[5];
      v8 = v7[1];
      if (!*(_QWORD *)(v8 + 1944) || *(_BYTE *)(v8 + 3405))
        goto LABEL_30;
      if ((*((_BYTE *)this + 70) & 4) != 0)
      {
        v12 = *v7;
        v13 = (*(_WORD *)(v12 + 28) & 0x80) == 0 || v12 == 0;
        v14 = v12 + 216;
        if (v13)
          v14 = v8 + 1328;
        if (!*(_BYTE *)(*(_QWORD *)v14 + 236))
          goto LABEL_30;
      }
      v9 = *(_QWORD *)(v8 + 1272);
      if (v9 && (*(_BYTE *)(v9 + 70) & 4) != 0)
      {
LABEL_30:
        LOBYTE(v19) = 0;
        v21 = 0;
        v22 = 0;
        v20 = (WebCore::Element *)this;
      }
      else
      {
        if (!*(_BYTE *)(v8 + 3362)
          && ((v10 = *(unsigned __int8 *)(v8 + 3390), *(_BYTE *)(v8 + 3390))
           || (*(_BYTE *)(v8 + 70) & 8) != 0
           || *(_QWORD *)(v8 + 1560)
           || (v11 = *(_QWORD *)(v8 + 1328), *(_BYTE *)(v11 + 233))
           || *(_BYTE *)(v11 + 234)))
        {
          v16 = *(unsigned __int8 *)(v8 + 3391);
          if (v10)
            v17 = v16 == 0;
          else
            v17 = 0;
          v18 = !v17;
          LOBYTE(v19) = v18;
          v21 = 0;
          v22 = 0;
          v20 = (WebCore::Element *)this;
          if (v17)
            goto LABEL_31;
        }
        else
        {
          LOBYTE(v19) = 1;
          v21 = 0;
          v22 = 0;
          v20 = (WebCore::Element *)this;
        }
        WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v19, (WTF::StringImpl *)0x1E, 1, 0);
        WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v20, &v21);
      }
LABEL_31:
      WebCore::Element::setHasFocusVisible((uint64_t)this, (void *)1);
      if ((_BYTE)v19)
        WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v20, &v22);
      if (v22)
        WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v22, v15);
      result = (uint64_t)v21;
      if (v21)
        return WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v21, v15);
    }
  }
  return result;
}

uint64_t *WebCore::EventHandler::handleKeyboardSelectionMovementForAccessibility(uint64_t *this, WebCore::KeyboardEvent *a2, WebCore::KeyboardEvent *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore *v9;
  unsigned int *v10;
  unsigned int v11;
  WebCore *v12;

  v4 = this;
  v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v5 || (v6 = *(_QWORD *)(v5 + 96)) == 0)
  {
    this = (uint64_t *)WebCore::threadGlobalDataSlow((WebCore *)this);
    v6 = (uint64_t)this;
  }
  v7 = *(_QWORD *)(v6 + 40);
  if (!v7)
  {
    this = (uint64_t *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v6);
    v7 = *(_QWORD *)(v6 + 40);
  }
  if (*((_QWORD *)a2 + 3) == *(_QWORD *)(v7 + 1048)
    && WebCore::AXObjectCache::gAccessibilityEnhancedUserInterfaceEnabled != 0)
  {
    v9 = *(WebCore **)(v4[1] + 8);
    v10 = (unsigned int *)((char *)v9 + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    v12 = v9;
    WebCore::handleKeyboardSelectionMovement(v9, a2, a3);
    return WTF::Ref<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>::~Ref((uint64_t *)&v12);
  }
  return this;
}

uint64_t WebCore::handleKeyboardSelectionMovement(WebCore *this, WebCore::LocalFrame *a2, WebCore::KeyboardEvent *a3)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  char v7;
  _BOOL4 v8;
  char v9;
  _BOOL4 v10;
  int v11;
  const WTF::AtomString *v12;
  char v13;
  _BOOL8 v14;
  uint64_t result;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;

  v5 = *(_QWORD *)(*((_QWORD *)this + 37) + 3064);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  if ((MEMORY[0x19AEA53F4](v21, "Control", 7) & 1) != 0)
  {
    v7 = 2;
LABEL_10:
    v8 = (*((_BYTE *)a2 + 84) & v7) != 0;
    goto LABEL_11;
  }
  if ((MEMORY[0x19AEA53F4](v21, "Shift", 5) & 1) != 0)
  {
    v7 = 8;
    goto LABEL_10;
  }
  if ((MEMORY[0x19AEA53F4](v21, "Alt", 3) & 1) != 0)
  {
    v7 = 1;
    goto LABEL_10;
  }
  v7 = 4;
  if ((MEMORY[0x19AEA53F4](v21, "Meta", 4) & 1) != 0)
    goto LABEL_10;
  if (MEMORY[0x19AEA53F4](v21, "CapsLock", 8))
  {
    v7 = 16;
    goto LABEL_10;
  }
  v8 = 0;
LABEL_11:
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v6);
    else
      *(_DWORD *)v21 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  if ((MEMORY[0x19AEA53F4](0, "Control", 7) & 1) != 0)
  {
    v9 = 2;
LABEL_23:
    v10 = (*((_BYTE *)a2 + 84) & v9) != 0;
    goto LABEL_24;
  }
  if ((MEMORY[0x19AEA53F4](0, "Shift", 5) & 1) != 0)
  {
    v9 = 8;
    goto LABEL_23;
  }
  if ((MEMORY[0x19AEA53F4](0, "Alt", 3) & 1) != 0)
  {
    v9 = 1;
    goto LABEL_23;
  }
  v9 = 4;
  if ((MEMORY[0x19AEA53F4](0, "Meta", 4) & 1) != 0)
    goto LABEL_23;
  if (MEMORY[0x19AEA53F4](0, "CapsLock", 8))
  {
    v9 = 16;
    goto LABEL_23;
  }
  v10 = 0;
LABEL_24:
  v11 = *(unsigned __int8 *)(v5 + 153);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  if ((MEMORY[0x19AEA53F4](0, "Control", 7) & 1) != 0)
  {
    v13 = 2;
  }
  else if ((MEMORY[0x19AEA53F4](0, "Shift", 5) & 1) != 0)
  {
    v13 = 8;
  }
  else if ((MEMORY[0x19AEA53F4](0, "Alt", 3) & 1) != 0)
  {
    v13 = 1;
  }
  else
  {
    v13 = 4;
    if ((MEMORY[0x19AEA53F4](0, "Meta", 4) & 1) == 0)
    {
      if (!MEMORY[0x19AEA53F4](0, "CapsLock", 8))
      {
        v14 = 0;
        goto LABEL_34;
      }
      v13 = 16;
    }
  }
  v14 = (*((_BYTE *)a2 + 84) & v13) != 0;
LABEL_34:
  result = WebCore::focusDirectionForKey((WebCore::LocalFrame *)((char *)a2 + 112), v12);
  switch((int)result)
  {
    case 0:
    case 1:
    case 2:
      return result;
    case 3:
      if (v8)
        v17 = 9;
      else
        v17 = 3;
      v18 = 1u;
      if (v11)
        goto LABEL_51;
      goto LABEL_56;
    case 4:
      v18 = 0;
      if (v8)
        v17 = 9;
      else
        v17 = 3;
      if (!v11)
        goto LABEL_56;
      goto LABEL_51;
    case 5:
      if (v8)
        v17 = 7;
      else
        v17 = v10;
      v18 = 3u;
      if (v11)
        goto LABEL_51;
      goto LABEL_56;
    case 6:
      if (v8)
        v17 = 7;
      else
        v17 = v10;
      v18 = 2u;
      if (!v11)
        goto LABEL_56;
      goto LABEL_51;
    default:
      v18 = 0u;
      v17 = 0;
      if (v11)
      {
LABEL_51:
        result = WebCore::FrameSelection::modify(v5, v14, v18, v17, 1);
      }
      else
      {
LABEL_56:
        v19 = *((_QWORD *)this + 37);
        if (v19)
        {
          *(_DWORD *)(v19 + 24) += 2;
          if (!*(_BYTE *)(*(_QWORD *)(v19 + 3064) + 153))
          {
            v20 = *(_QWORD *)(v19 + 1248);
            if (v20)
              *(_DWORD *)(v20 + 24) += 2;
            __asm { BR              X10 ; loc_195FB0C20 loc_195FB0C90 }
          }
          if (*(_DWORD *)(v19 + 24) == 2)
          {
            if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
              result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v19, v16);
          }
          else
          {
            *(_DWORD *)(v19 + 24) -= 2;
          }
        }
      }
      *((_DWORD *)a2 + 5) |= 0x80u;
      return result;
  }
}

uint64_t WebCore::focusDirectionForKey(WebCore *this, const WTF::AtomString *a2)
{
  uint64_t v2;
  WebCore *v4;
  WebCore *v5;
  WebCore *v6;
  WebCore *v7;
  const char *v8;
  uint64_t v9;

  {
    v8 = "Down";
    v9 = 5;
    v4 = this;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::focusDirectionForKey(WTF::AtomString const&)::Down, (uint64_t)&v8);
    this = v4;
  }
  {
    v8 = "Up";
    v9 = 3;
    v5 = this;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::focusDirectionForKey(WTF::AtomString const&)::Up, (uint64_t)&v8);
    this = v5;
  }
  {
    v8 = "Left";
    v9 = 5;
    v6 = this;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::focusDirectionForKey(WTF::AtomString const&)::Left, (uint64_t)&v8);
    this = v6;
  }
  {
    v8 = "Right";
    v9 = 6;
    v7 = this;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::focusDirectionForKey(WTF::AtomString const&)::Right, (uint64_t)&v8);
    this = v7;
  }
  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this == WebCore::focusDirectionForKey(WTF::AtomString const&)::Down)
    return 4;
  if (v2 == WebCore::focusDirectionForKey(WTF::AtomString const&)::Up)
    return 3;
  if (v2 == WebCore::focusDirectionForKey(WTF::AtomString const&)::Left)
    return 5;
  if (v2 == WebCore::focusDirectionForKey(WTF::AtomString const&)::Right)
    return 6;
  return 0;
}

void WebCore::EventHandler::defaultKeyboardEventHandler(WebCore::EventHandler *this, WebCore::KeyboardEvent *a2)
{
  WebCore::EventHandler *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unint64_t StatusReg;
  uint64_t v8;
  WebCore::EventHandler *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  WebCore::Document *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  WebCore::KeyboardEvent *v21;
  const WTF::AtomString *v22;
  uint64_t v23;
  WebCore::EventHandler *v24;
  uint64_t v25;
  WebCore *v27;
  unsigned int *v28;
  unsigned int v29;
  WebCore::Document *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WebCore *v34;
  uint64_t v35;
  WebCore::Editor *v36;
  void *v37;
  WebCore::Editor *v38;
  uint64_t v39;
  void *v40;
  WebCore::HTMLDialogElement *active;
  WebCore::Node *v42;
  void *v43;
  WebCore::EventHandler *v44;
  WTF::StringImpl *v45;
  void *v46;
  unsigned int *v47;
  WebCore::Editor *v48;
  void *v49;
  WebCore::Editor *v50;
  uint64_t v51;
  void *v52;
  _BYTE v53[24];
  WebCore *v54;

  v3 = this;
  v4 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v5 = (unsigned int *)(v4 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v8 = *(_QWORD *)(StatusReg + 736);
  if (!v8 || (v9 = *(WebCore::EventHandler **)(v8 + 96)) == 0)
  {
    this = (WebCore::EventHandler *)WebCore::threadGlobalDataSlow(this);
    v9 = this;
  }
  v10 = *((_QWORD *)v9 + 5);
  if (!v10)
  {
    this = (WebCore::EventHandler *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
    v10 = *((_QWORD *)v9 + 5);
  }
  if (*((_QWORD *)a2 + 3) == *(_QWORD *)(v10 + 1048))
  {
    v16 = *(WebCore::Document **)(v4 + 296);
    v17 = *((_QWORD *)v16 + 382);
    if (!v17)
    {
      v36 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v36, v16);
      v38 = (WebCore::Editor *)*((_QWORD *)v16 + 382);
      *((_QWORD *)v16 + 382) = v36;
      if (v38)
      {
        WebCore::Editor::~Editor(v38, v37);
        if (*(_DWORD *)v39)
        {
          *(_QWORD *)(v39 + 496) = 0;
          *(_OWORD *)(v39 + 464) = 0u;
          *(_OWORD *)(v39 + 480) = 0u;
          *(_OWORD *)(v39 + 432) = 0u;
          *(_OWORD *)(v39 + 448) = 0u;
          *(_OWORD *)(v39 + 400) = 0u;
          *(_OWORD *)(v39 + 416) = 0u;
          *(_OWORD *)(v39 + 368) = 0u;
          *(_OWORD *)(v39 + 384) = 0u;
          *(_OWORD *)(v39 + 336) = 0u;
          *(_OWORD *)(v39 + 352) = 0u;
          *(_OWORD *)(v39 + 304) = 0u;
          *(_OWORD *)(v39 + 320) = 0u;
          *(_OWORD *)(v39 + 272) = 0u;
          *(_OWORD *)(v39 + 288) = 0u;
          *(_OWORD *)(v39 + 240) = 0u;
          *(_OWORD *)(v39 + 256) = 0u;
          *(_OWORD *)(v39 + 208) = 0u;
          *(_OWORD *)(v39 + 224) = 0u;
          *(_OWORD *)(v39 + 176) = 0u;
          *(_OWORD *)(v39 + 192) = 0u;
          *(_OWORD *)(v39 + 144) = 0u;
          *(_OWORD *)(v39 + 160) = 0u;
          *(_OWORD *)(v39 + 112) = 0u;
          *(_OWORD *)(v39 + 128) = 0u;
          *(_OWORD *)(v39 + 80) = 0u;
          *(_OWORD *)(v39 + 96) = 0u;
          *(_OWORD *)(v39 + 48) = 0u;
          *(_OWORD *)(v39 + 64) = 0u;
          *(_OWORD *)(v39 + 16) = 0u;
          *(_OWORD *)(v39 + 32) = 0u;
          *(_OWORD *)v39 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v39, v40);
        }
      }
      v17 = *((_QWORD *)v16 + 382);
      v5 = (unsigned int *)(v4 + 8);
    }
    v18 = *(_QWORD *)(v17 + 8);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 8);
      if (v19)
        (*(void (**)(uint64_t, WebCore::KeyboardEvent *))(*(_QWORD *)v19 + 432))(v19, a2);
    }
    if ((*((_BYTE *)a2 + 20) & 0x80) != 0)
      goto LABEL_16;
    if (MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 12), "Escape", 6))
    {
      active = (WebCore::HTMLDialogElement *)WebCore::Document::activeModalDialog(*(WebCore::Document **)(v4 + 296));
      if (active)
      {
        v42 = active;
        *((_DWORD *)active + 6) += 2;
        WebCore::HTMLDialogElement::queueCancelTask(active);
        if (*((_DWORD *)v42 + 6) == 2)
        {
          if ((*((_WORD *)v42 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v42, v43);
        }
        else
        {
          *((_DWORD *)v42 + 6) -= 2;
        }
      }
      this = (WebCore::EventHandler *)WebCore::Document::topmostAutoPopover(*(WebCore::Document **)(v4 + 296));
      if (this)
      {
        v44 = this;
        *((_DWORD *)this + 6) += 2;
        WebCore::HTMLElement::hidePopover(this, (uint64_t)v53);
        this = (WebCore::EventHandler *)WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v53, v45);
        if (*((_DWORD *)v44 + 6) == 2)
        {
          if ((*((_WORD *)v44 + 15) & 0x400) == 0)
            this = (WebCore::EventHandler *)WebCore::Node::removedLastRef(v44, v46);
        }
        else
        {
          *((_DWORD *)v44 + 6) -= 2;
        }
      }
    }
    else
    {
      v20 = (_QWORD *)((char *)a2 + 112);
      if (MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "U+0009", 6))
      {
        this = (WebCore::EventHandler *)WebCore::EventHandler::defaultTabEventHandler(*(_QWORD *)(*((_QWORD *)v3 + 1) + 8), a2);
      }
      else if (MEMORY[0x19AEA53F4](*v20, "U+0008", 6))
      {
        this = (WebCore::EventHandler *)WebCore::EventHandler::defaultBackspaceEventHandler((uint64_t)v3, a2);
      }
      else
      {
        this = (WebCore::EventHandler *)MEMORY[0x19AEA53F4](*v20, "PageDown", 8);
        if ((this & 1) == 0)
        {
          this = (WebCore::EventHandler *)MEMORY[0x19AEA53F4](*v20, "PageUp", 6);
          if ((this & 1) == 0)
          {
            this = (WebCore::EventHandler *)MEMORY[0x19AEA53F4](*v20, "Home", 4);
            if ((this & 1) == 0)
            {
              this = (WebCore::EventHandler *)MEMORY[0x19AEA53F4](*v20, "End", 3);
              if ((this & 1) == 0)
              {
                this = (WebCore::EventHandler *)WebCore::focusDirectionForKey((WebCore::KeyboardEvent *)((char *)a2 + 112), v22);
                if ((_DWORD)this)
                  this = (WebCore::EventHandler *)WebCore::EventHandler::defaultArrowEventHandler((uint64_t)v3, this, (uint64_t)a2);
              }
            }
          }
        }
      }
    }
    v23 = *(_QWORD *)(StatusReg + 736);
    if (!v23 || (v24 = *(WebCore::EventHandler **)(v23 + 96)) == 0)
    {
      this = (WebCore::EventHandler *)WebCore::threadGlobalDataSlow(this);
      v24 = this;
    }
    v25 = *((_QWORD *)v24 + 5);
    if (!v25)
    {
      this = (WebCore::EventHandler *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v24);
      v25 = *((_QWORD *)v24 + 5);
    }
    if (*((_QWORD *)a2 + 3) == *(_QWORD *)(v25 + 1048)
      && WebCore::AXObjectCache::gAccessibilityEnhancedUserInterfaceEnabled != 0)
    {
      v27 = *(WebCore **)(*((_QWORD *)v3 + 1) + 8);
      v28 = (unsigned int *)((char *)v27 + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 + 1, v28));
      v54 = v27;
      WebCore::handleKeyboardSelectionMovement(v27, a2, v21);
      this = (WebCore::EventHandler *)WTF::Ref<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>::~Ref((uint64_t *)&v54);
    }
  }
  v11 = *(_QWORD *)(StatusReg + 736);
  if (!v11 || (v12 = *(_QWORD *)(v11 + 96)) == 0)
    v12 = WebCore::threadGlobalDataSlow(this);
  v13 = *(_QWORD *)(v12 + 40);
  if (!v13)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v12);
    v13 = *(_QWORD *)(v12 + 40);
  }
  if (*((_QWORD *)a2 + 3) == *(_QWORD *)(v13 + 1056))
  {
    v30 = *(WebCore::Document **)(v4 + 296);
    v31 = *((_QWORD *)v30 + 382);
    if (!v31)
    {
      v47 = v5;
      v48 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v48, v30);
      v50 = (WebCore::Editor *)*((_QWORD *)v30 + 382);
      *((_QWORD *)v30 + 382) = v48;
      if (v50)
      {
        WebCore::Editor::~Editor(v50, v49);
        if (*(_DWORD *)v51)
        {
          *(_QWORD *)(v51 + 496) = 0;
          *(_OWORD *)(v51 + 464) = 0u;
          *(_OWORD *)(v51 + 480) = 0u;
          *(_OWORD *)(v51 + 432) = 0u;
          *(_OWORD *)(v51 + 448) = 0u;
          *(_OWORD *)(v51 + 400) = 0u;
          *(_OWORD *)(v51 + 416) = 0u;
          *(_OWORD *)(v51 + 368) = 0u;
          *(_OWORD *)(v51 + 384) = 0u;
          *(_OWORD *)(v51 + 336) = 0u;
          *(_OWORD *)(v51 + 352) = 0u;
          *(_OWORD *)(v51 + 304) = 0u;
          *(_OWORD *)(v51 + 320) = 0u;
          *(_OWORD *)(v51 + 272) = 0u;
          *(_OWORD *)(v51 + 288) = 0u;
          *(_OWORD *)(v51 + 240) = 0u;
          *(_OWORD *)(v51 + 256) = 0u;
          *(_OWORD *)(v51 + 208) = 0u;
          *(_OWORD *)(v51 + 224) = 0u;
          *(_OWORD *)(v51 + 176) = 0u;
          *(_OWORD *)(v51 + 192) = 0u;
          *(_OWORD *)(v51 + 144) = 0u;
          *(_OWORD *)(v51 + 160) = 0u;
          *(_OWORD *)(v51 + 112) = 0u;
          *(_OWORD *)(v51 + 128) = 0u;
          *(_OWORD *)(v51 + 80) = 0u;
          *(_OWORD *)(v51 + 96) = 0u;
          *(_OWORD *)(v51 + 48) = 0u;
          *(_OWORD *)(v51 + 64) = 0u;
          *(_OWORD *)(v51 + 16) = 0u;
          *(_OWORD *)(v51 + 32) = 0u;
          *(_OWORD *)v51 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v51, v52);
        }
      }
      v31 = *((_QWORD *)v30 + 382);
      v5 = v47;
    }
    v32 = *(_QWORD *)(v31 + 8);
    if (v32)
    {
      v33 = *(_QWORD *)(v32 + 8);
      if (v33)
        (*(void (**)(uint64_t, WebCore::KeyboardEvent *))(*(_QWORD *)v33 + 432))(v33, a2);
    }
    if ((*((_BYTE *)a2 + 20) & 0x80) == 0 && WebCore::KeyboardEvent::charCode(a2) == 32)
      WebCore::EventHandler::defaultSpaceEventHandler((uint64_t)v3, a2);
  }
  else if (!v4)
  {
    return;
  }
  do
  {
LABEL_16:
    v14 = __ldaxr(v5);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, v5));
  if (!v15)
  {
    atomic_store(1u, v5);
    v34 = (WebCore *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v34 = off_1E31FE290;
    *((_QWORD *)v34 + 1) = v5;
    v54 = v34;
    WTF::ensureOnMainThread();
    v35 = (uint64_t)v54;
    v54 = 0;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  }
}

uint64_t WebCore::EventHandler::defaultTabEventHandler(uint64_t this, WebCore::KeyboardEvent *a2)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  _DWORD *v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;

  v3 = (unsigned int *)(this + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  if ((*((_BYTE *)a2 + 84) & 6) != 0)
  {
    if (!this)
      return this;
  }
  else
  {
    v5 = *(_QWORD *)(this + 24);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        ++*(_DWORD *)v6;
        if (!*(_BYTE *)(*(_QWORD *)(this + 296) + 3361) && *(_BYTE *)(v6 + 338))
        {
          v9 = *(_DWORD **)(v6 + 72);
          ++*v9;
          if ((*((_BYTE *)a2 + 84) & 8) != 0)
            v10 = 2;
          else
            v10 = 1;
          this = WebCore::FocusController::advanceFocusInDocumentOrder((uint64_t)v9, (void *)v10, a2, 0);
          if (!*v9)
          {
            this = 286;
            __break(0xC471u);
            return this;
          }
          --*v9;
          if ((_DWORD)this)
            *((_DWORD *)a2 + 5) |= 0x80u;
        }
        if (*(_DWORD *)v6 == 1)
        {
          WebCore::Page::~Page(v6);
          this = WTF::fastFree(v11, v12);
        }
        else
        {
          --*(_DWORD *)v6;
        }
      }
    }
  }
  do
  {
    v7 = __ldaxr(v3);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v3));
  if (!v8)
  {
    atomic_store(1u, v3);
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v13 = off_1E31FE290;
    v13[1] = v3;
    v14 = (uint64_t)v13;
    WTF::ensureOnMainThread();
    this = v14;
    if (v14)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  return this;
}

uint64_t WebCore::EventHandler::defaultBackspaceEventHandler(uint64_t this, WebCore::KeyboardEvent *a2)
{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::BackForwardController *v8;
  WTF *v9;
  void *v10;
  WebCore::Editor *v11;
  void *v12;
  WebCore::Editor *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;

  if ((*((_BYTE *)a2 + 84) & 7) == 0)
  {
    v3 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(this + 8) + 8) + 296);
    v4 = *((_QWORD *)v3 + 382);
    if (!v4)
    {
      v16 = this;
      v11 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v11, v3);
      v13 = (WebCore::Editor *)*((_QWORD *)v3 + 382);
      *((_QWORD *)v3 + 382) = v11;
      if (v13)
      {
        WebCore::Editor::~Editor(v13, v12);
        if (*(_DWORD *)v14)
        {
          *(_QWORD *)(v14 + 496) = 0;
          *(_OWORD *)(v14 + 464) = 0u;
          *(_OWORD *)(v14 + 480) = 0u;
          *(_OWORD *)(v14 + 432) = 0u;
          *(_OWORD *)(v14 + 448) = 0u;
          *(_OWORD *)(v14 + 400) = 0u;
          *(_OWORD *)(v14 + 416) = 0u;
          *(_OWORD *)(v14 + 368) = 0u;
          *(_OWORD *)(v14 + 384) = 0u;
          *(_OWORD *)(v14 + 336) = 0u;
          *(_OWORD *)(v14 + 352) = 0u;
          *(_OWORD *)(v14 + 304) = 0u;
          *(_OWORD *)(v14 + 320) = 0u;
          *(_OWORD *)(v14 + 272) = 0u;
          *(_OWORD *)(v14 + 288) = 0u;
          *(_OWORD *)(v14 + 240) = 0u;
          *(_OWORD *)(v14 + 256) = 0u;
          *(_OWORD *)(v14 + 208) = 0u;
          *(_OWORD *)(v14 + 224) = 0u;
          *(_OWORD *)(v14 + 176) = 0u;
          *(_OWORD *)(v14 + 192) = 0u;
          *(_OWORD *)(v14 + 144) = 0u;
          *(_OWORD *)(v14 + 160) = 0u;
          *(_OWORD *)(v14 + 112) = 0u;
          *(_OWORD *)(v14 + 128) = 0u;
          *(_OWORD *)(v14 + 80) = 0u;
          *(_OWORD *)(v14 + 96) = 0u;
          *(_OWORD *)(v14 + 48) = 0u;
          *(_OWORD *)(v14 + 64) = 0u;
          *(_OWORD *)(v14 + 16) = 0u;
          *(_OWORD *)(v14 + 32) = 0u;
          *(_OWORD *)v14 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v14, v15);
        }
      }
      this = v16;
      v4 = *((_QWORD *)v3 + 382);
    }
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 8) + 680) + 370) != 2)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(this + 8) + 8);
      v6 = *(_QWORD *)(v5 + 24);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          ++*(_DWORD *)v7;
          if ((*(_QWORD *)(*(_QWORD *)(v5 + 136) + 664) & 0x8000000000) == 0)
            goto LABEL_12;
          v8 = *(WebCore::BackForwardController **)(v7 + 136);
          if ((*((_BYTE *)a2 + 84) & 8) != 0)
          {
            this = WebCore::BackForwardController::goForward(v8);
            if ((this & 1) == 0)
              goto LABEL_12;
          }
          else
          {
            this = WebCore::BackForwardController::goBack(v8);
            if (!(_DWORD)this)
            {
LABEL_12:
              if (*(_DWORD *)v7 == 1)
              {
                WebCore::Page::~Page(v7);
                return WTF::fastFree(v9, v10);
              }
              else
              {
                --*(_DWORD *)v7;
              }
              return this;
            }
          }
          *((_DWORD *)a2 + 5) |= 0x80u;
          goto LABEL_12;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::EventHandler::defaultArrowEventHandler(uint64_t result, void *a2, uint64_t a3)
{
  WebCore::EventHandler *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  int v18;
  const WebCore::KeyboardEvent *v19;
  unsigned __int16 v20;
  const WebCore::KeyboardEvent *v21;
  __int16 v22;
  __int16 v23;
  unsigned __int16 v24;
  __int16 v25;
  __int16 v26;
  char v27;
  BOOL v28;
  WTF *v29;
  void *v30;
  _QWORD *v31;
  _QWORD *v32;

  v5 = (WebCore::EventHandler *)result;
  v6 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8);
  v7 = (unsigned int *)(v6 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  if (v6)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v6 + 136) + 696);
    do
    {
      v10 = __ldaxr(v7);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v7));
    if (!v11)
    {
      atomic_store(1u, v7);
      v31 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v31 = off_1E31FE290;
      v31[1] = v7;
      v32 = v31;
      WTF::ensureOnMainThread();
      result = (uint64_t)v32;
      if (v32)
        result = (*(uint64_t (**)(_QWORD *))(*v32 + 8))(v32);
    }
    if ((v9 & 0x8000000000) != 0)
    {
      if ((*(_BYTE *)(a3 + 84) & 0xE) != 0)
        return result;
      v13 = *(_QWORD *)(*((_QWORD *)v5 + 1) + 8);
      v14 = *(_QWORD *)(v13 + 24);
      if (!v14)
        return result;
      v15 = *(_QWORD *)(v14 + 8);
      if (!v15)
        return result;
      ++*(_DWORD *)v15;
      if (!*(_BYTE *)(*(_QWORD *)(v13 + 296) + 3361))
      {
        v16 = *(int **)(v15 + 72);
        v17 = *v16;
        v18 = *v16 + 1;
        *v16 = v18;
        if (((_DWORD)a2 - 3) < 4)
        {
          result = WebCore::FocusController::advanceFocusDirectionally((uint64_t)v16, (uint64_t)a2, a3);
          goto LABEL_44;
        }
        if (((_DWORD)a2 - 1) <= 1)
        {
          result = WebCore::FocusController::advanceFocusInDocumentOrder((uint64_t)v16, a2, (WebCore::Node *)a3, 0);
LABEL_44:
          if (*v16)
          {
            --*v16;
            if ((_DWORD)result)
              *(_DWORD *)(a3 + 20) |= 0x80u;
            goto LABEL_49;
          }
LABEL_55:
          __break(0xC471u);
          JUMPOUT(0x195FB1B20);
        }
        if (!v18)
          goto LABEL_55;
        *v16 = v17;
      }
LABEL_49:
      if (*(_DWORD *)v15 == 1)
      {
        WebCore::Page::~Page(v15);
        return WTF::fastFree(v29, v30);
      }
      else
      {
        --*(_DWORD *)v15;
      }
      return result;
    }
  }
  v12 = 0;
  switch((int)a2)
  {
    case 0:
    case 1:
    case 2:
      __break(0xC471u);
      JUMPOUT(0x195FB1B40);
    case 4:
      v12 = 1;
      break;
    case 5:
      v12 = 2;
      break;
    case 6:
      v12 = 3;
      break;
    default:
      break;
  }
  if (WebCore::EventHandler::shouldUseSmoothKeyboardScrollingForFocusedScrollableArea(v5))
  {
    v20 = WebCore::keyboardScrollingKeyForKeyboardEvent((WebCore *)a3, v19);
    if (v20 >= 0x100u)
    {
      v23 = 256;
      v22 = 2;
      switch((char)v20)
      {
        case 0:
          break;
        case 1:
          v23 = 256;
          v22 = 3;
          break;
        case 2:
        case 5:
        case 7:
          v22 = 0;
          goto LABEL_28;
        case 3:
        case 6:
        case 8:
          v23 = 256;
          v22 = 1;
          break;
        case 4:
          v22 = ((*(unsigned __int8 *)(a3 + 84) >> 3) & 1) == 0;
LABEL_28:
          v23 = 256;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x195FB1B60);
      }
    }
    else
    {
      v22 = 0;
      v23 = 0;
    }
    v24 = WebCore::keyboardScrollingKeyForKeyboardEvent((WebCore *)a3, v21);
    if (v24 >= 0x100u)
    {
      v25 = 1;
      v26 = 256;
      switch((char)v24)
      {
        case 0:
        case 1:
          v27 = *(_BYTE *)(a3 + 84);
          v28 = (v27 & 0xC) == 0;
          v25 = v27 & 1;
          if (!v28)
            v25 = 0;
          v26 = v28 << 8;
          break;
        case 2:
        case 3:
          if ((*(_BYTE *)(a3 + 84) & 4) != 0)
            v25 = 2;
          else
            v25 = *(_BYTE *)(a3 + 84) & 1;
          goto LABEL_39;
        case 4:
        case 5:
        case 6:
          break;
        case 7:
        case 8:
          v25 = 2;
LABEL_39:
          v26 = 256;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x195FB1B80);
      }
    }
    else
    {
      v25 = 0;
      v26 = 0;
    }
    result = WebCore::EventHandler::keyboardScrollRecursively((uint64_t)v5, v23 | v22, v26 | v25, 0, *(unsigned __int8 *)(a3 + 124));
    if ((result & 1) != 0)
      goto LABEL_41;
  }
  else
  {
    result = WebCore::EventHandler::logicalScrollRecursively((uint64_t)v5, (void *)v12, 0, 0);
    if ((_DWORD)result)
LABEL_41:
      *(_DWORD *)(a3 + 20) |= 0x80u;
  }
  return result;
}

uint64_t WebCore::EventHandler::defaultSpaceEventHandler(uint64_t this, WebCore::KeyboardEvent *a2)
{
  WebCore::EventHandler *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _BOOL4 v8;
  unsigned int v9;
  unsigned int v10;
  _DWORD *v11;
  const WebCore::KeyboardEvent *v12;
  unsigned __int16 v13;
  const WebCore::KeyboardEvent *v14;
  unsigned __int16 v15;
  uint64_t v16;
  int v17;
  int v18;
  char v19;
  BOOL v20;
  int v21;
  int v22;
  char v23;
  char v24;
  unsigned __int8 v25;
  _DWORD *v26;
  uint64_t v27;
  int8x16_t v28;
  double v29;
  int8x16_t v30;
  _BOOL4 v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t v40;
  void *v41;
  unsigned int v42;
  char v43;
  unsigned int v44;
  unsigned int v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;

  v3 = (WebCore::EventHandler *)this;
  v4 = *(_QWORD *)(*(_QWORD *)(this + 8) + 8);
  v5 = (unsigned int *)(v4 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = *((unsigned __int8 *)a2 + 84);
  if ((v7 & 7) != 0)
  {
LABEL_6:
    if (!v4)
      return this;
    goto LABEL_7;
  }
  v8 = ((v7 >> 3) & 1) == 0;
  this = WebCore::EventHandler::logicalScrollOverflow(this, (void *)(((v7 >> 3) & 1) == 0), 1, 0);
  if ((_DWORD)this)
  {
    *((_DWORD *)a2 + 5) |= 0x80u;
    goto LABEL_6;
  }
  v11 = *(_DWORD **)(v4 + 288);
  if (v11)
  {
    ++v11[2];
    if (WebCore::EventHandler::shouldUseSmoothKeyboardScrollingForFocusedScrollableArea(v3))
    {
      v13 = WebCore::keyboardScrollingKeyForKeyboardEvent(a2, v12);
      v15 = v13;
      if (v13 >= 0x100u)
      {
        v16 = 2;
        switch((char)v13)
        {
          case 0:
            goto LABEL_15;
          case 1:
            v16 = 3;
            goto LABEL_15;
          case 2:
          case 5:
          case 7:
            break;
          case 3:
          case 6:
          case 8:
            v16 = 1;
            goto LABEL_15;
          case 4:
            v16 = ((*((unsigned __int8 *)a2 + 84) >> 3) & 1) == 0;
            goto LABEL_15;
          default:
            __break(0xC471u);
            JUMPOUT(0x195FB2104);
        }
      }
      v16 = 0;
LABEL_15:
      this = WebCore::keyboardScrollingKeyForKeyboardEvent(a2, v14);
      if ((unsigned __int16)this < 0x100u)
        goto LABEL_69;
      v17 = 1;
      v18 = 1;
      switch((char)this)
      {
        case 0:
        case 1:
          v19 = *((_BYTE *)a2 + 84);
          v20 = (v19 & 0xC) == 0;
          v18 = v20;
          v21 = v19 & 1;
          if (v20)
            v17 = v21;
          else
            v17 = 0;
          break;
        case 2:
        case 3:
          if ((*((_BYTE *)a2 + 84) & 4) != 0)
            v17 = 2;
          else
            v17 = *((_BYTE *)a2 + 84) & 1;
          v18 = 1;
          break;
        case 4:
        case 5:
        case 6:
          break;
        case 7:
        case 8:
          v17 = 2;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x195FB2124);
      }
      if (v15 < 0x100u || !v18)
        goto LABEL_69;
      v36 = *((unsigned __int8 *)a2 + 124);
      v37 = *(_QWORD *)(*((_QWORD *)v3 + 1) + 8);
      v38 = (unsigned int *)(v37 + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 + 1, v38));
      v40 = *(_QWORD *)(v37 + 296);
      if (v40)
      {
        *(_DWORD *)(v40 + 24) += 2;
        WebCore::Document::updateLayout(v40, 2u, 0);
        if (*(_DWORD *)(v40 + 24) == 2)
        {
          if ((*(_WORD *)(v40 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v40, v41);
        }
        else
        {
          *(_DWORD *)(v40 + 24) -= 2;
        }
      }
      else
      {
        WebCore::Document::updateLayout(0, 2u, 0);
      }
      this = WebCore::EventHandler::startKeyboardScrollAnimationOnEnclosingScrollableContainer((uint64_t)v3, (void *)v16, v17, 0, v36 != 0);
      if (!(_DWORD)this)
      {
        this = WebCore::EventHandler::startKeyboardScrollAnimationOnDocument((uint64_t)v3, (void *)v16, v17, v36 != 0);
        v43 = this;
        do
        {
          v44 = __ldaxr(v38);
          v45 = v44 - 1;
        }
        while (__stlxr(v45, v38));
        if (v45)
          goto LABEL_67;
        goto LABEL_80;
      }
      do
        v42 = __ldaxr(v38);
      while (__stlxr(v42 - 1, v38));
      if (v42 == 1)
      {
        v43 = 1;
LABEL_80:
        atomic_store(1u, v38);
        v47 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v47 = off_1E31FE290;
        v47[1] = v38;
        v49 = (uint64_t)v47;
        WTF::ensureOnMainThread();
        this = v49;
        if (v49)
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
LABEL_67:
        if ((v43 & 1) == 0)
          goto LABEL_69;
      }
    }
    else
    {
      v22 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v11 + 624))(v11);
      this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v11 + 632))(v11);
      if ((_DWORD)this)
        v23 = 2;
      else
        v23 = 3;
      if (v22)
        v23 = this ^ 1;
      if ((_DWORD)this)
        v24 = 3;
      else
        v24 = 2;
      if (v22)
        v24 = this;
      if (v8)
        v25 = v23;
      else
        v25 = v24;
      if (*((_QWORD *)v11 + 5))
        goto LABEL_69;
      v26 = v11 + 16;
      v27 = v25 >= 2u ? 49 : 50;
      this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v26 + 8 * v27))(v11 + 16);
      if (!this)
        goto LABEL_69;
      *(float *)v28.i32 = (float)*(int *)(this + 108);
      if (v25 <= 1u)
        (*(void (**)(_DWORD *, float))(*(_QWORD *)v26 + 744))(v11 + 16, *(float *)v28.i32);
      v31 = v25 < 2u;
      *(float *)&v29 = -*(float *)v28.i32;
      if ((v25 & 1) != 0)
        v32 = *(float *)v28.i32;
      else
        v32 = -*(float *)v28.i32;
      v33 = *((_QWORD *)v11 + 10);
      if (!v33)
      {
        v33 = WTF::fastMalloc((WTF *)0xB0);
        *(_QWORD *)v33 = off_1E3405EF0;
        *(_QWORD *)(v33 + 8) = v26;
        *(_QWORD *)(v33 + 16) = 0;
        *(_QWORD *)(v33 + 24) = &off_1E3406D78;
        *(_OWORD *)(v33 + 32) = 0u;
        *(_OWORD *)(v33 + 48) = 0u;
        *(_OWORD *)(v33 + 64) = 0u;
        *(_QWORD *)(v33 + 80) = 0;
        *(_QWORD *)(v33 + 88) = v33;
        *(_QWORD *)(v33 + 96) = 0;
        *(_QWORD *)(v33 + 104) = 0;
        *(_QWORD *)(v33 + 110) = 0;
        *(_QWORD *)(v33 + 120) = 0;
        v34 = WTF::fastMalloc((WTF *)0x20);
        *(_QWORD *)v34 = 0;
        *(_DWORD *)(v34 + 8) = 0;
        *(_QWORD *)(v34 + 16) = v26;
        *(_BYTE *)(v34 + 24) = 0;
        *(_QWORD *)(v33 + 128) = v34;
        *(_BYTE *)(v33 + 136) = 0;
        *(_QWORD *)v33 = off_1E3354B08;
        *(_QWORD *)(v33 + 168) = 0;
        *(_DWORD *)(v33 + 140) = 0;
        *(_DWORD *)(v33 + 143) = 0;
        *(_QWORD *)(v33 + 156) = 0;
        *(_QWORD *)(v33 + 148) = 0;
        v35 = *((_QWORD *)v11 + 10);
        *((_QWORD *)v11 + 10) = v33;
        if (v35)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
          v33 = *((_QWORD *)v11 + 10);
        }
      }
      *(float *)v28.i32 = v32;
      this = WebCore::ScrollAnimator::singleAxisScroll(v33, v31, 1, v28, v29, v30);
      if (!(_DWORD)this)
        goto LABEL_69;
    }
    *((_DWORD *)a2 + 5) |= 0x80u;
LABEL_69:
    if (v11[2] == 1)
      this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
    else
      --v11[2];
    goto LABEL_7;
  }
  do
  {
LABEL_7:
    v9 = __ldaxr(v5);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v5));
  if (!v10)
  {
    atomic_store(1u, v5);
    v46 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v46 = off_1E31FE290;
    v46[1] = v5;
    v48 = (uint64_t)v46;
    WTF::ensureOnMainThread();
    this = v48;
    if (v48)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  }
  return this;
}

WTF *WebCore::EventHandler::dragCancelled(WTF *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 24);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      ++*(_DWORD *)v2;
      v3 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v3 = off_1E33FE7F0;
      v15 = v3;
      v4 = *(_QWORD *)(v2 + 160);
      v5 = (unsigned int *)(v4 + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
      WebCore::Page::forEachDocumentFromMainFrame(v4, &v15);
      do
      {
        v7 = __ldaxr(v5);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v5));
      if (!v8)
      {
        atomic_store(1u, v5);
        v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v13 = off_1E31FE290;
        v13[1] = v5;
        v16 = v13;
        WTF::ensureOnMainThread();
        v14 = v16;
        v16 = 0;
        if (v14)
          (*(void (**)(_QWORD *))(*v14 + 8))(v14);
      }
      this = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      v9 = *(_QWORD *)(v2 + 160);
      if (v9)
      {
        if (!*(_BYTE *)(v9 + 144))
        {
          v10 = *(_QWORD *)(v9 + 296);
          if (v10)
          {
            this = *(WTF **)(v10 + 1944);
            if (this)
              this = WebCore::RenderView::repaintRootContents(this);
          }
        }
      }
      if (*(_DWORD *)v2 == 1)
      {
        WebCore::Page::~Page(v2);
        return (WTF *)WTF::fastFree(v11, v12);
      }
      else
      {
        --*(_DWORD *)v2;
      }
    }
  }
  return this;
}

double WebCore::EventHandler::didStartDrag(WebCore::EventHandler *this, void *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  double result;
  WebCore::Node *v11;
  WebCore::Node *v12;
  WebCore::DocumentMarkerController *v13;
  uint64_t v14;
  WebCore::RenderView *v15;
  int v16;
  WebCore::Node *v17;
  WebCore::Node *v18;
  WebCore::Node *v19;
  int v20;
  WebCore::Node *v21;
  int v22;
  char v23;
  WebCore::Node *v24[2];
  WebCore::Node *v25;
  char v26;

  {
    result = 0.0;
    WebCore::EventHandler::dragState(void)::state = 0u;
    *(_OWORD *)&qword_1EE2F7E10 = 0u;
    return result;
  }
  v2 = WebCore::EventHandler::dragState(void)::state;
  if ((_QWORD)WebCore::EventHandler::dragState(void)::state)
  {
    v3 = *(_DWORD *)(WebCore::EventHandler::dragState(void)::state + 24);
    *(_DWORD *)(WebCore::EventHandler::dragState(void)::state + 24) = v3 + 2;
    if ((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) == 0)
      goto LABEL_34;
    if ((*(_BYTE *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
    }
    else
    {
      LOBYTE(v24[0]) = 0;
      v26 = 0;
      if ((BYTE9(WebCore::EventHandler::dragState(void)::state) & 8) != 0)
      {
        WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 296)+ 3064)+ 56), &v19);
      }
      else
      {
        v5 = *(_QWORD *)(v2 + 32);
        if (v5)
        {
          v6 = *(_DWORD *)(v5 + 24);
          v7 = *(_QWORD *)(v2 + 48) & 0xFFFFFFFFFFFFLL;
          if (v7)
          {
            v8 = 0;
            do
            {
              ++v8;
              v7 = *(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFLL;
            }
            while (v7);
          }
          else
          {
            v8 = 0;
          }
          *(_DWORD *)(v5 + 24) = v6 + 6;
          v19 = (WebCore::Node *)v5;
          v20 = v8;
          v21 = (WebCore::Node *)v5;
          v22 = v8 + 1;
          v23 = 1;
          v9 = v6 + 4;
          if (v9)
          {
            *(_DWORD *)(v5 + 24) = v9;
          }
          else if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
          }
        }
        else
        {
          LOBYTE(v19) = 0;
          v23 = 0;
        }
      }
      std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>((uint64_t)v24, (uint64_t *)&v19);
      if (v23)
      {
        v11 = v21;
        v21 = 0;
        if (v11)
        {
          if (*((_DWORD *)v11 + 6) == 2)
          {
            if ((*((_WORD *)v11 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v11, a2);
          }
          else
          {
            *((_DWORD *)v11 + 6) -= 2;
          }
        }
        v12 = v19;
        v19 = 0;
        if (v12)
        {
          if (*((_DWORD *)v12 + 6) == 2)
          {
            if ((*((_WORD *)v12 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v12, a2);
          }
          else
          {
            *((_DWORD *)v12 + 6) -= 2;
          }
        }
      }
      if (!v26)
        goto LABEL_33;
      v13 = *(WebCore::DocumentMarkerController **)(*(_QWORD *)(*((_QWORD *)v24[0] + 5) + 8) + 1496);
      if (v13
        || (v13 = (WebCore::DocumentMarkerController *)WebCore::Document::ensureMarkers(*(WebCore::Document **)(*((_QWORD *)v24[0] + 5) + 8)),
            v26))
      {
        WebCore::DocumentMarkerController::addDraggedContentMarker(v13, (const WebCore::SimpleRange *)v24);
        v14 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 296);
        if (!v14 || (v15 = *(WebCore::RenderView **)(v14 + 1944)) == 0)
        {
LABEL_26:
          if (v26)
          {
            v17 = v25;
            v25 = 0;
            if (v17)
            {
              if (*((_DWORD *)v17 + 6) == 2)
              {
                if ((*((_WORD *)v17 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v17, a2);
              }
              else
              {
                *((_DWORD *)v17 + 6) -= 2;
              }
            }
            v18 = v24[0];
            v24[0] = 0;
            if (v18)
            {
              if (*((_DWORD *)v18 + 6) == 2)
              {
                if ((*((_WORD *)v18 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v18, a2);
              }
              else
              {
                *((_DWORD *)v18 + 6) -= 2;
              }
            }
          }
LABEL_33:
          v3 = *(_DWORD *)(v2 + 24) - 2;
LABEL_34:
          if (v3)
          {
            *(_DWORD *)(v2 + 24) = v3;
          }
          else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
          }
          return result;
        }
        ++*((_DWORD *)v15 + 4);
        WebCore::RenderView::repaintRootContents(v15);
        v16 = *((_DWORD *)v15 + 4);
        if (v16)
        {
          *((_DWORD *)v15 + 4) = v16 - 1;
          goto LABEL_26;
        }
LABEL_54:
        __break(0xC471u);
        JUMPOUT(0x195FB2544);
      }
    }
    __break(1u);
    goto LABEL_54;
  }
  return result;
}

WTF::StringImpl *WebCore::EventHandler::dragSourceEndedAt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W3>, uint64_t a4@<X8>)
{
  void *v8;
  void *v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;
  _QWORD *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  WebCore *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  WebCore::DataTransfer *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  WebCore::RenderView *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *result;
  WTF *v46;
  void *v47;
  WTF *v48;
  void *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _BYTE v57[104];
  WTF::StringImpl *v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  LODWORD(v56) = 264;
  BYTE4(v56) = 1;
  WebCore::EventHandler::prepareMouseEvent((uint64_t)v57, a1, (const WebCore::IntPoint *)&v56, a2);
  WebCore::EventHandler::subframeForHitTestResult((uint64_t)v57, v8, &v54);
  v11 = v54;
  if (v54)
  {
    v12 = *(unsigned __int8 *)(v54 + 144);
    v54 = 0;
    if (v12)
    {
      v13 = v61;
      v14 = (((int)(v60 - (v10 & 0xFFFFFFC0) + 32) >> 6) + v60 / 64);
      *(_OWORD *)a4 = *(_OWORD *)(v11 + 32);
      *(_QWORD *)(a4 + 16) = v14 | ((unint64_t)(((int)(v13 - (v10 & 0xFFFFFFC0) + 32) >> 6)
                                                                   + v13 / 64) << 32);
      *(_BYTE *)(a4 + 24) = 1;
      v15 = (unsigned int *)(v11 + 8);
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v15);
        v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v18 = off_1E31FE290;
        v18[1] = v15;
        v56 = v18;
        WTF::ensureOnMainThread();
        v19 = v56;
        v56 = 0;
        if (v19)
          (*(void (**)(_QWORD *))(*v19 + 8))(v19);
      }
      goto LABEL_54;
    }
    v20 = (unsigned int *)(v11 + 8);
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v20);
      v50 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v50 = off_1E31FE290;
      v50[1] = v20;
      v56 = v50;
      WTF::ensureOnMainThread();
      v51 = v56;
      v56 = 0;
      if (v51)
        (*(void (**)(_QWORD *))(*v51 + 8))(v51);
    }
  }
  else
  {
    v54 = 0;
  }
  {
    WebCore::EventHandler::dragState(void)::state = 0u;
    *(_OWORD *)&qword_1EE2F7E10 = 0u;
    goto LABEL_72;
  }
  if ((_QWORD)WebCore::EventHandler::dragState(void)::state)
    v23 = qword_1EE2F7E10 == 0;
  else
    v23 = 1;
  if (v23 || BYTE8(WebCore::EventHandler::dragState(void)::state) == 0)
    goto LABEL_30;
  v25 = WebCore::DataTransfer::setDestinationOperationMask(qword_1EE2F7E10);
  v26 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v26 || (v27 = *(_QWORD *)(v26 + 96)) == 0)
    v27 = WebCore::threadGlobalDataSlow(v25);
  v28 = *(_QWORD *)(v27 + 40);
  if (!v28)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v27);
    v28 = *(_QWORD *)(v27 + 40);
  }
  {
    v29 = WebCore::EventHandler::dragState(void)::state;
    if ((_QWORD)WebCore::EventHandler::dragState(void)::state)
    {
      v30 = (_DWORD *)qword_1EE2F7E10;
      if (qword_1EE2F7E10)
      {
        if (BYTE8(WebCore::EventHandler::dragState(void)::state))
        {
          *(_DWORD *)(WebCore::EventHandler::dragState(void)::state + 24) += 2;
          WebCore::EventHandler::dispatchDragEvent(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 8), (uint64_t *)(v28 + 664), (WebCore::Node *)v29, a2, v30);
          if (*(_DWORD *)(v29 + 24) == 2)
          {
            if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v29, v9);
          }
          else
          {
            *(_DWORD *)(v29 + 24) -= 2;
          }
        }
      }
    }
LABEL_30:
    {
      v31 = (WebCore::DataTransfer *)qword_1EE2F7E10;
      if (qword_1EE2F7E10)
      {
        *(_DWORD *)(qword_1EE2F7E10 + 24) = 0;
        qword_1EE2F7E10 = 0;
        if (*(_DWORD *)v31 == 1)
        {
          WebCore::DataTransfer::~DataTransfer(v31, v9);
          WTF::fastFree(v46, v47);
        }
        else
        {
          --*(_DWORD *)v31;
        }
      }
      goto LABEL_34;
    }
  }
  WebCore::EventHandler::dragState(void)::state = 0u;
  *(_OWORD *)&qword_1EE2F7E10 = 0u;
LABEL_72:
LABEL_34:
  if ((a3 & 1) == 0)
  {
    v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 24);
    if (v32)
    {
      v33 = *(_QWORD *)(v32 + 8);
      if (v33)
      {
        ++*(_DWORD *)v33;
        v34 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v34 = off_1E33FE7F0;
        v55 = v34;
        v35 = *(_QWORD *)(v33 + 160);
        v36 = (unsigned int *)(v35 + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 + 1, v36));
        WebCore::Page::forEachDocumentFromMainFrame(v35, &v55);
        do
        {
          v38 = __ldaxr(v36);
          v39 = v38 - 1;
        }
        while (__stlxr(v39, v36));
        if (!v39)
        {
          atomic_store(1u, v36);
          v52 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v52 = off_1E31FE290;
          v52[1] = v36;
          v56 = v52;
          WTF::ensureOnMainThread();
          v53 = v56;
          v56 = 0;
          if (v53)
            (*(void (**)(_QWORD *))(*v53 + 8))(v53);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
        v40 = *(_QWORD *)(v33 + 160);
        if (v40)
        {
          if (!*(_BYTE *)(v40 + 144))
          {
            v41 = *(_QWORD *)(v40 + 296);
            if (v41)
            {
              v42 = *(WebCore::RenderView **)(v41 + 1944);
              if (v42)
                WebCore::RenderView::repaintRootContents(v42);
            }
          }
        }
        if (*(_DWORD *)v33 == 1)
        {
          WebCore::Page::~Page(v33);
          WTF::fastFree(v48, v49);
        }
        else
        {
          --*(_DWORD *)v33;
        }
      }
    }
  }
  {
    v43 = WebCore::EventHandler::dragState(void)::state;
    *(_QWORD *)&WebCore::EventHandler::dragState(void)::state = 0;
    if (v43)
    {
      if (*(_DWORD *)(v43 + 24) == 2)
      {
        if ((*(_WORD *)(v43 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v43, v9);
      }
      else
      {
        *(_DWORD *)(v43 + 24) -= 2;
      }
    }
  }
  else
  {
    WebCore::EventHandler::dragState(void)::state = 0u;
    *(_OWORD *)&qword_1EE2F7E10 = 0u;
  }
  *(_BYTE *)(a1 + 704) = 0;
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 24) = 0;
LABEL_54:
  WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)&v59, v9);
  result = v58;
  v58 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v44);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::EventHandler::handleTextInputEvent(uint64_t a1, WebCore::Document *a2, uint64_t a3, int a4)
{
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  WTF::StringImpl *v13;
  WTF *v14;
  WebCore *v15;
  WebCore *v16;
  _DWORD *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  WebCore *v26;
  WebCore *v27;
  WTF *v28;
  WebCore *v29;

  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v8 = (unsigned int *)(v7 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  if (a3)
  {
    v10 = *(_QWORD *)(a3 + 48);
  }
  else
  {
    v11 = *(_QWORD *)(v7 + 296);
    if (v11)
    {
      *(_DWORD *)(v11 + 24) += 2;
      v10 = WebCore::eventTargetElementForDocument(v11, a2);
      if (*(_DWORD *)(v11 + 24) == 2)
      {
        if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v11);
      }
      else
      {
        *(_DWORD *)(v11 + 24) -= 2;
      }
    }
    else
    {
      v10 = WebCore::eventTargetElementForDocument(0, a2);
    }
  }
  if (v10)
  {
    v12 = *(WTF **)(v7 + 112);
    ++*(_DWORD *)v12;
    v28 = v12;
    WebCore::TextEvent::create((uint64_t *)&v28, (_DWORD **)a2, a4, &v29);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 1)
      {
        v22 = (uint64_t *)*((_QWORD *)v14 + 2);
        *((_QWORD *)v14 + 2) = 0;
        if (v22)
        {
          if (*v22)
            WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v22, v13);
          WTF::fastFree((WTF *)v22, v13);
        }
        v23 = (unsigned int *)*((_QWORD *)v14 + 1);
        *((_QWORD *)v14 + 1) = 0;
        if (v23)
        {
          do
          {
            v24 = __ldaxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25)
          {
            atomic_store(1u, v23);
            WTF::fastFree((WTF *)v23, v13);
          }
        }
        WTF::fastFree(v14, v13);
      }
      else
      {
        --*(_DWORD *)v14;
      }
    }
    v15 = v29;
    if (a3)
    {
      v16 = (WebCore *)a3;
      while (v16 != v29)
      {
        v16 = (WebCore *)*((_QWORD *)v16 + 8);
        if (!v16)
        {
          ++*(_DWORD *)(a3 + 16);
          goto LABEL_17;
        }
      }
    }
    else
    {
LABEL_17:
      v17 = (_DWORD *)*((_QWORD *)v15 + 8);
      *((_QWORD *)v15 + 8) = a3;
      if (v17)
      {
        if (v17[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
        else
          --v17[4];
      }
    }
    (*(void (**)(uint64_t, WebCore *))(*(_QWORD *)v10 + 48))(v10, v15);
    v18 = *((unsigned __int8 *)v15 + 20) >> 7;
    if (*((_DWORD *)v15 + 4) == 1)
      (*(void (**)(WebCore *))(*(_QWORD *)v15 + 8))(v15);
    else
      --*((_DWORD *)v15 + 4);
  }
  else
  {
    v18 = 0;
    if (!v7)
      return v18;
  }
  do
  {
    v19 = __ldaxr(v8);
    v20 = v19 - 1;
  }
  while (__stlxr(v20, v8));
  if (!v20)
  {
    atomic_store(1u, v8);
    v26 = (WebCore *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v26 = off_1E31FE290;
    *((_QWORD *)v26 + 1) = v8;
    v29 = v26;
    WTF::ensureOnMainThread();
    v27 = v29;
    v29 = 0;
    if (v27)
      (*(void (**)(WebCore *))(*(_QWORD *)v27 + 8))(v27);
  }
  return v18;
}

uint64_t WebCore::EventHandler::tabsToLinks(WebCore::EventHandler *this, WebCore::KeyboardEvent *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v13;
  void *v14;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 24);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  ++*(_DWORD *)v3;
  v5 = (WebCore *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 48) + 16) + 272))(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 16));
  v6 = (v5 >> 28) & 1;
  if (a2)
  {
    v7 = (int)v5;
    v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
      v9 = WebCore::threadGlobalDataSlow(v5);
    v10 = *(_QWORD *)(v9 + 40);
    if (!v10)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
      v10 = *(_QWORD *)(v9 + 40);
    }
    v11 = *((_QWORD *)a2 + 3);
    if ((v11 == *(_QWORD *)(v10 + 1048) || v11 == *(_QWORD *)(v10 + 1056)) && (*((_BYTE *)a2 + 84) & 1) != 0)
      v6 = MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "U+0009", 6) ^ ((v7 & 0x10000000u) >> 28);
  }
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::Page::~Page(v3);
    WTF::fastFree(v13, v14);
  }
  else
  {
    --*(_DWORD *)v3;
  }
  return v6;
}

_QWORD *WebCore::EventHandler::shouldUseSmoothKeyboardScrollingForFocusedScrollableArea(WebCore::EventHandler *this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if ((*(_QWORD *)(*(_QWORD *)(v1 + 136) + 672) & 0x4000000000000000) == 0)
    return 0;
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 296) + 1248);
  if (v3 || (v3 = *((_QWORD *)this + 2)) != 0)
    *(_DWORD *)(v3 + 24) += 2;
  v4 = WebCore::EventHandler::enclosingScrollableArea(this, (WebCore::Node *)v3);
  v2 = (_QWORD *)v4;
  if (!v4)
    goto LABEL_11;
  v6 = *(_QWORD *)(v4 + 16);
  if (!v6)
  {
    v6 = WTF::fastMalloc((WTF *)0xB0);
    *(_QWORD *)v6 = off_1E3405EF0;
    *(_QWORD *)(v6 + 8) = v2;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = &off_1E3406D78;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_OWORD *)(v6 + 64) = 0u;
    *(_QWORD *)(v6 + 80) = 0;
    *(_QWORD *)(v6 + 88) = v6;
    *(_QWORD *)(v6 + 96) = 0;
    *(_QWORD *)(v6 + 104) = 0;
    *(_QWORD *)(v6 + 110) = 0;
    *(_QWORD *)(v6 + 120) = 0;
    v7 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v7 = 0;
    *(_DWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = v2;
    *(_BYTE *)(v7 + 24) = 0;
    *(_QWORD *)(v6 + 128) = v7;
    *(_BYTE *)(v6 + 136) = 0;
    *(_QWORD *)v6 = off_1E3354B08;
    *(_QWORD *)(v6 + 168) = 0;
    *(_DWORD *)(v6 + 140) = 0;
    *(_DWORD *)(v6 + 143) = 0;
    *(_QWORD *)(v6 + 156) = 0;
    *(_QWORD *)(v6 + 148) = 0;
    v8 = v2[2];
    v2[2] = v6;
    if (v8)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      v6 = v2[2];
    }
  }
  if (*(_QWORD *)(v6 + 104))
  {
    v2 = 0;
LABEL_11:
    if (!v3)
      return v2;
    goto LABEL_12;
  }
  v2 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v2 + 640))(v2);
  if (!v3)
    return v2;
LABEL_12:
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, v5);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return v2;
}

uint64_t WebCore::EventHandler::keyboardScrollRecursively(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;

  v5 = 0;
  if ((a2 & 0xFF00) != 0 && (a3 & 0xFF00) != 0)
  {
    v11 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
    v12 = (unsigned int *)(v11 + 1);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    v14 = v11[37];
    if (v14)
    {
      *(_DWORD *)(v14 + 24) += 2;
      WebCore::Document::updateLayout(v14, 2u, 0);
      if (*(_DWORD *)(v14 + 24) == 2)
      {
        if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v14, v15);
      }
      else
      {
        *(_DWORD *)(v14 + 24) -= 2;
      }
    }
    else
    {
      WebCore::Document::updateLayout(0, 2u, 0);
    }
    if ((WebCore::EventHandler::startKeyboardScrollAnimationOnEnclosingScrollableContainer(a1, (void *)a2, a3, a4, a5) & 1) != 0|| (WebCore::EventHandler::startKeyboardScrollAnimationOnDocument(a1, (void *)a2, a3, a5) & 1) != 0)
    {
      v5 = 1;
    }
    else
    {
      v11 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
      v20 = (unsigned int *)(v11 + 1);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 + 1, v20));
      do
      {
        v22 = __ldaxr(v12);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v12));
      if (!v23)
      {
        atomic_store(1u, v12);
        v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v39 = off_1E31FE290;
        v39[1] = v12;
        v43 = v39;
        WTF::ensureOnMainThread();
        if (v43)
          (*(void (**)(_QWORD *))(*v43 + 8))(v43);
      }
      v24 = v11[7];
      if (v24 && (v25 = *(_QWORD *)(v24 + 8)) != 0)
      {
        v26 = (unsigned int *)(v25 + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 + 1, v26));
        if (*(_BYTE *)(v25 + 144))
        {
          v5 = 0;
        }
        else
        {
          do
            v28 = __ldaxr(v26);
          while (__stlxr(v28 + 1, v26));
          v29 = *(_DWORD **)(v25 + 640);
          ++*v29;
          v30 = v11[15];
          if (v30 && (v31 = *(_QWORD *)(v30 + 8)) != 0)
          {
            *(_DWORD *)(v31 + 24) += 2;
            v5 = WebCore::EventHandler::keyboardScrollRecursively(v29, a2, a3, v31, a5);
            if (*(_DWORD *)(v31 + 24) == 2)
            {
              if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v31, v32);
            }
            else
            {
              *(_DWORD *)(v31 + 24) -= 2;
            }
          }
          else
          {
            v5 = WebCore::EventHandler::keyboardScrollRecursively(v29, a2, a3, 0, a5);
          }
          if (!*v29)
          {
            __break(0xC471u);
            JUMPOUT(0x195FB3258);
          }
          --*v29;
          do
          {
            v33 = __ldaxr(v26);
            v34 = v33 - 1;
          }
          while (__stlxr(v34, v26));
          if (!v34)
          {
            atomic_store(1u, v26);
            v40 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v40 = off_1E31FE290;
            v40[1] = v26;
            v44 = v40;
            WTF::ensureOnMainThread();
            if (v44)
              (*(void (**)(_QWORD *))(*v44 + 8))(v44);
          }
        }
        do
        {
          v35 = __ldaxr(v26);
          v36 = v35 - 1;
        }
        while (__stlxr(v36, v26));
        if (!v36)
        {
          atomic_store(1u, v26);
          v37 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v37 = off_1E31FE290;
          v37[1] = v26;
          v41 = v37;
          WTF::ensureOnMainThread();
          if (v41)
            (*(void (**)(_QWORD *))(*v41 + 8))(v41);
        }
      }
      else
      {
        v5 = 0;
      }
    }
    v16 = (unsigned int *)(v11 + 1);
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      v38 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v38 = off_1E31FE290;
      v38[1] = v16;
      v42 = v38;
      WTF::ensureOnMainThread();
      if (v42)
        (*(void (**)(_QWORD *))(*v42 + 8))(v42);
    }
  }
  return v5;
}

uint64_t WebCore::EventHandler::startKeyboardScrollAnimationOnDocument(uint64_t a1, void *a2, int a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  char started;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  WTF *v38;
  void *v39;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v5 = *(_QWORD *)(v4 + 288);
  if (!v5)
    return 0;
  v8 = a2;
  ++*(_DWORD *)(v5 + 8);
  v10 = *(_QWORD *)(v4 + 296);
  if (v10 && (*(_WORD *)(v10 + 3358) & 8) != 0)
  {
    *(_DWORD *)(v10 + 24) += 2;
    v11 = *(_QWORD *)(*(_QWORD *)(v10 + 3528) + 64) & 0xFFFFFFFFFFFFLL;
    if (v11)
    {
      if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)(v10 + 3528) + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195FB3658);
      }
      if (*(_BYTE *)((*(_QWORD *)(*(_QWORD *)(v10 + 3528) + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) == 7)
      {
        ++*(_DWORD *)((*(_QWORD *)(*(_QWORD *)(v10 + 3528) + 64) & 0xFFFFFFFFFFFFLL) + 0xE0);
        started = WebCore::EventHandler::startKeyboardScrollAnimationOnPlugin(a1, a2, a3, *(_DWORD **)(v11 + 232), a4);
        v13 = *(_DWORD *)(v11 + 224) - 1;
        if ((started & 1) != 0)
        {
          if (*(_DWORD *)(v11 + 224) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
          else
            *(_DWORD *)(v11 + 224) = v13;
          if (*(_DWORD *)(v10 + 24) == 2)
          {
            if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
          }
          else
          {
            *(_DWORD *)(v10 + 24) -= 2;
          }
LABEL_36:
          v29 = 1;
          goto LABEL_38;
        }
        if (*(_DWORD *)(v11 + 224) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        else
          *(_DWORD *)(v11 + 224) = v13;
      }
    }
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  v14 = *(_QWORD *)(v5 + 80);
  if (!v14)
  {
    v14 = WTF::fastMalloc((WTF *)0xB0);
    *(_QWORD *)v14 = off_1E3405EF0;
    *(_QWORD *)(v14 + 8) = v5 + 64;
    *(_QWORD *)(v14 + 16) = 0;
    *(_QWORD *)(v14 + 24) = &off_1E3406D78;
    *(_OWORD *)(v14 + 32) = 0u;
    *(_OWORD *)(v14 + 48) = 0u;
    *(_OWORD *)(v14 + 64) = 0u;
    *(_QWORD *)(v14 + 80) = 0;
    *(_QWORD *)(v14 + 88) = v14;
    *(_QWORD *)(v14 + 96) = 0;
    *(_QWORD *)(v14 + 104) = 0;
    *(_QWORD *)(v14 + 110) = 0;
    *(_QWORD *)(v14 + 120) = 0;
    v15 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v15 = 0;
    *(_DWORD *)(v15 + 8) = 0;
    *(_QWORD *)(v15 + 16) = v5 + 64;
    *(_BYTE *)(v15 + 24) = 0;
    *(_QWORD *)(v14 + 128) = v15;
    *(_BYTE *)(v14 + 136) = 0;
    *(_QWORD *)v14 = off_1E3354B08;
    *(_QWORD *)(v14 + 168) = 0;
    *(_DWORD *)(v14 + 140) = 0;
    *(_DWORD *)(v14 + 143) = 0;
    *(_QWORD *)(v14 + 156) = 0;
    *(_QWORD *)(v14 + 148) = 0;
    v16 = *(_QWORD *)(v5 + 80);
    *(_QWORD *)(v5 + 80) = v14;
    if (v16)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      v14 = *(_QWORD *)(v5 + 80);
    }
  }
  v17 = *(uint64_t **)(v14 + 128);
  if (v17 && WebCore::KeyboardScrollingAnimator::beginKeyboardScrollGesture((uint64_t)v17, v8, a3, a4))
  {
    v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 24);
    if (v19 && (v20 = *(_QWORD *)(v19 + 8)) != 0)
    {
      ++*(_DWORD *)v20;
      v21 = *v17;
      if (*v17)
        goto LABEL_65;
      v21 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = v17;
      v22 = (unsigned int *)*v17;
      *v17 = v21;
      if (!v22)
        goto LABEL_65;
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, v18);
      }
      v21 = *v17;
      if (*v17)
      {
LABEL_65:
        do
          v25 = __ldaxr((unsigned int *)v21);
        while (__stlxr(v25 + 1, (unsigned int *)v21));
      }
      v26 = *(unsigned int **)(v20 + 1760);
      *(_QWORD *)(v20 + 1760) = v21;
      if (v26)
      {
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          atomic_store(1u, v26);
          WTF::fastFree((WTF *)v26, v18);
        }
      }
      if (*(_DWORD *)v20 == 1)
      {
        WebCore::Page::~Page(v20);
        WTF::fastFree(v38, v39);
      }
      else
      {
        --*(_DWORD *)v20;
      }
    }
    else
    {
      v31 = *v17;
      if (*v17)
        goto LABEL_66;
      v31 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v31 = 1;
      *(_QWORD *)(v31 + 8) = v17;
      v32 = (unsigned int *)*v17;
      *v17 = v31;
      if (!v32)
        goto LABEL_66;
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
      {
        atomic_store(1u, v32);
        WTF::fastFree((WTF *)v32, v18);
      }
      v31 = *v17;
      if (*v17)
      {
LABEL_66:
        do
          v35 = __ldaxr((unsigned int *)v31);
        while (__stlxr(v35 + 1, (unsigned int *)v31));
      }
      v36 = (unsigned int *)MEMORY[0x6E0];
      MEMORY[0x6E0] = v31;
      if (v36)
      {
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        v29 = 1;
        if (v37 == 1)
        {
          atomic_store(1u, v36);
          WTF::fastFree((WTF *)v36, v18);
        }
        goto LABEL_38;
      }
    }
    goto LABEL_36;
  }
  v29 = 0;
LABEL_38:
  if (*(_DWORD *)(v5 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  else
    --*(_DWORD *)(v5 + 8);
  return v29;
}

uint64_t WebCore::EventHandler::startKeyboardScrollAnimationOnPlugin(uint64_t a1, unsigned int a2, int a3, _DWORD *a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  WTF *v36;
  void *v37;

  if (!a4 || !(*(unsigned int (**)(_DWORD *))(*(_QWORD *)a4 + 88))(a4))
    return 0;
  ++a4[2];
  v10 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a4 + 336))(a4);
  v11 = v10;
  if (a4[2] == 1)
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)a4 + 8))(a4);
    if (v11)
      goto LABEL_5;
    return 0;
  }
  --a4[2];
  if (!v10)
    return 0;
LABEL_5:
  v12 = *(_QWORD *)(v11 + 16);
  if (!v12)
  {
    v12 = WTF::fastMalloc((WTF *)0xB0);
    *(_QWORD *)v12 = off_1E3405EF0;
    *(_QWORD *)(v12 + 8) = v11;
    *(_QWORD *)(v12 + 16) = 0;
    *(_QWORD *)(v12 + 24) = &off_1E3406D78;
    *(_OWORD *)(v12 + 32) = 0u;
    *(_OWORD *)(v12 + 48) = 0u;
    *(_OWORD *)(v12 + 64) = 0u;
    *(_QWORD *)(v12 + 80) = 0;
    *(_QWORD *)(v12 + 88) = v12;
    *(_QWORD *)(v12 + 96) = 0;
    *(_QWORD *)(v12 + 104) = 0;
    *(_QWORD *)(v12 + 110) = 0;
    *(_QWORD *)(v12 + 120) = 0;
    v13 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v13 = 0;
    *(_DWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 16) = v11;
    *(_BYTE *)(v13 + 24) = 0;
    *(_QWORD *)(v12 + 128) = v13;
    *(_BYTE *)(v12 + 136) = 0;
    *(_QWORD *)v12 = off_1E3354B08;
    *(_QWORD *)(v12 + 168) = 0;
    *(_DWORD *)(v12 + 140) = 0;
    *(_DWORD *)(v12 + 143) = 0;
    *(_QWORD *)(v12 + 156) = 0;
    *(_QWORD *)(v12 + 148) = 0;
    v14 = *(_QWORD *)(v11 + 16);
    *(_QWORD *)(v11 + 16) = v12;
    if (v14)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      v12 = *(_QWORD *)(v11 + 16);
    }
  }
  v15 = *(uint64_t **)(v12 + 128);
  if (!v15
    || !WebCore::KeyboardScrollingAnimator::beginKeyboardScrollGesture(*(_QWORD *)(v12 + 128), a2, a3, a5))
  {
    return 0;
  }
  v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 24);
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 8);
    if (v18)
    {
      ++*(_DWORD *)v18;
      v19 = *v15;
      if (*v15)
        goto LABEL_43;
      v19 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = v15;
      v20 = (unsigned int *)*v15;
      *v15 = v19;
      if (!v20)
        goto LABEL_43;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        atomic_store(1u, v20);
        WTF::fastFree((WTF *)v20, v16);
      }
      v19 = *v15;
      if (*v15)
      {
LABEL_43:
        do
          v23 = __ldaxr((unsigned int *)v19);
        while (__stlxr(v23 + 1, (unsigned int *)v19));
      }
      v24 = *(unsigned int **)(v18 + 1760);
      *(_QWORD *)(v18 + 1760) = v19;
      if (v24)
      {
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          WTF::fastFree((WTF *)v24, v16);
        }
      }
      if (*(_DWORD *)v18 == 1)
      {
        WebCore::Page::~Page(v18);
        WTF::fastFree(v36, v37);
      }
      else
      {
        --*(_DWORD *)v18;
      }
      return 1;
    }
  }
  v29 = *v15;
  if (*v15)
    goto LABEL_44;
  v29 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v29 = 1;
  *(_QWORD *)(v29 + 8) = v15;
  v30 = (unsigned int *)*v15;
  *v15 = v29;
  if (!v30)
    goto LABEL_44;
  do
  {
    v31 = __ldaxr(v30);
    v32 = v31 - 1;
  }
  while (__stlxr(v32, v30));
  if (!v32)
  {
    atomic_store(1u, v30);
    WTF::fastFree((WTF *)v30, v16);
  }
  v29 = *v15;
  if (*v15)
  {
LABEL_44:
    do
      v33 = __ldaxr((unsigned int *)v29);
    while (__stlxr(v33 + 1, (unsigned int *)v29));
  }
  v34 = (unsigned int *)MEMORY[0x6E0];
  MEMORY[0x6E0] = v29;
  if (!v34)
    return 1;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  v27 = 1;
  if (v35 == 1)
  {
    atomic_store(1u, v34);
    WTF::fastFree((WTF *)v34, v16);
  }
  return v27;
}

uint64_t WebCore::EventHandler::startKeyboardScrollAnimationOnEnclosingScrollableContainer(uint64_t a1, void *a2, int a3, uint64_t a4, char a5)
{
  uint64_t v6;
  unsigned int v8;
  uint64_t v10;
  char started;
  int v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::RenderObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  WTF *v40;
  void *v41;

  v6 = a4;
  v8 = a2;
  if (!a4)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 296) + 1248);
    if (!v6)
    {
      v6 = *(_QWORD *)(a1 + 16);
      if (!v6)
        return 0;
    }
  }
  *(_DWORD *)(v6 + 24) += 2;
  v10 = *(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL;
  if (v10)
  {
    if (*(_BYTE *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) == 7)
    {
      ++*(_DWORD *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0xE0);
      started = WebCore::EventHandler::startKeyboardScrollAnimationOnPlugin(a1, a2, a3, *(_DWORD **)(v10 + 232), a5);
      v12 = *(_DWORD *)(v10 + 224) - 1;
      if ((started & 1) != 0)
      {
        if (*(_DWORD *)(v10 + 224) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        else
          *(_DWORD *)(v10 + 224) = v12;
LABEL_7:
        v13 = 1;
        goto LABEL_28;
      }
      if (*(_DWORD *)(v10 + 224) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      else
        *(_DWORD *)(v10 + 224) = v12;
    }
    if ((*(_BYTE *)(v10 + 45) & 4) != 0)
    {
      v15 = (WebCore::RenderObject *)v10;
    }
    else
    {
      v14 = *(_QWORD *)(v10 + 32);
      if (v14)
      {
        while (1)
        {
          v15 = *(WebCore::RenderObject **)(v14 + 8);
          if (!v15 || (*((_BYTE *)v15 + 45) & 4) != 0)
            break;
          v14 = *((_QWORD *)v15 + 4);
          if (!v14)
            goto LABEL_15;
        }
      }
      else
      {
LABEL_15:
        v15 = 0;
      }
    }
    if (*(_BYTE *)(v10 + 46) != 18)
    {
      while (*((_BYTE *)v15 + 46) != 49)
      {
        v16 = *((_QWORD *)v15 + 18);
        if (v16)
        {
          v17 = *(_QWORD *)(v16 + 264);
          if (v17)
          {
            v18 = *(_QWORD *)(v17 + 16);
            if (!v18)
            {
              v18 = WTF::fastMalloc((WTF *)0xB0);
              *(_QWORD *)v18 = off_1E3405EF0;
              *(_QWORD *)(v18 + 8) = v17;
              *(_QWORD *)(v18 + 16) = 0;
              *(_QWORD *)(v18 + 24) = &off_1E3406D78;
              *(_OWORD *)(v18 + 32) = 0u;
              *(_OWORD *)(v18 + 48) = 0u;
              *(_OWORD *)(v18 + 64) = 0u;
              *(_QWORD *)(v18 + 80) = 0;
              *(_QWORD *)(v18 + 88) = v18;
              *(_QWORD *)(v18 + 96) = 0;
              *(_QWORD *)(v18 + 104) = 0;
              *(_QWORD *)(v18 + 110) = 0;
              *(_QWORD *)(v18 + 120) = 0;
              v19 = WTF::fastMalloc((WTF *)0x20);
              *(_QWORD *)v19 = 0;
              *(_DWORD *)(v19 + 8) = 0;
              *(_QWORD *)(v19 + 16) = v17;
              *(_BYTE *)(v19 + 24) = 0;
              *(_QWORD *)(v18 + 128) = v19;
              *(_BYTE *)(v18 + 136) = 0;
              *(_QWORD *)v18 = off_1E3354B08;
              *(_QWORD *)(v18 + 168) = 0;
              *(_DWORD *)(v18 + 140) = 0;
              *(_DWORD *)(v18 + 143) = 0;
              *(_QWORD *)(v18 + 156) = 0;
              *(_QWORD *)(v18 + 148) = 0;
              v20 = *(_QWORD *)(v17 + 16);
              *(_QWORD *)(v17 + 16) = v18;
              if (v20)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
                v18 = *(_QWORD *)(v17 + 16);
              }
            }
            v21 = *(uint64_t **)(v18 + 128);
            if (v21)
            {
              if (WebCore::KeyboardScrollingAnimator::beginKeyboardScrollGesture((uint64_t)v21, v8, a3, a5))
              {
                v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 24);
                if (v23)
                {
                  v24 = *(_QWORD *)(v23 + 8);
                  if (v24)
                  {
                    ++*(_DWORD *)v24;
                    v25 = *v21;
                    if (*v21)
                      goto LABEL_67;
                    v25 = WTF::fastCompactMalloc((WTF *)0x10);
                    *(_DWORD *)v25 = 1;
                    *(_QWORD *)(v25 + 8) = v21;
                    v26 = (unsigned int *)*v21;
                    *v21 = v25;
                    if (!v26)
                      goto LABEL_67;
                    do
                    {
                      v27 = __ldaxr(v26);
                      v28 = v27 - 1;
                    }
                    while (__stlxr(v28, v26));
                    if (!v28)
                    {
                      atomic_store(1u, v26);
                      WTF::fastFree((WTF *)v26, a2);
                    }
                    v25 = *v21;
                    if (*v21)
                    {
LABEL_67:
                      do
                        v29 = __ldaxr((unsigned int *)v25);
                      while (__stlxr(v29 + 1, (unsigned int *)v25));
                    }
                    v30 = *(unsigned int **)(v24 + 1760);
                    *(_QWORD *)(v24 + 1760) = v25;
                    if (v30)
                    {
                      do
                      {
                        v31 = __ldaxr(v30);
                        v32 = v31 - 1;
                      }
                      while (__stlxr(v32, v30));
                      if (!v32)
                      {
                        atomic_store(1u, v30);
                        WTF::fastFree((WTF *)v30, a2);
                      }
                    }
                    if (*(_DWORD *)v24 == 1)
                    {
                      WebCore::Page::~Page(v24);
                      WTF::fastFree(v40, v41);
                    }
                    else
                    {
                      --*(_DWORD *)v24;
                    }
                    goto LABEL_7;
                  }
                }
                v33 = *v21;
                if (*v21)
                  goto LABEL_68;
                v33 = WTF::fastCompactMalloc((WTF *)0x10);
                *(_DWORD *)v33 = 1;
                *(_QWORD *)(v33 + 8) = v21;
                v34 = (unsigned int *)*v21;
                *v21 = v33;
                if (!v34)
                  goto LABEL_68;
                do
                {
                  v35 = __ldaxr(v34);
                  v36 = v35 - 1;
                }
                while (__stlxr(v36, v34));
                if (!v36)
                {
                  atomic_store(1u, v34);
                  WTF::fastFree((WTF *)v34, a2);
                }
                v33 = *v21;
                if (*v21)
                {
LABEL_68:
                  do
                    v37 = __ldaxr((unsigned int *)v33);
                  while (__stlxr(v37 + 1, (unsigned int *)v33));
                }
                v38 = (unsigned int *)MEMORY[0x6E0];
                MEMORY[0x6E0] = v33;
                if (v38)
                {
                  do
                    v39 = __ldaxr(v38);
                  while (__stlxr(v39 - 1, v38));
                  v13 = 1;
                  if (v39 == 1)
                  {
                    atomic_store(1u, v38);
                    WTF::fastFree((WTF *)v38, a2);
                  }
                  goto LABEL_28;
                }
                goto LABEL_7;
              }
            }
          }
        }
        v15 = WebCore::RenderObject::containingBlock(v15);
        if (!v15)
          break;
      }
    }
  }
  v13 = 0;
LABEL_28:
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  return v13;
}

uint64_t WebCore::EventHandler::setImmediateActionStage(uint64_t result, char a2)
{
  *(_BYTE *)(result + 193) = a2;
  return result;
}

uint64_t WebCore::EventSource::create@<X0>(WebCore::SecurityContext *a1@<X0>, _BYTE *a2@<X2>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v6;
  char v7;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  char v12;
  WTF::StringImpl *v13;
  unsigned int v15;
  uint64_t v16;
  WebCore::EventSource *v17;
  uint64_t result;
  WTF::StringImpl *v19[5];
  WTF::StringImpl *v20;
  char v21;

  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)a1 + 120))(&v20);
  if ((v21 & 1) == 0)
  {
    v7 = 9;
LABEL_3:
    *(_BYTE *)a3 = v7;
    *(_QWORD *)(a3 + 8) = 0;
    v8 = 1;
    goto LABEL_15;
  }
  if (((*(uint64_t (**)(WebCore::SecurityContext *))(*(_QWORD *)a1 + 264))(a1) & 1) == 0)
  {
    v9 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy(a1);
    v10 = v9;
    if (v9)
    {
      do
        v11 = __ldaxr(v9);
      while (__stlxr(v11 + 1, v9));
    }
    v19[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v19);
    v12 = WebCore::ContentSecurityPolicy::allowConnectToSource((uint64_t)v10, (WTF::URL *)&v20, 0, (uint64_t)v19);
    v13 = v19[0];
    v19[0] = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
      {
        WTF::StringImpl::destroy(v13, v6);
        if (!v10)
          goto LABEL_13;
        goto LABEL_11;
      }
      *(_DWORD *)v13 -= 2;
    }
    if (!v10)
      goto LABEL_13;
LABEL_11:
    if (!atomic_load(v10))
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    do
      v15 = __ldaxr(v10);
    while (__stlxr(v15 - 1, v10));
LABEL_13:
    if ((v12 & 1) == 0)
    {
      v7 = 14;
      goto LABEL_3;
    }
  }
  v16 = bmalloc::api::isoAllocate();
  v17 = (WebCore::EventSource *)WebCore::EventSource::EventSource(v16, a1, (uint64_t)&v20, a2);
  WebCore::EventSource::scheduleInitialConnect(v17);
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v16 + 56));
  v8 = 0;
  *(_QWORD *)a3 = v16;
LABEL_15:
  *(_DWORD *)(a3 + 16) = v8;
  result = (uint64_t)v20;
  v20 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WebCore::EventSource::scheduleInitialConnect(WebCore::EventSource *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;
  _QWORD *v13;
  uint64_t v14;

  v2 = *(_QWORD *)(*((_QWORD *)this + 8) + 8);
  if (v2)
    v3 = v2 - 96;
  else
    v3 = 0;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 104))(v3);
  v5 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>((uint64_t)this);
  v6 = v5;
  if (v5)
  {
    do
      v7 = __ldaxr(v5);
    while (__stlxr(v7 + 1, v5));
  }
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = &off_1E33FE9F8;
  v8[1] = v6;
  v13 = v8;
  WebCore::EventLoopTaskGroup::scheduleTask(v4, 0, (uint64_t *)&v13, &v14, 0.0);
  v10 = v14;
  if (v14)
    ++*(_DWORD *)(v14 + 48);
  v11 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = v10;
  if (v11)
    WTF::RefCounted<WebCore::EventLoopTimer>::deref(v11 + 48, v9);
  WebCore::EventLoopTimerHandle::~EventLoopTimerHandle((WebCore::EventLoopTimerHandle *)&v14, v9);
  result = v13;
  if (v13)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v13 + 8))(v13);
  return result;
}

void WebCore::EventSource::~EventSource(WebCore::EventSource *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF *v6;
  WTF::StringImpl *v7;
  WTF *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  void *v13;
  uint64_t v14;
  WTF *v15;
  WebCore::HTMLMetaCharsetParser *v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF *)*((_QWORD *)this + 23);
  if (v6)
  {
    *((_QWORD *)this + 23) = 0;
    *((_DWORD *)this + 48) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF *)*((_QWORD *)this + 19);
  if (v8)
  {
    *((_QWORD *)this + 19) = 0;
    *((_DWORD *)this + 40) = 0;
    WTF::fastFree(v8, a2);
  }
  WebCore::EventLoopTimerHandle::~EventLoopTimerHandle((WebCore::EventSource *)((char *)this + 144), a2);
  v10 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  v11 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
    {
      v15 = *(WTF **)(v11 + 72);
      if (v15)
      {
        *(_QWORD *)(v11 + 72) = 0;
        *(_DWORD *)(v11 + 80) = 0;
        WTF::fastFree(v15, v9);
      }
      v16 = *(WebCore::HTMLMetaCharsetParser **)(v11 + 48);
      *(_QWORD *)(v11 + 48) = 0;
      if (v16)
      {
        WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v16, (WTF::StringImpl *)v9);
        WTF::fastFree(v17, v18);
      }
      v19 = *(_QWORD *)(v11 + 40);
      *(_QWORD *)(v11 + 40) = 0;
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      WTF::fastFree((WTF *)v11, v9);
    }
    else
    {
      --*(_DWORD *)v11;
    }
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v9);
    else
      *(_DWORD *)v12 -= 2;
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::EventSource *)((char *)this + 56), v9);
  v14 = *((_QWORD *)this + 5);
  if (v14)
  {
    *(_QWORD *)(v14 + 8) = 0;
    v20 = (unsigned int *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v20)
    {
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        atomic_store(1u, v20);
        WTF::fastFree((WTF *)v20, v13);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 5) = 0;
  }
  WebCore::EventTarget::~EventTarget(this, v13);
}

{
  uint64_t v2;
  void *v3;

  WebCore::EventSource::~EventSource(this, a2);
  if (atomic_load((unsigned int *)(v2 + 48)))
  {
    *(_QWORD *)(v2 + 224) = 0;
    *(_OWORD *)(v2 + 192) = 0u;
    *(_OWORD *)(v2 + 208) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate((bmalloc::api *)v2, v3);
  }
}

void `non-virtual thunk to'WebCore::EventSource::~EventSource(WebCore::EventSource *this, WTF::StringImpl *a2)
{
  WebCore::EventSource::~EventSource((WebCore::EventSource *)((char *)this - 32), a2);
}

{
  WebCore::EventSource::~EventSource((WebCore::EventSource *)((char *)this - 56), a2);
}

{
  uint64_t v3;
  void *v4;

  WebCore::EventSource::~EventSource((WebCore::EventSource *)((char *)this - 32), a2);
  if (atomic_load((unsigned int *)this + 4))
  {
    *(_QWORD *)(v3 + 224) = 0;
    *(_OWORD *)(v3 + 192) = 0u;
    *(_OWORD *)(v3 + 208) = 0u;
    *(_OWORD *)(v3 + 160) = 0u;
    *(_OWORD *)(v3 + 176) = 0u;
    *(_OWORD *)(v3 + 128) = 0u;
    *(_OWORD *)(v3 + 144) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_OWORD *)(v3 + 112) = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_OWORD *)(v3 + 48) = 0u;
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate((bmalloc::api *)v3, v4);
  }
}

{
  uint64_t v3;
  void *v4;

  WebCore::EventSource::~EventSource((WebCore::EventSource *)((char *)this - 56), a2);
  if (atomic_load((unsigned int *)this - 2))
  {
    *(_QWORD *)(v3 + 224) = 0;
    *(_OWORD *)(v3 + 192) = 0u;
    *(_OWORD *)(v3 + 208) = 0u;
    *(_OWORD *)(v3 + 160) = 0u;
    *(_OWORD *)(v3 + 176) = 0u;
    *(_OWORD *)(v3 + 128) = 0u;
    *(_OWORD *)(v3 + 144) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_OWORD *)(v3 + 112) = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_OWORD *)(v3 + 48) = 0u;
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate((bmalloc::api *)v3, v4);
  }
}

void WebCore::EventSource::connect(WebCore::EventSource *this)
{
  WTF *v2;
  __int128 v3;
  char v4;
  _DWORD *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  WebCore *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  _QWORD *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  void *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  char v39;
  char v40;
  char v41;
  __int16 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  WTF::StringImpl *v47;
  int v48;
  WTF::StringImpl *v49;
  WTF *v50;
  __int128 v51;
  __int128 v52;
  _QWORD v53[7];
  _BYTE v54[48];
  __int16 v55;
  char v56;
  char v57;
  char v58;
  uint64_t v59;
  _DWORD *v60;
  uint64_t v61;
  char v62;
  char v63;
  char v64;
  uint64_t v65;

  v2 = (WTF *)*((_QWORD *)this + 10);
  if (v2)
    *(_DWORD *)v2 += 2;
  v3 = *(_OWORD *)((char *)this + 104);
  v51 = *(_OWORD *)((char *)this + 88);
  v52 = v3;
  v50 = v2;
  v53[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v53);
  v53[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v53[6] = v33;
  memset(v54, 0, sizeof(v54));
  v55 = 0;
  v56 = 1;
  v4 = v58 & 0x80 | 4;
  v58 = v4;
  v59 = 0;
  v5 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *v5 += 2;
    v4 = v58;
  }
  v60 = v5;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v64 = v64 & 0xE0 | 5;
  v58 = v4 | 2;
  v65 = 0;
  v57 = 9;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::ResourceRequestBase::setHTTPMethod(&v50, &v33);
  v7 = v33;
  v33 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v49 = v33;
  if ((v64 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v50);
    v64 |= 1u;
  }
  WebCore::HTTPHeaderMap::set((WTF::StringImpl *)v54, 0, &v49);
  v64 &= ~2u;
  v9 = v49;
  v49 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v49 = v33;
  if ((v64 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v50);
    v64 |= 1u;
  }
  WebCore::HTTPHeaderMap::set((WTF::StringImpl *)v54, (WTF::StringImpl *)0xF, &v49);
  v64 &= ~2u;
  v11 = v49;
  v49 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl **)((char *)this + 208);
  v13 = *((_QWORD *)this + 26);
  if (v13 && *(_DWORD *)(v13 + 4))
  {
    if ((v64 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v50);
      v12 = (WTF::StringImpl **)((char *)this + 208);
      v64 |= 1u;
    }
    WebCore::HTTPHeaderMap::set((WTF::StringImpl *)v54, (WTF::StringImpl *)0x31, v12);
    v64 &= ~2u;
  }
  LOWORD(v33) = 768;
  WORD2(v33) = 0;
  BYTE6(v33) = 0;
  v38 = 0;
  v37 = 0u;
  v36 = 0u;
  v35 = 0u;
  v34 = 0u;
  v39 = 1;
  v40 = 0;
  v41 = 0;
  v42 = 20;
  v44 = 0;
  v45 = 0;
  v48 = 1;
  if (*((_BYTE *)this + 120))
    v14 = 2;
  else
    v14 = 1;
  BYTE2(v33) = v14;
  BYTE3(v33) = 1;
  v43 = 203426250;
  v15 = *(_QWORD *)(*((_QWORD *)this + 8) + 8);
  if (v15)
    v16 = v15 - 96;
  else
    v16 = 0;
  v17 = (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 264))(v16);
  if ((_DWORD)v17)
    v18 = 0;
  else
    v18 = 2;
  v46 = v18;
  v19 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v19 || (v20 = *(_QWORD *)(v19 + 96)) == 0)
    v20 = WebCore::threadGlobalDataSlow(v17);
  v21 = *(_QWORD *)(v20 + 32);
  if (!v21)
  {
    WebCore::ThreadGlobalData::initializeCachedResourceRequestInitiatorTypes((WebCore::CachedResourceRequestInitiatorTypes **)v20);
    v21 = *(_QWORD *)(v20 + 32);
  }
  v22 = *(WTF::StringImpl **)(v21 + 8);
  if (v22)
    *(_DWORD *)v22 += 2;
  v47 = v22;
  v23 = *(_QWORD *)(*((_QWORD *)this + 8) + 8);
  if (v23)
    v24 = (_QWORD *)(v23 - 96);
  else
    v24 = 0;
  v31 = 0;
  v32 = 0;
  WebCore::ThreadableLoader::create(v24, (uint64_t)this + 32, (WebCore::ResourceRequest *)&v50, (uint64_t)&v33, &v32, (uint64_t)&v31, (uint64_t *)&v49);
  v26 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = v49;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 40))(v26);
  v27 = v31;
  v31 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v25);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = v32;
  v32 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v25);
    else
      *(_DWORD *)v28 -= 2;
  }
  if (*((_QWORD *)this + 17))
    *((_BYTE *)this + 169) = 1;
  v29 = v47;
  v47 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v25);
    else
      *(_DWORD *)v29 -= 2;
  }
  WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)&v33, v25);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v50, v30);
}

uint64_t WebCore::EventSource::scriptExecutionContext(WebCore::EventSource *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 8);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t WebCore::EventSource::scheduleReconnect(WebCore::EventSource *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _QWORD *v14;
  uint64_t v15;

  if (*((_BYTE *)this + 170))
  {
    result = 148;
    __break(0xC471u);
  }
  else
  {
    *((_WORD *)this + 61) = 0;
    v2 = *(_QWORD *)(*((_QWORD *)this + 8) + 8);
    if (v2)
      v3 = v2 - 96;
    else
      v3 = 0;
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 104))(v3);
    v5 = (double)*((unint64_t *)this + 27) * 0.001;
    v6 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>((uint64_t)this);
    v7 = v6;
    if (v6)
    {
      do
        v8 = __ldaxr(v6);
      while (__stlxr(v8 + 1, v6));
    }
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v9 = &off_1E33FEA20;
    v9[1] = v7;
    v14 = v9;
    WebCore::EventLoopTaskGroup::scheduleTask(v4, 0, (uint64_t *)&v14, &v15, v5);
    v11 = v15;
    if (v15)
      ++*(_DWORD *)(v15 + 48);
    v12 = *((_QWORD *)this + 18);
    *((_QWORD *)this + 18) = v11;
    if (v12)
      WTF::RefCounted<WebCore::EventLoopTimer>::deref(v12 + 48, v10);
    WebCore::EventLoopTimerHandle::~EventLoopTimerHandle((WebCore::EventLoopTimerHandle *)&v15, v10);
    if (v14)
      (*(void (**)(_QWORD *))(*v14 + 8))(v14);
    return (uint64_t)WebCore::EventSource::dispatchErrorEvent(this);
  }
  return result;
}

WTF *WebCore::EventSource::dispatchErrorEvent(WebCore::EventSource *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _BOOL4 v8;
  _DWORD *v9;
  WTF *result;

  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
    v3 = WebCore::threadGlobalDataSlow(this);
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
  *(_QWORD *)v5 = off_1E33A4B48;
  *(_QWORD *)(v5 + 8) = 0;
  v7 = *(_DWORD *)(v5 + 20) & 0xFFC00000 | 0x1E8200;
  v8 = *(_QWORD *)(v4 + 784) != 0;
  *(_DWORD *)(v5 + 16) = 1;
  *(_DWORD *)(v5 + 20) = v7 | v8;
  v9 = *(_DWORD **)(v4 + 784);
  if (v9)
    *v9 += 2;
  *(_QWORD *)(v5 + 24) = v9;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = v6;
  *(_QWORD *)(v5 + 64) = 0;
  result = WebCore::EventTarget::dispatchEvent(this, (WebCore::Event *)v5);
  if (*(_DWORD *)(v5 + 16) == 1)
    return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  --*(_DWORD *)(v5 + 16);
  return result;
}

uint64_t WebCore::EventSource::close(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;
  void *v11;

  if (*(_WORD *)(this + 122) != 2)
  {
    v2 = this;
    v3 = *(_QWORD *)(this + 144);
    *(_QWORD *)(this + 144) = 0;
    if (v3)
    {
      if (*(_DWORD *)(v3 + 48) == 1)
      {
        v5 = *(_QWORD *)(v3 + 64);
        *(_QWORD *)(v3 + 64) = 0;
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        v6 = *(_QWORD *)(v3 + 56);
        if (v6)
        {
          *(_QWORD *)(v6 + 8) = 0;
          v7 = *(unsigned int **)(v3 + 56);
          *(_QWORD *)(v3 + 56) = 0;
          if (v7)
          {
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              atomic_store(1u, v7);
              WTF::fastFree((WTF *)v7, a2);
            }
          }
        }
        else
        {
          *(_QWORD *)(v3 + 56) = 0;
        }
        WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)v3);
        this = WTF::fastFree(v10, v11);
      }
      else
      {
        --*(_DWORD *)(v3 + 48);
      }
    }
    if (*(_BYTE *)(v2 + 169))
    {
      v4 = *(_BYTE *)(v2 + 171);
      *(_BYTE *)(v2 + 171) = 1;
      this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 136) + 8))(*(_QWORD *)(v2 + 136));
      *(_BYTE *)(v2 + 171) = v4;
    }
    else
    {
      *(_WORD *)(v2 + 122) = 2;
    }
  }
  return this;
}

WTF *WebCore::EventSource::didReceiveResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  char v22;
  WTF *result;
  uint64_t v24;
  int v25;
  uint64_t v26;
  const WTF::URL *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  WTF::StringImpl *v37;
  int v38;
  int v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  int v47;
  unsigned __int128 *v48;
  unsigned __int128 *v49;
  unsigned __int128 v50;
  char v51;
  WTF::StringImpl *v52;
  char v53;
  WTF::StringImpl *v54[3];
  int v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 170))
  {
    __break(0xC471u);
    goto LABEL_137;
  }
  WebCore::ResourceResponse::platformLazyInit(a4, 1);
  if (*(_WORD *)(a4 + 136) != 200)
  {
LABEL_29:
    v22 = *(_BYTE *)(a1 + 171);
    *(_BYTE *)(a1 + 171) = 1;
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 8))(*(_QWORD *)(a1 + 136));
    *(_BYTE *)(a1 + 171) = v22;
    return WebCore::EventSource::dispatchErrorEvent((WebCore::EventSource *)a1);
  }
  WebCore::ResourceResponse::platformLazyInit(a4, 1);
  v6 = *(_QWORD *)(a4 + 40);
  if (!v6 || *(_DWORD *)(v6 + 4) != 17)
    goto LABEL_4;
  v24 = *(_QWORD *)(v6 + 8);
  if ((*(_BYTE *)(v6 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v24 & 0xDF) == 0x54
      && (*(_BYTE *)(v24 + 1) & 0xDF) == 0x45
      && (*(_BYTE *)(v24 + 2) & 0xDF) == 0x58
      && (*(_BYTE *)(v24 + 3) & 0xDF) == 0x54
      && (*(_BYTE *)(v24 + 4) & 0xDF) == 0xF
      && (*(_BYTE *)(v24 + 5) & 0xDF) == 0x45
      && (*(_BYTE *)(v24 + 6) & 0xDF) == 0x56
      && (*(_BYTE *)(v24 + 7) & 0xDF) == 0x45
      && (*(_BYTE *)(v24 + 8) & 0xDF) == 0x4E
      && (*(_BYTE *)(v24 + 9) & 0xDF) == 0x54
      && (*(_BYTE *)(v24 + 10) & 0xDF) == 0xD
      && (*(_BYTE *)(v24 + 11) & 0xDF) == 0x53
      && (*(_BYTE *)(v24 + 12) & 0xDF) == 0x54
      && (*(_BYTE *)(v24 + 13) & 0xDF) == 0x52
      && (*(_BYTE *)(v24 + 14) & 0xDF) == 0x45
      && (*(_BYTE *)(v24 + 15) & 0xDF) == 0x41)
    {
      v25 = *(unsigned __int8 *)(v24 + 16);
      goto LABEL_49;
    }
LABEL_4:
    WebCore::ResourceResponse::platformLazyInit(a4, 1);
    v7 = *(_QWORD *)(a4 + 40);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      *(_DWORD *)v7 += 2;
      if (v8 < 0)
        goto LABEL_134;
    }
    else
    {
      v8 = 0;
    }
    v9 = __OFADD__(v8, 60);
    v10 = v8 + 60;
    if (!v9)
    {
      v11 = (v10 + 41);
      if (!__OFADD__(v10, 41))
      {
        if (v7)
        {
          if ((*(_BYTE *)(v7 + 16) & 4) != 0)
          {
            WTF::tryFastCompactMalloc((WTF *)(v11 + 20));
            v12 = v54[0];
            if (v54[0])
            {
              *(_OWORD *)((char *)v54[0] + 20) = *(_OWORD *)"EventSource's response has a MIME type (\"";
              *(_DWORD *)v12 = 2;
              *((_DWORD *)v12 + 1) = v11;
              *((_QWORD *)v12 + 1) = (char *)v12 + 20;
              *((_DWORD *)v12 + 4) = 4;
              qmemcpy((char *)v12 + 36, "sponse has a MIME type (\"", 25);
              v16 = (char *)v12 + 61;
              v13 = *(_BYTE **)(v7 + 8);
              v17 = *(unsigned int *)(v7 + 4);
              if ((*(_BYTE *)(v7 + 16) & 4) != 0)
              {
                if ((_DWORD)v17)
                {
                  if ((_DWORD)v17 == 1)
                    *v16 = *v13;
                  else
                    memcpy((char *)v12 + 61, v13, v17);
                }
              }
              else
              {
                if (v17 < 0x10)
                {
                  v48 = (unsigned __int128 *)((char *)v12 + 61);
                }
                else
                {
                  v48 = (unsigned __int128 *)&v16[v17 & 0xFFFFFFF0];
                  v49 = (unsigned __int128 *)((char *)v12 + 61);
                  do
                  {
                    v50 = (unsigned __int128)vld2q_s8(v13);
                    v13 += 32;
                    *v49++ = v50;
                  }
                  while (v49 != v48);
                }
                while (v48 != (unsigned __int128 *)&v16[v17])
                {
                  v51 = *v13;
                  v13 += 2;
                  *(_BYTE *)v48 = v51;
                  v48 = (unsigned __int128 *)((char *)v48 + 1);
                }
              }
              qmemcpy(&v16[*(unsigned int *)(v7 + 4)], "\") that is not \"text/event-stream\". Aborting the connection.", 60);
              goto LABEL_21;
            }
          }
          else if (v11 <= 0x7FFFFFEF)
          {
            WTF::tryFastCompactMalloc((WTF *)(2 * (v10 + 41) + 20));
            v12 = v54[0];
            if (v54[0])
            {
              *(_DWORD *)v54[0] = 2;
              *((_DWORD *)v12 + 1) = v11;
              *(_OWORD *)((char *)v12 + 20) = xmmword_1969F55F0;
              *((_QWORD *)v12 + 1) = (char *)v12 + 20;
              *((_DWORD *)v12 + 4) = 0;
              *(_OWORD *)((char *)v12 + 36) = xmmword_1969F5600;
              *(_OWORD *)((char *)v12 + 52) = xmmword_1969F5610;
              *(_OWORD *)((char *)v12 + 68) = xmmword_1969F5620;
              *(_OWORD *)((char *)v12 + 84) = xmmword_1969F5630;
              *((_WORD *)v12 + 50) = 34;
              v54[0] = (WTF::StringImpl *)v7;
              WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)v54, (char *)v12 + 102);
              v14 = (unint64_t)v54[0];
              if (v54[0])
                v14 = *((unsigned int *)v54[0] + 1);
              v15 = (uint64_t)v12 + 2 * v14 + 102;
              *(_OWORD *)v15 = xmmword_1969F5640;
              *(_OWORD *)(v15 + 16) = xmmword_1969F5650;
              *(_OWORD *)(v15 + 32) = xmmword_1969F5660;
              *(_OWORD *)(v15 + 48) = xmmword_1969F5670;
              *(_OWORD *)(v15 + 64) = xmmword_1969F5680;
              *(_OWORD *)(v15 + 80) = xmmword_1969F5690;
              *(_OWORD *)(v15 + 96) = xmmword_1969F56A0;
              *(_QWORD *)(v15 + 112) = 0x2E006E006F0069;
LABEL_21:
              v54[0] = v12;
              if (*(_DWORD *)v7 == 2)
                WTF::StringImpl::destroy((WTF::StringImpl *)v7, (WTF::StringImpl *)v13);
              else
                *(_DWORD *)v7 -= 2;
              goto LABEL_23;
            }
          }
        }
        else
        {
          WTF::tryFastCompactMalloc((WTF *)(v11 + 20));
          v37 = v54[0];
          if (v54[0])
          {
            *(_OWORD *)((char *)v54[0] + 20) = *(_OWORD *)"EventSource's response has a MIME type (\"";
            qmemcpy((char *)v37 + 36, "sponse has a MIME type (\"\") that is not \"text/event-stream\". Aborting the connection.", 85);
            *(_DWORD *)v37 = 2;
            *((_DWORD *)v37 + 1) = v11;
            *((_QWORD *)v37 + 1) = (char *)v37 + 20;
            *((_DWORD *)v37 + 4) = 4;
            v54[0] = v37;
LABEL_23:
            v18 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
            if (v18)
              v19 = v18 - 96;
            else
              v19 = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)v19 + 248))(v19, 1, 2, v54, 0);
            v21 = v54[0];
            v54[0] = 0;
            if (v21)
            {
              if (*(_DWORD *)v21 == 2)
                WTF::StringImpl::destroy(v21, v20);
              else
                *(_DWORD *)v21 -= 2;
            }
            goto LABEL_29;
          }
        }
      }
    }
LABEL_134:
    __break(0xC471u);
    JUMPOUT(0x195FB5410);
  }
  if ((*(_WORD *)v24 & 0xFFDF) != 0x54
    || (*(_WORD *)(v24 + 2) & 0xFFDF) != 0x45
    || (*(_WORD *)(v24 + 4) & 0xFFDF) != 0x58
    || (*(_WORD *)(v24 + 6) & 0xFFDF) != 0x54
    || (*(_WORD *)(v24 + 8) & 0xFFDF) != 0xF
    || (*(_WORD *)(v24 + 10) & 0xFFDF) != 0x45
    || (*(_WORD *)(v24 + 12) & 0xFFDF) != 0x56
    || (*(_WORD *)(v24 + 14) & 0xFFDF) != 0x45
    || (*(_WORD *)(v24 + 16) & 0xFFDF) != 0x4E
    || (*(_WORD *)(v24 + 18) & 0xFFDF) != 0x54
    || (*(_WORD *)(v24 + 20) & 0xFFDF) != 0xD
    || (*(_WORD *)(v24 + 22) & 0xFFDF) != 0x53
    || (*(_WORD *)(v24 + 24) & 0xFFDF) != 0x54
    || (*(_WORD *)(v24 + 26) & 0xFFDF) != 0x52
    || (*(_WORD *)(v24 + 28) & 0xFFDF) != 0x45
    || (*(_WORD *)(v24 + 30) & 0xFFDF) != 0x41)
  {
    goto LABEL_4;
  }
  v25 = *(unsigned __int16 *)(v24 + 32);
LABEL_49:
  if ((v25 & 0xFFFFFFDF) != 0x4D)
    goto LABEL_4;
  WebCore::ResourceResponse::platformLazyInit(a4, 1);
  v26 = *(_QWORD *)(a4 + 56);
  if (v26)
  {
    v38 = *(_DWORD *)(v26 + 4);
    if (v38)
    {
      if (v38 != 5)
      {
        *(_DWORD *)v26 += 2;
        if (v38 < 0)
          goto LABEL_135;
        goto LABEL_76;
      }
      v46 = *(_QWORD *)(v26 + 8);
      if ((*(_BYTE *)(v26 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v46 & 0xDF) != 0x55
          || (*(_BYTE *)(v46 + 1) & 0xDF) != 0x54
          || (*(_BYTE *)(v46 + 2) & 0xDF) != 0x46
          || (*(_BYTE *)(v46 + 3) & 0xDF) != 0xD)
        {
          goto LABEL_99;
        }
        v47 = *(unsigned __int8 *)(v46 + 4);
      }
      else
      {
        if ((*(_WORD *)v46 & 0xFFDF) != 0x55
          || (*(_WORD *)(v46 + 2) & 0xFFDF) != 0x54
          || (*(_WORD *)(v46 + 4) & 0xFFDF) != 0x46
          || (*(_WORD *)(v46 + 6) & 0xFFDF) != 0xD)
        {
          goto LABEL_99;
        }
        v47 = *(unsigned __int16 *)(v46 + 8);
      }
      if ((v47 & 0xFFFFFFDF) != 0x18)
      {
LABEL_99:
        *(_DWORD *)v26 += 2;
LABEL_76:
        v9 = __OFADD__(v38, 60);
        v39 = v38 + 60;
        if (!v9 && !__OFADD__(v39, 39))
        {
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v39 + 39), (*(_DWORD *)(v26 + 16) >> 2) & 1, (int8x16_t *)"EventSource's response has a charset (\"", 0x27u, v26, (int8x16_t *)"\") that is not UTF-8. The response will be decoded as UTF-8.", 0x3Cu, v54);
          if (v54[0])
          {
            if (*(_DWORD *)v26 == 2)
              WTF::StringImpl::destroy((WTF::StringImpl *)v26, v40);
            else
              *(_DWORD *)v26 -= 2;
            v41 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
            if (v41)
              v42 = v41 - 96;
            else
              v42 = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)v42 + 248))(v42, 1, 2, v54, 0);
            v44 = v54[0];
            v54[0] = 0;
            if (v44)
            {
              if (*(_DWORD *)v44 == 2)
                WTF::StringImpl::destroy(v44, v43);
              else
                *(_DWORD *)v44 -= 2;
            }
            goto LABEL_51;
          }
          goto LABEL_136;
        }
LABEL_135:
        v54[0] = 0;
LABEL_136:
        __break(0xC471u);
LABEL_137:
        JUMPOUT(0x195FB50C8);
      }
    }
  }
LABEL_51:
  WebCore::ResourceResponse::platformLazyInit(a4, 1);
  if (WebCore::SecurityOriginData::shouldTreatAsOpaqueOrigin((WebCore::SecurityOriginData *)a4, v27))
    WebCore::SecurityOriginData::createOpaque((uint64_t)v54);
  else
    WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness((WebCore::SecurityOriginData *)a4, (uint64_t)v54);
  WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)v54, &v52);
  v29 = v52;
  v52 = 0;
  v30 = *(WTF::StringImpl **)(a1 + 224);
  *(_QWORD *)(a1 + 224) = v29;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
    {
      WTF::StringImpl::destroy(v30, v28);
      v30 = v52;
      v52 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          v30 = (WTF::StringImpl *)WTF::StringImpl::destroy(v30, v45);
        else
          *(_DWORD *)v30 -= 2;
      }
    }
    else
    {
      *(_DWORD *)v30 -= 2;
      v52 = 0;
    }
  }
  if (v55 != -1)
    v30 = (WTF::StringImpl *)((uint64_t (*)(char *, WTF::StringImpl **))off_1E33FE860[v55])(&v53, v54);
  *(_WORD *)(a1 + 122) = 1;
  v31 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v31 || (v32 = *(_QWORD *)(v31 + 96)) == 0)
    v32 = WebCore::threadGlobalDataSlow(v30);
  v33 = *(_QWORD *)(v32 + 40);
  if (!v33)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v32);
    v33 = *(_QWORD *)(v32 + 40);
  }
  v34 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v34);
  *(_DWORD *)(v34 + 16) = 1;
  *(_QWORD *)v34 = off_1E33A4B48;
  *(_QWORD *)(v34 + 8) = 0;
  *(_DWORD *)(v34 + 20) = *(_DWORD *)(v34 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v33 + 1376) != 0);
  v36 = *(_DWORD **)(v33 + 1376);
  if (v36)
    *v36 += 2;
  *(_QWORD *)(v34 + 24) = v36;
  *(_QWORD *)(v34 + 32) = 0;
  *(_QWORD *)(v34 + 40) = 0;
  *(_QWORD *)(v34 + 48) = 0;
  *(_QWORD *)(v34 + 56) = v35;
  *(_QWORD *)(v34 + 64) = 0;
  result = WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)a1, (WebCore::Event *)v34);
  if (*(_DWORD *)(v34 + 16) == 1)
    return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  --*(_DWORD *)(v34 + 16);
  return result;
}

WTF *`non-virtual thunk to'WebCore::EventSource::didReceiveResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return WebCore::EventSource::didReceiveResponse(a1 - 32, a2, a3, a4);
}

unsigned int *WebCore::EventSource::didReceiveData(WebCore::EventSource *this, const WebCore::SharedBuffer *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  WTF::StringImpl *v19;
  double v20;
  float v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v24;
  _QWORD v25[2];

  if (*((_BYTE *)this + 170))
  {
    __break(0xC471u);
    goto LABEL_29;
  }
  v4 = *((_QWORD *)this + 16);
  if (*((_DWORD *)a2 + 5))
  {
    v5 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8);
    v6 = *(unsigned int *)(v5 + 24);
    if ((_DWORD)v6 == -1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_28:
      __break(0xC471u);
LABEL_29:
      JUMPOUT(0x195FB55BCLL);
    }
    v25[0] = &v24;
    v7 = (const char *)((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v6])(v25, v5 + 8);
  }
  else
  {
    v7 = 0;
  }
  WebCore::TextResourceDecoder::decode(v4, v7, *((_QWORD *)a2 + 6), &v24);
  if (v24)
  {
    v8 = *((_QWORD *)v24 + 1);
    v9 = *((unsigned int *)v24 + 1) | ((unint64_t)((*((_DWORD *)v24 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v8 = 0;
    v9 = 0x100000000;
  }
  v25[0] = v8;
  v25[1] = v9;
  v10 = *((unsigned int *)this + 40);
  v11 = *((unsigned int *)this + 41);
  v12 = v11 + v9;
  if (v12 <= v10)
    goto LABEL_19;
  v13 = v10 + (v10 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= v12)
    v15 = v11 + v9;
  else
    v15 = v14;
  if (v15 >> 31)
    goto LABEL_28;
  v16 = (void *)*((_QWORD *)this + 19);
  v17 = (void *)WTF::fastMalloc((WTF *)(2 * v15));
  *((_DWORD *)this + 40) = v15;
  *((_QWORD *)this + 19) = v17;
  memcpy(v17, v16, 2 * v11);
  if (v16)
  {
    if (*((void **)this + 19) == v16)
    {
      *((_QWORD *)this + 19) = 0;
      *((_DWORD *)this + 40) = 0;
    }
    WTF::fastFree((WTF *)v16, v18);
  }
LABEL_19:
  *((_DWORD *)this + 41) = v12;
  WTF::StringView::getCharacters<char16_t>(v25, (char *)(*((_QWORD *)this + 19) + 2 * v11));
  v22 = v24;
  v24 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v19);
    else
      *(_DWORD *)v22 -= 2;
  }
  return WebCore::EventSource::parseEventStream((unsigned int *)this, v19, v20, v21);
}

unsigned int *WebCore::EventSource::parseEventStream(unsigned int *this, WTF::StringImpl *a2, double a3, float a4)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  void *v29;
  WTF *v30;
  WTF::StringImpl *v31;
  WebCore::Event *v32;
  WTF *v33;
  WTF::StringImpl *v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void *v50;
  void *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  BOOL v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  BOOL v63;
  int16x8_t *v64;
  int16x8_t *v65;
  int8x16_t v66;
  int16x8_t *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  int v72;
  void *__src;
  uint64_t v74;
  uint64_t v75;
  unsigned int *v76;
  unint64_t StatusReg;
  _DWORD **v78;
  _DWORD **v79;
  void **v80;
  uint64_t v81;
  WTF *v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  int v85;
  char v86;
  WTF::StringImpl *v87;
  int v88;
  WTF::StringImpl *v89;

  v4 = this;
  v5 = 0;
  v6 = 0;
  v7 = this[41];
  v8 = this + 44;
  v79 = (_DWORD **)(this + 52);
  v80 = (void **)(this + 46);
  v9 = -v7;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v78 = (_DWORD **)(this + 56);
  while (1)
  {
    if (v6 >= v7)
      goto LABEL_181;
    if (*((_BYTE *)v4 + 168))
    {
      if (v4[41] <= v6)
        goto LABEL_193;
      v10 = *(_WORD *)(*((_QWORD *)v4 + 19) + 2 * v6) == 10 ? v6 + 1 : v6;
      *((_BYTE *)v4 + 168) = 0;
    }
    else
    {
      v10 = v6;
    }
    if (v10 >= v7)
      break;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = v4[41];
    v16 = v10;
    if (v10 <= v15)
      v17 = v15;
    else
      v17 = v10;
    v18 = v10 - v17;
    while (1)
    {
      if (!(v18 + v12))
      {
        __break(0xC471u);
        goto LABEL_192;
      }
      v19 = *((_QWORD *)v4 + 19);
      v20 = *(unsigned __int16 *)(v19 + 2 * v10 + 2 * v12);
      if (v20 != 58)
        break;
      v21 = v14 == 0;
      v14 = 1;
      if (v21)
        v13 = v12;
      if (v21)
        v5 = v12 >> 8;
LABEL_26:
      ++v12;
      ++v11;
      if (!(v9 + v10 + v12))
        goto LABEL_180;
    }
    if (v20 == 10)
      goto LABEL_28;
    if (v20 != 13)
      goto LABEL_26;
    *((_BYTE *)v4 + 168) = 1;
LABEL_28:
    v81 = v9;
    if (!(_DWORD)v12)
    {
      if (v4[49])
      {
        if (*((_BYTE *)v4 + 170))
          goto LABEL_197;
        v24 = *((_QWORD *)v4 + 25);
        if (v24)
        {
          this = (unsigned int *)*((_QWORD *)v4 + 26);
          *((_QWORD *)v4 + 25) = 0;
          *((_QWORD *)v4 + 26) = v24;
          if (this)
          {
            if (*this == 2)
              this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
            else
              *this -= 2;
          }
        }
        if (!*(_QWORD *)v8 || (v28 = v8, !*(_DWORD *)(*(_QWORD *)v8 + 4)))
        {
          v25 = *(_QWORD *)(StatusReg + 736);
          if (!v25 || (v26 = *(_QWORD *)(v25 + 96)) == 0)
            v26 = WebCore::threadGlobalDataSlow((WebCore *)this);
          v27 = *(_QWORD *)(v26 + 40);
          if (!v27)
          {
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v26);
            v27 = *(_QWORD *)(v26 + 40);
          }
          v28 = (unsigned int *)(v27 + 1192);
        }
        WTF::String::String();
        v30 = (WTF *)*((_QWORD *)v4 + 23);
        if (v30)
        {
          *((_QWORD *)v4 + 23) = 0;
          v4[48] = 0;
          WTF::fastFree(v30, v29);
        }
        *v80 = 0;
        v80[1] = 0;
        v31 = v89;
        v89 = 0;
        v87 = v31;
        v88 = 2;
        LOBYTE(v84) = 0;
        v86 = 0;
        v82 = 0;
        v83 = 0;
        v32 = (WebCore::Event *)bmalloc::api::isoAllocate();
        WebCore::MessageEvent::MessageEvent((uint64_t)v32, v28, (uint64_t)&v87, v78, v79, (uint64_t)&v84, (uint64_t *)&v82);
        WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)v4, v32);
        if (*((_DWORD *)v32 + 4) == 1)
          (*(void (**)(WebCore::Event *))(*(_QWORD *)v32 + 8))(v32);
        else
          --*((_DWORD *)v32 + 4);
        v16 = v10;
        if (HIDWORD(v83))
        {
          v60 = (uint64_t *)v82;
          v61 = 8 * HIDWORD(v83);
          do
          {
            v62 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v60, a2);
            v16 = v10;
            v60 = v62 + 1;
            v61 -= 8;
          }
          while (v61);
        }
        v33 = v82;
        if (v82)
        {
          v82 = 0;
          LODWORD(v83) = 0;
          WTF::fastFree(v33, a2);
          v16 = v10;
        }
        if (v86 && v85 != -1)
        {
          ((void (*)(WTF **, WTF::StringImpl **))off_1E33FE870[v85])(&v82, &v84);
          v16 = v10;
        }
        if (v88 != -1)
        {
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33FE888[v88])(&v84, &v87);
          v16 = v10;
        }
        v34 = v89;
        v89 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
          {
            WTF::StringImpl::destroy(v34, a2);
            v16 = v10;
          }
          else
          {
            *(_DWORD *)v34 -= 2;
          }
        }
      }
      this = *(unsigned int **)v8;
      *(_QWORD *)v8 = 0;
      if (!this)
        goto LABEL_133;
      goto LABEL_61;
    }
    v22 = v13 | (v5 << 8);
    if (v14)
    {
      v23 = v13 | (v5 << 8);
      if (!v22)
        goto LABEL_133;
    }
    else
    {
      v23 = v12;
    }
    if (v15 < v10 || v15 - (unint64_t)v10 < v23)
      goto LABEL_192;
    if (v14)
    {
      v35 = v22 + 1;
      v36 = v22 + 1 + v10;
      if (v15 <= v36)
      {
        __break(0xC471u);
        JUMPOUT(0x195FB5F4CLL);
      }
      v37 = v22 + 2;
      if (*(_WORD *)(v19 + 2 * v36) == 32)
        v38 = v37;
      else
        v38 = v35;
    }
    else
    {
      v38 = v12;
    }
    v39 = v19 + 2 * v10;
    v40 = -v38;
    v41 = v12 - v38;
    v42 = v38 + v10;
    if ((char *)v39 != "data" && v23 == 4)
    {
      if (*(_WORD *)v39 != 100 || *(_DWORD *)(v39 + 2) != 7602273 || *(_DWORD *)(v39 + 4) != 6357108)
        goto LABEL_133;
LABEL_80:
      if (v15 >= v42)
      {
        v76 = v8;
        v43 = (v12 - v38);
        if (v15 - v42 >= v43)
        {
          v44 = v4[48];
          v45 = v4[49];
          if (v41)
          {
            v46 = v45 + v43;
            if (v45 + v43 > v44)
            {
              v74 = v7;
              v75 = v38 + v10;
              v47 = v44 + (v44 >> 2);
              if (v47 >= 0x10)
                v48 = v47 + 1;
              else
                v48 = 16;
              if (v48 <= v46)
                v49 = v45 + v43;
              else
                v49 = v48;
              if (v49 >> 31)
              {
                __break(0xC471u);
                JUMPOUT(0x195FB5F54);
              }
              __src = *v80;
              v50 = (void *)WTF::fastMalloc((WTF *)(2 * v49));
              v4[48] = v49;
              *((_QWORD *)v4 + 23) = v50;
              memcpy(v50, __src, 2 * v45);
              v7 = v74;
              v42 = v75;
              if (__src)
              {
                if (*v80 == __src)
                {
                  *((_QWORD *)v4 + 23) = 0;
                  v4[48] = 0;
                }
                WTF::fastFree((WTF *)__src, v51);
                v42 = v75;
              }
            }
            v52 = v4[49];
            if (v46 < v52)
            {
              __break(0xC471u);
              JUMPOUT(0x195FB5F5CLL);
            }
            this = (unsigned int *)memcpy((void *)(*((_QWORD *)v4 + 23) + 2 * v52), (const void *)(v19 + 2 * v42), 2 * v43);
            v4[49] = v46;
            LODWORD(v44) = v4[48];
            LODWORD(v45) = v45 + v43;
            v16 = v10;
          }
          if ((_DWORD)v45 != (_DWORD)v44)
          {
            *(_WORD *)(*((_QWORD *)v4 + 23) + 2 * v45) = 10;
            v4[49] = v45 + 1;
            v8 = v76;
            goto LABEL_133;
          }
          v53 = v45 + ((unint64_t)v45 >> 2);
          if (v53 >= 0x10)
            v54 = v53 + 1;
          else
            v54 = 16;
          if (v54 <= (unint64_t)v45 + 1)
            v55 = v45 + 1;
          else
            v55 = v54;
          if (!(v55 >> 31))
          {
            v56 = *v80;
            v57 = (void *)WTF::fastMalloc((WTF *)(2 * v55));
            v4[48] = v55;
            *((_QWORD *)v4 + 23) = v57;
            this = (unsigned int *)memcpy(v57, v56, 2 * v45);
            v8 = v76;
            if (v56)
            {
              if (*v80 == v56)
              {
                *((_QWORD *)v4 + 23) = 0;
                v4[48] = 0;
              }
              this = (unsigned int *)WTF::fastFree((WTF *)v56, a2);
            }
            v58 = v4[49];
            *(_WORD *)(*((_QWORD *)v4 + 23) + 2 * v58) = 10;
            v4[49] = v58 + 1;
            goto LABEL_132;
          }
LABEL_197:
          __break(0xC471u);
          JUMPOUT(0x195FB5F34);
        }
      }
LABEL_192:
      __break(1u);
LABEL_193:
      __break(0xC471u);
      JUMPOUT(0x195FB5F44);
    }
    if ((char *)v39 == "data" && v23 == 4)
      goto LABEL_80;
    v59 = v23 != 5;
    if ((char *)v39 == "event" || v23 != 5)
    {
      if ((char *)v39 != "event" || v23 != 5)
      {
        if ((char *)v39 != "id" && v23 == 2)
        {
          if (*(_WORD *)v39 == 105)
          {
            v63 = *(unsigned __int16 *)(v39 + 2) == 100;
            goto LABEL_148;
          }
LABEL_179:
          v16 = v10;
          goto LABEL_122;
        }
        if ((char *)v39 != "id")
          goto LABEL_179;
        v63 = v23 == 2;
LABEL_148:
        v16 = v10;
        if (!v63)
          goto LABEL_122;
        if (v15 < v42 || v15 - v42 < (unint64_t)v41)
          goto LABEL_192;
        a2 = (WTF::StringImpl *)(v19 + 2 * v42);
        if (v41)
        {
          v64 = (int16x8_t *)((char *)a2 + 2 * v41);
          if (v41 <= 0x1F)
          {
            v70 = 2 * (v40 + v11);
            v69 = (char *)(v19 + 2 * v42);
            while (*(_WORD *)v69)
            {
              v69 += 2;
              v70 -= 2;
              if (!v70)
                goto LABEL_170;
            }
LABEL_161:
            v16 = v10;
            if (v69 != (char *)v64 && v69 - (char *)a2 != -2)
              goto LABEL_133;
          }
          else
          {
            v65 = (int16x8_t *)(v19 + 2 * v42);
            do
            {
              v66 = (int8x16_t)vceqzq_s16(*v65);
              LOWORD(a4) = vmaxvq_u16((uint16x8_t)v66);
              if (a4 != 0.0)
                goto LABEL_160;
              v67 = v65 + 1;
              v68 = &v65[1].i8[14];
              ++v65;
            }
            while (v68 < (char *)v64);
            if (v67 < v64)
            {
              v66 = (int8x16_t)vceqzq_s16(v64[-1]);
              LOWORD(a4) = vmaxvq_u16((uint16x8_t)v66);
              if (a4 != 0.0)
              {
                v65 = v64 - 1;
LABEL_160:
                HIWORD(a4) = 1;
                v69 = &v65->i8[2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v66))];
                goto LABEL_161;
              }
            }
          }
        }
LABEL_170:
        WTF::String::String();
        v71 = v84;
        v84 = 0;
        this = (unsigned int *)*((_QWORD *)v4 + 25);
        *((_QWORD *)v4 + 25) = v71;
        if (this)
        {
          v72 = *this - 2;
          if (*this != 2)
            goto LABEL_172;
          WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
          this = (unsigned int *)v84;
          v84 = 0;
          if (this)
          {
            v72 = *this - 2;
            if (*this == 2)
              goto LABEL_131;
LABEL_172:
            *this = v72;
          }
        }
LABEL_132:
        v16 = v10;
        goto LABEL_133;
      }
LABEL_115:
      if (v15 < v42 || v15 - v42 < (unint64_t)v41)
        goto LABEL_192;
      WTF::AtomStringImpl::add();
      this = *(unsigned int **)v8;
      *(_QWORD *)v8 = v84;
      v16 = v10;
      if (!this)
        goto LABEL_133;
LABEL_61:
      if (*this != 2)
      {
        *this -= 2;
        goto LABEL_133;
      }
LABEL_131:
      this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
      goto LABEL_132;
    }
    if (*(_WORD *)v39 == 101 && *(_QWORD *)(v39 + 2) == 0x74006E00650076)
      goto LABEL_115;
    v59 = 0;
LABEL_122:
    if ((char *)v39 == "retry" || v59)
    {
      if ((char *)v39 == "retry" && v23 == 5)
      {
LABEL_126:
        if (!v41)
        {
          *((_QWORD *)v4 + 27) = 3000;
          goto LABEL_133;
        }
        if (v15 < v42 || v15 - v42 < (unint64_t)v41)
          goto LABEL_192;
        this = (unsigned int *)WTF::parseInteger<unsigned long long,char16_t>(v19 + 2 * v42, v41, 0xAu, 0);
        v16 = v10;
        if ((_BYTE)a2)
          *((_QWORD *)v4 + 27) = this;
      }
    }
    else if (*(_WORD *)v39 == 114 && *(_QWORD *)(v39 + 2) == 0x79007200740065)
    {
      goto LABEL_126;
    }
LABEL_133:
    v6 = v16 + v12 + 1;
    v9 = v81;
    if (*((_WORD *)v4 + 61) == 2)
    {
      v6 = v10 + v12 + 1;
      goto LABEL_181;
    }
  }
LABEL_180:
  v6 = v10;
LABEL_181:
  if (v6 == (_DWORD)v7)
  {
    if (v4[40])
    {
      if (v4[41])
        v4[41] = 0;
      this = (unsigned int *)*((_QWORD *)v4 + 19);
      if (this)
      {
        *((_QWORD *)v4 + 19) = 0;
        v4[40] = 0;
        return (unsigned int *)WTF::fastFree((WTF *)this, a2);
      }
    }
  }
  else if (v6)
  {
    this = (unsigned int *)memmove(*((void **)v4 + 19), (const void *)(*((_QWORD *)v4 + 19) + 2 * v6), 2 * v4[41] - 2 * v6);
    v4[41] -= v6;
  }
  return this;
}

unsigned int *`non-virtual thunk to'WebCore::EventSource::didReceiveData(WebCore::EventSource *this, const WebCore::SharedBuffer *a2)
{
  return WebCore::EventSource::didReceiveData((WebCore::EventSource *)((char *)this - 32), a2);
}

WTF::StringImpl *WebCore::EventSource::didFinishLoading(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  WTF::StringImpl *v14;
  double v15;
  float v16;
  WTF::StringImpl *v17;
  void *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *result;
  WTF *v21;
  WTF *v22;
  WTF::StringImpl *v23;
  _QWORD v24[2];

  if (*(_BYTE *)(a1 + 170))
  {
    __break(0xC471u);
    goto LABEL_44;
  }
  WebCore::TextResourceDecoder::flush((uint64_t *)&v23, *(WebCore::TextResourceDecoder **)(a1 + 128));
  v2 = v23;
  if (v23)
  {
    v3 = *((_QWORD *)v23 + 1);
    v2 = *((_DWORD *)v23 + 1);
    v4 = ((unint64_t)*((unsigned int *)v23 + 4) >> 2) & 1;
  }
  else
  {
    v3 = 0;
    v4 = 1;
  }
  v24[0] = v3;
  v24[1] = v2 | (v4 << 32);
  v5 = *(unsigned int *)(a1 + 160);
  v6 = *(unsigned int *)(a1 + 164);
  v7 = v6 + v2;
  if (v7 <= v5)
    goto LABEL_16;
  v8 = v5 + (v5 >> 2);
  if (v8 >= 0x10)
    v9 = v8 + 1;
  else
    v9 = 16;
  if (v9 <= v7)
    v10 = v7;
  else
    v10 = v9;
  if (v10 >> 31)
  {
    __break(0xC471u);
LABEL_44:
    JUMPOUT(0x195FB6124);
  }
  v11 = *(void **)(a1 + 152);
  v12 = (void *)WTF::fastMalloc((WTF *)(2 * v10));
  *(_DWORD *)(a1 + 160) = v10;
  *(_QWORD *)(a1 + 152) = v12;
  memcpy(v12, v11, 2 * v6);
  if (v11)
  {
    if (*(void **)(a1 + 152) == v11)
    {
      *(_QWORD *)(a1 + 152) = 0;
      *(_DWORD *)(a1 + 160) = 0;
    }
    WTF::fastFree((WTF *)v11, v13);
  }
LABEL_16:
  *(_DWORD *)(a1 + 164) = v7;
  WTF::StringView::getCharacters<char16_t>(v24, (char *)(*(_QWORD *)(a1 + 152) + 2 * v6));
  v17 = v23;
  v23 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v14);
    else
      *(_DWORD *)v17 -= 2;
  }
  WebCore::EventSource::parseEventStream((unsigned int *)a1, v14, v15, v16);
  if (*(_DWORD *)(a1 + 160))
  {
    if (*(_DWORD *)(a1 + 164))
      *(_DWORD *)(a1 + 164) = 0;
    v21 = *(WTF **)(a1 + 152);
    if (v21)
    {
      *(_QWORD *)(a1 + 152) = 0;
      *(_DWORD *)(a1 + 160) = 0;
      WTF::fastFree(v21, v18);
    }
  }
  if (*(_DWORD *)(a1 + 192))
  {
    if (*(_DWORD *)(a1 + 196))
      *(_DWORD *)(a1 + 196) = 0;
    v22 = *(WTF **)(a1 + 184);
    if (v22)
    {
      *(_QWORD *)(a1 + 184) = 0;
      *(_DWORD *)(a1 + 192) = 0;
      WTF::fastFree(v22, v18);
    }
  }
  v19 = *(WTF::StringImpl **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  result = *(WTF::StringImpl **)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v18);
    else
      *(_DWORD *)result -= 2;
  }
  *(_BYTE *)(a1 + 169) = 0;
  if (*(_WORD *)(a1 + 122) != 2)
    return (WTF::StringImpl *)WebCore::EventSource::scheduleReconnect((WebCore::EventSource *)a1);
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::EventSource::didFinishLoading(uint64_t a1)
{
  return WebCore::EventSource::didFinishLoading(a1 - 32);
}

WebCore::EventSource *WebCore::EventSource::didFail(WebCore::EventSource *this, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;

  v3 = *(unsigned __int8 *)(a3 + 60);
  if (v3 == 3)
  {
    if (*((_BYTE *)this + 171))
      *((_WORD *)this + 61) = 2;
    else
      *((_BYTE *)this + 172) = 1;
    *((_BYTE *)this + 169) = 0;
  }
  else if (v3 == 2)
  {
    return WebCore::EventSource::abortConnectionAttempt(this);
  }
  else
  {
    v4 = *((unsigned __int16 *)this + 61);
    *((_BYTE *)this + 169) = 0;
    if (v4 != 2)
      return (WebCore::EventSource *)WebCore::EventSource::scheduleReconnect(this);
  }
  return this;
}

WTF *WebCore::EventSource::abortConnectionAttempt(WebCore::EventSource *this)
{
  WTF *v2;
  WTF *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _BOOL4 v11;
  _DWORD *v12;
  WTF *result;
  void *v14;
  uint64_t v15;

  if (*((_BYTE *)this + 170))
  {
    __break(0xC471u);
    JUMPOUT(0x195FB6394);
  }
  v2 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  v3 = v2;
  *(_DWORD *)v2 = 1;
  ++*((_DWORD *)this + 6);
  *((_QWORD *)v2 + 1) = this;
  ++*((_QWORD *)this + 9);
  if (*((_BYTE *)this + 169))
  {
    v4 = *((_BYTE *)this + 171);
    *((_BYTE *)this + 171) = 1;
    v2 = (WTF *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 17) + 8))(*((_QWORD *)this + 17));
    *((_BYTE *)this + 171) = v4;
  }
  else
  {
    *((_WORD *)this + 61) = 2;
  }
  v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v5 || (v6 = *(_QWORD *)(v5 + 96)) == 0)
    v6 = WebCore::threadGlobalDataSlow(v2);
  v7 = *(_QWORD *)(v6 + 40);
  if (!v7)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v6);
    v7 = *(_QWORD *)(v6 + 40);
  }
  v8 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
  *(_QWORD *)v8 = off_1E33A4B48;
  *(_QWORD *)(v8 + 8) = 0;
  v10 = *(_DWORD *)(v8 + 20) & 0xFFC00000 | 0x1E8200;
  v11 = *(_QWORD *)(v7 + 784) != 0;
  *(_DWORD *)(v8 + 16) = 1;
  *(_DWORD *)(v8 + 20) = v10 | v11;
  v12 = *(_DWORD **)(v7 + 784);
  if (v12)
    *v12 += 2;
  *(_QWORD *)(v8 + 24) = v12;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = v9;
  *(_QWORD *)(v8 + 64) = 0;
  result = WebCore::EventTarget::dispatchEvent(this, (WebCore::Event *)v8);
  if (*(_DWORD *)(v8 + 16) == 1)
    result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  else
    --*(_DWORD *)(v8 + 16);
  if (*(_DWORD *)v3 == 1)
  {
    v15 = *((_QWORD *)v3 + 1);
    --*(_QWORD *)(v15 + 72);
    *((_QWORD *)v3 + 1) = 0;
    if (*(_DWORD *)(v15 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 72))(v15);
    else
      --*(_DWORD *)(v15 + 24);
    return (WTF *)WTF::fastFree(v3, v14);
  }
  else
  {
    --*(_DWORD *)v3;
  }
  return result;
}

WTF *`non-virtual thunk to'WebCore::EventSource::didFail(WTF *result, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;

  v3 = *(unsigned __int8 *)(a3 + 60);
  if (v3 == 3)
  {
    if (*((_BYTE *)result + 139))
      *((_WORD *)result + 45) = 2;
    else
      *((_BYTE *)result + 140) = 1;
    *((_BYTE *)result + 137) = 0;
  }
  else if (v3 == 2)
  {
    return WebCore::EventSource::abortConnectionAttempt((WTF *)((char *)result - 32));
  }
  else
  {
    v4 = *((unsigned __int16 *)result + 45);
    *((_BYTE *)result + 137) = 0;
    if (v4 != 2)
      return (WTF *)WebCore::EventSource::scheduleReconnect((WTF *)((char *)result - 32));
  }
  return result;
}

BOOL WebCore::EventSource::virtualHasPendingActivity(WebCore::EventSource *this)
{
  return *((unsigned __int16 *)this + 61) != 2;
}

BOOL `non-virtual thunk to'WebCore::EventSource::virtualHasPendingActivity(WebCore::EventSource *this)
{
  return *((unsigned __int16 *)this + 33) != 2;
}

uint64_t WebCore::EventSource::stop(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;
  void *v11;

  if (*(_WORD *)(this + 122) != 2)
  {
    v2 = this;
    v3 = *(_QWORD *)(this + 144);
    *(_QWORD *)(this + 144) = 0;
    if (v3)
    {
      if (*(_DWORD *)(v3 + 48) == 1)
      {
        v5 = *(_QWORD *)(v3 + 64);
        *(_QWORD *)(v3 + 64) = 0;
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        v6 = *(_QWORD *)(v3 + 56);
        if (v6)
        {
          *(_QWORD *)(v6 + 8) = 0;
          v7 = *(unsigned int **)(v3 + 56);
          *(_QWORD *)(v3 + 56) = 0;
          if (v7)
          {
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              atomic_store(1u, v7);
              WTF::fastFree((WTF *)v7, a2);
            }
          }
        }
        else
        {
          *(_QWORD *)(v3 + 56) = 0;
        }
        WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)v3);
        this = WTF::fastFree(v10, v11);
      }
      else
      {
        --*(_DWORD *)(v3 + 48);
      }
    }
    if (*(_BYTE *)(v2 + 169))
    {
      v4 = *(_BYTE *)(v2 + 171);
      *(_BYTE *)(v2 + 171) = 1;
      this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 136) + 8))(*(_QWORD *)(v2 + 136));
      *(_BYTE *)(v2 + 171) = v4;
    }
    else
    {
      *(_WORD *)(v2 + 122) = 2;
    }
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::EventSource::stop(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;
  void *v11;

  if (*(_WORD *)(this + 66) != 2)
  {
    v2 = this;
    v3 = *(_QWORD *)(this + 88);
    *(_QWORD *)(this + 88) = 0;
    if (v3)
    {
      if (*(_DWORD *)(v3 + 48) == 1)
      {
        v5 = *(_QWORD *)(v3 + 64);
        *(_QWORD *)(v3 + 64) = 0;
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        v6 = *(_QWORD *)(v3 + 56);
        if (v6)
        {
          *(_QWORD *)(v6 + 8) = 0;
          v7 = *(unsigned int **)(v3 + 56);
          *(_QWORD *)(v3 + 56) = 0;
          if (v7)
          {
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              atomic_store(1u, v7);
              WTF::fastFree((WTF *)v7, a2);
            }
          }
        }
        else
        {
          *(_QWORD *)(v3 + 56) = 0;
        }
        WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)v3);
        this = WTF::fastFree(v10, v11);
      }
      else
      {
        --*(_DWORD *)(v3 + 48);
      }
    }
    if (*(_BYTE *)(v2 + 113))
    {
      v4 = *(_BYTE *)(v2 + 115);
      *(_BYTE *)(v2 + 115) = 1;
      this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 80) + 8))(*(_QWORD *)(v2 + 80));
      *(_BYTE *)(v2 + 115) = v4;
    }
    else
    {
      *(_WORD *)(v2 + 66) = 2;
    }
  }
  return this;
}

uint64_t WebCore::EventSource::suspend(uint64_t result, int a2)
{
  if (a2 == 2)
  {
    *(_BYTE *)(result + 170) = 1;
    if (*(_BYTE *)(result + 169))
    {
      __break(0xC471u);
      JUMPOUT(0x195FB6624);
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::EventSource::suspend(uint64_t result, int a2)
{
  if (a2 == 2)
  {
    *(_BYTE *)(result + 114) = 1;
    if (*(_BYTE *)(result + 113))
    {
      result = 410;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WebCore::EventSource::resume(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;

  if (*(_BYTE *)(this + 170))
  {
    v1 = this;
    *(_BYTE *)(this + 170) = 0;
    v2 = *(unsigned __int8 *)(this + 172);
    *(_BYTE *)(this + 172) = 0;
    if (v2)
    {
      v3 = *(_QWORD *)(this + 64);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
          v5 = v4 - 96;
        else
          v5 = 0;
      }
      else
      {
        v5 = 0;
      }
      v6 = WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)v6 = 1;
      ++*(_DWORD *)(v1 + 24);
      *(_QWORD *)(v6 + 8) = v1;
      ++*(_QWORD *)(v1 + 72);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v7 = &off_1E33FEA48;
      v7[1] = v1;
      v7[2] = v6;
      v8 = (uint64_t)v7;
      v9 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 336))(v5, &v8);
      this = v8;
      v8 = 0;
      if (this)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    }
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::EventSource::resume(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char v10;

  if (*(_BYTE *)(this + 114))
  {
    v1 = this;
    *(_BYTE *)(this + 114) = 0;
    v2 = *(unsigned __int8 *)(this + 116);
    *(_BYTE *)(this + 116) = 0;
    if (v2)
    {
      v3 = this - 56;
      v4 = *(_QWORD *)(this + 8);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
          v6 = v5 - 96;
        else
          v6 = 0;
      }
      else
      {
        v6 = 0;
      }
      v7 = WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)v7 = 1;
      ++*(_DWORD *)(v1 - 32);
      *(_QWORD *)(v7 + 8) = v3;
      ++*(_QWORD *)(v1 + 16);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v8 = &off_1E33FEA48;
      v8[1] = v3;
      v8[2] = v7;
      v9 = (uint64_t)v8;
      v10 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 336))(v6, &v9);
      this = v9;
      v9 = 0;
      if (this)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    }
  }
  return this;
}

uint64_t WebCore::EventSource::eventTargetInterface(WebCore::EventSource *this)
{
  return 56;
}

uint64_t WebCore::EventSource::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

_DWORD *WebCore::EventSource::derefEventTarget(_DWORD *this)
{
  if (this[6] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 72))(this);
  --this[6];
  return this;
}

uint64_t WebCore::EventSource::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

_DWORD *WebCore::EventSource::deref(_DWORD *this)
{
  if (this[6] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 72))(this);
  --this[6];
  return this;
}

uint64_t `non-virtual thunk to'WebCore::EventSource::ref(uint64_t this)
{
  ++*(_DWORD *)(this - 32);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::EventSource::deref(uint64_t this)
{
  if (*(_DWORD *)(this - 32) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this - 56) + 72))(this - 56);
  --*(_DWORD *)(this - 32);
  return this;
}

uint64_t WebCore::TextIndicatorData::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  void *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  _BOOL4 v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;

  v4 = *a2;
  v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)(a1 + 48), (WTF *)(a2 + 3));
  *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 16);
  v7 = *((_QWORD *)a2 + 9);
  if (v7)
    ++*(_DWORD *)(v7 + 8);
  v8 = *(_DWORD **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v7;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *((_QWORD *)a2 + 10);
  if (v9)
    ++*(_DWORD *)(v9 + 8);
  v10 = *(_DWORD **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v9;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  v11 = *((_QWORD *)a2 + 11);
  if (v11)
    ++*(_DWORD *)(v11 + 8);
  v12 = *(_DWORD **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v11;
  if (v12)
  {
    if (v12[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    else
      --v12[2];
  }
  v13 = *(_QWORD *)(a1 + 96);
  v14 = *((_QWORD *)a2 + 12);
  if ((v13 & 0x8000000000000) != 0)
  {
    if ((v14 & 0x8000000000000) != 0)
    {
      v25 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFLL) + 4);
      v24 = *(_OWORD *)((v14 & 0xFFFFFFFFFFFFLL) + 4);
      v22 = WebCore::operator==<float,4ul>((float *)&v25, (float *)&v24);
      v13 = *(_QWORD *)(a1 + 96);
      if (v22)
      {
        v23 = *((_QWORD *)a2 + 12);
        if (HIBYTE(v13) == HIBYTE(v23) && BYTE6(v13) == BYTE6(v23))
          goto LABEL_21;
      }
    }
  }
  else if (v13 == v14 && (v14 & 0x8000000000000) == 0)
  {
    goto LABEL_21;
  }
  if ((v13 & 0x8000000000000) != 0)
  {
    v19 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v19);
      WTF::fastFree((WTF *)v19, v6);
    }
  }
  v15 = *((_QWORD *)a2 + 12);
  *(_QWORD *)(a1 + 96) = v15;
  if ((v15 & 0x8000000000000) != 0)
  {
    v17 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
LABEL_21:
  *(_DWORD *)(a1 + 104) = *((_DWORD *)a2 + 26);
  return a1;
}

uint64_t std::__optional_storage_base<WebCore::PasteboardWriterData::URLData,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::PasteboardWriterData::URLData,false> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  __int128 v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  __int128 v10;
  _DWORD *v11;

  v3 = result;
  if (*(unsigned __int8 *)(result + 48) == *(unsigned __int8 *)(a2 + 48))
  {
    if (*(_BYTE *)(result + 48))
    {
      v4 = *(_DWORD **)a2;
      if (*(_QWORD *)a2)
        *v4 += 2;
      v5 = *(WTF::StringImpl **)result;
      *(_QWORD *)v3 = v4;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      v6 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(v3 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(v3 + 8) = v6;
      v7 = *(_DWORD **)(a2 + 40);
      if (v7)
        *v7 += 2;
      result = *(_QWORD *)(v3 + 40);
      *(_QWORD *)(v3 + 40) = v7;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else if (*(_BYTE *)(result + 48))
  {
    v8 = *(WTF::StringImpl **)(result + 40);
    *(_QWORD *)(v3 + 40) = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v8 -= 2;
    }
    result = *(_QWORD *)v3;
    *(_QWORD *)v3 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
    *(_BYTE *)(v3 + 48) = 0;
  }
  else
  {
    v9 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v9 += 2;
    *(_QWORD *)result = v9;
    v10 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(result + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(result + 8) = v10;
    v11 = *(_DWORD **)(a2 + 40);
    if (v11)
      *v11 += 2;
    *(_QWORD *)(result + 40) = v11;
    *(_BYTE *)(result + 48) = 1;
  }
  return result;
}

uint64_t WebCore::PasteboardWriterData::WebContent::operator=(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  _DWORD *v26;
  WTF::StringImpl *v27;
  _DWORD *v28;
  WTF::StringImpl *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  WTF *v59;
  WTF *v61;
  WTF *v63;
  WTF *v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF *v75;
  WTF *v76;
  WTF *v77;
  WTF *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  char v88;
  char v89;
  char v90;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(unsigned int **)(a2 + 16);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  if (v8)
  {
    do
    {
      v9 = __ldaxr((unsigned int *)v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unsigned int *)v8));
    if (!v10)
    {
      atomic_store(1u, (unsigned int *)v8);
      v31 = *(unsigned int *)(v8 + 20);
      if ((_DWORD)v31)
      {
        v32 = *(_QWORD *)(v8 + 8);
        v33 = v32 + 16 * v31;
        do
        {
          v34 = *(unsigned int **)(v32 + 8);
          *(_QWORD *)(v32 + 8) = 0;
          if (v34)
          {
            do
            {
              v35 = __ldaxr(v34);
              v36 = v35 - 1;
            }
            while (__stlxr(v36, v34));
            if (!v36)
            {
              v67 = v33;
              v71 = v32;
              v75 = (WTF *)v34;
              v79 = v8;
              atomic_store(1u, v34);
              v37 = v34[6];
              if ((_DWORD)v37 != -1)
                ((void (*)(char *, unsigned int *))off_1E33FE750[v37])(&v87, v34 + 2);
              *((_DWORD *)v75 + 6) = -1;
              WTF::fastFree(v75, (void *)a2);
              v8 = v79;
              v33 = v67;
              v32 = v71;
            }
          }
          v32 += 16;
        }
        while (v32 != v33);
      }
      v59 = *(WTF **)(v8 + 8);
      if ((WTF *)(v8 + 24) != v59 && v59 != 0)
      {
        *(_QWORD *)(v8 + 8) = 0;
        *(_DWORD *)(v8 + 16) = 0;
        v83 = v8;
        WTF::fastFree(v59, (void *)a2);
        v8 = v83;
      }
      WTF::fastFree((WTF *)v8, (void *)a2);
    }
  }
  v11 = *(unsigned int **)(a2 + 24);
  if (v11)
  {
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  v13 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v11;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v38 = *(unsigned int *)(v13 + 20);
      if ((_DWORD)v38)
      {
        v39 = *(_QWORD *)(v13 + 8);
        v40 = v39 + 16 * v38;
        do
        {
          v41 = *(unsigned int **)(v39 + 8);
          *(_QWORD *)(v39 + 8) = 0;
          if (v41)
          {
            do
            {
              v42 = __ldaxr(v41);
              v43 = v42 - 1;
            }
            while (__stlxr(v43, v41));
            if (!v43)
            {
              v68 = v40;
              v72 = v39;
              v76 = (WTF *)v41;
              v80 = v13;
              atomic_store(1u, v41);
              v44 = v41[6];
              if ((_DWORD)v44 != -1)
                ((void (*)(char *, unsigned int *))off_1E33FE750[v44])(&v88, v41 + 2);
              *((_DWORD *)v76 + 6) = -1;
              WTF::fastFree(v76, (void *)a2);
              v13 = v80;
              v40 = v68;
              v39 = v72;
            }
          }
          v39 += 16;
        }
        while (v39 != v40);
      }
      v61 = *(WTF **)(v13 + 8);
      if ((WTF *)(v13 + 24) != v61 && v61 != 0)
      {
        *(_QWORD *)(v13 + 8) = 0;
        *(_DWORD *)(v13 + 16) = 0;
        v84 = v13;
        WTF::fastFree(v61, (void *)a2);
        v13 = v84;
      }
      WTF::fastFree((WTF *)v13, (void *)a2);
    }
  }
  v16 = *(unsigned int **)(a2 + 32);
  if (v16)
  {
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 + 1, v16));
  }
  v18 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v16;
  if (v18)
  {
    do
    {
      v19 = __ldaxr((unsigned int *)v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, (unsigned int *)v18));
    if (!v20)
    {
      atomic_store(1u, (unsigned int *)v18);
      v45 = *(unsigned int *)(v18 + 20);
      if ((_DWORD)v45)
      {
        v46 = *(_QWORD *)(v18 + 8);
        v47 = v46 + 16 * v45;
        do
        {
          v48 = *(unsigned int **)(v46 + 8);
          *(_QWORD *)(v46 + 8) = 0;
          if (v48)
          {
            do
            {
              v49 = __ldaxr(v48);
              v50 = v49 - 1;
            }
            while (__stlxr(v50, v48));
            if (!v50)
            {
              v69 = v47;
              v73 = v46;
              v77 = (WTF *)v48;
              v81 = v18;
              atomic_store(1u, v48);
              v51 = v48[6];
              if ((_DWORD)v51 != -1)
                ((void (*)(char *, unsigned int *))off_1E33FE750[v51])(&v89, v48 + 2);
              *((_DWORD *)v77 + 6) = -1;
              WTF::fastFree(v77, (void *)a2);
              v18 = v81;
              v47 = v69;
              v46 = v73;
            }
          }
          v46 += 16;
        }
        while (v46 != v47);
      }
      v63 = *(WTF **)(v18 + 8);
      if ((WTF *)(v18 + 24) != v63 && v63 != 0)
      {
        *(_QWORD *)(v18 + 8) = 0;
        *(_DWORD *)(v18 + 16) = 0;
        v85 = v18;
        WTF::fastFree(v63, (void *)a2);
        v18 = v85;
      }
      WTF::fastFree((WTF *)v18, (void *)a2);
    }
  }
  v21 = *(unsigned int **)(a2 + 40);
  if (v21)
  {
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
  }
  v23 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v21;
  if (v23)
  {
    do
    {
      v24 = __ldaxr((unsigned int *)v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, (unsigned int *)v23));
    if (!v25)
    {
      atomic_store(1u, (unsigned int *)v23);
      v52 = *(unsigned int *)(v23 + 20);
      if ((_DWORD)v52)
      {
        v53 = *(_QWORD *)(v23 + 8);
        v54 = v53 + 16 * v52;
        do
        {
          v55 = *(unsigned int **)(v53 + 8);
          *(_QWORD *)(v53 + 8) = 0;
          if (v55)
          {
            do
            {
              v56 = __ldaxr(v55);
              v57 = v56 - 1;
            }
            while (__stlxr(v57, v55));
            if (!v57)
            {
              v70 = v54;
              v74 = v53;
              v78 = (WTF *)v55;
              v82 = v23;
              atomic_store(1u, v55);
              v58 = v55[6];
              if ((_DWORD)v58 != -1)
                ((void (*)(char *, unsigned int *))off_1E33FE750[v58])(&v90, v55 + 2);
              *((_DWORD *)v78 + 6) = -1;
              WTF::fastFree(v78, (void *)a2);
              v23 = v82;
              v54 = v70;
              v53 = v74;
            }
          }
          v53 += 16;
        }
        while (v53 != v54);
      }
      v65 = *(WTF **)(v23 + 8);
      if ((WTF *)(v23 + 24) != v65 && v65 != 0)
      {
        *(_QWORD *)(v23 + 8) = 0;
        *(_DWORD *)(v23 + 16) = 0;
        v86 = v23;
        WTF::fastFree(v65, (void *)a2);
        v23 = v86;
      }
      WTF::fastFree((WTF *)v23, (void *)a2);
    }
  }
  v26 = *(_DWORD **)(a2 + 48);
  if (v26)
    *v26 += 2;
  v27 = *(WTF::StringImpl **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v26;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = *(_DWORD **)(a2 + 56);
  if (v28)
    *v28 += 2;
  v29 = *(WTF::StringImpl **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v28;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v29 -= 2;
  }
  WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)(a1 + 64), (unsigned int *)(a2 + 64));
  return a1;
}

WTF *WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(WTF *result, unsigned int *a2)
{
  WTF *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  _DWORD *v24;
  unsigned int *v25;
  unsigned int v26;

  v2 = result;
  if (a2 == (unsigned int *)result)
    return v2;
  v4 = *((unsigned int *)result + 3);
  v5 = a2[3];
  if (v4 > v5)
  {
    v6 = *(_QWORD *)result + 16 * v5;
    v7 = 16 * v4 - 16 * v5;
    do
    {
      v6 = std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>::~pair(v6, a2)+ 16;
      v7 -= 16;
    }
    while (v7);
    *((_DWORD *)v2 + 3) = v5;
LABEL_21:
    v16 = *(WTF::StringImpl **)a2;
    v17 = *(_QWORD *)v2;
    if ((_DWORD)v5)
    {
      v18 = 16 * v5;
      do
      {
        std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>::operator=[abi:sn180100](v17, v16);
        v16 = (WTF::StringImpl *)((char *)v16 + 16);
        v17 += 16;
        v18 -= 16;
      }
      while (v18);
      v16 = *(WTF::StringImpl **)a2;
      v19 = *((_DWORD *)v2 + 3);
      v17 = *(_QWORD *)v2;
    }
    else
    {
      v19 = 0;
    }
    v20 = a2[3];
    if (v19 != (_DWORD)v20)
    {
      v21 = (char *)v16 + 16 * v20;
      v22 = (_QWORD *)(v17 + 16 * v19);
      v23 = (char *)v16 + 16 * v19;
      do
      {
        v24 = *(_DWORD **)v23;
        if (*(_QWORD *)v23)
          *v24 += 2;
        *v22 = v24;
        v25 = (unsigned int *)*((_QWORD *)v23 + 1);
        if (v25)
        {
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 + 1, v25));
        }
        v22[1] = v25;
        v22 += 2;
        v23 += 16;
      }
      while (v23 != v21);
      v19 = a2[3];
    }
    *((_DWORD *)v2 + 3) = v19;
    return v2;
  }
  v8 = *((_DWORD *)result + 2);
  if (v5 <= v8)
    goto LABEL_20;
  if (v8)
  {
    if ((_DWORD)v4)
    {
      v9 = *(_QWORD *)result;
      v10 = 16 * v4;
      do
      {
        v9 = std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>::~pair(v9, a2)+ 16;
        v10 -= 16;
      }
      while (v10);
      *((_DWORD *)v2 + 3) = 0;
    }
    result = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      result = (WTF *)WTF::fastFree(result, a2);
    }
  }
  v11 = a2[3];
  if (*((_DWORD *)v2 + 2) >= v11)
  {
LABEL_20:
    v5 = *((unsigned int *)v2 + 3);
    goto LABEL_21;
  }
  if (!(v11 >> 28))
  {
    v12 = *(void **)v2;
    v13 = *((unsigned int *)v2 + 3);
    v14 = (void *)WTF::fastMalloc((WTF *)(16 * v11));
    *((_DWORD *)v2 + 2) = v11;
    *(_QWORD *)v2 = v14;
    memcpy(v14, v12, 16 * v13);
    if (v12)
    {
      if (*(void **)v2 == v12)
      {
        *(_QWORD *)v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      WTF::fastFree((WTF *)v12, v15);
    }
    goto LABEL_20;
  }
  __break(0xC471u);
  return result;
}

uint64_t std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>::operator=[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  char v26;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (unsigned int *)*((_QWORD *)a2 + 1);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  if (v8)
  {
    do
    {
      v9 = __ldaxr((unsigned int *)v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unsigned int *)v8));
    if (!v10)
    {
      atomic_store(1u, (unsigned int *)v8);
      v12 = *(unsigned int *)(v8 + 20);
      if ((_DWORD)v12)
      {
        v13 = *(_QWORD *)(v8 + 8);
        v14 = v13 + 16 * v12;
        do
        {
          v15 = *(unsigned int **)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          if (v15)
          {
            do
            {
              v16 = __ldaxr(v15);
              v17 = v16 - 1;
            }
            while (__stlxr(v17, v15));
            if (!v17)
            {
              v23 = v13;
              v24 = v14;
              v22 = v8;
              atomic_store(1u, v15);
              v25 = (WTF *)v15;
              v18 = v15[6];
              if ((_DWORD)v18 != -1)
                ((void (*)(char *, unsigned int *))off_1E33FE750[v18])(&v26, v15 + 2);
              *((_DWORD *)v25 + 6) = -1;
              WTF::fastFree(v25, a2);
              v8 = v22;
              v13 = v23;
              v14 = v24;
            }
          }
          v13 += 16;
        }
        while (v13 != v14);
      }
      v19 = *(WTF **)(v8 + 8);
      if ((WTF *)(v8 + 24) != v19 && v19 != 0)
      {
        *(_QWORD *)(v8 + 8) = 0;
        *(_DWORD *)(v8 + 16) = 0;
        v21 = v8;
        WTF::fastFree(v19, a2);
        v8 = v21;
      }
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  return a1;
}

uint64_t WebCore::DragItem::DragItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  __int128 v18;
  _DWORD *v19;

  v4 = WebCore::DragImage::DragImage(a1, a2);
  v5 = *(_OWORD *)(a2 + 208);
  v6 = *(_OWORD *)(a2 + 224);
  *(_DWORD *)(v4 + 240) = *(_DWORD *)(a2 + 240);
  *(_OWORD *)(v4 + 208) = v5;
  *(_OWORD *)(v4 + 224) = v6;
  v7 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a2 + 248) = 0;
  *(_QWORD *)(v4 + 248) = v7;
  v8 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(v4 + 256) = v8;
  v9 = *(_DWORD *)(v4 + 264) & 0xFFFFFFFE | *(_DWORD *)(a2 + 264) & 1;
  *(_DWORD *)(v4 + 264) = v9;
  v10 = v9 & 0xFFFFFFFD | (2 * ((*(_DWORD *)(a2 + 264) >> 1) & 1));
  *(_DWORD *)(v4 + 264) = v10;
  v11 = v10 & 0xFFFFFFFB | (4 * ((*(_DWORD *)(a2 + 264) >> 2) & 1));
  *(_DWORD *)(v4 + 264) = v11;
  v12 = v11 & 0xFFFFFFC7 | (8 * ((*(_DWORD *)(a2 + 264) >> 3) & 7));
  *(_DWORD *)(v4 + 264) = v12;
  *(_DWORD *)(v4 + 264) = *(_DWORD *)(a2 + 264) & 0xFFFFFFC0 | v12 & 0x3F;
  *(_OWORD *)(v4 + 268) = *(_OWORD *)(a2 + 268);
  *(_DWORD *)(v4 + 284) = *(_DWORD *)(a2 + 284);
  *(_QWORD *)(v4 + 288) = *(_QWORD *)(a2 + 288);
  *(_DWORD *)(a2 + 264) &= ~1u;
  v13 = *(_OWORD *)(a2 + 296);
  *(_BYTE *)(v4 + 312) = *(_BYTE *)(a2 + 312);
  *(_OWORD *)(v4 + 296) = v13;
  v14 = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a2 + 320) = 0;
  *(_QWORD *)(v4 + 328) = 0;
  *(_QWORD *)(v4 + 336) = 0;
  *(_QWORD *)(v4 + 320) = v14;
  v15 = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a2 + 328) = 0;
  *(_QWORD *)(v4 + 328) = v15;
  LODWORD(v15) = *(_DWORD *)(a2 + 336);
  *(_DWORD *)(a2 + 336) = 0;
  *(_DWORD *)(v4 + 336) = v15;
  LODWORD(v15) = *(_DWORD *)(a2 + 340);
  *(_DWORD *)(a2 + 340) = 0;
  *(_DWORD *)(v4 + 340) = v15;
  *(_BYTE *)(v4 + 344) = 0;
  *(_BYTE *)(v4 + 360) = 0;
  if (*(_BYTE *)(a2 + 360))
  {
    *(_BYTE *)(a1 + 344) = *(_BYTE *)(a2 + 344);
    v16 = *(_DWORD **)(a2 + 352);
    if (v16)
      *v16 += 2;
    *(_QWORD *)(a1 + 352) = v16;
    *(_BYTE *)(a1 + 360) = 1;
  }
  *(_BYTE *)(a1 + 368) = 0;
  *(_BYTE *)(a1 + 416) = 0;
  if (*(_BYTE *)(a2 + 416))
  {
    v17 = *(_DWORD **)(a2 + 368);
    if (v17)
      *v17 += 2;
    *(_QWORD *)(a1 + 368) = v17;
    v18 = *(_OWORD *)(a2 + 392);
    *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 392) = v18;
    v19 = *(_DWORD **)(a2 + 408);
    if (v19)
      *v19 += 2;
    *(_QWORD *)(a1 + 408) = v19;
    *(_BYTE *)(a1 + 416) = 1;
  }
  *(_BYTE *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 504) = 0;
  if (*(_BYTE *)(a2 + 504))
  {
    WebCore::PasteboardWriterData::WebContent::WebContent(a1 + 424, a2 + 424);
    *(_BYTE *)(a1 + 504) = 1;
  }
  return a1;
}

void WebCore::DragItem::~DragItem(WebCore::DragItem *this, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  const void *v11;
  uint64_t v12;
  const void *v13;
  char v14;

  WebCore::PasteboardWriterData::~PasteboardWriterData((WebCore::DragItem *)((char *)this + 344), a2);
  v4 = *((unsigned int *)this + 85);
  if ((_DWORD)v4)
  {
    v5 = *((_QWORD *)this + 41);
    v6 = 16 * v4;
    do
    {
      v5 = std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>::~pair(v5, v3)+ 16;
      v6 -= 16;
    }
    while (v6);
  }
  v7 = (WTF *)*((_QWORD *)this + 41);
  if (v7)
  {
    *((_QWORD *)this + 41) = 0;
    *((_DWORD *)this + 84) = 0;
    WTF::fastFree(v7, v3);
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *(const void **)this;
  if (*(_QWORD *)this)
  {
    CFRetain(*(CFTypeRef *)this);
    CFRelease(v11);
  }
  if (*((_BYTE *)this + 200))
  {
    v12 = *((unsigned int *)this + 48);
    if ((_DWORD)v12 != -1)
      ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_4[v12])(&v14, (char *)this + 136);
    *((_DWORD *)this + 48) = -1;
  }
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 8, v3);
  v13 = *(const void **)this;
  *(_QWORD *)this = 0;
  if (v13)
    CFRelease(v13);
}

uint64_t WebCore::collectDocumentElementsFromChildFrames(WebCore *this, const WebCore::ContainerNode *a2)
{
  uint64_t result;
  void *v5;
  const WebCore::ContainerNode *v6;
  const WebCore::ContainerNode *i;
  const WebCore::ContainerNode *v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  result = (*(uint64_t (**)(const WebCore::ContainerNode *))(*(_QWORD *)a2 + 192))(a2);
  if ((_DWORD)result)
  {
    *((_DWORD *)a2 + 6) += 2;
    result = (uint64_t)WebCore::collectDocumentElementsFromChildFrames(WebCore::ContainerNode const&)::$_0::operator()((unsigned int *)this, *((_QWORD **)a2 + 14));
    if (*((_DWORD *)a2 + 6) == 2)
    {
      if ((*((_WORD *)a2 + 15) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef(a2, v5);
    }
    else
    {
      *((_DWORD *)a2 + 6) -= 2;
    }
  }
  v6 = (const WebCore::ContainerNode *)*((_QWORD *)a2 + 10);
  if (v6)
  {
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v6 + 192))(*((_QWORD *)a2 + 10));
    if ((result & 1) != 0)
    {
      i = v6;
      goto LABEL_7;
    }
    while (1)
    {
      if ((*((_WORD *)v6 + 14) & 4) == 0 || (i = (const WebCore::ContainerNode *)*((_QWORD *)v6 + 10)) == 0)
      {
        if (v6 == a2)
          return result;
        while (1)
        {
          i = (const WebCore::ContainerNode *)*((_QWORD *)v6 + 7);
          if (i)
            break;
          v6 = (const WebCore::ContainerNode *)*((_QWORD *)v6 + 4);
          if (v6)
            v11 = v6 == a2;
          else
            v11 = 1;
          if (v11)
            return result;
        }
      }
      result = (*(uint64_t (**)(const WebCore::ContainerNode *))(*(_QWORD *)i + 192))(i);
      v6 = i;
      if ((result & 1) != 0)
      {
        while (1)
        {
LABEL_7:
          result = (uint64_t)WebCore::collectDocumentElementsFromChildFrames(WebCore::ContainerNode const&)::$_0::operator()((unsigned int *)this, *((_QWORD **)i + 14));
          v8 = (const WebCore::ContainerNode *)*((_QWORD *)i + 10);
          if (!v8)
          {
            if (i == a2)
              return result;
            while (1)
            {
              v8 = (const WebCore::ContainerNode *)*((_QWORD *)i + 7);
              if (v8)
                break;
              i = (const WebCore::ContainerNode *)*((_QWORD *)i + 4);
              if (i)
                v10 = i == a2;
              else
                v10 = 1;
              if (v10)
                return result;
            }
          }
          result = (*(uint64_t (**)(const WebCore::ContainerNode *))(*(_QWORD *)v8 + 192))(v8);
          for (i = v8; (result & 1) == 0; v8 = i)
          {
            if ((*((_WORD *)v8 + 14) & 4) == 0 || (i = (const WebCore::ContainerNode *)*((_QWORD *)v8 + 10)) == 0)
            {
              if (v8 == a2)
                return result;
              while (1)
              {
                i = (const WebCore::ContainerNode *)*((_QWORD *)v8 + 7);
                if (i)
                  break;
                v8 = (const WebCore::ContainerNode *)*((_QWORD *)v8 + 4);
                if (v8)
                  v9 = v8 == a2;
                else
                  v9 = 1;
                if (v9)
                  return result;
              }
            }
            result = (*(uint64_t (**)(const WebCore::ContainerNode *))(*(_QWORD *)i + 192))(i);
          }
        }
      }
    }
  }
  return result;
}

unsigned int *WebCore::collectDocumentElementsFromChildFrames(WebCore::ContainerNode const&)::$_0::operator()(unsigned int *result, _QWORD *a2)
{
  WebCore::Node *v2;
  WebCore::Node *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  WebCore::Node *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::Node *v14[5];

  if (a2)
  {
    v14[3] = v2;
    v14[4] = v3;
    v4 = a2[1];
    if (v4)
    {
      if (!*(_BYTE *)(v4 + 144))
      {
        v5 = *(_QWORD *)(v4 + 296);
        if (v5)
        {
          v6 = *(_DWORD *)(v5 + 24);
          *(_DWORD *)(v5 + 24) = v6 + 2;
          v7 = *(WebCore::Node **)(v5 + 1272);
          if (v7)
          {
            v8 = result;
            *((_DWORD *)v7 + 6) += 2;
            v14[0] = v7;
            v9 = result[3];
            if ((_DWORD)v9 == result[2])
            {
              v10 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v9 + 1, (unint64_t)v14);
              v11 = v8[3];
              v12 = *(_QWORD *)v8;
              v13 = *v10;
              *v10 = 0;
              *(_QWORD *)(v12 + 8 * v11) = v13;
              result = (unsigned int *)v14[0];
              v8[3] = v11 + 1;
              v14[0] = 0;
              if (result)
              {
                if (result[6] == 2)
                {
                  if ((*((_WORD *)result + 15) & 0x400) == 0)
                    result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
                }
                else
                {
                  result[6] -= 2;
                }
              }
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)result + 8 * v9) = v7;
              result[3] = v9 + 1;
            }
            v6 = *(_DWORD *)(v5 + 24) - 2;
          }
          if (v6)
          {
            *(_DWORD *)(v5 + 24) = v6;
          }
          else if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          {
            return WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
          }
        }
      }
    }
  }
  return result;
}

BOOL WebCore::RenderStyle::hasBackgroundImage(WebCore::RenderStyle *this)
{
  uint64_t v1;
  uint64_t (*v2)();
  _BOOL8 result;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16) + 8);
  if (*(_QWORD *)(v1 + 8))
  {
    do
    {
      v4 = *(_QWORD *)(v1 + 16);
      result = v4 != 0;
      if (v4)
        break;
      v1 = *(_QWORD *)(v1 + 8);
    }
    while (v1);
  }
  else
  {
    if (*(_QWORD *)(v1 + 16))
      v2 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
    else
      v2 = 0;
    return v2 != 0;
  }
  return result;
}

void WebCore::searchableTextForTarget(WebCore *this, WebCore::Element *a2)
{
  WTF::StringImpl *v2;
  _DWORD **v4;
  WTF::StringImpl *v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WebCore::Node *v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  WebCore::Element **v23;
  uint64_t v24;
  unint64_t v25;
  WTF::StringImpl *v26;
  _DWORD *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  int v33;
  unsigned int v34;
  WebCore::Node *v35;
  int v36;
  _BYTE v37[96];
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;

  v2 = a2;
  v4 = (_DWORD **)MEMORY[0x1E0CBF738];
  v5 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v5 += 2;
  *((_DWORD *)a2 + 6) += 4;
  v6 = *((_WORD *)a2 + 14);
  if ((v6 & 1) != 0)
  {
    v7 = *((_QWORD *)a2 + 10);
    if (v7)
      LODWORD(v7) = *(_DWORD *)(v7 + 4);
  }
  else
  {
    LODWORD(v7) = 0;
    if ((v6 & 4) != 0)
    {
      v8 = *((_QWORD *)a2 + 10);
      if (v8)
      {
        LODWORD(v7) = 0;
        do
        {
          LODWORD(v7) = v7 + 1;
          v8 = *(_QWORD *)(v8 + 56);
        }
        while (v8);
      }
    }
  }
  v32 = a2;
  v33 = 0;
  v35 = a2;
  v36 = v7;
  WebCore::TextIterator::TextIterator((uint64_t)v37, &v32, 4);
  v10 = v35;
  v35 = 0;
  if (v10)
  {
    if (*((_DWORD *)v10 + 6) == 2)
    {
      if ((*((_WORD *)v10 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v10, v9);
    }
    else
    {
      *((_DWORD *)v10 + 6) -= 2;
    }
  }
  v11 = v32;
  v32 = 0;
  if (v11)
  {
    if (*((_DWORD *)v11 + 6) == 2)
    {
      if ((*((_WORD *)v11 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v11, v9);
    }
    else
    {
      *((_DWORD *)v11 + 6) -= 2;
    }
  }
  if (v38)
  {
    v12 = 0;
    v13 = v5;
    while (1)
    {
      if (v39)
        goto LABEL_48;
      if (v40)
      {
        v14 = *(WTF::StringImpl **)(v40 + 8);
        v15 = *(unsigned int *)(v40 + 4) | ((unint64_t)((*(_DWORD *)(v40 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v14 = 0;
        v15 = 0x100000000;
      }
      if (v15 <= v41)
      {
LABEL_32:
        WTF::String::String();
        goto LABEL_33;
      }
      v16 = v42;
      if (v15 - v41 <= v42)
      {
        if (!v41)
        {
          v17 = v15;
          goto LABEL_31;
        }
        v16 = v15 - v41;
      }
      v17 = v16;
      v18 = v15 - (unint64_t)v41;
      if ((v15 & 0x100000000) != 0)
      {
        if (v18 < v17)
          goto LABEL_94;
        v17 |= 0x100000000uLL;
      }
      else if (v18 < v17)
      {
LABEL_94:
        __break(1u);
        goto LABEL_95;
      }
LABEL_31:
      if ((v17 & 0x100000000) != 0)
        goto LABEL_32;
LABEL_48:
      WTF::String::String();
LABEL_33:
      WTF::String::trim();
      v20 = v31;
      v31 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v19);
        else
          *(_DWORD *)v20 -= 2;
      }
      v5 = v32;
      if (!v32)
      {
        v21 = v12;
LABEL_44:
        v5 = v13;
        goto LABEL_45;
      }
      v21 = *((unsigned int *)v32 + 1);
      v32 = 0;
      if (v12 >= v21)
      {
        v21 = v12;
        v22 = v5;
LABEL_42:
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v19);
        else
          *(_DWORD *)v22 -= 2;
        goto LABEL_44;
      }
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
        {
          WTF::StringImpl::destroy(v13, v19);
          v22 = v32;
          v32 = 0;
          v13 = v5;
          if (!v22)
            goto LABEL_45;
          goto LABEL_42;
        }
        *(_DWORD *)v13 -= 2;
      }
LABEL_45:
      WebCore::TextIterator::advance((WebCore::TextIterator *)v37, v19);
      v12 = v21;
      v13 = v5;
      if (!v38)
        goto LABEL_57;
    }
  }
  v21 = 0;
LABEL_57:
  WebCore::collectDocumentElementsFromChildFrames((WebCore *)&v32, v2);
  if (v34)
  {
    v23 = (WebCore::Element **)v32;
    v24 = 8 * v34;
    while (1)
    {
      WebCore::searchableTextForTarget((WebCore *)&v31, *v23);
      v2 = v31;
      if (!v31)
        break;
      v25 = *((unsigned int *)v31 + 1);
      v31 = 0;
      if (v21 >= v25)
      {
        v25 = v21;
        v26 = v2;
        goto LABEL_65;
      }
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
        {
          WTF::StringImpl::destroy(v5, v14);
          v26 = v31;
          v31 = 0;
          v5 = v2;
          if (!v26)
            goto LABEL_68;
LABEL_65:
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, v14);
          else
            *(_DWORD *)v26 -= 2;
LABEL_67:
          v2 = v5;
          goto LABEL_68;
        }
        *(_DWORD *)v5 -= 2;
      }
LABEL_68:
      ++v23;
      v21 = v25;
      v5 = v2;
      v24 -= 8;
      if (!v24)
        goto LABEL_75;
    }
    v25 = v21;
    goto LABEL_67;
  }
  v2 = v5;
  v25 = v21;
LABEL_75:
  if (v25 <= 0x18)
  {
    v27 = *v4;
    if (*v4)
      *v27 += 2;
    *(_QWORD *)this = v27;
  }
  else if (v2)
  {
    if (*((_DWORD *)v2 + 1) > 0x64u)
    {
      WTF::StringImpl::substring(v2);
    }
    else
    {
      *(_DWORD *)v2 += 2;
      *(_QWORD *)this = v2;
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  v15 = v34;
  this = v32;
  if (!v34)
  {
    if (!v32)
      goto LABEL_84;
    goto LABEL_104;
  }
LABEL_95:
  v29 = 8 * v15;
  do
  {
    v30 = *(_QWORD *)this;
    *(_QWORD *)this = 0;
    if (v30)
    {
      if (*(_DWORD *)(v30 + 24) == 2)
      {
        if ((*(_WORD *)(v30 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v30, v14);
      }
      else
      {
        *(_DWORD *)(v30 + 24) -= 2;
      }
    }
    this = (WebCore *)((char *)this + 8);
    v29 -= 8;
  }
  while (v29);
  this = v32;
  if (v32)
  {
LABEL_104:
    v32 = 0;
    v33 = 0;
    WTF::fastFree(this, v14);
  }
LABEL_84:
  WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)v37, v14);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v28);
    else
      *(_DWORD *)v2 -= 2;
  }
}

WTF::StringImpl *WebCore::selectorsForTarget(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *result;
  void *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  const WTF::String *v20;
  WTF::StringImpl *v21;
  int SelectorMatchesOneElement;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::String *v29;
  __n128 v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  int v34;
  WTF::StringImpl *v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t i;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  unsigned int v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  uint64_t *v55;
  WTF *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  char *v69;
  WTF *v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  WTF::StringImpl **v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  __int16 v76;
  uint64_t j;
  BOOL v78;
  WTF::StringImpl **v79;
  WTF::String *v80;
  __n128 v81;
  WTF::StringImpl *v82;
  int v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  uint64_t v87;
  __int16 v88;
  BOOL v89;
  BOOL v90;
  WTF::StringImpl *v91;
  uint64_t k;
  __int16 v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  int v98;
  int v99;
  uint64_t v100;
  unsigned int v101;
  int v102;
  WTF::StringImpl *v103;
  WTF::String *v104;
  __n128 v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  int v108;
  uint64_t v109;
  int v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  __int16 v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  uint64_t *v116;
  WTF *v117;
  uint64_t v118;
  WTF *v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  uint64_t *v122;
  WTF *v123;
  uint64_t v124;
  uint64_t *v125;
  WTF *v126;
  uint64_t v127;
  uint64_t *v128;
  WTF *v129;
  uint64_t v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WebCore::QualifiedName::QualifiedNameImpl *v133;
  WebCore::QualifiedName::QualifiedNameImpl *v134;
  WebCore::QualifiedName::QualifiedNameImpl *v135;
  WebCore::QualifiedName::QualifiedNameImpl *v136;
  WebCore::QualifiedName::QualifiedNameImpl *v137;
  WebCore::QualifiedName::QualifiedNameImpl *v138;
  WebCore::QualifiedName::QualifiedNameImpl *v139;
  WebCore::QualifiedName::QualifiedNameImpl *v140;
  WebCore::QualifiedName::QualifiedNameImpl *v141;
  WebCore::QualifiedName::QualifiedNameImpl *v142;
  WebCore::QualifiedName::QualifiedNameImpl *v143;
  WebCore::QualifiedName::QualifiedNameImpl *v144;
  WebCore::QualifiedName::QualifiedNameImpl *v145;
  WTF::StringImpl **v146;
  WTF::StringImpl **v147;
  WTF::StringImpl **v148;
  WTF::StringImpl **v149;
  WTF::StringImpl **v150;
  WTF::StringImpl **v151;
  WTF::StringImpl **v152;
  WTF::StringImpl **v153;
  WTF::StringImpl **v154;
  WTF::StringImpl **v155;
  WTF::StringImpl **v156;
  WTF::StringImpl **v157;
  WTF::StringImpl **v158;
  WTF::StringImpl **v159;
  WTF *v160;
  void *v161;
  WTF *v162;
  void *v163;
  WTF *v164;
  void *v165;
  WTF *v166;
  void *v167;
  WTF *v168;
  void *v169;
  WTF *v170;
  void *v171;
  WTF *v172;
  void *v173;
  WTF *v174;
  void *v175;
  WTF *v176;
  void *v177;
  WTF *v178;
  void *v179;
  WTF *v180;
  void *v181;
  WTF *v182;
  void *v183;
  WTF *v184;
  void *v185;
  WTF *v186;
  void *v187;
  WTF::StringImpl *v188;
  WTF *v189;
  uint64_t v190;
  WTF::StringImpl *v191;
  WebCore::QualifiedName::QualifiedNameImpl *v192;
  WTF::StringImpl *v193;
  WTF::StringImpl *v194;
  WTF::StringImpl *v195;
  WTF::StringImpl *v196[3];
  WTF::StringImpl *v197;
  WebCore::QualifiedName::QualifiedNameImpl *v198;
  WebCore::QualifiedName::QualifiedNameImpl *v199;
  WebCore::QualifiedName::QualifiedNameImpl *v200;
  WebCore::QualifiedName::QualifiedNameImpl *v201;
  WebCore::QualifiedName::QualifiedNameImpl *v202;
  WebCore::QualifiedName::QualifiedNameImpl *v203;
  WebCore::QualifiedName::QualifiedNameImpl *v204;
  WebCore::QualifiedName::QualifiedNameImpl *v205;
  WebCore::QualifiedName::QualifiedNameImpl *v206;
  WebCore::QualifiedName::QualifiedNameImpl *v207;
  WebCore::QualifiedName::QualifiedNameImpl *v208;
  WebCore::QualifiedName::QualifiedNameImpl *v209;
  WebCore::QualifiedName::QualifiedNameImpl *v210[3];

  v210[1] = *(WebCore::QualifiedName::QualifiedNameImpl **)MEMORY[0x1E0C80C00];
  if ((~*(unsigned __int16 *)(a2 + 28) & 0x408) == 0)
  {
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 368))(a2);
    if ((_DWORD)result)
    {
      *(_DWORD *)(a2 + 24) += 2;
      v17 = *(_QWORD *)(a2 + 112);
      if (!v17 || (v18 = *(_QWORD *)(v17 + 8)) == 0)
      {
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
LABEL_125:
        if (*(_DWORD *)(a2 + 24) == 2)
        {
          if ((*(_WORD *)(a2 + 30) & 0x400) == 0)
            return (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)a2, v16);
        }
        else
        {
          *(_DWORD *)(a2 + 24) -= 2;
        }
        return result;
      }
      *(_DWORD *)(v18 + 24) += 2;
      v19 = *(unsigned __int16 *)(a2 + 28);
      if ((~v19 & 0x408) == 0)
      {
        result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 368))(a2);
        if ((_DWORD)result == 6)
        {
LABEL_46:
          result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
          v33 = v197;
          if (v197)
          {
            if (*((_DWORD *)v197 + 1))
            {
              result = (WTF::StringImpl *)WebCore::selectorsForTarget(&v197, v18, a3);
              v34 = HIDWORD(v198);
              if (HIDWORD(v198))
              {
                v35 = v197;
                v36 = (char *)v197 + 16 * HIDWORD(v198);
                v37 = *((unsigned int *)v36 - 1);
                if ((_DWORD)v37)
                {
                  v38 = (uint64_t *)*((_QWORD *)v36 - 2);
                  for (i = 8 * v37; i; i -= 8)
                  {
                    v40 = *v38;
                    if (*v38)
                    {
                      v41 = *(_DWORD *)(v40 + 4);
                      *(_DWORD *)v40 += 2;
                    }
                    else
                    {
                      v41 = 0;
                    }
                    v42 = *((_DWORD *)v33 + 1);
                    *(_DWORD *)v33 += 2;
                    if ((v42 | v41) < 0 || __OFADD__(v41, v42))
                    {
                      v196[0] = 0;
LABEL_415:
                      __break(0xC471u);
LABEL_420:
                      JUMPOUT(0x195FB9314);
                    }
                    if (!v40 || (*(_BYTE *)(v40 + 16) & 4) != 0)
                      v43 = (*((unsigned __int8 *)v33 + 16) >> 2) & 1;
                    else
                      v43 = 0;
                    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((v41 + v42), v43, v40, (uint64_t)v33, v196);
                    v44 = v196[0];
                    if (!v196[0])
                      goto LABEL_415;
                    v196[0] = 0;
                    v45 = (WTF::StringImpl *)*v38;
                    *v38 = (uint64_t)v44;
                    if (v45)
                    {
                      if (*(_DWORD *)v45 == 2)
                        WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v16);
                      else
                        *(_DWORD *)v45 -= 2;
                    }
                    result = v196[0];
                    v196[0] = 0;
                    if (result)
                    {
                      if (*(_DWORD *)result == 2)
                        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v16);
                      else
                        *(_DWORD *)result -= 2;
                    }
                    if (*(_DWORD *)v33 == 2)
                    {
                      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v16);
                      if (v40)
                      {
LABEL_68:
                        if (*(_DWORD *)v40 == 2)
                          result = (WTF::StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)v40, (WTF::StringImpl *)v16);
                        else
                          *(_DWORD *)v40 -= 2;
                      }
                    }
                    else
                    {
                      *(_DWORD *)v33 -= 2;
                      if (v40)
                        goto LABEL_68;
                    }
                    ++v38;
                  }
                }
                *(_QWORD *)a1 = v35;
                *(_DWORD *)(a1 + 8) = (_DWORD)v198;
                *(_DWORD *)(a1 + 12) = v34;
              }
              else
              {
                *(_QWORD *)a1 = 0;
                *(_QWORD *)(a1 + 8) = 0;
                result = v197;
                if (v197)
                  result = (WTF::StringImpl *)WTF::fastFree(v197, v16);
              }
            }
            else
            {
              *(_QWORD *)a1 = 0;
              *(_QWORD *)(a1 + 8) = 0;
            }
            if (*(_DWORD *)v33 == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v16);
            else
              *(_DWORD *)v33 -= 2;
            goto LABEL_123;
          }
LABEL_78:
          *(_QWORD *)a1 = 0;
          *(_QWORD *)(a1 + 8) = 0;
LABEL_123:
          if (*(_DWORD *)(v18 + 24) == 2)
          {
            if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
              result = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v18, v16);
          }
          else
          {
            *(_DWORD *)(v18 + 24) -= 2;
          }
          goto LABEL_125;
        }
        v19 = *(unsigned __int16 *)(a2 + 28);
      }
      if ((~v19 & 0x408) != 0)
        goto LABEL_78;
      result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 368))(a2);
      if ((_DWORD)result != 7)
        goto LABEL_78;
      goto LABEL_46;
    }
  }
  v191 = 0;
  v192 = 0;
  v6 = **(_QWORD **)(a2 + 40);
  if (v6)
    v7 = (*(_WORD *)(v6 + 28) & 0x80) == 0;
  else
    v7 = 1;
  if (!v7)
  {
    v8 = *(_QWORD *)(v6 + 200);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
      {
        *(_DWORD *)(v9 + 24) += 2;
        result = (WTF::StringImpl *)WebCore::selectorsForTarget(&v197, v9, a3);
        v12 = v197;
        v191 = v197;
        v192 = v198;
        if (!HIDWORD(v198))
        {
          *(_QWORD *)a1 = 0;
          *(_QWORD *)(a1 + 8) = 0;
          if (*(_DWORD *)(v9 + 24) == 2)
          {
            if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
              result = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v9, v11);
          }
          else
          {
            *(_DWORD *)(v9 + 24) -= 2;
          }
          goto LABEL_169;
        }
        if (*(_DWORD *)(v9 + 24) == 2)
        {
          if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v9, v11);
        }
        else
        {
          *(_DWORD *)(v9 + 24) -= 2;
        }
      }
    }
  }
  v190 = 5;
  v189 = (WTF *)WTF::fastMalloc((WTF *)0x28);
  WebCore::computeIDSelector((uint64_t)&v197, *(WebCore::TreeScopeOrderedMap ***)(a2 + 40), *(_QWORD *)(a2 + 104));
  v14 = v197;
  if (v197)
  {
    if (*((_DWORD *)v197 + 1))
    {
      v15 = HIDWORD(v190);
      v197 = 0;
      *((_QWORD *)v189 + HIDWORD(v190)) = v14;
      HIDWORD(v190) = v15 + 1;
      v14 = v197;
      v197 = 0;
      if (!v14)
        goto LABEL_25;
    }
    else
    {
      v197 = 0;
    }
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
LABEL_25:
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)a2 + 104))(&v197, a2);
  SelectorMatchesOneElement = WebCore::querySelectorMatchesOneElement((WebCore *)a2, (const WebCore::Element *)&v197, v20);
  v23 = v197;
  v197 = 0;
  if (!v23)
    goto LABEL_28;
  if (*(_DWORD *)v23 != 2)
  {
    *(_DWORD *)v23 -= 2;
LABEL_28:
    if (SelectorMatchesOneElement)
      goto LABEL_29;
    goto LABEL_37;
  }
  WTF::StringImpl::destroy(v23, v21);
  if (SelectorMatchesOneElement)
  {
LABEL_29:
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)a2 + 104))(&v197, a2);
    v25 = HIDWORD(v190);
    if (HIDWORD(v190) != (_DWORD)v190)
    {
      v26 = v197;
      v197 = 0;
      *((_QWORD *)v189 + HIDWORD(v190)) = v26;
      goto LABEL_31;
    }
    goto LABEL_117;
  }
LABEL_37:
  WebCore::computeTagAndClassSelector((uint64_t)&v197, (WebCore::Element *)a2);
  v31 = v197;
  if (!v197)
    goto LABEL_82;
  if (!*((_DWORD *)v197 + 1))
  {
    v197 = 0;
LABEL_80:
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v28);
    else
      *(_DWORD *)v31 -= 2;
    goto LABEL_82;
  }
  LODWORD(v32) = HIDWORD(v190);
  if (HIDWORD(v190) == (_DWORD)v190)
  {
    v116 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v189, HIDWORD(v190) + 1, (unint64_t)&v197);
    v32 = HIDWORD(v190);
    v117 = v189;
    v118 = *v116;
    *v116 = 0;
    *((_QWORD *)v117 + v32) = v118;
  }
  else
  {
    v197 = 0;
    *((_QWORD *)v189 + HIDWORD(v190)) = v31;
  }
  HIDWORD(v190) = v32 + 1;
  v31 = v197;
  v197 = 0;
  if (v31)
    goto LABEL_80;
LABEL_82:
  WebCore::computeTagAndAttributeSelector((WTF::StringImpl *)&v197, (const WebCore::Element *)a2, MEMORY[0x1E0CBF738], v29, v30);
  v27 = v197;
  if (!v197)
    goto LABEL_83;
  if (!*((_DWORD *)v197 + 1))
  {
    v197 = 0;
LABEL_32:
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v24);
    else
      *(_DWORD *)v27 -= 2;
    goto LABEL_83;
  }
  v25 = HIDWORD(v190);
  if (HIDWORD(v190) != (_DWORD)v190)
  {
    v197 = 0;
    *((_QWORD *)v189 + HIDWORD(v190)) = v27;
    goto LABEL_31;
  }
LABEL_117:
  v55 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v189, v25 + 1, (unint64_t)&v197);
  v25 = HIDWORD(v190);
  v56 = v189;
  v57 = *v55;
  *v55 = 0;
  *((_QWORD *)v56 + v25) = v57;
LABEL_31:
  HIDWORD(v190) = v25 + 1;
  v27 = v197;
  v197 = 0;
  if (v27)
    goto LABEL_32;
LABEL_83:
  v46 = HIDWORD(v190);
  if (HIDWORD(v190))
    goto LABEL_142;
  if ((byte_1ECE83861 & 1) == 0)
  {
    v132 = (WTF::StringImpl *)WebCore::HTMLNames::aTag;
    if (WebCore::HTMLNames::aTag)
      ++*(_DWORD *)WebCore::HTMLNames::aTag;
    v197 = v132;
    v133 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::imgTag;
    if (WebCore::HTMLNames::imgTag)
      ++*(_DWORD *)WebCore::HTMLNames::imgTag;
    v198 = v133;
    v134 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::timeTag;
    if (WebCore::HTMLNames::timeTag)
      ++*(_DWORD *)WebCore::HTMLNames::timeTag;
    v199 = v134;
    v135 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::pictureTag;
    if (WebCore::HTMLNames::pictureTag)
      ++*(_DWORD *)WebCore::HTMLNames::pictureTag;
    v200 = v135;
    v136 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::videoTag;
    if (WebCore::HTMLNames::videoTag)
      ++*(_DWORD *)WebCore::HTMLNames::videoTag;
    v201 = v136;
    v137 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::articleTag;
    if (WebCore::HTMLNames::articleTag)
      ++*(_DWORD *)WebCore::HTMLNames::articleTag;
    v202 = v137;
    v138 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::audioTag;
    if (WebCore::HTMLNames::audioTag)
      ++*(_DWORD *)WebCore::HTMLNames::audioTag;
    v203 = v138;
    v139 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::iframeTag;
    if (WebCore::HTMLNames::iframeTag)
      ++*(_DWORD *)WebCore::HTMLNames::iframeTag;
    v204 = v139;
    v140 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::embedTag;
    if (WebCore::HTMLNames::embedTag)
      ++*(_DWORD *)WebCore::HTMLNames::embedTag;
    v205 = v140;
    v141 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::sourceTag;
    if (WebCore::HTMLNames::sourceTag)
      ++*(_DWORD *)WebCore::HTMLNames::sourceTag;
    v206 = v141;
    v142 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::formTag;
    if (WebCore::HTMLNames::formTag)
      ++*(_DWORD *)WebCore::HTMLNames::formTag;
    v207 = v142;
    v143 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::inputTag;
    if (WebCore::HTMLNames::inputTag)
      ++*(_DWORD *)WebCore::HTMLNames::inputTag;
    v208 = v143;
    v144 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::selectTag;
    if (WebCore::HTMLNames::selectTag)
      ++*(_DWORD *)WebCore::HTMLNames::selectTag;
    v209 = v144;
    v145 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::buttonTag;
    if (WebCore::HTMLNames::buttonTag)
      ++*(_DWORD *)WebCore::HTMLNames::buttonTag;
    v210[0] = v145;
    qword_1ECE83880 = 0;
    unk_1ECE83888 = 0;
    unk_1ECE8388D = 0;
    WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)&qword_1ECE83880, &v197, (uint64_t)v196);
    WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)&qword_1ECE83880, &v198, (uint64_t)v196);
    WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)&qword_1ECE83880, &v199, (uint64_t)v196);
    WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)&qword_1ECE83880, &v200, (uint64_t)v196);
    WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)&qword_1ECE83880, &v201, (uint64_t)v196);
    WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)&qword_1ECE83880, &v202, (uint64_t)v196);
    WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)&qword_1ECE83880, &v203, (uint64_t)v196);
    WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)&qword_1ECE83880, &v204, (uint64_t)v196);
    WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)&qword_1ECE83880, &v205, (uint64_t)v196);
    WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)&qword_1ECE83880, &v206, (uint64_t)v196);
    WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)&qword_1ECE83880, &v207, (uint64_t)v196);
    WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)&qword_1ECE83880, &v208, (uint64_t)v196);
    WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)&qword_1ECE83880, &v209, (uint64_t)v196);
    WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)&qword_1ECE83880, v210, (uint64_t)v196);
    v146 = (WTF::StringImpl **)v210[0];
    v210[0] = 0;
    if (v146)
    {
      if (*(_DWORD *)v146 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v146);
        WTF::fastFree(v160, v161);
      }
      else
      {
        --*(_DWORD *)v146;
      }
    }
    v147 = (WTF::StringImpl **)v209;
    v209 = 0;
    if (v147)
    {
      if (*(_DWORD *)v147 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v147);
        WTF::fastFree(v162, v163);
      }
      else
      {
        --*(_DWORD *)v147;
      }
    }
    v148 = (WTF::StringImpl **)v208;
    v208 = 0;
    if (v148)
    {
      if (*(_DWORD *)v148 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v148);
        WTF::fastFree(v164, v165);
      }
      else
      {
        --*(_DWORD *)v148;
      }
    }
    v149 = (WTF::StringImpl **)v207;
    v207 = 0;
    if (v149)
    {
      if (*(_DWORD *)v149 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v149);
        WTF::fastFree(v166, v167);
      }
      else
      {
        --*(_DWORD *)v149;
      }
    }
    v150 = (WTF::StringImpl **)v206;
    v206 = 0;
    if (v150)
    {
      if (*(_DWORD *)v150 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v150);
        WTF::fastFree(v168, v169);
      }
      else
      {
        --*(_DWORD *)v150;
      }
    }
    v151 = (WTF::StringImpl **)v205;
    v205 = 0;
    if (v151)
    {
      if (*(_DWORD *)v151 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v151);
        WTF::fastFree(v170, v171);
      }
      else
      {
        --*(_DWORD *)v151;
      }
    }
    v152 = (WTF::StringImpl **)v204;
    v204 = 0;
    if (v152)
    {
      if (*(_DWORD *)v152 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v152);
        WTF::fastFree(v172, v173);
      }
      else
      {
        --*(_DWORD *)v152;
      }
    }
    v153 = (WTF::StringImpl **)v203;
    v203 = 0;
    if (v153)
    {
      if (*(_DWORD *)v153 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v153);
        WTF::fastFree(v174, v175);
      }
      else
      {
        --*(_DWORD *)v153;
      }
    }
    v154 = (WTF::StringImpl **)v202;
    v202 = 0;
    if (v154)
    {
      if (*(_DWORD *)v154 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v154);
        WTF::fastFree(v176, v177);
      }
      else
      {
        --*(_DWORD *)v154;
      }
    }
    v155 = (WTF::StringImpl **)v201;
    v201 = 0;
    if (v155)
    {
      if (*(_DWORD *)v155 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v155);
        WTF::fastFree(v178, v179);
      }
      else
      {
        --*(_DWORD *)v155;
      }
    }
    v156 = (WTF::StringImpl **)v200;
    v200 = 0;
    if (v156)
    {
      if (*(_DWORD *)v156 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v156);
        WTF::fastFree(v180, v181);
      }
      else
      {
        --*(_DWORD *)v156;
      }
    }
    v157 = (WTF::StringImpl **)v199;
    v199 = 0;
    if (v157)
    {
      if (*(_DWORD *)v157 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v157);
        WTF::fastFree(v182, v183);
      }
      else
      {
        --*(_DWORD *)v157;
      }
    }
    v158 = (WTF::StringImpl **)v198;
    v198 = 0;
    if (v158)
    {
      if (*(_DWORD *)v158 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v158);
        WTF::fastFree(v184, v185);
      }
      else
      {
        --*(_DWORD *)v158;
      }
    }
    v159 = (WTF::StringImpl **)v197;
    v197 = 0;
    if (v159)
    {
      if (*(_DWORD *)v159 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v159);
        WTF::fastFree(v186, v187);
      }
      else
      {
        --*(_DWORD *)v159;
      }
    }
    byte_1ECE83861 = 1;
  }
  v47 = 0;
  v196[0] = 0;
  v48 = *(_QWORD *)(a2 + 80);
  if (!v48)
    goto LABEL_86;
  v76 = *(_WORD *)(v48 + 28);
  if ((v76 & 0x10) != 0)
  {
    j = *(_QWORD *)(a2 + 80);
LABEL_191:
    v79 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
    while (1)
    {
      if (qword_1ECE83880)
      {
        if (WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::QualifiedName>,WTF::DefaultHash<WebCore::QualifiedName>>,WebCore::QualifiedName>(&qword_1ECE83880, (WebCore::QualifiedName::QualifiedNameImpl **)(j + 96)))
        {
          WebCore::computeTagAndAttributeSelector((WTF::StringImpl *)&v197, (const WebCore::Element *)j, v79, v80, v81);
          v82 = v197;
          if (v197)
          {
            v83 = *((_DWORD *)v197 + 1);
            if (v83)
            {
              v197 = 0;
              v194 = v82;
              WTF::makeString<WTF::ASCIILiteral,WTF::String,char>((uint64_t)":has(", 6, (uint64_t *)&v194, 41, &v195);
              v85 = v195;
              v84 = v196[0];
              v195 = 0;
              v196[0] = v85;
              if (v84)
              {
                if (*(_DWORD *)v84 == 2)
                {
                  WTF::StringImpl::destroy(v84, v24);
                  v91 = v195;
                  v195 = 0;
                  if (v91)
                  {
                    if (*(_DWORD *)v91 == 2)
                      WTF::StringImpl::destroy(v91, v24);
                    else
                      *(_DWORD *)v91 -= 2;
                  }
                }
                else
                {
                  *(_DWORD *)v84 -= 2;
                  v195 = 0;
                }
              }
              v86 = v194;
              v194 = 0;
              if (v86)
              {
                if (*(_DWORD *)v86 == 2)
                  WTF::StringImpl::destroy(v86, v24);
                else
                  *(_DWORD *)v86 -= 2;
              }
              v82 = v197;
              v197 = 0;
              if (!v82)
                goto LABEL_235;
            }
            else
            {
              v197 = 0;
            }
            if (*(_DWORD *)v82 == 2)
            {
              WTF::StringImpl::destroy(v82, v24);
              if (v83)
                goto LABEL_235;
            }
            else
            {
              *(_DWORD *)v82 -= 2;
              if (v83)
                goto LABEL_235;
            }
          }
        }
      }
      v87 = *(_QWORD *)(j + 80);
      if (!v87)
      {
        if (j == a2)
          goto LABEL_235;
        while (1)
        {
          v87 = *(_QWORD *)(j + 56);
          if (v87)
            break;
          j = *(_QWORD *)(j + 32);
          if (j)
            v90 = j == a2;
          else
            v90 = 1;
          if (v90)
            goto LABEL_235;
        }
      }
      v88 = *(_WORD *)(v87 + 28);
      for (j = v87; (v88 & 0x10) == 0; v87 = j)
      {
        if ((v88 & 4) == 0 || (j = *(_QWORD *)(v87 + 80)) == 0)
        {
          if (v87 == a2)
            goto LABEL_235;
          while (1)
          {
            j = *(_QWORD *)(v87 + 56);
            if (j)
              break;
            v87 = *(_QWORD *)(v87 + 32);
            if (v87)
              v89 = v87 == a2;
            else
              v89 = 1;
            if (v89)
              goto LABEL_235;
          }
        }
        v88 = *(_WORD *)(j + 28);
      }
    }
  }
  while ((v76 & 4) != 0)
  {
    j = *(_QWORD *)(v48 + 80);
    if (!j)
      break;
LABEL_182:
    v76 = *(_WORD *)(j + 28);
    v48 = j;
    if ((v76 & 0x10) != 0)
      goto LABEL_191;
  }
  if (v48 != a2)
  {
    do
    {
      j = *(_QWORD *)(v48 + 56);
      if (j)
        goto LABEL_182;
      v48 = *(_QWORD *)(v48 + 32);
      if (v48)
        v78 = v48 == a2;
      else
        v78 = 1;
    }
    while (!v78);
  }
LABEL_235:
  v47 = v196[0];
  if (!v196[0] || !*((_DWORD *)v196[0] + 1))
    goto LABEL_86;
  k = a2;
  if ((*(_WORD *)(a2 + 28) & 0x10) != 0)
  {
LABEL_246:
    v94 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
LABEL_247:
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)k + 104))(&v193, k);
    v96 = v196[0];
    if (v196[0])
      *(_DWORD *)v196[0] += 2;
    v97 = v193;
    if (v193)
    {
      v98 = *((_DWORD *)v193 + 1);
      if (v96)
      {
LABEL_251:
        v99 = *((_DWORD *)v96 + 1);
LABEL_252:
        if (((v99 | v98) & 0x80000000) == 0)
        {
          v100 = (v98 + v99);
          if (!__OFADD__(v98, v99))
          {
            if (v193)
            {
              v101 = *((_DWORD *)v193 + 4);
              v102 = (v101 >> 2) & 1;
              if (!v96 || (v101 & 4) == 0)
              {
LABEL_258:
                WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v100, v102, (uint64_t)v193, (uint64_t)v96, &v195);
                if (v195)
                {
                  if (v96)
                  {
                    if (*(_DWORD *)v96 == 2)
                      WTF::StringImpl::destroy(v96, v95);
                    else
                      *(_DWORD *)v96 -= 2;
                  }
LABEL_262:
                  v103 = v193;
                  v193 = 0;
                  if (v103)
                  {
                    if (*(_DWORD *)v103 == 2)
                      WTF::StringImpl::destroy(v103, v95);
                    else
                      *(_DWORD *)v103 -= 2;
                  }
                  if (WebCore::querySelectorMatchesOneElement((WebCore *)a2, (const WebCore::Element *)&v195, v97))
                  {
                    v188 = v195;
                  }
                  else
                  {
                    WebCore::computeTagAndAttributeSelector((WTF::StringImpl *)&v188, (const WebCore::Element *)k, v196, v104, v105);
                    v106 = v188;
                    if (!v188)
                    {
                      v188 = 0;
                      goto LABEL_271;
                    }
                    if (!*((_DWORD *)v188 + 1))
                    {
                      v188 = 0;
                      if (*(_DWORD *)v106 == 2)
                        WTF::StringImpl::destroy(v106, v24);
                      else
                        *(_DWORD *)v106 -= 2;
LABEL_271:
                      v107 = v195;
                      v195 = 0;
                      if (v107)
                      {
                        v108 = *((_DWORD *)v107 + 1);
                        if (v108 < 0 || (v109 = (v108 + 3), __OFADD__(v108, 3)))
                        {
                          v197 = 0;
                          goto LABEL_417;
                        }
                        v110 = (*((unsigned __int8 *)v107 + 16) >> 2) & 1;
                      }
                      else
                      {
                        v110 = 1;
                        v109 = 3;
                      }
                      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v109, v110, (int8x16_t *)" > ", 3u, (uint64_t)v107, &v197);
                      v47 = v197;
                      if (v197)
                      {
                        v197 = 0;
                        v111 = v196[0];
                        v196[0] = v47;
                        if (v111)
                        {
                          if (*(_DWORD *)v111 == 2)
                          {
                            WTF::StringImpl::destroy(v111, v24);
                            v114 = v197;
                            v197 = 0;
                            if (v114)
                            {
                              if (*(_DWORD *)v114 == 2)
                                WTF::StringImpl::destroy(v114, v24);
                              else
                                *(_DWORD *)v114 -= 2;
                            }
                          }
                          else
                          {
                            *(_DWORD *)v111 -= 2;
                            v197 = 0;
                          }
                        }
                        if (v107)
                        {
                          if (*(_DWORD *)v107 == 2)
                            WTF::StringImpl::destroy(v107, v24);
                          else
                            *(_DWORD *)v107 -= 2;
                        }
                        v112 = v195;
                        v195 = 0;
                        if (v112)
                        {
                          if (*(_DWORD *)v112 == 2)
                            WTF::StringImpl::destroy(v112, v24);
                          else
                            *(_DWORD *)v112 -= 2;
                        }
                        while (1)
                        {
                          k = *(_QWORD *)(k + 32);
                          if (!k)
                            goto LABEL_86;
                          v113 = *(_WORD *)(k + 28);
                          if ((v113 & 8) == 0)
                            goto LABEL_86;
                          if ((v113 & 0x10) != 0)
                            goto LABEL_247;
                        }
                      }
LABEL_417:
                      __break(0xC471u);
                      JUMPOUT(0x195FB9320);
                    }
                    v131 = v195;
                    v195 = 0;
                    if (v131)
                    {
                      if (*(_DWORD *)v131 == 2)
                        WTF::StringImpl::destroy(v131, v24);
                      else
                        *(_DWORD *)v131 -= 2;
                    }
                  }
                  v47 = v196[0];
                  goto LABEL_89;
                }
LABEL_419:
                __break(0xC471u);
                goto LABEL_420;
              }
LABEL_257:
              v102 = (*((unsigned __int8 *)v96 + 16) >> 2) & 1;
              goto LABEL_258;
            }
            if (v96)
              goto LABEL_257;
            if (!(_DWORD)v100)
            {
              *(_DWORD *)v94 += 2;
              v115 = v94;
              goto LABEL_304;
            }
            if ((v100 & 0x80000000) == 0)
            {
              WTF::tryFastCompactMalloc((WTF *)(v100 + 20));
              v115 = v197;
              if (v197)
              {
                *(_DWORD *)v197 = 2;
                *((_DWORD *)v115 + 1) = v100;
                *((_QWORD *)v115 + 1) = (char *)v115 + 20;
                *((_DWORD *)v115 + 4) = 4;
LABEL_304:
                v195 = v115;
                goto LABEL_262;
              }
            }
          }
        }
        v195 = 0;
        goto LABEL_419;
      }
    }
    else
    {
      v98 = 0;
      if (v96)
        goto LABEL_251;
    }
    v99 = 0;
    goto LABEL_252;
  }
  for (k = *(_QWORD *)(a2 + 32); k; k = *(_QWORD *)(k + 32))
  {
    v93 = *(_WORD *)(k + 28);
    if ((v93 & 8) == 0)
      break;
    if ((v93 & 0x10) != 0)
      goto LABEL_246;
  }
LABEL_86:
  v49 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v49 += 2;
  v188 = v49;
LABEL_89:
  v196[0] = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WTF::StringImpl::destroy(v47, v24);
    else
      *(_DWORD *)v47 -= 2;
  }
  v50 = v188;
  if (!v188)
    goto LABEL_106;
  if (!*((_DWORD *)v188 + 1))
  {
    v188 = 0;
LABEL_104:
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, v24);
    else
      *(_DWORD *)v50 -= 2;
LABEL_106:
    v46 = HIDWORD(v190);
    goto LABEL_107;
  }
  LODWORD(v51) = HIDWORD(v190);
  if (HIDWORD(v190) == (_DWORD)v190)
  {
    v122 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v189, HIDWORD(v190) + 1, (unint64_t)&v188);
    v51 = HIDWORD(v190);
    v123 = v189;
    v124 = *v122;
    *v122 = 0;
    *((_QWORD *)v123 + v51) = v124;
  }
  else
  {
    v188 = 0;
    *((_QWORD *)v189 + HIDWORD(v190)) = v50;
  }
  v46 = v51 + 1;
  HIDWORD(v190) = v46;
  v50 = v188;
  v188 = 0;
  if (v50)
    goto LABEL_104;
LABEL_107:
  if (v46)
    goto LABEL_142;
  WebCore::parentRelativeSelectorRecursive((unsigned int *)&v197, (_QWORD *)a2, a3);
  v53 = v197;
  if (!v197)
    goto LABEL_132;
  if (!*((_DWORD *)v197 + 1))
  {
    v197 = 0;
LABEL_130:
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v52);
    else
      *(_DWORD *)v53 -= 2;
    goto LABEL_132;
  }
  LODWORD(v54) = HIDWORD(v190);
  if (HIDWORD(v190) == (_DWORD)v190)
  {
    v125 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v189, HIDWORD(v190) + 1, (unint64_t)&v197);
    v54 = HIDWORD(v190);
    v126 = v189;
    v127 = *v125;
    *v125 = 0;
    *((_QWORD *)v126 + v54) = v127;
  }
  else
  {
    v197 = 0;
    *((_QWORD *)v189 + HIDWORD(v190)) = v53;
  }
  HIDWORD(v190) = v54 + 1;
  v53 = v197;
  v197 = 0;
  if (v53)
    goto LABEL_130;
LABEL_132:
  WebCore::siblingRelativeSelectorRecursive((uint64_t)&v197, (_QWORD *)a2, (uint64_t)a3);
  v59 = v197;
  if (!v197)
    goto LABEL_141;
  if (!*((_DWORD *)v197 + 1))
  {
    v197 = 0;
LABEL_139:
    if (*(_DWORD *)v59 == 2)
      WTF::StringImpl::destroy(v59, v58);
    else
      *(_DWORD *)v59 -= 2;
    goto LABEL_141;
  }
  LODWORD(v60) = HIDWORD(v190);
  if (HIDWORD(v190) == (_DWORD)v190)
  {
    v128 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v189, HIDWORD(v190) + 1, (unint64_t)&v197);
    v60 = HIDWORD(v190);
    v129 = v189;
    v130 = *v128;
    *v128 = 0;
    *((_QWORD *)v129 + v60) = v130;
  }
  else
  {
    v197 = 0;
    *((_QWORD *)v189 + HIDWORD(v190)) = v59;
  }
  HIDWORD(v190) = v60 + 1;
  v59 = v197;
  v197 = 0;
  if (v59)
    goto LABEL_139;
LABEL_141:
  v46 = HIDWORD(v190);
LABEL_142:
  v61 = 126 - 2 * __clz(v46);
  if (v46)
    v62 = v61;
  else
    v62 = 0;
  std::__introsort<std::_ClassicAlgPolicy,WebCore::selectorsForTarget(WebCore::Element &,WTF::HashMap<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WTF::String>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits> &)::$_0 &,WTF::String*,false>((uint64_t)v189, (WTF *)((char *)v189 + 8 * v46), v62, 1);
  if (HIDWORD(v190))
  {
    *(_DWORD *)(a2 + 24) += 2;
    v196[0] = (WTF::StringImpl *)a2;
    WTF::HashMap<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WTF::String>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::add<WTF::String&>((uint64_t)&v197, a3, (uint64_t *)v196, (_DWORD **)v189);
    if (v196[0])
    {
      if (*((_DWORD *)v196[0] + 6) == 2)
      {
        if ((*((_WORD *)v196[0] + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v196[0], v11);
      }
      else
      {
        *((_DWORD *)v196[0] + 6) -= 2;
      }
    }
  }
  v63 = (int)v192;
  v64 = HIDWORD(v192);
  if (HIDWORD(v192) == (_DWORD)v192)
  {
    v65 = WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v191, HIDWORD(v192) + 1, (unint64_t)&v189);
    v66 = (char *)v191 + 16 * HIDWORD(v192);
    *(_QWORD *)v66 = 0;
    *((_QWORD *)v66 + 1) = 0;
    v67 = *(_QWORD *)v65;
    *(_QWORD *)v65 = 0;
    *(_QWORD *)v66 = v67;
    LODWORD(v67) = *(_DWORD *)(v65 + 8);
    *(_DWORD *)(v65 + 8) = 0;
    *((_DWORD *)v66 + 2) = v67;
    LODWORD(v67) = *(_DWORD *)(v65 + 12);
    *(_DWORD *)(v65 + 12) = 0;
    *((_DWORD *)v66 + 3) = v67;
    v68 = v191;
    v63 = (int)v192;
    v64 = HIDWORD(v192);
  }
  else
  {
    v68 = v191;
    v69 = (char *)v191 + 16 * HIDWORD(v192);
    *(_QWORD *)v69 = 0;
    *((_QWORD *)v69 + 1) = 0;
    v70 = v189;
    v189 = 0;
    *(_QWORD *)v69 = v70;
    LODWORD(v70) = v190;
    LODWORD(v190) = 0;
    *((_DWORD *)v69 + 2) = (_DWORD)v70;
    LODWORD(v70) = HIDWORD(v190);
    HIDWORD(v190) = 0;
    *((_DWORD *)v69 + 3) = (_DWORD)v70;
  }
  v191 = 0;
  v192 = 0;
  *(_QWORD *)a1 = v68;
  *(_DWORD *)(a1 + 8) = v63;
  *(_DWORD *)(a1 + 12) = v64 + 1;
  if (HIDWORD(v190))
  {
    v119 = v189;
    v120 = 8 * HIDWORD(v190);
    do
    {
      v121 = *(WTF::StringImpl **)v119;
      *(_QWORD *)v119 = 0;
      if (v121)
      {
        if (*(_DWORD *)v121 == 2)
          WTF::StringImpl::destroy(v121, (WTF::StringImpl *)v11);
        else
          *(_DWORD *)v121 -= 2;
      }
      v119 = (WTF *)((char *)v119 + 8);
      v120 -= 8;
    }
    while (v120);
  }
  result = v189;
  if (v189)
  {
    v189 = 0;
    LODWORD(v190) = 0;
    result = (WTF::StringImpl *)WTF::fastFree(result, v11);
  }
  v12 = v191;
  if (HIDWORD(v192))
  {
    v71 = (WTF::StringImpl *)((char *)v191 + 16 * HIDWORD(v192));
    do
    {
      v72 = *((unsigned int *)v12 + 3);
      if ((_DWORD)v72)
      {
        v73 = *(WTF::StringImpl ***)v12;
        v74 = 8 * v72;
        do
        {
          v75 = *v73;
          *v73 = 0;
          if (v75)
          {
            if (*(_DWORD *)v75 == 2)
              WTF::StringImpl::destroy(v75, (WTF::StringImpl *)v11);
            else
              *(_DWORD *)v75 -= 2;
          }
          ++v73;
          v74 -= 8;
        }
        while (v74);
      }
      result = *(WTF::StringImpl **)v12;
      if (*(_QWORD *)v12)
      {
        *(_QWORD *)v12 = 0;
        *((_DWORD *)v12 + 2) = 0;
        result = (WTF::StringImpl *)WTF::fastFree(result, v11);
      }
      v12 = (WTF::StringImpl *)((char *)v12 + 16);
    }
    while (v12 != v71);
    v12 = v191;
  }
LABEL_169:
  if (v12)
  {
    v191 = 0;
    LODWORD(v192) = 0;
    return (WTF::StringImpl *)WTF::fastFree(v12, v11);
  }
  return result;
}

uint64_t WebCore::hasAudibleMedia(WebCore *this, const WebCore::Element *a2)
{
  void *v3;
  const WebCore::Node *v4;
  unint64_t hasAudibleMedia;
  uint64_t v6;
  WebCore *v8;
  const WebCore::Element *v9;
  WTF *v10;
  uint64_t v11;
  WebCore *v12;
  uint64_t v13;
  uint64_t v14;
  WebCore *v15;
  uint64_t v16;
  WebCore *v17;
  __int16 v18;
  BOOL v19;
  BOOL v20;
  WTF *v21;
  int v22;
  unsigned int v23;

  if ((*(unsigned int (**)(WebCore *, const WebCore::Element *))(*(_QWORD *)this + 824))(this, a2))
  {
    *((_DWORD *)this + 6) += 2;
    if (*((_BYTE *)this + 1697))
    {
      hasAudibleMedia = 1;
    }
    else
    {
      v6 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
      if (*(_BYTE *)(v6 + 467)
        || *(_BYTE *)(v6 + 468)
        || (*(double (**)(WebCore *))(*(_QWORD *)this + 1456))(this) == 0.0
        || ((*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 1472))(this) & 1) != 0)
      {
        hasAudibleMedia = 0;
      }
      else if (*((_QWORD *)this + 142) && *((int *)this + 226) >= 1)
      {
        hasAudibleMedia = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 1280))(this);
      }
      else
      {
        hasAudibleMedia = ((unint64_t)*(unsigned int *)((char *)this + 1265) >> 27) & 1;
      }
    }
    if (*((_DWORD *)this + 6) == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(this, v3);
    }
    else
    {
      *((_DWORD *)this + 6) -= 2;
    }
    return hasAudibleMedia;
  }
  v8 = (WebCore *)*((_QWORD *)this + 10);
  if (!v8)
  {
LABEL_22:
    WebCore::collectDocumentElementsFromChildFrames((WebCore *)&v21, this);
    v10 = v21;
    if (v23)
    {
      v11 = 8 * v23 - 8;
      do
      {
        v12 = *(WebCore **)v10;
        v10 = (WTF *)((char *)v10 + 8);
        hasAudibleMedia = WebCore::hasAudibleMedia(v12, v9);
        if ((hasAudibleMedia & 1) != 0)
          break;
        v13 = v11;
        v11 -= 8;
      }
      while (v13);
      v10 = v21;
      if (v23)
      {
        v14 = 8 * v23;
        do
        {
          v15 = *(WebCore **)v10;
          *(_QWORD *)v10 = 0;
          if (v15)
          {
            if (*((_DWORD *)v15 + 6) == 2)
            {
              if ((*((_WORD *)v15 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v15, v9);
            }
            else
            {
              *((_DWORD *)v15 + 6) -= 2;
            }
          }
          v10 = (WTF *)((char *)v10 + 8);
          v14 -= 8;
        }
        while (v14);
        v10 = v21;
        if (!v21)
          return hasAudibleMedia;
LABEL_37:
        v21 = 0;
        v22 = 0;
        WTF::fastFree(v10, v9);
        return hasAudibleMedia;
      }
    }
    else
    {
      hasAudibleMedia = 0;
    }
    if (!v10)
      return hasAudibleMedia;
    goto LABEL_37;
  }
  while ((*((_WORD *)v8 + 14) & 8) == 0 || !(*(unsigned int (**)(WebCore *))(*(_QWORD *)v8 + 824))(v8))
  {
    v8 = (WebCore *)WebCore::NodeTraversal::next(v8, this, v4);
    if (!v8)
      goto LABEL_22;
  }
  if (!*((_BYTE *)v8 + 1697))
  {
LABEL_40:
    v16 = *(_QWORD *)(*((_QWORD *)v8 + 5) + 8);
    if (!*(_BYTE *)(v16 + 467)
      && !*(_BYTE *)(v16 + 468)
      && (*(double (**)(WebCore *))(*(_QWORD *)v8 + 1456))(v8) != 0.0
      && ((*(uint64_t (**)(WebCore *))(*(_QWORD *)v8 + 1472))(v8) & 1) == 0)
    {
      if (*((_QWORD *)v8 + 142) && *((int *)v8 + 226) >= 1)
      {
        if (((*(uint64_t (**)(WebCore *))(*(_QWORD *)v8 + 1280))(v8) & 1) != 0)
          return 1;
      }
      else if ((*(_DWORD *)((_BYTE *)v8 + 1265) & 0x8000000) != 0)
      {
        return 1;
      }
    }
    v17 = (WebCore *)*((_QWORD *)v8 + 10);
    if (v17)
      goto LABEL_43;
    if (v8 == this)
      goto LABEL_22;
    while (1)
    {
      v17 = (WebCore *)*((_QWORD *)v8 + 7);
      if (v17)
        break;
      v8 = (WebCore *)*((_QWORD *)v8 + 4);
      if (v8)
        v20 = v8 == this;
      else
        v20 = 1;
      if (v20)
        goto LABEL_22;
    }
    while (1)
    {
LABEL_43:
      v8 = v17;
      v18 = *((_WORD *)v17 + 14);
      if ((v18 & 8) != 0)
      {
        if (((*(uint64_t (**)(WebCore *))(*(_QWORD *)v8 + 824))(v8) & 1) != 0)
        {
          hasAudibleMedia = 1;
          if (*((_BYTE *)v8 + 1697))
            return hasAudibleMedia;
          goto LABEL_40;
        }
        v18 = *((_WORD *)v8 + 14);
      }
      if ((v18 & 4) != 0)
      {
        v17 = (WebCore *)*((_QWORD *)v8 + 10);
        if (v17)
          continue;
      }
      if (v8 == this)
        goto LABEL_22;
      while (1)
      {
        v17 = (WebCore *)*((_QWORD *)v8 + 7);
        if (v17)
          break;
        v8 = (WebCore *)*((_QWORD *)v8 + 4);
        if (v8)
          v19 = v8 == this;
        else
          v19 = 1;
        if (v19)
          goto LABEL_22;
      }
    }
  }
  return 1;
}

uint64_t WebCore::computeIDSelector(uint64_t this, WebCore::TreeScopeOrderedMap **a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  WebCore::TreeScopeOrderedMap *v12;
  int v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  _BYTE *v18;
  size_t v19;
  _BYTE *v20;
  _BYTE *v21;
  unsigned __int128 v22;
  char v23;
  WTF::StringImpl *v24;
  _DWORD *v25;

  v3 = (_QWORD *)this;
  if (!a3 || !*(_QWORD *)(a3 + 24))
    goto LABEL_32;
  v4 = (*(_BYTE *)(a3 + 4) & 1) != 0 ? *(uint64_t **)(a3 + 40) : (uint64_t *)(a3 + 32);
  v5 = *v4;
  if (*v4 == WebCore::HTMLNames::idAttr)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = v4 + 2;
    do
    {
      if (*(_QWORD *)(v5 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
        && *(_QWORD *)(v5 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
      {
        break;
      }
      ++v6;
      v8 = *v7;
      v7 += 2;
      v5 = v8;
    }
    while (v8 != WebCore::HTMLNames::idAttr);
  }
  v9 = v4[2 * v6 + 1];
  if (!v9)
    goto LABEL_32;
  v10 = *(_DWORD *)v9;
  v11 = *(_DWORD *)(v9 + 4);
  *(_DWORD *)v9 += 2;
  v24 = (WTF::StringImpl *)v9;
  if (!v11)
  {
    if (v10)
      *(_DWORD *)v9 = v10;
    else
      this = WTF::StringImpl::destroy((WTF::StringImpl *)v9, (WTF::StringImpl *)a2);
    goto LABEL_32;
  }
  v12 = a2[3];
  if (!v12
    || (this = (uint64_t)WebCore::TreeScopeOrderedMap::getAllElementsById(v12, (const WTF::AtomString *)&v24, (const WebCore::TreeScope *)a2)) == 0|| *(_DWORD *)(this + 12) != 1)
  {
    v16 = 1;
    goto LABEL_26;
  }
  v13 = *(_DWORD *)(v9 + 4);
  *(_DWORD *)v9 += 2;
  if (v13 < 0)
    goto LABEL_56;
  v14 = (v13 + 1);
  if (__OFADD__(v13, 1))
    goto LABEL_56;
  if ((*(_BYTE *)(v9 + 16) & 4) != 0)
  {
    this = WTF::tryFastCompactMalloc((WTF *)(v14 + 20));
    v15 = v25;
    if (v25)
    {
      *v25 = 2;
      v15[1] = v14;
      *((_BYTE *)v15 + 20) = 35;
      *((_QWORD *)v15 + 1) = v15 + 5;
      v15[4] = 4;
      v18 = (char *)v15 + 21;
      a2 = *(WebCore::TreeScopeOrderedMap ***)(v9 + 8);
      v19 = *(unsigned int *)(v9 + 4);
      if ((*(_BYTE *)(v9 + 16) & 4) != 0)
      {
        if ((_DWORD)v19)
        {
          if ((_DWORD)v19 == 1)
            *v18 = *(_BYTE *)a2;
          else
            memcpy(v18, a2, v19);
        }
      }
      else
      {
        v20 = &v18[v19];
        if (v19 >= 0x10)
        {
          v21 = &v18[v19 & 0xFFFFFFF0];
          do
          {
            v22 = (unsigned __int128)vld2q_s8((const char *)a2);
            a2 += 4;
            *(_OWORD *)v18 = v22;
            v18 += 16;
          }
          while (v18 != v21);
          v18 = v21;
        }
        while (v18 != v20)
        {
          v23 = *(_BYTE *)a2;
          a2 = (WebCore::TreeScopeOrderedMap **)((char *)a2 + 2);
          *v18++ = v23;
        }
      }
      goto LABEL_40;
    }
LABEL_56:
    *v3 = 0;
    __break(0xC471u);
    return this;
  }
  if (v14 > 0x7FFFFFEF)
    goto LABEL_56;
  this = WTF::tryFastCompactMalloc((WTF *)(2 * v14 + 20));
  v15 = v25;
  if (!v25)
    goto LABEL_56;
  *v25 = 2;
  v15[1] = v14;
  *((_WORD *)v15 + 10) = 35;
  *((_QWORD *)v15 + 1) = v15 + 5;
  v15[4] = 0;
  v25 = (_DWORD *)v9;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v25, (char *)v15 + 22);
LABEL_40:
  *v3 = v15;
  if (*(_DWORD *)v9 == 2)
  {
    WTF::StringImpl::destroy((WTF::StringImpl *)v9, (WTF::StringImpl *)a2);
    v16 = 0;
  }
  else
  {
    v16 = 0;
    *(_DWORD *)v9 -= 2;
  }
LABEL_26:
  this = (uint64_t)v24;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      this = WTF::StringImpl::destroy(v24, (WTF::StringImpl *)a2);
      if ((v16 & 1) == 0)
        return this;
    }
    else
    {
      *(_DWORD *)v24 -= 2;
      if ((v16 & 1) == 0)
        return this;
    }
  }
  else if (!v16)
  {
    return this;
  }
LABEL_32:
  v17 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v17 += 2;
  *v3 = v17;
  return this;
}

uint64_t WebCore::querySelectorMatchesOneElement(WebCore *this, const WebCore::Element *a2, const WTF::String *a3)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  void *v9;
  int v10;
  _BOOL8 v11;
  WebCore *v13;
  WebCore::Element *v14;
  _QWORD v15[2];
  int v16;
  char v17;

  v5 = (_QWORD *)*((_QWORD *)this + 5);
  v6 = *v5;
  if (*v5)
    v7 = (*(_WORD *)(*v5 + 28) & 0x80) == 0;
  else
    v7 = 1;
  if (v7)
  {
    v6 = v5[1];
  }
  else
  {
    v8 = *(_DWORD *)(v6 + 24);
    *(_DWORD *)(v6 + 24) = v8 + 2;
    if (v8)
    {
      *(_DWORD *)(v6 + 24) = v8;
    }
    else if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
    }
  }
  *(_DWORD *)(v6 + 24) += 2;
  WebCore::ContainerNode::querySelectorAll((WebCore::ContainerNode *)v6, (const WTF::StringImpl **)a2, (uint64_t)v15);
  v10 = v16;
  if (v16)
  {
    v11 = 0;
  }
  else
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v15[0] + 16))(v15[0]) == 1)
    {
      if (v16)
      {
        v13 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
        return WebCore::computeTagAndClassSelector(v13, v14);
      }
      v11 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v15[0] + 24))(v15[0], 0) == (_QWORD)this;
    }
    else
    {
      v11 = 0;
    }
    v10 = v16;
  }
  if (v10 != -1)
    ((void (*)(char *, _QWORD *))off_1E33FE7A0[v10])(&v17, v15);
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v9);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  return v11;
}

uint64_t WebCore::computeTagAndClassSelector(uint64_t this, WebCore::Element *a2)
{
  WTF::StringImpl **v2;
  uint64_t v3;
  WebCore::Element **v5;
  unint64_t v6;
  void *v7;
  unsigned int v8;
  unint64_t v9;
  _DWORD **v10;
  WebCore::Element **v11;
  _DWORD **v12;
  void *v13;
  void *v14;
  _DWORD *v15;
  unint64_t v16;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  char v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  WTF::StringImpl *v25;
  const WTF::String *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  _DWORD *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;

  v2 = (WTF::StringImpl **)this;
  v3 = *((_QWORD *)a2 + 13);
  if (v3 && *(_QWORD *)(v3 + 16))
  {
    v5 = (WebCore::Element **)WebCore::Element::classList(a2);
    v6 = *((unsigned int *)WebCore::DOMTokenList::tokens(v5) + 3);
    if ((_DWORD)v6)
    {
      if (v6 >> 29)
      {
        __break(0xC471u);
LABEL_84:
        JUMPOUT(0x195FB9D98);
      }
      v7 = (void *)WTF::fastMalloc((WTF *)(8 * v6));
    }
    else
    {
      v7 = 0;
    }
    v8 = *((_DWORD *)WebCore::DOMTokenList::tokens(v5) + 3);
    v9 = 0;
    if (v8 >= 5)
      v8 = 5;
    if (v8)
    {
      v10 = (_DWORD **)MEMORY[0x1E0CBF2F8];
      do
      {
        v11 = WebCore::DOMTokenList::tokens(v5);
        if (v9 >= *((unsigned int *)v11 + 3))
          v12 = v10;
        else
          v12 = (_DWORD **)((char *)*v11 + 8 * v9);
        if (v9 == v6)
        {
          v13 = (void *)WTF::fastMalloc((WTF *)0x80);
          memcpy(v13, v7, 8 * v9);
          if (v7)
          {
            v6 = 16 * (v13 != v7);
            if (v13 == v7)
              v13 = 0;
            WTF::fastFree((WTF *)v7, v14);
          }
          else
          {
            v6 = 16;
          }
          v7 = v13;
        }
        v15 = *v12;
        if (*v12)
          *v15 += 2;
        *((_QWORD *)v7 + v9++) = v15;
        LODWORD(v16) = *((_DWORD *)WebCore::DOMTokenList::tokens(v5) + 3);
        if (v16 >= 5)
          v16 = 5;
        else
          v16 = v16;
      }
      while (v9 < v16);
    }
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::Element *))(*(_QWORD *)a2 + 104))(&v35, a2);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v33 = v36;
    WTF::makeStringByJoining();
    if (v35)
    {
      v17 = *((_DWORD *)v35 + 1);
      if (v34)
        goto LABEL_29;
    }
    else
    {
      v17 = 0;
      if (v34)
      {
LABEL_29:
        v18 = *((_DWORD *)v34 + 1);
        if (v18 < 0)
          goto LABEL_81;
        goto LABEL_30;
      }
    }
    v18 = 0;
LABEL_30:
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    v21 = v19;
    if ((v17 & 0x80000000) == 0 && (v21 & 1) == 0)
    {
      v22 = (v17 + v20);
      if (!__OFADD__(v17, v20))
      {
        if (v35)
        {
          v23 = *((_DWORD *)v35 + 4);
          v24 = (v23 >> 2) & 1;
          if (v34 && (v23 & 4) != 0)
            goto LABEL_39;
        }
        else
        {
          if (v34)
          {
LABEL_39:
            v24 = (*((unsigned __int8 *)v34 + 16) >> 2) & 1;
            goto LABEL_40;
          }
          v24 = 1;
        }
LABEL_40:
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v22, v24, (uint64_t)v35, 46, (uint64_t)v34, &v36);
        if (v36)
        {
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, v25);
            else
              *(_DWORD *)v34 -= 2;
          }
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, v25);
            else
              *(_DWORD *)v33 -= 2;
          }
          v27 = v35;
          v35 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v25);
            else
              *(_DWORD *)v27 -= 2;
          }
          this = WebCore::querySelectorMatchesOneElement(a2, (const WebCore::Element *)&v36, v26);
          if ((this & 1) != 0)
          {
            *v2 = v36;
            if ((_DWORD)v9)
            {
LABEL_73:
              v31 = 8 * v9;
              v32 = (uint64_t *)v7;
              do
              {
                this = *v32;
                *v32 = 0;
                if (this)
                {
                  if (*(_DWORD *)this == 2)
                    this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v28);
                  else
                    *(_DWORD *)this -= 2;
                }
                ++v32;
                v31 -= 8;
              }
              while (v31);
            }
LABEL_62:
            if (v7)
              return WTF::fastFree((WTF *)v7, v28);
            return this;
          }
          v30 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
          if (*MEMORY[0x1E0CBF738])
            *(_DWORD *)v30 += 2;
          *v2 = v30;
          this = (uint64_t)v36;
          v36 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2)
            {
              this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v28);
              if ((_DWORD)v9)
                goto LABEL_73;
              goto LABEL_62;
            }
            *(_DWORD *)this -= 2;
          }
          if ((_DWORD)v9)
            goto LABEL_73;
          goto LABEL_62;
        }
        goto LABEL_82;
      }
    }
LABEL_81:
    v36 = 0;
LABEL_82:
    __break(0xC471u);
    goto LABEL_84;
  }
  v29 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v29 += 2;
  *(_QWORD *)this = v29;
  return this;
}

WTF::StringImpl *WebCore::computeTagAndAttributeSelector(WTF::StringImpl *this, const WebCore::Element *a2, WTF::StringImpl **a3, WTF::String *a4, __n128 a5)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  WTF::String *v14;
  __n128 v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  _DWORD *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned __int8 *i;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  int8x16_t *v30;
  WTF::StringImpl *v31;
  unsigned __int8 *v32;
  WebCore::QualifiedName::QualifiedNameImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  int v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  WTF::StringImpl **v43;
  WTF::StringImpl **v44;
  uint64_t v45;
  WTF::StringImpl **v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF *v51;
  void *v52;
  uint64_t v53;
  int v54;
  int v55;
  BOOL v56;
  int v57;
  char v58;
  uint64_t v59;
  unsigned int v60;
  BOOL v61;
  WTF *v62;
  WTF *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  unsigned int v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  int v69;
  int v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  const WTF::String *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  int v87;
  char v88;
  int v89;
  int v90;
  char v91;
  uint64_t v92;
  int v93;
  unsigned int v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  _DWORD *v99;
  _DWORD *v100;
  WTF::StringImpl *v101;
  uint64_t v102;
  WTF::StringImpl **v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WebCore::QualifiedName::QualifiedNameImpl *v108;
  WebCore::QualifiedName::QualifiedNameImpl *v109;
  WebCore::QualifiedName::QualifiedNameImpl *v110;
  WebCore::QualifiedName::QualifiedNameImpl *v111;
  WebCore::QualifiedName::QualifiedNameImpl *v112;
  WebCore::QualifiedName::QualifiedNameImpl *v113;
  WebCore::QualifiedName::QualifiedNameImpl *v114;
  WTF::StringImpl **v115;
  WTF::StringImpl **v116;
  WTF::StringImpl **v117;
  WTF::StringImpl **v118;
  WTF::StringImpl **v119;
  WTF::StringImpl **v120;
  WTF::StringImpl **v121;
  WTF::StringImpl **v122;
  WTF::StringImpl **v123;
  WTF *v124;
  void *v125;
  WTF *v126;
  void *v127;
  WTF *v128;
  void *v129;
  WTF *v130;
  void *v131;
  WTF *v132;
  void *v133;
  WTF *v134;
  void *v135;
  WTF *v136;
  void *v137;
  WTF *v138;
  void *v139;
  WTF *v140;
  void *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl **v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  WTF *v147;
  uint64_t v148;
  int8x16_t *v149;
  int v150;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  WebCore::QualifiedName::QualifiedNameImpl *v153;
  WebCore::QualifiedName::QualifiedNameImpl *v154;
  WebCore::QualifiedName::QualifiedNameImpl *v155;
  WebCore::QualifiedName::QualifiedNameImpl *v156;
  WebCore::QualifiedName::QualifiedNameImpl *v157;
  WebCore::QualifiedName::QualifiedNameImpl *v158;
  WebCore::QualifiedName::QualifiedNameImpl *v159[3];

  v5 = this;
  v159[1] = *(WebCore::QualifiedName::QualifiedNameImpl **)MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)a2 + 13);
  if (v6)
  {
    if ((*(_BYTE *)(v6 + 4) & 8) != 0)
      this = WebCore::StyledElement::synchronizeStyleAttributeInternalImpl(a2, (unsigned __int8 *)a2, a5, (uint64_t)a3, a4);
    if ((*((_WORD *)a2 + 14) & 0x20) != 0)
      this = WebCore::SVGElement::synchronizeAllAttributes(a2);
    v9 = *((_QWORD *)a2 + 13);
    if (v9)
    {
      v10 = *(_DWORD *)(v9 + 4);
      if ((v10 & 1) != 0)
      {
        if (*(_DWORD *)(v9 + 52))
        {
LABEL_9:
          v143 = a3;
          if ((_MergedGlobals_210 & 1) == 0)
          {
            v106 = (WTF::StringImpl *)WebCore::HTMLNames::classAttr;
            if (WebCore::HTMLNames::classAttr)
              ++*(_DWORD *)WebCore::HTMLNames::classAttr;
            v151 = v106;
            v107 = (WTF::StringImpl *)WebCore::HTMLNames::idAttr;
            if (WebCore::HTMLNames::idAttr)
              ++*(_DWORD *)WebCore::HTMLNames::idAttr;
            v152 = v107;
            v108 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::styleAttr;
            if (WebCore::HTMLNames::styleAttr)
              ++*(_DWORD *)WebCore::HTMLNames::styleAttr;
            v153 = v108;
            v109 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::widthAttr;
            if (WebCore::HTMLNames::widthAttr)
              ++*(_DWORD *)WebCore::HTMLNames::widthAttr;
            v154 = v109;
            v110 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::heightAttr;
            if (WebCore::HTMLNames::heightAttr)
              ++*(_DWORD *)WebCore::HTMLNames::heightAttr;
            v155 = v110;
            v111 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::forAttr;
            if (WebCore::HTMLNames::forAttr)
              ++*(_DWORD *)WebCore::HTMLNames::forAttr;
            v156 = v111;
            v112 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_labeledbyAttr;
            if (WebCore::HTMLNames::aria_labeledbyAttr)
              ++*(_DWORD *)WebCore::HTMLNames::aria_labeledbyAttr;
            v157 = v112;
            v113 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_labelledbyAttr;
            if (WebCore::HTMLNames::aria_labelledbyAttr)
              ++*(_DWORD *)WebCore::HTMLNames::aria_labelledbyAttr;
            v158 = v113;
            v114 = (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::aria_describedbyAttr;
            if (WebCore::HTMLNames::aria_describedbyAttr)
              ++*(_DWORD *)WebCore::HTMLNames::aria_describedbyAttr;
            v159[0] = v114;
            qword_1ECE83868 = 0;
            *(_QWORD *)algn_1ECE83870 = 0;
            *(_QWORD *)&algn_1ECE83870[5] = 0;
            WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)&qword_1ECE83868, &v151, (uint64_t)&v149);
            WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)&qword_1ECE83868, &v152, (uint64_t)&v149);
            WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)&qword_1ECE83868, &v153, (uint64_t)&v149);
            WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)&qword_1ECE83868, &v154, (uint64_t)&v149);
            WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)&qword_1ECE83868, &v155, (uint64_t)&v149);
            WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)&qword_1ECE83868, &v156, (uint64_t)&v149);
            WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)&qword_1ECE83868, &v157, (uint64_t)&v149);
            WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)&qword_1ECE83868, &v158, (uint64_t)&v149);
            WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)&qword_1ECE83868, v159, (uint64_t)&v149);
            v115 = (WTF::StringImpl **)v159[0];
            v159[0] = 0;
            if (v115)
            {
              if (*(_DWORD *)v115 == 1)
              {
                WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v115);
                WTF::fastFree(v124, v125);
              }
              else
              {
                --*(_DWORD *)v115;
              }
            }
            v116 = (WTF::StringImpl **)v158;
            v158 = 0;
            if (v116)
            {
              if (*(_DWORD *)v116 == 1)
              {
                WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v116);
                WTF::fastFree(v126, v127);
              }
              else
              {
                --*(_DWORD *)v116;
              }
            }
            v117 = (WTF::StringImpl **)v157;
            v157 = 0;
            if (v117)
            {
              if (*(_DWORD *)v117 == 1)
              {
                WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v117);
                WTF::fastFree(v128, v129);
              }
              else
              {
                --*(_DWORD *)v117;
              }
            }
            v118 = (WTF::StringImpl **)v156;
            v156 = 0;
            if (v118)
            {
              if (*(_DWORD *)v118 == 1)
              {
                WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v118);
                WTF::fastFree(v130, v131);
              }
              else
              {
                --*(_DWORD *)v118;
              }
            }
            v119 = (WTF::StringImpl **)v155;
            v155 = 0;
            if (v119)
            {
              if (*(_DWORD *)v119 == 1)
              {
                WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v119);
                WTF::fastFree(v132, v133);
              }
              else
              {
                --*(_DWORD *)v119;
              }
            }
            v120 = (WTF::StringImpl **)v154;
            v154 = 0;
            if (v120)
            {
              if (*(_DWORD *)v120 == 1)
              {
                WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v120);
                WTF::fastFree(v134, v135);
              }
              else
              {
                --*(_DWORD *)v120;
              }
            }
            v121 = (WTF::StringImpl **)v153;
            v153 = 0;
            if (v121)
            {
              if (*(_DWORD *)v121 == 1)
              {
                WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v121);
                WTF::fastFree(v136, v137);
              }
              else
              {
                --*(_DWORD *)v121;
              }
            }
            v122 = (WTF::StringImpl **)v152;
            v152 = 0;
            if (v122)
            {
              if (*(_DWORD *)v122 == 1)
              {
                WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v122);
                WTF::fastFree(v138, v139);
              }
              else
              {
                --*(_DWORD *)v122;
              }
            }
            v123 = (WTF::StringImpl **)v151;
            v151 = 0;
            if (v123)
            {
              if (*(_DWORD *)v123 == 1)
              {
                WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v123);
                WTF::fastFree(v140, v141);
              }
              else
              {
                --*(_DWORD *)v123;
              }
            }
            _MergedGlobals_210 = 1;
          }
          v147 = 0;
          v148 = 0;
          v11 = (unsigned int *)WebCore::Element::attributes(a2);
          v16 = v11;
          v17 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8);
          v18 = *(_QWORD *)(v17 + 104);
          if (!v18)
            goto LABEL_31;
          if ((*(_BYTE *)(v18 + 4) & 8) != 0)
            WebCore::StyledElement::synchronizeStyleAttributeInternalImpl(*(WebCore::StyledElement **)(*((_QWORD *)v11 + 1) + 8), v12, v15, v13, v14);
          if ((*(_WORD *)(v17 + 28) & 0x20) != 0)
            WebCore::SVGElement::synchronizeAllAttributes((WebCore::SVGElement *)v17);
          v19 = *(_QWORD *)(v17 + 104);
          if (!v19)
            goto LABEL_31;
          v20 = *(_DWORD *)(v19 + 4);
          if ((v20 & 1) != 0)
          {
            if (!*(_DWORD *)(v19 + 52))
              goto LABEL_31;
          }
          else if (!(v20 >> 5))
          {
            goto LABEL_31;
          }
          v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v16 + 1) + 8) + 104);
          v23 = *(_DWORD *)(v22 + 4);
          if (!v22 || (v23 & 1) == 0)
          {
            v24 = v23 >> 5;
            if (!(v23 >> 5))
              goto LABEL_31;
LABEL_29:
            if (v24 >> 28)
            {
              __break(0xC471u);
              goto LABEL_363;
            }
            LODWORD(v148) = v24;
            v147 = (WTF *)WTF::fastMalloc((WTF *)(16 * v24));
            goto LABEL_31;
          }
          v24 = *(_DWORD *)(v22 + 52);
          if (v24)
            goto LABEL_29;
LABEL_31:
          for (i = 0; ; i = (unsigned __int8 *)((_DWORD)i + 1))
          {
            v26 = *(_QWORD *)(*((_QWORD *)v16 + 1) + 8);
            v27 = *(_QWORD *)(v26 + 104);
            if (v27)
            {
              if ((*(_BYTE *)(v27 + 4) & 8) != 0)
                WebCore::StyledElement::synchronizeStyleAttributeInternalImpl(*(WebCore::StyledElement **)(*((_QWORD *)v16 + 1) + 8), v12, v15, v13, v14);
              if ((*(_WORD *)(v26 + 28) & 0x20) != 0)
                WebCore::SVGElement::synchronizeAllAttributes((WebCore::SVGElement *)v26);
              v27 = *(_QWORD *)(v26 + 104);
              if (v27)
              {
                v28 = *(_DWORD *)(v27 + 4);
                if ((v28 & 1) != 0)
                {
                  LODWORD(v27) = *(_DWORD *)(v27 + 52);
                  if (!(_DWORD)v27)
                    goto LABEL_48;
                }
                else
                {
                  LODWORD(v27) = v28 >> 5;
                  if (!(v28 >> 5))
                    goto LABEL_48;
                }
                v27 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v16 + 1) + 8) + 104);
                if (v27)
                  v29 = (*(_DWORD *)(v27 + 4) & 1) == 0;
                else
                  v29 = 1;
                if (v29)
                  LODWORD(v27) = *(_DWORD *)(v27 + 4) >> 5;
                else
                  LODWORD(v27) = *(_DWORD *)(v27 + 52);
              }
            }
LABEL_48:
            if (i >= v27)
            {
              if (!HIDWORD(v148))
              {
                v100 = (_DWORD *)*MEMORY[0x1E0CBF738];
                if (*MEMORY[0x1E0CBF738])
                  *v100 += 2;
                *(_QWORD *)v5 = v100;
                goto LABEL_272;
              }
              (*(void (**)(WTF::StringImpl **__return_ptr, const WebCore::Element *))(*(_QWORD *)a2 + 104))(&v146, a2);
              if (!HIDWORD(v148))
              {
LABEL_266:
                v99 = (_DWORD *)*MEMORY[0x1E0CBF738];
                if (*MEMORY[0x1E0CBF738])
                  *v99 += 2;
                *(_QWORD *)v5 = v99;
                goto LABEL_279;
              }
              v62 = v147;
              v63 = (WTF *)((char *)v147 + 16 * HIDWORD(v148));
              while (2)
              {
                v64 = *(WTF::StringImpl **)v62;
                if (*(_QWORD *)v62)
                  *(_DWORD *)v64 += 2;
                v65 = (WTF::StringImpl *)*((_QWORD *)v62 + 1);
                if (v65)
                {
                  *(_DWORD *)v65 += 2;
                  *(_QWORD *)v5 = 0;
                  v66 = *((_DWORD *)v65 + 1);
                  if (v66 >= 0x3D)
                  {
                    WTF::StringImpl::substring(v65);
                    v68 = v151;
                    v69 = *(_DWORD *)v65;
                    v151 = 0;
                    v70 = v69 - 2;
                    if (v70)
                    {
                      *(_DWORD *)v65 = v70;
                    }
                    else
                    {
                      WTF::StringImpl::destroy(v65, v67);
                      v81 = v151;
                      v151 = 0;
                      if (v81)
                      {
                        if (*(_DWORD *)v81 == 2)
                          WTF::StringImpl::destroy(v81, v80);
                        else
                          *(_DWORD *)v81 -= 2;
                      }
                    }
                    v71 = v146;
                    if (v146)
                      *(_DWORD *)v146 += 2;
                    if (v64)
                      *(_DWORD *)v64 += 2;
                    if (v68)
                      *(_DWORD *)v68 += 2;
                    v72 = *v143;
                    if (*v143)
                      *(_DWORD *)v72 += 2;
                    v151 = (WTF::StringImpl *)"^='";
                    LODWORD(v152) = 3;
                    v149 = (int8x16_t *)"']";
                    v150 = 2;
                    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((char *)&v145, (uint64_t)v71, 91, (uint64_t)v64, (int8x16_t **)&v151, (uint64_t)v68, &v149, (uint64_t)v72);
                    if (!v145)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195FBAD58);
                    }
                    v75 = *(WTF::StringImpl **)v5;
                    *(_QWORD *)v5 = v145;
                    if (v75)
                    {
                      if (*(_DWORD *)v75 == 2)
                        WTF::StringImpl::destroy(v75, v73);
                      else
                        *(_DWORD *)v75 -= 2;
                      v145 = 0;
                    }
                    if (v72)
                    {
                      if (*(_DWORD *)v72 != 2)
                      {
                        *(_DWORD *)v72 -= 2;
                        goto LABEL_151;
                      }
                      WTF::StringImpl::destroy(v72, v73);
                      if (!v68)
                      {
LABEL_154:
                        if (!v64)
                          goto LABEL_157;
                        if (*(_DWORD *)v64 == 2)
                        {
                          WTF::StringImpl::destroy(v64, v73);
                          if (v71)
                            goto LABEL_158;
                        }
                        else
                        {
                          *(_DWORD *)v64 -= 2;
LABEL_157:
                          if (v71)
                          {
LABEL_158:
                            if (*(_DWORD *)v71 == 2)
                              WTF::StringImpl::destroy(v71, v73);
                            else
                              *(_DWORD *)v71 -= 2;
                          }
                        }
LABEL_236:
                        if ((WebCore::querySelectorMatchesOneElement(a2, v5, v74) & 1) != 0)
                        {
                          if (!v68)
                            goto LABEL_276;
                          if (*(_DWORD *)v68 == 2)
                          {
                            WTF::StringImpl::destroy(v68, (WTF::StringImpl *)v12);
                            if (v64)
                              goto LABEL_277;
                          }
                          else
                          {
                            *(_DWORD *)v68 -= 2;
LABEL_276:
                            if (v64)
                            {
LABEL_277:
                              if (*(_DWORD *)v64 == 2)
                                WTF::StringImpl::destroy(v64, (WTF::StringImpl *)v12);
                              else
                                *(_DWORD *)v64 -= 2;
                            }
                          }
LABEL_279:
                          v101 = v146;
                          v146 = 0;
                          if (v101)
                          {
                            if (*(_DWORD *)v101 == 2)
                              WTF::StringImpl::destroy(v101, (WTF::StringImpl *)v12);
                            else
                              *(_DWORD *)v101 -= 2;
                          }
                          this = v147;
                          if (!HIDWORD(v148))
                          {
LABEL_283:
                            if (this)
                            {
                              v147 = 0;
                              LODWORD(v148) = 0;
                              return (WTF::StringImpl *)WTF::fastFree(this, v12);
                            }
                            return this;
                          }
                          v102 = 16 * HIDWORD(v148);
                          v103 = (WTF::StringImpl **)((char *)v147 + 8);
                          do
                          {
                            v104 = *v103;
                            *v103 = 0;
                            if (v104)
                            {
                              if (*(_DWORD *)v104 == 2)
                                WTF::StringImpl::destroy(v104, (WTF::StringImpl *)v12);
                              else
                                *(_DWORD *)v104 -= 2;
                            }
                            v105 = *(v103 - 1);
                            *(v103 - 1) = 0;
                            if (v105)
                            {
                              if (*(_DWORD *)v105 == 2)
                                WTF::StringImpl::destroy(v105, (WTF::StringImpl *)v12);
                              else
                                *(_DWORD *)v105 -= 2;
                            }
                            v103 += 2;
                            v102 -= 16;
                          }
                          while (v102);
LABEL_272:
                          this = v147;
                          goto LABEL_283;
                        }
                        v97 = *(WTF::StringImpl **)v5;
                        *(_QWORD *)v5 = 0;
                        if (v97)
                        {
                          if (*(_DWORD *)v97 != 2)
                          {
                            *(_DWORD *)v97 -= 2;
                            goto LABEL_240;
                          }
                          WTF::StringImpl::destroy(v97, (WTF::StringImpl *)v12);
                          if (!v68)
                          {
LABEL_243:
                            if (v64)
                            {
                              if (*(_DWORD *)v64 == 2)
                                WTF::StringImpl::destroy(v64, (WTF::StringImpl *)v12);
                              else
                                *(_DWORD *)v64 -= 2;
                            }
                            v62 = (WTF *)((char *)v62 + 16);
                            if (v62 == v63)
                              goto LABEL_266;
                            continue;
                          }
                        }
                        else
                        {
LABEL_240:
                          if (!v68)
                            goto LABEL_243;
                        }
                        if (*(_DWORD *)v68 == 2)
                          WTF::StringImpl::destroy(v68, (WTF::StringImpl *)v12);
                        else
                          *(_DWORD *)v68 -= 2;
                        goto LABEL_243;
                      }
                    }
                    else
                    {
LABEL_151:
                      if (!v68)
                        goto LABEL_154;
                    }
                    if (*(_DWORD *)v68 == 2)
                      WTF::StringImpl::destroy(v68, v73);
                    else
                      *(_DWORD *)v68 -= 2;
                    goto LABEL_154;
                  }
                  if (v66)
                  {
                    v76 = v146;
                    if (v146)
                      *(_DWORD *)v146 += 2;
                    if (v64)
                      *(_DWORD *)v64 += 2;
                    *(_DWORD *)v65 += 2;
                    v77 = *v143;
                    if (*v143)
                      *(_DWORD *)v77 += 2;
                    v151 = (WTF::StringImpl *)"='";
                    LODWORD(v152) = 2;
                    v149 = (int8x16_t *)"']";
                    v150 = 2;
                    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((char *)&v145, (uint64_t)v76, 91, (uint64_t)v64, (int8x16_t **)&v151, (uint64_t)v65, &v149, (uint64_t)v77);
                    if (!v145)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195FBAD6CLL);
                    }
                    v79 = *(WTF::StringImpl **)v5;
                    *(_QWORD *)v5 = v145;
                    if (v79)
                    {
                      if (*(_DWORD *)v79 == 2)
                        WTF::StringImpl::destroy(v79, v78);
                      else
                        *(_DWORD *)v79 -= 2;
                      v145 = 0;
                    }
                    if (v77)
                    {
                      if (*(_DWORD *)v77 == 2)
                        WTF::StringImpl::destroy(v77, v78);
                      else
                        *(_DWORD *)v77 -= 2;
                    }
                    if (*(_DWORD *)v65 != 2)
                    {
                      *(_DWORD *)v65 -= 2;
                      if (!v64)
                        goto LABEL_232;
                      goto LABEL_230;
                    }
                    v82 = v65;
LABEL_258:
                    WTF::StringImpl::destroy(v82, v78);
                    if (!v64)
                      goto LABEL_232;
                    goto LABEL_230;
                  }
                }
                else
                {
                  *(_QWORD *)v5 = 0;
                }
                break;
              }
              v76 = v146;
              if (v146)
                *(_DWORD *)v146 += 2;
              if (v64)
                *(_DWORD *)v64 += 2;
              v83 = (uint64_t)*v143;
              if (*v143)
                *(_DWORD *)v83 += 2;
              if (v76)
              {
                v84 = *((_DWORD *)v76 + 1);
                if (v64)
                  goto LABEL_201;
LABEL_261:
                v85 = 0;
                if (!v83)
                  goto LABEL_262;
LABEL_202:
                v86 = *(_DWORD *)(v83 + 4);
                if (v86 < 0)
                  goto LABEL_356;
              }
              else
              {
                v84 = 0;
                if (!v64)
                  goto LABEL_261;
LABEL_201:
                v85 = *((_DWORD *)v64 + 1);
                if (v83)
                  goto LABEL_202;
LABEL_262:
                v86 = 0;
              }
              v56 = __OFADD__(v86, 1);
              v87 = v86 + 1;
              v88 = v56;
              if (v85 < 0
                || (v88 & 1) != 0
                || (v56 = __OFADD__(v85, v87), v89 = v85 + v87, v56)
                || ((v56 = __OFADD__(v89, 1), v90 = v89 + 1, !v56) ? (v91 = 0) : (v91 = 1),
                    v84 < 0 || (v91 & 1) != 0 || (v92 = (v84 + v90), __OFADD__(v84, v90))))
              {
LABEL_356:
                v151 = 0;
LABEL_357:
                __break(0xC471u);
LABEL_363:
                JUMPOUT(0x195FBAD50);
              }
              if (v76 && (*((_BYTE *)v76 + 16) & 4) == 0)
              {
                v93 = 0;
                goto LABEL_222;
              }
              if (v64)
              {
                v94 = *((_DWORD *)v64 + 4);
                v93 = (v94 >> 2) & 1;
                if (v83 && (v94 & 4) != 0)
LABEL_221:
                  v93 = (*(unsigned __int8 *)(v83 + 16) >> 2) & 1;
              }
              else
              {
                if (v83)
                  goto LABEL_221;
                v93 = 1;
              }
LABEL_222:
              WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v92, v93, (uint64_t)v76, 91, (uint64_t)v64, 93, v83, &v151);
              v95 = v151;
              if (!v151)
                goto LABEL_357;
              v151 = 0;
              v96 = *(WTF::StringImpl **)v5;
              *(_QWORD *)v5 = v95;
              if (v96)
              {
                if (*(_DWORD *)v96 == 2)
                {
                  WTF::StringImpl::destroy(v96, v78);
                  v98 = v151;
                  v151 = 0;
                  if (v98)
                  {
                    if (*(_DWORD *)v98 == 2)
                      WTF::StringImpl::destroy(v98, v78);
                    else
                      *(_DWORD *)v98 -= 2;
                  }
                }
                else
                {
                  *(_DWORD *)v96 -= 2;
                  v151 = 0;
                }
              }
              if (v83)
              {
                if (*(_DWORD *)v83 == 2)
                {
                  v82 = (WTF::StringImpl *)v83;
                  goto LABEL_258;
                }
                *(_DWORD *)v83 -= 2;
              }
              if (!v64)
              {
LABEL_232:
                if (v76)
                {
                  if (*(_DWORD *)v76 == 2)
                    WTF::StringImpl::destroy(v76, v78);
                  else
                    *(_DWORD *)v76 -= 2;
                }
                v68 = v65;
                goto LABEL_236;
              }
LABEL_230:
              if (*(_DWORD *)v64 == 2)
                WTF::StringImpl::destroy(v64, v78);
              else
                *(_DWORD *)v64 -= 2;
              goto LABEL_232;
            }
            WebCore::NamedNodeMap::item(v16, i, v13, v14, (uint64_t *)&v149, v15);
            v30 = v149;
            v32 = &v149[5].u8[8];
            v31 = (WTF::StringImpl *)v149[5].i64[1];
            if (v31)
              ++*(_DWORD *)v31;
            v146 = v31;
            if (!qword_1ECE83868
              || (v33 = WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::QualifiedName>,WTF::DefaultHash<WebCore::QualifiedName>>,WebCore::QualifiedName>(&qword_1ECE83868, &v146), v31 = v146, !v33))
            {
              v34 = (WTF::StringImpl *)*((_QWORD *)v31 + 2);
              if (v34)
              {
                *(_DWORD *)v34 += 2;
                v53 = *((_QWORD *)v31 + 3);
                if (v53)
                {
                  v54 = *(_DWORD *)(v53 + 4);
                  *(_DWORD *)v53 += 2;
                  if (v54 < 0)
                    goto LABEL_359;
                }
                else
                {
                  v54 = 0;
                }
                v55 = *((_DWORD *)v34 + 1);
                v56 = __OFADD__(v54, 1);
                v57 = v54 + 1;
                v58 = v56;
                if (v55 < 0 || (v58 & 1) != 0 || (v59 = (v55 + v57), __OFADD__(v55, v57)))
                {
LABEL_359:
                  v145 = 0;
LABEL_360:
                  __break(0xC471u);
                  JUMPOUT(0x195FBAD64);
                }
                v60 = *((_DWORD *)v34 + 4);
                if (v53)
                  v61 = (*((_DWORD *)v34 + 4) & 4) == 0;
                else
                  v61 = 1;
                if (!v61)
                  v60 = *(unsigned __int8 *)(v53 + 16);
                v142 = (WTF::StringImpl *)v53;
                WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v59, (v60 >> 2) & 1, (uint64_t)v34, 58, v53, &v145);
                if (!v145)
                  goto LABEL_360;
                if (v142)
                {
                  if (*(_DWORD *)v142 == 2)
                    WTF::StringImpl::destroy(v142, (WTF::StringImpl *)v12);
                  else
                    *(_DWORD *)v142 -= 2;
                }
                if (*(_DWORD *)v34 == 2)
                  WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v12);
                else
                  *(_DWORD *)v34 -= 2;
                v35 = v145;
                if (!v145)
                  goto LABEL_59;
LABEL_57:
                if (*((_DWORD *)v35 + 1) <= 0x10u && (WTF::StringImpl::startsWith() & 1) == 0)
                  goto LABEL_59;
              }
              else
              {
                v35 = (WTF::StringImpl *)*((_QWORD *)v31 + 3);
                if (v35)
                  *(_DWORD *)v35 += 2;
                v145 = v35;
                if (v35)
                  goto LABEL_57;
LABEL_59:
                v36 = v30[5].i64[0];
                if (v36 && (v45 = *(_QWORD *)(v36 + 8)) != 0)
                {
                  *(_DWORD *)(v45 + 24) += 2;
                  WebCore::Element::getAttributeForBindings(v45, v32, 1, v14, &v144, v15);
                  if (*(_DWORD *)(v45 + 24) == 2)
                  {
                    if ((*(_WORD *)(v45 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v45, v12);
                  }
                  else
                  {
                    *(_DWORD *)(v45 + 24) -= 2;
                  }
                  v37 = v144;
                  if (!v144)
                    goto LABEL_72;
LABEL_63:
                  if (*((_DWORD *)v37 + 1) >= 0x97u)
                  {
                    v144 = 0;
                    goto LABEL_81;
                  }
                  v38 = v145;
                  v145 = 0;
                  v151 = v38;
                  *(_DWORD *)v37 += 2;
                }
                else
                {
                  v37 = (WTF::StringImpl *)v30[6].i64[0];
                  if (v37)
                    *(_DWORD *)v37 += 2;
                  v144 = v37;
                  if (v37)
                    goto LABEL_63;
LABEL_72:
                  v38 = v145;
                  v145 = 0;
                  v151 = v38;
                }
                v152 = v37;
                v39 = HIDWORD(v148);
                if (HIDWORD(v148) == (_DWORD)v148)
                {
                  v40 = (_QWORD *)WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v147, HIDWORD(v148) + 1, (unint64_t)&v151);
                  v39 = HIDWORD(v148);
                  v41 = (_QWORD *)((char *)v147 + 16 * HIDWORD(v148));
                  v42 = *v40;
                  *v40 = 0;
                  v43 = (WTF::StringImpl **)(v40 + 1);
                  *v41 = v42;
                  v44 = (WTF::StringImpl **)(v41 + 1);
                }
                else
                {
                  v46 = (WTF::StringImpl **)((char *)v147 + 16 * HIDWORD(v148));
                  v151 = 0;
                  *v46 = v38;
                  v44 = v46 + 1;
                  v43 = &v152;
                }
                v47 = *v43;
                *v43 = 0;
                *v44 = v47;
                HIDWORD(v148) = v39 + 1;
                v48 = v152;
                v152 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                    WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v12);
                  else
                    *(_DWORD *)v48 -= 2;
                }
                v49 = v151;
                v151 = 0;
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                    WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v12);
                  else
                    *(_DWORD *)v49 -= 2;
                }
                v37 = v144;
                v144 = 0;
                if (v37)
                {
LABEL_81:
                  if (*(_DWORD *)v37 == 2)
                    WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v12);
                  else
                    *(_DWORD *)v37 -= 2;
                }
              }
              v50 = v145;
              v145 = 0;
              if (v50)
              {
                if (*(_DWORD *)v50 == 2)
                  WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v12);
                else
                  *(_DWORD *)v50 -= 2;
              }
              v31 = v146;
            }
            v146 = 0;
            if (v31)
            {
              if (*(_DWORD *)v31 == 1)
              {
                WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v31);
                WTF::fastFree(v51, v52);
              }
              else
              {
                --*(_DWORD *)v31;
              }
            }
            if (v30[1].i32[2] == 2)
            {
              if ((v30[1].i16[7] & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v30, v12);
            }
            else
            {
              v30[1].i32[2] -= 2;
            }
          }
        }
      }
      else if (v10 >> 5)
      {
        goto LABEL_9;
      }
    }
  }
  v21 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v21 += 2;
  *(_QWORD *)v5 = v21;
  return this;
}

unsigned int *WebCore::parentRelativeSelectorRecursive(unsigned int *result, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v3;
  uint64_t v4;
  _DWORD *v5;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  char v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const WTF::StringImpl *v25;
  int v26;
  WTF::StringImpl *v27;
  int v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  BOOL v36;
  int v37;
  int v38;
  BOOL v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  _BYTE *v44;
  size_t v45;
  int v46;
  uint64_t v47;
  _BYTE *v48;
  size_t v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  unint64_t v53;
  unsigned int v54;
  unsigned __int128 *v55;
  unsigned __int128 *v56;
  unsigned __int128 v57;
  unsigned __int128 *v58;
  unsigned __int128 *v59;
  unsigned __int128 v60;
  char v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71[5];

  v3 = result;
  v71[4] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v4 = a2[4];
  if (!v4 || (*(_WORD *)(v4 + 28) & 8) == 0)
  {
    v5 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v5 += 2;
    *(_QWORD *)result = v5;
    return result;
  }
  *(_DWORD *)(v4 + 24) += 2;
  result = (unsigned int *)WebCore::selectorForElementRecursive(&v69, v4, a3);
  v8 = v69;
  if (!v69)
    goto LABEL_7;
  if (*((_DWORD *)v69 + 1))
  {
    v69 = 0;
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD *))(*a2 + 104))(&v67, a2);
    v10 = *((_DWORD *)v8 + 1);
    if (v67)
    {
      v11 = *((_DWORD *)v67 + 1);
      if (v11 < 0)
        goto LABEL_166;
    }
    else
    {
      v11 = 0;
    }
    v12 = __OFADD__(v11, 3);
    v13 = v11 + 3;
    v14 = v12;
    if ((v10 & 0x80000000) == 0 && (v14 & 1) == 0)
    {
      v15 = (v10 + v13);
      if (!__OFADD__(v10, v13))
      {
        v16 = *((_DWORD *)v8 + 4);
        v17 = (v16 >> 2) & 1;
        if (v67 && (v16 & 4) != 0)
          v17 = (*((unsigned __int8 *)v67 + 16) >> 2) & 1;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v15, v17, (uint64_t)v8, (int8x16_t *)" > ", 3u, (uint64_t)v67, &v68);
        if (v68)
        {
          v19 = v67;
          v67 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, v18);
            else
              *(_DWORD *)v19 -= 2;
          }
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v18);
          else
            *(_DWORD *)v8 -= 2;
          (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD *))(*a2 + 104))(v71, a2);
          v20 = *(_QWORD *)(v4 + 80);
          if (!v20)
          {
LABEL_34:
            v21 = 0;
            v22 = 0;
            v23 = -1;
            goto LABEL_64;
          }
          while ((*(_WORD *)(v20 + 28) & 8) == 0)
          {
            v20 = *(_QWORD *)(v20 + 56);
            if (!v20)
              goto LABEL_34;
          }
          v24 = 0;
          v22 = 0;
          v21 = 0;
          v23 = -1;
LABEL_38:
          if ((_QWORD *)v20 == a2)
            v23 = v24;
          (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)v20 + 104))(&v70, v20);
          v26 = WTF::equal(v70, v71[0], v25);
          v27 = v70;
          v70 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
            {
              WTF::StringImpl::destroy(v27, v7);
              if (!v26)
                goto LABEL_50;
              goto LABEL_44;
            }
            *(_DWORD *)v27 -= 2;
          }
          if (!v26)
            goto LABEL_50;
LABEL_44:
          v28 = *(_DWORD *)(v20 + 24);
          if (!v22)
          {
            v28 += 2;
            v22 = v20;
          }
          *(_DWORD *)(v20 + 24) = v28 + 2;
          if (v21)
          {
            if (*(_DWORD *)(v21 + 24) == 2)
            {
              if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v21, v7);
            }
            else
            {
              *(_DWORD *)(v21 + 24) -= 2;
            }
          }
          v21 = v20;
LABEL_50:
          ++v24;
          while (1)
          {
            v20 = *(_QWORD *)(v20 + 56);
            if (!v20)
              break;
            if ((*(_WORD *)(v20 + 28) & 8) != 0)
              goto LABEL_38;
          }
          if (v21)
          {
            if (*(_DWORD *)(v21 + 24) == 2)
            {
              if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v21, v7);
            }
            else
            {
              *(_DWORD *)(v21 + 24) -= 2;
            }
          }
          if (v22)
          {
            if (*(_DWORD *)(v22 + 24) == 2)
            {
              if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v22, v7);
            }
            else
            {
              *(_DWORD *)(v22 + 24) -= 2;
            }
          }
LABEL_64:
          v29 = v71[0];
          v71[0] = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, v7);
            else
              *(_DWORD *)v29 -= 2;
          }
          if (v23 == -1)
          {
            v31 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
            if (*MEMORY[0x1E0CBF738])
              *(_DWORD *)v31 += 2;
            goto LABEL_73;
          }
          v30 = v68;
          if ((_QWORD *)v21 == a2 && (_QWORD *)v22 == a2)
          {
            *v3 = v68;
LABEL_122:
            result = (unsigned int *)v69;
            if (v69)
            {
              if (*(_DWORD *)v69 == 2)
                result = (unsigned int *)WTF::StringImpl::destroy(v69, v7);
              else
                *(_DWORD *)v69 -= 2;
            }
            goto LABEL_10;
          }
          v68 = 0;
          if ((_QWORD *)v22 != a2)
          {
            if ((_QWORD *)v21 != a2)
            {
              v32 = v23 + 1;
              if (v30)
                v33 = *((_DWORD *)v30 + 1);
              else
                v33 = 0;
              v34 = 0;
              v35 = v23 + 1;
              do
              {
                ++v34;
                v36 = v35 > 9;
                v35 /= 0xAuLL;
              }
              while (v36);
              if ((v34 & 0x80000000) == 0)
              {
                v12 = __OFADD__(v34, 1);
                v37 = v34 + 1;
                if (!v12)
                {
                  v12 = __OFADD__(v37, 11);
                  v38 = v37 + 11;
                  v39 = v12;
                  if ((v33 & 0x80000000) == 0 && !v39)
                  {
                    v40 = (v33 + v38);
                    if (!__OFADD__(v33, v38))
                    {
                      if (v30)
                      {
                        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)v3, v40, (*((_BYTE *)v30 + 16) & 4) != 0, (uint64_t)v30, v23 + 1);
                        if (*v3)
                        {
LABEL_117:
                          if (*(_DWORD *)v30 == 2)
                            WTF::StringImpl::destroy(v30, v7);
                          else
                            *(_DWORD *)v30 -= 2;
LABEL_119:
                          v50 = v68;
                          v68 = 0;
                          if (v50)
                          {
                            if (*(_DWORD *)v50 == 2)
                              WTF::StringImpl::destroy(v50, v7);
                            else
                              *(_DWORD *)v50 -= 2;
                          }
                          goto LABEL_122;
                        }
LABEL_169:
                        __break(0xC471u);
                        JUMPOUT(0x195FBB5A0);
                      }
                      if ((v40 & 0x80000000) == 0)
                      {
                        WTF::tryFastCompactMalloc((WTF *)(v40 + 20));
                        v51 = v71[0];
                        if (v71[0])
                        {
                          v52 = 0;
                          *(_DWORD *)v71[0] = 2;
                          *((_DWORD *)v51 + 1) = v40;
                          *(_QWORD *)((char *)v51 + 20) = *(_QWORD *)":nth-child(";
                          *((_QWORD *)v51 + 1) = (char *)v51 + 20;
                          *((_DWORD *)v51 + 4) = 4;
                          *(_DWORD *)((char *)v51 + 27) = 677669993;
                          v53 = v23 + 1;
                          do
                          {
                            *((_BYTE *)&v71[3] + v52--) = (v53 % 0xA) | 0x30;
                            v36 = v53 > 9;
                            v53 /= 0xAuLL;
                          }
                          while (v36);
                          if (v52 + 26 <= 25)
                            memcpy((char *)v51 + 31, (char *)&v71[3] + v52 + 1, -v52);
                          v54 = 0;
                          do
                          {
                            ++v54;
                            v36 = v32 > 9;
                            v32 /= 0xAuLL;
                          }
                          while (v36);
                          *((_BYTE *)v51 + v54 + 31) = 41;
                          *v3 = v51;
                          goto LABEL_119;
                        }
                      }
                    }
                  }
                }
              }
              *v3 = 0;
              goto LABEL_169;
            }
            if (v30)
            {
              v46 = *((_DWORD *)v30 + 1);
              if ((v46 & 0x80000000) == 0)
              {
                v47 = (v46 + 13);
                if (!__OFADD__(v46, 13))
                {
                  if ((*((_BYTE *)v30 + 16) & 4) != 0)
                  {
                    WTF::tryFastCompactMalloc((WTF *)(v47 + 20));
                    v43 = v71[0];
                    if (v71[0])
                    {
                      v48 = (char *)v71[0] + 20;
                      *(_DWORD *)v71[0] = 2;
                      *((_DWORD *)v43 + 1) = v47;
                      *((_QWORD *)v43 + 1) = (char *)v43 + 20;
                      *((_DWORD *)v43 + 4) = 4;
                      v7 = (WTF::StringImpl *)*((_QWORD *)v30 + 1);
                      v49 = *((unsigned int *)v30 + 1);
                      if ((*((_BYTE *)v30 + 16) & 4) != 0)
                      {
                        if ((_DWORD)v49)
                        {
                          if ((_DWORD)v49 == 1)
                            *v48 = *(_BYTE *)v7;
                          else
                            memcpy((char *)v43 + 20, v7, v49);
                        }
                      }
                      else
                      {
                        if (v49 < 0x10)
                        {
                          v58 = (unsigned __int128 *)((char *)v43 + 20);
                        }
                        else
                        {
                          v58 = (unsigned __int128 *)&v48[v49 & 0xFFFFFFF0];
                          v59 = (unsigned __int128 *)((char *)v43 + 20);
                          do
                          {
                            v60 = (unsigned __int128)vld2q_s8((const char *)v7);
                            v7 = (WTF::StringImpl *)((char *)v7 + 32);
                            *v59++ = v60;
                          }
                          while (v59 != v58);
                        }
                        while (v58 != (unsigned __int128 *)&v48[v49])
                        {
                          v62 = *(_BYTE *)v7;
                          v7 = (WTF::StringImpl *)((char *)v7 + 2);
                          *(_BYTE *)v58 = v62;
                          v58 = (unsigned __int128 *)((char *)v58 + 1);
                        }
                      }
                      qmemcpy(&v48[*((unsigned int *)v30 + 1)], ":last-of-type", 13);
LABEL_112:
                      *v3 = v43;
                      goto LABEL_117;
                    }
                  }
                  else if (v47 <= 0x7FFFFFEF)
                  {
                    WTF::tryFastCompactMalloc((WTF *)(2 * (v46 + 13) + 20));
                    v43 = v71[0];
                    if (v71[0])
                    {
                      *(_DWORD *)v71[0] = 2;
                      *((_DWORD *)v43 + 1) = v47;
                      *((_QWORD *)v43 + 1) = (char *)v43 + 20;
                      *((_DWORD *)v43 + 4) = 0;
                      v71[0] = v30;
                      WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)v71, (char *)v43 + 20);
                      v65 = (unint64_t)v71[0];
                      if (v71[0])
                        v65 = *((unsigned int *)v71[0] + 1);
                      v66 = (uint64_t)v43 + 2 * v65 + 20;
                      *(_OWORD *)v66 = xmmword_1969F56C0;
                      *(_QWORD *)(v66 + 16) = 0x7000790074002DLL;
                      *(_WORD *)(v66 + 24) = 101;
                      goto LABEL_112;
                    }
                  }
                }
              }
              goto LABEL_181;
            }
            WTF::tryFastCompactMalloc((WTF *)0x21);
            v31 = v71[0];
            if (!v71[0])
            {
LABEL_181:
              *v3 = 0;
              __break(0xC471u);
LABEL_182:
              JUMPOUT(0x195FBB594);
            }
            *(_QWORD *)v71[0] = 0xD00000002;
            qmemcpy((char *)v31 + 20, ":last-of-type", 13);
            *((_QWORD *)v31 + 1) = (char *)v31 + 20;
            *((_DWORD *)v31 + 4) = 4;
LABEL_73:
            *v3 = v31;
            goto LABEL_119;
          }
          if (v30)
          {
            v41 = *((_DWORD *)v30 + 1);
            if ((v41 & 0x80000000) == 0)
            {
              v42 = (v41 + 14);
              if (!__OFADD__(v41, 14))
              {
                if ((*((_BYTE *)v30 + 16) & 4) != 0)
                {
                  WTF::tryFastCompactMalloc((WTF *)(v42 + 20));
                  v43 = v71[0];
                  if (v71[0])
                  {
                    v44 = (char *)v71[0] + 20;
                    *(_DWORD *)v71[0] = 2;
                    *((_DWORD *)v43 + 1) = v42;
                    *((_QWORD *)v43 + 1) = (char *)v43 + 20;
                    *((_DWORD *)v43 + 4) = 4;
                    v7 = (WTF::StringImpl *)*((_QWORD *)v30 + 1);
                    v45 = *((unsigned int *)v30 + 1);
                    if ((*((_BYTE *)v30 + 16) & 4) != 0)
                    {
                      if ((_DWORD)v45)
                      {
                        if ((_DWORD)v45 == 1)
                          *v44 = *(_BYTE *)v7;
                        else
                          memcpy((char *)v43 + 20, v7, v45);
                      }
                    }
                    else
                    {
                      if (v45 < 0x10)
                      {
                        v55 = (unsigned __int128 *)((char *)v43 + 20);
                      }
                      else
                      {
                        v55 = (unsigned __int128 *)&v44[v45 & 0xFFFFFFF0];
                        v56 = (unsigned __int128 *)((char *)v43 + 20);
                        do
                        {
                          v57 = (unsigned __int128)vld2q_s8((const char *)v7);
                          v7 = (WTF::StringImpl *)((char *)v7 + 32);
                          *v56++ = v57;
                        }
                        while (v56 != v55);
                      }
                      while (v55 != (unsigned __int128 *)&v44[v45])
                      {
                        v61 = *(_BYTE *)v7;
                        v7 = (WTF::StringImpl *)((char *)v7 + 2);
                        *(_BYTE *)v55 = v61;
                        v55 = (unsigned __int128 *)((char *)v55 + 1);
                      }
                    }
                    qmemcpy(&v44[*((unsigned int *)v30 + 1)], ":first-of-type", 14);
                    goto LABEL_112;
                  }
                }
                else if (v42 <= 0x7FFFFFEF)
                {
                  WTF::tryFastCompactMalloc((WTF *)(2 * (v41 + 14) + 20));
                  v43 = v71[0];
                  if (v71[0])
                  {
                    *(_DWORD *)v71[0] = 2;
                    *((_DWORD *)v43 + 1) = v42;
                    *((_QWORD *)v43 + 1) = (char *)v43 + 20;
                    *((_DWORD *)v43 + 4) = 0;
                    v71[0] = v30;
                    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)v71, (char *)v43 + 20);
                    v63 = (unint64_t)v71[0];
                    if (v71[0])
                      v63 = *((unsigned int *)v71[0] + 1);
                    v64 = (uint64_t)v43 + 2 * v63 + 20;
                    *(_OWORD *)v64 = xmmword_1969F56B0;
                    *(_QWORD *)(v64 + 16) = 0x790074002D0066;
                    *(_DWORD *)(v64 + 24) = 6619248;
                    goto LABEL_112;
                  }
                }
              }
            }
          }
          else
          {
            WTF::tryFastCompactMalloc((WTF *)0x22);
            v31 = v71[0];
            if (v71[0])
            {
              *(_QWORD *)v71[0] = 0xE00000002;
              qmemcpy((char *)v31 + 20, ":first-of-type", 14);
              *((_QWORD *)v31 + 1) = (char *)v31 + 20;
              *((_DWORD *)v31 + 4) = 4;
              goto LABEL_73;
            }
          }
          *v3 = 0;
          __break(0xC471u);
          JUMPOUT(0x195FBB630);
        }
LABEL_167:
        __break(0xC471u);
        goto LABEL_182;
      }
    }
LABEL_166:
    v68 = 0;
    goto LABEL_167;
  }
  if (*(_DWORD *)v69 == 2)
    result = (unsigned int *)WTF::StringImpl::destroy(v69, v7);
  else
    *(_DWORD *)v69 -= 2;
LABEL_7:
  v9 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v9 += 2;
  *v3 = v9;
LABEL_10:
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v4, v7);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::siblingRelativeSelectorRecursive(uint64_t result, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  char v16;
  unsigned int v17;
  int v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;

  v3 = (_QWORD *)result;
  v4 = a2[6] & 0xFFFFFFFFFFFFLL;
  if (!v4)
  {
LABEL_53:
    v19 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v19 += 2;
    *v3 = v19;
    return result;
  }
  *(_DWORD *)((a2[6] & 0xFFFFFFFFFFFFLL) + 0x18) += 2;
  while (1)
  {
    v7 = *(_DWORD *)(v4 + 24);
    *(_DWORD *)(v4 + 24) = v7 + 2;
    if ((*(_WORD *)(v4 + 28) & 8) != 0)
      break;
    if (v7)
    {
      *(_DWORD *)(v4 + 24) = v7;
    }
    else if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
    {
      result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    v8 = *(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL;
    if (v8)
      *(_DWORD *)((*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL) + 0x18) += 2;
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
    v4 = v8;
    if (!v8)
      goto LABEL_53;
  }
  if (v7)
  {
    *(_DWORD *)(v4 + 24) = v7;
  }
  else if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
  }
  result = WebCore::selectorForElementRecursive(&v21, v4, a3);
  v10 = v21;
  if (!v21)
    goto LABEL_19;
  if (*((_DWORD *)v21 + 1))
  {
    result = (uint64_t)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD *))(*a2 + 104))(&v20, a2);
    v12 = *((_DWORD *)v10 + 1);
    if (v20)
    {
      v13 = *((_DWORD *)v20 + 1);
      if (v13 < 0)
        goto LABEL_56;
    }
    else
    {
      v13 = 0;
    }
    v14 = __OFADD__(v13, 3);
    v15 = v13 + 3;
    v16 = v14;
    if ((v12 & 0x80000000) == 0 && (v16 & 1) == 0)
    {
      result = (v12 + v15);
      if (!__OFADD__(v12, v15))
      {
        v17 = *((_DWORD *)v10 + 4);
        v18 = (v17 >> 2) & 1;
        if (v20 && (v17 & 4) != 0)
          v18 = (*((unsigned __int8 *)v20 + 16) >> 2) & 1;
        result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v18, (uint64_t)v10, (int8x16_t *)" + ", 3u, (uint64_t)v20, v3);
        if (*v3)
        {
          result = (uint64_t)v20;
          v20 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
            else
              *(_DWORD *)result -= 2;
          }
          if (*(_DWORD *)v10 == 2)
            result = WTF::StringImpl::destroy(v10, v9);
          else
            *(_DWORD *)v10 -= 2;
          goto LABEL_22;
        }
LABEL_57:
        __break(0xC471u);
        return result;
      }
    }
LABEL_56:
    *v3 = 0;
    goto LABEL_57;
  }
  if (*(_DWORD *)v21 == 2)
    result = WTF::StringImpl::destroy(v21, v9);
  else
    *(_DWORD *)v21 -= 2;
LABEL_19:
  v11 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v11 += 2;
  *v3 = v11;
LABEL_22:
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v4, v9);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return result;
}

uint64_t WTF::HashMap<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WTF::String>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::add<WTF::String&>(uint64_t result, uint64_t *a2, uint64_t *a3, _DWORD **a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int i;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = (uint64_t)WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::KeyValuePair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WTF::String>>>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashMap<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WTF::String>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = *a3;
  v13 = ~(*a3 << 32) + *a3;
  v14 = (v13 ^ (v13 >> 22)) + ~((v13 ^ (v13 >> 22)) << 13);
  v15 = (9 * (v14 ^ (v14 >> 8))) ^ ((9 * (v14 ^ (v14 >> 8))) >> 15);
  v16 = ((v15 + ~(v15 << 27)) >> 31) ^ (v15 + ~((_DWORD)v15 << 27));
  for (i = 1; ; ++i)
  {
    v18 = v16 & v10;
    v19 = v8 + 24 * v18;
    v20 = *(_QWORD *)v19;
    if (*(_QWORD *)v19 != -1)
      break;
    v11 = v8 + 24 * v18;
LABEL_10:
    v16 = i + v18;
  }
  if (!v20)
  {
    if (v11)
    {
      *(_QWORD *)v11 = 0;
      *(_BYTE *)(v11 + 8) = 0;
      *(_BYTE *)(v11 + 16) = 0;
      --*(_DWORD *)(*a2 - 16);
      v12 = *a3;
      v19 = v11;
    }
    *a3 = 0;
    result = *(_QWORD *)v19;
    *(_QWORD *)v19 = v12;
    if (result)
    {
      if (*(_DWORD *)(result + 24) == 2)
      {
        if ((*(_WORD *)(result + 30) & 0x400) == 0)
          result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
      }
      else
      {
        *(_DWORD *)(result + 24) -= 2;
      }
    }
    v21 = *a4;
    if (*(_BYTE *)(v19 + 16))
    {
      if (v21)
        *v21 += 2;
      result = *(_QWORD *)(v19 + 8);
      *(_QWORD *)(v19 + 8) = v21;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      if (v21)
        *v21 += 2;
      *(_QWORD *)(v19 + 8) = v21;
      *(_BYTE *)(v19 + 16) = 1;
    }
    v25 = *a2;
    if (*a2)
      v26 = *(_DWORD *)(v25 - 12) + 1;
    else
      v26 = 1;
    *(_DWORD *)(v25 - 12) = v26;
    v27 = *a2;
    if (*a2)
      v28 = *(_DWORD *)(v27 - 12);
    else
      v28 = 0;
    v29 = (*(_DWORD *)(v27 - 16) + v28);
    v30 = *(unsigned int *)(v27 - 4);
    if (v30 > 0x400)
    {
      if (v30 <= 2 * v29)
        goto LABEL_38;
    }
    else if (3 * v30 <= 4 * v29)
    {
      if (!(_DWORD)v30)
      {
        v31 = 8;
LABEL_41:
        result = (uint64_t)WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::KeyValuePair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WTF::String>>>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashMap<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WTF::String>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::rehash(a2, v31, (uint64_t *)v19);
        v19 = result;
        v27 = *a2;
        if (*a2)
          LODWORD(v30) = *(_DWORD *)(v27 - 4);
        else
          LODWORD(v30) = 0;
        goto LABEL_45;
      }
LABEL_38:
      v31 = (_DWORD)v30 << (6 * *(_DWORD *)(v27 - 12) >= (2 * v30));
      goto LABEL_41;
    }
LABEL_45:
    v24 = v27 + 24 * v30;
    v23 = 1;
    goto LABEL_46;
  }
  if (v20 != v12)
    goto LABEL_10;
  if ((v9 & 1) != 0)
    v22 = 0;
  else
    v22 = *(_DWORD *)(v8 - 4);
  v23 = 0;
  v24 = v8 + 24 * v22;
LABEL_46:
  *(_QWORD *)v7 = v19;
  *(_QWORD *)(v7 + 8) = v24;
  *(_BYTE *)(v7 + 16) = v23;
  return result;
}

char *WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(char *result, uint64_t a2, char a3, uint64_t a4, int8x16_t **a5, uint64_t a6, int8x16_t **a7, uint64_t a8)
{
  char *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  _DWORD *v18;
  BOOL v19;
  int v20;
  char v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;
  int v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  int v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  _BYTE *v35;
  _BYTE *v36;
  size_t v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  size_t v42;
  uint64_t v43;
  unsigned int v45;
  uint64_t v47;
  _WORD *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  __int128 v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  char *v58;
  char *v59;
  char *v60;
  __int16 v61;
  unint64_t v62;
  char *v63;
  unsigned int v64;
  char *v65;
  __int128 v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  char *v70;
  char *v71;
  char *v72;
  __int16 v73;
  int8x16_t *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  __int128 v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  char *v82;
  char *v83;
  char *v84;
  __int16 v85;
  unsigned __int128 *v86;
  unsigned __int128 *v87;
  unsigned __int128 v88;
  unsigned __int128 *v89;
  unsigned __int128 *v90;
  unsigned __int128 v91;
  char v92;
  char v93;
  int8x16_t *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  _DWORD *v100;
  int8x16x2_t v101;
  int8x16x2_t v102;
  int8x16x2_t v103;
  int8x16x2_t v104;
  int8x16x2_t v105;
  int8x16x2_t v106;
  int8x16x2_t v107;
  int8x16x2_t v108;
  int8x16x2_t v109;

  v12 = result;
  if (a2)
  {
    v13 = *(_DWORD *)(a2 + 4);
    if (a4)
      goto LABEL_3;
LABEL_75:
    v14 = 0;
    if (a6)
      goto LABEL_4;
LABEL_76:
    v15 = 0;
    goto LABEL_5;
  }
  v13 = 0;
  if (!a4)
    goto LABEL_75;
LABEL_3:
  v14 = *(_DWORD *)(a4 + 4);
  if (!a6)
    goto LABEL_76;
LABEL_4:
  v15 = *(_DWORD *)(a6 + 4);
LABEL_5:
  v16 = *((_DWORD *)a7 + 2);
  if (a8)
    v17 = *(_DWORD *)(a8 + 4);
  else
    v17 = 0;
  if ((v17 | v16) < 0)
    goto LABEL_82;
  v18 = 0;
  v19 = __OFADD__(v16, v17);
  v20 = v16 + v17;
  v21 = v19;
  if (v15 < 0 || (v21 & 1) != 0)
    goto LABEL_98;
  v18 = 0;
  v22 = *((_DWORD *)a5 + 2);
  v19 = __OFADD__(v15, v20);
  v23 = v15 + v20;
  v24 = v19;
  if (v22 < 0 || v24)
    goto LABEL_98;
  v18 = 0;
  v19 = __OFADD__(v22, v23);
  v25 = v22 + v23;
  v26 = v19;
  if (v14 < 0 || v26)
    goto LABEL_98;
  v19 = __OFADD__(v14, v25);
  v27 = v14 + v25;
  if (v19)
    goto LABEL_82;
  v18 = 0;
  v19 = __OFADD__(v27, 1);
  v28 = v27 + 1;
  v29 = v19;
  if (v13 < 0 || v29)
    goto LABEL_98;
  v30 = (v13 + v28);
  if (__OFADD__(v13, v28))
    goto LABEL_82;
  if ((!a2 || (*(_BYTE *)(a2 + 16) & 4) != 0) && (!a4 || (*(_BYTE *)(a4 + 16) & 4) != 0))
  {
    if (a6)
    {
      v64 = *(_DWORD *)(a6 + 16);
      v31 = (v64 >> 2) & 1;
      if (!a8 || (v64 & 4) == 0)
        goto LABEL_35;
    }
    else if (!a8)
    {
      v31 = 1;
      goto LABEL_35;
    }
    v31 = (*(unsigned __int8 *)(a8 + 16) >> 2) & 1;
  }
  else
  {
    v31 = 0;
  }
LABEL_35:
  v32 = *a5;
  v33 = a5[1];
  v34 = *a7;
  v96 = a7[1];
  v97 = result;
  if (v31)
  {
    if ((_DWORD)v30)
    {
      if ((v30 & 0x80000000) == 0)
      {
        result = (char *)WTF::tryFastCompactMalloc((WTF *)(v30 + 20));
        v18 = v100;
        if (v100)
        {
          v35 = v100 + 5;
          *v100 = 2;
          v18[1] = v30;
          *((_QWORD *)v18 + 1) = v18 + 5;
          v18[4] = 4;
          if (a2)
          {
            v36 = *(_BYTE **)(a2 + 8);
            v37 = *(unsigned int *)(a2 + 4);
            if ((*(_BYTE *)(a2 + 16) & 4) != 0)
            {
              if ((_DWORD)v37)
              {
                if ((_DWORD)v37 == 1)
                  *v35 = *v36;
                else
                  memcpy(v18 + 5, v36, v37);
              }
            }
            else
            {
              if (v37 < 0x10)
              {
                v86 = (unsigned __int128 *)(v18 + 5);
              }
              else
              {
                v86 = (unsigned __int128 *)&v35[v37 & 0xFFFFFFF0];
                v87 = (unsigned __int128 *)(v18 + 5);
                do
                {
                  v88 = (unsigned __int128)vld2q_s8(v36);
                  v36 += 32;
                  *v87++ = v88;
                }
                while (v87 != v86);
              }
              while (v86 != (unsigned __int128 *)&v35[v37])
              {
                v92 = *v36;
                v36 += 2;
                *(_BYTE *)v86 = v92;
                v86 = (unsigned __int128 *)((char *)v86 + 1);
              }
            }
            v38 = *(unsigned int *)(a2 + 4);
          }
          else
          {
            v38 = 0;
          }
          v39 = &v35[v38];
          *v39 = a3;
          v40 = v39 + 1;
          if (a4)
          {
            v41 = *(_BYTE **)(a4 + 8);
            v42 = *(unsigned int *)(a4 + 4);
            if ((*(_BYTE *)(a4 + 16) & 4) != 0)
            {
              if ((_DWORD)v42)
              {
                if ((_DWORD)v42 == 1)
                  *v40 = *v41;
                else
                  memcpy(v40, v41, v42);
              }
            }
            else
            {
              if (v42 < 0x10)
              {
                v89 = (unsigned __int128 *)v40;
              }
              else
              {
                v89 = (unsigned __int128 *)&v40[v42 & 0xFFFFFFF0];
                v90 = (unsigned __int128 *)v40;
                do
                {
                  v91 = (unsigned __int128)vld2q_s8(v41);
                  v41 += 32;
                  *v90++ = v91;
                }
                while (v90 != v89);
              }
              while (v89 != (unsigned __int128 *)&v40[v42])
              {
                v93 = *v41;
                v41 += 2;
                *(_BYTE *)v89 = v93;
                v89 = (unsigned __int128 *)((char *)v89 + 1);
              }
            }
            v43 = *(unsigned int *)(a4 + 4);
          }
          else
          {
            v43 = 0;
          }
          result = WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v40[v43], v32, v33, a6, v34, v96, a8);
        }
        goto LABEL_52;
      }
LABEL_82:
      v18 = 0;
      goto LABEL_98;
    }
LABEL_103:
    v18 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_98;
  }
  if (!(_DWORD)v30)
    goto LABEL_103;
  if (v30 > 0x7FFFFFEF)
    goto LABEL_82;
  v45 = a5[1];
  result = (char *)WTF::tryFastCompactMalloc((WTF *)(2 * v30 + 20));
  v18 = v100;
  if (!v100)
  {
LABEL_52:
    v12 = v97;
    goto LABEL_98;
  }
  *v100 = 2;
  v18[1] = v30;
  *((_QWORD *)v18 + 1) = v18 + 5;
  v18[4] = 0;
  v98 = a2;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v98, (char *)v18 + 20);
  v47 = v98;
  if (v98)
    v47 = *(unsigned int *)(v98 + 4);
  v48 = (_WORD *)v18 + v47 + 10;
  *v48 = a3;
  v49 = (char *)(v48 + 1);
  v99 = a4;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v99, v49);
  v50 = v99;
  if (v99)
    v50 = *(unsigned int *)(v99 + 4);
  v51 = &v49[2 * v50];
  v52 = &v51[2 * v45];
  if ((v45 & 0xFFFFFFC0) != 0)
  {
    v53 = &v51[2 * (v45 & 0xFFFFFFC0)];
    v54 = 0uLL;
    do
    {
      v101.val[0] = *v32;
      v55 = v32[1];
      v104.val[0] = v32[2];
      v56 = v32[3];
      v32 += 4;
      v57 = v56;
      v104.val[1] = 0uLL;
      v107.val[0] = v55;
      v101.val[1] = 0uLL;
      v58 = v51;
      vst2q_s8(v58, v101);
      v58 += 32;
      v107.val[1] = 0uLL;
      vst2q_s8(v58, v107);
      v59 = v51 + 64;
      vst2q_s8(v59, v104);
      v60 = v51 + 96;
      vst2q_s8(v60, *(int8x16x2_t *)(&v54 - 1));
      v51 += 128;
    }
    while (v51 != v53);
    v51 = v53;
  }
  while (v51 != v52)
  {
    v61 = v32->u8[0];
    v32 = (int8x16_t *)((char *)v32 + 1);
    *(_WORD *)v51 = v61;
    v51 += 2;
  }
  v100 = (_DWORD *)a6;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v100, v52);
  v62 = (unint64_t)v100;
  if (v100)
    v62 = v100[1];
  v63 = &v52[2 * v62];
  result = &v63[2 * v96];
  if ((v96 & 0xFFFFFFC0) != 0)
  {
    v65 = &v63[2 * (v96 & 0xFFFFFFC0)];
    v66 = 0uLL;
    v12 = v97;
    do
    {
      v102.val[0] = *v34;
      v67 = v34[1];
      v105.val[0] = v34[2];
      v68 = v34[3];
      v34 += 4;
      v69 = v68;
      v105.val[1] = 0uLL;
      v108.val[0] = v67;
      v102.val[1] = 0uLL;
      v70 = v63;
      vst2q_s8(v70, v102);
      v70 += 32;
      v108.val[1] = 0uLL;
      vst2q_s8(v70, v108);
      v71 = v63 + 64;
      vst2q_s8(v71, v105);
      v72 = v63 + 96;
      vst2q_s8(v72, *(int8x16x2_t *)(&v66 - 1));
      v63 += 128;
    }
    while (v63 != v65);
    v63 = v65;
  }
  else
  {
    v12 = v97;
  }
  while (v63 != result)
  {
    v73 = v34->u8[0];
    v34 = (int8x16_t *)((char *)v34 + 1);
    *(_WORD *)v63 = v73;
    v63 += 2;
  }
  if (a8)
  {
    v74 = *(int8x16_t **)(a8 + 8);
    v75 = *(unsigned int *)(a8 + 4);
    if ((*(_BYTE *)(a8 + 16) & 4) != 0)
    {
      v76 = &result[2 * v75];
      if (v75 >= 0x40)
      {
        v77 = &result[2 * (v75 & 0xFFFFFFC0)];
        v78 = 0uLL;
        do
        {
          v103.val[0] = *v74;
          v79 = v74[1];
          v106.val[0] = v74[2];
          v80 = v74[3];
          v74 += 4;
          v81 = v80;
          v106.val[1] = 0uLL;
          v109.val[0] = v79;
          v103.val[1] = 0uLL;
          v82 = result;
          vst2q_s8(v82, v103);
          v82 += 32;
          v109.val[1] = 0uLL;
          vst2q_s8(v82, v109);
          v83 = result + 64;
          vst2q_s8(v83, v106);
          v84 = result + 96;
          vst2q_s8(v84, *(int8x16x2_t *)(&v78 - 1));
          result += 128;
        }
        while (result != v77);
        result = v77;
      }
      while (result != v76)
      {
        v85 = v74->u8[0];
        v74 = (int8x16_t *)((char *)v74 + 1);
        *(_WORD *)result = v85;
        result += 2;
      }
    }
    else if ((_DWORD)v75 == 1)
    {
      *(_WORD *)result = v74->i16[0];
    }
    else if ((_DWORD)v75)
    {
      result = (char *)memcpy(result, v74, 2 * v75);
    }
  }
LABEL_98:
  *(_QWORD *)v12 = v18;
  return result;
}

WTF *WebCore::selectorForElementRecursive(WTF **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int i;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  WTF *result;
  int v17;
  int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  const WTF::String *v22;
  WTF::StringImpl *v23;
  int SelectorMatchesOneElement;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::String *v27;
  __n128 v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  unint64_t v39;
  WTF::StringImpl *v40;
  unint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  unsigned int v49;
  WTF *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  unint64_t v53;
  WTF::StringImpl *v54;
  unint64_t v55;
  void *v56;
  uint64_t *v57;
  WTF *v58;
  uint64_t v59;
  uint64_t *v60;
  WTF *v61;
  uint64_t v62;
  uint64_t *v63;
  WTF *v64;
  uint64_t v65;
  uint64_t *v66;
  WTF *v67;
  uint64_t v68;
  uint64_t *v69;
  WTF *v70;
  uint64_t v71;
  WTF *v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75[3];
  WebCore::Node *v76;
  WTF *v77;
  uint64_t v78;

  v6 = *a3;
  if (*a3)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    for (i = 1; ; ++i)
    {
      v13 = v11;
      v14 = *(_QWORD *)(v6 + 24 * v11);
      if (v14 != -1)
      {
        if (!v14)
          goto LABEL_11;
        if (v14 == a2)
          break;
      }
      v11 = (v13 + i) & v7;
    }
    v15 = v6 + 24 * v13;
    if (*(_BYTE *)(v15 + 16))
    {
      result = *(WTF **)(v15 + 8);
      if (result)
      {
        v17 = *(_DWORD *)result;
        *(_DWORD *)result += 4;
        *a1 = result;
        v18 = v17 + 2;
        if (v18)
          *(_DWORD *)result = v18;
        else
          return (WTF *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
      }
      else
      {
        *a1 = 0;
      }
      return result;
    }
  }
LABEL_11:
  v78 = 5;
  v77 = (WTF *)WTF::fastMalloc((WTF *)0x28);
  WebCore::computeIDSelector((uint64_t)v75, *(WebCore::TreeScopeOrderedMap ***)(a2 + 40), *(_QWORD *)(a2 + 104));
  v20 = v75[0];
  if (v75[0])
  {
    if (*((_DWORD *)v75[0] + 1))
    {
      LODWORD(v21) = HIDWORD(v78);
      if (HIDWORD(v78) == (_DWORD)v78)
      {
        v60 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v77, HIDWORD(v78) + 1, (unint64_t)v75);
        v21 = HIDWORD(v78);
        v61 = v77;
        v62 = *v60;
        *v60 = 0;
        *((_QWORD *)v61 + v21) = v62;
      }
      else
      {
        v75[0] = 0;
        *((_QWORD *)v77 + HIDWORD(v78)) = v20;
      }
      HIDWORD(v78) = v21 + 1;
      v20 = v75[0];
      v75[0] = 0;
      if (!v20)
        goto LABEL_20;
    }
    else
    {
      v75[0] = 0;
    }
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
LABEL_20:
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)a2 + 104))(v75, a2);
  SelectorMatchesOneElement = WebCore::querySelectorMatchesOneElement((WebCore *)a2, (const WebCore::Element *)v75, v22);
  v25 = v75[0];
  v75[0] = 0;
  if (!v25)
    goto LABEL_23;
  if (*(_DWORD *)v25 != 2)
  {
    *(_DWORD *)v25 -= 2;
LABEL_23:
    if (SelectorMatchesOneElement)
      goto LABEL_24;
    goto LABEL_30;
  }
  WTF::StringImpl::destroy(v25, v23);
  if (SelectorMatchesOneElement)
  {
LABEL_24:
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)a2 + 104))(v75, a2);
    v29 = HIDWORD(v78);
    if (HIDWORD(v78) != (_DWORD)v78)
    {
      v30 = v75[0];
      v75[0] = 0;
      *((_QWORD *)v77 + HIDWORD(v78)) = v30;
      goto LABEL_26;
    }
    goto LABEL_104;
  }
LABEL_30:
  WebCore::computeTagAndClassSelector((uint64_t)v75, (WebCore::Element *)a2);
  v31 = v75[0];
  if (!v75[0])
    goto LABEL_31;
  if (*((_DWORD *)v75[0] + 1))
  {
    v29 = HIDWORD(v78);
    if (HIDWORD(v78) != (_DWORD)v78)
    {
      v75[0] = 0;
      *((_QWORD *)v77 + HIDWORD(v78)) = v31;
      goto LABEL_26;
    }
LABEL_104:
    v57 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v77, v29 + 1, (unint64_t)v75);
    v29 = HIDWORD(v78);
    v58 = v77;
    v59 = *v57;
    *v57 = 0;
    *((_QWORD *)v58 + v29) = v59;
LABEL_26:
    HIDWORD(v78) = v29 + 1;
    v31 = v75[0];
    v75[0] = 0;
    if (!v31)
      goto LABEL_31;
    goto LABEL_27;
  }
  v75[0] = 0;
LABEL_27:
  if (*(_DWORD *)v31 == 2)
    WTF::StringImpl::destroy(v31, v26);
  else
    *(_DWORD *)v31 -= 2;
LABEL_31:
  WebCore::computeTagAndAttributeSelector((WTF::StringImpl *)v75, (const WebCore::Element *)a2, MEMORY[0x1E0CBF738], v27, v28);
  v33 = v75[0];
  if (v75[0])
  {
    if (*((_DWORD *)v75[0] + 1))
    {
      LODWORD(v34) = HIDWORD(v78);
      if (HIDWORD(v78) == (_DWORD)v78)
      {
        v63 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v77, HIDWORD(v78) + 1, (unint64_t)v75);
        v34 = HIDWORD(v78);
        v64 = v77;
        v65 = *v63;
        *v63 = 0;
        *((_QWORD *)v64 + v34) = v65;
      }
      else
      {
        v75[0] = 0;
        *((_QWORD *)v77 + HIDWORD(v78)) = v33;
      }
      HIDWORD(v78) = v34 + 1;
      v33 = v75[0];
      v75[0] = 0;
      if (!v33)
        goto LABEL_43;
    }
    else
    {
      v75[0] = 0;
    }
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v32);
    else
      *(_DWORD *)v33 -= 2;
  }
LABEL_43:
  v35 = v77;
  v36 = HIDWORD(v78);
  *a1 = 0;
  if (!(_DWORD)v36)
    goto LABEL_58;
  v37 = 0;
  v38 = 8 * v36;
  v39 = -1;
  do
  {
    v40 = *(WTF::StringImpl **)v35;
    if (*(_QWORD *)v35)
    {
      v41 = *((unsigned int *)v40 + 1);
      if (v39 <= v41)
      {
        v40 = v37;
        v41 = v39;
        goto LABEL_52;
      }
      *(_DWORD *)v40 += 2;
    }
    else
    {
      v41 = 0;
      if (!v39)
      {
        v40 = v37;
        goto LABEL_52;
      }
    }
    *a1 = v40;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, v32);
      else
        *(_DWORD *)v37 -= 2;
    }
LABEL_52:
    v35 = (WTF *)((char *)v35 + 8);
    v37 = v40;
    v39 = v41;
    v38 -= 8;
  }
  while (v38);
  v42 = *a1;
  if (!*a1)
  {
LABEL_58:
    *a1 = 0;
    goto LABEL_59;
  }
  if (*((_DWORD *)v42 + 1))
    goto LABEL_95;
  *a1 = 0;
  if (*(_DWORD *)v42 == 2)
    WTF::StringImpl::destroy(v42, v32);
  else
    *(_DWORD *)v42 -= 2;
LABEL_59:
  WebCore::parentRelativeSelectorRecursive(v75, a2, a3);
  v44 = v75[0];
  if (v75[0])
  {
    if (*((_DWORD *)v75[0] + 1))
    {
      LODWORD(v45) = HIDWORD(v78);
      if (HIDWORD(v78) == (_DWORD)v78)
      {
        v66 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v77, HIDWORD(v78) + 1, (unint64_t)v75);
        v45 = HIDWORD(v78);
        v67 = v77;
        v68 = *v66;
        *v66 = 0;
        *((_QWORD *)v67 + v45) = v68;
      }
      else
      {
        v75[0] = 0;
        *((_QWORD *)v77 + HIDWORD(v78)) = v44;
      }
      HIDWORD(v78) = v45 + 1;
      v44 = v75[0];
      v75[0] = 0;
      if (!v44)
        goto LABEL_71;
    }
    else
    {
      v75[0] = 0;
    }
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v43);
    else
      *(_DWORD *)v44 -= 2;
  }
LABEL_71:
  WebCore::siblingRelativeSelectorRecursive((uint64_t)v75, (_QWORD *)a2, (uint64_t)a3);
  v47 = v75[0];
  if (!v75[0])
  {
LABEL_80:
    v49 = HIDWORD(v78);
    goto LABEL_81;
  }
  if (!*((_DWORD *)v75[0] + 1))
  {
    v75[0] = 0;
LABEL_78:
    if (*(_DWORD *)v47 == 2)
      WTF::StringImpl::destroy(v47, v46);
    else
      *(_DWORD *)v47 -= 2;
    goto LABEL_80;
  }
  LODWORD(v48) = HIDWORD(v78);
  if (HIDWORD(v78) == (_DWORD)v78)
  {
    v69 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v77, HIDWORD(v78) + 1, (unint64_t)v75);
    v48 = HIDWORD(v78);
    v70 = v77;
    v71 = *v69;
    *v69 = 0;
    *((_QWORD *)v70 + v48) = v71;
  }
  else
  {
    v75[0] = 0;
    *((_QWORD *)v77 + HIDWORD(v78)) = v47;
  }
  v49 = v48 + 1;
  HIDWORD(v78) = v49;
  v47 = v75[0];
  v75[0] = 0;
  if (v47)
    goto LABEL_78;
LABEL_81:
  v50 = v77;
  *a1 = 0;
  if (v49)
  {
    v51 = 0;
    v52 = 8 * v49;
    v53 = -1;
    do
    {
      v54 = *(WTF::StringImpl **)v50;
      if (*(_QWORD *)v50)
      {
        v55 = *((unsigned int *)v54 + 1);
        if (v53 > v55)
        {
          *(_DWORD *)v54 += 2;
LABEL_86:
          *a1 = v54;
          if (v51)
          {
            if (*(_DWORD *)v51 == 2)
              WTF::StringImpl::destroy(v51, v46);
            else
              *(_DWORD *)v51 -= 2;
          }
          goto LABEL_90;
        }
        v54 = v51;
        v55 = v53;
      }
      else
      {
        v55 = 0;
        if (v53)
          goto LABEL_86;
        v54 = v51;
      }
LABEL_90:
      v50 = (WTF *)((char *)v50 + 8);
      v51 = v54;
      v53 = v55;
      v52 -= 8;
    }
    while (v52);
  }
LABEL_95:
  *(_DWORD *)(a2 + 24) += 2;
  v76 = (WebCore::Node *)a2;
  WTF::HashMap<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WTF::String>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::add<WTF::String&>((uint64_t)v75, a3, (uint64_t *)&v76, (_DWORD **)a1);
  if (v76)
  {
    if (*((_DWORD *)v76 + 6) == 2)
    {
      if ((*((_WORD *)v76 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v76, v56);
    }
    else
    {
      *((_DWORD *)v76 + 6) -= 2;
    }
  }
  if (HIDWORD(v78))
  {
    v72 = v77;
    v73 = 8 * HIDWORD(v78);
    do
    {
      v74 = *(WTF::StringImpl **)v72;
      *(_QWORD *)v72 = 0;
      if (v74)
      {
        if (*(_DWORD *)v74 == 2)
          WTF::StringImpl::destroy(v74, (WTF::StringImpl *)v56);
        else
          *(_DWORD *)v74 -= 2;
      }
      v72 = (WTF *)((char *)v72 + 8);
      v73 -= 8;
    }
    while (v73);
  }
  result = v77;
  if (v77)
  {
    v77 = 0;
    LODWORD(v78) = 0;
    return (WTF *)WTF::fastFree(result, v56);
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<char,void>>(uint64_t result, unsigned int a2, int a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  BOOL v17;
  void *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _WORD *v24;
  _WORD *v25;
  int v27;
  unsigned __int128 *v28;
  unsigned __int128 *v29;
  unsigned __int128 v30;
  char v31;
  uint64_t v32;
  _QWORD v33[5];

  v8 = (_QWORD *)result;
  v33[4] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    if (a2)
    {
      if ((a2 & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(a2 + 20));
        v9 = v33[0];
        if (v33[0])
        {
          v10 = (_BYTE *)(v33[0] + 20);
          *(_DWORD *)v33[0] = 2;
          *(_DWORD *)(v9 + 4) = a2;
          *(_QWORD *)(v9 + 8) = v9 + 20;
          *(_DWORD *)(v9 + 16) = 4;
          if (a4)
          {
            v11 = *(_BYTE **)(a4 + 8);
            v12 = *(unsigned int *)(a4 + 4);
            if ((*(_BYTE *)(a4 + 16) & 4) != 0)
            {
              if ((_DWORD)v12)
              {
                if ((_DWORD)v12 == 1)
                  *v10 = *v11;
                else
                  result = (uint64_t)memcpy((void *)(v9 + 20), v11, v12);
              }
            }
            else
            {
              if (v12 < 0x10)
              {
                v28 = (unsigned __int128 *)(v9 + 20);
              }
              else
              {
                v28 = (unsigned __int128 *)&v10[v12 & 0xFFFFFFF0];
                v29 = (unsigned __int128 *)(v9 + 20);
                do
                {
                  v30 = (unsigned __int128)vld2q_s8(v11);
                  v11 += 32;
                  *v29++ = v30;
                }
                while (v29 != v28);
              }
              while (v28 != (unsigned __int128 *)&v10[v12])
              {
                v31 = *v11;
                v11 += 2;
                *(_BYTE *)v28 = v31;
                v28 = (unsigned __int128 *)((char *)v28 + 1);
              }
            }
            v13 = *(unsigned int *)(a4 + 4);
          }
          else
          {
            v13 = 0;
          }
          v14 = 0;
          v15 = &v10[v13];
          *(_QWORD *)v15 = *(_QWORD *)":nth-child(";
          *(_DWORD *)(v15 + 7) = 677669993;
          v16 = a5;
          do
          {
            *((_BYTE *)&v33[3] + v14--) = (v16 % 0xA) | 0x30;
            v17 = v16 > 9;
            v16 /= 0xAuLL;
          }
          while (v17);
          v18 = v15 + 11;
          if (v14 + 26 <= 25)
            result = (uint64_t)memcpy(v18, (char *)&v33[3] + v14 + 1, -v14);
          v19 = 0;
          do
          {
            ++v19;
            v17 = a5 > 9;
            a5 /= 0xAuLL;
          }
          while (v17);
          *((_BYTE *)v18 + v19) = 41;
        }
        goto LABEL_32;
      }
LABEL_37:
      v9 = 0;
      goto LABEL_32;
    }
LABEL_36:
    v9 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_32;
  }
  if (!a2)
    goto LABEL_36;
  if (a2 > 0x7FFFFFEF)
    goto LABEL_37;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * a2 + 20));
  v9 = v33[0];
  if (v33[0])
  {
    *(_DWORD *)v33[0] = 2;
    *(_DWORD *)(v9 + 4) = a2;
    *(_QWORD *)(v9 + 8) = v9 + 20;
    *(_DWORD *)(v9 + 16) = 0;
    v32 = a4;
    result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v32, (char *)(v9 + 20));
    if (v32)
      v20 = *(unsigned int *)(v32 + 4);
    else
      v20 = 0;
    v21 = 0;
    v22 = v9 + 20 + 2 * v20;
    *(_OWORD *)v22 = xmmword_1969F56D0;
    *(_DWORD *)(v22 + 16) = 6553708;
    *(_WORD *)(v22 + 20) = 40;
    v23 = a5;
    do
    {
      *((_BYTE *)&v33[3] + v21--) = (v23 % 0xA) | 0x30;
      v17 = v23 > 9;
      v23 /= 0xAuLL;
    }
    while (v17);
    v24 = (_WORD *)(v22 + 22);
    if (v21 + 26 <= 25)
    {
      v25 = v24;
      do
        *v25++ = *((unsigned __int8 *)&v33[3] + v21 + 1);
      while (!__CFADD__(v21++, 1));
    }
    v27 = 0;
    do
    {
      ++v27;
      v17 = a5 > 9;
      a5 /= 0xAuLL;
    }
    while (v17);
    v24[v27] = 41;
  }
LABEL_32:
  *v8 = v9;
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,WebCore::selectorsForTarget(WebCore::Element &,WTF::HashMap<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WTF::String>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits> &)::$_0 &,WTF::String*,false>(uint64_t result, WTF::StringImpl *a2, uint64_t a3, char a4)
{
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  char v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t *v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  BOOL v119;
  uint64_t v120;
  unsigned int *v121;
  uint64_t v122;
  uint64_t *v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t *v126;
  int v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t v130;
  WTF::StringImpl *v131;
  uint64_t *v132;
  unsigned int v133;
  unsigned int *v134;
  uint64_t *v135;
  uint64_t v136;
  unsigned int v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  unsigned int v142;
  uint64_t v143;
  unsigned int v144;
  unsigned int v145;
  uint64_t *v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int v154;
  unsigned int v155;
  uint64_t v156;
  unsigned int v157;
  unsigned int v158;
  WTF::StringImpl *v159;
  BOOL v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t *v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t v167;
  unsigned int v168;
  WTF::StringImpl *v169;
  uint64_t v170;
  WTF::StringImpl **v171;
  WTF::StringImpl **v172;
  int64_t v173;
  int64_t v174;
  int64_t v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unsigned int v181;
  WTF::StringImpl **v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  WTF::StringImpl **v185;
  WTF::StringImpl *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unsigned int v191;
  WTF::StringImpl *v192;
  WTF::StringImpl *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  WTF::StringImpl *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t *v203;
  WTF::StringImpl **v204;
  uint64_t v205;
  uint64_t v206;
  WTF::StringImpl *v207;
  uint64_t v208;
  WTF::StringImpl *v209;
  WTF::StringImpl *v210;
  uint64_t v211;
  WTF::StringImpl *v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  WTF::StringImpl *v217;
  uint64_t v218;
  uint64_t *v219;
  WTF::StringImpl *v220;
  unsigned int v221;
  unsigned int v223;
  unsigned int v224;
  uint64_t v225;
  unsigned int v226;
  unsigned int v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t *v231;
  uint64_t v232;
  unsigned int v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unsigned int v240;
  unsigned int v241;

  v6 = a2;
  v7 = (uint64_t *)result;
LABEL_2:
  v8 = (uint64_t *)((char *)v6 - 8);
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = v6 - (WTF::StringImpl *)v9;
    v11 = v10 >> 3;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v96 = *((_QWORD *)v6 - 1);
        v21 = *v7;
        if (!v96)
          goto LABEL_547;
        v137 = *(_DWORD *)(v96 + 4);
        if (!v21)
          goto LABEL_548;
        goto LABEL_321;
      case 3uLL:
        v139 = *v7;
        v140 = v7[1];
        if (v140)
        {
          v141 = *(_DWORD *)(v140 + 4);
          if (v139)
          {
LABEL_326:
            v142 = *(_DWORD *)(v139 + 4);
            goto LABEL_327;
          }
        }
        else
        {
          v141 = 0;
          if (v139)
            goto LABEL_326;
        }
        v142 = 0;
LABEL_327:
        v143 = *((_QWORD *)v6 - 1);
        if (v141 < v142)
        {
          if (v143)
          {
            v144 = *(_DWORD *)(v143 + 4);
            if (v140)
            {
LABEL_330:
              v145 = *(_DWORD *)(v140 + 4);
              goto LABEL_331;
            }
          }
          else
          {
            v144 = 0;
            if (v140)
              goto LABEL_330;
          }
          v145 = 0;
LABEL_331:
          if (v144 < v145)
          {
            *v7 = v143;
LABEL_543:
            *((_QWORD *)v6 - 1) = v139;
            return result;
          }
          *v7 = v140;
          v7[1] = v139;
          v239 = *((_QWORD *)v6 - 1);
          if (v239)
          {
            v240 = *(_DWORD *)(v239 + 4);
            if (v139)
            {
LABEL_540:
              v241 = *(_DWORD *)(v139 + 4);
LABEL_541:
              if (v240 >= v241)
                return result;
              v7[1] = v239;
              goto LABEL_543;
            }
          }
          else
          {
            v240 = 0;
            if (v139)
              goto LABEL_540;
          }
          v241 = 0;
          goto LABEL_541;
        }
        if (v143)
        {
          v223 = *(_DWORD *)(v143 + 4);
          if (v140)
          {
LABEL_497:
            v224 = *(_DWORD *)(v140 + 4);
LABEL_498:
            if (v223 >= v224)
              return result;
            v7[1] = v143;
            *((_QWORD *)v6 - 1) = v140;
            v152 = v7[1];
LABEL_500:
            v225 = *v7;
            if (v152)
            {
              v226 = *(_DWORD *)(v152 + 4);
              if (v225)
              {
LABEL_502:
                v227 = *(_DWORD *)(v225 + 4);
                goto LABEL_503;
              }
            }
            else
            {
              v226 = 0;
              if (v225)
                goto LABEL_502;
            }
            v227 = 0;
LABEL_503:
            if (v226 < v227)
            {
              *v7 = v152;
              v7[1] = v225;
            }
            return result;
          }
        }
        else
        {
          v223 = 0;
          if (v140)
            goto LABEL_497;
        }
        v224 = 0;
        goto LABEL_498;
      case 4uLL:
        return (uint64_t)std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::selectorsForTarget(WebCore::Element &,WTF::HashMap<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WTF::String>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits> &)::$_0 &,WTF::String*>(v7, v7 + 1, v7 + 2, (uint64_t *)v6 - 1);
      case 5uLL:
        v146 = v7 + 2;
        v147 = v7 + 3;
        result = (uint64_t)std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::selectorsForTarget(WebCore::Element &,WTF::HashMap<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WTF::String>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits> &)::$_0 &,WTF::String*>(v7, v7 + 1, v7 + 2, v7 + 3);
        v148 = *((_QWORD *)v6 - 1);
        v149 = v7[3];
        if (v148)
        {
          v150 = *(_DWORD *)(v148 + 4);
          if (v149)
          {
LABEL_336:
            v151 = *(_DWORD *)(v149 + 4);
            goto LABEL_337;
          }
        }
        else
        {
          v150 = 0;
          if (v149)
            goto LABEL_336;
        }
        v151 = 0;
LABEL_337:
        if (v150 >= v151)
          return result;
        *v147 = v148;
        *((_QWORD *)v6 - 1) = v149;
        v152 = *v147;
        v153 = *v146;
        if (*v147)
        {
          v154 = *(_DWORD *)(v152 + 4);
          if (v153)
          {
LABEL_340:
            v155 = *(_DWORD *)(v153 + 4);
            goto LABEL_341;
          }
        }
        else
        {
          v154 = 0;
          if (v153)
            goto LABEL_340;
        }
        v155 = 0;
LABEL_341:
        if (v154 >= v155)
          return result;
        *v146 = v152;
        *v147 = v153;
        v156 = v7[1];
        if (v152)
        {
          v157 = *(_DWORD *)(v152 + 4);
          if (v156)
          {
LABEL_344:
            v158 = *(_DWORD *)(v156 + 4);
LABEL_345:
            if (v157 >= v158)
              return result;
            v7[1] = v152;
            v7[2] = v156;
            goto LABEL_500;
          }
        }
        else
        {
          v157 = 0;
          if (v156)
            goto LABEL_344;
        }
        v158 = 0;
        goto LABEL_345;
      default:
        if (v10 > 191)
        {
          if (!a3)
          {
            if (v7 == (uint64_t *)v6)
              return result;
            v173 = (v11 - 2) >> 1;
            v174 = v173;
            while (1)
            {
              v175 = v174;
              if (v173 >= v174)
              {
                v176 = (2 * v174) | 1;
                v177 = &v7[v176];
                if (2 * v175 + 2 < (uint64_t)v11)
                {
                  v178 = *v177;
                  if (*v177)
                    LODWORD(v178) = *(_DWORD *)(v178 + 4);
                  v180 = v177[1];
                  ++v177;
                  v179 = v180;
                  if (v180)
                    LODWORD(v179) = *(_DWORD *)(v179 + 4);
                  if (v178 < v179)
                    v176 = 2 * v175 + 2;
                  else
                    v177 = &v7[v176];
                }
                if (*v177)
                  v181 = *(_DWORD *)(*v177 + 4);
                else
                  v181 = 0;
                v182 = (WTF::StringImpl **)&v7[v175];
                v183 = *v182;
                if (!*v182)
                {
                  *v182 = 0;
                  while (1)
                  {
                    v185 = (WTF::StringImpl **)v177;
                    v192 = (WTF::StringImpl *)*v177;
                    *v185 = 0;
                    v193 = *v182;
                    *v182 = v192;
                    if (v193)
                    {
                      if (*(_DWORD *)v193 == 2)
                        WTF::StringImpl::destroy(v193, a2);
                      else
                        *(_DWORD *)v193 -= 2;
                    }
                    if (v173 < v176)
                      break;
                    v194 = (2 * v176) | 1;
                    v177 = &v7[v194];
                    v195 = 2 * v176 + 2;
                    v182 = v185;
                    v176 = v194;
                    if (v195 < (uint64_t)v11)
                    {
                      v196 = *v177;
                      if (*v177)
                        LODWORD(v196) = *(_DWORD *)(v196 + 4);
                      v198 = v177[1];
                      ++v177;
                      v197 = v198;
                      if (v198)
                        LODWORD(v197) = *(_DWORD *)(v197 + 4);
                      if (v196 < v197)
                      {
                        v176 = v195;
                      }
                      else
                      {
                        v177 = &v7[v194];
                        v176 = v194;
                      }
                      v182 = v185;
                    }
                  }
                  goto LABEL_440;
                }
                if (v181 >= *((_DWORD *)v183 + 1))
                {
                  *v182 = 0;
                  v184 = (WTF::StringImpl *)*v177;
                  do
                  {
                    v185 = (WTF::StringImpl **)v177;
                    *v177 = 0;
                    v186 = *v182;
                    *v182 = v184;
                    if (v186)
                    {
                      if (*(_DWORD *)v186 == 2)
                        WTF::StringImpl::destroy(v186, a2);
                      else
                        *(_DWORD *)v186 -= 2;
                    }
                    if (v173 < v176)
                      break;
                    v187 = (2 * v176) | 1;
                    v177 = &v7[v187];
                    if (2 * v176 + 2 >= (uint64_t)v11)
                    {
                      v176 = (2 * v176) | 1;
                    }
                    else
                    {
                      v188 = *v177;
                      if (*v177)
                        LODWORD(v188) = *(_DWORD *)(v188 + 4);
                      v190 = v177[1];
                      ++v177;
                      v189 = v190;
                      if (v190)
                        LODWORD(v189) = *(_DWORD *)(v189 + 4);
                      if (v188 < v189)
                      {
                        v176 = 2 * v176 + 2;
                      }
                      else
                      {
                        v177 = &v7[v187];
                        v176 = (2 * v176) | 1;
                      }
                    }
                    v184 = (WTF::StringImpl *)*v177;
                    v191 = *v177 ? *((_DWORD *)v184 + 1) : 0;
                    v182 = v185;
                  }
                  while (v191 >= *((_DWORD *)v183 + 1));
LABEL_440:
                  v199 = *v185;
                  *v185 = v183;
                  if (v199)
                  {
                    if (*(_DWORD *)v199 == 2)
                      WTF::StringImpl::destroy(v199, a2);
                    else
                      *(_DWORD *)v199 -= 2;
                  }
                }
              }
              v174 = v175 - 1;
              if (!v175)
              {
                v200 = (unint64_t)v10 >> 3;
                while (1)
                {
                  v201 = 0;
                  v202 = *v7;
                  *v7 = 0;
                  v203 = v7;
                  do
                  {
                    v204 = (WTF::StringImpl **)v203;
                    v203 += v201 + 1;
                    v205 = 2 * v201;
                    v201 = (2 * v201) | 1;
                    v206 = v205 + 2;
                    if (v205 + 2 < v200)
                    {
                      v207 = (WTF::StringImpl *)*v203;
                      if (*v203)
                        LODWORD(v207) = *((_DWORD *)v207 + 1);
                      v208 = v203[1];
                      if (v208)
                        LODWORD(v208) = *(_DWORD *)(v208 + 4);
                      if (v207 < v208)
                      {
                        ++v203;
                        v201 = v206;
                      }
                    }
                    v209 = (WTF::StringImpl *)*v203;
                    *v203 = 0;
                    v210 = *v204;
                    *v204 = v209;
                    if (v210)
                    {
                      if (*(_DWORD *)v210 == 2)
                        WTF::StringImpl::destroy(v210, a2);
                      else
                        *(_DWORD *)v210 -= 2;
                    }
                  }
                  while (v201 <= (uint64_t)((unint64_t)(v200 - 2) >> 1));
                  v6 = (WTF::StringImpl *)((char *)v6 - 8);
                  if (v203 != (uint64_t *)v6)
                    break;
                  result = *v203;
                  *v203 = v202;
                  if (result)
                  {
LABEL_487:
                    if (*(_DWORD *)result == 2)
                      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
                    else
                      *(_DWORD *)result -= 2;
                  }
LABEL_489:
                  if (v200-- <= 2)
                    return result;
                }
                v211 = *(_QWORD *)v6;
                *(_QWORD *)v6 = 0;
                v212 = (WTF::StringImpl *)*v203;
                *v203 = v211;
                if (v212)
                {
                  if (*(_DWORD *)v212 == 2)
                    WTF::StringImpl::destroy(v212, a2);
                  else
                    *(_DWORD *)v212 -= 2;
                }
                result = *(_QWORD *)v6;
                *(_QWORD *)v6 = v202;
                if (result)
                {
                  if (*(_DWORD *)result == 2)
                    result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
                  else
                    *(_DWORD *)result -= 2;
                }
                v213 = (char *)(v203 + 1) - (char *)v7;
                if (v213 < 9)
                  goto LABEL_489;
                v214 = (((unint64_t)v213 >> 3) - 2) >> 1;
                v215 = &v7[v214];
                v216 = *v215;
                if (*v215)
                  LODWORD(v216) = *(_DWORD *)(v216 + 4);
                v217 = (WTF::StringImpl *)*v203;
                if (!*v203 || v216 >= *((_DWORD *)v217 + 1))
                  goto LABEL_489;
                *v203 = 0;
                v218 = *v215;
                while (2)
                {
                  v219 = v215;
                  *v215 = 0;
                  v220 = (WTF::StringImpl *)*v203;
                  *v203 = v218;
                  if (v220)
                  {
                    if (*(_DWORD *)v220 != 2)
                    {
                      *(_DWORD *)v220 -= 2;
                      goto LABEL_476;
                    }
                    WTF::StringImpl::destroy(v220, a2);
                    if (!v214)
                      goto LABEL_486;
                  }
                  else
                  {
LABEL_476:
                    if (!v214)
                      goto LABEL_486;
                  }
                  v214 = (v214 - 1) >> 1;
                  v215 = &v7[v214];
                  v218 = *v215;
                  if (*v215)
                    v221 = *(_DWORD *)(v218 + 4);
                  else
                    v221 = 0;
                  v203 = v219;
                  if (v221 >= *((_DWORD *)v217 + 1))
                  {
LABEL_486:
                    result = *v219;
                    *v219 = (uint64_t)v217;
                    if (result)
                      goto LABEL_487;
                    goto LABEL_489;
                  }
                  continue;
                }
              }
            }
          }
          v12 = v11 >> 1;
          v13 = &v7[v11 >> 1];
          if ((unint64_t)v10 >= 0x401)
          {
            v14 = *v13;
            if (*v13)
              v15 = *(_DWORD *)(v14 + 4);
            else
              v15 = 0;
            v16 = *v7;
            if (*v7)
              v17 = *(_DWORD *)(v16 + 4);
            else
              v17 = 0;
            v18 = *v8;
            if (v15 < v17)
            {
              if (v18)
              {
                v19 = *(_DWORD *)(v18 + 4);
                if (v14)
                {
LABEL_14:
                  v20 = *(_DWORD *)(v14 + 4);
                  goto LABEL_15;
                }
              }
              else
              {
                v19 = 0;
                if (v14)
                  goto LABEL_14;
              }
              v20 = 0;
LABEL_15:
              if (v19 < v20)
              {
                *v7 = v18;
LABEL_52:
                *v8 = v16;
                goto LABEL_53;
              }
              *v7 = v14;
              *v13 = v16;
              v39 = *v8;
              if (*v8)
              {
                v40 = *(_DWORD *)(v39 + 4);
                if (v16)
                {
LABEL_49:
                  v41 = *(_DWORD *)(v16 + 4);
LABEL_50:
                  if (v40 >= v41)
                    goto LABEL_53;
                  *v13 = v39;
                  goto LABEL_52;
                }
              }
              else
              {
                v40 = 0;
                if (v16)
                  goto LABEL_49;
              }
              v41 = 0;
              goto LABEL_50;
            }
            if (v18)
            {
              v28 = *(_DWORD *)(v18 + 4);
              if (v14)
              {
LABEL_29:
                v29 = *(_DWORD *)(v14 + 4);
LABEL_30:
                if (v28 < v29)
                {
                  *v13 = v18;
                  *v8 = v14;
                  v30 = *v13;
                  v31 = *v13 ? *(_DWORD *)(v30 + 4) : 0;
                  v32 = *v7;
                  v33 = *v7 ? *(_DWORD *)(v32 + 4) : 0;
                  if (v31 < v33)
                  {
                    *v7 = v30;
                    *v13 = v32;
                  }
                }
LABEL_53:
                v42 = &v7[v12];
                v45 = *(v42 - 1);
                v43 = v42 - 1;
                v44 = v45;
                v46 = v7[1];
                if (v45)
                {
                  v47 = *(_DWORD *)(v44 + 4);
                  if (v46)
                  {
LABEL_55:
                    v48 = *(_DWORD *)(v46 + 4);
                    goto LABEL_56;
                  }
                }
                else
                {
                  v47 = 0;
                  if (v46)
                    goto LABEL_55;
                }
                v48 = 0;
LABEL_56:
                v49 = *((_QWORD *)v6 - 2);
                if (v47 < v48)
                {
                  if (v49)
                  {
                    v50 = *(_DWORD *)(v49 + 4);
                    if (v44)
                    {
LABEL_59:
                      v51 = *(_DWORD *)(v44 + 4);
                      goto LABEL_60;
                    }
                  }
                  else
                  {
                    v50 = 0;
                    if (v44)
                      goto LABEL_59;
                  }
                  v51 = 0;
LABEL_60:
                  if (v50 < v51)
                  {
                    v7[1] = v49;
LABEL_83:
                    *((_QWORD *)v6 - 2) = v46;
                    goto LABEL_84;
                  }
                  v7[1] = v44;
                  *v43 = v46;
                  v60 = *((_QWORD *)v6 - 2);
                  if (v60)
                  {
                    v61 = *(_DWORD *)(v60 + 4);
                    if (v46)
                    {
LABEL_80:
                      v62 = *(_DWORD *)(v46 + 4);
LABEL_81:
                      if (v61 >= v62)
                        goto LABEL_84;
                      *v43 = v60;
                      goto LABEL_83;
                    }
                  }
                  else
                  {
                    v61 = 0;
                    if (v46)
                      goto LABEL_80;
                  }
                  v62 = 0;
                  goto LABEL_81;
                }
                if (v49)
                {
                  v52 = *(_DWORD *)(v49 + 4);
                  if (v44)
                  {
LABEL_64:
                    v53 = *(_DWORD *)(v44 + 4);
LABEL_65:
                    if (v52 < v53)
                    {
                      *v43 = v49;
                      *((_QWORD *)v6 - 2) = v44;
                      v54 = *v43;
                      v55 = *v43 ? *(_DWORD *)(v54 + 4) : 0;
                      v56 = v7[1];
                      v57 = v56 ? *(_DWORD *)(v56 + 4) : 0;
                      if (v55 < v57)
                      {
                        v7[1] = v54;
                        *v43 = v56;
                      }
                    }
LABEL_84:
                    v63 = &v7[v12];
                    v66 = v63[1];
                    v64 = v63 + 1;
                    v65 = v66;
                    v67 = v7[2];
                    if (v66)
                    {
                      v68 = *(_DWORD *)(v65 + 4);
                      if (v67)
                      {
LABEL_86:
                        v69 = *(_DWORD *)(v67 + 4);
                        goto LABEL_87;
                      }
                    }
                    else
                    {
                      v68 = 0;
                      if (v67)
                        goto LABEL_86;
                    }
                    v69 = 0;
LABEL_87:
                    v70 = *((_QWORD *)v6 - 3);
                    if (v68 < v69)
                    {
                      if (v70)
                      {
                        v71 = *(_DWORD *)(v70 + 4);
                        if (v65)
                        {
LABEL_90:
                          v72 = *(_DWORD *)(v65 + 4);
                          goto LABEL_91;
                        }
                      }
                      else
                      {
                        v71 = 0;
                        if (v65)
                          goto LABEL_90;
                      }
                      v72 = 0;
LABEL_91:
                      if (v71 < v72)
                      {
                        v7[2] = v70;
LABEL_108:
                        *((_QWORD *)v6 - 3) = v67;
                        goto LABEL_109;
                      }
                      v7[2] = v65;
                      *v64 = v67;
                      v79 = *((_QWORD *)v6 - 3);
                      if (v79)
                      {
                        v80 = *(_DWORD *)(v79 + 4);
                        if (v67)
                        {
LABEL_105:
                          v81 = *(_DWORD *)(v67 + 4);
LABEL_106:
                          if (v80 >= v81)
                            goto LABEL_109;
                          *v64 = v79;
                          goto LABEL_108;
                        }
                      }
                      else
                      {
                        v80 = 0;
                        if (v67)
                          goto LABEL_105;
                      }
                      v81 = 0;
                      goto LABEL_106;
                    }
                    if (v70)
                    {
                      v73 = *(_DWORD *)(v70 + 4);
                      if (v65)
                      {
LABEL_95:
                        v74 = *(_DWORD *)(v65 + 4);
LABEL_96:
                        if (v73 < v74)
                        {
                          *v64 = v70;
                          *((_QWORD *)v6 - 3) = v65;
                          v75 = *v64;
                          v76 = *v64 ? *(_DWORD *)(v75 + 4) : 0;
                          v77 = v7[2];
                          v78 = v77 ? *(_DWORD *)(v77 + 4) : 0;
                          if (v76 < v78)
                          {
                            v7[2] = v75;
                            *v64 = v77;
                          }
                        }
LABEL_109:
                        v82 = *v13;
                        v83 = *v43;
                        if (*v13)
                        {
                          v84 = *(_DWORD *)(v82 + 4);
                          if (v83)
                          {
LABEL_111:
                            v85 = *(_DWORD *)(v83 + 4);
                            goto LABEL_112;
                          }
                        }
                        else
                        {
                          v84 = 0;
                          if (v83)
                            goto LABEL_111;
                        }
                        v85 = 0;
LABEL_112:
                        v86 = *v64;
                        if (v84 < v85)
                        {
                          if (v86)
                          {
                            v87 = *(_DWORD *)(v86 + 4);
                            if (v82)
                            {
LABEL_115:
                              v88 = *(_DWORD *)(v82 + 4);
                              goto LABEL_116;
                            }
                          }
                          else
                          {
                            v87 = 0;
                            if (v82)
                              goto LABEL_115;
                          }
                          v88 = 0;
LABEL_116:
                          if (v87 < v88)
                            goto LABEL_130;
                          *v43 = v82;
                          *v13 = v83;
                          if (v86)
                          {
                            v89 = *(_DWORD *)(v86 + 4);
                            if (v83)
                            {
LABEL_119:
                              v90 = *(_DWORD *)(v83 + 4);
                              goto LABEL_120;
                            }
                          }
                          else
                          {
                            v89 = 0;
                            if (v83)
                              goto LABEL_119;
                          }
                          v90 = 0;
LABEL_120:
                          v43 = &v7[v11 >> 1];
                          v82 = v86;
                          if (v89 >= v90)
                          {
                            v82 = v83;
LABEL_131:
                            v21 = *v7;
                            *v7 = v82;
                            *v13 = v21;
                            goto LABEL_132;
                          }
LABEL_130:
                          *v43 = v86;
                          *v64 = v83;
                          goto LABEL_131;
                        }
                        if (v86)
                        {
                          v91 = *(_DWORD *)(v86 + 4);
                          if (v82)
                          {
LABEL_124:
                            v92 = *(_DWORD *)(v82 + 4);
                            goto LABEL_125;
                          }
                        }
                        else
                        {
                          v91 = 0;
                          if (v82)
                            goto LABEL_124;
                        }
                        v92 = 0;
LABEL_125:
                        if (v91 >= v92)
                          goto LABEL_131;
                        *v13 = v86;
                        *v64 = v82;
                        if (v86)
                        {
                          v93 = *(_DWORD *)(v86 + 4);
                          if (v83)
                          {
LABEL_128:
                            v94 = *(_DWORD *)(v83 + 4);
                            goto LABEL_129;
                          }
                        }
                        else
                        {
                          v93 = 0;
                          if (v83)
                            goto LABEL_128;
                        }
                        v94 = 0;
LABEL_129:
                        v64 = &v7[v11 >> 1];
                        v82 = v83;
                        if (v93 >= v94)
                        {
                          v82 = v86;
                          goto LABEL_131;
                        }
                        goto LABEL_130;
                      }
                    }
                    else
                    {
                      v73 = 0;
                      if (v65)
                        goto LABEL_95;
                    }
                    v74 = 0;
                    goto LABEL_96;
                  }
                }
                else
                {
                  v52 = 0;
                  if (v44)
                    goto LABEL_64;
                }
                v53 = 0;
                goto LABEL_65;
              }
            }
            else
            {
              v28 = 0;
              if (v14)
                goto LABEL_29;
            }
            v29 = 0;
            goto LABEL_30;
          }
          v21 = *v7;
          if (*v7)
            v22 = *(_DWORD *)(v21 + 4);
          else
            v22 = 0;
          v23 = *v13;
          if (*v13)
            v24 = *(_DWORD *)(v23 + 4);
          else
            v24 = 0;
          v25 = *v8;
          if (v22 < v24)
          {
            if (v25)
            {
              v26 = *(_DWORD *)(v25 + 4);
              if (v21)
                goto LABEL_24;
LABEL_266:
              v27 = 0;
            }
            else
            {
              v26 = 0;
              if (!v21)
                goto LABEL_266;
LABEL_24:
              v27 = *(_DWORD *)(v21 + 4);
            }
            if (v26 < v27)
            {
              *v13 = v25;
LABEL_77:
              *v8 = v23;
              goto LABEL_132;
            }
            *v13 = v21;
            *v7 = v23;
            v58 = *v8;
            if (*v8)
            {
              v21 = *(unsigned int *)(v58 + 4);
              if (v23)
                goto LABEL_74;
LABEL_294:
              v59 = 0;
            }
            else
            {
              v21 = 0;
              if (!v23)
                goto LABEL_294;
LABEL_74:
              v59 = *(_DWORD *)(v23 + 4);
            }
            if (v21 >= v59)
              goto LABEL_132;
            *v7 = v58;
            goto LABEL_77;
          }
          if (v25)
          {
            v34 = *(_DWORD *)(v25 + 4);
            if (!v21)
              goto LABEL_270;
          }
          else
          {
            v34 = 0;
            if (!v21)
            {
LABEL_270:
              v35 = 0;
              goto LABEL_40;
            }
          }
          v35 = *(_DWORD *)(v21 + 4);
LABEL_40:
          if (v34 < v35)
          {
            *v7 = v25;
            *v8 = v21;
            v21 = *v7;
            v36 = *v7 ? *(_DWORD *)(v21 + 4) : 0;
            v37 = *v13;
            v38 = *v13 ? *(_DWORD *)(v37 + 4) : 0;
            if (v36 < v38)
            {
              *v13 = v21;
              *v7 = v37;
            }
          }
LABEL_132:
          --a3;
          v95 = *v7;
          if ((a4 & 1) == 0)
          {
            v100 = *(v7 - 1);
            if (v100)
            {
              v101 = *(_DWORD *)(v100 + 4);
              if (!v95)
                goto LABEL_203;
            }
            else
            {
              v101 = 0;
              if (!v95)
              {
LABEL_203:
                v21 = 0;
                goto LABEL_204;
              }
            }
            v96 = v95 + 4;
            v21 = *(unsigned int *)(v95 + 4);
            if (v101 < v21)
            {
              *v7 = 0;
              goto LABEL_143;
            }
LABEL_204:
            *v7 = 0;
            v120 = *v8;
            if (*v8)
              LODWORD(v120) = *(_DWORD *)(v120 + 4);
            if (v21 >= v120)
            {
              if (v95)
              {
                v132 = v7 + 1;
                do
                {
                  v9 = v132;
                  if (v132 >= (uint64_t *)v6)
                    break;
                  v133 = *v132 ? *(_DWORD *)(*v132 + 4) : 0;
                  ++v132;
                }
                while (*(_DWORD *)(v95 + 4) >= v133);
              }
              else
              {
                v135 = v7 + 1;
                do
                {
                  v9 = v135;
                  if (v135 >= (uint64_t *)v6)
                    break;
                  v136 = *v135;
                  if (*v135)
                    LODWORD(v136) = *(_DWORD *)(v136 + 4);
                  ++v135;
                }
                while (!(_DWORD)v136);
              }
            }
            else
            {
              v96 = (unint64_t)(v7 + 1);
              if (v95)
              {
                while ((WTF::StringImpl *)v96 != v6)
                {
                  v21 = *(_QWORD *)v96;
                  if (*(_QWORD *)v96)
                    v21 = *(unsigned int *)(v21 + 4);
                  v96 += 8;
                  if (*(_DWORD *)(v95 + 4) < v21)
                    goto LABEL_212;
                }
                goto LABEL_546;
              }
              do
              {
                if ((WTF::StringImpl *)v96 == v6)
                  goto LABEL_546;
                v21 = *(_QWORD *)v96;
                if (*(_QWORD *)v96)
                  v21 = *(unsigned int *)(v21 + 4);
                v96 += 8;
              }
              while (!(_DWORD)v21);
LABEL_212:
              v9 = (uint64_t *)(v96 - 8);
            }
            v96 = (unint64_t)v6;
            if (v9 < (uint64_t *)v6)
            {
              v121 = (unsigned int *)((char *)v6 - 8);
              if (v95)
              {
                while (1)
                {
                  v96 = (unint64_t)v121;
                  v21 = (uint64_t)(v121 + 2);
                  if ((uint64_t *)v21 == v7)
                    break;
                  if (*(_QWORD *)v96)
                  {
                    v121 = (unsigned int *)(v96 - 8);
                    if (*(_DWORD *)(v95 + 4) < *(_DWORD *)(*(_QWORD *)v96 + 4))
                      continue;
                  }
                  goto LABEL_218;
                }
              }
              else
              {
                v134 = (unsigned int *)((char *)v6 - 8);
                while (1)
                {
                  v96 = (unint64_t)v134;
                  v21 = (uint64_t)(v134 + 2);
                  if ((uint64_t *)v21 == v7)
                    break;
                  if (*(_QWORD *)v96)
                  {
                    v134 = (unsigned int *)(v96 - 8);
                    if (*(_DWORD *)(*(_QWORD *)v96 + 4))
                      continue;
                  }
                  goto LABEL_218;
                }
              }
              goto LABEL_546;
            }
LABEL_218:
            if ((unint64_t)v9 < v96)
            {
              v21 = *v9;
              v122 = *(_QWORD *)v96;
              while (1)
              {
                *v9 = v122;
                *(_QWORD *)v96 = v21;
                v123 = v9 + 1;
                if (v95)
                  break;
                do
                {
                  if (v123 == (uint64_t *)v6)
                    goto LABEL_546;
                  v21 = *v123;
                  if (*v123)
                    v127 = *(_DWORD *)(v21 + 4);
                  else
                    v127 = 0;
                  ++v123;
                }
                while (!v127);
                v9 = v123 - 1;
                v128 = (uint64_t *)(v96 - 8);
                do
                {
                  if (v128 + 1 == v7)
                    goto LABEL_546;
                  v96 = (unint64_t)v128;
                  v122 = *v128;
                  if (!*v128)
                    break;
                  --v128;
                }
                while (*(_DWORD *)(v122 + 4));
LABEL_230:
                if ((unint64_t)v9 >= v96)
                  goto LABEL_242;
              }
              while (v123 != (uint64_t *)v6)
              {
                v21 = *v123;
                if (*v123)
                  v124 = *(_DWORD *)(v21 + 4);
                else
                  v124 = 0;
                v125 = *(_DWORD *)(v95 + 4);
                ++v123;
                if (v125 < v124)
                {
                  v9 = v123 - 1;
                  v126 = (uint64_t *)(v96 - 8);
                  while (v126 + 1 != v7)
                  {
                    v96 = (unint64_t)v126;
                    v122 = *v126;
                    if (*v126)
                    {
                      --v126;
                      if (v125 < *(_DWORD *)(v122 + 4))
                        continue;
                    }
                    goto LABEL_230;
                  }
                  goto LABEL_546;
                }
              }
              goto LABEL_546;
            }
LABEL_242:
            v129 = v9 - 1;
            if (v9 - 1 != v7)
            {
              v130 = *v129;
              *v129 = 0;
              v131 = (WTF::StringImpl *)*v7;
              *v7 = v130;
              if (v131)
              {
                if (*(_DWORD *)v131 == 2)
                  WTF::StringImpl::destroy(v131, a2);
                else
                  *(_DWORD *)v131 -= 2;
              }
            }
            a4 = 0;
            result = *v129;
            *v129 = v95;
            if (result)
            {
              if (*(_DWORD *)result == 2)
              {
                result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
                a4 = 0;
              }
              else
              {
                a4 = 0;
                *(_DWORD *)result -= 2;
              }
            }
            continue;
          }
          *v7 = 0;
          v96 = v95 + 4;
          if (!v95)
          {
            v97 = v7 + 1;
            if (v7 + 1 == (uint64_t *)v6)
              goto LABEL_546;
            if (v7 + 1 >= (uint64_t *)v6)
            {
              v99 = 1;
              v98 = (uint64_t *)v6;
            }
            else
            {
              v98 = (uint64_t *)v6;
              do
              {
                --v98;
                v99 = 1;
              }
              while (v97 < v98);
            }
            goto LABEL_161;
          }
LABEL_143:
          v102 = 0;
          do
          {
            v21 = (uint64_t)&v7[v102 + 1];
            if ((WTF::StringImpl *)v21 == v6)
              goto LABEL_546;
            v103 = *(_QWORD *)v21;
            if (v103)
              v104 = *(_DWORD *)(v103 + 4);
            else
              v104 = 0;
            v21 = *(unsigned int *)v96;
            ++v102;
          }
          while (v104 < v21);
          v97 = &v7[v102];
          v98 = (uint64_t *)v6;
          if (v102 != 1)
          {
            while (v98 != v7)
            {
              v106 = *--v98;
              v105 = v106;
              if (v106)
                LODWORD(v105) = *(_DWORD *)(v105 + 4);
              if (v105 < v21)
                goto LABEL_160;
            }
            goto LABEL_546;
          }
          do
          {
            if (v97 >= v98)
              break;
            v108 = *--v98;
            v107 = v108;
            if (v108)
              LODWORD(v107) = *(_DWORD *)(v107 + 4);
          }
          while (v107 >= v21);
LABEL_160:
          v99 = 0;
LABEL_161:
          v9 = v97;
          if (v97 < v98)
          {
            v109 = *v98;
            v21 = *v97;
            if ((v99 & 1) != 0)
            {
              *v97 = v109;
              *v98 = v21;
LABEL_546:
              __break(1u);
LABEL_547:
              v137 = 0;
              if (v21)
LABEL_321:
                v138 = *(_DWORD *)(v21 + 4);
              else
LABEL_548:
                v138 = 0;
              if (v137 < v138)
              {
                *v7 = v96;
                *((_QWORD *)v6 - 1) = v21;
              }
              return result;
            }
            v9 = v97;
            v110 = v98;
            do
            {
              *v9 = v109;
              v111 = v9 + 1;
              *v110 = v21;
              do
              {
                if (v111 == (uint64_t *)v6)
                  goto LABEL_546;
                v21 = *v111;
                if (*v111)
                  v112 = *(_DWORD *)(v21 + 4);
                else
                  v112 = 0;
                ++v111;
              }
              while (v112 < *(_DWORD *)v96);
              v9 = v111 - 1;
              do
              {
                if (v110 == v7)
                  goto LABEL_546;
                v113 = *--v110;
                v109 = v113;
                if (v113)
                  v114 = *(_DWORD *)(v109 + 4);
                else
                  v114 = 0;
              }
              while (v114 >= *(_DWORD *)v96);
            }
            while (v9 < v110);
          }
          v115 = v9 - 1;
          if (v9 - 1 != v7)
          {
            v116 = (WTF::StringImpl *)*v115;
            *v115 = 0;
            v117 = (WTF::StringImpl *)*v7;
            *v7 = (uint64_t)v116;
            if (v117)
            {
              if (*(_DWORD *)v117 == 2)
                WTF::StringImpl::destroy(v117, a2);
              else
                *(_DWORD *)v117 -= 2;
            }
          }
          v118 = (WTF::StringImpl *)*v115;
          *v115 = v95;
          if (v118)
          {
            if (*(_DWORD *)v118 == 2)
              WTF::StringImpl::destroy(v118, a2);
            else
              *(_DWORD *)v118 -= 2;
          }
          if (v97 < v98)
          {
LABEL_188:
            result = std::__introsort<std::_ClassicAlgPolicy,WebCore::selectorsForTarget(WebCore::Element &,WTF::HashMap<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WTF::String>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits> &)::$_0 &,WTF::String*,false>(v7, v9 - 1, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          v119 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::selectorsForTarget(WebCore::Element &,WTF::HashMap<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WTF::String>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits> &)::$_0 &,WTF::String*>(v7, (WTF::StringImpl *)(v9 - 1));
          result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::selectorsForTarget(WebCore::Element &,WTF::HashMap<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WTF::String>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits> &)::$_0 &,WTF::String*>(v9, v6);
          if (!(_DWORD)result)
          {
            if (!v119)
              goto LABEL_188;
            continue;
          }
          v6 = (WTF::StringImpl *)(v9 - 1);
          if (v119)
            return result;
          goto LABEL_2;
        }
        v159 = (WTF::StringImpl *)(v7 + 1);
        v161 = v7 == (uint64_t *)v6 || v159 == v6;
        if ((a4 & 1) == 0)
        {
          if (v161)
            return result;
          v228 = 0;
          v229 = -1;
          v230 = 1;
          v231 = v7;
LABEL_507:
          v21 = v228;
          v228 = v230;
          v232 = *(_QWORD *)v159;
          if (*(_QWORD *)v159)
            v233 = *(_DWORD *)(v232 + 4);
          else
            v233 = 0;
          v234 = v7[v21];
          if (v234)
            LODWORD(v234) = *(_DWORD *)(v234 + 4);
          if (v233 >= v234)
            goto LABEL_534;
          *(_QWORD *)v159 = 0;
          v96 = v7[v21];
          result = 0;
          v235 = v229;
          v236 = v231;
          if (v232)
          {
            while (1)
            {
              *v236 = 0;
              v236[1] = v96;
              if (!result)
                goto LABEL_516;
              v96 = (*(_DWORD *)result - 2);
              if (*(_DWORD *)result != 2)
                break;
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
              if (!v235)
                goto LABEL_546;
LABEL_517:
              v96 = *(v236 - 1);
              if (!v96)
                goto LABEL_531;
              v21 = *(unsigned int *)(v232 + 4);
              if (v21 >= *(_DWORD *)(v96 + 4))
                goto LABEL_531;
              v237 = *v236--;
              result = v237;
              ++v235;
            }
            *(_DWORD *)result = v96;
LABEL_516:
            if (!v235)
              goto LABEL_546;
            goto LABEL_517;
          }
          while (1)
          {
            *v236 = 0;
            v236[1] = v96;
            if (result)
            {
              v96 = (*(_DWORD *)result - 2);
              if (*(_DWORD *)result == 2)
              {
                result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
                if (!v235)
                  goto LABEL_546;
                goto LABEL_529;
              }
              *(_DWORD *)result = v96;
            }
            if (!v235)
              goto LABEL_546;
LABEL_529:
            v96 = *(v236 - 1);
            if (!v96 || (v21 = *(unsigned int *)(v96 + 4), !(_DWORD)v21))
            {
LABEL_531:
              result = *v236;
              *v236 = v232;
              if (result)
              {
                if (*(_DWORD *)result == 2)
                  result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
                else
                  *(_DWORD *)result -= 2;
              }
LABEL_534:
              v230 = v228 + 1;
              v159 = (WTF::StringImpl *)&v7[v228 + 1];
              ++v231;
              --v229;
              if (v159 == v6)
                return result;
              goto LABEL_507;
            }
            v238 = *v236--;
            result = v238;
            ++v235;
          }
        }
        if (v161)
          return result;
        v162 = 0;
        v163 = v7;
        do
        {
          v164 = v163;
          v163 = (uint64_t *)v159;
          v165 = v164[1];
          if (v165)
            v166 = *(_DWORD *)(v165 + 4);
          else
            v166 = 0;
          v167 = *v164;
          if (*v164)
            v168 = *(_DWORD *)(v167 + 4);
          else
            v168 = 0;
          if (v166 >= v168)
            goto LABEL_384;
          *v163 = 0;
          v169 = 0;
          v170 = v162;
          if (v165)
          {
            while (1)
            {
              v171 = (WTF::StringImpl **)((char *)v7 + v170);
              *v171 = 0;
              v171[1] = (WTF::StringImpl *)v167;
              if (!v169)
                goto LABEL_365;
              if (*(_DWORD *)v169 != 2)
                break;
              WTF::StringImpl::destroy(v169, a2);
              if (!v170)
                goto LABEL_370;
LABEL_366:
              v167 = *(uint64_t *)((char *)v7 + v170 - 8);
              if (!v167)
                goto LABEL_381;
              if (*(_DWORD *)(v165 + 4) >= *(_DWORD *)(v167 + 4))
                goto LABEL_380;
              --v164;
              v169 = *v171;
              v170 -= 8;
            }
            *(_DWORD *)v169 -= 2;
LABEL_365:
            if (!v170)
              goto LABEL_370;
            goto LABEL_366;
          }
          while (1)
          {
            v172 = (WTF::StringImpl **)((char *)v7 + v170);
            *v172 = 0;
            v172[1] = (WTF::StringImpl *)v167;
            if (v169)
            {
              if (*(_DWORD *)v169 == 2)
              {
                WTF::StringImpl::destroy(v169, a2);
                if (!v170)
                  goto LABEL_370;
                goto LABEL_378;
              }
              *(_DWORD *)v169 -= 2;
            }
            if (!v170)
            {
LABEL_370:
              v164 = v7;
              goto LABEL_381;
            }
LABEL_378:
            v167 = *(uint64_t *)((char *)v7 + v170 - 8);
            if (!v167)
              goto LABEL_381;
            if (!*(_DWORD *)(v167 + 4))
              break;
            --v164;
            v169 = *v172;
            v170 -= 8;
          }
LABEL_380:
          v164 = (uint64_t *)((char *)v7 + v170);
LABEL_381:
          result = *v164;
          *v164 = v165;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
            else
              *(_DWORD *)result -= 2;
          }
LABEL_384:
          v159 = (WTF::StringImpl *)(v163 + 1);
          v162 += 8;
        }
        while (v163 + 1 != (uint64_t *)v6);
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::selectorsForTarget(WebCore::Element &,WTF::HashMap<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WTF::String>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits> &)::$_0 &,WTF::String*>(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  WTF::StringImpl **v47;
  uint64_t v48;
  int v49;
  WTF::StringImpl *v50;
  unsigned int v51;
  WTF::StringImpl *v52;
  unsigned int v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  WTF::StringImpl *v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;

  v4 = (a2 - (WTF::StringImpl *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *((_QWORD *)a2 - 1);
      v7 = *a1;
      if (v6)
      {
        v8 = *(_DWORD *)(v6 + 4);
        if (v7)
        {
LABEL_4:
          v9 = *(_DWORD *)(v7 + 4);
          goto LABEL_5;
        }
      }
      else
      {
        v8 = 0;
        if (v7)
          goto LABEL_4;
      }
      v9 = 0;
LABEL_5:
      if (v8 < v9)
      {
        *a1 = v6;
        *((_QWORD *)a2 - 1) = v7;
      }
      return result;
    case 3:
      v22 = *a1;
      v23 = a1[1];
      if (v23)
      {
        v24 = *(_DWORD *)(v23 + 4);
        if (v22)
        {
LABEL_21:
          v25 = *(_DWORD *)(v22 + 4);
          goto LABEL_22;
        }
      }
      else
      {
        v24 = 0;
        if (v22)
          goto LABEL_21;
      }
      v25 = 0;
LABEL_22:
      v26 = *((_QWORD *)a2 - 1);
      if (v24 < v25)
      {
        if (v26)
        {
          v27 = *(_DWORD *)(v26 + 4);
          if (v23)
          {
LABEL_25:
            v28 = *(_DWORD *)(v23 + 4);
            goto LABEL_26;
          }
        }
        else
        {
          v27 = 0;
          if (v23)
            goto LABEL_25;
        }
        v28 = 0;
LABEL_26:
        if (v27 < v28)
        {
          *a1 = v26;
LABEL_108:
          *((_QWORD *)a2 - 1) = v22;
          return result;
        }
        *a1 = v23;
        a1[1] = v22;
        v66 = *((_QWORD *)a2 - 1);
        if (v66)
        {
          v67 = *(_DWORD *)(v66 + 4);
          if (v22)
          {
LABEL_105:
            v68 = *(_DWORD *)(v22 + 4);
LABEL_106:
            if (v67 >= v68)
              return result;
            a1[1] = v66;
            goto LABEL_108;
          }
        }
        else
        {
          v67 = 0;
          if (v22)
            goto LABEL_105;
        }
        v68 = 0;
        goto LABEL_106;
      }
      if (v26)
      {
        v60 = *(_DWORD *)(v26 + 4);
        if (v23)
        {
LABEL_96:
          v61 = *(_DWORD *)(v23 + 4);
          goto LABEL_97;
        }
      }
      else
      {
        v60 = 0;
        if (v23)
          goto LABEL_96;
      }
      v61 = 0;
LABEL_97:
      if (v60 >= v61)
        return result;
      a1[1] = v26;
      *((_QWORD *)a2 - 1) = v23;
      v63 = *a1;
      v62 = a1[1];
      if (v62)
      {
        v64 = *(_DWORD *)(v62 + 4);
        if (v63)
        {
LABEL_100:
          v65 = *(_DWORD *)(v63 + 4);
          goto LABEL_101;
        }
      }
      else
      {
        v64 = 0;
        if (v63)
          goto LABEL_100;
      }
      v65 = 0;
LABEL_101:
      if (v64 < v65)
      {
        *a1 = v62;
        a1[1] = v63;
      }
      return result;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::selectorsForTarget(WebCore::Element &,WTF::HashMap<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WTF::String>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits> &)::$_0 &,WTF::String*>(a1, a1 + 1, a1 + 2, (uint64_t *)a2 - 1);
      return 1;
    case 5:
      v29 = a1 + 2;
      v30 = a1 + 3;
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::selectorsForTarget(WebCore::Element &,WTF::HashMap<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WTF::String>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits> &)::$_0 &,WTF::String*>(a1, a1 + 1, a1 + 2, a1 + 3);
      v31 = *((_QWORD *)a2 - 1);
      v32 = a1[3];
      if (v31)
      {
        v33 = *(_DWORD *)(v31 + 4);
        if (v32)
        {
LABEL_31:
          v34 = *(_DWORD *)(v32 + 4);
          goto LABEL_32;
        }
      }
      else
      {
        v33 = 0;
        if (v32)
          goto LABEL_31;
      }
      v34 = 0;
LABEL_32:
      if (v33 >= v34)
        return 1;
      *v30 = v31;
      *((_QWORD *)a2 - 1) = v32;
      v35 = *v30;
      v36 = *v29;
      if (*v30)
      {
        v37 = *(_DWORD *)(v35 + 4);
        if (v36)
        {
LABEL_35:
          v38 = *(_DWORD *)(v36 + 4);
          goto LABEL_36;
        }
      }
      else
      {
        v37 = 0;
        if (v36)
          goto LABEL_35;
      }
      v38 = 0;
LABEL_36:
      if (v37 >= v38)
        return 1;
      *v29 = v35;
      *v30 = v36;
      v39 = a1[1];
      if (v35)
      {
        v40 = *(_DWORD *)(v35 + 4);
        if (v39)
        {
LABEL_39:
          v41 = *(_DWORD *)(v39 + 4);
          goto LABEL_40;
        }
      }
      else
      {
        v40 = 0;
        if (v39)
          goto LABEL_39;
      }
      v41 = 0;
LABEL_40:
      if (v40 >= v41)
        return 1;
      a1[1] = v35;
      a1[2] = v39;
      v42 = *a1;
      if (v35)
      {
        v43 = *(_DWORD *)(v35 + 4);
        if (v42)
        {
LABEL_43:
          v44 = *(_DWORD *)(v42 + 4);
          goto LABEL_44;
        }
      }
      else
      {
        v43 = 0;
        if (v42)
          goto LABEL_43;
      }
      v44 = 0;
LABEL_44:
      if (v43 < v44)
      {
        *a1 = v35;
        a1[1] = v42;
      }
      return 1;
    default:
      v11 = (WTF::StringImpl **)(a1 + 2);
      v10 = *a1;
      v12 = a1[1];
      if (v12)
      {
        v13 = *(_DWORD *)(v12 + 4);
        if (v10)
        {
LABEL_9:
          v14 = *(_DWORD *)(v10 + 4);
          goto LABEL_10;
        }
      }
      else
      {
        v13 = 0;
        if (v10)
          goto LABEL_9;
      }
      v14 = 0;
LABEL_10:
      v15 = *v11;
      if (v13 < v14)
      {
        if (v15)
        {
          v16 = *((_DWORD *)v15 + 1);
          if (v12)
          {
LABEL_13:
            v17 = *(_DWORD *)(v12 + 4);
            goto LABEL_14;
          }
        }
        else
        {
          v16 = 0;
          if (v12)
            goto LABEL_13;
        }
        v17 = 0;
LABEL_14:
        v18 = a1;
        v19 = a1 + 2;
        if (v16 < v17)
          goto LABEL_55;
        *a1 = v12;
        a1[1] = v10;
        if (v15)
        {
          v20 = *((_DWORD *)v15 + 1);
          if (v10)
          {
LABEL_17:
            v21 = *(_DWORD *)(v10 + 4);
LABEL_18:
            v18 = a1 + 1;
            v19 = a1 + 2;
            goto LABEL_54;
          }
        }
        else
        {
          v20 = 0;
          if (v10)
            goto LABEL_17;
        }
        v21 = 0;
        goto LABEL_18;
      }
      if (v15)
      {
        v45 = *((_DWORD *)v15 + 1);
        if (v12)
        {
LABEL_48:
          v46 = *(_DWORD *)(v12 + 4);
          goto LABEL_49;
        }
      }
      else
      {
        v45 = 0;
        if (v12)
          goto LABEL_48;
      }
      v46 = 0;
LABEL_49:
      if (v45 >= v46)
        goto LABEL_56;
      a1[1] = (uint64_t)v15;
      *v11 = (WTF::StringImpl *)v12;
      if (v15)
      {
        v20 = *((_DWORD *)v15 + 1);
        if (v10)
        {
LABEL_52:
          v21 = *(_DWORD *)(v10 + 4);
          goto LABEL_53;
        }
      }
      else
      {
        v20 = 0;
        if (v10)
          goto LABEL_52;
      }
      v21 = 0;
LABEL_53:
      v18 = a1;
      v19 = a1 + 1;
LABEL_54:
      if (v20 >= v21)
        goto LABEL_56;
LABEL_55:
      *v18 = (uint64_t)v15;
      *v19 = v10;
LABEL_56:
      v47 = (WTF::StringImpl **)(a1 + 3);
      if (a1 + 3 == (uint64_t *)a2)
        return 1;
      v48 = 0;
      v49 = 0;
      while (1)
      {
        v50 = *v47;
        v51 = *v47 ? *((_DWORD *)v50 + 1) : 0;
        v52 = *v11;
        v53 = *v11 ? *((_DWORD *)v52 + 1) : 0;
        if (v51 < v53)
        {
          *v47 = 0;
          v54 = 0;
          v55 = v48;
          if (v50)
          {
            while (1)
            {
              v56 = (char *)a1 + v55;
              *((_QWORD *)v56 + 2) = 0;
              *((_QWORD *)v56 + 3) = v52;
              if (v54)
              {
                if (*(_DWORD *)v54 == 2)
                  WTF::StringImpl::destroy(v54, a2);
                else
                  *(_DWORD *)v54 -= 2;
              }
              if (v55 == -16)
                break;
              v57 = (char *)a1 + v55;
              v52 = *(WTF::StringImpl **)((char *)a1 + v55 + 8);
              if (!v52)
                goto LABEL_89;
              if (*((_DWORD *)v50 + 1) >= *((_DWORD *)v52 + 1))
                goto LABEL_82;
              --v11;
              v54 = (WTF::StringImpl *)*((_QWORD *)v56 + 2);
              v55 -= 8;
            }
          }
          else
          {
            while (1)
            {
              v58 = (char *)a1 + v55;
              *((_QWORD *)v58 + 2) = 0;
              *((_QWORD *)v58 + 3) = v52;
              if (v54)
              {
                if (*(_DWORD *)v54 == 2)
                  WTF::StringImpl::destroy(v54, a2);
                else
                  *(_DWORD *)v54 -= 2;
              }
              if (v55 == -16)
                break;
              v57 = (char *)a1 + v55;
              v52 = *(WTF::StringImpl **)((char *)a1 + v55 + 8);
              if (!v52)
              {
LABEL_89:
                v11 = (WTF::StringImpl **)(v57 + 16);
                goto LABEL_82;
              }
              if (!*((_DWORD *)v52 + 1))
                goto LABEL_82;
              --v11;
              v54 = (WTF::StringImpl *)*((_QWORD *)v58 + 2);
              v55 -= 8;
            }
          }
          v11 = (WTF::StringImpl **)a1;
LABEL_82:
          v59 = *v11;
          *v11 = v50;
          if (v59)
          {
            if (*(_DWORD *)v59 == 2)
              WTF::StringImpl::destroy(v59, a2);
            else
              *(_DWORD *)v59 -= 2;
          }
          if (++v49 == 8)
            return v47 + 1 == (WTF::StringImpl **)a2;
        }
        v11 = v47;
        v48 += 8;
        if (++v47 == (WTF::StringImpl **)a2)
          return 1;
      }
  }
}

uint64_t *std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::selectorsForTarget(WebCore::Element &,WTF::HashMap<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WTF::String>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits> &)::$_0 &,WTF::String*>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;

  v4 = *a2;
  v5 = *result;
  if (*a2)
  {
    v6 = *(_DWORD *)(v4 + 4);
    if (v5)
    {
LABEL_3:
      v7 = *(_DWORD *)(v5 + 4);
      goto LABEL_4;
    }
  }
  else
  {
    v6 = 0;
    if (v5)
      goto LABEL_3;
  }
  v7 = 0;
LABEL_4:
  v8 = *a3;
  if (v6 < v7)
  {
    if (v8)
    {
      v9 = *(_DWORD *)(v8 + 4);
      if (v4)
      {
LABEL_7:
        v10 = *(_DWORD *)(v4 + 4);
        goto LABEL_8;
      }
    }
    else
    {
      v9 = 0;
      if (v4)
        goto LABEL_7;
    }
    v10 = 0;
LABEL_8:
    if (v9 < v10)
    {
      *result = v8;
LABEL_24:
      *a3 = v5;
      v4 = v5;
      goto LABEL_26;
    }
    *result = v4;
    *a2 = v5;
    v4 = *a3;
    if (*a3)
    {
      v17 = *(_DWORD *)(v4 + 4);
      if (v5)
      {
LABEL_21:
        v18 = *(_DWORD *)(v5 + 4);
LABEL_22:
        if (v17 >= v18)
          goto LABEL_26;
        *a2 = v4;
        goto LABEL_24;
      }
    }
    else
    {
      v17 = 0;
      if (v5)
        goto LABEL_21;
    }
    v18 = 0;
    goto LABEL_22;
  }
  if (v8)
  {
    v11 = *(_DWORD *)(v8 + 4);
    if (v4)
    {
LABEL_12:
      v12 = *(_DWORD *)(v4 + 4);
      goto LABEL_13;
    }
  }
  else
  {
    v11 = 0;
    if (v4)
      goto LABEL_12;
  }
  v12 = 0;
LABEL_13:
  if (v11 >= v12)
  {
    v4 = *a3;
    goto LABEL_26;
  }
  *a2 = v8;
  *a3 = v4;
  v13 = *a2;
  v14 = *result;
  if (*a2)
  {
    v15 = *(_DWORD *)(v13 + 4);
    if (v14)
    {
LABEL_16:
      v16 = *(_DWORD *)(v14 + 4);
      goto LABEL_17;
    }
  }
  else
  {
    v15 = 0;
    if (v14)
      goto LABEL_16;
  }
  v16 = 0;
LABEL_17:
  if (v15 < v16)
  {
    *result = v13;
    *a2 = v14;
    v4 = *a3;
  }
LABEL_26:
  v19 = *a4;
  if (*a4)
  {
    v20 = *(_DWORD *)(v19 + 4);
    if (v4)
    {
LABEL_28:
      v21 = *(_DWORD *)(v4 + 4);
      goto LABEL_29;
    }
  }
  else
  {
    v20 = 0;
    if (v4)
      goto LABEL_28;
  }
  v21 = 0;
LABEL_29:
  if (v20 >= v21)
    return result;
  *a3 = v19;
  *a4 = v4;
  v22 = *a3;
  v23 = *a2;
  if (*a3)
  {
    v24 = *(_DWORD *)(v22 + 4);
    if (v23)
    {
LABEL_32:
      v25 = *(_DWORD *)(v23 + 4);
      goto LABEL_33;
    }
  }
  else
  {
    v24 = 0;
    if (v23)
      goto LABEL_32;
  }
  v25 = 0;
LABEL_33:
  if (v24 >= v25)
    return result;
  *a2 = v22;
  *a3 = v23;
  v26 = *a2;
  v27 = *result;
  if (*a2)
  {
    v28 = *(_DWORD *)(v26 + 4);
    if (v27)
    {
LABEL_36:
      v29 = *(_DWORD *)(v27 + 4);
      goto LABEL_37;
    }
  }
  else
  {
    v28 = 0;
    if (v27)
      goto LABEL_36;
  }
  v29 = 0;
LABEL_37:
  if (v28 < v29)
  {
    *result = v26;
    *a2 = v27;
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::KeyValuePair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WTF::String>>>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashMap<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WTF::String>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  _QWORD *v28;
  unsigned int v29;
  uint64_t v30;
  _BYTE *v31;
  int v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _BYTE *v39;
  int v40;
  uint64_t v41;
  WTF::StringImpl **v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_BYTE *)(v7 + 32);
    do
    {
      *((_QWORD *)v10 - 2) = 0;
      *(v10 - 8) = 0;
      *v10 = 0;
      v10 += 24;
      --v9;
    }
    while (v9);
  }
  v11 = a1;
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v12 = 0;
    v13 = 0;
    v14 = v5;
    v15 = a3;
    while (1)
    {
      v16 = (uint64_t *)(v4 + 24 * v12);
      v17 = *v16;
      if (*v16 != -1)
      {
        if (v17)
        {
          v20 = *v11;
          if (*v11)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = (~(v17 << 32) + v17) ^ ((unint64_t)(~(v17 << 32) + v17) >> 22);
          v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
          v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
          v25 = v21 & ((v24 >> 31) ^ v24);
          v26 = 1;
          do
          {
            v27 = v25;
            v28 = (_QWORD *)(v20 + 24 * v25);
            v25 = (v25 + v26++) & v21;
          }
          while (*v28);
          v29 = v27;
          v30 = v20 + 24 * v27;
          v32 = *(unsigned __int8 *)(v30 + 16);
          v31 = (_BYTE *)(v30 + 16);
          if (v32 && (v33 = v20 + 24 * v27, v34 = *(WTF::StringImpl **)(v33 + 8), *(_QWORD *)(v33 + 8) = 0, v34))
          {
            if (*(_DWORD *)v34 != 2)
            {
              *(_DWORD *)v34 -= 2;
              goto LABEL_27;
            }
            WTF::StringImpl::destroy(v34, v8);
            v15 = a3;
            v11 = a1;
            v46 = *v28;
            *v28 = 0;
            if (v46)
            {
              if (*(_DWORD *)(v46 + 24) == 2)
              {
                if ((*(_WORD *)(v46 + 30) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef((WebCore::Node *)v46, v8);
                  v15 = a3;
                  v11 = a1;
                }
              }
              else
              {
                *(_DWORD *)(v46 + 24) -= 2;
              }
            }
          }
          else
          {
LABEL_27:
            *v28 = 0;
          }
          v35 = *v16;
          *v16 = 0;
          *v28 = v35;
          v36 = v20 + 24 * v29;
          *(_BYTE *)(v36 + 8) = 0;
          v37 = (_QWORD *)(v36 + 8);
          *v31 = 0;
          v38 = v4 + 24 * v12;
          v40 = *(unsigned __int8 *)(v38 + 16);
          v39 = (_BYTE *)(v38 + 16);
          if (v40)
          {
            v41 = v4 + 24 * v12;
            v43 = *(_QWORD *)(v41 + 8);
            v42 = (WTF::StringImpl **)(v41 + 8);
            *v42 = 0;
            *v37 = v43;
            *v31 = 1;
            if (*v39)
            {
              v44 = *v42;
              *v42 = 0;
              if (v44)
              {
                if (*(_DWORD *)v44 == 2)
                {
                  WTF::StringImpl::destroy(v44, v8);
                  v15 = a3;
                  v11 = a1;
                }
                else
                {
                  *(_DWORD *)v44 -= 2;
                }
              }
            }
          }
          v45 = *v16;
          *v16 = 0;
          if (v45)
          {
            if (*(_DWORD *)(v45 + 24) == 2)
            {
              if ((*(_WORD *)(v45 + 30) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v45, v8);
                v15 = a3;
                v11 = a1;
              }
            }
            else
            {
              *(_DWORD *)(v45 + 24) -= 2;
            }
          }
          if (v16 == v15)
            v13 = v28;
          goto LABEL_38;
        }
        if (*(_BYTE *)(v4 + 24 * v12 + 16))
        {
          v18 = v4 + 24 * v12;
          v19 = *(WTF::StringImpl **)(v18 + 8);
          *(_QWORD *)(v18 + 8) = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
            {
              WTF::StringImpl::destroy(v19, v8);
              v15 = a3;
              v11 = a1;
              v17 = *v16;
            }
            else
            {
              *(_DWORD *)v19 -= 2;
            }
          }
        }
        *v16 = 0;
        if (v17)
        {
          if (*(_DWORD *)(v17 + 24) == 2)
          {
            if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v17, v8);
            v15 = a3;
            v11 = a1;
          }
          else
          {
            *(_DWORD *)(v17 + 24) -= 2;
          }
        }
      }
LABEL_38:
      if (++v12 == v14)
        goto LABEL_53;
    }
  }
  v13 = 0;
  result = 0;
  if (v4)
  {
LABEL_53:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v13;
  }
  return result;
}

uint64_t WebCore::collectMediaAndLinkURLsRecursive(WebCore::HTMLAnchorElement *a1, uint64_t a2)
{
  uint64_t result;
  WebCore::HTMLAnchorElement *v5;
  __int16 v6;
  WebCore::HTMLAnchorElement *i;
  BOOL v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::HTMLAnchorElement *v14;
  __int16 v15;
  BOOL v16;
  BOOL v17;
  uint64_t v18;

  v18 = a2;
  result = WebCore::collectMediaAndLinkURLsRecursive(WebCore::Element const&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &)::$_0::operator()((uint64_t)&v18, a1);
  v5 = (WebCore::HTMLAnchorElement *)*((_QWORD *)a1 + 10);
  if (v5)
  {
    v6 = *((_WORD *)v5 + 14);
    if ((v6 & 8) == 0)
    {
      while (1)
      {
        if ((v6 & 4) == 0 || (i = (WebCore::HTMLAnchorElement *)*((_QWORD *)v5 + 10)) == 0)
        {
          if (v5 == a1)
            return result;
          while (1)
          {
            i = (WebCore::HTMLAnchorElement *)*((_QWORD *)v5 + 7);
            if (i)
              break;
            v5 = (WebCore::HTMLAnchorElement *)*((_QWORD *)v5 + 4);
            if (v5)
              v8 = v5 == a1;
            else
              v8 = 1;
            if (v8)
              return result;
          }
        }
        v6 = *((_WORD *)i + 14);
        v5 = i;
        if ((v6 & 8) != 0)
          goto LABEL_15;
      }
    }
    i = (WebCore::HTMLAnchorElement *)*((_QWORD *)a1 + 10);
    while (1)
    {
LABEL_15:
      WebCore::collectMediaAndLinkURLsRecursive(WebCore::Element const&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &)::$_0::operator()((uint64_t)&v18, i);
      result = (*(uint64_t (**)(WebCore::HTMLAnchorElement *))(*(_QWORD *)i + 192))(i);
      if ((_DWORD)result)
      {
        v10 = *((_QWORD *)i + 14);
        if (v10)
        {
          v11 = *(_QWORD *)(v10 + 8);
          if (v11)
          {
            if (!*(_BYTE *)(v11 + 144))
            {
              v12 = *(_QWORD *)(v11 + 296);
              if (v12)
              {
                *(_DWORD *)(v12 + 24) += 2;
                v13 = *(_QWORD *)(v12 + 1272);
                if (v13)
                {
                  *(_DWORD *)(v13 + 24) += 2;
                  result = WebCore::collectMediaAndLinkURLsRecursive(v13, a2);
                  if (*(_DWORD *)(v13 + 24) == 2)
                  {
                    if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
                      result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v13, v9);
                  }
                  else
                  {
                    *(_DWORD *)(v13 + 24) -= 2;
                  }
                }
                if (*(_DWORD *)(v12 + 24) == 2)
                {
                  if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
                    result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v12, v9);
                }
                else
                {
                  *(_DWORD *)(v12 + 24) -= 2;
                }
              }
            }
          }
        }
      }
      v14 = (WebCore::HTMLAnchorElement *)*((_QWORD *)i + 10);
      if (!v14)
      {
        if (i == a1)
          return result;
        while (1)
        {
          v14 = (WebCore::HTMLAnchorElement *)*((_QWORD *)i + 7);
          if (v14)
            break;
          i = (WebCore::HTMLAnchorElement *)*((_QWORD *)i + 4);
          if (i)
            v17 = i == a1;
          else
            v17 = 1;
          if (v17)
            return result;
        }
      }
      v15 = *((_WORD *)v14 + 14);
      for (i = v14; (v15 & 8) == 0; v14 = i)
      {
        if ((v15 & 4) == 0 || (i = (WebCore::HTMLAnchorElement *)*((_QWORD *)v14 + 10)) == 0)
        {
          if (v14 == a1)
            return result;
          while (1)
          {
            i = (WebCore::HTMLAnchorElement *)*((_QWORD *)v14 + 7);
            if (i)
              break;
            v14 = (WebCore::HTMLAnchorElement *)*((_QWORD *)v14 + 4);
            if (v14)
              v16 = v14 == a1;
            else
              v16 = 1;
            if (v16)
              return result;
          }
        }
        v15 = *((_WORD *)i + 14);
      }
    }
  }
  return result;
}

uint64_t WebCore::collectMediaAndLinkURLsRecursive(WebCore::Element const&,WTF::HashSet<WTF::URL,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits> &)::$_0::operator()(uint64_t result, WebCore::HTMLAnchorElement *this)
{
  uint64_t **v3;
  uint64_t v4;
  int v5;
  WTF::StringImpl *v6;
  __int128 v7;
  WTF::StringImpl *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  __int128 v19;
  __int128 v20;

  v3 = (uint64_t **)result;
  if ((*((_WORD *)this + 14) & 0x10) != 0)
  {
    v4 = *(_QWORD *)(*((_QWORD *)this + 12) + 24);
    if (v4 == *(_QWORD *)(WebCore::HTMLNames::aTag + 24))
    {
      *((_DWORD *)this + 6) += 2;
      result = (uint64_t)WebCore::HTMLAnchorElement::href(this, (WTF::URL *)&v18);
      v5 = *((_DWORD *)this + 6) - 2;
      if (*((_DWORD *)this + 6) != 2)
      {
LABEL_4:
        *((_DWORD *)this + 6) = v5;
        goto LABEL_5;
      }
      goto LABEL_24;
    }
    if (v4 == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
    {
      v5 = *((_DWORD *)this + 6);
      *((_DWORD *)this + 6) = v5 + 2;
      v6 = (WTF::StringImpl *)*((_QWORD *)this + 25);
      if (v6)
        *(_DWORD *)v6 += 2;
      v18 = v6;
      v7 = *((_OWORD *)this + 14);
      v19 = *((_OWORD *)this + 13);
      v20 = v7;
      if (v5)
        goto LABEL_4;
      goto LABEL_24;
    }
  }
  result = (*(uint64_t (**)(WebCore::HTMLAnchorElement *))(*(_QWORD *)this + 824))(this);
  if (!(_DWORD)result)
  {
    v10 = *((_QWORD *)this + 8);
    v11 = v10 & 0xFFFFFFFFFFFFLL;
    if ((v10 & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_BYTE *)((v10 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
      }
      else
      {
        ++*(_DWORD *)((v10 & 0xFFFFFFFFFFFFLL) + 0x10);
        result = WebCore::RenderStyle::hasBackgroundImage((WebCore::RenderStyle *)(v11 + 80));
        if ((_DWORD)result
          && (v12 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 88) + 16) + 8) + 16)) != 0)
        {
          ++v12[2];
          result = (uint64_t)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _DWORD *, _QWORD))(*(_QWORD *)v12 + 88))(&v18, v12, *(_QWORD *)(*((_QWORD *)this + 5) + 8));
          v13 = v12[2];
          v14 = v13 - 1;
          if (v13 == 1)
          {
            result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
            v15 = 0;
          }
          else
          {
            v15 = 0;
            v12[2] = v14;
          }
        }
        else
        {
          v15 = 1;
        }
        v16 = *(_DWORD *)(v11 + 16);
        if (v16)
        {
          *(_DWORD *)(v11 + 16) = v16 - 1;
          if (!v15)
            goto LABEL_5;
          goto LABEL_35;
        }
        __break(0xC471u);
      }
      JUMPOUT(0x195FBEC68);
    }
LABEL_35:
    v18 = 0;
    result = WTF::URL::invalidate((WTF::URL *)&v18);
    goto LABEL_5;
  }
  v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = v5 + 2;
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 114);
  if (v8)
    *(_DWORD *)v8 += 2;
  v18 = v8;
  v9 = *(_OWORD *)((char *)this + 936);
  v19 = *(_OWORD *)((char *)this + 920);
  v20 = v9;
  if (v5)
    goto LABEL_4;
LABEL_24:
  if ((*((_WORD *)this + 15) & 0x400) == 0)
    result = (uint64_t)WebCore::Node::removedLastRef(this, this);
LABEL_5:
  if (v18)
  {
    if (*((_DWORD *)v18 + 1) && (WTF::URL::protocolIs() & 1) == 0 && (WTF::URL::protocolIs() & 1) == 0)
      WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::add(*v3, &v18, (uint64_t)&v17);
    result = (uint64_t)v18;
    v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, this);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebCore::TargetedElementInfo::~TargetedElementInfo(WebCore::TargetedElementInfo *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  uint64_t v8;
  WTF *v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  WTF::StringImpl *v18;

  v3 = *((_QWORD *)this + 19);
  if (v3)
  {
    v16 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v16)
    {
      v17 = (WTF::StringImpl **)*((_QWORD *)this + 19);
      do
      {
        v18 = *v17;
        if (*v17 != (WTF::StringImpl *)-1)
        {
          *v17 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, a2);
            else
              *(_DWORD *)v18 -= 2;
          }
        }
        v17 += 5;
        --v16;
      }
      while (v16);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 17);
  if (v4)
  {
    *((_QWORD *)this + 17) = 0;
    *((_DWORD *)this + 36) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((unsigned int *)this + 23);
  v6 = (WTF *)*((_QWORD *)this + 10);
  if ((_DWORD)v5)
  {
    v7 = (WTF *)((char *)v6 + 16 * v5);
    do
    {
      v8 = *((unsigned int *)v6 + 3);
      if ((_DWORD)v8)
      {
        v10 = *(WTF::StringImpl ***)v6;
        v11 = 8 * v8;
        do
        {
          v12 = *v10;
          *v10 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, a2);
            else
              *(_DWORD *)v12 -= 2;
          }
          ++v10;
          v11 -= 8;
        }
        while (v11);
      }
      v9 = *(WTF **)v6;
      if (*(_QWORD *)v6)
      {
        *(_QWORD *)v6 = 0;
        *((_DWORD *)v6 + 2) = 0;
        WTF::fastFree(v9, a2);
      }
      v6 = (WTF *)((char *)v6 + 16);
    }
    while (v6 != v7);
    v6 = (WTF *)*((_QWORD *)this + 10);
  }
  if (v6)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v6, a2);
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
}

_QWORD *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::IntRect,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::IntRect>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::IntRect&>(_QWORD *result, uint64_t *a2, uint64_t *a3, _OWORD *a4)
{
  _QWORD *v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::IntRect>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::IntRect>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::IntRect,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::IntRect>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = *a3 + ~(*a3 << 32);
  v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  v15 = v10 & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~((_DWORD)v14 << 27)));
  v16 = (_QWORD *)(v8 + 24 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v22 = 0;
        else
          v22 = *(_DWORD *)(v8 - 4);
        *v7 = v16;
        v7[1] = v8 + 24 * v22;
        *((_BYTE *)v7 + 16) = 0;
        *(_OWORD *)(v16 + 1) = *a4;
        return result;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (_QWORD *)(v8 + 24 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      v18[2] = 0;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v16 = v18;
    }
  }
  *v16 = v11;
  *(_OWORD *)(v16 + 1) = *a4;
  v20 = *a2;
  if (*a2)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v23 = *a2;
  if (*a2)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
      goto LABEL_28;
  }
  else if (3 * v26 <= 4 * v25)
  {
    if (!(_DWORD)v26)
    {
      v27 = 8;
      goto LABEL_29;
    }
LABEL_28:
    v27 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
LABEL_29:
    result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::IntRect>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::IntRect>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::IntRect,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::IntRect>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a2, v27, v16);
    v16 = result;
    v23 = *a2;
    if (*a2)
      LODWORD(v26) = *(_DWORD *)(v23 - 4);
    else
      LODWORD(v26) = 0;
  }
  *v7 = v16;
  v7[1] = v23 + 24 * v26;
  *((_BYTE *)v7 + 16) = 1;
  return result;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::IntRect>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::IntRect>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::IntRect,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::IntRect>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  _QWORD *v21;
  __int128 v22;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (_QWORD *)(v6 + 24 * v11);
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        v14 = *a1;
        if (*a1)
          v15 = *(_DWORD *)(v14 - 8);
        else
          v15 = 0;
        v16 = (*v13 + ~(*v13 << 32)) ^ ((*v13 + ~(*v13 << 32)) >> 22);
        v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((unint64_t)(v16 + ~(v16 << 13)) >> 8));
        v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
        v19 = v15 & ((v18 >> 31) ^ v18);
        v20 = 1;
        do
        {
          v21 = (_QWORD *)(v14 + 24 * v19);
          v19 = (v19 + v20++) & v15;
        }
        while (*v21);
        v22 = *(_OWORD *)v13;
        v21[2] = v13[2];
        *(_OWORD *)v21 = v22;
        if (v13 == a3)
          v12 = v21;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

_QWORD *WTF::Vector<WebCore::IntRect,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::map<WebCore::adjustRegionAfterViewportSizeChange(WebCore::Region &,WebCore::FloatSize,WebCore::FloatSize)::$_0>(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int *v9;
  int v10;
  int v11;
  float v12;
  float *v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  int v20;
  int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  uint64_t v37;
  unint64_t v38;
  float v39;
  float v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t *v43;

  *result = 0;
  result[1] = 0;
  v3 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v3)
  {
    if (v3 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      result = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v3));
      *((_DWORD *)v6 + 2) = v3;
      *v6 = result;
      if (*(_DWORD *)(a2 + 12))
      {
        v7 = 0;
        v8 = 0;
        do
        {
          v9 = (int *)(*(_QWORD *)a2 + v7 * 8);
          v10 = *v9;
          v11 = v9[2];
          v12 = (float)*v9;
          v13 = *(float **)(a3 + 8);
          v14 = **(float **)a3;
          v15 = *v13 - v14;
          v16 = (float)v11;
          if (v15 != 0.0)
          {
            v17 = fmaxf(v12, 0.0);
            v18 = fmaxf(v14 - (float)(v11 + v10), 0.0);
            if (vabds_f32(v17, v18) >= 2.0)
            {
              if (v18 < v17)
                v12 = v15 + v12;
            }
            else
            {
              v19 = v15 * 0.5;
              v12 = v12 - v19;
              v16 = v19 + (float)(v19 + v16);
            }
          }
          v20 = v9[1];
          v21 = v9[3];
          v22 = (float)v20;
          v23 = *(float *)(*(_QWORD *)a3 + 4);
          v24 = v13[1] - v23;
          v25 = (float)v21;
          if (v24 != 0.0)
          {
            v26 = fmaxf(v22, 0.0);
            v27 = fmaxf(v23 - (float)(v21 + v20), 0.0);
            if (vabds_f32(v26, v27) >= 2.0)
            {
              if (v27 < v26)
                v12 = v24 + v12;
            }
            else
            {
              v28 = v24 * 0.5;
              v22 = v22 - v28;
              v25 = v28 + (float)(v28 + v25);
            }
          }
          v29 = floorf(v12);
          v30 = 2147500000.0;
          if (v29 < 2147500000.0)
          {
            v30 = -2147500000.0;
            if (v29 > -2147500000.0)
              v30 = (float)(int)v29;
          }
          v31 = floorf(v22);
          v32 = 2147500000.0;
          if (v31 < 2147500000.0)
          {
            v32 = -2147500000.0;
            if (v31 > -2147500000.0)
              v32 = (float)(int)v31;
          }
          v33 = ceilf(v16 + v12);
          v34 = 2147500000.0;
          if (v33 < 2147500000.0)
          {
            v34 = -2147500000.0;
            if (v33 > -2147500000.0)
              v34 = (float)(int)v33;
          }
          v35 = ceilf(v25 + v22);
          v36 = 2147500000.0;
          if (v35 < 2147500000.0)
          {
            v36 = -2147500000.0;
            if (v35 > -2147500000.0)
              v36 = (float)(int)v35;
          }
          if (v30 >= 2147500000.0)
          {
            v37 = 0x7FFFFFFFLL;
          }
          else if (v30 <= -2147500000.0)
          {
            v37 = 0x80000000;
          }
          else
          {
            v37 = (int)v30;
          }
          if (v32 >= 2147500000.0)
          {
            v38 = 0x7FFFFFFF00000000;
          }
          else if (v32 <= -2147500000.0)
          {
            v38 = 0x8000000000000000;
          }
          else
          {
            v38 = (unint64_t)(int)v32 << 32;
          }
          v39 = v34 - v30;
          v40 = v36 - v32;
          v41 = (int)v39;
          if (v39 <= -2147500000.0)
            v41 = 0x80000000;
          if (v39 >= 2147500000.0)
            v41 = 0x7FFFFFFFLL;
          v42 = (unint64_t)(int)v40 << 32;
          if (v40 <= -2147500000.0)
            v42 = 0x8000000000000000;
          if (v40 >= 2147500000.0)
            v42 = 0x7FFFFFFF00000000;
          if (v10 != (_DWORD)v37 || v20 != HIDWORD(v38) || v11 != (_DWORD)v41 || v21 != HIDWORD(v42))
            **(_BYTE **)(a3 + 16) = 1;
          v43 = &result[v7];
          *v43 = v38 | v37;
          v43[1] = v42 | v41;
          ++v8;
          v7 += 2;
        }
        while (v8 < *(unsigned int *)(a2 + 12));
        *((_DWORD *)v6 + 3) = v8;
      }
    }
  }
  return result;
}

BOOL WebCore::isNavigationalElement(WebCore *this, const WebCore::Element *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  uint64_t v7;
  _BOOL8 v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v13;

  if ((*((_WORD *)this + 14) & 0x10) != 0
    && *(_QWORD *)(*((_QWORD *)this + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::navTag + 24))
  {
    return 1;
  }
  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 4);
    if ((v3 & 1) != 0)
    {
      v4 = *(_QWORD *)(v2 + 40);
      LODWORD(v5) = *(_DWORD *)(v2 + 52);
      if ((_DWORD)v5)
      {
LABEL_6:
        v5 = v5;
        v6 = (WTF::StringImpl **)(v4 + 8);
        while (1)
        {
          v7 = (uint64_t)*(v6 - 1);
          if (v7 == WebCore::HTMLNames::roleAttr
            || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 24)
            && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 32))
          {
            goto LABEL_16;
          }
          v6 += 2;
          if (!--v5)
          {
            v6 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
            goto LABEL_16;
          }
        }
      }
    }
    else
    {
      v4 = v2 + 32;
      LODWORD(v5) = v3 >> 5;
      if ((_DWORD)v5)
        goto LABEL_6;
    }
  }
  v6 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
LABEL_16:
  v9 = *v6;
  if (v9)
    *(_DWORD *)v9 += 2;
  v13 = v9;
  v8 = WebCore::AccessibilityObject::ariaRoleToWebCoreRole((WebCore::AccessibilityObject *)&v13, a2) == 60;
  v11 = v13;
  v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  return v8;
}

void std::__introsort<std::_ClassicAlgPolicy,WebCore::ElementTargetingController::numberOfVisibilityAdjustmentRects(void)::$_0 &,WebCore::FloatRect *,false>(__n128 *a1, __n128 *a2, uint64_t a3, char a4, __n128 a5)
{
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  __n128 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  float v17;
  float v18;
  float v19;
  __n128 *v20;
  __n128 *v21;
  __n128 *v22;
  float v23;
  float v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 *v28;
  __n128 *v29;
  __n128 *v30;
  float v31;
  float v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  float v36;
  float v37;
  float v38;
  unsigned __int32 v39;
  float v40;
  float v41;
  uint64_t v42;
  __n128 *v43;
  __n128 *v44;
  __n128 *v45;
  __n128 *v46;
  float v47;
  __n128 *v48;
  float v49;
  __n128 *v50;
  __n128 *v51;
  float v52;
  __n128 *v53;
  float v54;
  BOOL v55;
  __n128 v56;
  __n128 *v57;
  float v58;
  float v59;
  __n128 *v60;
  __n128 *v61;
  float v62;
  __n128 *v63;
  float v64;
  __n128 *v65;
  float v66;
  __n128 *v67;
  float v68;
  float v69;
  __n128 v70;
  __n128 *v71;
  __n128 *v72;
  __n128 v73;
  __n128 v74;
  __n128 v75;
  __n128 *v76;
  BOOL v78;
  uint64_t v79;
  __n128 *v80;
  __n128 *v81;
  float v82;
  float v83;
  unsigned __int32 v84;
  unsigned __int32 v85;
  uint64_t v86;
  float v87;
  uint64_t v88;
  int64_t v89;
  int64_t v90;
  uint64_t v91;
  __n128 *v92;
  int32x4_t *v93;
  int8x16_t v94;
  float32x2_t v95;
  int8x16_t v96;
  float32x2_t v97;
  int8x16_t *v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  uint64_t v102;
  uint64_t v103;
  __n128 *v104;
  __n128 *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  __n128 *v110;
  float v111;
  float v112;
  unsigned __int32 v113;
  unsigned __int32 v114;
  __n128 *v115;
  __n128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __n128 *v120;
  __n128 *v121;
  float32x2_t v122;
  float v123;
  __int128 v124;
  unsigned __int32 v125;
  float *v126;
  uint64_t v127;
  float v128;
  __n128 v129;
  __n128 v130;
  __n128 v131;
  __n128 v132;
  __n128 v133;
  __n128 v134;
  __n128 v135;
  __n128 v136;
  __n128 v137;
  __n128 v138;
  __n128 v139;
  __n128 v140;
  __n128 v141;
  __n128 v142;
  __n128 v143;
  __n128 v144;
  __n128 v145;
  __n128 v146;
  __n128 v147;
  __n128 v148;
  __n128 v149;
  __n128 v150;
  __n128 v151;
  __n128 v152;

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ElementTargetingController::numberOfVisibilityAdjustmentRects(void)::$_0 &,WebCore::FloatRect *>(__n128 *a1, __n128 *a2, __n128 a3)
{
  uint64_t v5;
  _BOOL8 result;
  __n128 v7;
  __n128 *v8;
  __n128 *v9;
  float v10;
  float v11;
  __n128 v12;
  __n128 *v13;
  __n128 *v14;
  float v15;
  float v16;
  float v17;
  __n128 v18;
  __n128 *v19;
  __n128 *v20;
  __n128 *v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 *v32;
  uint64_t v33;
  int v34;
  float v35;
  float v36;
  unint64_t v37;
  uint64_t v38;
  float v39;
  uint64_t v40;

  v5 = a2 - a1;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((float)(a2[-1].n128_f32[2] * a2[-1].n128_f32[3]) > (float)(a1->n128_f32[2] * a1->n128_f32[3]))
      {
        v7 = *a1;
        *a1 = a2[-1];
        a2[-1] = v7;
      }
      return result;
    case 3:
      v8 = a1 + 1;
      v9 = a2 - 1;
      v10 = a1[1].n128_f32[2] * a1[1].n128_f32[3];
      v11 = a2[-1].n128_f32[2] * a2[-1].n128_f32[3];
      if (v10 <= (float)(a1->n128_f32[2] * a1->n128_f32[3]))
      {
        if (v11 > v10)
        {
          v26 = *v8;
          *v8 = *v9;
          *v9 = v26;
          if ((float)(a1[1].n128_f32[2] * a1[1].n128_f32[3]) > (float)(a1->n128_f32[2] * a1->n128_f32[3]))
          {
            v27 = *a1;
            *a1 = *v8;
            *v8 = v27;
          }
        }
      }
      else
      {
        if (v11 <= v10)
        {
          v30 = *a1;
          *a1 = *v8;
          *v8 = v30;
          if ((float)(a2[-1].n128_f32[2] * a2[-1].n128_f32[3]) <= (float)(a1[1].n128_f32[2] * a1[1].n128_f32[3]))
            return result;
          v12 = *v8;
          *v8 = *v9;
        }
        else
        {
          v12 = *a1;
          *a1 = *v9;
        }
        *v9 = v12;
      }
      return result;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ElementTargetingController::numberOfVisibilityAdjustmentRects(void)::$_0 &,WebCore::FloatRect *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v19 = a1 + 1;
      v20 = a1 + 2;
      v21 = a1 + 3;
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ElementTargetingController::numberOfVisibilityAdjustmentRects(void)::$_0 &,WebCore::FloatRect *>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      if ((float)(a2[-1].n128_f32[2] * a2[-1].n128_f32[3]) > (float)(a1[3].n128_f32[2] * a1[3].n128_f32[3]))
      {
        v22 = *v21;
        *v21 = a2[-1];
        a2[-1] = v22;
        if ((float)(a1[3].n128_f32[2] * a1[3].n128_f32[3]) > (float)(a1[2].n128_f32[2] * a1[2].n128_f32[3]))
        {
          v23 = *v20;
          *v20 = *v21;
          *v21 = v23;
          if ((float)(a1[2].n128_f32[2] * a1[2].n128_f32[3]) > (float)(a1[1].n128_f32[2] * a1[1].n128_f32[3]))
          {
            v24 = *v19;
            *v19 = *v20;
            *v20 = v24;
            if ((float)(a1[1].n128_f32[2] * a1[1].n128_f32[3]) > (float)(a1->n128_f32[2] * a1->n128_f32[3]))
            {
              v25 = *a1;
              *a1 = *v19;
              *v19 = v25;
            }
          }
        }
      }
      return 1;
    default:
      v13 = a1 + 2;
      v14 = a1 + 1;
      v15 = a1[1].n128_f32[2] * a1[1].n128_f32[3];
      v16 = a1->n128_f32[2] * a1->n128_f32[3];
      v17 = a1[2].n128_f32[2] * a1[2].n128_f32[3];
      if (v15 <= v16)
      {
        if (v17 > v15)
        {
          v28 = *v14;
          *v14 = *v13;
          *v13 = v28;
          if ((float)(a1[1].n128_f32[2] * a1[1].n128_f32[3]) > v16)
          {
            v29 = *a1;
            *a1 = *v14;
            *v14 = v29;
          }
        }
      }
      else
      {
        if (v17 <= v15)
        {
          v31 = *a1;
          *a1 = *v14;
          *v14 = v31;
          if (v17 <= (float)(a1[1].n128_f32[2] * a1[1].n128_f32[3]))
            goto LABEL_28;
          v18 = *v14;
          *v14 = *v13;
        }
        else
        {
          v18 = *a1;
          *a1 = *v13;
        }
        *v13 = v18;
      }
LABEL_28:
      v32 = a1 + 3;
      if (&a1[3] == a2)
        return 1;
      v33 = 0;
      v34 = 0;
      break;
  }
  while (1)
  {
    v35 = v32->n128_f32[2];
    v36 = v32->n128_f32[3];
    if ((float)(v35 * v36) > (float)(v13->n128_f32[2] * v13->n128_f32[3]))
    {
      v37 = v32->n128_u64[0];
      v38 = v33;
      while (1)
      {
        *(__n128 *)((char *)a1 + v38 + 48) = *(__n128 *)((char *)a1 + v38 + 32);
        if (v38 == -32)
          break;
        v39 = *(float *)((char *)&a1[1].n128_f32[2] + v38) * *(float *)((char *)&a1[1].n128_f32[3] + v38);
        v38 -= 16;
        if ((float)(v35 * v36) <= v39)
        {
          v40 = (uint64_t)&a1[3] + v38;
          goto LABEL_36;
        }
      }
      v40 = (uint64_t)a1;
LABEL_36:
      *(_QWORD *)v40 = v37;
      *(float *)(v40 + 8) = v35;
      *(float *)(v40 + 12) = v36;
      if (++v34 == 8)
        return &v32[1] == a2;
    }
    v13 = v32;
    v33 += 16;
    if (++v32 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ElementTargetingController::numberOfVisibilityAdjustmentRects(void)::$_0 &,WebCore::FloatRect *>(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 result)
{
  float v5;
  float v6;

  v5 = a2->n128_f32[2] * a2->n128_f32[3];
  v6 = a3->n128_f32[2] * a3->n128_f32[3];
  if (v5 <= (float)(a1->n128_f32[2] * a1->n128_f32[3]))
  {
    if (v6 > v5)
    {
      result = *a2;
      *a2 = *a3;
      *a3 = result;
      if ((float)(a2->n128_f32[2] * a2->n128_f32[3]) > (float)(a1->n128_f32[2] * a1->n128_f32[3]))
      {
        result = *a1;
        *a1 = *a2;
        *a2 = result;
      }
    }
  }
  else
  {
    if (v6 > v5)
    {
      result = *a1;
      *a1 = *a3;
LABEL_9:
      *a3 = result;
      goto LABEL_10;
    }
    result = *a1;
    *a1 = *a2;
    *a2 = result;
    if ((float)(a3->n128_f32[2] * a3->n128_f32[3]) > (float)(a2->n128_f32[2] * a2->n128_f32[3]))
    {
      result = *a2;
      *a2 = *a3;
      goto LABEL_9;
    }
  }
LABEL_10:
  result.n128_f32[0] = a4->n128_f32[2] * a4->n128_f32[3];
  if (result.n128_f32[0] > (float)(a3->n128_f32[2] * a3->n128_f32[3]))
  {
    result = *a3;
    *a3 = *a4;
    *a4 = result;
    result.n128_f32[0] = a3->n128_f32[2] * a3->n128_f32[3];
    if (result.n128_f32[0] > (float)(a2->n128_f32[2] * a2->n128_f32[3]))
    {
      result = *a2;
      *a2 = *a3;
      *a3 = result;
      result.n128_f32[0] = a2->n128_f32[2] * a2->n128_f32[3];
      if (result.n128_f32[0] > (float)(a1->n128_f32[2] * a1->n128_f32[3]))
      {
        result = *a1;
        *a1 = *a2;
        *a2 = result;
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>>::deallocateTable(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != -1)
      {
        *v4 = 0;
        if (v5)
        {
          if ((*(_BYTE *)(v5 + 22) & 2) != 0)
          {
            if (*(_DWORD *)(v5 + 24) == 2)
            {
              if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
            }
            else
            {
              *(_DWORD *)(v5 + 24) -= 2;
            }
          }
          else
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5);
          }
        }
      }
      ++v4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t std::experimental::fundamentals_v3::expected<std::monostate,WebCore::EventHandler::CapturesDragging::InabilityReason>::operator=(uint64_t a1, char a2)
{
  int v3;
  unsigned int v5;
  BOOL v6;
  _BYTE *v7;
  _BYTE *v8;
  unint64_t v9;
  int *v10;
  int *v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE v14[4];
  int v15;
  uint64_t v16;
  char v17;

  v14[0] = a2;
  v15 = 1;
  v3 = *(_DWORD *)(a1 + 4);
  if (v3 == 1)
  {
    *(_BYTE *)a1 = a2;
  }
  else
  {
    v5 = v3 + 1;
    v6 = v5 >= 3;
    if (v5 >= 3)
      v7 = (_BYTE *)a1;
    else
      v7 = v14;
    if (v5 >= 3)
      v8 = v14;
    else
      v8 = (_BYTE *)a1;
    v9 = *(_QWORD *)v8;
    v16 = *(_QWORD *)v8;
    if (v6)
      v10 = &v15;
    else
      v10 = (int *)(a1 + 4);
    *((_DWORD *)v8 + 1) = -1;
    if (v6)
      v11 = (int *)(a1 + 4);
    else
      v11 = &v15;
    v12 = *((unsigned int *)v7 + 1);
    v13 = HIDWORD(v9);
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(char *))off_1E33FE7D0[v12])(&v17);
      *v10 = v12;
    }
    *v11 = -1;
    if ((_DWORD)v13 != -1)
    {
      ((void (*)(char *, _BYTE *, uint64_t *))off_1E33FE7D0[v13])(&v17, v7, &v16);
      *v11 = v13;
    }
  }
  return a1;
}

uint64_t std::experimental::fundamentals_v3::expected<std::monostate,WebCore::EventHandler::CapturesDragging::InabilityReason>::swap(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  _BOOL4 v5;
  uint64_t v6;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v16;
  char v17;

  v2 = *(_DWORD *)(result + 4);
  v3 = *(unsigned int *)(a2 + 4);
  if (v2 != -1 || (_DWORD)v3 != -1)
  {
    v5 = v2 == -1;
    if (v2 == -1)
      v6 = -1;
    else
      v6 = *(unsigned int *)(result + 4);
    if ((_DWORD)v3 != -1)
      v5 = v6 == v3;
    if (v5)
    {
      return ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E33FE7C0[v6])(&v15, result, a2);
    }
    else
    {
      v8 = (v2 - 2) < 0xFFFFFFFD || (v3 + 1) < 3;
      if (v8)
        v9 = result;
      else
        v9 = a2;
      if (v8)
        v10 = a2;
      else
        v10 = result;
      v14 = *(_QWORD *)v10;
      v11 = v14;
      *(_DWORD *)(v10 + 4) = -1;
      v12 = *(unsigned int *)(v9 + 4);
      v13 = HIDWORD(v11);
      if ((_DWORD)v12 != -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E33FE7D0[v12])(&v16, v10, v9);
        *(_DWORD *)(v10 + 4) = v12;
      }
      *(_DWORD *)(v9 + 4) = -1;
      if ((_DWORD)v13 != -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, unint64_t *))off_1E33FE7D0[v13])(&v17, v9, &v14);
        *(_DWORD *)(v9 + 4) = v13;
      }
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJNS_9monostateEN7WebCore12EventHandler16CapturesDragging15InabilityReasonEEE6__swapB8sn180100ERSC_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE0EJS7_SB_EEESN_EEEDcSE_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore12EventHandler16CapturesDragging15InabilityReasonEEEEE19__generic_constructB8sn180100INS0_6__implIJS8_SC_EEEEEvRSE_OT_EUlRSJ_OT0_E_JRNS0_6__baseILNS0_6_TraitE0EJS8_SC_EEEOSS_EEEDcSJ_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::removeDraggedContentDocumentMarkersFromAllFramesInPage(WebCore::Page &)::$_0,void,WebCore::Document &>::call(int a1, WebCore::Document *this)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *((_QWORD *)this + 187);
  if (!v2)
    v2 = WebCore::Document::ensureMarkers(this);
  v4 = 0;
  return WebCore::DocumentMarkerController::removeMarkers(v2, (void *)0x4000, &v4);
}

uint64_t WebCore::EventSource::EventSource(uint64_t a1, WebCore::ScriptExecutionContext *a2, uint64_t a3, _BYTE *a4)
{
  WebCore::ScriptExecutionContext *v6;
  const char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  _DWORD *v12;
  __int128 v13;
  const char *v14;
  uint64_t *v15;
  const char *v16;
  const char *v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;
  const WTF::String *v21;
  PAL *v22;
  WTF::StringImpl *v23;
  _QWORD *v24;
  __int128 v25;
  WTF::StringImpl *v26;
  uint64_t *v28;
  _BYTE v29[8];
  _QWORD v30[2];
  __int16 v31;
  WTF::StringImpl *v32;
  const char *v33[2];

  v6 = a2;
  *(_DWORD *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E33A4FC0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = &off_1E33FE818;
  *(_QWORD *)(a1 + 40) = 0;
  v8 = (const char *)(a1 + 56);
  if (!*((_BYTE *)a2 + 274))
  {
    v9 = (char *)a2 - 192;
    v10 = *((_QWORD *)a2 + 64);
    if (v10)
    {
      v11 = *(char **)(v10 + 8);
      if (v11)
        v9 = v11;
    }
    v6 = (WebCore::ScriptExecutionContext *)(v9 + 192);
  }
  *(_QWORD *)(a1 + 56) = &off_1E33A18C0;
  *(_QWORD *)(a1 + 64) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(a1 + 56), v6);
  *(_QWORD *)(a1 + 56) = &off_1E33A0540;
  *(_QWORD *)(a1 + 72) = 0;
  if (*((_BYTE *)v6 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x195FC0C98);
  }
  v33[0] = v8;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v6 + 16, (uint64_t *)v33, (uint64_t)v29);
  *(_QWORD *)a1 = off_1E33FE5E8;
  *(_QWORD *)(a1 + 32) = &unk_1E33FE6B0;
  *(_QWORD *)(a1 + 56) = &unk_1E33FE708;
  v12 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v12 += 2;
  *(_QWORD *)(a1 + 80) = v12;
  v13 = *(_OWORD *)(a3 + 8);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(a1 + 88) = v13;
  *(_BYTE *)(a1 + 120) = *a4;
  *(_WORD *)(a1 + 122) = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v16 = (const char *)PAL::atomCanonicalTextEncodingName(v15, (PAL *)"UTF-8", v14);
  v18 = v17;
  v30[0] = v16;
  v30[1] = v17;
  v33[0] = v16;
  v33[1] = v17;
  if (v17 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
  {
    if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, v33))
    {
      v19 = 165;
    }
    else
    {
      v19 = 92;
    }
  }
  else
  {
    v19 = 92;
  }
  v31 = v19;
  v20 = WTF::fastMalloc((WTF *)0x60);
  *(_DWORD *)v20 = 1;
  v22 = (PAL *)WebCore::TextResourceDecoder::determineContentType((WebCore::TextResourceDecoder *)&v32, v21);
  *(_DWORD *)(v20 + 4) = (_DWORD)v22;
  if ((_DWORD)v22 == 2)
  {
    v28 = PAL::UTF8Encoding(v22);
  }
  else
  {
    if (v18)
    {
      v24 = v30;
      goto LABEL_19;
    }
    v28 = PAL::Latin1Encoding(v22);
  }
  v24 = v28 + 1;
LABEL_19:
  *(_QWORD *)(v20 + 8) = &off_1E31F4A18;
  v25 = *(_OWORD *)v24;
  *(_WORD *)(v20 + 32) = *((_WORD *)v24 + 8);
  *(_OWORD *)(v20 + 16) = v25;
  *(_QWORD *)(v20 + 40) = 0;
  *(_QWORD *)(v20 + 48) = 0;
  *(_DWORD *)(v20 + 56) = 0;
  *(_QWORD *)(v20 + 72) = 0;
  *(_QWORD *)(v20 + 80) = 0;
  *(_QWORD *)(v20 + 64) = 0;
  *(_QWORD *)(v20 + 87) = 0;
  *(_QWORD *)(a1 + 128) = v20;
  v26 = v32;
  v32 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v23);
    else
      *(_DWORD *)v26 -= 2;
  }
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 165) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 3000;
  *(_QWORD *)(a1 + 224) = 0;
  return a1;
}

void WebCore::ThreadableLoaderClient::~ThreadableLoaderClient(WebCore::ThreadableLoaderClient *this, void *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    *(_QWORD *)(v2 + 8) = 0;
    v3 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v3)
    {
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v3);
        WTF::fastFree((WTF *)v3, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WebCore::ThreadableLoaderClient *v7;

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    *(_QWORD *)(v2 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        v7 = this;
        WTF::fastFree((WTF *)v4, a2);
        this = v7;
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  if (atomic_load((unsigned int *)this + 4))
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
  }
  else
  {
    WTF::fastFree(this, a2);
  }
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::DeviceController::*&)(void),WebCore::DeviceController*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

_DWORD *WTF::HashMap<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>,unsigned int,WTF::DefaultHash<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>>,WTF::HashTraits<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(_DWORD *result, uint64_t *a2, uint64_t *a3, _DWORD *a4)
{
  _DWORD *v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = (_DWORD *)WTF::HashTable<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>,unsigned int>>,WTF::DefaultHash<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>>,WTF::HashMap<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>,unsigned int,WTF::DefaultHash<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>>,WTF::HashTraits<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = ~(*a3 << 32) + *a3;
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (_QWORD *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v22 = 0;
        else
          v22 = *(unsigned int *)(v8 - 4);
        v28 = 0;
        v29 = v8 + 16 * v22;
        goto LABEL_36;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (_QWORD *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v16 = v18;
    }
  }
  *a3 = 0;
  result = (_DWORD *)*v16;
  *v16 = v11;
  if (result)
  {
    if (result[6] == 1)
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 72))(result);
    else
      --result[6];
  }
  *((_DWORD *)v16 + 2) = *a4;
  v20 = *a2;
  if (*a2)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v23 = *a2;
  if (*a2)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
      goto LABEL_26;
  }
  else if (3 * v26 <= 4 * v25)
  {
    if (!(_DWORD)v26)
    {
      v27 = 8;
LABEL_31:
      result = (_DWORD *)WTF::HashTable<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>,unsigned int>>,WTF::DefaultHash<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>>,WTF::HashMap<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>,unsigned int,WTF::DefaultHash<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>>,WTF::HashTraits<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>>>::rehash(a2, v27, v16);
      v16 = result;
      v23 = *a2;
      if (*a2)
        v26 = *(unsigned int *)(v23 - 4);
      else
        v26 = 0;
      goto LABEL_35;
    }
LABEL_26:
    v27 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
    goto LABEL_31;
  }
LABEL_35:
  v29 = v23 + 16 * v26;
  v28 = 1;
LABEL_36:
  *(_QWORD *)v7 = v16;
  *((_QWORD *)v7 + 1) = v29;
  *((_BYTE *)v7 + 16) = v28;
  return result;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>,unsigned int>>,WTF::DefaultHash<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>>,WTF::HashMap<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>,unsigned int,WTF::DefaultHash<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>>,WTF::HashTraits<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::LocalDOMWindow,WTF::RawPtrTraits<WebCore::LocalDOMWindow>,WTF::DefaultRefDerefTraits<WebCore::LocalDOMWindow>>>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (_QWORD *)(v6 + 16 * v11);
      v14 = (_DWORD *)*v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = ((unint64_t)v14 + ~((_QWORD)v14 << 32)) ^ (((unint64_t)v14 + ~((_QWORD)v14 << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 16 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = v15 + 16 * v22;
          *(_QWORD *)v24 = 0;
          v25 = (_DWORD *)*v13;
          *v13 = 0;
          *(_QWORD *)v24 = v25;
          *(_DWORD *)(v24 + 8) = *(_DWORD *)(v6 + 16 * v11 + 8);
          v26 = (_DWORD *)*v13;
          *v13 = 0;
          if (v26)
          {
            if (v26[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 72))(v26);
            else
              --v26[6];
          }
          if (v13 == a3)
            v12 = v24;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

void std::__function::__func<WebCore::DragController::tryDHTMLDrag(WebCore::LocalFrame &,WebCore::DragData const&,std::optional<WebCore::DragOperation> &)::$_0,std::allocator<WebCore::DragController::tryDHTMLDrag(WebCore::LocalFrame &,WebCore::DragData const&,std::optional<WebCore::DragOperation> &)::$_0>,std::unique_ptr<WebCore::Pasteboard> ()(void)>::~__func()
{
  JUMPOUT(0x19AEA7644);
}

_QWORD *std::__function::__func<WebCore::DragController::tryDHTMLDrag(WebCore::LocalFrame &,WebCore::DragData const&,std::optional<WebCore::DragOperation> &)::$_0,std::allocator<WebCore::DragController::tryDHTMLDrag(WebCore::LocalFrame &,WebCore::DragData const&,std::optional<WebCore::DragOperation> &)::$_0>,std::unique_ptr<WebCore::Pasteboard> ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E33FE8E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<WebCore::DragController::tryDHTMLDrag(WebCore::LocalFrame &,WebCore::DragData const&,std::optional<WebCore::DragOperation> &)::$_0,std::allocator<WebCore::DragController::tryDHTMLDrag(WebCore::LocalFrame &,WebCore::DragData const&,std::optional<WebCore::DragOperation> &)::$_0>,std::unique_ptr<WebCore::Pasteboard> ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E33FE8E8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<WebCore::DragController::tryDHTMLDrag(WebCore::LocalFrame &,WebCore::DragData const&,std::optional<WebCore::DragOperation> &)::$_0,std::allocator<WebCore::DragController::tryDHTMLDrag(WebCore::LocalFrame &,WebCore::DragData const&,std::optional<WebCore::DragOperation> &)::$_0>,std::unique_ptr<WebCore::Pasteboard> ()(void)>::operator()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return WebCore::Pasteboard::create(*(WebCore::Pasteboard **)(a1 + 8), a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DragController::finalizeDroppedImagePlaceholder(WebCore::HTMLImageElement &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E33FE930;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DragController::finalizeDroppedImagePlaceholder(WebCore::HTMLImageElement &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E33FE930;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DragController::finalizeDroppedImagePlaceholder(WebCore::HTMLImageElement &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  WebCore::Element *v2;
  uint64_t v3;

  v2 = *(WebCore::Element **)(a1 + 16);
  if (*((_BYTE *)v2 + 265))
  {
    WebCore::Element::removeAttribute(v2, (const WebCore::QualifiedName *)&WebCore::HTMLNames::heightAttr);
    WebCore::StyledElement::removeInlineStyleProperty(*(WebCore::StyledElement **)(a1 + 16), (WTF::StringImpl *)0x3D);
  }
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF::StringImpl **v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorTypeOperations<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl ***)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 24 * v3));
  v4 = *(WTF::StringImpl ***)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

WTF::StringImpl **WTF::VectorTypeOperations<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::destruct(WTF::StringImpl **result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;

  if (result != (WTF::StringImpl **)a2)
  {
    v3 = result;
    do
    {
      v4 = *((unsigned int *)v3 + 5);
      v5 = v3[1];
      if ((_DWORD)v4)
      {
        v6 = 8 * v4;
        do
        {
          result = *(WTF::StringImpl ***)v5;
          if (*(_QWORD *)v5)
            result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(result, a2);
          v5 = (WTF *)((char *)v5 + 8);
          v6 -= 8;
        }
        while (v6);
        v5 = v3[1];
      }
      if (v5)
      {
        v3[1] = 0;
        *((_DWORD *)v3 + 4) = 0;
        result = (WTF::StringImpl **)WTF::fastFree(v5, a2);
      }
      v3 += 3;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

WTF::StringImpl **WTF::VectorTypeOperations<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::destruct(WTF::StringImpl **result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;

  if (result != (WTF::StringImpl **)a2)
  {
    v3 = result;
    do
    {
      v4 = *((unsigned int *)v3 + 3);
      v5 = *v3;
      if ((_DWORD)v4)
      {
        v6 = 8 * v4;
        do
        {
          result = *(WTF::StringImpl ***)v5;
          if (*(_QWORD *)v5)
            result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(result, a2);
          v5 = (WTF *)((char *)v5 + 8);
          v6 -= 8;
        }
        while (v6);
        v5 = *v3;
      }
      if (v5)
      {
        *v3 = 0;
        *((_DWORD *)v3 + 2) = 0;
        result = (WTF::StringImpl **)WTF::fastFree(v5, a2);
      }
      v3 += 2;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WheelEventTestMonitor,(WTF::DestructionThread)0>(unsigned __int8 *this, void *a2)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](this);
LABEL_5:
  v4 = *((_QWORD *)v2 + 1);
  v5 = v4 - 1;
  *((_QWORD *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    v11 = *((_QWORD *)v2 + 2);
    v6 = (WTF *)*((_QWORD *)v2 + 3);
    *((_QWORD *)v2 + 3) = 0;
    v7 = v11 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr(v2);
  if (v8 != 1)
  {
    __clrex();
LABEL_12:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v5)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, v2))
    goto LABEL_12;
  if (v5)
    return this;
LABEL_13:
  if (v6)
  {
    v9 = *((_QWORD *)v6 + 4);
    if (v9)
      WTF::fastFree((WTF *)(v9 - 16), a2);
    v10 = *((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    this = (unsigned __int8 *)WTF::fastFree(v6, a2);
  }
  if (!v7)
    return (unsigned __int8 *)WTF::fastFree((WTF *)v2, a2);
  return this;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::ElementTargetingController::*&)(void),WebCore::ElementTargetingController*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WebCore::Timer::Timer<WebCore::ElementTargetingController,WebCore::ElementTargetingController>(uint64_t a1, uint64_t a2)
{
  unint64_t StatusReg;
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v7;

  *(_QWORD *)a1 = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v5 = *(unsigned int **)(StatusReg + 736);
  if (!v5)
    v5 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = off_1E31F7378;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = off_1E33FE958;
  v7[1] = WebCore::ElementTargetingController::selectorBasedVisibilityAdjustmentTimerFired;
  v7[2] = 0;
  v7[3] = a2;
  *(_QWORD *)(a1 + 48) = v7;
  return a1;
}

uint64_t *WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>(uint64_t a1, unint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *result;
  *result = 0;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ElementTargetingController::findTargets(WebCore::TargetedElementRequest &&)::$_0,WebCore::ElementTargetingController::findTargets(WebCore::TargetedElementRequest &)::$_1,WebCore::ElementTargetingController::findTargets(WebCore::TargetedElementRequest &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::FloatPoint,WTF::String,WTF::Vector<WTF::HashSet<std::__variant_detail::_Trait,WTF::DefaultHash<std::__variant_detail::_Trait>,WTF::HashTraits<std::__variant_detail::_Trait>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  WebCore::Widget *v12;
  int v13;
  __n128 v14;
  unsigned int v15;
  float v16;
  float v17;
  double v18;
  int v19;
  double v20;
  int v21;
  WTF *v22;
  void *v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  WTF *v34;
  void *v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  char v39;
  _QWORD v40[4];
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  __int16 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 25);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 8);
  v58 = *a2;
  if (!v5 || (v6 = *(_QWORD *)(v5 + 8)) == 0)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    return;
  }
  ++*(_DWORD *)v6;
  v7 = *(_QWORD *)(v6 + 160);
  if (v7)
    v8 = *(_BYTE *)(v7 + 144) == 0;
  else
    v8 = 0;
  if (v8)
  {
    v9 = (unsigned int *)(v7 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    v11 = *(_QWORD *)(v7 + 296);
    if (v11)
    {
      *(_DWORD *)(v11 + 24) += 2;
      v12 = *(WebCore::Widget **)(v7 + 288);
      if (v12)
      {
        ++*((_DWORD *)v12 + 2);
        if (v4)
          v13 = 98577;
        else
          v13 = 98561;
        v14.n128_f32[0] = WebCore::Widget::convertFromRootView(v12, (const WebCore::FloatPoint *)&v58);
        v40[0] = __PAIR64__(v15, v14.n128_u32[0]);
        WebCore::ScrollView::viewToContents(v12, (const WebCore::FloatPoint *)v40, v14);
        v18 = v17 * 64.0;
        if (v18 >= 2147483650.0)
        {
          v19 = 0x7FFFFFFF;
        }
        else if (v18 <= -2147483650.0)
        {
          v19 = 0x80000000;
        }
        else
        {
          v19 = (int)v18;
        }
        v20 = v16 * 64.0;
        if (v20 >= 2147483650.0)
        {
          v21 = 0x7FFFFFFF;
        }
        else if (v20 <= -2147483650.0)
        {
          v21 = 0x80000000;
        }
        else
        {
          v21 = (int)v20;
        }
        LODWORD(v40[0]) = v19;
        HIDWORD(v40[0]) = v21;
        v40[1] = v19 & 0xFFFFFFC0 | ((unint64_t)((v21 & 0xFFFFFFC0) >> 6) << 38);
        v40[2] = 0x4000000040;
        v40[3] = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v21, v19)), (float32x2_t)vdup_n_s32(0x3C800000u));
        v41 = (float)(int)(v19 & 0xFFFFFFC0) * 0.015625;
        v42 = (float)(int)(v21 & 0xFFFFFFC0) * 0.015625;
        v43 = v41 + 1.0;
        v44 = v42;
        v45 = v41 + 1.0;
        v46 = v42 + 1.0;
        v47 = v41;
        v48 = v42 + 1.0;
        v49 = 256;
        v50 = 0;
        v51 = 0;
        v57 = 0;
        v52 = v40[0];
        v53 = 0;
        v56 = 0;
        v54 = 0;
        v55 = 0;
        v38 = v13;
        v39 = 1;
        WebCore::Document::hitTest(v11, &v38, (WebCore::HitTestingTransformState *)v40, (uint64_t)v40);
        v22 = WebCore::HitTestResult::listBasedTestResult((WebCore::HitTestResult *)v40);
        v24 = v22;
        if (*(_QWORD *)v22)
        {
          v25 = *(unsigned int *)(*(_QWORD *)v22 - 12);
          if ((_DWORD)v25)
          {
            if (v25 >> 29)
            {
              __break(0xC471u);
              return;
            }
            v26 = WTF::fastMalloc((WTF *)(8 * v25));
          }
          else
          {
            v26 = 0;
          }
        }
        else
        {
          v26 = 0;
          LODWORD(v25) = 0;
        }
        v27 = (_QWORD *)*((_QWORD *)v24 + 1);
        if (v27)
        {
          v28 = 0;
          do
          {
            v29 = *v27;
            *(_DWORD *)(v29 + 24) = *(_DWORD *)(*v27 + 24) + 2;
            v30 = v28 + 1;
            *(_QWORD *)(v26 + 8 * v28) = v29;
            v27 = (_QWORD *)v27[2];
            ++v28;
          }
          while (v27);
        }
        else
        {
          v30 = 0;
        }
        v31 = v51;
        if (v51
          && ((*(_WORD *)(v51 + 28) & 8) != 0 || (v31 = *(_QWORD *)(v51 + 32)) != 0 && (*(_WORD *)(v31 + 28) & 8) != 0))
        {
          *(_QWORD *)a3 = v26;
          *(_DWORD *)(a3 + 8) = v25;
          *(_DWORD *)(a3 + 12) = v30;
          *(_DWORD *)(v31 + 24) += 2;
        }
        else
        {
          v31 = 0;
          *(_QWORD *)a3 = v26;
          *(_DWORD *)(a3 + 8) = v25;
          *(_DWORD *)(a3 + 12) = v30;
        }
        *(_QWORD *)(a3 + 16) = v31;
        WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v40, v23);
        if (*((_DWORD *)v12 + 2) == 1)
          (*(void (**)(WebCore::Widget *))(*(_QWORD *)v12 + 8))(v12);
        else
          --*((_DWORD *)v12 + 2);
      }
      else
      {
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
      }
      if (*(_DWORD *)(v11 + 24) == 2)
      {
        if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
      }
      else
      {
        *(_DWORD *)(v11 + 24) -= 2;
      }
    }
    else
    {
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
    }
    do
    {
      v32 = __ldaxr(v9);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v9));
    if (!v33)
    {
      atomic_store(1u, v9);
      v36 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v36 = off_1E31FE290;
      v36[1] = v9;
      v40[0] = v36;
      WTF::ensureOnMainThread();
      v37 = v40[0];
      v40[0] = 0;
      if (v37)
        (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
    }
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  if (*(_DWORD *)v6 == 1)
  {
    WebCore::Page::~Page(v6);
    WTF::fastFree(v34, v35);
  }
  else
  {
    --*(_DWORD *)v6;
  }
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ElementTargetingController::findTargets(WebCore::TargetedElementRequest &&)::$_0,WebCore::ElementTargetingController::findTargets(WebCore::TargetedElementRequest &)::$_1,WebCore::ElementTargetingController::findTargets(WebCore::TargetedElementRequest &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::FloatPoint,WTF::String,WTF::Vector<WTF::HashSet<std::__variant_detail::_Trait,WTF::DefaultHash<std::__variant_detail::_Trait>,WTF::HashTraits<std::__variant_detail::_Trait>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>@<X0>(uint64_t a1@<X0>, WebCore::ContainerNode *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *result;
  void *v6;
  const WTF::String *v7;
  WebCore::Node *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unsigned int *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int *v24;
  void *v25;
  unsigned int *v26;
  WebCore::Node *v27;
  WebCore::Node *v28;

  result = (unsigned int *)WebCore::ElementTargetingController::mainDocument(&v28, *(_QWORD *)(**(_QWORD **)a1 + 8));
  if (!v28)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    return result;
  }
  v8 = (WebCore::Node *)*((_QWORD *)v28 + 159);
  if (v8)
  {
    *((_DWORD *)v8 + 6) += 2;
    v9 = WebCore::searchForElementContainingText(v8, a2, v7);
    if (v9)
    {
      v10 = v9;
      *(_DWORD *)(v9 + 24) += 2;
      if (!WebCore::Document::isTopDocument(*(WebCore::Document **)(*(_QWORD *)(v9 + 40) + 8)))
      {
        do
        {
          v16 = v10;
          v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 40) + 8) + 528);
          if (v17 && (v18 = *(_QWORD *)(v17 + 8)) != 0 && (v19 = *(_QWORD *)(v18 + 120)) != 0)
          {
            v10 = *(_QWORD *)(v19 + 8);
            if (v10)
              *(_DWORD *)(v10 + 24) += 2;
          }
          else
          {
            v10 = 0;
          }
          if (*(_DWORD *)(v16 + 24) == 2)
          {
            if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v16, v11);
          }
          else
          {
            *(_DWORD *)(v16 + 24) -= 2;
          }
        }
        while (!WebCore::Document::isTopDocument(*(WebCore::Document **)(*(_QWORD *)(v10 + 40) + 8)));
      }
      v27 = v8;
      result = (unsigned int *)WTF::fastMalloc((WTF *)0x80);
      v12 = result;
      *(_DWORD *)(v10 + 24) += 2;
      *(_QWORD *)result = v10;
      v13 = *(_QWORD *)(v10 + 32);
      if (v13 && (*(_WORD *)(v13 + 28) & 8) != 0)
      {
        v20 = 2;
        LODWORD(v15) = 16;
        while (1)
        {
          v14 = v20;
          v21 = (v20 - 1);
          if ((_DWORD)v21 == (_DWORD)v15)
          {
            v22 = v21 + (v21 >> 2);
            if (v22 >= 0x10)
              v23 = v22 + 1;
            else
              v23 = 16;
            if (v23 <= v21 + 1)
              v15 = v21 + 1;
            else
              v15 = v23;
            if (v15 >> 29)
            {
              __break(0xC471u);
              return result;
            }
            v24 = (unsigned int *)WTF::fastMalloc((WTF *)(8 * v15));
            memcpy(v24, v12, 8 * v21);
            if (v24 == v12)
              v26 = 0;
            else
              v26 = v24;
            if (v24 == v12)
              LODWORD(v15) = 0;
            result = (unsigned int *)WTF::fastFree((WTF *)v12, v25);
            v12 = v24;
          }
          else
          {
            v26 = v12;
          }
          *(_DWORD *)(v13 + 24) += 2;
          *(_QWORD *)&v26[2 * v21] = v13;
          v13 = *(_QWORD *)(v13 + 32);
          if (v13)
          {
            v20 = v14 + 1;
            if ((*(_WORD *)(v13 + 28) & 8) != 0)
              continue;
          }
          goto LABEL_39;
        }
      }
      v14 = 1;
      LODWORD(v15) = 16;
LABEL_39:
      *(_QWORD *)a3 = v12;
      *(_DWORD *)(a3 + 8) = v15;
      *(_DWORD *)(a3 + 12) = v14;
      *(_QWORD *)(a3 + 16) = v10;
      v8 = v27;
    }
    else
    {
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
    }
    if (*((_DWORD *)v8 + 6) == 2)
    {
      if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v8, v6);
    }
    else
    {
      *((_DWORD *)v8 + 6) -= 2;
    }
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  result = (unsigned int *)v28;
  if (v28)
  {
    if (*((_DWORD *)v28 + 6) == 2)
    {
      if ((*((_WORD *)v28 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(v28, v6);
    }
    else
    {
      *((_DWORD *)v28 + 6) -= 2;
    }
  }
  return result;
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ElementTargetingController::findTargets(WebCore::TargetedElementRequest &&)::$_0,WebCore::ElementTargetingController::findTargets(WebCore::TargetedElementRequest &)::$_1,WebCore::ElementTargetingController::findTargets(WebCore::TargetedElementRequest &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::FloatPoint,WTF::String,WTF::Vector<WTF::HashSet<std::__variant_detail::_Trait,WTF::DefaultHash<std::__variant_detail::_Trait>,WTF::HashTraits<std::__variant_detail::_Trait>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  int v8;
  unsigned int *result;
  uint64_t v10;
  WTF::StringImpl *v11;

  WebCore::ElementTargetingController::findElementFromSelectors((unsigned int *)&v10, *(_QWORD *)(*(_QWORD *)a1 + 24), a2);
  v5 = v10;
  if (v10)
  {
    *(_DWORD *)(v10 + 24) += 2;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    v7 = *(_DWORD *)(v5 + 24);
    *v6 = v5;
    *a3 = v6;
    a3[1] = 0x100000001;
    *(_DWORD *)(v5 + 24) = v7 + 4;
    a3[2] = v5;
    v8 = v7 + 2;
    if (v8)
    {
      *(_DWORD *)(v5 + 24) = v8;
    }
    else if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v4);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  result = (unsigned int *)v11;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      result = (unsigned int *)WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v4);
      if (!v5)
        return result;
      goto LABEL_9;
    }
    *(_DWORD *)v11 -= 2;
  }
  if (!v5)
    return result;
LABEL_9:
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v5, v4);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return result;
}

unint64_t WTF::Vector<WebCore::TargetedElementInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 176 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::TargetedElementInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::TargetedElementInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::TargetedElementInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x1745D18)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = *(_DWORD *)(result + 12);
      v5 = 176 * a2;
      result = WTF::fastMalloc((WTF *)(176 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0xB0;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        result = (uint64_t)v3;
        do
        {
          v8 = *(_OWORD *)result;
          v9 = *(_OWORD *)(result + 16);
          v10 = *(_OWORD *)(result + 32);
          *(_DWORD *)(v7 + 48) = *(_DWORD *)(result + 48);
          *(_OWORD *)(v7 + 16) = v9;
          *(_OWORD *)(v7 + 32) = v10;
          *(_OWORD *)v7 = v8;
          v11 = *(_QWORD *)(result + 56);
          *(_QWORD *)(result + 56) = 0;
          *(_QWORD *)(v7 + 56) = v11;
          v12 = *(_QWORD *)(result + 64);
          *(_QWORD *)(result + 64) = 0;
          *(_QWORD *)(v7 + 64) = v12;
          v13 = *(_QWORD *)(result + 72);
          *(_QWORD *)(result + 72) = 0;
          *(_QWORD *)(v7 + 80) = 0;
          *(_QWORD *)(v7 + 88) = 0;
          *(_QWORD *)(v7 + 72) = v13;
          v14 = *(_QWORD *)(result + 80);
          *(_QWORD *)(result + 80) = 0;
          *(_QWORD *)(v7 + 80) = v14;
          LODWORD(v14) = *(_DWORD *)(result + 88);
          *(_DWORD *)(result + 88) = 0;
          *(_DWORD *)(v7 + 88) = v14;
          LODWORD(v14) = *(_DWORD *)(result + 92);
          *(_DWORD *)(result + 92) = 0;
          *(_DWORD *)(v7 + 92) = v14;
          v15 = *(_OWORD *)(result + 96);
          v16 = *(_OWORD *)(result + 112);
          *(_BYTE *)(v7 + 128) = *(_BYTE *)(result + 128);
          *(_OWORD *)(v7 + 96) = v15;
          *(_OWORD *)(v7 + 112) = v16;
          *(_QWORD *)(v7 + 136) = 0;
          *(_QWORD *)(v7 + 144) = 0;
          v17 = *(_QWORD *)(result + 136);
          *(_QWORD *)(result + 136) = 0;
          *(_QWORD *)(v7 + 136) = v17;
          LODWORD(v17) = *(_DWORD *)(result + 144);
          *(_DWORD *)(result + 144) = 0;
          *(_DWORD *)(v7 + 144) = v17;
          LODWORD(v17) = *(_DWORD *)(result + 148);
          *(_DWORD *)(result + 148) = 0;
          *(_DWORD *)(v7 + 148) = v17;
          *(_QWORD *)(v7 + 152) = 0;
          v18 = *(_QWORD *)(result + 152);
          *(_QWORD *)(result + 152) = 0;
          *(_QWORD *)(v7 + 152) = v18;
          LODWORD(v18) = *(_DWORD *)(result + 160);
          *(_WORD *)(v7 + 164) = *(_WORD *)(result + 164);
          *(_DWORD *)(v7 + 160) = v18;
          WebCore::TargetedElementInfo::~TargetedElementInfo((WebCore::TargetedElementInfo *)result, v6);
          result = v19 + 176;
          v7 += 176;
        }
        while ((WTF *)result != (WTF *)((char *)v3 + 176 * v4));
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

unint64_t WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = *(_DWORD *)(result + 12);
      v5 = 24 * a2;
      result = WTF::fastMalloc((WTF *)(24 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        v8 = (WTF *)((char *)v3 + 24 * v4);
        v9 = v3;
        do
        {
          v10 = *(_QWORD *)v9;
          *(_QWORD *)(v7 + 8) = 0;
          *(_QWORD *)(v7 + 16) = 0;
          *(_QWORD *)v7 = v10;
          v11 = *((_QWORD *)v9 + 1);
          *((_QWORD *)v9 + 1) = 0;
          *(_QWORD *)(v7 + 8) = v11;
          LODWORD(v11) = *((_DWORD *)v9 + 4);
          *((_DWORD *)v9 + 4) = 0;
          *(_DWORD *)(v7 + 16) = v11;
          LODWORD(v11) = *((_DWORD *)v9 + 5);
          *((_DWORD *)v9 + 5) = 0;
          *(_DWORD *)(v7 + 20) = v11;
          v12 = *((unsigned int *)v9 + 5);
          v13 = (WTF *)*((_QWORD *)v9 + 1);
          if ((_DWORD)v12)
          {
            v14 = 8 * v12;
            do
            {
              result = *(_QWORD *)v13;
              if (*(_QWORD *)v13)
                result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)result, v6);
              v13 = (WTF *)((char *)v13 + 8);
              v14 -= 8;
            }
            while (v14);
            v13 = (WTF *)*((_QWORD *)v9 + 1);
          }
          if (v13)
          {
            *((_QWORD *)v9 + 1) = 0;
            *((_DWORD *)v9 + 4) = 0;
            result = WTF::fastFree(v13, v6);
          }
          v7 += 24;
          v9 = (WTF *)((char *)v9 + 24);
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(uint64_t result, WTF::StringImpl *a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;

  v2 = (int)a2;
  v3 = result;
  v4 = *(unsigned int *)(result + 12);
  if ((WTF::StringImpl *)v4 != a2)
  {
    v5 = *(_QWORD *)result + 16 * v4;
    v6 = *(_QWORD *)result + 16 * (_QWORD)a2;
    do
    {
      v7 = *(unsigned int *)(v6 + 12);
      v8 = *(WTF **)v6;
      if ((_DWORD)v7)
      {
        v9 = 8 * v7;
        do
        {
          result = *(_QWORD *)v8;
          if (*(_QWORD *)v8)
            result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)result, a2);
          v8 = (WTF *)((char *)v8 + 8);
          v9 -= 8;
        }
        while (v9);
        v8 = *(WTF **)v6;
      }
      if (v8)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
        result = WTF::fastFree(v8, a2);
      }
      v6 += 16;
    }
    while (v6 != v5);
  }
  *(_DWORD *)(v3 + 12) = v2;
  return result;
}

uint64_t WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;

  if (*(_DWORD *)(result + 8))
  {
    v2 = result;
    v3 = *(unsigned int *)(result + 12);
    v4 = *(WTF::StringImpl **)result;
    if ((_DWORD)v3)
    {
      v5 = (WTF::StringImpl *)((char *)v4 + 16 * v3);
      do
      {
        v6 = *((unsigned int *)v4 + 3);
        v7 = *(WTF **)v4;
        if ((_DWORD)v6)
        {
          v8 = 8 * v6;
          do
          {
            result = *(_QWORD *)v7;
            if (*(_QWORD *)v7)
              result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)result, a2);
            v7 = (WTF *)((char *)v7 + 8);
            v8 -= 8;
          }
          while (v8);
          v7 = *(WTF **)v4;
        }
        if (v7)
        {
          *(_QWORD *)v4 = 0;
          *((_DWORD *)v4 + 2) = 0;
          result = WTF::fastFree(v7, a2);
        }
        v4 = (WTF::StringImpl *)((char *)v4 + 16);
      }
      while (v4 != v5);
      *(_DWORD *)(v2 + 12) = 0;
      v4 = *(WTF::StringImpl **)v2;
    }
    if (v4)
    {
      *(_QWORD *)v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      return WTF::fastFree(v4, a2);
    }
  }
  return result;
}

uint64_t WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  WTF *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;

  if (*(unsigned int *)(result + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = (WTF *)((char *)v4 + 16 * v5);
        v9 = v4;
        do
        {
          *(_QWORD *)v7 = 0;
          *(_QWORD *)(v7 + 8) = 0;
          v10 = *(WTF **)v9;
          *(_QWORD *)v9 = 0;
          *(_QWORD *)v7 = v10;
          LODWORD(v10) = *((_DWORD *)v9 + 2);
          *((_DWORD *)v9 + 2) = 0;
          *(_DWORD *)(v7 + 8) = (_DWORD)v10;
          LODWORD(v10) = *((_DWORD *)v9 + 3);
          *((_DWORD *)v9 + 3) = 0;
          *(_DWORD *)(v7 + 12) = (_DWORD)v10;
          v11 = *((unsigned int *)v9 + 3);
          v12 = *(WTF **)v9;
          if ((_DWORD)v11)
          {
            v13 = 8 * v11;
            do
            {
              result = *(_QWORD *)v12;
              if (*(_QWORD *)v12)
                result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)result, v6);
              v12 = (WTF *)((char *)v12 + 8);
              v13 -= 8;
            }
            while (v13);
            v12 = *(WTF **)v9;
          }
          if (v12)
          {
            *(_QWORD *)v9 = 0;
            *((_DWORD *)v9 + 2) = 0;
            result = WTF::fastFree(v12, v6);
          }
          v7 += 16;
          v9 = (WTF *)((char *)v9 + 16);
        }
        while (v9 != v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  _QWORD **v7;
  uint64_t v8;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 29))
  {
    v5 = (uint64_t *)WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    v6 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6)
    {
      v7 = *(_QWORD ***)a2;
      v8 = 8 * v6;
      do
      {
        v5 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(v5, v7++)+ 1;
        v8 -= 8;
      }
      while (v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::unsafeAppendWithoutCapacityCheck(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)result + 24 * *(unsigned int *)(result + 12);
  v3 = *a2;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)v2 = v3;
  v4 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(v2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = 0;
  *(_DWORD *)(v2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = 0;
  *(_DWORD *)(v2 + 20) = v4;
  ++*(_DWORD *)(result + 12);
  return result;
}

WTF::StringImpl **WTF::VectorMover<false,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::moveOverlapping(WTF::StringImpl **result, WTF::StringImpl *a2, unint64_t a3)
{
  unint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl **v5;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;

  v3 = a3;
  v4 = a2;
  v5 = result;
  if ((unint64_t)result <= a3)
  {
    if (a2 != (WTF::StringImpl *)result)
    {
      v10 = a3 + a2 - (WTF::StringImpl *)result;
      v11 = a2;
      do
      {
        *(_QWORD *)(v10 - 16) = 0;
        *(_QWORD *)(v10 - 8) = 0;
        v10 -= 16;
        v12 = *((_QWORD *)v11 - 2);
        v11 = (WTF::StringImpl *)((char *)v11 - 16);
        *(_QWORD *)v11 = 0;
        *(_QWORD *)v10 = v12;
        v13 = *((_DWORD *)v11 + 2);
        *((_DWORD *)v11 + 2) = 0;
        *(_DWORD *)(v10 + 8) = v13;
        v14 = *((_DWORD *)v11 + 3);
        *((_DWORD *)v11 + 3) = 0;
        *(_DWORD *)(v10 + 12) = v14;
        v15 = *((unsigned int *)v11 + 3);
        v16 = *(WTF **)v11;
        if ((_DWORD)v15)
        {
          v17 = 8 * v15;
          do
          {
            result = *(WTF::StringImpl ***)v16;
            if (*(_QWORD *)v16)
              result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(result, a2);
            v16 = (WTF *)((char *)v16 + 8);
            v17 -= 8;
          }
          while (v17);
          v16 = *(WTF **)v11;
        }
        if (v16)
        {
          *((_QWORD *)v4 - 2) = 0;
          *((_DWORD *)v4 - 2) = 0;
          result = (WTF::StringImpl **)WTF::fastFree(v16, a2);
        }
        v4 = v11;
      }
      while (v11 != (WTF::StringImpl *)v5);
    }
  }
  else
  {
    while (v5 != (WTF::StringImpl **)v4)
    {
      *(_QWORD *)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
      v6 = *v5;
      *v5 = 0;
      *(_QWORD *)v3 = v6;
      LODWORD(v6) = *((_DWORD *)v5 + 2);
      *((_DWORD *)v5 + 2) = 0;
      *(_DWORD *)(v3 + 8) = (_DWORD)v6;
      LODWORD(v6) = *((_DWORD *)v5 + 3);
      *((_DWORD *)v5 + 3) = 0;
      *(_DWORD *)(v3 + 12) = (_DWORD)v6;
      v7 = *((unsigned int *)v5 + 3);
      v8 = *v5;
      if ((_DWORD)v7)
      {
        v9 = 8 * v7;
        do
        {
          result = *(WTF::StringImpl ***)v8;
          if (*(_QWORD *)v8)
            result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(result, a2);
          v8 = (WTF *)((char *)v8 + 8);
          v9 -= 8;
        }
        while (v9);
        v8 = *v5;
      }
      if (v8)
      {
        *v5 = 0;
        *((_DWORD *)v5 + 2) = 0;
        result = (WTF::StringImpl **)WTF::fastFree(v8, a2);
      }
      v3 += 16;
      v5 += 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ElementTargetingController::dispatchVisibilityAdjustmentStateDidChange(void)::$_0,void,WebCore::Document &>::call(int a1, WebCore::Document *this)
{
  return WebCore::Document::visibilityAdjustmentStateDidChange(this);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::EventHandler::*&)(void),WebCore::EventHandler*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::EventSource::scheduleInitialConnect(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a1[1];
  *a1 = &off_1E33FE9F8;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::EventSource::scheduleInitialConnect(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33FE9F8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::EventSource::scheduleInitialConnect(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  WebCore::EventSource *v2;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    v2 = *(WebCore::EventSource **)(v1 + 8);
    if (v2)
    {
      ++*((_DWORD *)v2 + 6);
      WebCore::EventSource::connect(v2);
      if (*((_DWORD *)v2 + 6) == 1)
        (*(void (**)(WebCore::EventSource *))(*(_QWORD *)v2 + 72))(v2);
      else
        --*((_DWORD *)v2 + 6);
    }
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::EventSource::scheduleReconnect(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a1[1];
  *a1 = &off_1E33FEA20;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::EventSource::scheduleReconnect(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33FEA20;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::EventSource::scheduleReconnect(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  WebCore::EventSource *v2;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    v2 = *(WebCore::EventSource **)(v1 + 8);
    if (v2)
    {
      ++*((_DWORD *)v2 + 6);
      WebCore::EventSource::connect(v2);
      if (*((_DWORD *)v2 + 6) == 1)
        (*(void (**)(WebCore::EventSource *))(*(_QWORD *)v2 + 72))(v2);
      else
        --*((_DWORD *)v2 + 6);
    }
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::EventSource::resume(void)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v3;
  uint64_t v5;

  *a1 = &off_1E33FEA48;
  v3 = (WTF *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v5 + 72);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v5 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
      else
        --*(_DWORD *)(v5 + 24);
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::EventSource::resume(void)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  uint64_t v5;

  *(_QWORD *)this = &off_1E33FEA48;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v5 + 72);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v5 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
      else
        --*(_DWORD *)(v5 + 24);
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return WTF::fastFree(this, a2);
}

WebCore::EventSource *WTF::Detail::CallableWrapper<WebCore::EventSource::resume(void)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  WebCore::EventSource *result;
  uint64_t v2;
  uint64_t v3;

  result = *(WebCore::EventSource **)(a1 + 8);
  v2 = *((_QWORD *)result + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (!*(_BYTE *)(v3 + 180))
        return (WebCore::EventSource *)WebCore::EventSource::scheduleReconnect(result);
    }
  }
  return result;
}

uint64_t WebCore::isFocusScopeOwner(WebCore *this, const WebCore::Element *a2)
{
  uint64_t v4;
  uint64_t v6;
  WebCore::Node *v7;
  void *v8;
  char v9;
  int v10;
  void *v11;
  char v12;

  if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0 && *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x58))
  {
    if ((*((_WORD *)this + 14) & 0x10) == 0)
      return 1;
    *((_DWORD *)this + 6) += 2;
    v10 = (*(uint64_t (**)(WebCore *, const WebCore::Element *))(*(_QWORD *)this + 1152))(this, a2);
    v12 = v10;
    if (*((_DWORD *)this + 6) == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) != 0)
      {
        if (!v10)
          return 1;
      }
      else
      {
        WebCore::Node::removedLastRef(this, v11);
        if ((v12 & 1) == 0)
          return 1;
      }
    }
    else
    {
      *((_DWORD *)this + 6) -= 2;
      if ((v10 & 1) == 0)
        return 1;
    }
  }
  if ((*((_WORD *)this + 14) & 0x10) == 0
    || *(_QWORD *)(*((_QWORD *)this + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::slotTag + 24))
  {
    return 0;
  }
  v4 = **((_QWORD **)this + 5);
  if (v4 && (*(_WORD *)(v4 + 28) & 0x80) != 0)
  {
    v6 = *(_QWORD *)(v4 + 200);
    if (v6)
    {
      v7 = *(WebCore::Node **)(v6 + 8);
      if (v7)
      {
        if ((*((_WORD *)v7 + 14) & 0x10) != 0)
        {
          *((_DWORD *)v7 + 6) += 2;
          v9 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v7 + 1152))(v7);
          if (*((_DWORD *)v7 + 6) == 2)
          {
            if ((*((_WORD *)v7 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v7, v8);
          }
          else
          {
            *((_DWORD *)v7 + 6) -= 2;
          }
          if ((v9 & 1) != 0)
            return 0;
        }
      }
    }
  }
  return 1;
}

uint64_t WebCore::FocusNavigationScope::lastChildInScope(WebCore::FocusNavigationScope *this, const WebCore::Node *a2)
{
  char isFocusScopeOwner;
  int v4;
  uint64_t v5;
  int v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;

  if ((*((_WORD *)this + 14) & 8) == 0)
  {
LABEL_8:
    if ((*((_WORD *)this + 14) & 4) == 0)
      return 0;
    v5 = *((_QWORD *)this + 11);
    if (!v5)
      return v5;
    while (1)
    {
      if ((*(_WORD *)(v5 + 28) & 0x10) == 0)
        return v5;
      v7 = *(_DWORD *)(v5 + 24);
      *(_DWORD *)(v5 + 24) = v7 + 2;
      if ((*(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL) != 0
        && (v9 = *(_QWORD *)((*(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL) + 0xE8)) != 0
        && *(_BYTE *)(v9 + 1)
        && (v10 = *(_QWORD *)(v9 + 16)) != 0)
      {
        v8 = *(_QWORD *)(v10 + 8) != 0;
        if (v7)
        {
LABEL_13:
          *(_DWORD *)(v5 + 24) = v7;
          if (!v8)
            return v5;
          goto LABEL_14;
        }
      }
      else
      {
        v8 = 0;
        if (v7)
          goto LABEL_13;
      }
      if ((*(_WORD *)(v5 + 30) & 0x400) != 0)
      {
        if (!v8)
          return v5;
      }
      else
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
        if (!v8)
          return v5;
      }
LABEL_14:
      v5 = *(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL;
      if (!v5)
        return v5;
    }
  }
  *((_DWORD *)this + 6) += 2;
  isFocusScopeOwner = WebCore::isFocusScopeOwner(this, a2);
  v4 = *((_DWORD *)this + 6) - 2;
  if ((isFocusScopeOwner & 1) == 0)
  {
    if (*((_DWORD *)this + 6) == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(this, a2);
    }
    else
    {
      *((_DWORD *)this + 6) = v4;
    }
    goto LABEL_8;
  }
  if (*((_DWORD *)this + 6) == 2)
  {
    if ((*((_WORD *)this + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(this, a2);
    return 0;
  }
  v5 = 0;
  *((_DWORD *)this + 6) = v4;
  return v5;
}

const WebCore::Node *WebCore::FocusNavigationScope::nextSiblingInScope(WebCore::FocusNavigationScope *this, const WebCore::Node *a2)
{
  const WebCore::Node *v2;
  uint64_t v3;
  uint64_t v4;
  int v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::FocusNavigationScope *v19;

  v2 = a2;
  if (!*((_QWORD *)this + 1))
    goto LABEL_5;
  v3 = *((_QWORD *)a2 + 4);
  if (!v3
    || (*(_WORD *)(v3 + 28) & 8) == 0
    || (v4 = *(_QWORD *)(v3 + 72) & 0xFFFFFFFFFFFFLL) == 0
    || (v11 = *(_QWORD *)(v4 + 88)) == 0
    || (v12 = *(_QWORD *)(v11 + 224)) == 0
    || (v19 = this,
        v13 = (*(uint64_t (**)(uint64_t, const WebCore::Node *))(*(_QWORD *)v12 + 16))(v12, a2),
        this = v19,
        v14 = *((_QWORD *)v19 + 1),
        v14 != v13))
  {
LABEL_5:
    if (*(const WebCore::Node **)this == v2 || *((_QWORD *)v2 + 7) == 0)
      return 0;
    v2 = (const WebCore::Node *)*((_QWORD *)v2 + 7);
    while (1)
    {
      if ((*((_WORD *)v2 + 14) & 0x10) == 0)
        return v2;
      v7 = *((_DWORD *)v2 + 6);
      *((_DWORD *)v2 + 6) = v7 + 2;
      if ((*((_QWORD *)v2 + 9) & 0xFFFFFFFFFFFFLL) != 0
        && (v9 = *(_QWORD *)((*((_QWORD *)v2 + 9) & 0xFFFFFFFFFFFFLL) + 0xE8)) != 0
        && *(_BYTE *)(v9 + 1)
        && (v10 = *(_QWORD *)(v9 + 16)) != 0)
      {
        v8 = *(_QWORD *)(v10 + 8) != 0;
        if (v7)
        {
LABEL_15:
          *((_DWORD *)v2 + 6) = v7;
          if (!v8)
            return v2;
          goto LABEL_16;
        }
      }
      else
      {
        v8 = 0;
        if (v7)
          goto LABEL_15;
      }
      if ((*((_WORD *)v2 + 15) & 0x400) != 0)
      {
        if (!v8)
          return v2;
      }
      else
      {
        WebCore::Node::removedLastRef(v2, a2);
        if (!v8)
          return v2;
      }
LABEL_16:
      v2 = (const WebCore::Node *)*((_QWORD *)v2 + 7);
      if (!v2)
        return v2;
    }
  }
  do
  {
    v2 = (const WebCore::Node *)*((_QWORD *)v2 + 7);
    if (!v2)
      break;
    v15 = *((_QWORD *)v2 + 4);
    if (v15
      && (*(_WORD *)(v15 + 28) & 8) != 0
      && (v16 = *(_QWORD *)(v15 + 72) & 0xFFFFFFFFFFFFLL) != 0
      && (v18 = *(_QWORD *)(v16 + 88)) != 0)
    {
      v17 = *(_QWORD *)(v18 + 224);
      if (v17)
      {
        v17 = (*(uint64_t (**)(uint64_t, const WebCore::Node *))(*(_QWORD *)v17 + 16))(v17, v2);
        v14 = *((_QWORD *)v19 + 1);
      }
    }
    else
    {
      v17 = 0;
    }
  }
  while (v14 != v17);
  return v2;
}

const WebCore::Node *WebCore::FocusNavigationScope::previousSiblingInScope(WebCore::FocusNavigationScope *this, const WebCore::Node *a2)
{
  const WebCore::Node *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::FocusNavigationScope *v18;

  v2 = a2;
  if (!*((_QWORD *)this + 1))
    goto LABEL_5;
  v3 = *((_QWORD *)a2 + 4);
  if (!v3
    || (*(_WORD *)(v3 + 28) & 8) == 0
    || (v4 = *(_QWORD *)(v3 + 72) & 0xFFFFFFFFFFFFLL) == 0
    || (v10 = *(_QWORD *)(v4 + 88)) == 0
    || (v11 = *(_QWORD *)(v10 + 224)) == 0
    || (v18 = this,
        v12 = (*(uint64_t (**)(uint64_t, const WebCore::Node *))(*(_QWORD *)v11 + 16))(v11, a2),
        this = v18,
        v13 = *((_QWORD *)v18 + 1),
        v13 != v12))
  {
LABEL_5:
    if (*(const WebCore::Node **)this == v2)
      return 0;
    while (1)
    {
      v2 = (const WebCore::Node *)(*((_QWORD *)v2 + 6) & 0xFFFFFFFFFFFFLL);
      if (!v2 || (*((_WORD *)v2 + 14) & 0x10) == 0)
        return v2;
      v5 = *((_DWORD *)v2 + 6);
      *((_DWORD *)v2 + 6) = v5 + 2;
      if ((*((_QWORD *)v2 + 9) & 0xFFFFFFFFFFFFLL) != 0
        && (v7 = *(_QWORD *)((*((_QWORD *)v2 + 9) & 0xFFFFFFFFFFFFLL) + 0xE8)) != 0
        && *(_BYTE *)(v7 + 1)
        && (v8 = *(_QWORD *)(v7 + 16)) != 0)
      {
        v6 = *(_QWORD *)(v8 + 8) != 0;
        if (!v5)
          goto LABEL_16;
LABEL_10:
        *((_DWORD *)v2 + 6) = v5;
        if (!v6)
          return v2;
      }
      else
      {
        v6 = 0;
        if (v5)
          goto LABEL_10;
LABEL_16:
        if ((*((_WORD *)v2 + 15) & 0x400) != 0)
        {
          if (!v6)
            return v2;
        }
        else
        {
          WebCore::Node::removedLastRef(v2, a2);
          if (!v6)
            return v2;
        }
      }
    }
  }
  do
  {
    v2 = (const WebCore::Node *)(*((_QWORD *)v2 + 6) & 0xFFFFFFFFFFFFLL);
    if (!v2)
      break;
    v14 = *((_QWORD *)v2 + 4);
    if (v14
      && (*(_WORD *)(v14 + 28) & 8) != 0
      && (v15 = *(_QWORD *)(v14 + 72) & 0xFFFFFFFFFFFFLL) != 0
      && (v17 = *(_QWORD *)(v15 + 88)) != 0)
    {
      v16 = *(_QWORD *)(v17 + 224);
      if (v16)
      {
        v16 = (*(uint64_t (**)(uint64_t, const WebCore::Node *))(*(_QWORD *)v16 + 16))(v16, v2);
        v13 = *((_QWORD *)v18 + 1);
      }
    }
    else
    {
      v16 = 0;
    }
  }
  while (v13 != v16);
  return v2;
}

const WebCore::Node *WebCore::FocusNavigationScope::nextInScope(WebCore::FocusNavigationScope *this, const WebCore::Node *a2)
{
  const WebCore::Node *v2;
  char isFocusScopeOwner;
  int v5;
  const WebCore::Node *SiblingInScope;
  int v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = a2;
  if ((*((_WORD *)a2 + 14) & 8) == 0)
    goto LABEL_7;
  *((_DWORD *)a2 + 6) += 2;
  isFocusScopeOwner = WebCore::isFocusScopeOwner(a2, a2);
  v5 = *((_DWORD *)v2 + 6) - 2;
  if ((isFocusScopeOwner & 1) == 0)
  {
    if (*((_DWORD *)v2 + 6) == 2)
    {
      if ((*((_WORD *)v2 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v2, a2);
    }
    else
    {
      *((_DWORD *)v2 + 6) = v5;
    }
LABEL_7:
    if ((*((_WORD *)v2 + 14) & 4) == 0)
      goto LABEL_26;
    SiblingInScope = (const WebCore::Node *)*((_QWORD *)v2 + 10);
    if (!SiblingInScope)
      goto LABEL_26;
    while (1)
    {
      if ((*((_WORD *)SiblingInScope + 14) & 0x10) == 0)
        return SiblingInScope;
      v7 = *((_DWORD *)SiblingInScope + 6);
      *((_DWORD *)SiblingInScope + 6) = v7 + 2;
      if ((*((_QWORD *)SiblingInScope + 9) & 0xFFFFFFFFFFFFLL) != 0
        && (v9 = *(_QWORD *)((*((_QWORD *)SiblingInScope + 9) & 0xFFFFFFFFFFFFLL) + 0xE8)) != 0
        && *(_BYTE *)(v9 + 1)
        && (v10 = *(_QWORD *)(v9 + 16)) != 0)
      {
        v8 = *(_QWORD *)(v10 + 8) != 0;
        if (v7)
        {
LABEL_12:
          *((_DWORD *)SiblingInScope + 6) = v7;
          if (!v8)
            return SiblingInScope;
          goto LABEL_13;
        }
      }
      else
      {
        v8 = 0;
        if (v7)
          goto LABEL_12;
      }
      if ((*((_WORD *)SiblingInScope + 15) & 0x400) != 0)
      {
        if (!v8)
          return SiblingInScope;
      }
      else
      {
        WebCore::Node::removedLastRef(SiblingInScope, a2);
        if (!v8)
          return SiblingInScope;
      }
LABEL_13:
      SiblingInScope = (const WebCore::Node *)*((_QWORD *)SiblingInScope + 7);
      if (!SiblingInScope)
        goto LABEL_26;
    }
  }
  if (*((_DWORD *)v2 + 6) == 2)
  {
    if ((*((_WORD *)v2 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v2, a2);
  }
  else
  {
    *((_DWORD *)v2 + 6) = v5;
  }
LABEL_26:
  SiblingInScope = WebCore::FocusNavigationScope::nextSiblingInScope(this, v2);
  if (!SiblingInScope)
  {
    do
    {
      if (WebCore::FocusNavigationScope::nextSiblingInScope(this, v2))
        return WebCore::FocusNavigationScope::nextSiblingInScope(this, v2);
      if (*(const WebCore::Node **)this == v2)
        break;
      v11 = *((_QWORD *)this + 1);
      if (v11)
      {
        if (*((_BYTE *)this + 16))
        {
          if (v11 == *((_QWORD *)v2 + 4))
            return 0;
        }
        else
        {
          v12 = *((_QWORD *)v2 + 4);
          if (v12)
          {
            if ((*(_WORD *)(v12 + 28) & 8) != 0)
            {
              v13 = *(_QWORD *)(v12 + 72) & 0xFFFFFFFFFFFFLL;
              if (v13)
              {
                v14 = *(_QWORD *)(v13 + 88);
                if (v14)
                {
                  v15 = *(_QWORD *)(v14 + 224);
                  if (v15)
                  {
                    if (*((_QWORD *)this + 1) == (*(uint64_t (**)(uint64_t, const WebCore::Node *))(*(_QWORD *)v15 + 16))(v15, v2))return 0;
                  }
                }
              }
            }
          }
        }
      }
      v2 = (const WebCore::Node *)*((_QWORD *)v2 + 4);
    }
    while (v2);
    return 0;
  }
  return SiblingInScope;
}

uint64_t WebCore::FocusNavigationScope::owner(WebCore::FocusNavigationScope *this, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  __int16 v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  WebCore::FocusNavigationScope *v10;
  int v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    return v2;
  v4 = *(_QWORD *)this;
  v5 = *(_WORD *)(v4 + 28);
  if (v4)
    v6 = (v5 & 0x80) == 0;
  else
    v6 = 1;
  if (v6)
  {
    if ((v5 & 0x10) == 0)
      goto LABEL_29;
    v10 = this;
    v11 = *(_DWORD *)(v4 + 24);
    *(_DWORD *)(v4 + 24) = v11 + 2;
    if ((*(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFLL) != 0
      && (v14 = *(_QWORD *)((*(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFLL) + 0xE8)) != 0
      && *(_BYTE *)(v14 + 1)
      && (v15 = *(_QWORD *)(v14 + 16)) != 0)
    {
      v12 = *(_QWORD *)(v15 + 8) != 0;
      if (!v11)
        goto LABEL_24;
    }
    else
    {
      v12 = 0;
      if (!v11)
      {
LABEL_24:
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
          v4 = *(_QWORD *)v10;
          if (v12)
          {
            if ((*(_WORD *)(v4 + 28) & 0x10) == 0)
              goto LABEL_27;
            goto LABEL_18;
          }
LABEL_29:
          v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 40) + 8) + 528);
          if (!v16)
            return 0;
          v17 = *(_QWORD *)(v16 + 8);
          if (!v17)
            return 0;
          v13 = *(_QWORD *)(v17 + 120);
          if (!v13)
            return 0;
          return *(_QWORD *)(v13 + 8);
        }
        if (!v12)
          goto LABEL_29;
LABEL_17:
        if ((v5 & 0x10) == 0)
        {
LABEL_27:
          __break(0xC471u);
          JUMPOUT(0x195FC33F0);
        }
LABEL_18:
        v13 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFLL) + 0xE8) + 16);
        if (!v13)
          return 0;
        return *(_QWORD *)(v13 + 8);
      }
    }
    *(_DWORD *)(v4 + 24) = v11;
    if (!v12)
      goto LABEL_29;
    goto LABEL_17;
  }
  v7 = *(_DWORD *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 2;
  v8 = *(_QWORD *)(v4 + 200);
  if (v8)
  {
    v2 = *(_QWORD *)(v8 + 8);
    if (v7)
      goto LABEL_8;
  }
  else
  {
    v2 = 0;
    if (v7)
    {
LABEL_8:
      *(_DWORD *)(v4 + 24) = v7;
      return v2;
    }
  }
  if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
  return v2;
}

unsigned int *WebCore::FocusNavigationScope::scopeOf@<X0>(WebCore::FocusNavigationScope *this@<X0>, WebCore::Node *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::FocusNavigationScope *v3;
  WebCore::FocusNavigationScope *v5;
  unsigned int *v6;
  unsigned int *result;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  __int16 v11;
  unsigned int v12;
  _BOOL4 v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int *v18;
  int v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = this;
  v5 = 0;
  v6 = 0;
  *((_DWORD *)this + 6) += 2;
  while (1)
  {
    result = v6;
    v6 = (unsigned int *)v3;
    *((_DWORD *)v3 + 6) += 2;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
      }
      else
      {
        result[6] -= 2;
      }
    }
    v8 = *((_QWORD *)v3 + 4);
    if (v8)
    {
      if ((*(_WORD *)(v8 + 28) & 8) != 0)
      {
        v9 = *(_QWORD *)(v8 + 72) & 0xFFFFFFFFFFFFLL;
        if (v9)
        {
          v20 = *(_QWORD *)(v9 + 88);
          if (v20)
          {
            result = *(unsigned int **)(v20 + 224);
            if (result)
            {
              result = (unsigned int *)(*(uint64_t (**)(unsigned int *, WebCore::FocusNavigationScope *))(*(_QWORD *)result + 16))(result, v3);
              if (result)
              {
                v21 = result;
                result = (unsigned int *)WebCore::isFocusScopeOwner((WebCore *)result, a2);
                if ((_DWORD)result)
                {
                  v21[6] += 2;
                  *(_QWORD *)a3 = 0;
                  *(_QWORD *)(a3 + 8) = v21;
                  goto LABEL_74;
                }
              }
            }
          }
        }
      }
    }
    v10 = v6[6];
    v6[6] = v10 + 2;
    v11 = *((_WORD *)v6 + 14);
    if ((v11 & 0x80) != 0)
    {
      v24 = *((_QWORD *)v6 + 12);
      *(_DWORD *)(v24 + 24) += 2;
      *(_QWORD *)a3 = v24;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 0;
      if (v6[6] == 2)
      {
        if ((*((_WORD *)v6 + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
      }
      else
      {
        v6[6] -= 2;
      }
      goto LABEL_75;
    }
    if (v10)
    {
      v6[6] = v10;
    }
    else if ((*((_WORD *)v6 + 15) & 0x400) == 0)
    {
      result = WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
      v11 = *((_WORD *)v6 + 14);
    }
    if ((v11 & 0x10) != 0)
    {
      v12 = v6[6];
      v6[6] = v12 + 2;
      if ((*((_QWORD *)v6 + 9) & 0xFFFFFFFFFFFFLL) != 0
        && (v22 = *(_QWORD *)((*((_QWORD *)v6 + 9) & 0xFFFFFFFFFFFFLL) + 0xE8)) != 0
        && *(_BYTE *)(v22 + 1)
        && (v23 = *(_QWORD *)(v22 + 16)) != 0)
      {
        v13 = *(_QWORD *)(v23 + 8) != 0;
        if (v12)
        {
LABEL_14:
          v6[6] = v12;
          if (v13)
            goto LABEL_72;
          goto LABEL_15;
        }
      }
      else
      {
        v13 = 0;
        if (v12)
          goto LABEL_14;
      }
      if ((*((_WORD *)v6 + 15) & 0x400) != 0)
      {
        if (v13)
          goto LABEL_72;
      }
      else
      {
        result = WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
        if (v13)
        {
          v11 = *((_WORD *)v6 + 14);
LABEL_72:
          if ((v11 & 8) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195FC3838);
          }
          v6[6] += 2;
          *(_QWORD *)a3 = v6;
          *(_QWORD *)(a3 + 8) = 0;
LABEL_74:
          *(_BYTE *)(a3 + 16) = 0;
          goto LABEL_75;
        }
      }
    }
LABEL_15:
    v3 = (WebCore::FocusNavigationScope *)*((_QWORD *)v6 + 4);
    if (v3)
      *((_DWORD *)v3 + 6) += 2;
    if (v5)
    {
      if (*((_DWORD *)v5 + 6) == 2)
      {
        if ((*((_WORD *)v5 + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef(v5, a2);
      }
      else
      {
        *((_DWORD *)v5 + 6) -= 2;
      }
    }
    if (!v3)
      goto LABEL_34;
    v14 = *((_DWORD *)v3 + 6);
    v15 = v14 + 2;
    *((_DWORD *)v3 + 6) = v14 + 2;
    if ((*((_WORD *)v3 + 14) & 0x10) == 0
      || *(_QWORD *)(*((_QWORD *)v3 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::slotTag + 24))
    {
      if (!v14)
        goto LABEL_54;
      *((_DWORD *)v3 + 6) = v14;
      goto LABEL_33;
    }
    v16 = **((_QWORD **)v3 + 5);
    if (!v16 || (*(_WORD *)(v16 + 28) & 0x80) == 0)
      break;
    v17 = *(_DWORD *)(v16 + 24);
    *(_DWORD *)(v16 + 24) = v17 + 2;
    result = *(unsigned int **)(v16 + 224);
    if (result)
    {
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *, WebCore::FocusNavigationScope *, uint64_t))(*(_QWORD *)result + 24))(result, v3, v16);
      v18 = result;
      v17 = *(_DWORD *)(v16 + 24) - 2;
      if (*(_DWORD *)(v16 + 24) == 2)
        goto LABEL_39;
    }
    else
    {
      v18 = 0;
      if (!v17)
      {
LABEL_39:
        if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)v16, a2);
        goto LABEL_30;
      }
    }
    *(_DWORD *)(v16 + 24) = v17;
LABEL_30:
    v15 = *((_DWORD *)v3 + 6);
    if (!v18)
      break;
    v19 = v15 - 2;
    if (!v19)
    {
LABEL_54:
      if ((*((_WORD *)v3 + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef(v3, a2);
      goto LABEL_33;
    }
    *((_DWORD *)v3 + 6) = v19;
LABEL_33:
    *((_DWORD *)v3 + 6) += 2;
LABEL_34:
    if (v6[6] == 2)
    {
      if ((*((_WORD *)v6 + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
    }
    else
    {
      v6[6] -= 2;
    }
    v5 = v3;
    if (!v3)
    {
      v25 = **((_QWORD **)v6 + 5);
      *(_DWORD *)(v25 + 24) += 2;
      *(_QWORD *)a3 = v25;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 0;
      goto LABEL_80;
    }
  }
  *((_DWORD *)v3 + 6) = v15 + 2;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = v3;
  *(_BYTE *)(a3 + 16) = 1;
  if (v15)
  {
    *((_DWORD *)v3 + 6) = v15;
  }
  else if ((*((_WORD *)v3 + 15) & 0x400) == 0)
  {
    result = WebCore::Node::removedLastRef(v3, a2);
  }
  v5 = v3;
LABEL_75:
  if (v6[6] == 2)
  {
    if ((*((_WORD *)v6 + 15) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
  }
  else
  {
    v6[6] -= 2;
  }
  if (v5)
  {
    if (*((_DWORD *)v5 + 6) == 2)
    {
      if ((*((_WORD *)v5 + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef(v5, a2);
    }
    else
    {
      *((_DWORD *)v5 + 6) -= 2;
    }
  }
LABEL_80:
  if (v6[6] == 2)
  {
    if ((*((_WORD *)v6 + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
  }
  else
  {
    v6[6] -= 2;
  }
  return result;
}

uint64_t WebCore::FocusController::focusRepaintTimerFired(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  _BYTE v12[20];
  __int128 v13;
  char v14;

  v2 = *(_QWORD *)(this + 16);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0 && !*(_BYTE *)(v3 + 144)
    || (v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 8) + 8) + 160), !*(_BYTE *)(v3 + 144)))
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    v6 = *(_QWORD *)(v3 + 296);
    if (v6)
    {
      *(_DWORD *)(v6 + 24) += 2;
      v7 = *(_QWORD *)(v6 + 1248);
      if (v7)
      {
        v8 = *(_DWORD *)(v7 + 24);
        *(_DWORD *)(v7 + 24) = v8 + 2;
        this = *(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL;
        if (this)
        {
          if ((*(_BYTE *)((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          {
            this = 105;
            __break(0xC471u);
            return this;
          }
          if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x18) + 8) + 40)
                                                                                                 + 8)
                                                                                     + 1944)
                                                                         + 24)
                                                             + 8)
                                                 + 40)
                                     + 8)
                         + 3382))
          {
            LOBYTE(v13) = 0;
            v14 = 0;
            v12[0] = 0;
            v12[16] = 0;
            this = WebCore::RenderObject::issueRepaint(this, &v13, 0, 0, (uint64_t)v12);
            v8 = *(_DWORD *)(v7 + 24) - 2;
          }
        }
        if (v8)
        {
          *(_DWORD *)(v7 + 24) = v8;
        }
        else if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        {
          this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
        }
      }
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
      }
      else
      {
        *(_DWORD *)(v6 + 24) -= 2;
      }
    }
    do
    {
      v9 = __ldaxr(v4);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v4));
    if (!v10)
    {
      atomic_store(1u, v4);
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v11 = off_1E31FE290;
      v11[1] = v4;
      *(_QWORD *)&v13 = v11;
      WTF::ensureOnMainThread();
      this = v13;
      *(_QWORD *)&v13 = 0;
      if (this)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    }
  }
  return this;
}

uint64_t WebCore::FocusController::setFocusedFrame(uint64_t result, WebCore::Frame *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  WebCore::Frame *v7;
  char v8;
  uint64_t v9;
  BOOL v10;
  WebCore::Frame *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  WTF *v16;
  WebCore *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WebCore::Frame *v20;
  uint64_t v21;
  WebCore::Chrome **v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  WebCore::Event *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  WTF *v38;
  WebCore *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  WebCore::Event *v44;
  WebCore::Event *v45;

  v5 = result;
  v6 = *(_QWORD *)(result + 16);
  if (v6)
    v7 = *(WebCore::Frame **)(v6 + 8);
  else
    v7 = 0;
  if (v7 == a2 || *(_BYTE *)(result + 24))
    return result;
  v8 = 1;
  *(_BYTE *)(result + 24) = 1;
  if (v6)
  {
    v9 = *(_QWORD *)(v6 + 8);
    if (!v9)
      goto LABEL_9;
    if (!*(_BYTE *)(v9 + 144))
    {
      v30 = (unsigned int *)(v9 + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 + 1, v30));
      v8 = 0;
      goto LABEL_9;
    }
  }
  v9 = 0;
LABEL_9:
  if (a2)
  {
    v10 = *((_BYTE *)a2 + 144) != 0;
    if (*((_BYTE *)a2 + 144))
    {
      v11 = 0;
    }
    else
    {
      v32 = (unsigned int *)((char *)a2 + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 + 1, v32));
      v11 = a2;
    }
    result = *((_QWORD *)a2 + 2);
    if (result)
      goto LABEL_73;
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = a2;
    v34 = (unsigned int *)*((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = result;
    if (!v34)
      goto LABEL_73;
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
    {
      atomic_store(1u, v34);
      WTF::fastFree((WTF *)v34, a2);
    }
    result = *((_QWORD *)a2 + 2);
    if (result)
    {
LABEL_73:
      do
        v12 = __ldaxr((unsigned int *)result);
      while (__stlxr(v12 + 1, (unsigned int *)result));
    }
  }
  else
  {
    v11 = 0;
    result = 0;
    v10 = 1;
  }
  v13 = *(unsigned int **)(v5 + 16);
  *(_QWORD *)(v5 + 16) = result;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      result = WTF::fastFree((WTF *)v13, a2);
    }
  }
  if (v9)
  {
    v37 = *(_QWORD *)(v9 + 288);
    if (v37)
    {
      WebCore::ScrollableArea::stopKeyboardScrollAnimation((WebCore::ScrollableArea *)(v37 + 64));
      WebCore::FrameSelection::setFocused(*(WebCore::FrameSelection **)(*(_QWORD *)(v9 + 296) + 3064), 0);
      v38 = *(WTF **)(v9 + 296);
      v40 = WebCore::eventNames(v39);
      WebCore::Event::create((_QWORD *)(v40 + 304), 0, 0, 0, (uint64_t *)&v45);
      WebCore::Document::dispatchWindowEvent(v38, v45, 0);
      result = (uint64_t)v45;
      v45 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 16) == 1)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        else
          --*(_DWORD *)(result + 16);
      }
      v42 = v9;
      do
      {
        if (!*(_BYTE *)(v42 + 144))
          result = (uint64_t)WebCore::Document::updateServiceWorkerClientData(*(_QWORD **)(v42 + 296), v41);
        v43 = *(_QWORD *)(v42 + 56);
        if (!v43)
          break;
        v42 = *(_QWORD *)(v43 + 8);
      }
      while (v42);
    }
  }
  if (v11 && *((_QWORD *)v11 + 36) && (*(_WORD *)(v5 + 26) & 2) != 0)
  {
    WebCore::FrameSelection::setFocused(*(WebCore::FrameSelection **)(*((_QWORD *)v11 + 37) + 3064), (WebCore::Document *)1);
    v16 = (WTF *)*((_QWORD *)v11 + 37);
    v18 = WebCore::eventNames(v17);
    WebCore::Event::create((_QWORD *)(v18 + 816), 0, 0, 0, (uint64_t *)&v45);
    WebCore::Document::dispatchWindowEvent(v16, v45, 0);
    result = (uint64_t)v45;
    v45 = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 16) == 1)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      else
        --*(_DWORD *)(result + 16);
    }
    v20 = v11;
    do
    {
      if (!*((_BYTE *)v20 + 144))
        result = (uint64_t)WebCore::Document::updateServiceWorkerClientData(*((_QWORD **)v20 + 37), v19);
      v21 = *((_QWORD *)v20 + 7);
      if (!v21)
        break;
      v20 = *(WebCore::Frame **)(v21 + 8);
    }
    while (v20);
  }
  if (a3)
  {
    v22 = *(WebCore::Chrome ***)(*(_QWORD *)(v5 + 8) + 8);
    ++*(_DWORD *)v22;
    v45 = (WebCore::Event *)v22;
    WebCore::Chrome::focusedFrameChanged(v22[6], a2);
    result = (uint64_t)WTF::Ref<WebCore::Page,WTF::RawPtrTraits<WebCore::Page>,WTF::DefaultRefDerefTraits<WebCore::Page>>::~Ref(&v45);
  }
  *(_BYTE *)(v5 + 24) = 0;
  if (!v10)
  {
    v23 = (unsigned int *)((char *)v11 + 8);
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, v23);
      v44 = (WebCore::Event *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v44 = off_1E31FE290;
      *((_QWORD *)v44 + 1) = v23;
      v45 = v44;
      WTF::ensureOnMainThread();
      result = (uint64_t)v45;
      v45 = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  if ((v8 & 1) == 0)
  {
    v26 = (unsigned int *)(v9 + 8);
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v26);
      v29 = (WebCore::Event *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v29 = off_1E31FE290;
      *((_QWORD *)v29 + 1) = v26;
      v45 = v29;
      WTF::ensureOnMainThread();
      result = (uint64_t)v45;
      v45 = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t *WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v5;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t *v11;

  if (!a2)
  {
    v3 = 0;
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a2 + 16);
  if (v3)
    goto LABEL_5;
  v11 = a1;
  v3 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 8) = a2;
  v8 = *(unsigned int **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v3;
  if (!v8)
  {
    a1 = v11;
    do
LABEL_5:
      v5 = __ldaxr((unsigned int *)v3);
    while (__stlxr(v5 + 1, (unsigned int *)v3));
    goto LABEL_3;
  }
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (!v10)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v7);
  }
  v3 = *(_QWORD *)(a2 + 16);
  a1 = v11;
  if (v3)
    goto LABEL_5;
LABEL_3:
  *a1 = v3;
  return a1;
}

uint64_t WebCore::FocusController::setFocused(WebCore::FocusController *this, int a2)
{
  _DWORD *v2;
  __int16 v3;
  uint64_t result;
  WTF *v5;
  void *v6;

  v2 = *(_DWORD **)(*((_QWORD *)this + 1) + 8);
  ++*v2;
  v3 = 2;
  if (!a2)
    v3 = 0;
  result = WebCore::Page::setActivityState((uint64_t)v2, *((_WORD *)this + 13) & 0xFFFDu | v3);
  if (*v2 == 1)
  {
    WebCore::Page::~Page((uint64_t)v2);
    return WTF::fastFree(v5, v6);
  }
  else
  {
    --*v2;
  }
  return result;
}

unsigned int *WebCore::FocusController::setFocusedInternal(unsigned int *this, WebCore::Document *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  WebCore::FrameSelection *v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  WebCore::FrameSelection *v17;

  v3 = (uint64_t)this;
  if ((*((_WORD *)this + 13) & 2) == 0)
  {
    if ((v13 = *((_QWORD *)this + 2)) != 0 && (v14 = *(_QWORD *)(v13 + 8)) != 0 && !*(_BYTE *)(v14 + 144)
      || (v14 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 160), !*(_BYTE *)(v14 + 144)))
    {
      v15 = (unsigned int *)(v14 + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 + 1, v15));
      WebCore::EventHandler::stopAutoscrollTimer(*(WebCore::AutoscrollController ***)(v14 + 640), 0);
      this = WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v15);
    }
  }
  v4 = *(_QWORD *)(v3 + 16);
  if (v4 && (v6 = *(_QWORD *)(v4 + 8)) != 0
    || (WebCore::Page::protectedMainFrame(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 8), &v17),
        WebCore::FocusController::setFocusedFrame(v3, v17, 1),
        this = (unsigned int *)WTF::Ref<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>::~Ref((uint64_t *)&v17),
        (v5 = *(_QWORD *)(v3 + 16)) != 0)
    && (v6 = *(_QWORD *)(v5 + 8)) != 0)
  {
    if (!*(_BYTE *)(v6 + 144))
    {
      v7 = (unsigned int *)(v6 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
      if (*(_QWORD *)(v6 + 288))
      {
        WebCore::LocalFrame::checkedSelection(v6, &v17);
        WebCore::FrameSelection::setFocused(v17, a2);
        v9 = v17;
        v17 = 0;
        if (v9)
        {
          v10 = *((_DWORD *)v9 + 7);
          if (!v10)
          {
            __break(0xC471u);
            JUMPOUT(0x195FC40E8);
          }
          *((_DWORD *)v9 + 7) = v10 - 1;
        }
        v11 = *(_QWORD *)(v6 + 296);
        if (v11)
        {
          *(_DWORD *)(v11 + 24) += 2;
          WebCore::dispatchEventsOnWindowAndFocusedElement((unsigned int *)v11, a2);
          if (*(_DWORD *)(v11 + 24) == 2)
          {
            if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v11, v12);
          }
          else
          {
            *(_DWORD *)(v11 + 24) -= 2;
          }
        }
        else
        {
          WebCore::dispatchEventsOnWindowAndFocusedElement(0, a2);
        }
      }
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v7);
    }
  }
  return this;
}

unsigned int *WebCore::dispatchEventsOnWindowAndFocusedElement(unsigned int *this, WebCore::Document *a2)
{
  int v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  WebCore::Node *Ref;
  void *v11;
  int v12;
  __int16 v13;
  WebCore *v14;

  v2 = (int)a2;
  v3 = this;
  v4 = *((_QWORD *)this + 66);
  if (!v4
    || (v5 = *(_QWORD *)(v4 + 8)) == 0
    || (v6 = *(_QWORD *)(v5 + 24)) == 0
    || (v7 = *(_QWORD *)(v6 + 8)) == 0
    || !*(_BYTE *)(v7 + 339))
  {
    if ((a2 & 1) != 0)
    {
      v8 = (_QWORD *)(WebCore::eventNames((WebCore *)this) + 816);
    }
    else
    {
      Ref = (WebCore::Node *)*((_QWORD *)this + 156);
      if (Ref)
      {
        v14 = 0;
        (*(void (**)(WebCore::Node *, WebCore **))(*(_QWORD *)Ref + 1008))(Ref, &v14);
        Ref = v14;
        v14 = 0;
        if (Ref)
        {
          if (*((_DWORD *)Ref + 6) == 2)
          {
            if ((*((_WORD *)Ref + 15) & 0x400) == 0)
              Ref = (WebCore::Node *)WebCore::Node::removedLastRef(Ref, v11);
          }
          else
          {
            *((_DWORD *)Ref + 6) -= 2;
          }
        }
      }
      v8 = (_QWORD *)(WebCore::eventNames(Ref) + 304);
    }
    WebCore::Event::create(v8, 0, 0, 0, (uint64_t *)&v14);
    WebCore::Document::dispatchWindowEvent((WTF *)v3, v14, 0);
    this = (unsigned int *)v14;
    v14 = 0;
    if (this)
    {
      if (this[4] == 1)
        this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
      else
        --this[4];
    }
    if (v2)
    {
      this = (unsigned int *)*((_QWORD *)v3 + 156);
      if (this)
      {
        v14 = 0;
        v13 = 0;
        v12 = 0;
        (*(void (**)(unsigned int *, WebCore **, int *))(*(_QWORD *)this + 1000))(this, &v14, &v12);
        this = (unsigned int *)v14;
        v14 = 0;
        if (this)
        {
          if (this[6] == 2)
          {
            if ((*((_WORD *)this + 15) & 0x400) == 0)
              return WebCore::Node::removedLastRef((WebCore::Node *)this, v9);
          }
          else
          {
            this[6] -= 2;
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::FocusController::findFocusableElementDescendingIntoSubframes(uint64_t a1, uint64_t a2, WebCore::Node *a3)
{
  uint64_t v6;
  void *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t FocusableElementWithinScope;
  uint64_t result;
  _QWORD v19[2];
  char v20;

  while (1)
  {
    if (!a2)
      return a2;
    v6 = a2;
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 192))(a2))
      return a2;
    v8 = *(_DWORD *)(a2 + 24) + 2;
    *(_DWORD *)(a2 + 24) = v8;
    v9 = *(_QWORD *)(a2 + 112);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
      {
        if (!*(_BYTE *)(v10 + 144))
        {
          v13 = *(_QWORD *)(v10 + 296);
          if (v13)
            break;
        }
      }
    }
    v11 = 3;
    a2 = v6;
LABEL_7:
    v12 = v8 - 2;
    if (v12)
    {
      *(_DWORD *)(v6 + 24) = v12;
    }
    else if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v7);
    }
    if (v11)
      return a2;
  }
  *(_DWORD *)(v13 + 24) += 2;
  WebCore::Document::updateLayout(v13, 2u, 0);
  if (*(_DWORD *)(v13 + 24) == 2)
  {
    if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v13, v14);
  }
  else
  {
    *(_DWORD *)(v13 + 24) -= 2;
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v6 + 112) + 8);
  if (!*(_BYTE *)(v15 + 144))
  {
    v16 = *(_QWORD *)(*(_QWORD *)(v15 + 296) + 96);
    *(_DWORD *)(v16 + 24) += 2;
    v19[0] = v16;
    v19[1] = 0;
    v20 = 0;
    FocusableElementWithinScope = WebCore::FocusController::findFocusableElementWithinScope(a1, (WebCore::FocusController *)v19, 0, a3);
    if (*(_DWORD *)(v16 + 24) == 2)
    {
      if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v16, v7);
    }
    else
    {
      *(_DWORD *)(v16 + 24) -= 2;
    }
    if (FocusableElementWithinScope)
      a2 = FocusableElementWithinScope;
    else
      a2 = v6;
    if (FocusableElementWithinScope)
      v11 = 0;
    else
      v11 = 3;
    v8 = *(_DWORD *)(v6 + 24);
    goto LABEL_7;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::FocusController::findFocusableElementWithinScope(uint64_t a1, WebCore::FocusController *a2, const WebCore::FocusNavigationScope *a3, WebCore::Node *a4)
{
  unsigned int *FocusableElementWithinScope;
  unsigned int *v7;
  void *v8;
  uint64_t FocusableElementDescendingIntoSubframes;

  if ((_DWORD)a1 == 1)
    FocusableElementWithinScope = (unsigned int *)WebCore::FocusController::nextFocusableElementWithinScope(a2, a3, a4, a4);
  else
    FocusableElementWithinScope = WebCore::FocusController::previousFocusableElementWithinScope((unsigned int *)a2, a3, a4, a4);
  v7 = FocusableElementWithinScope;
  if (!FocusableElementWithinScope)
    return WebCore::FocusController::findFocusableElementDescendingIntoSubframes(a1, 0, a4);
  FocusableElementWithinScope[6] += 2;
  FocusableElementDescendingIntoSubframes = WebCore::FocusController::findFocusableElementDescendingIntoSubframes(a1, FocusableElementWithinScope, a4);
  if (v7[6] == 2)
  {
    if ((*((_WORD *)v7 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7, v8);
  }
  else
  {
    v7[6] -= 2;
  }
  return FocusableElementDescendingIntoSubframes;
}

uint64_t WebCore::FocusController::setInitialFocus(uint64_t a1, void *a2, WebCore::Node *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  WebCore::AXObjectCache *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  if (((_DWORD)a2 - 3) < 4)
  {
    v4 = WebCore::FocusController::advanceFocusDirectionally(a1, (uint64_t)a2, (uint64_t)a3);
LABEL_5:
    v5 = v4;
    goto LABEL_6;
  }
  if (((_DWORD)a2 - 1) <= 1)
  {
    v4 = WebCore::FocusController::advanceFocusInDocumentOrder(a1, a2, a3, 1);
    goto LABEL_5;
  }
  v5 = 0;
LABEL_6:
  v6 = *(_QWORD *)(a1 + 16);
  if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0 && !*(_BYTE *)(v7 + 144)
    || (v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 160), !*(_BYTE *)(v7 + 144)))
  {
    v8 = (unsigned int *)(v7 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    if (WebCore::Document::hasEverCreatedAnAXObjectCache)
    {
      v14 = *(_QWORD *)(v7 + 296);
      if (*(_BYTE *)(v14 + 3362) || *(_BYTE *)(v14 + 3405))
      {
        v23 = *(_QWORD *)(v14 + 528);
        i = *(_QWORD *)(v7 + 296);
        if (v23)
        {
          v24 = *(_QWORD *)(v23 + 8);
          i = v14;
          if (v24)
          {
            v25 = *(_QWORD *)(v24 + 120);
            i = v14;
            if (v25)
            {
              v26 = *(_QWORD *)(v25 + 8);
              for (i = v14; v26; v26 = *(_QWORD *)(v29 + 8))
              {
                i = *(_QWORD *)(*(_QWORD *)(v26 + 40) + 8);
                v27 = *(_QWORD *)(i + 528);
                if (!v27)
                  break;
                v28 = *(_QWORD *)(v27 + 8);
                if (!v28)
                  break;
                v29 = *(_QWORD *)(v28 + 120);
                if (!v29)
                  break;
              }
            }
          }
        }
      }
      else
      {
        v15 = *(_QWORD *)(v14 + 528);
        i = *(_QWORD *)(v7 + 296);
        if (v15)
        {
          v17 = *(_QWORD *)(v15 + 8);
          i = v14;
          if (v17)
          {
            v18 = *(_QWORD *)(*(_QWORD *)(v17 + 128) + 8);
            v19 = v18 && *(_BYTE *)(v18 + 144) == 0;
            i = v14;
            if (v19)
            {
              v20 = *(_QWORD *)(v18 + 296);
              i = v14;
              if (v20)
                i = v20;
            }
          }
        }
      }
      v21 = *(WebCore::AXObjectCache **)(i + 1488);
      if (v21)
      {
        ++*((_DWORD *)v21 + 2);
        WebCore::AXObjectCache::postNotification(v21, (WebCore::Node *)v14, 24, 0);
        v22 = *((_DWORD *)v21 + 2);
        if (!v22)
        {
          __break(0xC471u);
          JUMPOUT(0x195FC46C4);
        }
        *((_DWORD *)v21 + 2) = v22 - 1;
      }
    }
    do
    {
      v10 = __ldaxr(v8);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v8));
    if (!v11)
    {
      atomic_store(1u, v8);
      v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v13 = off_1E31FE290;
      v13[1] = v8;
      v30 = v13;
      WTF::ensureOnMainThread();
      if (v30)
        (*(void (**)(_QWORD *))(*v30 + 8))(v30);
    }
  }
  return v5;
}

uint64_t WebCore::FocusController::advanceFocusInDocumentOrder(uint64_t a1, void *a2, WebCore::Node *a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::Node *v16;
  WebCore::FocusNavigationScope *v17;
  unsigned int *v18;
  WebCore *FocusableElementAcrossFocusScope;
  void *v20;
  WebCore *v21;
  int v22;
  WebCore *v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::Frame *v26;
  unsigned int *v27;
  unsigned int v28;
  WebCore::Node *v29;
  unsigned int v30;
  unsigned int v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  WebCore *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  WebCore::Frame *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  WebCore::Node *v48;
  WebCore::Node *v49;
  WebCore::Node *v50;
  WebCore::Node *v51;
  WebCore::Node *v52;
  WebCore::Node *v53;
  __int128 v54;
  WebCore::Node *v55;
  WebCore::Node *v56;

  v8 = *(_QWORD *)(a1 + 16);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 8)) == 0 || *(_BYTE *)(v9 + 144))
  {
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 160);
    if (*(_BYTE *)(v9 + 144))
      return 0;
  }
  v10 = (unsigned int *)(v9 + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v12 = *(_QWORD *)(v9 + 296);
  if (v12)
    *(_DWORD *)(v12 + 24) += 2;
  v13 = WebCore::Document::focusNavigationStartingNode(v12, a2);
  if (v13)
  {
    v14 = v13;
    *(_DWORD *)(v13 + 24) += 2;
    v15 = (*(_QWORD *)(*(_QWORD *)(v9 + 136) + 664) >> 50) & 1;
LABEL_11:
    WebCore::Document::updateLayout(v12, 2u, 0);
    v17 = (WebCore::FocusNavigationScope *)v14;
    goto LABEL_12;
  }
  if ((*(_QWORD *)(*(_QWORD *)(v9 + 136) + 664) & 0x4000000000000) != 0)
  {
    v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 296) + 3064) + 120);
    if (v14)
    {
      *(_DWORD *)(v14 + 24) += 2;
      LODWORD(v15) = 1;
      goto LABEL_11;
    }
    WebCore::Document::updateLayout(v12, 2u, 0);
    LODWORD(v15) = 1;
  }
  else
  {
    WebCore::Document::updateLayout(v12, 2u, 0);
    v14 = 0;
    LODWORD(v15) = 0;
  }
  v17 = (WebCore::FocusNavigationScope *)v12;
LABEL_12:
  v18 = WebCore::FocusNavigationScope::scopeOf(v17, v16, (uint64_t)&v55);
  FocusableElementAcrossFocusScope = WebCore::FocusController::findFocusableElementAcrossFocusScope((uint64_t)v18, a2, (WebCore::FocusController *)&v55, v14, a3);
  v21 = FocusableElementAcrossFocusScope;
  if (FocusableElementAcrossFocusScope)
    *((_DWORD *)FocusableElementAcrossFocusScope + 6) += 2;
  if (v56)
  {
    if (*((_DWORD *)v56 + 6) == 2)
    {
      if ((*((_WORD *)v56 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v56, v20);
    }
    else
    {
      *((_DWORD *)v56 + 6) -= 2;
    }
  }
  if (v55)
  {
    if (*((_DWORD *)v55 + 6) == 2)
    {
      if ((*((_WORD *)v55 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v55, v20);
    }
    else
    {
      *((_DWORD *)v55 + 6) -= 2;
    }
  }
  if (v21)
    goto LABEL_21;
  if ((a4 & 1) != 0 || (WebCore::FocusController::relinquishFocusToChrome(a1, (uint64_t)a2) & 1) == 0)
  {
    v34 = 0;
    v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 160);
    if (v35 && !*(_BYTE *)(v35 + 144))
    {
      v36 = *(_QWORD *)(v35 + 296);
      if (v36)
        *(_DWORD *)(v36 + 24) += 2;
      v37 = WebCore::FocusNavigationScope::scopeOf((WebCore::FocusNavigationScope *)v36, (WebCore::Node *)v20, (uint64_t)&v55);
      v38 = WebCore::FocusController::findFocusableElementAcrossFocusScope((uint64_t)v37, a2, (WebCore::FocusController *)&v55, 0, a3);
      v21 = v38;
      if (v38)
        *((_DWORD *)v38 + 6) += 2;
      if (v56)
      {
        if (*((_DWORD *)v56 + 6) == 2)
        {
          if ((*((_WORD *)v56 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v56, v20);
        }
        else
        {
          *((_DWORD *)v56 + 6) -= 2;
        }
      }
      if (v55)
      {
        if (*((_DWORD *)v55 + 6) == 2)
        {
          if ((*((_WORD *)v55 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v55, v20);
        }
        else
        {
          *((_DWORD *)v55 + 6) -= 2;
        }
      }
      if (*(_DWORD *)(v36 + 24) == 2)
      {
        if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v36, v20);
      }
      else
      {
        *(_DWORD *)(v36 + 24) -= 2;
      }
      if (v21)
      {
LABEL_21:
        if (v21 == *(WebCore **)(v12 + 1248))
        {
          v34 = 1;
        }
        else
        {
          v22 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)v21 + 192))(v21);
          if (v22)
            v23 = v21;
          else
            v23 = 0;
          if (v23)
            *((_DWORD *)v23 + 6) += 2;
          if (!v22
            || (*(unsigned int (**)(WebCore *))(*(_QWORD *)v21 + 200))(v21)
            && ((*(uint64_t (**)(WebCore *, WebCore::Node *))(*(_QWORD *)v21 + 560))(v21, a3) & 1) != 0)
          {
            if (v23)
            {
              if (*((_DWORD *)v23 + 6) == 2)
              {
                if ((*((_WORD *)v23 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v23, v20);
              }
              else
              {
                *((_DWORD *)v23 + 6) -= 2;
              }
            }
            v24 = *(_QWORD *)(*((_QWORD *)v21 + 5) + 8);
            if (v12 != v24)
            {
              WORD2(v55) = 0;
              LODWORD(v55) = 0;
              WebCore::Document::setFocusedElement((WebCore::Document *)v12, 0, &v55);
            }
            v25 = *(_QWORD *)(v24 + 528);
            if (v25 && (v26 = *(WebCore::Frame **)(v25 + 8)) != 0)
            {
              v27 = (unsigned int *)((char *)v26 + 8);
              do
                v28 = __ldaxr(v27);
              while (__stlxr(v28 + 1, v27));
              WebCore::FocusController::setFocusedFrame(a1, v26, 1);
              do
              {
                v30 = __ldaxr(v27);
                v31 = v30 - 1;
              }
              while (__stlxr(v31, v27));
              if (!v31)
              {
                atomic_store(1u, v27);
                v52 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v52 = off_1E31FE290;
                *((_QWORD *)v52 + 1) = v27;
                v55 = v52;
                WTF::ensureOnMainThread();
                v53 = v55;
                v55 = 0;
                if (v53)
                  (*(void (**)(WebCore::Node *))(*(_QWORD *)v53 + 8))(v53);
              }
            }
            else
            {
              WebCore::FocusController::setFocusedFrame(a1, 0, 1);
            }
            if ((_DWORD)v15)
            {
              WebCore::firstPositionInOrBeforeNode((uint64_t)v21, v29, (uint64_t)&v54);
              WebCore::VisibleSelection::VisibleSelection((uint64_t)&v55, (uint64_t *)&v54, (uint64_t *)&v54, 1, 0);
              v33 = v54;
              *(_QWORD *)&v54 = 0;
              if (v33)
              {
                if (*(_DWORD *)(v33 + 24) == 2)
                {
                  if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v33, v32);
                }
                else
                {
                  *(_DWORD *)(v33 + 24) -= 2;
                }
              }
              if (WebCore::FrameSelection::shouldChangeSelection(*(WebCore::FrameSelection **)(*(_QWORD *)(v9 + 296) + 3064), (const WebCore::VisibleSelection *)&v55))
              {
                LODWORD(v54) = 2;
                *(_QWORD *)((char *)&v54 + 4) = 5;
                HIDWORD(v54) = 1;
                WebCore::FrameSelection::setSelection(*(_QWORD *)(*(_QWORD *)(v9 + 296) + 3064), (uint64_t)&v55, 0xC7u, v54, *((uint64_t *)&v54 + 1), 0, 0);
              }
              WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v55);
            }
            v34 = 1;
            LOBYTE(v55) = 1;
            BYTE1(v55) = (_BYTE)a2;
            *(_DWORD *)((char *)&v55 + 2) = 0x10000;
            (*(void (**)(WebCore *, WebCore::Node **))(*(_QWORD *)v21 + 656))(v21, &v55);
          }
          else
          {
            v39 = *((_QWORD *)v21 + 14);
            if (v39 && *(_QWORD *)(v39 + 8))
            {
              WORD2(v55) = 0;
              LODWORD(v55) = 0;
              WebCore::Document::setFocusedElement((WebCore::Document *)v12, 0, &v55);
              v40 = *((_QWORD *)v21 + 14);
              if (v40 && (v44 = *(WebCore::Frame **)(v40 + 8)) != 0)
              {
                v45 = (unsigned int *)((char *)v44 + 8);
                do
                  v46 = __ldaxr(v45);
                while (__stlxr(v46 + 1, v45));
                WebCore::FocusController::setFocusedFrame(a1, v44, 1);
                do
                  v47 = __ldaxr(v45);
                while (__stlxr(v47 - 1, v45));
                v34 = 1;
                if (v47 == 1)
                {
                  atomic_store(1u, v45);
                  v48 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v48 = off_1E31FE290;
                  *((_QWORD *)v48 + 1) = v45;
                  v55 = v48;
                  WTF::ensureOnMainThread();
                  v49 = v55;
                  v55 = 0;
                  if (v49)
                    (*(void (**)(WebCore::Node *))(*(_QWORD *)v49 + 8))(v49);
                }
              }
              else
              {
                v34 = 1;
                WebCore::FocusController::setFocusedFrame(a1, 0, 1);
              }
            }
            else
            {
              v34 = 0;
            }
            if (*((_DWORD *)v21 + 6) == 2)
            {
              if ((*((_WORD *)v21 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v21, v20);
            }
            else
            {
              *((_DWORD *)v21 + 6) -= 2;
            }
          }
        }
        if (*((_DWORD *)v21 + 6) == 2)
        {
          if ((*((_WORD *)v21 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v21, v20);
        }
        else
        {
          *((_DWORD *)v21 + 6) -= 2;
        }
        goto LABEL_79;
      }
      v34 = 0;
    }
  }
  else
  {
    v34 = 1;
  }
LABEL_79:
  if (v14)
  {
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v14, v20);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
  }
  if (v12)
  {
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12, v20);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  do
  {
    v41 = __ldaxr(v10);
    v42 = v41 - 1;
  }
  while (__stlxr(v42, v10));
  if (!v42)
  {
    atomic_store(1u, v10);
    v50 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v50 = off_1E31FE290;
    *((_QWORD *)v50 + 1) = v10;
    v55 = v50;
    WTF::ensureOnMainThread();
    v51 = v55;
    v55 = 0;
    if (v51)
      (*(void (**)(WebCore::Node *))(*(_QWORD *)v51 + 8))(v51);
  }
  return v34;
}

uint64_t WebCore::FocusController::advanceFocusDirectionally(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  int v15;
  const WTF::AtomString *v16;
  uint64_t v17;
  WebCore::Node *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t *v21;
  __int16 v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  __int16 v32;
  uint64_t v33;
  uint64_t *v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  const WebCore::TreeScope *v39;
  unsigned int *v40;
  _QWORD *v41;
  unint64_t v42;
  WebCore::Node *v43;
  _QWORD *v44;
  void *v45;

  v6 = *(_QWORD *)(a1 + 16);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 8)) == 0 || *(_BYTE *)(v7 + 144))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 160);
    if (*(_BYTE *)(v7 + 144))
      return 0;
  }
  v8 = (unsigned int *)(v7 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = *(_QWORD *)(v7 + 296);
  if (!v10)
  {
    v30 = 0;
    goto LABEL_75;
  }
  *(_DWORD *)(v10 + 24) += 2;
  WebCore::Document::updateLayout(v10, 2u, 0);
  *(_DWORD *)(v10 + 24) += 2;
  v44 = 0;
  v45 = 0;
  v11 = *(_QWORD *)(v10 + 1248);
  v12 = v10;
  if (!v11)
    goto LABEL_45;
  if (!WebCore::hasOffscreenRect(*(_QWORD *)(v10 + 1248), 0))
  {
    v22 = *(_WORD *)(v11 + 28);
    v12 = v11;
    while (1)
    {
      if ((v22 & 0xF000) == 0x9000)
      {
        v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 40) + 8) + 528) + 8) + 120);
        if (!v23)
        {
          v12 = 0;
          goto LABEL_34;
        }
        v24 = (uint64_t *)(v23 + 8);
      }
      else
      {
        v24 = (uint64_t *)(v12 + 32);
      }
      v12 = *v24;
      if (!*v24)
        goto LABEL_34;
      if ((WebCore::canScrollInDirection(*v24, a2) & 1) == 0)
      {
        v22 = *(_WORD *)(v12 + 28);
        if ((v22 & 0xF000) != 0x9000)
          continue;
      }
      *(_DWORD *)(v12 + 24) += 2;
LABEL_34:
      if (*(_DWORD *)(v10 + 24) == 2)
      {
        if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v10, v13);
      }
      else
      {
        *(_DWORD *)(v10 + 24) -= 2;
      }
      v25 = WebCore::nodeRectInAbsoluteCoordinates((WebCore *)v11, (WebCore::Node *)1);
      goto LABEL_44;
    }
  }
  v12 = v10;
  if ((*(_WORD *)(v11 + 28) & 0x10) == 0)
    goto LABEL_45;
  v12 = v10;
  if (*(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::areaTag + 24))
    goto LABEL_45;
  v14 = *(_QWORD *)(v11 + 32);
  v15 = *(_DWORD *)(v14 + 24);
  *(_DWORD *)(v14 + 24) = v15 + 2;
  v16 = (const WTF::AtomString *)(v14 + 112);
  v17 = *(_QWORD *)(v14 + 112);
  if (v17
    && *(_DWORD *)(v17 + 4)
    && (v39 = *(const WebCore::TreeScope **)(v14 + 40), (v40 = (unsigned int *)*((_QWORD *)v39 + 6)) != 0))
  {
    WebCore::TreeScopeOrderedMap::getElementByUsemap(v40, v16, v39, (uint64_t *)&v43);
    v15 = *(_DWORD *)(v14 + 24) - 2;
    if (*(_DWORD *)(v14 + 24) == 2)
    {
LABEL_83:
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v14, v16);
      goto LABEL_15;
    }
  }
  else
  {
    v43 = 0;
    if (!v15)
      goto LABEL_83;
  }
  *(_DWORD *)(v14 + 24) = v15;
LABEL_15:
  v18 = v43;
  v19 = *((_WORD *)v43 + 14);
  v12 = (uint64_t)v43;
  while (1)
  {
    if ((v19 & 0xF000) != 0x9000)
    {
      v21 = (uint64_t *)(v12 + 32);
      goto LABEL_20;
    }
    v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 40) + 8) + 528) + 8) + 120);
    if (!v20)
      break;
    v21 = (uint64_t *)(v20 + 8);
LABEL_20:
    v12 = *v21;
    if (!*v21)
      goto LABEL_38;
    if ((WebCore::canScrollInDirection(*v21, a2) & 1) == 0)
    {
      v19 = *(_WORD *)(v12 + 28);
      if ((v19 & 0xF000) != 0x9000)
        continue;
    }
    *(_DWORD *)(v12 + 24) += 2;
    goto LABEL_38;
  }
  v12 = 0;
LABEL_38:
  if (*(_DWORD *)(v10 + 24) == 2)
  {
    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v10, v16);
  }
  else
  {
    *(_DWORD *)(v10 + 24) -= 2;
  }
  if (v18)
  {
    if (*((_DWORD *)v18 + 6) == 2)
    {
      if ((*((_WORD *)v18 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v18, v16);
    }
    else
    {
      *((_DWORD *)v18 + 6) -= 2;
    }
  }
  v25 = WebCore::virtualRectForAreaElementAndDirection((WebCore::HTMLAreaElement *)v11, a2);
LABEL_44:
  v44 = (_QWORD *)v25;
  v45 = v26;
LABEL_45:
  v27 = *(_QWORD *)(a1 + 16);
  if (v27)
  {
    v28 = *(_QWORD *)(v27 + 8);
    if (v28)
    {
      if (!*(_BYTE *)(v28 + 144) && *(_QWORD *)(v28 + 296))
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 528) + 8) + 24) + 8) + 864) = 0;
    }
  }
  v29 = v12;
  while (2)
  {
    v30 = WebCore::FocusController::advanceFocusDirectionallyInContainer(a1, v12, (unint64_t *)&v44, a2, a3);
    WebCore::Document::updateLayout(v10, 2u, 0);
    v44 = (_QWORD *)WebCore::nodeRectInAbsoluteCoordinates((WebCore *)v12, (WebCore::Node *)1);
    v45 = v31;
    v32 = *(_WORD *)(v12 + 28);
    while (2)
    {
      if ((v32 & 0xF000) != 0x9000)
      {
        v34 = (uint64_t *)(v29 + 32);
        goto LABEL_56;
      }
      v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v29 + 40) + 8) + 528) + 8) + 120);
      if (v33)
      {
        v34 = (uint64_t *)(v33 + 8);
LABEL_56:
        v29 = *v34;
        if (!*v34)
          goto LABEL_61;
        if ((WebCore::canScrollInDirection(*v34, a2) & 1) != 0
          || (v32 = *(_WORD *)(v29 + 28), (v32 & 0xF000) == 0x9000))
        {
          v35 = 0;
          *(_DWORD *)(v29 + 24) += 2;
          goto LABEL_62;
        }
        continue;
      }
      break;
    }
    v29 = 0;
LABEL_61:
    v35 = 1;
LABEL_62:
    if (v12)
    {
      if (*(_DWORD *)(v12 + 24) == 2)
      {
        if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v12, v31);
      }
      else
      {
        *(_DWORD *)(v12 + 24) -= 2;
      }
    }
    if ((v30 & 1) == 0)
    {
      v12 = v29;
      if (v35)
        goto LABEL_73;
      continue;
    }
    break;
  }
  if ((v35 & 1) == 0)
  {
    if (*(_DWORD *)(v29 + 24) == 2)
    {
      if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v29, v31);
    }
    else
    {
      *(_DWORD *)(v29 + 24) -= 2;
    }
  }
LABEL_73:
  if (*(_DWORD *)(v10 + 24) == 2)
  {
    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v10, v31);
  }
  else
  {
    *(_DWORD *)(v10 + 24) -= 2;
  }
  do
  {
LABEL_75:
    v36 = __ldaxr(v8);
    v37 = v36 - 1;
  }
  while (__stlxr(v37, v8));
  if (!v37)
  {
    atomic_store(1u, v8);
    v41 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v41 = off_1E31FE290;
    v41[1] = v8;
    v44 = v41;
    WTF::ensureOnMainThread();
    v42 = (unint64_t)v44;
    v44 = 0;
    if (v42)
      (*(void (**)(unint64_t))(*(_QWORD *)v42 + 8))(v42);
  }
  return v30;
}

uint64_t WebCore::FocusController::relinquishFocusToChrome(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  WebCore::FrameSelection *v15;
  WTF *v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  __int16 v21;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 8)) == 0 || *(_BYTE *)(v5 + 144))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 160);
    if (*(_BYTE *)(v5 + 144))
      return 0;
  }
  v6 = (unsigned int *)(v5 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = *(_QWORD *)(v5 + 296);
  if (v8)
  {
    *(_DWORD *)(v8 + 24) += 2;
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    ++*(_DWORD *)v9;
    if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v9 + 48) + 16) + 48))(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 16), a2)&& !*(_BYTE *)(v9 + 1091))
    {
      v15 = *(WebCore::FrameSelection **)(*(_QWORD *)(v5 + 296) + 3064);
      if (*((_BYTE *)v15 + 153) && (*(_QWORD *)(*(_QWORD *)(v5 + 136) + 664) & 0x4000000000000) == 0)
        WebCore::FrameSelection::clear(v15);
      v21 = 0;
      v20 = 0;
      WebCore::Document::setFocusedElement((WebCore::Document *)v8, 0, &v20);
      v11 = 1;
      WebCore::FocusController::setFocusedFrame(a1, 0, 1);
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v9 + 48) + 16) + 56))(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 16), a2);
    }
    else
    {
      v11 = 0;
    }
    if (*(_DWORD *)v9 == 1)
    {
      WebCore::Page::~Page(v9);
      WTF::fastFree(v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8, v10);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  else
  {
    v11 = 0;
  }
  do
  {
    v12 = __ldaxr(v6);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v6));
  if (!v13)
  {
    atomic_store(1u, v6);
    v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v18 = off_1E31FE290;
    v18[1] = v6;
    v19 = v18;
    WTF::ensureOnMainThread();
    if (v19)
      (*(void (**)(_QWORD *))(*v19 + 8))(v19);
  }
  return v11;
}

WebCore *WebCore::FocusController::findFocusableElementAcrossFocusScope(uint64_t a1, void *a2, WebCore::FocusController *a3, uint64_t a4, WebCore::Node *a5)
{
  void *v9;
  WebCore::KeyboardEvent *v10;
  uint64_t v11;
  WebCore::Node *v12;
  uint64_t FocusableElementWithinScope;
  uint64_t v14;
  WebCore *FocusableElementDescendingIntoSubframes;
  unsigned int *v16;
  void *v17;
  WebCore::KeyboardEvent *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  const WebCore::Node *v24;
  unsigned int *v25;
  void *v26;
  WebCore::KeyboardEvent *v27;
  WebCore::Node *v28;
  int v29;
  unsigned int *v30;
  unsigned int *v31;
  uint64_t v32;
  const WebCore::Element *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  WebCore::Node *v45;
  WebCore::Node *v46;
  BOOL v47;
  WebCore::Node *v48;

  if (a4 && (*(_WORD *)(a4 + 28) & 8) != 0)
  {
    *(_DWORD *)(a4 + 24) += 2;
    if ((_DWORD)a2 != 1)
      goto LABEL_27;
    if ((*(unsigned int (**)(uint64_t, WebCore::Node *))(*(_QWORD *)a4 + 560))(a4, a5)
      && WebCore::isFocusScopeOwner((WebCore *)a4, (const WebCore::Element *)v9))
    {
      if ((*(_WORD *)(a4 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(a4 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::slotTag + 24))
      {
        v40 = 0;
        *(_DWORD *)(a4 + 24) += 2;
        v41 = **(_QWORD **)(a4 + 40);
        if (v41 && (*(_WORD *)(v41 + 28) & 0x80) != 0)
        {
          v42 = *(_DWORD *)(v41 + 24);
          *(_DWORD *)(v41 + 24) = v42 + 2;
          v43 = *(_QWORD *)(v41 + 224);
          if (v43)
          {
            v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v43 + 24))(v43, a4, v41);
            v42 = *(_DWORD *)(v41 + 24) - 2;
          }
          else
          {
            v40 = 0;
          }
          if (v42)
          {
            *(_DWORD *)(v41 + 24) = v42;
          }
          else if ((*(_WORD *)(v41 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v41, v9);
          }
        }
        v44 = *(_DWORD *)(a4 + 24);
        *(_DWORD *)(a4 + 24) = v44 + 2;
        v45 = 0;
        v46 = (WebCore::Node *)a4;
        v47 = v40 == 0;
        if (v44)
        {
          v12 = 0;
          *(_DWORD *)(a4 + 24) = v44;
        }
        else
        {
          if ((*(_WORD *)(a4 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)a4, v9);
          v12 = 0;
        }
        v11 = a4;
      }
      else
      {
        v11 = 0;
        v12 = *(WebCore::Node **)(*(_QWORD *)((*(_QWORD *)(a4 + 72) & 0xFFFFFFFFFFFFLL) + 0x58) + 96);
        *((_DWORD *)v12 + 6) += 2;
        v45 = v12;
        v46 = 0;
        v47 = 0;
      }
      FocusableElementWithinScope = WebCore::FocusController::nextFocusableElementWithinScope((WebCore::FocusController *)&v45, 0, a5, v10);
      if (FocusableElementWithinScope)
      {
        v14 = FocusableElementWithinScope;
        *(_DWORD *)(FocusableElementWithinScope + 24) += 2;
        FocusableElementDescendingIntoSubframes = (WebCore *)WebCore::FocusController::findFocusableElementDescendingIntoSubframes(1, FocusableElementWithinScope, a5);
        if (*(_DWORD *)(v14 + 24) == 2)
        {
          if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v14, a2);
        }
        else
        {
          *(_DWORD *)(v14 + 24) -= 2;
        }
      }
      else
      {
        FocusableElementDescendingIntoSubframes = (WebCore *)WebCore::FocusController::findFocusableElementDescendingIntoSubframes(1, 0, a5);
      }
      if (v11)
      {
        if (*(_DWORD *)(v11 + 24) == 2)
        {
          if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
        }
        else
        {
          *(_DWORD *)(v11 + 24) -= 2;
        }
      }
      if (!v12)
      {
LABEL_25:
        if (FocusableElementDescendingIntoSubframes)
        {
          v22 = 0;
          goto LABEL_28;
        }
LABEL_27:
        FocusableElementDescendingIntoSubframes = 0;
        v22 = 1;
LABEL_28:
        if (*(_DWORD *)(a4 + 24) == 2)
        {
          if ((*(_WORD *)(a4 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)a4, a2);
        }
        else
        {
          *(_DWORD *)(a4 + 24) -= 2;
        }
        if (!v22)
          return FocusableElementDescendingIntoSubframes;
        goto LABEL_31;
      }
    }
    else
    {
      v16 = (unsigned int *)WebCore::invokerForPopoverShowingState((WebCore *)a4, (const WebCore::Node *)v9);
      if (!v16)
        goto LABEL_27;
      WebCore::HTMLFormControlElement::popoverTargetElement(v16, (unsigned int **)&v48);
      v12 = v48;
      v19 = *((_DWORD *)v48 + 6);
      *((_DWORD *)v48 + 6) = v19 + 2;
      v45 = v12;
      v46 = 0;
      v47 = 0;
      v48 = 0;
      if (v19)
      {
        *((_DWORD *)v12 + 6) = v19;
      }
      else if ((*((_WORD *)v12 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v12, v17);
      }
      v20 = WebCore::FocusController::nextFocusableElementWithinScope((WebCore::FocusController *)&v45, 0, a5, v18);
      if (v20)
      {
        v21 = v20;
        *(_DWORD *)(v20 + 24) += 2;
        FocusableElementDescendingIntoSubframes = (WebCore *)WebCore::FocusController::findFocusableElementDescendingIntoSubframes(1, v20, a5);
        if (*(_DWORD *)(v21 + 24) == 2)
        {
          if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v21, a2);
        }
        else
        {
          *(_DWORD *)(v21 + 24) -= 2;
        }
      }
      else
      {
        FocusableElementDescendingIntoSubframes = (WebCore *)WebCore::FocusController::findFocusableElementDescendingIntoSubframes(1, 0, a5);
      }
    }
    if (*((_DWORD *)v12 + 6) == 2)
    {
      if ((*((_WORD *)v12 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v12, a2);
    }
    else
    {
      *((_DWORD *)v12 + 6) -= 2;
    }
    goto LABEL_25;
  }
LABEL_31:
  v23 = WebCore::FocusController::findFocusableElementWithinScope((uint64_t)a2, a3, (const WebCore::FocusNavigationScope *)a4, a5);
  if (v23)
  {
    FocusableElementDescendingIntoSubframes = (WebCore *)v23;
    if ((_DWORD)a2 == 2)
    {
      while (1)
      {
        v25 = (unsigned int *)WebCore::invokerForPopoverShowingState(FocusableElementDescendingIntoSubframes, v24);
        if (!v25)
          break;
        WebCore::HTMLFormControlElement::popoverTargetElement(v25, (unsigned int **)&v48);
        v28 = v48;
        v29 = *((_DWORD *)v48 + 6);
        *((_DWORD *)v48 + 6) = v29 + 2;
        v45 = v28;
        v46 = 0;
        v47 = 0;
        v48 = 0;
        if (v29)
        {
          *((_DWORD *)v28 + 6) = v29;
        }
        else if ((*((_WORD *)v28 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v28, v26);
        }
        v30 = WebCore::FocusController::previousFocusableElementWithinScope((unsigned int *)&v45, 0, a5, v27);
        if (v30)
        {
          v31 = v30;
          v30[6] += 2;
          FocusableElementDescendingIntoSubframes = (WebCore *)WebCore::FocusController::findFocusableElementDescendingIntoSubframes(2, (uint64_t)v30, a5);
          if (v31[6] == 2)
          {
            if ((*((_WORD *)v31 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v31, v24);
          }
          else
          {
            v31[6] -= 2;
          }
        }
        else
        {
          FocusableElementDescendingIntoSubframes = (WebCore *)WebCore::FocusController::findFocusableElementDescendingIntoSubframes(2, 0, a5);
        }
        if (*((_DWORD *)v28 + 6) == 2)
        {
          if ((*((_WORD *)v28 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v28, v24);
        }
        else
        {
          *((_DWORD *)v28 + 6) -= 2;
        }
      }
    }
  }
  else
  {
    v32 = WebCore::FocusNavigationScope::owner(a3, v24);
    if (v32)
    {
      v34 = v32;
      *(_DWORD *)(v32 + 24) += 2;
      while (1)
      {
        v35 = v34;
        if ((_DWORD)a2 == 2
          && (*(unsigned int (**)(uint64_t, WebCore::Node *))(*(_QWORD *)v34 + 560))(v34, a5)
          && WebCore::isFocusScopeOwner((WebCore *)v34, v33))
        {
          FocusableElementDescendingIntoSubframes = (WebCore *)WebCore::FocusController::findFocusableElementDescendingIntoSubframes(2, v34, a5);
          goto LABEL_80;
        }
        WebCore::FocusNavigationScope::scopeOf((WebCore::FocusNavigationScope *)v34, v33, (uint64_t)&v45);
        v36 = WebCore::FocusController::findFocusableElementWithinScope((uint64_t)a2, (WebCore::FocusController *)&v45, (const WebCore::FocusNavigationScope *)v34, a5);
        if (v36)
          break;
        v38 = WebCore::FocusNavigationScope::owner((WebCore::FocusNavigationScope *)&v45, v37);
        v34 = v38;
        if (v38)
          *(_DWORD *)(v38 + 24) += 2;
        if (*(_DWORD *)(v35 + 24) == 2)
        {
          if ((*(_WORD *)(v35 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v35, v33);
        }
        else
        {
          *(_DWORD *)(v35 + 24) -= 2;
        }
        if (v46)
        {
          if (*((_DWORD *)v46 + 6) == 2)
          {
            if ((*((_WORD *)v46 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v46, v33);
          }
          else
          {
            *((_DWORD *)v46 + 6) -= 2;
          }
        }
        if (v45)
        {
          if (*((_DWORD *)v45 + 6) == 2)
          {
            if ((*((_WORD *)v45 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v45, v33);
          }
          else
          {
            *((_DWORD *)v45 + 6) -= 2;
          }
        }
        if (!v34)
          return 0;
      }
      FocusableElementDescendingIntoSubframes = (WebCore *)v36;
      if (v46)
      {
        if (*((_DWORD *)v46 + 6) == 2)
        {
          if ((*((_WORD *)v46 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v46, v37);
        }
        else
        {
          *((_DWORD *)v46 + 6) -= 2;
        }
      }
      if (v45)
      {
        if (*((_DWORD *)v45 + 6) == 2)
        {
          if ((*((_WORD *)v45 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v45, v37);
        }
        else
        {
          *((_DWORD *)v45 + 6) -= 2;
        }
      }
LABEL_80:
      if (*(_DWORD *)(v34 + 24) == 2)
      {
        if ((*(_WORD *)(v34 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v34, v37);
      }
      else
      {
        *(_DWORD *)(v34 + 24) -= 2;
      }
    }
    else
    {
      return 0;
    }
  }
  return FocusableElementDescendingIntoSubframes;
}

WebCore *WebCore::invokerForPopoverShowingState(WebCore *this, const WebCore::Node *a2)
{
  void *v3;
  WebCore::Node *v4;
  WebCore *v5;
  uint64_t v7;
  uint64_t v8;
  WebCore::Node *v9;

  if (!this
    || (*((_WORD *)this + 14) & 8) == 0
    || !(*(unsigned int (**)(WebCore *, const WebCore::Node *))(*(_QWORD *)this + 848))(this, a2))
  {
    return 0;
  }
  *((_DWORD *)this + 6) += 2;
  WebCore::HTMLFormControlElement::popoverTargetElement((unsigned int *)this, (unsigned int **)&v9);
  v4 = v9;
  if (v9)
  {
    if ((*((_QWORD *)v9 + 9) & 0xFFFFFFFFFFFFLL) != 0
      && (v7 = *(_QWORD *)((*((_QWORD *)v9 + 9) & 0xFFFFFFFFFFFFLL) + 0xE8)) != 0
      && *(_BYTE *)(v7 + 1)
      && (v8 = *(_QWORD *)(v7 + 16)) != 0)
    {
      if (*(WebCore **)(v8 + 8) == this)
        v5 = this;
      else
        v5 = 0;
    }
    else
    {
      v5 = 0;
    }
    v9 = 0;
    if (*((_DWORD *)v4 + 6) == 2)
    {
      if ((*((_WORD *)v4 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v4, v3);
    }
    else
    {
      *((_DWORD *)v4 + 6) -= 2;
    }
  }
  else
  {
    v5 = 0;
  }
  if (*((_DWORD *)this + 6) == 2)
  {
    if ((*((_WORD *)this + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(this, v3);
  }
  else
  {
    *((_DWORD *)this + 6) -= 2;
  }
  return v5;
}

uint64_t WebCore::FocusController::nextFocusableElementWithinScope(WebCore::FocusController *this, const WebCore::FocusNavigationScope *a2, WebCore::Node *a3, WebCore::KeyboardEvent *a4)
{
  int v6;
  _QWORD **v7;
  const WebCore::Node **v8;
  const WebCore::Node *v9;
  const WebCore::Node *ElementWithExactTabIndex;
  int v11;
  const WebCore::Element *v12;
  uint64_t v13;
  int v14;
  const WebCore::Element *v15;
  BOOL v16;
  _BOOL4 v17;
  BOOL v18;
  int v19;
  const WebCore::Node *v20;
  _QWORD **v21;
  WebCore::Node **v22;
  WebCore::Node *v23;
  const WebCore::Element *v25;
  void *v26;
  uint64_t v27;
  const WebCore::Node *v28;
  const WebCore::Element *v29;
  const WebCore::Element *v30;
  uint64_t v31;
  const WebCore::Node *v32;
  const WebCore::Node *v33;
  void *v34;
  void *v35;
  uint64_t FocusableElementWithinScope;
  WebCore::KeyboardEvent *v37;
  uint64_t v38;
  WebCore::KeyboardEvent *v39;
  WebCore::Node *v41;
  uint64_t v42;
  BOOL v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  const WebCore::Node *v60;
  BOOL v61;

  if (a2)
  {
    if ((*((_WORD *)a2 + 14) & 8) != 0)
    {
      *((_DWORD *)a2 + 6) += 2;
      if (((*(uint64_t (**)(const WebCore::FocusNavigationScope *, WebCore::Node *, WebCore::Node *, WebCore::KeyboardEvent *))(*(_QWORD *)a2 + 560))(a2, a3, a3, a4) & 1) != 0|| !WebCore::isFocusScopeOwner(a2, v25)|| (WebCore::Element::tabIndexSetExplicitly(a2) & 0xFF00000000) != 0)
      {
        if (((*(uint64_t (**)(const WebCore::FocusNavigationScope *))(*(_QWORD *)a2 + 1120))(a2) & 0x80000000) != 0
          && !(*(unsigned int (**)(const WebCore::FocusNavigationScope *))(*(_QWORD *)a2 + 544))(a2))
        {
          v6 = -1;
        }
        else
        {
          v27 = WebCore::Element::tabIndexSetExplicitly(a2);
          if ((v27 & 0xFF00000000) != 0)
            v6 = v27;
          else
            v6 = 0;
        }
      }
      else
      {
        v6 = 0;
      }
      if (*((_DWORD *)a2 + 6) == 2)
      {
        if ((*((_WORD *)a2 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(a2, v26);
      }
      else
      {
        *((_DWORD *)a2 + 6) -= 2;
      }
      if (v6 < 0)
      {
        v28 = WebCore::FocusNavigationScope::nextInScope(this, a2);
        if (v28)
        {
          ElementWithExactTabIndex = v28;
          do
          {
            if ((*((_WORD *)ElementWithExactTabIndex + 14) & 8) != 0
              && (((*(uint64_t (**)(const WebCore::Node *, WebCore::Node *))(*(_QWORD *)ElementWithExactTabIndex
                                                                                     + 560))(ElementWithExactTabIndex, a3) & 1) != 0|| WebCore::isFocusScopeOwner(ElementWithExactTabIndex, v29)))
            {
              if (((*(uint64_t (**)(const WebCore::Node *, WebCore::Node *))(*(_QWORD *)ElementWithExactTabIndex
                                                                                      + 560))(ElementWithExactTabIndex, a3) & 1) == 0&& WebCore::isFocusScopeOwner(ElementWithExactTabIndex, v30)&& (WebCore::Element::tabIndexSetExplicitly(ElementWithExactTabIndex) & 0xFF00000000) == 0)
              {
                goto LABEL_69;
              }
              if (((*(uint64_t (**)(const WebCore::Node *))(*(_QWORD *)ElementWithExactTabIndex + 1120))(ElementWithExactTabIndex) & 0x80000000) == 0
                || (*(unsigned int (**)(const WebCore::Node *))(*(_QWORD *)ElementWithExactTabIndex + 544))(ElementWithExactTabIndex))
              {
                v31 = WebCore::Element::tabIndexSetExplicitly(ElementWithExactTabIndex);
                if ((v31 & 0xFF00000000) == 0 || (v31 & 0x80000000) == 0)
                  goto LABEL_69;
              }
            }
            ElementWithExactTabIndex = WebCore::FocusNavigationScope::nextInScope(this, ElementWithExactTabIndex);
          }
          while (ElementWithExactTabIndex);
        }
      }
    }
    else
    {
      v6 = 0;
    }
    v32 = WebCore::FocusNavigationScope::nextInScope(this, a2);
    if (v32)
    {
      v33 = v32;
      *((_DWORD *)v32 + 6) += 2;
      ElementWithExactTabIndex = WebCore::FocusController::findElementWithExactTabIndex(this, v32, v6, (uint64_t)a3, 1);
      if (*((_DWORD *)v33 + 6) == 2)
      {
        if ((*((_WORD *)v33 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v33, v34);
      }
      else
      {
        *((_DWORD *)v33 + 6) -= 2;
      }
      if (ElementWithExactTabIndex)
        goto LABEL_69;
    }
    if (!v6)
      return 0;
  }
  else
  {
    v6 = 0;
  }
  v7 = (_QWORD **)*((_QWORD *)this + 1);
  v8 = (const WebCore::Node **)this;
  if (v7)
  {
    v42 = *v7[5];
    if (v42)
      v43 = (*(_WORD *)(v42 + 28) & 0x80) == 0;
    else
      v43 = 1;
    if (v43)
    {
      v46 = 0;
    }
    else
    {
      v44 = *(_DWORD *)(v42 + 24);
      *(_DWORD *)(v42 + 24) = v44 + 2;
      v45 = *(_QWORD *)(v42 + 224);
      if (v45)
      {
        v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 24))(v45);
        v44 = *(_DWORD *)(v42 + 24) - 2;
      }
      else
      {
        v46 = 0;
      }
      if (v44)
      {
        *(_DWORD *)(v42 + 24) = v44;
      }
      else if ((*(_WORD *)(v42 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v42, v7);
      }
    }
    if (*((_BYTE *)this + 16))
    {
      v8 = (const WebCore::Node **)(*((_QWORD *)this + 1) + 80);
    }
    else
    {
      if (!*(_DWORD *)(v46 + 12))
        goto LABEL_146;
      v52 = **(_QWORD **)v46;
      if (!v52)
        goto LABEL_36;
      v8 = (const WebCore::Node **)(v52 + 8);
    }
  }
  v9 = *v8;
  if (*v8)
  {
    ElementWithExactTabIndex = 0;
    v11 = 0x7FFFFFFF;
    do
    {
      if ((*((_WORD *)v9 + 14) & 8) != 0)
      {
        if (((*(uint64_t (**)(const WebCore::Node *, WebCore::Node *, WebCore::Node *, WebCore::KeyboardEvent *))(*(_QWORD *)v9 + 560))(v9, a3, a3, a4) & 1) != 0|| !WebCore::isFocusScopeOwner(v9, v12)|| (WebCore::Element::tabIndexSetExplicitly(v9) & 0xFF00000000) != 0)
        {
          if (((*(uint64_t (**)(const WebCore::Node *))(*(_QWORD *)v9 + 1120))(v9) & 0x80000000) != 0
            && !(*(unsigned int (**)(const WebCore::Node *))(*(_QWORD *)v9 + 544))(v9))
          {
            v14 = -1;
          }
          else
          {
            v13 = WebCore::Element::tabIndexSetExplicitly(v9);
            v14 = (v13 & 0xFF00000000) != 0 ? v13 : 0;
          }
        }
        else
        {
          v14 = 0;
        }
        if (((*(uint64_t (**)(const WebCore::Node *, WebCore::Node *))(*(_QWORD *)v9 + 560))(v9, a3) & 1) != 0
          || WebCore::isFocusScopeOwner(v9, v15))
        {
          v16 = !ElementWithExactTabIndex || v14 < v11;
          v17 = v16;
          v18 = !v17;
          v19 = v17 ? v14 : v11;
          v20 = v18 ? ElementWithExactTabIndex : v9;
          if (v14 > v6)
          {
            v11 = v19;
            ElementWithExactTabIndex = v20;
          }
        }
      }
      v9 = WebCore::FocusNavigationScope::nextInScope(this, v9);
    }
    while (v9);
    if (ElementWithExactTabIndex)
      goto LABEL_69;
  }
LABEL_36:
  v21 = (_QWORD **)*((_QWORD *)this + 1);
  v22 = (WebCore::Node **)this;
  if (!v21)
  {
LABEL_37:
    v23 = *v22;
    goto LABEL_38;
  }
  v47 = *v21[5];
  if (v47)
    v48 = (*(_WORD *)(v47 + 28) & 0x80) == 0;
  else
    v48 = 1;
  if (v48)
  {
    v51 = 0;
  }
  else
  {
    v49 = *(_DWORD *)(v47 + 24);
    *(_DWORD *)(v47 + 24) = v49 + 2;
    v50 = *(_QWORD *)(v47 + 224);
    if (v50)
    {
      v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 24))(v50);
      v49 = *(_DWORD *)(v47 + 24) - 2;
    }
    else
    {
      v51 = 0;
    }
    if (v49)
    {
      *(_DWORD *)(v47 + 24) = v49;
    }
    else if ((*(_WORD *)(v47 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v47, v21);
    }
  }
  if (*((_BYTE *)this + 16))
  {
    v22 = (WebCore::Node **)(*((_QWORD *)this + 1) + 80);
    goto LABEL_37;
  }
  if (!*(_DWORD *)(v51 + 12))
  {
LABEL_146:
    __break(0xC471u);
    JUMPOUT(0x195FC6214);
  }
  v53 = **(_QWORD **)v51;
  if (v53)
  {
    v22 = (WebCore::Node **)(v53 + 8);
    goto LABEL_37;
  }
  v23 = 0;
LABEL_38:
  ElementWithExactTabIndex = WebCore::FocusController::findElementWithExactTabIndex(this, v23, 0, (uint64_t)a3, 1);
  if (!ElementWithExactTabIndex)
    return 0;
LABEL_69:
  *((_DWORD *)ElementWithExactTabIndex + 6) += 2;
  FocusableElementWithinScope = (uint64_t)ElementWithExactTabIndex;
  if (((*(uint64_t (**)(const WebCore::Node *, WebCore::Node *))(*(_QWORD *)ElementWithExactTabIndex + 560))(ElementWithExactTabIndex, a3) & 1) == 0)
  {
    FocusableElementWithinScope = (uint64_t)ElementWithExactTabIndex;
    if (WebCore::isFocusScopeOwner(ElementWithExactTabIndex, (const WebCore::Element *)v35))
    {
      if ((*((_WORD *)ElementWithExactTabIndex + 14) & 0x10) != 0
        && *(_QWORD *)(*((_QWORD *)ElementWithExactTabIndex + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::slotTag + 24))
      {
        v54 = 0;
        *((_DWORD *)ElementWithExactTabIndex + 6) += 2;
        v55 = **((_QWORD **)ElementWithExactTabIndex + 5);
        if (v55 && (*(_WORD *)(v55 + 28) & 0x80) != 0)
        {
          v56 = *(_DWORD *)(v55 + 24);
          *(_DWORD *)(v55 + 24) = v56 + 2;
          v57 = *(_QWORD *)(v55 + 224);
          if (v57)
          {
            v54 = (*(uint64_t (**)(uint64_t, const WebCore::Node *, uint64_t))(*(_QWORD *)v57 + 24))(v57, ElementWithExactTabIndex, v55);
            v56 = *(_DWORD *)(v55 + 24) - 2;
          }
          else
          {
            v54 = 0;
          }
          if (v56)
          {
            *(_DWORD *)(v55 + 24) = v56;
          }
          else if ((*(_WORD *)(v55 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v55, v35);
          }
        }
        v58 = *((_DWORD *)ElementWithExactTabIndex + 6);
        *((_DWORD *)ElementWithExactTabIndex + 6) = v58 + 2;
        v59 = 0;
        v60 = ElementWithExactTabIndex;
        v61 = v54 == 0;
        if (v58)
        {
          *((_DWORD *)ElementWithExactTabIndex + 6) = v58;
        }
        else if ((*((_WORD *)ElementWithExactTabIndex + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(ElementWithExactTabIndex, v35);
        }
        FocusableElementWithinScope = WebCore::FocusController::nextFocusableElementWithinScope((WebCore::FocusController *)&v59, 0, a3, v37);
        if (*((_DWORD *)ElementWithExactTabIndex + 6) == 2)
        {
          if ((*((_WORD *)ElementWithExactTabIndex + 15) & 0x400) == 0)
          {
            v41 = ElementWithExactTabIndex;
            goto LABEL_92;
          }
        }
        else
        {
          *((_DWORD *)ElementWithExactTabIndex + 6) -= 2;
        }
      }
      else
      {
        v38 = *(_QWORD *)(*(_QWORD *)((*((_QWORD *)ElementWithExactTabIndex + 9) & 0xFFFFFFFFFFFFLL) + 0x58) + 96);
        *(_DWORD *)(v38 + 24) += 2;
        v59 = v38;
        v60 = 0;
        v61 = 0;
        FocusableElementWithinScope = WebCore::FocusController::nextFocusableElementWithinScope((WebCore::FocusController *)&v59, 0, a3, v37);
        if (*(_DWORD *)(v38 + 24) != 2)
        {
          *(_DWORD *)(v38 + 24) -= 2;
          goto LABEL_75;
        }
        if ((*(_WORD *)(v38 + 30) & 0x400) == 0)
        {
          v41 = (WebCore::Node *)v38;
LABEL_92:
          WebCore::Node::removedLastRef(v41, v35);
        }
      }
LABEL_75:
      if (!FocusableElementWithinScope)
        FocusableElementWithinScope = WebCore::FocusController::nextFocusableElementWithinScope(this, ElementWithExactTabIndex, a3, v39);
    }
  }
  if (*((_DWORD *)ElementWithExactTabIndex + 6) == 2)
  {
    if ((*((_WORD *)ElementWithExactTabIndex + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(ElementWithExactTabIndex, v35);
  }
  else
  {
    *((_DWORD *)ElementWithExactTabIndex + 6) -= 2;
  }
  return FocusableElementWithinScope;
}

unsigned int *WebCore::FocusController::previousFocusableElementWithinScope(unsigned int *this, const WebCore::FocusNavigationScope *a2, WebCore::Node *a3, WebCore::KeyboardEvent *a4)
{
  uint64_t v6;
  _QWORD **v7;
  WebCore::FocusNavigationScope **v8;
  WebCore::FocusNavigationScope *ChildInScope;
  uint64_t v10;
  WebCore::FocusNavigationScope *v11;
  const WebCore::Node *v12;
  WebCore::Node *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  const WebCore::Element *v22;
  void *v23;
  uint64_t v24;
  const WebCore::Node *ElementWithExactTabIndex;
  const WebCore::Element *v26;
  const WebCore::Element *v27;
  uint64_t v28;
  const WebCore::Node *v29;
  void *v30;
  __int16 v31;
  int v32;
  uint64_t v33;
  int v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char v43;
  int v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  int v52;
  const WebCore::Element *v53;
  uint64_t v54;
  int v55;
  const WebCore::Element *v56;
  char v57;
  unsigned __int8 v58;
  const WebCore::Node *v59;
  void *v60;
  __int16 v61;
  int v62;
  uint64_t v63;
  int v64;
  _BOOL4 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  WebCore::Node *v71;
  int v72;
  char v73;
  int v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const WebCore::Element *v81;
  void *v82;
  WebCore::KeyboardEvent *v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  WebCore::KeyboardEvent *v87;
  uint64_t v88;
  WebCore::KeyboardEvent *v89;
  WebCore::Node *v90;
  WebCore::Node *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  int v105;
  uint64_t v106;
  const WebCore::Node *v107;
  BOOL v108;

  v6 = (uint64_t)this;
  v7 = (_QWORD **)*((_QWORD *)this + 1);
  v8 = (WebCore::FocusNavigationScope **)this;
  if (v7)
  {
    v15 = *v7[5];
    if (v15)
      v16 = (*(_WORD *)(v15 + 28) & 0x80) == 0;
    else
      v16 = 1;
    if (v16)
    {
      v18 = 0;
    }
    else
    {
      v17 = *(_DWORD *)(v15 + 24);
      *(_DWORD *)(v15 + 24) = v17 + 2;
      this = *(unsigned int **)(v15 + 224);
      if (this)
      {
        this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 24))(this);
        v18 = this;
        v17 = *(_DWORD *)(v15 + 24) - 2;
      }
      else
      {
        v18 = 0;
      }
      if (v17)
      {
        *(_DWORD *)(v15 + 24) = v17;
      }
      else if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
      {
        this = WebCore::Node::removedLastRef((WebCore::Node *)v15, v7);
      }
    }
    if (*(_BYTE *)(v6 + 16))
    {
      v8 = (WebCore::FocusNavigationScope **)(*(_QWORD *)(v6 + 8) + 88);
    }
    else
    {
      v19 = v18[3];
      if (!(_DWORD)v19)
      {
        __break(0xC471u);
        return this;
      }
      v20 = *(_QWORD *)(*(_QWORD *)v18 + 8 * v19 - 8);
      if (!v20)
      {
LABEL_25:
        v10 = 0;
        if (a2)
          goto LABEL_5;
LABEL_26:
        v21 = 0;
        v13 = (WebCore::Node *)v10;
        goto LABEL_129;
      }
      v8 = (WebCore::FocusNavigationScope **)(v20 + 8);
    }
  }
  ChildInScope = *v8;
  if (!*v8)
    goto LABEL_25;
  do
  {
    v10 = (uint64_t)ChildInScope;
    ChildInScope = (WebCore::FocusNavigationScope *)WebCore::FocusNavigationScope::lastChildInScope(ChildInScope, (const WebCore::Node *)v7);
  }
  while (ChildInScope);
  if (!a2)
    goto LABEL_26;
LABEL_5:
  v11 = WebCore::FocusNavigationScope::previousSiblingInScope((WebCore::FocusNavigationScope *)v6, a2);
  if (!v11)
  {
    if (*(const WebCore::FocusNavigationScope **)v6 != a2)
    {
      v14 = *(_QWORD *)(v6 + 8);
      if (!v14)
      {
LABEL_10:
        v13 = (WebCore::Node *)*((_QWORD *)a2 + 4);
        goto LABEL_30;
      }
      if (*(_BYTE *)(v6 + 16))
      {
        if (v14 != *((_QWORD *)a2 + 4))
          goto LABEL_10;
      }
      else
      {
        v92 = *((_QWORD *)a2 + 4);
        if (!v92)
          goto LABEL_10;
        if ((*(_WORD *)(v92 + 28) & 8) == 0)
          goto LABEL_10;
        v93 = *(_QWORD *)(v92 + 72) & 0xFFFFFFFFFFFFLL;
        if (!v93)
          goto LABEL_10;
        v94 = *(_QWORD *)(v93 + 88);
        if (!v94)
          goto LABEL_10;
        v95 = *(_QWORD *)(v94 + 224);
        if (!v95
          || *(_QWORD *)(v6 + 8) != (*(uint64_t (**)(uint64_t, const WebCore::FocusNavigationScope *))(*(_QWORD *)v95 + 16))(v95, a2))
        {
          goto LABEL_10;
        }
      }
    }
    v13 = 0;
    goto LABEL_30;
  }
  do
  {
    v13 = v11;
    v11 = (WebCore::FocusNavigationScope *)WebCore::FocusNavigationScope::lastChildInScope(v11, v12);
  }
  while (v11);
LABEL_30:
  if ((*((_WORD *)a2 + 14) & 8) == 0)
  {
    v21 = 0;
    goto LABEL_129;
  }
  *((_DWORD *)a2 + 6) += 2;
  if (((*(uint64_t (**)(const WebCore::FocusNavigationScope *, WebCore::Node *))(*(_QWORD *)a2 + 560))(a2, a3) & 1) != 0|| !WebCore::isFocusScopeOwner(a2, v22)|| (WebCore::Element::tabIndexSetExplicitly(a2) & 0xFF00000000) != 0)
  {
    if (((*(uint64_t (**)(const WebCore::FocusNavigationScope *))(*(_QWORD *)a2 + 1120))(a2) & 0x80000000) != 0
      && !(*(unsigned int (**)(const WebCore::FocusNavigationScope *))(*(_QWORD *)a2 + 544))(a2))
    {
      v21 = -1;
    }
    else
    {
      v24 = WebCore::Element::tabIndexSetExplicitly(a2);
      if ((v24 & 0xFF00000000) != 0)
        v21 = v24;
      else
        v21 = 0;
    }
  }
  else
  {
    v21 = 0;
  }
  if (*((_DWORD *)a2 + 6) == 2)
  {
    if ((*((_WORD *)a2 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(a2, v23);
  }
  else
  {
    *((_DWORD *)a2 + 6) -= 2;
  }
  if (v21 < 0 && v13)
  {
    ElementWithExactTabIndex = v13;
    while (1)
    {
      if ((*((_WORD *)ElementWithExactTabIndex + 14) & 8) != 0
        && (((*(uint64_t (**)(const WebCore::Node *, WebCore::Node *))(*(_QWORD *)ElementWithExactTabIndex
                                                                               + 560))(ElementWithExactTabIndex, a3) & 1) != 0|| WebCore::isFocusScopeOwner(ElementWithExactTabIndex, v26)))
      {
        if (((*(uint64_t (**)(const WebCore::Node *, WebCore::Node *))(*(_QWORD *)ElementWithExactTabIndex
                                                                                + 560))(ElementWithExactTabIndex, a3) & 1) == 0&& WebCore::isFocusScopeOwner(ElementWithExactTabIndex, v27)&& (WebCore::Element::tabIndexSetExplicitly(ElementWithExactTabIndex) & 0xFF00000000) == 0)
        {
          goto LABEL_227;
        }
        if (((*(uint64_t (**)(const WebCore::Node *))(*(_QWORD *)ElementWithExactTabIndex + 1120))(ElementWithExactTabIndex) & 0x80000000) == 0
          || (*(unsigned int (**)(const WebCore::Node *))(*(_QWORD *)ElementWithExactTabIndex + 544))(ElementWithExactTabIndex))
        {
          v28 = WebCore::Element::tabIndexSetExplicitly(ElementWithExactTabIndex);
          if ((v28 & 0xFF00000000) == 0 || (v28 & 0x80000000) == 0)
            goto LABEL_227;
        }
      }
      v29 = WebCore::FocusNavigationScope::previousSiblingInScope((WebCore::FocusNavigationScope *)v6, ElementWithExactTabIndex);
      if (!v29)
      {
        if (*(const WebCore::Node **)v6 == ElementWithExactTabIndex)
          goto LABEL_129;
        v46 = *(_QWORD *)(v6 + 8);
        if (v46)
        {
          if (*(_BYTE *)(v6 + 16))
          {
            if (v46 == *((_QWORD *)ElementWithExactTabIndex + 4))
              goto LABEL_129;
          }
          else
          {
            v47 = *((_QWORD *)ElementWithExactTabIndex + 4);
            if (v47)
            {
              if ((*(_WORD *)(v47 + 28) & 8) != 0)
              {
                v48 = *(_QWORD *)(v47 + 72) & 0xFFFFFFFFFFFFLL;
                if (v48)
                {
                  v49 = *(_QWORD *)(v48 + 88);
                  if (v49)
                  {
                    v50 = *(_QWORD *)(v49 + 224);
                    if (v50)
                    {
                      if (*(_QWORD *)(v6 + 8) == (*(uint64_t (**)(uint64_t, const WebCore::Node *))(*(_QWORD *)v50 + 16))(v50, ElementWithExactTabIndex))goto LABEL_129;
                    }
                  }
                }
              }
            }
          }
        }
        ElementWithExactTabIndex = (const WebCore::Node *)*((_QWORD *)ElementWithExactTabIndex + 4);
        goto LABEL_110;
      }
      ElementWithExactTabIndex = v29;
LABEL_56:
      v31 = *((_WORD *)ElementWithExactTabIndex + 14);
      if ((v31 & 8) == 0)
        goto LABEL_62;
      v32 = *((_DWORD *)ElementWithExactTabIndex + 6);
      *((_DWORD *)ElementWithExactTabIndex + 6) = v32 + 2;
      if ((*((_QWORD *)ElementWithExactTabIndex + 9) & 0xFFFFFFFFFFFFLL) != 0
        && *(_QWORD *)((*((_QWORD *)ElementWithExactTabIndex + 9) & 0xFFFFFFFFFFFFLL) + 0x58))
      {
        if ((v31 & 0x10) == 0)
          goto LABEL_105;
        *((_DWORD *)ElementWithExactTabIndex + 6) = v32 + 4;
        v44 = (*(uint64_t (**)(const WebCore::Node *))(*(_QWORD *)ElementWithExactTabIndex + 1152))(ElementWithExactTabIndex);
        v45 = v44;
        if (*((_DWORD *)ElementWithExactTabIndex + 6) == 2)
        {
          if ((*((_WORD *)ElementWithExactTabIndex + 15) & 0x400) != 0)
          {
            if (!v44)
              goto LABEL_105;
          }
          else
          {
            WebCore::Node::removedLastRef(ElementWithExactTabIndex, v30);
            if ((v45 & 1) == 0)
              goto LABEL_105;
          }
        }
        else
        {
          *((_DWORD *)ElementWithExactTabIndex + 6) -= 2;
          if ((v44 & 1) == 0)
            goto LABEL_105;
        }
      }
      if ((*((_WORD *)ElementWithExactTabIndex + 14) & 0x10) == 0
        || *(_QWORD *)(*((_QWORD *)ElementWithExactTabIndex + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::slotTag + 24))
      {
        goto LABEL_60;
      }
      v38 = **((_QWORD **)ElementWithExactTabIndex + 5);
      if (v38 && (*(_WORD *)(v38 + 28) & 0x80) != 0)
      {
        v40 = *(_QWORD *)(v38 + 200);
        if (v40)
        {
          v41 = *(_QWORD *)(v40 + 8);
          if (v41)
          {
            if ((*(_WORD *)(v41 + 28) & 0x10) != 0)
              break;
          }
        }
      }
LABEL_105:
      if (*((_DWORD *)ElementWithExactTabIndex + 6) == 2)
      {
        if ((*((_WORD *)ElementWithExactTabIndex + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(ElementWithExactTabIndex, v30);
      }
      else
      {
        *((_DWORD *)ElementWithExactTabIndex + 6) -= 2;
      }
LABEL_110:
      if (!ElementWithExactTabIndex)
        goto LABEL_129;
    }
    *(_DWORD *)(v41 + 24) += 2;
    v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 1152))(v41);
    v43 = v42;
    if (*(_DWORD *)(v41 + 24) == 2)
    {
      if ((*(_WORD *)(v41 + 30) & 0x400) != 0)
      {
        if (!v42)
          goto LABEL_105;
      }
      else
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v41, v30);
        if ((v43 & 1) == 0)
          goto LABEL_105;
      }
    }
    else
    {
      *(_DWORD *)(v41 + 24) -= 2;
      if ((v42 & 1) == 0)
        goto LABEL_105;
    }
LABEL_60:
    if (*((_DWORD *)ElementWithExactTabIndex + 6) == 2)
    {
      if ((*((_WORD *)ElementWithExactTabIndex + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(ElementWithExactTabIndex, v30);
    }
    else
    {
      *((_DWORD *)ElementWithExactTabIndex + 6) -= 2;
    }
LABEL_62:
    if ((*((_WORD *)ElementWithExactTabIndex + 14) & 4) == 0)
      goto LABEL_110;
    v33 = *((_QWORD *)ElementWithExactTabIndex + 11);
    if (!v33)
      goto LABEL_110;
    while (1)
    {
      if ((*(_WORD *)(v33 + 28) & 0x10) == 0)
      {
LABEL_78:
        ElementWithExactTabIndex = (const WebCore::Node *)v33;
        goto LABEL_56;
      }
      v34 = *(_DWORD *)(v33 + 24);
      *(_DWORD *)(v33 + 24) = v34 + 2;
      if ((*(_QWORD *)(v33 + 72) & 0xFFFFFFFFFFFFLL) != 0
        && (v36 = *(_QWORD *)((*(_QWORD *)(v33 + 72) & 0xFFFFFFFFFFFFLL) + 0xE8)) != 0
        && *(_BYTE *)(v36 + 1)
        && (v37 = *(_QWORD *)(v36 + 16)) != 0)
      {
        v35 = *(_QWORD *)(v37 + 8) != 0;
        if (v34)
        {
LABEL_67:
          *(_DWORD *)(v33 + 24) = v34;
          if (!v35)
            goto LABEL_78;
          goto LABEL_68;
        }
      }
      else
      {
        v35 = 0;
        if (v34)
          goto LABEL_67;
      }
      if ((*(_WORD *)(v33 + 30) & 0x400) != 0)
      {
        if (!v35)
          goto LABEL_78;
      }
      else
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v33, v30);
        if (!v35)
          goto LABEL_78;
      }
LABEL_68:
      v33 = *(_QWORD *)(v33 + 48) & 0xFFFFFFFFFFFFLL;
      if (!v33)
        goto LABEL_110;
    }
  }
LABEL_129:
  ElementWithExactTabIndex = WebCore::FocusController::findElementWithExactTabIndex((WebCore::FocusNavigationScope *)v6, v13, v21, (uint64_t)a3, 2);
  if (ElementWithExactTabIndex)
  {
LABEL_227:
    *((_DWORD *)ElementWithExactTabIndex + 6) += 2;
    if ((*(unsigned int (**)(const WebCore::Node *, WebCore::Node *))(*(_QWORD *)ElementWithExactTabIndex
                                                                                + 560))(ElementWithExactTabIndex, a3)&& WebCore::isFocusScopeOwner(ElementWithExactTabIndex, v81))
    {
      if ((*((_WORD *)ElementWithExactTabIndex + 14) & 0x10) != 0
        && *(_QWORD *)(*((_QWORD *)ElementWithExactTabIndex + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::slotTag + 24))
      {
        v96 = 0;
        *((_DWORD *)ElementWithExactTabIndex + 6) += 2;
        v97 = **((_QWORD **)ElementWithExactTabIndex + 5);
        if (v97 && (*(_WORD *)(v97 + 28) & 0x80) != 0)
        {
          v98 = *(_DWORD *)(v97 + 24);
          *(_DWORD *)(v97 + 24) = v98 + 2;
          v99 = *(_QWORD *)(v97 + 224);
          if (v99)
          {
            v96 = (*(uint64_t (**)(uint64_t, const WebCore::Node *, uint64_t))(*(_QWORD *)v99 + 24))(v99, ElementWithExactTabIndex, v97);
            v98 = *(_DWORD *)(v97 + 24) - 2;
          }
          else
          {
            v96 = 0;
          }
          if (v98)
          {
            *(_DWORD *)(v97 + 24) = v98;
          }
          else if ((*(_WORD *)(v97 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v97, v82);
          }
        }
        v104 = *((_DWORD *)ElementWithExactTabIndex + 6);
        *((_DWORD *)ElementWithExactTabIndex + 6) = v104 + 2;
        v106 = 0;
        v107 = ElementWithExactTabIndex;
        v108 = v96 == 0;
        if (v104)
        {
          *((_DWORD *)ElementWithExactTabIndex + 6) = v104;
        }
        else if ((*((_WORD *)ElementWithExactTabIndex + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(ElementWithExactTabIndex, v82);
        }
        v86 = WebCore::FocusController::previousFocusableElementWithinScope((WebCore::FocusController *)&v106, 0, a3, v83);
        if (*((_DWORD *)ElementWithExactTabIndex + 6) == 2)
        {
          if ((*((_WORD *)ElementWithExactTabIndex + 15) & 0x400) == 0)
          {
            v90 = ElementWithExactTabIndex;
            goto LABEL_251;
          }
        }
        else
        {
          *((_DWORD *)ElementWithExactTabIndex + 6) -= 2;
        }
      }
      else
      {
        v84 = *(_QWORD *)(*(_QWORD *)((*((_QWORD *)ElementWithExactTabIndex + 9) & 0xFFFFFFFFFFFFLL) + 0x58) + 96);
        *(_DWORD *)(v84 + 24) += 2;
        v106 = v84;
        v107 = 0;
        v108 = 0;
        v86 = WebCore::FocusController::previousFocusableElementWithinScope((WebCore::FocusController *)&v106, 0, a3, v83);
        if (*(_DWORD *)(v84 + 24) != 2)
        {
          *(_DWORD *)(v84 + 24) -= 2;
          goto LABEL_233;
        }
        if ((*(_WORD *)(v84 + 30) & 0x400) == 0)
        {
          v90 = (WebCore::Node *)v84;
LABEL_251:
          WebCore::Node::removedLastRef(v90, v85);
        }
      }
LABEL_233:
      if (v86)
        v10 = v86;
      else
        v10 = (uint64_t)ElementWithExactTabIndex;
LABEL_244:
      if (*((_DWORD *)ElementWithExactTabIndex + 6) == 2)
      {
        if ((*((_WORD *)ElementWithExactTabIndex + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(ElementWithExactTabIndex, v85);
      }
      else
      {
        *((_DWORD *)ElementWithExactTabIndex + 6) -= 2;
      }
      return (unsigned int *)v10;
    }
    v10 = (uint64_t)ElementWithExactTabIndex;
    if (((*(uint64_t (**)(const WebCore::Node *, WebCore::Node *))(*(_QWORD *)ElementWithExactTabIndex + 560))(ElementWithExactTabIndex, a3) & 1) != 0)goto LABEL_244;
    v10 = (uint64_t)ElementWithExactTabIndex;
    if (!WebCore::isFocusScopeOwner(ElementWithExactTabIndex, (const WebCore::Element *)v85))
      goto LABEL_244;
    if ((*((_WORD *)ElementWithExactTabIndex + 14) & 0x10) != 0
      && *(_QWORD *)(*((_QWORD *)ElementWithExactTabIndex + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::slotTag + 24))
    {
      v100 = 0;
      *((_DWORD *)ElementWithExactTabIndex + 6) += 2;
      v101 = **((_QWORD **)ElementWithExactTabIndex + 5);
      if (v101 && (*(_WORD *)(v101 + 28) & 0x80) != 0)
      {
        v102 = *(_DWORD *)(v101 + 24);
        *(_DWORD *)(v101 + 24) = v102 + 2;
        v103 = *(_QWORD *)(v101 + 224);
        if (v103)
        {
          v100 = (*(uint64_t (**)(uint64_t, const WebCore::Node *, uint64_t))(*(_QWORD *)v103 + 24))(v103, ElementWithExactTabIndex, v101);
          v102 = *(_DWORD *)(v101 + 24) - 2;
        }
        else
        {
          v100 = 0;
        }
        if (v102)
        {
          *(_DWORD *)(v101 + 24) = v102;
        }
        else if ((*(_WORD *)(v101 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v101, v85);
        }
      }
      v105 = *((_DWORD *)ElementWithExactTabIndex + 6);
      *((_DWORD *)ElementWithExactTabIndex + 6) = v105 + 2;
      v106 = 0;
      v107 = ElementWithExactTabIndex;
      v108 = v100 == 0;
      if (v105)
      {
        *((_DWORD *)ElementWithExactTabIndex + 6) = v105;
      }
      else if ((*((_WORD *)ElementWithExactTabIndex + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(ElementWithExactTabIndex, v85);
      }
      v10 = WebCore::FocusController::previousFocusableElementWithinScope((WebCore::FocusController *)&v106, 0, a3, v87);
      if (*((_DWORD *)ElementWithExactTabIndex + 6) == 2)
      {
        if ((*((_WORD *)ElementWithExactTabIndex + 15) & 0x400) == 0)
        {
          v91 = ElementWithExactTabIndex;
          goto LABEL_254;
        }
      }
      else
      {
        *((_DWORD *)ElementWithExactTabIndex + 6) -= 2;
      }
    }
    else
    {
      v88 = *(_QWORD *)(*(_QWORD *)((*((_QWORD *)ElementWithExactTabIndex + 9) & 0xFFFFFFFFFFFFLL) + 0x58) + 96);
      *(_DWORD *)(v88 + 24) += 2;
      v106 = v88;
      v107 = 0;
      v108 = 0;
      v10 = WebCore::FocusController::previousFocusableElementWithinScope((WebCore::FocusController *)&v106, 0, a3, v87);
      if (*(_DWORD *)(v88 + 24) != 2)
      {
        *(_DWORD *)(v88 + 24) -= 2;
        goto LABEL_242;
      }
      if ((*(_WORD *)(v88 + 30) & 0x400) == 0)
      {
        v91 = (WebCore::Node *)v88;
LABEL_254:
        WebCore::Node::removedLastRef(v91, v85);
      }
    }
LABEL_242:
    if (!v10)
      v10 = WebCore::FocusController::previousFocusableElementWithinScope((WebCore::FocusController *)v6, ElementWithExactTabIndex, a3, v89);
    goto LABEL_244;
  }
  if (v21)
    v51 = a2 == 0;
  else
    v51 = 1;
  if (v51)
    v21 = 0x7FFFFFFF;
  if (!v10)
    return (unsigned int *)v10;
  ElementWithExactTabIndex = 0;
  v52 = 0;
  do
  {
    if ((*(_WORD *)(v10 + 28) & 8) != 0)
    {
      if (((*(uint64_t (**)(uint64_t, WebCore::Node *))(*(_QWORD *)v10 + 560))(v10, a3) & 1) != 0
        || !WebCore::isFocusScopeOwner((WebCore *)v10, v53)
        || (WebCore::Element::tabIndexSetExplicitly((WebCore::Element *)v10) & 0xFF00000000) != 0)
      {
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 1120))(v10) & 0x80000000) != 0
          && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 544))(v10))
        {
          v55 = -1;
        }
        else
        {
          v54 = WebCore::Element::tabIndexSetExplicitly((WebCore::Element *)v10);
          v55 = (v54 & 0xFF00000000) != 0 ? v54 : 0;
        }
      }
      else
      {
        v55 = 0;
      }
      v57 = ((*(uint64_t (**)(uint64_t, WebCore::Node *))(*(_QWORD *)v10 + 560))(v10, a3) & 1) != 0
          ? 1
          : WebCore::isFocusScopeOwner((WebCore *)v10, v56);
      v58 = v55 < v21 ? v57 : 0;
      if ((v58 & (v55 > v52)) != 0)
      {
        v52 = v55;
        ElementWithExactTabIndex = (const WebCore::Node *)v10;
      }
    }
    v59 = WebCore::FocusNavigationScope::previousSiblingInScope((WebCore::FocusNavigationScope *)v6, (const WebCore::Node *)v10);
    if (!v59)
    {
      if (*(_QWORD *)v6 == v10)
        break;
      v76 = *(_QWORD *)(v6 + 8);
      if (v76)
      {
        if (*(_BYTE *)(v6 + 16))
        {
          if (v76 == *(_QWORD *)(v10 + 32))
            break;
        }
        else
        {
          v77 = *(_QWORD *)(v10 + 32);
          if (v77)
          {
            if ((*(_WORD *)(v77 + 28) & 8) != 0)
            {
              v78 = *(_QWORD *)(v77 + 72) & 0xFFFFFFFFFFFFLL;
              if (v78)
              {
                v79 = *(_QWORD *)(v78 + 88);
                if (v79)
                {
                  v80 = *(_QWORD *)(v79 + 224);
                  if (v80)
                  {
                    if (*(_QWORD *)(v6 + 8) == (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v80 + 16))(v80, v10))break;
                  }
                }
              }
            }
          }
        }
      }
      v10 = *(_QWORD *)(v10 + 32);
      continue;
    }
    v10 = (uint64_t)v59;
LABEL_157:
    v61 = *(_WORD *)(v10 + 28);
    if ((v61 & 8) == 0)
      goto LABEL_163;
    v62 = *(_DWORD *)(v10 + 24);
    *(_DWORD *)(v10 + 24) = v62 + 2;
    if ((*(_QWORD *)(v10 + 72) & 0xFFFFFFFFFFFFLL) != 0
      && *(_QWORD *)((*(_QWORD *)(v10 + 72) & 0xFFFFFFFFFFFFLL) + 0x58))
    {
      if ((v61 & 0x10) == 0)
        goto LABEL_206;
      *(_DWORD *)(v10 + 24) = v62 + 4;
      v74 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 1152))(v10);
      v75 = v74;
      if (*(_DWORD *)(v10 + 24) == 2)
      {
        if ((*(_WORD *)(v10 + 30) & 0x400) != 0)
        {
          if (!v74)
            goto LABEL_206;
        }
        else
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v10, v60);
          if ((v75 & 1) == 0)
            goto LABEL_206;
        }
      }
      else
      {
        *(_DWORD *)(v10 + 24) -= 2;
        if ((v74 & 1) == 0)
          goto LABEL_206;
      }
    }
    if ((*(_WORD *)(v10 + 28) & 0x10) == 0
      || *(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::slotTag + 24))
    {
      goto LABEL_161;
    }
    v68 = **(_QWORD **)(v10 + 40);
    if (v68)
      v69 = (*(_WORD *)(v68 + 28) & 0x80) == 0;
    else
      v69 = 1;
    if (!v69)
    {
      v70 = *(_QWORD *)(v68 + 200);
      if (v70)
      {
        v71 = *(WebCore::Node **)(v70 + 8);
        if (v71)
        {
          if ((*((_WORD *)v71 + 14) & 0x10) != 0)
          {
            *((_DWORD *)v71 + 6) += 2;
            v72 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v71 + 1152))(v71);
            v73 = v72;
            if (*((_DWORD *)v71 + 6) == 2)
            {
              if ((*((_WORD *)v71 + 15) & 0x400) != 0)
              {
                if (!v72)
                  goto LABEL_206;
              }
              else
              {
                WebCore::Node::removedLastRef(v71, v60);
                if ((v73 & 1) == 0)
                  goto LABEL_206;
              }
            }
            else
            {
              *((_DWORD *)v71 + 6) -= 2;
              if ((v72 & 1) == 0)
                goto LABEL_206;
            }
LABEL_161:
            if (*(_DWORD *)(v10 + 24) == 2)
            {
              if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v10, v60);
            }
            else
            {
              *(_DWORD *)(v10 + 24) -= 2;
            }
LABEL_163:
            if ((*(_WORD *)(v10 + 28) & 4) == 0)
              continue;
            v63 = *(_QWORD *)(v10 + 88);
            if (!v63)
              continue;
            while (1)
            {
              if ((*(_WORD *)(v63 + 28) & 0x10) == 0)
              {
LABEL_179:
                v10 = v63;
                goto LABEL_157;
              }
              v64 = *(_DWORD *)(v63 + 24);
              *(_DWORD *)(v63 + 24) = v64 + 2;
              if ((*(_QWORD *)(v63 + 72) & 0xFFFFFFFFFFFFLL) != 0
                && (v66 = *(_QWORD *)((*(_QWORD *)(v63 + 72) & 0xFFFFFFFFFFFFLL) + 0xE8)) != 0
                && *(_BYTE *)(v66 + 1)
                && (v67 = *(_QWORD *)(v66 + 16)) != 0)
              {
                v65 = *(_QWORD *)(v67 + 8) != 0;
                if (v64)
                {
LABEL_168:
                  *(_DWORD *)(v63 + 24) = v64;
                  if (!v65)
                    goto LABEL_179;
                  goto LABEL_169;
                }
              }
              else
              {
                v65 = 0;
                if (v64)
                  goto LABEL_168;
              }
              if ((*(_WORD *)(v63 + 30) & 0x400) != 0)
              {
                if (!v65)
                  goto LABEL_179;
              }
              else
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v63, v60);
                if (!v65)
                  goto LABEL_179;
              }
LABEL_169:
              v63 = *(_QWORD *)(v63 + 48) & 0xFFFFFFFFFFFFLL;
              if (!v63)
                goto LABEL_211;
            }
          }
        }
      }
    }
LABEL_206:
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10, v60);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
LABEL_211:
    ;
  }
  while (v10);
  if (ElementWithExactTabIndex)
    goto LABEL_227;
  return 0;
}

const WebCore::Node *WebCore::FocusController::findElementWithExactTabIndex(WebCore::FocusNavigationScope *this, WebCore::Node *a2, int a3, uint64_t a4, int a5)
{
  const WebCore::Node *i;
  const WebCore::Element *v9;
  const WebCore::Element *v10;
  uint64_t v11;
  int v12;
  const WebCore::Element *v13;
  const WebCore::Element *v14;
  uint64_t v15;
  int v16;
  const WebCore::Node *v17;
  void *v18;
  __int16 v19;
  int v20;
  uint64_t v21;
  int v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  WebCore::Node *v29;
  int v30;
  char v31;
  int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  i = a2;
  if (!a2)
    return i;
  if (a5 == 1)
  {
    do
    {
      if ((*((_WORD *)i + 14) & 8) != 0
        && (((*(uint64_t (**)(const WebCore::Node *, uint64_t))(*(_QWORD *)i + 560))(i, a4) & 1) != 0
         || WebCore::isFocusScopeOwner(i, v9)))
      {
        if (((*(uint64_t (**)(const WebCore::Node *, uint64_t))(*(_QWORD *)i + 560))(i, a4) & 1) != 0
          || !WebCore::isFocusScopeOwner(i, v10)
          || (WebCore::Element::tabIndexSetExplicitly(i) & 0xFF00000000) != 0)
        {
          if (((*(uint64_t (**)(const WebCore::Node *))(*(_QWORD *)i + 1120))(i) & 0x80000000) != 0
            && !(*(unsigned int (**)(const WebCore::Node *))(*(_QWORD *)i + 544))(i))
          {
            v12 = -1;
          }
          else
          {
            v11 = WebCore::Element::tabIndexSetExplicitly(i);
            v12 = (v11 & 0xFF00000000) != 0 ? v11 : 0;
          }
        }
        else
        {
          v12 = 0;
        }
        if (v12 == a3)
          break;
      }
      i = WebCore::FocusNavigationScope::nextInScope(this, i);
    }
    while (i);
    return i;
  }
  do
  {
    if ((*((_WORD *)i + 14) & 8) != 0
      && (((*(uint64_t (**)(const WebCore::Node *, uint64_t))(*(_QWORD *)i + 560))(i, a4) & 1) != 0
       || WebCore::isFocusScopeOwner(i, v13)))
    {
      if (((*(uint64_t (**)(const WebCore::Node *, uint64_t))(*(_QWORD *)i + 560))(i, a4) & 1) != 0
        || !WebCore::isFocusScopeOwner(i, v14)
        || (WebCore::Element::tabIndexSetExplicitly(i) & 0xFF00000000) != 0)
      {
        if (((*(uint64_t (**)(const WebCore::Node *))(*(_QWORD *)i + 1120))(i) & 0x80000000) != 0
          && !(*(unsigned int (**)(const WebCore::Node *))(*(_QWORD *)i + 544))(i))
        {
          v16 = -1;
        }
        else
        {
          v15 = WebCore::Element::tabIndexSetExplicitly(i);
          v16 = (v15 & 0xFF00000000) != 0 ? v15 : 0;
        }
      }
      else
      {
        v16 = 0;
      }
      if (v16 == a3)
        return i;
    }
    v17 = WebCore::FocusNavigationScope::previousSiblingInScope(this, i);
    if (!v17)
    {
      if (*(const WebCore::Node **)this != i)
      {
        v34 = *((_QWORD *)this + 1);
        if (!v34)
        {
LABEL_86:
          i = (const WebCore::Node *)*((_QWORD *)i + 4);
          continue;
        }
        if (*((_BYTE *)this + 16))
        {
          if (v34 != *((_QWORD *)i + 4))
            goto LABEL_86;
        }
        else
        {
          v35 = *((_QWORD *)i + 4);
          if (!v35)
            goto LABEL_86;
          if ((*(_WORD *)(v35 + 28) & 8) == 0)
            goto LABEL_86;
          v36 = *(_QWORD *)(v35 + 72) & 0xFFFFFFFFFFFFLL;
          if (!v36)
            goto LABEL_86;
          v37 = *(_QWORD *)(v36 + 88);
          if (!v37)
            goto LABEL_86;
          v38 = *(_QWORD *)(v37 + 224);
          if (!v38
            || *((_QWORD *)this + 1) != (*(uint64_t (**)(uint64_t, const WebCore::Node *))(*(_QWORD *)v38 + 16))(v38, i))
          {
            goto LABEL_86;
          }
        }
      }
      return 0;
    }
    for (i = v17; ; i = (const WebCore::Node *)v21)
    {
      v19 = *((_WORD *)i + 14);
      if ((v19 & 8) == 0)
        goto LABEL_39;
      v20 = *((_DWORD *)i + 6);
      *((_DWORD *)i + 6) = v20 + 2;
      if ((*((_QWORD *)i + 9) & 0xFFFFFFFFFFFFLL) != 0 && *(_QWORD *)((*((_QWORD *)i + 9) & 0xFFFFFFFFFFFFLL) + 0x58))
      {
        if ((v19 & 0x10) == 0)
          goto LABEL_82;
        *((_DWORD *)i + 6) = v20 + 4;
        v32 = (*(uint64_t (**)(const WebCore::Node *))(*(_QWORD *)i + 1152))(i);
        v33 = v32;
        if (*((_DWORD *)i + 6) == 2)
        {
          if ((*((_WORD *)i + 15) & 0x400) != 0)
          {
            if (!v32)
              goto LABEL_82;
          }
          else
          {
            WebCore::Node::removedLastRef(i, v18);
            if ((v33 & 1) == 0)
              goto LABEL_82;
          }
        }
        else
        {
          *((_DWORD *)i + 6) -= 2;
          if ((v32 & 1) == 0)
            goto LABEL_82;
        }
      }
      if ((*((_WORD *)i + 14) & 0x10) != 0
        && *(_QWORD *)(*((_QWORD *)i + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::slotTag + 24))
      {
        break;
      }
LABEL_37:
      if (*((_DWORD *)i + 6) == 2)
      {
        if ((*((_WORD *)i + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(i, v18);
      }
      else
      {
        *((_DWORD *)i + 6) -= 2;
      }
LABEL_39:
      if ((*((_WORD *)i + 14) & 4) == 0)
        goto LABEL_87;
      v21 = *((_QWORD *)i + 11);
      if (!v21)
        goto LABEL_87;
      while ((*(_WORD *)(v21 + 28) & 0x10) != 0)
      {
        v22 = *(_DWORD *)(v21 + 24);
        *(_DWORD *)(v21 + 24) = v22 + 2;
        if ((*(_QWORD *)(v21 + 72) & 0xFFFFFFFFFFFFLL) != 0
          && (v24 = *(_QWORD *)((*(_QWORD *)(v21 + 72) & 0xFFFFFFFFFFFFLL) + 0xE8)) != 0
          && *(_BYTE *)(v24 + 1)
          && (v25 = *(_QWORD *)(v24 + 16)) != 0)
        {
          v23 = *(_QWORD *)(v25 + 8) != 0;
          if (v22)
          {
LABEL_44:
            *(_DWORD *)(v21 + 24) = v22;
            if (!v23)
              break;
            goto LABEL_45;
          }
        }
        else
        {
          v23 = 0;
          if (v22)
            goto LABEL_44;
        }
        if ((*(_WORD *)(v21 + 30) & 0x400) != 0)
        {
          if (!v23)
            break;
        }
        else
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v21, v18);
          if (!v23)
            break;
        }
LABEL_45:
        v21 = *(_QWORD *)(v21 + 48) & 0xFFFFFFFFFFFFLL;
        if (!v21)
          goto LABEL_87;
      }
    }
    v26 = **((_QWORD **)i + 5);
    if (v26)
      v27 = (*(_WORD *)(v26 + 28) & 0x80) == 0;
    else
      v27 = 1;
    if (!v27)
    {
      v28 = *(_QWORD *)(v26 + 200);
      if (v28)
      {
        v29 = *(WebCore::Node **)(v28 + 8);
        if (v29)
        {
          if ((*((_WORD *)v29 + 14) & 0x10) != 0)
          {
            *((_DWORD *)v29 + 6) += 2;
            v30 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v29 + 1152))(v29);
            v31 = v30;
            if (*((_DWORD *)v29 + 6) == 2)
            {
              if ((*((_WORD *)v29 + 15) & 0x400) != 0)
              {
                if (!v30)
                  goto LABEL_82;
              }
              else
              {
                WebCore::Node::removedLastRef(v29, v18);
                if ((v31 & 1) == 0)
                  goto LABEL_82;
              }
            }
            else
            {
              *((_DWORD *)v29 + 6) -= 2;
              if ((v30 & 1) == 0)
                goto LABEL_82;
            }
            goto LABEL_37;
          }
        }
      }
    }
LABEL_82:
    if (*((_DWORD *)i + 6) == 2)
    {
      if ((*((_WORD *)i + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(i, v18);
    }
    else
    {
      *((_DWORD *)i + 6) -= 2;
    }
LABEL_87:
    ;
  }
  while (i);
  return i;
}

WebCore *WebCore::FocusController::nextFocusableElement(WebCore::FocusController *this, WebCore::Node *a2)
{
  unsigned int *v3;
  void *v4;
  WebCore *FocusableElementAcrossFocusScope;
  WebCore::Node *v7;
  WebCore::Node *v8;

  v3 = WebCore::FocusNavigationScope::scopeOf(a2, a2, (uint64_t)&v7);
  FocusableElementAcrossFocusScope = WebCore::FocusController::findFocusableElementAcrossFocusScope((uint64_t)v3, (void *)1, (WebCore::FocusController *)&v7, (uint64_t)a2, 0);
  if (v8)
  {
    if (*((_DWORD *)v8 + 6) == 2)
    {
      if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v8, v4);
    }
    else
    {
      *((_DWORD *)v8 + 6) -= 2;
    }
  }
  if (v7)
  {
    if (*((_DWORD *)v7 + 6) == 2)
    {
      if ((*((_WORD *)v7 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v7, v4);
    }
    else
    {
      *((_DWORD *)v7 + 6) -= 2;
    }
  }
  return FocusableElementAcrossFocusScope;
}

WebCore *WebCore::FocusController::previousFocusableElement(WebCore::FocusController *this, WebCore::Node *a2)
{
  unsigned int *v3;
  void *v4;
  WebCore *FocusableElementAcrossFocusScope;
  WebCore::Node *v7;
  WebCore::Node *v8;

  v3 = WebCore::FocusNavigationScope::scopeOf(a2, a2, (uint64_t)&v7);
  FocusableElementAcrossFocusScope = WebCore::FocusController::findFocusableElementAcrossFocusScope((uint64_t)v3, (void *)2, (WebCore::FocusController *)&v7, (uint64_t)a2, 0);
  if (v8)
  {
    if (*((_DWORD *)v8 + 6) == 2)
    {
      if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v8, v4);
    }
    else
    {
      *((_DWORD *)v8 + 6) -= 2;
    }
  }
  if (v7)
  {
    if (*((_DWORD *)v7 + 6) == 2)
    {
      if ((*((_WORD *)v7 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v7, v4);
    }
    else
    {
      *((_DWORD *)v7 + 6) -= 2;
    }
  }
  return FocusableElementAcrossFocusScope;
}

uint64_t WebCore::FocusController::setFocusedElement(_QWORD *a1, uint64_t a2, unsigned int *a3, _BYTE *a4)
{
  uint64_t v4;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  WebCore::Node *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  WebCore::Frame *v20;
  char v21;
  char v22;
  BOOL v23;
  BOOL v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  WTF::MonotonicTime *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *v40;
  unsigned int v41;
  WTF *v42;
  void *v43;
  WebCore::Element *v44;
  WebCore::Node *v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  WebCore::Node *v53;
  WebCore::Node *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BOOL8 isRootEditableElement;
  uint64_t v59;
  BOOL v60;
  unsigned int *v61;
  unsigned int v62;
  WebCore::Node *v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  _QWORD *v67;
  _QWORD *v68;
  BOOL v69;
  char v70;
  unsigned int *v71;
  int v73;
  char v74;
  _QWORD *v76;

  v4 = a2;
  v6 = a3 + 2;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = a1[2];
  if (!v8)
    goto LABEL_4;
  v11 = *(_QWORD *)(v8 + 8);
  if (!v11)
  {
    v9 = 0;
    v10 = 0;
    goto LABEL_5;
  }
  if (*(_BYTE *)(v11 + 144))
  {
LABEL_4:
    v9 = 0;
    v10 = 0;
    v11 = 0;
LABEL_5:
    v12 = 0;
    v13 = 1;
    v14 = 1;
    v15 = 1;
    goto LABEL_6;
  }
  v40 = (unsigned int *)(v11 + 8);
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 + 1, v40));
  v10 = *(_QWORD *)(v11 + 296);
  if (v10)
  {
    *(_DWORD *)(v10 + 24) += 2;
    v9 = *(WebCore::Node **)(v10 + 1248);
    if (v9)
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
      *((_DWORD *)v9 + 6) += 2;
    }
    else
    {
      v14 = 0;
      v15 = 0;
      v13 = 1;
    }
    v12 = 1;
  }
  else
  {
    v9 = 0;
    v15 = 0;
    v12 = 0;
    v13 = 1;
    v14 = 1;
  }
LABEL_6:
  v16 = *(_QWORD *)(a1[1] + 8);
  ++*(_DWORD *)v16;
  if (v9 != (WebCore::Node *)a2)
  {
    v73 = v12;
    if (v9 && WebCore::Node::isRootEditableElement(v9) && !WebCore::relinquishesEditingFocus(v9, v44))
    {
      v33 = 0;
      v4 = (uint64_t)v9;
      goto LABEL_33;
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(v16 + 152) + 624))(*(_QWORD *)(v16 + 152));
    v74 = v14;
    if (v4)
    {
      v17 = v10;
      v18 = v11;
      v19 = *(_DWORD *)(v4 + 24);
      *(_DWORD *)(v4 + 24) = v19 + 2;
      v20 = (WebCore::Frame *)a3;
      if (v19)
      {
        v21 = v13;
        v22 = v15;
        *(_DWORD *)(v4 + 24) = v19;
        v23 = 1;
        goto LABEL_11;
      }
      v22 = v15;
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4);
      v23 = 1;
      goto LABEL_69;
    }
    if ((v13 & 1) != 0)
    {
      v20 = (WebCore::Frame *)a3;
      if ((v15 & 1) == 0)
        goto LABEL_15;
    }
    else
    {
      isRootEditableElement = WebCore::Node::isRootEditableElement(v9);
      if (!isRootEditableElement)
      {
        if ((*((_WORD *)v9 + 14) & 0x10) == 0
          || (v64 = *(_QWORD *)(*((_QWORD *)v9 + 12) + 24), v64 != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
          && v64 != *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24))
        {
          v17 = v10;
          v18 = v11;
          v22 = v15;
          v23 = 1;
          v20 = (WebCore::Frame *)a3;
          goto LABEL_12;
        }
      }
      v17 = v10;
      v59 = *(_QWORD *)(v16 + 160);
      v18 = v11;
      if (v59)
        v60 = *(_BYTE *)(v59 + 144) == 0;
      else
        v60 = 0;
      if (v60)
      {
        v61 = (unsigned int *)(v59 + 8);
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 + 1, v61));
        v71 = v61;
        v22 = v15;
        WebCore::EventHandler::draggedElement((WebCore::EventHandler *)isRootEditableElement);
        if (v63)
        {
          do
          {
            v23 = v9 != v63;
            if (v9 == v63)
              break;
            v63 = (WebCore::Node *)WebCore::Node::parentOrShadowHostElement(v63);
          }
          while (v63);
        }
        else
        {
          v23 = 1;
        }
        do
        {
          v65 = __ldaxr(v71);
          v66 = v65 - 1;
        }
        while (__stlxr(v66, v71));
        v20 = (WebCore::Frame *)a3;
        if (v66)
        {
          v21 = v13;
LABEL_11:
          if ((v21 & 1) != 0)
            goto LABEL_14;
LABEL_12:
          if (*((_DWORD *)v9 + 6) != 2)
          {
            *((_DWORD *)v9 + 6) -= 2;
            goto LABEL_14;
          }
LABEL_135:
          if ((*((_WORD *)v9 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v9);
            v69 = !v23;
            v15 = v22;
            v70 = v22 | v69;
            v11 = v18;
            v10 = v17;
            v20 = (WebCore::Frame *)a3;
            if ((v70 & 1) != 0)
              goto LABEL_17;
LABEL_15:
            v26 = *(_QWORD *)(v11 + 296);
            if (v26 != *((_QWORD *)v20 + 37))
              goto LABEL_17;
            v27 = *(_QWORD *)(v26 + 3064);
            if (!*(_BYTE *)(v27 + 153) || (*(_QWORD *)(*(_QWORD *)(v11 + 136) + 664) & 0x4000000000000) != 0)
              goto LABEL_17;
            if (v4)
            {
              if ((v45 = *(WebCore::Node **)(v27 + 120)) != 0
                && (v46 = WebCore::Node::contains((WebCore::Node *)v4, *(const WebCore::Node **)(v27 + 120)),
                    v20 = (WebCore::Frame *)a3,
                    (v46 & 1) != 0)
                || (v47 = WebCore::Node::shadowHost(v45), v20 = (WebCore::Frame *)a3, v47 == v4))
              {
LABEL_18:
                v28 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8);
                *(_DWORD *)(v28 + 24) += 2;
                if (*(_QWORD *)(v28 + 1248) == v4)
                {
                  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v16 + 152) + 632))(*(_QWORD *)(v16 + 152), v4);
                  v33 = 1;
                  v14 = v74;
                }
                else
                {
                  v29 = v73 ^ 1;
                  if (v10 == v28)
                    v29 = 1;
                  if ((v29 & 1) == 0)
                  {
                    WORD2(v76) = 0;
                    LODWORD(v76) = 0;
                    WebCore::Document::setFocusedElement((WebCore::Document *)v10, 0, &v76);
                    v20 = (WebCore::Frame *)a3;
                  }
                  v30 = *((_QWORD *)v20 + 3);
                  v14 = v74;
                  if (v30 && *(_QWORD *)(v30 + 8))
                  {
                    WebCore::FocusController::setFocusedFrame((uint64_t)a1, v20, 1);
                    v31 = (WTF::MonotonicTime *)WebCore::Document::setFocusedElement((WebCore::Document *)v28, v4, a4);
                    if ((_DWORD)v31)
                    {
                      if (*(_QWORD *)(v28 + 1248) == v4)
                        v31 = (WTF::MonotonicTime *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v16 + 152)
                                                                                               + 632))(*(_QWORD *)(v16 + 152), v4);
                      WTF::MonotonicTime::now(v31);
                      a1[11] = v32;
                      if ((a1[8] & 0xFFFFFFFFFFFFLL) != 0)
                        WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(a1 + 4));
                      v33 = 1;
                      goto LABEL_31;
                    }
                  }
                  else
                  {
                    WebCore::FocusController::setFocusedFrame((uint64_t)a1, 0, 1);
                  }
                  v33 = 0;
                }
LABEL_31:
                if (*(_DWORD *)(v28 + 24) == 2)
                {
                  if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v28);
                  v4 = 0;
                }
                else
                {
                  v4 = 0;
                  *(_DWORD *)(v28 + 24) -= 2;
                }
                goto LABEL_33;
              }
            }
            v48 = *(_QWORD *)(*((_QWORD *)v20 + 80) + 16);
            if (v48)
            {
              *(_DWORD *)(v48 + 24) += 2;
              if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 248))(v48) & 1) == 0)
              {
                v53 = (WebCore::Node *)WebCore::VisibleSelection::rootEditableElement((WebCore::VisibleSelection *)(v27 + 56));
                if (!v53
                  || ((v54 = v53, (v55 = WebCore::Node::shadowHost(v53)) != 0) ? (v56 = v55) : (v56 = (uint64_t)v54),
                      (*(_WORD *)(v56 + 28) & 0x10) == 0
                   || (v57 = *(_QWORD *)(*(_QWORD *)(v56 + 96) + 24),
                       v57 != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
                   && v57 != *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24)))
                {
                  if (*(_DWORD *)(v48 + 24) != 2)
                  {
                    *(_DWORD *)(v48 + 24) -= 2;
                    goto LABEL_87;
                  }
                  v20 = (WebCore::Frame *)a3;
                  if ((*(_WORD *)(v48 + 30) & 0x400) == 0)
                  {
                    WebCore::Node::removedLastRef((WebCore::Node *)v48);
                    goto LABEL_87;
                  }
LABEL_17:
                  if (v4)
                    goto LABEL_18;
                  goto LABEL_94;
                }
              }
              if (*(_DWORD *)(v48 + 24) == 2)
              {
                if ((*(_WORD *)(v48 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v48);
              }
              else
              {
                *(_DWORD *)(v48 + 24) -= 2;
              }
            }
            WebCore::FrameSelection::clear(*(WebCore::FrameSelection **)(*(_QWORD *)(v11 + 296) + 3064));
LABEL_87:
            v20 = (WebCore::Frame *)a3;
            goto LABEL_17;
          }
          v20 = (WebCore::Frame *)a3;
LABEL_14:
          v24 = !v23;
          v15 = v22;
          v25 = v22 | v24;
          v11 = v18;
          v10 = v17;
          if ((v25 & 1) != 0)
            goto LABEL_17;
          goto LABEL_15;
        }
        atomic_store(1u, v71);
        v67 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v67 = off_1E31FE290;
        v67[1] = v71;
        v76 = v67;
        WTF::ensureOnMainThread();
        v68 = v76;
        v76 = 0;
        if (v68)
          (*(void (**)(_QWORD *))(*v68 + 8))(v68);
LABEL_69:
        v21 = v13;
        v20 = (WebCore::Frame *)a3;
        goto LABEL_11;
      }
      v22 = v15;
      if (*((_DWORD *)v9 + 6) == 2)
      {
        v23 = 0;
        goto LABEL_135;
      }
      *((_DWORD *)v9 + 6) -= 2;
      v11 = v18;
      v10 = v17;
    }
LABEL_94:
    if (v73)
    {
      WORD2(v76) = 0;
      LODWORD(v76) = 0;
      WebCore::Document::setFocusedElement((WebCore::Document *)v10, 0, &v76);
    }
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v16 + 152) + 632))(*(_QWORD *)(v16 + 152), 0);
    v4 = 0;
    v33 = 1;
    v14 = v74;
    goto LABEL_33;
  }
  if (a2)
    (*(void (**)(_QWORD, uint64_t, _BYTE *))(**(_QWORD **)(*(_QWORD *)(v16 + 48) + 16) + 864))(*(_QWORD *)(*(_QWORD *)(v16 + 48) + 16), a2, a4);
  v33 = 1;
LABEL_33:
  if (*(_DWORD *)v16 == 1)
  {
    WebCore::Page::~Page((WebCore::Page *)v16);
    WTF::fastFree(v42, v43);
  }
  else
  {
    --*(_DWORD *)v16;
  }
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  if ((v14 & 1) == 0)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  if ((v15 & 1) == 0)
  {
    v34 = (unsigned int *)(v11 + 8);
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
    {
      atomic_store(1u, v34);
      v51 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v51 = off_1E31FE290;
      v51[1] = v34;
      v76 = v51;
      WTF::ensureOnMainThread();
      v52 = v76;
      v76 = 0;
      if (v52)
        (*(void (**)(_QWORD *))(*v52 + 8))(v52);
    }
  }
  do
  {
    v37 = __ldaxr(v6);
    v38 = v37 - 1;
  }
  while (__stlxr(v38, v6));
  if (!v38)
  {
    atomic_store(1u, v6);
    v49 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v49 = off_1E31FE290;
    v49[1] = v6;
    v76 = v49;
    WTF::ensureOnMainThread();
    v50 = v76;
    v76 = 0;
    if (v50)
      (*(void (**)(_QWORD *))(*v50 + 8))(v50);
  }
  return v33;
}

uint64_t WebCore::relinquishesEditingFocus(WebCore *this, WebCore::Element *a2)
{
  WebCore::Node *v3;
  WebCore *v4;
  BOOL hasEditableStyle;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  WebCore::Document *v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::Node *v20;
  WebCore::Editor *v22;
  void *v23;
  WebCore::Editor *v24;
  uint64_t v25;
  void *v26;
  WebCore::Node *v27;
  int v28;
  WebCore::Node *v29;
  int v30;

  v3 = 0;
  v4 = this;
  while (1)
  {
    hasEditableStyle = WebCore::Node::hasEditableStyle((uint64_t)v4, 0);
    v6 = *((_QWORD *)this + 5);
    if (!hasEditableStyle)
      break;
    if ((*((_WORD *)v4 + 14) & 8) != 0)
      v3 = v4;
    v7 = *(_QWORD *)(v6 + 8);
    i = *(_QWORD *)(v7 + 1272);
    if (i)
    {
      if ((*(_WORD *)(i + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
      {
        for (i = *(_QWORD *)(i + 80); i; i = *(_QWORD *)(i + 56))
        {
          if ((*(_WORD *)(i + 28) & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
          {
            break;
          }
        }
      }
      else
      {
        i = 0;
      }
    }
    if ((WebCore *)i != v4)
    {
      v4 = (WebCore *)*((_QWORD *)v4 + 4);
      if (v4)
        continue;
    }
    goto LABEL_18;
  }
  v7 = *(_QWORD *)(v6 + 8);
LABEL_18:
  v9 = *(_QWORD *)(v7 + 528);
  if (!v9)
    return 0;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10 || v3 == 0)
    return 0;
  v13 = *(WebCore::Document **)(v10 + 296);
  v14 = *((_QWORD *)v13 + 382);
  if (!v14)
  {
    v22 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v22, v13);
    v24 = (WebCore::Editor *)*((_QWORD *)v13 + 382);
    *((_QWORD *)v13 + 382) = v22;
    if (v24)
    {
      WebCore::Editor::~Editor(v24, v23);
      if (*(_DWORD *)v25)
      {
        *(_QWORD *)(v25 + 496) = 0;
        *(_OWORD *)(v25 + 464) = 0u;
        *(_OWORD *)(v25 + 480) = 0u;
        *(_OWORD *)(v25 + 432) = 0u;
        *(_OWORD *)(v25 + 448) = 0u;
        *(_OWORD *)(v25 + 400) = 0u;
        *(_OWORD *)(v25 + 416) = 0u;
        *(_OWORD *)(v25 + 368) = 0u;
        *(_OWORD *)(v25 + 384) = 0u;
        *(_OWORD *)(v25 + 336) = 0u;
        *(_OWORD *)(v25 + 352) = 0u;
        *(_OWORD *)(v25 + 304) = 0u;
        *(_OWORD *)(v25 + 320) = 0u;
        *(_OWORD *)(v25 + 272) = 0u;
        *(_OWORD *)(v25 + 288) = 0u;
        *(_OWORD *)(v25 + 240) = 0u;
        *(_OWORD *)(v25 + 256) = 0u;
        *(_OWORD *)(v25 + 208) = 0u;
        *(_OWORD *)(v25 + 224) = 0u;
        *(_OWORD *)(v25 + 176) = 0u;
        *(_OWORD *)(v25 + 192) = 0u;
        *(_OWORD *)(v25 + 144) = 0u;
        *(_OWORD *)(v25 + 160) = 0u;
        *(_OWORD *)(v25 + 112) = 0u;
        *(_OWORD *)(v25 + 128) = 0u;
        *(_OWORD *)(v25 + 80) = 0u;
        *(_OWORD *)(v25 + 96) = 0u;
        *(_OWORD *)(v25 + 48) = 0u;
        *(_OWORD *)(v25 + 64) = 0u;
        *(_OWORD *)(v25 + 16) = 0u;
        *(_OWORD *)(v25 + 32) = 0u;
        *(_OWORD *)v25 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v25, v26);
      }
    }
    v14 = *((_QWORD *)v13 + 382);
  }
  *((_DWORD *)v3 + 6) += 4;
  v15 = *((_WORD *)v3 + 14);
  if ((v15 & 1) != 0)
  {
    v17 = *((_QWORD *)v3 + 10);
    if (v17)
      LODWORD(v17) = *(_DWORD *)(v17 + 4);
  }
  else if ((v15 & 4) != 0 && (v16 = *((_QWORD *)v3 + 10)) != 0)
  {
    LODWORD(v17) = 0;
    do
    {
      LODWORD(v17) = v17 + 1;
      v16 = *(_QWORD *)(v16 + 56);
    }
    while (v16);
  }
  else
  {
    LODWORD(v17) = 0;
  }
  v27 = v3;
  v28 = 0;
  v29 = v3;
  v30 = v17;
  v18 = *(_QWORD *)(v14 + 8);
  if (v18 && (v19 = *(_QWORD *)(v18 + 8)) != 0)
  {
    v12 = (*(uint64_t (**)(uint64_t, WebCore::Node **))(*(_QWORD *)v19 + 88))(v19, &v27);
    v3 = v29;
  }
  else
  {
    v12 = 0;
  }
  v29 = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 6) == 2)
    {
      if ((*((_WORD *)v3 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v3);
    }
    else
    {
      *((_DWORD *)v3 + 6) -= 2;
    }
  }
  v20 = v27;
  v27 = 0;
  if (v20)
  {
    if (*((_DWORD *)v20 + 6) == 2)
    {
      if ((*((_WORD *)v20 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v20);
    }
    else
    {
      *((_DWORD *)v20 + 6) -= 2;
    }
  }
  return v12;
}

uint64_t WebCore::FocusController::setActive(WebCore::FocusController *this, __int16 a2)
{
  _DWORD *v2;
  uint64_t result;
  WTF *v4;
  void *v5;

  v2 = *(_DWORD **)(*((_QWORD *)this + 1) + 8);
  ++*v2;
  result = WebCore::Page::setActivityState((uint64_t)v2, *((_WORD *)this + 13) & 0xFFFEu | a2);
  if (*v2 == 1)
  {
    WebCore::Page::~Page((uint64_t)v2);
    return WTF::fastFree(v4, v5);
  }
  else
  {
    --*v2;
  }
  return result;
}

uint64_t WebCore::FocusController::advanceFocusDirectionallyInContainer(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  WTF *v23;
  unsigned int v24;
  int v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  BOOL v33;
  int v34;
  int v35;
  int v36;
  int v37;
  unsigned int *v38;
  void *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  WTF *v46;
  uint64_t v47;
  const WebCore::FocusCandidate *v48;
  uint64_t v49;
  WTF *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  signed int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  unsigned int *v69;
  __int16 v70;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v80;
  uint64_t v81;
  char v82;
  int canScrollInDirection;
  char v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t v89;
  char v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int *v94;
  unsigned int v95;
  uint64_t v96;
  char v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  WTF *v103;
  char v104;
  WTF *v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int v108;
  WTF *v109;
  WTF *v110;
  uint64_t v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int v114;
  WTF *v115;
  WTF *v116;
  int v117;
  int v118;
  char v119;
  int v120;
  WebCore::Node *v121;
  WTF *v122;
  WTF *v123;
  int v124;
  char v125;
  WTF *v126;
  unsigned int *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  __int16 v134;
  unsigned int *v135[2];
  unsigned int *v136;
  uint64_t v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  char v143;
  char v144;
  WTF *v145;
  WTF *v146;
  uint64_t v147;
  _BYTE v148[20];
  unint64_t v149;
  __int16 v150;
  int v151[2];
  unint64_t v152;
  void *v153;
  uint64_t v154;

  if (!a2)
  {
    LOBYTE(v13) = 0;
    return v13 & 1;
  }
  v9 = a3[1];
  if ((int)v9 < 1 || SHIDWORD(v9) <= 0)
  {
    v11 = WebCore::nodeRectInAbsoluteCoordinates((WebCore *)a2, 0);
    v12 = HIDWORD(v11);
    switch((int)a4)
    {
      case 3:
        LODWORD(v12) = (HIDWORD(v11) >> 31) + 0x7FFFFFFF;
        if (__OFADD__(HIDWORD(v11), HIDWORD(v9)))
          v12 = v12;
        else
          v12 = (HIDWORD(v11) + HIDWORD(v9));
        goto LABEL_11;
      case 4:
LABEL_11:
        v9 = v9;
        break;
      case 5:
        if (__OFADD__((_DWORD)v11, (_DWORD)v9))
          LODWORD(v11) = (v11 >> 31) + 0x7FFFFFFF;
        else
          LODWORD(v11) = v11 + v9;
        goto LABEL_16;
      case 6:
LABEL_16:
        v9 &= 0xFFFFFFFF00000000;
        break;
      default:
        break;
    }
    v14 = v11 | (v12 << 32);
  }
  else
  {
    v14 = *a3;
  }
  v15 = 0;
  v127 = 0;
  v128 = 0;
  v129 = 0;
  v130 = 0x7FFFFFFFFFFFFFFFLL;
  v131 = 0;
  v132 = 0;
  v133 = 0;
  v134 = 257;
  v16 = *(_QWORD *)(a1 + 16);
  if (v16)
  {
    v17 = *(_QWORD *)(v16 + 8);
    if (v17 && !*(_BYTE *)(v17 + 144) && (v18 = *(_QWORD *)(v17 + 296)) != 0)
      v15 = *(_QWORD *)(v18 + 1248);
    else
      v15 = 0;
  }
  if ((*(_WORD *)(a2 + 28) & 4) != 0)
  {
    for (i = *(_QWORD *)(a2 + 80); i; i = *(_QWORD *)(i + 56))
    {
      if ((*(_WORD *)(i + 28) & 8) != 0)
        break;
    }
  }
  else
  {
    i = 0;
  }
  v145 = 0;
  v146 = 0;
  v147 = 0;
  *(_OWORD *)v148 = xmmword_1969F5720;
  v150 = 257;
  *(_QWORD *)&v148[12] = v14;
  v149 = v9;
  if (v15)
  {
    v20 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v15);
    if (v20)
    {
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 + 1, v20));
      v146 = (WTF *)v20;
    }
    else
    {
      v146 = 0;
    }
    v22 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v15);
    v23 = (WTF *)v22;
    if (v22)
    {
      do
        v24 = __ldaxr(v22);
      while (__stlxr(v24 + 1, v22));
    }
  }
  else
  {
    v23 = 0;
  }
  v145 = v23;
  v25 = 0;
  if (!i)
    goto LABEL_218;
  do
  {
    while (1)
    {
LABEL_39:
      if (i != v15
        && (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)i + 560))(i, a5) & 1) != 0
         || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)i + 192))(i) & 1) != 0
         || WebCore::canScrollInDirection(i, a4)))
      {
        WebCore::FocusCandidate::FocusCandidate(v135, i, a4);
        if (!v135[0] || !*((_QWORD *)v135[0] + 1))
          goto LABEL_44;
        switch((int)a4)
        {
          case 3:
            v34 = *(_DWORD *)&v148[16] + HIDWORD(v149);
            if (__OFADD__(*(_DWORD *)&v148[16], HIDWORD(v149)))
              v34 = (*(_DWORD *)&v148[16] >> 31) + 0x7FFFFFFF;
            if (v140 < v34)
              goto LABEL_97;
            goto LABEL_44;
          case 4:
            v37 = v140 + v142;
            if (__OFADD__(v140, v142))
              v37 = (v140 >> 31) + 0x7FFFFFFF;
            if (v37 > *(int *)&v148[16])
              goto LABEL_97;
            goto LABEL_44;
          case 5:
            v35 = (*(_DWORD *)&v148[12] >> 31) + 0x7FFFFFFF;
            if (!__OFADD__(*(_DWORD *)&v148[12], (_DWORD)v149))
              v35 = *(_DWORD *)&v148[12] + v149;
            if (v139 < v35)
              goto LABEL_97;
            goto LABEL_44;
          case 6:
            v36 = (v139 >> 31) + 0x7FFFFFFF;
            if (!__OFADD__(v139, v141))
              v36 = v139 + v141;
            if (v36 <= *(int *)&v148[12])
              goto LABEL_44;
LABEL_97:
            v38 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a2);
            if (v38)
            {
              do
                v40 = __ldaxr(v38);
              while (__stlxr(v40 + 1, v38));
            }
            v41 = v136;
            v136 = v38;
            if (v41)
            {
              do
              {
                v42 = __ldaxr(v41);
                v43 = v42 - 1;
              }
              while (__stlxr(v43, v41));
              if (!v43)
              {
                atomic_store(1u, v41);
                v123 = (WTF *)v41;
                v49 = v41[7];
                if ((_DWORD)v49)
                  WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v123 + 2), (WTF::StringImpl *)(*((_QWORD *)v123 + 2) + 32 * v49));
                v50 = (WTF *)*((_QWORD *)v123 + 2);
                if (v50)
                {
                  *((_QWORD *)v123 + 2) = 0;
                  *((_DWORD *)v123 + 6) = 0;
                  WTF::fastFree(v50, v39);
                }
                WTF::fastFree(v123, v39);
              }
            }
            ++v25;
            if (v135[0])
            {
              v44 = *((_QWORD *)v135[0] + 1);
              if (v44)
              {
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v44 + 192))(v44))
                {
                  v122 = (WTF *)*((_QWORD *)v135[0] + 1);
                  v45 = (*(uint64_t (**)(WTF *))(*(_QWORD *)v122 + 192))(v122);
                  v46 = v122;
                  if (!v45)
                    v46 = 0;
                  v47 = *((_QWORD *)v46 + 14);
                  if (!v47 || !*(_QWORD *)(v47 + 8) || v141 < 1 || v142 < 1)
                    goto LABEL_44;
                }
              }
            }
            if (v143 && !WebCore::canBeScrolledIntoView(a4, (uint64_t)v135))
              goto LABEL_44;
            WebCore::distanceDataForNode(a4, (WebCore *)&v145, (WebCore::FocusCandidate *)v135);
            if (v137 == 0x7FFFFFFFFFFFFFFFLL || v144 && v138 < 2)
              goto LABEL_44;
            if (!v127 || !*((_QWORD *)v127 + 1))
              goto LABEL_117;
            if (v139 <= SHIDWORD(v131))
              v51 = HIDWORD(v131);
            else
              v51 = v139;
            v124 = v51;
            if (v140 <= (int)v132)
              v52 = v132;
            else
              v52 = v140;
            v120 = v52;
            v53 = v139 + v141;
            if (__OFADD__(v139, v141))
              v53 = (v139 >> 31) + 0x7FFFFFFF;
            v54 = HIDWORD(v131) + HIDWORD(v132);
            if (__OFADD__(HIDWORD(v131), HIDWORD(v132)))
              v54 = (HIDWORD(v131) >> 31) + 0x7FFFFFFF;
            if (v54 < v53)
              v53 = v54;
            v55 = v140 + v142;
            if (__OFADD__(v140, v142))
              v55 = (v140 >> 31) + 0x7FFFFFFF;
            v56 = v132 + v133;
            if (__OFADD__((_DWORD)v132, v133))
              v56 = (v132 >> 31) + 0x7FFFFFFF;
            if (v56 >= v55)
              v57 = v55;
            else
              v57 = v56;
            if (v124 >= v53 || v120 >= v57)
            {
              v53 = 0;
              v57 = 0;
              v124 = 0;
              v120 = 0;
            }
            v118 = v53 - v124;
            if (__OFSUB__(v53, v124))
              v118 = (v53 >> 31) + 0x7FFFFFFF;
            v117 = v57 - v120;
            if (__OFSUB__(v57, v120))
              v117 = (v57 >> 31) + 0x7FFFFFFF;
            if (v118 < 1
              || v117 < 1
              || WebCore::areElementsOnSameLine((WebCore *)&v127, (const WebCore::FocusCandidate *)v135, v48))
            {
              goto LABEL_152;
            }
            v58 = v124 + (v118 >> 1);
            if (__OFADD__(v124, v118 >> 1))
              v58 = (v124 >> 31) + 0x7FFFFFFF;
            v59 = v120 + (v117 >> 1);
            if (__OFADD__(v120, v117 >> 1))
              v59 = (v120 >> 31) + 0x7FFFFFFF;
            v60 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v135[0] + 1) + 40)
                                                                                        + 8)
                                                                            + 528)
                                                                + 8)
                                                    + 24)
                                        + 8)
                            + 160);
            if (v60)
              v61 = *(_BYTE *)(v60 + 144) == 0;
            else
              v61 = 0;
            if (!v61)
              goto LABEL_44;
            v62 = *(_QWORD *)(v60 + 640);
            v151[0] = v58 & 0xFFFFFFC0;
            v151[1] = v59 & 0xFFFFFFC0;
            WebCore::EventHandler::hitTestResultAtPoint(v62, v151, 0x923u, (uint64_t)&v152);
            if (v135[0])
              v64 = *((_QWORD *)v135[0] + 1);
            else
              v64 = 0;
            v65 = v154;
            if (!v154)
              goto LABEL_188;
            if (v64 == v154)
              goto LABEL_181;
            v66 = *(_WORD *)(v64 + 28);
            if ((v66 & 0xF000) == 0x9000)
            {
              if (**(_QWORD **)(v154 + 40) == v64
                && (*(_WORD *)(v154 + 28) & 0xF000) != 0x9000
                && (*(_BYTE *)(v154 + 22) & 8) != 0)
              {
LABEL_181:
                WebCore::FocusCandidate::operator=(&v127, v135);
LABEL_182:
                WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)&v152, v63);
                goto LABEL_44;
              }
            }
            else if ((v66 & 4) != 0
                   && *(_QWORD *)(v64 + 80)
                   && ((*(unsigned __int8 *)(v154 + 22) ^ *(unsigned __int8 *)(v64 + 22)) & 8) == 0)
            {
              v67 = v154;
              do
                v67 = *(_QWORD *)(v67 + 32);
              while (v67 != v64 && v67 != 0);
              if (v67)
                goto LABEL_181;
            }
LABEL_188:
            v69 = v127;
            if (v127)
              v69 = (unsigned int *)*((_QWORD *)v127 + 1);
            if (v154)
            {
              if (v69 == (unsigned int *)v154)
                goto LABEL_182;
              v70 = *((_WORD *)v69 + 14);
              if ((v70 & 0xF000) == 0x9000)
              {
                if (**(unsigned int ***)(v154 + 40) == v69
                  && (*(_WORD *)(v154 + 28) & 0xF000) != 0x9000
                  && (*(_QWORD *)(v154 + 16) & 0x8000000000000) != 0)
                {
                  goto LABEL_182;
                }
              }
              else if ((v70 & 4) != 0
                     && *((_QWORD *)v69 + 10)
                     && ((*(unsigned __int8 *)(v154 + 22) ^ *((unsigned __int8 *)v69 + 22)) & 8) == 0)
              {
                do
                  v65 = *(_QWORD *)(v65 + 32);
                while ((unsigned int *)v65 != v69 && v65 != 0);
                if (v65)
                  goto LABEL_182;
              }
            }
            WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)&v152, v63);
LABEL_152:
            if (v138 == (_DWORD)v131)
            {
              if (v137 >= v130)
                goto LABEL_44;
            }
            else if (v138 <= (int)v131)
            {
              goto LABEL_44;
            }
LABEL_117:
            WebCore::FocusCandidate::operator=(&v127, v135);
LABEL_44:
            WebCore::FocusCandidate::~FocusCandidate((WebCore::FocusCandidate *)v135, v26);
            break;
          default:
            goto LABEL_44;
        }
      }
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)i + 192))(i) & 1) == 0
        && !WebCore::canScrollInDirection(i, a4))
      {
        break;
      }
      if (i == a2)
        goto LABEL_218;
      v27 = *(_QWORD *)(i + 56);
      if (!v27)
      {
        v28 = i;
        while (1)
        {
          v28 = *(_QWORD *)(v28 + 32);
          if (!v28 || v28 == a2)
            goto LABEL_218;
          i = *(_QWORD *)(v28 + 56);
          if (i)
            goto LABEL_208;
        }
      }
      while (1)
      {
        i = v27;
LABEL_208:
        if ((*(_WORD *)(i + 28) & 8) != 0)
          break;
        if (i == a2)
          goto LABEL_218;
        v27 = *(_QWORD *)(i + 56);
        if (!v27)
        {
          v72 = i;
          while (1)
          {
            v72 = *(_QWORD *)(v72 + 32);
            if (!v72 || v72 == a2)
              goto LABEL_218;
            i = *(_QWORD *)(v72 + 56);
            if (i)
              goto LABEL_208;
          }
        }
      }
    }
    v30 = *(_QWORD *)(i + 80);
    if (!v30)
    {
      if (i == a2)
        goto LABEL_218;
      while (1)
      {
        v30 = *(_QWORD *)(i + 56);
        if (v30)
          break;
        i = *(_QWORD *)(i + 32);
        if (i)
          v33 = i == a2;
        else
          v33 = 1;
        if (v33)
          goto LABEL_218;
      }
    }
    i = v30;
  }
  while ((*(_WORD *)(v30 + 28) & 8) != 0);
  while (v30 != a2)
  {
    if (!*(_QWORD *)(v30 + 56))
    {
      v31 = v30;
      while (1)
      {
        v31 = *(_QWORD *)(v31 + 32);
        if (!v31 || v31 == a2)
          goto LABEL_218;
        v30 = *(_QWORD *)(v31 + 56);
        if (v30)
          goto LABEL_68;
      }
    }
    v30 = *(_QWORD *)(v30 + 56);
LABEL_68:
    if ((*(_WORD *)(v30 + 28) & 8) != 0)
    {
      i = v30;
      goto LABEL_39;
    }
  }
LABEL_218:
  v74 = *(_QWORD *)(a1 + 16);
  if (v74)
  {
    v75 = *(_QWORD *)(v74 + 8);
    if (v75)
    {
      if (!*(_BYTE *)(v75 + 144))
      {
        v76 = *(_QWORD *)(v75 + 296);
        if (v76)
        {
          v77 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v76 + 528) + 8) + 24) + 8);
          *(_DWORD *)(v77 + 864) += v25;
        }
      }
    }
  }
  WebCore::FocusCandidate::~FocusCandidate((WebCore::FocusCandidate *)&v145, (void *)v9);
  if (!v127 || (v13 = (_QWORD *)*((_QWORD *)v127 + 1)) == 0)
  {
    LOBYTE(v13) = WebCore::scrollInDirection(a2, a4);
    goto LABEL_225;
  }
  if (!(*(unsigned int (**)(_QWORD *))(*v13 + 192))(v13))
  {
    if (v127)
    {
      v81 = *((_QWORD *)v127 + 1);
      if (v81)
      {
        v82 = 0;
        *(_DWORD *)(v81 + 24) += 2;
        goto LABEL_234;
      }
    }
    else
    {
      v81 = 0;
    }
    v82 = 1;
LABEL_234:
    canScrollInDirection = WebCore::canScrollInDirection(v81, a4);
    v84 = canScrollInDirection;
    if (!canScrollInDirection)
      goto LABEL_293;
    if (HIBYTE(v134))
    {
      WebCore::scrollInDirection(v81, a4);
      LOBYTE(v13) = 1;
      goto LABEL_293;
    }
    v152 = 0;
    v153 = 0;
    v92 = *(_QWORD *)(a1 + 16);
    if ((!v92 || (v93 = *(_QWORD *)(v92 + 8)) == 0 || *(_BYTE *)(v93 + 144))
      && (v93 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 160), *(_BYTE *)(v93 + 144)))
    {
      v93 = 0;
      v121 = 0;
      v97 = 1;
      v125 = 1;
    }
    else
    {
      v94 = (unsigned int *)(v93 + 8);
      do
        v95 = __ldaxr(v94);
      while (__stlxr(v95 + 1, v94));
      v96 = *(_QWORD *)(*(_QWORD *)(v93 + 296) + 1248);
      if (v96)
      {
        *(_DWORD *)(v96 + 24) += 2;
        v121 = (WebCore::Node *)v96;
        v125 = 0;
        if (!WebCore::hasOffscreenRect(v96, 0))
        {
          v125 = 0;
          v119 = 0;
          v152 = WebCore::nodeRectInAbsoluteCoordinates(v121, (WebCore::Node *)1);
          v153 = v78;
LABEL_282:
          if (v127 && (v111 = *((_QWORD *)v127 + 1)) != 0)
          {
            *(_DWORD *)(v111 + 24) += 2;
            LOBYTE(v13) = WebCore::FocusController::advanceFocusDirectionallyInContainer(a1, v111, &v152, a4, a5);
            if (*(_DWORD *)(v111 + 24) == 2)
            {
              if ((*(_WORD *)(v111 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v111, v78);
            }
            else
            {
              *(_DWORD *)(v111 + 24) -= 2;
            }
          }
          else
          {
            LOBYTE(v13) = 0;
          }
          if ((v119 & 1) == 0)
          {
            if (*((_DWORD *)v121 + 6) == 2)
            {
              if ((*((_WORD *)v121 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v121, v78);
            }
            else
            {
              *((_DWORD *)v121 + 6) -= 2;
            }
          }
          if ((v125 & 1) == 0)
          {
            v112 = (unsigned int *)(v93 + 8);
            do
            {
              v113 = __ldaxr(v112);
              v114 = v113 - 1;
            }
            while (__stlxr(v114, v112));
            if (!v114)
            {
              atomic_store(1u, v112);
              v115 = (WTF *)WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v115 = off_1E31FE290;
              *((_QWORD *)v115 + 1) = v112;
              v145 = v115;
              WTF::ensureOnMainThread();
              v116 = v145;
              v145 = 0;
              if (v116)
                (*(void (**)(WTF *))(*(_QWORD *)v116 + 8))(v116);
            }
          }
LABEL_293:
          if ((v82 & 1) == 0)
          {
            if (*(_DWORD *)(v81 + 24) == 2)
            {
              if ((*(_WORD *)(v81 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v81, v78);
            }
            else
            {
              *(_DWORD *)(v81 + 24) -= 2;
            }
          }
          if ((v84 & 1) != 0)
            goto LABEL_225;
          if (HIBYTE(v134))
          {
            if (!v129 || (v80 = *(_QWORD *)(v129 + 8)) == 0)
            {
              WebCore::scrollInDirection(0, a4);
LABEL_303:
              LOBYTE(v13) = 1;
              goto LABEL_225;
            }
LABEL_300:
            *(_DWORD *)(v80 + 24) += 2;
            WebCore::scrollInDirection(v80, a4);
          }
          else
          {
            v80 = *(_QWORD *)(v128 + 8);
            if ((*(_WORD *)(v80 + 28) & 8) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195FC8E4CLL);
            }
            *(_DWORD *)(v80 + 24) += 2;
            LOBYTE(v152) = 1;
            BYTE1(v152) = a4;
            *(_DWORD *)((char *)&v152 + 2) = 0;
            (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v80 + 656))(v80, &v152);
          }
          if (*(_DWORD *)(v80 + 24) == 2)
          {
            if ((*(_WORD *)(v80 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v80, v78);
          }
          else
          {
            *(_DWORD *)(v80 + 24) -= 2;
          }
          goto LABEL_303;
        }
        v97 = 0;
      }
      else
      {
        v125 = 0;
        v121 = 0;
        v97 = 1;
      }
    }
    v119 = v97;
    goto LABEL_282;
  }
  if (HIBYTE(v134))
  {
    v80 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v127 + 1) + 40) + 8);
    goto LABEL_300;
  }
  v152 = 0;
  v153 = 0;
  v85 = *(_QWORD *)(a1 + 16);
  if (!v85 || (v86 = *(_QWORD *)(v85 + 8)) == 0 || *(_BYTE *)(v86 + 144))
  {
    v86 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 160);
    if (*(_BYTE *)(v86 + 144))
    {
      v86 = 0;
      v89 = 0;
      v90 = 1;
      goto LABEL_328;
    }
  }
  v87 = (unsigned int *)(v86 + 8);
  do
    v88 = __ldaxr(v87);
  while (__stlxr(v88 + 1, v87));
  v89 = *(_QWORD *)(*(_QWORD *)(v86 + 296) + 1248);
  if (!v89)
  {
    v90 = 0;
LABEL_328:
    v91 = 1;
    goto LABEL_257;
  }
  *(_DWORD *)(v89 + 24) += 2;
  v90 = 0;
  v91 = 0;
  if (!WebCore::hasOffscreenRect(v89, 0))
  {
    v152 = WebCore::nodeRectInAbsoluteCoordinates((WebCore *)v89, (WebCore::Node *)1);
    v153 = v98;
  }
LABEL_257:
  v99 = *(_QWORD *)(v13[14] + 8);
  if (*(_BYTE *)(v99 + 144))
    v99 = 0;
  v100 = *(_QWORD *)(v99 + 296);
  if (v100)
  {
    *(_DWORD *)(v100 + 24) += 2;
    WebCore::Document::updateLayout(v100, 2u, 0);
    if (*(_DWORD *)(v100 + 24) == 2)
    {
      if ((*(_WORD *)(v100 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v100, v101);
    }
    else
    {
      *(_DWORD *)(v100 + 24) -= 2;
    }
  }
  else
  {
    WebCore::Document::updateLayout(0, 2u, 0);
  }
  v102 = *(_QWORD *)(v13[14] + 8);
  if (*(_BYTE *)(v102 + 144))
    v102 = 0;
  if ((WebCore::FocusController::advanceFocusDirectionallyInContainer(a1, *(_QWORD *)(v102 + 296), &v152, a4, a5) & 1) != 0)
  {
    LOBYTE(v13) = 1;
    goto LABEL_272;
  }
  if (v127)
  {
    v103 = (WTF *)*((_QWORD *)v127 + 1);
    if (v103)
    {
      v104 = 0;
      *((_DWORD *)v103 + 6) += 2;
      goto LABEL_269;
    }
  }
  else
  {
    v103 = 0;
  }
  v104 = 1;
LABEL_269:
  v126 = v103;
  v145 = (WTF *)WebCore::nodeRectInAbsoluteCoordinates(v103, (WebCore::Node *)1);
  v146 = v105;
  LOBYTE(v13) = WebCore::FocusController::advanceFocusDirectionallyInContainer(a1, a2, &v145, a4, a5);
  if ((v104 & 1) == 0)
  {
    if (*((_DWORD *)v126 + 6) == 2)
    {
      if ((*((_WORD *)v126 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v126, v78);
    }
    else
    {
      *((_DWORD *)v126 + 6) -= 2;
    }
  }
LABEL_272:
  if ((v91 & 1) == 0)
  {
    if (*(_DWORD *)(v89 + 24) == 2)
    {
      if ((*(_WORD *)(v89 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v89, v78);
    }
    else
    {
      *(_DWORD *)(v89 + 24) -= 2;
    }
  }
  if ((v90 & 1) == 0)
  {
    v106 = (unsigned int *)(v86 + 8);
    do
    {
      v107 = __ldaxr(v106);
      v108 = v107 - 1;
    }
    while (__stlxr(v108, v106));
    if (!v108)
    {
      atomic_store(1u, v106);
      v109 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v109 = off_1E31FE290;
      *((_QWORD *)v109 + 1) = v106;
      v145 = v109;
      WTF::ensureOnMainThread();
      v110 = v145;
      v145 = 0;
      if (v110)
        (*(void (**)(WTF *))(*(_QWORD *)v110 + 8))(v110);
    }
  }
LABEL_225:
  WebCore::FocusCandidate::~FocusCandidate((WebCore::FocusCandidate *)&v127, v78);
  return v13 & 1;
}

uint64_t WebCore::Frame::Frame(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, char a5, WebCore::HTMLFrameOwnerElement *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16;
  void *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  _QWORD *v28;
  unsigned int *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  WebCore::NavigationScheduler *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  void *v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  void *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  void *v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  void *v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  void *v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  void *v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1E33FEA70;
  v16 = a2[2];
  if (v16)
    goto LABEL_72;
  v16 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v16 = 1;
  *(_QWORD *)(v16 + 8) = a2;
  v18 = (unsigned int *)a2[2];
  a2[2] = v16;
  if (!v18)
    goto LABEL_72;
  do
  {
    v19 = __ldaxr(v18);
    v20 = v19 - 1;
  }
  while (__stlxr(v20, v18));
  if (!v20)
  {
    atomic_store(1u, v18);
    WTF::fastFree((WTF *)v18, v17);
  }
  v16 = a2[2];
  if (v16)
  {
LABEL_72:
    do
      v21 = __ldaxr((unsigned int *)v16);
    while (__stlxr(v21 + 1, (unsigned int *)v16));
  }
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = a4;
  if (!*(_QWORD *)(a1 + 16))
  {
    v41 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v41 = 1;
    *(_QWORD *)(v41 + 8) = a1;
    v42 = *(unsigned int **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v41;
    if (v42)
    {
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (!v44)
      {
        atomic_store(1u, v42);
        WTF::fastFree((WTF *)v42, v40);
      }
    }
  }
  v22 = *(unsigned int **)(a1 + 16);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 + 1, v22));
  *(_QWORD *)(a1 + 48) = v22;
  if (a7)
  {
    v24 = *(_QWORD *)(a7 + 16);
    if (v24)
      goto LABEL_73;
    v24 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v24 = 1;
    *(_QWORD *)(v24 + 8) = a7;
    v63 = *(unsigned int **)(a7 + 16);
    *(_QWORD *)(a7 + 16) = v24;
    if (!v63)
      goto LABEL_73;
    do
    {
      v64 = __ldaxr(v63);
      v65 = v64 - 1;
    }
    while (__stlxr(v65, v63));
    if (!v65)
    {
      atomic_store(1u, v63);
      WTF::fastFree((WTF *)v63, v62);
    }
    v24 = *(_QWORD *)(a7 + 16);
    if (v24)
    {
LABEL_73:
      do
        v60 = __ldaxr((unsigned int *)v24);
      while (__stlxr(v60 + 1, (unsigned int *)v24));
    }
  }
  else
  {
    v24 = 0;
  }
  *(_QWORD *)(a1 + 56) = v24;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = -1;
  v25 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v25 = 1;
  v26 = *(_QWORD *)(a1 + 16);
  if (v26)
    goto LABEL_74;
  v26 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v26 = 1;
  *(_QWORD *)(v26 + 8) = a1;
  v46 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v26;
  if (!v46)
    goto LABEL_74;
  do
  {
    v47 = __ldaxr(v46);
    v48 = v47 - 1;
  }
  while (__stlxr(v48, v46));
  if (!v48)
  {
    atomic_store(1u, v46);
    WTF::fastFree((WTF *)v46, v45);
  }
  v26 = *(_QWORD *)(a1 + 16);
  if (v26)
  {
LABEL_74:
    do
      v27 = __ldaxr((unsigned int *)v26);
    while (__stlxr(v27 + 1, (unsigned int *)v26));
  }
  *(_QWORD *)(v25 + 8) = v26;
  v28 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  v29 = 0;
  *v28 = 0;
  *(_QWORD *)(v25 + 16) = v28;
  *(_QWORD *)(a1 + 112) = v25;
  if (a6)
  {
    v29 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a6);
    if (v29)
    {
      do
        v59 = __ldaxr(v29);
      while (__stlxr(v59 + 1, v29));
    }
  }
  *(_QWORD *)(a1 + 120) = v29;
  v30 = a1;
  if (a7)
    v30 = a2[20];
  if (!*(_QWORD *)(v30 + 16))
  {
    v50 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v50 = 1;
    *(_QWORD *)(v50 + 8) = v30;
    v51 = *(unsigned int **)(v30 + 16);
    *(_QWORD *)(v30 + 16) = v50;
    if (v51)
    {
      do
      {
        v52 = __ldaxr(v51);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, v51));
      if (!v53)
      {
        atomic_store(1u, v51);
        WTF::fastFree((WTF *)v51, v49);
      }
    }
  }
  v31 = *(unsigned int **)(v30 + 16);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 + 1, v31));
  *(_QWORD *)(a1 + 128) = v31;
  v33 = a2[14];
  ++*(_DWORD *)(v33 + 228);
  *(_QWORD *)(a1 + 136) = v33;
  *(_BYTE *)(a1 + 144) = a5;
  v34 = (WebCore::NavigationScheduler *)WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)(a1 + 152) = WebCore::NavigationScheduler::NavigationScheduler(v34, (WebCore::Frame *)a1);
  if (a8)
  {
    v35 = *(_QWORD *)(a8 + 16);
    if (v35)
      goto LABEL_75;
    v35 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v35 = 1;
    *(_QWORD *)(v35 + 8) = a8;
    v67 = *(unsigned int **)(a8 + 16);
    *(_QWORD *)(a8 + 16) = v35;
    if (!v67)
      goto LABEL_75;
    do
    {
      v68 = __ldaxr(v67);
      v69 = v68 - 1;
    }
    while (__stlxr(v69, v67));
    if (!v69)
    {
      atomic_store(1u, v67);
      WTF::fastFree((WTF *)v67, v66);
    }
    v35 = *(_QWORD *)(a8 + 16);
    if (v35)
    {
LABEL_75:
      do
        v61 = __ldaxr((unsigned int *)v35);
      while (__stlxr(v61 + 1, (unsigned int *)v35));
    }
  }
  else
  {
    v35 = 0;
  }
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = v35;
  v36 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v36 = 0;
  if (!*(_QWORD *)(a1 + 16))
  {
    v55 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v55 = 1;
    *(_QWORD *)(v55 + 8) = a1;
    v56 = *(unsigned int **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v55;
    if (v56)
    {
      do
      {
        v57 = __ldaxr(v56);
        v58 = v57 - 1;
      }
      while (__stlxr(v58, v56));
      if (!v58)
      {
        atomic_store(1u, v56);
        WTF::fastFree((WTF *)v56, v54);
      }
    }
  }
  v37 = *(unsigned int **)(a1 + 16);
  do
    v38 = __ldaxr(v37);
  while (__stlxr(v38 + 1, v37));
  *(_QWORD *)(v36 + 24) = 0;
  *(_QWORD *)(v36 + 32) = 0;
  *(_QWORD *)(v36 + 8) = v37;
  *(_QWORD *)(v36 + 16) = 0;
  *(_WORD *)(v36 + 40) = 1;
  *(_QWORD *)(v36 + 48) = 0;
  *(_QWORD *)(a1 + 184) = v36;
  *(_BYTE *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  if (a7)
    WebCore::FrameTree::appendChild((WebCore::FrameTree *)(a7 + 48), (unsigned int **)a1);
  if (a6)
    WebCore::HTMLFrameOwnerElement::setContentFrame(a6, (WebCore::Frame *)a1);
  return a1;
}

void WebCore::Frame::~Frame(WebCore::WindowProxy **this, void *a2)
{
  void *v3;
  WebCore::WindowProxy *v4;
  WebCore::WindowProxy *v5;
  uint64_t v6;
  WebCore::HistoryController *v7;
  WTF *v8;
  WebCore::WindowProxy *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  WebCore::NavigationScheduler *v13;
  WTF *v14;
  WebCore::WindowProxy *v15;
  unsigned int *v16;
  WebCore::WindowProxy *v17;
  unsigned int v18;
  unsigned int v19;
  WebCore::WindowProxy *v20;
  WebCore::WindowProxy *j;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  WebCore::WindowProxy *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  WebCore::WindowProxy *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  WTF::StringImpl *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  WebCore::WindowProxy *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  WTF *v52;
  void *v53;
  uint64_t v54;
  uint64_t i;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  WTF *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  WebCore::WindowProxy *v69;
  WebCore::WindowProxy *v70;
  WebCore::WindowProxy *v71;
  _QWORD *v72;

  *this = (WebCore::WindowProxy *)off_1E33FEA70;
  WebCore::WindowProxy::detachFromFrame(this[14], a2);
  WebCore::NavigationScheduler::cancel(this[19], 0);
  if (*((_BYTE *)this + 240))
  {
    v4 = this[29];
    if (v4)
    {
      v71 = this[29];
      v66 = *((unsigned int *)v4 - 1);
      if ((_DWORD)v66)
      {
        v67 = (char *)v71 + 8;
        do
        {
          if (*(v67 - 8) != 254)
          {
            v68 = *((unsigned int *)v67 + 2);
            if ((_DWORD)v68 != -1)
              ((void (*)(_QWORD **, char *))off_1E33FEB50[v68])(&v72, v67);
            *((_DWORD *)v67 + 2) = -1;
          }
          v67 += 24;
          --v66;
        }
        while (v66);
      }
      WTF::fastFree((WebCore::WindowProxy *)((char *)v71 - 16), v3);
    }
    v5 = this[28];
    if (v5)
      WTF::fastFree((WebCore::WindowProxy *)((char *)v5 - 16), v3);
    v6 = *((unsigned int *)this + 54);
    if ((_DWORD)v6 != -1)
      ((void (*)(_QWORD **, WebCore::WindowProxy **))off_1E33FEB30[v6])(&v72, this + 24);
    *((_DWORD *)this + 54) = -1;
  }
  v7 = this[23];
  this[23] = 0;
  if (v7)
  {
    WebCore::HistoryController::~HistoryController(v7, (WTF::StringImpl *)v3);
    if (*(_DWORD *)v8)
    {
      *((_OWORD *)v8 + 2) = 0u;
      *((_OWORD *)v8 + 3) = 0u;
      *(_OWORD *)v8 = 0u;
      *((_OWORD *)v8 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v8, v3);
    }
  }
  v9 = this[21];
  if (v9)
  {
    v54 = *((unsigned int *)v9 - 1);
    if ((_DWORD)v54)
    {
      for (i = 0; i != v54; ++i)
      {
        v56 = (unsigned int *)*((_QWORD *)v9 + i);
        if (v56 != (unsigned int *)-1)
        {
          *((_QWORD *)v9 + i) = 0;
          if (v56)
          {
            do
            {
              v57 = __ldaxr(v56);
              v58 = v57 - 1;
            }
            while (__stlxr(v58, v56));
            if (!v58)
            {
              atomic_store(1u, v56);
              v59 = v54;
              WTF::fastFree((WTF *)v56, v3);
              v54 = v59;
            }
          }
        }
      }
    }
    WTF::fastFree((WebCore::WindowProxy *)((char *)v9 - 16), v3);
  }
  v10 = (unsigned int *)this[20];
  this[20] = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, v3);
    }
  }
  v13 = this[19];
  this[19] = 0;
  if (v13)
  {
    WebCore::NavigationScheduler::~NavigationScheduler(v13);
    if (*(_DWORD *)v14)
    {
      *((_OWORD *)v14 + 3) = 0u;
      *((_OWORD *)v14 + 4) = 0u;
      *((_OWORD *)v14 + 1) = 0u;
      *((_OWORD *)v14 + 2) = 0u;
      *(_OWORD *)v14 = 0u;
    }
    else
    {
      WTF::fastFree(v14, v3);
    }
  }
  v15 = this[17];
  this[17] = 0;
  if (v15)
  {
    if (*((_DWORD *)v15 + 57) == 1)
      (*(void (**)(WebCore::WindowProxy *))(*(_QWORD *)v15 + 24))(v15);
    else
      --*((_DWORD *)v15 + 57);
  }
  v16 = (unsigned int *)this[16];
  this[16] = 0;
  if (v16)
  {
    do
    {
      v48 = __ldaxr(v16);
      v49 = v48 - 1;
    }
    while (__stlxr(v49, v16));
    if (!v49)
    {
      atomic_store(1u, v16);
      WTF::fastFree((WTF *)v16, v3);
    }
  }
  v17 = this[15];
  this[15] = 0;
  if (v17)
  {
    do
    {
      v18 = __ldaxr((unsigned int *)v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, (unsigned int *)v17));
    if (!v19)
    {
      atomic_store(1u, (unsigned int *)v17);
      v60 = *((unsigned int *)v17 + 7);
      if ((_DWORD)v60)
      {
        v70 = v17;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v17 + 2), (WTF::StringImpl *)(*((_QWORD *)v17 + 2) + 32 * v60));
        v17 = v70;
      }
      v61 = (WTF *)*((_QWORD *)v17 + 2);
      if (v61)
      {
        *((_QWORD *)v17 + 2) = 0;
        *((_DWORD *)v17 + 6) = 0;
        v69 = v17;
        WTF::fastFree(v61, v3);
        v17 = v69;
      }
      WTF::fastFree(v17, v3);
    }
  }
  v20 = this[14];
  this[14] = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 1)
    {
      WebCore::WindowProxy::~WindowProxy(v20, (WTF::StringImpl *)v3);
      WTF::fastFree(v52, v53);
    }
    else
    {
      --*(_DWORD *)v20;
    }
  }
  for (j = this[11]; j; j = (WebCore::WindowProxy *)*((_QWORD *)j + 9))
    (*(void (**)(WebCore::WindowProxy *))(*(_QWORD *)j + 64))(j);
  v22 = (unsigned int *)this[12];
  this[12] = 0;
  if (v22)
  {
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, v22);
      WTF::fastFree((WTF *)v22, v3);
    }
  }
  v25 = this[11];
  this[11] = 0;
  if (v25)
  {
    v26 = (unsigned int *)((char *)v25 + 8);
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v26);
      v62 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v62 = off_1E31FE290;
      v62[1] = v26;
      v72 = v62;
      WTF::ensureOnMainThread();
      v63 = v72;
      v72 = 0;
      if (v63)
        (*(void (**)(_QWORD *))(*v63 + 8))(v63);
    }
  }
  v29 = (unsigned int *)this[10];
  this[10] = 0;
  if (v29)
  {
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
    {
      atomic_store(1u, v29);
      WTF::fastFree((WTF *)v29, v3);
    }
  }
  v32 = this[9];
  this[9] = 0;
  if (v32)
  {
    v33 = (unsigned int *)((char *)v32 + 8);
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
    {
      atomic_store(1u, v33);
      v64 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v64 = off_1E31FE290;
      v64[1] = v33;
      v72 = v64;
      WTF::ensureOnMainThread();
      v65 = v72;
      v72 = 0;
      if (v65)
        (*(void (**)(_QWORD *))(*v65 + 8))(v65);
    }
  }
  v36 = this[8];
  this[8] = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v36 -= 2;
  }
  v37 = (unsigned int *)this[7];
  this[7] = 0;
  if (v37)
  {
    do
    {
      v38 = __ldaxr(v37);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v37));
    if (!v39)
    {
      atomic_store(1u, v37);
      WTF::fastFree((WTF *)v37, v3);
    }
  }
  v40 = (unsigned int *)this[6];
  this[6] = 0;
  if (v40)
  {
    do
    {
      v50 = __ldaxr(v40);
      v51 = v50 - 1;
    }
    while (__stlxr(v51, v40));
    if (!v51)
    {
      atomic_store(1u, v40);
      WTF::fastFree((WTF *)v40, v3);
    }
  }
  v41 = (unsigned int *)this[3];
  this[3] = 0;
  if (v41)
  {
    do
    {
      v42 = __ldaxr(v41);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, v41));
    if (!v43)
    {
      atomic_store(1u, v41);
      WTF::fastFree((WTF *)v41, v3);
    }
  }
  v44 = this[2];
  if (v44)
  {
    *((_QWORD *)v44 + 1) = 0;
    v45 = (unsigned int *)this[2];
    this[2] = 0;
    if (v45)
    {
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (!v47)
      {
        atomic_store(1u, v45);
        WTF::fastFree((WTF *)v45, v3);
      }
    }
  }
  else
  {
    this[2] = 0;
  }
}

_QWORD *WebCore::Frame::resetWindowProxy(WebCore::Frame *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  _QWORD *result;
  WTF::StringImpl *v6;
  WTF *v7;
  uint64_t *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v2 = 1;
  v3 = *((_QWORD *)this + 2);
  if (v3)
    goto LABEL_24;
  v3 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 8) = this;
  v13 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v3;
  if (!v13)
    goto LABEL_24;
  do
  {
    v14 = __ldaxr(v13);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, v13));
  if (!v15)
  {
    atomic_store(1u, v13);
    WTF::fastFree((WTF *)v13, v12);
  }
  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
LABEL_24:
    do
      v4 = __ldaxr((unsigned int *)v3);
    while (__stlxr(v4 + 1, (unsigned int *)v3));
  }
  *(_QWORD *)(v2 + 8) = v3;
  result = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *result = 0;
  *(_QWORD *)(v2 + 16) = result;
  v7 = (WTF *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = v2;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
    {
      v8 = (uint64_t *)*((_QWORD *)v7 + 2);
      *((_QWORD *)v7 + 2) = 0;
      if (v8)
      {
        if (*v8)
          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v8, v6);
        WTF::fastFree((WTF *)v8, v6);
      }
      v9 = (unsigned int *)*((_QWORD *)v7 + 1);
      *((_QWORD *)v7 + 1) = 0;
      if (v9)
      {
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          atomic_store(1u, v9);
          WTF::fastFree((WTF *)v9, v6);
        }
      }
      return (_QWORD *)WTF::fastFree(v7, v6);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
  return result;
}

uint64_t WebCore::Frame::detachFromPage(WebCore::Frame *this)
{
  void *v2;
  uint64_t result;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WebCore::Page *v7;
  uint64_t v8;
  WebCore::Page *v9;
  uint64_t v10;

  if ((*(unsigned int (**)(WebCore::Frame *))(*(_QWORD *)this + 16))(this))
  {
    v6 = *((_QWORD *)this + 3);
    if (v6)
    {
      v7 = *(WebCore::Page **)(v6 + 8);
      if (v7)
      {
        if (*((_BYTE *)this + 144))
        {
          result = 96;
          __break(0xC471u);
          return result;
        }
        WebCore::Page::removeRootFrame(v7, this);
        v8 = *((_QWORD *)this + 3);
        if (v8)
          v9 = *(WebCore::Page **)(v8 + 8);
        else
          v9 = 0;
        v10 = WebCore::Page::scrollingCoordinator(v9);
        if (v10)
          (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v10 + 112))(v10, *((_QWORD *)this + 4), *((_QWORD *)this + 5));
      }
    }
  }
  result = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)result));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)result);
      return WTF::fastFree((WTF *)result, v2);
    }
  }
  return result;
}

uint64_t WebCore::Frame::disconnectOwnerElement(WebCore::Frame *this, void *a2)
{
  uint64_t v3;
  WebCore::HTMLFrameOwnerElement **v4;
  void *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *((_QWORD *)this + 15);
  if (v3)
  {
    v4 = *(WebCore::HTMLFrameOwnerElement ***)(v3 + 8);
    if (v4)
    {
      WebCore::HTMLFrameOwnerElement::clearContentFrame(v4, a2);
      v6 = *((_QWORD *)this + 15);
      *((_QWORD *)this + 15) = 0;
      if (v6)
      {
        do
        {
          v7 = __ldaxr((unsigned int *)v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, (unsigned int *)v6));
        if (!v8)
        {
          atomic_store(1u, (unsigned int *)v6);
          v10 = *(unsigned int *)(v6 + 28);
          if ((_DWORD)v10)
          {
            v13 = v6;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v10));
            v6 = v13;
          }
          v11 = *(WTF **)(v6 + 16);
          if (v11)
          {
            *(_QWORD *)(v6 + 16) = 0;
            *(_DWORD *)(v6 + 24) = 0;
            v12 = v6;
            WTF::fastFree(v11, v5);
            v6 = v12;
          }
          WTF::fastFree((WTF *)v6, v5);
        }
      }
    }
  }
  return (*(uint64_t (**)(WebCore::Frame *))(*(_QWORD *)this + 120))(this);
}

_QWORD **WebCore::Frame::takeWindowProxyFrom(WebCore::WindowProxy **this, WebCore::Frame *a2)
{
  WTF::StringImpl *v4;
  WebCore::WindowProxy *v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  WTF *v12;
  uint64_t *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  void *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;

  WebCore::WindowProxy::detachFromFrame(this[14], a2);
  v5 = (WebCore::WindowProxy *)*((_QWORD *)a2 + 14);
  ++*(_DWORD *)v5;
  v6 = this[14];
  this[14] = v5;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      v14 = (uint64_t *)*((_QWORD *)v6 + 2);
      *((_QWORD *)v6 + 2) = 0;
      if (v14)
      {
        if (*v14)
          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v14, v4);
        WTF::fastFree((WTF *)v14, v4);
      }
      v15 = (unsigned int *)*((_QWORD *)v6 + 1);
      *((_QWORD *)v6 + 1) = 0;
      if (v15)
      {
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          atomic_store(1u, v15);
          WTF::fastFree((WTF *)v15, v4);
        }
      }
      WTF::fastFree(v6, v4);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  v7 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v7 = 1;
  v8 = *((_QWORD *)a2 + 2);
  if (v8)
    goto LABEL_36;
  v8 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v8 = 1;
  *(_QWORD *)(v8 + 8) = a2;
  v23 = (unsigned int *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v8;
  if (!v23)
    goto LABEL_36;
  do
  {
    v24 = __ldaxr(v23);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, v23));
  if (!v25)
  {
    atomic_store(1u, v23);
    WTF::fastFree((WTF *)v23, v22);
  }
  v8 = *((_QWORD *)a2 + 2);
  if (v8)
  {
LABEL_36:
    do
      v9 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v9 + 1, (unsigned int *)v8));
  }
  *(_QWORD *)(v7 + 8) = v8;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v10 = 0;
  *(_QWORD *)(v7 + 16) = v10;
  v12 = (WTF *)*((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v7;
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
    {
      v18 = (uint64_t *)*((_QWORD *)v12 + 2);
      *((_QWORD *)v12 + 2) = 0;
      if (v18)
      {
        if (*v18)
          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v18, v11);
        WTF::fastFree((WTF *)v18, v11);
      }
      v19 = (unsigned int *)*((_QWORD *)v12 + 1);
      *((_QWORD *)v12 + 1) = 0;
      if (v19)
      {
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          atomic_store(1u, v19);
          WTF::fastFree((WTF *)v19, v11);
        }
      }
      WTF::fastFree(v12, v11);
    }
    else
    {
      --*(_DWORD *)v12;
    }
  }
  return WebCore::WindowProxy::replaceFrame(this[14], (WebCore::Frame *)this);
}

uint64_t WebCore::Frame::protectedVirtualView@<X0>(WebCore::Frame *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::Frame *))(*(_QWORD *)this + 56))(this);
  if (result)
    ++*(_DWORD *)(result + 8);
  *a2 = result;
  return result;
}

uint64_t WebCore::Frame::setOpener(WebCore::Frame *this, WebCore::Frame *a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  WebCore::Page *v15;
  WTF *v16[3];

  v4 = *((_QWORD *)this + 20);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
      WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NodeIterator>(v5 + 168, this);
  }
  if (a2)
  {
    WTF::WeakHashSet<WebCore::Frame,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Frame>((uint64_t)a2 + 168, this, (uint64_t)v16);
    v14 = *((_QWORD *)this + 3);
    if (v14)
    {
      v15 = *(WebCore::Page **)(v14 + 8);
      if (v15)
      {
        ++*(_DWORD *)v15;
        *((_BYTE *)v15 + 337) = 1;
        WTF::RefCounted<WebCore::Page>::deref(v15);
      }
    }
    WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>((uint64_t *)v16, (uint64_t)a2);
    v6 = v16[0];
  }
  else
  {
    v6 = 0;
  }
  v16[0] = 0;
  v7 = (unsigned int *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = v6;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
    v10 = (unsigned int *)v16[0];
    v16[0] = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  return (*(uint64_t (**)(WebCore::Frame *))(*(_QWORD *)this + 136))(this);
}

unsigned int *WTF::WeakHashSet<WebCore::Frame,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Frame>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  unsigned int *result;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v34;
  int v35;
  uint64_t v36;
  WTF *v37;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    v8 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_3:
      v9 = 0;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_4:
      v10 = v9;
LABEL_5:
      *(_DWORD *)(a1 + 12) = 2 * v10;
      goto LABEL_6;
    }
    v24 = *(unsigned int *)(v8 - 4);
    if (!(_DWORD)v24)
      goto LABEL_43;
    v25 = 0;
    do
    {
      while (1)
      {
        v26 = --v24;
        v27 = *(_QWORD *)(v8 + 8 * v24);
        if ((unint64_t)(v27 + 1) >= 2 && !*(_QWORD *)(v27 + 8))
          break;
        if (!(_DWORD)v24)
          goto LABEL_33;
      }
      *(_QWORD *)(v8 + 8 * v24) = 0;
      do
      {
        v28 = __ldaxr((unsigned int *)v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, (unsigned int *)v27));
      if (!v29)
      {
        atomic_store(1u, (unsigned int *)v27);
        v35 = v25;
        v34 = v24;
        v36 = v24;
        WTF::fastFree((WTF *)v27, a2);
        v26 = v36;
        v24 = v34;
        v25 = v35;
      }
      *(_QWORD *)(v8 + 8 * v26) = -1;
      ++v25;
    }
    while (v26);
LABEL_33:
    v8 = *(_QWORD *)a1;
    if (v25)
    {
      *(_DWORD *)(v8 - 16) += v25;
      v30 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v31 = *(_DWORD *)(v30 - 12);
      else
        v31 = 0;
      *(_DWORD *)(v30 - 12) = v31 - v25;
      v8 = *(_QWORD *)a1;
    }
    if (!v8)
      goto LABEL_3;
    v32 = *(_DWORD *)(v8 - 4);
    if (v32 < 9 || 6 * *(_DWORD *)(v8 - 12) >= v32)
    {
LABEL_43:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      v8 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (!v8)
      {
        v9 = 0;
        goto LABEL_4;
      }
    }
    v9 = *(_DWORD *)(v8 - 12);
    v10 = 0x7FFFFFFF;
    if (v9 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_6:
  v11 = a2[2];
  if (!v11)
  {
    v11 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v11 = 1;
    *(_QWORD *)(v11 + 8) = a2;
    v21 = (unsigned int *)a2[2];
    a2[2] = v11;
    if (v21)
    {
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        atomic_store(1u, v21);
        WTF::fastFree((WTF *)v21, v20);
      }
      v11 = a2[2];
    }
  }
  do
    v12 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v12 + 1, (unsigned int *)v11));
  do
    v13 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v13 + 1, (unsigned int *)v11));
  v37 = (WTF *)v11;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v37, a3);
  result = (unsigned int *)v37;
  v37 = 0;
  if (!result)
    goto LABEL_12;
  do
  {
    v16 = __ldaxr(result);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, result));
  if (!v17)
  {
    atomic_store(1u, result);
    result = (unsigned int *)WTF::fastFree((WTF *)result, v14);
    if (!v11)
      return result;
  }
  else
  {
LABEL_12:
    if (!v11)
      return result;
  }
  do
  {
    v18 = __ldaxr((unsigned int *)v11);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, (unsigned int *)v11));
  if (!v19)
  {
    atomic_store(1u, (unsigned int *)v11);
    return (unsigned int *)WTF::fastFree((WTF *)v11, v14);
  }
  return result;
}

_QWORD *WebCore::Frame::detachFromAllOpenedFrames(_QWORD *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t i;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];

  v2 = 0;
  v3 = 0;
  v4 = this[21];
  v5 = this[22];
  this[21] = 0;
  this[22] = 0;
  v28[0] = v4;
  v28[1] = v5;
  if (!v4)
    goto LABEL_2;
  v3 = *(unsigned int *)(v4 - 4);
  v6 = v4 + 8 * v3;
  if (!*(_DWORD *)(v4 - 12))
  {
    v2 = v4 + 8 * v3;
LABEL_2:
    v6 = v4 + 8 * v3;
    goto LABEL_3;
  }
  v2 = v4;
  if ((_DWORD)v3)
  {
    v10 = 8 * v3;
    v2 = v4;
    while ((unint64_t)(*(_QWORD *)v2 + 1) <= 1)
    {
      v2 += 8;
      v10 -= 8;
      if (!v10)
      {
        v2 = v6;
        break;
      }
    }
  }
LABEL_3:
  v23 = v28;
  v24 = v2;
  v25 = v6;
  if (v4)
  {
    v8 = *(unsigned int *)(v4 - 4);
    v7 = v4 + 8 * v8;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v26 = v7;
  v27 = v4 + 8 * v8;
  if (v2 != v7)
  {
    if (!*(_QWORD *)(*(_QWORD *)v2 + 8))
    {
      v20 = v2;
      do
      {
        v21 = v20 + 8;
        v20 = v6;
        if (v21 != v6)
        {
          v20 = v21;
          while ((unint64_t)(*(_QWORD *)v20 + 1) <= 1)
          {
            v20 += 8;
            if (v20 == v6)
            {
              v20 = v6;
              break;
            }
          }
        }
        v2 = v7;
        if (v20 == v7)
          break;
        v2 = v20;
      }
      while (!*(_QWORD *)(*(_QWORD *)v20 + 8));
    }
    v24 = v2;
  }
  if (v4)
    v9 = v4 + 8 * *(unsigned int *)(v4 - 4);
  else
    v9 = 0;
  if (v2 != v9)
  {
    do
    {
      v11 = *(_QWORD *)(*(_QWORD *)v2 + 8);
      v12 = *(unsigned int **)(v11 + 160);
      *(_QWORD *)(v11 + 160) = 0;
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          WTF::fastFree((WTF *)v12, a2);
        }
      }
      this = WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v23);
      v2 = v24;
    }
    while (v24 != v9);
    v4 = v28[0];
  }
  if (v4)
  {
    v15 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v15)
    {
      for (i = 0; i != v15; ++i)
      {
        v17 = *(unsigned int **)(v4 + 8 * i);
        if (v17 != (unsigned int *)-1)
        {
          *(_QWORD *)(v4 + 8 * i) = 0;
          if (v17)
          {
            do
            {
              v18 = __ldaxr(v17);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, v17));
            if (!v19)
            {
              atomic_store(1u, v17);
              v22 = v4;
              WTF::fastFree((WTF *)v17, a2);
              v4 = v22;
            }
          }
        }
      }
    }
    return (_QWORD *)WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  return this;
}

uint64_t WebCore::Frame::openedFrames@<X0>(uint64_t this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29[5];
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;

  v3 = this;
  v6 = (uint64_t *)(this + 168);
  v5 = *(_QWORD *)(this + 168);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  if (!v5)
  {
LABEL_2:
    *(_DWORD *)(v3 + 176) = 0;
LABEL_3:
    *(_DWORD *)(v3 + 180) = 0;
    goto LABEL_4;
  }
  v12 = *(unsigned int *)(v5 - 4);
  if (!(_DWORD)v12)
    goto LABEL_34;
  v13 = 0;
  do
  {
    while (1)
    {
      v14 = --v12;
      this = *(_QWORD *)(v5 + 8 * v12);
      if ((unint64_t)(this + 1) >= 2 && !*(_QWORD *)(this + 8))
        break;
      if (!(_DWORD)v12)
        goto LABEL_24;
    }
    *(_QWORD *)(v5 + 8 * v12) = 0;
    do
    {
      v15 = __ldaxr((unsigned int *)this);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, (unsigned int *)this));
    if (!v16)
    {
      atomic_store(1u, (unsigned int *)this);
      v26 = v12;
      v27 = v5;
      v25 = v13;
      v28 = v12;
      this = WTF::fastFree((WTF *)this, a2);
      v5 = v27;
      v14 = v28;
      v12 = v26;
      v13 = v25;
    }
    *(_QWORD *)(v5 + 8 * v14) = -1;
    ++v13;
  }
  while (v14);
LABEL_24:
  v5 = *v6;
  if (v13)
  {
    *(_DWORD *)(v5 - 16) += v13;
    v17 = *v6;
    if (*v6)
      v18 = *(_DWORD *)(v17 - 12);
    else
      v18 = 0;
    *(_DWORD *)(v17 - 12) = v18 - v13;
    v5 = *v6;
  }
  if (!v5)
    goto LABEL_2;
  v19 = *(_DWORD *)(v5 - 4);
  if (v19 < 9 || 6 * *(_DWORD *)(v5 - 12) >= v19)
  {
LABEL_34:
    *(_DWORD *)(v3 + 176) = 0;
  }
  else
  {
    this = (uint64_t)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v6);
    v5 = *(_QWORD *)(v3 + 168);
    *(_DWORD *)(v3 + 176) = 0;
    if (!v5)
      goto LABEL_3;
  }
  v21 = *(_DWORD *)(v5 - 12);
  if (v21 >= 0x7FFFFFFF)
    v22 = -2;
  else
    v22 = 2 * v21;
  *(_DWORD *)(v3 + 180) = v22;
  v23 = *(unsigned int *)(v5 - 12);
  if ((_DWORD)v23)
  {
    if (v23 >> 29)
    {
      __break(0xC471u);
      return this;
    }
    v24 = WTF::fastMalloc((WTF *)(8 * v23));
    *(_DWORD *)(a3 + 8) = v23;
    *(_QWORD *)a3 = v24;
  }
LABEL_4:
  WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v6, &v30);
  this = (uint64_t)WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v6, v29);
  while (v31 != v29[1])
  {
    v7 = *(_QWORD *)(*v31 + 8);
    v8 = (unsigned int *)(v7 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    v10 = *(unsigned int *)(a3 + 12);
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v10) = v7;
    *(_DWORD *)(a3 + 12) = v10 + 1;
    v11 = v31;
    do
      v31 = ++v11;
    while (v11 != v32 && (unint64_t)(*v11 + 1) <= 1);
    this = (uint64_t)WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v30);
    ++*((_DWORD *)v30 + 2);
  }
  return this;
}

uint64_t WebCore::Frame::checkedHistory@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 184);
  *a2 = v2;
  ++*v2;
  return this;
}

unsigned int *WebCore::Frame::setOwnerElement(WebCore::Frame *this, WebCore::HTMLFrameOwnerElement *a2)
{
  unsigned int *v4;
  unsigned int *result;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  WTF *v11;
  unsigned int *v12;
  unsigned int *v13;

  if (a2)
  {
    v8 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
    v4 = v8;
    if (v8)
    {
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
    }
  }
  else
  {
    v4 = 0;
  }
  result = (unsigned int *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = v4;
  if (!result)
    goto LABEL_6;
  do
  {
    v6 = __ldaxr(result);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, result));
  if (v7)
  {
LABEL_6:
    if (!a2)
      return result;
    goto LABEL_7;
  }
  atomic_store(1u, result);
  v10 = result[7];
  if ((_DWORD)v10)
  {
    v13 = result;
    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)result + 2), (WTF::StringImpl *)(*((_QWORD *)result + 2) + 32 * v10));
    result = v13;
  }
  v11 = (WTF *)*((_QWORD *)result + 2);
  if (v11)
  {
    *((_QWORD *)result + 2) = 0;
    result[6] = 0;
    v12 = result;
    WTF::fastFree(v11, a2);
    result = v12;
  }
  result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
  if (a2)
  {
LABEL_7:
    WebCore::HTMLFrameOwnerElement::clearContentFrame((WebCore::HTMLFrameOwnerElement **)a2, a2);
    return WebCore::HTMLFrameOwnerElement::setContentFrame(a2, this);
  }
  return result;
}

uint64_t WebCore::Frame::setOwnerPermissionsPolicy(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;

  v3 = result;
  v4 = (void *)(result + 192);
  if (*(_BYTE *)(result + 240))
  {
    v5 = *(unsigned int *)(result + 216);
    v6 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v5 == -1)
    {
      if ((_DWORD)v6 == -1)
        goto LABEL_10;
    }
    else if ((_DWORD)v6 == -1)
    {
      result = ((uint64_t (*)(char *, void *))off_1E33FEB30[v5])(&v18, v4);
      *(_DWORD *)(v3 + 216) = -1;
LABEL_10:
      v10 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a2 + 32) = 0;
      v11 = *(_QWORD *)(v3 + 224);
      *(_QWORD *)(v3 + 224) = v10;
      if (v11)
        result = WTF::fastFree((WTF *)(v11 - 16), v4);
      v12 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a2 + 40) = 0;
      v13 = *(_QWORD *)(v3 + 232);
      *(_QWORD *)(v3 + 232) = v12;
      if (v13)
      {
        v14 = *(unsigned int *)(v13 - 4);
        if ((_DWORD)v14)
        {
          v15 = v13 + 8;
          do
          {
            if (*(unsigned __int8 *)(v15 - 8) != 254)
            {
              v16 = *(unsigned int *)(v15 + 8);
              if ((_DWORD)v16 != -1)
                ((void (*)(char *, uint64_t))off_1E33FEB50[v16])(&v19, v15);
              *(_DWORD *)(v15 + 8) = -1;
            }
            v15 += 24;
            --v14;
          }
          while (v14);
        }
        return WTF::fastFree((WTF *)(v13 - 16), v4);
      }
      return result;
    }
    v17 = result + 192;
    result = ((uint64_t (*)(uint64_t *))off_1E33FEB40[v6])(&v17);
    goto LABEL_10;
  }
  *(_BYTE *)(result + 192) = 0;
  *(_DWORD *)(result + 216) = -1;
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 != -1)
  {
    result = ((uint64_t (*)(char *, void *, uint64_t))off_1E33FEB60[v7])(&v20, v4, a2);
    *(_DWORD *)(v3 + 216) = v7;
  }
  *(_QWORD *)(v3 + 224) = 0;
  v8 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(v3 + 224) = v8;
  *(_QWORD *)(v3 + 232) = 0;
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v3 + 232) = v9;
  *(_BYTE *)(v3 + 240) = 1;
  return result;
}

uint64_t WebCore::Frame::ownerPermissionsPolicy@<X0>(uint64_t this@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const WebCore::Document *v10;
  WebCore::PermissionsPolicy *v11;
  const WebCore::HTMLIFrameElement *v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  _BYTE v29[24];
  int v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[24];
  unsigned int v34;
  uint64_t v35;

  v3 = this;
  v35 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(this + 240))
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 48) = 0;
    *(_DWORD *)(a3 + 24) = -1;
    v5 = *(unsigned int *)(this + 216);
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(_BYTE *, uint64_t, uint64_t))off_1E33FEB70[v5])(v29, a3, this + 192);
      *(_DWORD *)(a3 + 24) = v5;
    }
    WTF::HashTable<WebCore::PermissionsPolicy::Feature,WebCore::PermissionsPolicy::Feature,WTF::IdentityExtractor,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::HashTable((uint64_t *)(a3 + 32), (unsigned __int8 **)(v3 + 224));
    this = (uint64_t)WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::HashTable((uint64_t *)(a3 + 40), (unsigned __int8 **)(v3 + 232));
    *(_BYTE *)(a3 + 48) = 1;
    return this;
  }
  v6 = *(_QWORD *)(this + 120);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 8)) == 0)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 48) = 0;
    return this;
  }
  *(_DWORD *)(v7 + 24) += 2;
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 8) + 192), a2);
  v33[0] = 0;
  v34 = -1;
  v9 = *(unsigned int *)(v8 + 32);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(_BYTE *, _BYTE *, uint64_t))off_1E33FEB70[v9])(v29, v33, v8 + 8);
    v34 = v9;
  }
  v10 = *(const WebCore::Document **)(*(_QWORD *)(v7 + 40) + 8);
  v11 = (WebCore::PermissionsPolicy *)*((_QWORD *)v10 + 438);
  if (!v11)
  {
    v11 = (WebCore::PermissionsPolicy *)WTF::fastMalloc((WTF *)8);
    v20 = WebCore::PermissionsPolicy::PermissionsPolicy(v11, v10);
    v22 = (WTF *)*((_QWORD *)v10 + 438);
    *((_QWORD *)v10 + 438) = v20;
    if (v22)
    {
      if (*(_QWORD *)v22)
        WTF::fastFree((WTF *)(*(_QWORD *)v22 - 16), v21);
      WTF::fastFree(v22, v21);
      v11 = (WebCore::PermissionsPolicy *)*((_QWORD *)v10 + 438);
    }
  }
  this = (uint64_t)WTF::HashTable<WebCore::PermissionsPolicy::Feature,WebCore::PermissionsPolicy::Feature,WTF::IdentityExtractor,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::HashTable(&v27, (unsigned __int8 **)v11);
  v13 = *(_DWORD *)(v7 + 24);
  *(_DWORD *)(v7 + 24) = v13 + 2;
  if (*(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24))
  {
    this = WebCore::PermissionsPolicy::processPermissionsPolicyAttribute((WebCore::PermissionsPolicy *)v7, v12, &v26);
    v14 = v7;
  }
  else
  {
    if (v13)
    {
      *(_DWORD *)(v7 + 24) = v13;
    }
    else if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
    {
      this = WebCore::Node::removedLastRef((WebCore::Node *)v7);
    }
    v14 = 0;
    v26 = 0;
  }
  v29[0] = 0;
  v15 = -1;
  v30 = -1;
  v16 = v34;
  if (v34 != -1)
  {
    this = ((uint64_t (*)(char *, _BYTE *, _BYTE *))off_1E33FEB60[v34])(&v28, v29, v33);
    v30 = v16;
  }
  v18 = v26;
  v17 = v27;
  v26 = 0;
  v27 = 0;
  v31 = v17;
  v32 = v18;
  *(_BYTE *)a3 = 0;
  *(_DWORD *)(a3 + 24) = -1;
  if ((_DWORD)v16 != -1)
  {
    this = ((uint64_t (*)(char *, uint64_t, _BYTE *))off_1E33FEB60[v16])(&v28, a3, v29);
    *(_DWORD *)(a3 + 24) = v16;
    v17 = v31;
    v18 = v32;
    v15 = v30;
  }
  v31 = 0;
  v32 = 0;
  *(_QWORD *)(a3 + 32) = v17;
  *(_QWORD *)(a3 + 40) = v18;
  *(_BYTE *)(a3 + 48) = 1;
  if (v15 != -1)
    this = ((uint64_t (*)(char *, _BYTE *))off_1E33FEB30[v15])(&v28, v29);
  v19 = v26;
  if (v26)
  {
    v23 = *(unsigned int *)(v26 - 4);
    if ((_DWORD)v23)
    {
      v24 = v26 + 8;
      do
      {
        if (*(unsigned __int8 *)(v24 - 8) != 254)
        {
          v25 = *(unsigned int *)(v24 + 8);
          if ((_DWORD)v25 != -1)
            ((void (*)(_BYTE *, uint64_t))off_1E33FEB50[v25])(v29, v24);
          *(_DWORD *)(v24 + 8) = -1;
        }
        v24 += 24;
        --v23;
      }
      while (v23);
    }
    this = WTF::fastFree((WTF *)(v19 - 16), v12);
    if (!v14)
      goto LABEL_25;
    goto LABEL_23;
  }
  if (v14)
  {
LABEL_23:
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)v14);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
  }
LABEL_25:
  if (v27)
    this = WTF::fastFree((WTF *)(v27 - 16), v12);
  if (v34 != -1)
    this = ((uint64_t (*)(_BYTE *, _BYTE *))off_1E33FEB30[v34])(v29, v33);
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v7);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  return this;
}

WebCore::FrameDestructionObserver *WebCore::FrameDestructionObserver::FrameDestructionObserver(WebCore::FrameDestructionObserver *this, WebCore::LocalFrame *a2)
{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E33FEB10;
  WebCore::FrameDestructionObserver::observeFrame(this, a2);
  return this;
}

{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E33FEB10;
  WebCore::FrameDestructionObserver::observeFrame(this, a2);
  return this;
}

unsigned int *WebCore::FrameDestructionObserver::frameDestroyed(WebCore::FrameDestructionObserver *this, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t *WebCore::snapshotFrameRect@<X0>(uint64_t *a1@<X0>, int32x4_t *a2@<X1>, unsigned __int16 *a3@<X2>, uint64_t *a4@<X8>)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  return WebCore::snapshotFrameRectWithClip(a1, a2, (uint64_t)v5, a3, a4);
}

uint64_t *WebCore::snapshotFrameRectWithClip@<X0>(uint64_t *result@<X0>, int32x4_t *a2@<X1>, uint64_t a3@<X2>, unsigned __int16 *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint16x4_t v15;
  int8x8_t v16;
  int8x16_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  WebCore::Widget *v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::Widget *v30;
  WebCore::Widget *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  const WebCore::FloatRect *v37;
  uint64_t v38;
  uint64_t v39;
  WebCore::GraphicsContext *v40;
  uint64_t v41;
  WebCore *v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  double v47;
  uint64_t v48;
  _DWORD v49[4];
  uint64_t v50;
  _BYTE v51[16];
  int v52;
  uint64_t v53;
  float v54[2];
  uint64_t v55;
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v6 = result[3];
  if (v6 && *(_QWORD *)(v6 + 8))
  {
    v10 = result;
    v11 = result[37];
    *(_DWORD *)(v11 + 24) += 2;
    v53 = v11;
    WebCore::Document::updateLayout(v11, 0, 0);
    v12 = *a4;
    WebCore::ScopedFramePaintingState::ScopedFramePaintingState((WebCore::ScopedFramePaintingState *)v51, (WebCore::LocalFrameView **)v10, 0);
    v13 = *a4;
    v14 = (v13 >> 8) & 1;
    v15.i32[0] = *a4;
    v16.i16[0] = vshl_u32((uint32x2_t)*(_OWORD *)&vmovl_u16(v15), (uint32x2_t)0xFFFFFFFDFFFFFFFFLL).u16[0];
    v16.i16[1] = v16.i16[0];
    v16.i16[2] = vshl_u32((uint32x2_t)vdup_n_s32(*(unsigned __int16 *)&v15), (uint32x2_t)0x300000001).i16[2];
    v16.i16[3] = v16.i16[2];
    v17 = (int8x16_t)vmovl_u16((uint16x4_t)vand_s8(v16, (int8x8_t)0x100008000010004));
    *(int8x8_t *)v17.i8 = vorr_s8(*(int8x8_t *)v17.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL));
    WebCore::LocalFrameView::setPaintBehavior(v10[36], v17.i32[0] | v17.i32[1] | ((v13 & 0x200) << 9) | v52);
    v19 = v10[3];
    if (v19)
    {
      v20 = *(_QWORD *)(v19 + 8);
      v21 = *(float *)(v20 + 364);
      if (*(_BYTE *)(v20 + 1098))
        v21 = v21 * *(float *)(v20 + 356);
    }
    else
    {
      v21 = MEMORY[0x16C];
    }
    v22 = ceilf(v21);
    if ((*a4 & 0x40) != 0)
      v23 = v22;
    else
      v23 = v21;
    if ((*a4 & 0x80) != 0)
      v24 = 6;
    else
      v24 = 5;
    v25 = *(_QWORD *)(v11 + 528);
    if (!v25)
      goto LABEL_28;
    v26 = *(_QWORD *)(v25 + 8);
    if (!v26)
      goto LABEL_28;
    v27 = *(WebCore::Widget **)(v26 + 288);
    if (!v27 || !WebCore::Widget::root(v27))
      goto LABEL_28;
    v28 = *(_QWORD *)(v11 + 528);
    if (v28 && (v29 = *(_QWORD *)(v28 + 8)) != 0)
      v30 = *(WebCore::Widget **)(v29 + 288);
    else
      v30 = 0;
    v31 = WebCore::Widget::root(v30);
    v32 = *(_QWORD *)((*(uint64_t (**)(WebCore::Widget *))(*(_QWORD *)v31 + 720))(v31) + 24);
    if (v32 && (v33 = *(_QWORD *)(v32 + 8)) != 0)
      v34 = *(_QWORD *)(v33 + 48);
    else
LABEL_28:
      v34 = 0;
    v35 = (float)a2->i32[3];
    v54[0] = (float)a2->i32[2];
    v54[1] = v35;
    v18.n128_f32[0] = v23;
    WebCore::ImageBuffer::create(v54, v24, (CFTypeRef *)a4 + 1, *((unsigned __int8 *)a4 + 2), v14, v34, &v50, v18);
    if (v50)
    {
      v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 16))(v50);
      (*(void (**)(uint64_t, float, float))(*(_QWORD *)v36 + 648))(v36, (float)-(int)a2->i64[0], (float)(int)((unint64_t)-(uint64_t)(a2->i64[0] & 0xFFFFFFFF00000000) >> 32));
      v38 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v38)
      {
        v56 = 0;
        v42 = *(WebCore **)a3;
        v43 = 16 * v38;
        do
        {
          v49[0] = WebCore::encloseRectToDevicePixels(v42, v37, v23);
          v49[1] = v44;
          v49[2] = v45;
          v49[3] = v46;
          v47 = WebCore::Path::addRect((WebCore::Path *)v54, (const WebCore::FloatRect *)v49);
          v42 = (WebCore *)((char *)v42 + 16);
          v43 -= 16;
        }
        while (v43);
        v48 = (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)v50 + 16))(v50, v47);
        (*(void (**)(uint64_t, float *, uint64_t))(*(_QWORD *)v48 + 496))(v48, v54, 1);
        if (v56 != -1)
          ((void (*)(_DWORD *, uint64_t *))off_1E33FEB80[v56])(v49, &v55);
      }
      v39 = v10[36];
      v40 = (WebCore::GraphicsContext *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 16))(v50);
      WebCore::LocalFrameView::paintContentsForSnapshot(v39, v40, a2, v12 & 1, (v12 >> 2) & 1);
      v41 = v50;
    }
    else
    {
      v41 = 0;
    }
    *a5 = v41;
    WebCore::ScopedFramePaintingState::~ScopedFramePaintingState((WebCore::ScopedFramePaintingState *)v51);
    return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v53);
  }
  else
  {
    *a5 = 0;
  }
  return result;
}

void WebCore::snapshotSelection(uint64_t *a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int32x4_t v29;
  _QWORD v30[2];

  v5 = *(_QWORD *)(a1[37] + 3064);
  if (*(_BYTE *)(v5 + 153) == 2 && (WebCore::FrameSelection::selectionBounds(v5, 1), v9 > 0.0) && v10 > 0.0)
  {
    *a2 |= 2u;
    v11 = floorf(v7);
    v12 = 2147500000.0;
    if (v11 < 2147500000.0)
    {
      v12 = -2147500000.0;
      if (v11 > -2147500000.0)
        v12 = (float)(int)v11;
    }
    v13 = floorf(v8);
    v14 = 2147500000.0;
    if (v13 < 2147500000.0)
    {
      v14 = -2147500000.0;
      if (v13 > -2147500000.0)
        v14 = (float)(int)v13;
    }
    v15 = v8 + v10;
    v16 = ceilf(v7 + v9);
    v17 = 2147500000.0;
    if (v16 < 2147500000.0)
    {
      v17 = -2147500000.0;
      if (v16 > -2147500000.0)
        v17 = (float)(int)v16;
    }
    v18 = ceilf(v15);
    v19 = 2147500000.0;
    if (v18 < 2147500000.0)
    {
      v19 = -2147500000.0;
      if (v18 > -2147500000.0)
        v19 = (float)(int)v18;
    }
    v20 = 0x7FFFFFFFLL;
    v21 = 0x80000000;
    if (v12 > -2147500000.0)
      v21 = (int)v12;
    if (v12 < 2147500000.0)
      v20 = v21;
    v22 = 0x7FFFFFFF00000000;
    v23 = 0x8000000000000000;
    if (v14 > -2147500000.0)
      v23 = (unint64_t)(int)v14 << 32;
    if (v14 < 2147500000.0)
      v22 = v23;
    v24 = v17 - v12;
    v25 = v19 - v14;
    v26 = 0x7FFFFFFFLL;
    v27 = 0x80000000;
    if (v24 > -2147500000.0)
      v27 = (int)v24;
    if (v24 < 2147500000.0)
      v26 = v27;
    if (v25 >= 2147500000.0)
    {
      v28 = 0x7FFFFFFF00000000;
    }
    else if (v25 <= -2147500000.0)
    {
      v28 = 0x8000000000000000;
    }
    else
    {
      v28 = (unint64_t)(int)v25 << 32;
    }
    v29.i64[0] = v22 | v20;
    v29.i64[1] = v28 | v26;
    v30[0] = 0;
    v30[1] = 0;
    WebCore::snapshotFrameRectWithClip(a1, &v29, (uint64_t)v30, a2, a3);
  }
  else
  {
    *a3 = 0;
  }
}

void WebCore::snapshotNode(WebCore::LocalFrameView **a1@<X0>, WebCore::Node *a2@<X1>, unsigned __int16 *a3@<X2>, uint64_t *a4@<X8>)
{
  WebCore::LocalFrameView *v8;
  void *v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  int32x4_t v25;
  int8x16_t v26;
  _BYTE v27[32];
  _QWORD v28[2];

  if ((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) != 0)
  {
    WebCore::ScopedFramePaintingState::ScopedFramePaintingState((WebCore::ScopedFramePaintingState *)v27, a1, a2);
    v8 = a1[36];
    v28[0] = 0x1104000000000000;
    WebCore::LocalFrameView::setBaseBackgroundColor(v8, (const WebCore::Color *)v28);
    if ((v28[0] & 0x8000000000000) != 0)
    {
      v22 = (unsigned int *)(v28[0] & 0xFFFFFFFFFFFFLL);
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, v9);
      }
    }
    WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)a1[36] + 75, (uint64_t)a2);
    v10 = WebCore::RenderObject::paintingRootRect((WebCore::RenderObject *)(*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL), &v26);
    v13 = v10 - (v12 & 0xFFFFFFC0);
    v14 = SHIDWORD(v10) / 64;
    v16 = HIDWORD(v10) - (v15 & 0xFFFFFFC0);
    v18 = v13 + v17;
    if (__OFADD__(v13, v17))
      v18 = (v13 >> 31) + 0x7FFFFFFF;
    v19 = v16 + v11;
    if (__OFADD__(v16, v11))
      v19 = (v16 >> 31) + 0x7FFFFFFF;
    v20 = v16 + 32;
    v21 = v13 + 32;
    v25.i32[0] = (int)v10 / 64 + (v21 >> 6);
    v25.i32[1] = v14 + (v20 >> 6);
    v25.i32[2] = v18 / 64 - (v21 >> 6) + ((int)(v18 - (v14 & 0xFFFFFFC0) + 32) >> 6);
    v25.i32[3] = v19 / 64 - (v20 >> 6) + ((int)(v19 - (v14 & 0xFFFFFFC0) + 32) >> 6);
    v28[0] = 0;
    v28[1] = 0;
    WebCore::snapshotFrameRectWithClip((uint64_t *)a1, &v25, (uint64_t)v28, a3, a4);
    WebCore::ScopedFramePaintingState::~ScopedFramePaintingState((WebCore::ScopedFramePaintingState *)v27);
  }
  else
  {
    *a4 = 0;
  }
}

void WebCore::Color::~Color(WebCore::Color *this, void *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  if ((*(_QWORD *)this & 0x8000000000000) != 0)
  {
    v2 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFLL);
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
    }
  }
}

uint64_t WebCore::estimatedBackgroundColorForRange@<X0>(WebCore *this@<X0>, const WebCore::SimpleRange *a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v6;
  WebCore::Node *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  float32x2_t *v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  int v31;
  int v32;
  float v33;
  float v34;
  int v35;
  int v36;
  int v37;
  uint64_t result;
  uint64_t v39;
  int v40;
  void *v41;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)();
  _BOOL4 v48;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t v59;
  unint64_t v60;
  WTF *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF *v66;
  WTF *v67;
  unint64_t v68;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  WTF *v74;
  unsigned int v75;
  unsigned int v76;
  WTF *v77;
  WTF *v78;
  unsigned int v79;
  unsigned int v80;
  WTF *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  BOOL v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  WTF *v89;
  uint64_t v90;
  WebCore::FloatRect *v91[2];
  __int128 v92;

  v6 = *((_QWORD *)a2 + 36);
  if (v6)
    WebCore::LocalFrameView::documentBackgroundColor(v6, a2, a3);
  else
    *a3 = 0x1104000000000000;
  v7 = *(WebCore::Node **)this;
  v8 = *((_QWORD *)this + 2);
  if (*(_QWORD *)this == v8)
    goto LABEL_5;
  v82 = WebCore::depth<(WebCore::TreeType)2>(*(_QWORD *)this);
  v83 = WebCore::depth<(WebCore::TreeType)2>(v8);
  v84 = v83 - v82;
  v85 = v82 >= v83;
  v86 = v82 - v83;
  if (v82 >= v83)
    v9 = (uint64_t)v7;
  else
    v9 = v8;
  if (v85)
    v7 = (WebCore::Node *)v8;
  if (v85)
    v87 = v86;
  else
    v87 = v84;
  for (; v87; --v87)
    v9 = WebCore::Node::parentInComposedTree((WebCore::Node *)v9);
  if ((WebCore::Node *)v9 == v7)
  {
LABEL_5:
    v9 = (uint64_t)v7;
  }
  else
  {
    do
    {
      v9 = WebCore::Node::parentInComposedTree((WebCore::Node *)v9);
      v7 = (WebCore::Node *)WebCore::Node::parentInComposedTree(v7);
    }
    while ((WebCore::Node *)v9 != v7);
  }
  if (v9)
  {
    while (1)
    {
      v10 = *(_QWORD *)(v9 + 64) & 0xFFFFFFFFFFFFLL;
      if (v10)
      {
        if ((*(_BYTE *)((*(_QWORD *)(v9 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
          break;
      }
      if ((*(_WORD *)(v9 + 28) & 0x80) != 0)
      {
        v13 = *(_QWORD *)(v9 + 200);
        if (!v13)
          goto LABEL_20;
        v11 = (uint64_t *)(v13 + 8);
      }
      else
      {
        v11 = (uint64_t *)(v9 + 32);
      }
      v9 = *v11;
      if (!*v11)
        goto LABEL_20;
      v12 = *(_WORD *)(v9 + 28);
      if ((v12 & 0x80) != 0)
      {
        v14 = *(_QWORD *)(v9 + 200);
        if (!v14)
          goto LABEL_20;
        v9 = *(_QWORD *)(v14 + 8);
        if (!v9)
          goto LABEL_20;
      }
      else if ((v12 & 8) == 0 || !v9)
      {
        goto LABEL_20;
      }
    }
  }
  else
  {
LABEL_20:
    v10 = 0;
  }
  WebCore::borderAndTextRects((uint64_t)v91, (uint64_t)this, 1, 7);
  v92 = 0uLL;
  if (HIDWORD(v91[1]))
  {
    v16 = (float32x2_t *)v91[0];
    v17 = 16 * HIDWORD(v91[1]);
    do
    {
      WebCore::FloatRect::uniteIfNonZero((float32x2_t *)&v92, v16);
      v16 += 2;
      v17 -= 16;
    }
    while (v17);
    v18 = *((float *)&v92 + 1);
    v19 = *(float *)&v92;
    v20 = *((float *)&v92 + 3);
    v21 = *((float *)&v92 + 2);
  }
  else
  {
    v20 = 0.0;
    v21 = 0.0;
    v18 = 0.0;
    v19 = 0.0;
  }
  v22 = floorf(v19);
  v23 = 2147500000.0;
  if (v22 < 2147500000.0)
  {
    v23 = -2147500000.0;
    if (v22 > -2147500000.0)
      v23 = (float)(int)v22;
  }
  v24 = floorf(v18);
  v25 = 2147500000.0;
  if (v24 < 2147500000.0)
  {
    v25 = -2147500000.0;
    if (v24 > -2147500000.0)
      v25 = (float)(int)v24;
  }
  v26 = v20 + v18;
  v27 = ceilf(v21 + v19);
  v28 = 2147500000.0;
  if (v27 < 2147500000.0)
  {
    v28 = -2147500000.0;
    if (v27 > -2147500000.0)
      v28 = (float)(int)v27;
  }
  v29 = ceilf(v26);
  v30 = 2147500000.0;
  if (v29 < 2147500000.0)
  {
    v30 = -2147500000.0;
    if (v29 > -2147500000.0)
      v30 = (float)(int)v29;
  }
  if (v23 >= 2147500000.0)
  {
    v31 = 0x7FFFFFFF;
  }
  else if (v23 <= -2147500000.0)
  {
    v31 = 0x80000000;
  }
  else
  {
    v31 = (int)v23;
  }
  if (v25 >= 2147500000.0)
  {
    v32 = 0x7FFFFFFF;
  }
  else if (v25 <= -2147500000.0)
  {
    v32 = 0x80000000;
  }
  else
  {
    v32 = (int)v25;
  }
  v33 = v28 - v23;
  v34 = v30 - v25;
  if (v33 > -2147500000.0)
    v35 = (int)v33;
  else
    v35 = 0x80000000;
  if (v33 < 2147500000.0)
    v36 = v35;
  else
    v36 = 0x7FFFFFFF;
  if (v34 >= 2147500000.0)
  {
    v37 = 0x7FFFFFFF;
  }
  else if (v34 > -2147500000.0)
  {
    v37 = (int)v34;
  }
  else
  {
    v37 = 0x80000000;
  }
  result = (uint64_t)v91[0];
  if (v91[0])
  {
    v91[0] = 0;
    LODWORD(v91[1]) = 0;
    result = WTF::fastFree((WTF *)result, v15);
  }
  v89 = 0;
  v90 = 0;
  if ((*(_BYTE *)(v10 + 45) & 2) != 0)
  {
    v39 = *(_QWORD *)(v10 + 32);
    if (!v39)
      return result;
    v10 = *(_QWORD *)(v39 + 8);
    if (!v10)
      return result;
  }
  v40 = v37 + v32;
  while (1)
  {
    result = WebCore::RenderObject::absoluteBoundingBoxRect((WebCore::RenderObject *)v10, 1, 0);
    if (v31 < (int)result
      || (int)v41 + (int)result < v36 + v31
      || v32 < SHIDWORD(result)
      || HIDWORD(v41) + HIDWORD(result) < v40)
    {
      goto LABEL_71;
    }
    result = (uint64_t)WebCore::RenderStyle::visitedDependentColor(v10 + 80, 61, 0, (uint64_t *)&v92);
    if ((v92 & 0x8000000000000) != 0)
    {
      result = v92 & 0xFFFFFFFFFFFFLL;
      if (*(float *)((v92 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0)
      {
        v48 = 1;
        goto LABEL_104;
      }
    }
    else if ((_BYTE)v92)
    {
      goto LABEL_83;
    }
    v46 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 88) + 16) + 8);
    if (*(_QWORD *)(v46 + 8))
    {
      do
      {
        v56 = *(_QWORD *)(v46 + 16);
        v48 = v56 != 0;
        if (v56)
          break;
        v46 = *(_QWORD *)(v46 + 8);
      }
      while (v46);
    }
    else
    {
      v47 = *(_QWORD *)(v46 + 16)
          ? WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance
          : 0;
      v48 = v47 != 0;
    }
    if ((v92 & 0x8000000000000) != 0)
      break;
LABEL_82:
    if (v48)
      goto LABEL_83;
LABEL_71:
    v45 = *(_QWORD *)(v10 + 32);
    if (v45)
    {
      v10 = *(_QWORD *)(v45 + 8);
      if (v10)
        continue;
    }
    v59 = HIDWORD(v90);
    if (HIDWORD(v90) >= 2)
    {
      v60 = 0;
      v61 = v89;
      v62 = (unint64_t)HIDWORD(v90) >> 1;
      v63 = (HIDWORD(v90) - 1);
      do
      {
        if (v60 >= v59 || v63 >= v59)
        {
          __break(0xC471u);
          JUMPOUT(0x195FCBAD4);
        }
        v64 = *((_QWORD *)v61 + v60);
        if (v64)
          *((_QWORD *)v61 + v60) = 0;
        v65 = *((_QWORD *)v61 + v63);
        if (v65)
        {
          *((_QWORD *)v61 + v60) = v65;
          *((_QWORD *)v61 + v63) = 0;
        }
        if (v64)
          *((_QWORD *)v61 + v63) = v64;
        ++v60;
        --v63;
      }
      while (v60 < v62);
    }
    v66 = v89;
    if (!(_DWORD)v59)
    {
LABEL_163:
      if (v66)
      {
        v89 = 0;
        LODWORD(v90) = 0;
        v81 = v66;
        return WTF::fastFree(v81, v41);
      }
      return result;
    }
    v67 = (WTF *)((char *)v89 + 8 * v59);
    while (1)
    {
      result = (uint64_t)WebCore::blendSourceOver(a3, v66, &v88);
      v68 = *a3;
      if ((*a3 & 0x8000000000000) != 0)
      {
        if ((v88 & 0x8000000000000) != 0)
        {
          v92 = *(_OWORD *)((v68 & 0xFFFFFFFFFFFFLL) + 4);
          *(_OWORD *)v91 = *(_OWORD *)((v88 & 0xFFFFFFFFFFFFLL) + 4);
          result = WebCore::operator==<float,4ul>((float *)&v92, (float *)v91);
          v68 = *a3;
          if ((_DWORD)result)
          {
            if (HIBYTE(v68) == HIBYTE(v88) && BYTE6(v68) == BYTE6(v88))
            {
              v68 = v88;
LABEL_140:
              if ((v68 & 0x8000000000000) != 0)
              {
                result = v68 & 0xFFFFFFFFFFFFLL;
                do
                {
                  v72 = __ldaxr((unsigned int *)result);
                  v73 = v72 - 1;
                }
                while (__stlxr(v73, (unsigned int *)result));
                if (!v73)
                {
                  atomic_store(1u, (unsigned int *)result);
                  result = WTF::fastFree((WTF *)result, v41);
                }
              }
              goto LABEL_129;
            }
          }
        }
      }
      else if (v68 == v88 && (v88 & 0x8000000000000) == 0)
      {
        goto LABEL_140;
      }
      if ((v68 & 0x8000000000000) != 0)
      {
        result = v68 & 0xFFFFFFFFFFFFLL;
        do
        {
          v70 = __ldaxr((unsigned int *)result);
          v71 = v70 - 1;
        }
        while (__stlxr(v71, (unsigned int *)result));
        if (!v71)
        {
          atomic_store(1u, (unsigned int *)result);
          result = WTF::fastFree((WTF *)result, v41);
        }
      }
      *a3 = v88;
LABEL_129:
      v66 = (WTF *)((char *)v66 + 8);
      if (v66 == v67)
      {
        v66 = v89;
        if (HIDWORD(v90))
        {
          v74 = (WTF *)((char *)v89 + 8 * HIDWORD(v90));
          do
          {
            if ((*(_QWORD *)v66 & 0x8000000000000) != 0)
            {
              result = *(_QWORD *)v66 & 0xFFFFFFFFFFFFLL;
              do
              {
                v75 = __ldaxr((unsigned int *)result);
                v76 = v75 - 1;
              }
              while (__stlxr(v76, (unsigned int *)result));
              if (!v76)
              {
                atomic_store(1u, (unsigned int *)result);
                result = WTF::fastFree((WTF *)result, v41);
              }
            }
            v66 = (WTF *)((char *)v66 + 8);
          }
          while (v66 != v74);
          v66 = v89;
        }
        goto LABEL_163;
      }
    }
  }
  result = v92 & 0xFFFFFFFFFFFFLL;
  do
  {
LABEL_104:
    v57 = __ldaxr((unsigned int *)result);
    v58 = v57 - 1;
  }
  while (__stlxr(v58, (unsigned int *)result));
  if (v58)
    goto LABEL_82;
  atomic_store(1u, (unsigned int *)result);
  result = WTF::fastFree((WTF *)result, v41);
  if (!v48)
    goto LABEL_71;
LABEL_83:
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 88) + 40) + 636) & 0x1F00000) == 0x100000)
  {
    result = WebCore::RenderStyle::hasBackgroundImage((WebCore::RenderStyle *)(v10 + 80));
    if ((result & 1) == 0 && !*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 88) + 40) + 72) + 20))
    {
      result = (uint64_t)WebCore::RenderStyle::visitedDependentColor(v10 + 80, 61, 0, (uint64_t *)&v92);
      v49 = v92;
      if ((_QWORD)v92 != 0x1104000000000000)
      {
        v50 = HIDWORD(v90);
        if (HIDWORD(v90) == (_DWORD)v90)
        {
          result = WTF::Vector<WebCore::Color,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v89, HIDWORD(v90) + 1, (unint64_t)&v92);
          v50 = HIDWORD(v90);
          v51 = v89;
          v49 = *(_QWORD *)result;
        }
        else
        {
          v51 = v89;
        }
        *((_QWORD *)v51 + v50) = v49;
        if ((v49 & 0x8000000000000) != 0)
        {
          v54 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFLL);
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 + 1, v54));
        }
        ++HIDWORD(v90);
        if ((v92 & 0x8000000000000) != 0)
        {
          result = v92 & 0xFFFFFFFFFFFFLL;
          do
          {
            v52 = __ldaxr((unsigned int *)result);
            v53 = v52 - 1;
          }
          while (__stlxr(v53, (unsigned int *)result));
          if (!v53)
          {
            atomic_store(1u, (unsigned int *)result);
            result = WTF::fastFree((WTF *)result, v41);
          }
        }
      }
      goto LABEL_71;
    }
  }
  v77 = v89;
  if (HIDWORD(v90))
  {
    v78 = (WTF *)((char *)v89 + 8 * HIDWORD(v90));
    do
    {
      if ((*(_QWORD *)v77 & 0x8000000000000) != 0)
      {
        result = *(_QWORD *)v77 & 0xFFFFFFFFFFFFLL;
        do
        {
          v79 = __ldaxr((unsigned int *)result);
          v80 = v79 - 1;
        }
        while (__stlxr(v80, (unsigned int *)result));
        if (!v80)
        {
          atomic_store(1u, (unsigned int *)result);
          result = WTF::fastFree((WTF *)result, v41);
        }
      }
      v77 = (WTF *)((char *)v77 + 8);
    }
    while (v77 != v78);
    v77 = v89;
  }
  if (v77)
  {
    v89 = 0;
    LODWORD(v90) = 0;
    v81 = v77;
    return WTF::fastFree(v81, v41);
  }
  return result;
}

WTF::StringImpl *WebCore::FrameTree::clearName(WebCore::FrameTree *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *result;

  v3 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v3 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int **WTF::WeakPtr<WebCore::Frame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator=(unsigned int **a1, unsigned int *a2)
{
  unsigned int v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  if (a2)
  {
    do
      v3 = __ldaxr(a2);
    while (__stlxr(v3 + 1, a2));
  }
  v4 = *a1;
  *a1 = a2;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

unsigned int *WebCore::FrameTree::removeChild(WebCore::FrameTree *this, WebCore::Frame *a2)
{
  uint64_t v4;
  unsigned int **v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *result;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;

  v5 = (unsigned int **)((char *)this + 48);
  v4 = *((_QWORD *)this + 6);
  if (!v4 || *(WebCore::Frame **)(v4 + 8) != a2)
    v5 = (unsigned int **)(*((_QWORD *)a2 + 9) + 80);
  v6 = (uint64_t *)((char *)this + 40);
  if (*((WebCore::Frame **)this + 5) != a2)
  {
    v7 = *((_QWORD *)a2 + 10);
    if (v7)
      v7 = *(_QWORD *)(v7 + 8);
    v6 = (uint64_t *)(v7 + 72);
  }
  v8 = (unsigned int *)*((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  v11 = (unsigned int *)*((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = 0;
  result = *v5;
  *v5 = v11;
  if (result)
  {
    do
    {
      v13 = __ldaxr(result);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, result));
    if (!v14)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  v15 = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = 0;
  v16 = *v6;
  *v6 = v15;
  if (v16)
  {
    v17 = (unsigned int *)(v16 + 8);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      v20 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v20 = off_1E31FE290;
      *((_QWORD *)v20 + 1) = v17;
      v21 = v20;
      WTF::ensureOnMainThread();
      result = v21;
      if (v21)
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v21 + 8))(v21);
    }
  }
  *((_DWORD *)this + 14) = -1;
  return result;
}

BOOL WebCore::inScope(WebCore *this, WebCore::Frame *a2, WebCore::TreeScope *a3)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _BOOL8 v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v15;
  _QWORD *v16;

  if (*((_BYTE *)this + 144))
    return 1;
  v3 = (unsigned int *)((char *)this + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = *((_QWORD *)this + 37);
  if (v5)
  {
    *(_DWORD *)(v5 + 24) += 2;
    v6 = *(_QWORD *)(v5 + 528);
    if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0 && (v8 = *(_QWORD *)(v7 + 120)) != 0 && (v9 = *(_QWORD *)(v8 + 8)) != 0)
    {
      v10 = *(_DWORD *)(v9 + 24);
      *(_DWORD *)(v9 + 24) = v10 + 2;
      v11 = *(_QWORD *)(v9 + 40) == (_QWORD)a2;
      if (v10)
      {
        *(_DWORD *)(v9 + 24) = v10;
      }
      else if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
      }
    }
    else
    {
      v11 = 0;
    }
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  else
  {
    v11 = 0;
  }
  do
  {
    v12 = __ldaxr(v3);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v3));
  if (!v13)
  {
    atomic_store(1u, v3);
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v15 = off_1E31FE290;
    v15[1] = v3;
    v16 = v15;
    WTF::ensureOnMainThread();
    if (v16)
      (*(void (**)(_QWORD *))(*v16 + 8))(v16);
  }
  return v11;
}

WebCore *WebCore::FrameTree::scopedChild(WebCore **this, void *a2, WebCore::TreeScope *a3)
{
  uint64_t v3;
  BOOL v4;
  WebCore *v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;

  v3 = *((_QWORD *)*this + 1);
  if (v3)
    v4 = *(_BYTE *)(v3 + 144) == 0;
  else
    v4 = 0;
  if (!v4)
    return 0;
  v6 = *(_QWORD *)(v3 + 296);
  if (!v6)
    return 0;
  v7 = *(_DWORD *)(v6 + 24);
  *(_DWORD *)(v6 + 24) = v7 + 2;
  v5 = this[5];
  if (v5)
  {
    v8 = (int)a2;
    v9 = 0;
    do
    {
      if (WebCore::inScope(v5, (WebCore::Frame *)(v6 + 96), a3))
      {
        if (v9 == v8)
          break;
        ++v9;
      }
      v5 = (WebCore *)*((_QWORD *)v5 + 9);
    }
    while (v5);
    v7 = *(_DWORD *)(v6 + 24) - 2;
  }
  if (v7)
  {
    *(_DWORD *)(v6 + 24) = v7;
  }
  else if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
  }
  return v5;
}

WebCore *WebCore::FrameTree::scopedChildByUniqueName(WebCore **this, const WTF::AtomString *a2)
{
  uint64_t v2;
  BOOL v3;
  WebCore *v4;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  WebCore::TreeScope *v12;

  v2 = *((_QWORD *)*this + 1);
  if (v2)
    v3 = *(_BYTE *)(v2 + 144) == 0;
  else
    v3 = 0;
  if (v3)
  {
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = off_1E33FEBF8;
    v8[1] = a2;
    v9 = *(_QWORD *)(v2 + 296);
    if (!v9)
    {
      v4 = 0;
      goto LABEL_10;
    }
    v10 = *(_DWORD *)(v9 + 24);
    *(_DWORD *)(v9 + 24) = v10 + 2;
    v4 = this[5];
    if (v4)
    {
      do
      {
        if ((*(unsigned int (**)(_QWORD *, _QWORD *))(*v8 + 16))(v8, (_QWORD *)v4 + 6)
          && WebCore::inScope(v4, (WebCore::Frame *)(v9 + 96), v12))
        {
          break;
        }
        v4 = (WebCore *)*((_QWORD *)v4 + 9);
      }
      while (v4);
      v10 = *(_DWORD *)(v9 + 24) - 2;
      if (*(_DWORD *)(v9 + 24) != 2)
        goto LABEL_9;
    }
    else if (v10)
    {
LABEL_9:
      *(_DWORD *)(v9 + 24) = v10;
LABEL_10:
      (*(void (**)(_QWORD *))(*v8 + 8))(v8);
      return v4;
    }
    if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v9, v7);
    goto LABEL_10;
  }
  return 0;
}

WebCore *WebCore::FrameTree::scopedChildBySpecifiedName(WebCore **this, const WTF::AtomString *a2)
{
  uint64_t v2;
  BOOL v3;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  WebCore::TreeScope *v11;
  WebCore *v12;

  v2 = *((_QWORD *)*this + 1);
  if (v2)
    v3 = *(_BYTE *)(v2 + 144) == 0;
  else
    v3 = 0;
  if (!v3)
    return 0;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E33FEC20;
  v7[1] = a2;
  v8 = *(_QWORD *)(v2 + 296);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 + 24);
    *(_DWORD *)(v8 + 24) = v9 + 2;
    v12 = this[5];
    if (v12)
    {
      do
      {
        if ((*(unsigned int (**)(_QWORD *, _QWORD *))(*v7 + 16))(v7, (_QWORD *)v12 + 6)
          && WebCore::inScope(v12, (WebCore::Frame *)(v8 + 96), v11))
        {
          break;
        }
        v12 = (WebCore *)*((_QWORD *)v12 + 9);
      }
      while (v12);
      v9 = *(_DWORD *)(v8 + 24) - 2;
    }
    if (v9)
    {
      *(_DWORD *)(v8 + 24) = v9;
    }
    else if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v6);
    }
  }
  else
  {
    v12 = 0;
  }
  (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  return v12;
}

uint64_t WebCore::FrameTree::scopedChildCount(WebCore::FrameTree *this, uint64_t a2, WebCore::TreeScope *a3)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  WebCore::TreeScope *v8;

  result = *((unsigned int *)this + 14);
  if ((_DWORD)result == -1)
  {
    v5 = *(_QWORD *)(*(_QWORD *)this + 8);
    if (v5)
      v6 = *(_BYTE *)(v5 + 144) == 0;
    else
      v6 = 0;
    if (v6)
    {
      v7 = *(_QWORD *)(v5 + 296);
      if (v7)
        v8 = (WebCore::TreeScope *)(v7 + 96);
      else
        v8 = 0;
      result = WebCore::FrameTree::scopedChildCount(this, v8, a3);
      *((_DWORD *)this + 14) = result;
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t WebCore::FrameTree::scopedChildCount(WebCore::FrameTree *this, WebCore::TreeScope *a2, WebCore::TreeScope *a3)
{
  WebCore *v3;
  uint64_t v4;

  if (!a2)
    return 0;
  v3 = (WebCore *)*((_QWORD *)this + 5);
  if (!v3)
    return 0;
  LODWORD(v4) = 0;
  do
  {
    v4 = (v4 + WebCore::inScope(v3, a2, a3));
    v3 = (WebCore *)*((_QWORD *)v3 + 9);
  }
  while (v3);
  return v4;
}

uint64_t WebCore::FrameTree::childCount(WebCore::FrameTree *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = *((_QWORD *)this + 5);
  if (!v1)
    return 0;
  LODWORD(result) = 0;
  do
  {
    result = (result + 1);
    v1 = *(_QWORD *)(v1 + 72);
  }
  while (v1);
  return result;
}

_QWORD *WebCore::FrameTree::findByUniqueName(WebCore::FrameTree *this, WTF::StringImpl **a2, WebCore::Frame *a3)
{
  WTF::StringImpl *v6;
  unint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  WTF::StringImpl *v13;
  unsigned __int8 *v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned int v22;
  unint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  _QWORD *v28;
  _QWORD *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v35;
  _QWORD *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WebCore::Page *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  WTF *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  WebCore::Frame *v81;
  WebCore::Page *v82;
  WTF::StringImpl *v83;

  v6 = *a2;
  if (*a2)
  {
    v7 = *((unsigned int *)v6 + 4);
    v8 = (const char *)*((_QWORD *)v6 + 1);
    LODWORD(v6) = *((_DWORD *)v6 + 1);
    v9 = (v7 >> 2) & 1;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  if (WebCore::isSelfTargetFrameName(v8, v6 | (unint64_t)(v9 << 32)))
  {
LABEL_4:
    v10 = *(_QWORD *)this;
    return *(_QWORD **)(v10 + 8);
  }
  v13 = *a2;
  if (*a2)
  {
    v14 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
    v15 = *((_DWORD *)v13 + 1);
    v16 = *((unsigned int *)v13 + 4);
    if (v15 == 4)
    {
      if ((v16 & 4) != 0)
      {
        v17 = MEMORY[0x1E0CBF868];
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v14) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v14[1]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v14[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
        {
          v18 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v14[3]);
          goto LABEL_14;
        }
      }
      else
      {
        v17 = MEMORY[0x1E0CBF868];
        if ((*(unsigned __int16 *)v14 | (32 * (*(unsigned __int16 *)v14 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
          && (*((unsigned __int16 *)v14 + 1) | (32 * (*((unsigned __int16 *)v14 + 1) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
          && (*((unsigned __int16 *)v14 + 2) | (32 * (*((unsigned __int16 *)v14 + 2) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
        {
          v18 = *((unsigned __int16 *)v14 + 3) | (32 * (*((unsigned __int16 *)v14 + 3) - 65 < 0x1A));
LABEL_14:
          if (v18 == *(unsigned __int8 *)(v17 + 112))
          {
            v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 8) + 128);
            return *(_QWORD **)(v10 + 8);
          }
        }
      }
    }
    v19 = (v16 >> 2) & 1;
    goto LABEL_23;
  }
  v14 = 0;
  v15 = 0;
  v19 = 1;
LABEL_23:
  if (WebCore::isParentTargetFrameName(v14, v15 | (unint64_t)(v19 << 32)))
  {
    v20 = *((_QWORD *)this + 1);
    if (v20)
    {
      v11 = *(_QWORD **)(v20 + 8);
      if (v11)
        return v11;
    }
    goto LABEL_4;
  }
  if (v13)
  {
    v21 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
    v22 = *((_DWORD *)v13 + 1);
    v23 = ((unint64_t)*((unsigned int *)v13 + 4) >> 2) & 1;
  }
  else
  {
    v21 = 0;
    v22 = 0;
    v23 = 1;
  }
  if (WebCore::isBlankTargetFrameName(v21, v22 | (v23 << 32)))
    return 0;
  v25 = *(_QWORD *)(*(_QWORD *)this + 8);
  v26 = (unsigned int *)(v25 + 8);
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 + 1, v26));
  if (!v25)
    goto LABEL_50;
  v28 = (_QWORD *)v25;
  while (1)
  {
LABEL_35:
    v11 = v28;
    v29 = v28 + 6;
    WebCore::FrameTree::uniqueName((uint64_t)(v28 + 6), v24, (WTF::AtomString *)&v83);
    v30 = v83;
    v31 = *a2;
    v83 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v24);
      else
        *(_DWORD *)v30 -= 2;
    }
    if (v30 == v31)
    {
LABEL_159:
      if (!v25)
        return v11;
      goto LABEL_162;
    }
    v28 = (_QWORD *)v11[11];
    if (!v28)
    {
      v32 = *(_QWORD *)(*v29 + 8);
      if (v32 == v25)
        goto LABEL_50;
      v28 = (_QWORD *)v11[9];
      if (!v28)
        break;
    }
  }
  while (1)
  {
    v33 = *(_QWORD *)(v32 + 56);
    if (!v33)
      break;
    v32 = *(_QWORD *)(v33 + 8);
    if (v32 == v25 || v32 == 0)
      break;
    v28 = *(_QWORD **)(v32 + 72);
    if (v28)
      goto LABEL_35;
  }
LABEL_50:
  v35 = *(_QWORD **)(*(_QWORD *)(v25 + 128) + 8);
  if (v35)
  {
    while (1)
    {
LABEL_51:
      v11 = v35;
      v36 = v35 + 6;
      WebCore::FrameTree::uniqueName((uint64_t)(v35 + 6), v24, (WTF::AtomString *)&v83);
      v37 = v83;
      v38 = *a2;
      v83 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v24);
        else
          *(_DWORD *)v37 -= 2;
      }
      if (v37 == v38)
        goto LABEL_159;
      v35 = (_QWORD *)v11[11];
      if (!v35)
      {
        v39 = *(_QWORD *)(*v36 + 8);
        if (!v39)
          goto LABEL_63;
        v35 = (_QWORD *)v11[9];
        if (!v35)
          break;
      }
    }
    while (1)
    {
      v40 = *(_QWORD *)(v39 + 56);
      if (!v40)
        break;
      v39 = *(_QWORD *)(v40 + 8);
      if (!v39)
        break;
      v35 = *(_QWORD **)(v39 + 72);
      if (v35)
        goto LABEL_51;
    }
  }
LABEL_63:
  v41 = *(_QWORD *)(v25 + 24);
  if (!v41 || (v42 = *(WebCore::Page **)(v41 + 8)) == 0)
  {
    v11 = 0;
    goto LABEL_162;
  }
  ++*(_DWORD *)v42;
  v43 = *((_QWORD *)v42 + 66);
  if (!v43 || (v44 = *(_QWORD *)(v43 + 8)) == 0)
  {
    WebCore::Page::initGroup(v42);
    v44 = *(_QWORD *)(*((_QWORD *)v42 + 66) + 8);
  }
  v45 = *(_QWORD *)(v44 + 16);
  v80 = v25;
  v81 = a3;
  if (!v45)
  {
    v46 = 0;
    v47 = 0;
    goto LABEL_69;
  }
  v47 = *(unsigned int *)(v45 - 4);
  v46 = v45 + 8 * v47;
  if (!*(_DWORD *)(v45 - 12))
  {
LABEL_69:
    v48 = v46;
    v46 = v45 + 8 * v47;
    goto LABEL_70;
  }
  if ((_DWORD)v47)
  {
    v76 = 8 * v47;
    v48 = *(_QWORD *)(v44 + 16);
    while ((unint64_t)(*(_QWORD *)v48 + 1) <= 1)
    {
      v48 += 8;
      v76 -= 8;
      if (!v76)
      {
        v48 = v46;
        break;
      }
    }
LABEL_70:
    if (!v45)
    {
      v49 = 0;
      goto LABEL_72;
    }
    v79 = *(unsigned int *)(v45 - 4);
  }
  else
  {
    v79 = 0;
    v48 = *(_QWORD *)(v44 + 16);
  }
  v49 = v45 + 8 * v79;
LABEL_72:
  if (v49 != v48)
  {
    while (!*(_QWORD *)(*(_QWORD *)v48 + 8))
    {
      v50 = v48 + 8;
      v48 = v46;
      if (v50 != v46)
      {
        v48 = v50;
        while ((unint64_t)(*(_QWORD *)v48 + 1) <= 1)
        {
          v48 += 8;
          if (v48 == v46)
          {
            v48 = v46;
            break;
          }
        }
      }
      if (v48 == v49)
      {
        v48 = v49;
        break;
      }
    }
  }
  if (v45)
    v51 = v45 + 8 * *(unsigned int *)(v45 - 4);
  else
    v51 = 0;
  if (v48 == v51)
    goto LABEL_156;
  v82 = v42;
  while (2)
  {
    v52 = *(_QWORD *)(*(_QWORD *)v48 + 8);
    if (v42 == (WebCore::Page *)v52)
      goto LABEL_87;
    if (*(_BYTE *)(v52 + 1021))
      goto LABEL_87;
    v55 = *(_QWORD **)(v52 + 160);
    if (!v55)
      goto LABEL_87;
LABEL_103:
    while (2)
    {
      while (2)
      {
        v11 = v55;
        v56 = v55 + 6;
        WebCore::FrameTree::uniqueName((uint64_t)(v55 + 6), v24, (WTF::AtomString *)&v83);
        v57 = v83;
        if (v83 != *a2)
        {
          v83 = 0;
          if (v57)
          {
            if (*(_DWORD *)v57 == 2)
              WTF::StringImpl::destroy(v57, v24);
            else
              *(_DWORD *)v57 -= 2;
          }
          goto LABEL_145;
        }
        v58 = *((_QWORD *)v81 + 3);
        if (v58)
          v59 = *(_QWORD *)(v58 + 8);
        else
          v59 = 0;
        v60 = v11[3];
        if (v60)
          v61 = *(_QWORD *)(v60 + 8);
        else
          v61 = 0;
        if (v59 == v61)
          goto LABEL_127;
        v62 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v81 + 16) + 8) + 160);
        if (v62)
          v62 = *(_QWORD *)(v62 + 8);
        v63 = *(_QWORD *)(*(_QWORD *)(v11[16] + 8) + 160);
        if (v63)
          v63 = *(_QWORD *)(v63 + 8);
        if (!v62)
          goto LABEL_124;
        v64 = *(_QWORD *)(v62 + 24);
        if (v64)
          v64 = *(_QWORD *)(v64 + 8);
        if (v60)
          v60 = *(_QWORD *)(v60 + 8);
        if (v64 == v60)
        {
LABEL_127:
          v67 = 1;
        }
        else
        {
LABEL_124:
          if (v63)
          {
            v65 = *(_QWORD *)(v63 + 24);
            if (v65)
              v66 = *(_QWORD *)(v65 + 8);
            else
              v66 = 0;
            if (v58)
              v58 = *(_QWORD *)(v58 + 8);
            v67 = v66 == v58;
            if (v62 && v66 != v58)
            {
              v68 = *(_QWORD *)(v62 + 24);
              if (v68)
                v68 = *(_QWORD *)(v68 + 8);
              if (v65)
                v69 = *(_QWORD *)(v65 + 8);
              else
                v69 = 0;
              v67 = v68 == v69;
            }
          }
          else
          {
            v67 = 0;
          }
        }
        v83 = 0;
        if (v57)
        {
          if (*(_DWORD *)v57 != 2)
          {
            *(_DWORD *)v57 -= 2;
            goto LABEL_144;
          }
          WTF::StringImpl::destroy(v57, v24);
          if (v67)
          {
LABEL_176:
            v42 = v82;
            goto LABEL_157;
          }
        }
        else
        {
LABEL_144:
          if (v67)
            goto LABEL_176;
        }
LABEL_145:
        v55 = (_QWORD *)v11[11];
        v42 = v82;
        if (v55)
          continue;
        break;
      }
      v70 = *(_QWORD *)(*v56 + 8);
      if (!v70)
        goto LABEL_87;
      v55 = (_QWORD *)v11[9];
      if (v55)
        continue;
      break;
    }
    while (1)
    {
      v71 = *(_QWORD *)(v70 + 56);
      if (!v71)
        break;
      v70 = *(_QWORD *)(v71 + 8);
      if (!v70)
        break;
      v55 = *(_QWORD **)(v70 + 72);
      if (v55)
        goto LABEL_103;
    }
LABEL_87:
    v53 = v46;
    if (v48 + 8 != v46)
    {
      v53 = v48 + 8;
      while ((unint64_t)(*(_QWORD *)v53 + 1) <= 1)
      {
        v53 += 8;
        if (v53 == v46)
        {
          v53 = v46;
          break;
        }
      }
    }
    v48 = v49;
    if (v53 != v49)
    {
      v48 = v53;
      if (!*(_QWORD *)(*(_QWORD *)v53 + 8))
      {
        while (1)
        {
          v54 = v48 + 8;
          v48 = v46;
          if (v54 != v46)
          {
            v48 = v54;
            while ((unint64_t)(*(_QWORD *)v48 + 1) <= 1)
            {
              v48 += 8;
              if (v48 == v46)
              {
                v48 = v46;
                break;
              }
            }
          }
          if (v48 == v49)
            break;
          if (*(_QWORD *)(*(_QWORD *)v48 + 8))
            goto LABEL_155;
        }
        v48 = v49;
      }
    }
LABEL_155:
    ++*(_DWORD *)(v44 + 24);
    if (v48 != v51)
      continue;
    break;
  }
LABEL_156:
  v11 = 0;
LABEL_157:
  v25 = v80;
  if (*(_DWORD *)v42 != 1)
  {
    --*(_DWORD *)v42;
    goto LABEL_159;
  }
  WebCore::Page::~Page((uint64_t)v42);
  WTF::fastFree(v77, v78);
  if (v80)
  {
    do
    {
LABEL_162:
      v72 = __ldaxr(v26);
      v73 = v72 - 1;
    }
    while (__stlxr(v73, v26));
    if (!v73)
    {
      atomic_store(1u, v26);
      v74 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v74 = off_1E31FE290;
      *((_QWORD *)v74 + 1) = v26;
      v83 = v74;
      WTF::ensureOnMainThread();
      v75 = v83;
      v83 = 0;
      if (v75)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v75 + 8))(v75);
    }
  }
  return v11;
}

_QWORD *WebCore::FrameTree::findBySpecifiedName(WebCore::FrameTree *this, const WTF::AtomString *a2, WebCore::Frame *a3)
{
  uint64_t v6;
  unint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned int v22;
  unint64_t v23;
  _QWORD *v24;
  unsigned int *v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WebCore::Page *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  _QWORD *v62;
  uint64_t v63;
  WTF *v64;
  void *v65;
  uint64_t v66;
  _QWORD *v67;

  v6 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v7 = *(unsigned int *)(v6 + 16);
    v8 = *(const char **)(v6 + 8);
    LODWORD(v6) = *(_DWORD *)(v6 + 4);
    v9 = (v7 >> 2) & 1;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  if (WebCore::isSelfTargetFrameName(v8, v6 | (unint64_t)(v9 << 32)))
  {
LABEL_4:
    v10 = *(_QWORD *)this;
    return *(_QWORD **)(v10 + 8);
  }
  v13 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v14 = *(unsigned __int8 **)(v13 + 8);
    v15 = *(_DWORD *)(v13 + 4);
    v16 = *(unsigned int *)(v13 + 16);
    if (v15 == 4)
    {
      if ((v16 & 4) != 0)
      {
        v17 = MEMORY[0x1E0CBF868];
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v14) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v14[1]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v14[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
        {
          v18 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v14[3]);
          goto LABEL_14;
        }
      }
      else
      {
        v17 = MEMORY[0x1E0CBF868];
        if ((*(unsigned __int16 *)v14 | (32 * (*(unsigned __int16 *)v14 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
          && (*((unsigned __int16 *)v14 + 1) | (32 * (*((unsigned __int16 *)v14 + 1) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
          && (*((unsigned __int16 *)v14 + 2) | (32 * (*((unsigned __int16 *)v14 + 2) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
        {
          v18 = *((unsigned __int16 *)v14 + 3) | (32 * (*((unsigned __int16 *)v14 + 3) - 65 < 0x1A));
LABEL_14:
          if (v18 == *(unsigned __int8 *)(v17 + 112))
          {
            v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 8) + 128);
            return *(_QWORD **)(v10 + 8);
          }
        }
      }
    }
    v19 = (v16 >> 2) & 1;
    goto LABEL_23;
  }
  v14 = 0;
  v15 = 0;
  v19 = 1;
LABEL_23:
  if (WebCore::isParentTargetFrameName(v14, v15 | (unint64_t)(v19 << 32)))
  {
    v20 = *((_QWORD *)this + 1);
    if (v20)
    {
      v11 = *(_QWORD **)(v20 + 8);
      if (v11)
        return v11;
    }
    goto LABEL_4;
  }
  if (v13)
  {
    v21 = *(unsigned __int8 **)(v13 + 8);
    v22 = *(_DWORD *)(v13 + 4);
    v23 = ((unint64_t)*(unsigned int *)(v13 + 16) >> 2) & 1;
  }
  else
  {
    v21 = 0;
    v22 = 0;
    v23 = 1;
  }
  if (WebCore::isBlankTargetFrameName(v21, v22 | (v23 << 32)))
    return 0;
  v24 = *(_QWORD **)(*(_QWORD *)this + 8);
  v25 = (unsigned int *)(v24 + 1);
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 + 1, v25));
  if (!v24)
    goto LABEL_49;
  if (v24[8] == *(_QWORD *)a2)
  {
    v11 = v24;
    goto LABEL_148;
  }
  v11 = v24;
  while (1)
  {
    if (v11[11])
    {
      v11 = (_QWORD *)v11[11];
      goto LABEL_47;
    }
    v27 = *(_QWORD **)(v11[6] + 8);
    if (v27 == v24)
      goto LABEL_49;
    v11 = (_QWORD *)v11[9];
    if (!v11)
      break;
LABEL_47:
    if (v11[8] == *(_QWORD *)a2)
      goto LABEL_147;
  }
  while (1)
  {
    v28 = v27[7];
    if (!v28)
      break;
    v27 = *(_QWORD **)(v28 + 8);
    if (v27 == v24 || v27 == 0)
      break;
    v11 = (_QWORD *)v27[9];
    if (v11)
      goto LABEL_47;
  }
LABEL_49:
  v11 = *(_QWORD **)(v24[16] + 8);
  if (!v11)
    goto LABEL_61;
  if (v11[8] == *(_QWORD *)a2)
    goto LABEL_148;
  while (2)
  {
    if (v11[11])
    {
      v11 = (_QWORD *)v11[11];
      goto LABEL_59;
    }
    v30 = *(_QWORD *)(v11[6] + 8);
    if (!v30)
      goto LABEL_61;
    v11 = (_QWORD *)v11[9];
    if (v11)
    {
LABEL_59:
      if (v11[8] == *(_QWORD *)a2)
        goto LABEL_147;
      continue;
    }
    break;
  }
  while (1)
  {
    v31 = *(_QWORD *)(v30 + 56);
    if (!v31)
      break;
    v30 = *(_QWORD *)(v31 + 8);
    if (!v30)
      break;
    v11 = *(_QWORD **)(v30 + 72);
    if (v11)
      goto LABEL_59;
  }
LABEL_61:
  v32 = v24[3];
  if (!v32 || (v33 = *(WebCore::Page **)(v32 + 8)) == 0)
  {
    v11 = 0;
    goto LABEL_148;
  }
  ++*(_DWORD *)v33;
  v34 = WebCore::Page::group(v33);
  v35 = *(_QWORD *)(v34 + 16);
  if (!v35)
  {
    v36 = 0;
    v37 = 0;
    goto LABEL_65;
  }
  v37 = *(unsigned int *)(v35 - 4);
  v36 = v35 + 8 * v37;
  if (!*(_DWORD *)(v35 - 12))
  {
LABEL_65:
    v38 = v36;
    v36 = v35 + 8 * v37;
    goto LABEL_66;
  }
  if ((_DWORD)v37)
  {
    v63 = 8 * v37;
    v38 = *(_QWORD *)(v34 + 16);
    while ((unint64_t)(*(_QWORD *)v38 + 1) <= 1)
    {
      v38 += 8;
      v63 -= 8;
      if (!v63)
      {
        v38 = v36;
        break;
      }
    }
LABEL_66:
    if (!v35)
    {
      v39 = 0;
      goto LABEL_68;
    }
    v66 = *(unsigned int *)(v35 - 4);
  }
  else
  {
    v66 = 0;
    v38 = *(_QWORD *)(v34 + 16);
  }
  v39 = v35 + 8 * v66;
LABEL_68:
  if (v39 != v38)
  {
    while (!*(_QWORD *)(*(_QWORD *)v38 + 8))
    {
      v40 = v38 + 8;
      v38 = v36;
      if (v40 != v36)
      {
        v38 = v40;
        while ((unint64_t)(*(_QWORD *)v38 + 1) <= 1)
        {
          v38 += 8;
          if (v38 == v36)
          {
            v38 = v36;
            break;
          }
        }
      }
      if (v38 == v39)
      {
        v38 = v39;
        break;
      }
    }
  }
  if (v35)
    v35 += 8 * *(unsigned int *)(v35 - 4);
  if (v38 != v35)
  {
    v41 = *(_QWORD *)a2;
    do
    {
      v42 = *(_QWORD *)(*(_QWORD *)v38 + 8);
      if (v33 != (WebCore::Page *)v42 && !*(_BYTE *)(v42 + 1021))
      {
        v46 = *(_QWORD **)(v42 + 160);
        if (v46)
        {
          while (1)
          {
LABEL_101:
            v11 = v46;
            if (v46[8] == v41)
            {
              v49 = *((_QWORD *)a3 + 3);
              if (v49)
                v50 = *(_QWORD *)(v49 + 8);
              else
                v50 = 0;
              v51 = v11[3];
              if (v51)
                v52 = *(_QWORD *)(v51 + 8);
              else
                v52 = 0;
              if (v50 == v52)
                goto LABEL_145;
              v53 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 16) + 8) + 160);
              if (v53)
                v53 = *(_QWORD *)(v53 + 8);
              v54 = *(_QWORD *)(*(_QWORD *)(v11[16] + 8) + 160);
              if (v54)
                v54 = *(_QWORD *)(v54 + 8);
              if (v53)
              {
                v55 = *(_QWORD *)(v53 + 24);
                if (v55)
                  v55 = *(_QWORD *)(v55 + 8);
                if (v51)
                  v51 = *(_QWORD *)(v51 + 8);
                if (v55 == v51)
                  goto LABEL_145;
              }
              if (v54)
              {
                v56 = *(_QWORD *)(v54 + 24);
                if (v56)
                  v57 = *(_QWORD *)(v56 + 8);
                else
                  v57 = 0;
                if (v49)
                  v49 = *(_QWORD *)(v49 + 8);
                if (!v53 || v57 == v49)
                {
                  if (v57 == v49)
                    goto LABEL_145;
                }
                else
                {
                  v58 = *(_QWORD *)(v53 + 24);
                  if (v58)
                    v58 = *(_QWORD *)(v58 + 8);
                  if (v56)
                    v59 = *(_QWORD *)(v56 + 8);
                  else
                    v59 = 0;
                  if (v58 == v59)
                    goto LABEL_145;
                }
              }
            }
            v46 = (_QWORD *)v11[11];
            if (!v46)
            {
              v47 = *(_QWORD *)(v11[6] + 8);
              if (!v47)
                goto LABEL_83;
              v46 = (_QWORD *)v11[9];
              if (!v46)
                break;
            }
          }
          while (1)
          {
            v48 = *(_QWORD *)(v47 + 56);
            if (!v48)
              break;
            v47 = *(_QWORD *)(v48 + 8);
            if (!v47)
              break;
            v46 = *(_QWORD **)(v47 + 72);
            if (v46)
              goto LABEL_101;
          }
        }
      }
LABEL_83:
      v43 = v38 + 8;
      v44 = v36;
      if (v43 != v36)
      {
        v44 = v43;
        while ((unint64_t)(*(_QWORD *)v44 + 1) <= 1)
        {
          v44 += 8;
          if (v44 == v36)
          {
            v44 = v36;
            break;
          }
        }
      }
      v38 = v39;
      if (v44 != v39)
      {
        v38 = v44;
        if (!*(_QWORD *)(*(_QWORD *)v44 + 8))
        {
          while (1)
          {
            v45 = v38 + 8;
            v38 = v36;
            if (v45 != v36)
            {
              v38 = v45;
              while ((unint64_t)(*(_QWORD *)v38 + 1) <= 1)
              {
                v38 += 8;
                if (v38 == v36)
                {
                  v38 = v36;
                  break;
                }
              }
            }
            if (v38 == v39)
              break;
            if (*(_QWORD *)(*(_QWORD *)v38 + 8))
              goto LABEL_90;
          }
          v38 = v39;
        }
      }
LABEL_90:
      ++*(_DWORD *)(v34 + 24);
    }
    while (v38 != v35);
  }
  v11 = 0;
LABEL_145:
  if (*(_DWORD *)v33 == 1)
  {
    WebCore::Page::~Page(v33);
    WTF::fastFree(v64, v65);
  }
  else
  {
    --*(_DWORD *)v33;
  }
LABEL_147:
  if (v24)
  {
    do
    {
LABEL_148:
      v60 = __ldaxr(v25);
      v61 = v60 - 1;
    }
    while (__stlxr(v61, v25));
    if (!v61)
    {
      atomic_store(1u, v25);
      v62 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v62 = off_1E31FE290;
      v62[1] = v25;
      v67 = v62;
      WTF::ensureOnMainThread();
      if (v67)
        (*(void (**)(_QWORD *))(*v67 + 8))(v67);
    }
  }
  return v11;
}

WebCore::Frame *WebCore::FrameTree::nextRenderedSibling(WebCore::FrameTree *this)
{
  WebCore::Frame *result;
  WebCore::Frame *v2;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 8) + 72))
    return 0;
  v2 = *(WebCore::Frame **)(*(_QWORD *)(*(_QWORD *)this + 8) + 72);
  while (*((_BYTE *)v2 + 144) || !WebCore::Frame::ownerRenderer(v2))
  {
    result = 0;
    v2 = (WebCore::Frame *)*((_QWORD *)v2 + 9);
    if (!v2)
      return result;
  }
  return v2;
}

WebCore::Frame *WebCore::FrameTree::traverseNextRendered(WebCore::FrameTree *this, const WebCore::Frame *a2)
{
  WebCore::Frame *result;
  const WebCore::Frame *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  const WebCore::Frame *v10;
  uint64_t v11;
  const WebCore::Frame *v12;
  WebCore::Frame *v13;

  result = WebCore::FrameTree::firstRenderedChild(this, a2);
  if (!result)
  {
    v5 = *(const WebCore::Frame **)(*(_QWORD *)this + 8);
    if (v5 == a2)
      return 0;
    if (!*((_QWORD *)v5 + 9))
    {
LABEL_4:
      if (a2)
      {
        while (1)
        {
          v6 = *((_QWORD *)v5 + 7);
          if (!v6)
            break;
          v7 = *(_QWORD *)(v6 + 8);
          if ((const WebCore::Frame *)v7 == a2 || v7 == 0)
            break;
          v12 = (const WebCore::Frame *)v7;
          result = WebCore::FrameTree::nextRenderedSibling((WebCore::FrameTree *)(v7 + 48));
          v5 = v12;
          if (result)
            return result;
        }
      }
      else
      {
        while (1)
        {
          v11 = *((_QWORD *)v5 + 7);
          if (!v11)
            break;
          v9 = *(_QWORD *)(v11 + 8);
          if (!v9)
            break;
          v10 = *(const WebCore::Frame **)(v11 + 8);
          result = WebCore::FrameTree::nextRenderedSibling((WebCore::FrameTree *)(v9 + 48));
          v5 = v10;
          if (result)
            return result;
        }
      }
      return 0;
    }
    v13 = (WebCore::Frame *)*((_QWORD *)v5 + 9);
    while (*((_BYTE *)v13 + 144) || !WebCore::Frame::ownerRenderer(v13))
    {
      v13 = (WebCore::Frame *)*((_QWORD *)v13 + 9);
      if (!v13)
      {
        v5 = *(const WebCore::Frame **)(*(_QWORD *)this + 8);
        goto LABEL_4;
      }
    }
    return v13;
  }
  return result;
}

uint64_t WebCore::FrameTree::traverseNext(_QWORD *a1, int a2, _BYTE *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = a1[5];
  if (!result)
  {
    v5 = *(_QWORD *)(*a1 + 8);
    if (v5)
    {
      result = a1[3];
      if (result)
        return result;
      v6 = *(_QWORD *)(*a1 + 8);
      while (1)
      {
        v7 = *(_QWORD *)(v6 + 56);
        if (!v7)
          break;
        v6 = *(_QWORD *)(v7 + 8);
        if (!v6)
          break;
        result = *(_QWORD *)(v6 + 72);
        if (result)
          return result;
      }
    }
    if (a2)
    {
      if (a3)
        *a3 = 1;
      return *(_QWORD *)(*(_QWORD *)(v5 + 128) + 8);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::FrameTree::traversePrevious(_QWORD *a1, int a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t j;
  uint64_t v11;

  v4 = a1[4];
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    result = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8);
    for (i = *(_QWORD *)(v5 + 96); i; i = *(_QWORD *)(v8 + 96))
    {
      v8 = *(_QWORD *)(i + 8);
      if (!v8)
        break;
      result = v8;
    }
  }
  else
  {
    v9 = a1[1];
    if (v9)
    {
      result = *(_QWORD *)(v9 + 8);
      if (result)
        return result;
    }
    else
    {
      result = 0;
    }
    if (a2)
    {
      if (a3)
        *a3 = 1;
      result = *(_QWORD *)(*a1 + 8);
      for (j = a1[6]; j; j = *(_QWORD *)(v11 + 96))
      {
        v11 = *(_QWORD *)(j + 8);
        if (!v11)
          break;
        result = v11;
      }
    }
  }
  return result;
}

uint64_t WebCore::FrameTree::top(WebCore::FrameTree *this)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 8) + 128) + 8);
}

uint64_t WebCore::FrameTree::depth(WebCore::FrameTree *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v1)
    return 0;
  v2 = 1;
  while (1)
  {
    v3 = *(_QWORD *)(v1 + 56);
    if (!v3)
      break;
    v1 = *(_QWORD *)(v3 + 8);
    result = v2;
    v2 = (v2 + 1);
    if (!v1)
      return result;
  }
  return v2;
}

uint64_t WebCore::FrameTree::uniqueName@<X0>(uint64_t this@<X0>, WTF::StringImpl *a2@<X1>, WTF::AtomString *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  _DWORD *v6;
  _QWORD *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  BOOL v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  _BYTE *v29;
  WTF::StringImpl *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  char v44;
  _BYTE v45[71];
  uint64_t v46;

  v3 = this;
  v46 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(this + 8);
  if (!v5 || !*(_QWORD *)(v5 + 8))
  {
    v6 = *(_DWORD **)(this + 16);
    if (!v6)
    {
LABEL_4:
      *(_QWORD *)a3 = v6;
      return this;
    }
LABEL_3:
    *v6 += 2;
    goto LABEL_4;
  }
  v7 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 8) + 128) + 8) + 88);
  if (!v7)
  {
LABEL_49:
    v6 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
    if (!*MEMORY[0x1E0CBF2F8])
      goto LABEL_4;
    goto LABEL_3;
  }
  v8 = (unsigned int *)(v7 + 1);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = 0;
  while (1)
  {
    v11 = *(_QWORD *)(*(_QWORD *)v3 + 8);
    v13 = *(_QWORD *)(v11 + 32);
    v12 = *(_QWORD *)(v11 + 40);
    v14 = v7[4] == v13 && v7[5] == v12;
    v15 = v14;
    v16 = v7[8];
    if (!v16)
      break;
    v17 = *(unsigned int *)(v16 + 4);
    *(_DWORD *)v16 += 2;
    if (!(_DWORD)v17)
      break;
    this = WebCore::isBlankTargetFrameName(*(unsigned __int8 **)(v16 + 8), v17 | ((unint64_t)((*(_DWORD *)(v16 + 16) >> 2) & 1) << 32));
    if ((this & 1) != 0)
      break;
    v35 = v7[11];
    if (v35)
    {
      while (*(_QWORD *)(v35 + 64) != v16)
      {
        v35 = *(_QWORD *)(v35 + 72);
        if (!v35)
          goto LABEL_56;
      }
      break;
    }
LABEL_56:
    if (v15)
    {
      *(_QWORD *)a3 = v16;
      goto LABEL_42;
    }
LABEL_58:
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        this = WTF::StringImpl::destroy((WTF::StringImpl *)v16, a2);
      else
        *(_DWORD *)v16 -= 2;
    }
    v36 = v7[11];
    if (v36)
    {
LABEL_67:
      v39 = (unsigned int *)(v36 + 8);
      do
        v20 = __ldaxr(v39);
      while (__stlxr(v20 + 1, v39));
      goto LABEL_69;
    }
    v37 = *(_QWORD *)(v7[6] + 8);
    if (v37)
    {
      v36 = v7[9];
      if (v36)
        goto LABEL_67;
      while (1)
      {
        v38 = *(_QWORD *)(v37 + 56);
        if (!v38)
          break;
        v37 = *(_QWORD *)(v38 + 8);
        if (!v37)
          break;
        v36 = *(_QWORD *)(v37 + 72);
        if (v36)
          goto LABEL_67;
      }
    }
    v36 = 0;
LABEL_69:
    v40 = (unsigned int *)(v7 + 1);
    do
    {
      v18 = __ldaxr(v40);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v40));
    if (!v19)
    {
      atomic_store(1u, v40);
      v42 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v42 = off_1E31FE290;
      *((_QWORD *)v42 + 1) = v40;
      v43 = v42;
      WTF::ensureOnMainThread();
      this = (uint64_t)v43;
      v43 = 0;
      if (this)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    }
    v7 = (_QWORD *)v36;
    if (!v36)
      goto LABEL_49;
  }
  ++v10;
  if (!v15)
    goto LABEL_58;
  v21 = 0;
  v22 = v10;
  do
  {
    ++v21;
    v23 = v22 > 9;
    v22 /= 0xAu;
  }
  while (v23);
  if (v21 < 0 || (v24 = __OFADD__(v21, 3), v25 = v21 + 3, v24) || __OFADD__(v25, 9))
  {
    *(_QWORD *)a3 = 0;
LABEL_78:
    __break(0xC471u);
    return this;
  }
  if ((v25 + 9) > 0x3F)
  {
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((uint64_t)&v43, v25 + 9, v10);
    v41 = v43;
    this = (uint64_t)WTF::AtomString::AtomString(a3, v43);
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
        this = WTF::StringImpl::destroy(v41, v30);
      else
        *(_DWORD *)v41 -= 2;
    }
  }
  else
  {
    v26 = 0;
    v44 = 101;
    v43 = *(WTF::StringImpl **)"<!--frame";
    v27 = v10;
    do
    {
      v45[v26-- + 70] = (v27 % 0xA) | 0x30;
      v23 = v27 > 9;
      v27 /= 0xAu;
    }
    while (v23);
    if (v26 + 14 <= 13)
      memcpy(v45, &v45[v26 + 71], -v26);
    v28 = 0;
    do
    {
      ++v28;
      v23 = v10 > 9;
      v10 /= 0xAu;
    }
    while (v23);
    v29 = &v45[v28];
    v29[2] = 62;
    *(_WORD *)v29 = 11565;
    this = WTF::AtomStringImpl::add();
  }
  if (!*(_QWORD *)a3)
    goto LABEL_78;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      this = WTF::StringImpl::destroy((WTF::StringImpl *)v16, v30);
    else
      *(_DWORD *)v16 -= 2;
  }
LABEL_42:
  v31 = (unsigned int *)(v7 + 1);
  do
  {
    v32 = __ldaxr(v31);
    v33 = v32 - 1;
  }
  while (__stlxr(v33, v31));
  if (!v33)
  {
    atomic_store(1u, v31);
    v34 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v34 = off_1E31FE290;
    *((_QWORD *)v34 + 1) = v31;
    v43 = v34;
    WTF::ensureOnMainThread();
    this = (uint64_t)v43;
    v43 = 0;
    if (this)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

const char *WebCore::selfTargetFrameName(WebCore *this)
{
  return "_self";
}

BOOL WebCore::isParentTargetFrameName(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;

  if ((_DWORD)a2 == 7)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      v2 = MEMORY[0x1E0CBF868];
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *a1) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[1]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112)
        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[3]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[4]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[5]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
      {
        v3 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a1[6]);
        return v3 == *(unsigned __int8 *)(v2 + 116);
      }
    }
    else
    {
      v2 = MEMORY[0x1E0CBF868];
      if ((*(unsigned __int16 *)a1 | (32 * (*(unsigned __int16 *)a1 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
        && (*((unsigned __int16 *)a1 + 1) | (32 * (*((unsigned __int16 *)a1 + 1) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112)
        && (*((unsigned __int16 *)a1 + 2) | (32 * (*((unsigned __int16 *)a1 + 2) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
        && (*((unsigned __int16 *)a1 + 3) | (32 * (*((unsigned __int16 *)a1 + 3) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
        && (*((unsigned __int16 *)a1 + 4) | (32 * (*((unsigned __int16 *)a1 + 4) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
        && (*((unsigned __int16 *)a1 + 5) | (32 * (*((unsigned __int16 *)a1 + 5) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
      {
        v3 = *((unsigned __int16 *)a1 + 6) | (32 * (*((unsigned __int16 *)a1 + 6) - 65 < 0x1A));
        return v3 == *(unsigned __int8 *)(v2 + 116);
      }
    }
  }
  return 0;
}

BOOL WebCore::isSelfTargetFrameName(const char *a1, uint64_t a2)
{
  _BOOL8 v2;

  if (!(_DWORD)a2)
    return 1;
  if (a2 == 5)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)a1) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)a1 + 1)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)a1 + 2)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)a1 + 3)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)a1 + 4)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102))
      {
        return 1;
      }
    }
    else if (WTF::equalIgnoringASCIICaseWithLength<char16_t,unsigned char>((_BOOL8)a1, 5uLL, (uint64_t)"_self", 5uLL, 5uLL))
    {
      return 1;
    }
    return 0;
  }
  v2 = a2 == 8 && a1 == "_current";
  if (a1 != "_current" && a2 == 8)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      if (*a1 != 95 || *(_DWORD *)(a1 + 1) != 1920103779)
        return 0;
      return *((_DWORD *)a1 + 1) == 1953391986;
    }
    else
    {
      if (*(_WORD *)a1 != 95)
        return 0;
      return *(_QWORD *)(a1 + 2) == 0x72007200750063 && *((_QWORD *)a1 + 1) == 0x74006E00650072;
    }
  }
  return v2;
}

uint64_t WebCore::FrameView::headerHeight(WebCore::FrameView *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v1 = (*(uint64_t (**)(WebCore::FrameView *))(*(_QWORD *)this + 720))(this);
  v2 = (unsigned int *)(v1 + 8);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  if (*(_QWORD *)(*(_QWORD *)(v1 + 128) + 8) == v1
    && (v8 = *(_QWORD *)(v1 + 24)) != 0
    && (v9 = *(_QWORD *)(v8 + 8)) != 0)
  {
    v4 = *(unsigned int *)(v9 + 664);
  }
  else
  {
    v4 = 0;
  }
  do
  {
    v5 = __ldaxr(v2);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v2));
  if (!v6)
  {
    atomic_store(1u, v2);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = off_1E31FE290;
    v10[1] = v2;
    v11 = v10;
    WTF::ensureOnMainThread();
    if (v11)
      (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  }
  return v4;
}

uint64_t WebCore::FrameView::footerHeight(WebCore::FrameView *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v1 = (*(uint64_t (**)(WebCore::FrameView *))(*(_QWORD *)this + 720))(this);
  v2 = (unsigned int *)(v1 + 8);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  if (*(_QWORD *)(*(_QWORD *)(v1 + 128) + 8) == v1
    && (v8 = *(_QWORD *)(v1 + 24)) != 0
    && (v9 = *(_QWORD *)(v8 + 8)) != 0)
  {
    v4 = *(unsigned int *)(v9 + 668);
  }
  else
  {
    v4 = 0;
  }
  do
  {
    v5 = __ldaxr(v2);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v2));
  if (!v6)
  {
    atomic_store(1u, v2);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = off_1E31FE290;
    v10[1] = v2;
    v11 = v10;
    WTF::ensureOnMainThread();
    if (v11)
      (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  }
  return v4;
}

uint64_t WebCore::FrameView::isActive(WebCore::FrameView *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)((*(uint64_t (**)(WebCore::FrameView *))(*(_QWORD *)this + 720))(this) + 24);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return *(_WORD *)(*(_QWORD *)(v2 + 72) + 26) & 1;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::FrameView::isActive(WebCore::FrameView *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)((*(uint64_t (**)(char *))(*((_QWORD *)this - 8) + 720))((char *)this - 64) + 24);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return *(_WORD *)(*(_QWORD *)(v2 + 72) + 26) & 1;
  else
    return 0;
}

uint64_t WebCore::FrameView::enclosingScrollableArea(WebCore::FrameView *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  _QWORD *v17;
  _QWORD *v18;

  v1 = (*(uint64_t (**)(WebCore::FrameView *))(*(_QWORD *)this + 720))(this);
  v2 = (unsigned int *)(v1 + 8);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  if (*(_QWORD *)(*(_QWORD *)(v1 + 128) + 8) == v1)
    goto LABEL_28;
  v4 = *(_QWORD *)(v1 + 120);
  if (!v4)
    goto LABEL_28;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_28;
  v6 = *(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v6)
    goto LABEL_28;
  if ((*(_BYTE *)(v6 + 45) & 2) != 0)
  {
    result = 105;
    __break(0xC471u);
    return result;
  }
  if ((*(_BYTE *)(v6 + 45) & 0x10) == 0)
  {
    v12 = *(_QWORD *)(v6 + 32);
    if (!v12)
      goto LABEL_28;
    v6 = *(_QWORD *)(v12 + 8);
    if (!v6)
      goto LABEL_28;
    v7 = 0;
    while ((*(_BYTE *)(v6 + 45) & 0x10) == 0)
    {
      v13 = *(_QWORD *)(v6 + 32);
      if (!v13)
        goto LABEL_28;
      v6 = *(_QWORD *)(v13 + 8);
      if (!v6)
        goto LABEL_29;
    }
  }
  if ((*(_BYTE *)(v6 + 21) & 0x80) == 0)
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(v6 + 32);
      if (!v8)
        goto LABEL_28;
      v6 = *(_QWORD *)(v8 + 8);
      if (!v6)
        goto LABEL_28;
      while ((*(_BYTE *)(v6 + 45) & 0x10) == 0)
      {
        v9 = *(_QWORD *)(v6 + 32);
        if (!v9)
          goto LABEL_28;
        v6 = *(_QWORD *)(v9 + 8);
        if (!v6)
          goto LABEL_29;
      }
    }
    while ((*(_BYTE *)(v6 + 21) & 0x80) == 0);
  }
  v10 = *(_QWORD *)(v6 + 144);
  if (!v10 || (v11 = WebCore::RenderLayer::enclosingScrollableLayer(v10, 0, 0)) == 0)
  {
LABEL_28:
    v7 = 0;
    goto LABEL_29;
  }
  v7 = *(_QWORD *)(v11 + 264);
  do
  {
LABEL_29:
    v14 = __ldaxr(v2);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, v2));
  if (!v15)
  {
    atomic_store(1u, v2);
    v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v17 = off_1E31FE290;
    v17[1] = v2;
    v18 = v17;
    WTF::ensureOnMainThread();
    if (v18)
      (*(void (**)(_QWORD *))(*v18 + 8))(v18);
  }
  return v7;
}

uint64_t `non-virtual thunk to'WebCore::FrameView::enclosingScrollableArea(WebCore::FrameView *this)
{
  return WebCore::FrameView::enclosingScrollableArea((WebCore::FrameView *)((char *)this - 64));
}

uint64_t WebCore::FrameView::forceUpdateScrollbarsOnMainThreadForPerformanceTesting(WebCore::FrameView *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)((*(uint64_t (**)(WebCore::FrameView *))(*(_QWORD *)this + 720))(this) + 24);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return (*(_QWORD *)(*(_QWORD *)(v2 + 112) + 688) >> 62) & 1;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::FrameView::forceUpdateScrollbarsOnMainThreadForPerformanceTesting(WebCore::FrameView *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)((*(uint64_t (**)(char *))(*((_QWORD *)this - 8) + 720))((char *)this - 64) + 24);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return (*(_QWORD *)(*(_QWORD *)(v2 + 112) + 688) >> 62) & 1;
  else
    return 0;
}

unint64_t WebCore::FrameView::scrollableAreaBoundingBox(WebCore::FrameView *this, BOOL *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  WebCore::RenderBox *v8;
  unint64_t v9;
  int v10;
  int v11;
  float v12;
  float v13;
  float v14;
  float v16;
  float v17;
  float v18;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void *v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  const CGRect *v35;
  __int128 v36;
  float v37;
  float v38;
  float v39;
  float v40;
  CGRect v41;

  v4 = *(_QWORD *)((*(uint64_t (**)(WebCore::FrameView *, BOOL *))(*(_QWORD *)this + 720))(this, a2) + 120);
  if (!v4)
    goto LABEL_61;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_61;
  v6 = *(_DWORD *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v6 + 2;
  if ((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195FCE14CLL);
    }
    v7 = (*(unsigned __int8 *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
    if ((*(_BYTE *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
      LOBYTE(v7) = 0;
    if ((v7 & 1) != 0)
      v8 = (WebCore::RenderBox *)(*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL);
    else
      v8 = 0;
    if (v6)
      goto LABEL_11;
  }
  else
  {
    v8 = 0;
    if (v6)
    {
LABEL_11:
      *(_DWORD *)(v5 + 24) = v6;
      goto LABEL_12;
    }
  }
  if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v5, v3);
LABEL_12:
  if (v8)
  {
    ++*((_DWORD *)v8 + 56);
    v9 = WebCore::RenderBox::contentBoxRect(v8);
    *(float *)&v41.origin.x = (float)(int)v9 * 0.015625;
    *((float *)&v41.origin.x + 1) = (float)SHIDWORD(v9) * 0.015625;
    *(float *)&v41.origin.y = *(float *)&v41.origin.x + (float)((float)v10 * 0.015625);
    *((float *)&v41.origin.y + 1) = *((float *)&v41.origin.x + 1);
    *(float *)&v41.size.width = *(float *)&v41.origin.y;
    *((float *)&v41.size.width + 1) = *((float *)&v41.origin.x + 1) + (float)((float)v11 * 0.015625);
    *(float *)&v41.size.height = *(float *)&v41.origin.x;
    *((float *)&v41.size.height + 1) = *((float *)&v41.size.width + 1);
    WebCore::RenderObject::localToContainerQuad((uint64_t)v8, (float *)&v41, 0, 2u, &v36);
    if (v39 >= v37)
      v12 = v37;
    else
      v12 = v39;
    if (*((float *)&v36 + 2) >= *(float *)&v36)
      v13 = *(float *)&v36;
    else
      v13 = *((float *)&v36 + 2);
    if (v12 >= v13)
      v12 = v13;
    v14 = fabsf(v12);
    if (v14 == INFINITY || v14 > 2147500000.0)
      v12 = (float)((SLODWORD(v12) >> 31) ^ 0x7FFFFFFF);
    if (v40 >= v38)
      v16 = v38;
    else
      v16 = v40;
    if (*((float *)&v36 + 3) >= *((float *)&v36 + 1))
      v17 = *((float *)&v36 + 1);
    else
      v17 = *((float *)&v36 + 3);
    if (v16 >= v17)
      v16 = v17;
    v18 = fabsf(v16);
    if (v18 == INFINITY || v18 > 2147500000.0)
      v16 = (float)((SLODWORD(v16) >> 31) ^ 0x7FFFFFFF);
    v20 = floorf(v12);
    v21 = -2147500000.0;
    if (v20 > -2147500000.0)
      v21 = (float)(int)v20;
    if (v20 < 2147500000.0)
      v22 = v21;
    else
      v22 = 2147500000.0;
    v23 = floorf(v16);
    v24 = -2147500000.0;
    if (v23 > -2147500000.0)
      v24 = (float)(int)v23;
    if (v23 < 2147500000.0)
      v25 = v24;
    else
      v25 = 2147500000.0;
    if (v22 >= 2147500000.0)
    {
      v26 = 0x7FFFFFFFLL;
    }
    else if (v22 <= -2147500000.0)
    {
      v26 = 0x80000000;
    }
    else
    {
      v26 = (int)v22;
    }
    if (v25 >= 2147500000.0)
    {
      v27 = 0x7FFFFFFF00000000;
    }
    else if (v25 <= -2147500000.0)
    {
      v27 = 0x8000000000000000;
    }
    else
    {
      v27 = (unint64_t)(int)v25 << 32;
    }
    v28 = v27 | v26;
    if (*((_DWORD *)v8 + 56) == 1)
      (*(void (**)(WebCore::RenderBox *))(*(_QWORD *)v8 + 8))(v8);
    else
      --*((_DWORD *)v8 + 56);
    return v28;
  }
LABEL_61:
  v30 = (void *)*((_QWORD *)this + 5);
  if (!v30)
    return *((_QWORD *)this + 6);
  if (objc_msgSend(*((id *)this + 5), "conformsToProtocol:", &unk_1EE342188))
    v30 = (void *)objc_msgSend(v30, "superview");
  objc_msgSend(v30, "frame");
  v41.origin.x = v31;
  v41.origin.y = v32;
  v41.size.width = v33;
  v41.size.height = v34;
  return WebCore::enclosingIntRect(&v41, v35);
}

unint64_t `non-virtual thunk to'WebCore::FrameView::scrollableAreaBoundingBox(WebCore::FrameView *this, BOOL *a2)
{
  return WebCore::FrameView::scrollableAreaBoundingBox((WebCore::FrameView *)((char *)this - 64), a2);
}

unsigned int *WebCore::FrameView::scrollbarStyleChanged(WebCore::ScrollView *a1, uint64_t a2, int a3)
{
  unsigned int *result;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;

  result = (unsigned int *)(*(uint64_t (**)(WebCore::ScrollView *))(*(_QWORD *)a1 + 720))(a1);
  v7 = result + 2;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  if (*(unsigned int **)(*((_QWORD *)result + 16) + 8) == result)
  {
    v9 = *((_QWORD *)result + 3);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v10 + 48) + 16) + 1328))(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 16), a2);
    }
    result = (unsigned int *)(*(uint64_t (**)(uint64_t, _QWORD))(*((_QWORD *)a1 + 8) + 272))((uint64_t)a1 + 64, 0);
    if (a3)
    {
      v14 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*((_QWORD *)a1 + 8) + 832))((uint64_t)a1 + 64, 0, 1);
      WebCore::ScrollView::updateScrollbars((uint64_t)a1, (const WebCore::IntPoint *)&v14);
      result = (unsigned int *)WebCore::ScrollView::positionScrollbarLayers(a1);
    }
  }
  do
  {
    v11 = __ldaxr(v7);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v7));
  if (!v12)
  {
    atomic_store(1u, v7);
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v13 = off_1E31FE290;
    v13[1] = v7;
    v14 = (uint64_t)v13;
    WTF::ensureOnMainThread();
    result = (unsigned int *)v14;
    v14 = 0;
    if (result)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

unsigned int *`non-virtual thunk to'WebCore::FrameView::scrollbarStyleChanged(uint64_t a1, uint64_t a2, int a3)
{
  return WebCore::FrameView::scrollbarStyleChanged((WebCore::ScrollView *)(a1 - 64), a2, a3);
}

uint64_t WebCore::FrameView::scrollAnimatorEnabled(WebCore::FrameView *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)((*(uint64_t (**)(WebCore::FrameView *))(*(_QWORD *)this + 720))(this) + 24);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return (*(_QWORD *)(*(_QWORD *)(v2 + 112) + 688) >> 54) & 1;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::FrameView::scrollAnimatorEnabled(WebCore::FrameView *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)((*(uint64_t (**)(char *))(*((_QWORD *)this - 8) + 720))((char *)this - 64) + 24);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return (*(_QWORD *)(*(_QWORD *)(v2 + 112) + 688) >> 54) & 1;
  else
    return 0;
}

unint64_t WebCore::FrameView::convertFromContainingViewToRenderer(WebCore::FrameView *this, const WebCore::RenderElement *a2, const WebCore::IntRect *a3)
{
  unint64_t v4;
  float v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  unint64_t v10;
  uint64_t v12;

  v4 = WebCore::ScrollView::viewToContents((uint64_t)this, *(_QWORD *)a3);
  *(float *)&v12 = (float)(int)v4;
  *((float *)&v12 + 1) = (float)SHIDWORD(v4);
  v5 = roundf(WebCore::RenderObject::absoluteToLocal((uint64_t)a2, &v12, 2u));
  v7 = 0x7FFFFFFFLL;
  v8 = 0x80000000;
  if (v5 > -2147500000.0)
    v8 = (int)v5;
  if (v5 < 2147500000.0)
    v7 = v8;
  v9 = roundf(v6);
  if (v9 >= 2147500000.0)
  {
    v10 = 0x7FFFFFFF00000000;
  }
  else if (v9 <= -2147500000.0)
  {
    v10 = 0x8000000000000000;
  }
  else
  {
    v10 = (unint64_t)(int)v9 << 32;
  }
  return v10 | v7;
}

float WebCore::FrameView::convertFromContainingViewToRenderer(WebCore::FrameView *this, const WebCore::RenderElement *a2, const WebCore::FloatRect *a3)
{
  float v4;
  float v5;
  float v6;
  float v8[8];
  _OWORD v9[2];

  v8[0] = WebCore::ScrollView::viewToContents((uint64_t)this, *(float *)a3);
  v8[1] = v4;
  v8[2] = v8[0] + v5;
  v8[3] = v4;
  v8[4] = v8[0] + v5;
  v8[5] = v4 + v6;
  v8[6] = v8[0];
  v8[7] = v4 + v6;
  WebCore::RenderObject::absoluteToLocalQuad((uint64_t)a2, v8, 2u, v9);
  return WebCore::FloatQuad::boundingBox((WebCore::FloatQuad *)v9);
}

unint64_t WebCore::FrameView::convertFromRendererToContainingView(WebCore::FrameView *this, const WebCore::RenderElement *a2, int32x2_t *a3)
{
  float v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  unint64_t v9;
  float32x2_t v11;
  unint64_t v12;

  v11 = vcvt_f32_s32(*a3);
  v4 = roundf(WebCore::RenderObject::localToAbsolute((uint64_t)a2, (uint64_t *)&v11, 2u, 0));
  v6 = 0x7FFFFFFFLL;
  v7 = 0x80000000;
  if (v4 > -2147500000.0)
    v7 = (int)v4;
  if (v4 < 2147500000.0)
    v6 = v7;
  v8 = roundf(v5);
  if (v8 >= 2147500000.0)
  {
    v9 = 0x7FFFFFFF00000000;
  }
  else if (v8 <= -2147500000.0)
  {
    v9 = 0x8000000000000000;
  }
  else
  {
    v9 = (unint64_t)(int)v8 << 32;
  }
  v12 = v9 | v6;
  return WebCore::ScrollView::contentsToView(this, (const WebCore::IntPoint *)&v12);
}

void WebCore::FrameView::convertFromRendererToContainingView(WebCore::FrameView *this, const WebCore::RenderElement *a2, const WebCore::FloatPoint *a3)
{
  void *v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  char v11;
  char v12;
  WTF *v13;
  WTF *v14;
  uint64_t v15;
  char v16;
  __int16 v17;
  int v18;
  int v19;

  v8 = *(_QWORD *)a3;
  v12 = 0;
  v9 = 0u;
  v10 = 0u;
  v11 = 0;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  v16 = 0;
  v17 = 1;
  v18 = 0;
  v19 = 0;
  (*(void (**)(const WebCore::RenderElement *, _QWORD, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)a2 + 576))(a2, 0, &v8, 6, 0);
  WebCore::TransformState::flatten((WebCore::TransformState *)&v8, 0);
  v5 = v8;
  v6 = v14;
  v14 = 0;
  if (v6)
    WTF::fastFree(v6, v4);
  v7 = v13;
  v13 = 0;
  if (v7)
    WTF::fastFree(v7, v4);
  v8 = v5;
  WebCore::ScrollView::contentsToView(this, (const WebCore::FloatPoint *)&v8);
}

unint64_t WebCore::FrameView::convertFromContainingViewToRenderer(WebCore::FrameView *this, const WebCore::RenderElement *a2, const WebCore::IntPoint *a3)
{
  unint64_t v5;
  float v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;

  v5 = *(_QWORD *)a3;
  v14 = *(_QWORD *)a3;
  if (*((_BYTE *)this + 312) != 1)
  {
    v5 = WebCore::ScrollView::viewToContents(this, (const WebCore::IntPoint *)&v14);
    v14 = v5;
  }
  *(float *)&v13 = (float)(int)v5;
  *((float *)&v13 + 1) = (float)SHIDWORD(v5);
  v6 = roundf(WebCore::RenderObject::absoluteToLocal((uint64_t)a2, &v13, 2u));
  v8 = 0x7FFFFFFFLL;
  v9 = 0x80000000;
  if (v6 > -2147500000.0)
    v9 = (int)v6;
  if (v6 < 2147500000.0)
    v8 = v9;
  v10 = roundf(v7);
  if (v10 >= 2147500000.0)
  {
    v11 = 0x7FFFFFFF00000000;
  }
  else if (v10 <= -2147500000.0)
  {
    v11 = 0x8000000000000000;
  }
  else
  {
    v11 = (unint64_t)(int)v10 << 32;
  }
  return v11 | v8;
}

void WebCore::FrameView::convertFromContainingView(WebCore::FrameView *this, const WebCore::FloatRect *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  WebCore::RenderBox *v11;
  float v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  WebCore::Widget *v17;
  float v18;
  __n128 v19;
  int v20;
  float v21[8];
  __int128 v22;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4) & 1) == 0
        && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 80))(v4))
      {
        WebCore::Widget::convertFromContainingView(this, a2, v19);
        return;
      }
      v7 = *(_QWORD *)((*(uint64_t (**)(WebCore::FrameView *))(*(_QWORD *)this + 720))(this) + 120);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 8);
        if (v8)
        {
          v9 = *(_DWORD *)(v8 + 24);
          *(_DWORD *)(v8 + 24) = v9 + 2;
          if ((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) != 0)
          {
            if ((*(_BYTE *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195FCEA8CLL);
            }
            v10 = (*(unsigned __int8 *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
            if ((*(_BYTE *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
              LOBYTE(v10) = 0;
            v11 = (v10 & 1) != 0 ? (WebCore::RenderBox *)(*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) : 0;
          }
          else
          {
            v11 = 0;
          }
          if (v9)
          {
            *(_DWORD *)(v8 + 24) = v9;
          }
          else if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v8, v6);
          }
          if (v11)
          {
            v12 = *(float *)a2;
            v13 = *((float *)a2 + 1);
            v15 = *((float *)a2 + 2);
            v14 = *((float *)a2 + 3);
            if (*(_BYTE *)(v4 + 312) == 1)
            {
LABEL_20:
              v21[0] = v12;
              v21[1] = v13;
              v21[2] = v15 + v12;
              v21[3] = v13;
              v21[4] = v15 + v12;
              v21[5] = v14 + v13;
              v21[6] = v12;
              v21[7] = v14 + v13;
              WebCore::RenderObject::absoluteToLocalQuad((uint64_t)v11, v21, 2u, &v22);
              WebCore::RenderBox::contentBoxLocation(v11);
              return;
            }
            v16 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v4 + 64) + 832))(v4 + 64, 0, 1);
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v4 + 64) + 704))(v4 + 64))
            {
              v17 = *(WebCore::Widget **)(v4 + 160);
              if (!v17)
                goto LABEL_19;
              if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v17 + 272))(*(_QWORD *)(v4 + 160)) & 1) == 0)
              {
                WebCore::Widget::frameRect(v17);
                LODWORD(v17) = v20;
                goto LABEL_19;
              }
            }
            LODWORD(v17) = 0;
LABEL_19:
            v18 = (float)(*(int (**)(uint64_t))(*(_QWORD *)(v4 + 64) + 528))(v4 + 64);
            v12 = v12 + (float)(v16 - v17);
            v13 = v13
                + (float)(HIDWORD(v16)
                        - (int)(float)((*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 408))(v4, 1) + v18));
            goto LABEL_20;
          }
        }
      }
    }
  }
}

unint64_t WebCore::FrameView::convertToContainingView(WebCore::FrameView *this, const WebCore::IntPoint *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  WebCore::RenderBox *v11;
  int v12;
  int v13;
  const WebCore::IntPoint *v14;
  uint64_t v15;
  int v16;
  int v17;
  void *v18;
  float v19;
  float v20;
  WTF *v21;
  WTF *v22;
  float v23;
  unsigned int v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::Widget *v28;
  float v29;
  int v31;
  float v32;
  float v33;
  __int128 v34;
  __int128 v35;
  char v36;
  char v37;
  WTF *v38;
  WTF *v39;
  uint64_t v40;
  char v41;
  __int16 v42;
  int v43;
  int v44;

  v3 = *((_QWORD *)this + 4);
  if (!v3)
    return *(_QWORD *)a2;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return *(_QWORD *)a2;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 80))(v4))
  {
    v7 = *(_QWORD *)((*(uint64_t (**)(WebCore::FrameView *))(*(_QWORD *)this + 720))(this) + 120);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = *(_DWORD *)(v8 + 24);
        *(_DWORD *)(v8 + 24) = v9 + 2;
        if ((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if ((*(_BYTE *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195FCEDA0);
          }
          v10 = (*(unsigned __int8 *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
          if ((*(_BYTE *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
            LOBYTE(v10) = 0;
          v11 = (v10 & 1) != 0 ? (WebCore::RenderBox *)(*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) : 0;
        }
        else
        {
          v11 = 0;
        }
        if (v9)
        {
          *(_DWORD *)(v8 + 24) = v9;
        }
        else if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v8, v6);
        }
        if (v11)
        {
          v14 = a2;
          v12 = *(_DWORD *)a2;
          v13 = *((_DWORD *)v14 + 1);
          v15 = WebCore::RenderBox::contentBoxLocation(v11);
          v32 = (float)(v12 + (int)v15 / 64 + ((int)(v15 - (v16 & 0xFFFFFFC0) + 32) >> 6));
          v33 = (float)(v13 + SHIDWORD(v15) / 64 + ((int)(HIDWORD(v15) - (v17 & 0xFFFFFFC0) + 32) >> 6));
          v37 = 0;
          v34 = 0u;
          v35 = 0u;
          v36 = 0;
          v39 = 0;
          v40 = 0;
          v38 = 0;
          v41 = 0;
          v42 = 1;
          v43 = 0;
          v44 = 0;
          (*(void (**)(WebCore::RenderBox *, _QWORD, float *, uint64_t, _QWORD))(*(_QWORD *)v11 + 576))(v11, 0, &v32, 6, 0);
          WebCore::TransformState::flatten((WebCore::TransformState *)&v32, 0);
          v20 = v32;
          v19 = v33;
          v21 = v39;
          v39 = 0;
          if (v21)
            WTF::fastFree(v21, v18);
          v22 = v38;
          v38 = 0;
          if (v22)
            WTF::fastFree(v22, v18);
          v23 = roundf(v20);
          if (v23 >= 2147500000.0)
          {
            v24 = 0x7FFFFFFF;
          }
          else if (v23 > -2147500000.0)
          {
            v24 = (int)v23;
          }
          else
          {
            v24 = 0x80000000;
          }
          v25 = roundf(v19);
          if (v25 >= 2147500000.0)
          {
            v26 = 0x7FFFFFFFLL;
          }
          else if (v25 <= -2147500000.0)
          {
            v26 = 0x80000000;
          }
          else
          {
            v26 = (int)v25;
          }
          if (*(_BYTE *)(v4 + 312) == 1)
            return v24 | (unint64_t)(v26 << 32);
          v27 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v4 + 64) + 832))(v4 + 64, 0, 1);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v4 + 64) + 704))(v4 + 64))
          {
            v28 = *(WebCore::Widget **)(v4 + 160);
            if (!v28)
              goto LABEL_30;
            if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v28 + 272))(*(_QWORD *)(v4 + 160)) & 1) == 0)
            {
              WebCore::Widget::frameRect(v28);
              LODWORD(v28) = v31;
              goto LABEL_30;
            }
          }
          LODWORD(v28) = 0;
LABEL_30:
          v29 = (float)(*(int (**)(uint64_t))(*(_QWORD *)(v4 + 64) + 528))(v4 + 64);
          return (v24 + (_DWORD)v28 - (_DWORD)v27) | ((unint64_t)(v26
                                                                                     - HIDWORD(v27)
                                                                                     + (int)(float)((*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 408))(v4, 1)
                                                                                                  + v29)) << 32);
        }
      }
    }
    return *(_QWORD *)a2;
  }
  return WebCore::Widget::convertToContainingView(this, a2);
}

void WebCore::FrameView::convertToContainingView(WebCore::FrameView *this, const WebCore::FloatPoint *a2)
{
  uint64_t v3;
  WebCore::ScrollView *v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  WebCore::RenderBox *v11;
  float v12;
  float v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  WTF *v18;
  uint64_t v19;
  WebCore::ScrollView *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  char v24;
  char v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  char v29;
  __int16 v30;
  int v31;
  int v32;

  v3 = *((_QWORD *)this + 4);
  if (!v3)
    return;
  v4 = *(WebCore::ScrollView **)(v3 + 8);
  if (!v4)
    return;
  if (((*(uint64_t (**)(WebCore::ScrollView *))(*(_QWORD *)v4 + 72))(v4) & 1) == 0
    && !(*(unsigned int (**)(WebCore::ScrollView *))(*(_QWORD *)v4 + 80))(v4))
  {
    v19 = *((_QWORD *)this + 4);
    if (v19)
    {
      v20 = *(WebCore::ScrollView **)(v19 + 8);
      if (v20)
        WebCore::ScrollView::convertChildToSelf(v20, (uint64_t)this, *(float *)a2);
    }
    return;
  }
  v7 = *(_QWORD *)((*(uint64_t (**)(WebCore::FrameView *))(*(_QWORD *)this + 720))(this) + 120);
  if (!v7)
    return;
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    return;
  v9 = *(_DWORD *)(v8 + 24);
  *(_DWORD *)(v8 + 24) = v9 + 2;
  if ((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195FCEFD4);
    }
    v10 = (*(unsigned __int8 *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
    if ((*(_BYTE *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
      LOBYTE(v10) = 0;
    if ((v10 & 1) != 0)
      v11 = (WebCore::RenderBox *)(*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL);
    else
      v11 = 0;
    if (v9)
      goto LABEL_14;
LABEL_22:
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v6);
    goto LABEL_15;
  }
  v11 = 0;
  if (!v9)
    goto LABEL_22;
LABEL_14:
  *(_DWORD *)(v8 + 24) = v9;
LABEL_15:
  if (v11)
  {
    v12 = *(float *)a2;
    v13 = *((float *)a2 + 1);
    v14 = WebCore::RenderBox::contentBoxLocation(v11);
    *(float *)&v21 = (float)((float)(int)v14 * 0.015625) + v12;
    *((float *)&v21 + 1) = (float)((float)SHIDWORD(v14) * 0.015625) + v13;
    v25 = 0;
    v22 = 0u;
    v23 = 0u;
    v24 = 0;
    v27 = 0;
    v28 = 0;
    v26 = 0;
    v29 = 0;
    v30 = 1;
    v31 = 0;
    v32 = 0;
    (*(void (**)(WebCore::RenderBox *, _QWORD, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v11 + 576))(v11, 0, &v21, 6, 0);
    WebCore::TransformState::flatten((WebCore::TransformState *)&v21, 0);
    v16 = v21;
    v17 = v27;
    v27 = 0;
    if (v17)
      WTF::fastFree(v17, v15);
    v18 = v26;
    v26 = 0;
    if (v18)
      WTF::fastFree(v18, v15);
    v21 = v16;
    WebCore::ScrollView::contentsToView(v4, (const WebCore::FloatPoint *)&v21);
  }
}

unint64_t WebCore::FrameView::convertFromContainingView(WebCore::FrameView *this, const WebCore::IntPoint *a2)
{
  uint64_t v3;
  WebCore::FrameView *v4;
  WebCore::Frame *v6;
  const WebCore::RenderElement *v7;
  WebCore::RenderBox *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;

  v3 = *((_QWORD *)this + 4);
  if (!v3)
    goto LABEL_15;
  v4 = *(WebCore::FrameView **)(v3 + 8);
  if (!v4)
    goto LABEL_15;
  if (((*(uint64_t (**)(WebCore::FrameView *))(*(_QWORD *)v4 + 72))(v4) & 1) == 0
    && !(*(unsigned int (**)(WebCore::FrameView *))(*(_QWORD *)v4 + 80))(v4))
  {
    v15 = WebCore::Widget::convertFromContainingView(this, a2);
    goto LABEL_16;
  }
  v6 = (WebCore::Frame *)(*(uint64_t (**)(WebCore::FrameView *))(*(_QWORD *)this + 720))(this);
  v7 = (const WebCore::RenderElement *)WebCore::Frame::ownerRenderer(v6);
  if (!v7)
  {
LABEL_15:
    v15 = *(_QWORD *)a2;
LABEL_16:
    v16 = HIDWORD(v15);
    return v15 | ((unint64_t)v16 << 32);
  }
  v8 = v7;
  v9 = WebCore::FrameView::convertFromContainingViewToRenderer(v4, v7, a2);
  v10 = WebCore::RenderBox::contentBoxLocation(v8);
  if ((int)v10 <= 0)
    v11 = -(-(int)v10 & 0x3F);
  else
    v11 = v10 & 0x3F;
  v12 = -((int)v10 / 64 + ((v11 + 32) >> 6));
  v13 = HIDWORD(v10) + 63;
  if (v10 >= 0)
    v13 = HIDWORD(v10);
  if (SHIDWORD(v10) <= 0)
    v14 = -(-HIDWORD(v10) & 0x3F);
  else
    v14 = BYTE4(v10) & 0x3F;
  LODWORD(v15) = v9 + v12;
  LODWORD(v16) = HIDWORD(v9) - (v13 >> 6) - ((v14 + 32) >> 6);
  return v15 | ((unint64_t)v16 << 32);
}

uint64_t WebCore::History::length@<X0>(WebCore::History *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  _QWORD *v19;
  WTF *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *((_QWORD *)this + 2);
  if (!v3)
    goto LABEL_21;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    goto LABEL_21;
  v5 = *(_QWORD *)(v4 + 72);
  if (!v5)
    goto LABEL_21;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    goto LABEL_21;
  if (*(_BYTE *)(v6 + 178))
  {
    result = 105;
    __break(0xC471u);
    return result;
  }
  v7 = *(_QWORD *)(v6 + 240);
  if (v7 && (v8 = *(_QWORD *)(v7 + 8)) != 0)
  {
    v9 = (unsigned int *)(v8 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    result = WebCore::Document::isFullyActive(*(WebCore::Document **)(v8 + 296));
    if ((_DWORD)result)
    {
      v12 = *(_QWORD *)(v8 + 24);
      if (v12 && (v13 = *(_QWORD *)(v12 + 8)) != 0)
      {
        ++*(_DWORD *)v13;
        v14 = *(_DWORD **)(*(_QWORD *)(v13 + 136) + 16);
        ++v14[2];
        v15 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v14 + 40))(v14);
        result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v14 + 48))(v14);
        v16 = result;
        if (v14[2] == 1)
          result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
        else
          --v14[2];
        *(_DWORD *)a2 = v15 + v16 + 1;
        *(_DWORD *)(a2 + 16) = 0;
        if (*(_DWORD *)v13 == 1)
        {
          WebCore::Page::~Page(v13);
          result = WTF::fastFree(v20, v21);
        }
        else
        {
          --*(_DWORD *)v13;
        }
      }
      else
      {
        *(_DWORD *)a2 = 0;
        *(_DWORD *)(a2 + 16) = 0;
      }
    }
    else
    {
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a2 = 14;
      *(_QWORD *)(a2 + 8) = v22;
      *(_DWORD *)(a2 + 16) = 1;
    }
    do
    {
      v17 = __ldaxr(v9);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v9));
    if (!v18)
    {
      atomic_store(1u, v9);
      v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v19 = off_1E31FE290;
      v19[1] = v9;
      v23 = (uint64_t)v19;
      WTF::ensureOnMainThread();
      result = v23;
      if (v23)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    }
  }
  else
  {
LABEL_21:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a2 = 14;
    *(_QWORD *)(a2 + 8) = v22;
    *(_DWORD *)(a2 + 16) = 1;
  }
  return result;
}

uint64_t WebCore::History::scrollRestoration@<X0>(WebCore::History *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *((_QWORD *)this + 2);
  if (!v3)
    goto LABEL_13;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    goto LABEL_13;
  v5 = *(_QWORD *)(v4 + 72);
  if (!v5)
    goto LABEL_13;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    goto LABEL_13;
  if (*(_BYTE *)(v6 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195FCF498);
  }
  v7 = *(_QWORD *)(v6 + 240);
  if (v7 && (v8 = *(_QWORD *)(v7 + 8)) != 0)
  {
    v9 = (unsigned int *)(v8 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    result = WebCore::Document::isFullyActive(*(WebCore::Document **)(v8 + 296));
    if ((_DWORD)result)
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v8 + 184) + 16);
      v13 = 0;
      if (v12)
        *(_DWORD *)a2 = *(unsigned __int8 *)(v12 + 148) == 0;
      else
        *(_DWORD *)a2 = 0;
    }
    else
    {
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a2 = 14;
      *(_QWORD *)(a2 + 8) = v17;
      v13 = 1;
    }
    *(_DWORD *)(a2 + 16) = v13;
    do
    {
      v14 = __ldaxr(v9);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v9));
    if (!v15)
    {
      atomic_store(1u, v9);
      v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v16 = off_1E31FE290;
      v16[1] = v9;
      v18 = (uint64_t)v16;
      WTF::ensureOnMainThread();
      result = v18;
      if (v18)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    }
  }
  else
  {
LABEL_13:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a2 = 14;
    *(_QWORD *)(a2 + 8) = v17;
    *(_DWORD *)(a2 + 16) = 1;
  }
  return result;
}

unsigned int *WebCore::History::setScrollRestoration@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  WebCore::HistoryItem *v9;
  WTF::StringImpl *v10;
  unsigned int *result;
  uint64_t v12;

  v5 = WebCore::LocalDOMWindowProperty::frame((WebCore::LocalDOMWindowProperty *)(a1 + 16));
  if (v5)
  {
    v6 = v5;
    v7 = (unsigned int *)(v5 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    if (WebCore::Document::isFullyActive(*(WebCore::Document **)(v5 + 296)))
    {
      v9 = *(WebCore::HistoryItem **)(*(_QWORD *)(v6 + 184) + 16);
      if (v9)
      {
        ++*(_DWORD *)v9;
        WebCore::HistoryItem::setShouldRestoreScrollPosition(v9, a2 == 0);
        WTF::RefCounted<WebCore::HistoryItem>::deref(v9, v10);
      }
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a3 = 14;
      a3[1] = v12;
      *((_BYTE *)a3 + 16) = 1;
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v7);
  }
  else
  {
    result = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 14;
    a3[1] = v12;
    *((_BYTE *)a3 + 16) = 1;
  }
  return result;
}

unsigned int *WebCore::History::state@<X0>(WebCore::History *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v10;
  unsigned int v11;
  void *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int *result;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  WTF *v22;
  void *v23;
  uint64_t v24;
  unsigned int *v25;

  v3 = *((_QWORD *)this + 2);
  if (!v3)
    goto LABEL_31;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    goto LABEL_31;
  v5 = *(_QWORD *)(v4 + 72);
  if (!v5)
    goto LABEL_31;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    goto LABEL_31;
  if (*(_BYTE *)(v6 + 178))
    goto LABEL_34;
  v7 = *(_QWORD *)(v6 + 240);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 8)) == 0)
  {
LABEL_31:
    result = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a2 = 14;
    *(_QWORD *)(a2 + 8) = v24;
    *(_DWORD *)(a2 + 16) = 1;
    return result;
  }
  v10 = (unsigned int *)(v8 + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  if (WebCore::Document::isFullyActive(*(WebCore::Document **)(v8 + 296)))
  {
    v13 = *((_QWORD *)this + 2);
    if (!v13
      || (v13 = *(_QWORD *)(v13 + 8)) == 0
      || (v13 = *(_QWORD *)(v13 + 72)) == 0
      || (v13 = *(_QWORD *)(v13 + 8)) == 0)
    {
LABEL_21:
      result = (unsigned int *)*((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v13;
      if (result)
      {
        do
        {
          v16 = __ldaxr(result);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, result));
        if (!v17)
        {
          atomic_store(1u, result);
          WebCore::SerializedScriptValue::~SerializedScriptValue((WebCore::SerializedScriptValue *)result, v12);
          result = (unsigned int *)WTF::fastFree(v22, v23);
        }
      }
      v18 = 0;
      *(_QWORD *)a2 = *((_QWORD *)this + 3);
      goto LABEL_26;
    }
    if (!*(_BYTE *)(v13 + 178))
    {
      v13 = *(_QWORD *)(v13 + 240);
      if (v13)
      {
        v13 = *(_QWORD *)(v13 + 8);
        if (v13)
        {
          v13 = *(_QWORD *)(*(_QWORD *)(v13 + 184) + 16);
          if (v13)
          {
            v13 = *(_QWORD *)(v13 + 168);
            if (v13)
            {
              do
                v14 = __ldaxr((unsigned int *)v13);
              while (__stlxr(v14 + 1, (unsigned int *)v13));
            }
          }
        }
      }
      goto LABEL_21;
    }
LABEL_34:
    __break(0xC471u);
    JUMPOUT(0x195FCF7C0);
  }
  result = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)a2 = 14;
  *(_QWORD *)(a2 + 8) = v24;
  v18 = 1;
LABEL_26:
  *(_DWORD *)(a2 + 16) = v18;
  do
  {
    v19 = __ldaxr(v10);
    v20 = v19 - 1;
  }
  while (__stlxr(v20, v10));
  if (!v20)
  {
    atomic_store(1u, v10);
    v21 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v21 = off_1E31FE290;
    *((_QWORD *)v21 + 1) = v10;
    v25 = v21;
    WTF::ensureOnMainThread();
    result = v25;
    if (v25)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v25 + 8))(v25);
  }
  return result;
}

uint64_t WebCore::History::go@<X0>(WebCore::History *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v11;
  unsigned int v12;
  uint64_t result;
  char v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *((_QWORD *)this + 2);
  if (!v4)
    goto LABEL_12;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_12;
  v6 = *(_QWORD *)(v5 + 72);
  if (!v6)
    goto LABEL_12;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    goto LABEL_12;
  if (*(_BYTE *)(v7 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195FCF92CLL);
  }
  v8 = *(_QWORD *)(v7 + 240);
  if (v8 && (v9 = *(_QWORD *)(v8 + 8)) != 0)
  {
    v11 = (unsigned int *)(v9 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    if (WebCore::Document::isFullyActive(*(WebCore::Document **)(v9 + 296)))
    {
      result = (uint64_t)WebCore::NavigationScheduler::scheduleHistoryNavigation(*(_QWORD **)(v9 + 152), a2);
      v14 = 0;
      v15 = 0;
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
    }
    else
    {
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      a3[1] = v19;
      v15 = 1;
      v14 = 14;
    }
    *(_BYTE *)a3 = v14;
    *((_BYTE *)a3 + 16) = v15;
    do
    {
      v16 = __ldaxr(v11);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v11));
    if (!v17)
    {
      atomic_store(1u, v11);
      v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v18 = off_1E31FE290;
      v18[1] = v11;
      v20 = (uint64_t)v18;
      WTF::ensureOnMainThread();
      result = v20;
      if (v20)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    }
  }
  else
  {
LABEL_12:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 14;
    a3[1] = v19;
    *((_BYTE *)a3 + 16) = 1;
  }
  return result;
}

WTF::StringImpl *WebCore::History::go@<X0>(WebCore::History *this@<X0>, WebCore::Document *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  BOOL canNavigate;
  WTF::StringImpl *result;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unsigned int v20;
  unsigned int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23[5];

  v5 = *((_QWORD *)this + 2);
  if (!v5)
    goto LABEL_17;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    goto LABEL_17;
  v7 = *(_QWORD *)(v6 + 72);
  if (!v7)
    goto LABEL_17;
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    goto LABEL_17;
  if (*(_BYTE *)(v8 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195FCFAF8);
  }
  v9 = *(_QWORD *)(v8 + 240);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 8)) == 0)
  {
LABEL_17:
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v18 = v23[0];
    *(_BYTE *)a4 = 14;
    *(_QWORD *)(a4 + 8) = v18;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  v13 = (unsigned int *)(v10 + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  if (!WebCore::Document::isFullyActive(*(WebCore::Document **)(v10 + 296)))
  {
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v19 = v23[0];
    *(_BYTE *)a4 = 14;
    *(_QWORD *)(a4 + 8) = v19;
    *(_BYTE *)(a4 + 16) = 1;
    goto LABEL_19;
  }
  v23[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v23);
  canNavigate = WebCore::Document::canNavigate(a2, (WebCore::Frame *)v10, (const WTF::URL *)v23);
  result = v23[0];
  v23[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
      if (!canNavigate)
        goto LABEL_16;
      goto LABEL_15;
    }
    *(_DWORD *)result -= 2;
  }
  if (canNavigate)
LABEL_15:
    result = (WTF::StringImpl *)WebCore::NavigationScheduler::scheduleHistoryNavigation(*(_QWORD **)(v10 + 152), a3);
LABEL_16:
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  do
  {
LABEL_19:
    v20 = __ldaxr(v13);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, v13));
  if (!v21)
  {
    atomic_store(1u, v13);
    v22 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v22 = off_1E31FE290;
    *((_QWORD *)v22 + 1) = v13;
    v23[0] = v22;
    WTF::ensureOnMainThread();
    result = v23[0];
    v23[0] = 0;
    if (result)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

WTF::StringImpl *WebCore::History::stateObjectAdded@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  WTF::StringImpl *result;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  const WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  const WTF::StringImpl *v26;
  int v27;
  WTF::StringImpl *v28;
  int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t canRequest;
  const WTF::StringImpl *v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  BOOL v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  WTF::StringImpl *v65;
  int v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  void *v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  int8x16_t *v83;
  uint64_t v84;
  uint64_t v85;
  WebCore::EventHandler *v86;
  const WTF::StringImpl *v87;
  char v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  unsigned __int8 *v91;
  uint64_t v92;
  uint64_t v93;
  unsigned __int8 *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned __int8 *v99;
  unsigned __int8 *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  void *v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  uint64_t v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  _QWORD *v122;
  _QWORD *v123;
  unsigned int **v124;
  uint64_t v125;
  uint64_t v126;
  WTF::StringImpl *v127;
  uint64_t v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  int *v132[3];
  WTF::StringImpl *v133;
  __int128 v134;
  __int128 v135;
  int v136;

  v136 = a4;
  a1[4] = 0;
  v9 = a1[5];
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 3;
    a1[5] = 0;
  }
  v10 = a1[2];
  if (!v10)
    goto LABEL_84;
  v11 = *(_QWORD *)(v10 + 8);
  if (!v11)
    goto LABEL_84;
  v12 = *(_QWORD *)(v11 + 72);
  if (!v12)
    goto LABEL_84;
  v13 = *(_QWORD *)(v12 + 8);
  if (!v13)
    goto LABEL_84;
  if (*(_BYTE *)(v13 + 178))
  {
    __break(0xC471u);
LABEL_191:
    JUMPOUT(0x195FD0504);
  }
  v14 = *(_QWORD *)(v13 + 240);
  if (!v14 || (v15 = *(_QWORD *)(v14 + 8)) == 0)
  {
LABEL_84:
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v68 = v133;
    *(_BYTE *)a5 = 14;
    *(_QWORD *)(a5 + 8) = v68;
    *(_BYTE *)(a5 + 16) = 1;
    return result;
  }
  v16 = (unsigned int *)(v15 + 8);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  result = (WTF::StringImpl *)WebCore::Document::isFullyActive(*(WebCore::Document **)(v15 + 296));
  if ((_DWORD)result)
  {
    v20 = *(_QWORD *)(v15 + 24);
    if (v20 && *(_QWORD *)(v20 + 8))
    {
      v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[2] + 8) + 72) + 8);
      if (*(_BYTE *)(v21 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x195FD0524);
      }
      v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 240) + 8) + 296);
      if (*a3)
      {
        if (v22)
        {
          *(_DWORD *)(v22 + 24) += 2;
          WebCore::Document::completeURL((WebCore::Document *)v22, a3, v22 + 848, 0, (WTF::URL *)&v133);
          if (*(_DWORD *)(v22 + 24) == 2)
          {
            if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v22, v19);
          }
          else
          {
            *(_DWORD *)(v22 + 24) -= 2;
          }
        }
        else
        {
          WebCore::Document::completeURL(0, a3, 848, 0, (WTF::URL *)&v133);
        }
      }
      else
      {
        v73 = *(WTF::StringImpl **)(v22 + 736);
        if (v73)
          *(_DWORD *)v73 += 2;
        v133 = v73;
        v74 = *(_OWORD *)(v22 + 760);
        v134 = *(_OWORD *)(v22 + 744);
        v135 = v74;
      }
      if ((v134 & 1) == 0)
      {
        *(_BYTE *)a5 = 14;
        *(_QWORD *)(a5 + 8) = 0;
LABEL_120:
        *(_BYTE *)(a5 + 16) = 1;
LABEL_156:
        result = v133;
        v133 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v19);
          else
            *(_DWORD *)result -= 2;
        }
        goto LABEL_159;
      }
      v122 = a3;
      v23 = (int *)(*(_QWORD *)(v15 + 296) + 736);
      v132[0] = &v136;
      v132[1] = v23;
      v132[2] = (int *)&v133;
      if (!WTF::protocolHostAndPortAreEqual())
        goto LABEL_118;
      WTF::URL::user((WTF::URL *)&v133);
      WTF::URL::user((WTF::URL *)v23);
      if (WTF::equal(v127, v131, v24))
      {
        WTF::URL::password((WTF::URL *)&v133);
        WTF::URL::password((WTF::URL *)v23);
        v27 = WTF::equal(v130, v129, v26);
        v28 = v129;
        v129 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v25);
          else
            *(_DWORD *)v28 -= 2;
        }
        v29 = v27 ^ 1;
        v30 = v130;
        v130 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, v25);
          else
            *(_DWORD *)v30 -= 2;
        }
      }
      else
      {
        v29 = 1;
      }
      v31 = v131;
      v131 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v25);
        else
          *(_DWORD *)v31 -= 2;
      }
      v32 = v127;
      v127 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v25);
        else
          *(_DWORD *)v32 -= 2;
      }
      if (v29)
      {
LABEL_118:
        v83 = (int8x16_t *)"Protocols, domains, ports, usernames, and passwords must match.";
        v84 = 64;
LABEL_119:
        WebCore::History::stateObjectAdded(WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&,WTF::String const&,WebCore::History::StateObjectType)::$_0::operator()((uint64_t)&v127, v132, v83, v84);
        v85 = v128;
        *(_BYTE *)a5 = (_BYTE)v127;
        *(_QWORD *)(a5 + 8) = v85;
        goto LABEL_120;
      }
      if (WTF::URL::protocolIs() && WTF::linkedOnOrAfterSDKWithBehavior())
      {
        v86 = *(WebCore::EventHandler **)(*(_QWORD *)(v15 + 296) + 688);
        if (!v86)
          v86 = (WebCore::EventHandler *)WebCore::Document::ensureQuirks(*(WebCore::Document **)(v15 + 296));
        if ((WebCore::EventHandler::needsKeyboardEventDisambiguationQuirks(v86) & 1) == 0)
        {
          WTF::URL::fileSystemPath((WTF::URL *)&v133);
          WTF::URL::fileSystemPath((WTF::URL *)v23);
          v88 = WTF::equal(v127, v131, v87);
          v89 = v131;
          v131 = 0;
          if (v89)
          {
            if (*(_DWORD *)v89 == 2)
              WTF::StringImpl::destroy(v89, v33);
            else
              *(_DWORD *)v89 -= 2;
          }
          v90 = v127;
          v127 = 0;
          if (v90)
          {
            if (*(_DWORD *)v90 == 2)
              WTF::StringImpl::destroy(v90, v33);
            else
              *(_DWORD *)v90 -= 2;
          }
          if ((v88 & 1) == 0)
          {
            v83 = (int8x16_t *)"Only differences in query and fragment are allowed for file: URLs.";
            v84 = 67;
            goto LABEL_119;
          }
        }
      }
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(v15 + 296) + 192), v33);
      v35 = v34;
      do
        v36 = __ldaxr((unsigned int *)v34);
      while (__stlxr(v36 + 1, (unsigned int *)v34));
      v124 = (unsigned int **)a2;
      if (!*(_BYTE *)(v34 + 63) && *(_DWORD *)(v34 + 32) != 1
        || (v76 = WTF::URL::viewWithoutQueryOrFragmentIdentifier((WTF::URL *)v23),
            v78 = v77,
            v79 = (unsigned __int8 *)WTF::URL::viewWithoutQueryOrFragmentIdentifier((WTF::URL *)&v133),
            v80 = (unsigned __int8 *)v76,
            a2 = (uint64_t *)v124,
            canRequest = WTF::operator==(v80, v78, v79, v81),
            (canRequest & 1) == 0))
      {
        {
          WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
        }
        canRequest = WebCore::SecurityOrigin::canRequest(v35, (WebCore::ThreadableBlobRegistry *)&v133, (uint64_t (***)(_QWORD, uint64_t))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance);
        if ((canRequest & 1) == 0)
        {
          v91 = (unsigned __int8 *)WTF::URL::path((WTF::URL *)&v133);
          v93 = v92;
          v94 = (unsigned __int8 *)WTF::URL::path((WTF::URL *)v23);
          if (!WTF::operator==(v91, v93, v94, v95)
            || (v96 = WTF::URL::query((WTF::URL *)&v133),
                v98 = v97,
                v99 = (unsigned __int8 *)WTF::URL::query((WTF::URL *)v23),
                v100 = (unsigned __int8 *)v96,
                a2 = (uint64_t *)v124,
                canRequest = WTF::operator==(v100, v98, v99, v101),
                (canRequest & 1) == 0))
          {
            WebCore::History::stateObjectAdded(WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&,WTF::String const&,WebCore::History::StateObjectType)::$_0::operator()((uint64_t)&v127, v132, (int8x16_t *)"Paths and fragments must match for a sandboxed document.", 57);
            v102 = v128;
            *(_BYTE *)a5 = (_BYTE)v127;
            *(_QWORD *)(a5 + 8) = v102;
            *(_BYTE *)(a5 + 16) = 1;
            do
            {
LABEL_154:
              v110 = __ldaxr((unsigned int *)v35);
              v111 = v110 - 1;
            }
            while (__stlxr(v111, (unsigned int *)v35));
            if (!v111)
            {
              atomic_store(1u, (unsigned int *)v35);
              v115 = *(WTF::StringImpl **)(v35 + 48);
              *(_QWORD *)(v35 + 48) = 0;
              if (v115)
              {
                if (*(_DWORD *)v115 == 2)
                  WTF::StringImpl::destroy(v115, (WTF::StringImpl *)v19);
                else
                  *(_DWORD *)v115 -= 2;
              }
              v116 = *(WTF::StringImpl **)(v35 + 40);
              *(_QWORD *)(v35 + 40) = 0;
              if (v116)
              {
                if (*(_DWORD *)v116 == 2)
                  WTF::StringImpl::destroy(v116, (WTF::StringImpl *)v19);
                else
                  *(_DWORD *)v116 -= 2;
              }
              v117 = *(unsigned int *)(v35 + 32);
              if ((_DWORD)v117 != -1)
                ((void (*)(WTF::StringImpl **, uint64_t))off_1E33FEB30[v117])(&v127, v35 + 8);
              *(_DWORD *)(v35 + 32) = -1;
              WTF::fastFree((WTF *)v35, v19);
            }
            goto LABEL_156;
          }
        }
      }
      v39 = v133;
      if (v133)
      {
        v40 = *((_DWORD *)v133 + 1);
        if (v40 < 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195FD07CCLL);
        }
        v39 = 2 * v40;
      }
      v41 = *a2;
      v123 = (_QWORD *)a5;
      if (*a2)
        v41 = *(unsigned int *)(v41 + 20);
      v42 = v41 + v39;
      v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 24) + 8) + 160);
      if (v43)
        v44 = *(_BYTE *)(v43 + 144) == 0;
      else
        v44 = 0;
      if (!v44)
      {
LABEL_78:
        a1[10] = v42;
        if (*v122 && *(_DWORD *)(*v122 + 4))
        {
          v75 = *(_QWORD *)(v15 + 296);
          if (v75)
          {
            *(_DWORD *)(v75 + 24) += 2;
            WebCore::Document::updateURLForPushOrReplaceState((WebCore::Document *)v75, &v133, v38);
            if (*(_DWORD *)(v75 + 24) == 2)
            {
              if ((*(_WORD *)(v75 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v75, v19);
            }
            else
            {
              *(_DWORD *)(v75 + 24) -= 2;
            }
          }
          else
          {
            WebCore::Document::updateURLForPushOrReplaceState(0, &v133, v38);
          }
        }
        if (v136)
        {
          if (v136 != 1)
            goto LABEL_83;
          v65 = *(WTF::StringImpl **)(v15 + 184);
          ++*(_DWORD *)v65;
          WebCore::HistoryController::replaceState((uint64_t)v65, a2, (WTF::String *)&v133);
          v66 = *(_DWORD *)v65;
          if (!*(_DWORD *)v65)
          {
            __break(0xC471u);
            JUMPOUT(0x195FD0750);
          }
          v67 = 32;
        }
        else
        {
          v65 = *(WTF::StringImpl **)(v15 + 184);
          ++*(_DWORD *)v65;
          WebCore::HistoryController::pushState(v65, a2, (_DWORD **)&v133);
          v66 = *(_DWORD *)v65;
          if (!*(_DWORD *)v65)
          {
            __break(0xC471u);
            JUMPOUT(0x195FD0730);
          }
          v67 = 31;
        }
        *(_DWORD *)v65 = v66 - 1;
        (*(void (**)(void))(**(_QWORD **)(*(_QWORD *)(v15 + 280) + 16) + 8 * v67))();
LABEL_83:
        *v123 = 0;
        v123[1] = 0;
        v123[2] = 0;
        goto LABEL_154;
      }
      v45 = (unsigned int *)(v43 + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 + 1, v45));
      v47 = *(_QWORD *)(v43 + 296);
      if (!v47 || (v48 = *(_QWORD *)(v47 + 696)) == 0)
      {
        *(_QWORD *)a5 = 0;
        *(_QWORD *)(a5 + 8) = 0;
        *(_QWORD *)(a5 + 16) = 0;
        goto LABEL_152;
      }
      ++*(_DWORD *)(v48 + 24);
      v49 = *(_QWORD *)(v48 + 120);
      if (!v49)
      {
        v49 = bmalloc::api::isoAllocate();
        *(_QWORD *)v49 = 0;
        *(_DWORD *)(v49 + 8) = 1;
        canRequest = WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v48);
        if (canRequest)
        {
          do
            v70 = __ldaxr((unsigned int *)canRequest);
          while (__stlxr(v70 + 1, (unsigned int *)canRequest));
        }
        *(_QWORD *)(v49 + 16) = canRequest;
        *(_QWORD *)(v49 + 24) = 0;
        *(_QWORD *)(v49 + 32) = 0;
        *(_QWORD *)(v49 + 40) = 0;
        __dmb(0xAu);
        v71 = *(_QWORD *)(v49 + 40);
        *(_QWORD *)(v49 + 40) = 0;
        if (v71)
          *(_QWORD *)(v71 + 8) = 3;
        *(_DWORD *)(v49 + 48) = 0;
        *(_BYTE *)(v49 + 76) = 0;
        *(_QWORD *)(v49 + 80) = 0;
        *(_QWORD *)(v49 + 56) = 0;
        *(_QWORD *)(v49 + 64) = 0;
        *(_BYTE *)(v49 + 72) = 0;
        v72 = *(_QWORD *)(v48 + 120);
        *(_QWORD *)(v48 + 120) = v49;
        if (v72)
        {
          canRequest = WTF::RefCounted<WebCore::History>::deref(v72 + 8, v69);
          v49 = *(_QWORD *)(v48 + 120);
        }
      }
      v50 = v49 + 8;
      ++*(_DWORD *)(v49 + 8);
      WTF::WallTime::now((WTF::WallTime *)canRequest);
      if (v52 - *(double *)(v49 + 56) > 10.0)
      {
        *(double *)(v49 + 56) = v52;
        *(_DWORD *)(v49 + 48) = 0;
      }
      else if (*(_DWORD *)(v49 + 48) >= 0x64u)
      {
        if (v136 == 1)
        {
          WTF::makeString<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,double,WTF::ASCIILiteral>(&v126, "Attempt to use history.replaceState() more than ", 49);
          v62 = 0;
          v103 = v126;
          *(_BYTE *)a5 = 14;
          *(_QWORD *)(a5 + 8) = v103;
          *(_BYTE *)(a5 + 16) = 1;
          v126 = 0;
        }
        else
        {
          WTF::makeString<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,double,WTF::ASCIILiteral>(&v125, "Attempt to use history.pushState() more than ", 46);
          v62 = 0;
          v106 = v125;
          *(_BYTE *)a5 = 14;
          *(_QWORD *)(a5 + 8) = v106;
          *(_BYTE *)(a5 + 16) = 1;
          v125 = 0;
        }
        goto LABEL_73;
      }
      v53 = v42;
      v54 = *(_QWORD *)(v15 + 296);
      if (!v54)
      {
LABEL_65:
        v57 = *(_QWORD *)(v49 + 64);
        v42 = v53;
        if (v136 == 1)
        {
          v58 = a1[10];
          v59 = v57 >= v58;
          v57 -= v58;
          if (!v59)
          {
            __break(0xC471u);
            goto LABEL_191;
          }
        }
        v59 = __CFADD__(v57, v53);
        v60 = v57 + v53;
        if (v59)
        {
          __break(0xC471u);
          JUMPOUT(0x195FD07D4);
        }
        v61 = 0x4000000;
        if (*(_BYTE *)(v49 + 76))
          v61 = *(unsigned int *)(v49 + 72);
        if (v60 > v61)
        {
          if (v136 == 1)
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v62 = 0;
            *(_BYTE *)v123 = 18;
          }
          else
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v62 = 0;
            v107 = v127;
            *(_BYTE *)v123 = 18;
            v123[1] = v107;
          }
          *((_BYTE *)v123 + 16) = 1;
        }
        else
        {
          *(_QWORD *)(v49 + 64) = v60;
          ++*(_DWORD *)(v49 + 48);
          v62 = 1;
        }
        goto LABEL_73;
      }
      v55 = *(_DWORD *)(v54 + 24) + 2;
      *(_DWORD *)(v54 + 24) = v55;
      if ((*(_QWORD *)(*(_QWORD *)(v54 + 680) + 688) & 0x4000) == 0)
      {
LABEL_63:
        v56 = v55 - 2;
        if (v56)
        {
          *(_DWORD *)(v54 + 24) = v56;
        }
        else if ((*(_WORD *)(v54 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v54, v51);
        }
        goto LABEL_65;
      }
      v104 = (WTF::StringImpl *)WebCore::LocalDOMWindow::navigation(*(WebCore::LocalDOMWindow **)(v54 + 696));
      ++*((_DWORD *)v104 + 6);
      v127 = v104;
      if ((WebCore::Navigation::dispatchPushReplaceReloadNavigateEvent((uint64_t)v104, (uint64_t)&v133, v136 != 0, 1, 0, *v124) & 1) != 0)
      {
        WTF::Ref<WebCore::Navigation,WTF::RawPtrTraits<WebCore::Navigation>,WTF::DefaultRefDerefTraits<WebCore::Navigation>>::~Ref(&v127, v105);
        v55 = *(_DWORD *)(v54 + 24);
        goto LABEL_63;
      }
      *v123 = 0;
      v123[1] = 0;
      v123[2] = 0;
      WTF::Ref<WebCore::Navigation,WTF::RawPtrTraits<WebCore::Navigation>,WTF::DefaultRefDerefTraits<WebCore::Navigation>>::~Ref(&v127, v105);
      if (*(_DWORD *)(v54 + 24) == 2)
      {
        if ((*(_WORD *)(v54 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v54, v51);
        v62 = 0;
      }
      else
      {
        v62 = 0;
        *(_DWORD *)(v54 + 24) -= 2;
      }
      v42 = v53;
LABEL_73:
      WTF::RefCounted<WebCore::History>::deref(v50, v51);
      if (*(_DWORD *)(v48 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v48 + 72))(v48);
      else
        --*(_DWORD *)(v48 + 24);
      if (v62)
      {
        do
        {
          v63 = __ldaxr(v45);
          v64 = v63 - 1;
        }
        while (__stlxr(v64, v45));
        a2 = (uint64_t *)v124;
        if (!v64)
        {
          atomic_store(1u, v45);
          v120 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v120 = off_1E31FE290;
          *((_QWORD *)v120 + 1) = v45;
          v127 = v120;
          WTF::ensureOnMainThread();
          v121 = v127;
          v127 = 0;
          if (v121)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v121 + 8))(v121);
        }
        goto LABEL_78;
      }
      do
      {
LABEL_152:
        v108 = __ldaxr(v45);
        v109 = v108 - 1;
      }
      while (__stlxr(v109, v45));
      if (!v109)
      {
        atomic_store(1u, v45);
        v118 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v118 = off_1E31FE290;
        *((_QWORD *)v118 + 1) = v45;
        v127 = v118;
        WTF::ensureOnMainThread();
        v119 = v127;
        v127 = 0;
        if (v119)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v119 + 8))(v119);
      }
      goto LABEL_154;
    }
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
  }
  else
  {
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v82 = v133;
    *(_BYTE *)a5 = 14;
    *(_QWORD *)(a5 + 8) = v82;
    *(_BYTE *)(a5 + 16) = 1;
  }
  do
  {
LABEL_159:
    v112 = __ldaxr(v16);
    v113 = v112 - 1;
  }
  while (__stlxr(v113, v16));
  if (!v113)
  {
    atomic_store(1u, v16);
    v114 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v114 = off_1E31FE290;
    *((_QWORD *)v114 + 1) = v16;
    v133 = v114;
    WTF::ensureOnMainThread();
    result = v133;
    v133 = 0;
    if (result)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebCore::History::stateObjectAdded(WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&,WTF::String const&,WebCore::History::StateObjectType)::$_0::operator()(uint64_t a1, int **a2, int8x16_t *a3, uint64_t a4)
{
  int v8;
  const char *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  __int128 v27;
  int8x16_t v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  char *v32;
  char *v33;
  __int16 v34;
  char *v35;
  int8x16_t *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  int v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  char *v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  char *v48;
  char *v49;
  char *v50;
  __int16 v51;
  uint64_t result;
  size_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  int8x16x2_t v57;
  int8x16x2_t v58;
  int8x16x2_t v59;
  int8x16x2_t v60;
  int8x16x2_t v61;
  int8x16x2_t v62;

  v8 = **a2;
  if (v8 == 1)
    v9 = "history.replaceState()";
  else
    v9 = "history.pushState()";
  if (v8 == 1)
    v10 = 23;
  else
    v10 = 20;
  WTF::URL::stringCenterEllipsizedToLength((WTF::URL *)a2[1]);
  WTF::URL::stringCenterEllipsizedToLength((WTF::URL *)a2[2]);
  v53 = v10 - 1;
  if (v53 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x195FD0C70);
  }
  if (a4)
  {
    if ((unint64_t)--a4 >> 31)
    {
LABEL_77:
      __break(0xC471u);
      JUMPOUT(0x195FD0C44);
    }
  }
  if (v55)
  {
    v12 = *((_DWORD *)v55 + 1);
    if (v54)
    {
LABEL_11:
      v13 = *((_DWORD *)v54 + 1);
      goto LABEL_12;
    }
  }
  else
  {
    v12 = 0;
    if (v54)
      goto LABEL_11;
  }
  v13 = 0;
LABEL_12:
  v14 = a4 + 2;
  if (__OFADD__((_DWORD)a4, 2))
    goto LABEL_77;
  if (v13 < 0)
    goto LABEL_77;
  v15 = __OFADD__(v13, v14);
  v16 = v13 + v14;
  if (v15)
    goto LABEL_77;
  v15 = __OFADD__(v16, 4);
  v17 = v16 + 4;
  v18 = v15;
  if (v12 < 0)
    goto LABEL_77;
  if (v18)
    goto LABEL_77;
  v15 = __OFADD__(v12, v17);
  v19 = v12 + v17;
  if (v15)
    goto LABEL_77;
  v15 = __OFADD__(v19, 36);
  v20 = v19 + 36;
  if (v15)
    goto LABEL_77;
  v15 = __OFADD__((_DWORD)v53, v20);
  v21 = v53 + v20;
  if (v15)
    goto LABEL_77;
  v22 = (v21 + 23);
  if (__OFADD__(v21, 23))
    goto LABEL_77;
  if (v55 && (*((_BYTE *)v55 + 16) & 4) == 0 || v54 && (*((_BYTE *)v54 + 16) & 4) == 0)
  {
    if (v21 != -23)
    {
      if (v22 > 0x7FFFFFEF)
        goto LABEL_77;
      WTF::tryFastCompactMalloc((WTF *)(2 * v22 + 20));
      v23 = v56;
      if (!v56)
        goto LABEL_77;
      *(_DWORD *)v56 = 2;
      *(_DWORD *)(v56 + 4) = v22;
      *(_OWORD *)(v56 + 20) = xmmword_1968DFE10;
      *(_QWORD *)(v56 + 8) = v56 + 20;
      *(_DWORD *)(v56 + 16) = 0;
      v24 = (char *)(v56 + 66);
      *(_OWORD *)(v56 + 36) = xmmword_1969F5730;
      *(_QWORD *)(v56 + 52) = 0x750020006F0074;
      *(_DWORD *)(v56 + 60) = 6619251;
      *(_WORD *)(v56 + 64) = 32;
      v25 = v56 + 66 + 2 * v53;
      if ((v53 & 0x7FFFFFC0) != 0)
      {
        v26 = &v24[2 * (v53 & 0x7FFFFFC0)];
        v27 = 0uLL;
        do
        {
          v57.val[0] = *(int8x16_t *)v9;
          v28 = *((int8x16_t *)v9 + 1);
          v59.val[0] = (int8x16_t)*((_OWORD *)v9 + 2);
          v29 = *((_OWORD *)v9 + 3);
          v9 += 64;
          v30 = v29;
          v59.val[1] = 0uLL;
          v61.val[0] = v28;
          v57.val[1] = 0uLL;
          v31 = v24;
          vst2q_s8(v31, v57);
          v31 += 32;
          v61.val[1] = 0uLL;
          vst2q_s8(v31, v61);
          v32 = v24 + 64;
          vst2q_s8(v32, v59);
          v33 = v24 + 96;
          vst2q_s8(v33, *(int8x16x2_t *)(&v27 - 1));
          v24 += 128;
        }
        while (v24 != v26);
        v24 = v26;
      }
      while (v24 != (char *)v25)
      {
        v34 = *(unsigned __int8 *)v9++;
        *(_WORD *)v24 = v34;
        v24 += 2;
      }
      *(_OWORD *)v25 = xmmword_1969F5740;
      *(_OWORD *)(v25 + 16) = xmmword_1969F5750;
      *(_OWORD *)(v25 + 32) = xmmword_1969F5760;
      *(_OWORD *)(v25 + 48) = xmmword_1969F5770;
      *(_QWORD *)(v25 + 64) = 0x20006D006F0072;
      v35 = (char *)(v25 + 72);
      if (v55)
      {
        v36 = (int8x16_t *)*((_QWORD *)v55 + 1);
        v37 = *((unsigned int *)v55 + 1);
        if ((*((_BYTE *)v55 + 16) & 4) != 0)
        {
          v38 = &v35[2 * v37];
          if (v37 >= 0x40)
          {
            v39 = &v35[2 * (v37 & 0xFFFFFFC0)];
            v43 = 0uLL;
            v44 = v35;
            do
            {
              v58.val[0] = *v36;
              v45 = v36[1];
              v60.val[0] = v36[2];
              v46 = v36[3];
              v36 += 4;
              v47 = v46;
              v60.val[1] = 0uLL;
              v62.val[0] = v45;
              v58.val[1] = 0uLL;
              v48 = v44;
              vst2q_s8(v48, v58);
              v48 += 32;
              v62.val[1] = 0uLL;
              vst2q_s8(v48, v62);
              v49 = v44 + 64;
              vst2q_s8(v49, v60);
              v50 = v44 + 96;
              vst2q_s8(v50, *(int8x16x2_t *)(&v43 - 1));
              v44 += 128;
            }
            while (v44 != v39);
          }
          else
          {
            v39 = v35;
          }
          while (v39 != v38)
          {
            v51 = v36->u8[0];
            v36 = (int8x16_t *)((char *)v36 + 1);
            *(_WORD *)v39 = v51;
            v39 += 2;
          }
        }
        else if ((_DWORD)v37 == 1)
        {
          *(_WORD *)v35 = v36->i16[0];
        }
        else if ((_DWORD)v37)
        {
          memcpy(v35, v36, 2 * v37);
        }
        v42 = *((unsigned int *)v55 + 1);
      }
      else
      {
        v42 = 0;
      }
      WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v35[2 * v42], (int8x16_t *)" to ", 4, (uint64_t)v54, (int8x16_t *)". ", 2, a3, a4);
      goto LABEL_63;
    }
LABEL_72:
    v23 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_63;
  }
  if (v21 == -23)
    goto LABEL_72;
  if ((v22 & 0x80000000) != 0)
    goto LABEL_77;
  WTF::tryFastCompactMalloc((WTF *)(v22 + 20));
  v23 = v56;
  if (!v56)
    goto LABEL_77;
  *(_DWORD *)v56 = 2;
  *(_DWORD *)(v56 + 4) = v22;
  *(_QWORD *)(v56 + 8) = v56 + 20;
  *(_DWORD *)(v56 + 16) = 4;
  qmemcpy((void *)(v56 + 20), "Blocked attempt to use ", 23);
  v41 = (char *)(v56 + 43);
  if ((_DWORD)v53)
  {
    if ((_DWORD)v53 == 1)
      *v41 = *v9;
    else
      memcpy((void *)(v56 + 43), v9, v53);
  }
  qmemcpy(&v41[v53], " to change session history URL from ", 36);
  WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v41[v53 + 36], (uint64_t)v55, " to ", 4u, (uint64_t)v54, ". ", 2u, v40, a3, a4);
LABEL_63:
  *(_BYTE *)a1 = 14;
  *(_QWORD *)(a1 + 8) = v23;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
      WTF::StringImpl::destroy(v54, v11);
    else
      *(_DWORD *)v54 -= 2;
  }
  result = (uint64_t)v55;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
      return WTF::StringImpl::destroy(v55, v11);
    else
      *(_DWORD *)v55 -= 2;
  }
  return result;
}

uint64_t WTF::makeString<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,double,WTF::ASCIILiteral>(_QWORD *a1, _BYTE *a2, uint64_t a3)
{
  size_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  _OWORD v14[7];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD __src[7];
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v5 = a3 - 1;
    if ((unint64_t)(a3 - 1) >> 31)
    {
      __break(0xC471u);
LABEL_22:
      JUMPOUT(0x195FD0E68);
    }
  }
  else
  {
    v5 = 0;
  }
  WTF::numberToString();
  v6 = strlen((const char *)v14);
  HIDWORD(v15) = v6;
  if (v6 < 0)
    goto LABEL_19;
  if (__OFADD__(v6, 8))
    goto LABEL_19;
  if (__OFADD__(v6 + 8, 11))
    goto LABEL_19;
  v7 = v6 + 22;
  if (__OFADD__(v6 + 19, 3))
    goto LABEL_19;
  v8 = (v5 + v7);
  if (__OFADD__((_DWORD)v5, v7))
    goto LABEL_19;
  v20 = v14[4];
  v21 = v14[5];
  v22 = v14[6];
  v23 = v15;
  v16 = v14[0];
  v17 = v14[1];
  v18 = v14[2];
  v19 = v14[3];
  if ((v8 & 0x80000000) != 0
    || (result = WTF::tryFastCompactMalloc((WTF *)(v8 + 20)), (v10 = *(_QWORD *)&__src[0]) == 0))
  {
LABEL_19:
    *a1 = 0;
    __break(0xC471u);
    goto LABEL_22;
  }
  v11 = (_BYTE *)(*(_QWORD *)&__src[0] + 20);
  **(_DWORD **)&__src[0] = 2;
  *(_DWORD *)(v10 + 4) = v8;
  *(_QWORD *)(v10 + 8) = v10 + 20;
  *(_DWORD *)(v10 + 16) = 4;
  if ((_DWORD)v5)
  {
    if ((_DWORD)v5 == 1)
      *v11 = *a2;
    else
      result = (uint64_t)memcpy((void *)(v10 + 20), a2, v5);
  }
  qmemcpy(&v11[v5], "100 times per ", 14);
  v12 = &v11[v5 + 14];
  __src[4] = v20;
  __src[5] = v21;
  __src[6] = v22;
  v25 = v23;
  __src[0] = v16;
  __src[1] = v17;
  __src[2] = v18;
  __src[3] = v19;
  v13 = HIDWORD(v23);
  if (HIDWORD(v23))
  {
    if (HIDWORD(v23) == 1)
      *v12 = __src[0];
    else
      result = (uint64_t)memcpy(v12, __src, HIDWORD(v25));
  }
  *(_QWORD *)&v12[v13] = 0x73646E6F63657320;
  *a1 = v10;
  return result;
}

uint64_t WebCore::ImageAnalysisQueue::resumeProcessing(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD **v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  _OWORD *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v51;
  int i;
  unsigned int v53;
  _OWORD *v54;
  uint64_t v55;
  _DWORD *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  __int128 v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  WTF *v64;
  _DWORD *v65;
  WTF::StringImpl *v66;
  __int128 v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  unsigned int v74;
  WTF::StringImpl *v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  unsigned int v80;
  _QWORD *v81;
  _QWORD *v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  WTF *v85;
  uint64_t v86;
  WTF *v87;
  uint64_t v88;
  WTF *v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  WTF *v93;
  _QWORD *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  BOOL v97;

  v1 = *(_QWORD *)(this + 16);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 8))
    {
      v2 = this;
      v3 = *(unsigned int *)(this + 108);
      if ((_DWORD)v3)
      {
        v4 = (uint64_t *)(this + 80);
        do
        {
          if (*(_DWORD *)(v2 + 112) > 4u)
            return this;
          this = std::swap[abi:sn180100]<WebCore::ImageAnalysisQueue::Task>(*(uint64_t **)(v2 + 96), (uint64_t *)(*(_QWORD *)(v2 + 96) + 16 * v3 - 16));
          v6 = *(unsigned int *)(v2 + 108);
          if (!(_DWORD)v6)
          {
LABEL_151:
            __break(0xC471u);
            JUMPOUT(0x195FD16D4);
          }
          v7 = v6 - 1;
          v8 = *(_QWORD *)(v2 + 96);
          v9 = 16 * v7;
          v10 = *(_QWORD *)(v8 + 16 * v7);
          *(_QWORD *)(v8 + v9) = 0;
          v11 = *(_QWORD *)(v2 + 96);
          v12 = *(_QWORD *)(v11 + 16 * v7);
          *(_QWORD *)(v11 + v9) = 0;
          if (v12)
          {
            do
            {
              v13 = __ldaxr((unsigned int *)v12);
              v14 = v13 - 1;
            }
            while (__stlxr(v14, (unsigned int *)v12));
            if (!v14)
            {
              atomic_store(1u, (unsigned int *)v12);
              v84 = *(unsigned int *)(v12 + 28);
              if ((_DWORD)v84)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (WTF::StringImpl *)(*(_QWORD *)(v12 + 16) + 32 * v84));
              v85 = *(WTF **)(v12 + 16);
              if (v85)
              {
                *(_QWORD *)(v12 + 16) = 0;
                *(_DWORD *)(v12 + 24) = 0;
                WTF::fastFree(v85, (void *)v5);
              }
              this = WTF::fastFree((WTF *)v12, (void *)v5);
            }
          }
          *(_DWORD *)(v2 + 108) = v7;
          if (v7 >= 2)
          {
            v15 = 0;
            v16 = 0;
            v17 = 1;
            do
            {
              v18 = v15 + 2;
              if (v18 >= v7)
              {
                v22 = v17;
                goto LABEL_18;
              }
              v19 = *(_QWORD *)(v2 + 96);
              v20 = v19 + 16 * v17;
              v21 = v19 + 16 * v18;
              if ((*(_BYTE *)(v20 + 8) != 0) != (*(_BYTE *)(v21 + 8) != 0))
              {
                v22 = v17;
                if (!*(_BYTE *)(v20 + 8))
                  goto LABEL_17;
              }
              else
              {
                v22 = v17;
                if (*(_DWORD *)(v20 + 12) >= *(_DWORD *)(v21 + 12))
LABEL_17:
                  v22 = v18;
              }
LABEL_18:
              if (v16 >= v7)
                goto LABEL_151;
              if (v22 >= v7)
              {
                __break(0xC471u);
                JUMPOUT(0x195FD16DCLL);
              }
              v23 = *(_QWORD *)(v2 + 96);
              this = v23 + 16 * v16;
              v5 = v23 + 16 * v22;
              if ((*(_BYTE *)(this + 8) != 0) != (*(_BYTE *)(v5 + 8) != 0))
              {
                if (*(_BYTE *)(this + 8))
                  break;
              }
              else if (*(_DWORD *)(v23 + 16 * v16 + 12) < *(_DWORD *)(v5 + 12))
              {
                break;
              }
              this = std::swap[abi:sn180100]<WebCore::ImageAnalysisQueue::Task>((uint64_t *)this, (uint64_t *)v5);
              v15 = 2 * v22;
              v17 = (2 * v22) | 1;
              v7 = *(unsigned int *)(v2 + 108);
              v16 = v22;
            }
            while (v17 < v7);
          }
          if (v10)
          {
            v24 = *(_QWORD *)(v10 + 8);
            if (v24)
            {
              *(_DWORD *)(v24 + 24) += 2;
              do
              {
                v25 = __ldaxr((unsigned int *)v10);
                v26 = v25 - 1;
              }
              while (__stlxr(v26, (unsigned int *)v10));
              if (v26)
                goto LABEL_32;
            }
            else
            {
              do
              {
                v90 = __ldaxr((unsigned int *)v10);
                v91 = v90 - 1;
              }
              while (__stlxr(v91, (unsigned int *)v10));
              if (v91)
                goto LABEL_115;
            }
            atomic_store(1u, (unsigned int *)v10);
            v92 = *(unsigned int *)(v10 + 28);
            if ((_DWORD)v92)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v10 + 16), (WTF::StringImpl *)(*(_QWORD *)(v10 + 16) + 32 * v92));
            v93 = *(WTF **)(v10 + 16);
            if (v93)
            {
              *(_QWORD *)(v10 + 16) = 0;
              *(_DWORD *)(v10 + 24) = 0;
              WTF::fastFree(v93, (void *)v5);
            }
            this = WTF::fastFree((WTF *)v10, (void *)v5);
            if (v24)
            {
LABEL_32:
              if ((*(_BYTE *)(v24 + 22) & 8) != 0)
              {
                ++*(_DWORD *)(v2 + 112);
                v27 = *(_QWORD *)(v2 + 16);
                if (v27)
                  v27 = *(_QWORD *)(v27 + 8);
                WTF::WeakHashMap<WebCore::HTMLElement,std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>,WebCore::WeakPtrImplWithEventTargetData>::remove(v27 + 1792, (_QWORD *)v24);
                v29 = *(_QWORD *)(*(_QWORD *)(v24 + 176) + 24);
                if (v29)
                {
                  v30 = *(_QWORD *)(v29 + 8);
                  if (v30)
                  {
                    if ((*(_WORD *)(v30 + 557) >> 5) - 3 >= 2)
                    {
                      v31 = (_DWORD **)(v30 + 160);
                      if ((*(_BYTE *)(v30 + 344) & 1) == 0)
                      {
                        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v30 + 160));
                        *(_BYTE *)(v30 + 344) |= 1u;
                      }
                      v32 = *(_DWORD *)(v2 + 88);
                      v33 = *(_DWORD *)(v2 + 92);
                      *(_DWORD *)(v2 + 88) = v32 + 1;
                      if (v32 > v33)
                        WTF::WeakHashMap<WebCore::HTMLImageElement,WTF::URL,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences(v2 + 80, v28);
                      if ((*(_QWORD *)(v24 + 16) & 0xFFFFFFFFFFFFLL) == 0)
                      {
                        v34 = WTF::fastCompactMalloc((WTF *)0x28);
                        *(_DWORD *)v34 = 1;
                        *(_QWORD *)(v34 + 16) = 0;
                        *(_QWORD *)(v34 + 24) = 0;
                        *(_QWORD *)(v34 + 8) = v24;
                        *(_BYTE *)(v34 + 32) = 0;
                        v35 = *(_QWORD *)(v24 + 16);
                        *(_QWORD *)(v24 + 16) = v35 & 0xFFFF000000000000 | v34;
                        v36 = v35 & 0xFFFFFFFFFFFFLL;
                        if ((v35 & 0xFFFFFFFFFFFFLL) != 0)
                        {
                          do
                          {
                            v37 = __ldaxr((unsigned int *)v36);
                            v38 = v37 - 1;
                          }
                          while (__stlxr(v38, (unsigned int *)v36));
                          if (!v38)
                          {
                            atomic_store(1u, (unsigned int *)v36);
                            v88 = *(unsigned int *)(v36 + 28);
                            if ((_DWORD)v88)
                              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v36 + 16), (WTF::StringImpl *)(*(_QWORD *)(v36 + 16) + 32 * v88));
                            v89 = *(WTF **)(v36 + 16);
                            if (v89)
                            {
                              *(_QWORD *)(v36 + 16) = 0;
                              *(_DWORD *)(v36 + 24) = 0;
                              WTF::fastFree(v89, v28);
                            }
                            WTF::fastFree((WTF *)v36, v28);
                          }
                        }
                      }
                      v39 = *(_QWORD *)(v24 + 16);
                      v40 = v39 & 0xFFFFFFFFFFFFLL;
                      do
                        v41 = __ldaxr((unsigned int *)v40);
                      while (__stlxr(v41 + 1, (unsigned int *)v40));
                      do
                        v42 = __ldaxr((unsigned int *)v40);
                      while (__stlxr(v42 + 1, (unsigned int *)v40));
                      if (v40)
                      {
                        do
                        {
                          v43 = __ldaxr((unsigned int *)v40);
                          v44 = v43 - 1;
                        }
                        while (__stlxr(v44, (unsigned int *)v40));
                        if (!v44)
                        {
                          atomic_store(1u, (unsigned int *)v40);
                          v86 = *(unsigned int *)((v39 & 0xFFFFFFFFFFFFLL) + 0x1C);
                          if ((_DWORD)v86)
                            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)((v39 & 0xFFFFFFFFFFFFLL) + 0x10), (WTF::StringImpl *)(*(_QWORD *)((v39 & 0xFFFFFFFFFFFFLL) + 0x10) + 32 * v86));
                          v87 = *(WTF **)((v39 & 0xFFFFFFFFFFFFLL) + 0x10);
                          if (v87)
                          {
                            *(_QWORD *)((v39 & 0xFFFFFFFFFFFFLL) + 0x10) = 0;
                            *(_DWORD *)((v39 & 0xFFFFFFFFFFFFLL) + 0x18) = 0;
                            WTF::fastFree(v87, v28);
                          }
                          WTF::fastFree((WTF *)(v39 & 0xFFFFFFFFFFFFLL), v28);
                        }
                      }
                      v45 = *v4;
                      if (*v4
                        || (WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::URL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::URL>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::URL,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)(v2 + 80), 8u), (v45 = *v4) != 0))
                      {
                        v46 = *(_DWORD *)(v45 - 8);
                      }
                      else
                      {
                        v46 = 0;
                      }
                      v47 = 0;
                      v48 = (v40 + ~(v39 << 32)) ^ ((unint64_t)(v40 + ~(v39 << 32)) >> 22);
                      v49 = 9 * ((v48 + ~(v48 << 13)) ^ ((v48 + ~(v48 << 13)) >> 8));
                      v50 = (v49 ^ (v49 >> 15)) + ~((v49 ^ (v49 >> 15)) << 27);
                      v51 = (v50 >> 31) ^ v50;
                      for (i = 1; ; ++i)
                      {
                        v53 = v51 & v46;
                        v54 = (_OWORD *)(v45 + 48 * (v51 & v46));
                        v55 = *(_QWORD *)v54;
                        if (*(_QWORD *)v54 == -1)
                        {
                          v47 = (_OWORD *)(v45 + 48 * v53);
                        }
                        else
                        {
                          if (!v55)
                          {
                            if (v47)
                            {
                              v47[1] = 0u;
                              v47[2] = 0u;
                              *v47 = 0u;
                              --*(_DWORD *)(*v4 - 16);
                              *(_QWORD *)v47 = v40;
                              v54 = v47;
                            }
                            else
                            {
                              *(_QWORD *)v54 = v40;
                            }
                            v65 = *v31;
                            if (*v31)
                              *v65 += 2;
                            v66 = (WTF::StringImpl *)*((_QWORD *)v54 + 1);
                            *((_QWORD *)v54 + 1) = v65;
                            if (v66)
                            {
                              if (*(_DWORD *)v66 == 2)
                                WTF::StringImpl::destroy(v66, (WTF::StringImpl *)v28);
                              else
                                *(_DWORD *)v66 -= 2;
                            }
                            v67 = *(_OWORD *)(v30 + 184);
                            v54[1] = *(_OWORD *)(v30 + 168);
                            v54[2] = v67;
                            v68 = *v4;
                            if (*v4)
                              v69 = *(_DWORD *)(v68 - 12) + 1;
                            else
                              v69 = 1;
                            *(_DWORD *)(v68 - 12) = v69;
                            v70 = *v4;
                            if (*v4)
                              v71 = *(_DWORD *)(v70 - 12);
                            else
                              v71 = 0;
                            v72 = (*(_DWORD *)(v70 - 16) + v71);
                            v73 = *(unsigned int *)(v70 - 4);
                            if (v73 > 0x400)
                            {
                              if (v73 > 2 * v72)
                                break;
LABEL_92:
                              v74 = (_DWORD)v73 << (6 * *(_DWORD *)(v70 - 12) >= (2 * v73));
                            }
                            else
                            {
                              if (3 * v73 > 4 * v72)
                                break;
                              if ((_DWORD)v73)
                                goto LABEL_92;
                              v74 = 8;
                            }
                            WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::URL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::URL>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::URL,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)(v2 + 80), v74);
                            break;
                          }
                          if (v55 == v40)
                          {
                            v56 = *v31;
                            if (*v31)
                              *v56 += 2;
                            v57 = v45 + 48 * v53;
                            v58 = *(WTF::StringImpl **)(v57 + 8);
                            *(_QWORD *)(v57 + 8) = v56;
                            if (v58)
                            {
                              if (*(_DWORD *)v58 == 2)
                                WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v28);
                              else
                                *(_DWORD *)v58 -= 2;
                            }
                            v59 = *(_OWORD *)(v30 + 184);
                            v60 = v45 + 48 * v53;
                            *(_OWORD *)(v60 + 16) = *(_OWORD *)(v30 + 168);
                            *(_OWORD *)(v60 + 32) = v59;
                            if (v40)
                            {
                              do
                              {
                                v61 = __ldaxr((unsigned int *)v40);
                                v62 = v61 - 1;
                              }
                              while (__stlxr(v62, (unsigned int *)v40));
                              if (!v62)
                              {
                                atomic_store(1u, (unsigned int *)v40);
                                v63 = *(unsigned int *)(v40 + 28);
                                if ((_DWORD)v63)
                                  WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v40 + 16), (WTF::StringImpl *)(*(_QWORD *)(v40 + 16) + 32 * v63));
                                v64 = *(WTF **)(v40 + 16);
                                if (v64)
                                {
                                  *(_QWORD *)(v40 + 16) = 0;
                                  *(_DWORD *)(v40 + 24) = 0;
                                  WTF::fastFree(v64, v28);
                                }
                                WTF::fastFree((WTF *)v40, v28);
                              }
                            }
                            break;
                          }
                        }
                        v51 = i + v53;
                      }
                    }
                  }
                }
                v75 = *(WTF::StringImpl **)(v2 + 8);
                if (v75)
                  v76 = *((_DWORD *)v75 + 1) == 0;
                else
                  v76 = 1;
                v77 = *(_QWORD *)(v2 + 16);
                v78 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v77 + 8) + 48) + 16);
                v79 = *(WTF::StringImpl **)v2;
                if (*(_QWORD *)v2)
                  *(_DWORD *)v79 += 2;
                v95 = v79;
                if (v75)
                  *(_DWORD *)v75 += 2;
                v96 = v75;
                v97 = v76;
                do
                  v80 = __ldaxr((unsigned int *)v77);
                while (__stlxr(v80 + 1, (unsigned int *)v77));
                v81 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                *v81 = &off_1E33FEC80;
                v81[1] = v2;
                v81[2] = v77;
                v94 = v81;
                (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, _QWORD **))(*(_QWORD *)v78 + 1688))(v78, v24, &v95, &v94);
                v82 = v94;
                v94 = 0;
                if (v82)
                  (*(void (**)(_QWORD *))(*v82 + 8))(v82);
                v83 = v96;
                v96 = 0;
                if (v83)
                {
                  if (*(_DWORD *)v83 == 2)
                    WTF::StringImpl::destroy(v83, (WTF::StringImpl *)v5);
                  else
                    *(_DWORD *)v83 -= 2;
                }
                this = (uint64_t)v95;
                v95 = 0;
                if (this)
                {
                  if (*(_DWORD *)this == 2)
                    this = WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)v5);
                  else
                    *(_DWORD *)this -= 2;
                }
              }
              if (*(_DWORD *)(v24 + 24) == 2)
              {
                if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
                  this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v24, (void *)v5);
              }
              else
              {
                *(_DWORD *)(v24 + 24) -= 2;
              }
            }
          }
LABEL_115:
          v3 = *(unsigned int *)(v2 + 108);
        }
        while ((_DWORD)v3);
      }
    }
  }
  return this;
}

WebCore::ImageAnalysisQueue *WebCore::ImageAnalysisQueue::ImageAnalysisQueue(WebCore::ImageAnalysisQueue *this, WebCore::Page *a2)
{
  uint64_t v3;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t StatusReg;
  unsigned int *v11;
  unsigned int v12;
  _QWORD *v13;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v3 = *((_QWORD *)a2 + 2);
  if (v3)
    goto LABEL_14;
  v3 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 8) = a2;
  v6 = (unsigned int *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v3;
  if (!v6)
    goto LABEL_14;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  v3 = *((_QWORD *)a2 + 2);
  if (v3)
  {
LABEL_14:
    do
      v9 = __ldaxr((unsigned int *)v3);
    while (__stlxr(v9 + 1, (unsigned int *)v3));
  }
  *((_QWORD *)this + 2) = v3;
  *((_QWORD *)this + 3) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  v11 = *(unsigned int **)(StatusReg + 736);
  if (!v11)
    v11 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  *((_QWORD *)this + 8) = v11;
  *((_QWORD *)this + 3) = off_1E31F7378;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v13 = off_1E33FEC58;
  v13[1] = WebCore::ImageAnalysisQueue::resumeProcessing;
  v13[2] = 0;
  v13[3] = this;
  *((_QWORD *)this + 9) = v13;
  *((_BYTE *)this + 128) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 5) = 0u;
  return this;
}

void WebCore::ImageAnalysisQueue::~ImageAnalysisQueue(WebCore::ImageAnalysisQueue *this, void *a2)
{
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;

  v3 = (_QWORD *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
  {
    v3[2] = off_1E32051C0;
    v4 = v3[5];
    v3[5] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)(v3 + 2));
    v6 = *v3;
    *v3 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    WTF::fastFree((WTF *)v3, v5);
  }
  v7 = *((unsigned int *)this + 27);
  if ((_DWORD)v7)
  {
    v8 = (uint64_t *)*((_QWORD *)this + 12);
    v9 = &v8[2 * v7];
    do
    {
      v10 = *v8;
      *v8 = 0;
      if (v10)
      {
        do
        {
          v11 = __ldaxr((unsigned int *)v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, (unsigned int *)v10));
        if (!v12)
        {
          atomic_store(1u, (unsigned int *)v10);
          v13 = *(unsigned int *)(v10 + 28);
          if ((_DWORD)v13)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v10 + 16), (WTF::StringImpl *)(*(_QWORD *)(v10 + 16) + 32 * v13));
          v14 = *(WTF **)(v10 + 16);
          if (v14)
          {
            *(_QWORD *)(v10 + 16) = 0;
            *(_DWORD *)(v10 + 24) = 0;
            WTF::fastFree(v14, a2);
          }
          WTF::fastFree((WTF *)v10, a2);
        }
      }
      v8 += 2;
    }
    while (v8 != v9);
  }
  v15 = (WTF *)*((_QWORD *)this + 12);
  if (v15)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v15, a2);
  }
  v16 = *((_QWORD *)this + 10);
  if (v16)
    WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::URL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::URL>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::URL,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(v16, (WTF::StringImpl *)a2);
  *((_QWORD *)this + 3) = off_1E31F7378;
  v17 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  WebCore::TimerBase::~TimerBase((WebCore::ImageAnalysisQueue *)((char *)this + 24));
  v19 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v19)
  {
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v19);
      WTF::fastFree((WTF *)v19, v18);
    }
  }
  v22 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v18);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v18);
    else
      *(_DWORD *)v23 -= 2;
  }
}

void WebCore::ImageAnalysisQueue::enqueueIfNeeded(WebCore::ImageAnalysisQueue *this, WebCore::HTMLImageElement *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int *v8;
  WebCore::HTMLImageElement *v9;
  char *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  const WTF::StringImpl *v16;
  float v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  __int128 v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  int i;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  _OWORD *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  int j;
  unsigned int v54;
  _OWORD *v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  WTF *v59;
  WTF::StringImpl *v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  WTF::StringImpl *v69;
  __int128 v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  unint64_t v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  WebCore::LocalFrameView *v81;
  unsigned int *v82;
  unsigned int v83;
  _QWORD *v84;
  uint64_t v85;
  const WebCore::IntRect *v86;
  uint64_t v87;
  uint64_t isVisibleInDocumentRect;
  int v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  WTF *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  WTF *v98;
  unsigned int v99;
  unsigned int v100;
  double v101;
  uint64_t v102;
  WTF *v103;
  uint64_t v104;
  WTF *v105;
  uint64_t v106;
  WTF *v107;
  uint64_t v108[2];
  WTF *v109;
  char v110;
  int v111;
  unsigned int *v112;
  __int128 v113;
  __int128 v114;

  v2 = *((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return;
  if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195FD1A98);
  }
  if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3
    || (*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x35) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195FD1AB8);
  }
  ++*(_DWORD *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 224) + 24);
  if (!v4)
    goto LABEL_9;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_9;
  v8 = *(unsigned int **)(v5 + 8);
  v9 = a2;
  if (!v8)
  {
    v8 = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
    *v8 = 1;
    *((_QWORD *)v8 + 1) = v5;
    v78 = *(unsigned int **)(v5 + 8);
    *(_QWORD *)(v5 + 8) = v8;
    if (v78)
    {
      do
      {
        v79 = __ldaxr(v78);
        v80 = v79 - 1;
      }
      while (__stlxr(v80, v78));
      if (!v80)
      {
        atomic_store(1u, v78);
        WTF::fastFree((WTF *)v78, a2);
      }
      v8 = *(unsigned int **)(v5 + 8);
      if (!v8)
      {
LABEL_9:
        v112 = 0;
        goto LABEL_10;
      }
    }
  }
  v10 = &v110;
  do
    v11 = __ldaxr(v8);
  while (__stlxr(v11 + 1, v8));
  v112 = v8;
  v12 = *((_QWORD *)v8 + 1);
  if (v12)
  {
    v108[0] = (uint64_t)&v112;
    ++*(_DWORD *)(v12 + 548);
    v13 = *(_QWORD *)(v12 + 488);
    if (v13)
    {
      if (*(_QWORD *)(v13 + 8))
      {
        WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v12 + 464), v108, (uint64_t)&v113);
        v8 = v112;
        if (!v112)
          goto LABEL_10;
      }
    }
  }
  v14 = *((_QWORD *)v8 + 1);
  if (!v14 || (*(_WORD *)(v14 + 557) >> 5) - 3 < 2)
    goto LABEL_10;
  v15 = *(_DWORD **)(v14 + 688);
  if (!v15)
  {
    {
      v15 = (_DWORD *)WebCore::Image::nullImage(void)::nullImage;
      if (!WebCore::Image::nullImage(void)::nullImage)
        goto LABEL_10;
    }
    else
    {
      WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)&v113);
      v15 = (_DWORD *)v113;
      WebCore::Image::nullImage(void)::nullImage = v113;
      if (!(_QWORD)v113)
        goto LABEL_10;
    }
  }
  ++v15[2];
  if ((*(float (**)(_DWORD *, _QWORD))(*(_QWORD *)v15 + 168))(v15, 0) < 20.0)
    goto LABEL_154;
  (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)v15 + 168))(v15, 0);
  if (v17 < 20.0)
    goto LABEL_154;
  v18 = *((_QWORD *)v112 + 1);
  if ((*(_BYTE *)(v18 + 344) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v18 + 160));
    *(_BYTE *)(v18 + 344) |= 1u;
  }
  v19 = *(const WTF::StringImpl **)(v18 + 160);
  if (v19)
    *(_DWORD *)v19 += 2;
  v20 = *(_OWORD *)(v18 + 184);
  v113 = *(_OWORD *)(v18 + 168);
  v114 = v20;
  v21 = (uint64_t *)((char *)this + 80);
  v22 = *((_QWORD *)v9 + 2);
  v23 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = v23 + 1;
  v24 = v22 & 0xFFFFFFFFFFFFLL;
  if ((v22 & 0xFFFFFFFFFFFFLL) != 0 && *(_QWORD *)((v22 & 0xFFFFFFFFFFFFLL) + 8))
  {
    v25 = *v21;
    if (*v21)
    {
      v26 = *(_DWORD *)(v25 - 8);
      v27 = (v24 + ~(v22 << 32)) ^ ((unint64_t)(v24 + ~(v22 << 32)) >> 22);
      v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((v27 + ~(v27 << 13)) >> 8));
      v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
      v30 = v26 & ((v29 >> 31) ^ v29);
      for (i = 1; ; ++i)
      {
        v32 = (uint64_t *)(v25 + 48 * v30);
        v33 = *v32;
        if (*v32 != -1)
        {
          if (!v33)
          {
            v65 = *(_DWORD *)(v25 - 4);
            v32 = (uint64_t *)(v25 + 48 * v65);
            v66 = v32;
            goto LABEL_95;
          }
          if (v33 == v24)
            break;
        }
        v30 = (v30 + i) & v26;
      }
      v65 = *(_DWORD *)(v25 - 4);
      v66 = (uint64_t *)(v25 + 48 * v65);
LABEL_95:
      v67 = (uint64_t *)(v25 + 48 * v65);
      if (v32 != v67)
      {
        while (!*(_QWORD *)(*v32 + 8))
        {
          v68 = v32 + 6;
          v32 = v66;
          if (v68 != v66)
          {
            v32 = v68;
            while ((unint64_t)(*v32 + 1) <= 1)
            {
              v32 += 6;
              if (v32 == v66)
              {
                v32 = v66;
                break;
              }
            }
          }
          if (v32 == v67)
          {
            v32 = v67;
            break;
          }
        }
      }
LABEL_41:
      if (v32 != (uint64_t *)(v25 + 48 * *(unsigned int *)(v25 - 4)))
      {
        if ((WTF::equal((WTF *)v32[1], v19, v16) & 1) != 0)
        {
LABEL_43:
          v34 = 0;
          goto LABEL_129;
        }
        if (v19)
          *(_DWORD *)v19 += 2;
        v60 = (WTF::StringImpl *)v32[1];
        v32[1] = (uint64_t)v19;
        if (v60)
        {
          if (*(_DWORD *)v60 == 2)
            WTF::StringImpl::destroy(v60, a2);
          else
            *(_DWORD *)v60 -= 2;
        }
        v61 = v114;
        *((_OWORD *)v32 + 1) = v113;
        *((_OWORD *)v32 + 2) = v61;
        v62 = *((unsigned int *)this + 27);
        if ((_DWORD)v62)
        {
          v63 = *((_QWORD *)this + 12);
          v64 = 16 * v62;
          while (!*(_QWORD *)v63 || *(WebCore::HTMLImageElement **)(*(_QWORD *)v63 + 8) != v9)
          {
            v63 += 16;
            v64 -= 16;
            if (!v64)
              goto LABEL_128;
          }
          goto LABEL_43;
        }
LABEL_128:
        v34 = 1;
        goto LABEL_129;
      }
    }
  }
  else
  {
    v25 = *v21;
    if (*v21)
    {
      v32 = (uint64_t *)(v25 + 48 * *(unsigned int *)(v25 - 4));
      goto LABEL_41;
    }
  }
  *((_DWORD *)this + 22) = v23 + 2;
  if ((v23 + 1) > *((_DWORD *)this + 23))
    WTF::WeakHashMap<WebCore::HTMLImageElement,WTF::URL,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences((uint64_t)this + 80, a2);
  if ((*((_QWORD *)v9 + 2) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v35 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v35 = 1;
    *(_QWORD *)(v35 + 16) = 0;
    *(_QWORD *)(v35 + 24) = 0;
    *(_QWORD *)(v35 + 8) = v9;
    *(_BYTE *)(v35 + 32) = 0;
    v36 = *((_QWORD *)v9 + 2);
    *((_QWORD *)v9 + 2) = v36 & 0xFFFF000000000000 | v35;
    v37 = v36 & 0xFFFFFFFFFFFFLL;
    if ((v36 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v38 = __ldaxr((unsigned int *)v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, (unsigned int *)v37));
      if (!v39)
      {
        atomic_store(1u, (unsigned int *)v37);
        v106 = *(unsigned int *)((v36 & 0xFFFFFFFFFFFFLL) + 0x1C);
        if ((_DWORD)v106)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)((v36 & 0xFFFFFFFFFFFFLL) + 0x10), (WTF::StringImpl *)(*(_QWORD *)((v36 & 0xFFFFFFFFFFFFLL) + 0x10) + 32 * v106));
        v107 = *(WTF **)(v37 + 16);
        if (v107)
        {
          *(_QWORD *)(v37 + 16) = 0;
          *(_DWORD *)(v37 + 24) = 0;
          WTF::fastFree(v107, a2);
        }
        WTF::fastFree((WTF *)v37, a2);
      }
    }
  }
  v40 = *((_QWORD *)v9 + 2);
  v41 = v40 & 0xFFFFFFFFFFFFLL;
  do
    v42 = __ldaxr((unsigned int *)v41);
  while (__stlxr(v42 + 1, (unsigned int *)v41));
  do
    v43 = __ldaxr((unsigned int *)v41);
  while (__stlxr(v43 + 1, (unsigned int *)v41));
  if (v41)
  {
    do
    {
      v44 = __ldaxr((unsigned int *)v41);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, (unsigned int *)v41));
    if (!v45)
    {
      atomic_store(1u, (unsigned int *)v41);
      v102 = *(unsigned int *)((v40 & 0xFFFFFFFFFFFFLL) + 0x1C);
      if ((_DWORD)v102)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)((v40 & 0xFFFFFFFFFFFFLL) + 0x10), (WTF::StringImpl *)(*(_QWORD *)((v40 & 0xFFFFFFFFFFFFLL) + 0x10) + 32 * v102));
      v103 = *(WTF **)((v40 & 0xFFFFFFFFFFFFLL) + 0x10);
      if (v103)
      {
        *(_QWORD *)((v40 & 0xFFFFFFFFFFFFLL) + 0x10) = 0;
        *(_DWORD *)((v40 & 0xFFFFFFFFFFFFLL) + 0x18) = 0;
        WTF::fastFree(v103, a2);
      }
      WTF::fastFree((WTF *)(v40 & 0xFFFFFFFFFFFFLL), a2);
    }
  }
  v46 = *v21;
  if (*v21
    || (WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::URL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::URL>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::URL,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)this + 10, 8u), (v46 = *v21) != 0))
  {
    v47 = *(_DWORD *)(v46 - 8);
  }
  else
  {
    v47 = 0;
  }
  v48 = 0;
  v49 = (v41 + ~(v40 << 32)) ^ ((unint64_t)(v41 + ~(v40 << 32)) >> 22);
  v50 = 9 * ((v49 + ~(v49 << 13)) ^ ((v49 + ~(v49 << 13)) >> 8));
  v51 = (v50 ^ (v50 >> 15)) + ~((v50 ^ (v50 >> 15)) << 27);
  v52 = (v51 >> 31) ^ v51;
  for (j = 1; ; ++j)
  {
    v54 = v52 & v47;
    v55 = (_OWORD *)(v46 + 48 * v54);
    v56 = *(_QWORD *)v55;
    if (*(_QWORD *)v55 != -1)
      break;
    v48 = (_OWORD *)(v46 + 48 * v54);
LABEL_65:
    v52 = j + v54;
  }
  if (!v56)
  {
    if (v48)
    {
      v48[1] = 0u;
      v48[2] = 0u;
      *v48 = 0u;
      --*(_DWORD *)(*v21 - 16);
      *(_QWORD *)v48 = v41;
      v55 = v48;
      if (!v19)
      {
LABEL_106:
        v69 = (WTF::StringImpl *)*((_QWORD *)v55 + 1);
        *((_QWORD *)v55 + 1) = v19;
        if (v69)
        {
          if (*(_DWORD *)v69 == 2)
            WTF::StringImpl::destroy(v69, a2);
          else
            *(_DWORD *)v69 -= 2;
        }
        v70 = v114;
        v55[1] = v113;
        v55[2] = v70;
        v71 = *v21;
        if (*v21)
          v72 = *(_DWORD *)(v71 - 12) + 1;
        else
          v72 = 1;
        *(_DWORD *)(v71 - 12) = v72;
        v73 = *v21;
        if (*v21)
          v74 = *(_DWORD *)(v73 - 12);
        else
          v74 = 0;
        v75 = (*(_DWORD *)(v73 - 16) + v74);
        v76 = *(unsigned int *)(v73 - 4);
        if (v76 > 0x400)
        {
          if (v76 > 2 * v75)
            goto LABEL_128;
        }
        else
        {
          if (3 * v76 > 4 * v75)
            goto LABEL_128;
          if (!(_DWORD)v76)
          {
            v77 = 8;
            goto LABEL_127;
          }
        }
        v77 = (_DWORD)v76 << (6 * *(_DWORD *)(v73 - 12) >= (2 * v76));
LABEL_127:
        WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::URL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::URL>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::URL,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)this + 10, v77);
        goto LABEL_128;
      }
    }
    else
    {
      *(_QWORD *)v55 = v41;
      if (!v19)
        goto LABEL_106;
    }
    *(_DWORD *)v19 += 2;
    goto LABEL_106;
  }
  if (v56 != v41)
    goto LABEL_65;
  if (!v41)
    goto LABEL_128;
  do
    v57 = __ldaxr((unsigned int *)v41);
  while (__stlxr(v57 - 1, (unsigned int *)v41));
  v34 = 1;
  if (v57 == 1)
  {
    atomic_store(1u, (unsigned int *)v41);
    v58 = *(unsigned int *)(v41 + 28);
    if ((_DWORD)v58)
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v41 + 16), (WTF::StringImpl *)(*(_QWORD *)(v41 + 16) + 32 * v58));
    v59 = *(WTF **)(v41 + 16);
    if (v59)
    {
      *(_QWORD *)(v41 + 16) = 0;
      *(_DWORD *)(v41 + 24) = 0;
      WTF::fastFree(v59, a2);
    }
    WTF::fastFree((WTF *)v41, a2);
  }
LABEL_129:
  if (!v19)
  {
LABEL_132:
    if (!v34)
      goto LABEL_154;
    goto LABEL_133;
  }
  if (*(_DWORD *)v19 != 2)
  {
    *(_DWORD *)v19 -= 2;
    goto LABEL_132;
  }
  WTF::StringImpl::destroy(v19, a2);
  if (v34)
  {
LABEL_133:
    v81 = *(WebCore::LocalFrameView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8)
                                                                          + 40)
                                                              + 8)
                                                  + 1944)
                                      + 248);
    ++*((_DWORD *)v81 + 2);
    v82 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>((uint64_t)v9);
    if (v82)
    {
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 + 1, v82));
    }
    v84 = (_QWORD *)((char *)this + 96);
    v109 = (WTF *)v82;
    v108[0] = WebCore::LocalFrameView::windowClipRect(v81);
    v108[1] = v85;
    *(_QWORD *)&v113 = WebCore::ScrollView::windowToContents((WebCore::Widget **)v81, (const WebCore::IntRect *)v108, v86);
    *((_QWORD *)&v113 + 1) = v87;
    isVisibleInDocumentRect = WebCore::RenderElement::isVisibleInDocumentRect((WebCore::RenderElement *)v2, (const WebCore::IntRect *)&v113);
    v110 = isVisibleInDocumentRect;
    v89 = *((_DWORD *)this + 29) + 1;
    *((_DWORD *)this + 29) = v89;
    v111 = v89;
    v90 = *((unsigned int *)this + 27);
    if ((_DWORD)v90 == *((_DWORD *)this + 26))
    {
      isVisibleInDocumentRect = WTF::Vector<WebCore::ImageAnalysisQueue::Task,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 96, v90 + 1, (unint64_t)&v109);
      v91 = *((_QWORD *)this + 12);
      v92 = *(_QWORD *)isVisibleInDocumentRect;
      *(_QWORD *)isVisibleInDocumentRect = 0;
      v10 = (char *)(isVisibleInDocumentRect + 8);
      v93 = (_QWORD *)(v91 + 16 * *((unsigned int *)this + 27));
      *v93 = v92;
    }
    else
    {
      v93 = (_QWORD *)(*v84 + 16 * v90);
      v94 = v109;
      v109 = 0;
      *v93 = v94;
    }
    v93[1] = *(_QWORD *)v10;
    ++*((_DWORD *)this + 27);
    if ((_DWORD)v90)
    {
      do
      {
        v95 = v90 - 1;
        v96 = (v90 - 1) >> 1;
        v97 = *((unsigned int *)this + 27);
        if (v96 >= v97)
        {
          __break(0xC471u);
          JUMPOUT(0x195FD2458);
        }
        if (v90 >= v97)
        {
          __break(0xC471u);
          JUMPOUT(0x195FD2460);
        }
        isVisibleInDocumentRect = *v84 + 16 * v96;
        a2 = (WebCore::HTMLImageElement *)(*v84 + 16 * v90);
        if ((*(_BYTE *)(isVisibleInDocumentRect + 8) != 0) != (*((_BYTE *)a2 + 8) != 0))
        {
          if (*(_BYTE *)(isVisibleInDocumentRect + 8))
            break;
        }
        else if (*(_DWORD *)(*v84 + 16 * v96 + 12) < *((_DWORD *)a2 + 3))
        {
          break;
        }
        isVisibleInDocumentRect = std::swap[abi:sn180100]<WebCore::ImageAnalysisQueue::Task>((uint64_t *)isVisibleInDocumentRect, (uint64_t *)a2);
        v90 = (v90 - 1) >> 1;
      }
      while (v95 > 1);
    }
    v98 = v109;
    v109 = 0;
    if (v98)
    {
      do
      {
        v99 = __ldaxr((unsigned int *)v98);
        v100 = v99 - 1;
      }
      while (__stlxr(v100, (unsigned int *)v98));
      if (!v100)
      {
        atomic_store(1u, (unsigned int *)v98);
        v104 = *((unsigned int *)v98 + 7);
        if ((_DWORD)v104)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v98 + 2), (WTF::StringImpl *)(*((_QWORD *)v98 + 2) + 32 * v104));
        v105 = (WTF *)*((_QWORD *)v98 + 2);
        if (v105)
        {
          *((_QWORD *)v98 + 2) = 0;
          *((_DWORD *)v98 + 6) = 0;
          WTF::fastFree(v105, a2);
        }
        isVisibleInDocumentRect = WTF::fastFree(v98, a2);
      }
    }
    if (*((_DWORD *)this + 27)
      && ((*((_QWORD *)this + 7) & 0xFFFFFFFFFFFFLL) == 0
       || *(double *)((*((_QWORD *)this + 7) & 0xFFFFFFFFFFFFLL) + 8) == 0.0))
    {
      *((_QWORD *)this + 6) = 0;
      WTF::MonotonicTime::now((WTF::MonotonicTime *)isVisibleInDocumentRect);
      WebCore::TimerBase::setNextFireTime((uint64_t)this + 24, v101 + 0.1);
    }
    if (*((_DWORD *)v81 + 2) == 1)
      (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v81 + 8))(v81);
    else
      --*((_DWORD *)v81 + 2);
  }
LABEL_154:
  if (v15[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
  else
    --v15[2];
LABEL_10:
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v112, a2);
  v6 = *(_DWORD *)(v2 + 16);
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x195FD1AD8);
  }
  *(_DWORD *)(v2 + 16) = v6 - 1;
}

void WebCore::ImageAnalysisQueue::enqueueAllImagesIfNeeded(WebCore::ImageAnalysisQueue *this, WebCore::Document *a2, WTF **a3, WTF **a4)
{
  uint64_t v4;
  void *v9;
  const WTF::StringImpl *v10;
  WTF *v11;
  WTF::StringImpl *v12;
  WTF *v13;
  WTF::StringImpl *v14;

  v4 = *((_QWORD *)this + 2);
  if (v4 && *(_QWORD *)(v4 + 8) && !*((_BYTE *)this + 128))
  {
    *((_BYTE *)this + 128) = 1;
    if (!WTF::equal(*a3, *(const WTF::StringImpl **)this, (const WTF::StringImpl *)a3)
      || (WTF::equal(*a4, *((const WTF::StringImpl **)this + 1), v10) & 1) == 0)
    {
      WebCore::ImageAnalysisQueue::clear(this, v9);
    }
    v11 = *a3;
    if (*a3)
      *(_DWORD *)v11 += 2;
    v12 = *(WTF::StringImpl **)this;
    *(_QWORD *)this = v11;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v9);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = *a4;
    if (*a4)
      *(_DWORD *)v13 += 2;
    v14 = (WTF::StringImpl *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v13;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v9);
      else
        *(_DWORD *)v14 -= 2;
    }
    WebCore::ImageAnalysisQueue::enqueueAllImagesRecursive(this, a2);
  }
}

WTF::StringImpl *WebCore::ImageAnalysisQueue::clear(WebCore::ImageAnalysisQueue *this, void *a2)
{
  WTF **v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF *v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *result;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;

  *((_DWORD *)this + 28) = 0;
  if ((*((_QWORD *)this + 7) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::ImageAnalysisQueue *)((char *)this + 24));
  v3 = (WTF **)((char *)this + 96);
  v4 = *((unsigned int *)this + 27);
  if ((_DWORD)v4)
  {
    v5 = *v3;
    v6 = (uint64_t)*v3 + 16 * v4;
    do
    {
      v7 = *(_QWORD *)v5;
      *(_QWORD *)v5 = 0;
      if (v7)
      {
        do
        {
          v8 = __ldaxr((unsigned int *)v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, (unsigned int *)v7));
        if (!v9)
        {
          atomic_store(1u, (unsigned int *)v7);
          v10 = *(unsigned int *)(v7 + 28);
          if ((_DWORD)v10)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v10));
          v11 = *(WTF **)(v7 + 16);
          if (v11)
          {
            *(_QWORD *)(v7 + 16) = 0;
            *(_DWORD *)(v7 + 24) = 0;
            WTF::fastFree(v11, a2);
          }
          WTF::fastFree((WTF *)v7, a2);
        }
      }
      v5 = (WTF *)((char *)v5 + 16);
    }
    while (v5 != (WTF *)v6);
  }
  v12 = *v3;
  if (*v3)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v12, a2);
  }
  *v3 = 0;
  *((_QWORD *)this + 13) = 0;
  v13 = *((_QWORD *)this + 10);
  if (v13)
  {
    *((_QWORD *)this + 10) = 0;
    WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::URL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::URL>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::URL,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(v13, (WTF::StringImpl *)a2);
    v14 = *((_QWORD *)this + 10);
    *((_DWORD *)this + 22) = 0;
    if (v14)
    {
      LODWORD(v14) = *(_DWORD *)(v14 - 12);
      if (v14 > 0x7FFFFFFE)
        LODWORD(v14) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v14) = 0;
    *((_DWORD *)this + 22) = 0;
  }
  *((_DWORD *)this + 23) = 2 * v14;
  v15 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  result = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  *((_DWORD *)this + 29) = 0;
  *((_BYTE *)this + 128) = 0;
  v17 = (_QWORD *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v17)
  {
    v17[2] = off_1E32051C0;
    v18 = v17[5];
    v17[5] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)(v17 + 2));
    v20 = *v17;
    *v17 = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    return (WTF::StringImpl *)WTF::fastFree((WTF *)v17, v19);
  }
  return result;
}

void WebCore::ImageAnalysisQueue::enqueueAllImagesRecursive(WebCore::ImageAnalysisQueue *this, WebCore::Document *a2)
{
  WebCore::Document *v2;
  WebCore::Document *v5;
  __int16 v6;
  BOOL v7;
  WebCore::Document *v8;
  BOOL v9;
  __int16 v10;
  BOOL v11;
  WebCore::Document *v12;
  WebCore::Document *i;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  WebCore::Document *v19;
  BOOL v20;
  BOOL v21;

  v2 = (WebCore::Document *)*((_QWORD *)a2 + 10);
  if (v2)
  {
    while (1)
    {
      v5 = v2;
      v6 = *((_WORD *)v2 + 14);
      if ((v6 & 0x10) != 0 && *(_QWORD *)(*((_QWORD *)v5 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
        break;
      if ((v6 & 4) != 0)
      {
        v2 = (WebCore::Document *)*((_QWORD *)v5 + 10);
        if (v2)
          continue;
      }
      if (v5 == a2)
        goto LABEL_35;
      while (1)
      {
        v2 = (WebCore::Document *)*((_QWORD *)v5 + 7);
        if (v2)
          break;
        v5 = (WebCore::Document *)*((_QWORD *)v5 + 4);
        if (v5)
          v7 = v5 == a2;
        else
          v7 = 1;
        if (v7)
          goto LABEL_35;
      }
    }
    while (1)
    {
      WebCore::ImageAnalysisQueue::enqueueIfNeeded(this, v5);
      v8 = (WebCore::Document *)*((_QWORD *)v5 + 10);
      if (v8)
        goto LABEL_22;
      if (v5 == a2)
        break;
      while (1)
      {
        v8 = (WebCore::Document *)*((_QWORD *)v5 + 7);
        if (v8)
          break;
        v5 = (WebCore::Document *)*((_QWORD *)v5 + 4);
        if (v5)
          v9 = v5 == a2;
        else
          v9 = 1;
        if (v9)
          goto LABEL_35;
      }
LABEL_22:
      while (1)
      {
        v5 = v8;
        v10 = *((_WORD *)v8 + 14);
        if ((v10 & 0x10) != 0
          && *(_QWORD *)(*((_QWORD *)v5 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
        {
          break;
        }
        if ((v10 & 4) != 0)
        {
          v8 = (WebCore::Document *)*((_QWORD *)v5 + 10);
          if (v8)
            continue;
        }
        if (v5 == a2)
          goto LABEL_35;
        while (1)
        {
          v8 = (WebCore::Document *)*((_QWORD *)v5 + 7);
          if (v8)
            break;
          v5 = (WebCore::Document *)*((_QWORD *)v5 + 4);
          if (v5)
            v11 = v5 == a2;
          else
            v11 = 1;
          if (v11)
            goto LABEL_35;
        }
      }
    }
LABEL_35:
    v12 = (WebCore::Document *)*((_QWORD *)a2 + 10);
    if (v12)
    {
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v12 + 192))(*((_QWORD *)a2 + 10)) & 1) == 0)
      {
        while (1)
        {
          if ((*((_WORD *)v12 + 14) & 4) == 0 || (i = (WebCore::Document *)*((_QWORD *)v12 + 10)) == 0)
          {
            if (v12 == a2)
              return;
            while (1)
            {
              i = (WebCore::Document *)*((_QWORD *)v12 + 7);
              if (i)
                break;
              v12 = (WebCore::Document *)*((_QWORD *)v12 + 4);
              if (v12)
                v14 = v12 == a2;
              else
                v14 = 1;
              if (v14)
                return;
            }
          }
          v12 = i;
          if (((*(uint64_t (**)(WebCore::Document *))(*(_QWORD *)i + 192))(i) & 1) != 0)
            goto LABEL_49;
        }
      }
      i = v12;
      while (1)
      {
LABEL_49:
        v15 = *((_QWORD *)i + 14);
        if (v15)
        {
          v16 = *(_QWORD *)(v15 + 8);
          if (v16)
          {
            if (!*(_BYTE *)(v16 + 144))
            {
              v17 = *(_QWORD *)(v16 + 296);
              if (v17)
              {
                *(_DWORD *)(v17 + 24) += 2;
                WebCore::ImageAnalysisQueue::enqueueAllImagesRecursive(this, (WebCore::Document *)v17);
                if (*(_DWORD *)(v17 + 24) == 2)
                {
                  if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v17, v18);
                }
                else
                {
                  *(_DWORD *)(v17 + 24) -= 2;
                }
              }
            }
          }
        }
        v19 = (WebCore::Document *)*((_QWORD *)i + 10);
        if (!v19)
        {
          if (i == a2)
            return;
          while (1)
          {
            v19 = (WebCore::Document *)*((_QWORD *)i + 7);
            if (v19)
              break;
            i = (WebCore::Document *)*((_QWORD *)i + 4);
            if (i)
              v21 = i == a2;
            else
              v21 = 1;
            if (v21)
              return;
          }
        }
        for (i = v19; ((*(uint64_t (**)(WebCore::Document *))(*(_QWORD *)i + 192))(i) & 1) == 0; v19 = i)
        {
          if ((*((_WORD *)v19 + 14) & 4) != 0)
          {
            i = (WebCore::Document *)*((_QWORD *)v19 + 10);
            if (i)
              continue;
          }
          if (v19 == a2)
            return;
          while (1)
          {
            i = (WebCore::Document *)*((_QWORD *)v19 + 7);
            if (i)
              break;
            v19 = (WebCore::Document *)*((_QWORD *)v19 + 4);
            if (v19)
              v20 = v19 == a2;
            else
              v20 = 1;
            if (v20)
              return;
          }
        }
      }
    }
  }
}

uint64_t WebCore::ImageAnalysisQueue::setDidBecomeEmptyCallback(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::RunLoop *v5;
  WTF::RunLoop *v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  v3 = *a2;
  *a2 = 0;
  v4 = WTF::fastMalloc((WTF *)0x38);
  v5 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v5 = &off_1E33FEBA8;
  *((_QWORD *)v5 + 1) = v3;
  *(_QWORD *)v4 = v5;
  *(_QWORD *)(v4 + 8) = 0x3FF0000000000000;
  v6 = (WTF::RunLoop *)WTF::RunLoop::main(v5);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = off_1E3355738;
  v7[1] = PAL::HysteresisActivity::hysteresisTimerFired;
  v7[2] = 0;
  v7[3] = v4;
  result = WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)(v4 + 16), v6);
  *(_QWORD *)(v4 + 16) = off_1E32051C0;
  *(_QWORD *)(v4 + 40) = v7;
  *(_BYTE *)(v4 + 48) = 0;
  v9 = *(_QWORD **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v4;
  if (v9)
  {
    v9[2] = off_1E32051C0;
    v10 = v9[5];
    v9[5] = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)(v9 + 2));
    v12 = *v9;
    *v9 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    return WTF::fastFree((WTF *)v9, v11);
  }
  return result;
}

uint64_t WebCore::ImageAnalysisQueue::clearDidBecomeEmptyCallback(uint64_t this)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;

  v1 = *(_QWORD **)(this + 120);
  *(_QWORD *)(this + 120) = 0;
  if (v1)
  {
    v1[2] = off_1E32051C0;
    v2 = v1[5];
    v1[5] = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)(v1 + 2));
    v4 = *v1;
    *v1 = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return WTF::fastFree((WTF *)v1, v3);
  }
  return this;
}

uint64_t WebCore::ScrollView::isScrollView(WebCore::ScrollView *this)
{
  return 1;
}

uint64_t WebCore::ScrollView::ptrCount(WebCore::ScrollView *this)
{
  return *((unsigned int *)this + 34);
}

uint64_t WebCore::ScrollView::ptrCountWithoutThreadCheck(WebCore::ScrollView *this)
{
  return *((unsigned int *)this + 34);
}

uint64_t WebCore::ScrollView::incrementPtrCount(uint64_t this)
{
  ++*(_DWORD *)(this + 136);
  return this;
}

uint64_t WebCore::ScrollView::decrementPtrCount(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 136);
  if (v1)
  {
    *(_DWORD *)(this + 136) = v1 - 1;
  }
  else
  {
    this = 286;
    __break(0xC471u);
  }
  return this;
}

uint64_t WebCore::ScrollView::horizontalScrollbar(WebCore::ScrollView *this)
{
  return *((_QWORD *)this + 19);
}

uint64_t WebCore::ScrollView::verticalScrollbar(WebCore::ScrollView *this)
{
  return *((_QWORD *)this + 20);
}

uint64_t WebCore::ScrollView::horizontalScrollbarMode(WebCore::ScrollView *this)
{
  unsigned __int8 *v1;
  __int16 v3;

  if (*((_QWORD *)this + 5))
  {
    v3 = 0;
    WebCore::ScrollView::platformScrollbarModes((uint64_t)this, (uint64_t)&v3 + 1, (uint64_t)&v3);
    v1 = (unsigned __int8 *)&v3 + 1;
  }
  else
  {
    v1 = (unsigned __int8 *)this + 168;
  }
  return *v1;
}

uint64_t WebCore::ScrollView::verticalScrollbarMode(WebCore::ScrollView *this)
{
  unsigned __int8 *v1;
  __int16 v3;

  if (*((_QWORD *)this + 5))
  {
    v3 = 0;
    WebCore::ScrollView::platformScrollbarModes((uint64_t)this, (uint64_t)&v3 + 1, (uint64_t)&v3);
    v1 = (unsigned __int8 *)&v3;
  }
  else
  {
    v1 = (unsigned __int8 *)this + 169;
  }
  return *v1;
}

uint64_t WebCore::ScrollView::visibleSize(WebCore::ScrollView *this)
{
  uint64_t v1;

  (*(void (**)(char *, _QWORD, uint64_t))(*((_QWORD *)this + 8) + 832))((char *)this + 64, 0, 1);
  return v1;
}

uint64_t WebCore::ScrollView::scrollPosition(WebCore::ScrollView *this)
{
  return (*(uint64_t (**)(char *, _QWORD, uint64_t))(*((_QWORD *)this + 8) + 832))((char *)this + 64, 0, 1);
}

uint64_t `non-virtual thunk to'WebCore::ScrollView::ptrCount(WebCore::ScrollView *this)
{
  return *((unsigned int *)this + 18);
}

uint64_t `non-virtual thunk to'WebCore::ScrollView::ptrCountWithoutThreadCheck(WebCore::ScrollView *this)
{
  return *((unsigned int *)this + 18);
}

uint64_t `non-virtual thunk to'WebCore::ScrollView::incrementPtrCount(uint64_t this)
{
  ++*(_DWORD *)(this + 72);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::ScrollView::decrementPtrCount(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 72);
  if (v1)
  {
    *(_DWORD *)(this + 72) = v1 - 1;
  }
  else
  {
    this = 286;
    __break(0xC471u);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::ScrollView::isScrollView(WebCore::ScrollView *this)
{
  return 1;
}

uint64_t WebCore::ScrollableArea::isRenderLayer(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::isListBox(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::requestScrollToPosition()
{
  return 0;
}

uint64_t WebCore::ScrollableArea::requestStartKeyboardScrollAnimation()
{
  return 0;
}

uint64_t WebCore::ScrollableArea::requestStopKeyboardScrollAnimation(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::hasSteppedScrolling(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::horizontalNativeScrollbarVisibility(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::verticalNativeScrollbarVisibility(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::horizontalOverscrollBehavior(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::verticalOverscrollBehavior(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::scrollbarWidthStyle(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::scrollingNodeID(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::isVisibleToHitTesting(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::lastKnownMousePositionInView(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::isHandlingWheelEvent(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::useDarkAppearance(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::shouldSuspendScrollAnimations(WebCore::ScrollableArea *this)
{
  return 1;
}

uint64_t WebCore::ScrollableArea::isUserScrollInProgress(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::isRubberBandInProgress(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::isScrollSnapInProgress(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::usesCompositedScrolling(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::usesAsyncScrolling(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::layerForHorizontalScrollbar(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::layerForVerticalScrollbar(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::mockScrollbarsControllerEnabled(WebCore::ScrollableArea *this)
{
  return 0;
}

float WebCore::ScrollableArea::pageScaleFactor(WebCore::ScrollableArea *this)
{
  return 1.0;
}

float WebCore::ScrollableArea::deviceScaleFactor(WebCore::ScrollableArea *this)
{
  return 1.0;
}

uint64_t WebCore::ScrollableArea::needsAnimatedScroll(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::rootFrameID(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::layerForScrollCorner(WebCore::ScrollableArea *this)
{
  return 0;
}

unsigned int **WebCore::FocusCandidate::operator=(unsigned int **a1, _QWORD *a2)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  WTF *v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int *v32;

  v4 = (unsigned int *)*a2;
  if (*a2)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  v6 = *a1;
  *a1 = v4;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      v21 = v6[7];
      if ((_DWORD)v21)
      {
        v30 = v6;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v6 + 2), (WTF::StringImpl *)(*((_QWORD *)v6 + 2) + 32 * v21));
        v6 = v30;
      }
      v22 = (WTF *)*((_QWORD *)v6 + 2);
      if (v22)
      {
        *((_QWORD *)v6 + 2) = 0;
        v6[6] = 0;
        v27 = v6;
        WTF::fastFree(v22, a2);
        v6 = v27;
      }
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  v9 = (unsigned int *)a2[1];
  if (v9)
  {
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  v11 = a1[1];
  a1[1] = v9;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      v23 = v11[7];
      if ((_DWORD)v23)
      {
        v31 = v11;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v11 + 2), (WTF::StringImpl *)(*((_QWORD *)v11 + 2) + 32 * v23));
        v11 = v31;
      }
      v24 = (WTF *)*((_QWORD *)v11 + 2);
      if (v24)
      {
        *((_QWORD *)v11 + 2) = 0;
        v11[6] = 0;
        v28 = v11;
        WTF::fastFree(v24, a2);
        v11 = v28;
      }
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  v14 = (unsigned int *)a2[2];
  if (v14)
  {
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
  }
  v16 = a1[2];
  a1[2] = v14;
  if (v16)
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      v25 = v16[7];
      if ((_DWORD)v25)
      {
        v32 = v16;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v16 + 2), (WTF::StringImpl *)(*((_QWORD *)v16 + 2) + 32 * v25));
        v16 = v32;
      }
      v26 = (WTF *)*((_QWORD *)v16 + 2);
      if (v26)
      {
        *((_QWORD *)v16 + 2) = 0;
        v16[6] = 0;
        v29 = v16;
        WTF::fastFree(v26, a2);
        v16 = v29;
      }
      WTF::fastFree((WTF *)v16, a2);
    }
  }
  v19 = *(_OWORD *)(a2 + 3);
  *(_OWORD *)((char *)a1 + 38) = *(_OWORD *)((char *)a2 + 38);
  *(_OWORD *)(a1 + 3) = v19;
  return a1;
}

void WebCore::FocusCandidate::~FocusCandidate(WebCore::FocusCandidate *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v12 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v12)
      {
        v21 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v12));
        v3 = v21;
      }
      v13 = *(WTF **)(v3 + 16);
      if (v13)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v18 = v3;
        WTF::fastFree(v13, a2);
        v3 = v18;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      v14 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v14)
      {
        v22 = v6;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v14));
        v6 = v22;
      }
      v15 = *(WTF **)(v6 + 16);
      if (v15)
      {
        *(_QWORD *)(v6 + 16) = 0;
        *(_DWORD *)(v6 + 24) = 0;
        v19 = v6;
        WTF::fastFree(v15, a2);
        v6 = v19;
      }
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  v9 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v16 = *(unsigned int *)(v9 + 28);
      if ((_DWORD)v16)
      {
        v23 = v9;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v9 + 16), (WTF::StringImpl *)(*(_QWORD *)(v9 + 16) + 32 * v16));
        v9 = v23;
      }
      v17 = *(WTF **)(v9 + 16);
      if (v17)
      {
        *(_QWORD *)(v9 + 16) = 0;
        *(_DWORD *)(v9 + 24) = 0;
        v20 = v9;
        WTF::fastFree(v17, a2);
        v9 = v20;
      }
      WTF::fastFree((WTF *)v9, a2);
    }
  }
}

WebCore::ScopedFramePaintingState *WebCore::ScopedFramePaintingState::ScopedFramePaintingState(WebCore::ScopedFramePaintingState *this, WebCore::LocalFrameView **a2, WebCore::Node *a3)
{
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  *((_DWORD *)this + 4) = WebCore::LocalFrameView::paintBehavior(a2[36]);
  WebCore::LocalFrameView::baseBackgroundColor((uint64_t)a2[36], (_QWORD *)this + 3);
  return this;
}

void WebCore::ScopedFramePaintingState::~ScopedFramePaintingState(WebCore::ScopedFramePaintingState *this)
{
  void *v2;

  WebCore::LocalFrameView::setPaintBehavior(*(_QWORD *)(*(_QWORD *)this + 288), *((_DWORD *)this + 4));
  WebCore::LocalFrameView::setBaseBackgroundColor(*(WebCore::LocalFrameView **)(*(_QWORD *)this + 288), (WebCore::ScopedFramePaintingState *)((char *)this + 24));
  WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)(*(_QWORD *)(*(_QWORD *)this + 288) + 600), 0);
  WebCore::Color::~Color((WebCore::ScopedFramePaintingState *)((char *)this + 24), v2);
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::URL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::URL>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::URL,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = (uint64_t *)(a1 + 48 * i);
      v6 = *v5;
      if (*v5 != -1)
      {
        v7 = a1 + 48 * i;
        v8 = *(WTF::StringImpl **)(v7 + 8);
        *(_QWORD *)(v7 + 8) = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
          {
            WTF::StringImpl::destroy(v8, a2);
            v6 = *v5;
          }
          else
          {
            *(_DWORD *)v8 -= 2;
          }
        }
        *v5 = 0;
        if (v6)
        {
          do
          {
            v9 = __ldaxr((unsigned int *)v6);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, (unsigned int *)v6));
          if (!v10)
          {
            atomic_store(1u, (unsigned int *)v6);
            v11 = *(unsigned int *)(v6 + 28);
            if ((_DWORD)v11)
            {
              v14 = v6;
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v11));
              v6 = v14;
            }
            v12 = *(WTF **)(v6 + 16);
            if (v12)
            {
              *(_QWORD *)(v6 + 16) = 0;
              *(_DWORD *)(v6 + 24) = 0;
              v13 = v6;
              WTF::fastFree(v12, a2);
              v6 = v13;
            }
            WTF::fastFree((WTF *)v6, a2);
          }
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::WeakHashMap<WebCore::HTMLImageElement,WTF::URL,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  double v22;
  double v23;
  double v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;

  v2 = result;
  v3 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v4 = *(_DWORD *)(v3 - 4);
    if (!v4)
      goto LABEL_32;
    v5 = 0;
    do
    {
      v6 = (uint64_t *)(v3 + 48 * --v4);
      result = *v6;
      if ((unint64_t)(*v6 + 1) >= 2 && !*(_QWORD *)(result + 8))
      {
        *v6 = 0;
        do
        {
          v7 = __ldaxr((unsigned int *)result);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, (unsigned int *)result));
        if (!v8)
        {
          atomic_store(1u, (unsigned int *)result);
          v10 = *(unsigned int *)(result + 28);
          if ((_DWORD)v10)
          {
            v27 = result;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v10));
            result = v27;
          }
          v11 = *(WTF **)(result + 16);
          if (v11)
          {
            *(_QWORD *)(result + 16) = 0;
            *(_DWORD *)(result + 24) = 0;
            v26 = result;
            WTF::fastFree(v11, a2);
            result = v26;
          }
          WTF::fastFree((WTF *)result, a2);
        }
        *v6 = -1;
        v9 = v3 + 48 * v4;
        result = *(_QWORD *)(v9 + 8);
        *(_QWORD *)(v9 + 8) = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)result -= 2;
        }
        ++v5;
      }
    }
    while (v4);
    v3 = *(_QWORD *)v2;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      v12 = *(_QWORD *)v2;
      if (*(_QWORD *)v2)
        v13 = *(_DWORD *)(v12 - 12);
      else
        v13 = 0;
      *(_DWORD *)(v12 - 12) = v13 - v5;
      v3 = *(_QWORD *)v2;
    }
    if (v3)
    {
      v14 = *(_DWORD *)(v3 - 4);
      v15 = *(unsigned int *)(v3 - 12);
      if (v14 >= 9 && 6 * (int)v15 < v14)
      {
        v19 = (v15 - 1) | ((v15 - 1) >> 1) | ((((_DWORD)v15 - 1) | ((v15 - 1) >> 1)) >> 2);
        v20 = v19 | (v19 >> 4) | ((v19 | (v19 >> 4)) >> 8);
        v21 = (v20 | HIWORD(v20)) + 1;
        if (v21 > 0x400)
        {
          if (v21 > 2 * v15)
            goto LABEL_43;
        }
        else if (3 * v21 > 4 * v15)
        {
LABEL_41:
          v22 = (double)v15;
          v23 = (double)v21;
          v24 = 0.604166667;
          goto LABEL_44;
        }
        LODWORD(v21) = 2 * v21;
        if (v21 <= 0x400)
          goto LABEL_41;
LABEL_43:
        v22 = (double)v15;
        v23 = (double)v21;
        v24 = 0.416666667;
LABEL_44:
        if (v23 * v24 <= v22)
          LODWORD(v21) = 2 * v21;
        if (v21 <= 8)
          v25 = 8;
        else
          v25 = v21;
        result = WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::URL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::URL>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::URL,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)v2, v25);
        v3 = *(_QWORD *)v2;
        *(_DWORD *)(v2 + 8) = 0;
        if (!v3)
        {
          v17 = 0;
          goto LABEL_36;
        }
LABEL_33:
        v17 = *(_DWORD *)(v3 - 12);
        v18 = 0x7FFFFFFF;
        if (v17 >= 0x7FFFFFFF)
          goto LABEL_37;
        goto LABEL_36;
      }
LABEL_32:
      *(_DWORD *)(v2 + 8) = 0;
      goto LABEL_33;
    }
  }
  v17 = 0;
  *(_DWORD *)(v2 + 8) = 0;
LABEL_36:
  v18 = v17;
LABEL_37:
  *(_DWORD *)(v2 + 12) = 2 * v18;
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::URL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::URL>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::URL,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::URL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t result;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t *v27;
  unsigned int v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  _QWORD *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  WTF::StringImpl *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  WTF *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    v5 = *(_DWORD *)(v3 - 12);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(48 * a2 + 16));
  v8 = a1;
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    v9 = 0;
    v10 = v4;
    while (1)
    {
      v11 = (uint64_t *)(v3 + 48 * v9);
      v12 = *v11;
      if (*v11 != -1)
        break;
LABEL_34:
      if (++v9 == v10)
        return WTF::fastFree((WTF *)(v3 - 16), v7);
    }
    if (!v12)
    {
      v13 = v3 + 48 * v9;
      v14 = *(WTF::StringImpl **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
        {
          WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v7);
          v8 = a1;
          v12 = *v11;
        }
        else
        {
          *(_DWORD *)v14 -= 2;
        }
      }
      *v11 = 0;
      if (!v12)
        goto LABEL_34;
      do
      {
        v15 = __ldaxr((unsigned int *)v12);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, (unsigned int *)v12));
      if (v16)
        goto LABEL_34;
      atomic_store(1u, (unsigned int *)v12);
      v17 = *(unsigned int *)(v12 + 28);
      if ((_DWORD)v17)
      {
        v53 = v12;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (WTF::StringImpl *)(*(_QWORD *)(v12 + 16) + 32 * v17));
        v12 = v53;
      }
      v18 = *(WTF **)(v12 + 16);
      if (v18)
      {
        *(_QWORD *)(v12 + 16) = 0;
        *(_DWORD *)(v12 + 24) = 0;
        v51 = v12;
        WTF::fastFree(v18, v7);
        v12 = v51;
      }
      goto LABEL_18;
    }
    v19 = *v8;
    if (*v8)
      v20 = *(_DWORD *)(v19 - 8);
    else
      v20 = 0;
    v21 = (~(v12 << 32) + v12) ^ ((unint64_t)(~(v12 << 32) + v12) >> 22);
    v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
    v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
    v24 = v20 & ((v23 >> 31) ^ v23);
    v25 = 1;
    do
    {
      v26 = v24;
      v27 = (uint64_t *)(v19 + 48 * v24);
      v24 = (v24 + v25++) & v20;
    }
    while (*v27);
    v28 = v26;
    v29 = v19 + 48 * v26;
    v32 = *(WTF::StringImpl **)(v29 + 8);
    v31 = (_QWORD *)(v29 + 8);
    v30 = v32;
    *v31 = 0;
    if (v32)
    {
      if (*(_DWORD *)v30 == 2)
      {
        WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v7);
        v8 = a1;
        v44 = *v27;
        *v27 = 0;
        if (v44)
        {
          do
          {
            v45 = __ldaxr((unsigned int *)v44);
            v46 = v45 - 1;
          }
          while (__stlxr(v46, (unsigned int *)v44));
          if (!v46)
          {
            atomic_store(1u, (unsigned int *)v44);
            v47 = *(unsigned int *)(v44 + 28);
            if ((_DWORD)v47)
            {
              v56 = v44;
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v44 + 16), (WTF::StringImpl *)(*(_QWORD *)(v44 + 16) + 32 * v47));
              v44 = v56;
            }
            v48 = *(WTF **)(v44 + 16);
            if (v48)
            {
              *(_QWORD *)(v44 + 16) = 0;
              *(_DWORD *)(v44 + 24) = 0;
              v55 = v44;
              WTF::fastFree(v48, v7);
              v44 = v55;
            }
            WTF::fastFree((WTF *)v44, v7);
            v8 = a1;
          }
        }
        goto LABEL_28;
      }
      *(_DWORD *)v30 -= 2;
    }
    *v27 = 0;
LABEL_28:
    v33 = *v11;
    *v11 = 0;
    *v27 = v33;
    v34 = v3 + 48 * v9;
    v35 = *(_QWORD *)(v34 + 8);
    *(_QWORD *)(v34 + 8) = 0;
    *v31 = v35;
    v36 = v19 + 48 * v28;
    v37 = *(_DWORD *)(v36 + 16) & 0xFFFFFFFE | *(_DWORD *)(v34 + 16) & 1;
    *(_DWORD *)(v36 + 16) = v37;
    v38 = v37 & 0xFFFFFFFD | (2 * ((*(_DWORD *)(v34 + 16) >> 1) & 1));
    *(_DWORD *)(v36 + 16) = v38;
    v39 = v38 & 0xFFFFFFFB | (4 * ((*(_DWORD *)(v34 + 16) >> 2) & 1));
    *(_DWORD *)(v36 + 16) = v39;
    v40 = v39 & 0xFFFFFFC7 | (8 * ((*(_DWORD *)(v34 + 16) >> 3) & 7));
    *(_DWORD *)(v36 + 16) = v40;
    *(_DWORD *)(v36 + 16) = *(_DWORD *)(v34 + 16) & 0xFFFFFFC0 | v40 & 0x3F;
    *(_OWORD *)(v36 + 20) = *(_OWORD *)(v34 + 20);
    *(_QWORD *)(v36 + 36) = *(_QWORD *)(v34 + 36);
    *(_DWORD *)(v36 + 44) = *(_DWORD *)(v34 + 44);
    *(_DWORD *)(v34 + 16) &= ~1u;
    v41 = *(WTF::StringImpl **)(v34 + 8);
    *(_QWORD *)(v34 + 8) = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
      {
        WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v7);
        v8 = a1;
      }
      else
      {
        *(_DWORD *)v41 -= 2;
      }
    }
    v12 = *v11;
    *v11 = 0;
    if (!v12)
      goto LABEL_34;
    do
    {
      v42 = __ldaxr((unsigned int *)v12);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, (unsigned int *)v12));
    if (v43)
      goto LABEL_34;
    atomic_store(1u, (unsigned int *)v12);
    v49 = *(unsigned int *)(v12 + 28);
    if ((_DWORD)v49)
    {
      v54 = v12;
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (WTF::StringImpl *)(*(_QWORD *)(v12 + 16) + 32 * v49));
      v12 = v54;
    }
    v50 = *(WTF **)(v12 + 16);
    if (v50)
    {
      *(_QWORD *)(v12 + 16) = 0;
      *(_DWORD *)(v12 + 24) = 0;
      v52 = v12;
      WTF::fastFree(v50, v7);
      v12 = v52;
    }
LABEL_18:
    WTF::fastFree((WTF *)v12, v7);
    v8 = a1;
    goto LABEL_34;
  }
  if (v3)
    return WTF::fastFree((WTF *)(v3 - 16), v7);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ImageAnalysisQueue::setDidBecomeEmptyCallback(WTF::Function<void ()(void)> &&)::$_0,void,PAL::HysteresisState>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E33FEBA8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ImageAnalysisQueue::setDidBecomeEmptyCallback(WTF::Function<void ()(void)> &&)::$_0,void,PAL::HysteresisState>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33FEBA8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ImageAnalysisQueue::setDidBecomeEmptyCallback(WTF::Function<void ()(void)> &&)::$_0,void,PAL::HysteresisState>::call(uint64_t result, int a2)
{
  if (a2)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 8) + 16))(*(_QWORD *)(result + 8));
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::FocusController::*&)(void),WebCore::FocusController*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

BOOL WTF::Detail::CallableWrapper<WebCore::FrameTree::scopedChildByUniqueName(WTF::AtomString const&)::$_0,BOOL,WebCore::FrameTree const&>::call(uint64_t a1, WebCore::FrameTree *this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8;

  WebCore::FrameTree::uniqueName((uint64_t)this, this, (WTF::AtomString *)&v8);
  v4 = *(WTF::StringImpl ***)(a1 + 8);
  v5 = v8;
  v6 = *v4;
  v8 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v5 == v6;
}

BOOL WTF::Detail::CallableWrapper<WebCore::FrameTree::scopedChildBySpecifiedName(WTF::AtomString const&)::$_0,BOOL,WebCore::FrameTree const&>::call(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16) == **(_QWORD **)(a1 + 8);
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(uint64_t result, unsigned int a2, unsigned int a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD v12[3];

  v3 = (_QWORD *)result;
  v12[2] = *MEMORY[0x1E0C80C00];
  if ((a2 & 0x80000000) != 0)
  {
    v6 = 0;
  }
  else
  {
    result = WTF::tryFastCompactMalloc((WTF *)(a2 + 20));
    v6 = v12[0];
    if (v12[0])
    {
      v7 = 0;
      *(_DWORD *)v12[0] = 2;
      *(_DWORD *)(v6 + 4) = a2;
      *(_QWORD *)(v6 + 20) = *(_QWORD *)"<!--frame";
      *(_QWORD *)(v6 + 8) = v6 + 20;
      *(_DWORD *)(v6 + 16) = 4;
      *(_BYTE *)(v6 + 28) = 101;
      v8 = a3;
      do
      {
        *((_BYTE *)&v12[1] + v7-- + 4) = (v8 % 0xA) | 0x30;
        v9 = v8 > 9;
        v8 /= 0xAu;
      }
      while (v9);
      if (v7 + 14 <= 13)
        result = (uint64_t)memcpy((void *)(v6 + 29), (char *)&v12[1] + v7 + 5, -v7);
      v10 = 0;
      do
      {
        ++v10;
        v9 = a3 > 9;
        a3 /= 0xAu;
      }
      while (v9);
      v11 = v6 + 29 + v10;
      *(_BYTE *)(v11 + 2) = 62;
      *(_WORD *)v11 = 11565;
    }
  }
  *v3 = v6;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::ImageAnalysisQueue::*&)(void),WebCore::ImageAnalysisQueue*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

unint64_t WTF::Vector<WebCore::ImageAnalysisQueue::Task,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::ImageAnalysisQueue::Task,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::ImageAnalysisQueue::Task,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::ImageAnalysisQueue::Task,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  WTF *v15;

  if (*(unsigned int *)(result + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = (_QWORD *)result;
        v8 = (WTF *)((char *)v4 + 16 * v5);
        v9 = v4;
        do
        {
          v10 = *(_QWORD *)v9;
          *(_QWORD *)v9 = 0;
          *v7 = v10;
          v7[1] = *((_QWORD *)v9 + 1);
          v11 = *(_QWORD *)v9;
          *(_QWORD *)v9 = 0;
          if (v11)
          {
            do
            {
              v12 = __ldaxr((unsigned int *)v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, (unsigned int *)v11));
            if (!v13)
            {
              atomic_store(1u, (unsigned int *)v11);
              v14 = *(unsigned int *)(v11 + 28);
              if ((_DWORD)v14)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v11 + 16), (WTF::StringImpl *)(*(_QWORD *)(v11 + 16) + 32 * v14));
              v15 = *(WTF **)(v11 + 16);
              if (v15)
              {
                *(_QWORD *)(v11 + 16) = 0;
                *(_DWORD *)(v11 + 24) = 0;
                WTF::fastFree(v15, v6);
              }
              result = WTF::fastFree((WTF *)v11, v6);
            }
          }
          v7 += 2;
          v9 = (WTF *)((char *)v9 + 16);
        }
        while (v9 != v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t std::swap[abi:sn180100]<WebCore::ImageAnalysisQueue::Task>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *a1;
  v4 = a1[1];
  *a1 = 0;
  v6 = *a2;
  *a2 = 0;
  result = *a1;
  *a1 = v6;
  if (result)
  {
    do
    {
      v8 = __ldaxr((unsigned int *)result);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)result));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)result);
      v13 = *(unsigned int *)(result + 28);
      if ((_DWORD)v13)
      {
        v18 = result;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v13));
        result = v18;
      }
      v14 = *(WTF **)(result + 16);
      if (v14)
      {
        *(_QWORD *)(result + 16) = 0;
        *(_DWORD *)(result + 24) = 0;
        v17 = result;
        WTF::fastFree(v14, a2);
        result = v17;
      }
      result = WTF::fastFree((WTF *)result, a2);
    }
  }
  a1[1] = a2[1];
  v10 = *a2;
  *a2 = v5;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v15 = *(unsigned int *)(v10 + 28);
      if ((_DWORD)v15)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v10 + 16), (WTF::StringImpl *)(*(_QWORD *)(v10 + 16) + 32 * v15));
      v16 = *(WTF **)(v10 + 16);
      if (v16)
      {
        *(_QWORD *)(v10 + 16) = 0;
        *(_DWORD *)(v10 + 24) = 0;
        WTF::fastFree(v16, a2);
      }
      result = WTF::fastFree((WTF *)v10, a2);
    }
  }
  a2[1] = v4;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ImageAnalysisQueue::resumeProcessing(void)::$_0,void,WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E33FEC80;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ImageAnalysisQueue::resumeProcessing(void)::$_0,void,WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E33FEC80;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::MonotonicTime *WTF::Detail::CallableWrapper<WebCore::ImageAnalysisQueue::resumeProcessing(void)::$_0,void,WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&>::call(WTF::MonotonicTime *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  double v5;
  _BYTE *v6;

  v1 = *((_QWORD *)result + 2);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *((_QWORD *)result + 1);
      if (*(_QWORD *)(v2 + 1216) == v3)
      {
        v4 = *(_DWORD *)(v3 + 112);
        if (v4)
          *(_DWORD *)(v3 + 112) = v4 - 1;
        if (!*(_DWORD *)(v3 + 108)
          || ((*(_QWORD *)(v3 + 56) & 0xFFFFFFFFFFFFLL) == 0
           || *(double *)((*(_QWORD *)(v3 + 56) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
          && (*(_QWORD *)(v3 + 48) = 0,
              WTF::MonotonicTime::now(result),
              result = (WTF::MonotonicTime *)WebCore::TimerBase::setNextFireTime(v3 + 24, v5 + 0.1),
              !*(_DWORD *)(v3 + 108)))
        {
          v6 = *(_BYTE **)(v3 + 120);
          if (v6 && !v6[48])
          {
            if ((WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(v6 + 16)) & 1) == 0)
            {
              v6[48] = 1;
              (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v6 + 16))(*(_QWORD *)v6, 0);
              v6[48] = 0;
            }
            return (WTF::MonotonicTime *)WTF::RunLoop::TimerBase::start();
          }
        }
      }
    }
  }
  return result;
}

WebCore::ImageOverlayController *WebCore::ImageOverlayController::ImageOverlayController(WebCore::ImageOverlayController *this, WebCore::Page *a2)
{
  uint64_t v3;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)this = off_1E33FECA8;
  v3 = *((_QWORD *)a2 + 2);
  if (v3)
    goto LABEL_11;
  v3 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 8) = a2;
  v6 = (unsigned int *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v3;
  if (!v6)
    goto LABEL_11;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  v3 = *((_QWORD *)a2 + 2);
  if (v3)
  {
LABEL_11:
    do
      v9 = __ldaxr((unsigned int *)v3);
    while (__stlxr(v9 + 1, (unsigned int *)v3));
  }
  *((_QWORD *)this + 1) = v3;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 8) = 0x1104000000000000;
  return this;
}

int8x8_t WebCore::LayoutRect::LayoutRect(int8x8_t *this, int32x2_t *a2)
{
  int8x8_t v2;
  int32x2_t v3;
  int8x8_t v4;
  int8x8_t result;

  v2 = (int8x8_t)vcgt_s32(*a2, (int32x2_t)0xFE000000FE000000);
  *this = vorr_s8((int8x8_t)(*(_QWORD *)&v2 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, *a2), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(*a2, 6uLL)), v2));
  v3 = a2[1];
  v4 = (int8x8_t)vcgt_s32(v3, (int32x2_t)0xFE000000FE000000);
  result = vorr_s8((int8x8_t)(*(_QWORD *)&v4 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, v3), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(v3, 6uLL)), v4));
  this[1] = result;
  return result;
}

WebCore::ImageOverlayController *WebCore::ImageOverlayController::documentDetached(WebCore::ImageOverlayController *this, const WebCore::Document *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  WebCore::ImageOverlayController *v9;
  WTF *v10;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
    return (WebCore::ImageOverlayController *)WebCore::ImageOverlayController::uninstallPageOverlay(this, a2);
  v3 = *(_QWORD *)(v2 + 8);
  if (v3)
  {
    if (*(const WebCore::Document **)(*(_QWORD *)(v3 + 40) + 8) == a2)
    {
      *((_QWORD *)this + 3) = 0;
      do
      {
        v4 = __ldaxr((unsigned int *)v2);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, (unsigned int *)v2));
      if (!v5)
      {
        v9 = this;
        v10 = (WTF *)v2;
        atomic_store(1u, (unsigned int *)v2);
        v7 = *(unsigned int *)(v2 + 28);
        if ((_DWORD)v7)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v10 + 2), (WTF::StringImpl *)(*((_QWORD *)v10 + 2) + 32 * v7));
        v8 = (WTF *)*((_QWORD *)v10 + 2);
        if (v8)
        {
          *((_QWORD *)v10 + 2) = 0;
          *((_DWORD *)v10 + 6) = 0;
          WTF::fastFree(v8, a2);
        }
        WTF::fastFree(v10, a2);
        this = v9;
      }
    }
  }
  v6 = *((_QWORD *)this + 3);
  if (!v6 || !*(_QWORD *)(v6 + 8))
    return (WebCore::ImageOverlayController *)WebCore::ImageOverlayController::uninstallPageOverlay(this, a2);
  return this;
}

uint64_t WebCore::ImageOverlayController::uninstallPageOverlay(WebCore::ImageOverlayController *this, void *a2)
{
  uint64_t result;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::PageOverlay *v8;
  uint64_t *v9;
  uint64_t v10;
  WTF *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;

  result = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)result));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)result);
      v10 = *(unsigned int *)(result + 28);
      if ((_DWORD)v10)
      {
        v17 = result;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v10));
        result = v17;
      }
      v11 = *(WTF **)(result + 16);
      if (v11)
      {
        *(_QWORD *)(result + 16) = 0;
        *(_DWORD *)(result + 24) = 0;
        v14 = result;
        WTF::fastFree(v11, a2);
        result = v14;
      }
      result = WTF::fastFree((WTF *)result, a2);
    }
  }
  if (*((_DWORD *)this + 10))
  {
    if (*((_DWORD *)this + 11))
      *((_DWORD *)this + 11) = 0;
    result = *((_QWORD *)this + 4);
    if (result)
    {
      *((_QWORD *)this + 4) = 0;
      *((_DWORD *)this + 10) = 0;
      result = WTF::fastFree((WTF *)result, a2);
    }
  }
  v6 = *((_QWORD *)this + 8);
  if (v6 != 0x1104000000000000)
  {
    if ((v6 & 0x8000000000000) != 0)
    {
      result = v6 & 0xFFFFFFFFFFFFLL;
      do
      {
        v15 = __ldaxr((unsigned int *)result);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, (unsigned int *)result));
      if (!v16)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, a2);
      }
    }
    *((_QWORD *)this + 8) = 0x1104000000000000;
  }
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  v7 = *((_QWORD *)this + 1);
  v8 = (WebCore::PageOverlay *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7 && (v9 = *(uint64_t **)(v7 + 8)) != 0)
  {
    if (!v8)
      return result;
    ++*(_DWORD *)v9;
    WebCore::PageOverlayController::uninstallPageOverlay(v9[154], (uint64_t)v8, 0);
    result = (uint64_t)WTF::RefCounted<WebCore::Page>::deref((WebCore::Page *)v9);
  }
  else if (!v8)
  {
    return result;
  }
  if (*((_DWORD *)v8 + 2) == 1)
  {
    WebCore::PageOverlay::~PageOverlay(v8, a2);
    return WTF::fastFree(v12, v13);
  }
  else
  {
    --*((_DWORD *)v8 + 2);
  }
  return result;
}

WebCore::ImageOverlayController *WebCore::ImageOverlayController::willMoveToPage(WebCore::ImageOverlayController *this, void *a2, WebCore::Page *a3)
{
  if (!a3)
    return (WebCore::ImageOverlayController *)WebCore::ImageOverlayController::uninstallPageOverlay(this, a2);
  return this;
}

uint64_t WebCore::ImageOverlayController::drawRect(uint64_t this, WebCore::PageOverlay *a2, WebCore::GraphicsContext *a3, const WebCore::IntRect *a4)
{
  int32x4_t *v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  float v15[2];
  _OWORD v16[3];
  int v17;
  int v18;
  int v19;
  _BYTE v20[32];
  __int128 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (*(WebCore::PageOverlay **)(this + 16) != a2)
    return this;
  v6 = (int32x4_t *)this;
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a3 + 96))(a3, 1);
  v7 = (float)*((int *)a4 + 1);
  v15[0] = (float)*(int *)a4;
  v15[1] = v7;
  v8 = (float)*((int *)a4 + 3);
  *(float *)v16 = (float)*((int *)a4 + 2);
  *((float *)v16 + 1) = v8;
  (*(void (**)(WebCore::GraphicsContext *, float *))(*(_QWORD *)a3 + 280))(a3, v15);
  v9 = v6[2].u32[3];
  if (!(_DWORD)v9)
    return (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a3 + 104))(a3, 1);
  v19 = 0;
  v10 = v6[2].i64[0];
  v11 = v10 + 32 * v9;
  do
  {
    WebCore::Path::moveTo((WebCore::Path *)v15, (const WebCore::FloatPoint *)v10);
    WebCore::Path::addLineTo((uint64_t)v15, (const WebCore::FloatPoint *)(v10 + 8));
    WebCore::Path::addLineTo((uint64_t)v15, (const WebCore::FloatPoint *)(v10 + 16));
    WebCore::Path::addLineTo((uint64_t)v15, (const WebCore::FloatPoint *)(v10 + 24));
    WebCore::Path::addLineTo((uint64_t)v15, (const WebCore::FloatPoint *)v10);
    v12 = v19;
    if (v19 == 2)
    {
      if (!*(_QWORD *)&v16[0])
        goto LABEL_21;
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)&v16[0] + 200))(*(_QWORD *)&v16[0]) & 1) != 0)
        goto LABEL_22;
      v12 = v19;
    }
    else if (!v19)
    {
      goto LABEL_22;
    }
    if (v12 == 2)
    {
      if (*(_QWORD *)&v16[0])
      {
        if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)&v16[0] + 208))(*(_QWORD *)&v16[0]) & 1) != 0)
          goto LABEL_22;
        if (v19 == 1)
        {
          v13 = v18;
LABEL_19:
          if (v13 == 5)
          {
            *(_OWORD *)v20 = v16[0];
            *(_QWORD *)&v20[13] = *(_QWORD *)((char *)v16 + 13);
            v16[1] = *(_OWORD *)&v20[16];
            v16[2] = v21;
            v17 = v22;
            v16[0] = *(_OWORD *)v20;
            v18 = 6;
            goto LABEL_22;
          }
        }
      }
LABEL_21:
      v14 = WebCore::Path::ensureImpl((WebCore::Path *)v15);
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 120))(v14);
      goto LABEL_22;
    }
    if (v12 != 1)
      goto LABEL_21;
    v13 = v18;
    if (v18 != 6 && v18 != 15)
      goto LABEL_19;
LABEL_22:
    v10 += 32;
  }
  while (v10 != v11);
  WebCore::GraphicsContext::setFillColor(a3, (const WebCore::Color *)&v6[4]);
  *(float32x4_t *)v20 = vmulq_f32(vcvtq_f32_s32(v6[3]), (float32x4_t)vdupq_n_s32(0x3C800000u));
  (*(void (**)(WebCore::GraphicsContext *, _BYTE *))(*(_QWORD *)a3 + 456))(a3, v20);
  (*(void (**)(WebCore::GraphicsContext *, float *))(*(_QWORD *)a3 + 176))(a3, v15);
  if (v19 != -1)
    ((void (*)(_BYTE *, _OWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_3[v19])(v20, v16);
  return (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a3 + 104))(a3, 1);
}

uint64_t WebCore::ImageOverlayController::hasActiveDataDetectorHighlightForTesting(WebCore::ImageOverlayController *this)
{
  return 0;
}

void WebCore::InteractionRegion::~InteractionRegion(WebCore::InteractionRegion *this)
{
  uint64_t v2;
  char v3;

  if (*((_BYTE *)this + 112))
  {
    v2 = *((unsigned int *)this + 26);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_3[v2])(&v3, (char *)this + 48);
    *((_DWORD *)this + 26) = -1;
  }
}

{
  uint64_t v2;
  char v3;

  if (*((_BYTE *)this + 112))
  {
    v2 = *((unsigned int *)this + 26);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_3[v2])(&v3, (char *)this + 48);
    *((_DWORD *)this + 26) = -1;
  }
}

void WebCore::interactionRegionForRenderedRegion(uint64_t a1@<X0>, float32x2_t *a2@<X1>, float *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  int v11;
  __int16 v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  BOOL v18;
  BOOL v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  BOOL v49;
  unsigned int *v50;
  unsigned int v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  unint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  unsigned int v59;
  unint64_t v60;
  unint64_t v61;
  float v62;
  float v63;
  int *v64;
  char v65;
  WebCore::Node *v66;
  uint64_t *v67;
  uint64_t *v68;
  int v69;
  float64_t v70;
  int *v71;
  int v72;
  _BOOL4 v73;
  uint64_t v74;
  uint64_t v75;
  WebCore::Node *v76;
  int v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  int v83;
  unsigned int v84;
  BOOL v85;
  int v86;
  int v87;
  uint64_t v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  int v92;
  unsigned int v93;
  int v94;
  unsigned int v95;
  int v96;
  int v97;
  unsigned int v98;
  uint64_t v99;
  unsigned int v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  float64x2_t *v107;
  float64_t v108;
  _QWORD *v109;
  BOOL v110;
  uint64_t v111;
  const WebCore::CSSSelector *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  _DWORD *v117;
  char v118;
  uint64_t v119;
  void *v120;
  BOOL v121;
  void *v122;
  int v123;
  float64_t v124;
  uint64_t v125;
  WTF::StringImpl *v126;
  uint64_t v127;
  uint64_t v128;
  WTF::StringImpl **v129;
  WTF::StringImpl *v130;
  uint64_t *v132;
  WebCore::Node *v133;
  float32x2_t v134;
  float32x2_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  float64_t v143;
  int *v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  float64_t v148;
  uint64_t v149;
  int v151;
  float64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  BOOL v156;
  int v157;
  float64_t v158;
  uint64_t v159;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  BOOL v164;
  int v165;
  uint64_t v166;
  int v167;
  int v168;
  BOOL v169;
  uint64_t v170;
  uint64_t v171;
  WTF *v172;
  WTF *v173;
  char v174;
  uint64_t v175;
  int *v176;
  unint64_t v177;
  unint64_t v178;
  float64_t v179;
  uint64_t v180;
  uint64_t i;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  BOOL v186;
  int v187;
  float64_t v188;
  uint64_t v189;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  BOOL v194;
  int v195;
  char v196;
  float v197;
  float v198;
  double v199;
  int v200;
  double v201;
  int *v202;
  int v203;
  float v204;
  unsigned int v205;
  int v206;
  float v207;
  float v208;
  float64_t v209;
  int v210;
  int v211;
  int v212;
  int v213;
  int v214;
  int v215;
  int v216;
  int v217;
  int v218;
  char v219;
  float v220;
  void *v221;
  float v222;
  float v223;
  int v224;
  float v225;
  float v226;
  float32x2_t v227;
  __int32 v228;
  float v229;
  float v230;
  uint64_t v231;
  uint64_t v232;
  _BOOL4 v233;
  float v234;
  float v235;
  uint64_t v236;
  int v237;
  __int16 v238;
  uint64_t *v239;
  uint64_t v240;
  float64x2_t *v241;
  int v242;
  int v243;
  BOOL v245;
  BOOL v247;
  BOOL v249;
  BOOL v250;
  char v251;
  BOOL v252;
  char v253;
  char v254;
  uint64_t v255;
  __n128 v256;
  float v257;
  float v258;
  float v259;
  char v260;
  float v261;
  float v262;
  char v263;
  int v264;
  uint64_t v265;
  float v266;
  double v267;
  float32x2_t v268;
  int v269;
  float64x2_t v270;
  float64x2_t v271;
  int v272;
  unsigned int v273;
  unsigned int v274;
  _QWORD *v275;
  float64_t v276;
  float v277;
  float v278;
  float v279;
  int v280;
  const WTF::String *v281;
  uint64_t v282;
  unsigned int v283;
  uint64_t v284;
  uint64_t v285;
  WebCore::AccessibilityObject *v286;
  uint64_t v287;
  int v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  int *v293;
  uint64_t v294;
  uint64_t v295;
  double v296;
  CGFloat v297;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  unsigned int v301;
  unsigned int v302;
  float MaxX;
  unsigned int v304;
  float MaxY;
  unsigned int *v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  float *v314;
  uint64_t v315;
  uint64_t v316;
  char v317;
  float64x2_t *v318;
  float32x2_t *v319;
  char v320;
  int v321;
  int v322;
  WebCore::Node *v323;
  char v324;
  uint64_t v325;
  int v326;
  unint64_t v327;
  float v328;
  float v329;
  uint64_t v330;
  float64x2_t v331;
  uint64_t v332;
  uint64_t v333;
  double v334;
  double v335;
  uint64_t v336;
  float64x2_t *v337;
  float64x2_t v338;
  uint64_t *v339;
  uint64_t v340;
  float64x2_t v341;
  int v342;
  unsigned __int8 v343;
  float64x2_t v344[3];
  __int16 v345;
  char v346;
  int v347;
  _BYTE v348[24];
  int v349;
  uint64_t *v350;
  uint64_t v351;
  uint64_t v352;
  int v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  char v357;
  uint64_t v358;
  _DWORD *v359;
  uint64_t v360;
  _DWORD v361[34];
  float64x2_t *v362;
  int v363;
  unsigned int v364;
  uint64_t v365;
  int v366;
  unsigned __int8 v367;
  uint64_t v368;
  CGRect v369;
  CGRect v370;

  v368 = *MEMORY[0x1E0C80C00];
  if (a2[1].f32[0] <= 0.0)
    goto LABEL_740;
  if (a2[1].f32[1] <= 0.0)
    goto LABEL_740;
  v7 = a1;
  if ((*(_BYTE *)(a1 + 45) & 1) != 0)
    goto LABEL_740;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if (!v8)
    goto LABEL_740;
  v11 = *(unsigned __int16 *)(v8 + 28);
  if ((v11 & 8) != 0)
  {
    if ((~v11 & 0x408) != 0)
    {
      v12 = *(_WORD *)(v8 + 28);
    }
    else
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 368))(v8))
        goto LABEL_740;
      v12 = *(_WORD *)(v8 + 28);
    }
    v325 = v8;
  }
  else
  {
    v8 = *(_QWORD *)(v8 + 32);
    if (!v8)
      goto LABEL_740;
    v12 = *(_WORD *)(v8 + 28);
    if ((v12 & 8) == 0)
      goto LABEL_740;
    v325 = 0;
  }
  v324 = v11;
  if ((v12 & 0x10) != 0)
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 1192))(v8);
  else
    v13 = 0;
  v14 = &WebCore::HTMLNames::buttonTag;
  v15 = v8;
  while (1)
  {
    v16 = *(_WORD *)(v15 + 28);
    if ((v16 & 8) == 0)
      goto LABEL_27;
    if ((v16 & 0x10) == 0)
    {
      v18 = 0;
LABEL_23:
      v19 = 0;
      goto LABEL_24;
    }
    v17 = *(_QWORD *)(*(_QWORD *)(v15 + 96) + 24);
    v18 = v17 == *(_QWORD *)(WebCore::HTMLNames::buttonTag + 24);
    if (!v13)
      goto LABEL_23;
    v19 = v17 == *(_QWORD *)(WebCore::HTMLNames::labelTag + 24);
LABEL_24:
    if (v18 || v19 || (*(_WORD *)(v15 + 30) & 1) != 0)
      break;
LABEL_27:
    v21 = (uint64_t *)(v15 + 32);
    v20 = *(_QWORD *)(v15 + 32);
    if (v20)
    {
      if ((*(_WORD *)(v20 + 28) & 8) != 0)
      {
        v22 = *(_QWORD *)(v20 + 72) & 0xFFFFFFFFFFFFLL;
        if (v22)
        {
          v24 = *(_QWORD *)(v22 + 88);
          if (v24)
          {
            v25 = *(_QWORD *)(v24 + 224);
            if (v25)
            {
              v23 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v15);
              v14 = &WebCore::HTMLNames::buttonTag;
              if (v23)
                goto LABEL_32;
              v16 = *(_WORD *)(v15 + 28);
            }
          }
        }
      }
    }
    if ((v16 & 0x80) != 0)
    {
      v26 = *(_QWORD *)(v15 + 200);
      if (v26)
      {
        v21 = (uint64_t *)(v26 + 8);
        goto LABEL_31;
      }
LABEL_40:
      v16 = *(_WORD *)(v8 + 28);
      if ((v16 & 0x10) == 0)
        goto LABEL_48;
LABEL_43:
      v27 = *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24);
      if (v27 != *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
      {
        if (v27 != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
          goto LABEL_48;
        if ((*(_BYTE *)(v8 + 160) & 0x18) == 0)
        {
          v28 = *(_DWORD *)(*(_QWORD *)(v8 + 240) + 12);
          if (v28 != 0x2000 && v28 != 64)
            goto LABEL_48;
        }
      }
LABEL_740:
      *(_BYTE *)a5 = 0;
      *(_BYTE *)(a5 + 120) = 0;
      return;
    }
LABEL_31:
    v23 = *v21;
LABEL_32:
    v15 = v23;
    if (!v23)
      goto LABEL_40;
  }
  v8 = v15;
  if ((v16 & 0x10) != 0)
    goto LABEL_43;
LABEL_48:
  if ((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_740;
  if ((*(_BYTE *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195FD5BB0);
  }
  v29 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x18) + 8);
  v30 = *(_QWORD *)(*(_QWORD *)(v29 + 40) + 8);
  if (*(_BYTE *)(v30 + 3441))
  {
    if (*(_QWORD *)(v30 + 1272) != v29)
      goto LABEL_740;
  }
  v31 = *(_QWORD *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x68);
  if ((*(_BYTE *)(v31 + 239) & 1) != 0 || (*(_WORD *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x7C) & 0x3C0) == 0)
    goto LABEL_740;
  v317 = *(_BYTE *)(v31 + 241);
  v323 = (WebCore::Node *)(*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL);
  v32 = (*((_DWORD *)v323 + 30) >> 19) & 0x3F;
  v319 = a2;
  v316 = a4;
  if (v32 <= 0xC)
  {
    v33 = 1;
    if (((1 << v32) & 0x1610) != 0)
      goto LABEL_85;
    if (!v32)
    {
      v34 = v7;
      v35 = a5;
      v36 = v8;
      while (1)
      {
        v37 = *(_WORD *)(v36 + 28);
        if ((v37 & 8) != 0
          && (*(_WORD *)(v36 + 30) & 1) != 0
          && ((v37 & 0x10) == 0
           || *(_QWORD *)(*(_QWORD *)(v36 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::imgTag + 24)))
        {
          v33 = 1;
          a5 = v35;
          v7 = v34;
          goto LABEL_85;
        }
        v39 = (uint64_t *)(v36 + 32);
        v38 = *(_QWORD *)(v36 + 32);
        if (v38)
        {
          if ((*(_WORD *)(v38 + 28) & 8) != 0)
          {
            v40 = *(_QWORD *)(v38 + 72) & 0xFFFFFFFFFFFFLL;
            if (v40)
            {
              v42 = *(_QWORD *)(v40 + 88);
              if (v42)
              {
                v43 = *(_QWORD *)(v42 + 224);
                if (v43)
                {
                  v44 = v14;
                  v41 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v43 + 16))(v43, v36);
                  v14 = v44;
                  if (v41)
                    goto LABEL_64;
                  v37 = *(_WORD *)(v36 + 28);
                }
              }
            }
          }
        }
        if ((v37 & 0x80) != 0)
        {
          v45 = *(_QWORD *)(v36 + 200);
          if (!v45)
          {
LABEL_75:
            v16 = *(_WORD *)(v8 + 28);
            a5 = v35;
            v7 = v34;
            break;
          }
          v39 = (uint64_t *)(v45 + 8);
        }
        v41 = *v39;
LABEL_64:
        v36 = v41;
        if (!v41)
          goto LABEL_75;
      }
    }
  }
  if ((v16 & 0x10) != 0
    && (v16 & 0x110) != 0x110
    && *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::attachmentTag + 24))
  {
    v33 = 1;
    goto LABEL_85;
  }
  v46 = v14;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 872))(v8))
  {
    *(_DWORD *)(v8 + 24) += 2;
    if ((*(_BYTE *)(v8 + 54) & 2) != 0
      && WebCore::Element::isUserActionElementFocused((WebCore::Element *)v8)
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 880))(v8)
      && (*(_BYTE *)(v8 + 169) & 4) != 0
      && ((*(void (**)(float64x2_t *__return_ptr, uint64_t))(*(_QWORD *)v8 + 1392))(v344, v8),
          v152 = v344[0].f64[0],
          *(_QWORD *)&v344[0].f64[0]))
    {
      v33 = *(_DWORD *)(*(_QWORD *)&v344[0].f64[0] + 4) == 0;
      v344[0].f64[0] = 0.0;
      if (**(_DWORD **)&v152 == 2)
        WTF::StringImpl::destroy(*(WTF::StringImpl **)&v152, v47);
      else
        **(_DWORD **)&v152 -= 2;
    }
    else
    {
      v33 = 1;
    }
    if (*(_DWORD *)(v8 + 24) != 2)
    {
      v14 = v46;
      *(_DWORD *)(v8 + 24) -= 2;
      goto LABEL_85;
    }
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v47);
    goto LABEL_280;
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 848))(v8) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 944))(v8) & 1) != 0
    || (*(_WORD *)(v8 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::aTag + 24))
  {
    v33 = 1;
LABEL_280:
    v14 = v46;
    goto LABEL_85;
  }
  v282 = *(_QWORD *)(v8 + 104);
  if (v282
    && ((v283 = *(_DWORD *)(v282 + 4), (v283 & 1) != 0)
      ? (v284 = *(_QWORD *)(v282 + 40), LODWORD(v285) = *(_DWORD *)(v282 + 52))
      : (v284 = v282 + 32, LODWORD(v285) = v283 >> 5),
        (_DWORD)v285))
  {
    v285 = v285;
    v286 = (WebCore::AccessibilityObject *)(v284 + 8);
    while (1)
    {
      v287 = *((_QWORD *)v286 - 1);
      if (v287 == WebCore::HTMLNames::roleAttr
        || *(_QWORD *)(v287 + 24) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 24)
        && *(_QWORD *)(v287 + 32) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 32))
      {
        break;
      }
      v286 = (WebCore::AccessibilityObject *)((char *)v286 + 16);
      if (!--v285)
      {
        v286 = (WebCore::AccessibilityObject *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v286 = (WebCore::AccessibilityObject *)MEMORY[0x1E0CBF2F8];
  }
  v288 = WebCore::AccessibilityObject::ariaRoleToWebCoreRole(v286, v281);
  v33 = 1;
  if ((v288 - 84) <= 0x37 && ((1 << (v288 - 84)) & 0x81040020000011) != 0)
    goto LABEL_280;
  v14 = v46;
  if ((v288 - 10) > 0x3A || ((1 << (v288 - 10)) & 0x480020000000011) == 0)
    v33 = (v288 - 75) < 4;
LABEL_85:
  v314 = a3;
  v48 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8)
                                                                              + 40)
                                                                  + 8)
                                                      + 528)
                                          + 8)
                              + 128)
                  + 8);
  if (v48)
    v49 = *(_BYTE *)(v48 + 144) == 0;
  else
    v49 = 0;
  if (!v49)
    goto LABEL_740;
  v50 = (unsigned int *)(v48 + 8);
  do
    v51 = __ldaxr(v50);
  while (__stlxr(v51 + 1, v50));
  v52 = *(int **)(v48 + 288);
  if (!v52)
  {
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 120) = 0;
    goto LABEL_655;
  }
  ++v52[2];
  v53 = *(_QWORD *)(*((_QWORD *)v52 + 41) + 296);
  if (v53 && (v54 = *(_QWORD *)(v53 + 1944)) != 0)
  {
    v57 = v14;
    v56 = *(_QWORD *)(v54 + 160);
    v61 = v56 & 0xFFFFFFFF00000000;
  }
  else
  {
    v55 = (void *)*((_QWORD *)v52 + 5);
    if (v55)
    {
      v293 = v52;
      v294 = v7;
      v295 = a5;
      if (objc_msgSend(*((id *)v52 + 5), "conformsToProtocol:", &unk_1EE342188))
        v55 = (void *)objc_msgSend(v55, "superview");
      objc_msgSend(v55, "frame");
      v297 = v296;
      y = v369.origin.y;
      width = v369.size.width;
      height = v369.size.height;
      *(float *)&v296 = v296;
      v301 = vcvtms_s32_f32(*(float *)&v296);
      *(float *)&v296 = v369.origin.y;
      v302 = vcvtms_s32_f32(*(float *)&v296);
      v369.origin.x = v297;
      MaxX = CGRectGetMaxX(v369);
      v304 = vcvtps_s32_f32(MaxX);
      v370.origin.x = v297;
      v370.origin.y = y;
      v370.size.width = width;
      v370.size.height = height;
      MaxY = CGRectGetMaxY(v370);
      v56 = (v304 - v301) | ((unint64_t)(vcvtps_s32_f32(MaxY) - v302) << 32);
      a5 = v295;
      v7 = v294;
      v52 = v293;
      v14 = &WebCore::HTMLNames::buttonTag;
    }
    else
    {
      v56 = *((_QWORD *)v52 + 7);
    }
    v57 = v14;
    v58 = HIDWORD(v56);
    v59 = (_DWORD)v56 << 6;
    if ((int)v56 < -33554432)
      v59 = 0x80000000;
    v250 = (int)v56 <= 0x1FFFFFF;
    LODWORD(v56) = 0x7FFFFFFF;
    if (v250)
      LODWORD(v56) = v59;
    v60 = v58 << 38;
    if ((int)v58 < -33554432)
      v60 = 0x8000000000000000;
    v250 = (int)v58 <= 0x1FFFFFF;
    v61 = 0x7FFFFFFF00000000;
    if (v250)
      v61 = v60;
  }
  v62 = (float)((float)(int)(v61 | v56) * 0.015625) * (float)((float)SHIDWORD(v61) * 0.015625);
  v63 = v319[1].f32[0] * v319[1].f32[1];
  v315 = WebCore::Element::identifier((WebCore::Element *)v8);
  if (v33)
  {
    v65 = 1;
    v66 = v323;
    v67 = v57;
    goto LABEL_227;
  }
  v66 = v323;
  if ((*(_WORD *)(v8 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::labelTag + 24))
  {
    v71 = v52;
    goto LABEL_120;
  }
  v68 = v57;
  WebCore::HTMLLabelElement::control(v8, (uint64_t *)v344);
  if (!*(_QWORD *)&v344[0].f64[0])
    goto LABEL_117;
  v69 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v344[0].f64[0] + 960))(*(_QWORD *)&v344[0].f64[0]);
  if ((v69 & 1) == 0)
    v315 = WebCore::Element::identifier(*(WebCore::Element **)&v344[0].f64[0]);
  v70 = v344[0].f64[0];
  v344[0].f64[0] = 0.0;
  if (v70 == 0.0)
    goto LABEL_747;
  if (*(_DWORD *)(*(_QWORD *)&v70 + 24) == 2)
  {
    if ((*(_WORD *)(*(_QWORD *)&v70 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(*(WebCore::Node **)&v70, v64);
      if ((v69 & 1) != 0)
        goto LABEL_117;
      goto LABEL_283;
    }
LABEL_747:
    v71 = v52;
    if (v69)
      goto LABEL_118;
LABEL_283:
    v65 = 1;
    v66 = v323;
    v67 = v68;
    goto LABEL_227;
  }
  *(_DWORD *)(*(_QWORD *)&v70 + 24) -= 2;
  if ((v69 & 1) == 0)
  {
    v67 = v68;
    v65 = 1;
    v66 = v323;
    goto LABEL_227;
  }
LABEL_117:
  v71 = v52;
LABEL_118:
  v66 = v323;
LABEL_120:
  v72 = *((_DWORD *)v66 + 5);
  v73 = 1;
  if ((*((_BYTE *)v66 + 45) & 4) == 0 || (v72 & 0x10000) == 0)
    goto LABEL_155;
  v74 = *((_QWORD *)v66 + 12);
  if (((v74 >> 10) & 7) - 3 > 1)
    goto LABEL_139;
  v75 = a5;
  v76 = v66;
  v77 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v66 + 1208))(v66);
  v78 = *((_DWORD *)v76 + 40);
  v79 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v76 + 1016))(v76);
  if (__OFSUB__(v78, v79))
    v80 = (v78 >> 31) + 0x7FFFFFFF;
  else
    v80 = v78 - v79;
  v81 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v76 + 1024))(v76);
  if (__OFSUB__(v80, v81))
    v82 = (v80 >> 31) + 0x7FFFFFFF;
  else
    v82 = v80 - v81;
  v83 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v76 + 1352))(v76);
  v84 = v83 << 6;
  if (v83 < -33554432)
    v84 = 0x80000000;
  if (v83 > 0x1FFFFFF)
    v84 = 0x7FFFFFFF;
  v85 = __OFSUB__(v82, v84);
  v86 = v82 - v84;
  if (v85)
    v86 = (v82 >> 31) + 0x7FFFFFFF;
  if (v77 != (((v86 & ~(v86 >> 31) & 0x20u) + 32) >> 6) + ((v86 & ~(v86 >> 31)) >> 6))
  {
    a5 = v75;
    v52 = v71;
    v66 = v76;
    goto LABEL_246;
  }
  a5 = v75;
  v66 = v76;
  if ((*((_BYTE *)v76 + 22) & 1) == 0)
    goto LABEL_154;
  v74 = *((_QWORD *)v76 + 12);
LABEL_139:
  if (((unsigned __int16)v74 >> 13) - 3 <= 1)
  {
    v87 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v66 + 1216))(v323);
    v88 = a5;
    v89 = *((_DWORD *)v323 + 41);
    v90 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v323 + 1000))(v323);
    if (__OFSUB__(v89, v90))
      v91 = (v89 >> 31) + 0x7FFFFFFF;
    else
      v91 = v89 - v90;
    v92 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v323 + 1008))(v323);
    if (__OFSUB__(v91, v92))
      v93 = (v91 >> 31) + 0x7FFFFFFF;
    else
      v93 = v91 - v92;
    v94 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v323 + 1360))(v323);
    v95 = v94 << 6;
    if (v94 < -33554432)
      v95 = 0x80000000;
    v66 = v323;
    if (v94 > 0x1FFFFFF)
      v95 = 0x7FFFFFFF;
    v85 = __OFSUB__(v93, v95);
    v96 = v93 - v95;
    v97 = (v93 >> 31) + 0x7FFFFFFF;
    a5 = v88;
    if (v85)
      v96 = v97;
    v73 = v87 == (((v96 & ~(v96 >> 31) & 0x20u) + 32) >> 6) + ((v96 & ~(v96 >> 31)) >> 6);
  }
  else
  {
LABEL_154:
    v73 = 1;
  }
LABEL_155:
  if ((v72 & 0x60000000) == 0)
  {
    v52 = v71;
    goto LABEL_246;
  }
  v52 = v71;
  if (!v73)
    goto LABEL_246;
  if ((*(_BYTE *)(v8 + 54) & 2) != 0)
  {
    v99 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 40) + 8) + 1280);
    if (v99)
    {
      v100 = *(_DWORD *)(v99 - 8);
      v101 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
      v102 = 9 * ((v101 + ~(v101 << 13)) ^ ((v101 + ~(v101 << 13)) >> 8));
      v103 = (v102 ^ (v102 >> 15)) + ~((v102 ^ (v102 >> 15)) << 27);
      v104 = v100 & ((v103 >> 31) ^ v103);
      v105 = *(_QWORD *)(v99 + 16 * v104);
      if (v105 == v8)
      {
LABEL_162:
        LODWORD(v99) = *(_DWORD *)(v99 + 16 * v104 + 8);
      }
      else
      {
        v151 = 1;
        while (v105)
        {
          v104 = ((_DWORD)v104 + v151) & v100;
          v105 = *(_QWORD *)(v99 + 16 * v104);
          ++v151;
          if (v105 == v8)
            goto LABEL_162;
        }
        LODWORD(v99) = 0;
      }
    }
    v98 = (v99 >> 2) & 1;
  }
  else
  {
    v98 = 0;
  }
  WebCore::Style::makePseudoClassInvalidationKeys((WTF::StringImpl *)0x25, v8, (uint64_t)&v362);
  v107 = v362;
  if (!v364)
  {
    v65 = 0;
    goto LABEL_217;
  }
  v309 = v98;
  v310 = a5;
  v320 = 0;
  v318 = &v362[v364];
  while (2)
  {
    LODWORD(v338.f64[0]) = LODWORD(v107->f64[0]);
    BYTE4(v338.f64[0]) = BYTE4(v107->f64[0]);
    v108 = v107->f64[1];
    if (v108 != 0.0)
      **(_DWORD **)&v108 += 2;
    v338.f64[1] = v108;
    v109 = *(_QWORD **)(v8 + 40);
    if (*v109)
      v110 = (*(_WORD *)(*v109 + 28) & 0x80) == 0;
    else
      v110 = 1;
    if (v110)
      v125 = v109[1] + 1328;
    else
      v125 = *v109 + 216;
    v111 = *(_QWORD *)v125;
    if (!*(_QWORD *)(*(_QWORD *)v125 + 32))
    {
      if (*(_QWORD *)(v111 + 24))
        WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v111);
      else
        WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v111);
      v127 = *(_QWORD *)(v111 + 32);
      if (*(_DWORD *)(v127 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
        WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v127 + 32), v126);
      if (*(_BYTE *)(v127 + 242)
        || *(_BYTE *)(v127 + 243)
        || *(_BYTE *)(v127 + 244)
        || *(_BYTE *)(v127 + 245)
        || *(_BYTE *)(v127 + 246)
        || *(_BYTE *)(v127 + 247)
        || *(_BYTE *)(v127 + 248))
      {
        *(_BYTE *)(v111 + 236) = 1;
      }
    }
    v112 = WebCore::Style::ScopeRuleSets::pseudoClassInvalidationRuleSets(*(_QWORD *)(v111 + 32) + 32, (uint64_t)&v338);
    if (v112)
    {
      v113 = *((unsigned int *)v112 + 3);
      if ((_DWORD)v113)
      {
        v114 = *(_QWORD *)v112;
        v115 = 32 * v113;
        while (1)
        {
          v116 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v8 + 40) + 8) + 1280);
          if (*(_BYTE *)(v114 + 25))
            WebCore::UserActionElementSet::clearFlags(v116, v8, 4);
          else
            WebCore::UserActionElementSet::setFlags(v116, v8, 4);
          v117 = *(_DWORD **)v114;
          *(_DWORD *)(v8 + 24) += 2;
          *(_QWORD *)&v344[0].f64[0] = v8;
          ++*v117;
          *(_QWORD *)&v344[0].f64[1] = v117;
          v346 = 0;
          v348[16] = 0;
          LOBYTE(v349) = 0;
          memset(&v344[1], 0, 32);
          v345 = 0;
          v350 = &v352;
          v351 = 64;
          v355 = 0;
          v356 = 0;
          v354 = 0;
          v357 = 0;
          v118 = *(_BYTE *)(v8 + 30) & 1;
          v119 = WTF::fastMalloc((WTF *)0x50);
          *(_BYTE *)v119 = v118;
          *(_WORD *)(v119 + 1) = 0;
          *(_OWORD *)(v119 + 40) = 0u;
          *(_OWORD *)(v119 + 24) = 0u;
          *(_OWORD *)(v119 + 8) = 0u;
          *(_QWORD *)(v119 + 56) = v119 + 72;
          *(_QWORD *)(v119 + 64) = 4;
          v358 = v119;
          v359 = v361;
          v360 = 8;
          v361[32] = 0;
          LOBYTE(v349) = 2;
          v121 = WebCore::Style::ElementRuleCollector::matchesAnyAuthorRules((WebCore::Style::ElementRuleCollector *)v344, v120);
          WebCore::Style::ElementRuleCollector::~ElementRuleCollector((WebCore::Style::ElementRuleCollector *)v344, v122);
          if (v121)
            break;
          v114 += 32;
          v115 -= 32;
          if (!v115)
            goto LABEL_183;
        }
LABEL_184:
        v320 = 1;
        v123 = 2;
      }
      else
      {
LABEL_183:
        if ((v320 & 1) != 0)
          goto LABEL_184;
        v123 = 0;
        v320 = 0;
      }
    }
    else
    {
      v123 = 3;
    }
    v124 = v338.f64[1];
    v338.f64[1] = 0.0;
    if (v124 != 0.0)
    {
      if (**(_DWORD **)&v124 == 2)
        WTF::StringImpl::destroy(*(WTF::StringImpl **)&v124, v106);
      else
        **(_DWORD **)&v124 -= 2;
    }
    if ((v123 == 3 || !v123) && ++v107 != v318)
      continue;
    break;
  }
  v107 = v362;
  if (v364)
  {
    v128 = 16 * v364;
    v129 = (WTF::StringImpl **)&v362->f64[1];
    v65 = v320;
    v98 = v309;
    do
    {
      v130 = *v129;
      *v129 = 0;
      if (v130)
      {
        if (*(_DWORD *)v130 == 2)
          WTF::StringImpl::destroy(v130, v106);
        else
          *(_DWORD *)v130 -= 2;
      }
      v129 += 2;
      v128 -= 16;
    }
    while (v128);
    v107 = v362;
    v52 = v71;
    a5 = v310;
  }
  else
  {
    v65 = v320;
    v98 = v309;
  }
LABEL_217:
  if (&v365 != (uint64_t *)v107 && v107 != 0)
  {
    v362 = 0;
    v363 = 0;
    WTF::fastFree((WTF *)v107, v106);
  }
  v132 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v8 + 40) + 8) + 1280);
  if (v98)
    WebCore::UserActionElementSet::setFlags(v132, v8, 4);
  else
    WebCore::UserActionElementSet::clearFlags(v132, v8, 4);
  v66 = v323;
  v67 = &WebCore::HTMLNames::buttonTag;
LABEL_227:
  if ((v317 & 4) == 0 || (v65 & 1) == 0 || v63 > (float)(v62 / 3.0))
  {
LABEL_246:
    if (v8 != v325
      || (*((_BYTE *)v66 + 45) & 4) != 0
      && (*((_BYTE *)v66 + 21) & 0x80) != 0
      && *(_QWORD *)(*((_QWORD *)v66 + 18) + 256))
    {
      goto LABEL_247;
    }
    if (*(int *)(*(_QWORD *)(*((_QWORD *)v66 + 11) + 8) + 60) <= 0)
    {
      if ((*((_DWORD *)v66 + 5) & 0x1800000) != 0x1000000)
        goto LABEL_247;
      if ((*((_BYTE *)v66 + 45) & 2) != 0)
        v66 = *(WebCore::Node **)(*((_QWORD *)v66 + 4) + 8);
      if ((*((_QWORD *)v66 + 12) & 0x380000) != 0x300000)
        goto LABEL_247;
    }
    if (v63 > (float)(v62 * 3.0))
    {
LABEL_247:
      *(_BYTE *)a5 = 0;
      *(_BYTE *)(a5 + 120) = 0;
    }
    else
    {
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v319->f32;
      *(_BYTE *)a5 = 1;
      *(_QWORD *)(a5 + 8) = v315;
      *(_DWORD *)(a5 + 32) = 0;
      *(_WORD *)(a5 + 36) = 0;
      *(_BYTE *)(a5 + 40) = 0;
      *(_BYTE *)(a5 + 112) = 0;
LABEL_254:
      *(_BYTE *)(a5 + 120) = 1;
    }
    goto LABEL_653;
  }
  LODWORD(v133) = *((_DWORD *)v66 + 5);
  v134.f32[0] = v319[1].f32[0] * v319[1].f32[1];
  v135.i32[0] = 1193033728;
  if (v134.f32[0] <= 40000.0)
  {
    v136 = 0;
    goto LABEL_333;
  }
  if ((*(_BYTE *)(v7 + 52) & 7) != 3 || (*(_BYTE *)(v7 + 53) & 1) == 0)
  {
    v137 = v67;
    v138 = v7;
    if ((*(_BYTE *)(v7 + 45) & 2) != 0)
    {
      v138 = *(_QWORD *)(v7 + 32);
      if (v138)
        v138 = *(_QWORD *)(v138 + 8);
    }
    if (WebCore::RenderStyle::hasBackgroundImage((WebCore::RenderStyle *)(v138 + 80)))
    {
      v139 = v7;
      if ((*(_BYTE *)(v7 + 45) & 2) != 0)
        v139 = *(_QWORD *)(*(_QWORD *)(v7 + 32) + 8);
      v136 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v139 + 88) + 16) + 8) + 16);
      if (!v136)
        goto LABEL_244;
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v136 + 200))(v136))
      {
        v140 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v136 + 200))(v136);
        v67 = v137;
        goto LABEL_262;
      }
    }
    v136 = 0;
LABEL_244:
    v66 = v323;
    v67 = v137;
    goto LABEL_333;
  }
  if (*(_BYTE *)(v7 + 46) != 48)
  {
    v141 = *(_QWORD *)(*(_QWORD *)(v7 + 224) + 24);
    if (!v141 || (v140 = *(_QWORD *)(v141 + 8)) == 0)
    {
LABEL_263:
      v136 = 0;
      v66 = v323;
      goto LABEL_333;
    }
LABEL_262:
    if ((*(_WORD *)(v140 + 557) >> 5) - 3 >= 2)
    {
      v142 = v67;
      v143 = *(double *)(v140 + 688);
      if (v143 == 0.0)
      {
        v136 = (uint64_t)v52;
        v52 = &dword_1ECE90000;
          goto LABEL_750;
        v143 = *(double *)&WebCore::Image::nullImage(void)::nullImage;
        goto LABEL_287;
      }
      goto LABEL_265;
    }
    goto LABEL_263;
  }
  v136 = 1;
LABEL_333:
  while (2)
  {
    if (((*(_WORD *)(v8 + 28) & 0x10) == 0 || *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) != *(_QWORD *)(*v67 + 24))
      && (*(_WORD *)(v8 + 30) & 1) == 0
      || (v166 = *(_QWORD *)(v8 + 80)) == 0)
    {
      v167 = 0;
      goto LABEL_338;
    }
    v175 = *(_QWORD *)(v8 + 80);
    v167 = 0;
    while ((*(_WORD *)(v175 + 28) & 8) == 0)
    {
      v175 = *(_QWORD *)(v175 + 56);
      if (!v175)
        goto LABEL_338;
    }
    do
    {
      if ((*(_WORD *)(v166 + 28) & 8) != 0)
        break;
      v166 = *(_QWORD *)(v166 + 56);
    }
    while (v166);
    for (i = *(_QWORD *)(v8 + 88); i; i = *(_QWORD *)(i + 48) & 0xFFFFFFFFFFFFLL)
    {
      if ((*(_WORD *)(i + 28) & 8) != 0)
        break;
    }
    if (v166 != i || (*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) == 0)
    {
      v167 = 0;
LABEL_379:
      v66 = v323;
      goto LABEL_338;
    }
    if ((*(_BYTE *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195FD6FB8);
    }
    WebCore::hasTransparentContainerStyle((WebCore *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 80), (const WebCore::RenderStyle *)v64);
    v167 = v280;
    if (v8 != v325)
      goto LABEL_379;
    v66 = v323;
    if (v280)
    {
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v319->f32;
      *(_BYTE *)a5 = 2;
      *(_QWORD *)(a5 + 8) = v315;
      *(_DWORD *)(a5 + 32) = 0;
      *(_WORD *)(a5 + 36) = 0;
      *(_BYTE *)(a5 + 40) = 0;
      *(_BYTE *)(a5 + 112) = 0;
      goto LABEL_254;
    }
LABEL_338:
    if (v8 == v325)
      v168 = 1;
    else
      v168 = v167;
    if (((v136 | v168) & 1) == 0
      && (v133 & 3) != 0
      && (*((_BYTE *)v66 + 96) & 0x1Eu) - 4 >= 0xA)
    {
      goto LABEL_247;
    }
    v313 = v7;
    v322 = v133 & 3;
    if (!*(_BYTE *)(v316 + 48))
    {
      v169 = 0;
      goto LABEL_348;
    }
    if (*(double *)(v316 + 8) != 0.0)
      goto LABEL_414;
    v169 = *(double *)(v316 + 16) != 0.0;
LABEL_348:
    if (v134.f32[0] > v135.f32[0])
      goto LABEL_413;
    if (v169)
      goto LABEL_413;
    if ((*(_BYTE *)(v7 + 52) & 7) != 3)
      goto LABEL_413;
    if ((*(_BYTE *)(v7 + 53) & 1) == 0)
      goto LABEL_413;
    v170 = *(_QWORD *)(*(_QWORD *)(v7 + 224) + 24);
    if (!v170)
      goto LABEL_413;
    v171 = *(_QWORD *)(v170 + 8);
    if (!v171)
      goto LABEL_413;
    if ((*(_WORD *)(v171 + 557) >> 5) - 3 < 2)
      goto LABEL_413;
    v172 = WebCore::CachedImage::imageForRenderer((WebCore::CachedImage *)v171, (const WebCore::RenderObject *)v7);
    if (!v172)
      goto LABEL_413;
    v173 = v172;
    if (((*(uint64_t (**)(WTF *))(*(_QWORD *)v172 + 64))(v172) & 1) != 0)
      goto LABEL_357;
    if (!(*(unsigned int (**)(WTF *))(*(_QWORD *)v173 + 16))(v173))
      goto LABEL_413;
    v176 = v52;
    v177 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
    if (v177 != -1)
    {
      *(_QWORD *)&v344[0].f64[0] = &v331;
      v362 = v344;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v362, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    (*(void (**)(float64x2_t *__return_ptr, WTF *, uint64_t *))(*(_QWORD *)v173 + 288))(&v338, v173, &WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
    if (!*(_QWORD *)&v338.f64[0])
      goto LABEL_415;
    v311 = a5;
    v178 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
    if (v178 != -1)
    {
      *(_QWORD *)&v344[0].f64[0] = &v331;
      v362 = v344;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v362, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    (*(void (**)(float64x2_t *__return_ptr, WTF *, uint64_t *))(*(_QWORD *)v173 + 288))(v344, v173, &WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
    v326 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)&v344[0].f64[0] + 48) + 32))(*(_QWORD *)(*(_QWORD *)&v344[0].f64[0] + 48));
    v179 = v344[0].f64[0];
    v344[0].f64[0] = 0.0;
    if (v179 != 0.0)
    {
      v180 = *(_QWORD *)(*(_QWORD *)&v179 + 8);
      if (__ldaxr((unsigned __int8 *)v180))
      {
        __clrex();
        goto LABEL_383;
      }
      if (__stxr(1u, (unsigned __int8 *)v180))
LABEL_383:
        MEMORY[0x19AEA534C](v180);
      v183 = *(_QWORD *)(v180 + 8);
      v184 = v183 - 1;
      *(_QWORD *)(v180 + 8) = v183 - 1;
      if (v183 == 1)
      {
        v292 = *(_QWORD *)(v180 + 16);
        v185 = *(_QWORD *)(v180 + 24);
        *(_QWORD *)(v180 + 24) = 0;
        v186 = v292 != 0;
      }
      else
      {
        v185 = 0;
        v186 = 1;
      }
      v187 = __ldxr((unsigned __int8 *)v180);
      if (v187 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v180))
          goto LABEL_391;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v180);
LABEL_391:
      if (!v184)
      {
        if (v185)
          (*(void (**)(uint64_t))(*(_QWORD *)v185 + 8))(v185);
        if (!v186)
          WTF::fastFree((WTF *)v180, v64);
      }
    }
    v188 = v338.f64[0];
    v338.f64[0] = 0.0;
    if (v188 != 0.0)
    {
      v189 = *(_QWORD *)(*(_QWORD *)&v188 + 8);
      if (__ldaxr((unsigned __int8 *)v189))
      {
        __clrex();
        goto LABEL_400;
      }
      if (__stxr(1u, (unsigned __int8 *)v189))
LABEL_400:
        MEMORY[0x19AEA534C](v189);
      v191 = *(_QWORD *)(v189 + 8);
      v192 = v191 - 1;
      *(_QWORD *)(v189 + 8) = v191 - 1;
      if (v191 == 1)
      {
        v291 = *(_QWORD *)(v189 + 16);
        v193 = *(_QWORD *)(v189 + 24);
        *(_QWORD *)(v189 + 24) = 0;
        v194 = v291 != 0;
      }
      else
      {
        v193 = 0;
        v194 = 1;
      }
      v195 = __ldxr((unsigned __int8 *)v189);
      if (v195 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v189))
          goto LABEL_408;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v189);
LABEL_408:
      if (!v192)
      {
        if (v193)
          (*(void (**)(uint64_t))(*(_QWORD *)v193 + 8))(v193);
        if (!v194)
        {
          WTF::fastFree((WTF *)v189, v64);
          a5 = v311;
          v7 = v313;
          v52 = v176;
          if ((v326 & 1) != 0)
            goto LABEL_357;
LABEL_413:
          if (v169)
          {
LABEL_414:
            v8 = 0;
            v173 = 0;
            LODWORD(v325) = 1;
            v174 = 1;
            goto LABEL_418;
          }
LABEL_415:
          if ((*(_BYTE *)(v7 + 52) & 7) != 4)
          {
            v8 = 0;
            v173 = 0;
            v174 = 0;
            goto LABEL_417;
          }
          v196 = v324;
          if ((~*(unsigned __int8 *)(v7 + 53) & 0x11) == 0)
          {
            v236 = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8);
            if ((*(_WORD *)(v236 + 28) & 0x20) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195FD6DB8);
            }
            if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v236 + 1184))(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8)) & 1) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195FD6DD8);
            }
            v237 = *(_DWORD *)(v236 + 24);
            *(_DWORD *)(v236 + 24) = v237 + 2;
            v323 = (WebCore::Node *)v236;
            v8 = *(_QWORD *)(v236 + 32);
            if (v8)
            {
              while (1)
              {
                v238 = *(_WORD *)(v8 + 28);
                if ((v238 & 0x20) != 0
                  && *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
                {
                  break;
                }
                if ((v238 & 0x80) != 0)
                {
                  v240 = *(_QWORD *)(v8 + 200);
                  if (!v240)
                    goto LABEL_678;
                  v239 = (uint64_t *)(v240 + 8);
                }
                else
                {
                  v239 = (uint64_t *)(v8 + 32);
                }
                v8 = *v239;
                if (!*v239)
                  goto LABEL_678;
              }
              *(_DWORD *)(v8 + 24) += 4;
              *(_DWORD *)(v236 + 24) += 2;
              if (*(_DWORD *)(v8 + 24) == 2)
              {
                if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v8, v64);
              }
              else
              {
                *(_DWORD *)(v8 + 24) -= 2;
              }
              v242 = *(_DWORD *)(v236 + 24);
              v243 = v242 - 2;
              if (v242 == 2)
              {
                if ((*(_WORD *)(v236 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v236, v64);
                LODWORD(v325) = 0;
                v173 = 0;
                v174 = 0;
              }
              else
              {
                LODWORD(v325) = 0;
                v173 = 0;
                v174 = 0;
                *(_DWORD *)(v236 + 24) = v243;
              }
              goto LABEL_419;
            }
LABEL_678:
            if (v237)
            {
              v8 = 0;
              v173 = 0;
              v174 = 0;
              *(_DWORD *)(v236 + 24) = v237;
LABEL_709:
              LODWORD(v325) = 1;
              goto LABEL_419;
            }
            if ((*(_WORD *)(v236 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v236, v64);
          }
          v8 = 0;
          v173 = 0;
          v174 = 0;
          goto LABEL_709;
        }
      }
    }
    a5 = v311;
    v7 = v313;
    v52 = v176;
    if (!v326)
      goto LABEL_413;
LABEL_357:
    v8 = 0;
    v174 = 0;
    ++*((_DWORD *)v173 + 2);
LABEL_417:
    LODWORD(v325) = 1;
LABEL_418:
    v196 = v324;
LABEL_419:
    v134 = *v319;
    v135 = v319[1];
    LOBYTE(v362) = 0;
    v367 = 0;
    if ((*(_BYTE *)(v7 + 45) & 2) != 0)
    {
      v255 = *(_QWORD *)(v313 + 32);
      if (v255)
        v7 = *(_QWORD *)(v255 + 8);
      else
        v7 = 0;
    }
    v142 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v7 + 88) + 40) + 264);
    if (v142)
    {
      ++*((_DWORD *)v142 + 2);
      if ((v174 & 1) == 0 && (v196 & 8) != 0 && *((_DWORD *)v142 + 3) == 1)
      {
        v204 = WebCore::boundingSize(v313, v316);
        v344[0].f64[0] = 0.0;
        *(_QWORD *)&v344[0].f64[1] = __PAIR64__(v205, LODWORD(v204));
        LOBYTE(v344[1].f64[0]) = 0;
        v348[0] = 0;
        v348[4] = 0;
        (*(void (**)(float64x2_t *__return_ptr, uint64_t *, float64x2_t *))(*v142 + 48))(&v338, v142, v344);
        v206 = v343;
        if (v343)
        {
          v207 = *v314;
          if (*v314 != 0.0)
          {
            v259 = *v314;
            if (v207 < 0.0)
              v259 = -v207;
            if (v259 >= 0.00000011921)
            {
              v208 = v314[1];
              goto LABEL_677;
            }
          }
          v208 = v314[1];
          if (v208 == 0.0)
            goto LABEL_437;
          v279 = v314[1];
          if (v208 < 0.0)
            v279 = -v208;
          if (v279 < 0.00000011921)
          {
LABEL_437:
            v206 = 1;
          }
          else
          {
LABEL_677:
            v344[0] = (float64x2_t)0x3FF0000000000000uLL;
            v344[1].f64[0] = 0.0;
            v344[1].f64[1] = 1.0;
            v344[2].f64[0] = v207;
            v344[2].f64[1] = v208;
            WebCore::Path::transform((WebCore::Path *)&v338, v344);
            v206 = v343;
          }
        }
        if (v367 != v206)
        {
          if (v367)
          {
            if (v366 != -1)
              ((void (*)(float64x2_t *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_3[v366])(v344, &v363);
            v366 = -1;
            v367 = 0;
          }
          else
          {
            v366 = 0;
            if (v342 == -1)
            {
              v366 = -1;
            }
            else
            {
              *(_QWORD *)&v344[0].f64[0] = &v363;
              ((void (*)(float64x2_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_1[v342])(v344);
            }
            v367 = 1;
          }
          goto LABEL_585;
        }
        if (v367)
        {
          v64 = &v363;
          if (v366 == -1)
          {
            if (v342 != -1)
              goto LABEL_565;
          }
          else
          {
            if (v342 == -1)
            {
              ((void (*)(float64x2_t *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_3[v366])(v344, &v363);
              v366 = -1;
              goto LABEL_585;
            }
LABEL_565:
            *(_QWORD *)&v344[0].f64[0] = &v363;
            ((void (*)(float64x2_t *))off_1E33FF698[v342])(v344);
          }
LABEL_585:
          if (v343 && v342 != -1)
            ((void (*)(float64x2_t *, float64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_3[v342])(v344, &v338.f64[1]);
        }
LABEL_588:
        v202 = v52;
        goto LABEL_616;
      }
    }
    if ((v196 & 8) != 0 && v173)
    {
      v197 = WebCore::boundingSize(v313, v316);
      v327 = 0;
      v199 = v197 * 64.0;
      if (v199 >= 2147483650.0)
      {
        *(float *)&v200 = NAN;
      }
      else if (v199 <= -2147483650.0)
      {
        *(float *)&v200 = -0.0;
      }
      else
      {
        v200 = (int)v199;
      }
      v328 = *(float *)&v200;
      v201 = v198 * 64.0;
      if (v201 >= 2147483650.0)
      {
        v202 = v52;
        *(float *)&v203 = NAN;
      }
      else
      {
        v202 = v52;
        if (v201 <= -2147483650.0)
          *(float *)&v203 = -0.0;
        else
          v203 = (int)v201;
      }
      v329 = *(float *)&v203;
      WebCore::Shape::createRasterShape((uint64_t)v173, (uint64_t)&v327, (uint64_t)&v327, 0, (uint64_t *)&v337, 0.0, 0.0);
      v347 = 0;
      v353 = 0;
      (*(void (**)(float64x2_t *, float64x2_t *))(*(_QWORD *)&v337->f64[0] + 40))(v337, v344);
      v342 = 0;
      if (v347 == -1)
      {
        v342 = -1;
      }
      else
      {
        *(_QWORD *)&v331.f64[0] = &v338.f64[1];
        ((void (*)(float64x2_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_1[v347])(&v331);
      }
      v234 = *v314;
      if (*v314 != 0.0)
      {
        v257 = *v314;
        if (v234 < 0.0)
          v257 = -v234;
        if (v257 >= 0.00000011921)
        {
          v235 = v314[1];
          goto LABEL_579;
        }
      }
      v235 = v314[1];
      if (v235 != 0.0)
      {
        v258 = v314[1];
        if (v235 < 0.0)
          v258 = -v235;
        if (v258 >= 0.00000011921)
        {
LABEL_579:
          v331 = (float64x2_t)0x3FF0000000000000uLL;
          v332 = 0;
          v333 = 0x3FF0000000000000;
          v334 = v234;
          v335 = v235;
          WebCore::Path::transform((WebCore::Path *)&v338, &v331);
        }
      }
      if (!v367)
      {
        v366 = 0;
        if (v342 == -1)
        {
          v366 = -1;
        }
        else
        {
          *(_QWORD *)&v331.f64[0] = &v363;
          ((void (*)(float64x2_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_1[v342])(&v331);
        }
        v367 = 1;
        goto LABEL_511;
      }
      v64 = &v363;
      if (v366 == -1)
      {
        if (v342 == -1)
          goto LABEL_513;
      }
      else if (v342 == -1)
      {
        ((void (*)(float64x2_t *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_3[v366])(&v331, &v363);
        v366 = -1;
LABEL_511:
        if (v342 != -1)
          ((void (*)(float64x2_t *, float64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_3[v342])(&v331, &v338.f64[1]);
LABEL_513:
        if (v353 != -1)
          ((void (*)(float64x2_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_3[v353])(&v338, v348);
        v353 = -1;
        if (v347 != -1)
          ((void (*)(float64x2_t *, float64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_3[v347])(&v338, &v344[0].f64[1]);
        v241 = v337;
        v337 = 0;
        if (v241)
        {
          if (LODWORD(v241->f64[1]) == 1)
            (*(void (**)(float64x2_t *))(*(_QWORD *)&v241->f64[0] + 8))(v241);
          else
            --LODWORD(v241->f64[1]);
        }
        goto LABEL_616;
      }
      *(_QWORD *)&v331.f64[0] = &v363;
      ((void (*)(float64x2_t *))off_1E33FF698[v342])(&v331);
      goto LABEL_511;
    }
    if ((v325 & 1) == 0)
    {
      v133 = v323;
      (*(void (**)(float64x2_t *__return_ptr, WebCore::Node *))(*(_QWORD *)v323 + 1368))(v344, v323);
      WebCore::SVGSVGElement::currentViewportSizeExcludingZoom((int *)v8);
      WebCore::SVGSVGElement::viewBoxToViewTransform((WebCore::SVGFitToViewBox ***)v8, v222, v223, v221, (WebCore::AffineTransform *)&v331);
      LODWORD(v327) = (*(float (**)(WebCore::Node *, uint64_t))(*(_QWORD *)v133 + 1360))(v133, 1);
      HIDWORD(v327) = v224;
      v328 = v225;
      v329 = v226;
      WebCore::Path::transform((WebCore::Path *)v344, &v331);
      v227.f32[0] = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)&v331, (const WebCore::FloatRect *)&v327);
      v327 = __PAIR64__(v228, v227.u32[0]);
      v328 = v229;
      v329 = v230;
      if (v230 < v229)
        v229 = v230;
      v227.i32[1] = v228;
      if (v229 >= 30.0)
        goto LABEL_600;
      v231 = *(_QWORD *)(*(_QWORD *)(v7 + 136) + 16);
      if ((*(_BYTE *)(v231 + 56) & 0xFD) != 0)
        goto LABEL_600;
      v336 = *(_QWORD *)(v7 + 112) + 328;
      *(_QWORD *)&v338.f64[0] = &v336;
      *(_QWORD *)&v338.f64[1] = &v336;
      v339 = &v336;
      v340 = (uint64_t)&v336;
      v232 = *(unsigned int *)(v231 + 16);
      if ((_DWORD)v232 != -1)
      {
        v337 = &v338;
        ((void (*)(uint64_t *__return_ptr, float64x2_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v232])(&v330, &v337, v231 + 8);
        if ((v330 & 0x4000000000000) != 0)
        {
          v202 = v52;
          v233 = WebCore::Color::luminance((WebCore::Color *)&v330) < 0.01
              || fabs(WebCore::Color::luminance((WebCore::Color *)&v330) + -1.0) < 0.01;
        }
        else
        {
          v202 = v52;
          v233 = 0;
        }
        if ((v330 & 0x8000000000000) != 0)
        {
          v306 = (unsigned int *)(v330 & 0xFFFFFFFFFFFFLL);
          do
          {
            v307 = __ldaxr(v306);
            v308 = v307 - 1;
          }
          while (__stlxr(v308, v306));
          if (!v308)
          {
            atomic_store(1u, v306);
            WTF::fastFree((WTF *)v306, v64);
          }
        }
        if ((v233 & v167 & 1) != 0)
        {
          *(_BYTE *)a5 = 0;
          *(_BYTE *)(a5 + 120) = 0;
          v260 = 1;
LABEL_613:
          if (v347 != -1)
            ((void (*)(float64x2_t *, float64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_3[v347])(&v338, &v344[0].f64[1]);
          if ((v260 & 1) != 0)
            goto LABEL_637;
LABEL_616:
          v219 = 0;
          v220 = 0.0;
          goto LABEL_617;
        }
        v227 = (float32x2_t)v327;
        v52 = v202;
LABEL_600:
        v338 = (float64x2_t)0x3FF0000000000000uLL;
        v339 = 0;
        v340 = 0x3FF0000000000000;
        v341 = vcvtq_f64_f32(vneg_f32(v227));
        WebCore::Path::transform((WebCore::Path *)v344, &v338);
        v261 = *v314;
        if (*v314 != 0.0)
        {
          v277 = *v314;
          if (v261 < 0.0)
            v277 = -v261;
          if (v277 >= 0.00000011921)
          {
            v262 = v314[1];
            goto LABEL_673;
          }
        }
        v262 = v314[1];
        if (v262 != 0.0)
        {
          v278 = v314[1];
          if (v262 < 0.0)
            v278 = -v262;
          if (v278 >= 0.00000011921)
          {
LABEL_673:
            v338 = (float64x2_t)0x3FF0000000000000uLL;
            v339 = 0;
            v340 = 0x3FF0000000000000;
            v341.f64[0] = v261;
            v341.f64[1] = v262;
            WebCore::Path::transform((WebCore::Path *)v344, &v338);
          }
        }
        if (!v367)
        {
          v366 = 0;
          v202 = v52;
          if (v347 == -1)
          {
            v366 = -1;
          }
          else
          {
            *(_QWORD *)&v338.f64[0] = &v363;
            ((void (*)(float64x2_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_1[v347])(&v338);
          }
          v260 = 0;
          v367 = 1;
          goto LABEL_613;
        }
        v64 = &v363;
        v202 = v52;
        if (v366 == -1)
        {
          if (v347 != -1)
            goto LABEL_609;
        }
        else
        {
          if (v347 == -1)
          {
            ((void (*)(float64x2_t *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_3[v366])(&v338, &v363);
            v260 = 0;
            v366 = -1;
            goto LABEL_613;
          }
LABEL_609:
          *(_QWORD *)&v338.f64[0] = &v363;
          ((void (*)(float64x2_t *))off_1E33FF698[v347])(&v338);
        }
        v260 = 0;
        goto LABEL_613;
      }
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_750:
      WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)v344);
      v143 = v344[0].f64[0];
      WebCore::Image::nullImage(void)::nullImage = *(_QWORD *)&v344[0].f64[0];
      *((_BYTE *)v52 + 3744) = 1;
LABEL_287:
      v52 = (int *)v136;
      if (v143 == 0.0)
        goto LABEL_288;
LABEL_265:
      if (!(*(unsigned int (**)(float64_t))(**(_QWORD **)&v143 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v143)))
      {
LABEL_288:
        v136 = 0;
        goto LABEL_289;
      }
      v144 = v52;
      v145 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
      if (v145 != -1)
      {
        *(_QWORD *)&v344[0].f64[0] = &v331;
        v362 = v344;
        std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v362, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
      }
      (*(void (**)(float64x2_t *__return_ptr, float64_t, uint64_t *))(**(_QWORD **)&v143 + 288))(&v338, COERCE_FLOAT64_T(*(_QWORD *)&v143), &WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
      if (!*(_QWORD *)&v338.f64[0])
      {
        v136 = 1;
LABEL_289:
        v66 = v323;
        v67 = v142;
        continue;
      }
      v312 = v7;
      v146 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
      if (v146 != -1)
      {
        *(_QWORD *)&v344[0].f64[0] = &v331;
        v362 = v344;
        std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v362, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
      }
      v147 = a5;
      (*(void (**)(float64x2_t *__return_ptr, float64_t, uint64_t *))(**(_QWORD **)&v143 + 288))(v344, COERCE_FLOAT64_T(*(_QWORD *)&v143), &WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
      v321 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)&v344[0].f64[0] + 48) + 32))(*(_QWORD *)(*(_QWORD *)&v344[0].f64[0] + 48));
      v148 = v344[0].f64[0];
      v344[0].f64[0] = 0.0;
      if (v148 == 0.0)
      {
LABEL_310:
        v158 = v338.f64[0];
        v338.f64[0] = 0.0;
        v66 = v323;
        v67 = v142;
        if (v158 == 0.0)
          goto LABEL_326;
        v159 = *(_QWORD *)(*(_QWORD *)&v158 + 8);
        if (__ldaxr((unsigned __int8 *)v159))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v159))
        {
          goto LABEL_315;
        }
        MEMORY[0x19AEA534C](v159);
LABEL_315:
        v161 = *(_QWORD *)(v159 + 8);
        v162 = v161 - 1;
        *(_QWORD *)(v159 + 8) = v161 - 1;
        if (v161 == 1)
        {
          v289 = *(_QWORD *)(v159 + 16);
          v163 = *(_QWORD *)(v159 + 24);
          *(_QWORD *)(v159 + 24) = 0;
          v164 = v289 != 0;
        }
        else
        {
          v163 = 0;
          v164 = 1;
        }
        v165 = __ldxr((unsigned __int8 *)v159);
        if (v165 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v159))
            goto LABEL_322;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v159);
LABEL_322:
        v66 = v323;
        v67 = v142;
        if (!v162)
        {
          if (v163)
            (*(void (**)(uint64_t))(*(_QWORD *)v163 + 8))(v163);
          v66 = v323;
          v67 = v142;
          if (!v164)
          {
            WTF::fastFree((WTF *)v159, v64);
            v67 = v142;
            v66 = v323;
            if ((v321 & 1) != 0)
              goto LABEL_327;
            goto LABEL_331;
          }
        }
LABEL_326:
        if (v321)
        {
LABEL_327:
          v136 = 0;
LABEL_332:
          a5 = v147;
          v7 = v312;
          v52 = v144;
          continue;
        }
LABEL_331:
        v136 = 1;
        goto LABEL_332;
      }
      v149 = *(_QWORD *)(*(_QWORD *)&v148 + 8);
      if (__ldaxr((unsigned __int8 *)v149))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v149))
      {
        goto LABEL_298;
      }
      MEMORY[0x19AEA534C](v149);
LABEL_298:
      v153 = *(_QWORD *)(v149 + 8);
      v154 = v153 - 1;
      *(_QWORD *)(v149 + 8) = v153 - 1;
      if (v153 == 1)
      {
        v290 = *(_QWORD *)(v149 + 16);
        v155 = *(_QWORD *)(v149 + 24);
        *(_QWORD *)(v149 + 24) = 0;
        v156 = v290 != 0;
      }
      else
      {
        v155 = 0;
        v156 = 1;
      }
      v157 = __ldxr((unsigned __int8 *)v149);
      if (v157 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v149))
        {
LABEL_305:
          if (!v154)
          {
            if (v155)
              (*(void (**)(uint64_t))(*(_QWORD *)v155 + 8))(v155);
            if (!v156)
              WTF::fastFree((WTF *)v149, v64);
          }
          goto LABEL_310;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v149);
      goto LABEL_305;
    }
    break;
  }
  if ((*(_BYTE *)(v313 + 45) & 4) == 0)
    goto LABEL_588;
  v209 = *(double *)(v313 + 160);
  v344[0].f64[0] = 0.0;
  v344[0].f64[1] = v209;
  WebCore::RenderStyle::getRoundedBorderFor((WebCore::RenderStyle *)(v313 + 80), (const WebCore::LayoutRect *)v344, (const WebCore::LayoutSize *)1, 1, (uint64_t)&v331);
  v210 = v333;
  if (SHIDWORD(v332) >= (int)v332)
    v211 = v332;
  else
    v211 = HIDWORD(v332);
  if (SHIDWORD(v333) < (int)v333)
    v210 = HIDWORD(v333);
  if (SHIDWORD(v334) >= SLODWORD(v334))
    v212 = LODWORD(v334);
  else
    v212 = HIDWORD(v334);
  if (SHIDWORD(v335) >= SLODWORD(v335))
    v213 = LODWORD(v335);
  else
    v213 = HIDWORD(v335);
  if (v210 >= v211)
    v214 = v211;
  else
    v214 = v210;
  if (v212 >= v214)
    v215 = v214;
  else
    v215 = v212;
  if (v213 >= v215)
    v216 = v215;
  else
    v216 = v213;
  if (v211 <= v210)
    v217 = v210;
  else
    v217 = v211;
  if (v217 <= v212)
    v217 = v212;
  if (v217 <= v213)
    v218 = v213;
  else
    v218 = v217;
  v202 = v52;
  if (v216 == v218)
  {
    v219 = 0;
    v220 = (float)v216 * 0.015625;
    goto LABEL_617;
  }
  v245 = v216 != v211 && v218 != v211;
  v247 = v216 != v210 && v218 != v210;
  v249 = v216 != v212 && v218 != v212;
  v250 = v213 > v215 && v213 < v217;
  v251 = v250;
  if (v216 || (v251 & 1) != 0 || v249 || v247 || v245)
  {
    v347 = 0;
    WebCore::FloatRoundedRect::FloatRoundedRect((uint64_t)&v338, (uint64_t)&v331);
    v256.n128_f64[0] = WebCore::Path::addRoundedRect((WebCore::Path *)v344, (WebCore::FloatRect *)&v338, 0);
    if (v367)
    {
      v64 = &v363;
      if (v366 == -1)
      {
        if (v347 == -1)
          goto LABEL_616;
      }
      else if (v347 == -1)
      {
        ((void (*)(float64x2_t *, int *, double))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_3[v366])(&v338, &v363, v256.n128_f64[0]);
        v366 = -1;
        goto LABEL_684;
      }
      *(_QWORD *)&v338.f64[0] = &v363;
      ((void (*)(float64x2_t *, __n128))off_1E33FF698[v347])(&v338, v256);
    }
    else
    {
      v366 = 0;
      if (v347 == -1)
      {
        v366 = -1;
      }
      else
      {
        *(_QWORD *)&v338.f64[0] = &v363;
        ((void (*)(float64x2_t *, double))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_1[v347])(&v338, v256.n128_f64[0]);
      }
      v367 = 1;
    }
LABEL_684:
    if (v347 != -1)
      ((void (*)(float64x2_t *, float64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_3[v347])(&v338, &v344[0].f64[1]);
    goto LABEL_616;
  }
  v220 = (float)v218 * 0.015625;
  v252 = v211 == v218;
  if (v210 == v218)
    v253 = v252 | 2;
  else
    v253 = v252;
  if (v212 == v218)
    v254 = v253 | 4;
  else
    v254 = v253;
  if (v213 >= v217)
    v219 = v254 | 8;
  else
    v219 = v254;
LABEL_617:
  if (v367)
    v263 = 1;
  else
    v263 = v136;
  if ((v263 & 1) == 0)
  {
    WebCore::hasTransparentContainerStyle((WebCore *)(v7 + 80), (const WebCore::RenderStyle *)v64);
    if (v264)
    {
      v265 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v313 + 24) + 8) + 40) + 8) + 680);
      v266 = *(double *)(v265 + 416);
      if (v220 < v266)
        v220 = *(double *)(v265 + 416);
      if (!v322)
      {
        v267 = *(double *)(v265 + 408);
        *(float *)&v267 = v267;
        v268 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v267, 0);
        v134 = vsub_f32(v134, v268);
        v135 = vadd_f32(vadd_f32(v135, v268), v268);
      }
    }
  }
  LOBYTE(v344[0].f64[0]) = 0;
  *(_QWORD *)&v344[0].f64[1] = v315;
  *(float32x2_t *)&v344[1].f64[0] = v134;
  *(float32x2_t *)&v344[1].f64[1] = v135;
  *(float *)v344[2].f64 = v220;
  BYTE4(v344[2].f64[0]) = v219;
  BYTE5(v344[2].f64[0]) = v136;
  LOBYTE(v344[2].f64[1]) = 0;
  LOBYTE(v350) = 0;
  if (!v367)
  {
    v270 = v344[1];
    *(float64x2_t *)a5 = v344[0];
    *(float64x2_t *)(a5 + 16) = v270;
    *(float64_t *)(a5 + 30) = *(float64_t *)((char *)&v344[1].f64[1] + 6);
    *(_BYTE *)(a5 + 40) = 0;
    *(_BYTE *)(a5 + 112) = 0;
    *(_BYTE *)(a5 + 120) = 1;
    goto LABEL_637;
  }
  v349 = 0;
  v269 = v366;
  if (v366 == -1)
  {
    v349 = -1;
  }
  else
  {
    *(_QWORD *)&v338.f64[0] = &v345;
    ((void (*)(float64x2_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_1[v366])(&v338);
    v269 = v349;
  }
  LOBYTE(v350) = 1;
  v271 = v344[1];
  *(float64x2_t *)a5 = v344[0];
  *(float64x2_t *)(a5 + 16) = v271;
  *(float64_t *)(a5 + 30) = *(float64_t *)((char *)&v344[1].f64[1] + 6);
  *(_BYTE *)(a5 + 40) = 0;
  *(_BYTE *)(a5 + 112) = 0;
  *(_DWORD *)(a5 + 104) = 0;
  if (v269 == -1)
  {
    *(_DWORD *)(a5 + 104) = -1;
    *(_BYTE *)(a5 + 112) = 1;
    *(_BYTE *)(a5 + 120) = 1;
  }
  else
  {
    *(_QWORD *)&v338.f64[0] = a5 + 48;
    ((void (*)(float64x2_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_1[v269])(&v338);
    v272 = v350;
    *(_BYTE *)(a5 + 112) = 1;
    *(_BYTE *)(a5 + 120) = 1;
    if (!v272)
      goto LABEL_637;
  }
  if (v349 != -1)
    ((void (*)(float64x2_t *, __int16 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_3[v349])(&v338, &v345);
LABEL_637:
  v52 = v202;
  if (v142)
  {
    if (*((_DWORD *)v142 + 2) == 1)
      (*(void (**)(uint64_t *))(*v142 + 8))(v142);
    else
      --*((_DWORD *)v142 + 2);
  }
  if (v367 && v366 != -1)
    ((void (*)(float64x2_t *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_3[v366])(v344, &v363);
  if ((v325 & 1) == 0)
  {
    if (v323)
    {
      if (*((_DWORD *)v323 + 6) == 2)
      {
        if ((*((_WORD *)v323 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v323, v64);
      }
      else
      {
        *((_DWORD *)v323 + 6) -= 2;
      }
    }
    if (v8)
    {
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v8, v64);
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
      }
    }
  }
  if (v173)
  {
    if (*((_DWORD *)v173 + 2) == 1)
      (*(void (**)(WTF *))(*(_QWORD *)v173 + 8))(v173);
    else
      --*((_DWORD *)v173 + 2);
  }
LABEL_653:
  if (v52[2] == 1)
    (*(void (**)(int *))(*(_QWORD *)v52 + 8))(v52);
  else
    --v52[2];
  do
  {
LABEL_655:
    v273 = __ldaxr(v50);
    v274 = v273 - 1;
  }
  while (__stlxr(v274, v50));
  if (!v274)
  {
    atomic_store(1u, v50);
    v275 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v275 = off_1E31FE290;
    v275[1] = v50;
    *(_QWORD *)&v344[0].f64[0] = v275;
    WTF::ensureOnMainThread();
    v276 = v344[0].f64[0];
    v344[0].f64[0] = 0.0;
    if (v276 != 0.0)
      (*(void (**)(float64_t))(**(_QWORD **)&v276 + 8))(COERCE_FLOAT64_T(*(_QWORD *)&v276));
  }
}

float WebCore::boundingSize(uint64_t a1, uint64_t a2)
{
  void *v3;
  float v4;
  float v5;
  WTF *v6;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  v8 = 0;
  (*(void (**)(uint64_t, WTF **, uint64_t *))(*(_QWORD *)a1 + 384))(a1, &v9, &v8);
  if (HIDWORD(v10))
  {
    WebCore::unionRect((unsigned int *)&v9);
    v4 = (float)(int)v3 * 0.015625;
    if (*(_BYTE *)(a2 + 48))
    {
      v5 = hypot(*(long double *)a2, *(long double *)(a2 + 8));
      hypot(*(long double *)(a2 + 16), *(long double *)(a2 + 24));
      v4 = v4 * v5;
    }
  }
  else
  {
    v4 = 0.0;
  }
  v6 = v9;
  if (v9)
  {
    v9 = 0;
    LODWORD(v10) = 0;
    WTF::fastFree(v6, v3);
  }
  return v4;
}

float WebCore::hasTransparentContainerStyle(WebCore *this, const WebCore::RenderStyle *a2)
{
  void *v3;
  float result;
  uint64_t v5;
  uint64_t (*v6)();
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  WebCore::RenderStyle::visitedDependentColor((uint64_t)this, 61, 0, &v26);
  if ((v26 & 0x8000000000000) != 0)
  {
    v21 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFLL);
    result = *(float *)((v26 & 0xFFFFFFFFFFFFLL) + 0x10);
    if (result > 0.0)
    {
      v25 = 1;
      goto LABEL_75;
    }
  }
  else if ((_BYTE)v26)
  {
    return result;
  }
  v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16) + 8);
  if (*(_QWORD *)(v5 + 8))
  {
    do
    {
      v24 = *(_QWORD *)(v5 + 16);
      v7 = v24 != 0;
      if (v24)
        break;
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5);
  }
  else
  {
    if (*(_QWORD *)(v5 + 16))
      v6 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
    else
      v6 = 0;
    v7 = v6 != 0;
  }
  if ((v26 & 0x8000000000000) == 0)
  {
LABEL_9:
    if (v7)
      return result;
    goto LABEL_10;
  }
  v25 = v7;
  v21 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFLL);
  do
  {
LABEL_75:
    v22 = __ldaxr(v21);
    v23 = v22 - 1;
  }
  while (__stlxr(v23, v21));
  if (v23)
  {
    v7 = v25;
    goto LABEL_9;
  }
  atomic_store(1u, v21);
  WTF::fastFree((WTF *)v21, v3);
  if ((v25 & 1) != 0)
    return result;
LABEL_10:
  v8 = (_QWORD *)*((_QWORD *)this + 1);
  v9 = v8[2];
  v10 = *(unsigned __int8 *)(v9 + 52);
  if ((v10 & 0xE) != 0 && (v10 & 0xF) != 0)
  {
    result = *(float *)(v9 + 48);
    if (((result < 3.0) & (v10 >> 4)) != 0 || result > 0.0)
      return result;
  }
  if (*(_QWORD *)(v8[4] + 88))
    return result;
  if (*(_QWORD *)(v8[5] + 264))
    return result;
  v12 = v8[3];
  if ((*(_BYTE *)(v12 + 4) & 0xF) != 0)
    return result;
  result = *(float *)(v12 + 120);
  if (result != 0.0 && (*(_BYTE *)(v12 + 124) & 0xF) != 0)
  {
    if (!*(_DWORD *)(v12 + 112))
    {
      v17 = *(_QWORD *)(v12 + 104);
      if ((v17 & 0x4000000000000) != 0)
      {
        if ((v17 & 0x8000000000000) != 0)
        {
          if (*(float *)((v17 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
            goto LABEL_21;
        }
        else if (!*(_QWORD *)(v12 + 104))
        {
          goto LABEL_21;
        }
      }
    }
    if ((*(_BYTE *)(v12 + 124) & 0xF) != 1)
      goto LABEL_39;
  }
LABEL_21:
  if (*(float *)(v12 + 144) == 0.0 || (*(_BYTE *)(v12 + 148) & 0xF) == 0)
    goto LABEL_23;
  if (*(_DWORD *)(v12 + 136))
    goto LABEL_32;
  v18 = *(_QWORD *)(v12 + 128);
  if ((v18 & 0x4000000000000) == 0)
    goto LABEL_32;
  if ((v18 & 0x8000000000000) != 0)
  {
    if (*(float *)((v18 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
      goto LABEL_23;
LABEL_32:
    if ((*(_BYTE *)(v12 + 148) & 0xF) != 1)
      goto LABEL_39;
    goto LABEL_23;
  }
  if (*(_QWORD *)(v12 + 128))
    goto LABEL_32;
LABEL_23:
  if (*(float *)(v12 + 168) == 0.0 || (*(_BYTE *)(v12 + 172) & 0xF) == 0)
    goto LABEL_25;
  if (!*(_DWORD *)(v12 + 160))
  {
    v19 = *(_QWORD *)(v12 + 152);
    if ((v19 & 0x4000000000000) != 0)
    {
      if ((v19 & 0x8000000000000) != 0)
      {
        if (*(float *)((v19 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
          goto LABEL_25;
      }
      else if (!*(_QWORD *)(v12 + 152))
      {
        goto LABEL_25;
      }
    }
  }
  if ((*(_BYTE *)(v12 + 172) & 0xF) == 1)
  {
LABEL_25:
    if (*(float *)(v12 + 192) == 0.0 || (*(_BYTE *)(v12 + 196) & 0xF) == 0)
      return result;
    if (!*(_DWORD *)(v12 + 184))
    {
      v20 = *(_QWORD *)(v12 + 176);
      if ((v20 & 0x4000000000000) != 0)
      {
        if ((v20 & 0x8000000000000) != 0)
        {
          if (*(float *)((v20 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
            return result;
        }
        else if (!*(_QWORD *)(v12 + 176))
        {
          return result;
        }
      }
    }
    if ((*(_BYTE *)(v12 + 196) & 0xF) == 1)
      return result;
  }
LABEL_39:
  if ((*(_BYTE *)(v12 + 172) & 0xE) != 0)
  {
    v13 = *(_QWORD *)(v12 + 200);
    if (*(_BYTE *)(v13 + 5) && *(_BYTE *)(v13 + 52) == 4)
      v14 = *(_BYTE *)(v13 + 54) ? *(float *)(v13 + 48) : (float)*(int *)(v13 + 48);
    else
      v14 = *(float *)(v12 + 168);
    if (v14 != 0.0 && (*(_BYTE *)(v12 + 148) & 0xE) != 0)
    {
      if (*(_BYTE *)(v13 + 5) && *(_BYTE *)(v13 + 60) == 4)
        v15 = *(_BYTE *)(v13 + 62) ? *(float *)(v13 + 56) : (float)*(int *)(v13 + 56);
      else
        v15 = *(float *)(v12 + 144);
      if (v15 != 0.0 && (*(_BYTE *)(v12 + 196) & 0xE) != 0)
      {
        if (*(_BYTE *)(v13 + 5) && *(_BYTE *)(v13 + 68) == 4)
        {
          if (*(_BYTE *)(v13 + 70))
            v16 = *(float *)(v13 + 64);
          else
            v16 = (float)*(int *)(v13 + 64);
        }
        else
        {
          v16 = *(float *)(v12 + 192);
        }
        if (v16 != 0.0
          && (*(_BYTE *)(v12 + 124) & 0xE) != 0
          && *(_BYTE *)(v13 + 5)
          && *(_BYTE *)(v13 + 76) == 4
          && !*(_BYTE *)(v13 + 78))
        {
          return *(float *)(v13 + 72);
        }
      }
    }
  }
  return result;
}

WebCore::Node *WebCore::IntersectionObserver::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  WebCore::CSSParserTokenRange *v8;
  WebCore::CSSParserTokenRange *v9;
  WTF *v10;
  unsigned int v11;
  int v12;
  char *v13;
  unsigned int v14;
  int v15;
  char *v16;
  unsigned int v17;
  int v18;
  char *v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  WTF *v23;
  WTF::StringImpl *v24;
  WTF *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  WTF *v32;
  uint64_t v34;
  uint64_t v35;
  WebCore::Node *v36;
  unsigned int *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  void *v49;
  WTF *v50;
  int v51;
  WebCore::Node *result;
  WTF::StringImpl *v53;
  __int16 v54;
  int v55;
  double v56;
  int v57;
  char *v58;
  unsigned int v59;
  int v60;
  WebCore::CSSPrimitiveValue *v61;
  float v62;
  uint64_t v63;
  WTF *v64;
  char *v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  WTF *v69;
  int *v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  unsigned __int8 *v74;
  int *v75;
  unsigned int v76;
  int v77;
  __int16 v78;
  _OWORD *v79;
  _OWORD *v80;
  uint64_t v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WebCore::CSSPrimitiveValue *v90;
  uint64_t v91;
  WTF *v92;
  uint64_t v93;
  unsigned int v94;
  WTF *v95;
  uint64_t v96;
  WTF *v97;
  unsigned int v98;
  WebCore::Node *v99;
  WebCore::CSSPrimitiveValue *v100;
  unsigned int v101;
  unsigned __int8 v102;
  char v103;
  char v104;
  unsigned int v105;
  unsigned __int8 v106;
  char v107;
  char v108;
  unsigned int v109;
  unsigned __int8 v110;
  char v111;
  char v112;
  WTF *v113;
  uint64_t v114;
  _BYTE v115[32];
  WebCore::CSSParserTokenRange *v116;
  WebCore::CSSParserTokenRange *v117;
  unsigned int v118[2];
  unsigned int v119[2];
  unsigned int v120;
  char v121;
  unsigned int v122;
  char v123;
  WebCore::CSSParserTokenRange *v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  v99 = 0;
  if (*(_BYTE *)(a3 + 16))
    WTF::switchOn<std::variant<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>> &,WebCore::IntersectionObserver::create(WebCore::Document&,WTF::Ref<WebCore::IntersectionObserverCallback,WTF::RawPtrTraits<WebCore::IntersectionObserverCallback>,WTF::DefaultRefDerefTraits<WebCore::IntersectionObserverCallback>> &&,WebCore::IntersectionObserver::Init &&)::$_0,WebCore::IntersectionObserver::create(WebCore::Document&,WTF::Ref<WebCore::IntersectionObserverCallback,WTF::RawPtrTraits<WebCore::IntersectionObserverCallback>,WTF::DefaultRefDerefTraits<WebCore::IntersectionObserverCallback>> &,WebCore::IntersectionObserver::Init)::$_1>(a3, (uint64_t)&v99, (uint64_t)&v99);
  WebCore::CSSTokenizer::CSSTokenizer((WebCore::CSSTokenizer *)v118, (unsigned int **)(a3 + 24), 0, 0);
  v8 = v124;
  v9 = (WebCore::CSSParserTokenRange *)((char *)v124 + 24 * v125);
  v116 = v124;
  v117 = v9;
  while (1)
  {
    if (v8 >= v9)
      v8 = (WebCore::CSSParserTokenRange *)WebCore::CSSParserTokenRange::eofToken(v8);
    if ((*(_DWORD *)v8 & 0x3F) != 0x10)
      break;
    v9 = v117;
    v8 = (WebCore::CSSParserTokenRange *)((char *)v116 + 24);
    v116 = (WebCore::CSSParserTokenRange *)((char *)v116 + 24);
  }
  v113 = (WTF *)v115;
  v114 = 4;
  if (v116 == v117)
  {
    LODWORD(v126) = 0;
    WORD2(v126) = 4;
    BYTE6(v126) = 0;
    v10 = (WTF *)v115;
    goto LABEL_9;
  }
  do
  {
    if (HIDWORD(v114) == 4)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v93 = v126;
      LOBYTE(v126) = 9;
      v127 = v93;
      v128 = 1;
      goto LABEL_49;
    }
    WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)&v116, 0, 0, 1, 0, 0, 0, (uint64_t *)&v100);
    if (!v100)
    {
LABEL_184:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v89 = v126;
      LOBYTE(v126) = 9;
      v127 = v89;
      v128 = 1;
      v90 = v100;
      v100 = 0;
      if (v90)
      {
        if (*(_DWORD *)v90 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v90, v24);
        else
          *(_DWORD *)v90 -= 2;
      }
      goto LABEL_49;
    }
    v54 = *((_WORD *)v100 + 2);
    v55 = v54 & 0x7F;
    if (v55 == 3)
    {
      v62 = WebCore::CSSPrimitiveValue::doubleValue(v100);
      *(float *)&v126 = v62;
      WORD2(v126) = 3;
      BYTE6(v126) = 1;
    }
    else
    {
      if (v55 == 73 || (v54 & 0x7F) != 6)
        goto LABEL_184;
      v56 = *((double *)v100 + 1);
      if (v56 >= 2147483650.0)
      {
        v57 = 0x7FFFFFFF;
      }
      else if (v56 <= -2147483650.0)
      {
        v57 = 0x80000000;
      }
      else
      {
        v57 = (int)v56;
      }
      LODWORD(v126) = v57;
      WORD2(v126) = 4;
      BYTE6(v126) = 0;
    }
    if (HIDWORD(v114) != (_DWORD)v114)
    {
      v58 = (char *)v113 + 8 * HIDWORD(v114);
      *(_DWORD *)v58 = 0;
      *(_WORD *)(v58 + 5) = 0;
      v59 = BYTE4(v126);
      *((_WORD *)v58 + 2) = WORD2(v126);
      if (v59 - 2 >= 9)
      {
        if (v59 > 0xD)
          goto LABEL_107;
        if (((1 << v59) & 0x3003) != 0)
        {
          *(_DWORD *)v58 = 0;
          goto LABEL_107;
        }
        if (v59 != 11)
          goto LABEL_107;
      }
      else
      {
        v60 = BYTE6(v126);
        v58[6] = BYTE6(v126);
        if (v60)
        {
          *(_DWORD *)v58 = v126;
LABEL_107:
          ++HIDWORD(v114);
          goto LABEL_108;
        }
      }
      *(_DWORD *)v58 = v126;
      goto LABEL_107;
    }
    WTF::Vector<WebCore::Length,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Length>((uint64_t)&v113, (unint64_t)&v126);
    if (BYTE4(v126) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v126);
    }
LABEL_108:
    v61 = v100;
    v100 = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v61, v53);
      else
        *(_DWORD *)v61 -= 2;
    }
  }
  while (v116 != v117);
  v63 = HIDWORD(v114);
  switch(HIDWORD(v114))
  {
    case 1:
      v64 = v113;
      if ((_DWORD)v114 == 1)
      {
        WTF::Vector<WebCore::Length,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Length&>((uint64_t)&v113, (unint64_t)v113);
        v68 = HIDWORD(v114);
      }
      else
      {
        v65 = (char *)v113 + 8 * HIDWORD(v114);
        *(_DWORD *)v65 = 0;
        *(_WORD *)(v65 + 5) = 0;
        v66 = *((unsigned __int8 *)v64 + 4);
        v65[4] = v66;
        v65[5] = *((_BYTE *)v64 + 5);
        if (v66 <= 0xD)
        {
          v67 = 1 << v66;
          if ((v67 & 0x7FC) != 0)
          {
            v65[6] = *((_BYTE *)v64 + 6);
            *(_DWORD *)v65 = *(_DWORD *)v64;
          }
          else if ((v67 & 0x3003) != 0)
          {
            *(_DWORD *)v65 = 0;
          }
          else
          {
            *(_DWORD *)v65 = *(_DWORD *)v64;
            WebCore::Length::ref((int *)v65);
          }
        }
        v68 = ++HIDWORD(v114);
      }
      if (!v68)
        goto LABEL_290;
      v69 = v113;
      if (v68 == (_DWORD)v114)
      {
        WTF::Vector<WebCore::Length,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Length&>((uint64_t)&v113, (unint64_t)v113);
        v73 = HIDWORD(v114);
      }
      else
      {
        v70 = (int *)((char *)v113 + 8 * v68);
        *((_BYTE *)v70 + 6) = 0;
        *v70 = 0;
        v71 = *((unsigned __int8 *)v69 + 4);
        *((_BYTE *)v70 + 4) = v71;
        *((_BYTE *)v70 + 5) = *((_BYTE *)v69 + 5);
        if (v71 <= 0xD)
        {
          v72 = 1 << v71;
          if ((v72 & 0x7FC) != 0)
          {
            *((_BYTE *)v70 + 6) = *((_BYTE *)v69 + 6);
            *v70 = *(_DWORD *)v69;
          }
          else if ((v72 & 0x3003) != 0)
          {
            *v70 = 0;
          }
          else
          {
            *v70 = *(_DWORD *)v69;
            WebCore::Length::ref(v70);
          }
        }
        v73 = ++HIDWORD(v114);
      }
      if (!v73)
      {
LABEL_290:
        __break(0xC471u);
        JUMPOUT(0x195FD8818);
      }
      v74 = (unsigned __int8 *)v113;
      if (v73 != (_DWORD)v114)
      {
        v75 = (int *)((char *)v113 + 8 * v73);
        *((_BYTE *)v75 + 6) = 0;
        *v75 = 0;
        v76 = v74[4];
        *((_BYTE *)v75 + 4) = v76;
        *((_BYTE *)v75 + 5) = v74[5];
        if (v76 <= 0xD)
        {
          v77 = 1 << v76;
          if ((v77 & 0x7FC) != 0)
          {
            *((_BYTE *)v75 + 6) = v74[6];
            *v75 = *(_DWORD *)v74;
          }
          else if ((v77 & 0x3003) != 0)
          {
            *v75 = 0;
          }
          else
          {
            *v75 = *(_DWORD *)v74;
            WebCore::Length::ref(v75);
          }
        }
        goto LABEL_138;
      }
LABEL_230:
      WTF::Vector<WebCore::Length,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Length&>((uint64_t)&v113, (unint64_t)v74);
      goto LABEL_28;
    case 2:
      if ((_DWORD)v114 == 2)
      {
        WTF::Vector<WebCore::Length,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Length&>((uint64_t)&v113, (unint64_t)v113);
        LODWORD(v63) = HIDWORD(v114);
      }
      else
      {
        WebCore::Length::Length((WTF *)((char *)v113 + 8 * HIDWORD(v114)), v113);
        LODWORD(v63) = ++HIDWORD(v114);
      }
      if (v63 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x195FD8884);
      }
      v63 = v63;
      v95 = v113;
      v74 = (unsigned __int8 *)v113 + 8;
      if ((_DWORD)v63 == (_DWORD)v114)
        goto LABEL_230;
      goto LABEL_225;
    case 3:
      v95 = v113;
      v74 = (unsigned __int8 *)v113 + 8;
      if ((_DWORD)v114 == 3)
        goto LABEL_230;
LABEL_225:
      WebCore::Length::Length((WTF *)((char *)v95 + 8 * v63), (const WebCore::Length *)v74);
LABEL_138:
      v22 = ++HIDWORD(v114);
      goto LABEL_29;
  }
  if (HIDWORD(v114))
    goto LABEL_33;
  LODWORD(v126) = 0;
  WORD2(v126) = 4;
  BYTE6(v126) = 0;
  if ((_DWORD)v114)
  {
    v10 = v113;
LABEL_9:
    *(_DWORD *)v10 = 0;
    *(_WORD *)((char *)v10 + 5) = 0;
    v11 = BYTE4(v126);
    *((_WORD *)v10 + 2) = WORD2(v126);
    if (v11 - 2 >= 9)
    {
      if (v11 > 0xD)
        goto LABEL_12;
      if (((1 << v11) & 0x3003) != 0)
      {
        *(_DWORD *)v10 = 0;
        goto LABEL_12;
      }
      if (v11 != 11)
        goto LABEL_12;
    }
    else
    {
      v12 = BYTE6(v126);
      *((_BYTE *)v10 + 6) = BYTE6(v126);
      if (v12)
      {
        *(_DWORD *)v10 = v126;
LABEL_12:
        ++HIDWORD(v114);
        goto LABEL_13;
      }
    }
    *(_DWORD *)v10 = v126;
    goto LABEL_12;
  }
  WTF::Vector<WebCore::Length,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Length>((uint64_t)&v113, (unint64_t)&v126);
  if (BYTE4(v126) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v126);
  }
LABEL_13:
  LODWORD(v126) = 0;
  WORD2(v126) = 4;
  BYTE6(v126) = 0;
  if (HIDWORD(v114) == (_DWORD)v114)
    goto LABEL_212;
  v13 = (char *)v113 + 8 * HIDWORD(v114);
  *(_DWORD *)v13 = 0;
  *(_WORD *)(v13 + 5) = 0;
  v14 = BYTE4(v126);
  *((_WORD *)v13 + 2) = WORD2(v126);
  if (v14 - 2 >= 9)
  {
    if (v14 <= 0xD)
    {
      if (((1 << v14) & 0x3003) != 0)
      {
        *(_DWORD *)v13 = 0;
      }
      else if (v14 == 11)
      {
        goto LABEL_274;
      }
    }
  }
  else
  {
    v15 = BYTE6(v126);
    v13[6] = BYTE6(v126);
    if (v15)
    {
      *(_DWORD *)v13 = v126;
      goto LABEL_17;
    }
LABEL_274:
    *(_DWORD *)v13 = v126;
  }
LABEL_17:
  ++HIDWORD(v114);
  while (2)
  {
    LODWORD(v126) = 0;
    WORD2(v126) = 4;
    BYTE6(v126) = 0;
    if (HIDWORD(v114) == (_DWORD)v114)
    {
      WTF::Vector<WebCore::Length,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Length>((uint64_t)&v113, (unint64_t)&v126);
      if (BYTE4(v126) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v126);
      }
    }
    else
    {
      v16 = (char *)v113 + 8 * HIDWORD(v114);
      *(_DWORD *)v16 = 0;
      *(_WORD *)(v16 + 5) = 0;
      v17 = BYTE4(v126);
      *((_WORD *)v16 + 2) = WORD2(v126);
      if (v17 - 2 >= 9)
      {
        if (v17 <= 0xD)
        {
          if (((1 << v17) & 0x3003) != 0)
          {
            *(_DWORD *)v16 = 0;
          }
          else if (v17 == 11)
          {
            goto LABEL_276;
          }
        }
      }
      else
      {
        v18 = BYTE6(v126);
        v16[6] = BYTE6(v126);
        if (v18)
        {
          *(_DWORD *)v16 = v126;
          goto LABEL_22;
        }
LABEL_276:
        *(_DWORD *)v16 = v126;
      }
LABEL_22:
      ++HIDWORD(v114);
    }
    LODWORD(v126) = 0;
    WORD2(v126) = 4;
    BYTE6(v126) = 0;
    if (HIDWORD(v114) == (_DWORD)v114)
    {
      WTF::Vector<WebCore::Length,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Length>((uint64_t)&v113, (unint64_t)&v126);
      if (BYTE4(v126) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v126);
      }
    }
    else
    {
      v19 = (char *)v113 + 8 * HIDWORD(v114);
      *(_DWORD *)v19 = 0;
      *(_WORD *)(v19 + 5) = 0;
      v20 = BYTE4(v126);
      *((_WORD *)v19 + 2) = WORD2(v126);
      if (v20 - 2 >= 9)
      {
        if (v20 <= 0xD)
        {
          if (((1 << v20) & 0x3003) != 0)
          {
            *(_DWORD *)v19 = 0;
          }
          else if (v20 == 11)
          {
            goto LABEL_278;
          }
        }
      }
      else
      {
        v21 = BYTE6(v126);
        v19[6] = BYTE6(v126);
        if (v21)
        {
          *(_DWORD *)v19 = v126;
          goto LABEL_27;
        }
LABEL_278:
        *(_DWORD *)v19 = v126;
      }
LABEL_27:
      ++HIDWORD(v114);
    }
LABEL_28:
    v22 = HIDWORD(v114);
LABEL_29:
    if (!v22)
    {
      __break(0xC471u);
      JUMPOUT(0x195FD87F8);
    }
    if (v22 == 1)
    {
      __break(0xC471u);
      JUMPOUT(0x195FD8800);
    }
    if (v22 <= 2)
    {
      __break(0xC471u);
      JUMPOUT(0x195FD8808);
    }
    if (v22 == 3)
    {
      __break(0xC471u);
      JUMPOUT(0x195FD8810);
    }
LABEL_33:
    v23 = v113;
    LODWORD(v100) = 0;
    BYTE6(v100) = 0;
    WORD2(v100) = *((_WORD *)v113 + 2);
    if (BYTE4(v100) - 2 >= 9)
    {
      if (BYTE4(v100) == 11)
      {
        v82 = *(_DWORD *)v113;
        *(_DWORD *)v113 = 0;
        goto LABEL_145;
      }
    }
    else
    {
      BYTE6(v100) = *((_BYTE *)v113 + 6);
      if (BYTE6(v100))
      {
        LODWORD(v100) = *(_DWORD *)v113;
        goto LABEL_36;
      }
      v82 = *(_DWORD *)v113;
LABEL_145:
      LODWORD(v100) = v82;
    }
LABEL_36:
    *((_BYTE *)v23 + 4) = 0;
    v101 = 0;
    v104 = 0;
    v102 = *((_BYTE *)v23 + 12);
    v103 = *((_BYTE *)v23 + 13);
    if (v102 - 2 >= 9)
    {
      if (v102 == 11)
      {
        v83 = *((_DWORD *)v23 + 2);
        *((_DWORD *)v23 + 2) = 0;
        goto LABEL_147;
      }
    }
    else
    {
      v104 = *((_BYTE *)v23 + 14);
      if (v104)
      {
        v101 = *((_DWORD *)v23 + 2);
        goto LABEL_39;
      }
      v83 = *((_DWORD *)v23 + 2);
LABEL_147:
      v101 = v83;
    }
LABEL_39:
    *((_BYTE *)v23 + 12) = 0;
    v105 = 0;
    v108 = 0;
    v106 = *((_BYTE *)v23 + 20);
    v107 = *((_BYTE *)v23 + 21);
    if (v106 - 2 >= 9)
    {
      if (v106 == 11)
      {
        v84 = *((_DWORD *)v23 + 4);
        *((_DWORD *)v23 + 4) = 0;
        goto LABEL_149;
      }
    }
    else
    {
      v108 = *((_BYTE *)v23 + 22);
      if (v108)
      {
        v105 = *((_DWORD *)v23 + 4);
        goto LABEL_42;
      }
      v84 = *((_DWORD *)v23 + 4);
LABEL_149:
      v105 = v84;
    }
LABEL_42:
    *((_BYTE *)v23 + 20) = 0;
    v109 = 0;
    v112 = 0;
    v110 = *((_BYTE *)v23 + 28);
    v111 = *((_BYTE *)v23 + 29);
    if (v110 - 2 >= 9)
    {
      if (v110 != 11)
        goto LABEL_45;
      v85 = *((_DWORD *)v23 + 6);
      *((_DWORD *)v23 + 6) = 0;
      goto LABEL_151;
    }
    v112 = *((_BYTE *)v23 + 30);
    if (!v112)
    {
      v85 = *((_DWORD *)v23 + 6);
LABEL_151:
      v109 = v85;
      goto LABEL_45;
    }
    v109 = *((_DWORD *)v23 + 6);
LABEL_45:
    *((_BYTE *)v23 + 28) = 0;
    WebCore::LengthBox::LengthBox((WebCore::LengthBox *)&v126, (const WebCore::LengthBox *)&v100);
    v128 = 0;
    if (v110 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v109);
    }
    if (v106 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v105);
    }
    if (v102 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v101);
    }
    if (BYTE4(v100) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v100);
    }
LABEL_49:
    v25 = v113;
    if (HIDWORD(v114))
    {
      v26 = (char *)v113 + 4;
      v27 = 8 * HIDWORD(v114);
      do
      {
        if (*v26 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)v26 - 1));
        }
        v26 += 8;
        v27 -= 8;
      }
      while (v27);
      v25 = v113;
    }
    if (v115 != (_BYTE *)v25 && v25 != 0)
    {
      v113 = 0;
      LODWORD(v114) = 0;
      WTF::fastFree(v25, v24);
    }
    WebCore::CSSTokenizer::~CSSTokenizer((WebCore::CSSTokenizer *)v118, v24);
    if (v128)
    {
      if (v128 == 1)
      {
        v91 = v127;
        v127 = 0;
        *(_BYTE *)a4 = v126;
        *(_QWORD *)(a4 + 8) = v91;
        v51 = 1;
        *(_DWORD *)(a4 + 16) = 1;
        goto LABEL_89;
      }
      goto LABEL_211;
    }
    v113 = 0;
    v114 = 0;
    *(_QWORD *)v118 = &v113;
    *(_QWORD *)v119 = &v113;
    v29 = *(unsigned int *)(a3 + 48);
    if ((_DWORD)v29 == -1)
    {
LABEL_211:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_212:
      WTF::Vector<WebCore::Length,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Length>((uint64_t)&v113, (unint64_t)&v126);
      if (BYTE4(v126) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v126);
      }
      continue;
    }
    break;
  }
  v100 = (WebCore::CSSPrimitiveValue *)v118;
  ((void (*)(WebCore::CSSPrimitiveValue **, uint64_t))off_1E33FF760[v29])(&v100, a3 + 32);
  v30 = HIDWORD(v114);
  if (HIDWORD(v114))
    goto LABEL_62;
  v118[0] = 0;
  if (!(_DWORD)v114)
  {
    WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,float>((uint64_t)&v113, (uint64_t)v118);
    v30 = HIDWORD(v114);
    if (HIDWORD(v114))
    {
LABEL_62:
      v31 = v113;
      v32 = (WTF *)((char *)v113 + 8 * v30);
      goto LABEL_63;
    }
LABEL_68:
    v34 = bmalloc::api::isoAllocate();
    if (!v128)
    {
      v35 = v34;
      v36 = v99;
      WebCore::LengthBox::LengthBox((WebCore::LengthBox *)v118, (const WebCore::LengthBox *)&v126);
      v37 = 0;
      *(_DWORD *)v35 = 1;
      *(_QWORD *)(v35 + 8) = 0;
      *(_QWORD *)(v35 + 16) = 0;
      if (v36)
      {
        v37 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)v36);
        if (v37)
        {
          do
            v94 = __ldaxr(v37);
          while (__stlxr(v94 + 1, v37));
        }
      }
      *(_QWORD *)(v35 + 24) = v37;
      WebCore::LengthBox::LengthBox((WebCore::LengthBox *)(v35 + 32), (const WebCore::LengthBox *)v118);
      *(_QWORD *)(v35 + 64) = v113;
      v39 = v114;
      v113 = 0;
      v114 = 0;
      *(_QWORD *)(v35 + 72) = v39;
      v40 = *a2;
      *a2 = 0;
      *(_QWORD *)(v35 + 80) = v40;
      *(_OWORD *)(v35 + 136) = 0u;
      *(_OWORD *)(v35 + 120) = 0u;
      *(_OWORD *)(v35 + 104) = 0u;
      *(_OWORD *)(v35 + 88) = 0u;
      if (v36)
      {
        v78 = *((_WORD *)v36 + 14);
        if ((v78 & 0xF000) == 0x9000)
        {
          *((_DWORD *)v36 + 6) += 2;
          v79 = WebCore::Document::ensureIntersectionObserverData(v36);
          v80 = v79;
          v81 = *((unsigned int *)v79 + 3);
          if ((_DWORD)v81 == *((_DWORD *)v79 + 2))
          {
            WTF::Vector<WTF::WeakPtr<WebCore::IntersectionObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::IntersectionObserver&>((uint64_t)v79, v35);
          }
          else
          {
            WTF::WeakPtr<WebCore::IntersectionObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>((uint64_t *)(*(_QWORD *)v79 + 8 * v81), v35);
            ++*((_DWORD *)v80 + 3);
          }
          if (*((_DWORD *)v36 + 6) == 2)
          {
            if ((*((_WORD *)v36 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v36);
          }
          else
          {
            *((_DWORD *)v36 + 6) -= 2;
          }
        }
        else
        {
          if ((v78 & 8) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195FD86ACLL);
          }
          v86 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v36 + 1080))(v36);
          v87 = v86;
          v88 = *(unsigned int *)(v86 + 12);
          if ((_DWORD)v88 == *(_DWORD *)(v86 + 8))
          {
            WTF::Vector<WTF::WeakPtr<WebCore::IntersectionObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::IntersectionObserver&>(v86, v35);
          }
          else
          {
            WTF::WeakPtr<WebCore::IntersectionObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>((uint64_t *)(*(_QWORD *)v86 + 8 * v88), v35);
            ++*(_DWORD *)(v87 + 12);
          }
        }
      }
      else
      {
        v41 = *(_QWORD *)(a1 + 528);
        if (v41)
        {
          v42 = *(_QWORD *)(v41 + 8);
          if (v42)
          {
            v43 = *(_QWORD *)(*(_QWORD *)(v42 + 128) + 8);
            if (v43 && *(_BYTE *)(v43 + 144) == 0)
            {
              v45 = *(unsigned int **)(v43 + 296);
              if (v45)
              {
                v45 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)v45);
                if (v45)
                {
                  do
                    v98 = __ldaxr(v45);
                  while (__stlxr(v98 + 1, v45));
                }
              }
              v46 = *(_QWORD *)(v35 + 16);
              *(_QWORD *)(v35 + 16) = v45;
              if (v46)
              {
                do
                {
                  v47 = __ldaxr((unsigned int *)v46);
                  v48 = v47 - 1;
                }
                while (__stlxr(v48, (unsigned int *)v46));
                if (!v48)
                {
                  atomic_store(1u, (unsigned int *)v46);
                  v96 = *(unsigned int *)(v46 + 28);
                  if ((_DWORD)v96)
                    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v46 + 16), (WTF::StringImpl *)(*(_QWORD *)(v46 + 16) + 32 * v96));
                  v97 = *(WTF **)(v46 + 16);
                  if (v97)
                  {
                    *(_QWORD *)(v46 + 16) = 0;
                    *(_DWORD *)(v46 + 24) = 0;
                    WTF::fastFree(v97, v38);
                  }
                  WTF::fastFree((WTF *)v46, v38);
                }
              }
            }
          }
        }
      }
      std::__sort<std::__less<double,double> &,double *>();
      *(_QWORD *)a4 = v35;
      *(_DWORD *)(a4 + 16) = 0;
      if (v123 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v122);
      }
      if (v121 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v120);
      }
      if (LOBYTE(v119[1]) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v119[0]);
      }
      if (LOBYTE(v118[1]) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v118[0]);
      }
      goto LABEL_86;
    }
    goto LABEL_211;
  }
  v31 = v113;
  v92 = v113;
  *(_QWORD *)v113 = 0;
  v32 = (WTF *)((char *)v92 + 8);
  HIDWORD(v114) = 1;
LABEL_63:
  while (*(double *)v31 >= 0.0 && *(double *)v31 <= 1.0)
  {
    v31 = (WTF *)((char *)v31 + 8);
    if (v31 == v32)
      goto LABEL_68;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)a4 = 32;
  *(_DWORD *)(a4 + 16) = 1;
LABEL_86:
  v50 = v113;
  if (v113)
  {
    v113 = 0;
    LODWORD(v114) = 0;
    WTF::fastFree(v50, v49);
  }
  v51 = v128;
  if (v128 != -1)
LABEL_89:
    ((void (*)(unsigned int *, uint64_t *))off_1E33FF6B0[v51])(v118, &v126);
  result = v99;
  v99 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(result);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  return result;
}

void WTF::switchOn<std::variant<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>> &,WebCore::IntersectionObserver::create(WebCore::Document&,WTF::Ref<WebCore::IntersectionObserverCallback,WTF::RawPtrTraits<WebCore::IntersectionObserverCallback>,WTF::DefaultRefDerefTraits<WebCore::IntersectionObserverCallback>> &&,WebCore::IntersectionObserver::Init &&)::$_0,WebCore::IntersectionObserver::create(WebCore::Document&,WTF::Ref<WebCore::IntersectionObserverCallback,WTF::RawPtrTraits<WebCore::IntersectionObserverCallback>,WTF::DefaultRefDerefTraits<WebCore::IntersectionObserverCallback>> &,WebCore::IntersectionObserver::Init)::$_1>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  WebCore::IntersectionObserver *v4;
  _QWORD v5[2];
  _QWORD *v6;

  v5[0] = a2;
  v5[1] = a3;
  v3 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v3 == -1)
  {
    v4 = (WebCore::IntersectionObserver *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::IntersectionObserver::~IntersectionObserver(v4);
  }
  else
  {
    v6 = v5;
    ((void (*)(_QWORD **, uint64_t))off_1E33FF750[v3])(&v6, a1);
  }
}

void WebCore::IntersectionObserver::~IntersectionObserver(WebCore::IntersectionObserver *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  __int16 v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  WebCore::IntersectionObserverEntry **v20;
  uint64_t v21;
  WebCore::IntersectionObserverEntry *v22;
  bmalloc::api *v23;
  void *v24;
  WTF *v25;
  void *v26;
  void *v27;
  _DWORD *v28;
  WTF *v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;
  WTF *v43;

  v2 = *((_QWORD *)this + 3);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
  {
    v4 = *(_DWORD *)(v3 + 24);
    *(_DWORD *)(v3 + 24) = v4 + 4;
    v5 = *(_WORD *)(v3 + 28);
    if ((v5 & 0xF000) == 0x9000)
    {
      WTF::Vector<WTF::WeakPtr<WebCore::IntersectionObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeFirst<WebCore::IntersectionObserver*>(*(_QWORD *)(v3 + 2088), this);
      if (*(_DWORD *)(v3 + 24) == 2)
      {
        if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v3);
      }
      else
      {
        *(_DWORD *)(v3 + 24) -= 2;
      }
    }
    else
    {
      v6 = v4 + 2;
      if (v6)
      {
        *(_DWORD *)(v3 + 24) = v6;
      }
      else if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v3);
        v5 = *(_WORD *)(v3 + 28);
      }
      if ((v5 & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195FD8CB8);
      }
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 1088))(v3);
      v9 = *(unsigned int *)(v7 + 12);
      if ((_DWORD)v9)
      {
        v10 = v7;
        v11 = (_QWORD *)(*(_QWORD *)v7 + 8);
        while (1)
        {
          v12 = *(v11 - 1);
          if (v12)
          {
            if (*(WebCore::IntersectionObserver **)(v12 + 8) == this)
              break;
          }
          ++v11;
          if (!--v9)
            goto LABEL_20;
        }
        *(v11 - 1) = 0;
        do
        {
          v13 = __ldaxr((unsigned int *)v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, (unsigned int *)v12));
        if (!v14)
        {
          atomic_store(1u, (unsigned int *)v12);
          WTF::fastFree((WTF *)v12, v8);
        }
        v15 = *(unsigned int *)(v10 + 12);
        v16 = *(_QWORD *)v10 + 8 * v15;
        while (v11 != (_QWORD *)v16)
        {
          *(v11 - 1) = *v11;
          *v11++ = 0;
        }
        *(_DWORD *)(v10 + 12) = v15 - 1;
      }
    }
LABEL_20:
    WebCore::IntersectionObserver::disconnect((uint64_t)this);
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  else
  {
    WebCore::IntersectionObserver::disconnect((uint64_t)this);
  }
  WTF::Vector<WebCore::GCReachableRef<WebCore::Element,void>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 136, v17);
  v19 = *((unsigned int *)this + 33);
  if ((_DWORD)v19)
  {
    v20 = (WebCore::IntersectionObserverEntry **)*((_QWORD *)this + 15);
    v21 = 8 * v19;
    do
    {
      v22 = *v20;
      *v20 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
        {
          WebCore::IntersectionObserverEntry::~IntersectionObserverEntry(v22, v18);
          bmalloc::api::isoDeallocate(v23, v24);
        }
        else
        {
          --*(_DWORD *)v22;
        }
      }
      ++v20;
      v21 -= 8;
    }
    while (v21);
  }
  v25 = (WTF *)*((_QWORD *)this + 15);
  if (v25)
  {
    *((_QWORD *)this + 15) = 0;
    *((_DWORD *)this + 32) = 0;
    WTF::fastFree(v25, v18);
  }
  WTF::Vector<WebCore::GCReachableRef<WebCore::Element,void>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 104, v18);
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 88, v26);
  v28 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v28)
  {
    if (v28[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 16))(v28);
    else
      --v28[4];
  }
  v29 = (WTF *)*((_QWORD *)this + 8);
  if (v29)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v29, v27);
  }
  if (*((_BYTE *)this + 60) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 14));
  }
  if (*((_BYTE *)this + 52) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 12));
  }
  if (*((_BYTE *)this + 44) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 10));
  }
  if (*((_BYTE *)this + 36) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 8));
  }
  v30 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v30)
  {
    do
    {
      v31 = __ldaxr((unsigned int *)v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, (unsigned int *)v30));
    if (!v32)
    {
      atomic_store(1u, (unsigned int *)v30);
      v40 = *(unsigned int *)(v30 + 28);
      if ((_DWORD)v40)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v30 + 16), (WTF::StringImpl *)(*(_QWORD *)(v30 + 16) + 32 * v40));
      v41 = *(WTF **)(v30 + 16);
      if (v41)
      {
        *(_QWORD *)(v30 + 16) = 0;
        *(_DWORD *)(v30 + 24) = 0;
        WTF::fastFree(v41, v27);
      }
      WTF::fastFree((WTF *)v30, v27);
    }
  }
  v33 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v33)
  {
    do
    {
      v34 = __ldaxr((unsigned int *)v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, (unsigned int *)v33));
    if (!v35)
    {
      atomic_store(1u, (unsigned int *)v33);
      v42 = *(unsigned int *)(v33 + 28);
      if ((_DWORD)v42)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v33 + 16), (WTF::StringImpl *)(*(_QWORD *)(v33 + 16) + 32 * v42));
      v43 = *(WTF **)(v33 + 16);
      if (v43)
      {
        *(_QWORD *)(v33 + 16) = 0;
        *(_DWORD *)(v33 + 24) = 0;
        WTF::fastFree(v43, v27);
      }
      WTF::fastFree((WTF *)v33, v27);
    }
  }
  v36 = *((_QWORD *)this + 1);
  if (v36)
  {
    *(_QWORD *)(v36 + 8) = 0;
    v37 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v37)
    {
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (!v39)
      {
        atomic_store(1u, v37);
        WTF::fastFree((WTF *)v37, v27);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t WTF::Vector<WTF::WeakPtr<WebCore::IntersectionObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeFirst<WebCore::IntersectionObserver*>(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(unsigned int *)(result + 12);
  if ((_DWORD)v2)
  {
    v3 = result;
    v4 = *(uint64_t **)result;
    if (a2)
    {
      v5 = 0;
      while (1)
      {
        result = v4[v5];
        if (result)
        {
          if (*(void **)(result + 8) == a2)
            break;
        }
        if (v2 == ++v5)
          return result;
      }
    }
    else
    {
      result = *v4;
      if (!*v4)
      {
        v7 = v4;
LABEL_24:
        *v7 = 0;
        goto LABEL_18;
      }
      v5 = 0;
      v6 = v2 - 1;
      v7 = v4;
      while (*(_QWORD *)(result + 8))
      {
        if (v6 == v5)
          return result;
        v8 = v7[1];
        ++v7;
        result = v8;
        ++v5;
        if (!v8)
          goto LABEL_24;
      }
    }
    v7 = &v4[v5];
    *v7 = 0;
    do
    {
      v9 = __ldaxr((unsigned int *)result);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unsigned int *)result));
    if (!v10)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, a2);
    }
LABEL_18:
    v11 = v7 + 1;
    v12 = *(unsigned int *)(v3 + 12);
    v13 = *(_QWORD *)v3 + 8 * v12;
    while (v11 != (_QWORD *)v13)
    {
      *(v11 - 1) = *v11;
      *v11++ = 0;
    }
    *(_DWORD *)(v3 + 12) = v12 - 1;
  }
  return result;
}

uint64_t WebCore::IntersectionObserver::disconnect(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  WTF *v26;

  v1 = *(unsigned int *)(this + 100);
  if ((_DWORD)v1)
  {
    v2 = this;
    v3 = *(uint64_t **)(this + 88);
    v4 = 8 * v1;
    do
    {
      v5 = *v3++;
      this = WebCore::IntersectionObserver::removeTargetRegistration((WebCore::IntersectionObserver *)v2, *(WebCore::Element **)(v5 + 8));
      v4 -= 8;
    }
    while (v4);
    if (*(_DWORD *)(v2 + 96))
    {
      v7 = *(unsigned int *)(v2 + 100);
      if ((_DWORD)v7)
      {
        v8 = *(uint64_t **)(v2 + 88);
        v9 = &v8[v7];
        do
        {
          v10 = *v8;
          *v8 = 0;
          if (v10)
          {
            do
            {
              v11 = __ldaxr((unsigned int *)v10);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, (unsigned int *)v10));
            if (!v12)
            {
              atomic_store(1u, (unsigned int *)v10);
              v25 = *(unsigned int *)(v10 + 28);
              if ((_DWORD)v25)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v10 + 16), (WTF::StringImpl *)(*(_QWORD *)(v10 + 16) + 32 * v25));
              v26 = *(WTF **)(v10 + 16);
              if (v26)
              {
                *(_QWORD *)(v10 + 16) = 0;
                *(_DWORD *)(v10 + 24) = 0;
                WTF::fastFree(v26, v6);
              }
              WTF::fastFree((WTF *)v10, v6);
            }
          }
          ++v8;
        }
        while (v8 != v9);
        *(_DWORD *)(v2 + 100) = 0;
      }
      this = *(_QWORD *)(v2 + 88);
      if (this)
      {
        *(_QWORD *)(v2 + 88) = 0;
        *(_DWORD *)(v2 + 96) = 0;
        this = WTF::fastFree((WTF *)this, v6);
      }
    }
    if (*(_DWORD *)(v2 + 144))
    {
      v24 = (uint64_t *)(v2 + 136);
      if (*(_DWORD *)(v2 + 148))
        WTF::Vector<WebCore::GCReachableRef<WebCore::Element,void>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(v2 + 136, 0);
      this = *v24;
      if (*v24)
      {
        *(_QWORD *)(v2 + 136) = 0;
        *(_DWORD *)(v2 + 144) = 0;
        this = WTF::fastFree((WTF *)this, v6);
      }
    }
    v13 = *(_QWORD *)(v2 + 24);
    if (v13 && (v14 = *(_QWORD *)(v13 + 8)) != 0)
    {
      v15 = *(_QWORD *)(v14 + 40);
    }
    else
    {
      v15 = *(_QWORD *)(v2 + 16);
      if (!v15)
        return this;
    }
    v16 = *(_QWORD *)(v15 + 8);
    if (v16)
    {
      v17 = *(_DWORD *)(v16 + 24);
      *(_DWORD *)(v16 + 24) = v17 + 2;
      v18 = *(unsigned int *)(v16 + 2028);
      if ((_DWORD)v18)
      {
        v19 = (_QWORD *)(*(_QWORD *)(v16 + 2016) + 8);
        while (1)
        {
          this = *(v19 - 1);
          if (this)
          {
            if (*(_QWORD *)(this + 8) == v2)
              break;
          }
          ++v19;
          if (!--v18)
            goto LABEL_33;
        }
        *(v19 - 1) = 0;
        do
        {
          v20 = __ldaxr((unsigned int *)this);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, (unsigned int *)this));
        if (!v21)
        {
          atomic_store(1u, (unsigned int *)this);
          this = WTF::fastFree((WTF *)this, v6);
        }
        v22 = *(unsigned int *)(v16 + 2028);
        v23 = *(_QWORD *)(v16 + 2016) + 8 * v22;
        while (v19 != (_QWORD *)v23)
        {
          *(v19 - 1) = *v19;
          *v19++ = 0;
        }
        *(_DWORD *)(v16 + 2028) = v22 - 1;
        v17 = *(_DWORD *)(v16 + 24) - 2;
      }
LABEL_33:
      if (v17)
      {
        *(_DWORD *)(v16 + 24) = v17;
      }
      else if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
      {
        return WebCore::Node::removedLastRef((WebCore::Node *)v16);
      }
    }
  }
  return this;
}

void WebCore::IntersectionObserver::rootMargin(WebCore::IntersectionObserver *this@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  int v5;
  const char *v6;
  int v7;
  int v8;
  int v9;
  const char *v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  int v15;
  int v16;
  int v17;
  const char *v18;
  int v19;
  WTF::StringImpl *v20;
  _QWORD v21[2];
  int v22;
  char v23;
  const char *v24;
  int v25;
  const char *v26;
  int v27;
  int v28;

  v21[0] = 0;
  v21[1] = 0;
  v22 = 0;
  v23 = 1;
  v4 = *((unsigned __int8 *)this + 36);
  if (v4 == 11)
  {
    v5 = 0;
LABEL_5:
    v6 = "px";
    v7 = 2;
    goto LABEL_6;
  }
  if (*((_BYTE *)this + 38))
    v5 = (int)*((float *)this + 8);
  else
    v5 = *((_DWORD *)this + 8);
  if (v4 != 3)
    goto LABEL_5;
  v6 = "%";
  v7 = 1;
LABEL_6:
  v28 = v5;
  v26 = v6;
  v27 = v7;
  v24 = " ";
  v25 = 1;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)v21, (unsigned int *)&v28, (uint64_t)&v26, (uint64_t)&v24);
  v8 = *((unsigned __int8 *)this + 44);
  if (v8 == 11)
  {
    v9 = 0;
LABEL_10:
    v10 = "px";
    v11 = 2;
    goto LABEL_11;
  }
  if (*((_BYTE *)this + 46))
    v9 = (int)*((float *)this + 10);
  else
    v9 = *((_DWORD *)this + 10);
  if (v8 != 3)
    goto LABEL_10;
  v10 = "%";
  v11 = 1;
LABEL_11:
  v28 = v9;
  v26 = v10;
  v27 = v11;
  v24 = " ";
  v25 = 1;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)v21, (unsigned int *)&v28, (uint64_t)&v26, (uint64_t)&v24);
  v12 = *((unsigned __int8 *)this + 52);
  if (v12 == 11)
  {
    v13 = 0;
LABEL_15:
    v14 = "px";
    v15 = 2;
    goto LABEL_16;
  }
  if (*((_BYTE *)this + 54))
    v13 = (int)*((float *)this + 12);
  else
    v13 = *((_DWORD *)this + 12);
  if (v12 != 3)
    goto LABEL_15;
  v14 = "%";
  v15 = 1;
LABEL_16:
  v28 = v13;
  v26 = v14;
  v27 = v15;
  v24 = " ";
  v25 = 1;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)v21, (unsigned int *)&v28, (uint64_t)&v26, (uint64_t)&v24);
  v16 = *((unsigned __int8 *)this + 60);
  if (v16 == 11)
  {
    v17 = 0;
  }
  else
  {
    if (*((_BYTE *)this + 62))
      v17 = (int)*((float *)this + 14);
    else
      v17 = *((_DWORD *)this + 14);
    if (v16 == 3)
    {
      v18 = "%";
      v19 = 1;
      goto LABEL_21;
    }
  }
  v18 = "px";
  v19 = 2;
LABEL_21:
  v28 = v17;
  v26 = v18;
  v27 = v19;
  v24 = "";
  v25 = 0;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)v21, (unsigned int *)&v28, (uint64_t)&v26, (uint64_t)&v24);
  WTF::StringBuilder::toString((WTF::StringBuilder *)v21, a2);
  WTF::StringBuilder::~StringBuilder((WTF::StringBuilder *)v21, v20);
}

uint64_t WebCore::IntersectionObserver::observe(uint64_t this, WebCore::Element *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  void *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  void *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  WebCore::Element *v58;
  WTF *v59;
  __int128 v60;
  int v61;

  v3 = this;
  v4 = *(_QWORD *)(this + 24);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    v6 = *(_QWORD *)(v5 + 40);
  }
  else
  {
    v6 = *(_QWORD *)(this + 16);
    if (!v6)
      return this;
  }
  if (*(_QWORD *)(v6 + 8) && *(_QWORD *)(this + 80))
  {
    v7 = *(unsigned int *)(this + 100);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)(this + 88);
      while (!*(_QWORD *)v8 || *(WebCore::Element **)(*(_QWORD *)v8 + 8) != a2)
      {
        v8 += 8;
        if (!--v7)
          goto LABEL_11;
      }
      return this;
    }
LABEL_11:
    v9 = (*(uint64_t (**)(WebCore::Element *))(*(_QWORD *)a2 + 1080))(a2);
    v10 = *(_QWORD *)(v3 + 8);
    if (v10)
      goto LABEL_82;
    v10 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = v3;
    v49 = *(unsigned int **)(v3 + 8);
    *(_QWORD *)(v3 + 8) = v10;
    if (!v49)
      goto LABEL_82;
    do
    {
      v50 = __ldaxr(v49);
      v51 = v50 - 1;
    }
    while (__stlxr(v51, v49));
    if (!v51)
    {
      atomic_store(1u, v49);
      WTF::fastFree((WTF *)v49, v48);
    }
    v10 = *(_QWORD *)(v3 + 8);
    if (v10)
    {
LABEL_82:
      do
        v11 = __ldaxr((unsigned int *)v10);
      while (__stlxr(v11 + 1, (unsigned int *)v10));
    }
    v59 = (WTF *)v10;
    LOBYTE(v60) = 0;
    BYTE8(v60) = 0;
    v12 = *(unsigned int *)(v9 + 28);
    if ((_DWORD)v12 == *(_DWORD *)(v9 + 24))
    {
      v13 = WTF::Vector<WebCore::IntersectionObserverRegistration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9 + 16, v12 + 1, (unint64_t)&v59);
      v15 = *(_QWORD *)(v9 + 16) + 24 * *(unsigned int *)(v9 + 28);
      v16 = *(_QWORD *)v13;
      *(_QWORD *)v13 = 0;
      *(_QWORD *)v15 = v16;
      *(_OWORD *)(v15 + 8) = *(_OWORD *)(v13 + 8);
      v17 = (unsigned int *)v59;
      ++*(_DWORD *)(v9 + 28);
      v59 = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          WTF::fastFree((WTF *)v17, v14);
        }
      }
    }
    else
    {
      v52 = *(_QWORD *)(v9 + 16) + 24 * v12;
      v59 = 0;
      *(_QWORD *)v52 = v10;
      *(_OWORD *)(v52 + 8) = v60;
      ++*(_DWORD *)(v9 + 28);
    }
    v20 = (uint64_t *)(v3 + 88);
    v21 = *(unsigned int *)(v3 + 100);
    if ((_DWORD)v21 == *(_DWORD *)(v3 + 96))
    {
      v33 = v21 + (v21 >> 2);
      if (v33 >= 0x10)
        v34 = v33 + 1;
      else
        v34 = 16;
      if (v34 <= v21 + 1)
        v35 = v21 + 1;
      else
        v35 = v34;
      WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v20, v35);
      v36 = *(unsigned int *)(v3 + 100);
      v37 = *(_QWORD *)(v3 + 88);
      v38 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
      if (v38)
      {
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 + 1, v38));
      }
      *(_QWORD *)(v37 + 8 * v36) = v38;
    }
    else
    {
      v22 = *v20;
      v23 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
      if (v23)
      {
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 + 1, v23));
      }
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    ++*(_DWORD *)(v3 + 100);
    v25 = (uint64_t *)(v3 + 136);
    v26 = *(unsigned int *)(v3 + 148);
    if ((_DWORD)v26 == *(_DWORD *)(v3 + 144))
    {
      v40 = v26 + (v26 >> 2);
      if (v40 >= 0x10)
        v41 = v40 + 1;
      else
        v41 = 16;
      if (v41 <= v26 + 1)
        v42 = v26 + 1;
      else
        v42 = v41;
      WTF::Vector<WebCore::GCReachableRef<WebCore::Element,void>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v25, v42);
      v26 = *(unsigned int *)(v3 + 148);
      v27 = *(_QWORD *)(v3 + 136);
    }
    else
    {
      v27 = *v25;
    }
    *((_DWORD *)a2 + 6) += 2;
    *(_QWORD *)(v27 + 8 * v26) = a2;
    {
      WebCore::GCReachableRefMap::map(void)::map = 0;
    }
    v58 = a2;
    v61 = 0;
    WTF::HashMap<WebCore::EventTarget *,unsigned int,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(&WebCore::GCReachableRefMap::map(void)::map, &v58, &v61, (uint64_t)&v59);
    ++*((_DWORD *)v59 + 2);
    if (BYTE8(v60))
      *((_QWORD *)a2 + 2) |= 0x4000000000000uLL;
    ++*(_DWORD *)(v3 + 148);
    v28 = *(_QWORD *)(v3 + 24);
    if (v28 && (v29 = *(_QWORD *)(v28 + 8)) != 0)
    {
      v30 = *(_QWORD *)(v29 + 40);
    }
    else
    {
      v30 = *(_QWORD *)(v3 + 16);
      if (!v30)
      {
        v31 = 0;
        goto LABEL_51;
      }
    }
    v31 = *(_QWORD *)(v30 + 8);
    if (v31)
    {
      v32 = 0;
      *(_DWORD *)(v31 + 24) += 2;
      goto LABEL_33;
    }
LABEL_51:
    v32 = 1;
LABEL_33:
    if ((_DWORD)v21)
      goto LABEL_34;
    v43 = (uint64_t *)(v31 + 2016);
    v44 = *(unsigned int *)(v31 + 2028);
    if ((_DWORD)v44 == *(_DWORD *)(v31 + 2024))
    {
      WTF::Vector<WTF::WeakPtr<WebCore::IntersectionObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::IntersectionObserver&>((uint64_t)v43, v3);
LABEL_34:
      this = WebCore::Document::scheduleInitialIntersectionObservationUpdate(v31);
      if ((v32 & 1) == 0)
      {
        if (*(_DWORD *)(v31 + 24) == 2)
        {
          if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)v31);
        }
        else
        {
          *(_DWORD *)(v31 + 24) -= 2;
        }
      }
      return this;
    }
    v45 = *v43;
    v46 = *(_QWORD *)(v3 + 8);
    if (!v46)
    {
      v57 = v45;
      v46 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v46 = 1;
      *(_QWORD *)(v46 + 8) = v3;
      v54 = *(unsigned int **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = v46;
      if (v54)
      {
        do
        {
          v55 = __ldaxr(v54);
          v56 = v55 - 1;
        }
        while (__stlxr(v56, v54));
        if (!v56)
        {
          atomic_store(1u, v54);
          WTF::fastFree((WTF *)v54, v53);
        }
        v46 = *(_QWORD *)(v3 + 8);
        v45 = v57;
        if (!v46)
          goto LABEL_64;
      }
      else
      {
        v45 = v57;
      }
    }
    do
      v47 = __ldaxr((unsigned int *)v46);
    while (__stlxr(v47 + 1, (unsigned int *)v46));
LABEL_64:
    *(_QWORD *)(v45 + 8 * v44) = v46;
    ++*(_DWORD *)(v31 + 2028);
    goto LABEL_34;
  }
  return this;
}

uint64_t WebCore::IntersectionObserver::unobserve(uint64_t **this, WebCore::Element *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t *v6;
  WebCore::Element *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  WebCore::Element *v12;

  result = WebCore::IntersectionObserver::removeTargetRegistration((WebCore::IntersectionObserver *)this, a2);
  if ((_DWORD)result)
  {
    v12 = a2;
    result = WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeFirstMatching<BOOL WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeFirst<WebCore::Element*>(WebCore::Element* const&)::{lambda(WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>> const&)#1}>((uint64_t)(this + 11), &v12);
    v5 = *((unsigned int *)this + 37);
    if ((_DWORD)v5)
    {
      v6 = this[17];
      while ((WebCore::Element *)*v6 != a2)
      {
        ++v6;
        if (!--v5)
          goto LABEL_15;
      }
      {
        WebCore::GCReachableRefMap::map(void)::map = 0;
      }
      v12 = a2;
      if (WTF::HashCountedSet<WebCore::EventTarget *,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>>::remove(&WebCore::GCReachableRefMap::map(void)::map, &v12))*((_QWORD *)a2 + 2) &= ~0x4000000000000uLL;
      v7 = (WebCore::Element *)*v6;
      *v6 = 0;
      if (v7)
      {
        if (*((_DWORD *)v7 + 6) == 2)
        {
          if ((*((_WORD *)v7 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v7);
        }
        else
        {
          *((_DWORD *)v7 + 6) -= 2;
        }
      }
      result = WTF::VectorMover<false,WebCore::GCReachableRef<WebCore::Element,void>>::moveOverlapping((unint64_t)(v6 + 1), &this[17][*((unsigned int *)this + 37)], v6);
      --*((_DWORD *)this + 37);
    }
LABEL_15:
    if (!*((_DWORD *)this + 25))
    {
      v8 = this[3];
      if (v8 && (v9 = v8[1]) != 0)
      {
        v10 = *(uint64_t **)(v9 + 40);
      }
      else
      {
        v10 = this[2];
        if (!v10)
          return result;
      }
      v11 = v10[1];
      if (v11)
      {
        *(_DWORD *)(v11 + 24) += 2;
        result = WebCore::Document::removeIntersectionObserver(v11, this);
        if (*(_DWORD *)(v11 + 24) == 2)
        {
          if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)v11);
        }
        else
        {
          *(_DWORD *)(v11 + 24) -= 2;
        }
      }
    }
  }
  return result;
}

BOOL WebCore::IntersectionObserver::removeTargetRegistration(WebCore::IntersectionObserver *this, WebCore::Element *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int **v7;
  uint64_t v8;
  BOOL v9;
  unsigned int *v10;
  unsigned int v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;

  v3 = (*(uint64_t (**)(WebCore::Element *))(*(_QWORD *)a2 + 1088))(a2);
  if (v3 && (v5 = v3, v6 = *(unsigned int *)(v3 + 28), (_DWORD)v6))
  {
    v7 = *(unsigned int ***)(v3 + 16);
    v8 = 0;
    v9 = 1;
    if (this)
    {
      while (1)
      {
        v10 = *v7;
        if (*v7)
        {
          if (*((WebCore::IntersectionObserver **)v10 + 1) == this)
            break;
        }
        v9 = ++v8 < v6;
        v7 += 3;
        if (v6 == v8)
          return 0;
      }
LABEL_12:
      *v7 = 0;
      do
      {
        v12 = __ldaxr(v10);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v10));
      if (!v13)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, v4);
      }
    }
    else
    {
      while (1)
      {
        v10 = *v7;
        if (!*v7)
          break;
        if (!*((_QWORD *)v10 + 1))
          goto LABEL_12;
        v9 = ++v8 < v6;
        v7 += 3;
        if (v6 == v8)
          return 0;
      }
      *v7 = 0;
    }
    v14 = (uint64_t *)(v7 + 3);
    v15 = *(_DWORD *)(v5 + 28);
    if (v7 + 3 != (unsigned int **)(*(_QWORD *)(v5 + 16) + 24 * v15))
    {
      v20 = *(_QWORD *)(v5 + 16) + 24 * v15;
      do
      {
        v16 = (unsigned int *)*v14;
        *v14 = 0;
        *v7 = v16;
        *(_OWORD *)(v7 + 1) = *(_OWORD *)(v14 + 1);
        v17 = (unsigned int *)*v14;
        *v14 = 0;
        if (v17)
        {
          do
          {
            v18 = __ldaxr(v17);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, v17));
          if (!v19)
          {
            atomic_store(1u, v17);
            WTF::fastFree((WTF *)v17, v4);
          }
        }
        v7 += 3;
        v14 += 3;
      }
      while (v14 != (uint64_t *)v20);
      v15 = *(_DWORD *)(v5 + 28);
    }
    *(_DWORD *)(v5 + 28) = v15 - 1;
  }
  else
  {
    return 0;
  }
  return v9;
}

unsigned int *WebCore::IntersectionObserver::targetDestroyed(WebCore::IntersectionObserver *this, WebCore::Element *a2)
{
  unsigned int *result;
  uint64_t v5;
  uint64_t *v6;
  void *v7;
  WebCore::Element *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  WebCore::Element *v14;

  v14 = a2;
  result = (unsigned int *)WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeFirstMatching<BOOL WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeFirst<WebCore::Element*>(WebCore::Element* const&)::{lambda(WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>> const&)#1}>((uint64_t)this + 88, &v14);
  v5 = *((unsigned int *)this + 37);
  if ((_DWORD)v5)
  {
    v6 = (uint64_t *)*((_QWORD *)this + 17);
    while ((WebCore::Element *)*v6 != a2)
    {
      ++v6;
      if (!--v5)
        goto LABEL_14;
    }
    {
      WebCore::GCReachableRefMap::map(void)::map = 0;
    }
    v14 = a2;
    if (WTF::HashCountedSet<WebCore::EventTarget *,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>>::remove(&WebCore::GCReachableRefMap::map(void)::map, &v14))*((_QWORD *)a2 + 2) &= ~0x4000000000000uLL;
    v8 = (WebCore::Element *)*v6;
    *v6 = 0;
    if (v8)
    {
      if (*((_DWORD *)v8 + 6) == 2)
      {
        if ((*((_WORD *)v8 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v8, v7);
      }
      else
      {
        *((_DWORD *)v8 + 6) -= 2;
      }
    }
    result = (unsigned int *)WTF::VectorMover<false,WebCore::GCReachableRef<WebCore::Element,void>>::moveOverlapping((unint64_t)(v6 + 1), (uint64_t *)(*((_QWORD *)this + 17) + 8 * *((unsigned int *)this + 37)), v6);
    --*((_DWORD *)this + 37);
  }
LABEL_14:
  if (!*((_DWORD *)this + 25))
  {
    v9 = *((_QWORD *)this + 3);
    if (v9 && (v10 = *(_QWORD *)(v9 + 8)) != 0)
    {
      v11 = *(_QWORD *)(v10 + 40);
    }
    else
    {
      v11 = *((_QWORD *)this + 2);
      if (!v11)
        return result;
    }
    v12 = *(_QWORD *)(v11 + 8);
    if (v12)
    {
      *(_DWORD *)(v12 + 24) += 2;
      result = (unsigned int *)WebCore::Document::removeIntersectionObserver(v12, this);
      if (*(_DWORD *)(v12 + 24) == 2)
      {
        if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)v12, v13);
      }
      else
      {
        *(_DWORD *)(v12 + 24) -= 2;
      }
    }
  }
  return result;
}

uint64_t *WebCore::IntersectionObserver::rootDestroyed(WebCore::IntersectionObserver *this)
{
  void *v2;

  WebCore::IntersectionObserver::disconnect((uint64_t)this);
  return WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::~WeakPtr((uint64_t *)this + 3, v2);
}

BOOL WTF::areEssentiallyEqual<float>(float a1, float a2, float a3)
{
  float v4;
  float v5;
  float v6;
  float v9;
  float v10;

  if (a1 == a2)
    return 1;
  v4 = vabds_f32(a1, a2);
  v5 = fabsf(a1);
  v6 = 3.4028e38;
  if (v5 >= 1.0 || (float)(v5 * 3.4028e38) >= v4)
  {
    if (v5 <= 1.0 || (float)(v5 * 1.1755e-38) <= v4)
      v6 = v4 / v5;
    else
      v6 = 0.0;
  }
  if (v6 > a3)
    return 0;
  v9 = fabsf(a2);
  v10 = 3.4028e38;
  if (v9 >= 1.0 || (float)(v9 * 3.4028e38) >= v4)
  {
    if (v9 > 1.0 && (float)(v9 * 1.1755e-38) > v4)
      v10 = 0.0;
    else
      v10 = v4 / v9;
  }
  return v10 <= a3;
}

BOOL WebCore::IntersectionObserver::isReachableFromOpaqueRoots(WebCore::IntersectionObserver *this, JSC::AbstractSlotVisitor *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::Node *v8;
  WTF::ConcurrentPtrHashSet *v9;
  _DWORD *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  WebCore::Node *v17;
  uint64_t v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WebCore::Node *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::Node *v29;

  v4 = *((unsigned int *)this + 25);
  if ((_DWORD)v4)
  {
    v5 = *((_QWORD *)this + 11);
    v6 = v5 + 8 * v4;
    do
    {
      if (*(_QWORD *)v5 && (v7 = *(_QWORD *)(*(_QWORD *)v5 + 8)) != 0)
      {
        v27 = v6;
        v28 = v5;
        if ((*(_BYTE *)(v7 + 22) & 8) != 0)
          v8 = *(WebCore::Node **)(*(_QWORD *)(v7 + 40) + 8);
        else
          v8 = WebCore::Node::traverseToOpaqueRoot((WebCore::Node *)v7);
        v5 = v28;
        v6 = v27;
      }
      else
      {
        v8 = 0;
      }
      v9 = (WTF::ConcurrentPtrHashSet *)*((_QWORD *)a2 + 15);
      v10 = (_DWORD *)*((_QWORD *)v9 + 6);
      if ((_DWORD *)((char *)v9 + 56) == v10)
      {
        v29 = v8;
        v24 = v5;
        v25 = v6;
        v26 = WTF::ConcurrentPtrHashSet::containsImplSlow(v9, v8);
        v6 = v25;
        v5 = v24;
        v8 = v29;
        if (v26)
        {
LABEL_22:
          if (*((_BYTE *)a2 + 131))
            (*(void (**)(JSC::AbstractSlotVisitor *, WebCore::Node *))(*(_QWORD *)a2 + 152))(a2, v8);
          return 1;
        }
      }
      else
      {
        v11 = v10[1];
        v12 = ((unint64_t)v8 + ~((_QWORD)v8 << 32)) ^ (((unint64_t)v8 + ~((_QWORD)v8 << 32)) >> 22);
        v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
        v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
        v15 = v11 & ((v14 >> 31) ^ v14);
        v16 = v15;
        while (1)
        {
          v17 = *(WebCore::Node **)&v10[2 * v16 + 4];
          if (!v17)
            break;
          if (v17 == v8)
            goto LABEL_22;
          v16 = (v16 + 1) & v11;
          if (v16 == v15)
          {
            __break(0xC471u);
            JUMPOUT(0x195FD9EB8);
          }
        }
      }
      v5 += 8;
    }
    while (v5 != v6);
  }
  v18 = *((unsigned int *)this + 29);
  if (!(_DWORD)v18)
    return *((_DWORD *)this + 37) != 0;
  v20 = (uint64_t *)*((_QWORD *)this + 13);
  v21 = 8 * v18;
  while (1)
  {
    v22 = *v20;
    if (*v20)
      v23 = (*(_BYTE *)(v22 + 22) & 8) != 0
          ? *(WebCore::Node **)(*(_QWORD *)(v22 + 40) + 8)
          : WebCore::Node::traverseToOpaqueRoot((WebCore::Node *)v22);
    else
      v23 = 0;
    if ((JSC::AbstractSlotVisitor::containsOpaqueRoot(a2, v23) & 1) != 0)
      break;
    ++v20;
    v21 -= 8;
    if (!v21)
      return *((_DWORD *)this + 37) != 0;
  }
  return 1;
}

uint64_t WebCore::LocalDOMWindow::dispatchAllPendingBeforeUnloadEvents(WebCore::LocalDOMWindow *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  WebCore::FrameLoader *v32;
  _BOOL8 shouldClose;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  WTF *v42;
  void *v43;
  _QWORD *v44;
  uint64_t v45;
  WTF *v46;
  _DWORD *v47;
  _QWORD *v48;

  if ((byte_1ECE8389A & 1) == 0)
  {
    qword_1ECE838A0 = 0;
    v2 = 1;
    byte_1ECE8389A = 1;
    return v2;
  }
  if (qword_1ECE838A0)
  {
    v1 = *(unsigned int *)(qword_1ECE838A0 - 12);
    if ((_DWORD)v1)
    {
      if ((_MergedGlobals_211 & 1) == 0)
      {
        if (v1 >> 29)
          goto LABEL_70;
        v4 = WTF::fastMalloc((WTF *)(8 * v1));
        v6 = (WTF *)v4;
        if (!qword_1ECE838A0 || !*(_DWORD *)(qword_1ECE838A0 - 12))
          goto LABEL_56;
        v7 = *(unsigned int *)(qword_1ECE838A0 - 4);
        if ((_DWORD)v7)
        {
          v8 = 16 * v7;
          v9 = (uint64_t *)qword_1ECE838A0;
          while ((unint64_t)(*v9 + 1) <= 1)
          {
            v9 += 2;
            v8 -= 16;
            if (!v8)
              goto LABEL_56;
          }
        }
        else
        {
          v9 = (uint64_t *)qword_1ECE838A0;
        }
        v10 = qword_1ECE838A0 + 16 * v7;
        if (v9 == (uint64_t *)v10)
          goto LABEL_56;
        v11 = 0;
        v12 = *v9;
        v13 = 1;
LABEL_18:
        v14 = v13;
        ++*(_DWORD *)(v12 + 24);
        *(_QWORD *)(v4 + 8 * v11++) = v12;
        while (1)
        {
          v9 += 2;
          if (v9 == (uint64_t *)v10)
            break;
          v12 = *v9;
          if ((unint64_t)(*v9 + 1) > 1)
          {
            ++v13;
            if (v9 != (uint64_t *)v10)
              goto LABEL_18;
            break;
          }
        }
        if (!v11)
        {
LABEL_56:
          v2 = 1;
          _MergedGlobals_211 = 1;
LABEL_57:
          WTF::fastFree(v6, v5);
          return v2;
        }
        v15 = qword_1ECE838A0;
        if (qword_1ECE838A0)
        {
          v16 = v4 + 8 * v11;
          v17 = v4;
LABEL_25:
          v18 = *(_QWORD *)v17;
          v19 = *(_DWORD *)(v15 - 8);
          v20 = ~(*(_QWORD *)v17 << 32) + *(_QWORD *)v17;
          v21 = (v20 ^ (v20 >> 22)) + ~((v20 ^ (v20 >> 22)) << 13);
          v22 = (9 * (v21 ^ (v21 >> 8))) ^ ((9 * (v21 ^ (v21 >> 8))) >> 15);
          v23 = v19 & (((v22 + ~(v22 << 27)) >> 31) ^ (v22 + ~((_DWORD)v22 << 27)));
          v24 = *(_QWORD *)(v15 + 16 * v23);
          if (v24 != *(_QWORD *)v17)
          {
            v25 = 1;
            do
            {
              if (!v24)
                goto LABEL_50;
              v23 = (v23 + v25) & v19;
              v24 = *(_QWORD *)(v15 + 16 * v23);
              ++v25;
            }
            while (v24 != v18);
          }
          v26 = *(_QWORD *)(v18 + 72);
          if (v26)
          {
            v27 = *(_QWORD *)(v26 + 8);
            if (v27)
            {
              if (!*(_BYTE *)(v27 + 178))
              {
                v28 = *(_QWORD *)(v27 + 240);
                if (!v28)
                  goto LABEL_50;
                v29 = *(_QWORD *)(v28 + 8);
                if (!v29)
                  goto LABEL_50;
                v30 = (unsigned int *)(v29 + 8);
                do
                  v31 = __ldaxr(v30);
                while (__stlxr(v31 + 1, v30));
                v32 = *(WebCore::FrameLoader **)(v29 + 280);
                ++*(_DWORD *)v32;
                shouldClose = WebCore::FrameLoader::shouldClose(v32);
                if (!*(_DWORD *)v32)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195FDA340);
                }
                v2 = shouldClose;
                --*(_DWORD *)v32;
                if (shouldClose)
                {
                  v34 = *(_QWORD *)(*(_QWORD *)v17 + 72);
                  if (v34)
                  {
                    v35 = *(_QWORD *)(v34 + 8);
                    if (v35)
                    {
                      if (*(_BYTE *)(v35 + 178))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x195FDA360);
                      }
                      v36 = *(_QWORD *)(v35 + 240);
                      if (v36)
                      {
                        v37 = *(_QWORD *)(v36 + 8);
                        if (v37)
                        {
                          v38 = *(_QWORD *)(v37 + 24);
                          if (v38)
                          {
                            v39 = *(_QWORD *)(v38 + 8);
                            if (v39)
                            {
                              ++*(_DWORD *)v39;
                              (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v39 + 48) + 16) + 1264))(*(_QWORD *)(*(_QWORD *)(v39 + 48) + 16));
                              if (*(_DWORD *)v39 == 1)
                              {
                                WebCore::Page::~Page(v39);
                                WTF::fastFree(v42, v43);
                              }
                              else
                              {
                                --*(_DWORD *)v39;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                do
                {
                  v40 = __ldaxr(v30);
                  v41 = v40 - 1;
                }
                while (__stlxr(v41, v30));
                if (!v41)
                {
                  atomic_store(1u, v30);
                  v44 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                  *v44 = off_1E31FE290;
                  v44[1] = v30;
                  v48 = v44;
                  WTF::ensureOnMainThread();
                  if (v48)
                    (*(void (**)(_QWORD *))(*v48 + 8))(v48);
                }
                if ((_DWORD)v2)
                  goto LABEL_50;
                goto LABEL_59;
              }
LABEL_70:
              __break(0xC471u);
              JUMPOUT(0x195FDA320);
            }
          }
LABEL_50:
          while (1)
          {
            v17 += 8;
            if (v17 == v16)
              break;
            v15 = qword_1ECE838A0;
            if (qword_1ECE838A0)
              goto LABEL_25;
          }
        }
        v2 = 1;
        _MergedGlobals_211 = 1;
LABEL_59:
        v45 = 8 * v14;
        v46 = v6;
        do
        {
          v47 = *(_DWORD **)v46;
          *(_QWORD *)v46 = 0;
          if (v47)
          {
            if (v47[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v47 + 72))(v47);
            else
              --v47[6];
          }
          v46 = (WTF *)((char *)v46 + 8);
          v45 -= 8;
        }
        while (v45);
        goto LABEL_57;
      }
    }
  }
  return 1;
}

uint64_t WebCore::LocalFrame::checkedLoader@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 280);
  *a2 = v2;
  ++*v2;
  return this;
}

uint64_t WebCore::LocalDOMWindow::enableSuddenTermination(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  void *v7;

  if (this)
  {
    v1 = *(_QWORD *)(this + 8);
    if (v1)
    {
      if (*(_BYTE *)(v1 + 178))
      {
        this = 105;
        __break(0xC471u);
      }
      else
      {
        v2 = *(_QWORD *)(v1 + 240);
        if (v2)
        {
          v3 = *(_QWORD *)(v2 + 8);
          if (v3)
          {
            v4 = *(_QWORD *)(v3 + 24);
            if (v4)
            {
              v5 = *(_QWORD *)(v4 + 8);
              if (v5)
              {
                ++*(_DWORD *)v5;
                this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v5 + 48) + 16) + 1264))(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 16));
                if (*(_DWORD *)v5 == 1)
                {
                  WebCore::Page::~Page(v5);
                  return WTF::fastFree(v6, v7);
                }
                else
                {
                  --*(_DWORD *)v5;
                }
              }
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::LocalDOMWindow::pendingUnloadEventListeners(WebCore::LocalDOMWindow *this)
{
  unsigned int v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  WebCore::LocalDOMWindow *v6;
  int v7;
  uint64_t result;

  if ((byte_1ECE8389B & 1) != 0)
  {
    if (qword_1ECE838A8)
    {
      v1 = *(_DWORD *)(qword_1ECE838A8 - 8);
      v2 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
      v3 = 9 * ((v2 + ~(v2 << 13)) ^ ((v2 + ~(v2 << 13)) >> 8));
      v4 = (v3 ^ (v3 >> 15)) + ~((v3 ^ (v3 >> 15)) << 27);
      v5 = v1 & ((v4 >> 31) ^ v4);
      v6 = *(WebCore::LocalDOMWindow **)(qword_1ECE838A8 + 16 * v5);
      if (v6 == this)
        return *(unsigned int *)(qword_1ECE838A8 + 16 * v5 + 8);
      v7 = 1;
      while (v6)
      {
        v5 = ((_DWORD)v5 + v7) & v1;
        v6 = *(WebCore::LocalDOMWindow **)(qword_1ECE838A8 + 16 * v5);
        ++v7;
        if (v6 == this)
          return *(unsigned int *)(qword_1ECE838A8 + 16 * v5 + 8);
      }
    }
    return 0;
  }
  else
  {
    result = 0;
    qword_1ECE838A8 = 0;
    byte_1ECE8389B = 1;
  }
  return result;
}

void WebCore::LocalDOMWindow::dispatchAllPendingUnloadEvents(WebCore::LocalDOMWindow *this)
{
  uint64_t v1;
  WebCore *v2;
  void *v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  WTF *v16;
  WebCore::LocalDOMWindow *v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  WebCore::LocalDOMWindow *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  void *v40;
  uint64_t v41;
  WTF *v42;
  _DWORD *v43;
  WTF *v44;

  if ((byte_1ECE8389B & 1) == 0)
  {
    qword_1ECE838A8 = 0;
    byte_1ECE8389B = 1;
    return;
  }
  if (qword_1ECE838A8)
  {
    v1 = *(unsigned int *)(qword_1ECE838A8 - 12);
    if ((_DWORD)v1)
    {
      if ((byte_1ECE83899 & 1) == 0)
      {
        if (v1 >> 29)
          goto LABEL_76;
        v2 = (WebCore *)WTF::fastMalloc((WTF *)(8 * v1));
        v4 = v2;
        if (!qword_1ECE838A8 || !*(_DWORD *)(qword_1ECE838A8 - 12))
          goto LABEL_22;
        v5 = *(unsigned int *)(qword_1ECE838A8 - 4);
        if ((_DWORD)v5)
        {
          v6 = 16 * v5;
          v7 = (uint64_t *)qword_1ECE838A8;
          while ((unint64_t)(*v7 + 1) <= 1)
          {
            v7 += 2;
            v6 -= 16;
            if (!v6)
              goto LABEL_22;
          }
        }
        else
        {
          v7 = (uint64_t *)qword_1ECE838A8;
        }
        v8 = qword_1ECE838A8 + 16 * v5;
        if (v7 != (uint64_t *)v8)
        {
          v9 = 0;
          v10 = *v7;
LABEL_17:
          ++*(_DWORD *)(v10 + 24);
          *((_QWORD *)v2 + v9++) = v10;
          while (1)
          {
            v7 += 2;
            if (v7 == (uint64_t *)v8)
              break;
            v10 = *v7;
            if ((unint64_t)(*v7 + 1) > 1)
            {
              if (v7 != (uint64_t *)v8)
                goto LABEL_17;
              break;
            }
          }
        }
        else
        {
LABEL_22:
          v9 = 0;
        }
        v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v11 || (v12 = *(_QWORD *)(v11 + 96)) == 0)
          v12 = WebCore::threadGlobalDataSlow(v2);
        v13 = *(_QWORD *)(v12 + 40);
        if (v13)
        {
          if (v9)
          {
LABEL_28:
            v44 = v4;
            v14 = qword_1ECE838A8;
            if (!qword_1ECE838A8)
            {
LABEL_63:
              byte_1ECE83899 = 1;
              v41 = 8 * v9;
              v4 = v44;
              v42 = v44;
              do
              {
                v43 = *(_DWORD **)v42;
                *(_QWORD *)v42 = 0;
                if (v43)
                {
                  if (v43[6] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v43 + 72))(v43);
                  else
                    --v43[6];
                }
                v42 = (WTF *)((char *)v42 + 8);
                v41 -= 8;
              }
              while (v41);
              goto LABEL_74;
            }
            v15 = v4;
            v16 = (WTF *)((char *)v4 + 8 * v9);
LABEL_30:
            v17 = *(WebCore::LocalDOMWindow **)v15;
            v18 = *(_DWORD *)(v14 - 8);
            v19 = ~(*(_QWORD *)v15 << 32) + *(_QWORD *)v15;
            v20 = (v19 ^ (v19 >> 22)) + ~((v19 ^ (v19 >> 22)) << 13);
            v21 = (9 * (v20 ^ (v20 >> 8))) ^ ((9 * (v20 ^ (v20 >> 8))) >> 15);
            v22 = v18 & (((v21 + ~(v21 << 27)) >> 31) ^ (v21 + ~((_DWORD)v21 << 27)));
            v23 = *(WebCore::LocalDOMWindow **)(v14 + 16 * v22);
            if (v23 != *(WebCore::LocalDOMWindow **)v15)
            {
              v24 = 1;
              do
              {
                if (!v23)
                  goto LABEL_55;
                v22 = (v22 + v24) & v18;
                v23 = *(WebCore::LocalDOMWindow **)(v14 + 16 * v22);
                ++v24;
              }
              while (v23 != v17);
            }
            v25 = *((_QWORD *)v17 + 9);
            if (!v25 || (v26 = *(_QWORD *)(v25 + 8)) == 0)
            {
              v27 = 0;
              v28 = 1;
LABEL_39:
              v29 = bmalloc::api::isoAllocate();
              WTF::MonotonicTime::now((WTF::MonotonicTime *)v29);
              *(_QWORD *)v29 = off_1E33A4B48;
              *(_QWORD *)(v29 + 8) = 0;
              v31 = *(_DWORD *)(v29 + 20) & 0xFFC00000 | (*(_QWORD *)(v13 + 2168) != 0) | 0x1E8200;
              *(_DWORD *)(v29 + 16) = 1;
              *(_DWORD *)(v29 + 20) = v31;
              v32 = *(_DWORD **)(v13 + 2168);
              if (v32)
                *v32 += 2;
              *(_QWORD *)(v29 + 24) = v32;
              *(_QWORD *)(v29 + 32) = 0;
              *(_QWORD *)(v29 + 40) = 0;
              *(_QWORD *)(v29 + 48) = 0;
              *(_QWORD *)(v29 + 56) = v30;
              *(_QWORD *)(v29 + 64) = 0;
              WebCore::LocalDOMWindow::dispatchEvent(v17, (WebCore::Event *)v29, (WebCore::EventTarget *)v27);
              if (*(_DWORD *)(v29 + 16) == 1)
                (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
              else
                --*(_DWORD *)(v29 + 16);
              v33 = *(_QWORD *)(*(_QWORD *)v15 + 72);
              if (v33)
              {
                v34 = *(_QWORD *)(v33 + 8);
                if (v34)
                {
                  if (*(_BYTE *)(v34 + 178))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195FDA914);
                  }
                  v35 = *(_QWORD *)(v34 + 240);
                  if (v35)
                  {
                    v36 = *(_QWORD *)(v35 + 8);
                    if (v36)
                    {
                      v37 = *(_QWORD *)(v36 + 24);
                      if (v37)
                      {
                        v38 = *(_QWORD *)(v37 + 8);
                        if (v38)
                        {
                          ++*(_DWORD *)v38;
                          (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v38 + 48) + 16) + 1264))(*(_QWORD *)(*(_QWORD *)(v38 + 48) + 16));
                          if (*(_DWORD *)v38 == 1)
                          {
                            WebCore::Page::~Page(v38);
                            WTF::fastFree(v39, v40);
                            if ((v28 & 1) != 0)
                              goto LABEL_55;
LABEL_53:
                            if (*(_DWORD *)(v27 + 24) == 2)
                            {
                              if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
                                WebCore::Node::removedLastRef((WebCore::Node *)v27, v3);
                            }
                            else
                            {
                              *(_DWORD *)(v27 + 24) -= 2;
                            }
LABEL_55:
                            while (1)
                            {
                              v15 = (WTF *)((char *)v15 + 8);
                              if (v15 == v16)
                                goto LABEL_63;
                              v14 = qword_1ECE838A8;
                              if (qword_1ECE838A8)
                                goto LABEL_30;
                            }
                          }
                          --*(_DWORD *)v38;
                        }
                      }
                    }
                  }
                }
              }
              if ((v28 & 1) != 0)
                goto LABEL_55;
              goto LABEL_53;
            }
            if (!*(_BYTE *)(v26 + 178))
            {
              v27 = v26 - 288;
              *(_DWORD *)(v26 - 264) += 2;
              WebCore::Document::dispatchPagehideEvent((WebCore::EventTarget *)(v26 - 288), 0);
              v28 = 0;
              v17 = *(WebCore::LocalDOMWindow **)v15;
              goto LABEL_39;
            }
LABEL_76:
            __break(0xC471u);
            JUMPOUT(0x195FDA8F4);
          }
        }
        else
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v12);
          v13 = *(_QWORD *)(v12 + 40);
          if (v9)
            goto LABEL_28;
        }
        byte_1ECE83899 = 1;
LABEL_74:
        WTF::fastFree(v4, v3);
      }
    }
  }
}

uint64_t WebCore::LocalDOMWindow::canShowModalDialog(WebCore::LocalDOMWindow *this, const WebCore::LocalFrame *a2)
{
  char v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  WebCore::Page *v9;
  WTF *v11;
  void *v12;

  v4 = *((_QWORD *)this + 37);
  if (!v4)
  {
LABEL_12:
    v8 = *((_QWORD *)this + 3);
    if (v8 && (v9 = *(WebCore::Page **)(v8 + 8)) != 0)
    {
      ++*(_DWORD *)v9;
      v2 = (*(uint64_t (**)(_QWORD, const WebCore::LocalFrame *))(**(_QWORD **)(*((_QWORD *)v9 + 6) + 16)
                                                                          + 96))(*(_QWORD *)(*((_QWORD *)v9 + 6) + 16), a2);
      if (*(_DWORD *)v9 == 1)
      {
        WebCore::Page::~Page(v9);
        WTF::fastFree(v11, v12);
      }
      else
      {
        --*(_DWORD *)v9;
      }
    }
    else
    {
      v2 = 0;
    }
    return v2 & 1;
  }
  *(_DWORD *)(v4 + 24) += 2;
  v5 = *(_QWORD *)(v4 + 696);
  if (!v5)
    goto LABEL_8;
  v6 = *(_DWORD *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v6 + 1;
  if (!*(_BYTE *)(v5 + 92))
  {
    if (v6)
      *(_DWORD *)(v5 + 24) = v6;
    else
      (*(void (**)(uint64_t, const WebCore::LocalFrame *))(*(_QWORD *)v5 + 72))(v5, a2);
LABEL_8:
    v7 = 1;
    goto LABEL_9;
  }
  v2 = *(_BYTE *)(v5 + 91) != 0;
  if (v6)
  {
    v7 = 0;
    *(_DWORD *)(v5 + 24) = v6;
  }
  else
  {
    (*(void (**)(uint64_t, const WebCore::LocalFrame *))(*(_QWORD *)v5 + 72))(v5, a2);
    v7 = 0;
  }
LABEL_9:
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  if (v7)
    goto LABEL_12;
  return v2 & 1;
}

uint64_t WebCore::LocalDOMWindow::setCanShowModalDialogOverride(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 91) = a2 | 0x100;
  return this;
}

unsigned int *WebCore::languagesChangedCallback(unsigned int *this, void *a2)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _BOOL4 v12;
  _DWORD *v13;
  void *v14;
  unsigned int *v15;

  v2 = this;
  ++this[6];
  v3 = *((_QWORD *)this + 9);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      if (*(_BYTE *)(v4 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x195FDAC5CLL);
      }
      v5 = (_DWORD *)(v4 - 264);
      *(_DWORD *)(v4 - 264) += 2;
      v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
        v7 = WebCore::threadGlobalDataSlow((WebCore *)this);
      v8 = *(_QWORD *)(v7 + 40);
      if (!v8)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
        v8 = *(_QWORD *)(v7 + 40);
      }
      v9 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v9);
      *(_QWORD *)v9 = off_1E33A4B48;
      *(_QWORD *)(v9 + 8) = 0;
      v11 = *(_DWORD *)(v9 + 20) & 0xFFC00000 | 0x1E8200;
      v12 = *(_QWORD *)(v8 + 1080) != 0;
      *(_DWORD *)(v9 + 16) = 1;
      *(_DWORD *)(v9 + 20) = v11 | v12;
      v13 = *(_DWORD **)(v8 + 1080);
      if (v13)
        *v13 += 2;
      *(_QWORD *)(v9 + 24) = v13;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = v10;
      *(_QWORD *)(v9 + 64) = 0;
      v15 = (unsigned int *)v9;
      WebCore::Document::queueTaskToDispatchEventOnWindow((WebCore::Document *)(v4 - 288), 0, (uint64_t *)&v15);
      this = v15;
      if (v15)
      {
        if (v15[4] == 1)
          this = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v15 + 8))();
        else
          --v15[4];
      }
      if (*v5 == 2)
      {
        if ((*(_WORD *)(v4 - 258) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)(v4 - 288), v14);
      }
      else
      {
        *v5 -= 2;
      }
    }
  }
  if (v2[6] == 1)
    return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v2 + 72))(v2);
  --v2[6];
  return this;
}

uint64_t WebCore::LocalDOMWindow::didSecureTransitionTo(WebCore::LocalDOMWindow *this, WebCore::EventNames **a2)
{
  WebCore::Node *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t result;
  WebCore::Node *v12;

  v4 = (WebCore::Node *)*((_QWORD *)this + 9);
  if (v4)
  {
    v5 = *((_QWORD *)v4 + 1);
    if (v5)
    {
      if (*(_BYTE *)(v5 + 178))
      {
        result = 105;
        __break(0xC471u);
        return result;
      }
      v4 = (WebCore::Node *)(v5 - 288);
      *(_DWORD *)(v5 - 264) += 2;
    }
    else
    {
      v4 = 0;
    }
  }
  v12 = v4;
  WebCore::ContextDestructionObserver::observeContext((WebCore::LocalDOMWindow *)((char *)this + 64), (WebCore::ScriptExecutionContext *)(a2 + 24));
  v7 = *((_QWORD *)this + 2);
  if ((v7 & 0x1000000000000) != 0)
    WebCore::EventListenerMap::enumerateEventListenerTypes<WebCore::LocalDOMWindow::didSecureTransitionTo(WebCore::Document &)::$_0>(*(const WTF::AtomString **)((v7 & 0xFFFFFFFFFFFFLL) + 0x10), *(_DWORD *)((v7 & 0xFFFFFFFFFFFFLL) + 0x1C), (uint64_t *)&v12, a2);
  v8 = (_DWORD *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v8)
  {
    if (v8[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
    else
      --v8[4];
  }
  v9 = (_DWORD *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v9)
  {
    if (v9[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
    else
      --v9[4];
  }
  WTF::Ref<WebCore::Performance,WTF::RawPtrTraits<WebCore::Performance>,WTF::DefaultRefDerefTraits<WebCore::Performance>>::~Ref((WebCore::Performance **)this + 34, v6);
  v10 = (_DWORD *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v10)
  {
    if (v10[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
    else
      --v10[4];
  }
  result = (uint64_t)v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  return result;
}

const WTF::AtomString *WebCore::EventListenerMap::enumerateEventListenerTypes<WebCore::LocalDOMWindow::didSecureTransitionTo(WebCore::Document &)::$_0>(const WTF::AtomString *result, unsigned int a2, uint64_t *a3, WebCore::EventNames **this)
{
  const WTF::AtomString *v6;
  const WTF::AtomString *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;

  if (a2)
  {
    v6 = result;
    v7 = (const WTF::AtomString *)((char *)result + 32 * a2);
    do
    {
      v8 = *((_DWORD *)v6 + 5);
      v9 = *a3;
      if (*a3)
      {
        v10 = *(_QWORD *)(v9 + 3296);
        v11 = *(unsigned int *)(v9 + 3304);
        if (v10)
        {
          v12 = v11 - 1;
          v13 = *(_DWORD *)(v9 + 3312);
          v14 = *(_DWORD *)(*(_QWORD *)v6 + 16);
          v15 = (v13 ^ (v14 >> 8)) & ((_DWORD)v11 - 1);
          v16 = *(_QWORD *)(v10 + 16 * v15);
          if (v16)
          {
            v17 = v14 >> 8;
            v18 = -1;
            do
            {
              v19 = *(_DWORD *)(v16 + 16);
              if (++v18 > (((_DWORD)v15 + (_DWORD)v11 - ((v13 ^ (v19 >> 8)) & v12)) & v12))
                break;
              if (v16 == *(_QWORD *)v6 && v19 >> 8 == v17)
              {
                v20 = v10 + 16 * v15;
                goto LABEL_13;
              }
              v15 = ((_DWORD)v15 + 1) & v12;
              v16 = *(_QWORD *)(v10 + 16 * v15);
            }
            while (v16);
          }
          v20 = v10 + 16 * v11;
        }
        else
        {
          v20 = 16 * v11;
        }
LABEL_13:
        *(_DWORD *)(v20 + 8) -= v8;
      }
      result = (const WTF::AtomString *)WebCore::Document::didAddEventListenersOfType(this, v6, v8);
      v6 = (const WTF::AtomString *)((char *)v6 + 32);
    }
    while (v6 != v7);
  }
  return result;
}

uint64_t WebCore::LocalDOMWindow::willDestroyCachedFrame(WebCore::LocalDOMWindow *this)
{
  uint64_t **v1;
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;

  v1 = (uint64_t **)((char *)this + 96);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E33FF7B0;
  v4 = (uint64_t)v2;
  WTF::WeakHashSet<WebCore::LocalDOMWindowObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v1, &v4);
  result = v4;
  v4 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void `non-virtual thunk to'WebCore::LocalDOMWindow::~LocalDOMWindow(WebCore::LocalDOMWindow *this)
{
  WebCore::LocalDOMWindow::~LocalDOMWindow((WebCore::LocalDOMWindow *)((char *)this - 64));
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::LocalDOMWindow::~LocalDOMWindow((WebCore::LocalDOMWindow *)((char *)this - 64));
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::LocalDOMWindow::matchMedia@<X0>(WebCore::LocalDOMWindow *this@<X0>, unsigned int **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  WebCore::Document *v7;
  WebCore::MediaQueryMatcher *Matcher;

  result = WebCore::LocalDOMWindow::document(this);
  if (result)
  {
    v7 = (WebCore::Document *)WebCore::LocalDOMWindow::document(this);
    Matcher = WebCore::Document::mediaQueryMatcher(v7);
    return WebCore::MediaQueryMatcher::matchMedia((uint64_t)Matcher, a2, a3);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

unsigned int *WTF::WeakHashSet<WebCore::LocalDOMWindowObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(uint64_t **a1, _QWORD *a2)
{
  unsigned int *result;
  _QWORD *v5;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;
  uint64_t v12;

  v11 = 0;
  v12 = 0;
  result = (unsigned int *)WTF::Mapper<WTF::WeakHashSet<WebCore::LocalDOMWindowObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WebCore::LocalDOMWindowObserver&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1},WTF::Vector<WTF::WeakPtr<WebCore::LocalDOMWindowObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits> &,void>::map((uint64_t)&v11, a1);
  v6 = v11;
  if (HIDWORD(v12))
  {
    v7 = 8 * HIDWORD(v12);
    do
    {
      v5 = *(_QWORD **)v6;
      if (*(_QWORD *)v6)
      {
        if (v5[1])
        {
          result = (unsigned int *)WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::contains<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)a1, (uint64_t)v5);
          if ((_DWORD)result)
            result = (unsigned int *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *(_QWORD *)(*(_QWORD *)v6 + 8));
        }
      }
      v6 = (WTF *)((char *)v6 + 8);
      v7 -= 8;
    }
    while (v7);
    v6 = v11;
    if (HIDWORD(v12))
    {
      v8 = (WTF *)((char *)v11 + 8 * HIDWORD(v12));
      do
      {
        result = *(unsigned int **)v6;
        *(_QWORD *)v6 = 0;
        if (result)
        {
          do
          {
            v9 = __ldaxr(result);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, result));
          if (!v10)
          {
            atomic_store(1u, result);
            result = (unsigned int *)WTF::fastFree((WTF *)result, v5);
          }
        }
        v6 = (WTF *)((char *)v6 + 8);
      }
      while (v6 != v8);
      v6 = v11;
    }
  }
  if (v6)
  {
    v11 = 0;
    LODWORD(v12) = 0;
    return (unsigned int *)WTF::fastFree(v6, v5);
  }
  return result;
}

uint64_t WebCore::LocalDOMWindow::protectedFrame@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(this + 72);
  if (!v2 || (v2 = *(_QWORD *)(v2 + 8)) == 0)
  {
LABEL_8:
    *a2 = v2;
    return this;
  }
  if (!*(_BYTE *)(v2 + 178))
  {
    v2 = *(_QWORD *)(v2 + 240);
    if (v2)
    {
      v2 = *(_QWORD *)(v2 + 8);
      if (v2)
      {
        v3 = (unsigned int *)(v2 + 8);
        do
          v4 = __ldaxr(v3);
        while (__stlxr(v4 + 1, v3));
      }
    }
    goto LABEL_8;
  }
  this = 105;
  __break(0xC471u);
  return this;
}

unsigned int *WebCore::LocalDOMWindow::registerObserver(uint64_t a1, _QWORD *a2)
{
  _BYTE v3[24];

  return WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(a1 + 96, a2, (uint64_t)v3);
}

uint64_t WebCore::LocalDOMWindow::unregisterObserver(uint64_t a1, _QWORD *a2)
{
  return WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(a1 + 96, a2);
}

uint64_t **WebCore::LocalDOMWindow::resetUnlessSuspendedForDocumentSuspension(uint64_t **this)
{
  uint64_t **v1;
  uint64_t **v2;
  uint64_t **v3;

  if (!*((_BYTE *)this + 89))
  {
    v1 = this + 12;
    v2 = (uint64_t **)WTF::fastMalloc((WTF *)0x10);
    *v2 = (uint64_t *)off_1E33FF7D8;
    v3 = v2;
    WTF::WeakHashSet<WebCore::LocalDOMWindowObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v1, &v3);
    this = v3;
    v3 = 0;
    if (this)
      return (uint64_t **)((uint64_t (*)(uint64_t **))(*this)[1])(this);
  }
  return this;
}

uint64_t WebCore::LocalDOMWindow::suspendForBackForwardCache(WebCore::LocalDOMWindow *this)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t **v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *((_BYTE *)this + 90);
  *((_BYTE *)this + 90) = 1;
  v2 = *((_QWORD *)this + 9);
  if (!v2)
    goto LABEL_14;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    goto LABEL_14;
  if (*(_BYTE *)(v3 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195FDB2E4);
  }
  v4 = *(_QWORD *)(v3 + 240);
  if (!v4 || !*(_QWORD *)(v4 + 8))
  {
LABEL_14:
    __break(0xC471u);
    goto LABEL_18;
  }
  v6 = (uint64_t **)((char *)this + 96);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E33FF828;
  v12 = (uint64_t)v7;
  WTF::WeakHashSet<WebCore::LocalDOMWindowObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v6, &v12);
  result = v12;
  v12 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v9 = *((_QWORD *)this + 9);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 8)) == 0)
  {
LABEL_15:
    __break(0xC471u);
    JUMPOUT(0x195FDB2C4);
  }
  if (*(_BYTE *)(v10 + 178))
  {
    __break(0xC471u);
LABEL_18:
    JUMPOUT(0x195FDB2A4);
  }
  v11 = *(_QWORD *)(v10 + 240);
  if (!v11 || !*(_QWORD *)(v11 + 8))
    goto LABEL_15;
  *((_BYTE *)this + 89) = 1;
  *((_BYTE *)this + 90) = v1;
  return result;
}

