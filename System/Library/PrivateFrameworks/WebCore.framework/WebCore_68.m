uint64_t WebCore::EditingStyle::conflictsWithImplicitStyleOfElement(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t result;

  v8 = *(_QWORD *)(a1 + 8);
  if ((!v8 || !*(_DWORD *)(v8 + 28))
    && *(float *)(a1 + 20) == *(float *)&WebCore::EditingStyle::NoFontDelta
    && (*(_BYTE *)(a1 + 16) & 0x1E) == 0)
  {
    return 0;
  }
  WebCore::htmlElementEquivalents((WebCore *)a1);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)qword_1ECE83270 + 16))(qword_1ECE83270, a2);
  if (a4)
  {
    if ((v9 & 1) == 0
      || !(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)qword_1ECE83270 + 32))(qword_1ECE83270, a1)
      || (v10 = &qword_1ECE83270,
          ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)qword_1ECE83270 + 40))(qword_1ECE83270, a2, a1) & 1) != 0))
    {
      if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)qword_1ECE83278 + 16))(qword_1ECE83278, a2)
        || !(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)qword_1ECE83278 + 32))(qword_1ECE83278, a1)
        || (v10 = &qword_1ECE83278,
            (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)qword_1ECE83278 + 40))(qword_1ECE83278, a2, a1)))
      {
        if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)qword_1ECE83280 + 16))(qword_1ECE83280, a2)|| !(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)qword_1ECE83280 + 32))(qword_1ECE83280, a1)|| (v10 = &qword_1ECE83280, (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)qword_1ECE83280 + 40))(qword_1ECE83280, a2, a1)))
        {
          if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)qword_1ECE83288 + 16))(qword_1ECE83288, a2)|| !(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)qword_1ECE83288 + 32))(qword_1ECE83288, a1)|| (v10 = &qword_1ECE83288, (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)qword_1ECE83288 + 40))(qword_1ECE83288, a2, a1)))
          {
            if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)qword_1ECE83290 + 16))(qword_1ECE83290, a2)|| !(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)qword_1ECE83290 + 32))(qword_1ECE83290, a1)|| (v10 = &qword_1ECE83290, (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)qword_1ECE83290 + 40))(qword_1ECE83290, a2, a1)))
            {
              if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)qword_1ECE83298 + 16))(qword_1ECE83298, a2)|| !(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)qword_1ECE83298 + 32))(qword_1ECE83298, a1)|| (v10 = &qword_1ECE83298, (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)qword_1ECE83298 + 40))(qword_1ECE83298, a2, a1)))
              {
                if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)qword_1ECE832A0 + 16))(qword_1ECE832A0, a2)|| !(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)qword_1ECE832A0 + 32))(qword_1ECE832A0, a1)|| (v10 = &qword_1ECE832A0, (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)qword_1ECE832A0 + 40))(qword_1ECE832A0, a2, a1)))
                {
                  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)qword_1ECE832A8 + 16))(qword_1ECE832A8, a2)|| !(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)qword_1ECE832A8 + 32))(qword_1ECE832A8, a1)|| (v10 = &qword_1ECE832A8, (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)qword_1ECE832A8 + 40))(qword_1ECE832A8, a2, a1)))
                  {
                    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)qword_1ECE832B0 + 16))(qword_1ECE832B0, a2);
                    if (!(_DWORD)result)
                      return result;
                    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)qword_1ECE832B0 + 32))(qword_1ECE832B0, a1);
                    if (!(_DWORD)result)
                      return result;
                    v10 = &qword_1ECE832B0;
                    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)qword_1ECE832B0 + 40))(qword_1ECE832B0, a2, a1))
                    {
                      return 0;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else if (!v9
         || (v10 = &qword_1ECE83270,
             ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)qword_1ECE83270 + 32))(qword_1ECE83270, a1) & 1) == 0))
  {
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)qword_1ECE83278 + 16))(qword_1ECE83278, a2)
      || (v10 = &qword_1ECE83278,
          ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)qword_1ECE83278 + 32))(qword_1ECE83278, a1) & 1) == 0))
    {
      if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)qword_1ECE83280 + 16))(qword_1ECE83280, a2)
        || (v10 = &qword_1ECE83280,
            ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)qword_1ECE83280 + 32))(qword_1ECE83280, a1) & 1) == 0))
      {
        if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)qword_1ECE83288 + 16))(qword_1ECE83288, a2)|| (v10 = &qword_1ECE83288, ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)qword_1ECE83288 + 32))(qword_1ECE83288, a1) & 1) == 0))
        {
          if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)qword_1ECE83290 + 16))(qword_1ECE83290, a2)|| (v10 = &qword_1ECE83290, ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)qword_1ECE83290 + 32))(qword_1ECE83290, a1) & 1) == 0))
          {
            if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)qword_1ECE83298 + 16))(qword_1ECE83298, a2)|| (v10 = &qword_1ECE83298, ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)qword_1ECE83298 + 32))(qword_1ECE83298, a1) & 1) == 0))
            {
              if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)qword_1ECE832A0 + 16))(qword_1ECE832A0, a2)|| (v10 = &qword_1ECE832A0, ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)qword_1ECE832A0 + 32))(qword_1ECE832A0, a1) & 1) == 0))
              {
                if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)qword_1ECE832A8 + 16))(qword_1ECE832A8, a2)|| (v10 = &qword_1ECE832A8, ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)qword_1ECE832A8 + 32))(qword_1ECE832A8, a1) & 1) == 0))
                {
                  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)qword_1ECE832B0 + 16))(qword_1ECE832B0, a2);
                  if (!(_DWORD)result)
                    return result;
                  v10 = &qword_1ECE832B0;
                  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)qword_1ECE832B0 + 32))(qword_1ECE832B0, a1) & 1) == 0)return 0;
                }
              }
            }
          }
        }
      }
    }
  }
  if (a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v10 + 48))(*v10, a2, a3);
  return 1;
}

uint64_t *WebCore::htmlElementEquivalents(WebCore *this)
{
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;

  if ((byte_1ECE83259 & 1) == 0)
  {
    v2 = WTF::fastMalloc((WTF *)0x20);
    *(_WORD *)(v2 + 8) = 28;
    v3 = &WebCore::staticCSSValuePool[3452];
    dword_1ECE8C198 += 2;
    *(_QWORD *)(v2 + 16) = v3;
    *(_QWORD *)(v2 + 24) = &WebCore::HTMLNames::bTag;
    *(_QWORD *)v2 = off_1E33AA2F0;
    qword_1ECE83270 = v2;
    v4 = WTF::fastMalloc((WTF *)0x20);
    *(_WORD *)(v4 + 8) = 28;
    dword_1ECE8C198 += 2;
    *(_QWORD *)(v4 + 16) = v3;
    *(_QWORD *)(v4 + 24) = &WebCore::HTMLNames::strongTag;
    *(_QWORD *)v4 = off_1E33AA2F0;
    qword_1ECE83278 = v4;
    v5 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v5 = off_1E33AA018;
    *(_WORD *)(v5 + 8) = 288;
    dword_1ECE8CB88 += 2;
    *(_QWORD *)(v5 + 16) = &WebCore::staticCSSValuePool[4088];
    *(_QWORD *)(v5 + 24) = &WebCore::HTMLNames::subTag;
    qword_1ECE83280 = v5;
    v6 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v6 = off_1E33AA018;
    *(_WORD *)(v6 + 8) = 288;
    dword_1ECE8CB98 += 2;
    *(_QWORD *)(v6 + 16) = &WebCore::staticCSSValuePool[4092];
    *(_QWORD *)(v6 + 24) = &WebCore::HTMLNames::supTag;
    qword_1ECE83288 = v6;
    v7 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v7 = off_1E33AA018;
    *(_WORD *)(v7 + 8) = 16;
    v8 = &WebCore::staticCSSValuePool[3276];
    dword_1ECE8BED8 += 2;
    *(_QWORD *)(v7 + 16) = v8;
    *(_QWORD *)(v7 + 24) = &WebCore::HTMLNames::iTag;
    qword_1ECE83290 = v7;
    v9 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v9 = off_1E33AA018;
    *(_WORD *)(v9 + 8) = 16;
    dword_1ECE8BED8 += 2;
    *(_QWORD *)(v9 + 16) = v8;
    *(_QWORD *)(v9 + 24) = &WebCore::HTMLNames::emTag;
    qword_1ECE83298 = v9;
    v10 = WTF::fastMalloc((WTF *)0x28);
    *(_WORD *)(v10 + 8) = 255;
    v11 = &WebCore::staticCSSValuePool[5068];
    *v11 += 2;
    *(_QWORD *)(v10 + 16) = v11;
    *(_QWORD *)(v10 + 24) = &WebCore::HTMLNames::uTag;
    *(_QWORD *)v10 = off_1E33AA338;
    *(_BYTE *)(v10 + 32) = 1;
    qword_1ECE832A0 = v10;
    v12 = WTF::fastMalloc((WTF *)0x28);
    *(_WORD *)(v12 + 8) = 255;
    v13 = &WebCore::staticCSSValuePool[4984];
    *v13 += 2;
    *(_QWORD *)(v12 + 16) = v13;
    *(_QWORD *)(v12 + 24) = &WebCore::HTMLNames::sTag;
    *(_QWORD *)v12 = off_1E33AA338;
    *(_BYTE *)(v12 + 32) = 0;
    qword_1ECE832A8 = v12;
    v14 = WTF::fastMalloc((WTF *)0x28);
    *(_WORD *)(v14 + 8) = 255;
    *v13 += 2;
    *(_QWORD *)(v14 + 16) = v13;
    *(_QWORD *)(v14 + 24) = &WebCore::HTMLNames::strikeTag;
    *(_QWORD *)v14 = off_1E33AA338;
    *(_BYTE *)(v14 + 32) = 0;
    qword_1ECE832B0 = v14;
    byte_1ECE83259 = 1;
  }
  return &qword_1ECE83270;
}

uint64_t *WebCore::htmlAttributeEquivalents(WebCore *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v2 = WTF::fastMalloc((WTF *)0x28);
    *(_WORD *)(v2 + 8) = 5;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = &WebCore::HTMLNames::fontTag;
    *(_QWORD *)v2 = off_1E33AA060;
    *(_QWORD *)(v2 + 32) = &WebCore::HTMLNames::colorAttr;
    WebCore::htmlAttributeEquivalents(void)::equivalents = v2;
    v3 = WTF::fastMalloc((WTF *)0x28);
    *(_WORD *)(v3 + 8) = 8;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 24) = &WebCore::HTMLNames::fontTag;
    *(_QWORD *)v3 = off_1E33AA060;
    *(_QWORD *)(v3 + 32) = &WebCore::HTMLNames::faceAttr;
    qword_1EE2F58A0 = v3;
    v4 = WTF::fastMalloc((WTF *)0x28);
    *(_WORD *)(v4 + 8) = 13;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = &WebCore::HTMLNames::fontTag;
    *(_QWORD *)(v4 + 32) = &WebCore::HTMLNames::sizeAttr;
    *(_QWORD *)v4 = off_1E33AA0B0;
    qword_1EE2F58A8 = v4;
    v5 = WTF::fastMalloc((WTF *)0x28);
    *(_WORD *)(v5 + 8) = 6;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)v5 = off_1E33AA060;
    *(_QWORD *)(v5 + 32) = &WebCore::HTMLNames::dirAttr;
    qword_1EE2F58B0 = v5;
    v6 = WTF::fastMalloc((WTF *)0x28);
    *(_WORD *)(v6 + 8) = 285;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = 0;
    *(_QWORD *)v6 = off_1E33AA060;
    *(_QWORD *)(v6 + 32) = &WebCore::HTMLNames::dirAttr;
    qword_1EE2F58B8 = v6;
  }
  return &WebCore::htmlAttributeEquivalents(void)::equivalents;
}

uint64_t WebCore::EditingStyle::extractConflictingImplicitStyleOfAttributes(WebCore *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v12;
  char v13;
  _QWORD **v14;
  _QWORD *v15;
  uint64_t v16;
  _DWORD **v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  _DWORD *v21;

  if (*((_QWORD *)a1 + 1))
  {
    WebCore::htmlAttributeEquivalents(a1);
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = (_QWORD **)WebCore::htmlAttributeEquivalents(void)::equivalents[v12];
      if ((a3 || *v14[4] != WebCore::HTMLNames::dirAttr)
        && ((unsigned int (*)(_QWORD **, uint64_t))(*v14)[2])(v14, a2)
        && (*(unsigned int (**)(uint64_t, WebCore *))(*(_QWORD *)WebCore::htmlAttributeEquivalents(void)::equivalents[v12]
                                                              + 32))(WebCore::htmlAttributeEquivalents(void)::equivalents[v12], a1)&& (a6 != 1|| ((*(uint64_t (**)(uint64_t, uint64_t, WebCore *))(*(_QWORD *)WebCore::htmlAttributeEquivalents(void)::equivalents[v12]+ 40))(WebCore::htmlAttributeEquivalents(void)::equivalents[v12], a2, a1) & 1) == 0))
      {
        if (a4)
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)WebCore::htmlAttributeEquivalents(void)::equivalents[v12]
                                                            + 48))(WebCore::htmlAttributeEquivalents(void)::equivalents[v12], a2, a4);
        v15 = *(_QWORD **)(WebCore::htmlAttributeEquivalents(void)::equivalents[v12] + 32);
        v16 = *(unsigned int *)(a5 + 12);
        if ((_DWORD)v16 == *(_DWORD *)(a5 + 8))
        {
          v17 = (_DWORD **)WTF::Vector<WebCore::QualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a5, v16 + 1, (unint64_t)v15);
          v16 = *(unsigned int *)(a5 + 12);
          v18 = *(_QWORD *)a5;
          v19 = *v17;
          if (*v17)
            ++*v19;
          *(_QWORD *)(v18 + 8 * v16) = v19;
        }
        else
        {
          v20 = *(_QWORD *)a5;
          v21 = (_DWORD *)*v15;
          if (*v15)
            ++*v21;
          *(_QWORD *)(v20 + 8 * v16) = v21;
        }
        *(_DWORD *)(a5 + 12) = v16 + 1;
        v13 = 1;
      }
      ++v12;
    }
    while (v12 != 5);
  }
  else
  {
    v13 = 0;
  }
  return v13 & 1;
}

BOOL WebCore::EditingStyle::styleIsPresentInComputedStyleOfNode(WebCore::EditingStyle *this, WebCore::Node *a2)
{
  uint64_t v3;
  WebCore *v4;
  WTF::StringImpl *v5;
  char v6;
  int v7;
  int v8;
  WTF *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int v17;
  _BOOL8 v18;
  unsigned int v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WebCore::Node *v30;
  uint64_t v32;
  _DWORD **v33;
  _DWORD *v34;
  WTF *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD **v40;
  _DWORD *v41;
  WTF *v42;
  uint64_t v44;
  int v45;
  WTF *v46;
  WebCore::Node *v47;
  char v48;
  WTF::StringImpl *v49;
  char v50;
  char v51;

  v3 = *((_QWORD *)this + 1);
  if ((!v3 || !*(_DWORD *)(v3 + 28))
    && *((float *)this + 5) == *(float *)&WebCore::EditingStyle::NoFontDelta
    && (*((_BYTE *)this + 16) & 0x1E) == 0)
  {
    return 1;
  }
  v4 = WebCore::styleElementForNode(a2, a2);
  if (v4)
    *((_DWORD *)v4 + 6) += 2;
  v47 = v4;
  v48 = 0;
  v50 = 0;
  v51 = 0;
  v6 = *((_BYTE *)this + 16);
  v7 = v6 & 6;
  v8 = v6 & 0x18;
  if (v7 != 2 && v8 != 8)
    goto LABEL_55;
  WebCore::ComputedStyleExtractor::propertyValue((uint64_t)&v47, 255, 1, 0, &v46);
  v10 = v46;
  if (v46)
  {
    if (((*((unsigned __int16 *)v46 + 2) | (*((unsigned __int8 *)v46 + 6) << 16)) & 0x3F800) == 0x1D800
      && (v11 = *((_DWORD *)v46 + 2)) != 0)
    {
      v12 = 0;
      v13 = 0;
      v14 = (char *)v46 + 16;
      while (1)
      {
        if (v12 > 3)
        {
          if (v11 <= v12)
          {
LABEL_102:
            __break(0xC471u);
            JUMPOUT(0x195AB1C98);
          }
          v15 = (char *)(*((_QWORD *)v46 + 6) + 8 * (v13 - 4));
        }
        else
        {
          v15 = &v14[8 * v13];
        }
        v16 = *(_QWORD *)v15;
        if (((*(unsigned __int16 *)(v16 + 4) | (*(unsigned __int8 *)(v16 + 6) << 16)) & 0x3F800) == 0
          && (*(_WORD *)(v16 + 4) & 0x7F) == 0x50
          && *(_WORD *)(v16 + 8) == 495)
        {
          break;
        }
        v12 = v13 + 1;
        v13 = (v13 + 1);
        if (v11 == v12)
        {
          v45 = 0;
          goto LABEL_29;
        }
      }
      v45 = 1;
LABEL_29:
      v19 = 0;
      v20 = 0;
      while (1)
      {
        if (v19 > 3)
        {
          if (v11 <= v19)
            goto LABEL_102;
          v21 = (char *)(*((_QWORD *)v46 + 6) + 8 * (v20 - 4));
        }
        else
        {
          v21 = &v14[8 * v20];
        }
        v22 = *(_QWORD *)v21;
        if (((*(unsigned __int16 *)(v22 + 4) | (*(unsigned __int8 *)(v22 + 6) << 16)) & 0x3F800) == 0
          && (*(_WORD *)(v22 + 4) & 0x7F) == 0x50
          && *(_WORD *)(v22 + 8) == 474)
        {
          break;
        }
        v19 = v20 + 1;
        v20 = (v20 + 1);
        if (v11 == v19)
        {
          v17 = 0;
          goto LABEL_40;
        }
      }
      v17 = 1;
    }
    else
    {
      v17 = 0;
      v45 = 0;
    }
LABEL_40:
    v46 = 0;
    if (*(_DWORD *)v10 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, v5);
    else
      *(_DWORD *)v10 -= 2;
  }
  else
  {
    v17 = 0;
    v45 = 0;
  }
  v23 = v7 == 2 ? v45 : 1;
  v24 = v8 == 8 ? v17 : 1;
  if (v24 != 1 || v23 == 0)
  {
    v18 = 0;
  }
  else
  {
LABEL_55:
    v26 = *((_QWORD *)this + 1);
    if (v26)
    {
      ++*(_DWORD *)v26;
      WebCore::getPropertiesNotIn<WebCore::ComputedStyleExtractor>((uint64_t *)&v46, (const WebCore::StyleProperties *)v26, &v47);
      v27 = v46;
      v28 = *((unsigned int *)v46 + 7);
      v18 = *((_DWORD *)v46 + 7) == 0;
      if (*(_DWORD *)v46 == 1)
      {
        if ((_DWORD)v28)
        {
          v32 = 16 * v28;
          v33 = (_DWORD **)(*((_QWORD *)v46 + 2) + 8);
          do
          {
            v34 = *v33;
            *v33 = 0;
            if (v34)
            {
              if (*v34 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v34, v5);
              else
                *v34 -= 2;
            }
            v33 += 2;
            v32 -= 16;
          }
          while (v32);
        }
        v35 = (WTF *)*((_QWORD *)v27 + 2);
        if ((WTF *)((char *)v27 + 32) != v35 && v35 != 0)
        {
          *((_QWORD *)v27 + 2) = 0;
          *((_DWORD *)v27 + 6) = 0;
          WTF::fastFree(v35, v5);
        }
        v37 = *((_QWORD *)v27 + 1);
        *((_QWORD *)v27 + 1) = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
        WTF::fastFree(v27, v5);
      }
      else
      {
        --*(_DWORD *)v46;
      }
      if (*(_DWORD *)v26 == 1)
      {
        v38 = *(unsigned int *)(v26 + 28);
        if ((_DWORD)v38)
        {
          v39 = 16 * v38;
          v40 = (_DWORD **)(*(_QWORD *)(v26 + 16) + 8);
          do
          {
            v41 = *v40;
            *v40 = 0;
            if (v41)
            {
              if (*v41 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v41, v5);
              else
                *v41 -= 2;
            }
            v40 += 2;
            v39 -= 16;
          }
          while (v39);
        }
        v42 = *(WTF **)(v26 + 16);
        if ((WTF *)(v26 + 32) != v42 && v42 != 0)
        {
          *(_QWORD *)(v26 + 16) = 0;
          *(_DWORD *)(v26 + 24) = 0;
          WTF::fastFree(v42, v5);
        }
        v44 = *(_QWORD *)(v26 + 8);
        *(_QWORD *)(v26 + 8) = 0;
        if (v44)
          (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
        WTF::fastFree((WTF *)v26, v5);
      }
      else
      {
        --*(_DWORD *)v26;
      }
    }
    else
    {
      v18 = 1;
    }
  }
  if (v50)
  {
    v29 = v49;
    v49 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v5);
      else
        *(_DWORD *)v29 -= 2;
    }
  }
  v30 = v47;
  v47 = 0;
  if (v30)
  {
    if (*((_DWORD *)v30 + 6) == 2)
    {
      if ((*((_WORD *)v30 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v30, v5);
    }
    else
    {
      *((_DWORD *)v30 + 6) -= 2;
    }
  }
  return v18;
}

_DWORD *WebCore::getPropertiesNotIn<WebCore::ComputedStyleExtractor>(uint64_t *a1, const WebCore::StyleProperties *a2, _QWORD *a3)
{
  WebCore::EditingStyle *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  int v11;
  _WORD *v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  void *v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  BOOL v19;
  WTF::StringImpl *v20;
  WTF::String *v21;
  __n128 v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t *v26;
  BOOL v27;
  int v28;
  _DWORD *v29;
  char v30;
  _DWORD *v31;
  WTF::StringBuilder *v32;
  WTF::String *v33;
  __n128 v34;
  WTF::StringImpl *v35;
  int v36;
  _DWORD *v37;
  _BOOL4 v38;
  _DWORD *v39;
  WTF::StringBuilder *v40;
  WTF::String *v41;
  __n128 v42;
  WTF::StringImpl *v43;
  int v44;
  _DWORD *v45;
  _BOOL4 v46;
  _DWORD *v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  int v58;
  WTF::StringImpl *v59;
  WTF::String *v60;
  __n128 v61;
  int v62;
  int v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringBuilder *v66;
  WTF::String *v67;
  __n128 v68;
  int v69;
  _DWORD *v70;
  _BOOL4 v71;
  _DWORD *v72;
  _DWORD *result;
  uint64_t v74;
  unint64_t v75;
  unsigned int *v76;
  unsigned int v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  WTF::StringImpl *v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  WTF::StringImpl *v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  WTF::StringImpl *v98;
  uint64_t v99;
  uint64_t v100;
  _DWORD **v101;
  _DWORD *v102;
  WTF *v103;
  uint64_t v105;
  unsigned int *v106;
  unsigned int *v107;
  unsigned int *v108;
  unsigned int v110;
  unsigned int v111;
  unsigned int v113;
  unsigned int v114;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int *v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int *v126;
  unsigned int v127;
  unsigned int v128;
  double v129;
  unint64_t v130;
  unint64_t v131;
  _DWORD *v132;
  _DWORD *v133;
  uint64_t v134;
  WTF::StringImpl *v135;
  uint64_t v136;

  v6 = (WebCore::EditingStyle *)WTF::fastMalloc((WTF *)0x18);
  v135 = 0;
  v136 = 0;
  v7 = *((_QWORD *)WebCore::EditingStyle::EditingStyle(v6, a2) + 1);
  if (*(_DWORD *)(v7 + 28))
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(v7 + 16) + 16 * v8;
      if (WebCore::ComputedStyleExtractor::propertyMatches(a3, *(_WORD *)v9 & 0x3FF, *(_QWORD *)(v9 + 8)))
      {
        v10 = *(_WORD *)v9 & 0x3FF;
        LOWORD(v134) = v10;
        v11 = HIDWORD(v136);
        if (HIDWORD(v136) == (_DWORD)v136)
        {
          v12 = (_WORD *)WTF::Vector<WebCore::CSSPropertyID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v135, HIDWORD(v136) + 1, (unint64_t)&v134);
          v11 = HIDWORD(v136);
          *((_WORD *)v135 + HIDWORD(v136)) = *v12;
        }
        else
        {
          *((_WORD *)v135 + HIDWORD(v136)) = v10;
        }
        HIDWORD(v136) = v11 + 1;
      }
      v13 = v8 + 1;
      v8 = (v8 + 1);
    }
    while (*(_DWORD *)(v7 + 28) > v13);
    v7 = *((_QWORD *)v6 + 1);
    v14 = v135;
    v15 = HIDWORD(v136);
  }
  else
  {
    v15 = 0;
    v14 = 0;
  }
  WebCore::MutableStyleProperties::removeProperties(v7, v14, v15);
  v17 = v135;
  if (v135)
  {
    v135 = 0;
    LODWORD(v136) = 0;
    WTF::fastFree(v17, v16);
  }
  v18 = (_DWORD *)*((_QWORD *)v6 + 1);
  ++*v18;
  *a1 = (uint64_t)v18;
  WebCore::ComputedStyleExtractor::propertyValue((uint64_t)a3, 341, 1, 0, &v133);
  WebCore::diffTextDecorations((uint64_t)v18, 0xFFu, (uint64_t)v133);
  WebCore::diffTextDecorations((uint64_t)v18, 0x155u, (uint64_t)v133);
  WebCore::ComputedStyleExtractor::propertyValue((uint64_t)a3, 28, 1, 0, &v132);
  if (!v132)
    goto LABEL_41;
  v19 = WebCore::fontWeightIsBold<WebCore::MutableStyleProperties>((uint64_t)v18);
  WebCore::ComputedStyleExtractor::propertyValue((uint64_t)a3, 28, 1, 0, &v134);
  v23 = v134;
  if (v134)
  {
    v24 = *(unsigned __int16 *)(v134 + 4) | (*(unsigned __int8 *)(v134 + 6) << 16);
    if ((v24 & 0x3F800) != 0)
    {
      v27 = 0;
      goto LABEL_32;
    }
    *(_DWORD *)v134 += 2;
    v25 = v24 & 0x7F;
    if (v25 == 80)
    {
      v26 = (uint64_t *)(v23 + 8);
      v28 = *(unsigned __int16 *)(v23 + 8);
      if ((v28 - 1) < 5 || v28 == 90)
        goto LABEL_28;
      if (v28 == 91)
        goto LABEL_26;
      if ((v28 - 16) < 0x1A)
      {
LABEL_28:
        v27 = 0;
LABEL_29:
        if (*(_DWORD *)v23 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v23, v20);
        else
          *(_DWORD *)v23 -= 2;
LABEL_32:
        v29 = (_DWORD *)v134;
        v134 = 0;
        if (v29)
        {
          if (*v29 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v29, v20);
          else
            *v29 -= 2;
        }
        goto LABEL_36;
      }
    }
    else
    {
      v26 = (uint64_t *)(v23 + 8);
      if (v25 == 73)
      {
        v118 = v23;
        v119 = *v26;
        v135 = 0;
        v129 = WebCore::CSSCalcValue::doubleValue(v119, (uint64_t)&v135);
        if (v135)
          WTF::fastFree((WTF::StringImpl *)((char *)v135 - 16), v20);
        v23 = v118;
        v22.n128_f64[0] = v129;
LABEL_19:
        if (v22.n128_f64[0] < 3.40282347e38)
        {
          if (v22.n128_f64[0] > -3.40282347e38)
          {
            v22.n128_f32[0] = v22.n128_f64[0];
            v27 = v22.n128_f32[0] >= 600.0;
            goto LABEL_29;
          }
          goto LABEL_28;
        }
LABEL_26:
        v27 = 1;
        goto LABEL_29;
      }
    }
    v22.n128_u64[0] = *v26;
    goto LABEL_19;
  }
  v27 = 0;
LABEL_36:
  v30 = v19 ^ v27;
  v31 = v132;
  v132 = 0;
  if (!v31)
    goto LABEL_39;
  if (*v31 != 2)
  {
    *v31 -= 2;
LABEL_39:
    if ((v30 & 1) != 0)
      goto LABEL_41;
    goto LABEL_40;
  }
  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v31, v20);
  if ((v30 & 1) == 0)
LABEL_40:
    WebCore::MutableStyleProperties::removeProperty((uint64_t)v18, (WTF::StringImpl *)0x1C, 0, v21, v22);
LABEL_41:
  WebCore::ComputedStyleExtractor::propertyValue((uint64_t)a3, 5, 1, 0, &v132);
  if (!v132)
    goto LABEL_60;
  WebCore::textColorFromStyle<WebCore::MutableStyleProperties>((uint64_t *)&v131, (uint64_t)v18);
  WebCore::ComputedStyleExtractor::propertyValue((uint64_t)a3, 5, 1, 0, &v134);
  v35 = (WTF::StringImpl *)v134;
  if (v134 && (v36 = *(unsigned __int16 *)(v134 + 4) | (*(unsigned __int8 *)(v134 + 6) << 16), (v36 & 0x3F800) == 0))
  {
    if ((v36 & 0x3F87F) == 0x18)
    {
      v52 = *(_QWORD *)(v134 + 8);
      v130 = v52;
      if ((v52 & 0x8000000000000) != 0)
      {
        v53 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFLL);
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 + 1, v53));
      }
    }
    else
    {
      _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v135, v134, v32, v33, v34);
      WebCore::CSSParser::parseColorWithoutContext((unsigned int **)&v135, 0, (uint64_t *)&v130, v78, v79, v80, v81, v82, v83);
      v84 = v135;
      v135 = 0;
      if (v84)
      {
        if (*(_DWORD *)v84 == 2)
          WTF::StringImpl::destroy(v84, v35);
        else
          *(_DWORD *)v84 -= 2;
      }
    }
  }
  else
  {
    v130 = 0x1104000000000000;
  }
  v37 = (_DWORD *)v134;
  v134 = 0;
  if (v37)
  {
    if (*v37 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v37, v35);
    else
      *v37 -= 2;
  }
  if ((v131 & 0x8000000000000) == 0)
  {
    if ((v130 & 0x8000000000000) == 0 && (_DWORD)v131 == (_DWORD)v130)
    {
      v38 = ((v130 ^ v131) & 0xFE000000000000) == 0;
      goto LABEL_55;
    }
    if ((v130 & 0x8000000000000) != 0)
    {
      v38 = 0;
      v106 = (unsigned int *)(v130 & 0xFFFFFFFFFFFFLL);
      goto LABEL_208;
    }
LABEL_182:
    v38 = 0;
    goto LABEL_55;
  }
  if ((v130 & 0x8000000000000) == 0)
    goto LABEL_182;
  v34.n128_u32[0] = *(_DWORD *)((v131 & 0xFFFFFFFFFFFFLL) + 0x10);
  v106 = (unsigned int *)(v130 & 0xFFFFFFFFFFFFLL);
  v38 = *(float *)((v131 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v130 & 0xFFFFFFFFFFFFLL) + 4)
     && *(float *)((v131 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v130 & 0xFFFFFFFFFFFFLL) + 8)
     && *(float *)((v131 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v130 & 0xFFFFFFFFFFFFLL) + 0xC)
     && v34.n128_f32[0] == *(float *)((v130 & 0xFFFFFFFFFFFFLL) + 0x10)
     && ((v130 ^ v131) & 0xFE000000000000) == 0
     && HIBYTE(v131) == HIBYTE(v130);
  do
  {
LABEL_208:
    v110 = __ldaxr(v106);
    v111 = v110 - 1;
  }
  while (__stlxr(v111, v106));
  if (!v111)
  {
    atomic_store(1u, v106);
    WTF::fastFree((WTF *)v106, v35);
  }
LABEL_55:
  if ((v131 & 0x8000000000000) != 0)
  {
    v120 = (unsigned int *)(v131 & 0xFFFFFFFFFFFFLL);
    do
    {
      v121 = __ldaxr(v120);
      v122 = v121 - 1;
    }
    while (__stlxr(v122, v120));
    if (!v122)
    {
      atomic_store(1u, v120);
      WTF::fastFree((WTF *)v120, v35);
    }
  }
  v39 = v132;
  v132 = 0;
  if (!v39)
  {
    if (!v38)
      goto LABEL_60;
LABEL_59:
    WebCore::MutableStyleProperties::removeProperty(*a1, (WTF::StringImpl *)5, 0, v33, v34);
    goto LABEL_60;
  }
  if (*v39 != 2)
  {
    *v39 -= 2;
    if (!v38)
      goto LABEL_60;
    goto LABEL_59;
  }
  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v39, v35);
  if (v38)
    goto LABEL_59;
LABEL_60:
  WebCore::ComputedStyleExtractor::propertyValue((uint64_t)a3, 83, 1, 0, &v132);
  if (!v132)
    goto LABEL_79;
  WebCore::caretColorFromStyle<WebCore::MutableStyleProperties>((uint64_t *)&v131, *a1);
  WebCore::ComputedStyleExtractor::propertyValue((uint64_t)a3, 83, 1, 0, &v134);
  v43 = (WTF::StringImpl *)v134;
  if (v134 && (v44 = *(unsigned __int16 *)(v134 + 4) | (*(unsigned __int8 *)(v134 + 6) << 16), (v44 & 0x3F800) == 0))
  {
    if ((v44 & 0x3F87F) == 0x18)
    {
      v55 = *(_QWORD *)(v134 + 8);
      v130 = v55;
      if ((v55 & 0x8000000000000) != 0)
      {
        v56 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFLL);
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 + 1, v56));
      }
    }
    else
    {
      _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v135, v134, v40, v41, v42);
      WebCore::CSSParser::parseColorWithoutContext((unsigned int **)&v135, 0, (uint64_t *)&v130, v85, v86, v87, v88, v89, v90);
      v91 = v135;
      v135 = 0;
      if (v91)
      {
        if (*(_DWORD *)v91 == 2)
          WTF::StringImpl::destroy(v91, v43);
        else
          *(_DWORD *)v91 -= 2;
      }
    }
  }
  else
  {
    v130 = 0x1104000000000000;
  }
  v45 = (_DWORD *)v134;
  v134 = 0;
  if (v45)
  {
    if (*v45 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v45, v43);
    else
      *v45 -= 2;
  }
  if ((v131 & 0x8000000000000) == 0)
  {
    if ((v130 & 0x8000000000000) == 0 && (_DWORD)v131 == (_DWORD)v130)
    {
      v46 = ((v130 ^ v131) & 0xFE000000000000) == 0;
      goto LABEL_74;
    }
    if ((v130 & 0x8000000000000) != 0)
    {
      v46 = 0;
      v107 = (unsigned int *)(v130 & 0xFFFFFFFFFFFFLL);
      goto LABEL_217;
    }
LABEL_184:
    v46 = 0;
    goto LABEL_74;
  }
  if ((v130 & 0x8000000000000) == 0)
    goto LABEL_184;
  v42.n128_u32[0] = *(_DWORD *)((v131 & 0xFFFFFFFFFFFFLL) + 0x10);
  v107 = (unsigned int *)(v130 & 0xFFFFFFFFFFFFLL);
  v46 = *(float *)((v131 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v130 & 0xFFFFFFFFFFFFLL) + 4)
     && *(float *)((v131 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v130 & 0xFFFFFFFFFFFFLL) + 8)
     && *(float *)((v131 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v130 & 0xFFFFFFFFFFFFLL) + 0xC)
     && v42.n128_f32[0] == *(float *)((v130 & 0xFFFFFFFFFFFFLL) + 0x10)
     && ((v130 ^ v131) & 0xFE000000000000) == 0
     && HIBYTE(v131) == HIBYTE(v130);
  do
  {
LABEL_217:
    v113 = __ldaxr(v107);
    v114 = v113 - 1;
  }
  while (__stlxr(v114, v107));
  if (!v114)
  {
    atomic_store(1u, v107);
    WTF::fastFree((WTF *)v107, v43);
  }
LABEL_74:
  if ((v131 & 0x8000000000000) != 0)
  {
    v123 = (unsigned int *)(v131 & 0xFFFFFFFFFFFFLL);
    do
    {
      v124 = __ldaxr(v123);
      v125 = v124 - 1;
    }
    while (__stlxr(v125, v123));
    if (!v125)
    {
      atomic_store(1u, v123);
      WTF::fastFree((WTF *)v123, v43);
    }
  }
  v47 = v132;
  v132 = 0;
  if (!v47)
  {
    if (!v46)
      goto LABEL_79;
LABEL_78:
    WebCore::MutableStyleProperties::removeProperty(*a1, (WTF::StringImpl *)0x53, 0, v41, v42);
    goto LABEL_79;
  }
  if (*v47 != 2)
  {
    *v47 -= 2;
    if (!v46)
      goto LABEL_79;
    goto LABEL_78;
  }
  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v47, v43);
  if (v46)
    goto LABEL_78;
LABEL_79:
  WebCore::ComputedStyleExtractor::propertyValue((uint64_t)a3, 249, 1, 0, &v135);
  if (v135)
  {
    v48 = *a1;
    v49 = WebCore::identifierForStyleProperty<WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WebCore::MutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::MutableStyleProperties>>>(*a1, 249);
    v50 = WebCore::identifierForStyleProperty<WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WebCore::MutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::MutableStyleProperties>>>(v48, 6);
    v51 = 260;
    switch(v49)
    {
      case 258:
      case 262:
        v51 = 258;
        break;
      case 259:
      case 263:
        v51 = 259;
        break;
      case 260:
      case 264:
        break;
      case 261:
        v51 = 261;
        break;
      default:
        if (v49 == 500 || v49 == 501)
        {
          if (v50 == 434)
            v51 = 259;
          else
            v51 = 258;
        }
        else
        {
          v51 = 0;
        }
        break;
    }
    v58 = WebCore::identifierForStyleProperty<WebCore::ComputedStyleExtractor>((uint64_t)a3, 249);
    WebCore::identifierForStyleProperty<WebCore::ComputedStyleExtractor>((uint64_t)a3, 6);
    v62 = v58 - 258;
    v63 = 260;
    switch(v62)
    {
      case 0:
      case 4:
        v63 = 258;
        break;
      case 1:
      case 5:
        v63 = 259;
        break;
      case 2:
      case 6:
        break;
      case 3:
        v63 = 261;
        break;
      default:
        v63 = 0;
        break;
    }
    v64 = v135;
    v135 = 0;
    if (v64)
    {
      if (*(_DWORD *)v64 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v64, v59);
      else
        *(_DWORD *)v64 -= 2;
    }
    if (v51 == v63)
      WebCore::MutableStyleProperties::removeProperty(v48, (WTF::StringImpl *)0xF9, 0, v60, v61);
  }
  WebCore::ComputedStyleExtractor::propertyValue((uint64_t)a3, 61, 1, 0, &v132);
  if (!v132)
    goto LABEL_130;
  WebCore::backgroundColorFromStyle<WebCore::MutableStyleProperties>((uint64_t *)&v131, *a1);
  WebCore::ComputedStyleExtractor::propertyValue((uint64_t)a3, 61, 1, 0, &v134);
  v65 = (WTF::StringImpl *)v134;
  if (v134 && (v69 = *(unsigned __int16 *)(v134 + 4) | (*(unsigned __int8 *)(v134 + 6) << 16), (v69 & 0x3F800) == 0))
  {
    if ((v69 & 0x3F87F) == 0x18)
    {
      v75 = *(_QWORD *)(v134 + 8);
      v130 = v75;
      if ((v75 & 0x8000000000000) != 0)
      {
        v76 = (unsigned int *)(v75 & 0xFFFFFFFFFFFFLL);
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 + 1, v76));
      }
    }
    else
    {
      _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v135, v134, v66, v67, v68);
      WebCore::CSSParser::parseColorWithoutContext((unsigned int **)&v135, 0, (uint64_t *)&v130, v92, v93, v94, v95, v96, v97);
      v98 = v135;
      v135 = 0;
      if (v98)
      {
        if (*(_DWORD *)v98 == 2)
          WTF::StringImpl::destroy(v98, v65);
        else
          *(_DWORD *)v98 -= 2;
      }
    }
  }
  else
  {
    v130 = 0x1104000000000000;
  }
  v70 = (_DWORD *)v134;
  v134 = 0;
  if (v70)
  {
    if (*v70 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v70, v65);
    else
      *v70 -= 2;
  }
  if ((v131 & 0x8000000000000) == 0)
  {
    if ((v130 & 0x8000000000000) == 0 && (_DWORD)v131 == (_DWORD)v130)
    {
      v71 = ((v130 ^ v131) & 0xFE000000000000) == 0;
      goto LABEL_125;
    }
    if ((v130 & 0x8000000000000) != 0)
    {
      v71 = 0;
      v108 = (unsigned int *)(v130 & 0xFFFFFFFFFFFFLL);
      goto LABEL_226;
    }
LABEL_186:
    v71 = 0;
    goto LABEL_125;
  }
  if ((v130 & 0x8000000000000) == 0)
    goto LABEL_186;
  v68.n128_u32[0] = *(_DWORD *)((v131 & 0xFFFFFFFFFFFFLL) + 0x10);
  v108 = (unsigned int *)(v130 & 0xFFFFFFFFFFFFLL);
  v71 = *(float *)((v131 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v130 & 0xFFFFFFFFFFFFLL) + 4)
     && *(float *)((v131 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v130 & 0xFFFFFFFFFFFFLL) + 8)
     && *(float *)((v131 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v130 & 0xFFFFFFFFFFFFLL) + 0xC)
     && v68.n128_f32[0] == *(float *)((v130 & 0xFFFFFFFFFFFFLL) + 0x10)
     && ((v130 ^ v131) & 0xFE000000000000) == 0
     && HIBYTE(v131) == HIBYTE(v130);
  do
  {
LABEL_226:
    v116 = __ldaxr(v108);
    v117 = v116 - 1;
  }
  while (__stlxr(v117, v108));
  if (!v117)
  {
    atomic_store(1u, v108);
    WTF::fastFree((WTF *)v108, v65);
  }
LABEL_125:
  if ((v131 & 0x8000000000000) != 0)
  {
    v126 = (unsigned int *)(v131 & 0xFFFFFFFFFFFFLL);
    do
    {
      v127 = __ldaxr(v126);
      v128 = v127 - 1;
    }
    while (__stlxr(v128, v126));
    if (!v128)
    {
      atomic_store(1u, v126);
      WTF::fastFree((WTF *)v126, v65);
    }
  }
  v72 = v132;
  v132 = 0;
  if (!v72)
  {
    if (!v71)
      goto LABEL_130;
LABEL_129:
    WebCore::MutableStyleProperties::removeProperty(*a1, (WTF::StringImpl *)0x3D, 0, v67, v68);
    goto LABEL_130;
  }
  if (*v72 != 2)
  {
    *v72 -= 2;
    if (!v71)
      goto LABEL_130;
    goto LABEL_129;
  }
  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v72, v65);
  if (v71)
    goto LABEL_129;
LABEL_130:
  result = v133;
  v133 = 0;
  if (result)
  {
    if (*result == 2)
      result = (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v65);
    else
      *result -= 2;
  }
  if (*(_DWORD *)v6 == 1)
  {
    v74 = *((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = 0;
    if (v74)
    {
      if (*(_DWORD *)v74 == 1)
      {
        v99 = *(unsigned int *)(v74 + 28);
        if ((_DWORD)v99)
        {
          v100 = 16 * v99;
          v101 = (_DWORD **)(*(_QWORD *)(v74 + 16) + 8);
          do
          {
            v102 = *v101;
            *v101 = 0;
            if (v102)
            {
              if (*v102 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v102, v65);
              else
                *v102 -= 2;
            }
            v101 += 2;
            v100 -= 16;
          }
          while (v100);
        }
        v103 = *(WTF **)(v74 + 16);
        if ((WTF *)(v74 + 32) != v103 && v103 != 0)
        {
          *(_QWORD *)(v74 + 16) = 0;
          *(_DWORD *)(v74 + 24) = 0;
          WTF::fastFree(v103, v65);
        }
        v105 = *(_QWORD *)(v74 + 8);
        *(_QWORD *)(v74 + 8) = 0;
        if (v105)
          (*(void (**)(uint64_t))(*(_QWORD *)v105 + 8))(v105);
        WTF::fastFree((WTF *)v74, v65);
      }
      else
      {
        --*(_DWORD *)v74;
      }
    }
    return (_DWORD *)WTF::fastFree(v6, v65);
  }
  else
  {
    --*(_DWORD *)v6;
  }
  return result;
}

uint64_t WebCore::EditingStyle::elementIsStyledSpanOrHTMLEquivalent(WebCore::EditingStyle *this, const WebCore::HTMLElement *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  WebCore::EditingStyle *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  __n128 v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  WTF::String *v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v34;
  BOOL v35;
  int v36;
  BOOL v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v45;
  int v46;
  BOOL v48;

  v5 = this;
  if (*(_QWORD *)(*((_QWORD *)this + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::spanTag + 24))
    goto LABEL_10;
  WebCore::htmlElementEquivalents(this);
  this = (WebCore::EditingStyle *)(*(uint64_t (**)(uint64_t, WebCore::EditingStyle *))(*(_QWORD *)qword_1ECE83270
                                                                                              + 16))(qword_1ECE83270, v5);
  if ((this & 1) != 0
    || (this = (WebCore::EditingStyle *)(*(uint64_t (**)(uint64_t, WebCore::EditingStyle *))(*(_QWORD *)qword_1ECE83278 + 16))(qword_1ECE83278, v5), (this & 1) != 0)|| (this = (WebCore::EditingStyle *)(*(uint64_t (**)(uint64_t, WebCore::EditingStyle *))(*(_QWORD *)qword_1ECE83280 + 16))(qword_1ECE83280, v5), (this & 1) != 0)|| (this = (WebCore::EditingStyle *)(*(uint64_t (**)(uint64_t, WebCore::EditingStyle *))(*(_QWORD *)qword_1ECE83288 + 16))(qword_1ECE83288, v5), (this & 1) != 0)|| (this = (WebCore::EditingStyle *)(*(uint64_t (**)(uint64_t, WebCore::EditingStyle *))(*(_QWORD *)qword_1ECE83290 + 16))(qword_1ECE83290, v5), (this & 1) != 0)|| (this = (WebCore::EditingStyle *)(*(uint64_t (**)(uint64_t, WebCore::EditingStyle *))(*(_QWORD *)qword_1ECE83298 + 16))(qword_1ECE83298, v5), (this & 1) != 0)
    || (this = (WebCore::EditingStyle *)(*(uint64_t (**)(uint64_t, WebCore::EditingStyle *))(*(_QWORD *)qword_1ECE832A0 + 16))(qword_1ECE832A0, v5), (this & 1) != 0)|| (this = (WebCore::EditingStyle *)(*(uint64_t (**)(uint64_t, WebCore::EditingStyle *))(*(_QWORD *)qword_1ECE832A8 + 16))(qword_1ECE832A8, v5), (this & 1) != 0))
  {
LABEL_10:
    v6 = 1;
  }
  else
  {
    this = (WebCore::EditingStyle *)(*(uint64_t (**)(uint64_t, WebCore::EditingStyle *))(*(_QWORD *)qword_1ECE832B0
                                                                                                + 16))(qword_1ECE832B0, v5);
    v6 = (uint64_t)this;
  }
  v7 = *((_QWORD *)v5 + 13);
  if (!v7)
    return v6;
  if ((*(_BYTE *)(v7 + 4) & 8) != 0)
    this = WebCore::StyledElement::synchronizeStyleAttributeInternalImpl(v5, (unsigned __int8 *)a2, a5, a3, a4);
  if ((*((_WORD *)v5 + 14) & 0x20) != 0)
    this = WebCore::SVGElement::synchronizeAllAttributes(v5);
  v8 = *((_QWORD *)v5 + 13);
  if (!v8)
    return v6;
  v9 = *(_DWORD *)(v8 + 4);
  if ((v9 & 1) != 0)
  {
    if (!*(_DWORD *)(v8 + 52))
      return v6;
  }
  else if (!(v9 >> 5))
  {
    return v6;
  }
  WebCore::htmlAttributeEquivalents(this);
  if ((*(unsigned int (**)(uint64_t, WebCore::EditingStyle *))(*(_QWORD *)WebCore::htmlAttributeEquivalents(void)::equivalents[0]
                                                                        + 16))(WebCore::htmlAttributeEquivalents(void)::equivalents[0], v5))
  {
    v10 = **(_QWORD **)(WebCore::htmlAttributeEquivalents(void)::equivalents[0] + 32) != WebCore::HTMLNames::dirAttr;
  }
  else
  {
    v10 = 0;
  }
  if ((*(unsigned int (**)(uint64_t, WebCore::EditingStyle *))(*(_QWORD *)qword_1EE2F58A0 + 16))(qword_1EE2F58A0, v5)&& **(_QWORD **)(qword_1EE2F58A0 + 32) != WebCore::HTMLNames::dirAttr)
  {
    ++v10;
  }
  if ((*(unsigned int (**)(uint64_t, WebCore::EditingStyle *))(*(_QWORD *)qword_1EE2F58A8 + 16))(qword_1EE2F58A8, v5)&& **(_QWORD **)(qword_1EE2F58A8 + 32) != WebCore::HTMLNames::dirAttr)
  {
    ++v10;
  }
  if ((*(unsigned int (**)(uint64_t, WebCore::EditingStyle *))(*(_QWORD *)qword_1EE2F58B0 + 16))(qword_1EE2F58B0, v5)&& **(_QWORD **)(qword_1EE2F58B0 + 32) != WebCore::HTMLNames::dirAttr)
  {
    ++v10;
  }
  if ((*(unsigned int (**)(uint64_t, WebCore::EditingStyle *))(*(_QWORD *)qword_1EE2F58B8 + 16))(qword_1EE2F58B8, v5)&& **(_QWORD **)(qword_1EE2F58B8 + 32) != WebCore::HTMLNames::dirAttr)
  {
    ++v10;
  }
  if (v10)
    v11 = 1;
  else
    v11 = v6;
  if (v11 != 1)
    return 0;
  v12 = *((_QWORD *)v5 + 13);
  if (v12)
  {
    v13 = *(_DWORD *)(v12 + 4);
    if ((v13 & 1) != 0)
    {
      v14 = *(_QWORD *)(v12 + 40);
      LODWORD(v15) = *(_DWORD *)(v12 + 52);
      if ((_DWORD)v15)
      {
LABEL_43:
        v15 = v15;
        v16 = (_QWORD *)(v14 + 8);
        while (1)
        {
          v17 = *(v16 - 1);
          if (v17 == WebCore::HTMLNames::classAttr
            || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 24)
            && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 32))
          {
            goto LABEL_52;
          }
          v16 += 2;
          if (!--v15)
          {
            v16 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            goto LABEL_52;
          }
        }
      }
    }
    else
    {
      v14 = v12 + 32;
      LODWORD(v15) = v13 >> 5;
      if ((_DWORD)v15)
        goto LABEL_43;
    }
  }
  v16 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_52:
  v18.n128_f64[0] = MEMORY[0x19AEA53F4](*v16, "Apple-style-span", 16);
  v20 = v10 + v19;
  result = WebCore::Element::hasAttribute(v5, (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, v21, v22, v18);
  v24 = *((_QWORD *)v5 + 13);
  if (!(_DWORD)result)
    goto LABEL_58;
  if (!v24)
    goto LABEL_57;
  v25 = *(_QWORD *)(v24 + 8);
  if (!v25)
    goto LABEL_57;
  v26 = *(_DWORD *)(v25 + 4);
  if ((v26 & 8) == 0)
  {
    if (v26 >= 0x10)
    {
      v29 = 0;
      v30 = v26 >> 4;
      v31 = v25 + 8;
      while (1)
      {
        v32 = *(_WORD *)(v31 + 2 * v29) & 0x3FF;
        if (v32 <= 0xF8)
        {
          v38 = v32 > 0x3D || ((1 << v32) & 0x2000001410212120) == 0;
          if (v38 && v32 != 83 && v32 != 185)
            return 0;
        }
        else if (v32 - 249 > 0x2E || ((1 << (v32 + 7)) & 0x600000244041) == 0)
        {
          v34 = v32 - 340;
          v35 = v34 > 0xA;
          v36 = (1 << v34) & 0x437;
          if (v35 || v36 == 0)
            return 0;
        }
        v39 = v29 + 1;
        v29 = (v29 + 1);
        if (v30 <= v39)
          goto LABEL_57;
      }
    }
    goto LABEL_57;
  }
  v40 = *(_DWORD *)(v25 + 28);
  if (!v40)
  {
LABEL_57:
    ++v20;
LABEL_58:
    v27 = *(_DWORD *)(v24 + 4);
    if (v24 && (v27 & 1) != 0)
      v28 = *(_DWORD *)(v24 + 52);
    else
      v28 = v27 >> 5;
    return v20 >= v28;
  }
  v41 = 0;
  v42 = 0;
  while (v40 > v41)
  {
    v43 = *(_WORD *)(*(_QWORD *)(v25 + 16) + 16 * v42) & 0x3FF;
    if (v43 <= 0xF8)
    {
      v48 = v43 > 0x3D || ((1 << v43) & 0x2000001410212120) == 0;
      if (v48 && v43 != 83 && v43 != 185)
        return 0;
    }
    else if (v43 - 249 > 0x2E || ((1 << (v43 + 7)) & 0x600000244041) == 0)
    {
      v45 = v43 - 340;
      v35 = v45 > 0xA;
      v46 = (1 << v45) & 0x437;
      if (v35 || v46 == 0)
        return 0;
    }
    v41 = v42 + 1;
    v42 = (v42 + 1);
    if (v40 <= v41)
      goto LABEL_57;
  }
  __break(0xC471u);
  return result;
}

WTF::StringImpl *WebCore::textColorFromStyle<WebCore::MutableStyleProperties>(uint64_t *a1, uint64_t a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  WTF::StringBuilder *v5;
  WTF::String *v6;
  __n128 v7;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  WTF::StringImpl *v20;

  result = (WTF::StringImpl *)WebCore::StyleProperties::getPropertyCSSValue(a2, 5, &v19);
  v8 = (_DWORD *)v19;
  if (!v19 || (v9 = *(unsigned __int16 *)(v19 + 4) | (*(unsigned __int8 *)(v19 + 6) << 16), (v9 & 0x3F800) != 0))
  {
    *a1 = 0x1104000000000000;
    goto LABEL_4;
  }
  if ((v9 & 0x3F87F) == 0x18)
  {
    v10 = *(_QWORD *)(v19 + 8);
    *a1 = v10;
    if ((v10 & 0x8000000000000) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
      v8 = (_DWORD *)v19;
LABEL_4:
      v19 = 0;
      if (!v8)
        return result;
      goto LABEL_5;
    }
  }
  else
  {
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v20, v19, v5, v6, v7);
    WebCore::CSSParser::parseColorWithoutContext((unsigned int **)&v20, 0, a1, v13, v14, v15, v16, v17, v18);
    result = v20;
    v20 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  v19 = 0;
LABEL_5:
  if (*v8 == 2)
    return (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, v4);
  *v8 -= 2;
  return result;
}

WTF::StringImpl *WebCore::caretColorFromStyle<WebCore::MutableStyleProperties>(uint64_t *a1, uint64_t a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  WTF::StringBuilder *v5;
  WTF::String *v6;
  __n128 v7;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  WTF::StringImpl *v20;

  result = (WTF::StringImpl *)WebCore::StyleProperties::getPropertyCSSValue(a2, 83, &v19);
  v8 = (_DWORD *)v19;
  if (!v19 || (v9 = *(unsigned __int16 *)(v19 + 4) | (*(unsigned __int8 *)(v19 + 6) << 16), (v9 & 0x3F800) != 0))
  {
    *a1 = 0x1104000000000000;
    goto LABEL_4;
  }
  if ((v9 & 0x3F87F) == 0x18)
  {
    v10 = *(_QWORD *)(v19 + 8);
    *a1 = v10;
    if ((v10 & 0x8000000000000) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
      v8 = (_DWORD *)v19;
LABEL_4:
      v19 = 0;
      if (!v8)
        return result;
      goto LABEL_5;
    }
  }
  else
  {
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v20, v19, v5, v6, v7);
    WebCore::CSSParser::parseColorWithoutContext((unsigned int **)&v20, 0, a1, v13, v14, v15, v16, v17, v18);
    result = v20;
    v20 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  v19 = 0;
LABEL_5:
  if (*v8 == 2)
    return (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, v4);
  *v8 -= 2;
  return result;
}

WebCore::MutableStyleProperties *WebCore::EditingStyle::mergeTypingStyle(WebCore::MutableStyleProperties *this, WebCore::Document *a2)
{
  WebCore::MutableStyleProperties *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD **v7;
  _DWORD *v8;
  WTF *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD **v14;
  _DWORD *v15;
  WTF *v16;
  uint64_t v18;

  v2 = *(WebCore::MutableStyleProperties **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 66) + 8) + 296)
                                                       + 3064)
                                           + 200);
  if (v2)
  {
    ++*(_DWORD *)v2;
    if (v2 != this)
    {
      v3 = *((_QWORD *)v2 + 1);
      if (v3)
      {
        ++*(_DWORD *)v3;
        this = WebCore::EditingStyle::mergeStyle(this, v3, 0);
        if (*(_DWORD *)v3 == 1)
        {
          v5 = *(unsigned int *)(v3 + 28);
          if ((_DWORD)v5)
          {
            v6 = 16 * v5;
            v7 = (_DWORD **)(*(_QWORD *)(v3 + 16) + 8);
            do
            {
              v8 = *v7;
              *v7 = 0;
              if (v8)
              {
                if (*v8 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, a2);
                else
                  *v8 -= 2;
              }
              v7 += 2;
              v6 -= 16;
            }
            while (v6);
          }
          v9 = *(WTF **)(v3 + 16);
          if ((WTF *)(v3 + 32) != v9 && v9 != 0)
          {
            *(_QWORD *)(v3 + 16) = 0;
            *(_DWORD *)(v3 + 24) = 0;
            WTF::fastFree(v9, a2);
          }
          v11 = *(_QWORD *)(v3 + 8);
          *(_QWORD *)(v3 + 8) = 0;
          if (v11)
            (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
          this = (WebCore::MutableStyleProperties *)WTF::fastFree((WTF *)v3, a2);
        }
        else
        {
          --*(_DWORD *)v3;
        }
      }
    }
    if (*(_DWORD *)v2 == 1)
    {
      v4 = *((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 1)
        {
          v12 = *(unsigned int *)(v4 + 28);
          if ((_DWORD)v12)
          {
            v13 = 16 * v12;
            v14 = (_DWORD **)(*(_QWORD *)(v4 + 16) + 8);
            do
            {
              v15 = *v14;
              *v14 = 0;
              if (v15)
              {
                if (*v15 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, a2);
                else
                  *v15 -= 2;
              }
              v14 += 2;
              v13 -= 16;
            }
            while (v13);
          }
          v16 = *(WTF **)(v4 + 16);
          if ((WTF *)(v4 + 32) != v16 && v16 != 0)
          {
            *(_QWORD *)(v4 + 16) = 0;
            *(_DWORD *)(v4 + 24) = 0;
            WTF::fastFree(v16, a2);
          }
          v18 = *(_QWORD *)(v4 + 8);
          *(_QWORD *)(v4 + 8) = 0;
          if (v18)
            (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
          WTF::fastFree((WTF *)v4, a2);
        }
        else
        {
          --*(_DWORD *)v4;
        }
      }
      return (WebCore::MutableStyleProperties *)WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

WebCore::MutableStyleProperties *WebCore::EditingStyle::mergeInlineStyleOfElement(WebCore::MutableStyleProperties *this, WTF::StringImpl *a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::MutableStyleProperties *v7;
  WTF *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD **v12;
  _DWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD *v18;
  WTF *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD **v24;
  _DWORD *v25;
  WTF *v26;
  uint64_t v28;
  unint64_t v29;
  unsigned int *v30;
  _DWORD *v31;
  WTF *v32;

  v4 = *((_QWORD *)a2 + 13);
  if (!v4)
    return this;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return this;
  v7 = this;
  ++*(_DWORD *)v5;
  if (a4 == 2)
  {
    WebCore::StyleProperties::copyProperties(v5, WebCore::editingProperties, 0x18uLL, (uint64_t *)&v32);
    this = WebCore::EditingStyle::mergeStyle(v7, (uint64_t)v32, a3);
    v8 = v32;
    v32 = 0;
    if (!v8)
      goto LABEL_20;
    v9 = *(_DWORD *)v8 - 1;
    if (*(_DWORD *)v8 != 1)
      goto LABEL_19;
    v10 = *((unsigned int *)v8 + 7);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      v12 = (_DWORD **)(*((_QWORD *)v8 + 2) + 8);
      do
      {
        v13 = *v12;
        *v12 = 0;
        if (v13)
        {
          if (*v13 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, a2);
          else
            *v13 -= 2;
        }
        v12 += 2;
        v11 -= 16;
      }
      while (v11);
    }
    goto LABEL_46;
  }
  if (a4 != 1)
  {
    if (!a4)
      this = WebCore::EditingStyle::mergeStyle(this, v5, a3);
    goto LABEL_20;
  }
  WebCore::StyleProperties::copyProperties(v5, WebCore::editingProperties, 0x16uLL, (uint64_t *)&v32);
  this = WebCore::EditingStyle::mergeStyle(v7, (uint64_t)v32, a3);
  v8 = v32;
  v32 = 0;
  if (v8)
  {
    v9 = *(_DWORD *)v8 - 1;
    if (*(_DWORD *)v8 != 1)
    {
LABEL_19:
      *(_DWORD *)v8 = v9;
      goto LABEL_20;
    }
    v22 = *((unsigned int *)v8 + 7);
    if ((_DWORD)v22)
    {
      v23 = 16 * v22;
      v24 = (_DWORD **)(*((_QWORD *)v8 + 2) + 8);
      do
      {
        v25 = *v24;
        *v24 = 0;
        if (v25)
        {
          if (*v25 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v25, a2);
          else
            *v25 -= 2;
        }
        v24 += 2;
        v23 -= 16;
      }
      while (v23);
    }
LABEL_46:
    v26 = (WTF *)*((_QWORD *)v8 + 2);
    if ((WTF *)((char *)v8 + 32) != v26 && v26 != 0)
    {
      *((_QWORD *)v8 + 2) = 0;
      *((_DWORD *)v8 + 6) = 0;
      WTF::fastFree(v26, a2);
    }
    v28 = *((_QWORD *)v8 + 1);
    *((_QWORD *)v8 + 1) = 0;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    this = (WebCore::MutableStyleProperties *)WTF::fastFree(v8, a2);
  }
LABEL_20:
  if (*(_DWORD *)v5 == 1)
  {
    v14 = *(unsigned int *)(v5 + 4);
    if ((v14 & 8) != 0)
    {
      v15 = *(unsigned int *)(v5 + 28);
      if ((_DWORD)v15)
      {
        v16 = 16 * v15;
        v17 = (_DWORD **)(*(_QWORD *)(v5 + 16) + 8);
        do
        {
          v18 = *v17;
          *v17 = 0;
          if (v18)
          {
            if (*v18 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, a2);
            else
              *v18 -= 2;
          }
          v17 += 2;
          v16 -= 16;
        }
        while (v16);
      }
      v19 = *(WTF **)(v5 + 16);
      if ((WTF *)(v5 + 32) != v19 && v19 != 0)
      {
        *(_QWORD *)(v5 + 16) = 0;
        *(_DWORD *)(v5 + 24) = 0;
        WTF::fastFree(v19, a2);
      }
      v21 = *(_QWORD *)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    }
    else if (v14 >= 0x10)
    {
      v29 = 0;
      v30 = (unsigned int *)(v5 + ((v14 >> 3) & 0x1FFFFFFE) + 8);
      do
      {
        v31 = (_DWORD *)(*v30 | ((unint64_t)*((unsigned __int8 *)v30 + 4) << 32));
        if (*v31 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v31, a2);
        else
          *v31 -= 2;
        ++v29;
        v30 = (unsigned int *)((char *)v30 + 5);
      }
      while (v29 < (unint64_t)*(unsigned int *)(v5 + 4) >> 4);
    }
    return (WebCore::MutableStyleProperties *)WTF::fastFree((WTF *)v5, a2);
  }
  else
  {
    --*(_DWORD *)v5;
  }
  return this;
}

WebCore::Node *WebCore::EditingStyle::mergeStyleFromRulesForSerialization(WebCore::EditingStyle *a1, WebCore::StyledElement *a2, int a3)
{
  const WTF::StringImpl *v6;
  WTF::String *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _DWORD *v22;
  unsigned __int8 *v23;
  int v24;
  char v25;
  _DWORD *v26;
  unsigned int v27;
  unsigned __int8 *v28;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  WTF::String *v37;
  __n128 v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WebCore::Node *result;
  uint64_t v42;
  uint64_t v43;
  _DWORD **v44;
  _DWORD *v45;
  WTF *v46;
  uint64_t v48;
  WebCore::EditingStyle *v49;
  __int16 v50;
  _DWORD *v51;
  _DWORD *v52;
  WebCore::Node *v53;
  char v54;
  WTF::StringImpl *v55;
  char v56;
  char v57;

  WebCore::EditingStyle::mergeStyleFromRules(a1, a2);
  v8 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v8 = 0x900000001;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = v8 + 32;
  v9.n128_u64[0] = 4;
  *(_QWORD *)(v8 + 24) = 4;
  *((_DWORD *)a2 + 6) += 2;
  v53 = a2;
  v54 = 0;
  v56 = 0;
  v57 = 0;
  v10 = *((_QWORD *)a1 + 1);
  if (!*(_DWORD *)(v10 + 28))
    goto LABEL_84;
  v49 = a1;
  v11 = 0;
  v12 = 0;
  do
  {
    v13 = *(_QWORD *)(v10 + 16) + 16 * v12;
    v14 = *(_QWORD *)(v13 + 8);
    v15 = *(_DWORD *)v14;
    *(_DWORD *)v14 += 2;
    v16 = *(_WORD *)v13 & 0x3FF;
    v17 = *(unsigned __int16 *)(v14 + 4) | (*(unsigned __int8 *)(v14 + 6) << 16);
    if ((_DWORD)v16 == 8)
    {
      if ((v17 & 0x3F800) == 0)
      {
        v18 = 0;
        *(_DWORD *)v14 = v15 + 4;
        v19 = (v17 & 0x7Fu) - 20;
        if (v19 <= 0x3C)
        {
          if (((1 << ((v17 & 0x7Fu) - 20)) & 0x20008000000000BLL) == 0)
          {
            if (v19 == 60)
            {
              v30 = WebCore::nameString(*(unsigned __int16 *)(v14 + 8));
            }
            else
            {
              if (v19 != 59)
                goto LABEL_9;
              v30 = WebCore::nameString(*(unsigned __int16 *)(v14 + 8));
            }
            v18 = *v30;
            if (!*v30)
              goto LABEL_9;
            goto LABEL_8;
          }
          v18 = *(_QWORD *)(v14 + 8);
          if (v18)
LABEL_8:
            *(_DWORD *)v18 += 2;
        }
LABEL_9:
        if (*(_DWORD *)v14 != 2)
        {
          *(_DWORD *)v14 -= 2;
          if (!v18)
            goto LABEL_75;
LABEL_26:
          if (*(_DWORD *)(v18 + 4))
          {
            v23 = *(unsigned __int8 **)(v18 + 8);
            v24 = (*(_BYTE *)(v18 + 16) & 4) != 0 ? *v23 : *(unsigned __int16 *)v23;
            if (v24 == 46)
            {
              v11 = 1;
LABEL_36:
              if (*(_DWORD *)v18 == 2)
                WTF::StringImpl::destroy((WTF::StringImpl *)v18, (WTF::StringImpl *)v16);
              else
                *(_DWORD *)v18 -= 2;
              goto LABEL_45;
            }
          }
          v25 = 0;
          goto LABEL_32;
        }
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v14, (WTF::StringImpl *)v16);
        if (v18)
          goto LABEL_26;
LABEL_75:
        v25 = 1;
LABEL_32:
        if (a3 == 1
          && WTF::equal((WTF *)v18, (const WTF::StringImpl *)WebCore::WebKitFontFamilyNames::standardFamily, v6))
        {
          v11 = 1;
        }
        if ((v25 & 1) == 0)
          goto LABEL_36;
LABEL_45:
        v15 = *(_DWORD *)v14 - 2;
        if (*(_DWORD *)v14 != 2)
          goto LABEL_46;
        goto LABEL_48;
      }
      if ((v17 & 0x3F800) != 0x1D800)
      {
        v18 = 0;
        goto LABEL_75;
      }
      *(_DWORD *)v14 = v15 + 4;
      if (*(_DWORD *)(v14 + 8) != 1
        || (v31 = *(_QWORD *)(v14 + 16)) == 0
        || (v32 = *(unsigned __int16 *)(v31 + 4) | (*(unsigned __int8 *)(v31 + 6) << 16), (v32 & 0x3F800) != 0))
      {
        v18 = 0;
        goto LABEL_9;
      }
      v18 = 0;
      *(_DWORD *)v31 += 2;
      v33 = (v32 & 0x7Fu) - 20;
      if (v33 <= 0x3C)
      {
        if (((1 << v33) & 0x20008000000000BLL) != 0)
        {
          v18 = *(_QWORD *)(v31 + 8);
          if (!v18)
            goto LABEL_69;
          goto LABEL_68;
        }
        v34 = v31;
        if (v33 == 60)
        {
          v35 = WebCore::nameString(*(unsigned __int16 *)(v31 + 8));
        }
        else
        {
          if (v33 != 59)
            goto LABEL_69;
          v35 = WebCore::nameString(*(unsigned __int16 *)(v31 + 8));
        }
        v36 = v35;
        v31 = v34;
        v18 = *v36;
        if (*v36)
LABEL_68:
          *(_DWORD *)v18 += 2;
      }
LABEL_69:
      if (*(_DWORD *)v31 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v31, (WTF::StringImpl *)v16);
      else
        *(_DWORD *)v31 -= 2;
      goto LABEL_9;
    }
    if ((v17 & 0x3F800) == 0)
    {
      v20 = *(_WORD *)(v14 + 4) & 0x7F;
      if ((v20 - 63) <= 0x11 && ((1 << ((*(_WORD *)(v14 + 4) & 0x7F) - 63)) & 0x34001) != 0)
        goto LABEL_45;
      if (v20 == 73)
      {
        v28 = *(unsigned __int8 **)(*(_QWORD *)(v14 + 8) + 8);
        v29 = v28[12];
        if (v29 != 1)
        {
          if (v29 == 2)
          {
LABEL_21:
            WebCore::ComputedStyleExtractor::propertyValue((uint64_t)&v53, v16, 1, 0, &v52);
            if (v52)
            {
              v50 = *(_WORD *)v13 & 0x3FF | ((WebCore::isInheritedPropertyTable[*(_WORD *)v13 & 0x3FF] != 0) << 15);
              v51 = v52;
              v52 = 0;
              WebCore::MutableStyleProperties::addParsedProperty((WebCore::StyleProperties *)v8, (unint64_t)&v50, v6);
              v22 = v51;
              v51 = 0;
              if (v22)
              {
                if (*v22 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v22, (WTF::StringImpl *)v16);
                else
                  *v22 -= 2;
              }
              v26 = v52;
              v52 = 0;
              if (v26)
              {
                if (*v26 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v26, (WTF::StringImpl *)v16);
                else
                  *v26 -= 2;
              }
            }
            goto LABEL_45;
          }
          if ((v29 - 5) > 3)
            goto LABEL_45;
        }
        v20 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v28 + 72))(v28);
      }
      if (v20 != 3)
        goto LABEL_45;
      v16 = *(_WORD *)v13 & 0x3FF;
      goto LABEL_21;
    }
    if (v15)
    {
LABEL_46:
      *(_DWORD *)v14 = v15;
      goto LABEL_49;
    }
LABEL_48:
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v14, (WTF::StringImpl *)v16);
LABEL_49:
    v27 = v12 + 1;
    v12 = (v12 + 1);
  }
  while (*(_DWORD *)(v10 + 28) > v27);
  v10 = *((_QWORD *)v49 + 1);
  if ((v11 & 1) != 0)
  {
    WebCore::MutableStyleProperties::removeProperty(*((_QWORD *)v49 + 1), (WTF::StringImpl *)8, 0, v7, v9);
    WebCore::MutableStyleProperties::removeProperty(v8, (WTF::StringImpl *)8, 0, v37, v38);
    v10 = *((_QWORD *)v49 + 1);
  }
LABEL_84:
  WebCore::MutableStyleProperties::mergeAndOverrideOnConflict((WebCore::MutableStyleProperties *)v10, (const WebCore::StyleProperties *)v8, v6);
  if (v56)
  {
    v40 = v55;
    v55 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v39);
      else
        *(_DWORD *)v40 -= 2;
    }
  }
  result = v53;
  v53 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = (WebCore::Node *)WebCore::Node::removedLastRef(result, v39);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  if (*(_DWORD *)v8 == 1)
  {
    v42 = *(unsigned int *)(v8 + 28);
    if ((_DWORD)v42)
    {
      v43 = 16 * v42;
      v44 = (_DWORD **)(*(_QWORD *)(v8 + 16) + 8);
      do
      {
        v45 = *v44;
        *v44 = 0;
        if (v45)
        {
          if (*v45 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v45, v39);
          else
            *v45 -= 2;
        }
        v44 += 2;
        v43 -= 16;
      }
      while (v43);
    }
    v46 = *(WTF **)(v8 + 16);
    if ((WTF *)(v8 + 32) != v46 && v46 != 0)
    {
      *(_QWORD *)(v8 + 16) = 0;
      *(_DWORD *)(v8 + 24) = 0;
      WTF::fastFree(v46, v39);
    }
    v48 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)(v8 + 8) = 0;
    if (v48)
      (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
    return (WebCore::Node *)WTF::fastFree((WTF *)v8, v39);
  }
  else
  {
    --*(_DWORD *)v8;
  }
  return result;
}

uint64_t WebCore::elementMatchesAndPropertyIsNotInInlineStyleDecl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v8;
  const WebCore::StyleProperties *v9;
  WebCore::EditingStyle *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD **v15;
  _DWORD *v16;
  WTF *v17;
  uint64_t v19;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1)
    || ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, a3) & 1) != 0)
  {
    return 0;
  }
  v8 = *(_QWORD *)(a2 + 104);
  if (!v8)
    return 1;
  v9 = *(const WebCore::StyleProperties **)(v8 + 8);
  if (!v9)
    return 1;
  ++*(_DWORD *)v9;
  v10 = (WebCore::EditingStyle *)WTF::fastMalloc((WTF *)0x18);
  WebCore::EditingStyle::EditingStyle(v10, v9);
  v6 = (*(unsigned int (**)(uint64_t, WebCore::EditingStyle *))(*(_QWORD *)a1 + 32))(a1, v10) ^ 1;
  if (*(_DWORD *)v10 == 1)
  {
    v12 = *((_QWORD *)v10 + 1);
    *((_QWORD *)v10 + 1) = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
      {
        v13 = *(unsigned int *)(v12 + 28);
        if ((_DWORD)v13)
        {
          v14 = 16 * v13;
          v15 = (_DWORD **)(*(_QWORD *)(v12 + 16) + 8);
          do
          {
            v16 = *v15;
            *v15 = 0;
            if (v16)
            {
              if (*v16 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, v11);
              else
                *v16 -= 2;
            }
            v15 += 2;
            v14 -= 16;
          }
          while (v14);
        }
        v17 = *(WTF **)(v12 + 16);
        if ((WTF *)(v12 + 32) != v17 && v17 != 0)
        {
          *(_QWORD *)(v12 + 16) = 0;
          *(_DWORD *)(v12 + 24) = 0;
          WTF::fastFree(v17, v11);
        }
        v19 = *(_QWORD *)(v12 + 8);
        *(_QWORD *)(v12 + 8) = 0;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        WTF::fastFree((WTF *)v12, v11);
      }
      else
      {
        --*(_DWORD *)v12;
      }
    }
    WTF::fastFree(v10, v11);
  }
  else
  {
    --*(_DWORD *)v10;
  }
  WebCore::StyleProperties::deref(v9, v11);
  return v6;
}

uint64_t WebCore::EditingStyle::wrappingStyleForSerialization@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  WebCore::Node *v7;
  void *v8;
  WTF::StringImpl *v9;
  WebCore::Node *v10;
  uint64_t result;
  WTF::StringBuilder *v12;
  WTF::String *v13;
  __n128 v14;
  WebCore::Node *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  void *v20;
  WebCore::MutableStyleProperties *v21;
  int *v22;
  int v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  const WTF::StringImpl *v35;
  uint64_t v36;
  const WebCore::StyleProperties *v37;
  WebCore::MutableStyleProperties *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  WebCore *v43;
  WebCore *IsNotInInlineStyleDecl;
  uint64_t v45;
  uint64_t *v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD **v50;
  _DWORD *v51;
  WTF *v52;
  uint64_t v54;
  uint64_t *v55;
  int *v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD **v59;
  _DWORD *v60;
  WTF *v61;
  uint64_t v63;
  WTF::String *v64;
  __n128 v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WebCore::Node *v70[2];
  WTF::StringImpl *v71;

  if (!a2)
  {
    result = WTF::fastMalloc((WTF *)0x18);
    v21 = (WebCore::MutableStyleProperties *)result;
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 16) &= 0xE0u;
    v22 = &webThreadDelegateMessageScopeCount;
    *(_DWORD *)(result + 20) = WebCore::EditingStyle::NoFontDelta;
    v23 = *(_DWORD *)(a1 + 24) + 2;
    *a4 = result;
    *(_DWORD *)(a1 + 24) = v23;
    v24 = &qword_1ECE83000;
    v25 = &qword_1ECE83000;
    while (1)
    {
      v26 = a1;
      v27 = *(_WORD *)(a1 + 28);
      if ((v27 & 0xF000) == 0x9000)
      {
        if (*(_DWORD *)(a1 + 24) == 2)
        {
          if ((*(_WORD *)(a1 + 30) & 0x400) == 0)
            return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)a1, v20);
        }
        else
        {
          *(_DWORD *)(a1 + 24) -= 2;
        }
        return result;
      }
      if ((v27 & 0x70) == 0)
        goto LABEL_76;
      if ((v27 & 0x10) == 0
        || *(_QWORD *)(*(_QWORD *)(a1 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::blockquoteTag + 24))
      {
LABEL_33:
        v34 = WTF::fastMalloc((WTF *)0x18);
        *(_DWORD *)v34 = 1;
        *(_QWORD *)(v34 + 8) = 0;
        *(_BYTE *)(v34 + 16) &= 0xE0u;
        *(_DWORD *)(v34 + 20) = v22[561];
        WebCore::EditingStyle::mergeStyleFromRulesForSerialization((WebCore::EditingStyle *)v34, (WebCore::StyledElement *)v26, a3);
        v36 = *(_QWORD *)(v26 + 104);
        if (v36)
        {
          v37 = *(const WebCore::StyleProperties **)(v36 + 8);
          if (v37)
          {
            v38 = *(WebCore::MutableStyleProperties **)(v34 + 8);
            ++*(_DWORD *)v37;
            WebCore::MutableStyleProperties::mergeAndOverrideOnConflict(v38, v37, v35);
            WebCore::StyleProperties::deref(v37, v39);
          }
        }
        v40 = *(_QWORD *)(v34 + 8);
        if (v40)
        {
          WebCore::StyleProperties::copyProperties(v40, WebCore::editingProperties, 0x18uLL, (uint64_t *)v70);
          v41 = v70[0];
          v42 = *(_QWORD *)(v34 + 8);
          *(WebCore::Node **)(v34 + 8) = v70[0];
          if (v42)
          {
            if (*(_DWORD *)v42 == 1)
            {
              v46 = v24;
              v47 = v22;
              v48 = *(unsigned int *)(v42 + 28);
              if ((_DWORD)v48)
              {
                v49 = 16 * v48;
                v50 = (_DWORD **)(*(_QWORD *)(v42 + 16) + 8);
                do
                {
                  v51 = *v50;
                  *v50 = 0;
                  if (v51)
                  {
                    if (*v51 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v51, v41);
                    else
                      *v51 -= 2;
                  }
                  v50 += 2;
                  v49 -= 16;
                }
                while (v49);
              }
              v52 = *(WTF **)(v42 + 16);
              if ((WTF *)(v42 + 32) != v52 && v52 != 0)
              {
                *(_QWORD *)(v42 + 16) = 0;
                *(_DWORD *)(v42 + 24) = 0;
                WTF::fastFree(v52, v41);
              }
              v54 = *(_QWORD *)(v42 + 8);
              *(_QWORD *)(v42 + 8) = 0;
              v22 = v47;
              if (v54)
                (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
              WTF::fastFree((WTF *)v42, v41);
              v41 = *(WTF::StringImpl **)(v34 + 8);
              v24 = v46;
              v25 = &qword_1ECE83000;
            }
            else
            {
              --*(_DWORD *)v42;
            }
          }
        }
        else
        {
          v41 = 0;
          *(_QWORD *)(v34 + 8) = 0;
        }
        v43 = WebCore::EditingStyle::mergeStyle(v21, (uint64_t)v41, 1);
        WebCore::htmlElementEquivalents(v43);
        if (WebCore::elementMatchesAndPropertyIsNotInInlineStyleDecl(qword_1ECE83270, v26, (uint64_t)v21))
          (*(void (**)(uint64_t, uint64_t, WebCore::MutableStyleProperties *))(*(_QWORD *)qword_1ECE83270 + 48))(qword_1ECE83270, v26, v21);
        if (WebCore::elementMatchesAndPropertyIsNotInInlineStyleDecl(qword_1ECE83278, v26, (uint64_t)v21))
          (*(void (**)(uint64_t, uint64_t, WebCore::MutableStyleProperties *))(*(_QWORD *)qword_1ECE83278 + 48))(qword_1ECE83278, v26, v21);
        if (WebCore::elementMatchesAndPropertyIsNotInInlineStyleDecl(v24[80], v26, (uint64_t)v21))
          (*(void (**)(uint64_t, uint64_t, WebCore::MutableStyleProperties *))(*(_QWORD *)v24[80] + 48))(v24[80], v26, v21);
        if (WebCore::elementMatchesAndPropertyIsNotInInlineStyleDecl(v25[81], v26, (uint64_t)v21))
          (*(void (**)(uint64_t, uint64_t, WebCore::MutableStyleProperties *))(*(_QWORD *)v25[81] + 48))(v25[81], v26, v21);
        if (WebCore::elementMatchesAndPropertyIsNotInInlineStyleDecl(qword_1ECE83290, v26, (uint64_t)v21))
          (*(void (**)(uint64_t, uint64_t, WebCore::MutableStyleProperties *))(*(_QWORD *)qword_1ECE83290 + 48))(qword_1ECE83290, v26, v21);
        if (WebCore::elementMatchesAndPropertyIsNotInInlineStyleDecl(qword_1ECE83298, v26, (uint64_t)v21))
          (*(void (**)(uint64_t, uint64_t, WebCore::MutableStyleProperties *))(*(_QWORD *)qword_1ECE83298 + 48))(qword_1ECE83298, v26, v21);
        if (WebCore::elementMatchesAndPropertyIsNotInInlineStyleDecl(qword_1ECE832A0, v26, (uint64_t)v21))
          (*(void (**)(uint64_t, uint64_t, WebCore::MutableStyleProperties *))(*(_QWORD *)qword_1ECE832A0 + 48))(qword_1ECE832A0, v26, v21);
        if (WebCore::elementMatchesAndPropertyIsNotInInlineStyleDecl(qword_1ECE832A8, v26, (uint64_t)v21))
          (*(void (**)(uint64_t, uint64_t, WebCore::MutableStyleProperties *))(*(_QWORD *)qword_1ECE832A8 + 48))(qword_1ECE832A8, v26, v21);
        IsNotInInlineStyleDecl = (WebCore *)WebCore::elementMatchesAndPropertyIsNotInInlineStyleDecl(qword_1ECE832B0, v26, (uint64_t)v21);
        if ((_DWORD)IsNotInInlineStyleDecl)
          IsNotInInlineStyleDecl = (WebCore *)(*(uint64_t (**)(uint64_t, uint64_t, WebCore::MutableStyleProperties *))(*(_QWORD *)qword_1ECE832B0 + 48))(qword_1ECE832B0, v26, v21);
        WebCore::htmlAttributeEquivalents(IsNotInInlineStyleDecl);
        if (**(_QWORD **)(WebCore::htmlAttributeEquivalents(void)::equivalents + 32) != WebCore::HTMLNames::dirAttr
          && WebCore::elementMatchesAndPropertyIsNotInInlineStyleDecl(WebCore::htmlAttributeEquivalents(void)::equivalents, v26, (uint64_t)v21))
        {
          (*(void (**)(uint64_t, uint64_t, WebCore::MutableStyleProperties *))(*(_QWORD *)WebCore::htmlAttributeEquivalents(void)::equivalents
                                                                                      + 48))(WebCore::htmlAttributeEquivalents(void)::equivalents, v26, v21);
        }
        if (**(_QWORD **)(qword_1EE2F58A0 + 32) != WebCore::HTMLNames::dirAttr
          && WebCore::elementMatchesAndPropertyIsNotInInlineStyleDecl(qword_1EE2F58A0, v26, (uint64_t)v21))
        {
          (*(void (**)(uint64_t, uint64_t, WebCore::MutableStyleProperties *))(*(_QWORD *)qword_1EE2F58A0 + 48))(qword_1EE2F58A0, v26, v21);
        }
        if (**(_QWORD **)(qword_1EE2F58A8 + 32) != WebCore::HTMLNames::dirAttr
          && WebCore::elementMatchesAndPropertyIsNotInInlineStyleDecl(qword_1EE2F58A8, v26, (uint64_t)v21))
        {
          (*(void (**)(uint64_t, uint64_t, WebCore::MutableStyleProperties *))(*(_QWORD *)qword_1EE2F58A8 + 48))(qword_1EE2F58A8, v26, v21);
        }
        if (**(_QWORD **)(qword_1EE2F58B0 + 32) != WebCore::HTMLNames::dirAttr
          && WebCore::elementMatchesAndPropertyIsNotInInlineStyleDecl(qword_1EE2F58B0, v26, (uint64_t)v21))
        {
          (*(void (**)(uint64_t, uint64_t, WebCore::MutableStyleProperties *))(*(_QWORD *)qword_1EE2F58B0 + 48))(qword_1EE2F58B0, v26, v21);
        }
        result = qword_1EE2F58B8;
        if (**(_QWORD **)(qword_1EE2F58B8 + 32) != WebCore::HTMLNames::dirAttr)
        {
          result = WebCore::elementMatchesAndPropertyIsNotInInlineStyleDecl(qword_1EE2F58B8, v26, (uint64_t)v21);
          if ((_DWORD)result)
            result = (*(uint64_t (**)(uint64_t, uint64_t, WebCore::MutableStyleProperties *))(*(_QWORD *)qword_1EE2F58B8 + 48))(qword_1EE2F58B8, v26, v21);
        }
        if (*(_DWORD *)v34 == 1)
        {
          v45 = *(_QWORD *)(v34 + 8);
          *(_QWORD *)(v34 + 8) = 0;
          if (v45)
          {
            if (*(_DWORD *)v45 == 1)
            {
              v55 = v24;
              v56 = v22;
              v57 = *(unsigned int *)(v45 + 28);
              if ((_DWORD)v57)
              {
                v58 = 16 * v57;
                v59 = (_DWORD **)(*(_QWORD *)(v45 + 16) + 8);
                do
                {
                  v60 = *v59;
                  *v59 = 0;
                  if (v60)
                  {
                    if (*v60 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v60, (WTF::StringImpl *)v20);
                    else
                      *v60 -= 2;
                  }
                  v59 += 2;
                  v58 -= 16;
                }
                while (v58);
              }
              v61 = *(WTF **)(v45 + 16);
              if ((WTF *)(v45 + 32) != v61 && v61 != 0)
              {
                *(_QWORD *)(v45 + 16) = 0;
                *(_DWORD *)(v45 + 24) = 0;
                WTF::fastFree(v61, v20);
              }
              v63 = *(_QWORD *)(v45 + 8);
              *(_QWORD *)(v45 + 8) = 0;
              v22 = v56;
              if (v63)
                (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
              WTF::fastFree((WTF *)v45, v20);
              v24 = v55;
              v25 = &qword_1ECE83000;
            }
            else
            {
              --*(_DWORD *)v45;
            }
          }
          result = WTF::fastFree((WTF *)v34, v20);
        }
        else
        {
          --*(_DWORD *)v34;
        }
        goto LABEL_76;
      }
      v28 = *(_QWORD *)(a1 + 104);
      if (!v28)
        break;
      v29 = *(unsigned int *)(v28 + 4);
      if ((v29 & 1) != 0)
      {
        v30 = *(_QWORD *)(v28 + 40);
        v31 = *(unsigned int *)(v28 + 52);
        if (!v31)
          break;
      }
      else
      {
        v30 = v28 + 32;
        v31 = v29 >> 5;
        if (!(v29 >> 5))
          break;
      }
      v32 = (_QWORD *)(v30 + 8);
      while (1)
      {
        v33 = *(v32 - 1);
        if (v33 == WebCore::HTMLNames::typeAttr
          || *(_QWORD *)(v33 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
          && *(_QWORD *)(v33 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
        {
          break;
        }
        v32 += 2;
        if (!--v31)
          goto LABEL_31;
      }
LABEL_32:
      result = MEMORY[0x19AEA53F4](*v32, "cite", 4);
      if ((result & 1) == 0)
        goto LABEL_33;
LABEL_76:
      a1 = *(_QWORD *)(v26 + 32);
      if (a1)
        *(_DWORD *)(a1 + 24) += 2;
      if (*(_DWORD *)(v26 + 24) == 2)
      {
        if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
          result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v26, v20);
      }
      else
      {
        *(_DWORD *)(v26 + 24) -= 2;
      }
      if (!a1)
        return result;
    }
LABEL_31:
    v32 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    goto LABEL_32;
  }
  v6 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v6 = 1;
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 16) &= 0xE0u;
  *(_DWORD *)(v6 + 20) = WebCore::EditingStyle::NoFontDelta;
  WebCore::EditingStyle::init(v6, (WebCore *)a1, 2);
  *a4 = v6;
  WebCore::firstPositionInOrBeforeNode(a1, v7, (uint64_t)v70);
  WebCore::enclosingNodeOfType((uint64_t)v70, (uint64_t (*)(uint64_t))WebCore::isMailBlockquote, 0, (uint64_t *)&v71);
  WebCore::EditingStyle::removeStyleAddedByNode(v6, v71);
  v9 = v71;
  v71 = 0;
  if (v9)
  {
    if (*((_DWORD *)v9 + 6) == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v9, v8);
    }
    else
    {
      *((_DWORD *)v9 + 6) -= 2;
    }
  }
  v10 = v70[0];
  v70[0] = 0;
  if (v10)
  {
    if (*((_DWORD *)v10 + 6) == 2)
    {
      if ((*((_WORD *)v10 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v10, v8);
    }
    else
    {
      *((_DWORD *)v10 + 6) -= 2;
    }
  }
  result = *(_QWORD *)(v6 + 8);
  if (result)
  {
    result = WebCore::StyleProperties::getPropertyCSSValue(result, 341, v70);
    v15 = v70[0];
    if (v70[0])
    {
      v16 = *(_QWORD *)(v6 + 8);
      if (((*((unsigned __int16 *)v70[0] + 2) | (*((unsigned __int8 *)v70[0] + 6) << 16)) & 0x3F800) == 0x1D800)
      {
        _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v71, (uint64_t)v70[0], v12, v13, v14);
        v17 = *(_QWORD *)(v6 + 8);
        result = WebCore::StyleProperties::findPropertyIndex(v17, 255);
        if ((_DWORD)result == -1)
        {
          v66 = 0;
        }
        else
        {
          if ((*(_BYTE *)(v17 + 4) & 8) != 0)
          {
            if (*(_DWORD *)(v17 + 28) <= result)
            {
              __break(0xC471u);
              return result;
            }
            v18 = (unsigned __int16 *)(*(_QWORD *)(v17 + 16) + 16 * result);
          }
          else
          {
            v18 = (unsigned __int16 *)(v17 + 2 * result + 8);
          }
          v66 = (*v18 >> 13) & 1;
        }
        WebCore::MutableStyleProperties::setProperty(v16, 255, (uint64_t)&v71, v66, 0);
        v68 = v71;
        v71 = 0;
        if (v68)
        {
          if (*(_DWORD *)v68 == 2)
            WTF::StringImpl::destroy(v68, v67);
          else
            *(_DWORD *)v68 -= 2;
        }
      }
      else
      {
        WebCore::MutableStyleProperties::removeProperty(*(_QWORD *)(v6 + 8), (WTF::StringImpl *)0xFF, 0, v13, v14);
      }
      result = WebCore::MutableStyleProperties::removeProperty(*(_QWORD *)(v6 + 8), (WTF::StringImpl *)0x155, 0, v64, v65);
      if (*(_DWORD *)v15 == 2)
        return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, v69);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  return result;
}

void WebCore::EditingStyle::mergeStyleFromRules(WebCore::EditingStyle *this, WebCore::StyledElement *a2)
{
  WTF::StringImpl *v3;
  const WTF::StringImpl *v4;
  uint64_t v5;
  WebCore::MutableStyleProperties *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD **v11;
  _DWORD *v12;
  WTF *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD **v18;
  _DWORD *v19;
  WTF *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD **v25;
  _DWORD *v26;
  WTF *v27;
  uint64_t v29;
  WebCore::MutableStyleProperties *v30;

  WebCore::styleFromMatchedRulesForElement((WebCore *)&v30, a2, 4);
  v5 = *((_QWORD *)this + 1);
  v6 = v30;
  if (v5)
  {
    ++*(_DWORD *)v5;
    WebCore::MutableStyleProperties::mergeAndOverrideOnConflict(v6, (const WebCore::StyleProperties *)v5, v4);
    if (*(_DWORD *)v5 == 1)
    {
      v9 = *(unsigned int *)(v5 + 28);
      if ((_DWORD)v9)
      {
        v10 = 16 * v9;
        v11 = (_DWORD **)(*(_QWORD *)(v5 + 16) + 8);
        do
        {
          v12 = *v11;
          *v11 = 0;
          if (v12)
          {
            if (*v12 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v3);
            else
              *v12 -= 2;
          }
          v11 += 2;
          v10 -= 16;
        }
        while (v10);
      }
      v13 = *(WTF **)(v5 + 16);
      if ((WTF *)(v5 + 32) != v13 && v13 != 0)
      {
        *(_QWORD *)(v5 + 16) = 0;
        *(_DWORD *)(v5 + 24) = 0;
        WTF::fastFree(v13, v3);
      }
      v15 = *(_QWORD *)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      WTF::fastFree((WTF *)v5, v3);
    }
    else
    {
      --*(_DWORD *)v5;
    }
    v7 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
      {
        v16 = *(unsigned int *)(v7 + 28);
        if ((_DWORD)v16)
        {
          v17 = 16 * v16;
          v18 = (_DWORD **)(*(_QWORD *)(v7 + 16) + 8);
          do
          {
            v19 = *v18;
            *v18 = 0;
            if (v19)
            {
              if (*v19 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, v3);
              else
                *v19 -= 2;
            }
            v18 += 2;
            v17 -= 16;
          }
          while (v17);
        }
        v20 = *(WTF **)(v7 + 16);
        if ((WTF *)(v7 + 32) != v20 && v20 != 0)
        {
          *(_QWORD *)(v7 + 16) = 0;
          *(_DWORD *)(v7 + 24) = 0;
          WTF::fastFree(v20, v3);
        }
        v22 = *(_QWORD *)(v7 + 8);
        *(_QWORD *)(v7 + 8) = 0;
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
        WTF::fastFree((WTF *)v7, v3);
        v5 = *((_QWORD *)this + 1);
      }
      else
      {
        v5 = 0;
        --*(_DWORD *)v7;
      }
    }
    else
    {
      v5 = 0;
    }
  }
  v8 = *((_BYTE *)this + 16);
  *((_DWORD *)this + 5) = WebCore::EditingStyle::NoFontDelta;
  *((_BYTE *)this + 16) = v8 & 0xE0;
  *((_QWORD *)this + 1) = v6;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      v23 = *(unsigned int *)(v5 + 28);
      if ((_DWORD)v23)
      {
        v24 = 16 * v23;
        v25 = (_DWORD **)(*(_QWORD *)(v5 + 16) + 8);
        do
        {
          v26 = *v25;
          *v25 = 0;
          if (v26)
          {
            if (*v26 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v26, v3);
            else
              *v26 -= 2;
          }
          v25 += 2;
          v24 -= 16;
        }
        while (v24);
      }
      v27 = *(WTF **)(v5 + 16);
      if ((WTF *)(v5 + 32) != v27 && v27 != 0)
      {
        *(_QWORD *)(v5 + 16) = 0;
        *(_DWORD *)(v5 + 24) = 0;
        WTF::fastFree(v27, v3);
      }
      v29 = *(_QWORD *)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      if (v29)
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
      WTF::fastFree((WTF *)v5, v3);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
}

void WebCore::styleFromMatchedRulesForElement(WebCore *this, WebCore::Element *a2, char a3)
{
  WebCore::MutableStyleProperties *v6;
  _QWORD *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  const WTF::StringImpl *v12;
  WTF *v13;
  uint64_t v14;
  WTF *v15;
  WTF *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD **v21;
  _DWORD *v22;
  WTF *v23;
  uint64_t v25;
  unint64_t v26;
  unsigned int *v27;
  _DWORD *v28;
  uint64_t v29;
  WTF *v30;
  _DWORD *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF *v35;
  unsigned int v36;
  _BYTE v37[48];

  v6 = (WebCore::MutableStyleProperties *)WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v6 = 0x900000001;
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = (char *)v6 + 32;
  *((_QWORD *)v6 + 3) = 4;
  *(_QWORD *)this = v6;
  v7 = (_QWORD *)*((_QWORD *)a2 + 5);
  if (*v7)
    v8 = (*(_WORD *)(*v7 + 28) & 0x80) == 0;
  else
    v8 = 1;
  if (v8)
    v32 = v7[1] + 1328;
  else
    v32 = *v7 + 216;
  v9 = *(_QWORD *)v32;
  if (!*(_QWORD *)(*(_QWORD *)v32 + 32))
  {
    if (*(_QWORD *)(v9 + 24))
      WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v9);
    else
      WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v9);
    v34 = *(_QWORD *)(v9 + 32);
    if (*(_DWORD *)(v34 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
      WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v34 + 32), v33);
    if (*(_BYTE *)(v34 + 242)
      || *(_BYTE *)(v34 + 243)
      || *(_BYTE *)(v34 + 244)
      || *(_BYTE *)(v34 + 245)
      || *(_BYTE *)(v34 + 246)
      || *(_BYTE *)(v34 + 247)
      || *(_BYTE *)(v34 + 248))
    {
      *(_BYTE *)(v9 + 236) = 1;
    }
  }
  v10 = *(_QWORD *)(v9 + 32);
  v37[0] = 0;
  v37[40] = 0;
  WebCore::Style::Resolver::pseudoStyleRulesForElement(v10, a2, (uint64_t)v37, a3, (uint64_t)&v35);
  v13 = v35;
  v14 = v36;
  if (v36)
  {
    v15 = (WTF *)((char *)v35 + 8 * v36);
    v16 = v35;
    do
    {
      v17 = *(_QWORD *)(*(_QWORD *)v16 + 8);
      ++*(_DWORD *)v17;
      WebCore::MutableStyleProperties::mergeAndOverrideOnConflict(v6, (const WebCore::StyleProperties *)v17, v12);
      if (*(_DWORD *)v17 == 1)
      {
        v18 = *(unsigned int *)(v17 + 4);
        if ((v18 & 8) != 0)
        {
          v19 = *(unsigned int *)(v17 + 28);
          if ((_DWORD)v19)
          {
            v20 = 16 * v19;
            v21 = (_DWORD **)(*(_QWORD *)(v17 + 16) + 8);
            do
            {
              v22 = *v21;
              *v21 = 0;
              if (v22)
              {
                if (*v22 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v22, v11);
                else
                  *v22 -= 2;
              }
              v21 += 2;
              v20 -= 16;
            }
            while (v20);
          }
          v23 = *(WTF **)(v17 + 16);
          if ((WTF *)(v17 + 32) != v23 && v23 != 0)
          {
            *(_QWORD *)(v17 + 16) = 0;
            *(_DWORD *)(v17 + 24) = 0;
            WTF::fastFree(v23, v11);
          }
          v25 = *(_QWORD *)(v17 + 8);
          *(_QWORD *)(v17 + 8) = 0;
          if (v25)
            (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
        }
        else if (v18 >= 0x10)
        {
          v26 = 0;
          v27 = (unsigned int *)(v17 + ((v18 >> 3) & 0x1FFFFFFE) + 8);
          do
          {
            v28 = (_DWORD *)(*v27 | ((unint64_t)*((unsigned __int8 *)v27 + 4) << 32));
            if (*v28 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v28, v11);
            else
              *v28 -= 2;
            ++v26;
            v27 = (unsigned int *)((char *)v27 + 5);
          }
          while (v26 < (unint64_t)*(unsigned int *)(v17 + 4) >> 4);
        }
        WTF::fastFree((WTF *)v17, v11);
      }
      else
      {
        --*(_DWORD *)v17;
      }
      v16 = (WTF *)((char *)v16 + 8);
    }
    while (v16 != v15);
    v29 = 8 * v14;
    v30 = v13;
    do
    {
      v31 = *(_DWORD **)v30;
      *(_QWORD *)v30 = 0;
      if (v31)
      {
        if (*v31 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v31, v11);
        else
          --*v31;
      }
      v30 = (WTF *)((char *)v30 + 8);
      v29 -= 8;
    }
    while (v29);
  }
  if (v13)
    WTF::fastFree(v13, v11);
}

void WebCore::EditingStyle::removeStyleFromRulesAndContext(WebCore::EditingStyle *this, WebCore::StyledElement *a2, WebCore::Node *a3)
{
  WTF *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF *v9;
  WTF *v10;
  int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  const WTF::StringImpl *v14;
  WTF::String *v15;
  __n128 v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF *v19;
  WTF::StringBuilder *v20;
  WTF::String *v21;
  __n128 v22;
  _DWORD *v23;
  _DWORD *v24;
  WTF::String *v25;
  __n128 v26;
  WTF::StringBuilder *v27;
  WTF::String *v28;
  __n128 v29;
  WTF::StringBuilder *v30;
  WTF::String *v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  void *v42;
  WTF *v43;
  WTF *v44;
  int v45;
  WTF *v46;
  WTF *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD **v52;
  _DWORD *v53;
  WTF *v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD **v59;
  _DWORD *v60;
  WTF *v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD **v66;
  _DWORD *v67;
  WTF *v68;
  uint64_t v70;
  uint64_t v71;
  WTF::String *v72;
  __n128 v73;
  uint64_t v74;
  uint64_t v75;
  _DWORD **v76;
  _DWORD *v77;
  WTF *v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _DWORD **v83;
  _DWORD *v84;
  WTF *v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _DWORD **v90;
  _DWORD *v91;
  WTF *v92;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _DWORD **v97;
  _DWORD *v98;
  WTF *v99;
  uint64_t v101;
  WTF::String *v102;
  __n128 v103;
  WTF *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _DWORD **v108;
  _DWORD *v109;
  WTF *v110;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _DWORD **v115;
  _DWORD *v116;
  WTF *v117;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _DWORD **v122;
  _DWORD *v123;
  WTF *v124;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _DWORD **v129;
  _DWORD *v130;
  WTF *v131;
  uint64_t v133;
  uint64_t v134;
  WTF *v135;
  WTF *v136[3];
  WTF *v137;
  _DWORD *v138;
  _DWORD *v139;
  _DWORD *v140;
  _DWORD *v141;
  WTF *v142;
  WTF *v143;

  if (!*((_QWORD *)this + 1))
    return;
  WebCore::styleFromMatchedRulesForElement((WebCore *)&v143, a2, 6);
  v6 = v143;
  if (*((_DWORD *)v143 + 7))
  {
    v7 = *((_QWORD *)this + 1);
    if (v7)
      ++*(_DWORD *)v7;
    WebCore::getPropertiesNotIn<WebCore::MutableStyleProperties>((const WebCore::StyleProperties *)v7, (uint64_t)v6, (uint64_t *)v136);
    v9 = v136[0];
    v136[0] = 0;
    v10 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v9;
    if (!v10)
      goto LABEL_8;
    v11 = *(_DWORD *)v10 - 1;
    if (*(_DWORD *)v10 != 1)
      goto LABEL_7;
    v88 = *((unsigned int *)v10 + 7);
    if ((_DWORD)v88)
    {
      v89 = 16 * v88;
      v90 = (_DWORD **)(*((_QWORD *)v10 + 2) + 8);
      do
      {
        v91 = *v90;
        *v90 = 0;
        if (v91)
        {
          if (*v91 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v91, v8);
          else
            *v91 -= 2;
        }
        v90 += 2;
        v89 -= 16;
      }
      while (v89);
    }
    v92 = (WTF *)*((_QWORD *)v10 + 2);
    if ((WTF *)((char *)v10 + 32) != v92 && v92 != 0)
    {
      *((_QWORD *)v10 + 2) = 0;
      *((_DWORD *)v10 + 6) = 0;
      WTF::fastFree(v92, v8);
    }
    v94 = *((_QWORD *)v10 + 1);
    *((_QWORD *)v10 + 1) = 0;
    if (v94)
      (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
    WTF::fastFree(v10, v8);
    v10 = v136[0];
    v136[0] = 0;
    if (!v10)
      goto LABEL_8;
    v11 = *(_DWORD *)v10 - 1;
    if (*(_DWORD *)v10 == 1)
    {
      v95 = *((unsigned int *)v10 + 7);
      if ((_DWORD)v95)
      {
        v96 = 16 * v95;
        v97 = (_DWORD **)(*((_QWORD *)v10 + 2) + 8);
        do
        {
          v98 = *v97;
          *v97 = 0;
          if (v98)
          {
            if (*v98 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v98, v8);
            else
              *v98 -= 2;
          }
          v97 += 2;
          v96 -= 16;
        }
        while (v96);
      }
      v99 = (WTF *)*((_QWORD *)v10 + 2);
      if ((WTF *)((char *)v10 + 32) != v99 && v99 != 0)
      {
        *((_QWORD *)v10 + 2) = 0;
        *((_DWORD *)v10 + 6) = 0;
        WTF::fastFree(v99, v8);
      }
      v101 = *((_QWORD *)v10 + 1);
      *((_QWORD *)v10 + 1) = 0;
      if (v101)
        (*(void (**)(uint64_t))(*(_QWORD *)v101 + 8))(v101);
      WTF::fastFree(v10, v8);
    }
    else
    {
LABEL_7:
      *(_DWORD *)v10 = v11;
    }
LABEL_8:
    if (*(_DWORD *)v7 == 1)
    {
      v81 = *(unsigned int *)(v7 + 28);
      if ((_DWORD)v81)
      {
        v82 = 16 * v81;
        v83 = (_DWORD **)(*(_QWORD *)(v7 + 16) + 8);
        do
        {
          v84 = *v83;
          *v83 = 0;
          if (v84)
          {
            if (*v84 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v84, v8);
            else
              *v84 -= 2;
          }
          v83 += 2;
          v82 -= 16;
        }
        while (v82);
      }
      v85 = *(WTF **)(v7 + 16);
      if ((WTF *)(v7 + 32) != v85 && v85 != 0)
      {
        *(_QWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        WTF::fastFree(v85, v8);
      }
      v87 = *(_QWORD *)(v7 + 8);
      *(_QWORD *)(v7 + 8) = 0;
      if (v87)
        (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
      WTF::fastFree((WTF *)v7, v8);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
  v12 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v12 = 1;
  *(_QWORD *)(v12 + 8) = 0;
  *(_BYTE *)(v12 + 16) &= 0xE0u;
  *(_DWORD *)(v12 + 20) = WebCore::EditingStyle::NoFontDelta;
  WebCore::EditingStyle::init(v12, a3, 2);
  v17 = *(_QWORD *)(v12 + 8);
  if (v17)
  {
    ++*(_DWORD *)v17;
    WebCore::StyleProperties::getPropertyCSSValue(v17, 61, v136);
    if (v136[0])
    {
      if (*(_DWORD *)v136[0] == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v136[0], v18);
      else
        *(_DWORD *)v136[0] -= 2;
    }
    else
    {
      WebCore::MutableStyleProperties::setProperty((WebCore::MutableStyleProperties *)v17, 61, 0x7Du, 0);
    }
    v19 = (WTF *)*((_QWORD *)this + 1);
    ++*(_DWORD *)v19;
    v142 = v19;
    WebCore::StyleProperties::getPropertyCSSValue((uint64_t)v19, 294, &v141);
    WebCore::StyleProperties::getPropertyCSSValue(v17, 294, &v140);
    WebCore::StyleProperties::getPropertyCSSValue((uint64_t)v142, 270, &v139);
    WebCore::StyleProperties::getPropertyCSSValue(v17, 270, &v138);
    v24 = v140;
    v23 = v141;
    if (v141 != v140 || v139 != v138)
    {
      WebCore::MutableStyleProperties::removeProperty(v17, (WTF::StringImpl *)0x126, 0, v21, v22);
      WebCore::MutableStyleProperties::removeProperty(v17, (WTF::StringImpl *)0x10E, 0, v25, v26);
    }
    v136[2] = a2;
    v137 = 0;
    v136[0] = (WTF *)&v142;
    v136[1] = (WTF *)&v137;
    WebCore::EditingStyle::removeStyleFromRulesAndContext(WebCore::StyledElement &,WebCore::Node *)::$_0::operator()((uint64_t)v136, (void *)5, v20, v21, v22);
    WebCore::EditingStyle::removeStyleFromRulesAndContext(WebCore::StyledElement &,WebCore::Node *)::$_0::operator()((uint64_t)v136, (void *)0x53, v27, v28, v29);
    WebCore::EditingStyle::removeStyleFromRulesAndContext(WebCore::StyledElement &,WebCore::Node *)::$_0::operator()((uint64_t)v136, (void *)0x3D, v30, v31, v32);
    v33 = *((unsigned int *)v6 + 7);
    if ((_DWORD)v33)
    {
      if ((v33 & 0x80000000) != 0)
      {
        __break(0xC471u);
        return;
      }
      v34 = WTF::fastMalloc((WTF *)(2 * v33));
      v35 = (WTF *)v34;
      v36 = *((_DWORD *)v6 + 7);
      if (v36)
      {
        v37 = 0;
        v38 = 0;
        v39 = *((_QWORD *)v6 + 2);
        do
        {
          v40 = v37 + 1;
          *(_WORD *)(v34 + 2 * v37) = *(_WORD *)(v39 + 16 * v38) & 0x3FF;
          v41 = v38 + 1;
          v38 = (v38 + 1);
          ++v37;
        }
        while (v36 > v41);
      }
      else
      {
        v40 = 0;
      }
    }
    else
    {
      v40 = 0;
      v35 = 0;
    }
    WebCore::MutableStyleProperties::removeProperties(v17, v35, v40);
    if (v35)
      WTF::fastFree(v35, v42);
    WebCore::getPropertiesNotIn<WebCore::MutableStyleProperties>(v142, v17, (uint64_t *)&v135);
    v43 = v135;
    v135 = 0;
    v44 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v43;
    if (v44)
    {
      v45 = *(_DWORD *)v44 - 1;
      if (*(_DWORD *)v44 != 1)
      {
LABEL_30:
        *(_DWORD *)v44 = v45;
        goto LABEL_31;
      }
      v57 = *((unsigned int *)v44 + 7);
      if ((_DWORD)v57)
      {
        v58 = 16 * v57;
        v59 = (_DWORD **)(*((_QWORD *)v44 + 2) + 8);
        do
        {
          v60 = *v59;
          *v59 = 0;
          if (v60)
          {
            if (*v60 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v60, v13);
            else
              *v60 -= 2;
          }
          v59 += 2;
          v58 -= 16;
        }
        while (v58);
      }
      v61 = (WTF *)*((_QWORD *)v44 + 2);
      if ((WTF *)((char *)v44 + 32) != v61 && v61 != 0)
      {
        *((_QWORD *)v44 + 2) = 0;
        *((_DWORD *)v44 + 6) = 0;
        WTF::fastFree(v61, v13);
      }
      v63 = *((_QWORD *)v44 + 1);
      *((_QWORD *)v44 + 1) = 0;
      if (v63)
        (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
      WTF::fastFree(v44, v13);
      v44 = v135;
      v135 = 0;
      if (v44)
      {
        v45 = *(_DWORD *)v44 - 1;
        if (*(_DWORD *)v44 != 1)
          goto LABEL_30;
        v64 = *((unsigned int *)v44 + 7);
        if ((_DWORD)v64)
        {
          v65 = 16 * v64;
          v66 = (_DWORD **)(*((_QWORD *)v44 + 2) + 8);
          do
          {
            v67 = *v66;
            *v66 = 0;
            if (v67)
            {
              if (*v67 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v67, v13);
              else
                *v67 -= 2;
            }
            v66 += 2;
            v65 -= 16;
          }
          while (v65);
        }
        v68 = (WTF *)*((_QWORD *)v44 + 2);
        if ((WTF *)((char *)v44 + 32) != v68 && v68 != 0)
        {
          *((_QWORD *)v44 + 2) = 0;
          *((_DWORD *)v44 + 6) = 0;
          WTF::fastFree(v68, v13);
        }
        v70 = *((_QWORD *)v44 + 1);
        *((_QWORD *)v44 + 1) = 0;
        if (v70)
          (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
        WTF::fastFree(v44, v13);
      }
    }
LABEL_31:
    v46 = v137;
    v137 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 1)
      {
        v71 = *((_QWORD *)v46 + 1);
        *((_QWORD *)v46 + 1) = 0;
        if (v71)
        {
          if (*(_DWORD *)v71 == 1)
          {
            v127 = *(unsigned int *)(v71 + 28);
            if ((_DWORD)v127)
            {
              v128 = 16 * v127;
              v129 = (_DWORD **)(*(_QWORD *)(v71 + 16) + 8);
              do
              {
                v130 = *v129;
                *v129 = 0;
                if (v130)
                {
                  if (*v130 == 2)
                  {
                    v134 = v128;
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v130, v13);
                    v128 = v134;
                  }
                  else
                  {
                    *v130 -= 2;
                  }
                }
                v129 += 2;
                v128 -= 16;
              }
              while (v128);
            }
            v131 = *(WTF **)(v71 + 16);
            if ((WTF *)(v71 + 32) != v131 && v131 != 0)
            {
              *(_QWORD *)(v71 + 16) = 0;
              *(_DWORD *)(v71 + 24) = 0;
              WTF::fastFree(v131, v13);
            }
            v133 = *(_QWORD *)(v71 + 8);
            *(_QWORD *)(v71 + 8) = 0;
            if (v133)
              (*(void (**)(uint64_t))(*(_QWORD *)v133 + 8))(v133);
            WTF::fastFree((WTF *)v71, v13);
          }
          else
          {
            --*(_DWORD *)v71;
          }
        }
        WTF::fastFree(v46, v13);
      }
      else
      {
        --*(_DWORD *)v46;
      }
    }
    if (v138)
    {
      if (*v138 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v138, v13);
      else
        *v138 -= 2;
    }
    if (v139)
    {
      if (*v139 == 2)
      {
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v139, v13);
        if (v24)
        {
LABEL_42:
          if (*v24 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v24, v13);
          else
            *v24 -= 2;
        }
LABEL_47:
        if (v23)
        {
          if (*v23 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v23, v13);
          else
            *v23 -= 2;
        }
        v47 = v142;
        v142 = 0;
        if (v47)
        {
          if (*(_DWORD *)v47 == 1)
          {
            v74 = *((unsigned int *)v47 + 7);
            if ((_DWORD)v74)
            {
              v75 = 16 * v74;
              v76 = (_DWORD **)(*((_QWORD *)v47 + 2) + 8);
              do
              {
                v77 = *v76;
                *v76 = 0;
                if (v77)
                {
                  if (*v77 == 2)
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v77, v13);
                  else
                    *v77 -= 2;
                }
                v76 += 2;
                v75 -= 16;
              }
              while (v75);
            }
            v78 = (WTF *)*((_QWORD *)v47 + 2);
            if ((WTF *)((char *)v47 + 32) != v78 && v78 != 0)
            {
              *((_QWORD *)v47 + 2) = 0;
              *((_DWORD *)v47 + 6) = 0;
              WTF::fastFree(v78, v13);
            }
            v80 = *((_QWORD *)v47 + 1);
            *((_QWORD *)v47 + 1) = 0;
            if (v80)
              (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
            WTF::fastFree(v47, v13);
          }
          else
          {
            --*(_DWORD *)v47;
          }
        }
        if (*(_DWORD *)v17 == 1)
        {
          v50 = *(unsigned int *)(v17 + 28);
          if ((_DWORD)v50)
          {
            v51 = 16 * v50;
            v52 = (_DWORD **)(*(_QWORD *)(v17 + 16) + 8);
            do
            {
              v53 = *v52;
              *v52 = 0;
              if (v53)
              {
                if (*v53 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v53, v13);
                else
                  *v53 -= 2;
              }
              v52 += 2;
              v51 -= 16;
            }
            while (v51);
          }
          v54 = *(WTF **)(v17 + 16);
          if ((WTF *)(v17 + 32) != v54 && v54 != 0)
          {
            *(_QWORD *)(v17 + 16) = 0;
            *(_DWORD *)(v17 + 24) = 0;
            WTF::fastFree(v54, v13);
          }
          v56 = *(_QWORD *)(v17 + 8);
          *(_QWORD *)(v17 + 8) = 0;
          if (v56)
            (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
          WTF::fastFree((WTF *)v17, v13);
        }
        else
        {
          --*(_DWORD *)v17;
        }
        goto LABEL_56;
      }
      *v139 -= 2;
    }
    if (v24)
      goto LABEL_42;
    goto LABEL_47;
  }
LABEL_56:
  if ((*((_WORD *)a2 + 14) & 0x10) != 0
    && *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::spanTag + 24)
    && WebCore::hasNoAttributeOrOnlyStyleAttribute(a2, 0, v14, v15, v16))
  {
    v48 = *((_QWORD *)this + 1);
    ++*(_DWORD *)v48;
    WebCore::StyleProperties::getPropertyCSSValue((uint64_t)v6, 7, v136);
    if (v136[0])
    {
      if (*(_DWORD *)v136[0] == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v136[0], v49);
      else
        *(_DWORD *)v136[0] -= 2;
    }
    else if (WebCore::identifierForStyleProperty<WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WebCore::MutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::MutableStyleProperties>>>(v48, 7) == 366)
    {
      WebCore::MutableStyleProperties::removeProperty(v48, (WTF::StringImpl *)7, 0, v72, v73);
    }
    WebCore::StyleProperties::getPropertyCSSValue((uint64_t)v6, 123, v136);
    if (v136[0])
    {
      if (*(_DWORD *)v136[0] == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v136[0], v13);
      else
        *(_DWORD *)v136[0] -= 2;
    }
    else if (WebCore::identifierForStyleProperty<WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WebCore::MutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::MutableStyleProperties>>>(v48, 123) == 6)
    {
      WebCore::MutableStyleProperties::removeProperty(v48, (WTF::StringImpl *)0x7B, 0, v102, v103);
    }
    if (*(_DWORD *)v48 == 1)
    {
      v113 = *(unsigned int *)(v48 + 28);
      if ((_DWORD)v113)
      {
        v114 = 16 * v113;
        v115 = (_DWORD **)(*(_QWORD *)(v48 + 16) + 8);
        do
        {
          v116 = *v115;
          *v115 = 0;
          if (v116)
          {
            if (*v116 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v116, v13);
            else
              *v116 -= 2;
          }
          v115 += 2;
          v114 -= 16;
        }
        while (v114);
      }
      v117 = *(WTF **)(v48 + 16);
      if ((WTF *)(v48 + 32) != v117 && v117 != 0)
      {
        *(_QWORD *)(v48 + 16) = 0;
        *(_DWORD *)(v48 + 24) = 0;
        WTF::fastFree(v117, v13);
      }
      v119 = *(_QWORD *)(v48 + 8);
      *(_QWORD *)(v48 + 8) = 0;
      if (v119)
        (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
      WTF::fastFree((WTF *)v48, v13);
    }
    else
    {
      --*(_DWORD *)v48;
    }
  }
  if (*(_DWORD *)v12 == 1)
  {
    v105 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)(v12 + 8) = 0;
    if (v105)
    {
      if (*(_DWORD *)v105 == 1)
      {
        v120 = *(unsigned int *)(v105 + 28);
        if ((_DWORD)v120)
        {
          v121 = 16 * v120;
          v122 = (_DWORD **)(*(_QWORD *)(v105 + 16) + 8);
          do
          {
            v123 = *v122;
            *v122 = 0;
            if (v123)
            {
              if (*v123 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v123, v13);
              else
                *v123 -= 2;
            }
            v122 += 2;
            v121 -= 16;
          }
          while (v121);
        }
        v124 = *(WTF **)(v105 + 16);
        if ((WTF *)(v105 + 32) != v124 && v124 != 0)
        {
          *(_QWORD *)(v105 + 16) = 0;
          *(_DWORD *)(v105 + 24) = 0;
          WTF::fastFree(v124, v13);
        }
        v126 = *(_QWORD *)(v105 + 8);
        *(_QWORD *)(v105 + 8) = 0;
        if (v126)
          (*(void (**)(uint64_t))(*(_QWORD *)v126 + 8))(v126);
        WTF::fastFree((WTF *)v105, v13);
      }
      else
      {
        --*(_DWORD *)v105;
      }
    }
    WTF::fastFree((WTF *)v12, v13);
  }
  else
  {
    --*(_DWORD *)v12;
  }
  v104 = v143;
  if (v143)
  {
    if (*(_DWORD *)v143 == 1)
    {
      v106 = *((unsigned int *)v143 + 7);
      if ((_DWORD)v106)
      {
        v107 = 16 * v106;
        v108 = (_DWORD **)(*((_QWORD *)v143 + 2) + 8);
        do
        {
          v109 = *v108;
          *v108 = 0;
          if (v109)
          {
            if (*v109 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v109, v13);
            else
              *v109 -= 2;
          }
          v108 += 2;
          v107 -= 16;
        }
        while (v107);
      }
      v110 = (WTF *)*((_QWORD *)v104 + 2);
      if ((WTF *)((char *)v104 + 32) != v110 && v110 != 0)
      {
        *((_QWORD *)v104 + 2) = 0;
        *((_DWORD *)v104 + 6) = 0;
        WTF::fastFree(v110, v13);
      }
      v112 = *((_QWORD *)v104 + 1);
      *((_QWORD *)v104 + 1) = 0;
      if (v112)
        (*(void (**)(uint64_t))(*(_QWORD *)v112 + 8))(v112);
      WTF::fastFree(v104, v13);
    }
    else
    {
      --*(_DWORD *)v143;
    }
  }
}

_DWORD *WebCore::getPropertiesNotIn<WebCore::MutableStyleProperties>@<X0>(const WebCore::StyleProperties *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  WebCore::EditingStyle *v6;
  WebCore::EditingStyle *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  BOOL v11;
  WTF::StringImpl *v12;
  WTF::String *v13;
  char v14;
  __n128 v15;
  void *v16;
  WTF::String *v17;
  __n128 v18;
  _BOOL4 v19;
  void *v20;
  WTF::String *v21;
  __n128 v22;
  _BOOL4 v23;
  _DWORD *v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  WTF::StringImpl *v30;
  WTF::String *v31;
  __n128 v32;
  int v33;
  int v34;
  void *v35;
  WTF::String *v36;
  __n128 v37;
  _BOOL4 v38;
  _DWORD *result;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD **v43;
  _DWORD *v44;
  WTF *v45;
  uint64_t v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v52;
  unsigned int v53;
  unsigned int v55;
  unsigned int v56;
  unsigned int v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  unint64_t v69;
  unint64_t v70;
  _DWORD *v71;
  _DWORD *v72;

  v6 = (WebCore::EditingStyle *)WTF::fastMalloc((WTF *)0x18);
  v7 = WebCore::EditingStyle::EditingStyle(v6, a1);
  WebCore::EditingStyle::removeEquivalentProperties<WebCore::MutableStyleProperties>((uint64_t)v7, a2);
  v8 = (_DWORD *)*((_QWORD *)v6 + 1);
  ++*v8;
  *a3 = (uint64_t)v8;
  WebCore::StyleProperties::getPropertyCSSValue(a2, 341, &v72);
  v9 = v72;
  WebCore::diffTextDecorations((uint64_t)v8, 0xFFu, (uint64_t)v72);
  WebCore::diffTextDecorations((uint64_t)v8, 0x155u, (uint64_t)v9);
  WebCore::StyleProperties::getPropertyCSSValue(a2, 28, &v71);
  v10 = v71;
  if (v71)
  {
    v11 = WebCore::fontWeightIsBold<WebCore::MutableStyleProperties>((uint64_t)v8);
    v14 = v11 ^ WebCore::fontWeightIsBold<WebCore::MutableStyleProperties>(a2);
    if (*v10 != 2)
    {
      *v10 -= 2;
      if ((v14 & 1) != 0)
        goto LABEL_5;
      goto LABEL_4;
    }
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, v12);
    if ((v14 & 1) == 0)
LABEL_4:
      WebCore::MutableStyleProperties::removeProperty((uint64_t)v8, (WTF::StringImpl *)0x1C, 0, v13, v15);
  }
LABEL_5:
  WebCore::StyleProperties::getPropertyCSSValue(a2, 5, &v71);
  if (!v71)
    goto LABEL_15;
  WebCore::textColorFromStyle<WebCore::MutableStyleProperties>((uint64_t *)&v70, (uint64_t)v8);
  WebCore::textColorFromStyle<WebCore::MutableStyleProperties>((uint64_t *)&v69, a2);
  if ((v70 & 0x8000000000000) == 0)
  {
    if ((v69 & 0x8000000000000) == 0 && (_DWORD)v70 == (_DWORD)v69)
    {
      v19 = ((v69 ^ v70) & 0xFE000000000000) == 0;
      goto LABEL_10;
    }
    if ((v69 & 0x8000000000000) != 0)
    {
      v19 = 0;
      v48 = (unsigned int *)(v69 & 0xFFFFFFFFFFFFLL);
      goto LABEL_134;
    }
LABEL_96:
    v19 = 0;
    goto LABEL_10;
  }
  if ((v69 & 0x8000000000000) == 0)
    goto LABEL_96;
  v18.n128_u32[0] = *(_DWORD *)((v70 & 0xFFFFFFFFFFFFLL) + 0x10);
  v48 = (unsigned int *)(v69 & 0xFFFFFFFFFFFFLL);
  if (*(float *)((v70 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v69 & 0xFFFFFFFFFFFFLL) + 4)
    && *(float *)((v70 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v69 & 0xFFFFFFFFFFFFLL) + 8))
  {
    if (*(float *)((v70 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v69 & 0xFFFFFFFFFFFFLL) + 0xC))
      v19 = v18.n128_f32[0] == *(float *)((v69 & 0xFFFFFFFFFFFFLL) + 0x10)
         && ((v69 ^ v70) & 0xFE000000000000) == 0
         && HIBYTE(v70) == HIBYTE(v69);
    else
      v19 = 0;
  }
  else
  {
    v19 = 0;
  }
  do
  {
LABEL_134:
    v55 = __ldaxr(v48);
    v56 = v55 - 1;
  }
  while (__stlxr(v56, v48));
  if (!v56)
  {
    atomic_store(1u, v48);
    WTF::fastFree((WTF *)v48, v16);
  }
LABEL_10:
  if ((v70 & 0x8000000000000) != 0)
  {
    v60 = (unsigned int *)(v70 & 0xFFFFFFFFFFFFLL);
    do
    {
      v61 = __ldaxr(v60);
      v62 = v61 - 1;
    }
    while (__stlxr(v62, v60));
    if (!v62)
    {
      atomic_store(1u, v60);
      WTF::fastFree((WTF *)v60, v16);
    }
  }
  if (!v71)
  {
    if (!v19)
      goto LABEL_15;
LABEL_14:
    WebCore::MutableStyleProperties::removeProperty(*a3, (WTF::StringImpl *)5, 0, v17, v18);
    goto LABEL_15;
  }
  if (*v71 != 2)
  {
    *v71 -= 2;
    if (!v19)
      goto LABEL_15;
    goto LABEL_14;
  }
  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v71, (WTF::StringImpl *)v16);
  if (v19)
    goto LABEL_14;
LABEL_15:
  WebCore::StyleProperties::getPropertyCSSValue(a2, 83, &v71);
  if (!v71)
    goto LABEL_25;
  WebCore::caretColorFromStyle<WebCore::MutableStyleProperties>((uint64_t *)&v70, *a3);
  WebCore::caretColorFromStyle<WebCore::MutableStyleProperties>((uint64_t *)&v69, a2);
  if ((v70 & 0x8000000000000) == 0)
  {
    if ((v69 & 0x8000000000000) == 0 && (_DWORD)v70 == (_DWORD)v69)
    {
      v23 = ((v69 ^ v70) & 0xFE000000000000) == 0;
      goto LABEL_20;
    }
    if ((v69 & 0x8000000000000) != 0)
    {
      v23 = 0;
      v49 = (unsigned int *)(v69 & 0xFFFFFFFFFFFFLL);
      goto LABEL_147;
    }
LABEL_98:
    v23 = 0;
    goto LABEL_20;
  }
  if ((v69 & 0x8000000000000) == 0)
    goto LABEL_98;
  v22.n128_u32[0] = *(_DWORD *)((v70 & 0xFFFFFFFFFFFFLL) + 0x10);
  v49 = (unsigned int *)(v69 & 0xFFFFFFFFFFFFLL);
  if (*(float *)((v70 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v69 & 0xFFFFFFFFFFFFLL) + 4)
    && *(float *)((v70 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v69 & 0xFFFFFFFFFFFFLL) + 8))
  {
    if (*(float *)((v70 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v69 & 0xFFFFFFFFFFFFLL) + 0xC))
      v23 = v22.n128_f32[0] == *(float *)((v69 & 0xFFFFFFFFFFFFLL) + 0x10)
         && ((v69 ^ v70) & 0xFE000000000000) == 0
         && HIBYTE(v70) == HIBYTE(v69);
    else
      v23 = 0;
  }
  else
  {
    v23 = 0;
  }
  do
  {
LABEL_147:
    v58 = __ldaxr(v49);
    v59 = v58 - 1;
  }
  while (__stlxr(v59, v49));
  if (!v59)
  {
    atomic_store(1u, v49);
    WTF::fastFree((WTF *)v49, v20);
  }
LABEL_20:
  if ((v70 & 0x8000000000000) != 0)
  {
    v63 = (unsigned int *)(v70 & 0xFFFFFFFFFFFFLL);
    do
    {
      v64 = __ldaxr(v63);
      v65 = v64 - 1;
    }
    while (__stlxr(v65, v63));
    if (!v65)
    {
      atomic_store(1u, v63);
      WTF::fastFree((WTF *)v63, v20);
    }
  }
  if (!v71)
  {
    if (!v23)
      goto LABEL_25;
LABEL_24:
    WebCore::MutableStyleProperties::removeProperty(*a3, (WTF::StringImpl *)0x53, 0, v21, v22);
    goto LABEL_25;
  }
  if (*v71 != 2)
  {
    *v71 -= 2;
    if (!v23)
      goto LABEL_25;
    goto LABEL_24;
  }
  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v71, (WTF::StringImpl *)v20);
  if (v23)
    goto LABEL_24;
LABEL_25:
  WebCore::StyleProperties::getPropertyCSSValue(a2, 249, &v71);
  v24 = v71;
  if (v71)
  {
    v25 = *a3;
    v26 = WebCore::identifierForStyleProperty<WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WebCore::MutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::MutableStyleProperties>>>(*a3, 249);
    v27 = WebCore::identifierForStyleProperty<WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WebCore::MutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::MutableStyleProperties>>>(v25, 6);
    v28 = 260;
    switch(v26)
    {
      case 258:
      case 262:
        v28 = 258;
        break;
      case 259:
      case 263:
        v28 = 259;
        break;
      case 260:
      case 264:
        break;
      case 261:
        v28 = 261;
        break;
      default:
        if (v26 == 500 || v26 == 501)
        {
          if (v27 == 434)
            v28 = 259;
          else
            v28 = 258;
        }
        else
        {
          v28 = 0;
        }
        break;
    }
    v29 = WebCore::identifierForStyleProperty<WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WebCore::MutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::MutableStyleProperties>>>(a2, 249);
    WebCore::identifierForStyleProperty<WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WebCore::MutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::MutableStyleProperties>>>(a2, 6);
    v33 = v29 - 258;
    v34 = 260;
    switch(v33)
    {
      case 0:
      case 4:
        v34 = 258;
        break;
      case 1:
      case 5:
        v34 = 259;
        break;
      case 2:
      case 6:
        break;
      case 3:
        v34 = 261;
        break;
      default:
        v34 = 0;
        break;
    }
    if (*v24 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v24, v30);
    else
      *v24 -= 2;
    if (v28 == v34)
      WebCore::MutableStyleProperties::removeProperty(v25, (WTF::StringImpl *)0xF9, 0, v31, v32);
  }
  WebCore::StyleProperties::getPropertyCSSValue(a2, 61, &v71);
  if (!v71)
    goto LABEL_62;
  WebCore::backgroundColorFromStyle<WebCore::MutableStyleProperties>((uint64_t *)&v70, *a3);
  WebCore::backgroundColorFromStyle<WebCore::MutableStyleProperties>((uint64_t *)&v69, a2);
  if ((v70 & 0x8000000000000) == 0)
  {
    if ((v69 & 0x8000000000000) == 0 && (_DWORD)v70 == (_DWORD)v69)
    {
      v38 = ((v69 ^ v70) & 0xFE000000000000) == 0;
      goto LABEL_57;
    }
    if ((v69 & 0x8000000000000) != 0)
    {
      v38 = 0;
      v50 = (unsigned int *)(v69 & 0xFFFFFFFFFFFFLL);
      goto LABEL_121;
    }
LABEL_100:
    v38 = 0;
    goto LABEL_57;
  }
  if ((v69 & 0x8000000000000) == 0)
    goto LABEL_100;
  v37.n128_u32[0] = *(_DWORD *)((v70 & 0xFFFFFFFFFFFFLL) + 0x10);
  v50 = (unsigned int *)(v69 & 0xFFFFFFFFFFFFLL);
  if (*(float *)((v70 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v69 & 0xFFFFFFFFFFFFLL) + 4))
  {
    if (*(float *)((v70 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v69 & 0xFFFFFFFFFFFFLL) + 8))
    {
      if (*(float *)((v70 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v69 & 0xFFFFFFFFFFFFLL) + 0xC))
        v38 = v37.n128_f32[0] == *(float *)((v69 & 0xFFFFFFFFFFFFLL) + 0x10)
           && ((v69 ^ v70) & 0xFE000000000000) == 0
           && HIBYTE(v70) == HIBYTE(v69);
      else
        v38 = 0;
    }
    else
    {
      v38 = 0;
    }
  }
  else
  {
    v38 = 0;
  }
  do
  {
LABEL_121:
    v52 = __ldaxr(v50);
    v53 = v52 - 1;
  }
  while (__stlxr(v53, v50));
  if (!v53)
  {
    atomic_store(1u, v50);
    WTF::fastFree((WTF *)v50, v35);
  }
LABEL_57:
  if ((v70 & 0x8000000000000) != 0)
  {
    v66 = (unsigned int *)(v70 & 0xFFFFFFFFFFFFLL);
    do
    {
      v67 = __ldaxr(v66);
      v68 = v67 - 1;
    }
    while (__stlxr(v68, v66));
    if (!v68)
    {
      atomic_store(1u, v66);
      WTF::fastFree((WTF *)v66, v35);
    }
  }
  if (!v71)
  {
    if (!v38)
      goto LABEL_62;
LABEL_61:
    WebCore::MutableStyleProperties::removeProperty(*a3, (WTF::StringImpl *)0x3D, 0, v36, v37);
    goto LABEL_62;
  }
  if (*v71 != 2)
  {
    *v71 -= 2;
    if (!v38)
      goto LABEL_62;
    goto LABEL_61;
  }
  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v71, (WTF::StringImpl *)v35);
  if (v38)
    goto LABEL_61;
LABEL_62:
  result = v72;
  if (v72)
  {
    if (*v72 == 2)
      result = (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v72, (WTF::StringImpl *)v35);
    else
      *v72 -= 2;
  }
  if (*(_DWORD *)v6 == 1)
  {
    v40 = *((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
      {
        v41 = *(unsigned int *)(v40 + 28);
        if ((_DWORD)v41)
        {
          v42 = 16 * v41;
          v43 = (_DWORD **)(*(_QWORD *)(v40 + 16) + 8);
          do
          {
            v44 = *v43;
            *v43 = 0;
            if (v44)
            {
              if (*v44 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v44, (WTF::StringImpl *)v35);
              else
                *v44 -= 2;
            }
            v43 += 2;
            v42 -= 16;
          }
          while (v42);
        }
        v45 = *(WTF **)(v40 + 16);
        if ((WTF *)(v40 + 32) != v45 && v45 != 0)
        {
          *(_QWORD *)(v40 + 16) = 0;
          *(_DWORD *)(v40 + 24) = 0;
          WTF::fastFree(v45, v35);
        }
        v47 = *(_QWORD *)(v40 + 8);
        *(_QWORD *)(v40 + 8) = 0;
        if (v47)
          (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
        WTF::fastFree((WTF *)v40, v35);
      }
      else
      {
        --*(_DWORD *)v40;
      }
    }
    return (_DWORD *)WTF::fastFree(v6, v35);
  }
  else
  {
    --*(_DWORD *)v6;
  }
  return result;
}

void WebCore::EditingStyle::removeStyleFromRulesAndContext(WebCore::StyledElement &,WebCore::Node *)::$_0::operator()(uint64_t a1, void *a2, WTF::StringBuilder *a3, WTF::String *a4, __n128 a5)
{
  WTF::StringImpl *v7;
  WTF::StringBuilder *v8;
  WTF::String *v9;
  __n128 v10;
  WebCore *v11;
  uint64_t v12;
  uint64_t *v13;
  WTF *v14;
  const WebCore::StyleProperties *v15;
  uint64_t v16;
  WTF::StringBuilder *v17;
  WTF::String *v18;
  WTF::StringBuilder *v19;
  WTF::String *v20;
  __n128 v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD **v27;
  _DWORD *v28;
  WTF *v29;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  char v37;
  _QWORD v38[2];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  char v49;

  WebCore::StyleProperties::propertyAsColor(**(_QWORD **)a1, a2, a3, a4, (uint64_t)&v36, a5);
  if (!v37)
    return;
  if ((v36 & 0x8000000000000) != 0)
  {
    v10.n128_u32[0] = *(_DWORD *)((v36 & 0xFFFFFFFFFFFFLL) + 0x10);
    if (v10.n128_f32[0] <= 0.0)
    {
LABEL_5:
      if (!**(_QWORD **)(a1 + 8))
      {
        v11 = *(WebCore **)(a1 + 16);
        v12 = WTF::fastMalloc((WTF *)0x18);
        *(_DWORD *)v12 = 1;
        *(_QWORD *)(v12 + 8) = 0;
        *(_BYTE *)(v12 + 16) &= 0xE0u;
        *(_DWORD *)(v12 + 20) = WebCore::EditingStyle::NoFontDelta;
        WebCore::EditingStyle::init(v12, v11, 2);
        v13 = *(uint64_t **)(a1 + 8);
        v14 = (WTF *)*v13;
        *v13 = v12;
        if (v14)
        {
          if (*(_DWORD *)v14 == 1)
          {
            v24 = *((_QWORD *)v14 + 1);
            *((_QWORD *)v14 + 1) = 0;
            if (v24)
            {
              if (*(_DWORD *)v24 == 1)
              {
                v25 = *(unsigned int *)(v24 + 28);
                if ((_DWORD)v25)
                {
                  v26 = 16 * v25;
                  v27 = (_DWORD **)(*(_QWORD *)(v24 + 16) + 8);
                  do
                  {
                    v28 = *v27;
                    *v27 = 0;
                    if (v28)
                    {
                      if (*v28 == 2)
                        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v28, v7);
                      else
                        *v28 -= 2;
                    }
                    v27 += 2;
                    v26 -= 16;
                  }
                  while (v26);
                }
                v29 = *(WTF **)(v24 + 16);
                if ((WTF *)(v24 + 32) != v29 && v29 != 0)
                {
                  *(_QWORD *)(v24 + 16) = 0;
                  *(_DWORD *)(v24 + 24) = 0;
                  WTF::fastFree(v29, v7);
                }
                v31 = *(_QWORD *)(v24 + 8);
                *(_QWORD *)(v24 + 8) = 0;
                if (v31)
                  (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
                WTF::fastFree((WTF *)v24, v7);
              }
              else
              {
                --*(_DWORD *)v24;
              }
            }
            WTF::fastFree(v14, v7);
          }
          else
          {
            --*(_DWORD *)v14;
          }
        }
      }
      v15 = *(const WebCore::StyleProperties **)(**(_QWORD **)(a1 + 8) + 8);
      if (v15)
      {
        if (((_DWORD)a2 - 2) <= 0x1C8)
        {
          WebCore::StyleProperties::serializeLonghandValue((uint64_t)v15, (uint64_t)a2, v8, v9, (WebCore *)&v35, v10);
        }
        else
        {
          v38[0] = WebCore::shorthandForProperty((int)a2);
          v38[1] = v16;
          v39 = 0u;
          v40 = 0u;
          v41 = 0u;
          v42 = 0u;
          v43 = 0u;
          v44 = 0u;
          v45 = 0u;
          v46 = 0u;
          v47 = 0u;
          v48 = 0;
          v49 = WebCore::ShorthandSerializer::commonSerializationChecks((uint64_t)v38, v15, v17, v18, (__n128)0);
          WebCore::ShorthandSerializer::serialize((WebCore::ShorthandSerializer *)v38, v19, v20, (WebCore::ShorthandSerializer *)&v35, v21);
          WebCore::ShorthandSerializer::~ShorthandSerializer((WebCore::ShorthandSerializer *)v38, v22);
        }
        if (v35)
        {
          WebCore::MutableStyleProperties::setProperty(**(_QWORD **)a1, (uint64_t)a2, (uint64_t)&v35, 0, 0);
          v23 = v35;
          v35 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v7);
            else
              *(_DWORD *)v23 -= 2;
          }
        }
      }
      goto LABEL_16;
    }
  }
  else if (!(_BYTE)v36)
  {
    goto LABEL_5;
  }
  if ((v36 & 0x1000000000000) != 0)
    goto LABEL_5;
LABEL_16:
  if (v37 && (v36 & 0x8000000000000) != 0)
  {
    v32 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFLL);
    do
    {
      v33 = __ldaxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
    {
      atomic_store(1u, v32);
      WTF::fastFree((WTF *)v32, v7);
    }
  }
}

uint64_t WebCore::identifierForStyleProperty<WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WebCore::MutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::MutableStyleProperties>>>(uint64_t a1, int a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  int v5;
  double v6;
  unsigned __int16 v7;
  double v8;
  uint64_t v10;

  WebCore::StyleProperties::getPropertyCSSValue(a1, a2, &v10);
  v4 = v10;
  if (!v10)
    return 0;
  v5 = *(unsigned __int16 *)(v10 + 4) | (*(unsigned __int8 *)(v10 + 6) << 16);
  if ((v5 & 0x3F800) == 0x12800)
  {
    v6 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(*(_QWORD *)(v10 + 8), 0xCu));
    if (!(_BYTE)v3)
      v6 = 0.0;
    if (v6 < 14.0)
      v7 = 90;
    else
      v7 = 47;
    goto LABEL_23;
  }
  if ((v5 & 0x3F800) == 0)
  {
    *(_DWORD *)v10 += 2;
    if (a2 == 28)
    {
      v8 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(v4, 1u));
      if (!(_BYTE)v3)
        v8 = 0.0;
      if (v8 >= 600.0)
      {
        v7 = 91;
LABEL_20:
        if (*(_DWORD *)v4 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v4, v3);
        else
          *(_DWORD *)v4 -= 2;
        goto LABEL_23;
      }
      LOWORD(v5) = *(_WORD *)(v4 + 4);
    }
    if ((v5 & 0x7F) == 0x50)
    {
      if (*(_WORD *)(v4 + 8) == 48)
        v7 = 47;
      else
        v7 = *(_WORD *)(v4 + 8);
    }
    else
    {
      v7 = 0;
    }
    goto LABEL_20;
  }
  v7 = 0;
LABEL_23:
  if (*(_DWORD *)v4 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v7;
}

void WebCore::EditingStyle::removePropertiesInElementDefaultStyle(WebCore::EditingStyle *this, WebCore::Element *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD **v16;
  _DWORD *v17;
  WTF *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD **v23;
  _DWORD *v24;
  WTF *v25;
  uint64_t v27;
  uint64_t v28;

  v2 = *((_QWORD *)this + 1);
  if (!v2)
    return;
  v3 = (*(_DWORD *)v2)++;
  if (*(_DWORD *)(v2 + 28))
  {
    WebCore::styleFromMatchedRulesForElement((WebCore *)&v28, a2, 2);
    v4 = v28;
    v5 = *(unsigned int *)(v28 + 28);
    if ((_DWORD)v5)
    {
      if ((v5 & 0x80000000) != 0)
      {
        __break(0xC471u);
        return;
      }
      v6 = WTF::fastMalloc((WTF *)(2 * v5));
      v7 = (WTF *)v6;
      v8 = *(_DWORD *)(v4 + 28);
      if (v8)
      {
        v9 = 0;
        v10 = 0;
        v11 = *(_QWORD *)(v4 + 16);
        do
        {
          v12 = v9 + 1;
          *(_WORD *)(v6 + 2 * v9) = *(_WORD *)(v11 + 16 * v10) & 0x3FF;
          v13 = v10 + 1;
          v10 = (v10 + 1);
          ++v9;
        }
        while (v8 > v13);
      }
      else
      {
        v12 = 0;
      }
    }
    else
    {
      v12 = 0;
      v7 = 0;
    }
    WebCore::MutableStyleProperties::removeProperties(v2, v7, v12);
    if (v7)
    {
      WTF::fastFree(v7, a2);
      if (v4)
      {
LABEL_13:
        if (*(_DWORD *)v4 == 1)
        {
          v21 = *(unsigned int *)(v4 + 28);
          if ((_DWORD)v21)
          {
            v22 = 16 * v21;
            v23 = (_DWORD **)(*(_QWORD *)(v4 + 16) + 8);
            do
            {
              v24 = *v23;
              *v23 = 0;
              if (v24)
              {
                if (*v24 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v24, a2);
                else
                  *v24 -= 2;
              }
              v23 += 2;
              v22 -= 16;
            }
            while (v22);
          }
          v25 = *(WTF **)(v4 + 16);
          if ((WTF *)(v4 + 32) != v25 && v25 != 0)
          {
            *(_QWORD *)(v4 + 16) = 0;
            *(_DWORD *)(v4 + 24) = 0;
            WTF::fastFree(v25, a2);
          }
          v27 = *(_QWORD *)(v4 + 8);
          *(_QWORD *)(v4 + 8) = 0;
          if (v27)
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
          WTF::fastFree((WTF *)v4, a2);
        }
        else
        {
          --*(_DWORD *)v4;
        }
      }
    }
    else if (v4)
    {
      goto LABEL_13;
    }
    v3 = *(_DWORD *)v2 - 1;
  }
  if (v3)
  {
    *(_DWORD *)v2 = v3;
  }
  else
  {
    v14 = *(unsigned int *)(v2 + 28);
    if ((_DWORD)v14)
    {
      v15 = 16 * v14;
      v16 = (_DWORD **)(*(_QWORD *)(v2 + 16) + 8);
      do
      {
        v17 = *v16;
        *v16 = 0;
        if (v17)
        {
          if (*v17 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, a2);
          else
            *v17 -= 2;
        }
        v16 += 2;
        v15 -= 16;
      }
      while (v15);
    }
    v18 = *(WTF **)(v2 + 16);
    if ((WTF *)(v2 + 32) != v18 && v18 != 0)
    {
      *(_QWORD *)(v2 + 16) = 0;
      *(_DWORD *)(v2 + 24) = 0;
      WTF::fastFree(v18, a2);
    }
    v20 = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    WTF::fastFree((WTF *)v2, a2);
  }
}

uint64_t WebCore::EditingStyle::forceInline(WebCore::EditingStyle *this)
{
  WebCore::MutableStyleProperties *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _DWORD **v8;
  _DWORD *v9;
  WTF *v10;
  uint64_t v12;

  v2 = (WebCore::MutableStyleProperties *)*((_QWORD *)this + 1);
  if (!v2)
  {
    v2 = (WebCore::MutableStyleProperties *)WTF::fastMalloc((WTF *)0x60);
    *(_QWORD *)v2 = 0x900000001;
    *((_QWORD *)v2 + 1) = 0;
    *((_QWORD *)v2 + 2) = (char *)v2 + 32;
    *((_QWORD *)v2 + 3) = 4;
    v4 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v2;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
      {
        v6 = *(unsigned int *)(v4 + 28);
        if ((_DWORD)v6)
        {
          v7 = 16 * v6;
          v8 = (_DWORD **)(*(_QWORD *)(v4 + 16) + 8);
          do
          {
            v9 = *v8;
            *v8 = 0;
            if (v9)
            {
              if (*v9 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v3);
              else
                *v9 -= 2;
            }
            v8 += 2;
            v7 -= 16;
          }
          while (v7);
        }
        v10 = *(WTF **)(v4 + 16);
        if ((WTF *)(v4 + 32) != v10 && v10 != 0)
        {
          *(_QWORD *)(v4 + 16) = 0;
          *(_DWORD *)(v4 + 24) = 0;
          WTF::fastFree(v10, v3);
        }
        v12 = *(_QWORD *)(v4 + 8);
        *(_QWORD *)(v4 + 8) = 0;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        WTF::fastFree((WTF *)v4, v3);
        v2 = (WebCore::MutableStyleProperties *)*((_QWORD *)this + 1);
      }
      else
      {
        --*(_DWORD *)v4;
      }
    }
  }
  return WebCore::MutableStyleProperties::setProperty(v2, 7, 0x16Eu, 1);
}

uint64_t WebCore::EditingStyle::addDisplayContents(WebCore::EditingStyle *this)
{
  WebCore::MutableStyleProperties *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _DWORD **v8;
  _DWORD *v9;
  WTF *v10;
  uint64_t v12;

  v2 = (WebCore::MutableStyleProperties *)*((_QWORD *)this + 1);
  if (!v2)
  {
    v2 = (WebCore::MutableStyleProperties *)WTF::fastMalloc((WTF *)0x60);
    *(_QWORD *)v2 = 0x900000001;
    *((_QWORD *)v2 + 1) = 0;
    *((_QWORD *)v2 + 2) = (char *)v2 + 32;
    *((_QWORD *)v2 + 3) = 4;
    v4 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v2;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
      {
        v6 = *(unsigned int *)(v4 + 28);
        if ((_DWORD)v6)
        {
          v7 = 16 * v6;
          v8 = (_DWORD **)(*(_QWORD *)(v4 + 16) + 8);
          do
          {
            v9 = *v8;
            *v8 = 0;
            if (v9)
            {
              if (*v9 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v3);
              else
                *v9 -= 2;
            }
            v8 += 2;
            v7 -= 16;
          }
          while (v7);
        }
        v10 = *(WTF **)(v4 + 16);
        if ((WTF *)(v4 + 32) != v10 && v10 != 0)
        {
          *(_QWORD *)(v4 + 16) = 0;
          *(_DWORD *)(v4 + 24) = 0;
          WTF::fastFree(v10, v3);
        }
        v12 = *(_QWORD *)(v4 + 8);
        *(_QWORD *)(v4 + 8) = 0;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        WTF::fastFree((WTF *)v4, v3);
        v2 = (WebCore::MutableStyleProperties *)*((_QWORD *)this + 1);
      }
      else
      {
        --*(_DWORD *)v4;
      }
    }
  }
  return WebCore::MutableStyleProperties::setProperty(v2, 7, 0x180u, 0);
}

uint64_t WebCore::EditingStyle::convertPositionStyle(WebCore::EditingStyle *this)
{
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int PropertyIndex;
  unsigned __int16 *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned __int16 *v13;
  int *v14;
  WTF::StringImpl *v15;
  int v16;
  int *v17;
  int v18;
  int *v19;
  int *v21;

  v2 = *((_QWORD *)this + 1);
  if (!v2)
    return 0;
  v3 = &WebCore::staticCSSValuePool[6004];
  *v3 += 2;
  if (WebCore::StyleProperties::propertyMatches(v2, 202, (uint64_t)v3))
  {
    v4 = *((_QWORD *)this + 1);
    v5 = 0x13C0u;
    WebCore::staticCSSValuePool[v5] += 2;
    v21 = &WebCore::staticCSSValuePool[v5];
    PropertyIndex = WebCore::StyleProperties::findPropertyIndex(v4, 202);
    if (PropertyIndex == -1)
    {
      v16 = 0;
LABEL_17:
      WebCore::MutableStyleProperties::setProperty((WebCore::MutableStyleProperties *)v4, 202, &v21, v16);
      v17 = v21;
      v21 = 0;
      if (v17)
      {
        if (*v17 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, v15);
        else
          *v17 -= 2;
      }
      v8 = 0;
      goto LABEL_35;
    }
    if ((*(_BYTE *)(v4 + 4) & 8) == 0)
    {
      v7 = (unsigned __int16 *)(v4 + 2 * PropertyIndex + 8);
LABEL_16:
      v16 = (*v7 >> 13) & 1;
      goto LABEL_17;
    }
    if (*(_DWORD *)(v4 + 28) > PropertyIndex)
    {
      v7 = (unsigned __int16 *)(*(_QWORD *)(v4 + 16) + 16 * PropertyIndex);
      goto LABEL_16;
    }
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x195AB68A0);
  }
  v9 = &WebCore::staticCSSValuePool[4920];
  *v9 += 2;
  if (WebCore::StyleProperties::propertyMatches(*((_QWORD *)this + 1), 202, (uint64_t)v9))
  {
    v10 = *((_QWORD *)this + 1);
    v11 = 0x1304u;
    WebCore::staticCSSValuePool[v11] += 2;
    v21 = &WebCore::staticCSSValuePool[v11];
    v12 = WebCore::StyleProperties::findPropertyIndex(v10, 202);
    if (v12 == -1)
    {
      v18 = 0;
    }
    else
    {
      if ((*(_BYTE *)(v10 + 4) & 8) != 0)
      {
        if (*(_DWORD *)(v10 + 28) <= v12)
          goto LABEL_39;
        v13 = (unsigned __int16 *)(*(_QWORD *)(v10 + 16) + 16 * v12);
      }
      else
      {
        v13 = (unsigned __int16 *)(v10 + 2 * v12 + 8);
      }
      v18 = (*v13 >> 13) & 1;
    }
    WebCore::MutableStyleProperties::setProperty((WebCore::MutableStyleProperties *)v10, 202, &v21, v18);
    v19 = v21;
    v21 = 0;
    if (v19)
    {
      if (*v19 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, v15);
      else
        *v19 -= 2;
    }
    v8 = 1;
  }
  else
  {
    v14 = &WebCore::staticCSSValuePool[4868];
    *v14 += 2;
    v8 = WebCore::StyleProperties::propertyMatches(*((_QWORD *)this + 1), 202, (uint64_t)v14);
    if (*v14 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)&WebCore::staticCSSValuePool[4868], v15);
    else
      WebCore::staticCSSValuePool[4868] = *v14 - 2;
  }
  if (WebCore::staticCSSValuePool[4920] == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)&WebCore::staticCSSValuePool[4920], v15);
  else
    WebCore::staticCSSValuePool[4920] -= 2;
LABEL_35:
  if (WebCore::staticCSSValuePool[6004] == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)&WebCore::staticCSSValuePool[6004], v15);
  else
    WebCore::staticCSSValuePool[6004] -= 2;
  return v8;
}

uint64_t WebCore::EditingStyle::isFloating(WebCore::EditingStyle *this)
{
  WTF::StringImpl *v1;
  const WTF::StringImpl *v2;
  int v3;
  _DWORD *v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int *v11;
  int *v12;
  int v13;
  int v14;
  int *v15;
  int *v16;
  int v17;
  int v18;
  uint64_t v19;
  int *v20;
  const WebCore::CSSLinearGradientValue **v21;

  WebCore::StyleProperties::getPropertyCSSValue(*((_QWORD *)this + 1), 123, &v19);
  v3 = dword_1ECE8BC48;
  dword_1ECE8BC48 += 2;
  v4 = (_DWORD *)v19;
  if (!v19)
  {
    v9 = 0;
    if (v3)
      goto LABEL_6;
LABEL_9:
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)&WebCore::staticCSSValuePool[3112], v1);
    if (!v4)
      return v9;
    goto LABEL_10;
  }
  v5 = *(unsigned __int16 *)(v19 + 4) | (*(unsigned __int8 *)(v19 + 6) << 16);
  v6 = LOWORD(WebCore::staticCSSValuePool[3113]) | (BYTE2(WebCore::staticCSSValuePool[3113]) << 16);
  if (((v6 ^ v5) & 0x3F800) != 0)
  {
    if ((v5 & 0x3F800) == 0x1D800)
    {
      v11 = &WebCore::staticCSSValuePool[3112];
      v1 = (WTF::StringImpl *)v19;
LABEL_16:
      v12 = (int *)v1;
      while (v12[2] == 1)
      {
        v12 = (int *)*((_QWORD *)v12 + 2);
        v13 = *((unsigned __int16 *)v12 + 2) | (*((unsigned __int8 *)v12 + 6) << 16);
        if (((v13 ^ v6) & 0x3F800) == 0)
        {
          v20 = v11;
          goto LABEL_33;
        }
        if ((v13 & 0x3F800) != 0x1D800)
        {
          v8 = 0;
          v14 = v6 & 0x3F800;
          v6 = *((unsigned __int16 *)v12 + 2) | (*((unsigned __int8 *)v12 + 6) << 16);
          v1 = (WTF::StringImpl *)v11;
          v11 = v12;
          if (v14 == 120832)
            goto LABEL_16;
          goto LABEL_5;
        }
      }
    }
    else if ((v6 & 0x3F800) == 0x1D800)
    {
      v15 = &WebCore::staticCSSValuePool[3112];
      v16 = (int *)v19;
LABEL_24:
      v12 = v15;
      while (v12[2] == 1)
      {
        v12 = (int *)*((_QWORD *)v12 + 2);
        v17 = *((unsigned __int16 *)v12 + 2) | (*((unsigned __int8 *)v12 + 6) << 16);
        if (((v17 ^ v5) & 0x3F800) == 0)
        {
          v20 = v16;
LABEL_33:
          v21 = (const WebCore::CSSLinearGradientValue **)&v20;
          v7 = (uint64_t)v12;
          goto LABEL_4;
        }
        if ((v17 & 0x3F800) != 0x1D800)
        {
          v8 = 0;
          v18 = v5 & 0x3F800;
          v5 = *((unsigned __int16 *)v12 + 2) | (*((unsigned __int8 *)v12 + 6) << 16);
          v15 = v16;
          v16 = v12;
          if (v18 == 120832)
            goto LABEL_24;
          goto LABEL_5;
        }
      }
    }
    v8 = 0;
  }
  else
  {
    v20 = &WebCore::staticCSSValuePool[3112];
    v21 = (const WebCore::CSSLinearGradientValue **)&v20;
    v7 = v19;
LABEL_4:
    v8 = _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v7, &v21, v2);
  }
LABEL_5:
  v9 = v8 ^ 1u;
  v3 = dword_1ECE8BC48 - 2;
  if (dword_1ECE8BC48 == 2)
    goto LABEL_9;
LABEL_6:
  dword_1ECE8BC48 = v3;
  if (!v4)
    return v9;
LABEL_10:
  if (*v4 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v4, v1);
  else
    *v4 -= 2;
  return v9;
}

uint64_t WebCore::EditingStyle::legacyFontSize(WebCore::EditingStyle *this, WebCore::Document *a2)
{
  WTF::StringImpl *v4;
  int *v5;
  uint64_t v6;
  char v7;
  const WebCore::Document *v8;
  double v9;
  char v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v17;

  WebCore::StyleProperties::getPropertyCSSValue(*((_QWORD *)this + 1), 13, &v17);
  v5 = (int *)v17;
  if (!v17)
    return 0;
  if (((*(unsigned __int16 *)(v17 + 4) | (*(unsigned __int8 *)(v17 + 6) << 16)) & 0x3F800) == 0)
  {
    if ((((*(_WORD *)(v17 + 4) & 0x7E) - 6) & 0xFEu) > 5)
    {
      if ((*(_WORD *)(v17 + 4) & 0x7F) == 0x50)
      {
        v12 = *(unsigned __int16 *)(v17 + 8);
        v13 = v12 - 95;
        v14 = v12 - 94;
        if (v13 <= 6)
          v6 = v14;
        else
          v6 = 0;
      }
      else
      {
        v6 = 0;
      }
    }
    else
    {
      v7 = *((_BYTE *)this + 16);
      v9 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(v17, 6u));
      if (!v10)
        v9 = 0.0;
      if (v9 >= 2147483650.0)
      {
        v11 = 0x7FFFFFFFLL;
      }
      else if (v9 > -2147483650.0)
      {
        v11 = (int)v9;
      }
      else
      {
        v11 = 0x80000000;
      }
      v6 = WebCore::Style::legacyFontSizeForPixelSize((WebCore::Style *)v11, v7 & 1, (uint64_t)a2, v8);
    }
    v15 = *v5 - 2;
    if (*v5 == 2)
    {
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v5, v4);
      return v6;
    }
    goto LABEL_18;
  }
  v15 = *(_DWORD *)v17 - 2;
  if (*(_DWORD *)v17 != 2)
  {
    v6 = 0;
LABEL_18:
    *v5 = v15;
    return v6;
  }
  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v17, v4);
  return 0;
}

BOOL WebCore::EditingStyle::hasStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD **v13;
  _DWORD *v14;
  WTF *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD **v20;
  _DWORD *v21;
  WTF *v22;
  uint64_t v24;

  v6 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v6 = 1;
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 16) &= 0xE0u;
  *(_DWORD *)(v6 + 20) = WebCore::EditingStyle::NoFontDelta;
  WebCore::EditingStyle::setProperty(v6, a2, a3, 0);
  WebCore::EditingStyle::extractFontSizeDelta((WebCore::EditingStyle *)v6);
  if (a1)
  {
    v8 = *(_QWORD *)(a1 + 8);
    if (v8)
    {
      ++*(_DWORD *)v8;
      LODWORD(a1) = WebCore::EditingStyle::triStateOfStyle<WebCore::MutableStyleProperties>(v6, v8, 1);
      if (*(_DWORD *)v8 == 1)
      {
        v11 = *(unsigned int *)(v8 + 28);
        if ((_DWORD)v11)
        {
          v12 = 16 * v11;
          v13 = (_DWORD **)(*(_QWORD *)(v8 + 16) + 8);
          do
          {
            v14 = *v13;
            *v13 = 0;
            if (v14)
            {
              if (*v14 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v14, v7);
              else
                *v14 -= 2;
            }
            v13 += 2;
            v12 -= 16;
          }
          while (v12);
        }
        v15 = *(WTF **)(v8 + 16);
        if ((WTF *)(v8 + 32) != v15 && v15 != 0)
        {
          *(_QWORD *)(v8 + 16) = 0;
          *(_DWORD *)(v8 + 24) = 0;
          WTF::fastFree(v15, v7);
        }
        v17 = *(_QWORD *)(v8 + 8);
        *(_QWORD *)(v8 + 8) = 0;
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        WTF::fastFree((WTF *)v8, v7);
      }
      else
      {
        --*(_DWORD *)v8;
      }
    }
    else
    {
      LODWORD(a1) = 0;
    }
  }
  if (*(_DWORD *)v6 == 1)
  {
    v10 = *(_QWORD *)(v6 + 8);
    *(_QWORD *)(v6 + 8) = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
      {
        v18 = *(unsigned int *)(v10 + 28);
        if ((_DWORD)v18)
        {
          v19 = 16 * v18;
          v20 = (_DWORD **)(*(_QWORD *)(v10 + 16) + 8);
          do
          {
            v21 = *v20;
            *v20 = 0;
            if (v21)
            {
              if (*v21 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v21, v7);
              else
                *v21 -= 2;
            }
            v20 += 2;
            v19 -= 16;
          }
          while (v19);
        }
        v22 = *(WTF **)(v10 + 16);
        if ((WTF *)(v10 + 32) != v22 && v22 != 0)
        {
          *(_QWORD *)(v10 + 16) = 0;
          *(_DWORD *)(v10 + 24) = 0;
          WTF::fastFree(v22, v7);
        }
        v24 = *(_QWORD *)(v10 + 8);
        *(_QWORD *)(v10 + 8) = 0;
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
        WTF::fastFree((WTF *)v10, v7);
      }
      else
      {
        --*(_DWORD *)v10;
      }
    }
    WTF::fastFree((WTF *)v6, v7);
  }
  else
  {
    --*(_DWORD *)v6;
  }
  return (_DWORD)a1 != 0;
}

uint64_t WebCore::EditingStyle::textDirectionForSelection(WebCore::EditingStyle *this, const WebCore::VisibleSelection *a2, WebCore::EditingStyle *a3, BOOL *a4)
{
  WebCore::VisiblePosition *v7;
  uint64_t v8;
  int v9;
  void *v10;
  WebCore::Node *v11;
  uint64_t v12;
  void *v13;
  const WebCore::VisiblePosition *v14;
  WebCore::Node *v15;
  WTF::StringImpl *v16;
  int v17;
  WebCore::Node *v18;
  WebCore::Node *v19;
  WebCore *v20;
  WTF::StringImpl *v21;
  _DWORD *v22;
  __int16 v23;
  WTF::StringImpl *v24;
  WebCore::Node *v25;
  unsigned __int8 v26;
  WebCore::Node *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  WebCore::Node *v32;
  WebCore::Node *v33;
  WebCore::Node *v34;
  int v35;
  int v36;
  char v37;
  WebCore::Node *v38;
  WebCore *v39;
  WebCore::Node *v40;
  int v41;
  int v42;
  _DWORD *v43;
  int v44;
  WTF::StringImpl *v45;
  WebCore::Node *v46;
  int v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v51;
  uint64_t v52;
  void *v54;
  WebCore::Node *v55;
  WebCore::Node *v56;
  WebCore::Node *v57;
  WebCore::Node *v58;
  uint64_t v59;
  WebCore::Node *v60;
  WebCore::Node *v61;
  WebCore::Node *v62;
  int v63;
  char v64;
  WTF::StringImpl *v65;
  int v66;
  char v67;
  WebCore::Node *v68;
  int v69;
  char v70;
  WTF::StringImpl *v71;
  int v72;
  WebCore::Node *v73;
  int v74;
  char v75;
  uint64_t v76[2];

  *(_BYTE *)a3 = 1;
  if (!*((_BYTE *)this + 97))
    return 0;
  v7 = (WebCore::EditingStyle *)((char *)this + 64);
  WebCore::Position::downstream((uint64_t)this + 64, (WebCore::Node *)1, (uint64_t)v76);
  v8 = v76[0];
  if (!v76[0])
    return 0;
  *(_DWORD *)(v76[0] + 24) += 2;
  v73 = 0;
  v74 = 0;
  v75 &= 0xF0u;
  v9 = *((unsigned __int8 *)this + 97);
  if (v9 == 2)
  {
    WebCore::Position::upstream((uint64_t)this + 80, (WebCore::Node *)1, (uint64_t)&v62);
    v11 = v62;
    v62 = 0;
    v12 = (uint64_t)v73;
    v73 = v11;
    if (v12)
    {
      if (*(_DWORD *)(v12 + 24) == 2)
      {
        if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v12, v10);
          v55 = v62;
          v74 = v63;
          v75 = v64;
          v62 = 0;
          if (v55)
          {
            if (*((_DWORD *)v55 + 6) == 2)
            {
              if ((*((_WORD *)v55 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v55, v54);
            }
            else
            {
              *((_DWORD *)v55 + 6) -= 2;
            }
          }
LABEL_8:
          WebCore::makeSimpleRange<WebCore::Position &,WebCore::Position &>(v76, (uint64_t *)&v73, (uint64_t)&v62);
          if (!v67)
          {
            __break(1u);
LABEL_221:
            v56 = v68;
            if (!v68)
            {
              v32 = 0;
              goto LABEL_228;
            }
            *((_DWORD *)v68 + 6) += 2;
            v62 = v56;
            v63 = v69;
            v64 = v70;
            LOBYTE(v65) = 0;
            if (!WebCore::inSameLine((WebCore *)&v68, (const WebCore::VisiblePosition *)&v62, v14))
              LOBYTE(v71) = 0;
            v57 = v62;
            v62 = 0;
            if (v57)
            {
              if (*((_DWORD *)v57 + 6) == 2)
              {
                if ((*((_WORD *)v57 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v57, v13);
              }
              else
              {
                *((_DWORD *)v57 + 6) -= 2;
              }
            }
LABEL_82:
            v32 = v68;
            if (v68)
            {
              v37 = 0;
              *((_DWORD *)v68 + 6) += 4;
LABEL_84:
              if (*(_DWORD *)(v8 + 24) == 2)
              {
                if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v8, v13);
              }
              else
              {
                *(_DWORD *)(v8 + 24) -= 2;
              }
              if ((v37 & 1) == 0)
              {
                if (*((_DWORD *)v32 + 6) == 2)
                {
                  if ((*((_WORD *)v32 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v32, v13);
                }
                else
                {
                  *((_DWORD *)v32 + 6) -= 2;
                }
              }
              v38 = v68;
              v68 = 0;
              if (v38)
              {
                if (*((_DWORD *)v38 + 6) == 2)
                {
                  if ((*((_WORD *)v38 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v38, v13);
                }
                else
                {
                  *((_DWORD *)v38 + 6) -= 2;
                }
              }
              goto LABEL_92;
            }
LABEL_228:
            v37 = 1;
            goto LABEL_84;
          }
          v15 = v62;
          *((_DWORD *)v62 + 6) += 2;
          v68 = v15;
          v69 = v63;
          v16 = v65;
          v17 = *((_DWORD *)v65 + 6);
          *((_DWORD *)v65 + 6) = v17 + 2;
          v71 = v16;
          v72 = v66;
          v65 = 0;
          if (v17)
          {
            *((_DWORD *)v16 + 6) = v17;
          }
          else if ((*((_WORD *)v16 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v16, v13);
            v18 = v62;
            v62 = 0;
            if (!v18)
            {
LABEL_14:
              WebCore::IntersectingNodeIterator::IntersectingNodeIterator((WebCore::IntersectingNodeIterator *)&v60, (const WebCore::SimpleRange *)&v68);
              while (v60)
              {
                if ((*((_WORD *)v60 + 14) & 0x70) != 0)
                {
                  v20 = WebCore::styleElementForNode(v60, v19);
                  if (v20)
                    *((_DWORD *)v20 + 6) += 2;
                  v62 = v20;
                  LOBYTE(v63) = 0;
                  LOBYTE(v66) = 0;
                  v67 = 0;
                  WebCore::ComputedStyleExtractor::propertyValue((uint64_t)&v62, 285, 1, 0, &v59);
                  v22 = (_DWORD *)v59;
                  if (v59)
                  {
                    if (((*(unsigned __int16 *)(v59 + 4) | (*(unsigned __int8 *)(v59 + 6) << 16)) & 0x3F800) != 0)
                    {
                      v23 = 0;
                    }
                    else if ((*(_WORD *)(v59 + 4) & 0x7F) == 0x50)
                    {
                      v23 = *(_WORD *)(v59 + 8);
                    }
                    else
                    {
                      v23 = 0;
                    }
                    v59 = 0;
                    if (*v22 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v22, v21);
                    else
                      *v22 -= 2;
                  }
                  else
                  {
                    v23 = 0;
                    v59 = 0;
                  }
                  if ((_BYTE)v66)
                  {
                    v24 = v65;
                    v65 = 0;
                    if (v24)
                    {
                      if (*(_DWORD *)v24 == 2)
                        WTF::StringImpl::destroy(v24, v21);
                      else
                        *(_DWORD *)v24 -= 2;
                    }
                  }
                  v25 = v62;
                  v62 = 0;
                  if (v25)
                  {
                    if (*((_DWORD *)v25 + 6) == 2)
                    {
                      if ((*((_WORD *)v25 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v25, v21);
                    }
                    else
                    {
                      *((_DWORD *)v25 + 6) -= 2;
                    }
                  }
                  if (v23 == 451 || v23 == 457)
                  {
                    v33 = v61;
                    v61 = 0;
                    if (v33)
                    {
                      if (*((_DWORD *)v33 + 6) == 2)
                      {
                        if ((*((_WORD *)v33 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef(v33, v21);
                      }
                      else
                      {
                        *((_DWORD *)v33 + 6) -= 2;
                      }
                    }
                    v34 = v60;
                    v60 = 0;
                    if (v34)
                    {
                      if (*((_DWORD *)v34 + 6) == 2)
                      {
                        if ((*((_WORD *)v34 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef(v34, v21);
                      }
                      else
                      {
                        *((_DWORD *)v34 + 6) -= 2;
                      }
                    }
                    if (v16)
                    {
                      if (*((_DWORD *)v16 + 6) == 2)
                      {
                        if ((*((_WORD *)v16 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef(v16, v21);
                      }
                      else
                      {
                        *((_DWORD *)v16 + 6) -= 2;
                      }
                    }
                    if (v15)
                    {
                      if (*((_DWORD *)v15 + 6) == 2)
                      {
                        if ((*((_WORD *)v15 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef(v15, v21);
                      }
                      else
                      {
                        *((_DWORD *)v15 + 6) -= 2;
                      }
                    }
                    v26 = 0;
                    goto LABEL_164;
                  }
                }
                WebCore::IntersectingNodeIterator::advance((WebCore::IntersectingNodeIterator *)&v60);
              }
              v27 = v61;
              v61 = 0;
              if (!v27)
                goto LABEL_46;
              v28 = *((_DWORD *)v27 + 6) - 2;
              if (*((_DWORD *)v27 + 6) == 2)
              {
                if ((*((_WORD *)v27 + 15) & 0x400) != 0)
                  goto LABEL_46;
                WebCore::Node::removedLastRef(v27, v19);
                v27 = v60;
                v60 = 0;
                if (!v27)
                  goto LABEL_46;
                v28 = *((_DWORD *)v27 + 6) - 2;
                if (*((_DWORD *)v27 + 6) == 2)
                {
                  if ((*((_WORD *)v27 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v27, v19);
                  goto LABEL_46;
                }
              }
              *((_DWORD *)v27 + 6) = v28;
LABEL_46:
              if (v16)
              {
                if (*((_DWORD *)v16 + 6) == 2)
                {
                  if ((*((_WORD *)v16 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v16, v19);
                }
                else
                {
                  *((_DWORD *)v16 + 6) -= 2;
                }
              }
              if (v15)
              {
                if (*((_DWORD *)v15 + 6) == 2)
                {
                  if ((*((_WORD *)v15 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v15, v19);
                }
                else
                {
                  *((_DWORD *)v15 + 6) -= 2;
                }
              }
              v9 = *((unsigned __int8 *)this + 97);
              goto LABEL_53;
            }
LABEL_12:
            if (*((_DWORD *)v18 + 6) == 2)
            {
              if ((*((_WORD *)v18 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v18, v13);
            }
            else
            {
              *((_DWORD *)v18 + 6) -= 2;
            }
            goto LABEL_14;
          }
          v62 = 0;
          v18 = v15;
          goto LABEL_12;
        }
      }
      else
      {
        *(_DWORD *)(v12 + 24) -= 2;
      }
    }
    v74 = v63;
    v75 = v64;
    goto LABEL_8;
  }
LABEL_53:
  if (v9 == 1)
  {
    if (a2)
    {
      v29 = *((_QWORD *)a2 + 1);
      if (v29)
      {
        v30 = WebCore::StyleProperties::propertyAsValueID(v29, (WTF::StringImpl *)0x11D);
        if ((v30 & 0xFF0000) != 0 && (unsigned __int16)v30 == 457)
        {
          v31 = WebCore::StyleProperties::propertyAsValueID(*((_QWORD *)a2 + 1), (WTF::StringImpl *)6);
          if ((v31 & 0xFF0000) != 0)
          {
            if ((unsigned __int16)v31 == 433)
              v26 = 1;
            else
              v26 = 2;
            goto LABEL_79;
          }
        }
        else if ((v30 & 0xFF0000) != 0 && (unsigned __int16)v30 == 90)
        {
          v26 = 0;
LABEL_79:
          *(_BYTE *)a3 = 0;
          goto LABEL_164;
        }
      }
    }
    v35 = *((unsigned __int8 *)this + 97);
    v36 = *((unsigned __int8 *)this + 96);
    WebCore::VisiblePosition::canonicalPosition(v7, (uint64_t)&v68);
    LOBYTE(v71) = 1;
    if (v35 == 2 || v36)
      goto LABEL_82;
    goto LABEL_221;
  }
  v32 = (WebCore::Node *)v8;
LABEL_92:
  if (v32)
  {
    *((_DWORD *)v32 + 6) += 2;
    v58 = v32;
    WebCore::enclosingBlock((uint64_t *)&v58, (WebCore::Node *)1, &v68);
    v58 = 0;
    if (*((_DWORD *)v32 + 6) == 2)
    {
      if ((*((_WORD *)v32 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v32, v21);
    }
    else
    {
      *((_DWORD *)v32 + 6) -= 2;
    }
  }
  else
  {
    v58 = 0;
    WebCore::enclosingBlock((uint64_t *)&v58, (WebCore::Node *)1, &v68);
    v58 = 0;
  }
  if (v32 != v68)
  {
    v26 = 0;
    while (1)
    {
      v8 = (uint64_t)v32;
      if ((*((_WORD *)v32 + 14) & 0x70) == 0)
        goto LABEL_127;
      v39 = WebCore::styleElementForNode(v32, v21);
      if (v39)
        *((_DWORD *)v39 + 6) += 2;
      v62 = v39;
      LOBYTE(v63) = 0;
      LOBYTE(v66) = 0;
      v67 = 0;
      WebCore::ComputedStyleExtractor::propertyValue((uint64_t)&v62, 285, 1, 0, &v60);
      v40 = v60;
      if (!v60)
      {
        v41 = 6;
        goto LABEL_118;
      }
      v42 = *((unsigned __int16 *)v60 + 2) | (*((unsigned __int8 *)v60 + 6) << 16);
      if ((v42 & 0x3F800) != 0)
        goto LABEL_103;
      if ((v42 & 0x3F87F) != 0x50)
        goto LABEL_106;
      v44 = *((unsigned __int16 *)v60 + 4);
      if (v44 == 90)
      {
LABEL_103:
        v41 = 6;
      }
      else
      {
        if (v44 != 451)
        {
LABEL_106:
          v41 = 6;
          WebCore::ComputedStyleExtractor::propertyValue((uint64_t)&v62, 6, 1, 0, &v59);
          v43 = (_DWORD *)v59;
          if (v59)
          {
            if (((*(unsigned __int16 *)(v59 + 4) | (*(unsigned __int8 *)(v59 + 6) << 16)) & 0x3F87F) == 0x50)
            {
              v47 = *(unsigned __int16 *)(v59 + 8);
              if ((v47 - 435) >= 0xFFFFFFFE)
              {
                if (v26)
                  goto LABEL_140;
                if (*((_BYTE *)this + 97) == 2)
                {
                  v48 = (uint64_t)v73;
                  v49 = *(_WORD *)(v8 + 28);
                  if ((v49 & 0xF000) == 0x9000)
                  {
                    if (**((_QWORD **)v73 + 5) == v8
                      && (*((_WORD *)v73 + 14) & 0xF000) != 0x9000
                      && (*((_BYTE *)v73 + 22) & 8) != 0)
                    {
                      goto LABEL_152;
                    }
                  }
                  else if ((v49 & 4) != 0
                         && *(_QWORD *)(v8 + 80)
                         && ((*((unsigned __int8 *)v73 + 22) ^ *(unsigned __int8 *)(v8 + 22)) & 8) == 0)
                  {
                    do
                      v48 = *(_QWORD *)(v48 + 32);
                    while (v48 != v8 && v48 != 0);
                    if (v48)
                      goto LABEL_152;
                  }
                  v26 = 0;
LABEL_140:
                  v41 = 1;
                }
                else
                {
LABEL_152:
                  v41 = 0;
                  if (v47 == 433)
                    v26 = 1;
                  else
                    v26 = 2;
                }
              }
            }
            v59 = 0;
            if (*v43 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v43, v21);
            else
              *v43 -= 2;
          }
          v40 = v60;
          v60 = 0;
          if (!v40)
            goto LABEL_118;
          goto LABEL_115;
        }
        v41 = 1;
      }
      v60 = 0;
LABEL_115:
      if (*(_DWORD *)v40 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v40, v21);
      else
        *(_DWORD *)v40 -= 2;
LABEL_118:
      if ((_BYTE)v66)
      {
        v45 = v65;
        v65 = 0;
        if (v45)
        {
          if (*(_DWORD *)v45 == 2)
            WTF::StringImpl::destroy(v45, v21);
          else
            *(_DWORD *)v45 -= 2;
        }
      }
      v46 = v62;
      v62 = 0;
      if (v46)
      {
        if (*((_DWORD *)v46 + 6) == 2)
        {
          if ((*((_WORD *)v46 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v46, v21);
        }
        else
        {
          *((_DWORD *)v46 + 6) -= 2;
        }
      }
      if (v41 != 6 && v41)
      {
        v26 = 0;
        v32 = v68;
        goto LABEL_161;
      }
LABEL_127:
      v32 = *(WebCore::Node **)(v8 + 32);
      if (v32)
        *((_DWORD *)v32 + 6) += 2;
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v8, v21);
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
      }
      if (v32 == v68)
        goto LABEL_160;
    }
  }
  v26 = 0;
LABEL_160:
  *(_BYTE *)a3 = 0;
  v8 = (uint64_t)v32;
LABEL_161:
  v68 = 0;
  if (v32)
  {
    if (*((_DWORD *)v32 + 6) == 2)
    {
      if ((*((_WORD *)v32 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v32, v21);
    }
    else
    {
      *((_DWORD *)v32 + 6) -= 2;
    }
  }
LABEL_164:
  v51 = (uint64_t)v73;
  v73 = 0;
  if (v51)
  {
    if (*(_DWORD *)(v51 + 24) == 2)
    {
      if ((*(_WORD *)(v51 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v51, v21);
    }
    else
    {
      *(_DWORD *)(v51 + 24) -= 2;
    }
  }
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8, v21);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  v52 = v76[0];
  v76[0] = 0;
  if (v52)
  {
    if (*(_DWORD *)(v52 + 24) == 2)
    {
      if ((*(_WORD *)(v52 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v52, v21);
    }
    else
    {
      *(_DWORD *)(v52 + 24) -= 2;
    }
  }
  return v26;
}

void WebCore::EditingStyle::inverseTransformColorIfNeeded(WebCore::EditingStyle *this@<X0>, WebCore::Element *a2@<X1>, WTF::StringBuilder *a3@<X2>, WTF::String *a4@<X3>, uint64_t *a5@<X8>, __n128 a6@<Q0>)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  void *v11;
  WTF::StringBuilder *v12;
  WTF::String *v13;
  __n128 v14;
  _BOOL4 v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  WTF::StringBuilder *v19;
  WTF::String *v20;
  __n128 v21;
  _BOOL4 v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;

  v8 = *((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL;
  if (v8)
  {
    if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195AB78F8);
    }
    v9 = *(_DWORD *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x10) + 1;
    *(_DWORD *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x10) = v9;
    v10 = *((_QWORD *)this + 1);
    if (!v10 || !*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 104) + 320) + 20))
    {
      ++*(_DWORD *)this;
      *a5 = (uint64_t)this;
      if (!v9)
      {
LABEL_56:
        __break(0xC471u);
        JUMPOUT(0x195AB7AE0);
      }
      goto LABEL_14;
    }
    WebCore::StyleProperties::propertyAsColor(v10, (void *)5, a3, a4, (uint64_t)&v47, a6);
    if ((_BYTE)v48)
    {
      if ((v47 & 0x8000000000000) != 0)
      {
        v14.n128_u32[0] = *(_DWORD *)((v47 & 0xFFFFFFFFFFFFLL) + 0x10);
        if (v14.n128_f32[0] > 0.0)
        {
LABEL_8:
          v15 = (v47 & 0x1000000000000) == 0;
          if ((v47 & 0x1000000000000) != 0)
            v16 = 0;
          else
            v16 = v47;
          if ((~v47 & 0x9000000000000) != 0)
          {
            v46 = v16;
            v17 = (v47 & 0x1000000000000) >> 48;
            goto LABEL_20;
          }
          goto LABEL_57;
        }
      }
      else if ((_BYTE)v47)
      {
        goto LABEL_8;
      }
      if ((v47 & 0x8000000000000) != 0)
      {
LABEL_57:
        v31 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFLL);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        LOBYTE(v17) = 1;
        if (v32 == 1)
        {
          atomic_store(1u, v31);
          WTF::fastFree((WTF *)v31, v11);
        }
        v15 = 0;
        v46 = 0;
LABEL_20:
        WebCore::StyleProperties::propertyAsColor(*((_QWORD *)this + 1), (void *)0x53, v12, v13, (uint64_t)&v47, v14);
        if ((_BYTE)v48)
        {
          if ((v47 & 0x8000000000000) != 0)
          {
            v21.n128_u32[0] = *(_DWORD *)((v47 & 0xFFFFFFFFFFFFLL) + 0x10);
            if (v21.n128_f32[0] > 0.0)
            {
LABEL_23:
              v22 = (v47 & 0x1000000000000) == 0;
              if ((v47 & 0x1000000000000) != 0)
                v23 = 0;
              else
                v23 = v47;
              if ((~v47 & 0x9000000000000) != 0)
              {
                v24 = (v47 & 0x1000000000000) >> 48;
                goto LABEL_31;
              }
              goto LABEL_62;
            }
          }
          else if ((_BYTE)v47)
          {
            goto LABEL_23;
          }
          if ((v47 & 0x8000000000000) != 0)
          {
LABEL_62:
            v33 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFLL);
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            LOBYTE(v24) = 1;
            if (v34 == 1)
            {
              atomic_store(1u, v33);
              WTF::fastFree((WTF *)v33, v18);
            }
            v23 = 0;
            v22 = 0;
LABEL_31:
            WebCore::StyleProperties::propertyAsColor(*((_QWORD *)this + 1), (void *)0x3D, v19, v20, (uint64_t)&v47, v21);
            v26 = v48;
            if ((_BYTE)v48)
            {
              if ((v47 & 0x8000000000000) != 0)
              {
                if (*(float *)((v47 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0)
                {
LABEL_34:
                  v26 = (v47 & 0x1000000000000) == 0;
                  if ((v47 & 0x1000000000000) != 0)
                    v27 = 0;
                  else
                    v27 = v47;
                  if ((~v47 & 0x9000000000000) != 0)
                  {
                    v28 = (v47 & 0x1000000000000) >> 48;
                    goto LABEL_44;
                  }
                  goto LABEL_67;
                }
              }
              else if ((_BYTE)v47)
              {
                goto LABEL_34;
              }
              if ((v47 & 0x8000000000000) != 0)
              {
LABEL_67:
                v35 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFLL);
                do
                  v36 = __ldaxr(v35);
                while (__stlxr(v36 - 1, v35));
                LOBYTE(v28) = 1;
                if (v36 == 1)
                {
                  atomic_store(1u, v35);
                  WTF::fastFree((WTF *)v35, v25);
                }
                v27 = 0;
                v26 = 0;
LABEL_44:
                if (!((v22 || v15) | v26))
                {
                  ++*(_DWORD *)this;
                  *a5 = (uint64_t)this;
                  goto LABEL_55;
                }
                WebCore::EditingStyle::copy(this, a5);
                v30 = *(_QWORD *)(*(_QWORD *)(v8 + 104) + 320) + 8;
                v47 = (unint64_t)this;
                v48 = v30;
                v49 = a5;
                if ((v17 & 1) != 0)
                {
                  if ((v24 & 1) != 0)
                    goto LABEL_47;
                }
                else
                {
                  WebCore::EditingStyle::inverseTransformColorIfNeeded(WebCore::Element &)::$_1::operator()((uint64_t)&v47, 5);
                  if ((v24 & 1) != 0)
                  {
LABEL_47:
                    if ((v28 & 1) != 0)
                    {
LABEL_53:
                      if (!(v24 & 1 | ((v23 & 0x8000000000000) == 0)))
                      {
                        v40 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFLL);
                        do
                        {
                          v41 = __ldaxr(v40);
                          v42 = v41 - 1;
                        }
                        while (__stlxr(v42, v40));
                        if (!v42)
                        {
                          atomic_store(1u, v40);
                          WTF::fastFree((WTF *)v40, v29);
                        }
                      }
                      if (!(v17 & 1 | ((v46 & 0x8000000000000) == 0)))
                      {
                        v43 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFLL);
                        do
                        {
                          v44 = __ldaxr(v43);
                          v45 = v44 - 1;
                        }
                        while (__stlxr(v45, v43));
                        if (!v45)
                        {
                          atomic_store(1u, v43);
                          WTF::fastFree((WTF *)v43, v29);
                        }
                      }
LABEL_55:
                      v9 = *(_DWORD *)(v8 + 16);
                      if (!v9)
                        goto LABEL_56;
LABEL_14:
                      *(_DWORD *)(v8 + 16) = v9 - 1;
                      return;
                    }
LABEL_52:
                    WebCore::EditingStyle::inverseTransformColorIfNeeded(WebCore::Element &)::$_1::operator()((uint64_t)&v47, 61);
                    if ((v27 & 0x8000000000000) != 0)
                    {
                      v37 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFLL);
                      do
                      {
                        v38 = __ldaxr(v37);
                        v39 = v38 - 1;
                      }
                      while (__stlxr(v39, v37));
                      if (!v39)
                      {
                        atomic_store(1u, v37);
                        WTF::fastFree((WTF *)v37, v29);
                      }
                    }
                    goto LABEL_53;
                  }
                }
                WebCore::EditingStyle::inverseTransformColorIfNeeded(WebCore::Element &)::$_1::operator()((uint64_t)&v47, 83);
                if ((v28 & 1) != 0)
                  goto LABEL_53;
                goto LABEL_52;
              }
              v27 = 0;
              v26 = 0;
            }
            else
            {
              v27 = 0;
            }
            LOBYTE(v28) = 1;
            goto LABEL_44;
          }
        }
        v23 = 0;
        v22 = 0;
        LOBYTE(v24) = 1;
        goto LABEL_31;
      }
    }
    v15 = 0;
    v46 = 0;
    LOBYTE(v17) = 1;
    goto LABEL_20;
  }
  ++*(_DWORD *)this;
  *a5 = (uint64_t)this;
}

WTF::StringImpl *WebCore::EditingStyle::inverseTransformColorIfNeeded(WebCore::Element &)::$_1::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringBuilder *v6;
  WTF::String *v7;
  __n128 v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD **v19;
  _DWORD *v20;
  WTF *v21;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  WTF::StringImpl *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  WTF::StringImpl *v35;

  v4 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (v4)
    ++*(_DWORD *)v4;
  WebCore::StyleProperties::getPropertyCSSValue(v4, a2, &v33);
  v9 = (_DWORD *)v33;
  if (!v33 || (v10 = *(unsigned __int16 *)(v33 + 4) | (*(unsigned __int8 *)(v33 + 6) << 16), (v10 & 0x3F800) != 0))
  {
    v34 = 0x1104000000000000;
    goto LABEL_6;
  }
  if ((v10 & 0x3F87F) == 0x18)
  {
    v14 = *(_QWORD *)(v33 + 8);
    v34 = v14;
    if ((v14 & 0x8000000000000) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 + 1, v15));
      v9 = (_DWORD *)v33;
LABEL_6:
      v33 = 0;
      if (!v9)
        goto LABEL_9;
      goto LABEL_7;
    }
  }
  else
  {
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v35, v33, v6, v7, v8);
    WebCore::CSSParser::parseColorWithoutContext((unsigned int **)&v35, 0, (uint64_t *)&v34, v24, v25, v26, v27, v28, v29);
    v30 = v35;
    v35 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v5);
      else
        *(_DWORD *)v30 -= 2;
    }
  }
  v33 = 0;
LABEL_7:
  if (*v9 == 2)
  {
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v5);
    if (!v4)
      goto LABEL_12;
    goto LABEL_10;
  }
  *v9 -= 2;
LABEL_9:
  if (!v4)
    goto LABEL_12;
LABEL_10:
  if (*(_DWORD *)v4 == 1)
  {
    v17 = *(unsigned int *)(v4 + 28);
    if ((_DWORD)v17)
    {
      v18 = 16 * v17;
      v19 = (_DWORD **)(*(_QWORD *)(v4 + 16) + 8);
      do
      {
        v20 = *v19;
        *v19 = 0;
        if (v20)
        {
          if (*v20 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, v5);
          else
            *v20 -= 2;
        }
        v19 += 2;
        v18 -= 16;
      }
      while (v18);
    }
    v21 = *(WTF **)(v4 + 16);
    if ((WTF *)(v4 + 32) != v21 && v21 != 0)
    {
      *(_QWORD *)(v4 + 16) = 0;
      *(_DWORD *)(v4 + 24) = 0;
      WTF::fastFree(v21, v5);
    }
    v23 = *(_QWORD *)(v4 + 8);
    *(_QWORD *)(v4 + 8) = 0;
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    WTF::fastFree((WTF *)v4, v5);
  }
  else
  {
    --*(_DWORD *)v4;
  }
LABEL_12:
  WebCore::FilterOperations::inverseTransformColor(*(WebCore::FilterOperations **)(a1 + 8), (WebCore::Color *)&v34);
  v11 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 8);
  WebCore::Color::callOnUnderlyingType<WebCore::serializationForCSS(WebCore::Color const&)::$_0>(&v35, v34, (uint64_t *)&v34);
  WebCore::MutableStyleProperties::setProperty(v11, a2, (uint64_t)&v35, 0, 0);
  result = v35;
  v35 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  if ((v34 & 0x8000000000000) != 0)
  {
    result = (WTF::StringImpl *)(v34 & 0xFFFFFFFFFFFFLL);
    do
    {
      v31 = __ldaxr((unsigned int *)result);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, (unsigned int *)result));
    if (!v32)
    {
      atomic_store(1u, (unsigned int *)result);
      return (WTF::StringImpl *)WTF::fastFree(result, v12);
    }
  }
  return result;
}

WebCore::StyleChange *WebCore::StyleChange::StyleChange(WebCore::StyleChange *this, WebCore::EditingStyle *a2, const WebCore::Position *a3)
{
  WTF::StringImpl **v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  WebCore *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WebCore::MutableStyleProperties *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringBuilder *v19;
  WTF::String *v20;
  __n128 v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::String *v24;
  __n128 v25;
  WTF::StringImpl *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL4 v32;
  WTF::String *v33;
  __n128 v34;
  WTF::String *v35;
  __n128 v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  WTF::StringImpl *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD **v46;
  _DWORD *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD **v51;
  _DWORD *v52;
  WTF *v53;
  uint64_t v55;
  WTF::StringImpl *v56;
  int v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  unsigned int v63;
  WTF::StringImpl *v64;
  unsigned int v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  unsigned int v68;
  int v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  char *v75;
  int v76;
  WTF *v77;
  WTF::StringBuilder *v78;
  WTF::String *v79;
  __n128 v80;
  _DWORD *v81;
  unsigned int PropertyIndex;
  unsigned __int16 *v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  WTF *v86;
  uint64_t v87;
  _DWORD *v88;
  WTF *v89;
  WTF::StringImpl *v91;
  uint64_t v92;
  _DWORD *v93;
  WTF *v94;
  int v96;
  WTF::String *v97;
  __n128 v98;
  WTF::StringImpl *v99;
  WTF::StringBuilder *v100;
  WTF::String *v101;
  __n128 v102;
  void *v103;
  WTF::StringImpl *v104;
  WTF::String *v105;
  __n128 v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::String *v112;
  __n128 v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::String *v118;
  __n128 v119;
  WTF::StringImpl *v120;
  const WebCore::Document *v121;
  double v122;
  char v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  double *v127;
  double *v128;
  int v129;
  uint64_t v130;
  int *v131;
  int *v132;
  int *v133;
  float v134;
  char v135;
  int v136;
  int v137;
  WTF::StringImpl *v138;
  WTF *v139;
  WTF::StringImpl *v140;
  int v141;
  WTF *v142;
  uint64_t v143;
  WTF *v144;
  unint64_t v145;
  unsigned int v146;
  char v147;
  char v148;
  int v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  _DWORD **v154;
  _DWORD *v155;
  WTF *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  char v162;
  _QWORD *v163;
  WebCore::MutableStyleProperties *v164;
  WTF *v165;
  WTF *v166;
  WTF *v167;
  char v168;
  char v169;
  WTF *v170;
  uint64_t v171;
  _DWORD *v172;
  WTF *v173;
  WTF *v174;
  uint64_t v176;
  _DWORD *v177;
  WTF *v178;
  _DWORD *v180;
  uint64_t v181;
  __int16 v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  WTF::StringImpl *v189;
  uint64_t v190;
  WTF::StringImpl *v191;
  int v192;
  _QWORD *v193;
  uint64_t v194;
  WTF::String *v195;
  __n128 v196;
  uint64_t v197;
  unsigned int v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t v203;
  WTF::String *v204;
  __n128 v205;
  uint64_t v206;
  WTF::StringImpl *v207;
  WTF::StringBuilder *v208;
  WTF::String *v209;
  __n128 v210;
  uint64_t v211;
  WTF::StringImpl *v212;
  WebCore::Node *v213;
  uint64_t v215;
  uint64_t v216;
  _DWORD **v217;
  _DWORD *v218;
  WTF *v219;
  uint64_t v221;
  WTF *v222;
  WTF *v223;
  uint64_t v224;
  WTF::StringImpl *v225;
  WebCore::Editor *v226;
  WebCore::Editor *v227;
  uint64_t v228;
  int v229;
  WTF::StringImpl *v230;
  WTF *v231;
  int v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  WTF::StringImpl *v236;
  void *v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  WTF::StringImpl *v241;
  void *v242;
  float v243;
  unsigned int *v244;
  unsigned int v245;
  unsigned int v246;
  _BOOL4 v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  const WebCore::Position *v253;
  char v254;
  WTF *v255;
  uint64_t v256;
  _BYTE v257[32];
  WebCore::MutableStyleProperties *v258;
  WebCore::Node *v259;
  char v260[8];
  WTF::StringImpl *v261;
  char v262;
  char v263;
  WTF::StringImpl *v264;
  WTF *v265;
  uint64_t v266;
  _BYTE v267[32];
  uint64_t v268;
  WTF::StringImpl *v269;
  unint64_t v270;
  _BYTE v271[32];
  uint64_t v272;
  _QWORD v273[2];

  *((_QWORD *)this + 2) = 0;
  v6 = (WTF::StringImpl **)((char *)this + 16);
  *(_QWORD *)((char *)this + 6) = 0;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  v7 = *(_QWORD *)a3;
  if (!*(_QWORD *)a3)
  {
    v8 = 0;
LABEL_6:
    v9 = 1;
    if (!a2)
      goto LABEL_405;
    goto LABEL_7;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8);
  if (!v8)
    goto LABEL_6;
  v9 = 0;
  *(_DWORD *)(v8 + 24) += 2;
  if (!a2)
    goto LABEL_405;
LABEL_7:
  v10 = *((_QWORD *)a2 + 1);
  if ((!v10 || !*(_DWORD *)(v10 + 28))
    && *((float *)a2 + 5) == *(float *)&WebCore::EditingStyle::NoFontDelta
    && (*((_BYTE *)a2 + 16) & 0x1E) == 0)
  {
    goto LABEL_405;
  }
  if ((v9 & 1) != 0)
    return this;
  v11 = *(_QWORD *)(v8 + 528);
  if (!v11)
    goto LABEL_406;
  if (!v7)
    goto LABEL_406;
  if (!*(_QWORD *)(v11 + 8))
    goto LABEL_406;
  v12 = *((_BYTE *)a3 + 12) & 7;
  if (v12 > 4)
    goto LABEL_406;
  if (((1 << v12) & 0x19) == 0)
  {
    v7 = *(_QWORD *)(v7 + 32);
    if (!v7)
      goto LABEL_406;
  }
  v254 = v9;
  *(_DWORD *)(v7 + 24) += 2;
  v13 = WebCore::styleElementForNode((WebCore *)v7, a2);
  if (v13)
    *((_DWORD *)v13 + 6) += 2;
  v259 = v13;
  v260[0] = 0;
  v262 = 0;
  v263 = 0;
  v14 = *((_QWORD *)a2 + 1);
  if (v14)
  {
    ++*(_DWORD *)v14;
    WebCore::getPropertiesNotIn<WebCore::ComputedStyleExtractor>((uint64_t *)&v258, (const WebCore::StyleProperties *)v14, &v259);
    if (*(_DWORD *)v14 == 1)
    {
      v49 = *(unsigned int *)(v14 + 28);
      if ((_DWORD)v49)
      {
        v50 = 16 * v49;
        v51 = (_DWORD **)(*(_QWORD *)(v14 + 16) + 8);
        do
        {
          v52 = *v51;
          *v51 = 0;
          if (v52)
          {
            if (*v52 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v52, v15);
            else
              *v52 -= 2;
          }
          v51 += 2;
          v50 -= 16;
        }
        while (v50);
      }
      v53 = *(WTF **)(v14 + 16);
      if ((WTF *)(v14 + 32) != v53 && v53 != 0)
      {
        *(_QWORD *)(v14 + 16) = 0;
        *(_DWORD *)(v14 + 24) = 0;
        WTF::fastFree(v53, v15);
      }
      v55 = *(_QWORD *)(v14 + 8);
      *(_QWORD *)(v14 + 8) = 0;
      if (v55)
        (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
      WTF::fastFree((WTF *)v14, v15);
    }
    else
    {
      --*(_DWORD *)v14;
    }
  }
  else
  {
    v16 = (WebCore::MutableStyleProperties *)WTF::fastMalloc((WTF *)0x60);
    *(_QWORD *)v16 = 0x900000001;
    *((_QWORD *)v16 + 1) = 0;
    *((_QWORD *)v16 + 2) = (char *)v16 + 32;
    *((_QWORD *)v16 + 3) = 4;
    v258 = v16;
  }
  v17 = (uint64_t)v258;
  WebCore::StyleProperties::getPropertyCSSValue((uint64_t)v258, 341, &v269);
  WebCore::StyleProperties::getPropertyCSSValue(v17, 255, &v265);
  v22 = v269;
  if (v269)
  {
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)v273, (uint64_t)v269, v19, v20, v21);
    WebCore::MutableStyleProperties::setProperty(v17, 255, (uint64_t)v273, 0, 0);
    v26 = (WTF::StringImpl *)v273[0];
    v273[0] = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v23);
      else
        *(_DWORD *)v26 -= 2;
    }
    WebCore::MutableStyleProperties::removeProperty(v17, (WTF::StringImpl *)0x155, 0, v24, v25);
    *(_DWORD *)v22 += 2;
    v27 = v22;
    if (v265)
    {
      if (*(_DWORD *)v265 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v265, v18);
      else
        *(_DWORD *)v265 -= 2;
      v27 = v22;
    }
  }
  else
  {
    v27 = v265;
    if (!v265)
      goto LABEL_43;
  }
  if (((*((unsigned __int16 *)v27 + 2) | (*((unsigned __int8 *)v27 + 6) << 16)) & 0x3F800) != 0x1D800)
    WebCore::MutableStyleProperties::removeProperty(v17, (WTF::StringImpl *)0xFF, 0, v20, v21);
  if (*(_DWORD *)v27 != 2)
  {
    *(_DWORD *)v27 -= 2;
    if (!v22)
      goto LABEL_43;
LABEL_40:
    if (*(_DWORD *)v22 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v22, v18);
    else
      *(_DWORD *)v22 -= 2;
    goto LABEL_43;
  }
  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v27, v18);
  v22 = v269;
  if (v269)
    goto LABEL_40;
LABEL_43:
  v28 = *(_QWORD *)(v8 + 3056);
  v253 = a3;
  if (!v28)
  {
    v226 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v226, (WebCore::Document *)v8);
    v227 = *(WebCore::Editor **)(v8 + 3056);
    *(_QWORD *)(v8 + 3056) = v226;
    if (v227)
    {
      WebCore::Editor::~Editor(v227, v18);
      if (*(_DWORD *)v228)
      {
        *(_QWORD *)(v228 + 496) = 0;
        *(_OWORD *)(v228 + 464) = 0u;
        *(_OWORD *)(v228 + 480) = 0u;
        *(_OWORD *)(v228 + 432) = 0u;
        *(_OWORD *)(v228 + 448) = 0u;
        *(_OWORD *)(v228 + 400) = 0u;
        *(_OWORD *)(v228 + 416) = 0u;
        *(_OWORD *)(v228 + 368) = 0u;
        *(_OWORD *)(v228 + 384) = 0u;
        *(_OWORD *)(v228 + 336) = 0u;
        *(_OWORD *)(v228 + 352) = 0u;
        *(_OWORD *)(v228 + 304) = 0u;
        *(_OWORD *)(v228 + 320) = 0u;
        *(_OWORD *)(v228 + 272) = 0u;
        *(_OWORD *)(v228 + 288) = 0u;
        *(_OWORD *)(v228 + 240) = 0u;
        *(_OWORD *)(v228 + 256) = 0u;
        *(_OWORD *)(v228 + 208) = 0u;
        *(_OWORD *)(v228 + 224) = 0u;
        *(_OWORD *)(v228 + 176) = 0u;
        *(_OWORD *)(v228 + 192) = 0u;
        *(_OWORD *)(v228 + 144) = 0u;
        *(_OWORD *)(v228 + 160) = 0u;
        *(_OWORD *)(v228 + 112) = 0u;
        *(_OWORD *)(v228 + 128) = 0u;
        *(_OWORD *)(v228 + 80) = 0u;
        *(_OWORD *)(v228 + 96) = 0u;
        *(_OWORD *)(v228 + 48) = 0u;
        *(_OWORD *)(v228 + 64) = 0u;
        *(_OWORD *)(v228 + 16) = 0u;
        *(_OWORD *)(v228 + 32) = 0u;
        *(_OWORD *)v228 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v228, v18);
      }
    }
    v28 = *(_QWORD *)(v8 + 3056);
  }
  v252 = *(unsigned __int8 *)(v28 + 90);
  if (*(_BYTE *)(v28 + 90))
    goto LABEL_227;
  v29 = (uint64_t)v258;
  v32 = v259
     && (v30 = (*(uint64_t (**)(WebCore::Node *, char *))(*(_QWORD *)v259 + 264))(v259, v260)) != 0
     && (v31 = *(_QWORD *)(*(_QWORD *)(v30 + 32) + 216), *(_DWORD *)(v31 + 4) == 1)
     && *(_QWORD *)(v31 + 8) == WebCore::WebKitFontFamilyNames::monospaceFamily;
  if (WebCore::identifierForStyleProperty<WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WebCore::MutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::MutableStyleProperties>>>(v29, 28) == 91)
  {
    WebCore::MutableStyleProperties::removeProperty(v29, (WTF::StringImpl *)0x1C, 0, v33, v34);
    *((_BYTE *)this + 8) = 1;
  }
  if (WebCore::identifierForStyleProperty<WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WebCore::MutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::MutableStyleProperties>>>(v29, 16) == 47)
  {
    WebCore::MutableStyleProperties::removeProperty(v29, (WTF::StringImpl *)0x10, 0, v35, v36);
    *((_BYTE *)this + 9) = 1;
  }
  WebCore::StyleProperties::getPropertyCSSValue(v29, 255, &v272);
  v38 = v272;
  if (!v272)
  {
    v272 = 0;
    goto LABEL_176;
  }
  v39 = (*(unsigned __int16 *)(v272 + 4) | (*(unsigned __int8 *)(v272 + 6) << 16)) & 0x3F800;
  v272 = 0;
  if (v39 != 120832)
    goto LABEL_173;
  v269 = (WTF::StringImpl *)v271;
  v270 = 4;
  v40 = *(unsigned int *)(v38 + 8);
  v248 = v29;
  if (v40 >= 5)
  {
    if (v40 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x195AB9904);
    }
    v42 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v40));
    LODWORD(v270) = v40;
    v269 = v42;
    LODWORD(v40) = *(_DWORD *)(v38 + 8);
    v41 = HIDWORD(v270);
  }
  else
  {
    v41 = 0;
    v42 = (WTF::StringImpl *)v271;
  }
  if ((_DWORD)v40)
  {
    v43 = 0;
    v44 = 0;
    v45 = *(_QWORD *)(v38 + 48);
    do
    {
      if (v43 > 3)
      {
        if (v40 <= v43)
        {
          __break(0xC471u);
          JUMPOUT(0x195AB97D8);
        }
        v46 = (_DWORD **)(v45 + 8 * (v44 - 4));
      }
      else
      {
        v46 = (_DWORD **)(v38 + 16 + 8 * v44);
      }
      v47 = *v46;
      *v47 += 2;
      *((_QWORD *)v42 + v41) = v47;
      v48 = v41 + 1;
      HIDWORD(v270) = v41 + 1;
      v43 = v44 + 1;
      v44 = (v44 + 1);
      ++v41;
    }
    while ((_DWORD)v40 != v43);
  }
  else
  {
    v48 = v41;
  }
  v247 = v32;
  v56 = (WTF::StringImpl *)((char *)v42 + 8 * v48);
  v250 = v7;
  v249 = v38;
  if (v48)
  {
    v57 = 0;
    v58 = v42;
    v59 = (WTF::StringImpl *)((char *)v42 + 8 * v48);
    v60 = v59;
    while (1)
    {
      v61 = *(_QWORD *)v42;
      if (((*(unsigned __int16 *)(*(_QWORD *)v42 + 4) | (*(unsigned __int8 *)(*(_QWORD *)v42 + 6) << 16)) & 0x3F800) != 0
        || (*(_WORD *)(*(_QWORD *)v42 + 4) & 0x7F) != 0x50
        || *(_WORD *)(v61 + 8) != 495)
      {
        goto LABEL_101;
      }
      v62 = v42;
      if (v60 == (WTF::StringImpl *)((char *)v269 + 8 * HIDWORD(v270)))
        goto LABEL_96;
      if (v42 == v59)
        break;
      memmove(v60, v59, v58 - v59);
      v60 = (WTF::StringImpl *)((char *)v60 + v58 - v59);
      v61 = *(_QWORD *)v42;
      *(_QWORD *)v42 = 0;
      v59 = (WTF::StringImpl *)((char *)v42 + 8);
      if (v61)
        goto LABEL_97;
LABEL_100:
      ++v57;
LABEL_101:
      v42 = (WTF::StringImpl *)((char *)v42 + 8);
      v58 = (WTF::StringImpl *)((char *)v58 + 8);
      if (v42 >= v56)
      {
        v42 = v269;
        v63 = HIDWORD(v270);
        v56 = v60;
        v38 = v249;
        goto LABEL_105;
      }
    }
    v62 = v60;
LABEL_96:
    *(_QWORD *)v42 = 0;
    v59 = (WTF::StringImpl *)((char *)v42 + 8);
    v60 = v62;
LABEL_97:
    if (*(_DWORD *)v61 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v61, v62);
    else
      *(_DWORD *)v61 -= 2;
    goto LABEL_100;
  }
  v63 = 0;
  v57 = 0;
  v59 = v42;
LABEL_105:
  v64 = (WTF::StringImpl *)((char *)v42 + 8 * v63);
  if (v59 != v64)
  {
    memmove(v56, v59, v64 - v59);
    v63 = HIDWORD(v270);
  }
  v65 = v63 - v57;
  HIDWORD(v270) = v63 - v57;
  if (v57)
    *((_BYTE *)this + 10) = 1;
  v66 = v269;
  v67 = (WTF::StringImpl *)((char *)v269 + 8 * v65);
  if (v63 == v57)
  {
    v68 = 0;
    v69 = 0;
    v70 = (WTF::StringImpl *)((char *)v269 + 8 * v65);
    goto LABEL_128;
  }
  v69 = 0;
  v71 = v269;
  v70 = (WTF::StringImpl *)((char *)v269 + 8 * v65);
  v72 = v70;
  do
  {
    v73 = *(_QWORD *)v66;
    if (((*(unsigned __int16 *)(*(_QWORD *)v66 + 4) | (*(unsigned __int8 *)(*(_QWORD *)v66 + 6) << 16)) & 0x3F800) == 0
      && (*(_WORD *)(*(_QWORD *)v66 + 4) & 0x7F) == 0x50
      && *(_WORD *)(v73 + 8) == 474)
    {
      v74 = v66;
      if (v72 != (WTF::StringImpl *)((char *)v269 + 8 * HIDWORD(v270)))
      {
        if (v66 != v70)
        {
          memmove(v72, v70, v71 - v70);
          v72 = (WTF::StringImpl *)((char *)v72 + v71 - v70);
          v73 = *(_QWORD *)v66;
          *(_QWORD *)v66 = 0;
          v70 = (WTF::StringImpl *)((char *)v66 + 8);
          if (!v73)
          {
LABEL_124:
            ++v69;
            goto LABEL_125;
          }
LABEL_121:
          if (*(_DWORD *)v73 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v73, v74);
          else
            *(_DWORD *)v73 -= 2;
          goto LABEL_124;
        }
        v74 = v72;
      }
      *(_QWORD *)v66 = 0;
      v70 = (WTF::StringImpl *)((char *)v66 + 8);
      v72 = v74;
      goto LABEL_121;
    }
LABEL_125:
    v66 = (WTF::StringImpl *)((char *)v66 + 8);
    v71 = (WTF::StringImpl *)((char *)v71 + 8);
  }
  while (v66 < v67);
  v66 = v269;
  v68 = HIDWORD(v270);
  v67 = v72;
  v38 = v249;
LABEL_128:
  v75 = (char *)v66 + 8 * v68;
  if (v70 != (WTF::StringImpl *)v75)
  {
    memmove(v67, v70, v75 - (char *)v70);
    v68 = HIDWORD(v270);
  }
  v76 = v68 - v69;
  if (v69)
    *((_BYTE *)this + 11) = 1;
  v265 = (WTF *)v267;
  LODWORD(v266) = 4;
  v77 = v269;
  v29 = v248;
  if (v269 == (WTF::StringImpl *)v271)
  {
    memcpy(v267, v271, 8 * (v68 - v69));
  }
  else
  {
    v269 = (WTF::StringImpl *)v271;
    v265 = v77;
    v232 = v270;
    LODWORD(v270) = 4;
    LODWORD(v266) = v232;
  }
  HIDWORD(v270) = 0;
  HIDWORD(v266) = v76;
  WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v265, &v268);
  v81 = (_DWORD *)v268;
  if (*(_DWORD *)(v268 + 8))
  {
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)v273, v268, v78, v79, v80);
    PropertyIndex = WebCore::StyleProperties::findPropertyIndex(v248, 255);
    if (PropertyIndex == -1)
    {
      v84 = 0;
    }
    else
    {
      if ((*(_BYTE *)(v248 + 4) & 8) != 0)
      {
        if (*(_DWORD *)(v248 + 28) <= PropertyIndex)
        {
          __break(0xC471u);
          JUMPOUT(0x195AB990CLL);
        }
        v83 = (unsigned __int16 *)(*(_QWORD *)(v248 + 16) + 16 * PropertyIndex);
      }
      else
      {
        v83 = (unsigned __int16 *)(v248 + 2 * PropertyIndex + 8);
      }
      v84 = (*v83 >> 13) & 1;
    }
    WebCore::MutableStyleProperties::setProperty(v248, 255, (uint64_t)v273, v84, 0);
    v85 = (WTF::StringImpl *)v273[0];
    v273[0] = 0;
    if (v85)
    {
      if (*(_DWORD *)v85 == 2)
        WTF::StringImpl::destroy(v85, v37);
      else
        *(_DWORD *)v85 -= 2;
    }
  }
  else
  {
    WebCore::MutableStyleProperties::removeProperty(v248, (WTF::StringImpl *)0xFF, 0, v79, v80);
  }
  if (*v81 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v81, v37);
  else
    *v81 -= 2;
  v32 = v247;
  if (HIDWORD(v266))
  {
    v86 = v265;
    v87 = 8 * HIDWORD(v266);
    do
    {
      v88 = *(_DWORD **)v86;
      *(_QWORD *)v86 = 0;
      if (v88)
      {
        if (*v88 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v88, v37);
        else
          *v88 -= 2;
      }
      v86 = (WTF *)((char *)v86 + 8);
      v87 -= 8;
    }
    while (v87);
  }
  v89 = v265;
  if (v267 != (_BYTE *)v265 && v265 != 0)
  {
    v265 = 0;
    LODWORD(v266) = 0;
    WTF::fastFree(v89, v37);
  }
  v7 = v250;
  if (HIDWORD(v270))
  {
    v91 = v269;
    v92 = 8 * HIDWORD(v270);
    do
    {
      v93 = *(_DWORD **)v91;
      *(_QWORD *)v91 = 0;
      if (v93)
      {
        if (*v93 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v93, v37);
        else
          *v93 -= 2;
      }
      v91 = (WTF::StringImpl *)((char *)v91 + 8);
      v92 -= 8;
    }
    while (v92);
  }
  v94 = v269;
  if (v271 != (_BYTE *)v269 && v269 != 0)
  {
    v269 = 0;
    LODWORD(v270) = 0;
    WTF::fastFree(v94, v37);
  }
LABEL_173:
  if (*(_DWORD *)v38 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v38, v37);
  else
    *(_DWORD *)v38 -= 2;
LABEL_176:
  v96 = WebCore::identifierForStyleProperty<WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WebCore::MutableStyleProperties>,WTF::DefaultRefDerefTraits<WebCore::MutableStyleProperties>>>(v29, 288);
  if (v96 == 251)
  {
    WebCore::MutableStyleProperties::removeProperty(v29, (WTF::StringImpl *)0x120, 0, v97, v98);
    *((_BYTE *)this + 13) = 1;
  }
  else if (v96 == 250)
  {
    WebCore::MutableStyleProperties::removeProperty(v29, (WTF::StringImpl *)0x120, 0, v97, v98);
    *((_BYTE *)this + 12) = 1;
  }
  WebCore::StyleProperties::getPropertyCSSValue(v29, 5, &v269);
  if (!v269)
    goto LABEL_196;
  if (*(_DWORD *)v269 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v269, v99);
  else
    *(_DWORD *)v269 -= 2;
  WebCore::textColorFromStyle<WebCore::MutableStyleProperties>(&v268, v29);
  if ((v268 & 0x8000000000000) != 0)
  {
    v244 = (unsigned int *)(v268 & 0xFFFFFFFFFFFFLL);
    v102.n128_u32[0] = *(_DWORD *)((v268 & 0xFFFFFFFFFFFFLL) + 0x10);
    if (v102.n128_f32[0] == 1.0)
      goto LABEL_186;
    goto LABEL_500;
  }
  if ((_BYTE)v268 != 0xFF)
    goto LABEL_196;
LABEL_186:
  WebCore::serializationForHTML((WebCore *)&v268, &v264);
  v107 = v264;
  v264 = 0;
  if (v107)
  {
    v273[0] = v107;
    if ((*((_BYTE *)v107 + 16) & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase();
      v108 = (WTF::StringImpl *)v273[0];
      v107 = v269;
      v269 = 0;
      v273[0] = 0;
      if (v108)
      {
        if (*(_DWORD *)v108 == 2)
          WTF::StringImpl::destroy(v108, v104);
        else
          *(_DWORD *)v108 -= 2;
      }
    }
  }
  v109 = *v6;
  *v6 = v107;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
      WTF::StringImpl::destroy(v109, v104);
    else
      *(_DWORD *)v109 -= 2;
  }
  v110 = v264;
  v264 = 0;
  if (v110)
  {
    if (*(_DWORD *)v110 == 2)
      WTF::StringImpl::destroy(v110, v104);
    else
      *(_DWORD *)v110 -= 2;
  }
  WebCore::MutableStyleProperties::removeProperty(v29, (WTF::StringImpl *)5, 0, v105, v106);
  if ((v268 & 0x8000000000000) != 0)
  {
    v244 = (unsigned int *)(v268 & 0xFFFFFFFFFFFFLL);
    do
    {
LABEL_500:
      v245 = __ldaxr(v244);
      v246 = v245 - 1;
    }
    while (__stlxr(v246, v244));
    if (!v246)
    {
      atomic_store(1u, v244);
      WTF::fastFree((WTF *)v244, v103);
    }
  }
LABEL_196:
  WebCore::StyleProperties::serializeLonghandValue(v29, 8, v100, v101, (WebCore *)&v268, v102);
  if (v268)
  {
    WTF::StringImpl::replace();
    v114 = v269;
    if (v269)
    {
      v273[0] = v269;
      if ((*((_BYTE *)v269 + 16) & 0x10) == 0)
      {
        WTF::AtomStringImpl::addSlowCase();
        v115 = (WTF::StringImpl *)v273[0];
        v114 = v269;
        v269 = 0;
        v273[0] = 0;
        if (v115)
        {
          if (*(_DWORD *)v115 == 2)
            WTF::StringImpl::destroy(v115, v111);
          else
            *(_DWORD *)v115 -= 2;
        }
      }
    }
  }
  else
  {
    v114 = 0;
  }
  v116 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v114;
  if (v116)
  {
    if (*(_DWORD *)v116 == 2)
      WTF::StringImpl::destroy(v116, v111);
    else
      *(_DWORD *)v116 -= 2;
  }
  v117 = (WTF::StringImpl *)v268;
  v268 = 0;
  if (v117)
  {
    if (*(_DWORD *)v117 == 2)
      WTF::StringImpl::destroy(v117, v111);
    else
      *(_DWORD *)v117 -= 2;
  }
  WebCore::MutableStyleProperties::removeProperty(v29, (WTF::StringImpl *)8, 0, v112, v113);
  WebCore::StyleProperties::getPropertyCSSValue(v29, 13, &v269);
  v120 = v269;
  if (!v269)
    goto LABEL_227;
  if (((*((unsigned __int16 *)v269 + 2) | (*((unsigned __int8 *)v269 + 6) << 16)) & 0x3F800) != 0)
    goto LABEL_208;
  if ((((*((_WORD *)v269 + 2) & 0x7E) - 6) & 0xFEu) > 5)
  {
    if ((*((_WORD *)v269 + 2) & 0x7F) != 0x50)
      goto LABEL_209;
    v188 = *((unsigned __int16 *)v269 + 4);
    if ((v188 - 95) > 6)
      goto LABEL_209;
    v126 = (v188 - 94);
    goto LABEL_349;
  }
  v122 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal((uint64_t)v269, 6u));
  if (!v123)
    v122 = 0.0;
  v124 = v32;
  if (v122 >= 2147483650.0)
  {
    v125 = 0x7FFFFFFFLL;
  }
  else if (v122 <= -2147483650.0)
  {
    v125 = 0x80000000;
  }
  else
  {
    v125 = (int)v122;
  }
  v126 = WebCore::Style::legacyFontSizeForPixelSize((WebCore::Style *)v125, v124, v8, v121);
  v127 = *(double **)(v8 + 680);
  v128 = v127 + 42;
  if (v124)
    v128 = v127 + 41;
  v129 = (int)*v128;
  v130 = (v129 - 9);
  if (v130 > 7)
  {
    v134 = v127[63];
    v243 = WebCore::Style::fontSizeFactors[v126];
    if (v134 < 1.0)
      v134 = 1.0;
    if ((float)(v243 * (float)v129) >= v134)
      v134 = v243 * (float)v129;
    if (!(_DWORD)v126)
      goto LABEL_209;
LABEL_224:
    if (v134 != (float)(int)v125)
      goto LABEL_209;
LABEL_349:
    WTF::AtomString::number((WTF::AtomString *)v126);
    v190 = v273[0];
    v273[0] = 0;
    v191 = (WTF::StringImpl *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v190;
    if (v191)
    {
      v192 = *(_DWORD *)v191 - 2;
      if (*(_DWORD *)v191 == 2)
      {
        WTF::StringImpl::destroy(v191, v189);
        v191 = (WTF::StringImpl *)v273[0];
        v273[0] = 0;
        if (!v191)
          goto LABEL_208;
        v192 = *(_DWORD *)v191 - 2;
        if (*(_DWORD *)v191 == 2)
        {
          WTF::StringImpl::destroy(v191, v225);
          goto LABEL_208;
        }
      }
      *(_DWORD *)v191 = v192;
    }
LABEL_208:
    WebCore::MutableStyleProperties::removeProperty(v29, (WTF::StringImpl *)0xD, 0, v118, v119);
    goto LABEL_209;
  }
  v131 = (int *)((char *)&WebCore::Style::quirksFontSizeTable + 32 * v130 + 4 * (int)v126);
  v132 = &WebCore::Style::strictFontSizeTable[8 * v130 + (int)v126];
  if (*(_BYTE *)(v8 + 3384) == 2)
    v133 = v131;
  else
    v133 = v132;
  v134 = (float)*v133;
  if ((_DWORD)v126)
    goto LABEL_224;
LABEL_209:
  if (*(_DWORD *)v120 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v120, v18);
  else
    *(_DWORD *)v120 -= 2;
LABEL_227:
  v135 = *((_BYTE *)a2 + 16);
  v136 = v135 & 6;
  v137 = v135 & 0x18;
  if (v136 == 2 || v137 == 8)
  {
    WebCore::ComputedStyleExtractor::propertyValue((uint64_t)&v259, 341, 1, 0, v273);
    v138 = (WTF::StringImpl *)v273[0];
    v251 = v7;
    if (v273[0]
      && ((*(unsigned __int16 *)(v273[0] + 4) | (*(unsigned __int8 *)(v273[0] + 6) << 16)) & 0x3F800) == 0x1D800)
    {
      v139 = (WTF *)v271;
      v269 = (WTF::StringImpl *)v271;
      v270 = 4;
LABEL_238:
      if (((*((unsigned __int16 *)v138 + 2) | (*((unsigned __int8 *)v138 + 6) << 16)) & 0x3F800) == 0x1D800)
      {
        v265 = (WTF *)v267;
        v266 = 4;
        v143 = *((unsigned int *)v138 + 2);
        if (v143 >= 5)
        {
          if (v143 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x195AB98FCLL);
          }
          v144 = (WTF *)WTF::fastMalloc((WTF *)(8 * v143));
          LODWORD(v266) = v143;
          v265 = v144;
          LODWORD(v143) = *((_DWORD *)v138 + 2);
          v139 = (WTF *)v271;
        }
        else
        {
          v144 = (WTF *)v267;
        }
        if ((_DWORD)v143)
        {
          v150 = 0;
          v151 = 0;
          v152 = *((_QWORD *)v138 + 6);
          v153 = HIDWORD(v266);
          do
          {
            if (v150 > 3)
            {
              if (v143 <= v150)
                goto LABEL_522;
              v154 = (_DWORD **)(v152 + 8 * (v151 - 4));
            }
            else
            {
              v154 = (_DWORD **)((char *)v138 + 8 * v151 + 16);
            }
            v155 = *v154;
            *v155 += 2;
            *((_QWORD *)v144 + v153++) = v155;
            HIDWORD(v266) = v153;
            v150 = v151 + 1;
            v151 = (v151 + 1);
          }
          while ((_DWORD)v143 != v150);
        }
        v156 = v269;
        if (HIDWORD(v270))
        {
          WTF::VectorTypeOperations<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>>::destruct(v269, (WTF::StringImpl *)((char *)v269 + 8 * HIDWORD(v270)));
          v139 = (WTF *)v271;
          v156 = v269;
        }
        if (v156 != (WTF *)v271)
        {
          if (v156)
          {
            v269 = 0;
            LODWORD(v270) = 0;
            WTF::fastFree(v156, v18);
          }
          v139 = (WTF *)v271;
          v269 = (WTF::StringImpl *)v271;
        }
        v142 = v265;
        if (v265 == (WTF *)v267)
        {
          v145 = HIDWORD(v266);
          memcpy(v271, v267, 8 * HIDWORD(v266));
          v139 = (WTF *)v271;
          v149 = v266;
          v142 = (WTF *)v271;
        }
        else
        {
          v269 = v265;
          v149 = v266;
          v145 = HIDWORD(v266);
        }
        v146 = v145;
        v270 = __PAIR64__(v145, v149);
        if ((_DWORD)v145)
        {
          v157 = 0;
          while (1)
          {
            v158 = *((_QWORD *)v142 + v157);
            if (((*(unsigned __int16 *)(v158 + 4) | (*(unsigned __int8 *)(v158 + 6) << 16)) & 0x3F800) == 0
              && (*(_WORD *)(v158 + 4) & 0x7F) == 0x50
              && *(_WORD *)(v158 + 8) == 495)
            {
              break;
            }
            if (v145 == ++v157)
            {
              v147 = 0;
              goto LABEL_273;
            }
          }
          v147 = 1;
LABEL_273:
          v159 = 0;
          while (1)
          {
            v160 = *((_QWORD *)v142 + v159);
            if (((*(unsigned __int16 *)(v160 + 4) | (*(unsigned __int8 *)(v160 + 6) << 16)) & 0x3F800) == 0
              && (*(_WORD *)(v160 + 4) & 0x7F) == 0x50
              && *(_WORD *)(v160 + 8) == 474)
            {
              break;
            }
            if (v145 == ++v159)
              goto LABEL_281;
          }
          v148 = 1;
        }
        else
        {
          v145 = 0;
          v147 = 0;
LABEL_281:
          v148 = 0;
        }
      }
      else
      {
        v145 = 0;
        v146 = 0;
        v147 = 0;
        v148 = 0;
        v149 = 4;
        v142 = (WTF *)v271;
      }
      goto LABEL_282;
    }
    WebCore::ComputedStyleExtractor::propertyValue((uint64_t)&v259, 255, 1, 0, &v269);
    v138 = v269;
    v269 = 0;
    v140 = (WTF::StringImpl *)v273[0];
    v273[0] = v138;
    if (v140)
    {
      v141 = *(_DWORD *)v140 - 2;
      if (*(_DWORD *)v140 != 2)
        goto LABEL_234;
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v140, v18);
      v140 = v269;
      v269 = 0;
      if (v140)
      {
        v141 = *(_DWORD *)v140 - 2;
        if (*(_DWORD *)v140 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v140, v18);
        else
LABEL_234:
          *(_DWORD *)v140 = v141;
      }
      v138 = (WTF::StringImpl *)v273[0];
    }
    v142 = (WTF *)v271;
    v269 = (WTF::StringImpl *)v271;
    v270 = 4;
    if (v138)
    {
      v139 = (WTF *)v271;
      goto LABEL_238;
    }
    v145 = 0;
    v146 = 0;
    v147 = 0;
    v148 = 0;
    v149 = 4;
    v139 = (WTF *)v271;
LABEL_282:
    if (v252)
    {
      if (v136 != 2)
        v147 = 1;
      if ((v147 & 1) == 0)
      {
        WebCore::staticCSSValuePool[5068] += 2;
        if (v146 == v149)
        {
          v233 = v145 + (v145 >> 2);
          if (v233 >= 0x10)
            v234 = v233 + 1;
          else
            v234 = 16;
          if (v234 <= v145 + 1)
            v235 = v145 + 1;
          else
            v235 = v234;
          if (v235 < 5)
          {
            v236 = (WTF::StringImpl *)v271;
            v269 = (WTF::StringImpl *)v271;
            LODWORD(v270) = 4;
          }
          else
          {
            if (v235 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x195AB9914);
            }
            v236 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v235));
            LODWORD(v270) = v235;
            v269 = v236;
          }
          memcpy(v236, v142, 8 * v145);
          if (v271 != (_BYTE *)v142 && v142)
          {
            if (v269 == v142)
            {
              v269 = 0;
              LODWORD(v270) = 0;
            }
            WTF::fastFree(v142, v237);
          }
          v146 = HIDWORD(v270);
          v142 = v269;
          v161 = (_QWORD *)((char *)v269 + 8 * HIDWORD(v270));
        }
        else
        {
          v161 = (_QWORD *)((char *)v142 + 8 * v145);
        }
        ++v146;
        *v161 = &WebCore::staticCSSValuePool[5068];
        HIDWORD(v270) = v146;
      }
      if (v137 == 8)
        v162 = v148;
      else
        v162 = 1;
      if ((v162 & 1) == 0)
      {
        WebCore::staticCSSValuePool[4984] += 2;
        if (v146 == (_DWORD)v270)
        {
          v238 = v146 + ((unint64_t)v146 >> 2);
          if (v238 >= 0x10)
            v239 = v238 + 1;
          else
            v239 = 16;
          if (v239 <= (unint64_t)v146 + 1)
            v240 = v146 + 1;
          else
            v240 = v239;
          if (v240 < 5)
          {
            v241 = (WTF::StringImpl *)v271;
            v269 = (WTF::StringImpl *)v271;
            LODWORD(v270) = 4;
          }
          else
          {
            if (v240 >> 29)
            {
LABEL_522:
              __break(0xC471u);
              JUMPOUT(0x195AB9780);
            }
            v241 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v240));
            LODWORD(v270) = v240;
            v269 = v241;
          }
          memcpy(v241, v142, 8 * v146);
          if (v271 != (_BYTE *)v142 && v142)
          {
            if (v269 == v142)
            {
              v269 = 0;
              LODWORD(v270) = 0;
            }
            WTF::fastFree(v142, v242);
          }
          v146 = HIDWORD(v270);
          v163 = (_QWORD *)((char *)v269 + 8 * HIDWORD(v270));
        }
        else
        {
          v163 = (_QWORD *)((char *)v142 + 8 * v146);
        }
        ++v146;
        *v163 = &WebCore::staticCSSValuePool[4984];
        HIDWORD(v270) = v146;
      }
      v164 = v258;
      v255 = (WTF *)v257;
      v256 = 4;
      v165 = v269;
      if (v269 == (WTF::StringImpl *)v271)
      {
        memcpy(v257, v271, 8 * v146);
      }
      else
      {
        v269 = (WTF::StringImpl *)v271;
        v255 = v165;
        v229 = v270;
        LODWORD(v270) = 4;
        LODWORD(v256) = v229;
      }
      HIDWORD(v270) = 0;
      HIDWORD(v256) = v146;
      WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v255, &v272);
      v166 = (WTF *)v272;
      v272 = 0;
      v265 = v166;
      WebCore::MutableStyleProperties::setProperty(v164, 255, (_DWORD **)&v265, 0);
      v167 = v265;
      v265 = 0;
      v139 = (WTF *)v271;
      if (v167)
      {
        if (*(_DWORD *)v167 == 2)
        {
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v167, v18);
          v139 = (WTF *)v271;
        }
        else
        {
          *(_DWORD *)v167 -= 2;
        }
      }
      if (HIDWORD(v256))
      {
        v170 = v255;
        v171 = 8 * HIDWORD(v256);
        do
        {
          v172 = *(_DWORD **)v170;
          *(_QWORD *)v170 = 0;
          if (v172)
          {
            if (*v172 == 2)
            {
              v173 = v139;
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v172, v18);
              v139 = v173;
            }
            else
            {
              *v172 -= 2;
            }
          }
          v170 = (WTF *)((char *)v170 + 8);
          v171 -= 8;
        }
        while (v171);
      }
      v174 = v255;
      if (v257 != (_BYTE *)v255 && v255 != 0)
      {
        v255 = 0;
        LODWORD(v256) = 0;
        v231 = v139;
        WTF::fastFree(v174, v18);
        v139 = v231;
      }
      v146 = HIDWORD(v270);
      v142 = v269;
    }
    else
    {
      v168 = v147 ^ 1;
      if (v136 != 2)
        v168 = 0;
      *((_BYTE *)this + 10) = v168;
      v169 = v148 ^ 1;
      if (v137 != 8)
        v169 = 0;
      *((_BYTE *)this + 11) = v169;
    }
    if (v146)
    {
      v176 = 8 * v146;
      v7 = v251;
      do
      {
        v177 = *(_DWORD **)v142;
        *(_QWORD *)v142 = 0;
        if (v177)
        {
          if (*v177 == 2)
          {
            v178 = v139;
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v177, v18);
            v139 = v178;
          }
          else
          {
            *v177 -= 2;
          }
        }
        v142 = (WTF *)((char *)v142 + 8);
        v176 -= 8;
      }
      while (v176);
      v142 = v269;
    }
    else
    {
      v7 = v251;
    }
    if (v139 != v142 && v142 != 0)
    {
      v269 = 0;
      LODWORD(v270) = 0;
      WTF::fastFree(v142, v18);
    }
    v180 = (_DWORD *)v273[0];
    v273[0] = 0;
    if (v180)
    {
      if (*v180 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v180, v18);
      else
        *v180 -= 2;
    }
  }
  v181 = *(_QWORD *)v253;
  if (!*(_QWORD *)v253)
    goto LABEL_382;
  *(_DWORD *)(v181 + 24) += 2;
  v182 = *(_WORD *)(v181 + 28);
  if ((v182 & 2) == 0
    || (v183 = *(_QWORD *)(v181 + 32)) == 0
    || (*(_WORD *)(v183 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v183 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::spanTag + 24))
  {
LABEL_364:
    if ((v182 & 0x10) == 0
      || *(_QWORD *)(*(_QWORD *)(v181 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::spanTag + 24))
    {
      goto LABEL_380;
    }
    v197 = *(_QWORD *)(v181 + 104);
    if (v197)
    {
      v198 = *(_DWORD *)(v197 + 4);
      if ((v198 & 1) != 0)
      {
        v199 = *(_QWORD *)(v197 + 40);
        LODWORD(v200) = *(_DWORD *)(v197 + 52);
        if ((_DWORD)v200)
        {
LABEL_369:
          v200 = v200;
          v201 = (_QWORD *)(v199 + 8);
          while (1)
          {
            v202 = *(v201 - 1);
            if (v202 == WebCore::HTMLNames::classAttr
              || *(_QWORD *)(v202 + 24) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 24)
              && *(_QWORD *)(v202 + 32) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 32))
            {
              break;
            }
            v201 += 2;
            if (!--v200)
            {
              v201 = (_QWORD *)MEMORY[0x1E0CBF2F8];
              break;
            }
          }
LABEL_378:
          if (MEMORY[0x19AEA53F4](*v201, "Apple-tab-span", 14))
            goto LABEL_379;
          goto LABEL_380;
        }
      }
      else
      {
        v199 = v197 + 32;
        LODWORD(v200) = v198 >> 5;
        if ((_DWORD)v200)
          goto LABEL_369;
      }
    }
    v201 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    goto LABEL_378;
  }
  v184 = *(_QWORD *)(v183 + 104);
  if (v184
    && ((v185 = *(_DWORD *)(v184 + 4), (v185 & 1) != 0)
      ? (v186 = *(_QWORD *)(v184 + 40), LODWORD(v187) = *(_DWORD *)(v184 + 52))
      : (v186 = v184 + 32, LODWORD(v187) = v185 >> 5),
        (_DWORD)v187))
  {
    v187 = v187;
    v193 = (_QWORD *)(v186 + 8);
    while (1)
    {
      v194 = *(v193 - 1);
      if (v194 == WebCore::HTMLNames::classAttr
        || *(_QWORD *)(v194 + 24) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 24)
        && *(_QWORD *)(v194 + 32) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 32))
      {
        break;
      }
      v193 += 2;
      if (!--v187)
      {
        v193 = (_QWORD *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v193 = (_QWORD *)MEMORY[0x1E0CBF2F8];
  }
  if ((MEMORY[0x19AEA53F4](*v193, "Apple-tab-span", 14) & 1) == 0)
  {
    v182 = *(_WORD *)(v181 + 28);
    goto LABEL_364;
  }
LABEL_379:
  v203 = (uint64_t)v258;
  WebCore::MutableStyleProperties::removeProperty((uint64_t)v258, (WTF::StringImpl *)0x126, 0, v195, v196);
  WebCore::MutableStyleProperties::removeProperty(v203, (WTF::StringImpl *)0x10E, 0, v204, v205);
LABEL_380:
  if (*(_DWORD *)(v181 + 24) == 2)
  {
    if ((*(_WORD *)(v181 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v181, v18);
  }
  else
  {
    *(_DWORD *)(v181 + 24) -= 2;
  }
LABEL_382:
  v206 = (uint64_t)v258;
  WebCore::StyleProperties::getPropertyCSSValue((uint64_t)v258, 285, &v269);
  v207 = v269;
  if (v269)
  {
    WebCore::StyleProperties::getPropertyCSSValue(*((_QWORD *)a2 + 1), 6, &v265);
    if (v265)
    {
      if (*(_DWORD *)v265 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v265, a2);
      else
        *(_DWORD *)v265 -= 2;
      if (*(_DWORD *)v207 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v207, a2);
      else
        *(_DWORD *)v207 -= 2;
    }
    else
    {
      if (*(_DWORD *)v207 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v207, a2);
      else
        *(_DWORD *)v207 -= 2;
      WebCore::StyleProperties::serializeLonghandValue(*((_QWORD *)a2 + 1), 6, v208, v209, (WebCore *)&v269, v210);
      WebCore::MutableStyleProperties::setProperty(v206, 6, (uint64_t)&v269, 0, 0);
      v230 = v269;
      v269 = 0;
      if (v230)
      {
        if (*(_DWORD *)v230 == 2)
          WTF::StringImpl::destroy(v230, a2);
        else
          *(_DWORD *)v230 -= 2;
      }
    }
  }
  v9 = v254;
  if (!*(_DWORD *)(v206 + 28))
  {
    if (*(_DWORD *)v206 != 1)
    {
      --*(_DWORD *)v206;
      goto LABEL_396;
    }
    v223 = *(WTF **)(v206 + 16);
    if ((WTF *)(v206 + 32) != v223 && v223)
    {
      *(_QWORD *)(v206 + 16) = 0;
      *(_DWORD *)(v206 + 24) = 0;
      WTF::fastFree(v223, a2);
    }
    v224 = *(_QWORD *)(v206 + 8);
    *(_QWORD *)(v206 + 8) = 0;
    if (v224)
      (*(void (**)(uint64_t))(*(_QWORD *)v224 + 8))(v224);
    v222 = (WTF *)v206;
    goto LABEL_439;
  }
  v211 = *(_QWORD *)this;
  *(_QWORD *)this = v206;
  if (v211)
  {
    if (*(_DWORD *)v211 != 1)
    {
      --*(_DWORD *)v211;
      goto LABEL_396;
    }
    v215 = *(unsigned int *)(v211 + 28);
    if ((_DWORD)v215)
    {
      v216 = 16 * v215;
      v217 = (_DWORD **)(*(_QWORD *)(v211 + 16) + 8);
      do
      {
        v218 = *v217;
        *v217 = 0;
        if (v218)
        {
          if (*v218 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v218, a2);
          else
            *v218 -= 2;
        }
        v217 += 2;
        v216 -= 16;
      }
      while (v216);
    }
    v219 = *(WTF **)(v211 + 16);
    if ((WTF *)(v211 + 32) != v219 && v219 != 0)
    {
      *(_QWORD *)(v211 + 16) = 0;
      *(_DWORD *)(v211 + 24) = 0;
      WTF::fastFree(v219, a2);
    }
    v221 = *(_QWORD *)(v211 + 8);
    *(_QWORD *)(v211 + 8) = 0;
    if (v221)
      (*(void (**)(uint64_t))(*(_QWORD *)v221 + 8))(v221);
    v222 = (WTF *)v211;
LABEL_439:
    WTF::fastFree(v222, a2);
  }
LABEL_396:
  if (v262)
  {
    v212 = v261;
    v261 = 0;
    if (v212)
    {
      if (*(_DWORD *)v212 == 2)
        WTF::StringImpl::destroy(v212, a2);
      else
        *(_DWORD *)v212 -= 2;
    }
  }
  v213 = v259;
  v259 = 0;
  if (v213)
  {
    if (*((_DWORD *)v213 + 6) == 2)
    {
      if ((*((_WORD *)v213 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v213, a2);
    }
    else
    {
      *((_DWORD *)v213 + 6) -= 2;
    }
  }
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
LABEL_405:
  if ((v9 & 1) == 0)
  {
LABEL_406:
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  return this;
}

void WebCore::StyleChange::~StyleChange(WebCore::StyleChange *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD **v9;
  _DWORD *v10;
  WTF *v11;
  uint64_t v13;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      v7 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v7)
      {
        v8 = 16 * v7;
        v9 = (_DWORD **)(*(_QWORD *)(v6 + 16) + 8);
        do
        {
          v10 = *v9;
          *v9 = 0;
          if (v10)
          {
            if (*v10 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, a2);
            else
              *v10 -= 2;
          }
          v9 += 2;
          v8 -= 16;
        }
        while (v8);
      }
      v11 = *(WTF **)(v6 + 16);
      if ((WTF *)(v6 + 32) != v11 && v11 != 0)
      {
        *(_QWORD *)(v6 + 16) = 0;
        *(_DWORD *)(v6 + 24) = 0;
        WTF::fastFree(v11, a2);
      }
      v13 = *(_QWORD *)(v6 + 8);
      *(_QWORD *)(v6 + 8) = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      WTF::fastFree((WTF *)v6, a2);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
}

uint64_t WebCore::ClearTextCommand::editingAction(WebCore::ClearTextCommand *this)
{
  return 9;
}

void WebCore::ClearTextCommand::CreateAndApply(uint64_t *a1, void *a2)
{
  WebCore::Document *v2;
  WebCore::Editor *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::CompositeEditCommand *v13;
  WebCore::EditCommand *v14;
  WebCore::Editor *v15;
  WebCore::Editor *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  int v28;
  char v29;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v33;
  int v34;
  char v35;
  __int16 v36;
  char v37;

  v2 = (WebCore::Document *)*a1;
  if (*(_BYTE *)(*(_QWORD *)(*a1 + 3064) + 153))
  {
    v4 = (WebCore::Editor *)*((_QWORD *)v2 + 382);
    if (!v4)
    {
      v15 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v15, v2);
      v16 = (WebCore::Editor *)*((_QWORD *)v2 + 382);
      *((_QWORD *)v2 + 382) = v15;
      if (v16)
      {
        WebCore::Editor::~Editor(v16, a2);
        if (*(_DWORD *)v17)
        {
          *(_QWORD *)(v17 + 496) = 0;
          *(_OWORD *)(v17 + 464) = 0u;
          *(_OWORD *)(v17 + 480) = 0u;
          *(_OWORD *)(v17 + 432) = 0u;
          *(_OWORD *)(v17 + 448) = 0u;
          *(_OWORD *)(v17 + 400) = 0u;
          *(_OWORD *)(v17 + 416) = 0u;
          *(_OWORD *)(v17 + 368) = 0u;
          *(_OWORD *)(v17 + 384) = 0u;
          *(_OWORD *)(v17 + 336) = 0u;
          *(_OWORD *)(v17 + 352) = 0u;
          *(_OWORD *)(v17 + 304) = 0u;
          *(_OWORD *)(v17 + 320) = 0u;
          *(_OWORD *)(v17 + 272) = 0u;
          *(_OWORD *)(v17 + 288) = 0u;
          *(_OWORD *)(v17 + 240) = 0u;
          *(_OWORD *)(v17 + 256) = 0u;
          *(_OWORD *)(v17 + 208) = 0u;
          *(_OWORD *)(v17 + 224) = 0u;
          *(_OWORD *)(v17 + 176) = 0u;
          *(_OWORD *)(v17 + 192) = 0u;
          *(_OWORD *)(v17 + 144) = 0u;
          *(_OWORD *)(v17 + 160) = 0u;
          *(_OWORD *)(v17 + 112) = 0u;
          *(_OWORD *)(v17 + 128) = 0u;
          *(_OWORD *)(v17 + 80) = 0u;
          *(_OWORD *)(v17 + 96) = 0u;
          *(_OWORD *)(v17 + 48) = 0u;
          *(_OWORD *)(v17 + 64) = 0u;
          *(_OWORD *)(v17 + 16) = 0u;
          *(_OWORD *)(v17 + 32) = 0u;
          *(_OWORD *)v17 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v17, a2);
        }
      }
      v4 = (WebCore::Editor *)*((_QWORD *)v2 + 382);
    }
    WebCore::Editor::clear(v4, a2);
    v6 = *(_QWORD *)(*a1 + 3064);
    v7 = *(_QWORD *)(v6 + 56);
    if (v7)
      *(_DWORD *)(v7 + 24) += 2;
    v18 = v7;
    v19 = *(_DWORD *)(v6 + 64);
    v20 = *(_BYTE *)(v6 + 68);
    v8 = *(_QWORD *)(v6 + 72);
    if (v8)
      *(_DWORD *)(v8 + 24) += 2;
    v21 = v8;
    v22 = *(_DWORD *)(v6 + 80);
    v23 = *(_BYTE *)(v6 + 84);
    v9 = *(_QWORD *)(v6 + 88);
    if (v9)
      *(_DWORD *)(v9 + 24) += 2;
    v24 = v9;
    v25 = *(_DWORD *)(v6 + 96);
    v26 = *(_BYTE *)(v6 + 100);
    v10 = *(_QWORD *)(v6 + 104);
    if (v10)
      *(_DWORD *)(v10 + 24) += 2;
    v27 = v10;
    v28 = *(_DWORD *)(v6 + 112);
    v29 = *(_BYTE *)(v6 + 116);
    v11 = *(_QWORD *)(v6 + 120);
    if (v11)
      *(_DWORD *)(v11 + 24) += 2;
    v30 = v11;
    v31 = *(_DWORD *)(v6 + 128);
    v32 = *(_BYTE *)(v6 + 132);
    v12 = *(_QWORD *)(v6 + 136);
    if (v12)
      *(_DWORD *)(v12 + 24) += 2;
    v33 = v12;
    v34 = *(_DWORD *)(v6 + 144);
    v35 = *(_BYTE *)(v6 + 148);
    v36 = *(_WORD *)(v6 + 152);
    v37 = *(_BYTE *)(v6 + 154);
    WebCore::FrameSelection::selectAll((WebCore::FrameSelection *)v6, v5);
    v13 = (WebCore::CompositeEditCommand *)WTF::fastMalloc((WTF *)0x248);
    WebCore::DeleteSelectionCommand::DeleteSelectionCommand((uint64_t)v13, a1, 0, 1, 0, 0, 1, 9);
    *(_QWORD *)v14 = off_1E33AA100;
    WebCore::EditCommand::setStartingSelection(v14, (const WebCore::VisibleSelection *)&v18);
    WebCore::CompositeEditCommand::apply(v13);
    if (*((_DWORD *)v13 + 2) == 1)
      (*(void (**)(WebCore::CompositeEditCommand *))(*(_QWORD *)v13 + 8))(v13);
    else
      --*((_DWORD *)v13 + 2);
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v18);
  }
}

void WebCore::FrameSelection::selectAll(WebCore::FrameSelection *this, void *a2)
{
  WebCore::FrameSelection *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  int v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  __int16 v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WebCore::Document *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WebCore::Editor *v41;
  void *v42;
  WebCore::Editor *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46[2];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 v52;

  v2 = this;
  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 1248);
  if (!v3)
    goto LABEL_6;
  v4 = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v3 + 24) = v4 + 4;
  if ((*(_WORD *)(v3 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24)
    || !*(_BYTE *)(v3 + 297))
  {
    v5 = v4 + 2;
    if (v5)
    {
      *(_DWORD *)(v3 + 24) = v5;
    }
    else if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
    {
      this = (WebCore::FrameSelection *)WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
LABEL_6:
    v6 = (uint64_t *)((char *)v2 + 120);
    v7 = *((_QWORD *)v2 + 15);
    if (v7)
    {
      v8 = *((_BYTE *)v2 + 132) & 7;
      if (v8 <= 4 && (((1 << v8) & 0x19) != 0 || (v7 = *(_QWORD *)(v7 + 32)) != 0))
      {
        *(_DWORD *)(v7 + 24) += 2;
        this = (WebCore::FrameSelection *)WebCore::Node::computeEditability(v7, 0, 0);
        v9 = (int)this;
        if (*(_DWORD *)(v7 + 24) == 2)
        {
          if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
            this = (WebCore::FrameSelection *)WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
        }
        else
        {
          *(_DWORD *)(v7 + 24) -= 2;
        }
        if (v9)
        {
          this = (WebCore::FrameSelection *)WebCore::highestEditableRoot((uint64_t)v2 + 120, 0, v46);
          v10 = v46[0];
          v11 = *v6;
          if (*v6)
          {
            v12 = *(_WORD *)(v11 + 28);
            if ((v12 & 0x80) == 0)
            {
              do
              {
                this = (WebCore::FrameSelection *)v11;
                if ((v12 & 0x80) != 0)
                  break;
                v11 = *(_QWORD *)(v11 + 32);
                if (!v11)
                  goto LABEL_23;
                v12 = *(_WORD *)(v11 + 28);
              }
              while ((v12 & 0x80) == 0);
              v13 = *((_DWORD *)this + 6) + 2;
              *((_DWORD *)this + 6) = v13;
              v14 = **((_QWORD **)this + 5);
              if (v14)
                v15 = (*(_WORD *)(v14 + 28) & 0x80) == 0;
              else
                v15 = 1;
              if (!v15 && (v16 = *(_QWORD *)(v14 + 200)) != 0)
              {
                v17 = *(_QWORD *)(v16 + 8);
                if (v17)
                {
                  *(_DWORD *)(v17 + 24) += 2;
                  v13 = *((_DWORD *)this + 6);
                }
              }
              else
              {
                v17 = 0;
              }
              v26 = v13 - 2;
              if (v26)
              {
                *((_DWORD *)this + 6) = v26;
              }
              else if ((*((_WORD *)this + 15) & 0x400) == 0)
              {
                this = (WebCore::FrameSelection *)WebCore::Node::removedLastRef(this, a2);
              }
LABEL_90:
              if (!v10)
              {
                v18 = 0;
                goto LABEL_117;
              }
              if (v17)
              {
                v18 = v10;
                goto LABEL_25;
              }
              goto LABEL_97;
            }
          }
LABEL_23:
          v18 = v46[0];
          if (!v46[0])
            goto LABEL_123;
LABEL_24:
          *(_DWORD *)(v10 + 24) += 2;
          v17 = v10;
LABEL_25:
          v19 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v19 || (v20 = *(_QWORD *)(v19 + 96)) == 0)
            v20 = WebCore::threadGlobalDataSlow(this);
          v21 = *(_QWORD *)(v20 + 40);
          if (!v21)
          {
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v20);
            v21 = *(_QWORD *)(v20 + 40);
          }
          v22 = bmalloc::api::isoAllocate();
          WTF::MonotonicTime::now((WTF::MonotonicTime *)v22);
          *(_DWORD *)(v22 + 16) = 1;
          *(_QWORD *)v22 = off_1E33A4B48;
          *(_QWORD *)(v22 + 8) = 0;
          *(_DWORD *)(v22 + 20) = *(_DWORD *)(v22 + 20) & 0xFFC00000 | 0x1E8206 | (*(_QWORD *)(v21 + 1808) != 0);
          v24 = *(_DWORD **)(v21 + 1808);
          if (v24)
            *v24 += 2;
          *(_QWORD *)(v22 + 24) = v24;
          *(_QWORD *)(v22 + 32) = 0;
          *(_QWORD *)(v22 + 40) = 0;
          *(_QWORD *)(v22 + 48) = 0;
          *(_QWORD *)(v22 + 56) = v23;
          *(_QWORD *)(v22 + 64) = 0;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 48))(v17, v22);
          v25 = *(_DWORD *)(v22 + 20);
          if (*(_DWORD *)(v22 + 16) == 1)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
            if ((v25 & 0x40) != 0)
              goto LABEL_118;
          }
          else
          {
            --*(_DWORD *)(v22 + 16);
            if ((v25 & 0x40) != 0)
              goto LABEL_118;
          }
          goto LABEL_98;
        }
      }
    }
    if (v3)
      v27 = *((_BYTE *)v2 + 153) == 0;
    else
      v27 = 0;
    if (v27)
    {
      this = (WebCore::FrameSelection *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 880))(v3);
      if ((_DWORD)this)
      {
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 872))(v3) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195ABA314);
        }
        v46[0] = 0;
        v46[1] = 0;
        if (WebCore::HTMLTextFormControlElement::setSelectionRange(v3, 0, 0xFFFFFFFF, 0, 3, v46, 0))
          WebCore::HTMLTextFormControlElement::scheduleSelectEvent((WebCore::HTMLTextFormControlElement *)v3);
        goto LABEL_124;
      }
      v30 = *(_WORD *)(v3 + 28);
      v31 = v3;
      do
      {
        v18 = v31;
        if ((v30 & 0x80) != 0)
          break;
        v31 = *(_QWORD *)(v31 + 32);
        if (!v31)
          goto LABEL_77;
        v30 = *(_WORD *)(v31 + 28);
      }
      while ((v30 & 0x80) == 0);
LABEL_71:
      *(_DWORD *)(v18 + 24) += 2;
      v32 = **(_QWORD **)(v18 + 40);
      if (v32)
        v33 = (*(_WORD *)(v32 + 28) & 0x80) == 0;
      else
        v33 = 1;
      if (v33 || (v34 = *(_QWORD *)(v32 + 200)) == 0 || (v10 = *(_QWORD *)(v34 + 8)) == 0)
      {
        v17 = 0;
        goto LABEL_98;
      }
      goto LABEL_24;
    }
    v28 = *v6;
    if (*v6)
    {
      v29 = *(_WORD *)(v28 + 28);
      if ((v29 & 0x80) == 0)
      {
        do
        {
          v18 = v28;
          if ((v29 & 0x80) != 0)
            break;
          v28 = *(_QWORD *)(v28 + 32);
          if (!v28)
            goto LABEL_77;
          v29 = *(_WORD *)(v28 + 28);
        }
        while ((v29 & 0x80) == 0);
        goto LABEL_71;
      }
    }
LABEL_77:
    v10 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 4) + 8) + 1272);
    if (!v10)
      goto LABEL_123;
    *(_DWORD *)(v10 + 24) += 2;
    if ((*(_WORD *)(v10 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    {
      v17 = *(_QWORD *)(v10 + 80);
      if (v17)
      {
        while ((*(_WORD *)(v17 + 28) & 0x10) == 0)
        {
          v17 = *(_QWORD *)(v17 + 56);
          if (!v17)
            goto LABEL_97;
        }
        v35 = *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
        v36 = *(_QWORD *)(*(_QWORD *)(v17 + 96) + 24);
        if (v36 != v35)
        {
LABEL_85:
          if (v36 != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
          {
            while (1)
            {
              v17 = *(_QWORD *)(v17 + 56);
              if (!v17)
                goto LABEL_97;
              if ((*(_WORD *)(v17 + 28) & 0x10) != 0)
              {
                v36 = *(_QWORD *)(*(_QWORD *)(v17 + 96) + 24);
                if (v36 != v35)
                  goto LABEL_85;
                break;
              }
            }
          }
        }
        *(_DWORD *)(v17 + 24) += 2;
        goto LABEL_90;
      }
    }
    else
    {
      v17 = 0;
    }
LABEL_97:
    v18 = v10;
LABEL_98:
    WebCore::VisibleSelection::selectionFromContentsOfNode((WebCore::VisibleSelection *)v18, (WebCore::VisibleSelection *)v46);
    if ((!v48 || (*(_BYTE *)(v48 + 22) & 8) != 0)
      && (!v49 || (*(_BYTE *)(v49 + 22) & 8) != 0)
      && (!v50 || (*(_BYTE *)(v50 + 22) & 8) != 0)
      && (!v51 || (*(_BYTE *)(v51 + 22) & 8) != 0)
      && (!v46[0]
       || (*(_BYTE *)(v46[0] + 22) & 8) != 0
       || (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v46[0] + 40) + 8) + 680) + 680) & 0x800000000000000) == 0)
      && (!v47
       || (*(_BYTE *)(v47 + 22) & 8) != 0
       || (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v47 + 40) + 8) + 680) + 680) & 0x800000000000000) == 0))
    {
      v37 = *(WebCore::Document **)(*((_QWORD *)v2 + 4) + 8);
      v38 = *((_QWORD *)v37 + 66);
      if (v38)
      {
        v39 = *(_QWORD *)(v38 + 8);
        if (v39)
        {
          if (*(_BYTE *)(v39 + 376))
            goto LABEL_115;
        }
      }
      v40 = *((_QWORD *)v37 + 382);
      if (!v40)
      {
        v41 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
        WebCore::Editor::Editor(v41, v37);
        v43 = (WebCore::Editor *)*((_QWORD *)v37 + 382);
        *((_QWORD *)v37 + 382) = v41;
        if (v43)
        {
          WebCore::Editor::~Editor(v43, v42);
          if (*(_DWORD *)v44)
          {
            *(_QWORD *)(v44 + 496) = 0;
            *(_OWORD *)(v44 + 464) = 0u;
            *(_OWORD *)(v44 + 480) = 0u;
            *(_OWORD *)(v44 + 432) = 0u;
            *(_OWORD *)(v44 + 448) = 0u;
            *(_OWORD *)(v44 + 400) = 0u;
            *(_OWORD *)(v44 + 416) = 0u;
            *(_OWORD *)(v44 + 368) = 0u;
            *(_OWORD *)(v44 + 384) = 0u;
            *(_OWORD *)(v44 + 336) = 0u;
            *(_OWORD *)(v44 + 352) = 0u;
            *(_OWORD *)(v44 + 304) = 0u;
            *(_OWORD *)(v44 + 320) = 0u;
            *(_OWORD *)(v44 + 272) = 0u;
            *(_OWORD *)(v44 + 288) = 0u;
            *(_OWORD *)(v44 + 240) = 0u;
            *(_OWORD *)(v44 + 256) = 0u;
            *(_OWORD *)(v44 + 208) = 0u;
            *(_OWORD *)(v44 + 224) = 0u;
            *(_OWORD *)(v44 + 176) = 0u;
            *(_OWORD *)(v44 + 192) = 0u;
            *(_OWORD *)(v44 + 144) = 0u;
            *(_OWORD *)(v44 + 160) = 0u;
            *(_OWORD *)(v44 + 112) = 0u;
            *(_OWORD *)(v44 + 128) = 0u;
            *(_OWORD *)(v44 + 80) = 0u;
            *(_OWORD *)(v44 + 96) = 0u;
            *(_OWORD *)(v44 + 48) = 0u;
            *(_OWORD *)(v44 + 64) = 0u;
            *(_OWORD *)(v44 + 16) = 0u;
            *(_OWORD *)(v44 + 32) = 0u;
            *(_OWORD *)v44 = 0u;
          }
          else
          {
            WTF::fastFree((WTF *)v44, v45);
          }
        }
        v40 = *((_QWORD *)v37 + 382);
      }
      if (WebCore::Editor::shouldChangeSelection(v40, (WebCore::FrameSelection *)((char *)v2 + 56), (WebCore::VisibleSelection *)v46, v52, 0))LABEL_115:WebCore::FrameSelection::setSelection((uint64_t)v2, (uint64_t)v46, 7u, 0x500000003, 8, 0, 0);
    }
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v46);
LABEL_117:
    if (!v17)
    {
LABEL_120:
      if (v18)
      {
        if (*(_DWORD *)(v18 + 24) == 2)
        {
          if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v18, a2);
        }
        else
        {
          *(_DWORD *)(v18 + 24) -= 2;
        }
      }
LABEL_123:
      if (!v3)
        return;
      goto LABEL_124;
    }
LABEL_118:
    if (*(_DWORD *)(v17 + 24) == 2)
    {
      if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v17, a2);
    }
    else
    {
      *(_DWORD *)(v17 + 24) -= 2;
    }
    goto LABEL_120;
  }
  WebCore::HTMLSelectElement::selectAll(v3, a2);
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
LABEL_124:
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
}

uint64_t WebCore::TemporarySelectionChange::TemporarySelectionChange(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  WebCore::Document *v5;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  unsigned int v28;
  __int16 v29;
  int8x8_t v30;
  WebCore::Editor *v32;
  void *v33;
  WebCore::Editor *v34;
  uint64_t v35;
  void *v36;
  WebCore::Editor *v37;
  void *v38;
  WebCore::Editor *v39;
  uint64_t v40;
  void *v41;
  char v42;
  _QWORD v43[3];

  v5 = (WebCore::Document *)a2;
  *(_DWORD *)(a2 + 24) += 2;
  *(_QWORD *)a1 = a2;
  *(_WORD *)(a1 + 8) = a4;
  v7 = *(_QWORD *)(a2 + 3056);
  if (!v7)
  {
    v42 = a4;
    v32 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v32, v5);
    v34 = (WebCore::Editor *)*((_QWORD *)v5 + 382);
    *((_QWORD *)v5 + 382) = v32;
    if (v34)
    {
      WebCore::Editor::~Editor(v34, v33);
      if (*(_DWORD *)v35)
        goto LABEL_44;
      WTF::fastFree((WTF *)v35, v36);
    }
    goto LABEL_38;
  }
  while (1)
  {
    *(_BYTE *)(a1 + 10) = *(_BYTE *)(v7 + 88);
    v8 = *(_BYTE *)(*((_QWORD *)v5 + 383) + 257) & 1;
    *(_BYTE *)(a1 + 16) = 0;
    v9 = (uint64_t *)(a1 + 16);
    *(_BYTE *)(a1 + 11) = v8;
    *(_BYTE *)(a1 + 120) = 0;
    if ((a4 & 8) != 0)
      *(_WORD *)(*((_QWORD *)v5 + 383) + 256) |= 0x100u;
    if ((a4 & 4) != 0)
    {
      v10 = *((_QWORD *)v5 + 382);
      if (!v10)
      {
        v42 = a1 + 16;
        v37 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
        WebCore::Editor::Editor(v37, v5);
        v39 = (WebCore::Editor *)*((_QWORD *)v5 + 382);
        *((_QWORD *)v5 + 382) = v37;
        if (v39)
        {
          WebCore::Editor::~Editor(v39, v38);
          if (*(_DWORD *)v40)
          {
            *(_QWORD *)(v40 + 496) = 0;
            *(_OWORD *)(v40 + 464) = 0u;
            *(_OWORD *)(v40 + 480) = 0u;
            *(_OWORD *)(v40 + 432) = 0u;
            *(_OWORD *)(v40 + 448) = 0u;
            *(_OWORD *)(v40 + 400) = 0u;
            *(_OWORD *)(v40 + 416) = 0u;
            *(_OWORD *)(v40 + 368) = 0u;
            *(_OWORD *)(v40 + 384) = 0u;
            *(_OWORD *)(v40 + 336) = 0u;
            *(_OWORD *)(v40 + 352) = 0u;
            *(_OWORD *)(v40 + 304) = 0u;
            *(_OWORD *)(v40 + 320) = 0u;
            *(_OWORD *)(v40 + 272) = 0u;
            *(_OWORD *)(v40 + 288) = 0u;
            *(_OWORD *)(v40 + 240) = 0u;
            *(_OWORD *)(v40 + 256) = 0u;
            *(_OWORD *)(v40 + 208) = 0u;
            *(_OWORD *)(v40 + 224) = 0u;
            *(_OWORD *)(v40 + 176) = 0u;
            *(_OWORD *)(v40 + 192) = 0u;
            *(_OWORD *)(v40 + 144) = 0u;
            *(_OWORD *)(v40 + 160) = 0u;
            *(_OWORD *)(v40 + 112) = 0u;
            *(_OWORD *)(v40 + 128) = 0u;
            *(_OWORD *)(v40 + 80) = 0u;
            *(_OWORD *)(v40 + 96) = 0u;
            *(_OWORD *)(v40 + 48) = 0u;
            *(_OWORD *)(v40 + 64) = 0u;
            *(_OWORD *)(v40 + 16) = 0u;
            *(_OWORD *)(v40 + 32) = 0u;
            *(_OWORD *)v40 = 0u;
          }
          else
          {
            WTF::fastFree((WTF *)v40, v41);
          }
        }
        v10 = *((_QWORD *)v5 + 382);
        v9 = (uint64_t *)(a1 + 16);
      }
      if (!*(_BYTE *)(v10 + 88))
        *(_BYTE *)(v10 + 88) = 1;
    }
    if (!*(_BYTE *)(a3 + 104))
      break;
    v11 = *((_QWORD *)v5 + 383);
    v12 = (uint64_t *)(v11 + 56);
    if (*(_BYTE *)(a1 + 120))
    {
      WebCore::VisibleSelection::operator=(v9, v12);
    }
    else
    {
      v13 = *v12;
      if (*v12)
        *(_DWORD *)(v13 + 24) += 2;
      *(_QWORD *)(a1 + 16) = v13;
      v14 = *(_DWORD *)(v11 + 64);
      *(_BYTE *)(a1 + 28) = *(_BYTE *)(v11 + 68);
      *(_DWORD *)(a1 + 24) = v14;
      v15 = *(_QWORD *)(v11 + 72);
      if (v15)
        *(_DWORD *)(v15 + 24) += 2;
      *(_QWORD *)(a1 + 32) = v15;
      v16 = *(_DWORD *)(v11 + 80);
      *(_BYTE *)(a1 + 44) = *(_BYTE *)(v11 + 84);
      *(_DWORD *)(a1 + 40) = v16;
      v17 = *(_QWORD *)(v11 + 88);
      if (v17)
        *(_DWORD *)(v17 + 24) += 2;
      *(_QWORD *)(a1 + 48) = v17;
      v18 = *(_DWORD *)(v11 + 96);
      *(_BYTE *)(a1 + 60) = *(_BYTE *)(v11 + 100);
      *(_DWORD *)(a1 + 56) = v18;
      v19 = *(_QWORD *)(v11 + 104);
      if (v19)
        *(_DWORD *)(v19 + 24) += 2;
      *(_QWORD *)(a1 + 64) = v19;
      v20 = *(_DWORD *)(v11 + 112);
      *(_BYTE *)(a1 + 76) = *(_BYTE *)(v11 + 116);
      *(_DWORD *)(a1 + 72) = v20;
      v21 = *(_QWORD *)(v11 + 120);
      if (v21)
        *(_DWORD *)(v21 + 24) += 2;
      *(_QWORD *)(a1 + 80) = v21;
      v22 = *(_DWORD *)(v11 + 128);
      *(_BYTE *)(a1 + 92) = *(_BYTE *)(v11 + 132);
      *(_DWORD *)(a1 + 88) = v22;
      v23 = *(_QWORD *)(v11 + 136);
      if (v23)
        *(_DWORD *)(v23 + 24) += 2;
      *(_QWORD *)(a1 + 96) = v23;
      v24 = *(_DWORD *)(v11 + 144);
      *(_BYTE *)(a1 + 108) = *(_BYTE *)(v11 + 148);
      *(_DWORD *)(a1 + 104) = v24;
      LOWORD(v24) = *(_WORD *)(v11 + 152);
      *(_BYTE *)(a1 + 114) = *(_BYTE *)(v11 + 154);
      *(_WORD *)(a1 + 112) = v24;
      *(_BYTE *)(a1 + 120) = 1;
    }
    v25 = *((_QWORD *)v5 + 383);
    v26 = *(_WORD *)(v25 + 256);
    if ((v26 & 0x100) != 0)
    {
      *(_QWORD *)(v25 + 236) = 0;
      *(_QWORD *)(v25 + 228) = 0;
      *(_WORD *)(v25 + 256) = v26 | 0x20;
      v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 32) + 8) + 1944);
      if (v27)
      {
        v5 = (WebCore::Document *)(v27 + 288);
        if (!*(_BYTE *)(v27 + 328))
          WebCore::RenderLayer::repaintBlockSelectionGaps(*(int **)(*(_QWORD *)(v27 + 320) + 144));
        memset(v43, 0, sizeof(v43));
        WebCore::RenderSelection::set((uint64_t)v5, v43, 1);
      }
    }
    if (*(_BYTE *)(a3 + 104))
    {
      v28 = *(unsigned __int16 *)(a1 + 8);
      if ((v28 & 0x80) != 0)
        v29 = 70;
      else
        v29 = 6;
      v30 = vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(v28), (uint16x4_t)0x3000400070005), (int8x8_t)0x10100000800E00);
      WebCore::FrameSelection::setSelection(*(_QWORD *)(*(_QWORD *)a1 + 3064), a3, v30.i16[0] | v30.i16[2] | ((v30.i32[0] | v30.i32[1]) >> 16) | v29, 0, 0, 0, 0);
      return a1;
    }
    v35 = std::__throw_bad_optional_access[abi:sn180100]();
LABEL_44:
    *(_QWORD *)(v35 + 496) = 0;
    *(_OWORD *)(v35 + 464) = 0u;
    *(_OWORD *)(v35 + 480) = 0u;
    *(_OWORD *)(v35 + 432) = 0u;
    *(_OWORD *)(v35 + 448) = 0u;
    *(_OWORD *)(v35 + 400) = 0u;
    *(_OWORD *)(v35 + 416) = 0u;
    *(_OWORD *)(v35 + 368) = 0u;
    *(_OWORD *)(v35 + 384) = 0u;
    *(_OWORD *)(v35 + 336) = 0u;
    *(_OWORD *)(v35 + 352) = 0u;
    *(_OWORD *)(v35 + 304) = 0u;
    *(_OWORD *)(v35 + 320) = 0u;
    *(_OWORD *)(v35 + 272) = 0u;
    *(_OWORD *)(v35 + 288) = 0u;
    *(_OWORD *)(v35 + 240) = 0u;
    *(_OWORD *)(v35 + 256) = 0u;
    *(_OWORD *)(v35 + 208) = 0u;
    *(_OWORD *)(v35 + 224) = 0u;
    *(_OWORD *)(v35 + 176) = 0u;
    *(_OWORD *)(v35 + 192) = 0u;
    *(_OWORD *)(v35 + 144) = 0u;
    *(_OWORD *)(v35 + 160) = 0u;
    *(_OWORD *)(v35 + 112) = 0u;
    *(_OWORD *)(v35 + 128) = 0u;
    *(_OWORD *)(v35 + 80) = 0u;
    *(_OWORD *)(v35 + 96) = 0u;
    *(_OWORD *)(v35 + 48) = 0u;
    *(_OWORD *)(v35 + 64) = 0u;
    *(_OWORD *)(v35 + 16) = 0u;
    *(_OWORD *)(v35 + 32) = 0u;
    *(_OWORD *)v35 = 0u;
LABEL_38:
    v7 = *((_QWORD *)v5 + 382);
    LOBYTE(a4) = v42;
  }
  return a1;
}

{
  return WebCore::TemporarySelectionChange::TemporarySelectionChange(a1, a2, a3, a4);
}

void WebCore::Editor::setIgnoreSelectionChanges(uint64_t a1, WTF::StringImpl *a2, int a3)
{
  uint64_t v5;
  void *v6;

  if (*(unsigned __int8 *)(a1 + 88) != (_DWORD)a2)
  {
    *(_BYTE *)(a1 + 88) = (_BYTE)a2;
    if ((a2 & 1) == 0)
    {
      WebCore::Editor::respondToChangedSelection(a1, a2, 0);
      if (a3)
      {
        if (!*(_BYTE *)(a1 + 88))
        {
          v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
          *(_DWORD *)(v5 + 24) += 2;
          WebCore::FrameSelection::revealSelection(*(_QWORD *)(v5 + 3064), 0, (uint64_t)&WebCore::ScrollAlignment::alignToEdgeIfNeeded, 0, 1);
          if (*(_DWORD *)(v5 + 24) == 2)
          {
            if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v5, v6);
          }
          else
          {
            *(_DWORD *)(v5 + 24) -= 2;
          }
        }
      }
    }
  }
}

uint64_t WebCore::FrameSelection::setNeedsSelectionUpdate(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[3];

  *(_QWORD *)(result + 236) = 0;
  *(_QWORD *)(result + 228) = 0;
  if (a2)
    *(_BYTE *)(result + 224) = 0;
  *(_WORD *)(result + 256) |= 0x20u;
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 1944);
  if (v2)
  {
    v3 = v2 + 288;
    if (!*(_BYTE *)(v2 + 328))
      WebCore::RenderLayer::repaintBlockSelectionGaps(*(int **)(*(_QWORD *)(v2 + 320) + 144));
    memset(v4, 0, sizeof(v4));
    return WebCore::RenderSelection::set(v3, v4, 1);
  }
  return result;
}

void WebCore::TemporarySelectionChange::invalidate(WebCore::TemporarySelectionChange *this)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  WebCore::Editor *v4;
  WebCore::Editor *v5;
  uint64_t v6;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)this);
  if (v1)
  {
    v3 = *(_QWORD *)(v1 + 3056);
    if (!v3)
    {
      v4 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v4, (WebCore::Document *)v1);
      v5 = *(WebCore::Editor **)(v1 + 3056);
      *(_QWORD *)(v1 + 3056) = v4;
      if (v5)
      {
        WebCore::Editor::~Editor(v5, v2);
        if (*(_DWORD *)v6)
        {
          *(_QWORD *)(v6 + 496) = 0;
          *(_OWORD *)(v6 + 464) = 0u;
          *(_OWORD *)(v6 + 480) = 0u;
          *(_OWORD *)(v6 + 432) = 0u;
          *(_OWORD *)(v6 + 448) = 0u;
          *(_OWORD *)(v6 + 400) = 0u;
          *(_OWORD *)(v6 + 416) = 0u;
          *(_OWORD *)(v6 + 368) = 0u;
          *(_OWORD *)(v6 + 384) = 0u;
          *(_OWORD *)(v6 + 336) = 0u;
          *(_OWORD *)(v6 + 352) = 0u;
          *(_OWORD *)(v6 + 304) = 0u;
          *(_OWORD *)(v6 + 320) = 0u;
          *(_OWORD *)(v6 + 272) = 0u;
          *(_OWORD *)(v6 + 288) = 0u;
          *(_OWORD *)(v6 + 240) = 0u;
          *(_OWORD *)(v6 + 256) = 0u;
          *(_OWORD *)(v6 + 208) = 0u;
          *(_OWORD *)(v6 + 224) = 0u;
          *(_OWORD *)(v6 + 176) = 0u;
          *(_OWORD *)(v6 + 192) = 0u;
          *(_OWORD *)(v6 + 144) = 0u;
          *(_OWORD *)(v6 + 160) = 0u;
          *(_OWORD *)(v6 + 112) = 0u;
          *(_OWORD *)(v6 + 128) = 0u;
          *(_OWORD *)(v6 + 80) = 0u;
          *(_OWORD *)(v6 + 96) = 0u;
          *(_OWORD *)(v6 + 48) = 0u;
          *(_OWORD *)(v6 + 64) = 0u;
          *(_OWORD *)(v6 + 16) = 0u;
          *(_OWORD *)(v6 + 32) = 0u;
          *(_OWORD *)v6 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v6, v2);
        }
      }
      v3 = *(_QWORD *)(v1 + 3056);
    }
    if (*(_BYTE *)(v3 + 88))
    {
      *(_BYTE *)(v3 + 88) = 0;
      WebCore::Editor::respondToChangedSelection(v3, (WTF::StringImpl *)v2, 0);
    }
    if (*(_DWORD *)(v1 + 24) == 2)
    {
      if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v1, v2);
    }
    else
    {
      *(_DWORD *)(v1 + 24) -= 2;
    }
  }
}

void WebCore::TemporarySelectionChange::~TemporarySelectionChange(WebCore::TemporarySelectionChange *this, void *a2)
{
  __int16 v3;
  __int16 v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::Document *v9;
  WebCore::Editor *v10;
  WebCore::Editor *v11;
  uint64_t v12;
  __int16 v13;

  if (*(_QWORD *)this)
  {
    if (*((_BYTE *)this + 120))
    {
      if ((*((_WORD *)this + 4) & 0x80) != 0)
        v3 = 70;
      else
        v3 = 6;
      WebCore::FrameSelection::setSelection(*(_QWORD *)(*(_QWORD *)this + 3064), (uint64_t)this + 16, v3 & 0xFFEF | (16 * ((*((_WORD *)this + 4) >> 1) & 1)), 0, 0, 0, 0);
    }
    v4 = *((_WORD *)this + 4);
    if ((v4 & 4) != 0)
    {
      v5 = *(_QWORD *)(*(_QWORD *)this + 3056);
      if (!v5)
      {
        v13 = *((_WORD *)this + 4);
        v9 = *(WebCore::Document **)this;
        v10 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
        WebCore::Editor::Editor(v10, v9);
        v11 = (WebCore::Editor *)*((_QWORD *)v9 + 382);
        *((_QWORD *)v9 + 382) = v10;
        if (v11)
        {
          WebCore::Editor::~Editor(v11, a2);
          if (*(_DWORD *)v12)
          {
            *(_QWORD *)(v12 + 496) = 0;
            *(_OWORD *)(v12 + 464) = 0u;
            *(_OWORD *)(v12 + 480) = 0u;
            *(_OWORD *)(v12 + 432) = 0u;
            *(_OWORD *)(v12 + 448) = 0u;
            *(_OWORD *)(v12 + 400) = 0u;
            *(_OWORD *)(v12 + 416) = 0u;
            *(_OWORD *)(v12 + 368) = 0u;
            *(_OWORD *)(v12 + 384) = 0u;
            *(_OWORD *)(v12 + 336) = 0u;
            *(_OWORD *)(v12 + 352) = 0u;
            *(_OWORD *)(v12 + 304) = 0u;
            *(_OWORD *)(v12 + 320) = 0u;
            *(_OWORD *)(v12 + 272) = 0u;
            *(_OWORD *)(v12 + 288) = 0u;
            *(_OWORD *)(v12 + 240) = 0u;
            *(_OWORD *)(v12 + 256) = 0u;
            *(_OWORD *)(v12 + 208) = 0u;
            *(_OWORD *)(v12 + 224) = 0u;
            *(_OWORD *)(v12 + 176) = 0u;
            *(_OWORD *)(v12 + 192) = 0u;
            *(_OWORD *)(v12 + 144) = 0u;
            *(_OWORD *)(v12 + 160) = 0u;
            *(_OWORD *)(v12 + 112) = 0u;
            *(_OWORD *)(v12 + 128) = 0u;
            *(_OWORD *)(v12 + 80) = 0u;
            *(_OWORD *)(v12 + 96) = 0u;
            *(_OWORD *)(v12 + 48) = 0u;
            *(_OWORD *)(v12 + 64) = 0u;
            *(_OWORD *)(v12 + 16) = 0u;
            *(_OWORD *)(v12 + 32) = 0u;
            *(_OWORD *)v12 = 0u;
          }
          else
          {
            WTF::fastFree((WTF *)v12, a2);
          }
        }
        v5 = *((_QWORD *)v9 + 382);
        LOBYTE(v4) = v13;
      }
      v6 = *((unsigned __int8 *)this + 10);
      if (*(unsigned __int8 *)(v5 + 88) != v6)
      {
        *(_BYTE *)(v5 + 88) = v6;
        if (!v6)
        {
          WebCore::Editor::respondToChangedSelection(v5, (WTF::StringImpl *)a2, 0);
          if ((v4 & 1) != 0 && !*(_BYTE *)(v5 + 88))
          {
            v7 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8);
            *(_DWORD *)(v7 + 24) += 2;
            WebCore::FrameSelection::revealSelection(*(_QWORD *)(v7 + 3064), 0, (uint64_t)&WebCore::ScrollAlignment::alignToEdgeIfNeeded, 0, 1);
            if (*(_DWORD *)(v7 + 24) == 2)
            {
              if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v7);
            }
            else
            {
              *(_DWORD *)(v7 + 24) -= 2;
            }
          }
        }
      }
    }
    if ((*((_WORD *)this + 4) & 8) != 0)
      *(_WORD *)(*(_QWORD *)(*(_QWORD *)this + 3064) + 256) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)this + 3064)
                                                                           + 256) & 0xFEFF | (*((unsigned __int8 *)this
                                                                                                + 11) << 8);
  }
  if (*((_BYTE *)this + 120))
    WebCore::VisibleSelection::~VisibleSelection((WebCore::TemporarySelectionChange *)((char *)this + 16));
  v8 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
}

void WebCore::FrameSelection::setSelection(uint64_t a1, uint64_t a2, unsigned __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int16 v13;
  __int16 v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::Editor *v26;
  void *v27;
  WebCore::Editor *v28;
  uint64_t v29;
  void *v30;
  __int128 v31;

  v7 = a6;
  *(_QWORD *)&v31 = a4;
  *((_QWORD *)&v31 + 1) = a5;
  v10 = *(_QWORD *)(a1 + 32);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v11)
      *(_DWORD *)(v11 + 24) += 2;
  }
  else
  {
    v11 = 0;
  }
  if (!WebCore::FrameSelection::setSelectionWithoutUpdatingAppearance(a1, a2, a3, a6, a7))
  {
    if (!v11)
      return;
    goto LABEL_30;
  }
  if ((a3 & 0x100) != 0)
  {
    v12 = 1;
LABEL_9:
    *(_BYTE *)(a1 + 224) = v12;
    goto LABEL_10;
  }
  if ((a3 & 0x80) == 0)
  {
    if ((a3 & 0x400) != 0)
      v12 = 2;
    else
      v12 = 3;
    goto LABEL_9;
  }
  *(_BYTE *)(a1 + 224) = 0;
LABEL_10:
  v13 = *(_WORD *)(a1 + 256) & 0xFFBF;
  *(_OWORD *)(a1 + 228) = v31;
  if (v7)
    v14 = 96;
  else
    v14 = 32;
  *(_WORD *)(a1 + 256) = v13 | v14;
  v15 = *(uint64_t **)(v11 + 1584);
  if (v15)
  {
    v25 = *v15;
    if (v25)
    {
      if (*(_DWORD *)(v25 + 100))
      {
        *(_BYTE *)(v11 + 3368) |= 8u;
        WebCore::Document::scheduleRenderingUpdate((_QWORD *)v11, 64);
      }
    }
  }
  if (!*(_BYTE *)(v11 + 3362))
  {
    if (*(_BYTE *)(v11 + 3390)
      || (*(_BYTE *)(v11 + 70) & 8) != 0
      || *(_QWORD *)(v11 + 1560)
      || (v16 = *(_QWORD *)(v11 + 1328), *(_BYTE *)(v16 + 233))
      || *(_BYTE *)(v16 + 234))
    {
      if (!*(_BYTE *)(v11 + 3391))
        goto LABEL_30;
    }
  }
  v17 = *(_QWORD *)(v11 + 528);
  if (!v17 || (v18 = *(_QWORD *)(v17 + 8)) == 0)
  {
    v19 = 0;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v18 + 288);
  if (!v19)
  {
LABEL_38:
    v20 = 1;
LABEL_25:
    if ((a3 & 0x40) != 0)
    {
      if ((a3 & 0x200) != 0)
        v21 = 2;
      else
        v21 = 1;
      WebCore::FrameSelection::updateAndRevealSelection(a1, (uint64_t)&v31, v21, (BOOL *)((a3 >> 11) & 1), (a3 >> 12) & 1);
      v22 = *(_QWORD *)(v11 + 3056);
      if (!v22)
      {
        v26 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
        WebCore::Editor::Editor(v26, (WebCore::Document *)v11);
        v28 = *(WebCore::Editor **)(v11 + 3056);
        *(_QWORD *)(v11 + 3056) = v26;
        if (v28)
        {
          WebCore::Editor::~Editor(v28, v27);
          if (*(_DWORD *)v29)
          {
            *(_QWORD *)(v29 + 496) = 0;
            *(_OWORD *)(v29 + 464) = 0u;
            *(_OWORD *)(v29 + 480) = 0u;
            *(_OWORD *)(v29 + 432) = 0u;
            *(_OWORD *)(v29 + 448) = 0u;
            *(_OWORD *)(v29 + 400) = 0u;
            *(_OWORD *)(v29 + 416) = 0u;
            *(_OWORD *)(v29 + 368) = 0u;
            *(_OWORD *)(v29 + 384) = 0u;
            *(_OWORD *)(v29 + 336) = 0u;
            *(_OWORD *)(v29 + 352) = 0u;
            *(_OWORD *)(v29 + 304) = 0u;
            *(_OWORD *)(v29 + 320) = 0u;
            *(_OWORD *)(v29 + 272) = 0u;
            *(_OWORD *)(v29 + 288) = 0u;
            *(_OWORD *)(v29 + 240) = 0u;
            *(_OWORD *)(v29 + 256) = 0u;
            *(_OWORD *)(v29 + 208) = 0u;
            *(_OWORD *)(v29 + 224) = 0u;
            *(_OWORD *)(v29 + 176) = 0u;
            *(_OWORD *)(v29 + 192) = 0u;
            *(_OWORD *)(v29 + 144) = 0u;
            *(_OWORD *)(v29 + 160) = 0u;
            *(_OWORD *)(v29 + 112) = 0u;
            *(_OWORD *)(v29 + 128) = 0u;
            *(_OWORD *)(v29 + 80) = 0u;
            *(_OWORD *)(v29 + 96) = 0u;
            *(_OWORD *)(v29 + 48) = 0u;
            *(_OWORD *)(v29 + 64) = 0u;
            *(_OWORD *)(v29 + 16) = 0u;
            *(_OWORD *)(v29 + 32) = 0u;
            *(_OWORD *)v29 = 0u;
          }
          else
          {
            WTF::fastFree((WTF *)v29, v30);
          }
        }
        v22 = *(_QWORD *)(v11 + 3056);
      }
      v23 = *(_QWORD *)(v22 + 8);
      if (v23)
      {
        v24 = *(_QWORD *)(v23 + 8);
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 264))(v24);
      }
    }
    if ((v20 & 1) != 0)
      goto LABEL_30;
    goto LABEL_27;
  }
  ++*(_DWORD *)(v19 + 8);
  if ((*(_QWORD *)(v19 + 384) & 0xFFFFFFFFFFFFLL) == 0
    || *(double *)((*(_QWORD *)(v19 + 384) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
  {
    v20 = 0;
    goto LABEL_25;
  }
LABEL_27:
  if (*(_DWORD *)(v19 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  else
    --*(_DWORD *)(v19 + 8);
LABEL_30:
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
}

void WebCore::Editor::selectionForCommand(WebCore::Editor *this, WebCore::Event *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::Node *v9;
  uint64_t v10;
  char *v11;
  __int16 v12;
  uint64_t v13;
  int v14;
  void *v15;
  WebCore::Node *v16;
  WebCore::Node *v17;
  void *v18;
  WebCore::Node *v19;
  WebCore::Node *v20;
  WebCore::Node *v21;
  WebCore::Node *v22;
  __int16 v23;
  char v24;
  WebCore::Node *v25;
  WebCore::Node *v26;
  WebCore::Node *v27[2];
  WebCore::Node *v28;
  char v29;
  WebCore::Node *v30;
  int v31;
  char v32;
  uint64_t v33;
  int v34;
  char v35;
  uint64_t v36;
  int v37;
  char v38;
  uint64_t v39;
  int v40;
  char v41;
  uint64_t v42;
  int v43;
  char v44;
  WebCore::Node *v45;
  int v46;
  char v47;
  uint64_t v48;
  int v49;
  char v50;
  __int16 v51;
  unsigned __int8 v52;

  v5 = *((_QWORD *)a2 + 7);
  if (v5)
    *(_DWORD *)(v5 + 24) += 2;
  v33 = v5;
  v34 = *((_DWORD *)a2 + 16);
  v35 = *((_BYTE *)a2 + 68);
  v6 = *((_QWORD *)a2 + 9);
  if (v6)
    *(_DWORD *)(v6 + 24) += 2;
  v36 = v6;
  v37 = *((_DWORD *)a2 + 20);
  v38 = *((_BYTE *)a2 + 84);
  v7 = *((_QWORD *)a2 + 11);
  if (v7)
    *(_DWORD *)(v7 + 24) += 2;
  v39 = v7;
  v40 = *((_DWORD *)a2 + 24);
  v41 = *((_BYTE *)a2 + 100);
  v8 = *((_QWORD *)a2 + 13);
  if (v8)
    *(_DWORD *)(v8 + 24) += 2;
  v42 = v8;
  v43 = *((_DWORD *)a2 + 28);
  v44 = *((_BYTE *)a2 + 116);
  v9 = (WebCore::Node *)*((_QWORD *)a2 + 15);
  if (v9)
    *((_DWORD *)v9 + 6) += 2;
  v45 = v9;
  v46 = *((_DWORD *)a2 + 32);
  v47 = *((_BYTE *)a2 + 132);
  v10 = *((_QWORD *)a2 + 17);
  if (v10)
    *(_DWORD *)(v10 + 24) += 2;
  v48 = v10;
  v12 = *((_WORD *)a2 + 76);
  v11 = (char *)a2 + 152;
  v49 = *((_DWORD *)v11 - 2);
  v50 = *(v11 - 4);
  v51 = v12;
  v52 = v11[2];
  if (!a3)
  {
    *(_QWORD *)this = v5;
    *((_DWORD *)this + 2) = v34;
    *((_BYTE *)this + 12) = v35;
    v33 = 0;
    v36 = 0;
    *((_QWORD *)this + 2) = v6;
    *((_DWORD *)this + 6) = v37;
    *((_BYTE *)this + 28) = v38;
    *((_QWORD *)this + 4) = v7;
    *((_BYTE *)this + 44) = v41;
    *((_DWORD *)this + 10) = v40;
    v39 = 0;
    v42 = 0;
    *((_QWORD *)this + 6) = v8;
    *((_BYTE *)this + 60) = v44;
    *((_DWORD *)this + 14) = v43;
    *((_QWORD *)this + 8) = v9;
    *((_BYTE *)this + 76) = v47;
    *((_DWORD *)this + 18) = v46;
    v45 = 0;
    v48 = 0;
    *((_QWORD *)this + 10) = v10;
    *((_BYTE *)this + 92) = *(v11 - 4);
    *((_DWORD *)this + 22) = *((_DWORD *)v11 - 2);
    v23 = *(_WORD *)v11;
    v24 = v11[2];
LABEL_42:
    *((_BYTE *)this + 98) = v24;
    *((_WORD *)this + 48) = v23;
    goto LABEL_43;
  }
  v13 = *(_QWORD *)(a3 + 48);
  if (!v13
    || (*(_BYTE *)(v13 + 22) & 2) == 0
    || (*(_WORD *)(v13 + 28) & 8) == 0
    || (v26 = *(WebCore::Node **)(a3 + 48), !(*(unsigned int (**)(void))(*(_QWORD *)v13 + 872))()))
  {
LABEL_41:
    *(_QWORD *)this = v5;
    *((_DWORD *)this + 2) = v34;
    *((_BYTE *)this + 12) = v35;
    v33 = 0;
    v36 = 0;
    *((_QWORD *)this + 2) = v6;
    *((_DWORD *)this + 6) = v37;
    *((_BYTE *)this + 28) = v38;
    *((_QWORD *)this + 4) = v7;
    *((_BYTE *)this + 44) = v41;
    *((_DWORD *)this + 10) = v40;
    v39 = 0;
    v42 = 0;
    *((_QWORD *)this + 6) = v8;
    *((_BYTE *)this + 60) = v44;
    *((_DWORD *)this + 14) = v43;
    *((_QWORD *)this + 8) = v9;
    *((_BYTE *)this + 76) = v47;
    *((_DWORD *)this + 18) = v46;
    v45 = 0;
    v48 = 0;
    *((_QWORD *)this + 10) = v10;
    *((_BYTE *)this + 92) = v50;
    *((_DWORD *)this + 22) = v49;
    v23 = v51;
    v24 = v52;
    goto LABEL_42;
  }
  *((_DWORD *)v26 + 6) += 2;
  v14 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v26 + 880))(v26);
  v16 = v26;
  if (!v14)
  {
LABEL_39:
    if (*((_DWORD *)v16 + 6) == 2)
    {
      if ((*((_WORD *)v16 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v16, v15);
    }
    else
    {
      *((_DWORD *)v16 + 6) -= 2;
    }
    goto LABEL_41;
  }
  if (v9)
  {
    *((_DWORD *)v9 + 6) += 2;
    v30 = v9;
    v31 = v46;
    v32 = v47;
    v17 = *(WebCore::Node **)(a3 + 48);
    if (v17 == WebCore::enclosingTextFormControl((WebCore *)&v30, (const WebCore::Position *)v15))
    {
LABEL_35:
      v25 = v30;
      v30 = 0;
      if (v25)
      {
        if (*((_DWORD *)v25 + 6) == 2)
        {
          if ((*((_WORD *)v25 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v25, v15);
        }
        else
        {
          *((_DWORD *)v25 + 6) -= 2;
        }
      }
      v16 = v26;
      goto LABEL_39;
    }
  }
  else
  {
    v30 = 0;
    v31 = v46;
    v32 = v47;
  }
  WebCore::HTMLTextFormControlElement::selection((uint64_t)v26, (uint64_t)v27);
  if (!v29)
    goto LABEL_35;
  WebCore::VisibleSelection::VisibleSelection((uint64_t)this, (uint64_t)v27, 1, (v52 >> 1) & 1);
  v19 = v26;
  if (v29)
  {
    v20 = v28;
    v28 = 0;
    if (v20)
    {
      if (*((_DWORD *)v20 + 6) == 2)
      {
        if ((*((_WORD *)v20 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v20, v18);
          v19 = v26;
        }
      }
      else
      {
        *((_DWORD *)v20 + 6) -= 2;
      }
    }
    v21 = v27[0];
    v27[0] = 0;
    if (v21)
    {
      if (*((_DWORD *)v21 + 6) == 2)
      {
        if ((*((_WORD *)v21 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v21, v18);
          v19 = v26;
        }
      }
      else
      {
        *((_DWORD *)v21 + 6) -= 2;
      }
    }
  }
  v22 = v30;
  v30 = 0;
  if (v22)
  {
    if (*((_DWORD *)v22 + 6) == 2)
    {
      if ((*((_WORD *)v22 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v22, v18);
        v19 = v26;
      }
    }
    else
    {
      *((_DWORD *)v22 + 6) -= 2;
    }
  }
  if (*((_DWORD *)v19 + 6) == 2)
  {
    if ((*((_WORD *)v19 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v19, v18);
  }
  else
  {
    *((_DWORD *)v19 + 6) -= 2;
  }
LABEL_43:
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v33);
}

uint64_t WebCore::Editor::behavior(WebCore::Editor *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 680) + 370);
}

uint64_t WebCore::Editor::textChecker(WebCore::Editor *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 584))(v2);
  else
    return 0;
}

uint64_t WebCore::Editor::handleTextEvent(WebCore::Editor *this, WebCore::TextEvent *a2)
{
  int v4;
  unsigned int v5;
  uint64_t inserted;
  WTF::StringImpl *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  void *v12;
  int v13;
  WebCore::TypingCommand *v14;
  char shouldInsertText;
  WebCore::Node *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  unsigned __int8 *v19;
  int v20;
  const WebCore::VisiblePosition *v21;
  uint64_t (*v22)();
  void *v23;
  __int128 *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  void *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  int v36;
  char v37;
  char v38;
  WTF::StringImpl *v39;
  int v40;
  char v41;
  WebCore::Node *v42;
  char v43;
  WebCore::TypingCommand *v44;

  v4 = *((_DWORD *)a2 + 21);
  switch(v4)
  {
    case 8:
      goto LABEL_4;
    case 6:
      return 0;
    case 5:
LABEL_4:
      if (v4 == 8)
        v5 = 29;
      else
        v5 = 25;
      if (*((_QWORD *)a2 + 12))
      {
        if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 560))(*(_QWORD *)(*((_QWORD *)this + 1) + 8)) & 1) == 0)
          WebCore::Editor::replaceSelectionWithFragment((uint64_t)this, *((_QWORD *)a2 + 12), 0, *((unsigned __int8 *)a2 + 104), *((unsigned __int8 *)a2 + 105), v5, *((unsigned __int8 *)a2 + 106));
      }
      else
      {
        v27 = (WTF::StringImpl *)*((_QWORD *)a2 + 11);
        if (v27)
          *(_DWORD *)v27 += 2;
        v39 = v27;
        WebCore::Editor::replaceSelectionWithText((uint64_t)this, (const WebCore::SimpleRange *)&v39, 0, *((unsigned __int8 *)a2 + 104), v5);
        v29 = v39;
        v39 = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, v28);
          else
            *(_DWORD *)v29 -= 2;
        }
      }
      return 1;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)a2 + 11);
  if (v7)
    *(_DWORD *)v7 += 2;
  v34 = v7;
  if (!MEMORY[0x19AEA53F4](v7, "\n", 1))
  {
    inserted = WebCore::Editor::insertTextWithoutSendingTextEvent(this, &v34, 0, a2);
    v7 = v34;
    goto LABEL_91;
  }
  if (*((_DWORD *)a2 + 21) != 2)
  {
    if (!WebCore::editableRootForPosition(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 3064) + 120, 0))
    {
      inserted = 0;
      goto LABEL_91;
    }
    v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 3064);
    v10 = *(_QWORD *)(v9 + 120);
    if (v10)
    {
      v11 = *(_BYTE *)(v9 + 132) & 7;
      if (v11 <= 4 && (((1 << v11) & 0x19) != 0 || (v10 = *(_QWORD *)(v10 + 32)) != 0))
      {
        *(_DWORD *)(v10 + 24) += 2;
        v13 = WebCore::Node::computeEditability(v10, 0, 1);
        if (*(_DWORD *)(v10 + 24) == 2)
        {
          if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v10, v12);
        }
        else
        {
          *(_DWORD *)(v10 + 24) -= 2;
        }
        if (v13 == 2)
        {
          v14 = *(WebCore::TypingCommand **)(*((_QWORD *)this + 2) + 8);
          *((_DWORD *)v14 + 6) += 2;
          v44 = v14;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v35 = v39;
          WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(*((_QWORD *)v14 + 383) + 56), &v39);
          shouldInsertText = WebCore::Editor::shouldInsertText((uint64_t)this, (uint64_t)&v35, (uint64_t)&v39, 0);
          if (v43)
          {
            v16 = v42;
            v42 = 0;
            if (v16)
            {
              if (*((_DWORD *)v16 + 6) == 2)
              {
                if ((*((_WORD *)v16 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v16, v8);
              }
              else
              {
                *((_DWORD *)v16 + 6) -= 2;
              }
            }
            v17 = v39;
            v39 = 0;
            if (v17)
            {
              if (*((_DWORD *)v17 + 6) == 2)
              {
                if ((*((_WORD *)v17 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v17, v8);
              }
              else
              {
                *((_DWORD *)v17 + 6) -= 2;
              }
            }
          }
          v18 = v35;
          v35 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
            {
              WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v8);
              if ((shouldInsertText & 1) != 0)
              {
LABEL_33:
                v19 = (unsigned __int8 *)*((_QWORD *)v14 + 383);
                if (v19[153] == 2)
                {
                  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v19 + 120), (uint64_t)&v35);
                  v38 = 1;
                }
                else
                {
                  v20 = v19[152];
                  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v19 + 120), (uint64_t)&v35);
                  v38 = 1;
                  if (!v20)
                  {
                    v30 = v35;
                    if (v35)
                    {
                      *((_DWORD *)v35 + 6) += 2;
                      v39 = v30;
                      v40 = v36;
                      v41 = v37;
                      LOBYTE(v42) = 0;
                      if (!WebCore::inSameLine((WebCore *)&v35, (const WebCore::VisiblePosition *)&v39, v21))
                        v38 = 0;
                      v32 = v39;
                      v39 = 0;
                      if (v32)
                      {
                        if (*((_DWORD *)v32 + 6) == 2)
                        {
                          if ((*((_WORD *)v32 + 15) & 0x400) == 0)
                            WebCore::Node::removedLastRef(v32, v31);
                        }
                        else
                        {
                          *((_DWORD *)v32 + 6) -= 2;
                        }
                      }
                    }
                  }
                }
                if (v35)
                  v22 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
                else
                  v22 = 0;
                if (v22)
                {
                  WebCore::VisiblePosition::next((unsigned __int8 *)&v35, 0, 0, (uint64_t)&v39);
                  if (!v39)
                  {
                    v24 = &WebCore::ScrollAlignment::alignToEdgeIfNeeded;
LABEL_43:
                    WebCore::TypingCommand::insertParagraphSeparator(&v44, 0);
                    if (!*((_BYTE *)this + 88))
                    {
                      v25 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
                      *(_DWORD *)(v25 + 24) += 2;
                      WebCore::FrameSelection::revealSelection(*(_QWORD *)(v25 + 3064), 0, (uint64_t)v24, (BOOL *)1, 1);
                      if (*(_DWORD *)(v25 + 24) == 2)
                      {
                        if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v25, v8);
                      }
                      else
                      {
                        *(_DWORD *)(v25 + 24) -= 2;
                      }
                    }
                    v26 = v35;
                    v35 = 0;
                    if (v26)
                    {
                      if (*((_DWORD *)v26 + 6) == 2)
                      {
                        if ((*((_WORD *)v26 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef(v26, v8);
                      }
                      else
                      {
                        *((_DWORD *)v26 + 6) -= 2;
                      }
                    }
                    v14 = v44;
                    v44 = 0;
                    if (!v14)
                      goto LABEL_66;
                    goto LABEL_64;
                  }
                  if (*((_DWORD *)v39 + 6) == 2)
                  {
                    if ((*((_WORD *)v39 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v39, v23);
                  }
                  else
                  {
                    *((_DWORD *)v39 + 6) -= 2;
                  }
                }
                v24 = (__int128 *)&WebCore::ScrollAlignment::alignCenterIfNeeded;
                goto LABEL_43;
              }
LABEL_63:
              v44 = 0;
LABEL_64:
              if (*((_DWORD *)v14 + 6) == 2)
              {
                if ((*((_WORD *)v14 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v14, v8);
              }
              else
              {
                *((_DWORD *)v14 + 6) -= 2;
              }
LABEL_66:
              inserted = 1;
              goto LABEL_91;
            }
            *(_DWORD *)v18 -= 2;
          }
          if ((shouldInsertText & 1) != 0)
            goto LABEL_33;
          goto LABEL_63;
        }
      }
    }
  }
  inserted = WebCore::Editor::insertLineBreak(this);
LABEL_91:
  v34 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)v8);
    else
      *(_DWORD *)v7 -= 2;
  }
  return inserted;
}

void WebCore::Editor::replaceSelectionWithFragment(uint64_t a1, uint64_t a2, char a3, int a4, int a5, unsigned int a6, int a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  void *v23;
  int v24;
  unsigned __int8 v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WebCore::Node *v29;
  WebCore::Node *v30;
  WebCore::Node *v31;
  WebCore::Node *v32;
  WebCore::Node *v33;
  WTF::StringImpl *v34;
  char v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t *v41;
  uint64_t *v42;
  char v43;
  WTF::StringImpl *v44;
  void *v45;
  uint64_t *v46;
  void *v47;
  WTF::StringImpl *v48;
  uint64_t *v49;
  WebCore::Node *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const WebCore::Position *v55;
  WebCore::Node *v56;
  void *v57;
  int v58;
  int v59;
  unsigned __int8 v60;
  WTF::StringImpl *v61;
  WebCore::Node *v62;
  WebCore::Node *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  const WebCore::VisiblePosition *v69;
  int v70;
  int v71;
  const WebCore::VisiblePosition *v72;
  void *v73;
  WebCore::Node *v74;
  WTF::StringImpl *v75;
  WebCore::AXObjectCache *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 v81;
  WTF::StringImpl *v82;
  WebCore::AXObjectCache *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  WTF::StringImpl *v89;
  int v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int16 v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  WebCore::Node *v100;
  WTF::StringImpl *v101;
  WebCore::Node *v102;
  WebCore::Node *v103;
  WTF::StringImpl *v104;
  void *v105;
  WTF::StringImpl *v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  WebCore::Node *v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  uint64_t v116;
  WTF::StringImpl *v117;
  void *v118;
  WTF::StringImpl *v119;
  WebCore::Node *v120;
  void *v121;
  WTF::StringImpl *v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t i;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t j;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  WTF::StringImpl *v150;
  int v151;
  char v152;
  WebCore::Node *v153;
  int v154;
  char v155;
  WebCore::Node *v156;
  int v157;
  char v158;
  uint64_t v159;
  int v160;
  char v161;
  uint64_t v162;
  int v163;
  char v164;
  uint64_t v165;
  int v166;
  char v167;
  __int16 v168;
  char v169;
  WTF::StringImpl *v170;
  int v171;
  char v172;
  char v173;
  WebCore::Node *v174;
  int v175;
  char v176;
  char v177;
  WTF::StringImpl *v178;
  int v179;
  WebCore::Node *v180;
  int v181;
  WebCore::Node *v182;
  uint64_t v183;
  int v184;
  char v185;
  uint64_t v186;
  int v187;
  char v188;
  uint64_t v189;
  int v190;
  char v191;
  uint64_t v192;
  int v193;
  char v194;
  uint64_t v195;
  int v196;
  char v197;
  uint64_t v198;
  int v199;
  char v200;
  __int16 v201;
  char v202;
  WTF::StringImpl *v203;
  int v204;
  char v205;
  char v206;

  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  *(_DWORD *)(v14 + 24) += 2;
  v15 = *(_QWORD *)(v14 + 3064);
  v16 = *(_QWORD *)(v15 + 56);
  if (v16)
    *(_DWORD *)(v16 + 24) += 2;
  v183 = v16;
  v184 = *(_DWORD *)(v15 + 64);
  v185 = *(_BYTE *)(v15 + 68);
  v17 = *(_QWORD *)(v15 + 72);
  if (v17)
    *(_DWORD *)(v17 + 24) += 2;
  v186 = v17;
  v187 = *(_DWORD *)(v15 + 80);
  v188 = *(_BYTE *)(v15 + 84);
  v18 = *(_QWORD *)(v15 + 88);
  if (v18)
    *(_DWORD *)(v18 + 24) += 2;
  v189 = v18;
  v190 = *(_DWORD *)(v15 + 96);
  v191 = *(_BYTE *)(v15 + 100);
  v19 = *(_QWORD *)(v15 + 104);
  if (v19)
    *(_DWORD *)(v19 + 24) += 2;
  v192 = v19;
  v193 = *(_DWORD *)(v15 + 112);
  v194 = *(_BYTE *)(v15 + 116);
  v20 = *(_QWORD *)(v15 + 120);
  if (v20)
    *(_DWORD *)(v20 + 24) += 2;
  v195 = v20;
  v196 = *(_DWORD *)(v15 + 128);
  v197 = *(_BYTE *)(v15 + 132);
  v21 = *(_QWORD *)(v15 + 136);
  if (v21)
    *(_DWORD *)(v21 + 24) += 2;
  v198 = v21;
  v199 = *(_DWORD *)(v15 + 144);
  v200 = *(_BYTE *)(v15 + 148);
  v201 = *(_WORD *)(v15 + 152);
  v202 = *(_BYTE *)(v15 + 154);
  if (v20)
  {
    if (HIBYTE(v201))
    {
      v22 = v197 & 7;
      if (v22 <= 4 && (((1 << v22) & 0x19) != 0 || (v20 = *(_QWORD *)(v20 + 32)) != 0))
      {
        *(_DWORD *)(v20 + 24) += 2;
        v24 = WebCore::Node::computeEditability(v20, 0, 0);
        if (*(_DWORD *)(v20 + 24) == 2)
        {
          if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v20, v23);
        }
        else
        {
          *(_DWORD *)(v20 + 24) -= 2;
        }
        if (v24)
        {
          v178 = 0;
          v179 = -1;
          v180 = 0;
          v181 = -1;
          v182 = 0;
          v25 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
          if ((v25 & 1) == 0 || a6 > 0x1D || ((1 << a6) & 0x22004000) == 0)
          {
LABEL_39:
            if (a4)
              v35 = 42;
            else
              v35 = 40;
            v36 = v35 | a3;
            if (a5)
              v37 = v36 | 4;
            else
              v37 = v36;
            *(_DWORD *)(v14 + 24) += 2;
            v150 = (WTF::StringImpl *)v14;
            *(_DWORD *)(a2 + 24) += 2;
            v38 = WTF::fastMalloc((WTF *)0x1D8);
            v39 = WebCore::EditCommand::EditCommand(v38, (uint64_t *)&v150, a6);
            *(_OWORD *)(v39 + 248) = 0u;
            *(_OWORD *)(v39 + 264) = 0u;
            *(_QWORD *)v39 = off_1E33ADA18;
            *(_QWORD *)(v39 + 280) = 0;
            *(_DWORD *)(v39 + 288) = 0;
            *(_BYTE *)(v39 + 292) &= 0xF0u;
            *(_QWORD *)(v39 + 296) = 0;
            *(_DWORD *)(v39 + 304) = 0;
            *(_BYTE *)(v39 + 308) &= 0xF0u;
            *(_QWORD *)(v39 + 312) = 0;
            *(_DWORD *)(v39 + 320) = 0;
            *(_BYTE *)(v39 + 324) &= 0xF0u;
            *(_QWORD *)(v39 + 328) = 0;
            *(_DWORD *)(v39 + 336) = 0;
            *(_BYTE *)(v39 + 340) &= 0xF0u;
            *(_QWORD *)(v39 + 344) = 0;
            *(_DWORD *)(v39 + 352) = 0;
            *(_BYTE *)(v39 + 356) &= 0xF0u;
            *(_QWORD *)(v39 + 360) = 0;
            *(_DWORD *)(v39 + 368) = 0;
            *(_BYTE *)(v39 + 372) &= 0xF0u;
            *(_WORD *)(v39 + 376) = 1;
            *(_BYTE *)(v39 + 378) = *(_BYTE *)(v39 + 378) & 0xFC | 1;
            v41 = (uint64_t *)(v39 + 384);
            *(_QWORD *)(v39 + 384) = 0;
            *(_DWORD *)(v39 + 392) = 0;
            *(_BYTE *)(v39 + 396) &= 0xF0u;
            v42 = (uint64_t *)(v39 + 400);
            *(_QWORD *)(v39 + 400) = 0;
            *(_DWORD *)(v39 + 408) = 0;
            *(_BYTE *)(v39 + 412) &= 0xF0u;
            *(_QWORD *)(v39 + 416) = 0;
            if (a7)
              v43 = v37 | 0x40;
            else
              v43 = v37;
            *(_BYTE *)(v39 + 424) = v43 & 1;
            *(_BYTE *)(v39 + 425) = (v43 & 2) != 0;
            *(_BYTE *)(v39 + 426) = (v43 & 4) != 0;
            *(_QWORD *)(v39 + 432) = a2;
            *(_QWORD *)(v39 + 440) = 0;
            *(_QWORD *)(v39 + 448) = 0;
            *(_QWORD *)(v39 + 456) = 0;
            *(_BYTE *)(v39 + 464) = (v43 & 8) != 0;
            *(_BYTE *)(v39 + 465) = (v43 & 0x10) != 0;
            *(_BYTE *)(v39 + 466) = (v43 & 0x20) != 0;
            *(_BYTE *)(v39 + 467) = 0;
            *(_BYTE *)(v39 + 468) = (v43 & 0x40) != 0;
            v44 = v150;
            v150 = 0;
            if (v44)
            {
              if (*((_DWORD *)v44 + 6) == 2)
              {
                if ((*((_WORD *)v44 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v44, v40);
              }
              else
              {
                *((_DWORD *)v44 + 6) -= 2;
              }
            }
            WebCore::CompositeEditCommand::apply((WebCore::CompositeEditCommand *)v38);
            v46 = *(uint64_t **)(a1 + 496);
            if (v46)
            {
              *(_QWORD *)(a1 + 496) = 0;
              v123 = *((unsigned int *)v46 - 1);
              if ((_DWORD)v123)
              {
                v124 = v46;
                do
                {
                  v125 = *v124;
                  if (*v124 != -1)
                  {
                    *v124 = 0;
                    if (v125)
                    {
                      if (*(_DWORD *)(v125 + 24) == 2)
                      {
                        if ((*(_WORD *)(v125 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v125, v45);
                      }
                      else
                      {
                        *(_DWORD *)(v125 + 24) -= 2;
                      }
                    }
                  }
                  ++v124;
                  --v123;
                }
                while (v123);
              }
              WTF::fastFree((WTF *)(v46 - 2), v45);
            }
            WebCore::makeSimpleRange<WebCore::Position &,WebCore::Position &>(v41, v42, (uint64_t)&v150);
            if ((_BYTE)v156)
            {
              WebCore::visibleImageElementsInRangeWithNonLoadedImages((WebCore *)&v150, (uint64_t *)&v170);
              v48 = v170;
              v170 = 0;
              v49 = *(uint64_t **)(a1 + 496);
              *(_QWORD *)(a1 + 496) = v48;
              if (v49)
              {
                v110 = *((unsigned int *)v49 - 1);
                if ((_DWORD)v110)
                {
                  v111 = v49;
                  do
                  {
                    v112 = *v111;
                    if (*v111 != -1)
                    {
                      *v111 = 0;
                      if (v112)
                      {
                        if (*(_DWORD *)(v112 + 24) == 2)
                        {
                          if ((*(_WORD *)(v112 + 30) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)v112, v47);
                        }
                        else
                        {
                          *(_DWORD *)(v112 + 24) -= 2;
                        }
                      }
                    }
                    ++v111;
                    --v110;
                  }
                  while (v110);
                }
                WTF::fastFree((WTF *)(v49 - 2), v47);
                v113 = v170;
                if (v170)
                {
                  v114 = *((unsigned int *)v170 - 1);
                  if ((_DWORD)v114)
                  {
                    v115 = v170;
                    do
                    {
                      v116 = *(_QWORD *)v115;
                      if (*(_QWORD *)v115 != -1)
                      {
                        *(_QWORD *)v115 = 0;
                        if (v116)
                        {
                          if (*(_DWORD *)(v116 + 24) == 2)
                          {
                            if ((*(_WORD *)(v116 + 30) & 0x400) == 0)
                              WebCore::Node::removedLastRef((WebCore::Node *)v116, v47);
                          }
                          else
                          {
                            *(_DWORD *)(v116 + 24) -= 2;
                          }
                        }
                      }
                      v115 = (WTF::StringImpl *)((char *)v115 + 8);
                      --v114;
                    }
                    while (v114);
                  }
                  WTF::fastFree((WTF::StringImpl *)((char *)v113 - 16), v47);
                }
              }
              if ((_BYTE)v156)
              {
                v50 = v153;
                v153 = 0;
                if (v50)
                {
                  if (*((_DWORD *)v50 + 6) == 2)
                  {
                    if ((*((_WORD *)v50 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v50, v47);
                  }
                  else
                  {
                    *((_DWORD *)v50 + 6) -= 2;
                  }
                }
                v51 = v150;
                v150 = 0;
                if (v51)
                {
                  if (*((_DWORD *)v51 + 6) == 2)
                  {
                    if ((*((_WORD *)v51 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v51, v47);
                  }
                  else
                  {
                    *((_DWORD *)v51 + 6) -= 2;
                  }
                }
              }
            }
            v52 = *(_QWORD *)(a1 + 496);
            if ((!v52 || !*(_DWORD *)(v52 - 12)) && !*(_BYTE *)(a1 + 88))
            {
              v53 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
              *(_DWORD *)(v53 + 24) += 2;
              WebCore::FrameSelection::revealSelection(*(_QWORD *)(v53 + 3064), 0, (uint64_t)&WebCore::ScrollAlignment::alignCenterIfNeeded, (BOOL *)1, 1);
              if (*(_DWORD *)(v53 + 24) == 2)
              {
                if ((*(_WORD *)(v53 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v53, v54);
              }
              else
              {
                *(_DWORD *)(v53 + 24) -= 2;
              }
            }
            WebCore::VisibleSelection::operator=(&v183, (uint64_t *)(*(_QWORD *)(v14 + 3064) + 56));
            v56 = WebCore::enclosingTextFormControl((WebCore *)&v195, v55);
            if (v56 && *(_QWORD *)(*((_QWORD *)v56 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
            {
              v58 = *((_DWORD *)v56 + 6);
              *((_DWORD *)v56 + 6) = v58 + 2;
              v59 = *(_DWORD *)(*((_QWORD *)v56 + 30) + 12);
              if (v58)
              {
                *((_DWORD *)v56 + 6) = v58;
              }
              else if ((*((_WORD *)v56 + 15) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef(v56, v57);
              }
              if (v59 == 2048)
                goto LABEL_169;
            }
            v60 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
            if (a6 == 25 && (v60 & 1) != 0)
            {
              v61 = *(WTF::StringImpl **)(v38 + 280);
              if (v61)
                *((_DWORD *)v61 + 6) += 2;
              v150 = v61;
              v151 = *(_DWORD *)(v38 + 288);
              v152 = *(_BYTE *)(v38 + 292);
              v62 = *(WebCore::Node **)(v38 + 296);
              if (v62)
                *((_DWORD *)v62 + 6) += 2;
              v153 = v62;
              v154 = *(_DWORD *)(v38 + 304);
              v155 = *(_BYTE *)(v38 + 308);
              v63 = *(WebCore::Node **)(v38 + 312);
              if (v63)
                *((_DWORD *)v63 + 6) += 2;
              v156 = v63;
              v157 = *(_DWORD *)(v38 + 320);
              v158 = *(_BYTE *)(v38 + 324);
              v64 = *(_QWORD *)(v38 + 328);
              if (v64)
                *(_DWORD *)(v64 + 24) += 2;
              v159 = v64;
              v160 = *(_DWORD *)(v38 + 336);
              v161 = *(_BYTE *)(v38 + 340);
              v65 = *(_QWORD *)(v38 + 344);
              if (v65)
                *(_DWORD *)(v65 + 24) += 2;
              v162 = v65;
              v163 = *(_DWORD *)(v38 + 352);
              v164 = *(_BYTE *)(v38 + 356);
              v66 = *(_QWORD *)(v38 + 360);
              if (v66)
                *(_DWORD *)(v66 + 24) += 2;
              v165 = v66;
              v166 = *(_DWORD *)(v38 + 368);
              v167 = *(_BYTE *)(v38 + 372);
              v168 = *(_WORD *)(v38 + 376);
              v169 = *(_BYTE *)(v38 + 378);
              v67 = HIBYTE(v168);
              v68 = v168;
              WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v162, (uint64_t)&v170);
              v173 = 1;
              if (v67 != 2 && !v68)
              {
                v117 = v170;
                if (v170)
                {
                  *((_DWORD *)v170 + 6) += 2;
                  v203 = v117;
                  v204 = v171;
                  v205 = v172;
                  v206 = 0;
                  if (!WebCore::inSameLine((WebCore *)&v170, (const WebCore::VisiblePosition *)&v203, v69))
                    v173 = 0;
                  v119 = v203;
                  v203 = 0;
                  if (v119)
                  {
                    if (*((_DWORD *)v119 + 6) == 2)
                    {
                      if ((*((_WORD *)v119 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v119, v118);
                    }
                    else
                    {
                      *((_DWORD *)v119 + 6) -= 2;
                    }
                  }
                }
              }
              v70 = HIBYTE(v168);
              v71 = v168;
              WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v165, (uint64_t)&v174);
              v177 = 1;
              if (v70 == 2 || !v71)
              {
                v120 = v174;
                if (v174)
                {
                  *((_DWORD *)v174 + 6) += 2;
                  v203 = v120;
                  v204 = v175;
                  v205 = v176;
                  v206 = 0;
                  if (!WebCore::inSameLine((WebCore *)&v174, (const WebCore::VisiblePosition *)&v203, v72))
                    v177 = 0;
                  v122 = v203;
                  v203 = 0;
                  if (v122)
                  {
                    if (*((_DWORD *)v122 + 6) == 2)
                    {
                      if ((*((_WORD *)v122 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v122, v121);
                    }
                    else
                    {
                      *((_DWORD *)v122 + 6) -= 2;
                    }
                  }
                }
              }
              WebCore::AccessibilityObject::stringForVisiblePositionRange((uint64_t *)&v170, &v203);
              v74 = v174;
              v174 = 0;
              if (v74)
              {
                if (*((_DWORD *)v74 + 6) == 2)
                {
                  if ((*((_WORD *)v74 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v74, v73);
                }
                else
                {
                  *((_DWORD *)v74 + 6) -= 2;
                }
              }
              v75 = v170;
              v170 = 0;
              if (v75)
              {
                if (*((_DWORD *)v75 + 6) == 2)
                {
                  if ((*((_WORD *)v75 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v75, v73);
                }
                else
                {
                  *((_DWORD *)v75 + 6) -= 2;
                }
              }
              WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v150);
              if (WebCore::Document::hasEverCreatedAnAXObjectCache)
              {
                if (*(_BYTE *)(v14 + 3362) || *(_BYTE *)(v14 + 3405))
                {
                  v136 = *(_QWORD *)(v14 + 528);
                  i = v14;
                  if (v136)
                  {
                    v137 = *(_QWORD *)(v136 + 8);
                    i = v14;
                    if (v137)
                    {
                      v138 = *(_QWORD *)(v137 + 120);
                      i = v14;
                      if (v138)
                      {
                        v139 = *(_QWORD *)(v138 + 8);
                        for (i = v14; v139; v139 = *(_QWORD *)(v142 + 8))
                        {
                          i = *(_QWORD *)(*(_QWORD *)(v139 + 40) + 8);
                          v140 = *(_QWORD *)(i + 528);
                          if (!v140)
                            break;
                          v141 = *(_QWORD *)(v140 + 8);
                          if (!v141)
                            break;
                          v142 = *(_QWORD *)(v141 + 120);
                          if (!v142)
                            break;
                        }
                      }
                    }
                  }
                }
                else
                {
                  v126 = *(_QWORD *)(v14 + 528);
                  i = v14;
                  if (v126)
                  {
                    v128 = *(_QWORD *)(v126 + 8);
                    i = v14;
                    if (v128)
                    {
                      v129 = *(_QWORD *)(*(_QWORD *)(v128 + 128) + 8);
                      i = v14;
                      if (v129)
                      {
                        i = v14;
                        if (!*(_BYTE *)(v129 + 144))
                        {
                          v130 = *(_QWORD *)(v129 + 296);
                          i = v14;
                          if (v130)
                            i = v130;
                        }
                      }
                    }
                  }
                }
                v76 = *(WebCore::AXObjectCache **)(i + 1488);
              }
              else
              {
                v76 = 0;
              }
              WebCore::AccessibilityReplacedText::postTextStateChangeNotification((unsigned int *)&v178, v76, 6u, (uint64_t)&v203, *(_QWORD *)(v14 + 3064) + 56);
              ++*(_DWORD *)(v38 + 8);
              v77 = v38;
              while (1)
              {
                v78 = *(_QWORD *)(v77 + 272);
                if (v78)
                  break;
                v79 = *(_QWORD *)(v77 + 232);
                if (v79)
                {
                  v80 = *(_QWORD *)(v79 + 8);
                  if (v80)
                    ++*(_DWORD *)(v80 + 8);
                }
                else
                {
                  v80 = 0;
                }
                if (*(_DWORD *)(v77 + 8) == 1)
                  (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
                else
                  --*(_DWORD *)(v77 + 8);
                v77 = v80;
                if (!v80)
                  goto LABEL_128;
              }
              v88 = *(_DWORD *)(v78 + 8);
              *(_DWORD *)(v78 + 8) = v88 + 1;
              if (v88)
                *(_DWORD *)(v78 + 8) = v88;
              else
                (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
              if (*(_DWORD *)(v77 + 8) == 1)
                (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
              else
                --*(_DWORD *)(v77 + 8);
LABEL_128:
              if (*(_DWORD *)(v78 + 272) == -1 || *(_DWORD *)(v78 + 288) == -1)
              {
                *(_DWORD *)(v78 + 272) = v179;
                WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>::operator=((uint64_t *)(v78 + 280), (uint64_t *)&v180);
                *(_DWORD *)(v78 + 288) = v181;
                WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>::operator=((uint64_t *)(v78 + 296), (uint64_t *)&v182);
              }
              v89 = v203;
              v203 = 0;
              if (v89)
              {
                if (*(_DWORD *)v89 == 2)
                  WTF::StringImpl::destroy(v89, (WTF::StringImpl *)v57);
                else
                  *(_DWORD *)v89 -= 2;
              }
              atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
            }
            else
            {
              v81 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
              if (a6 == 14 && (v81 & 1) != 0)
              {
                v82 = *(WTF::StringImpl **)(v38 + 456);
                if (v82)
                  *(_DWORD *)v82 += 2;
                v150 = v82;
                if (WebCore::Document::hasEverCreatedAnAXObjectCache)
                {
                  if (*(_BYTE *)(v14 + 3362) || *(_BYTE *)(v14 + 3405))
                  {
                    v143 = *(_QWORD *)(v14 + 528);
                    j = v14;
                    if (v143)
                    {
                      v144 = *(_QWORD *)(v143 + 8);
                      j = v14;
                      if (v144)
                      {
                        v145 = *(_QWORD *)(v144 + 120);
                        j = v14;
                        if (v145)
                        {
                          v146 = *(_QWORD *)(v145 + 8);
                          for (j = v14; v146; v146 = *(_QWORD *)(v149 + 8))
                          {
                            j = *(_QWORD *)(*(_QWORD *)(v146 + 40) + 8);
                            v147 = *(_QWORD *)(j + 528);
                            if (!v147)
                              break;
                            v148 = *(_QWORD *)(v147 + 8);
                            if (!v148)
                              break;
                            v149 = *(_QWORD *)(v148 + 120);
                            if (!v149)
                              break;
                          }
                        }
                      }
                    }
                  }
                  else
                  {
                    v131 = *(_QWORD *)(v14 + 528);
                    j = v14;
                    if (v131)
                    {
                      v133 = *(_QWORD *)(v131 + 8);
                      j = v14;
                      if (v133)
                      {
                        v134 = *(_QWORD *)(*(_QWORD *)(v133 + 128) + 8);
                        j = v14;
                        if (v134)
                        {
                          j = v14;
                          if (!*(_BYTE *)(v134 + 144))
                          {
                            v135 = *(_QWORD *)(v134 + 296);
                            j = v14;
                            if (v135)
                              j = v135;
                          }
                        }
                      }
                    }
                  }
                  v83 = *(WebCore::AXObjectCache **)(j + 1488);
                }
                else
                {
                  v83 = 0;
                }
                WebCore::AccessibilityReplacedText::postTextStateChangeNotification((unsigned int *)&v178, v83, 2u, (uint64_t)&v150, *(_QWORD *)(v14 + 3064) + 56);
                ++*(_DWORD *)(v38 + 8);
                v84 = v38;
                while (1)
                {
                  v85 = *(_QWORD *)(v84 + 272);
                  if (v85)
                    break;
                  v86 = *(_QWORD *)(v84 + 232);
                  if (v86)
                  {
                    v87 = *(_QWORD *)(v86 + 8);
                    if (v87)
                      ++*(_DWORD *)(v87 + 8);
                  }
                  else
                  {
                    v87 = 0;
                  }
                  if (*(_DWORD *)(v84 + 8) == 1)
                    (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
                  else
                    --*(_DWORD *)(v84 + 8);
                  v84 = v87;
                  if (!v87)
                    goto LABEL_139;
                }
                v90 = *(_DWORD *)(v85 + 8);
                *(_DWORD *)(v85 + 8) = v90 + 1;
                if (v90)
                  *(_DWORD *)(v85 + 8) = v90;
                else
                  (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
                if (*(_DWORD *)(v84 + 8) == 1)
                  (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
                else
                  --*(_DWORD *)(v84 + 8);
LABEL_139:
                if (*(_DWORD *)(v85 + 272) == -1 || *(_DWORD *)(v85 + 288) == -1)
                {
                  *(_DWORD *)(v85 + 272) = v179;
                  WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>::operator=((uint64_t *)(v85 + 280), (uint64_t *)&v180);
                  *(_DWORD *)(v85 + 288) = v181;
                  WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>::operator=((uint64_t *)(v85 + 296), (uint64_t *)&v182);
                }
                v91 = v150;
                v150 = 0;
                if (v91)
                {
                  if (*(_DWORD *)v91 == 2)
                    WTF::StringImpl::destroy(v91, (WTF::StringImpl *)v57);
                  else
                    *(_DWORD *)v91 -= 2;
                }
              }
            }
            v92 = *(_QWORD *)(a1 + 8);
            if (!v92)
              goto LABEL_169;
            v93 = *(_QWORD *)(v92 + 8);
            if (!v93)
              goto LABEL_169;
            if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v93 + 40))(v93))
              goto LABEL_169;
            v94 = WebCore::editableRootForPosition((uint64_t)&v195, 0);
            if (!v94)
              goto LABEL_169;
            v95 = v94;
            *(_DWORD *)(v94 + 24) += 6;
            v96 = *(_WORD *)(v94 + 28);
            if ((v96 & 1) != 0)
            {
              v98 = *(_QWORD *)(v94 + 80);
              if (v98)
                LODWORD(v98) = *(_DWORD *)(v98 + 4);
            }
            else if ((v96 & 4) != 0 && (v97 = *(_QWORD *)(v94 + 80)) != 0)
            {
              LODWORD(v98) = 0;
              do
              {
                LODWORD(v98) = v98 + 1;
                v97 = *(_QWORD *)(v97 + 56);
              }
              while (v97);
            }
            else
            {
              LODWORD(v98) = 0;
            }
            v150 = (WTF::StringImpl *)v94;
            v151 = 0;
            v153 = (WebCore::Node *)v94;
            v154 = v98;
            WebCore::plainText(&v150, 0, 0, (const WTF::String *)&v170);
            v99 = v170;
            if (!v170)
            {
LABEL_161:
              v100 = v153;
              v153 = 0;
              if (v100)
              {
                if (*((_DWORD *)v100 + 6) == 2)
                {
                  if ((*((_WORD *)v100 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v100, v57);
                }
                else
                {
                  *((_DWORD *)v100 + 6) -= 2;
                }
              }
              v101 = v150;
              v150 = 0;
              if (v101)
              {
                if (*((_DWORD *)v101 + 6) == 2)
                {
                  if ((*((_WORD *)v101 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v101, v57);
                }
                else
                {
                  *((_DWORD *)v101 + 6) -= 2;
                }
              }
              if (*(_DWORD *)(v95 + 24) == 2)
              {
                if ((*(_WORD *)(v95 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v95, v57);
              }
              else
              {
                *(_DWORD *)(v95 + 24) -= 2;
              }
LABEL_169:
              if (*(_DWORD *)(v38 + 8) == 1)
                (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
              else
                --*(_DWORD *)(v38 + 8);
              v102 = v182;
              v182 = 0;
              if (v102)
              {
                if (*((_DWORD *)v102 + 6) == 2)
                {
                  if ((*((_WORD *)v102 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v102, v57);
                }
                else
                {
                  *((_DWORD *)v102 + 6) -= 2;
                }
              }
              v103 = v180;
              v180 = 0;
              if (v103)
              {
                if (*((_DWORD *)v103 + 6) == 2)
                {
                  if ((*((_WORD *)v103 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v103, v57);
                }
                else
                {
                  *((_DWORD *)v103 + 6) -= 2;
                }
              }
              v104 = v178;
              v178 = 0;
              if (v104)
              {
                if (*(_DWORD *)v104 == 2)
                  WTF::StringImpl::destroy(v104, (WTF::StringImpl *)v57);
                else
                  *(_DWORD *)v104 -= 2;
              }
              goto LABEL_180;
            }
            if (*((_DWORD *)v170 + 1))
            {
              v106 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0xA0);
              WebCore::SpellCheckRequest::SpellCheckRequest((uint64_t)v106, (uint64_t)&v150, (uint64_t *)&v150, (uint64_t *)&v150, (_DWORD **)&v170, 3, 0);
              v99 = v170;
              v170 = 0;
              if (!v99)
                goto LABEL_204;
            }
            else
            {
              v106 = 0;
              v170 = 0;
            }
            if (*(_DWORD *)v99 == 2)
            {
              WTF::StringImpl::destroy(v99, (WTF::StringImpl *)v57);
              if (!v106)
                goto LABEL_161;
            }
            else
            {
              *(_DWORD *)v99 -= 2;
              if (!v106)
                goto LABEL_161;
            }
LABEL_204:
            v107 = *(_QWORD *)(a1 + 104);
            v170 = v106;
            WebCore::SpellChecker::requestCheckingFor(v107, (uint64_t *)&v170);
            v108 = v170;
            v170 = 0;
            if (v108)
            {
              if (*((_DWORD *)v108 + 2) == 1)
                (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v108 + 8))(v108);
              else
                --*((_DWORD *)v108 + 2);
            }
            goto LABEL_161;
          }
          WebCore::AccessibilityReplacedText::AccessibilityReplacedText((WebCore::AccessibilityReplacedText *)&v150, (const WebCore::VisibleSelection *)&v183);
          v27 = v150;
          v150 = 0;
          v28 = v178;
          v178 = v27;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
              WTF::StringImpl::destroy(v28, v26);
            else
              *(_DWORD *)v28 -= 2;
          }
          v179 = v151;
          v29 = v153;
          v153 = 0;
          v30 = v180;
          v180 = v29;
          if (v30)
          {
            if (*((_DWORD *)v30 + 6) == 2)
            {
              if ((*((_WORD *)v30 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v30, v26);
            }
            else
            {
              *((_DWORD *)v30 + 6) -= 2;
            }
          }
          v181 = v154;
          v31 = v156;
          v156 = 0;
          v32 = v182;
          v182 = v31;
          if (v32)
          {
            if (*((_DWORD *)v32 + 6) == 2)
            {
              if ((*((_WORD *)v32 + 15) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef(v32, v26);
                v109 = v156;
                v156 = 0;
                if (v109)
                {
                  if (*((_DWORD *)v109 + 6) == 2)
                  {
                    if ((*((_WORD *)v109 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v109, v26);
                  }
                  else
                  {
                    *((_DWORD *)v109 + 6) -= 2;
                  }
                }
                goto LABEL_33;
              }
            }
            else
            {
              *((_DWORD *)v32 + 6) -= 2;
            }
            v156 = 0;
          }
LABEL_33:
          v33 = v153;
          v153 = 0;
          if (v33)
          {
            if (*((_DWORD *)v33 + 6) == 2)
            {
              if ((*((_WORD *)v33 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v33, v26);
            }
            else
            {
              *((_DWORD *)v33 + 6) -= 2;
            }
          }
          v34 = v150;
          v150 = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, v26);
            else
              *(_DWORD *)v34 -= 2;
          }
          goto LABEL_39;
        }
      }
    }
  }
LABEL_180:
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v183);
  if (*(_DWORD *)(v14 + 24) == 2)
  {
    if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v14, v105);
  }
  else
  {
    *(_DWORD *)(v14 + 24) -= 2;
  }
}

unsigned int *WebCore::Editor::replaceSelectionWithText(uint64_t a1, const WebCore::SimpleRange *a2, char a3, int a4, unsigned int a5)
{
  unsigned int *result;
  void *v11;
  WebCore::Node *v12;
  WebCore::Node *v13;
  WebCore::Node *v14[2];
  WebCore::Node *v15;
  char v16;

  result = (unsigned int *)WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 3064)+ 56), v14);
  if (v16)
  {
    WebCore::createFragmentFromText(v14, a2, (uint64_t *)&v13);
    WebCore::Editor::replaceSelectionWithFragment(a1, (uint64_t)v13, a3, a4, 1, a5, 0);
    result = (unsigned int *)v13;
    v13 = 0;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)result, v11);
      }
      else
      {
        result[6] -= 2;
      }
    }
    if (v16)
    {
      v12 = v15;
      v15 = 0;
      if (v12)
      {
        if (*((_DWORD *)v12 + 6) == 2)
        {
          if ((*((_WORD *)v12 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v12, v11);
        }
        else
        {
          *((_DWORD *)v12 + 6) -= 2;
        }
      }
      result = (unsigned int *)v14[0];
      v14[0] = 0;
      if (result)
      {
        if (result[6] == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)result, v11);
        }
        else
        {
          result[6] -= 2;
        }
      }
    }
  }
  return result;
}

BOOL WebCore::Editor::insertLineBreak(WebCore::Editor *this)
{
  uint64_t v2;
  WebCore::TypingCommand *v3;
  void *v4;
  char shouldInsertText;
  WebCore::Node *v6;
  WebCore::Node *v7;
  WTF::StringImpl *v8;
  unsigned __int8 *v9;
  int v10;
  const WebCore::VisiblePosition *v11;
  uint64_t (*v12)();
  void *v13;
  __int128 *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WebCore::Node *v18;
  void *v19;
  WebCore::Node *v20;
  WTF::StringImpl *v21;
  int v22;
  char v23;
  char v24;
  WebCore::Node *v25;
  int v26;
  char v27;
  WebCore::Node *v28;
  char v29;
  WebCore::TypingCommand *v30;

  v2 = WebCore::editableRootForPosition(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 3064) + 120, 0);
  if (!v2)
    return v2 != 0;
  v3 = *(WebCore::TypingCommand **)(*((_QWORD *)this + 2) + 8);
  *((_DWORD *)v3 + 6) += 2;
  v30 = v3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v21 = v25;
  WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(*((_QWORD *)v3 + 383) + 56), &v25);
  shouldInsertText = WebCore::Editor::shouldInsertText((uint64_t)this, (uint64_t)&v21, (uint64_t)&v25, 0);
  if (v29)
  {
    v6 = v28;
    v28 = 0;
    if (v6)
    {
      if (*((_DWORD *)v6 + 6) == 2)
      {
        if ((*((_WORD *)v6 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v6, v4);
      }
      else
      {
        *((_DWORD *)v6 + 6) -= 2;
      }
    }
    v7 = v25;
    v25 = 0;
    if (v7)
    {
      if (*((_DWORD *)v7 + 6) == 2)
      {
        if ((*((_WORD *)v7 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v7, v4);
      }
      else
      {
        *((_DWORD *)v7 + 6) -= 2;
      }
    }
  }
  v8 = v21;
  v21 = 0;
  if (!v8)
  {
LABEL_12:
    if ((shouldInsertText & 1) != 0)
      goto LABEL_13;
LABEL_32:
    v30 = 0;
LABEL_33:
    if (*((_DWORD *)v3 + 6) == 2)
    {
      if ((*((_WORD *)v3 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v3, v4);
    }
    else
    {
      *((_DWORD *)v3 + 6) -= 2;
    }
    return v2 != 0;
  }
  if (*(_DWORD *)v8 != 2)
  {
    *(_DWORD *)v8 -= 2;
    goto LABEL_12;
  }
  WTF::StringImpl::destroy(v8, (WTF::StringImpl *)v4);
  if ((shouldInsertText & 1) == 0)
    goto LABEL_32;
LABEL_13:
  v9 = (unsigned __int8 *)*((_QWORD *)v3 + 383);
  if (v9[153] == 2)
  {
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v9 + 120), (uint64_t)&v21);
    v24 = 1;
  }
  else
  {
    v10 = v9[152];
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v9 + 120), (uint64_t)&v21);
    v24 = 1;
    if (!v10)
    {
      v18 = v21;
      if (v21)
      {
        *((_DWORD *)v21 + 6) += 2;
        v25 = v18;
        v26 = v22;
        v27 = v23;
        LOBYTE(v28) = 0;
        if (!WebCore::inSameLine((WebCore *)&v21, (const WebCore::VisiblePosition *)&v25, v11))
          v24 = 0;
        v20 = v25;
        v25 = 0;
        if (v20)
        {
          if (*((_DWORD *)v20 + 6) == 2)
          {
            if ((*((_WORD *)v20 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v20, v19);
          }
          else
          {
            *((_DWORD *)v20 + 6) -= 2;
          }
        }
      }
    }
  }
  if (v21)
    v12 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v12 = 0;
  if (!v12)
    goto LABEL_22;
  WebCore::VisiblePosition::next((unsigned __int8 *)&v21, 0, 0, (uint64_t)&v25);
  if (v25)
  {
    if (*((_DWORD *)v25 + 6) == 2)
    {
      if ((*((_WORD *)v25 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v25, v13);
    }
    else
    {
      *((_DWORD *)v25 + 6) -= 2;
    }
LABEL_22:
    v14 = (__int128 *)&WebCore::ScrollAlignment::alignCenterIfNeeded;
    goto LABEL_23;
  }
  v14 = &WebCore::ScrollAlignment::alignToEdgeIfNeeded;
LABEL_23:
  WebCore::TypingCommand::insertLineBreak(&v30, 0);
  if (!*((_BYTE *)this + 88))
  {
    v15 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
    *(_DWORD *)(v15 + 24) += 2;
    WebCore::FrameSelection::revealSelection(*(_QWORD *)(v15 + 3064), 0, (uint64_t)v14, (BOOL *)1, 1);
    if (*(_DWORD *)(v15 + 24) == 2)
    {
      if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v15, v4);
    }
    else
    {
      *(_DWORD *)(v15 + 24) -= 2;
    }
  }
  v16 = v21;
  v21 = 0;
  if (v16)
  {
    if (*((_DWORD *)v16 + 6) == 2)
    {
      if ((*((_WORD *)v16 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v16, v4);
    }
    else
    {
      *((_DWORD *)v16 + 6) -= 2;
    }
  }
  v3 = v30;
  v30 = 0;
  if (v3)
    goto LABEL_33;
  return v2 != 0;
}

uint64_t WebCore::Editor::insertTextWithoutSendingTextEvent(WebCore::Editor *this, const WTF::StringImpl **a2, char a3, WebCore::TextEvent *a4)
{
  uint64_t v4;
  unsigned int v10;
  void *v11;
  int v12;
  void *v13;
  int shouldInsertText;
  uint64_t v15;
  WebCore::TypingCommand *v16;
  int v17;
  int v18;
  const WebCore::VisiblePosition *v19;
  void *v20;
  WebCore::Node *v21;
  void *v22;
  unsigned __int16 v23;
  WebCore::Node *v24;
  unsigned int v25;
  WebCore::Node *v26;
  const WTF::StringImpl *v27;
  unsigned __int8 *v28;
  unsigned int v29;
  _BOOL4 v30;
  const WTF::StringImpl *v31;
  int v32;
  char v33;
  char v34;
  unsigned __int16 *v35;
  UChar32 v36;
  const WTF::StringImpl *v37;
  unsigned __int8 *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  WebCore::TypingCommand *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  WebCore::Node *v49;
  void *v50;
  WebCore::Node *v51;
  void *v52;
  _DWORD *v53;
  _QWORD *v54;
  WebCore::Node *v55;
  WebCore::Node *v56;
  WebCore::Node *v57;
  WebCore::Node *v58;
  uint64_t v59;
  unsigned int v60;
  void *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  void *v67;
  char v68;
  char v69;
  int v70;
  WebCore::TypingCommand *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WebCore::Page *v77;
  WebCore::Node *v78;
  void *v79;
  WebCore::TypingCommand *v80;
  uint64_t v81[8];
  uint64_t v82;
  char v83;
  unsigned __int8 v84;
  unsigned __int8 v85;
  WebCore::Node *v86;
  uint64_t v87;
  WebCore::Node *v88;
  char v89;
  WebCore::Node *v90[3];
  WebCore::Node *v91;
  int v92;
  char v93;
  char v94;
  uint64_t v95;
  int v96;
  char v97;
  WebCore::TypingCommand *v98;
  int v99;
  char v100;
  uint64_t v101;
  int v102;
  char v103;
  uint64_t v104;
  int v105;
  char v106;
  uint64_t v107;
  int v108;
  char v109;
  uint64_t v110;
  int v111;
  char v112;
  uint64_t v113;
  int v114;
  char v115;
  __int16 v116;
  char v117;
  _QWORD *v118;
  char v119;

  if (*a2 && *((_DWORD *)*a2 + 1))
  {
    WebCore::Editor::selectionForCommand((WebCore::Editor *)v81, *(WebCore::Event **)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 3064), (uint64_t)a4);
    v4 = v82;
    if (v82)
    {
      v10 = v83 & 7;
      if (v10 <= 4)
      {
        if (((1 << v10) & 0x19) == 0)
        {
          v4 = *(_QWORD *)(v82 + 32);
          if (!v4)
            goto LABEL_150;
        }
        *(_DWORD *)(v4 + 24) += 2;
        v12 = WebCore::Node::computeEditability(v4, 0, 0);
        if (*(_DWORD *)(v4 + 24) == 2)
        {
          if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v4, v11);
        }
        else
        {
          *(_DWORD *)(v4 + 24) -= 2;
        }
        if (v12)
        {
          WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)v81, &v98);
          shouldInsertText = WebCore::Editor::shouldInsertText((uint64_t)this, (uint64_t)a2, (uint64_t)&v98, 0);
          if ((_BYTE)v104)
          {
            v15 = v101;
            v101 = 0;
            if (v15)
            {
              if (*(_DWORD *)(v15 + 24) == 2)
              {
                if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v15, v13);
              }
              else
              {
                *(_DWORD *)(v15 + 24) -= 2;
              }
            }
            v16 = v98;
            v98 = 0;
            if (v16)
            {
              if (*((_DWORD *)v16 + 6) == 2)
              {
                if ((*((_WORD *)v16 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v16, v13);
              }
              else
              {
                *((_DWORD *)v16 + 6) -= 2;
              }
            }
          }
          v4 = 1;
          if (!shouldInsertText)
            goto LABEL_150;
          v17 = v85;
          v18 = v84;
          WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v82, (uint64_t)&v91);
          v94 = 1;
          if (v17 != 2 && !v18)
          {
            v78 = v91;
            if (v91)
            {
              *((_DWORD *)v91 + 6) += 2;
              v98 = v78;
              v99 = v92;
              v100 = v93;
              LOBYTE(v101) = 0;
              if (!WebCore::inSameLine((WebCore *)&v91, (const WebCore::VisiblePosition *)&v98, v19))
                v94 = 0;
              v80 = v98;
              v98 = 0;
              if (v80)
              {
                if (*((_DWORD *)v80 + 6) == 2)
                {
                  if ((*((_WORD *)v80 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v80, v79);
                }
                else
                {
                  *((_DWORD *)v80 + 6) -= 2;
                }
              }
            }
          }
          WebCore::previousVisuallyDistinctCandidate(&v91, (uint64_t)v90);
          if (WebCore::Position::atStartOfTree((WebCore::Position *)v90))
          {
            v86 = 0;
            v87 = 0;
            v88 = 0;
          }
          else
          {
            WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v90, (uint64_t)&v98);
            v86 = v98;
            LODWORD(v87) = v99;
            BYTE4(v87) = v100;
          }
          LOBYTE(v88) = 1;
          v21 = v90[0];
          v90[0] = 0;
          if (v21)
          {
            if (*((_DWORD *)v21 + 6) == 2)
            {
              if ((*((_WORD *)v21 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v21, v20);
            }
            else
            {
              *((_DWORD *)v21 + 6) -= 2;
            }
          }
          v23 = WebCore::VisiblePosition::characterAfter((WebCore::VisiblePosition *)&v86);
          v24 = v86;
          v86 = 0;
          if (v24)
          {
            if (*((_DWORD *)v24 + 6) == 2)
            {
              if ((*((_WORD *)v24 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v24, v22);
            }
            else
            {
              *((_DWORD *)v24 + 6) -= 2;
            }
          }
          if (v23 > 0xFFu)
          {
            v25 = MEMORY[0x19AEA858C]() == 9;
          }
          else if (v23 == 11)
          {
            v25 = 1;
          }
          else
          {
            v25 = (v23 < 0x21u) & (0x100003600uLL >> v23);
          }
          v26 = v91;
          v91 = 0;
          if (v26)
          {
            if (*((_DWORD *)v26 + 6) == 2)
            {
              if ((*((_WORD *)v26 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v26, v22);
            }
            else
            {
              *((_DWORD *)v26 + 6) -= 2;
            }
          }
          v27 = *a2;
          if (*a2 && *((_DWORD *)v27 + 1))
          {
            v28 = (unsigned __int8 *)*((_QWORD *)v27 + 1);
            if ((*((_BYTE *)v27 + 16) & 4) != 0)
            {
              v29 = *v28;
            }
            else
            {
              v29 = *(unsigned __int16 *)v28;
              if (v29 > 0xFF)
              {
                v30 = MEMORY[0x19AEA858C]() == 9;
                goto LABEL_47;
              }
            }
            if (v29 <= 0x20u && ((1 << v29) & 0x100003600) != 0)
            {
              v30 = 1;
              goto LABEL_45;
            }
          }
          else
          {
            v29 = 0;
          }
          v30 = 0;
LABEL_45:
          if (v29 == 11)
            v30 = 1;
LABEL_47:
          WebCore::Editor::updateMarkersForWordsAffectedByEditing((uint64_t)this, v30 | v25);
          if ((MEMORY[0x19AEA53F4](*a2, " ", 1) & 1) != 0 || MEMORY[0x19AEA53F4](*a2, "\t", 1))
          {
            v31 = *a2;
            if (!*a2)
              goto LABEL_71;
            v32 = 1;
          }
          else
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            v31 = *a2;
            if (!*a2)
            {
LABEL_113:
              WebCore::Editor::selectionForCommand((WebCore::Editor *)&v98, *(WebCore::Event **)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 3064), (uint64_t)a4);
              WebCore::VisibleSelection::operator=(v81, (uint64_t *)&v98);
              WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v98);
              v59 = v82;
              if (!v82)
                goto LABEL_149;
              v60 = v83 & 7;
              v4 = 1;
              if (v60 > 4)
                goto LABEL_150;
              if (((1 << v60) & 0x19) == 0)
              {
                v59 = *(_QWORD *)(v82 + 32);
                if (!v59)
                  goto LABEL_150;
              }
              *(_DWORD *)(v59 + 24) += 2;
              v62 = WebCore::Node::computeEditability(v59, 0, 0);
              if (*(_DWORD *)(v59 + 24) == 2)
              {
                if ((*(_WORD *)(v59 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v59, v61);
              }
              else
              {
                *(_DWORD *)(v59 + 24) -= 2;
              }
              if (!v62)
                goto LABEL_149;
              v63 = v82;
              if (!v82)
                goto LABEL_149;
              *(_DWORD *)(v82 + 24) += 2;
              v64 = *(_QWORD *)(*(_QWORD *)(v63 + 40) + 8);
              v65 = *(_DWORD *)(v64 + 24);
              if (a4)
              {
                v66 = *((_DWORD *)a4 + 21);
                if (v66 == 7)
                {
                  *(_DWORD *)(v64 + 24) = v65 + 4;
                  v98 = (WebCore::TypingCommand *)v64;
                  WebCore::DictationCommand::insertText((uint64_t *)&v98, a2, (__int128 **)a4 + 14, (const WTF::String *)v81);
LABEL_134:
                  v71 = v98;
                  v98 = 0;
                  if (v71)
                  {
                    if (*((_DWORD *)v71 + 6) == 2)
                    {
                      if ((*((_WORD *)v71 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v71, v67);
                    }
                    else
                    {
                      *((_DWORD *)v71 + 6) -= 2;
                    }
                  }
                  v72 = *((_QWORD *)this + 1);
                  if (v72)
                  {
                    v73 = *(_QWORD *)(v72 + 8);
                    if (v73)
                    {
                      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v73 + 120))(v73))
                      {
                        v74 = *(_QWORD *)(v64 + 528);
                        if (v74)
                        {
                          v75 = *(_QWORD *)(v74 + 8);
                          if (v75)
                          {
                            v76 = *(_QWORD *)(v75 + 24);
                            if (v76)
                            {
                              v77 = *(WebCore::Page **)(v76 + 8);
                              if (v77)
                                WebCore::Page::revealCurrentSelection(v77);
                            }
                          }
                        }
                      }
                    }
                  }
                  if (*(_DWORD *)(v64 + 24) == 2)
                  {
                    if ((*(_WORD *)(v64 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v64, v67);
                  }
                  else
                  {
                    *(_DWORD *)(v64 + 24) -= 2;
                  }
                  if (*(_DWORD *)(v63 + 24) == 2)
                  {
                    if ((*(_WORD *)(v63 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v63, v67);
                  }
                  else
                  {
                    *(_DWORD *)(v63 + 24) -= 2;
                  }
LABEL_149:
                  v4 = 1;
                  goto LABEL_150;
                }
                if (v66 == 1)
                  v69 = 36;
                else
                  v69 = 4;
                v68 = v69 | a3;
              }
              else
              {
                v68 = a3 | 4;
              }
              if ((v33 & ((v68 & 0x20) == 0) & ~v34) != 0)
                v68 &= ~4u;
              *(_DWORD *)(v64 + 24) = v65 + 4;
              v98 = (WebCore::TypingCommand *)v64;
              if (a4)
                v70 = 2 * (*((_DWORD *)a4 + 21) == 3);
              else
                v70 = 0;
              WebCore::TypingCommand::insertText(&v98, (WebCore *)a2, (WTF::String *)v81, v68, v70);
              goto LABEL_134;
            }
          }
          if (*((_DWORD *)v31 + 1) != 1
            || ((v35 = (unsigned __int16 *)*((_QWORD *)v31 + 1), (*((_BYTE *)v31 + 16) & 4) == 0)
              ? (v36 = *v35)
              : (v36 = *(unsigned __int8 *)v35),
                !u_ispunct(v36)))
          {
            if (v32)
              goto LABEL_71;
LABEL_101:
            v33 = 0;
            v34 = 0;
            goto LABEL_113;
          }
          v37 = *a2;
          if (*a2 && *((_DWORD *)v37 + 1))
          {
            v38 = (unsigned __int8 *)*((_QWORD *)v37 + 1);
            if ((*((_BYTE *)v37 + 16) & 4) != 0)
              v39 = *v38;
            else
              v39 = *(unsigned __int16 *)v38;
            if (v39 <= 1523)
            {
              if (v39 != 39 && v39 != 64)
                goto LABEL_71;
              goto LABEL_70;
            }
            if (v39 == 8217 || v39 == 1524)
            {
LABEL_70:
              if ((v32 & 1) != 0)
                goto LABEL_71;
              goto LABEL_101;
            }
          }
LABEL_71:
          v40 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
          v41 = *(_QWORD *)(v40 + 3064);
          v42 = *(WebCore::TypingCommand **)(v41 + 56);
          if (v42)
            *((_DWORD *)v42 + 6) += 2;
          v98 = v42;
          v99 = *(_DWORD *)(v41 + 64);
          v100 = *(_BYTE *)(v41 + 68);
          v43 = *(_QWORD *)(v41 + 72);
          if (v43)
            *(_DWORD *)(v43 + 24) += 2;
          v101 = v43;
          v102 = *(_DWORD *)(v41 + 80);
          v103 = *(_BYTE *)(v41 + 84);
          v44 = *(_QWORD *)(v41 + 88);
          if (v44)
            *(_DWORD *)(v44 + 24) += 2;
          v104 = v44;
          v105 = *(_DWORD *)(v41 + 96);
          v106 = *(_BYTE *)(v41 + 100);
          v45 = *(_QWORD *)(v41 + 104);
          if (v45)
            *(_DWORD *)(v45 + 24) += 2;
          v107 = v45;
          v108 = *(_DWORD *)(v41 + 112);
          v109 = *(_BYTE *)(v41 + 116);
          v46 = *(_QWORD *)(v41 + 120);
          if (v46)
            *(_DWORD *)(v46 + 24) += 2;
          v110 = v46;
          v111 = *(_DWORD *)(v41 + 128);
          v112 = *(_BYTE *)(v41 + 132);
          v47 = *(_QWORD *)(v41 + 136);
          if (v47)
            *(_DWORD *)(v47 + 24) += 2;
          v113 = v47;
          v114 = *(_DWORD *)(v41 + 144);
          v115 = *(_BYTE *)(v41 + 148);
          v116 = *(_WORD *)(v41 + 152);
          v117 = *(_BYTE *)(v41 + 154);
          if (v46)
            *(_DWORD *)(v46 + 24) += 2;
          v95 = v46;
          v96 = v111;
          v97 = v112;
          WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v95, (uint64_t)&v86);
          LOBYTE(v88) = 1;
          WebCore::startOfWord((uint64_t)&v86, 1, (uint64_t)&v91);
          v49 = v86;
          v86 = 0;
          if (v49)
          {
            if (*((_DWORD *)v49 + 6) == 2)
            {
              if ((*((_WORD *)v49 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v49, v48);
            }
            else
            {
              *((_DWORD *)v49 + 6) -= 2;
            }
          }
          WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v95, (uint64_t)&v86);
          LOBYTE(v88) = 1;
          WebCore::endOfWord((WebCore *)&v86, 1, (uint64_t)v90);
          v51 = v86;
          v86 = 0;
          if (v51)
          {
            if (*((_DWORD *)v51 + 6) == 2)
            {
              if ((*((_WORD *)v51 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v51, v50);
            }
            else
            {
              *((_DWORD *)v51 + 6) -= 2;
            }
          }
          WebCore::makeSimpleRange<WebCore::VisiblePosition,WebCore::VisiblePosition>((uint64_t *)&v91, (uint64_t)v90, (uint64_t)&v86);
          if (v89)
          {
            v53 = *(_DWORD **)(v40 + 1496);
            if (v53)
            {
              ++*v53;
              v119 = 0;
              v54 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v54 = off_1E33A3CD8;
              v54[1] = &v119;
              v118 = v54;
              WebCore::DocumentMarkerController::forEach<(WebCore::DocumentMarkerController::IterationDirection)0>((uint64_t)v53, (uint64_t *)&v86, 16, &v118);
              (*(void (**)(_QWORD *))(*v54 + 8))(v54);
              if (!*v53)
              {
                __break(0xC471u);
                JUMPOUT(0x195ABD8B4);
              }
              v34 = v119 != 0;
              --*v53;
              if (!v89)
                goto LABEL_103;
            }
            else
            {
              v34 = 0;
            }
            v55 = v88;
            v88 = 0;
            if (v55)
            {
              if (*((_DWORD *)v55 + 6) == 2)
              {
                if ((*((_WORD *)v55 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v55, v52);
              }
              else
              {
                *((_DWORD *)v55 + 6) -= 2;
              }
            }
            v56 = v86;
            v86 = 0;
            if (v56)
            {
              if (*((_DWORD *)v56 + 6) == 2)
              {
                if ((*((_WORD *)v56 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v56, v52);
              }
              else
              {
                *((_DWORD *)v56 + 6) -= 2;
              }
            }
          }
          else
          {
            v34 = 0;
          }
LABEL_103:
          v57 = v90[0];
          v90[0] = 0;
          if (v57)
          {
            if (*((_DWORD *)v57 + 6) == 2)
            {
              if ((*((_WORD *)v57 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v57, v52);
            }
            else
            {
              *((_DWORD *)v57 + 6) -= 2;
            }
          }
          v58 = v91;
          v91 = 0;
          if (v58)
          {
            if (*((_DWORD *)v58 + 6) == 2)
            {
              if ((*((_WORD *)v58 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v58, v52);
            }
            else
            {
              *((_DWORD *)v58 + 6) -= 2;
            }
          }
          if (v46)
          {
            if (*(_DWORD *)(v46 + 24) == 2)
            {
              if ((*(_WORD *)(v46 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v46, v52);
            }
            else
            {
              *(_DWORD *)(v46 + 24) -= 2;
            }
          }
          WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v98);
          v33 = 1;
          goto LABEL_113;
        }
      }
      v4 = 0;
    }
LABEL_150:
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v81);
    return v4;
  }
  return 0;
}

BOOL WebCore::Editor::canEdit(WebCore::Editor *this)
{
  return WebCore::editableRootForPosition(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 3064) + 120, 0) != 0;
}

BOOL WebCore::Editor::canEditRichly(WebCore::Editor *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  void *v4;
  _BOOL8 v5;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 3064);
  v2 = *(_QWORD *)(v1 + 120);
  if (!v2)
    return 0;
  v3 = *(_BYTE *)(v1 + 132) & 7;
  if (v3 > 4)
    return 0;
  if (((1 << v3) & 0x19) == 0)
  {
    v2 = *(_QWORD *)(v2 + 32);
    if (!v2)
      return 0;
  }
  *(_DWORD *)(v2 + 24) += 2;
  v5 = WebCore::Node::computeEditability(v2, 0, 1) == 2;
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v4);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return v5;
}

uint64_t WebCore::Editor::canDHTMLCut(WebCore::Editor *this, const WebCore::Position *a2)
{
  WebCore::Node *v3;
  void *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;

  v3 = WebCore::enclosingTextFormControl((WebCore *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 3064) + 120), a2);
  if (v3 && *(_QWORD *)(*((_QWORD *)v3 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    v5 = *((_DWORD *)v3 + 6);
    *((_DWORD *)v3 + 6) = v5 + 2;
    v6 = *(_DWORD *)(*((_QWORD *)v3 + 30) + 12);
    if (v5)
    {
      *((_DWORD *)v3 + 6) = v5;
    }
    else if ((*((_WORD *)v3 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v3, v4);
    }
    if (v6 == 2048)
      return 0;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 3064) + 120);
  if (v8)
  {
    *(_DWORD *)(v8 + 24) += 2;
    while (1)
    {
      v9 = v8;
      if ((*(_WORD *)(v8 + 28) & 8) != 0)
        break;
      v8 = *(_QWORD *)(v8 + 32);
      if (v8)
        *(_DWORD *)(v8 + 24) += 2;
      if (*(_DWORD *)(v9 + 24) == 2)
      {
        if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v9, v4);
      }
      else
      {
        *(_DWORD *)(v9 + 24) -= 2;
      }
      if (!v8)
        goto LABEL_20;
    }
    v10 = *(_DWORD *)(v8 + 24);
    *(_DWORD *)(v8 + 24) = v10 + 2;
    v16 = v8;
    if (v10)
    {
      *(_DWORD *)(v8 + 24) = v10;
    }
    else if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v4);
    }
    goto LABEL_34;
  }
LABEL_20:
  v11 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 1272);
  if (v11
    && (*(_WORD *)(v11 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
  {
    v9 = *(_QWORD *)(v11 + 80);
    if (v9)
    {
      while ((*(_WORD *)(v9 + 28) & 0x10) == 0)
      {
        v9 = *(_QWORD *)(v9 + 56);
        if (!v9)
          goto LABEL_33;
      }
      v12 = *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
      v13 = *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24);
      if (v13 != v12)
      {
LABEL_28:
        if (v13 != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
        {
          while (1)
          {
            v9 = *(_QWORD *)(v9 + 56);
            if (!v9)
              goto LABEL_33;
            if ((*(_WORD *)(v9 + 28) & 0x10) != 0)
            {
              v13 = *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24);
              if (v13 != v12)
                goto LABEL_28;
              break;
            }
          }
        }
      }
      *(_DWORD *)(v9 + 24) += 2;
    }
  }
  else
  {
    v9 = 0;
  }
LABEL_33:
  v16 = v9;
LABEL_34:
  v7 = WebCore::dispatchClipboardEvent(&v16, 8) ^ 1;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, v14);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  return v7;
}

uint64_t WebCore::dispatchClipboardEvent(_QWORD *a1, int a2)
{
  WebCore::Document *v4;
  uint64_t v5;
  WebCore::Document *v6;
  int v7;
  _BOOL8 v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  int8x16_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x16_t *v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  unsigned int v44;
  void *v45;
  int v46;
  uint64_t v47;
  int8x16_t v48;
  uint64_t v49;
  uint64_t v50;
  int8x16_t *v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  uint64_t v56;
  WebCore::Pasteboard *v57;
  WTF *v59;
  void *v60;
  uint64_t v61;
  WebCore::Pasteboard *v62;
  uint64_t v63;
  const WTF::StringImpl *v64;
  const WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  int8x16_t v75;
  uint64_t v76;
  uint64_t v77;
  int8x16_t *v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  uint64_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WebCore::Pasteboard *v90[3];

  if (!*a1)
    return 1;
  v4 = *(WebCore::Document **)(*(_QWORD *)(*a1 + 40) + 8);
  switch(a2)
  {
    case 0:
    case 1:
    case 2:
      v5 = WTF::fastMalloc((WTF *)0x78);
      *(_BYTE *)(v5 + 56) = 0;
      *(_QWORD *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 24) = 0;
      *(_BYTE *)(v5 + 32) = 0;
      *(_QWORD *)v5 = off_1E3407000;
      *(_QWORD *)(v5 + 8) = 0;
      *(_BYTE *)(v5 + 112) = 0;
      *(_OWORD *)(v5 + 64) = 0u;
      *(_OWORD *)(v5 + 80) = 0u;
      *(_OWORD *)(v5 + 93) = 0u;
      v90[0] = (WebCore::Pasteboard *)v5;
      v6 = v4;
      v7 = 1;
      goto LABEL_6;
    case 3:
    case 4:
    case 6:
      goto LABEL_109;
    case 5:
      {
        if (byte_1ECE90A55)
        {
          v18 = (WTF::StringImpl *)WebCore::textPlainContentTypeAtomData;
          if (WebCore::textPlainContentTypeAtomData)
            *(_DWORD *)WebCore::textPlainContentTypeAtomData += 2;
          v89 = v18;
          v19 = *((_QWORD *)v4 + 66);
          v20 = 0uLL;
          if (v19 && (v21 = *(_QWORD *)(v19 + 8)) != 0 && (v22 = *(_QWORD *)(v21 + 24)) != 0)
          {
            v23 = *(int8x16_t **)(v22 + 8);
            v24 = 0uLL;
            if (v23)
            {
              v25 = v23[2];
              v26.i64[0] = -256;
              v26.i64[1] = -256;
              v24 = vandq_s8(v25, v26);
              v27.i64[0] = 255;
              v27.i64[1] = 255;
              v20 = vandq_s8(v25, v27);
            }
          }
          else
          {
            v24 = 0uLL;
          }
          v85 = vorrq_s8(v20, v24);
          v61 = WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v61 = off_1E327FAB0;
          *(int8x16_t *)(v61 + 8) = v85;
          v87 = v61;
          WebCore::Pasteboard::createForCopyAndPaste((PAL *)&v87, (uint64_t *)v90);
          v62 = v90[0];
          (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::Pasteboard *, WTF::StringImpl **))(*(_QWORD *)v90[0] + 56))(&v88, v90[0], &v89);
          (*(void (**)(WebCore::Pasteboard *))(*(_QWORD *)v62 + 8))(v62);
          if (v87)
            (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
          v63 = WTF::fastMalloc((WTF *)0x78);
          *(_BYTE *)(v63 + 56) = 0;
          *(_QWORD *)(v63 + 16) = 0;
          *(_QWORD *)(v63 + 24) = 0;
          *(_BYTE *)(v63 + 32) = 0;
          *(_QWORD *)v63 = off_1E3407000;
          *(_QWORD *)(v63 + 8) = 0;
          *(_OWORD *)(v63 + 64) = 0u;
          *(_BYTE *)(v63 + 112) = 0;
          *(_OWORD *)(v63 + 80) = 0u;
          *(_OWORD *)(v63 + 93) = 0u;
          WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::add(v63 + 88, &v89, v64, (uint64_t)v90);
          v66 = v88;
          if (v88)
            *(_DWORD *)v88 += 2;
          v67 = WebCore::PasteboardCustomData::addOrMoveEntryToEnd((WebCore::PasteboardCustomData *)(v63 + 64), &v89, v65);
          v68 = v67;
          v69 = *(unsigned int *)(v67 + 24);
          if ((_DWORD)v69 != -1)
          {
            v70 = (WTF::StringImpl *)(v67 + 16);
            if (!(_DWORD)v69)
            {
              v71 = *(WTF::StringImpl **)v70;
              *(_QWORD *)v70 = v66;
              if (v71)
              {
                if (*(_DWORD *)v71 == 2)
                  WTF::StringImpl::destroy(v71, v70);
                else
                  *(_DWORD *)v71 -= 2;
              }
              goto LABEL_97;
            }
            ((void (*)(WebCore::Pasteboard **, WTF::StringImpl *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v69])(v90, v70);
          }
          *(_QWORD *)(v68 + 16) = v66;
          *(_DWORD *)(v68 + 24) = 0;
LABEL_97:
          v90[0] = (WebCore::Pasteboard *)v63;
          WebCore::DataTransfer::createForCopyAndPaste(v4, 2, (uint64_t *)v90, &v87);
          if (v90[0])
            (*(void (**)(WebCore::Pasteboard *))(*(_QWORD *)v90[0] + 8))(v90[0]);
          v73 = v88;
          v88 = 0;
          if (v73)
          {
            if (*(_DWORD *)v73 == 2)
              WTF::StringImpl::destroy(v73, v72);
            else
              *(_DWORD *)v73 -= 2;
          }
          v10 = v89;
          v89 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              v10 = (WTF::StringImpl *)WTF::StringImpl::destroy(v10, v72);
            else
              *(_DWORD *)v10 -= 2;
          }
LABEL_9:
          v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v11 || (v12 = *(_QWORD *)(v11 + 96)) == 0)
            v12 = WebCore::threadGlobalDataSlow(v10);
          v13 = *(_QWORD *)(v12 + 40);
          if (!v13)
          {
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v12);
            v13 = *(_QWORD *)(v12 + 40);
          }
          v14 = *(WTF::StringImpl **)(v13 + 1416);
          if (v14)
LABEL_60:
            *(_DWORD *)v14 += 2;
          goto LABEL_61;
        }
      }
      else
      {
        WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
        *(_OWORD *)&byte_1ECE90A50 = 0u;
        qword_1ECE90A60 = 0;
        LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
        *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
        *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
        byte_1ECE90A56 = 1;
        *(_DWORD *)&algn_1ECE90A57 = 0;
        unk_1ECE90A5B = 0;
        byte_1ECE90A5D = 1;
        byte_1ECE90A5F = 1;
      }
LABEL_109:
      v74 = *((_QWORD *)v4 + 66);
      v75 = 0uLL;
      if (v74 && (v76 = *(_QWORD *)(v74 + 8)) != 0 && (v77 = *(_QWORD *)(v76 + 24)) != 0)
      {
        v78 = *(int8x16_t **)(v77 + 8);
        v79 = 0uLL;
        if (v78)
        {
          v80 = v78[2];
          v81.i64[0] = -256;
          v81.i64[1] = -256;
          v79 = vandq_s8(v80, v81);
          v82.i64[0] = 255;
          v82.i64[1] = 255;
          v75 = vandq_s8(v80, v82);
        }
      }
      else
      {
        v79 = 0uLL;
      }
      v86 = vorrq_s8(v75, v79);
      v83 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v83 = off_1E327FAB0;
      *(int8x16_t *)(v83 + 8) = v86;
      v89 = (WTF::StringImpl *)v83;
      WebCore::Pasteboard::createForCopyAndPaste((PAL *)&v89, (uint64_t *)v90);
      WebCore::DataTransfer::createForCopyAndPaste(v4, 2, (uint64_t *)v90, &v87);
      if (v90[0])
        (*(void (**)(WebCore::Pasteboard *))(*(_QWORD *)v90[0] + 8))(v90[0]);
      v10 = v89;
      if (v89)
LABEL_7:
        v10 = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v10 + 8))(v10);
LABEL_8:
      switch(a2)
      {
        case 0:
        case 1:
          v15 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v15 || (v16 = *(_QWORD *)(v15 + 96)) == 0)
            v16 = WebCore::threadGlobalDataSlow(v10);
          v17 = *(_QWORD *)(v16 + 40);
          if (!v17)
          {
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v16);
            v17 = *(_QWORD *)(v16 + 40);
          }
          v14 = *(WTF::StringImpl **)(v17 + 528);
          if (v14)
            goto LABEL_60;
          break;
        case 2:
          v28 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v28 || (v29 = *(_QWORD *)(v28 + 96)) == 0)
            v29 = WebCore::threadGlobalDataSlow(v10);
          v30 = *(_QWORD *)(v29 + 40);
          if (!v30)
          {
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v29);
            v30 = *(_QWORD *)(v29 + 40);
          }
          v14 = *(WTF::StringImpl **)(v30 + 560);
          if (v14)
            goto LABEL_60;
          break;
        case 3:
        case 4:
        case 5:
        case 6:
          goto LABEL_9;
        case 7:
          v31 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v31 || (v32 = *(_QWORD *)(v31 + 96)) == 0)
            v32 = WebCore::threadGlobalDataSlow(v10);
          v33 = *(_QWORD *)(v32 + 40);
          if (!v33)
          {
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v32);
            v33 = *(_QWORD *)(v32 + 40);
          }
          v14 = *(WTF::StringImpl **)(v33 + 224);
          if (v14)
            goto LABEL_60;
          break;
        case 8:
          v34 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v34 || (v35 = *(_QWORD *)(v34 + 96)) == 0)
            v35 = WebCore::threadGlobalDataSlow(v10);
          v36 = *(_QWORD *)(v35 + 40);
          if (!v36)
          {
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v35);
            v36 = *(_QWORD *)(v35 + 40);
          }
          v14 = *(WTF::StringImpl **)(v36 + 232);
          if (v14)
            goto LABEL_60;
          break;
        case 9:
          v37 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v37 || (v38 = *(_QWORD *)(v37 + 96)) == 0)
            v38 = WebCore::threadGlobalDataSlow(v10);
          v39 = *(_QWORD *)(v38 + 40);
          if (!v39)
          {
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v38);
            v39 = *(_QWORD *)(v38 + 40);
          }
          v14 = *(WTF::StringImpl **)(v39 + 256);
          if (v14)
            goto LABEL_60;
          break;
        default:
          v14 = 0;
          break;
      }
LABEL_61:
      v40 = v87;
      ++*(_DWORD *)v87;
      v41 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v41);
      *(_QWORD *)(v41 + 8) = 0;
      v44 = *(_DWORD *)(v41 + 20) & 0xFFC00000 | (v14 != 0) | 0x1A820E;
      *(_DWORD *)(v41 + 16) = 1;
      *(_DWORD *)(v41 + 20) = v44;
      if (v14)
        *(_DWORD *)v14 += 2;
      *(_QWORD *)(v41 + 24) = v14;
      *(_QWORD *)(v41 + 32) = 0;
      *(_QWORD *)(v41 + 40) = 0;
      *(_QWORD *)(v41 + 48) = 0;
      *(_QWORD *)(v41 + 56) = v43;
      *(_QWORD *)v41 = off_1E33A1270;
      *(_QWORD *)(v41 + 64) = 0;
      *(_QWORD *)(v41 + 72) = v40;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
        {
          WTF::StringImpl::destroy(v14, v42);
          v40 = v87;
        }
        else
        {
          *(_DWORD *)v14 -= 2;
        }
      }
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 48))(*a1, v41);
      v46 = *(_DWORD *)(v41 + 20);
      if ((a2 & 0xFFFFFFFD) == 0
        && (v46 & 0x40) != 0
        && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v40 + 32) + 24))(*(_QWORD *)(v40 + 32)))
      {
        v47 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 40) + 8) + 528);
        v48 = 0uLL;
        if (v47 && (v49 = *(_QWORD *)(v47 + 8)) != 0 && (v50 = *(_QWORD *)(v49 + 24)) != 0)
        {
          v51 = *(int8x16_t **)(v50 + 8);
          v52 = 0uLL;
          if (v51)
          {
            v53 = v51[2];
            v54.i64[0] = -256;
            v54.i64[1] = -256;
            v52 = vandq_s8(v53, v54);
            v55.i64[0] = 255;
            v55.i64[1] = 255;
            v48 = vandq_s8(v53, v55);
          }
        }
        else
        {
          v52 = 0uLL;
        }
        v84 = vorrq_s8(v48, v52);
        v56 = WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v56 = off_1E327FAB0;
        *(int8x16_t *)(v56 + 8) = v84;
        v89 = (WTF::StringImpl *)v56;
        WebCore::Pasteboard::createForCopyAndPaste((PAL *)&v89, (uint64_t *)v90);
        v57 = v90[0];
        WebCore::DataTransfer::commitToPasteboard((WebCore::DataTransfer *)v40, v90[0]);
        (*(void (**)(WebCore::Pasteboard *))(*(_QWORD *)v57 + 8))(v57);
        if (v89)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v89 + 8))(v89);
      }
      v8 = (v46 & 0x40) == 0;
      *(_DWORD *)(v40 + 24) = 0;
      if (*(_DWORD *)(v41 + 16) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
      else
        --*(_DWORD *)(v41 + 16);
      if (*(_DWORD *)v40 == 1)
      {
        WebCore::DataTransfer::~DataTransfer((WebCore::DataTransfer *)v40, v45);
        WTF::fastFree(v59, v60);
      }
      else
      {
        --*(_DWORD *)v40;
      }
      break;
    default:
      v9 = WTF::fastMalloc((WTF *)0x78);
      *(_BYTE *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)(v9 + 24) = 0;
      *(_BYTE *)(v9 + 32) = 0;
      *(_QWORD *)v9 = off_1E3407000;
      *(_QWORD *)(v9 + 8) = 0;
      *(_BYTE *)(v9 + 112) = 0;
      *(_OWORD *)(v9 + 64) = 0u;
      *(_OWORD *)(v9 + 80) = 0u;
      *(_OWORD *)(v9 + 93) = 0u;
      v90[0] = (WebCore::Pasteboard *)v9;
      v6 = v4;
      v7 = 0;
LABEL_6:
      WebCore::DataTransfer::createForCopyAndPaste(v6, v7, (uint64_t *)v90, &v87);
      v10 = v90[0];
      if (v90[0])
        goto LABEL_7;
      goto LABEL_8;
  }
  return v8;
}

uint64_t WebCore::Editor::canDHTMLCopy(WebCore::Editor *this, const WebCore::Position *a2)
{
  WebCore::Node *v3;
  void *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;

  v3 = WebCore::enclosingTextFormControl((WebCore *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 3064) + 120), a2);
  if (v3 && *(_QWORD *)(*((_QWORD *)v3 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    v5 = *((_DWORD *)v3 + 6);
    *((_DWORD *)v3 + 6) = v5 + 2;
    v6 = *(_DWORD *)(*((_QWORD *)v3 + 30) + 12);
    if (v5)
    {
      *((_DWORD *)v3 + 6) = v5;
    }
    else if ((*((_WORD *)v3 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v3, v4);
    }
    if (v6 == 2048)
      return 0;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 3064) + 120);
  if (v8)
  {
    *(_DWORD *)(v8 + 24) += 2;
    while (1)
    {
      v9 = v8;
      if ((*(_WORD *)(v8 + 28) & 8) != 0)
        break;
      v8 = *(_QWORD *)(v8 + 32);
      if (v8)
        *(_DWORD *)(v8 + 24) += 2;
      if (*(_DWORD *)(v9 + 24) == 2)
      {
        if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v9, v4);
      }
      else
      {
        *(_DWORD *)(v9 + 24) -= 2;
      }
      if (!v8)
        goto LABEL_20;
    }
    v10 = *(_DWORD *)(v8 + 24);
    *(_DWORD *)(v8 + 24) = v10 + 2;
    v16 = v8;
    if (v10)
    {
      *(_DWORD *)(v8 + 24) = v10;
    }
    else if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v4);
    }
    goto LABEL_34;
  }
LABEL_20:
  v11 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 1272);
  if (v11
    && (*(_WORD *)(v11 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
  {
    v9 = *(_QWORD *)(v11 + 80);
    if (v9)
    {
      while ((*(_WORD *)(v9 + 28) & 0x10) == 0)
      {
        v9 = *(_QWORD *)(v9 + 56);
        if (!v9)
          goto LABEL_33;
      }
      v12 = *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
      v13 = *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24);
      if (v13 != v12)
      {
LABEL_28:
        if (v13 != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
        {
          while (1)
          {
            v9 = *(_QWORD *)(v9 + 56);
            if (!v9)
              goto LABEL_33;
            if ((*(_WORD *)(v9 + 28) & 0x10) != 0)
            {
              v13 = *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24);
              if (v13 != v12)
                goto LABEL_28;
              break;
            }
          }
        }
      }
      *(_DWORD *)(v9 + 24) += 2;
    }
  }
  else
  {
    v9 = 0;
  }
LABEL_33:
  v16 = v9;
LABEL_34:
  v7 = WebCore::dispatchClipboardEvent(&v16, 7) ^ 1;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, v14);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  return v7;
}

uint64_t WebCore::Editor::canDHTMLPaste(WebCore::Editor *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  void *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 3064) + 120);
  if (!v3)
  {
LABEL_15:
    v8 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 1272);
    if (v8
      && (*(_WORD *)(v8 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    {
      v4 = *(_QWORD *)(v8 + 80);
      if (!v4)
        goto LABEL_28;
      while ((*(_WORD *)(v4 + 28) & 0x10) == 0)
      {
        v4 = *(_QWORD *)(v4 + 56);
        if (!v4)
          goto LABEL_28;
      }
      v9 = *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
      v10 = *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24);
      if (v10 != v9)
      {
LABEL_23:
        if (v10 != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
        {
          while (1)
          {
            v4 = *(_QWORD *)(v4 + 56);
            if (!v4)
              break;
            if ((*(_WORD *)(v4 + 28) & 0x10) != 0)
            {
              v10 = *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24);
              if (v10 != v9)
                goto LABEL_23;
              goto LABEL_27;
            }
          }
LABEL_28:
          v12 = v4;
          v7 = WebCore::dispatchClipboardEvent(&v12, 9);
          if (!v4)
            return v7 ^ 1u;
          goto LABEL_29;
        }
      }
LABEL_27:
      *(_DWORD *)(v4 + 24) += 2;
      goto LABEL_28;
    }
    v4 = 0;
    goto LABEL_28;
  }
  *(_DWORD *)(v3 + 24) += 2;
  while (1)
  {
    v4 = v3;
    if ((*(_WORD *)(v3 + 28) & 8) != 0)
      break;
    v3 = *(_QWORD *)(v3 + 32);
    if (v3)
      *(_DWORD *)(v3 + 24) += 2;
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
    if (!v3)
      goto LABEL_15;
  }
  v5 = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v3 + 24) = v5 + 2;
  v12 = v3;
  if (v5)
  {
    *(_DWORD *)(v3 + 24) = v5;
  }
  else if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
  }
  v7 = WebCore::dispatchClipboardEvent(&v12, 9);
LABEL_29:
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v6);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return v7 ^ 1u;
}

uint64_t WebCore::Editor::canCut(WebCore::Editor *this, void *a2)
{
  uint64_t result;
  uint64_t v4;

  result = WebCore::Editor::canCopy(this, a2);
  if ((_DWORD)result)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 3064);
    return *(_BYTE *)(v4 + 153) == 2 && WebCore::editableRootForPosition(v4 + 120, 0) != 0;
  }
  return result;
}

uint64_t WebCore::Editor::canCopy(WebCore::Editor *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore *v12;
  WebCore::Node *v13;
  void *v14;
  int v15;
  int v16;
  WebCore::Node *v17;
  void *v18;
  int v19;
  uint64_t v20;

  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if ((*(_WORD *)(v2 + 3358) & 4) == 0)
    goto LABEL_23;
  v3 = *(_QWORD *)(v2 + 1272);
  if (!v3)
    goto LABEL_23;
  if ((*(_WORD *)(v3 + 28) & 0x10) == 0)
    goto LABEL_23;
  if (*(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    goto LABEL_23;
  v5 = *(_QWORD *)(v3 + 80);
  if (!v5)
    goto LABEL_23;
  while ((*(_WORD *)(v5 + 28) & 0x10) == 0)
  {
    v5 = *(_QWORD *)(v5 + 56);
    if (!v5)
      goto LABEL_23;
  }
  v6 = *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
  v7 = *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24);
  if (v7 != v6)
  {
LABEL_10:
    if (v7 != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
    {
      while (1)
      {
        v5 = *(_QWORD *)(v5 + 56);
        if (!v5)
          goto LABEL_23;
        if ((*(_WORD *)(v5 + 28) & 0x10) != 0)
        {
          v7 = *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24);
          if (v7 != v6)
            goto LABEL_10;
          break;
        }
      }
    }
  }
  v8 = *(_DWORD *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v8 + 2;
  v9 = *(_QWORD *)(v5 + 80);
  if (v9 && (*(_WORD *)(v9 + 28) & 0x10) != 0)
  {
    if (*(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
      v10 = *(_QWORD *)(v5 + 80);
    else
      v10 = 0;
    if (v8)
      goto LABEL_20;
LABEL_37:
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    goto LABEL_21;
  }
  v10 = 0;
  if (!v8)
    goto LABEL_37;
LABEL_20:
  *(_DWORD *)(v5 + 24) = v8;
LABEL_21:
  if (v10)
    return 1;
  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
LABEL_23:
  v11 = *(_QWORD *)(v2 + 3064);
  if (*(_BYTE *)(v11 + 153) != 2)
    return 0;
  v12 = (WebCore *)(v11 + 120);
  v13 = WebCore::enclosingTextFormControl((WebCore *)(v11 + 120), (const WebCore::Position *)a2);
  if (!v13 || *(_QWORD *)(*((_QWORD *)v13 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    return 1;
  v15 = *((_DWORD *)v13 + 6);
  *((_DWORD *)v13 + 6) = v15 + 2;
  v16 = *(_DWORD *)(*((_QWORD *)v13 + 30) + 12);
  if (v15)
  {
    *((_DWORD *)v13 + 6) = v15;
  }
  else if ((*((_WORD *)v13 + 15) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef(v13, v14);
  }
  if (v16 != 2048)
    return 1;
  v17 = WebCore::enclosingTextFormControl(v12, (const WebCore::Position *)v14);
  if (!v17 || *(_QWORD *)(*((_QWORD *)v17 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    return 0;
  v19 = *((_DWORD *)v17 + 6);
  *((_DWORD *)v17 + 6) = v19 + 2;
  v20 = (*((unsigned __int16 *)v17 + 115) >> 9) & 1;
  if (v19)
  {
    *((_DWORD *)v17 + 6) = v19;
  }
  else if ((*((_WORD *)v17 + 15) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef(v17, v18);
  }
  return v20;
}

BOOL WebCore::Editor::canDelete(WebCore::Editor *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 3064);
  return *(_BYTE *)(v1 + 153) == 2 && WebCore::editableRootForPosition(v1 + 120, 0) != 0;
}

uint64_t WebCore::Editor::canSmartCopyOrDelete(WebCore::Editor *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  result = *(_QWORD *)(v1 + 8);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
    if ((_DWORD)result)
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
      return *(_BYTE *)(*(_QWORD *)(v4 + 680) + 370) == 3 || *(unsigned __int8 *)(*(_QWORD *)(v4 + 3064) + 184) == 1;
    }
  }
  return result;
}

uint64_t *WebCore::Editor::deleteWithDirection(uint64_t a1, int a2, int a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *result;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WebCore::Node *v23;
  WebCore::Node *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  WebCore::Node *v30;
  WebCore::Node *v31[2];
  WebCore::Node *v32;
  char v33;
  WebCore::Node *v34;
  WTF::StringImpl *v35;

  v10 = WebCore::editableRootForPosition(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 3064) + 120, 0);
  if (!v10)
    return (uint64_t *)(v10 != 0);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(v11 + 8);
  *(_DWORD *)(v12 + 24) += 2;
  v34 = (WebCore::Node *)v12;
  if (*(_BYTE *)(*(_QWORD *)(v12 + 3064) + 153) != 2)
  {
    v17 = *(_QWORD *)(a1 + 8);
    if (v17)
    {
      v18 = *(_QWORD *)(v17 + 8);
      if (v18
        && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18)
        && ((v19 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), *(_BYTE *)(*(_QWORD *)(v19 + 680) + 370) == 3)
         || *(_BYTE *)(*(_QWORD *)(v19 + 3064) + 184) == 1))
      {
        LODWORD(v17) = 16;
      }
      else
      {
        LODWORD(v17) = 0;
      }
    }
    if (a4)
      v16 = v17 | 2;
    else
      v16 = v17;
    switch(a2)
    {
      case 0:
      case 2:
        WebCore::TypingCommand::forwardDeleteKeyPressed((uint64_t *)&v34, v16, a3);
        break;
      case 1:
      case 3:
        goto LABEL_40;
      default:
        goto LABEL_41;
    }
    goto LABEL_41;
  }
  if (a5)
  {
    v13 = *(_QWORD *)(a1 + 8);
    if (v13
      && (v14 = *(_QWORD *)(v13 + 8)) != 0
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14)
      && ((v15 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), *(_BYTE *)(*(_QWORD *)(v15 + 680) + 370) == 3)
       || *(_BYTE *)(*(_QWORD *)(v15 + 3064) + 184) == 1))
    {
      LOBYTE(v16) = 16;
    }
    else
    {
      LOBYTE(v16) = 0;
    }
LABEL_40:
    WebCore::TypingCommand::deleteKeyPressed((uint64_t *)&v34, v16, a3);
LABEL_41:
    if (!*(_BYTE *)(a1 + 88))
    {
      v29 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
      *(_DWORD *)(v29 + 24) += 2;
      WebCore::FrameSelection::revealSelection(*(_QWORD *)(v29 + 3064), 0, (uint64_t)&WebCore::ScrollAlignment::alignCenterIfNeeded, (BOOL *)1, 1);
      if (*(_DWORD *)(v29 + 24) == 2)
      {
        if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v29, (void *)v16);
      }
      else
      {
        *(_DWORD *)(v29 + 24) -= 2;
      }
    }
    goto LABEL_46;
  }
  if (!a4)
  {
LABEL_34:
    v25 = *(_QWORD *)(a1 + 8);
    if (v25
      && (v26 = *(_QWORD *)(v25 + 8)) != 0
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26))
    {
      v27 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
      v28 = *(_BYTE *)(*(_QWORD *)(v27 + 680) + 370) == 3
         || *(unsigned __int8 *)(*(_QWORD *)(v27 + 3064) + 184) == 1;
    }
    else
    {
      v28 = 0;
    }
    WebCore::Editor::deleteSelectionWithSmartDelete(a1, (void *)v28, 9);
LABEL_46:
    if (a4)
      *(_BYTE *)(a1 + 89) = 0;
    v30 = v34;
    v34 = 0;
    if (v30)
    {
      if (*((_DWORD *)v30 + 6) == 2)
      {
        if ((*((_WORD *)v30 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v30, (void *)v16);
      }
      else
      {
        *((_DWORD *)v30 + 6) -= 2;
      }
    }
    return (uint64_t *)(v10 != 0);
  }
  result = WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 3064) + 56), v31);
  if (v33)
  {
    WebCore::plainText(v31, 0, 0, (const WTF::String *)&v35);
    *(_BYTE *)(a1 + 89) = 0;
    v22 = v35;
    v35 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v21);
      else
        *(_DWORD *)v22 -= 2;
    }
    if (v33)
    {
      v23 = v32;
      v32 = 0;
      if (v23)
      {
        if (*((_DWORD *)v23 + 6) == 2)
        {
          if ((*((_WORD *)v23 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v23, v21);
        }
        else
        {
          *((_DWORD *)v23 + 6) -= 2;
        }
      }
      v24 = v31[0];
      v31[0] = 0;
      if (v24)
      {
        if (*((_DWORD *)v24 + 6) == 2)
        {
          if ((*((_WORD *)v24 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v24, v21);
        }
        else
        {
          *((_DWORD *)v24 + 6) -= 2;
        }
      }
    }
    goto LABEL_34;
  }
  __break(1u);
  return result;
}

void WebCore::Editor::revealSelectionAfterEditingOperation(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t v3;
  void *v4;

  if (!*(_BYTE *)(a1 + 88))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    *(_DWORD *)(v3 + 24) += 2;
    WebCore::FrameSelection::revealSelection(*(_QWORD *)(v3 + 3064), 0, a2, a3, 1);
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, v4);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
}

uint64_t *WebCore::Editor::selectedRange@<X0>(WebCore::Editor *this@<X0>, _BYTE *a2@<X8>)
{
  return WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 3064) + 56), a2);
}

unsigned int *WebCore::Editor::deleteSelectionWithSmartDelete(uint64_t a1, void *a2, char a3)
{
  uint64_t v3;
  char v5;
  _DWORD *v6;
  WebCore::CompositeEditCommand *v7;
  unsigned int *result;
  WebCore::Node *v9;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  *(_DWORD *)(v3 + 24) += 2;
  v9 = (WebCore::Node *)v3;
  if (*(_BYTE *)(*(_QWORD *)(v3 + 3064) + 153))
  {
    v5 = (char)a2;
    v6 = (_DWORD *)WTF::fastMalloc((WTF *)0x248);
    WebCore::DeleteSelectionCommand::DeleteSelectionCommand((uint64_t)v6, (uint64_t *)&v9, v5, 1, 0, 0, 1, a3);
    WebCore::CompositeEditCommand::apply(v7);
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  result = (unsigned int *)v9;
  v9 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::Editor::pasteAsPlainText(unsigned int *this, const WTF::String *a2, char a3)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WebCore *v21;
  WTF *v22;
  uint64_t *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  WTF *v27;
  WebCore *v28;
  WTF::StringImpl *v29;

  v5 = this;
  v6 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 3064) + 120);
  if (v7)
  {
    *(_DWORD *)(v7 + 24) += 2;
    while (1)
    {
      v8 = v7;
      if ((*(_WORD *)(v7 + 28) & 8) != 0)
        break;
      v7 = *(_QWORD *)(v7 + 32);
      if (v7)
        *(_DWORD *)(v7 + 24) += 2;
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
      }
      if (!v7)
      {
        v6 = *(_QWORD *)(*((_QWORD *)v5 + 2) + 8);
        goto LABEL_15;
      }
    }
    v9 = *(_DWORD *)(v7 + 24);
    *(_DWORD *)(v7 + 24) = v9 + 2;
    if (!v9)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
      goto LABEL_29;
    }
LABEL_28:
    *(_DWORD *)(v8 + 24) = v9;
LABEL_29:
    v13 = *(WTF::StringImpl **)a2;
    if (v13)
      *(_DWORD *)v13 += 2;
    v29 = v13;
    v14 = *(_QWORD *)(*((_QWORD *)v5 + 2) + 8);
    *(_DWORD *)(v14 + 24) += 2;
    v15 = *(WTF **)(v14 + 528);
    if (v15)
    {
      v16 = *((_QWORD *)v15 + 1);
      if (!v16)
        goto LABEL_39;
      v17 = *(_QWORD *)(v16 + 24);
      if (!v17)
        goto LABEL_39;
      v18 = *(_QWORD *)(v17 + 8);
      if (!v18)
        goto LABEL_39;
      WebCore::Page::applyLinkDecorationFiltering(v18, &v29, &v28);
      v29 = v28;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v19);
        else
          *(_DWORD *)v13 -= 2;
      }
      v15 = *(WTF **)(v14 + 528);
      if (v15)
      {
LABEL_39:
        v15 = (WTF *)*((_QWORD *)v15 + 1);
        if (v15)
        {
          v15 = (WTF *)*((_QWORD *)v15 + 14);
          if (v15)
            ++*(_DWORD *)v15;
        }
      }
    }
    v27 = v15;
    WebCore::TextEvent::createForPlainTextPaste((uint64_t *)&v27, (_DWORD **)&v29, a3, &v28);
    (*(void (**)(uint64_t, WebCore *))(*(_QWORD *)v8 + 48))(v8, v28);
    v21 = v28;
    v28 = 0;
    if (v21)
    {
      if (*((_DWORD *)v21 + 4) == 1)
        (*(void (**)(WebCore *))(*(_QWORD *)v21 + 8))(v21);
      else
        --*((_DWORD *)v21 + 4);
    }
    v22 = v27;
    v27 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
      {
        v23 = (uint64_t *)*((_QWORD *)v22 + 2);
        *((_QWORD *)v22 + 2) = 0;
        if (v23)
        {
          if (*v23)
            WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v23, v20);
          WTF::fastFree((WTF *)v23, v20);
        }
        v24 = (unsigned int *)*((_QWORD *)v22 + 1);
        *((_QWORD *)v22 + 1) = 0;
        if (v24)
        {
          do
          {
            v25 = __ldaxr(v24);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, v24));
          if (!v26)
          {
            atomic_store(1u, v24);
            WTF::fastFree((WTF *)v24, v20);
          }
        }
        WTF::fastFree(v22, v20);
      }
      else
      {
        --*(_DWORD *)v22;
      }
    }
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v14, v20);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
    this = (unsigned int *)v29;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        this = (unsigned int *)WTF::StringImpl::destroy(v29, v20);
      else
        *(_DWORD *)v29 -= 2;
    }
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v8, v20);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
    return this;
  }
LABEL_15:
  v10 = *(_QWORD *)(v6 + 1272);
  if (!v10)
    return this;
  if ((*(_WORD *)(v10 + 28) & 0x10) == 0)
    return this;
  if (*(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    return this;
  v8 = *(_QWORD *)(v10 + 80);
  if (!v8)
    return this;
  while ((*(_WORD *)(v8 + 28) & 0x10) == 0)
  {
    v8 = *(_QWORD *)(v8 + 56);
    if (!v8)
      return this;
  }
  v11 = *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
  v12 = *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24);
  if (v12 == v11)
  {
LABEL_27:
    v9 = *(_DWORD *)(v8 + 24) + 2;
    goto LABEL_28;
  }
LABEL_23:
  if (v12 == *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
    goto LABEL_27;
  while (1)
  {
    v8 = *(_QWORD *)(v8 + 56);
    if (!v8)
      return this;
    if ((*(_WORD *)(v8 + 28) & 0x10) != 0)
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24);
      if (v12 != v11)
        goto LABEL_23;
      goto LABEL_27;
    }
  }
}

unsigned int *WebCore::Editor::pasteAsFragment(unsigned int *result, _QWORD *a2, char a3, char a4, char a5, int a6)
{
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  WTF *v20;
  WebCore::Node *v21;
  void *v22;
  WebCore *v23;
  WTF *v24;
  uint64_t *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  WebCore::Node *v29;
  WTF *v30;
  WebCore *v31;

  v11 = result;
  v12 = *(_QWORD *)(*((_QWORD *)result + 2) + 8);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 3064) + 120);
  if (v13)
  {
    *(_DWORD *)(v13 + 24) += 2;
    while (1)
    {
      v14 = v13;
      if ((*(_WORD *)(v13 + 28) & 8) != 0)
        break;
      v13 = *(_QWORD *)(v13 + 32);
      if (v13)
        *(_DWORD *)(v13 + 24) += 2;
      if (*(_DWORD *)(v14 + 24) == 2)
      {
        if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)v14, a2);
      }
      else
      {
        *(_DWORD *)(v14 + 24) -= 2;
      }
      if (!v13)
      {
        v12 = *(_QWORD *)(*((_QWORD *)v11 + 2) + 8);
        goto LABEL_15;
      }
    }
    v15 = *(_DWORD *)(v13 + 24);
    *(_DWORD *)(v13 + 24) = v15 + 2;
    if (!v15)
    {
      if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v13, a2);
      goto LABEL_29;
    }
LABEL_28:
    *(_DWORD *)(v14 + 24) = v15;
LABEL_29:
    if (a6 == 29)
      v19 = 8;
    else
      v19 = 5;
    v20 = *(WTF **)(*(_QWORD *)(*((_QWORD *)v11 + 2) + 8) + 528);
    if (v20)
    {
      v20 = (WTF *)*((_QWORD *)v20 + 1);
      if (v20)
      {
        v20 = (WTF *)*((_QWORD *)v20 + 14);
        if (v20)
          ++*(_DWORD *)v20;
      }
    }
    v30 = v20;
    v21 = (WebCore::Node *)*a2;
    *a2 = 0;
    v29 = v21;
    WebCore::TextEvent::createForFragmentPaste((uint64_t *)&v30, (uint64_t *)&v29, v19, a3, a4, a5, &v31);
    (*(void (**)(uint64_t, WebCore *))(*(_QWORD *)v14 + 48))(v14, v31);
    v23 = v31;
    v31 = 0;
    if (v23)
    {
      if (*((_DWORD *)v23 + 4) == 1)
        (*(void (**)(WebCore *))(*(_QWORD *)v23 + 8))(v23);
      else
        --*((_DWORD *)v23 + 4);
    }
    result = (unsigned int *)v29;
    if (v29)
    {
      if (*((_DWORD *)v29 + 6) == 2)
      {
        if ((*((_WORD *)v29 + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef(v29, v22);
      }
      else
      {
        *((_DWORD *)v29 + 6) -= 2;
      }
    }
    v24 = v30;
    v30 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 1)
      {
        v25 = (uint64_t *)*((_QWORD *)v24 + 2);
        *((_QWORD *)v24 + 2) = 0;
        if (v25)
        {
          if (*v25)
            WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v25, (WTF::StringImpl *)v22);
          WTF::fastFree((WTF *)v25, v22);
        }
        v26 = (unsigned int *)*((_QWORD *)v24 + 1);
        *((_QWORD *)v24 + 1) = 0;
        if (v26)
        {
          do
          {
            v27 = __ldaxr(v26);
            v28 = v27 - 1;
          }
          while (__stlxr(v28, v26));
          if (!v28)
          {
            atomic_store(1u, v26);
            WTF::fastFree((WTF *)v26, v22);
          }
        }
        result = (unsigned int *)WTF::fastFree(v24, v22);
      }
      else
      {
        --*(_DWORD *)v24;
      }
    }
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v14, v22);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
    return result;
  }
LABEL_15:
  v16 = *(_QWORD *)(v12 + 1272);
  if (!v16)
    return result;
  if ((*(_WORD *)(v16 + 28) & 0x10) == 0)
    return result;
  if (*(_QWORD *)(*(_QWORD *)(v16 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    return result;
  v14 = *(_QWORD *)(v16 + 80);
  if (!v14)
    return result;
  while ((*(_WORD *)(v14 + 28) & 0x10) == 0)
  {
    v14 = *(_QWORD *)(v14 + 56);
    if (!v14)
      return result;
  }
  v17 = *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
  v18 = *(_QWORD *)(*(_QWORD *)(v14 + 96) + 24);
  if (v18 == v17)
  {
LABEL_27:
    v15 = *(_DWORD *)(v14 + 24) + 2;
    goto LABEL_28;
  }
LABEL_23:
  if (v18 == *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
    goto LABEL_27;
  while (1)
  {
    v14 = *(_QWORD *)(v14 + 56);
    if (!v14)
      return result;
    if ((*(_WORD *)(v14 + 28) & 0x10) != 0)
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v14 + 96) + 24);
      if (v18 != v17)
        goto LABEL_23;
      goto LABEL_27;
    }
  }
}

uint64_t WebCore::Editor::pasteAsPlainTextBypassingDHTML(WebCore::Editor *this)
{
  uint64_t v2;
  int8x16_t v3;
  uint64_t v4;
  uint64_t v5;
  int8x16_t *v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  uint64_t v11;
  WebCore::Pasteboard *v12;
  uint64_t result;
  int8x16_t v14;
  uint64_t v15;
  WebCore::Pasteboard *v16;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 528);
  v3 = 0uLL;
  if (v2 && (v4 = *(_QWORD *)(v2 + 8)) != 0 && (v5 = *(_QWORD *)(v4 + 24)) != 0)
  {
    v6 = *(int8x16_t **)(v5 + 8);
    v7 = 0uLL;
    if (v6)
    {
      v8 = v6[2];
      v9.i64[0] = -256;
      v9.i64[1] = -256;
      v7 = vandq_s8(v8, v9);
      v10.i64[0] = 255;
      v10.i64[1] = 255;
      v3 = vandq_s8(v8, v10);
    }
  }
  else
  {
    v7 = 0uLL;
  }
  v14 = vorrq_s8(v3, v7);
  v11 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v11 = off_1E327FAB0;
  *(int8x16_t *)(v11 + 8) = v14;
  v15 = v11;
  WebCore::Pasteboard::createForCopyAndPaste((PAL *)&v15, (uint64_t *)&v16);
  v12 = v16;
  WebCore::Editor::pasteAsPlainTextWithPasteboard(this, v16);
  (*(void (**)(WebCore::Pasteboard *))(*(_QWORD *)v12 + 8))(v12);
  result = v15;
  if (v15)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  return result;
}

WTF::StringImpl *WebCore::Editor::pasteAsPlainTextWithPasteboard(WebCore::Editor *this, WebCore::Pasteboard *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  WebCore::Node *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  WTF::StringImpl *result;
  WTF::StringImpl *v16[2];
  WebCore::Node *v17;
  char v18;
  WTF::StringImpl *v19;

  v16[0] = 0;
  (*(void (**)(WebCore::Pasteboard *, WTF::StringImpl **, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 104))(a2, v16, 1, 0, 0);
  v5 = v16[0];
  if (v16[0])
  {
    v6 = *(_DWORD *)v16[0];
    *(_DWORD *)v16[0] += 2;
    v19 = v5;
    v16[0] = 0;
    if (v6)
      *(_DWORD *)v5 = v6;
    else
      WTF::StringImpl::destroy(v5, v4);
  }
  else
  {
    v19 = 0;
  }
  v7 = *((_QWORD *)this + 1);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
      WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 3064) + 56), v16);
      v9 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, uint64_t))(*(_QWORD *)v8 + 104))(v8, &v19, v16, 1);
      if (v18)
      {
        v10 = v17;
        v17 = 0;
        if (v10)
        {
          if (*((_DWORD *)v10 + 6) == 2)
          {
            if ((*((_WORD *)v10 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v10, v4);
          }
          else
          {
            *((_DWORD *)v10 + 6) -= 2;
          }
        }
        v11 = v16[0];
        v16[0] = 0;
        if (v11)
        {
          if (*((_DWORD *)v11 + 6) == 2)
          {
            if ((*((_WORD *)v11 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v11, v4);
          }
          else
          {
            *((_DWORD *)v11 + 6) -= 2;
          }
        }
      }
      if (v9)
      {
        v12 = *((_QWORD *)this + 1);
        if (v12
          && (v13 = *(_QWORD *)(v12 + 8)) != 0
          && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13))
        {
          v14 = (*(uint64_t (**)(WebCore::Pasteboard *))(*(_QWORD *)a2 + 192))(a2);
        }
        else
        {
          v14 = 0;
        }
        WebCore::Editor::pasteAsPlainText((unsigned int *)this, (const WTF::String *)&v19, v14);
      }
    }
  }
  result = v19;
  v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::Editor::isContinuousSpellCheckingEnabled(WebCore::Editor *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  else
    return 0;
}

uint64_t WebCore::Editor::shouldDeleteRange(uint64_t a1, uint64_t a2)
{
  WebCore::Node *v2;
  BOOL v5;
  WebCore::Node *v6;
  char v7;
  void *v8;
  WebCore::Node *v9;
  WebCore::Node *v10;
  WebCore::Node *v11;
  void *v12;
  uint64_t i;
  WebCore::Node *v14;
  WebCore::Node *v15;
  uint64_t j;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::Node *v21;
  WebCore::Node *v22;
  void *v23;
  uint64_t v24;
  WebCore::Node *v25;
  WebCore::Node *v26;
  __int16 v28;
  WebCore::Node *v29;
  int v30;
  WebCore::Node *v31;
  int v32;
  char v33;
  WebCore::Node *v34;
  int v35;
  char v36;
  WebCore::Node *v37[2];
  char v38;
  WebCore::Node *v39[2];

  if (*(_BYTE *)(a2 + 32))
  {
    v5 = *(_QWORD *)a2 == *(_QWORD *)(a2 + 16) && *(_DWORD *)(a2 + 8) == *(_DWORD *)(a2 + 24);
    if (!v5
      && WebCore::Node::computeEditability(*(_QWORD *)a2, 0, 1)
      && WebCore::Node::computeEditability(*(_QWORD *)(a2 + 16), 0, 1))
    {
      v6 = *(WebCore::Node **)a2;
      if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 16))
        goto LABEL_68;
      LODWORD(v2) = *(_DWORD *)(a2 + 8);
      if ((_DWORD)v2 != *(_DWORD *)(a2 + 24))
        goto LABEL_68;
      *((_DWORD *)v6 + 6) += 2;
      v34 = v6;
      v35 = (int)v2;
      if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v6 + 208))(v6) & 1) == 0)
        goto LABEL_90;
      v7 = 8;
      while (1)
      {
        v36 = v7;
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v34, (uint64_t)v37);
        v38 = 1;
        WebCore::previousVisuallyDistinctCandidate(v37, (uint64_t)v39);
        if (WebCore::Position::atStartOfTree((WebCore::Position *)v39))
        {
          v2 = 0;
        }
        else
        {
          WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v39, (uint64_t)&v29);
          v2 = v29;
        }
        v9 = v39[0];
        v39[0] = 0;
        if (v9)
        {
          if (*((_DWORD *)v9 + 6) == 2)
          {
            if ((*((_WORD *)v9 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v9, v8);
          }
          else
          {
            *((_DWORD *)v9 + 6) -= 2;
          }
        }
        v10 = v37[0];
        v37[0] = 0;
        if (v10)
        {
          if (*((_DWORD *)v10 + 6) == 2)
          {
            if ((*((_WORD *)v10 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v10, v8);
          }
          else
          {
            *((_DWORD *)v10 + 6) -= 2;
          }
        }
        if (*((_DWORD *)v6 + 6) == 2)
        {
          if ((*((_WORD *)v6 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v6, v8);
        }
        else
        {
          *((_DWORD *)v6 + 6) -= 2;
        }
        if (!v2)
          return 0;
        v11 = 0;
        *((_DWORD *)v2 + 6) += 2;
        v6 = v2;
        do
        {
          if (!WebCore::Node::hasEditableStyle((uint64_t)v6, 0))
            break;
          if ((*((_WORD *)v6 + 14) & 8) != 0)
            v11 = v6;
          i = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 5) + 8) + 1272);
          if (i)
          {
            if ((*(_WORD *)(i + 28) & 0x10) != 0
              && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
            {
              for (i = *(_QWORD *)(i + 80); i; i = *(_QWORD *)(i + 56))
              {
                if ((*(_WORD *)(i + 28) & 0x10) != 0
                  && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
                {
                  break;
                }
              }
            }
            else
            {
              i = 0;
            }
          }
          if ((WebCore::Node *)i == v6)
            break;
          v6 = (WebCore::Node *)*((_QWORD *)v6 + 4);
        }
        while (v6);
        v14 = *(WebCore::Node **)a2;
        if (*(_QWORD *)a2)
        {
          v15 = 0;
          v6 = *(WebCore::Node **)a2;
          do
          {
            if (!WebCore::Node::hasEditableStyle((uint64_t)v6, 0))
              break;
            if ((*((_WORD *)v6 + 14) & 8) != 0)
              v15 = v6;
            j = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v14 + 5) + 8) + 1272);
            if (j)
            {
              if ((*(_WORD *)(j + 28) & 0x10) != 0
                && *(_QWORD *)(*(_QWORD *)(j + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
              {
                for (j = *(_QWORD *)(j + 80); j; j = *(_QWORD *)(j + 56))
                {
                  if ((*(_WORD *)(j + 28) & 0x10) != 0
                    && *(_QWORD *)(*(_QWORD *)(j + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
                  {
                    break;
                  }
                }
              }
              else
              {
                j = 0;
              }
            }
            if ((WebCore::Node *)j == v6)
              break;
            v6 = (WebCore::Node *)*((_QWORD *)v6 + 4);
          }
          while (v6);
        }
        else
        {
          v15 = 0;
        }
        v17 = *((_DWORD *)v2 + 6) - 2;
        if (*((_DWORD *)v2 + 6) == 2)
        {
          v28 = *((_WORD *)v2 + 15);
          if ((v28 & 0x400) != 0)
            goto LABEL_83;
          WebCore::Node::removedLastRef(v2, v12);
          v17 = *((_DWORD *)v2 + 6);
        }
        else
        {
          *((_DWORD *)v2 + 6) = v17;
        }
        v18 = v17 - 2;
        if (v18)
        {
          *((_DWORD *)v2 + 6) = v18;
          goto LABEL_67;
        }
        v28 = *((_WORD *)v2 + 15);
LABEL_83:
        if ((v28 & 0x400) == 0)
          WebCore::Node::removedLastRef(v2, v12);
LABEL_67:
        if (v11 != v15)
          return 0;
LABEL_68:
        v19 = *(_QWORD *)(a1 + 8);
        if (!v19)
          return 0;
        v20 = *(_QWORD *)(v19 + 8);
        if (!v20)
          return 0;
        if (*(_BYTE *)(a2 + 32))
        {
          v21 = *(WebCore::Node **)a2;
          *((_DWORD *)v21 + 6) = *(_DWORD *)(*(_QWORD *)a2 + 24) + 2;
          v29 = v21;
          v30 = *(_DWORD *)(a2 + 8);
          v22 = *(WebCore::Node **)(a2 + 16);
          *((_DWORD *)v22 + 6) += 2;
          v31 = v22;
          v32 = *(_DWORD *)(a2 + 24);
          v33 = 1;
          v24 = (*(uint64_t (**)(uint64_t, WebCore::Node **))(*(_QWORD *)v20 + 16))(v20, &v29);
          if (v33)
          {
            v25 = v31;
            v31 = 0;
            if (v25)
            {
              if (*((_DWORD *)v25 + 6) == 2)
              {
                if ((*((_WORD *)v25 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v25, v23);
              }
              else
              {
                *((_DWORD *)v25 + 6) -= 2;
              }
            }
            v26 = v29;
            v29 = 0;
            if (v26)
            {
              if (*((_DWORD *)v26 + 6) == 2)
              {
                if ((*((_WORD *)v26 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v26, v23);
              }
              else
              {
                *((_DWORD *)v26 + 6) -= 2;
              }
            }
          }
          return v24;
        }
        __break(1u);
LABEL_90:
        if ((_DWORD)v2)
          v7 = 10;
        else
          v7 = 9;
      }
    }
  }
  return 0;
}

uint64_t WebCore::Editor::tryDHTMLCopy(WebCore::Editor *this, const WebCore::Position *a2)
{
  WebCore::Node *v3;
  void *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;

  v3 = WebCore::enclosingTextFormControl((WebCore *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 3064) + 120), a2);
  if (v3 && *(_QWORD *)(*((_QWORD *)v3 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    v5 = *((_DWORD *)v3 + 6);
    *((_DWORD *)v3 + 6) = v5 + 2;
    v6 = *(_DWORD *)(*((_QWORD *)v3 + 30) + 12);
    if (v5)
    {
      *((_DWORD *)v3 + 6) = v5;
    }
    else if ((*((_WORD *)v3 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v3, v4);
    }
    if (v6 == 2048)
      return 0;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 3064) + 120);
  if (v8)
  {
    *(_DWORD *)(v8 + 24) += 2;
    while (1)
    {
      v9 = v8;
      if ((*(_WORD *)(v8 + 28) & 8) != 0)
        break;
      v8 = *(_QWORD *)(v8 + 32);
      if (v8)
        *(_DWORD *)(v8 + 24) += 2;
      if (*(_DWORD *)(v9 + 24) == 2)
      {
        if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v9, v4);
      }
      else
      {
        *(_DWORD *)(v9 + 24) -= 2;
      }
      if (!v8)
        goto LABEL_20;
    }
    v10 = *(_DWORD *)(v8 + 24);
    *(_DWORD *)(v8 + 24) = v10 + 2;
    v16 = v8;
    if (v10)
    {
      *(_DWORD *)(v8 + 24) = v10;
    }
    else if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v4);
    }
    goto LABEL_34;
  }
LABEL_20:
  v11 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 1272);
  if (v11
    && (*(_WORD *)(v11 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
  {
    v9 = *(_QWORD *)(v11 + 80);
    if (v9)
    {
      while ((*(_WORD *)(v9 + 28) & 0x10) == 0)
      {
        v9 = *(_QWORD *)(v9 + 56);
        if (!v9)
          goto LABEL_33;
      }
      v12 = *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
      v13 = *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24);
      if (v13 != v12)
      {
LABEL_28:
        if (v13 != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
        {
          while (1)
          {
            v9 = *(_QWORD *)(v9 + 56);
            if (!v9)
              goto LABEL_33;
            if ((*(_WORD *)(v9 + 28) & 0x10) != 0)
            {
              v13 = *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24);
              if (v13 != v12)
                goto LABEL_28;
              break;
            }
          }
        }
      }
      *(_DWORD *)(v9 + 24) += 2;
    }
  }
  else
  {
    v9 = 0;
  }
LABEL_33:
  v16 = v9;
LABEL_34:
  v7 = WebCore::dispatchClipboardEvent(&v16, 0) ^ 1;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, v14);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  return v7;
}

uint64_t WebCore::Editor::tryDHTMLCut(WebCore::Editor *this, const WebCore::Position *a2)
{
  WebCore::Node *v3;
  void *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;

  v3 = WebCore::enclosingTextFormControl((WebCore *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 3064) + 120), a2);
  if (v3 && *(_QWORD *)(*((_QWORD *)v3 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    v5 = *((_DWORD *)v3 + 6);
    *((_DWORD *)v3 + 6) = v5 + 2;
    v6 = *(_DWORD *)(*((_QWORD *)v3 + 30) + 12);
    if (v5)
    {
      *((_DWORD *)v3 + 6) = v5;
    }
    else if ((*((_WORD *)v3 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v3, v4);
    }
    if (v6 == 2048)
      return 0;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 3064) + 120);
  if (v8)
  {
    *(_DWORD *)(v8 + 24) += 2;
    while (1)
    {
      v9 = v8;
      if ((*(_WORD *)(v8 + 28) & 8) != 0)
        break;
      v8 = *(_QWORD *)(v8 + 32);
      if (v8)
        *(_DWORD *)(v8 + 24) += 2;
      if (*(_DWORD *)(v9 + 24) == 2)
      {
        if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v9, v4);
      }
      else
      {
        *(_DWORD *)(v9 + 24) -= 2;
      }
      if (!v8)
        goto LABEL_20;
    }
    v10 = *(_DWORD *)(v8 + 24);
    *(_DWORD *)(v8 + 24) = v10 + 2;
    v16 = v8;
    if (v10)
    {
      *(_DWORD *)(v8 + 24) = v10;
    }
    else if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v4);
    }
    goto LABEL_34;
  }
LABEL_20:
  v11 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 1272);
  if (v11
    && (*(_WORD *)(v11 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
  {
    v9 = *(_QWORD *)(v11 + 80);
    if (v9)
    {
      while ((*(_WORD *)(v9 + 28) & 0x10) == 0)
      {
        v9 = *(_QWORD *)(v9 + 56);
        if (!v9)
          goto LABEL_33;
      }
      v12 = *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
      v13 = *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24);
      if (v13 != v12)
      {
LABEL_28:
        if (v13 != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
        {
          while (1)
          {
            v9 = *(_QWORD *)(v9 + 56);
            if (!v9)
              goto LABEL_33;
            if ((*(_WORD *)(v9 + 28) & 0x10) != 0)
            {
              v13 = *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24);
              if (v13 != v12)
                goto LABEL_28;
              break;
            }
          }
        }
      }
      *(_DWORD *)(v9 + 24) += 2;
    }
  }
  else
  {
    v9 = 0;
  }
LABEL_33:
  v16 = v9;
LABEL_34:
  v7 = WebCore::dispatchClipboardEvent(&v16, 2) ^ 1;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, v14);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  return v7;
}

uint64_t WebCore::Editor::shouldInsertText(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v15;
  _QWORD *v16;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 528) + 8)
                                        + 128)
                            + 8)
                + 144))
    v4 = 0;
  else
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 528) + 8) + 128)
                   + 8);
  if (!v4)
    goto LABEL_11;
  v5 = (unsigned int *)(v4 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = *(_QWORD *)(v4 + 280);
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 8) + 136) + 696) & 0x2000000) == 0
    || a4
    || *(_BYTE *)(v7 + 80))
  {
LABEL_11:
    v9 = *(_QWORD *)(a1 + 8);
    if (v9 && (v10 = *(_QWORD *)(v9 + 8)) != 0)
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 104))(v10);
      if (!v4)
        return v8;
    }
    else
    {
      v8 = 0;
      if (!v4)
        return v8;
    }
  }
  else
  {
    v8 = 0;
  }
  v11 = (unsigned int *)(v4 + 8);
  do
  {
    v12 = __ldaxr(v11);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v11));
  if (!v13)
  {
    atomic_store(1u, v11);
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v15 = off_1E31FE290;
    v15[1] = v11;
    v16 = v15;
    WTF::ensureOnMainThread();
    if (v16)
      (*(void (**)(_QWORD *))(*v16 + 8))(v16);
  }
  return v8;
}

uint64_t WebCore::Editor::respondToChangedContents(WebCore::Editor *this, const WebCore::VisibleSelection *a2)
{
  unsigned __int8 v3;
  WebCore::Node *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  WebCore::AXObjectCache *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::Node *v18;

  v3 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v3 & 1) != 0)
  {
    v4 = (WebCore::Node *)*((_QWORD *)a2 + 8);
    if (v4)
      *((_DWORD *)v4 + 6) += 2;
    if (WebCore::Document::hasEverCreatedAnAXObjectCache)
    {
      v18 = v4;
      v7 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
      if (*(_BYTE *)(v7 + 3362) || *(_BYTE *)(v7 + 3405))
      {
        while (1)
        {
          v14 = *(_QWORD *)(v7 + 528);
          if (!v14)
            break;
          v15 = *(_QWORD *)(v14 + 8);
          if (!v15)
            break;
          v16 = *(_QWORD *)(v15 + 120);
          if (!v16)
            break;
          v17 = *(_QWORD *)(v16 + 8);
          if (!v17)
            break;
          v7 = *(_QWORD *)(*(_QWORD *)(v17 + 40) + 8);
        }
      }
      else
      {
        v8 = *(_QWORD *)(v7 + 528);
        if (v8)
        {
          v9 = *(_QWORD *)(v8 + 8);
          if (v9)
          {
            v10 = *(_QWORD *)(*(_QWORD *)(v9 + 128) + 8);
            if (v10 && *(_BYTE *)(v10 + 144) == 0)
            {
              v12 = *(_QWORD *)(v10 + 296);
              if (v12)
                v7 = v12;
            }
          }
        }
      }
      v13 = *(WebCore::AXObjectCache **)(v7 + 1488);
      if (v13)
      {
        WebCore::AXObjectCache::postNotification(v13, v4, 57, 1);
        v4 = v18;
      }
    }
    if (v4)
    {
      if (*((_DWORD *)v4 + 6) == 2)
      {
        if ((*((_WORD *)v4 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v4);
      }
      else
      {
        *((_DWORD *)v4 + 6) -= 2;
      }
    }
  }
  result = WebCore::Editor::updateMarkersForWordsAffectedByEditing((uint64_t)this, 1);
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    result = *(_QWORD *)(v6 + 8);
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 248))(result);
  }
  return result;
}

uint64_t WebCore::Editor::updateMarkersForWordsAffectedByEditing(uint64_t this, int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  WebCore::Node *v11;
  WebCore::Node *v12;
  WebCore::Node *v13;
  WebCore::Node *v14;
  WebCore::Node *v15;
  WebCore::Node *v16;
  WebCore::Node *v17;
  WebCore::Node *v18;
  WTF *v19;
  WebCore::Node *v20;
  uint64_t v21;
  WebCore::Node *v22;
  WebCore::Node *v23;
  WTF *v24;
  WebCore::Node *v25;
  WebCore::Node *v26;
  WebCore::Node *v27;
  WebCore::Node *v28;
  _QWORD *v29;
  void *v30;
  WTF *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  int v40;
  WTF *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  _DWORD *v46;
  int v47;
  int v48;
  __int16 v49;
  WTF *v50;
  WebCore::Node *v51;
  WebCore::Node *v52;
  WebCore::Node *v53;
  WebCore::Node *v54;
  WebCore::Node *v55;
  WebCore::Node *v56;
  WebCore::Node *v57;
  uint64_t v58;
  uint64_t v59;
  WTF *v60;
  WTF *v61;
  WTF *v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  WebCore::Editor *v66;
  WTF *v67;
  uint64_t v68;
  WebCore::Node *v69;
  int v70;
  char v71;
  WebCore::Node *v72;
  int v73;
  char v74;
  WebCore::Node *v75;
  int v76;
  WebCore::Node *v77;
  int v78;
  char v79;
  char v80;
  WebCore::Node *v81;
  int v82;
  char v83;
  char v84;
  WebCore::Node *v85;
  int v86;
  char v87;
  char v88;
  WebCore::Node *v89;
  int v90;
  char v91;
  char v92;
  WebCore::Node *v93;
  int v94;
  char v95;
  char v96;
  WTF *v97;
  int v98;
  char v99;
  char v100;
  uint64_t v101[2];
  char v102;
  uint64_t v103[2];
  char v104;
  _QWORD *v105;

  v2 = *(_QWORD *)(*(_QWORD *)(this + 16) + 8);
  v3 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v3 + 2;
  v4 = *(_QWORD *)(v2 + 1496);
  if (!v4)
  {
LABEL_119:
    if (v3)
    {
      *(_DWORD *)(v2 + 24) = v3;
    }
    else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
    {
      return WebCore::Node::removedLastRef((WebCore::Node *)v2);
    }
    return this;
  }
  v5 = *(_DWORD *)v4 + 1;
  *(_DWORD *)v4 = v5;
  v6 = *(_QWORD *)(v4 + 8);
  if (!v6 || !*(_DWORD *)(v6 - 12))
    goto LABEL_116;
  v8 = this;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(*(_QWORD *)(v2 + 3064) + 120), (uint64_t)v103);
  v104 = 1;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(*(_QWORD *)(v2 + 3064) + 136), (uint64_t)v101);
  v102 = 1;
  if (!v103[0])
    goto LABEL_109;
  WebCore::startOfWord((uint64_t)v103, 1, (uint64_t)&v97);
  WebCore::endOfWord((WebCore *)v103, 1, (uint64_t)&v93);
  WebCore::startOfWord((uint64_t)v101, 0, (uint64_t)&v89);
  WebCore::endOfWord((WebCore *)v101, 0, (uint64_t)&v85);
  if (v97)
    goto LABEL_14;
  WebCore::startOfWord((uint64_t)v103, 0, (uint64_t)&v67);
  v9 = v67;
  v67 = 0;
  v10 = (uint64_t)v97;
  v97 = v9;
  if (v10)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v10);
        v60 = v67;
        v98 = v68;
        v99 = BYTE4(v68);
        v100 = (char)v69;
        v67 = 0;
        if (v60)
        {
          if (*((_DWORD *)v60 + 6) == 2)
          {
            if ((*((_WORD *)v60 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v60);
          }
          else
          {
            *((_DWORD *)v60 + 6) -= 2;
          }
        }
        goto LABEL_10;
      }
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  v98 = v68;
  v99 = BYTE4(v68);
  v100 = (char)v69;
LABEL_10:
  WebCore::endOfWord((WebCore *)v103, 0, (uint64_t)&v67);
  v11 = v67;
  v67 = 0;
  v12 = v93;
  v93 = v11;
  if (!v12)
  {
LABEL_13:
    v94 = v68;
    v95 = BYTE4(v68);
    v96 = (char)v69;
    goto LABEL_14;
  }
  if (*((_DWORD *)v12 + 6) != 2)
  {
    *((_DWORD *)v12 + 6) -= 2;
    goto LABEL_13;
  }
  if ((*((_WORD *)v12 + 15) & 0x400) != 0)
    goto LABEL_13;
  WebCore::Node::removedLastRef(v12);
  v61 = v67;
  v94 = v68;
  v95 = BYTE4(v68);
  v96 = (char)v69;
  v67 = 0;
  if (v61)
  {
    if (*((_DWORD *)v61 + 6) == 2)
    {
      if ((*((_WORD *)v61 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v61);
    }
    else
    {
      *((_DWORD *)v61 + 6) -= 2;
    }
  }
LABEL_14:
  if (v85)
    goto LABEL_23;
  WebCore::startOfWord((uint64_t)v101, 1, (uint64_t)&v67);
  v13 = v67;
  v67 = 0;
  v14 = v89;
  v89 = v13;
  if (!v14)
    goto LABEL_18;
  if (*((_DWORD *)v14 + 6) != 2)
  {
    *((_DWORD *)v14 + 6) -= 2;
LABEL_18:
    v90 = v68;
    v91 = BYTE4(v68);
    v92 = (char)v69;
    goto LABEL_19;
  }
  if ((*((_WORD *)v14 + 15) & 0x400) != 0)
    goto LABEL_18;
  WebCore::Node::removedLastRef(v14);
  v62 = v67;
  v90 = v68;
  v91 = BYTE4(v68);
  v92 = (char)v69;
  v67 = 0;
  if (v62)
  {
    if (*((_DWORD *)v62 + 6) == 2)
    {
      if ((*((_WORD *)v62 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v62);
    }
    else
    {
      *((_DWORD *)v62 + 6) -= 2;
    }
  }
LABEL_19:
  WebCore::endOfWord((WebCore *)v101, 1, (uint64_t)&v67);
  v15 = v67;
  v67 = 0;
  v16 = v85;
  v85 = v15;
  if (!v16)
  {
LABEL_22:
    v86 = v68;
    v87 = BYTE4(v68);
    v88 = (char)v69;
    goto LABEL_23;
  }
  if (*((_DWORD *)v16 + 6) != 2)
  {
    *((_DWORD *)v16 + 6) -= 2;
    goto LABEL_22;
  }
  if ((*((_WORD *)v16 + 15) & 0x400) != 0)
    goto LABEL_22;
  WebCore::Node::removedLastRef(v16);
  v63 = v67;
  v86 = v68;
  v87 = BYTE4(v68);
  v88 = (char)v69;
  v67 = 0;
  if (v63)
  {
    if (*((_DWORD *)v63 + 6) == 2)
    {
      if ((*((_WORD *)v63 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v63);
    }
    else
    {
      *((_DWORD *)v63 + 6) -= 2;
    }
  }
LABEL_23:
  v17 = v93;
  if (v93)
    *((_DWORD *)v93 + 6) += 2;
  v81 = v17;
  v82 = v94;
  v83 = v95;
  v84 = v96;
  v18 = v89;
  if (v89)
    *((_DWORD *)v89 + 6) += 2;
  v77 = v18;
  v78 = v90;
  v79 = v91;
  v80 = v92;
  if (!a2)
    goto LABEL_52;
  if (WebCore::operator==((uint64_t *)&v93, v103))
  {
    WebCore::nextBoundary((uint64_t)&v67, (uint64_t)&v97, (WebCore::Node *)WebCore::nextWordPositionBoundary);
    WebCore::VisiblePosition::honorEditingBoundaryAtOrAfter((WebCore::Node *)&v97, (const WebCore::VisiblePosition *)&v67, 0, (uint64_t)&v72);
    v19 = v67;
    v67 = 0;
    if (v19)
    {
      if (*((_DWORD *)v19 + 6) == 2)
      {
        if ((*((_WORD *)v19 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v19);
      }
      else
      {
        *((_DWORD *)v19 + 6) -= 2;
      }
    }
    v20 = v72;
    v72 = 0;
    v21 = (uint64_t)v97;
    v97 = v20;
    if (v21)
    {
      if (*(_DWORD *)(v21 + 24) == 2)
      {
        if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v21);
      }
      else
      {
        *(_DWORD *)(v21 + 24) -= 2;
      }
    }
    v98 = v73;
    v99 = v74;
    v100 = (char)v75;
    WebCore::endOfWord((WebCore *)&v97, 0, (uint64_t)&v67);
    v22 = v67;
    v67 = 0;
    v23 = v93;
    v93 = v22;
    if (v23)
    {
      if (*((_DWORD *)v23 + 6) == 2)
      {
        if ((*((_WORD *)v23 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v23);
          v64 = v67;
          v94 = v68;
          v95 = BYTE4(v68);
          v96 = (char)v69;
          v67 = 0;
          if (v64)
          {
            if (*((_DWORD *)v64 + 6) == 2)
            {
              if ((*((_WORD *)v64 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v64);
            }
            else
            {
              *((_DWORD *)v64 + 6) -= 2;
            }
          }
LABEL_39:
          if (WebCore::operator==((uint64_t *)&v97, (uint64_t *)&v77))
            goto LABEL_91;
          goto LABEL_40;
        }
      }
      else
      {
        *((_DWORD *)v23 + 6) -= 2;
      }
    }
    v94 = v68;
    v95 = BYTE4(v68);
    v96 = (char)v69;
    goto LABEL_39;
  }
LABEL_40:
  if (!WebCore::operator==((uint64_t *)&v89, v101))
    goto LABEL_52;
  WebCore::previousBoundary((uint64_t)&v67, (uint64_t)&v89, (uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t, char *))WebCore::previousWordPositionBoundary, 0);
  WebCore::VisiblePosition::honorEditingBoundaryAtOrBefore((WebCore::Node *)&v89, (const WebCore::VisiblePosition *)&v67, 0, (uint64_t)&v72);
  v24 = v67;
  v67 = 0;
  if (v24)
  {
    if (*((_DWORD *)v24 + 6) == 2)
    {
      if ((*((_WORD *)v24 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v24);
    }
    else
    {
      *((_DWORD *)v24 + 6) -= 2;
    }
  }
  v25 = v72;
  v72 = 0;
  v26 = v89;
  v89 = v25;
  if (v26)
  {
    if (*((_DWORD *)v26 + 6) == 2)
    {
      if ((*((_WORD *)v26 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v26);
    }
    else
    {
      *((_DWORD *)v26 + 6) -= 2;
    }
  }
  v90 = v73;
  v91 = v74;
  v92 = (char)v75;
  WebCore::endOfWord((WebCore *)&v89, 0, (uint64_t)&v67);
  v27 = v67;
  v67 = 0;
  v28 = v85;
  v85 = v27;
  if (!v28)
    goto LABEL_50;
  if (*((_DWORD *)v28 + 6) != 2)
  {
    *((_DWORD *)v28 + 6) -= 2;
LABEL_50:
    v86 = v68;
    v87 = BYTE4(v68);
    v88 = (char)v69;
    goto LABEL_51;
  }
  if ((*((_WORD *)v28 + 15) & 0x400) != 0)
    goto LABEL_50;
  WebCore::Node::removedLastRef(v28);
  v65 = v67;
  v86 = v68;
  v87 = BYTE4(v68);
  v88 = (char)v69;
  v67 = 0;
  if (v65)
  {
    if (*((_DWORD *)v65 + 6) == 2)
    {
      if ((*((_WORD *)v65 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v65);
    }
    else
    {
      *((_DWORD *)v65 + 6) -= 2;
    }
  }
LABEL_51:
  if (WebCore::operator==((uint64_t *)&v85, (uint64_t *)&v81))
    goto LABEL_91;
LABEL_52:
  if (!v97 || !v93 || !v89 || !v85)
    goto LABEL_91;
  WebCore::makeSimpleRange<WebCore::VisiblePosition,WebCore::VisiblePosition>((uint64_t *)&v97, (uint64_t)&v85, (uint64_t)&v67);
  if (!v71)
  {
    __break(1u);
    goto LABEL_192;
  }
  v72 = v67;
  v73 = v68;
  v75 = v69;
  v76 = v70;
  v67 = 0;
  v68 = 0;
  v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v29 = off_1E33A3BE8;
  v29[1] = &v67;
  v105 = v29;
  WebCore::DocumentMarkerController::forEach<(WebCore::DocumentMarkerController::IterationDirection)0>(v4, (uint64_t *)&v72, 512, &v105);
  (*(void (**)(_QWORD *))(*v29 + 8))(v29);
  v31 = v67;
  v32 = HIDWORD(v68);
  if (!HIDWORD(v68))
    goto LABEL_77;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 112) + 8) + 8) + 528))
  {
LABEL_70:
    v41 = (WTF *)((char *)v31 + 8 * v32);
    do
    {
      v42 = *(unsigned int **)v31;
      *(_QWORD *)v31 = 0;
      if (v42)
      {
        do
        {
          v43 = __ldaxr(v42);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v42));
        if (!v44)
        {
          atomic_store(1u, v42);
          WTF::fastFree((WTF *)v42, v30);
        }
      }
      v31 = (WTF *)((char *)v31 + 8);
    }
    while (v31 != v41);
    v31 = v67;
    goto LABEL_77;
  }
  v33 = 8 * HIDWORD(v68);
  do
  {
    v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 112) + 8) + 8) + 528);
    if (v34)
    {
      v35 = *(_QWORD *)(v34 + 8);
      if (v35)
      {
        v36 = *(_QWORD *)(v35 + 24);
        if (v36)
        {
          v37 = *(_QWORD *)(v36 + 8);
          if (v37)
          {
            v38 = *(_DWORD **)(v37 + 776);
            if (v38)
            {
              v39 = *(_QWORD *)(*(_QWORD *)v31 + 8);
              ++v38[2];
              if (*(_DWORD *)(v39 + 96) != 1)
              {
                v66 = (WebCore::Editor *)std::__throw_bad_variant_access[abi:sn180100]();
                return WebCore::Editor::hasBidiSelection(v66);
              }
              (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)v38 + 24))(v38, *(_QWORD *)(v39 + 32));
              v40 = v38[2];
              if (!v40)
              {
                __break(0xC471u);
                JUMPOUT(0x195AC0F48);
              }
              v38[2] = v40 - 1;
            }
          }
        }
      }
    }
    v31 = (WTF *)((char *)v31 + 8);
    v33 -= 8;
  }
  while (v33);
  v32 = HIDWORD(v68);
  v31 = v67;
  if (HIDWORD(v68))
    goto LABEL_70;
LABEL_77:
  if (v31)
  {
    v67 = 0;
    LODWORD(v68) = 0;
    WTF::fastFree(v31, v30);
  }
  v45 = *(_QWORD *)(v8 + 8);
  if (!v45 || (v46 = *(_DWORD **)(v45 + 8)) == 0)
  {
    v49 = 145;
    goto LABEL_85;
  }
  ++v46[4];
  v47 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v46 + 136))(v46);
  v48 = v46[4];
  if (!v48)
  {
LABEL_192:
    __break(0xC471u);
    JUMPOUT(0x195AC0F94);
  }
  v49 = 145;
  if (v47)
    v49 = 657;
  v46[4] = v48 - 1;
LABEL_85:
  WebCore::removeMarkers((const WebCore::SimpleRange *)&v72, v49 & 0x281, 1);
  v50 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v50 = off_1E33A3D00;
  v67 = v50;
  WebCore::DocumentMarkerController::forEach<(WebCore::DocumentMarkerController::IterationDirection)0>(v4, (uint64_t *)&v72, 8, &v67);
  (*(void (**)(WTF *))(*(_QWORD *)v50 + 8))(v50);
  v51 = v75;
  v75 = 0;
  if (v51)
  {
    if (*((_DWORD *)v51 + 6) == 2)
    {
      if ((*((_WORD *)v51 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v51);
    }
    else
    {
      *((_DWORD *)v51 + 6) -= 2;
    }
  }
  v52 = v72;
  v72 = 0;
  if (v52)
  {
    if (*((_DWORD *)v52 + 6) == 2)
    {
      if ((*((_WORD *)v52 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v52);
    }
    else
    {
      *((_DWORD *)v52 + 6) -= 2;
    }
  }
LABEL_91:
  v53 = v77;
  v77 = 0;
  if (v53)
  {
    if (*((_DWORD *)v53 + 6) == 2)
    {
      if ((*((_WORD *)v53 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v53);
    }
    else
    {
      *((_DWORD *)v53 + 6) -= 2;
    }
  }
  v54 = v81;
  v81 = 0;
  if (v54)
  {
    if (*((_DWORD *)v54 + 6) == 2)
    {
      if ((*((_WORD *)v54 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v54);
    }
    else
    {
      *((_DWORD *)v54 + 6) -= 2;
    }
  }
  v55 = v85;
  v85 = 0;
  if (v55)
  {
    if (*((_DWORD *)v55 + 6) == 2)
    {
      if ((*((_WORD *)v55 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v55);
    }
    else
    {
      *((_DWORD *)v55 + 6) -= 2;
    }
  }
  v56 = v89;
  v89 = 0;
  if (v56)
  {
    if (*((_DWORD *)v56 + 6) == 2)
    {
      if ((*((_WORD *)v56 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v56);
    }
    else
    {
      *((_DWORD *)v56 + 6) -= 2;
    }
  }
  v57 = v93;
  v93 = 0;
  if (v57)
  {
    if (*((_DWORD *)v57 + 6) == 2)
    {
      if ((*((_WORD *)v57 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v57);
    }
    else
    {
      *((_DWORD *)v57 + 6) -= 2;
    }
  }
  v58 = (uint64_t)v97;
  v97 = 0;
  if (v58)
  {
    if (*(_DWORD *)(v58 + 24) == 2)
    {
      if ((*(_WORD *)(v58 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v58);
    }
    else
    {
      *(_DWORD *)(v58 + 24) -= 2;
    }
  }
LABEL_109:
  v59 = v101[0];
  v101[0] = 0;
  if (v59)
  {
    if (*(_DWORD *)(v59 + 24) == 2)
    {
      if ((*(_WORD *)(v59 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v59);
    }
    else
    {
      *(_DWORD *)(v59 + 24) -= 2;
    }
  }
  this = v103[0];
  v103[0] = 0;
  if (this)
  {
    if (*(_DWORD *)(this + 24) == 2)
    {
      if ((*(_WORD *)(this + 30) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)this);
    }
    else
    {
      *(_DWORD *)(this + 24) -= 2;
    }
  }
  v5 = *(_DWORD *)v4;
LABEL_116:
  if (!v5)
  {
    __break(0xC471u);
    JUMPOUT(0x195AC0EE8);
  }
  *(_DWORD *)v4 = v5 - 1;
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 24) - 2;
    goto LABEL_119;
  }
  return this;
}

uint64_t WebCore::Editor::hasBidiSelection(WebCore::Editor *this, void *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  void *v4;
  WebCore::Node *v5;
  int v6;
  void *v7;
  WebCore::Node *v8;
  int v9;
  WebCore::Node *v10;
  WebCore::Node *v11;
  uint64_t v12;
  int v13;
  const WebCore::VisiblePosition *v14;
  int v15;
  int v16;
  WebCore::Node *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  WebCore::Node *v26;
  WebCore::Node *v27;
  WebCore::Node *v28;
  int v29;
  char v30;
  char v31;
  WebCore::Node *v32;
  WebCore::Node *v33;
  WebCore::Node *v34;
  int v35;
  char v36;
  char v37;

  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  *(_DWORD *)(v2 + 24) += 2;
  v3 = *(unsigned __int8 **)(v2 + 3064);
  if (!v3[153])
    goto LABEL_47;
  if (v3[153] != 2)
  {
    v13 = v3[152];
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v3 + 120), (uint64_t)&v28);
    v31 = 1;
    if (!v13)
    {
      v26 = v28;
      if (!v28)
      {
        v5 = 0;
        goto LABEL_37;
      }
      *((_DWORD *)v28 + 6) += 2;
      v34 = v26;
      v35 = v29;
      v36 = v30;
      v37 = 0;
      if (!WebCore::inSameLine((WebCore *)&v28, (const WebCore::VisiblePosition *)&v34, v14))
        v31 = 0;
      v27 = v34;
      v34 = 0;
      if (v27)
      {
        if (*((_DWORD *)v27 + 6) == 2)
        {
          if ((*((_WORD *)v27 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v27, a2);
        }
        else
        {
          *((_DWORD *)v27 + 6) -= 2;
        }
      }
    }
    v5 = v28;
    if (!v28)
      goto LABEL_37;
    v15 = *((_DWORD *)v28 + 6);
    *((_DWORD *)v28 + 6) = v15 + 4;
    v16 = v15 + 2;
    if (v16)
    {
      *((_DWORD *)v5 + 6) = v16;
    }
    else
    {
      if ((*((_WORD *)v5 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v5, a2);
        v17 = v28;
        v28 = 0;
        if (!v17)
          goto LABEL_37;
        v16 = *((_DWORD *)v17 + 6);
        goto LABEL_35;
      }
      v16 = 2;
    }
    v28 = 0;
    v17 = v5;
LABEL_35:
    v18 = v16 - 2;
    if (v18)
    {
      *((_DWORD *)v17 + 6) = v18;
    }
    else if ((*((_WORD *)v17 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v17, a2);
    }
    goto LABEL_37;
  }
  WebCore::Position::downstream((uint64_t)(v3 + 120), (WebCore::Node *)1, (uint64_t)&v34);
  v5 = v34;
  if (v34)
  {
    v6 = *((_DWORD *)v34 + 6);
    *((_DWORD *)v34 + 6) = v6 + 2;
    v34 = 0;
    if (v6)
    {
      *((_DWORD *)v5 + 6) = v6;
    }
    else if ((*((_WORD *)v5 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v5, v4);
    }
  }
  WebCore::Position::upstream(*(_QWORD *)(v2 + 3064) + 136, (WebCore::Node *)1, (uint64_t)&v34);
  v8 = v34;
  if (v34)
  {
    v9 = *((_DWORD *)v34 + 6);
    *((_DWORD *)v34 + 6) = v9 + 2;
    v34 = 0;
    if (v9)
    {
      *((_DWORD *)v8 + 6) = v9;
    }
    else if ((*((_WORD *)v8 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v8, v7);
    }
  }
  if (v5)
    *((_DWORD *)v5 + 6) += 2;
  v33 = v5;
  WebCore::enclosingBlock((uint64_t *)&v33, (WebCore::Node *)1, &v34);
  if (v8)
    *((_DWORD *)v8 + 6) += 2;
  v32 = v8;
  WebCore::enclosingBlock((uint64_t *)&v32, (WebCore::Node *)1, &v28);
  v10 = v34;
  v11 = v28;
  if (v28)
  {
    if (*((_DWORD *)v28 + 6) == 2)
    {
      if ((*((_WORD *)v28 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v28, a2);
    }
    else
    {
      *((_DWORD *)v28 + 6) -= 2;
    }
  }
  v32 = 0;
  if (v8)
  {
    if (*((_DWORD *)v8 + 6) == 2)
    {
      if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v8, a2);
    }
    else
    {
      *((_DWORD *)v8 + 6) -= 2;
    }
  }
  if (v10)
  {
    if (*((_DWORD *)v10 + 6) == 2)
    {
      if ((*((_WORD *)v10 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v10, a2);
    }
    else
    {
      *((_DWORD *)v10 + 6) -= 2;
    }
  }
  v33 = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 6) == 2)
    {
      if ((*((_WORD *)v5 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v5, a2);
    }
    else
    {
      *((_DWORD *)v5 + 6) -= 2;
    }
  }
  if (v8)
  {
    if (*((_DWORD *)v8 + 6) == 2)
    {
      if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v8, a2);
    }
    else
    {
      *((_DWORD *)v8 + 6) -= 2;
    }
  }
  if (v10 != v11)
  {
    v12 = 0;
    goto LABEL_56;
  }
LABEL_37:
  if (!v5)
  {
LABEL_47:
    v12 = 0;
LABEL_60:
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
    return v12;
  }
  v19 = WebCore::ScriptDisallowedScope::s_count++;
  v20 = *((_QWORD *)v5 + 8) & 0xFFFFFFFFFFFFLL;
  if (v20)
  {
    ++*(_DWORD *)((*((_QWORD *)v5 + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
    while ((*(_BYTE *)(v20 + 52) & 7) != 1)
    {
      v21 = *(_QWORD *)(v20 + 32);
      if (v21)
      {
        v21 = *(_QWORD *)(v21 + 8);
        if (v21)
          ++*(_DWORD *)(v21 + 16);
      }
      v22 = *(_DWORD *)(v20 + 16);
      if (!v22)
      {
        __break(0xC471u);
        JUMPOUT(0x195AC1378);
      }
      *(_DWORD *)(v20 + 16) = v22 - 1;
      v20 = v21;
      if (!v21)
        goto LABEL_46;
    }
    v23 = v20;
    if ((*(_BYTE *)(v20 + 45) & 2) != 0)
      v23 = *(_QWORD *)(*(_QWORD *)(v20 + 32) + 8);
    if ((*(_BYTE *)(v23 + 123) & 4) != 0)
      v12 = 1;
    else
      v12 = WebCore::RenderBlockFlow::containsNonZeroBidiLevel((WebCore::RenderBlockFlow *)v20, (const WebCore::RenderBlockFlow *)a2);
    v24 = *(_DWORD *)(v20 + 16);
    if (!v24)
    {
      __break(0xC471u);
      JUMPOUT(0x195AC13F8);
    }
    *(_DWORD *)(v20 + 16) = v24 - 1;
    v19 = WebCore::ScriptDisallowedScope::s_count - 1;
  }
  else
  {
LABEL_46:
    v12 = 0;
  }
  WebCore::ScriptDisallowedScope::s_count = v19;
LABEL_56:
  if (v5)
  {
    if (*((_DWORD *)v5 + 6) == 2)
    {
      if ((*((_WORD *)v5 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v5, a2);
    }
    else
    {
      *((_DWORD *)v5 + 6) -= 2;
    }
  }
  if (v2)
    goto LABEL_60;
  return v12;
}

void WebCore::Editor::insertOrderedList(WebCore::Editor *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  void *v7;
  int v8;
  WebCore::Node *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  WebCore::Node *v14;
  uint64_t v15;
  void *v16;
  WebCore::Node *v17;

  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 3064);
  v4 = *(_QWORD *)(v3 + 120);
  if (!v4)
    goto LABEL_25;
  v5 = *(_BYTE *)(v3 + 132) & 7;
  if (v5 > 4)
    goto LABEL_25;
  if (((1 << v5) & 0x19) == 0)
  {
    v4 = *(_QWORD *)(v4 + 32);
    if (!v4)
      goto LABEL_25;
  }
  *(_DWORD *)(v4 + 24) += 2;
  v8 = WebCore::Node::computeEditability(v4, 0, 1);
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v7);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  if (v8 == 2)
  {
    v9 = *(WebCore::Node **)(*((_QWORD *)this + 2) + 8);
    *((_DWORD *)v9 + 6) += 2;
    v17 = v9;
    v10 = WTF::fastMalloc((WTF *)0x128);
    v11 = WebCore::EditCommand::EditCommand(v10, (uint64_t *)&v17, 59);
    *(_OWORD *)(v11 + 248) = 0u;
    *(_OWORD *)(v11 + 264) = 0u;
    *(_QWORD *)v11 = off_1E33ACEF8;
    *(_QWORD *)(v11 + 280) = 0;
    *(_BYTE *)(v11 + 288) = 0;
    WebCore::CompositeEditCommand::apply((WebCore::CompositeEditCommand *)v11);
    v13 = *(_QWORD *)(v10 + 280);
    if (v13)
      *(_DWORD *)(v13 + 24) += 2;
    if (*(_DWORD *)(v10 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    else
      --*(_DWORD *)(v10 + 8);
    v14 = v17;
    v17 = 0;
    if (v14)
    {
      if (*((_DWORD *)v14 + 6) == 2)
      {
        if ((*((_WORD *)v14 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v14, v12);
      }
      else
      {
        *((_DWORD *)v14 + 6) -= 2;
      }
    }
    if (!*((_BYTE *)this + 88))
    {
      v15 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
      *(_DWORD *)(v15 + 24) += 2;
      WebCore::FrameSelection::revealSelection(*(_QWORD *)(v15 + 3064), 0, (uint64_t)&WebCore::ScrollAlignment::alignCenterIfNeeded, (BOOL *)1, 1);
      if (*(_DWORD *)(v15 + 24) == 2)
      {
        if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v15, v16);
      }
      else
      {
        *(_DWORD *)(v15 + 24) -= 2;
      }
    }
  }
  else
  {
LABEL_25:
    v13 = 0;
  }
  *a2 = v13;
}

void WebCore::Editor::insertUnorderedList(WebCore::Editor *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  void *v7;
  int v8;
  WebCore::Node *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  WebCore::Node *v14;
  uint64_t v15;
  void *v16;
  WebCore::Node *v17;

  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 3064);
  v4 = *(_QWORD *)(v3 + 120);
  if (!v4)
    goto LABEL_25;
  v5 = *(_BYTE *)(v3 + 132) & 7;
  if (v5 > 4)
    goto LABEL_25;
  if (((1 << v5) & 0x19) == 0)
  {
    v4 = *(_QWORD *)(v4 + 32);
    if (!v4)
      goto LABEL_25;
  }
  *(_DWORD *)(v4 + 24) += 2;
  v8 = WebCore::Node::computeEditability(v4, 0, 1);
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v7);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  if (v8 == 2)
  {
    v9 = *(WebCore::Node **)(*((_QWORD *)this + 2) + 8);
    *((_DWORD *)v9 + 6) += 2;
    v17 = v9;
    v10 = WTF::fastMalloc((WTF *)0x128);
    v11 = WebCore::EditCommand::EditCommand(v10, (uint64_t *)&v17, 59);
    *(_OWORD *)(v11 + 248) = 0u;
    *(_OWORD *)(v11 + 264) = 0u;
    *(_QWORD *)v11 = off_1E33ACEF8;
    *(_QWORD *)(v11 + 280) = 0;
    *(_BYTE *)(v11 + 288) = 1;
    WebCore::CompositeEditCommand::apply((WebCore::CompositeEditCommand *)v11);
    v13 = *(_QWORD *)(v10 + 280);
    if (v13)
      *(_DWORD *)(v13 + 24) += 2;
    if (*(_DWORD *)(v10 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    else
      --*(_DWORD *)(v10 + 8);
    v14 = v17;
    v17 = 0;
    if (v14)
    {
      if (*((_DWORD *)v14 + 6) == 2)
      {
        if ((*((_WORD *)v14 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v14, v12);
      }
      else
      {
        *((_DWORD *)v14 + 6) -= 2;
      }
    }
    if (!*((_BYTE *)this + 88))
    {
      v15 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
      *(_DWORD *)(v15 + 24) += 2;
      WebCore::FrameSelection::revealSelection(*(_QWORD *)(v15 + 3064), 0, (uint64_t)&WebCore::ScrollAlignment::alignCenterIfNeeded, (BOOL *)1, 1);
      if (*(_DWORD *)(v15 + 24) == 2)
      {
        if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v15, v16);
      }
      else
      {
        *(_DWORD *)(v15 + 24) -= 2;
      }
    }
  }
  else
  {
LABEL_25:
    v13 = 0;
  }
  *a2 = v13;
}

BOOL WebCore::Editor::canIncreaseSelectionListLevel(WebCore::Editor *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  void *v5;
  int v6;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 3064);
  v2 = *(_QWORD *)(v1 + 120);
  if (!v2)
    return 0;
  v3 = *(_BYTE *)(v1 + 132) & 7;
  if (v3 > 4)
    return 0;
  if (((1 << v3) & 0x19) == 0)
  {
    v2 = *(_QWORD *)(v2 + 32);
    if (!v2)
      return 0;
  }
  *(_DWORD *)(v2 + 24) += 2;
  v6 = WebCore::Node::computeEditability(v2, 0, 1);
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v5);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return v6 == 2
      && WebCore::IncreaseSelectionListLevelCommand::canIncreaseSelectionListLevel(*(WebCore::IncreaseSelectionListLevelCommand **)(*((_QWORD *)this + 2) + 8), (WebCore::Document *)v5);
}

BOOL WebCore::Editor::canDecreaseSelectionListLevel(WebCore::Editor *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  void *v5;
  int v6;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 3064);
  v2 = *(_QWORD *)(v1 + 120);
  if (!v2)
    return 0;
  v3 = *(_BYTE *)(v1 + 132) & 7;
  if (v3 > 4)
    return 0;
  if (((1 << v3) & 0x19) == 0)
  {
    v2 = *(_QWORD *)(v2 + 32);
    if (!v2)
      return 0;
  }
  *(_DWORD *)(v2 + 24) += 2;
  v6 = WebCore::Node::computeEditability(v2, 0, 1);
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v5);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return v6 == 2
      && WebCore::DecreaseSelectionListLevelCommand::canDecreaseSelectionListLevel(*(WebCore::DecreaseSelectionListLevelCommand **)(*((_QWORD *)this + 2) + 8), (WebCore::Document *)v5);
}

void WebCore::Editor::increaseSelectionListLevel(WebCore::Editor *this@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v9;
  uint64_t v10;

  v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  v5 = *(_QWORD *)(v4 + 3064);
  v6 = *(_QWORD *)(v5 + 120);
  if (!v6)
    goto LABEL_16;
  v7 = *(_BYTE *)(v5 + 132) & 7;
  if (v7 > 4)
    goto LABEL_16;
  if (((1 << v7) & 0x19) == 0)
  {
    v6 = *(_QWORD *)(v6 + 32);
    if (!v6)
      goto LABEL_16;
  }
  *(_DWORD *)(v6 + 24) += 2;
  v9 = WebCore::Node::computeEditability(v6, 0, 1);
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  if (v9 == 2 && *(_BYTE *)(*(_QWORD *)(v4 + 3064) + 153))
  {
    WebCore::IncreaseSelectionListLevelCommand::increaseSelectionListLevel((WebCore::Node *)v4, 0, a3);
    if (!*((_BYTE *)this + 88))
    {
      v10 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
      *(_DWORD *)(v10 + 24) += 2;
      WebCore::FrameSelection::revealSelection(*(_QWORD *)(v10 + 3064), 0, (uint64_t)&WebCore::ScrollAlignment::alignCenterIfNeeded, (BOOL *)1, 1);
      if (*(_DWORD *)(v10 + 24) == 2)
      {
        if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
      }
      else
      {
        *(_DWORD *)(v10 + 24) -= 2;
      }
    }
  }
  else
  {
LABEL_16:
    *a3 = 0;
  }
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
}

void WebCore::Editor::increaseSelectionListLevelOrdered(WebCore::Editor *this@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v9;
  uint64_t v10;

  v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  v5 = *(_QWORD *)(v4 + 3064);
  v6 = *(_QWORD *)(v5 + 120);
  if (!v6)
    goto LABEL_16;
  v7 = *(_BYTE *)(v5 + 132) & 7;
  if (v7 > 4)
    goto LABEL_16;
  if (((1 << v7) & 0x19) == 0)
  {
    v6 = *(_QWORD *)(v6 + 32);
    if (!v6)
      goto LABEL_16;
  }
  *(_DWORD *)(v6 + 24) += 2;
  v9 = WebCore::Node::computeEditability(v6, 0, 1);
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  if (v9 == 2 && *(_BYTE *)(*(_QWORD *)(v4 + 3064) + 153))
  {
    WebCore::IncreaseSelectionListLevelCommand::increaseSelectionListLevel((WebCore::Node *)v4, 1, a3);
    if (!*((_BYTE *)this + 88))
    {
      v10 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
      *(_DWORD *)(v10 + 24) += 2;
      WebCore::FrameSelection::revealSelection(*(_QWORD *)(v10 + 3064), 0, (uint64_t)&WebCore::ScrollAlignment::alignCenterIfNeeded, (BOOL *)1, 1);
      if (*(_DWORD *)(v10 + 24) == 2)
      {
        if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
      }
      else
      {
        *(_DWORD *)(v10 + 24) -= 2;
      }
    }
  }
  else
  {
LABEL_16:
    *a3 = 0;
  }
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
}

void WebCore::Editor::increaseSelectionListLevelUnordered(WebCore::Editor *this@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v9;
  uint64_t v10;

  v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  v5 = *(_QWORD *)(v4 + 3064);
  v6 = *(_QWORD *)(v5 + 120);
  if (!v6)
    goto LABEL_16;
  v7 = *(_BYTE *)(v5 + 132) & 7;
  if (v7 > 4)
    goto LABEL_16;
  if (((1 << v7) & 0x19) == 0)
  {
    v6 = *(_QWORD *)(v6 + 32);
    if (!v6)
      goto LABEL_16;
  }
  *(_DWORD *)(v6 + 24) += 2;
  v9 = WebCore::Node::computeEditability(v6, 0, 1);
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  if (v9 == 2 && *(_BYTE *)(*(_QWORD *)(v4 + 3064) + 153))
  {
    WebCore::IncreaseSelectionListLevelCommand::increaseSelectionListLevel((WebCore::Node *)v4, 2, a3);
    if (!*((_BYTE *)this + 88))
    {
      v10 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
      *(_DWORD *)(v10 + 24) += 2;
      WebCore::FrameSelection::revealSelection(*(_QWORD *)(v10 + 3064), 0, (uint64_t)&WebCore::ScrollAlignment::alignCenterIfNeeded, (BOOL *)1, 1);
      if (*(_DWORD *)(v10 + 24) == 2)
      {
        if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
      }
      else
      {
        *(_DWORD *)(v10 + 24) -= 2;
      }
    }
  }
  else
  {
LABEL_16:
    *a3 = 0;
  }
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
}

void WebCore::Editor::decreaseSelectionListLevel(WebCore::Editor *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v7;
  uint64_t v8;

  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  *(_DWORD *)(v2 + 24) += 2;
  v3 = *(_QWORD *)(v2 + 3064);
  v4 = *(_QWORD *)(v3 + 120);
  if (v4)
  {
    v5 = *(_BYTE *)(v3 + 132) & 7;
    if (v5 <= 4 && (((1 << v5) & 0x19) != 0 || (v4 = *(_QWORD *)(v4 + 32)) != 0))
    {
      *(_DWORD *)(v4 + 24) += 2;
      v7 = WebCore::Node::computeEditability(v4, 0, 1);
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
      if (v7 == 2)
      {
        if (*(_BYTE *)(*(_QWORD *)(v2 + 3064) + 153))
        {
          WebCore::DecreaseSelectionListLevelCommand::decreaseSelectionListLevel((WebCore::DecreaseSelectionListLevelCommand *)v2, (WebCore::Document *)a2);
          if (!*((_BYTE *)this + 88))
          {
            v8 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
            *(_DWORD *)(v8 + 24) += 2;
            WebCore::FrameSelection::revealSelection(*(_QWORD *)(v8 + 3064), 0, (uint64_t)&WebCore::ScrollAlignment::alignCenterIfNeeded, (BOOL *)1, 1);
            if (*(_DWORD *)(v8 + 24) == 2)
            {
              if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
            }
            else
            {
              *(_DWORD *)(v8 + 24) -= 2;
            }
          }
        }
      }
    }
  }
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
}

unsigned int *WebCore::Editor::findEventTargetFrom@<X0>(unsigned int *this@<X0>, const WebCore::VisibleSelection *a2@<X1>, unsigned int **a3@<X8>)
{
  unsigned int *v3;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = this;
  v5 = (unsigned int *)*((_QWORD *)a2 + 8);
  if (!v5)
  {
LABEL_14:
    v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 2) + 8) + 1272);
    if (v7)
    {
      if ((*(_WORD *)(v7 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
      {
        v7 = *(_QWORD *)(v7 + 80);
        if (v7)
        {
          while ((*(_WORD *)(v7 + 28) & 0x10) == 0)
          {
            v7 = *(_QWORD *)(v7 + 56);
            if (!v7)
              goto LABEL_27;
          }
          v8 = *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
          v9 = *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24);
          if (v9 != v8)
          {
LABEL_22:
            if (v9 != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
            {
              while (1)
              {
                v7 = *(_QWORD *)(v7 + 56);
                if (!v7)
                  goto LABEL_27;
                if ((*(_WORD *)(v7 + 28) & 0x10) != 0)
                {
                  v9 = *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24);
                  if (v9 != v8)
                    goto LABEL_22;
                  break;
                }
              }
            }
          }
          *(_DWORD *)(v7 + 24) += 2;
        }
      }
      else
      {
        v7 = 0;
      }
    }
LABEL_27:
    *a3 = (unsigned int *)v7;
    return this;
  }
  v5[6] += 2;
  while (1)
  {
    this = v5;
    if ((v5[7] & 8) != 0)
      break;
    v5 = (unsigned int *)*((_QWORD *)v5 + 4);
    if (v5)
      v5[6] += 2;
    if (this[6] == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
    }
    else
    {
      this[6] -= 2;
    }
    if (!v5)
      goto LABEL_14;
  }
  v6 = v5[6];
  v5[6] = v6 + 2;
  *a3 = v5;
  if (v6)
  {
    v5[6] = v6;
  }
  else if ((*((_WORD *)v5 + 15) & 0x400) == 0)
  {
    return WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
  }
  return this;
}

unsigned int *WebCore::Editor::applyStyle(unsigned int *result, const WebCore::StyleProperties *a2, unsigned int a3)
{
  unsigned int *v5;
  WebCore::EditingStyle *v6;
  WTF::StringImpl *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD **v12;
  _DWORD *v13;
  WTF *v14;
  uint64_t v16;
  WTF *v17;

  if (a2)
  {
    v5 = result;
    v6 = (WebCore::EditingStyle *)WTF::fastMalloc((WTF *)0x18);
    v17 = WebCore::EditingStyle::EditingStyle(v6, a2);
    result = WebCore::Editor::applyStyle(v5, &v17, a3, 1);
    v8 = v17;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
      {
        v9 = *((_QWORD *)v17 + 1);
        *((_QWORD *)v17 + 1) = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 1)
          {
            v10 = *(unsigned int *)(v9 + 28);
            if ((_DWORD)v10)
            {
              v11 = 16 * v10;
              v12 = (_DWORD **)(*(_QWORD *)(v9 + 16) + 8);
              do
              {
                v13 = *v12;
                *v12 = 0;
                if (v13)
                {
                  if (*v13 == 2)
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, v7);
                  else
                    *v13 -= 2;
                }
                v12 += 2;
                v11 -= 16;
              }
              while (v11);
            }
            v14 = *(WTF **)(v9 + 16);
            if ((WTF *)(v9 + 32) != v14 && v14 != 0)
            {
              *(_QWORD *)(v9 + 16) = 0;
              *(_DWORD *)(v9 + 24) = 0;
              WTF::fastFree(v14, v7);
            }
            v16 = *(_QWORD *)(v9 + 8);
            *(_QWORD *)(v9 + 8) = 0;
            if (v16)
              (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
            WTF::fastFree((WTF *)v9, v7);
          }
          else
          {
            --*(_DWORD *)v9;
          }
        }
        return (unsigned int *)WTF::fastFree(v8, v7);
      }
      else
      {
        --*(_DWORD *)v17;
      }
    }
  }
  return result;
}

unsigned int *WebCore::Editor::applyStyle(unsigned int *result, void *a2, unsigned int a3, int a4)
{
  unsigned int *v4;
  int v5;
  WTF::StringBuilder *v9;
  WTF::String *v10;
  __n128 v11;
  unint64_t v12;
  _DWORD *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  WebCore *v17;
  WTF::StringBuilder *v18;
  WTF::String *v19;
  __n128 v20;
  WebCore *v21;
  WebCore::Node *v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD **v33;
  _DWORD *v34;
  WTF *v35;
  uint64_t v37;
  _DWORD *v38;
  _DWORD *v39;
  uint64_t v40;
  WTF *v41;
  WTF::StringImpl *v42;
  _DWORD *v43;
  WebCore::Node *v44;

  if (*(_QWORD *)a2)
  {
    v4 = result;
    result = *(unsigned int **)(*((_QWORD *)result + 2) + 8);
    v5 = result[6];
    result[6] = v5 + 2;
    v44 = (WebCore::Node *)result;
    if (!*(_BYTE *)(*((_QWORD *)result + 383) + 153))
    {
      v44 = 0;
LABEL_43:
      if (v5)
      {
        result[6] = v5;
      }
      else if ((*((_WORD *)result + 15) & 0x400) == 0)
      {
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
      }
      return result;
    }
    WebCore::inputTypeNameForEditingAction(a3);
    if (v12 >= 2)
    {
      WTF::AtomStringImpl::add();
      v13 = v39;
    }
    else
    {
      v13 = (_DWORD *)*MEMORY[0x1E0CBF3B8];
      *(_DWORD *)*MEMORY[0x1E0CBF3B8] += 2;
    }
    v43 = v13;
    v14 = (a3 < 0x37) & (0x48880000000000uLL >> a3);
    v15 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v15)
    {
      if (a3 == 31 || a3 == 34)
      {
        v16 = 6;
        goto LABEL_13;
      }
      if (a3 == 32)
      {
        v16 = 5;
LABEL_13:
        WebCore::StyleProperties::serializeLonghandValue(v15, v16, v9, v10, (WebCore *)&v42, v11);
        goto LABEL_14;
      }
    }
    v42 = 0;
LABEL_14:
    v17 = (WebCore *)WebCore::editableRootForPosition(*((_QWORD *)v44 + 383) + 120, 0);
    v21 = v17;
    if (!v17
      || (*((_DWORD *)v17 + 6) += 2,
          v40 = 0,
          v41 = 0,
          v39 = 0,
          WebCore::dispatchBeforeInputEvent(v17, &v43, v14, (_DWORD **)&v42, (_DWORD **)&v41, (uint64_t)&v39, 1)))
    {
      v22 = v44;
      if (!*(_BYTE *)(*((_QWORD *)v44 + 383) + 153))
        goto LABEL_32;
      if (a4)
      {
        v23 = *(WTF **)a2;
        v41 = *(WTF **)a2;
        *(_QWORD *)a2 = 0;
      }
      else
      {
        WebCore::EditingStyle::inverseTransformColorIfNeeded(*(WebCore::EditingStyle **)a2, v21, v18, v19, (uint64_t *)&v41, v20);
        v22 = v44;
        v23 = v41;
      }
      if (*(_BYTE *)(*((_QWORD *)v22 + 383) + 153) == 1)
      {
        WebCore::Editor::computeAndSetTypingStyle(*(unsigned int **)(*((_QWORD *)v4 + 2) + 8), (uint64_t)v23, a3);
      }
      else
      {
        v24 = WTF::fastMalloc((WTF *)0x168);
        v25 = WebCore::EditCommand::EditCommand(v24, (uint64_t *)&v44, a3);
        *(_OWORD *)(v25 + 248) = 0u;
        *(_OWORD *)(v25 + 264) = 0u;
        *(_QWORD *)v25 = off_1E33A9688;
        WebCore::EditingStyle::copy(v23, (uint64_t *)&v39);
        *(_QWORD *)(v24 + 280) = v39;
        *(_BYTE *)(v24 + 288) = 0;
        WebCore::Position::downstream(v24 + 192, (WebCore::Node *)1, v24 + 296);
        WebCore::Position::upstream(v24 + 208, (WebCore::Node *)1, v24 + 312);
        *(_BYTE *)(v24 + 328) = 1;
        *(_QWORD *)(v24 + 336) = 0;
        *(_BYTE *)(v24 + 344) = 0;
        *(_QWORD *)(v24 + 352) = 0;
        WebCore::CompositeEditCommand::apply((WebCore::CompositeEditCommand *)v24);
        if (*(_DWORD *)(v24 + 8) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
        else
          --*(_DWORD *)(v24 + 8);
      }
      v26 = *((_QWORD *)v4 + 1);
      if (v26)
      {
        v27 = *(_QWORD *)(v26 + 8);
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 152))(v27);
      }
      if (v21)
      {
        v38 = 0;
        v39 = 0;
        v40 = 0;
        WebCore::dispatchInputEvent(v21, &v43, v14, (_DWORD **)&v42, &v38, (uint64_t)&v39);
      }
      v28 = v41;
      v41 = 0;
      if (!v28)
      {
LABEL_32:
        if (!v21)
          goto LABEL_35;
        goto LABEL_33;
      }
      if (*(_DWORD *)v28 != 1)
      {
        --*(_DWORD *)v28;
        goto LABEL_32;
      }
      v30 = *((_QWORD *)v28 + 1);
      *((_QWORD *)v28 + 1) = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 1)
        {
          v31 = *(unsigned int *)(v30 + 28);
          if ((_DWORD)v31)
          {
            v32 = 16 * v31;
            v33 = (_DWORD **)(*(_QWORD *)(v30 + 16) + 8);
            do
            {
              v34 = *v33;
              *v33 = 0;
              if (v34)
              {
                if (*v34 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v34, (WTF::StringImpl *)a2);
                else
                  *v34 -= 2;
              }
              v33 += 2;
              v32 -= 16;
            }
            while (v32);
          }
          v35 = *(WTF **)(v30 + 16);
          if ((WTF *)(v30 + 32) != v35 && v35 != 0)
          {
            *(_QWORD *)(v30 + 16) = 0;
            *(_DWORD *)(v30 + 24) = 0;
            WTF::fastFree(v35, a2);
          }
          v37 = *(_QWORD *)(v30 + 8);
          *(_QWORD *)(v30 + 8) = 0;
          if (v37)
            (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
          WTF::fastFree((WTF *)v30, a2);
        }
        else
        {
          --*(_DWORD *)v30;
        }
      }
      WTF::fastFree(v28, a2);
      if (!v21)
      {
LABEL_35:
        v29 = v42;
        v42 = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
          {
            WTF::StringImpl::destroy(v29, (WTF::StringImpl *)a2);
            if (v13)
            {
LABEL_39:
              if (*v13 == 2)
                WTF::StringImpl::destroy((WTF::StringImpl *)v13, (WTF::StringImpl *)a2);
              else
                *v13 -= 2;
            }
LABEL_41:
            result = (unsigned int *)v44;
            v44 = 0;
            if (!result)
              return result;
            v5 = result[6] - 2;
            goto LABEL_43;
          }
          *(_DWORD *)v29 -= 2;
        }
        if (v13)
          goto LABEL_39;
        goto LABEL_41;
      }
    }
LABEL_33:
    if (*((_DWORD *)v21 + 6) == 2)
    {
      if ((*((_WORD *)v21 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v21, a2);
    }
    else
    {
      *((_DWORD *)v21 + 6) -= 2;
    }
    goto LABEL_35;
  }
  return result;
}

BOOL WebCore::dispatchBeforeInputEvent(WebCore *a1, _DWORD **a2, char a3, _DWORD **a4, _DWORD **a5, uint64_t a6, int a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  WTF *v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  WTF *v21;
  int v22;
  uint64_t *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  WTF *v28;

  v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v14 || (v15 = *(_QWORD *)(v14 + 96)) == 0)
    v15 = WebCore::threadGlobalDataSlow(a1);
  v16 = *(_QWORD *)(v15 + 40);
  if (!v16)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v15);
    v16 = *(_QWORD *)(v15 + 40);
  }
  v17 = (_QWORD *)(v16 + 240);
  v18 = *(WTF **)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 8) + 528);
  if (v18)
  {
    v18 = (WTF *)*((_QWORD *)v18 + 1);
    if (v18)
    {
      v18 = (WTF *)*((_QWORD *)v18 + 14);
      if (v18)
        ++*(_DWORD *)v18;
    }
  }
  v28 = v18;
  v19 = (_DWORD *)bmalloc::api::isoAllocate();
  WebCore::InputEvent::InputEvent((uint64_t)v19, v17, a2, a7, (uint64_t *)&v28, a4, a5, a6, 0, a3);
  v21 = v28;
  v28 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 1)
    {
      v24 = (uint64_t *)*((_QWORD *)v21 + 2);
      *((_QWORD *)v21 + 2) = 0;
      if (v24)
      {
        if (*v24)
          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v24, v20);
        WTF::fastFree((WTF *)v24, v20);
      }
      v25 = (unsigned int *)*((_QWORD *)v21 + 1);
      *((_QWORD *)v21 + 1) = 0;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          WTF::fastFree((WTF *)v25, v20);
        }
      }
      WTF::fastFree(v21, v20);
    }
    else
    {
      --*(_DWORD *)v21;
    }
  }
  (*(void (**)(WebCore *, _DWORD *))(*(_QWORD *)a1 + 48))(a1, v19);
  v22 = v19[5];
  if (v19[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
  else
    --v19[4];
  return (v22 & 0x40) == 0;
}

unsigned int *WebCore::Editor::computeAndSetTypingStyle(unsigned int *this, uint64_t a2, char a3)
{
  unsigned int *v5;
  uint64_t v6;
  WebCore::EditingStyle *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  const WebCore::VisiblePosition *v11;
  WebCore::Node *v12;
  WTF::StringImpl *v13;
  unsigned int v14;
  _QWORD *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  int v18;
  int v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  unsigned int v24;
  WebCore::MutableStyleProperties *v25;
  uint64_t v26;
  WTF *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  _DWORD **v32;
  _DWORD *v33;
  WTF *v34;
  unsigned int v35;
  unsigned int v36;
  WTF *v37;
  _DWORD *v38;
  _DWORD *v39;
  WTF *v40;
  uint64_t v41;
  _DWORD *v42;
  WTF *v43;
  WTF *v45;
  uint64_t v46;
  _DWORD *v47;
  WTF *v48;
  WebCore::Node *v50;
  WTF *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF *v56;
  uint64_t v57;
  WTF *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD **v62;
  _DWORD *v63;
  WTF *v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _DWORD **v70;
  _DWORD *v71;
  WTF *v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _DWORD **v77;
  _DWORD *v78;
  WTF *v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _DWORD **v84;
  _DWORD *v85;
  WTF *v86;
  uint64_t v88;
  WebCore::Node *v89;
  void *v90;
  WTF *v91;
  int v92;
  WebCore::Node *v93;
  int v94;
  char v95;
  char v96;
  WebCore::Node *v97;
  int v98;
  char v99;
  _DWORD *v100;
  _DWORD *v101;
  WTF *v102;
  uint64_t v103;
  _BYTE v104[32];
  WTF *v105;
  unint64_t v106;
  _QWORD v107[4];
  uint64_t v108;
  int *v109;
  int *v110;

  v5 = this;
  this[6] += 2;
  v6 = *(_QWORD *)(a2 + 8);
  if ((!v6 || !*(_DWORD *)(v6 + 28))
    && *(float *)(a2 + 20) == *(float *)&WebCore::EditingStyle::NoFontDelta
    && (*(_BYTE *)(a2 + 16) & 0x1E) == 0)
  {
    v26 = *((_QWORD *)this + 383);
    v27 = *(WTF **)(v26 + 200);
    *(_QWORD *)(v26 + 200) = 0;
    if (!v27)
      goto LABEL_107;
    if (*(_DWORD *)v27 != 1)
    {
      --*(_DWORD *)v27;
      goto LABEL_107;
    }
    v67 = *((_QWORD *)v27 + 1);
    *((_QWORD *)v27 + 1) = 0;
    if (v67)
    {
      if (*(_DWORD *)v67 == 1)
      {
        v82 = *(unsigned int *)(v67 + 28);
        if ((_DWORD)v82)
        {
          v83 = 16 * v82;
          v84 = (_DWORD **)(*(_QWORD *)(v67 + 16) + 8);
          do
          {
            v85 = *v84;
            *v84 = 0;
            if (v85)
            {
              if (*v85 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v85, (WTF::StringImpl *)a2);
              else
                *v85 -= 2;
            }
            v84 += 2;
            v83 -= 16;
          }
          while (v83);
        }
        v86 = *(WTF **)(v67 + 16);
        if ((WTF *)(v67 + 32) != v86 && v86 != 0)
        {
          *(_QWORD *)(v67 + 16) = 0;
          *(_DWORD *)(v67 + 24) = 0;
          WTF::fastFree(v86, (void *)a2);
        }
        v88 = *(_QWORD *)(v67 + 8);
        *(_QWORD *)(v67 + 8) = 0;
        if (v88)
          (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
        WTF::fastFree((WTF *)v67, (void *)a2);
      }
      else
      {
        --*(_DWORD *)v67;
      }
    }
    v58 = v27;
    goto LABEL_114;
  }
  v7 = *(WebCore::EditingStyle **)(*((_QWORD *)this + 383) + 200);
  if (v7)
  {
    WebCore::EditingStyle::copy(v7, (uint64_t *)&v105);
    v8 = (uint64_t)v105;
  }
  else
  {
    v8 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = 0;
    *(_BYTE *)(v8 + 16) &= 0xE0u;
    *(_DWORD *)(v8 + 20) = WebCore::EditingStyle::NoFontDelta;
  }
  v9 = (unsigned __int8 *)*((_QWORD *)v5 + 383);
  if (v9[153] == 2)
  {
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v9 + 120), (uint64_t)&v93);
    v96 = 1;
  }
  else
  {
    v10 = v9[152];
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v9 + 120), (uint64_t)&v93);
    v96 = 1;
    if (!v10)
    {
      v89 = v93;
      if (!v93)
      {
        v12 = 0;
        goto LABEL_12;
      }
      *((_DWORD *)v93 + 6) += 2;
      v105 = v89;
      LODWORD(v106) = v94;
      BYTE4(v106) = v95;
      LOBYTE(v107[0]) = 0;
      if (!WebCore::inSameLine((WebCore *)&v93, (const WebCore::VisiblePosition *)&v105, v11))
        v96 = 0;
      v91 = v105;
      v105 = 0;
      if (v91)
      {
        if (*((_DWORD *)v91 + 6) == 2)
        {
          if ((*((_WORD *)v91 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v91, v90);
        }
        else
        {
          *((_DWORD *)v91 + 6) -= 2;
        }
      }
    }
  }
  v12 = v93;
  if (v93)
    *((_DWORD *)v93 + 6) += 2;
LABEL_12:
  v97 = v12;
  v98 = v94;
  v99 = v95;
  WebCore::EditingStyle::mergeStyle((WebCore::MutableStyleProperties *)v8, *(_QWORD *)(a2 + 8), 0);
  *(float *)(v8 + 20) = *(float *)(a2 + 20) + *(float *)(v8 + 20);
  WebCore::EditingStyle::prepareToApplyAt(v8, (uint64_t *)&v97, 0);
  v14 = *(unsigned __int8 *)(a2 + 16);
  if ((((v14 >> 1) | (v14 >> 3)) & 3) != 0)
  {
    v15 = *(_QWORD **)(v8 + 8);
    if (!v15)
    {
      v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x60);
      *v15 = 0x900000001;
      v15[1] = 0;
      v15[2] = v15 + 4;
      v15[3] = 4;
      v17 = *(_QWORD *)(v8 + 8);
      *(_QWORD *)(v8 + 8) = v15;
      if (v17)
      {
        if (*(_DWORD *)v17 == 1)
        {
          v60 = *(unsigned int *)(v17 + 28);
          if ((_DWORD)v60)
          {
            v61 = 16 * v60;
            v62 = (_DWORD **)(*(_QWORD *)(v17 + 16) + 8);
            do
            {
              v63 = *v62;
              *v62 = 0;
              if (v63)
              {
                if (*v63 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v63, v16);
                else
                  *v63 -= 2;
              }
              v62 += 2;
              v61 -= 16;
            }
            while (v61);
          }
          v64 = *(WTF **)(v17 + 16);
          if ((WTF *)(v17 + 32) != v64 && v64 != 0)
          {
            *(_QWORD *)(v17 + 16) = 0;
            *(_DWORD *)(v17 + 24) = 0;
            WTF::fastFree(v64, v16);
          }
          v66 = *(_QWORD *)(v17 + 8);
          *(_QWORD *)(v17 + 8) = 0;
          if (v66)
            (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
          WTF::fastFree((WTF *)v17, v16);
          v15 = *(_QWORD **)(v8 + 8);
        }
        else
        {
          --*(_DWORD *)v17;
        }
      }
    }
    v18 = (v14 >> 1) & 3;
    v19 = (v14 >> 3) & 3;
    WebCore::staticCSSValuePool[5068] += 2;
    v110 = &WebCore::staticCSSValuePool[5068];
    WebCore::staticCSSValuePool[4984] += 2;
    v109 = &WebCore::staticCSSValuePool[4984];
    WebCore::StyleProperties::getPropertyCSSValue((uint64_t)v15, 341, &v108);
    v105 = (WTF *)v107;
    v106 = 4;
    v21 = v108;
    if (!v108 || ((*(unsigned __int16 *)(v108 + 4) | (*(unsigned __int8 *)(v108 + 6) << 16)) & 0x3F800) != 0x1D800)
    {
      if (v18 == 1)
      {
        v110 = 0;
        v107[0] = &WebCore::staticCSSValuePool[5068];
        v24 = 1;
      }
      else
      {
        v24 = 0;
      }
      if (v19 == 1)
      {
        v107[v24] = &WebCore::staticCSSValuePool[4984];
        v109 = 0;
        HIDWORD(v106) = ++v24;
      }
      v25 = *(WebCore::MutableStyleProperties **)(v8 + 8);
      v102 = (WTF *)v104;
      v103 = 4;
      goto LABEL_50;
    }
    v102 = (WTF *)v104;
    v103 = 4;
    v22 = *(unsigned int *)(v108 + 8);
    if (v22 >= 5)
    {
      if (v22 >> 29)
      {
LABEL_212:
        __break(0xC471u);
        JUMPOUT(0x195AC32C0);
      }
      v23 = (WTF *)WTF::fastMalloc((WTF *)(8 * v22));
      LODWORD(v103) = v22;
      v102 = v23;
      LODWORD(v22) = *(_DWORD *)(v21 + 8);
      if (!(_DWORD)v22)
      {
LABEL_40:
        v34 = v105;
        if (HIDWORD(v106))
        {
          WTF::VectorTypeOperations<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>>::destruct(v105, (WTF *)((char *)v105 + 8 * HIDWORD(v106)));
          v34 = v105;
        }
        if (v34 != (WTF *)v107)
        {
          if (v34)
          {
            v105 = 0;
            LODWORD(v106) = 0;
            WTF::fastFree(v34, v20);
          }
          v105 = (WTF *)v107;
        }
        if (v102 == (WTF *)v104)
        {
          v36 = HIDWORD(v103);
          memcpy(v107, v104, 8 * HIDWORD(v103));
          v35 = v103;
        }
        else
        {
          v105 = v102;
          v35 = v103;
          v36 = HIDWORD(v103);
        }
        v106 = __PAIR64__(v36, v35);
        WebCore::applyTextDecorationChangeToValueList((uint64_t)&v105, v18, (const WTF::StringImpl *)&v110);
        WebCore::applyTextDecorationChangeToValueList((uint64_t)&v105, v19, (const WTF::StringImpl *)&v109);
        v37 = v105;
        v25 = *(WebCore::MutableStyleProperties **)(v8 + 8);
        v102 = (WTF *)v104;
        v103 = 4;
        v24 = HIDWORD(v106);
        if (v105 != (WTF *)v107)
        {
          v105 = (WTF *)v107;
          v102 = v37;
          v92 = v106;
          LODWORD(v106) = 4;
          LODWORD(v103) = v92;
          goto LABEL_51;
        }
LABEL_50:
        memcpy(v104, v107, 8 * v24);
LABEL_51:
        HIDWORD(v106) = 0;
        HIDWORD(v103) = v24;
        WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v102, (uint64_t *)&v100);
        v38 = v100;
        v100 = 0;
        v101 = v38;
        WebCore::MutableStyleProperties::setProperty(v25, 341, &v101, 0);
        v39 = v101;
        v101 = 0;
        if (v39)
        {
          if (*v39 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v39, v13);
          else
            *v39 -= 2;
        }
        if (v100)
        {
          if (*v100 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v100, v13);
          else
            *v100 -= 2;
        }
        if (HIDWORD(v103))
        {
          v40 = v102;
          v41 = 8 * HIDWORD(v103);
          do
          {
            v42 = *(_DWORD **)v40;
            *(_QWORD *)v40 = 0;
            if (v42)
            {
              if (*v42 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v42, v13);
              else
                *v42 -= 2;
            }
            v40 = (WTF *)((char *)v40 + 8);
            v41 -= 8;
          }
          while (v41);
        }
        v43 = v102;
        if (v104 != (_BYTE *)v102 && v102 != 0)
        {
          v102 = 0;
          LODWORD(v103) = 0;
          WTF::fastFree(v43, v13);
        }
        if (HIDWORD(v106))
        {
          v45 = v105;
          v46 = 8 * HIDWORD(v106);
          do
          {
            v47 = *(_DWORD **)v45;
            *(_QWORD *)v45 = 0;
            if (v47)
            {
              if (*v47 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v47, v13);
              else
                *v47 -= 2;
            }
            v45 = (WTF *)((char *)v45 + 8);
            v46 -= 8;
          }
          while (v46);
        }
        v48 = v105;
        if (v107 != (_QWORD *)v105 && v105 != 0)
        {
          v105 = 0;
          LODWORD(v106) = 0;
          WTF::fastFree(v48, v13);
        }
        if (v108)
        {
          if (*(_DWORD *)v108 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v108, v13);
          else
            *(_DWORD *)v108 -= 2;
        }
        if (v109)
        {
          if (*v109 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v109, v13);
          else
            *v109 -= 2;
        }
        if (v110)
        {
          if (*v110 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v110, v13);
          else
            *v110 -= 2;
        }
        v12 = v97;
        goto LABEL_87;
      }
    }
    else
    {
      v23 = (WTF *)v104;
      if (!(_DWORD)v22)
        goto LABEL_40;
    }
    v28 = 0;
    v29 = 0;
    v30 = *(_QWORD *)(v21 + 48);
    v31 = HIDWORD(v103);
    while (1)
    {
      if (v28 > 3)
      {
        if (v22 <= v28)
          goto LABEL_212;
        v32 = (_DWORD **)(v30 + 8 * (v29 - 4));
      }
      else
      {
        v32 = (_DWORD **)(v21 + 16 + 8 * v29);
      }
      v33 = *v32;
      *v33 += 2;
      *((_QWORD *)v23 + v31++) = v33;
      HIDWORD(v103) = v31;
      v28 = v29 + 1;
      v29 = (v29 + 1);
      if ((_DWORD)v22 == v28)
        goto LABEL_40;
    }
  }
LABEL_87:
  v97 = 0;
  if (v12)
  {
    if (*((_DWORD *)v12 + 6) == 2)
    {
      if ((*((_WORD *)v12 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v12, v13);
    }
    else
    {
      *((_DWORD *)v12 + 6) -= 2;
    }
  }
  v50 = v93;
  v93 = 0;
  if (v50)
  {
    if (*((_DWORD *)v50 + 6) == 2)
    {
      if ((*((_WORD *)v50 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v50, v13);
    }
    else
    {
      *((_DWORD *)v50 + 6) -= 2;
    }
  }
  this = (unsigned int *)WebCore::EditingStyle::extractAndRemoveBlockProperties((WebCore::EditingStyle *)v8, (uint64_t *)&v105);
  v51 = v105;
  v52 = *((_QWORD *)v105 + 1);
  if (v52 && *(_DWORD *)(v52 + 28)
    || *((float *)v105 + 5) != *(float *)&WebCore::EditingStyle::NoFontDelta
    || (*((_BYTE *)v105 + 16) & 0x1E) != 0)
  {
    v5[6] += 2;
    v102 = (WTF *)v5;
    v53 = WTF::fastMalloc((WTF *)0x168);
    v54 = WebCore::EditCommand::EditCommand(v53, (uint64_t *)&v102, a3);
    *(_OWORD *)(v54 + 248) = 0u;
    *(_OWORD *)(v54 + 264) = 0u;
    *(_QWORD *)v54 = off_1E33A9688;
    WebCore::EditingStyle::copy(v51, (uint64_t *)&v105);
    *(_QWORD *)(v53 + 280) = v105;
    *(_BYTE *)(v53 + 288) = 0;
    WebCore::Position::downstream(v53 + 192, (WebCore::Node *)1, v53 + 296);
    WebCore::Position::upstream(v53 + 208, (WebCore::Node *)1, v53 + 312);
    *(_BYTE *)(v53 + 328) = 1;
    *(_QWORD *)(v53 + 336) = 0;
    *(_BYTE *)(v53 + 344) = 0;
    *(_QWORD *)(v53 + 352) = 0;
    WebCore::CompositeEditCommand::apply((WebCore::CompositeEditCommand *)v53);
    if (*(_DWORD *)(v53 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
    else
      --*(_DWORD *)(v53 + 8);
    this = (unsigned int *)v102;
    v102 = 0;
    if (this)
    {
      if (this[6] == 2)
      {
        if ((*((_WORD *)this + 15) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)this, (void *)a2);
      }
      else
      {
        this[6] -= 2;
      }
    }
  }
  v55 = *((_QWORD *)v5 + 383);
  v56 = *(WTF **)(v55 + 200);
  *(_QWORD *)(v55 + 200) = v8;
  if (v56)
  {
    if (*(_DWORD *)v56 == 1)
    {
      v59 = *((_QWORD *)v56 + 1);
      *((_QWORD *)v56 + 1) = 0;
      if (v59)
      {
        if (*(_DWORD *)v59 == 1)
        {
          v75 = *(unsigned int *)(v59 + 28);
          if ((_DWORD)v75)
          {
            v76 = 16 * v75;
            v77 = (_DWORD **)(*(_QWORD *)(v59 + 16) + 8);
            do
            {
              v78 = *v77;
              *v77 = 0;
              if (v78)
              {
                if (*v78 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v78, (WTF::StringImpl *)a2);
                else
                  *v78 -= 2;
              }
              v77 += 2;
              v76 -= 16;
            }
            while (v76);
          }
          v79 = *(WTF **)(v59 + 16);
          if ((WTF *)(v59 + 32) != v79 && v79 != 0)
          {
            *(_QWORD *)(v59 + 16) = 0;
            *(_DWORD *)(v59 + 24) = 0;
            WTF::fastFree(v79, (void *)a2);
          }
          v81 = *(_QWORD *)(v59 + 8);
          *(_QWORD *)(v59 + 8) = 0;
          if (v81)
            (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
          WTF::fastFree((WTF *)v59, (void *)a2);
        }
        else
        {
          --*(_DWORD *)v59;
        }
      }
      this = (unsigned int *)WTF::fastFree(v56, (void *)a2);
    }
    else
    {
      --*(_DWORD *)v56;
    }
  }
  if (*(_DWORD *)v51 != 1)
  {
    --*(_DWORD *)v51;
    goto LABEL_107;
  }
  v57 = *((_QWORD *)v51 + 1);
  *((_QWORD *)v51 + 1) = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 1)
    {
      v68 = *(unsigned int *)(v57 + 28);
      if ((_DWORD)v68)
      {
        v69 = 16 * v68;
        v70 = (_DWORD **)(*(_QWORD *)(v57 + 16) + 8);
        do
        {
          v71 = *v70;
          *v70 = 0;
          if (v71)
          {
            if (*v71 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v71, (WTF::StringImpl *)a2);
            else
              *v71 -= 2;
          }
          v70 += 2;
          v69 -= 16;
        }
        while (v69);
      }
      v72 = *(WTF **)(v57 + 16);
      if ((WTF *)(v57 + 32) != v72 && v72 != 0)
      {
        *(_QWORD *)(v57 + 16) = 0;
        *(_DWORD *)(v57 + 24) = 0;
        WTF::fastFree(v72, (void *)a2);
      }
      v74 = *(_QWORD *)(v57 + 8);
      *(_QWORD *)(v57 + 8) = 0;
      if (v74)
        (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
      WTF::fastFree((WTF *)v57, (void *)a2);
    }
    else
    {
      --*(_DWORD *)v57;
    }
  }
  v58 = v51;
LABEL_114:
  this = (unsigned int *)WTF::fastFree(v58, (void *)a2);
LABEL_107:
  if (v5[6] == 2)
  {
    if ((*((_WORD *)v5 + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v5, (void *)a2);
  }
  else
  {
    v5[6] -= 2;
  }
  return this;
}

WebCore::Node *WebCore::dispatchInputEvent(WebCore *a1, _DWORD **a2, char a3, _DWORD **a4, _DWORD **a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  WTF *v16;
  WebCore::Node *v17;
  WebCore::Event *v18;
  WebCore::Node *result;
  WTF::StringImpl *v20;
  WTF *v21;
  uint64_t *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  WTF *v26;

  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  v15 = (_QWORD *)(v14 + 1008);
  v16 = *(WTF **)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 8) + 528);
  if (v16)
  {
    v16 = (WTF *)*((_QWORD *)v16 + 1);
    if (v16)
    {
      v16 = (WTF *)*((_QWORD *)v16 + 14);
      if (v16)
        ++*(_DWORD *)v16;
    }
  }
  v26 = v16;
  v17 = (WebCore::Node *)bmalloc::api::isoAllocate();
  WebCore::InputEvent::InputEvent((uint64_t)v17, v15, a2, 0, (uint64_t *)&v26, a4, a5, a6, 0, a3);
  result = WebCore::EventDispatcher::dispatchScopedEvent(a1, v17, v18);
  if (*((_DWORD *)v17 + 4) == 1)
    result = (WebCore::Node *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v17 + 8))(v17);
  else
    --*((_DWORD *)v17 + 4);
  v21 = v26;
  v26 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 1)
    {
      v22 = (uint64_t *)*((_QWORD *)v21 + 2);
      *((_QWORD *)v21 + 2) = 0;
      if (v22)
      {
        if (*v22)
          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v22, v20);
        WTF::fastFree((WTF *)v22, v20);
      }
      v23 = (unsigned int *)*((_QWORD *)v21 + 1);
      *((_QWORD *)v21 + 1) = 0;
      if (v23)
      {
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
        {
          atomic_store(1u, v23);
          WTF::fastFree((WTF *)v23, v20);
        }
      }
      return (WebCore::Node *)WTF::fastFree(v21, v20);
    }
    else
    {
      --*(_DWORD *)v21;
    }
  }
  return result;
}

uint64_t WebCore::Editor::shouldApplyStyle(WebCore::Editor *this, const WebCore::StyleProperties *a2, WebCore::Node **a3)
{
  uint64_t v3;
  WebCore::Node *v4;
  WebCore::Node *v5;
  void *v6;
  uint64_t v7;
  WebCore::Node *v8;
  WebCore::Node *v9;
  WebCore::Node *v11;
  int v12;
  WebCore::Node *v13;
  int v14;
  char v15;

  v3 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v4 = *a3;
  *((_DWORD *)v4 + 6) = *((_DWORD *)*a3 + 6) + 2;
  v11 = v4;
  v12 = *((_DWORD *)a3 + 2);
  v5 = a3[2];
  *((_DWORD *)v5 + 6) += 2;
  v13 = v5;
  v14 = *((_DWORD *)a3 + 6);
  v15 = 1;
  v7 = (*(uint64_t (**)(uint64_t, const WebCore::StyleProperties *, WebCore::Node **))(*(_QWORD *)v3 + 144))(v3, a2, &v11);
  if (v15)
  {
    v8 = v13;
    v13 = 0;
    if (v8)
    {
      if (*((_DWORD *)v8 + 6) == 2)
      {
        if ((*((_WORD *)v8 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v8, v6);
      }
      else
      {
        *((_DWORD *)v8 + 6) -= 2;
      }
    }
    v9 = v11;
    v11 = 0;
    if (v9)
    {
      if (*((_DWORD *)v9 + 6) == 2)
      {
        if ((*((_WORD *)v9 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v9, v6);
      }
      else
      {
        *((_DWORD *)v9 + 6) -= 2;
      }
    }
  }
  return v7;
}

unsigned int *WebCore::Editor::applyParagraphStyle(unsigned int *result, void *a2, unsigned int a3)
{
  unsigned int *v3;
  int v4;
  WTF::StringBuilder *v7;
  WTF::String *v8;
  __n128 v9;
  unint64_t v10;
  _DWORD *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  WebCore *v15;
  WebCore *v16;
  WebCore::EditingStyle *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD **v26;
  _DWORD *v27;
  WTF *v28;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  _DWORD *v33;
  WTF::StringImpl *v34;
  _DWORD *v35;
  WebCore::Node *v36;

  if (a2)
  {
    v3 = result;
    result = *(unsigned int **)(*((_QWORD *)result + 2) + 8);
    v4 = result[6];
    result[6] = v4 + 2;
    v36 = (WebCore::Node *)result;
    if (!*(_BYTE *)(*((_QWORD *)result + 383) + 153))
    {
      v36 = 0;
LABEL_35:
      if (v4)
      {
        result[6] = v4;
      }
      else if ((*((_WORD *)result + 15) & 0x400) == 0)
      {
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
      }
      return result;
    }
    WebCore::inputTypeNameForEditingAction(a3);
    if (v10 >= 2)
    {
      WTF::AtomStringImpl::add();
      v11 = v31;
    }
    else
    {
      v11 = (_DWORD *)*MEMORY[0x1E0CBF3B8];
      *(_DWORD *)*MEMORY[0x1E0CBF3B8] += 2;
    }
    v35 = v11;
    v12 = (a3 < 0x37) & (0x48880000000000uLL >> a3);
    if (a3 == 31 || a3 == 34)
    {
      v13 = (uint64_t)a2;
      v14 = 6;
    }
    else
    {
      if (a3 != 32)
      {
        v34 = 0;
LABEL_13:
        v15 = (WebCore *)WebCore::editableRootForPosition(*((_QWORD *)v36 + 383) + 120, 0);
        v16 = v15;
        if (v15)
        {
          *((_DWORD *)v15 + 6) += 2;
          v32 = 0;
          v33 = 0;
          v31 = 0;
          if (!WebCore::dispatchBeforeInputEvent(v15, &v35, v12, (_DWORD **)&v34, &v33, (uint64_t)&v31, 1)
            || !*(_BYTE *)(*((_QWORD *)v36 + 383) + 153))
          {
            goto LABEL_25;
          }
        }
        else if (!*(_BYTE *)(*((_QWORD *)v36 + 383) + 153))
        {
          goto LABEL_27;
        }
        v17 = (WebCore::EditingStyle *)WTF::fastMalloc((WTF *)0x18);
        WebCore::EditingStyle::EditingStyle(v17, (const WebCore::StyleProperties *)a2);
        v18 = WTF::fastMalloc((WTF *)0x168);
        v19 = WebCore::EditCommand::EditCommand(v18, (uint64_t *)&v36, a3);
        *(_OWORD *)(v19 + 248) = 0u;
        *(_OWORD *)(v19 + 264) = 0u;
        *(_QWORD *)v19 = off_1E33A9688;
        WebCore::EditingStyle::copy(v17, (uint64_t *)&v31);
        *(_QWORD *)(v18 + 280) = v31;
        *(_BYTE *)(v18 + 288) = 1;
        WebCore::Position::downstream(v18 + 192, (WebCore::Node *)1, v18 + 296);
        WebCore::Position::upstream(v18 + 208, (WebCore::Node *)1, v18 + 312);
        *(_BYTE *)(v18 + 328) = 1;
        *(_QWORD *)(v18 + 336) = 0;
        *(_BYTE *)(v18 + 344) = 0;
        *(_QWORD *)(v18 + 352) = 0;
        WebCore::CompositeEditCommand::apply((WebCore::CompositeEditCommand *)v18);
        if (*(_DWORD *)(v18 + 8) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        else
          --*(_DWORD *)(v18 + 8);
        if (*(_DWORD *)v17 == 1)
        {
          v23 = *((_QWORD *)v17 + 1);
          *((_QWORD *)v17 + 1) = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 1)
            {
              v24 = *(unsigned int *)(v23 + 28);
              if ((_DWORD)v24)
              {
                v25 = 16 * v24;
                v26 = (_DWORD **)(*(_QWORD *)(v23 + 16) + 8);
                do
                {
                  v27 = *v26;
                  *v26 = 0;
                  if (v27)
                  {
                    if (*v27 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v27, (WTF::StringImpl *)a2);
                    else
                      *v27 -= 2;
                  }
                  v26 += 2;
                  v25 -= 16;
                }
                while (v25);
              }
              v28 = *(WTF **)(v23 + 16);
              if ((WTF *)(v23 + 32) != v28 && v28 != 0)
              {
                *(_QWORD *)(v23 + 16) = 0;
                *(_DWORD *)(v23 + 24) = 0;
                WTF::fastFree(v28, a2);
              }
              v30 = *(_QWORD *)(v23 + 8);
              *(_QWORD *)(v23 + 8) = 0;
              if (v30)
                (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
              WTF::fastFree((WTF *)v23, a2);
            }
            else
            {
              --*(_DWORD *)v23;
            }
          }
          WTF::fastFree(v17, a2);
        }
        else
        {
          --*(_DWORD *)v17;
        }
        v20 = *((_QWORD *)v3 + 1);
        if (v20)
        {
          v21 = *(_QWORD *)(v20 + 8);
          if (v21)
            (*(void (**)(uint64_t))(*(_QWORD *)v21 + 152))(v21);
        }
        if (!v16)
        {
LABEL_27:
          v22 = v34;
          v34 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
            {
              WTF::StringImpl::destroy(v22, (WTF::StringImpl *)a2);
              if (v11)
              {
LABEL_31:
                if (*v11 == 2)
                  WTF::StringImpl::destroy((WTF::StringImpl *)v11, (WTF::StringImpl *)a2);
                else
                  *v11 -= 2;
              }
LABEL_33:
              result = (unsigned int *)v36;
              v36 = 0;
              if (!result)
                return result;
              v4 = result[6] - 2;
              goto LABEL_35;
            }
            *(_DWORD *)v22 -= 2;
          }
          if (v11)
            goto LABEL_31;
          goto LABEL_33;
        }
        v32 = 0;
        v33 = 0;
        v31 = 0;
        WebCore::dispatchInputEvent(v16, &v35, v12, (_DWORD **)&v34, &v33, (uint64_t)&v31);
LABEL_25:
        if (*((_DWORD *)v16 + 6) == 2)
        {
          if ((*((_WORD *)v16 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v16, a2);
        }
        else
        {
          *((_DWORD *)v16 + 6) -= 2;
        }
        goto LABEL_27;
      }
      v13 = (uint64_t)a2;
      v14 = 5;
    }
    WebCore::StyleProperties::serializeLonghandValue(v13, v14, v7, v8, (WebCore *)&v34, v9);
    goto LABEL_13;
  }
  return result;
}

unsigned int *WebCore::Editor::applyStyleToSelection(unsigned int *result, const WebCore::StyleProperties *a2, unsigned int a3)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  void *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  int v15;
  WebCore::Node *v16;
  WebCore::Node *v17[2];
  WebCore::Node *v18;
  char v19;

  if (a2)
  {
    v5 = result;
    v6 = *((_DWORD *)a2 + 1);
    if ((v6 & 8) != 0)
    {
      if (!*((_DWORD *)a2 + 7))
        return result;
    }
    else if (!(v6 >> 4))
    {
      return result;
    }
    v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)result + 2) + 8) + 3064);
    v8 = *(_QWORD *)(v7 + 120);
    if (v8)
    {
      v9 = *(_BYTE *)(v7 + 132) & 7;
      if (v9 <= 4 && (((1 << v9) & 0x19) != 0 || (v8 = *(_QWORD *)(v8 + 32)) != 0))
      {
        *(_DWORD *)(v8 + 24) += 2;
        result = (unsigned int *)WebCore::Node::computeEditability(v8, 0, 1);
        v11 = (int)result;
        if (*(_DWORD *)(v8 + 24) == 2)
        {
          if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)v8, v10);
        }
        else
        {
          *(_DWORD *)(v8 + 24) -= 2;
        }
        if (v11 == 2)
        {
          v12 = *((_QWORD *)v5 + 1);
          if (v12)
          {
            v13 = *(_QWORD *)(v12 + 8);
            if (v13)
            {
              WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 2) + 8) + 3064) + 56), v17);
              result = (unsigned int *)(*(uint64_t (**)(uint64_t, const WebCore::StyleProperties *, WebCore::Node **))(*(_QWORD *)v13 + 144))(v13, a2, v17);
              v15 = (int)result;
              if (v19)
              {
                v16 = v18;
                v18 = 0;
                if (v16)
                {
                  if (*((_DWORD *)v16 + 6) == 2)
                  {
                    if ((*((_WORD *)v16 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v16, v14);
                  }
                  else
                  {
                    *((_DWORD *)v16 + 6) -= 2;
                  }
                }
                result = (unsigned int *)v17[0];
                v17[0] = 0;
                if (result)
                {
                  if (result[6] == 2)
                  {
                    if ((*((_WORD *)result + 15) & 0x400) == 0)
                      result = WebCore::Node::removedLastRef((WebCore::Node *)result, v14);
                  }
                  else
                  {
                    result[6] -= 2;
                  }
                }
              }
              if (v15)
                return WebCore::Editor::applyStyle(v5, a2, a3);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::Editor::applyStyleToSelection(uint64_t result, WTF **a2, unsigned int a3, int a4)
{
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  void *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  WebCore::MutableStyleProperties *v19;
  char v20;
  uint64_t v21;
  unsigned int v22;
  WebCore::Node *v23;
  WTF::StringImpl *v24;
  _DWORD *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  _DWORD *v29;
  WTF *v30;
  WTF *v32;
  uint64_t v33;
  _DWORD *v34;
  WTF *v35;
  void *v37;
  int v38;
  WebCore::Node *v39;
  WTF *v40;
  WTF::StringImpl *v41;
  WTF *v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD **v45;
  _DWORD *v46;
  WTF *v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD **v53;
  _DWORD *v54;
  WTF *v55;
  uint64_t v57;
  WTF *v58;
  int v59;
  unsigned int v60;
  _BYTE v61[32];
  _DWORD *v62;
  _DWORD *v63;
  WTF *v64;
  uint64_t v65;
  WebCore::Node *v66[2];
  char v67;

  v7 = result;
  v8 = *a2;
  v9 = *((_QWORD *)*a2 + 1);
  if ((!v9 || !*(_DWORD *)(v9 + 28))
    && *((float *)v8 + 5) == *(float *)&WebCore::EditingStyle::NoFontDelta
    && (*((_BYTE *)v8 + 16) & 0x1E) == 0)
  {
    return result;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 8) + 3064);
  v11 = *(_QWORD *)(v10 + 120);
  if (!v11)
    return result;
  v12 = *(_BYTE *)(v10 + 132) & 7;
  if (v12 > 4)
    return result;
  if (((1 << v12) & 0x19) == 0)
  {
    v11 = *(_QWORD *)(v11 + 32);
    if (!v11)
      return result;
  }
  *(_DWORD *)(v11 + 24) += 2;
  result = WebCore::Node::computeEditability(v11, 0, 1);
  v14 = result;
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v11, v13);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (v14 != 2)
    return result;
  v15 = *(_QWORD *)(v7 + 8);
  if (!v15)
    return result;
  v16 = *(_QWORD *)(v15 + 8);
  if (!v16)
    return result;
  v17 = *a2;
  if ((*((_BYTE *)*a2 + 16) & 6) != 0)
  {
    v18 = *((_QWORD *)v17 + 1);
LABEL_15:
    if (v18)
    {
      v19 = (WebCore::MutableStyleProperties *)WTF::fastMalloc((WTF *)0x60);
      v18 = (uint64_t)WebCore::MutableStyleProperties::MutableStyleProperties(v19, (const WebCore::StyleProperties *)v18);
    }
    else
    {
      v18 = WTF::fastMalloc((WTF *)0x60);
      *(_QWORD *)v18 = 0x900000001;
      *(_QWORD *)(v18 + 8) = 0;
      *(_QWORD *)(v18 + 16) = v18 + 32;
      *(_QWORD *)(v18 + 24) = 4;
    }
    v64 = (WTF *)v66;
    v65 = 4;
    v20 = *((_BYTE *)v17 + 16);
    if ((v20 & 6) == 2)
    {
      v21 = 0x13CCu;
      WebCore::staticCSSValuePool[v21] += 2;
      v66[0] = (WebCore::Node *)&WebCore::staticCSSValuePool[v21];
      v22 = 1;
      if ((*((_BYTE *)v17 + 16) & 0x18) != 8)
        goto LABEL_27;
    }
    else
    {
      if ((v20 & 0x18) != 8)
      {
        dword_1ECE8BC48 += 2;
        v58 = (WTF *)&WebCore::staticCSSValuePool[3112];
        WebCore::MutableStyleProperties::setProperty((WebCore::MutableStyleProperties *)v18, 255, (_DWORD **)&v58, 0);
        v26 = v58;
        v58 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v26, v24);
          else
            *(_DWORD *)v26 -= 2;
        }
        goto LABEL_46;
      }
      v22 = 0;
    }
    v23 = (WebCore::Node *)&WebCore::staticCSSValuePool[4984];
    *(_DWORD *)v23 += 2;
    v66[v22++] = v23;
LABEL_27:
    v58 = (WTF *)v61;
    v59 = 4;
    memcpy(v61, v66, 8 * v22);
    HIDWORD(v65) = 0;
    v60 = v22;
    WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v58, (uint64_t *)&v62);
    v63 = v62;
    WebCore::MutableStyleProperties::setProperty((WebCore::MutableStyleProperties *)v18, 255, &v63, 0);
    v25 = v63;
    v63 = 0;
    if (v25)
    {
      if (*v25 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v25, v24);
      else
        *v25 -= 2;
    }
    if (v60)
    {
      v27 = v58;
      v28 = 8 * v60;
      do
      {
        v29 = *(_DWORD **)v27;
        *(_QWORD *)v27 = 0;
        if (v29)
        {
          if (*v29 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v29, v24);
          else
            *v29 -= 2;
        }
        v27 = (WTF *)((char *)v27 + 8);
        v28 -= 8;
      }
      while (v28);
    }
    v30 = v58;
    if (v61 != (_BYTE *)v58 && v58 != 0)
    {
      v58 = 0;
      v59 = 0;
      WTF::fastFree(v30, v24);
    }
LABEL_46:
    if (HIDWORD(v65))
    {
      v32 = v64;
      v33 = 8 * HIDWORD(v65);
      do
      {
        v34 = *(_DWORD **)v32;
        *(_QWORD *)v32 = 0;
        if (v34)
        {
          if (*v34 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v34, v24);
          else
            *v34 -= 2;
        }
        v32 = (WTF *)((char *)v32 + 8);
        v33 -= 8;
      }
      while (v33);
    }
    v35 = v64;
    if (v66 != (WebCore::Node **)v64 && v64 != 0)
    {
      v64 = 0;
      LODWORD(v65) = 0;
      WTF::fastFree(v35, v24);
    }
    goto LABEL_58;
  }
  v18 = *((_QWORD *)v17 + 1);
  if ((*((_BYTE *)*a2 + 16) & 0x18) != 0 || !v18)
    goto LABEL_15;
  ++*(_DWORD *)v18;
LABEL_58:
  WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 16) + 8) + 3064) + 56), &v64);
  result = (*(uint64_t (**)(uint64_t, uint64_t, WTF **))(*(_QWORD *)v16 + 144))(v16, v18, &v64);
  v38 = result;
  if (v67)
  {
    v39 = v66[0];
    v66[0] = 0;
    if (v39)
    {
      if (*((_DWORD *)v39 + 6) == 2)
      {
        if ((*((_WORD *)v39 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v39, v37);
      }
      else
      {
        *((_DWORD *)v39 + 6) -= 2;
      }
    }
    result = (uint64_t)v64;
    v64 = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 24) == 2)
      {
        if ((*(_WORD *)(result + 30) & 0x400) == 0)
          result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v37);
      }
      else
      {
        *(_DWORD *)(result + 24) -= 2;
      }
    }
  }
  if (*(_DWORD *)v18 != 1)
  {
    --*(_DWORD *)v18;
    if (!v38)
      return result;
    goto LABEL_67;
  }
  v43 = *(unsigned int *)(v18 + 28);
  if ((_DWORD)v43)
  {
    v44 = 16 * v43;
    v45 = (_DWORD **)(*(_QWORD *)(v18 + 16) + 8);
    do
    {
      v46 = *v45;
      *v45 = 0;
      if (v46)
      {
        if (*v46 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v46, (WTF::StringImpl *)v37);
        else
          *v46 -= 2;
      }
      v45 += 2;
      v44 -= 16;
    }
    while (v44);
  }
  v47 = *(WTF **)(v18 + 16);
  if ((WTF *)(v18 + 32) != v47 && v47 != 0)
  {
    *(_QWORD *)(v18 + 16) = 0;
    *(_DWORD *)(v18 + 24) = 0;
    WTF::fastFree(v47, v37);
  }
  v49 = *(_QWORD *)(v18 + 8);
  *(_QWORD *)(v18 + 8) = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  result = WTF::fastFree((WTF *)v18, v37);
  if (v38)
  {
LABEL_67:
    v40 = *a2;
    *a2 = 0;
    v64 = v40;
    result = (uint64_t)WebCore::Editor::applyStyle((unsigned int *)v7, &v64, a3, a4);
    v42 = v64;
    if (v64)
    {
      if (*(_DWORD *)v64 == 1)
      {
        v50 = *((_QWORD *)v64 + 1);
        *((_QWORD *)v64 + 1) = 0;
        if (v50)
        {
          if (*(_DWORD *)v50 == 1)
          {
            v51 = *(unsigned int *)(v50 + 28);
            if ((_DWORD)v51)
            {
              v52 = 16 * v51;
              v53 = (_DWORD **)(*(_QWORD *)(v50 + 16) + 8);
              do
              {
                v54 = *v53;
                *v53 = 0;
                if (v54)
                {
                  if (*v54 == 2)
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v54, v41);
                  else
                    *v54 -= 2;
                }
                v53 += 2;
                v52 -= 16;
              }
              while (v52);
            }
            v55 = *(WTF **)(v50 + 16);
            if ((WTF *)(v50 + 32) != v55 && v55 != 0)
            {
              *(_QWORD *)(v50 + 16) = 0;
              *(_DWORD *)(v50 + 24) = 0;
              WTF::fastFree(v55, v41);
            }
            v57 = *(_QWORD *)(v50 + 8);
            *(_QWORD *)(v50 + 8) = 0;
            if (v57)
              (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
            WTF::fastFree((WTF *)v50, v41);
          }
          else
          {
            --*(_DWORD *)v50;
          }
        }
        return WTF::fastFree(v42, v41);
      }
      else
      {
        --*(_DWORD *)v64;
      }
    }
  }
  return result;
}

unsigned int *WebCore::Editor::applyParagraphStyleToSelection(unsigned int *result, _DWORD *a2, unsigned int a3)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  void *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  int v15;
  WebCore::Node *v16;
  WebCore::Node *v17[2];
  WebCore::Node *v18;
  char v19;

  if (a2)
  {
    v5 = result;
    v6 = a2[1];
    if ((v6 & 8) != 0)
    {
      if (!a2[7])
        return result;
    }
    else if (!(v6 >> 4))
    {
      return result;
    }
    v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)result + 2) + 8) + 3064);
    v8 = *(_QWORD *)(v7 + 120);
    if (v8)
    {
      v9 = *(_BYTE *)(v7 + 132) & 7;
      if (v9 <= 4 && (((1 << v9) & 0x19) != 0 || (v8 = *(_QWORD *)(v8 + 32)) != 0))
      {
        *(_DWORD *)(v8 + 24) += 2;
        result = (unsigned int *)WebCore::Node::computeEditability(v8, 0, 1);
        v11 = (int)result;
        if (*(_DWORD *)(v8 + 24) == 2)
        {
          if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)v8, v10);
        }
        else
        {
          *(_DWORD *)(v8 + 24) -= 2;
        }
        if (v11 == 2)
        {
          v12 = *((_QWORD *)v5 + 1);
          if (v12)
          {
            v13 = *(_QWORD *)(v12 + 8);
            if (v13)
            {
              WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 2) + 8) + 3064) + 56), v17);
              result = (unsigned int *)(*(uint64_t (**)(uint64_t, _DWORD *, WebCore::Node **))(*(_QWORD *)v13 + 144))(v13, a2, v17);
              v15 = (int)result;
              if (v19)
              {
                v16 = v18;
                v18 = 0;
                if (v16)
                {
                  if (*((_DWORD *)v16 + 6) == 2)
                  {
                    if ((*((_WORD *)v16 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v16, v14);
                  }
                  else
                  {
                    *((_DWORD *)v16 + 6) -= 2;
                  }
                }
                result = (unsigned int *)v17[0];
                v17[0] = 0;
                if (result)
                {
                  if (result[6] == 2)
                  {
                    if ((*((_WORD *)result + 15) & 0x400) == 0)
                      result = WebCore::Node::removedLastRef((WebCore::Node *)result, v14);
                  }
                  else
                  {
                    result[6] -= 2;
                  }
                }
              }
              if (v15)
                return WebCore::Editor::applyParagraphStyle(v5, a2, a3);
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL WebCore::Editor::selectionStartHasStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF *v5;
  WTF::StringImpl *v6;
  _BOOL8 hasStyle;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD **v12;
  _DWORD *v13;
  WTF *v14;
  uint64_t v16;
  WTF *v17;

  WebCore::EditingStyle::styleAtSelectionStart((unsigned int *)(a1 + 56), (const WebCore::VisibleSelection *)((_DWORD)a2 == 61), (uint64_t *)&v17);
  v5 = v17;
  if (!v17)
    return 0;
  hasStyle = WebCore::EditingStyle::hasStyle((uint64_t)v17, a2, a3);
  if (*(_DWORD *)v5 == 1)
  {
    v9 = *((_QWORD *)v5 + 1);
    *((_QWORD *)v5 + 1) = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
      {
        v10 = *(unsigned int *)(v9 + 28);
        if ((_DWORD)v10)
        {
          v11 = 16 * v10;
          v12 = (_DWORD **)(*(_QWORD *)(v9 + 16) + 8);
          do
          {
            v13 = *v12;
            *v12 = 0;
            if (v13)
            {
              if (*v13 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, v6);
              else
                *v13 -= 2;
            }
            v12 += 2;
            v11 -= 16;
          }
          while (v11);
        }
        v14 = *(WTF **)(v9 + 16);
        if ((WTF *)(v9 + 32) != v14 && v14 != 0)
        {
          *(_QWORD *)(v9 + 16) = 0;
          *(_DWORD *)(v9 + 24) = 0;
          WTF::fastFree(v14, v6);
        }
        v16 = *(_QWORD *)(v9 + 8);
        *(_QWORD *)(v9 + 8) = 0;
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        WTF::fastFree((WTF *)v9, v6);
      }
      else
      {
        --*(_DWORD *)v9;
      }
    }
    WTF::fastFree(v5, v6);
  }
  else
  {
    --*(_DWORD *)v5;
  }
  return hasStyle;
}

uint64_t WebCore::Editor::selectionHasStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  int v9;
  WebCore::Node *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _WORD *v14;
  uint64_t v15;
  WebCore *v16;
  uint64_t v17;
  __int16 v18;
  WTF *v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  _DWORD **v24;
  _DWORD *v25;
  int v26;
  WTF::StringImpl *v27;
  WebCore::Node *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v32;
  _WORD *v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD **v36;
  _DWORD *v37;
  WTF *v38;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD **v46;
  _DWORD *v47;
  WTF *v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD **v53;
  _DWORD *v54;
  WTF *v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD **v60;
  _DWORD *v61;
  WTF *v62;
  uint64_t v64;
  WebCore::Node *v65;
  char v66;
  WTF::StringImpl *v67;
  char v68;
  char v69;
  WTF *v70;

  v6 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v6 = 1;
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 16) &= 0xE0u;
  *(_DWORD *)(v6 + 20) = WebCore::EditingStyle::NoFontDelta;
  WebCore::EditingStyle::setProperty(v6, a2, a3, 0);
  WebCore::EditingStyle::extractFontSizeDelta((WebCore::EditingStyle *)v6);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 3064);
  v9 = *(unsigned __int8 *)(v8 + 153);
  if (!*(_BYTE *)(v8 + 153))
    goto LABEL_92;
  if (v9 == 1)
  {
    WebCore::EditingStyle::styleAtSelectionStart((unsigned int *)(v8 + 56), 0, (uint64_t *)&v65);
    v10 = v65;
    if (v65)
    {
      v11 = *((_QWORD *)v65 + 1);
      if (v11)
      {
        ++*(_DWORD *)v11;
        LOBYTE(v9) = WebCore::EditingStyle::triStateOfStyle<WebCore::MutableStyleProperties>(v6, v11, 1);
        if (*(_DWORD *)v11 == 1)
        {
          v44 = *(unsigned int *)(v11 + 28);
          if ((_DWORD)v44)
          {
            v45 = 16 * v44;
            v46 = (_DWORD **)(*(_QWORD *)(v11 + 16) + 8);
            do
            {
              v47 = *v46;
              *v46 = 0;
              if (v47)
              {
                if (*v47 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v47, v7);
                else
                  *v47 -= 2;
              }
              v46 += 2;
              v45 -= 16;
            }
            while (v45);
          }
          v48 = *(WTF **)(v11 + 16);
          if ((WTF *)(v11 + 32) != v48 && v48 != 0)
          {
            *(_QWORD *)(v11 + 16) = 0;
            *(_DWORD *)(v11 + 24) = 0;
            WTF::fastFree(v48, v7);
          }
          v50 = *(_QWORD *)(v11 + 8);
          *(_QWORD *)(v11 + 8) = 0;
          if (v50)
            (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
          WTF::fastFree((WTF *)v11, v7);
        }
        else
        {
          --*(_DWORD *)v11;
        }
      }
      else
      {
        LOBYTE(v9) = 0;
      }
      if (*(_DWORD *)v10 == 1)
      {
        v43 = *((_QWORD *)v10 + 1);
        *((_QWORD *)v10 + 1) = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 1)
          {
            v58 = *(unsigned int *)(v43 + 28);
            if ((_DWORD)v58)
            {
              v59 = 16 * v58;
              v60 = (_DWORD **)(*(_QWORD *)(v43 + 16) + 8);
              do
              {
                v61 = *v60;
                *v60 = 0;
                if (v61)
                {
                  if (*v61 == 2)
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v61, v7);
                  else
                    *v61 -= 2;
                }
                v60 += 2;
                v59 -= 16;
              }
              while (v59);
            }
            v62 = *(WTF **)(v43 + 16);
            if ((WTF *)(v43 + 32) != v62 && v62 != 0)
            {
              *(_QWORD *)(v43 + 16) = 0;
              *(_DWORD *)(v43 + 24) = 0;
              WTF::fastFree(v62, v7);
            }
            v64 = *(_QWORD *)(v43 + 8);
            *(_QWORD *)(v43 + 8) = 0;
            if (v64)
              (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
            WTF::fastFree((WTF *)v43, v7);
          }
          else
          {
            --*(_DWORD *)v43;
          }
        }
        WTF::fastFree(v10, v7);
      }
      else
      {
        --*(_DWORD *)v10;
      }
      goto LABEL_92;
    }
LABEL_88:
    LOBYTE(v9) = 0;
    goto LABEL_92;
  }
  v12 = *(_QWORD *)(v8 + 120);
  if (!v12)
    goto LABEL_88;
  LOBYTE(v9) = 0;
  *(_DWORD *)(v12 + 24) += 2;
  v13 = 1;
  v14 = WebCore::textOnlyProperties;
  while (1)
  {
    v15 = v12;
    if ((*(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if (WebCore::Node::computeEditability(v12, 0, 1))
        break;
    }
LABEL_43:
    if (v15 == *(_QWORD *)(v8 + 136))
      goto LABEL_86;
    if ((*(_WORD *)(v15 + 28) & 4) != 0 && (v12 = *(_QWORD *)(v15 + 80)) != 0 || (v12 = *(_QWORD *)(v15 + 56)) != 0)
    {
LABEL_50:
      *(_DWORD *)(v12 + 24) += 2;
    }
    else
    {
      v29 = v15;
      while (1)
      {
        v29 = *(_QWORD *)(v29 + 32);
        if (!v29)
          break;
        v12 = *(_QWORD *)(v29 + 56);
        if (v12)
          goto LABEL_50;
      }
      v12 = 0;
    }
    if (*(_DWORD *)(v15 + 24) == 2)
    {
      if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v15, v7);
    }
    else
    {
      *(_DWORD *)(v15 + 24) -= 2;
    }
    if (!v12)
      goto LABEL_92;
  }
  v16 = WebCore::styleElementForNode((WebCore *)v12, v7);
  if (v16)
    *((_DWORD *)v16 + 6) += 2;
  v65 = v16;
  v66 = 0;
  v68 = 0;
  v69 = 0;
  v17 = *(_QWORD *)(v6 + 8);
  if (!v17)
  {
    v21 = 1;
    goto LABEL_29;
  }
  v18 = *(_WORD *)(v15 + 28);
  ++*(_DWORD *)v17;
  WebCore::getPropertiesNotIn<WebCore::ComputedStyleExtractor>((uint64_t *)&v70, (const WebCore::StyleProperties *)v17, &v65);
  v19 = v70;
  if ((v18 & 2) == 0)
    WebCore::MutableStyleProperties::removeProperties((uint64_t)v70, v14, 5);
  v20 = *((unsigned int *)v19 + 7);
  if ((_DWORD)v20)
  {
    v21 = 2 * ((_DWORD)v20 != *(_DWORD *)(v17 + 28));
    v22 = *(_DWORD *)v19 - 1;
    if (*(_DWORD *)v19 == 1)
    {
      v23 = 16 * v20;
      v24 = (_DWORD **)(*((_QWORD *)v19 + 2) + 8);
      do
      {
        v25 = *v24;
        *v24 = 0;
        if (v25)
        {
          if (*v25 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v25, v7);
          else
            *v25 -= 2;
        }
        v24 += 2;
        v23 -= 16;
      }
      while (v23);
      v14 = WebCore::textOnlyProperties;
      goto LABEL_59;
    }
  }
  else
  {
    v21 = 1;
    v22 = *(_DWORD *)v19 - 1;
    if (*(_DWORD *)v19 == 1)
    {
LABEL_59:
      v30 = (WTF *)*((_QWORD *)v19 + 2);
      if ((WTF *)((char *)v19 + 32) != v30 && v30 != 0)
      {
        *((_QWORD *)v19 + 2) = 0;
        *((_DWORD *)v19 + 6) = 0;
        WTF::fastFree(v30, v7);
      }
      v32 = *((_QWORD *)v19 + 1);
      *((_QWORD *)v19 + 1) = 0;
      if (v32)
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
      WTF::fastFree(v19, v7);
      goto LABEL_27;
    }
  }
  *(_DWORD *)v19 = v22;
LABEL_27:
  if (*(_DWORD *)v17 == 1)
  {
    v33 = v14;
    v34 = *(unsigned int *)(v17 + 28);
    if ((_DWORD)v34)
    {
      v35 = 16 * v34;
      v36 = (_DWORD **)(*(_QWORD *)(v17 + 16) + 8);
      do
      {
        v37 = *v36;
        *v36 = 0;
        if (v37)
        {
          if (*v37 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v37, v7);
          else
            *v37 -= 2;
        }
        v36 += 2;
        v35 -= 16;
      }
      while (v35);
    }
    v38 = *(WTF **)(v17 + 16);
    if ((WTF *)(v17 + 32) != v38 && v38 != 0)
    {
      *(_QWORD *)(v17 + 16) = 0;
      *(_DWORD *)(v17 + 24) = 0;
      WTF::fastFree(v38, v7);
    }
    v40 = *(_QWORD *)(v17 + 8);
    *(_QWORD *)(v17 + 8) = 0;
    v14 = v33;
    if (v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    WTF::fastFree((WTF *)v17, v7);
  }
  else
  {
    --*(_DWORD *)v17;
  }
LABEL_29:
  if ((v13 & 1) != 0)
  {
    LOBYTE(v9) = v21;
  }
  else if (v21 != v9 && (*(_WORD *)(v15 + 28) & 2) != 0)
  {
    v26 = 0;
    LOBYTE(v9) = 2;
    goto LABEL_34;
  }
  v26 = 1;
LABEL_34:
  if (v68)
  {
    v27 = v67;
    v67 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v7);
      else
        *(_DWORD *)v27 -= 2;
    }
  }
  v28 = v65;
  v65 = 0;
  if (v28)
  {
    if (*((_DWORD *)v28 + 6) == 2)
    {
      if ((*((_WORD *)v28 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v28, v7);
    }
    else
    {
      *((_DWORD *)v28 + 6) -= 2;
    }
  }
  if (v26)
  {
    v13 = 0;
    goto LABEL_43;
  }
LABEL_86:
  if (*(_DWORD *)(v15 + 24) == 2)
  {
    if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v15, v7);
  }
  else
  {
    *(_DWORD *)(v15 + 24) -= 2;
  }
LABEL_92:
  if (*(_DWORD *)v6 == 1)
  {
    v42 = *(_QWORD *)(v6 + 8);
    *(_QWORD *)(v6 + 8) = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 1)
      {
        v51 = *(unsigned int *)(v42 + 28);
        if ((_DWORD)v51)
        {
          v52 = 16 * v51;
          v53 = (_DWORD **)(*(_QWORD *)(v42 + 16) + 8);
          do
          {
            v54 = *v53;
            *v53 = 0;
            if (v54)
            {
              if (*v54 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v54, v7);
              else
                *v54 -= 2;
            }
            v53 += 2;
            v52 -= 16;
          }
          while (v52);
        }
        v55 = *(WTF **)(v42 + 16);
        if ((WTF *)(v42 + 32) != v55 && v55 != 0)
        {
          *(_QWORD *)(v42 + 16) = 0;
          *(_DWORD *)(v42 + 24) = 0;
          WTF::fastFree(v55, v7);
        }
        v57 = *(_QWORD *)(v42 + 8);
        *(_QWORD *)(v42 + 8) = 0;
        if (v57)
          (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
        WTF::fastFree((WTF *)v42, v7);
      }
      else
      {
        --*(_DWORD *)v42;
      }
    }
    WTF::fastFree((WTF *)v6, v7);
  }
  else
  {
    --*(_DWORD *)v6;
  }
  return v9;
}

void WebCore::Editor::selectionStartCSSPropertyValue(WebCore *a1, uint64_t a2, uint64_t a3)
{
  WTF::StringImpl *v6;
  WTF::StringBuilder *v7;
  WTF::String *v8;
  __n128 v9;
  WebCore::EditingStyle *v10;
  const WebCore::StyleProperties *v11;
  WTF::String *v12;
  uint64_t v13;
  WTF::StringBuilder *v14;
  WTF::String *v15;
  WTF::StringBuilder *v16;
  WTF::String *v17;
  __n128 v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD **v23;
  _DWORD *v24;
  WTF *v25;
  uint64_t v27;
  WebCore::EditingStyle *v28;
  _QWORD v29[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char v40;

  *(_DWORD *)(a2 + 24) += 2;
  WebCore::EditingStyle::styleAtSelectionStart((unsigned int *)(*(_QWORD *)(a2 + 3064) + 56), (const WebCore::VisibleSelection *)((_DWORD)a3 == 61), (uint64_t *)&v28);
  v10 = v28;
  if (v28)
  {
    v11 = (const WebCore::StyleProperties *)*((_QWORD *)v28 + 1);
    if (v11)
    {
      if ((_DWORD)a3 == 13)
      {
        v12 = (WTF::String *)WebCore::EditingStyle::legacyFontSize(v28, (WebCore::Document *)a2);
        WTF::String::number(v12);
      }
      else if ((a3 - 2) <= 0x1C8)
      {
        WebCore::StyleProperties::serializeLonghandValue(*((_QWORD *)v28 + 1), a3, v7, v8, a1, v9);
      }
      else
      {
        v29[0] = WebCore::shorthandForProperty(a3);
        v29[1] = v13;
        v30 = 0u;
        v31 = 0u;
        v32 = 0u;
        v33 = 0u;
        v34 = 0u;
        v35 = 0u;
        v36 = 0u;
        v37 = 0u;
        v38 = 0u;
        v39 = 0;
        v40 = WebCore::ShorthandSerializer::commonSerializationChecks((uint64_t)v29, v11, v14, v15, (__n128)0);
        WebCore::ShorthandSerializer::serialize((WebCore::ShorthandSerializer *)v29, v16, v17, a1, v18);
        WebCore::ShorthandSerializer::~ShorthandSerializer((WebCore::ShorthandSerializer *)v29, v19);
      }
    }
    else
    {
      *(_QWORD *)a1 = 0;
    }
    if (*(_DWORD *)v10 == 1)
    {
      v20 = *((_QWORD *)v10 + 1);
      *((_QWORD *)v10 + 1) = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 1)
        {
          v21 = *(unsigned int *)(v20 + 28);
          if ((_DWORD)v21)
          {
            v22 = 16 * v21;
            v23 = (_DWORD **)(*(_QWORD *)(v20 + 16) + 8);
            do
            {
              v24 = *v23;
              *v23 = 0;
              if (v24)
              {
                if (*v24 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v24, v6);
                else
                  *v24 -= 2;
              }
              v23 += 2;
              v22 -= 16;
            }
            while (v22);
          }
          v25 = *(WTF **)(v20 + 16);
          if ((WTF *)(v20 + 32) != v25 && v25 != 0)
          {
            *(_QWORD *)(v20 + 16) = 0;
            *(_DWORD *)(v20 + 24) = 0;
            WTF::fastFree(v25, v6);
          }
          v27 = *(_QWORD *)(v20 + 8);
          *(_QWORD *)(v20 + 8) = 0;
          if (v27)
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
          WTF::fastFree((WTF *)v20, v6);
        }
        else
        {
          --*(_DWORD *)v20;
        }
      }
      WTF::fastFree(v10, v6);
    }
    else
    {
      --*(_DWORD *)v10;
    }
  }
  else
  {
    *(_QWORD *)a1 = 0;
  }
  if (*(_DWORD *)(a2 + 24) == 2)
  {
    if ((*(_WORD *)(a2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)a2, v6);
  }
  else
  {
    *(_DWORD *)(a2 + 24) -= 2;
  }
}

uint64_t WebCore::Editor::willApplyEditing(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  WTF *v20;
  WTF *v21;
  WTF *v22;
  _DWORD *v23;
  int v24;
  int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  int v30;
  WebCore::DataTransfer *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF *v35;
  void *v36;
  WebCore::DataTransfer *v37;
  WTF::StringImpl *v38;
  uint8_t buf[24];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 122))
  {
    v4 = qword_1ECE7C0B8;
    v5 = 0;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C0B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a1;
      _os_log_impl(&dword_1940B8000, v4, OS_LOG_TYPE_DEFAULT, "Editor %p suppressed editing for Writing Tools", buf, 0xCu);
      return 0;
    }
    return v5;
  }
  v5 = 1;
  *(_BYTE *)(a1 + 489) = 1;
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 136))(a2))
    return v5;
  ++*(_DWORD *)(a2 + 8);
  v8 = a2;
  while (1)
  {
    v9 = *(_QWORD *)(v8 + 272);
    if (v9)
      break;
    v10 = *(_QWORD *)(v8 + 232);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
        ++*(_DWORD *)(v11 + 8);
    }
    else
    {
      v11 = 0;
    }
    if (*(_DWORD *)(v8 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    else
      --*(_DWORD *)(v8 + 8);
    v8 = v11;
    if (!v11)
      return v5;
  }
  v12 = *(_DWORD *)(v9 + 8);
  *(_DWORD *)(v9 + 8) = v12 + 1;
  if (v12)
    *(_DWORD *)(v9 + 8) = v12;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (*(_DWORD *)(v8 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  else
    --*(_DWORD *)(v8 + 8);
  ++*(_DWORD *)(v9 + 8);
  v13 = *(_QWORD *)(a2 + 232);
  if (!v13 || !*(_QWORD *)(v13 + 8))
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2))
    {
      v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 528);
      if (v14)
      {
        v15 = *(_QWORD *)(v14 + 8);
        if (v15)
        {
          v16 = *(_QWORD *)(v15 + 288);
          if (v16)
          {
            v18 = (_QWORD *)WTF::fastMalloc((WTF *)8);
            v19 = *(_QWORD *)(v16 + 16);
            if (!v19)
            {
              v19 = WTF::fastCompactMalloc((WTF *)0x10);
              *(_DWORD *)v19 = 1;
              *(_QWORD *)(v19 + 8) = v16;
              v20 = *(WTF **)(v16 + 16);
              *(_QWORD *)(v16 + 16) = v19;
              if (v20)
              {
                if (*(_DWORD *)v20 == 1)
                {
                  WTF::fastFree(v20, v17);
                  v19 = *(_QWORD *)(v16 + 16);
                  if (!v19)
                  {
LABEL_31:
                    *v18 = v19;
                    ++*(_DWORD *)(v16 + 308);
                    v21 = *(WTF **)(a1 + 480);
                    *(_QWORD *)(a1 + 480) = v18;
                    if (!v21)
                      goto LABEL_43;
                    v22 = *(WTF **)v21;
                    if (*(_QWORD *)v21)
                    {
                      v23 = (_DWORD *)*((_QWORD *)v22 + 1);
                      if (!v23 || (v24 = v23[77]) == 0 || (v25 = v24 - 1, (v23[77] = v25) != 0))
                      {
                        *(_QWORD *)v21 = 0;
                        goto LABEL_37;
                      }
                      (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 664))(v23);
                      v22 = *(WTF **)v21;
                      *(_QWORD *)v21 = 0;
                      if (v22)
                      {
LABEL_37:
                        if (*(_DWORD *)v22 == 1)
                          WTF::fastFree(v22, v17);
                        else
                          --*(_DWORD *)v22;
                      }
                    }
                    else
                    {
                      *(_QWORD *)v21 = 0;
                    }
                    WTF::fastFree(v21, v17);
                    goto LABEL_43;
                  }
                }
                else
                {
                  --*(_DWORD *)v20;
                }
              }
            }
            ++*(_DWORD *)v19;
            goto LABEL_31;
          }
        }
      }
    }
  }
LABEL_43:
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v27 = *(_QWORD *)(v9 + 248);
  if (v27)
    *(_DWORD *)(v27 + 24) += 2;
  v28 = *(_QWORD *)(v9 + 256);
  if (v28)
    *(_DWORD *)(v28 + 24) += 2;
  (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 104))(buf, a2);
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)a2 + 120))(&v38, a2);
  (*(void (**)(WebCore::DataTransfer **__return_ptr, uint64_t))(*(_QWORD *)a2 + 144))(&v37, a2);
  v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 128))(a2);
  if (v27)
  {
    v5 = WebCore::dispatchBeforeInputEvent((WebCore *)v27, (_DWORD **)buf, v26, (_DWORD **)&v38, (_DWORD **)&v37, a3, v30);
    if (!v28)
      goto LABEL_53;
  }
  else
  {
    v5 = 1;
    if (!v28)
      goto LABEL_53;
  }
  if (v28 != v27)
    v5 = v5 & WebCore::dispatchBeforeInputEvent((WebCore *)v28, (_DWORD **)buf, v26, (_DWORD **)&v38, (_DWORD **)&v37, a3, v30);
LABEL_53:
  v31 = v37;
  v37 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 1)
    {
      WebCore::DataTransfer::~DataTransfer(v31, v29);
      WTF::fastFree(v35, v36);
    }
    else
    {
      --*(_DWORD *)v31;
    }
  }
  v32 = v38;
  v38 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v29);
    else
      *(_DWORD *)v32 -= 2;
  }
  v33 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (!v33)
  {
LABEL_62:
    if (v28)
      goto LABEL_63;
    goto LABEL_65;
  }
  if (*(_DWORD *)v33 != 2)
  {
    *(_DWORD *)v33 -= 2;
    goto LABEL_62;
  }
  WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v29);
  if (v28)
  {
LABEL_63:
    if (*(_DWORD *)(v28 + 24) == 2)
    {
      if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v28);
    }
    else
    {
      *(_DWORD *)(v28 + 24) -= 2;
    }
  }
LABEL_65:
  if (v27)
  {
    if (*(_DWORD *)(v27 + 24) == 2)
    {
      if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v27);
    }
    else
    {
      *(_DWORD *)(v27 + 24) -= 2;
    }
  }
  if (*(_DWORD *)(v9 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  else
    --*(_DWORD *)(v9 + 8);
  return v5;
}

void WebCore::Editor::appliedEditing(WebCore::Editor *this, WebCore::CompositeEditCommand *a2)
{
  uint64_t v4;
  WebCore::Element *v5;
  WebCore::CompositeEditCommand *v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::CompositeEditCommand *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  WebCore::DataTransfer *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF *v29;
  WebCore::CompositeEditCommand *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  WTF *v35;
  WTF *v36;
  _DWORD *v37;
  int v38;
  int v39;
  WTF *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD **v45;
  _DWORD *v46;
  WTF *v47;
  uint64_t v49;
  _QWORD v50[2];
  WebCore::DataTransfer *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  int v55;
  char v56;
  uint64_t v57;
  int v58;
  char v59;
  uint64_t v60;
  int v61;
  char v62;
  uint64_t v63;
  int v64;
  char v65;
  uint64_t v66;
  int v67;
  char v68;
  uint64_t v69;
  int v70;
  char v71;
  __int16 v72;
  char v73;

  v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  WebCore::Document::updateLayout(v4, 0, 0);
  ++*((_DWORD *)a2 + 2);
  v6 = a2;
  while (1)
  {
    v7 = *((_QWORD *)v6 + 34);
    if (v7)
      break;
    v8 = *((_QWORD *)v6 + 29);
    if (v8)
    {
      v9 = *(WebCore::CompositeEditCommand **)(v8 + 8);
      if (v9)
        ++*((_DWORD *)v9 + 2);
    }
    else
    {
      v9 = 0;
    }
    if (*((_DWORD *)v6 + 2) == 1)
      (*(void (**)(WebCore::CompositeEditCommand *))(*(_QWORD *)v6 + 8))(v6);
    else
      --*((_DWORD *)v6 + 2);
    v6 = v9;
    if (!v9)
      goto LABEL_16;
  }
  v10 = *(_DWORD *)(v7 + 8);
  *(_DWORD *)(v7 + 8) = v10 + 1;
  if (v10)
    *(_DWORD *)(v7 + 8) = v10;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (*((_DWORD *)v6 + 2) == 1)
    (*(void (**)(WebCore::CompositeEditCommand *))(*(_QWORD *)v6 + 8))(v6);
  else
    --*((_DWORD *)v6 + 2);
LABEL_16:
  ++*(_DWORD *)(v7 + 8);
  v11 = *((_QWORD *)a2 + 16);
  if (v11)
    *(_DWORD *)(v11 + 24) += 2;
  v54 = v11;
  v55 = *((_DWORD *)a2 + 34);
  v56 = *((_BYTE *)a2 + 140);
  v12 = *((_QWORD *)a2 + 18);
  if (v12)
    *(_DWORD *)(v12 + 24) += 2;
  v57 = v12;
  v58 = *((_DWORD *)a2 + 38);
  v59 = *((_BYTE *)a2 + 156);
  v13 = *((_QWORD *)a2 + 20);
  if (v13)
    *(_DWORD *)(v13 + 24) += 2;
  v60 = v13;
  v61 = *((_DWORD *)a2 + 42);
  v62 = *((_BYTE *)a2 + 172);
  v14 = *((_QWORD *)a2 + 22);
  if (v14)
    *(_DWORD *)(v14 + 24) += 2;
  v63 = v14;
  v64 = *((_DWORD *)a2 + 46);
  v65 = *((_BYTE *)a2 + 188);
  v15 = *((_QWORD *)a2 + 24);
  if (v15)
    *(_DWORD *)(v15 + 24) += 2;
  v66 = v15;
  v67 = *((_DWORD *)a2 + 50);
  v68 = *((_BYTE *)a2 + 204);
  v16 = *((_QWORD *)a2 + 26);
  if (v16)
    *(_DWORD *)(v16 + 24) += 2;
  v69 = v16;
  v70 = *((_DWORD *)a2 + 54);
  v71 = *((_BYTE *)a2 + 220);
  v72 = *((_WORD *)a2 + 112);
  v73 = *((_BYTE *)a2 + 226);
  WebCore::notifyTextFromControls(*(WebCore **)(v7 + 248), *(WebCore::Element **)(v7 + 256), v5);
  v17 = *((_QWORD *)a2 + 29);
  if (!v17 || !*(_QWORD *)(v17 + 8))
  {
    if ((*(unsigned int (**)(WebCore::CompositeEditCommand *))(*(_QWORD *)a2 + 64))(a2))
      v18 = 32;
    else
      v18 = 0;
    WebCore::Editor::changeSelectionAfterCommand((uint64_t)this, (WebCore::VisibleSelection *)&v54, v18);
  }
  v19 = (*(uint64_t (**)(WebCore::CompositeEditCommand *))(*(_QWORD *)a2 + 112))(a2);
  if ((*(unsigned int (**)(WebCore::CompositeEditCommand *))(*(_QWORD *)a2 + 136))(a2))
  {
    v20 = *(_QWORD *)(v7 + 248);
    if (v20)
      *(_DWORD *)(v20 + 24) += 2;
    v21 = *(_QWORD *)(v7 + 256);
    if (v21)
      *(_DWORD *)(v21 + 24) += 2;
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::CompositeEditCommand *))(*(_QWORD *)a2 + 104))(&v53, a2);
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::CompositeEditCommand *))(*(_QWORD *)a2 + 120))(&v52, a2);
    (*(void (**)(WebCore::DataTransfer **__return_ptr, WebCore::CompositeEditCommand *))(*(_QWORD *)a2 + 144))(&v51, a2);
    v50[0] = 0;
    v50[1] = 0;
    if (v20)
      WebCore::dispatchInputEvent((WebCore *)v20, (_DWORD **)&v53, v19, (_DWORD **)&v52, (_DWORD **)&v51, (uint64_t)v50);
    if (v21 && v21 != v20)
      WebCore::dispatchInputEvent((WebCore *)v21, (_DWORD **)&v53, v19, (_DWORD **)&v52, (_DWORD **)&v51, (uint64_t)v50);
    v23 = v51;
    v51 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
      {
        WebCore::DataTransfer::~DataTransfer(v23, v22);
        WTF::fastFree(v40, v41);
      }
      else
      {
        --*(_DWORD *)v23;
      }
    }
    v24 = v52;
    v52 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v22);
      else
        *(_DWORD *)v24 -= 2;
    }
    v25 = v53;
    v53 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
      {
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v22);
        if (v21)
        {
LABEL_54:
          if (*(_DWORD *)(v21 + 24) == 2)
          {
            if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v21);
          }
          else
          {
            *(_DWORD *)(v21 + 24) -= 2;
          }
        }
LABEL_56:
        if (v20)
        {
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
        }
        goto LABEL_59;
      }
      *(_DWORD *)v25 -= 2;
    }
    if (v21)
      goto LABEL_54;
    goto LABEL_56;
  }
LABEL_59:
  v26 = *((_QWORD *)a2 + 29);
  if (!v26 || !*(_QWORD *)(v26 + 8))
  {
    if ((*((_QWORD *)this + 56) & 0xFFFFFFFFFFFFLL) != 0
      && *(double *)((*((_QWORD *)this + 56) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
    {
      WebCore::TimerBase::stopSlowCase((WebCore::Editor *)((char *)this + 416));
      WebCore::Editor::editorUIUpdateTimerFired(this);
    }
    WebCore::AlternativeTextController::respondToAppliedEditing(*((WebCore::AlternativeTextController **)this + 14), a2);
    if (((*(uint64_t (**)(WebCore::CompositeEditCommand *))(*(_QWORD *)a2 + 72))(a2) & 1) == 0)
    {
      v28 = *(_QWORD *)(v4 + 3064);
      v29 = *(WTF **)(v28 + 200);
      *(_QWORD *)(v28 + 200) = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 1)
        {
          v42 = *((_QWORD *)v29 + 1);
          *((_QWORD *)v29 + 1) = 0;
          if (v42)
          {
            if (*(_DWORD *)v42 == 1)
            {
              v43 = *(unsigned int *)(v42 + 28);
              if ((_DWORD)v43)
              {
                v44 = 16 * v43;
                v45 = (_DWORD **)(*(_QWORD *)(v42 + 16) + 8);
                do
                {
                  v46 = *v45;
                  *v45 = 0;
                  if (v46)
                  {
                    if (*v46 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v46, v27);
                    else
                      *v46 -= 2;
                  }
                  v45 += 2;
                  v44 -= 16;
                }
                while (v44);
              }
              v47 = *(WTF **)(v42 + 16);
              if ((WTF *)(v42 + 32) != v47 && v47 != 0)
              {
                *(_QWORD *)(v42 + 16) = 0;
                *(_DWORD *)(v42 + 24) = 0;
                WTF::fastFree(v47, v27);
              }
              v49 = *(_QWORD *)(v42 + 8);
              *(_QWORD *)(v42 + 8) = 0;
              if (v49)
                (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
              WTF::fastFree((WTF *)v42, v27);
            }
            else
            {
              --*(_DWORD *)v42;
            }
          }
          WTF::fastFree(v29, v27);
        }
        else
        {
          --*(_DWORD *)v29;
        }
      }
    }
    v30 = (WebCore::CompositeEditCommand *)*((_QWORD *)this + 3);
    if (v30 != a2)
    {
      ++*((_DWORD *)a2 + 2);
      *((_QWORD *)this + 3) = a2;
      if (v30)
      {
        if (*((_DWORD *)v30 + 2) == 1)
          (*(void (**)(WebCore::CompositeEditCommand *))(*(_QWORD *)v30 + 8))(v30);
        else
          --*((_DWORD *)v30 + 2);
      }
      v31 = *((_QWORD *)this + 1);
      if (v31)
      {
        v32 = *(_QWORD *)(v31 + 8);
        if (v32)
        {
          v33 = WebCore::CompositeEditCommand::ensureComposition(*((WebCore::CompositeEditCommand **)this + 3));
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 360))(v32, v33);
        }
      }
    }
    WebCore::Editor::respondToChangedContents(this, (const WebCore::VisibleSelection *)&v54);
    if (!(*(unsigned int (**)(WebCore::CompositeEditCommand *))(*(_QWORD *)a2 + 56))(a2)
      || (v35 = (WTF *)*((_QWORD *)this + 60), *((_QWORD *)this + 60) = 0, !v35))
    {
LABEL_87:
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v54);
      if (!v7)
        goto LABEL_90;
      goto LABEL_88;
    }
    v36 = *(WTF **)v35;
    if (*(_QWORD *)v35)
    {
      v37 = (_DWORD *)*((_QWORD *)v36 + 1);
      if (!v37 || (v38 = v37[77]) == 0 || (v39 = v38 - 1, (v37[77] = v39) != 0))
      {
        *(_QWORD *)v35 = 0;
        goto LABEL_81;
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)v37 + 664))(v37);
      v36 = *(WTF **)v35;
      *(_QWORD *)v35 = 0;
      if (v36)
      {
LABEL_81:
        if (*(_DWORD *)v36 == 1)
          WTF::fastFree(v36, v34);
        else
          --*(_DWORD *)v36;
      }
    }
    else
    {
      *(_QWORD *)v35 = 0;
    }
    WTF::fastFree(v35, v34);
    goto LABEL_87;
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v54);
LABEL_88:
  if (*(_DWORD *)(v7 + 8) == 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (!v4)
      return;
    goto LABEL_91;
  }
  --*(_DWORD *)(v7 + 8);
LABEL_90:
  if (!v4)
    return;
LABEL_91:
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
}

WebCore::Node *WebCore::notifyTextFromControls(WebCore *this, WebCore::Element *a2, WebCore::Element *a3)
{
  const WebCore::Position *v4;
  WebCore::Node *v5;
  WebCore::Node *v6;
  WebCore::Node *v7;
  WebCore::Node *v8;
  const WebCore::Position *v9;
  WebCore::Node *v10;
  WebCore::Node *v11;
  WebCore::Node *result;
  WebCore::Node *v13[2];

  WebCore::firstPositionInOrBeforeNode((uint64_t)this, a2, (uint64_t)v13);
  v5 = WebCore::enclosingTextFormControl((WebCore *)v13, v4);
  v7 = v5;
  if (v5)
    *((_DWORD *)v5 + 6) += 2;
  v8 = v13[0];
  v13[0] = 0;
  if (v8)
  {
    if (*((_DWORD *)v8 + 6) == 2)
    {
      if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v8);
    }
    else
    {
      *((_DWORD *)v8 + 6) -= 2;
    }
  }
  WebCore::firstPositionInOrBeforeNode((uint64_t)a2, v6, (uint64_t)v13);
  v10 = WebCore::enclosingTextFormControl((WebCore *)v13, v9);
  v11 = v10;
  if (v10)
    *((_DWORD *)v10 + 6) += 2;
  result = v13[0];
  v13[0] = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = (WebCore::Node *)WebCore::Node::removedLastRef(result);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  if (v7 && (*((_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*((_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      goto LABEL_36;
    result = (WebCore::Node *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v7 + 880))(v7);
    if ((_DWORD)result)
    {
      *((_BYTE *)v7 + 169) |= 4u;
      result = (WebCore::Node *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v7 + 1464))(v7);
    }
  }
  if (!v11)
    goto LABEL_24;
  if (v7 != v11 && (*((_QWORD *)v11 + 8) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*((_QWORD *)v11 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
    {
      result = (WebCore::Node *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v11 + 880))(v11);
      if ((_DWORD)result)
      {
        *((_BYTE *)v11 + 169) |= 4u;
        result = (WebCore::Node *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v11 + 1464))(v11);
      }
      goto LABEL_22;
    }
LABEL_36:
    __break(0xC471u);
    JUMPOUT(0x195AC5920);
  }
LABEL_22:
  if (*((_DWORD *)v11 + 6) == 2)
  {
    if ((*((_WORD *)v11 + 15) & 0x400) == 0)
      result = (WebCore::Node *)WebCore::Node::removedLastRef(v11);
  }
  else
  {
    *((_DWORD *)v11 + 6) -= 2;
  }
LABEL_24:
  if (v7)
  {
    if (*((_DWORD *)v7 + 6) == 2)
    {
      if ((*((_WORD *)v7 + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(v7);
    }
    else
    {
      *((_DWORD *)v7 + 6) -= 2;
    }
  }
  return result;
}

void WebCore::Editor::changeSelectionAfterCommand(uint64_t a1, WebCore::VisibleSelection *this, unsigned __int16 a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::Node *v13;
  char v14;
  uint64_t v15;
  WebCore::Document *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::Editor *v25;
  void *v26;
  WebCore::Editor *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  WebCore::Node *v31;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  *(_DWORD *)(v6 + 24) += 2;
  v7 = *((_QWORD *)this + 4);
  if (!v7 || (*(_BYTE *)(v7 + 22) & 8) != 0)
  {
    v8 = *((_QWORD *)this + 6);
    if (!v8 || (*(_BYTE *)(v8 + 22) & 8) != 0)
    {
      v9 = *((_QWORD *)this + 8);
      if (!v9 || (*(_BYTE *)(v9 + 22) & 8) != 0)
      {
        v10 = *((_QWORD *)this + 10);
        if (!v10 || (*(_BYTE *)(v10 + 22) & 8) != 0)
        {
          v11 = *(_QWORD *)this;
          if (!*(_QWORD *)this
            || (*(_BYTE *)(v11 + 22) & 8) != 0
            || (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 40) + 8) + 680) + 680) & 0x800000000000000) == 0)
          {
            v12 = *((_QWORD *)this + 2);
            if (!v12
              || (*(_BYTE *)(v12 + 22) & 8) != 0
              || (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 40) + 8) + 680) + 680) & 0x800000000000000) == 0)
            {
              WebCore::VisibleSelection::document((uint64_t)this, &v31);
              v13 = v31;
              v31 = 0;
              if (v13)
              {
                if (*((_DWORD *)v13 + 6) == 2)
                {
                  if ((*((_WORD *)v13 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v13);
                }
                else
                {
                  *((_DWORD *)v13 + 6) -= 2;
                }
              }
              if (v13 == (WebCore::Node *)v6)
              {
                v14 = WebCore::operator==((uint64_t)this, *(_QWORD *)(v6 + 3064) + 56);
                v15 = *(_QWORD *)(v6 + 3064);
                if ((v14 & 1) != 0)
                  goto LABEL_24;
                v16 = *(WebCore::Document **)(*(_QWORD *)(v15 + 32) + 8);
                v17 = *((_QWORD *)v16 + 66);
                if (v17)
                {
                  v18 = *(_QWORD *)(v17 + 8);
                  if (v18)
                  {
                    if (*(_BYTE *)(v18 + 376))
                      goto LABEL_24;
                  }
                }
                v19 = *((_QWORD *)v16 + 382);
                if (!v19)
                {
                  v30 = *(_QWORD *)(v6 + 3064);
                  v25 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
                  WebCore::Editor::Editor(v25, v16);
                  v27 = (WebCore::Editor *)*((_QWORD *)v16 + 382);
                  *((_QWORD *)v16 + 382) = v25;
                  if (v27)
                  {
                    WebCore::Editor::~Editor(v27, v26);
                    if (*(_DWORD *)v28)
                    {
                      *(_QWORD *)(v28 + 496) = 0;
                      *(_OWORD *)(v28 + 464) = 0u;
                      *(_OWORD *)(v28 + 480) = 0u;
                      *(_OWORD *)(v28 + 432) = 0u;
                      *(_OWORD *)(v28 + 448) = 0u;
                      *(_OWORD *)(v28 + 400) = 0u;
                      *(_OWORD *)(v28 + 416) = 0u;
                      *(_OWORD *)(v28 + 368) = 0u;
                      *(_OWORD *)(v28 + 384) = 0u;
                      *(_OWORD *)(v28 + 336) = 0u;
                      *(_OWORD *)(v28 + 352) = 0u;
                      *(_OWORD *)(v28 + 304) = 0u;
                      *(_OWORD *)(v28 + 320) = 0u;
                      *(_OWORD *)(v28 + 272) = 0u;
                      *(_OWORD *)(v28 + 288) = 0u;
                      *(_OWORD *)(v28 + 240) = 0u;
                      *(_OWORD *)(v28 + 256) = 0u;
                      *(_OWORD *)(v28 + 208) = 0u;
                      *(_OWORD *)(v28 + 224) = 0u;
                      *(_OWORD *)(v28 + 176) = 0u;
                      *(_OWORD *)(v28 + 192) = 0u;
                      *(_OWORD *)(v28 + 144) = 0u;
                      *(_OWORD *)(v28 + 160) = 0u;
                      *(_OWORD *)(v28 + 112) = 0u;
                      *(_OWORD *)(v28 + 128) = 0u;
                      *(_OWORD *)(v28 + 80) = 0u;
                      *(_OWORD *)(v28 + 96) = 0u;
                      *(_OWORD *)(v28 + 48) = 0u;
                      *(_OWORD *)(v28 + 64) = 0u;
                      *(_OWORD *)(v28 + 16) = 0u;
                      *(_OWORD *)(v28 + 32) = 0u;
                      *(_OWORD *)v28 = 0u;
                    }
                    else
                    {
                      WTF::fastFree((WTF *)v28, v29);
                    }
                  }
                  v15 = v30;
                  v19 = *((_QWORD *)v16 + 382);
                }
                if (WebCore::Editor::shouldChangeSelection(v19, (WebCore::VisibleSelection *)(v15 + 56), this, *((unsigned __int8 *)this + 96), 0))
                {
                  v15 = *(_QWORD *)(v6 + 3064);
LABEL_24:
                  WebCore::FrameSelection::setSelection(v15, (uint64_t)this, a3, 0, 0, 0, 0);
                  v20 = v14 ^ 1;
                  if (*(_BYTE *)(a1 + 88))
                    v20 = 1;
                  if ((v20 & 1) == 0)
                  {
                    v21 = *(_QWORD *)(a1 + 8);
                    if (v21)
                    {
                      v22 = *(_QWORD *)(v21 + 8);
                      if (v22)
                      {
                        v23 = *(_QWORD *)(v6 + 528);
                        if (v23)
                          v24 = *(_QWORD *)(v23 + 8);
                        else
                          v24 = 0;
                        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 256))(v22, v24);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
}

void WebCore::Editor::updateEditorUINowIfScheduled(WebCore::Editor *this)
{
  if ((*((_QWORD *)this + 56) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*((_QWORD *)this + 56) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    WebCore::TimerBase::stopSlowCase((WebCore::Editor *)((char *)this + 416));
    WebCore::Editor::editorUIUpdateTimerFired(this);
  }
}

uint64_t WebCore::Editor::willUnapplyEditing(WebCore::Editor *this, const WebCore::EditCommandComposition *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  _QWORD v11[2];
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  *(_DWORD *)(v3 + 24) += 2;
  WebCore::TypingCommand::closeTyping((WebCore::TypingCommand *)v3, a2);
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, v4);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  v5 = *((_QWORD *)a2 + 31);
  if (v5)
    *(_DWORD *)(v5 + 24) += 2;
  v6 = *((_QWORD *)a2 + 32);
  if (v6)
    *(_DWORD *)(v6 + 24) += 2;
  WTF::AtomStringImpl::add();
  v8 = (WTF::StringImpl *)v11[0];
  v13 = 0;
  v14 = (_DWORD *)v11[0];
  v11[1] = 0;
  v12 = 0;
  v11[0] = 0;
  if (v5)
  {
    v9 = WebCore::dispatchBeforeInputEvent((WebCore *)v5, &v14, 0, &v13, &v12, (uint64_t)v11, 1);
    if (!v6)
      goto LABEL_13;
  }
  else
  {
    v9 = 1;
    if (!v6)
      goto LABEL_13;
  }
  if (v6 != v5)
    v9 = v9 & WebCore::dispatchBeforeInputEvent((WebCore *)v6, &v14, 0, &v13, &v12, (uint64_t)v11, 1);
LABEL_13:
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::destroy(v8, v7);
      if (!v6)
        goto LABEL_19;
      goto LABEL_17;
    }
    *(_DWORD *)v8 -= 2;
  }
  if (!v6)
    goto LABEL_19;
LABEL_17:
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v7);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
LABEL_19:
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v7);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  return v9;
}

void WebCore::Editor::unappliedEditing(WebCore::Editor *this, WebCore **a2)
{
  uint64_t v4;
  void *v5;
  WebCore::Element *v6;
  WebCore *v7;
  WebCore *v8;
  WebCore *v9;
  WebCore *v10;
  WebCore *v11;
  WebCore *v12;
  WebCore *v13;
  WebCore *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  void *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22[2];
  _DWORD *v23;
  _DWORD *v24;
  WTF::StringImpl *v25;
  WebCore *v26;
  int v27;
  char v28;
  WebCore *v29;
  int v30;
  char v31;
  WebCore *v32;
  int v33;
  char v34;
  WebCore *v35;
  int v36;
  char v37;
  WebCore *v38;
  int v39;
  char v40;
  WebCore *v41;
  int v42;
  char v43;
  __int16 v44;
  char v45;

  v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  WebCore::Document::updateLayout(v4, 0, 0);
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  WebCore::notifyTextFromControls(a2[31], a2[32], v6);
  v7 = a2[3];
  if (v7)
    *((_DWORD *)v7 + 6) += 2;
  v26 = v7;
  v27 = *((_DWORD *)a2 + 8);
  v28 = *((_BYTE *)a2 + 36);
  v8 = a2[5];
  if (v8)
    *((_DWORD *)v8 + 6) += 2;
  v29 = v8;
  v30 = *((_DWORD *)a2 + 12);
  v31 = *((_BYTE *)a2 + 52);
  v9 = a2[7];
  if (v9)
    *((_DWORD *)v9 + 6) += 2;
  v32 = v9;
  v33 = *((_DWORD *)a2 + 16);
  v34 = *((_BYTE *)a2 + 68);
  v10 = a2[9];
  if (v10)
    *((_DWORD *)v10 + 6) += 2;
  v35 = v10;
  v36 = *((_DWORD *)a2 + 20);
  v37 = *((_BYTE *)a2 + 84);
  v11 = a2[11];
  if (v11)
    *((_DWORD *)v11 + 6) += 2;
  v38 = v11;
  v39 = *((_DWORD *)a2 + 24);
  v40 = *((_BYTE *)a2 + 100);
  v12 = a2[13];
  if (v12)
    *((_DWORD *)v12 + 6) += 2;
  v41 = v12;
  v42 = *((_DWORD *)a2 + 28);
  v43 = *((_BYTE *)a2 + 116);
  v44 = *((_WORD *)a2 + 60);
  v45 = *((_BYTE *)a2 + 122);
  WebCore::Editor::changeSelectionAfterCommand((uint64_t)this, (WebCore::VisibleSelection *)&v26, 6u);
  v13 = a2[31];
  if (v13)
    *((_DWORD *)v13 + 6) += 2;
  v14 = a2[32];
  if (v14)
    *((_DWORD *)v14 + 6) += 2;
  WTF::AtomStringImpl::add();
  v16 = v22[0];
  v24 = 0;
  v25 = v22[0];
  v22[1] = 0;
  v23 = 0;
  v22[0] = 0;
  if (v13)
    WebCore::dispatchInputEvent(v13, (_DWORD **)&v25, 0, &v24, &v23, (uint64_t)v22);
  if (v14 && v14 != v13)
    WebCore::dispatchInputEvent(v14, (_DWORD **)&v25, 0, &v24, &v23, (uint64_t)v22);
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::destroy(v16, v15);
      if (!v14)
        goto LABEL_30;
      goto LABEL_28;
    }
    *(_DWORD *)v16 -= 2;
  }
  if (!v14)
    goto LABEL_30;
LABEL_28:
  if (*((_DWORD *)v14 + 6) == 2)
  {
    if ((*((_WORD *)v14 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v14, v15);
  }
  else
  {
    *((_DWORD *)v14 + 6) -= 2;
  }
LABEL_30:
  if (v13)
  {
    if (*((_DWORD *)v13 + 6) == 2)
    {
      if ((*((_WORD *)v13 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v13, v15);
    }
    else
    {
      *((_DWORD *)v13 + 6) -= 2;
    }
  }
  if ((*((_QWORD *)this + 56) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*((_QWORD *)this + 56) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    WebCore::TimerBase::stopSlowCase((WebCore::Editor *)((char *)this + 416));
    WebCore::Editor::editorUIUpdateTimerFired(this);
  }
  v17 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  *(_DWORD *)(v17 + 24) += 2;
  WebCore::WritingToolsController::respondToUnappliedEditing(*(unsigned int **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 528) + 8) + 24) + 8) + 1856), (WebCore::EditCommandComposition *)a2);
  if (*(_DWORD *)(v17 + 24) == 2)
  {
    if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v17, v18);
  }
  else
  {
    *(_DWORD *)(v17 + 24) -= 2;
  }
  v19 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v19)
  {
    if (v19[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
    else
      --v19[2];
  }
  v20 = *((_QWORD *)this + 1);
  if (v20)
  {
    v21 = *(_QWORD *)(v20 + 8);
    if (v21)
      (*(void (**)(uint64_t, WebCore **))(*(_QWORD *)v21 + 368))(v21, a2);
  }
  WebCore::Editor::respondToChangedContents(this, (const WebCore::VisibleSelection *)&v26);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v26);
}

uint64_t WebCore::Editor::willReapplyEditing(WebCore::Editor *this, const WebCore::EditCommandComposition *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  _QWORD v8[2];
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;

  v2 = *((_QWORD *)a2 + 31);
  if (v2)
    *(_DWORD *)(v2 + 24) += 2;
  v3 = *((_QWORD *)a2 + 32);
  if (v3)
    *(_DWORD *)(v3 + 24) += 2;
  WTF::AtomStringImpl::add();
  v5 = (WTF::StringImpl *)v8[0];
  v10 = 0;
  v11 = (_DWORD *)v8[0];
  v8[1] = 0;
  v9 = 0;
  v8[0] = 0;
  if (v2)
  {
    v6 = WebCore::dispatchBeforeInputEvent((WebCore *)v2, &v11, 0, &v10, &v9, (uint64_t)v8, 1);
    if (!v3)
      goto LABEL_11;
  }
  else
  {
    v6 = 1;
    if (!v3)
      goto LABEL_11;
  }
  if (v3 != v2)
    v6 = v6 & WebCore::dispatchBeforeInputEvent((WebCore *)v3, &v11, 0, &v10, &v9, (uint64_t)v8, 1);
LABEL_11:
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v4);
      if (!v3)
        goto LABEL_17;
      goto LABEL_15;
    }
    *(_DWORD *)v5 -= 2;
  }
  if (!v3)
    goto LABEL_17;
LABEL_15:
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, v4);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
LABEL_17:
  if (v2)
  {
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v2, v4);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  return v6;
}

void WebCore::Editor::reappliedEditing(WebCore::Editor *this, WebCore **a2)
{
  uint64_t v4;
  void *v5;
  WebCore::Element *v6;
  WebCore *v7;
  WebCore *v8;
  WebCore *v9;
  WebCore *v10;
  WebCore *v11;
  WebCore *v12;
  WebCore *v13;
  WebCore *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  void *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22[2];
  _DWORD *v23;
  _DWORD *v24;
  WTF::StringImpl *v25;
  WebCore *v26;
  int v27;
  char v28;
  WebCore *v29;
  int v30;
  char v31;
  WebCore *v32;
  int v33;
  char v34;
  WebCore *v35;
  int v36;
  char v37;
  WebCore *v38;
  int v39;
  char v40;
  WebCore *v41;
  int v42;
  char v43;
  __int16 v44;
  char v45;

  v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  WebCore::Document::updateLayout(v4, 0, 0);
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  WebCore::notifyTextFromControls(a2[31], a2[32], v6);
  v7 = a2[16];
  if (v7)
    *((_DWORD *)v7 + 6) += 2;
  v26 = v7;
  v27 = *((_DWORD *)a2 + 34);
  v28 = *((_BYTE *)a2 + 140);
  v8 = a2[18];
  if (v8)
    *((_DWORD *)v8 + 6) += 2;
  v29 = v8;
  v30 = *((_DWORD *)a2 + 38);
  v31 = *((_BYTE *)a2 + 156);
  v9 = a2[20];
  if (v9)
    *((_DWORD *)v9 + 6) += 2;
  v32 = v9;
  v33 = *((_DWORD *)a2 + 42);
  v34 = *((_BYTE *)a2 + 172);
  v10 = a2[22];
  if (v10)
    *((_DWORD *)v10 + 6) += 2;
  v35 = v10;
  v36 = *((_DWORD *)a2 + 46);
  v37 = *((_BYTE *)a2 + 188);
  v11 = a2[24];
  if (v11)
    *((_DWORD *)v11 + 6) += 2;
  v38 = v11;
  v39 = *((_DWORD *)a2 + 50);
  v40 = *((_BYTE *)a2 + 204);
  v12 = a2[26];
  if (v12)
    *((_DWORD *)v12 + 6) += 2;
  v41 = v12;
  v42 = *((_DWORD *)a2 + 54);
  v43 = *((_BYTE *)a2 + 220);
  v44 = *((_WORD *)a2 + 112);
  v45 = *((_BYTE *)a2 + 226);
  WebCore::Editor::changeSelectionAfterCommand((uint64_t)this, (WebCore::VisibleSelection *)&v26, 6u);
  v13 = a2[31];
  if (v13)
    *((_DWORD *)v13 + 6) += 2;
  v14 = a2[32];
  if (v14)
    *((_DWORD *)v14 + 6) += 2;
  WTF::AtomStringImpl::add();
  v16 = v22[0];
  v24 = 0;
  v25 = v22[0];
  v22[1] = 0;
  v23 = 0;
  v22[0] = 0;
  if (v13)
    WebCore::dispatchInputEvent(v13, (_DWORD **)&v25, 0, &v24, &v23, (uint64_t)v22);
  if (v14 && v14 != v13)
    WebCore::dispatchInputEvent(v14, (_DWORD **)&v25, 0, &v24, &v23, (uint64_t)v22);
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::destroy(v16, v15);
      if (!v14)
        goto LABEL_30;
      goto LABEL_28;
    }
    *(_DWORD *)v16 -= 2;
  }
  if (!v14)
    goto LABEL_30;
LABEL_28:
  if (*((_DWORD *)v14 + 6) == 2)
  {
    if ((*((_WORD *)v14 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v14, v15);
  }
  else
  {
    *((_DWORD *)v14 + 6) -= 2;
  }
LABEL_30:
  if (v13)
  {
    if (*((_DWORD *)v13 + 6) == 2)
    {
      if ((*((_WORD *)v13 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v13, v15);
    }
    else
    {
      *((_DWORD *)v13 + 6) -= 2;
    }
  }
  if ((*((_QWORD *)this + 56) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*((_QWORD *)this + 56) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    WebCore::TimerBase::stopSlowCase((WebCore::Editor *)((char *)this + 416));
    WebCore::Editor::editorUIUpdateTimerFired(this);
  }
  v17 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  *(_DWORD *)(v17 + 24) += 2;
  WebCore::WritingToolsController::respondToReappliedEditing(*(unsigned int **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 528) + 8) + 24) + 8) + 1856), (WebCore::EditCommandComposition *)a2);
  if (*(_DWORD *)(v17 + 24) == 2)
  {
    if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v17, v18);
  }
  else
  {
    *(_DWORD *)(v17 + 24) -= 2;
  }
  v19 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v19)
  {
    if (v19[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
    else
      --v19[2];
  }
  v20 = *((_QWORD *)this + 1);
  if (v20)
  {
    v21 = *(_QWORD *)(v20 + 8);
    if (v21)
      (*(void (**)(uint64_t, WebCore **))(*(_QWORD *)v21 + 360))(v21, a2);
  }
  WebCore::Editor::respondToChangedContents(this, (const WebCore::VisibleSelection *)&v26);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v26);
}

void WebCore::Editor::editorUIUpdateTimerFired(WebCore::Editor *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _DWORD *v14;
  int *v15;
  int v16;
  WTF::StringImpl *v17;
  const WTF::StringImpl *v18;
  WTF *v19;
  int v20;
  uint64_t v21;
  WTF *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  WTF *v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  int i;
  uint64_t v37;
  WTF *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  WebCore::Node *v51;
  uint64_t v52;
  WTF::StringImpl **v53;
  WTF::StringImpl *v54;
  WTF::StringImpl **v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  BOOL v61;
  unsigned __int8 *v62;
  int v63;
  const WebCore::VisiblePosition *v64;
  WebCore::Node *v65;
  int v66;
  WebCore::Node *v67;
  char v68;
  _BOOL4 v70;
  WebCore::Node *v71;
  char v72;
  WebCore::Node *v73;
  WebCore::Node *v74;
  WebCore::Node *v75;
  WebCore::Node *v76;
  WebCore::Node *v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  const WebCore::VisiblePosition *v84;
  WebCore::Node *v85;
  WebCore::Node *v86;
  WebCore::Node *v87;
  WebCore::Node *v88;
  int v89;
  WebCore::Node *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  WebCore::Node *v94;
  WebCore::Node *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WebCore::Node *v99;
  WebCore::Node *v100;
  WebCore::Node *v101;
  WebCore::Node *v102;
  WebCore::Node *v103;
  WebCore::Node *v104;
  uint64_t v105;
  WTF *v106;
  _DWORD *v107;
  uint64_t v108;
  WebCore::Node *v109[3];
  WebCore::Node *v110;
  uint64_t v111;
  uint64_t v112;
  WebCore::Node *v113[3];
  WebCore::Node *v114;
  int v115;
  char v116;
  WebCore::Node *v117;
  char v118;
  WebCore::Node *v119;
  int v120;
  char v121;
  char v122;
  uint64_t v123;
  int v124;
  char v125;
  uint64_t v126;
  int v127;
  char v128;
  uint64_t v129;
  int v130;
  char v131;
  uint64_t v132;
  int v133;
  char v134;
  uint64_t v135;
  int v136;
  char v137;
  uint64_t v138;
  int v139;
  char v140;
  __int16 v141;
  char v142;
  uint64_t v143;
  int v144;
  char v145;
  uint64_t v146;
  int v147;
  char v148;
  uint64_t v149;
  int v150;
  char v151;
  uint64_t v152;
  int v153;
  char v154;
  uint64_t v155;
  int v156;
  char v157;
  uint64_t v158;
  int v159;
  char v160;
  __int16 v161;
  char v162;
  uint64_t v163;
  int v164;
  char v165;
  uint64_t v166;
  int v167;
  char v168;
  uint64_t v169;
  int v170;
  char v171;
  uint64_t v172;
  int v173;
  char v174;
  uint64_t v175;
  int v176;
  char v177;
  uint64_t v178;
  int v179;
  char v180;
  __int16 v181;
  char v182;

  v2 = *((_QWORD *)this + 39);
  if (v2)
    *(_DWORD *)(v2 + 24) += 2;
  v163 = v2;
  v164 = *((_DWORD *)this + 80);
  v165 = *((_BYTE *)this + 324);
  v3 = *((_QWORD *)this + 41);
  if (v3)
    *(_DWORD *)(v3 + 24) += 2;
  v166 = v3;
  v167 = *((_DWORD *)this + 84);
  v168 = *((_BYTE *)this + 340);
  v4 = *((_QWORD *)this + 43);
  if (v4)
    *(_DWORD *)(v4 + 24) += 2;
  v169 = v4;
  v170 = *((_DWORD *)this + 88);
  v171 = *((_BYTE *)this + 356);
  v5 = *((_QWORD *)this + 45);
  if (v5)
    *(_DWORD *)(v5 + 24) += 2;
  v172 = v5;
  v173 = *((_DWORD *)this + 92);
  v174 = *((_BYTE *)this + 372);
  v6 = *((_QWORD *)this + 47);
  if (v6)
    *(_DWORD *)(v6 + 24) += 2;
  v175 = v6;
  v176 = *((_DWORD *)this + 96);
  v177 = *((_BYTE *)this + 388);
  v7 = *((_QWORD *)this + 49);
  if (v7)
    *(_DWORD *)(v7 + 24) += 2;
  v178 = v7;
  v179 = *((_DWORD *)this + 100);
  v180 = *((_BYTE *)this + 404);
  v181 = *((_WORD *)this + 204);
  v182 = *((_BYTE *)this + 410);
  v8 = *((_QWORD *)this + 1);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9))
      {
        v10 = *((_QWORD *)this + 1);
        if (v10 && (v11 = *(_QWORD *)(v10 + 8)) != 0)
          v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 56))(v11);
        else
          v12 = 0;
        v13 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
        *(_DWORD *)(v13 + 24) += 2;
        v143 = 0;
        v144 = 0;
        v145 = 0;
        v146 = 0;
        v147 = 0;
        v148 &= 0xF0u;
        v149 = 0;
        v150 = 0;
        v151 &= 0xF0u;
        v152 = 0;
        v153 = 0;
        v154 &= 0xF0u;
        v155 = 0;
        v156 = 0;
        v157 &= 0xF0u;
        v158 = 0;
        v159 = 0;
        v160 &= 0xF0u;
        v161 = 1;
        v162 = v162 & 0xFC | 1;
        v123 = 0;
        v124 = 0;
        v125 = 0;
        v126 = 0;
        v127 = 0;
        v128 &= 0xF0u;
        v129 = 0;
        v130 = 0;
        v131 &= 0xF0u;
        v132 = 0;
        v133 = 0;
        v134 &= 0xF0u;
        v135 = 0;
        v136 = 0;
        v137 &= 0xF0u;
        v138 = 0;
        v139 = 0;
        v140 &= 0xF0u;
        v141 = 1;
        v142 = v142 & 0xFC | 1;
        v57 = *(_QWORD *)(*(_QWORD *)(v13 + 680) + 664);
        v58 = *(_QWORD *)(v13 + 3064);
        v59 = *(_QWORD *)(v58 + 120);
        if (v59
          && (v60 = *(_BYTE *)(v58 + 132) & 7, v60 <= 4)
          && (((1 << v60) & 0x19) != 0 || (v59 = *(_QWORD *)(v59 + 32)) != 0))
        {
          *(_DWORD *)(v59 + 24) += 2;
          v61 = WebCore::Node::computeEditability(v59, 0, 0) != 0;
          if (*(_DWORD *)(v59 + 24) == 2)
          {
            if ((*(_WORD *)(v59 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v59);
          }
          else
          {
            *(_DWORD *)(v59 + 24) -= 2;
          }
        }
        else
        {
          v61 = 0;
        }
        if (v61 || (v57 & 0x4000000000000) != 0)
        {
          v62 = *(unsigned __int8 **)(v13 + 3064);
          if (v62[153] == 2)
          {
            WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v62 + 120), (uint64_t)&v119);
            v122 = 1;
          }
          else
          {
            v63 = v62[152];
            WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v62 + 120), (uint64_t)&v119);
            v122 = 1;
            if (!v63)
            {
              v101 = v119;
              if (v119)
              {
                *((_DWORD *)v119 + 6) += 2;
                v114 = v101;
                v115 = v120;
                v116 = v121;
                LOBYTE(v117) = 0;
                if (!WebCore::inSameLine((WebCore *)&v119, (const WebCore::VisiblePosition *)&v114, v64))
                  v122 = 0;
                v102 = v114;
                v114 = 0;
                if (v102)
                {
                  if (*((_DWORD *)v102 + 6) == 2)
                  {
                    if ((*((_WORD *)v102 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v102);
                  }
                  else
                  {
                    *((_DWORD *)v102 + 6) -= 2;
                  }
                }
              }
            }
          }
          WebCore::previousVisuallyDistinctCandidate(&v119, (uint64_t)v113);
          if (WebCore::Position::atStartOfTree((WebCore::Position *)v113))
          {
            v110 = 0;
            v111 = 0;
            v112 = 0;
          }
          else
          {
            WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v113, (uint64_t)&v114);
            v110 = v114;
            LODWORD(v111) = v115;
            BYTE4(v111) = v116;
          }
          LOBYTE(v112) = 1;
          v65 = v113[0];
          v113[0] = 0;
          if (v65)
          {
            if (*((_DWORD *)v65 + 6) == 2)
            {
              if ((*((_WORD *)v65 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v65);
            }
            else
            {
              *((_DWORD *)v65 + 6) -= 2;
            }
          }
          v66 = WebCore::VisiblePosition::characterAfter((WebCore::VisiblePosition *)&v110);
          v67 = v110;
          v110 = 0;
          if (v67)
          {
            if (*((_DWORD *)v67 + 6) == 2)
            {
              if ((*((_WORD *)v67 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v67);
            }
            else
            {
              *((_DWORD *)v67 + 6) -= 2;
            }
          }
          if ((unsigned __int16)v66 > 0xFFu)
          {
            v68 = MEMORY[0x19AEA858C]() == 9;
          }
          else
          {
            v68 = ((unsigned __int16)v66 < 0x21u) & (0x100003600uLL >> v66);
            if ((unsigned __int16)v66 == 11)
              v68 = 1;
          }
          if (v66 == 160 || (v68 & 1) != 0)
            goto LABEL_156;
          if (!(v119
               ? WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance
               : 0))
            goto LABEL_157;
          WebCore::startOfParagraph((uint64_t)&v119, 1, &v114);
          v70 = WebCore::operator==((uint64_t *)&v119, (uint64_t *)&v114);
          v71 = v114;
          v114 = 0;
          if (v71)
          {
            if (*((_DWORD *)v71 + 6) == 2)
            {
              if ((*((_WORD *)v71 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v71);
            }
            else
            {
              *((_DWORD *)v71 + 6) -= 2;
            }
          }
          if (v70)
LABEL_156:
            v72 = 0;
          else
LABEL_157:
            v72 = 1;
          WebCore::startOfWord((uint64_t)&v119, v72, (uint64_t)&v110);
          WebCore::endOfWord((WebCore *)&v119, 0, (uint64_t)v113);
          WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v114, (const WebCore::VisiblePosition *)&v110, (const WebCore::VisiblePosition *)v113, 0);
          WebCore::VisibleSelection::operator=(&v143, (uint64_t *)&v114);
          WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v114);
          v73 = v113[0];
          v113[0] = 0;
          if (v73)
          {
            if (*((_DWORD *)v73 + 6) == 2)
            {
              if ((*((_WORD *)v73 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v73);
            }
            else
            {
              *((_DWORD *)v73 + 6) -= 2;
            }
          }
          v74 = v110;
          v110 = 0;
          if (v74)
          {
            if (*((_DWORD *)v74 + 6) == 2)
            {
              if ((*((_WORD *)v74 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v74);
            }
            else
            {
              *((_DWORD *)v74 + 6) -= 2;
            }
          }
          if (v12)
          {
            WebCore::previousBoundary((uint64_t)&v110, (uint64_t)&v119, (uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t, char *))WebCore::startSentenceBoundary, 1);
            WebCore::nextBoundary((uint64_t)v113, (uint64_t)&v119, (WebCore::Node *)WebCore::endSentenceBoundary);
            WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v114, (const WebCore::VisiblePosition *)&v110, (const WebCore::VisiblePosition *)v113, 0);
            WebCore::VisibleSelection::operator=(&v123, (uint64_t *)&v114);
            WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v114);
            v75 = v113[0];
            v113[0] = 0;
            if (v75)
            {
              if (*((_DWORD *)v75 + 6) == 2)
              {
                if ((*((_WORD *)v75 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v75);
              }
              else
              {
                *((_DWORD *)v75 + 6) -= 2;
              }
            }
            v76 = v110;
            v110 = 0;
            if (v76)
            {
              if (*((_DWORD *)v76 + 6) == 2)
              {
                if ((*((_WORD *)v76 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v76);
              }
              else
              {
                *((_DWORD *)v76 + 6) -= 2;
              }
            }
          }
          v77 = v119;
          v119 = 0;
          if (v77)
          {
            if (*((_DWORD *)v77 + 6) == 2)
            {
              if ((*((_WORD *)v77 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v77);
            }
            else
            {
              *((_DWORD *)v77 + 6) -= 2;
            }
          }
        }
        v14 = (_DWORD *)(v13 + 24);
        if (*((_BYTE *)this + 472))
        {
          v78 = v175;
          if (v175)
          {
            v79 = v177 & 7;
            if (v79 <= 4)
            {
              v80 = v175;
              if (((1 << v79) & 0x19) != 0 || (v80 = *(_QWORD *)(v175 + 32)) != 0)
              {
                *(_DWORD *)(v80 + 24) += 2;
                v81 = WebCore::Node::computeEditability(v80, 0, 0);
                if (*(_DWORD *)(v80 + 24) == 2)
                {
                  if ((*(_WORD *)(v80 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v80);
                }
                else
                {
                  *(_DWORD *)(v80 + 24) -= 2;
                }
                if (v81 && (*(_BYTE *)(v78 + 22) & 8) != 0)
                {
                  v82 = HIBYTE(v181);
                  v83 = v181;
                  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v175, (uint64_t)&v119);
                  v122 = 1;
                  if (v82 != 2 && !v83)
                  {
                    v103 = v119;
                    if (v119)
                    {
                      *((_DWORD *)v119 + 6) += 2;
                      v114 = v103;
                      v115 = v120;
                      v116 = v121;
                      LOBYTE(v117) = 0;
                      if (!WebCore::inSameLine((WebCore *)&v119, (const WebCore::VisiblePosition *)&v114, v84))
                        v122 = 0;
                      v104 = v114;
                      v114 = 0;
                      if (v104)
                      {
                        if (*((_DWORD *)v104 + 6) == 2)
                        {
                          if ((*((_WORD *)v104 + 15) & 0x400) == 0)
                            WebCore::Node::removedLastRef(v104);
                        }
                        else
                        {
                          *((_DWORD *)v104 + 6) -= 2;
                        }
                      }
                    }
                  }
                  WebCore::startOfWord((uint64_t)&v119, 1, (uint64_t)&v110);
                  WebCore::endOfWord((WebCore *)&v119, 0, (uint64_t)v113);
                  WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v114, (const WebCore::VisiblePosition *)&v110, (const WebCore::VisiblePosition *)v113, 0);
                  v85 = v113[0];
                  v113[0] = 0;
                  v14 = (_DWORD *)(v13 + 24);
                  if (v85)
                  {
                    if (*((_DWORD *)v85 + 6) == 2)
                    {
                      if ((*((_WORD *)v85 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v85);
                    }
                    else
                    {
                      *((_DWORD *)v85 + 6) -= 2;
                    }
                  }
                  v86 = v110;
                  v110 = 0;
                  if (v86)
                  {
                    if (*((_DWORD *)v86 + 6) == 2)
                    {
                      if ((*((_WORD *)v86 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v86);
                    }
                    else
                    {
                      *((_DWORD *)v86 + 6) -= 2;
                    }
                  }
                  if ((WebCore::operator==((uint64_t)&v114, (uint64_t)&v143) & 1) == 0)
                  {
                    if (v12)
                    {
                      WebCore::previousBoundary((uint64_t)v113, (uint64_t)&v119, (uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t, char *))WebCore::startSentenceBoundary, 1);
                      WebCore::nextBoundary((uint64_t)v109, (uint64_t)&v119, (WebCore::Node *)WebCore::endSentenceBoundary);
                      WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v110, (const WebCore::VisiblePosition *)v113, (const WebCore::VisiblePosition *)v109, 0);
                      v87 = v109[0];
                      v109[0] = 0;
                      if (v87)
                      {
                        if (*((_DWORD *)v87 + 6) == 2)
                        {
                          if ((*((_WORD *)v87 + 15) & 0x400) == 0)
                            WebCore::Node::removedLastRef(v87);
                        }
                        else
                        {
                          *((_DWORD *)v87 + 6) -= 2;
                        }
                      }
                      v88 = v113[0];
                      v113[0] = 0;
                      if (v88)
                      {
                        if (*((_DWORD *)v88 + 6) == 2)
                        {
                          if ((*((_WORD *)v88 + 15) & 0x400) == 0)
                            WebCore::Node::removedLastRef(v88);
                        }
                        else
                        {
                          *((_DWORD *)v88 + 6) -= 2;
                        }
                      }
                      v89 = WebCore::operator==((uint64_t)&v110, (uint64_t)&v123);
                      WebCore::Editor::markMisspellingsAndBadGrammar(this, (const WebCore::VisibleSelection *)&v114, v89 ^ 1, (const WebCore::VisibleSelection *)&v110);
                      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v110);
                    }
                    else
                    {
                      WebCore::Editor::markMisspellingsAndBadGrammar(this, (const WebCore::VisibleSelection *)&v114, 0, (const WebCore::VisibleSelection *)&v114);
                    }
                  }
                  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v114);
                  v90 = v119;
                  v119 = 0;
                  if (v90)
                  {
                    if (*((_DWORD *)v90 + 6) == 2)
                    {
                      if ((*((_WORD *)v90 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v90);
                    }
                    else
                    {
                      *((_DWORD *)v90 + 6) -= 2;
                    }
                  }
                }
              }
            }
          }
        }
        v91 = *((_QWORD *)this + 1);
        if (!v91
          || (v92 = *(_QWORD *)(v91 + 8)) == 0
          || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v92 + 584))(v92)
          || (v93 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 584))(*(_QWORD *)(*((_QWORD *)this + 1) + 8)),
              (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v93 + 16))(v93, 1)))
        {
          WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)&v143, &v114);
          if (v118)
          {
            WebCore::removeMarkers((const WebCore::SimpleRange *)&v114, 1, 0);
            if (v118)
            {
              v94 = v117;
              v117 = 0;
              if (v94)
              {
                if (*((_DWORD *)v94 + 6) == 2)
                {
                  if ((*((_WORD *)v94 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v94);
                }
                else
                {
                  *((_DWORD *)v94 + 6) -= 2;
                }
              }
              v95 = v114;
              v114 = 0;
              if (v95)
              {
                if (*((_DWORD *)v95 + 6) == 2)
                {
                  if ((*((_WORD *)v95 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v95);
                }
                else
                {
                  *((_DWORD *)v95 + 6) -= 2;
                }
              }
            }
          }
        }
        v96 = *((_QWORD *)this + 1);
        if (!v96
          || (v97 = *(_QWORD *)(v96 + 8)) == 0
          || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v97 + 584))(v97)
          || (v98 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 584))(*(_QWORD *)(*((_QWORD *)this + 1) + 8)),
              (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v98 + 16))(v98, 2)))
        {
          WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)&v123, &v114);
          if (v118)
          {
            WebCore::removeMarkers((const WebCore::SimpleRange *)&v114, 2, 0);
            if (v118)
            {
              v99 = v117;
              v117 = 0;
              if (v99)
              {
                if (*((_DWORD *)v99 + 6) == 2)
                {
                  if ((*((_WORD *)v99 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v99);
                }
                else
                {
                  *((_DWORD *)v99 + 6) -= 2;
                }
              }
              v100 = v114;
              v114 = 0;
              if (v100)
              {
                if (*((_DWORD *)v100 + 6) == 2)
                {
                  if ((*((_WORD *)v100 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v100);
                }
                else
                {
                  *((_DWORD *)v100 + 6) -= 2;
                }
              }
            }
          }
        }
        WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v123);
        WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v143);
        v15 = *(int **)(v13 + 1496);
        if (!v15)
          goto LABEL_24;
        v16 = *v15 + 1;
        *v15 = v16;
        if ((v12 & 1) != 0)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
  }
  v13 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  v14 = (_DWORD *)(v13 + 24);
  *(_DWORD *)(v13 + 24) += 2;
  v15 = *(int **)(v13 + 1496);
  if (v15)
  {
    ++*v15;
    v143 = 0;
    WebCore::DocumentMarkerController::removeMarkers((uint64_t)v15, (void *)1, &v143);
LABEL_21:
    v143 = 0;
    WebCore::DocumentMarkerController::removeMarkers((uint64_t)v15, (void *)2, &v143);
    v16 = *v15;
LABEL_22:
    if (!v16)
    {
      __break(0xC471u);
      JUMPOUT(0x195AC7534);
    }
    *v15 = v16 - 1;
  }
LABEL_24:
  WebCore::VisibleSelection::operator=((uint64_t *)this + 39, (uint64_t *)(*(_QWORD *)(v13 + 3064) + 56));
  v19 = (WTF *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  v21 = *((unsigned int *)this + 40);
  v20 = *((_DWORD *)this + 41);
  *((_DWORD *)this + 40) = 0;
  *((_BYTE *)this + 172) = 0;
  *(_QWORD *)((char *)this + 164) = 0;
  v22 = (WTF *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  v24 = *((unsigned int *)this + 34);
  v23 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 34) = 0;
  *((_BYTE *)this + 148) = 0;
  *(_QWORD *)((char *)this + 140) = 0;
  v25 = *((_QWORD *)this + 1);
  if (v25 && *(_QWORD *)(v25 + 8))
  {
    if (v20)
    {
      v26 = v19;
      if ((_DWORD)v21)
      {
        v27 = 8 * v21;
        v26 = v19;
        while (!*(_QWORD *)v26)
        {
          v26 = (WTF *)((char *)v26 + 8);
          v27 -= 8;
          if (!v27)
            goto LABEL_31;
        }
      }
      v30 = (WTF *)((char *)v19 + 8 * v21);
LABEL_38:
      if (v26 != v30)
      {
        (*(void (**)(_QWORD, WTF *))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 216))(*(_QWORD *)(*((_QWORD *)this + 1) + 8), v26);
        while (1)
        {
          v26 = (WTF *)((char *)v26 + 8);
          if (v26 == v30)
            break;
          if (*(_QWORD *)v26)
            goto LABEL_38;
        }
      }
    }
LABEL_31:
    if (v23)
    {
      v28 = (WTF::StringImpl **)v22;
      if ((_DWORD)v24)
      {
        v29 = 8 * v24;
        v28 = (WTF::StringImpl **)v22;
        while (!*v28)
        {
          ++v28;
          v29 -= 8;
          if (!v29)
            goto LABEL_100;
        }
      }
      v31 = (WTF::StringImpl **)((char *)v22 + 8 * v24);
      if (v28 != v31)
      {
        if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 2744))
        {
          v107 = v14;
          v108 = v13;
          v106 = v19;
          while (1)
          {
            v32 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 2744);
            if (!v32)
              goto LABEL_85;
            v33 = *(_DWORD *)(v32 - 8);
            v34 = *((_DWORD *)*v28 + 4);
            v35 = v34 < 0x100 ? WTF::StringImpl::hashSlowCase(*v28) : v34 >> 8;
            for (i = 0; ; v35 = ++i + v37)
            {
              v37 = v35 & v33;
              v38 = *(WTF **)(v32 + 16 * v37);
              if (v38 != (WTF *)-1)
              {
                if (!v38)
                  goto LABEL_85;
                if ((WTF::equal(v38, *v28, v18) & 1) != 0)
                  break;
              }
            }
            v39 = *(_QWORD *)(v32 + 16 * v37 + 8);
            if (!v39)
              goto LABEL_85;
            *(_DWORD *)(v39 + 24) += 2;
            v40 = *((_QWORD *)this + 1);
            if (v40)
              v41 = *(_QWORD *)(v40 + 8);
            else
              v41 = 0;
            v42 = *(_QWORD *)(v39 + 104);
            if (v42)
            {
              v43 = *(unsigned int *)(v42 + 4);
              if ((v43 & 1) != 0)
              {
                v44 = *(_QWORD *)(v42 + 40);
                v45 = *(unsigned int *)(v42 + 52);
                if (v45)
                {
LABEL_63:
                  v46 = v44 + 8;
                  do
                  {
                    v47 = *(_QWORD *)(v46 - 8);
                    if (v47 == WebCore::HTMLNames::srcAttr
                      || *(_QWORD *)(v47 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
                      && *(_QWORD *)(v47 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
                    {
                      goto LABEL_71;
                    }
                    v46 += 16;
                  }
                  while (--v45);
                }
              }
              else
              {
                v44 = v42 + 32;
                v45 = v43 >> 5;
                if (v43 >> 5)
                  goto LABEL_63;
              }
            }
            v46 = MEMORY[0x1E0CBF2F8];
LABEL_71:
            v48 = **(_QWORD **)(v39 + 40);
            if (v48)
              v49 = (*(_WORD *)(v48 + 28) & 0x80) == 0;
            else
              v49 = 1;
            if (!v49 && (v50 = *(_QWORD *)(v48 + 200)) != 0)
            {
              v105 = v41;
              v51 = *(WebCore::Node **)(v50 + 8);
              if (v51)
              {
                *((_DWORD *)v51 + 6) += 2;
                v52 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v51 + 480))(v51);
                if (*((_DWORD *)v51 + 6) == 2)
                {
                  if ((*((_WORD *)v51 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v51);
                }
                else
                {
                  *((_DWORD *)v51 + 6) -= 2;
                }
                if (v52)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v52 + 48))(v52);
                  v51 = (WebCore::Node *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 32))(v52);
                  (*(void (**)(uint64_t))(*(_QWORD *)v52 + 56))(v52);
                }
                else
                {
                  v51 = 0;
                }
              }
              v41 = v105;
            }
            else
            {
              v51 = 0;
            }
            (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t, WebCore::Node *))(*(_QWORD *)v41 + 208))(v41, v28, v46, v51);
            if (*(_DWORD *)(v39 + 24) == 2)
            {
              if ((*(_WORD *)(v39 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v39);
            }
            else
            {
              *(_DWORD *)(v39 + 24) -= 2;
            }
LABEL_85:
            ++v28;
            v14 = v107;
            v13 = v108;
            v19 = v106;
            if (v28 != v31)
            {
              while (!*v28)
              {
                if (++v28 == v31)
                  goto LABEL_100;
              }
              if (v28 != v31)
                continue;
            }
            goto LABEL_100;
          }
        }
        do
          ++v28;
        while (v28 != v31 && (!*v28 || v28 != v31));
      }
    }
  }
LABEL_100:
  if (!v22)
  {
    if (!v19)
      goto LABEL_121;
    goto LABEL_112;
  }
  if ((_DWORD)v24)
  {
    v53 = (WTF::StringImpl **)v22;
    do
    {
      v54 = *v53;
      *v53 = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
          WTF::StringImpl::destroy(v54, v17);
        else
          *(_DWORD *)v54 -= 2;
      }
      ++v53;
      --v24;
    }
    while (v24);
  }
  WTF::fastFree(v22, v17);
  if (v19)
  {
LABEL_112:
    if ((_DWORD)v21)
    {
      v55 = (WTF::StringImpl **)v19;
      do
      {
        v56 = *v55;
        *v55 = 0;
        if (v56)
        {
          if (*(_DWORD *)v56 == 2)
            WTF::StringImpl::destroy(v56, v17);
          else
            *(_DWORD *)v56 -= 2;
        }
        ++v55;
        --v21;
      }
      while (v21);
    }
    WTF::fastFree(v19, v17);
  }
LABEL_121:
  if (*v14 == 2)
  {
    if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v13);
  }
  else
  {
    *v14 -= 2;
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v163);
}

uint64_t *WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t *a1, void *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  BOOL v11;
  unsigned int *v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *((_DWORD *)a1 + 3);
  v4 = *a1;
  if (!v3)
  {
    if (!v4)
      return a1;
LABEL_22:
    *a1 = 0;
    *((_DWORD *)a1 + 2) = 0;
    WTF::fastFree((WTF *)v4, a2);
    return a1;
  }
  v6 = v4 + 40 * v3;
  do
  {
    if (*(_BYTE *)(v4 + 32))
    {
      v7 = *(_QWORD *)(v4 + 24);
      if ((v7 & 0x8000000000000) != 0)
      {
        v15 = v6;
        v17 = v4;
        v9 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
        do
        {
          v10 = __ldaxr(v9);
          v11 = --v10 == 0;
        }
        while (__stlxr(v10, v9));
        v6 = v15;
        if (v11)
        {
          atomic_store(1u, v9);
          WTF::fastFree((WTF *)v9, a2);
          v6 = v15;
          v4 = v17;
        }
      }
    }
    if (*(_BYTE *)(v4 + 16))
    {
      v8 = *(_QWORD *)(v4 + 8);
      if ((v8 & 0x8000000000000) != 0)
      {
        v16 = v6;
        v18 = v4;
        v12 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
        do
        {
          v13 = __ldaxr(v12);
          v14 = --v13 == 0;
        }
        while (__stlxr(v13, v12));
        v6 = v16;
        if (v14)
        {
          atomic_store(1u, v12);
          WTF::fastFree((WTF *)v12, a2);
          v6 = v16;
          v4 = v18;
        }
      }
    }
    v4 += 40;
  }
  while (v4 != v6);
  v4 = *a1;
  if (*a1)
    goto LABEL_22;
  return a1;
}

uint64_t WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(uint64_t result, void *a2)
{
  uint64_t v2;

  if (*(_DWORD *)(result + 8))
  {
    v2 = result;
    if (*(_DWORD *)(result + 12))
      WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((uint64_t *)result, a2);
    result = *(_QWORD *)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      return WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(uint64_t result, void *a2)
{
  uint64_t v2;

  if (*(_DWORD *)(result + 8))
  {
    v2 = result;
    if (*(_DWORD *)(result + 12))
      WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((uint64_t *)result, a2);
    result = *(_QWORD *)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      return WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WebCore::Editor::insertText(uint64_t a1, WebCore::Document *a2, uint64_t a3, int a4)
{
  return WebCore::EventHandler::handleTextInputEvent(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 528) + 8) + 640), a2, a3, a4);
}

uint64_t WebCore::Editor::insertDictatedText(uint64_t a1, WebCore::Document *a2, __int128 **a3, uint64_t a4)
{
  return WebCore::AlternativeTextController::insertDictatedText(*(_QWORD *)(a1 + 112), a2, a3, a4);
}

uint64_t WebCore::Editor::insertParagraphSeparatorInQuotedContent(WebCore::Editor *this)
{
  WebCore::Node *v2;
  void *v3;
  WebCore::Node *v4;
  uint64_t v5;
  void *v6;
  WebCore::Node *v8;

  v2 = *(WebCore::Node **)(*((_QWORD *)this + 2) + 8);
  *((_DWORD *)v2 + 6) += 2;
  v8 = v2;
  WebCore::TypingCommand::insertParagraphSeparatorInQuotedContent(&v8);
  v4 = v8;
  v8 = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 6) == 2)
    {
      if ((*((_WORD *)v4 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v4, v3);
    }
    else
    {
      *((_DWORD *)v4 + 6) -= 2;
    }
  }
  if (!*((_BYTE *)this + 88))
  {
    v5 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
    *(_DWORD *)(v5 + 24) += 2;
    WebCore::FrameSelection::revealSelection(*(_QWORD *)(v5 + 3064), 0, (uint64_t)&WebCore::ScrollAlignment::alignCenterIfNeeded, (BOOL *)1, 1);
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v6);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  return 1;
}

uint64_t WebCore::Editor::cut(uint64_t a1, const WebCore::Position *a2)
{
  char v3;
  uint64_t result;
  void *v5;
  uint64_t v6;

  v3 = *(_BYTE *)(a1 + 475);
  *(_BYTE *)(a1 + 475) = (_BYTE)a2;
  result = WebCore::Editor::tryDHTMLCut((WebCore::Editor *)a1, a2);
  if ((result & 1) == 0)
  {
    result = WebCore::Editor::canCopy((WebCore::Editor *)a1, v5);
    if ((_DWORD)result
      && (v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 3064), *(_BYTE *)(v6 + 153) == 2)
      && (result = WebCore::editableRootForPosition(v6 + 120, 0)) != 0)
    {
      result = (uint64_t)WebCore::Editor::performCutOrCopy((WebCore::Editor *)a1, 0);
    }
    {
      result = WebCore::SystemSoundManager::singleton(void)::systemSoundManager;
      if (WebCore::SystemSoundManager::singleton(void)::systemSoundManager)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::SystemSoundManager::singleton(void)::systemSoundManager
                                                    + 16))(WebCore::SystemSoundManager::singleton(void)::systemSoundManager);
    }
    else
    {
      WebCore::SystemSoundManager::singleton(void)::systemSoundManager = 0;
    }
  }
  *(_BYTE *)(a1 + 475) = v3;
  return result;
}

unsigned int *WebCore::Editor::performCutOrCopy(WebCore::Editor *a1, int a2)
{
  const WebCore::Position *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *result;
  void *v8;
  uint64_t v9;
  const WebCore::SimpleRange *v10;
  uint64_t v11;
  int8x16_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x16_t *v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  char isInsideOverlay;
  uint64_t v21;
  WebCore::Node *v22;
  uint64_t v23;
  __int16 v24;
  _QWORD *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int8x16_t v32;
  uint64_t v33;
  uint64_t v34;
  int8x16_t *v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  unsigned __int8 *v43;
  int v44;
  const WebCore::VisiblePosition *v45;
  int v46;
  const WebCore::VisiblePosition *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WebCore::Node *v51;
  WebCore::Node *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BOOL8 v56;
  unsigned __int8 v57;
  unsigned __int8 v58;
  WebCore::Node *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int8x16_t v66;
  uint64_t v67;
  uint64_t v68;
  int8x16_t *v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  uint64_t v74;
  WebCore::Node *v75;
  WTF::StringImpl *v76;
  WebCore::Node *v77;
  void *v78;
  unsigned int *v79;
  WebCore::Node *v80;
  void *v81;
  unsigned int *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  WebCore::AXObjectCache *v89;
  void *v90;
  WebCore::Node *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  WebCore::Node *v100;
  int v101;
  char v102;
  char v103;
  WebCore::Node *v104;
  int v105;
  char v106;
  char v107;
  WTF::StringImpl *v108;
  WebCore::Node *v109;
  int v110;
  WebCore::Node *v111;
  int v112;
  char v113;
  unsigned int *v114;
  int v115;
  char v116;
  char v117;

  WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 2) + 8) + 3064) + 56), &v109);
  v5 = *((_QWORD *)a1 + 1);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
      (*(void (**)(uint64_t, WebCore::Node **))(*(_QWORD *)v6 + 288))(v6, &v109);
  }
  if (!a2)
  {
    result = (unsigned int *)WebCore::Editor::shouldDeleteRange((uint64_t)a1, (uint64_t)&v109);
    if (!(_DWORD)result)
      goto LABEL_85;
    WebCore::Editor::updateMarkersForWordsAffectedByEditing((uint64_t)a1, 1);
  }
  v9 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 8);
  *(_DWORD *)(v9 + 24) += 2;
  if (WebCore::enclosingTextFormControl((WebCore *)(*(_QWORD *)(v9 + 3064) + 120), v4))
  {
    v11 = *(_QWORD *)(v9 + 528);
    v12 = 0uLL;
    if (v11 && (v13 = *(_QWORD *)(v11 + 8)) != 0 && (v14 = *(_QWORD *)(v13 + 24)) != 0)
    {
      v15 = *(int8x16_t **)(v14 + 8);
      v16 = 0uLL;
      if (v15)
      {
        v17 = v15[2];
        v18.i64[0] = -256;
        v18.i64[1] = -256;
        v16 = vandq_s8(v17, v18);
        v19.i64[0] = 255;
        v19.i64[1] = 255;
        v12 = vandq_s8(v17, v19);
      }
    }
    else
    {
      v16 = 0uLL;
    }
    v97 = vorrq_s8(v12, v16);
    v21 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v21 = off_1E327FAB0;
    *(int8x16_t *)(v21 + 8) = v97;
    v114 = (unsigned int *)v21;
    WebCore::Pasteboard::createForCopyAndPaste((PAL *)&v114, (uint64_t *)&v100);
    v22 = v100;
    v23 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 2) + 8) + 688);
    if (!v23)
      v23 = WebCore::Document::ensureQuirks(*(WebCore::Document **)(*((_QWORD *)a1 + 2) + 8));
    if (*(_BYTE *)(v23 + 66))
      v24 = 576;
    else
      v24 = 2624;
    WebCore::Editor::selectedText((uint64_t)a1, v24, &v108);
    v25 = (_QWORD *)*((_QWORD *)a1 + 1);
    if (v25)
    {
      v26 = v25[1];
      if (v26 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26))
      {
        v25 = *(_QWORD **)(*((_QWORD *)a1 + 2) + 8);
        LODWORD(v25) = *(_BYTE *)(v25[85] + 370) == 3 || *(unsigned __int8 *)(v25[383] + 184) == 1;
      }
      else
      {
        LODWORD(v25) = 0;
      }
    }
    (*(void (**)(WebCore::Node *, WTF::StringImpl **, _QWORD))(*(_QWORD *)v22 + 208))(v22, &v108, v25 ^ 1);
    v28 = v108;
    v108 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v27);
      else
        *(_DWORD *)v28 -= 2;
    }
LABEL_49:
    (*(void (**)(WebCore::Node *))(*(_QWORD *)v22 + 8))(v22);
    result = v114;
    if (v114)
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v114 + 8))(v114);
    goto LABEL_51;
  }
  if (!v113 || v109 == v111 && v110 == v112)
    isInsideOverlay = 0;
  else
    isInsideOverlay = WebCore::ImageOverlay::isInsideOverlay((WebCore::ImageOverlay *)&v109, v10);
  if (a2 != 1)
    goto LABEL_42;
  if ((isInsideOverlay & 1) != 0)
    goto LABEL_42;
  if ((*(_WORD *)(v9 + 3358) & 4) == 0)
    goto LABEL_42;
  v29 = *(_QWORD *)(v9 + 1272);
  if (!v29)
    goto LABEL_42;
  if ((*(_WORD *)(v29 + 28) & 0x10) == 0)
    goto LABEL_42;
  if (*(_QWORD *)(*(_QWORD *)(v29 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    goto LABEL_42;
  v30 = *(_QWORD *)(v29 + 80);
  if (!v30)
    goto LABEL_42;
  while ((*(_WORD *)(v30 + 28) & 0x10) == 0)
  {
    v30 = *(_QWORD *)(v30 + 56);
    if (!v30)
      goto LABEL_42;
  }
  v60 = *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
  v61 = *(_QWORD *)(*(_QWORD *)(v30 + 96) + 24);
  if (v61 != v60)
  {
LABEL_96:
    if (v61 != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
    {
      while (1)
      {
        v30 = *(_QWORD *)(v30 + 56);
        if (!v30)
          goto LABEL_42;
        if ((*(_WORD *)(v30 + 28) & 0x10) != 0)
        {
          v61 = *(_QWORD *)(*(_QWORD *)(v30 + 96) + 24);
          if (v61 != v60)
            goto LABEL_96;
          break;
        }
      }
    }
  }
  v62 = *(_DWORD *)(v30 + 24);
  *(_DWORD *)(v30 + 24) = v62 + 2;
  v63 = *(_QWORD *)(v30 + 80);
  if (v63 && (*(_WORD *)(v63 + 28) & 0x10) != 0)
    v64 = *(_QWORD *)(*(_QWORD *)(v63 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24)
        ? *(_QWORD *)(v30 + 80)
        : 0;
  else
    v64 = 0;
  if (v62)
  {
    *(_DWORD *)(v30 + 24) = v62;
  }
  else if ((*(_WORD *)(v30 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v30, v10);
  }
  if (!v64)
  {
LABEL_42:
    v31 = *(_QWORD *)(v9 + 528);
    v32 = 0uLL;
    if (v31 && (v33 = *(_QWORD *)(v31 + 8)) != 0 && (v34 = *(_QWORD *)(v33 + 24)) != 0)
    {
      v35 = *(int8x16_t **)(v34 + 8);
      v36 = 0uLL;
      if (v35)
      {
        v37 = v35[2];
        v38.i64[0] = -256;
        v38.i64[1] = -256;
        v36 = vandq_s8(v37, v38);
        v39.i64[0] = 255;
        v39.i64[1] = 255;
        v32 = vandq_s8(v37, v39);
      }
    }
    else
    {
      v36 = 0uLL;
    }
    v98 = vorrq_s8(v32, v36);
    v40 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v40 = off_1E327FAB0;
    *(int8x16_t *)(v40 + 8) = v98;
    v114 = (unsigned int *)v40;
    WebCore::Pasteboard::createForCopyAndPaste((PAL *)&v114, (uint64_t *)&v100);
    v22 = v100;
    WebCore::Editor::writeSelectionToPasteboard(a1, v100);
    goto LABEL_49;
  }
  *(_DWORD *)(v64 + 24) += 2;
  v65 = *(_QWORD *)(v9 + 528);
  v66 = 0uLL;
  if (v65 && (v67 = *(_QWORD *)(v65 + 8)) != 0 && (v68 = *(_QWORD *)(v67 + 24)) != 0)
  {
    v69 = *(int8x16_t **)(v68 + 8);
    v70 = 0uLL;
    if (v69)
    {
      v71 = v69[2];
      v72.i64[0] = -256;
      v72.i64[1] = -256;
      v70 = vandq_s8(v71, v72);
      v73.i64[0] = 255;
      v73.i64[1] = 255;
      v66 = vandq_s8(v71, v73);
    }
  }
  else
  {
    v70 = 0uLL;
  }
  v99 = vorrq_s8(v66, v70);
  v74 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v74 = off_1E327FAB0;
  *(int8x16_t *)(v74 + 8) = v99;
  v114 = (unsigned int *)v74;
  WebCore::Pasteboard::createForCopyAndPaste((PAL *)&v114, (uint64_t *)&v100);
  v75 = v100;
  WebCore::Editor::writeImageToPasteboard(a1, v100, (WebCore::Element *)v64, (WTF::StringImpl **)(v9 + 736), (WTF::StringImpl **)(v9 + 1448));
  (*(void (**)(WebCore::Node *))(*(_QWORD *)v75 + 8))(v75);
  result = v114;
  if (v114)
    result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v114 + 8))(v114);
  if (*(_DWORD *)(v64 + 24) == 2)
  {
    if ((*(_WORD *)(v64 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v64, v8);
  }
  else
  {
    *(_DWORD *)(v64 + 24) -= 2;
  }
LABEL_51:
  v41 = *((_QWORD *)a1 + 1);
  if (v41)
  {
    result = *(unsigned int **)(v41 + 8);
    if (result)
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 296))(result);
  }
  if (a2)
    goto LABEL_83;
  v108 = 0;
  v42 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v42 & 1) != 0)
  {
    v43 = *(unsigned __int8 **)(v9 + 3064);
    if (v43[153] == 2)
    {
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v43 + 120), (uint64_t)&v100);
      v103 = 1;
    }
    else
    {
      v44 = v43[152];
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v43 + 120), (uint64_t)&v100);
      v103 = 1;
      if (!v44)
      {
        v80 = v100;
        if (v100)
        {
          *((_DWORD *)v100 + 6) += 2;
          v114 = (unsigned int *)v80;
          v115 = v101;
          v116 = v102;
          v117 = 0;
          if (!WebCore::inSameLine((WebCore *)&v100, (const WebCore::VisiblePosition *)&v114, v45))
            v103 = 0;
          v82 = v114;
          v114 = 0;
          if (v82)
          {
            if (v82[6] == 2)
            {
              if ((*((_WORD *)v82 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v82, v81);
            }
            else
            {
              v82[6] -= 2;
            }
          }
        }
      }
    }
    if (v43[153] == 2)
    {
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v43 + 136), (uint64_t)&v104);
      v107 = 1;
    }
    else
    {
      v46 = v43[152];
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v43 + 136), (uint64_t)&v104);
      v107 = 1;
      if (v46)
      {
LABEL_60:
        WebCore::AccessibilityObject::stringForVisiblePositionRange((uint64_t *)&v100, &v114);
        v49 = (WTF::StringImpl *)v114;
        v114 = 0;
        v50 = v108;
        v108 = v49;
        if (v50)
        {
          if (*(_DWORD *)v50 == 2)
          {
            WTF::StringImpl::destroy(v50, v48);
            v76 = (WTF::StringImpl *)v114;
            v114 = 0;
            if (v76)
            {
              if (*(_DWORD *)v76 == 2)
                WTF::StringImpl::destroy(v76, v48);
              else
                *(_DWORD *)v76 -= 2;
            }
          }
          else
          {
            *(_DWORD *)v50 -= 2;
            v114 = 0;
          }
        }
        v51 = v104;
        v104 = 0;
        if (v51)
        {
          if (*((_DWORD *)v51 + 6) == 2)
          {
            if ((*((_WORD *)v51 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v51, v48);
          }
          else
          {
            *((_DWORD *)v51 + 6) -= 2;
          }
        }
        v52 = v100;
        v100 = 0;
        if (v52)
        {
          if (*((_DWORD *)v52 + 6) == 2)
          {
            if ((*((_WORD *)v52 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v52, v48);
          }
          else
          {
            *((_DWORD *)v52 + 6) -= 2;
          }
        }
        goto LABEL_69;
      }
    }
    v77 = v104;
    if (v104)
    {
      *((_DWORD *)v104 + 6) += 2;
      v114 = (unsigned int *)v77;
      v115 = v105;
      v116 = v106;
      v117 = 0;
      if (!WebCore::inSameLine((WebCore *)&v104, (const WebCore::VisiblePosition *)&v114, v47))
        v107 = 0;
      v79 = v114;
      v114 = 0;
      if (v79)
      {
        if (v79[6] == 2)
        {
          if ((*((_WORD *)v79 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v79, v78);
        }
        else
        {
          v79[6] -= 2;
        }
      }
    }
    goto LABEL_60;
  }
LABEL_69:
  v53 = *((_QWORD *)a1 + 1);
  if (v53
    && (v54 = *(_QWORD *)(v53 + 8)) != 0
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v54 + 24))(v54))
  {
    v55 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 8);
    v56 = *(_BYTE *)(*(_QWORD *)(v55 + 680) + 370) == 3 || *(unsigned __int8 *)(*(_QWORD *)(v55 + 3064) + 184) == 1;
  }
  else
  {
    v56 = 0;
  }
  WebCore::Editor::deleteSelectionWithSmartDelete((uint64_t)a1, (void *)v56, 8);
  v57 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v57 & 1) == 0
    || (result = *(unsigned int **)(v9 + 3064),
        v58 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled),
        (v58 & 1) == 0))
  {
LABEL_80:
    result = (unsigned int *)v108;
    v108 = 0;
    if (result)
    {
      if (*result == 2)
        result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v8);
      else
        *result -= 2;
    }
    goto LABEL_83;
  }
  if (v108)
  {
    if (*((_DWORD *)v108 + 1) && WebCore::Document::hasEverCreatedAnAXObjectCache)
    {
      v83 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 8);
      if (*(_BYTE *)(v83 + 3362) || *(_BYTE *)(v83 + 3405))
      {
        while (1)
        {
          v93 = *(_QWORD *)(v83 + 528);
          if (!v93)
            break;
          v94 = *(_QWORD *)(v93 + 8);
          if (!v94)
            break;
          v95 = *(_QWORD *)(v94 + 120);
          if (!v95)
            break;
          v96 = *(_QWORD *)(v95 + 8);
          if (!v96)
            break;
          v83 = *(_QWORD *)(*(_QWORD *)(v96 + 40) + 8);
        }
      }
      else
      {
        v84 = *(_QWORD *)(v83 + 528);
        if (v84)
        {
          v85 = *(_QWORD *)(v84 + 8);
          if (v85)
          {
            v86 = *(_QWORD *)(*(_QWORD *)(v85 + 128) + 8);
            if (v86 && *(_BYTE *)(v86 + 144) == 0)
            {
              v88 = *(_QWORD *)(v86 + 296);
              if (v88)
                v83 = v88;
            }
          }
        }
      }
      v89 = *(WebCore::AXObjectCache **)(v83 + 1488);
      if (v89)
      {
        ++*((_DWORD *)v89 + 2);
        v90 = (void *)*((_QWORD *)result + 15);
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(result + 30), (uint64_t)&v100);
        v103 = 1;
        WebCore::AXObjectCache::postTextStateChangeNotification(v89, v90, 5);
        v91 = v100;
        v100 = 0;
        if (v91)
        {
          if (*((_DWORD *)v91 + 6) == 2)
          {
            if ((*((_WORD *)v91 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v91, v8);
          }
          else
          {
            *((_DWORD *)v91 + 6) -= 2;
          }
        }
        v92 = *((_DWORD *)v89 + 2);
        if (!v92)
        {
          __break(0xC471u);
          JUMPOUT(0x195AC8328);
        }
        *((_DWORD *)v89 + 2) = v92 - 1;
      }
    }
    goto LABEL_80;
  }
LABEL_83:
  if (*(_DWORD *)(v9 + 24) == 2)
  {
    if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v9, v8);
  }
  else
  {
    *(_DWORD *)(v9 + 24) -= 2;
  }
LABEL_85:
  if (v113)
  {
    v59 = v111;
    v111 = 0;
    if (v59)
    {
      if (*((_DWORD *)v59 + 6) == 2)
      {
        if ((*((_WORD *)v59 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v59, v8);
      }
      else
      {
        *((_DWORD *)v59 + 6) -= 2;
      }
    }
    result = (unsigned int *)v109;
    v109 = 0;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)result, v8);
      }
      else
      {
        result[6] -= 2;
      }
    }
  }
  return result;
}

uint64_t WebCore::Editor::copy(WebCore::Editor *a1, const WebCore::Position *a2)
{
  char v3;
  uint64_t result;
  void *v5;

  v3 = *((_BYTE *)a1 + 475);
  *((_BYTE *)a1 + 475) = (_BYTE)a2;
  result = WebCore::Editor::tryDHTMLCopy(a1, a2);
  if ((result & 1) == 0)
  {
    result = WebCore::Editor::canCopy(a1, v5);
    if ((result & 1) != 0)
    {
      result = (uint64_t)WebCore::Editor::performCutOrCopy(a1, 1);
    }
    {
      result = WebCore::SystemSoundManager::singleton(void)::systemSoundManager;
      if (WebCore::SystemSoundManager::singleton(void)::systemSoundManager)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::SystemSoundManager::singleton(void)::systemSoundManager
                                                    + 16))(WebCore::SystemSoundManager::singleton(void)::systemSoundManager);
    }
    else
    {
      WebCore::SystemSoundManager::singleton(void)::systemSoundManager = 0;
    }
  }
  *((_BYTE *)a1 + 475) = v3;
  return result;
}

uint64_t WebCore::Editor::paste(uint64_t a1, char a2)
{
  uint64_t v4;
  int8x16_t v5;
  uint64_t v6;
  uint64_t v7;
  int8x16_t *v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;
  void *v14;
  uint64_t result;
  int8x16_t v16;
  uint64_t v17;
  void *v18;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 528);
  v5 = 0uLL;
  if (v4 && (v6 = *(_QWORD *)(v4 + 8)) != 0 && (v7 = *(_QWORD *)(v6 + 24)) != 0)
  {
    v8 = *(int8x16_t **)(v7 + 8);
    v9 = 0uLL;
    if (v8)
    {
      v10 = v8[2];
      v11.i64[0] = -256;
      v11.i64[1] = -256;
      v9 = vandq_s8(v10, v11);
      v12.i64[0] = 255;
      v12.i64[1] = 255;
      v5 = vandq_s8(v10, v12);
    }
  }
  else
  {
    v9 = 0uLL;
  }
  v16 = vorrq_s8(v5, v9);
  v13 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v13 = off_1E327FAB0;
  *(int8x16_t *)(v13 + 8) = v16;
  v17 = v13;
  WebCore::Pasteboard::createForCopyAndPaste((PAL *)&v17, (uint64_t *)&v18);
  v14 = v18;
  WebCore::Editor::paste(a1, v18, a2);
  (*(void (**)(void *))(*(_QWORD *)v14 + 8))(v14);
  result = v17;
  if (v17)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  return result;
}

void WebCore::Editor::paste(uint64_t a1, void *a2, char a3)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  void *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  WebCore::Document *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  void *v23;
  int v24;
  void *v25;
  void *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;

  v5 = *(_BYTE *)(a1 + 476);
  *(_BYTE *)(a1 + 476) = a3;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 3064) + 120);
  if (!v6)
  {
LABEL_15:
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 1272);
    if (v11
      && (*(_WORD *)(v11 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    {
      v7 = *(_QWORD *)(v11 + 80);
      if (!v7)
        goto LABEL_28;
      while ((*(_WORD *)(v7 + 28) & 0x10) == 0)
      {
        v7 = *(_QWORD *)(v7 + 56);
        if (!v7)
          goto LABEL_28;
      }
      v12 = *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
      v13 = *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24);
      if (v13 != v12)
      {
LABEL_23:
        if (v13 != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
        {
          while (1)
          {
            v7 = *(_QWORD *)(v7 + 56);
            if (!v7)
              break;
            if ((*(_WORD *)(v7 + 28) & 0x10) != 0)
            {
              v13 = *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24);
              if (v13 != v12)
                goto LABEL_23;
              goto LABEL_27;
            }
          }
LABEL_28:
          v33 = v7;
          v10 = WebCore::dispatchClipboardEvent(&v33, 3);
          if (!v7)
            goto LABEL_56;
          goto LABEL_29;
        }
      }
LABEL_27:
      *(_DWORD *)(v7 + 24) += 2;
      goto LABEL_28;
    }
    v7 = 0;
    goto LABEL_28;
  }
  *(_DWORD *)(v6 + 24) += 2;
  while (1)
  {
    v7 = v6;
    if ((*(_WORD *)(v6 + 28) & 8) != 0)
      break;
    v6 = *(_QWORD *)(v6 + 32);
    if (v6)
      *(_DWORD *)(v6 + 24) += 2;
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
    if (!v6)
      goto LABEL_15;
  }
  v8 = *(_DWORD *)(v6 + 24);
  *(_DWORD *)(v6 + 24) = v8 + 2;
  v33 = v6;
  if (v8)
  {
    *(_DWORD *)(v6 + 24) = v8;
  }
  else if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
  }
  v10 = WebCore::dispatchClipboardEvent(&v33, 3);
LABEL_29:
  if (*(_DWORD *)(v7 + 24) != 2)
  {
    *(_DWORD *)(v7 + 24) -= 2;
    if ((v10 & 1) == 0)
      goto LABEL_64;
    goto LABEL_31;
  }
  if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v7, v9);
    if ((v10 & 1) == 0)
      goto LABEL_64;
    goto LABEL_31;
  }
LABEL_56:
  if (!v10)
    goto LABEL_64;
LABEL_31:
  if (WebCore::editableRootForPosition(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 3064) + 120, 0))
  {
    WebCore::Editor::updateMarkersForWordsAffectedByEditing(a1, 0);
    v15 = *(WebCore::Document **)(*(_QWORD *)(a1 + 16) + 8);
    v16 = *((_QWORD *)v15 + 90);
    if (!v16)
      v16 = WebCore::Document::ensureCachedResourceLoader(v15, v14);
    if (!*(_QWORD *)(v16 + 8))
    {
      v27 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v27 = 1;
      *(_QWORD *)(v27 + 8) = v16;
      v28 = *(unsigned int **)(v16 + 8);
      *(_QWORD *)(v16 + 8) = v27;
      if (v28)
      {
        do
        {
          v29 = __ldaxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
        {
          atomic_store(1u, v28);
          WTF::fastFree((WTF *)v28, v26);
        }
      }
    }
    v17 = *(_QWORD *)(v16 + 8);
    do
      v18 = __ldaxr((unsigned int *)v17);
    while (__stlxr(v18 + 1, (unsigned int *)v17));
    v19 = *(_BYTE *)(v16 + 274);
    *(_BYTE *)(*(_QWORD *)(v17 + 8) + 274) = 1;
    v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 3064);
    v21 = *(_QWORD *)(v20 + 120);
    if (!v21)
      goto LABEL_59;
    v22 = *(_BYTE *)(v20 + 132) & 7;
    if (v22 > 4)
      goto LABEL_59;
    if (((1 << v22) & 0x19) == 0)
    {
      v21 = *(_QWORD *)(v21 + 32);
      if (!v21)
        goto LABEL_59;
    }
    *(_DWORD *)(v21 + 24) += 2;
    v24 = WebCore::Node::computeEditability(v21, 0, 1);
    if (*(_DWORD *)(v21 + 24) == 2)
    {
      if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v21, v23);
    }
    else
    {
      *(_DWORD *)(v21 + 24) -= 2;
    }
    if (v24 == 2)
      WebCore::Editor::pasteWithPasteboard((WebCore::Editor *)a1, (WebCore::Pasteboard *)a2, 1);
    else
LABEL_59:
      WebCore::Editor::pasteAsPlainTextWithPasteboard((WebCore::Editor *)a1, (WebCore::Pasteboard *)a2);
    *(_BYTE *)(*(_QWORD *)(v17 + 8) + 274) = v19;
    do
    {
      v31 = __ldaxr((unsigned int *)v17);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, (unsigned int *)v17));
    if (!v32)
    {
      atomic_store(1u, (unsigned int *)v17);
      WTF::fastFree((WTF *)v17, v25);
    }
  }
LABEL_64:
  *(_BYTE *)(a1 + 476) = v5;
}

uint64_t WebCore::Editor::pasteAsPlainText(uint64_t a1, void *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  void *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int8x16_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x16_t *v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  uint64_t v22;
  WebCore::Pasteboard *v23;
  int8x16_t v24;
  uint64_t v25;
  WebCore::Pasteboard *v26;

  v3 = *(_BYTE *)(a1 + 476);
  *(_BYTE *)(a1 + 476) = (_BYTE)a2;
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 3064) + 120);
  if (!v4)
  {
LABEL_15:
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 1272);
    if (v10
      && (*(_WORD *)(v10 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    {
      v5 = *(_QWORD *)(v10 + 80);
      if (!v5)
        goto LABEL_28;
      while ((*(_WORD *)(v5 + 28) & 0x10) == 0)
      {
        v5 = *(_QWORD *)(v5 + 56);
        if (!v5)
          goto LABEL_28;
      }
      v11 = *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
      v12 = *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24);
      if (v12 != v11)
      {
LABEL_23:
        if (v12 != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
        {
          while (1)
          {
            v5 = *(_QWORD *)(v5 + 56);
            if (!v5)
              break;
            if ((*(_WORD *)(v5 + 28) & 0x10) != 0)
            {
              v12 = *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24);
              if (v12 != v11)
                goto LABEL_23;
              goto LABEL_27;
            }
          }
LABEL_28:
          v26 = (WebCore::Pasteboard *)v5;
          result = WebCore::dispatchClipboardEvent(&v26, 5);
          v9 = result;
          if (!v5)
            goto LABEL_47;
          goto LABEL_29;
        }
      }
LABEL_27:
      *(_DWORD *)(v5 + 24) += 2;
      goto LABEL_28;
    }
    v5 = 0;
    goto LABEL_28;
  }
  *(_DWORD *)(v4 + 24) += 2;
  while (1)
  {
    v5 = v4;
    if ((*(_WORD *)(v4 + 28) & 8) != 0)
      break;
    v4 = *(_QWORD *)(v4 + 32);
    if (v4)
      *(_DWORD *)(v4 + 24) += 2;
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
    if (!v4)
      goto LABEL_15;
  }
  v6 = *(_DWORD *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v6 + 2;
  v26 = (WebCore::Pasteboard *)v4;
  if (v6)
  {
    *(_DWORD *)(v4 + 24) = v6;
  }
  else if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
  }
  result = WebCore::dispatchClipboardEvent(&v26, 5);
  v9 = result;
LABEL_29:
  if (*(_DWORD *)(v5 + 24) != 2)
  {
    *(_DWORD *)(v5 + 24) -= 2;
    if ((v9 & 1) == 0)
      goto LABEL_40;
    goto LABEL_31;
  }
  if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
  {
    result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v5, v8);
    if ((v9 & 1) == 0)
      goto LABEL_40;
    goto LABEL_31;
  }
LABEL_47:
  if (!v9)
    goto LABEL_40;
LABEL_31:
  result = WebCore::editableRootForPosition(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 3064) + 120, 0);
  if (result)
  {
    WebCore::Editor::updateMarkersForWordsAffectedByEditing(a1, 0);
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 528);
    v14 = 0uLL;
    if (v13 && (v15 = *(_QWORD *)(v13 + 8)) != 0 && (v16 = *(_QWORD *)(v15 + 24)) != 0)
    {
      v17 = *(int8x16_t **)(v16 + 8);
      v18 = 0uLL;
      if (v17)
      {
        v19 = v17[2];
        v20.i64[0] = -256;
        v20.i64[1] = -256;
        v18 = vandq_s8(v19, v20);
        v21.i64[0] = 255;
        v21.i64[1] = 255;
        v14 = vandq_s8(v19, v21);
      }
    }
    else
    {
      v18 = 0uLL;
    }
    v24 = vorrq_s8(v14, v18);
    v22 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v22 = off_1E327FAB0;
    *(int8x16_t *)(v22 + 8) = v24;
    v25 = v22;
    WebCore::Pasteboard::createForCopyAndPaste((PAL *)&v25, (uint64_t *)&v26);
    v23 = v26;
    WebCore::Editor::pasteAsPlainTextWithPasteboard((WebCore::Editor *)a1, v26);
    (*(void (**)(WebCore::Pasteboard *))(*(_QWORD *)v23 + 8))(v23);
    result = v25;
    if (v25)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  }
LABEL_40:
  *(_BYTE *)(a1 + 476) = v3;
  return result;
}

void WebCore::Editor::pasteAsQuotation(uint64_t a1, void *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  void *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  int8x16_t v19;
  uint64_t v20;
  uint64_t v21;
  int8x16_t *v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  void *v31;
  int v32;
  WebCore::Pasteboard *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  int8x16_t v42;
  uint64_t v43;
  WebCore::Pasteboard *v44;

  v3 = *(_BYTE *)(a1 + 476);
  *(_BYTE *)(a1 + 476) = (_BYTE)a2;
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 3064) + 120);
  if (v4)
  {
    *(_DWORD *)(v4 + 24) += 2;
    while (1)
    {
      v5 = v4;
      if ((*(_WORD *)(v4 + 28) & 8) != 0)
        break;
      v4 = *(_QWORD *)(v4 + 32);
      if (v4)
        *(_DWORD *)(v4 + 24) += 2;
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
      if (!v4)
        goto LABEL_15;
    }
    v6 = *(_DWORD *)(v4 + 24);
    *(_DWORD *)(v4 + 24) = v6 + 2;
    v44 = (WebCore::Pasteboard *)v4;
    if (v6)
    {
      *(_DWORD *)(v4 + 24) = v6;
    }
    else if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    v8 = WebCore::dispatchClipboardEvent(&v44, 6);
    goto LABEL_29;
  }
LABEL_15:
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 1272);
  if (!v9
    || (*(_WORD *)(v9 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
  {
    v5 = 0;
    goto LABEL_28;
  }
  v5 = *(_QWORD *)(v9 + 80);
  if (!v5)
    goto LABEL_28;
  while ((*(_WORD *)(v5 + 28) & 0x10) == 0)
  {
    v5 = *(_QWORD *)(v5 + 56);
    if (!v5)
      goto LABEL_28;
  }
  v10 = *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
  v11 = *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24);
  if (v11 == v10)
  {
LABEL_27:
    *(_DWORD *)(v5 + 24) += 2;
    goto LABEL_28;
  }
LABEL_23:
  if (v11 == *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
    goto LABEL_27;
  while (1)
  {
    v5 = *(_QWORD *)(v5 + 56);
    if (!v5)
      break;
    if ((*(_WORD *)(v5 + 28) & 0x10) != 0)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24);
      if (v11 != v10)
        goto LABEL_23;
      goto LABEL_27;
    }
  }
LABEL_28:
  v44 = (WebCore::Pasteboard *)v5;
  v8 = WebCore::dispatchClipboardEvent(&v44, 6);
  if (!v5)
    goto LABEL_65;
LABEL_29:
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v7);
      if ((v8 & 1) == 0)
        goto LABEL_77;
      goto LABEL_31;
    }
LABEL_65:
    if (!v8)
      goto LABEL_77;
    goto LABEL_31;
  }
  *(_DWORD *)(v5 + 24) -= 2;
  if ((v8 & 1) == 0)
    goto LABEL_77;
LABEL_31:
  if (!WebCore::editableRootForPosition(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 3064) + 120, 0))
    goto LABEL_77;
  WebCore::Editor::updateMarkersForWordsAffectedByEditing(a1, 0);
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  *(_DWORD *)(v13 + 24) += 2;
  v14 = *(_QWORD *)(v13 + 720);
  if (!v14)
    v14 = WebCore::Document::ensureCachedResourceLoader((WebCore::Document *)v13, v12);
  if (!*(_QWORD *)(v14 + 8))
  {
    v36 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v36 = 1;
    *(_QWORD *)(v36 + 8) = v14;
    v37 = *(unsigned int **)(v14 + 8);
    *(_QWORD *)(v14 + 8) = v36;
    if (v37)
    {
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (!v39)
      {
        atomic_store(1u, v37);
        WTF::fastFree((WTF *)v37, v35);
      }
    }
  }
  v15 = *(_QWORD *)(v14 + 8);
  do
    v16 = __ldaxr((unsigned int *)v15);
  while (__stlxr(v16 + 1, (unsigned int *)v15));
  v17 = *(_BYTE *)(v14 + 274);
  *(_BYTE *)(*(_QWORD *)(v15 + 8) + 274) = 1;
  v18 = *(_QWORD *)(v13 + 528);
  v19 = 0uLL;
  if (v18 && (v20 = *(_QWORD *)(v18 + 8)) != 0 && (v21 = *(_QWORD *)(v20 + 24)) != 0)
  {
    v22 = *(int8x16_t **)(v21 + 8);
    v23 = 0uLL;
    if (v22)
    {
      v24 = v22[2];
      v25.i64[0] = -256;
      v25.i64[1] = -256;
      v23 = vandq_s8(v24, v25);
      v26.i64[0] = 255;
      v26.i64[1] = 255;
      v19 = vandq_s8(v24, v26);
    }
  }
  else
  {
    v23 = 0uLL;
  }
  v42 = vorrq_s8(v19, v23);
  v27 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v27 = off_1E327FAB0;
  *(int8x16_t *)(v27 + 8) = v42;
  v43 = v27;
  WebCore::Pasteboard::createForCopyAndPaste((PAL *)&v43, (uint64_t *)&v44);
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v28 = *(_QWORD *)(v13 + 3064);
  v29 = *(_QWORD *)(v28 + 120);
  if (!v29
    || (v30 = *(_BYTE *)(v28 + 132) & 7, v30 > 4)
    || ((1 << v30) & 0x19) == 0 && (v29 = *(_QWORD *)(v29 + 32)) == 0)
  {
    v33 = v44;
    goto LABEL_69;
  }
  *(_DWORD *)(v29 + 24) += 2;
  v32 = WebCore::Node::computeEditability(v29, 0, 1);
  if (*(_DWORD *)(v29 + 24) == 2)
  {
    if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v29, v31);
  }
  else
  {
    *(_DWORD *)(v29 + 24) -= 2;
  }
  v33 = v44;
  if (v32 != 2)
  {
LABEL_69:
    WebCore::Editor::pasteAsPlainTextWithPasteboard((WebCore::Editor *)a1, v33);
    if (!v33)
      goto LABEL_71;
    goto LABEL_70;
  }
  WebCore::Editor::pasteWithPasteboard((WebCore::Editor *)a1, v44, 5);
  if (v33)
LABEL_70:
    (*(void (**)(WebCore::Pasteboard *))(*(_QWORD *)v33 + 8))(v33);
LABEL_71:
  *(_BYTE *)(*(_QWORD *)(v15 + 8) + 274) = v17;
  do
  {
    v40 = __ldaxr((unsigned int *)v15);
    v41 = v40 - 1;
  }
  while (__stlxr(v41, (unsigned int *)v15));
  if (!v41)
  {
    atomic_store(1u, (unsigned int *)v15);
    WTF::fastFree((WTF *)v15, v34);
  }
  if (*(_DWORD *)(v13 + 24) == 2)
  {
    if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v13, v34);
  }
  else
  {
    *(_DWORD *)(v13 + 24) -= 2;
  }
LABEL_77:
  *(_BYTE *)(a1 + 476) = v3;
}

uint64_t WebCore::Editor::pasteFont(uint64_t a1, void *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  void *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  WebCore::Document *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;

  v3 = *(_BYTE *)(a1 + 476);
  *(_BYTE *)(a1 + 476) = (_BYTE)a2;
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 3064) + 120);
  if (!v4)
  {
LABEL_15:
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 1272);
    if (v10
      && (*(_WORD *)(v10 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    {
      v5 = *(_QWORD *)(v10 + 80);
      if (!v5)
        goto LABEL_28;
      while ((*(_WORD *)(v5 + 28) & 0x10) == 0)
      {
        v5 = *(_QWORD *)(v5 + 56);
        if (!v5)
          goto LABEL_28;
      }
      v11 = *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
      v12 = *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24);
      if (v12 != v11)
      {
LABEL_23:
        if (v12 != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
        {
          while (1)
          {
            v5 = *(_QWORD *)(v5 + 56);
            if (!v5)
              break;
            if ((*(_WORD *)(v5 + 28) & 0x10) != 0)
            {
              v12 = *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24);
              if (v12 != v11)
                goto LABEL_23;
              goto LABEL_27;
            }
          }
LABEL_28:
          v23 = v5;
          result = WebCore::dispatchClipboardEvent(&v23, 4);
          v9 = result;
          if (!v5)
            goto LABEL_52;
          goto LABEL_29;
        }
      }
LABEL_27:
      *(_DWORD *)(v5 + 24) += 2;
      goto LABEL_28;
    }
    v5 = 0;
    goto LABEL_28;
  }
  *(_DWORD *)(v4 + 24) += 2;
  while (1)
  {
    v5 = v4;
    if ((*(_WORD *)(v4 + 28) & 8) != 0)
      break;
    v4 = *(_QWORD *)(v4 + 32);
    if (v4)
      *(_DWORD *)(v4 + 24) += 2;
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
    if (!v4)
      goto LABEL_15;
  }
  v6 = *(_DWORD *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v6 + 2;
  v23 = v4;
  if (v6)
  {
    *(_DWORD *)(v4 + 24) = v6;
  }
  else if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
  }
  result = WebCore::dispatchClipboardEvent(&v23, 4);
  v9 = result;
LABEL_29:
  if (*(_DWORD *)(v5 + 24) != 2)
  {
    *(_DWORD *)(v5 + 24) -= 2;
    if ((v9 & 1) == 0)
      goto LABEL_41;
    goto LABEL_31;
  }
  if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
  {
    result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v5, v8);
    if ((v9 & 1) == 0)
      goto LABEL_41;
    goto LABEL_31;
  }
LABEL_52:
  if (!v9)
    goto LABEL_41;
LABEL_31:
  result = WebCore::editableRootForPosition(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 3064) + 120, 0);
  if (result)
  {
    WebCore::Editor::updateMarkersForWordsAffectedByEditing(a1, 0);
    v14 = *(WebCore::Document **)(*(_QWORD *)(a1 + 16) + 8);
    v15 = *((_QWORD *)v14 + 90);
    if (!v15)
      v15 = WebCore::Document::ensureCachedResourceLoader(v14, v13);
    if (!*(_QWORD *)(v15 + 8))
    {
      v19 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = v15;
      v20 = *(unsigned int **)(v15 + 8);
      *(_QWORD *)(v15 + 8) = v19;
      if (v20)
      {
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v20);
          WTF::fastFree((WTF *)v20, v13);
        }
      }
    }
    result = *(_QWORD *)(v15 + 8);
    do
      v16 = __ldaxr((unsigned int *)result);
    while (__stlxr(v16 + 1, (unsigned int *)result));
    *(_BYTE *)(*(_QWORD *)(result + 8) + 274) = *(_BYTE *)(v15 + 274);
    do
    {
      v17 = __ldaxr((unsigned int *)result);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, (unsigned int *)result));
    if (!v18)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, v13);
    }
  }
LABEL_41:
  *(_BYTE *)(a1 + 476) = v3;
  return result;
}

unsigned int *WebCore::Editor::quoteFragmentForPasting(WebCore::Editor *this, WebCore::DocumentFragment *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WebCore::Node *v21;
  WebCore::Node *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  unsigned int *result;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  char v34;
  _BYTE v35[8];
  WTF::StringImpl *v36;
  char v37;
  _BYTE v38[8];
  WTF::StringImpl *v39;
  char v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  WTF::StringImpl *v43;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  *(_DWORD *)(v3 + 24) += 2;
  WebCore::HTMLQuoteElement::create((_DWORD **)&WebCore::HTMLNames::blockquoteTag, v3, &v42);
  v4 = v42;
  WTF::AtomStringImpl::add();
  v5 = *(_QWORD *)(v4 + 104);
  if (!v5)
    goto LABEL_13;
  v6 = *(_DWORD *)(v5 + 4);
  if ((v6 & 1) != 0)
  {
    v7 = *(uint64_t **)(v5 + 40);
    v8 = *(_DWORD *)(v5 + 52);
    if (!v8)
    {
LABEL_13:
      v9 = 0xFFFFFFFFLL;
      goto LABEL_14;
    }
  }
  else
  {
    v7 = (uint64_t *)(v5 + 32);
    v8 = v6 >> 5;
    if (!v8)
      goto LABEL_13;
  }
  v9 = 0;
  while (1)
  {
    v10 = *v7;
    if (*v7 == WebCore::HTMLNames::typeAttr
      || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
      && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
    {
      break;
    }
    ++v9;
    v7 += 2;
    if (v8 == v9)
      goto LABEL_13;
  }
LABEL_14:
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v4, v9, (WebCore::TreeScope *)&WebCore::HTMLNames::typeAttr, &v43, 0);
  v12 = v43;
  v43 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  WTF::AtomStringImpl::add();
  v41 = v43;
  v13 = *(_QWORD *)(v4 + 104);
  if (!v13)
    goto LABEL_29;
  v14 = *(_DWORD *)(v13 + 4);
  if ((v14 & 1) != 0)
  {
    v15 = *(uint64_t **)(v13 + 40);
    v16 = *(_DWORD *)(v13 + 52);
    if (!v16)
    {
LABEL_29:
      v17 = 0xFFFFFFFFLL;
      goto LABEL_30;
    }
  }
  else
  {
    v15 = (uint64_t *)(v13 + 32);
    v16 = v14 >> 5;
    if (!v16)
      goto LABEL_29;
  }
  v17 = 0;
  while (1)
  {
    v18 = *v15;
    if (*v15 == WebCore::HTMLNames::classAttr
      || *(_QWORD *)(v18 + 24) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 24)
      && *(_QWORD *)(v18 + 32) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 32))
    {
      break;
    }
    ++v17;
    v15 += 2;
    if (v16 == v17)
      goto LABEL_29;
  }
LABEL_30:
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v4, v17, (WebCore::TreeScope *)&WebCore::HTMLNames::classAttr, &v41, 0);
  v20 = v41;
  v41 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = (WebCore::Node *)*((_QWORD *)a2 + 10);
  if (v21)
  {
    *((_DWORD *)v21 + 6) += 2;
    do
    {
      v22 = v21;
      WebCore::ContainerNode::appendChild(v4, v21, (uint64_t)v38);
      if (v40)
      {
        v24 = v39;
        v39 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v23);
          else
            *(_DWORD *)v24 -= 2;
        }
      }
      v21 = (WebCore::Node *)*((_QWORD *)a2 + 10);
      if (v21)
        *((_DWORD *)v21 + 6) += 2;
      if (*((_DWORD *)v22 + 6) == 2)
      {
        if ((*((_WORD *)v22 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v22, v23);
      }
      else
      {
        *((_DWORD *)v22 + 6) -= 2;
      }
    }
    while (v21);
  }
  else
  {
    v25 = bmalloc::api::isoAllocate();
    v26 = v25;
    *(_OWORD *)(v25 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v25 + 24) = 0x101C00000002;
    *(_QWORD *)(v25 + 32) = 0;
    *(_QWORD *)(v25 + 40) = v3 + 96;
    *(_OWORD *)(v25 + 48) = 0u;
    *(_OWORD *)(v25 + 64) = 0u;
    ++*(_DWORD *)(v3 + 3324);
    *(_QWORD *)(v25 + 80) = 0;
    *(_QWORD *)(v25 + 88) = 0;
    v27 = WebCore::HTMLNames::brTag;
    if (WebCore::HTMLNames::brTag)
      ++*(_DWORD *)WebCore::HTMLNames::brTag;
    *(_QWORD *)(v25 + 96) = v27;
    *(_QWORD *)(v25 + 104) = 0;
    *(_QWORD *)v25 = off_1E33B4C28;
    WebCore::ContainerNode::appendChild(v4, (WebCore::Node *)v25, (uint64_t)v35);
    if (v37)
    {
      v29 = v36;
      v36 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, v28);
        else
          *(_DWORD *)v29 -= 2;
      }
    }
    if (*(_DWORD *)(v26 + 24) == 2)
    {
      if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v26, v28);
    }
    else
    {
      *(_DWORD *)(v26 + 24) -= 2;
    }
  }
  result = (unsigned int *)WebCore::ContainerNode::appendChild((uint64_t)a2, (WebCore::Node *)v4, (uint64_t)&v32);
  if (v34)
  {
    result = (unsigned int *)v33;
    v33 = 0;
    if (result)
    {
      if (*result == 2)
        result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v31);
      else
        *result -= 2;
    }
  }
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v4, v31);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v3, v31);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::Editor::performDelete(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WebCore::Node *v6;
  WebCore::Node *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  WebCore::Node *v12[2];
  WebCore::Node *v13;
  unsigned __int8 v14;
  WTF::StringImpl *v15;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 16) + 8) + 3064);
  if (*(_BYTE *)(v1 + 153) == 2)
  {
    v2 = this;
    this = WebCore::editableRootForPosition(v1 + 120, 0);
    if (this)
    {
      this = (uint64_t)WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 8) + 3064)+ 56), v12);
      v3 = v14;
      if (v14)
      {
        WebCore::plainText(v12, 0, 0, (const WTF::String *)&v15);
        *(_BYTE *)(v2 + 89) = 0;
        v5 = v15;
        v15 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, v4);
          else
            *(_DWORD *)v5 -= 2;
        }
        if (v14)
        {
          v6 = v13;
          v13 = 0;
          if (v6)
          {
            if (*((_DWORD *)v6 + 6) == 2)
            {
              if ((*((_WORD *)v6 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v6, v4);
            }
            else
            {
              *((_DWORD *)v6 + 6) -= 2;
            }
          }
          v7 = v12[0];
          v12[0] = 0;
          if (v7)
          {
            if (*((_DWORD *)v7 + 6) == 2)
            {
              if ((*((_WORD *)v7 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v7, v4);
            }
            else
            {
              *((_DWORD *)v7 + 6) -= 2;
            }
          }
        }
        v8 = *(_QWORD *)(v2 + 8);
        if (v8
          && (v9 = *(_QWORD *)(v8 + 8)) != 0
          && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9))
        {
          v10 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8);
          v11 = *(_BYTE *)(*(_QWORD *)(v10 + 680) + 370) == 3
             || *(unsigned __int8 *)(*(_QWORD *)(v10 + 3064) + 184) == 1;
        }
        else
        {
          v11 = 0;
        }
        this = (uint64_t)WebCore::Editor::deleteSelectionWithSmartDelete(v2, (void *)v11, 9);
        *(_BYTE *)(v2 + 89) = 0;
        return this;
      }
      __break(1u);
LABEL_32:
      WebCore::SystemSoundManager::singleton(void)::systemSoundManager = 0;
      *(_BYTE *)(v3 + 3424) = 1;
      return this;
    }
  }
  v3 = (unint64_t)&dword_1ECE90000;
    goto LABEL_32;
  this = WebCore::SystemSoundManager::singleton(void)::systemSoundManager;
  if (WebCore::SystemSoundManager::singleton(void)::systemSoundManager)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::SystemSoundManager::singleton(void)::systemSoundManager
                                              + 16))(WebCore::SystemSoundManager::singleton(void)::systemSoundManager);
  return this;
}

unsigned int *WebCore::Editor::changeSelectionListType(WebCore::Editor *this, WebCore::Document *a2)
{
  uint64_t v2;
  unsigned int *result;
  void *v4;
  char v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  *(_DWORD *)(v2 + 24) += 2;
  v8 = v2;
  result = (unsigned int *)WebCore::ChangeListTypeCommand::listConversionType((WebCore::ChangeListTypeCommand *)v2, a2);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v8 = 0;
LABEL_6:
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v2, v4);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
    return result;
  }
  v5 = (char)result;
  v6 = (_DWORD *)WTF::fastMalloc((WTF *)0x120);
  v7 = WebCore::EditCommand::EditCommand((uint64_t)v6, &v8, 59);
  *(_OWORD *)(v7 + 248) = 0u;
  *(_OWORD *)(v7 + 264) = 0u;
  *(_QWORD *)v7 = off_1E33A9A48;
  *(_BYTE *)(v7 + 280) = v5;
  result = (unsigned int *)WebCore::CompositeEditCommand::apply((WebCore::CompositeEditCommand *)v7);
  if (v6[2] == 1)
    result = (unsigned int *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
  else
    --v6[2];
  v2 = v8;
  v8 = 0;
  if (v2)
    goto LABEL_6;
  return result;
}

unsigned int *WebCore::Editor::simplifyMarkup(unsigned int *this, WebCore::Node *a2, WebCore::Node *a3)
{
  uint64_t v4;
  WebCore::Node *v5;
  uint64_t v6;
  unint64_t v7;
  WebCore::Node *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::Node *v12;
  WebCore::Node *v13;
  WebCore::Node *v14;
  WebCore::Node *v15;
  WebCore::Node *v16;
  BOOL v17;
  WebCore::Node *v18;
  WebCore::Node *v19;
  int v20;
  int v21;
  unsigned __int8 v23;
  uint64_t v24;
  WebCore::Node *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  WebCore::Node *v29;
  WebCore::Node *v30;

  if (!a2)
    return this;
  if (!a3)
  {
LABEL_47:
    v24 = 0;
LABEL_49:
    v25 = *(WebCore::Node **)(*((_QWORD *)this + 2) + 8);
    *((_DWORD *)v25 + 6) += 2;
    v30 = v25;
    v26 = WTF::fastMalloc((WTF *)0x128);
    v27 = WebCore::EditCommand::EditCommand(v26, (uint64_t *)&v30, 59);
    *(_OWORD *)(v27 + 248) = 0u;
    *(_OWORD *)(v27 + 264) = 0u;
    *(_QWORD *)v27 = off_1E33ADB98;
    *((_DWORD *)a2 + 6) += 2;
    *(_QWORD *)(v27 + 280) = a2;
    if (v24)
      *(_DWORD *)(v24 + 24) += 2;
    *(_QWORD *)(v26 + 288) = v24;
    WebCore::CompositeEditCommand::apply((WebCore::CompositeEditCommand *)v26);
    if (*(_DWORD *)(v26 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    else
      --*(_DWORD *)(v26 + 8);
    this = (unsigned int *)v30;
    v30 = 0;
    if (this)
    {
      if (this[6] == 2)
      {
        if ((*((_WORD *)this + 15) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)this, v28);
      }
      else
      {
        this[6] -= 2;
      }
    }
    if (v24)
    {
      if (*(_DWORD *)(v24 + 24) == 2)
      {
        if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)v24, v28);
      }
      else
      {
        *(_DWORD *)(v24 + 24) -= 2;
      }
    }
    return this;
  }
  if (a2 != a3)
  {
    v4 = 0;
    v5 = a2;
    do
    {
      v5 = (WebCore::Node *)*((_QWORD *)v5 + 4);
      ++v4;
    }
    while (v5);
    v6 = 0;
    v7 = v4 - 1;
    v8 = a3;
    do
    {
      v8 = (WebCore::Node *)*((_QWORD *)v8 + 4);
      ++v6;
    }
    while (v8);
    v9 = v6 - 1;
    v10 = v6 - v4;
    v11 = v4 - v6;
    if (v7 >= v9)
      v12 = a2;
    else
      v12 = a3;
    if (v7 >= v9)
      v13 = a3;
    else
      v13 = a2;
    if (v7 >= v9)
      v10 = v11;
    if (v10)
    {
      v29 = v12;
      do
      {
        v12 = (WebCore::Node *)*((_QWORD *)v29 + 4);
        v14 = v29;
        v29 = v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      v14 = 0;
    }
    if (v12 == v13)
    {
      v16 = 0;
    }
    else
    {
      v15 = v13;
      v13 = v12;
      do
      {
        v14 = v13;
        v16 = v15;
        v13 = (WebCore::Node *)*((_QWORD *)v13 + 4);
        v15 = (WebCore::Node *)*((_QWORD *)v15 + 4);
      }
      while (v13 != v15);
    }
    v17 = v7 >= v9;
    v18 = v7 < v9 ? v16 : v14;
    v19 = v17 ? v16 : v14;
    if (v13)
    {
      if (v18)
      {
        if (!v19)
          return this;
        v20 = *((unsigned __int16 *)v18 + 14);
        v21 = *((unsigned __int16 *)v19 + 14);
        if (((v20 | v21) & 0x80) != 0)
        {
          if ((v20 & 0x80) != 0)
            v23 = -127;
          else
            v23 = 1;
          if ((v21 & 0x80) == 0)
            v23 = -1;
          goto LABEL_41;
        }
        if (v18 != v19)
        {
          do
            v18 = (WebCore::Node *)*((_QWORD *)v18 + 7);
          while (v18 != v19 && v18 != 0);
          if (!v18)
            return this;
        }
      }
      v23 = -1;
LABEL_41:
      if (v23 == 129 || (v23 & 0x80) == 0)
        return this;
      if ((*((_WORD *)a3 + 14) & 4) == 0 || (v24 = *((_QWORD *)a3 + 10)) == 0)
      {
        while (1)
        {
          v24 = *((_QWORD *)a3 + 7);
          if (v24)
            break;
          a3 = (WebCore::Node *)*((_QWORD *)a3 + 4);
          if (!a3)
            goto LABEL_47;
        }
      }
      *(_DWORD *)(v24 + 24) += 2;
      goto LABEL_49;
    }
  }
  return this;
}

uint64_t WebCore::Editor::copyURL(WebCore::Editor *this, const WTF::URL *a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int8x16_t v7;
  uint64_t v8;
  uint64_t v9;
  int8x16_t *v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  uint64_t v15;
  WebCore::Pasteboard *v16;
  uint64_t result;
  int8x16_t v18;
  uint64_t v19;
  WebCore::Pasteboard *v20;

  v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 528);
  v7 = 0uLL;
  if (v6 && (v8 = *(_QWORD *)(v6 + 8)) != 0 && (v9 = *(_QWORD *)(v8 + 24)) != 0)
  {
    v10 = *(int8x16_t **)(v9 + 8);
    v11 = 0uLL;
    if (v10)
    {
      v12 = v10[2];
      v13.i64[0] = -256;
      v13.i64[1] = -256;
      v11 = vandq_s8(v12, v13);
      v14.i64[0] = 255;
      v14.i64[1] = 255;
      v7 = vandq_s8(v12, v14);
    }
  }
  else
  {
    v11 = 0uLL;
  }
  v18 = vorrq_s8(v7, v11);
  v15 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v15 = off_1E327FAB0;
  *(int8x16_t *)(v15 + 8) = v18;
  v19 = v15;
  WebCore::Pasteboard::createForCopyAndPaste((PAL *)&v19, (uint64_t *)&v20);
  v16 = v20;
  WebCore::Editor::copyURL(this, a2, a3, v20);
  (*(void (**)(WebCore::Pasteboard *))(*(_QWORD *)v16 + 8))(v16);
  result = v19;
  if (v19)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  return result;
}

WTF::StringImpl *WebCore::Editor::copyURL(WebCore::Editor *this, const WTF::URL *a2, WTF::StringImpl **a3, WebCore::Pasteboard *a4)
{
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  __int128 v16;
  __int128 v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *result;
  __int128 v23;
  __int128 v24;
  WTF::StringImpl *v25;
  __int128 v26;
  __int128 v27;
  WTF::StringImpl *v28;

  v6 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v6 += 2;
  v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 528);
  if (v7 && (v8 = *(_QWORD *)(v7 + 8)) != 0 && (v9 = *(_QWORD *)(v8 + 24)) != 0 && (v10 = *(_QWORD *)(v9 + 8)) != 0)
  {
    WebCore::ChromeClient::applyLinkDecorationFiltering(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 16), (uint64_t)&v25);
    v12 = v25;
    v25 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
      {
        WTF::StringImpl::destroy(v6, v11);
        v13 = v25;
      }
      else
      {
        v13 = 0;
        *(_DWORD *)v6 -= 2;
      }
    }
    else
    {
      v13 = 0;
    }
    v24 = v26;
    LODWORD(v26) = v26 & 0xFFFFFFFE;
    v23 = v27;
    v25 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    v6 = v12;
  }
  else
  {
    v23 = *(_OWORD *)((char *)a2 + 24);
    v24 = *(_OWORD *)((char *)a2 + 8);
  }
  v25 = 0;
  WTF::URL::invalidate((WTF::URL *)&v25);
  v28 = 0;
  if (v6)
    *(_DWORD *)v6 += 2;
  v15 = v25;
  v25 = v6;
  v17 = v23;
  v16 = v24;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::destroy(v15, v14);
      v17 = v23;
      v16 = v24;
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
  v26 = v16;
  v27 = v17;
  v18 = *a3;
  if (*a3)
    *(_DWORD *)v18 += 2;
  v19 = v28;
  v28 = v18;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v14);
    else
      *(_DWORD *)v19 -= 2;
  }
  (*(void (**)(WebCore::Pasteboard *, WTF::StringImpl **))(*(_QWORD *)a4 + 136))(a4, &v25);
  v21 = v28;
  v28 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v20);
    else
      *(_DWORD *)v21 -= 2;
  }
  result = v25;
  v25 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v20);
      if (!v6)
        return result;
      goto LABEL_32;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v6)
    return result;
LABEL_32:
  if (*(_DWORD *)v6 == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v20);
  *(_DWORD *)v6 -= 2;
  return result;
}

uint64_t WTF::HashSet<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::DefaultHash<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTableTraits>::remove<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>(uint64_t *a1, void *a2)
{
  uint64_t v2;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  v9 = *(void **)(v2 + 8 * v8);
  if (v9 != a2)
  {
    v10 = 1;
    while (v9)
    {
      v8 = ((_DWORD)v8 + v10) & v4;
      v9 = *(void **)(v2 + 8 * v8);
      ++v10;
      if (v9 == a2)
        goto LABEL_8;
    }
    v8 = *(unsigned int *)(v2 - 4);
  }
LABEL_8:
  if (v8 == *(_DWORD *)(v2 - 4))
    return 0;
  v12 = *(_QWORD *)(v2 + 8 * v8);
  *(_QWORD *)(v2 + 8 * v8) = -1;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12, a2);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  ++*(_DWORD *)(*a1 - 16);
  v13 = *a1;
  if (*a1)
    v14 = *(_DWORD *)(v13 - 12) - 1;
  else
    v14 = -1;
  *(_DWORD *)(v13 - 12) = v14;
  v15 = *a1;
  if (*a1)
  {
    v16 = 6 * *(_DWORD *)(v15 - 12);
    v17 = *(_DWORD *)(v15 - 4);
    if (v16 < v17 && v17 >= 9)
      WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::rehash(a1, v17 >> 1, 0);
  }
  return 1;
}

_QWORD *WebCore::Editor::toggleContinuousSpellChecking(_QWORD *this)
{
  uint64_t v1;

  v1 = this[1];
  if (v1)
  {
    this = *(_QWORD **)(v1 + 8);
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 48))(this);
  }
  return this;
}

uint64_t WebCore::Editor::shouldBeginEditing(WebCore::Editor *this, const WebCore::SimpleRange *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 1);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
    return (*(uint64_t (**)(uint64_t, const WebCore::SimpleRange *))(*(_QWORD *)v3 + 80))(v3, a2);
  else
    return 0;
}

_QWORD *WebCore::Editor::clearUndoRedoOperations(_QWORD *this)
{
  uint64_t v1;

  v1 = this[1];
  if (v1)
  {
    this = *(_QWORD **)(v1 + 8);
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 376))(this);
  }
  return this;
}

_QWORD *WebCore::Editor::didBeginEditing(_QWORD *this)
{
  uint64_t v1;

  v1 = this[1];
  if (v1)
  {
    this = *(_QWORD **)(v1 + 8);
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 240))(this);
  }
  return this;
}

_QWORD *WebCore::Editor::didEndEditing(_QWORD *this)
{
  uint64_t v1;

  v1 = this[1];
  if (v1)
  {
    this = *(_QWORD **)(v1 + 8);
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 280))(this);
  }
  return this;
}

uint64_t WebCore::Editor::command@<X0>(WebCore::Editor *this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  result = WebCore::internalCommand(a2, (unint64_t)a2);
  v6 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  *(_QWORD *)a3 = result;
  *(_BYTE *)(a3 + 8) = 0;
  if (result)
  {
    *(_DWORD *)(v6 + 24) += 2;
    *(_QWORD *)(a3 + 16) = v6;
    v7 = *(_QWORD *)(v6 + 528);
    if (v7)
    {
      v7 = *(_QWORD *)(v7 + 8);
      if (v7)
      {
        v8 = (unsigned int *)(v7 + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
      }
    }
  }
  else
  {
    v7 = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  *(_QWORD *)(a3 + 24) = v7;
  return result;
}

uint64_t WebCore::Editor::Command::execute(WebCore::Editor::Command *this, const WTF::String *a2, WebCore::Event *a3)
{
  uint64_t v3;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v6 = *((unsigned __int8 *)this + 8);
  if ((v6 - 1) >= 2)
  {
    if (*((_BYTE *)this + 8))
      goto LABEL_10;
    goto LABEL_6;
  }
  if ((*(unsigned int (**)(_QWORD))(v3 + 8))(*((_QWORD *)this + 3)))
  {
LABEL_6:
    v7 = *((_QWORD *)this + 3);
    if (v7
      && ((*(uint64_t (**)(uint64_t, WebCore::Event *, _QWORD))(*(_QWORD *)this + 16))(v7, a3, *((unsigned __int8 *)this + 8)) & 1) != 0)
    {
      goto LABEL_16;
    }
  }
  v3 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v6 = *((unsigned __int8 *)this + 8);
LABEL_10:
  if ((v6 - 1) < 2)
  {
    if (!(*(unsigned int (**)(_QWORD))(v3 + 8))(*((_QWORD *)this + 3)))
      return 0;
    goto LABEL_14;
  }
  if (v6)
    return 0;
LABEL_14:
  v8 = *((_QWORD *)this + 3);
  if (!v8
    || !(*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)this + 48))(v8, *((unsigned __int8 *)this + 8)))
  {
    return 0;
  }
LABEL_16:
  WebCore::Document::updateLayout(*((_QWORD *)this + 2), 2u, 0);
  v9 = *(_QWORD *)(*((_QWORD *)this + 2) + 528);
  if (v9)
    v10 = *(_QWORD *)(v9 + 8);
  else
    v10 = 0;
  if (*((_QWORD *)this + 3) != v10)
    return 0;
  return (**(uint64_t (***)(void))this)();
}

uint64_t WebCore::Editor::setBaseWritingDirection(WebCore::Editor *a1, int a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  const WebCore::VisiblePosition *v7;
  unsigned __int8 *v8;
  int v9;
  const WebCore::VisiblePosition *v10;
  void *v11;
  void *v12;
  int v13;
  WebCore::Node *v14;
  uint64_t result;
  WebCore::Node *v16;
  WTF::StringImpl *v17;
  WebCore::Node *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WebCore::Node *v22;
  WebCore::Node *v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD **v31;
  _DWORD *v32;
  WTF *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WebCore::Node *v40;
  WebCore::Node *v41;
  WTF::StringImpl *v42;
  WebCore::Node *v43;
  void *v44;
  WebCore::Node *v45;
  WebCore::Node *v46;
  void *v47;
  WebCore::Node *v48;
  _DWORD *v49;
  WebCore::Node *v50;
  int v51;
  char v52;
  char v53;
  WTF::StringImpl *v54;
  int v55;
  char v56;
  char v57;
  WebCore::Node *v58;
  uint64_t v59;
  char v60;

  v4 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  v5 = *(unsigned __int8 **)(v4 + 3064);
  if (v5[153] == 2)
  {
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v5 + 120), (uint64_t)&v54);
    v57 = 1;
  }
  else
  {
    v6 = v5[152];
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v5 + 120), (uint64_t)&v54);
    v57 = 1;
    if (!v6)
    {
      v46 = v54;
      if (v54)
      {
        *((_DWORD *)v54 + 6) += 2;
        v58 = v46;
        LODWORD(v59) = v55;
        BYTE4(v59) = v56;
        v60 = 0;
        if (!WebCore::inSameLine((WebCore *)&v54, (const WebCore::VisiblePosition *)&v58, v7))
          v57 = 0;
        v48 = v58;
        v58 = 0;
        if (v48)
        {
          if (*((_DWORD *)v48 + 6) == 2)
          {
            if ((*((_WORD *)v48 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v48, v47);
          }
          else
          {
            *((_DWORD *)v48 + 6) -= 2;
          }
        }
      }
    }
  }
  v8 = *(unsigned __int8 **)(v4 + 3064);
  if (v8[153] == 2)
  {
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v8 + 136), (uint64_t)&v50);
    v53 = 1;
  }
  else
  {
    v9 = v8[152];
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v8 + 136), (uint64_t)&v50);
    v53 = 1;
    if (v9)
      goto LABEL_5;
  }
  v43 = v50;
  if (v50)
  {
    *((_DWORD *)v50 + 6) += 2;
    v58 = v43;
    LODWORD(v59) = v51;
    BYTE4(v59) = v52;
    v60 = 0;
    if (!WebCore::inSameLine((WebCore *)&v50, (const WebCore::VisiblePosition *)&v58, v10))
      v53 = 0;
    v45 = v58;
    v58 = 0;
    if (v45)
    {
      if (*((_DWORD *)v45 + 6) == 2)
      {
        if ((*((_WORD *)v45 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v45, v44);
      }
      else
      {
        *((_DWORD *)v45 + 6) -= 2;
      }
    }
  }
LABEL_5:
  if (WebCore::inSameParagraph(&v54, (uint64_t)&v50, 1))
  {
    v13 = WebCore::Editor::baseWritingDirectionForSelectionStart(a1);
    v14 = v50;
    v50 = 0;
    if (v14)
    {
      if (*((_DWORD *)v14 + 6) == 2)
      {
        if ((*((_WORD *)v14 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v14, v12);
      }
      else
      {
        *((_DWORD *)v14 + 6) -= 2;
      }
    }
    result = (uint64_t)v54;
    v54 = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 24) == 2)
      {
        if ((*(_WORD *)(result + 30) & 0x400) == 0)
          result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v12);
      }
      else
      {
        *(_DWORD *)(result + 24) -= 2;
      }
    }
    if (v13 == a2)
      goto LABEL_92;
  }
  else
  {
    v16 = v50;
    v50 = 0;
    if (v16)
    {
      if (*((_DWORD *)v16 + 6) == 2)
      {
        if ((*((_WORD *)v16 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v16, v11);
      }
      else
      {
        *((_DWORD *)v16 + 6) -= 2;
      }
    }
    v17 = v54;
    v54 = 0;
    if (v17)
    {
      if (*((_DWORD *)v17 + 6) == 2)
      {
        if ((*((_WORD *)v17 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v17, v11);
      }
      else
      {
        *((_DWORD *)v17 + 6) -= 2;
      }
    }
  }
  v18 = *(WebCore::Node **)(v4 + 1248);
  if (!v18 || !(*(unsigned int (**)(_QWORD))(*(_QWORD *)v18 + 872))(*(_QWORD *)(v4 + 1248)))
    goto LABEL_27;
  *((_DWORD *)v18 + 6) += 2;
  result = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v18 + 880))(v18);
  if (!(_DWORD)result)
  {
    if (*((_DWORD *)v18 + 6) == 2)
    {
      if ((*((_WORD *)v18 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v18, v12);
    }
    else
    {
      *((_DWORD *)v18 + 6) -= 2;
    }
LABEL_27:
    v19 = WTF::fastMalloc((WTF *)0x60);
    *(_QWORD *)v19 = 0x900000001;
    *(_QWORD *)(v19 + 8) = 0;
    *(_QWORD *)(v19 + 16) = v19 + 32;
    *(_QWORD *)(v19 + 24) = 4;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v54 = v58;
    WebCore::MutableStyleProperties::setProperty(v19, 6, (uint64_t)&v54, 0, 0);
    v21 = v54;
    v54 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
    result = (uint64_t)WebCore::Editor::applyParagraphStyleToSelection((unsigned int *)a1, (_DWORD *)v19, 0x1Fu);
    if (*(_DWORD *)v19 == 1)
    {
      v29 = *(unsigned int *)(v19 + 28);
      if ((_DWORD)v29)
      {
        v30 = 16 * v29;
        v31 = (_DWORD **)(*(_QWORD *)(v19 + 16) + 8);
        do
        {
          v32 = *v31;
          *v31 = 0;
          if (v32)
          {
            if (*v32 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v32, (WTF::StringImpl *)v12);
            else
              *v32 -= 2;
          }
          v31 += 2;
          v30 -= 16;
        }
        while (v30);
      }
      v33 = *(WTF **)(v19 + 16);
      if ((WTF *)(v19 + 32) != v33 && v33 != 0)
      {
        *(_QWORD *)(v19 + 16) = 0;
        *(_DWORD *)(v19 + 24) = 0;
        WTF::fastFree(v33, v12);
      }
      v35 = *(_QWORD *)(v19 + 8);
      *(_QWORD *)(v19 + 8) = 0;
      if (v35)
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
      result = WTF::fastFree((WTF *)v19, v12);
    }
    else
    {
      --*(_DWORD *)v19;
    }
    goto LABEL_92;
  }
  if (!a2)
    goto LABEL_89;
  WTF::AtomStringImpl::add();
  v22 = v58;
  v54 = v58;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v23 = v58;
  v50 = v58;
  v49 = 0;
  v58 = 0;
  v59 = 0;
  result = WebCore::dispatchBeforeInputEvent(v18, (_DWORD **)&v54, 0, (_DWORD **)&v50, &v49, (uint64_t)&v58, 1);
  v24 = result;
  v50 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      result = WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v12);
      if (!v22)
        goto LABEL_38;
      goto LABEL_36;
    }
    *(_DWORD *)v23 -= 2;
  }
  if (!v22)
    goto LABEL_38;
LABEL_36:
  if (*(_DWORD *)v22 == 2)
    result = WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v12);
  else
    *(_DWORD *)v22 -= 2;
LABEL_38:
  if (!v24)
    goto LABEL_89;
  WTF::AtomStringImpl::add();
  v54 = v58;
  v25 = *((_QWORD *)v18 + 13);
  if (!v25)
    goto LABEL_78;
  v26 = *(_DWORD *)(v25 + 4);
  if ((v26 & 1) != 0)
  {
    v27 = *(uint64_t **)(v25 + 40);
    v28 = *(_DWORD *)(v25 + 52);
    if (!v28)
    {
LABEL_78:
      v36 = 0xFFFFFFFFLL;
      goto LABEL_79;
    }
  }
  else
  {
    v27 = (uint64_t *)(v25 + 32);
    v28 = v26 >> 5;
    if (!v28)
      goto LABEL_78;
  }
  v36 = 0;
  while (1)
  {
    v37 = *v27;
    if (*v27 == WebCore::HTMLNames::dirAttr
      || *(_QWORD *)(v37 + 24) == *(_QWORD *)(WebCore::HTMLNames::dirAttr + 24)
      && *(_QWORD *)(v37 + 32) == *(_QWORD *)(WebCore::HTMLNames::dirAttr + 32))
    {
      break;
    }
    ++v36;
    v27 += 2;
    if (v28 == v36)
      goto LABEL_78;
  }
LABEL_79:
  WebCore::Element::setAttributeInternal(v18, v36, (WebCore::TreeScope *)&WebCore::HTMLNames::dirAttr, &v54, 0);
  v39 = v54;
  v54 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v38);
    else
      *(_DWORD *)v39 -= 2;
  }
  WTF::AtomStringImpl::add();
  v40 = v58;
  v54 = v58;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v41 = v58;
  v50 = v58;
  v49 = 0;
  v58 = 0;
  v59 = 0;
  WebCore::dispatchInputEvent(v18, (_DWORD **)&v54, 0, (_DWORD **)&v50, &v49, (uint64_t)&v58);
  v50 = 0;
  if (!v41)
  {
LABEL_85:
    if (v40)
      goto LABEL_86;
    goto LABEL_88;
  }
  if (*(_DWORD *)v41 != 2)
  {
    *(_DWORD *)v41 -= 2;
    goto LABEL_85;
  }
  WTF::StringImpl::destroy(v41, v42);
  if (v40)
  {
LABEL_86:
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v42);
    else
      *(_DWORD *)v40 -= 2;
  }
LABEL_88:
  result = WebCore::Document::updateStyleIfNeeded((WebCore::Document *)v4);
LABEL_89:
  if (*((_DWORD *)v18 + 6) == 2)
  {
    if ((*((_WORD *)v18 + 15) & 0x400) == 0)
      result = (uint64_t)WebCore::Node::removedLastRef(v18, v12);
  }
  else
  {
    *((_DWORD *)v18 + 6) -= 2;
  }
  if (v4)
  {
LABEL_92:
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v4, v12);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::Editor::baseWritingDirectionForSelectionStart(WebCore::Editor *this)
{
  unsigned __int8 *v1;
  int v2;
  void *v3;
  const WebCore::VisiblePosition *v4;
  WebCore::Node *v5;
  int v6;
  int v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  int *v11;
  int v12;
  int v13;
  unsigned __int8 v14;
  int v15;
  __int16 v17;
  WebCore::Node *v18;
  WebCore::Node *v19;
  WebCore::Node *v20;
  int v21;
  char v22;
  char v23;
  WebCore::Node *v24;
  int v25;
  char v26;
  char v27;

  v1 = *(unsigned __int8 **)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 3064);
  if (v1[153] == 2)
  {
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v1 + 120), (uint64_t)&v20);
    v23 = 1;
  }
  else
  {
    v2 = v1[152];
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v1 + 120), (uint64_t)&v20);
    v23 = 1;
    if (!v2)
    {
      v18 = v20;
      if (!v20)
        return 1;
      *((_DWORD *)v20 + 6) += 2;
      v24 = v18;
      v25 = v21;
      v26 = v22;
      v27 = 0;
      if (!WebCore::inSameLine((WebCore *)&v20, (const WebCore::VisiblePosition *)&v24, v4))
        v23 = 0;
      v19 = v24;
      v24 = 0;
      if (v19)
      {
        if (*((_DWORD *)v19 + 6) == 2)
        {
          if ((*((_WORD *)v19 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v19, v3);
        }
        else
        {
          *((_DWORD *)v19 + 6) -= 2;
        }
      }
    }
  }
  v5 = v20;
  if (!v20)
    return 1;
  v6 = *((_DWORD *)v20 + 6);
  *((_DWORD *)v20 + 6) = v6 + 2;
  v20 = 0;
  if (!v6)
  {
    if ((*((_WORD *)v5 + 15) & 0x400) != 0)
    {
      v6 = 2;
    }
    else
    {
      WebCore::Node::removedLastRef(v5, v3);
      v6 = *((_DWORD *)v5 + 6);
    }
  }
  *((_DWORD *)v5 + 6) = v6 + 2;
  v7 = WebCore::ScriptDisallowedScope::s_count++;
  v8 = *((_QWORD *)v5 + 8) & 0xFFFFFFFFFFFFLL;
  if (v8)
  {
    v9 = (int *)(v8 + 16);
    ++*(_DWORD *)((*((_QWORD *)v5 + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
    if ((*(_BYTE *)(v8 + 52) & 7) != 1)
    {
      v8 = (uint64_t)WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v8);
      if (v8)
      {
        ++*(_DWORD *)(v8 + 16);
        if (*v9)
        {
          --*v9;
          goto LABEL_10;
        }
      }
      else
      {
        v12 = *v9;
        if (*v9)
        {
          v14 = 1;
LABEL_17:
          *v9 = v12 - 1;
          v7 = WebCore::ScriptDisallowedScope::s_count - 1;
          v6 = *((_DWORD *)v5 + 6) - 2;
          goto LABEL_18;
        }
      }
      __break(0xC471u);
      JUMPOUT(0x195ACAB80);
    }
LABEL_10:
    v10 = v8;
    if ((*(_BYTE *)(v8 + 45) & 2) != 0)
      v10 = *(_QWORD *)(*(_QWORD *)(v8 + 32) + 8);
    v13 = *(_DWORD *)(v8 + 16);
    v11 = (int *)(v8 + 16);
    v12 = v13;
    if (!v13)
    {
      __break(0xC471u);
      JUMPOUT(0x195ACAB38);
    }
    if ((*(_BYTE *)(v10 + 123) & 4) != 0)
      v14 = 2;
    else
      v14 = 1;
    v9 = v11;
    goto LABEL_17;
  }
  v14 = 1;
LABEL_18:
  WebCore::ScriptDisallowedScope::s_count = v7;
  if (v6)
  {
    *((_DWORD *)v5 + 6) = v6;
  }
  else
  {
    v17 = *((_WORD *)v5 + 15);
    if ((v17 & 0x400) != 0)
      goto LABEL_28;
    WebCore::Node::removedLastRef(v5, v3);
    v6 = *((_DWORD *)v5 + 6);
  }
  v15 = v6 - 2;
  if (v15)
  {
    *((_DWORD *)v5 + 6) = v15;
    return v14;
  }
  v17 = *((_WORD *)v5 + 15);
LABEL_28:
  if ((v17 & 0x400) == 0)
    WebCore::Node::removedLastRef(v5, v3);
  return v14;
}

void WebCore::Editor::selectComposition(WebCore::Editor *this)
{
  uint64_t v1;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  char v8;
  char v9;
  WebCore::Node *v10;
  WebCore::Node *v11;
  int v12;
  int v13;
  WebCore::Node *v14;
  unsigned int v15;
  char v16;
  WebCore::Node *v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;
  int v30;
  char v31;
  uint64_t v32;
  int v33;
  char v34;
  uint64_t v35;
  int v36;
  char v37;
  __int16 v38;
  char v39;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    v3 = *(_QWORD *)(v1 + 80);
    if (v3)
      LODWORD(v3) = *(_DWORD *)(v3 + 4);
    v4 = *((_DWORD *)this + 11);
    v5 = v3 >= *((_DWORD *)this + 10) ? *((_DWORD *)this + 10) : v3;
    if (v4 >= v5)
    {
      v6 = v3 >= v4 ? *((_DWORD *)this + 11) : v3;
      if (v5 < v6)
      {
        v7 = *(_DWORD *)(v1 + 24);
        v20 = 0;
        v21 = 0;
        v22 = 0;
        v23 = 0;
        v24 = 0;
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v29 = 0;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 0;
        v36 = 0;
        v37 = 0;
        v38 = 1;
        v39 = 1;
        *(_DWORD *)(v1 + 24) = v7 + 6;
        v17 = (WebCore::Node *)v1;
        v18 = v5;
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 208))(v1) & 1) != 0)
        {
          v8 = 8;
        }
        else if (v5)
        {
          v8 = 10;
        }
        else
        {
          v8 = 9;
        }
        v19 = v8;
        *(_DWORD *)(v1 + 24) += 2;
        v14 = (WebCore::Node *)v1;
        v15 = v6;
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 208))(v1) & 1) != 0)
          v9 = 8;
        else
          v9 = 10;
        v16 = v9;
        WebCore::VisibleSelection::setWithoutValidation((WebCore::VisibleSelection *)&v20, (const WebCore::Position *)&v17, (const WebCore::Position *)&v14);
        v10 = v14;
        v14 = 0;
        if (v10)
        {
          if (*((_DWORD *)v10 + 6) == 2)
          {
            if ((*((_WORD *)v10 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v10);
          }
          else
          {
            *((_DWORD *)v10 + 6) -= 2;
          }
        }
        v11 = v17;
        v17 = 0;
        if (v11)
        {
          if (*((_DWORD *)v11 + 6) == 2)
          {
            if ((*((_WORD *)v11 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v11);
          }
          else
          {
            *((_DWORD *)v11 + 6) -= 2;
          }
        }
        WebCore::FrameSelection::setSelection(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 3064), (uint64_t)&v20, 0, 0, 0, 0, 0);
        WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v20);
        v12 = *(_DWORD *)(v1 + 24) - 2;
        if (*(_DWORD *)(v1 + 24) == 2)
        {
          if ((*(_WORD *)(v1 + 30) & 0x400) != 0)
          {
LABEL_29:
            if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v1);
            return;
          }
          WebCore::Node::removedLastRef((WebCore::Node *)v1);
          v12 = *(_DWORD *)(v1 + 24);
        }
        else
        {
          *(_DWORD *)(v1 + 24) = v12;
        }
        v13 = v12 - 2;
        if (v13)
        {
          *(_DWORD *)(v1 + 24) = v13;
          return;
        }
        goto LABEL_29;
      }
    }
  }
}

uint64_t WebCore::Editor::compositionRange@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *(_QWORD *)(this + 32);
  if (!v2)
    goto LABEL_12;
  v3 = *(_QWORD *)(v2 + 80);
  if (v3)
    v4 = *(_DWORD *)(v3 + 4);
  else
    v4 = 0;
  v5 = *(_DWORD *)(this + 40);
  v6 = *(_DWORD *)(this + 44);
  if (v4 < v5)
    v5 = v4;
  if (v6 < v5)
    goto LABEL_11;
  if (v4 >= v6)
    v4 = *(_DWORD *)(this + 44);
  if (v5 >= v4)
  {
LABEL_11:
    LOBYTE(v2) = 0;
LABEL_12:
    *(_BYTE *)a2 = 0;
    goto LABEL_13;
  }
  *(_DWORD *)(v2 + 24) += 4;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v2;
  *(_DWORD *)(a2 + 24) = v4;
  LOBYTE(v2) = 1;
LABEL_13:
  *(_BYTE *)(a2 + 32) = v2;
  return this;
}

uint64_t WebCore::Editor::nodeBeforeWritingSuggestions(WebCore::Editor *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v13;
  BOOL v15;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  v2 = *(_DWORD *)(v1 + 24);
  *(_DWORD *)(v1 + 24) = v2 + 2;
  v3 = *(_QWORD *)(v1 + 3064);
  if (*(_BYTE *)(v3 + 153) != 1)
  {
    v4 = 0;
    goto LABEL_3;
  }
  v6 = *(_QWORD *)(v3 + 136);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 + 24) + 2;
    *(_DWORD *)(v6 + 24) = v7;
    v8 = *(_BYTE *)(v3 + 148) & 7;
    if (v8 <= 4)
    {
      v9 = *(_DWORD *)(v3 + 144);
      if (((1 << v8) & 0x19) != 0)
      {
        v10 = v6;
        goto LABEL_10;
      }
      v10 = *(_QWORD *)(v6 + 32);
      if (v10)
      {
        v7 = *(_DWORD *)(v10 + 24);
LABEL_10:
        *(_DWORD *)(v10 + 24) = v7 + 4;
        v11 = v7 + 2;
        if ((*(_WORD *)(v10 + 28) & 2) != 0)
        {
          if (v11)
          {
            *(_DWORD *)(v10 + 24) = v11;
            v4 = v10;
          }
          else
          {
            v4 = v10;
            if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v10);
              v4 = v10;
            }
          }
          goto LABEL_16;
        }
        if (v11)
        {
          *(_DWORD *)(v10 + 24) = v11;
        }
        else if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v10);
        }
        switch(v8)
        {
          case 4u:
            if ((*(_WORD *)(v6 + 28) & 4) != 0)
            {
              v4 = *(_QWORD *)(v6 + 88);
              break;
            }
            goto LABEL_26;
          case 0u:
            if (v9 && (*(_WORD *)(v6 + 28) & 4) != 0)
            {
              v4 = *(_QWORD *)(v6 + 80);
              if (v9 != 1 && v4 != 0)
              {
                v13 = v9 - 2;
                do
                {
                  v4 = *(_QWORD *)(v4 + 56);
                  v15 = v13-- != 0;
                }
                while (v4 && v15);
              }
              break;
            }
            goto LABEL_26;
          case 1u:
            v4 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFLL;
            break;
          case 2u:
            v4 = v6;
            break;
          default:
LABEL_26:
            v4 = 0;
            break;
        }
LABEL_16:
        if (*(_DWORD *)(v10 + 24) == 2)
        {
          if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v10);
        }
        else
        {
          *(_DWORD *)(v10 + 24) -= 2;
        }
        goto LABEL_18;
      }
    }
    v4 = 0;
LABEL_18:
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
    goto LABEL_20;
  }
  v4 = 0;
LABEL_20:
  v2 = *(_DWORD *)(v1 + 24) - 2;
LABEL_3:
  if (v2)
  {
    *(_DWORD *)(v1 + 24) = v2;
  }
  else if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v1);
  }
  return v4;
}

WTF::StringImpl *WebCore::Editor::confirmComposition(WTF::StringImpl *this)
{
  uint64_t v1;
  WebCore::Editor *v2;
  WTF::StringImpl *v3;
  int v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    v2 = this;
    v3 = *(WTF::StringImpl **)(v1 + 80);
    if (v3)
    {
      v4 = *((_DWORD *)v2 + 10);
      if (v4 || *((_DWORD *)v3 + 1) > *((_DWORD *)v2 + 11))
      {
        WTF::StringImpl::substring(v3);
      }
      else
      {
        *(_DWORD *)v3 += 2;
        v6 = v3;
      }
    }
    else
    {
      v6 = 0;
    }
    WebCore::Editor::setComposition(v2, (WebCore::Document *)&v6, 0);
    this = v6;
    v6 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v5);
      else
        *(_DWORD *)this -= 2;
    }
  }
  return this;
}

void WebCore::Editor::setComposition(WebCore::Editor *a1, WebCore::Document *a2, int a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  void *v12;
  uint64_t v13;
  WebCore::Node *v14;
  WebCore *v15;
  WebCore::Node *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF *v30;
  WebCore::Editor *v31;
  WebCore::Editor *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  WebCore::AXObjectCache *v43;
  uint64_t v44;
  WebCore::AXObjectCache *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WebCore::Node *v54;
  uint64_t v55;
  uint64_t v56;

  v6 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 8);
  *(_DWORD *)(v6 + 24) += 4;
  v55 = v6;
  WebCore::UserTypingGestureIndicator::UserTypingGestureIndicator((WebCore::UserTypingGestureIndicator *)&v56, *(WebCore::LocalFrame **)(*(_QWORD *)(v6 + 528) + 8));
  v8 = *(_QWORD *)(v6 + 3056);
  if (!v8)
  {
    v31 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v31, (WebCore::Document *)v6);
    v32 = *(WebCore::Editor **)(v6 + 3056);
    *(_QWORD *)(v6 + 3056) = v31;
    if (v32)
    {
      WebCore::Editor::~Editor(v32, v7);
      if (*(_DWORD *)v33)
      {
        *(_QWORD *)(v33 + 496) = 0;
        *(_OWORD *)(v33 + 464) = 0u;
        *(_OWORD *)(v33 + 480) = 0u;
        *(_OWORD *)(v33 + 432) = 0u;
        *(_OWORD *)(v33 + 448) = 0u;
        *(_OWORD *)(v33 + 400) = 0u;
        *(_OWORD *)(v33 + 416) = 0u;
        *(_OWORD *)(v33 + 368) = 0u;
        *(_OWORD *)(v33 + 384) = 0u;
        *(_OWORD *)(v33 + 336) = 0u;
        *(_OWORD *)(v33 + 352) = 0u;
        *(_OWORD *)(v33 + 304) = 0u;
        *(_OWORD *)(v33 + 320) = 0u;
        *(_OWORD *)(v33 + 272) = 0u;
        *(_OWORD *)(v33 + 288) = 0u;
        *(_OWORD *)(v33 + 240) = 0u;
        *(_OWORD *)(v33 + 256) = 0u;
        *(_OWORD *)(v33 + 208) = 0u;
        *(_OWORD *)(v33 + 224) = 0u;
        *(_OWORD *)(v33 + 176) = 0u;
        *(_OWORD *)(v33 + 192) = 0u;
        *(_OWORD *)(v33 + 144) = 0u;
        *(_OWORD *)(v33 + 160) = 0u;
        *(_OWORD *)(v33 + 112) = 0u;
        *(_OWORD *)(v33 + 128) = 0u;
        *(_OWORD *)(v33 + 80) = 0u;
        *(_OWORD *)(v33 + 96) = 0u;
        *(_OWORD *)(v33 + 48) = 0u;
        *(_OWORD *)(v33 + 64) = 0u;
        *(_OWORD *)(v33 + 16) = 0u;
        *(_OWORD *)(v33 + 32) = 0u;
        *(_OWORD *)v33 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v33, v7);
      }
    }
    v8 = *(_QWORD *)(v6 + 3056);
  }
  if (!*(_BYTE *)(v8 + 88))
    *(_BYTE *)(v8 + 88) = 1;
  if (a3 != 1)
    WebCore::Editor::selectComposition(a1);
  v9 = *((_QWORD *)a1 + 4);
  if (v9)
  {
    v10 = *(_DWORD *)(v9 + 24);
    *(_DWORD *)(v9 + 24) = v10 + 2;
    *((_QWORD *)a1 + 4) = 0;
    if (v10)
    {
      *(_DWORD *)(v9 + 24) = v10;
    }
    else if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v9);
    }
  }
  else
  {
    *((_QWORD *)a1 + 4) = 0;
  }
  WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear((uint64_t)a1 + 48, v7);
  WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear((uint64_t)a1 + 64, v11);
  v13 = *((_QWORD *)a1 + 10);
  if (v13)
  {
    *((_QWORD *)a1 + 10) = 0;
    v27 = *(unsigned int *)(v13 - 4);
    if ((_DWORD)v27)
    {
      v28 = v13;
      do
      {
        v29 = *(WTF::StringImpl **)v28;
        if (*(_QWORD *)v28 != -1)
        {
          v30 = *(WTF **)(v28 + 8);
          if (v30)
          {
            *(_QWORD *)(v28 + 8) = 0;
            *(_DWORD *)(v28 + 16) = 0;
            WTF::fastFree(v30, v12);
            v29 = *(WTF::StringImpl **)v28;
          }
          *(_QWORD *)v28 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v12);
            else
              *(_DWORD *)v29 -= 2;
          }
        }
        v28 += 24;
        --v27;
      }
      while (v27);
    }
    WTF::fastFree((WTF *)(v13 - 16), v12);
  }
  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    if (*(_BYTE *)(v6 + 3362) || *(_BYTE *)(v6 + 3405))
    {
      v47 = *(_QWORD *)(v6 + 528);
      i = v6;
      if (v47)
      {
        v48 = *(_QWORD *)(v47 + 8);
        i = v6;
        if (v48)
        {
          v49 = *(_QWORD *)(v48 + 120);
          i = v6;
          if (v49)
          {
            v50 = *(_QWORD *)(v49 + 8);
            for (i = v6; v50; v50 = *(_QWORD *)(v53 + 8))
            {
              i = *(_QWORD *)(*(_QWORD *)(v50 + 40) + 8);
              v51 = *(_QWORD *)(i + 528);
              if (!v51)
                break;
              v52 = *(_QWORD *)(v51 + 8);
              if (!v52)
                break;
              v53 = *(_QWORD *)(v52 + 120);
              if (!v53)
                break;
            }
          }
        }
      }
    }
    else
    {
      v34 = *(_QWORD *)(v6 + 528);
      i = v6;
      if (v34)
      {
        v36 = *(_QWORD *)(v34 + 8);
        i = v6;
        if (v36)
        {
          v37 = *(_QWORD *)(*(_QWORD *)(v36 + 128) + 8);
          v38 = v37 && *(_BYTE *)(v37 + 144) == 0;
          i = v6;
          if (v38)
          {
            v39 = *(_QWORD *)(v37 + 296);
            i = v6;
            if (v39)
              i = v39;
          }
        }
      }
    }
    v40 = *(_QWORD *)(i + 1488);
    if (v40)
    {
      v41 = *(_DWORD *)(v40 + 8) + 1;
      *(_DWORD *)(v40 + 8) = v41;
      if (v9)
      {
        v42 = WebCore::AXObjectCache::getOrCreate(v40, v9, 0);
        if (v42)
        {
          v43 = (WebCore::AXObjectCache *)v42;
          v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 2960))(v42);
          if (v44)
            v45 = (WebCore::AXObjectCache *)v44;
          else
            v45 = v43;
          v46 = *(_QWORD *)(*(_QWORD *)(v9 + 40) + 8);
          *(_DWORD *)(v46 + 24) += 2;
          WebCore::AXObjectCache::postNotification((WTF **)v40, v45, v46, 55, 0);
          if (*(_DWORD *)(v46 + 24) == 2)
          {
            if ((*(_WORD *)(v46 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v46);
          }
          else
          {
            *(_DWORD *)(v46 + 24) -= 2;
          }
        }
        v41 = *(_DWORD *)(v40 + 8);
      }
      if (!v41)
      {
        __break(0xC471u);
        JUMPOUT(0x195ACB6D4);
      }
      *(_DWORD *)(v40 + 8) = v41 - 1;
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(v6 + 3064) + 153))
  {
    if (a3 != 1)
    {
      *(_DWORD *)(v6 + 24) += 2;
      v54 = (WebCore::Node *)v6;
      WebCore::TypingCommand::deleteSelection((uint64_t *)&v54, 0, 1);
      v14 = v54;
      v54 = 0;
      if (v14)
      {
        if (*((_DWORD *)v14 + 6) == 2)
        {
          if ((*((_WORD *)v14 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v14);
        }
        else
        {
          *((_DWORD *)v14 + 6) -= 2;
        }
      }
    }
    v15 = (WebCore *)WebCore::EventHandler::handleTextInputEvent(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 2) + 8) + 528) + 8) + 640), a2, 0, 3);
    v16 = *(WebCore::Node **)(v6 + 1248);
    if (v16)
    {
      *((_DWORD *)v16 + 6) += 2;
      v17 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v17 || (v18 = *(_QWORD *)(v17 + 96)) == 0)
        v18 = WebCore::threadGlobalDataSlow(v15);
      v19 = *(_QWORD *)(v18 + 40);
      if (!v19)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v18);
        v19 = *(_QWORD *)(v18 + 40);
      }
      v20 = *(_QWORD *)(v6 + 528);
      if (v20 && (v21 = *(_QWORD *)(v20 + 8)) != 0)
      {
        v22 = *(_DWORD **)(v21 + 112);
        if (v22)
          ++*v22;
      }
      else
      {
        v22 = 0;
      }
      v23 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v23);
      *(_QWORD *)(v23 + 8) = 0;
      *(_DWORD *)(v23 + 16) = 1;
      *(_DWORD *)(v23 + 20) = *(_DWORD *)(v23 + 20) & 0xFFC00000 | 0x1B820E | (*(_QWORD *)(v19 + 432) != 0);
      v25 = *(_DWORD **)(v19 + 432);
      if (v25)
        *v25 += 2;
      *(_QWORD *)(v23 + 24) = v25;
      *(_QWORD *)(v23 + 32) = 0;
      *(_QWORD *)(v23 + 40) = 0;
      *(_QWORD *)(v23 + 48) = 0;
      *(_QWORD *)(v23 + 56) = v24;
      *(_QWORD *)(v23 + 64) = 0;
      *(_QWORD *)(v23 + 72) = v22;
      *(_DWORD *)(v23 + 80) = 0;
      *(_QWORD *)v23 = off_1E33A1338;
      v26 = *(_DWORD **)a2;
      if (*(_QWORD *)a2)
        *v26 += 2;
      *(_QWORD *)(v23 + 88) = v26;
      (*(void (**)(WebCore::Node *, uint64_t))(*(_QWORD *)v16 + 48))(v16, v23);
      if (*(_DWORD *)(v23 + 16) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      else
        --*(_DWORD *)(v23 + 16);
      if (*((_DWORD *)v16 + 6) == 2)
      {
        if ((*((_WORD *)v16 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v16);
      }
      else
      {
        *((_DWORD *)v16 + 6) -= 2;
      }
    }
    if (a3 == 1)
      WebCore::TypingCommand::closeTyping((WebCore::TypingCommand *)v6, (WebCore::Document *)v12);
  }
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  WebCore::SetCompositionScope::~SetCompositionScope((WebCore::SetCompositionScope *)&v55, v12);
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
}

uint64_t WebCore::Editor::cancelCompositionIfSelectionIsInvalid(WebCore::Editor *this)
{
  uint64_t (*v1)();
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;

  if (*((_QWORD *)this + 4))
    v1 = WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>::unspecifiedBoolTypeInstance;
  else
    v1 = 0;
  if (!v1 || *((_BYTE *)this + 88) || (WebCore::Editor::getCompositionSelection(this, &v6, &v5) & 1) != 0)
    return 0;
  v3 = 1;
  if (*((_QWORD *)this + 4))
    WebCore::Editor::setComposition(this, MEMORY[0x1E0CBF738], 1);
  return v3;
}

void WebCore::Editor::cancelComposition(WebCore::Editor *this)
{
  if (*((_QWORD *)this + 4))
    WebCore::Editor::setComposition(this, MEMORY[0x1E0CBF738], 1);
}

uint64_t WebCore::Editor::getCompositionSelection(WebCore::Editor *this, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  unsigned int v24;
  char v25;

  v3 = *((_QWORD *)this + 4);
  if (!v3)
    return 0;
  v7 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  *(_DWORD *)(v7 + 24) += 2;
  v8 = *(_QWORD *)(v7 + 3064);
  v9 = *(_QWORD *)(v8 + 120);
  if (v9)
    *(_DWORD *)(v9 + 24) += 2;
  v23 = v9;
  v24 = *(_DWORD *)(v8 + 128);
  v25 = *(_BYTE *)(v8 + 132);
  if (v3 != v9)
  {
    v10 = 0;
    goto LABEL_25;
  }
  v11 = *(_QWORD *)(v8 + 136);
  if (v11)
    *(_DWORD *)(v11 + 24) += 2;
  v20 = v11;
  v21 = *(_DWORD *)(v8 + 144);
  v22 = *(_BYTE *)(v8 + 148);
  if (v3 != v11
    || ((v12 = v25, (v25 & 8) == 0) && ((v25 & 7) == 4 || (v25 & 7) == 2)
      ? (v13 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)&v23))
      : (v13 = v24),
        v13 < *((_DWORD *)this + 10)
     || ((v22 & 8) == 0 && ((v14 = v22 & 7, v14 == 4) || v14 == 2)
       ? (v15 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)&v20))
       : (v15 = v21),
         v15 > *((_DWORD *)this + 11))))
  {
    v10 = 0;
    if (!v11)
      goto LABEL_25;
LABEL_23:
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
    goto LABEL_25;
  }
  if ((v12 & 8) != 0)
  {
    v19 = v24;
    *a2 = v24 - *((_DWORD *)this + 10);
  }
  else
  {
    v17 = v12 & 7;
    if (v17 == 4 || v17 == 2)
      v18 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)&v23);
    else
      v18 = v24;
    *a2 = v18 - *((_DWORD *)this + 10);
    if (v17 == 4 || v17 == 2)
      v19 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)&v23);
    else
      v19 = v24;
  }
  *a3 = v19 - *((_DWORD *)this + 11);
  v10 = 1;
  if (v11)
    goto LABEL_23;
LABEL_25:
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  return v10;
}

void WebCore::Editor::confirmComposition(WebCore::Editor *this, const WTF::String *a2)
{
  WebCore::Editor::setComposition(this, a2, 0);
}

void WebCore::Editor::closeTyping(WebCore::Editor *this, WebCore::Document *a2)
{
  WebCore::TypingCommand::closeTyping(*(WebCore::TypingCommand **)(*((_QWORD *)this + 2) + 8), a2);
}

uint64_t WebCore::Editor::setWritingSuggestionRenderer(WebCore::Editor *this, WebCore::RenderInline *a2)
{
  uint64_t result;
  WTF *v4;
  WTF *v6;

  result = *((_QWORD *)a2 + 1);
  if (result)
    goto LABEL_2;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = a2;
  v6 = (WTF *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = result;
  if (!v6)
    goto LABEL_2;
  if (*(_DWORD *)v6 != 1)
  {
    --*(_DWORD *)v6;
LABEL_2:
    ++*(_DWORD *)result;
    goto LABEL_3;
  }
  WTF::fastFree(v6, a2);
  result = *((_QWORD *)a2 + 1);
  if (result)
    goto LABEL_2;
LABEL_3:
  v4 = (WTF *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = result;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      return WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  return result;
}

unsigned int *WebCore::Editor::setWritingSuggestion(uint64_t a1, WTF::StringImpl **a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int *result;
  void *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF *v22;
  WebCore::Node *v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  _DWORD *v27;
  WTF::StringImpl *v28;
  char v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  _DWORD *v33;
  WTF::StringImpl *v34;
  WebCore::Node *v35;
  int v36;
  WebCore::Node *v37;
  char v38;
  WTF::StringImpl *v39;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  *(_DWORD *)(v6 + 24) += 2;
  WebCore::Document::updateStyleIfNeeded((WebCore::Document *)v6);
  result = (unsigned int *)WebCore::Editor::nodeBeforeWritingSuggestions((WebCore::Editor *)a1);
  if (!result)
    goto LABEL_53;
  v9 = result[6];
  result[6] = v9 + 2;
  v10 = *((_QWORD *)result + 4);
  if (v10)
  {
    if ((*(_WORD *)(v10 + 28) & 8) != 0)
      v11 = *((_QWORD *)result + 4);
    else
      v11 = 0;
    if (v9)
      goto LABEL_7;
LABEL_101:
    if ((*((_WORD *)result + 15) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)result, v8);
    goto LABEL_8;
  }
  v11 = 0;
  if (!v9)
    goto LABEL_101;
LABEL_7:
  result[6] = v9;
LABEL_8:
  if (!v11)
    goto LABEL_53;
  *(_DWORD *)(v11 + 24) += 2;
  result = (unsigned int *)WebCore::Node::computeEditability(v11, 0, 1);
  if (!(_DWORD)result)
    goto LABEL_51;
  result = (unsigned int *)WebCore::VisibleSelection::firstRange((WebCore::Node *)(*(_QWORD *)(v6 + 3064) + 56), &v35);
  if (!v38)
    goto LABEL_51;
  v36 = 0;
  *(_BYTE *)(a1 + 474) = 1;
  v12 = *a2;
  if (!*a2)
    goto LABEL_107;
  v13 = *a3;
  if (*((_DWORD *)v12 + 1) > *a3)
  {
    WTF::StringImpl::substring(*a2);
    v12 = v39;
    v13 = *a3;
  }
  else
  {
    *(_DWORD *)v12 += 2;
  }
  v14 = *a2;
  if (v14)
  {
    if ((_DWORD)v13 || (*((_DWORD *)v14 + 1) & 0x80000000) != 0)
    {
      WTF::StringImpl::substring(v14);
      v14 = v39;
    }
    else
    {
      *(_DWORD *)v14 += 2;
    }
  }
  while (1)
  {
    v15 = *(_QWORD *)(a1 + 176);
    v16 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
    if (!v15)
    {
      v17 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
      if (!*MEMORY[0x1E0CBF738])
        goto LABEL_21;
LABEL_20:
      *(_DWORD *)v17 += 2;
      goto LABEL_21;
    }
    v17 = *(WTF::StringImpl **)(v15 + 8);
    if (v17)
      goto LABEL_20;
LABEL_21:
    if (!v12 || (v24 = *((_DWORD *)v12 + 1)) == 0)
    {
      v18 = *v16;
      if (v18)
        *(_DWORD *)v18 += 2;
      goto LABEL_24;
    }
    if (v17 && *((_DWORD *)v17 + 1) || v24 < 0)
    {
      WTF::StringImpl::substring(v12);
      v18 = v39;
LABEL_24:
      v34 = v18;
      goto LABEL_25;
    }
    *(_DWORD *)v12 += 2;
    v34 = v12;
LABEL_25:
    if (!v38)
      goto LABEL_106;
    v19 = WebCore::characterCount((int *)&v35, 0);
    v21 = v19;
    if (v17 && *((_DWORD *)v17 + 1))
    {
      v25 = v34;
      if (v34)
        v25 = *((_DWORD *)v34 + 1);
      v21 = v19 + v25;
    }
    if (!v14 || !*((_DWORD *)v14 + 1))
    {
      v22 = *(WTF **)(a1 + 176);
      *(_QWORD *)(a1 + 176) = 0;
      if (!v22)
        goto LABEL_30;
      goto LABEL_29;
    }
    v26 = *(_QWORD *)(a1 + 176);
    if (v26)
      break;
    if (v38)
    {
      WebCore::plainText(&v35, 0, 0, (const WTF::String *)&v39);
      if (v39)
      {
        WTF::StringImpl::replace();
        v31 = v39;
        v39 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, v30);
          else
            *(_DWORD *)v31 -= 2;
        }
      }
      else
      {
        v33 = 0;
      }
      v27 = v33;
      v28 = v14;
      goto LABEL_91;
    }
LABEL_106:
    __break(1u);
LABEL_107:
    v14 = 0;
  }
  v27 = *(_DWORD **)(v26 + 16);
  if (v27)
    *v27 += 2;
  v28 = *(WTF::StringImpl **)(v26 + 24);
  if (v28)
LABEL_91:
    *(_DWORD *)v28 += 2;
  v32 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v32 = v14;
  *(_QWORD *)(v32 + 8) = v12;
  *(_QWORD *)(v32 + 16) = v27;
  *(_QWORD *)(v32 + 24) = v28;
  *(_QWORD *)(v32 + 32) = v21;
  *(_BYTE *)(v32 + 40) = 0;
  v22 = *(WTF **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v32;
  v14 = 0;
  v12 = 0;
  if (v22)
LABEL_29:
    std::default_delete<WebCore::WritingSuggestionData>::operator()[abi:sn180100](v22, v20);
LABEL_30:
  if (v17 && *((_DWORD *)v17 + 1))
  {
    v29 = *(_BYTE *)(a1 + 192);
    *(_BYTE *)(a1 + 192) = 1;
    WebCore::EventHandler::handleTextInputEvent(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 528) + 8) + 640), (WebCore::Document *)&v34, 0, 0);
    *(_BYTE *)(a1 + 192) = v29;
  }
  else
  {
    WebCore::Node::invalidateStyle(v11, 4u, 2);
  }
  result = (unsigned int *)v34;
  v34 = 0;
  if (!result)
  {
LABEL_35:
    if (!v17)
      goto LABEL_38;
    goto LABEL_36;
  }
  if (*result != 2)
  {
    *result -= 2;
    goto LABEL_35;
  }
  result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v8);
  if (v17)
  {
LABEL_36:
    if (*(_DWORD *)v17 == 2)
      result = (unsigned int *)WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v8);
    else
      *(_DWORD *)v17 -= 2;
  }
LABEL_38:
  if (!v14)
    goto LABEL_41;
  if (*(_DWORD *)v14 == 2)
  {
    result = (unsigned int *)WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v8);
    if (v12)
      goto LABEL_42;
  }
  else
  {
    *(_DWORD *)v14 -= 2;
LABEL_41:
    if (v12)
    {
LABEL_42:
      if (*(_DWORD *)v12 == 2)
        result = (unsigned int *)WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  if (v38)
  {
    v23 = v37;
    v37 = 0;
    if (v23)
    {
      if (*((_DWORD *)v23 + 6) == 2)
      {
        if ((*((_WORD *)v23 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v23, v8);
      }
      else
      {
        *((_DWORD *)v23 + 6) -= 2;
      }
    }
    result = (unsigned int *)v35;
    v35 = 0;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)result, v8);
      }
      else
      {
        result[6] -= 2;
      }
    }
  }
LABEL_51:
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v11, v8);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
LABEL_53:
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v6, v8);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  return result;
}

void WebCore::Editor::setComposition(uint64_t a1, WebCore *a2, uint64_t a3, int32x2_t **a4, WTF::StringImpl ***a5, unsigned int a6, unsigned int a7)
{
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  __int16 v18;
  WebCore *v19;
  void *v20;
  WebCore::Node *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  void *v32;
  unint64_t StatusReg;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  WTF::StringImpl *v43;
  WebCore *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  uint64_t v51;
  _DWORD *v52;
  _DWORD *v53;
  unsigned int *Ref;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  _DWORD *v64;
  uint64_t v65;
  int v66;
  int32x2_t **v67;
  int32x2_t **v68;
  void *v69;
  void *v70;
  uint64_t v71;
  void *v72;
  void *v74;
  WebCore *v75;
  uint64_t v76;
  WebCore *v77;
  int v78;
  uint64_t v79;
  void *v80;
  WebCore *v81;
  void *v82;
  uint64_t v83;
  WebCore::Node *v84;
  WebCore::Node *v85;
  int v86;
  int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  WebCore::Node *v99;
  uint64_t v100;
  WTF *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  int32x2_t *v108;
  WTF *v109;
  int32x2_t *v110;
  int32x2_t v111;
  unint64_t v112;
  int32x2_t v113;
  int32x2_t v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int v120;
  _BOOL4 v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int32x2_t *v125;
  uint64_t v126;
  int32x2_t *v127;
  int32x2_t *v128;
  int32x2_t v129;
  int32x2_t v130;
  unsigned int *v131;
  unsigned int v132;
  int32x2_t v133;
  int32x2_t *v134;
  uint64_t v135;
  unsigned int v136;
  int32x2_t **v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int *v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int *v146;
  unsigned int v147;
  unsigned int v148;
  WTF::StringImpl ***v149;
  WebCore::Node *v150;
  uint64_t v151;
  int32x2_t *v152;
  unsigned int v153;
  int v154;
  uint64_t v155;
  WTF *v156;
  uint64_t v157;
  int32x2_t *v158;
  int32x2_t v159;
  int32x2_t v160;
  int32x2_t v161;
  unsigned int *v162;
  unsigned int v163;
  unsigned int v164;
  int32x2_t *v165;
  int32x2_t *v166;
  int32x2_t *v167;
  unint64_t v168;
  int32x2_t v169;
  int32x2_t v171;
  unsigned int *v172;
  unsigned int v173;
  int32x2_t v174;
  char v175;
  int32x2_t v176;
  unint64_t v177;
  int32x2_t v178;
  int32x2_t v179;
  unsigned int *v180;
  unsigned int v181;
  int32x2_t v182;
  char v183;
  int32x2_t v184;
  unsigned int *v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int *v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int *v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int *v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int *v197;
  unsigned int v198;
  unsigned int *v199;
  unsigned int v200;
  _BOOL4 v201;
  unint64_t v202;
  _BOOL4 v203;
  unint64_t v204;
  int32x2_t **v205;
  unsigned int v206;
  int32x2_t *v207;
  int32x2_t *v208;
  int32x2_t *v209;
  int32x2_t v210;
  int32x2_t v211;
  unsigned int *v212;
  unsigned int v213;
  unsigned int *v214;
  unsigned int v215;
  int32x2_t *v216;
  uint64_t v217;
  uint64_t v218;
  unsigned int v219;
  unsigned int v220;
  unint64_t v221;
  double v222;
  double v223;
  double v224;
  _DWORD *v225;
  unsigned int v226;
  _DWORD *v227;
  WTF::StringImpl **v228;
  uint64_t v229;
  WTF::StringImpl **v230;
  WTF::StringImpl **v231;
  uint64_t v232;
  WTF::StringImpl **v233;
  int v234;
  unsigned int v235;
  int v236;
  int v237;
  unsigned int v238;
  WTF::StringImpl **v239;
  WTF::StringImpl *v240;
  WTF::StringImpl **v241;
  uint64_t v242;
  uint64_t v243;
  _DWORD *v244;
  _DWORD *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  WTF::StringImpl *v249;
  WTF *v250;
  WebCore::Editor *v251;
  void *v252;
  WebCore::Editor *v253;
  uint64_t v254;
  void *v255;
  uint64_t v256;
  uint64_t v257;
  WTF::StringImpl *v258;
  WTF *v259;
  _DWORD *i;
  uint64_t v261;
  _QWORD *v262;
  uint64_t v263;
  _DWORD *v264;
  uint64_t v265;
  unsigned int v266;
  unsigned int v267;
  int v268;
  WebCore::Node *v269;
  uint64_t v270;
  unsigned int v271;
  WebCore::Node *v272;
  WebCore::Node *v273;
  int v274;
  int v275;
  uint64_t v276;
  uint64_t j;
  uint64_t v278;
  uint64_t v279;
  BOOL v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unsigned int v285;
  void *v286;
  int v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  WebCore::Node *v295;
  unsigned int v296;
  unsigned int v297;
  unsigned int v298;
  WebCore::Node *v299;
  unsigned int v300;
  WTF::StringImpl ***v301;
  unsigned int v302;
  int32x2_t **v303;
  WebCore *v304;
  uint64_t v305;
  WTF *v306;
  _DWORD *v307;
  WebCore::Node *v308[2];
  WebCore::Node *v309;
  unsigned int v310;
  char v311;
  WebCore::Node *v312;
  unsigned int v313;
  char v314;
  WebCore::Node *v315;
  unsigned int v316;
  char v317;
  WTF::StringImpl *v318;
  uint64_t v319;
  uint64_t v320;
  WebCore *v321[2];
  WebCore *v322;
  int v323;
  char v324;
  uint64_t v325;
  int v326;
  char v327;
  uint64_t v328;
  int v329;
  char v330;
  uint64_t v331;
  int v332;
  char v333;
  uint64_t v334;
  int v335;
  char v336;
  __int16 v337;
  char v338;

  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  *(_DWORD *)(v14 + 24) += 4;
  v319 = v14;
  WebCore::UserTypingGestureIndicator::UserTypingGestureIndicator((WebCore::UserTypingGestureIndicator *)&v320, *(WebCore::LocalFrame **)(*(_QWORD *)(v14 + 528) + 8));
  v15 = *(_QWORD *)(v14 + 3056);
  if (!v15)
  {
    v251 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v251, (WebCore::Document *)v14);
    v253 = *(WebCore::Editor **)(v14 + 3056);
    *(_QWORD *)(v14 + 3056) = v251;
    if (v253)
    {
      WebCore::Editor::~Editor(v253, v252);
      if (*(_DWORD *)v254)
      {
        *(_QWORD *)(v254 + 496) = 0;
        *(_OWORD *)(v254 + 464) = 0u;
        *(_OWORD *)(v254 + 480) = 0u;
        *(_OWORD *)(v254 + 432) = 0u;
        *(_OWORD *)(v254 + 448) = 0u;
        *(_OWORD *)(v254 + 400) = 0u;
        *(_OWORD *)(v254 + 416) = 0u;
        *(_OWORD *)(v254 + 368) = 0u;
        *(_OWORD *)(v254 + 384) = 0u;
        *(_OWORD *)(v254 + 336) = 0u;
        *(_OWORD *)(v254 + 352) = 0u;
        *(_OWORD *)(v254 + 304) = 0u;
        *(_OWORD *)(v254 + 320) = 0u;
        *(_OWORD *)(v254 + 272) = 0u;
        *(_OWORD *)(v254 + 288) = 0u;
        *(_OWORD *)(v254 + 240) = 0u;
        *(_OWORD *)(v254 + 256) = 0u;
        *(_OWORD *)(v254 + 208) = 0u;
        *(_OWORD *)(v254 + 224) = 0u;
        *(_OWORD *)(v254 + 176) = 0u;
        *(_OWORD *)(v254 + 192) = 0u;
        *(_OWORD *)(v254 + 144) = 0u;
        *(_OWORD *)(v254 + 160) = 0u;
        *(_OWORD *)(v254 + 112) = 0u;
        *(_OWORD *)(v254 + 128) = 0u;
        *(_OWORD *)(v254 + 80) = 0u;
        *(_OWORD *)(v254 + 96) = 0u;
        *(_OWORD *)(v254 + 48) = 0u;
        *(_OWORD *)(v254 + 64) = 0u;
        *(_OWORD *)(v254 + 16) = 0u;
        *(_OWORD *)(v254 + 32) = 0u;
        *(_OWORD *)v254 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v254, v255);
      }
    }
    v15 = *(_QWORD *)(v14 + 3056);
  }
  if (!*(_BYTE *)(v15 + 88))
    *(_BYTE *)(v15 + 88) = 1;
  WebCore::Document::updateStyleIfNeeded((WebCore::Document *)v14);
  WebCore::Editor::selectComposition((WebCore::Editor *)a1);
  if (!*(_BYTE *)(*(_QWORD *)(v14 + 3064) + 153))
  {
    WebCore::SetCompositionScope::~SetCompositionScope((WebCore::SetCompositionScope *)&v319, v16);
LABEL_98:
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v14, v32);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
    return;
  }
  v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 688);
  if (!v17)
    v17 = WebCore::Document::ensureQuirks(*(WebCore::Document **)(*(_QWORD *)(a1 + 16) + 8));
  if (*(_BYTE *)(v17 + 66))
    v18 = 512;
  else
    v18 = 2560;
  WebCore::Editor::selectedText(a1, v18, &v318);
  if (*(_QWORD *)a2
    && a6 < a7
    && *(_DWORD *)(*(_QWORD *)a2 + 4)
    && !(*(_QWORD *)(a1 + 32)
       ? WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>::unspecifiedBoolTypeInstance
       : 0))
  {
    *(_DWORD *)(v14 + 24) += 2;
    v321[0] = (WebCore *)v14;
    WebCore::TypingCommand::deleteSelection((uint64_t *)v321, 0, 2);
    v75 = v321[0];
    v321[0] = 0;
    if (v75)
    {
      if (*((_DWORD *)v75 + 6) == 2)
      {
        if ((*((_WORD *)v75 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v75, v74);
      }
      else
      {
        *((_DWORD *)v75 + 6) -= 2;
      }
    }
    v76 = *(_QWORD *)(v14 + 3064);
    if (*(_BYTE *)(v76 + 153) == 2)
    {
      v77 = *(WebCore **)(v76 + 136);
      if (v77)
      {
        v78 = *((_DWORD *)v77 + 6);
        *((_DWORD *)v77 + 6) = v78 + 2;
        v79 = v76 + 144;
        LODWORD(v321[1]) = *(_DWORD *)(v76 + 144);
        BYTE4(v321[1]) = *(_BYTE *)(v76 + 148);
        *((_DWORD *)v77 + 6) = v78 + 4;
      }
      else
      {
        v79 = v76 + 144;
        LODWORD(v321[1]) = *(_DWORD *)(v76 + 144);
        BYTE4(v321[1]) = *(_BYTE *)(v76 + 148);
      }
      v321[0] = v77;
      v322 = v77;
      v323 = *(_DWORD *)v79;
      v324 = *(_BYTE *)(v79 + 4);
      v325 = 0;
      v326 = 0;
      v327 &= 0xF0u;
      v328 = 0;
      v329 = 0;
      v330 &= 0xF0u;
      v331 = 0;
      v332 = 0;
      v333 &= 0xF0u;
      v334 = 0;
      v335 = 0;
      v336 &= 0xF0u;
      v337 = 1;
      v338 &= ~2u;
      WebCore::VisibleSelection::validate((uint64_t)v321, 0);
      WebCore::FrameSelection::setSelection(v76, (uint64_t)v321, 6u, 0, 0, 0, 0);
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v321);
    }
  }
  v19 = (WebCore *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 8) + 520))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  v21 = *(WebCore::Node **)(v14 + 1248);
  v302 = a6;
  v301 = a5;
  v303 = a4;
  v305 = a3;
  if (!v21)
  {
LABEL_61:
    if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
      goto LABEL_82;
    goto LABEL_63;
  }
  *((_DWORD *)v21 + 6) += 2;
  v22 = *(_QWORD *)a2;
  if (*(_QWORD *)(a1 + 32))
  {
    if (v22)
    {
      if (!*(_DWORD *)(v22 + 4))
        goto LABEL_61;
      v23 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v23 || (v24 = *(_QWORD *)(v23 + 96)) == 0)
        v24 = WebCore::threadGlobalDataSlow(v19);
      v25 = *(_QWORD *)(v24 + 40);
      if (!v25)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v24);
        v25 = *(_QWORD *)(v24 + 40);
      }
      v26 = *(_QWORD *)(v14 + 528);
      if (v26 && (v27 = *(_QWORD *)(v26 + 8)) != 0)
      {
        v28 = *(_DWORD **)(v27 + 112);
        if (v28)
          ++*v28;
      }
      else
      {
        v28 = 0;
      }
      v29 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v29);
      *(_QWORD *)(v29 + 8) = 0;
      *(_DWORD *)(v29 + 16) = 1;
      *(_DWORD *)(v29 + 20) = *(_DWORD *)(v29 + 20) & 0xFFC00000 | 0x1B820E | (*(_QWORD *)(v25 + 448) != 0);
      v31 = *(_DWORD **)(v25 + 448);
      if (v31)
        *v31 += 2;
      *(_QWORD *)(v29 + 24) = v31;
      *(_QWORD *)(v29 + 32) = 0;
      *(_QWORD *)(v29 + 40) = 0;
      *(_QWORD *)(v29 + 48) = 0;
      *(_QWORD *)(v29 + 56) = v30;
      *(_QWORD *)(v29 + 64) = 0;
      *(_QWORD *)(v29 + 72) = v28;
      *(_DWORD *)(v29 + 80) = 0;
      *(_QWORD *)v29 = off_1E33A1338;
      goto LABEL_57;
    }
  }
  else if (v22)
  {
    if (!*(_DWORD *)(v22 + 4))
      goto LABEL_61;
    *(_BYTE *)(a1 + 474) = *((_DWORD *)a4 + 3) != 0;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v34 = *(_QWORD *)(StatusReg + 736);
    if (!v34 || (v35 = *(_QWORD *)(v34 + 96)) == 0)
      v35 = WebCore::threadGlobalDataSlow(v19);
    v36 = *(_QWORD *)(v35 + 40);
    if (!v36)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v35);
      v36 = *(_QWORD *)(v35 + 40);
    }
    v37 = *(_QWORD *)(v14 + 528);
    if (v37 && (v38 = *(_QWORD *)(v37 + 8)) != 0)
    {
      v39 = *(_DWORD **)(v38 + 112);
      if (v39)
        ++*v39;
    }
    else
    {
      v39 = 0;
    }
    v40 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v40);
    *(_QWORD *)(v40 + 8) = 0;
    *(_DWORD *)(v40 + 16) = 1;
    *(_DWORD *)(v40 + 20) = *(_DWORD *)(v40 + 20) & 0xFFC00000 | 0x1B820E | (*(_QWORD *)(v36 + 440) != 0);
    v42 = *(_DWORD **)(v36 + 440);
    if (v42)
      *v42 += 2;
    *(_QWORD *)(v40 + 24) = v42;
    *(_QWORD *)(v40 + 32) = 0;
    *(_QWORD *)(v40 + 40) = 0;
    *(_QWORD *)(v40 + 48) = 0;
    *(_QWORD *)(v40 + 56) = v41;
    *(_QWORD *)(v40 + 64) = 0;
    *(_QWORD *)(v40 + 72) = v39;
    *(_DWORD *)(v40 + 80) = 0;
    *(_QWORD *)v40 = off_1E33A1338;
    v43 = v318;
    if (v318)
      *(_DWORD *)v318 += 2;
    *(_QWORD *)(v40 + 88) = v43;
    v44 = (WebCore *)(*(uint64_t (**)(WebCore::Node *, uint64_t))(*(_QWORD *)v21 + 48))(v21, v40);
    if (*(_DWORD *)(v40 + 16) == 1)
      v44 = (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    else
      --*(_DWORD *)(v40 + 16);
    v45 = *(_QWORD *)(StatusReg + 736);
    if (!v45 || (v46 = *(_QWORD *)(v45 + 96)) == 0)
      v46 = WebCore::threadGlobalDataSlow(v44);
    v47 = *(_QWORD *)(v46 + 40);
    if (!v47)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v46);
      v47 = *(_QWORD *)(v46 + 40);
    }
    v48 = *(_QWORD *)(v14 + 528);
    if (v48 && (v49 = *(_QWORD *)(v48 + 8)) != 0)
    {
      v50 = *(_DWORD **)(v49 + 112);
      if (v50)
        ++*v50;
    }
    else
    {
      v50 = 0;
    }
    v29 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v29);
    *(_QWORD *)(v29 + 8) = 0;
    *(_DWORD *)(v29 + 16) = 1;
    *(_DWORD *)(v29 + 20) = *(_DWORD *)(v29 + 20) & 0xFFC00000 | 0x1B820E | (*(_QWORD *)(v47 + 448) != 0);
    v52 = *(_DWORD **)(v47 + 448);
    if (v52)
      *v52 += 2;
    *(_QWORD *)(v29 + 24) = v52;
    *(_QWORD *)(v29 + 32) = 0;
    *(_QWORD *)(v29 + 40) = 0;
    *(_QWORD *)(v29 + 48) = 0;
    *(_QWORD *)(v29 + 56) = v51;
    *(_QWORD *)(v29 + 64) = 0;
    *(_QWORD *)(v29 + 72) = v50;
    *(_DWORD *)(v29 + 80) = 0;
    *(_QWORD *)v29 = off_1E33A1338;
LABEL_57:
    v53 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v53 += 2;
    *(_QWORD *)(v29 + 88) = v53;
    (*(void (**)(WebCore::Node *, uint64_t))(*(_QWORD *)v21 + 48))(v21, v29);
    if (*(_DWORD *)(v29 + 16) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    else
      --*(_DWORD *)(v29 + 16);
    goto LABEL_61;
  }
LABEL_63:
  *(_BYTE *)(a1 + 474) = 0;
  *(_DWORD *)(v14 + 24) += 2;
  v321[0] = (WebCore *)v14;
  WebCore::TypingCommand::deleteSelection((uint64_t *)v321, 8, 1);
  Ref = (unsigned int *)v321[0];
  v321[0] = 0;
  if (Ref)
  {
    if (Ref[6] == 2)
    {
      if ((*((_WORD *)Ref + 15) & 0x400) == 0)
        Ref = WebCore::Node::removedLastRef((WebCore::Node *)Ref, v20);
    }
    else
    {
      Ref[6] -= 2;
    }
  }
  if (v21)
  {
    v55 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v55 || (v56 = *(_QWORD *)(v55 + 96)) == 0)
      v56 = WebCore::threadGlobalDataSlow((WebCore *)Ref);
    v57 = *(_QWORD *)(v56 + 40);
    if (!v57)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v56);
      v57 = *(_QWORD *)(v56 + 40);
    }
    v58 = *(_QWORD *)(v14 + 528);
    if (v58 && (v59 = *(_QWORD *)(v58 + 8)) != 0)
    {
      v60 = *(_DWORD **)(v59 + 112);
      if (v60)
        ++*v60;
    }
    else
    {
      v60 = 0;
    }
    v61 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v61);
    *(_QWORD *)(v61 + 8) = 0;
    *(_DWORD *)(v61 + 16) = 1;
    *(_DWORD *)(v61 + 20) = *(_DWORD *)(v61 + 20) & 0xFFC00000 | 0x1B820E | (*(_QWORD *)(v57 + 432) != 0);
    v63 = *(_DWORD **)(v57 + 432);
    if (v63)
      *v63 += 2;
    *(_QWORD *)(v61 + 24) = v63;
    *(_QWORD *)(v61 + 32) = 0;
    *(_QWORD *)(v61 + 40) = 0;
    *(_QWORD *)(v61 + 48) = 0;
    *(_QWORD *)(v61 + 56) = v62;
    *(_QWORD *)(v61 + 64) = 0;
    *(_QWORD *)(v61 + 72) = v60;
    *(_DWORD *)(v61 + 80) = 0;
    *(_QWORD *)v61 = off_1E33A1338;
    v64 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v64 += 2;
    *(_QWORD *)(v61 + 88) = v64;
    (*(void (**)(WebCore::Node *, uint64_t))(*(_QWORD *)v21 + 48))(v21, v61);
    if (*(_DWORD *)(v61 + 16) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
    else
      --*(_DWORD *)(v61 + 16);
  }
LABEL_82:
  v65 = *(_QWORD *)(a1 + 32);
  if (v65)
  {
    v66 = *(_DWORD *)(v65 + 24);
    *(_DWORD *)(v65 + 24) = v66 + 2;
    *(_QWORD *)(a1 + 32) = 0;
    if (v66)
    {
      *(_DWORD *)(v65 + 24) = v66;
    }
    else if ((*(_WORD *)(v65 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v65, v20);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
  }
  v67 = (int32x2_t **)(a1 + 48);
  WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(a1 + 48, v20);
  v68 = (int32x2_t **)(a1 + 64);
  WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(a1 + 64, v69);
  v71 = *(_QWORD *)(a1 + 80);
  if (v71)
  {
    v298 = a7;
    *(_QWORD *)(a1 + 80) = 0;
    v247 = *(unsigned int *)(v71 - 4);
    if ((_DWORD)v247)
    {
      v248 = v71;
      do
      {
        v249 = *(WTF::StringImpl **)v248;
        if (*(_QWORD *)v248 != -1)
        {
          v250 = *(WTF **)(v248 + 8);
          if (v250)
          {
            *(_QWORD *)(v248 + 8) = 0;
            *(_DWORD *)(v248 + 16) = 0;
            WTF::fastFree(v250, v70);
            v249 = *(WTF::StringImpl **)v248;
          }
          *(_QWORD *)v248 = 0;
          if (v249)
          {
            if (*(_DWORD *)v249 == 2)
              WTF::StringImpl::destroy(v249, (WTF::StringImpl *)v70);
            else
              *(_DWORD *)v249 -= 2;
          }
        }
        v248 += 24;
        --v247;
      }
      while (v247);
    }
    WTF::fastFree((WTF *)(v71 - 16), v70);
    a7 = v298;
  }
  if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    *(_DWORD *)(v14 + 24) += 2;
    v321[0] = (WebCore *)v14;
    WebCore::TypingCommand::insertText(v321, a2, 9, 1);
    v81 = v321[0];
    v321[0] = 0;
    if (v81)
    {
      if (*((_DWORD *)v81 + 6) == 2)
      {
        if ((*((_WORD *)v81 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v81, v80);
      }
      else
      {
        *((_DWORD *)v81 + 6) -= 2;
      }
    }
    WebCore::Position::downstream(*(_QWORD *)(v14 + 3064) + 88, (WebCore::Node *)1, (uint64_t)&v315);
    v83 = *(_QWORD *)(v14 + 3064);
    v84 = *(WebCore::Node **)(v83 + 104);
    if (v84)
      *((_DWORD *)v84 + 6) += 2;
    v312 = v84;
    v313 = *(_DWORD *)(v83 + 112);
    v314 = *(_BYTE *)(v83 + 116);
    v85 = v315;
    if (v315)
      *((_DWORD *)v315 + 6) += 2;
    if ((v317 & 8) == 0 && ((v86 = v317 & 7, v86 == 4) || v86 == 2))
    {
      v300 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)&v315);
      if (!v84)
      {
LABEL_126:
        if ((v314 & 8) == 0 && ((v87 = v314 & 7, v87 == 4) || v87 == 2))
        {
          v88 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)&v312);
          if (!v85)
            goto LABEL_154;
        }
        else
        {
          v88 = v313;
          if (!v85)
            goto LABEL_154;
        }
        if (v85 == v84 && (*((_WORD *)v85 + 14) & 2) != 0)
        {
          v89 = *(_QWORD *)a2;
          if (*(_QWORD *)a2)
            LODWORD(v89) = *(_DWORD *)(v89 + 4);
          if ((_DWORD)v89 + v300 == v88)
          {
            *((_DWORD *)v84 + 6) += 2;
            v90 = *(_QWORD *)(a1 + 32);
            *(_QWORD *)(a1 + 32) = v84;
            v296 = v88;
            if (v90)
            {
              if (*(_DWORD *)(v90 + 24) == 2)
              {
                if ((*(_WORD *)(v90 + 30) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef((WebCore::Node *)v90, v82);
                  v88 = v296;
                }
              }
              else
              {
                *(_DWORD *)(v90 + 24) -= 2;
              }
            }
            *(_DWORD *)(a1 + 40) = v300;
            *(_DWORD *)(a1 + 44) = v88;
            v91 = *(unsigned int *)(a1 + 60);
            v299 = v84;
            v297 = a7;
            v295 = v85;
            if (v67 != (int32x2_t **)v305)
            {
              v92 = *(unsigned int *)(v305 + 12);
              if (v91 <= v92)
              {
                if (v92 > *(_DWORD *)(a1 + 56))
                {
                  WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(a1 + 48, v82);
                  v100 = *(unsigned int *)(v305 + 12);
                  if (*(_DWORD *)(a1 + 56) < v100)
                  {
                    if (v100 >> 27)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195ACDB30);
                    }
                    v101 = *(WTF **)(a1 + 48);
                    v102 = *(unsigned int *)(a1 + 60);
                    v103 = WTF::fastMalloc((WTF *)(32 * v100));
                    *(_DWORD *)(a1 + 56) = v100;
                    *(_QWORD *)(a1 + 48) = v103;
                    if ((_DWORD)v102)
                    {
                      v104 = v103 + 16;
                      v105 = 32 * v102;
                      v106 = (char *)v101 + 16;
                      do
                      {
                        v107 = *((_QWORD *)v106 - 2);
                        *(_BYTE *)(v104 - 8) = *(v106 - 8);
                        *(_QWORD *)(v104 - 16) = v107;
                        *(_QWORD *)v104 = 0;
                        if (*(_QWORD *)v106)
                        {
                          *(_QWORD *)v104 = *(_QWORD *)v106;
                          *(_QWORD *)v106 = 0;
                        }
                        *(_BYTE *)(v104 + 8) = v106[8];
                        v104 += 32;
                        v106 += 32;
                        v105 -= 32;
                      }
                      while (v105);
                    }
                    if (v101)
                    {
                      if (*v67 == (int32x2_t *)v101)
                      {
                        *(_QWORD *)(a1 + 48) = 0;
                        *(_DWORD *)(a1 + 56) = 0;
                      }
                      WTF::fastFree(v101, v82);
                    }
                  }
                  LODWORD(v91) = *(_DWORD *)(a1 + 60);
                }
              }
              else
              {
                v93 = (uint64_t)&(*v67)[4 * v91];
                v94 = (uint64_t)&(*v67)[4 * v92];
                do
                {
                  v95 = *(_QWORD *)(v94 + 16);
                  if ((v95 & 0x8000000000000) != 0)
                  {
                    v96 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFLL);
                    do
                    {
                      v97 = __ldaxr(v96);
                      v98 = v97 - 1;
                    }
                    while (__stlxr(v98, v96));
                    if (!v98)
                    {
                      atomic_store(1u, v96);
                      WTF::fastFree((WTF *)v96, v82);
                    }
                  }
                  v94 += 32;
                }
                while (v94 != v93);
                *(_DWORD *)(a1 + 60) = v92;
                LODWORD(v91) = v92;
              }
              v108 = *(int32x2_t **)v305;
              v109 = (WTF *)*v67;
              if ((_DWORD)v91)
              {
                v110 = &v108[4 * v91];
                while (1)
                {
                  v111 = *v108;
                  *((_BYTE *)v109 + 8) = v108[1].i8[0];
                  *(int32x2_t *)v109 = v111;
                  v112 = *((_QWORD *)v109 + 2);
                  v113 = v108[2];
                  if ((v112 & 0x8000000000000) != 0)
                  {
                    if ((*(_QWORD *)&v113 & 0x8000000000000) == 0)
                      goto LABEL_196;
                    *(_OWORD *)v321 = *(_OWORD *)((v112 & 0xFFFFFFFFFFFFLL) + 4);
                    *(_OWORD *)v308 = *(_OWORD *)((*(_QWORD *)&v113 & 0xFFFFFFFFFFFFLL) + 4);
                    v121 = WebCore::operator==<float,4ul>((float *)v321, (float *)v308);
                    v112 = *((_QWORD *)v109 + 2);
                    if (!v121)
                      goto LABEL_196;
                    v122 = (unint64_t)v108[2];
                    if (HIBYTE(v112) != HIBYTE(v122) || BYTE6(v112) != BYTE6(v122))
                      goto LABEL_196;
                  }
                  else if (v112 != *(_QWORD *)&v113 || (*(_QWORD *)&v113 & 0x8000000000000) != 0)
                  {
LABEL_196:
                    if ((v112 & 0x8000000000000) != 0)
                    {
                      v118 = (unsigned int *)(v112 & 0xFFFFFFFFFFFFLL);
                      do
                      {
                        v119 = __ldaxr(v118);
                        v120 = v119 - 1;
                      }
                      while (__stlxr(v120, v118));
                      if (!v120)
                      {
                        atomic_store(1u, v118);
                        WTF::fastFree((WTF *)v118, v82);
                      }
                    }
                    v115 = v108[2];
                    *((int32x2_t *)v109 + 2) = v115;
                    if ((*(_QWORD *)&v115 & 0x8000000000000) != 0)
                    {
                      v116 = (unsigned int *)(*(_QWORD *)&v115 & 0xFFFFFFFFFFFFLL);
                      do
                        v117 = __ldaxr(v116);
                      while (__stlxr(v117 + 1, v116));
                    }
                  }
                  *((_BYTE *)v109 + 24) = v108[3].i8[0];
                  v108 += 4;
                  v109 = (WTF *)((char *)v109 + 32);
                  if (v108 == v110)
                  {
                    v123 = v305;
                    v108 = *(int32x2_t **)v305;
                    LODWORD(v91) = *(_DWORD *)(a1 + 60);
                    v109 = *(WTF **)(a1 + 48);
                    goto LABEL_223;
                  }
                }
              }
              v123 = v305;
LABEL_223:
              v124 = *(unsigned int *)(v123 + 12);
              if ((_DWORD)v91 == (_DWORD)v124)
              {
                a7 = v297;
              }
              else
              {
                v125 = &v108[4 * v124];
                v126 = v91;
                v127 = (int32x2_t *)((char *)v109 + 32 * v91);
                v128 = &v108[4 * v126];
                a7 = v297;
                do
                {
                  v129 = *v128;
                  v127[1].i8[0] = v128[1].i8[0];
                  *v127 = v129;
                  v130 = v128[2];
                  v127[2] = v130;
                  if ((*(_QWORD *)&v130 & 0x8000000000000) != 0)
                  {
                    v131 = (unsigned int *)(*(_QWORD *)&v130 & 0xFFFFFFFFFFFFLL);
                    do
                      v132 = __ldaxr(v131);
                    while (__stlxr(v132 + 1, v131));
                  }
                  v127[3].i8[0] = v128[3].i8[0];
                  v127 += 4;
                  v128 += 4;
                }
                while (v128 != v125);
                LODWORD(v91) = *(_DWORD *)(v305 + 12);
              }
              *(_DWORD *)(a1 + 60) = v91;
            }
            v133 = vdup_n_s32(v300);
            if ((_DWORD)v91)
            {
              v134 = *v67;
              v135 = 32 * v91;
              do
              {
                *v134 = vadd_s32(*v134, v133);
                v134 += 4;
                v135 -= 32;
              }
              while (v135);
            }
            v136 = *(_DWORD *)(a1 + 76);
            v137 = v303;
            if (v68 == v303)
            {
              v149 = v301;
              v150 = v299;
            }
            else
            {
              v138 = *((_DWORD *)v303 + 3);
              if (v136 <= v138)
              {
                if (v138 > *(_DWORD *)(a1 + 72))
                {
                  WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(a1 + 64, v82);
                  v151 = *((unsigned int *)v303 + 3);
                  if (*(_DWORD *)(a1 + 72) < v151)
                  {
                    if (v151 >= 0x6666667)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195ACDB38);
                    }
                    v152 = *v68;
                    v153 = *(_DWORD *)(a1 + 76);
                    v154 = 40 * v151;
                    v155 = WTF::fastMalloc((WTF *)(40 * v151));
                    v156 = (WTF *)v152;
                    *(_DWORD *)(a1 + 72) = (v154 & 0xFFFFFFF8) / 0x28;
                    *(_QWORD *)(a1 + 64) = v155;
                    if (v153)
                    {
                      v157 = v155;
                      v158 = &v152[5 * v153];
                      do
                      {
                        *(int32x2_t *)v157 = *v152;
                        *(_BYTE *)(v157 + 8) = 0;
                        *(_BYTE *)(v157 + 16) = 0;
                        if (v152[2].i8[0])
                        {
                          *(_QWORD *)(v157 + 8) = 0;
                          v159 = v152[1];
                          if (v159)
                          {
                            *(int32x2_t *)(v157 + 8) = v159;
                            v152[1] = 0;
                          }
                          *(_BYTE *)(v157 + 16) = 1;
                        }
                        *(_BYTE *)(v157 + 24) = 0;
                        *(_BYTE *)(v157 + 32) = 0;
                        if (v152[4].i8[0])
                        {
                          *(_QWORD *)(v157 + 24) = 0;
                          v160 = v152[3];
                          if (v160)
                          {
                            *(int32x2_t *)(v157 + 24) = v160;
                            v152[3] = 0;
                          }
                          *(_BYTE *)(v157 + 32) = 1;
                        }
                        if (v152[2].i8[0])
                        {
                          v161 = v152[1];
                          if ((*(_QWORD *)&v161 & 0x8000000000000) != 0)
                          {
                            v306 = v156;
                            v162 = (unsigned int *)(*(_QWORD *)&v161 & 0xFFFFFFFFFFFFLL);
                            do
                            {
                              v163 = __ldaxr(v162);
                              v164 = v163 - 1;
                            }
                            while (__stlxr(v164, v162));
                            if (!v164)
                            {
                              atomic_store(1u, v162);
                              WTF::fastFree((WTF *)v162, v82);
                              v156 = v306;
                            }
                          }
                        }
                        v157 += 40;
                        v152 += 5;
                      }
                      while (v152 != v158);
                    }
                    a7 = v297;
                    v137 = v303;
                    if (v156)
                    {
                      if (*v68 == (int32x2_t *)v156)
                      {
                        *(_QWORD *)(a1 + 64) = 0;
                        *(_DWORD *)(a1 + 72) = 0;
                      }
                      WTF::fastFree(v156, v82);
                      a7 = v297;
                      v137 = v303;
                    }
                  }
                }
                v138 = *(_DWORD *)(a1 + 76);
              }
              else
              {
                v139 = (uint64_t)&(*v68)[5 * v136];
                v140 = (uint64_t)&(*v68)[5 * v138];
                do
                {
                  if (*(_BYTE *)(v140 + 32))
                  {
                    v141 = *(_QWORD *)(v140 + 24);
                    if ((v141 & 0x8000000000000) != 0)
                    {
                      v143 = (unsigned int *)(v141 & 0xFFFFFFFFFFFFLL);
                      do
                      {
                        v144 = __ldaxr(v143);
                        v145 = v144 - 1;
                      }
                      while (__stlxr(v145, v143));
                      if (!v145)
                      {
                        atomic_store(1u, v143);
                        WTF::fastFree((WTF *)v143, v82);
                      }
                    }
                  }
                  if (*(_BYTE *)(v140 + 16))
                  {
                    v142 = *(_QWORD *)(v140 + 8);
                    if ((v142 & 0x8000000000000) != 0)
                    {
                      v146 = (unsigned int *)(v142 & 0xFFFFFFFFFFFFLL);
                      do
                      {
                        v147 = __ldaxr(v146);
                        v148 = v147 - 1;
                      }
                      while (__stlxr(v148, v146));
                      if (!v148)
                      {
                        atomic_store(1u, v146);
                        WTF::fastFree((WTF *)v146, v82);
                      }
                    }
                  }
                  v140 += 40;
                }
                while (v140 != v139);
                *(_DWORD *)(a1 + 76) = v138;
                v137 = v303;
              }
              v165 = *v137;
              v166 = *v68;
              if (v138)
              {
                v167 = &v165[5 * v138];
                while (1)
                {
                  *v166 = *v165;
                  if (v166[2].u8[0] == v165[2].u8[0])
                  {
                    if (!v166[2].i8[0])
                      goto LABEL_301;
                    v168 = (unint64_t)v166[1];
                    v169 = v165[1];
                    if ((v168 & 0x8000000000000) != 0)
                    {
                      if ((*(_QWORD *)&v169 & 0x8000000000000) != 0)
                      {
                        *(_OWORD *)v321 = *(_OWORD *)((v168 & 0xFFFFFFFFFFFFLL) + 4);
                        *(_OWORD *)v308 = *(_OWORD *)((*(_QWORD *)&v169 & 0xFFFFFFFFFFFFLL) + 4);
                        v201 = WebCore::operator==<float,4ul>((float *)v321, (float *)v308);
                        v168 = (unint64_t)v166[1];
                        if (v201)
                        {
                          v202 = (unint64_t)v165[1];
                          if (HIBYTE(v168) == HIBYTE(v202) && BYTE6(v168) == BYTE6(v202))
                            goto LABEL_301;
                        }
                      }
                    }
                    else if (v168 == *(_QWORD *)&v169 && (*(_QWORD *)&v169 & 0x8000000000000) == 0)
                    {
                      goto LABEL_301;
                    }
                    if ((v168 & 0x8000000000000) != 0)
                    {
                      v191 = (unsigned int *)(v168 & 0xFFFFFFFFFFFFLL);
                      do
                      {
                        v192 = __ldaxr(v191);
                        v193 = v192 - 1;
                      }
                      while (__stlxr(v193, v191));
                      if (!v193)
                      {
                        atomic_store(1u, v191);
                        WTF::fastFree((WTF *)v191, v82);
                      }
                    }
                    v171 = v165[1];
                    v166[1] = v171;
                    if ((*(_QWORD *)&v171 & 0x8000000000000) != 0)
                    {
                      v172 = (unsigned int *)(*(_QWORD *)&v171 & 0xFFFFFFFFFFFFLL);
                      do
                        v173 = __ldaxr(v172);
                      while (__stlxr(v173 + 1, v172));
                    }
                  }
                  else
                  {
                    if (v166[2].i8[0])
                    {
                      v174 = v166[1];
                      if ((*(_QWORD *)&v174 & 0x8000000000000) != 0)
                      {
                        v197 = (unsigned int *)(*(_QWORD *)&v174 & 0xFFFFFFFFFFFFLL);
                        do
                          v198 = __ldaxr(v197);
                        while (__stlxr(v198 - 1, v197));
                        if (v198 == 1)
                        {
                          atomic_store(1u, v197);
                          WTF::fastFree((WTF *)v197, v82);
                        }
                      }
                      v175 = 0;
                    }
                    else
                    {
                      v176 = v165[1];
                      v166[1] = v176;
                      if ((*(_QWORD *)&v176 & 0x8000000000000) != 0)
                      {
                        v185 = (unsigned int *)(*(_QWORD *)&v176 & 0xFFFFFFFFFFFFLL);
                        do
                        {
                          v186 = __ldaxr(v185);
                          v187 = __stlxr(v186 + 1, v185);
                          v175 = 1;
                        }
                        while (v187);
                      }
                      else
                      {
                        v175 = 1;
                      }
                    }
                    v166[2].i8[0] = v175;
                  }
LABEL_301:
                  if (v166[4].u8[0] != v165[4].u8[0])
                  {
                    if (v166[4].i8[0])
                    {
                      v182 = v166[3];
                      if ((*(_QWORD *)&v182 & 0x8000000000000) != 0)
                      {
                        v199 = (unsigned int *)(*(_QWORD *)&v182 & 0xFFFFFFFFFFFFLL);
                        do
                          v200 = __ldaxr(v199);
                        while (__stlxr(v200 - 1, v199));
                        if (v200 == 1)
                        {
                          atomic_store(1u, v199);
                          WTF::fastFree((WTF *)v199, v82);
                        }
                      }
                      v183 = 0;
                    }
                    else
                    {
                      v184 = v165[3];
                      v166[3] = v184;
                      if ((*(_QWORD *)&v184 & 0x8000000000000) != 0)
                      {
                        v188 = (unsigned int *)(*(_QWORD *)&v184 & 0xFFFFFFFFFFFFLL);
                        do
                        {
                          v189 = __ldaxr(v188);
                          v190 = __stlxr(v189 + 1, v188);
                          v183 = 1;
                        }
                        while (v190);
                      }
                      else
                      {
                        v183 = 1;
                      }
                    }
                    v166[4].i8[0] = v183;
                    goto LABEL_317;
                  }
                  if (v166[4].i8[0])
                  {
                    v177 = (unint64_t)v166[3];
                    v178 = v165[3];
                    if ((v177 & 0x8000000000000) != 0)
                    {
                      if ((*(_QWORD *)&v178 & 0x8000000000000) == 0
                        || (*(_OWORD *)v321 = *(_OWORD *)((v177 & 0xFFFFFFFFFFFFLL) + 4),
                            *(_OWORD *)v308 = *(_OWORD *)((*(_QWORD *)&v178 & 0xFFFFFFFFFFFFLL) + 4),
                            v203 = WebCore::operator==<float,4ul>((float *)v321, (float *)v308),
                            v177 = (unint64_t)v166[3],
                            !v203)
                        || (v204 = (unint64_t)v165[3], HIBYTE(v177) != HIBYTE(v204))
                        || BYTE6(v177) != BYTE6(v204))
                      {
LABEL_306:
                        if ((v177 & 0x8000000000000) != 0)
                        {
                          v194 = (unsigned int *)(v177 & 0xFFFFFFFFFFFFLL);
                          do
                          {
                            v195 = __ldaxr(v194);
                            v196 = v195 - 1;
                          }
                          while (__stlxr(v196, v194));
                          if (!v196)
                          {
                            atomic_store(1u, v194);
                            WTF::fastFree((WTF *)v194, v82);
                          }
                        }
                        v179 = v165[3];
                        v166[3] = v179;
                        if ((*(_QWORD *)&v179 & 0x8000000000000) != 0)
                        {
                          v180 = (unsigned int *)(*(_QWORD *)&v179 & 0xFFFFFFFFFFFFLL);
                          do
                            v181 = __ldaxr(v180);
                          while (__stlxr(v181 + 1, v180));
                        }
                      }
                    }
                    else if (v177 != *(_QWORD *)&v178 || (*(_QWORD *)&v178 & 0x8000000000000) != 0)
                    {
                      goto LABEL_306;
                    }
                  }
LABEL_317:
                  v165 += 5;
                  v166 += 5;
                  if (v165 == v167)
                  {
                    v205 = v303;
                    v165 = *v303;
                    v136 = *(_DWORD *)(a1 + 76);
                    v166 = *(int32x2_t **)(a1 + 64);
                    a7 = v297;
                    goto LABEL_352;
                  }
                }
              }
              v136 = 0;
              v205 = v303;
LABEL_352:
              v206 = *((_DWORD *)v205 + 3);
              if (v136 == v206)
              {
                v149 = v301;
                v150 = v299;
              }
              else
              {
                v207 = &v165[5 * v206];
                v208 = &v166[5 * v136];
                v209 = &v165[5 * v136];
                v149 = v301;
                v150 = v299;
                do
                {
                  *v208 = *v209;
                  v208[1].i8[0] = 0;
                  v208[2].i8[0] = 0;
                  if (v209[2].i8[0])
                  {
                    v210 = v209[1];
                    v208[1] = v210;
                    if ((*(_QWORD *)&v210 & 0x8000000000000) != 0)
                    {
                      v212 = (unsigned int *)(*(_QWORD *)&v210 & 0xFFFFFFFFFFFFLL);
                      do
                        v213 = __ldaxr(v212);
                      while (__stlxr(v213 + 1, v212));
                    }
                    v208[2].i8[0] = 1;
                  }
                  v208[3].i8[0] = 0;
                  v208[4].i8[0] = 0;
                  if (v209[4].i8[0])
                  {
                    v211 = v209[3];
                    v208[3] = v211;
                    if ((*(_QWORD *)&v211 & 0x8000000000000) != 0)
                    {
                      v214 = (unsigned int *)(*(_QWORD *)&v211 & 0xFFFFFFFFFFFFLL);
                      do
                        v215 = __ldaxr(v214);
                      while (__stlxr(v215 + 1, v214));
                    }
                    v208[4].i8[0] = 1;
                  }
                  v208 += 5;
                  v209 += 5;
                }
                while (v209 != v207);
                v136 = *((_DWORD *)v303 + 3);
              }
              *(_DWORD *)(a1 + 76) = v136;
            }
            if (v136)
            {
              v216 = *v68;
              v217 = 40 * v136;
              do
              {
                *v216 = vadd_s32(*v216, v133);
                v216 += 5;
                v217 -= 40;
              }
              while (v217);
            }
            if (!*v149 || (v218 = *((unsigned int *)*v149 - 3), !(_DWORD)v218))
            {
              v225 = 0;
              goto LABEL_419;
            }
            v219 = (v218 - 1) | ((v218 - 1) >> 1) | ((((_DWORD)v218 - 1) | ((v218 - 1) >> 1)) >> 2);
            v220 = v219 | (v219 >> 4) | ((v219 | (v219 >> 4)) >> 8);
            v221 = (v220 | HIWORD(v220)) + 1;
            if (v221 > 0x400)
            {
              if (v221 > 2 * v218)
                goto LABEL_383;
            }
            else if (3 * v221 > 4 * v218)
            {
LABEL_378:
              v222 = (double)v218;
              v223 = (double)v221;
              v224 = 0.604166667;
              goto LABEL_384;
            }
            LODWORD(v221) = 2 * v221;
            if (v221 <= 0x400)
              goto LABEL_378;
LABEL_383:
            v222 = (double)v218;
            v223 = (double)v221;
            v224 = 0.416666667;
LABEL_384:
            if (v223 * v224 <= v222)
              LODWORD(v221) = 2 * v221;
            if (v221 <= 8)
              v226 = 8;
            else
              v226 = v221;
            v227 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(24 * v226 + 16));
            v227[2] = v226 - 1;
            v227[3] = v226;
            *v227 = 0;
            v227[1] = v218;
            v307 = v227;
            v228 = *v149;
            if (*v149)
            {
              v229 = *((unsigned int *)v228 - 1);
              v230 = &v228[3 * v229];
              if (*((_DWORD *)v228 - 3))
              {
                v231 = v228;
                v150 = v299;
                if ((_DWORD)v229)
                {
                  v232 = 24 * v229;
                  v231 = v228;
                  while ((unint64_t)*v231 + 1 <= 1)
                  {
                    v231 += 3;
                    v232 -= 24;
                    if (!v232)
                    {
                      v231 = v230;
                      goto LABEL_399;
                    }
                  }
                }
                goto LABEL_399;
              }
              v231 = &v228[3 * v229];
            }
            else
            {
              v231 = 0;
              LODWORD(v229) = 0;
            }
            v150 = v299;
            v230 = &v228[3 * v229];
LABEL_399:
            v304 = a2;
            v225 = v227 + 4;
            if (v228)
              v233 = &v228[3 * *((unsigned int *)v228 - 1)];
            else
              v233 = 0;
            if (v233 == v231)
            {
              a7 = v297;
            }
            else
            {
              do
              {
                v234 = v307[2];
                v235 = *((_DWORD *)*v231 + 4);
                if (v235 < 0x100)
                  v236 = WTF::StringImpl::hashSlowCase(*v231);
                else
                  v236 = v235 >> 8;
                v237 = 0;
                do
                {
                  v238 = v236 & v234;
                  v239 = (WTF::StringImpl **)&v225[6 * (v236 & v234)];
                  v236 = ++v237 + (v236 & v234);
                }
                while (*v239);
                v240 = *v231;
                if (*v231)
                  *(_DWORD *)v240 += 2;
                *v239 = v240;
                WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)&v225[6 * v238 + 2], (WTF *)(v231 + 1));
                v241 = v231 + 3;
                v231 = v230;
                if (v241 != v230)
                {
                  v231 = v241;
                  while ((unint64_t)*v231 + 1 <= 1)
                  {
                    v231 += 3;
                    if (v231 == v230)
                    {
                      v231 = v230;
                      break;
                    }
                  }
                }
              }
              while (v231 != v233);
              a7 = v297;
              v150 = v299;
            }
            a2 = v304;
LABEL_419:
            v242 = *(_QWORD *)(a1 + 80);
            *(_QWORD *)(a1 + 80) = v225;
            if (v242)
            {
              v256 = *(unsigned int *)(v242 - 4);
              if ((_DWORD)v256)
              {
                v257 = v242;
                do
                {
                  v258 = *(WTF::StringImpl **)v257;
                  if (*(_QWORD *)v257 != -1)
                  {
                    v259 = *(WTF **)(v257 + 8);
                    if (v259)
                    {
                      *(_QWORD *)(v257 + 8) = 0;
                      *(_DWORD *)(v257 + 16) = 0;
                      WTF::fastFree(v259, v82);
                      v258 = *(WTF::StringImpl **)v257;
                    }
                    *(_QWORD *)v257 = 0;
                    if (v258)
                    {
                      if (*(_DWORD *)v258 == 2)
                        WTF::StringImpl::destroy(v258, (WTF::StringImpl *)v82);
                      else
                        *(_DWORD *)v258 -= 2;
                    }
                  }
                  v257 += 24;
                  --v256;
                }
                while (v256);
              }
              WTF::fastFree((WTF *)(v242 - 16), v82);
              v225 = *(_DWORD **)(a1 + 80);
              v150 = v299;
              if (v225)
                goto LABEL_421;
            }
            else if (v225)
            {
LABEL_421:
              v243 = *(v225 - 1);
              v244 = &v225[6 * v243];
              if (*(v225 - 3))
              {
                v245 = v225;
                if ((_DWORD)v243)
                {
                  v246 = 24 * v243;
                  v245 = v225;
                  while ((unint64_t)(*(_QWORD *)v245 + 1) <= 1)
                  {
                    v245 += 6;
                    v246 -= 24;
                    if (!v246)
                    {
                      v245 = v244;
                      break;
                    }
                  }
                }
LABEL_461:
                if (!v225)
                  goto LABEL_463;
LABEL_462:
                for (i = &v225[6 * *(v225 - 1)]; v245 != i; i = 0)
                {
                  v261 = v245[5];
                  if ((_DWORD)v261)
                  {
                    v262 = (_QWORD *)*((_QWORD *)v245 + 1);
                    v263 = 16 * v261;
                    do
                    {
                      *v262 += v300;
                      v262 += 2;
                      v263 -= 16;
                    }
                    while (v263);
                  }
                  v264 = v245 + 6;
                  v245 = v244;
                  if (v264 != v244)
                  {
                    v245 = v264;
                    while ((unint64_t)(*(_QWORD *)v245 + 1) <= 1)
                    {
                      v245 += 6;
                      if (v245 == v244)
                      {
                        v245 = v244;
                        break;
                      }
                    }
                  }
                  v225 = *(_DWORD **)(a1 + 80);
                  if (v225)
                    goto LABEL_462;
LABEL_463:
                  ;
                }
                v265 = *((_QWORD *)v150 + 8) & 0xFFFFFFFFFFFFLL;
                if (v265
                  && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*((_QWORD *)v150 + 8) & 0xFFFFFFFFFFFFLL) + 0x18) + 8) + 40) + 8)
                                                                                           + 1944)
                                                                               + 24)
                                                                   + 8)
                                                       + 40)
                                           + 8)
                               + 3382))
                {
                  LOBYTE(v321[0]) = 0;
                  LOBYTE(v322) = 0;
                  LOBYTE(v308[0]) = 0;
                  LOBYTE(v309) = 0;
                  WebCore::RenderObject::issueRepaint(v265, (__int128 *)v321, 0, 0, (uint64_t)v308);
                }
                v266 = v300 + v302;
                if (v296 < v300 + v302)
                  v266 = v296;
                v267 = v300 + a7;
                if (v266 > v300 + a7)
                  v267 = v266;
                v268 = *((_DWORD *)v150 + 6);
                LODWORD(v308[1]) = v266;
                v269 = v150;
                v270 = *(_QWORD *)(v14 + 3064);
                v308[0] = v269;
                if (v296 >= v267)
                  v271 = v267;
                else
                  v271 = v296;
                *((_DWORD *)v269 + 6) = v268 + 8;
                v309 = v269;
                v310 = v271;
                v311 = 1;
                WebCore::VisibleSelection::VisibleSelection((uint64_t)v321, (uint64_t)v308, 1, 0);
                if (HIBYTE(v337))
                  WebCore::FrameSelection::setSelection(v270, (uint64_t)v321, 4u, 0, 0, 0, 0);
                WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v321);
                v85 = v295;
                v84 = v299;
                if (v311)
                {
                  v272 = v309;
                  v309 = 0;
                  if (v272)
                  {
                    if (*((_DWORD *)v272 + 6) == 2)
                    {
                      if ((*((_WORD *)v272 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v272, v82);
                    }
                    else
                    {
                      *((_DWORD *)v272 + 6) -= 2;
                    }
                  }
                  v273 = v308[0];
                  v308[0] = 0;
                  if (v273)
                  {
                    if (*((_DWORD *)v273 + 6) == 2)
                    {
                      if ((*((_WORD *)v273 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v273, v82);
                    }
                    else
                    {
                      *((_DWORD *)v273 + 6) -= 2;
                    }
                  }
                }
                v274 = *((_DWORD *)v299 + 6) - 2;
                if (*((_DWORD *)v299 + 6) == 2)
                {
                  if ((*((_WORD *)v299 + 15) & 0x400) != 0)
                    goto LABEL_500;
                  WebCore::Node::removedLastRef(v299, v82);
                  v274 = *((_DWORD *)v299 + 6);
                }
                else
                {
                  *((_DWORD *)v299 + 6) = v274;
                }
                v275 = v274 - 2;
                if (v275)
                {
                  *((_DWORD *)v299 + 6) = v275;
                  goto LABEL_155;
                }
LABEL_500:
                if ((*((_WORD *)v299 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v299, v82);
                goto LABEL_155;
              }
              v245 = &v225[6 * v243];
LABEL_460:
              v244 = &v225[6 * v243];
              goto LABEL_461;
            }
            v245 = 0;
            LODWORD(v243) = 0;
            goto LABEL_460;
          }
        }
LABEL_154:
        if (!v84)
        {
LABEL_157:
          if (v85)
          {
            if (*((_DWORD *)v85 + 6) == 2)
            {
              if ((*((_WORD *)v85 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v85, v82);
            }
            else
            {
              *((_DWORD *)v85 + 6) -= 2;
            }
          }
          if (v312)
          {
            if (*((_DWORD *)v312 + 6) == 2)
            {
              if ((*((_WORD *)v312 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v312, v82);
            }
            else
            {
              *((_DWORD *)v312 + 6) -= 2;
            }
          }
          v99 = v315;
          v315 = 0;
          if (v99)
          {
            if (*((_DWORD *)v99 + 6) == 2)
            {
              if ((*((_WORD *)v99 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v99, v82);
            }
            else
            {
              *((_DWORD *)v99 + 6) -= 2;
            }
          }
          goto LABEL_87;
        }
LABEL_155:
        if (*((_DWORD *)v84 + 6) == 2)
        {
          if ((*((_WORD *)v84 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v84, v82);
        }
        else
        {
          *((_DWORD *)v84 + 6) -= 2;
        }
        goto LABEL_157;
      }
    }
    else
    {
      v300 = v316;
      if (!v84)
        goto LABEL_126;
    }
    *((_DWORD *)v84 + 6) += 2;
    goto LABEL_126;
  }
LABEL_87:
  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    if (*(_BYTE *)(v14 + 3362) || *(_BYTE *)(v14 + 3405))
    {
      v288 = *(_QWORD *)(v14 + 528);
      j = v14;
      if (v288)
      {
        v289 = *(_QWORD *)(v288 + 8);
        j = v14;
        if (v289)
        {
          v290 = *(_QWORD *)(v289 + 120);
          j = v14;
          if (v290)
          {
            v291 = *(_QWORD *)(v290 + 8);
            for (j = v14; v291; v291 = *(_QWORD *)(v294 + 8))
            {
              j = *(_QWORD *)(*(_QWORD *)(v291 + 40) + 8);
              v292 = *(_QWORD *)(j + 528);
              if (!v292)
                break;
              v293 = *(_QWORD *)(v292 + 8);
              if (!v293)
                break;
              v294 = *(_QWORD *)(v293 + 120);
              if (!v294)
                break;
            }
          }
        }
      }
    }
    else
    {
      v276 = *(_QWORD *)(v14 + 528);
      j = v14;
      if (v276)
      {
        v278 = *(_QWORD *)(v276 + 8);
        j = v14;
        if (v278)
        {
          v279 = *(_QWORD *)(*(_QWORD *)(v278 + 128) + 8);
          v280 = v279 && *(_BYTE *)(v279 + 144) == 0;
          j = v14;
          if (v280)
          {
            v281 = *(_QWORD *)(v279 + 296);
            j = v14;
            if (v281)
              j = v281;
          }
        }
      }
    }
    v282 = *(_QWORD *)(j + 1488);
    if (v282)
    {
      ++*(_DWORD *)(v282 + 8);
      if (v65)
      {
        v283 = *(_QWORD *)(a1 + 32);
        v284 = v65;
        if (v65 == v283)
          goto LABEL_533;
        if (v283)
          v285 = 1;
        else
          v285 = 2;
        WebCore::AXObjectCache::onTextCompositionChange((WTF **)v282, (WebCore::Text *)v65, v285, 1, (_DWORD **)a2, *(unsigned int *)(a1 + 40), *(unsigned __int8 *)(a1 + 474));
      }
      v284 = *(_QWORD *)(a1 + 32);
      if (!v284)
      {
LABEL_535:
        v287 = *(_DWORD *)(v282 + 8);
        if (!v287)
        {
          __break(0xC471u);
          JUMPOUT(0x195ACDB28);
        }
        *(_DWORD *)(v282 + 8) = v287 - 1;
        goto LABEL_88;
      }
LABEL_533:
      *(_DWORD *)(v284 + 24) += 2;
      WebCore::AXObjectCache::onTextCompositionChange((WTF **)v282, (WebCore::Text *)v284, v65 != 0, 1, (_DWORD **)a2, *(unsigned int *)(a1 + 40), *(unsigned __int8 *)(a1 + 474));
      if (*(_DWORD *)(v284 + 24) == 2)
      {
        if ((*(_WORD *)(v284 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v284, v286);
      }
      else
      {
        *(_DWORD *)(v284 + 24) -= 2;
      }
      goto LABEL_535;
    }
  }
LABEL_88:
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 8) + 528))(*(_QWORD *)(*(_QWORD *)(a1 + 8)
                                                                                                + 8));
  if (v65)
  {
    if (*(_DWORD *)(v65 + 24) == 2)
    {
      if ((*(_WORD *)(v65 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v65, v72);
    }
    else
    {
      *(_DWORD *)(v65 + 24) -= 2;
    }
  }
  if (v21)
  {
    if (*((_DWORD *)v21 + 6) == 2)
    {
      if ((*((_WORD *)v21 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v21, v72);
    }
    else
    {
      *((_DWORD *)v21 + 6) -= 2;
    }
  }
  if (v318)
  {
    if (*(_DWORD *)v318 == 2)
      WTF::StringImpl::destroy(v318, (WTF::StringImpl *)v72);
    else
      *(_DWORD *)v318 -= 2;
  }
  WebCore::SetCompositionScope::~SetCompositionScope((WebCore::SetCompositionScope *)&v319, v72);
  if (v14)
    goto LABEL_98;
}

unsigned int *WebCore::Editor::selectedText@<X0>(WebCore::Editor *this@<X0>, _QWORD *a2@<X8>)
{
  WebCore::Document *v4;
  uint64_t v5;
  __int16 v6;

  v4 = *(WebCore::Document **)(*((_QWORD *)this + 2) + 8);
  v5 = *((_QWORD *)v4 + 86);
  if (!v5)
    v5 = WebCore::Document::ensureQuirks(v4);
  if (*(_BYTE *)(v5 + 66))
    v6 = 512;
  else
    v6 = 2560;
  return WebCore::Editor::selectedText((uint64_t)this, v6, a2);
}

uint64_t WebCore::FrameSelection::setSelectedRange(uint64_t a1, uint64_t a2, char a3, int a4, int a5)
{
  uint64_t v5;
  unsigned __int16 v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::Document *v16;
  WebCore::Editor *v17;
  void *v18;
  WebCore::Editor *v19;
  uint64_t v20;
  void *v21;
  _BYTE v22[56];
  _BYTE v23[224];
  _BYTE v24[104];

  if (*(_BYTE *)(a2 + 32)
    && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 40) + 8) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) + 8))
  {
    WebCore::VisibleSelection::VisibleSelection((uint64_t)v24, a2, a3, 0);
    if (v24[97])
    {
      if (a4)
        v9 = 6;
      else
        v9 = 4;
      if (!a5)
        goto LABEL_15;
      WebCore::FrameSelection::FrameSelection((WebCore::FrameSelection *)v22, 0);
      WebCore::FrameSelection::setSelection((uint64_t)v22, (uint64_t)v24, v9, 0, 0, 0, 0);
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v12 = *(_QWORD *)(v11 + 528);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 8);
        if (v13)
        {
          if (*(_BYTE *)(v13 + 376))
            goto LABEL_14;
        }
      }
      v14 = *(_QWORD *)(v11 + 3056);
      if (!v14)
      {
        v16 = *(WebCore::Document **)(*(_QWORD *)(a1 + 32) + 8);
        v17 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
        WebCore::Editor::Editor(v17, v16);
        v19 = (WebCore::Editor *)*((_QWORD *)v16 + 382);
        *((_QWORD *)v16 + 382) = v17;
        if (v19)
        {
          WebCore::Editor::~Editor(v19, v18);
          if (*(_DWORD *)v20)
          {
            *(_QWORD *)(v20 + 496) = 0;
            *(_OWORD *)(v20 + 464) = 0u;
            *(_OWORD *)(v20 + 480) = 0u;
            *(_OWORD *)(v20 + 432) = 0u;
            *(_OWORD *)(v20 + 448) = 0u;
            *(_OWORD *)(v20 + 400) = 0u;
            *(_OWORD *)(v20 + 416) = 0u;
            *(_OWORD *)(v20 + 368) = 0u;
            *(_OWORD *)(v20 + 384) = 0u;
            *(_OWORD *)(v20 + 336) = 0u;
            *(_OWORD *)(v20 + 352) = 0u;
            *(_OWORD *)(v20 + 304) = 0u;
            *(_OWORD *)(v20 + 320) = 0u;
            *(_OWORD *)(v20 + 272) = 0u;
            *(_OWORD *)(v20 + 288) = 0u;
            *(_OWORD *)(v20 + 240) = 0u;
            *(_OWORD *)(v20 + 256) = 0u;
            *(_OWORD *)(v20 + 208) = 0u;
            *(_OWORD *)(v20 + 224) = 0u;
            *(_OWORD *)(v20 + 176) = 0u;
            *(_OWORD *)(v20 + 192) = 0u;
            *(_OWORD *)(v20 + 144) = 0u;
            *(_OWORD *)(v20 + 160) = 0u;
            *(_OWORD *)(v20 + 112) = 0u;
            *(_OWORD *)(v20 + 128) = 0u;
            *(_OWORD *)(v20 + 80) = 0u;
            *(_OWORD *)(v20 + 96) = 0u;
            *(_OWORD *)(v20 + 48) = 0u;
            *(_OWORD *)(v20 + 64) = 0u;
            *(_OWORD *)(v20 + 16) = 0u;
            *(_OWORD *)(v20 + 32) = 0u;
            *(_OWORD *)v20 = 0u;
          }
          else
          {
            WTF::fastFree((WTF *)v20, v21);
          }
        }
        v14 = *((_QWORD *)v16 + 382);
      }
      if (WebCore::Editor::shouldChangeSelection(v14, (WebCore::VisibleSelection *)(a1 + 56), (WebCore::VisibleSelection *)v23, v23[96], 0))
      {
LABEL_14:
        v9 |= 0x40u;
        WebCore::FrameSelection::~FrameSelection((WebCore::FrameSelection *)v22, v10);
LABEL_15:
        WebCore::FrameSelection::setSelection(a1, (uint64_t)v24, v9, 0, 0, 0, 0);
        v5 = 1;
LABEL_18:
        WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v24);
        return v5;
      }
      WebCore::FrameSelection::~FrameSelection((WebCore::FrameSelection *)v22, v10);
    }
    v5 = 0;
    goto LABEL_18;
  }
  return 0;
}

void WebCore::Editor::clearMisspellingsAndBadGrammar(WebCore::Editor *this, const WebCore::VisibleSelection *a2)
{
  void *v2;
  WebCore::Node *v3;
  WebCore::Node *v4;
  WebCore::Node *v5[2];
  WebCore::Node *v6;
  char v7;

  WebCore::VisibleSelection::toNormalizedRange(a2, v5);
  if (v7)
  {
    WebCore::removeMarkers((const WebCore::SimpleRange *)v5, 3, 0);
    if (v7)
    {
      v3 = v6;
      v6 = 0;
      if (v3)
      {
        if (*((_DWORD *)v3 + 6) == 2)
        {
          if ((*((_WORD *)v3 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v3, v2);
        }
        else
        {
          *((_DWORD *)v3 + 6) -= 2;
        }
      }
      v4 = v5[0];
      v5[0] = 0;
      if (v4)
      {
        if (*((_DWORD *)v4 + 6) == 2)
        {
          if ((*((_WORD *)v4 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v4, v2);
        }
        else
        {
          *((_DWORD *)v4 + 6) -= 2;
        }
      }
    }
  }
}

void WebCore::Editor::markMisspellingsAndBadGrammar(WebCore::Editor *this, const WebCore::VisibleSelection *a2, int a3, const WebCore::VisibleSelection *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  char v14;
  WebCore::Node *v15;
  WebCore::Node *v16;
  WebCore::Node *v17;
  WebCore::Node *v18;
  WebCore::Node *v19[2];
  WebCore::Node *v20;
  char v21;
  WebCore::Node *v22[2];
  WebCore::Node *v23;
  char v24;

  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 528);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      if ((*(_QWORD *)(*(_QWORD *)(v5 + 136) + 696) & 0x2000000000000000) != 0)
      {
        v7 = *((_QWORD *)this + 1);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 8);
          if (v8)
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8))
            {
              if (a3 && (v12 = *((_QWORD *)this + 1)) != 0 && (v13 = *(_QWORD *)(v12 + 8)) != 0)
              {
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 56))(v13))
                  v14 = 3;
                else
                  v14 = 1;
              }
              else
              {
                v14 = 1;
              }
              WebCore::VisibleSelection::toNormalizedRange(a2, v22);
              WebCore::VisibleSelection::toNormalizedRange(a4, v19);
              WebCore::Editor::markAllMisspellingsAndBadGrammarInRanges((uint64_t)this, v14, v22, (unint64_t)v22, (unint64_t)v19);
              if (v21)
              {
                v15 = v20;
                v20 = 0;
                if (v15)
                {
                  if (*((_DWORD *)v15 + 6) == 2)
                  {
                    if ((*((_WORD *)v15 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v15);
                  }
                  else
                  {
                    *((_DWORD *)v15 + 6) -= 2;
                  }
                }
                v16 = v19[0];
                v19[0] = 0;
                if (v16)
                {
                  if (*((_DWORD *)v16 + 6) == 2)
                  {
                    if ((*((_WORD *)v16 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v16);
                  }
                  else
                  {
                    *((_DWORD *)v16 + 6) -= 2;
                  }
                }
              }
              if (v24)
              {
                v17 = v23;
                v23 = 0;
                if (v17)
                {
                  if (*((_DWORD *)v17 + 6) == 2)
                  {
                    if ((*((_WORD *)v17 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v17);
                  }
                  else
                  {
                    *((_DWORD *)v17 + 6) -= 2;
                  }
                }
                v18 = v22[0];
                v22[0] = 0;
                if (v18)
                {
                  if (*((_DWORD *)v18 + 6) == 2)
                  {
                    if ((*((_WORD *)v18 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v18);
                  }
                  else
                  {
                    *((_DWORD *)v18 + 6) -= 2;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void WebCore::Editor::markMisspellingsAfterTypingToWord(WebCore::Editor *this, VisiblePosition *a2, const WebCore::VisibleSelection *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  WebCore::Node *v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::Node *v12;
  WebCore::Node *v13;
  WebCore::Node *v14;
  WebCore::Node *v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::Node *v18[2];
  WebCore::Node *v19;
  char v20;
  WebCore::Node *v21[13];
  WebCore::Node *v22[3];
  WebCore::Node *v23[3];
  _QWORD v24[2];
  uint64_t v25;
  char v26;
  _BYTE v27[104];

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  *(_DWORD *)(v3 + 24) += 2;
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v6 = *(_QWORD *)(v4 + 8);
    if (v6)
    {
      if ((*(unsigned int (**)(uint64_t, VisiblePosition *, const WebCore::VisibleSelection *))(*(_QWORD *)v6 + 40))(v6, a2, a3))
      {
        WebCore::startOfWord((uint64_t)a2, 1, (uint64_t)v21);
        WebCore::endOfWord((WebCore *)a2, 0, (uint64_t)v24);
        WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)v27, (const WebCore::VisiblePosition *)v21, (const WebCore::VisiblePosition *)v24, 0);
        v8 = v24[0];
        v24[0] = 0;
        if (v8)
        {
          if (*(_DWORD *)(v8 + 24) == 2)
          {
            if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v8);
          }
          else
          {
            *(_DWORD *)(v8 + 24) -= 2;
          }
        }
        v9 = v21[0];
        v21[0] = 0;
        if (v9)
        {
          if (*((_DWORD *)v9 + 6) == 2)
          {
            if ((*((_WORD *)v9 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v9);
          }
          else
          {
            *((_DWORD *)v9 + 6) -= 2;
          }
        }
        WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)v27, v24);
        v10 = *((_QWORD *)this + 1);
        if (v10
          && (v11 = *(_QWORD *)(v10 + 8)) != 0
          && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 56))(v11))
        {
          WebCore::previousBoundary((uint64_t)v23, (uint64_t)a2, (uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t, char *))WebCore::startSentenceBoundary, 1);
          WebCore::nextBoundary((uint64_t)v22, (uint64_t)a2, (WebCore::Node *)WebCore::endSentenceBoundary);
          WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)v21, (const WebCore::VisiblePosition *)v23, (const WebCore::VisiblePosition *)v22, 0);
          WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)v21, v18);
          if (v20)
          {
            WebCore::Editor::markAllMisspellingsAndBadGrammarInRanges((uint64_t)this, 67, v24, (unint64_t)v24, (unint64_t)v18);
            if (v20)
            {
              v12 = v19;
              v19 = 0;
              if (v12)
              {
                if (*((_DWORD *)v12 + 6) == 2)
                {
                  if ((*((_WORD *)v12 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v12);
                }
                else
                {
                  *((_DWORD *)v12 + 6) -= 2;
                }
              }
              v13 = v18[0];
              v18[0] = 0;
              if (v13)
              {
                if (*((_DWORD *)v13 + 6) == 2)
                {
                  if ((*((_WORD *)v13 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v13);
                }
                else
                {
                  *((_DWORD *)v13 + 6) -= 2;
                }
              }
            }
          }
          WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v21);
          v14 = v22[0];
          v22[0] = 0;
          if (v14)
          {
            if (*((_DWORD *)v14 + 6) == 2)
            {
              if ((*((_WORD *)v14 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v14);
            }
            else
            {
              *((_DWORD *)v14 + 6) -= 2;
            }
          }
          v15 = v23[0];
          v23[0] = 0;
          if (v15)
          {
            if (*((_DWORD *)v15 + 6) == 2)
            {
              if ((*((_WORD *)v15 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v15);
            }
            else
            {
              *((_DWORD *)v15 + 6) -= 2;
            }
          }
        }
        else
        {
          WebCore::Editor::markAllMisspellingsAndBadGrammarInRanges((uint64_t)this, 1, v24, (unint64_t)v24, (unint64_t)v24);
        }
        if (v26)
        {
          v16 = v25;
          v25 = 0;
          if (v16)
          {
            if (*(_DWORD *)(v16 + 24) == 2)
            {
              if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v16);
            }
            else
            {
              *(_DWORD *)(v16 + 24) -= 2;
            }
          }
          v17 = v24[0];
          v24[0] = 0;
          if (v17)
          {
            if (*(_DWORD *)(v17 + 24) == 2)
            {
              if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v17);
            }
            else
            {
              *(_DWORD *)(v17 + 24) -= 2;
            }
          }
        }
        WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v27);
      }
    }
  }
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
}

void WebCore::Editor::markAllMisspellingsAndBadGrammarInRanges(uint64_t a1, char a2, _BYTE *a3, unint64_t a4, unint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v11;
  WebCore::Node *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int isSpellCheckingEnabled;
  WebCore::Node *v17;
  int v18;
  uint64_t v19;
  int v20;
  int *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::Node **v25;
  uint64_t *v26;
  WebCore::Node **v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  const WebCore::Position *v31;
  WebCore::Node *v32;
  WebCore::Node *v33;
  WebCore::Node *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF *v47;
  int v48;
  unsigned int v49;
  WebCore::Node *v50;
  int v51;
  uint64_t v52;
  int v53;
  WebCore::Node *v54;
  int v55;
  uint64_t v56;
  int v57;
  char v58;
  char v59;
  char v60;
  char v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  WTF::StringImpl *v71;
  int v72;
  unsigned int v73;

  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    if (*(_QWORD *)(v5 + 8))
    {
      v6 = (unint64_t)a3;
      if (a3[32])
      {
        v7 = a5;
        if (((a2 & 2) == 0 || *(_BYTE *)(a5 + 32)) && !*(_BYTE *)(a1 + 474))
        {
          v11 = *(_QWORD *)a3;
          *(_DWORD *)(v11 + 24) = *(_DWORD *)(*(_QWORD *)a3 + 24) + 2;
          if (!WebCore::Node::computeEditability(v11, 0, 1))
            goto LABEL_33;
          v13 = v11;
          if ((*(_WORD *)(v11 + 28) & 8) == 0)
          {
            v13 = *(_QWORD *)(v11 + 32);
            if (!v13 || (*(_WORD *)(v13 + 28) & 8) == 0)
              goto LABEL_33;
          }
          *(_DWORD *)(v13 + 24) += 2;
          v14 = **(_QWORD **)(v13 + 40);
          if (v14)
            v15 = (*(_WORD *)(v14 + 28) & 0x80) == 0;
          else
            v15 = 1;
          if (v15 || *(_BYTE *)(v14 + 193))
            goto LABEL_14;
          WebCore::firstPositionInOrBeforeNode(v13, v12, (uint64_t)&v50);
          v32 = WebCore::enclosingTextFormControl((WebCore *)&v50, v31);
          v33 = v32;
          if (v32)
            *((_DWORD *)v32 + 6) += 2;
          v34 = v50;
          v50 = 0;
          if (v34)
          {
            if (*((_DWORD *)v34 + 6) == 2)
            {
              if ((*((_WORD *)v34 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v34);
            }
            else
            {
              *((_DWORD *)v34 + 6) -= 2;
            }
          }
          if (!v33)
          {
LABEL_14:
            isSpellCheckingEnabled = WebCore::Element::isSpellCheckingEnabled((WebCore::Element *)v13);
          }
          else
          {
            isSpellCheckingEnabled = WebCore::Element::isSpellCheckingEnabled(v33);
            if (*((_DWORD *)v33 + 6) == 2)
            {
              if ((*((_WORD *)v33 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v33);
            }
            else
            {
              *((_DWORD *)v33 + 6) -= 2;
            }
          }
          if (*(_DWORD *)(v13 + 24) != 2)
          {
            *(_DWORD *)(v13 + 24) -= 2;
            if ((isSpellCheckingEnabled & 1) == 0)
              goto LABEL_33;
LABEL_17:
            if ((a2 & 2) != 0)
            {
              if (*(_BYTE *)(v7 + 32))
              {
LABEL_19:
                v17 = *(WebCore::Node **)v7;
                *((_DWORD *)v17 + 6) = *(_DWORD *)(*(_QWORD *)v7 + 24) + 2;
                v50 = v17;
                v51 = *(_DWORD *)(v7 + 8);
                v18 = v51;
                v19 = *(_QWORD *)(v7 + 16);
                *(_DWORD *)(v19 + 24) += 2;
                v52 = v19;
                v53 = *(_DWORD *)(v7 + 24);
                v20 = v53;
                *((_DWORD *)v17 + 6) += 2;
                v54 = v17;
                v55 = v18;
                *(_DWORD *)(v19 + 24) += 2;
                v56 = v19;
                v57 = v20;
                v58 = 0;
                v59 = 0;
                v60 = 0;
                v61 = 0;
                v62 = 0;
                LOBYTE(v63) = 0;
                v64 = 0;
                LOBYTE(v65) = 0;
                v66 = 0;
                v67 = 0;
                v68 = 0;
                v69 = 0;
                v70 = 0;
                v21 = (int *)WebCore::TextCheckingParagraph::offsetAsRange((WebCore::TextCheckingParagraph *)&v50);
                v6 = WebCore::characterCount(v21, 0);
                v63 = v6;
                LOBYTE(v13) = 1;
                v64 = 1;
                if (v66)
                {
                  v23 = v65;
                  goto LABEL_24;
                }
LABEL_23:
                v23 = WebCore::characterCount((int *)&v50, 0);
                v65 = v23;
                v66 = v13;
LABEL_24:
                if (v6 >= v23 + v6)
                  goto LABEL_32;
                WebCore::TextCheckingParagraph::text((WebCore::TextCheckingParagraph *)&v50);
                if (!(_DWORD)v22)
                  goto LABEL_32;
                v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 680) + 664);
                v25 = WebCore::TextCheckingParagraph::paragraphRange((WebCore::TextCheckingParagraph *)&v50);
                v26 = (uint64_t *)v25;
                if ((v24 & 0x100000000) != 0)
                  v27 = v25;
                else
                  v27 = (WebCore::Node **)v7;
                if (*(_BYTE *)(a4 + 32))
                  v7 = a4;
                WebCore::plainText(v27, 0, 0, (const WTF::String *)&v71);
                v28 = v71;
                if (!v71)
                  goto LABEL_32;
                v29 = a2 & 0x43;
                if (*((_DWORD *)v71 + 1))
                {
                  v30 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0xA0);
                  WebCore::SpellCheckRequest::SpellCheckRequest((uint64_t)v30, (uint64_t)v27, (uint64_t *)v7, v26, (_DWORD **)&v71, v29, 1);
                  v28 = v71;
                  v71 = 0;
                  if (!v28)
                  {
LABEL_56:
                    if ((v24 & 0x100000000) != 0)
                    {
                      v38 = *(_QWORD *)(a1 + 104);
                      v71 = v30;
                      WebCore::SpellChecker::requestCheckingFor(v38, (uint64_t *)&v71);
                      v39 = v71;
                      v71 = 0;
                      if (v39)
                      {
                        if (*((_DWORD *)v39 + 2) == 1)
                          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v39 + 8))(v39);
                        else
                          --*((_DWORD *)v39 + 2);
                      }
                      goto LABEL_32;
                    }
                    v35 = *(_QWORD *)(a1 + 8);
                    if (v35 && (v36 = *(_QWORD *)(v35 + 8)) != 0)
                      v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 584))(v36);
                    else
                      v37 = 0;
                    v40 = WebCore::TextCheckingParagraph::text((WebCore::TextCheckingParagraph *)&v50);
                    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v37 + 56))(&v71, v37, v40, v41, v29, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 3064) + 56);
                    v42 = v71;
                    v43 = v73;
                    v47 = v71;
                    v48 = v72;
                    v49 = v73;
                    WebCore::Editor::markAndReplaceFor(a1, (uint64_t)v30, (uint64_t)&v47);
                    if (*((_DWORD *)v30 + 2) == 1)
                    {
                      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v30 + 8))(v30);
                      v43 = v49;
                      v42 = v47;
                      if (v49)
                      {
LABEL_66:
                        v44 = 48 * v43;
                        v45 = (uint64_t)v42 + 24;
                        do
                        {
                          v46 = *(WTF::StringImpl **)(v45 + 16);
                          *(_QWORD *)(v45 + 16) = 0;
                          if (v46)
                          {
                            if (*(_DWORD *)v46 == 2)
                              WTF::StringImpl::destroy(v46, v22);
                            else
                              *(_DWORD *)v46 -= 2;
                          }
                          WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v45, v22);
                          v45 += 48;
                          v44 -= 48;
                        }
                        while (v44);
                        v42 = v47;
                      }
                    }
                    else
                    {
                      --*((_DWORD *)v30 + 2);
                      if (v43)
                        goto LABEL_66;
                    }
                    if (v42)
                    {
                      v47 = 0;
                      v48 = 0;
                      WTF::fastFree(v42, v22);
                    }
                    goto LABEL_32;
                  }
                }
                else
                {
                  v30 = 0;
                  v71 = 0;
                }
                if (*(_DWORD *)v28 == 2)
                {
                  WTF::StringImpl::destroy(v28, v22);
                  if (v30)
                    goto LABEL_56;
                }
                else
                {
                  *(_DWORD *)v28 -= 2;
                  if (v30)
                    goto LABEL_56;
                }
LABEL_32:
                WebCore::TextCheckingParagraph::~TextCheckingParagraph((WebCore::TextCheckingParagraph *)&v50, v22);
                goto LABEL_33;
              }
            }
            else
            {
              v7 = v6;
              if (*(_BYTE *)(v6 + 32))
                goto LABEL_19;
            }
            __break(1u);
            goto LABEL_23;
          }
          if ((*(_WORD *)(v13 + 30) & 0x400) != 0)
          {
            if (isSpellCheckingEnabled)
              goto LABEL_17;
          }
          else
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v13);
            if ((isSpellCheckingEnabled & 1) != 0)
              goto LABEL_17;
          }
LABEL_33:
          if (*(_DWORD *)(v11 + 24) == 2)
          {
            if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v11);
          }
          else
          {
            *(_DWORD *)(v11 + 24) -= 2;
          }
        }
      }
    }
  }
}

void WebCore::Editor::markAndReplaceFor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  WebCore::Node *v9;
  int v10;
  WebCore::Node *v11;
  WebCore::Node *v12;
  WebCore::Node *v13;
  WebCore::Node *v14;
  uint64_t v15;
  WebCore::Node *v16;
  unint64_t v17;
  WebCore::Node *v18;
  char v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  int v26;
  uint64_t v28;
  uint64_t v29;
  WebCore::Node *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  int v39;
  int v41;
  int v42;
  uint64_t v44;
  _QWORD *v45;
  const WTF::String *v46;
  unint64_t v47;
  uint64_t v48;
  int *v49;
  char v51;
  uint64_t v52;
  WebCore::Node **v53;
  _DWORD *v54;
  uint64_t v55;
  uint64_t *v56;
  WebCore::Node *v57;
  WebCore::Node *v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  int *v77;
  uint64_t v78;
  unint64_t v79;
  WebCore::Node **v80;
  _DWORD *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  int v85;
  char *v86;
  WebCore::Node *v87;
  WebCore::Node *v88;
  uint64_t v89;
  int v90;
  WebCore::Node **v91;
  int v92;
  int v93;
  uint64_t v94;
  WebCore::Document *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WebCore::Node *v99;
  WebCore::Node *v100;
  int shouldInsertText;
  WebCore::Node *v102;
  uint64_t v103;
  WebCore::Node **v104;
  WebCore::Node *v105;
  WebCore::Node *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  _DWORD *v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  WebCore::Node *v116;
  WebCore::Node *v117;
  int *v118;
  WebCore::Node *v119;
  unint64_t v120;
  uint64_t v121;
  WebCore::Node *v122;
  uint64_t v123;
  WebCore::SpellingCorrectionCommand *v124;
  WebCore::CompositeEditCommand *v125;
  uint64_t v126;
  __int16 v127;
  uint64_t v128;
  uint64_t v129;
  WebCore::Node *v130;
  uint64_t v131;
  uint64_t v132;
  WebCore::Node *v133;
  int v134;
  WebCore::Node *v135;
  int v136;
  WebCore::Node *v137;
  int v138;
  WebCore::Node *v139;
  int v140;
  WebCore::Node *v141;
  WebCore::Node *v142;
  WebCore::Node *v143;
  WebCore::Node *v144;
  WebCore::Node *v145;
  WebCore::Node *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  uint64_t v150;
  WebCore::Node *v151;
  WebCore::Node *v152;
  WebCore::Node *v153;
  WebCore::Node *v154;
  const WTF::String *v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  WebCore::Node **v163;
  WebCore::Node *v164;
  uint64_t v165;
  WebCore::Editor *v166;
  void *v167;
  WebCore::Editor *v168;
  uint64_t v169;
  void *v170;
  uint64_t i;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  WebCore::AXObjectCache *v176;
  WebCore::Node *v177;
  WebCore::Node *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  WebCore::Node *v186;
  WebCore::Node *v187;
  WebCore::Node *v188;
  uint64_t v189;
  WTF::StringImpl *v190;
  int *v191;
  uint64_t v192;
  WTF::StringImpl *v193;
  uint64_t v194;
  unsigned int v195;
  int v196;
  WebCore::Node **v197;
  uint64_t v198;
  WebCore::Node *v199;
  WebCore::Node *v200;
  WebCore::Node *v201;
  WebCore::Node *v202;
  uint64_t v203;
  char v204;
  int v205;
  char v206;
  uint64_t v207;
  unsigned int v208;
  int v209;
  uint64_t v210;
  int v211;
  unint64_t v212;
  int v213;
  unsigned int v214;
  unsigned int v215;
  uint64_t v216;
  WebCore::Node *v217;
  int v218;
  char v219;
  WebCore::Node *v220;
  int v221;
  unsigned __int8 v222;
  WTF::StringImpl *v223;
  WebCore::Node *v224;
  int v225;
  WebCore::Node *v226;
  int v227;
  WTF *v228;
  uint64_t v229;
  WebCore::Node *v230;
  int v231;
  WebCore::Node *v232;
  int v233;
  WebCore::Node *v234;
  int v235;
  WebCore::Node *v236;
  int v237;
  uint64_t v238;
  int v239;
  WebCore::Node *v240;
  int v241;
  char v242;
  uint64_t v243;
  int v244;
  uint64_t v245;
  int v246;
  char v247;
  WTF::StringImpl *v248;
  __int128 v249;
  __int128 v250;
  _BYTE v251[25];
  WebCore::Node *v252;
  int v253;
  WebCore::Node *v254;
  int v255;
  WebCore::Node *v256;
  int v257;
  char v258;
  WebCore::Node *v259;
  int v260;
  __int128 v261;
  WebCore::Node *v262;
  int v263;
  WebCore::Node *v264;
  int v265;
  WebCore::Node *v266;
  int v267;
  uint64_t v268;
  int v269;
  WebCore::Node *v270;
  int v271;
  char v272;
  uint64_t v273;
  int v274;
  uint64_t v275;
  int v276;
  char v277;
  WTF::StringImpl *v278;
  __int128 v279;
  __int128 v280;
  _BYTE v281[25];
  uint64_t v282;

  v282 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(unsigned __int8 *)(a2 + 153);
  v7 = *(_QWORD *)(a2 + 88);
  *(_DWORD *)(v7 + 24) += 2;
  v8 = *(_DWORD *)(a2 + 96);
  v9 = *(WebCore::Node **)(a2 + 104);
  *((_DWORD *)v9 + 6) += 2;
  v10 = *(_DWORD *)(a2 + 112);
  v11 = *(WebCore::Node **)(a2 + 24);
  *((_DWORD *)v11 + 6) += 2;
  v230 = v11;
  v231 = *(_DWORD *)(a2 + 32);
  v12 = *(WebCore::Node **)(a2 + 40);
  *((_DWORD *)v12 + 6) += 2;
  v232 = v12;
  v233 = *(_DWORD *)(a2 + 48);
  v13 = *(WebCore::Node **)(a2 + 56);
  *((_DWORD *)v13 + 6) += 2;
  v234 = v13;
  v235 = *(_DWORD *)(a2 + 64);
  v14 = *(WebCore::Node **)(a2 + 72);
  *((_DWORD *)v14 + 6) += 2;
  v236 = v14;
  v237 = *(_DWORD *)(a2 + 80);
  LOBYTE(v238) = 0;
  *(_DWORD *)(v7 + 24) += 2;
  v238 = v7;
  v239 = v8;
  *((_DWORD *)v9 + 6) += 2;
  v240 = v9;
  v241 = v10;
  v242 = 1;
  LOBYTE(v243) = 0;
  v247 = 0;
  v248 = 0;
  LOBYTE(v249) = 0;
  BYTE8(v249) = 0;
  LOBYTE(v250) = 0;
  BYTE8(v250) = 0;
  v251[0] = 0;
  v251[8] = 0;
  v251[16] = 0;
  v251[24] = 0;
  if (*((_DWORD *)v9 + 6) == 2)
  {
    if ((*((_WORD *)v9 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v9);
  }
  else
  {
    *((_DWORD *)v9 + 6) -= 2;
  }
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  if ((v6 & 0x80) != 0)
  {
    v211 = 1;
  }
  else
  {
    v211 = (v6 >> 6) & 1;
    if ((v6 & 0x79) == 0)
      goto LABEL_20;
  }
  v15 = *(_QWORD *)(v5 + 3064);
  if (*(_BYTE *)(v15 + 153) == 1)
  {
    v16 = *(WebCore::Node **)(v15 + 136);
    if (v16)
      *((_DWORD *)v16 + 6) += 2;
    v217 = v16;
    v218 = *(_DWORD *)(v15 + 144);
    v219 = *(_BYTE *)(v15 + 148);
    WebCore::TextCheckingParagraph::offsetTo((WebCore::TextCheckingParagraph *)&v230, (const WebCore::Position *)&v217, (uint64_t)&v261);
    if ((_DWORD)v262)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_462:
      __break(0xC471u);
      JUMPOUT(0x195AD0340);
    }
    v17 = v261;
    v212 = v261;
    if (!(_QWORD)v261)
      goto LABEL_15;
    WebCore::TextCheckingParagraph::text((WebCore::TextCheckingParagraph *)&v230);
    if (v17 > a2)
      goto LABEL_15;
    v194 = WebCore::TextCheckingParagraph::text((WebCore::TextCheckingParagraph *)&v230);
    v195 = v17 - 1;
    if ((a2 & 0xFF00000000) != 0)
    {
      if (v195 < a2)
      {
        v196 = *(unsigned __int8 *)(v194 + v195);
LABEL_434:
        v209 = 1;
        if (v196 > 1523)
        {
          if (v196 == 1524 || v196 == 8217)
            goto LABEL_16;
        }
        else if (v196 == 39 || v196 == 64)
        {
          goto LABEL_16;
        }
LABEL_15:
        v209 = 0;
LABEL_16:
        v18 = v217;
        v217 = 0;
        if (v18)
        {
          if (*((_DWORD *)v18 + 6) == 2)
          {
            if ((*((_WORD *)v18 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v18);
          }
          else
          {
            *((_DWORD *)v18 + 6) -= 2;
          }
        }
        v19 = 1;
        goto LABEL_21;
      }
    }
    else if (v195 < a2)
    {
      v196 = *(unsigned __int16 *)(v194 + 2 * v195);
      goto LABEL_434;
    }
LABEL_459:
    __break(1u);
LABEL_460:
    __break(0xC471u);
    JUMPOUT(0x195AD0330);
  }
LABEL_20:
  v19 = 0;
  v209 = 0;
  v212 = 0;
LABEL_21:
  v228 = 0;
  v229 = 0;
  if (!*(_DWORD *)(a3 + 12))
  {
    WebCore::TextCheckingParagraph::~TextCheckingParagraph((WebCore::TextCheckingParagraph *)&v230, (WTF::StringImpl *)a2);
    goto LABEL_429;
  }
  v204 = v19;
  v207 = v5;
  v20 = 0;
  v206 = 0;
  v21 = 0;
  v213 = 0;
  v203 = a1;
  v214 = v6;
  v208 = v6 & 0xFFFFFF81;
  v22 = ((v6 & 0x38) == 0) & ~v211;
  if ((v6 & 4) != 0)
    v22 = 0;
  v205 = v22;
  v210 = a3;
  while (1)
  {
    if (BYTE8(v249))
    {
      v23 = v249;
    }
    else
    {
      v24 = (int *)WebCore::TextCheckingParagraph::offsetAsRange((WebCore::TextCheckingParagraph *)&v230);
      v23 = WebCore::characterCount(v24, 0);
      *(_QWORD *)&v249 = v23;
      BYTE8(v249) = 1;
    }
    if (BYTE8(v250))
    {
      v25 = v250;
    }
    else
    {
      v25 = WebCore::characterCount((int *)&v230, 0);
      *(_QWORD *)&v250 = v25;
      BYTE8(v250) = 1;
    }
    if (*(_DWORD *)(a3 + 12) <= v21)
      goto LABEL_462;
    v26 = *(unsigned __int8 *)(*(_QWORD *)a3 + 48 * v20);
    if ((v26 & (v26 - 1)) != 0 || v26 == 0)
      goto LABEL_163;
    v28 = *(_QWORD *)a3 + 48 * v20;
    v29 = *(_QWORD *)(v28 + 8);
    v216 = *(_QWORD *)(v28 + 16);
    v30 = WebCore::TextCheckingParagraph::automaticReplacementStart((WebCore::TextCheckingParagraph *)&v230);
    if (v251[24])
    {
      v31 = *(_QWORD *)&v251[16];
    }
    else
    {
      v31 = WebCore::characterCount((int *)&v234, 0);
      *(_QWORD *)&v251[16] = v31;
      v251[24] = 1;
    }
    v215 = v21;
    v32 = v216;
    if (*(_DWORD *)(a3 + 12) <= v21)
    {
      __break(0xC471u);
      JUMPOUT(0x195AD0348);
    }
    v33 = (uint64_t *)a3;
    v34 = v213;
    v35 = v29 + v213;
    v36 = v35 + v216;
    v37 = (char *)v30 + v213 + v31;
    v38 = *v33;
    if (v212 - 1 <= v35 + v216)
      v39 = v209;
    else
      v39 = 0;
    v41 = (unint64_t)v30 <= v36 && v36 <= (unint64_t)v37;
    v42 = v211;
    if (v26 != 64)
      v42 = 0;
    if (v41 != 1 && v42 != 0)
      v41 = *(_DWORD *)(v38 + 48 * v20 + 36) != 0;
    if (((v214 >> 1) & ~v41 & v42) == 1)
    {
      v44 = HIDWORD(v229);
      if (!HIDWORD(v229))
        goto LABEL_161;
      v45 = (_QWORD *)((char *)v228 + 8);
      while (*(v45 - 1) != v35 || v216 != *v45)
      {
        v45 += 2;
        if (!--v44)
        {
          v41 = 0;
          goto LABEL_64;
        }
      }
      v41 = 1;
    }
LABEL_64:
    v46 = (const WTF::String *)(v38 + 48 * v20 + 40);
    if (v208 != 1 || v26 != 1)
      break;
    if (BYTE8(v249))
    {
      v47 = v249;
    }
    else
    {
      v49 = (int *)WebCore::TextCheckingParagraph::offsetAsRange((WebCore::TextCheckingParagraph *)&v230);
      v47 = WebCore::characterCount(v49, 0);
      v32 = v216;
      *(_QWORD *)&v249 = v47;
      BYTE8(v249) = 1;
    }
    if (v35 < v47 || v36 > v23 + v213 + v25)
      v51 = 1;
    else
      v51 = v39;
    if ((v51 & 1) != 0)
      goto LABEL_161;
    v52 = v32;
    v53 = WebCore::TextCheckingParagraph::paragraphRange((WebCore::TextCheckingParagraph *)&v230);
    WebCore::resolveCharacterRange(v53, v35, v52, 0, &v217);
    v54 = *(_DWORD **)v46;
    a3 = v210;
    if (*(_QWORD *)v46)
      *v54 += 2;
    *(_QWORD *)&v261 = v54;
    LODWORD(v268) = 0;
    v55 = *(_QWORD *)(*((_QWORD *)v217 + 5) + 8);
    *(_DWORD *)(v55 + 24) += 2;
    v56 = *(uint64_t **)(v55 + 1496);
    if (!v56)
      v56 = (uint64_t *)WebCore::Document::ensureMarkers((WebCore::Document *)v55);
    ++*(_DWORD *)v56;
    WebCore::DocumentMarkerController::addMarker(v56, (const WebCore::SimpleRange *)&v217, 1, (uint64_t)&v261);
    v21 = v215;
    if (!*(_DWORD *)v56)
    {
      __break(0xC471u);
      goto LABEL_459;
    }
    --*(_DWORD *)v56;
    if (*(_DWORD *)(v55 + 24) == 2)
    {
      if ((*(_WORD *)(v55 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v55);
    }
    else
    {
      *(_DWORD *)(v55 + 24) -= 2;
    }
    if ((_DWORD)v268 != -1)
      ((void (*)(WebCore::Node **, __int128 *))off_1E33AA370[v268])(&v256, &v261);
    v57 = v220;
    v220 = 0;
    if (v57)
    {
      if (*((_DWORD *)v57 + 6) == 2)
      {
        if ((*((_WORD *)v57 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v57);
      }
      else
      {
        *((_DWORD *)v57 + 6) -= 2;
      }
    }
    v58 = v217;
    v217 = 0;
    if (v58)
    {
      if (*((_DWORD *)v58 + 6) == 2)
      {
        if ((*((_WORD *)v58 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v58);
      }
      else
      {
        *((_DWORD *)v58 + 6) -= 2;
      }
    }
LABEL_163:
    v20 = v21 + 1;
    v21 = v20;
    if (*(_DWORD *)(a3 + 12) <= v20)
      goto LABEL_401;
  }
  if ((v214 & 2) == 0 || v26 != 2)
    goto LABEL_144;
  if (BYTE8(v249))
  {
    v48 = v249;
  }
  else
  {
    v59 = (int *)WebCore::TextCheckingParagraph::offsetAsRange((WebCore::TextCheckingParagraph *)&v230);
    v60 = WebCore::characterCount(v59, 0);
    v34 = v213;
    v48 = v60;
    *(_QWORD *)&v249 = v60;
    BYTE8(v249) = 1;
  }
  if (BYTE8(v250))
  {
    v61 = v250;
  }
  else
  {
    v62 = v34;
    v61 = WebCore::characterCount((int *)&v230, 0);
    v34 = v62;
    *(_QWORD *)&v250 = v61;
    BYTE8(v250) = 1;
  }
  if (v35 >= v61 + v48)
    goto LABEL_161;
  if (BYTE8(v249))
  {
    v63 = v249;
  }
  else
  {
    v64 = v34;
    v65 = (int *)WebCore::TextCheckingParagraph::offsetAsRange((WebCore::TextCheckingParagraph *)&v230);
    v63 = WebCore::characterCount(v65, 0);
    v34 = v64;
    *(_QWORD *)&v249 = v63;
    BYTE8(v249) = 1;
  }
  if (v36 > v63)
  {
    a3 = v210;
    if (*(_DWORD *)(v210 + 12) <= v215)
    {
LABEL_465:
      __break(0xC471u);
      JUMPOUT(0x195AD02F0);
    }
    v66 = *(_QWORD *)v210 + 48 * v20;
    v67 = *(unsigned int *)(v66 + 36);
    if ((_DWORD)v67)
    {
      v68 = *(uint64_t **)(v66 + 24);
      v69 = 40 * v67;
      while (1)
      {
        v71 = *v68;
        v70 = v68[1];
        if (BYTE8(v249))
        {
          v72 = v249;
        }
        else
        {
          v73 = (int *)WebCore::TextCheckingParagraph::offsetAsRange((WebCore::TextCheckingParagraph *)&v230);
          v72 = WebCore::characterCount(v73, 0);
          *(_QWORD *)&v249 = v72;
          BYTE8(v249) = 1;
        }
        if (BYTE8(v250))
        {
          v74 = v250;
        }
        else
        {
          v74 = WebCore::characterCount((int *)&v230, 0);
          *(_QWORD *)&v250 = v74;
          BYTE8(v250) = 1;
        }
        v75 = v71 + v35;
        if (v75 < v74 + v72)
        {
          if (BYTE8(v249))
          {
            v76 = v249;
          }
          else
          {
            v77 = (int *)WebCore::TextCheckingParagraph::offsetAsRange((WebCore::TextCheckingParagraph *)&v230);
            v76 = WebCore::characterCount(v77, 0);
            *(_QWORD *)&v249 = v76;
            BYTE8(v249) = 1;
          }
          if (v75 + v70 > v76)
          {
            v78 = v68[1];
            v79 = *v68 + v35;
            v80 = WebCore::TextCheckingParagraph::paragraphRange((WebCore::TextCheckingParagraph *)&v230);
            WebCore::resolveCharacterRange(v80, v79, v78, 0, &v217);
            v81 = (_DWORD *)v68[4];
            if (v81)
              *v81 += 2;
            *(_QWORD *)&v261 = v81;
            LODWORD(v268) = 0;
            v82 = *(_QWORD *)(*((_QWORD *)v217 + 5) + 8);
            *(_DWORD *)(v82 + 24) += 2;
            v83 = *(uint64_t **)(v82 + 1496);
            if (!v83)
              v83 = (uint64_t *)WebCore::Document::ensureMarkers((WebCore::Document *)v82);
            ++*(_DWORD *)v83;
            WebCore::DocumentMarkerController::addMarker(v83, (const WebCore::SimpleRange *)&v217, 2, (uint64_t)&v261);
            if (!*(_DWORD *)v83)
              goto LABEL_465;
            --*(_DWORD *)v83;
            if (*(_DWORD *)(v82 + 24) == 2)
            {
              if ((*(_WORD *)(v82 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v82);
            }
            else
            {
              *(_DWORD *)(v82 + 24) -= 2;
            }
            if ((_DWORD)v268 != -1)
              ((void (*)(WebCore::Node **, __int128 *))off_1E33AA370[v268])(&v256, &v261);
            v84 = v68[1];
            *(_QWORD *)&v261 = *v68 + v35;
            *((_QWORD *)&v261 + 1) = v84;
            v85 = HIDWORD(v229);
            if (HIDWORD(v229) == (_DWORD)v229)
            {
              v86 = WTF::Vector<std::optional<WebCore::GPUColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v228, HIDWORD(v229) + 1, (unint64_t)&v261);
              v85 = HIDWORD(v229);
              *((_OWORD *)v228 + HIDWORD(v229)) = *(_OWORD *)v86;
            }
            else
            {
              *((_OWORD *)v228 + HIDWORD(v229)) = v261;
            }
            HIDWORD(v229) = v85 + 1;
            v87 = v220;
            v220 = 0;
            if (v87)
            {
              if (*((_DWORD *)v87 + 6) == 2)
              {
                if ((*((_WORD *)v87 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v87);
              }
              else
              {
                *((_DWORD *)v87 + 6) -= 2;
              }
            }
            v88 = v217;
            v217 = 0;
            if (v88)
            {
              if (*((_DWORD *)v88 + 6) == 2)
              {
                if ((*((_WORD *)v88 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v88);
              }
              else
              {
                *((_DWORD *)v88 + 6) -= 2;
              }
            }
          }
        }
        v68 += 5;
        v69 -= 40;
        if (!v69)
          goto LABEL_161;
      }
    }
    goto LABEL_162;
  }
LABEL_144:
  if (!v41
    || ((v26 - 4) > 0x3C || ((1 << (v26 - 4)) & 0x1000000010001011) == 0)
    && v26 != 128
    || (v214 & 0x80) != 0 && (v36 < (unint64_t)v37 || v26 != 64 && v26 != 32))
  {
LABEL_161:
    a3 = v210;
LABEL_162:
    v21 = v215;
    goto LABEL_163;
  }
  v89 = v34;
  if (*(_QWORD *)v46)
    v90 = *(_DWORD *)(*(_QWORD *)v46 + 4);
  else
    v90 = 0;
  v91 = WebCore::TextCheckingParagraph::paragraphRange((WebCore::TextCheckingParagraph *)&v230);
  WebCore::resolveCharacterRange(v91, v35, v216, 0, &v224);
  if (v26 == 4 && v212 != v36 + 1)
    goto LABEL_155;
  v92 = v205;
  if (!v90)
    v92 = 1;
  if (((v92 | v39) & 1) != 0)
  {
LABEL_155:
    v93 = 4;
    a3 = v210;
    v21 = v215;
    goto LABEL_218;
  }
  WebCore::plainText(&v224, 0, 0, (const WTF::String *)&v223);
  if (*(_DWORD *)(v210 + 12) <= v215)
  {
    __break(0xC471u);
    JUMPOUT(0x195AD0350);
  }
  if ((v214 & 0x80) != 0)
  {
    if ((char *)v36 == v37)
      v93 = 2;
    else
      v93 = 4;
    a3 = v210;
    v21 = v215;
    goto LABEL_215;
  }
  WebCore::VisibleSelection::VisibleSelection((uint64_t)&v217, (uint64_t)&v224, 1, 0);
  a3 = v210;
  if ((WebCore::operator==((uint64_t)&v217, *(_QWORD *)(v207 + 3064) + 56) & 1) == 0)
  {
    v94 = *(_QWORD *)(v207 + 3064);
    v95 = *(WebCore::Document **)(*(_QWORD *)(v94 + 32) + 8);
    v96 = *((_QWORD *)v95 + 66);
    if (!v96 || (v97 = *(_QWORD *)(v96 + 8)) == 0 || !*(_BYTE *)(v97 + 376))
    {
      v98 = *((_QWORD *)v95 + 382);
      if (!v98)
      {
        v166 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
        WebCore::Editor::Editor(v166, v95);
        v168 = (WebCore::Editor *)*((_QWORD *)v95 + 382);
        *((_QWORD *)v95 + 382) = v166;
        if (v168)
        {
          WebCore::Editor::~Editor(v168, v167);
          if (*(_DWORD *)v169)
          {
            *(_QWORD *)(v169 + 496) = 0;
            *(_OWORD *)(v169 + 464) = 0u;
            *(_OWORD *)(v169 + 480) = 0u;
            *(_OWORD *)(v169 + 432) = 0u;
            *(_OWORD *)(v169 + 448) = 0u;
            *(_OWORD *)(v169 + 400) = 0u;
            *(_OWORD *)(v169 + 416) = 0u;
            *(_OWORD *)(v169 + 368) = 0u;
            *(_OWORD *)(v169 + 384) = 0u;
            *(_OWORD *)(v169 + 336) = 0u;
            *(_OWORD *)(v169 + 352) = 0u;
            *(_OWORD *)(v169 + 304) = 0u;
            *(_OWORD *)(v169 + 320) = 0u;
            *(_OWORD *)(v169 + 272) = 0u;
            *(_OWORD *)(v169 + 288) = 0u;
            *(_OWORD *)(v169 + 240) = 0u;
            *(_OWORD *)(v169 + 256) = 0u;
            *(_OWORD *)(v169 + 208) = 0u;
            *(_OWORD *)(v169 + 224) = 0u;
            *(_OWORD *)(v169 + 176) = 0u;
            *(_OWORD *)(v169 + 192) = 0u;
            *(_OWORD *)(v169 + 144) = 0u;
            *(_OWORD *)(v169 + 160) = 0u;
            *(_OWORD *)(v169 + 112) = 0u;
            *(_OWORD *)(v169 + 128) = 0u;
            *(_OWORD *)(v169 + 80) = 0u;
            *(_OWORD *)(v169 + 96) = 0u;
            *(_OWORD *)(v169 + 48) = 0u;
            *(_OWORD *)(v169 + 64) = 0u;
            *(_OWORD *)(v169 + 16) = 0u;
            *(_OWORD *)(v169 + 32) = 0u;
            *(_OWORD *)v169 = 0u;
          }
          else
          {
            WTF::fastFree((WTF *)v169, v170);
          }
        }
        v98 = *((_QWORD *)v95 + 382);
        a3 = v210;
      }
      if (!WebCore::Editor::shouldChangeSelection(v98, (WebCore::VisibleSelection *)(v94 + 56), (WebCore::VisibleSelection *)&v217, v222, 0))
      {
        v93 = 4;
        goto LABEL_213;
      }
    }
  }
  if (v26 == 4)
  {
    WebCore::FrameSelection::setSelection(*(_QWORD *)(v207 + 3064), (uint64_t)&v217, 6u, 0, 0, 0, 0);
    v107 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v203 + 16) + 8) + 3064);
    v108 = *(_QWORD *)(v107 + 120);
    v21 = v215;
    if (v108)
    {
      v109 = *(_BYTE *)(v107 + 132) & 7;
      if (v109 <= 4 && (((1 << v109) & 0x19) != 0 || (v108 = *(_QWORD *)(v108 + 32)) != 0))
      {
        *(_DWORD *)(v108 + 24) += 2;
        v110 = WebCore::Node::computeEditability(v108, 0, 1);
        if (*(_DWORD *)(v108 + 24) == 2)
        {
          if ((*(_WORD *)(v108 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v108);
        }
        else
        {
          *(_DWORD *)(v108 + 24) -= 2;
        }
        if (v110 == 2)
        {
          *(_DWORD *)(v207 + 24) += 2;
          *(_QWORD *)&v261 = v207;
          v111 = WTF::fastMalloc((WTF *)0x120);
          v112 = WebCore::EditCommand::EditCommand(v111, (uint64_t *)&v261, 59);
          *(_OWORD *)(v112 + 248) = 0u;
          *(_OWORD *)(v112 + 264) = 0u;
          *(_QWORD *)v112 = off_1E33A9BF8;
          v113 = *(_DWORD **)v46;
          if (*(_QWORD *)v46)
            *v113 += 2;
          *(_QWORD *)(v111 + 280) = v113;
          WebCore::CompositeEditCommand::apply((WebCore::CompositeEditCommand *)v111);
          if (*(_DWORD *)(v111 + 8) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
          else
            --*(_DWORD *)(v111 + 8);
          v114 = v261;
          *(_QWORD *)&v261 = 0;
          if (v114)
          {
            if (*(_DWORD *)(v114 + 24) == 2)
            {
              if ((*(_WORD *)(v114 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v114);
            }
            else
            {
              *(_DWORD *)(v114 + 24) -= 2;
            }
          }
        }
      }
    }
    v204 = 0;
LABEL_210:
    v93 = 0;
    v206 = 1;
    goto LABEL_214;
  }
  if (!WebCore::editableRootForPosition(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v203 + 16) + 8) + 3064) + 120, 0))
    goto LABEL_211;
  v99 = v224;
  *((_DWORD *)v224 + 6) += 2;
  *(_QWORD *)&v261 = v99;
  DWORD2(v261) = v225;
  v100 = v226;
  *((_DWORD *)v226 + 6) += 2;
  v262 = v100;
  v263 = v227;
  LOBYTE(v264) = 1;
  shouldInsertText = WebCore::Editor::shouldInsertText(v203, (uint64_t)v46, (uint64_t)&v261, 0);
  if ((_BYTE)v264)
  {
    v102 = v262;
    v262 = 0;
    if (v102)
    {
      if (*((_DWORD *)v102 + 6) == 2)
      {
        if ((*((_WORD *)v102 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v102);
      }
      else
      {
        *((_DWORD *)v102 + 6) -= 2;
      }
    }
    v103 = v261;
    *(_QWORD *)&v261 = 0;
    if (v103)
    {
      if (*(_DWORD *)(v103 + 24) == 2)
      {
        if ((*(_WORD *)(v103 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v103);
      }
      else
      {
        *(_DWORD *)(v103 + 24) -= 2;
      }
    }
  }
  if (!shouldInsertText)
  {
LABEL_211:
    v93 = 0;
LABEL_213:
    v21 = v215;
    goto LABEL_214;
  }
  v104 = WebCore::TextCheckingParagraph::paragraphRange((WebCore::TextCheckingParagraph *)&v230);
  v105 = *v104;
  if ((*((_BYTE *)*v104 + 22) & 0x18) != 0)
  {
    v106 = (WebCore::Node *)**((_QWORD **)v105 + 5);
  }
  else
  {
    do
    {
      v106 = v105;
      v105 = (WebCore::Node *)*((_QWORD *)v105 + 4);
    }
    while (v105);
  }
  if ((*((_WORD *)v106 + 14) & 4) == 0)
    goto LABEL_460;
  *((_DWORD *)v106 + 6) += 4;
  v118 = (int *)WebCore::TextCheckingParagraph::paragraphRange((WebCore::TextCheckingParagraph *)&v230);
  *((_DWORD *)v106 + 6) += 2;
  *(_QWORD *)&v261 = v106;
  DWORD2(v261) = 0;
  v119 = *(WebCore::Node **)v118;
  *((_DWORD *)v119 + 6) = *(_DWORD *)(*(_QWORD *)v118 + 24) + 2;
  v262 = v119;
  v263 = v118[2];
  v120 = WebCore::characterCount((int *)&v261, 0);
  v121 = WebCore::characterCount(v118, 0);
  v122 = v262;
  v262 = 0;
  if (v122)
  {
    if (*((_DWORD *)v122 + 6) == 2)
    {
      if ((*((_WORD *)v122 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v122);
    }
    else
    {
      *((_DWORD *)v122 + 6) -= 2;
    }
  }
  v123 = v261;
  *(_QWORD *)&v261 = 0;
  if (v123)
  {
    if (*(_DWORD *)(v123 + 24) == 2)
    {
      if ((*(_WORD *)(v123 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v123);
    }
    else
    {
      *(_DWORD *)(v123 + 24) -= 2;
    }
  }
  if (*((_DWORD *)v106 + 6) == 2)
  {
    if ((*((_WORD *)v106 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v106);
  }
  else
  {
    *((_DWORD *)v106 + 6) -= 2;
  }
  v124 = (WebCore::SpellingCorrectionCommand *)WTF::fastMalloc((WTF *)0x1B8);
  v125 = WebCore::SpellingCorrectionCommand::SpellingCorrectionCommand(v124, (const WebCore::SimpleRange *)&v224, v46);
  WebCore::CompositeEditCommand::apply(v125);
  if (*((_DWORD *)v124 + 2) == 1)
    (*(void (**)(WebCore::SpellingCorrectionCommand *))(*(_QWORD *)v124 + 8))(v124);
  else
    --*((_DWORD *)v124 + 2);
  v126 = *(_QWORD *)v46;
  if (*(_QWORD *)v46)
    v126 = *(unsigned int *)(v126 + 4);
  *((_DWORD *)v106 + 6) += 4;
  v127 = *((_WORD *)v106 + 14);
  if ((v127 & 1) != 0)
  {
    v129 = *((_QWORD *)v106 + 10);
    if (v129)
      LODWORD(v129) = *(_DWORD *)(v129 + 4);
  }
  else if ((v127 & 4) != 0 && (v128 = *((_QWORD *)v106 + 10)) != 0)
  {
    LODWORD(v129) = 0;
    do
    {
      LODWORD(v129) = v129 + 1;
      v128 = *(_QWORD *)(v128 + 56);
    }
    while (v128);
  }
  else
  {
    LODWORD(v129) = 0;
  }
  *(_QWORD *)&v261 = v106;
  DWORD2(v261) = 0;
  v262 = v106;
  v263 = v129;
  WebCore::resolveCharacterRange(&v261, v120, v121 - v216 + v126, 0, &v256);
  v130 = v262;
  v262 = 0;
  if (v130)
  {
    if (*((_DWORD *)v130 + 6) == 2)
    {
      if ((*((_WORD *)v130 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v130);
    }
    else
    {
      *((_DWORD *)v130 + 6) -= 2;
    }
  }
  v131 = v261;
  *(_QWORD *)&v261 = 0;
  if (v131)
  {
    if (*(_DWORD *)(v131 + 24) == 2)
    {
      if ((*(_WORD *)(v131 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v131);
    }
    else
    {
      *(_DWORD *)(v131 + 24) -= 2;
    }
  }
  if (*(_QWORD *)v46)
    v132 = *(unsigned int *)(*(_QWORD *)v46 + 4);
  else
    v132 = 0;
  WebCore::resolveCharacterRange(&v256, v35, v132, 0, &v252);
  v133 = v256;
  *((_DWORD *)v256 + 6) += 2;
  v134 = v257;
  v135 = v259;
  *((_DWORD *)v259 + 6) += 2;
  v136 = v260;
  v137 = v252;
  *((_DWORD *)v252 + 6) += 2;
  v138 = v253;
  DWORD2(v261) = v253;
  v139 = v254;
  *((_DWORD *)v254 + 6) += 2;
  v262 = v139;
  v140 = v255;
  v263 = v255;
  *((_DWORD *)v137 + 6) += 2;
  v264 = v137;
  v265 = v138;
  *((_DWORD *)v139 + 6) += 2;
  v266 = v139;
  v267 = v140;
  LOBYTE(v268) = 0;
  *((_DWORD *)v133 + 6) += 2;
  v268 = (uint64_t)v133;
  v269 = v134;
  *((_DWORD *)v135 + 6) += 2;
  v270 = v135;
  v271 = v136;
  v272 = 1;
  LOBYTE(v273) = 0;
  v277 = 0;
  v278 = 0;
  LOBYTE(v279) = 0;
  BYTE8(v279) = 0;
  LOBYTE(v280) = 0;
  BYTE8(v280) = 0;
  v281[0] = 0;
  v281[8] = 0;
  v281[16] = 0;
  v281[24] = 0;
  *(_QWORD *)&v261 = 0;
  v141 = v230;
  v230 = v137;
  if (v141)
  {
    if (*((_DWORD *)v141 + 6) == 2)
    {
      if ((*((_WORD *)v141 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v141);
        v138 = DWORD2(v261);
        v139 = v262;
      }
    }
    else
    {
      *((_DWORD *)v141 + 6) -= 2;
    }
  }
  v231 = v138;
  v262 = 0;
  v142 = v232;
  v232 = v139;
  if (v142)
  {
    if (*((_DWORD *)v142 + 6) == 2)
    {
      if ((*((_WORD *)v142 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v142);
    }
    else
    {
      *((_DWORD *)v142 + 6) -= 2;
    }
  }
  v233 = v263;
  v143 = v264;
  v264 = 0;
  v144 = v234;
  v234 = v143;
  if (v144)
  {
    if (*((_DWORD *)v144 + 6) == 2)
    {
      if ((*((_WORD *)v144 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v144);
    }
    else
    {
      *((_DWORD *)v144 + 6) -= 2;
    }
  }
  v235 = v265;
  v145 = v266;
  v266 = 0;
  v146 = v236;
  v236 = v145;
  if (v146)
  {
    if (*((_DWORD *)v146 + 6) == 2)
    {
      if ((*((_WORD *)v146 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v146);
    }
    else
    {
      *((_DWORD *)v146 + 6) -= 2;
    }
  }
  v237 = v267;
  std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>((uint64_t)&v238, &v268);
  std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>((uint64_t)&v243, &v273);
  v148 = v278;
  v278 = 0;
  v149 = v248;
  v248 = v148;
  if (v149)
  {
    if (*(_DWORD *)v149 == 2)
      WTF::StringImpl::destroy(v149, v147);
    else
      *(_DWORD *)v149 -= 2;
  }
  v249 = v279;
  v250 = v280;
  *(_OWORD *)v251 = *(_OWORD *)v281;
  *(_OWORD *)&v251[9] = *(_OWORD *)&v281[9];
  WebCore::TextCheckingParagraph::~TextCheckingParagraph((WebCore::TextCheckingParagraph *)&v261, v147);
  if (*((_DWORD *)v135 + 6) != 2)
  {
    *((_DWORD *)v135 + 6) -= 2;
    goto LABEL_280;
  }
  v150 = v216;
  if ((*((_WORD *)v135 + 15) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef(v135);
LABEL_280:
    v150 = v216;
  }
  if (*((_DWORD *)v133 + 6) == 2)
  {
    if ((*((_WORD *)v133 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v133);
      v150 = v216;
    }
  }
  else
  {
    *((_DWORD *)v133 + 6) -= 2;
  }
  v151 = v254;
  v254 = 0;
  if (v151)
  {
    if (*((_DWORD *)v151 + 6) == 2)
    {
      if ((*((_WORD *)v151 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v151);
        v150 = v216;
      }
    }
    else
    {
      *((_DWORD *)v151 + 6) -= 2;
    }
  }
  v152 = v252;
  v252 = 0;
  if (v152)
  {
    if (*((_DWORD *)v152 + 6) == 2)
    {
      if ((*((_WORD *)v152 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v152);
        v150 = v216;
      }
    }
    else
    {
      *((_DWORD *)v152 + 6) -= 2;
    }
  }
  v153 = v259;
  v259 = 0;
  if (v153)
  {
    if (*((_DWORD *)v153 + 6) == 2)
    {
      if ((*((_WORD *)v153 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v153);
        v150 = v216;
      }
    }
    else
    {
      *((_DWORD *)v153 + 6) -= 2;
    }
  }
  v154 = v256;
  v256 = 0;
  if (v154)
  {
    if (*((_DWORD *)v154 + 6) == 2)
    {
      if ((*((_WORD *)v154 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v154);
        v150 = v216;
      }
    }
    else
    {
      *((_DWORD *)v154 + 6) -= 2;
    }
  }
  if (*((_DWORD *)v106 + 6) == 2)
  {
    if ((*((_WORD *)v106 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v106);
      v150 = v216;
    }
  }
  else
  {
    *((_DWORD *)v106 + 6) -= 2;
  }
  v155 = v46;
  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    if (*(_BYTE *)(v207 + 3362) || *(_BYTE *)(v207 + 3405))
    {
      i = v207;
      v179 = *(_QWORD *)(v207 + 528);
      if (v179)
      {
        v180 = *(_QWORD *)(v179 + 8);
        i = v207;
        if (v180)
        {
          v181 = *(_QWORD *)(v180 + 120);
          i = v207;
          if (v181)
          {
            v182 = *(_QWORD *)(v181 + 8);
            for (i = v207; v182; v182 = *(_QWORD *)(v185 + 8))
            {
              i = *(_QWORD *)(*(_QWORD *)(v182 + 40) + 8);
              v183 = *(_QWORD *)(i + 528);
              if (!v183)
                break;
              v184 = *(_QWORD *)(v183 + 8);
              if (!v184)
                break;
              v185 = *(_QWORD *)(v184 + 120);
              if (!v185)
                break;
            }
          }
        }
      }
    }
    else
    {
      i = v207;
      v172 = *(_QWORD *)(v207 + 528);
      if (v172)
      {
        v173 = *(_QWORD *)(v172 + 8);
        i = v207;
        if (v173)
        {
          v174 = *(_QWORD *)(*(_QWORD *)(v173 + 128) + 8);
          i = v207;
          if (v174)
          {
            i = v207;
            if (!*(_BYTE *)(v174 + 144))
            {
              v175 = *(_QWORD *)(v174 + 296);
              i = v207;
              if (v175)
                i = v175;
            }
          }
        }
      }
    }
    v176 = *(WebCore::AXObjectCache **)(i + 1488);
    a3 = v210;
    v150 = v216;
    if (v176)
    {
      v177 = (WebCore::Node *)WebCore::editableRootForPosition(*(_QWORD *)(v207 + 3064) + 120, 0);
      v150 = v216;
      if (v177)
      {
        v178 = v177;
        *((_DWORD *)v177 + 6) += 2;
        WebCore::AXObjectCache::postNotification(v176, v177, 3, 0);
        if (*((_DWORD *)v178 + 6) == 2)
        {
          a3 = v210;
          v150 = v216;
          if ((*((_WORD *)v178 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v178);
            v150 = v216;
          }
        }
        else
        {
          *((_DWORD *)v178 + 6) -= 2;
          a3 = v210;
          v150 = v216;
        }
      }
    }
  }
  v156 = *(_DWORD *)(a3 + 12);
  if (v156 <= v215 + 1)
    v157 = v215 + 1;
  else
    v157 = *(_DWORD *)(a3 + 12);
  v158 = v157 - 1;
  v159 = v215 - 1;
  while (1)
  {
    v160 = v159 + 2;
    if (v156 <= v159 + 2)
      break;
    ++v159;
    if (*(_QWORD *)(*(_QWORD *)a3 + 48 * v160 + 8) + v89 > v35)
      goto LABEL_306;
  }
  v159 = v158;
LABEL_306:
  if (*(_QWORD *)v155)
  {
    v161 = *(unsigned int *)(*(_QWORD *)v155 + 4);
    v213 += v161 - v150;
    if (v35 < v212)
      v212 = v212 - v150 + v161;
    if (v26 == 64)
    {
LABEL_310:
      v162 = v161;
      v163 = WebCore::TextCheckingParagraph::paragraphRange((WebCore::TextCheckingParagraph *)&v230);
      WebCore::resolveCharacterRange(v163, v35, v162, 0, (WebCore::Node **)&v261);
      v164 = v262;
      v262 = 0;
      v21 = v159;
      if (v164)
      {
        if (*((_DWORD *)v164 + 6) == 2)
        {
          if ((*((_WORD *)v164 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v164);
        }
        else
        {
          *((_DWORD *)v164 + 6) -= 2;
        }
      }
      v165 = v261;
      *(_QWORD *)&v261 = 0;
      if (v165)
      {
        if (*(_DWORD *)(v165 + 24) == 2)
        {
          if ((*(_WORD *)(v165 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v165);
        }
        else
        {
          *(_DWORD *)(v165 + 24) -= 2;
        }
      }
      goto LABEL_210;
    }
    v93 = 0;
    v206 = 1;
  }
  else
  {
    v213 -= v150;
    if (v35 < v212)
      v212 -= v216;
    if (v26 == 64)
    {
      LODWORD(v161) = 0;
      a3 = v210;
      goto LABEL_310;
    }
    v93 = 0;
    v206 = 1;
    a3 = v210;
  }
  v21 = v159;
LABEL_214:
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v217);
LABEL_215:
  v115 = v223;
  v223 = 0;
  if (v115)
  {
    if (*(_DWORD *)v115 == 2)
      WTF::StringImpl::destroy(v115, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v115 -= 2;
  }
LABEL_218:
  v116 = v226;
  v226 = 0;
  if (v116)
  {
    if (*((_DWORD *)v116 + 6) == 2)
    {
      if ((*((_WORD *)v116 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v116);
    }
    else
    {
      *((_DWORD *)v116 + 6) -= 2;
    }
  }
  v117 = v224;
  v224 = 0;
  if (v117)
  {
    if (*((_DWORD *)v117 + 6) == 2)
    {
      if ((*((_WORD *)v117 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v117);
    }
    else
    {
      *((_DWORD *)v117 + 6) -= 2;
    }
  }
  if ((v93 | 4) == 4)
    goto LABEL_163;
LABEL_401:
  v5 = v207;
  if ((v206 & 1) != 0)
  {
    *(_QWORD *)&v261 = v230;
    DWORD2(v261) = v231;
    v186 = v232;
    v230 = 0;
    v232 = 0;
    v262 = v186;
    v263 = v233;
    v264 = v234;
    v265 = v235;
    v187 = v236;
    v234 = 0;
    v236 = 0;
    v266 = v187;
    v267 = v237;
    LOBYTE(v268) = 0;
    v272 = 0;
    if (v242)
    {
      v268 = v238;
      v269 = v239;
      v188 = v240;
      v238 = 0;
      v240 = 0;
      v270 = v188;
      v271 = v241;
      v272 = 1;
    }
    LOBYTE(v273) = 0;
    v277 = 0;
    if (v247)
    {
      v273 = v243;
      v274 = v244;
      v189 = v245;
      v243 = 0;
      v245 = 0;
      v275 = v189;
      v276 = v246;
      v277 = 1;
    }
    v190 = v248;
    v248 = 0;
    v278 = v190;
    v279 = v249;
    v280 = v250;
    *(_OWORD *)v281 = *(_OWORD *)v251;
    *(_OWORD *)&v281[9] = *(_OWORD *)&v251[9];
    WebCore::TextCheckingParagraph::expandRangeToNextEnd((WTF::StringImpl **)&v261);
    if ((v204 & 1) != 0
      && (v191 = (int *)WebCore::TextCheckingParagraph::paragraphRange((WebCore::TextCheckingParagraph *)&v261),
          v212 <= WebCore::characterCount(v191, 0)))
    {
      v197 = WebCore::TextCheckingParagraph::paragraphRange((WebCore::TextCheckingParagraph *)&v261);
      WebCore::resolveCharacterRange(v197, 0, v212, 0, &v217);
      v198 = *(_QWORD *)(v207 + 3064);
      v199 = v220;
      *((_DWORD *)v220 + 6) += 2;
      v256 = v199;
      v257 = v221;
      v258 &= 0xF0u;
      WebCore::FrameSelection::moveTo(v198, (uint64_t *)&v256, 1, 0);
      v200 = v256;
      v256 = 0;
      if (v200)
      {
        if (*((_DWORD *)v200 + 6) == 2)
        {
          if ((*((_WORD *)v200 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v200);
        }
        else
        {
          *((_DWORD *)v200 + 6) -= 2;
        }
      }
      v201 = v220;
      v220 = 0;
      if (v201)
      {
        if (*((_DWORD *)v201 + 6) == 2)
        {
          if ((*((_WORD *)v201 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v201);
        }
        else
        {
          *((_DWORD *)v201 + 6) -= 2;
        }
      }
      v202 = v217;
      v217 = 0;
      if (v202)
      {
        if (*((_DWORD *)v202 + 6) == 2)
        {
          if ((*((_WORD *)v202 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v202);
        }
        else
        {
          *((_DWORD *)v202 + 6) -= 2;
        }
      }
    }
    else
    {
      v192 = *(_QWORD *)(v207 + 3064);
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v192 + 136), (uint64_t)&v217);
      LOBYTE(v220) = 1;
      WebCore::FrameSelection::moveTo(v192, (uint64_t *)&v217, 0, 0);
      if (v217)
      {
        if (*((_DWORD *)v217 + 6) == 2)
        {
          if ((*((_WORD *)v217 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v217);
        }
        else
        {
          *((_DWORD *)v217 + 6) -= 2;
        }
      }
      WebCore::FrameSelection::modify(*(_QWORD *)(v207 + 3064), 0, 0, 0, 0);
    }
    WebCore::TextCheckingParagraph::~TextCheckingParagraph((WebCore::TextCheckingParagraph *)&v261, v193);
  }
  if (v228)
    WTF::fastFree(v228, (void *)a2);
  WebCore::TextCheckingParagraph::~TextCheckingParagraph((WebCore::TextCheckingParagraph *)&v230, (WTF::StringImpl *)a2);
  if (v207)
  {
LABEL_429:
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
}

uint64_t WebCore::Editor::replaceRangeForSpellChecking(WebCore::Editor *this, const WebCore::SimpleRange *a2, const WTF::String *a3)
{
  WebCore::SpellingCorrectionCommand *v5;
  WebCore::CompositeEditCommand *v6;
  uint64_t result;

  v5 = (WebCore::SpellingCorrectionCommand *)WTF::fastMalloc((WTF *)0x1B8);
  v6 = WebCore::SpellingCorrectionCommand::SpellingCorrectionCommand(v5, a2, a3);
  result = WebCore::CompositeEditCommand::apply(v6);
  if (*((_DWORD *)v5 + 2) == 1)
    return (*(uint64_t (**)(WebCore::SpellingCorrectionCommand *))(*(_QWORD *)v5 + 8))(v5);
  --*((_DWORD *)v5 + 2);
  return result;
}

uint64_t WebCore::FrameSelection::shouldChangeSelection(WebCore::FrameSelection *this, const WebCore::VisibleSelection *a2)
{
  unsigned __int8 *v2;
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  WebCore::Editor *v8;
  void *v9;
  WebCore::Editor *v10;
  uint64_t v11;
  void *v12;
  WebCore::FrameSelection *v14;

  v2 = (unsigned __int8 *)a2;
  v3 = *(WebCore::Document **)(*((_QWORD *)this + 4) + 8);
  v4 = *((_QWORD *)v3 + 66);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      if (*(_BYTE *)(v5 + 376))
        return 1;
    }
  }
  v7 = *((_QWORD *)v3 + 382);
  if (!v7)
  {
    v14 = this;
    v8 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v8, v3);
    v10 = (WebCore::Editor *)*((_QWORD *)v3 + 382);
    *((_QWORD *)v3 + 382) = v8;
    if (v10)
    {
      WebCore::Editor::~Editor(v10, v9);
      if (*(_DWORD *)v11)
      {
        *(_QWORD *)(v11 + 496) = 0;
        *(_OWORD *)(v11 + 464) = 0u;
        *(_OWORD *)(v11 + 480) = 0u;
        *(_OWORD *)(v11 + 432) = 0u;
        *(_OWORD *)(v11 + 448) = 0u;
        *(_OWORD *)(v11 + 400) = 0u;
        *(_OWORD *)(v11 + 416) = 0u;
        *(_OWORD *)(v11 + 368) = 0u;
        *(_OWORD *)(v11 + 384) = 0u;
        *(_OWORD *)(v11 + 336) = 0u;
        *(_OWORD *)(v11 + 352) = 0u;
        *(_OWORD *)(v11 + 304) = 0u;
        *(_OWORD *)(v11 + 320) = 0u;
        *(_OWORD *)(v11 + 272) = 0u;
        *(_OWORD *)(v11 + 288) = 0u;
        *(_OWORD *)(v11 + 240) = 0u;
        *(_OWORD *)(v11 + 256) = 0u;
        *(_OWORD *)(v11 + 208) = 0u;
        *(_OWORD *)(v11 + 224) = 0u;
        *(_OWORD *)(v11 + 176) = 0u;
        *(_OWORD *)(v11 + 192) = 0u;
        *(_OWORD *)(v11 + 144) = 0u;
        *(_OWORD *)(v11 + 160) = 0u;
        *(_OWORD *)(v11 + 112) = 0u;
        *(_OWORD *)(v11 + 128) = 0u;
        *(_OWORD *)(v11 + 80) = 0u;
        *(_OWORD *)(v11 + 96) = 0u;
        *(_OWORD *)(v11 + 48) = 0u;
        *(_OWORD *)(v11 + 64) = 0u;
        *(_OWORD *)(v11 + 16) = 0u;
        *(_OWORD *)(v11 + 32) = 0u;
        *(_OWORD *)v11 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v11, v12);
      }
    }
    v2 = (unsigned __int8 *)a2;
    v7 = *((_QWORD *)v3 + 382);
    this = v14;
  }
  return WebCore::Editor::shouldChangeSelection(v7, (WebCore::FrameSelection *)((char *)this + 56), (WebCore::VisibleSelection *)v2, v2[96], 0);
}

void WebCore::FrameSelection::moveTo(uint64_t a1, uint64_t *a2, char a3, int a4)
{
  unsigned __int16 v6;
  _BYTE v7[104];

  WebCore::VisibleSelection::VisibleSelection((uint64_t)v7, a2, a3, (*(unsigned __int8 *)(a1 + 154) >> 1) & 1);
  if (a4)
    v6 = 199;
  else
    v6 = 6;
  WebCore::FrameSelection::setSelection(a1, (uint64_t)v7, v6, 0, 0, 0, 0);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v7);
}

void WebCore::FrameSelection::moveTo(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  char v9;
  char v10;
  unsigned __int16 v11;
  int v12;
  int v13;
  int v14;
  char v15;
  int v16;
  char v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  int v28;
  char v29;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v33;
  int v34;
  char v35;
  char v36;
  char v37;
  char v38;

  v7 = *a2;
  if (*a2)
  {
    v8 = *(_DWORD *)(v7 + 24);
    *(_DWORD *)(v7 + 24) = v8 + 2;
    v16 = *((_DWORD *)a2 + 2);
    v17 = *((_BYTE *)a2 + 12);
    *(_DWORD *)(v7 + 24) = v8 + 4;
    v14 = *((_DWORD *)a2 + 2);
    v15 = *((_BYTE *)a2 + 12);
    v9 = *((_BYTE *)a2 + 16);
    v10 = *(_BYTE *)(a1 + 154);
    v20 = v17;
    v19 = v16;
    *(_DWORD *)(v7 + 24) = v8 + 8;
  }
  else
  {
    v14 = *((_DWORD *)a2 + 2);
    v15 = *((_BYTE *)a2 + 12);
    v9 = *((_BYTE *)a2 + 16);
    v10 = *(_BYTE *)(a1 + 154);
    v19 = v14;
    v20 = v15;
  }
  v18 = v7;
  v21 = v7;
  v22 = v14;
  v23 = v15;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = v9;
  v37 = 0;
  v38 = v10 & 2;
  WebCore::VisibleSelection::validate((uint64_t)&v18, 0);
  if (a3)
    v11 = 199;
  else
    v11 = 6;
  WebCore::FrameSelection::setSelection(a1, (uint64_t)&v18, v11, 0, 0, a4, 0);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v18);
  if (v7)
  {
    v12 = *(_DWORD *)(v7 + 24) - 2;
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) != 0)
      {
LABEL_13:
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v7);
        return;
      }
      WebCore::Node::removedLastRef((WebCore::Node *)v7);
      v12 = *(_DWORD *)(v7 + 24);
    }
    else
    {
      *(_DWORD *)(v7 + 24) = v12;
    }
    v13 = v12 - 2;
    if (v13)
    {
      *(_DWORD *)(v7 + 24) = v13;
      return;
    }
    goto LABEL_13;
  }
}

uint64_t WebCore::FrameSelection::modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  WebCore *v10;
  void *v11;
  WebCore::Document *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::Node *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  uint64_t *v25;
  void *v26;
  WebCore::Node *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  const WebCore::Position *v31;
  const WebCore::VisiblePosition *v32;
  uint64_t v33;
  int v34;
  WebCore::Node *v35;
  WebCore::Node *v36;
  int v37;
  char v38;
  VisiblePosition *v39;
  int v40;
  const WebCore::Position *v41;
  const WebCore::VisiblePosition *v42;
  uint64_t v43;
  int v44;
  WebCore::Node *v45;
  WebCore::Node *v46;
  int v47;
  char v48;
  WebCore::Node *v49;
  WebCore::Node *v50;
  char v51;
  WebCore::Node *v52;
  const WebCore::VisiblePosition *v53;
  char v54;
  WebCore::Node *v55;
  uint64_t v56;
  WebCore::Node *v57;
  uint64_t v58;
  WebCore::Document *v59;
  uint64_t v60;
  const WebCore::Position *v61;
  int v62;
  uint64_t v63;
  WebCore::Document *v64;
  uint64_t v65;
  const WebCore::Position *v66;
  WebCore::Node *v67;
  int v68;
  const WebCore::VisiblePosition *v69;
  int v70;
  const WebCore::VisiblePosition *v71;
  int v72;
  const WebCore::VisiblePosition *v73;
  int v74;
  const WebCore::VisiblePosition *v75;
  WebCore::Node *v76;
  WebCore::Node *v77;
  WebCore::Node *v78;
  uint64_t v79;
  unsigned __int8 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  unsigned int v87;
  unsigned __int8 v88;
  uint64_t v89;
  void *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  char v95;
  uint64_t v96;
  WebCore::Document *v97;
  uint64_t v98;
  int v99;
  BOOL v100;
  int v101;
  int v102;
  int v103;
  WebCore::Document *v104;
  uint64_t v105;
  int v106;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  WebCore::Node *v114;
  int v115;
  WebCore::Node *v116;
  WebCore::Node *v117;
  WebCore::Node *v118;
  uint64_t v120;
  uint64_t v121;
  WebCore::Node *v122;
  uint64_t v123;
  uint64_t v124;
  WebCore::Editor *v125;
  void *v126;
  WebCore::Editor *v127;
  uint64_t v128;
  void *v129;
  WebCore::Node *v130;
  uint64_t v131;
  WebCore::Node *v132;
  uint64_t v133;
  WebCore::Editor *v134;
  WebCore::Editor *v135;
  uint64_t v136;
  uint64_t v137;
  WebCore::Editor *v138;
  WebCore::Editor *v139;
  uint64_t v140;
  WebCore::Node *v141;
  uint64_t v142;
  uint64_t v143;
  WebCore::Node *v144;
  uint64_t v145;
  WebCore::Node *v146;
  uint64_t v147;
  WebCore::Node *v148;
  uint64_t v149;
  WebCore::Editor *v150;
  void *v151;
  WebCore::Editor *v152;
  uint64_t v153;
  void *v154;
  WebCore::Editor *v155;
  void *v156;
  WebCore::Editor *v157;
  uint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  _BOOL4 v168;
  BOOL v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  _BOOL4 v177;
  _BOOL4 v178;
  int v179;
  WebCore::Node *v180;
  int v181;
  char v182;
  char v183;
  WebCore::Node *v184;
  int v185;
  char v186;
  char v187;
  WebCore::Node *v188;
  int v189;
  char v190;
  BOOL v191;
  char v192;
  WebCore::Node *v193;
  _BYTE v194[12];
  int v195;
  WebCore::Node *v196;
  int v197;
  char v198;
  uint64_t v199;
  int v200;
  char v201;
  uint64_t v202;
  int v203;
  char v204;
  uint64_t v205;
  int v206;
  char v207;
  uint64_t v208;
  int v209;
  char v210;
  __int16 v211;
  char v212;
  unsigned __int8 v213;
  char v214;
  WebCore::Node *v215;
  int v216;
  char v217;
  char v218;

  if (a5)
  {
    WebCore::FrameSelection::FrameSelection((WebCore::FrameSelection *)v194, 0);
    WebCore::FrameSelection::setSelection((uint64_t)v194, a1 + 56, 6u, 0, 0, 0, 0);
    v10 = (WebCore *)WebCore::FrameSelection::modify(v194, a2, a3, a4, 0);
    v12 = *(WebCore::Document **)(*(_QWORD *)(a1 + 32) + 8);
    v13 = *((_QWORD *)v12 + 66);
    if (!v13 || (v14 = *(_QWORD *)(v13 + 8)) == 0 || !*(_BYTE *)(v14 + 376))
    {
      v15 = *((_QWORD *)v12 + 382);
      if (!v15)
      {
        v125 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
        WebCore::Editor::Editor(v125, v12);
        v127 = (WebCore::Editor *)*((_QWORD *)v12 + 382);
        *((_QWORD *)v12 + 382) = v125;
        if (v127)
        {
          WebCore::Editor::~Editor(v127, v126);
          if (*(_DWORD *)v128)
          {
            *(_QWORD *)(v128 + 496) = 0;
            *(_OWORD *)(v128 + 464) = 0u;
            *(_OWORD *)(v128 + 480) = 0u;
            *(_OWORD *)(v128 + 432) = 0u;
            *(_OWORD *)(v128 + 448) = 0u;
            *(_OWORD *)(v128 + 400) = 0u;
            *(_OWORD *)(v128 + 416) = 0u;
            *(_OWORD *)(v128 + 368) = 0u;
            *(_OWORD *)(v128 + 384) = 0u;
            *(_OWORD *)(v128 + 336) = 0u;
            *(_OWORD *)(v128 + 352) = 0u;
            *(_OWORD *)(v128 + 304) = 0u;
            *(_OWORD *)(v128 + 320) = 0u;
            *(_OWORD *)(v128 + 272) = 0u;
            *(_OWORD *)(v128 + 288) = 0u;
            *(_OWORD *)(v128 + 240) = 0u;
            *(_OWORD *)(v128 + 256) = 0u;
            *(_OWORD *)(v128 + 208) = 0u;
            *(_OWORD *)(v128 + 224) = 0u;
            *(_OWORD *)(v128 + 176) = 0u;
            *(_OWORD *)(v128 + 192) = 0u;
            *(_OWORD *)(v128 + 144) = 0u;
            *(_OWORD *)(v128 + 160) = 0u;
            *(_OWORD *)(v128 + 112) = 0u;
            *(_OWORD *)(v128 + 128) = 0u;
            *(_OWORD *)(v128 + 80) = 0u;
            *(_OWORD *)(v128 + 96) = 0u;
            *(_OWORD *)(v128 + 48) = 0u;
            *(_OWORD *)(v128 + 64) = 0u;
            *(_OWORD *)(v128 + 16) = 0u;
            *(_OWORD *)(v128 + 32) = 0u;
            *(_OWORD *)v128 = 0u;
          }
          else
          {
            WTF::fastFree((WTF *)v128, v129);
          }
        }
        v15 = *((_QWORD *)v12 + 382);
      }
      v10 = (WebCore *)WebCore::Editor::shouldChangeSelection(v15, (WebCore::VisibleSelection *)(a1 + 56), (WebCore::VisibleSelection *)&v203, v213, 0);
      if (!(_DWORD)v10)
        goto LABEL_31;
    }
    if (v214 == 2 && *(_BYTE *)(a1 + 153) == 1)
    {
      v16 = *(WebCore::Node **)(a1 + 104);
      if (v16)
      {
        v17 = *(_BYTE *)(a1 + 116) & 7;
        if (v17 <= 4 && (((1 << v17) & 0x19) != 0 || (v16 = (WebCore::Node *)*((_QWORD *)v16 + 4)) != 0))
        {
          *((_DWORD *)v16 + 6) += 2;
          v18 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v18 || (v19 = *(_QWORD *)(v18 + 96)) == 0)
            v19 = WebCore::threadGlobalDataSlow(v10);
          v20 = *(_QWORD *)(v19 + 40);
          if (!v20)
          {
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v19);
            v20 = *(_QWORD *)(v19 + 40);
          }
          v21 = bmalloc::api::isoAllocate();
          WTF::MonotonicTime::now((WTF::MonotonicTime *)v21);
          *(_DWORD *)(v21 + 16) = 1;
          *(_QWORD *)v21 = off_1E33A4B48;
          *(_QWORD *)(v21 + 8) = 0;
          *(_DWORD *)(v21 + 20) = *(_DWORD *)(v21 + 20) & 0xFFC00000 | 0x1E8206 | (*(_QWORD *)(v20 + 1808) != 0);
          v23 = *(_DWORD **)(v20 + 1808);
          if (v23)
            *v23 += 2;
          *(_QWORD *)(v21 + 24) = v23;
          *(_QWORD *)(v21 + 32) = 0;
          *(_QWORD *)(v21 + 40) = 0;
          *(_QWORD *)(v21 + 48) = 0;
          *(_QWORD *)(v21 + 56) = v22;
          *(_QWORD *)(v21 + 64) = 0;
          (*(void (**)(WebCore::Node *, uint64_t))(*(_QWORD *)v16 + 48))(v16, v21);
          v24 = *(_DWORD *)(v21 + 20);
          if (*(_DWORD *)(v21 + 16) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          else
            --*(_DWORD *)(v21 + 16);
          if (*((_DWORD *)v16 + 6) == 2)
          {
            if ((*((_WORD *)v16 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v16);
          }
          else
          {
            *((_DWORD *)v16 + 6) -= 2;
          }
          if ((v24 & 0x40) != 0)
          {
LABEL_31:
            WebCore::FrameSelection::~FrameSelection((WebCore::FrameSelection *)v194, v11);
            return 0;
          }
        }
      }
    }
    WebCore::FrameSelection::~FrameSelection((WebCore::FrameSelection *)v194, v11);
  }
  WebCore::FrameSelection::willBeModified((WebCore::FrameSelection *)a1, a2, a3);
  v25 = (uint64_t *)(a1 + 56);
  WebCore::VisibleSelection::document(a1 + 56, &v193);
  if (!v193)
    return 0;
  WebCore::Document::updateLayout(v193, 2, 0);
  WebCore::Style::PostResolutionCallbackDisabler::PostResolutionCallbackDisabler(&v192, (uint64_t)v193, 1);
  v191 = 0;
  v179 = *(unsigned __int8 *)(a1 + 153);
  v27 = *(WebCore::Node **)(a1 + 120);
  if (v27)
    *((_DWORD *)v27 + 6) += 2;
  v188 = v27;
  v28 = a1 + 128;
  v189 = *(_DWORD *)(a1 + 128);
  v190 = *(_BYTE *)(a1 + 132);
  v184 = 0;
  v185 = 0;
  v186 &= 0xF0u;
  v187 = 1;
  switch((int)a3)
  {
    case 0:
      if ((_DWORD)a2)
        WebCore::FrameSelection::modifyExtendingForward((uint64_t)v194, a1, a4);
      else
        WebCore::FrameSelection::modifyMovingForward((uint64_t)v194, (VisiblePosition *)a1, a4, &v191);
      goto LABEL_68;
    case 1:
      if ((_DWORD)a2)
        WebCore::FrameSelection::modifyExtendingBackward((uint64_t)v194, a1, a4);
      else
        WebCore::FrameSelection::modifyMovingBackward((WebCore::Node **)v194, (unsigned __int8 *)a1, a4, &v191);
LABEL_68:
      v52 = *(WebCore::Node **)v194;
      *(_QWORD *)v194 = 0;
      v184 = v52;
      v185 = *(_DWORD *)&v194[8];
      v186 = v195;
      v51 = (char)v196;
      goto LABEL_69;
    case 2:
      if ((a2 & 1) == 0)
      {
        v191 = 0;
        v180 = 0;
        v181 = 0;
        v182 &= 0xF0u;
        v183 = 1;
        switch((int)a4)
        {
          case 0:
            if (v179 != 2)
            {
              v72 = *(unsigned __int8 *)(a1 + 152);
              WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(a1 + 104), (uint64_t)&v215);
              v218 = 1;
              if (!v72)
              {
                v146 = v215;
                if (v215)
                {
                  *((_DWORD *)v215 + 6) += 2;
                  *(_QWORD *)v194 = v146;
                  *(_DWORD *)&v194[8] = v216;
                  LOBYTE(v195) = v217;
                  LOBYTE(v196) = 0;
                  if (!WebCore::inSameLine((WebCore *)&v215, (const WebCore::VisiblePosition *)v194, v73))
                    v218 = 0;
                  v147 = *(_QWORD *)v194;
                  *(_QWORD *)v194 = 0;
                  if (v147)
                  {
                    if (*(_DWORD *)(v147 + 24) == 2)
                    {
                      if ((*(_WORD *)(v147 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v147);
                    }
                    else
                    {
                      *(_DWORD *)(v147 + 24) -= 2;
                    }
                  }
                }
              }
              WebCore::VisiblePosition::right(&v215, &v191, 1, (uint64_t)v194);
              goto LABEL_135;
            }
            if ((WebCore::FrameSelection::directionOfSelection((WebCore::FrameSelection *)a1) & 1) == 0)
              goto LABEL_100;
            break;
          case 1:
            v58 = *(_QWORD *)(a1 + 32);
            if (v58 && (v59 = *(WebCore::Document **)(v58 + 8)) != 0)
            {
              v60 = *((_QWORD *)v59 + 382);
              if (!v60)
              {
                v150 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
                WebCore::Editor::Editor(v150, v59);
                v152 = (WebCore::Editor *)*((_QWORD *)v59 + 382);
                *((_QWORD *)v59 + 382) = v150;
                if (v152)
                {
                  WebCore::Editor::~Editor(v152, v151);
                  if (*(_DWORD *)v153)
                  {
                    *(_QWORD *)(v153 + 496) = 0;
                    *(_OWORD *)(v153 + 464) = 0u;
                    *(_OWORD *)(v153 + 480) = 0u;
                    *(_OWORD *)(v153 + 432) = 0u;
                    *(_OWORD *)(v153 + 448) = 0u;
                    *(_OWORD *)(v153 + 400) = 0u;
                    *(_OWORD *)(v153 + 416) = 0u;
                    *(_OWORD *)(v153 + 368) = 0u;
                    *(_OWORD *)(v153 + 384) = 0u;
                    *(_OWORD *)(v153 + 336) = 0u;
                    *(_OWORD *)(v153 + 352) = 0u;
                    *(_OWORD *)(v153 + 304) = 0u;
                    *(_OWORD *)(v153 + 320) = 0u;
                    *(_OWORD *)(v153 + 272) = 0u;
                    *(_OWORD *)(v153 + 288) = 0u;
                    *(_OWORD *)(v153 + 240) = 0u;
                    *(_OWORD *)(v153 + 256) = 0u;
                    *(_OWORD *)(v153 + 208) = 0u;
                    *(_OWORD *)(v153 + 224) = 0u;
                    *(_OWORD *)(v153 + 176) = 0u;
                    *(_OWORD *)(v153 + 192) = 0u;
                    *(_OWORD *)(v153 + 144) = 0u;
                    *(_OWORD *)(v153 + 160) = 0u;
                    *(_OWORD *)(v153 + 112) = 0u;
                    *(_OWORD *)(v153 + 128) = 0u;
                    *(_OWORD *)(v153 + 80) = 0u;
                    *(_OWORD *)(v153 + 96) = 0u;
                    *(_OWORD *)(v153 + 48) = 0u;
                    *(_OWORD *)(v153 + 64) = 0u;
                    *(_OWORD *)(v153 + 16) = 0u;
                    *(_OWORD *)(v153 + 32) = 0u;
                    *(_OWORD *)v153 = 0u;
                  }
                  else
                  {
                    WTF::fastFree((WTF *)v153, v154);
                  }
                }
                v60 = *((_QWORD *)v59 + 382);
                v28 = a1 + 128;
              }
              v177 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v60 + 16) + 8) + 680) + 370) == 1;
            }
            else
            {
              v177 = 0;
            }
            v68 = *(unsigned __int8 *)(a1 + 152);
            WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(a1 + 104), (uint64_t)&v215);
            v218 = 1;
            if (!v68)
            {
              v141 = v215;
              if (v215)
              {
                *((_DWORD *)v215 + 6) += 2;
                *(_QWORD *)v194 = v141;
                *(_DWORD *)&v194[8] = v216;
                LOBYTE(v195) = v217;
                LOBYTE(v196) = 0;
                if (!WebCore::inSameLine((WebCore *)&v215, (const WebCore::VisiblePosition *)v194, v69))
                  v218 = 0;
                v142 = *(_QWORD *)v194;
                *(_QWORD *)v194 = 0;
                if (v142)
                {
                  if (*(_DWORD *)(v142 + 24) == 2)
                  {
                    if ((*(_WORD *)(v142 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v142);
                  }
                  else
                  {
                    *(_DWORD *)(v142 + 24) -= 2;
                  }
                }
              }
            }
            WebCore::rightWordPosition((WebCore *)&v215, (const WebCore::VisiblePosition *)v177, (uint64_t)v194);
            goto LABEL_123;
          case 2:
          case 3:
          case 4:
          case 6:
          case 8:
          case 9:
            WebCore::FrameSelection::modifyMovingForward((uint64_t)v194, (VisiblePosition *)a1, a4, &v191);
            goto LABEL_65;
          case 7:
            WebCore::FrameSelection::positionForPlatform((WebCore::FrameSelection *)&v215, a1, 1);
            if ((WebCore::directionOfEnclosingBlock((WebCore *)(a1 + 104), v61) & 1) != 0)
              goto LABEL_95;
            goto LABEL_111;
          default:
            goto LABEL_139;
        }
LABEL_78:
        v176 = *(unsigned __int8 *)(a1 + 152);
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(a1 + 120), (uint64_t)&v215);
        v54 = 1;
        v218 = 1;
        v55 = v215;
        if (!v176)
        {
LABEL_354:
          if (v55)
          {
            *((_DWORD *)v55 + 6) += 2;
            *(_QWORD *)v194 = v55;
            *(_DWORD *)&v194[8] = v216;
            LOBYTE(v195) = v217;
            LOBYTE(v196) = 0;
            if (!WebCore::inSameLine((WebCore *)&v215, (const WebCore::VisiblePosition *)v194, v53))
              v218 = 0;
            v143 = *(_QWORD *)v194;
            *(_QWORD *)v194 = 0;
            if (v143)
            {
              if (*(_DWORD *)(v143 + 24) == 2)
              {
                if ((*(_WORD *)(v143 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v143);
              }
              else
              {
                *(_DWORD *)(v143 + 24) -= 2;
              }
            }
            v55 = v215;
            v54 = v218;
          }
        }
LABEL_101:
        v180 = v55;
        v181 = v216;
        v182 = v217;
        v183 = v54;
        goto LABEL_139;
      }
      v30 = *(unsigned __int8 *)(a1 + 152);
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(a1 + 104), (uint64_t)&v180);
      v183 = 1;
      if (!v30)
      {
        v130 = v180;
        if (v180)
        {
          *((_DWORD *)v180 + 6) += 2;
          *(_QWORD *)v194 = v130;
          *(_DWORD *)&v194[8] = v181;
          LOBYTE(v195) = v182;
          LOBYTE(v196) = 0;
          if (!WebCore::inSameLine((WebCore *)&v180, (const WebCore::VisiblePosition *)v194, v32))
            v183 = 0;
          v131 = *(_QWORD *)v194;
          *(_QWORD *)v194 = 0;
          if (v131)
          {
            if (*(_DWORD *)(v131 + 24) == 2)
            {
              if ((*(_WORD *)(v131 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v131);
            }
            else
            {
              *(_DWORD *)(v131 + 24) -= 2;
            }
          }
        }
      }
      switch((int)a4)
      {
        case 0:
          if ((WebCore::directionOfEnclosingBlock((WebCore *)(a1 + 104), v31) & 1) == 0)
          {
            WebCore::VisiblePosition::next((unsigned __int8 *)&v180, 1, 0, (uint64_t)v194);
            goto LABEL_38;
          }
          WebCore::VisiblePosition::previous(&v180, 1, 0, (uint64_t)v194);
          v36 = v180;
          v180 = *(WebCore::Node **)v194;
          if (!v36)
            goto LABEL_41;
          v37 = *((_DWORD *)v36 + 6) - 2;
          if (*((_DWORD *)v36 + 6) != 2)
            goto LABEL_40;
          if ((*((_WORD *)v36 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v36);
          goto LABEL_41;
        case 1:
          if ((WebCore::directionOfEnclosingBlock((WebCore *)(a1 + 104), v31) & 1) != 0)
          {
            WebCore::previousBoundary((uint64_t)v194, (uint64_t)&v180, (uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t, char *))WebCore::previousWordPositionBoundary, 0);
            WebCore::VisiblePosition::honorEditingBoundaryAtOrBefore((WebCore::Node *)&v180, (const WebCore::VisiblePosition *)v194, 0, (uint64_t)&v215);
            v56 = *(_QWORD *)v194;
            *(_QWORD *)v194 = 0;
            if (v56)
            {
              if (*(_DWORD *)(v56 + 24) == 2)
              {
                if ((*(_WORD *)(v56 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v56);
              }
              else
              {
                *(_DWORD *)(v56 + 24) -= 2;
              }
            }
            v57 = v180;
            v180 = v215;
            if (v57)
            {
              if (*((_DWORD *)v57 + 6) == 2)
              {
                if ((*((_WORD *)v57 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v57);
              }
              else
              {
                *((_DWORD *)v57 + 6) -= 2;
              }
            }
            v181 = v216;
            v182 = v217;
            v38 = v218;
            goto LABEL_42;
          }
          WebCore::FrameSelection::nextWordPositionForPlatform((WebCore::FrameSelection *)v194, (const VisiblePosition *)a1, (WebCore::Node *)&v180);
LABEL_38:
          v35 = *(WebCore::Node **)v194;
          *(_QWORD *)v194 = 0;
          v36 = v180;
          v180 = v35;
          if (!v36)
            goto LABEL_41;
          v37 = *((_DWORD *)v36 + 6) - 2;
          if (*((_DWORD *)v36 + 6) != 2)
          {
LABEL_40:
            *((_DWORD *)v36 + 6) = v37;
LABEL_41:
            v181 = *(_DWORD *)&v194[8];
            v182 = v195;
            v38 = (char)v196;
LABEL_42:
            v183 = v38;
            goto LABEL_43;
          }
          if ((*((_WORD *)v36 + 15) & 0x400) != 0)
            goto LABEL_41;
          WebCore::Node::removedLastRef(v36);
          v123 = *(_QWORD *)v194;
          v181 = *(_DWORD *)&v194[8];
          v182 = v195;
          v183 = (char)v196;
          *(_QWORD *)v194 = 0;
          if (v123)
          {
            if (*(_DWORD *)(v123 + 24) == 2)
            {
              if ((*(_WORD *)(v123 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v123);
            }
            else
            {
              *(_DWORD *)(v123 + 24) -= 2;
            }
          }
LABEL_43:
          v39 = (VisiblePosition *)(WebCore::directionOfEnclosingBlock((WebCore *)(a1 + 104), v31) ^ 1);
          break;
        case 2:
        case 3:
        case 4:
        case 6:
        case 8:
        case 9:
          v33 = a1;
          v34 = a4;
          goto LABEL_37;
        case 7:
          if ((WebCore::directionOfEnclosingBlock((WebCore *)(a1 + 104), v31) & 1) != 0)
          {
            WebCore::FrameSelection::modifyExtendingBackward((uint64_t)v194, a1, 7);
          }
          else
          {
            v33 = a1;
            v34 = 7;
LABEL_37:
            WebCore::FrameSelection::modifyExtendingForward((uint64_t)v194, v33, v34);
          }
          goto LABEL_38;
        default:
          goto LABEL_43;
      }
      goto LABEL_55;
    case 3:
      if ((a2 & 1) == 0)
      {
        v191 = 0;
        v180 = 0;
        v181 = 0;
        v182 &= 0xF0u;
        v183 = 1;
        switch((int)a4)
        {
          case 0:
            if (v179 != 2)
            {
              v74 = *(unsigned __int8 *)(a1 + 152);
              WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(a1 + 104), (uint64_t)&v215);
              v218 = 1;
              if (!v74)
              {
                v148 = v215;
                if (v215)
                {
                  *((_DWORD *)v215 + 6) += 2;
                  *(_QWORD *)v194 = v148;
                  *(_DWORD *)&v194[8] = v216;
                  LOBYTE(v195) = v217;
                  LOBYTE(v196) = 0;
                  if (!WebCore::inSameLine((WebCore *)&v215, (const WebCore::VisiblePosition *)v194, v75))
                    v218 = 0;
                  v149 = *(_QWORD *)v194;
                  *(_QWORD *)v194 = 0;
                  if (v149)
                  {
                    if (*(_DWORD *)(v149 + 24) == 2)
                    {
                      if ((*(_WORD *)(v149 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v149);
                    }
                    else
                    {
                      *(_DWORD *)(v149 + 24) -= 2;
                    }
                  }
                }
              }
              WebCore::VisiblePosition::left(&v215, &v191, 1, (uint64_t)v194);
              goto LABEL_135;
            }
            if ((WebCore::FrameSelection::directionOfSelection((WebCore::FrameSelection *)a1) & 1) == 0)
              goto LABEL_78;
LABEL_100:
            v62 = *(unsigned __int8 *)(a1 + 152);
            WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(a1 + 136), (uint64_t)&v215);
            v54 = 1;
            v218 = 1;
            v55 = v215;
            if (v62)
              goto LABEL_101;
            goto LABEL_354;
          case 1:
            v63 = *(_QWORD *)(a1 + 32);
            if (v63 && (v64 = *(WebCore::Document **)(v63 + 8)) != 0)
            {
              v65 = *((_QWORD *)v64 + 382);
              if (!v65)
              {
                v155 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
                WebCore::Editor::Editor(v155, v64);
                v157 = (WebCore::Editor *)*((_QWORD *)v64 + 382);
                *((_QWORD *)v64 + 382) = v155;
                if (v157)
                {
                  WebCore::Editor::~Editor(v157, v156);
                  if (*(_DWORD *)v158)
                  {
                    *(_QWORD *)(v158 + 496) = 0;
                    *(_OWORD *)(v158 + 464) = 0u;
                    *(_OWORD *)(v158 + 480) = 0u;
                    *(_OWORD *)(v158 + 432) = 0u;
                    *(_OWORD *)(v158 + 448) = 0u;
                    *(_OWORD *)(v158 + 400) = 0u;
                    *(_OWORD *)(v158 + 416) = 0u;
                    *(_OWORD *)(v158 + 368) = 0u;
                    *(_OWORD *)(v158 + 384) = 0u;
                    *(_OWORD *)(v158 + 336) = 0u;
                    *(_OWORD *)(v158 + 352) = 0u;
                    *(_OWORD *)(v158 + 304) = 0u;
                    *(_OWORD *)(v158 + 320) = 0u;
                    *(_OWORD *)(v158 + 272) = 0u;
                    *(_OWORD *)(v158 + 288) = 0u;
                    *(_OWORD *)(v158 + 240) = 0u;
                    *(_OWORD *)(v158 + 256) = 0u;
                    *(_OWORD *)(v158 + 208) = 0u;
                    *(_OWORD *)(v158 + 224) = 0u;
                    *(_OWORD *)(v158 + 176) = 0u;
                    *(_OWORD *)(v158 + 192) = 0u;
                    *(_OWORD *)(v158 + 144) = 0u;
                    *(_OWORD *)(v158 + 160) = 0u;
                    *(_OWORD *)(v158 + 112) = 0u;
                    *(_OWORD *)(v158 + 128) = 0u;
                    *(_OWORD *)(v158 + 80) = 0u;
                    *(_OWORD *)(v158 + 96) = 0u;
                    *(_OWORD *)(v158 + 48) = 0u;
                    *(_OWORD *)(v158 + 64) = 0u;
                    *(_OWORD *)(v158 + 16) = 0u;
                    *(_OWORD *)(v158 + 32) = 0u;
                    *(_OWORD *)v158 = 0u;
                  }
                  else
                  {
                    WTF::fastFree((WTF *)v158, v159);
                  }
                }
                v65 = *((_QWORD *)v64 + 382);
                v28 = a1 + 128;
              }
              v178 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v65 + 16) + 8) + 680) + 370) == 1;
            }
            else
            {
              v178 = 0;
            }
            v70 = *(unsigned __int8 *)(a1 + 152);
            WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(a1 + 104), (uint64_t)&v215);
            v218 = 1;
            if (!v70)
            {
              v144 = v215;
              if (v215)
              {
                *((_DWORD *)v215 + 6) += 2;
                *(_QWORD *)v194 = v144;
                *(_DWORD *)&v194[8] = v216;
                LOBYTE(v195) = v217;
                LOBYTE(v196) = 0;
                if (!WebCore::inSameLine((WebCore *)&v215, (const WebCore::VisiblePosition *)v194, v71))
                  v218 = 0;
                v145 = *(_QWORD *)v194;
                *(_QWORD *)v194 = 0;
                if (v145)
                {
                  if (*(_DWORD *)(v145 + 24) == 2)
                  {
                    if ((*(_WORD *)(v145 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v145);
                  }
                  else
                  {
                    *(_DWORD *)(v145 + 24) -= 2;
                  }
                }
              }
            }
            WebCore::leftWordPosition((WebCore *)&v215, (const WebCore::VisiblePosition *)v178, (uint64_t)v194);
LABEL_123:
            v180 = *(WebCore::Node **)v194;
            v181 = *(_DWORD *)&v194[8];
            v182 = v195;
            v183 = (char)v196;
            v191 = WebCore::operator==((uint64_t *)&v180, (uint64_t *)&v215);
            goto LABEL_136;
          case 2:
          case 3:
          case 4:
          case 6:
          case 8:
          case 9:
            WebCore::FrameSelection::modifyMovingBackward((WebCore::Node **)v194, (unsigned __int8 *)a1, a4, &v191);
LABEL_65:
            v180 = *(WebCore::Node **)v194;
            v181 = *(_DWORD *)&v194[8];
            v182 = v195;
            v183 = (char)v196;
            break;
          case 7:
            WebCore::FrameSelection::positionForPlatform((WebCore::FrameSelection *)&v215, a1, 1);
            if ((WebCore::directionOfEnclosingBlock((WebCore *)(a1 + 104), v66) & 1) != 0)
LABEL_111:
              WebCore::endOfLine((uint64_t *)v194, (uint64_t)&v215, 0, &v191);
            else
LABEL_95:
              WebCore::startOfLine((uint64_t)v194, (WebCore::VisiblePosition *)&v215, 0, &v191);
LABEL_135:
            v180 = *(WebCore::Node **)v194;
            v181 = *(_DWORD *)&v194[8];
            v182 = v195;
            v183 = (char)v196;
            *(_QWORD *)v194 = 0;
LABEL_136:
            v76 = v215;
            v215 = 0;
            if (v76)
            {
              if (*((_DWORD *)v76 + 6) == 2)
              {
                if ((*((_WORD *)v76 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v76);
              }
              else
              {
                *((_DWORD *)v76 + 6) -= 2;
              }
            }
            break;
          default:
            break;
        }
LABEL_139:
        v77 = v180;
        v180 = 0;
        v78 = v184;
        v184 = v77;
        if (v78)
        {
          if (*((_DWORD *)v78 + 6) == 2)
          {
            if ((*((_WORD *)v78 + 15) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef(v78);
              v67 = v180;
              v185 = v181;
              v186 = v182;
              v187 = v183;
              v180 = 0;
              if (v67)
              {
LABEL_274:
                if (*((_DWORD *)v67 + 6) == 2)
                {
                  if ((*((_WORD *)v67 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v67);
                }
                else
                {
                  *((_DWORD *)v67 + 6) -= 2;
                }
              }
              goto LABEL_143;
            }
          }
          else
          {
            *((_DWORD *)v78 + 6) -= 2;
          }
        }
        v185 = v181;
        v186 = v182;
        v187 = v183;
        goto LABEL_143;
      }
      v40 = *(unsigned __int8 *)(a1 + 152);
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(a1 + 104), (uint64_t)&v180);
      v183 = 1;
      if (!v40)
      {
        v132 = v180;
        if (v180)
        {
          *((_DWORD *)v180 + 6) += 2;
          *(_QWORD *)v194 = v132;
          *(_DWORD *)&v194[8] = v181;
          LOBYTE(v195) = v182;
          LOBYTE(v196) = 0;
          if (!WebCore::inSameLine((WebCore *)&v180, (const WebCore::VisiblePosition *)v194, v42))
            v183 = 0;
          v133 = *(_QWORD *)v194;
          *(_QWORD *)v194 = 0;
          if (v133)
          {
            if (*(_DWORD *)(v133 + 24) == 2)
            {
              if ((*(_WORD *)(v133 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v133);
            }
            else
            {
              *(_DWORD *)(v133 + 24) -= 2;
            }
          }
        }
      }
      switch((int)a4)
      {
        case 0:
          if ((WebCore::directionOfEnclosingBlock((WebCore *)(a1 + 104), v41) & 1) != 0)
          {
            WebCore::VisiblePosition::next((unsigned __int8 *)&v180, 1, 0, (uint64_t)v194);
            goto LABEL_49;
          }
          WebCore::VisiblePosition::previous(&v180, 1, 0, (uint64_t)v194);
          v46 = v180;
          v180 = *(WebCore::Node **)v194;
          if (!v46)
            goto LABEL_52;
          v47 = *((_DWORD *)v46 + 6) - 2;
          if (*((_DWORD *)v46 + 6) != 2)
            goto LABEL_51;
          if ((*((_WORD *)v46 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v46);
          goto LABEL_52;
        case 1:
          if ((WebCore::directionOfEnclosingBlock((WebCore *)(a1 + 104), v41) & 1) == 0)
          {
            WebCore::previousBoundary((uint64_t)v194, (uint64_t)&v180, (uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t, char *))WebCore::previousWordPositionBoundary, 0);
            WebCore::VisiblePosition::honorEditingBoundaryAtOrBefore((WebCore::Node *)&v180, (const WebCore::VisiblePosition *)v194, 0, (uint64_t)&v215);
            v121 = *(_QWORD *)v194;
            *(_QWORD *)v194 = 0;
            if (v121)
            {
              if (*(_DWORD *)(v121 + 24) == 2)
              {
                if ((*(_WORD *)(v121 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v121);
              }
              else
              {
                *(_DWORD *)(v121 + 24) -= 2;
              }
            }
            v122 = v180;
            v180 = v215;
            if (v122)
            {
              if (*((_DWORD *)v122 + 6) == 2)
              {
                if ((*((_WORD *)v122 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v122);
              }
              else
              {
                *((_DWORD *)v122 + 6) -= 2;
              }
            }
            v181 = v216;
            v182 = v217;
            v48 = v218;
            goto LABEL_53;
          }
          WebCore::FrameSelection::nextWordPositionForPlatform((WebCore::FrameSelection *)v194, (const VisiblePosition *)a1, (WebCore::Node *)&v180);
LABEL_49:
          v45 = *(WebCore::Node **)v194;
          *(_QWORD *)v194 = 0;
          v46 = v180;
          v180 = v45;
          if (!v46)
            goto LABEL_52;
          v47 = *((_DWORD *)v46 + 6) - 2;
          if (*((_DWORD *)v46 + 6) != 2)
          {
LABEL_51:
            *((_DWORD *)v46 + 6) = v47;
LABEL_52:
            v181 = *(_DWORD *)&v194[8];
            v182 = v195;
            v48 = (char)v196;
LABEL_53:
            v183 = v48;
            goto LABEL_54;
          }
          if ((*((_WORD *)v46 + 15) & 0x400) != 0)
            goto LABEL_52;
          WebCore::Node::removedLastRef(v46);
          v124 = *(_QWORD *)v194;
          v181 = *(_DWORD *)&v194[8];
          v182 = v195;
          v183 = (char)v196;
          *(_QWORD *)v194 = 0;
          if (v124)
          {
            if (*(_DWORD *)(v124 + 24) == 2)
            {
              if ((*(_WORD *)(v124 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v124);
            }
            else
            {
              *(_DWORD *)(v124 + 24) -= 2;
            }
          }
LABEL_54:
          v39 = (VisiblePosition *)WebCore::directionOfEnclosingBlock((WebCore *)(a1 + 104), v41);
LABEL_55:
          WebCore::adjustPositionForUserSelectAll((WebCore *)&v180, v39);
          v49 = v180;
          v180 = 0;
          v50 = v184;
          v184 = v49;
          if (!v50)
            goto LABEL_58;
          if (*((_DWORD *)v50 + 6) != 2)
          {
            *((_DWORD *)v50 + 6) -= 2;
            goto LABEL_58;
          }
          if ((*((_WORD *)v50 + 15) & 0x400) != 0)
          {
LABEL_58:
            v185 = v181;
            v186 = v182;
            v51 = v183;
LABEL_69:
            v187 = v51;
            break;
          }
          WebCore::Node::removedLastRef(v50);
          v67 = v180;
          v185 = v181;
          v186 = v182;
          v187 = v183;
          v180 = 0;
          if (v67)
            goto LABEL_274;
          break;
        case 2:
        case 3:
        case 4:
        case 6:
        case 8:
        case 9:
          v43 = a1;
          v44 = a4;
          goto LABEL_48;
        case 7:
          if ((WebCore::directionOfEnclosingBlock((WebCore *)(a1 + 104), v41) & 1) != 0)
          {
            WebCore::FrameSelection::modifyExtendingForward((uint64_t)v194, a1, 7);
          }
          else
          {
            v43 = a1;
            v44 = 7;
LABEL_48:
            WebCore::FrameSelection::modifyExtendingBackward((uint64_t)v194, v43, v44);
          }
          goto LABEL_49;
        default:
          goto LABEL_54;
      }
LABEL_143:
      if (v191 && *(_BYTE *)(a1 + 153) != 2)
      {
        if (a5)
        {
          v79 = *(_QWORD *)(a1 + 32);
          if (v79)
          {
            if (*(_QWORD *)(v79 + 8))
            {
              v80 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
              if ((v80 & 1) != 0)
              {
                if (a3 > 3)
                  v87 = 0;
                else
                  v87 = dword_1969F0B20[(char)a3];
                switch((int)a4)
                {
                  case 0:
                    v120 = 0x100000000;
                    break;
                  case 1:
                    v120 = 0x200000000;
                    break;
                  case 2:
                  case 6:
                    v120 = 0x400000000;
                    break;
                  case 3:
                    goto LABEL_278;
                  case 4:
                  case 8:
                    v120 = 0x500000000;
                    break;
                  case 5:
                  case 9:
                    v120 = 0x700000000;
                    break;
                  case 7:
                    if (a3 <= 3)
                      v87 = dword_1969F0B30[(char)a3];
LABEL_278:
                    v120 = 0x300000000;
                    break;
                  default:
                    v120 = 0;
                    break;
                }
                *(_DWORD *)v194 = 4;
                *(_QWORD *)&v194[4] = v120 | v87;
                v195 = 0;
                WebCore::FrameSelection::notifyAccessibilityForSelectionChange((_QWORD *)a1);
                v29 = 1;
                goto LABEL_247;
              }
            }
          }
        }
      }
      if (v184)
      {
        v81 = *(_QWORD *)(a1 + 32);
        if (v81)
        {
          v82 = *(_QWORD *)(v81 + 8);
          if (!v82)
            goto LABEL_445;
          v83 = *(_QWORD *)(v82 + 528);
          if (!v83)
            goto LABEL_445;
          v84 = *(_QWORD *)(v83 + 8);
          if (!v84 || (*(_QWORD *)(*(_QWORD *)(v84 + 136) + 696) & 0x8000000000) == 0 || v179 == 2 || (a2 & 1) != 0)
            goto LABEL_445;
          WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v188, (uint64_t)v194);
          LOBYTE(v196) = 1;
          v85 = WebCore::operator==((uint64_t *)&v184, (uint64_t *)v194);
          v86 = *(_QWORD *)v194;
          *(_QWORD *)v194 = 0;
          if (v86)
          {
            if (*(_DWORD *)(v86 + 24) == 2)
            {
              if ((*(_WORD *)(v86 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v86);
            }
            else
            {
              *(_DWORD *)(v86 + 24) -= 2;
            }
          }
          if (v85)
          {
            v29 = 0;
            goto LABEL_247;
          }
          v81 = *(_QWORD *)(a1 + 32);
          if (v81)
          {
LABEL_445:
            if (*(_QWORD *)(v81 + 8))
            {
              v88 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
              if ((v88 & 1) != 0)
              {
                v89 = *(_QWORD *)(a1 + 32);
                if (v89)
                  v89 = *(_QWORD *)(v89 + 8);
                if (WebCore::Document::hasEverCreatedAnAXObjectCache)
                {
                  if (*(_BYTE *)(v89 + 3362) || *(_BYTE *)(v89 + 3405))
                  {
                    while (1)
                    {
                      v172 = *(_QWORD *)(v89 + 528);
                      if (!v172)
                        break;
                      v173 = *(_QWORD *)(v172 + 8);
                      if (!v173)
                        break;
                      v174 = *(_QWORD *)(v173 + 120);
                      if (!v174)
                        break;
                      v175 = *(_QWORD *)(v174 + 8);
                      if (!v175)
                        break;
                      v89 = *(_QWORD *)(*(_QWORD *)(v175 + 40) + 8);
                    }
                  }
                  else
                  {
                    v160 = *(_QWORD *)(v89 + 528);
                    if (v160)
                    {
                      v161 = *(_QWORD *)(v160 + 8);
                      if (v161)
                      {
                        v162 = *(_QWORD *)(*(_QWORD *)(v161 + 128) + 8);
                        if (v162)
                        {
                          if (!*(_BYTE *)(v162 + 144))
                          {
                            v163 = *(_QWORD *)(v162 + 296);
                            if (v163)
                              v89 = v163;
                          }
                        }
                      }
                    }
                  }
                  v164 = *(_QWORD *)(v89 + 1488);
                  if (v164)
                  {
                    if ((a2 & 1) != 0)
                    {
                      v165 = 0;
                      v166 = 3;
                    }
                    else
                    {
                      if (*(_BYTE *)(a1 + 153) == 2)
                        v165 = WebCore::FrameSelection::directionOfSelection((WebCore::FrameSelection *)a1);
                      else
                        v165 = 0;
                      v166 = 2;
                    }
                    if (a4 > 9)
                    {
                      v167 = 0;
                      v168 = 0;
                    }
                    else
                    {
                      v167 = qword_1969F0AD0[(char)a4];
                      v168 = (a4 - 6) < 4;
                    }
                    switch((int)a3)
                    {
                      case 0:
                      case 2:
                        v169 = v165 == 0;
                        if (v168)
                        {
                          v170 = 0x200000000;
                          v171 = 0x100000000;
                        }
                        else
                        {
                          v170 = 0x400000000;
                          v171 = 0x300000000;
                        }
                        goto LABEL_432;
                      case 1:
                      case 3:
                        v169 = v165 == 0;
                        if (v168)
                        {
                          v170 = 0x100000000;
                          v171 = 0x200000000;
                        }
                        else
                        {
                          v170 = 0x300000000;
                          v171 = 0x400000000;
                        }
LABEL_432:
                        if (!v169)
                          v170 = v171;
                        break;
                      default:
                        v170 = 0;
                        break;
                    }
                    *(_QWORD *)(v164 + 424) = v170 | v166;
                    *(_QWORD *)(v164 + 432) = v167;
                  }
                }
              }
            }
          }
        }
        v91 = WebCore::FrameSelection::lineDirectionPointForBlockDirectionNavigation(a1, 0);
        v92 = *(_QWORD *)(a1 + 32);
        if (v92 && (v93 = *(_QWORD *)(v92 + 8)) != 0)
        {
          v94 = *(unsigned __int8 *)(*(_QWORD *)(v93 + 680) + 370);
          if (v94)
            v94 = v94 != 3;
        }
        else
        {
          v94 = 1;
        }
        if (v94 | a2)
          v95 = 2;
        else
          v95 = 0;
        *(_BYTE *)(a1 + 154) = *(_BYTE *)(a1 + 154) & 0xFD | v95;
        if ((a2 & 1) == 0)
        {
          WebCore::FrameSelection::moveTo(a1, (uint64_t *)&v184, a5, 0);
          goto LABEL_240;
        }
        if (*(_BYTE *)(a1 + 153) != 1 && a4 <= 4 && ((1 << a4) & 0x1A) != 0)
        {
          if (!v92)
          {
LABEL_239:
            WebCore::FrameSelection::setExtent(a1, (uint64_t *)&v184, a5);
LABEL_240:
            if ((a4 - 3) <= 1u)
            {
              if (!*(_BYTE *)(a1 + 52))
                *(_BYTE *)(a1 + 52) = 1;
              *(_DWORD *)(a1 + 48) = v91;
            }
            if (!a5)
              goto LABEL_246;
            goto LABEL_245;
          }
          v104 = *(WebCore::Document **)(v92 + 8);
          if (v104)
          {
            v105 = *((_QWORD *)v104 + 382);
            if (!v105)
            {
              v137 = v28;
              v138 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
              WebCore::Editor::Editor(v138, v104);
              v139 = (WebCore::Editor *)*((_QWORD *)v104 + 382);
              *((_QWORD *)v104 + 382) = v138;
              if (v139)
              {
                WebCore::Editor::~Editor(v139, v90);
                if (*(_DWORD *)v140)
                {
                  *(_QWORD *)(v140 + 496) = 0;
                  *(_OWORD *)(v140 + 464) = 0u;
                  *(_OWORD *)(v140 + 480) = 0u;
                  *(_OWORD *)(v140 + 432) = 0u;
                  *(_OWORD *)(v140 + 448) = 0u;
                  *(_OWORD *)(v140 + 400) = 0u;
                  *(_OWORD *)(v140 + 416) = 0u;
                  *(_OWORD *)(v140 + 368) = 0u;
                  *(_OWORD *)(v140 + 384) = 0u;
                  *(_OWORD *)(v140 + 336) = 0u;
                  *(_OWORD *)(v140 + 352) = 0u;
                  *(_OWORD *)(v140 + 304) = 0u;
                  *(_OWORD *)(v140 + 320) = 0u;
                  *(_OWORD *)(v140 + 272) = 0u;
                  *(_OWORD *)(v140 + 288) = 0u;
                  *(_OWORD *)(v140 + 240) = 0u;
                  *(_OWORD *)(v140 + 256) = 0u;
                  *(_OWORD *)(v140 + 208) = 0u;
                  *(_OWORD *)(v140 + 224) = 0u;
                  *(_OWORD *)(v140 + 176) = 0u;
                  *(_OWORD *)(v140 + 192) = 0u;
                  *(_OWORD *)(v140 + 144) = 0u;
                  *(_OWORD *)(v140 + 160) = 0u;
                  *(_OWORD *)(v140 + 112) = 0u;
                  *(_OWORD *)(v140 + 128) = 0u;
                  *(_OWORD *)(v140 + 80) = 0u;
                  *(_OWORD *)(v140 + 96) = 0u;
                  *(_OWORD *)(v140 + 48) = 0u;
                  *(_OWORD *)(v140 + 64) = 0u;
                  *(_OWORD *)(v140 + 16) = 0u;
                  *(_OWORD *)(v140 + 32) = 0u;
                  *(_OWORD *)v140 = 0u;
                }
                else
                {
                  WTF::fastFree((WTF *)v140, v90);
                }
              }
              v105 = *((_QWORD *)v104 + 382);
              v28 = v137;
            }
            v106 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v105 + 16) + 8) + 680) + 370);
            if (v106 == 3 || v106 == 0)
            {
              v108 = *v25;
              if (*v25)
                *(_DWORD *)(v108 + 24) += 2;
              *(_QWORD *)v194 = v108;
              *(_DWORD *)&v194[8] = *(_DWORD *)(a1 + 64);
              LOBYTE(v195) = *(_BYTE *)(a1 + 68);
              v109 = *(_QWORD *)(a1 + 72);
              if (v109)
                *(_DWORD *)(v109 + 24) += 2;
              v196 = (WebCore::Node *)v109;
              v110 = *(_QWORD *)(a1 + 88);
              v197 = *(_DWORD *)(a1 + 80);
              v198 = *(_BYTE *)(a1 + 84);
              if (v110)
                *(_DWORD *)(v110 + 24) += 2;
              v199 = v110;
              v200 = *(_DWORD *)(a1 + 96);
              v201 = *(_BYTE *)(a1 + 100);
              v111 = *(_QWORD *)(a1 + 104);
              if (v111)
                *(_DWORD *)(v111 + 24) += 2;
              v202 = v111;
              v203 = *(_DWORD *)(a1 + 112);
              v204 = *(_BYTE *)(a1 + 116);
              v112 = *(_QWORD *)(a1 + 120);
              if (v112)
                *(_DWORD *)(v112 + 24) += 2;
              v205 = v112;
              v206 = *(_DWORD *)v28;
              v207 = *(_BYTE *)(v28 + 4);
              v113 = *(_QWORD *)(a1 + 136);
              if (v113)
                *(_DWORD *)(v113 + 24) += 2;
              v208 = v113;
              v209 = *(_DWORD *)(a1 + 144);
              v210 = *(_BYTE *)(a1 + 148);
              v211 = *(_WORD *)(a1 + 152);
              v212 = *(_BYTE *)(a1 + 154);
              v114 = v184;
              if (v184)
              {
                v115 = *((_DWORD *)v184 + 6);
                LODWORD(v215) = v185;
                BYTE4(v215) = v186;
                *((_DWORD *)v184 + 6) = v115 + 4;
              }
              else
              {
                LODWORD(v215) = v185;
                BYTE4(v215) = v186;
              }
              v196 = v114;
              if (v109)
              {
                if (*(_DWORD *)(v109 + 24) == 2)
                {
                  if ((*(_WORD *)(v109 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v109);
                }
                else
                {
                  *(_DWORD *)(v109 + 24) -= 2;
                }
              }
              v197 = (int)v215;
              v198 = BYTE4(v215);
              WebCore::VisibleSelection::validate((uint64_t)v194, 0);
              if (v114)
              {
                if (*((_DWORD *)v114 + 6) == 2)
                {
                  if ((*((_WORD *)v114 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v114);
                }
                else
                {
                  *((_DWORD *)v114 + 6) -= 2;
                }
              }
              if ((*(_BYTE *)(a1 + 154) & 1) != (v212 & 1))
              {
                WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(a1 + 88), (uint64_t)&v215);
                v116 = v184;
                v184 = v215;
                if (v116)
                {
                  if (*((_DWORD *)v116 + 6) == 2)
                  {
                    if ((*((_WORD *)v116 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v116);
                  }
                  else
                  {
                    *((_DWORD *)v116 + 6) -= 2;
                  }
                }
                v185 = v216;
                v186 = v217;
                v187 = 1;
              }
              WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v194);
            }
          }
        }
        v96 = *(_QWORD *)(a1 + 32);
        if (v96)
        {
          v97 = *(WebCore::Document **)(v96 + 8);
          if (v97)
          {
            v98 = *((_QWORD *)v97 + 382);
            if (!v98)
            {
              v134 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
              WebCore::Editor::Editor(v134, v97);
              v135 = (WebCore::Editor *)*((_QWORD *)v97 + 382);
              *((_QWORD *)v97 + 382) = v134;
              if (v135)
              {
                WebCore::Editor::~Editor(v135, v90);
                if (*(_DWORD *)v136)
                {
                  *(_QWORD *)(v136 + 496) = 0;
                  *(_OWORD *)(v136 + 464) = 0u;
                  *(_OWORD *)(v136 + 480) = 0u;
                  *(_OWORD *)(v136 + 432) = 0u;
                  *(_OWORD *)(v136 + 448) = 0u;
                  *(_OWORD *)(v136 + 400) = 0u;
                  *(_OWORD *)(v136 + 416) = 0u;
                  *(_OWORD *)(v136 + 368) = 0u;
                  *(_OWORD *)(v136 + 384) = 0u;
                  *(_OWORD *)(v136 + 336) = 0u;
                  *(_OWORD *)(v136 + 352) = 0u;
                  *(_OWORD *)(v136 + 304) = 0u;
                  *(_OWORD *)(v136 + 320) = 0u;
                  *(_OWORD *)(v136 + 272) = 0u;
                  *(_OWORD *)(v136 + 288) = 0u;
                  *(_OWORD *)(v136 + 240) = 0u;
                  *(_OWORD *)(v136 + 256) = 0u;
                  *(_OWORD *)(v136 + 208) = 0u;
                  *(_OWORD *)(v136 + 224) = 0u;
                  *(_OWORD *)(v136 + 176) = 0u;
                  *(_OWORD *)(v136 + 192) = 0u;
                  *(_OWORD *)(v136 + 144) = 0u;
                  *(_OWORD *)(v136 + 160) = 0u;
                  *(_OWORD *)(v136 + 112) = 0u;
                  *(_OWORD *)(v136 + 128) = 0u;
                  *(_OWORD *)(v136 + 80) = 0u;
                  *(_OWORD *)(v136 + 96) = 0u;
                  *(_OWORD *)(v136 + 48) = 0u;
                  *(_OWORD *)(v136 + 64) = 0u;
                  *(_OWORD *)(v136 + 16) = 0u;
                  *(_OWORD *)(v136 + 32) = 0u;
                  *(_OWORD *)v136 = 0u;
                }
                else
                {
                  WTF::fastFree((WTF *)v136, v90);
                }
              }
              v98 = *((_QWORD *)v97 + 382);
            }
            v99 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v98 + 16) + 8) + 680) + 370);
            v100 = v99 == 3 || v99 == 0;
            if (v100 && (a4 - 7) <= 2 && *(_BYTE *)(a1 + 153) != 1)
            {
              v101 = WebCore::directionOfEnclosingBlock((WebCore *)(a1 + 104), (const WebCore::Position *)v90);
              if ((_DWORD)a3 == 2)
                v102 = v101;
              else
                v102 = 1;
              if ((_DWORD)a3 == 3)
                v103 = v101;
              else
                v103 = 0;
              if ((_DWORD)a3 && v102 && !v103)
              {
                if ((*(_BYTE *)(a1 + 154) & 1) != 0)
                  goto LABEL_200;
              }
              else if ((*(_BYTE *)(a1 + 154) & 1) == 0)
              {
LABEL_200:
                WebCore::FrameSelection::setBase(a1, (uint64_t *)&v184, a5);
                if (!a5)
                  goto LABEL_246;
                goto LABEL_245;
              }
              WebCore::FrameSelection::setExtent(a1, (uint64_t *)&v184, a5);
              if (!a5)
                goto LABEL_246;
LABEL_245:
              *(_BYTE *)(a1 + 184) = 0;
LABEL_246:
              v29 = 1;
              *(_BYTE *)(a1 + 24) = 1;
LABEL_247:
              v117 = v184;
              v184 = 0;
              if (v117)
              {
                if (*((_DWORD *)v117 + 6) == 2)
                {
                  if ((*((_WORD *)v117 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v117);
                }
                else
                {
                  *((_DWORD *)v117 + 6) -= 2;
                }
              }
              goto LABEL_250;
            }
          }
        }
        goto LABEL_239;
      }
      v29 = 0;
LABEL_250:
      if (v188)
      {
        if (*((_DWORD *)v188 + 6) == 2)
        {
          if ((*((_WORD *)v188 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v188);
        }
        else
        {
          *((_DWORD *)v188 + 6) -= 2;
        }
      }
      WebCore::Style::PostResolutionCallbackDisabler::~PostResolutionCallbackDisabler((WebCore::Style::PostResolutionCallbackDisabler *)&v192, v26);
      v118 = v193;
      v193 = 0;
      if (v118)
      {
        if (*((_DWORD *)v118 + 6) == 2)
        {
          if ((*((_WORD *)v118 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v118);
        }
        else
        {
          *((_DWORD *)v118 + 6) -= 2;
        }
      }
      return v29;
    default:
      goto LABEL_143;
  }
}

unsigned int *WebCore::Editor::rangeForPoint@<X0>(WebCore::Editor *this@<X0>, const WebCore::IntPoint *a2@<X1>, const WebCore::IntPoint *a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v6;
  WebCore::LocalFrame *v7;
  unsigned int *result;
  void *v9;
  const WebCore::IntPoint *v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  WebCore::ScrollView *v16;
  unsigned int v17;
  unsigned int v18;
  _QWORD *v19;
  unint64_t v20;
  WebCore::Node *v21[3];
  _QWORD v22[13];

  v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 528);
  if (v6)
    v7 = *(WebCore::LocalFrame **)(v6 + 8);
  else
    v7 = 0;
  result = (unsigned int *)WebCore::LocalFrame::documentAtPoint(v7, a2, a3);
  if (result)
  {
    v11 = result;
    result[6] += 2;
    v12 = *((_QWORD *)result + 66);
    if (v12 && (v13 = *(unsigned int **)(v12 + 8)) != 0)
    {
      v14 = v13 + 2;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
      v16 = (WebCore::ScrollView *)*((_QWORD *)v13 + 36);
      if (v16)
      {
        ++*((_DWORD *)v16 + 2);
        v20 = WebCore::ScrollView::windowToContents(v16, a2, v10);
        WebCore::LocalFrame::visiblePositionForPoint((WebCore::LocalFrame *)v13, (int32x2_t *)&v20, (int8x8_t *)v21);
        WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)v22, (const WebCore::VisiblePosition *)v21, 0);
        WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)v22, a4);
        WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v22);
        result = (unsigned int *)v21[0];
        v21[0] = 0;
        if (result)
        {
          if (result[6] == 2)
          {
            if ((*((_WORD *)result + 15) & 0x400) == 0)
              result = WebCore::Node::removedLastRef((WebCore::Node *)result, v9);
          }
          else
          {
            result[6] -= 2;
          }
        }
        if (*((_DWORD *)v16 + 2) == 1)
          result = (unsigned int *)(*(uint64_t (**)(WebCore::ScrollView *))(*(_QWORD *)v16 + 8))(v16);
        else
          --*((_DWORD *)v16 + 2);
      }
      else
      {
        *a4 = 0;
        a4[32] = 0;
      }
      do
      {
        v17 = __ldaxr(v14);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v14));
      if (!v18)
      {
        atomic_store(1u, v14);
        v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v19 = off_1E31FE290;
        v19[1] = v14;
        v22[0] = v19;
        WTF::ensureOnMainThread();
        result = (unsigned int *)v22[0];
        v22[0] = 0;
        if (result)
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
    else
    {
      *a4 = 0;
      a4[32] = 0;
    }
    if (v11[6] == 2)
    {
      if ((*((_WORD *)v11 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v11, v9);
    }
    else
    {
      v11[6] -= 2;
    }
  }
  else
  {
    *a4 = 0;
    a4[32] = 0;
  }
  return result;
}

void WebCore::FrameSelection::revealSelection(uint64_t a1, int a2, uint64_t a3, BOOL *a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  char v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  int32x4_t v14;
  uint64_t v15;
  int32x4_t v16;
  int8x16_t v17;
  int32x4_t v18;
  int8x16_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  BOOL v33;
  float v34;
  uint64_t v35;
  unint64_t v36;
  float v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  WebCore::RenderBlock **v45;
  uint64_t v46;
  BOOL *v47;
  int32x4_t v48;
  int32x4_t v49;
  int8x16_t v50;
  int32x4_t v51;
  int8x16_t v52;
  WebCore::Node *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WebCore::Node *v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  char v65;
  char v66;
  WebCore::Node *v67[2];
  char v68;
  BOOL v69;
  int8x16_t v70;
  VisiblePosition v71;
  uint64_t v72;
  uint64_t v73;

  if (a2 != 3)
  {
    v72 = v5;
    v73 = v6;
    if (*(_BYTE *)(a1 + 153))
    {
      v9 = (char)a4;
      v11 = a2;
      v12 = *(_QWORD *)(a1 + 32);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 8);
        if (v13)
        {
          *(_DWORD *)(v13 + 24) += 2;
          if (*(_QWORD *)(v13 + 1944))
          {
            if (!*(_BYTE *)(v13 + 3405))
            {
              WebCore::Document::updateStyleIfNeeded((WebCore::Document *)v13);
              if ((*(_WORD *)(a1 + 256) & 0x20) != 0)
                WebCore::FrameSelection::updateAppearance((WebCore::FrameSelection *)a1);
            }
          }
          if (*(_DWORD *)(v13 + 24) == 2)
          {
            if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v13);
          }
          else
          {
            *(_DWORD *)(v13 + 24) -= 2;
          }
        }
      }
      v70 = 0uLL;
      v69 = 0;
      if (*(_BYTE *)(a1 + 153) == 1)
      {
        v14.i64[0] = WebCore::FrameSelection::absoluteCaretBounds((WebCore::FrameSelection *)a1, &v69, a3, a4);
        v14.i64[1] = v15;
        v16.i64[0] = 0xFE000000FE000000;
        v16.i64[1] = 0xFE000000FE000000;
        v17 = (int8x16_t)vcgtq_s32(v14, v16);
        v18.i64[0] = 0xFE000000FE000000;
        v18.i64[1] = 0xFE000000FE000000;
        v19.i64[0] = 0x8000000080000000;
        v19.i64[1] = 0x8000000080000000;
        v70 = vorrq_s8((int8x16_t)(*(_OWORD *)&v17 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v18, v14), v19, (int8x16_t)vshlq_n_s32(v14, 6uLL)), v17));
      }
      else
      {
        if ((v9 & 1) != 0)
        {
          WebCore::FrameSelection::selectionBounds(a1, 0);
          v24 = floorf(v20);
          v25 = 2147500000.0;
          if (v24 < 2147500000.0)
          {
            v25 = -2147500000.0;
            if (v24 > -2147500000.0)
              v25 = (float)(int)v24;
          }
          v26 = floorf(v21);
          v27 = 2147500000.0;
          if (v26 < 2147500000.0)
          {
            v27 = -2147500000.0;
            if (v26 > -2147500000.0)
              v27 = (float)(int)v26;
          }
          v28 = v21 + v23;
          v29 = ceilf(v20 + v22);
          v30 = 2147500000.0;
          if (v29 < 2147500000.0)
          {
            v30 = -2147500000.0;
            if (v29 > -2147500000.0)
              v30 = (float)(int)v29;
          }
          v31 = ceilf(v28);
          v32 = 2147500000.0;
          if (v31 < 2147500000.0)
          {
            v32 = -2147500000.0;
            v33 = v31 <= -2147500000.0;
            v34 = (float)(int)v31;
            if (!v33)
              v32 = v34;
          }
          if (v25 >= 2147500000.0)
          {
            v35 = 0x7FFFFFFFLL;
          }
          else if (v25 <= -2147500000.0)
          {
            v35 = 0x80000000;
          }
          else
          {
            v35 = (int)v25;
          }
          if (v27 >= 2147500000.0)
          {
            v36 = 0x7FFFFFFF00000000;
          }
          else if (v27 <= -2147500000.0)
          {
            v36 = 0x8000000000000000;
          }
          else
          {
            v36 = (unint64_t)(int)v27 << 32;
          }
          v37 = v30 - v25;
          v38 = v32 - v27;
          v39 = 0x7FFFFFFFLL;
          v40 = 0x80000000;
          if (v37 > -2147500000.0)
            v40 = (int)v37;
          if (v37 < 2147500000.0)
            v39 = v40;
          v41 = 0x7FFFFFFF00000000;
          v42 = 0x8000000000000000;
          if (v38 > -2147500000.0)
            v42 = (unint64_t)(int)v38 << 32;
          if (v38 < 2147500000.0)
            v41 = v42;
          v43 = v36 | v35;
          v44 = v41 | v39;
        }
        else
        {
          WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(a1 + 104), (uint64_t)v67);
          v68 = 1;
          v71.var0.var0.var0 = 0;
          v60 = WebCore::localCaretRectInRendererForCaretPainting((WebCore *)v67, &v71, v45);
          v61 = v46;
          v43 = WebCore::absoluteBoundsForLocalCaretRect((WebCore *)v71.var0.var0.var0, (WebCore::RenderBlock *)&v60, 0, v47);
        }
        v48.i64[0] = v43;
        v48.i64[1] = v44;
        v49.i64[0] = 0xFE000000FE000000;
        v49.i64[1] = 0xFE000000FE000000;
        v50 = (int8x16_t)vcgtq_s32(v48, v49);
        v51.i64[0] = 0xFE000000FE000000;
        v51.i64[1] = 0xFE000000FE000000;
        v52.i64[0] = 0x8000000080000000;
        v52.i64[1] = 0x8000000080000000;
        v70 = vorrq_s8((int8x16_t)(*(_OWORD *)&v50 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v51, v48), v52, (int8x16_t)vshlq_n_s32(v48, 6uLL)), v50));
        if ((v9 & 1) == 0)
        {
          v53 = v67[0];
          v67[0] = 0;
          if (v53)
          {
            if (*((_DWORD *)v53 + 6) == 2)
            {
              if ((*((_WORD *)v53 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v53);
            }
            else
            {
              *((_DWORD *)v53 + 6) -= 2;
            }
          }
        }
      }
      v54 = *(_QWORD *)(a1 + 120);
      if (v54)
      {
        *(_DWORD *)(v54 + 24) += 2;
        v55 = *(_QWORD *)(v54 + 64) & 0xFFFFFFFFFFFFLL;
        if (v55)
        {
          if (!*(_DWORD *)(a1 + 272))
          {
            LOBYTE(v60) = v11;
            v61 = a3;
            v62 = a3;
            v63 = 1;
            v64 = a5;
            v65 = 0;
            v66 = 0;
            WebCore::LocalFrameView::scrollRectToVisible((__int128 *)v70.i8, v55, v69, (int **)&v60);
            WebCore::FrameSelection::updateAppearance((WebCore::FrameSelection *)a1);
            v56 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 528);
            if (v56)
            {
              v57 = *(_QWORD *)(v56 + 8);
              if (v57)
              {
                v58 = *(_QWORD *)(v57 + 24);
                if (v58)
                {
                  v59 = *(_QWORD *)(v58 + 8);
                  if (v59)
                    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v59 + 48) + 16) + 656))(*(_QWORD *)(*(_QWORD *)(v59 + 48) + 16));
                }
              }
            }
          }
        }
        if (*(_DWORD *)(v54 + 24) == 2)
        {
          if ((*(_WORD *)(v54 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v54);
        }
        else
        {
          *(_DWORD *)(v54 + 24) -= 2;
        }
      }
    }
  }
}

void WebCore::Editor::respondToChangedSelection(uint64_t Ref, WTF::StringImpl *a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  WTF::StringImpl *v22;
  const WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  char v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  WTF::StringImpl *v34;
  const WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  unsigned int v38;
  int v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WebCore::Node *v45;
  WebCore::Node *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WebCore::Node *v69;
  int v70;
  WebCore::Node *v71;
  unsigned __int8 v72;
  uint64_t v73;
  int v74;
  char v75;
  uint64_t v76;
  int v77;
  char v78;
  uint64_t v79;
  int v80;
  char v81;
  uint64_t v82;
  int v83;
  char v84;
  uint64_t v85;
  int v86;
  char v87;
  uint64_t v88;
  int v89;
  char v90;
  __int16 v91;
  char v92;
  WTF::StringImpl *v93;

  if (*(_BYTE *)(Ref + 88))
    return;
  v4 = Ref;
  v5 = *(_QWORD *)(*(_QWORD *)(Ref + 16) + 8);
  *(_DWORD *)(v5 + 24) += 2;
  if (!*(_QWORD *)(Ref + 176))
    goto LABEL_139;
  v6 = *(_QWORD *)(v5 + 3064);
  v7 = *(_QWORD *)(v6 + 56);
  if (v7)
    *(_DWORD *)(v7 + 24) += 2;
  v73 = v7;
  v74 = *(_DWORD *)(v6 + 64);
  v75 = *(_BYTE *)(v6 + 68);
  v8 = *(_QWORD *)(v6 + 72);
  if (v8)
    *(_DWORD *)(v8 + 24) += 2;
  v76 = v8;
  v77 = *(_DWORD *)(v6 + 80);
  v78 = *(_BYTE *)(v6 + 84);
  v9 = *(_QWORD *)(v6 + 88);
  if (v9)
    *(_DWORD *)(v9 + 24) += 2;
  v79 = v9;
  v80 = *(_DWORD *)(v6 + 96);
  v81 = *(_BYTE *)(v6 + 100);
  v10 = *(_QWORD *)(v6 + 104);
  if (v10)
    *(_DWORD *)(v10 + 24) += 2;
  v82 = v10;
  v83 = *(_DWORD *)(v6 + 112);
  v84 = *(_BYTE *)(v6 + 116);
  v11 = *(_QWORD *)(v6 + 120);
  if (v11)
    *(_DWORD *)(v11 + 24) += 2;
  v85 = v11;
  v86 = *(_DWORD *)(v6 + 128);
  v87 = *(_BYTE *)(v6 + 132);
  v12 = *(_QWORD *)(v6 + 136);
  if (v12)
    *(_DWORD *)(v12 + 24) += 2;
  v88 = v12;
  v89 = *(_DWORD *)(v6 + 144);
  v90 = *(_BYTE *)(v6 + 148);
  v91 = *(_WORD *)(v6 + 152);
  v92 = *(_BYTE *)(v6 + 154);
  WebCore::VisibleSelection::firstRange((WebCore::Node *)&v73, &v69);
  if (!v72)
  {
    LOBYTE(v15) = 0;
    goto LABEL_121;
  }
  v70 = 0;
  v14 = *(_QWORD *)(v4 + 176);
  v15 = *(_QWORD *)(v14 + 16);
  if (v15)
    *(_DWORD *)v15 += 2;
  v16 = *(_QWORD *)(v14 + 24);
  if (v16)
    *(_DWORD *)v16 += 2;
  if (!v15)
  {
    v17 = 0;
    if (v16)
      goto LABEL_22;
LABEL_83:
    v18 = 0;
    goto LABEL_23;
  }
  v17 = *(_DWORD *)(v15 + 4);
  if (!v16)
    goto LABEL_83;
LABEL_22:
  v18 = *(_DWORD *)(v16 + 4);
LABEL_23:
  if ((v18 | v17) < 0)
    goto LABEL_201;
  v19 = (v17 + v18);
  if (__OFADD__(v17, v18))
    goto LABEL_201;
  if (!v15)
  {
    if (v16)
    {
LABEL_28:
      v21 = (*(unsigned __int8 *)(v16 + 16) >> 2) & 1;
      goto LABEL_29;
    }
    if (!(_DWORD)v19)
    {
      v40 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
      goto LABEL_91;
    }
    if ((v19 & 0x80000000) == 0)
    {
      WTF::tryFastCompactMalloc((WTF *)(v19 + 20));
      v40 = v93;
      if (v93)
      {
        *(_DWORD *)v93 = 2;
        *((_DWORD *)v40 + 1) = v19;
        *((_QWORD *)v40 + 1) = (char *)v40 + 20;
        *((_DWORD *)v40 + 4) = 4;
LABEL_91:
        v68 = v40;
        goto LABEL_36;
      }
    }
LABEL_201:
    v68 = 0;
    goto LABEL_202;
  }
  v20 = *(_DWORD *)(v15 + 16);
  v21 = (v20 >> 2) & 1;
  if (v16 && (v20 & 4) != 0)
    goto LABEL_28;
LABEL_29:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v19, v21, v15, v16, &v68);
  if (!v68)
  {
LABEL_202:
    __break(0xC471u);
    goto LABEL_205;
  }
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::destroy((WTF::StringImpl *)v16, v13);
      if (!v15)
        goto LABEL_36;
      goto LABEL_34;
    }
    *(_DWORD *)v16 -= 2;
  }
  if (!v15)
    goto LABEL_36;
LABEL_34:
  if (*(_DWORD *)v15 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v15, v13);
  else
    *(_DWORD *)v15 -= 2;
LABEL_36:
  v22 = (WTF::StringImpl *)v72;
  if (!v72)
  {
    __break(1u);
    goto LABEL_184;
  }
  WebCore::plainText(&v69, 0, 0, (const WTF::String *)&v93);
  if (v93)
  {
    WTF::StringImpl::replace();
    v25 = v93;
    v93 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v24);
      else
        *(_DWORD *)v25 -= 2;
    }
    v26 = v67;
    if (v67)
    {
      v27 = 0;
      *(_DWORD *)v67 += 2;
      goto LABEL_43;
    }
  }
  else
  {
    v26 = 0;
    v67 = 0;
  }
  v27 = 1;
LABEL_43:
  v28 = **(_QWORD **)(v4 + 176);
  if (v28)
    *(_DWORD *)v28 += 2;
  if ((v27 & 1) != 0)
  {
    v29 = 0;
    if (v28)
      goto LABEL_47;
LABEL_85:
    v30 = 0;
    goto LABEL_48;
  }
  v29 = *((_DWORD *)v26 + 1);
  if (!v28)
    goto LABEL_85;
LABEL_47:
  v30 = *(_DWORD *)(v28 + 4);
LABEL_48:
  if ((v30 | v29) < 0)
    goto LABEL_203;
  v31 = (v29 + v30);
  if (__OFADD__(v29, v30))
    goto LABEL_203;
  if ((v27 & 1) != 0)
  {
    if (v28)
    {
LABEL_53:
      v33 = (*(unsigned __int8 *)(v28 + 16) >> 2) & 1;
      goto LABEL_54;
    }
    if (!(_DWORD)v31)
    {
      v41 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
      goto LABEL_97;
    }
    if ((v31 & 0x80000000) == 0)
    {
      WTF::tryFastCompactMalloc((WTF *)(v31 + 20));
      v41 = v93;
      if (v93)
      {
        *(_DWORD *)v93 = 2;
        *((_DWORD *)v41 + 1) = v31;
        *((_QWORD *)v41 + 1) = (char *)v41 + 20;
        *((_DWORD *)v41 + 4) = 4;
LABEL_97:
        v66 = v41;
        goto LABEL_61;
      }
    }
LABEL_203:
    v66 = 0;
    goto LABEL_204;
  }
  v32 = *((_DWORD *)v26 + 4);
  v33 = (v32 >> 2) & 1;
  if (v28 && (v32 & 4) != 0)
    goto LABEL_53;
LABEL_54:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v31, v33, (uint64_t)v26, v28, &v66);
  if (!v66)
  {
LABEL_204:
    __break(0xC471u);
LABEL_205:
    JUMPOUT(0x195AD30F0);
  }
  if (!v28)
    goto LABEL_58;
  if (*(_DWORD *)v28 != 2)
  {
    *(_DWORD *)v28 -= 2;
LABEL_58:
    if ((v27 & 1) != 0)
      goto LABEL_61;
    goto LABEL_59;
  }
  WTF::StringImpl::destroy((WTF::StringImpl *)v28, v34);
  if ((v27 & 1) != 0)
    goto LABEL_61;
LABEL_59:
  if (*(_DWORD *)v26 == 2)
    WTF::StringImpl::destroy(v26, v34);
  else
    *(_DWORD *)v26 -= 2;
LABEL_61:
  if ((WTF::equal(v68, v67, v23) & 1) != 0 || !WTF::equal(v68, v66, v35))
    goto LABEL_104;
  v22 = v67;
  if (!v67)
  {
    v36 = *(WTF::StringImpl **)(*(_QWORD *)(v4 + 176) + 16);
    if (v36)
    {
      LODWORD(v15) = 0;
LABEL_65:
      v37 = *(_DWORD *)v36;
      v38 = *((_DWORD *)v36 + 1);
      *(_DWORD *)v36 += 2;
      if (v37)
      {
        *(_DWORD *)v36 = v37;
        if (v15 > v38)
        {
          if (v22)
          {
LABEL_68:
            LODWORD(v15) = *((_DWORD *)v22 + 1);
LABEL_69:
            v13 = (WTF::StringImpl *)*((_QWORD *)v22 + 1);
            v39 = v15;
            goto LABEL_70;
          }
LABEL_100:
          v13 = 0;
          v39 = 0;
LABEL_70:
          if (v68)
            LOBYTE(v15) = WTF::StringImpl::startsWith();
          else
            LOBYTE(v15) = v39 == 0;
          goto LABEL_105;
        }
      }
      else
      {
        WTF::StringImpl::destroy(v36, v13);
        if (v15 > v38)
        {
          v22 = v67;
          if (v67)
            goto LABEL_68;
          goto LABEL_100;
        }
      }
    }
LABEL_104:
    LOBYTE(v15) = 0;
    goto LABEL_105;
  }
  LODWORD(v15) = *((_DWORD *)v67 + 1);
  v36 = *(WTF::StringImpl **)(*(_QWORD *)(v4 + 176) + 16);
  if (v36)
    goto LABEL_65;
LABEL_184:
  if ((_DWORD)v15)
    goto LABEL_69;
LABEL_105:
  v42 = v66;
  v66 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v13);
    else
      *(_DWORD *)v42 -= 2;
  }
  v43 = v67;
  v67 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v13);
    else
      *(_DWORD *)v43 -= 2;
  }
  v44 = v68;
  v68 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v13);
    else
      *(_DWORD *)v44 -= 2;
  }
  if (v72)
  {
    v45 = v71;
    v71 = 0;
    if (v45)
    {
      if (*((_DWORD *)v45 + 6) == 2)
      {
        if ((*((_WORD *)v45 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v45);
      }
      else
      {
        *((_DWORD *)v45 + 6) -= 2;
      }
    }
    v46 = v69;
    v69 = 0;
    if (v46)
    {
      if (*((_DWORD *)v46 + 6) == 2)
      {
        if ((*((_WORD *)v46 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v46);
      }
      else
      {
        *((_DWORD *)v46 + 6) -= 2;
      }
    }
  }
LABEL_121:
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v73);
  if (*(_QWORD *)(v4 + 176) && (v15 & 1) == 0)
  {
    v47 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8);
    *(_DWORD *)(v47 + 24) += 2;
    WebCore::Document::updateStyleIfNeeded((WebCore::Document *)v47);
    v49 = *(_QWORD *)(v4 + 80);
    *(_QWORD *)(v4 + 80) = 0;
    if (v49)
    {
      v59 = *(unsigned int *)(v49 - 4);
      if ((_DWORD)v59)
      {
        v60 = v49;
        do
        {
          v61 = *(WTF::StringImpl **)v60;
          if (*(_QWORD *)v60 != -1)
          {
            v62 = *(WTF **)(v60 + 8);
            if (v62)
            {
              *(_QWORD *)(v60 + 8) = 0;
              *(_DWORD *)(v60 + 16) = 0;
              WTF::fastFree(v62, v48);
              v61 = *(WTF::StringImpl **)v60;
            }
            *(_QWORD *)v60 = 0;
            if (v61)
            {
              if (*(_DWORD *)v61 == 2)
                WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v48);
              else
                *(_DWORD *)v61 -= 2;
            }
          }
          v60 += 24;
          --v59;
        }
        while (v59);
      }
      WTF::fastFree((WTF *)(v49 - 16), v48);
    }
    *(_BYTE *)(v4 + 474) = 0;
    Ref = WebCore::Editor::nodeBeforeWritingSuggestions((WebCore::Editor *)v4);
    if (!Ref)
      goto LABEL_136;
    v50 = *(_DWORD *)(Ref + 24);
    *(_DWORD *)(Ref + 24) = v50 + 2;
    v51 = *(_QWORD *)(Ref + 32);
    if (v51)
    {
      if ((*(_WORD *)(v51 + 28) & 8) != 0)
        v52 = *(_QWORD *)(Ref + 32);
      else
        v52 = 0;
      if (v50)
        goto LABEL_130;
    }
    else
    {
      v52 = 0;
      if (v50)
      {
LABEL_130:
        *(_DWORD *)(Ref + 24) = v50;
LABEL_131:
        if (v52)
        {
          *(_DWORD *)(v52 + 24) += 2;
          v53 = *(WTF **)(v4 + 176);
          *(_QWORD *)(v4 + 176) = 0;
          if (v53)
            std::default_delete<WebCore::WritingSuggestionData>::operator()[abi:sn180100](v53, a2);
          Ref = WebCore::Node::invalidateStyle(v52, 4u, 2);
          if (*(_DWORD *)(v52 + 24) == 2)
          {
            if ((*(_WORD *)(v52 + 30) & 0x400) == 0)
              Ref = WebCore::Node::removedLastRef((WebCore::Node *)v52);
          }
          else
          {
            *(_DWORD *)(v52 + 24) -= 2;
          }
        }
LABEL_136:
        if (v47)
        {
          if (*(_DWORD *)(v47 + 24) == 2)
          {
            if ((*(_WORD *)(v47 + 30) & 0x400) == 0)
              Ref = WebCore::Node::removedLastRef((WebCore::Node *)v47);
          }
          else
          {
            *(_DWORD *)(v47 + 24) -= 2;
          }
        }
        goto LABEL_139;
      }
    }
    if ((*(_WORD *)(Ref + 30) & 0x400) == 0)
      Ref = WebCore::Node::removedLastRef((WebCore::Node *)Ref);
    goto LABEL_131;
  }
LABEL_139:
  v54 = *(_QWORD *)(v4 + 8);
  if (v54)
  {
    Ref = *(_QWORD *)(v54 + 8);
    if (Ref)
    {
      v55 = *(_QWORD *)(v5 + 528);
      if (v55)
        v56 = *(_QWORD *)(v55 + 8);
      else
        v56 = 0;
      Ref = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)Ref + 256))(Ref, v56);
    }
  }
  *(_BYTE *)(v4 + 89) = 1;
  v57 = *(uint64_t **)(v4 + 496);
  if (v57)
  {
    *(_QWORD *)(v4 + 496) = 0;
    v63 = *((unsigned int *)v57 - 1);
    if ((_DWORD)v63)
    {
      v64 = v57;
      do
      {
        v65 = *v64;
        if (*v64 != -1)
        {
          *v64 = 0;
          if (v65)
          {
            if (*(_DWORD *)(v65 + 24) == 2)
            {
              if ((*(_WORD *)(v65 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v65);
            }
            else
            {
              *(_DWORD *)(v65 + 24) -= 2;
            }
          }
        }
        ++v64;
        --v63;
      }
      while (v63);
    }
    Ref = WTF::fastFree((WTF *)(v57 - 2), a2);
  }
  if (!*(_BYTE *)(v4 + 489) && *(double *)(v5 + 2312) == 0.0)
  {
    Ref = WebCore::Document::isTopDocument((WebCore::Document *)v5);
    if (!(_DWORD)Ref)
      goto LABEL_151;
  }
  if ((*(_QWORD *)(v4 + 448) & 0xFFFFFFFFFFFFLL) == 0
    || *(double *)((*(_QWORD *)(v4 + 448) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
  {
    *(_BYTE *)(v4 + 472) = (a3 & 0xA) == 2;
    *(_BYTE *)(v4 + 473) = (a3 & 0x20) != 0;
    *(_QWORD *)(v4 + 440) = 0;
    WTF::MonotonicTime::now((WTF::MonotonicTime *)Ref);
    WebCore::TimerBase::setNextFireTime(v4 + 416, v58 + 0.0);
  }
  if (v5)
  {
LABEL_151:
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
}

unsigned int *WebCore::Editor::selectedText@<X0>(uint64_t a1@<X0>, __int16 a2@<W1>, _QWORD *a3@<X8>)
{
  unsigned int *result;
  WTF::StringImpl *v6;
  WebCore::Node *v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  WebCore::Node *v10[2];
  WebCore::Node *v11;
  char v12;

  result = (unsigned int *)WebCore::VisibleSelection::firstRange((WebCore::Node *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 3064) + 56), v10);
  if (v12)
  {
    WebCore::plainText(v10, a2, 0, (const WTF::String *)&v9);
    result = (unsigned int *)v9;
    if (v9)
    {
      WTF::StringImpl::replace();
      result = (unsigned int *)v9;
      v9 = 0;
      if (result)
      {
        if (*result == 2)
          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
        else
          *result -= 2;
      }
    }
    else
    {
      *a3 = 0;
    }
    if (v12)
    {
      v7 = v11;
      v11 = 0;
      if (v7)
      {
        if (*((_DWORD *)v7 + 6) == 2)
        {
          if ((*((_WORD *)v7 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v7, v6);
        }
        else
        {
          *((_DWORD *)v7 + 6) -= 2;
        }
      }
      result = (unsigned int *)v10[0];
      v10[0] = 0;
      if (result)
      {
        if (result[6] == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)result, v6);
        }
        else
        {
          result[6] -= 2;
        }
      }
    }
  }
  else
  {
    v8 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v8 += 2;
    *a3 = v8;
  }
  return result;
}

WebCore::Node *WebCore::Editor::insertTextPlaceholder@<X0>(WebCore::Node *this@<X0>, int32x2_t *a2@<X1>, WebCore::StyledElement **a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v9;
  int v10;
  int8x8_t v11;
  WebCore::Document *v12;
  WebCore::Range *v13;
  WebCore *v14;
  const WebCore::SimpleRange *v15;
  WebCore::StyledElement *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::Node *v20[2];
  WebCore::Node *v21[2];
  char v22;
  WebCore::Node *v23[13];
  _BYTE v24[8];
  WTF::StringImpl *v25;
  char v26;
  WebCore::StyledElement *v27;
  _QWORD v28[2];
  uint64_t v29;
  char v30;

  v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  v5 = *(_QWORD *)(v4 + 3064);
  if (*(_BYTE *)(v5 + 153))
  {
    v6 = *(_QWORD *)(v5 + 120);
    if (v6)
    {
      v7 = *(_BYTE *)(v5 + 132) & 7;
      if (v7 <= 4)
      {
        v9 = (uint64_t)this;
        if (((1 << v7) & 0x19) == 0)
          goto LABEL_53;
        do
        {
          *(_DWORD *)(v6 + 24) += 2;
          this = (WebCore::Node *)WebCore::Node::computeEditability(v6, 0, 0);
          v10 = (int)this;
          if (*(_DWORD *)(v6 + 24) == 2)
          {
            if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
              this = (WebCore::Node *)WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
          }
          else
          {
            *(_DWORD *)(v6 + 24) -= 2;
          }
          if (!v10)
            break;
          WebCore::Editor::deleteSelectionWithSmartDelete(v9, 0, 9);
          this = (WebCore::Node *)WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(*(_QWORD *)(v4 + 3064) + 56), v28);
          if (!v30)
            break;
          v11 = (int8x8_t)vcgt_s32(*a2, (int32x2_t)0xFE000000FE000000);
          v23[0] = (WebCore::Node *)vorr_s8((int8x8_t)(*(_QWORD *)&v11 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, *a2), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(*a2, 6uLL)), v11));
          this = (WebCore::Node *)WebCore::TextPlaceholderElement::create((WebCore::TextPlaceholderElement *)v4, (WebCore::Document *)v23, &v27);
          if (v30)
          {
            v12 = *(WebCore::Document **)(*(_QWORD *)(v28[0] + 40) + 8);
            v13 = (WebCore::Range *)bmalloc::api::isoAllocate();
            v14 = WebCore::Range::Range(v13, v12);
            WebCore::setBothEndpoints(v14, (WebCore::Range *)v28, v15);
            v16 = v27;
            *((_DWORD *)v27 + 6) += 2;
            v23[0] = v16;
            WebCore::Range::insertNode((unsigned int *)v13, (WebCore::Node *)v23, (uint64_t)v24);
            if (v26)
            {
              v17 = v25;
              v25 = 0;
              if (v17)
              {
                if (*(_DWORD *)v17 == 2)
                  WTF::StringImpl::destroy(v17, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)v17 -= 2;
              }
            }
            this = v23[0];
            v23[0] = 0;
            if (this)
            {
              if (*((_DWORD *)this + 6) == 2)
              {
                if ((*((_WORD *)this + 15) & 0x400) == 0)
                  this = (WebCore::Node *)WebCore::Node::removedLastRef(this, a2);
              }
              else
              {
                *((_DWORD *)this + 6) -= 2;
              }
            }
            if (*((_DWORD *)v13 + 2) == 1)
              this = (WebCore::Node *)(*(uint64_t (**)(WebCore::Range *))(*(_QWORD *)v13 + 8))(v13);
            else
              --*((_DWORD *)v13 + 2);
            if (*((_QWORD *)v16 + 4))
            {
              v18 = *(_QWORD *)(v4 + 3064);
              WebCore::positionInParentBeforeNode(v16, (WebCore::Node *)a2, (uint64_t)v20);
              WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v20, (uint64_t)v21);
              v22 = 1;
              WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)v23, (const WebCore::VisiblePosition *)v21, 0);
              WebCore::FrameSelection::setSelection(v18, (uint64_t)v23, 0xC7u, 0, 0, 0, 0);
              WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v23);
              if (v21[0])
              {
                if (*((_DWORD *)v21[0] + 6) == 2)
                {
                  if ((*((_WORD *)v21[0] + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v21[0], a2);
                }
                else
                {
                  *((_DWORD *)v21[0] + 6) -= 2;
                }
              }
              this = v20[0];
              if (v20[0])
              {
                if (*((_DWORD *)v20[0] + 6) == 2)
                {
                  if ((*((_WORD *)v20[0] + 15) & 0x400) == 0)
                    this = (WebCore::Node *)WebCore::Node::removedLastRef(v20[0], a2);
                }
                else
                {
                  *((_DWORD *)v20[0] + 6) -= 2;
                }
              }
              *a3 = v16;
            }
            else
            {
              *a3 = 0;
              if (*((_DWORD *)v16 + 6) == 2)
              {
                if ((*((_WORD *)v16 + 15) & 0x400) == 0)
                  this = (WebCore::Node *)WebCore::Node::removedLastRef(v16, a2);
              }
              else
              {
                *((_DWORD *)v16 + 6) -= 2;
              }
            }
            if (v30)
            {
              v19 = v29;
              v29 = 0;
              if (v19)
              {
                if (*(_DWORD *)(v19 + 24) == 2)
                {
                  if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v19, a2);
                }
                else
                {
                  *(_DWORD *)(v19 + 24) -= 2;
                }
              }
              this = (WebCore::Node *)v28[0];
              v28[0] = 0;
              if (this)
              {
                if (*((_DWORD *)this + 6) == 2)
                {
                  if ((*((_WORD *)this + 15) & 0x400) == 0)
                    this = (WebCore::Node *)WebCore::Node::removedLastRef(this, a2);
                }
                else
                {
                  *((_DWORD *)this + 6) -= 2;
                }
              }
            }
            goto LABEL_55;
          }
          __break(1u);
LABEL_53:
          v6 = *(_QWORD *)(v6 + 32);
        }
        while (v6);
      }
    }
  }
  *a3 = 0;
LABEL_55:
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      return (WebCore::Node *)WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return this;
}

unsigned int *WebCore::Editor::removeTextPlaceholder(WebCore::Editor *this, WebCore::TextPlaceholderElement *a2)
{
  WebCore::TextPlaceholderElement *v3;
  uint64_t v4;
  WebCore::TextPlaceholderElement *v5;
  WebCore::Node *v6;
  uint64_t i;
  void *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *result;
  __int16 v17;
  __int16 v18;
  WebCore::Node *v19[2];
  char v20;
  _BYTE v21[104];
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WebCore::Node *v25[2];

  v3 = 0;
  v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  v5 = a2;
  do
  {
    if (!WebCore::Node::hasEditableStyle((uint64_t)v5, 0))
      break;
    if ((*((_WORD *)v5 + 14) & 8) != 0)
      v3 = v5;
    i = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 1272);
    if (i)
    {
      if ((*(_WORD *)(i + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
      {
        for (i = *(_QWORD *)(i + 80); i; i = *(_QWORD *)(i + 56))
        {
          if ((*(_WORD *)(i + 28) & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
          {
            break;
          }
        }
      }
      else
      {
        i = 0;
      }
    }
    if ((WebCore::TextPlaceholderElement *)i == v5)
      break;
    v5 = (WebCore::TextPlaceholderElement *)*((_QWORD *)v5 + 4);
  }
  while (v5);
  if (v3)
    *((_DWORD *)v3 + 6) += 2;
  WebCore::positionInParentBeforeNode(a2, v6, (uint64_t)v25);
  v9 = *((_QWORD *)a2 + 4);
  if (v9)
  {
    *(_DWORD *)(v9 + 24) += 2;
    WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v9, a2, &v22);
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      v17 = *(_WORD *)(v9 + 30);
      if ((v17 & 0x400) == 0)
      {
        v18 = *(_WORD *)(v9 + 28);
        if ((v18 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v9, v8);
        }
        else
        {
          if ((v18 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 160) + 16))(*(_QWORD *)(v9 + 160));
            v17 = *(_WORD *)(v9 + 30);
          }
          *(_WORD *)(v9 + 30) = v17 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
        }
      }
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  else
  {
    v22 = 0;
    v23 = 0;
    v24 = 0;
  }
  if ((_BYTE)v24)
  {
    v10 = v23;
    v23 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  v11 = *(_QWORD *)(v4 + 3064);
  if ((*(_WORD *)(v11 + 256) & 4) != 0)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 32) + 8) + 528);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 8);
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 24);
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 8);
          if (v15)
          {
            if ((*(_WORD *)(*(_QWORD *)(v15 + 72) + 26) & 1) != 0
              && v3 == *(WebCore::TextPlaceholderElement **)(v4 + 1248))
            {
              WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v25, (uint64_t)v19);
              v20 = 1;
              WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)v21, (const WebCore::VisiblePosition *)v19, 0);
              WebCore::FrameSelection::setSelection(v11, (uint64_t)v21, 0xC7u, 0, 0, 0, 0);
              WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v21);
              if (v19[0])
              {
                if (*((_DWORD *)v19[0] + 6) == 2)
                {
                  if ((*((_WORD *)v19[0] + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v19[0], v8);
                }
                else
                {
                  *((_DWORD *)v19[0] + 6) -= 2;
                }
              }
            }
          }
        }
      }
    }
  }
  result = (unsigned int *)v25[0];
  if (v25[0])
  {
    if (*((_DWORD *)v25[0] + 6) == 2)
    {
      if ((*((_WORD *)v25[0] + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef(v25[0], v8);
    }
    else
    {
      *((_DWORD *)v25[0] + 6) -= 2;
    }
  }
  if (v3)
  {
    if (*((_DWORD *)v3 + 6) == 2)
    {
      if ((*((_WORD *)v3 + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef(v3, v8);
    }
    else
    {
      *((_DWORD *)v3 + 6) -= 2;
    }
  }
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v4, v8);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::FrameSelection::isFocusedAndActive(WebCore::FrameSelection *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((*((_WORD *)this + 128) & 4) != 0
    && (v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 528)) != 0
    && (v2 = *(_QWORD *)(v1 + 8)) != 0
    && (v3 = *(_QWORD *)(v2 + 24)) != 0
    && (v4 = *(_QWORD *)(v3 + 8)) != 0)
  {
    return *(_WORD *)(*(_QWORD *)(v4 + 72) + 26) & 1;
  }
  else
  {
    return 0;
  }
}

unint64_t WebCore::Editor::firstRectForRange(WebCore::Editor *this, const WebCore::SimpleRange *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  int v6;
  char v7;
  void *v8;
  WebCore::Node *v9;
  int v10;
  WebCore::Node *v11;
  void *v12;
  WebCore::Node *v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  WTF *v18;
  int *v19;
  char v20;
  void *v21;
  const WebCore::VisiblePosition *v22;
  WebCore::Node *v23;
  WTF *v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  unint64_t v39;
  float v40;
  float v41;
  int v42;
  unint64_t v43;
  WTF *v44;
  WebCore::Node *v45;
  void *v46;
  WebCore::Node *v47;
  WebCore::Node *v48;
  WebCore::Node *v49;
  WebCore::Node *v51;
  int v52;
  char v53;
  char v54;
  WTF *v55;
  int v56;
  char v57;
  char v58;
  int v59;
  _BYTE v60[16];
  int v61;
  char v62;
  _BYTE v63[16];
  int v64;
  char v65;
  WebCore::Node *v66;
  int v67;
  char v68;
  unsigned __int8 v69;
  int v70;
  int v71;
  WebCore::Node *v72;
  int v73;
  char v74;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 40) + 8);
  *(_DWORD *)(v3 + 24) += 2;
  WebCore::Document::updateLayout(v3, 0, 0);
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, v4);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  v5 = *(_QWORD *)a2;
  *(_DWORD *)(v5 + 24) = *(_DWORD *)(*(_QWORD *)a2 + 24) + 2;
  v6 = *((_DWORD *)a2 + 2);
  v55 = (WTF *)v5;
  v56 = v6;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 208))(v5) & 1) != 0)
  {
    v7 = 8;
  }
  else if (v6)
  {
    v7 = 10;
  }
  else
  {
    v7 = 9;
  }
  v57 = v7;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v55, (uint64_t)&v66);
  v69 = 1;
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v8);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  v9 = (WebCore::Node *)*((_QWORD *)a2 + 2);
  v10 = *((_DWORD *)a2 + 6);
  if (*(WebCore::Node **)a2 != v9 || *((_DWORD *)a2 + 2) != v10)
  {
    *((_DWORD *)v9 + 6) += 2;
    v72 = v9;
    v73 = v10;
    if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v9 + 208))(v9) & 1) != 0)
    {
      v20 = 8;
    }
    else if (v10)
    {
      v20 = 10;
    }
    else
    {
      v20 = 9;
    }
    v74 = v20;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v72, (uint64_t)&v51);
    v54 = 1;
    v23 = v51;
    if (v51)
    {
      *((_DWORD *)v51 + 6) += 2;
      v55 = v23;
      v56 = v52;
      v57 = v53;
      v58 = 0;
      if (!WebCore::inSameLine((WebCore *)&v51, (const WebCore::VisiblePosition *)&v55, v22))
        v54 = 0;
      v24 = v55;
      v55 = 0;
      if (v24)
      {
        if (*((_DWORD *)v24 + 6) == 2)
        {
          if ((*((_WORD *)v24 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v24, v21);
        }
        else
        {
          *((_DWORD *)v24 + 6) -= 2;
        }
      }
    }
    if (*((_DWORD *)v9 + 6) == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v9, v21);
    }
    else
    {
      *((_DWORD *)v9 + 6) -= 2;
    }
    if (WebCore::inSameLine((WebCore *)&v66, (const WebCore::VisiblePosition *)&v51, v22))
    {
      WebCore::RenderObject::absoluteTextQuads((uint64_t *)a2, 0, (uint64_t)&v55);
      WebCore::unitedBoundingBoxes((unsigned int *)&v55);
      v29 = floorf(v25);
      v30 = 2147500000.0;
      if (v29 < 2147500000.0)
      {
        v30 = -2147500000.0;
        if (v29 > -2147500000.0)
          v30 = (float)(int)v29;
      }
      v31 = floorf(v26);
      v32 = 2147500000.0;
      if (v31 < 2147500000.0)
      {
        v32 = -2147500000.0;
        if (v31 > -2147500000.0)
          v32 = (float)(int)v31;
      }
      v33 = v26 + v28;
      v34 = ceilf(v25 + v27);
      v35 = 2147500000.0;
      if (v34 < 2147500000.0)
      {
        v35 = -2147500000.0;
        if (v34 > -2147500000.0)
          v35 = (float)(int)v34;
      }
      v36 = ceilf(v33);
      v37 = 2147500000.0;
      if (v36 < 2147500000.0)
      {
        v37 = -2147500000.0;
        if (v36 > -2147500000.0)
          v37 = (float)(int)v36;
      }
      if (v30 >= 2147500000.0)
      {
        v38 = 0x7FFFFFFFLL;
      }
      else if (v30 <= -2147500000.0)
      {
        v38 = 0x80000000;
      }
      else
      {
        v38 = (int)v30;
      }
      if (v32 >= 2147500000.0)
      {
        v39 = 0x7FFFFFFF00000000;
      }
      else if (v32 <= -2147500000.0)
      {
        v39 = 0x8000000000000000;
      }
      else
      {
        v39 = (unint64_t)(int)v32 << 32;
      }
      v40 = v35 - v30;
      v41 = v37 - v32;
      if (v40 >= 2147500000.0)
      {
        v42 = 0x7FFFFFFF;
      }
      else if (v40 <= -2147500000.0)
      {
        v42 = 0x80000000;
      }
      else
      {
        v42 = (int)v40;
      }
      if (v41 >= 2147500000.0)
      {
        HIDWORD(v43) = 0x7FFFFFFF;
      }
      else if (v41 <= -2147500000.0)
      {
        HIDWORD(v43) = 0x80000000;
      }
      else
      {
        v43 = (unint64_t)(int)v41 << 32;
      }
      v15 = v39 | v38;
      v70 = HIDWORD(v43);
      v71 = v42;
      v44 = v55;
      if (!v55)
        goto LABEL_85;
      v55 = 0;
      v56 = 0;
    }
    else
    {
      v45 = v66;
      if (v66)
        *((_DWORD *)v66 + 6) += 2;
      v72 = v45;
      v73 = v67;
      v74 = v68;
      WebCore::RenderedPosition::RenderedPosition((uint64_t)&v55, (WebCore::Position *)&v72, (const WebCore::Node *)v69);
      v47 = v72;
      v72 = 0;
      if (v47)
      {
        if (*((_DWORD *)v47 + 6) == 2)
        {
          if ((*((_WORD *)v47 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v47, v46);
        }
        else
        {
          *((_DWORD *)v47 + 6) -= 2;
        }
      }
      v15 = WebCore::RenderedPosition::absoluteRect((uint64_t)&v55, 1);
      v70 = HIDWORD(v14);
      v71 = v14;
      if (v65)
      {
        if (v64 != -1)
          ((void (*)(WebCore::Node **, _BYTE *))off_1E33ACC60[v64])(&v72, v63);
        v64 = -1;
      }
      if (v62)
      {
        if (v61 != -1)
          ((void (*)(WebCore::Node **, _BYTE *))off_1E33ACC60[v61])(&v72, v60);
        v61 = -1;
      }
      if (v59 != -1)
        ((void (*)(WebCore::Node **, int *))off_1E33ACC60[v59])(&v72, &v56);
      v59 = -1;
      v44 = v55;
      v55 = 0;
      if (!v44)
        goto LABEL_85;
      if (*(_DWORD *)v44 != 1)
      {
        --*(_DWORD *)v44;
LABEL_85:
        v48 = v51;
        v51 = 0;
        if (v48)
        {
          if (*((_DWORD *)v48 + 6) == 2)
          {
            if ((*((_WORD *)v48 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v48, (void *)v14);
          }
          else
          {
            *((_DWORD *)v48 + 6) -= 2;
          }
        }
        goto LABEL_91;
      }
    }
    WTF::fastFree(v44, (void *)v14);
    goto LABEL_85;
  }
  v11 = v66;
  if (v66)
    *((_DWORD *)v66 + 6) += 2;
  v51 = v11;
  v52 = v67;
  v53 = v68;
  WebCore::RenderedPosition::RenderedPosition((uint64_t)&v55, (WebCore::Position *)&v51, (const WebCore::Node *)1);
  v13 = v51;
  v51 = 0;
  if (v13)
  {
    if (*((_DWORD *)v13 + 6) == 2)
    {
      if ((*((_WORD *)v13 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v13, v12);
    }
    else
    {
      *((_DWORD *)v13 + 6) -= 2;
    }
  }
  v15 = WebCore::RenderedPosition::absoluteRect((uint64_t)&v55, 0);
  v16 = v14;
  v17 = HIDWORD(v14);
  v70 = HIDWORD(v14);
  v71 = v14;
  if (v65)
  {
    if (v64 != -1)
      ((void (*)(WebCore::Node **, _BYTE *))off_1E33ACC60[v64])(&v51, v63);
    v64 = -1;
  }
  if (v62)
  {
    if (v61 != -1)
      ((void (*)(WebCore::Node **, _BYTE *))off_1E33ACC60[v61])(&v51, v60);
    v61 = -1;
  }
  if (v59 != -1)
    ((void (*)(WebCore::Node **, int *))off_1E33ACC60[v59])(&v51, &v56);
  v59 = -1;
  v18 = v55;
  v55 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 1)
      WTF::fastFree(v18, (void *)v14);
    else
      --*(_DWORD *)v18;
  }
  if (v16 == 2)
  {
    v19 = &v71;
  }
  else
  {
    if ((_DWORD)v17 != 2)
      goto LABEL_91;
    v19 = &v70;
  }
  *v19 = 0;
LABEL_91:
  v49 = v66;
  v66 = 0;
  if (v49)
  {
    if (*((_DWORD *)v49 + 6) == 2)
    {
      if ((*((_WORD *)v49 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v49, (void *)v14);
    }
    else
    {
      *((_DWORD *)v49 + 6) -= 2;
    }
  }
  return v15;
}

uint64_t WebCore::Editor::shouldChangeSelection(uint64_t a1, WebCore::VisibleSelection *a2, WebCore::VisibleSelection *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::Node *v13;
  WebCore::Node *v14;
  WebCore::Node *v15;
  WebCore::Node *v16;
  WebCore::Node *v18[2];
  WebCore::Node *v19;
  char v20;
  WebCore::Node *v21[2];
  WebCore::Node *v22;
  char v23;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 528);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      if (*(_BYTE *)(v9 + 376))
        return 1;
    }
  }
  v11 = *(_QWORD *)(a1 + 8);
  if (!v11)
    return 0;
  v12 = *(_QWORD *)(v11 + 8);
  if (!v12)
    return 0;
  WebCore::VisibleSelection::toNormalizedRange(a2, v21);
  WebCore::VisibleSelection::toNormalizedRange(a3, v18);
  v10 = (*(uint64_t (**)(uint64_t, WebCore::Node **, WebCore::Node **, uint64_t, uint64_t))(*(_QWORD *)v12 + 112))(v12, v21, v18, a4, a5);
  if (v20)
  {
    v13 = v19;
    v19 = 0;
    if (v13)
    {
      if (*((_DWORD *)v13 + 6) == 2)
      {
        if ((*((_WORD *)v13 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v13);
      }
      else
      {
        *((_DWORD *)v13 + 6) -= 2;
      }
    }
    v14 = v18[0];
    v18[0] = 0;
    if (v14)
    {
      if (*((_DWORD *)v14 + 6) == 2)
      {
        if ((*((_WORD *)v14 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v14);
      }
      else
      {
        *((_DWORD *)v14 + 6) -= 2;
      }
    }
  }
  if (v23)
  {
    v15 = v22;
    v22 = 0;
    if (v15)
    {
      if (*((_DWORD *)v15 + 6) == 2)
      {
        if ((*((_WORD *)v15 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v15);
      }
      else
      {
        *((_DWORD *)v15 + 6) -= 2;
      }
    }
    v16 = v21[0];
    v21[0] = 0;
    if (v16)
    {
      if (*((_DWORD *)v16 + 6) == 2)
      {
        if ((*((_WORD *)v16 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v16);
      }
      else
      {
        *((_DWORD *)v16 + 6) -= 2;
      }
    }
  }
  return v10;
}

unsigned int *WebCore::Editor::computeAndSetTypingStyle(uint64_t a1, const WebCore::StyleProperties *a2, char a3)
{
  WebCore::EditingStyle *v6;
  unsigned int *result;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD **v12;
  _DWORD *v13;
  WTF *v14;
  uint64_t v16;

  v6 = (WebCore::EditingStyle *)WTF::fastMalloc((WTF *)0x18);
  WebCore::EditingStyle::EditingStyle(v6, a2);
  result = WebCore::Editor::computeAndSetTypingStyle(*(unsigned int **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v6, a3);
  if (*(_DWORD *)v6 == 1)
  {
    v9 = *((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
      {
        v10 = *(unsigned int *)(v9 + 28);
        if ((_DWORD)v10)
        {
          v11 = 16 * v10;
          v12 = (_DWORD **)(*(_QWORD *)(v9 + 16) + 8);
          do
          {
            v13 = *v12;
            *v12 = 0;
            if (v13)
            {
              if (*v13 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, v8);
              else
                *v13 -= 2;
            }
            v12 += 2;
            v11 -= 16;
          }
          while (v11);
        }
        v14 = *(WTF **)(v9 + 16);
        if ((WTF *)(v9 + 32) != v14 && v14 != 0)
        {
          *(_QWORD *)(v9 + 16) = 0;
          *(_DWORD *)(v9 + 24) = 0;
          WTF::fastFree(v14, v8);
        }
        v16 = *(_QWORD *)(v9 + 8);
        *(_QWORD *)(v9 + 8) = 0;
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        WTF::fastFree((WTF *)v9, v8);
      }
      else
      {
        --*(_DWORD *)v9;
      }
    }
    return (unsigned int *)WTF::fastFree(v6, v8);
  }
  else
  {
    --*(_DWORD *)v6;
  }
  return result;
}

void WebCore::Editor::applyEditingStyleToBodyElement(WebCore::Editor *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::MutableStyleProperties *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::String *v7;
  __n128 v8;
  int *v9;
  WTF::StringImpl *v10;
  WebCore::MutableStyleProperties *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::String *v14;
  __n128 v15;
  int *v16;
  WTF::StringImpl *v17;
  WebCore::MutableStyleProperties *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::String *v21;
  __n128 v22;
  int *v23;
  void *v24;
  int *v25;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 1272);
  if (v2)
  {
    if ((*(_WORD *)(v2 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    {
      v3 = *(_QWORD *)(v2 + 80);
      if (v3)
      {
        while ((*(_WORD *)(v3 + 28) & 0x10) == 0
             || *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
        {
          v3 = *(_QWORD *)(v3 + 56);
          if (!v3)
            return;
        }
        *(_DWORD *)(v3 + 24) += 2;
        v4 = WebCore::StyledElement::ensureMutableInlineStyle((WebCore::StyledElement *)v3, a2);
        WebCore::staticCSSValuePool[5360] += 2;
        v25 = &WebCore::staticCSSValuePool[5360];
        WebCore::MutableStyleProperties::setProperty(v4, 191, &v25, 0);
        v9 = v25;
        v25 = 0;
        if (v9)
        {
          if (*v9 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v5);
          else
            *v9 -= 2;
        }
        WebCore::StyledElement::inlineStyleChanged((WebCore::StyledElement *)v3, (uint64_t)v5, v6, v7, v8);
        v11 = WebCore::StyledElement::ensureMutableInlineStyle((WebCore::StyledElement *)v3, v10);
        WebCore::staticCSSValuePool[5376] += 2;
        v25 = &WebCore::staticCSSValuePool[5376];
        WebCore::MutableStyleProperties::setProperty(v11, 337, &v25, 0);
        v16 = v25;
        v25 = 0;
        if (v16)
        {
          if (*v16 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, v12);
          else
            *v16 -= 2;
        }
        WebCore::StyledElement::inlineStyleChanged((WebCore::StyledElement *)v3, (uint64_t)v12, v13, v14, v15);
        v18 = WebCore::StyledElement::ensureMutableInlineStyle((WebCore::StyledElement *)v3, v17);
        WebCore::staticCSSValuePool[5388] += 2;
        v25 = &WebCore::staticCSSValuePool[5388];
        WebCore::MutableStyleProperties::setProperty(v18, 153, &v25, 0);
        v23 = v25;
        v25 = 0;
        if (v23)
        {
          if (*v23 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v23, v19);
          else
            *v23 -= 2;
        }
        WebCore::StyledElement::inlineStyleChanged((WebCore::StyledElement *)v3, (uint64_t)v19, v20, v21, v22);
        if (*(_DWORD *)(v3 + 24) == 2)
        {
          if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v3, v24);
        }
        else
        {
          *(_DWORD *)(v3 + 24) -= 2;
        }
      }
    }
  }
}

BOOL WebCore::Editor::findString(uint64_t a1, void *a2, unsigned __int16 a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  WebCore::Node *v15;
  WebCore::Node *v16;
  WebCore::Node *v17;
  WebCore::Node *v18;
  void *v19;
  void *v20;
  int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::Node *v27[2];
  WebCore::Node *v28;
  char v29;
  WebCore::Node *v30[2];
  WebCore::Node *v31;
  char v32;
  uint64_t v33;
  int v34;
  char v35;
  uint64_t v36;
  int v37;
  char v38;
  uint64_t v39;
  int v40;
  char v41;
  uint64_t v42;
  int v43;
  char v44;
  uint64_t v45;
  int v46;
  char v47;
  uint64_t v48;
  int v49;
  char v50;
  __int16 v51;
  char v52;
  char v53;
  _QWORD v54[2];
  uint64_t v55;
  unsigned __int8 v56;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  *(_DWORD *)(v6 + 24) += 2;
  LOBYTE(v54[0]) = 0;
  v56 = 0;
  WebCore::Document::updateLayout(v6, 2u, 0);
  WebCore::Style::PostResolutionCallbackDisabler::PostResolutionCallbackDisabler(&v53, v6, 1);
  v7 = *(_QWORD *)(v6 + 3064);
  v8 = *(_QWORD *)(v7 + 56);
  if (v8)
    *(_DWORD *)(v8 + 24) += 2;
  v33 = v8;
  v34 = *(_DWORD *)(v7 + 64);
  v35 = *(_BYTE *)(v7 + 68);
  v9 = *(_QWORD *)(v7 + 72);
  if (v9)
    *(_DWORD *)(v9 + 24) += 2;
  v36 = v9;
  v37 = *(_DWORD *)(v7 + 80);
  v38 = *(_BYTE *)(v7 + 84);
  v10 = *(_QWORD *)(v7 + 88);
  if (v10)
    *(_DWORD *)(v10 + 24) += 2;
  v39 = v10;
  v40 = *(_DWORD *)(v7 + 96);
  v41 = *(_BYTE *)(v7 + 100);
  v11 = *(_QWORD *)(v7 + 104);
  if (v11)
    *(_DWORD *)(v11 + 24) += 2;
  v42 = v11;
  v43 = *(_DWORD *)(v7 + 112);
  v44 = *(_BYTE *)(v7 + 116);
  v12 = *(_QWORD *)(v7 + 120);
  if (v12)
    *(_DWORD *)(v12 + 24) += 2;
  v45 = v12;
  v46 = *(_DWORD *)(v7 + 128);
  v47 = *(_BYTE *)(v7 + 132);
  v13 = *(_QWORD *)(v7 + 136);
  if (v13)
    *(_DWORD *)(v13 + 24) += 2;
  v48 = v13;
  v49 = *(_DWORD *)(v7 + 144);
  v50 = *(_BYTE *)(v7 + 148);
  v51 = *(_WORD *)(v7 + 152);
  v52 = *(_BYTE *)(v7 + 154);
  WebCore::VisibleSelection::firstRange((WebCore::Node *)&v33, v27);
  WebCore::Editor::rangeOfString((unsigned int *)a1, a2, (unsigned __int8 *)v27, a3, (uint64_t)v30);
  std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>((uint64_t)v54, (uint64_t *)v30);
  if (v32)
  {
    v15 = v31;
    v31 = 0;
    if (v15)
    {
      if (*((_DWORD *)v15 + 6) == 2)
      {
        if ((*((_WORD *)v15 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v15, v14);
      }
      else
      {
        *((_DWORD *)v15 + 6) -= 2;
      }
    }
    v16 = v30[0];
    v30[0] = 0;
    if (v16)
    {
      if (*((_DWORD *)v16 + 6) == 2)
      {
        if ((*((_WORD *)v16 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v16, v14);
      }
      else
      {
        *((_DWORD *)v16 + 6) -= 2;
      }
    }
  }
  if (v29)
  {
    v17 = v28;
    v28 = 0;
    if (v17)
    {
      if (*((_DWORD *)v17 + 6) == 2)
      {
        if ((*((_WORD *)v17 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v17, v14);
      }
      else
      {
        *((_DWORD *)v17 + 6) -= 2;
      }
    }
    v18 = v27[0];
    v27[0] = 0;
    if (v18)
    {
      if (*((_DWORD *)v18 + 6) == 2)
      {
        if ((*((_WORD *)v18 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v18, v14);
      }
      else
      {
        *((_DWORD *)v18 + 6) -= 2;
      }
    }
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v33);
  WebCore::Style::PostResolutionCallbackDisabler::~PostResolutionCallbackDisabler((WebCore::Style::PostResolutionCallbackDisabler *)&v53, v19);
  v21 = v56;
  if (v56)
  {
    v22 = a3;
    if ((a3 & 0x200) == 0)
    {
      v23 = *(_QWORD *)(v6 + 3064);
      WebCore::VisibleSelection::VisibleSelection((uint64_t)&v33, (uint64_t)v54, 1, 0);
      WebCore::FrameSelection::setSelection(v23, (uint64_t)&v33, 6u, 0, 0, 0, 0);
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v33);
    }
    if ((v22 & 0x40) == 0)
      WebCore::FrameSelection::revealSelection(*(_QWORD *)(v6 + 3064), 0, (uint64_t)&WebCore::ScrollAlignment::alignCenterIfNeeded, (BOOL *)1, 1);
    if (v56)
    {
      v24 = v55;
      v55 = 0;
      if (v24)
      {
        if (*(_DWORD *)(v24 + 24) == 2)
        {
          if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v24, v20);
        }
        else
        {
          *(_DWORD *)(v24 + 24) -= 2;
        }
      }
      v25 = v54[0];
      v54[0] = 0;
      if (v25)
      {
        if (*(_DWORD *)(v25 + 24) == 2)
        {
          if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v25, v20);
        }
        else
        {
          *(_DWORD *)(v25 + 24) -= 2;
        }
      }
    }
  }
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v20);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  return v21 != 0;
}

unsigned int *WebCore::Editor::rangeOfString@<X0>(unsigned int *result@<X0>, void *a2@<X1>, unsigned __int8 *a3@<X2>, unsigned __int16 a4@<W3>, uint64_t a5@<X8>)
{
  unsigned __int8 *v7;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  int v26;
  unsigned int **v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  BOOL v31;
  __int16 v32;
  WebCore::Node *v33;
  void *v34;
  WebCore::Node *v35;
  WebCore::Node *v36;
  WebCore::Node *v37;
  WebCore::Node *v38;
  WebCore::Node *v39;
  WebCore::Node *v40;
  int v41;
  int v42;
  void *v43;
  _BOOL4 v44;
  WebCore::Node *v46;
  WebCore::Node *v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned __int8 *v56;
  uint64_t v57;
  unsigned int *v58;
  uint64_t v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  int v63;
  unsigned int **v64;
  uint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  WebCore::Node *v68;
  WebCore::Node *v69;
  WebCore::Node *v70;
  WebCore::Node *v71;
  WebCore::Node *v72;
  WebCore::Node *v73;
  WebCore::Node *v74;
  int v75;
  int v76;
  WebCore::Node *v77;
  WebCore::Node *v78;
  WebCore::Node *v79;
  WebCore::Node *v80;
  WebCore::Node *v81;
  WebCore::Node *v82;
  int v83;
  int v84;
  __int16 v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int *v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  uint64_t v92;
  unsigned int **v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int *v96;
  uint64_t v97;
  WebCore::Node *v98;
  WebCore::Node *v99;
  WebCore::Node *v100;
  WebCore::Node *v101;
  WebCore::Node *v102;
  WebCore::Node *v103;
  WebCore::Node *v104;
  int v105;
  int v106;
  WebCore::Node *v107;
  WebCore::Node *v108;
  WebCore::Node *v109;
  WebCore::Node *v110;
  __int16 v111;
  uint64_t v112;
  uint64_t v113;
  WebCore::Node *v114;
  WebCore::Node *v115;
  WebCore::Node *v116;
  WebCore::Node *v117;
  WebCore::Node *v118;
  WebCore::Node *v119;
  WebCore::Node *v120;
  int v121;
  int v122;
  WebCore::Node *v123;
  WebCore::Node *v124;
  WebCore::Node *v125;
  WebCore::Node *v126;
  WebCore::Node *v127;
  WebCore::Node *v128;
  int v129;
  uint64_t v130;
  char v131;
  WebCore::Node *v132;
  int v133;
  WebCore::Node *v134;
  int v135;
  WebCore::Node *v136;
  uint64_t v137;
  WebCore::Node *v138;
  int v139;
  char v140;
  WebCore::Node *v141;
  int v142;
  WebCore::Node *v143;
  int v144;
  unsigned int *v145;
  int v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  BOOL v151;

  if (!*(_QWORD *)a2 || !*(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 32) = 0;
    return result;
  }
  v7 = a3;
  v9 = a3[32];
  if (a3[32])
  {
    v10 = (a4 >> 5) & 1;
    if ((*(_WORD *)(**(_QWORD **)(*(_QWORD *)a3 + 40) + 28) & 0x80) != 0)
      v11 = **(_QWORD **)(*(_QWORD *)a3 + 40);
    else
      v11 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v12 = *(_QWORD *)(*((_QWORD *)result + 2) + 8);
  *(_DWORD *)(v12 + 24) += 6;
  v13 = *(_WORD *)(v12 + 28);
  v131 = a4;
  if ((v13 & 1) != 0)
  {
    v15 = *(_QWORD *)(v12 + 80);
    if (v15)
      LODWORD(v15) = *(_DWORD *)(v15 + 4);
  }
  else if ((v13 & 4) != 0 && (v14 = *(_QWORD *)(v12 + 80)) != 0)
  {
    LODWORD(v15) = 0;
    do
    {
      LODWORD(v15) = v15 + 1;
      v14 = *(_QWORD *)(v14 + 56);
    }
    while (v14);
  }
  else
  {
    LODWORD(v15) = 0;
  }
  v145 = (unsigned int *)v12;
  v146 = 0;
  v147 = v12;
  v148 = v15;
  if (v9)
  {
    v16 = a3 + 16;
    v17 = 16 * ((a4 & 8) == 0);
    if ((a4 & 8) != 0)
      v18 = a3;
    else
      v18 = a3 + 16;
    v19 = (2 * (_BYTE)a4) & 0x10;
    if ((a4 & 8) == 0)
      v16 = a3;
    if (v10)
    {
      v17 = (2 * (_BYTE)a4) & 0x10;
      v20 = v16;
    }
    else
    {
      v20 = v18;
    }
    v21 = *(unsigned int **)&a3[v17];
    v21[6] += 2;
    v22 = *(uint64_t *)((char *)&v145 + v19);
    *(unsigned int **)((char *)&v145 + v19) = v21;
    if (v22)
    {
      if (*(_DWORD *)(v22 + 24) == 2)
      {
        if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v22, a2);
      }
      else
      {
        *(_DWORD *)(v22 + 24) -= 2;
      }
    }
    v23 = 3;
    if ((a4 & 8) == 0)
      v23 = 1;
    LODWORD((&v145)[v23]) = *((_DWORD *)v20 + 2);
  }
  if (v11)
  {
    *(_DWORD *)(v11 + 24) += 2;
    if ((a4 & 8) != 0)
    {
      v26 = 0;
      v27 = &v145;
LABEL_47:
      v29 = *v27;
      *v27 = (unsigned int *)v11;
      if (v29)
      {
        if (v29[6] == 2)
        {
          if ((*((_WORD *)v29 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v29, a2);
        }
        else
        {
          v29[6] -= 2;
        }
      }
      v30 = 1;
      if ((a4 & 8) == 0)
        v30 = 3;
      LODWORD((&v145)[v30]) = v26;
      goto LABEL_53;
    }
    v24 = *(_WORD *)(v11 + 28);
    if ((v24 & 1) != 0)
    {
      v28 = *(_QWORD *)(v11 + 80);
      if (v28)
      {
        v26 = *(_DWORD *)(v28 + 4);
        goto LABEL_46;
      }
    }
    else if ((v24 & 4) != 0)
    {
      v25 = *(_QWORD *)(v11 + 80);
      if (v25)
      {
        v26 = 0;
        do
        {
          ++v26;
          v25 = *(_QWORD *)(v25 + 56);
        }
        while (v25);
        goto LABEL_46;
      }
    }
    v26 = 0;
LABEL_46:
    v27 = (unsigned int **)&v147;
    goto LABEL_47;
  }
LABEL_53:
  v31 = (a4 & 8) == 0;
  LOBYTE(v141) = v31;
  v32 = a4;
  v136 = 0;
  v137 = 0;
  v33 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v33 = off_1E33ADFB8;
  *((_QWORD *)v33 + 1) = &v136;
  *((_QWORD *)v33 + 2) = &v141;
  v132 = v33;
  WebCore::forEachMatch(&v145, (WebCore *)a2, a4, &v132);
  (*(void (**)(WebCore::Node *))(*(_QWORD *)v33 + 8))(v33);
  WebCore::rangeForMatch((uint64_t)&v132, &v145, a4, (int)v136, v137);
  v35 = v132;
  if ((*((_BYTE *)v132 + 22) & 0x18) != 0)
  {
    v37 = (WebCore::Node *)**((_QWORD **)v132 + 5);
  }
  else
  {
    v36 = v132;
    do
    {
      v37 = v36;
      v36 = (WebCore::Node *)*((_QWORD *)v36 + 4);
    }
    while (v36);
  }
  v38 = v134;
  if ((*((_BYTE *)v134 + 22) & 0x18) != 0)
  {
    v40 = (WebCore::Node *)**((_QWORD **)v134 + 5);
  }
  else
  {
    v39 = v134;
    do
    {
      v40 = v39;
      v39 = (WebCore::Node *)*((_QWORD *)v39 + 4);
    }
    while (v39);
  }
  if (v37 == v40)
  {
    v132 = 0;
    v141 = v35;
    v142 = v133;
    v143 = v134;
    v144 = v135;
    goto LABEL_71;
  }
  v41 = *((_DWORD *)v132 + 6);
  v141 = v132;
  v42 = v133;
  v142 = v133;
  *((_DWORD *)v132 + 6) = v41 + 4;
  v143 = v35;
  v144 = v42;
  v134 = 0;
  if (v38)
  {
    if (*((_DWORD *)v38 + 6) == 2)
    {
      if ((*((_WORD *)v38 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v38, v34);
        v35 = v132;
        v132 = 0;
        if (!v35)
          goto LABEL_71;
        goto LABEL_68;
      }
    }
    else
    {
      *((_DWORD *)v38 + 6) -= 2;
    }
  }
  v132 = 0;
LABEL_68:
  if (*((_DWORD *)v35 + 6) == 2)
  {
    if ((*((_WORD *)v35 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v35, v34);
  }
  else
  {
    *((_DWORD *)v35 + 6) -= 2;
  }
LABEL_71:
  if (!v10)
    goto LABEL_173;
  WebCore::VisibleSelection::VisibleSelection((uint64_t)&v132, (uint64_t)&v141, 1, 0);
  WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)&v132, &v136);
  if (v140 && v7[32])
  {
    v44 = 0;
    if (v136 == *(WebCore::Node **)v7 && (_DWORD)v137 == *((_DWORD *)v7 + 2))
      v44 = v138 == *((WebCore::Node **)v7 + 2) && v139 == *((_DWORD *)v7 + 6);
  }
  else
  {
    v44 = (v140 != 0) == (v7[32] != 0);
    if (!v140)
      goto LABEL_104;
  }
  v46 = v138;
  v138 = 0;
  if (v46)
  {
    if (*((_DWORD *)v46 + 6) == 2)
    {
      if ((*((_WORD *)v46 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v46, v43);
    }
    else
    {
      *((_DWORD *)v46 + 6) -= 2;
    }
  }
  v47 = v136;
  v136 = 0;
  if (v47)
  {
    if (*((_DWORD *)v47 + 6) != 2)
    {
      *((_DWORD *)v47 + 6) -= 2;
      goto LABEL_89;
    }
    if ((*((_WORD *)v47 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v47, v43);
LABEL_89:
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v132);
      if (!v44)
        goto LABEL_173;
      goto LABEL_105;
    }
  }
LABEL_104:
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v132);
  if (!v44)
    goto LABEL_173;
LABEL_105:
  *(_DWORD *)(v12 + 24) += 4;
  v49 = *(_WORD *)(v12 + 28);
  if ((v49 & 1) != 0)
  {
    v52 = *(_QWORD *)(v12 + 80);
    if (!v52)
    {
LABEL_108:
      v51 = 0;
      goto LABEL_114;
    }
    v51 = *(_DWORD *)(v52 + 4);
  }
  else
  {
    if ((v49 & 4) == 0)
      goto LABEL_108;
    v50 = *(_QWORD *)(v12 + 80);
    if (!v50)
      goto LABEL_108;
    v51 = 0;
    do
    {
      ++v51;
      v50 = *(_QWORD *)(v50 + 56);
    }
    while (v50);
  }
LABEL_114:
  v53 = v145;
  v145 = (unsigned int *)v12;
  if (v53)
  {
    if (v53[6] == 2)
    {
      if ((*((_WORD *)v53 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v53, v34);
    }
    else
    {
      v53[6] -= 2;
    }
  }
  v146 = 0;
  v54 = v147;
  v147 = v12;
  if (v54)
  {
    if (*(_DWORD *)(v54 + 24) == 2)
    {
      if ((*(_WORD *)(v54 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v54, v34);
    }
    else
    {
      *(_DWORD *)(v54 + 24) -= 2;
    }
  }
  v148 = v51;
  v55 = (unsigned int *)v7[32];
  if (!v7[32])
    goto LABEL_352;
  if ((a4 & 8) != 0)
    v56 = v7;
  else
    v56 = v7 + 16;
  v57 = (2 * (_BYTE)a4) & 0x10;
  v58 = *(unsigned int **)&v7[16 * ((a4 & 8) == 0)];
  v58[6] += 2;
  v59 = *(uint64_t *)((char *)&v145 + v57);
  *(unsigned int **)((char *)&v145 + v57) = v58;
  if (v59)
  {
    if (*(_DWORD *)(v59 + 24) == 2)
    {
      if ((*(_WORD *)(v59 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v59, v34);
    }
    else
    {
      *(_DWORD *)(v59 + 24) -= 2;
    }
  }
  v60 = 3;
  if ((a4 & 8) == 0)
    v60 = 1;
  LODWORD((&v145)[v60]) = *((_DWORD *)v56 + 2);
  if (!v11)
    goto LABEL_148;
  *(_DWORD *)(v11 + 24) += 2;
  if ((a4 & 8) == 0)
  {
    v61 = *(_WORD *)(v11 + 28);
    if ((v61 & 1) != 0)
    {
      v65 = *(_QWORD *)(v11 + 80);
      if (v65)
      {
        v63 = *(_DWORD *)(v65 + 4);
        goto LABEL_141;
      }
    }
    else if ((v61 & 4) != 0)
    {
      v62 = *(_QWORD *)(v11 + 80);
      if (v62)
      {
        v63 = 0;
        do
        {
          ++v63;
          v62 = *(_QWORD *)(v62 + 56);
        }
        while (v62);
        goto LABEL_141;
      }
    }
    v63 = 0;
LABEL_141:
    v64 = (unsigned int **)&v147;
    goto LABEL_142;
  }
  v63 = 0;
  v64 = &v145;
LABEL_142:
  v66 = *v64;
  *v64 = (unsigned int *)v11;
  if (v66)
  {
    if (v66[6] == 2)
    {
      if ((*((_WORD *)v66 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v66, v34);
    }
    else
    {
      v66[6] -= 2;
    }
  }
  v67 = 1;
  if ((a4 & 8) == 0)
    v67 = 3;
  LODWORD((&v145)[v67]) = v63;
LABEL_148:
  LOBYTE(v149) = (a4 & 8) == 0;
  v136 = 0;
  v137 = 0;
  v68 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v68 = off_1E33ADFB8;
  *((_QWORD *)v68 + 1) = &v136;
  *((_QWORD *)v68 + 2) = &v149;
  v132 = v68;
  WebCore::forEachMatch(&v145, (WebCore *)a2, a4, &v132);
  (*(void (**)(WebCore::Node *))(*(_QWORD *)v68 + 8))(v68);
  WebCore::rangeForMatch((uint64_t)&v132, &v145, a4, (int)v136, v137);
  v69 = v132;
  if ((*((_BYTE *)v132 + 22) & 0x18) != 0)
  {
    v71 = (WebCore::Node *)**((_QWORD **)v132 + 5);
  }
  else
  {
    v70 = v132;
    do
    {
      v71 = v70;
      v70 = (WebCore::Node *)*((_QWORD *)v70 + 4);
    }
    while (v70);
  }
  v72 = v134;
  if ((*((_BYTE *)v134 + 22) & 0x18) != 0)
  {
    v74 = (WebCore::Node *)**((_QWORD **)v134 + 5);
  }
  else
  {
    v73 = v134;
    do
    {
      v74 = v73;
      v73 = (WebCore::Node *)*((_QWORD *)v73 + 4);
    }
    while (v73);
  }
  if (v71 == v74)
  {
    v132 = 0;
    v134 = 0;
    v75 = v133;
    v76 = v135;
  }
  else
  {
    v75 = v133;
    *((_DWORD *)v132 + 6) += 4;
    v72 = v69;
    v76 = v75;
  }
  v77 = v141;
  v141 = v69;
  if (v77)
  {
    if (*((_DWORD *)v77 + 6) == 2)
    {
      if ((*((_WORD *)v77 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v77, v34);
    }
    else
    {
      *((_DWORD *)v77 + 6) -= 2;
    }
  }
  v142 = v75;
  v78 = v143;
  v143 = v72;
  if (v78)
  {
    if (*((_DWORD *)v78 + 6) == 2)
    {
      if ((*((_WORD *)v78 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v78, v34);
    }
    else
    {
      *((_DWORD *)v78 + 6) -= 2;
    }
  }
  v144 = v76;
  v79 = v134;
  v134 = 0;
  if (v79)
  {
    if (*((_DWORD *)v79 + 6) == 2)
    {
      if ((*((_WORD *)v79 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v79, v34);
    }
    else
    {
      *((_DWORD *)v79 + 6) -= 2;
    }
  }
  v80 = v132;
  v132 = 0;
  if (v80)
  {
    if (*((_DWORD *)v80 + 6) == 2)
    {
      if ((*((_WORD *)v80 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v80, v34);
    }
    else
    {
      *((_DWORD *)v80 + 6) -= 2;
    }
  }
LABEL_173:
  v81 = v141;
  v82 = v143;
  v83 = v142;
  v84 = v144;
  if (!v11 || v141 != v143 || v142 != v144)
    goto LABEL_238;
  *(_DWORD *)(v12 + 24) += 4;
  v85 = *(_WORD *)(v12 + 28);
  if ((v85 & 1) != 0)
  {
    v87 = *(_QWORD *)(v12 + 80);
    if (!v87)
    {
LABEL_179:
      LODWORD(v7) = 0;
      goto LABEL_185;
    }
    LODWORD(v7) = *(_DWORD *)(v87 + 4);
  }
  else
  {
    if ((v85 & 4) == 0)
      goto LABEL_179;
    v86 = *(_QWORD *)(v12 + 80);
    if (!v86)
      goto LABEL_179;
    LODWORD(v7) = 0;
    do
    {
      LODWORD(v7) = (_DWORD)v7 + 1;
      v86 = *(_QWORD *)(v86 + 56);
    }
    while (v86);
  }
LABEL_185:
  v88 = v145;
  v145 = (unsigned int *)v12;
  if (v88)
  {
    if (v88[6] == 2)
    {
      if ((*((_WORD *)v88 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v88, v34);
    }
    else
    {
      v88[6] -= 2;
    }
  }
  v146 = 0;
  v89 = v147;
  v147 = v12;
  if (v89)
  {
    if (*(_DWORD *)(v89 + 24) == 2)
    {
      if ((*(_WORD *)(v89 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v89, v34);
    }
    else
    {
      *(_DWORD *)(v89 + 24) -= 2;
    }
  }
  v148 = (int)v7;
  v90 = **(_QWORD **)(v11 + 40);
  if (v90)
    v91 = (*(_WORD *)(v90 + 28) & 0x80) == 0;
  else
    v91 = 1;
  if (v91)
    goto LABEL_212;
  v92 = *(_QWORD *)(v90 + 200);
  if (!v92)
    goto LABEL_212;
  v48 = *(_QWORD *)(v92 + 8);
  if (!v48)
    goto LABEL_212;
  v55 = *(unsigned int **)(v48 + 32);
  if ((a4 & 8) != 0)
  {
    if (v55)
    {
      v55[6] += 2;
      v94 = *(_QWORD *)(v48 + 48);
      LODWORD(v7) = 0;
      while (1)
      {
        v95 = v94 & 0xFFFFFFFFFFFFLL;
        if (!v95)
          break;
        LODWORD(v7) = (_DWORD)v7 + 1;
        v94 = *(_QWORD *)(v95 + 48);
      }
      v93 = (unsigned int **)&v147;
      goto LABEL_206;
    }
    goto LABEL_352;
  }
  if (!v55)
  {
LABEL_352:
    __break(1u);
    do
    {
LABEL_353:
      LODWORD(v7) = (_DWORD)v7 + 1;
      v93 = &v145;
      v48 = *(_QWORD *)(v48 + 48) & 0xFFFFFFFFFFFFLL;
    }
    while (v48);
    goto LABEL_206;
  }
  v55[6] += 2;
  LODWORD(v7) = 1;
  v48 = *(_QWORD *)(v48 + 48) & 0xFFFFFFFFFFFFLL;
  if (v48)
    goto LABEL_353;
  v93 = &v145;
LABEL_206:
  v96 = *v93;
  *v93 = v55;
  if (v96)
  {
    if (v96[6] == 2)
    {
      if ((*((_WORD *)v96 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v96, v34);
    }
    else
    {
      v96[6] -= 2;
    }
  }
  v97 = 3;
  if ((a4 & 8) == 0)
    v97 = 1;
  LODWORD((&v145)[v97]) = (_DWORD)v7;
LABEL_212:
  LOBYTE(v149) = (a4 & 8) == 0;
  v136 = 0;
  v137 = 0;
  v98 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v98 = off_1E33ADFB8;
  *((_QWORD *)v98 + 1) = &v136;
  *((_QWORD *)v98 + 2) = &v149;
  v132 = v98;
  WebCore::forEachMatch(&v145, (WebCore *)a2, v32, &v132);
  (*(void (**)(WebCore::Node *))(*(_QWORD *)v98 + 8))(v98);
  WebCore::rangeForMatch((uint64_t)&v132, &v145, v32, (int)v136, v137);
  v99 = v132;
  if ((*((_BYTE *)v132 + 22) & 0x18) != 0)
  {
    v101 = (WebCore::Node *)**((_QWORD **)v132 + 5);
  }
  else
  {
    v100 = v132;
    do
    {
      v101 = v100;
      v100 = (WebCore::Node *)*((_QWORD *)v100 + 4);
    }
    while (v100);
  }
  v102 = v134;
  if ((*((_BYTE *)v134 + 22) & 0x18) != 0)
  {
    v104 = (WebCore::Node *)**((_QWORD **)v134 + 5);
  }
  else
  {
    v103 = v134;
    do
    {
      v104 = v103;
      v103 = (WebCore::Node *)*((_QWORD *)v103 + 4);
    }
    while (v103);
  }
  if (v101 == v104)
  {
    v132 = 0;
    v134 = 0;
    v106 = v133;
    v105 = v135;
  }
  else
  {
    v105 = v133;
    *((_DWORD *)v132 + 6) += 4;
    v102 = v99;
    v106 = v105;
  }
  v107 = v141;
  v141 = v99;
  if (v107)
  {
    if (*((_DWORD *)v107 + 6) == 2)
    {
      if ((*((_WORD *)v107 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v107, v34);
    }
    else
    {
      *((_DWORD *)v107 + 6) -= 2;
    }
  }
  v142 = v106;
  v108 = v143;
  v143 = v102;
  if (v108)
  {
    if (*((_DWORD *)v108 + 6) == 2)
    {
      if ((*((_WORD *)v108 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v108, v34);
    }
    else
    {
      *((_DWORD *)v108 + 6) -= 2;
    }
  }
  v144 = v105;
  v109 = v134;
  v134 = 0;
  if (v109)
  {
    if (*((_DWORD *)v109 + 6) == 2)
    {
      if ((*((_WORD *)v109 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v109, v34);
    }
    else
    {
      *((_DWORD *)v109 + 6) -= 2;
    }
  }
  v110 = v132;
  v132 = 0;
  if (v110)
  {
    if (*((_DWORD *)v110 + 6) == 2)
    {
      if ((*((_WORD *)v110 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v110, v34);
    }
    else
    {
      *((_DWORD *)v110 + 6) -= 2;
    }
  }
  v81 = v141;
  v82 = v143;
  v83 = v142;
  v84 = v144;
LABEL_238:
  if (v81 == v82 && v83 == v84 && (v131 & 0x10) != 0)
  {
    *(_DWORD *)(v12 + 24) += 4;
    v111 = *(_WORD *)(v12 + 28);
    if ((v111 & 1) != 0)
    {
      v113 = *(_QWORD *)(v12 + 80);
      if (v113)
        LODWORD(v113) = *(_DWORD *)(v113 + 4);
    }
    else if ((v111 & 4) != 0 && (v112 = *(_QWORD *)(v12 + 80)) != 0)
    {
      LODWORD(v113) = 0;
      do
      {
        LODWORD(v113) = v113 + 1;
        v112 = *(_QWORD *)(v112 + 56);
      }
      while (v112);
    }
    else
    {
      LODWORD(v113) = 0;
    }
    v136 = (WebCore::Node *)v12;
    LODWORD(v137) = 0;
    v138 = (WebCore::Node *)v12;
    v139 = v113;
    v151 = v31;
    v149 = 0;
    v150 = 0;
    v114 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v114 = off_1E33ADFB8;
    *((_QWORD *)v114 + 1) = &v149;
    *((_QWORD *)v114 + 2) = &v151;
    v132 = v114;
    WebCore::forEachMatch(&v136, (WebCore *)a2, v32, &v132);
    (*(void (**)(WebCore::Node *))(*(_QWORD *)v114 + 8))(v114);
    WebCore::rangeForMatch((uint64_t)&v132, &v136, v32, v149, v150);
    v115 = v132;
    if ((*((_BYTE *)v132 + 22) & 0x18) != 0)
    {
      v117 = (WebCore::Node *)**((_QWORD **)v132 + 5);
    }
    else
    {
      v116 = v132;
      do
      {
        v117 = v116;
        v116 = (WebCore::Node *)*((_QWORD *)v116 + 4);
      }
      while (v116);
    }
    v118 = v134;
    if ((*((_BYTE *)v134 + 22) & 0x18) != 0)
    {
      v120 = (WebCore::Node *)**((_QWORD **)v134 + 5);
    }
    else
    {
      v119 = v134;
      do
      {
        v120 = v119;
        v119 = (WebCore::Node *)*((_QWORD *)v119 + 4);
      }
      while (v119);
    }
    if (v117 == v120)
    {
      v132 = 0;
      v134 = 0;
      v122 = v133;
      v121 = v135;
    }
    else
    {
      v121 = v133;
      *((_DWORD *)v132 + 6) += 4;
      v118 = v115;
      v122 = v121;
    }
    v123 = v141;
    v141 = v115;
    if (v123)
    {
      if (*((_DWORD *)v123 + 6) == 2)
      {
        if ((*((_WORD *)v123 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v123, v34);
      }
      else
      {
        *((_DWORD *)v123 + 6) -= 2;
      }
    }
    v142 = v122;
    v124 = v143;
    v143 = v118;
    if (v124)
    {
      if (*((_DWORD *)v124 + 6) == 2)
      {
        if ((*((_WORD *)v124 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v124, v34);
      }
      else
      {
        *((_DWORD *)v124 + 6) -= 2;
      }
    }
    v144 = v121;
    v125 = v134;
    v134 = 0;
    if (v125)
    {
      if (*((_DWORD *)v125 + 6) == 2)
      {
        if ((*((_WORD *)v125 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v125, v34);
      }
      else
      {
        *((_DWORD *)v125 + 6) -= 2;
      }
    }
    v126 = v132;
    v132 = 0;
    if (v126)
    {
      if (*((_DWORD *)v126 + 6) == 2)
      {
        if ((*((_WORD *)v126 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v126, v34);
      }
      else
      {
        *((_DWORD *)v126 + 6) -= 2;
      }
    }
    v127 = v138;
    v138 = 0;
    if (v127)
    {
      if (*((_DWORD *)v127 + 6) == 2)
      {
        if ((*((_WORD *)v127 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v127, v34);
      }
      else
      {
        *((_DWORD *)v127 + 6) -= 2;
      }
    }
    v128 = v136;
    v136 = 0;
    if (v128)
    {
      if (*((_DWORD *)v128 + 6) == 2)
      {
        if ((*((_WORD *)v128 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v128, v34);
      }
      else
      {
        *((_DWORD *)v128 + 6) -= 2;
      }
    }
    v81 = v141;
    v82 = v143;
    v83 = v142;
    v84 = v144;
  }
  if (v81 != v82 || v83 != v84)
  {
    *((_DWORD *)v81 + 6) += 2;
    *(_QWORD *)a5 = v81;
    *(_DWORD *)(a5 + 8) = v83;
    v129 = *((_DWORD *)v82 + 6);
    *((_DWORD *)v82 + 6) = v129 + 2;
    *(_QWORD *)(a5 + 16) = v82;
    *(_DWORD *)(a5 + 24) = v84;
    *(_BYTE *)(a5 + 32) = 1;
    v143 = 0;
    goto LABEL_287;
  }
  *(_BYTE *)a5 = 0;
  *(_BYTE *)(a5 + 32) = 0;
  v143 = 0;
  if (v82)
  {
    v129 = *((_DWORD *)v82 + 6) - 2;
LABEL_287:
    if (v129)
    {
      *((_DWORD *)v82 + 6) = v129;
    }
    else if ((*((_WORD *)v82 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v82, v34);
      v81 = v141;
    }
    v141 = 0;
    if (v81)
    {
      if (*((_DWORD *)v81 + 6) == 2)
      {
        if ((*((_WORD *)v81 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v81, v34);
      }
      else
      {
        *((_DWORD *)v81 + 6) -= 2;
      }
    }
  }
  v130 = v147;
  v147 = 0;
  if (v130)
  {
    if (*(_DWORD *)(v130 + 24) == 2)
    {
      if ((*(_WORD *)(v130 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v130, v34);
    }
    else
    {
      *(_DWORD *)(v130 + 24) -= 2;
    }
  }
  result = v145;
  v145 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result, v34);
    }
    else
    {
      result[6] -= 2;
    }
  }
  if (*(_DWORD *)(v12 + 24) == 2)
  {
    if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v12, v34);
  }
  else
  {
    *(_DWORD *)(v12 + 24) -= 2;
  }
  return result;
}

uint64_t *WebCore::BoundaryPoint::operator=(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)a2;
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(*(_QWORD *)a2 + 24) + 2;
  v5 = *a1;
  *a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  *((_DWORD *)a1 + 2) = a2[2];
  return a1;
}

uint64_t *std::optional<WebCore::BoundaryPoint>::~optional(uint64_t *a1, void *a2)
{
  uint64_t v3;

  if (*((_BYTE *)a1 + 16))
  {
    v3 = *a1;
    *a1 = 0;
    if (v3)
    {
      if (*(_DWORD *)(v3 + 24) == 2)
      {
        if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
      }
      else
      {
        *(_DWORD *)(v3 + 24) -= 2;
      }
    }
  }
  return a1;
}

uint64_t WebCore::Editor::countMatchesForText(uint64_t a1, void *a2, int *a3, __int16 a4, int a5, int a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v15;
  int v16;
  WebCore::Node *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  int v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  WebCore::Node *v32;
  int v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  int *v43;
  uint64_t v44;
  WebCore::Node *v45;
  uint64_t *v46;
  WebCore::Node *v47;
  WebCore::Node *v48;
  int v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  int v53;
  __int16 v54;
  uint64_t v55;
  uint64_t v56;
  WebCore::Node *v57;
  WebCore::Node *v58;
  WebCore::Node *v59;
  WebCore::Node *v60;
  uint64_t v61;
  WebCore::Node *v62;
  WebCore::Node *v63;
  uint64_t v64;
  int v65;
  WebCore::Node *v66;
  int v67;
  WebCore::Node *v68;
  int v69;
  WebCore::Node *v70;
  int v71;
  WebCore::Node *v72;
  int v73;
  char v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)a2 || !*(_DWORD *)(*(_QWORD *)a2 + 4))
    return 0;
  LODWORD(v11) = a5;
  LOBYTE(v70) = 0;
  v74 = 0;
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v16 = *(_DWORD *)(v15 + 24);
  *(_DWORD *)(v15 + 24) = v16 + 2;
  if (!*((_BYTE *)a3 + 32))
    goto LABEL_27;
  v17 = *(WebCore::Node **)a3;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 40) + 8) == v15)
  {
    v64 = v15;
    *((_DWORD *)v17 + 6) += 2;
    v70 = v17;
    v71 = a3[2];
    v20 = *((_QWORD *)a3 + 2);
    v26 = *(_DWORD *)(v20 + 24) + 2;
    *(_DWORD *)(v20 + 24) = v26;
    v72 = (WebCore::Node *)v20;
    v65 = a3[6];
    v73 = v65;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 528) + 8) + 120);
  if (v18)
  {
    v19 = *(_QWORD *)(v18 + 8);
    if (v19)
    {
      *(_DWORD *)(v19 + 24) += 2;
      while (1)
      {
        v20 = v19;
        v21 = *(_QWORD *)(*(_QWORD *)(v19 + 40) + 8);
        if (v21 == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 40) + 8))
        {
          v27 = WebCore::intersects<(WebCore::TreeType)2>(a3, v19);
          v7 = v27;
          if (*(_DWORD *)(v19 + 24) != 2)
          {
            *(_DWORD *)(v19 + 24) -= 2;
            if ((v27 & 1) != 0)
              goto LABEL_27;
LABEL_139:
            v7 = 0;
            goto LABEL_140;
          }
          while (2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) != 0)
            {
              if (!(_DWORD)v7)
                goto LABEL_140;
            }
            else
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v20, a2);
              if ((v7 & 1) == 0)
                goto LABEL_139;
            }
LABEL_27:
            v26 = *(_DWORD *)(v15 + 24) + 4;
            *(_DWORD *)(v15 + 24) = v26;
            v28 = *(_WORD *)(v15 + 28);
            if ((v28 & 1) != 0)
            {
              v31 = *(_QWORD *)(v15 + 80);
              if (!v31)
                goto LABEL_30;
              v30 = *(_DWORD *)(v31 + 4);
            }
            else if ((v28 & 4) != 0 && (v29 = *(_QWORD *)(v15 + 80)) != 0)
            {
              v30 = 0;
              do
              {
                ++v30;
                v29 = *(_QWORD *)(v29 + 56);
              }
              while (v29);
            }
            else
            {
LABEL_30:
              v30 = 0;
            }
            v70 = (WebCore::Node *)v15;
            v71 = 0;
            v72 = (WebCore::Node *)v15;
            v64 = v15;
            v20 = v15;
            v65 = v30;
            v73 = v30;
LABEL_37:
            v7 = 0;
            v74 = 1;
            *(_DWORD *)(v20 + 24) = v26 + 2;
            a4 &= ~8u;
            v15 = (v11 - 1);
LABEL_38:
            if (!v74)
            {
LABEL_136:
              __break(1u);
              continue;
            }
            break;
          }
          v76 = 1;
          v77 = 0;
          v78 = 0;
          v11 = WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v11 = off_1E33ADFB8;
          *(_QWORD *)(v11 + 8) = &v77;
          *(_QWORD *)(v11 + 16) = &v76;
          v75 = v11;
          WebCore::forEachMatch(&v70, (WebCore *)a2, a4, &v75);
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
          WebCore::rangeForMatch((uint64_t)&v66, &v70, a4, v77, v78);
          v32 = v66;
          v33 = v67;
          if (v66 == v68 && v67 == v69)
          {
            if ((*((_BYTE *)v66 + 22) & 0x10) != 0)
            {
              v34 = **((_QWORD **)v66 + 5);
              if (v34)
                v35 = (*(_WORD *)(v34 + 28) & 0x80) == 0;
              else
                v35 = 1;
              if (v35)
              {
                v36 = 0;
              }
              else
              {
                v36 = *(_QWORD *)(v34 + 200);
                if (v36)
                  v36 = *(_QWORD *)(v36 + 8);
              }
              *(_DWORD *)(v36 + 24) += 2;
              v54 = *(_WORD *)(v36 + 28);
              if ((v54 & 1) != 0)
              {
                v56 = *(_QWORD *)(v36 + 80);
                if (!v56)
                  goto LABEL_80;
                LODWORD(v11) = *(_DWORD *)(v56 + 4);
              }
              else if ((v54 & 4) != 0 && (v55 = *(_QWORD *)(v36 + 80)) != 0)
              {
                LODWORD(v11) = 0;
                do
                {
                  LODWORD(v11) = v11 + 1;
                  v55 = *(_QWORD *)(v55 + 56);
                }
                while (v55);
              }
              else
              {
LABEL_80:
                LODWORD(v11) = 0;
              }
              if (!v74)
                goto LABEL_136;
              v57 = v70;
              v70 = (WebCore::Node *)v36;
              if (!v57)
                goto LABEL_90;
              if (*((_DWORD *)v57 + 6) != 2)
              {
                *((_DWORD *)v57 + 6) -= 2;
                goto LABEL_90;
              }
              if ((*((_WORD *)v57 + 15) & 0x400) != 0)
              {
LABEL_90:
                v71 = v11;
              }
              else
              {
                WebCore::Node::removedLastRef(v57, a2);
                v71 = v11;
                if (!v74)
                  goto LABEL_136;
              }
              *(_DWORD *)(v20 + 24) += 2;
              v58 = v72;
              v72 = (WebCore::Node *)v20;
              if (v58)
              {
                if (*((_DWORD *)v58 + 6) == 2)
                {
                  if ((*((_WORD *)v58 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v58, a2);
                }
                else
                {
                  *((_DWORD *)v58 + 6) -= 2;
                }
              }
              v53 = v65;
LABEL_95:
              LODWORD(v11) = 0;
              v73 = v53;
LABEL_96:
              v59 = v68;
              v68 = 0;
              if (v59)
              {
                if (*((_DWORD *)v59 + 6) == 2)
                {
                  if ((*((_WORD *)v59 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v59, a2);
                }
                else
                {
                  *((_DWORD *)v59 + 6) -= 2;
                }
              }
              v60 = v66;
              v66 = 0;
              if (v60)
              {
                if (*((_DWORD *)v60 + 6) == 2)
                {
                  if ((*((_WORD *)v60 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v60, a2);
                }
                else
                {
                  *((_DWORD *)v60 + 6) -= 2;
                }
              }
              if ((_DWORD)v11)
              {
                if (v20)
                {
                  v15 = v64;
                  if (*(_DWORD *)(v20 + 24) == 2)
                  {
                    if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v20, a2);
                  }
                  else
                  {
                    *(_DWORD *)(v20 + 24) -= 2;
                  }
                }
                else
                {
                  v15 = v64;
                }
LABEL_140:
                if (v15)
                {
                  v16 = *(_DWORD *)(v15 + 24) - 2;
                  goto LABEL_142;
                }
                goto LABEL_144;
              }
              goto LABEL_38;
            }
LABEL_62:
            LODWORD(v11) = 1;
            goto LABEL_96;
          }
          if (a7)
          {
            v37 = *(unsigned int *)(a7 + 12);
            if ((_DWORD)v37 == *(_DWORD *)(a7 + 8))
            {
              v38 = WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a7, v37 + 1, (unint64_t)&v66);
              v37 = *(unsigned int *)(a7 + 12);
              v39 = *(_QWORD *)a7 + 32 * v37;
              v40 = *(_QWORD *)v38;
              *(_DWORD *)(v40 + 24) = *(_DWORD *)(*(_QWORD *)v38 + 24) + 2;
              *(_QWORD *)v39 = v40;
              *(_DWORD *)(v39 + 8) = *(_DWORD *)(v38 + 8);
              v41 = *(_QWORD *)(v38 + 16);
              *(_DWORD *)(v41 + 24) += 2;
              *(_QWORD *)(v39 + 16) = v41;
              v42 = (int *)(v39 + 24);
              v43 = (int *)(v38 + 24);
            }
            else
            {
              v44 = *(_QWORD *)a7 + 32 * v37;
              *((_DWORD *)v66 + 6) += 2;
              *(_QWORD *)v44 = v32;
              *(_DWORD *)(v44 + 8) = v33;
              v45 = v68;
              *((_DWORD *)v68 + 6) += 2;
              *(_QWORD *)(v44 + 16) = v45;
              v42 = (int *)(v44 + 24);
              v43 = &v69;
            }
            *v42 = *v43;
            *(_DWORD *)(a7 + 12) = v37 + 1;
          }
          if (a6)
          {
            v77 = 0;
            v79 = 0;
            v11 = *(_QWORD *)(*((_QWORD *)v66 + 5) + 8);
            *(_DWORD *)(v11 + 24) += 2;
            v46 = *(uint64_t **)(v11 + 1496);
            if (!v46)
              v46 = (uint64_t *)WebCore::Document::ensureMarkers((WebCore::Document *)v11);
            ++*(_DWORD *)v46;
            WebCore::DocumentMarkerController::addMarker(v46, (const WebCore::SimpleRange *)&v66, 4, (uint64_t)&v77);
            if (!*(_DWORD *)v46)
            {
              __break(0xC471u);
              JUMPOUT(0x195AD5F7CLL);
            }
            --*(_DWORD *)v46;
            if (*(_DWORD *)(v11 + 24) == 2)
            {
              if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
            }
            else
            {
              *(_DWORD *)(v11 + 24) -= 2;
            }
            if (v79 != -1)
              ((void (*)(uint64_t *, uint64_t *))off_1E33AA370[v79])(&v75, &v77);
          }
          v7 = (v7 + 1);
          if (v15 < v7)
            goto LABEL_62;
          if (!v74)
            goto LABEL_136;
          v47 = v68;
          v68 = 0;
          v48 = v70;
          v70 = v47;
          if (!v48)
            goto LABEL_67;
          if (*((_DWORD *)v48 + 6) != 2)
          {
            *((_DWORD *)v48 + 6) -= 2;
            goto LABEL_67;
          }
          if ((*((_WORD *)v48 + 15) & 0x400) != 0)
          {
LABEL_67:
            v49 = v69;
            v71 = v69;
          }
          else
          {
            WebCore::Node::removedLastRef(v48, a2);
            v49 = v69;
            v71 = v69;
            if (!v74)
              goto LABEL_136;
            v47 = v70;
          }
          LODWORD(v11) = 0;
          if (v47 != v72)
            goto LABEL_96;
          if (v49 != v73)
            goto LABEL_96;
          LODWORD(v11) = 0;
          v50 = **((_QWORD **)v47 + 5);
          if (!v50)
            goto LABEL_96;
          v51 = *(_WORD *)(v50 + 28);
          if ((v51 & 0x80) == 0)
            goto LABEL_96;
          *(_DWORD *)(v50 + 24) += 2;
          if ((v51 & 1) != 0)
          {
            v61 = *(_QWORD *)(v50 + 80);
            if (!v61)
              goto LABEL_75;
            v53 = *(_DWORD *)(v61 + 4);
LABEL_114:
            v72 = (WebCore::Node *)v50;
          }
          else
          {
            if ((v51 & 4) == 0 || (v52 = *(_QWORD *)(v50 + 80)) == 0)
            {
LABEL_75:
              v53 = 0;
              goto LABEL_114;
            }
            v53 = 0;
            do
            {
              ++v53;
              v52 = *(_QWORD *)(v52 + 56);
            }
            while (v52);
            v72 = (WebCore::Node *)v50;
            if (!v47)
              goto LABEL_95;
          }
          if (*((_DWORD *)v47 + 6) == 2)
          {
            if ((*((_WORD *)v47 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v47, a2);
          }
          else
          {
            *((_DWORD *)v47 + 6) -= 2;
          }
          goto LABEL_95;
        }
        v22 = *(_QWORD *)(v21 + 528);
        if (!v22)
          break;
        v23 = *(_QWORD *)(v22 + 8);
        if (!v23)
          break;
        v24 = *(_QWORD *)(v23 + 120);
        if (!v24)
          break;
        v19 = *(_QWORD *)(v24 + 8);
        if (!v19)
          goto LABEL_21;
        v25 = 0;
        *(_DWORD *)(v19 + 24) += 2;
LABEL_16:
        if (*(_DWORD *)(v20 + 24) == 2)
        {
          if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v20, a2);
        }
        else
        {
          *(_DWORD *)(v20 + 24) -= 2;
        }
        if ((v25 & 1) != 0)
          goto LABEL_139;
      }
      v19 = 0;
LABEL_21:
      v25 = 1;
      goto LABEL_16;
    }
  }
  v7 = 0;
LABEL_142:
  if (v16)
  {
    *(_DWORD *)(v15 + 24) = v16;
  }
  else if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v15, a2);
  }
LABEL_144:
  if (v74)
  {
    v62 = v72;
    v72 = 0;
    if (v62)
    {
      if (*((_DWORD *)v62 + 6) == 2)
      {
        if ((*((_WORD *)v62 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v62, a2);
      }
      else
      {
        *((_DWORD *)v62 + 6) -= 2;
      }
    }
    v63 = v70;
    v70 = 0;
    if (v63)
    {
      if (*((_DWORD *)v63 + 6) == 2)
      {
        if ((*((_WORD *)v63 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v63, a2);
      }
      else
      {
        *((_DWORD *)v63 + 6) -= 2;
      }
    }
  }
  return v7;
}

uint64_t WebCore::Editor::setMarkedTextMatchesAreHighlighted(uint64_t this, int a2)
{
  _DWORD *v2;

  if (*(unsigned __int8 *)(this + 304) != a2)
  {
    *(_BYTE *)(this + 304) = a2;
    v2 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(this + 16) + 8) + 1496);
    if (v2)
    {
      ++*v2;
      this = WebCore::DocumentMarkerController::repaintMarkers((uint64_t)v2, 4);
      if (*v2)
      {
        --*v2;
      }
      else
      {
        this = 286;
        __break(0xC471u);
      }
    }
  }
  return this;
}

uint64_t WebCore::Editor::selectionStartHasMarkerFor(uint64_t a1, void *a2, unsigned int a3, int a4)
{
  uint64_t v4;
  int v7;
  uint64_t v9;
  WTF *v10;
  WTF *v11;
  uint64_t v12;
  char v13;
  _DWORD *v14;
  WTF *v15;
  unsigned int v16;
  uint64_t v17;
  WTF *v18;
  WTF *v19;
  _DWORD *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t result;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  WTF *v29;
  WTF *v30;
  int v31;
  unsigned int v32;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 3064) + 120);
  if (!v4)
    return 0;
  v7 = (int)a2;
  *(_DWORD *)(v4 + 24) += 4;
  v9 = v4;
  while ((*(_QWORD *)(v9 + 64) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v9 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0
      || *(_BYTE *)((*(_QWORD *)(v9 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) == 17)
    {
      goto LABEL_45;
    }
    if ((*(_WORD *)(v9 + 28) & 8) == 0 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 872))(v9))
    {
      v12 = 0;
      v13 = 1;
      goto LABEL_21;
    }
    *(_DWORD *)(v9 + 24) += 2;
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 880))(v9))
    {
      v13 = 0;
      v12 = v9;
LABEL_21:
      if ((*(_WORD *)(v9 + 28) & 4) != 0 && (v10 = *(WTF **)(v9 + 80)) != 0 || (v10 = *(WTF **)(v9 + 56)) != 0)
        *((_DWORD *)v10 + 6) += 2;
      if (*(_DWORD *)(v9 + 24) == 2)
      {
        if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
      }
      else
      {
        *(_DWORD *)(v9 + 24) -= 2;
      }
      v9 = v12;
      if ((v13 & 1) != 0)
        goto LABEL_30;
      goto LABEL_28;
    }
    WebCore::HTMLTextFormControlElement::visiblePositionForIndex((WebCore::HTMLTextFormControlElement *)v9, 1u, (uint64_t)&v30);
    v10 = v30;
    if (v30)
      *((_DWORD *)v30 + 6) += 4;
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
    if (v10)
    {
      if (*((_DWORD *)v10 + 6) == 2)
      {
        if ((*((_WORD *)v10 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v10, a2);
      }
      else
      {
        *((_DWORD *)v10 + 6) -= 2;
      }
    }
    v11 = v30;
    v30 = 0;
    if (v11)
    {
      if (*((_DWORD *)v11 + 6) == 2)
      {
        if ((*((_WORD *)v11 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v11, a2);
      }
      else
      {
        *((_DWORD *)v11 + 6) -= 2;
      }
    }
LABEL_28:
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
LABEL_30:
    v9 = (uint64_t)v10;
    if (!v10)
      goto LABEL_45;
  }
  if (*(_DWORD *)(v9 + 24) == 2)
  {
    if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
  }
  else
  {
    *(_DWORD *)(v9 + 24) -= 2;
  }
  v9 = 0;
LABEL_45:
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  if (!v9)
    return 0;
  v14 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 1496);
  if (!v14)
  {
    v24 = 0;
    goto LABEL_68;
  }
  ++*v14;
  WebCore::DocumentMarkerController::markersFor((uint64_t)v14, v9, 229375, (uint64_t)&v30);
  v15 = v30;
  if (v32)
  {
    v16 = a4 + a3;
    v17 = 8 * v32;
    v18 = v30;
    v19 = (WTF *)((char *)v30 + v17);
    while (1)
    {
      if (*(_QWORD *)v18)
      {
        v20 = *(_DWORD **)(*(_QWORD *)v18 + 8);
        if (v20[3] <= a3 && v16 <= v20[4] && v20[2] == v7)
          break;
      }
      v18 = (WTF *)((char *)v18 + 8);
      v17 -= 8;
      if (!v17)
      {
        do
        {
          v21 = *(unsigned int **)v15;
          *(_QWORD *)v15 = 0;
          if (v21)
          {
            do
            {
              v22 = __ldaxr(v21);
              v23 = v22 - 1;
            }
            while (__stlxr(v23, v21));
            if (!v23)
            {
              atomic_store(1u, v21);
              WTF::fastFree((WTF *)v21, a2);
            }
          }
          v15 = (WTF *)((char *)v15 + 8);
        }
        while (v15 != v19);
        v15 = v30;
        goto LABEL_63;
      }
    }
    do
    {
      v26 = *(unsigned int **)v15;
      *(_QWORD *)v15 = 0;
      if (v26)
      {
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          atomic_store(1u, v26);
          WTF::fastFree((WTF *)v26, a2);
        }
      }
      v15 = (WTF *)((char *)v15 + 8);
    }
    while (v15 != v19);
    v29 = v30;
    if (v30)
    {
      v30 = 0;
      v31 = 0;
      WTF::fastFree(v29, a2);
    }
    v24 = 1;
  }
  else
  {
LABEL_63:
    if (v15)
    {
      v30 = 0;
      v31 = 0;
      WTF::fastFree(v15, a2);
    }
    v24 = 0;
  }
  if (*v14)
  {
    --*v14;
LABEL_68:
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
    return v24;
  }
  else
  {
    result = 286;
    __break(0xC471u);
  }
  return result;
}

unsigned int *WebCore::Editor::stringForCandidateRequest@<X0>(WebCore::Editor *this@<X0>, const WTF::String *a2@<X8>)
{
  unsigned __int8 *v3;
  void *v4;
  unsigned int *result;
  int v6;
  WebCore::VisiblePosition *v7;
  int v8;
  const WebCore::VisiblePosition *v9;
  void *v11;
  WebCore::Node *v12;
  WebCore::Node *v13;
  WebCore::Node *v14[2];
  WebCore::Node *v15;
  char v16;
  WebCore::Node *v17;
  int v18;
  char v19;
  char v20;
  int v21;
  uint64_t v22;
  unsigned int *v23;
  int v24;
  char v25;
  char v26;

  v3 = *(unsigned __int8 **)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 3064);
  if (v3[153] == 1)
  {
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v3 + 120), (uint64_t)&v23);
    v26 = 1;
    WebCore::wordRangeFromPosition((unsigned int *)&v23, (uint64_t)v14);
    result = v23;
    v23 = 0;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)result, v4);
      }
      else
      {
        result[6] -= 2;
      }
    }
  }
  else
  {
    result = (unsigned int *)WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(v3 + 56), v14);
  }
  if (v16)
  {
    v22 = 0;
    v21 = 0;
    v6 = v3[153];
    v7 = (WebCore::VisiblePosition *)(v3 + 120);
    v8 = v3[152];
    WebCore::VisiblePosition::canonicalPosition(v7, (uint64_t)&v17);
    v20 = 1;
    if (v6 != 2 && v8 == 0)
    {
      v13 = v17;
      if (v17)
      {
        *((_DWORD *)v17 + 6) += 2;
        v23 = (unsigned int *)v13;
        v24 = v18;
        v25 = v19;
        v26 = 0;
        if (!WebCore::inSameLine((WebCore *)&v17, (const WebCore::VisiblePosition *)&v23, v9))
          v20 = 0;
        result = v23;
        v23 = 0;
        if (result)
        {
          if (result[6] == 2)
            goto LABEL_43;
          result[6] -= 2;
        }
      }
    }
    while (1)
    {
      WebCore::charactersAroundPosition((uint64_t)&v17, (const WebCore::VisiblePosition *)((char *)&v22 + 4), &v22, &v21);
      result = (unsigned int *)v17;
      v17 = 0;
      if (result)
      {
        if (result[6] == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)result, v11);
        }
        else
        {
          result[6] -= 2;
        }
      }
      if (v22 <= 0x20 && ((1 << v22) & 0x100000401) != 0)
      {
        *(_QWORD *)a2 = 0;
        goto LABEL_20;
      }
      if (v16)
        break;
      __break(1u);
LABEL_43:
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)result, v11);
    }
    result = (unsigned int *)WebCore::plainText(v14, 0, 0, a2);
LABEL_20:
    if (v16)
    {
      v12 = v15;
      v15 = 0;
      if (v12)
      {
        if (*((_DWORD *)v12 + 6) == 2)
        {
          if ((*((_WORD *)v12 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v12, v11);
        }
        else
        {
          *((_DWORD *)v12 + 6) -= 2;
        }
      }
      result = (unsigned int *)v14[0];
      v14[0] = 0;
      if (result)
      {
        if (result[6] == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)result, v11);
        }
        else
        {
          result[6] -= 2;
        }
      }
    }
  }
  else
  {
    *(_QWORD *)a2 = 0;
  }
  return result;
}

unsigned int *WebCore::Editor::contextRangeForCandidateRequest@<X0>(WebCore::Editor *this@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v3;
  int v4;
  const WebCore::VisiblePosition *v5;
  int v6;
  const WebCore::VisiblePosition *v7;
  void *v8;
  WebCore::Node *v9;
  WebCore::Node *v10;
  WebCore::Node *v11;
  unsigned int *result;
  WebCore::Node *v13;
  void *v14;
  WebCore::Node *v15;
  WebCore::Node *v16;
  void *v17;
  WebCore::Node *v18;
  WebCore::Node *v19;
  int v20;
  char v21;
  char v22;
  WebCore::Node *v23;
  int v24;
  char v25;
  char v26;
  WebCore::Node *v27[3];
  WebCore::Node *v28;
  int v29;
  char v30;
  char v31;

  v3 = *(unsigned __int8 **)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 3064);
  if (v3[153] == 2)
  {
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v3 + 120), (uint64_t)&v23);
    v26 = 1;
  }
  else
  {
    v4 = v3[152];
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v3 + 120), (uint64_t)&v23);
    v26 = 1;
    if (!v4)
    {
      v16 = v23;
      if (v23)
      {
        *((_DWORD *)v23 + 6) += 2;
        v28 = v16;
        v29 = v24;
        v30 = v25;
        v31 = 0;
        if (!WebCore::inSameLine((WebCore *)&v23, (const WebCore::VisiblePosition *)&v28, v5))
          v26 = 0;
        v18 = v28;
        v28 = 0;
        if (v18)
        {
          if (*((_DWORD *)v18 + 6) == 2)
          {
            if ((*((_WORD *)v18 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v18, v17);
          }
          else
          {
            *((_DWORD *)v18 + 6) -= 2;
          }
        }
      }
    }
  }
  WebCore::startOfParagraph((uint64_t)&v23, 1, v27);
  if (v3[153] == 2)
  {
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v3 + 136), (uint64_t)&v19);
    v22 = 1;
  }
  else
  {
    v6 = v3[152];
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v3 + 136), (uint64_t)&v19);
    v22 = 1;
    if (v6)
      goto LABEL_5;
  }
  v13 = v19;
  if (v19)
  {
    *((_DWORD *)v19 + 6) += 2;
    v28 = v13;
    v29 = v20;
    v30 = v21;
    v31 = 0;
    if (!WebCore::inSameLine((WebCore *)&v19, (const WebCore::VisiblePosition *)&v28, v7))
      v22 = 0;
    v15 = v28;
    v28 = 0;
    if (v15)
    {
      if (*((_DWORD *)v15 + 6) == 2)
      {
        if ((*((_WORD *)v15 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v15, v14);
      }
      else
      {
        *((_DWORD *)v15 + 6) -= 2;
      }
    }
  }
LABEL_5:
  WebCore::endOfParagraph((WebCore::Node *)&v19, 1, &v28);
  WebCore::makeSimpleRange<WebCore::VisiblePosition,WebCore::VisiblePosition>((uint64_t *)v27, (uint64_t)&v28, a2);
  v9 = v28;
  v28 = 0;
  if (v9)
  {
    if (*((_DWORD *)v9 + 6) == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v9, v8);
    }
    else
    {
      *((_DWORD *)v9 + 6) -= 2;
    }
  }
  v10 = v19;
  v19 = 0;
  if (v10)
  {
    if (*((_DWORD *)v10 + 6) == 2)
    {
      if ((*((_WORD *)v10 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v10, v8);
    }
    else
    {
      *((_DWORD *)v10 + 6) -= 2;
    }
  }
  v11 = v27[0];
  v27[0] = 0;
  if (v11)
  {
    if (*((_DWORD *)v11 + 6) == 2)
    {
      if ((*((_WORD *)v11 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v11, v8);
    }
    else
    {
      *((_DWORD *)v11 + 6) -= 2;
    }
  }
  result = (unsigned int *)v23;
  v23 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v8);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

void WebCore::Editor::rangeForTextCheckingResult(WebCore::Editor *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v5;
  WebCore::Node *v6;
  WebCore::Node *v7;
  WebCore::Node *v8;
  int v9;
  uint64_t v10;
  int v11;
  WebCore::Node *v12[2];
  WebCore::Node *v13;
  char v14;

  if (*(_QWORD *)(a2 + 16) && (WebCore::Editor::contextRangeForCandidateRequest(a1, (uint64_t)v12), v14))
  {
    WebCore::resolveCharacterRange(v12, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), 0, &v8);
    *(_QWORD *)a3 = v8;
    *(_DWORD *)(a3 + 8) = v9;
    *(_QWORD *)(a3 + 16) = v10;
    *(_DWORD *)(a3 + 24) = v11;
    *(_BYTE *)(a3 + 32) = 1;
    if (v14)
    {
      v6 = v13;
      v13 = 0;
      if (v6)
      {
        if (*((_DWORD *)v6 + 6) == 2)
        {
          if ((*((_WORD *)v6 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v6, v5);
        }
        else
        {
          *((_DWORD *)v6 + 6) -= 2;
        }
      }
      v7 = v12[0];
      v12[0] = 0;
      if (v7)
      {
        if (*((_DWORD *)v7 + 6) == 2)
        {
          if ((*((_WORD *)v7 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v7, v5);
        }
        else
        {
          *((_DWORD *)v7 + 6) -= 2;
        }
      }
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
  }
}

void WebCore::Editor::fontAttributesAtSelectionStart(WebCore::Editor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const WebCore::Color *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  unsigned int v11;
  int v12;
  int v13;
  WTF *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  _DWORD *v17;
  int v18;
  WTF::StringImpl *v19;
  void *v20;
  WebCore::Node *v21;
  int v22;
  float v23;
  float v24;
  float v25;
  void *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  WTF **v38;
  __int128 v39;
  unint64_t v40;
  unint64_t v41;
  WebCore::Node **v42;
  char v43;
  WebCore::Node *v44;
  __n128 v45;
  __int128 v46;
  __int128 v47;
  __int16 v48;
  _QWORD v49[3];

  v48 = 0;
  v46 = 0u;
  v47 = 0u;
  v45 = 0u;
  memset(v49, 0, 19);
  WebCore::Editor::fontForSelection(this, (BOOL *)&v49[2] + 2, &v38);
  WTF::RefPtr<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>::operator=((WTF ***)&v45, &v38);
  if (v38)
    WTF::RefCounted<WebCore::Font>::deref((WebCore::Font *)v38);
  v44 = 0;
  v42 = &v44;
  v43 = 1;
  v4 = WebCore::Editor::styleForSelectionStart((uint64_t)this, (uint64_t *)&v44);
  if (!v4)
  {
    *(_WORD *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    *(_DWORD *)(a2 + 71) = 0;
    goto LABEL_32;
  }
  v5 = v4;
  ++WebCore::ScriptDisallowedScope::s_count;
  WebCore::RenderStyle::visitedDependentColorWithColorFilter(v4, 61, 0, &v41);
  if ((v41 & 0x8000000000000) != 0)
  {
    if (*(float *)((v41 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
      goto LABEL_7;
LABEL_70:
    WebCore::Color::operator=(&v45.n128_u64[1], &v41);
    goto LABEL_7;
  }
  if ((_BYTE)v41)
    goto LABEL_70;
LABEL_7:
  WebCore::RenderStyle::visitedDependentColorWithColorFilter(v5, 5, 0, &v40);
  if ((v40 & 0x4000000000000) != 0 && !WebCore::Color::isBlackColor((WebCore::Color *)&v40, v6))
    WebCore::Color::operator=((unint64_t *)&v46, &v40);
  v7 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 160);
  if (v7)
  {
    WebCore::RenderStyle::colorWithColorFilter((WebCore::RenderStyle *)v5, (const WebCore::StyleColor *)(v7 + 32), (WebCore::Color *)&v38);
    if (*(_BYTE *)(v7 + 6))
      v23 = *(float *)v7;
    else
      v23 = (float)*(int *)v7;
    if (*(_BYTE *)(v7 + 14))
      v24 = *(float *)(v7 + 8);
    else
      v24 = (float)*(int *)(v7 + 8);
    *(_QWORD *)&v39 = __PAIR64__(LODWORD(v24), LODWORD(v23));
    v25 = *(_BYTE *)(v7 + 30) ? *(float *)(v7 + 24) : (float)*(int *)(v7 + 24);
    *((double *)&v39 + 1) = v25;
    WebCore::Color::operator=((unint64_t *)&v46 + 1, &v38);
    v47 = v39;
    if (((unint64_t)v38 & 0x8000000000000) != 0)
    {
      v27 = (unsigned int *)((unint64_t)v38 & 0xFFFFFFFFFFFFLL);
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        atomic_store(1u, v27);
        WTF::fastFree((WTF *)v27, v26);
      }
    }
  }
  v8 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 8) + 68) >> 4;
  if (v8 == 2)
  {
    v30 = 1;
  }
  else
  {
    if (v8 != 3)
      goto LABEL_13;
    v30 = 2;
  }
  LOBYTE(v48) = v30;
LABEL_13:
  v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 3064);
  WebCore::editableTextListsAtPositionInDescendingOrder((unsigned int *)&v38, *(const WebCore::Position ***)(v9 + 120), *(_BYTE *)(v9 + 132));
  WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)v49, &v38);
  WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v38, v10);
  v11 = *(_DWORD *)(v5 + 40);
  v12 = (v11 >> 6) & 0xF;
  if (v12 == 7)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 32) + 148) & 8) != 0)
      v13 = (v11 >> 25) & 2;
    else
      LOBYTE(v13) = 4;
LABEL_16:
    HIBYTE(v48) = v13;
  }
  else
  {
    LOBYTE(v13) = 2;
    switch(v12)
    {
      case 0:
      case 4:
        LOBYTE(v13) = 0;
        goto LABEL_16;
      case 1:
      case 5:
        goto LABEL_16;
      case 2:
      case 6:
        LOBYTE(v13) = 1;
        goto LABEL_16;
      case 3:
        LOBYTE(v13) = 3;
        goto LABEL_16;
      case 8:
        v13 = ~(v11 >> 25) & 2;
        goto LABEL_16;
      default:
        break;
    }
  }
  v14 = *(WTF **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 3064) + 200);
  if (v14 && (++*(_DWORD *)v14, (v15 = *((_QWORD *)v14 + 1)) != 0))
  {
    WebCore::StyleProperties::getPropertyCSSValue(v15, 341, &v37);
    v17 = (_DWORD *)v37;
    if (v37)
    {
      v18 = (*(unsigned __int16 *)(v37 + 4) | (*(unsigned __int8 *)(v37 + 6) << 16)) & 0x3F800;
      v37 = 0;
      if (v18 == 120832)
      {
        if (WebCore::CSSValueContainingVector::hasValue((uint64_t)v17, 474))
          BYTE1(v49[2]) = 1;
        if (WebCore::CSSValueContainingVector::hasValue((uint64_t)v17, 495))
          LOBYTE(v49[2]) = 1;
      }
      if (*v17 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, v16);
      else
        *v17 -= 2;
    }
    else
    {
      v37 = 0;
    }
    WebCore::FontAttributes::FontAttributes((__n128 *)a2, &v45);
  }
  else
  {
    v22 = *(_DWORD *)(v5 + 40);
    if ((v22 & 0x20000) != 0)
      BYTE1(v49[2]) = 1;
    if ((v22 & 0x8000) != 0)
      LOBYTE(v49[2]) = 1;
    WebCore::FontAttributes::FontAttributes((__n128 *)a2, &v45);
    if (!v14)
      goto LABEL_29;
  }
  WTF::RefCounted<WebCore::EditingStyle>::deref(v14, v19);
LABEL_29:
  if ((v40 & 0x8000000000000) != 0)
  {
    v31 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFLL);
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      atomic_store(1u, v31);
      WTF::fastFree((WTF *)v31, v19);
    }
  }
  if ((v41 & 0x8000000000000) != 0)
  {
    v34 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFLL);
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
    {
      atomic_store(1u, v34);
      WTF::fastFree((WTF *)v34, v19);
    }
  }
  --WebCore::ScriptDisallowedScope::s_count;
LABEL_32:
  WTF::ScopeExit<WebCore::Editor::fontAttributesAtSelectionStart(void)::$_0>::~ScopeExit((uint64_t)&v42);
  v21 = v44;
  v44 = 0;
  if (v21)
  {
    if (*((_DWORD *)v21 + 6) == 2)
    {
      if ((*((_WORD *)v21 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v21, v20);
    }
    else
    {
      *((_DWORD *)v21 + 6) -= 2;
    }
  }
  WebCore::FontAttributes::~FontAttributes((WebCore::FontAttributes *)&v45, (WTF::StringImpl *)v20);
}

uint64_t *WebCore::Editor::fontForSelection@<X0>(WebCore::Editor *this@<X0>, BOOL *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::RenderStyle *v6;
  void *v7;
  _DWORD *v8;
  WebCore::Node *v9;
  WebCore::FontCascade *v10;
  void *v11;
  uint64_t *result;
  void *v14;
  WebCore::Node *v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::FontCascade *v18;
  void *v19;
  _DWORD *v20;
  WTF::StringImpl *v21;
  _QWORD v22[2];
  WebCore::Node *v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27[2];
  char v28;
  WebCore::Node *v29;
  int v30;
  uint64_t v31;
  int v32;
  char v33;
  _QWORD v34[3];
  uint64_t v35;

  *a2 = 0;
  v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  v35 = v4;
  v5 = *(_QWORD *)(v4 + 3064);
  if (*(_BYTE *)(v5 + 153) != 2)
  {
    v29 = 0;
    v6 = (WebCore::RenderStyle *)WebCore::Editor::styleForSelectionStart((uint64_t)this, (uint64_t *)&v29);
    v8 = 0;
    if (!v6)
      goto LABEL_3;
    ++WebCore::ScriptDisallowedScope::s_count;
    v10 = (WebCore::FontCascade *)WebCore::RenderStyle::fontCascade(v6);
    v8 = (_DWORD *)WebCore::FontCascade::primaryFont(v10, v11);
    ++*v8;
    --WebCore::ScriptDisallowedScope::s_count;
    if (v29)
    {
      WebCore::Node::remove(v29, v34);
      WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v34, v21);
LABEL_3:
      v9 = v29;
      *a3 = v8;
      v29 = 0;
      if (v9)
      {
        if (*((_DWORD *)v9 + 6) == 2)
        {
          if ((*((_WORD *)v9 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v9, v7);
        }
        else
        {
          *((_DWORD *)v9 + 6) -= 2;
        }
      }
      return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v35);
    }
    *a3 = v8;
    return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v35);
  }
  WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(v5 + 56), &v29);
  if (!v33)
  {
    *a3 = 0;
LABEL_31:
    std::optional<WebCore::SimpleRange>::~optional((uint64_t *)&v29);
    return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v35);
  }
  WebCore::adjustedSelectionStartForStyleComputation((WebCore *)(*(_QWORD *)(v4 + 3064) + 56), (uint64_t)&v23);
  WebCore::makeBoundaryPoint((uint64_t *)&v23, (uint64_t)v27);
  result = WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v23);
  if (!v28)
  {
    *a3 = 0;
LABEL_30:
    std::optional<WebCore::BoundaryPoint>::~optional(v27, v14);
    goto LABEL_31;
  }
  if (v33)
  {
    result = WebCore::BoundaryPoint::operator=((uint64_t *)&v29, v27);
    ++WebCore::ScriptDisallowedScope::s_count;
    *a3 = 0;
    if (v33)
    {
      v15 = v29;
      *((_DWORD *)v29 + 6) += 2;
      v23 = v15;
      v24 = v30;
      v16 = v31;
      *(_DWORD *)(v31 + 24) += 2;
      v25 = v16;
      v26 = v32;
      WebCore::IntersectingNodeIterator::IntersectingNodeIterator((WebCore::IntersectingNodeIterator *)v22, (const WebCore::SimpleRange *)&v23);
      while (v22[0])
      {
        v17 = *(_QWORD *)(v22[0] + 64) & 0xFFFFFFFFFFFFLL;
        if (v17)
        {
          if ((*(_BYTE *)((*(_QWORD *)(v22[0] + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          {
            v17 = *(_QWORD *)((*(_QWORD *)(v22[0] + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
            if (v17)
              v17 = *(_QWORD *)(v17 + 8);
          }
          v18 = (WebCore::FontCascade *)WebCore::RenderStyle::fontCascade((WebCore::RenderStyle *)(v17 + 80));
          v20 = (_DWORD *)WebCore::FontCascade::primaryFont(v18, v19);
          if (*a3)
          {
            if ((_DWORD *)*a3 != v20)
            {
              *a2 = 1;
              break;
            }
          }
          else
          {
            ++*v20;
            *a3 = v20;
          }
        }
        WebCore::IntersectingNodeIterator::advance((WebCore::IntersectingNodeIterator *)v22);
      }
      WebCore::PositionIterator::~PositionIterator((WebCore::PositionIterator *)v22);
      WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&v23);
      --WebCore::ScriptDisallowedScope::s_count;
      goto LABEL_30;
    }
  }
  __break(1u);
  return result;
}

WTF ***WTF::RefPtr<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>::operator=(WTF ***a1, WTF ***a2)
{
  WTF **v3;
  WTF **v4;
  WTF *v6;
  void *v7;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::Font::~Font(v4);
      WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return a1;
}

uint64_t WebCore::Editor::styleForSelectionStart(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  const WebCore::Node *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WebCore::StyleProperties **v13;
  unsigned __int8 *v14;
  WTF::String *v15;
  __n128 v16;
  WTF::StringImpl *v17;
  __n128 v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WebCore::Node *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WebCore::Node *v32[2];
  unsigned __int8 v33;
  WTF::StringImpl *v34;
  _BYTE v35[24];
  _QWORD v36[3];
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WebCore::Node *v39;
  uint64_t v40[2];

  v4 = *a2;
  *a2 = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v6 = *(_DWORD *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v6 + 2;
  v7 = *(_QWORD *)(v5 + 3064);
  if (*(_BYTE *)(v7 + 153))
  {
    WebCore::adjustedSelectionStartForStyleComputation((WebCore *)(v7 + 56), (uint64_t)v40);
    if (WebCore::Position::isCandidate((WebCore::Position *)v40, v10) && (v12 = v40[0]) != 0)
    {
      v13 = *(WebCore::StyleProperties ***)(*(_QWORD *)(v5 + 3064) + 200);
      if (v13 && (++*(_DWORD *)v13, v13[1]))
      {
        WebCore::HTMLSpanElement::create((WebCore::HTMLSpanElement *)v5, &v39);
        WebCore::StyleProperties::asText(v13[1], v14, v15, &v37, v16);
        WTF::makeAtomString<WTF::String,WTF::ASCIILiteral>(&v38, v37);
        v19 = v37;
        v37 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v17);
          else
            *(_DWORD *)v19 -= 2;
        }
        WebCore::Element::setAttribute(v39, (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, &v38, 0, v36, v18);
        WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v36, v20);
        v21 = v39;
        v22 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
          *(_DWORD *)v22 += 2;
        v34 = v22;
        WebCore::Document::createEditingTextNode(v5, (_DWORD **)&v34, (uint64_t *)v32);
        WebCore::ContainerNode::appendChild((uint64_t)v21, v32[0], (uint64_t)v35);
        WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v35, v23);
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)v32);
        v25 = v34;
        v34 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v24);
          else
            *(_DWORD *)v25 -= 2;
        }
        v26 = v40[0];
        if (v40[0])
          *(_DWORD *)(v40[0] + 24) += 2;
        v27 = *(_QWORD *)(v26 + 32);
        if (v27)
        {
          *(_DWORD *)(v27 + 24) += 2;
          WebCore::ContainerNode::appendChild(v27, v39, (uint64_t)v32);
          v28 = v33;
          WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v32, v29);
          if (v28
            || (WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=(a2, (uint64_t)v39), WebCore::Document::updateStyleIfNeeded((WebCore::Document *)v5), (*((_QWORD *)v39 + 8) & 0xFFFFFFFFFFFFLL) == 0))
          {
            v8 = 0;
          }
          else
          {
            if ((*(_BYTE *)((*((_QWORD *)v39 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
            {
              result = 105;
              __break(0xC471u);
              return result;
            }
            v8 = (*((_QWORD *)v39 + 8) & 0xFFFFFFFFFFFFLL) + 80;
          }
          if (*(_DWORD *)(v27 + 24) == 2)
          {
            if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v27, v24);
          }
          else
          {
            *(_DWORD *)(v27 + 24) -= 2;
          }
        }
        else
        {
          v8 = 0;
        }
        if (*(_DWORD *)(v26 + 24) == 2)
        {
          if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v26, v24);
        }
        else
        {
          *(_DWORD *)(v26 + 24) -= 2;
        }
        v30 = v38;
        v38 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, v24);
          else
            *(_DWORD *)v30 -= 2;
        }
        WTF::Ref<WebCore::HTMLDocument,WTF::RawPtrTraits<WebCore::HTMLDocument>,WTF::DefaultRefDerefTraits<WebCore::HTMLDocument>>::~Ref(&v39);
      }
      else
      {
        v31 = *(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFLL;
        if ((*(_BYTE *)(v31 + 45) & 2) != 0)
        {
          v31 = *(_QWORD *)(v31 + 32);
          if (v31)
            v31 = *(_QWORD *)(v31 + 8);
        }
        v8 = v31 + 80;
        if (!v13)
          goto LABEL_35;
      }
      WTF::RefCounted<WebCore::EditingStyle>::deref((WTF *)v13, v11);
    }
    else
    {
      v8 = 0;
    }
LABEL_35:
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v40);
    v6 = *(_DWORD *)(v5 + 24) - 2;
    goto LABEL_6;
  }
  v8 = 0;
LABEL_6:
  if (v6)
  {
    *(_DWORD *)(v5 + 24) = v6;
  }
  else if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
  }
  return v8;
}

unsigned int *WebCore::editableTextListsAtPositionInDescendingOrder(unsigned int *this, const WebCore::Position **a2, char a3)
{
  uint64_t v3;
  const WebCore::Position *v4;
  void *v5;
  WebCore::Node *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  const WebCore::Element *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  WTF::StringImpl *v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  WebCore::Node *v37;

  v3 = (uint64_t)this;
  if (!a2
    || (a3 & 7u) > 4
    || (v4 = (const WebCore::Position *)a2, ((1 << (a3 & 7)) & 0x19) == 0) && (v4 = a2[4]) == 0)
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    return this;
  }
  *((_DWORD *)v4 + 6) += 2;
  WebCore::firstPositionInOrBeforeNode((uint64_t)v4, (WebCore::Node *)a2, (uint64_t)&v31);
  WebCore::highestEditableRoot((uint64_t)&v31, 0, (uint64_t *)&v37);
  this = (unsigned int *)WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v31);
  v6 = v37;
  if (v37)
  {
    v35 = 0;
    v36 = 0;
    v7 = WebCore::ancestorsOfType<WebCore::HTMLElement>(*((_QWORD *)v4 + 4));
    if (v7)
    {
      v9 = v7;
      if (v6 != (WebCore::Node *)v7)
      {
        while (1)
        {
          if ((*(_QWORD *)(v9 + 64) & 0xFFFFFFFFFFFFLL) == 0)
            goto LABEL_11;
          if ((*(_BYTE *)((*(_QWORD *)(v9 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
            break;
          v10 = *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24);
          if (v10 == *(_QWORD *)(WebCore::HTMLNames::ulTag + 24) || v10 == *(_QWORD *)(WebCore::HTMLNames::olTag + 24))
          {
            v13 = HIDWORD(v36);
            if (HIDWORD(v36) == (_DWORD)v36)
            {
              WTF::Vector<WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::HTMLElement&>((uint64_t)&v35, v9);
            }
            else
            {
              v30 = v35;
              *(_DWORD *)(v9 + 24) += 2;
              *(_QWORD *)(v30 + 8 * v13) = v9;
              HIDWORD(v36) = v13 + 1;
            }
          }
          do
          {
LABEL_11:
            v9 = *(_QWORD *)(v9 + 32);
            if (v9)
            {
              v11 = *(_WORD *)(v9 + 28);
              if ((v11 & 8) != 0)
                continue;
            }
            goto LABEL_15;
          }
          while ((v11 & 0x10) == 0);
          if ((WebCore::Node *)v9 == v37)
            goto LABEL_15;
        }
LABEL_62:
        __break(0xC471u);
        JUMPOUT(0x195AD77B8);
      }
    }
LABEL_15:
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    v12 = HIDWORD(v36);
    if (!HIDWORD(v36))
    {
LABEL_16:
      WTF::Vector<WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, v8);
      this = (unsigned int *)v37;
      v37 = 0;
      if (this)
      {
        if (this[6] == 2)
        {
          if ((*((_WORD *)this + 15) & 0x400) == 0)
            this = WebCore::Node::removedLastRef((WebCore::Node *)this, v5);
        }
        else
        {
          this[6] -= 2;
        }
      }
      goto LABEL_19;
    }
    if (HIDWORD(v36) >= 0xAAAAAAB)
      goto LABEL_62;
    v14 = 24 * HIDWORD(v36);
    v15 = WTF::fastMalloc((WTF *)(24 * HIDWORD(v36)));
    *(_DWORD *)(v3 + 8) = (v14 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v3 = v15;
    v17 = 8 * v12;
    v18 = v35 - 8;
    while (1)
    {
      v19 = *(_QWORD *)(v18 + v17);
      v20 = *(_QWORD *)(*(_QWORD *)(v19 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::olTag + 24)
          ? *(_QWORD *)(v18 + v17)
          : 0;
      v21 = *(_QWORD *)(v19 + 64) & 0xFFFFFFFFFFFFLL;
      if (v21)
        break;
LABEL_52:
      v17 -= 8;
      if (!v17)
        goto LABEL_16;
    }
    if ((*(_BYTE *)(v21 + 45) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195AD77D8);
    }
    v22 = *(_QWORD *)(v21 + 104);
    v23 = *(_BYTE *)(v22 + 368);
    v24 = *(WTF::StringImpl **)(v22 + 376);
    if (v24)
      *(_DWORD *)v24 += 4;
    LOBYTE(v31) = v23;
    v32 = v24;
    if (v20)
    {
      if (*(_BYTE *)(v20 + 116))
      {
        v25 = *(_DWORD *)(v20 + 112);
LABEL_43:
        v33 = v25;
        v34 = v20 != 0;
        v26 = *(_DWORD *)(v3 + 12);
        if (v26 == *(_DWORD *)(v3 + 8))
        {
          WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextList>((unsigned int *)v3, (unint64_t)&v31);
        }
        else
        {
          v27 = *(_QWORD *)v3 + 24 * v26;
          *(_BYTE *)v27 = v31;
          v28 = v32;
          v32 = 0;
          *(_QWORD *)(v27 + 8) = v28;
          LOBYTE(v28) = v34;
          *(_DWORD *)(v27 + 16) = v33;
          *(_BYTE *)(v27 + 20) = (_BYTE)v28;
          *(_DWORD *)(v3 + 12) = v26 + 1;
        }
        v29 = v32;
        v32 = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v8);
          else
            *(_DWORD *)v29 -= 2;
        }
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v8);
          else
            *(_DWORD *)v24 -= 2;
        }
        goto LABEL_52;
      }
      if (*(_BYTE *)(v20 + 128))
      {
        v25 = WebCore::HTMLOListElement::itemCount((WebCore::HTMLOListElement *)v20, (uint64_t)v8, v16);
        goto LABEL_43;
      }
    }
    v25 = 1;
    goto LABEL_43;
  }
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
LABEL_19:
  if (*((_DWORD *)v4 + 6) == 2)
  {
    if ((*((_WORD *)v4 + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef(v4, v5);
  }
  else
  {
    *((_DWORD *)v4 + 6) -= 2;
  }
  return this;
}

uint64_t WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;

  v4 = *(_DWORD *)(a1 + 12);
  if (v4)
    WTF::VectorTypeOperations<WebCore::TextList>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 24 * v4));
  WTF::VectorBuffer<WTF::Function<void ()(void)>,0ul,WTF::FastMalloc>::adopt(a1, a2);
  return a1;
}

unsigned int *WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;

  v3 = a1[3];
  if ((_DWORD)v3)
  {
    v6 = 24 * v3;
    v7 = (WTF::StringImpl **)(*(_QWORD *)a1 + 8);
    do
    {
      v8 = *v7;
      *v7 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v7 += 3;
      v6 -= 24;
    }
    while (v6);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

__n128 WebCore::FontAttributes::FontAttributes(__n128 *a1, __n128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  __n128 result;
  unint64_t v7;

  a1->n128_u64[1] = 0;
  v3 = a2->n128_u64[0];
  v2 = a2->n128_u64[1];
  a2->n128_u64[0] = 0;
  a1->n128_u64[0] = v3;
  if (v2)
  {
    a1->n128_u64[1] = v2;
    a2->n128_u64[1] = 0;
  }
  a1[1].n128_u64[0] = 0;
  v4 = a2[1].n128_u64[0];
  if (v4)
  {
    a1[1].n128_u64[0] = v4;
    a2[1].n128_u64[0] = 0;
  }
  a1[1].n128_u64[1] = 0;
  v5 = a2[1].n128_u64[1];
  if (v5)
  {
    a1[1].n128_u64[1] = v5;
    a2[1].n128_u64[1] = 0;
  }
  result = a2[2];
  a1[2] = result;
  a1[3].n128_u16[0] = a2[3].n128_u16[0];
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  v7 = a2[3].n128_u64[1];
  a2[3].n128_u64[1] = 0;
  a1[3].n128_u64[1] = v7;
  LODWORD(v7) = a2[4].n128_u32[0];
  a2[4].n128_u32[0] = 0;
  a1[4].n128_u32[0] = v7;
  LODWORD(v7) = a2[4].n128_u32[1];
  a2[4].n128_u32[1] = 0;
  a1[4].n128_u32[1] = v7;
  LOWORD(v7) = a2[4].n128_u16[4];
  a1[4].n128_u8[10] = a2[4].n128_u8[10];
  a1[4].n128_u16[4] = v7;
  return result;
}

uint64_t WTF::ScopeExit<WebCore::Editor::fontAttributesAtSelectionStart(void)::$_0>::~ScopeExit(uint64_t a1)
{
  WebCore::Node *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  __int16 v6;
  __int16 v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = **(WebCore::Node ***)a1;
    if (v2)
    {
      v3 = *((_QWORD *)v2 + 4);
      if (v3)
      {
        *(_DWORD *)(v3 + 24) += 2;
        WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v3, v2, &v8);
        if (*(_DWORD *)(v3 + 24) == 2)
        {
          v6 = *(_WORD *)(v3 + 30);
          if ((v6 & 0x400) == 0)
          {
            v7 = *(_WORD *)(v3 + 28);
            if ((v7 & 0xF000) == 0x9000)
            {
              WebCore::Document::removedLastRef((WebCore::Document *)v3, v2);
            }
            else
            {
              if ((v7 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 160) + 16))(*(_QWORD *)(v3 + 160));
                v6 = *(_WORD *)(v3 + 30);
              }
              *(_WORD *)(v3 + 30) = v6 | 0x400;
              (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
            }
          }
        }
        else
        {
          *(_DWORD *)(v3 + 24) -= 2;
        }
      }
      else
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
      }
      if ((_BYTE)v10)
      {
        v4 = v9;
        v9 = 0;
        if (v4)
        {
          if (*(_DWORD *)v4 == 2)
            WTF::StringImpl::destroy(v4, v2);
          else
            *(_DWORD *)v4 -= 2;
        }
      }
    }
  }
  return a1;
}

uint64_t WebCore::Editor::promisedAttachmentInfo@<X0>(uint64_t this@<X0>, WebCore::Element *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __int16 v7;
  uint64_t v8;
  WebCore::Element *v9;
  void *v10;
  _DWORD *v11;
  char *v12;
  void *v13;
  int v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v4 = *(_QWORD *)(this + 8);
  if (!v4)
    goto LABEL_18;
  v5 = this;
  this = *(_QWORD *)(v4 + 8);
  if (!this)
    goto LABEL_18;
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 224))(this);
  if ((this & 1) == 0)
    goto LABEL_18;
  v7 = *((_WORD *)a2 + 14);
  if ((v7 & 0x10) == 0 || (v7 & 0x110) == 0x110)
  {
    if ((v7 & 0x10) == 0)
      goto LABEL_18;
    v8 = *(_QWORD *)(*((_QWORD *)a2 + 12) + 24);
LABEL_16:
    if (v8 == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
    {
      this = (*(uint64_t (**)(char *))(*((_QWORD *)a2 + 14) + 24))((char *)a2 + 112);
      if ((*(_QWORD *)(this + 72) & 0xFFFFFFFFFFFFLL) != 0)
      {
        this = *(_QWORD *)((*(_QWORD *)(this + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
        if (this)
        {
          v14 = *(_DWORD *)(this + 24);
          *(_DWORD *)(this + 24) = v14 + 2;
          v9 = *(WebCore::Element **)(this + 80);
          if (v9)
          {
            while (1)
            {
              v15 = *((_WORD *)v9 + 14);
              if ((v15 & 0x10) != 0
                && (v15 & 0x110) != 0x110
                && *(_QWORD *)(*((_QWORD *)v9 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::attachmentTag + 24))
              {
                break;
              }
              v9 = (WebCore::Element *)*((_QWORD *)v9 + 7);
              if (!v9)
                goto LABEL_28;
            }
            *((_DWORD *)v9 + 6) += 2;
            v14 = *(_DWORD *)(this + 24) - 2;
          }
LABEL_28:
          if (v14)
          {
            *(_DWORD *)(this + 24) = v14;
          }
          else if ((*(_WORD *)(this + 30) & 0x400) == 0)
          {
            this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)this, v13);
          }
          if (v9)
            goto LABEL_8;
        }
      }
    }
LABEL_18:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return this;
  }
  v8 = *(_QWORD *)(*((_QWORD *)a2 + 12) + 24);
  if (v8 != *(_QWORD *)(WebCore::HTMLNames::attachmentTag + 24))
    goto LABEL_16;
  *((_DWORD *)a2 + 6) += 2;
  v9 = a2;
LABEL_8:
  v16 = 0;
  v17 = 0;
  this = (uint64_t)WebCore::Editor::getPasteboardTypesAndDataForAttachment(v5, a2, &v16);
  v11 = (_DWORD *)*((_QWORD *)v9 + 16);
  if (v11)
    *v11 += 2;
  v12 = v16;
  *a3 = v11;
  a3[1] = v12;
  a3[2] = v17;
  if (*((_DWORD *)v9 + 6) == 2)
  {
    if ((*((_WORD *)v9 + 15) & 0x400) == 0)
      return (uint64_t)WebCore::Node::removedLastRef(v9, v10);
  }
  else
  {
    *((_DWORD *)v9 + 6) -= 2;
  }
  return this;
}

WTF::StringImpl *WebCore::Editor::registerAttachmentIdentifier(WTF::StringImpl *this, const WTF::String *a2, const WebCore::AttachmentAssociatedElement *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::Node *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  int v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  int v35;
  void *v36;
  WebCore::Document *v37;
  _QWORD *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  WTF *v51;
  uint64_t v53;
  WTF::StringImpl *v54[2];
  uint64_t v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  char v59;

  v3 = *((_QWORD *)this + 1);
  if (!v3)
    return this;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return this;
  v6 = (*(uint64_t (**)(const WebCore::AttachmentAssociatedElement *))(*(_QWORD *)a3 + 24))(a3);
  v8 = *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24);
  v9 = *(_QWORD *)(WebCore::HTMLNames::imgTag + 24);
  if (v8 == v9)
    v10 = (WebCore::Node *)v6;
  else
    v10 = 0;
  if (v8 != v9)
  {
    LOBYTE(v56) = 0;
    v59 = 0;
    goto LABEL_17;
  }
  v11 = v6;
  v12 = *(_DWORD *)(v6 + 24);
  *(_DWORD *)(v6 + 24) = v12 + 2;
  v13 = *(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL;
  if (v13)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195AD8204);
    }
    if ((((*(_BYTE *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3) & *(_BYTE *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL)
                                                                                               + 0x35)) == 1)
    {
      ++*(_DWORD *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
      v14 = *(_QWORD *)(*(_QWORD *)(v13 + 224) + 24);
      if (!v14
        || (v15 = *(_QWORD *)(v14 + 8)) == 0
        || (*(_WORD *)(v15 + 557) >> 5) - 3 <= 1)
      {
        LOBYTE(v56) = 0;
        v59 = 0;
        goto LABEL_51;
      }
      v19 = *(WTF::StringImpl **)(v15 + 688);
      if (v19)
      {
LABEL_29:
        v20 = *((_QWORD *)v19 + 4);
        if (v20 && (v21 = *(_DWORD **)(v20 + 8)) != 0)
        {
          v21[2] += 2;
          (*(void (**)(WTF::StringImpl **__return_ptr, _DWORD *))(*(_QWORD *)v21 + 24))(&v56, v21);
          v22 = v21[2] - 1;
          if (v21[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
            v22 = v21[2];
          }
          else
          {
            v21[2] = v22;
          }
          v23 = v22 - 1;
          if (v23)
            v21[2] = v23;
          else
            (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
          v24 = v56;
        }
        else
        {
          v24 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
          if (*MEMORY[0x1E0CBF738])
            *(_DWORD *)v24 += 2;
        }
        if (v24 && *((_DWORD *)v24 + 1))
        {
          v25 = *(_QWORD *)(v15 + 392);
          if (!v25)
          {
            LOBYTE(v56) = 0;
            v59 = 0;
LABEL_49:
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v7);
            else
              *(_DWORD *)v24 -= 2;
LABEL_51:
            v31 = *(_DWORD *)(v13 + 16);
            if (!v31)
            {
              __break(0xC471u);
              JUMPOUT(0x195AD8224);
            }
            *(_DWORD *)(v13 + 16) = v31 - 1;
            v12 = *(_DWORD *)(v11 + 24) - 2;
            if (*(_DWORD *)(v11 + 24) == 2)
              goto LABEL_53;
            goto LABEL_16;
          }
          do
            v26 = __ldaxr((unsigned int *)v25);
          while (__stlxr(v26 + 1, (unsigned int *)v25));
          v27 = *(_QWORD *)(v11 + 104);
          if (v27
            && ((v28 = *(_DWORD *)(v27 + 4), (v28 & 1) != 0)
              ? (v29 = *(_QWORD *)(v27 + 40), LODWORD(v30) = *(_DWORD *)(v27 + 52))
              : (v29 = v27 + 32, LODWORD(v30) = v28 >> 5),
                (_DWORD)v30))
          {
            v30 = v30;
            v32 = (WTF::StringImpl **)(v29 + 8);
            while (1)
            {
              v33 = (uint64_t)*(v32 - 1);
              if (v33 == WebCore::HTMLNames::altAttr
                || *(_QWORD *)(v33 + 24) == *(_QWORD *)(WebCore::HTMLNames::altAttr + 24)
                && *(_QWORD *)(v33 + 32) == *(_QWORD *)(WebCore::HTMLNames::altAttr + 32))
              {
                break;
              }
              v32 += 2;
              if (!--v30)
              {
                v32 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
                break;
              }
            }
          }
          else
          {
            v32 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
          }
          v34 = *v32;
          if (*v32)
          {
            v35 = *((_DWORD *)v34 + 1);
            *(_DWORD *)v34 += 2;
            if (v35)
              goto LABEL_69;
          }
          v37 = *(WebCore::Document **)(*(_QWORD *)(v11 + 40) + 8);
          v38 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 640))(v11);
          WebCore::Document::completeURL(v37, v38, (uint64_t)v37 + 848, 0, (WTF::URL *)&v56);
          WTF::URL::lastPathComponent((WTF::URL *)&v56);
          if ((v39 & 0xFF00000000) != 0)
            WTF::String::String();
          else
            WTF::String::String();
          v40 = v54[0];
          v54[0] = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, v7);
            else
              *(_DWORD *)v34 -= 2;
            v54[0] = 0;
          }
          v41 = v56;
          v56 = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 2)
            {
              WTF::StringImpl::destroy(v41, v7);
              if (!v40)
                goto LABEL_80;
              goto LABEL_99;
            }
            *(_DWORD *)v41 -= 2;
          }
          if (!v40)
          {
LABEL_80:
            LOBYTE(v56) = 0;
            v59 = 0;
            do
            {
LABEL_81:
              v42 = __ldaxr((unsigned int *)v25);
              v43 = v42 - 1;
            }
            while (__stlxr(v43, (unsigned int *)v25));
            if (!v43)
            {
              atomic_store(1u, (unsigned int *)v25);
              v44 = *(unsigned int *)(v25 + 20);
              if ((_DWORD)v44)
              {
                v45 = *(_QWORD *)(v25 + 8);
                v46 = v45 + 16 * v44;
                do
                {
                  v47 = *(unsigned int **)(v45 + 8);
                  *(_QWORD *)(v45 + 8) = 0;
                  if (v47)
                  {
                    do
                    {
                      v48 = __ldaxr(v47);
                      v49 = v48 - 1;
                    }
                    while (__stlxr(v49, v47));
                    if (!v49)
                    {
                      atomic_store(1u, v47);
                      v50 = v47[6];
                      if ((_DWORD)v50 != -1)
                        ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33AA3A8[v50])(v54, v47 + 2);
                      v47[6] = -1;
                      WTF::fastFree((WTF *)v47, v7);
                    }
                  }
                  v45 += 16;
                }
                while (v45 != v46);
              }
              v51 = *(WTF **)(v25 + 8);
              if ((WTF *)(v25 + 24) != v51 && v51 != 0)
              {
                *(_QWORD *)(v25 + 8) = 0;
                *(_DWORD *)(v25 + 16) = 0;
                WTF::fastFree(v51, v7);
              }
              WTF::fastFree((WTF *)v25, v7);
            }
            goto LABEL_49;
          }
LABEL_99:
          if (*((_DWORD *)v40 + 1))
          {
            v34 = v40;
LABEL_69:
            v53 = 0;
            v56 = v24;
            v57 = v34;
            v55 = 0;
            v58 = v25;
            v59 = 1;
            WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v55, v7);
            v54[1] = 0;
            v54[0] = 0;
            WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v53, v36);
            goto LABEL_51;
          }
          LOBYTE(v56) = 0;
          v59 = 0;
          if (*(_DWORD *)v40 == 2)
            WTF::StringImpl::destroy(v40, v7);
          else
            *(_DWORD *)v40 -= 2;
          goto LABEL_81;
        }
LABEL_48:
        LOBYTE(v56) = 0;
        v59 = 0;
        if (!v24)
          goto LABEL_51;
        goto LABEL_49;
      }
      {
        v19 = (WTF::StringImpl *)WebCore::Image::nullImage(void)::nullImage;
        if (WebCore::Image::nullImage(void)::nullImage)
          goto LABEL_29;
      }
      else
      {
        WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)&v56);
        v19 = v56;
        WebCore::Image::nullImage(void)::nullImage = (uint64_t)v56;
        if (v56)
          goto LABEL_29;
      }
      v24 = 0;
      goto LABEL_48;
    }
  }
  LOBYTE(v56) = 0;
  v59 = 0;
  if (!v12)
  {
LABEL_53:
    if ((*((_WORD *)v10 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v10, v7);
    goto LABEL_17;
  }
LABEL_16:
  *(_DWORD *)(v11 + 24) = v12;
LABEL_17:
  if (v59)
    this = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, const WTF::String *, WTF::StringImpl **, WTF::StringImpl **, uint64_t *))(*(_QWORD *)v4 + 168))(v4, a2, &v56, &v57, &v58);
  else
    this = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, const WTF::String *))(*(_QWORD *)v4 + 192))(v4, a2);
  if (v59)
  {
    WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v58, v16);
    v18 = v57;
    v57 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    this = v56;
    v56 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v17);
      else
        *(_DWORD *)this -= 2;
    }
  }
  return this;
}

WTF::StringImpl *WebCore::Editor::didInsertAttachmentElement(WebCore::Editor *this, WebCore::HTMLAttachmentElement *a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl *result;
  int v5;
  WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  double v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 16);
  if (result)
  {
    v5 = *(_DWORD *)result;
    *(_DWORD *)result += 2;
    v13 = result;
    if (!*((_DWORD *)result + 1))
    {
      v13 = 0;
      if (v5)
      {
LABEL_14:
        *(_DWORD *)result = v5;
        return result;
      }
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    v6 = (WTF::StringImpl *)WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 19, &v13, a3);
    v8 = *((unsigned int *)this + 40);
    if ((WTF::StringImpl *)(*((_QWORD *)this + 19) + 8 * v8) == v6)
      goto LABEL_11;
    v9 = v6;
    v10 = *(WTF::StringImpl **)v6;
    *(_QWORD *)v6 = 0;
    if ((WTF::StringImpl *)(*((_QWORD *)this + 19) + 8 * v8) != v6)
      v6 = (WTF::StringImpl *)WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove((uint64_t)this + 152, v6);
    if (!v10)
    {
LABEL_11:
      v6 = WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::add((uint64_t)this + 128, &v13, v7, (uint64_t)&v12);
    }
    else if (*(_DWORD *)v10 == 2)
    {
      v6 = (WTF::StringImpl *)WTF::StringImpl::destroy(v10, v9);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
    *((_QWORD *)this + 55) = 0;
    WTF::MonotonicTime::now(v6);
    WebCore::TimerBase::setNextFireTime((uint64_t)this + 416, v11 + 0.0);
    result = v13;
    v13 = 0;
    if (result)
    {
      v5 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result != 2)
        goto LABEL_14;
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::Editor::didRemoveAttachmentElement(WebCore::Editor *this, WebCore::HTMLAttachmentElement *a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl *result;
  int v5;
  WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  double v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 16);
  if (result)
  {
    v5 = *(_DWORD *)result;
    *(_DWORD *)result += 2;
    v13 = result;
    if (!*((_DWORD *)result + 1))
    {
      v13 = 0;
      if (v5)
      {
LABEL_14:
        *(_DWORD *)result = v5;
        return result;
      }
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    v6 = (WTF::StringImpl *)WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 16, &v13, a3);
    v8 = *((unsigned int *)this + 34);
    if ((WTF::StringImpl *)(*((_QWORD *)this + 16) + 8 * v8) == v6)
      goto LABEL_11;
    v9 = v6;
    v10 = *(WTF::StringImpl **)v6;
    *(_QWORD *)v6 = 0;
    if ((WTF::StringImpl *)(*((_QWORD *)this + 16) + 8 * v8) != v6)
      v6 = (WTF::StringImpl *)WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove((uint64_t)this + 128, v6);
    if (!v10)
    {
LABEL_11:
      v6 = WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::add((uint64_t)this + 152, &v13, v7, (uint64_t)&v12);
    }
    else if (*(_DWORD *)v10 == 2)
    {
      v6 = (WTF::StringImpl *)WTF::StringImpl::destroy(v10, v9);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
    *((_QWORD *)this + 55) = 0;
    WTF::MonotonicTime::now(v6);
    WebCore::TimerBase::setNextFireTime((uint64_t)this + 416, v11 + 0.0);
    result = v13;
    v13 = 0;
    if (result)
    {
      v5 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result != 2)
        goto LABEL_14;
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
  }
  return result;
}

void WebCore::Editor::insertAttachment(uint64_t a1, const WTF::StringImpl **a2, uint64_t a3, WTF::StringImpl **a4, WTF::StringImpl **a5)
{
  uint64_t v10;
  uint64_t v11;
  const WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  void *v18;
  _BYTE v19[8];
  WTF::StringImpl *v20;
  char v21;

  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  *(_DWORD *)(v10 + 24) += 2;
  v11 = bmalloc::api::isoAllocate();
  v13 = v11;
  *(_OWORD *)(v11 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v11 + 24) = 0x101C00000002;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 40) = v10 + 96;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  ++*(_DWORD *)(v10 + 3324);
  *(_QWORD *)(v11 + 80) = 0;
  *(_QWORD *)(v11 + 88) = 0;
  v14 = WebCore::HTMLNames::attachmentTag;
  if (WebCore::HTMLNames::attachmentTag)
    ++*(_DWORD *)WebCore::HTMLNames::attachmentTag;
  *(_QWORD *)(v11 + 96) = v14;
  *(_QWORD *)(v11 + 104) = 0;
  *(_QWORD *)v11 = off_1E33B4248;
  *(_BYTE *)(v11 + 112) = 0;
  *(_OWORD *)(v11 + 136) = 0uLL;
  *(_OWORD *)(v11 + 152) = 0uLL;
  *(_OWORD *)(v11 + 168) = 0uLL;
  *(_OWORD *)(v11 + 184) = 0uLL;
  *(_OWORD *)(v11 + 200) = 0uLL;
  *(_OWORD *)(v11 + 216) = 0uLL;
  *(_OWORD *)(v11 + 232) = 0uLL;
  *(_OWORD *)(v11 + 120) = 0uLL;
  *(_OWORD *)(v11 + 248) = 0uLL;
  *(_OWORD *)(v11 + 264) = 0uLL;
  *(_BYTE *)(v11 + 280) = 1;
  if ((*(_QWORD *)(*(_QWORD *)(v10 + 680) + 704) & 0x100000000000) != 0)
  {
    *(_BYTE *)(v11 + 112) = 1;
    WebCore::Element::ensureUserAgentShadowRoot((WebCore::Element *)v11);
  }
  WebCore::HTMLAttachmentElement::setUniqueIdentifier((WTF **)v13, a2, v12);
  WebCore::HTMLAttachmentElement::updateAttributes((WebCore::Element *)v13, a3, a5, a4);
  v15 = bmalloc::api::isoAllocate();
  *(_OWORD *)(v15 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v15 + 24) = 0xB00400000002;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 40) = v10 + 96;
  *(_OWORD *)(v15 + 48) = 0u;
  *(_OWORD *)(v15 + 64) = 0u;
  ++*(_DWORD *)(v10 + 3324);
  *(_QWORD *)(v15 + 80) = 0;
  *(_QWORD *)(v15 + 88) = 0;
  *(_QWORD *)v15 = off_1E33A31A0;
  WebCore::ContainerNode::appendChild(v15, (WebCore::Node *)v13, (uint64_t)v19);
  if (v21)
  {
    v17 = v20;
    v20 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
  }
  WebCore::Editor::replaceSelectionWithFragment(a1, v15, 0, 0, 1, 0xEu, 0);
  if (*(_DWORD *)(v15 + 24) == 2)
  {
    if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v15, v18);
  }
  else
  {
    *(_DWORD *)(v15 + 24) -= 2;
  }
  if (*(_DWORD *)(v13 + 24) == 2)
  {
    if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v13, v18);
  }
  else
  {
    *(_DWORD *)(v13 + 24) -= 2;
  }
  if (*(_DWORD *)(v10 + 24) == 2)
  {
    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v10, v18);
  }
  else
  {
    *(_DWORD *)(v10 + 24) -= 2;
  }
}

void WebCore::Editor::handleAcceptedCandidate(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  WebCore::Document *v5;
  WebCore::Node *v6;
  int v7;
  WebCore::Node *v8;
  int v9;
  void *v10;
  int shouldInsertText;
  WebCore::Node *v12;
  WebCore::Node *v13;
  uint64_t v14;
  WebCore::Node *v15;
  _QWORD *v16;
  void *v17;
  WebCore::Node *v18;
  _DWORD *v19;
  int v20;
  const WebCore::VisiblePosition *v21;
  int v22;
  void *v23;
  WebCore::Node *v24;
  WebCore::Node *v25;
  uint64_t v26;
  uint64_t *v27;
  void *v28;
  WebCore::Node *v29;
  WebCore::Node *v30;
  WebCore::Node *v31;
  void *v32;
  WebCore::Node *v33;
  WebCore::Node *v34;
  int v35;
  char v36;
  char v37;
  WebCore::Node *v38;
  int v39;
  WebCore::Node *v40;
  int v41;
  char v42;
  WebCore::Node *v43;
  int v44;
  char v45;
  WebCore::Node *v46;
  int v47;
  char v48;
  int v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned __int8 **)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 3064);
  *(_BYTE *)(a1 + 474) = 1;
  WebCore::Editor::rangeForTextCheckingResult((WebCore::Editor *)a1, a2, (uint64_t)&v43);
  v5 = (WebCore::Document *)(a2 + 40);
  if (v48)
  {
    v6 = v43;
    *((_DWORD *)v43 + 6) += 2;
    v38 = v6;
    v7 = v44;
    v39 = v44;
    v8 = v46;
    *((_DWORD *)v46 + 6) += 2;
    v40 = v8;
    v9 = v47;
    v41 = v47;
    v42 = 1;
    shouldInsertText = WebCore::Editor::shouldInsertText(a1, (uint64_t)v5, (uint64_t)&v38, 0);
    if (v42)
    {
      v12 = v40;
      v40 = 0;
      if (v12)
      {
        if (*((_DWORD *)v12 + 6) == 2)
        {
          if ((*((_WORD *)v12 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v12, v10);
        }
        else
        {
          *((_DWORD *)v12 + 6) -= 2;
        }
      }
      v13 = v38;
      v38 = 0;
      if (v13)
      {
        if (*((_DWORD *)v13 + 6) == 2)
        {
          if ((*((_WORD *)v13 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v13, v10);
        }
        else
        {
          *((_DWORD *)v13 + 6) -= 2;
        }
      }
    }
    if (shouldInsertText)
    {
      v14 = WTF::fastMalloc((WTF *)0x148);
      v15 = *(WebCore::Node **)(*((_QWORD *)v6 + 5) + 8);
      *((_DWORD *)v15 + 6) += 2;
      v38 = v15;
      v16 = (_QWORD *)WebCore::EditCommand::EditCommand(v14, (uint64_t *)&v38, 17);
      v16[31] = 0;
      v16[32] = 0;
      *v16 = off_1E33A9870;
      v16[33] = 0;
      v16[34] = 0;
      v18 = v38;
      v38 = 0;
      if (v18)
      {
        if (*((_DWORD *)v18 + 6) == 2)
        {
          if ((*((_WORD *)v18 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v18, v17);
        }
        else
        {
          *((_DWORD *)v18 + 6) -= 2;
        }
      }
      *(_QWORD *)v14 = off_1E33AD948;
      *((_DWORD *)v6 + 6) += 2;
      *(_QWORD *)(v14 + 280) = v6;
      *(_DWORD *)(v14 + 288) = v7;
      *((_DWORD *)v8 + 6) += 2;
      *(_QWORD *)(v14 + 296) = v8;
      *(_DWORD *)(v14 + 304) = v9;
      *(_QWORD *)(v14 + 312) = 0;
      v19 = *(_DWORD **)v5;
      if (*(_QWORD *)v5)
        *v19 += 2;
      *(_QWORD *)(v14 + 320) = v19;
      WebCore::CompositeEditCommand::apply((WebCore::CompositeEditCommand *)v14);
      if (*(_DWORD *)(v14 + 8) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      else
        --*(_DWORD *)(v14 + 8);
    }
    if (v46)
    {
      if (*((_DWORD *)v46 + 6) == 2)
      {
        if ((*((_WORD *)v46 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v46, v10);
      }
      else
      {
        *((_DWORD *)v46 + 6) -= 2;
      }
    }
    if (v43)
    {
      if (*((_DWORD *)v43 + 6) == 2)
      {
        if ((*((_WORD *)v43 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v43, v10);
      }
      else
      {
        *((_DWORD *)v43 + 6) -= 2;
      }
    }
  }
  else
  {
    WebCore::EventHandler::handleTextInputEvent(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 528) + 8) + 640), v5, 0, 0);
  }
  if (v4[153] == 2)
  {
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v4 + 120), (uint64_t)&v34);
    v37 = 1;
  }
  else
  {
    v20 = v4[152];
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v4 + 120), (uint64_t)&v34);
    v37 = 1;
    if (!v20)
    {
      v31 = v34;
      if (v34)
      {
        *((_DWORD *)v34 + 6) += 2;
        v43 = v31;
        v44 = v35;
        v45 = v36;
        LOBYTE(v46) = 0;
        if (!WebCore::inSameLine((WebCore *)&v34, (const WebCore::VisiblePosition *)&v43, v21))
          v37 = 0;
        v33 = v43;
        v43 = 0;
        if (v33)
        {
          if (*((_DWORD *)v33 + 6) == 2)
          {
            if ((*((_WORD *)v33 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v33, v32);
          }
          else
          {
            *((_DWORD *)v33 + 6) -= 2;
          }
        }
      }
    }
  }
  if (*(_QWORD *)v5)
    v22 = *(_DWORD *)(*(_QWORD *)v5 + 4);
  else
    v22 = 0;
  WebCore::rangeExpandedByCharactersInDirectionAtWordBoundary((uint64_t)&v34, v22, 1, (uint64_t)&v38);
  v24 = v34;
  v34 = 0;
  if (v24)
  {
    if (*((_DWORD *)v24 + 6) == 2)
    {
      if ((*((_WORD *)v24 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v24, v23);
    }
    else
    {
      *((_DWORD *)v24 + 6) -= 2;
    }
  }
  if (v42)
  {
    v25 = *(WebCore::Node **)v5;
    if (*(_QWORD *)v5)
      *(_DWORD *)v25 += 2;
    v43 = v25;
    v49 = 0;
    v26 = *(_QWORD *)(*((_QWORD *)v38 + 5) + 8);
    *(_DWORD *)(v26 + 24) += 2;
    v27 = *(uint64_t **)(v26 + 1496);
    if (!v27)
      v27 = (uint64_t *)WebCore::Document::ensureMarkers((WebCore::Document *)v26);
    ++*(_DWORD *)v27;
    WebCore::DocumentMarkerController::addMarker(v27, (const WebCore::SimpleRange *)&v38, 0x2000, (uint64_t)&v43);
    if (!*(_DWORD *)v27)
    {
      __break(0xC471u);
      JUMPOUT(0x195AD8BC0);
    }
    --*(_DWORD *)v27;
    if (*(_DWORD *)(v26 + 24) == 2)
    {
      if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v26, v28);
    }
    else
    {
      *(_DWORD *)(v26 + 24) -= 2;
    }
    if (v49 != -1)
      ((void (*)(WebCore::Node **, WebCore::Node **))off_1E33AA370[v49])(&v34, &v43);
    if (v42)
    {
      v29 = v40;
      v40 = 0;
      if (v29)
      {
        if (*((_DWORD *)v29 + 6) == 2)
        {
          if ((*((_WORD *)v29 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v29, v28);
        }
        else
        {
          *((_DWORD *)v29 + 6) -= 2;
        }
      }
      v30 = v38;
      v38 = 0;
      if (v30)
      {
        if (*((_DWORD *)v30 + 6) == 2)
        {
          if ((*((_WORD *)v30 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v30, v28);
        }
        else
        {
          *((_DWORD *)v30 + 6) -= 2;
        }
      }
    }
  }
  *(_BYTE *)(a1 + 474) = 0;
}

void WebCore::Editor::toggleOverwriteModeEnabled(WebCore::Editor *this)
{
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v1 = *((unsigned __int8 *)this + 121) ^ 1;
  *((_BYTE *)this + 121) = v1;
  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 3064);
  *(_WORD *)(v2 + 256) = *(_WORD *)(v2 + 256) & 0xFFEF | (16 * v1);
  v3 = *(_QWORD *)(v2 + 32);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
  {
    *(_DWORD *)(v4 + 24) += 2;
    WebCore::Document::updateLayout(v4, 2u, 0);
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  else
  {
    WebCore::Document::updateLayout(0, 2u, 0);
  }
  WebCore::FrameSelection::updateAppearance((WebCore::FrameSelection *)v2);
}

uint64_t WTF::makeAtomString<WTF::String,WTF::ASCIILiteral>(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t result;
  WTF::StringImpl *v5;

  if (a2)
  {
    *(_DWORD *)a2 += 2;
    result = WTF::tryMakeAtomStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((uint64_t)a1, (uint64_t)a2, (int8x16_t *)" display: inline", 0x10u);
    if (*(_DWORD *)a2 == 2)
      result = WTF::StringImpl::destroy(a2, v5);
    else
      *(_DWORD *)a2 -= 2;
  }
  else
  {
    result = WTF::tryMakeAtomStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((uint64_t)a1, 0, (int8x16_t *)" display: inline", 0x10u);
  }
  if (!*a1)
    __break(0xC471u);
  return result;
}

uint64_t WebCore::internalCommand(WebCore *this, unint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unsigned __int16 *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unsigned __int16 *v17;
  int v18;
  int v19;
  unsigned __int8 *v20;
  char *v21;
  int v22;
  int v23;
  unsigned __int8 *v24;
  unsigned __int16 *v25;
  int v26;
  int v27;
  unsigned __int8 *v28;
  char *v29;
  int v30;
  int v31;
  uint64_t *v32;
  char **v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  char *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  unsigned int v39;
  char **v40;
  int v41;
  WTF::StringImpl **v42;
  int v43;
  WTF::StringImpl *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  unsigned __int8 *v50;
  unsigned __int16 *v51;
  unint64_t v52;
  unsigned __int16 *v53;
  unsigned __int8 *v54;
  int v55;
  int v56;
  unsigned __int16 *v57;
  unsigned __int8 *v58;
  int v59;
  int v60;
  char *v61;
  unsigned __int8 *v62;
  int v63;
  int v64;
  char *v65;
  unsigned __int8 *v66;
  int v67;
  int v68;
  WTF::StringImpl **v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  unint64_t v76;
  unsigned int v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79[2];

  if ((byte_1ECE8325A & 1) == 0)
  {
    v32 = (uint64_t *)WTF::fastMalloc((WTF *)8);
    *v32 = 0;
    v33 = &WebCore::createCommandMap(void)::commands;
    v34 = MEMORY[0x1E0CBF868];
    v35 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    while (1)
    {
      v36 = v33[1];
      if (v36)
      {
        a2 = (unint64_t)(v36 - 1);
        if (v36 == (char *)1)
        {
          *(_DWORD *)v35 += 2;
          v37 = v35;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v37 = v79[1];
        }
        v79[0] = v37;
      }
      else
      {
        v79[0] = 0;
      }
      v38 = *v32;
      if (*v32
        || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::EditorInternalCommand const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::EditorInternalCommand const*>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WebCore::EditorInternalCommand const*,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::EditorInternalCommand const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v32, 8u), (v38 = *v32) != 0))
      {
        v39 = *(_DWORD *)(v38 - 8);
      }
      else
      {
        v39 = 0;
      }
      v40 = v33 + 2;
      v41 = WTF::ASCIICaseInsensitiveHash::hash((WTF::ASCIICaseInsensitiveHash *)v79, (const WTF::String *)a2);
      v42 = 0;
      v43 = 0;
      v44 = v79[0];
      v45 = v39;
      while (1)
      {
        v46 = v41 & v45;
        v47 = *(_QWORD *)(v38 + 16 * v46);
        if (v47 == -1)
        {
          v42 = (WTF::StringImpl **)(v38 + 16 * v46);
          goto LABEL_61;
        }
        if (!v47)
        {
          v69 = (WTF::StringImpl **)(v38 + 16 * v46);
          if (v42)
          {
            *v42 = 0;
            v42[1] = 0;
            --*(_DWORD *)(*v32 - 16);
            v69 = v42;
          }
          v79[0] = 0;
          v70 = *v69;
          *v69 = v44;
          if (v70)
          {
            if (*(_DWORD *)v70 == 2)
              WTF::StringImpl::destroy(v70, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v70 -= 2;
          }
          v69[1] = (WTF::StringImpl *)v40;
          v71 = *v32;
          if (*v32)
            v72 = *(_DWORD *)(v71 - 12) + 1;
          else
            v72 = 1;
          *(_DWORD *)(v71 - 12) = v72;
          v73 = *v32;
          if (*v32)
            v74 = *(_DWORD *)(v73 - 12);
          else
            v74 = 0;
          v75 = (*(_DWORD *)(v73 - 16) + v74);
          v76 = *(unsigned int *)(v73 - 4);
          if (v76 > 0x400)
          {
            if (v76 > 2 * v75)
              goto LABEL_100;
LABEL_97:
            v77 = (_DWORD)v76 << (6 * *(_DWORD *)(v73 - 12) >= (2 * v76));
          }
          else
          {
            if (3 * v76 > 4 * v75)
              goto LABEL_100;
            if ((_DWORD)v76)
              goto LABEL_97;
            v77 = 8;
          }
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::EditorInternalCommand const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::EditorInternalCommand const*>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WebCore::EditorInternalCommand const*,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::EditorInternalCommand const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v32, v77);
          goto LABEL_100;
        }
        v48 = *(unsigned int *)(v47 + 4);
        if ((_DWORD)v48 == *((_DWORD *)v79[0] + 1))
          break;
LABEL_61:
        ++v43;
        v41 = v46 + v43;
      }
      v49 = *((_DWORD *)v79[0] + 4);
      v50 = *(unsigned __int8 **)(v47 + 8);
      v51 = (unsigned __int16 *)*((_QWORD *)v79[0] + 1);
      if ((*(_BYTE *)(v47 + 16) & 4) == 0)
        break;
      if ((v49 & 4) == 0)
      {
        if (!(_DWORD)v48)
          goto LABEL_110;
        if ((*v51 | (32 * (*v51 - 65 < 0x1A))) == *(unsigned __int8 *)(v34 + *v50))
        {
          v52 = 0;
          v57 = v51 + 1;
          v58 = v50 + 1;
          while (v48 - 1 != v52)
          {
            v59 = *(unsigned __int8 *)(v34 + v58[v52]);
            v60 = v57[v52];
            a2 = (v60 - 65) < 0x1A;
            ++v52;
            if ((v60 | (32 * (_DWORD)a2)) != v59)
              goto LABEL_80;
          }
          goto LABEL_110;
        }
        goto LABEL_82;
      }
      if (!(_DWORD)v48)
        goto LABEL_110;
      if (*(unsigned __int8 *)(v34 + *v50) != *(unsigned __int8 *)(v34 + *(unsigned __int8 *)v51))
        goto LABEL_82;
      v52 = 0;
      v65 = (char *)v51 + 1;
      v66 = v50 + 1;
      while (v48 - 1 != v52)
      {
        v67 = *(unsigned __int8 *)(v34 + v66[v52]);
        v68 = *(unsigned __int8 *)(v34 + v65[v52++]);
        if (v67 != v68)
        {
LABEL_80:
          v45 = v39;
          if (v52 < v48)
            goto LABEL_61;
          break;
        }
      }
LABEL_110:
      *(_QWORD *)(v38 + 16 * v46 + 8) = v40;
LABEL_100:
      v78 = v79[0];
      v79[0] = 0;
      if (v78)
      {
        if (*(_DWORD *)v78 == 2)
          WTF::StringImpl::destroy(v78, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v78 -= 2;
      }
      v33 += 9;
      {
        qword_1ECE83268 = (uint64_t)v32;
        byte_1ECE8325A = 1;
        goto LABEL_2;
      }
    }
    if ((v49 & 4) != 0)
    {
      if (!(_DWORD)v48)
        goto LABEL_110;
      if ((*(unsigned __int16 *)v50 | (32 * (*(unsigned __int16 *)v50 - 65 < 0x1A))) == *(unsigned __int8 *)(v34 + *(unsigned __int8 *)v51))
      {
        v52 = 0;
        v61 = (char *)v51 + 1;
        v62 = v50 + 2;
        while (v48 - 1 != v52)
        {
          v63 = *(unsigned __int16 *)&v62[2 * v52] | (32 * (*(unsigned __int16 *)&v62[2 * v52] - 65 < 0x1A));
          v64 = *(unsigned __int8 *)(v34 + v61[v52++]);
          if (v63 != v64)
            goto LABEL_80;
        }
        goto LABEL_110;
      }
    }
    else
    {
      if (!(_DWORD)v48)
        goto LABEL_110;
      if ((*(unsigned __int16 *)v50 | (32 * (*(unsigned __int16 *)v50 - 65 < 0x1A))) == (*v51 | (32 * (*v51 - 65 < 0x1A))))
      {
        v52 = 0;
        v53 = v51 + 1;
        v54 = v50 + 2;
        while (v48 - 1 != v52)
        {
          v55 = *(unsigned __int16 *)&v54[2 * v52] | (32 * (*(unsigned __int16 *)&v54[2 * v52] - 65 < 0x1A));
          v56 = v53[v52];
          a2 = (v56 - 65) < 0x1A;
          ++v52;
          if (v55 != (v56 | (32 * (_DWORD)a2)))
            goto LABEL_80;
        }
        goto LABEL_110;
      }
    }
LABEL_82:
    v45 = v39;
    goto LABEL_61;
  }
LABEL_2:
  if (!*(_QWORD *)this)
    return 0;
  if (!*(_DWORD *)(*(_QWORD *)this + 4))
    return 0;
  v4 = *(_QWORD *)qword_1ECE83268;
  if (!*(_QWORD *)qword_1ECE83268)
    return 0;
  v5 = *(_DWORD *)(v4 - 8);
  v6 = WTF::ASCIICaseInsensitiveHash::hash(this, (const WTF::String *)a2);
  v7 = 0;
  v8 = *(_QWORD *)this;
  while (1)
  {
    v9 = v6 & v5;
    v10 = *(_QWORD *)(v4 + 16 * v9);
    if (v10 == -1)
      goto LABEL_11;
    if (!v10)
      return 0;
    v11 = *(unsigned int *)(v10 + 4);
    if ((_DWORD)v11 != *(_DWORD *)(v8 + 4))
      goto LABEL_11;
    v12 = *(_DWORD *)(v8 + 16);
    v13 = *(unsigned __int16 **)(v10 + 8);
    v14 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v10 + 16) & 4) == 0)
    {
      if ((v12 & 4) != 0)
      {
        if (!(_DWORD)v11)
          return *(_QWORD *)(v4 + 16 * v9 + 8);
        if ((*v13 | (32 * (*v13 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v14))
        {
          v15 = 0;
          v24 = v14 + 1;
          v25 = v13 + 1;
          while (v11 - 1 != v15)
          {
            v26 = v25[v15] | (32 * (v25[v15] - 65 < 0x1A));
            v27 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v24[v15++]);
            if (v26 != v27)
              goto LABEL_38;
          }
          return *(_QWORD *)(v4 + 16 * v9 + 8);
        }
      }
      else
      {
        if (!(_DWORD)v11)
          return *(_QWORD *)(v4 + 16 * v9 + 8);
        if ((*v13 | (32 * (*v13 - 65 < 0x1A))) == (*(unsigned __int16 *)v14 | (32
                                                                                            * (*(unsigned __int16 *)v14
                                                                                             - 65 < 0x1A))))
        {
          v15 = 0;
          v16 = v14 + 2;
          v17 = v13 + 1;
          while (v11 - 1 != v15)
          {
            v18 = v17[v15] | (32 * (v17[v15] - 65 < 0x1A));
            v19 = *(unsigned __int16 *)&v16[2 * v15++];
            if (v18 != (v19 | (32 * ((v19 - 65) < 0x1A))))
              goto LABEL_38;
          }
          return *(_QWORD *)(v4 + 16 * v9 + 8);
        }
      }
      goto LABEL_11;
    }
    if ((v12 & 4) != 0)
      break;
    if (!(_DWORD)v11)
      return *(_QWORD *)(v4 + 16 * v9 + 8);
    if ((*(unsigned __int16 *)v14 | (32 * (*(unsigned __int16 *)v14 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)v13))
    {
      v15 = 0;
      v20 = v14 + 2;
      v21 = (char *)v13 + 1;
      while (v11 - 1 != v15)
      {
        v22 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v21[v15]);
        v23 = *(unsigned __int16 *)&v20[2 * v15++];
        if ((v23 | (32 * ((v23 - 65) < 0x1A))) != v22)
          goto LABEL_38;
      }
      return *(_QWORD *)(v4 + 16 * v9 + 8);
    }
LABEL_11:
    v6 = ++v7 + v9;
  }
  if (!(_DWORD)v11)
    return *(_QWORD *)(v4 + 16 * v9 + 8);
  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)v13) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                 + *v14))
    goto LABEL_11;
  v15 = 0;
  v28 = v14 + 1;
  v29 = (char *)v13 + 1;
  while (v11 - 1 != v15)
  {
    v30 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v29[v15]);
    v31 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v28[v15++]);
    if (v30 != v31)
    {
LABEL_38:
      if (v15 < v11)
        goto LABEL_11;
      return *(_QWORD *)(v4 + 16 * v9 + 8);
    }
  }
  return *(_QWORD *)(v4 + 16 * v9 + 8);
}

BOOL WebCore::Editor::commandIsSupportedFromMenuOrKeyBinding(WebCore::Editor *this, const WTF::String *a2)
{
  return WebCore::internalCommand(this, (unint64_t)a2) != 0;
}

_QWORD *WebCore::Editor::Command::Command(_QWORD *this)
{
  *this = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

uint64_t WebCore::Editor::Command::isEnabled(WebCore::Editor::Command *this, WebCore::Event *a2)
{
  uint64_t v4;

  if (!*(_QWORD *)this)
    return 0;
  if (*((unsigned __int8 *)this + 8) - 1 >= 2)
  {
    if (*((_BYTE *)this + 8))
      return 0;
  }
  else if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)this + 8))(*((_QWORD *)this + 3)))
  {
    return 0;
  }
  v4 = *((_QWORD *)this + 3);
  if (v4)
    return (*(uint64_t (**)(uint64_t, WebCore::Event *, _QWORD))(*(_QWORD *)this + 16))(v4, a2, *((unsigned __int8 *)this + 8));
  return 0;
}

uint64_t WebCore::Editor::Command::allowExecutionWhenDisabled(WebCore::Editor::Command *this)
{
  uint64_t v2;

  if (!*(_QWORD *)this)
    return 0;
  if (*((unsigned __int8 *)this + 8) - 1 >= 2)
  {
    if (*((_BYTE *)this + 8))
      return 0;
  }
  else if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)this + 8))(*((_QWORD *)this + 3)))
  {
    return 0;
  }
  v2 = *((_QWORD *)this + 3);
  if (v2)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)this + 48))(v2, *((unsigned __int8 *)this + 8));
  return 0;
}

uint64_t WebCore::Editor::Command::execute(WebCore::Editor::Command *this, WebCore::Event *a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v6;

  v6 = 0;
  v3 = WebCore::Editor::Command::execute(this, (const WTF::String *)&v6, a2);
  v4 = v6;
  v6 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return v3;
}

uint64_t WebCore::Editor::Command::isSupported(WebCore::Editor::Command *this)
{
  int v1;

  if (!*(_QWORD *)this)
    return 0;
  v1 = *((unsigned __int8 *)this + 8);
  if ((v1 - 1) >= 2)
    return v1 == 0;
  else
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)this + 8))(*((_QWORD *)this + 3));
}

uint64_t WebCore::Editor::Command::state(WebCore::Editor::Command *this, WebCore::Event *a2)
{
  uint64_t v4;

  if (!*(_QWORD *)this)
    return 0;
  if (*((unsigned __int8 *)this + 8) - 1 >= 2)
  {
    if (*((_BYTE *)this + 8))
      return 0;
  }
  else if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)this + 8))(*((_QWORD *)this + 3)))
  {
    return 0;
  }
  v4 = *((_QWORD *)this + 3);
  if (v4)
    return (*(uint64_t (**)(uint64_t, WebCore::Event *))(*(_QWORD *)this + 24))(v4, a2);
  return 0;
}

void WebCore::valueNull(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::stateNone(WebCore *this, WebCore::LocalFrame *a2, WebCore::Event *a3)
{
  return 0;
}

BOOL WebCore::Editor::Command::isTextInsertion(WebCore::Editor::Command *this)
{
  return *(_QWORD *)this && *(_BYTE *)(*(_QWORD *)this + 40) != 0;
}

__n128 WebCore::FontChanges::FontChanges(uint64_t a1, uint64_t *a2, uint64_t *a3, _OWORD *a4, __n128 *a5, _WORD *a6, _WORD *a7)
{
  uint64_t v7;
  uint64_t v8;
  __n128 result;

  v7 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v7;
  v8 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 8) = v8;
  *(_OWORD *)(a1 + 16) = *a4;
  result = *a5;
  *(__n128 *)(a1 + 32) = *a5;
  *(_WORD *)(a1 + 48) = *a6;
  *(_WORD *)(a1 + 50) = *a7;
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  __n128 result;

  v7 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v7;
  v8 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 8) = v8;
  *(_OWORD *)(a1 + 16) = *a4;
  result = *a5;
  *(__n128 *)(a1 + 32) = *a5;
  *(_WORD *)(a1 + 48) = *a6;
  *(_WORD *)(a1 + 50) = *a7;
  return result;
}

WebCore::EditingStyle *WebCore::FontChanges::createEditingStyle@<X0>(WebCore::FontChanges *this@<X0>, WebCore::EditingStyle **a2@<X8>)
{
  uint64_t v3;
  WebCore::EditingStyle *v4;
  WebCore::EditingStyle *result;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD **v9;
  _DWORD *v10;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  WebCore::FontChanges::createStyleProperties((WebCore::FontChanges *)&v14, (uint64_t)this);
  v3 = v14;
  v4 = (WebCore::EditingStyle *)WTF::fastMalloc((WTF *)0x18);
  result = WebCore::EditingStyle::EditingStyle(v4, (const WebCore::StyleProperties *)v3);
  *a2 = result;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v8 = 16 * v7;
        v9 = (_DWORD **)(*(_QWORD *)(v3 + 16) + 8);
        do
        {
          v10 = *v9;
          *v9 = 0;
          if (v10)
          {
            if (*v10 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, v6);
            else
              *v10 -= 2;
          }
          v9 += 2;
          v8 -= 16;
        }
        while (v8);
      }
      v11 = *(WTF **)(v3 + 16);
      if ((WTF *)(v3 + 32) != v11 && v11 != 0)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        WTF::fastFree(v11, v6);
      }
      v13 = *(_QWORD *)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      return (WebCore::EditingStyle *)WTF::fastFree((WTF *)v3, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return result;
}

WebCore::MutableStyleProperties *WebCore::FontChanges::createStyleProperties(WebCore::FontChanges *this, uint64_t a2)
{
  WebCore::MutableStyleProperties *result;
  WebCore::MutableStyleProperties *v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  _DWORD *v10;
  unsigned int v11;
  unsigned int v12;
  double v13;
  uint64_t v15;
  char v16;
  int *v17;
  int v18;
  WTF::StringImpl *v19;
  double v20;
  uint64_t v22;
  char v23;
  int *v24;
  int v25;
  WTF::StringImpl *v26;
  _DWORD *v27;
  _DWORD *v28;
  WTF::StringImpl *v29;

  result = (WebCore::MutableStyleProperties *)WTF::fastMalloc((WTF *)0x60);
  v5 = result;
  *(_QWORD *)result = 0x900000001;
  *((_QWORD *)result + 1) = 0;
  *((_QWORD *)result + 2) = (char *)result + 32;
  *((_QWORD *)result + 3) = 4;
  *(_QWORD *)this = result;
  if (*(_QWORD *)(a2 + 8))
  {
    result = *(WebCore::MutableStyleProperties **)WebCore::FontChanges::platformFontFamilyNameForCSS((WebCore::FontChanges *)a2);
    if (result)
    {
      if ((*((_BYTE *)result + 16) & 0x10) != 0)
      {
        *(_DWORD *)result += 2;
        v29 = result;
      }
      else
      {
        result = (WebCore::MutableStyleProperties *)WTF::AtomStringImpl::addSlowCase(result, v6);
        if (!v29)
          goto LABEL_15;
      }
      {
        WebCore::CSSValuePool::singleton(void)::pool = 0;
        unk_1ECE88B90 = 0;
        qword_1ECE88B98 = 0;
      }
      WebCore::CSSValuePool::createFontFamilyValue((WebCore::CSSValuePool *)&WebCore::CSSValuePool::singleton(void)::pool, &v29, &v27);
      v7 = v27;
      v27 = 0;
      v28 = v7;
      WebCore::MutableStyleProperties::setProperty(v5, 8, &v28, 0);
      v9 = v28;
      v28 = 0;
      if (v9)
      {
        if (*v9 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v8);
        else
          *v9 -= 2;
      }
      v10 = v27;
      v27 = 0;
      if (v10)
      {
        if (*v10 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, v8);
        else
          *v10 -= 2;
      }
      result = v29;
      v29 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WebCore::MutableStyleProperties *)WTF::StringImpl::destroy(result, v8);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
LABEL_15:
  if (*(_BYTE *)(a2 + 51))
  {
    if (*(_BYTE *)(a2 + 50))
      v11 = 47;
    else
      v11 = 90;
    result = (WebCore::MutableStyleProperties *)WebCore::MutableStyleProperties::setProperty(v5, 16, v11, 0);
  }
  if (*(_BYTE *)(a2 + 49))
  {
    if (*(_BYTE *)(a2 + 48))
      v12 = 91;
    else
      v12 = 90;
    result = (WebCore::MutableStyleProperties *)WebCore::MutableStyleProperties::setProperty(v5, 28, v12, 0);
  }
  if (*(_BYTE *)(a2 + 24))
  {
    v13 = *(double *)(a2 + 16);
    if ((int)v13 <= 0xFF && *(_QWORD *)(a2 + 16) == COERCE__INT64((double)(int)v13))
    {
      v17 = &WebCore::staticCSSValuePool[4 * (int)v13];
      v18 = v17[16];
      v15 = (uint64_t)(v17 + 16);
      *(_DWORD *)v15 = v18 + 2;
    }
    else
    {
      v15 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v15 = 2;
      v16 = *(_BYTE *)(v15 + 6);
      *(_WORD *)(v15 + 4) = 6;
      *(_BYTE *)(v15 + 6) = v16 & 0xFC;
      *(double *)(v15 + 8) = v13;
    }
    v29 = (WTF::StringImpl *)v15;
    WebCore::MutableStyleProperties::setProperty(v5, 13, (_DWORD **)&v29, 0);
    result = v29;
    v29 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WebCore::MutableStyleProperties *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v19);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (*(_BYTE *)(a2 + 40))
  {
    v20 = *(double *)(a2 + 32);
    if ((int)v20 <= 0xFF && *(_QWORD *)(a2 + 32) == COERCE__INT64((double)(int)v20))
    {
      v24 = &WebCore::staticCSSValuePool[4 * (int)v20];
      v25 = v24[16];
      v22 = (uint64_t)(v24 + 16);
      *(_DWORD *)v22 = v25 + 2;
    }
    else
    {
      v22 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v22 = 2;
      v23 = *(_BYTE *)(v22 + 6);
      *(_WORD *)(v22 + 4) = 6;
      *(_BYTE *)(v22 + 6) = v23 & 0xFC;
      *(double *)(v22 + 8) = v20;
    }
    v29 = (WTF::StringImpl *)v22;
    WebCore::MutableStyleProperties::setProperty(v5, 320, (_DWORD **)&v29, 0);
    result = v29;
    v29 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WebCore::MutableStyleProperties *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v26);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

__n128 WebCore::FontAttributeChanges::FontAttributeChanges(uint64_t a1, _WORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, _WORD *a6, _WORD *a7, __n128 *a8)
{
  unint64_t v8;
  uint64_t v9;
  __n128 result;
  __n128 v11;

  *(_WORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  if (*(_BYTE *)(a3 + 8))
  {
    *(_QWORD *)(a1 + 8) = 0;
    if (*(_QWORD *)a3)
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a3;
      *(_QWORD *)a3 = 0;
    }
    *(_BYTE *)(a1 + 16) = 1;
  }
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  if (*(_BYTE *)(a4 + 8))
  {
    *(_QWORD *)(a1 + 24) = 0;
    if (*(_QWORD *)a4)
    {
      *(_QWORD *)(a1 + 24) = *(_QWORD *)a4;
      *(_QWORD *)a4 = 0;
    }
    *(_BYTE *)(a1 + 32) = 1;
  }
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  if (*(_BYTE *)(a5 + 24))
  {
    *(_QWORD *)(a1 + 40) = 0;
    if (*(_QWORD *)a5)
    {
      *(_QWORD *)(a1 + 40) = *(_QWORD *)a5;
      *(_QWORD *)a5 = 0;
    }
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a5 + 8);
    *(_BYTE *)(a1 + 64) = 1;
  }
  *(_WORD *)(a1 + 72) = *a6;
  *(_WORD *)(a1 + 74) = *a7;
  v8 = a8->n128_u64[0];
  a8->n128_u64[0] = 0;
  *(_QWORD *)(a1 + 80) = v8;
  v9 = a8->n128_i64[1];
  a8->n128_u64[1] = 0;
  *(_QWORD *)(a1 + 88) = v9;
  result = a8[1];
  v11 = a8[2];
  *(_DWORD *)(a1 + 128) = a8[3].n128_u32[0];
  *(__n128 *)(a1 + 96) = result;
  *(__n128 *)(a1 + 112) = v11;
  return result;
}

{
  unint64_t v8;
  uint64_t v9;
  __n128 result;
  __n128 v11;

  *(_WORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  if (*(_BYTE *)(a3 + 8))
  {
    *(_QWORD *)(a1 + 8) = 0;
    if (*(_QWORD *)a3)
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a3;
      *(_QWORD *)a3 = 0;
    }
    *(_BYTE *)(a1 + 16) = 1;
  }
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  if (*(_BYTE *)(a4 + 8))
  {
    *(_QWORD *)(a1 + 24) = 0;
    if (*(_QWORD *)a4)
    {
      *(_QWORD *)(a1 + 24) = *(_QWORD *)a4;
      *(_QWORD *)a4 = 0;
    }
    *(_BYTE *)(a1 + 32) = 1;
  }
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  if (*(_BYTE *)(a5 + 24))
  {
    *(_QWORD *)(a1 + 40) = 0;
    if (*(_QWORD *)a5)
    {
      *(_QWORD *)(a1 + 40) = *(_QWORD *)a5;
      *(_QWORD *)a5 = 0;
    }
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a5 + 8);
    *(_BYTE *)(a1 + 64) = 1;
  }
  *(_WORD *)(a1 + 72) = *a6;
  *(_WORD *)(a1 + 74) = *a7;
  v8 = a8->n128_u64[0];
  a8->n128_u64[0] = 0;
  *(_QWORD *)(a1 + 80) = v8;
  v9 = a8->n128_i64[1];
  a8->n128_u64[1] = 0;
  *(_QWORD *)(a1 + 88) = v9;
  result = a8[1];
  v11 = a8[2];
  *(_DWORD *)(a1 + 128) = a8[3].n128_u32[0];
  *(__n128 *)(a1 + 96) = result;
  *(__n128 *)(a1 + 112) = v11;
  return result;
}

uint64_t WebCore::FontAttributeChanges::editAction(WebCore::FontAttributeChanges *this)
{
  uint64_t v2;

  if (*((_BYTE *)this + 1)
    || *((_BYTE *)this + 16)
    || *((_BYTE *)this + 64)
    || *((_BYTE *)this + 73)
    || *((_BYTE *)this + 75))
  {
    return 4;
  }
  v2 = *((_QWORD *)this + 10);
  if (*((_BYTE *)this + 32))
  {
    if (!v2
      && !*((_QWORD *)this + 11)
      && !*((_BYTE *)this + 104)
      && !*((_BYTE *)this + 120)
      && !*((_BYTE *)this + 129)
      && !*((_BYTE *)this + 131))
    {
      return 32;
    }
    return 4;
  }
  if (!v2
    && !*((_QWORD *)this + 11)
    && !*((_BYTE *)this + 104)
    && !*((_BYTE *)this + 120)
    && !*((_BYTE *)this + 129)
    && !*((_BYTE *)this + 131))
  {
    return 4;
  }
  return 33;
}

WebCore::EditingStyle *WebCore::FontAttributeChanges::createEditingStyle@<X0>(WebCore::FontAttributeChanges *this@<X0>, WebCore::EditingStyle **a2@<X8>)
{
  WebCore::MutableStyleProperties *v4;
  int *v5;
  WTF::StringImpl *v6;
  int *v7;
  int *v8;
  WebCore::MutableStyleProperties *v9;
  int *v10;
  WTF::StringImpl *v11;
  int *v12;
  int *v13;
  float v14;
  float v15;
  float v16;
  double *v17;
  float v18;
  double v19;
  uint64_t v21;
  char v22;
  int *v23;
  int v24;
  float v25;
  double v26;
  uint64_t v28;
  char v29;
  int *v30;
  int v31;
  double v32;
  unsigned int v33;
  uint64_t v35;
  char v36;
  int *v37;
  int v38;
  int *v39;
  uint64_t v40;
  int v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  int v44;
  int *v45;
  WTF::StringImpl *v46;
  int *v47;
  int v48;
  WebCore::MutableStyleProperties *v49;
  WebCore::MutableStyleProperties *v50;
  unsigned int v51;
  WebCore::EditingStyle *v52;
  WebCore::EditingStyle *result;
  WTF::StringImpl *v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD **v59;
  _DWORD *v60;
  WTF *v61;
  uint64_t v63;
  int *v64;
  WebCore::MutableStyleProperties *v65;
  int *v66;

  WebCore::FontChanges::createStyleProperties((WebCore::FontChanges *)&v65, (uint64_t)this + 80);
  {
    WebCore::CSSValuePool::singleton(void)::pool = 0;
    unk_1ECE88B90 = 0;
    qword_1ECE88B98 = 0;
  }
  if (*((_BYTE *)this + 16))
  {
    v4 = v65;
    WebCore::CSSValuePool::createColorValue((uint64_t)&WebCore::CSSValuePool::singleton(void)::pool, (WebCore::FontAttributeChanges *)((char *)this + 8), &v64);
    v5 = v64;
    v64 = 0;
    v66 = v5;
    WebCore::MutableStyleProperties::setProperty(v4, 61, &v66, 0);
    v7 = v66;
    v66 = 0;
    if (v7)
    {
      if (*v7 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, v6);
      else
        *v7 -= 2;
    }
    v8 = v64;
    v64 = 0;
    if (v8)
    {
      if (*v8 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, v6);
      else
        *v8 -= 2;
    }
  }
  if (*((_BYTE *)this + 32))
  {
    v9 = v65;
    WebCore::CSSValuePool::createColorValue((uint64_t)&WebCore::CSSValuePool::singleton(void)::pool, (WebCore::FontAttributeChanges *)((char *)this + 24), &v64);
    v10 = v64;
    v64 = 0;
    v66 = v10;
    WebCore::MutableStyleProperties::setProperty(v9, 5, &v66, 0);
    v12 = v66;
    v66 = 0;
    if (v12)
    {
      if (*v12 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v11);
      else
        *v12 -= 2;
    }
    v13 = v64;
    v64 = 0;
    if (v13)
    {
      if (*v13 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, v11);
      else
        *v13 -= 2;
    }
  }
  if (!*((_BYTE *)this + 64))
    goto LABEL_50;
  v14 = *((float *)this + 12);
  if (v14 != 0.0)
  {
    v18 = *((float *)this + 12);
    if (v14 < 0.0)
      v18 = -v14;
    if (v18 >= 0.00000011921)
    {
      v17 = (double *)((char *)this + 56);
LABEL_25:
      v19 = v14;
      if ((int)v14 <= 0xFF && *(_QWORD *)&v19 == COERCE__INT64((double)(int)v14))
      {
        v23 = &WebCore::staticCSSValuePool[4 * (int)v14];
        v24 = v23[16];
        v21 = (uint64_t)(v23 + 16);
        *(_DWORD *)v21 = v24 + 2;
      }
      else
      {
        v21 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v21 = 2;
        v22 = *(_BYTE *)(v21 + 6);
        *(_WORD *)(v21 + 4) = 6;
        *(_BYTE *)(v21 + 6) = v22 & 0xFC;
        *(double *)(v21 + 8) = v19;
      }
      v25 = *((float *)this + 13);
      v26 = v25;
      if ((int)v25 <= 0xFF && *(_QWORD *)&v26 == COERCE__INT64((double)(int)v25))
      {
        v30 = &WebCore::staticCSSValuePool[4 * (int)v25];
        v31 = v30[16];
        v28 = (uint64_t)(v30 + 16);
        *(_DWORD *)v28 = v31 + 2;
      }
      else
      {
        v28 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v28 = 2;
        v29 = *(_BYTE *)(v28 + 6);
        *(_WORD *)(v28 + 4) = 6;
        *(_BYTE *)(v28 + 6) = v29 & 0xFC;
        *(double *)(v28 + 8) = v26;
      }
      v32 = *v17;
      v33 = (int)*v17;
      if (v33 <= 0xFF && *(_QWORD *)v17 == COERCE__INT64((double)v33))
      {
        v37 = &WebCore::staticCSSValuePool[4 * v33];
        v38 = v37[16];
        v35 = (uint64_t)(v37 + 16);
        *(_DWORD *)v35 = v38 + 2;
      }
      else
      {
        v35 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v35 = 2;
        v36 = *(_BYTE *)(v35 + 6);
        *(_WORD *)(v35 + 4) = 6;
        *(_BYTE *)(v35 + 6) = v36 & 0xFC;
        *(double *)(v35 + 8) = v32;
      }
      {
        WebCore::CSSValuePool::singleton(void)::pool = 0;
        unk_1ECE88B90 = 0;
        qword_1ECE88B98 = 0;
      }
      WebCore::CSSValuePool::createColorValue((uint64_t)&WebCore::CSSValuePool::singleton(void)::pool, (WebCore::FontAttributeChanges *)((char *)this + 40), &v66);
      v39 = v66;
      v66 = 0;
      v40 = WTF::fastCompactMalloc((WTF *)0x38);
      *(_DWORD *)v40 = 2;
      v41 = (*(unsigned __int8 *)(v40 + 6) << 16) & 0xFC0000;
      *(_WORD *)(v40 + 4) = -22528;
      *(_BYTE *)(v40 + 6) = (v41 | 0x10000u) >> 16;
      *(_QWORD *)(v40 + 8) = v21;
      *(_QWORD *)(v40 + 16) = v28;
      *(_QWORD *)(v40 + 24) = v35;
      *(_QWORD *)(v40 + 32) = 0;
      *(_QWORD *)(v40 + 40) = 0;
      *(_QWORD *)(v40 + 48) = v39;
      v43 = WTF::fastCompactMalloc((WTF *)0x38);
      *(_DWORD *)v43 = 2;
      v44 = (*(unsigned __int8 *)(v43 + 6) << 16) & 0xFC0000;
      *(_DWORD *)(v43 + 8) = 1;
      *(_WORD *)(v43 + 4) = -9728;
      *(_BYTE *)(v43 + 6) = (v44 | 0x10000u) >> 16;
      *(_QWORD *)(v43 + 16) = v40;
      v45 = v66;
      v66 = 0;
      if (v45)
      {
        if (*v45 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v45, v42);
        else
          *v45 -= 2;
      }
      v66 = (int *)v43;
      WebCore::MutableStyleProperties::setProperty(v65, 266, &v66, 0);
      v47 = v66;
      v66 = 0;
      if (v47)
      {
        if (*v47 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v47, v46);
        else
          *v47 -= 2;
      }
      goto LABEL_50;
    }
  }
  v15 = *((float *)this + 13);
  v16 = 0.0;
  if (v15 != 0.0)
  {
    if (v15 < 0.0)
      v16 = -v15;
    else
      v16 = *((float *)this + 13);
  }
  v17 = (double *)((char *)this + 56);
  if (v16 >= 0.00000011921 || *((double *)this + 7) != 0.0)
    goto LABEL_25;
  WebCore::MutableStyleProperties::setProperty(v65, 266, 6u, 0);
LABEL_50:
  if (!*((_BYTE *)this + 1))
    goto LABEL_55;
  v48 = *(unsigned __int8 *)this;
  if (v48 == 2)
  {
    v49 = v65;
    v50 = v65;
    v51 = 250;
    goto LABEL_58;
  }
  if (v48 == 1)
  {
    v49 = v65;
    v50 = v65;
    v51 = 248;
    goto LABEL_58;
  }
  if (*(_BYTE *)this)
  {
LABEL_55:
    v49 = v65;
    goto LABEL_59;
  }
  v49 = v65;
  v50 = v65;
  v51 = 251;
LABEL_58:
  WebCore::MutableStyleProperties::setProperty(v50, 288, v51, 0);
LABEL_59:
  v52 = (WebCore::EditingStyle *)WTF::fastMalloc((WTF *)0x18);
  result = WebCore::EditingStyle::EditingStyle(v52, v49);
  *a2 = result;
  if (*((_BYTE *)this + 73))
  {
    if (*((_BYTE *)this + 72))
      v55 = 8;
    else
      v55 = 16;
    *((_BYTE *)result + 16) = *((_BYTE *)result + 16) & 0xE7 | v55;
  }
  if (*((_BYTE *)this + 75))
  {
    if (*((_BYTE *)this + 74))
      v56 = 2;
    else
      v56 = 4;
    *((_BYTE *)result + 16) = *((_BYTE *)result + 16) & 0xF9 | v56;
  }
  if (v49)
  {
    if (*(_DWORD *)v49 == 1)
    {
      v57 = *((unsigned int *)v49 + 7);
      if ((_DWORD)v57)
      {
        v58 = 16 * v57;
        v59 = (_DWORD **)(*((_QWORD *)v49 + 2) + 8);
        do
        {
          v60 = *v59;
          *v59 = 0;
          if (v60)
          {
            if (*v60 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v60, v54);
            else
              *v60 -= 2;
          }
          v59 += 2;
          v58 -= 16;
        }
        while (v58);
      }
      v61 = (WTF *)*((_QWORD *)v49 + 2);
      if ((WebCore::MutableStyleProperties *)((char *)v49 + 32) != v61 && v61 != 0)
      {
        *((_QWORD *)v49 + 2) = 0;
        *((_DWORD *)v49 + 6) = 0;
        WTF::fastFree(v61, v54);
      }
      v63 = *((_QWORD *)v49 + 1);
      *((_QWORD *)v49 + 1) = 0;
      if (v63)
        (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
      return (WebCore::EditingStyle *)WTF::fastFree(v49, v54);
    }
    else
    {
      --*(_DWORD *)v49;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::serializationForCSS@<X0>(WTF::StringImpl *this@<X0>, _QWORD *a2@<X8>)
{
  float v4;
  float v5;
  float v6;
  double *v7;
  unint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  _BYTE *v13;
  char *v14;
  int8x16_t *p_src;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  size_t v25;
  float v26;
  __int128 v27;
  char *v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  char *v32;
  char *v33;
  char *v34;
  __int16 v35;
  uint64_t v36;
  char *v37;
  char *v38;
  int8x16_t *v39;
  char *v40;
  __int128 v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  char *v45;
  char *v46;
  char *v47;
  __int16 v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  _WORD *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  char *v60;
  char *v61;
  int8x16_t *v62;
  _BYTE *v63;
  _BYTE *v64;
  uint64_t v65;
  char *v66;
  __int128 v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  char *v71;
  char *v72;
  char *v73;
  __int16 v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  _BYTE *v77;
  _BYTE *v78;
  unsigned __int128 v79;
  char v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  int v84;
  char v85;
  char v86[16];
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  char __s[16];
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  char v102[16];
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 __src;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  size_t __n[2];
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  int8x16x2_t v127;
  int8x16x2_t v128;
  int8x16x2_t v129;
  int8x16x2_t v130;
  int8x16x2_t v131;
  int8x16x2_t v132;
  int8x16x2_t v133;
  int8x16x2_t v134;
  int8x16x2_t v135;

  v126 = *MEMORY[0x1E0C80C00];
  v4 = *((float *)this + 2);
  if (v4 == 0.0)
    goto LABEL_2;
  v26 = *((float *)this + 2);
  if (v4 < 0.0)
    v26 = -v4;
  if (v26 < 0.00000011921)
  {
LABEL_2:
    v5 = *((float *)this + 3);
    v6 = 0.0;
    if (v5 != 0.0)
    {
      if (v5 < 0.0)
        v6 = -v5;
      else
        v6 = *((float *)this + 3);
    }
    v7 = (double *)((char *)this + 16);
    if (v6 < 0.00000011921 && *((double *)this + 2) == 0.0)
      goto LABEL_6;
  }
  else
  {
    v7 = (double *)((char *)this + 16);
  }
  v8 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 0x4000000000000) == 0)
  {
LABEL_6:
    v9 = WebCore::noneAtomData;
    if (WebCore::noneAtomData)
      *(_DWORD *)WebCore::noneAtomData += 2;
    *a2 = v9;
    return this;
  }
  v82 = 0;
  v83 = 0;
  v84 = 0;
  v85 = 1;
  WebCore::Color::callOnUnderlyingType<WebCore::serializationForCSS(WebCore::Color const&)::$_0>(&v81, v8, (uint64_t *)this);
  WTF::numberToString();
  HIDWORD(v101) = strlen(__s);
  WTF::numberToString();
  HIDWORD(v93) = strlen(v86);
  v10 = v81;
  v11 = v83;
  if ((v83 || (v11 = v82) != 0) && (*((_BYTE *)v11 + 16) & 4) == 0 || v81 && (*((_BYTE *)v81 + 16) & 4) == 0)
  {
    v12 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v82);
    if (v12)
    {
      v114 = v98;
      v115 = v99;
      v116 = v100;
      *(_OWORD *)__n = v101;
      __src = *(_OWORD *)__s;
      v111 = v95;
      v112 = v96;
      v113 = v97;
      v104 = v88;
      v105 = v89;
      *(_OWORD *)v102 = *(_OWORD *)v86;
      v103 = v87;
      v108 = v92;
      v109 = v93;
      v14 = (char *)(v12 + 2 * HIDWORD(v101));
      v106 = v90;
      v107 = v91;
      if (HIDWORD(v101) >= 0x40)
      {
        v16 = (char *)(v12 + 2 * (HIDWORD(v101) & 0xFFFFFFC0));
        p_src = (int8x16_t *)&__src;
        v27 = 0uLL;
        v28 = (char *)v12;
        do
        {
          v127.val[0] = *p_src;
          v29 = p_src[1];
          v130.val[0] = p_src[2];
          v30 = p_src[3];
          p_src += 4;
          v31 = v30;
          v130.val[1] = 0uLL;
          v133.val[0] = v29;
          v127.val[1] = 0uLL;
          v32 = v28;
          vst2q_s8(v32, v127);
          v32 += 32;
          v133.val[1] = 0uLL;
          vst2q_s8(v32, v133);
          v33 = v28 + 64;
          vst2q_s8(v33, v130);
          v34 = v28 + 96;
          vst2q_s8(v34, *(int8x16x2_t *)(&v27 - 1));
          v28 += 128;
        }
        while (v28 != v16);
      }
      else
      {
        p_src = (int8x16_t *)&__src;
        v16 = (char *)v12;
      }
      while (v16 != v14)
      {
        v35 = p_src->u8[0];
        p_src = (int8x16_t *)((char *)p_src + 1);
        *(_WORD *)v16 = v35;
        v16 += 2;
      }
      v36 = v12 + 2 * HIDWORD(__n[1]);
      *(_DWORD *)v36 = 7864432;
      *(_WORD *)(v36 + 4) = 32;
      v37 = (char *)(v36 + 6);
      v122 = v106;
      v123 = v107;
      v124 = v108;
      v125 = v109;
      v118 = *(_OWORD *)v102;
      v119 = v103;
      v120 = v104;
      v121 = v105;
      v38 = &v37[2 * HIDWORD(v109)];
      if (HIDWORD(v109) >= 0x40)
      {
        v40 = &v37[2 * (HIDWORD(v109) & 0xFFFFFFC0)];
        v39 = (int8x16_t *)&v118;
        v41 = 0uLL;
        do
        {
          v128.val[0] = *v39;
          v42 = v39[1];
          v131.val[0] = v39[2];
          v43 = v39[3];
          v39 += 4;
          v44 = v43;
          v131.val[1] = 0uLL;
          v134.val[0] = v42;
          v128.val[1] = 0uLL;
          v45 = v37;
          vst2q_s8(v45, v128);
          v45 += 32;
          v134.val[1] = 0uLL;
          vst2q_s8(v45, v134);
          v46 = v37 + 64;
          vst2q_s8(v46, v131);
          v47 = v37 + 96;
          vst2q_s8(v47, *(int8x16x2_t *)(&v41 - 1));
          v37 += 128;
        }
        while (v37 != v40);
        v37 = v40;
      }
      else
      {
        v39 = (int8x16_t *)&v118;
      }
      while (v37 != v38)
      {
        v48 = v39->u8[0];
        v39 = (int8x16_t *)((char *)v39 + 1);
        *(_WORD *)v37 = v48;
        v37 += 2;
      }
      *(_DWORD *)v38 = 7864432;
      *((_WORD *)v38 + 2) = 32;
      WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>>(v38 + 6, (uint64_t)v10);
    }
  }
  else
  {
    v17 = (_BYTE *)MEMORY[0x19AEA4824](&v82);
    if (v17)
    {
      v18 = v17;
      v114 = v98;
      v115 = v99;
      v116 = v100;
      *(_OWORD *)__n = v101;
      __src = *(_OWORD *)__s;
      v111 = v95;
      v112 = v96;
      v113 = v97;
      v104 = v88;
      v105 = v89;
      *(_OWORD *)v102 = *(_OWORD *)v86;
      v103 = v87;
      v108 = v92;
      v109 = v93;
      v106 = v90;
      v107 = v91;
      v19 = HIDWORD(v101);
      if (HIDWORD(v101))
      {
        if (HIDWORD(v101) == 1)
          *v17 = __src;
        else
          memcpy(v17, &__src, HIDWORD(v101));
      }
      v20 = &v18[v19];
      v20[2] = 32;
      *(_WORD *)v20 = 30832;
      v21 = &v18[v19 + 3];
      v122 = v106;
      v123 = v107;
      v124 = v108;
      v125 = v109;
      v118 = *(_OWORD *)v102;
      v119 = v103;
      v120 = v104;
      v121 = v105;
      v22 = HIDWORD(v109);
      if (HIDWORD(v109))
      {
        if (HIDWORD(v109) == 1)
          *v21 = v118;
        else
          memcpy(v21, &v118, HIDWORD(v125));
      }
      v23 = &v21[v22];
      v23[2] = 32;
      *(_WORD *)v23 = 30832;
      if (v10)
      {
        v24 = v23 + 3;
        v13 = (_BYTE *)*((_QWORD *)v10 + 1);
        v25 = *((unsigned int *)v10 + 1);
        if ((*((_BYTE *)v10 + 16) & 4) != 0)
        {
          if ((_DWORD)v25)
          {
            if ((_DWORD)v25 == 1)
              *v24 = *v13;
            else
              memcpy(v24, v13, v25);
          }
        }
        else
        {
          v77 = &v24[v25];
          if (v25 >= 0x10)
          {
            v78 = &v24[v25 & 0xFFFFFFF0];
            do
            {
              v79 = (unsigned __int128)vld2q_s8(v13);
              v13 += 32;
              *(_OWORD *)v24 = v79;
              v24 += 16;
            }
            while (v24 != v78);
            v24 = v78;
          }
          while (v24 != v77)
          {
            v80 = *v13;
            v13 += 2;
            *v24++ = v80;
          }
        }
      }
    }
  }
  v49 = v81;
  v81 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v13);
    else
      *(_DWORD *)v49 -= 2;
  }
  if (*v7 != 0.0)
  {
    WTF::numberToString();
    HIDWORD(v109) = strlen(v102);
    v50 = v83;
    if ((v83 || (v50 = v82) != 0) && (*((_BYTE *)v50 + 16) & 4) == 0)
    {
      v51 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v82);
      if (v51)
      {
        v52 = v106;
        v53 = v107;
        v114 = v106;
        v115 = v107;
        v54 = v108;
        v55 = v109;
        v116 = v108;
        *(_OWORD *)__n = v109;
        v56 = *(_OWORD *)v102;
        v57 = v103;
        __src = *(_OWORD *)v102;
        v111 = v103;
        v58 = v104;
        v59 = v105;
        v112 = v104;
        v113 = v105;
        *v51 = 32;
        v60 = (char *)(v51 + 1);
        v122 = v52;
        v123 = v53;
        v124 = v54;
        v125 = v55;
        v118 = v56;
        v119 = v57;
        v61 = &v60[2 * HIDWORD(v55)];
        v120 = v58;
        v121 = v59;
        if (HIDWORD(v55) >= 0x40)
        {
          v66 = &v60[2 * (HIDWORD(v55) & 0xFFFFFFC0)];
          v62 = (int8x16_t *)&v118;
          v67 = 0uLL;
          do
          {
            v129.val[0] = *v62;
            v68 = v62[1];
            v132.val[0] = v62[2];
            v69 = v62[3];
            v62 += 4;
            v70 = v69;
            v132.val[1] = 0uLL;
            v135.val[0] = v68;
            v129.val[1] = 0uLL;
            v71 = v60;
            vst2q_s8(v71, v129);
            v71 += 32;
            v135.val[1] = 0uLL;
            vst2q_s8(v71, v135);
            v72 = v60 + 64;
            vst2q_s8(v72, v132);
            v73 = v60 + 96;
            vst2q_s8(v73, *(int8x16x2_t *)(&v67 - 1));
            v60 += 128;
          }
          while (v60 != v66);
          v60 = v66;
        }
        else
        {
          v62 = (int8x16_t *)&v118;
        }
        while (v60 != v61)
        {
          v74 = v62->u8[0];
          v62 = (int8x16_t *)((char *)v62 + 1);
          *(_WORD *)v60 = v74;
          v60 += 2;
        }
        *(_DWORD *)v61 = 7864432;
      }
    }
    else
    {
      v63 = (_BYTE *)MEMORY[0x19AEA4824](&v82);
      if (v63)
      {
        v122 = v106;
        v123 = v107;
        v124 = v108;
        v125 = v109;
        v118 = *(_OWORD *)v102;
        v119 = v103;
        v120 = v104;
        v121 = v105;
        *v63 = 32;
        v64 = v63 + 1;
        v65 = HIDWORD(v125);
        if (HIDWORD(v125))
        {
          if (HIDWORD(v125) == 1)
            *v64 = v118;
          else
            memcpy(v63 + 1, &v118, HIDWORD(v125));
        }
        *(_WORD *)&v64[v65] = 30832;
      }
    }
  }
  v75 = v82;
  if (v82
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v82),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v82),
        (v75 = v82) != 0))
  {
    *(_DWORD *)v75 += 2;
  }
  *a2 = v75;
  v76 = v83;
  v83 = 0;
  if (v76)
  {
    if (*(_DWORD *)v76 == 2)
      WTF::StringImpl::destroy(v76, (WTF::StringImpl *)v13);
    else
      *(_DWORD *)v76 -= 2;
  }
  this = v82;
  v82 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, (WTF::StringImpl *)v13);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

uint64_t WebCore::FormatBlockCommand::formatSelection(WebCore::FormatBlockCommand *this, VisiblePosition *a2, VisiblePosition *a3)
{
  uint64_t v6;
  int v7;
  uint64_t result;
  int v9;
  WTF *v10;
  void *v11;

  v6 = *((_QWORD *)this + 35);
  v7 = (*(_DWORD *)v6)++;
  result = WebCore::isElementForFormatBlock(*(_WORD *)(v6 + 10));
  v9 = result;
  if (v7)
  {
    *(_DWORD *)v6 = v7;
    if (!(_DWORD)result)
      return result;
  }
  else
  {
    WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v6);
    result = WTF::fastFree(v10, v11);
    if (!v9)
      return result;
  }
  result = (uint64_t)WebCore::ApplyBlockElementCommand::formatSelection(this, a2, a3);
  *((_BYTE *)this + 312) = 1;
  return result;
}

uint64_t WebCore::isElementForFormatBlock(unsigned __int16 a1)
{
  char v1;
  unsigned int v2;
  uint64_t result;

  v1 = a1;
  v2 = a1;
  result = 1;
  if ((v2 > 0x39 || ((1 << v1) & 0x37E20E0800200C8) == 0)
    && (v2 - 72 > 0x21 || ((1 << (v2 - 72)) & 0x200440101) == 0))
  {
    return 0;
  }
  return result;
}

unsigned int *WebCore::FormatBlockCommand::formatRange(unsigned int *a1, WebCore::Node *a2, WebCore::VisiblePosition *a3, uint64_t *a4, WebCore::Element **a5)
{
  WebCore::VisiblePosition *v5;
  uint64_t *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::Node *v10;
  WebCore::Node *v11;
  void *v12;
  __int16 *v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  WebCore::Node *v19;
  WebCore::Node *v20;
  Node *var0;
  void *v22;
  uint64_t v23;
  int v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  const WebCore::SimpleRange *v29;
  int v30;
  char isNodeVisiblyContainedWithin;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  __int16 v36;
  WebCore::Node *v37;
  WebCore::Node *v38;
  WebCore::Node *v39;
  Node *v40;
  WebCore::Node *v41;
  Node *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  WebCore::Element *v46;
  void *v47;
  Node *v48;
  Node *v49;
  int v50;
  WebCore::Element *v51;
  void *v52;
  Node *v53;
  WebCore::Node *v54;
  char v55;
  void *v56;
  Node *v57;
  uint64_t (*v58)();
  _BOOL4 v59;
  Node *v60;
  Node *v61;
  Node *v62;
  WebCore::Node *v63;
  uint64_t (*v64)();
  BOOL v65;
  Node *v66;
  int v67;
  WebCore::Node *v68;
  uint64_t (*v69)();
  _BOOL4 v70;
  Node *v71;
  Node *v72;
  WebCore::Node *v73;
  WebCore::Node *v74;
  WebCore::Node *v75;
  unsigned int *result;
  WTF *v77;
  void *v78;
  void *v79;
  WTF *v80;
  void *v81;
  uint64_t *v82;
  WebCore::VisiblePosition *v83;
  uint64_t v84;
  uint64_t v85;
  WTF *v86;
  void *v87;
  WebCore::Node *v92;
  WebCore::Node *v93[2];
  char v94;
  WebCore::Node *v95[3];
  WebCore::Node *v96;
  int v97;
  char v98;
  char v99;
  WebCore::Node *v100[2];
  char v101;
  VisiblePosition v102;
  WebCore::Node *v103[2];
  WebCore::Node *v104;
  char v105;
  WebCore::Node *v106;
  VisiblePosition v107;

  v5 = a3;
  v6 = (uint64_t *)a2;
  v7 = a1;
  v8 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
  {
    v9 = 0;
    goto LABEL_55;
  }
  *(_DWORD *)(v8 + 24) += 4;
  v9 = v8;
  while (1)
  {
    v10 = (WebCore::Node *)v9;
    v11 = (WebCore::Node *)v8;
    if (!WebCore::Node::computeEditability(v8, 0, 1))
    {
      v9 = 0;
      goto LABEL_42;
    }
    if ((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if (*(_BYTE *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) == 37)
        goto LABEL_45;
      v13 = (__int16 *)(v8 + 28);
      if ((*(_WORD *)(v8 + 28) & 0x10) == 0)
        goto LABEL_8;
    }
    else
    {
      if ((*(_WORD *)(v8 + 28) & 0x10) == 0)
      {
        v13 = (__int16 *)(v8 + 28);
        goto LABEL_8;
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24);
      if (v18 == *(_QWORD *)(WebCore::HTMLNames::tdTag + 24) || v18 == *(_QWORD *)(WebCore::HTMLNames::thTag + 24))
        goto LABEL_45;
      v13 = (__int16 *)(v8 + 28);
    }
    if (*(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
      goto LABEL_45;
LABEL_8:
    v14 = *(_QWORD *)(v8 + 32);
    if (!v14)
      goto LABEL_45;
    if (!WebCore::Node::computeEditability(v14, 0, 1))
      goto LABEL_45;
    v15 = *v13;
    if ((*v13 & 8) != 0 && (WebCore::isElementForFormatBlock(*(_WORD *)(*((_QWORD *)v11 + 12) + 10)) & 1) != 0)
      goto LABEL_45;
    if ((*((_QWORD *)v11 + 8) & 0xFFFFFFFFFFFFLL) != 0
      && (*(_BYTE *)((*((_QWORD *)v11 + 8) & 0xFFFFFFFFFFFFLL) + 0x14) & 1) != 0)
    {
      *((_DWORD *)v11 + 6) += 2;
      if (*(_DWORD *)(v9 + 24) == 2)
      {
        v17 = *(_WORD *)(v9 + 30);
        v9 = (uint64_t)v11;
        if ((v17 & 0x400) != 0)
          goto LABEL_18;
        WebCore::Node::removedLastRef(v10, v12);
        v15 = *v13;
      }
      else
      {
        *(_DWORD *)(v9 + 24) -= 2;
      }
      v9 = (uint64_t)v11;
    }
LABEL_18:
    if ((v15 & 0x10) != 0)
    {
      v16 = *(_QWORD *)(*((_QWORD *)v11 + 12) + 24);
      if (v16 == *(_QWORD *)(WebCore::HTMLNames::ulTag + 24)
        || v16 == *(_QWORD *)(WebCore::HTMLNames::olTag + 24)
        || v16 == *(_QWORD *)(WebCore::HTMLNames::dlTag + 24))
      {
        break;
      }
    }
    v8 = *((_QWORD *)v11 + 4);
    if (v8)
      *(_DWORD *)(v8 + 24) += 2;
    if (*((_DWORD *)v11 + 6) == 2)
    {
      if ((*((_WORD *)v11 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v11, v12);
    }
    else
    {
      *((_DWORD *)v11 + 6) -= 2;
    }
    if (!v8)
      goto LABEL_49;
  }
  if (!WebCore::Node::computeEditability(*((_QWORD *)v11 + 4), 0, 1))
    goto LABEL_45;
  v10 = (WebCore::Node *)*((_QWORD *)v11 + 4);
  if (v10)
    *((_DWORD *)v10 + 6) += 2;
LABEL_42:
  if (*((_DWORD *)v11 + 6) == 2)
  {
    if ((*((_WORD *)v11 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v11, v12);
  }
  else
  {
    *((_DWORD *)v11 + 6) -= 2;
  }
  v11 = v10;
LABEL_45:
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, v12);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  v9 = (uint64_t)v11;
LABEL_49:
  a2 = (WebCore::Node *)*v6;
  if (v9 == *v6)
  {
    v7 = a1;
    if (v9)
      *(_DWORD *)(v9 + 24) += 2;
    v5 = a3;
LABEL_55:
    v106 = (WebCore::Node *)v9;
    v19 = (WebCore::Node *)v9;
    if (!v9)
      goto LABEL_210;
    goto LABEL_56;
  }
  v7 = a1;
  WebCore::CompositeEditCommand::splitTreeToNode(a1, a2, (WebCore::Node *)v9, 0, &v106);
  v19 = v106;
  v5 = a3;
  if (!v106)
    goto LABEL_210;
LABEL_56:
  *((_DWORD *)v19 + 6) += 2;
  WebCore::makeSimpleRange<WebCore::Position &,WebCore::Position &>(v6, a4, (uint64_t)v103);
  WebCore::VisiblePosition::canonicalPosition(v5, (uint64_t)&v107);
  var0 = v107.var0.var0.var0;
  if (v107.var0.var0.var0)
  {
    *((_DWORD *)v107.var0.var0.var0 + 6) += 4;
    v23 = WebCore::deprecatedEnclosingBlockFlowElement((uint64_t)var0, v20);
    v24 = *((_DWORD *)var0 + 6) - 2;
    if (*((_DWORD *)var0 + 6) != 2)
    {
      *((_DWORD *)var0 + 6) = v24;
      goto LABEL_59;
    }
    v36 = *((_WORD *)var0 + 15);
    if ((v36 & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)var0, v22);
      v24 = *((_DWORD *)var0 + 6);
LABEL_59:
      v25 = v24 - 2;
      if (v25)
      {
        *((_DWORD *)var0 + 6) = v25;
        goto LABEL_61;
      }
      v36 = *((_WORD *)var0 + 15);
    }
    if ((v36 & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)var0, v22);
LABEL_61:
    v26 = v23 == 0;
    if (v23)
      *(_DWORD *)(v23 + 24) += 2;
    if (*((_DWORD *)var0 + 6) == 2)
    {
      if ((*((_WORD *)var0 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)var0, v22);
    }
    else
    {
      *((_DWORD *)var0 + 6) -= 2;
    }
  }
  else
  {
    v23 = 0;
    v26 = 1;
  }
  v27 = WebCore::editableRootForPosition((uint64_t)v6, 0);
  if (!v27)
    goto LABEL_198;
  v28 = v27;
  *(_DWORD *)(v27 + 24) += 2;
  if (v26)
  {
    v23 = 0;
    goto LABEL_196;
  }
  if (!WebCore::isElementForFormatBlock(*(_WORD *)(*(_QWORD *)(v23 + 96) + 10)))
    goto LABEL_133;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v6, (uint64_t)&v107);
  v107.var1 = 1;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v6, (uint64_t)v100);
  v101 = 1;
  WebCore::startOfBlock((unsigned int *)v100, (WebCore::Node *)1, &v102);
  if (!WebCore::operator==((uint64_t *)&v107, (uint64_t *)&v102))
  {
    v30 = 0;
    goto LABEL_115;
  }
  WebCore::VisiblePosition::canonicalPosition(v5, (uint64_t)&v96);
  v99 = 1;
  WebCore::VisiblePosition::canonicalPosition(v5, (uint64_t)v93);
  v94 = 1;
  WebCore::endOfBlock((unsigned int *)v93, (WebCore::Node *)1, v95);
  if (!WebCore::operator==((uint64_t *)&v96, (uint64_t *)v95))
  {
    if (!v105)
      goto LABEL_91;
    isNodeVisiblyContainedWithin = WebCore::isNodeVisiblyContainedWithin((WebCore *)v23, (WebCore::Node *)v103, v29);
    v30 = 0;
    if (v23 != v28 && (isNodeVisiblyContainedWithin & 1) != 0)
      goto LABEL_78;
    goto LABEL_106;
  }
  if (v23 == v28)
  {
LABEL_91:
    v30 = 0;
    goto LABEL_106;
  }
LABEL_78:
  v32 = *(_WORD *)(v23 + 28);
  if ((v32 & 0xF000) == 0x9000)
  {
    if (**(_QWORD **)(v28 + 40) == v23 && (*(_WORD *)(v28 + 28) & 0xF000) != 0x9000)
    {
      LODWORD(v33) = (*(unsigned __int8 *)(v28 + 22) >> 3) & 1;
      goto LABEL_105;
    }
LABEL_104:
    LODWORD(v33) = 0;
    goto LABEL_105;
  }
  if ((v32 & 4) == 0)
    goto LABEL_104;
  v33 = *(_QWORD *)(v23 + 80);
  if (!v33)
    goto LABEL_105;
  if (((*(unsigned __int8 *)(v28 + 22) ^ *(unsigned __int8 *)(v23 + 22)) & 8) != 0)
    goto LABEL_104;
  v34 = v28;
  do
  {
    v34 = *(_QWORD *)(v34 + 32);
    LODWORD(v33) = v34 != 0;
    v35 = v34 == v23 || v34 == 0;
  }
  while (!v35);
LABEL_105:
  v30 = v33 ^ 1;
LABEL_106:
  v37 = v95[0];
  v95[0] = 0;
  if (v37)
  {
    if (*((_DWORD *)v37 + 6) == 2)
    {
      if ((*((_WORD *)v37 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v37, a2);
    }
    else
    {
      *((_DWORD *)v37 + 6) -= 2;
    }
  }
  v38 = v93[0];
  v93[0] = 0;
  if (v38)
  {
    if (*((_DWORD *)v38 + 6) == 2)
    {
      if ((*((_WORD *)v38 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v38, a2);
    }
    else
    {
      *((_DWORD *)v38 + 6) -= 2;
    }
  }
  v39 = v96;
  v96 = 0;
  if (v39)
  {
    if (*((_DWORD *)v39 + 6) == 2)
    {
      if ((*((_WORD *)v39 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v39, a2);
    }
    else
    {
      *((_DWORD *)v39 + 6) -= 2;
    }
  }
LABEL_115:
  v40 = v102.var0.var0.var0;
  v102.var0.var0.var0 = 0;
  if (v40)
  {
    if (*((_DWORD *)v40 + 6) == 2)
    {
      if ((*((_WORD *)v40 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v40, a2);
    }
    else
    {
      *((_DWORD *)v40 + 6) -= 2;
    }
  }
  v41 = v100[0];
  v100[0] = 0;
  if (v41)
  {
    if (*((_DWORD *)v41 + 6) == 2)
    {
      if ((*((_WORD *)v41 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v41, a2);
    }
    else
    {
      *((_DWORD *)v41 + 6) -= 2;
    }
  }
  v42 = v107.var0.var0.var0;
  v107.var0.var0.var0 = 0;
  if (v42)
  {
    if (*((_DWORD *)v42 + 6) == 2)
    {
      if ((*((_WORD *)v42 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v42, a2);
    }
    else
    {
      *((_DWORD *)v42 + 6) -= 2;
    }
  }
  if (v30)
  {
    v43 = *((_QWORD *)v7 + 35);
    if (v43)
    {
      v44 = (*(_DWORD *)v43)++;
      v45 = *(_QWORD *)(v23 + 96);
      if (v45 == v43)
      {
        if (v44)
        {
          *(_DWORD *)v43 = v44;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v43);
          WTF::fastFree(v80, v81);
        }
        goto LABEL_196;
      }
    }
    else
    {
      v45 = *(_QWORD *)(v23 + 96);
      if (!v45)
        goto LABEL_196;
    }
    if (*(_QWORD *)(v45 + 24) == *(_QWORD *)(v43 + 24))
    {
      v82 = v6;
      v83 = v5;
      v84 = *(_QWORD *)(v45 + 32);
      v85 = *(_QWORD *)(v43 + 32);
      if (*(_DWORD *)v43 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v43);
        WTF::fastFree(v86, v87);
      }
      else
      {
        --*(_DWORD *)v43;
      }
      v35 = v84 == v85;
      v5 = v83;
      v6 = v82;
      if (v35)
        goto LABEL_196;
    }
    else if (*(_DWORD *)v43 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v43);
      WTF::fastFree(v77, v78);
    }
    else
    {
      --*(_DWORD *)v43;
    }
    if (*((_DWORD *)v19 + 6) == 2)
    {
      if ((*((_WORD *)v19 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v19, a2);
    }
    else
    {
      *((_DWORD *)v19 + 6) -= 2;
    }
    v19 = (WebCore::Node *)v23;
    v23 = 0;
  }
LABEL_133:
  v46 = *a5;
  if (!*a5)
  {
    WebCore::ApplyBlockElementCommand::createBlockElement((WebCore::ApplyBlockElementCommand *)v7, (uint64_t *)&v107);
    v48 = v107.var0.var0.var0;
    v107.var0.var0.var0 = 0;
    v49 = (Node *)*a5;
    *a5 = (WebCore::Element *)v48;
    if (v49)
    {
      v50 = *((_DWORD *)v49 + 6) - 2;
      if (*((_DWORD *)v49 + 6) != 2)
        goto LABEL_136;
      if ((*((_WORD *)v49 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v49, v47);
        v49 = v107.var0.var0.var0;
        v107.var0.var0.var0 = 0;
        if (v49)
        {
          v50 = *((_DWORD *)v49 + 6) - 2;
          if (*((_DWORD *)v49 + 6) == 2)
          {
            if ((*((_WORD *)v49 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v49, v79);
          }
          else
          {
LABEL_136:
            *((_DWORD *)v49 + 6) = v50;
          }
        }
      }
    }
    v51 = *a5;
    *((_DWORD *)v51 + 6) = *((_DWORD *)*a5 + 6) + 2;
    v107.var0.var0.var0 = (Node *)v51;
    WebCore::CompositeEditCommand::insertNodeBefore((WebCore::CompositeEditCommand *)v7, (uint64_t *)&v107, (uint64_t)v19, 1);
    v53 = v107.var0.var0.var0;
    v107.var0.var0.var0 = 0;
    if (v53)
    {
      if (*((_DWORD *)v53 + 6) == 2)
      {
        if ((*((_WORD *)v53 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v53, v52);
      }
      else
      {
        *((_DWORD *)v53 + 6) -= 2;
      }
    }
    v46 = *a5;
  }
  v54 = (WebCore::Node *)*((_QWORD *)v46 + 11);
  if (v54)
  {
    *((_DWORD *)v54 + 6) += 2;
    v96 = v54;
    v97 = 0;
    v55 = v98 & 0xF0 | 2;
  }
  else
  {
    v96 = 0;
    v97 = 0;
    v55 = v98 & 0xF0;
  }
  v98 = v55;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v96, (uint64_t)&v102);
  v102.var1 = 1;
  v57 = v102.var0.var0.var0;
  if (v102.var0.var0.var0)
    v58 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v58 = 0;
  if (v58)
  {
    WebCore::endOfParagraph((WebCore::Node *)&v102, 1, &v107);
    v59 = WebCore::operator==((uint64_t *)&v102, (uint64_t *)&v107);
    v60 = v107.var0.var0.var0;
    v107.var0.var0.var0 = 0;
    if (v60)
    {
      if (*((_DWORD *)v60 + 6) == 2)
      {
        if ((*((_WORD *)v60 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v60, v56);
      }
      else
      {
        *((_DWORD *)v60 + 6) -= 2;
      }
    }
    v57 = v102.var0.var0.var0;
  }
  else
  {
    v59 = 0;
  }
  v102.var0.var0.var0 = 0;
  if (v57)
  {
    if (*((_DWORD *)v57 + 6) == 2)
    {
      if ((*((_WORD *)v57 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v57, v56);
    }
    else
    {
      *((_DWORD *)v57 + 6) -= 2;
    }
  }
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v6, (uint64_t)&v107);
  v107.var1 = 1;
  WebCore::VisiblePosition::canonicalPosition(v5, (uint64_t)&v102);
  v102.var1 = 1;
  WebCore::CompositeEditCommand::moveParagraphWithClones(v7, &v107, &v102, *a5, v106);
  v61 = v102.var0.var0.var0;
  v102.var0.var0.var0 = 0;
  if (v61)
  {
    if (*((_DWORD *)v61 + 6) == 2)
    {
      if ((*((_WORD *)v61 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v61, a2);
    }
    else
    {
      *((_DWORD *)v61 + 6) -= 2;
    }
  }
  v62 = v107.var0.var0.var0;
  v107.var0.var0.var0 = 0;
  if (v62)
  {
    if (*((_DWORD *)v62 + 6) == 2)
    {
      if ((*((_WORD *)v62 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v62, a2);
    }
    else
    {
      *((_DWORD *)v62 + 6) -= 2;
    }
  }
  if (!v59)
    goto LABEL_193;
  v63 = v96;
  if ((*((_BYTE *)v96 + 22) & 8) != 0)
  {
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v96, (uint64_t)&v102);
    v102.var1 = 1;
    if (v102.var0.var0.var0)
      v64 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    else
      v64 = 0;
    if (!v64)
      goto LABEL_174;
    WebCore::endOfParagraph((WebCore::Node *)&v102, 1, &v107);
    v65 = WebCore::operator==((uint64_t *)&v102, (uint64_t *)&v107);
    v66 = v107.var0.var0.var0;
    v107.var0.var0.var0 = 0;
    if (v66)
    {
      if (*((_DWORD *)v66 + 6) == 2)
      {
        if ((*((_WORD *)v66 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v66, a2);
      }
      else
      {
        *((_DWORD *)v66 + 6) -= 2;
      }
    }
    if (v65)
    {
      v67 = 0;
    }
    else
    {
LABEL_174:
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v96, (uint64_t)v100);
      v101 = 1;
      v68 = v100[0];
      if (v100[0])
        v69 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
      else
        v69 = 0;
      if (v69)
      {
        WebCore::startOfParagraph((uint64_t)v100, 1, &v107);
        v70 = WebCore::operator==((uint64_t *)v100, (uint64_t *)&v107);
        v71 = v107.var0.var0.var0;
        v107.var0.var0.var0 = 0;
        if (v71)
        {
          if (*((_DWORD *)v71 + 6) == 2)
          {
            if ((*((_WORD *)v71 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v71, a2);
          }
          else
          {
            *((_DWORD *)v71 + 6) -= 2;
          }
        }
        v68 = v100[0];
      }
      else
      {
        v70 = 0;
      }
      v67 = !v70;
      v100[0] = 0;
      if (v68)
      {
        if (*((_DWORD *)v68 + 6) == 2)
        {
          if ((*((_WORD *)v68 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v68, a2);
        }
        else
        {
          *((_DWORD *)v68 + 6) -= 2;
        }
      }
    }
    v72 = v102.var0.var0.var0;
    v102.var0.var0.var0 = 0;
    if (v72)
    {
      if (*((_DWORD *)v72 + 6) == 2)
      {
        if ((*((_WORD *)v72 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v72, a2);
      }
      else
      {
        *((_DWORD *)v72 + 6) -= 2;
      }
    }
    if (v67)
    {
      WebCore::CompositeEditCommand::insertBlockPlaceholder(v7, (const WebCore::Position *)&v96, &v92);
      v73 = v92;
      v92 = 0;
      if (v73)
      {
        if (*((_DWORD *)v73 + 6) == 2)
        {
          if ((*((_WORD *)v73 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v73, a2);
        }
        else
        {
          *((_DWORD *)v73 + 6) -= 2;
        }
      }
    }
LABEL_193:
    v63 = v96;
    v96 = 0;
    if (!v63)
      goto LABEL_196;
    goto LABEL_194;
  }
  v96 = 0;
LABEL_194:
  if (*((_DWORD *)v63 + 6) == 2)
  {
    if ((*((_WORD *)v63 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v63, a2);
  }
  else
  {
    *((_DWORD *)v63 + 6) -= 2;
  }
LABEL_196:
  if (*(_DWORD *)(v28 + 24) == 2)
  {
    if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v28, a2);
  }
  else
  {
    *(_DWORD *)(v28 + 24) -= 2;
  }
LABEL_198:
  if (v23)
  {
    if (*(_DWORD *)(v23 + 24) == 2)
    {
      if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v23, a2);
    }
    else
    {
      *(_DWORD *)(v23 + 24) -= 2;
    }
  }
  if (v105)
  {
    v74 = v104;
    v104 = 0;
    if (v74)
    {
      if (*((_DWORD *)v74 + 6) == 2)
      {
        if ((*((_WORD *)v74 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v74, a2);
      }
      else
      {
        *((_DWORD *)v74 + 6) -= 2;
      }
    }
    v75 = v103[0];
    v103[0] = 0;
    if (v75)
    {
      if (*((_DWORD *)v75 + 6) == 2)
      {
        if ((*((_WORD *)v75 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v75, a2);
      }
      else
      {
        *((_DWORD *)v75 + 6) -= 2;
      }
    }
  }
  if (*((_DWORD *)v19 + 6) == 2)
  {
    if ((*((_WORD *)v19 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v19, a2);
  }
  else
  {
    *((_DWORD *)v19 + 6) -= 2;
  }
LABEL_210:
  result = (unsigned int *)v106;
  v106 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  return result;
}

BOOL WebCore::DragCaretController::isContentRichlyEditable(WebCore::DragCaretController *this, const WebCore::Position *a2)
{
  WebCore::Node *v2;
  void *v3;
  _BOOL8 isRichlyEditablePosition;
  WebCore::Node *v5;
  WebCore::Node *v7;
  int v8;
  char v9;

  v2 = (WebCore::Node *)*((_QWORD *)this + 3);
  if (v2)
    *((_DWORD *)v2 + 6) += 2;
  v7 = v2;
  v8 = *((_DWORD *)this + 8);
  v9 = *((_BYTE *)this + 36);
  isRichlyEditablePosition = WebCore::isRichlyEditablePosition((WebCore *)&v7, a2);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 6) == 2)
    {
      if ((*((_WORD *)v5 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v5, v3);
    }
    else
    {
      *((_DWORD *)v5 + 6) -= 2;
    }
  }
  return isRichlyEditablePosition;
}

WebCore *WebCore::DragCaretController::caretRectInRootViewCoordinates(WebCore::DragCaretController *this, void *a2, WebCore::RenderBlock **a3)
{
  uint64_t v3;
  WebCore *v4;
  uint64_t (*v5)();
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::ScrollView *v10;
  uint64_t v11;
  BOOL *v12;
  uint64_t v13;
  int v14;
  unint64_t v16;
  uint64_t v17;
  VisiblePosition v18;

  v4 = (WebCore::DragCaretController *)((char *)this + 24);
  v3 = *((_QWORD *)this + 3);
  v5 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  if (!v3)
    v5 = 0;
  if (!v5 || !v3)
    return 0;
  v6 = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v3 + 24) = v6 + 2;
  v7 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8);
  if (v7)
  {
    *(_DWORD *)(v7 + 24) += 2;
    v6 = *(_DWORD *)(v3 + 24) - 2;
  }
  if (v6)
  {
    *(_DWORD *)(v3 + 24) = v6;
  }
  else if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
  }
  if (!v7)
    return 0;
  v8 = *(_QWORD *)(v7 + 528);
  if (v8 && (v9 = *(_QWORD *)(v8 + 8)) != 0 && (v10 = *(WebCore::ScrollView **)(v9 + 288)) != 0)
  {
    ++*((_DWORD *)v10 + 2);
    v18.var0.var0.var0 = 0;
    v16 = (unint64_t)WebCore::localCaretRectInRendererForCaretPainting(v4, &v18, a3);
    v17 = v11;
    v16 = WebCore::absoluteBoundsForLocalCaretRect((WebCore *)v18.var0.var0.var0, (WebCore::RenderBlock *)&v16, 0, v12);
    v17 = v13;
    v4 = (WebCore *)WebCore::ScrollView::contentsToRootView(v10, (const WebCore::IntRect *)&v16);
    if (*((_DWORD *)v10 + 2) == 1)
    {
      (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v10 + 8))(v10);
      v14 = 0;
    }
    else
    {
      v14 = 0;
      --*((_DWORD *)v10 + 2);
    }
  }
  else
  {
    v14 = 1;
  }
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  if (v14)
    return 0;
  return v4;
}

uint64_t WebCore::DragCaretController::editableElementRectInRootViewCoordinates(WebCore::DragCaretController *this, const WebCore::Position *a2)
{
  WebCore::Node *v2;
  uint64_t (*v3)();
  _DWORD *v5;
  WebCore::Node *v6;
  void *v7;
  uint64_t v8;
  WebCore::Node *v9;
  WebCore::Node *v10;
  WebCore::Node *v11;
  WebCore::RenderObject *v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::ScrollView *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  WebCore::Node *v21;
  uint64_t v22;

  v2 = (WebCore::Node *)*((_QWORD *)this + 3);
  v3 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  if (!v2)
    v3 = 0;
  if (!v3)
    return 0;
  if (v2)
    *((_DWORD *)v2 + 6) += 2;
  v21 = v2;
  v5 = (_DWORD *)((char *)this + 32);
  LODWORD(v22) = *((_DWORD *)this + 8);
  BYTE4(v22) = *((_BYTE *)this + 36);
  v6 = WebCore::enclosingTextFormControl((WebCore *)&v21, a2);
  v8 = (uint64_t)v6;
  if (v6)
    *((_DWORD *)v6 + 6) += 2;
  v9 = v21;
  v21 = 0;
  if (v9)
  {
    if (*((_DWORD *)v9 + 6) == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v9, v7);
    }
    else
    {
      *((_DWORD *)v9 + 6) -= 2;
    }
  }
  if (!v8)
  {
    v10 = (WebCore::Node *)*((_QWORD *)this + 3);
    if (v10)
      *((_DWORD *)v10 + 6) += 2;
    v21 = v10;
    LODWORD(v22) = *v5;
    BYTE4(v22) = *((_BYTE *)this + 36);
    WebCore::highestEditableRoot((uint64_t)&v21, 0, &v20);
    v8 = v20;
    v11 = v21;
    v20 = 0;
    v21 = 0;
    if (v11)
    {
      if (*((_DWORD *)v11 + 6) == 2)
      {
        if ((*((_WORD *)v11 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v11, v7);
      }
      else
      {
        *((_DWORD *)v11 + 6) -= 2;
      }
    }
    if (!v8)
      return 0;
  }
  v12 = (WebCore::RenderObject *)(*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL);
  if (v12)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      goto LABEL_40;
    ++*(_DWORD *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 40) + 8) + 528);
    if (v13 && (v14 = *(_QWORD *)(v13 + 8)) != 0 && (v15 = *(WebCore::ScrollView **)(v14 + 288)) != 0)
    {
      ++*((_DWORD *)v15 + 2);
      v21 = (WebCore::Node *)WebCore::RenderObject::absoluteBoundingBoxRect(v12, 1, 0);
      v22 = v16;
      v17 = WebCore::ScrollView::contentsToRootView(v15, (const WebCore::IntRect *)&v21);
      if (*((_DWORD *)v15 + 2) == 1)
        (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v15 + 8))(v15);
      else
        --*((_DWORD *)v15 + 2);
    }
    else
    {
      v17 = 0;
    }
    v18 = *((_DWORD *)v12 + 4);
    if (!v18)
    {
LABEL_40:
      __break(0xC471u);
      JUMPOUT(0x195ADBC48);
    }
    *((_DWORD *)v12 + 4) = v18 - 1;
  }
  else
  {
    v17 = 0;
  }
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v7);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  return v17;
}

uint64_t WebCore::FrameSelection::setSelectionFromNone(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  WebCore::Document *v7;
  WebCore::Node *v8;
  uint64_t v9;
  uint64_t v10[2];
  uint64_t v11[2];
  char v12;
  _BYTE v13[104];

  v1 = *(_QWORD *)(this + 32);
  if (v1)
  {
    v2 = this;
    if (!*(_BYTE *)(this + 153))
    {
      v3 = *(_QWORD *)(v1 + 8);
      v4 = *(_QWORD *)(*(_QWORD *)(v3 + 680) + 664) & 0x4000000000000;
      this = WebCore::Node::computeEditability(v3, 0, 1);
      if ((_DWORD)this || v4 != 0)
      {
        v6 = *(_QWORD *)(v2 + 32);
        if (v6)
          v7 = *(WebCore::Document **)(v6 + 8);
        else
          v7 = 0;
        this = WebCore::Document::body(v7);
        if (this)
        {
          v9 = this;
          *(_DWORD *)(this + 24) += 2;
          WebCore::firstPositionInOrBeforeNode(this, v8, (uint64_t)v10);
          WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v10, (uint64_t)v11);
          v12 = 1;
          WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)v13, (const WebCore::VisiblePosition *)v11, 0);
          WebCore::FrameSelection::setSelection(v2, v13, 6, 0, 0, 0, 0);
          WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v13);
          WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v11);
          this = (uint64_t)WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v10);
          if (*(_DWORD *)(v9 + 24) == 2)
          {
            if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
              return WebCore::Node::removedLastRef((WebCore::Node *)v9);
          }
          else
          {
            *(_DWORD *)(v9 + 24) -= 2;
          }
        }
      }
    }
  }
  return this;
}

void WebCore::FrameSelection::setCaretVisible(WebCore::FrameSelection *this, int a2)
{
  uint64_t v3;
  uint64_t v4;

  if ((((*((_BYTE *)this + 25) != 0) ^ a2) & 1) == 0)
  {
    v3 = *((_QWORD *)this + 4);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        *(_DWORD *)(v4 + 24) += 2;
        if (*(_QWORD *)(v4 + 1944))
        {
          if (!*(_BYTE *)(v4 + 3405))
          {
            WebCore::Document::updateStyleIfNeeded((WebCore::Document *)v4);
            if ((*((_WORD *)this + 128) & 0x20) != 0)
              WebCore::FrameSelection::updateAppearance(this);
          }
        }
        if (*(_DWORD *)(v4 + 24) == 2)
        {
          if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v4);
        }
        else
        {
          *(_DWORD *)(v4 + 24) -= 2;
        }
      }
    }
    WebCore::FrameSelection::updateAppearance(this);
  }
}

uint64_t WebCore::FrameSelection::rootEditableElementOrDocumentElement(WebCore::FrameSelection *this)
{
  uint64_t result;

  result = WebCore::editableRootForPosition((uint64_t)this + 120, 0);
  if (!result)
    return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 1272);
  return result;
}

void WebCore::FrameSelection::moveTo(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned __int16 v9;
  void *v10;
  int v11;
  char v12;
  int v13;
  char v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  int v28;
  char v29;
  uint64_t v30;
  int v31;
  char v32;
  char v33;
  __int16 v34;

  v6 = *a2;
  if (*a2)
    *(_DWORD *)(v6 + 24) += 2;
  v13 = *((_DWORD *)a2 + 2);
  v14 = *((_BYTE *)a2 + 12);
  v7 = *a3;
  if (*a3)
    *(_DWORD *)(v7 + 24) += 2;
  v11 = *((_DWORD *)a3 + 2);
  v12 = *((_BYTE *)a3 + 12);
  v8 = *((_BYTE *)a2 + 16);
  if (v6)
    *(_DWORD *)(v6 + 24) += 2;
  v15 = v6;
  v16 = v13;
  v17 = v14;
  if (v7)
    *(_DWORD *)(v7 + 24) += 2;
  v18 = v7;
  v19 = v11;
  v20 = v12;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = v8;
  v34 = -256;
  WebCore::VisibleSelection::validate((uint64_t)&v15, 0);
  if (a4)
    v9 = 199;
  else
    v9 = 6;
  WebCore::FrameSelection::setSelection(a1, (uint64_t)&v15, v9, 0, 0, 0, 0);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v15);
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, v10);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, v10);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
}

void WebCore::FrameSelection::moveWithoutValidationTo(uint64_t a1, const WebCore::Position *a2, const WebCore::Position *a3, int a4, unsigned __int16 a5, uint64_t *a6)
{
  char v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  int v27;
  char v28;
  __int16 v29;
  char v30;

  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 1;
  v30 = 1;
  WebCore::VisibleSelection::setWithoutValidation((WebCore::VisibleSelection *)&v11, a2, a3);
  if (a4)
    v10 = 2;
  else
    v10 = 0;
  v30 = v30 & 0xFD | v10;
  if (*(_DWORD *)a6)
    WebCore::FrameSelection::setSelection(a1, (uint64_t)&v11, a5, *a6, a6[1], 0, 0);
  else
    WebCore::FrameSelection::setSelection(a1, (uint64_t)&v11, a5, 0x500000002, 0, 0, 0);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v11);
}

unsigned int *WebCore::DragCaretController::setCaretPosition(WebCore::DragCaretController *this, VisiblePosition *a2)
{
  WebCore *v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int *var0;
  unsigned int *result;
  char v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WebCore::RenderBlock **v14;
  VisiblePosition v15;

  v4 = (WebCore::DragCaretController *)((char *)this + 24);
  v5 = *((_QWORD *)this + 3);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 + 24);
    *(_DWORD *)(v5 + 24) = v6 + 4;
    v7 = v6 + 2;
    if (v7)
    {
      *(_DWORD *)(v5 + 24) = v7;
    }
    else if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    WebCore::CaretBase::invalidateCaretRect((unint64_t)this, (WebCore::Node *)v5, 0, 0);
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  var0 = (unsigned int *)a2->var0.var0.var0;
  if (a2->var0.var0.var0)
    var0[6] += 2;
  result = *(unsigned int **)v4;
  *(_QWORD *)v4 = var0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
      {
        result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
        var0 = *(unsigned int **)v4;
      }
    }
    else
    {
      result[6] -= 2;
    }
  }
  v10 = *((_BYTE *)&a2->var0 + 12);
  *((_DWORD *)this + 8) = a2->var0.var1;
  *((_BYTE *)this + 36) = v10;
  *((_BYTE *)this + 40) = a2->var1;
  *((_BYTE *)this + 16) = 1;
  if (var0)
  {
    v11 = var0[6];
    var0[6] = v11 + 4;
    v12 = v11 + 2;
    if (v12)
    {
      var0[6] = v12;
    }
    else if ((*((_WORD *)var0 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)var0, a2);
    }
    result = (unsigned int *)WebCore::CaretBase::invalidateCaretRect((unint64_t)this, (WebCore::Node *)var0, 0, 0);
    v13 = *(_QWORD *)(*((_QWORD *)var0 + 5) + 8);
    if (v13)
      *(_DWORD *)(v13 + 24) += 2;
    if (var0[6] == 2)
    {
      if ((*((_WORD *)var0 + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)var0, a2);
    }
    else
    {
      var0[6] -= 2;
    }
    if (*(_QWORD *)v4 && (*(_BYTE *)(*(_QWORD *)v4 + 22) & 8) != 0)
    {
      WebCore::Document::updateLayout(v13, 2u, 0);
      *((_BYTE *)this + 16) = 0;
      v15.var0.var0.var0 = 0;
      result = (unsigned int *)WebCore::localCaretRectInRendererForCaretPainting(v4, &v15, v14);
      *(_QWORD *)this = result;
      *((_QWORD *)this + 1) = a2;
      if (!v13)
        return result;
      goto LABEL_23;
    }
  }
  else
  {
    v13 = 0;
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  if (!v13)
    return result;
LABEL_23:
  if (*(_DWORD *)(v13 + 24) == 2)
  {
    if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v13, a2);
  }
  else
  {
    *(_DWORD *)(v13 + 24) -= 2;
  }
  return result;
}

unint64_t WebCore::CaretBase::invalidateCaretRect(unint64_t this, WebCore::Node *a2, char a3, WebCore::CaretAnimator *a4)
{
  uint64_t v5;
  WebCore *v7;
  void *v8;
  uint64_t v9;
  const WebCore::LayoutRect *v10;
  int v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  _BYTE v27[20];
  __int128 v28;
  char v29;

  *(_BYTE *)(this + 16) = 1;
  if ((a3 & 1) == 0)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 1944);
    if (v5)
    {
      v7 = (WebCore *)this;
      ++*(_DWORD *)(v5 + 16);
      this = WebCore::Node::computeEditability((uint64_t)a2, 0, 0);
      if ((_DWORD)this
        || (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 248) + 328) + 136) + 664) & 0x4000000000000) != 0)
      {
        v9 = *((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL;
        if (v9)
        {
          if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 1)
          {
            if ((*((_WORD *)a2 + 14) & 0x10) == 0)
              goto LABEL_8;
            v11 = *((_DWORD *)a2 + 6);
            *((_DWORD *)a2 + 6) = v11 + 2;
            if ((*(_BYTE *)(v9 + 45) & 2) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195ADC630);
            }
            v12 = *(unsigned __int8 *)(v9 + 46);
            if (v11)
            {
              *((_DWORD *)a2 + 6) = v11;
            }
            else if ((*((_WORD *)a2 + 15) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef(a2, v8);
            }
            if (v12 != 35 && v12 != 63)
            {
LABEL_8:
              if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)a2 + 208))(a2) & 1) != 0)
                goto LABEL_16;
            }
          }
          this = (unint64_t)WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v9);
          v9 = this;
          if (this)
          {
LABEL_16:
            ++*(_DWORD *)(v9 + 16);
            if (a4)
            {
              this = (*(uint64_t (**)(WebCore::CaretAnimator *, _QWORD, _QWORD))(*(_QWORD *)a4 + 64))(a4, *(_QWORD *)v7, *((_QWORD *)v7 + 1));
              *(_QWORD *)&v26 = this;
              *((_QWORD *)&v26 + 1) = v24;
              v13 = HIDWORD(this);
            }
            else
            {
              v26 = *(_OWORD *)v7;
              this = v26;
              LODWORD(v13) = DWORD1(v26);
            }
            if ((_DWORD)this == *(_DWORD *)v7
              && (_DWORD)v13 == *((_DWORD *)v7 + 1)
              && *((_QWORD *)&v26 + 1) == *((_QWORD *)v7 + 1))
            {
              v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 24) + 8) + 40) + 8) + 1944);
              if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 24) + 8) + 40) + 8) + 3382))
              {
                v15 = *(_QWORD *)(v14 + 248);
                v16 = *(unsigned int *)(v15 + 508);
                if ((_DWORD)v16 && (v16 = *(_QWORD *)(*(_QWORD *)(v15 + 496) + 8 * v16 - 8)) != 0)
                {
                  v17 = *(_DWORD *)(v16 + 64);
                  LODWORD(v16) = *(_DWORD *)(v16 + 68);
                }
                else
                {
                  v17 = 0;
                }
                v18 = __OFADD__((_DWORD)this, v17);
                v19 = this + v17;
                if (v18)
                  v19 = (this >> 31) + 0x7FFFFFFF;
                v20 = *((_QWORD *)v7 + 1);
                v18 = __OFADD__((_DWORD)v13, (_DWORD)v16);
                v21 = v13 + v16;
                if (v18)
                  v21 = (v13 >> 31) + 0x7FFFFFFF;
                *(_QWORD *)&v28 = __PAIR64__(v21, v19);
                *((_QWORD *)&v28 + 1) = v20;
                v29 = 1;
                v27[0] = 0;
                v27[16] = 0;
                this = WebCore::RenderObject::issueRepaint(v9, &v28, 1, 0, (uint64_t)v27);
              }
            }
            else
            {
              *(_QWORD *)&v28 = WebCore::computeOutsetFromInnerOuterRect(v7, (const WebCore::LayoutRect *)&v26, v10);
              *((_QWORD *)&v28 + 1) = v25;
              v29 = 1;
              this = WebCore::RenderObject::repaintRectangle(v9, (int *)v7, 0, 1, &v28);
            }
            v22 = *(_DWORD *)(v9 + 16);
            if (!v22)
            {
              __break(0xC471u);
              JUMPOUT(0x195ADC610);
            }
            *(_DWORD *)(v9 + 16) = v22 - 1;
          }
        }
      }
      v23 = *(_DWORD *)(v5 + 16);
      if (!v23)
      {
        __break(0xC471u);
        JUMPOUT(0x195ADC5F0);
      }
      *(_DWORD *)(v5 + 16) = v23 - 1;
    }
  }
  return this;
}

void WebCore::FrameSelection::setSelectionByMouseIfDifferent(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  WebCore::Node *v7;
  WebCore::Node *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  WebCore::Node *v17;
  uint64_t (*v18)();
  unsigned __int8 v19;
  int v20;
  const WebCore::VisiblePosition *v21;
  WebCore::Node *v22;
  WebCore::Node *v23;
  void *v24;
  WTF *v25;
  WebCore::Node *v26;
  void *v27;
  WTF *v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  WTF *v32;
  unsigned __int8 v33;
  const WebCore::VisiblePosition *v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  int isEquivalent;
  WTF *v39;
  WebCore::Node *v40;
  WebCore::Node *v41;
  unsigned int v42;
  void *v43;
  int v44;
  WTF *v45;
  unsigned int v46;
  int v47;
  WTF *v48;
  WebCore::Node *v49;
  WebCore::Node *v50;
  WebCore::Node *v51;
  WTF *v52;
  WTF *v53;
  void *v54;
  uint64_t (*v55)();
  int v56;
  int v57;
  WebCore::Node *v58;
  uint64_t v59;
  WebCore::Node *v60;
  int v61;
  WebCore::Node *v62;
  void *v63;
  WebCore::Node *v64;
  int v65;
  WebCore::Node *v66;
  void *v67;
  char v68;
  void *v69;
  WebCore::Document *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  _BOOL4 v75;
  BOOL v76;
  int v77;
  uint64_t v78;
  WebCore::Node *v79;
  WebCore::Node *v80;
  WebCore::Node *v81;
  WebCore::Node *v82;
  int v83;
  int v84;
  uint64_t v85;
  int v86;
  WebCore::Node *v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  WebCore::Node *v91;
  void *v92;
  uint64_t v93;
  WebCore::Editor *v94;
  void *v95;
  WebCore::Editor *v96;
  uint64_t v97;
  void *v98;
  WebCore::Node *v99;
  int v100;
  char v101;
  unsigned __int8 v102;
  WebCore::Node *v103;
  int v104;
  char v105;
  char v106;
  WebCore::Node *v107;
  int v108;
  char v109;
  unsigned __int8 v110;
  WebCore::Node *v111;
  int v112;
  char v113;
  char v114;
  WebCore::Node *v115;
  int v116;
  char v117;
  WebCore::Node *v118;
  int v119;
  char v120;
  uint64_t v121;
  int v122;
  unsigned __int8 v123;
  uint64_t v124;
  int v125;
  char v126;
  uint64_t v127;
  int v128;
  char v129;
  uint64_t v130;
  int v131;
  char v132;
  __int16 v133;
  unsigned __int8 v134;
  WebCore::Node *v135[2];
  WTF *v136;
  int v137;
  char v138;
  char v139;
  int v140;
  _BYTE v141[16];
  int v142;
  char v143;
  _BYTE v144[16];
  int v145;
  char v146;
  WTF *v147;
  int v148;
  char v149;
  int v150;
  uint64_t v151;
  int v152;
  char v153;
  uint64_t v154;
  int v155;
  char v156;
  __int128 v157;
  char v158;
  int v159;
  uint64_t v160;
  int v161;
  char v162;
  uint64_t v163;
  int v164;
  char v165;

  v7 = *(WebCore::Node **)a2;
  if (*(_QWORD *)a2)
    *((_DWORD *)v7 + 6) += 2;
  v115 = v7;
  v116 = *(_DWORD *)(a2 + 8);
  v117 = *(_BYTE *)(a2 + 12);
  v8 = *(WebCore::Node **)(a2 + 16);
  if (v8)
    *((_DWORD *)v8 + 6) += 2;
  v118 = v8;
  v119 = *(_DWORD *)(a2 + 24);
  v120 = *(_BYTE *)(a2 + 28);
  v9 = *(_QWORD *)(a2 + 32);
  if (v9)
    *(_DWORD *)(v9 + 24) += 2;
  v121 = v9;
  v122 = *(_DWORD *)(a2 + 40);
  v123 = *(_BYTE *)(a2 + 44);
  v10 = *(_QWORD *)(a2 + 48);
  if (v10)
    *(_DWORD *)(v10 + 24) += 2;
  v124 = v10;
  v125 = *(_DWORD *)(a2 + 56);
  v126 = *(_BYTE *)(a2 + 60);
  v11 = *(_QWORD *)(a2 + 64);
  if (v11)
    *(_DWORD *)(v11 + 24) += 2;
  v127 = v11;
  v128 = *(_DWORD *)(a2 + 72);
  v129 = *(_BYTE *)(a2 + 76);
  v12 = *(_QWORD *)(a2 + 80);
  if (v12)
    *(_DWORD *)(v12 + 24) += 2;
  v130 = v12;
  v131 = *(_DWORD *)(a2 + 88);
  v132 = *(_BYTE *)(a2 + 92);
  v133 = *(_WORD *)(a2 + 96);
  v134 = *(_BYTE *)(a2 + 98);
  v13 = *(_QWORD *)(a1 + 32);
  if (v13
    && (v14 = *(_QWORD *)(v13 + 8)) != 0
    && ((v15 = *(unsigned __int8 *)(*(_QWORD *)(v14 + 680) + 370)) == 0 || v15 == 3))
  {
    v16 = (v134 >> 1) & 1;
  }
  else
  {
    v16 = 1;
  }
  v17 = *(WebCore::Node **)(a1 + 160);
  if (v17)
    v18 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v18 = 0;
  if (v18)
  {
    if (v17)
      *((_DWORD *)v17 + 6) += 2;
    v111 = v17;
    v112 = *(_DWORD *)(a1 + 168);
    v113 = *(_BYTE *)(a1 + 172);
    v114 = *(_BYTE *)(a1 + 176);
    if (v17)
      goto LABEL_24;
    goto LABEL_25;
  }
  if (HIBYTE(v133) == 2)
  {
    v33 = v134;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v121, (uint64_t)&v111);
    v114 = 1;
    if ((v33 & 1) == 0)
      goto LABEL_68;
  }
  else
  {
    v35 = v133;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v121, (uint64_t)&v111);
    v114 = 1;
    if (v35)
      goto LABEL_68;
  }
  v91 = v111;
  if (v111)
  {
    *((_DWORD *)v111 + 6) += 2;
    *(_QWORD *)&v157 = v91;
    DWORD2(v157) = v112;
    BYTE12(v157) = v113;
    v158 = 0;
    if (!WebCore::inSameLine((WebCore *)&v111, (const WebCore::VisiblePosition *)&v157, v34))
      v114 = 0;
    v93 = v157;
    *(_QWORD *)&v157 = 0;
    if (v93)
    {
      if (*(_DWORD *)(v93 + 24) == 2)
      {
        if ((*(_WORD *)(v93 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v93, v92);
      }
      else
      {
        *(_DWORD *)(v93 + 24) -= 2;
      }
    }
  }
LABEL_68:
  v17 = v111;
  if (v111)
LABEL_24:
    *((_DWORD *)v17 + 6) += 2;
LABEL_25:
  v107 = v17;
  v108 = v112;
  v109 = v113;
  v110 = v114;
  if (HIBYTE(v133) == 2)
    v19 = v134 & 1;
  else
    v19 = v133;
  v20 = v19;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v124, (uint64_t)&v103);
  v106 = 1;
  if (!v20)
  {
    v22 = v103;
    if (!v103)
      goto LABEL_31;
    *((_DWORD *)v103 + 6) += 2;
    *(_QWORD *)&v157 = v22;
    DWORD2(v157) = v104;
    BYTE12(v157) = v105;
    v158 = 0;
    if (!WebCore::inSameLine((WebCore *)&v103, (const WebCore::VisiblePosition *)&v157, v21))
      v106 = 0;
    v90 = v157;
    *(_QWORD *)&v157 = 0;
    if (v90)
    {
      if (*(_DWORD *)(v90 + 24) == 2)
      {
        if ((*(_WORD *)(v90 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v90, v89);
      }
      else
      {
        *(_DWORD *)(v90 + 24) -= 2;
      }
    }
  }
  v22 = v103;
  if (v103)
    *((_DWORD *)v103 + 6) += 2;
LABEL_31:
  v99 = v22;
  v100 = v104;
  v101 = v105;
  v102 = v106;
  if (!a4)
    goto LABEL_167;
  v23 = v107;
  if (v107)
    *((_DWORD *)v107 + 6) += 2;
  v147 = v23;
  v148 = v108;
  v149 = v109;
  WebCore::RenderedPosition::RenderedPosition((uint64_t)&v157, (WebCore::Position *)&v147, (const WebCore::Node *)v110);
  v25 = v147;
  v147 = 0;
  if (v25)
  {
    if (*((_DWORD *)v25 + 6) == 2)
    {
      if ((*((_WORD *)v25 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v25, v24);
    }
    else
    {
      *((_DWORD *)v25 + 6) -= 2;
    }
  }
  v26 = v99;
  if (v99)
    *((_DWORD *)v99 + 6) += 2;
  v136 = v26;
  v137 = v100;
  v138 = v101;
  WebCore::RenderedPosition::RenderedPosition((uint64_t)&v147, (WebCore::Position *)&v136, (const WebCore::Node *)v102);
  v28 = v136;
  v136 = 0;
  if (v28)
  {
    if (*((_DWORD *)v28 + 6) == 2)
    {
      if ((*((_WORD *)v28 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v28, v27);
    }
    else
    {
      *((_DWORD *)v28 + 6) -= 2;
    }
  }
  if (!(_QWORD)v157
    || !*(_QWORD *)(v157 + 8)
    || !v147
    || !*((_QWORD *)v147 + 1)
    || (WebCore::RenderedPosition::isEquivalent((WebCore::RenderedPosition *)&v157, (const WebCore::RenderedPosition *)&v147) & 1) != 0)
  {
    goto LABEL_141;
  }
  if (!WebCore::RenderedPosition::atLeftBoundaryOfBidiRun((unsigned int *)&v157, 1, 0))
  {
    if (WebCore::RenderedPosition::atRightBoundaryOfBidiRun((unsigned int *)&v157, 1, 0))
    {
      v36 = WebCore::RenderedPosition::bidiLevelOnLeft((WebCore::RenderedPosition *)&v157);
      if ((WebCore::RenderedPosition::atLeftBoundaryOfBidiRun((unsigned int *)&v147, 0, v36) & 1) != 0)
        goto LABEL_141;
      v37 = WebCore::RenderedPosition::bidiLevelOnLeft((WebCore::RenderedPosition *)&v157);
      WebCore::RenderedPosition::rightBoundaryOfBidiRun((WebCore::RenderedPosition *)&v147, v37, (uint64_t)&v136);
      isEquivalent = WebCore::RenderedPosition::isEquivalent((WebCore::RenderedPosition *)&v157, (const WebCore::RenderedPosition *)&v136);
      if (v146)
      {
        if (v145 != -1)
          ((void (*)(WebCore::Node **, _BYTE *))off_1E33ACC60[v145])(v135, v144);
        v145 = -1;
      }
      if (v143)
      {
        if (v142 != -1)
          ((void (*)(WebCore::Node **, _BYTE *))off_1E33ACC60[v142])(v135, v141);
        v142 = -1;
      }
      if (v140 != -1)
        ((void (*)(WebCore::Node **, int *))off_1E33ACC60[v140])(v135, &v137);
      v140 = -1;
      v39 = v136;
      v136 = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 1)
        {
          WTF::fastFree(v39, v27);
          if (!isEquivalent)
            goto LABEL_141;
          goto LABEL_90;
        }
        --*(_DWORD *)v39;
      }
      if (!isEquivalent)
        goto LABEL_141;
LABEL_90:
      WebCore::RenderedPosition::positionAtRightBoundaryOfBiDiRun((WebCore::RenderedPosition *)&v157, (uint64_t)v135);
      goto LABEL_91;
    }
    if (!WebCore::RenderedPosition::atLeftBoundaryOfBidiRun((unsigned int *)&v147, 1, 0))
      goto LABEL_118;
    v42 = WebCore::RenderedPosition::bidiLevelOnRight((WebCore::RenderedPosition *)&v147);
    WebCore::RenderedPosition::leftBoundaryOfBidiRun((WebCore::RenderedPosition *)&v157, v42, (uint64_t)&v136);
    v44 = WebCore::RenderedPosition::isEquivalent((WebCore::RenderedPosition *)&v147, (const WebCore::RenderedPosition *)&v136);
    if (v146)
    {
      if (v145 != -1)
        ((void (*)(WebCore::Node **, _BYTE *))off_1E33ACC60[v145])(v135, v144);
      v145 = -1;
    }
    if (v143)
    {
      if (v142 != -1)
        ((void (*)(WebCore::Node **, _BYTE *))off_1E33ACC60[v142])(v135, v141);
      v142 = -1;
    }
    if (v140 != -1)
      ((void (*)(WebCore::Node **, int *))off_1E33ACC60[v140])(v135, &v137);
    v140 = -1;
    v45 = v136;
    v136 = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 1)
      {
        WTF::fastFree(v45, v43);
        if (v44)
          goto LABEL_110;
        goto LABEL_118;
      }
      --*(_DWORD *)v45;
    }
    if (v44)
    {
LABEL_110:
      WebCore::RenderedPosition::positionAtLeftBoundaryOfBiDiRun((WebCore::RenderedPosition *)&v147, (uint64_t)v135);
LABEL_134:
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v135, (uint64_t)&v136);
      v139 = 1;
      v49 = v136;
      v136 = 0;
      v50 = v99;
      v99 = v49;
      if (v50)
      {
        if (*((_DWORD *)v50 + 6) == 2)
        {
          if ((*((_WORD *)v50 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v50, v27);
        }
        else
        {
          *((_DWORD *)v50 + 6) -= 2;
        }
      }
      v100 = v137;
      v101 = v138;
      v102 = 1;
      goto LABEL_138;
    }
LABEL_118:
    if (!WebCore::RenderedPosition::atRightBoundaryOfBidiRun((unsigned int *)&v147, 1, 0))
      goto LABEL_141;
    v46 = WebCore::RenderedPosition::bidiLevelOnLeft((WebCore::RenderedPosition *)&v147);
    WebCore::RenderedPosition::rightBoundaryOfBidiRun((WebCore::RenderedPosition *)&v157, v46, (uint64_t)&v136);
    v47 = WebCore::RenderedPosition::isEquivalent((WebCore::RenderedPosition *)&v147, (const WebCore::RenderedPosition *)&v136);
    if (v146)
    {
      if (v145 != -1)
        ((void (*)(WebCore::Node **, _BYTE *))off_1E33ACC60[v145])(v135, v144);
      v145 = -1;
    }
    if (v143)
    {
      if (v142 != -1)
        ((void (*)(WebCore::Node **, _BYTE *))off_1E33ACC60[v142])(v135, v141);
      v142 = -1;
    }
    if (v140 != -1)
      ((void (*)(WebCore::Node **, int *))off_1E33ACC60[v140])(v135, &v137);
    v140 = -1;
    v48 = v136;
    v136 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 1)
      {
        WTF::fastFree(v48, v27);
        if (!v47)
          goto LABEL_141;
LABEL_133:
        WebCore::RenderedPosition::positionAtRightBoundaryOfBiDiRun((WebCore::RenderedPosition *)&v147, (uint64_t)v135);
        goto LABEL_134;
      }
      --*(_DWORD *)v48;
    }
    if (!v47)
      goto LABEL_141;
    goto LABEL_133;
  }
  v29 = WebCore::RenderedPosition::bidiLevelOnRight((WebCore::RenderedPosition *)&v157);
  if ((WebCore::RenderedPosition::atRightBoundaryOfBidiRun((unsigned int *)&v147, 0, v29) & 1) != 0)
    goto LABEL_141;
  v30 = WebCore::RenderedPosition::bidiLevelOnRight((WebCore::RenderedPosition *)&v157);
  WebCore::RenderedPosition::leftBoundaryOfBidiRun((WebCore::RenderedPosition *)&v147, v30, (uint64_t)&v136);
  v31 = WebCore::RenderedPosition::isEquivalent((WebCore::RenderedPosition *)&v157, (const WebCore::RenderedPosition *)&v136);
  if (v146)
  {
    if (v145 != -1)
      ((void (*)(WebCore::Node **, _BYTE *))off_1E33ACC60[v145])(v135, v144);
    v145 = -1;
  }
  if (v143)
  {
    if (v142 != -1)
      ((void (*)(WebCore::Node **, _BYTE *))off_1E33ACC60[v142])(v135, v141);
    v142 = -1;
  }
  if (v140 != -1)
    ((void (*)(WebCore::Node **, int *))off_1E33ACC60[v140])(v135, &v137);
  v140 = -1;
  v32 = v136;
  v136 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 1)
    {
      WTF::fastFree(v32, v27);
      if (v31)
        goto LABEL_63;
      goto LABEL_141;
    }
    --*(_DWORD *)v32;
  }
  if (v31)
  {
LABEL_63:
    WebCore::RenderedPosition::positionAtLeftBoundaryOfBiDiRun((WebCore::RenderedPosition *)&v157, (uint64_t)v135);
LABEL_91:
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v135, (uint64_t)&v136);
    v139 = 1;
    v40 = v136;
    v136 = 0;
    v41 = v107;
    v107 = v40;
    if (v41)
    {
      if (*((_DWORD *)v41 + 6) == 2)
      {
        if ((*((_WORD *)v41 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v41, v27);
      }
      else
      {
        *((_DWORD *)v41 + 6) -= 2;
      }
    }
    v108 = v137;
    v109 = v138;
    v110 = 1;
LABEL_138:
    v51 = v135[0];
    v135[0] = 0;
    if (v51)
    {
      if (*((_DWORD *)v51 + 6) == 2)
      {
        if ((*((_WORD *)v51 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v51, v27);
      }
      else
      {
        *((_DWORD *)v51 + 6) -= 2;
      }
    }
  }
LABEL_141:
  if (v156)
  {
    if (v155 != -1)
      ((void (*)(WTF **, uint64_t *))off_1E33ACC60[v155])(&v136, &v154);
    v155 = -1;
  }
  if (v153)
  {
    if (v152 != -1)
      ((void (*)(WTF **, uint64_t *))off_1E33ACC60[v152])(&v136, &v151);
    v152 = -1;
  }
  if (v150 != -1)
    ((void (*)(WTF **, int *))off_1E33ACC60[v150])(&v136, &v148);
  v150 = -1;
  v52 = v147;
  v147 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 1)
      WTF::fastFree(v52, v27);
    else
      --*(_DWORD *)v52;
  }
  if (v165)
  {
    if (v164 != -1)
      ((void (*)(WTF **, uint64_t *))off_1E33ACC60[v164])(&v147, &v163);
    v164 = -1;
  }
  if (v162)
  {
    if (v161 != -1)
      ((void (*)(WTF **, uint64_t *))off_1E33ACC60[v161])(&v147, &v160);
    v161 = -1;
  }
  if (v159 != -1)
    ((void (*)(WTF **, char *))off_1E33ACC60[v159])(&v147, (char *)&v157 + 8);
  v159 = -1;
  v53 = (WTF *)v157;
  *(_QWORD *)&v157 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 1)
      WTF::fastFree(v53, v27);
    else
      --*(_DWORD *)v53;
  }
LABEL_167:
  if (WebCore::operator==((uint64_t *)&v107, (uint64_t *)&v111) && WebCore::operator==((uint64_t *)&v99, (uint64_t *)&v103))
  {
    if (*(_QWORD *)(a1 + 160))
      v55 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    else
      v55 = 0;
    if (v55)
    {
      if (*(_QWORD *)(a1 + 88) == v121)
      {
        if ((*(_BYTE *)(a1 + 100) & 8) == 0 && ((v56 = *(_BYTE *)(a1 + 100) & 7, v56 == 4) || v56 == 2))
          v57 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)(a1 + 88));
        else
          v57 = *(_DWORD *)(a1 + 96);
        if ((v123 & 8) == 0 && ((v83 = v123 & 7, v83 == 4) || v83 == 2))
          v84 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)&v121);
        else
          v84 = v122;
        if (v57 == v84 && ((v123 ^ *(_BYTE *)(a1 + 100)) & 7) == 0)
        {
          v85 = *(_QWORD *)(a1 + 160);
          if (v85)
          {
            v86 = *(_DWORD *)(v85 + 24);
            *(_DWORD *)(v85 + 24) = v86 + 2;
            LODWORD(v157) = *(_DWORD *)(a1 + 168);
            BYTE4(v157) = *(_BYTE *)(a1 + 172);
            *(_DWORD *)(v85 + 24) = v86 + 4;
          }
          else
          {
            LODWORD(v157) = *(_DWORD *)(a1 + 168);
            BYTE4(v157) = *(_BYTE *)(a1 + 172);
          }
          v87 = v115;
          v115 = (WebCore::Node *)v85;
          if (v87)
          {
            if (*((_DWORD *)v87 + 6) == 2)
            {
              if ((*((_WORD *)v87 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v87, v54);
            }
            else
            {
              *((_DWORD *)v87 + 6) -= 2;
            }
          }
          v116 = v157;
          v117 = BYTE4(v157);
          WebCore::VisibleSelection::validate((uint64_t)&v115, 0);
          if (v85)
          {
            if (*(_DWORD *)(v85 + 24) == 2)
            {
              if ((*(_WORD *)(v85 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v85, v54);
            }
            else
            {
              *(_DWORD *)(v85 + 24) -= 2;
            }
          }
        }
      }
      v88 = *(_QWORD *)(a1 + 160);
      *(_QWORD *)(a1 + 160) = 0;
      if (v88)
      {
        if (*(_DWORD *)(v88 + 24) == 2)
        {
          if ((*(_WORD *)(v88 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v88, v54);
        }
        else
        {
          *(_DWORD *)(v88 + 24) -= 2;
        }
      }
      *(_DWORD *)(a1 + 168) = 0;
      *(_BYTE *)(a1 + 172) = 0;
      *(_BYTE *)(a1 + 176) = 1;
    }
  }
  else
  {
    v58 = v111;
    if (v111)
      *((_DWORD *)v111 + 6) += 2;
    v59 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v58;
    if (v59)
    {
      if (*(_DWORD *)(v59 + 24) == 2)
      {
        if ((*(_WORD *)(v59 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v59, v54);
      }
      else
      {
        *(_DWORD *)(v59 + 24) -= 2;
      }
    }
    *(_DWORD *)(a1 + 168) = v112;
    *(_BYTE *)(a1 + 172) = v113;
    *(_BYTE *)(a1 + 176) = v114;
    v60 = v107;
    if (v107)
    {
      v61 = *((_DWORD *)v107 + 6);
      LODWORD(v157) = v108;
      BYTE4(v157) = v109;
      *((_DWORD *)v107 + 6) = v61 + 4;
    }
    else
    {
      LODWORD(v157) = v108;
      BYTE4(v157) = v109;
    }
    v62 = v115;
    v115 = v60;
    if (v62)
    {
      if (*((_DWORD *)v62 + 6) == 2)
      {
        if ((*((_WORD *)v62 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v62, v54);
      }
      else
      {
        *((_DWORD *)v62 + 6) -= 2;
      }
    }
    v116 = v157;
    v117 = BYTE4(v157);
    WebCore::VisibleSelection::validate((uint64_t)&v115, 0);
    if (v60)
    {
      if (*((_DWORD *)v60 + 6) == 2)
      {
        if ((*((_WORD *)v60 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v60, v63);
      }
      else
      {
        *((_DWORD *)v60 + 6) -= 2;
      }
    }
    v64 = v99;
    if (v99)
    {
      v65 = *((_DWORD *)v99 + 6);
      LODWORD(v157) = v100;
      BYTE4(v157) = v101;
      *((_DWORD *)v99 + 6) = v65 + 4;
    }
    else
    {
      LODWORD(v157) = v100;
      BYTE4(v157) = v101;
    }
    v66 = v118;
    v118 = v64;
    if (v66)
    {
      if (*((_DWORD *)v66 + 6) == 2)
      {
        if ((*((_WORD *)v66 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v66, v63);
      }
      else
      {
        *((_DWORD *)v66 + 6) -= 2;
      }
    }
    v119 = v157;
    v120 = BYTE4(v157);
    WebCore::VisibleSelection::validate((uint64_t)&v115, 0);
    if (v64)
    {
      if (*((_DWORD *)v64 + 6) == 2)
      {
        if ((*((_WORD *)v64 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v64, v67);
      }
      else
      {
        *((_DWORD *)v64 + 6) -= 2;
      }
    }
  }
  if (v16)
    v68 = 2;
  else
    v68 = 0;
  v134 = v134 & 0xFD | v68;
  if ((WebCore::operator==(a1 + 56, (uint64_t)&v115) & 1) == 0)
  {
    v70 = *(WebCore::Document **)(*(_QWORD *)(a1 + 32) + 8);
    v71 = *((_QWORD *)v70 + 66);
    if (v71)
    {
      v72 = *(_QWORD *)(v71 + 8);
      if (v72)
      {
        if (*(_BYTE *)(v72 + 376))
          goto LABEL_207;
      }
    }
    v73 = *((_QWORD *)v70 + 382);
    if (!v73)
    {
      v94 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v94, v70);
      v96 = (WebCore::Editor *)*((_QWORD *)v70 + 382);
      *((_QWORD *)v70 + 382) = v94;
      if (v96)
      {
        WebCore::Editor::~Editor(v96, v95);
        if (*(_DWORD *)v97)
        {
          *(_QWORD *)(v97 + 496) = 0;
          *(_OWORD *)(v97 + 464) = 0u;
          *(_OWORD *)(v97 + 480) = 0u;
          *(_OWORD *)(v97 + 432) = 0u;
          *(_OWORD *)(v97 + 448) = 0u;
          *(_OWORD *)(v97 + 400) = 0u;
          *(_OWORD *)(v97 + 416) = 0u;
          *(_OWORD *)(v97 + 368) = 0u;
          *(_OWORD *)(v97 + 384) = 0u;
          *(_OWORD *)(v97 + 336) = 0u;
          *(_OWORD *)(v97 + 352) = 0u;
          *(_OWORD *)(v97 + 304) = 0u;
          *(_OWORD *)(v97 + 320) = 0u;
          *(_OWORD *)(v97 + 272) = 0u;
          *(_OWORD *)(v97 + 288) = 0u;
          *(_OWORD *)(v97 + 240) = 0u;
          *(_OWORD *)(v97 + 256) = 0u;
          *(_OWORD *)(v97 + 208) = 0u;
          *(_OWORD *)(v97 + 224) = 0u;
          *(_OWORD *)(v97 + 176) = 0u;
          *(_OWORD *)(v97 + 192) = 0u;
          *(_OWORD *)(v97 + 144) = 0u;
          *(_OWORD *)(v97 + 160) = 0u;
          *(_OWORD *)(v97 + 112) = 0u;
          *(_OWORD *)(v97 + 128) = 0u;
          *(_OWORD *)(v97 + 80) = 0u;
          *(_OWORD *)(v97 + 96) = 0u;
          *(_OWORD *)(v97 + 48) = 0u;
          *(_OWORD *)(v97 + 64) = 0u;
          *(_OWORD *)(v97 + 16) = 0u;
          *(_OWORD *)(v97 + 32) = 0u;
          *(_OWORD *)v97 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v97, v98);
        }
      }
      v73 = *((_QWORD *)v70 + 382);
    }
    if (WebCore::Editor::shouldChangeSelection(v73, (WebCore::VisibleSelection *)(a1 + 56), (WebCore::VisibleSelection *)&v115, v133, 0))
    {
LABEL_207:
      v157 = 0uLL;
      v74 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
      v75 = HIBYTE(v133) == 1;
      v76 = (v74 & v75) == 0;
      if ((v74 & v75) != 0)
        v77 = 2;
      else
        v77 = 0;
      v78 = 5;
      if (v76)
        v78 = 0;
      LODWORD(v157) = v77;
      *(_QWORD *)((char *)&v157 + 4) = v78;
      HIDWORD(v157) = 0;
      WebCore::FrameSelection::setSelection(a1, (uint64_t)&v115, 7u, v157, HIDWORD(v78), 0, a3);
    }
  }
  v79 = v99;
  v99 = 0;
  if (v79)
  {
    if (*((_DWORD *)v79 + 6) == 2)
    {
      if ((*((_WORD *)v79 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v79, v69);
    }
    else
    {
      *((_DWORD *)v79 + 6) -= 2;
    }
  }
  v80 = v103;
  v103 = 0;
  if (v80)
  {
    if (*((_DWORD *)v80 + 6) == 2)
    {
      if ((*((_WORD *)v80 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v80, v69);
    }
    else
    {
      *((_DWORD *)v80 + 6) -= 2;
    }
  }
  v81 = v107;
  v107 = 0;
  if (v81)
  {
    if (*((_DWORD *)v81 + 6) == 2)
    {
      if ((*((_WORD *)v81 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v81, v69);
    }
    else
    {
      *((_DWORD *)v81 + 6) -= 2;
    }
  }
  v82 = v111;
  v111 = 0;
  if (v82)
  {
    if (*((_DWORD *)v82 + 6) == 2)
    {
      if ((*((_WORD *)v82 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v82, v69);
    }
    else
    {
      *((_DWORD *)v82 + 6) -= 2;
    }
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v115);
}

BOOL WebCore::VisibleSelection::isNoneOrOrphaned(WebCore::VisibleSelection *this)
{
  uint64_t v1;
  uint64_t v2;

  if (!*((_BYTE *)this + 97))
    return 1;
  v1 = *((_QWORD *)this + 8);
  if (v1)
  {
    if ((*(_BYTE *)(v1 + 22) & 8) == 0)
      return 1;
  }
  v2 = *((_QWORD *)this + 10);
  return v2 && (*(_BYTE *)(v2 + 22) & 8) == 0;
}

void WebCore::FrameSelection::clear(WebCore::FrameSelection *this)
{
  uint64_t v1;
  int v2;
  char v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  int v17;
  char v18;
  __int16 v19;
  char v20;

  *((_BYTE *)this + 184) = 0;
  v1 = 0;
  v2 = 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 1;
  v20 = 1;
  WebCore::FrameSelection::setSelection(this, &v1, 6, 0, 0, 0, 0);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v1);
}

uint64_t WebCore::FrameSelection::setNodeFlags(uint64_t this, WebCore::VisibleSelection *a2, int a3)
{
  uint64_t v3;
  __int16 v4;
  __int16 v5;
  uint64_t *v6;
  uint64_t v7;
  __int16 v8;
  __int16 v9;
  uint64_t *v10;
  uint64_t v11;
  __int16 v12;
  __int16 v13;
  uint64_t *v14;
  uint64_t v15;
  __int16 v16;
  __int16 v17;
  uint64_t *v18;
  uint64_t v19;
  __int16 v20;
  __int16 v21;
  uint64_t *v22;
  uint64_t v23;
  __int16 v24;
  __int16 v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if (this && *(_QWORD *)(this + 8))
  {
    v3 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      if (a3)
        v4 = 2048;
      else
        v4 = 0;
      do
      {
        v5 = *(_WORD *)(v3 + 30);
        if (a3 == (unsigned __int16)(v5 & 0x800) >> 11)
          break;
        *(_WORD *)(v3 + 30) = v5 & 0xF7FF | v4;
        if ((*(_WORD *)(v3 + 28) & 0x80) != 0)
        {
          v27 = *(_QWORD *)(v3 + 200);
          if (!v27)
            break;
          v6 = (uint64_t *)(v27 + 8);
        }
        else
        {
          v6 = (uint64_t *)(v3 + 32);
        }
        v3 = *v6;
      }
      while (v3);
    }
    v7 = *((_QWORD *)a2 + 2);
    if (v7)
    {
      if (a3)
        v8 = 2048;
      else
        v8 = 0;
      do
      {
        v9 = *(_WORD *)(v7 + 30);
        if (a3 == (unsigned __int16)(v9 & 0x800) >> 11)
          break;
        *(_WORD *)(v7 + 30) = v9 & 0xF7FF | v8;
        if ((*(_WORD *)(v7 + 28) & 0x80) != 0)
        {
          v28 = *(_QWORD *)(v7 + 200);
          if (!v28)
            break;
          v10 = (uint64_t *)(v28 + 8);
        }
        else
        {
          v10 = (uint64_t *)(v7 + 32);
        }
        v7 = *v10;
      }
      while (v7);
    }
    v11 = *((_QWORD *)a2 + 4);
    if (v11)
    {
      if (a3)
        v12 = 2048;
      else
        v12 = 0;
      do
      {
        v13 = *(_WORD *)(v11 + 30);
        if (a3 == (unsigned __int16)(v13 & 0x800) >> 11)
          break;
        *(_WORD *)(v11 + 30) = v13 & 0xF7FF | v12;
        if ((*(_WORD *)(v11 + 28) & 0x80) != 0)
        {
          v29 = *(_QWORD *)(v11 + 200);
          if (!v29)
            break;
          v14 = (uint64_t *)(v29 + 8);
        }
        else
        {
          v14 = (uint64_t *)(v11 + 32);
        }
        v11 = *v14;
      }
      while (v11);
    }
    v15 = *((_QWORD *)a2 + 6);
    if (v15)
    {
      if (a3)
        v16 = 2048;
      else
        v16 = 0;
      do
      {
        v17 = *(_WORD *)(v15 + 30);
        if (a3 == (unsigned __int16)(v17 & 0x800) >> 11)
          break;
        *(_WORD *)(v15 + 30) = v17 & 0xF7FF | v16;
        if ((*(_WORD *)(v15 + 28) & 0x80) != 0)
        {
          v30 = *(_QWORD *)(v15 + 200);
          if (!v30)
            break;
          v18 = (uint64_t *)(v30 + 8);
        }
        else
        {
          v18 = (uint64_t *)(v15 + 32);
        }
        v15 = *v18;
      }
      while (v15);
    }
    v19 = *((_QWORD *)a2 + 8);
    if (v19)
    {
      if (a3)
        v20 = 2048;
      else
        v20 = 0;
      do
      {
        v21 = *(_WORD *)(v19 + 30);
        if (a3 == (unsigned __int16)(v21 & 0x800) >> 11)
          break;
        *(_WORD *)(v19 + 30) = v21 & 0xF7FF | v20;
        if ((*(_WORD *)(v19 + 28) & 0x80) != 0)
        {
          v31 = *(_QWORD *)(v19 + 200);
          if (!v31)
            break;
          v22 = (uint64_t *)(v31 + 8);
        }
        else
        {
          v22 = (uint64_t *)(v19 + 32);
        }
        v19 = *v22;
      }
      while (v19);
    }
    v23 = *((_QWORD *)a2 + 10);
    if (v23)
    {
      if (a3)
        v24 = 2048;
      else
        v24 = 0;
      do
      {
        v25 = *(_WORD *)(v23 + 30);
        if (a3 == (unsigned __int16)(v25 & 0x800) >> 11)
          break;
        *(_WORD *)(v23 + 30) = v25 & 0xF7FF | v24;
        if ((*(_WORD *)(v23 + 28) & 0x80) != 0)
        {
          v32 = *(_QWORD *)(v23 + 200);
          if (!v32)
            return this;
          v26 = (uint64_t *)(v32 + 8);
        }
        else
        {
          v26 = (uint64_t *)(v23 + 32);
        }
        v23 = *v26;
      }
      while (v23);
    }
  }
  return this;
}

uint64_t WebCore::FrameSelection::setFocusedElementIfNeeded(uint64_t result, __int16 a2)
{
  uint64_t v2;
  uint64_t v4;
  const WebCore::Node *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::Document *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  WebCore::Node *v19;
  WebCore::Node *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  __int16 v25;
  WebCore::Node *v26;

  if (*(_BYTE *)(result + 153))
  {
    v2 = result;
    if ((*(_WORD *)(result + 256) & 4) != 0)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 680) + 664);
      if ((v4 & 0x4000000000000) != 0
        && (WebCore::enclosingAnchorElement((uint64_t *)(result + 88), &v26), (v20 = v26) != 0))
      {
        v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 528) + 8);
        v22 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v21 + 24) + 8) + 72);
        ++*(_DWORD *)v22;
        WORD2(v23) = 0;
        LODWORD(v23) = 0;
        WebCore::FocusController::setFocusedElement(v22, (uint64_t)v20, (unsigned int *)v21, &v23);
        if (!*(_DWORD *)v22)
        {
          __break(0xC471u);
          JUMPOUT(0x195ADDCD4);
        }
        --*(_DWORD *)v22;
LABEL_17:
        result = (uint64_t)v26;
        v26 = 0;
        if (result)
        {
          if (*(_DWORD *)(result + 24) == 2)
          {
            if ((*(_WORD *)(result + 30) & 0x400) == 0)
              return WebCore::Node::removedLastRef((WebCore::Node *)result);
          }
          else
          {
            *(_DWORD *)(result + 24) -= 2;
          }
        }
      }
      else
      {
        result = WebCore::editableRootForPosition(v2 + 120, 0);
        if (!result)
          goto LABEL_30;
        *(_DWORD *)(result + 24) += 2;
        v26 = (WebCore::Node *)result;
        do
        {
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 568))(result)
            && (WebCore::isFrameElement(*((_QWORD *)v26 + 8), v5) & 1) == 0)
          {
            v25 = 0;
            v24 = 0;
            if ((a2 & 0x2000) != 0)
              HIBYTE(v24) = 2;
            v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 528);
            if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0 && (v8 = *(_QWORD *)(v7 + 24)) != 0)
              v9 = *(_QWORD *)(v8 + 8);
            else
              v9 = 0;
            WebCore::Page::checkedFocusController(v9, &v23);
            WebCore::FocusController::setFocusedElement(v23, (uint64_t)v26, *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 528) + 8), &v24);
            v10 = v23;
            v23 = 0;
            if (v10)
            {
              if (!*v10)
                goto LABEL_47;
              --*v10;
            }
            goto LABEL_17;
          }
          v11 = WebCore::Node::parentOrShadowHostElement(v26);
          WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v26, v11);
          result = (uint64_t)v26;
        }
        while (v26);
        v12 = *(_QWORD *)(v2 + 32);
        if (v12)
          v13 = *(WebCore::Document **)(v12 + 8);
        else
          v13 = 0;
        WebCore::Document::setFocusedElement(v13, 0);
        result = (uint64_t)v26;
        v26 = 0;
        if (result)
        {
          if (*(_DWORD *)(result + 24) == 2)
          {
            if ((*(_WORD *)(result + 30) & 0x400) == 0)
              result = WebCore::Node::removedLastRef((WebCore::Node *)result);
          }
          else
          {
            *(_DWORD *)(result + 24) -= 2;
          }
        }
LABEL_30:
        if ((v4 & 0x4000000000000) != 0)
        {
          v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 528);
          if (v14 && (v15 = *(_QWORD *)(v14 + 8)) != 0 && (v16 = *(_QWORD *)(v15 + 24)) != 0)
            v17 = *(_QWORD *)(v16 + 8);
          else
            v17 = 0;
          WebCore::Page::checkedFocusController(v17, &v26);
          v18 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 528) + 8);
          WORD2(v23) = 0;
          LODWORD(v23) = 0;
          result = WebCore::FocusController::setFocusedElement(v26, 0, v18, &v23);
          v19 = v26;
          v26 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19)
            {
              --*(_DWORD *)v19;
              return result;
            }
LABEL_47:
            __break(0xC471u);
            JUMPOUT(0x195ADDC94);
          }
        }
      }
    }
  }
  return result;
}

void WebCore::FrameSelection::updateSelectionAppearanceNow(WebCore::FrameSelection *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      *(_DWORD *)(v3 + 24) += 2;
      if (*(_QWORD *)(v3 + 1944))
      {
        if (!*(_BYTE *)(v3 + 3405))
        {
          WebCore::Document::updateStyleIfNeeded((WebCore::Document *)v3);
          if ((*((_WORD *)this + 128) & 0x20) != 0)
            WebCore::FrameSelection::updateAppearance(this);
        }
      }
      if (*(_DWORD *)(v3 + 24) == 2)
      {
        if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
      }
      else
      {
        *(_DWORD *)(v3 + 24) -= 2;
      }
    }
  }
}

void WebCore::FrameSelection::updateAppearance(WebCore::FrameSelection *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  const WebCore::VisiblePosition *v11;
  const WebCore::VisiblePosition *v12;
  WebCore::Node *v13;
  WebCore::Node *v14;
  int v15;
  uint64_t v16;
  int v17;
  WebCore::Node *v18;
  const WebCore::Node *v19;
  WebCore::Node *v20;
  WebCore::Node *v21;
  WebCore::Node *v22;
  const WebCore::Node *v23;
  WebCore::Node *v24;
  WebCore::Node *v25;
  WebCore::Node *v26;
  WebCore::Node *v27;
  uint64_t v28;
  uint64_t (*v29)();
  uint64_t (*v30)();
  int v31;
  int v32;
  const WebCore::VisiblePosition *v33;
  int v34;
  int v35;
  const WebCore::VisiblePosition *v36;
  BOOL v37;
  WebCore::Node *v38;
  WebCore::Node *v39;
  WebCore::RenderObject *v40;
  int v41;
  int v42;
  int v43;
  WebCore::RenderObject *v44;
  int v45;
  unsigned int v46;
  void *v47;
  WTF *v48;
  WTF *v49;
  int v50;
  WebCore::Node *v51;
  WebCore::Node *v52;
  WebCore::Node *v53;
  WebCore::Node *v54;
  WebCore::Node *v55;
  WebCore::Node *v56;
  WebCore::Node *v57;
  WebCore::Node *v58;
  WebCore::Node *v59;
  WebCore::Node *v60;
  WebCore::Node *v61;
  WebCore::Node *v62;
  WebCore::Node *v63;
  int v64;
  char v65;
  char v66;
  WebCore::Node *v67;
  unsigned int v68;
  char v69;
  WebCore::Node *v70;
  unsigned int v71;
  char v72;
  WebCore::Node *v73;
  unsigned int v74;
  char v75;
  WebCore::Node *v76;
  int v77;
  char v78;
  char v79;
  WebCore::Node *v80;
  int v81;
  char v82;
  char v83;
  WebCore::Node *v84;
  unsigned int v85;
  char v86;
  WebCore::Node *v87;
  unsigned int v88;
  char v89;
  unsigned __int8 v90;
  unsigned __int8 v91;
  uint64_t v92;
  int v93;
  char v94;
  uint64_t v95;
  int v96;
  char v97;
  uint64_t v98;
  int v99;
  char v100;
  uint64_t v101;
  int v102;
  char v103;
  uint64_t v104;
  int v105;
  char v106;
  uint64_t v107;
  int v108;
  char v109;
  __int16 v110;
  char v111;
  WebCore::Node *v112;
  WTF *v113;
  uint64_t v114;

  if ((*((_WORD *)this + 128) & 0x100) == 0)
    return;
  v1 = *((_QWORD *)this + 7);
  if (v1)
    *(_DWORD *)(v1 + 24) += 2;
  v92 = v1;
  v93 = *((_DWORD *)this + 16);
  v94 = *((_BYTE *)this + 68);
  v2 = *((_QWORD *)this + 9);
  if (v2)
    *(_DWORD *)(v2 + 24) += 2;
  v95 = v2;
  v96 = *((_DWORD *)this + 20);
  v97 = *((_BYTE *)this + 84);
  v3 = *((_QWORD *)this + 11);
  if (v3)
    *(_DWORD *)(v3 + 24) += 2;
  v98 = v3;
  v99 = *((_DWORD *)this + 24);
  v100 = *((_BYTE *)this + 100);
  v4 = *((_QWORD *)this + 13);
  if (v4)
    *(_DWORD *)(v4 + 24) += 2;
  v101 = v4;
  v102 = *((_DWORD *)this + 28);
  v103 = *((_BYTE *)this + 116);
  v5 = *((_QWORD *)this + 15);
  if (v5)
    *(_DWORD *)(v5 + 24) += 2;
  v104 = v5;
  v105 = *((_DWORD *)this + 32);
  v106 = *((_BYTE *)this + 132);
  v6 = *((_QWORD *)this + 17);
  if (v6)
    *(_DWORD *)(v6 + 24) += 2;
  v107 = v6;
  v108 = *((_DWORD *)this + 36);
  v109 = *((_BYTE *)this + 148);
  v110 = *((_WORD *)this + 76);
  v111 = *((_BYTE *)this + 154);
  v7 = *((_QWORD *)this + 4);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
      *(_DWORD *)(v8 + 24) += 2;
  }
  else
  {
    v8 = 0;
  }
  v9 = HIBYTE(v110);
  v10 = v110;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v104, (uint64_t)&v112);
  LOBYTE(v114) = 1;
  if (v9 != 2 && !v10)
  {
    v55 = v112;
    if (v112)
    {
      *((_DWORD *)v112 + 6) += 2;
      v80 = v55;
      v81 = (int)v113;
      v82 = BYTE4(v113);
      v83 = 0;
      if (!WebCore::inSameLine((WebCore *)&v112, (const WebCore::VisiblePosition *)&v80, v11))
        LOBYTE(v114) = 0;
      v56 = v80;
      v80 = 0;
      if (v56)
      {
        if (*((_DWORD *)v56 + 6) == 2)
        {
          if ((*((_WORD *)v56 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v56);
        }
        else
        {
          *((_DWORD *)v56 + 6) -= 2;
        }
      }
    }
  }
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v107, (uint64_t)&v76);
  v79 = 1;
  if (v9 == 2 || !v10)
  {
    v57 = v76;
    if (v76)
    {
      *((_DWORD *)v76 + 6) += 2;
      v80 = v57;
      v81 = v77;
      v82 = v78;
      v83 = 0;
      if (!WebCore::inSameLine((WebCore *)&v76, (const WebCore::VisiblePosition *)&v80, v12))
        v79 = 0;
      v58 = v80;
      v80 = 0;
      if (v58)
      {
        if (*((_DWORD *)v58 + 6) == 2)
        {
          if ((*((_WORD *)v58 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v58);
        }
        else
        {
          *((_DWORD *)v58 + 6) -= 2;
        }
      }
    }
  }
  WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v80, (const WebCore::VisiblePosition *)&v112, (const WebCore::VisiblePosition *)&v76, 0);
  v13 = v76;
  v76 = 0;
  if (v13)
  {
    if (*((_DWORD *)v13 + 6) == 2)
    {
      if ((*((_WORD *)v13 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v13);
    }
    else
    {
      *((_DWORD *)v13 + 6) -= 2;
    }
  }
  v14 = v112;
  v112 = 0;
  if (v14)
  {
    if (*((_DWORD *)v14 + 6) == 2)
    {
      if ((*((_WORD *)v14 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v14);
    }
    else
    {
      *((_DWORD *)v14 + 6) -= 2;
    }
  }
  v15 = WebCore::ScriptDisallowedScope::s_count++;
  v16 = *(_QWORD *)(v8 + 1944);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 + 16);
    *(_DWORD *)(v16 + 16) = v17 + 1;
    if (v91 == 2)
    {
      if (v17 == -1)
      {
        __break(0xC471u);
        JUMPOUT(0x195ADE4D8);
      }
      *(_DWORD *)(v16 + 16) = v17;
      WebCore::ScriptDisallowedScope::s_count = v15;
      v18 = v84;
      if (v84)
        *((_DWORD *)v84 + 6) += 2;
      v73 = v18;
      v74 = v85;
      v75 = v86;
      WebCore::Position::downstream((uint64_t)&v73, (WebCore::Node *)1, (uint64_t)&v70);
      if (WebCore::Position::isCandidate((WebCore::Position *)&v70, v19))
      {
        v20 = v70;
        if (v70)
          *((_DWORD *)v70 + 6) += 2;
        v21 = v73;
        v73 = v20;
        if (v21)
        {
          if (*((_DWORD *)v21 + 6) == 2)
          {
            if ((*((_WORD *)v21 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v21);
          }
          else
          {
            *((_DWORD *)v21 + 6) -= 2;
          }
        }
        v74 = v71;
        v75 = v72;
      }
      v22 = v87;
      if (v87)
        *((_DWORD *)v87 + 6) += 2;
      v67 = v22;
      v68 = v88;
      v69 = v89;
      WebCore::Position::upstream((uint64_t)&v67, (WebCore::Node *)1, (uint64_t)&v112);
      v24 = v112;
      v112 = 0;
      v25 = v70;
      v70 = v24;
      if (v25)
      {
        if (*((_DWORD *)v25 + 6) == 2)
        {
          if ((*((_WORD *)v25 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v25);
            v54 = v112;
            v71 = v113;
            v72 = BYTE4(v113);
            v112 = 0;
            if (v54)
            {
              if (*((_DWORD *)v54 + 6) == 2)
              {
                if ((*((_WORD *)v54 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v54);
              }
              else
              {
                *((_DWORD *)v54 + 6) -= 2;
              }
            }
LABEL_45:
            if (WebCore::Position::isCandidate((WebCore::Position *)&v70, v23))
            {
              v26 = v70;
              if (v70)
                *((_DWORD *)v70 + 6) += 2;
              v27 = v67;
              v67 = v26;
              if (v27)
              {
                if (*((_DWORD *)v27 + 6) == 2)
                {
                  if ((*((_WORD *)v27 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v27);
                }
                else
                {
                  *((_DWORD *)v27 + 6) -= 2;
                }
              }
              v68 = v71;
              v69 = v72;
            }
            v28 = *(_QWORD *)(v8 + 1944);
            if (v28)
              ++*(_DWORD *)(v28 + 16);
            v29 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
            if (v73)
              v30 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
            else
              v30 = 0;
            if (v30)
            {
              if (!v67)
                v29 = 0;
              if (v29)
              {
                v31 = v91;
                v32 = v90;
                WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v84, (uint64_t)&v76);
                v79 = 1;
                if (v31 != 2 && !v32)
                {
                  v59 = v76;
                  if (v76)
                  {
                    *((_DWORD *)v76 + 6) += 2;
                    v112 = v59;
                    LODWORD(v113) = v77;
                    BYTE4(v113) = v78;
                    LOBYTE(v114) = 0;
                    if (!WebCore::inSameLine((WebCore *)&v76, (const WebCore::VisiblePosition *)&v112, v33))
                      v79 = 0;
                    v60 = v112;
                    v112 = 0;
                    if (v60)
                    {
                      if (*((_DWORD *)v60 + 6) == 2)
                      {
                        if ((*((_WORD *)v60 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef(v60);
                      }
                      else
                      {
                        *((_DWORD *)v60 + 6) -= 2;
                      }
                    }
                  }
                }
                v34 = v91;
                v35 = v90;
                WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v87, (uint64_t)&v63);
                v66 = 1;
                if (v34 == 2 || !v35)
                {
                  v61 = v63;
                  if (v63)
                  {
                    *((_DWORD *)v63 + 6) += 2;
                    v112 = v61;
                    LODWORD(v113) = v64;
                    BYTE4(v113) = v65;
                    LOBYTE(v114) = 0;
                    if (!WebCore::inSameLine((WebCore *)&v63, (const WebCore::VisiblePosition *)&v112, v36))
                      v66 = 0;
                    v62 = v112;
                    v112 = 0;
                    if (v62)
                    {
                      if (*((_DWORD *)v62 + 6) == 2)
                      {
                        if ((*((_WORD *)v62 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef(v62);
                      }
                      else
                      {
                        *((_DWORD *)v62 + 6) -= 2;
                      }
                    }
                  }
                }
                v37 = WebCore::operator==((uint64_t *)&v76, (uint64_t *)&v63);
                v38 = v63;
                v63 = 0;
                if (v38)
                {
                  if (*((_DWORD *)v38 + 6) == 2)
                  {
                    if ((*((_WORD *)v38 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v38);
                  }
                  else
                  {
                    *((_DWORD *)v38 + 6) -= 2;
                  }
                }
                v39 = v76;
                v76 = 0;
                if (v39)
                {
                  if (*((_DWORD *)v39 + 6) == 2)
                  {
                    if ((*((_WORD *)v39 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v39);
                  }
                  else
                  {
                    *((_DWORD *)v39 + 6) -= 2;
                  }
                }
                if (!v37)
                {
                  v40 = (WebCore::RenderObject *)(*((_QWORD *)v73 + 8) & 0xFFFFFFFFFFFFLL);
                  if ((v75 & 8) == 0 && ((v41 = v75 & 7, v41 == 4) || v41 == 2))
                    v42 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)&v73);
                  else
                    v42 = v74;
                  v44 = (WebCore::RenderObject *)(*((_QWORD *)v67 + 8) & 0xFFFFFFFFFFFFLL);
                  if ((v69 & 8) == 0 && ((v45 = v69 & 7, v45 == 4) || v45 == 2))
                    v46 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)&v67);
                  else
                    v46 = v68;
                  WebCore::RenderRange::RenderRange((WebCore::RenderRange *)&v112, v40, v44, v42, v46);
                  WebCore::RenderSelection::set(v28 + 288, &v112, 0);
                  v48 = v113;
                  v113 = 0;
                  if (v48)
                  {
                    if (*(_DWORD *)v48 == 1)
                      WTF::fastFree(v48, v47);
                    else
                      --*(_DWORD *)v48;
                  }
                  v49 = v112;
                  v112 = 0;
                  if (v49)
                  {
                    if (*(_DWORD *)v49 == 1)
                    {
                      WTF::fastFree(v49, v47);
                      if (v28)
                        goto LABEL_98;
                      goto LABEL_100;
                    }
                    --*(_DWORD *)v49;
                  }
                }
              }
            }
            if (v28)
            {
LABEL_98:
              v50 = *(_DWORD *)(v28 + 16);
              if (!v50)
              {
                __break(0xC471u);
                JUMPOUT(0x195ADE518);
              }
              *(_DWORD *)(v28 + 16) = v50 - 1;
            }
LABEL_100:
            v51 = v67;
            v67 = 0;
            if (v51)
            {
              if (*((_DWORD *)v51 + 6) == 2)
              {
                if ((*((_WORD *)v51 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v51);
              }
              else
              {
                *((_DWORD *)v51 + 6) -= 2;
              }
            }
            v52 = v70;
            v70 = 0;
            if (v52)
            {
              if (*((_DWORD *)v52 + 6) == 2)
              {
                if ((*((_WORD *)v52 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v52);
              }
              else
              {
                *((_DWORD *)v52 + 6) -= 2;
              }
            }
            v53 = v73;
            v73 = 0;
            if (v53)
            {
              if (*((_DWORD *)v53 + 6) == 2)
              {
                if ((*((_WORD *)v53 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v53);
              }
              else
              {
                *((_DWORD *)v53 + 6) -= 2;
              }
            }
            goto LABEL_109;
          }
        }
        else
        {
          *((_DWORD *)v25 + 6) -= 2;
        }
      }
      v71 = v113;
      v72 = BYTE4(v113);
      goto LABEL_45;
    }
    if (!*(_BYTE *)(v16 + 328))
      WebCore::RenderLayer::repaintBlockSelectionGaps(*(int **)(*(_QWORD *)(v16 + 320) + 144));
    v112 = 0;
    v113 = 0;
    v114 = 0;
    WebCore::RenderSelection::set(v16 + 288, &v112, 1);
    v43 = *(_DWORD *)(v16 + 16);
    if (!v43)
    {
      __break(0xC471u);
      JUMPOUT(0x195ADE4F8);
    }
    *(_DWORD *)(v16 + 16) = v43 - 1;
    v15 = WebCore::ScriptDisallowedScope::s_count - 1;
  }
  WebCore::ScriptDisallowedScope::s_count = v15;
LABEL_109:
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v80);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v92);
}

uint64_t WebCore::removingNodeRemovesPosition(WebCore *this, WebCore::Node *a2, const WebCore::Position *a3)
{
  unsigned int v4;

  if (!a2)
    return 0;
  if (a2 == this)
    return 1;
  if ((*((_WORD *)this + 14) & 8) == 0)
    return 0;
  *((_DWORD *)this + 6) += 2;
  v4 = WebCore::Node::containsIncludingShadowDOM(this, a2);
  if (*((_DWORD *)this + 6) == 2)
  {
    if ((*((_WORD *)this + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(this);
  }
  else
  {
    *((_DWORD *)this + 6) -= 2;
  }
  return v4;
}

uint64_t WebCore::DragCaretController::clearCaretPositionWithoutUpdatingStyle(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v1 = this;
  v2 = *(_QWORD *)(this + 24);
  if (!v2)
  {
    *(_QWORD *)(this + 24) = 0;
    goto LABEL_9;
  }
  v3 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v3 + 4;
  if (v3 != -2)
  {
    *(_DWORD *)(v2 + 24) = v3 + 2;
    goto LABEL_4;
  }
  if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v2);
    v3 = *(_DWORD *)(v2 + 24) - 2;
LABEL_4:
    *(_BYTE *)(v1 + 16) = 1;
    if (v3)
    {
      *(_DWORD *)(v2 + 24) = v3;
    }
    else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v2);
    }
    goto LABEL_6;
  }
  *(_BYTE *)(this + 16) = 1;
LABEL_6:
  this = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (this)
  {
    if (*(_DWORD *)(this + 24) == 2)
    {
      if ((*(_WORD *)(this + 30) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)this);
    }
    else
    {
      *(_DWORD *)(this + 24) -= 2;
    }
  }
LABEL_9:
  *(_DWORD *)(v1 + 32) = 0;
  *(_BYTE *)(v1 + 36) = 0;
  *(_BYTE *)(v1 + 40) = 1;
  *(_QWORD *)v1 = 0;
  *(_QWORD *)(v1 + 8) = 0;
  return this;
}

void WebCore::FrameSelection::respondToNodeModification(WebCore::FrameSelection *this, WebCore::Node *a2, WebCore::Node *a3, int a4, char a5, int a6, int a7, int a8)
{
  unsigned int v14;
  WebCore::Node *v16;
  uint64_t v17;
  uint64_t (*v18)();
  uint64_t v19;
  uint64_t (*v20)();
  int v21;
  WebCore::Node *v22;
  WebCore::Node *v23;
  uint64_t v24;
  uint64_t (*v25)();
  uint64_t (*v26)();
  WebCore::Node **v27;
  WebCore::Node **v28;
  WebCore::Node *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char v35;
  const WebCore::Position *v36;
  const WebCore::Position *v37;
  WebCore::Node *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  char v42;
  uint64_t v43;
  int v44;
  char v45;
  uint64_t v46;
  int v47;
  char v48;
  uint64_t v49;
  int v50;
  char v51;
  uint64_t v52;
  int v53;
  char v54;
  __int16 v55;
  char v56;
  uint64_t v57;
  int v58;
  char v59;

  v14 = (a3 | a4) & ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 680) + 680) & 0x800000000000000) != 0);
  if (v14 == 1)
  {
    v16 = (WebCore::Node *)*((_QWORD *)this + 7);
    if (v16)
      *((_DWORD *)v16 + 6) += 2;
    v38 = v16;
    LODWORD(v39) = *((_DWORD *)this + 16);
    BYTE4(v39) = *((_BYTE *)this + 68);
    v17 = *((_QWORD *)this + 9);
    if (v17)
      *(_DWORD *)(v17 + 24) += 2;
    v57 = v17;
    v58 = *((_DWORD *)this + 20);
    v59 = *((_BYTE *)this + 84);
    if ((_DWORD)a3)
      WebCore::updatePositionForNodeRemoval((uint64_t *)&v38, a2, a3);
    if (a4)
      WebCore::updatePositionForNodeRemoval(&v57, a2, a3);
    if (v38)
      v18 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    else
      v18 = 0;
    v19 = v57;
    if (v18
      && (v57
        ? (v20 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance)
        : (v20 = 0),
          v20))
    {
      WebCore::FrameSelection::setNodeFlags(*((_QWORD *)this + 4), (WebCore::FrameSelection *)((char *)this + 56), 0);
      WebCore::VisibleSelection::setWithoutValidation((WebCore::FrameSelection *)((char *)this + 56), (const WebCore::Position *)&v38, (const WebCore::Position *)&v57);
      WebCore::FrameSelection::setNodeFlags(*((_QWORD *)this + 4), (WebCore::FrameSelection *)((char *)this + 56), 1);
      v21 = 0;
      v19 = v57;
    }
    else
    {
      v21 = 1;
    }
    v57 = 0;
    if (v19)
    {
      if (*(_DWORD *)(v19 + 24) == 2)
      {
        if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v19);
      }
      else
      {
        *(_DWORD *)(v19 + 24) -= 2;
      }
    }
    v22 = v38;
    v38 = 0;
    if (v22)
    {
      if (*((_DWORD *)v22 + 6) == 2)
      {
        if ((*((_WORD *)v22 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v22);
      }
      else
      {
        *((_DWORD *)v22 + 6) -= 2;
      }
    }
  }
  else
  {
    v21 = 0;
  }
  if ((a7 & 1) == 0 && !a8)
  {
    if ((a5 & 1) != 0 || a6)
    {
      WebCore::FrameSelection::setNodeFlags(*((_QWORD *)this + 4), (WebCore::FrameSelection *)((char *)this + 56), 0);
      if ((*((_BYTE *)this + 154) & 1) != 0)
      {
        v36 = (WebCore::FrameSelection *)((char *)this + 120);
        v37 = (WebCore::FrameSelection *)((char *)this + 136);
      }
      else
      {
        v36 = (WebCore::FrameSelection *)((char *)this + 136);
        v37 = (WebCore::FrameSelection *)((char *)this + 120);
      }
      WebCore::VisibleSelection::setWithoutValidation((WebCore::FrameSelection *)((char *)this + 56), v36, v37);
      WebCore::FrameSelection::setNodeFlags(*((_QWORD *)this + 4), (WebCore::FrameSelection *)((char *)this + 56), 1);
      if ((v14 & 1) != 0)
        goto LABEL_52;
    }
    else if (*((_BYTE *)this + 153) == 2)
    {
      WebCore::VisibleSelection::firstRange((WebCore::FrameSelection *)((char *)this + 56), &v38);
      if ((_BYTE)v43)
      {
        v35 = v14 | WebCore::intersects<(WebCore::TreeType)2>((int *)&v38, (uint64_t)a2);
        std::optional<WebCore::SimpleRange>::~optional((uint64_t *)&v38);
        if ((v35 & 1) != 0)
          goto LABEL_52;
      }
      else
      {
        std::optional<WebCore::SimpleRange>::~optional((uint64_t *)&v38);
        if ((v14 & 1) != 0)
          goto LABEL_52;
      }
    }
    else if (v14)
    {
      goto LABEL_52;
    }
    if (!v21)
      return;
LABEL_96:
    v38 = 0;
    LODWORD(v39) = 0;
    BYTE4(v39) &= 0xF0u;
    v40 = 0;
    v41 = 0;
    v42 &= 0xF0u;
    v43 = 0;
    v44 = 0;
    v45 &= 0xF0u;
    v46 = 0;
    v47 = 0;
    v48 &= 0xF0u;
    v49 = 0;
    v50 = 0;
    v51 &= 0xF0u;
    v52 = 0;
    v53 = 0;
    v54 &= 0xF0u;
    v55 = 1;
    v56 = v56 & 0xFC | 1;
    WebCore::FrameSelection::setSelection((uint64_t)this, (uint64_t)&v38, 0x10u, 0, 0, 0, 0);
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v38);
    return;
  }
  v23 = (WebCore::Node *)*((_QWORD *)this + 15);
  if (v23)
    *((_DWORD *)v23 + 6) += 2;
  v38 = v23;
  LODWORD(v39) = *((_DWORD *)this + 32);
  BYTE4(v39) = *((_BYTE *)this + 132);
  v24 = *((_QWORD *)this + 17);
  if (v24)
    *(_DWORD *)(v24 + 24) += 2;
  v57 = v24;
  v58 = *((_DWORD *)this + 36);
  v59 = *((_BYTE *)this + 148);
  if (a7)
    WebCore::updatePositionForNodeRemoval((uint64_t *)&v38, a2, a3);
  if (a8)
  {
    WebCore::updatePositionForNodeRemoval(&v57, a2, a3);
    v24 = v57;
  }
  if (v38)
    v25 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v25 = 0;
  if (v25
    && (v24
      ? (v26 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance)
      : (v26 = 0),
        v26))
  {
    WebCore::FrameSelection::setNodeFlags(*((_QWORD *)this + 4), (WebCore::FrameSelection *)((char *)this + 56), 0);
    if ((*((_BYTE *)this + 154) & 1) != 0)
    {
      v27 = &v38;
      v28 = (WebCore::Node **)&v57;
    }
    else
    {
      v27 = (WebCore::Node **)&v57;
      v28 = &v38;
    }
    WebCore::VisibleSelection::setWithoutValidation((WebCore::FrameSelection *)((char *)this + 56), (const WebCore::Position *)v27, (const WebCore::Position *)v28);
    WebCore::FrameSelection::setNodeFlags(*((_QWORD *)this + 4), (WebCore::FrameSelection *)((char *)this + 56), 1);
    v24 = v57;
  }
  else
  {
    LOBYTE(v21) = 1;
  }
  v57 = 0;
  if (v24)
  {
    if (*(_DWORD *)(v24 + 24) == 2)
    {
      if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v24);
    }
    else
    {
      *(_DWORD *)(v24 + 24) -= 2;
    }
  }
  v29 = v38;
  v38 = 0;
  if (v29)
  {
    if (*((_DWORD *)v29 + 6) == 2)
    {
      if ((*((_WORD *)v29 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v29);
    }
    else
    {
      *((_DWORD *)v29 + 6) -= 2;
    }
  }
LABEL_52:
  v30 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 1944);
  if (v30)
  {
    ++*(_DWORD *)(v30 + 16);
    if (!*(_BYTE *)(v30 + 328))
      WebCore::RenderLayer::repaintBlockSelectionGaps(*(int **)(*(_QWORD *)(v30 + 320) + 144));
    v38 = 0;
    v39 = 0;
    v40 = 0;
    WebCore::RenderSelection::set(v30 + 288, &v38, 1);
    *(_QWORD *)((char *)this + 236) = 0;
    *(_QWORD *)((char *)this + 228) = 0;
    *((_WORD *)this + 128) |= 0x20u;
    v31 = *(_QWORD *)(v30 + 248);
    v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v31 + 344) + 8) + 328) + 296);
    if (v32)
      v32 = *(_QWORD *)(v32 + 1944);
    if (((*(_QWORD *)(v31 + 384) & 0xFFFFFFFFFFFFLL) == 0
       || *(double *)((*(_QWORD *)(v31 + 384) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
      && (!v32 || (*(_BYTE *)(v32 + 20) & 0xF8) == 0))
    {
      v33 = *(_QWORD *)(v31 + 464);
      if ((!v33 || !*(_QWORD *)(v33 + 8)) && (!*(_DWORD *)(v31 + 488) || !*(_BYTE *)(v31 + 478)))
        WebCore::LocalFrameViewLayoutContext::setNeedsLayoutAfterViewConfigurationChange((WebCore::LocalFrameViewLayoutContext *)(v31 + 336));
    }
    v34 = *(_DWORD *)(v30 + 16);
    if (!v34)
    {
      __break(0xC471u);
      JUMPOUT(0x195ADEC10);
    }
    *(_DWORD *)(v30 + 16) = v34 - 1;
  }
  if ((v21 & 1) != 0)
    goto LABEL_96;
}

uint64_t WebCore::FrameSelection::textWasReplaced(uint64_t this, WebCore::CharacterData *a2, unsigned int a3, int a4, int a5)
{
  uint64_t v5;
  WebCore::CharacterData *v6;
  WebCore::Position *v7;
  WebCore::CharacterData *v8;
  WebCore::CharacterData **v9;
  WebCore::CharacterData *v10;
  WebCore::CharacterData **v11;
  WebCore::CharacterData *v12;
  WebCore::CharacterData **v13;
  WebCore::CharacterData *v14;
  WebCore::Node *v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  WebCore::Node **v44;
  WebCore::Node **v45;
  WebCore::Node *v46;
  WebCore::CharacterData *v47;
  WebCore::CharacterData *v48;
  WebCore::CharacterData *v49;
  WebCore::CharacterData *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  int *v80;
  int *v81;
  uint64_t v82;
  WebCore::CharacterData *v83;
  WebCore::CharacterData *v84;
  WebCore::CharacterData *v85;
  WebCore::CharacterData *v86;
  WebCore::CharacterData *v87;
  WebCore::CharacterData *v88;
  WebCore::Position *v89;
  WebCore::Position *v90;
  uint64_t v91;
  int v92;
  char v93;
  uint64_t v94;
  int v95;
  char v96;
  uint64_t v97;
  int v98;
  char v99;
  uint64_t v100;
  int v101;
  char v102;
  uint64_t v103;
  int v104;
  char v105;
  uint64_t v106;
  int v107;
  char v108;
  __int16 v109;
  char v110;
  WebCore::Node *v111;
  unsigned int v112;
  unsigned __int8 v113;
  WebCore::CharacterData *v114;
  unsigned int v115;
  unsigned __int8 v116;
  WebCore::CharacterData *v117;
  unsigned int v118;
  unsigned __int8 v119;
  WebCore::CharacterData *v120;
  unsigned int v121;
  unsigned __int8 v122;
  WebCore::CharacterData *v123;
  unsigned int v124;
  unsigned __int8 v125;
  uint64_t v126;
  unsigned int v127;
  unsigned __int8 v128;

  if (!*(_BYTE *)(this + 153) || (*((_BYTE *)a2 + 22) & 8) == 0)
    return this;
  v5 = this;
  v7 = (WebCore::Position *)(this + 56);
  v6 = *(WebCore::CharacterData **)(this + 56);
  if (v6)
    *((_DWORD *)v6 + 6) += 2;
  v126 = (uint64_t)v6;
  v127 = *(_DWORD *)(this + 64);
  v128 = *(_BYTE *)(this + 68);
  v9 = (WebCore::CharacterData **)(this + 72);
  v8 = *(WebCore::CharacterData **)(this + 72);
  if (v8)
    *((_DWORD *)v8 + 6) += 2;
  v123 = v8;
  v124 = *(_DWORD *)(this + 80);
  v125 = *(_BYTE *)(this + 84);
  v11 = (WebCore::CharacterData **)(this + 88);
  v10 = *(WebCore::CharacterData **)(this + 88);
  if (v10)
    *((_DWORD *)v10 + 6) += 2;
  v120 = v10;
  v121 = *(_DWORD *)(this + 96);
  v122 = *(_BYTE *)(this + 100);
  v13 = (WebCore::CharacterData **)(this + 104);
  v12 = *(WebCore::CharacterData **)(this + 104);
  if (v12)
    *((_DWORD *)v12 + 6) += 2;
  v117 = v12;
  v81 = (int *)(this + 112);
  v118 = *(_DWORD *)(this + 112);
  v119 = *(_BYTE *)(this + 116);
  v14 = *(WebCore::CharacterData **)(this + 120);
  v90 = (WebCore::Position *)(this + 120);
  if (v14)
    *((_DWORD *)v14 + 6) += 2;
  v114 = v14;
  v80 = (int *)(this + 128);
  v115 = *(_DWORD *)(this + 128);
  v116 = *(_BYTE *)(this + 132);
  v15 = *(WebCore::Node **)(this + 136);
  v89 = (WebCore::Position *)(this + 136);
  if (v15)
    *((_DWORD *)v15 + 6) += 2;
  v111 = v15;
  v112 = *(_DWORD *)(this + 144);
  v113 = *(_BYTE *)(this + 148);
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 32) + 8) + 680) + 680) & 0x800000000000000) != 0)
  {
    if (v6 == a2 && (v128 & 7) == 0)
    {
      v62 = a4;
      v68 = a5;
      v83 = a2;
      v51 = v127;
      v57 = a4 + a3;
      v74 = a3;
      if (v127 >= a3 && v127 <= v57)
        WebCore::Position::moveToOffset((uint64_t)&v126, a3);
      a4 = v62;
      a2 = v83;
      a5 = v68;
      a3 = v74;
      if (v51 > v57)
      {
        WebCore::Position::moveToOffset((uint64_t)&v126, v68 - v62 + v51);
        a5 = v68;
        a3 = v74;
        a4 = v62;
        a2 = v83;
      }
    }
    if (v123 == a2 && (v125 & 7) == 0)
    {
      v63 = a4;
      v69 = a5;
      v84 = a2;
      v52 = v124;
      v58 = a4 + a3;
      v75 = a3;
      if (v124 >= a3 && v124 <= v58)
        WebCore::Position::moveToOffset((uint64_t)&v123, a3);
      a4 = v63;
      a2 = v84;
      a5 = v69;
      a3 = v75;
      if (v52 > v58)
      {
        WebCore::Position::moveToOffset((uint64_t)&v123, v69 - v63 + v52);
        a5 = v69;
        a3 = v75;
        a4 = v63;
        a2 = v84;
      }
    }
  }
  if (v120 == a2 && (v122 & 7) == 0)
  {
    v64 = a4;
    v70 = a5;
    v85 = a2;
    v53 = v121;
    v59 = a4 + a3;
    v76 = a3;
    if (v121 >= a3 && v121 <= v59)
      WebCore::Position::moveToOffset((uint64_t)&v120, a3);
    a4 = v64;
    a2 = v85;
    a5 = v70;
    a3 = v76;
    if (v53 > v59)
    {
      WebCore::Position::moveToOffset((uint64_t)&v120, v70 - v64 + v53);
      a5 = v70;
      a3 = v76;
      a4 = v64;
      a2 = v85;
    }
  }
  if (v117 == a2 && (v119 & 7) == 0)
  {
    v65 = a4;
    v71 = a5;
    v86 = a2;
    v54 = v118;
    v60 = a4 + a3;
    v77 = a3;
    if (v118 >= a3 && v118 <= v60)
      WebCore::Position::moveToOffset((uint64_t)&v117, a3);
    a4 = v65;
    a2 = v86;
    a5 = v71;
    a3 = v77;
    if (v54 > v60)
    {
      WebCore::Position::moveToOffset((uint64_t)&v117, v71 - v65 + v54);
      a5 = v71;
      a3 = v77;
      a4 = v65;
      a2 = v86;
    }
  }
  if (v114 == a2 && (v116 & 7) == 0)
  {
    v66 = a4;
    v72 = a5;
    v87 = a2;
    v55 = v115;
    v61 = a4 + a3;
    v78 = a3;
    if (v115 >= a3 && v115 <= v61)
      WebCore::Position::moveToOffset((uint64_t)&v114, a3);
    a4 = v66;
    a2 = v87;
    a5 = v72;
    a3 = v78;
    if (v55 > v61)
    {
      WebCore::Position::moveToOffset((uint64_t)&v114, v72 - v66 + v55);
      a5 = v72;
      a3 = v78;
      a4 = v66;
      a2 = v87;
    }
  }
  if (v111 == a2 && (v113 & 7) == 0)
  {
    v67 = a4;
    v73 = a5;
    v88 = a2;
    v56 = v112;
    v79 = a4 + a3;
    if (v112 >= a3 && v112 <= v79)
      WebCore::Position::moveToOffset((uint64_t)&v111, a3);
    a2 = v88;
    if (v56 > v79)
    {
      WebCore::Position::moveToOffset((uint64_t)&v111, v73 - v67 + v56);
      a2 = v88;
    }
  }
  v82 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 680) + 680);
  if ((v82 & 0x800000000000000) == 0)
    goto LABEL_76;
  if (v126 != *(_QWORD *)v7)
    goto LABEL_88;
  if ((v128 & 8) == 0 && ((v16 = v128 & 7, v16 == 4) || v16 == 2))
    v17 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)&v126);
  else
    v17 = v127;
  if ((*(_BYTE *)(v5 + 68) & 8) == 0 && ((v18 = *(_BYTE *)(v5 + 68) & 7, v18 == 4) || v18 == 2))
    v19 = WebCore::Position::offsetForPositionAfterAnchor(v7);
  else
    v19 = *(_DWORD *)(v5 + 64);
  if (v17 == v19
    && ((*(_BYTE *)(v5 + 68) ^ v128) & 7) == 0
    && v123 == *v9
    && ((v125 & 8) == 0 && ((v20 = v125 & 7, v20 == 4) || v20 == 2)
      ? (v21 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)&v123))
      : (v21 = v124),
        (*(_BYTE *)(v5 + 84) & 8) == 0 && ((v22 = *(_BYTE *)(v5 + 84) & 7, v22 == 4) || v22 == 2)
      ? (v23 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)(v5 + 72)))
      : (v23 = *(_DWORD *)(v5 + 80)),
        v21 == v23 && ((*(_BYTE *)(v5 + 84) ^ v125) & 7) == 0))
  {
LABEL_76:
    if (v120 == *v11)
    {
      if ((v122 & 8) == 0 && ((v24 = v122 & 7, v24 == 4) || v24 == 2))
        v25 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)&v120);
      else
        v25 = v121;
      if ((*(_BYTE *)(v5 + 100) & 8) == 0 && ((v26 = *(_BYTE *)(v5 + 100) & 7, v26 == 4) || v26 == 2))
        v27 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)(v5 + 88));
      else
        v27 = *(_DWORD *)(v5 + 96);
      if (v25 == v27 && ((*(_BYTE *)(v5 + 100) ^ v122) & 7) == 0 && v117 == *v13)
      {
        if ((v119 & 8) == 0 && ((v28 = v119 & 7, v28 == 4) || v28 == 2))
          v29 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)&v117);
        else
          v29 = v118;
        if ((*(_BYTE *)(v5 + 116) & 8) == 0 && ((v30 = *(_BYTE *)(v5 + 116) & 7, v30 == 4) || v30 == 2))
          v31 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)(v5 + 104));
        else
          v31 = *v81;
        if (v29 == v31 && ((*(_BYTE *)(v5 + 116) ^ v119) & 7) == 0 && v114 == *(WebCore::CharacterData **)v90)
        {
          if ((v116 & 8) == 0 && ((v32 = v116 & 7, v32 == 4) || v32 == 2))
            v33 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)&v114);
          else
            v33 = v115;
          if ((*(_BYTE *)(v5 + 132) & 8) == 0 && ((v34 = *(_BYTE *)(v5 + 132) & 7, v34 == 4) || v34 == 2))
            v35 = WebCore::Position::offsetForPositionAfterAnchor(v90);
          else
            v35 = *v80;
          if (v33 == v35 && ((*(_BYTE *)(v5 + 132) ^ v116) & 7) == 0 && v111 == *(WebCore::Node **)v89)
          {
            if ((v113 & 8) == 0 && ((v36 = v113 & 7, v36 == 4) || v36 == 2))
              v37 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)&v111);
            else
              v37 = v112;
            if ((*(_BYTE *)(v5 + 148) & 8) == 0 && ((v38 = *(_BYTE *)(v5 + 148) & 7, v38 == 4) || v38 == 2))
              v39 = WebCore::Position::offsetForPositionAfterAnchor(v89);
            else
              v39 = *(_DWORD *)(v5 + 144);
            if (v37 == v39 && ((*(_BYTE *)(v5 + 148) ^ v113) & 7) == 0)
              goto LABEL_91;
          }
        }
      }
    }
    v91 = 0;
    v92 = 0;
    v93 &= 0xF0u;
    v94 = 0;
    v95 = 0;
    v96 &= 0xF0u;
    v97 = 0;
    v98 = 0;
    v99 &= 0xF0u;
    v100 = 0;
    v101 = 0;
    v102 &= 0xF0u;
    v103 = 0;
    v104 = 0;
    v105 &= 0xF0u;
    v106 = 0;
    v107 = 0;
    v108 &= 0xF0u;
    v109 = 1;
    v110 = v110 & 0xFC | 1;
    if ((v82 & 0x800000000000000) == 0)
    {
      if (v120 == v117
        && ((v122 & 8) == 0 && ((v40 = v122 & 7, v40 == 4) || v40 == 2)
          ? (v41 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)&v120))
          : (v41 = v121),
            (v119 & 8) == 0 && ((v42 = v119 & 7, v42 == 4) || v42 == 2)
          ? (v43 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)&v117))
          : (v43 = v118),
            v41 == v43 && ((v119 ^ v122) & 7) == 0))
      {
        if ((*(_BYTE *)(v5 + 154) & 3) == 2)
        {
          v44 = &v111;
          v45 = &v114;
        }
        else
        {
          v44 = &v114;
          v45 = &v111;
        }
      }
      else
      {
        v44 = &v120;
        v45 = &v117;
      }
      goto LABEL_90;
    }
  }
  else
  {
LABEL_88:
    v91 = 0;
    v92 = 0;
    v93 &= 0xF0u;
    v94 = 0;
    v95 = 0;
    v96 &= 0xF0u;
    v97 = 0;
    v98 = 0;
    v99 &= 0xF0u;
    v100 = 0;
    v101 = 0;
    v102 &= 0xF0u;
    v103 = 0;
    v104 = 0;
    v105 &= 0xF0u;
    v106 = 0;
    v107 = 0;
    v108 &= 0xF0u;
    v109 = 1;
    v110 = v110 & 0xFC | 1;
  }
  v44 = (WebCore::Node **)&v126;
  v45 = &v123;
LABEL_90:
  WebCore::VisibleSelection::setWithoutValidation((WebCore::VisibleSelection *)&v91, (const WebCore::Position *)v44, (const WebCore::Position *)v45);
  WebCore::FrameSelection::setSelection(v5, (uint64_t)&v91, 0x10u, 0, 0, 0, 0);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v91);
LABEL_91:
  v46 = v111;
  v111 = 0;
  if (v46)
  {
    if (*((_DWORD *)v46 + 6) == 2)
    {
      if ((*((_WORD *)v46 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v46);
    }
    else
    {
      *((_DWORD *)v46 + 6) -= 2;
    }
  }
  v47 = v114;
  v114 = 0;
  if (v47)
  {
    if (*((_DWORD *)v47 + 6) == 2)
    {
      if ((*((_WORD *)v47 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v47);
    }
    else
    {
      *((_DWORD *)v47 + 6) -= 2;
    }
  }
  v48 = v117;
  v117 = 0;
  if (v48)
  {
    if (*((_DWORD *)v48 + 6) == 2)
    {
      if ((*((_WORD *)v48 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v48);
    }
    else
    {
      *((_DWORD *)v48 + 6) -= 2;
    }
  }
  v49 = v120;
  v120 = 0;
  if (v49)
  {
    if (*((_DWORD *)v49 + 6) == 2)
    {
      if ((*((_WORD *)v49 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v49);
    }
    else
    {
      *((_DWORD *)v49 + 6) -= 2;
    }
  }
  v50 = v123;
  v123 = 0;
  if (v50)
  {
    if (*((_DWORD *)v50 + 6) == 2)
    {
      if ((*((_WORD *)v50 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v50);
    }
    else
    {
      *((_DWORD *)v50 + 6) -= 2;
    }
  }
  this = v126;
  v126 = 0;
  if (this)
  {
    if (*(_DWORD *)(this + 24) == 2)
    {
      if ((*(_WORD *)(this + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)this);
    }
    else
    {
      *(_DWORD *)(this + 24) -= 2;
    }
  }
  return this;
}

uint64_t WebCore::FrameSelection::directionOfSelection(WebCore::FrameSelection *this)
{
  int v2;
  const WebCore::VisiblePosition *v3;
  int v4;
  const WebCore::VisiblePosition *v5;
  int v6;
  int v7;
  const WebCore::Position *v8;
  int v9;
  uint64_t v10;
  WebCore::Node *v11;
  WebCore::Node *v12;
  WebCore::Node *v14;
  WebCore::Node *v15;
  WebCore::Node *v16;
  WebCore::Node *v17;
  WebCore::FrameSelection *v18;
  _BYTE v19[16];
  int v20;
  WebCore::Node *v21;
  int v22;
  char v23;
  int v24;
  _BYTE v25[16];
  int v26;
  WebCore::Node *v27;
  int v28;
  char v29;
  unsigned __int8 v30;
  WebCore::Node *v31;
  int v32;
  char v33;
  unsigned __int8 v34;
  char v35;

  if (*((_BYTE *)this + 153) == 2)
  {
    WebCore::VisiblePosition::canonicalPosition((WebCore::FrameSelection *)((char *)this + 120), (uint64_t)&v31);
    v34 = 1;
  }
  else
  {
    v2 = *((unsigned __int8 *)this + 152);
    WebCore::VisiblePosition::canonicalPosition((WebCore::FrameSelection *)((char *)this + 120), (uint64_t)&v31);
    v34 = 1;
    if (!v2)
    {
      v16 = v31;
      if (v31)
      {
        *((_DWORD *)v31 + 6) += 2;
        v21 = v16;
        v22 = v32;
        v23 = v33;
        LOBYTE(v24) = 0;
        if (!WebCore::inSameLine((WebCore *)&v31, (const WebCore::VisiblePosition *)&v21, v3))
          v34 = 0;
        v17 = v21;
        v21 = 0;
        if (v17)
        {
          if (*((_DWORD *)v17 + 6) == 2)
          {
            if ((*((_WORD *)v17 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v17);
          }
          else
          {
            *((_DWORD *)v17 + 6) -= 2;
          }
        }
      }
    }
  }
  if (*((_BYTE *)this + 153) == 2)
  {
    WebCore::VisiblePosition::canonicalPosition((WebCore::FrameSelection *)((char *)this + 136), (uint64_t)&v27);
    v30 = 1;
  }
  else
  {
    v4 = *((unsigned __int8 *)this + 152);
    WebCore::VisiblePosition::canonicalPosition((WebCore::FrameSelection *)((char *)this + 136), (uint64_t)&v27);
    v30 = 1;
    if (v4)
      goto LABEL_5;
  }
  v14 = v27;
  if (v27)
  {
    *((_DWORD *)v27 + 6) += 2;
    v21 = v14;
    v22 = v28;
    v23 = v29;
    LOBYTE(v24) = 0;
    if (!WebCore::inSameLine((WebCore *)&v27, (const WebCore::VisiblePosition *)&v21, v5))
      v30 = 0;
    v15 = v21;
    v21 = 0;
    if (v15)
    {
      if (*((_DWORD *)v15 + 6) == 2)
      {
        if ((*((_WORD *)v15 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v15);
      }
      else
      {
        *((_DWORD *)v15 + 6) -= 2;
      }
    }
  }
LABEL_5:
  WebCore::Position::inlineBoxAndOffset((WebCore::Position *)&v31, (const WebCore::Node *)v34, (uint64_t)&v21);
  v25[0] = 0;
  v26 = -1;
  v6 = v24;
  if (v24 != -1)
  {
    ((void (*)(_BYTE *, _BYTE *, WebCore::Node **))off_1E33ACC70[v24])(v19, v25, &v21);
    v26 = v6;
    if (v24 != -1)
      ((void (*)(_BYTE *, WebCore::Node **))off_1E33ACC60[v24])(v19, &v21);
  }
  WebCore::Position::inlineBoxAndOffset((WebCore::Position *)&v27, (const WebCore::Node *)v30, (uint64_t)&v21);
  v19[0] = 0;
  v20 = -1;
  v7 = v24;
  if (v24 != -1)
  {
    ((void (*)(char *, _BYTE *, WebCore::Node **))off_1E33ACC70[v24])(&v35, v19, &v21);
    v20 = v7;
    if (v24 != -1)
      ((void (*)(char *, WebCore::Node **))off_1E33ACC60[v24])(&v35, &v21);
  }
  if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v25) & 1) != 0
    || (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v19) & 1) != 0)
  {
    goto LABEL_16;
  }
  if (v26 == -1
    || (v21 = (WebCore::Node *)&v35,
        v9 = ((uint64_t (*)(WebCore::Node **, _BYTE *))off_1E33ACC80[v26])(&v21, v25),
        v20 == -1))
  {
LABEL_52:
    v18 = (WebCore::FrameSelection *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::FrameSelection::willBeModified(v18);
  }
  v21 = (WebCore::Node *)&v35;
  if (((v9 ^ ((unsigned int (*)(WebCore::Node **, _BYTE *))off_1E33ACC80[v20])(&v21, v19)) & 1) == 0)
  {
    if (v26 != -1)
    {
      v21 = (WebCore::Node *)&v35;
      v10 = ((uint64_t (*)(WebCore::Node **, _BYTE *))off_1E33ACC80[v26])(&v21, v25) & 1;
      goto LABEL_17;
    }
    goto LABEL_52;
  }
LABEL_16:
  v10 = WebCore::directionOfEnclosingBlock((WebCore::FrameSelection *)((char *)this + 104), v8);
LABEL_17:
  if (v20 != -1)
    ((void (*)(WebCore::Node **, _BYTE *))off_1E33ACC60[v20])(&v21, v19);
  if (v26 != -1)
    ((void (*)(WebCore::Node **, _BYTE *))off_1E33ACC60[v26])(&v21, v25);
  v11 = v27;
  v27 = 0;
  if (v11)
  {
    if (*((_DWORD *)v11 + 6) == 2)
    {
      if ((*((_WORD *)v11 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v11);
    }
    else
    {
      *((_DWORD *)v11 + 6) -= 2;
    }
  }
  v12 = v31;
  v31 = 0;
  if (v12)
  {
    if (*((_DWORD *)v12 + 6) == 2)
    {
      if ((*((_WORD *)v12 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v12);
    }
    else
    {
      *((_DWORD *)v12 + 6) -= 2;
    }
  }
  return v10;
}

void WebCore::FrameSelection::willBeModified(WebCore::FrameSelection *this, int a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  char v7;
  char v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  WebCore::Node *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::Node *v24;
  _BOOL4 v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;
  int v30;
  char v31;
  WebCore::Node *v32;

  if (!a2)
    return;
  v4 = *((_QWORD *)this + 15);
  if (v4)
    *(_DWORD *)(v4 + 24) += 2;
  v29 = v4;
  v30 = *((_DWORD *)this + 32);
  v31 = *((_BYTE *)this + 132);
  v5 = *((_QWORD *)this + 17);
  if (v5)
    *(_DWORD *)(v5 + 24) += 2;
  v6 = (uint64_t *)((char *)this + 56);
  v26 = v5;
  v27 = *((_DWORD *)this + 36);
  v28 = *((_BYTE *)this + 148);
  v7 = *((_BYTE *)this + 154);
  if ((v7 & 2) != 0)
  {
LABEL_14:
    WebCore::FrameSelection::setNodeFlags(*((_QWORD *)this + 4), (WebCore::FrameSelection *)((char *)this + 56), 0);
    if ((v7 & 1) == 0)
      goto LABEL_15;
    goto LABEL_17;
  }
  switch(a3)
  {
    case 1:
      WebCore::FrameSelection::setNodeFlags(*((_QWORD *)this + 4), (WebCore::FrameSelection *)((char *)this + 56), 0);
      goto LABEL_15;
    case 3:
      v7 = WebCore::FrameSelection::directionOfSelection(this);
      goto LABEL_14;
    case 2:
      v8 = WebCore::FrameSelection::directionOfSelection(this);
      WebCore::FrameSelection::setNodeFlags(*((_QWORD *)this + 4), (WebCore::FrameSelection *)((char *)this + 56), 0);
      if ((v8 & 1) == 0)
        goto LABEL_17;
LABEL_15:
      v9 = &v29;
      v10 = &v26;
      v11 = v5;
      goto LABEL_18;
  }
  WebCore::FrameSelection::setNodeFlags(*((_QWORD *)this + 4), (WebCore::FrameSelection *)((char *)this + 56), 0);
LABEL_17:
  v9 = &v26;
  v10 = &v29;
  v11 = v4;
LABEL_18:
  if (v11)
    *(_DWORD *)(v11 + 24) += 2;
  v12 = *v6;
  *v6 = v11;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  *((_DWORD *)this + 16) = *((_DWORD *)v10 + 2);
  *((_BYTE *)this + 68) = *((_BYTE *)v10 + 12);
  WebCore::VisibleSelection::validate((uint64_t)this + 56, 0);
  v13 = *v9;
  if (*v9)
    *(_DWORD *)(v13 + 24) += 2;
  v14 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v13;
  if (v14)
  {
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v14);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
  }
  *((_DWORD *)this + 20) = *((_DWORD *)v9 + 2);
  *((_BYTE *)this + 84) = *((_BYTE *)v9 + 12);
  WebCore::VisibleSelection::validate((uint64_t)this + 56, 0);
  v15 = 1;
  WebCore::FrameSelection::setNodeFlags(*((_QWORD *)this + 4), (WebCore::FrameSelection *)((char *)this + 56), 1);
  v16 = *((_QWORD *)this + 4);
  if (v16)
  {
    v17 = *(WebCore::Node **)(v16 + 8);
    if (v17)
    {
      v15 = 0;
      *((_DWORD *)v17 + 6) += 2;
    }
  }
  else
  {
    v17 = 0;
  }
  v18 = *((_QWORD *)this + 11);
  if (v18 && (*(_BYTE *)(v18 + 22) & 8) == 0
    || (v19 = *((_QWORD *)this + 13)) != 0 && (*(_BYTE *)(v19 + 22) & 8) == 0
    || (v20 = *((_QWORD *)this + 15)) != 0 && (*(_BYTE *)(v20 + 22) & 8) == 0
    || (v21 = *((_QWORD *)this + 17)) != 0 && (*(_BYTE *)(v21 + 22) & 8) == 0
    || (v22 = *v6) != 0
    && (*(_BYTE *)(v22 + 22) & 8) == 0
    && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 40) + 8) + 680) + 680) & 0x800000000000000) != 0
    || (v23 = *((_QWORD *)this + 9)) != 0
    && (*(_BYTE *)(v23 + 22) & 8) == 0
    && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 40) + 8) + 680) + 680) & 0x800000000000000) != 0)
  {
    v25 = 1;
    goto LABEL_50;
  }
  WebCore::VisibleSelection::document((uint64_t)this + 56, &v32);
  v24 = v32;
  if ((v15 & 1) != 0)
  {
    v25 = 0;
    v32 = 0;
    if (!v24)
      goto LABEL_50;
LABEL_48:
    if (*((_DWORD *)v24 + 6) == 2)
    {
      if ((*((_WORD *)v24 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v24);
    }
    else
    {
      *((_DWORD *)v24 + 6) -= 2;
    }
    goto LABEL_50;
  }
  if (v32)
  {
    v25 = v17 != v32;
    v32 = 0;
    goto LABEL_48;
  }
  v25 = 0;
LABEL_50:
  if ((v15 & 1) == 0)
  {
    if (*((_DWORD *)v17 + 6) == 2)
    {
      if ((*((_WORD *)v17 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v17);
    }
    else
    {
      *((_DWORD *)v17 + 6) -= 2;
    }
  }
  if (v25)
    WebCore::FrameSelection::clear(this);
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
}

WebCore::Node *WebCore::FrameSelection::positionForPlatform(WebCore::FrameSelection *this, uint64_t a2, int a3)
{
  uint64_t v4;
  WebCore::Document *v5;
  uint64_t v6;
  int v7;
  BOOL v9;
  int v10;
  WebCore::Node *result;
  const WebCore::VisiblePosition *v12;
  WebCore::Node *v13;
  int v14;
  const WebCore::VisiblePosition *v15;
  _BYTE *v16;
  WebCore::Node *v17;
  WebCore::Editor *v18;
  void *v19;
  WebCore::Editor *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  int v24;
  WebCore::Node *v25;
  int v26;
  char v27;
  char v28;

  v4 = *(_QWORD *)(a2 + 32);
  if (!v4)
    goto LABEL_9;
  v5 = *(WebCore::Document **)(v4 + 8);
  if (!v5)
    goto LABEL_9;
  v6 = *((_QWORD *)v5 + 382);
  if (!v6)
  {
    v24 = a3;
    v23 = a2;
    v18 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v18, v5);
    v20 = (WebCore::Editor *)*((_QWORD *)v5 + 382);
    *((_QWORD *)v5 + 382) = v18;
    if (v20)
    {
      WebCore::Editor::~Editor(v20, v19);
      if (*(_DWORD *)v21)
      {
        *(_QWORD *)(v21 + 496) = 0;
        *(_OWORD *)(v21 + 464) = 0u;
        *(_OWORD *)(v21 + 480) = 0u;
        *(_OWORD *)(v21 + 432) = 0u;
        *(_OWORD *)(v21 + 448) = 0u;
        *(_OWORD *)(v21 + 400) = 0u;
        *(_OWORD *)(v21 + 416) = 0u;
        *(_OWORD *)(v21 + 368) = 0u;
        *(_OWORD *)(v21 + 384) = 0u;
        *(_OWORD *)(v21 + 336) = 0u;
        *(_OWORD *)(v21 + 352) = 0u;
        *(_OWORD *)(v21 + 304) = 0u;
        *(_OWORD *)(v21 + 320) = 0u;
        *(_OWORD *)(v21 + 272) = 0u;
        *(_OWORD *)(v21 + 288) = 0u;
        *(_OWORD *)(v21 + 240) = 0u;
        *(_OWORD *)(v21 + 256) = 0u;
        *(_OWORD *)(v21 + 208) = 0u;
        *(_OWORD *)(v21 + 224) = 0u;
        *(_OWORD *)(v21 + 176) = 0u;
        *(_OWORD *)(v21 + 192) = 0u;
        *(_OWORD *)(v21 + 144) = 0u;
        *(_OWORD *)(v21 + 160) = 0u;
        *(_OWORD *)(v21 + 112) = 0u;
        *(_OWORD *)(v21 + 128) = 0u;
        *(_OWORD *)(v21 + 80) = 0u;
        *(_OWORD *)(v21 + 96) = 0u;
        *(_OWORD *)(v21 + 48) = 0u;
        *(_OWORD *)(v21 + 64) = 0u;
        *(_OWORD *)(v21 + 16) = 0u;
        *(_OWORD *)(v21 + 32) = 0u;
        *(_OWORD *)v21 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v21, v22);
      }
    }
    a2 = v23;
    v6 = *((_QWORD *)v5 + 382);
    a3 = v24;
  }
  v7 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 8) + 680) + 370);
  if (v7 && v7 != 3)
  {
    v9 = *(_BYTE *)(a2 + 153) == 2;
    if ((*(_BYTE *)(a2 + 154) & 1) != 0)
    {
LABEL_16:
      if (v9)
      {
        result = WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(a2 + 136), (uint64_t)this);
        *((_BYTE *)this + 16) = 1;
        v16 = (char *)this + 16;
      }
      else
      {
        v14 = *(unsigned __int8 *)(a2 + 152);
        result = WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(a2 + 136), (uint64_t)this);
        *((_BYTE *)this + 16) = 1;
        v16 = (char *)this + 16;
        if (v14)
          return result;
      }
      v17 = *(WebCore::Node **)this;
      if (*(_QWORD *)this)
      {
        *((_DWORD *)v17 + 6) += 2;
        v25 = v17;
        v26 = *((_DWORD *)this + 2);
        v27 = *((_BYTE *)this + 12);
        v28 = 0;
        if (!WebCore::inSameLine(this, (const WebCore::VisiblePosition *)&v25, v15))
          *v16 = 0;
LABEL_23:
        result = v25;
        v25 = 0;
        if (result)
        {
          if (*((_DWORD *)result + 6) == 2)
          {
            if ((*((_WORD *)result + 15) & 0x400) == 0)
              return (WebCore::Node *)WebCore::Node::removedLastRef(result);
          }
          else
          {
            *((_DWORD *)result + 6) -= 2;
          }
        }
        return result;
      }
      return result;
    }
  }
  else
  {
LABEL_9:
    v9 = *(_BYTE *)(a2 + 153) == 2;
    if (!a3)
      goto LABEL_16;
  }
  if (v9)
  {
    result = WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(a2 + 120), (uint64_t)this);
    *((_BYTE *)this + 16) = 1;
    return result;
  }
  v10 = *(unsigned __int8 *)(a2 + 152);
  result = WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(a2 + 120), (uint64_t)this);
  *((_BYTE *)this + 16) = 1;
  if (!v10)
  {
    v13 = *(WebCore::Node **)this;
    if (*(_QWORD *)this)
    {
      *((_DWORD *)v13 + 6) += 2;
      v25 = v13;
      v26 = *((_DWORD *)this + 2);
      v27 = *((_BYTE *)this + 12);
      v28 = 0;
      if (!WebCore::inSameLine(this, (const WebCore::VisiblePosition *)&v25, v12))
        *((_BYTE *)this + 16) = 0;
      goto LABEL_23;
    }
  }
  return result;
}

void WebCore::FrameSelection::nextWordPositionForPlatform(WebCore::FrameSelection *this, const VisiblePosition *a2, WebCore::Node *a3)
{
  uint64_t v6;
  uint64_t v7;
  WebCore::Document *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::Node *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  WebCore::Node *v17;
  WebCore::Node *v18;
  WebCore::Node *v19;
  uint64_t v20;
  WebCore::Editor *v21;
  void *v22;
  WebCore::Editor *v23;
  uint64_t v24;
  void *v25;
  WebCore::Node *v26[3];
  WebCore::Node *v27;
  int v28;
  char v29;
  char v30;
  WebCore::Node *v31;
  int v32;
  char v33;
  char v34;
  _QWORD v35[3];

  WebCore::nextBoundary((uint64_t)v35, (uint64_t)a3, (WebCore::Node *)WebCore::nextWordPositionBoundary);
  WebCore::VisiblePosition::honorEditingBoundaryAtOrAfter(a3, (const WebCore::VisiblePosition *)v35, 0, (uint64_t)this);
  v6 = v35[0];
  v35[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  v7 = *(_QWORD *)&a2[1].var0.var1;
  if (v7)
  {
    v8 = *(WebCore::Document **)(v7 + 8);
    if (v8)
    {
      v9 = *((_QWORD *)v8 + 382);
      if (!v9)
      {
        v21 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
        WebCore::Editor::Editor(v21, v8);
        v23 = (WebCore::Editor *)*((_QWORD *)v8 + 382);
        *((_QWORD *)v8 + 382) = v21;
        if (v23)
        {
          WebCore::Editor::~Editor(v23, v22);
          if (*(_DWORD *)v24)
          {
            *(_QWORD *)(v24 + 496) = 0;
            *(_OWORD *)(v24 + 464) = 0u;
            *(_OWORD *)(v24 + 480) = 0u;
            *(_OWORD *)(v24 + 432) = 0u;
            *(_OWORD *)(v24 + 448) = 0u;
            *(_OWORD *)(v24 + 400) = 0u;
            *(_OWORD *)(v24 + 416) = 0u;
            *(_OWORD *)(v24 + 368) = 0u;
            *(_OWORD *)(v24 + 384) = 0u;
            *(_OWORD *)(v24 + 336) = 0u;
            *(_OWORD *)(v24 + 352) = 0u;
            *(_OWORD *)(v24 + 304) = 0u;
            *(_OWORD *)(v24 + 320) = 0u;
            *(_OWORD *)(v24 + 272) = 0u;
            *(_OWORD *)(v24 + 288) = 0u;
            *(_OWORD *)(v24 + 240) = 0u;
            *(_OWORD *)(v24 + 256) = 0u;
            *(_OWORD *)(v24 + 208) = 0u;
            *(_OWORD *)(v24 + 224) = 0u;
            *(_OWORD *)(v24 + 176) = 0u;
            *(_OWORD *)(v24 + 192) = 0u;
            *(_OWORD *)(v24 + 144) = 0u;
            *(_OWORD *)(v24 + 160) = 0u;
            *(_OWORD *)(v24 + 112) = 0u;
            *(_OWORD *)(v24 + 128) = 0u;
            *(_OWORD *)(v24 + 80) = 0u;
            *(_OWORD *)(v24 + 96) = 0u;
            *(_OWORD *)(v24 + 48) = 0u;
            *(_OWORD *)(v24 + 64) = 0u;
            *(_OWORD *)(v24 + 16) = 0u;
            *(_OWORD *)(v24 + 32) = 0u;
            *(_OWORD *)v24 = 0u;
          }
          else
          {
            WTF::fastFree((WTF *)v24, v25);
          }
        }
        v9 = *((_QWORD *)v8 + 382);
      }
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 16) + 8) + 680) + 370) == 1)
      {
        WebCore::nextBoundary((uint64_t)v35, (uint64_t)this, (WebCore::Node *)WebCore::nextWordPositionBoundary);
        WebCore::VisiblePosition::honorEditingBoundaryAtOrAfter(this, (const WebCore::VisiblePosition *)v35, 0, (uint64_t)&v31);
        v10 = v35[0];
        v35[0] = 0;
        if (v10)
        {
          if (*(_DWORD *)(v10 + 24) == 2)
          {
            if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v10);
          }
          else
          {
            *(_DWORD *)(v10 + 24) -= 2;
          }
        }
        if (!WebCore::operator==((uint64_t *)&v31, (uint64_t *)this))
        {
          WebCore::previousBoundary((uint64_t)v35, (uint64_t)&v31, (uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t, char *))WebCore::previousWordPositionBoundary, 0);
          WebCore::VisiblePosition::honorEditingBoundaryAtOrBefore((WebCore::Node *)&v31, (const WebCore::VisiblePosition *)v35, 0, (uint64_t)&v27);
          v11 = v35[0];
          v35[0] = 0;
          if (v11)
          {
            if (*(_DWORD *)(v11 + 24) == 2)
            {
              if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v11);
            }
            else
            {
              *(_DWORD *)(v11 + 24) -= 2;
            }
          }
          v12 = v27;
          v27 = 0;
          v13 = *(_QWORD *)this;
          *(_QWORD *)this = v12;
          if (v13)
          {
            if (*(_DWORD *)(v13 + 24) == 2)
            {
              if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v13);
            }
            else
            {
              *(_DWORD *)(v13 + 24) -= 2;
            }
          }
          *((_DWORD *)this + 2) = v28;
          *((_BYTE *)this + 12) = v29;
          *((_BYTE *)this + 16) = v30;
        }
        WebCore::nextBoundary((uint64_t)v35, (uint64_t)a3, (WebCore::Node *)WebCore::nextWordPositionBoundary);
        WebCore::VisiblePosition::honorEditingBoundaryAtOrAfter(a3, (const WebCore::VisiblePosition *)v35, 0, (uint64_t)v26);
        v14 = v35[0];
        v35[0] = 0;
        if (v14)
        {
          if (*(_DWORD *)(v14 + 24) == 2)
          {
            if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v14);
          }
          else
          {
            *(_DWORD *)(v14 + 24) -= 2;
          }
        }
        WebCore::previousBoundary((uint64_t)v35, (uint64_t)v26, (uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t, char *))WebCore::previousWordPositionBoundary, 0);
        WebCore::VisiblePosition::honorEditingBoundaryAtOrBefore((WebCore::Node *)v26, (const WebCore::VisiblePosition *)v35, 0, (uint64_t)&v27);
        v15 = v35[0];
        v35[0] = 0;
        if (v15)
        {
          if (*(_DWORD *)(v15 + 24) == 2)
          {
            if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v15);
          }
          else
          {
            *(_DWORD *)(v15 + 24) -= 2;
          }
        }
        v16 = WebCore::operator==((uint64_t *)this, (uint64_t *)&v27);
        v17 = v27;
        v27 = 0;
        if (v17)
        {
          if (*((_DWORD *)v17 + 6) == 2)
          {
            if ((*((_WORD *)v17 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v17);
          }
          else
          {
            *((_DWORD *)v17 + 6) -= 2;
          }
        }
        v18 = v26[0];
        v26[0] = 0;
        if (v18)
        {
          if (*((_DWORD *)v18 + 6) == 2)
          {
            if ((*((_WORD *)v18 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v18);
          }
          else
          {
            *((_DWORD *)v18 + 6) -= 2;
          }
        }
        v19 = v31;
        if (v16)
        {
          if (v31)
            *((_DWORD *)v31 + 6) += 2;
          v20 = *(_QWORD *)this;
          *(_QWORD *)this = v19;
          if (v20)
          {
            if (*(_DWORD *)(v20 + 24) == 2)
            {
              if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v20);
                v19 = v31;
              }
            }
            else
            {
              *(_DWORD *)(v20 + 24) -= 2;
            }
          }
          *((_DWORD *)this + 2) = v32;
          *((_BYTE *)this + 12) = v33;
          *((_BYTE *)this + 16) = v34;
        }
        v31 = 0;
        if (v19)
        {
          if (*((_DWORD *)v19 + 6) == 2)
          {
            if ((*((_WORD *)v19 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v19);
          }
          else
          {
            *((_DWORD *)v19 + 6) -= 2;
          }
        }
      }
    }
  }
}

WebCore::Node *WebCore::FrameSelection::modifyExtendingForward(uint64_t a1, uint64_t a2, int a3)
{
  WebCore *v6;
  int v7;
  const WebCore::Position *v8;
  const WebCore::VisiblePosition *v9;
  WebCore::Node *v10;
  WebCore::Node *v11;
  char v12;
  int v13;
  int v14;
  WebCore::Node *v15;
  WebCore::Node *v16;
  WebCore::Node *v17;
  WebCore::Node *v18;
  WebCore::Node *v19;
  WebCore::Node *v20;
  WebCore::Node *v21;
  uint64_t v22;
  WebCore::Node *v23;
  const WebCore::Node *v24;
  _BOOL4 isEditablePosition;
  WebCore::Node *v26;
  WebCore::Node *v27;
  int v28;
  int v29;
  WebCore::Node *v30;
  int v31;
  WebCore::Node *v33;
  WebCore::Node *v34;
  __int16 v35;
  WebCore::Node *v36;
  WebCore::Node *v37;
  WebCore::Node *v38;
  int v39;
  char v40;
  char v41;
  WebCore::Node *v42;
  int v43;
  char v44;
  char v45;

  v6 = (WebCore *)(a2 + 104);
  v7 = *(unsigned __int8 *)(a2 + 152);
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(a2 + 104), a1);
  *(_BYTE *)(a1 + 16) = 1;
  if (!v7)
  {
    v36 = *(WebCore::Node **)a1;
    if (*(_QWORD *)a1)
    {
      *((_DWORD *)v36 + 6) += 2;
      v42 = v36;
      v43 = *(_DWORD *)(a1 + 8);
      v44 = *(_BYTE *)(a1 + 12);
      v45 = 0;
      if (!WebCore::inSameLine((WebCore *)a1, (const WebCore::VisiblePosition *)&v42, v9))
        *(_BYTE *)(a1 + 16) = 0;
      v37 = v42;
      v42 = 0;
      if (v37)
      {
        if (*((_DWORD *)v37 + 6) == 2)
        {
          if ((*((_WORD *)v37 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v37);
        }
        else
        {
          *((_DWORD *)v37 + 6) -= 2;
        }
      }
    }
  }
  switch(a3)
  {
    case 0:
      WebCore::VisiblePosition::next((unsigned __int8 *)a1, 1, 0, (uint64_t)&v42);
      goto LABEL_14;
    case 1:
      WebCore::FrameSelection::nextWordPositionForPlatform((WebCore::FrameSelection *)&v42, (const VisiblePosition *)a2, (WebCore::Node *)a1);
      goto LABEL_14;
    case 2:
      WebCore::nextBoundary((uint64_t)&v42, a1, (WebCore::Node *)WebCore::nextSentencePositionBoundary);
      WebCore::VisiblePosition::honorEditingBoundaryAtOrAfter((WebCore::Node *)a1, (const WebCore::VisiblePosition *)&v42, 0, (uint64_t)&v38);
      v10 = v42;
      v42 = 0;
      if (v10)
      {
        if (*((_DWORD *)v10 + 6) == 2)
        {
          if ((*((_WORD *)v10 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v10);
        }
        else
        {
          *((_DWORD *)v10 + 6) -= 2;
        }
      }
      v11 = *(WebCore::Node **)a1;
      *(_QWORD *)a1 = v38;
      if (v11)
      {
        if (*((_DWORD *)v11 + 6) == 2)
        {
          if ((*((_WORD *)v11 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v11);
        }
        else
        {
          *((_DWORD *)v11 + 6) -= 2;
        }
      }
      *(_DWORD *)(a1 + 8) = v39;
      *(_BYTE *)(a1 + 12) = v40;
      v12 = v41;
      goto LABEL_49;
    case 3:
      v13 = WebCore::FrameSelection::lineDirectionPointForBlockDirectionNavigation(a2, 2);
      WebCore::nextLinePosition(a1, v13, 0, &v42);
      goto LABEL_14;
    case 4:
      v14 = WebCore::FrameSelection::lineDirectionPointForBlockDirectionNavigation(a2, 2);
      WebCore::nextParagraphPosition((uint64_t *)a1, v14, (uint64_t)&v42);
LABEL_14:
      v15 = v42;
      v42 = 0;
      v16 = *(WebCore::Node **)a1;
      *(_QWORD *)a1 = v15;
      if (!v16)
        goto LABEL_17;
      if (*((_DWORD *)v16 + 6) != 2)
      {
        *((_DWORD *)v16 + 6) -= 2;
LABEL_17:
        *(_DWORD *)(a1 + 8) = v43;
        *(_BYTE *)(a1 + 12) = v44;
        goto LABEL_48;
      }
      if ((*((_WORD *)v16 + 15) & 0x400) != 0)
        goto LABEL_17;
      WebCore::Node::removedLastRef(v16);
      v19 = v42;
      *(_DWORD *)(a1 + 8) = v43;
      *(_BYTE *)(a1 + 12) = v44;
      *(_BYTE *)(a1 + 16) = v45;
      v42 = 0;
      if (!v19)
        goto LABEL_50;
      goto LABEL_26;
    case 6:
      WebCore::FrameSelection::positionForPlatform((WebCore::FrameSelection *)&v38, a2, 0);
      WebCore::nextBoundary((uint64_t)&v42, (uint64_t)&v38, (WebCore::Node *)WebCore::endSentenceBoundary);
      goto LABEL_21;
    case 7:
      WebCore::FrameSelection::positionForPlatform((WebCore::FrameSelection *)&v38, a2, 0);
      WebCore::endOfLine((uint64_t *)&v42, (uint64_t)&v38, 0, 0);
      goto LABEL_21;
    case 8:
      WebCore::FrameSelection::positionForPlatform((WebCore::FrameSelection *)&v38, a2, 0);
      WebCore::endOfParagraph((WebCore::Node *)&v38, 1, &v42);
LABEL_21:
      v17 = v42;
      v42 = 0;
      v18 = *(WebCore::Node **)a1;
      *(_QWORD *)a1 = v17;
      if (!v18)
        goto LABEL_24;
      if (*((_DWORD *)v18 + 6) != 2)
      {
        *((_DWORD *)v18 + 6) -= 2;
LABEL_24:
        *(_DWORD *)(a1 + 8) = v43;
        *(_BYTE *)(a1 + 12) = v44;
        *(_BYTE *)(a1 + 16) = v45;
        v42 = 0;
        goto LABEL_25;
      }
      if ((*((_WORD *)v18 + 15) & 0x400) != 0)
        goto LABEL_24;
      WebCore::Node::removedLastRef(v18);
      v33 = v42;
      *(_DWORD *)(a1 + 8) = v43;
      *(_BYTE *)(a1 + 12) = v44;
      *(_BYTE *)(a1 + 16) = v45;
      v42 = 0;
      if (v33)
      {
        if (*((_DWORD *)v33 + 6) == 2)
        {
          if ((*((_WORD *)v33 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v33);
        }
        else
        {
          *((_DWORD *)v33 + 6) -= 2;
        }
      }
LABEL_25:
      v19 = v38;
      v38 = 0;
      if (v19)
      {
LABEL_26:
        if (*((_DWORD *)v19 + 6) == 2)
        {
          if ((*((_WORD *)v19 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v19);
        }
        else
        {
          *((_DWORD *)v19 + 6) -= 2;
        }
      }
      goto LABEL_50;
    case 9:
      WebCore::FrameSelection::positionForPlatform((WebCore::FrameSelection *)&v42, a2, 0);
      v20 = v42;
      v42 = 0;
      v21 = *(WebCore::Node **)a1;
      *(_QWORD *)a1 = v20;
      if (!v21)
        goto LABEL_31;
      if (*((_DWORD *)v21 + 6) != 2)
      {
        *((_DWORD *)v21 + 6) -= 2;
LABEL_31:
        *(_DWORD *)(a1 + 8) = v43;
        v22 = a1 + 8;
        *(_BYTE *)(a1 + 12) = v44;
        *(_BYTE *)(a1 + 16) = v45;
        goto LABEL_32;
      }
      if ((*((_WORD *)v21 + 15) & 0x400) != 0)
        goto LABEL_31;
      WebCore::Node::removedLastRef(v21);
      *(_DWORD *)(a1 + 8) = v43;
      v22 = a1 + 8;
      v34 = v42;
      *(_BYTE *)(a1 + 12) = v44;
      *(_BYTE *)(a1 + 16) = v45;
      v42 = 0;
      if (v34)
      {
        if (*((_DWORD *)v34 + 6) == 2)
        {
          if ((*((_WORD *)v34 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v34);
        }
        else
        {
          *((_DWORD *)v34 + 6) -= 2;
        }
      }
LABEL_32:
      v23 = *(WebCore::Node **)a1;
      if (*(_QWORD *)a1)
        *((_DWORD *)v23 + 6) += 2;
      v42 = v23;
      v43 = *(_DWORD *)v22;
      v44 = *(_BYTE *)(v22 + 4);
      isEditablePosition = WebCore::isEditablePosition((uint64_t)&v42, 0);
      v26 = v42;
      v42 = 0;
      if (v26)
      {
        if (*((_DWORD *)v26 + 6) == 2)
        {
          if ((*((_WORD *)v26 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v26);
        }
        else
        {
          *((_DWORD *)v26 + 6) -= 2;
        }
      }
      if (isEditablePosition)
      {
        WebCore::endOfEditableContent((WebCore *)a1, (uint64_t)&v42);
        goto LABEL_44;
      }
      v27 = *(WebCore::Node **)a1;
      if (!*(_QWORD *)a1)
      {
        WebCore::endOfDocument(0, v24, (uint64_t)&v42);
        goto LABEL_44;
      }
      *((_DWORD *)v27 + 6) += 4;
      WebCore::endOfDocument(v27, v24, (uint64_t)&v42);
      v28 = *((_DWORD *)v27 + 6) - 2;
      if (*((_DWORD *)v27 + 6) == 2)
      {
        v35 = *((_WORD *)v27 + 15);
        if ((v35 & 0x400) != 0)
          goto LABEL_75;
        WebCore::Node::removedLastRef(v27);
        v28 = *((_DWORD *)v27 + 6);
      }
      else
      {
        *((_DWORD *)v27 + 6) = v28;
      }
      v29 = v28 - 2;
      if (v29)
      {
        *((_DWORD *)v27 + 6) = v29;
        goto LABEL_44;
      }
      v35 = *((_WORD *)v27 + 15);
LABEL_75:
      if ((v35 & 0x400) == 0)
        WebCore::Node::removedLastRef(v27);
LABEL_44:
      v30 = *(WebCore::Node **)a1;
      *(_QWORD *)a1 = v42;
      if (v30)
      {
        if (*((_DWORD *)v30 + 6) == 2)
        {
          if ((*((_WORD *)v30 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v30);
        }
        else
        {
          *((_DWORD *)v30 + 6) -= 2;
        }
      }
      *(_DWORD *)v22 = v43;
      *(_BYTE *)(v22 + 4) = v44;
LABEL_48:
      v12 = v45;
LABEL_49:
      *(_BYTE *)(a1 + 16) = v12;
LABEL_50:
      v31 = WebCore::directionOfEnclosingBlock(v6, v8);
      return WebCore::adjustPositionForUserSelectAll((WebCore *)a1, (VisiblePosition *)(v31 ^ 1u));
    default:
      goto LABEL_50;
  }
}

WebCore::Node *WebCore::FrameSelection::modifyExtendingBackward(uint64_t a1, uint64_t a2, int a3)
{
  WebCore *v6;
  int v7;
  const WebCore::Position *v8;
  const WebCore::VisiblePosition *v9;
  WebCore::Node *v10;
  int v11;
  void *v12;
  WebCore::Node *v13;
  WebCore::Node *v14;
  char v15;
  int v16;
  int v17;
  WebCore::Node *v18;
  WebCore::Node *v19;
  WebCore::Node *v20;
  WebCore::Node *v21;
  WebCore::Node *v22;
  WebCore::Node *v23;
  WebCore::Node *v24;
  uint64_t v25;
  WebCore::Node *v26;
  const WebCore::Node *v27;
  _BOOL4 isEditablePosition;
  WebCore::Node *v29;
  WebCore::Node *v30;
  int v31;
  int v32;
  WebCore::Node *v33;
  VisiblePosition *v34;
  WebCore::Node *v36;
  WebCore::Node *v37;
  __int16 v38;
  WebCore::Node *v39;
  WebCore::Node *v40;
  WebCore::Node *v41;
  int v42;
  char v43;
  char v44;
  WebCore::Node *v45;
  int v46;
  char v47;
  char v48;

  v6 = (WebCore *)(a2 + 104);
  v7 = *(unsigned __int8 *)(a2 + 152);
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(a2 + 104), a1);
  *(_BYTE *)(a1 + 16) = 1;
  if (!v7)
  {
    v39 = *(WebCore::Node **)a1;
    if (*(_QWORD *)a1)
    {
      *((_DWORD *)v39 + 6) += 2;
      v45 = v39;
      v46 = *(_DWORD *)(a1 + 8);
      v47 = *(_BYTE *)(a1 + 12);
      v48 = 0;
      if (!WebCore::inSameLine((WebCore *)a1, (const WebCore::VisiblePosition *)&v45, v9))
        *(_BYTE *)(a1 + 16) = 0;
      v40 = v45;
      v45 = 0;
      if (v40)
      {
        if (*((_DWORD *)v40 + 6) == 2)
        {
          if ((*((_WORD *)v40 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v40);
        }
        else
        {
          *((_DWORD *)v40 + 6) -= 2;
        }
      }
    }
  }
  switch(a3)
  {
    case 0:
      WebCore::VisiblePosition::previous((WebCore::Node **)a1, 1, 0, (uint64_t)&v45);
      v10 = *(WebCore::Node **)a1;
      *(_QWORD *)a1 = v45;
      if (!v10)
        goto LABEL_21;
      v11 = *((_DWORD *)v10 + 6) - 2;
      if (*((_DWORD *)v10 + 6) != 2)
        goto LABEL_20;
      if ((*((_WORD *)v10 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v10);
      goto LABEL_21;
    case 1:
      v12 = WebCore::previousWordPositionBoundary;
      goto LABEL_9;
    case 2:
      v12 = WebCore::previousSentencePositionBoundary;
LABEL_9:
      WebCore::previousBoundary((uint64_t)&v45, a1, (uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t, char *))v12, 0);
      WebCore::VisiblePosition::honorEditingBoundaryAtOrBefore((WebCore::Node *)a1, (const WebCore::VisiblePosition *)&v45, 0, (uint64_t)&v41);
      v13 = v45;
      v45 = 0;
      if (v13)
      {
        if (*((_DWORD *)v13 + 6) == 2)
        {
          if ((*((_WORD *)v13 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v13);
        }
        else
        {
          *((_DWORD *)v13 + 6) -= 2;
        }
      }
      v14 = *(WebCore::Node **)a1;
      *(_QWORD *)a1 = v41;
      if (v14)
      {
        if (*((_DWORD *)v14 + 6) == 2)
        {
          if ((*((_WORD *)v14 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v14);
        }
        else
        {
          *((_DWORD *)v14 + 6) -= 2;
        }
      }
      *(_DWORD *)(a1 + 8) = v42;
      *(_BYTE *)(a1 + 12) = v43;
      v15 = v44;
      goto LABEL_56;
    case 3:
      v16 = WebCore::FrameSelection::lineDirectionPointForBlockDirectionNavigation(a2, 2);
      WebCore::previousLinePosition(a1, v16, 0, &v45);
      goto LABEL_18;
    case 4:
      v17 = WebCore::FrameSelection::lineDirectionPointForBlockDirectionNavigation(a2, 2);
      WebCore::previousParagraphPosition((uint64_t *)a1, v17, (uint64_t)&v45);
LABEL_18:
      v18 = v45;
      v45 = 0;
      v10 = *(WebCore::Node **)a1;
      *(_QWORD *)a1 = v18;
      if (!v10)
        goto LABEL_21;
      v11 = *((_DWORD *)v10 + 6) - 2;
      if (*((_DWORD *)v10 + 6) != 2)
      {
LABEL_20:
        *((_DWORD *)v10 + 6) = v11;
LABEL_21:
        *(_DWORD *)(a1 + 8) = v46;
        *(_BYTE *)(a1 + 12) = v47;
        goto LABEL_55;
      }
      if ((*((_WORD *)v10 + 15) & 0x400) != 0)
        goto LABEL_21;
      WebCore::Node::removedLastRef(v10);
      v22 = v45;
      *(_DWORD *)(a1 + 8) = v46;
      *(_BYTE *)(a1 + 12) = v47;
      *(_BYTE *)(a1 + 16) = v48;
      v45 = 0;
      if (!v22)
        goto LABEL_57;
      goto LABEL_33;
    case 6:
      WebCore::FrameSelection::positionForPlatform((WebCore::FrameSelection *)&v41, a2, 1);
      WebCore::previousBoundary((uint64_t)&v45, (uint64_t)&v41, (uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t, char *))WebCore::startSentenceBoundary, 1);
      v19 = *(WebCore::Node **)a1;
      *(_QWORD *)a1 = v45;
      if (v19)
      {
        if (*((_DWORD *)v19 + 6) == 2)
        {
          if ((*((_WORD *)v19 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v19);
        }
        else
        {
          *((_DWORD *)v19 + 6) -= 2;
        }
      }
      *(_DWORD *)(a1 + 8) = v46;
      *(_BYTE *)(a1 + 12) = v47;
      *(_BYTE *)(a1 + 16) = v48;
      goto LABEL_32;
    case 7:
      WebCore::FrameSelection::positionForPlatform((WebCore::FrameSelection *)&v41, a2, 1);
      WebCore::startOfLine((uint64_t)&v45, (WebCore::VisiblePosition *)&v41, 0, 0);
      goto LABEL_28;
    case 8:
      WebCore::FrameSelection::positionForPlatform((WebCore::FrameSelection *)&v41, a2, 1);
      WebCore::startOfParagraph((uint64_t)&v41, 1, &v45);
LABEL_28:
      v20 = v45;
      v45 = 0;
      v21 = *(WebCore::Node **)a1;
      *(_QWORD *)a1 = v20;
      if (!v21)
        goto LABEL_31;
      if (*((_DWORD *)v21 + 6) != 2)
      {
        *((_DWORD *)v21 + 6) -= 2;
LABEL_31:
        *(_DWORD *)(a1 + 8) = v46;
        *(_BYTE *)(a1 + 12) = v47;
        *(_BYTE *)(a1 + 16) = v48;
        v45 = 0;
        goto LABEL_32;
      }
      if ((*((_WORD *)v21 + 15) & 0x400) != 0)
        goto LABEL_31;
      WebCore::Node::removedLastRef(v21);
      v36 = v45;
      *(_DWORD *)(a1 + 8) = v46;
      *(_BYTE *)(a1 + 12) = v47;
      *(_BYTE *)(a1 + 16) = v48;
      v45 = 0;
      if (v36)
      {
        if (*((_DWORD *)v36 + 6) == 2)
        {
          if ((*((_WORD *)v36 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v36);
        }
        else
        {
          *((_DWORD *)v36 + 6) -= 2;
        }
      }
LABEL_32:
      v22 = v41;
      v41 = 0;
      if (v22)
      {
LABEL_33:
        if (*((_DWORD *)v22 + 6) == 2)
        {
          if ((*((_WORD *)v22 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v22);
        }
        else
        {
          *((_DWORD *)v22 + 6) -= 2;
        }
      }
      goto LABEL_57;
    case 9:
      WebCore::FrameSelection::positionForPlatform((WebCore::FrameSelection *)&v45, a2, 1);
      v23 = v45;
      v45 = 0;
      v24 = *(WebCore::Node **)a1;
      *(_QWORD *)a1 = v23;
      if (!v24)
        goto LABEL_38;
      if (*((_DWORD *)v24 + 6) != 2)
      {
        *((_DWORD *)v24 + 6) -= 2;
LABEL_38:
        *(_DWORD *)(a1 + 8) = v46;
        v25 = a1 + 8;
        *(_BYTE *)(a1 + 12) = v47;
        *(_BYTE *)(a1 + 16) = v48;
        goto LABEL_39;
      }
      if ((*((_WORD *)v24 + 15) & 0x400) != 0)
        goto LABEL_38;
      WebCore::Node::removedLastRef(v24);
      *(_DWORD *)(a1 + 8) = v46;
      v25 = a1 + 8;
      v37 = v45;
      *(_BYTE *)(a1 + 12) = v47;
      *(_BYTE *)(a1 + 16) = v48;
      v45 = 0;
      if (v37)
      {
        if (*((_DWORD *)v37 + 6) == 2)
        {
          if ((*((_WORD *)v37 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v37);
        }
        else
        {
          *((_DWORD *)v37 + 6) -= 2;
        }
      }
LABEL_39:
      v26 = *(WebCore::Node **)a1;
      if (*(_QWORD *)a1)
        *((_DWORD *)v26 + 6) += 2;
      v45 = v26;
      v46 = *(_DWORD *)v25;
      v47 = *(_BYTE *)(v25 + 4);
      isEditablePosition = WebCore::isEditablePosition((uint64_t)&v45, 0);
      v29 = v45;
      v45 = 0;
      if (v29)
      {
        if (*((_DWORD *)v29 + 6) == 2)
        {
          if ((*((_WORD *)v29 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v29);
        }
        else
        {
          *((_DWORD *)v29 + 6) -= 2;
        }
      }
      if (isEditablePosition)
      {
        WebCore::startOfEditableContent((WebCore *)a1, (uint64_t)&v45);
        goto LABEL_51;
      }
      v30 = *(WebCore::Node **)a1;
      if (!*(_QWORD *)a1)
      {
        WebCore::startOfDocument(0, v27, (uint64_t)&v45);
        goto LABEL_51;
      }
      *((_DWORD *)v30 + 6) += 4;
      WebCore::startOfDocument(v30, v27, (uint64_t)&v45);
      v31 = *((_DWORD *)v30 + 6) - 2;
      if (*((_DWORD *)v30 + 6) == 2)
      {
        v38 = *((_WORD *)v30 + 15);
        if ((v38 & 0x400) != 0)
          goto LABEL_84;
        WebCore::Node::removedLastRef(v30);
        v31 = *((_DWORD *)v30 + 6);
      }
      else
      {
        *((_DWORD *)v30 + 6) = v31;
      }
      v32 = v31 - 2;
      if (v32)
      {
        *((_DWORD *)v30 + 6) = v32;
        goto LABEL_51;
      }
      v38 = *((_WORD *)v30 + 15);
LABEL_84:
      if ((v38 & 0x400) == 0)
        WebCore::Node::removedLastRef(v30);
LABEL_51:
      v33 = *(WebCore::Node **)a1;
      *(_QWORD *)a1 = v45;
      if (v33)
      {
        if (*((_DWORD *)v33 + 6) == 2)
        {
          if ((*((_WORD *)v33 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v33);
        }
        else
        {
          *((_DWORD *)v33 + 6) -= 2;
        }
      }
      *(_DWORD *)v25 = v46;
      *(_BYTE *)(v25 + 4) = v47;
LABEL_55:
      v15 = v48;
LABEL_56:
      *(_BYTE *)(a1 + 16) = v15;
LABEL_57:
      v34 = (VisiblePosition *)WebCore::directionOfEnclosingBlock(v6, v8);
      return WebCore::adjustPositionForUserSelectAll((WebCore *)a1, v34);
    default:
      goto LABEL_57;
  }
}

WebCore::Node *WebCore::adjustPositionForUserSelectAll(WebCore *this, VisiblePosition *a2)
{
  int v2;
  uint64_t v4;
  WebCore::Node *result;
  WebCore::Node *v6;
  uint64_t v7;
  WebCore::Node *v8;
  WebCore::Node *v9;
  WebCore::Node *v10;
  int v11;
  char v12;
  WebCore::Node *v13;
  int v14;
  char v15;
  WebCore::Node *v16[2];
  uint64_t v17;
  int v18;
  char v19;
  WebCore::Node *v20;

  v2 = (int)a2;
  v4 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    *(_DWORD *)(v4 + 24) += 2;
    result = (WebCore::Node *)WebCore::Position::rootUserSelectAllForNode(v4, (uint64_t *)&v20);
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        result = (WebCore::Node *)WebCore::Node::removedLastRef((WebCore::Node *)v4);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  else
  {
    result = (WebCore::Node *)WebCore::Position::rootUserSelectAllForNode(0, (uint64_t *)&v20);
  }
  v6 = v20;
  if (v20)
  {
    *((_DWORD *)v20 + 6) += 2;
    if (v2)
    {
      v13 = v6;
      v14 = 0;
      v15 = v15 & 0xF0 | 2;
      WebCore::Position::downstream((uint64_t)&v13, 0, (uint64_t)v16);
    }
    else
    {
      v10 = v6;
      v11 = 0;
      v12 = v12 & 0xF0 | 1;
      WebCore::Position::upstream((uint64_t)&v10, 0, (uint64_t)v16);
    }
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v16, (uint64_t)&v17);
    v7 = *(_QWORD *)this;
    *(_QWORD *)this = v17;
    if (v7)
    {
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v7);
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
    }
    *((_DWORD *)this + 2) = v18;
    *((_BYTE *)this + 12) = v19;
    *((_BYTE *)this + 16) = 1;
    v8 = v16[0];
    v16[0] = 0;
    if (v8)
    {
      if (*((_DWORD *)v8 + 6) == 2)
      {
        if ((*((_WORD *)v8 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v8);
      }
      else
      {
        *((_DWORD *)v8 + 6) -= 2;
      }
    }
    if ((v2 & 1) != 0)
    {
      v9 = v13;
      v13 = 0;
      if (!v9)
      {
LABEL_20:
        result = v20;
        v20 = 0;
        if (result)
        {
          if (*((_DWORD *)result + 6) == 2)
          {
            if ((*((_WORD *)result + 15) & 0x400) == 0)
              return (WebCore::Node *)WebCore::Node::removedLastRef(result);
          }
          else
          {
            *((_DWORD *)result + 6) -= 2;
          }
        }
        return result;
      }
    }
    else
    {
      v9 = v10;
      v10 = 0;
      if (!v9)
        goto LABEL_20;
    }
    if (*((_DWORD *)v9 + 6) == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v9);
    }
    else
    {
      *((_DWORD *)v9 + 6) -= 2;
    }
    goto LABEL_20;
  }
  return result;
}

uint64_t WebCore::FrameSelection::lineDirectionPointForBlockDirectionNavigation(uint64_t a1, int a2)
{
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  const WebCore::VisiblePosition *v8;
  WebCore::Node *v9;
  uint64_t (*v10)();
  int v11;
  WebCore::Node *v12;
  WebCore::Node *v14;
  WebCore::Node *v15;
  int v16;
  char v17;
  char v18;
  uint64_t v19;
  int v20;
  char v21;
  WebCore::Node *v22;
  int v23;
  char v24;
  char v25;

  if (!*(_BYTE *)(a1 + 153))
    return 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  if (a2 == 2)
  {
    v3 = *(_QWORD *)(a1 + 104);
    if (v3)
      *(_DWORD *)(v3 + 24) += 2;
    v19 = v3;
    v4 = (int *)(a1 + 112);
  }
  else if (a2 == 1)
  {
    v3 = *(_QWORD *)(a1 + 136);
    if (v3)
      *(_DWORD *)(v3 + 24) += 2;
    v19 = v3;
    v4 = (int *)(a1 + 144);
  }
  else
  {
    v3 = 0;
    if (a2)
      goto LABEL_16;
    v3 = *(_QWORD *)(a1 + 120);
    if (v3)
      *(_DWORD *)(v3 + 24) += 2;
    v19 = v3;
    v4 = (int *)(a1 + 128);
  }
  v20 = *v4;
  v21 = *((_BYTE *)v4 + 4);
LABEL_16:
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 528);
  if (v6 && *(_QWORD *)(v6 + 8))
  {
    if (*(_BYTE *)(a1 + 52))
    {
      v5 = *(unsigned int *)(a1 + 48);
    }
    else
    {
      v7 = *(unsigned __int8 *)(a1 + 152);
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v19, (uint64_t)&v15);
      v18 = 1;
      v9 = v15;
      if (!v7 && v15)
      {
        *((_DWORD *)v15 + 6) += 2;
        v22 = v9;
        v23 = v16;
        v24 = v17;
        v25 = 0;
        if (!WebCore::inSameLine((WebCore *)&v15, (const WebCore::VisiblePosition *)&v22, v8))
          v18 = 0;
        v14 = v22;
        v22 = 0;
        if (v14)
        {
          if (*((_DWORD *)v14 + 6) == 2)
          {
            if ((*((_WORD *)v14 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v14);
          }
          else
          {
            *((_DWORD *)v14 + 6) -= 2;
          }
        }
        v9 = v15;
      }
      if (v9)
        v10 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
      else
        v10 = 0;
      if (v10)
      {
        v11 = WebCore::VisiblePosition::lineDirectionPointForBlockDirectionNavigation((WebCore::VisiblePosition *)&v15);
        if (v11 >= -33554432)
        {
          if (v11 <= 0x1FFFFFF)
            v5 = (v11 << 6);
          else
            v5 = 0x7FFFFFFFLL;
        }
        else
        {
          v5 = 0x80000000;
        }
      }
      else
      {
        v5 = 0;
      }
      *(_DWORD *)(a1 + 48) = v5;
      *(_BYTE *)(a1 + 52) = 1;
      v12 = v15;
      v15 = 0;
      if (v12)
      {
        if (*((_DWORD *)v12 + 6) == 2)
        {
          if ((*((_WORD *)v12 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v12);
        }
        else
        {
          *((_DWORD *)v12 + 6) -= 2;
        }
      }
    }
  }
  else
  {
    v5 = 0;
  }
  v19 = 0;
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return v5;
}

WebCore::Node *WebCore::FrameSelection::modifyMovingForward(uint64_t a1, VisiblePosition *a2, unsigned int a3, BOOL *a4)
{
  WebCore::Node *v8;
  char v9;
  int var1_low;
  const WebCore::VisiblePosition *v11;
  WebCore::Node *v12;
  WebCore::Node *v13;
  int *v14;
  int v15;
  const WebCore::VisiblePosition *v16;
  WebCore::Node *v17;
  uint64_t v18;
  WebCore::Node *v19;
  uint64_t v20;
  char v21;
  WebCore::Node *v22;
  BOOL v24;
  WebCore::Node *v25;
  int v26;
  int v27;
  WebCore::Node *v28;
  uint64_t v29;
  int v30;
  WebCore::Node *v31;
  char v32;
  const WebCore::Node *v33;
  _BOOL4 isEditablePosition;
  WebCore::Node *v35;
  WebCore::VisiblePosition *p_var1;
  int v37;
  const WebCore::VisiblePosition *v38;
  WebCore::Node *v39;
  uint64_t v40;
  WebCore::Node *v41;
  WebCore::Node *result;
  uint64_t v43;
  int v44;
  int v45;
  WebCore::Node *v46;
  WebCore::Node *v47;
  WebCore::Node *v48;
  __int16 v49;
  WebCore::Node *v50;
  WebCore::Node *v51;
  WebCore::Node *v52;
  WebCore::Node *v53;
  WebCore::Node *v54;
  int v55;
  char v56;
  char v57;
  WebCore::Node *v58;
  int v59;
  char v60;
  char v61;
  WebCore::Node *v62;
  int v63;
  char v64;
  char v65;

  if (a4)
    *a4 = 0;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v61 = 1;
  if (a3 > 9)
    goto LABEL_13;
  if (((1 << a3) & 0x358) != 0)
  {
    WebCore::FrameSelection::positionForPlatform((WebCore::FrameSelection *)&v62, (uint64_t)a2, 0);
    v8 = v62;
    v62 = 0;
    v58 = v8;
    v59 = v63;
    v60 = v64;
    v9 = v65;
LABEL_12:
    v61 = v9;
    goto LABEL_13;
  }
  if (((1 << a3) & 6) != 0)
  {
    var1_low = LOBYTE(a2[6].var0.var1);
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&a2[4].var0.var1, (uint64_t)&v54);
    v57 = 1;
    v12 = v54;
    if (!var1_low && v54)
    {
      *((_DWORD *)v54 + 6) += 2;
      v62 = v12;
      v63 = v55;
      v64 = v56;
      v65 = 0;
      if (!WebCore::inSameLine((WebCore *)&v54, (const WebCore::VisiblePosition *)&v62, v11))
        v57 = 0;
      v50 = v62;
      v62 = 0;
      if (v50)
      {
        if (*((_DWORD *)v50 + 6) == 2)
        {
          if ((*((_WORD *)v50 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v50);
        }
        else
        {
          *((_DWORD *)v50 + 6) -= 2;
        }
      }
      v12 = v54;
    }
    v54 = 0;
    v13 = v58;
    v58 = v12;
    if (v13)
    {
      if (*((_DWORD *)v13 + 6) == 2)
      {
        if ((*((_WORD *)v13 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v13);
          v47 = v54;
          v59 = v55;
          v60 = v56;
          v61 = v57;
          v54 = 0;
          if (v47)
          {
            if (*((_DWORD *)v47 + 6) == 2)
            {
              if ((*((_WORD *)v47 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v47);
            }
            else
            {
              *((_DWORD *)v47 + 6) -= 2;
            }
          }
          goto LABEL_13;
        }
      }
      else
      {
        *((_DWORD *)v13 + 6) -= 2;
      }
    }
    v59 = v55;
    v60 = v56;
    v9 = v57;
    goto LABEL_12;
  }
LABEL_13:
  *(_DWORD *)(a1 + 8) = 0;
  v14 = (int *)(a1 + 8);
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 12) &= 0xF0u;
  *(_BYTE *)(a1 + 16) = 1;
  switch(a3)
  {
    case 0u:
      if (BYTE1(a2[6].var0.var1) != 2)
      {
        p_var1 = (WebCore::VisiblePosition *)&a2[4].var0.var1;
        v37 = LOBYTE(a2[6].var0.var1);
        WebCore::VisiblePosition::canonicalPosition(p_var1, (uint64_t)&v54);
        v57 = 1;
        if (!v37)
        {
          v52 = v54;
          if (v54)
          {
            *((_DWORD *)v54 + 6) += 2;
            v62 = v52;
            v63 = v55;
            v64 = v56;
            v65 = 0;
            if (!WebCore::inSameLine((WebCore *)&v54, (const WebCore::VisiblePosition *)&v62, v38))
              v57 = 0;
            v53 = v62;
            v62 = 0;
            if (v53)
            {
              if (*((_DWORD *)v53 + 6) == 2)
              {
                if ((*((_WORD *)v53 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v53);
              }
              else
              {
                *((_DWORD *)v53 + 6) -= 2;
              }
            }
          }
        }
        WebCore::VisiblePosition::next((unsigned __int8 *)&v54, 1, a4, (uint64_t)&v62);
        goto LABEL_60;
      }
      v15 = LOBYTE(a2[6].var0.var1);
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&a2[5].var1, (uint64_t)&v54);
      v57 = 1;
      v17 = v54;
      if (!v15 && v54)
      {
        *((_DWORD *)v54 + 6) += 2;
        v62 = v17;
        v63 = v55;
        v64 = v56;
        v65 = 0;
        if (!WebCore::inSameLine((WebCore *)&v54, (const WebCore::VisiblePosition *)&v62, v16))
          v57 = 0;
        v51 = v62;
        v62 = 0;
        if (v51)
        {
          if (*((_DWORD *)v51 + 6) == 2)
          {
            if ((*((_WORD *)v51 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v51);
          }
          else
          {
            *((_DWORD *)v51 + 6) -= 2;
          }
        }
        v17 = v54;
      }
      v54 = 0;
      v18 = *(_QWORD *)a1;
      *(_QWORD *)a1 = v17;
      if (v18)
      {
        if (*(_DWORD *)(v18 + 24) == 2)
        {
          if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v18);
            v41 = v54;
            *v14 = v55;
            *(_BYTE *)(a1 + 12) = v56;
            *(_BYTE *)(a1 + 16) = v57;
            goto LABEL_65;
          }
        }
        else
        {
          *(_DWORD *)(v18 + 24) -= 2;
        }
      }
      *v14 = v55;
      *(_BYTE *)(a1 + 12) = v56;
      *(_BYTE *)(a1 + 16) = v57;
      goto LABEL_68;
    case 1u:
      WebCore::FrameSelection::nextWordPositionForPlatform((WebCore::FrameSelection *)&v62, a2, (WebCore::Node *)&v58);
      goto LABEL_44;
    case 2u:
      WebCore::nextBoundary((uint64_t)&v62, (uint64_t)&v58, (WebCore::Node *)WebCore::nextSentencePositionBoundary);
      WebCore::VisiblePosition::honorEditingBoundaryAtOrAfter((WebCore::Node *)&v58, (const WebCore::VisiblePosition *)&v62, 0, (uint64_t)&v54);
      v19 = v62;
      v62 = 0;
      if (v19)
      {
        if (*((_DWORD *)v19 + 6) == 2)
        {
          if ((*((_WORD *)v19 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v19);
        }
        else
        {
          *((_DWORD *)v19 + 6) -= 2;
        }
      }
      v20 = *(_QWORD *)a1;
      *(_QWORD *)a1 = v54;
      if (v20)
      {
        if (*(_DWORD *)(v20 + 24) == 2)
        {
          if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v20);
        }
        else
        {
          *(_DWORD *)(v20 + 24) -= 2;
        }
      }
      *v14 = v55;
      *(_BYTE *)(a1 + 12) = v56;
      v21 = v57;
      goto LABEL_48;
    case 3u:
      v22 = v58;
      if (v58)
        *((_DWORD *)v58 + 6) += 2;
      *(_QWORD *)a1 = v22;
      *v14 = v59;
      *(_BYTE *)(a1 + 12) = v60;
      *(_BYTE *)(a1 + 16) = v61;
      if (BYTE1(a2[6].var0.var1) == 2)
      {
        if (v22
           ? WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance
           : 0)
        {
          WebCore::startOfLine((uint64_t)&v62, (WebCore::VisiblePosition *)a1, (WebCore::Node *)1, 0);
          v24 = WebCore::operator==((uint64_t *)a1, (uint64_t *)&v62);
          v25 = v62;
          v62 = 0;
          if (v25)
          {
            if (*((_DWORD *)v25 + 6) == 2)
            {
              if ((*((_WORD *)v25 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v25);
            }
            else
            {
              *((_DWORD *)v25 + 6) -= 2;
            }
          }
          if (v24)
            goto LABEL_49;
        }
      }
      v26 = WebCore::FrameSelection::lineDirectionPointForBlockDirectionNavigation((uint64_t)a2, 0);
      WebCore::nextLinePosition(a1, v26, 0, &v62);
LABEL_44:
      v28 = v62;
      v62 = 0;
      v29 = *(_QWORD *)a1;
      *(_QWORD *)a1 = v28;
      if (!v29)
        goto LABEL_47;
      v30 = *(_DWORD *)(v29 + 24) - 2;
      if (*(_DWORD *)(v29 + 24) != 2)
        goto LABEL_46;
      if ((*(_WORD *)(v29 + 30) & 0x400) != 0)
        goto LABEL_47;
      WebCore::Node::removedLastRef((WebCore::Node *)v29);
      v46 = v62;
      *v14 = v63;
      *(_BYTE *)(a1 + 12) = v64;
      *(_BYTE *)(a1 + 16) = v65;
      v62 = 0;
      if (v46)
      {
        if (*((_DWORD *)v46 + 6) == 2)
        {
          if ((*((_WORD *)v46 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v46);
        }
        else
        {
          *((_DWORD *)v46 + 6) -= 2;
        }
      }
      goto LABEL_49;
    case 4u:
      v27 = WebCore::FrameSelection::lineDirectionPointForBlockDirectionNavigation((uint64_t)a2, 0);
      WebCore::nextParagraphPosition((uint64_t *)&v58, v27, (uint64_t)&v62);
      goto LABEL_44;
    case 6u:
      WebCore::nextBoundary((uint64_t)&v62, (uint64_t)&v58, (WebCore::Node *)WebCore::endSentenceBoundary);
      goto LABEL_44;
    case 7u:
      WebCore::FrameSelection::positionForPlatform((WebCore::FrameSelection *)&v54, (uint64_t)a2, 0);
      WebCore::endOfLine((uint64_t *)&v62, (uint64_t)&v54, 0, a4);
LABEL_60:
      v39 = v62;
      v62 = 0;
      v40 = *(_QWORD *)a1;
      *(_QWORD *)a1 = v39;
      if (!v40)
        goto LABEL_63;
      if (*(_DWORD *)(v40 + 24) != 2)
      {
        *(_DWORD *)(v40 + 24) -= 2;
LABEL_63:
        *v14 = v63;
        *(_BYTE *)(a1 + 12) = v64;
        *(_BYTE *)(a1 + 16) = v65;
        v62 = 0;
        goto LABEL_64;
      }
      if ((*(_WORD *)(v40 + 30) & 0x400) != 0)
        goto LABEL_63;
      WebCore::Node::removedLastRef((WebCore::Node *)v40);
      v48 = v62;
      *v14 = v63;
      *(_BYTE *)(a1 + 12) = v64;
      *(_BYTE *)(a1 + 16) = v65;
      v62 = 0;
      if (v48)
      {
        if (*((_DWORD *)v48 + 6) == 2)
        {
          if ((*((_WORD *)v48 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v48);
        }
        else
        {
          *((_DWORD *)v48 + 6) -= 2;
        }
      }
LABEL_64:
      v41 = v54;
LABEL_65:
      v54 = 0;
      if (v41)
      {
        if (*((_DWORD *)v41 + 6) == 2)
        {
          if ((*((_WORD *)v41 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v41);
        }
        else
        {
          *((_DWORD *)v41 + 6) -= 2;
        }
      }
LABEL_68:
      result = v58;
      v58 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 6) == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            return (WebCore::Node *)WebCore::Node::removedLastRef(result);
        }
        else
        {
          *((_DWORD *)result + 6) -= 2;
        }
      }
      return result;
    case 8u:
      WebCore::endOfParagraph((WebCore::Node *)&v58, 1, &v62);
      goto LABEL_44;
    case 9u:
      v31 = v58;
      if (v58)
      {
        *((_DWORD *)v58 + 6) += 2;
        *v14 = v59;
        *(_BYTE *)(a1 + 12) = v60;
        v32 = v61;
        *((_DWORD *)v31 + 6) += 2;
      }
      else
      {
        *v14 = v59;
        *(_BYTE *)(a1 + 12) = v60;
        v32 = v61;
      }
      *(_QWORD *)a1 = v31;
      *(_BYTE *)(a1 + 16) = v32;
      v62 = v31;
      v63 = *v14;
      v64 = *(_BYTE *)(a1 + 12);
      isEditablePosition = WebCore::isEditablePosition((uint64_t)&v62, 0);
      v35 = v62;
      v62 = 0;
      if (v35)
      {
        if (*((_DWORD *)v35 + 6) == 2)
        {
          if ((*((_WORD *)v35 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v35);
        }
        else
        {
          *((_DWORD *)v35 + 6) -= 2;
        }
      }
      if (isEditablePosition)
      {
        WebCore::endOfEditableContent((WebCore *)a1, (uint64_t)&v62);
        goto LABEL_77;
      }
      v43 = *(_QWORD *)a1;
      if (!*(_QWORD *)a1)
      {
        WebCore::endOfDocument(0, v33, (uint64_t)&v62);
        goto LABEL_77;
      }
      *(_DWORD *)(v43 + 24) += 4;
      WebCore::endOfDocument((WebCore::Node *)v43, v33, (uint64_t)&v62);
      v44 = *(_DWORD *)(v43 + 24) - 2;
      if (*(_DWORD *)(v43 + 24) == 2)
      {
        v49 = *(_WORD *)(v43 + 30);
        if ((v49 & 0x400) != 0)
          goto LABEL_108;
        WebCore::Node::removedLastRef((WebCore::Node *)v43);
        v44 = *(_DWORD *)(v43 + 24);
      }
      else
      {
        *(_DWORD *)(v43 + 24) = v44;
      }
      v45 = v44 - 2;
      if (v45)
      {
        *(_DWORD *)(v43 + 24) = v45;
        goto LABEL_77;
      }
      v49 = *(_WORD *)(v43 + 30);
LABEL_108:
      if ((v49 & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v43);
LABEL_77:
      v29 = *(_QWORD *)a1;
      *(_QWORD *)a1 = v62;
      if (v29)
      {
        v30 = *(_DWORD *)(v29 + 24) - 2;
        if (*(_DWORD *)(v29 + 24) == 2)
        {
          if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v29);
        }
        else
        {
LABEL_46:
          *(_DWORD *)(v29 + 24) = v30;
        }
      }
LABEL_47:
      *v14 = v63;
      *(_BYTE *)(a1 + 12) = v64;
      v21 = v65;
LABEL_48:
      *(_BYTE *)(a1 + 16) = v21;
LABEL_49:
      if (a4)
        *a4 = WebCore::operator==((uint64_t *)a1, (uint64_t *)&v58);
      goto LABEL_68;
    default:
      goto LABEL_68;
  }
}

WebCore::Node *WebCore::FrameSelection::modifyMovingBackward(WebCore::Node **a1, unsigned __int8 *a2, unsigned int a3, BOOL *a4)
{
  WebCore::Node *v8;
  char v9;
  int v10;
  const WebCore::VisiblePosition *v11;
  WebCore::Node *v12;
  WebCore::Node *v13;
  int *v14;
  int v15;
  const WebCore::VisiblePosition *v16;
  WebCore::Node *v17;
  WebCore::Node *v18;
  void *v19;
  WebCore::Node *v20;
  WebCore::Node *v21;
  char v22;
  int v23;
  int v24;
  WebCore::Node *v25;
  WebCore::Node *v26;
  WebCore::Node *v27;
  WebCore::Node *v28;
  int v29;
  WebCore::Node *v30;
  WebCore::Node *v31;
  char v32;
  const WebCore::Node *v33;
  _BOOL4 isEditablePosition;
  WebCore::Node *v35;
  WebCore::VisiblePosition *v36;
  int v37;
  const WebCore::VisiblePosition *v38;
  WebCore::Node *v39;
  WebCore::Node *v40;
  WebCore::Node *v41;
  int v42;
  int v43;
  WebCore::Node *result;
  WebCore::Node *v45;
  WebCore::Node *v46;
  __int16 v47;
  WebCore::Node *v48;
  WebCore::Node *v49;
  WebCore::Node *v50;
  WebCore::Node *v51;
  WebCore::Node *v52;
  int v53;
  char v54;
  char v55;
  WebCore::Node *v56;
  int v57;
  char v58;
  char v59;
  WebCore::Node *v60;
  int v61;
  char v62;
  char v63;

  if (a4)
    *a4 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v59 = 1;
  if (a3 > 9)
    goto LABEL_13;
  if (((1 << a3) & 0x358) != 0)
  {
    WebCore::FrameSelection::positionForPlatform((WebCore::FrameSelection *)&v60, (uint64_t)a2, 1);
    v8 = v60;
    v60 = 0;
    v56 = v8;
    v57 = v61;
    v58 = v62;
    v9 = v63;
LABEL_12:
    v59 = v9;
    goto LABEL_13;
  }
  if (((1 << a3) & 6) != 0)
  {
    v10 = a2[152];
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(a2 + 104), (uint64_t)&v52);
    v55 = 1;
    v12 = v52;
    if (!v10 && v52)
    {
      *((_DWORD *)v52 + 6) += 2;
      v60 = v12;
      v61 = v53;
      v62 = v54;
      v63 = 0;
      if (!WebCore::inSameLine((WebCore *)&v52, (const WebCore::VisiblePosition *)&v60, v11))
        v55 = 0;
      v48 = v60;
      v60 = 0;
      if (v48)
      {
        if (*((_DWORD *)v48 + 6) == 2)
        {
          if ((*((_WORD *)v48 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v48);
        }
        else
        {
          *((_DWORD *)v48 + 6) -= 2;
        }
      }
      v12 = v52;
    }
    v52 = 0;
    v13 = v56;
    v56 = v12;
    if (v13)
    {
      if (*((_DWORD *)v13 + 6) == 2)
      {
        if ((*((_WORD *)v13 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v13);
          v45 = v52;
          v57 = v53;
          v58 = v54;
          v59 = v55;
          v52 = 0;
          if (v45)
          {
            if (*((_DWORD *)v45 + 6) == 2)
            {
              if ((*((_WORD *)v45 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v45);
            }
            else
            {
              *((_DWORD *)v45 + 6) -= 2;
            }
          }
          goto LABEL_13;
        }
      }
      else
      {
        *((_DWORD *)v13 + 6) -= 2;
      }
    }
    v57 = v53;
    v58 = v54;
    v9 = v55;
    goto LABEL_12;
  }
LABEL_13:
  *((_DWORD *)a1 + 2) = 0;
  v14 = (int *)(a1 + 1);
  *a1 = 0;
  *((_BYTE *)a1 + 12) &= 0xF0u;
  *((_BYTE *)a1 + 16) = 1;
  switch(a3)
  {
    case 0u:
      if (a2[153] != 2)
      {
        v36 = (WebCore::VisiblePosition *)(a2 + 104);
        v37 = a2[152];
        WebCore::VisiblePosition::canonicalPosition(v36, (uint64_t)&v52);
        v55 = 1;
        if (!v37)
        {
          v50 = v52;
          if (v52)
          {
            *((_DWORD *)v52 + 6) += 2;
            v60 = v50;
            v61 = v53;
            v62 = v54;
            v63 = 0;
            if (!WebCore::inSameLine((WebCore *)&v52, (const WebCore::VisiblePosition *)&v60, v38))
              v55 = 0;
            v51 = v60;
            v60 = 0;
            if (v51)
            {
              if (*((_DWORD *)v51 + 6) == 2)
              {
                if ((*((_WORD *)v51 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v51);
              }
              else
              {
                *((_DWORD *)v51 + 6) -= 2;
              }
            }
          }
        }
        WebCore::VisiblePosition::previous(&v52, 1, a4, (uint64_t)&v60);
        v39 = *a1;
        *a1 = v60;
        if (v39)
        {
          if (*((_DWORD *)v39 + 6) == 2)
          {
            if ((*((_WORD *)v39 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v39);
          }
          else
          {
            *((_DWORD *)v39 + 6) -= 2;
          }
        }
        *v14 = v61;
        *((_BYTE *)a1 + 12) = v62;
        *((_BYTE *)a1 + 16) = v63;
        goto LABEL_55;
      }
      v15 = a2[152];
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(a2 + 120), (uint64_t)&v52);
      v55 = 1;
      v17 = v52;
      if (!v15 && v52)
      {
        *((_DWORD *)v52 + 6) += 2;
        v60 = v17;
        v61 = v53;
        v62 = v54;
        v63 = 0;
        if (!WebCore::inSameLine((WebCore *)&v52, (const WebCore::VisiblePosition *)&v60, v16))
          v55 = 0;
        v49 = v60;
        v60 = 0;
        if (v49)
        {
          if (*((_DWORD *)v49 + 6) == 2)
          {
            if ((*((_WORD *)v49 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v49);
          }
          else
          {
            *((_DWORD *)v49 + 6) -= 2;
          }
        }
        v17 = v52;
      }
      v52 = 0;
      v18 = *a1;
      *a1 = v17;
      if (v18)
      {
        if (*((_DWORD *)v18 + 6) == 2)
        {
          if ((*((_WORD *)v18 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v18);
            v40 = v52;
            *v14 = v53;
            *((_BYTE *)a1 + 12) = v54;
            *((_BYTE *)a1 + 16) = v55;
            goto LABEL_56;
          }
        }
        else
        {
          *((_DWORD *)v18 + 6) -= 2;
        }
      }
      *v14 = v53;
      *((_BYTE *)a1 + 12) = v54;
      *((_BYTE *)a1 + 16) = v55;
      goto LABEL_71;
    case 1u:
      v19 = WebCore::previousWordPositionBoundary;
      goto LABEL_22;
    case 2u:
      v19 = WebCore::previousSentencePositionBoundary;
LABEL_22:
      WebCore::previousBoundary((uint64_t)&v60, (uint64_t)&v56, (uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t, char *))v19, 0);
      WebCore::VisiblePosition::honorEditingBoundaryAtOrBefore((WebCore::Node *)&v56, (const WebCore::VisiblePosition *)&v60, 0, (uint64_t)&v52);
      v20 = v60;
      v60 = 0;
      if (v20)
      {
        if (*((_DWORD *)v20 + 6) == 2)
        {
          if ((*((_WORD *)v20 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v20);
        }
        else
        {
          *((_DWORD *)v20 + 6) -= 2;
        }
      }
      v21 = *a1;
      *a1 = v52;
      if (v21)
      {
        if (*((_DWORD *)v21 + 6) == 2)
        {
          if ((*((_WORD *)v21 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v21);
        }
        else
        {
          *((_DWORD *)v21 + 6) -= 2;
        }
      }
      *v14 = v53;
      *((_BYTE *)a1 + 12) = v54;
      v22 = v55;
      goto LABEL_68;
    case 3u:
      v23 = WebCore::FrameSelection::lineDirectionPointForBlockDirectionNavigation((uint64_t)a2, 0);
      WebCore::previousLinePosition((uint64_t)&v56, v23, 0, &v60);
      goto LABEL_37;
    case 4u:
      v24 = WebCore::FrameSelection::lineDirectionPointForBlockDirectionNavigation((uint64_t)a2, 0);
      WebCore::previousParagraphPosition((uint64_t *)&v56, v24, (uint64_t)&v60);
      goto LABEL_37;
    case 6u:
      WebCore::previousBoundary((uint64_t)&v60, (uint64_t)&v56, (uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t, char *))WebCore::startSentenceBoundary, 1);
      goto LABEL_64;
    case 7u:
      WebCore::FrameSelection::positionForPlatform((WebCore::FrameSelection *)&v52, (uint64_t)a2, 1);
      WebCore::startOfLine((uint64_t)&v60, (WebCore::VisiblePosition *)&v52, 0, a4);
      v25 = v60;
      v60 = 0;
      v26 = *a1;
      *a1 = v25;
      if (!v26)
        goto LABEL_35;
      if (*((_DWORD *)v26 + 6) != 2)
      {
        *((_DWORD *)v26 + 6) -= 2;
LABEL_35:
        *v14 = v61;
        *((_BYTE *)a1 + 12) = v62;
        *((_BYTE *)a1 + 16) = v63;
        v60 = 0;
        goto LABEL_55;
      }
      if ((*((_WORD *)v26 + 15) & 0x400) != 0)
        goto LABEL_35;
      WebCore::Node::removedLastRef(v26);
      v46 = v60;
      *v14 = v61;
      *((_BYTE *)a1 + 12) = v62;
      *((_BYTE *)a1 + 16) = v63;
      v60 = 0;
      if (v46)
      {
        if (*((_DWORD *)v46 + 6) == 2)
        {
          if ((*((_WORD *)v46 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v46);
        }
        else
        {
          *((_DWORD *)v46 + 6) -= 2;
        }
      }
LABEL_55:
      v40 = v52;
LABEL_56:
      v52 = 0;
      if (v40)
      {
        if (*((_DWORD *)v40 + 6) == 2)
        {
          if ((*((_WORD *)v40 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v40);
        }
        else
        {
          *((_DWORD *)v40 + 6) -= 2;
        }
      }
LABEL_71:
      result = v56;
      v56 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 6) == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            return (WebCore::Node *)WebCore::Node::removedLastRef(result);
        }
        else
        {
          *((_DWORD *)result + 6) -= 2;
        }
      }
      return result;
    case 8u:
      WebCore::startOfParagraph((uint64_t)&v56, 1, &v60);
LABEL_37:
      v27 = v60;
      v60 = 0;
      v28 = *a1;
      *a1 = v27;
      if (!v28)
        goto LABEL_67;
      v29 = *((_DWORD *)v28 + 6) - 2;
      if (*((_DWORD *)v28 + 6) != 2)
        goto LABEL_66;
      if ((*((_WORD *)v28 + 15) & 0x400) != 0)
        goto LABEL_67;
      WebCore::Node::removedLastRef(v28);
      v30 = v60;
      *v14 = v61;
      *((_BYTE *)a1 + 12) = v62;
      *((_BYTE *)a1 + 16) = v63;
      v60 = 0;
      if (v30)
      {
        if (*((_DWORD *)v30 + 6) == 2)
        {
          if ((*((_WORD *)v30 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v30);
        }
        else
        {
          *((_DWORD *)v30 + 6) -= 2;
        }
      }
      goto LABEL_69;
    case 9u:
      v31 = v56;
      if (v56)
      {
        *((_DWORD *)v56 + 6) += 2;
        *v14 = v57;
        *((_BYTE *)a1 + 12) = v58;
        v32 = v59;
        *((_DWORD *)v31 + 6) += 2;
      }
      else
      {
        *v14 = v57;
        *((_BYTE *)a1 + 12) = v58;
        v32 = v59;
      }
      *a1 = v31;
      *((_BYTE *)a1 + 16) = v32;
      v60 = v31;
      v61 = *v14;
      v62 = *((_BYTE *)a1 + 12);
      isEditablePosition = WebCore::isEditablePosition((uint64_t)&v60, 0);
      v35 = v60;
      v60 = 0;
      if (v35)
      {
        if (*((_DWORD *)v35 + 6) == 2)
        {
          if ((*((_WORD *)v35 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v35);
        }
        else
        {
          *((_DWORD *)v35 + 6) -= 2;
        }
      }
      if (isEditablePosition)
      {
        WebCore::startOfEditableContent((WebCore *)a1, (uint64_t)&v60);
        goto LABEL_64;
      }
      v41 = *a1;
      if (!*a1)
      {
        WebCore::startOfDocument(0, v33, (uint64_t)&v60);
        goto LABEL_64;
      }
      *((_DWORD *)v41 + 6) += 4;
      WebCore::startOfDocument(v41, v33, (uint64_t)&v60);
      v42 = *((_DWORD *)v41 + 6) - 2;
      if (*((_DWORD *)v41 + 6) == 2)
      {
        v47 = *((_WORD *)v41 + 15);
        if ((v47 & 0x400) != 0)
          goto LABEL_102;
        WebCore::Node::removedLastRef(v41);
        v42 = *((_DWORD *)v41 + 6);
      }
      else
      {
        *((_DWORD *)v41 + 6) = v42;
      }
      v43 = v42 - 2;
      if (v43)
      {
        *((_DWORD *)v41 + 6) = v43;
        goto LABEL_64;
      }
      v47 = *((_WORD *)v41 + 15);
LABEL_102:
      if ((v47 & 0x400) == 0)
        WebCore::Node::removedLastRef(v41);
LABEL_64:
      v28 = *a1;
      *a1 = v60;
      if (v28)
      {
        v29 = *((_DWORD *)v28 + 6) - 2;
        if (*((_DWORD *)v28 + 6) == 2)
        {
          if ((*((_WORD *)v28 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v28);
        }
        else
        {
LABEL_66:
          *((_DWORD *)v28 + 6) = v29;
        }
      }
LABEL_67:
      *v14 = v61;
      *((_BYTE *)a1 + 12) = v62;
      v22 = v63;
LABEL_68:
      *((_BYTE *)a1 + 16) = v22;
LABEL_69:
      if (a4)
        *a4 = WebCore::operator==((uint64_t *)a1, (uint64_t *)&v56);
      goto LABEL_71;
    default:
      goto LABEL_71;
  }
}

void WebCore::FrameSelection::setExtent(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  unsigned __int16 v8;
  int v9;
  char v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  int v27;
  char v28;
  char v29;
  __int16 v30;

  v5 = *a2;
  if (*a2)
    *(_DWORD *)(v5 + 24) += 2;
  v9 = *((_DWORD *)a2 + 2);
  v10 = *((_BYTE *)a2 + 12);
  v6 = *((_BYTE *)a2 + 16);
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
    *(_DWORD *)(v7 + 24) += 2;
  v11 = v7;
  v12 = *(_DWORD *)(a1 + 96);
  v13 = *(_BYTE *)(a1 + 100);
  if (v5)
    *(_DWORD *)(v5 + 24) += 2;
  v14 = v5;
  v15 = v9;
  v16 = v10;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = v6;
  v30 = -256;
  WebCore::VisibleSelection::validate((uint64_t)&v11, 0);
  if (a3)
    v8 = 199;
  else
    v8 = 6;
  WebCore::FrameSelection::setSelection(a1, (uint64_t)&v11, v8, 0, 0, 0, 0);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v11);
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
}

BOOL WebCore::FrameSelection::modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6)
{
  void *v12;
  WebCore::Document *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  void *v18;
  _BOOL8 v19;
  int v20;
  void *v21;
  const WebCore::VisiblePosition *v22;
  Node *var0;
  WebCore::Node *v24;
  WebCore::RenderBlock **v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  void *v29;
  const WebCore::VisiblePosition *v30;
  Node *v31;
  WebCore::Node *v32;
  uint64_t v33;
  BOOL *v34;
  unint64_t v35;
  void *v36;
  unsigned int v37;
  uint64_t v38;
  WebCore::Node *v39;
  Node *v40;
  unsigned int *v41;
  BOOL v42;
  uint64_t v43;
  Node *v44;
  Node *v45;
  WebCore::RenderBlock **v46;
  uint64_t v47;
  BOOL *v48;
  unint64_t v49;
  int v50;
  unsigned int *v51;
  uint64_t v52;
  Node *v53;
  Node *v54;
  WebCore::Node *v55;
  WebCore::Node *v56;
  WebCore::Node *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  char v61;
  Node *v62;
  WebCore::Node *v63;
  void *v65;
  Node *v66;
  void *v67;
  Node *v68;
  WebCore::Node *v69;
  WebCore::Node *v70;
  int v71;
  WebCore::Editor *v72;
  void *v73;
  WebCore::Editor *v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  int v78;
  BOOL v79;
  unsigned int v80;
  int v81;
  WebCore::Node *v82;
  uint64_t v83;
  BOOL v84;
  WebCore::Node *v85;
  unsigned int v86;
  char v87;
  BOOL v88;
  VisiblePosition v89;
  WebCore::Node *v90;
  unsigned int var1;
  char v92;
  BOOL v93;
  WebCore::Node *v94;
  uint64_t v95;
  char v96;
  _BYTE v97[224];
  VisiblePosition v98;

  if (a5)
  {
    WebCore::FrameSelection::FrameSelection((WebCore::FrameSelection *)&v94, 0);
    WebCore::FrameSelection::setSelection((uint64_t)&v94, a1 + 56, 6u, 0, 0, 0, 0);
    WebCore::FrameSelection::modify(&v94, a2, a3, a4, 0, 0);
    v13 = *(WebCore::Document **)(*(_QWORD *)(a1 + 32) + 8);
    v14 = *((_QWORD *)v13 + 66);
    if (v14 && (v15 = *(_QWORD *)(v14 + 8)) != 0 && *(_BYTE *)(v15 + 376))
    {
      WebCore::FrameSelection::~FrameSelection((WebCore::FrameSelection *)&v94, v12);
    }
    else
    {
      v16 = *((_QWORD *)v13 + 382);
      if (!v16)
      {
        v71 = a3;
        v72 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
        WebCore::Editor::Editor(v72, v13);
        v74 = (WebCore::Editor *)*((_QWORD *)v13 + 382);
        *((_QWORD *)v13 + 382) = v72;
        if (v74)
        {
          WebCore::Editor::~Editor(v74, v73);
          if (*(_DWORD *)v75)
          {
            *(_QWORD *)(v75 + 496) = 0;
            *(_OWORD *)(v75 + 464) = 0u;
            *(_OWORD *)(v75 + 480) = 0u;
            *(_OWORD *)(v75 + 432) = 0u;
            *(_OWORD *)(v75 + 448) = 0u;
            *(_OWORD *)(v75 + 400) = 0u;
            *(_OWORD *)(v75 + 416) = 0u;
            *(_OWORD *)(v75 + 368) = 0u;
            *(_OWORD *)(v75 + 384) = 0u;
            *(_OWORD *)(v75 + 336) = 0u;
            *(_OWORD *)(v75 + 352) = 0u;
            *(_OWORD *)(v75 + 304) = 0u;
            *(_OWORD *)(v75 + 320) = 0u;
            *(_OWORD *)(v75 + 272) = 0u;
            *(_OWORD *)(v75 + 288) = 0u;
            *(_OWORD *)(v75 + 240) = 0u;
            *(_OWORD *)(v75 + 256) = 0u;
            *(_OWORD *)(v75 + 208) = 0u;
            *(_OWORD *)(v75 + 224) = 0u;
            *(_OWORD *)(v75 + 176) = 0u;
            *(_OWORD *)(v75 + 192) = 0u;
            *(_OWORD *)(v75 + 144) = 0u;
            *(_OWORD *)(v75 + 160) = 0u;
            *(_OWORD *)(v75 + 112) = 0u;
            *(_OWORD *)(v75 + 128) = 0u;
            *(_OWORD *)(v75 + 80) = 0u;
            *(_OWORD *)(v75 + 96) = 0u;
            *(_OWORD *)(v75 + 48) = 0u;
            *(_OWORD *)(v75 + 64) = 0u;
            *(_OWORD *)(v75 + 16) = 0u;
            *(_OWORD *)(v75 + 32) = 0u;
            *(_OWORD *)v75 = 0u;
          }
          else
          {
            WTF::fastFree((WTF *)v75, v76);
          }
        }
        v16 = *((_QWORD *)v13 + 382);
        LODWORD(a3) = v71;
      }
      v17 = WebCore::Editor::shouldChangeSelection(v16, (WebCore::VisibleSelection *)(a1 + 56), (WebCore::VisibleSelection *)v97, v97[96], 0);
      WebCore::FrameSelection::~FrameSelection((WebCore::FrameSelection *)&v94, v18);
      v19 = 0;
      if (!v17)
        return v19;
    }
  }
  v80 = a6;
  v81 = a3;
  WebCore::FrameSelection::willBeModified((WebCore::FrameSelection *)a1, a2, a4 ^ 1);
  v90 = 0;
  var1 = 0;
  v92 &= 0xF0u;
  v93 = 1;
  if ((a2 & 1) != 0)
  {
    v20 = *(unsigned __int8 *)(a1 + 152);
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(a1 + 104), (uint64_t)&v89);
    v89.var1 = 1;
    var0 = v89.var0.var0.var0;
    if (!v20 && v89.var0.var0.var0)
    {
      *((_DWORD *)v89.var0.var0.var0 + 6) += 2;
      v94 = (WebCore::Node *)var0;
      LODWORD(v95) = v89.var0.var1;
      BYTE4(v95) = *((_BYTE *)&v89.var0 + 12);
      v96 = 0;
      if (!WebCore::inSameLine((WebCore *)&v89, (const WebCore::VisiblePosition *)&v94, v22))
        v89.var1 = 0;
      v69 = v94;
      v94 = 0;
      if (v69)
      {
        if (*((_DWORD *)v69 + 6) == 2)
        {
          if ((*((_WORD *)v69 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v69, v21);
        }
        else
        {
          *((_DWORD *)v69 + 6) -= 2;
        }
      }
      var0 = v89.var0.var0.var0;
    }
    v89.var0.var0.var0 = 0;
    v24 = v90;
    v90 = (WebCore::Node *)var0;
    if (v24)
    {
      if (*((_DWORD *)v24 + 6) == 2)
      {
        if ((*((_WORD *)v24 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v24, v21);
          v66 = v89.var0.var0.var0;
          var1 = v89.var0.var1;
          v92 = *((_BYTE *)&v89.var0 + 12);
          v93 = v89.var1;
          v89.var0.var0.var0 = 0;
          if (v66)
          {
            if (*((_DWORD *)v66 + 6) == 2)
            {
              if ((*((_WORD *)v66 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v66, v65);
            }
            else
            {
              *((_DWORD *)v66 + 6) -= 2;
            }
          }
          goto LABEL_14;
        }
      }
      else
      {
        *((_DWORD *)v24 + 6) -= 2;
      }
    }
    var1 = v89.var0.var1;
    v92 = *((_BYTE *)&v89.var0 + 12);
    v93 = v89.var1;
LABEL_14:
    v26 = WebCore::FrameSelection::lineDirectionPointForBlockDirectionNavigation(a1, 2);
    *(_BYTE *)(a1 + 152) = 1;
    goto LABEL_23;
  }
  v27 = 64;
  if ((_DWORD)a4)
    v27 = 80;
  v28 = *(unsigned __int8 *)(a1 + 152);
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(a1 + v27 + 56), (uint64_t)&v89);
  v89.var1 = 1;
  v31 = v89.var0.var0.var0;
  if (!v28 && v89.var0.var0.var0)
  {
    *((_DWORD *)v89.var0.var0.var0 + 6) += 2;
    v94 = (WebCore::Node *)v31;
    LODWORD(v95) = v89.var0.var1;
    BYTE4(v95) = *((_BYTE *)&v89.var0 + 12);
    v96 = 0;
    if (!WebCore::inSameLine((WebCore *)&v89, (const WebCore::VisiblePosition *)&v94, v30))
      v89.var1 = 0;
    v70 = v94;
    v94 = 0;
    if (v70)
    {
      if (*((_DWORD *)v70 + 6) == 2)
      {
        if ((*((_WORD *)v70 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v70, v29);
      }
      else
      {
        *((_DWORD *)v70 + 6) -= 2;
      }
    }
    v31 = v89.var0.var0.var0;
  }
  v89.var0.var0.var0 = 0;
  v32 = v90;
  v90 = (WebCore::Node *)v31;
  if (v32)
  {
    if (*((_DWORD *)v32 + 6) == 2)
    {
      if ((*((_WORD *)v32 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v32, v29);
        v68 = v89.var0.var0.var0;
        var1 = v89.var0.var1;
        v92 = *((_BYTE *)&v89.var0 + 12);
        v93 = v89.var1;
        v89.var0.var0.var0 = 0;
        if (v68)
        {
          if (*((_DWORD *)v68 + 6) == 2)
          {
            if ((*((_WORD *)v68 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v68, v67);
          }
          else
          {
            *((_DWORD *)v68 + 6) -= 2;
          }
        }
        goto LABEL_22;
      }
    }
    else
    {
      *((_DWORD *)v32 + 6) -= 2;
    }
  }
  var1 = v89.var0.var1;
  v92 = *((_BYTE *)&v89.var0 + 12);
  v93 = v89.var1;
LABEL_22:
  v26 = WebCore::FrameSelection::lineDirectionPointForBlockDirectionNavigation(a1, a4);
  *(_BYTE *)(a1 + 152) = a4;
LABEL_23:
  v89.var0.var0.var0 = 0;
  v94 = WebCore::localCaretRectInRendererForCaretPainting((WebCore *)&v90, &v89, v25);
  v95 = v33;
  v35 = WebCore::absoluteBoundsForLocalCaretRect((WebCore *)v89.var0.var0.var0, (WebCore::RenderBlock *)&v94, 0, v34);
  v19 = 0;
  if ((int)v36 < 1 || SHIDWORD(v36) < 1)
    goto LABEL_93;
  v37 = HIDWORD(v35) + (HIDWORD(v36) >> 1);
  if ((_DWORD)a4)
    v38 = v37;
  else
    v38 = -v37;
  v94 = 0;
  LODWORD(v95) = 0;
  BYTE4(v95) = 0;
  v96 = 1;
  v89.var0.var0.var0 = 0;
  v89.var0.var1 = 0;
  *((_BYTE *)&v89.var0 + 12) &= 0xF0u;
  v89.var1 = 1;
  v39 = v90;
  if (v90)
    *((_DWORD *)v90 + 6) += 2;
  v40 = 0;
  v85 = v39;
  v41 = &v86;
  v86 = var1;
  v87 = v92;
  v42 = v93;
  v43 = v26;
  v79 = 1;
  v78 = v38;
  while (1)
  {
    v88 = v42;
    if ((a4 & 1) != 0)
      WebCore::nextLinePosition((uint64_t)&v85, v43, 0, &v82);
    else
      WebCore::previousLinePosition((uint64_t)&v85, v43, 0, &v82);
    v44 = (Node *)v82;
    v82 = 0;
    v45 = v89.var0.var0.var0;
    v89.var0.var0.var0 = v44;
    if (!v45)
      goto LABEL_37;
    if (*((_DWORD *)v45 + 6) != 2)
    {
      *((_DWORD *)v45 + 6) -= 2;
LABEL_37:
      v89.var0.var1 = v83;
      *((_BYTE *)&v89.var0 + 12) = BYTE4(v83);
      v89.var1 = v84;
      goto LABEL_38;
    }
    if ((*((_WORD *)v45 + 15) & 0x400) != 0)
      goto LABEL_37;
    WebCore::Node::removedLastRef((WebCore::Node *)v45, v36);
    v56 = v82;
    v89.var0.var1 = v83;
    *((_BYTE *)&v89.var0 + 12) = BYTE4(v83);
    v89.var1 = v84;
    v82 = 0;
    if (v56)
    {
      if (*((_DWORD *)v56 + 6) == 2)
      {
        if ((*((_WORD *)v56 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v56, v36);
      }
      else
      {
        *((_DWORD *)v56 + 6) -= 2;
      }
    }
LABEL_38:
    if (!v89.var0.var0.var0)
      break;
    if (WebCore::operator==((uint64_t *)&v89, (uint64_t *)&v85))
      break;
    v98.var0.var0.var0 = 0;
    v82 = WebCore::localCaretRectInRendererForCaretPainting((WebCore *)&v89, &v98, v46);
    v83 = v47;
    v49 = WebCore::absoluteBoundsForLocalCaretRect((WebCore *)v98.var0.var0.var0, (WebCore::RenderBlock *)&v82, 0, v48);
    if ((int)v36 < 1 || SHIDWORD(v36) < 1)
      break;
    v50 = (_DWORD)a4 ? HIDWORD(v49) + (HIDWORD(v36) >> 1) : -(HIDWORD(v49) + (HIDWORD(v36) >> 1));
    if (v50 - (int)v38 > v81)
      break;
    v77 = v43;
    v51 = v41;
    v52 = v38;
    v53 = v89.var0.var0.var0;
    if (v50 >= v78)
    {
      if (v89.var0.var0.var0)
        *((_DWORD *)v89.var0.var0.var0 + 6) += 2;
      v54 = v53;
      if (v40)
      {
        if (*((_DWORD *)v40 + 6) == 2)
        {
          v54 = v53;
          if ((*((_WORD *)v40 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v40, v36);
            v54 = v89.var0.var0.var0;
          }
        }
        else
        {
          *((_DWORD *)v40 + 6) -= 2;
          v54 = v53;
        }
      }
      LODWORD(v95) = v89.var0.var1;
      BYTE4(v95) = *((_BYTE *)&v89.var0 + 12);
      v79 = v89.var1;
      v78 = v50;
      v40 = v53;
    }
    else
    {
      v54 = v89.var0.var0.var0;
    }
    v38 = v52;
    if (v54)
      *((_DWORD *)v54 + 6) += 2;
    v55 = v85;
    v85 = (WebCore::Node *)v54;
    v41 = v51;
    v43 = v77;
    if (v55)
    {
      if (*((_DWORD *)v55 + 6) == 2)
      {
        if ((*((_WORD *)v55 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v55, v36);
      }
      else
      {
        *((_DWORD *)v55 + 6) -= 2;
      }
    }
    *v41 = v89.var0.var1;
    *((_BYTE *)v41 + 4) = *((_BYTE *)&v89.var0 + 12);
    v42 = v89.var1;
  }
  v94 = (WebCore::Node *)v40;
  v96 = v79;
  v57 = v85;
  v85 = 0;
  if (v57)
  {
    if (*((_DWORD *)v57 + 6) == 2)
    {
      if ((*((_WORD *)v57 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v57, v36);
    }
    else
    {
      *((_DWORD *)v57 + 6) -= 2;
    }
  }
  v19 = v40 != 0;
  if (v40)
  {
    if ((a2 & 1) != 0)
    {
      WebCore::FrameSelection::setExtent(a1, (uint64_t *)&v94, a5);
      if (!a5)
        goto LABEL_79;
LABEL_78:
      *(_BYTE *)(a1 + 184) = 0;
    }
    else
    {
      WebCore::FrameSelection::moveTo(a1, (uint64_t *)&v94, a5, v80);
      if (a5)
        goto LABEL_78;
    }
LABEL_79:
    v58 = *(_QWORD *)(a1 + 32);
    if (v58 && (v59 = *(_QWORD *)(v58 + 8)) != 0)
    {
      v60 = *(unsigned __int8 *)(*(_QWORD *)(v59 + 680) + 370);
      if (v60)
        v60 = v60 != 3;
    }
    else
    {
      v60 = 1;
    }
    if (v60 | a2)
      v61 = 2;
    else
      v61 = 0;
    *(_BYTE *)(a1 + 154) = *(_BYTE *)(a1 + 154) & 0xFD | v61;
  }
  v62 = v89.var0.var0.var0;
  v89.var0.var0.var0 = 0;
  if (v62)
  {
    if (*((_DWORD *)v62 + 6) == 2)
    {
      if ((*((_WORD *)v62 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v62, v36);
    }
    else
    {
      *((_DWORD *)v62 + 6) -= 2;
    }
  }
  v94 = 0;
  if (v40)
  {
    if (*((_DWORD *)v40 + 6) == 2)
    {
      if ((*((_WORD *)v40 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v40, v36);
    }
    else
    {
      *((_DWORD *)v40 + 6) -= 2;
    }
  }
LABEL_93:
  v63 = v90;
  v90 = 0;
  if (v63)
  {
    if (*((_DWORD *)v63 + 6) == 2)
    {
      if ((*((_WORD *)v63 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v63, v36);
    }
    else
    {
      *((_DWORD *)v63 + 6) -= 2;
    }
  }
  return v19;
}

void WebCore::FrameSelection::setBase(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  unsigned __int16 v9;
  int v10;
  char v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  int v28;
  char v29;
  char v30;
  __int16 v31;

  v5 = *a2;
  if (*a2)
  {
    v6 = *(_DWORD *)(v5 + 24);
    *(_DWORD *)(v5 + 24) = v6 + 2;
    v10 = *((_DWORD *)a2 + 2);
    v11 = *((_BYTE *)a2 + 12);
    v7 = *((_BYTE *)a2 + 16);
    *(_DWORD *)(v5 + 24) = v6 + 4;
  }
  else
  {
    v10 = *((_DWORD *)a2 + 2);
    v11 = *((_BYTE *)a2 + 12);
    v7 = *((_BYTE *)a2 + 16);
  }
  v12 = v5;
  v13 = v10;
  v14 = v11;
  v8 = *(_QWORD *)(a1 + 104);
  if (v8)
    *(_DWORD *)(v8 + 24) += 2;
  v15 = v8;
  v16 = *(_DWORD *)(a1 + 112);
  v17 = *(_BYTE *)(a1 + 116);
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = v7;
  v31 = -256;
  WebCore::VisibleSelection::validate((uint64_t)&v12, 0);
  if (a3)
    v9 = 199;
  else
    v9 = 6;
  WebCore::FrameSelection::setSelection(a1, (uint64_t)&v12, v9, 0, 0, 0, 0);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v12);
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
}

void WebCore::FrameSelection::setBase(uint64_t a1, uint64_t *a2, char a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  int v25;
  char v26;
  char v27;
  __int16 v28;

  v6 = *a2;
  if (*a2)
    *(_DWORD *)(v6 + 24) += 2;
  v9 = v6;
  v10 = *((_DWORD *)a2 + 2);
  v11 = *((_BYTE *)a2 + 12);
  v7 = *(_QWORD *)(a1 + 104);
  if (v7)
    *(_DWORD *)(v7 + 24) += 2;
  v12 = v7;
  v13 = *(_DWORD *)(a1 + 112);
  v14 = *(_BYTE *)(a1 + 116);
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = a3;
  v28 = -256;
  WebCore::VisibleSelection::validate((uint64_t)&v9, 0);
  if (a4)
    v8 = 199;
  else
    v8 = 6;
  WebCore::FrameSelection::setSelection(a1, (uint64_t)&v9, v8, 0, 0, 0, 0);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v9);
}

uint64_t WebCore::FrameSelection::absoluteCaretBounds(WebCore::FrameSelection *this, BOOL *a2, uint64_t a3, BOOL *a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *((_QWORD *)this + 4);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return 0;
  *(_DWORD *)(v5 + 24) += 2;
  if (*(_QWORD *)(v5 + 1944))
  {
    if (!*(_BYTE *)(v5 + 3405))
    {
      WebCore::Document::updateStyleIfNeeded((WebCore::Document *)v5);
      if ((*((_WORD *)this + 128) & 0x20) != 0)
        WebCore::FrameSelection::updateAppearance(this);
    }
  }
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  WebCore::FrameSelection::recomputeCaretRect(this, (uint64_t)a2, a3, a4);
  if (a2)
    *a2 = *((_BYTE *)this + 256) & 1;
  return *((_QWORD *)this + 26);
}

uint64_t WebCore::FrameSelection::recomputeCaretRect(WebCore::FrameSelection *this, uint64_t a2, uint64_t a3, BOOL *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  Position *v14;
  WebCore::VisiblePosition *v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::Node *v18;
  uint64_t v19;
  int v20;
  const WebCore::VisiblePosition *v21;
  WebCore::RenderBlock **v22;
  uint64_t v23;
  WebCore::Node *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  WebCore::RenderObject *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v33;
  int v34;
  int v35;
  Node *v36;
  Node *var0;
  WebCore::Node *v38;
  unsigned int v39;
  char v40;
  char v41;
  VisiblePosition v42;

  if (!*((_BYTE *)this + 24))
    return 0;
  v5 = *((_QWORD *)this + 4);
  if (!v5)
    return 0;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    return 0;
  *(_DWORD *)(v6 + 24) += 2;
  v7 = *(_QWORD *)(v6 + 528);
  if (v7 && (v8 = *(_QWORD *)(v7 + 8)) != 0 && *(_QWORD *)(v8 + 288))
  {
    v10 = *((_DWORD *)this + 2);
    v9 = *((_DWORD *)this + 3);
    v12 = *((_DWORD *)this + 4);
    v11 = *((_DWORD *)this + 5);
    v13 = *((_QWORD *)this + 24);
    if (v13)
      *(_DWORD *)(v13 + 24) += 2;
    v14 = (Position *)((char *)this + 8);
    if (*((_BYTE *)this + 153) == 1
      && ((v15 = (WebCore::FrameSelection *)((char *)this + 120), (v16 = *((_QWORD *)this + 15)) == 0)
       || (*(_BYTE *)(v16 + 22) & 8) != 0)
      && ((v17 = *((_QWORD *)this + 17)) == 0 || (*(_BYTE *)(v17 + 22) & 8) != 0))
    {
      v20 = *((unsigned __int8 *)this + 152);
      WebCore::VisiblePosition::canonicalPosition(v15, (uint64_t)&v38);
      v41 = 1;
      if (!v20)
      {
        v36 = (Node *)v38;
        if (v38)
        {
          *((_DWORD *)v38 + 6) += 2;
          v42.var0.var0.var0 = v36;
          v42.var0.var1 = v39;
          *((_BYTE *)&v42.var0 + 12) = v40;
          v42.var1 = 0;
          if (!WebCore::inSameLine((WebCore *)&v38, (const WebCore::VisiblePosition *)&v42, v21))
            v41 = 0;
          var0 = v42.var0.var0.var0;
          v42.var0.var0.var0 = 0;
          if (var0)
          {
            if (*((_DWORD *)var0 + 6) == 2)
            {
              if ((*((_WORD *)var0 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)var0);
            }
            else
            {
              *((_DWORD *)var0 + 6) -= 2;
            }
          }
        }
      }
      WebCore::Document::updateLayout(v6, 2, 0);
      *((_BYTE *)this + 24) = 0;
      v42.var0.var0.var0 = 0;
      *((_QWORD *)this + 1) = WebCore::localCaretRectInRendererForCaretPainting((WebCore *)&v38, &v42, v22);
      *((_QWORD *)this + 2) = v23;
      v18 = v38;
      if ((int)v23 < 1 || SHIDWORD(v23) < 1)
      {
        v24 = v38;
        v18 = (WebCore::Node *)v13;
      }
      else
      {
        if (v38)
          *((_DWORD *)v38 + 6) += 4;
        if (v13)
        {
          if (*(_DWORD *)(v13 + 24) == 2)
          {
            if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v13);
          }
          else
          {
            *(_DWORD *)(v13 + 24) -= 2;
          }
        }
        if (v18)
        {
          if (*((_DWORD *)v18 + 6) == 2)
          {
            if ((*((_WORD *)v18 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v18);
          }
          else
          {
            *((_DWORD *)v18 + 6) -= 2;
          }
        }
        *((_WORD *)this + 128) |= 2u;
        v24 = v38;
      }
      v38 = 0;
      if (v24)
      {
        if (*((_DWORD *)v24 + 6) == 2)
        {
          if ((*((_WORD *)v24 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v24);
        }
        else
        {
          *((_DWORD *)v24 + 6) -= 2;
        }
      }
    }
    else
    {
      v14->var0.var0 = 0;
      *((_QWORD *)this + 2) = 0;
      v18 = (WebCore::Node *)v13;
    }
    v42.var0 = *v14;
    if (v18 == *((WebCore::Node **)this + 24)
      && v10 == LODWORD(v42.var0.var0.var0)
      && (Node *)__PAIR64__(v12, v9) == *(Node **)((char *)&v42.var0.var0.var0 + 4)
      && v11 == *((_DWORD *)&v42.var0 + 3)
      && (*((_WORD *)this + 128) & 2) == 0)
    {
      goto LABEL_46;
    }
    v26 = *((_DWORD *)this + 52);
    v25 = *((_DWORD *)this + 53);
    v28 = *((_DWORD *)this + 54);
    v27 = *((_DWORD *)this + 55);
    LOBYTE(v38) = 0;
    if (v18)
    {
      v33 = *((_QWORD *)v18 + 8);
      v29 = (WebCore::RenderObject *)(v33 & 0xFFFFFFFFFFFFLL);
      if ((v33 & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)((v33 & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 1)
          goto LABEL_64;
        if ((*((_WORD *)v18 + 14) & 0x10) != 0)
        {
          v34 = *((_DWORD *)v18 + 6);
          *((_DWORD *)v18 + 6) = v34 + 2;
          if ((*((_BYTE *)v29 + 45) & 2) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195AE3844);
          }
          v35 = *((unsigned __int8 *)v29 + 46);
          if (v34)
          {
            *((_DWORD *)v18 + 6) = v34;
          }
          else if ((*((_WORD *)v18 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v18);
          }
          if (v35 == 35 || v35 == 63)
            goto LABEL_64;
        }
        if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v18 + 208))(v18) & 1) == 0)
LABEL_64:
          v29 = WebCore::RenderObject::containingBlock(v29);
      }
    }
    else
    {
      v29 = 0;
    }
    v30 = WebCore::absoluteBoundsForLocalCaretRect(v29, (WebCore::RenderBlock *)&v42, (const WebCore::LayoutRect *)&v38, a4);
    *((_QWORD *)this + 26) = v30;
    *((_QWORD *)this + 27) = v31;
    *((_WORD *)this + 128) = *((_WORD *)this + 128) & 0xFFFC | v38;
    if (v18 == *((WebCore::Node **)this + 24) && __PAIR64__(v25, v26) == v30 && __PAIR64__(v27, v28) == v31)
    {
LABEL_46:
      v19 = 0;
      if (v18)
      {
LABEL_47:
        if (*((_DWORD *)v18 + 6) == 2)
        {
          if ((*((_WORD *)v18 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v18);
        }
        else
        {
          *((_DWORD *)v18 + 6) -= 2;
        }
      }
    }
    else
    {
      v19 = 1;
      if (v18)
        goto LABEL_47;
    }
  }
  else
  {
    v19 = 0;
  }
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  return v19;
}

unint64_t WebCore::FrameSelection::invalidateCaretRect(unint64_t this, uint64_t a2, uint64_t a3, BOOL *a4)
{
  unint64_t v4;
  unint64_t v5;
  WebCore::Node *v6;
  char v7;

  if (*(_BYTE *)(this + 153) == 1)
  {
    v4 = this;
    v5 = this + 8;
    v6 = *(WebCore::Node **)(this + 120);
    v7 = WebCore::FrameSelection::recomputeCaretRect((WebCore::FrameSelection *)this, a2, a3, a4);
    return WebCore::CaretBase::invalidateCaretRect(v5, v6, v7, *(WebCore::CaretAnimator **)(v4 + 248));
  }
  return this;
}

uint64_t WebCore::CaretBase::computeCaretColor@<X0>(uint64_t this@<X0>, const WebCore::Node *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::FrameSelection *v6;
  uint64_t v7;
  _QWORD v8[4];
  _QWORD *v9;

  v4 = *(_QWORD *)(this + 24);
  if ((*(_BYTE *)(v4 + 238) & 0x20) != 0)
  {
    *a3 = 0;
  }
  else
  {
    v7 = *(_QWORD *)(this + 32) + 328;
    v8[0] = &v7;
    v8[1] = &v7;
    v8[2] = &v7;
    v8[3] = &v7;
    v5 = *(unsigned int *)(v4 + 120);
    if ((_DWORD)v5 == -1)
    {
      v6 = (WebCore::FrameSelection *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::FrameSelection::setCaretBlinkingSuspended(v6);
    }
    else
    {
      v9 = v8;
      return ((uint64_t (*)(_QWORD **, uint64_t, const WebCore::Node *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v5])(&v9, v4 + 112, a2);
    }
  }
  return this;
}

uint64_t WebCore::FrameSelection::setCaretBlinkingSuspended(WebCore::FrameSelection *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 31) + 40))(*((_QWORD *)this + 31));
}

BOOL WebCore::FrameSelection::isCaretBlinkingSuspended(WebCore::FrameSelection *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 31);
  return *(_BYTE *)(v1 + 90) || *(_BYTE *)(v1 + 89) != 0;
}

unint64_t WebCore::FrameSelection::caretAnimationDidUpdate(unint64_t this, WebCore::CaretAnimator *a2, uint64_t a3, BOOL *a4)
{
  unint64_t v4;
  unint64_t v5;
  WebCore::Node *v6;
  char v7;

  if (*(_BYTE *)(this + 153) == 1)
  {
    v4 = this;
    v5 = this + 8;
    v6 = *(WebCore::Node **)(this + 120);
    v7 = WebCore::FrameSelection::recomputeCaretRect((WebCore::FrameSelection *)this, (uint64_t)a2, a3, a4);
    return WebCore::CaretBase::invalidateCaretRect(v5, v6, v7, *(WebCore::CaretAnimator **)(v4 + 248));
  }
  return this;
}

uint64_t WebCore::FrameSelection::setPrefersNonBlinkingCursor(uint64_t this, char a2)
{
  *(_BYTE *)(*(_QWORD *)(this + 248) + 90) = a2;
  return this;
}

uint64_t WebCore::FrameSelection::document(WebCore::FrameSelection *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 4);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

WebCore::Node *WebCore::FrameSelection::caretNode(WebCore::FrameSelection *this)
{
  int v1;
  void *v2;
  const WebCore::VisiblePosition *v3;
  WebCore::Node *v4;
  int v5;
  WebCore::Node *v6;
  int v7;
  WebCore::Node *v9;
  WebCore::Node *v10;
  WebCore::Node *v11;
  int v12;
  char v13;
  char v14;
  WebCore::Node *v15;
  int v16;
  char v17;
  char v18;

  if (*((_BYTE *)this + 153) == 2)
  {
    WebCore::VisiblePosition::canonicalPosition((WebCore::FrameSelection *)((char *)this + 120), (uint64_t)&v11);
    v14 = 1;
  }
  else
  {
    v1 = *((unsigned __int8 *)this + 152);
    WebCore::VisiblePosition::canonicalPosition((WebCore::FrameSelection *)((char *)this + 120), (uint64_t)&v11);
    v14 = 1;
    if (!v1)
    {
      v9 = v11;
      if (!v11)
        return 0;
      *((_DWORD *)v11 + 6) += 2;
      v15 = v9;
      v16 = v12;
      v17 = v13;
      v18 = 0;
      if (!WebCore::inSameLine((WebCore *)&v11, (const WebCore::VisiblePosition *)&v15, v3))
        v14 = 0;
      v10 = v15;
      v15 = 0;
      if (v10)
      {
        if (*((_DWORD *)v10 + 6) == 2)
        {
          if ((*((_WORD *)v10 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v10, v2);
        }
        else
        {
          *((_DWORD *)v10 + 6) -= 2;
        }
      }
    }
  }
  v4 = v11;
  if (v11)
  {
    v5 = *((_DWORD *)v11 + 6);
    *((_DWORD *)v11 + 6) = v5 + 2;
    if (v5)
    {
      *((_DWORD *)v4 + 6) = v5;
    }
    else
    {
      if ((*((_WORD *)v4 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v4, v2);
        v6 = v11;
        v11 = 0;
        if (!v6)
          return v4;
        v5 = *((_DWORD *)v6 + 6);
        goto LABEL_7;
      }
      v5 = 2;
    }
    v11 = 0;
    v6 = v4;
LABEL_7:
    v7 = v5 - 2;
    if (v7)
    {
      *((_DWORD *)v6 + 6) = v7;
    }
    else if ((*((_WORD *)v6 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v6, v2);
    }
  }
  return v4;
}

BOOL WebCore::FrameSelection::contains(WebCore::FrameSelection *this, const WebCore::LayoutPoint *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  WebCore::Node *v11;
  WTF *v12;
  uint64_t v13;
  __int128 v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  _BOOL8 v35;
  WTF *v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  WebCore::Node *v41;
  WTF *v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  WTF *v46;
  int v47;
  unsigned int v48;
  WebCore::Node *v49[2];
  __int128 v50;
  _QWORD v51[3];
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  __int16 v62;
  WebCore::Node *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[3];
  char v67;
  uint64_t v68;
  uint64_t v69[2];
  uint64_t v70;
  char v71;
  WTF *v72;
  int v73;
  char v74;

  if (*((_BYTE *)this + 153) != 2)
    return 0;
  WebCore::VisibleSelection::firstRange((WebCore::FrameSelection *)((char *)this + 56), v69);
  if (!v71)
    return 0;
  v5 = *((_QWORD *)this + 4);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      *(_DWORD *)(v6 + 24) += 2;
      v7 = HIDWORD(*(_QWORD *)a2);
      v8 = *(_QWORD *)a2 & 0xFFFFFFC0;
      v9 = *(_QWORD *)a2 & 0xFFFFFFC0FFFFFFC0;
      v51[0] = *(_QWORD *)a2;
      v51[1] = v9;
      v51[2] = 0x4000000040;
      v52 = (float)SLODWORD(v51[0]) * 0.015625;
      v53 = (float)(int)v7 * 0.015625;
      v54 = (float)(int)v8 * 0.015625;
      v55 = (float)(v7 & 0xFFFFFFC0) * 0.015625;
      v56 = v54 + 1.0;
      v57 = v55;
      v58 = v54 + 1.0;
      v59 = v55 + 1.0;
      v60 = v54;
      v61 = v55 + 1.0;
      v62 = 256;
      v63 = 0;
      v64 = 0;
      v68 = 0;
      v65 = v51[0];
      memset(v66, 0, sizeof(v66));
      v67 = 0;
      LODWORD(v49[0]) = 259;
      BYTE4(v49[0]) = 1;
      WebCore::Document::hitTest(v6, v49, (WebCore::HitTestingTransformState *)v51, (uint64_t)v51);
      v11 = v63;
      if (!v63)
      {
LABEL_82:
        v35 = 0;
LABEL_54:
        WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v51, v10);
        if (*(_DWORD *)(v6 + 24) == 2)
        {
          if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v6, v4);
        }
        else
        {
          *(_DWORD *)(v6 + 24) -= 2;
        }
        goto LABEL_56;
      }
      *((_DWORD *)v63 + 6) += 2;
      if ((*((_QWORD *)v11 + 8) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if (!v71)
          goto LABEL_81;
        if (WebCore::ImageOverlay::isInsideOverlay((WebCore::ImageOverlay *)v69, (const WebCore::SimpleRange *)v10)&& WebCore::ImageOverlay::isInsideOverlay(v11, (const WebCore::Node *)v10))
        {
          if (v71)
          {
            WebCore::RenderObject::absoluteTextQuads(v69, 16, (uint64_t)&v46);
            if (v48)
            {
              v12 = v46;
              v13 = 32 * v48;
              while (1)
              {
                v14 = *((_OWORD *)v12 + 1);
                *(_OWORD *)v49 = *(_OWORD *)v12;
                v50 = v14;
                if ((WebCore::FloatQuad::isEmpty((WebCore::FloatQuad *)v49) & 1) == 0)
                {
                  v15 = *(float *)&v50 - *(float *)v49;
                  v16 = *((float *)&v50 + 1) - *((float *)v49 + 1);
                  v17 = (float)((float)*(int *)a2 * 0.015625) - *(float *)v49;
                  v18 = (float)((float)*((int *)a2 + 1) * 0.015625) - *((float *)v49 + 1);
                  v19 = (float)(v16 * v16) + (float)(v15 * v15);
                  v20 = (float)((float)(*((float *)&v50 + 1) - *((float *)v49 + 1))
                              * (float)(*((float *)&v49[1] + 1) - *((float *)v49 + 1)))
                      + (float)((float)(*(float *)&v50 - *(float *)v49) * (float)(*(float *)&v49[1] - *(float *)v49));
                  v21 = (float)((float)(*((float *)&v50 + 1) - *((float *)v49 + 1)) * v18)
                      + (float)((float)(*(float *)&v50 - *(float *)v49) * v17);
                  v22 = (float)((float)(*((float *)&v49[1] + 1) - *((float *)v49 + 1))
                              * (float)(*((float *)&v49[1] + 1) - *((float *)v49 + 1)))
                      + (float)((float)(*(float *)&v49[1] - *(float *)v49) * (float)(*(float *)&v49[1] - *(float *)v49));
                  v23 = (float)(v18 * (float)(*((float *)&v49[1] + 1) - *((float *)v49 + 1)))
                      + (float)((float)(*(float *)&v49[1] - *(float *)v49) * v17);
                  v24 = 1.0 / (float)((float)(v19 * v22) - (float)(v20 * v20));
                  v25 = (float)((float)(v22 * v21) - (float)(v20 * v23)) * v24;
                  if (v25 >= 0.0)
                  {
                    v26 = (float)((float)(v19 * v23) - (float)(v20 * v21)) * v24;
                    if (v26 >= 0.0 && (float)(v25 + v26) <= 1.0)
                      break;
                  }
                  v28 = (float)((float)(*((float *)&v50 + 3) - *((float *)v49 + 1))
                              * (float)(*((float *)&v50 + 3) - *((float *)v49 + 1)))
                      + (float)((float)(*((float *)&v50 + 2) - *(float *)v49)
                              * (float)(*((float *)&v50 + 2) - *(float *)v49));
                  v29 = (float)(v16 * (float)(*((float *)&v50 + 3) - *((float *)v49 + 1)))
                      + (float)((float)(*((float *)&v50 + 2) - *(float *)v49) * v15);
                  v30 = (float)(v18 * (float)(*((float *)&v50 + 3) - *((float *)v49 + 1)))
                      + (float)((float)(*((float *)&v50 + 2) - *(float *)v49) * v17);
                  v31 = 1.0 / (float)((float)(v28 * v19) - (float)(v29 * v29));
                  v32 = (float)((float)(v19 * v30) - (float)(v29 * v21)) * v31;
                  if (v32 >= 0.0)
                  {
                    v33 = (float)((float)(v28 * v21) - (float)(v29 * v30)) * v31;
                    if (v33 >= 0.0 && (float)(v32 + v33) <= 1.0)
                      break;
                  }
                }
                v12 = (WTF *)((char *)v12 + 32);
                v13 -= 32;
                if (!v13)
                  goto LABEL_63;
              }
              v35 = 1;
            }
            else
            {
LABEL_63:
              v35 = 0;
            }
            v45 = v46;
            if (v46)
            {
              v46 = 0;
              v47 = 0;
              WTF::fastFree(v45, v10);
            }
            goto LABEL_52;
          }
          goto LABEL_81;
        }
        if (!v71)
        {
LABEL_81:
          __break(1u);
          goto LABEL_82;
        }
        (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD *, uint64_t, _QWORD))(*(_QWORD *)(*((_QWORD *)v11 + 8) & 0xFFFFFFFFFFFFLL)
                                                                                       + 352))(&v46, *((_QWORD *)v11 + 8) & 0xFFFFFFFFFFFFLL, v66, 1, 0);
        v37 = v46;
        if (v46)
        {
          *((_DWORD *)v46 + 6) += 2;
          v72 = v37;
          v73 = v47;
          v74 = v48;
          WebCore::makeBoundaryPoint((uint64_t *)&v72, (uint64_t)v49);
          if (*((_DWORD *)v37 + 6) == 2)
          {
            if ((*((_WORD *)v37 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v37, v10);
          }
          else
          {
            *((_DWORD *)v37 + 6) -= 2;
          }
        }
        else
        {
          v72 = 0;
          v73 = v47;
          v74 = v48;
          WebCore::makeBoundaryPoint((uint64_t *)&v72, (uint64_t)v49);
        }
        if ((_BYTE)v50)
        {
          v38 = WebCore::treeOrder<(WebCore::TreeType)2>((int *)v69, (uint64_t)v49);
          v35 = 0;
          if (v38 != 129 && (char)v38 <= 0)
          {
            v39 = WebCore::treeOrder<(WebCore::TreeType)2>((int *)v49, (uint64_t)&v70);
            v35 = v39 != 129 && (char)v39 < 1;
          }
          if ((_BYTE)v50)
          {
            v41 = v49[0];
            v49[0] = 0;
            if (v41)
            {
              if (*((_DWORD *)v41 + 6) == 2)
              {
                if ((*((_WORD *)v41 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v41, v10);
              }
              else
              {
                *((_DWORD *)v41 + 6) -= 2;
              }
            }
          }
        }
        else
        {
          v35 = 0;
        }
        v42 = v46;
        v46 = 0;
        if (v42)
        {
          if (*((_DWORD *)v42 + 6) == 2)
          {
            if ((*((_WORD *)v42 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v42, v10);
          }
          else
          {
            *((_DWORD *)v42 + 6) -= 2;
          }
        }
      }
      else
      {
        v35 = 0;
      }
LABEL_52:
      if (*((_DWORD *)v11 + 6) == 2)
      {
        if ((*((_WORD *)v11 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v11, v10);
      }
      else
      {
        *((_DWORD *)v11 + 6) -= 2;
      }
      goto LABEL_54;
    }
  }
  v35 = 0;
LABEL_56:
  if (v71)
  {
    v43 = v70;
    v70 = 0;
    if (v43)
    {
      if (*(_DWORD *)(v43 + 24) == 2)
      {
        if ((*(_WORD *)(v43 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v43, v4);
      }
      else
      {
        *(_DWORD *)(v43 + 24) -= 2;
      }
    }
    v44 = v69[0];
    v69[0] = 0;
    if (v44)
    {
      if (*(_DWORD *)(v44 + 24) == 2)
      {
        if ((*(_WORD *)(v44 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v44, v4);
      }
      else
      {
        *(_DWORD *)(v44 + 24) -= 2;
      }
    }
  }
  return v35;
}

uint64_t *WebCore::invalidateFocusedElementAndShadowIncludingAncestors(uint64_t *this, WebCore::Element *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15[4];
  __int128 v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  WebCore::Element *v19;

  *this = 0;
  this[1] = 0;
  if (a2)
  {
    v4 = (uint64_t)this;
    *((_DWORD *)a2 + 6) += 2;
    v19 = a2;
    do
    {
      v15[0] = 29;
      v15[1] = a3;
      v15[2] = 30;
      v15[3] = a3;
      WebCore::Style::PseudoClassChangeInvalidation::PseudoClassChangeInvalidation((uint64_t)&v16, (uint64_t)a2, v15, 2);
      v5 = *(unsigned int *)(v4 + 12);
      if ((_DWORD)v5 == *(_DWORD *)(v4 + 8))
      {
        WTF::Vector<WebCore::Style::PseudoClassChangeInvalidation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Style::PseudoClassChangeInvalidation>(v4, (unint64_t)&v16);
      }
      else
      {
        WebCore::Style::PseudoClassChangeInvalidation::PseudoClassChangeInvalidation((WebCore::Style::PseudoClassChangeInvalidation *)(*(_QWORD *)v4 + 32 * v5), (unsigned __int8 **)&v16);
        ++*(_DWORD *)(v4 + 12);
      }
      WebCore::Style::PseudoClassChangeInvalidation::~PseudoClassChangeInvalidation((WebCore::Style::PseudoClassChangeInvalidation *)&v16, v6);
      v7 = (uint64_t)v19;
      do
      {
        WebCore::Style::PseudoClassChangeInvalidation::PseudoClassChangeInvalidation((uint64_t)&v16, v7, (WTF::StringImpl *)0x1F, a3, 0);
        v8 = *(unsigned int *)(v4 + 12);
        if ((_DWORD)v8 == *(_DWORD *)(v4 + 8))
        {
          WTF::Vector<WebCore::Style::PseudoClassChangeInvalidation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Style::PseudoClassChangeInvalidation>(v4, (unint64_t)&v16);
        }
        else
        {
          v9 = *(_QWORD *)v4 + 32 * v8;
          *(_OWORD *)v9 = v16;
          WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::HashTable((uint64_t *)(v9 + 16), &v17);
          WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::HashTable((uint64_t *)(v9 + 24), &v18);
          ++*(_DWORD *)(v4 + 12);
        }
        if ((_BYTE)v16)
          WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(*((uint64_t *)&v16 + 1), &v18);
        if (v18)
          WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v18, v10);
        if (v17)
          WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v17, v10);
        v7 = *(_QWORD *)(v7 + 32);
      }
      while (v7 && (*(_WORD *)(v7 + 28) & 8) != 0);
      v11 = **((_QWORD **)v19 + 5);
      if (v11)
        v12 = (*(_WORD *)(v11 + 28) & 0x80) == 0;
      else
        v12 = 1;
      if (!v12 && (v13 = *(_QWORD *)(v11 + 200)) != 0)
        v14 = *(_QWORD *)(v13 + 8);
      else
        v14 = 0;
      this = WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v19, v14);
      a2 = v19;
    }
    while (v19);
  }
  return this;
}

void WebCore::FrameSelection::setFocused(WebCore::FrameSelection *this, WebCore::Document *a2)
{
  int v2;
  uint64_t v4;
  int isPageActive;
  int v6;
  uint64_t v7;
  void *v8;
  __int16 v9;
  __int16 v10;
  uint64_t v11[2];

  if (((((*((_WORD *)this + 128) & 4) == 0) ^ a2) & 1) == 0)
  {
    v2 = (int)a2;
    v4 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
    isPageActive = WebCore::isPageActive(v4, a2);
    v6 = isPageActive;
    v7 = *(_QWORD *)(v4 + 1248);
    if (v7)
      *(_DWORD *)(v7 + 24) += 2;
    WebCore::invalidateFocusedElementAndShadowIncludingAncestors(v11, (WebCore::Element *)v7, v2 & isPageActive);
    if (v2)
      v9 = 4;
    else
      v9 = 0;
    if (v6)
      v10 = 8;
    else
      v10 = 0;
    *((_WORD *)this + 128) = v10 | v9 | *((_WORD *)this + 128) & 0xFFF3;
    WTF::Vector<WebCore::Style::PseudoClassChangeInvalidation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v11, v8);
    WebCore::FrameSelection::focusedOrActiveStateChanged(this);
    if (v7)
    {
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v7);
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
    }
  }
}

void WebCore::FrameSelection::setCaretVisibility(WebCore::FrameSelection *this, void *a2, int a3)
{
  uint64_t v5;

  if ((((*((_BYTE *)this + 25) == 0) ^ a2) & 1) == 0 && a3)
  {
    v5 = *((_QWORD *)this + 4);
    if (v5 && *(_QWORD *)(v5 + 8))
      WebCore::FrameSelection::updateSelectionAppearanceNow(this, a2);
    if (a3)
      WebCore::FrameSelection::updateAppearance(this);
  }
}

uint64_t WebCore::isFrameElement(unint64_t this, const WebCore::Node *a2)
{
  int v2;
  uint64_t v3;

  if ((this & 0xFFFFFFFFFFFFLL) == 0)
    return 0;
  v2 = (*(unsigned __int8 *)((this & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
  if ((*(_BYTE *)((this & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
    v2 = 0;
  if (v2 == 1 && (v3 = *(_QWORD *)((this & 0xFFFFFFFFFFFFLL) + 0xE8)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
  else
    return 0;
}

WebCore::MutableStyleProperties *WebCore::FrameSelection::copyTypingStyle@<X0>(WebCore::FrameSelection *this@<X0>, WebCore::MutableStyleProperties **a2@<X8>)
{
  uint64_t v3;
  const WebCore::StyleProperties *v4;
  WebCore::MutableStyleProperties *v5;
  WebCore::MutableStyleProperties *result;

  v3 = *((_QWORD *)this + 25);
  if (v3 && (v4 = *(const WebCore::StyleProperties **)(v3 + 8)) != 0)
  {
    v5 = (WebCore::MutableStyleProperties *)WTF::fastMalloc((WTF *)0x60);
    result = WebCore::MutableStyleProperties::MutableStyleProperties(v5, v4);
  }
  else
  {
    result = 0;
  }
  *a2 = result;
  return result;
}

uint64_t WebCore::FrameSelection::shouldDeleteSelection(WebCore::FrameSelection *this, const WebCore::VisibleSelection *a2)
{
  WebCore::Document *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WebCore::Node *v10;
  WebCore::Node *v11;
  WebCore::Editor *v13;
  void *v14;
  WebCore::Editor *v15;
  uint64_t v16;
  void *v17;
  const WebCore::VisibleSelection *v18;
  WebCore::Node *v19[2];
  WebCore::Node *v20;
  char v21;

  v2 = *(WebCore::Document **)(*((_QWORD *)this + 4) + 8);
  v3 = *((_QWORD *)v2 + 66);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      if (*(_BYTE *)(v4 + 376))
        return 1;
    }
  }
  v6 = *((_QWORD *)v2 + 382);
  if (!v6)
  {
    v18 = a2;
    v13 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v13, v2);
    v15 = (WebCore::Editor *)*((_QWORD *)v2 + 382);
    *((_QWORD *)v2 + 382) = v13;
    if (v15)
    {
      WebCore::Editor::~Editor(v15, v14);
      if (*(_DWORD *)v16)
      {
        *(_QWORD *)(v16 + 496) = 0;
        *(_OWORD *)(v16 + 464) = 0u;
        *(_OWORD *)(v16 + 480) = 0u;
        *(_OWORD *)(v16 + 432) = 0u;
        *(_OWORD *)(v16 + 448) = 0u;
        *(_OWORD *)(v16 + 400) = 0u;
        *(_OWORD *)(v16 + 416) = 0u;
        *(_OWORD *)(v16 + 368) = 0u;
        *(_OWORD *)(v16 + 384) = 0u;
        *(_OWORD *)(v16 + 336) = 0u;
        *(_OWORD *)(v16 + 352) = 0u;
        *(_OWORD *)(v16 + 304) = 0u;
        *(_OWORD *)(v16 + 320) = 0u;
        *(_OWORD *)(v16 + 272) = 0u;
        *(_OWORD *)(v16 + 288) = 0u;
        *(_OWORD *)(v16 + 240) = 0u;
        *(_OWORD *)(v16 + 256) = 0u;
        *(_OWORD *)(v16 + 208) = 0u;
        *(_OWORD *)(v16 + 224) = 0u;
        *(_OWORD *)(v16 + 176) = 0u;
        *(_OWORD *)(v16 + 192) = 0u;
        *(_OWORD *)(v16 + 144) = 0u;
        *(_OWORD *)(v16 + 160) = 0u;
        *(_OWORD *)(v16 + 112) = 0u;
        *(_OWORD *)(v16 + 128) = 0u;
        *(_OWORD *)(v16 + 80) = 0u;
        *(_OWORD *)(v16 + 96) = 0u;
        *(_OWORD *)(v16 + 48) = 0u;
        *(_OWORD *)(v16 + 64) = 0u;
        *(_OWORD *)(v16 + 16) = 0u;
        *(_OWORD *)(v16 + 32) = 0u;
        *(_OWORD *)v16 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v16, v17);
      }
    }
    a2 = v18;
    v6 = *((_QWORD *)v2 + 382);
  }
  v7 = *(_QWORD *)(v6 + 8);
  if (v7)
    v8 = *(_QWORD *)(v7 + 8);
  else
    v8 = 0;
  WebCore::VisibleSelection::toNormalizedRange(a2, v19);
  v5 = (*(uint64_t (**)(uint64_t, WebCore::Node **))(*(_QWORD *)v8 + 16))(v8, v19);
  if (v21)
  {
    v10 = v20;
    v20 = 0;
    if (v10)
    {
      if (*((_DWORD *)v10 + 6) == 2)
      {
        if ((*((_WORD *)v10 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v10, v9);
      }
      else
      {
        *((_DWORD *)v10 + 6) -= 2;
      }
    }
    v11 = v19[0];
    v19[0] = 0;
    if (v11)
    {
      if (*((_DWORD *)v11 + 6) == 2)
      {
        if ((*((_WORD *)v11 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v11, v9);
      }
      else
      {
        *((_DWORD *)v11 + 6) -= 2;
      }
    }
  }
  return v5;
}

void WebCore::FrameSelection::selectionBounds(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  WebCore::VisibleSelection *v7;
  WebCore::Node *v8;
  WebCore::Node *v9;
  void *v10;
  WebCore::Node *v11;
  WebCore::Node *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  WTF *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  int v23;
  int v24;
  int v25;
  WTF *v26;
  int v27;
  uint64_t v28;
  WebCore::Node *v29[2];
  WebCore::Node *v30[2];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  WTF *v35;
  int v36;
  unsigned int v37;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      *(_DWORD *)(v3 + 24) += 2;
      if (*(_QWORD *)(v3 + 1944))
      {
        if (!*(_BYTE *)(v3 + 3405))
        {
          WebCore::Document::updateStyleIfNeeded((WebCore::Document *)v3);
          if ((*(_WORD *)(a1 + 256) & 0x20) != 0)
            WebCore::FrameSelection::updateAppearance((WebCore::FrameSelection *)a1);
        }
      }
      if (*(_DWORD *)(v3 + 24) == 2)
      {
        if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v3);
      }
      else
      {
        *(_DWORD *)(v3 + 24) -= 2;
      }
      v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 1944);
      if (v6)
      {
        ++*(_DWORD *)(v6 + 16);
        v7 = (WebCore::VisibleSelection *)(a1 + 56);
        WebCore::VisibleSelection::range(v7, (uint64_t)v29);
        if (!(_BYTE)v31)
        {
LABEL_48:
          v27 = *(_DWORD *)(v6 + 16);
          if (!v27)
          {
            __break(0xC471u);
            JUMPOUT(0x195AE4904);
          }
          *(_DWORD *)(v6 + 16) = v27 - 1;
          return;
        }
        v8 = v30[0];
        v30[0] = 0;
        if (v8)
        {
          if (*((_DWORD *)v8 + 6) == 2)
          {
            if ((*((_WORD *)v8 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v8);
          }
          else
          {
            *((_DWORD *)v8 + 6) -= 2;
          }
        }
        v9 = v29[0];
        v29[0] = 0;
        if (v9)
        {
          if (*((_DWORD *)v9 + 6) == 2)
          {
            if ((*((_WORD *)v9 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v9);
          }
          else
          {
            *((_DWORD *)v9 + 6) -= 2;
          }
        }
        WebCore::VisibleSelection::range(v7, (uint64_t)v29);
        if (!(_BYTE)v31)
        {
          v28 = std::__throw_bad_optional_access[abi:sn180100]();
          WebCore::FrameSelection::getClippedVisibleTextRectangles(v28);
          return;
        }
        WebCore::RenderObject::collectSelectionGeometries(v29, (uint64_t)&v35);
        if ((_BYTE)v31)
        {
          v11 = v30[0];
          v30[0] = 0;
          if (v11)
          {
            if (*((_DWORD *)v11 + 6) == 2)
            {
              if ((*((_WORD *)v11 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v11);
            }
            else
            {
              *((_DWORD *)v11 + 6) -= 2;
            }
          }
          v12 = v29[0];
          v29[0] = 0;
          if (v12)
          {
            if (*((_DWORD *)v12 + 6) == 2)
            {
              if ((*((_WORD *)v12 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v12);
            }
            else
            {
              *((_DWORD *)v12 + 6) -= 2;
            }
          }
        }
        if (v37)
        {
          LODWORD(v13) = 0;
          v14 = 0;
          v15 = 0;
          v16 = v35;
          v17 = 84 * v37;
          do
          {
            v18 = *((_OWORD *)v16 + 1);
            *(_OWORD *)v29 = *(_OWORD *)v16;
            *(_OWORD *)v30 = v18;
            v19 = *((_OWORD *)v16 + 2);
            v20 = *((_OWORD *)v16 + 3);
            v21 = *((_OWORD *)v16 + 4);
            v34 = *((_DWORD *)v16 + 20);
            v32 = v20;
            v33 = v21;
            v31 = v19;
            v22 = WebCore::SelectionGeometry::rect((WebCore::SelectionGeometry *)v29);
            if ((int)v10 >= 1 && SHIDWORD(v10) >= 1)
            {
              if ((int)v14 < 1 || SHIDWORD(v14) < 1)
              {
                v13 = HIDWORD(v22);
                v14 = (unint64_t)v10;
                v15 = v22;
              }
              else
              {
                v23 = v15 + v14;
                if ((int)v22 < v15)
                  v15 = v22;
                v24 = v13 + HIDWORD(v14);
                if (SHIDWORD(v22) < (int)v13)
                  LODWORD(v13) = HIDWORD(v22);
                if (v23 <= (int)v22 + (int)v10)
                  v23 = v22 + (_DWORD)v10;
                v25 = HIDWORD(v22) + HIDWORD(v10);
                if (v24 > HIDWORD(v22) + HIDWORD(v10))
                  v25 = v24;
                v14 = (v23 - v15) | ((unint64_t)(v25 - v13) << 32);
              }
            }
            v16 = (WTF *)((char *)v16 + 84);
            v17 -= 84;
          }
          while (v17);
          if ((a2 & 1) == 0)
            goto LABEL_44;
        }
        else if ((a2 & 1) == 0)
        {
LABEL_44:
          v26 = v35;
          if (v35)
          {
            v35 = 0;
            v36 = 0;
            WTF::fastFree(v26, v10);
          }
          goto LABEL_48;
        }
        (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(v6 + 248) + 64) + 832))(*(_QWORD *)(v6 + 248) + 64, 0, 1);
        goto LABEL_44;
      }
    }
  }
}

WebCore::Node *WebCore::FrameSelection::getClippedVisibleTextRectangles(WebCore::Node *result, uint64_t a2, int a3)
{
  WebCore::Node *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::Node *v10;
  uint64_t v11;
  char v12;
  void *v13;
  float *v14;
  float *v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  WebCore::Node *v25;
  WTF *v26[2];
  WTF *v27;
  int v28;
  unsigned int v29;
  WebCore::Node *v30[2];
  WebCore::Node *v31;
  char v32;

  if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)result + 4) + 8) + 1944))
  {
    v5 = result;
    result = (WebCore::Node *)WebCore::VisibleSelection::toNormalizedRange((WebCore::Node *)((char *)result + 56), v30);
    if (v32)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 4) + 8) + 528);
      if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
        v8 = *(_QWORD *)(v7 + 288);
      else
        v8 = 0;
      result = (WebCore::Node *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v8 + 64) + 832))(v8 + 64, 0, 1);
      if (v32)
      {
        v10 = result;
        v11 = v9;
        if (a3)
          v12 = 16;
        else
          v12 = 0;
        WebCore::RenderObject::absoluteTextQuads((uint64_t *)v30, v12, (uint64_t)v26);
        WebCore::boundingBoxes((uint64_t)v26, (uint64_t)&v27);
        result = v26[0];
        if (v26[0])
        {
          v26[0] = 0;
          LODWORD(v26[1]) = 0;
          result = (WebCore::Node *)WTF::fastFree(result, v13);
        }
        v14 = (float *)v27;
        if (v29)
        {
          v15 = (float *)((char *)v27 + 16 * v29);
          do
          {
            v16 = v14[1];
            if (*v14 >= (float)(int)v10)
              v17 = *v14;
            else
              v17 = (float)(int)v10;
            if (v16 >= (float)SHIDWORD(v10))
              v18 = v14[1];
            else
              v18 = (float)SHIDWORD(v10);
            v19 = *v14 + v14[2];
            if ((float)((float)(int)v10 + (float)(int)v11) < v19)
              v19 = (float)(int)v10 + (float)(int)v11;
            v20 = v16 + v14[3];
            if ((float)((float)SHIDWORD(v10) + (float)SHIDWORD(v11)) < v20)
              v20 = (float)SHIDWORD(v10) + (float)SHIDWORD(v11);
            if (v17 >= v19 || v18 >= v20)
            {
              v17 = 0.0;
              v18 = 0.0;
              v19 = 0.0;
              v20 = 0.0;
            }
            v26[0] = (WTF *)__PAIR64__(LODWORD(v18), LODWORD(v17));
            *(float *)&v26[1] = v19 - v17;
            *((float *)&v26[1] + 1) = v20 - v18;
            if ((float)(v19 - v17) > 0.0 && (float)(v20 - v18) > 0.0)
            {
              v22 = *(unsigned int *)(a2 + 12);
              if ((_DWORD)v22 == *(_DWORD *)(a2 + 8))
              {
                result = (WebCore::Node *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v22 + 1, (unint64_t)v26);
                v22 = *(unsigned int *)(a2 + 12);
                v23 = *(_QWORD *)a2;
                v24 = *(_OWORD *)result;
              }
              else
              {
                v23 = *(_QWORD *)a2;
                v24 = *(_OWORD *)v26;
              }
              *(_OWORD *)(v23 + 16 * v22) = v24;
              ++*(_DWORD *)(a2 + 12);
            }
            v14 += 4;
          }
          while (v14 != v15);
          v14 = (float *)v27;
        }
        if (v14)
        {
          v27 = 0;
          v28 = 0;
          result = (WebCore::Node *)WTF::fastFree((WTF *)v14, v13);
        }
        if (v32)
        {
          v25 = v31;
          v31 = 0;
          if (v25)
          {
            if (*((_DWORD *)v25 + 6) == 2)
            {
              if ((*((_WORD *)v25 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v25, v13);
            }
            else
            {
              *((_DWORD *)v25 + 6) -= 2;
            }
          }
          result = v30[0];
          v30[0] = 0;
          if (result)
          {
            if (*((_DWORD *)result + 6) == 2)
            {
              if ((*((_WORD *)result + 15) & 0x400) == 0)
                return (WebCore::Node *)WebCore::Node::removedLastRef(result, v13);
            }
            else
            {
              *((_DWORD *)result + 6) -= 2;
            }
          }
        }
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

unsigned int *WebCore::FrameSelection::currentForm@<X0>(unsigned int *this@<X0>, void *a2@<X1>, unsigned int *a3@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 1248);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 24) + 2;
LABEL_3:
    *(_DWORD *)(v4 + 24) = v5;
    goto LABEL_4;
  }
  v12 = *((_QWORD *)this + 15);
  if (!v12)
  {
LABEL_40:
    *(_QWORD *)a3 = 0;
    return this;
  }
  *(_DWORD *)(v12 + 24) += 2;
  while (1)
  {
    v4 = v12;
    if ((*(_WORD *)(v12 + 28) & 8) != 0)
      break;
    v12 = *(_QWORD *)(v12 + 32);
    if (v12)
      *(_DWORD *)(v12 + 24) += 2;
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
    if (!v12)
      goto LABEL_40;
  }
  v5 = *(_DWORD *)(v12 + 24);
  *(_DWORD *)(v12 + 24) = v5 + 2;
  if (v5)
    goto LABEL_3;
  if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
    this = WebCore::Node::removedLastRef((WebCore::Node *)v12, a2);
LABEL_4:
  if ((*(_WORD *)(v4 + 28) & 0x10) == 0
    || (v6 = v4, *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::formTag + 24)))
  {
    v6 = *(_QWORD *)(v4 + 32);
    if (!v6 || (v7 = *(_WORD *)(v6 + 28), (v7 & 8) == 0))
    {
LABEL_12:
      *(_QWORD *)a3 = 0;
      v8 = v4;
      while (1)
      {
        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 464))(v8);
        if (v9)
          break;
        v8 = *(_QWORD *)(v8 + 32);
        if (!v8 || (*(_WORD *)(v8 + 28) & 8) == 0)
        {
          this = WebCore::scanForForm(a3, (WebCore::Element *)v4);
          goto LABEL_19;
        }
      }
      v10 = (_QWORD *)v9;
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 88))(v9);
      v11 = v10[1];
      if (v11)
      {
        v11 = *(_QWORD *)(v11 + 8);
        if (v11)
          *(_DWORD *)(v11 + 24) += 2;
      }
      *(_QWORD *)a3 = v11;
      this = (unsigned int *)(*(uint64_t (**)(_QWORD *))(*v10 + 96))(v10);
      goto LABEL_19;
    }
    while ((v7 & 0x10) == 0
         || *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::formTag + 24))
    {
      v6 = *(_QWORD *)(v6 + 32);
      if (v6)
      {
        v7 = *(_WORD *)(v6 + 28);
        if ((v7 & 8) != 0)
          continue;
      }
      goto LABEL_12;
    }
  }
  *(_DWORD *)(v6 + 24) += 2;
  *(_QWORD *)a3 = v6;
LABEL_19:
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return this;
}

unsigned int *WebCore::scanForForm(unsigned int *this, WebCore::Element *a2)
{
  WebCore *v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  uint64_t i;
  BOOL v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  BOOL v18;
  BOOL v19;
  uint64_t v20;

  v2 = (WebCore *)this;
  if (a2)
  {
    v3 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
    v4 = *(_QWORD *)(v3 + 80);
    if (v4)
    {
      v5 = *(_WORD *)(v4 + 28);
      if ((v5 & 0x10) != 0)
      {
        i = *(_QWORD *)(v3 + 80);
        goto LABEL_18;
      }
      do
      {
        if ((v5 & 4) == 0 || (i = *(_QWORD *)(v4 + 80)) == 0)
        {
          if (v4 == v3)
            goto LABEL_3;
          while (1)
          {
            i = *(_QWORD *)(v4 + 56);
            if (i)
              break;
            v4 = *(_QWORD *)(v4 + 32);
            if (v4)
              v7 = v4 == v3;
            else
              v7 = 1;
            if (v7)
              goto LABEL_3;
          }
        }
        v5 = *(_WORD *)(i + 28);
        v4 = i;
      }
      while ((v5 & 0x10) == 0);
      while (1)
      {
LABEL_18:
        v8 = *(_DWORD *)(i + 24);
        *(_DWORD *)(i + 24) = v8 + 4;
        if (*(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::formTag + 24))
        {
          *(_QWORD *)v2 = i;
LABEL_25:
          v11 = 1;
          goto LABEL_36;
        }
        *(_QWORD *)v2 = 0;
        v9 = v8 + 2;
        if (v9)
        {
          *(_DWORD *)(i + 24) = v9;
        }
        else if ((*(_WORD *)(i + 30) & 0x400) == 0)
        {
          this = WebCore::Node::removedLastRef((WebCore::Node *)i, a2);
          if (*(_QWORD *)v2)
            goto LABEL_25;
        }
        *(_QWORD *)v2 = 0;
        this = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)i + 832))(i);
        if ((_DWORD)this)
        {
          this = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)i + 456))(i);
          v10 = *((_QWORD *)this + 1);
          if (v10)
          {
            v10 = *(_QWORD *)(v10 + 8);
            if (v10)
              *(_DWORD *)(v10 + 24) += 2;
          }
          *(_QWORD *)v2 = v10;
          goto LABEL_25;
        }
        v12 = *(_DWORD *)(i + 24);
        *(_DWORD *)(i + 24) = v12 + 2;
        v13 = *(_QWORD *)(*(_QWORD *)(i + 96) + 24);
        if (v13 == *(_QWORD *)(WebCore::HTMLNames::frameTag + 24)
          || v13 == *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24))
        {
          break;
        }
        if (v12)
        {
          v11 = 0;
LABEL_35:
          *(_DWORD *)(i + 24) = v12;
          goto LABEL_36;
        }
        if ((*(_WORD *)(i + 30) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)i, a2);
        v11 = 0;
LABEL_36:
        if (*(_DWORD *)(i + 24) == 2)
        {
          if ((*(_WORD *)(i + 30) & 0x400) == 0)
            this = WebCore::Node::removedLastRef((WebCore::Node *)i, a2);
        }
        else
        {
          *(_DWORD *)(i + 24) -= 2;
        }
        if (v11)
          return this;
        v16 = *(_QWORD *)(i + 80);
        if (!v16)
        {
          if (i == v3)
            goto LABEL_3;
          while (1)
          {
            v16 = *(_QWORD *)(i + 56);
            if (v16)
              break;
            i = *(_QWORD *)(i + 32);
            if (i)
              v19 = i == v3;
            else
              v19 = 1;
            if (v19)
              goto LABEL_3;
          }
        }
        v17 = *(_WORD *)(v16 + 28);
        for (i = v16; (v17 & 0x10) == 0; v16 = i)
        {
          if ((v17 & 4) == 0 || (i = *(_QWORD *)(v16 + 80)) == 0)
          {
            if (v16 == v3)
              goto LABEL_3;
            while (1)
            {
              i = *(_QWORD *)(v16 + 56);
              if (i)
                break;
              v16 = *(_QWORD *)(v16 + 32);
              if (v16)
                v18 = v16 == v3;
              else
                v18 = 1;
              if (v18)
                goto LABEL_3;
            }
          }
          v17 = *(_WORD *)(i + 28);
        }
      }
      v14 = *(_QWORD *)(i + 112);
      if (v14)
      {
        v15 = *(_QWORD *)(v14 + 8);
        if (v15)
        {
          if (!*(_BYTE *)(v15 + 144))
          {
            v20 = *(_QWORD *)(v15 + 296);
            if (v20)
            {
              *(_DWORD *)(v20 + 24) += 2;
              this = (unsigned int *)WebCore::scanForForm(v2, *(WebCore::Element **)(v20 + 1272));
              if (*(_QWORD *)v2)
              {
                if (*(_DWORD *)(v20 + 24) == 2)
                {
                  if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
                    this = WebCore::Node::removedLastRef((WebCore::Node *)v20, a2);
                }
                else
                {
                  *(_DWORD *)(v20 + 24) -= 2;
                }
                v11 = 1;
                goto LABEL_34;
              }
              *(_QWORD *)v2 = 0;
              if (*(_DWORD *)(v20 + 24) != 2)
              {
                v11 = 0;
                *(_DWORD *)(v20 + 24) -= 2;
                goto LABEL_34;
              }
              if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
                this = WebCore::Node::removedLastRef((WebCore::Node *)v20, a2);
            }
          }
        }
      }
      v11 = 0;
LABEL_34:
      v12 = *(_DWORD *)(i + 24) - 2;
      if (*(_DWORD *)(i + 24) != 2)
        goto LABEL_35;
      if ((*(_WORD *)(i + 30) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)i, a2);
      goto LABEL_36;
    }
  }
LABEL_3:
  *(_QWORD *)v2 = 0;
  return this;
}

void WebCore::FrameSelection::rangeByExtendingCurrentSelection(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v5;
  void *v6;
  _BYTE v7[56];
  uint64_t v8;

  if (*(_BYTE *)(a1 + 153))
  {
    v5 = a1 + 56;
    WebCore::FrameSelection::FrameSelection((WebCore::FrameSelection *)v7, 0);
    WebCore::FrameSelection::setSelection((uint64_t)v7, v5, 6u, 0, 0, 0, 0);
    WebCore::FrameSelection::modify((uint64_t)v7, 0, 1, a2, 0);
    WebCore::FrameSelection::modify((uint64_t)v7, 1, 0, a2, 0);
    WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)&v8, a3);
    WebCore::FrameSelection::~FrameSelection((WebCore::FrameSelection *)v7, v6);
  }
  else
  {
    *a3 = 0;
    a3[32] = 0;
  }
}

void WebCore::FrameSelection::expandSelectionToElementContainingCaretSelection(WebCore::FrameSelection *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v5[104];
  _QWORD v6[2];
  uint64_t v7;
  char v8;

  WebCore::FrameSelection::elementRangeContainingCaretSelection(this, v6);
  if (v8)
  {
    WebCore::VisibleSelection::VisibleSelection((uint64_t)v5, (uint64_t)v6, 1, 0);
    WebCore::FrameSelection::setSelection((uint64_t)this, (uint64_t)v5, 6u, 0, 0, 0, 0);
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v5);
    if (v8)
    {
      v3 = v7;
      v7 = 0;
      if (v3)
      {
        if (*(_DWORD *)(v3 + 24) == 2)
        {
          if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v3, v2);
        }
        else
        {
          *(_DWORD *)(v3 + 24) -= 2;
        }
      }
      v4 = v6[0];
      v6[0] = 0;
      if (v4)
      {
        if (*(_DWORD *)(v4 + 24) == 2)
        {
          if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v4, v2);
        }
        else
        {
          *(_DWORD *)(v4 + 24) -= 2;
        }
      }
    }
  }
}

void WebCore::FrameSelection::elementRangeContainingCaretSelection(WebCore::FrameSelection *this@<X0>, _BYTE *a2@<X8>)
{
  int v4;
  void *v5;
  const WebCore::VisiblePosition *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  WebCore::Node *v10;
  void *v11;
  int v12;
  uint64_t v13;
  int v14;
  void *v15;
  WebCore::Node *v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::Node *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  WebCore::Node *v25;
  void *v26;
  WebCore::Node *v27;
  WebCore::Node *v28;
  WebCore::Node *v29;
  int v30;
  char v31;
  WebCore::Node *v32;
  int v33;
  char v34;
  uint64_t v35;
  int v36;
  char v37;
  uint64_t v38;
  int v39;
  char v40;
  uint64_t v41;
  int v42;
  char v43;
  uint64_t v44;
  int v45;
  char v46;
  __int16 v47;
  char v48;
  uint64_t v49;
  int v50;
  char v51;
  WebCore::Node *v52;
  int v53;
  char v54;
  char v55;

  if (*((_BYTE *)this + 153) == 2)
  {
    WebCore::VisiblePosition::canonicalPosition((WebCore::FrameSelection *)((char *)this + 120), (uint64_t)&v52);
    v55 = 1;
  }
  else
  {
    v4 = *((unsigned __int8 *)this + 152);
    WebCore::VisiblePosition::canonicalPosition((WebCore::FrameSelection *)((char *)this + 120), (uint64_t)&v52);
    v55 = 1;
    if (!v4)
    {
      v27 = v52;
      if (!v52)
      {
LABEL_75:
        *a2 = 0;
        a2[32] = 0;
        return;
      }
      *((_DWORD *)v52 + 6) += 2;
      v29 = v27;
      v30 = v53;
      v31 = v54;
      LOBYTE(v32) = 0;
      if (!WebCore::inSameLine((WebCore *)&v52, (const WebCore::VisiblePosition *)&v29, v6))
        v55 = 0;
      v28 = v29;
      v29 = 0;
      if (v28)
      {
        if (*((_DWORD *)v28 + 6) == 2)
        {
          if ((*((_WORD *)v28 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v28, v5);
        }
        else
        {
          *((_DWORD *)v28 + 6) -= 2;
        }
      }
    }
  }
  v7 = (uint64_t)v52;
  if (!v52)
    goto LABEL_75;
  *((_DWORD *)v52 + 6) += 2;
  v9 = WebCore::deprecatedEnclosingBlockFlowElement(v7, (WebCore::Node *)v5);
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7, v8);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  v10 = v52;
  v52 = 0;
  if (v10)
  {
    if (*((_DWORD *)v10 + 6) == 2)
    {
      if ((*((_WORD *)v10 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v10, v8);
    }
    else
    {
      *((_DWORD *)v10 + 6) -= 2;
    }
  }
  if (!v9)
    goto LABEL_75;
  *(_DWORD *)(v9 + 24) += 2;
  v29 = (WebCore::Node *)v9;
  v30 = 0;
  v31 = 0;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v29, (uint64_t)&v52);
  v12 = *(_DWORD *)(v9 + 24) - 2;
  if (*(_DWORD *)(v9 + 24) == 2)
  {
    if ((*(_WORD *)(v9 + 30) & 0x400) != 0)
    {
      v12 = 2;
    }
    else
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v9, v11);
      v12 = *(_DWORD *)(v9 + 24);
    }
  }
  *(_DWORD *)(v9 + 24) = v12 + 2;
  v13 = *(_QWORD *)(v9 + 80);
  if (v13)
  {
    v14 = 0;
    do
    {
      ++v14;
      v13 = *(_QWORD *)(v13 + 56);
    }
    while (v13);
  }
  else
  {
    v14 = 0;
  }
  v29 = (WebCore::Node *)v9;
  v30 = v14;
  v31 = 0;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v29, (uint64_t)&v49);
  if (*(_DWORD *)(v9 + 24) == 2)
  {
    if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v9, v15);
  }
  else
  {
    *(_DWORD *)(v9 + 24) -= 2;
  }
  v16 = v52;
  v17 = v49;
  if (v52 && v49)
  {
    v18 = *((_QWORD *)this + 7);
    if (v18)
      *(_DWORD *)(v18 + 24) += 2;
    v29 = (WebCore::Node *)v18;
    v30 = *((_DWORD *)this + 16);
    v31 = *((_BYTE *)this + 68);
    v19 = (WebCore::Node *)*((_QWORD *)this + 9);
    if (v19)
      *((_DWORD *)v19 + 6) += 2;
    v32 = v19;
    v33 = *((_DWORD *)this + 20);
    v34 = *((_BYTE *)this + 84);
    v20 = *((_QWORD *)this + 11);
    if (v20)
      *(_DWORD *)(v20 + 24) += 2;
    v35 = v20;
    v36 = *((_DWORD *)this + 24);
    v37 = *((_BYTE *)this + 100);
    v21 = *((_QWORD *)this + 13);
    if (v21)
      *(_DWORD *)(v21 + 24) += 2;
    v38 = v21;
    v39 = *((_DWORD *)this + 28);
    v40 = *((_BYTE *)this + 116);
    v22 = *((_QWORD *)this + 15);
    if (v22)
      *(_DWORD *)(v22 + 24) += 2;
    v41 = v22;
    v42 = *((_DWORD *)this + 32);
    v43 = *((_BYTE *)this + 132);
    v23 = *((_QWORD *)this + 17);
    if (v23)
      *(_DWORD *)(v23 + 24) += 2;
    v45 = *((_DWORD *)this + 36);
    v46 = *((_BYTE *)this + 148);
    v47 = *((_WORD *)this + 76);
    v48 = *((_BYTE *)this + 154);
    v44 = v23;
    *((_DWORD *)v16 + 6) += 4;
    v29 = v16;
    if (v18)
    {
      if (*(_DWORD *)(v18 + 24) == 2)
      {
        if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v18, v15);
      }
      else
      {
        *(_DWORD *)(v18 + 24) -= 2;
      }
    }
    v30 = v53;
    v31 = v54;
    WebCore::VisibleSelection::validate((uint64_t)&v29, 0);
    if (*((_DWORD *)v16 + 6) == 2)
    {
      if ((*((_WORD *)v16 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v16, v24);
    }
    else
    {
      *((_DWORD *)v16 + 6) -= 2;
    }
    *(_DWORD *)(v17 + 24) += 4;
    v25 = v32;
    v32 = (WebCore::Node *)v17;
    if (v25)
    {
      if (*((_DWORD *)v25 + 6) == 2)
      {
        if ((*((_WORD *)v25 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v25, v24);
      }
      else
      {
        *((_DWORD *)v25 + 6) -= 2;
      }
    }
    v33 = v50;
    v34 = v51;
    WebCore::VisibleSelection::validate((uint64_t)&v29, 0);
    if (*(_DWORD *)(v17 + 24) == 2)
    {
      if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v17, v26);
    }
    else
    {
      *(_DWORD *)(v17 + 24) -= 2;
    }
    WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)&v29, a2);
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v29);
    goto LABEL_43;
  }
  *a2 = 0;
  a2[32] = 0;
  if (v17)
  {
LABEL_43:
    if (*(_DWORD *)(v17 + 24) == 2)
    {
      if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v17, v15);
    }
    else
    {
      *(_DWORD *)(v17 + 24) -= 2;
    }
  }
  if (v16)
  {
    if (*((_DWORD *)v16 + 6) == 2)
    {
      if ((*((_WORD *)v16 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v16, v15);
    }
    else
    {
      *((_DWORD *)v16 + 6) -= 2;
    }
  }
}

void WebCore::FrameSelection::expandSelectionToWordContainingCaretSelection(WebCore::FrameSelection *this)
{
  _BYTE v2[104];

  WebCore::FrameSelection::wordSelectionContainingCaretSelection((WebCore::FrameSelection *)((char *)this + 56), (uint64_t)v2);
  if (v2[97])
    WebCore::FrameSelection::setSelection((uint64_t)this, (uint64_t)v2, 6u, 0, 0, 0, 0);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v2);
}

void WebCore::FrameSelection::wordSelectionContainingCaretSelection(WebCore::FrameSelection *this@<X0>, uint64_t a2@<X8>)
{
  WebCore::Node *v5;
  WebCore::Node *v6;
  void *v7;
  void *v8;
  _BOOL4 v9;
  WebCore::Node *v10;
  void *v11;
  WebCore::Node *v12;
  unsigned __int16 v13;
  WebCore::Node *v14;
  int v15;
  unsigned int v16;
  uint64_t (*v17)();
  void *v18;
  _BOOL4 v19;
  WebCore::Node *v20;
  void *v22;
  BOOL v23;
  WebCore::Node *v24;
  WebCore::Node *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::Node *v29;
  WebCore::Node *v30;
  WebCore::Node *v31;
  WebCore::Node *v32;
  void *v33;
  WebCore::Node *v34;
  WebCore::Node *v35;
  unsigned __int8 v36;
  void *v37;
  WebCore::Node *v38;
  WebCore::Node *v39;
  void *v40;
  uint64_t (*v41)();
  void *v42;
  _BOOL4 v43;
  WebCore::Node *v44;
  void *v45;
  uint64_t v46;
  unsigned __int16 v47;
  int v48;
  unsigned int v49;
  int v50;
  WebCore::Node *v51;
  uint64_t (*v52)();
  void *v53;
  _BOOL4 v54;
  WebCore::Node *v55;
  void *v57;
  _BOOL4 v58;
  WebCore::Node *v59;
  void *v60;
  WebCore::Node *v61;
  uint64_t v62;
  uint64_t (*v63)();
  BOOL v64;
  WebCore::Node *v65;
  unsigned __int16 v66;
  int v67;
  char v68;
  void *v69;
  WebCore::Node *v70;
  WebCore::Node *v71;
  WebCore::Node *v72;
  WebCore::Node *v73;
  void *v74;
  WebCore::Node *v75;
  int v76;
  WebCore::Node *v77;
  WebCore::Node *v78;
  WebCore::Node *v79;
  const WebCore::VisiblePosition *v80;
  void *v81;
  uint64_t v82;
  unsigned __int16 v83;
  void *v84;
  int v85;
  unsigned int v86;
  int v87;
  WebCore::Node *v88;
  WebCore::Node *v89;
  void *v90;
  const WebCore::VisiblePosition *v91;
  WebCore::Node *v92;
  WebCore::Node *v93;
  unsigned __int8 v94;
  void *v95;
  WebCore::Node *v96;
  WebCore::Node *v97;
  WebCore::Node *v98;
  WebCore::Node *v99;
  WebCore::Node *v100;
  WebCore::Node *v101;
  WebCore::Node *v102;
  WebCore::Node *v103;
  WebCore::Node *v104;
  int v105;
  WebCore::Node *v106;
  uint64_t v107;
  uint64_t v108;
  WebCore::Node *v109;
  int v110;
  char v111;
  char v112;
  WebCore::Node *v113;
  int v114;
  char v115;
  char v116;
  WebCore::Node *v117;
  int v118;
  char v119;
  WebCore::Node *v120;
  int v121;
  char v122;
  WebCore::Node *v123;
  int v124;
  char v125;
  uint64_t v126;
  int v127;
  char v128;
  uint64_t v129;
  int v130;
  char v131;
  uint64_t v132;
  int v133;
  char v134;
  WebCore::Node *v135;
  int v136;
  char v137;
  WebCore::Node *v138;
  int v139;
  char v140;
  __int16 v141;
  char v142;
  WebCore::Node *v143;
  int v144;
  char v145;
  char v146;
  WebCore::Node *v147;
  int v148;
  char v149;
  char v150;
  WebCore::Node *v151;
  int v152;
  char v153;
  WebCore::Node *v154;
  int v155;
  char v156;
  _BYTE v157[56];
  WebCore::Node *v158;
  int v159;
  char v160;
  uint64_t v161;
  int v162;
  char v163;
  uint64_t v164;
  int v165;
  char v166;
  uint64_t v167;
  int v168;
  char v169;
  WebCore::Node *v170;
  int v171;
  char v172;
  WebCore::Node *v173;
  int v174;
  char v175;
  __int16 v176;
  char v177;
  unsigned __int8 v178;
  WebCore::Node *v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD v182[2];

  if (!*((_BYTE *)this + 97))
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 12) &= 0xF0u;
    *(_QWORD *)(a2 + 16) = 0;
    *(_DWORD *)(a2 + 24) = 0;
    *(_BYTE *)(a2 + 28) &= 0xF0u;
    *(_QWORD *)(a2 + 32) = 0;
    *(_DWORD *)(a2 + 40) = 0;
    *(_BYTE *)(a2 + 44) &= 0xF0u;
    *(_QWORD *)(a2 + 48) = 0;
    *(_DWORD *)(a2 + 56) = 0;
    *(_BYTE *)(a2 + 60) &= 0xF0u;
    *(_QWORD *)(a2 + 64) = 0;
    *(_DWORD *)(a2 + 72) = 0;
    *(_BYTE *)(a2 + 76) &= 0xF0u;
    *(_QWORD *)(a2 + 80) = 0;
    *(_DWORD *)(a2 + 88) = 0;
    *(_BYTE *)(a2 + 92) &= 0xF0u;
    *(_WORD *)(a2 + 96) = 1;
    *(_BYTE *)(a2 + 98) = *(_BYTE *)(a2 + 98) & 0xFC | 1;
    return;
  }
  WebCore::FrameSelection::FrameSelection((WebCore::FrameSelection *)v157, 0);
  WebCore::FrameSelection::setSelection((uint64_t)v157, (uint64_t)this, 6u, 0, 0, 0, 0);
  v5 = (WebCore::Node *)*((_QWORD *)this + 8);
  if (v5)
    *((_DWORD *)v5 + 6) += 2;
  v154 = v5;
  v155 = *((_DWORD *)this + 18);
  v156 = *((_BYTE *)this + 76);
  v6 = (WebCore::Node *)*((_QWORD *)this + 10);
  if (v6)
    *((_DWORD *)v6 + 6) += 2;
  v151 = v6;
  v152 = *((_DWORD *)this + 22);
  v153 = *((_BYTE *)this + 92);
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v154, (uint64_t)&v147);
  v150 = 1;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v151, (uint64_t)&v143);
  v146 = 1;
  if (v143)
  {
    WebCore::endOfParagraph((WebCore::Node *)&v143, 1, &v123);
    v9 = WebCore::operator==((uint64_t *)&v143, (uint64_t *)&v123);
    v10 = v123;
    v123 = 0;
    if (v10)
    {
      if (*((_DWORD *)v10 + 6) == 2)
      {
        if ((*((_WORD *)v10 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v10, v8);
      }
      else
      {
        *((_DWORD *)v10 + 6) -= 2;
      }
    }
    if (!v9)
      goto LABEL_27;
    WebCore::previousVisuallyDistinctCandidate(&v143, (uint64_t)&v113);
    if (WebCore::Position::atStartOfTree((WebCore::Position *)&v113))
    {
      v179 = 0;
      v180 = 0;
      v181 = 0;
    }
    else
    {
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v113, (uint64_t)&v123);
      v179 = v123;
      LODWORD(v180) = v124;
      BYTE4(v180) = v125;
    }
    LOBYTE(v181) = 1;
    v12 = v113;
    v113 = 0;
    if (v12)
    {
      if (*((_DWORD *)v12 + 6) == 2)
      {
        if ((*((_WORD *)v12 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v12, v11);
      }
      else
      {
        *((_DWORD *)v12 + 6) -= 2;
      }
    }
    v13 = WebCore::VisiblePosition::characterAfter((WebCore::VisiblePosition *)&v179);
    v14 = v179;
    v179 = 0;
    if (v14)
    {
      if (*((_DWORD *)v14 + 6) == 2)
      {
        if ((*((_WORD *)v14 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v14, v7);
      }
      else
      {
        *((_DWORD *)v14 + 6) -= 2;
      }
    }
    v15 = v13;
    if (v13 > 0xFFu)
    {
      v105 = MEMORY[0x19AEA858C](v13);
      v15 = v13;
      v16 = v105 == 9;
    }
    else
    {
      v16 = (v13 < 0x21u) & (0x100003600uLL >> v13);
      if (v13 == 11)
        v16 = 1;
    }
    if (v15 != 160 && !v16)
    {
LABEL_27:
      if (v143)
        v17 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
      else
        v17 = 0;
      if (v17)
      {
        WebCore::endOfParagraph((WebCore::Node *)&v143, 1, &v123);
        v19 = WebCore::operator==((uint64_t *)&v143, (uint64_t *)&v123);
        v20 = v123;
        v123 = 0;
        if (v20)
        {
          if (*((_DWORD *)v20 + 6) == 2)
          {
            if ((*((_WORD *)v20 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v20, v18);
          }
          else
          {
            *((_DWORD *)v20 + 6) -= 2;
          }
        }
        if (v19)
        {
          if (!(v143
               ? WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance
               : 0))
            goto LABEL_43;
          WebCore::startOfParagraph((uint64_t)&v143, 1, &v123);
          v23 = WebCore::operator==((uint64_t *)&v143, (uint64_t *)&v123);
          v24 = v123;
          v123 = 0;
          if (v24)
          {
            if (*((_DWORD *)v24 + 6) == 2)
            {
              if ((*((_WORD *)v24 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v24, v22);
            }
            else
            {
              *((_DWORD *)v24 + 6) -= 2;
            }
          }
          if (!v23)
LABEL_43:
            WebCore::FrameSelection::modify((uint64_t)v157, 0, 1, 0, 0);
        }
      }
      v25 = v158;
      if (v158)
        *((_DWORD *)v158 + 6) += 2;
      v123 = v25;
      v124 = v159;
      v125 = v160;
      v26 = v161;
      if (v161)
        *(_DWORD *)(v161 + 24) += 2;
      v126 = v26;
      v127 = v162;
      v128 = v163;
      v27 = v164;
      if (v164)
        *(_DWORD *)(v164 + 24) += 2;
      v129 = v27;
      v130 = v165;
      v131 = v166;
      v28 = v167;
      if (v167)
        *(_DWORD *)(v167 + 24) += 2;
      v132 = v28;
      v133 = v168;
      v134 = v169;
      v29 = v170;
      if (v170)
        *((_DWORD *)v170 + 6) += 2;
      v135 = v29;
      v136 = v171;
      v137 = v172;
      v30 = v173;
      if (v173)
        *((_DWORD *)v173 + 6) += 2;
      v138 = v30;
      v139 = v174;
      v140 = v175;
      v141 = v176;
      v142 = v177;
      if (HIBYTE(v176))
        WebCore::VisibleSelection::validate((uint64_t)&v123, 1);
      WebCore::FrameSelection::setSelection((uint64_t)v157, (uint64_t)&v123, 6u, 0, 0, 0, v178);
      v31 = v170;
      if (v170)
        *((_DWORD *)v170 + 6) += 2;
      v120 = v31;
      v121 = v171;
      v122 = v172;
      v32 = v173;
      if (v173)
        *((_DWORD *)v173 + 6) += 2;
      v117 = v32;
      v118 = v174;
      v119 = v175;
      if ((char)WebCore::treeOrder<(WebCore::TreeType)2>((WebCore *)&v120, (uint64_t)&v154) >= 1)
      {
        v34 = v154;
        if (v154)
          *((_DWORD *)v154 + 6) += 2;
        v35 = v120;
        v120 = v34;
        if (v35)
        {
          if (*((_DWORD *)v35 + 6) == 2)
          {
            if ((*((_WORD *)v35 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v35, v33);
          }
          else
          {
            *((_DWORD *)v35 + 6) -= 2;
          }
        }
        v121 = v155;
        v122 = v156;
      }
      v36 = WebCore::treeOrder<(WebCore::TreeType)2>((WebCore *)&v117, (uint64_t)&v151);
      if (v36 != 129 && (char)v36 < 0)
      {
        v38 = v151;
        if (v151)
          *((_DWORD *)v151 + 6) += 2;
        v39 = v117;
        v117 = v38;
        if (v39)
        {
          if (*((_DWORD *)v39 + 6) == 2)
          {
            if ((*((_WORD *)v39 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v39, v37);
          }
          else
          {
            *((_DWORD *)v39 + 6) -= 2;
          }
        }
        v118 = v152;
        v119 = v153;
      }
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v120, (uint64_t)&v113);
      v116 = 1;
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v117, (uint64_t)&v109);
      v112 = 1;
      if (!v113 || !v109)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
        *(_BYTE *)(a2 + 12) &= 0xF0u;
        *(_QWORD *)(a2 + 16) = 0;
        *(_DWORD *)(a2 + 24) = 0;
        *(_BYTE *)(a2 + 28) &= 0xF0u;
        *(_QWORD *)(a2 + 32) = 0;
        *(_DWORD *)(a2 + 40) = 0;
        *(_BYTE *)(a2 + 44) &= 0xF0u;
        *(_QWORD *)(a2 + 48) = 0;
        *(_DWORD *)(a2 + 56) = 0;
        *(_BYTE *)(a2 + 60) &= 0xF0u;
        *(_QWORD *)(a2 + 64) = 0;
        *(_DWORD *)(a2 + 72) = 0;
        *(_BYTE *)(a2 + 76) &= 0xF0u;
        *(_QWORD *)(a2 + 80) = 0;
        *(_DWORD *)(a2 + 88) = 0;
        *(_BYTE *)(a2 + 92) &= 0xF0u;
        *(_WORD *)(a2 + 96) = 1;
        *(_BYTE *)(a2 + 98) = *(_BYTE *)(a2 + 98) & 0xFC | 1;
LABEL_224:
        v98 = v109;
        v109 = 0;
        if (v98)
        {
          if (*((_DWORD *)v98 + 6) == 2)
          {
            if ((*((_WORD *)v98 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v98, v40);
          }
          else
          {
            *((_DWORD *)v98 + 6) -= 2;
          }
        }
        v99 = v113;
        v113 = 0;
        if (v99)
        {
          if (*((_DWORD *)v99 + 6) == 2)
          {
            if ((*((_WORD *)v99 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v99, v40);
          }
          else
          {
            *((_DWORD *)v99 + 6) -= 2;
          }
        }
        v100 = v117;
        v117 = 0;
        if (v100)
        {
          if (*((_DWORD *)v100 + 6) == 2)
          {
            if ((*((_WORD *)v100 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v100, v40);
          }
          else
          {
            *((_DWORD *)v100 + 6) -= 2;
          }
        }
        v101 = v120;
        v120 = 0;
        if (v101)
        {
          if (*((_DWORD *)v101 + 6) == 2)
          {
            if ((*((_WORD *)v101 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v101, v40);
          }
          else
          {
            *((_DWORD *)v101 + 6) -= 2;
          }
        }
        WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v123);
        goto LABEL_237;
      }
      if (v143)
        v41 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
      else
        v41 = 0;
      if (v41)
      {
        WebCore::endOfLine((uint64_t *)&v179, (uint64_t)&v143, 1, 0);
        v43 = WebCore::operator==((uint64_t *)&v143, (uint64_t *)&v179);
        v44 = v179;
        v179 = 0;
        if (v44)
        {
          if (*((_DWORD *)v44 + 6) == 2)
          {
            if ((*((_WORD *)v44 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v44, v42);
          }
          else
          {
            *((_DWORD *)v44 + 6) -= 2;
          }
        }
        if (v43)
        {
          WebCore::previousVisuallyDistinctCandidate(&v109, (uint64_t)v182);
          if (WebCore::Position::atStartOfTree((WebCore::Position *)v182))
          {
            v106 = 0;
            v107 = 0;
            v108 = 0;
          }
          else
          {
            WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v182, (uint64_t)&v179);
            v106 = v179;
            LODWORD(v107) = v180;
            BYTE4(v107) = BYTE4(v180);
          }
          LOBYTE(v108) = 1;
          v46 = v182[0];
          v182[0] = 0;
          if (v46)
          {
            if (*(_DWORD *)(v46 + 24) == 2)
            {
              if ((*(_WORD *)(v46 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v46, v45);
            }
            else
            {
              *(_DWORD *)(v46 + 24) -= 2;
            }
          }
          if (WebCore::operator==((uint64_t *)&v106, (uint64_t *)&v109))
            goto LABEL_102;
          v47 = WebCore::VisiblePosition::characterAfter((WebCore::VisiblePosition *)&v106);
          v48 = v47;
          if (v47 > 0xFFu)
          {
            v49 = MEMORY[0x19AEA858C](v47) == 9;
          }
          else
          {
            v49 = (v47 < 0x21u) & (0x100003600uLL >> v47);
            if (v47 == 11)
              v49 = 1;
          }
          if (v48 == 160 || v49)
          {
LABEL_102:
            v50 = 0;
            *(_BYTE *)(a2 + 12) &= 0xF0u;
            *(_BYTE *)(a2 + 28) &= 0xF0u;
            *(_BYTE *)(a2 + 44) &= 0xF0u;
            *(_BYTE *)(a2 + 60) &= 0xF0u;
            *(_BYTE *)(a2 + 76) &= 0xF0u;
            *(_BYTE *)(a2 + 92) &= 0xF0u;
            *(_WORD *)(a2 + 96) = 1;
            *(_BYTE *)(a2 + 98) = *(_BYTE *)(a2 + 98) & 0xFC | 1;
            *(_QWORD *)a2 = 0;
            *(_DWORD *)(a2 + 8) = 0;
            *(_QWORD *)(a2 + 16) = 0;
            *(_DWORD *)(a2 + 24) = 0;
            *(_QWORD *)(a2 + 32) = 0;
            *(_DWORD *)(a2 + 40) = 0;
            *(_QWORD *)(a2 + 48) = 0;
            *(_DWORD *)(a2 + 56) = 0;
            *(_QWORD *)(a2 + 64) = 0;
            *(_DWORD *)(a2 + 72) = 0;
            *(_QWORD *)(a2 + 80) = 0;
            *(_DWORD *)(a2 + 88) = 0;
          }
          else
          {
            v50 = 1;
          }
          v51 = v106;
          v106 = 0;
          if (v51)
          {
            if (*((_DWORD *)v51 + 6) == 2)
            {
              if ((*((_WORD *)v51 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v51, v40);
            }
            else
            {
              *((_DWORD *)v51 + 6) -= 2;
            }
          }
          if (!v50)
            goto LABEL_224;
        }
      }
      if (v113)
        v52 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
      else
        v52 = 0;
      if (!v52)
        goto LABEL_199;
      WebCore::endOfLine((uint64_t *)&v179, (uint64_t)&v113, 1, 0);
      v54 = WebCore::operator==((uint64_t *)&v113, (uint64_t *)&v179);
      v55 = v179;
      v179 = 0;
      if (v55)
      {
        if (*((_DWORD *)v55 + 6) == 2)
        {
          if ((*((_WORD *)v55 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v55, v53);
        }
        else
        {
          *((_DWORD *)v55 + 6) -= 2;
        }
      }
      if (!v54)
        goto LABEL_199;
      if (!(v109
           ? WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance
           : 0))
        goto LABEL_199;
      WebCore::startOfLine((uint64_t)&v179, (WebCore::VisiblePosition *)&v109, (WebCore::Node *)1, 0);
      v58 = WebCore::operator==((uint64_t *)&v109, (uint64_t *)&v179);
      v59 = v179;
      v179 = 0;
      if (v59)
      {
        if (*((_DWORD *)v59 + 6) == 2)
        {
          if ((*((_WORD *)v59 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v59, v57);
        }
        else
        {
          *((_DWORD *)v59 + 6) -= 2;
        }
      }
      if (!v58)
      {
LABEL_199:
        do
        {
LABEL_176:
          if (WebCore::operator==((uint64_t *)&v109, (uint64_t *)&v113))
            break;
          WebCore::previousVisuallyDistinctCandidate(&v109, (uint64_t)v182);
          if (WebCore::Position::atStartOfTree((WebCore::Position *)v182))
          {
            v106 = 0;
            v107 = 0;
            v108 = 0;
          }
          else
          {
            WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v182, (uint64_t)&v179);
            v106 = v179;
            LODWORD(v107) = v180;
            BYTE4(v107) = BYTE4(v180);
          }
          LOBYTE(v108) = 1;
          v82 = v182[0];
          v182[0] = 0;
          if (v82)
          {
            if (*(_DWORD *)(v82 + 24) == 2)
            {
              if ((*(_WORD *)(v82 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v82, v81);
            }
            else
            {
              *(_DWORD *)(v82 + 24) -= 2;
            }
          }
          v83 = WebCore::VisiblePosition::characterAfter((WebCore::VisiblePosition *)&v106);
          v85 = v83;
          if (v83 > 0xFFu)
          {
            v86 = MEMORY[0x19AEA858C](v83) == 9;
          }
          else
          {
            v86 = (v83 < 0x21u) & (0x100003600uLL >> v83);
            if (v83 == 11)
              v86 = 1;
          }
          if (v85 == 160)
            v87 = 1;
          else
            v87 = v86;
          v88 = v106;
          if (v87 == 1)
          {
            if (v106)
              *((_DWORD *)v106 + 6) += 2;
            v89 = v109;
            v109 = v88;
            if (v89)
            {
              if (*((_DWORD *)v89 + 6) == 2)
              {
                if ((*((_WORD *)v89 + 15) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef(v89, v84);
                  v88 = v106;
                }
              }
              else
              {
                *((_DWORD *)v89 + 6) -= 2;
              }
            }
            v110 = v107;
            v111 = BYTE4(v107);
            v112 = v108;
          }
          v106 = 0;
          if (v88)
          {
            if (*((_DWORD *)v88 + 6) == 2)
            {
              if ((*((_WORD *)v88 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v88, v84);
            }
            else
            {
              *((_DWORD *)v88 + 6) -= 2;
            }
          }
        }
        while ((v87 & 1) != 0);
        if ((char)WebCore::documentOrder(&v113, &v147, v80) >= 1)
        {
          v92 = v147;
          if (v147)
            *((_DWORD *)v147 + 6) += 2;
          v93 = v113;
          v113 = v92;
          if (v93)
          {
            if (*((_DWORD *)v93 + 6) == 2)
            {
              if ((*((_WORD *)v93 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v93, v90);
            }
            else
            {
              *((_DWORD *)v93 + 6) -= 2;
            }
          }
          v114 = v148;
          v115 = v149;
          v116 = v150;
        }
        v94 = WebCore::documentOrder(&v109, &v143, v91);
        if (v94 != 129 && (char)v94 < 0)
        {
          v96 = v143;
          if (v143)
            *((_DWORD *)v143 + 6) += 2;
          v97 = v109;
          v109 = v96;
          if (v97)
          {
            if (*((_DWORD *)v97 + 6) == 2)
            {
              if ((*((_WORD *)v97 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v97, v95);
            }
            else
            {
              *((_DWORD *)v97 + 6) -= 2;
            }
          }
          v110 = v144;
          v111 = v145;
          v112 = v146;
        }
        WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)a2, (const WebCore::VisiblePosition *)&v113, (const WebCore::VisiblePosition *)&v109, 0);
        goto LABEL_224;
      }
      WebCore::previousVisuallyDistinctCandidate(&v113, (uint64_t)v182);
      if (WebCore::Position::atStartOfTree((WebCore::Position *)v182))
      {
        v61 = 0;
        v106 = 0;
        v107 = 0;
        v108 = 0;
      }
      else
      {
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v182, (uint64_t)&v179);
        v61 = v179;
        v106 = v179;
        LODWORD(v107) = v180;
        BYTE4(v107) = BYTE4(v180);
      }
      LOBYTE(v108) = 1;
      v62 = v182[0];
      v182[0] = 0;
      if (v62)
      {
        if (*(_DWORD *)(v62 + 24) == 2)
        {
          if ((*(_WORD *)(v62 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v62, v60);
            v61 = v106;
          }
        }
        else
        {
          *(_DWORD *)(v62 + 24) -= 2;
        }
      }
      if (v61)
        v63 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
      else
        v63 = 0;
      if (v63)
      {
        WebCore::endOfLine((uint64_t *)&v179, (uint64_t)&v106, 1, 0);
        v64 = WebCore::operator==((uint64_t *)&v106, (uint64_t *)&v179);
        v65 = v179;
        v179 = 0;
        if (v65)
        {
          if (*((_DWORD *)v65 + 6) == 2)
          {
            if ((*((_WORD *)v65 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v65, v40);
          }
          else
          {
            *((_DWORD *)v65 + 6) -= 2;
          }
        }
        if (v64)
          goto LABEL_171;
      }
      v66 = WebCore::VisiblePosition::characterAfter((WebCore::VisiblePosition *)&v106);
      v67 = v66;
      if (v66 > 0xFFu)
      {
        v68 = MEMORY[0x19AEA858C](v66) == 9;
      }
      else
      {
        v68 = (v66 < 0x21u) & (0x100003600uLL >> v66);
        if (v66 == 11)
          v68 = 1;
      }
      if (v67 == 160 || (v68 & 1) != 0)
        goto LABEL_171;
      WebCore::FrameSelection::moveTo((uint64_t)v157, (uint64_t *)&v113, 0, 0);
      WebCore::FrameSelection::modify((uint64_t)v157, 1, 1, 1, 0);
      v70 = v170;
      if (v170)
        *((_DWORD *)v170 + 6) += 2;
      v71 = v120;
      v120 = v70;
      if (v71)
      {
        if (*((_DWORD *)v71 + 6) == 2)
        {
          if ((*((_WORD *)v71 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v71, v69);
        }
        else
        {
          *((_DWORD *)v71 + 6) -= 2;
        }
      }
      v121 = v171;
      v122 = v172;
      v72 = v173;
      if (v173)
        *((_DWORD *)v173 + 6) += 2;
      v73 = v117;
      v117 = v72;
      if (v73)
      {
        if (*((_DWORD *)v73 + 6) == 2)
        {
          if ((*((_WORD *)v73 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v73, v69);
        }
        else
        {
          *((_DWORD *)v73 + 6) -= 2;
        }
      }
      v118 = v174;
      v119 = v175;
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v120, (uint64_t)&v179);
      v75 = v113;
      v113 = v179;
      if (v75)
      {
        if (*((_DWORD *)v75 + 6) == 2)
        {
          if ((*((_WORD *)v75 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v75, v74);
        }
        else
        {
          *((_DWORD *)v75 + 6) -= 2;
        }
      }
      v114 = v180;
      v115 = BYTE4(v180);
      v76 = 1;
      v116 = 1;
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v117, (uint64_t)&v179);
      v77 = v179;
      v78 = v109;
      v109 = v179;
      if (v78)
      {
        if (*((_DWORD *)v78 + 6) == 2)
        {
          if ((*((_WORD *)v78 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v78, v40);
            v110 = v180;
            v111 = BYTE4(v180);
            v112 = 1;
            v77 = v109;
            goto LABEL_169;
          }
        }
        else
        {
          *((_DWORD *)v78 + 6) -= 2;
        }
      }
      v110 = v180;
      v111 = BYTE4(v180);
      v112 = 1;
LABEL_169:
      if (v113 && v77)
      {
LABEL_172:
        v79 = v106;
        v106 = 0;
        if (v79)
        {
          if (*((_DWORD *)v79 + 6) == 2)
          {
            if ((*((_WORD *)v79 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v79, v40);
          }
          else
          {
            *((_DWORD *)v79 + 6) -= 2;
          }
        }
        if (!v76)
          goto LABEL_224;
        goto LABEL_176;
      }
LABEL_171:
      v76 = 0;
      *(_BYTE *)(a2 + 12) &= 0xF0u;
      *(_BYTE *)(a2 + 28) &= 0xF0u;
      *(_BYTE *)(a2 + 44) &= 0xF0u;
      *(_BYTE *)(a2 + 60) &= 0xF0u;
      *(_BYTE *)(a2 + 76) &= 0xF0u;
      *(_BYTE *)(a2 + 92) &= 0xF0u;
      *(_WORD *)(a2 + 96) = 1;
      *(_BYTE *)(a2 + 98) = *(_BYTE *)(a2 + 98) & 0xFC | 1;
      *(_QWORD *)a2 = 0;
      *(_DWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_DWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_DWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 56) = 0;
      *(_QWORD *)(a2 + 64) = 0;
      *(_DWORD *)(a2 + 72) = 0;
      *(_QWORD *)(a2 + 80) = 0;
      *(_DWORD *)(a2 + 88) = 0;
      goto LABEL_172;
    }
  }
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) &= 0xF0u;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 28) &= 0xF0u;
  *(_QWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 44) &= 0xF0u;
  *(_QWORD *)(a2 + 48) = 0;
  *(_DWORD *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 60) &= 0xF0u;
  *(_QWORD *)(a2 + 64) = 0;
  *(_DWORD *)(a2 + 72) = 0;
  *(_BYTE *)(a2 + 76) &= 0xF0u;
  *(_QWORD *)(a2 + 80) = 0;
  *(_DWORD *)(a2 + 88) = 0;
  *(_BYTE *)(a2 + 92) &= 0xF0u;
  *(_WORD *)(a2 + 96) = 1;
  *(_BYTE *)(a2 + 98) = *(_BYTE *)(a2 + 98) & 0xFC | 1;
LABEL_237:
  v102 = v143;
  v143 = 0;
  if (v102)
  {
    if (*((_DWORD *)v102 + 6) == 2)
    {
      if ((*((_WORD *)v102 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v102, v7);
    }
    else
    {
      *((_DWORD *)v102 + 6) -= 2;
    }
  }
  if (v147)
  {
    if (*((_DWORD *)v147 + 6) == 2)
    {
      if ((*((_WORD *)v147 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v147, v7);
    }
    else
    {
      *((_DWORD *)v147 + 6) -= 2;
    }
  }
  v103 = v151;
  v151 = 0;
  if (v103)
  {
    if (*((_DWORD *)v103 + 6) == 2)
    {
      if ((*((_WORD *)v103 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v103, v7);
    }
    else
    {
      *((_DWORD *)v103 + 6) -= 2;
    }
  }
  v104 = v154;
  v154 = 0;
  if (v104)
  {
    if (*((_DWORD *)v104 + 6) == 2)
    {
      if ((*((_WORD *)v104 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v104, v7);
    }
    else
    {
      *((_DWORD *)v104 + 6) -= 2;
    }
  }
  WebCore::FrameSelection::~FrameSelection((WebCore::FrameSelection *)v157, v7);
}

void WebCore::FrameSelection::wordRangeContainingCaretSelection(WebCore::FrameSelection *this@<X0>, _BYTE *a2@<X8>)
{
  _BYTE v3[104];

  WebCore::FrameSelection::wordSelectionContainingCaretSelection((WebCore::FrameSelection *)((char *)this + 56), (uint64_t)v3);
  WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)v3, a2);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v3);
}

WebCore::Node *WebCore::FrameSelection::expandSelectionToStartOfWordContainingCaretSelection(WebCore::Node *this)
{
  uint64_t v1;
  WebCore::VisiblePosition *v2;
  const WebCore::VisiblePosition *v3;
  void *v4;
  char isStartOfDocument;
  void *v6;
  const WebCore::VisiblePosition *v7;
  WebCore::Node *v8;
  WebCore::Node *v9;
  void *v10;
  void *v11;
  WebCore::Node *v12;
  int v13;
  char v14;
  char v15;
  WebCore::Node *v16[2];
  char v17;
  uint64_t v18;
  WebCore::Node *v19[2];
  char v20;
  WebCore::Node *v21;
  int v22;
  char v23;
  char v24;

  if (*((_BYTE *)this + 153))
  {
    v1 = (uint64_t)this;
    v2 = (WebCore::Node *)((char *)this + 120);
    WebCore::VisiblePosition::canonicalPosition((WebCore::Node *)((char *)this + 120), (uint64_t)v16);
    v17 = 1;
    isStartOfDocument = WebCore::isStartOfDocument(v16, v3);
    this = v16[0];
    v16[0] = 0;
    if (this)
    {
      if (*((_DWORD *)this + 6) == 2)
      {
        if ((*((_WORD *)this + 15) & 0x400) == 0)
          this = (WebCore::Node *)WebCore::Node::removedLastRef(this, v4);
      }
      else
      {
        *((_DWORD *)this + 6) -= 2;
      }
    }
    if ((isStartOfDocument & 1) == 0)
    {
      WebCore::VisiblePosition::canonicalPosition(v2, (uint64_t)&v21);
      v24 = 1;
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v1 + 136), (uint64_t)v19);
      v20 = 1;
      WebCore::FrameSelection::wordSelectionContainingCaretSelection((WebCore::FrameSelection *)(v1 + 56), (uint64_t)v16);
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v18, (uint64_t)&v12);
      v15 = 1;
      v8 = v12;
      if (v12 && (char)WebCore::documentOrder(&v12, &v21, v7) <= 0)
      {
        WebCore::FrameSelection::moveTo(v1, (uint64_t *)&v12, (uint64_t *)v19, 0);
        v9 = v8;
      }
      else
      {
        v9 = v21;
        if (v21)
          *((_DWORD *)v21 + 6) += 2;
        v12 = v9;
        if (v8)
        {
          if (*((_DWORD *)v8 + 6) == 2)
          {
            if ((*((_WORD *)v8 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v8, v6);
          }
          else
          {
            *((_DWORD *)v8 + 6) -= 2;
          }
        }
        v13 = v22;
        v14 = v23;
        v15 = 1;
        WebCore::FrameSelection::moveTo(v1, (uint64_t *)&v12, (uint64_t *)v19, 0);
        if (!v9)
          goto LABEL_18;
      }
      if (*((_DWORD *)v9 + 6) == 2)
      {
        if ((*((_WORD *)v9 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v9, v10);
      }
      else
      {
        *((_DWORD *)v9 + 6) -= 2;
      }
LABEL_18:
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v16);
      if (v19[0])
      {
        if (*((_DWORD *)v19[0] + 6) == 2)
        {
          if ((*((_WORD *)v19[0] + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v19[0], v11);
        }
        else
        {
          *((_DWORD *)v19[0] + 6) -= 2;
        }
      }
      this = v21;
      if (v21)
      {
        if (*((_DWORD *)v21 + 6) == 2)
        {
          if ((*((_WORD *)v21 + 15) & 0x400) == 0)
            return (WebCore::Node *)WebCore::Node::removedLastRef(v21, v11);
        }
        else
        {
          *((_DWORD *)v21 + 6) -= 2;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::FrameSelection::characterInRelationToCaretSelection(WebCore::FrameSelection *this, int a2)
{
  int v3;
  const WebCore::VisiblePosition *v4;
  void *v5;
  WebCore::Node *v6;
  WebCore::Node *v7;
  void *v8;
  WebCore::Node *v9;
  void *v10;
  unsigned __int16 v11;
  int v12;
  void *v13;
  WebCore::Node *v14;
  WebCore::Node *v15;
  WebCore::Node *v16;
  void *v18;
  WebCore::Node *v19;
  WebCore::Node *v20;
  WebCore::Node *v21;
  WebCore::Node *v23;
  void *v24;
  WebCore::Node *v25;
  WebCore::Node *v26;
  int v27;
  char v28;
  char v29;
  WebCore::Node *v30;
  uint64_t v31;
  uint64_t v32;
  WebCore::Node *v33[2];
  WebCore::Node *v34;
  int v35;
  char v36;
  char v37;

  if (*((_BYTE *)this + 153) == 2)
  {
    WebCore::VisiblePosition::canonicalPosition((WebCore::FrameSelection *)((char *)this + 120), (uint64_t)&v26);
    v29 = 1;
  }
  else
  {
    v3 = *((unsigned __int8 *)this + 152);
    WebCore::VisiblePosition::canonicalPosition((WebCore::FrameSelection *)((char *)this + 120), (uint64_t)&v26);
    v29 = 1;
    if (!v3)
    {
      v23 = v26;
      if (v26)
      {
        *((_DWORD *)v26 + 6) += 2;
        v34 = v23;
        v35 = v27;
        v36 = v28;
        v37 = 0;
        if (!WebCore::inSameLine((WebCore *)&v26, (const WebCore::VisiblePosition *)&v34, v4))
          v29 = 0;
        v25 = v34;
        v34 = 0;
        if (v25)
        {
          if (*((_DWORD *)v25 + 6) == 2)
          {
            if ((*((_WORD *)v25 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v25, v24);
          }
          else
          {
            *((_DWORD *)v25 + 6) -= 2;
          }
        }
      }
    }
  }
  if (a2 < 0)
  {
    if (-a2 > 1)
      v12 = -a2;
    else
      v12 = 1;
    do
    {
      WebCore::previousVisuallyDistinctCandidate(&v26, (uint64_t)&v30);
      if (WebCore::Position::atStartOfTree((WebCore::Position *)&v30))
      {
        v14 = 0;
        BYTE4(v33[0]) = 0;
        LODWORD(v33[0]) = 0;
      }
      else
      {
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v30, (uint64_t)&v34);
        v14 = v34;
        LODWORD(v33[0]) = v35;
        BYTE4(v33[0]) = v36;
      }
      v15 = v30;
      v30 = 0;
      if (v15)
      {
        if (*((_DWORD *)v15 + 6) == 2)
        {
          if ((*((_WORD *)v15 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v15, v13);
        }
        else
        {
          *((_DWORD *)v15 + 6) -= 2;
        }
      }
      v16 = v26;
      v26 = v14;
      if (v16)
      {
        if (*((_DWORD *)v16 + 6) == 2)
        {
          if ((*((_WORD *)v16 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v16, v13);
        }
        else
        {
          *((_DWORD *)v16 + 6) -= 2;
        }
      }
      v27 = (int)v33[0];
      v28 = BYTE4(v33[0]);
      v29 = 1;
      --v12;
    }
    while (v12);
    WebCore::previousVisuallyDistinctCandidate(&v26, (uint64_t)v33);
    if (WebCore::Position::atStartOfTree((WebCore::Position *)v33))
    {
      v30 = 0;
      v31 = 0;
      v32 = 0;
    }
    else
    {
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v33, (uint64_t)&v34);
      v30 = v34;
      LODWORD(v31) = v35;
      BYTE4(v31) = v36;
    }
    LOBYTE(v32) = 1;
    v19 = v33[0];
    v33[0] = 0;
    if (v19)
    {
      if (*((_DWORD *)v19 + 6) == 2)
      {
        if ((*((_WORD *)v19 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v19, v18);
      }
      else
      {
        *((_DWORD *)v19 + 6) -= 2;
      }
    }
    v11 = WebCore::VisiblePosition::characterAfter((WebCore::VisiblePosition *)&v30);
    v20 = v30;
    v30 = 0;
    if (v20)
    {
      if (*((_DWORD *)v20 + 6) == 2)
      {
        if ((*((_WORD *)v20 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v20, v10);
      }
      else
      {
        *((_DWORD *)v20 + 6) -= 2;
      }
    }
  }
  else
  {
    for (; a2; --a2)
    {
      WebCore::VisiblePosition::next((unsigned __int8 *)&v26, 0, 0, (uint64_t)&v34);
      v6 = v34;
      v34 = 0;
      v7 = v26;
      v26 = v6;
      if (v7)
      {
        if (*((_DWORD *)v7 + 6) == 2)
        {
          if ((*((_WORD *)v7 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v7, v5);
            v9 = v34;
            v27 = v35;
            v28 = v36;
            v29 = v37;
            v34 = 0;
            if (v9)
            {
              if (*((_DWORD *)v9 + 6) == 2)
              {
                if ((*((_WORD *)v9 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v9, v8);
              }
              else
              {
                *((_DWORD *)v9 + 6) -= 2;
              }
            }
            continue;
          }
        }
        else
        {
          *((_DWORD *)v7 + 6) -= 2;
        }
      }
      v27 = v35;
      v28 = v36;
      v29 = v37;
    }
    v11 = WebCore::VisiblePosition::characterAfter((WebCore::VisiblePosition *)&v26);
  }
  v21 = v26;
  v26 = 0;
  if (v21)
  {
    if (*((_DWORD *)v21 + 6) == 2)
    {
      if ((*((_WORD *)v21 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v21, v10);
    }
    else
    {
      *((_DWORD *)v21 + 6) -= 2;
    }
  }
  return v11;
}

uint64_t WebCore::FrameSelection::selectionAtWordStart(WebCore::FrameSelection *this)
{
  int v1;
  const WebCore::VisiblePosition *v2;
  uint64_t (*v3)();
  void *v4;
  BOOL v5;
  WebCore::Node *v6;
  uint64_t v7;
  void *v8;
  WebCore::Node *v9;
  WebCore::Node *v10;
  WebCore::Node *v11;
  int i;
  _BOOL4 v13;
  WebCore::Node *v14;
  unsigned __int16 v15;
  void *v16;
  WebCore::Node *v17;
  WebCore::Node *v18;
  WebCore::Node *v19;
  BOOL v20;
  UChar32 v21;
  char v22;
  int v23;
  WebCore::Node *v25;
  WebCore::Node *v27;
  void *v28;
  WebCore::Node *v29;
  int v30;
  int v31;
  char v32;
  char v33;
  WebCore::Node *v34;
  int v35;
  char v36;
  char v37;
  WebCore::Node *v38;
  int v39;
  char v40;
  char v41;
  WebCore::Node *v42[2];

  if (*((_BYTE *)this + 153) == 2)
  {
    WebCore::VisiblePosition::canonicalPosition((WebCore::FrameSelection *)((char *)this + 120), (uint64_t)&v34);
    v37 = 1;
  }
  else
  {
    v1 = *((unsigned __int8 *)this + 152);
    WebCore::VisiblePosition::canonicalPosition((WebCore::FrameSelection *)((char *)this + 120), (uint64_t)&v34);
    v37 = 1;
    if (!v1)
    {
      v27 = v34;
      if (v34)
      {
        *((_DWORD *)v34 + 6) += 2;
        v38 = v27;
        v39 = v35;
        v40 = v36;
        v41 = 0;
        if (!WebCore::inSameLine((WebCore *)&v34, (const WebCore::VisiblePosition *)&v38, v2))
          v37 = 0;
        v29 = v38;
        v38 = 0;
        if (v29)
        {
          if (*((_DWORD *)v29 + 6) == 2)
          {
            if ((*((_WORD *)v29 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v29, v28);
          }
          else
          {
            *((_DWORD *)v29 + 6) -= 2;
          }
        }
      }
    }
  }
  if (v34)
    v3 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v3 = 0;
  if (v3)
  {
    WebCore::startOfParagraph((uint64_t)&v34, 1, &v38);
    v5 = WebCore::operator==((uint64_t *)&v34, (uint64_t *)&v38);
    v6 = v38;
    v38 = 0;
    if (v6)
    {
      if (*((_DWORD *)v6 + 6) == 2)
      {
        if ((*((_WORD *)v6 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v6, v4);
      }
      else
      {
        *((_DWORD *)v6 + 6) -= 2;
      }
    }
    if (v5)
    {
      v7 = 1;
      goto LABEL_63;
    }
  }
  WebCore::previousVisuallyDistinctCandidate(&v34, (uint64_t)v42);
  if (WebCore::Position::atStartOfTree((WebCore::Position *)v42))
  {
    v9 = 0;
    v32 = 0;
    v30 = 0;
  }
  else
  {
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v42, (uint64_t)&v38);
    v9 = v38;
    v30 = v39;
    v32 = v40;
  }
  v10 = v42[0];
  v42[0] = 0;
  if (v10)
  {
    if (*((_DWORD *)v10 + 6) == 2)
    {
      if ((*((_WORD *)v10 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v10, v8);
    }
    else
    {
      *((_DWORD *)v10 + 6) -= 2;
    }
  }
  v11 = v34;
  v34 = v9;
  if (v11)
  {
    if (*((_DWORD *)v11 + 6) == 2)
    {
      if ((*((_WORD *)v11 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v11, v8);
        v35 = v30;
        v36 = v32;
        v9 = v34;
        goto LABEL_22;
      }
    }
    else
    {
      *((_DWORD *)v11 + 6) -= 2;
    }
  }
  v35 = v30;
  v36 = v32;
LABEL_22:
  v7 = 1;
  v37 = 1;
  if (!v9)
    return v7;
  for (i = 0; ; --i)
  {
    WebCore::startOfParagraph((uint64_t)&v34, 1, &v38);
    v13 = WebCore::operator==((uint64_t *)&v34, (uint64_t *)&v38);
    v14 = v38;
    v38 = 0;
    if (v14)
    {
      if (*((_DWORD *)v14 + 6) == 2)
      {
        if ((*((_WORD *)v14 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v14, v4);
      }
      else
      {
        *((_DWORD *)v14 + 6) -= 2;
      }
    }
    if (v13)
    {
      v20 = i == 0;
LABEL_60:
      v7 = !v20;
      goto LABEL_63;
    }
    v15 = WebCore::VisiblePosition::characterAfter((WebCore::VisiblePosition *)&v34);
    if (v15)
      break;
    WebCore::previousVisuallyDistinctCandidate(&v34, (uint64_t)v42);
    if (WebCore::Position::atStartOfTree((WebCore::Position *)v42))
    {
      v17 = 0;
      v33 = 0;
      v31 = 0;
    }
    else
    {
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v42, (uint64_t)&v38);
      v17 = v38;
      v31 = v39;
      v33 = v40;
    }
    v18 = v42[0];
    v42[0] = 0;
    if (v18)
    {
      if (*((_DWORD *)v18 + 6) == 2)
      {
        if ((*((_WORD *)v18 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v18, v16);
      }
      else
      {
        *((_DWORD *)v18 + 6) -= 2;
      }
    }
    v19 = v34;
    v34 = v17;
    if (v19)
    {
      if (*((_DWORD *)v19 + 6) == 2)
      {
        if ((*((_WORD *)v19 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v19, v16);
          v35 = v31;
          v36 = v33;
          v17 = v34;
          goto LABEL_39;
        }
      }
      else
      {
        *((_DWORD *)v19 + 6) -= 2;
      }
    }
    v35 = v31;
    v36 = v33;
LABEL_39:
    v7 = 1;
    v37 = 1;
    if (!v17)
      return v7;
  }
  if (v15 > 0xFFu)
  {
    v21 = v15;
    v22 = MEMORY[0x19AEA858C](v15) == 9;
  }
  else
  {
    v21 = v15;
    if (v15 == 11)
      v22 = 1;
    else
      v22 = (v15 < 0x21u) & (0x100003600uLL >> v15);
  }
  v7 = 1;
  if (v21 != 160 && (v22 & 1) == 0)
  {
    v23 = u_ispunct(v21);
    v20 = (v21 - 46) >= 0xFFFFFFFE || v23 == 0 || v21 == 39;
    goto LABEL_60;
  }
LABEL_63:
  v25 = v34;
  v34 = 0;
  if (v25)
  {
    if (*((_DWORD *)v25 + 6) == 2)
    {
      if ((*((_WORD *)v25 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v25, v4);
    }
    else
    {
      *((_DWORD *)v25 + 6) -= 2;
    }
  }
  return v7;
}

void WebCore::FrameSelection::rangeByMovingCurrentSelection(WebCore::FrameSelection *this@<X0>, int a2@<W1>, _BYTE *a3@<X8>)
{
  WebCore::FrameSelection::rangeByAlteringCurrentSelection(a3, (uint64_t)this, 0, a2);
}

void WebCore::FrameSelection::rangeByAlteringCurrentSelection(_BYTE *a1, uint64_t a2, uint64_t a3, int a4)
{
  int v5;
  uint64_t v6;
  _BOOL8 v8;
  void *v9;
  _BYTE v10[56];
  uint64_t v11;

  if (*(_BYTE *)(a2 + 153))
  {
    v5 = a4;
    v6 = a2 + 56;
    if (a4)
    {
      WebCore::FrameSelection::FrameSelection((WebCore::FrameSelection *)v10, 0);
      WebCore::FrameSelection::setSelection((uint64_t)v10, v6, 6u, 0, 0, 0, 0);
      v8 = v5 < 1;
      if (v5 < 0)
        v5 = -v5;
      do
      {
        WebCore::FrameSelection::modify((uint64_t)v10, a3, v8, 0, 0);
        --v5;
      }
      while (v5);
      WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)&v11, a1);
      WebCore::FrameSelection::~FrameSelection((WebCore::FrameSelection *)v10, v9);
    }
    else
    {
      WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(a2 + 56), a1);
    }
  }
  else
  {
    *a1 = 0;
    a1[32] = 0;
  }
}

void WebCore::FrameSelection::rangeByExtendingCurrentSelection(WebCore::FrameSelection *this@<X0>, int a2@<W1>, _BYTE *a3@<X8>)
{
  WebCore::FrameSelection::rangeByAlteringCurrentSelection(a3, (uint64_t)this, 1, a2);
}

uint64_t WebCore::FrameSelection::selectionAtSentenceStart(WebCore::FrameSelection *this)
{
  int v1;
  const WebCore::VisiblePosition *v2;
  void *v3;
  BOOL v4;
  WebCore::Node *v5;
  char v6;
  WebCore::Node *v7;
  void *v8;
  WebCore::Node *v9;
  WebCore::Node *v10;
  WebCore::Node *v11;
  int v12;
  char v13;
  _BOOL4 v14;
  WebCore::Node *v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  void *v19;
  WebCore::Node *v20;
  WebCore::Node *v21;
  WebCore::Node *v22;
  WebCore::Node *v23;
  void *v24;
  WebCore::Node *v25;
  int v27;
  int v28;
  char v29;
  char v30;
  WebCore::Node *v31;
  int v32;
  char v33;
  char v34;
  WebCore::Node *v35;
  int v36;
  char v37;
  char v38;
  WebCore::Node *v39[2];

  if (*((_BYTE *)this + 153) == 2)
  {
    WebCore::VisiblePosition::canonicalPosition((WebCore::FrameSelection *)((char *)this + 120), (uint64_t)&v31);
    v34 = 1;
  }
  else
  {
    v1 = *((unsigned __int8 *)this + 152);
    WebCore::VisiblePosition::canonicalPosition((WebCore::FrameSelection *)((char *)this + 120), (uint64_t)&v31);
    v34 = 1;
    if (!v1)
    {
      v23 = v31;
      if (!v31)
        goto LABEL_74;
      *((_DWORD *)v31 + 6) += 2;
      v35 = v23;
      v36 = v32;
      v37 = v33;
      v38 = 0;
      if (!WebCore::inSameLine((WebCore *)&v31, (const WebCore::VisiblePosition *)&v35, v2))
        v34 = 0;
      v25 = v35;
      v35 = 0;
      if (v25)
      {
        if (*((_DWORD *)v25 + 6) == 2)
        {
          if ((*((_WORD *)v25 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v25, v24);
        }
        else
        {
          *((_DWORD *)v25 + 6) -= 2;
        }
      }
    }
  }
  if (!v31)
  {
LABEL_74:
    v6 = 0;
    return v6 & 1;
  }
  WebCore::startOfParagraph((uint64_t)&v31, 1, &v35);
  v4 = WebCore::operator==((uint64_t *)&v31, (uint64_t *)&v35);
  v5 = v35;
  v35 = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 6) == 2)
    {
      if ((*((_WORD *)v5 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v5, v3);
    }
    else
    {
      *((_DWORD *)v5 + 6) -= 2;
    }
  }
  if (!v4)
  {
    WebCore::previousVisuallyDistinctCandidate(&v31, (uint64_t)v39);
    if (WebCore::Position::atStartOfTree((WebCore::Position *)v39))
    {
      v9 = 0;
      v29 = 0;
      v27 = 0;
    }
    else
    {
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v39, (uint64_t)&v35);
      v9 = v35;
      v27 = v36;
      v29 = v37;
    }
    v10 = v39[0];
    v39[0] = 0;
    if (v10)
    {
      if (*((_DWORD *)v10 + 6) == 2)
      {
        if ((*((_WORD *)v10 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v10, v8);
      }
      else
      {
        *((_DWORD *)v10 + 6) -= 2;
      }
    }
    v11 = v31;
    v31 = v9;
    if (v11)
    {
      if (*((_DWORD *)v11 + 6) == 2)
      {
        if ((*((_WORD *)v11 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v11, v8);
          v32 = v27;
          v33 = v29;
          v9 = v31;
          goto LABEL_22;
        }
      }
      else
      {
        *((_DWORD *)v11 + 6) -= 2;
      }
    }
    v32 = v27;
    v33 = v29;
LABEL_22:
    v6 = 1;
    v34 = 1;
    if (!v9)
      return v6 & 1;
    v12 = 0;
    v13 = 0;
    while (1)
    {
      WebCore::startOfParagraph((uint64_t)&v31, 1, &v35);
      v14 = WebCore::operator==((uint64_t *)&v31, (uint64_t *)&v35);
      v15 = v35;
      v35 = 0;
      if (v15)
      {
        if (*((_DWORD *)v15 + 6) == 2)
        {
          if ((*((_WORD *)v15 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v15, v3);
        }
        else
        {
          *((_DWORD *)v15 + 6) -= 2;
        }
      }
      if (v14)
      {
        if (v12)
          v6 = (v12 != 1) | v13 ^ 1;
        else
          v6 = 0;
        goto LABEL_9;
      }
      v16 = WebCore::VisiblePosition::characterAfter((WebCore::VisiblePosition *)&v31);
      if (v16)
      {
        v17 = v16;
        if ((unsigned __int16)v16 > 0xFFu)
        {
          v18 = MEMORY[0x19AEA858C]() == 9;
        }
        else
        {
          v18 = ((unsigned __int16)v16 < 0x21u) & (0x100003600uLL >> v16);
          if ((unsigned __int16)v16 == 11)
            v18 = 1;
        }
        v13 = 1;
        if (v17 != 160 && (v18 & 1) == 0)
        {
          if (v17 >= 0x40)
            v6 = 0;
          else
            v6 = (0x8000400200000000 >> v17) & 1;
          goto LABEL_9;
        }
      }
      WebCore::previousVisuallyDistinctCandidate(&v31, (uint64_t)v39);
      if (WebCore::Position::atStartOfTree((WebCore::Position *)v39))
      {
        v20 = 0;
        v30 = 0;
        v28 = 0;
      }
      else
      {
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v39, (uint64_t)&v35);
        v20 = v35;
        v28 = v36;
        v30 = v37;
      }
      v21 = v39[0];
      v39[0] = 0;
      if (v21)
      {
        if (*((_DWORD *)v21 + 6) == 2)
        {
          if ((*((_WORD *)v21 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v21, v19);
        }
        else
        {
          *((_DWORD *)v21 + 6) -= 2;
        }
      }
      v22 = v31;
      v31 = v20;
      if (v22)
      {
        if (*((_DWORD *)v22 + 6) == 2)
        {
          if ((*((_WORD *)v22 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v22, v19);
            v32 = v28;
            v33 = v30;
            v20 = v31;
            goto LABEL_44;
          }
        }
        else
        {
          *((_DWORD *)v22 + 6) -= 2;
        }
      }
      v32 = v28;
      v33 = v30;
LABEL_44:
      v34 = 1;
      ++v12;
      if (!v20)
        return v6 & 1;
    }
  }
  v6 = 1;
LABEL_9:
  v7 = v31;
  v31 = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 6) == 2)
    {
      if ((*((_WORD *)v7 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v7, v3);
    }
    else
    {
      *((_DWORD *)v7 + 6) -= 2;
    }
  }
  return v6 & 1;
}

void WebCore::FrameSelection::clearCurrentSelection(WebCore::FrameSelection *this)
{
  uint64_t v1;
  int v2;
  char v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  int v17;
  char v18;
  __int16 v19;
  char v20;

  v1 = 0;
  v2 = 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 1;
  v20 = 1;
  WebCore::FrameSelection::setSelection((uint64_t)this, (uint64_t)&v1, 6u, 0, 0, 0, 0);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v1);
}

float WebCore::FrameSelection::setCaretColor(WebCore::FrameSelection *this, const WebCore::Color *a2, uint64_t a3, BOOL *a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  float result;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  WebCore::FrameSelection *v21;
  _BOOL4 v22;
  WebCore::FrameSelection *v23;
  const WebCore::Color *v24;
  const WebCore::Color *v25;
  float v26[4];
  float v27[4];

  v4 = *((_QWORD *)this + 33);
  v5 = *(_QWORD *)a2;
  if ((v4 & 0x8000000000000) != 0)
  {
    if ((v5 & 0x8000000000000) != 0)
    {
      result = *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      v14 = *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 8);
      v15 = *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 0xC);
      v16 = *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 0x10);
      v17 = *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 4);
      v18 = *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 8);
      v19 = *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 0xC);
      v20 = *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 0x10);
      if (result == v17 && v14 == v18 && v15 == v19 && v16 == v20 && HIBYTE(v4) == HIBYTE(v5) && BYTE6(v4) == BYTE6(v5))
        return result;
      v25 = a2;
      v27[0] = *(float *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      v27[1] = v14;
      v27[2] = v15;
      v27[3] = v16;
      v26[0] = v17;
      v26[1] = v18;
      v26[2] = v19;
      v26[3] = v20;
      v21 = this;
      v22 = WebCore::operator==<float,4ul>(v27, v26);
      v4 = *((_QWORD *)v21 + 33);
      if (v22 && HIBYTE(v4) == HIBYTE(*(_QWORD *)v25))
      {
        this = v21;
        a2 = v25;
        if (BYTE6(v4) == BYTE6(*(_QWORD *)v25))
        {
LABEL_8:
          if (!*((_BYTE *)this + 25) && *((_BYTE *)this + 153) == 1)
            WebCore::FrameSelection::invalidateCaretRect((unint64_t)this, (uint64_t)a2, a3, a4);
          return result;
        }
      }
      else
      {
        this = v21;
        a2 = v25;
      }
    }
LABEL_6:
    if ((v4 & 0x8000000000000) != 0)
    {
      v23 = this;
      v24 = a2;
      v11 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, a2);
        this = v23;
        a2 = v24;
      }
    }
    v7 = *(_QWORD *)a2;
    *((_QWORD *)this + 33) = *(_QWORD *)a2;
    if ((v7 & 0x8000000000000) != 0)
    {
      v9 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
    goto LABEL_8;
  }
  if (v4 != v5 || (v5 & 0x8000000000000) != 0)
    goto LABEL_6;
  return result;
}

uint64_t WebCore::containsEndpoints(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    v2 = *(_QWORD *)(result + 8);
    if (v2)
      v3 = *((_BYTE *)a2 + 32) == 0;
    else
      v3 = 1;
    if (!v3
      && (v4 = v2 + 96, v4 == *(_QWORD *)(*a2 + 40))
      && (*(_BYTE *)(*a2 + 22) & 8) != 0
      && (v5 = a2[2], v4 == *(_QWORD *)(v5 + 40)))
    {
      return (*(unsigned __int8 *)(v5 + 22) >> 3) & 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

WebCore::Node *WebCore::FrameSelection::associatedLiveRange@<X0>(WebCore::Node *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  WebCore::Node *v4;
  void *v5;
  WebCore::Document *v6;
  WebCore::Range *v7;
  WebCore *v8;
  const WebCore::SimpleRange *v9;
  WebCore::Node *v10;
  WebCore::Node *v11[2];
  WebCore::Node *v12;
  char v13;

  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
LABEL_16:
    ++*(_DWORD *)(v3 + 8);
LABEL_17:
    *a2 = v3;
    return this;
  }
  v4 = this;
  WebCore::VisibleSelection::range((WebCore::Node *)((char *)this + 56), (uint64_t)v11);
  this = (WebCore::Node *)WebCore::containsEndpoints(*((_QWORD *)v4 + 4), v11);
  if (!(_DWORD)this)
  {
LABEL_8:
    if (v13)
    {
      v10 = v12;
      v12 = 0;
      if (v10)
      {
        if (*((_DWORD *)v10 + 6) == 2)
        {
          if ((*((_WORD *)v10 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v10, v5);
        }
        else
        {
          *((_DWORD *)v10 + 6) -= 2;
        }
      }
      this = v11[0];
      v11[0] = 0;
      if (this)
      {
        if (*((_DWORD *)this + 6) == 2)
        {
          if ((*((_WORD *)this + 15) & 0x400) == 0)
            this = (WebCore::Node *)WebCore::Node::removedLastRef(this, v5);
        }
        else
        {
          *((_DWORD *)this + 6) -= 2;
        }
      }
    }
    v3 = *((_QWORD *)v4 + 5);
    if (!v3)
      goto LABEL_17;
    goto LABEL_16;
  }
  if (v13)
  {
    v6 = *(WebCore::Document **)(*((_QWORD *)v11[0] + 5) + 8);
    v7 = (WebCore::Range *)bmalloc::api::isoAllocate();
    v8 = WebCore::Range::Range(v7, v6);
    WebCore::setBothEndpoints(v8, (WebCore::Range *)v11, v9);
    this = (WebCore::Node *)*((_QWORD *)v4 + 5);
    *((_QWORD *)v4 + 5) = v7;
    if (this)
    {
      if (*((_DWORD *)this + 2) == 1)
      {
        this = (WebCore::Node *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)this + 8))(this);
        v7 = (WebCore::Range *)*((_QWORD *)v4 + 5);
      }
      else
      {
        --*((_DWORD *)this + 2);
      }
    }
    *((_BYTE *)v7 + 80) = 1;
    goto LABEL_8;
  }
  __break(1u);
  return this;
}

void WebCore::FrameSelection::updateFromAssociatedLiveRange(WebCore::FrameSelection *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  int v25;
  char v26;
  __int16 v27;
  char v28;

  v2 = *((_QWORD *)this + 5);
  v3 = *((_QWORD *)this + 4);
  if (v3
    && (v4 = *(_QWORD *)(v3 + 8)) != 0
    && (v5 = *(_QWORD *)(v2 + 32), v4 + 96 == *(_QWORD *)(v5 + 40))
    && (*(_BYTE *)(v5 + 22) & 8) != 0)
  {
    *(_DWORD *)(v5 + 24) += 2;
    v6 = *(_DWORD *)(v2 + 40);
    v7 = *(_QWORD *)(v2 + 56);
    *(_DWORD *)(v7 + 24) += 2;
    v8 = *(_DWORD *)(v2 + 64);
    *(_DWORD *)(v5 + 24) += 2;
    v9 = v5;
    v10 = v6;
    v11 = 0;
    *(_DWORD *)(v7 + 24) += 2;
    v12 = v7;
    v13 = v8;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v28 = 0;
    WebCore::VisibleSelection::validate((uint64_t)&v9, 0);
    WebCore::FrameSelection::setSelection(this, &v9, 6, 0, 0, 0, 0);
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v9);
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  else
  {
    *((_QWORD *)this + 5) = 0;
    *(_BYTE *)(v2 + 80) = 0;
    if (*(_DWORD *)(v2 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    else
      --*(_DWORD *)(v2 + 8);
  }
}

WTF::StringImpl *WebCore::convertHTMLTextToInterchangeFormat@<X0>(WTF::StringImpl *this@<X0>, const WTF::String *a2@<X1>, const WebCore::Text *a3@<X2>, WTF::StringImpl **a4@<X8>)
{
  WTF::StringImpl *v4;
  unsigned int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  int v16;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  _WORD *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  char *v42;
  int v43;
  uint64_t v44;
  _BYTE *v45;
  int v46;
  unsigned int v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  unsigned int v54;
  int v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl **v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  unsigned int v61;
  char v62;
  char v63;
  uint64_t v64;

  v4 = this;
  if ((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
      goto LABEL_152;
    v6 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x20) + 8) + 120);
    v7 = (v6 >> 27) & 7;
    if ((v6 & 0x40000000) == 0 && v7 == 3
      || v7 && ((v54 = v6 & 0x40000000) != 0 ? (v55 = 1) : (v55 = 2), v7 == v55 || !((v7 != 1) | (v54 >> 30) & 1)))
    {
      v56 = *(WTF::StringImpl **)this;
      if (*(_QWORD *)this)
        *(_DWORD *)v56 += 2;
      *a4 = v56;
      return this;
    }
  }
  if ((_MergedGlobals_176 & 1) == 0)
  {
    WTF::tryFastCompactMalloc((WTF *)0x40);
    v57 = v59;
    if (v59)
    {
      *(_QWORD *)v59 = 0x2C00000002;
      qmemcpy((char *)v57 + 20, "<span class=\"Apple-converted-space\">", 36);
      *((_QWORD *)v57 + 1) = (char *)v57 + 20;
      *((_DWORD *)v57 + 4) = 4;
      *((_BYTE *)v57 + 56) = -96;
      *(_DWORD *)((char *)v57 + 57) = 1886596924;
      *((_DWORD *)v57 + 15) = 1047421296;
      qword_1ECE83260 = (uint64_t)v57;
      _MergedGlobals_176 = 1;
      goto LABEL_7;
    }
LABEL_152:
    __break(0xC471u);
    JUMPOUT(0x195AE83D4);
  }
LABEL_7:
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v62 = 1;
  v8 = *(_QWORD *)v4;
  if (!*(_QWORD *)v4)
    goto LABEL_130;
  v58 = a4;
  v9 = 0;
  do
  {
    v10 = *(unsigned int *)(v8 + 4);
    if (v9 >= v10)
      break;
    v11 = *(_DWORD *)(v8 + 16);
    v12 = *(_QWORD *)(v8 + 8);
    if ((v11 & 4) != 0)
      v13 = *(unsigned __int8 *)(v12 + v9);
    else
      v13 = *(unsigned __int16 *)(v12 + 2 * v9);
    if (v13 == 32 || v13 == 10)
    {
      LODWORD(v15) = v9 + 1;
      if (v9 + 1 < v10)
      {
        v15 = v9 + 1;
        if ((v11 & 4) != 0)
        {
          while (v10 != v15)
          {
            v16 = *(unsigned __int8 *)(v12 + v15);
            if (v16 != 32 && v16 != 10)
              goto LABEL_27;
            if (v10 == ++v15)
              break;
          }
        }
        else
        {
          while (v10 != v15)
          {
            v46 = *(unsigned __int16 *)(v12 + 2 * v15);
            if (v46 != 32 && v46 != 10)
              goto LABEL_27;
            if (v10 == ++v15)
              break;
          }
        }
        LODWORD(v15) = v10;
      }
LABEL_27:
      v18 = v15 - v9;
      if ((_DWORD)v15 == v9)
        goto LABEL_121;
      v19 = v15 - v9;
      while (2)
      {
        v20 = v19 % 3;
        if (v19 % 3 == 2)
        {
          if (!v9)
            goto LABEL_70;
          v36 = *(_QWORD *)v4;
          if (*(_QWORD *)v4)
            LODWORD(v36) = *(_DWORD *)(v36 + 4);
          if (v9 + 2 == (_DWORD)v36)
          {
            v37 = qword_1ECE83260;
            v38 = v60;
            if ((v60 || (v38 = v59) != 0) && (*((_BYTE *)v38 + 16) & 4) == 0
              || qword_1ECE83260 && (*(_BYTE *)(qword_1ECE83260 + 16) & 4) == 0)
            {
              v39 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v59);
              if (v39)
                WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v39, v37, v37);
            }
            else
            {
              v45 = (_BYTE *)MEMORY[0x19AEA4824](&v59);
              if (v45)
                WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v45, v37, v37);
            }
          }
          else
          {
LABEL_70:
            v64 = qword_1ECE83260;
            v63 = 32;
            WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v59, &v64, &v63);
          }
          v20 = 2;
          goto LABEL_91;
        }
        if (v20 != 1)
        {
          if (!v20)
          {
            v21 = qword_1ECE83260;
            if (qword_1ECE83260)
            {
              v22 = *(_DWORD *)(qword_1ECE83260 + 4);
              v23 = v22 + 1;
              if (v22 == -1)
                v23 = -1;
              v24 = __CFADD__(v23, v22);
              v25 = v23 + v22;
              if (v24)
                v25 = -1;
            }
            else
            {
              v25 = 1;
            }
            v24 = __CFADD__(v25, v61);
            v26 = v25 + v61;
            if (v24)
              v27 = 0xFFFFFFFFLL;
            else
              v27 = v26;
            v28 = v60;
            if ((v60 || (v28 = v59) != 0) && (*((_BYTE *)v28 + 16) & 4) == 0
              || qword_1ECE83260 && (*(_BYTE *)(qword_1ECE83260 + 16) & 4) == 0)
            {
              v29 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v59);
              if (v29)
              {
                v30 = v29;
                v64 = v21;
                WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v64, v29);
                v31 = v64;
                if (v64)
                  v31 = *(unsigned int *)(v64 + 4);
                v32 = &v30[2 * v31];
                *(_WORD *)v32 = 32;
                WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>>(v32 + 2, v21);
                goto LABEL_86;
              }
              v20 = 3;
            }
            else
            {
              v42 = (char *)MEMORY[0x19AEA4824](&v59, v27, a3);
              if (v42)
                WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v42, v21, 32, v21);
LABEL_86:
              v20 = 3;
            }
          }
LABEL_91:
          v19 -= v20;
          if (!v19)
            goto LABEL_121;
          continue;
        }
        break;
      }
      if (v9)
      {
        if (!*(_QWORD *)v4)
        {
          v33 = v60;
          goto LABEL_53;
        }
        v33 = v60;
        if (v9 + 1 != *(_DWORD *)(*(_QWORD *)v4 + 4))
        {
LABEL_53:
          LOBYTE(v64) = 32;
          if (v33 && ((v34 = v61, v61 < *((_DWORD *)v33 + 1)) ? (v35 = v59 == 0) : (v35 = 0), v35))
          {
            v43 = *((_DWORD *)v33 + 4);
            v44 = *((_QWORD *)v33 + 1);
            ++v61;
            if ((v43 & 4) != 0)
              *(_BYTE *)(v44 + v34) = 32;
            else
              *(_WORD *)(v44 + 2 * v34) = 32;
          }
          else
          {
LABEL_89:
            WTF::StringBuilder::append();
          }
          goto LABEL_90;
        }
      }
      else
      {
        v33 = v60;
      }
      v40 = (WTF::StringImpl *)qword_1ECE83260;
      if (v61 || v33)
      {
        if (!qword_1ECE83260 || (*(_BYTE *)(qword_1ECE83260 + 16) & 4) != 0)
          goto LABEL_89;
        WTF::StringBuilder::append();
LABEL_90:
        v20 = 1;
        goto LABEL_91;
      }
      if (qword_1ECE83260)
        *(_DWORD *)qword_1ECE83260 += 2;
      v41 = v59;
      v59 = v40;
      if (v41)
      {
        if (*(_DWORD *)v41 != 2)
        {
          *(_DWORD *)v41 -= 2;
          goto LABEL_80;
        }
        WTF::StringImpl::destroy(v41, a2);
        v40 = (WTF::StringImpl *)qword_1ECE83260;
        if (!qword_1ECE83260)
        {
LABEL_82:
          v61 = v40;
          goto LABEL_90;
        }
      }
      else
      {
LABEL_80:
        if (!v40)
          goto LABEL_82;
      }
      LODWORD(v40) = *((_DWORD *)v40 + 1);
      goto LABEL_82;
    }
    if ((v11 & 4) != 0)
      v48 = *(unsigned __int8 *)(v12 + v9);
    else
      v48 = *(unsigned __int16 *)(v12 + 2 * v9);
    LOWORD(v64) = v48;
    if (v60)
    {
      v49 = v61;
      if (v61 < *((_DWORD *)v60 + 1) && v59 == 0)
      {
        if ((*((_BYTE *)v60 + 16) & 4) == 0)
        {
          v51 = *((_QWORD *)v60 + 1);
          ++v61;
          *(_WORD *)(v51 + 2 * v49) = v48;
          goto LABEL_120;
        }
        if (v48 <= 0xFF)
        {
          v52 = *((_QWORD *)v60 + 1);
          ++v61;
          *(_BYTE *)(v52 + v49) = v48;
          goto LABEL_120;
        }
      }
    }
    WTF::StringBuilder::append();
LABEL_120:
    v18 = 1;
LABEL_121:
    v9 += v18;
    v8 = *(_QWORD *)v4;
  }
  while (*(_QWORD *)v4);
  this = v59;
  a4 = v58;
  if (v59)
    goto LABEL_131;
LABEL_130:
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v59);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v59);
  this = v59;
  if (v59)
LABEL_131:
    *(_DWORD *)this += 2;
  *a4 = this;
  v53 = v60;
  v60 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
    {
      WTF::StringImpl::destroy(v53, a2);
      this = v59;
    }
    else
    {
      *(_DWORD *)v53 -= 2;
    }
  }
  v59 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, a2);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

void WebCore::HTMLElementEquivalent::~HTMLElementEquivalent(WebCore::HTMLElementEquivalent *this, WTF::StringImpl *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = off_1E33AA018;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*v3 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
    else
      *v3 -= 2;
  }
}

{
  _DWORD *v3;

  *(_QWORD *)this = off_1E33AA018;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*v3 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
    else
      *v3 -= 2;
  }
  WTF::fastFree(this, a2);
}

BOOL WebCore::HTMLElementEquivalent::matches(WebCore::HTMLElementEquivalent *this, const WebCore::Element *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (uint64_t *)*((_QWORD *)this + 3);
  if (!v2)
    return 1;
  v3 = *((_QWORD *)a2 + 12);
  v4 = *v2;
  if (v3 == v4)
    return 1;
  if (*(_QWORD *)(v3 + 24) == *(_QWORD *)(v4 + 24))
    return *(_QWORD *)(v3 + 32) == *(_QWORD *)(v4 + 32);
  return 0;
}

uint64_t WebCore::HTMLElementEquivalent::hasAttribute(WebCore::HTMLElementEquivalent *this)
{
  return 0;
}

BOOL WebCore::HTMLElementEquivalent::propertyExistsInStyle(WebCore::HTMLElementEquivalent *this, const WebCore::EditingStyle *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  _BOOL8 v5;
  _DWORD *v7;

  v3 = *((_QWORD *)a2 + 1);
  if (!v3)
    return 0;
  WebCore::StyleProperties::getPropertyCSSValue(v3, *((unsigned __int16 *)this + 4), &v7);
  v5 = v7 != 0;
  if (v7)
  {
    if (*v7 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, v4);
    else
      *v7 -= 2;
  }
  return v5;
}

void WebCore::HTMLAttributeEquivalent::~HTMLAttributeEquivalent(WebCore::HTMLAttributeEquivalent *this, WTF::StringImpl *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = off_1E33AA018;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*v3 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
    else
      *v3 -= 2;
  }
}

{
  _DWORD *v3;

  *(_QWORD *)this = off_1E33AA018;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*v3 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
    else
      *v3 -= 2;
  }
  WTF::fastFree(this, a2);
}

BOOL WebCore::HTMLAttributeEquivalent::matches(WebCore::HTMLAttributeEquivalent *this, const WebCore::Element *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v5 = (uint64_t *)*((_QWORD *)this + 3);
  if (!v5)
    return WebCore::Element::hasAttribute(a2, *((const WebCore::QualifiedName **)this + 4), a3, a4, a5);
  v6 = *((_QWORD *)a2 + 12);
  v7 = *v5;
  return (v6 == v7 || *(_QWORD *)(v6 + 24) == *(_QWORD *)(v7 + 24) && *(_QWORD *)(v6 + 32) == *(_QWORD *)(v7 + 32))
      && WebCore::Element::hasAttribute(a2, *((const WebCore::QualifiedName **)this + 4), a3, a4, a5);
}

uint64_t WebCore::HTMLAttributeEquivalent::hasAttribute(WebCore::HTMLAttributeEquivalent *this)
{
  return 1;
}

void WebCore::HTMLFontSizeEquivalent::~HTMLFontSizeEquivalent(WebCore::HTMLFontSizeEquivalent *this, WTF::StringImpl *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = off_1E33AA018;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*v3 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
    else
      *v3 -= 2;
  }
}

{
  _DWORD *v3;

  *(_QWORD *)this = off_1E33AA018;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*v3 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
    else
      *v3 -= 2;
  }
  WTF::fastFree(this, a2);
}

void WebCore::ClearTextCommand::~ClearTextCommand(WebCore::ClearTextCommand *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::DeleteSelectionCommand::~DeleteSelectionCommand(this, a2);
  WTF::fastFree(v2, v3);
}

void WebCore::FormatBlockCommand::~FormatBlockCommand(WebCore::FormatBlockCommand *this, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl **v5;
  WTF *v6;
  void *v7;

  *(_QWORD *)this = off_1E33A9B18;
  v3 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl **)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
      WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  WebCore::CompositeEditCommand::~CompositeEditCommand(this, a2);
}

{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl **v5;
  WTF *v6;
  void *v7;
  WTF *v8;
  void *v9;

  *(_QWORD *)this = off_1E33A9B18;
  v3 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl **)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
      WTF::fastFree(v8, v9);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  WebCore::CompositeEditCommand::~CompositeEditCommand(this, a2);
  WTF::fastFree(v6, v7);
}

uint64_t WebCore::FormatBlockCommand::editingAction(WebCore::FormatBlockCommand *this)
{
  return 12;
}

uint64_t WebCore::FormatBlockCommand::preservesTypingStyle(WebCore::FormatBlockCommand *this)
{
  return 1;
}

uint64_t WebCore::FrameSelection::localCaretRect(WebCore::FrameSelection *this)
{
  return *((_QWORD *)this + 1);
}

void WebCore::HTMLFontWeightEquivalent::~HTMLFontWeightEquivalent(WebCore::HTMLFontWeightEquivalent *this, WTF::StringImpl *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = off_1E33AA018;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*v3 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
    else
      *v3 -= 2;
  }
}

{
  _DWORD *v3;

  *(_QWORD *)this = off_1E33AA018;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*v3 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
    else
      *v3 -= 2;
  }
  WTF::fastFree(this, a2);
}

BOOL WebCore::HTMLFontWeightEquivalent::valueIsPresentInStyle(WebCore::HTMLFontWeightEquivalent *this, WebCore::Element *a2, const WebCore::EditingStyle *a3)
{
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t *v10;
  double v11;
  float v12;
  _BOOL8 v13;
  int v14;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;

  WebCore::StyleProperties::getPropertyCSSValue(*((_QWORD *)a3 + 1), *((unsigned __int16 *)this + 4), &v18);
  v5 = (*(uint64_t (**)(WebCore::HTMLFontWeightEquivalent *, WebCore::Element *))(*(_QWORD *)this + 16))(this, a2);
  v7 = v18;
  if (!v5)
  {
    v13 = 0;
    if (!v18)
      return v13;
    goto LABEL_22;
  }
  if (!v18)
    return 0;
  v8 = *(unsigned __int16 *)(v18 + 4) | (*(unsigned __int8 *)(v18 + 6) << 16);
  if ((v8 & 0x3F800) == 0)
  {
    *(_DWORD *)v18 += 2;
    v9 = v8 & 0x7F;
    if (v9 == 80)
    {
      v10 = (uint64_t *)(v7 + 8);
      v14 = *(unsigned __int16 *)(v7 + 8);
      if ((v14 - 1) < 5 || v14 == 90)
        goto LABEL_18;
      if (v14 == 91)
        goto LABEL_16;
      if ((v14 - 16) < 0x1A)
      {
LABEL_18:
        v13 = 0;
LABEL_19:
        if (*(_DWORD *)v7 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v7, v6);
        else
          *(_DWORD *)v7 -= 2;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (uint64_t *)(v7 + 8);
      if (v9 == 73)
      {
        v16 = *v10;
        v19 = 0;
        v17 = WebCore::CSSCalcValue::doubleValue(v16, (uint64_t)&v19);
        if (v19)
          WTF::fastFree((WTF *)(v19 - 16), v6);
        v11 = v17;
LABEL_7:
        if (v11 < 3.40282347e38)
        {
          if (v11 > -3.40282347e38)
          {
            v12 = v11;
            v13 = v12 >= 600.0;
            goto LABEL_19;
          }
          goto LABEL_18;
        }
LABEL_16:
        v13 = 1;
        goto LABEL_19;
      }
    }
    v11 = *(double *)v10;
    goto LABEL_7;
  }
  v13 = 0;
LABEL_22:
  if (*(_DWORD *)v7 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v7, v6);
  else
    *(_DWORD *)v7 -= 2;
  return v13;
}

void WebCore::HTMLTextDecorationEquivalent::~HTMLTextDecorationEquivalent(WebCore::HTMLTextDecorationEquivalent *this, WTF::StringImpl *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = off_1E33AA018;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*v3 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
    else
      *v3 -= 2;
  }
}

{
  _DWORD *v3;

  *(_QWORD *)this = off_1E33AA018;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*v3 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
    else
      *v3 -= 2;
  }
  WTF::fastFree(this, a2);
}

BOOL WebCore::HTMLTextDecorationEquivalent::propertyExistsInStyle(WebCore::HTMLTextDecorationEquivalent *this, const WebCore::EditingStyle *a2)
{
  char v2;
  _BOOL8 v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v7;
  uint64_t v8;
  _DWORD **v9;
  _DWORD *v10;
  WTF *v11;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;

  if (*((_BYTE *)this + 32))
    v2 = 6;
  else
    v2 = 24;
  if ((v2 & *((_BYTE *)a2 + 16)) != 0)
    return 1;
  v4 = *((_QWORD *)a2 + 1);
  if (!v4)
    return 0;
  ++*(_DWORD *)v4;
  WebCore::StyleProperties::getPropertyCSSValue(v4, 341, &v15);
  if (v15)
  {
    if (*v15 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, v5);
    else
      *v15 -= 2;
    v3 = 1;
  }
  else
  {
    WebCore::StyleProperties::getPropertyCSSValue(v4, 255, &v14);
    v3 = v14 != 0;
    if (v14)
    {
      if (*v14 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v14, v5);
      else
        *v14 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
  {
    v7 = *(unsigned int *)(v4 + 28);
    if ((_DWORD)v7)
    {
      v8 = 16 * v7;
      v9 = (_DWORD **)(*(_QWORD *)(v4 + 16) + 8);
      do
      {
        v10 = *v9;
        *v9 = 0;
        if (v10)
        {
          if (*v10 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, v5);
          else
            *v10 -= 2;
        }
        v9 += 2;
        v8 -= 16;
      }
      while (v8);
    }
    v11 = *(WTF **)(v4 + 16);
    if ((WTF *)(v4 + 32) != v11 && v11 != 0)
    {
      *(_QWORD *)(v4 + 16) = 0;
      *(_DWORD *)(v4 + 24) = 0;
      WTF::fastFree(v11, v5);
    }
    v13 = *(_QWORD *)(v4 + 8);
    *(_QWORD *)(v4 + 8) = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    WTF::fastFree((WTF *)v4, v5);
  }
  else
  {
    --*(_DWORD *)v4;
  }
  return v3;
}

BOOL WebCore::HTMLTextDecorationEquivalent::valueIsPresentInStyle(WebCore::HTMLTextDecorationEquivalent *this, WebCore::Element *a2, const WebCore::EditingStyle *a3)
{
  char v5;
  int v6;
  uint64_t hasValue;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  WebCore::CSSValueContainingVector *v10;
  WebCore::CSSValue *v11;
  WTF::StringImpl *v12;
  int v13;
  WebCore::CSSValueContainingVector *v15;
  WebCore::CSSValueContainingVector *v16;

  if (!(*(unsigned int (**)(WebCore::HTMLTextDecorationEquivalent *, WebCore::Element *))(*(_QWORD *)this + 16))(this, a2))return 0;
  v5 = 3;
  if (*((_BYTE *)this + 32))
    v5 = 1;
  v6 = (*((unsigned __int8 *)a3 + 16) >> v5) & 3;
  if (!v6)
  {
    WebCore::StyleProperties::getPropertyCSSValue(*((_QWORD *)a3 + 1), 341, &v16);
    v10 = v16;
    if (!v16)
    {
      WebCore::StyleProperties::getPropertyCSSValue(*((_QWORD *)a3 + 1), 255, &v15);
      v10 = v15;
    }
    v11 = (WebCore::CSSValue *)*((_QWORD *)this + 2);
    if (v11)
    {
      if (!v10)
        return 0;
      if (((*((unsigned __int16 *)v10 + 2) | (*((unsigned __int8 *)v10 + 6) << 16)) & 0x3F800) == 0x1D800)
      {
        *(_DWORD *)v11 += 2;
        hasValue = WebCore::CSSValueContainingVector::hasValue(v10, v11, v9);
        if (*(_DWORD *)v11 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v12);
        else
          *(_DWORD *)v11 -= 2;
        v13 = *(_DWORD *)v10 - 2;
        if (*(_DWORD *)v10 == 2)
        {
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, v12);
          return hasValue;
        }
        goto LABEL_21;
      }
    }
    else if (!v10)
    {
      return 0;
    }
    v13 = *(_DWORD *)v10 - 2;
    if (*(_DWORD *)v10 != 2)
    {
      hasValue = 0;
LABEL_21:
      *(_DWORD *)v10 = v13;
      return hasValue;
    }
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, v8);
    return 0;
  }
  return v6 == 1;
}

WebCore::MutableStyleProperties *WebCore::StyleProperties::deref(WebCore::MutableStyleProperties *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)this == 1)
  {
    if ((*((_BYTE *)this + 4) & 8) != 0)
      WebCore::MutableStyleProperties::~MutableStyleProperties(this, a2);
    else
      WebCore::ImmutableStyleProperties::~ImmutableStyleProperties(this, a2);
    return (WebCore::MutableStyleProperties *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>>::deallocateTable(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != -1)
      {
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)(v5 + 24) == 2)
          {
            if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v5);
          }
          else
          {
            *(_DWORD *)(v5 + 24) -= 2;
          }
        }
      }
      ++v4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t std::default_delete<WebCore::WritingSuggestionData>::operator()[abi:sn180100](WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF *v6;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *(WTF::StringImpl **)v4;
      if (*(_QWORD *)v4 != -1)
      {
        v6 = *(WTF **)(v4 + 8);
        if (v6)
        {
          *(_QWORD *)(v4 + 8) = 0;
          *(_DWORD *)(v4 + 16) = 0;
          WTF::fastFree(v6, a2);
          v5 = *(WTF::StringImpl **)v4;
        }
        *(_QWORD *)v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void WebCore::SetCompositionScope::~SetCompositionScope(WebCore::SetCompositionScope *this, void *a2)
{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::Document *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::Document *v12;
  WebCore::Editor *v13;
  WebCore::Editor *v14;
  uint64_t v15;
  WebCore::Editor *v16;
  void *v17;
  WebCore::Editor *v18;
  uint64_t v19;
  void *v20;

  v3 = *(WebCore::Document **)this;
  v4 = *(_QWORD *)(*(_QWORD *)this + 3056);
  if (!v4)
  {
    v13 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v13, v3);
    v14 = (WebCore::Editor *)*((_QWORD *)v3 + 382);
    *((_QWORD *)v3 + 382) = v13;
    if (v14)
    {
      WebCore::Editor::~Editor(v14, a2);
      if (*(_DWORD *)v15)
      {
        *(_QWORD *)(v15 + 496) = 0;
        *(_OWORD *)(v15 + 464) = 0u;
        *(_OWORD *)(v15 + 480) = 0u;
        *(_OWORD *)(v15 + 432) = 0u;
        *(_OWORD *)(v15 + 448) = 0u;
        *(_OWORD *)(v15 + 400) = 0u;
        *(_OWORD *)(v15 + 416) = 0u;
        *(_OWORD *)(v15 + 368) = 0u;
        *(_OWORD *)(v15 + 384) = 0u;
        *(_OWORD *)(v15 + 336) = 0u;
        *(_OWORD *)(v15 + 352) = 0u;
        *(_OWORD *)(v15 + 304) = 0u;
        *(_OWORD *)(v15 + 320) = 0u;
        *(_OWORD *)(v15 + 272) = 0u;
        *(_OWORD *)(v15 + 288) = 0u;
        *(_OWORD *)(v15 + 240) = 0u;
        *(_OWORD *)(v15 + 256) = 0u;
        *(_OWORD *)(v15 + 208) = 0u;
        *(_OWORD *)(v15 + 224) = 0u;
        *(_OWORD *)(v15 + 176) = 0u;
        *(_OWORD *)(v15 + 192) = 0u;
        *(_OWORD *)(v15 + 144) = 0u;
        *(_OWORD *)(v15 + 160) = 0u;
        *(_OWORD *)(v15 + 112) = 0u;
        *(_OWORD *)(v15 + 128) = 0u;
        *(_OWORD *)(v15 + 80) = 0u;
        *(_OWORD *)(v15 + 96) = 0u;
        *(_OWORD *)(v15 + 48) = 0u;
        *(_OWORD *)(v15 + 64) = 0u;
        *(_OWORD *)(v15 + 16) = 0u;
        *(_OWORD *)(v15 + 32) = 0u;
        *(_OWORD *)v15 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v15, a2);
      }
    }
    v4 = *((_QWORD *)v3 + 382);
  }
  if (*(_BYTE *)(v4 + 88))
  {
    *(_BYTE *)(v4 + 88) = 0;
    WebCore::Editor::respondToChangedSelection(v4, (WTF::StringImpl *)a2, 0);
    if (!*(_BYTE *)(v4 + 88))
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8);
      *(_DWORD *)(v5 + 24) += 2;
      WebCore::FrameSelection::revealSelection(*(_QWORD *)(v5 + 3064), 0, (uint64_t)&WebCore::ScrollAlignment::alignToEdgeIfNeeded, 0, 1);
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v5);
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
    }
  }
  v6 = *(WebCore::Document **)this;
  v7 = *(_QWORD *)(*(_QWORD *)this + 3056);
  if (!v7)
  {
    v16 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v16, v6);
    v18 = (WebCore::Editor *)*((_QWORD *)v6 + 382);
    *((_QWORD *)v6 + 382) = v16;
    if (v18)
    {
      WebCore::Editor::~Editor(v18, v17);
      if (*(_DWORD *)v19)
      {
        *(_QWORD *)(v19 + 496) = 0;
        *(_OWORD *)(v19 + 464) = 0u;
        *(_OWORD *)(v19 + 480) = 0u;
        *(_OWORD *)(v19 + 432) = 0u;
        *(_OWORD *)(v19 + 448) = 0u;
        *(_OWORD *)(v19 + 400) = 0u;
        *(_OWORD *)(v19 + 416) = 0u;
        *(_OWORD *)(v19 + 368) = 0u;
        *(_OWORD *)(v19 + 384) = 0u;
        *(_OWORD *)(v19 + 336) = 0u;
        *(_OWORD *)(v19 + 352) = 0u;
        *(_OWORD *)(v19 + 304) = 0u;
        *(_OWORD *)(v19 + 320) = 0u;
        *(_OWORD *)(v19 + 272) = 0u;
        *(_OWORD *)(v19 + 288) = 0u;
        *(_OWORD *)(v19 + 240) = 0u;
        *(_OWORD *)(v19 + 256) = 0u;
        *(_OWORD *)(v19 + 208) = 0u;
        *(_OWORD *)(v19 + 224) = 0u;
        *(_OWORD *)(v19 + 176) = 0u;
        *(_OWORD *)(v19 + 192) = 0u;
        *(_OWORD *)(v19 + 144) = 0u;
        *(_OWORD *)(v19 + 160) = 0u;
        *(_OWORD *)(v19 + 112) = 0u;
        *(_OWORD *)(v19 + 128) = 0u;
        *(_OWORD *)(v19 + 80) = 0u;
        *(_OWORD *)(v19 + 96) = 0u;
        *(_OWORD *)(v19 + 48) = 0u;
        *(_OWORD *)(v19 + 64) = 0u;
        *(_OWORD *)(v19 + 16) = 0u;
        *(_OWORD *)(v19 + 32) = 0u;
        *(_OWORD *)v19 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v19, v20);
      }
    }
    v7 = *((_QWORD *)v6 + 382);
  }
  v8 = *(_QWORD *)(v7 + 8);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 352))(v9);
  }
  WebCore::s_processingUserTypingGesture = *((_BYTE *)this + 8);
  {
    WebCore::focusedNode(void)::node = 0;
  }
  v10 = *((_QWORD *)this + 2);
  if (v10)
    *(_DWORD *)(v10 + 24) += 2;
  v11 = WebCore::focusedNode(void)::node;
  WebCore::focusedNode(void)::node = v10;
  if (v11)
  {
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v11);
        v10 = *((_QWORD *)this + 2);
      }
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  v12 = *(WebCore::Document **)this;
  *(_QWORD *)this = 0;
  if (v12)
  {
    if (*((_DWORD *)v12 + 6) == 2)
    {
      if ((*((_WORD *)v12 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v12);
    }
    else
    {
      *((_DWORD *)v12 + 6) -= 2;
    }
  }
}

void WebCore::TextCheckingParagraph::~TextCheckingParagraph(WebCore::TextCheckingParagraph *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  if (*((_BYTE *)this + 136))
  {
    v4 = *((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = 0;
    if (v4)
    {
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v4);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
    }
    v5 = *((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = 0;
    if (v5)
    {
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v5);
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
    }
  }
  if (*((_BYTE *)this + 96))
  {
    v6 = *((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = 0;
    if (v6)
    {
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v6);
      }
      else
      {
        *(_DWORD *)(v6 + 24) -= 2;
      }
    }
    v7 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = 0;
    if (v7)
    {
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v7);
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
    }
  }
  v8 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  v11 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v11)
  {
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
}

uint64_t WebCore::ancestorsOfType<WebCore::HTMLElement>(uint64_t result)
{
  __int16 v1;

  while (result)
  {
    v1 = *(_WORD *)(result + 28);
    if ((v1 & 8) == 0)
      return 0;
    if ((v1 & 0x10) != 0)
      return result;
    result = *(_QWORD *)(result + 32);
  }
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::HTMLElement&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
  {
LABEL_10:
    v12 = *(unsigned int *)(v3 + 12);
    v13 = *(_QWORD **)v3;
    *(_DWORD *)(a2 + 24) += 2;
    v13[v12] = a2;
    *(_DWORD *)(v3 + 12) = v12 + 1;
    return result;
  }
  if (!(v8 >> 29))
  {
    v9 = *(void **)result;
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
    result = (uint64_t)memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v9, v11);
    }
    goto LABEL_10;
  }
  __break(0xC471u);
  return result;
}

unint64_t WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextList>(unsigned int *a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  v4 = *(_QWORD *)a1 + 24 * a1[3];
  *(_BYTE *)v4 = *(_BYTE *)result;
  v5 = *(_QWORD *)(result + 8);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(v4 + 8) = v5;
  LOBYTE(v5) = *(_BYTE *)(result + 20);
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(result + 16);
  *(_BYTE *)(v4 + 20) = v5;
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;

  if (result[2] < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 24 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(24 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        v8 = (WTF *)((char *)v3 + 24 * v4);
        v9 = v3;
        do
        {
          *(_BYTE *)v7 = *(_BYTE *)v9;
          v10 = *((_QWORD *)v9 + 1);
          *((_QWORD *)v9 + 1) = 0;
          *((_QWORD *)v7 + 1) = v10;
          LODWORD(v10) = *((_DWORD *)v9 + 4);
          *((_BYTE *)v7 + 20) = *((_BYTE *)v9 + 20);
          v7[4] = v10;
          result = (unsigned int *)*((_QWORD *)v9 + 1);
          *((_QWORD *)v9 + 1) = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
            else
              *result -= 2;
          }
          v9 = (WTF *)((char *)v9 + 24);
          v7 += 6;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

void WebCore::FontAttributes::~FontAttributes(WebCore::FontAttributes *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF **v8;
  WTF *v9;
  void *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;

  v3 = *((unsigned int *)this + 17);
  if ((_DWORD)v3)
  {
    v11 = 24 * v3;
    v12 = (WTF::StringImpl **)(*((_QWORD *)this + 7) + 8);
    do
    {
      v13 = *v12;
      *v12 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, a2);
        else
          *(_DWORD *)v13 -= 2;
      }
      v12 += 3;
      v11 -= 24;
    }
    while (v11);
  }
  v4 = (WTF *)*((_QWORD *)this + 7);
  if (v4)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((_QWORD *)this + 3);
  if ((v5 & 0x8000000000000) != 0)
  {
    v14 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, a2);
    }
  }
  v6 = *((_QWORD *)this + 2);
  if ((v6 & 0x8000000000000) != 0)
  {
    v17 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, a2);
    }
  }
  v7 = *((_QWORD *)this + 1);
  if ((v7 & 0x8000000000000) != 0)
  {
    v20 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v20);
      WTF::fastFree((WTF *)v20, a2);
    }
  }
  v8 = *(WTF ***)this;
  *(_QWORD *)this = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
    {
      WebCore::Font::~Font(v8);
      WTF::fastFree(v9, v10);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
}

uint64_t WebCore::executeJustifyCenter(uint64_t a1, uint64_t a2, int a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = WebCore::executeApplyParagraphStyle(a1, a3, 3u, (uint64_t)&v9);
  v7 = v9;
  v9 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  return v6;
}

uint64_t WebCore::supportedFromMenuOrKeyBinding(WebCore *this, WebCore::LocalFrame *a2)
{
  return 0;
}

BOOL WebCore::enabledInRichlyEditableText(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  void *v5;
  int v6;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064);
  if (!*(_BYTE *)(v1 + 153))
    return 0;
  v2 = v1 + 120;
  v3 = *(_QWORD *)(v1 + 120);
  if (!v3)
    return 0;
  v4 = *(_BYTE *)(v1 + 132) & 7;
  if (v4 > 4)
    return 0;
  if (((1 << v4) & 0x19) == 0)
  {
    v3 = *(_QWORD *)(v3 + 32);
    if (!v3)
      return 0;
  }
  *(_DWORD *)(v3 + 24) += 2;
  v6 = WebCore::Node::computeEditability(v3, 0, 1);
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, v5);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return v6 == 2 && WebCore::editableRootForPosition(v2, 0) != 0;
}

uint64_t WebCore::doNotAllowExecutionWhenDisabled()
{
  return 0;
}

uint64_t WebCore::executeJustifyFull(uint64_t a1, uint64_t a2, int a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = WebCore::executeApplyParagraphStyle(a1, a3, 0x14u, (uint64_t)&v9);
  v7 = v9;
  v9 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  return v6;
}

uint64_t WebCore::executeJustifyLeft(uint64_t a1, uint64_t a2, int a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = WebCore::executeApplyParagraphStyle(a1, a3, 0, (uint64_t)&v9);
  v7 = v9;
  v9 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  return v6;
}

uint64_t WebCore::executeJustifyRight(uint64_t a1, uint64_t a2, int a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = WebCore::executeApplyParagraphStyle(a1, a3, 1u, (uint64_t)&v9);
  v7 = v9;
  v9 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  return v6;
}

uint64_t WebCore::executeBackColor(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return WebCore::executeApplyStyle(a1, a3, 0x1Eu, 61, a4);
}

uint64_t WebCore::supported(WebCore *this, WebCore::LocalFrame *a2)
{
  return 1;
}

void WebCore::valueBackColor(WebCore *this@<X0>, WebCore *a2@<X8>)
{
  WebCore::Document *v6;
  uint64_t v7;
  WebCore::Editor *v8;
  void *v9;
  WebCore::Editor *v10;
  uint64_t v11;
  void *v12;
  WebCore *v13;

  v6 = (WebCore::Document *)*((_QWORD *)this + 37);
  v7 = *((_QWORD *)v6 + 382);
  if (!v7)
  {
    v13 = a2;
    v8 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v8, v6);
    v10 = (WebCore::Editor *)*((_QWORD *)v6 + 382);
    *((_QWORD *)v6 + 382) = v8;
    if (v10)
    {
      WebCore::Editor::~Editor(v10, v9);
      if (*(_DWORD *)v11)
      {
        *(_QWORD *)(v11 + 496) = 0;
        *(_OWORD *)(v11 + 464) = 0u;
        *(_OWORD *)(v11 + 480) = 0u;
        *(_OWORD *)(v11 + 432) = 0u;
        *(_OWORD *)(v11 + 448) = 0u;
        *(_OWORD *)(v11 + 400) = 0u;
        *(_OWORD *)(v11 + 416) = 0u;
        *(_OWORD *)(v11 + 368) = 0u;
        *(_OWORD *)(v11 + 384) = 0u;
        *(_OWORD *)(v11 + 336) = 0u;
        *(_OWORD *)(v11 + 352) = 0u;
        *(_OWORD *)(v11 + 304) = 0u;
        *(_OWORD *)(v11 + 320) = 0u;
        *(_OWORD *)(v11 + 272) = 0u;
        *(_OWORD *)(v11 + 288) = 0u;
        *(_OWORD *)(v11 + 240) = 0u;
        *(_OWORD *)(v11 + 256) = 0u;
        *(_OWORD *)(v11 + 208) = 0u;
        *(_OWORD *)(v11 + 224) = 0u;
        *(_OWORD *)(v11 + 176) = 0u;
        *(_OWORD *)(v11 + 192) = 0u;
        *(_OWORD *)(v11 + 144) = 0u;
        *(_OWORD *)(v11 + 160) = 0u;
        *(_OWORD *)(v11 + 112) = 0u;
        *(_OWORD *)(v11 + 128) = 0u;
        *(_OWORD *)(v11 + 80) = 0u;
        *(_OWORD *)(v11 + 96) = 0u;
        *(_OWORD *)(v11 + 48) = 0u;
        *(_OWORD *)(v11 + 64) = 0u;
        *(_OWORD *)(v11 + 16) = 0u;
        *(_OWORD *)(v11 + 32) = 0u;
        *(_OWORD *)v11 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v11, v12);
      }
    }
    v7 = *((_QWORD *)v6 + 382);
    a2 = v13;
  }
  WebCore::Editor::selectionStartCSSPropertyValue(a2, *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8), 61);
}

uint64_t WebCore::executeToggleBold(uint64_t a1, uint64_t a2, int a3)
{
  return WebCore::executeToggleStyle(a1, a3, 2u, 28, (uint64_t)"normal", 7, (uint64_t)"bold", 5);
}

uint64_t WebCore::stateBold(WebCore *this, WebCore::LocalFrame *a2, WebCore::Event *a3)
{
  return WebCore::stateStyle((uint64_t)this, 28, (uint64_t)"bold", 5);
}

uint64_t WebCore::executeClearText(uint64_t a1, void *a2)
{
  WebCore::Document *v2;
  uint64_t v3;
  WebCore::Node *v4;
  void *v5;
  WebCore::Node *v6;
  WebCore::Editor *v8;
  WebCore::Editor *v9;
  uint64_t v10;
  WebCore::Node *v11;

  v2 = *(WebCore::Document **)(a1 + 296);
  v3 = *((_QWORD *)v2 + 382);
  if (!v3)
  {
    v8 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v8, v2);
    v9 = (WebCore::Editor *)*((_QWORD *)v2 + 382);
    *((_QWORD *)v2 + 382) = v8;
    if (v9)
    {
      WebCore::Editor::~Editor(v9, a2);
      if (*(_DWORD *)v10)
      {
        *(_QWORD *)(v10 + 496) = 0;
        *(_OWORD *)(v10 + 464) = 0u;
        *(_OWORD *)(v10 + 480) = 0u;
        *(_OWORD *)(v10 + 432) = 0u;
        *(_OWORD *)(v10 + 448) = 0u;
        *(_OWORD *)(v10 + 400) = 0u;
        *(_OWORD *)(v10 + 416) = 0u;
        *(_OWORD *)(v10 + 368) = 0u;
        *(_OWORD *)(v10 + 384) = 0u;
        *(_OWORD *)(v10 + 336) = 0u;
        *(_OWORD *)(v10 + 352) = 0u;
        *(_OWORD *)(v10 + 304) = 0u;
        *(_OWORD *)(v10 + 320) = 0u;
        *(_OWORD *)(v10 + 272) = 0u;
        *(_OWORD *)(v10 + 288) = 0u;
        *(_OWORD *)(v10 + 240) = 0u;
        *(_OWORD *)(v10 + 256) = 0u;
        *(_OWORD *)(v10 + 208) = 0u;
        *(_OWORD *)(v10 + 224) = 0u;
        *(_OWORD *)(v10 + 176) = 0u;
        *(_OWORD *)(v10 + 192) = 0u;
        *(_OWORD *)(v10 + 144) = 0u;
        *(_OWORD *)(v10 + 160) = 0u;
        *(_OWORD *)(v10 + 112) = 0u;
        *(_OWORD *)(v10 + 128) = 0u;
        *(_OWORD *)(v10 + 80) = 0u;
        *(_OWORD *)(v10 + 96) = 0u;
        *(_OWORD *)(v10 + 48) = 0u;
        *(_OWORD *)(v10 + 64) = 0u;
        *(_OWORD *)(v10 + 16) = 0u;
        *(_OWORD *)(v10 + 32) = 0u;
        *(_OWORD *)v10 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v10, a2);
      }
    }
    v3 = *((_QWORD *)v2 + 382);
  }
  v4 = *(WebCore::Node **)(*(_QWORD *)(v3 + 16) + 8);
  *((_DWORD *)v4 + 6) += 2;
  v11 = v4;
  WebCore::ClearTextCommand::CreateAndApply((uint64_t *)&v11, a2);
  v6 = v11;
  v11 = 0;
  if (v6)
  {
    if (*((_DWORD *)v6 + 6) == 2)
    {
      if ((*((_WORD *)v6 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v6, v5);
    }
    else
    {
      *((_DWORD *)v6 + 6) -= 2;
    }
  }
  return 1;
}

uint64_t WebCore::enabledClearText()
{
  return 0;
}

uint64_t WebCore::allowExecutionWhenDisabled()
{
  return 1;
}

uint64_t WebCore::executeCopy(uint64_t a1, void *a2, int a3)
{
  WebCore::Document *v3;
  WebCore::Editor *v4;
  char v5;
  void *v6;
  WebCore::Editor *v8;
  WebCore::Editor *v9;
  uint64_t v10;
  int v11;

  v3 = *(WebCore::Document **)(a1 + 296);
  v4 = (WebCore::Editor *)*((_QWORD *)v3 + 382);
  if (!v4)
  {
    v11 = a3;
    v8 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v8, v3);
    v9 = (WebCore::Editor *)*((_QWORD *)v3 + 382);
    *((_QWORD *)v3 + 382) = v8;
    if (v9)
    {
      WebCore::Editor::~Editor(v9, a2);
      if (*(_DWORD *)v10)
      {
        *(_QWORD *)(v10 + 496) = 0;
        *(_OWORD *)(v10 + 464) = 0u;
        *(_OWORD *)(v10 + 480) = 0u;
        *(_OWORD *)(v10 + 432) = 0u;
        *(_OWORD *)(v10 + 448) = 0u;
        *(_OWORD *)(v10 + 400) = 0u;
        *(_OWORD *)(v10 + 416) = 0u;
        *(_OWORD *)(v10 + 368) = 0u;
        *(_OWORD *)(v10 + 384) = 0u;
        *(_OWORD *)(v10 + 336) = 0u;
        *(_OWORD *)(v10 + 352) = 0u;
        *(_OWORD *)(v10 + 304) = 0u;
        *(_OWORD *)(v10 + 320) = 0u;
        *(_OWORD *)(v10 + 272) = 0u;
        *(_OWORD *)(v10 + 288) = 0u;
        *(_OWORD *)(v10 + 240) = 0u;
        *(_OWORD *)(v10 + 256) = 0u;
        *(_OWORD *)(v10 + 208) = 0u;
        *(_OWORD *)(v10 + 224) = 0u;
        *(_OWORD *)(v10 + 176) = 0u;
        *(_OWORD *)(v10 + 192) = 0u;
        *(_OWORD *)(v10 + 144) = 0u;
        *(_OWORD *)(v10 + 160) = 0u;
        *(_OWORD *)(v10 + 112) = 0u;
        *(_OWORD *)(v10 + 128) = 0u;
        *(_OWORD *)(v10 + 80) = 0u;
        *(_OWORD *)(v10 + 96) = 0u;
        *(_OWORD *)(v10 + 48) = 0u;
        *(_OWORD *)(v10 + 64) = 0u;
        *(_OWORD *)(v10 + 16) = 0u;
        *(_OWORD *)(v10 + 32) = 0u;
        *(_OWORD *)v10 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v10, a2);
      }
    }
    v4 = (WebCore::Editor *)*((_QWORD *)v3 + 382);
    a3 = v11;
  }
  v5 = *((_BYTE *)v4 + 475);
  *((_BYTE *)v4 + 475) = a3 == 0;
  if ((WebCore::Editor::tryDHTMLCopy(v4, (const WebCore::Position *)a2) & 1) == 0)
  {
    if ((WebCore::Editor::canCopy(v4, v6) & 1) != 0)
    {
      WebCore::Editor::performCutOrCopy(v4, 1);
    }
    {
      if (WebCore::SystemSoundManager::singleton(void)::systemSoundManager)
        (*(void (**)(uint64_t))(*(_QWORD *)WebCore::SystemSoundManager::singleton(void)::systemSoundManager
                                        + 16))(WebCore::SystemSoundManager::singleton(void)::systemSoundManager);
    }
    else
    {
      WebCore::SystemSoundManager::singleton(void)::systemSoundManager = 0;
    }
  }
  *((_BYTE *)v4 + 475) = v5;
  return 1;
}

uint64_t WebCore::supportedCopyCut(WebCore::Document **this, WebCore::LocalFrame *a2)
{
  WebCore *v2;
  WebCore::Document *v3;
  unsigned int v4;
  uint64_t v5;
  WebCore::Document *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::Editor *v11;
  void *v12;
  WebCore::Editor *v13;
  uint64_t v14;
  void *v15;
  unsigned int v17;

  if (!this)
    return 0;
  v2 = (WebCore *)this;
  v3 = this[17];
  if ((*((_QWORD *)v3 + 85) & 0x80000000000) != 0)
  {
    v5 = 1;
  }
  else
  {
    v4 = *((_DWORD *)v3 + 80);
    v5 = v4 <= 2 && (v4 & 1) == 0;
  }
  v6 = this[37];
  v7 = *((_QWORD *)v6 + 382);
  if (!v7)
  {
    v17 = v5;
    v11 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v11, v6);
    v13 = (WebCore::Editor *)*((_QWORD *)v6 + 382);
    *((_QWORD *)v6 + 382) = v11;
    if (v13)
    {
      WebCore::Editor::~Editor(v13, v12);
      if (*(_DWORD *)v14)
      {
        *(_QWORD *)(v14 + 496) = 0;
        *(_OWORD *)(v14 + 464) = 0u;
        *(_OWORD *)(v14 + 480) = 0u;
        *(_OWORD *)(v14 + 432) = 0u;
        *(_OWORD *)(v14 + 448) = 0u;
        *(_OWORD *)(v14 + 400) = 0u;
        *(_OWORD *)(v14 + 416) = 0u;
        *(_OWORD *)(v14 + 368) = 0u;
        *(_OWORD *)(v14 + 384) = 0u;
        *(_OWORD *)(v14 + 336) = 0u;
        *(_OWORD *)(v14 + 352) = 0u;
        *(_OWORD *)(v14 + 304) = 0u;
        *(_OWORD *)(v14 + 320) = 0u;
        *(_OWORD *)(v14 + 272) = 0u;
        *(_OWORD *)(v14 + 288) = 0u;
        *(_OWORD *)(v14 + 240) = 0u;
        *(_OWORD *)(v14 + 256) = 0u;
        *(_OWORD *)(v14 + 208) = 0u;
        *(_OWORD *)(v14 + 224) = 0u;
        *(_OWORD *)(v14 + 176) = 0u;
        *(_OWORD *)(v14 + 192) = 0u;
        *(_OWORD *)(v14 + 144) = 0u;
        *(_OWORD *)(v14 + 160) = 0u;
        *(_OWORD *)(v14 + 112) = 0u;
        *(_OWORD *)(v14 + 128) = 0u;
        *(_OWORD *)(v14 + 80) = 0u;
        *(_OWORD *)(v14 + 96) = 0u;
        *(_OWORD *)(v14 + 48) = 0u;
        *(_OWORD *)(v14 + 64) = 0u;
        *(_OWORD *)(v14 + 16) = 0u;
        *(_OWORD *)(v14 + 32) = 0u;
        *(_OWORD *)v14 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v14, v15);
      }
    }
    v7 = *((_QWORD *)v6 + 382);
    v2 = (WebCore *)this;
    v5 = v17;
  }
  v8 = *(_QWORD *)(v7 + 8);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
      return (*(uint64_t (**)(uint64_t, WebCore *, uint64_t))(*(_QWORD *)v9 + 384))(v9, v2, v5);
  }
  return v5;
}

uint64_t WebCore::enabledCopy(WTF *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v5 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v5 = off_1E33ACC10;
  v8 = v5;
  v6 = WebCore::enabledCopy(a1, a3, &v8);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return v6;
}

BOOL WebCore::allowExecutionWhenDisabledCopyCut(uint64_t a1, unsigned int a2)
{
  return (a2 & 7) == 0 && a2 < 3;
}

uint64_t WebCore::executeCopyFont(uint64_t a1, void *a2, int a3)
{
  WebCore::Document *v4;
  uint64_t v5;
  char v6;
  const WebCore::Position *v7;
  _BYTE *v8;
  WebCore::Node *v9;
  void *v10;
  int v11;
  int v12;
  WebCore::Node *v13;
  void *v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  unsigned int v18;
  void *v19;
  int v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::Node *v24;
  WebCore::Node *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(void);
  WebCore::Editor *v29;
  WebCore::Editor *v30;
  uint64_t v31;
  WebCore::Node *v33[2];
  WebCore::Node *v34;
  char v35;

  v4 = *(WebCore::Document **)(a1 + 296);
  v5 = *((_QWORD *)v4 + 382);
  if (!v5)
  {
    v29 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v29, v4);
    v30 = (WebCore::Editor *)*((_QWORD *)v4 + 382);
    *((_QWORD *)v4 + 382) = v29;
    if (v30)
    {
      WebCore::Editor::~Editor(v30, a2);
      if (*(_DWORD *)v31)
      {
        *(_QWORD *)(v31 + 496) = 0;
        *(_OWORD *)(v31 + 464) = 0u;
        *(_OWORD *)(v31 + 480) = 0u;
        *(_OWORD *)(v31 + 432) = 0u;
        *(_OWORD *)(v31 + 448) = 0u;
        *(_OWORD *)(v31 + 400) = 0u;
        *(_OWORD *)(v31 + 416) = 0u;
        *(_OWORD *)(v31 + 368) = 0u;
        *(_OWORD *)(v31 + 384) = 0u;
        *(_OWORD *)(v31 + 336) = 0u;
        *(_OWORD *)(v31 + 352) = 0u;
        *(_OWORD *)(v31 + 304) = 0u;
        *(_OWORD *)(v31 + 320) = 0u;
        *(_OWORD *)(v31 + 272) = 0u;
        *(_OWORD *)(v31 + 288) = 0u;
        *(_OWORD *)(v31 + 240) = 0u;
        *(_OWORD *)(v31 + 256) = 0u;
        *(_OWORD *)(v31 + 208) = 0u;
        *(_OWORD *)(v31 + 224) = 0u;
        *(_OWORD *)(v31 + 176) = 0u;
        *(_OWORD *)(v31 + 192) = 0u;
        *(_OWORD *)(v31 + 144) = 0u;
        *(_OWORD *)(v31 + 160) = 0u;
        *(_OWORD *)(v31 + 112) = 0u;
        *(_OWORD *)(v31 + 128) = 0u;
        *(_OWORD *)(v31 + 80) = 0u;
        *(_OWORD *)(v31 + 96) = 0u;
        *(_OWORD *)(v31 + 48) = 0u;
        *(_OWORD *)(v31 + 64) = 0u;
        *(_OWORD *)(v31 + 16) = 0u;
        *(_OWORD *)(v31 + 32) = 0u;
        *(_OWORD *)v31 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v31, a2);
      }
    }
    v5 = *((_QWORD *)v4 + 382);
  }
  v6 = *(_BYTE *)(v5 + 475);
  *(_BYTE *)(v5 + 475) = a3 == 0;
  if ((WebCore::Editor::tryDHTMLCopy((WebCore::Editor *)v5, (const WebCore::Position *)a2) & 1) == 0)
  {
    v8 = *(_BYTE **)(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 8) + 3064);
    if (!v8[153])
      goto LABEL_49;
    v9 = WebCore::enclosingTextFormControl((WebCore *)(v8 + 120), v7);
    if (v9 && *(_QWORD *)(*((_QWORD *)v9 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    {
      v11 = *((_DWORD *)v9 + 6);
      *((_DWORD *)v9 + 6) = v11 + 2;
      v12 = *(_DWORD *)(*((_QWORD *)v9 + 30) + 12);
      if (v11)
      {
        *((_DWORD *)v9 + 6) = v11;
      }
      else if ((*((_WORD *)v9 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v9, v10);
      }
      if (v12 == 2048)
      {
        v13 = WebCore::enclosingTextFormControl((WebCore *)(v8 + 120), (const WebCore::Position *)v10);
        if (!v13 || *(_QWORD *)(*((_QWORD *)v13 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
          goto LABEL_49;
        v15 = *((_DWORD *)v13 + 6);
        *((_DWORD *)v13 + 6) = v15 + 2;
        v16 = *((_WORD *)v13 + 115);
        if (v15)
        {
          *((_DWORD *)v13 + 6) = v15;
        }
        else if ((*((_WORD *)v13 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v13, v14);
        }
        if ((v16 & 0x200) == 0)
          goto LABEL_49;
      }
    }
    if (v8[153] == 2)
      goto LABEL_21;
    v17 = *((_QWORD *)v8 + 15);
    if (!v17)
      goto LABEL_49;
    v18 = v8[132] & 7;
    if (v18 > 4)
      goto LABEL_49;
    if (((1 << v18) & 0x19) == 0)
    {
      v17 = *(_QWORD *)(v17 + 32);
      if (!v17)
        goto LABEL_49;
    }
    *(_DWORD *)(v17 + 24) += 2;
    v20 = WebCore::Node::computeEditability(v17, 0, 0);
    if (*(_DWORD *)(v17 + 24) == 2)
    {
      if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v17, v19);
    }
    else
    {
      *(_DWORD *)(v17 + 24) -= 2;
    }
    if (v20)
    {
LABEL_21:
      WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 8) + 3064) + 56), v33);
      v22 = *(_QWORD *)(v5 + 8);
      if (v22)
      {
        v23 = *(_QWORD *)(v22 + 8);
        if (v23)
          (*(void (**)(uint64_t, WebCore::Node **))(*(_QWORD *)v23 + 288))(v23, v33);
      }
      if (v35)
      {
        v24 = v34;
        v34 = 0;
        if (v24)
        {
          if (*((_DWORD *)v24 + 6) == 2)
          {
            if ((*((_WORD *)v24 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v24, v21);
          }
          else
          {
            *((_DWORD *)v24 + 6) -= 2;
          }
        }
        v25 = v33[0];
        v33[0] = 0;
        if (v25)
        {
          if (*((_DWORD *)v25 + 6) == 2)
          {
            if ((*((_WORD *)v25 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v25, v21);
          }
          else
          {
            *((_DWORD *)v25 + 6) -= 2;
          }
        }
      }
      v26 = *(_QWORD *)(v5 + 8);
      if (v26)
      {
        v27 = *(_QWORD *)(v26 + 8);
        if (v27)
        {
          v28 = *(void (**)(void))(*(_QWORD *)v27 + 296);
LABEL_52:
          v28();
        }
      }
    }
    else
    {
LABEL_49:
      {
        WebCore::SystemSoundManager::singleton(void)::systemSoundManager = 0;
        goto LABEL_53;
      }
      if (WebCore::SystemSoundManager::singleton(void)::systemSoundManager)
      {
        v28 = *(void (**)(void))(*(_QWORD *)WebCore::SystemSoundManager::singleton(void)::systemSoundManager + 16);
        goto LABEL_52;
      }
    }
  }
LABEL_53:
  *(_BYTE *)(v5 + 475) = v6;
  return 1;
}

uint64_t WebCore::enabledCopyFont(WTF *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v5 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v5 = off_1E33ACC38;
  v8 = v5;
  v6 = WebCore::enabledCopy(a1, a3, &v8);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return v6;
}

uint64_t WebCore::executeCreateLink(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  WebCore::Node *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  void *v10;
  WebCore::Node *v11;
  WebCore::Node *v12;

  if (!*(_QWORD *)a4 || !*(_DWORD *)(*(_QWORD *)a4 + 4))
    return 0;
  v6 = *(WebCore::Node **)(a1 + 296);
  *((_DWORD *)v6 + 6) += 2;
  v12 = v6;
  v7 = WTF::fastMalloc((WTF *)0x120);
  v8 = WebCore::EditCommand::EditCommand(v7, (uint64_t *)&v12, 59);
  *(_OWORD *)(v8 + 248) = 0u;
  *(_OWORD *)(v8 + 264) = 0u;
  *(_QWORD *)v8 = off_1E33A9BF8;
  v9 = *(_DWORD **)a4;
  if (*(_QWORD *)a4)
    *v9 += 2;
  *(_QWORD *)(v7 + 280) = v9;
  WebCore::CompositeEditCommand::apply((WebCore::CompositeEditCommand *)v7);
  if (*(_DWORD *)(v7 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  else
    --*(_DWORD *)(v7 + 8);
  v11 = v12;
  v12 = 0;
  if (v11)
  {
    if (*((_DWORD *)v11 + 6) == 2)
    {
      if ((*((_WORD *)v11 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v11, v10);
    }
    else
    {
      *((_DWORD *)v11 + 6) -= 2;
    }
  }
  return 1;
}

uint64_t WebCore::executeCut(WebCore::LocalFrame *a1, void *a2, int a3)
{
  WebCore::Document *v4;
  uint64_t v5;
  char v6;
  void *v7;
  uint64_t v8;
  void *v9;
  WebCore::Document *v10;
  uint64_t v11;
  char v12;
  void *v13;
  uint64_t v14;
  WebCore::Node *v15;
  uint64_t v16;
  WebCore::Editor *v18;
  WebCore::Editor *v19;
  uint64_t v20;
  WebCore::Document *v21;
  WebCore::Editor *v22;
  WebCore::Editor *v23;
  uint64_t v24;
  char v25[8];
  WebCore::Node *v26;

  if (a3)
  {
    v4 = (WebCore::Document *)*((_QWORD *)a1 + 37);
    v5 = *((_QWORD *)v4 + 382);
    if (!v5)
    {
      v18 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v18, v4);
      v19 = (WebCore::Editor *)*((_QWORD *)v4 + 382);
      *((_QWORD *)v4 + 382) = v18;
      if (v19)
      {
        WebCore::Editor::~Editor(v19, a2);
        if (*(_DWORD *)v20)
        {
          *(_QWORD *)(v20 + 496) = 0;
          *(_OWORD *)(v20 + 464) = 0u;
          *(_OWORD *)(v20 + 480) = 0u;
          *(_OWORD *)(v20 + 432) = 0u;
          *(_OWORD *)(v20 + 448) = 0u;
          *(_OWORD *)(v20 + 400) = 0u;
          *(_OWORD *)(v20 + 416) = 0u;
          *(_OWORD *)(v20 + 368) = 0u;
          *(_OWORD *)(v20 + 384) = 0u;
          *(_OWORD *)(v20 + 336) = 0u;
          *(_OWORD *)(v20 + 352) = 0u;
          *(_OWORD *)(v20 + 304) = 0u;
          *(_OWORD *)(v20 + 320) = 0u;
          *(_OWORD *)(v20 + 272) = 0u;
          *(_OWORD *)(v20 + 288) = 0u;
          *(_OWORD *)(v20 + 240) = 0u;
          *(_OWORD *)(v20 + 256) = 0u;
          *(_OWORD *)(v20 + 208) = 0u;
          *(_OWORD *)(v20 + 224) = 0u;
          *(_OWORD *)(v20 + 176) = 0u;
          *(_OWORD *)(v20 + 192) = 0u;
          *(_OWORD *)(v20 + 144) = 0u;
          *(_OWORD *)(v20 + 160) = 0u;
          *(_OWORD *)(v20 + 112) = 0u;
          *(_OWORD *)(v20 + 128) = 0u;
          *(_OWORD *)(v20 + 80) = 0u;
          *(_OWORD *)(v20 + 96) = 0u;
          *(_OWORD *)(v20 + 48) = 0u;
          *(_OWORD *)(v20 + 64) = 0u;
          *(_OWORD *)(v20 + 16) = 0u;
          *(_OWORD *)(v20 + 32) = 0u;
          *(_OWORD *)v20 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v20, a2);
        }
      }
      v5 = *((_QWORD *)v4 + 382);
    }
    v6 = *(_BYTE *)(v5 + 475);
    *(_BYTE *)(v5 + 475) = 0;
    if ((WebCore::Editor::tryDHTMLCut((WebCore::Editor *)v5, (const WebCore::Position *)a2) & 1) == 0)
    {
      if (WebCore::Editor::canCopy((WebCore::Editor *)v5, v7)
        && (v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 8) + 3064), *(_BYTE *)(v8 + 153) == 2)
        && WebCore::editableRootForPosition(v8 + 120, 0))
      {
        WebCore::Editor::performCutOrCopy((WebCore::Editor *)v5, 0);
      }
      {
        if (WebCore::SystemSoundManager::singleton(void)::systemSoundManager)
          (*(void (**)(uint64_t))(*(_QWORD *)WebCore::SystemSoundManager::singleton(void)::systemSoundManager
                                          + 16))(WebCore::SystemSoundManager::singleton(void)::systemSoundManager);
      }
      else
      {
        WebCore::SystemSoundManager::singleton(void)::systemSoundManager = 0;
      }
    }
    *(_BYTE *)(v5 + 475) = v6;
  }
  else
  {
    WebCore::UserTypingGestureIndicator::UserTypingGestureIndicator((WebCore::UserTypingGestureIndicator *)v25, a1);
    v10 = (WebCore::Document *)*((_QWORD *)a1 + 37);
    v11 = *((_QWORD *)v10 + 382);
    if (!v11)
    {
      v21 = v10;
      v22 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v22, v21);
      v23 = (WebCore::Editor *)*((_QWORD *)v21 + 382);
      *((_QWORD *)v21 + 382) = v22;
      if (v23)
      {
        WebCore::Editor::~Editor(v23, v9);
        if (*(_DWORD *)v24)
        {
          *(_QWORD *)(v24 + 496) = 0;
          *(_OWORD *)(v24 + 464) = 0u;
          *(_OWORD *)(v24 + 480) = 0u;
          *(_OWORD *)(v24 + 432) = 0u;
          *(_OWORD *)(v24 + 448) = 0u;
          *(_OWORD *)(v24 + 400) = 0u;
          *(_OWORD *)(v24 + 416) = 0u;
          *(_OWORD *)(v24 + 368) = 0u;
          *(_OWORD *)(v24 + 384) = 0u;
          *(_OWORD *)(v24 + 336) = 0u;
          *(_OWORD *)(v24 + 352) = 0u;
          *(_OWORD *)(v24 + 304) = 0u;
          *(_OWORD *)(v24 + 320) = 0u;
          *(_OWORD *)(v24 + 272) = 0u;
          *(_OWORD *)(v24 + 288) = 0u;
          *(_OWORD *)(v24 + 240) = 0u;
          *(_OWORD *)(v24 + 256) = 0u;
          *(_OWORD *)(v24 + 208) = 0u;
          *(_OWORD *)(v24 + 224) = 0u;
          *(_OWORD *)(v24 + 176) = 0u;
          *(_OWORD *)(v24 + 192) = 0u;
          *(_OWORD *)(v24 + 144) = 0u;
          *(_OWORD *)(v24 + 160) = 0u;
          *(_OWORD *)(v24 + 112) = 0u;
          *(_OWORD *)(v24 + 128) = 0u;
          *(_OWORD *)(v24 + 80) = 0u;
          *(_OWORD *)(v24 + 96) = 0u;
          *(_OWORD *)(v24 + 48) = 0u;
          *(_OWORD *)(v24 + 64) = 0u;
          *(_OWORD *)(v24 + 16) = 0u;
          *(_OWORD *)(v24 + 32) = 0u;
          *(_OWORD *)v24 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v24, v9);
        }
      }
      v11 = *((_QWORD *)v21 + 382);
    }
    v12 = *(_BYTE *)(v11 + 475);
    *(_BYTE *)(v11 + 475) = 1;
    if ((WebCore::Editor::tryDHTMLCut((WebCore::Editor *)v11, (const WebCore::Position *)v9) & 1) == 0)
    {
      if (WebCore::Editor::canCopy((WebCore::Editor *)v11, v13)
        && (v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 8) + 3064), *(_BYTE *)(v14 + 153) == 2)
        && WebCore::editableRootForPosition(v14 + 120, 0))
      {
        WebCore::Editor::performCutOrCopy((WebCore::Editor *)v11, 0);
      }
      {
        if (WebCore::SystemSoundManager::singleton(void)::systemSoundManager)
          (*(void (**)(uint64_t))(*(_QWORD *)WebCore::SystemSoundManager::singleton(void)::systemSoundManager
                                          + 16))(WebCore::SystemSoundManager::singleton(void)::systemSoundManager);
      }
      else
      {
        WebCore::SystemSoundManager::singleton(void)::systemSoundManager = 0;
      }
    }
    *(_BYTE *)(v11 + 475) = v12;
    WebCore::s_processingUserTypingGesture = v25[0];
    {
      WebCore::focusedNode(void)::node = 0;
    }
    v15 = v26;
    if (v26)
      *((_DWORD *)v26 + 6) += 2;
    v16 = WebCore::focusedNode(void)::node;
    WebCore::focusedNode(void)::node = (uint64_t)v15;
    if (v16)
    {
      if (*(_DWORD *)(v16 + 24) == 2)
      {
        if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v16, v13);
          v15 = v26;
        }
      }
      else
      {
        *(_DWORD *)(v16 + 24) -= 2;
      }
    }
    v26 = 0;
    if (v15)
    {
      if (*((_DWORD *)v15 + 6) == 2)
      {
        if ((*((_WORD *)v15 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v15, v13);
      }
      else
      {
        *((_DWORD *)v15 + 6) -= 2;
      }
    }
  }
  return 1;
}

uint64_t WebCore::enabledCut(WTF *a1, void *a2, int a3)
{
  uint64_t v4;
  int v5;
  uint64_t result;
  WebCore::Document *v7;
  WebCore::Editor *v8;
  void *v9;
  WebCore::Document *v10;
  WebCore::Editor *v11;
  uint64_t v12;
  WebCore::Editor *v13;
  WebCore::Editor *v14;
  uint64_t v15;
  WebCore::Editor *v16;
  WebCore::Editor *v17;
  uint64_t v18;

  if ((a3 - 1) >= 2)
  {
    if (a3)
      return 0;
  }
  else
  {
    v4 = *((_QWORD *)a1 + 17);
    if ((*(_QWORD *)(v4 + 680) & 0x80000000000) == 0)
    {
      v5 = *(_DWORD *)(v4 + 320);
      if (v5)
      {
        if (v5 != 2)
          return 0;
        result = WTF::isMainThread(a1);
        if (!(_DWORD)result)
          return result;
        {
          result = 0;
          WebCore::currentToken(void)::token = 0;
          return result;
        }
        if (!WebCore::currentToken(void)::token
          || *(_DWORD *)(WebCore::currentToken(void)::token + 68)
          || *(_BYTE *)(WebCore::currentToken(void)::token + 16) != 1)
        {
          return 0;
        }
      }
    }
  }
  v7 = (WebCore::Document *)*((_QWORD *)a1 + 37);
  v8 = (WebCore::Editor *)*((_QWORD *)v7 + 382);
  if (!v8)
  {
    v13 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v13, v7);
    v14 = (WebCore::Editor *)*((_QWORD *)v7 + 382);
    *((_QWORD *)v7 + 382) = v13;
    if (v14)
    {
      WebCore::Editor::~Editor(v14, a2);
      if (*(_DWORD *)v15)
      {
        *(_QWORD *)(v15 + 496) = 0;
        *(_OWORD *)(v15 + 464) = 0u;
        *(_OWORD *)(v15 + 480) = 0u;
        *(_OWORD *)(v15 + 432) = 0u;
        *(_OWORD *)(v15 + 448) = 0u;
        *(_OWORD *)(v15 + 400) = 0u;
        *(_OWORD *)(v15 + 416) = 0u;
        *(_OWORD *)(v15 + 368) = 0u;
        *(_OWORD *)(v15 + 384) = 0u;
        *(_OWORD *)(v15 + 336) = 0u;
        *(_OWORD *)(v15 + 352) = 0u;
        *(_OWORD *)(v15 + 304) = 0u;
        *(_OWORD *)(v15 + 320) = 0u;
        *(_OWORD *)(v15 + 272) = 0u;
        *(_OWORD *)(v15 + 288) = 0u;
        *(_OWORD *)(v15 + 240) = 0u;
        *(_OWORD *)(v15 + 256) = 0u;
        *(_OWORD *)(v15 + 208) = 0u;
        *(_OWORD *)(v15 + 224) = 0u;
        *(_OWORD *)(v15 + 176) = 0u;
        *(_OWORD *)(v15 + 192) = 0u;
        *(_OWORD *)(v15 + 144) = 0u;
        *(_OWORD *)(v15 + 160) = 0u;
        *(_OWORD *)(v15 + 112) = 0u;
        *(_OWORD *)(v15 + 128) = 0u;
        *(_OWORD *)(v15 + 80) = 0u;
        *(_OWORD *)(v15 + 96) = 0u;
        *(_OWORD *)(v15 + 48) = 0u;
        *(_OWORD *)(v15 + 64) = 0u;
        *(_OWORD *)(v15 + 16) = 0u;
        *(_OWORD *)(v15 + 32) = 0u;
        *(_OWORD *)v15 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v15, a2);
      }
    }
    v8 = (WebCore::Editor *)*((_QWORD *)v7 + 382);
  }
  if ((WebCore::Editor::canDHTMLCut(v8, (const WebCore::Position *)a2) & 1) != 0)
    return 1;
  v10 = (WebCore::Document *)*((_QWORD *)a1 + 37);
  v11 = (WebCore::Editor *)*((_QWORD *)v10 + 382);
  if (!v11)
  {
    v16 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v16, v10);
    v17 = (WebCore::Editor *)*((_QWORD *)v10 + 382);
    *((_QWORD *)v10 + 382) = v16;
    if (v17)
    {
      WebCore::Editor::~Editor(v17, v9);
      if (*(_DWORD *)v18)
      {
        *(_QWORD *)(v18 + 496) = 0;
        *(_OWORD *)(v18 + 464) = 0u;
        *(_OWORD *)(v18 + 480) = 0u;
        *(_OWORD *)(v18 + 432) = 0u;
        *(_OWORD *)(v18 + 448) = 0u;
        *(_OWORD *)(v18 + 400) = 0u;
        *(_OWORD *)(v18 + 416) = 0u;
        *(_OWORD *)(v18 + 368) = 0u;
        *(_OWORD *)(v18 + 384) = 0u;
        *(_OWORD *)(v18 + 336) = 0u;
        *(_OWORD *)(v18 + 352) = 0u;
        *(_OWORD *)(v18 + 304) = 0u;
        *(_OWORD *)(v18 + 320) = 0u;
        *(_OWORD *)(v18 + 272) = 0u;
        *(_OWORD *)(v18 + 288) = 0u;
        *(_OWORD *)(v18 + 240) = 0u;
        *(_OWORD *)(v18 + 256) = 0u;
        *(_OWORD *)(v18 + 208) = 0u;
        *(_OWORD *)(v18 + 224) = 0u;
        *(_OWORD *)(v18 + 176) = 0u;
        *(_OWORD *)(v18 + 192) = 0u;
        *(_OWORD *)(v18 + 144) = 0u;
        *(_OWORD *)(v18 + 160) = 0u;
        *(_OWORD *)(v18 + 112) = 0u;
        *(_OWORD *)(v18 + 128) = 0u;
        *(_OWORD *)(v18 + 80) = 0u;
        *(_OWORD *)(v18 + 96) = 0u;
        *(_OWORD *)(v18 + 48) = 0u;
        *(_OWORD *)(v18 + 64) = 0u;
        *(_OWORD *)(v18 + 16) = 0u;
        *(_OWORD *)(v18 + 32) = 0u;
        *(_OWORD *)v18 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v18, v9);
      }
    }
    v11 = (WebCore::Editor *)*((_QWORD *)v10 + 382);
  }
  result = WebCore::Editor::canCopy(v11, v9);
  if ((_DWORD)result)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v11 + 2) + 8) + 3064);
    if (*(_BYTE *)(v12 + 153) == 2)
      return WebCore::editableRootForPosition(v12 + 120, 0) != 0;
    return 0;
  }
  return result;
}

uint64_t WebCore::executeDefaultParagraphSeparator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  int v6;
  unsigned __int8 *v7;
  int v8;
  char v9;
  uint64_t v10;
  int v11;
  WebCore::Document *v12;
  uint64_t v13;
  WebCore::Editor *v14;
  void *v15;
  WebCore::Editor *v16;
  uint64_t v17;
  void *v18;
  char v19;

  v4 = *a4;
  if (!*a4)
    return 1;
  v6 = *(_DWORD *)(v4 + 4);
  if (v6 == 3)
  {
    v10 = *(_QWORD *)(v4 + 8);
    if ((*(_BYTE *)(v4 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v10 & 0xDF) != 0x44 || (*(_BYTE *)(v10 + 1) & 0xDF) != 0x49)
        return 1;
      v11 = *(unsigned __int8 *)(v10 + 2);
    }
    else
    {
      if ((*(_WORD *)v10 & 0xFFDF) != 0x44 || (*(_WORD *)(v10 + 2) & 0xFFDF) != 0x49)
        return 1;
      v11 = *(unsigned __int16 *)(v10 + 4);
    }
    if ((v11 & 0xFFFFFFDF) != 0x56)
      return 1;
    v9 = 0;
  }
  else
  {
    if (v6 != 1)
      return 1;
    v7 = *(unsigned __int8 **)(v4 + 8);
    v8 = (*(_BYTE *)(v4 + 16) & 4) != 0 ? *v7 : *(unsigned __int16 *)v7;
    if ((v8 & 0xFFFFFFDF) != 0x50)
      return 1;
    v9 = 1;
  }
  v12 = *(WebCore::Document **)(a1 + 296);
  v13 = *((_QWORD *)v12 + 382);
  if (!v13)
  {
    v19 = v9;
    v14 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v14, v12);
    v16 = (WebCore::Editor *)*((_QWORD *)v12 + 382);
    *((_QWORD *)v12 + 382) = v14;
    if (v16)
    {
      WebCore::Editor::~Editor(v16, v15);
      if (*(_DWORD *)v17)
      {
        *(_QWORD *)(v17 + 496) = 0;
        *(_OWORD *)(v17 + 464) = 0u;
        *(_OWORD *)(v17 + 480) = 0u;
        *(_OWORD *)(v17 + 432) = 0u;
        *(_OWORD *)(v17 + 448) = 0u;
        *(_OWORD *)(v17 + 400) = 0u;
        *(_OWORD *)(v17 + 416) = 0u;
        *(_OWORD *)(v17 + 368) = 0u;
        *(_OWORD *)(v17 + 384) = 0u;
        *(_OWORD *)(v17 + 336) = 0u;
        *(_OWORD *)(v17 + 352) = 0u;
        *(_OWORD *)(v17 + 304) = 0u;
        *(_OWORD *)(v17 + 320) = 0u;
        *(_OWORD *)(v17 + 272) = 0u;
        *(_OWORD *)(v17 + 288) = 0u;
        *(_OWORD *)(v17 + 240) = 0u;
        *(_OWORD *)(v17 + 256) = 0u;
        *(_OWORD *)(v17 + 208) = 0u;
        *(_OWORD *)(v17 + 224) = 0u;
        *(_OWORD *)(v17 + 176) = 0u;
        *(_OWORD *)(v17 + 192) = 0u;
        *(_OWORD *)(v17 + 144) = 0u;
        *(_OWORD *)(v17 + 160) = 0u;
        *(_OWORD *)(v17 + 112) = 0u;
        *(_OWORD *)(v17 + 128) = 0u;
        *(_OWORD *)(v17 + 80) = 0u;
        *(_OWORD *)(v17 + 96) = 0u;
        *(_OWORD *)(v17 + 48) = 0u;
        *(_OWORD *)(v17 + 64) = 0u;
        *(_OWORD *)(v17 + 16) = 0u;
        *(_OWORD *)(v17 + 32) = 0u;
        *(_OWORD *)v17 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v17, v18);
      }
    }
    v13 = *((_QWORD *)v12 + 382);
    v9 = v19;
  }
  *(_BYTE *)(v13 + 120) = v9;
  return 1;
}

uint64_t WebCore::enabled()
{
  return 1;
}

void WebCore::valueDefaultParagraphSeparator(WebCore *this@<X0>, _QWORD *a2@<X8>)
{
  WebCore::Document *v4;
  uint64_t v5;
  uint64_t *v6;
  _DWORD *v7;
  WebCore::Editor *v8;
  void *v9;
  WebCore::Editor *v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;

  v4 = (WebCore::Document *)*((_QWORD *)this + 37);
  v5 = *((_QWORD *)v4 + 382);
  if (!v5)
  {
    v13 = a2;
    v8 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v8, v4);
    v10 = (WebCore::Editor *)*((_QWORD *)v4 + 382);
    *((_QWORD *)v4 + 382) = v8;
    if (v10)
    {
      WebCore::Editor::~Editor(v10, v9);
      if (*(_DWORD *)v11)
      {
        *(_QWORD *)(v11 + 496) = 0;
        *(_OWORD *)(v11 + 464) = 0u;
        *(_OWORD *)(v11 + 480) = 0u;
        *(_OWORD *)(v11 + 432) = 0u;
        *(_OWORD *)(v11 + 448) = 0u;
        *(_OWORD *)(v11 + 400) = 0u;
        *(_OWORD *)(v11 + 416) = 0u;
        *(_OWORD *)(v11 + 368) = 0u;
        *(_OWORD *)(v11 + 384) = 0u;
        *(_OWORD *)(v11 + 336) = 0u;
        *(_OWORD *)(v11 + 352) = 0u;
        *(_OWORD *)(v11 + 304) = 0u;
        *(_OWORD *)(v11 + 320) = 0u;
        *(_OWORD *)(v11 + 272) = 0u;
        *(_OWORD *)(v11 + 288) = 0u;
        *(_OWORD *)(v11 + 240) = 0u;
        *(_OWORD *)(v11 + 256) = 0u;
        *(_OWORD *)(v11 + 208) = 0u;
        *(_OWORD *)(v11 + 224) = 0u;
        *(_OWORD *)(v11 + 176) = 0u;
        *(_OWORD *)(v11 + 192) = 0u;
        *(_OWORD *)(v11 + 144) = 0u;
        *(_OWORD *)(v11 + 160) = 0u;
        *(_OWORD *)(v11 + 112) = 0u;
        *(_OWORD *)(v11 + 128) = 0u;
        *(_OWORD *)(v11 + 80) = 0u;
        *(_OWORD *)(v11 + 96) = 0u;
        *(_OWORD *)(v11 + 48) = 0u;
        *(_OWORD *)(v11 + 64) = 0u;
        *(_OWORD *)(v11 + 16) = 0u;
        *(_OWORD *)(v11 + 32) = 0u;
        *(_OWORD *)v11 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v11, v12);
      }
    }
    v5 = *((_QWORD *)v4 + 382);
    a2 = v13;
  }
  if (*(_BYTE *)(v5 + 120))
    v6 = &WebCore::HTMLNames::pTag;
  else
    v6 = &WebCore::HTMLNames::divTag;
  v7 = *(_DWORD **)(*v6 + 24);
  if (v7)
    *v7 += 2;
  *a2 = v7;
}

uint64_t WebCore::executeDelete(WebCore::LocalFrame *a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  WebCore::Document *v8;
  uint64_t v9;
  void *v10;
  WebCore::Node *v11;
  uint64_t v12;
  WebCore::Editor *v14;
  void *v15;
  WebCore::Editor *v16;
  uint64_t v17;
  void *v18;
  WebCore::Editor *v19;
  void *v20;
  WebCore::Editor *v21;
  uint64_t v22;
  void *v23;
  WebCore::Node *v24;
  WebCore::Node *v25;

  if ((a3 - 1) < 2)
  {
    v4 = *((_QWORD *)a1 + 37);
    *(_DWORD *)(v4 + 24) += 2;
    v24 = (WebCore::Node *)v4;
    v5 = *(_QWORD *)(v4 + 3056);
    if (!v5)
    {
      v14 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v14, (WebCore::Document *)v4);
      v16 = *(WebCore::Editor **)(v4 + 3056);
      *(_QWORD *)(v4 + 3056) = v14;
      if (v16)
      {
        WebCore::Editor::~Editor(v16, v15);
        if (*(_DWORD *)v17)
        {
          *(_QWORD *)(v17 + 496) = 0;
          *(_OWORD *)(v17 + 464) = 0u;
          *(_OWORD *)(v17 + 480) = 0u;
          *(_OWORD *)(v17 + 432) = 0u;
          *(_OWORD *)(v17 + 448) = 0u;
          *(_OWORD *)(v17 + 400) = 0u;
          *(_OWORD *)(v17 + 416) = 0u;
          *(_OWORD *)(v17 + 368) = 0u;
          *(_OWORD *)(v17 + 384) = 0u;
          *(_OWORD *)(v17 + 336) = 0u;
          *(_OWORD *)(v17 + 352) = 0u;
          *(_OWORD *)(v17 + 304) = 0u;
          *(_OWORD *)(v17 + 320) = 0u;
          *(_OWORD *)(v17 + 272) = 0u;
          *(_OWORD *)(v17 + 288) = 0u;
          *(_OWORD *)(v17 + 240) = 0u;
          *(_OWORD *)(v17 + 256) = 0u;
          *(_OWORD *)(v17 + 208) = 0u;
          *(_OWORD *)(v17 + 224) = 0u;
          *(_OWORD *)(v17 + 176) = 0u;
          *(_OWORD *)(v17 + 192) = 0u;
          *(_OWORD *)(v17 + 144) = 0u;
          *(_OWORD *)(v17 + 160) = 0u;
          *(_OWORD *)(v17 + 112) = 0u;
          *(_OWORD *)(v17 + 128) = 0u;
          *(_OWORD *)(v17 + 80) = 0u;
          *(_OWORD *)(v17 + 96) = 0u;
          *(_OWORD *)(v17 + 48) = 0u;
          *(_OWORD *)(v17 + 64) = 0u;
          *(_OWORD *)(v17 + 16) = 0u;
          *(_OWORD *)(v17 + 32) = 0u;
          *(_OWORD *)v17 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v17, v18);
        }
      }
      v5 = *(_QWORD *)(v4 + 3056);
    }
    v6 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8);
    if (*(_BYTE *)(*(_QWORD *)(v6 + 680) + 370) == 3)
      v7 = 16;
    else
      v7 = 16 * (*(_BYTE *)(*(_QWORD *)(v6 + 3064) + 184) == 1);
    WebCore::TypingCommand::deleteKeyPressed((uint64_t *)&v24, v7, 0);
    v11 = v24;
    v24 = 0;
    if (!v11)
      return 1;
    goto LABEL_18;
  }
  if (!a3)
  {
    WebCore::UserTypingGestureIndicator::UserTypingGestureIndicator((WebCore::UserTypingGestureIndicator *)&v24, a1);
    v8 = (WebCore::Document *)*((_QWORD *)a1 + 37);
    v9 = *((_QWORD *)v8 + 382);
    if (!v9)
    {
      v19 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v19, v8);
      v21 = (WebCore::Editor *)*((_QWORD *)v8 + 382);
      *((_QWORD *)v8 + 382) = v19;
      if (v21)
      {
        WebCore::Editor::~Editor(v21, v20);
        if (*(_DWORD *)v22)
        {
          *(_QWORD *)(v22 + 496) = 0;
          *(_OWORD *)(v22 + 464) = 0u;
          *(_OWORD *)(v22 + 480) = 0u;
          *(_OWORD *)(v22 + 432) = 0u;
          *(_OWORD *)(v22 + 448) = 0u;
          *(_OWORD *)(v22 + 400) = 0u;
          *(_OWORD *)(v22 + 416) = 0u;
          *(_OWORD *)(v22 + 368) = 0u;
          *(_OWORD *)(v22 + 384) = 0u;
          *(_OWORD *)(v22 + 336) = 0u;
          *(_OWORD *)(v22 + 352) = 0u;
          *(_OWORD *)(v22 + 304) = 0u;
          *(_OWORD *)(v22 + 320) = 0u;
          *(_OWORD *)(v22 + 272) = 0u;
          *(_OWORD *)(v22 + 288) = 0u;
          *(_OWORD *)(v22 + 240) = 0u;
          *(_OWORD *)(v22 + 256) = 0u;
          *(_OWORD *)(v22 + 208) = 0u;
          *(_OWORD *)(v22 + 224) = 0u;
          *(_OWORD *)(v22 + 176) = 0u;
          *(_OWORD *)(v22 + 192) = 0u;
          *(_OWORD *)(v22 + 144) = 0u;
          *(_OWORD *)(v22 + 160) = 0u;
          *(_OWORD *)(v22 + 112) = 0u;
          *(_OWORD *)(v22 + 128) = 0u;
          *(_OWORD *)(v22 + 80) = 0u;
          *(_OWORD *)(v22 + 96) = 0u;
          *(_OWORD *)(v22 + 48) = 0u;
          *(_OWORD *)(v22 + 64) = 0u;
          *(_OWORD *)(v22 + 16) = 0u;
          *(_OWORD *)(v22 + 32) = 0u;
          *(_OWORD *)v22 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v22, v23);
        }
      }
      v9 = *((_QWORD *)v8 + 382);
    }
    WebCore::Editor::performDelete(v9);
    WebCore::s_processingUserTypingGesture = (char)v24;
    {
      WebCore::focusedNode(void)::node = 0;
    }
    v11 = v25;
    if (v25)
      *((_DWORD *)v25 + 6) += 2;
    v12 = WebCore::focusedNode(void)::node;
    WebCore::focusedNode(void)::node = (uint64_t)v11;
    if (v12)
    {
      if (*(_DWORD *)(v12 + 24) == 2)
      {
        if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v12, v10);
          v11 = v25;
        }
      }
      else
      {
        *(_DWORD *)(v12 + 24) -= 2;
      }
    }
    v25 = 0;
    if (!v11)
      return 1;
LABEL_18:
    if (*((_DWORD *)v11 + 6) == 2)
    {
      if ((*((_WORD *)v11 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v11, v10);
    }
    else
    {
      *((_DWORD *)v11 + 6) -= 2;
    }
    return 1;
  }
  return 0;
}

BOOL WebCore::enabledDelete(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  WebCore::Document *v4;
  uint64_t v5;
  _BOOL8 v6;
  WebCore::Document *v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::Editor *v11;
  void *v12;
  WebCore::Editor *v13;
  uint64_t v14;
  void *v15;
  WebCore::Editor *v16;
  void *v17;
  WebCore::Editor *v18;
  uint64_t v19;
  void *v20;
  _BYTE v22[64];
  uint64_t v23;

  if ((a3 - 1) >= 2)
  {
    if (a3)
      return 0;
    v7 = *(WebCore::Document **)(a1 + 296);
    v8 = *((_QWORD *)v7 + 382);
    if (!v8)
    {
      v16 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v16, v7);
      v18 = (WebCore::Editor *)*((_QWORD *)v7 + 382);
      *((_QWORD *)v7 + 382) = v16;
      if (v18)
      {
        WebCore::Editor::~Editor(v18, v17);
        if (*(_DWORD *)v19)
        {
          *(_QWORD *)(v19 + 496) = 0;
          *(_OWORD *)(v19 + 464) = 0u;
          *(_OWORD *)(v19 + 480) = 0u;
          *(_OWORD *)(v19 + 432) = 0u;
          *(_OWORD *)(v19 + 448) = 0u;
          *(_OWORD *)(v19 + 400) = 0u;
          *(_OWORD *)(v19 + 416) = 0u;
          *(_OWORD *)(v19 + 368) = 0u;
          *(_OWORD *)(v19 + 384) = 0u;
          *(_OWORD *)(v19 + 336) = 0u;
          *(_OWORD *)(v19 + 352) = 0u;
          *(_OWORD *)(v19 + 304) = 0u;
          *(_OWORD *)(v19 + 320) = 0u;
          *(_OWORD *)(v19 + 272) = 0u;
          *(_OWORD *)(v19 + 288) = 0u;
          *(_OWORD *)(v19 + 240) = 0u;
          *(_OWORD *)(v19 + 256) = 0u;
          *(_OWORD *)(v19 + 208) = 0u;
          *(_OWORD *)(v19 + 224) = 0u;
          *(_OWORD *)(v19 + 176) = 0u;
          *(_OWORD *)(v19 + 192) = 0u;
          *(_OWORD *)(v19 + 144) = 0u;
          *(_OWORD *)(v19 + 160) = 0u;
          *(_OWORD *)(v19 + 112) = 0u;
          *(_OWORD *)(v19 + 128) = 0u;
          *(_OWORD *)(v19 + 80) = 0u;
          *(_OWORD *)(v19 + 96) = 0u;
          *(_OWORD *)(v19 + 48) = 0u;
          *(_OWORD *)(v19 + 64) = 0u;
          *(_OWORD *)(v19 + 16) = 0u;
          *(_OWORD *)(v19 + 32) = 0u;
          *(_OWORD *)v19 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v19, v20);
        }
      }
      v8 = *((_QWORD *)v7 + 382);
    }
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 16) + 8) + 3064);
    return *(_BYTE *)(v9 + 153) == 2 && WebCore::editableRootForPosition(v9 + 120, 0) != 0;
  }
  else
  {
    v3 = a2;
    v4 = *(WebCore::Document **)(a1 + 296);
    v5 = *((_QWORD *)v4 + 382);
    if (!v5)
    {
      v11 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v11, v4);
      v13 = (WebCore::Editor *)*((_QWORD *)v4 + 382);
      *((_QWORD *)v4 + 382) = v11;
      if (v13)
      {
        WebCore::Editor::~Editor(v13, v12);
        if (*(_DWORD *)v14)
        {
          *(_QWORD *)(v14 + 496) = 0;
          *(_OWORD *)(v14 + 464) = 0u;
          *(_OWORD *)(v14 + 480) = 0u;
          *(_OWORD *)(v14 + 432) = 0u;
          *(_OWORD *)(v14 + 448) = 0u;
          *(_OWORD *)(v14 + 400) = 0u;
          *(_OWORD *)(v14 + 416) = 0u;
          *(_OWORD *)(v14 + 368) = 0u;
          *(_OWORD *)(v14 + 384) = 0u;
          *(_OWORD *)(v14 + 336) = 0u;
          *(_OWORD *)(v14 + 352) = 0u;
          *(_OWORD *)(v14 + 304) = 0u;
          *(_OWORD *)(v14 + 320) = 0u;
          *(_OWORD *)(v14 + 272) = 0u;
          *(_OWORD *)(v14 + 288) = 0u;
          *(_OWORD *)(v14 + 240) = 0u;
          *(_OWORD *)(v14 + 256) = 0u;
          *(_OWORD *)(v14 + 208) = 0u;
          *(_OWORD *)(v14 + 224) = 0u;
          *(_OWORD *)(v14 + 176) = 0u;
          *(_OWORD *)(v14 + 192) = 0u;
          *(_OWORD *)(v14 + 144) = 0u;
          *(_OWORD *)(v14 + 160) = 0u;
          *(_OWORD *)(v14 + 112) = 0u;
          *(_OWORD *)(v14 + 128) = 0u;
          *(_OWORD *)(v14 + 80) = 0u;
          *(_OWORD *)(v14 + 96) = 0u;
          *(_OWORD *)(v14 + 48) = 0u;
          *(_OWORD *)(v14 + 64) = 0u;
          *(_OWORD *)(v14 + 16) = 0u;
          *(_OWORD *)(v14 + 32) = 0u;
          *(_OWORD *)v14 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v14, v15);
        }
      }
      v5 = *((_QWORD *)v4 + 382);
      v3 = a2;
    }
    WebCore::Editor::selectionForCommand((WebCore::Editor *)v22, *(WebCore::Event **)(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 8) + 3064), v3);
    v6 = WebCore::editableRootForPosition((uint64_t)&v23, 0) != 0;
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v22);
  }
  return v6;
}

uint64_t WebCore::executeDeleteBackward(uint64_t a1)
{
  WebCore::Document *v1;
  uint64_t v2;
  WebCore::Editor *v4;
  void *v5;
  WebCore::Editor *v6;
  uint64_t v7;
  void *v8;

  v1 = *(WebCore::Document **)(a1 + 296);
  v2 = *((_QWORD *)v1 + 382);
  if (!v2)
  {
    v4 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v4, v1);
    v6 = (WebCore::Editor *)*((_QWORD *)v1 + 382);
    *((_QWORD *)v1 + 382) = v4;
    if (v6)
    {
      WebCore::Editor::~Editor(v6, v5);
      if (*(_DWORD *)v7)
      {
        *(_QWORD *)(v7 + 496) = 0;
        *(_OWORD *)(v7 + 464) = 0u;
        *(_OWORD *)(v7 + 480) = 0u;
        *(_OWORD *)(v7 + 432) = 0u;
        *(_OWORD *)(v7 + 448) = 0u;
        *(_OWORD *)(v7 + 400) = 0u;
        *(_OWORD *)(v7 + 416) = 0u;
        *(_OWORD *)(v7 + 368) = 0u;
        *(_OWORD *)(v7 + 384) = 0u;
        *(_OWORD *)(v7 + 336) = 0u;
        *(_OWORD *)(v7 + 352) = 0u;
        *(_OWORD *)(v7 + 304) = 0u;
        *(_OWORD *)(v7 + 320) = 0u;
        *(_OWORD *)(v7 + 272) = 0u;
        *(_OWORD *)(v7 + 288) = 0u;
        *(_OWORD *)(v7 + 240) = 0u;
        *(_OWORD *)(v7 + 256) = 0u;
        *(_OWORD *)(v7 + 208) = 0u;
        *(_OWORD *)(v7 + 224) = 0u;
        *(_OWORD *)(v7 + 176) = 0u;
        *(_OWORD *)(v7 + 192) = 0u;
        *(_OWORD *)(v7 + 144) = 0u;
        *(_OWORD *)(v7 + 160) = 0u;
        *(_OWORD *)(v7 + 112) = 0u;
        *(_OWORD *)(v7 + 128) = 0u;
        *(_OWORD *)(v7 + 80) = 0u;
        *(_OWORD *)(v7 + 96) = 0u;
        *(_OWORD *)(v7 + 48) = 0u;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        *(_OWORD *)(v7 + 32) = 0u;
        *(_OWORD *)v7 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v7, v8);
      }
    }
    v2 = *((_QWORD *)v1 + 382);
  }
  WebCore::Editor::deleteWithDirection(v2, 1, 0, 0, 1);
  return 1;
}

BOOL WebCore::enabledInEditableText(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WebCore::Document *v3;
  uint64_t v4;
  _BOOL8 v5;
  WebCore::Editor *v7;
  void *v8;
  WebCore::Editor *v9;
  uint64_t v10;
  void *v11;
  _BYTE v13[64];
  uint64_t v14;

  v2 = a2;
  v3 = *(WebCore::Document **)(a1 + 296);
  v4 = *((_QWORD *)v3 + 382);
  if (!v4)
  {
    v7 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v7, v3);
    v9 = (WebCore::Editor *)*((_QWORD *)v3 + 382);
    *((_QWORD *)v3 + 382) = v7;
    if (v9)
    {
      WebCore::Editor::~Editor(v9, v8);
      if (*(_DWORD *)v10)
      {
        *(_QWORD *)(v10 + 496) = 0;
        *(_OWORD *)(v10 + 464) = 0u;
        *(_OWORD *)(v10 + 480) = 0u;
        *(_OWORD *)(v10 + 432) = 0u;
        *(_OWORD *)(v10 + 448) = 0u;
        *(_OWORD *)(v10 + 400) = 0u;
        *(_OWORD *)(v10 + 416) = 0u;
        *(_OWORD *)(v10 + 368) = 0u;
        *(_OWORD *)(v10 + 384) = 0u;
        *(_OWORD *)(v10 + 336) = 0u;
        *(_OWORD *)(v10 + 352) = 0u;
        *(_OWORD *)(v10 + 304) = 0u;
        *(_OWORD *)(v10 + 320) = 0u;
        *(_OWORD *)(v10 + 272) = 0u;
        *(_OWORD *)(v10 + 288) = 0u;
        *(_OWORD *)(v10 + 240) = 0u;
        *(_OWORD *)(v10 + 256) = 0u;
        *(_OWORD *)(v10 + 208) = 0u;
        *(_OWORD *)(v10 + 224) = 0u;
        *(_OWORD *)(v10 + 176) = 0u;
        *(_OWORD *)(v10 + 192) = 0u;
        *(_OWORD *)(v10 + 144) = 0u;
        *(_OWORD *)(v10 + 160) = 0u;
        *(_OWORD *)(v10 + 112) = 0u;
        *(_OWORD *)(v10 + 128) = 0u;
        *(_OWORD *)(v10 + 80) = 0u;
        *(_OWORD *)(v10 + 96) = 0u;
        *(_OWORD *)(v10 + 48) = 0u;
        *(_OWORD *)(v10 + 64) = 0u;
        *(_OWORD *)(v10 + 16) = 0u;
        *(_OWORD *)(v10 + 32) = 0u;
        *(_OWORD *)v10 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v10, v11);
      }
    }
    v4 = *((_QWORD *)v3 + 382);
    v2 = a2;
  }
  WebCore::Editor::selectionForCommand((WebCore::Editor *)v13, *(WebCore::Event **)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 8) + 3064), v2);
  v5 = WebCore::editableRootForPosition((uint64_t)&v14, 0) != 0;
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v13);
  return v5;
}

uint64_t WebCore::executeDeleteBackwardByDecomposingPreviousCharacter(uint64_t a1)
{
  WebCore::Document *v1;
  uint64_t v2;
  WebCore::Editor *v4;
  void *v5;
  WebCore::Editor *v6;
  uint64_t v7;
  void *v8;

  v1 = *(WebCore::Document **)(a1 + 296);
  v2 = *((_QWORD *)v1 + 382);
  if (!v2)
  {
    v4 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v4, v1);
    v6 = (WebCore::Editor *)*((_QWORD *)v1 + 382);
    *((_QWORD *)v1 + 382) = v4;
    if (v6)
    {
      WebCore::Editor::~Editor(v6, v5);
      if (*(_DWORD *)v7)
      {
        *(_QWORD *)(v7 + 496) = 0;
        *(_OWORD *)(v7 + 464) = 0u;
        *(_OWORD *)(v7 + 480) = 0u;
        *(_OWORD *)(v7 + 432) = 0u;
        *(_OWORD *)(v7 + 448) = 0u;
        *(_OWORD *)(v7 + 400) = 0u;
        *(_OWORD *)(v7 + 416) = 0u;
        *(_OWORD *)(v7 + 368) = 0u;
        *(_OWORD *)(v7 + 384) = 0u;
        *(_OWORD *)(v7 + 336) = 0u;
        *(_OWORD *)(v7 + 352) = 0u;
        *(_OWORD *)(v7 + 304) = 0u;
        *(_OWORD *)(v7 + 320) = 0u;
        *(_OWORD *)(v7 + 272) = 0u;
        *(_OWORD *)(v7 + 288) = 0u;
        *(_OWORD *)(v7 + 240) = 0u;
        *(_OWORD *)(v7 + 256) = 0u;
        *(_OWORD *)(v7 + 208) = 0u;
        *(_OWORD *)(v7 + 224) = 0u;
        *(_OWORD *)(v7 + 176) = 0u;
        *(_OWORD *)(v7 + 192) = 0u;
        *(_OWORD *)(v7 + 144) = 0u;
        *(_OWORD *)(v7 + 160) = 0u;
        *(_OWORD *)(v7 + 112) = 0u;
        *(_OWORD *)(v7 + 128) = 0u;
        *(_OWORD *)(v7 + 80) = 0u;
        *(_OWORD *)(v7 + 96) = 0u;
        *(_OWORD *)(v7 + 48) = 0u;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        *(_OWORD *)(v7 + 32) = 0u;
        *(_OWORD *)v7 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v7, v8);
      }
    }
    v2 = *((_QWORD *)v1 + 382);
  }
  WebCore::Editor::deleteWithDirection(v2, 1, 0, 0, 1);
  return 1;
}

uint64_t WebCore::executeDeleteForward(uint64_t a1)
{
  WebCore::Document *v1;
  uint64_t v2;
  WebCore::Editor *v4;
  void *v5;
  WebCore::Editor *v6;
  uint64_t v7;
  void *v8;

  v1 = *(WebCore::Document **)(a1 + 296);
  v2 = *((_QWORD *)v1 + 382);
  if (!v2)
  {
    v4 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v4, v1);
    v6 = (WebCore::Editor *)*((_QWORD *)v1 + 382);
    *((_QWORD *)v1 + 382) = v4;
    if (v6)
    {
      WebCore::Editor::~Editor(v6, v5);
      if (*(_DWORD *)v7)
      {
        *(_QWORD *)(v7 + 496) = 0;
        *(_OWORD *)(v7 + 464) = 0u;
        *(_OWORD *)(v7 + 480) = 0u;
        *(_OWORD *)(v7 + 432) = 0u;
        *(_OWORD *)(v7 + 448) = 0u;
        *(_OWORD *)(v7 + 400) = 0u;
        *(_OWORD *)(v7 + 416) = 0u;
        *(_OWORD *)(v7 + 368) = 0u;
        *(_OWORD *)(v7 + 384) = 0u;
        *(_OWORD *)(v7 + 336) = 0u;
        *(_OWORD *)(v7 + 352) = 0u;
        *(_OWORD *)(v7 + 304) = 0u;
        *(_OWORD *)(v7 + 320) = 0u;
        *(_OWORD *)(v7 + 272) = 0u;
        *(_OWORD *)(v7 + 288) = 0u;
        *(_OWORD *)(v7 + 240) = 0u;
        *(_OWORD *)(v7 + 256) = 0u;
        *(_OWORD *)(v7 + 208) = 0u;
        *(_OWORD *)(v7 + 224) = 0u;
        *(_OWORD *)(v7 + 176) = 0u;
        *(_OWORD *)(v7 + 192) = 0u;
        *(_OWORD *)(v7 + 144) = 0u;
        *(_OWORD *)(v7 + 160) = 0u;
        *(_OWORD *)(v7 + 112) = 0u;
        *(_OWORD *)(v7 + 128) = 0u;
        *(_OWORD *)(v7 + 80) = 0u;
        *(_OWORD *)(v7 + 96) = 0u;
        *(_OWORD *)(v7 + 48) = 0u;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        *(_OWORD *)(v7 + 32) = 0u;
        *(_OWORD *)v7 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v7, v8);
      }
    }
    v2 = *((_QWORD *)v1 + 382);
  }
  WebCore::Editor::deleteWithDirection(v2, 0, 0, 0, 1);
  return 1;
}

uint64_t WebCore::executeDeleteToBeginningOfLine(uint64_t a1)
{
  WebCore::Document *v1;
  uint64_t v2;
  WebCore::Editor *v4;
  void *v5;
  WebCore::Editor *v6;
  uint64_t v7;
  void *v8;

  v1 = *(WebCore::Document **)(a1 + 296);
  v2 = *((_QWORD *)v1 + 382);
  if (!v2)
  {
    v4 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v4, v1);
    v6 = (WebCore::Editor *)*((_QWORD *)v1 + 382);
    *((_QWORD *)v1 + 382) = v4;
    if (v6)
    {
      WebCore::Editor::~Editor(v6, v5);
      if (*(_DWORD *)v7)
      {
        *(_QWORD *)(v7 + 496) = 0;
        *(_OWORD *)(v7 + 464) = 0u;
        *(_OWORD *)(v7 + 480) = 0u;
        *(_OWORD *)(v7 + 432) = 0u;
        *(_OWORD *)(v7 + 448) = 0u;
        *(_OWORD *)(v7 + 400) = 0u;
        *(_OWORD *)(v7 + 416) = 0u;
        *(_OWORD *)(v7 + 368) = 0u;
        *(_OWORD *)(v7 + 384) = 0u;
        *(_OWORD *)(v7 + 336) = 0u;
        *(_OWORD *)(v7 + 352) = 0u;
        *(_OWORD *)(v7 + 304) = 0u;
        *(_OWORD *)(v7 + 320) = 0u;
        *(_OWORD *)(v7 + 272) = 0u;
        *(_OWORD *)(v7 + 288) = 0u;
        *(_OWORD *)(v7 + 240) = 0u;
        *(_OWORD *)(v7 + 256) = 0u;
        *(_OWORD *)(v7 + 208) = 0u;
        *(_OWORD *)(v7 + 224) = 0u;
        *(_OWORD *)(v7 + 176) = 0u;
        *(_OWORD *)(v7 + 192) = 0u;
        *(_OWORD *)(v7 + 144) = 0u;
        *(_OWORD *)(v7 + 160) = 0u;
        *(_OWORD *)(v7 + 112) = 0u;
        *(_OWORD *)(v7 + 128) = 0u;
        *(_OWORD *)(v7 + 80) = 0u;
        *(_OWORD *)(v7 + 96) = 0u;
        *(_OWORD *)(v7 + 48) = 0u;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        *(_OWORD *)(v7 + 32) = 0u;
        *(_OWORD *)v7 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v7, v8);
      }
    }
    v2 = *((_QWORD *)v1 + 382);
  }
  WebCore::Editor::deleteWithDirection(v2, 1, 7, 1, 0);
  return 1;
}

uint64_t WebCore::executeDeleteToBeginningOfParagraph(uint64_t a1)
{
  WebCore::Document *v1;
  uint64_t v2;
  WebCore::Editor *v4;
  void *v5;
  WebCore::Editor *v6;
  uint64_t v7;
  void *v8;

  v1 = *(WebCore::Document **)(a1 + 296);
  v2 = *((_QWORD *)v1 + 382);
  if (!v2)
  {
    v4 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v4, v1);
    v6 = (WebCore::Editor *)*((_QWORD *)v1 + 382);
    *((_QWORD *)v1 + 382) = v4;
    if (v6)
    {
      WebCore::Editor::~Editor(v6, v5);
      if (*(_DWORD *)v7)
      {
        *(_QWORD *)(v7 + 496) = 0;
        *(_OWORD *)(v7 + 464) = 0u;
        *(_OWORD *)(v7 + 480) = 0u;
        *(_OWORD *)(v7 + 432) = 0u;
        *(_OWORD *)(v7 + 448) = 0u;
        *(_OWORD *)(v7 + 400) = 0u;
        *(_OWORD *)(v7 + 416) = 0u;
        *(_OWORD *)(v7 + 368) = 0u;
        *(_OWORD *)(v7 + 384) = 0u;
        *(_OWORD *)(v7 + 336) = 0u;
        *(_OWORD *)(v7 + 352) = 0u;
        *(_OWORD *)(v7 + 304) = 0u;
        *(_OWORD *)(v7 + 320) = 0u;
        *(_OWORD *)(v7 + 272) = 0u;
        *(_OWORD *)(v7 + 288) = 0u;
        *(_OWORD *)(v7 + 240) = 0u;
        *(_OWORD *)(v7 + 256) = 0u;
        *(_OWORD *)(v7 + 208) = 0u;
        *(_OWORD *)(v7 + 224) = 0u;
        *(_OWORD *)(v7 + 176) = 0u;
        *(_OWORD *)(v7 + 192) = 0u;
        *(_OWORD *)(v7 + 144) = 0u;
        *(_OWORD *)(v7 + 160) = 0u;
        *(_OWORD *)(v7 + 112) = 0u;
        *(_OWORD *)(v7 + 128) = 0u;
        *(_OWORD *)(v7 + 80) = 0u;
        *(_OWORD *)(v7 + 96) = 0u;
        *(_OWORD *)(v7 + 48) = 0u;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        *(_OWORD *)(v7 + 32) = 0u;
        *(_OWORD *)v7 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v7, v8);
      }
    }
    v2 = *((_QWORD *)v1 + 382);
  }
  WebCore::Editor::deleteWithDirection(v2, 1, 8, 1, 0);
  return 1;
}

uint64_t WebCore::executeDeleteToEndOfLine(uint64_t a1)
{
  WebCore::Document *v1;
  uint64_t v2;
  WebCore::Editor *v4;
  void *v5;
  WebCore::Editor *v6;
  uint64_t v7;
  void *v8;

  v1 = *(WebCore::Document **)(a1 + 296);
  v2 = *((_QWORD *)v1 + 382);
  if (!v2)
  {
    v4 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v4, v1);
    v6 = (WebCore::Editor *)*((_QWORD *)v1 + 382);
    *((_QWORD *)v1 + 382) = v4;
    if (v6)
    {
      WebCore::Editor::~Editor(v6, v5);
      if (*(_DWORD *)v7)
      {
        *(_QWORD *)(v7 + 496) = 0;
        *(_OWORD *)(v7 + 464) = 0u;
        *(_OWORD *)(v7 + 480) = 0u;
        *(_OWORD *)(v7 + 432) = 0u;
        *(_OWORD *)(v7 + 448) = 0u;
        *(_OWORD *)(v7 + 400) = 0u;
        *(_OWORD *)(v7 + 416) = 0u;
        *(_OWORD *)(v7 + 368) = 0u;
        *(_OWORD *)(v7 + 384) = 0u;
        *(_OWORD *)(v7 + 336) = 0u;
        *(_OWORD *)(v7 + 352) = 0u;
        *(_OWORD *)(v7 + 304) = 0u;
        *(_OWORD *)(v7 + 320) = 0u;
        *(_OWORD *)(v7 + 272) = 0u;
        *(_OWORD *)(v7 + 288) = 0u;
        *(_OWORD *)(v7 + 240) = 0u;
        *(_OWORD *)(v7 + 256) = 0u;
        *(_OWORD *)(v7 + 208) = 0u;
        *(_OWORD *)(v7 + 224) = 0u;
        *(_OWORD *)(v7 + 176) = 0u;
        *(_OWORD *)(v7 + 192) = 0u;
        *(_OWORD *)(v7 + 144) = 0u;
        *(_OWORD *)(v7 + 160) = 0u;
        *(_OWORD *)(v7 + 112) = 0u;
        *(_OWORD *)(v7 + 128) = 0u;
        *(_OWORD *)(v7 + 80) = 0u;
        *(_OWORD *)(v7 + 96) = 0u;
        *(_OWORD *)(v7 + 48) = 0u;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        *(_OWORD *)(v7 + 32) = 0u;
        *(_OWORD *)v7 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v7, v8);
      }
    }
    v2 = *((_QWORD *)v1 + 382);
  }
  WebCore::Editor::deleteWithDirection(v2, 0, 7, 1, 0);
  return 1;
}

uint64_t WebCore::executeDeleteToEndOfParagraph(uint64_t a1)
{
  WebCore::Document *v1;
  uint64_t v2;
  WebCore::Editor *v4;
  void *v5;
  WebCore::Editor *v6;
  uint64_t v7;
  void *v8;

  v1 = *(WebCore::Document **)(a1 + 296);
  v2 = *((_QWORD *)v1 + 382);
  if (!v2)
  {
    v4 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v4, v1);
    v6 = (WebCore::Editor *)*((_QWORD *)v1 + 382);
    *((_QWORD *)v1 + 382) = v4;
    if (v6)
    {
      WebCore::Editor::~Editor(v6, v5);
      if (*(_DWORD *)v7)
      {
        *(_QWORD *)(v7 + 496) = 0;
        *(_OWORD *)(v7 + 464) = 0u;
        *(_OWORD *)(v7 + 480) = 0u;
        *(_OWORD *)(v7 + 432) = 0u;
        *(_OWORD *)(v7 + 448) = 0u;
        *(_OWORD *)(v7 + 400) = 0u;
        *(_OWORD *)(v7 + 416) = 0u;
        *(_OWORD *)(v7 + 368) = 0u;
        *(_OWORD *)(v7 + 384) = 0u;
        *(_OWORD *)(v7 + 336) = 0u;
        *(_OWORD *)(v7 + 352) = 0u;
        *(_OWORD *)(v7 + 304) = 0u;
        *(_OWORD *)(v7 + 320) = 0u;
        *(_OWORD *)(v7 + 272) = 0u;
        *(_OWORD *)(v7 + 288) = 0u;
        *(_OWORD *)(v7 + 240) = 0u;
        *(_OWORD *)(v7 + 256) = 0u;
        *(_OWORD *)(v7 + 208) = 0u;
        *(_OWORD *)(v7 + 224) = 0u;
        *(_OWORD *)(v7 + 176) = 0u;
        *(_OWORD *)(v7 + 192) = 0u;
        *(_OWORD *)(v7 + 144) = 0u;
        *(_OWORD *)(v7 + 160) = 0u;
        *(_OWORD *)(v7 + 112) = 0u;
        *(_OWORD *)(v7 + 128) = 0u;
        *(_OWORD *)(v7 + 80) = 0u;
        *(_OWORD *)(v7 + 96) = 0u;
        *(_OWORD *)(v7 + 48) = 0u;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        *(_OWORD *)(v7 + 32) = 0u;
        *(_OWORD *)v7 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v7, v8);
      }
    }
    v2 = *((_QWORD *)v1 + 382);
  }
  WebCore::Editor::deleteWithDirection(v2, 0, 8, 1, 0);
  return 1;
}

uint64_t WebCore::executeDeleteToMark(uint64_t a1)
{
  WebCore::Document *v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  unsigned __int8 v5;
  _BOOL4 v6;
  _BOOL4 v7;
  unsigned __int8 v8;
  void *v9;
  _BOOL4 v10;
  _BOOL4 v11;
  WebCore::Node **v12;
  WebCore::Node *v13;
  uint64_t *v14;
  int v15;
  BOOL v16;
  WebCore::Node **v17;
  WebCore::Node *v18;
  uint64_t *v19;
  int v20;
  _BOOL4 v21;
  WebCore::Node *v22;
  uint64_t v23;
  WebCore::Node *v24;
  WebCore::Node *v25;
  WebCore::Node *v26;
  WebCore::Node *v27;
  WebCore::Editor *v30;
  void *v31;
  WebCore::Editor *v32;
  uint64_t v33;
  void *v34;
  WebCore::Node *v35;
  int v36;
  WebCore::Node *v37;
  int v38;
  char v39;
  WebCore::Node *v40;
  uint64_t v41;
  WebCore::Node *v42;
  uint64_t v43;
  char v44;
  WebCore::Node *v45;
  uint64_t v46;
  WebCore::Node *v47;
  uint64_t v48;
  char v49;
  _BYTE v50[97];
  char v51;

  v1 = *(WebCore::Document **)(a1 + 296);
  v2 = *((_QWORD *)v1 + 382);
  if (!v2)
  {
    v30 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v30, v1);
    v32 = (WebCore::Editor *)*((_QWORD *)v1 + 382);
    *((_QWORD *)v1 + 382) = v30;
    if (v32)
    {
      WebCore::Editor::~Editor(v32, v31);
      if (*(_DWORD *)v33)
      {
        *(_QWORD *)(v33 + 496) = 0;
        *(_OWORD *)(v33 + 464) = 0u;
        *(_OWORD *)(v33 + 480) = 0u;
        *(_OWORD *)(v33 + 432) = 0u;
        *(_OWORD *)(v33 + 448) = 0u;
        *(_OWORD *)(v33 + 400) = 0u;
        *(_OWORD *)(v33 + 416) = 0u;
        *(_OWORD *)(v33 + 368) = 0u;
        *(_OWORD *)(v33 + 384) = 0u;
        *(_OWORD *)(v33 + 336) = 0u;
        *(_OWORD *)(v33 + 352) = 0u;
        *(_OWORD *)(v33 + 304) = 0u;
        *(_OWORD *)(v33 + 320) = 0u;
        *(_OWORD *)(v33 + 272) = 0u;
        *(_OWORD *)(v33 + 288) = 0u;
        *(_OWORD *)(v33 + 240) = 0u;
        *(_OWORD *)(v33 + 256) = 0u;
        *(_OWORD *)(v33 + 208) = 0u;
        *(_OWORD *)(v33 + 224) = 0u;
        *(_OWORD *)(v33 + 176) = 0u;
        *(_OWORD *)(v33 + 192) = 0u;
        *(_OWORD *)(v33 + 144) = 0u;
        *(_OWORD *)(v33 + 160) = 0u;
        *(_OWORD *)(v33 + 112) = 0u;
        *(_OWORD *)(v33 + 128) = 0u;
        *(_OWORD *)(v33 + 80) = 0u;
        *(_OWORD *)(v33 + 96) = 0u;
        *(_OWORD *)(v33 + 48) = 0u;
        *(_OWORD *)(v33 + 64) = 0u;
        *(_OWORD *)(v33 + 16) = 0u;
        *(_OWORD *)(v33 + 32) = 0u;
        *(_OWORD *)v33 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v33, v34);
      }
    }
    v2 = *((_QWORD *)v1 + 382);
    v1 = *(WebCore::Document **)(a1 + 296);
  }
  v3 = *((_QWORD *)v1 + 383);
  WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(v2 + 200), &v45);
  WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(v3 + 56), &v40);
  if (v49)
    v4 = v44 == 0;
  else
    v4 = 1;
  if (v4)
    goto LABEL_24;
  v5 = WebCore::treeOrder<(WebCore::TreeType)2>((int *)&v40, (uint64_t)&v45);
  v6 = v5 != 129;
  v7 = (v5 & 0x80u) != 0;
  v8 = WebCore::treeOrder<(WebCore::TreeType)2>((int *)&v47, (uint64_t)&v42);
  v10 = v8 != 129;
  v11 = (v8 & 0x80u) != 0;
  if (v6 && v7)
    v12 = &v40;
  else
    v12 = &v45;
  v13 = *v12;
  *((_DWORD *)v13 + 6) += 2;
  v14 = &v41;
  if (!v6 || !v7)
    v14 = &v46;
  v15 = *(_DWORD *)v14;
  v16 = !v10 || !v11;
  if (v10 && v11)
    v17 = &v42;
  else
    v17 = &v47;
  v18 = *v17;
  *((_DWORD *)*v17 + 6) += 2;
  v19 = &v43;
  if (v16)
    v19 = &v48;
  v20 = *(_DWORD *)v19;
  v35 = v13;
  v36 = v15;
  v37 = v18;
  v38 = v20;
  v39 = 1;
  if (*(_QWORD *)(*((_QWORD *)v13 + 5) + 8) == *(_QWORD *)(*((_QWORD *)v18 + 5) + 8))
  {
    WebCore::VisibleSelection::VisibleSelection((uint64_t)v50, (uint64_t)&v35, 1, 0);
    v21 = v51 != 0;
    if (v51)
      WebCore::FrameSelection::setSelection(v3, (uint64_t)v50, 6u, 0, 0, 0, 0);
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v50);
    if (!v39)
      goto LABEL_35;
    v18 = v37;
    v37 = 0;
    if (!v18)
      goto LABEL_21;
  }
  else
  {
    v21 = 0;
    v37 = 0;
  }
  if (*((_DWORD *)v18 + 6) == 2)
  {
    if ((*((_WORD *)v18 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v18, v9);
  }
  else
  {
    *((_DWORD *)v18 + 6) -= 2;
  }
LABEL_21:
  v22 = v35;
  v35 = 0;
  if (!v22)
    goto LABEL_35;
  if (*((_DWORD *)v22 + 6) == 2)
  {
    if ((*((_WORD *)v22 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v22, v9);
      if (v21)
        goto LABEL_24;
      goto LABEL_36;
    }
LABEL_35:
    if (v21)
      goto LABEL_24;
    goto LABEL_36;
  }
  *((_DWORD *)v22 + 6) -= 2;
  if (v21)
  {
LABEL_24:
    WebCore::Editor::performDelete(v2);
    WebCore::VisibleSelection::operator=((uint64_t *)(v2 + 200), (uint64_t *)(v3 + 56));
    v23 = 1;
    goto LABEL_37;
  }
LABEL_36:
  v23 = 0;
LABEL_37:
  if (v44)
  {
    v24 = v42;
    v42 = 0;
    if (v24)
    {
      if (*((_DWORD *)v24 + 6) == 2)
      {
        if ((*((_WORD *)v24 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v24, v9);
      }
      else
      {
        *((_DWORD *)v24 + 6) -= 2;
      }
    }
    v25 = v40;
    v40 = 0;
    if (v25)
    {
      if (*((_DWORD *)v25 + 6) == 2)
      {
        if ((*((_WORD *)v25 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v25, v9);
      }
      else
      {
        *((_DWORD *)v25 + 6) -= 2;
      }
    }
  }
  if (v49)
  {
    v26 = v47;
    v47 = 0;
    if (v26)
    {
      if (*((_DWORD *)v26 + 6) == 2)
      {
        if ((*((_WORD *)v26 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v26, v9);
      }
      else
      {
        *((_DWORD *)v26 + 6) -= 2;
      }
    }
    v27 = v45;
    v45 = 0;
    if (v27)
    {
      if (*((_DWORD *)v27 + 6) == 2)
      {
        if ((*((_WORD *)v27 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v27, v9);
      }
      else
      {
        *((_DWORD *)v27 + 6) -= 2;
      }
    }
  }
  return v23;
}

uint64_t WebCore::executeDeleteWordBackward(uint64_t a1)
{
  WebCore::Document *v1;
  uint64_t v2;
  WebCore::Editor *v4;
  void *v5;
  WebCore::Editor *v6;
  uint64_t v7;
  void *v8;

  v1 = *(WebCore::Document **)(a1 + 296);
  v2 = *((_QWORD *)v1 + 382);
  if (!v2)
  {
    v4 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v4, v1);
    v6 = (WebCore::Editor *)*((_QWORD *)v1 + 382);
    *((_QWORD *)v1 + 382) = v4;
    if (v6)
    {
      WebCore::Editor::~Editor(v6, v5);
      if (*(_DWORD *)v7)
      {
        *(_QWORD *)(v7 + 496) = 0;
        *(_OWORD *)(v7 + 464) = 0u;
        *(_OWORD *)(v7 + 480) = 0u;
        *(_OWORD *)(v7 + 432) = 0u;
        *(_OWORD *)(v7 + 448) = 0u;
        *(_OWORD *)(v7 + 400) = 0u;
        *(_OWORD *)(v7 + 416) = 0u;
        *(_OWORD *)(v7 + 368) = 0u;
        *(_OWORD *)(v7 + 384) = 0u;
        *(_OWORD *)(v7 + 336) = 0u;
        *(_OWORD *)(v7 + 352) = 0u;
        *(_OWORD *)(v7 + 304) = 0u;
        *(_OWORD *)(v7 + 320) = 0u;
        *(_OWORD *)(v7 + 272) = 0u;
        *(_OWORD *)(v7 + 288) = 0u;
        *(_OWORD *)(v7 + 240) = 0u;
        *(_OWORD *)(v7 + 256) = 0u;
        *(_OWORD *)(v7 + 208) = 0u;
        *(_OWORD *)(v7 + 224) = 0u;
        *(_OWORD *)(v7 + 176) = 0u;
        *(_OWORD *)(v7 + 192) = 0u;
        *(_OWORD *)(v7 + 144) = 0u;
        *(_OWORD *)(v7 + 160) = 0u;
        *(_OWORD *)(v7 + 112) = 0u;
        *(_OWORD *)(v7 + 128) = 0u;
        *(_OWORD *)(v7 + 80) = 0u;
        *(_OWORD *)(v7 + 96) = 0u;
        *(_OWORD *)(v7 + 48) = 0u;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        *(_OWORD *)(v7 + 32) = 0u;
        *(_OWORD *)v7 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v7, v8);
      }
    }
    v2 = *((_QWORD *)v1 + 382);
  }
  WebCore::Editor::deleteWithDirection(v2, 1, 1, 1, 0);
  return 1;
}

uint64_t WebCore::executeDeleteWordForward(uint64_t a1)
{
  WebCore::Document *v1;
  uint64_t v2;
  WebCore::Editor *v4;
  void *v5;
  WebCore::Editor *v6;
  uint64_t v7;
  void *v8;

  v1 = *(WebCore::Document **)(a1 + 296);
  v2 = *((_QWORD *)v1 + 382);
  if (!v2)
  {
    v4 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v4, v1);
    v6 = (WebCore::Editor *)*((_QWORD *)v1 + 382);
    *((_QWORD *)v1 + 382) = v4;
    if (v6)
    {
      WebCore::Editor::~Editor(v6, v5);
      if (*(_DWORD *)v7)
      {
        *(_QWORD *)(v7 + 496) = 0;
        *(_OWORD *)(v7 + 464) = 0u;
        *(_OWORD *)(v7 + 480) = 0u;
        *(_OWORD *)(v7 + 432) = 0u;
        *(_OWORD *)(v7 + 448) = 0u;
        *(_OWORD *)(v7 + 400) = 0u;
        *(_OWORD *)(v7 + 416) = 0u;
        *(_OWORD *)(v7 + 368) = 0u;
        *(_OWORD *)(v7 + 384) = 0u;
        *(_OWORD *)(v7 + 336) = 0u;
        *(_OWORD *)(v7 + 352) = 0u;
        *(_OWORD *)(v7 + 304) = 0u;
        *(_OWORD *)(v7 + 320) = 0u;
        *(_OWORD *)(v7 + 272) = 0u;
        *(_OWORD *)(v7 + 288) = 0u;
        *(_OWORD *)(v7 + 240) = 0u;
        *(_OWORD *)(v7 + 256) = 0u;
        *(_OWORD *)(v7 + 208) = 0u;
        *(_OWORD *)(v7 + 224) = 0u;
        *(_OWORD *)(v7 + 176) = 0u;
        *(_OWORD *)(v7 + 192) = 0u;
        *(_OWORD *)(v7 + 144) = 0u;
        *(_OWORD *)(v7 + 160) = 0u;
        *(_OWORD *)(v7 + 112) = 0u;
        *(_OWORD *)(v7 + 128) = 0u;
        *(_OWORD *)(v7 + 80) = 0u;
        *(_OWORD *)(v7 + 96) = 0u;
        *(_OWORD *)(v7 + 48) = 0u;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        *(_OWORD *)(v7 + 32) = 0u;
        *(_OWORD *)v7 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v7, v8);
      }
    }
    v2 = *((_QWORD *)v1 + 382);
  }
  WebCore::Editor::deleteWithDirection(v2, 0, 1, 1, 0);
  return 1;
}

BOOL WebCore::executeFindString(uint64_t a1, int a2, int a3, void *a4)
{
  void *v4;
  WebCore::Document *v5;
  uint64_t v6;
  WebCore::Editor *v8;
  void *v9;
  WebCore::Editor *v10;
  uint64_t v11;
  void *v12;

  v4 = a4;
  v5 = *(WebCore::Document **)(a1 + 296);
  v6 = *((_QWORD *)v5 + 382);
  if (!v6)
  {
    v8 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v8, v5);
    v10 = (WebCore::Editor *)*((_QWORD *)v5 + 382);
    *((_QWORD *)v5 + 382) = v8;
    if (v10)
    {
      WebCore::Editor::~Editor(v10, v9);
      if (*(_DWORD *)v11)
      {
        *(_QWORD *)(v11 + 496) = 0;
        *(_OWORD *)(v11 + 464) = 0u;
        *(_OWORD *)(v11 + 480) = 0u;
        *(_OWORD *)(v11 + 432) = 0u;
        *(_OWORD *)(v11 + 448) = 0u;
        *(_OWORD *)(v11 + 400) = 0u;
        *(_OWORD *)(v11 + 416) = 0u;
        *(_OWORD *)(v11 + 368) = 0u;
        *(_OWORD *)(v11 + 384) = 0u;
        *(_OWORD *)(v11 + 336) = 0u;
        *(_OWORD *)(v11 + 352) = 0u;
        *(_OWORD *)(v11 + 304) = 0u;
        *(_OWORD *)(v11 + 320) = 0u;
        *(_OWORD *)(v11 + 272) = 0u;
        *(_OWORD *)(v11 + 288) = 0u;
        *(_OWORD *)(v11 + 240) = 0u;
        *(_OWORD *)(v11 + 256) = 0u;
        *(_OWORD *)(v11 + 208) = 0u;
        *(_OWORD *)(v11 + 224) = 0u;
        *(_OWORD *)(v11 + 176) = 0u;
        *(_OWORD *)(v11 + 192) = 0u;
        *(_OWORD *)(v11 + 144) = 0u;
        *(_OWORD *)(v11 + 160) = 0u;
        *(_OWORD *)(v11 + 112) = 0u;
        *(_OWORD *)(v11 + 128) = 0u;
        *(_OWORD *)(v11 + 80) = 0u;
        *(_OWORD *)(v11 + 96) = 0u;
        *(_OWORD *)(v11 + 48) = 0u;
        *(_OWORD *)(v11 + 64) = 0u;
        *(_OWORD *)(v11 + 16) = 0u;
        *(_OWORD *)(v11 + 32) = 0u;
        *(_OWORD *)v11 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v11, v12);
      }
    }
    v6 = *((_QWORD *)v5 + 382);
    v4 = a4;
  }
  return WebCore::Editor::findString(v6, v4, 0x111u);
}

uint64_t WebCore::executeFontName(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return WebCore::executeApplyStyle(a1, a3, 0x21u, 8, a4);
}

void WebCore::valueFontName(WebCore *this@<X0>, WebCore *a2@<X8>)
{
  WebCore::Document *v6;
  uint64_t v7;
  WebCore::Editor *v8;
  void *v9;
  WebCore::Editor *v10;
  uint64_t v11;
  void *v12;
  WebCore *v13;

  v6 = (WebCore::Document *)*((_QWORD *)this + 37);
  v7 = *((_QWORD *)v6 + 382);
  if (!v7)
  {
    v13 = a2;
    v8 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v8, v6);
    v10 = (WebCore::Editor *)*((_QWORD *)v6 + 382);
    *((_QWORD *)v6 + 382) = v8;
    if (v10)
    {
      WebCore::Editor::~Editor(v10, v9);
      if (*(_DWORD *)v11)
      {
        *(_QWORD *)(v11 + 496) = 0;
        *(_OWORD *)(v11 + 464) = 0u;
        *(_OWORD *)(v11 + 480) = 0u;
        *(_OWORD *)(v11 + 432) = 0u;
        *(_OWORD *)(v11 + 448) = 0u;
        *(_OWORD *)(v11 + 400) = 0u;
        *(_OWORD *)(v11 + 416) = 0u;
        *(_OWORD *)(v11 + 368) = 0u;
        *(_OWORD *)(v11 + 384) = 0u;
        *(_OWORD *)(v11 + 336) = 0u;
        *(_OWORD *)(v11 + 352) = 0u;
        *(_OWORD *)(v11 + 304) = 0u;
        *(_OWORD *)(v11 + 320) = 0u;
        *(_OWORD *)(v11 + 272) = 0u;
        *(_OWORD *)(v11 + 288) = 0u;
        *(_OWORD *)(v11 + 240) = 0u;
        *(_OWORD *)(v11 + 256) = 0u;
        *(_OWORD *)(v11 + 208) = 0u;
        *(_OWORD *)(v11 + 224) = 0u;
        *(_OWORD *)(v11 + 176) = 0u;
        *(_OWORD *)(v11 + 192) = 0u;
        *(_OWORD *)(v11 + 144) = 0u;
        *(_OWORD *)(v11 + 160) = 0u;
        *(_OWORD *)(v11 + 112) = 0u;
        *(_OWORD *)(v11 + 128) = 0u;
        *(_OWORD *)(v11 + 80) = 0u;
        *(_OWORD *)(v11 + 96) = 0u;
        *(_OWORD *)(v11 + 48) = 0u;
        *(_OWORD *)(v11 + 64) = 0u;
        *(_OWORD *)(v11 + 16) = 0u;
        *(_OWORD *)(v11 + 32) = 0u;
        *(_OWORD *)v11 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v11, v12);
      }
    }
    v7 = *((_QWORD *)v6 + 382);
    a2 = v13;
  }
  WebCore::Editor::selectionStartCSSPropertyValue(a2, *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8), 8);
}

uint64_t WebCore::executeFontSize(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  WebCore::MutableStyleProperties *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF *v13;
  uint64_t v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD *v18;
  WTF *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD **v25;
  _DWORD *v26;
  WTF *v27;
  uint64_t v29;
  unsigned __int16 v30;
  WTF *v31;

  v30 = 0;
  v6 = 0;
  if (WebCore::HTMLFontElement::cssValueFromFontSizeNumber(a4, &v30))
  {
    v7 = v30;
    v8 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = 0;
    *(_BYTE *)(v8 + 16) &= 0xE0u;
    *(_DWORD *)(v8 + 20) = WebCore::EditingStyle::NoFontDelta;
    v9 = (WebCore::MutableStyleProperties *)WTF::fastMalloc((WTF *)0x60);
    *(_QWORD *)v9 = 0x900000001;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = (char *)v9 + 32;
    *((_QWORD *)v9 + 3) = 4;
    v11 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)(v8 + 8) = v9;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
      {
        v15 = *(unsigned int *)(v11 + 28);
        if ((_DWORD)v15)
        {
          v16 = 16 * v15;
          v17 = (_DWORD **)(*(_QWORD *)(v11 + 16) + 8);
          do
          {
            v18 = *v17;
            *v17 = 0;
            if (v18)
            {
              if (*v18 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, v10);
              else
                *v18 -= 2;
            }
            v17 += 2;
            v16 -= 16;
          }
          while (v16);
        }
        v19 = *(WTF **)(v11 + 16);
        if ((WTF *)(v11 + 32) != v19 && v19 != 0)
        {
          *(_QWORD *)(v11 + 16) = 0;
          *(_DWORD *)(v11 + 24) = 0;
          WTF::fastFree(v19, v10);
        }
        v21 = *(_QWORD *)(v11 + 8);
        *(_QWORD *)(v11 + 8) = 0;
        if (v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
        WTF::fastFree((WTF *)v11, v10);
        v9 = *(WebCore::MutableStyleProperties **)(v8 + 8);
      }
      else
      {
        --*(_DWORD *)v11;
      }
    }
    WebCore::MutableStyleProperties::setProperty(v9, 13, v7, 0);
    WebCore::EditingStyle::extractFontSizeDelta((WebCore::EditingStyle *)v8);
    v31 = (WTF *)v8;
    v6 = WebCore::applyCommandToFrame(*(WebCore::Document **)(a1 + 296), a3, 4u, &v31);
    v13 = v31;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
      {
        v22 = *((_QWORD *)v31 + 1);
        *((_QWORD *)v31 + 1) = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 1)
          {
            v23 = *(unsigned int *)(v22 + 28);
            if ((_DWORD)v23)
            {
              v24 = 16 * v23;
              v25 = (_DWORD **)(*(_QWORD *)(v22 + 16) + 8);
              do
              {
                v26 = *v25;
                *v25 = 0;
                if (v26)
                {
                  if (*v26 == 2)
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v26, v12);
                  else
                    *v26 -= 2;
                }
                v25 += 2;
                v24 -= 16;
              }
              while (v24);
            }
            v27 = *(WTF **)(v22 + 16);
            if ((WTF *)(v22 + 32) != v27 && v27 != 0)
            {
              *(_QWORD *)(v22 + 16) = 0;
              *(_DWORD *)(v22 + 24) = 0;
              WTF::fastFree(v27, v12);
            }
            v29 = *(_QWORD *)(v22 + 8);
            *(_QWORD *)(v22 + 8) = 0;
            if (v29)
              (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
            WTF::fastFree((WTF *)v22, v12);
          }
          else
          {
            --*(_DWORD *)v22;
          }
        }
        WTF::fastFree(v13, v12);
      }
      else
      {
        --*(_DWORD *)v31;
      }
    }
  }
  return v6;
}

void WebCore::valueFontSize(WebCore *this@<X0>, WebCore *a2@<X8>)
{
  WebCore::Document *v6;
  uint64_t v7;
  WebCore::Editor *v8;
  void *v9;
  WebCore::Editor *v10;
  uint64_t v11;
  void *v12;
  WebCore *v13;

  v6 = (WebCore::Document *)*((_QWORD *)this + 37);
  v7 = *((_QWORD *)v6 + 382);
  if (!v7)
  {
    v13 = a2;
    v8 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v8, v6);
    v10 = (WebCore::Editor *)*((_QWORD *)v6 + 382);
    *((_QWORD *)v6 + 382) = v8;
    if (v10)
    {
      WebCore::Editor::~Editor(v10, v9);
      if (*(_DWORD *)v11)
      {
        *(_QWORD *)(v11 + 496) = 0;
        *(_OWORD *)(v11 + 464) = 0u;
        *(_OWORD *)(v11 + 480) = 0u;
        *(_OWORD *)(v11 + 432) = 0u;
        *(_OWORD *)(v11 + 448) = 0u;
        *(_OWORD *)(v11 + 400) = 0u;
        *(_OWORD *)(v11 + 416) = 0u;
        *(_OWORD *)(v11 + 368) = 0u;
        *(_OWORD *)(v11 + 384) = 0u;
        *(_OWORD *)(v11 + 336) = 0u;
        *(_OWORD *)(v11 + 352) = 0u;
        *(_OWORD *)(v11 + 304) = 0u;
        *(_OWORD *)(v11 + 320) = 0u;
        *(_OWORD *)(v11 + 272) = 0u;
        *(_OWORD *)(v11 + 288) = 0u;
        *(_OWORD *)(v11 + 240) = 0u;
        *(_OWORD *)(v11 + 256) = 0u;
        *(_OWORD *)(v11 + 208) = 0u;
        *(_OWORD *)(v11 + 224) = 0u;
        *(_OWORD *)(v11 + 176) = 0u;
        *(_OWORD *)(v11 + 192) = 0u;
        *(_OWORD *)(v11 + 144) = 0u;
        *(_OWORD *)(v11 + 160) = 0u;
        *(_OWORD *)(v11 + 112) = 0u;
        *(_OWORD *)(v11 + 128) = 0u;
        *(_OWORD *)(v11 + 80) = 0u;
        *(_OWORD *)(v11 + 96) = 0u;
        *(_OWORD *)(v11 + 48) = 0u;
        *(_OWORD *)(v11 + 64) = 0u;
        *(_OWORD *)(v11 + 16) = 0u;
        *(_OWORD *)(v11 + 32) = 0u;
        *(_OWORD *)v11 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v11, v12);
      }
    }
    v7 = *((_QWORD *)v6 + 382);
    a2 = v13;
  }
  WebCore::Editor::selectionStartCSSPropertyValue(a2, *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8), 13);
}

uint64_t WebCore::executeFontSizeDelta(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return WebCore::executeApplyStyle(a1, a3, 4u, 320, a4);
}

void WebCore::valueFontSizeDelta(WebCore *this@<X0>, WebCore *a2@<X8>)
{
  WebCore::Document *v6;
  uint64_t v7;
  WebCore::Editor *v8;
  void *v9;
  WebCore::Editor *v10;
  uint64_t v11;
  void *v12;
  WebCore *v13;

  v6 = (WebCore::Document *)*((_QWORD *)this + 37);
  v7 = *((_QWORD *)v6 + 382);
  if (!v7)
  {
    v13 = a2;
    v8 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v8, v6);
    v10 = (WebCore::Editor *)*((_QWORD *)v6 + 382);
    *((_QWORD *)v6 + 382) = v8;
    if (v10)
    {
      WebCore::Editor::~Editor(v10, v9);
      if (*(_DWORD *)v11)
      {
        *(_QWORD *)(v11 + 496) = 0;
        *(_OWORD *)(v11 + 464) = 0u;
        *(_OWORD *)(v11 + 480) = 0u;
        *(_OWORD *)(v11 + 432) = 0u;
        *(_OWORD *)(v11 + 448) = 0u;
        *(_OWORD *)(v11 + 400) = 0u;
        *(_OWORD *)(v11 + 416) = 0u;
        *(_OWORD *)(v11 + 368) = 0u;
        *(_OWORD *)(v11 + 384) = 0u;
        *(_OWORD *)(v11 + 336) = 0u;
        *(_OWORD *)(v11 + 352) = 0u;
        *(_OWORD *)(v11 + 304) = 0u;
        *(_OWORD *)(v11 + 320) = 0u;
        *(_OWORD *)(v11 + 272) = 0u;
        *(_OWORD *)(v11 + 288) = 0u;
        *(_OWORD *)(v11 + 240) = 0u;
        *(_OWORD *)(v11 + 256) = 0u;
        *(_OWORD *)(v11 + 208) = 0u;
        *(_OWORD *)(v11 + 224) = 0u;
        *(_OWORD *)(v11 + 176) = 0u;
        *(_OWORD *)(v11 + 192) = 0u;
        *(_OWORD *)(v11 + 144) = 0u;
        *(_OWORD *)(v11 + 160) = 0u;
        *(_OWORD *)(v11 + 112) = 0u;
        *(_OWORD *)(v11 + 128) = 0u;
        *(_OWORD *)(v11 + 80) = 0u;
        *(_OWORD *)(v11 + 96) = 0u;
        *(_OWORD *)(v11 + 48) = 0u;
        *(_OWORD *)(v11 + 64) = 0u;
        *(_OWORD *)(v11 + 16) = 0u;
        *(_OWORD *)(v11 + 32) = 0u;
        *(_OWORD *)v11 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v11, v12);
      }
    }
    v7 = *((_QWORD *)v6 + 382);
    a2 = v13;
  }
  WebCore::Editor::selectionStartCSSPropertyValue(a2, *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8), 320);
}

uint64_t WebCore::executeForeColor(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return WebCore::executeApplyStyle(a1, a3, 0x20u, 5, a4);
}

void WebCore::valueForeColor(WebCore *this@<X0>, WebCore *a2@<X8>)
{
  WebCore::Document *v6;
  uint64_t v7;
  WebCore::Editor *v8;
  void *v9;
  WebCore::Editor *v10;
  uint64_t v11;
  void *v12;
  WebCore *v13;

  v6 = (WebCore::Document *)*((_QWORD *)this + 37);
  v7 = *((_QWORD *)v6 + 382);
  if (!v7)
  {
    v13 = a2;
    v8 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v8, v6);
    v10 = (WebCore::Editor *)*((_QWORD *)v6 + 382);
    *((_QWORD *)v6 + 382) = v8;
    if (v10)
    {
      WebCore::Editor::~Editor(v10, v9);
      if (*(_DWORD *)v11)
      {
        *(_QWORD *)(v11 + 496) = 0;
        *(_OWORD *)(v11 + 464) = 0u;
        *(_OWORD *)(v11 + 480) = 0u;
        *(_OWORD *)(v11 + 432) = 0u;
        *(_OWORD *)(v11 + 448) = 0u;
        *(_OWORD *)(v11 + 400) = 0u;
        *(_OWORD *)(v11 + 416) = 0u;
        *(_OWORD *)(v11 + 368) = 0u;
        *(_OWORD *)(v11 + 384) = 0u;
        *(_OWORD *)(v11 + 336) = 0u;
        *(_OWORD *)(v11 + 352) = 0u;
        *(_OWORD *)(v11 + 304) = 0u;
        *(_OWORD *)(v11 + 320) = 0u;
        *(_OWORD *)(v11 + 272) = 0u;
        *(_OWORD *)(v11 + 288) = 0u;
        *(_OWORD *)(v11 + 240) = 0u;
        *(_OWORD *)(v11 + 256) = 0u;
        *(_OWORD *)(v11 + 208) = 0u;
        *(_OWORD *)(v11 + 224) = 0u;
        *(_OWORD *)(v11 + 176) = 0u;
        *(_OWORD *)(v11 + 192) = 0u;
        *(_OWORD *)(v11 + 144) = 0u;
        *(_OWORD *)(v11 + 160) = 0u;
        *(_OWORD *)(v11 + 112) = 0u;
        *(_OWORD *)(v11 + 128) = 0u;
        *(_OWORD *)(v11 + 80) = 0u;
        *(_OWORD *)(v11 + 96) = 0u;
        *(_OWORD *)(v11 + 48) = 0u;
        *(_OWORD *)(v11 + 64) = 0u;
        *(_OWORD *)(v11 + 16) = 0u;
        *(_OWORD *)(v11 + 32) = 0u;
        *(_OWORD *)v11 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v11, v12);
      }
    }
    v7 = *((_QWORD *)v6 + 382);
    a2 = v13;
  }
  WebCore::Editor::selectionStartCSSPropertyValue(a2, *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8), 5);
}

BOOL WebCore::executeFormatBlock(uint64_t a1, int a2, int a3, WTF::String *this)
{
  int32x4_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  int v8;
  _BYTE *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  _BOOL8 v16;
  uint64_t v17;
  WebCore::Node *v18;
  WTF::StringImpl **v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  WebCore::Node *v23;
  WTF::StringImpl *v24;
  WTF *v26;
  void *v27;
  WebCore::Node *v28;
  _QWORD v29[2];
  unsigned int v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;

  WTF::String::convertToASCIILowercase(this);
  v6 = v31;
  if (!v31)
    goto LABEL_55;
  v7 = *((unsigned int *)v31 + 1);
  v8 = *((_DWORD *)v31 + 4);
  if (!(_DWORD)v7)
    goto LABEL_16;
  v9 = (_BYTE *)*((_QWORD *)v31 + 1);
  if ((v8 & 4) != 0)
  {
    if (*v9 == 60)
    {
      LODWORD(v10) = v7 - 1;
      v11 = v9[(v7 - 1)];
      goto LABEL_6;
    }
LABEL_16:
    v31 = 0;
    v32 = v6;
    if ((v8 & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase();
      v14 = v32;
      v6 = (WTF::StringImpl *)v29[0];
      v29[0] = 0;
      v32 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
    goto LABEL_24;
  }
  if (*(_WORD *)v9 != 60)
    goto LABEL_16;
  LODWORD(v10) = v7 - 1;
  v11 = *(unsigned __int16 *)&v9[2 * (v7 - 1)];
LABEL_6:
  if (v11 != 62)
    goto LABEL_16;
  if (v7 < 2)
    goto LABEL_22;
  if (v10 >= (int)v7 - 2)
    v10 = (v7 - 2);
  else
    v10 = v10;
  v12 = v7 - 1;
  if ((v8 & 4) != 0)
  {
    if (v12 >= v10)
    {
      v10 |= 0x100000000uLL;
      goto LABEL_21;
    }
  }
  else if (v12 >= v10)
  {
LABEL_21:
    if ((v10 & 0x100000000) == 0)
    {
      WTF::AtomStringImpl::add();
      goto LABEL_23;
    }
LABEL_22:
    WTF::AtomStringImpl::add();
LABEL_23:
    v6 = (WTF::StringImpl *)v29[0];
LABEL_24:
    v32 = v6;
    goto LABEL_25;
  }
  __break(1u);
LABEL_55:
  v31 = 0;
  v32 = 0;
LABEL_25:
  WebCore::Document::parseQualifiedName((WTF::StringImpl **)&WebCore::HTMLNames::xhtmlNamespaceURI, (const WTF::AtomString *)&v32, (uint64_t)v29, v5);
  v16 = 0;
  v17 = v30;
  if (v30 != -1)
  {
    if (!v30)
    {
      v18 = *(WebCore::Node **)(a1 + 296);
      *((_DWORD *)v18 + 6) += 2;
      v19 = (WTF::StringImpl **)v29[0];
      v28 = v18;
      v29[0] = 0;
      v20 = WTF::fastMalloc((WTF *)0x140);
      v21 = WebCore::EditCommand::EditCommand(v20, (uint64_t *)&v28, 59);
      *(_OWORD *)(v21 + 248) = 0u;
      *(_OWORD *)(v21 + 264) = 0u;
      if (v19)
        ++*(_DWORD *)v19;
      *(_QWORD *)(v20 + 288) = 0;
      *(_QWORD *)(v20 + 296) = 0;
      *(_QWORD *)(v20 + 280) = v19;
      *(_DWORD *)(v20 + 304) = 0;
      *(_BYTE *)(v20 + 308) &= 0xF0u;
      *(_QWORD *)v20 = off_1E33AA1D0;
      *(_BYTE *)(v20 + 312) = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v19);
          WTF::fastFree(v26, v27);
        }
        else
        {
          --*(_DWORD *)v19;
        }
      }
      v23 = v28;
      v28 = 0;
      if (v23)
      {
        if (*((_DWORD *)v23 + 6) == 2)
        {
          if ((*((_WORD *)v23 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v23, v22);
        }
        else
        {
          *((_DWORD *)v23 + 6) -= 2;
        }
      }
      WebCore::CompositeEditCommand::apply((WebCore::CompositeEditCommand *)v20);
      v16 = *(_BYTE *)(v20 + 312) != 0;
      if (*(_DWORD *)(v20 + 8) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      else
        --*(_DWORD *)(v20 + 8);
    }
    ((void (*)(WebCore::Node **, _QWORD *))off_1E33ACC50[v17])(&v28, v29);
  }
  v32 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v15);
    else
      *(_DWORD *)v6 -= 2;
  }
  v24 = v31;
  v31 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v15);
    else
      *(_DWORD *)v24 -= 2;
  }
  return v16;
}

uint64_t WebCore::valueFormatBlock@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  void *v9;
  int v10;
  void *v11;
  uint64_t v12;
  WebCore::Node *v13;
  WebCore::Node *v14;
  WebCore::Node *v15;
  uint64_t i;
  __int16 v17;
  WebCore::Node *v19;
  _DWORD *v20;
  _DWORD *v21;
  WebCore::Node *v22[2];
  WebCore::Node *v23;
  char v24;

  v5 = *(_QWORD *)(*(_QWORD *)(this + 296) + 3064);
  if (*(_BYTE *)(v5 + 153))
  {
    v6 = *(_QWORD *)(v5 + 120);
    if (!v6 || (*(_BYTE *)(v6 + 22) & 8) != 0)
    {
      v7 = *(_QWORD *)(v5 + 136);
      if (!v7 || (*(_BYTE *)(v7 + 22) & 8) != 0)
      {
        if (v6)
        {
          v8 = *(_BYTE *)(v5 + 132) & 7;
          if (v8 <= 4)
          {
            if (((1 << v8) & 0x19) == 0)
              goto LABEL_84;
            while (1)
            {
              *(_DWORD *)(v6 + 24) += 2;
              this = WebCore::Node::computeEditability(v6, 0, 0);
              v10 = this;
              if (*(_DWORD *)(v6 + 24) == 2)
              {
                if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
                  this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v6, v9);
              }
              else
              {
                *(_DWORD *)(v6 + 24) -= 2;
              }
              if (!v10)
                goto LABEL_85;
              this = (uint64_t)WebCore::VisibleSelection::firstRange((WebCore::Node *)(v5 + 56), v22);
              if (!v24)
                goto LABEL_85;
              this = (uint64_t)WebCore::commonInclusiveAncestor<(WebCore::TreeType)2>((uint64_t *)v22);
              v12 = this;
              if (!this)
                goto LABEL_58;
              *(_DWORD *)(this + 24) += 2;
              while (1)
              {
                v6 = v12;
                if ((*(_WORD *)(v12 + 28) & 8) != 0)
                {
                  this = WebCore::isElementForFormatBlock(*(_WORD *)(*(_QWORD *)(v12 + 96) + 10));
                  if ((this & 1) != 0)
                    break;
                }
                v12 = *(_QWORD *)(v12 + 32);
                if (v12)
                  *(_DWORD *)(v12 + 24) += 2;
                if (*(_DWORD *)(v6 + 24) == 2)
                {
                  if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
                    this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v6, v11);
                }
                else
                {
                  *(_DWORD *)(v6 + 24) -= 2;
                }
                if (!v12)
                  goto LABEL_58;
              }
              *(_DWORD *)(v12 + 24) += 2;
              if (v24)
                break;
              __break(1u);
LABEL_84:
              v6 = *(_QWORD *)(v6 + 32);
              if (!v6)
                goto LABEL_85;
            }
            v13 = v22[0];
            if (!v22[0])
              goto LABEL_54;
            v14 = 0;
            v15 = v22[0];
            do
            {
              this = WebCore::Node::hasEditableStyle((uint64_t)v15, 0);
              if (!(_DWORD)this)
                break;
              if ((*((_WORD *)v15 + 14) & 8) != 0)
                v14 = v15;
              i = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v13 + 5) + 8) + 1272);
              if (i)
              {
                if ((*(_WORD *)(i + 28) & 0x10) != 0
                  && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
                {
                  for (i = *(_QWORD *)(i + 80); i; i = *(_QWORD *)(i + 56))
                  {
                    if ((*(_WORD *)(i + 28) & 0x10) != 0
                      && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
                    {
                      break;
                    }
                  }
                }
                else
                {
                  i = 0;
                }
              }
              if ((WebCore::Node *)i == v15)
                break;
              v15 = (WebCore::Node *)*((_QWORD *)v15 + 4);
            }
            while (v15);
            if (!v14 || (WebCore::Node *)v6 == v14)
              goto LABEL_54;
            v17 = *(_WORD *)(v6 + 28);
            if ((v17 & 0xF000) == 0x9000)
            {
              v12 = v6;
              if (**((_QWORD **)v14 + 5) == v6)
              {
                v12 = v6;
                if ((*((_WORD *)v14 + 14) & 0xF000) != 0x9000)
                {
                  v12 = v6;
                  if ((*((_BYTE *)v14 + 22) & 8) != 0)
                    goto LABEL_54;
                }
              }
            }
            else
            {
              v12 = v6;
              if ((v17 & 4) != 0)
              {
                v12 = v6;
                if (*(_QWORD *)(v6 + 80))
                {
                  v12 = v6;
                  if (((*((unsigned __int8 *)v14 + 22) ^ *(unsigned __int8 *)(v6 + 22)) & 8) == 0)
                  {
                    do
                      v14 = (WebCore::Node *)*((_QWORD *)v14 + 4);
                    while (v14 != (WebCore::Node *)v6 && v14 != 0);
                    v12 = v6;
                    if (v14)
                    {
LABEL_54:
                      if (*(_DWORD *)(v6 + 24) == 2)
                      {
                        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
                          this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v6, v11);
                        v12 = 0;
                      }
                      else
                      {
                        v12 = 0;
                        *(_DWORD *)(v6 + 24) -= 2;
                      }
                    }
                  }
                }
              }
            }
            if (*(_DWORD *)(v6 + 24) == 2)
            {
              if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
                this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v6, v11);
            }
            else
            {
              *(_DWORD *)(v6 + 24) -= 2;
            }
LABEL_58:
            if (v24)
            {
              v19 = v23;
              v23 = 0;
              if (v19)
              {
                if (*((_DWORD *)v19 + 6) == 2)
                {
                  if ((*((_WORD *)v19 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v19, v11);
                }
                else
                {
                  *((_DWORD *)v19 + 6) -= 2;
                }
              }
              this = (uint64_t)v22[0];
              v22[0] = 0;
              if (this)
              {
                if (*(_DWORD *)(this + 24) == 2)
                {
                  if ((*(_WORD *)(this + 30) & 0x400) == 0)
                    this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)this, v11);
                }
                else
                {
                  *(_DWORD *)(this + 24) -= 2;
                }
              }
            }
            if (v12)
            {
              v20 = *(_DWORD **)(*(_QWORD *)(v12 + 96) + 24);
              if (v20)
                *v20 += 2;
              *a2 = v20;
              if (*(_DWORD *)(v12 + 24) == 2)
              {
                if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
                  return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v12, v11);
              }
              else
              {
                *(_DWORD *)(v12 + 24) -= 2;
              }
              return this;
            }
          }
        }
      }
    }
  }
LABEL_85:
  v21 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v21 += 2;
  *a2 = v21;
  return this;
}

uint64_t WebCore::executeForwardDelete(uint64_t a1, uint64_t a2, int a3)
{
  WebCore::Node *v3;
  void *v4;
  WebCore::Node *v5;
  uint64_t v6;
  WebCore::Document *v7;
  uint64_t v8;
  WebCore::Editor *v10;
  void *v11;
  WebCore::Editor *v12;
  uint64_t v13;
  void *v14;
  WebCore::Node *v15;

  if ((a3 - 1) >= 2)
  {
    if (a3)
    {
      return 0;
    }
    else
    {
      v7 = *(WebCore::Document **)(a1 + 296);
      v8 = *((_QWORD *)v7 + 382);
      if (!v8)
      {
        v10 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
        WebCore::Editor::Editor(v10, v7);
        v12 = (WebCore::Editor *)*((_QWORD *)v7 + 382);
        *((_QWORD *)v7 + 382) = v10;
        if (v12)
        {
          WebCore::Editor::~Editor(v12, v11);
          if (*(_DWORD *)v13)
          {
            *(_QWORD *)(v13 + 496) = 0;
            *(_OWORD *)(v13 + 464) = 0u;
            *(_OWORD *)(v13 + 480) = 0u;
            *(_OWORD *)(v13 + 432) = 0u;
            *(_OWORD *)(v13 + 448) = 0u;
            *(_OWORD *)(v13 + 400) = 0u;
            *(_OWORD *)(v13 + 416) = 0u;
            *(_OWORD *)(v13 + 368) = 0u;
            *(_OWORD *)(v13 + 384) = 0u;
            *(_OWORD *)(v13 + 336) = 0u;
            *(_OWORD *)(v13 + 352) = 0u;
            *(_OWORD *)(v13 + 304) = 0u;
            *(_OWORD *)(v13 + 320) = 0u;
            *(_OWORD *)(v13 + 272) = 0u;
            *(_OWORD *)(v13 + 288) = 0u;
            *(_OWORD *)(v13 + 240) = 0u;
            *(_OWORD *)(v13 + 256) = 0u;
            *(_OWORD *)(v13 + 208) = 0u;
            *(_OWORD *)(v13 + 224) = 0u;
            *(_OWORD *)(v13 + 176) = 0u;
            *(_OWORD *)(v13 + 192) = 0u;
            *(_OWORD *)(v13 + 144) = 0u;
            *(_OWORD *)(v13 + 160) = 0u;
            *(_OWORD *)(v13 + 112) = 0u;
            *(_OWORD *)(v13 + 128) = 0u;
            *(_OWORD *)(v13 + 80) = 0u;
            *(_OWORD *)(v13 + 96) = 0u;
            *(_OWORD *)(v13 + 48) = 0u;
            *(_OWORD *)(v13 + 64) = 0u;
            *(_OWORD *)(v13 + 16) = 0u;
            *(_OWORD *)(v13 + 32) = 0u;
            *(_OWORD *)v13 = 0u;
          }
          else
          {
            WTF::fastFree((WTF *)v13, v14);
          }
        }
        v8 = *((_QWORD *)v7 + 382);
      }
      v6 = 1;
      WebCore::Editor::deleteWithDirection(v8, 0, 0, 0, 1);
    }
  }
  else
  {
    v3 = *(WebCore::Node **)(a1 + 296);
    *((_DWORD *)v3 + 6) += 2;
    v15 = v3;
    WebCore::TypingCommand::forwardDeleteKeyPressed((uint64_t *)&v15, 0, 0);
    v5 = v15;
    v15 = 0;
    if (v5)
    {
      if (*((_DWORD *)v5 + 6) == 2)
      {
        if ((*((_WORD *)v5 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v5, v4);
      }
      else
      {
        *((_DWORD *)v5 + 6) -= 2;
      }
    }
    return 1;
  }
  return v6;
}

uint64_t WebCore::executeIgnoreSpelling(uint64_t a1)
{
  WebCore::Document *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  WebCore::Node *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WebCore::Editor *v13;
  void *v14;
  WebCore::Editor *v15;
  uint64_t v16;
  void *v17;
  WTF::StringImpl *v18[2];
  WebCore::Node *v19;
  char v20;

  v1 = *(WebCore::Document **)(a1 + 296);
  v2 = *((_QWORD *)v1 + 382);
  if (!v2)
  {
    v13 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v13, v1);
    v15 = (WebCore::Editor *)*((_QWORD *)v1 + 382);
    *((_QWORD *)v1 + 382) = v13;
    if (v15)
    {
      WebCore::Editor::~Editor(v15, v14);
      if (*(_DWORD *)v16)
      {
        *(_QWORD *)(v16 + 496) = 0;
        *(_OWORD *)(v16 + 464) = 0u;
        *(_OWORD *)(v16 + 480) = 0u;
        *(_OWORD *)(v16 + 432) = 0u;
        *(_OWORD *)(v16 + 448) = 0u;
        *(_OWORD *)(v16 + 400) = 0u;
        *(_OWORD *)(v16 + 416) = 0u;
        *(_OWORD *)(v16 + 368) = 0u;
        *(_OWORD *)(v16 + 384) = 0u;
        *(_OWORD *)(v16 + 336) = 0u;
        *(_OWORD *)(v16 + 352) = 0u;
        *(_OWORD *)(v16 + 304) = 0u;
        *(_OWORD *)(v16 + 320) = 0u;
        *(_OWORD *)(v16 + 272) = 0u;
        *(_OWORD *)(v16 + 288) = 0u;
        *(_OWORD *)(v16 + 240) = 0u;
        *(_OWORD *)(v16 + 256) = 0u;
        *(_OWORD *)(v16 + 208) = 0u;
        *(_OWORD *)(v16 + 224) = 0u;
        *(_OWORD *)(v16 + 176) = 0u;
        *(_OWORD *)(v16 + 192) = 0u;
        *(_OWORD *)(v16 + 144) = 0u;
        *(_OWORD *)(v16 + 160) = 0u;
        *(_OWORD *)(v16 + 112) = 0u;
        *(_OWORD *)(v16 + 128) = 0u;
        *(_OWORD *)(v16 + 80) = 0u;
        *(_OWORD *)(v16 + 96) = 0u;
        *(_OWORD *)(v16 + 48) = 0u;
        *(_OWORD *)(v16 + 64) = 0u;
        *(_OWORD *)(v16 + 16) = 0u;
        *(_OWORD *)(v16 + 32) = 0u;
        *(_OWORD *)v16 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v16, v17);
      }
    }
    v2 = *((_QWORD *)v1 + 382);
  }
  v3 = *(_QWORD *)(v2 + 8);
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 8) + 3064) + 56), v18);
    if (v20)
    {
      WebCore::removeMarkers((const WebCore::SimpleRange *)v18, 1, 0);
      if (v20)
      {
        v5 = v19;
        v19 = 0;
        if (v5)
        {
          if (*((_DWORD *)v5 + 6) == 2)
          {
            if ((*((_WORD *)v5 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v5, v4);
          }
          else
          {
            *((_DWORD *)v5 + 6) -= 2;
          }
        }
        v6 = v18[0];
        v18[0] = 0;
        if (v6)
        {
          if (*((_DWORD *)v6 + 6) == 2)
          {
            if ((*((_WORD *)v6 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v6, v4);
          }
          else
          {
            *((_DWORD *)v6 + 6) -= 2;
          }
        }
      }
    }
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 8) + 688);
    if (!v7)
      v7 = WebCore::Document::ensureQuirks(*(WebCore::Document **)(*(_QWORD *)(v2 + 16) + 8));
    if (*(_BYTE *)(v7 + 66))
      v8 = 512;
    else
      v8 = 2560;
    WebCore::Editor::selectedText(v2, v8, v18);
    v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 8) + 8) + 584))(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 8));
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 24))(v9, v18);
    v11 = v18[0];
    v18[0] = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  return 1;
}

uint64_t WebCore::executeIndent(uint64_t a1)
{
  WebCore::Node *v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  void *v6;
  WebCore::Node *v7;
  WebCore::Node *v9;
  WTF::StringImpl *v10;

  v1 = *(WebCore::Node **)(a1 + 296);
  *((_DWORD *)v1 + 6) += 2;
  v9 = v1;
  v2 = WTF::fastMalloc((WTF *)0x140);
  WTF::AtomStringImpl::add();
  WebCore::EditCommand::EditCommand(v2, (uint64_t *)&v9, 59);
  *(_OWORD *)(v2 + 248) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_QWORD *)v2 = off_1E33A9B18;
  v4 = WebCore::HTMLNames::blockquoteTag;
  if (WebCore::HTMLNames::blockquoteTag)
    ++*(_DWORD *)WebCore::HTMLNames::blockquoteTag;
  *(_QWORD *)(v2 + 280) = v4;
  v5 = v10;
  if (v10)
    *(_DWORD *)v10 += 2;
  *(_QWORD *)(v2 + 288) = v5;
  *(_QWORD *)(v2 + 296) = 0;
  *(_DWORD *)(v2 + 304) = 0;
  *(_BYTE *)(v2 + 308) &= 0xF0u;
  v10 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  *(_QWORD *)v2 = off_1E33ACCF0;
  *(_DWORD *)(v2 + 312) = 0;
  WebCore::CompositeEditCommand::apply((WebCore::CompositeEditCommand *)v2);
  if (*(_DWORD *)(v2 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  else
    --*(_DWORD *)(v2 + 8);
  v7 = v9;
  v9 = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 6) == 2)
    {
      if ((*((_WORD *)v7 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v7, v6);
    }
    else
    {
      *((_DWORD *)v7 + 6) -= 2;
    }
  }
  return 1;
}

uint64_t WebCore::executeInsertBacktab(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9;

  if (a2)
  {
    v3 = *(_QWORD *)(a2 + 48);
    if (v3)
    {
      if ((*(_QWORD *)(v3 + 16) & 0x2000000000000) != 0)
        a1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 528) + 8);
    }
  }
  v4 = *(_QWORD *)(a1 + 640);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = WebCore::EventHandler::handleTextInputEvent(v4, (WebCore::Document *)&v9, a2, 4);
  v7 = v9;
  v9 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  return v6;
}

uint64_t WebCore::executeInsertHTML(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int **a4)
{
  void *v5;
  WebCore::Node *v6;
  WebCore::Node *v8;

  WebCore::createFragmentFromMarkup(*(_QWORD *)(a1 + 296), a4, MEMORY[0x1E0CBF738], 1, (unint64_t)&v8);
  WebCore::executeInsertFragment(*(WebCore::Node **)(a1 + 296), (uint64_t *)&v8);
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*((_DWORD *)v6 + 6) == 2)
    {
      if ((*((_WORD *)v6 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v6, v5);
    }
    else
    {
      *((_DWORD *)v6 + 6) -= 2;
    }
  }
  return 1;
}

BOOL WebCore::executeInsertHorizontalRule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _BOOL8 inserted;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::Node *v24;
  WTF::StringImpl *v25;

  v6 = *(_QWORD *)(a1 + 296);
  v7 = bmalloc::api::isoAllocate();
  v9 = v7;
  *(_OWORD *)(v7 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v7 + 24) = 0x101C00000002;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = v6 + 96;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  ++*(_DWORD *)(v6 + 3324);
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  v10 = WebCore::HTMLNames::hrTag;
  if (WebCore::HTMLNames::hrTag)
    ++*(_DWORD *)WebCore::HTMLNames::hrTag;
  *(_QWORD *)(v7 + 96) = v10;
  *(_QWORD *)(v7 + 104) = 0;
  *(_QWORD *)v7 = off_1E33BDAD0;
  v11 = *a4;
  if (*a4 && *(_DWORD *)(v11 + 4))
  {
    if ((*(_BYTE *)(v11 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v11 += 2;
      v25 = (WTF::StringImpl *)v11;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase((WTF::AtomStringImpl *)v11, v8);
      v18 = *(_QWORD *)(v9 + 104);
      if (v18)
      {
        v19 = *(_DWORD *)(v18 + 4);
        if ((v19 & 1) != 0)
        {
          v20 = *(uint64_t **)(v18 + 40);
          v21 = *(_DWORD *)(v18 + 52);
        }
        else
        {
          v20 = (uint64_t *)(v18 + 32);
          v21 = v19 >> 5;
        }
        if (v21)
        {
          v22 = 0;
          v15 = 0xFFFFFFFFLL;
          while (1)
          {
            v23 = *v20;
            if (*v20 == WebCore::HTMLNames::idAttr
              || *(_QWORD *)(v23 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
              && *(_QWORD *)(v23 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
            {
              break;
            }
            ++v22;
            v20 += 2;
            if (v21 == v22)
              goto LABEL_11;
          }
          v15 = v22;
          goto LABEL_11;
        }
      }
    }
    v15 = 0xFFFFFFFFLL;
LABEL_11:
    WebCore::Element::setAttributeInternal((WTF::StringImpl *)v9, v15, (WebCore::TreeScope *)&WebCore::HTMLNames::idAttr, &v25, 0);
    v17 = v25;
    v25 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
  }
  v24 = (WebCore::Node *)v9;
  v25 = 0;
  inserted = WebCore::executeInsertNode(a1, &v24);
  if (*(_DWORD *)(v9 + 24) == 2)
  {
    if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v9, v12);
  }
  else
  {
    *(_DWORD *)(v9 + 24) -= 2;
  }
  WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref((uint64_t *)&v25);
  return inserted;
}

BOOL WebCore::executeInsertImage(uint64_t a1, uint64_t a2, uint64_t a3, WTF::StringImpl **a4)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WebCore::HTMLLabelElement *v8;
  void *v9;
  _BOOL8 inserted;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WebCore::HTMLLabelElement *v20;
  WTF::StringImpl *v21;

  WebCore::HTMLImageElement::create(*(WebCore::HTMLImageElement **)(a1 + 296), (uint64_t *)&v20);
  v7 = *a4;
  if (!*a4)
  {
    v8 = v20;
    goto LABEL_3;
  }
  v8 = v20;
  if (*((_DWORD *)v7 + 1))
  {
    if ((*((_BYTE *)v7 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v7 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(v7, v6);
      v7 = v21;
    }
    v21 = v7;
    v12 = *((_QWORD *)v8 + 13);
    if (!v12)
      goto LABEL_24;
    v13 = *(_DWORD *)(v12 + 4);
    if ((v13 & 1) != 0)
    {
      v14 = *(uint64_t **)(v12 + 40);
      v15 = *(_DWORD *)(v12 + 52);
      if (!v15)
      {
LABEL_24:
        v16 = 0xFFFFFFFFLL;
LABEL_25:
        WebCore::Element::setAttributeInternal(v8, v16, (WebCore::TreeScope *)&WebCore::HTMLNames::srcAttr, &v21, 0);
        v19 = v21;
        v21 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v18);
          else
            *(_DWORD *)v19 -= 2;
        }
        goto LABEL_3;
      }
    }
    else
    {
      v14 = (uint64_t *)(v12 + 32);
      v15 = v13 >> 5;
      if (!v15)
        goto LABEL_24;
    }
    v16 = 0;
    while (1)
    {
      v17 = *v14;
      if (*v14 == WebCore::HTMLNames::srcAttr
        || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
        && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
      {
        goto LABEL_25;
      }
      ++v16;
      v14 += 2;
      if (v15 == v16)
        goto LABEL_24;
    }
  }
LABEL_3:
  v21 = v8;
  inserted = WebCore::executeInsertNode(a1, &v21);
  if (v8)
  {
    if (*((_DWORD *)v8 + 6) == 2)
    {
      if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v8, v9);
    }
    else
    {
      *((_DWORD *)v8 + 6) -= 2;
    }
  }
  return inserted;
}

uint64_t WebCore::executeInsertLineBreak(uint64_t a1, uint64_t a2, int a3)
{
  WTF::StringImpl *v3;
  void *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v13;

  if ((a3 - 1) >= 2)
  {
    if (a3)
    {
      return 0;
    }
    else
    {
      if (a2)
      {
        v8 = *(_QWORD *)(a2 + 48);
        if (v8)
        {
          if ((*(_QWORD *)(v8 + 16) & 0x2000000000000) != 0)
            a1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 40) + 8) + 528) + 8);
        }
      }
      v9 = *(_QWORD *)(a1 + 640);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v6 = WebCore::EventHandler::handleTextInputEvent(v9, (WebCore::Document *)&v13, a2, 2);
      v11 = v13;
      v13 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
  }
  else
  {
    v3 = *(WTF::StringImpl **)(a1 + 296);
    *((_DWORD *)v3 + 6) += 2;
    v13 = v3;
    WebCore::TypingCommand::insertLineBreak(&v13, 0);
    v5 = v13;
    v13 = 0;
    if (v5)
    {
      if (*((_DWORD *)v5 + 6) == 2)
      {
        if ((*((_WORD *)v5 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v5, v4);
      }
      else
      {
        *((_DWORD *)v5 + 6) -= 2;
      }
    }
    return 1;
  }
  return v6;
}

uint64_t WebCore::executeInsertNewline(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  char v7;
  uint64_t v8;
  WebCore::Document *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  void *v14;
  int v15;
  int v16;
  uint64_t v17;
  WebCore::Editor *v18;
  void *v19;
  WebCore::Editor *v20;
  uint64_t v21;
  void *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;

  if (a2)
  {
    v4 = *(_QWORD *)(a2 + 48);
    if (v4)
    {
      if ((*(_QWORD *)(v4 + 16) & 0x2000000000000) != 0)
      {
        v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 40) + 8) + 528);
        if (!v17)
        {
          a1 = 0;
LABEL_21:
          v7 = 1;
          goto LABEL_6;
        }
        a1 = *(_QWORD *)(v17 + 8);
        if (!a1)
          goto LABEL_21;
      }
    }
  }
  v5 = (unsigned int *)(a1 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = 0;
LABEL_6:
  v8 = *(_QWORD *)(a1 + 640);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v9 = *(WebCore::Document **)(a1 + 296);
  v10 = *((_QWORD *)v9 + 382);
  if (!v10)
  {
    v18 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v18, v9);
    v20 = (WebCore::Editor *)*((_QWORD *)v9 + 382);
    *((_QWORD *)v9 + 382) = v18;
    if (v20)
    {
      WebCore::Editor::~Editor(v20, v19);
      if (*(_DWORD *)v21)
      {
        *(_QWORD *)(v21 + 496) = 0;
        *(_OWORD *)(v21 + 464) = 0u;
        *(_OWORD *)(v21 + 480) = 0u;
        *(_OWORD *)(v21 + 432) = 0u;
        *(_OWORD *)(v21 + 448) = 0u;
        *(_OWORD *)(v21 + 400) = 0u;
        *(_OWORD *)(v21 + 416) = 0u;
        *(_OWORD *)(v21 + 368) = 0u;
        *(_OWORD *)(v21 + 384) = 0u;
        *(_OWORD *)(v21 + 336) = 0u;
        *(_OWORD *)(v21 + 352) = 0u;
        *(_OWORD *)(v21 + 304) = 0u;
        *(_OWORD *)(v21 + 320) = 0u;
        *(_OWORD *)(v21 + 272) = 0u;
        *(_OWORD *)(v21 + 288) = 0u;
        *(_OWORD *)(v21 + 240) = 0u;
        *(_OWORD *)(v21 + 256) = 0u;
        *(_OWORD *)(v21 + 208) = 0u;
        *(_OWORD *)(v21 + 224) = 0u;
        *(_OWORD *)(v21 + 176) = 0u;
        *(_OWORD *)(v21 + 192) = 0u;
        *(_OWORD *)(v21 + 144) = 0u;
        *(_OWORD *)(v21 + 160) = 0u;
        *(_OWORD *)(v21 + 112) = 0u;
        *(_OWORD *)(v21 + 128) = 0u;
        *(_OWORD *)(v21 + 80) = 0u;
        *(_OWORD *)(v21 + 96) = 0u;
        *(_OWORD *)(v21 + 48) = 0u;
        *(_OWORD *)(v21 + 64) = 0u;
        *(_OWORD *)(v21 + 16) = 0u;
        *(_OWORD *)(v21 + 32) = 0u;
        *(_OWORD *)v21 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v21, v22);
      }
    }
    v10 = *((_QWORD *)v9 + 382);
  }
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 16) + 8) + 3064);
  v12 = *(_QWORD *)(v11 + 120);
  if (!v12)
    goto LABEL_27;
  v13 = *(_BYTE *)(v11 + 132) & 7;
  if (v13 > 4)
    goto LABEL_27;
  if (((1 << v13) & 0x19) == 0)
  {
    v12 = *(_QWORD *)(v12 + 32);
    if (!v12)
      goto LABEL_27;
  }
  *(_DWORD *)(v12 + 24) += 2;
  v15 = WebCore::Node::computeEditability(v12, 0, 1);
  if (*(_DWORD *)(v12 + 24) == 2)
  {
    if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v12, v14);
  }
  else
  {
    *(_DWORD *)(v12 + 24) -= 2;
  }
  if (v15 == 2)
    v16 = 0;
  else
LABEL_27:
    v16 = 2;
  v24 = WebCore::EventHandler::handleTextInputEvent(v8, (WebCore::Document *)&v32, a2, v16);
  v25 = v32;
  v32 = 0;
  if (!v25)
  {
LABEL_31:
    if ((v7 & 1) != 0)
      return v24;
    goto LABEL_32;
  }
  if (*(_DWORD *)v25 != 2)
  {
    *(_DWORD *)v25 -= 2;
    goto LABEL_31;
  }
  WTF::StringImpl::destroy(v25, v23);
  if ((v7 & 1) != 0)
    return v24;
LABEL_32:
  v26 = (unsigned int *)(a1 + 8);
  do
  {
    v27 = __ldaxr(v26);
    v28 = v27 - 1;
  }
  while (__stlxr(v28, v26));
  if (!v28)
  {
    atomic_store(1u, v26);
    v30 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v30 = off_1E31FE290;
    *((_QWORD *)v30 + 1) = v26;
    v32 = v30;
    WTF::ensureOnMainThread();
    v31 = v32;
    v32 = 0;
    if (v31)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v31 + 8))(v31);
  }
  return v24;
}

uint64_t WebCore::executeInsertNewlineInQuotedContent(uint64_t a1)
{
  WebCore::Node *v1;
  void *v2;
  WebCore::Node *v3;
  WebCore::Node *v5;

  v1 = *(WebCore::Node **)(a1 + 296);
  *((_DWORD *)v1 + 6) += 2;
  v5 = v1;
  WebCore::TypingCommand::insertParagraphSeparatorInQuotedContent(&v5);
  v3 = v5;
  v5 = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 6) == 2)
    {
      if ((*((_WORD *)v3 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v3, v2);
    }
    else
    {
      *((_DWORD *)v3 + 6) -= 2;
    }
  }
  return 1;
}

uint64_t WebCore::executeInsertOrderedList(uint64_t a1)
{
  WebCore::Node *v1;
  _DWORD *v2;
  uint64_t v3;
  void *v4;
  WebCore::Node *v5;
  WebCore::Node *v7;

  v1 = *(WebCore::Node **)(a1 + 296);
  *((_DWORD *)v1 + 6) += 2;
  v7 = v1;
  v2 = (_DWORD *)WTF::fastMalloc((WTF *)0x128);
  v3 = WebCore::EditCommand::EditCommand((uint64_t)v2, (uint64_t *)&v7, 59);
  *(_OWORD *)(v3 + 248) = 0u;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)v3 = off_1E33ACEF8;
  *(_QWORD *)(v3 + 280) = 0;
  *(_BYTE *)(v3 + 288) = 0;
  WebCore::CompositeEditCommand::apply((WebCore::CompositeEditCommand *)v3);
  if (v2[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  else
    --v2[2];
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 6) == 2)
    {
      if ((*((_WORD *)v5 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v5, v4);
    }
    else
    {
      *((_DWORD *)v5 + 6) -= 2;
    }
  }
  return 1;
}

uint64_t WebCore::stateOrderedList(WebCore *this, WebCore::LocalFrame *a2, WebCore::Event *a3)
{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  const WebCore::QualifiedName *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  __int16 v18;
  WebCore::Editor *v19;
  WebCore::Editor *v20;
  uint64_t v21;

  v3 = (WebCore::Document *)*((_QWORD *)this + 37);
  v4 = *((_QWORD *)v3 + 382);
  if (!v4)
  {
    v19 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v19, v3);
    v20 = (WebCore::Editor *)*((_QWORD *)v3 + 382);
    *((_QWORD *)v3 + 382) = v19;
    if (v20)
    {
      WebCore::Editor::~Editor(v20, a2);
      if (*(_DWORD *)v21)
      {
        *(_QWORD *)(v21 + 496) = 0;
        *(_OWORD *)(v21 + 464) = 0u;
        *(_OWORD *)(v21 + 480) = 0u;
        *(_OWORD *)(v21 + 432) = 0u;
        *(_OWORD *)(v21 + 448) = 0u;
        *(_OWORD *)(v21 + 400) = 0u;
        *(_OWORD *)(v21 + 416) = 0u;
        *(_OWORD *)(v21 + 368) = 0u;
        *(_OWORD *)(v21 + 384) = 0u;
        *(_OWORD *)(v21 + 336) = 0u;
        *(_OWORD *)(v21 + 352) = 0u;
        *(_OWORD *)(v21 + 304) = 0u;
        *(_OWORD *)(v21 + 320) = 0u;
        *(_OWORD *)(v21 + 272) = 0u;
        *(_OWORD *)(v21 + 288) = 0u;
        *(_OWORD *)(v21 + 240) = 0u;
        *(_OWORD *)(v21 + 256) = 0u;
        *(_OWORD *)(v21 + 208) = 0u;
        *(_OWORD *)(v21 + 224) = 0u;
        *(_OWORD *)(v21 + 176) = 0u;
        *(_OWORD *)(v21 + 192) = 0u;
        *(_OWORD *)(v21 + 144) = 0u;
        *(_OWORD *)(v21 + 160) = 0u;
        *(_OWORD *)(v21 + 112) = 0u;
        *(_OWORD *)(v21 + 128) = 0u;
        *(_OWORD *)(v21 + 80) = 0u;
        *(_OWORD *)(v21 + 96) = 0u;
        *(_OWORD *)(v21 + 48) = 0u;
        *(_OWORD *)(v21 + 64) = 0u;
        *(_OWORD *)(v21 + 16) = 0u;
        *(_OWORD *)(v21 + 32) = 0u;
        *(_OWORD *)v21 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v21, a2);
      }
    }
    v4 = *((_QWORD *)v3 + 382);
  }
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(v5 + 3064);
  v7 = *(unsigned __int8 *)(v6 + 153);
  if (v7 == 2)
  {
    v8 = WebCore::enclosingElementWithTag((WebCore *)(v6 + 120), (const WebCore::Position *)&WebCore::HTMLNames::olTag, a3);
    v10 = v8;
    if (!v8)
    {
      v11 = WebCore::enclosingElementWithTag((WebCore *)(*(_QWORD *)(v5 + 3064) + 136), (const WebCore::Position *)&WebCore::HTMLNames::olTag, v9);
      if (!v11)
        goto LABEL_14;
      v12 = (_DWORD *)(v11 + 24);
      v13 = *(_DWORD *)(v11 + 24);
      *(_DWORD *)(v11 + 24) = v13 + 2;
      if (v13)
        goto LABEL_10;
      goto LABEL_34;
    }
    *(_DWORD *)(v8 + 24) += 2;
    v11 = WebCore::enclosingElementWithTag((WebCore *)(*(_QWORD *)(v5 + 3064) + 136), (const WebCore::Position *)&WebCore::HTMLNames::olTag, v9);
    if (!v11)
      goto LABEL_12;
    v12 = (_DWORD *)(v11 + 24);
    v13 = *(_DWORD *)(v11 + 24);
    *(_DWORD *)(v11 + 24) = v13 + 2;
    if (v10 != v11)
    {
      if (v13)
      {
LABEL_10:
        *v12 = v13;
        goto LABEL_11;
      }
LABEL_34:
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
LABEL_11:
      if (v10)
      {
LABEL_12:
        if (*(_DWORD *)(v10 + 24) == 2)
        {
          if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
        }
        else
        {
          *(_DWORD *)(v10 + 24) -= 2;
        }
      }
LABEL_14:
      v14 = 0;
      goto LABEL_20;
    }
    v15 = *(_DWORD *)(v10 + 24) - 2;
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      v18 = *(_WORD *)(v10 + 30);
      if ((v18 & 0x400) != 0)
        goto LABEL_30;
      WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
      v15 = *(_DWORD *)(v10 + 24);
    }
    else
    {
      *(_DWORD *)(v10 + 24) = v15;
    }
    v16 = v15 - 2;
    if (v16)
    {
      *(_DWORD *)(v10 + 24) = v16;
      goto LABEL_19;
    }
    v18 = *(_WORD *)(v10 + 30);
LABEL_30:
    if ((v18 & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
    goto LABEL_19;
  }
  if (v7 != 1
    || !WebCore::enclosingElementWithTag((WebCore *)(v6 + 120), (const WebCore::Position *)&WebCore::HTMLNames::olTag, a3))
  {
    goto LABEL_14;
  }
LABEL_19:
  v14 = 1;
LABEL_20:
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v14;
}

uint64_t WebCore::executeInsertNestedOrderedList(uint64_t a1, WebCore::Document *a2)
{
  WebCore::InsertNestedListCommand::insertOrderedList(*(WebCore::InsertNestedListCommand **)(a1 + 296), a2);
  return 1;
}

uint64_t WebCore::executeInsertParagraph(uint64_t a1)
{
  WebCore::Node *v1;
  void *v2;
  WebCore::Node *v3;
  WebCore::Node *v5;

  v1 = *(WebCore::Node **)(a1 + 296);
  *((_DWORD *)v1 + 6) += 2;
  v5 = v1;
  WebCore::TypingCommand::insertParagraphSeparator(&v5, 0);
  v3 = v5;
  v5 = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 6) == 2)
    {
      if ((*((_WORD *)v3 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v3, v2);
    }
    else
    {
      *((_DWORD *)v3 + 6) -= 2;
    }
  }
  return 1;
}

uint64_t WebCore::executeInsertTab(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9;

  if (a2)
  {
    v3 = *(_QWORD *)(a2 + 48);
    if (v3)
    {
      if ((*(_QWORD *)(v3 + 16) & 0x2000000000000) != 0)
        a1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 528) + 8);
    }
  }
  v4 = *(_QWORD *)(a1 + 640);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = WebCore::EventHandler::handleTextInputEvent(v4, (WebCore::Document *)&v9, a2, 0);
  v7 = v9;
  v9 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  return v6;
}

uint64_t WebCore::executeInsertText(uint64_t a1, uint64_t a2, uint64_t a3, WebCore *a4)
{
  WebCore::Node *v4;
  void *v5;
  WebCore::Node *v6;
  WebCore::Node *v8;

  v4 = *(WebCore::Node **)(a1 + 296);
  *((_DWORD *)v4 + 6) += 2;
  v8 = v4;
  WebCore::TypingCommand::insertText(&v8, a4, 0, 0);
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*((_DWORD *)v6 + 6) == 2)
    {
      if ((*((_WORD *)v6 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v6, v5);
    }
    else
    {
      *((_DWORD *)v6 + 6) -= 2;
    }
  }
  return 1;
}

uint64_t WebCore::executeInsertUnorderedList(uint64_t a1)
{
  WebCore::Node *v1;
  _DWORD *v2;
  uint64_t v3;
  void *v4;
  WebCore::Node *v5;
  WebCore::Node *v7;

  v1 = *(WebCore::Node **)(a1 + 296);
  *((_DWORD *)v1 + 6) += 2;
  v7 = v1;
  v2 = (_DWORD *)WTF::fastMalloc((WTF *)0x128);
  v3 = WebCore::EditCommand::EditCommand((uint64_t)v2, (uint64_t *)&v7, 59);
  *(_OWORD *)(v3 + 248) = 0u;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)v3 = off_1E33ACEF8;
  *(_QWORD *)(v3 + 280) = 0;
  *(_BYTE *)(v3 + 288) = 1;
  WebCore::CompositeEditCommand::apply((WebCore::CompositeEditCommand *)v3);
  if (v2[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  else
    --v2[2];
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 6) == 2)
    {
      if ((*((_WORD *)v5 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v5, v4);
    }
    else
    {
      *((_DWORD *)v5 + 6) -= 2;
    }
  }
  return 1;
}

uint64_t WebCore::stateUnorderedList(WebCore *this, WebCore::LocalFrame *a2, WebCore::Event *a3)
{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  const WebCore::QualifiedName *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  __int16 v18;
  WebCore::Editor *v19;
  WebCore::Editor *v20;
  uint64_t v21;

  v3 = (WebCore::Document *)*((_QWORD *)this + 37);
  v4 = *((_QWORD *)v3 + 382);
  if (!v4)
  {
    v19 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v19, v3);
    v20 = (WebCore::Editor *)*((_QWORD *)v3 + 382);
    *((_QWORD *)v3 + 382) = v19;
    if (v20)
    {
      WebCore::Editor::~Editor(v20, a2);
      if (*(_DWORD *)v21)
      {
        *(_QWORD *)(v21 + 496) = 0;
        *(_OWORD *)(v21 + 464) = 0u;
        *(_OWORD *)(v21 + 480) = 0u;
        *(_OWORD *)(v21 + 432) = 0u;
        *(_OWORD *)(v21 + 448) = 0u;
        *(_OWORD *)(v21 + 400) = 0u;
        *(_OWORD *)(v21 + 416) = 0u;
        *(_OWORD *)(v21 + 368) = 0u;
        *(_OWORD *)(v21 + 384) = 0u;
        *(_OWORD *)(v21 + 336) = 0u;
        *(_OWORD *)(v21 + 352) = 0u;
        *(_OWORD *)(v21 + 304) = 0u;
        *(_OWORD *)(v21 + 320) = 0u;
        *(_OWORD *)(v21 + 272) = 0u;
        *(_OWORD *)(v21 + 288) = 0u;
        *(_OWORD *)(v21 + 240) = 0u;
        *(_OWORD *)(v21 + 256) = 0u;
        *(_OWORD *)(v21 + 208) = 0u;
        *(_OWORD *)(v21 + 224) = 0u;
        *(_OWORD *)(v21 + 176) = 0u;
        *(_OWORD *)(v21 + 192) = 0u;
        *(_OWORD *)(v21 + 144) = 0u;
        *(_OWORD *)(v21 + 160) = 0u;
        *(_OWORD *)(v21 + 112) = 0u;
        *(_OWORD *)(v21 + 128) = 0u;
        *(_OWORD *)(v21 + 80) = 0u;
        *(_OWORD *)(v21 + 96) = 0u;
        *(_OWORD *)(v21 + 48) = 0u;
        *(_OWORD *)(v21 + 64) = 0u;
        *(_OWORD *)(v21 + 16) = 0u;
        *(_OWORD *)(v21 + 32) = 0u;
        *(_OWORD *)v21 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v21, a2);
      }
    }
    v4 = *((_QWORD *)v3 + 382);
  }
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(v5 + 3064);
  v7 = *(unsigned __int8 *)(v6 + 153);
  if (v7 == 2)
  {
    v8 = WebCore::enclosingElementWithTag((WebCore *)(v6 + 120), (const WebCore::Position *)&WebCore::HTMLNames::ulTag, a3);
    v10 = v8;
    if (!v8)
    {
      v11 = WebCore::enclosingElementWithTag((WebCore *)(*(_QWORD *)(v5 + 3064) + 136), (const WebCore::Position *)&WebCore::HTMLNames::ulTag, v9);
      if (!v11)
        goto LABEL_14;
      v12 = (_DWORD *)(v11 + 24);
      v13 = *(_DWORD *)(v11 + 24);
      *(_DWORD *)(v11 + 24) = v13 + 2;
      if (v13)
        goto LABEL_10;
      goto LABEL_34;
    }
    *(_DWORD *)(v8 + 24) += 2;
    v11 = WebCore::enclosingElementWithTag((WebCore *)(*(_QWORD *)(v5 + 3064) + 136), (const WebCore::Position *)&WebCore::HTMLNames::ulTag, v9);
    if (!v11)
      goto LABEL_12;
    v12 = (_DWORD *)(v11 + 24);
    v13 = *(_DWORD *)(v11 + 24);
    *(_DWORD *)(v11 + 24) = v13 + 2;
    if (v10 != v11)
    {
      if (v13)
      {
LABEL_10:
        *v12 = v13;
        goto LABEL_11;
      }
LABEL_34:
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
LABEL_11:
      if (v10)
      {
LABEL_12:
        if (*(_DWORD *)(v10 + 24) == 2)
        {
          if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
        }
        else
        {
          *(_DWORD *)(v10 + 24) -= 2;
        }
      }
LABEL_14:
      v14 = 0;
      goto LABEL_20;
    }
    v15 = *(_DWORD *)(v10 + 24) - 2;
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      v18 = *(_WORD *)(v10 + 30);
      if ((v18 & 0x400) != 0)
        goto LABEL_30;
      WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
      v15 = *(_DWORD *)(v10 + 24);
    }
    else
    {
      *(_DWORD *)(v10 + 24) = v15;
    }
    v16 = v15 - 2;
    if (v16)
    {
      *(_DWORD *)(v10 + 24) = v16;
      goto LABEL_19;
    }
    v18 = *(_WORD *)(v10 + 30);
LABEL_30:
    if ((v18 & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
    goto LABEL_19;
  }
  if (v7 != 1
    || !WebCore::enclosingElementWithTag((WebCore *)(v6 + 120), (const WebCore::Position *)&WebCore::HTMLNames::ulTag, a3))
  {
    goto LABEL_14;
  }
LABEL_19:
  v14 = 1;
LABEL_20:
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v14;
}

uint64_t WebCore::executeInsertNestedUnorderedList(uint64_t a1, WebCore::Document *a2)
{
  WebCore::InsertNestedListCommand::insertUnorderedList(*(WebCore::InsertNestedListCommand **)(a1 + 296), a2);
  return 1;
}

uint64_t WebCore::executeToggleItalic(uint64_t a1, uint64_t a2, int a3)
{
  return WebCore::executeToggleStyle(a1, a3, 0x13u, 16, (uint64_t)"normal", 7, (uint64_t)"italic", 7);
}

uint64_t WebCore::stateItalic(WebCore *this, WebCore::LocalFrame *a2, WebCore::Event *a3)
{
  return WebCore::stateStyle((uint64_t)this, 16, (uint64_t)"italic", 7);
}

uint64_t WebCore::stateJustifyCenter(WebCore *this, WebCore::LocalFrame *a2, WebCore::Event *a3)
{
  return WebCore::stateStyle((uint64_t)this, 249, (uint64_t)"center", 7);
}

uint64_t WebCore::stateJustifyFull(WebCore *this, WebCore::LocalFrame *a2, WebCore::Event *a3)
{
  return WebCore::stateStyle((uint64_t)this, 249, (uint64_t)"justify", 8);
}

uint64_t WebCore::stateJustifyLeft(WebCore *this, WebCore::LocalFrame *a2, WebCore::Event *a3)
{
  return WebCore::stateStyle((uint64_t)this, 249, (uint64_t)"left", 5);
}

uint64_t WebCore::stateJustifyRight(WebCore *this, WebCore::LocalFrame *a2, WebCore::Event *a3)
{
  return WebCore::stateStyle((uint64_t)this, 249, (uint64_t)"right", 6);
}

uint64_t WebCore::executeMakeTextWritingDirectionLeftToRight(uint64_t a1)
{
  uint64_t v2;
  WTF *v3;
  WebCore::Document *v4;
  unsigned int *v5;
  WTF::StringImpl *v6;
  uint64_t v8;
  uint64_t v9;
  _DWORD **v10;
  _DWORD *v11;
  WTF *v12;
  uint64_t v14;
  WebCore::Editor *v15;
  void *v16;
  WebCore::Editor *v17;
  uint64_t v18;
  void *v19;

  v2 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v2 = 0x900000001;
  v3 = (WTF *)(v2 + 32);
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = v2 + 32;
  *(_QWORD *)(v2 + 24) = 4;
  WebCore::MutableStyleProperties::setProperty((WebCore::MutableStyleProperties *)v2, 285, 0x1C9u, 0);
  WebCore::MutableStyleProperties::setProperty((WebCore::MutableStyleProperties *)v2, 6, 0x1B1u, 0);
  v4 = *(WebCore::Document **)(a1 + 296);
  v5 = (unsigned int *)*((_QWORD *)v4 + 382);
  if (!v5)
  {
    v15 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v15, v4);
    v17 = (WebCore::Editor *)*((_QWORD *)v4 + 382);
    *((_QWORD *)v4 + 382) = v15;
    if (v17)
    {
      WebCore::Editor::~Editor(v17, v16);
      if (*(_DWORD *)v18)
      {
        *(_QWORD *)(v18 + 496) = 0;
        *(_OWORD *)(v18 + 464) = 0u;
        *(_OWORD *)(v18 + 480) = 0u;
        *(_OWORD *)(v18 + 432) = 0u;
        *(_OWORD *)(v18 + 448) = 0u;
        *(_OWORD *)(v18 + 400) = 0u;
        *(_OWORD *)(v18 + 416) = 0u;
        *(_OWORD *)(v18 + 368) = 0u;
        *(_OWORD *)(v18 + 384) = 0u;
        *(_OWORD *)(v18 + 336) = 0u;
        *(_OWORD *)(v18 + 352) = 0u;
        *(_OWORD *)(v18 + 304) = 0u;
        *(_OWORD *)(v18 + 320) = 0u;
        *(_OWORD *)(v18 + 272) = 0u;
        *(_OWORD *)(v18 + 288) = 0u;
        *(_OWORD *)(v18 + 240) = 0u;
        *(_OWORD *)(v18 + 256) = 0u;
        *(_OWORD *)(v18 + 208) = 0u;
        *(_OWORD *)(v18 + 224) = 0u;
        *(_OWORD *)(v18 + 176) = 0u;
        *(_OWORD *)(v18 + 192) = 0u;
        *(_OWORD *)(v18 + 144) = 0u;
        *(_OWORD *)(v18 + 160) = 0u;
        *(_OWORD *)(v18 + 112) = 0u;
        *(_OWORD *)(v18 + 128) = 0u;
        *(_OWORD *)(v18 + 80) = 0u;
        *(_OWORD *)(v18 + 96) = 0u;
        *(_OWORD *)(v18 + 48) = 0u;
        *(_OWORD *)(v18 + 64) = 0u;
        *(_OWORD *)(v18 + 16) = 0u;
        *(_OWORD *)(v18 + 32) = 0u;
        *(_OWORD *)v18 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v18, v19);
      }
    }
    v5 = (unsigned int *)*((_QWORD *)v4 + 382);
    v3 = (WTF *)(v2 + 32);
  }
  WebCore::Editor::applyStyle(v5, (const WebCore::StyleProperties *)v2, 0x22u);
  if (*(_DWORD *)v2 == 1)
  {
    v8 = *(unsigned int *)(v2 + 28);
    if ((_DWORD)v8)
    {
      v9 = 16 * v8;
      v10 = (_DWORD **)(*(_QWORD *)(v2 + 16) + 8);
      do
      {
        v11 = *v10;
        *v10 = 0;
        if (v11)
        {
          if (*v11 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v6);
          else
            *v11 -= 2;
        }
        v10 += 2;
        v9 -= 16;
      }
      while (v9);
    }
    v12 = *(WTF **)(v2 + 16);
    if (v3 != v12 && v12 != 0)
    {
      *(_QWORD *)(v2 + 16) = 0;
      *(_DWORD *)(v2 + 24) = 0;
      WTF::fastFree(v12, v6);
    }
    v14 = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    WTF::fastFree((WTF *)v2, v6);
  }
  else
  {
    --*(_DWORD *)v2;
  }
  return 1;
}

BOOL WebCore::stateTextWritingDirectionLeftToRight(WebCore *this, WebCore::LocalFrame *a2, WebCore::Event *a3, BOOL *a4)
{
  uint64_t v4;
  char v7;

  v4 = *(_QWORD *)(*((_QWORD *)this + 37) + 3064);
  v7 = 0;
  return WebCore::EditingStyle::textDirectionForSelection((WebCore::EditingStyle *)(v4 + 56), *(const WebCore::VisibleSelection **)(v4 + 200), (WebCore::EditingStyle *)&v7, a4) == 1&& v7 == 0;
}

uint64_t WebCore::executeMakeTextWritingDirectionNatural(uint64_t a1)
{
  uint64_t v2;
  WTF *v3;
  WebCore::Document *v4;
  unsigned int *v5;
  WTF::StringImpl *v6;
  uint64_t v8;
  uint64_t v9;
  _DWORD **v10;
  _DWORD *v11;
  WTF *v12;
  uint64_t v14;
  WebCore::Editor *v15;
  void *v16;
  WebCore::Editor *v17;
  uint64_t v18;
  void *v19;

  v2 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v2 = 0x900000001;
  v3 = (WTF *)(v2 + 32);
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = v2 + 32;
  *(_QWORD *)(v2 + 24) = 4;
  WebCore::MutableStyleProperties::setProperty((WebCore::MutableStyleProperties *)v2, 285, 0x5Au, 0);
  v4 = *(WebCore::Document **)(a1 + 296);
  v5 = (unsigned int *)*((_QWORD *)v4 + 382);
  if (!v5)
  {
    v15 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v15, v4);
    v17 = (WebCore::Editor *)*((_QWORD *)v4 + 382);
    *((_QWORD *)v4 + 382) = v15;
    if (v17)
    {
      WebCore::Editor::~Editor(v17, v16);
      if (*(_DWORD *)v18)
      {
        *(_QWORD *)(v18 + 496) = 0;
        *(_OWORD *)(v18 + 464) = 0u;
        *(_OWORD *)(v18 + 480) = 0u;
        *(_OWORD *)(v18 + 432) = 0u;
        *(_OWORD *)(v18 + 448) = 0u;
        *(_OWORD *)(v18 + 400) = 0u;
        *(_OWORD *)(v18 + 416) = 0u;
        *(_OWORD *)(v18 + 368) = 0u;
        *(_OWORD *)(v18 + 384) = 0u;
        *(_OWORD *)(v18 + 336) = 0u;
        *(_OWORD *)(v18 + 352) = 0u;
        *(_OWORD *)(v18 + 304) = 0u;
        *(_OWORD *)(v18 + 320) = 0u;
        *(_OWORD *)(v18 + 272) = 0u;
        *(_OWORD *)(v18 + 288) = 0u;
        *(_OWORD *)(v18 + 240) = 0u;
        *(_OWORD *)(v18 + 256) = 0u;
        *(_OWORD *)(v18 + 208) = 0u;
        *(_OWORD *)(v18 + 224) = 0u;
        *(_OWORD *)(v18 + 176) = 0u;
        *(_OWORD *)(v18 + 192) = 0u;
        *(_OWORD *)(v18 + 144) = 0u;
        *(_OWORD *)(v18 + 160) = 0u;
        *(_OWORD *)(v18 + 112) = 0u;
        *(_OWORD *)(v18 + 128) = 0u;
        *(_OWORD *)(v18 + 80) = 0u;
        *(_OWORD *)(v18 + 96) = 0u;
        *(_OWORD *)(v18 + 48) = 0u;
        *(_OWORD *)(v18 + 64) = 0u;
        *(_OWORD *)(v18 + 16) = 0u;
        *(_OWORD *)(v18 + 32) = 0u;
        *(_OWORD *)v18 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v18, v19);
      }
    }
    v5 = (unsigned int *)*((_QWORD *)v4 + 382);
    v3 = (WTF *)(v2 + 32);
  }
  WebCore::Editor::applyStyle(v5, (const WebCore::StyleProperties *)v2, 0x22u);
  if (*(_DWORD *)v2 == 1)
  {
    v8 = *(unsigned int *)(v2 + 28);
    if ((_DWORD)v8)
    {
      v9 = 16 * v8;
      v10 = (_DWORD **)(*(_QWORD *)(v2 + 16) + 8);
      do
      {
        v11 = *v10;
        *v10 = 0;
        if (v11)
        {
          if (*v11 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v6);
          else
            *v11 -= 2;
        }
        v10 += 2;
        v9 -= 16;
      }
      while (v9);
    }
    v12 = *(WTF **)(v2 + 16);
    if (v3 != v12 && v12 != 0)
    {
      *(_QWORD *)(v2 + 16) = 0;
      *(_DWORD *)(v2 + 24) = 0;
      WTF::fastFree(v12, v6);
    }
    v14 = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    WTF::fastFree((WTF *)v2, v6);
  }
  else
  {
    --*(_DWORD *)v2;
  }
  return 1;
}

BOOL WebCore::stateTextWritingDirectionNatural(WebCore *this, WebCore::LocalFrame *a2, WebCore::Event *a3, BOOL *a4)
{
  uint64_t v4;
  int v5;
  unsigned __int8 v7;

  v4 = *(_QWORD *)(*((_QWORD *)this + 37) + 3064);
  v7 = 0;
  v5 = WebCore::EditingStyle::textDirectionForSelection((WebCore::EditingStyle *)(v4 + 56), *(const WebCore::VisibleSelection **)(v4 + 200), (WebCore::EditingStyle *)&v7, a4);
  return (v5 | v7) == 0;
}

uint64_t WebCore::executeMakeTextWritingDirectionRightToLeft(uint64_t a1)
{
  uint64_t v2;
  WTF *v3;
  WebCore::Document *v4;
  unsigned int *v5;
  WTF::StringImpl *v6;
  uint64_t v8;
  uint64_t v9;
  _DWORD **v10;
  _DWORD *v11;
  WTF *v12;
  uint64_t v14;
  WebCore::Editor *v15;
  void *v16;
  WebCore::Editor *v17;
  uint64_t v18;
  void *v19;

  v2 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v2 = 0x900000001;
  v3 = (WTF *)(v2 + 32);
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = v2 + 32;
  *(_QWORD *)(v2 + 24) = 4;
  WebCore::MutableStyleProperties::setProperty((WebCore::MutableStyleProperties *)v2, 285, 0x1C9u, 0);
  WebCore::MutableStyleProperties::setProperty((WebCore::MutableStyleProperties *)v2, 6, 0x1B2u, 0);
  v4 = *(WebCore::Document **)(a1 + 296);
  v5 = (unsigned int *)*((_QWORD *)v4 + 382);
  if (!v5)
  {
    v15 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v15, v4);
    v17 = (WebCore::Editor *)*((_QWORD *)v4 + 382);
    *((_QWORD *)v4 + 382) = v15;
    if (v17)
    {
      WebCore::Editor::~Editor(v17, v16);
      if (*(_DWORD *)v18)
      {
        *(_QWORD *)(v18 + 496) = 0;
        *(_OWORD *)(v18 + 464) = 0u;
        *(_OWORD *)(v18 + 480) = 0u;
        *(_OWORD *)(v18 + 432) = 0u;
        *(_OWORD *)(v18 + 448) = 0u;
        *(_OWORD *)(v18 + 400) = 0u;
        *(_OWORD *)(v18 + 416) = 0u;
        *(_OWORD *)(v18 + 368) = 0u;
        *(_OWORD *)(v18 + 384) = 0u;
        *(_OWORD *)(v18 + 336) = 0u;
        *(_OWORD *)(v18 + 352) = 0u;
        *(_OWORD *)(v18 + 304) = 0u;
        *(_OWORD *)(v18 + 320) = 0u;
        *(_OWORD *)(v18 + 272) = 0u;
        *(_OWORD *)(v18 + 288) = 0u;
        *(_OWORD *)(v18 + 240) = 0u;
        *(_OWORD *)(v18 + 256) = 0u;
        *(_OWORD *)(v18 + 208) = 0u;
        *(_OWORD *)(v18 + 224) = 0u;
        *(_OWORD *)(v18 + 176) = 0u;
        *(_OWORD *)(v18 + 192) = 0u;
        *(_OWORD *)(v18 + 144) = 0u;
        *(_OWORD *)(v18 + 160) = 0u;
        *(_OWORD *)(v18 + 112) = 0u;
        *(_OWORD *)(v18 + 128) = 0u;
        *(_OWORD *)(v18 + 80) = 0u;
        *(_OWORD *)(v18 + 96) = 0u;
        *(_OWORD *)(v18 + 48) = 0u;
        *(_OWORD *)(v18 + 64) = 0u;
        *(_OWORD *)(v18 + 16) = 0u;
        *(_OWORD *)(v18 + 32) = 0u;
        *(_OWORD *)v18 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v18, v19);
      }
    }
    v5 = (unsigned int *)*((_QWORD *)v4 + 382);
    v3 = (WTF *)(v2 + 32);
  }
  WebCore::Editor::applyStyle(v5, (const WebCore::StyleProperties *)v2, 0x22u);
  if (*(_DWORD *)v2 == 1)
  {
    v8 = *(unsigned int *)(v2 + 28);
    if ((_DWORD)v8)
    {
      v9 = 16 * v8;
      v10 = (_DWORD **)(*(_QWORD *)(v2 + 16) + 8);
      do
      {
        v11 = *v10;
        *v10 = 0;
        if (v11)
        {
          if (*v11 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v6);
          else
            *v11 -= 2;
        }
        v10 += 2;
        v9 -= 16;
      }
      while (v9);
    }
    v12 = *(WTF **)(v2 + 16);
    if (v3 != v12 && v12 != 0)
    {
      *(_QWORD *)(v2 + 16) = 0;
      *(_DWORD *)(v2 + 24) = 0;
      WTF::fastFree(v12, v6);
    }
    v14 = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    WTF::fastFree((WTF *)v2, v6);
  }
  else
  {
    --*(_DWORD *)v2;
  }
  return 1;
}

BOOL WebCore::stateTextWritingDirectionRightToLeft(WebCore *this, WebCore::LocalFrame *a2, WebCore::Event *a3, BOOL *a4)
{
  uint64_t v4;
  char v7;

  v4 = *(_QWORD *)(*((_QWORD *)this + 37) + 3064);
  v7 = 0;
  return WebCore::EditingStyle::textDirectionForSelection((WebCore::EditingStyle *)(v4 + 56), *(const WebCore::VisibleSelection **)(v4 + 200), (WebCore::EditingStyle *)&v7, a4) == 2&& v7 == 0;
}

uint64_t WebCore::executeMoveBackward(uint64_t a1)
{
  WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 0, 1, 0, 1);
  return 1;
}

uint64_t WebCore::enabledInEditableTextOrCaretBrowsing(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WebCore::Document *v3;
  uint64_t v4;
  _BOOL8 v5;
  WebCore::Editor *v7;
  void *v8;
  WebCore::Editor *v9;
  uint64_t v10;
  void *v11;
  _BYTE v13[64];
  uint64_t v14;

  if ((*(_QWORD *)(*(_QWORD *)(a1 + 136) + 664) & 0x4000000000000) != 0)
    return 1;
  v2 = a2;
  v3 = *(WebCore::Document **)(a1 + 296);
  v4 = *((_QWORD *)v3 + 382);
  if (!v4)
  {
    v7 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v7, v3);
    v9 = (WebCore::Editor *)*((_QWORD *)v3 + 382);
    *((_QWORD *)v3 + 382) = v7;
    if (v9)
    {
      WebCore::Editor::~Editor(v9, v8);
      if (*(_DWORD *)v10)
      {
        *(_QWORD *)(v10 + 496) = 0;
        *(_OWORD *)(v10 + 464) = 0u;
        *(_OWORD *)(v10 + 480) = 0u;
        *(_OWORD *)(v10 + 432) = 0u;
        *(_OWORD *)(v10 + 448) = 0u;
        *(_OWORD *)(v10 + 400) = 0u;
        *(_OWORD *)(v10 + 416) = 0u;
        *(_OWORD *)(v10 + 368) = 0u;
        *(_OWORD *)(v10 + 384) = 0u;
        *(_OWORD *)(v10 + 336) = 0u;
        *(_OWORD *)(v10 + 352) = 0u;
        *(_OWORD *)(v10 + 304) = 0u;
        *(_OWORD *)(v10 + 320) = 0u;
        *(_OWORD *)(v10 + 272) = 0u;
        *(_OWORD *)(v10 + 288) = 0u;
        *(_OWORD *)(v10 + 240) = 0u;
        *(_OWORD *)(v10 + 256) = 0u;
        *(_OWORD *)(v10 + 208) = 0u;
        *(_OWORD *)(v10 + 224) = 0u;
        *(_OWORD *)(v10 + 176) = 0u;
        *(_OWORD *)(v10 + 192) = 0u;
        *(_OWORD *)(v10 + 144) = 0u;
        *(_OWORD *)(v10 + 160) = 0u;
        *(_OWORD *)(v10 + 112) = 0u;
        *(_OWORD *)(v10 + 128) = 0u;
        *(_OWORD *)(v10 + 80) = 0u;
        *(_OWORD *)(v10 + 96) = 0u;
        *(_OWORD *)(v10 + 48) = 0u;
        *(_OWORD *)(v10 + 64) = 0u;
        *(_OWORD *)(v10 + 16) = 0u;
        *(_OWORD *)(v10 + 32) = 0u;
        *(_OWORD *)v10 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v10, v11);
      }
    }
    v2 = a2;
    v4 = *((_QWORD *)v3 + 382);
  }
  WebCore::Editor::selectionForCommand((WebCore::Editor *)v13, *(WebCore::Event **)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 8) + 3064), v2);
  v5 = WebCore::editableRootForPosition((uint64_t)&v14, 0) != 0;
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v13);
  return v5;
}

uint64_t WebCore::executeMoveBackwardAndModifySelection(uint64_t a1)
{
  WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 1, 1, 0, 1);
  return 1;
}

uint64_t WebCore::enabledVisibleSelectionOrCaretBrowsing(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WebCore::Document *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  void *v9;
  int v10;
  _BOOL8 v11;
  WebCore::Editor *v13;
  void *v14;
  WebCore::Editor *v15;
  uint64_t v16;
  void *v17;
  _BYTE v19[64];
  uint64_t v20;
  char v21;
  unsigned __int8 v22;

  if ((*(_QWORD *)(*(_QWORD *)(a1 + 136) + 664) & 0x4000000000000) == 0)
  {
    v2 = a2;
    v3 = *(WebCore::Document **)(a1 + 296);
    v4 = *((_QWORD *)v3 + 382);
    if (!v4)
    {
      v13 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v13, v3);
      v15 = (WebCore::Editor *)*((_QWORD *)v3 + 382);
      *((_QWORD *)v3 + 382) = v13;
      if (v15)
      {
        WebCore::Editor::~Editor(v15, v14);
        if (*(_DWORD *)v16)
        {
          *(_QWORD *)(v16 + 496) = 0;
          *(_OWORD *)(v16 + 464) = 0u;
          *(_OWORD *)(v16 + 480) = 0u;
          *(_OWORD *)(v16 + 432) = 0u;
          *(_OWORD *)(v16 + 448) = 0u;
          *(_OWORD *)(v16 + 400) = 0u;
          *(_OWORD *)(v16 + 416) = 0u;
          *(_OWORD *)(v16 + 368) = 0u;
          *(_OWORD *)(v16 + 384) = 0u;
          *(_OWORD *)(v16 + 336) = 0u;
          *(_OWORD *)(v16 + 352) = 0u;
          *(_OWORD *)(v16 + 304) = 0u;
          *(_OWORD *)(v16 + 320) = 0u;
          *(_OWORD *)(v16 + 272) = 0u;
          *(_OWORD *)(v16 + 288) = 0u;
          *(_OWORD *)(v16 + 240) = 0u;
          *(_OWORD *)(v16 + 256) = 0u;
          *(_OWORD *)(v16 + 208) = 0u;
          *(_OWORD *)(v16 + 224) = 0u;
          *(_OWORD *)(v16 + 176) = 0u;
          *(_OWORD *)(v16 + 192) = 0u;
          *(_OWORD *)(v16 + 144) = 0u;
          *(_OWORD *)(v16 + 160) = 0u;
          *(_OWORD *)(v16 + 112) = 0u;
          *(_OWORD *)(v16 + 128) = 0u;
          *(_OWORD *)(v16 + 80) = 0u;
          *(_OWORD *)(v16 + 96) = 0u;
          *(_OWORD *)(v16 + 48) = 0u;
          *(_OWORD *)(v16 + 64) = 0u;
          *(_OWORD *)(v16 + 16) = 0u;
          *(_OWORD *)(v16 + 32) = 0u;
          *(_OWORD *)v16 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v16, v17);
        }
      }
      v2 = a2;
      v4 = *((_QWORD *)v3 + 382);
    }
    WebCore::Editor::selectionForCommand((WebCore::Editor *)v19, *(WebCore::Event **)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 8) + 3064), v2);
    v5 = v22;
    if (v22 != 1)
      goto LABEL_15;
    v6 = v20;
    if (!v20 || (v7 = v21 & 7, v7 > 4) || ((1 << v7) & 0x19) == 0 && (v6 = *(_QWORD *)(v20 + 32)) == 0)
    {
LABEL_14:
      v5 = v22;
LABEL_15:
      v11 = v5 == 2;
      goto LABEL_16;
    }
    *(_DWORD *)(v6 + 24) += 2;
    v8 = WebCore::Node::computeEditability(v6, 0, 0);
    v10 = v8;
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v6, v9);
        if (!v10)
          goto LABEL_14;
        goto LABEL_10;
      }
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
    if (!v8)
      goto LABEL_14;
LABEL_10:
    v11 = 1;
LABEL_16:
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v19);
    return v11;
  }
  return 1;
}

uint64_t WebCore::executeMoveDown(uint64_t a1)
{
  return WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 0, 0, 3, 1);
}

uint64_t WebCore::executeMoveDownAndModifySelection(uint64_t a1)
{
  WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 1, 0, 3, 1);
  return 1;
}

uint64_t WebCore::executeMoveForward(uint64_t a1)
{
  WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 0, 0, 0, 1);
  return 1;
}

uint64_t WebCore::executeMoveForwardAndModifySelection(uint64_t a1)
{
  WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 1, 0, 0, 1);
  return 1;
}

uint64_t WebCore::executeMoveLeft(uint64_t a1)
{
  return WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 0, 3, 0, 1);
}

uint64_t WebCore::executeMoveLeftAndModifySelection(uint64_t a1)
{
  WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 1, 3, 0, 1);
  return 1;
}

uint64_t WebCore::executeMovePageDown(WebCore *a1, WebCore::LocalFrame *a2)
{
  uint64_t result;

  result = WebCore::verticalScrollDistance(a1, a2);
  if ((_DWORD)result)
    return WebCore::FrameSelection::modify(*(_QWORD *)(*((_QWORD *)a1 + 37) + 3064), 0, result, 1, 1, 1u);
  return result;
}

uint64_t WebCore::executeMovePageDownAndModifySelection(WebCore *a1, WebCore::LocalFrame *a2)
{
  uint64_t result;

  result = WebCore::verticalScrollDistance(a1, a2);
  if ((_DWORD)result)
    return WebCore::FrameSelection::modify(*(_QWORD *)(*((_QWORD *)a1 + 37) + 3064), 1, result, 1, 1, 1u);
  return result;
}

BOOL WebCore::enabledVisibleSelection(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WebCore::Document *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  void *v9;
  int v10;
  _BOOL8 v11;
  WebCore::Editor *v13;
  void *v14;
  WebCore::Editor *v15;
  uint64_t v16;
  void *v17;
  _BYTE v19[64];
  uint64_t v20;
  char v21;
  unsigned __int8 v22;

  v2 = a2;
  v3 = *(WebCore::Document **)(a1 + 296);
  v4 = *((_QWORD *)v3 + 382);
  if (!v4)
  {
    v13 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v13, v3);
    v15 = (WebCore::Editor *)*((_QWORD *)v3 + 382);
    *((_QWORD *)v3 + 382) = v13;
    if (v15)
    {
      WebCore::Editor::~Editor(v15, v14);
      if (*(_DWORD *)v16)
      {
        *(_QWORD *)(v16 + 496) = 0;
        *(_OWORD *)(v16 + 464) = 0u;
        *(_OWORD *)(v16 + 480) = 0u;
        *(_OWORD *)(v16 + 432) = 0u;
        *(_OWORD *)(v16 + 448) = 0u;
        *(_OWORD *)(v16 + 400) = 0u;
        *(_OWORD *)(v16 + 416) = 0u;
        *(_OWORD *)(v16 + 368) = 0u;
        *(_OWORD *)(v16 + 384) = 0u;
        *(_OWORD *)(v16 + 336) = 0u;
        *(_OWORD *)(v16 + 352) = 0u;
        *(_OWORD *)(v16 + 304) = 0u;
        *(_OWORD *)(v16 + 320) = 0u;
        *(_OWORD *)(v16 + 272) = 0u;
        *(_OWORD *)(v16 + 288) = 0u;
        *(_OWORD *)(v16 + 240) = 0u;
        *(_OWORD *)(v16 + 256) = 0u;
        *(_OWORD *)(v16 + 208) = 0u;
        *(_OWORD *)(v16 + 224) = 0u;
        *(_OWORD *)(v16 + 176) = 0u;
        *(_OWORD *)(v16 + 192) = 0u;
        *(_OWORD *)(v16 + 144) = 0u;
        *(_OWORD *)(v16 + 160) = 0u;
        *(_OWORD *)(v16 + 112) = 0u;
        *(_OWORD *)(v16 + 128) = 0u;
        *(_OWORD *)(v16 + 80) = 0u;
        *(_OWORD *)(v16 + 96) = 0u;
        *(_OWORD *)(v16 + 48) = 0u;
        *(_OWORD *)(v16 + 64) = 0u;
        *(_OWORD *)(v16 + 16) = 0u;
        *(_OWORD *)(v16 + 32) = 0u;
        *(_OWORD *)v16 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v16, v17);
      }
    }
    v4 = *((_QWORD *)v3 + 382);
    v2 = a2;
  }
  WebCore::Editor::selectionForCommand((WebCore::Editor *)v19, *(WebCore::Event **)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 8) + 3064), v2);
  v5 = v22;
  if (v22 != 1)
    goto LABEL_13;
  v6 = v20;
  if (!v20 || (v7 = v21 & 7, v7 > 4) || ((1 << v7) & 0x19) == 0 && (v6 = *(_QWORD *)(v20 + 32)) == 0)
  {
LABEL_12:
    v5 = v22;
LABEL_13:
    v11 = v5 == 2;
    goto LABEL_14;
  }
  *(_DWORD *)(v6 + 24) += 2;
  v8 = WebCore::Node::computeEditability(v6, 0, 0);
  v10 = v8;
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v9);
      if (!v10)
        goto LABEL_12;
      goto LABEL_9;
    }
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  if (!v8)
    goto LABEL_12;
LABEL_9:
  v11 = 1;
LABEL_14:
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v19);
  return v11;
}

uint64_t WebCore::executeMovePageUp(WebCore *a1, WebCore::LocalFrame *a2)
{
  uint64_t result;

  result = WebCore::verticalScrollDistance(a1, a2);
  if ((_DWORD)result)
    return WebCore::FrameSelection::modify(*(_QWORD *)(*((_QWORD *)a1 + 37) + 3064), 0, result, 0, 1, 1u);
  return result;
}

uint64_t WebCore::executeMovePageUpAndModifySelection(WebCore *a1, WebCore::LocalFrame *a2)
{
  uint64_t result;

  result = WebCore::verticalScrollDistance(a1, a2);
  if ((_DWORD)result)
    return WebCore::FrameSelection::modify(*(_QWORD *)(*((_QWORD *)a1 + 37) + 3064), 1, result, 0, 1, 1u);
  return result;
}

uint64_t WebCore::executeMoveParagraphBackwardAndModifySelection(uint64_t a1)
{
  WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 1, 1, 4, 1);
  return 1;
}

uint64_t WebCore::executeMoveParagraphForwardAndModifySelection(uint64_t a1)
{
  WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 1, 0, 4, 1);
  return 1;
}

uint64_t WebCore::executeMoveRight(uint64_t a1)
{
  return WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 0, 2, 0, 1);
}

uint64_t WebCore::executeMoveRightAndModifySelection(uint64_t a1)
{
  WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 1, 2, 0, 1);
  return 1;
}

uint64_t WebCore::executeMoveToBeginningOfDocument(uint64_t a1)
{
  WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 0, 1, 9, 1);
  return 1;
}

uint64_t WebCore::executeMoveToBeginningOfDocumentAndModifySelection(uint64_t a1)
{
  WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 1, 1, 9, 1);
  return 1;
}

uint64_t WebCore::executeMoveToBeginningOfLine(uint64_t a1)
{
  WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 0, 1, 7, 1);
  return 1;
}

uint64_t WebCore::executeMoveToBeginningOfLineAndModifySelection(uint64_t a1)
{
  WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 1, 1, 7, 1);
  return 1;
}

uint64_t WebCore::executeMoveToBeginningOfParagraph(uint64_t a1)
{
  WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 0, 1, 8, 1);
  return 1;
}

uint64_t WebCore::executeMoveToBeginningOfParagraphAndModifySelection(uint64_t a1)
{
  WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 1, 1, 8, 1);
  return 1;
}

uint64_t WebCore::executeMoveToBeginningOfSentence(uint64_t a1)
{
  WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 0, 1, 6, 1);
  return 1;
}

uint64_t WebCore::executeMoveToBeginningOfSentenceAndModifySelection(uint64_t a1)
{
  WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 1, 1, 6, 1);
  return 1;
}

uint64_t WebCore::executeMoveToEndOfDocument(uint64_t a1)
{
  WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 0, 0, 9, 1);
  return 1;
}

uint64_t WebCore::executeMoveToEndOfDocumentAndModifySelection(uint64_t a1)
{
  WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 1, 0, 9, 1);
  return 1;
}

uint64_t WebCore::executeMoveToEndOfLine(uint64_t a1)
{
  WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 0, 0, 7, 1);
  return 1;
}

uint64_t WebCore::executeMoveToEndOfLineAndModifySelection(uint64_t a1)
{
  WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 1, 0, 7, 1);
  return 1;
}

uint64_t WebCore::executeMoveToEndOfParagraph(uint64_t a1)
{
  WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 0, 0, 8, 1);
  return 1;
}

uint64_t WebCore::executeMoveToEndOfParagraphAndModifySelection(uint64_t a1)
{
  WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 1, 0, 8, 1);
  return 1;
}

uint64_t WebCore::executeMoveToEndOfSentence(uint64_t a1)
{
  WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 0, 0, 6, 1);
  return 1;
}

uint64_t WebCore::executeMoveToEndOfSentenceAndModifySelection(uint64_t a1)
{
  WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 1, 0, 6, 1);
  return 1;
}

uint64_t WebCore::executeMoveToLeftEndOfLine(uint64_t a1)
{
  WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 0, 3, 7, 1);
  return 1;
}

uint64_t WebCore::executeMoveToLeftEndOfLineAndModifySelection(uint64_t a1)
{
  WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 1, 3, 7, 1);
  return 1;
}

uint64_t WebCore::executeMoveToRightEndOfLine(uint64_t a1)
{
  WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 0, 2, 7, 1);
  return 1;
}

uint64_t WebCore::executeMoveToRightEndOfLineAndModifySelection(uint64_t a1)
{
  WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 1, 2, 7, 1);
  return 1;
}

uint64_t WebCore::executeMoveUp(uint64_t a1)
{
  return WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 0, 1, 3, 1);
}

uint64_t WebCore::executeMoveUpAndModifySelection(uint64_t a1)
{
  WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 1, 1, 3, 1);
  return 1;
}

uint64_t WebCore::executeMoveWordBackward(uint64_t a1)
{
  WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 0, 1, 1, 1);
  return 1;
}

uint64_t WebCore::executeMoveWordBackwardAndModifySelection(uint64_t a1)
{
  WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 1, 1, 1, 1);
  return 1;
}

uint64_t WebCore::executeMoveWordForward(uint64_t a1)
{
  WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 0, 0, 1, 1);
  return 1;
}

uint64_t WebCore::executeMoveWordForwardAndModifySelection(uint64_t a1)
{
  WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 1, 0, 1, 1);
  return 1;
}

uint64_t WebCore::executeMoveWordLeft(uint64_t a1)
{
  WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 0, 3, 1, 1);
  return 1;
}

uint64_t WebCore::executeMoveWordLeftAndModifySelection(uint64_t a1)
{
  WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 1, 3, 1, 1);
  return 1;
}

uint64_t WebCore::executeMoveWordRight(uint64_t a1)
{
  WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 0, 2, 1, 1);
  return 1;
}

uint64_t WebCore::executeMoveWordRightAndModifySelection(uint64_t a1)
{
  WebCore::FrameSelection::modify(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064), 1, 2, 1, 1);
  return 1;
}

uint64_t WebCore::executeOutdent(uint64_t a1)
{
  WebCore::Node *v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  void *v6;
  WebCore::Node *v7;
  WebCore::Node *v9;
  WTF::StringImpl *v10;

  v1 = *(WebCore::Node **)(a1 + 296);
  *((_DWORD *)v1 + 6) += 2;
  v9 = v1;
  v2 = WTF::fastMalloc((WTF *)0x140);
  WTF::AtomStringImpl::add();
  WebCore::EditCommand::EditCommand(v2, (uint64_t *)&v9, 59);
  *(_OWORD *)(v2 + 248) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_QWORD *)v2 = off_1E33A9B18;
  v4 = WebCore::HTMLNames::blockquoteTag;
  if (WebCore::HTMLNames::blockquoteTag)
    ++*(_DWORD *)WebCore::HTMLNames::blockquoteTag;
  *(_QWORD *)(v2 + 280) = v4;
  v5 = v10;
  if (v10)
    *(_DWORD *)v10 += 2;
  *(_QWORD *)(v2 + 288) = v5;
  *(_QWORD *)(v2 + 296) = 0;
  *(_DWORD *)(v2 + 304) = 0;
  *(_BYTE *)(v2 + 308) &= 0xF0u;
  v10 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  *(_QWORD *)v2 = off_1E33ACCF0;
  *(_DWORD *)(v2 + 312) = 1;
  WebCore::CompositeEditCommand::apply((WebCore::CompositeEditCommand *)v2);
  if (*(_DWORD *)(v2 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  else
    --*(_DWORD *)(v2 + 8);
  v7 = v9;
  v9 = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 6) == 2)
    {
      if ((*((_WORD *)v7 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v7, v6);
    }
    else
    {
      *((_DWORD *)v7 + 6) -= 2;
    }
  }
  return 1;
}

uint64_t WebCore::executeToggleOverwrite(uint64_t a1)
{
  WebCore::Document *v1;
  WebCore::Editor *v2;
  WebCore::Editor *v4;
  void *v5;
  WebCore::Editor *v6;
  uint64_t v7;
  void *v8;

  v1 = *(WebCore::Document **)(a1 + 296);
  v2 = (WebCore::Editor *)*((_QWORD *)v1 + 382);
  if (!v2)
  {
    v4 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v4, v1);
    v6 = (WebCore::Editor *)*((_QWORD *)v1 + 382);
    *((_QWORD *)v1 + 382) = v4;
    if (v6)
    {
      WebCore::Editor::~Editor(v6, v5);
      if (*(_DWORD *)v7)
      {
        *(_QWORD *)(v7 + 496) = 0;
        *(_OWORD *)(v7 + 464) = 0u;
        *(_OWORD *)(v7 + 480) = 0u;
        *(_OWORD *)(v7 + 432) = 0u;
        *(_OWORD *)(v7 + 448) = 0u;
        *(_OWORD *)(v7 + 400) = 0u;
        *(_OWORD *)(v7 + 416) = 0u;
        *(_OWORD *)(v7 + 368) = 0u;
        *(_OWORD *)(v7 + 384) = 0u;
        *(_OWORD *)(v7 + 336) = 0u;
        *(_OWORD *)(v7 + 352) = 0u;
        *(_OWORD *)(v7 + 304) = 0u;
        *(_OWORD *)(v7 + 320) = 0u;
        *(_OWORD *)(v7 + 272) = 0u;
        *(_OWORD *)(v7 + 288) = 0u;
        *(_OWORD *)(v7 + 240) = 0u;
        *(_OWORD *)(v7 + 256) = 0u;
        *(_OWORD *)(v7 + 208) = 0u;
        *(_OWORD *)(v7 + 224) = 0u;
        *(_OWORD *)(v7 + 176) = 0u;
        *(_OWORD *)(v7 + 192) = 0u;
        *(_OWORD *)(v7 + 144) = 0u;
        *(_OWORD *)(v7 + 160) = 0u;
        *(_OWORD *)(v7 + 112) = 0u;
        *(_OWORD *)(v7 + 128) = 0u;
        *(_OWORD *)(v7 + 80) = 0u;
        *(_OWORD *)(v7 + 96) = 0u;
        *(_OWORD *)(v7 + 48) = 0u;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        *(_OWORD *)(v7 + 32) = 0u;
        *(_OWORD *)v7 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v7, v8);
      }
    }
    v2 = (WebCore::Editor *)*((_QWORD *)v1 + 382);
  }
  WebCore::Editor::toggleOverwriteModeEnabled(v2);
  return 1;
}

uint64_t WebCore::executePaste(WebCore::LocalFrame *a1, uint64_t a2, int a3)
{
  int v4;
  uint64_t result;
  WebCore::Document *v6;
  uint64_t v7;
  uint64_t v8;
  int8x16_t v9;
  uint64_t v10;
  uint64_t v11;
  int8x16_t *v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  WebCore::Document *v17;
  uint64_t v18;
  uint64_t v19;
  int8x16_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x16_t *v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  WebCore::Node *v31;
  uint64_t v32;
  char *v33;
  void *v34;
  WebCore::Document *v35;
  WebCore::Editor *v36;
  void *v37;
  WebCore::Editor *v38;
  uint64_t v39;
  void *v40;
  WebCore::Document *v41;
  WebCore::Editor *v42;
  void *v43;
  WebCore::Editor *v44;
  uint64_t v45;
  void *v46;
  int8x16_t v47;
  int8x16_t v48;
  void *v49;
  WebCore::Node *v50;
  uint64_t v51;
  void *v52;

  if (a3)
  {
    v4 = WebCore::LocalFrame::requestDOMPasteAccess((uint64_t)a1, 0);
    result = 0;
    if (!v4)
      return result;
    v6 = (WebCore::Document *)*((_QWORD *)a1 + 37);
    v7 = *((_QWORD *)v6 + 382);
    if (!v7)
    {
      v41 = v6;
      v42 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v42, v41);
      v44 = (WebCore::Editor *)*((_QWORD *)v41 + 382);
      *((_QWORD *)v41 + 382) = v42;
      if (v44)
      {
        WebCore::Editor::~Editor(v44, v43);
        if (*(_DWORD *)v45)
        {
          *(_QWORD *)(v45 + 496) = 0;
          *(_OWORD *)(v45 + 464) = 0u;
          *(_OWORD *)(v45 + 480) = 0u;
          *(_OWORD *)(v45 + 432) = 0u;
          *(_OWORD *)(v45 + 448) = 0u;
          *(_OWORD *)(v45 + 400) = 0u;
          *(_OWORD *)(v45 + 416) = 0u;
          *(_OWORD *)(v45 + 368) = 0u;
          *(_OWORD *)(v45 + 384) = 0u;
          *(_OWORD *)(v45 + 336) = 0u;
          *(_OWORD *)(v45 + 352) = 0u;
          *(_OWORD *)(v45 + 304) = 0u;
          *(_OWORD *)(v45 + 320) = 0u;
          *(_OWORD *)(v45 + 272) = 0u;
          *(_OWORD *)(v45 + 288) = 0u;
          *(_OWORD *)(v45 + 240) = 0u;
          *(_OWORD *)(v45 + 256) = 0u;
          *(_OWORD *)(v45 + 208) = 0u;
          *(_OWORD *)(v45 + 224) = 0u;
          *(_OWORD *)(v45 + 176) = 0u;
          *(_OWORD *)(v45 + 192) = 0u;
          *(_OWORD *)(v45 + 144) = 0u;
          *(_OWORD *)(v45 + 160) = 0u;
          *(_OWORD *)(v45 + 112) = 0u;
          *(_OWORD *)(v45 + 128) = 0u;
          *(_OWORD *)(v45 + 80) = 0u;
          *(_OWORD *)(v45 + 96) = 0u;
          *(_OWORD *)(v45 + 48) = 0u;
          *(_OWORD *)(v45 + 64) = 0u;
          *(_OWORD *)(v45 + 16) = 0u;
          *(_OWORD *)(v45 + 32) = 0u;
          *(_OWORD *)v45 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v45, v46);
        }
      }
      v7 = *((_QWORD *)v41 + 382);
    }
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 16) + 8) + 528);
    v9 = 0uLL;
    if (v8 && (v10 = *(_QWORD *)(v8 + 8)) != 0 && (v11 = *(_QWORD *)(v10 + 24)) != 0)
    {
      v12 = *(int8x16_t **)(v11 + 8);
      v13 = 0uLL;
      if (v12)
      {
        v14 = v12[2];
        v15.i64[0] = -256;
        v15.i64[1] = -256;
        v13 = vandq_s8(v14, v15);
        v16.i64[0] = 255;
        v16.i64[1] = 255;
        v9 = vandq_s8(v14, v16);
      }
    }
    else
    {
      v13 = 0uLL;
    }
    v48 = vorrq_s8(v9, v13);
    v33 = (char *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v33 = off_1E327FAB0;
    *(int8x16_t *)(v33 + 8) = v48;
    v52 = v33;
    WebCore::Pasteboard::createForCopyAndPaste((PAL *)&v52, (uint64_t *)&v49);
    v34 = v49;
    WebCore::Editor::paste(v7, v49, 0);
    (*(void (**)(void *))(*(_QWORD *)v34 + 8))(v34);
    if (v52)
      (*(void (**)(void *))(*(_QWORD *)v52 + 8))(v52);
  }
  else
  {
    WebCore::UserTypingGestureIndicator::UserTypingGestureIndicator((WebCore::UserTypingGestureIndicator *)&v49, a1);
    v17 = (WebCore::Document *)*((_QWORD *)a1 + 37);
    v18 = *((_QWORD *)v17 + 382);
    if (!v18)
    {
      v35 = v17;
      v36 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v36, v35);
      v38 = (WebCore::Editor *)*((_QWORD *)v35 + 382);
      *((_QWORD *)v35 + 382) = v36;
      if (v38)
      {
        WebCore::Editor::~Editor(v38, v37);
        if (*(_DWORD *)v39)
        {
          *(_QWORD *)(v39 + 496) = 0;
          *(_OWORD *)(v39 + 464) = 0u;
          *(_OWORD *)(v39 + 480) = 0u;
          *(_OWORD *)(v39 + 432) = 0u;
          *(_OWORD *)(v39 + 448) = 0u;
          *(_OWORD *)(v39 + 400) = 0u;
          *(_OWORD *)(v39 + 416) = 0u;
          *(_OWORD *)(v39 + 368) = 0u;
          *(_OWORD *)(v39 + 384) = 0u;
          *(_OWORD *)(v39 + 336) = 0u;
          *(_OWORD *)(v39 + 352) = 0u;
          *(_OWORD *)(v39 + 304) = 0u;
          *(_OWORD *)(v39 + 320) = 0u;
          *(_OWORD *)(v39 + 272) = 0u;
          *(_OWORD *)(v39 + 288) = 0u;
          *(_OWORD *)(v39 + 240) = 0u;
          *(_OWORD *)(v39 + 256) = 0u;
          *(_OWORD *)(v39 + 208) = 0u;
          *(_OWORD *)(v39 + 224) = 0u;
          *(_OWORD *)(v39 + 176) = 0u;
          *(_OWORD *)(v39 + 192) = 0u;
          *(_OWORD *)(v39 + 144) = 0u;
          *(_OWORD *)(v39 + 160) = 0u;
          *(_OWORD *)(v39 + 112) = 0u;
          *(_OWORD *)(v39 + 128) = 0u;
          *(_OWORD *)(v39 + 80) = 0u;
          *(_OWORD *)(v39 + 96) = 0u;
          *(_OWORD *)(v39 + 48) = 0u;
          *(_OWORD *)(v39 + 64) = 0u;
          *(_OWORD *)(v39 + 16) = 0u;
          *(_OWORD *)(v39 + 32) = 0u;
          *(_OWORD *)v39 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v39, v40);
        }
      }
      v18 = *((_QWORD *)v35 + 382);
    }
    v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 16) + 8) + 528);
    v20 = 0uLL;
    if (v19 && (v21 = *(_QWORD *)(v19 + 8)) != 0 && (v22 = *(_QWORD *)(v21 + 24)) != 0)
    {
      v23 = *(int8x16_t **)(v22 + 8);
      v24 = 0uLL;
      if (v23)
      {
        v25 = v23[2];
        v26.i64[0] = -256;
        v26.i64[1] = -256;
        v24 = vandq_s8(v25, v26);
        v27.i64[0] = 255;
        v27.i64[1] = 255;
        v20 = vandq_s8(v25, v27);
      }
    }
    else
    {
      v24 = 0uLL;
    }
    v47 = vorrq_s8(v20, v24);
    v28 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v28 = off_1E327FAB0;
    *(int8x16_t *)(v28 + 8) = v47;
    v51 = v28;
    WebCore::Pasteboard::createForCopyAndPaste((PAL *)&v51, (uint64_t *)&v52);
    v29 = v52;
    WebCore::Editor::paste(v18, v52, 1);
    (*(void (**)(void *))(*(_QWORD *)v29 + 8))(v29);
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
    WebCore::s_processingUserTypingGesture = (char)v49;
    {
      WebCore::focusedNode(void)::node = 0;
    }
    v31 = v50;
    if (v50)
      *((_DWORD *)v50 + 6) += 2;
    v32 = WebCore::focusedNode(void)::node;
    WebCore::focusedNode(void)::node = (uint64_t)v31;
    if (v32)
    {
      if (*(_DWORD *)(v32 + 24) == 2)
      {
        if ((*(_WORD *)(v32 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v32, v30);
          v31 = v50;
        }
      }
      else
      {
        *(_DWORD *)(v32 + 24) -= 2;
      }
    }
    v50 = 0;
    if (v31)
    {
      if (*((_DWORD *)v31 + 6) == 2)
      {
        if ((*((_WORD *)v31 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v31, v30);
      }
      else
      {
        *((_DWORD *)v31 + 6) -= 2;
      }
    }
  }
  return 1;
}

uint64_t WebCore::supportedPaste(WebCore::Document **this, WebCore::LocalFrame *a2)
{
  WebCore *v2;
  WebCore::Document *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::Document *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::Editor *v14;
  void *v15;
  WebCore::Editor *v16;
  uint64_t v17;
  void *v18;
  unsigned int v20;

  if (!this)
    return 0;
  v2 = (WebCore *)this;
  v3 = this[17];
  v4 = *((_QWORD *)v3 + 85);
  v5 = *((_QWORD *)v3 + 84);
  v6 = ~v4 & 0x80000000000 | ~v5 & 0x40000000000000;
  v7 = (v5 >> 53) & 1;
  if (v6)
    v8 = v7;
  else
    v8 = 1;
  v9 = this[37];
  v10 = *((_QWORD *)v9 + 382);
  if (!v10)
  {
    v20 = v8;
    v14 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v14, v9);
    v16 = (WebCore::Editor *)*((_QWORD *)v9 + 382);
    *((_QWORD *)v9 + 382) = v14;
    if (v16)
    {
      WebCore::Editor::~Editor(v16, v15);
      if (*(_DWORD *)v17)
      {
        *(_QWORD *)(v17 + 496) = 0;
        *(_OWORD *)(v17 + 464) = 0u;
        *(_OWORD *)(v17 + 480) = 0u;
        *(_OWORD *)(v17 + 432) = 0u;
        *(_OWORD *)(v17 + 448) = 0u;
        *(_OWORD *)(v17 + 400) = 0u;
        *(_OWORD *)(v17 + 416) = 0u;
        *(_OWORD *)(v17 + 368) = 0u;
        *(_OWORD *)(v17 + 384) = 0u;
        *(_OWORD *)(v17 + 336) = 0u;
        *(_OWORD *)(v17 + 352) = 0u;
        *(_OWORD *)(v17 + 304) = 0u;
        *(_OWORD *)(v17 + 320) = 0u;
        *(_OWORD *)(v17 + 272) = 0u;
        *(_OWORD *)(v17 + 288) = 0u;
        *(_OWORD *)(v17 + 240) = 0u;
        *(_OWORD *)(v17 + 256) = 0u;
        *(_OWORD *)(v17 + 208) = 0u;
        *(_OWORD *)(v17 + 224) = 0u;
        *(_OWORD *)(v17 + 176) = 0u;
        *(_OWORD *)(v17 + 192) = 0u;
        *(_OWORD *)(v17 + 144) = 0u;
        *(_OWORD *)(v17 + 160) = 0u;
        *(_OWORD *)(v17 + 112) = 0u;
        *(_OWORD *)(v17 + 128) = 0u;
        *(_OWORD *)(v17 + 80) = 0u;
        *(_OWORD *)(v17 + 96) = 0u;
        *(_OWORD *)(v17 + 48) = 0u;
        *(_OWORD *)(v17 + 64) = 0u;
        *(_OWORD *)(v17 + 16) = 0u;
        *(_OWORD *)(v17 + 32) = 0u;
        *(_OWORD *)v17 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v17, v18);
      }
    }
    v10 = *((_QWORD *)v9 + 382);
    v2 = (WebCore *)this;
    v8 = v20;
  }
  v11 = *(_QWORD *)(v10 + 8);
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 8);
    if (v12)
      return (*(uint64_t (**)(uint64_t, WebCore *, uint64_t))(*(_QWORD *)v12 + 392))(v12, v2, v8);
  }
  return v8;
}

uint64_t WebCore::enabledPaste(WTF *a1, void *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  WebCore::Document **v8;
  WebCore::Document *v9;
  WebCore::Editor *v10;
  WebCore::Document *v11;
  uint64_t v12;
  WebCore::Editor *v13;
  WebCore::Editor *v14;
  uint64_t v15;
  WebCore::Editor *v16;
  void *v17;
  WebCore::Editor *v18;
  uint64_t v19;
  void *v20;
  WebCore::Document **v21;

  if ((a3 - 1) >= 2)
  {
    if (!a3)
      goto LABEL_11;
    return 0;
  }
  v4 = *((_QWORD *)a1 + 17);
  v5 = *(_QWORD *)(v4 + 680);
  v6 = *(_QWORD *)(v4 + 672);
  if (!(~v5 & 0x80000000000 | ~v6 & 0x40000000000000))
    goto LABEL_11;
  if ((v6 & 0x20000000000000) == 0)
    return 0;
  result = WTF::isMainThread(a1);
  if (!(_DWORD)result)
    return result;
  {
    result = 0;
    WebCore::currentToken(void)::token = 0;
    return result;
  }
  if (!WebCore::currentToken(void)::token
    || *(_DWORD *)(WebCore::currentToken(void)::token + 68)
    || *(_BYTE *)(WebCore::currentToken(void)::token + 16) != 1)
  {
    return 0;
  }
LABEL_11:
  v8 = (WebCore::Document **)((char *)a1 + 296);
  v9 = (WebCore::Document *)*((_QWORD *)a1 + 37);
  v10 = (WebCore::Editor *)*((_QWORD *)v9 + 382);
  if (!v10)
  {
    v21 = v8;
    v13 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v13, v9);
    v14 = (WebCore::Editor *)*((_QWORD *)v9 + 382);
    *((_QWORD *)v9 + 382) = v13;
    if (v14)
    {
      WebCore::Editor::~Editor(v14, a2);
      if (*(_DWORD *)v15)
      {
        *(_QWORD *)(v15 + 496) = 0;
        *(_OWORD *)(v15 + 464) = 0u;
        *(_OWORD *)(v15 + 480) = 0u;
        *(_OWORD *)(v15 + 432) = 0u;
        *(_OWORD *)(v15 + 448) = 0u;
        *(_OWORD *)(v15 + 400) = 0u;
        *(_OWORD *)(v15 + 416) = 0u;
        *(_OWORD *)(v15 + 368) = 0u;
        *(_OWORD *)(v15 + 384) = 0u;
        *(_OWORD *)(v15 + 336) = 0u;
        *(_OWORD *)(v15 + 352) = 0u;
        *(_OWORD *)(v15 + 304) = 0u;
        *(_OWORD *)(v15 + 320) = 0u;
        *(_OWORD *)(v15 + 272) = 0u;
        *(_OWORD *)(v15 + 288) = 0u;
        *(_OWORD *)(v15 + 240) = 0u;
        *(_OWORD *)(v15 + 256) = 0u;
        *(_OWORD *)(v15 + 208) = 0u;
        *(_OWORD *)(v15 + 224) = 0u;
        *(_OWORD *)(v15 + 176) = 0u;
        *(_OWORD *)(v15 + 192) = 0u;
        *(_OWORD *)(v15 + 144) = 0u;
        *(_OWORD *)(v15 + 160) = 0u;
        *(_OWORD *)(v15 + 112) = 0u;
        *(_OWORD *)(v15 + 128) = 0u;
        *(_OWORD *)(v15 + 80) = 0u;
        *(_OWORD *)(v15 + 96) = 0u;
        *(_OWORD *)(v15 + 48) = 0u;
        *(_OWORD *)(v15 + 64) = 0u;
        *(_OWORD *)(v15 + 16) = 0u;
        *(_OWORD *)(v15 + 32) = 0u;
        *(_OWORD *)v15 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v15, a2);
      }
    }
    v8 = v21;
    v10 = (WebCore::Editor *)*((_QWORD *)v9 + 382);
  }
  if ((WebCore::Editor::canDHTMLPaste(v10, a2) & 1) != 0)
    return 1;
  v11 = *v8;
  v12 = *((_QWORD *)*v8 + 382);
  if (!v12)
  {
    v16 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v16, v11);
    v18 = (WebCore::Editor *)*((_QWORD *)v11 + 382);
    *((_QWORD *)v11 + 382) = v16;
    if (v18)
    {
      WebCore::Editor::~Editor(v18, v17);
      if (*(_DWORD *)v19)
      {
        *(_QWORD *)(v19 + 496) = 0;
        *(_OWORD *)(v19 + 464) = 0u;
        *(_OWORD *)(v19 + 480) = 0u;
        *(_OWORD *)(v19 + 432) = 0u;
        *(_OWORD *)(v19 + 448) = 0u;
        *(_OWORD *)(v19 + 400) = 0u;
        *(_OWORD *)(v19 + 416) = 0u;
        *(_OWORD *)(v19 + 368) = 0u;
        *(_OWORD *)(v19 + 384) = 0u;
        *(_OWORD *)(v19 + 336) = 0u;
        *(_OWORD *)(v19 + 352) = 0u;
        *(_OWORD *)(v19 + 304) = 0u;
        *(_OWORD *)(v19 + 320) = 0u;
        *(_OWORD *)(v19 + 272) = 0u;
        *(_OWORD *)(v19 + 288) = 0u;
        *(_OWORD *)(v19 + 240) = 0u;
        *(_OWORD *)(v19 + 256) = 0u;
        *(_OWORD *)(v19 + 208) = 0u;
        *(_OWORD *)(v19 + 224) = 0u;
        *(_OWORD *)(v19 + 176) = 0u;
        *(_OWORD *)(v19 + 192) = 0u;
        *(_OWORD *)(v19 + 144) = 0u;
        *(_OWORD *)(v19 + 160) = 0u;
        *(_OWORD *)(v19 + 112) = 0u;
        *(_OWORD *)(v19 + 128) = 0u;
        *(_OWORD *)(v19 + 80) = 0u;
        *(_OWORD *)(v19 + 96) = 0u;
        *(_OWORD *)(v19 + 48) = 0u;
        *(_OWORD *)(v19 + 64) = 0u;
        *(_OWORD *)(v19 + 16) = 0u;
        *(_OWORD *)(v19 + 32) = 0u;
        *(_OWORD *)v19 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v19, v20);
      }
    }
    v12 = *((_QWORD *)v11 + 382);
  }
  return WebCore::editableRootForPosition(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 16) + 8) + 3064) + 120, 0) != 0;
}

uint64_t WebCore::executePasteAndMatchStyle(WebCore::LocalFrame *a1, uint64_t a2, int a3)
{
  int v4;
  uint64_t result;
  WebCore::Document *v6;
  uint64_t v7;
  WebCore::Document *v8;
  uint64_t v9;
  void *v10;
  WebCore::Node *v11;
  uint64_t v12;
  WebCore::Editor *v13;
  void *v14;
  WebCore::Editor *v15;
  uint64_t v16;
  void *v17;
  WebCore::Editor *v18;
  void *v19;
  WebCore::Editor *v20;
  uint64_t v21;
  void *v22;
  char v23[8];
  WebCore::Node *v24;

  if (a3)
  {
    v4 = WebCore::LocalFrame::requestDOMPasteAccess((uint64_t)a1, 0);
    result = 0;
    if (!v4)
      return result;
    v6 = (WebCore::Document *)*((_QWORD *)a1 + 37);
    v7 = *((_QWORD *)v6 + 382);
    if (!v7)
    {
      v18 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v18, v6);
      v20 = (WebCore::Editor *)*((_QWORD *)v6 + 382);
      *((_QWORD *)v6 + 382) = v18;
      if (v20)
      {
        WebCore::Editor::~Editor(v20, v19);
        if (*(_DWORD *)v21)
        {
          *(_QWORD *)(v21 + 496) = 0;
          *(_OWORD *)(v21 + 464) = 0u;
          *(_OWORD *)(v21 + 480) = 0u;
          *(_OWORD *)(v21 + 432) = 0u;
          *(_OWORD *)(v21 + 448) = 0u;
          *(_OWORD *)(v21 + 400) = 0u;
          *(_OWORD *)(v21 + 416) = 0u;
          *(_OWORD *)(v21 + 368) = 0u;
          *(_OWORD *)(v21 + 384) = 0u;
          *(_OWORD *)(v21 + 336) = 0u;
          *(_OWORD *)(v21 + 352) = 0u;
          *(_OWORD *)(v21 + 304) = 0u;
          *(_OWORD *)(v21 + 320) = 0u;
          *(_OWORD *)(v21 + 272) = 0u;
          *(_OWORD *)(v21 + 288) = 0u;
          *(_OWORD *)(v21 + 240) = 0u;
          *(_OWORD *)(v21 + 256) = 0u;
          *(_OWORD *)(v21 + 208) = 0u;
          *(_OWORD *)(v21 + 224) = 0u;
          *(_OWORD *)(v21 + 176) = 0u;
          *(_OWORD *)(v21 + 192) = 0u;
          *(_OWORD *)(v21 + 144) = 0u;
          *(_OWORD *)(v21 + 160) = 0u;
          *(_OWORD *)(v21 + 112) = 0u;
          *(_OWORD *)(v21 + 128) = 0u;
          *(_OWORD *)(v21 + 80) = 0u;
          *(_OWORD *)(v21 + 96) = 0u;
          *(_OWORD *)(v21 + 48) = 0u;
          *(_OWORD *)(v21 + 64) = 0u;
          *(_OWORD *)(v21 + 16) = 0u;
          *(_OWORD *)(v21 + 32) = 0u;
          *(_OWORD *)v21 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v21, v22);
        }
      }
      v7 = *((_QWORD *)v6 + 382);
    }
    WebCore::Editor::pasteAsPlainText(v7, 0);
  }
  else
  {
    WebCore::UserTypingGestureIndicator::UserTypingGestureIndicator((WebCore::UserTypingGestureIndicator *)v23, a1);
    v8 = (WebCore::Document *)*((_QWORD *)a1 + 37);
    v9 = *((_QWORD *)v8 + 382);
    if (!v9)
    {
      v13 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v13, v8);
      v15 = (WebCore::Editor *)*((_QWORD *)v8 + 382);
      *((_QWORD *)v8 + 382) = v13;
      if (v15)
      {
        WebCore::Editor::~Editor(v15, v14);
        if (*(_DWORD *)v16)
        {
          *(_QWORD *)(v16 + 496) = 0;
          *(_OWORD *)(v16 + 464) = 0u;
          *(_OWORD *)(v16 + 480) = 0u;
          *(_OWORD *)(v16 + 432) = 0u;
          *(_OWORD *)(v16 + 448) = 0u;
          *(_OWORD *)(v16 + 400) = 0u;
          *(_OWORD *)(v16 + 416) = 0u;
          *(_OWORD *)(v16 + 368) = 0u;
          *(_OWORD *)(v16 + 384) = 0u;
          *(_OWORD *)(v16 + 336) = 0u;
          *(_OWORD *)(v16 + 352) = 0u;
          *(_OWORD *)(v16 + 304) = 0u;
          *(_OWORD *)(v16 + 320) = 0u;
          *(_OWORD *)(v16 + 272) = 0u;
          *(_OWORD *)(v16 + 288) = 0u;
          *(_OWORD *)(v16 + 240) = 0u;
          *(_OWORD *)(v16 + 256) = 0u;
          *(_OWORD *)(v16 + 208) = 0u;
          *(_OWORD *)(v16 + 224) = 0u;
          *(_OWORD *)(v16 + 176) = 0u;
          *(_OWORD *)(v16 + 192) = 0u;
          *(_OWORD *)(v16 + 144) = 0u;
          *(_OWORD *)(v16 + 160) = 0u;
          *(_OWORD *)(v16 + 112) = 0u;
          *(_OWORD *)(v16 + 128) = 0u;
          *(_OWORD *)(v16 + 80) = 0u;
          *(_OWORD *)(v16 + 96) = 0u;
          *(_OWORD *)(v16 + 48) = 0u;
          *(_OWORD *)(v16 + 64) = 0u;
          *(_OWORD *)(v16 + 16) = 0u;
          *(_OWORD *)(v16 + 32) = 0u;
          *(_OWORD *)v16 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v16, v17);
        }
      }
      v9 = *((_QWORD *)v8 + 382);
    }
    WebCore::Editor::pasteAsPlainText(v9, (void *)1);
    WebCore::s_processingUserTypingGesture = v23[0];
    {
      WebCore::focusedNode(void)::node = 0;
    }
    v11 = v24;
    if (v24)
      *((_DWORD *)v24 + 6) += 2;
    v12 = WebCore::focusedNode(void)::node;
    WebCore::focusedNode(void)::node = (uint64_t)v11;
    if (v12)
    {
      if (*(_DWORD *)(v12 + 24) == 2)
      {
        if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v12, v10);
          v11 = v24;
        }
      }
      else
      {
        *(_DWORD *)(v12 + 24) -= 2;
      }
    }
    v24 = 0;
    if (v11)
    {
      if (*((_DWORD *)v11 + 6) == 2)
      {
        if ((*((_WORD *)v11 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v11, v10);
      }
      else
      {
        *((_DWORD *)v11 + 6) -= 2;
      }
    }
  }
  return 1;
}

uint64_t WebCore::executePasteAsPlainText(WebCore::LocalFrame *a1, uint64_t a2, int a3)
{
  int v4;
  uint64_t result;
  WebCore::Document *v6;
  uint64_t v7;
  WebCore::Document *v8;
  uint64_t v9;
  void *v10;
  WebCore::Node *v11;
  uint64_t v12;
  WebCore::Editor *v13;
  void *v14;
  WebCore::Editor *v15;
  uint64_t v16;
  void *v17;
  WebCore::Editor *v18;
  void *v19;
  WebCore::Editor *v20;
  uint64_t v21;
  void *v22;
  char v23[8];
  WebCore::Node *v24;

  if (a3)
  {
    v4 = WebCore::LocalFrame::requestDOMPasteAccess((uint64_t)a1, 0);
    result = 0;
    if (!v4)
      return result;
    v6 = (WebCore::Document *)*((_QWORD *)a1 + 37);
    v7 = *((_QWORD *)v6 + 382);
    if (!v7)
    {
      v18 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v18, v6);
      v20 = (WebCore::Editor *)*((_QWORD *)v6 + 382);
      *((_QWORD *)v6 + 382) = v18;
      if (v20)
      {
        WebCore::Editor::~Editor(v20, v19);
        if (*(_DWORD *)v21)
        {
          *(_QWORD *)(v21 + 496) = 0;
          *(_OWORD *)(v21 + 464) = 0u;
          *(_OWORD *)(v21 + 480) = 0u;
          *(_OWORD *)(v21 + 432) = 0u;
          *(_OWORD *)(v21 + 448) = 0u;
          *(_OWORD *)(v21 + 400) = 0u;
          *(_OWORD *)(v21 + 416) = 0u;
          *(_OWORD *)(v21 + 368) = 0u;
          *(_OWORD *)(v21 + 384) = 0u;
          *(_OWORD *)(v21 + 336) = 0u;
          *(_OWORD *)(v21 + 352) = 0u;
          *(_OWORD *)(v21 + 304) = 0u;
          *(_OWORD *)(v21 + 320) = 0u;
          *(_OWORD *)(v21 + 272) = 0u;
          *(_OWORD *)(v21 + 288) = 0u;
          *(_OWORD *)(v21 + 240) = 0u;
          *(_OWORD *)(v21 + 256) = 0u;
          *(_OWORD *)(v21 + 208) = 0u;
          *(_OWORD *)(v21 + 224) = 0u;
          *(_OWORD *)(v21 + 176) = 0u;
          *(_OWORD *)(v21 + 192) = 0u;
          *(_OWORD *)(v21 + 144) = 0u;
          *(_OWORD *)(v21 + 160) = 0u;
          *(_OWORD *)(v21 + 112) = 0u;
          *(_OWORD *)(v21 + 128) = 0u;
          *(_OWORD *)(v21 + 80) = 0u;
          *(_OWORD *)(v21 + 96) = 0u;
          *(_OWORD *)(v21 + 48) = 0u;
          *(_OWORD *)(v21 + 64) = 0u;
          *(_OWORD *)(v21 + 16) = 0u;
          *(_OWORD *)(v21 + 32) = 0u;
          *(_OWORD *)v21 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v21, v22);
        }
      }
      v7 = *((_QWORD *)v6 + 382);
    }
    WebCore::Editor::pasteAsPlainText(v7, 0);
  }
  else
  {
    WebCore::UserTypingGestureIndicator::UserTypingGestureIndicator((WebCore::UserTypingGestureIndicator *)v23, a1);
    v8 = (WebCore::Document *)*((_QWORD *)a1 + 37);
    v9 = *((_QWORD *)v8 + 382);
    if (!v9)
    {
      v13 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v13, v8);
      v15 = (WebCore::Editor *)*((_QWORD *)v8 + 382);
      *((_QWORD *)v8 + 382) = v13;
      if (v15)
      {
        WebCore::Editor::~Editor(v15, v14);
        if (*(_DWORD *)v16)
        {
          *(_QWORD *)(v16 + 496) = 0;
          *(_OWORD *)(v16 + 464) = 0u;
          *(_OWORD *)(v16 + 480) = 0u;
          *(_OWORD *)(v16 + 432) = 0u;
          *(_OWORD *)(v16 + 448) = 0u;
          *(_OWORD *)(v16 + 400) = 0u;
          *(_OWORD *)(v16 + 416) = 0u;
          *(_OWORD *)(v16 + 368) = 0u;
          *(_OWORD *)(v16 + 384) = 0u;
          *(_OWORD *)(v16 + 336) = 0u;
          *(_OWORD *)(v16 + 352) = 0u;
          *(_OWORD *)(v16 + 304) = 0u;
          *(_OWORD *)(v16 + 320) = 0u;
          *(_OWORD *)(v16 + 272) = 0u;
          *(_OWORD *)(v16 + 288) = 0u;
          *(_OWORD *)(v16 + 240) = 0u;
          *(_OWORD *)(v16 + 256) = 0u;
          *(_OWORD *)(v16 + 208) = 0u;
          *(_OWORD *)(v16 + 224) = 0u;
          *(_OWORD *)(v16 + 176) = 0u;
          *(_OWORD *)(v16 + 192) = 0u;
          *(_OWORD *)(v16 + 144) = 0u;
          *(_OWORD *)(v16 + 160) = 0u;
          *(_OWORD *)(v16 + 112) = 0u;
          *(_OWORD *)(v16 + 128) = 0u;
          *(_OWORD *)(v16 + 80) = 0u;
          *(_OWORD *)(v16 + 96) = 0u;
          *(_OWORD *)(v16 + 48) = 0u;
          *(_OWORD *)(v16 + 64) = 0u;
          *(_OWORD *)(v16 + 16) = 0u;
          *(_OWORD *)(v16 + 32) = 0u;
          *(_OWORD *)v16 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v16, v17);
        }
      }
      v9 = *((_QWORD *)v8 + 382);
    }
    WebCore::Editor::pasteAsPlainText(v9, (void *)1);
    WebCore::s_processingUserTypingGesture = v23[0];
    {
      WebCore::focusedNode(void)::node = 0;
    }
    v11 = v24;
    if (v24)
      *((_DWORD *)v24 + 6) += 2;
    v12 = WebCore::focusedNode(void)::node;
    WebCore::focusedNode(void)::node = (uint64_t)v11;
    if (v12)
    {
      if (*(_DWORD *)(v12 + 24) == 2)
      {
        if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v12, v10);
          v11 = v24;
        }
      }
      else
      {
        *(_DWORD *)(v12 + 24) -= 2;
      }
    }
    v24 = 0;
    if (v11)
    {
      if (*((_DWORD *)v11 + 6) == 2)
      {
        if ((*((_WORD *)v11 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v11, v10);
      }
      else
      {
        *((_DWORD *)v11 + 6) -= 2;
      }
    }
  }
  return 1;
}

uint64_t WebCore::executePasteAsQuotation(WebCore::LocalFrame *a1, uint64_t a2, int a3)
{
  int v4;
  uint64_t result;
  WebCore::Document *v6;
  uint64_t v7;
  WebCore::Document *v8;
  uint64_t v9;
  void *v10;
  WebCore::Node *v11;
  uint64_t v12;
  WebCore::Editor *v13;
  void *v14;
  WebCore::Editor *v15;
  uint64_t v16;
  void *v17;
  WebCore::Editor *v18;
  void *v19;
  WebCore::Editor *v20;
  uint64_t v21;
  void *v22;
  char v23[8];
  WebCore::Node *v24;

  if (a3)
  {
    v4 = WebCore::LocalFrame::requestDOMPasteAccess((uint64_t)a1, 0);
    result = 0;
    if (!v4)
      return result;
    v6 = (WebCore::Document *)*((_QWORD *)a1 + 37);
    v7 = *((_QWORD *)v6 + 382);
    if (!v7)
    {
      v18 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v18, v6);
      v20 = (WebCore::Editor *)*((_QWORD *)v6 + 382);
      *((_QWORD *)v6 + 382) = v18;
      if (v20)
      {
        WebCore::Editor::~Editor(v20, v19);
        if (*(_DWORD *)v21)
        {
          *(_QWORD *)(v21 + 496) = 0;
          *(_OWORD *)(v21 + 464) = 0u;
          *(_OWORD *)(v21 + 480) = 0u;
          *(_OWORD *)(v21 + 432) = 0u;
          *(_OWORD *)(v21 + 448) = 0u;
          *(_OWORD *)(v21 + 400) = 0u;
          *(_OWORD *)(v21 + 416) = 0u;
          *(_OWORD *)(v21 + 368) = 0u;
          *(_OWORD *)(v21 + 384) = 0u;
          *(_OWORD *)(v21 + 336) = 0u;
          *(_OWORD *)(v21 + 352) = 0u;
          *(_OWORD *)(v21 + 304) = 0u;
          *(_OWORD *)(v21 + 320) = 0u;
          *(_OWORD *)(v21 + 272) = 0u;
          *(_OWORD *)(v21 + 288) = 0u;
          *(_OWORD *)(v21 + 240) = 0u;
          *(_OWORD *)(v21 + 256) = 0u;
          *(_OWORD *)(v21 + 208) = 0u;
          *(_OWORD *)(v21 + 224) = 0u;
          *(_OWORD *)(v21 + 176) = 0u;
          *(_OWORD *)(v21 + 192) = 0u;
          *(_OWORD *)(v21 + 144) = 0u;
          *(_OWORD *)(v21 + 160) = 0u;
          *(_OWORD *)(v21 + 112) = 0u;
          *(_OWORD *)(v21 + 128) = 0u;
          *(_OWORD *)(v21 + 80) = 0u;
          *(_OWORD *)(v21 + 96) = 0u;
          *(_OWORD *)(v21 + 48) = 0u;
          *(_OWORD *)(v21 + 64) = 0u;
          *(_OWORD *)(v21 + 16) = 0u;
          *(_OWORD *)(v21 + 32) = 0u;
          *(_OWORD *)v21 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v21, v22);
        }
      }
      v7 = *((_QWORD *)v6 + 382);
    }
    WebCore::Editor::pasteAsQuotation(v7, 0);
  }
  else
  {
    WebCore::UserTypingGestureIndicator::UserTypingGestureIndicator((WebCore::UserTypingGestureIndicator *)v23, a1);
    v8 = (WebCore::Document *)*((_QWORD *)a1 + 37);
    v9 = *((_QWORD *)v8 + 382);
    if (!v9)
    {
      v13 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v13, v8);
      v15 = (WebCore::Editor *)*((_QWORD *)v8 + 382);
      *((_QWORD *)v8 + 382) = v13;
      if (v15)
      {
        WebCore::Editor::~Editor(v15, v14);
        if (*(_DWORD *)v16)
        {
          *(_QWORD *)(v16 + 496) = 0;
          *(_OWORD *)(v16 + 464) = 0u;
          *(_OWORD *)(v16 + 480) = 0u;
          *(_OWORD *)(v16 + 432) = 0u;
          *(_OWORD *)(v16 + 448) = 0u;
          *(_OWORD *)(v16 + 400) = 0u;
          *(_OWORD *)(v16 + 416) = 0u;
          *(_OWORD *)(v16 + 368) = 0u;
          *(_OWORD *)(v16 + 384) = 0u;
          *(_OWORD *)(v16 + 336) = 0u;
          *(_OWORD *)(v16 + 352) = 0u;
          *(_OWORD *)(v16 + 304) = 0u;
          *(_OWORD *)(v16 + 320) = 0u;
          *(_OWORD *)(v16 + 272) = 0u;
          *(_OWORD *)(v16 + 288) = 0u;
          *(_OWORD *)(v16 + 240) = 0u;
          *(_OWORD *)(v16 + 256) = 0u;
          *(_OWORD *)(v16 + 208) = 0u;
          *(_OWORD *)(v16 + 224) = 0u;
          *(_OWORD *)(v16 + 176) = 0u;
          *(_OWORD *)(v16 + 192) = 0u;
          *(_OWORD *)(v16 + 144) = 0u;
          *(_OWORD *)(v16 + 160) = 0u;
          *(_OWORD *)(v16 + 112) = 0u;
          *(_OWORD *)(v16 + 128) = 0u;
          *(_OWORD *)(v16 + 80) = 0u;
          *(_OWORD *)(v16 + 96) = 0u;
          *(_OWORD *)(v16 + 48) = 0u;
          *(_OWORD *)(v16 + 64) = 0u;
          *(_OWORD *)(v16 + 16) = 0u;
          *(_OWORD *)(v16 + 32) = 0u;
          *(_OWORD *)v16 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v16, v17);
        }
      }
      v9 = *((_QWORD *)v8 + 382);
    }
    WebCore::Editor::pasteAsQuotation(v9, (void *)1);
    WebCore::s_processingUserTypingGesture = v23[0];
    {
      WebCore::focusedNode(void)::node = 0;
    }
    v11 = v24;
    if (v24)
      *((_DWORD *)v24 + 6) += 2;
    v12 = WebCore::focusedNode(void)::node;
    WebCore::focusedNode(void)::node = (uint64_t)v11;
    if (v12)
    {
      if (*(_DWORD *)(v12 + 24) == 2)
      {
        if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v12, v10);
          v11 = v24;
        }
      }
      else
      {
        *(_DWORD *)(v12 + 24) -= 2;
      }
    }
    v24 = 0;
    if (v11)
    {
      if (*((_DWORD *)v11 + 6) == 2)
      {
        if ((*((_WORD *)v11 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v11, v10);
      }
      else
      {
        *((_DWORD *)v11 + 6) -= 2;
      }
    }
  }
  return 1;
}

uint64_t WebCore::executePasteFont(WebCore::LocalFrame *a1, uint64_t a2, int a3)
{
  uint64_t result;
  WebCore::Document *v5;
  uint64_t v6;
  WebCore::Document *v7;
  uint64_t v8;
  void *v9;
  WebCore::Node *v10;
  uint64_t v11;
  WebCore::Editor *v12;
  void *v13;
  WebCore::Editor *v14;
  uint64_t v15;
  void *v16;
  WebCore::Editor *v17;
  void *v18;
  WebCore::Editor *v19;
  uint64_t v20;
  void *v21;
  char v22[8];
  WebCore::Node *v23;

  if (a3)
  {
    result = WebCore::LocalFrame::requestDOMPasteAccess((uint64_t)a1, 1);
    if (!(_DWORD)result)
      return result;
    v5 = (WebCore::Document *)*((_QWORD *)a1 + 37);
    v6 = *((_QWORD *)v5 + 382);
    if (!v6)
    {
      v17 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v17, v5);
      v19 = (WebCore::Editor *)*((_QWORD *)v5 + 382);
      *((_QWORD *)v5 + 382) = v17;
      if (v19)
      {
        WebCore::Editor::~Editor(v19, v18);
        if (*(_DWORD *)v20)
        {
          *(_QWORD *)(v20 + 496) = 0;
          *(_OWORD *)(v20 + 464) = 0u;
          *(_OWORD *)(v20 + 480) = 0u;
          *(_OWORD *)(v20 + 432) = 0u;
          *(_OWORD *)(v20 + 448) = 0u;
          *(_OWORD *)(v20 + 400) = 0u;
          *(_OWORD *)(v20 + 416) = 0u;
          *(_OWORD *)(v20 + 368) = 0u;
          *(_OWORD *)(v20 + 384) = 0u;
          *(_OWORD *)(v20 + 336) = 0u;
          *(_OWORD *)(v20 + 352) = 0u;
          *(_OWORD *)(v20 + 304) = 0u;
          *(_OWORD *)(v20 + 320) = 0u;
          *(_OWORD *)(v20 + 272) = 0u;
          *(_OWORD *)(v20 + 288) = 0u;
          *(_OWORD *)(v20 + 240) = 0u;
          *(_OWORD *)(v20 + 256) = 0u;
          *(_OWORD *)(v20 + 208) = 0u;
          *(_OWORD *)(v20 + 224) = 0u;
          *(_OWORD *)(v20 + 176) = 0u;
          *(_OWORD *)(v20 + 192) = 0u;
          *(_OWORD *)(v20 + 144) = 0u;
          *(_OWORD *)(v20 + 160) = 0u;
          *(_OWORD *)(v20 + 112) = 0u;
          *(_OWORD *)(v20 + 128) = 0u;
          *(_OWORD *)(v20 + 80) = 0u;
          *(_OWORD *)(v20 + 96) = 0u;
          *(_OWORD *)(v20 + 48) = 0u;
          *(_OWORD *)(v20 + 64) = 0u;
          *(_OWORD *)(v20 + 16) = 0u;
          *(_OWORD *)(v20 + 32) = 0u;
          *(_OWORD *)v20 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v20, v21);
        }
      }
      v6 = *((_QWORD *)v5 + 382);
    }
    WebCore::Editor::pasteFont(v6, 0);
  }
  else
  {
    WebCore::UserTypingGestureIndicator::UserTypingGestureIndicator((WebCore::UserTypingGestureIndicator *)v22, a1);
    v7 = (WebCore::Document *)*((_QWORD *)a1 + 37);
    v8 = *((_QWORD *)v7 + 382);
    if (!v8)
    {
      v12 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v12, v7);
      v14 = (WebCore::Editor *)*((_QWORD *)v7 + 382);
      *((_QWORD *)v7 + 382) = v12;
      if (v14)
      {
        WebCore::Editor::~Editor(v14, v13);
        if (*(_DWORD *)v15)
        {
          *(_QWORD *)(v15 + 496) = 0;
          *(_OWORD *)(v15 + 464) = 0u;
          *(_OWORD *)(v15 + 480) = 0u;
          *(_OWORD *)(v15 + 432) = 0u;
          *(_OWORD *)(v15 + 448) = 0u;
          *(_OWORD *)(v15 + 400) = 0u;
          *(_OWORD *)(v15 + 416) = 0u;
          *(_OWORD *)(v15 + 368) = 0u;
          *(_OWORD *)(v15 + 384) = 0u;
          *(_OWORD *)(v15 + 336) = 0u;
          *(_OWORD *)(v15 + 352) = 0u;
          *(_OWORD *)(v15 + 304) = 0u;
          *(_OWORD *)(v15 + 320) = 0u;
          *(_OWORD *)(v15 + 272) = 0u;
          *(_OWORD *)(v15 + 288) = 0u;
          *(_OWORD *)(v15 + 240) = 0u;
          *(_OWORD *)(v15 + 256) = 0u;
          *(_OWORD *)(v15 + 208) = 0u;
          *(_OWORD *)(v15 + 224) = 0u;
          *(_OWORD *)(v15 + 176) = 0u;
          *(_OWORD *)(v15 + 192) = 0u;
          *(_OWORD *)(v15 + 144) = 0u;
          *(_OWORD *)(v15 + 160) = 0u;
          *(_OWORD *)(v15 + 112) = 0u;
          *(_OWORD *)(v15 + 128) = 0u;
          *(_OWORD *)(v15 + 80) = 0u;
          *(_OWORD *)(v15 + 96) = 0u;
          *(_OWORD *)(v15 + 48) = 0u;
          *(_OWORD *)(v15 + 64) = 0u;
          *(_OWORD *)(v15 + 16) = 0u;
          *(_OWORD *)(v15 + 32) = 0u;
          *(_OWORD *)v15 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v15, v16);
        }
      }
      v8 = *((_QWORD *)v7 + 382);
    }
    WebCore::Editor::pasteFont(v8, (void *)1);
    WebCore::s_processingUserTypingGesture = v22[0];
    {
      WebCore::focusedNode(void)::node = 0;
    }
    v10 = v23;
    if (v23)
      *((_DWORD *)v23 + 6) += 2;
    v11 = WebCore::focusedNode(void)::node;
    WebCore::focusedNode(void)::node = (uint64_t)v10;
    if (v11)
    {
      if (*(_DWORD *)(v11 + 24) == 2)
      {
        if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v11, v9);
          v10 = v23;
        }
      }
      else
      {
        *(_DWORD *)(v11 + 24) -= 2;
      }
    }
    v23 = 0;
    if (v10)
    {
      if (*((_DWORD *)v10 + 6) == 2)
      {
        if ((*((_WORD *)v10 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v10, v9);
      }
      else
      {
        *((_DWORD *)v10 + 6) -= 2;
      }
    }
  }
  return 1;
}

uint64_t WebCore::executePrint(WebCore::LocalFrame *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)a1 + 3);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return WebCore::Chrome::print(*(WebCore::Chrome **)(v2 + 48), a1);
  else
    return 0;
}

uint64_t WebCore::executeRedo(uint64_t a1)
{
  WebCore::Document *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::Editor *v6;
  void *v7;
  WebCore::Editor *v8;
  uint64_t v9;
  void *v10;

  v1 = *(WebCore::Document **)(a1 + 296);
  v2 = *((_QWORD *)v1 + 382);
  if (!v2)
  {
    v6 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v6, v1);
    v8 = (WebCore::Editor *)*((_QWORD *)v1 + 382);
    *((_QWORD *)v1 + 382) = v6;
    if (v8)
    {
      WebCore::Editor::~Editor(v8, v7);
      if (*(_DWORD *)v9)
      {
        *(_QWORD *)(v9 + 496) = 0;
        *(_OWORD *)(v9 + 464) = 0u;
        *(_OWORD *)(v9 + 480) = 0u;
        *(_OWORD *)(v9 + 432) = 0u;
        *(_OWORD *)(v9 + 448) = 0u;
        *(_OWORD *)(v9 + 400) = 0u;
        *(_OWORD *)(v9 + 416) = 0u;
        *(_OWORD *)(v9 + 368) = 0u;
        *(_OWORD *)(v9 + 384) = 0u;
        *(_OWORD *)(v9 + 336) = 0u;
        *(_OWORD *)(v9 + 352) = 0u;
        *(_OWORD *)(v9 + 304) = 0u;
        *(_OWORD *)(v9 + 320) = 0u;
        *(_OWORD *)(v9 + 272) = 0u;
        *(_OWORD *)(v9 + 288) = 0u;
        *(_OWORD *)(v9 + 240) = 0u;
        *(_OWORD *)(v9 + 256) = 0u;
        *(_OWORD *)(v9 + 208) = 0u;
        *(_OWORD *)(v9 + 224) = 0u;
        *(_OWORD *)(v9 + 176) = 0u;
        *(_OWORD *)(v9 + 192) = 0u;
        *(_OWORD *)(v9 + 144) = 0u;
        *(_OWORD *)(v9 + 160) = 0u;
        *(_OWORD *)(v9 + 112) = 0u;
        *(_OWORD *)(v9 + 128) = 0u;
        *(_OWORD *)(v9 + 80) = 0u;
        *(_OWORD *)(v9 + 96) = 0u;
        *(_OWORD *)(v9 + 48) = 0u;
        *(_OWORD *)(v9 + 64) = 0u;
        *(_OWORD *)(v9 + 16) = 0u;
        *(_OWORD *)(v9 + 32) = 0u;
        *(_OWORD *)v9 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v9, v10);
      }
    }
    v2 = *((_QWORD *)v1 + 382);
  }
  v3 = *(_QWORD *)(v2 + 8);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 424))(v4);
  }
  return 1;
}

uint64_t WebCore::enabledRedo(uint64_t a1)
{
  WebCore::Document *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::Editor *v6;
  void *v7;
  WebCore::Editor *v8;
  uint64_t v9;
  void *v10;

  v1 = *(WebCore::Document **)(a1 + 296);
  v2 = *((_QWORD *)v1 + 382);
  if (!v2)
  {
    v6 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v6, v1);
    v8 = (WebCore::Editor *)*((_QWORD *)v1 + 382);
    *((_QWORD *)v1 + 382) = v6;
    if (v8)
    {
      WebCore::Editor::~Editor(v8, v7);
      if (*(_DWORD *)v9)
      {
        *(_QWORD *)(v9 + 496) = 0;
        *(_OWORD *)(v9 + 464) = 0u;
        *(_OWORD *)(v9 + 480) = 0u;
        *(_OWORD *)(v9 + 432) = 0u;
        *(_OWORD *)(v9 + 448) = 0u;
        *(_OWORD *)(v9 + 400) = 0u;
        *(_OWORD *)(v9 + 416) = 0u;
        *(_OWORD *)(v9 + 368) = 0u;
        *(_OWORD *)(v9 + 384) = 0u;
        *(_OWORD *)(v9 + 336) = 0u;
        *(_OWORD *)(v9 + 352) = 0u;
        *(_OWORD *)(v9 + 304) = 0u;
        *(_OWORD *)(v9 + 320) = 0u;
        *(_OWORD *)(v9 + 272) = 0u;
        *(_OWORD *)(v9 + 288) = 0u;
        *(_OWORD *)(v9 + 240) = 0u;
        *(_OWORD *)(v9 + 256) = 0u;
        *(_OWORD *)(v9 + 208) = 0u;
        *(_OWORD *)(v9 + 224) = 0u;
        *(_OWORD *)(v9 + 176) = 0u;
        *(_OWORD *)(v9 + 192) = 0u;
        *(_OWORD *)(v9 + 144) = 0u;
        *(_OWORD *)(v9 + 160) = 0u;
        *(_OWORD *)(v9 + 112) = 0u;
        *(_OWORD *)(v9 + 128) = 0u;
        *(_OWORD *)(v9 + 80) = 0u;
        *(_OWORD *)(v9 + 96) = 0u;
        *(_OWORD *)(v9 + 48) = 0u;
        *(_OWORD *)(v9 + 64) = 0u;
        *(_OWORD *)(v9 + 16) = 0u;
        *(_OWORD *)(v9 + 32) = 0u;
        *(_OWORD *)v9 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v9, v10);
      }
    }
    v2 = *((_QWORD *)v1 + 382);
  }
  v3 = *(_QWORD *)(v2 + 8);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 408))(v4);
  else
    return 0;
}

uint64_t WebCore::executeRemoveFormat(uint64_t a1)
{
  WebCore::Document *v1;
  uint64_t v2;
  WebCore::Node *v3;
  _DWORD *v4;
  uint64_t v5;
  void *v6;
  WebCore::Node *v7;
  WebCore::Editor *v9;
  void *v10;
  WebCore::Editor *v11;
  uint64_t v12;
  void *v13;
  WebCore::Node *v14;

  v1 = *(WebCore::Document **)(a1 + 296);
  v2 = *((_QWORD *)v1 + 382);
  if (!v2)
  {
    v9 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v9, v1);
    v11 = (WebCore::Editor *)*((_QWORD *)v1 + 382);
    *((_QWORD *)v1 + 382) = v9;
    if (v11)
    {
      WebCore::Editor::~Editor(v11, v10);
      if (*(_DWORD *)v12)
      {
        *(_QWORD *)(v12 + 496) = 0;
        *(_OWORD *)(v12 + 464) = 0u;
        *(_OWORD *)(v12 + 480) = 0u;
        *(_OWORD *)(v12 + 432) = 0u;
        *(_OWORD *)(v12 + 448) = 0u;
        *(_OWORD *)(v12 + 400) = 0u;
        *(_OWORD *)(v12 + 416) = 0u;
        *(_OWORD *)(v12 + 368) = 0u;
        *(_OWORD *)(v12 + 384) = 0u;
        *(_OWORD *)(v12 + 336) = 0u;
        *(_OWORD *)(v12 + 352) = 0u;
        *(_OWORD *)(v12 + 304) = 0u;
        *(_OWORD *)(v12 + 320) = 0u;
        *(_OWORD *)(v12 + 272) = 0u;
        *(_OWORD *)(v12 + 288) = 0u;
        *(_OWORD *)(v12 + 240) = 0u;
        *(_OWORD *)(v12 + 256) = 0u;
        *(_OWORD *)(v12 + 208) = 0u;
        *(_OWORD *)(v12 + 224) = 0u;
        *(_OWORD *)(v12 + 176) = 0u;
        *(_OWORD *)(v12 + 192) = 0u;
        *(_OWORD *)(v12 + 144) = 0u;
        *(_OWORD *)(v12 + 160) = 0u;
        *(_OWORD *)(v12 + 112) = 0u;
        *(_OWORD *)(v12 + 128) = 0u;
        *(_OWORD *)(v12 + 80) = 0u;
        *(_OWORD *)(v12 + 96) = 0u;
        *(_OWORD *)(v12 + 48) = 0u;
        *(_OWORD *)(v12 + 64) = 0u;
        *(_OWORD *)(v12 + 16) = 0u;
        *(_OWORD *)(v12 + 32) = 0u;
        *(_OWORD *)v12 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v12, v13);
      }
    }
    v2 = *((_QWORD *)v1 + 382);
  }
  v3 = *(WebCore::Node **)(*(_QWORD *)(v2 + 16) + 8);
  *((_DWORD *)v3 + 6) += 2;
  v14 = v3;
  v4 = (_DWORD *)WTF::fastMalloc((WTF *)0x118);
  v5 = WebCore::EditCommand::EditCommand((uint64_t)v4, (uint64_t *)&v14, 59);
  *(_OWORD *)(v5 + 248) = 0u;
  *(_OWORD *)(v5 + 264) = 0u;
  *(_QWORD *)v5 = off_1E33AD5A0;
  WebCore::CompositeEditCommand::apply((WebCore::CompositeEditCommand *)v5);
  if (v4[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  else
    --v4[2];
  v7 = v14;
  v14 = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 6) == 2)
    {
      if ((*((_WORD *)v7 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v7, v6);
    }
    else
    {
      *((_DWORD *)v7 + 6) -= 2;
    }
  }
  return 1;
}

BOOL WebCore::enabledRangeInEditableText(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  void *v4;
  _BOOL8 v5;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064);
  if (*(_BYTE *)(v1 + 153) != 2)
    return 0;
  v2 = *(_QWORD *)(v1 + 120);
  if (!v2)
    return 0;
  v3 = *(_BYTE *)(v1 + 132) & 7;
  if (v3 > 4)
    return 0;
  if (((1 << v3) & 0x19) == 0)
  {
    v2 = *(_QWORD *)(v2 + 32);
    if (!v2)
      return 0;
  }
  *(_DWORD *)(v2 + 24) += 2;
  v5 = WebCore::Node::computeEditability(v2, 0, 0) != 0;
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v4);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return v5;
}

uint64_t WebCore::executeScrollPageBackward(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;

  v2 = WebCore::EventHandler::shouldUseSmoothKeyboardScrollingForFocusedScrollableArea(*(WebCore::EventHandler **)(a1 + 640));
  v3 = *(_QWORD *)(a1 + 640);
  if (!v2)
    return WebCore::EventHandler::logicalScrollRecursively(v3, 0, 1, 0);
  v4 = *(unsigned __int8 *)(v3 + 191);
  *(_BYTE *)(v3 + 191) = 0;
  return WebCore::EventHandler::keyboardScrollRecursively(v3, 0x100u, 0x101u, 0, v4);
}

uint64_t WebCore::executeScrollPageForward(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;

  v2 = WebCore::EventHandler::shouldUseSmoothKeyboardScrollingForFocusedScrollableArea(*(WebCore::EventHandler **)(a1 + 640));
  v3 = *(_QWORD *)(a1 + 640);
  if (!v2)
    return WebCore::EventHandler::logicalScrollRecursively(v3, (void *)1, 1, 0);
  v4 = *(unsigned __int8 *)(v3 + 191);
  *(_BYTE *)(v3 + 191) = 0;
  return WebCore::EventHandler::keyboardScrollRecursively(v3, 0x101u, 0x101u, 0, v4);
}

uint64_t WebCore::executeScrollLineUp(uint64_t a1)
{
  return WebCore::EventHandler::scrollRecursively(*(_QWORD *)(a1 + 640), 0, 0, 0);
}

uint64_t WebCore::executeScrollLineDown(uint64_t a1)
{
  return WebCore::EventHandler::scrollRecursively(*(_QWORD *)(a1 + 640), (void *)1, 0, 0);
}

uint64_t WebCore::executeScrollToBeginningOfDocument(uint64_t a1)
{
  return WebCore::EventHandler::logicalScrollRecursively(*(_QWORD *)(a1 + 640), 0, 2, 0);
}

uint64_t WebCore::executeScrollToEndOfDocument(uint64_t a1)
{
  return WebCore::EventHandler::logicalScrollRecursively(*(_QWORD *)(a1 + 640), (void *)1, 2, 0);
}

uint64_t WebCore::executeSelectAll(uint64_t a1, void *a2)
{
  WebCore::FrameSelection::selectAll(*(WebCore::FrameSelection **)(*(_QWORD *)(a1 + 296) + 3064), a2);
  return 1;
}

WebCore::Document *WebCore::executeSelectLine(uint64_t a1)
{
  return WebCore::expandSelectionToGranularity(a1, 3);
}

WebCore::Document *WebCore::executeSelectParagraph(uint64_t a1)
{
  return WebCore::expandSelectionToGranularity(a1, 4);
}

WebCore::Document *WebCore::executeSelectSentence(uint64_t a1)
{
  return WebCore::expandSelectionToGranularity(a1, 2);
}

uint64_t WebCore::executeSelectToMark(uint64_t a1)
{
  WebCore::Document *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  BOOL v5;
  uint64_t v6;
  unsigned __int8 v7;
  _BOOL4 v8;
  _BOOL4 v9;
  unsigned __int8 v10;
  _BOOL4 v11;
  _BOOL4 v12;
  WebCore::Node **v13;
  WebCore::Node *v14;
  uint64_t *v15;
  int v16;
  BOOL v17;
  WebCore::Node **v18;
  WebCore::Node *v19;
  uint64_t *v20;
  int v21;
  WebCore::Node *v22;
  WebCore::Node *v23;
  WebCore::Node *v24;
  WebCore::Node *v25;
  WebCore::Node *v26;
  WebCore::Editor *v29;
  void *v30;
  WebCore::Editor *v31;
  uint64_t v32;
  void *v33;
  WebCore::Node *v34;
  int v35;
  WebCore::Node *v36;
  int v37;
  char v38;
  WebCore::Node *v39;
  uint64_t v40;
  WebCore::Node *v41;
  uint64_t v42;
  char v43;
  WebCore::Node *v44;
  uint64_t v45;
  WebCore::Node *v46;
  uint64_t v47;
  char v48;
  _BYTE v49[104];

  v1 = *(WebCore::Document **)(a1 + 296);
  v2 = *((_QWORD *)v1 + 382);
  if (!v2)
  {
    v29 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v29, v1);
    v31 = (WebCore::Editor *)*((_QWORD *)v1 + 382);
    *((_QWORD *)v1 + 382) = v29;
    if (v31)
    {
      WebCore::Editor::~Editor(v31, v30);
      if (*(_DWORD *)v32)
      {
        *(_QWORD *)(v32 + 496) = 0;
        *(_OWORD *)(v32 + 464) = 0u;
        *(_OWORD *)(v32 + 480) = 0u;
        *(_OWORD *)(v32 + 432) = 0u;
        *(_OWORD *)(v32 + 448) = 0u;
        *(_OWORD *)(v32 + 400) = 0u;
        *(_OWORD *)(v32 + 416) = 0u;
        *(_OWORD *)(v32 + 368) = 0u;
        *(_OWORD *)(v32 + 384) = 0u;
        *(_OWORD *)(v32 + 336) = 0u;
        *(_OWORD *)(v32 + 352) = 0u;
        *(_OWORD *)(v32 + 304) = 0u;
        *(_OWORD *)(v32 + 320) = 0u;
        *(_OWORD *)(v32 + 272) = 0u;
        *(_OWORD *)(v32 + 288) = 0u;
        *(_OWORD *)(v32 + 240) = 0u;
        *(_OWORD *)(v32 + 256) = 0u;
        *(_OWORD *)(v32 + 208) = 0u;
        *(_OWORD *)(v32 + 224) = 0u;
        *(_OWORD *)(v32 + 176) = 0u;
        *(_OWORD *)(v32 + 192) = 0u;
        *(_OWORD *)(v32 + 144) = 0u;
        *(_OWORD *)(v32 + 160) = 0u;
        *(_OWORD *)(v32 + 112) = 0u;
        *(_OWORD *)(v32 + 128) = 0u;
        *(_OWORD *)(v32 + 80) = 0u;
        *(_OWORD *)(v32 + 96) = 0u;
        *(_OWORD *)(v32 + 48) = 0u;
        *(_OWORD *)(v32 + 64) = 0u;
        *(_OWORD *)(v32 + 16) = 0u;
        *(_OWORD *)(v32 + 32) = 0u;
        *(_OWORD *)v32 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v32, v33);
      }
    }
    v2 = *((_QWORD *)v1 + 382);
    v1 = *(WebCore::Document **)(a1 + 296);
  }
  v3 = *((_QWORD *)v1 + 383);
  WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(v2 + 200), &v44);
  WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(v3 + 56), &v39);
  if (v48)
    v5 = v43 == 0;
  else
    v5 = 1;
  v6 = !v5;
  if (v5)
  {
    {
      if (WebCore::SystemSoundManager::singleton(void)::systemSoundManager)
        (*(void (**)(uint64_t))(*(_QWORD *)WebCore::SystemSoundManager::singleton(void)::systemSoundManager
                                        + 16))(WebCore::SystemSoundManager::singleton(void)::systemSoundManager);
    }
    else
    {
      WebCore::SystemSoundManager::singleton(void)::systemSoundManager = 0;
    }
  }
  else
  {
    v7 = WebCore::treeOrder<(WebCore::TreeType)2>((int *)&v39, (uint64_t)&v44);
    v8 = v7 != 129;
    v9 = (v7 & 0x80u) != 0;
    v10 = WebCore::treeOrder<(WebCore::TreeType)2>((int *)&v46, (uint64_t)&v41);
    v11 = v10 != 129;
    v12 = (v10 & 0x80u) != 0;
    if (v8 && v9)
      v13 = &v39;
    else
      v13 = &v44;
    v14 = *v13;
    *((_DWORD *)v14 + 6) += 2;
    v15 = &v40;
    if (!v8 || !v9)
      v15 = &v45;
    v16 = *(_DWORD *)v15;
    v17 = !v11 || !v12;
    if (v11 && v12)
      v18 = &v41;
    else
      v18 = &v46;
    v19 = *v18;
    *((_DWORD *)*v18 + 6) += 2;
    v20 = &v42;
    if (v17)
      v20 = &v47;
    v21 = *(_DWORD *)v20;
    v34 = v14;
    v35 = v16;
    v36 = v19;
    v37 = v21;
    v38 = 1;
    if (*(_QWORD *)(*((_QWORD *)v14 + 5) + 8) != *(_QWORD *)(*((_QWORD *)v19 + 5) + 8))
    {
      v36 = 0;
      goto LABEL_22;
    }
    WebCore::VisibleSelection::VisibleSelection((uint64_t)v49, (uint64_t)&v34, 1, 0);
    if (v49[97])
      WebCore::FrameSelection::setSelection(v3, (uint64_t)v49, 6u, 0, 0, 0, 0);
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v49);
    if (v38)
    {
      v19 = v36;
      v36 = 0;
      if (!v19)
      {
LABEL_24:
        v22 = v34;
        v34 = 0;
        if (v22)
        {
          if (*((_DWORD *)v22 + 6) == 2)
          {
            if ((*((_WORD *)v22 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v22, v4);
          }
          else
          {
            *((_DWORD *)v22 + 6) -= 2;
          }
        }
        goto LABEL_30;
      }
LABEL_22:
      if (*((_DWORD *)v19 + 6) == 2)
      {
        if ((*((_WORD *)v19 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v19, v4);
      }
      else
      {
        *((_DWORD *)v19 + 6) -= 2;
      }
      goto LABEL_24;
    }
  }
LABEL_30:
  if (v43)
  {
    v23 = v41;
    v41 = 0;
    if (v23)
    {
      if (*((_DWORD *)v23 + 6) == 2)
      {
        if ((*((_WORD *)v23 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v23, v4);
      }
      else
      {
        *((_DWORD *)v23 + 6) -= 2;
      }
    }
    v24 = v39;
    v39 = 0;
    if (v24)
    {
      if (*((_DWORD *)v24 + 6) == 2)
      {
        if ((*((_WORD *)v24 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v24, v4);
      }
      else
      {
        *((_DWORD *)v24 + 6) -= 2;
      }
    }
  }
  if (v48)
  {
    v25 = v46;
    v46 = 0;
    if (v25)
    {
      if (*((_DWORD *)v25 + 6) == 2)
      {
        if ((*((_WORD *)v25 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v25, v4);
      }
      else
      {
        *((_DWORD *)v25 + 6) -= 2;
      }
    }
    v26 = v44;
    v44 = 0;
    if (v26)
    {
      if (*((_DWORD *)v26 + 6) == 2)
      {
        if ((*((_WORD *)v26 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v26, v4);
      }
      else
      {
        *((_DWORD *)v26 + 6) -= 2;
      }
    }
  }
  return v6;
}

BOOL WebCore::enabledVisibleSelectionAndMark(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WebCore::Document *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  void *v9;
  int v10;
  WebCore::Document *v11;
  uint64_t v12;
  _BOOL8 v13;
  WebCore::Editor *v15;
  void *v16;
  WebCore::Editor *v17;
  uint64_t v18;
  void *v19;
  WebCore::Editor *v20;
  void *v21;
  WebCore::Editor *v22;
  uint64_t v23;
  void *v24;
  _BYTE v26[64];
  uint64_t v27;
  char v28;
  unsigned __int8 v29;

  v2 = a2;
  v4 = *(WebCore::Document **)(a1 + 296);
  v5 = *((_QWORD *)v4 + 382);
  if (!v5)
  {
    v15 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v15, v4);
    v17 = (WebCore::Editor *)*((_QWORD *)v4 + 382);
    *((_QWORD *)v4 + 382) = v15;
    if (v17)
    {
      WebCore::Editor::~Editor(v17, v16);
      if (*(_DWORD *)v18)
      {
        *(_QWORD *)(v18 + 496) = 0;
        *(_OWORD *)(v18 + 464) = 0u;
        *(_OWORD *)(v18 + 480) = 0u;
        *(_OWORD *)(v18 + 432) = 0u;
        *(_OWORD *)(v18 + 448) = 0u;
        *(_OWORD *)(v18 + 400) = 0u;
        *(_OWORD *)(v18 + 416) = 0u;
        *(_OWORD *)(v18 + 368) = 0u;
        *(_OWORD *)(v18 + 384) = 0u;
        *(_OWORD *)(v18 + 336) = 0u;
        *(_OWORD *)(v18 + 352) = 0u;
        *(_OWORD *)(v18 + 304) = 0u;
        *(_OWORD *)(v18 + 320) = 0u;
        *(_OWORD *)(v18 + 272) = 0u;
        *(_OWORD *)(v18 + 288) = 0u;
        *(_OWORD *)(v18 + 240) = 0u;
        *(_OWORD *)(v18 + 256) = 0u;
        *(_OWORD *)(v18 + 208) = 0u;
        *(_OWORD *)(v18 + 224) = 0u;
        *(_OWORD *)(v18 + 176) = 0u;
        *(_OWORD *)(v18 + 192) = 0u;
        *(_OWORD *)(v18 + 144) = 0u;
        *(_OWORD *)(v18 + 160) = 0u;
        *(_OWORD *)(v18 + 112) = 0u;
        *(_OWORD *)(v18 + 128) = 0u;
        *(_OWORD *)(v18 + 80) = 0u;
        *(_OWORD *)(v18 + 96) = 0u;
        *(_OWORD *)(v18 + 48) = 0u;
        *(_OWORD *)(v18 + 64) = 0u;
        *(_OWORD *)(v18 + 16) = 0u;
        *(_OWORD *)(v18 + 32) = 0u;
        *(_OWORD *)v18 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v18, v19);
      }
    }
    v5 = *((_QWORD *)v4 + 382);
    v2 = a2;
  }
  WebCore::Editor::selectionForCommand((WebCore::Editor *)v26, *(WebCore::Event **)(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 8) + 3064), v2);
  v6 = v29;
  if (v29 == 1)
  {
    v7 = v27;
    if (v27)
    {
      v8 = v28 & 7;
      if (v8 <= 4 && (((1 << v8) & 0x19) != 0 || (v7 = *(_QWORD *)(v27 + 32)) != 0))
      {
        *(_DWORD *)(v7 + 24) += 2;
        v10 = WebCore::Node::computeEditability(v7, 0, 0);
        if (*(_DWORD *)(v7 + 24) == 2)
        {
          if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v7, v9);
        }
        else
        {
          *(_DWORD *)(v7 + 24) -= 2;
        }
        if (v10)
          goto LABEL_11;
      }
    }
    v6 = v29;
  }
  if (v6 != 2)
  {
    v13 = 0;
    goto LABEL_14;
  }
LABEL_11:
  v11 = *(WebCore::Document **)(a1 + 296);
  v12 = *((_QWORD *)v11 + 382);
  if (!v12)
  {
    v20 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v20, v11);
    v22 = (WebCore::Editor *)*((_QWORD *)v11 + 382);
    *((_QWORD *)v11 + 382) = v20;
    if (v22)
    {
      WebCore::Editor::~Editor(v22, v21);
      if (*(_DWORD *)v23)
      {
        *(_QWORD *)(v23 + 496) = 0;
        *(_OWORD *)(v23 + 464) = 0u;
        *(_OWORD *)(v23 + 480) = 0u;
        *(_OWORD *)(v23 + 432) = 0u;
        *(_OWORD *)(v23 + 448) = 0u;
        *(_OWORD *)(v23 + 400) = 0u;
        *(_OWORD *)(v23 + 416) = 0u;
        *(_OWORD *)(v23 + 368) = 0u;
        *(_OWORD *)(v23 + 384) = 0u;
        *(_OWORD *)(v23 + 336) = 0u;
        *(_OWORD *)(v23 + 352) = 0u;
        *(_OWORD *)(v23 + 304) = 0u;
        *(_OWORD *)(v23 + 320) = 0u;
        *(_OWORD *)(v23 + 272) = 0u;
        *(_OWORD *)(v23 + 288) = 0u;
        *(_OWORD *)(v23 + 240) = 0u;
        *(_OWORD *)(v23 + 256) = 0u;
        *(_OWORD *)(v23 + 208) = 0u;
        *(_OWORD *)(v23 + 224) = 0u;
        *(_OWORD *)(v23 + 176) = 0u;
        *(_OWORD *)(v23 + 192) = 0u;
        *(_OWORD *)(v23 + 144) = 0u;
        *(_OWORD *)(v23 + 160) = 0u;
        *(_OWORD *)(v23 + 112) = 0u;
        *(_OWORD *)(v23 + 128) = 0u;
        *(_OWORD *)(v23 + 80) = 0u;
        *(_OWORD *)(v23 + 96) = 0u;
        *(_OWORD *)(v23 + 48) = 0u;
        *(_OWORD *)(v23 + 64) = 0u;
        *(_OWORD *)(v23 + 16) = 0u;
        *(_OWORD *)(v23 + 32) = 0u;
        *(_OWORD *)v23 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v23, v24);
      }
    }
    v12 = *((_QWORD *)v11 + 382);
  }
  v13 = *(unsigned __int8 *)(v12 + 297) != 0;
LABEL_14:
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v26);
  return v13;
}

WebCore::Document *WebCore::executeSelectWord(uint64_t a1)
{
  return WebCore::expandSelectionToGranularity(a1, 1);
}

uint64_t WebCore::executeSetMark(uint64_t a1)
{
  WebCore::Document *v1;
  uint64_t v2;
  WebCore::Editor *v4;
  void *v5;
  WebCore::Editor *v6;
  uint64_t v7;
  void *v8;

  v1 = *(WebCore::Document **)(a1 + 296);
  v2 = *((_QWORD *)v1 + 382);
  if (!v2)
  {
    v4 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v4, v1);
    v6 = (WebCore::Editor *)*((_QWORD *)v1 + 382);
    *((_QWORD *)v1 + 382) = v4;
    if (v6)
    {
      WebCore::Editor::~Editor(v6, v5);
      if (*(_DWORD *)v7)
      {
        *(_QWORD *)(v7 + 496) = 0;
        *(_OWORD *)(v7 + 464) = 0u;
        *(_OWORD *)(v7 + 480) = 0u;
        *(_OWORD *)(v7 + 432) = 0u;
        *(_OWORD *)(v7 + 448) = 0u;
        *(_OWORD *)(v7 + 400) = 0u;
        *(_OWORD *)(v7 + 416) = 0u;
        *(_OWORD *)(v7 + 368) = 0u;
        *(_OWORD *)(v7 + 384) = 0u;
        *(_OWORD *)(v7 + 336) = 0u;
        *(_OWORD *)(v7 + 352) = 0u;
        *(_OWORD *)(v7 + 304) = 0u;
        *(_OWORD *)(v7 + 320) = 0u;
        *(_OWORD *)(v7 + 272) = 0u;
        *(_OWORD *)(v7 + 288) = 0u;
        *(_OWORD *)(v7 + 240) = 0u;
        *(_OWORD *)(v7 + 256) = 0u;
        *(_OWORD *)(v7 + 208) = 0u;
        *(_OWORD *)(v7 + 224) = 0u;
        *(_OWORD *)(v7 + 176) = 0u;
        *(_OWORD *)(v7 + 192) = 0u;
        *(_OWORD *)(v7 + 144) = 0u;
        *(_OWORD *)(v7 + 160) = 0u;
        *(_OWORD *)(v7 + 112) = 0u;
        *(_OWORD *)(v7 + 128) = 0u;
        *(_OWORD *)(v7 + 80) = 0u;
        *(_OWORD *)(v7 + 96) = 0u;
        *(_OWORD *)(v7 + 48) = 0u;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        *(_OWORD *)(v7 + 32) = 0u;
        *(_OWORD *)v7 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v7, v8);
      }
    }
    v2 = *((_QWORD *)v1 + 382);
    v1 = *(WebCore::Document **)(a1 + 296);
  }
  WebCore::VisibleSelection::operator=((uint64_t *)(v2 + 200), (uint64_t *)(*((_QWORD *)v1 + 383) + 56));
  return 1;
}

uint64_t WebCore::executeStrikethrough(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  WebCore::Document *v6;
  uint64_t v7;
  char v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD **v16;
  _DWORD *v17;
  WTF *v18;
  uint64_t v20;
  WebCore::Editor *v21;
  void *v22;
  WebCore::Editor *v23;
  uint64_t v24;
  void *v25;
  WTF *v26;

  v5 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v5 = 1;
  *(_QWORD *)(v5 + 8) = 0;
  *(_BYTE *)(v5 + 16) &= 0xE0u;
  *(_DWORD *)(v5 + 20) = WebCore::EditingStyle::NoFontDelta;
  v26 = (WTF *)v5;
  v6 = *(WebCore::Document **)(a1 + 296);
  v7 = *((_QWORD *)v6 + 382);
  if (!v7)
  {
    v21 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v21, v6);
    v23 = (WebCore::Editor *)*((_QWORD *)v6 + 382);
    *((_QWORD *)v6 + 382) = v21;
    if (v23)
    {
      WebCore::Editor::~Editor(v23, v22);
      if (*(_DWORD *)v24)
      {
        *(_QWORD *)(v24 + 496) = 0;
        *(_OWORD *)(v24 + 464) = 0u;
        *(_OWORD *)(v24 + 480) = 0u;
        *(_OWORD *)(v24 + 432) = 0u;
        *(_OWORD *)(v24 + 448) = 0u;
        *(_OWORD *)(v24 + 400) = 0u;
        *(_OWORD *)(v24 + 416) = 0u;
        *(_OWORD *)(v24 + 368) = 0u;
        *(_OWORD *)(v24 + 384) = 0u;
        *(_OWORD *)(v24 + 336) = 0u;
        *(_OWORD *)(v24 + 352) = 0u;
        *(_OWORD *)(v24 + 304) = 0u;
        *(_OWORD *)(v24 + 320) = 0u;
        *(_OWORD *)(v24 + 272) = 0u;
        *(_OWORD *)(v24 + 288) = 0u;
        *(_OWORD *)(v24 + 240) = 0u;
        *(_OWORD *)(v24 + 256) = 0u;
        *(_OWORD *)(v24 + 208) = 0u;
        *(_OWORD *)(v24 + 224) = 0u;
        *(_OWORD *)(v24 + 176) = 0u;
        *(_OWORD *)(v24 + 192) = 0u;
        *(_OWORD *)(v24 + 144) = 0u;
        *(_OWORD *)(v24 + 160) = 0u;
        *(_OWORD *)(v24 + 112) = 0u;
        *(_OWORD *)(v24 + 128) = 0u;
        *(_OWORD *)(v24 + 80) = 0u;
        *(_OWORD *)(v24 + 96) = 0u;
        *(_OWORD *)(v24 + 48) = 0u;
        *(_OWORD *)(v24 + 64) = 0u;
        *(_OWORD *)(v24 + 16) = 0u;
        *(_OWORD *)(v24 + 32) = 0u;
        *(_OWORD *)v24 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v24, v25);
      }
    }
    v7 = *((_QWORD *)v6 + 382);
  }
  if (WebCore::isStylePresent(v7, 341, (uint64_t)"line-through", 13))
    v8 = 16;
  else
    v8 = 8;
  *(_BYTE *)(v5 + 16) = *(_BYTE *)(v5 + 16) & 0xE7 | v8;
  v10 = WebCore::applyCommandToFrame(*(WebCore::Document **)(a1 + 296), a3, 0x24u, &v26);
  v11 = v26;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
    {
      v13 = *((_QWORD *)v26 + 1);
      *((_QWORD *)v26 + 1) = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 1)
        {
          v14 = *(unsigned int *)(v13 + 28);
          if ((_DWORD)v14)
          {
            v15 = 16 * v14;
            v16 = (_DWORD **)(*(_QWORD *)(v13 + 16) + 8);
            do
            {
              v17 = *v16;
              *v16 = 0;
              if (v17)
              {
                if (*v17 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, v9);
                else
                  *v17 -= 2;
              }
              v16 += 2;
              v15 -= 16;
            }
            while (v15);
          }
          v18 = *(WTF **)(v13 + 16);
          if ((WTF *)(v13 + 32) != v18 && v18 != 0)
          {
            *(_QWORD *)(v13 + 16) = 0;
            *(_DWORD *)(v13 + 24) = 0;
            WTF::fastFree(v18, v9);
          }
          v20 = *(_QWORD *)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          if (v20)
            (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          WTF::fastFree((WTF *)v13, v9);
        }
        else
        {
          --*(_DWORD *)v13;
        }
      }
      WTF::fastFree(v11, v9);
    }
    else
    {
      --*(_DWORD *)v26;
    }
  }
  return v10;
}

uint64_t WebCore::stateStrikethrough(WebCore *this, WebCore::LocalFrame *a2, WebCore::Event *a3)
{
  return WebCore::stateStyle((uint64_t)this, 341, (uint64_t)"line-through", 13);
}

uint64_t WebCore::executeStyleWithCSS(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  WebCore::Document *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v9;
  int v10;
  WebCore::Editor *v11;
  void *v12;
  WebCore::Editor *v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;

  v4 = *(WebCore::Document **)(a1 + 296);
  v5 = *((_QWORD *)v4 + 382);
  if (!v5)
  {
    v16 = a4;
    v11 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v11, v4);
    v13 = (WebCore::Editor *)*((_QWORD *)v4 + 382);
    *((_QWORD *)v4 + 382) = v11;
    if (v13)
    {
      WebCore::Editor::~Editor(v13, v12);
      if (*(_DWORD *)v14)
      {
        *(_QWORD *)(v14 + 496) = 0;
        *(_OWORD *)(v14 + 464) = 0u;
        *(_OWORD *)(v14 + 480) = 0u;
        *(_OWORD *)(v14 + 432) = 0u;
        *(_OWORD *)(v14 + 448) = 0u;
        *(_OWORD *)(v14 + 400) = 0u;
        *(_OWORD *)(v14 + 416) = 0u;
        *(_OWORD *)(v14 + 368) = 0u;
        *(_OWORD *)(v14 + 384) = 0u;
        *(_OWORD *)(v14 + 336) = 0u;
        *(_OWORD *)(v14 + 352) = 0u;
        *(_OWORD *)(v14 + 304) = 0u;
        *(_OWORD *)(v14 + 320) = 0u;
        *(_OWORD *)(v14 + 272) = 0u;
        *(_OWORD *)(v14 + 288) = 0u;
        *(_OWORD *)(v14 + 240) = 0u;
        *(_OWORD *)(v14 + 256) = 0u;
        *(_OWORD *)(v14 + 208) = 0u;
        *(_OWORD *)(v14 + 224) = 0u;
        *(_OWORD *)(v14 + 176) = 0u;
        *(_OWORD *)(v14 + 192) = 0u;
        *(_OWORD *)(v14 + 144) = 0u;
        *(_OWORD *)(v14 + 160) = 0u;
        *(_OWORD *)(v14 + 112) = 0u;
        *(_OWORD *)(v14 + 128) = 0u;
        *(_OWORD *)(v14 + 80) = 0u;
        *(_OWORD *)(v14 + 96) = 0u;
        *(_OWORD *)(v14 + 48) = 0u;
        *(_OWORD *)(v14 + 64) = 0u;
        *(_OWORD *)(v14 + 16) = 0u;
        *(_OWORD *)(v14 + 32) = 0u;
        *(_OWORD *)v14 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v14, v15);
      }
    }
    v5 = *((_QWORD *)v4 + 382);
    a4 = v16;
  }
  v6 = *a4;
  if (*a4 && *(_DWORD *)(v6 + 4) == 5)
  {
    v9 = *(_QWORD *)(v6 + 8);
    if ((*(_BYTE *)(v6 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v9 & 0xDF) == 0x46
        && (*(_BYTE *)(v9 + 1) & 0xDF) == 0x41
        && (*(_BYTE *)(v9 + 2) & 0xDF) == 0x4C
        && (*(_BYTE *)(v9 + 3) & 0xDF) == 0x53)
      {
        v10 = *(unsigned __int8 *)(v9 + 4);
LABEL_12:
        v7 = (v10 & 0xFFFFFFDF) == 69;
        goto LABEL_4;
      }
    }
    else if ((*(_WORD *)v9 & 0xFFDF) == 0x46
           && (*(_WORD *)(v9 + 2) & 0xFFDF) == 0x41
           && (*(_WORD *)(v9 + 4) & 0xFFDF) == 0x4C
           && (*(_WORD *)(v9 + 6) & 0xFFDF) == 0x53)
    {
      v10 = *(unsigned __int16 *)(v9 + 8);
      goto LABEL_12;
    }
  }
  v7 = 0;
LABEL_4:
  *(_BYTE *)(v5 + 90) = !v7;
  return 1;
}

uint64_t WebCore::stateStyleWithCSS(WebCore *this, WebCore::LocalFrame *a2, WebCore::Event *a3)
{
  WebCore::Document *v3;
  uint64_t v4;
  WebCore::Editor *v6;
  void *v7;
  WebCore::Editor *v8;
  uint64_t v9;
  void *v10;

  v3 = (WebCore::Document *)*((_QWORD *)this + 37);
  v4 = *((_QWORD *)v3 + 382);
  if (!v4)
  {
    v6 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v6, v3);
    v8 = (WebCore::Editor *)*((_QWORD *)v3 + 382);
    *((_QWORD *)v3 + 382) = v6;
    if (v8)
    {
      WebCore::Editor::~Editor(v8, v7);
      if (*(_DWORD *)v9)
      {
        *(_QWORD *)(v9 + 496) = 0;
        *(_OWORD *)(v9 + 464) = 0u;
        *(_OWORD *)(v9 + 480) = 0u;
        *(_OWORD *)(v9 + 432) = 0u;
        *(_OWORD *)(v9 + 448) = 0u;
        *(_OWORD *)(v9 + 400) = 0u;
        *(_OWORD *)(v9 + 416) = 0u;
        *(_OWORD *)(v9 + 368) = 0u;
        *(_OWORD *)(v9 + 384) = 0u;
        *(_OWORD *)(v9 + 336) = 0u;
        *(_OWORD *)(v9 + 352) = 0u;
        *(_OWORD *)(v9 + 304) = 0u;
        *(_OWORD *)(v9 + 320) = 0u;
        *(_OWORD *)(v9 + 272) = 0u;
        *(_OWORD *)(v9 + 288) = 0u;
        *(_OWORD *)(v9 + 240) = 0u;
        *(_OWORD *)(v9 + 256) = 0u;
        *(_OWORD *)(v9 + 208) = 0u;
        *(_OWORD *)(v9 + 224) = 0u;
        *(_OWORD *)(v9 + 176) = 0u;
        *(_OWORD *)(v9 + 192) = 0u;
        *(_OWORD *)(v9 + 144) = 0u;
        *(_OWORD *)(v9 + 160) = 0u;
        *(_OWORD *)(v9 + 112) = 0u;
        *(_OWORD *)(v9 + 128) = 0u;
        *(_OWORD *)(v9 + 80) = 0u;
        *(_OWORD *)(v9 + 96) = 0u;
        *(_OWORD *)(v9 + 48) = 0u;
        *(_OWORD *)(v9 + 64) = 0u;
        *(_OWORD *)(v9 + 16) = 0u;
        *(_OWORD *)(v9 + 32) = 0u;
        *(_OWORD *)v9 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v9, v10);
      }
    }
    v4 = *((_QWORD *)v3 + 382);
  }
  return *(unsigned __int8 *)(v4 + 90);
}

void WebCore::valueAsEmptyString(_QWORD *a1@<X8>)
{
  _DWORD *v4;

  v4 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v4 += 2;
  *a1 = v4;
}

uint64_t WebCore::executeSubscript(uint64_t a1, uint64_t a2, int a3)
{
  return WebCore::executeToggleStyle(a1, a3, 0x25u, 288, (uint64_t)"baseline", 9, (uint64_t)"sub", 4);
}

uint64_t WebCore::stateSubscript(WebCore *this, WebCore::LocalFrame *a2, WebCore::Event *a3)
{
  return WebCore::stateStyle((uint64_t)this, 288, (uint64_t)"sub", 4);
}

uint64_t WebCore::executeSuperscript(uint64_t a1, uint64_t a2, int a3)
{
  return WebCore::executeToggleStyle(a1, a3, 0x26u, 288, (uint64_t)"baseline", 9, (uint64_t)"super", 6);
}

uint64_t WebCore::stateSuperscript(WebCore *this, WebCore::LocalFrame *a2, WebCore::Event *a3)
{
  return WebCore::stateStyle((uint64_t)this, 288, (uint64_t)"super", 6);
}

uint64_t WebCore::executeSwapWithMark(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  WebCore::Document *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  WebCore::Document *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v16;
  WebCore::Editor *v17;
  WebCore::Editor *v18;
  uint64_t v19;
  WebCore::Editor *v20;
  void *v21;
  WebCore::Editor *v22;
  uint64_t v23;
  void *v24;
  unsigned int *v25;
  unsigned int *v26;
  _QWORD *v27;

  v3 = *(_QWORD *)(a1 + 296);
  if (v3)
    *(_DWORD *)(v3 + 24) += 2;
  v4 = (unsigned int *)(a1 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *(WebCore::Document **)(a1 + 296);
  v7 = *((_QWORD *)v6 + 382);
  if (!v7)
  {
    v25 = (unsigned int *)(a1 + 8);
    v17 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v17, v6);
    v18 = (WebCore::Editor *)*((_QWORD *)v6 + 382);
    *((_QWORD *)v6 + 382) = v17;
    if (v18)
    {
      WebCore::Editor::~Editor(v18, a2);
      if (*(_DWORD *)v19)
      {
        *(_QWORD *)(v19 + 496) = 0;
        *(_OWORD *)(v19 + 464) = 0u;
        *(_OWORD *)(v19 + 480) = 0u;
        *(_OWORD *)(v19 + 432) = 0u;
        *(_OWORD *)(v19 + 448) = 0u;
        *(_OWORD *)(v19 + 400) = 0u;
        *(_OWORD *)(v19 + 416) = 0u;
        *(_OWORD *)(v19 + 368) = 0u;
        *(_OWORD *)(v19 + 384) = 0u;
        *(_OWORD *)(v19 + 336) = 0u;
        *(_OWORD *)(v19 + 352) = 0u;
        *(_OWORD *)(v19 + 304) = 0u;
        *(_OWORD *)(v19 + 320) = 0u;
        *(_OWORD *)(v19 + 272) = 0u;
        *(_OWORD *)(v19 + 288) = 0u;
        *(_OWORD *)(v19 + 240) = 0u;
        *(_OWORD *)(v19 + 256) = 0u;
        *(_OWORD *)(v19 + 208) = 0u;
        *(_OWORD *)(v19 + 224) = 0u;
        *(_OWORD *)(v19 + 176) = 0u;
        *(_OWORD *)(v19 + 192) = 0u;
        *(_OWORD *)(v19 + 144) = 0u;
        *(_OWORD *)(v19 + 160) = 0u;
        *(_OWORD *)(v19 + 112) = 0u;
        *(_OWORD *)(v19 + 128) = 0u;
        *(_OWORD *)(v19 + 80) = 0u;
        *(_OWORD *)(v19 + 96) = 0u;
        *(_OWORD *)(v19 + 48) = 0u;
        *(_OWORD *)(v19 + 64) = 0u;
        *(_OWORD *)(v19 + 16) = 0u;
        *(_OWORD *)(v19 + 32) = 0u;
        *(_OWORD *)v19 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v19, a2);
      }
    }
    v7 = *((_QWORD *)v6 + 382);
    v6 = *(WebCore::Document **)(a1 + 296);
    v4 = v25;
  }
  if (*(_BYTE *)(v7 + 297) && (v8 = *((_QWORD *)v6 + 383), *(_BYTE *)(v8 + 153)))
  {
    v9 = (uint64_t *)(v8 + 56);
    WebCore::FrameSelection::setSelection(v8, v7 + 200, 6u, 0, 0, 0, 0);
    v10 = *(WebCore::Document **)(a1 + 296);
    v11 = *((_QWORD *)v10 + 382);
    if (!v11)
    {
      v26 = v4;
      v20 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v20, v10);
      v22 = (WebCore::Editor *)*((_QWORD *)v10 + 382);
      *((_QWORD *)v10 + 382) = v20;
      if (v22)
      {
        WebCore::Editor::~Editor(v22, v21);
        if (*(_DWORD *)v23)
        {
          *(_QWORD *)(v23 + 496) = 0;
          *(_OWORD *)(v23 + 464) = 0u;
          *(_OWORD *)(v23 + 480) = 0u;
          *(_OWORD *)(v23 + 432) = 0u;
          *(_OWORD *)(v23 + 448) = 0u;
          *(_OWORD *)(v23 + 400) = 0u;
          *(_OWORD *)(v23 + 416) = 0u;
          *(_OWORD *)(v23 + 368) = 0u;
          *(_OWORD *)(v23 + 384) = 0u;
          *(_OWORD *)(v23 + 336) = 0u;
          *(_OWORD *)(v23 + 352) = 0u;
          *(_OWORD *)(v23 + 304) = 0u;
          *(_OWORD *)(v23 + 320) = 0u;
          *(_OWORD *)(v23 + 272) = 0u;
          *(_OWORD *)(v23 + 288) = 0u;
          *(_OWORD *)(v23 + 240) = 0u;
          *(_OWORD *)(v23 + 256) = 0u;
          *(_OWORD *)(v23 + 208) = 0u;
          *(_OWORD *)(v23 + 224) = 0u;
          *(_OWORD *)(v23 + 176) = 0u;
          *(_OWORD *)(v23 + 192) = 0u;
          *(_OWORD *)(v23 + 144) = 0u;
          *(_OWORD *)(v23 + 160) = 0u;
          *(_OWORD *)(v23 + 112) = 0u;
          *(_OWORD *)(v23 + 128) = 0u;
          *(_OWORD *)(v23 + 80) = 0u;
          *(_OWORD *)(v23 + 96) = 0u;
          *(_OWORD *)(v23 + 48) = 0u;
          *(_OWORD *)(v23 + 64) = 0u;
          *(_OWORD *)(v23 + 16) = 0u;
          *(_OWORD *)(v23 + 32) = 0u;
          *(_OWORD *)v23 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v23, v24);
        }
      }
      v11 = *((_QWORD *)v10 + 382);
      v4 = v26;
    }
    WebCore::VisibleSelection::operator=((uint64_t *)(v11 + 200), v9);
    v12 = 1;
  }
  {
    if (WebCore::SystemSoundManager::singleton(void)::systemSoundManager)
      (*(void (**)(uint64_t))(*(_QWORD *)WebCore::SystemSoundManager::singleton(void)::systemSoundManager
                                      + 16))(WebCore::SystemSoundManager::singleton(void)::systemSoundManager);
    v12 = 0;
  }
  else
  {
    v12 = 0;
    WebCore::SystemSoundManager::singleton(void)::systemSoundManager = 0;
  }
  do
  {
    v13 = __ldaxr(v4);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v4));
  if (!v14)
  {
    atomic_store(1u, v4);
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v16 = off_1E31FE290;
    v16[1] = v4;
    v27 = v16;
    WTF::ensureOnMainThread();
    if (v27)
      (*(void (**)(_QWORD *))(*v27 + 8))(v27);
  }
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return v12;
}

uint64_t WebCore::executeUnderline(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  WebCore::Document *v6;
  uint64_t v7;
  char v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD **v16;
  _DWORD *v17;
  WTF *v18;
  uint64_t v20;
  WebCore::Editor *v21;
  void *v22;
  WebCore::Editor *v23;
  uint64_t v24;
  void *v25;
  WTF *v26;

  v5 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v5 = 1;
  *(_QWORD *)(v5 + 8) = 0;
  *(_BYTE *)(v5 + 16) &= 0xE0u;
  *(_DWORD *)(v5 + 20) = WebCore::EditingStyle::NoFontDelta;
  v26 = (WTF *)v5;
  v6 = *(WebCore::Document **)(a1 + 296);
  v7 = *((_QWORD *)v6 + 382);
  if (!v7)
  {
    v21 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v21, v6);
    v23 = (WebCore::Editor *)*((_QWORD *)v6 + 382);
    *((_QWORD *)v6 + 382) = v21;
    if (v23)
    {
      WebCore::Editor::~Editor(v23, v22);
      if (*(_DWORD *)v24)
      {
        *(_QWORD *)(v24 + 496) = 0;
        *(_OWORD *)(v24 + 464) = 0u;
        *(_OWORD *)(v24 + 480) = 0u;
        *(_OWORD *)(v24 + 432) = 0u;
        *(_OWORD *)(v24 + 448) = 0u;
        *(_OWORD *)(v24 + 400) = 0u;
        *(_OWORD *)(v24 + 416) = 0u;
        *(_OWORD *)(v24 + 368) = 0u;
        *(_OWORD *)(v24 + 384) = 0u;
        *(_OWORD *)(v24 + 336) = 0u;
        *(_OWORD *)(v24 + 352) = 0u;
        *(_OWORD *)(v24 + 304) = 0u;
        *(_OWORD *)(v24 + 320) = 0u;
        *(_OWORD *)(v24 + 272) = 0u;
        *(_OWORD *)(v24 + 288) = 0u;
        *(_OWORD *)(v24 + 240) = 0u;
        *(_OWORD *)(v24 + 256) = 0u;
        *(_OWORD *)(v24 + 208) = 0u;
        *(_OWORD *)(v24 + 224) = 0u;
        *(_OWORD *)(v24 + 176) = 0u;
        *(_OWORD *)(v24 + 192) = 0u;
        *(_OWORD *)(v24 + 144) = 0u;
        *(_OWORD *)(v24 + 160) = 0u;
        *(_OWORD *)(v24 + 112) = 0u;
        *(_OWORD *)(v24 + 128) = 0u;
        *(_OWORD *)(v24 + 80) = 0u;
        *(_OWORD *)(v24 + 96) = 0u;
        *(_OWORD *)(v24 + 48) = 0u;
        *(_OWORD *)(v24 + 64) = 0u;
        *(_OWORD *)(v24 + 16) = 0u;
        *(_OWORD *)(v24 + 32) = 0u;
        *(_OWORD *)v24 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v24, v25);
      }
    }
    v7 = *((_QWORD *)v6 + 382);
  }
  if (WebCore::isStylePresent(v7, 341, (uint64_t)"underline", 10))
    v8 = 4;
  else
    v8 = 2;
  *(_BYTE *)(v5 + 16) = *(_BYTE *)(v5 + 16) & 0xF9 | v8;
  v10 = WebCore::applyCommandToFrame(*(WebCore::Document **)(a1 + 296), a3, 0x38u, &v26);
  v11 = v26;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
    {
      v13 = *((_QWORD *)v26 + 1);
      *((_QWORD *)v26 + 1) = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 1)
        {
          v14 = *(unsigned int *)(v13 + 28);
          if ((_DWORD)v14)
          {
            v15 = 16 * v14;
            v16 = (_DWORD **)(*(_QWORD *)(v13 + 16) + 8);
            do
            {
              v17 = *v16;
              *v16 = 0;
              if (v17)
              {
                if (*v17 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, v9);
                else
                  *v17 -= 2;
              }
              v16 += 2;
              v15 -= 16;
            }
            while (v15);
          }
          v18 = *(WTF **)(v13 + 16);
          if ((WTF *)(v13 + 32) != v18 && v18 != 0)
          {
            *(_QWORD *)(v13 + 16) = 0;
            *(_DWORD *)(v13 + 24) = 0;
            WTF::fastFree(v18, v9);
          }
          v20 = *(_QWORD *)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          if (v20)
            (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          WTF::fastFree((WTF *)v13, v9);
        }
        else
        {
          --*(_DWORD *)v13;
        }
      }
      WTF::fastFree(v11, v9);
    }
    else
    {
      --*(_DWORD *)v26;
    }
  }
  return v10;
}

uint64_t WebCore::stateUnderline(WebCore *this, WebCore::LocalFrame *a2, WebCore::Event *a3)
{
  return WebCore::stateStyle((uint64_t)this, 341, (uint64_t)"underline", 10);
}

uint64_t WebCore::executeTranspose(uint64_t a1)
{
  WebCore::Document *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const WebCore::VisiblePosition *v12;
  WebCore::Node *v13;
  uint64_t (*v14)();
  void *v15;
  _BOOL4 v16;
  WebCore::Node *v17;
  WebCore::Node *v18;
  void *v19;
  WebCore::Node *v20;
  void *v21;
  void *v22;
  WebCore::Node *v23;
  WebCore::Node *v24;
  WebCore::Node *v25;
  uint64_t v26;
  void *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  unsigned __int8 *v30;
  unsigned int v31;
  int v32;
  uint64_t result;
  WebCore::Node *v34;
  uint64_t v35;
  WebCore::Document *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int shouldInsertText;
  WebCore::Node *v41;
  WebCore::Node *v42;
  WTF::StringImpl *v43;
  WebCore::Node *v44;
  WebCore::Node *v45;
  WebCore::Node *v46;
  WebCore::Node *v47;
  uint64_t v48;
  void *v49;
  WebCore::Editor *v50;
  void *v51;
  WebCore::Editor *v52;
  uint64_t v53;
  void *v54;
  WebCore::Editor *v55;
  void *v56;
  WebCore::Editor *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  WebCore::Node *v61[2];
  WebCore::Node *v62;
  char v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WebCore::Node *v66;
  int v67;
  char v68;
  char v69;
  unsigned __int8 v70;
  WebCore::Node *v71[2];
  WebCore::Node *v72;
  char v73;
  WebCore::Node *v74;
  uint64_t v75;
  uint64_t v76;
  WebCore::Node *v77;
  int v78;
  char v79;
  char v80;
  WebCore::Node *v81;
  int v82;
  char v83;
  char v84;
  uint64_t v85;
  int v86;
  char v87;
  uint64_t v88;
  int v89;
  char v90;
  uint64_t v91;
  int v92;
  char v93;
  uint64_t v94;
  int v95;
  char v96;
  uint64_t v97;
  int v98;
  char v99;
  uint64_t v100;
  int v101;
  char v102;
  __int16 v103;
  char v104;

  v1 = *(WebCore::Document **)(a1 + 296);
  v2 = *((_QWORD *)v1 + 382);
  if (!v2)
  {
    v50 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v50, v1);
    v52 = (WebCore::Editor *)*((_QWORD *)v1 + 382);
    *((_QWORD *)v1 + 382) = v50;
    if (v52)
    {
      WebCore::Editor::~Editor(v52, v51);
      if (*(_DWORD *)v53)
      {
        *(_QWORD *)(v53 + 496) = 0;
        *(_OWORD *)(v53 + 464) = 0u;
        *(_OWORD *)(v53 + 480) = 0u;
        *(_OWORD *)(v53 + 432) = 0u;
        *(_OWORD *)(v53 + 448) = 0u;
        *(_OWORD *)(v53 + 400) = 0u;
        *(_OWORD *)(v53 + 416) = 0u;
        *(_OWORD *)(v53 + 368) = 0u;
        *(_OWORD *)(v53 + 384) = 0u;
        *(_OWORD *)(v53 + 336) = 0u;
        *(_OWORD *)(v53 + 352) = 0u;
        *(_OWORD *)(v53 + 304) = 0u;
        *(_OWORD *)(v53 + 320) = 0u;
        *(_OWORD *)(v53 + 272) = 0u;
        *(_OWORD *)(v53 + 288) = 0u;
        *(_OWORD *)(v53 + 240) = 0u;
        *(_OWORD *)(v53 + 256) = 0u;
        *(_OWORD *)(v53 + 208) = 0u;
        *(_OWORD *)(v53 + 224) = 0u;
        *(_OWORD *)(v53 + 176) = 0u;
        *(_OWORD *)(v53 + 192) = 0u;
        *(_OWORD *)(v53 + 144) = 0u;
        *(_OWORD *)(v53 + 160) = 0u;
        *(_OWORD *)(v53 + 112) = 0u;
        *(_OWORD *)(v53 + 128) = 0u;
        *(_OWORD *)(v53 + 80) = 0u;
        *(_OWORD *)(v53 + 96) = 0u;
        *(_OWORD *)(v53 + 48) = 0u;
        *(_OWORD *)(v53 + 64) = 0u;
        *(_OWORD *)(v53 + 16) = 0u;
        *(_OWORD *)(v53 + 32) = 0u;
        *(_OWORD *)v53 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v53, v54);
      }
    }
    v2 = *((_QWORD *)v1 + 382);
  }
  if (!WebCore::editableRootForPosition(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 8) + 3064) + 120, 0))
    return 1;
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8);
  *(_DWORD *)(v3 + 24) += 2;
  v4 = *(_QWORD *)(v3 + 3064);
  v5 = *(_QWORD *)(v4 + 56);
  if (v5)
    *(_DWORD *)(v5 + 24) += 2;
  v85 = v5;
  v86 = *(_DWORD *)(v4 + 64);
  v87 = *(_BYTE *)(v4 + 68);
  v6 = *(_QWORD *)(v4 + 72);
  if (v6)
    *(_DWORD *)(v6 + 24) += 2;
  v88 = v6;
  v89 = *(_DWORD *)(v4 + 80);
  v90 = *(_BYTE *)(v4 + 84);
  v7 = *(_QWORD *)(v4 + 88);
  if (v7)
    *(_DWORD *)(v7 + 24) += 2;
  v91 = v7;
  v92 = *(_DWORD *)(v4 + 96);
  v93 = *(_BYTE *)(v4 + 100);
  v8 = *(_QWORD *)(v4 + 104);
  if (v8)
    *(_DWORD *)(v8 + 24) += 2;
  v94 = v8;
  v95 = *(_DWORD *)(v4 + 112);
  v96 = *(_BYTE *)(v4 + 116);
  v9 = *(_QWORD *)(v4 + 120);
  if (v9)
    *(_DWORD *)(v9 + 24) += 2;
  v97 = v9;
  v98 = *(_DWORD *)(v4 + 128);
  v99 = *(_BYTE *)(v4 + 132);
  v10 = *(_QWORD *)(v4 + 136);
  if (v10)
    *(_DWORD *)(v10 + 24) += 2;
  v100 = v10;
  v101 = *(_DWORD *)(v4 + 144);
  v102 = *(_BYTE *)(v4 + 148);
  v103 = *(_WORD *)(v4 + 152);
  v104 = *(_BYTE *)(v4 + 154);
  if (HIBYTE(v103) == 1)
  {
    v11 = v103;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v97, (uint64_t)&v81);
    v84 = 1;
    v13 = v81;
    if (v11 || !v81)
      goto LABEL_17;
    *((_DWORD *)v81 + 6) += 2;
    v66 = v13;
    v67 = v82;
    v68 = v83;
    v69 = 0;
    if (!WebCore::inSameLine((WebCore *)&v81, (const WebCore::VisiblePosition *)&v66, v12))
      v84 = 0;
    v26 = (uint64_t)v66;
    v66 = 0;
    if (v26)
    {
      if (*(_DWORD *)(v26 + 24) == 2)
        goto LABEL_139;
      *(_DWORD *)(v26 + 24) -= 2;
    }
    while (1)
    {
      v13 = v81;
LABEL_17:
      if (v13)
        v14 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
      else
        v14 = 0;
      if (!v14)
        goto LABEL_28;
      WebCore::endOfParagraph((WebCore::Node *)&v81, 1, &v66);
      v16 = WebCore::operator==((uint64_t *)&v81, (uint64_t *)&v66);
      v17 = v66;
      v66 = 0;
      if (v17)
      {
        if (*((_DWORD *)v17 + 6) == 2)
        {
          if ((*((_WORD *)v17 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v17, v15);
        }
        else
        {
          *((_DWORD *)v17 + 6) -= 2;
        }
      }
      if (v16)
      {
        v18 = v81;
        if (v81)
          *((_DWORD *)v81 + 6) += 2;
        v77 = v18;
        v78 = v82;
        v79 = v83;
        v80 = v84;
      }
      else
      {
LABEL_28:
        WebCore::VisiblePosition::next((unsigned __int8 *)&v81, 0, 0, (uint64_t)&v77);
      }
      WebCore::previousVisuallyDistinctCandidate(&v77, (uint64_t)v71);
      if (WebCore::Position::atStartOfTree((WebCore::Position *)v71))
      {
        v74 = 0;
        v75 = 0;
        v76 = 0;
      }
      else
      {
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v71, (uint64_t)&v66);
        v74 = v66;
        LODWORD(v75) = v67;
        BYTE4(v75) = v68;
      }
      LOBYTE(v76) = 1;
      v20 = v71[0];
      v71[0] = 0;
      if (v20)
      {
        if (*((_DWORD *)v20 + 6) == 2)
        {
          if ((*((_WORD *)v20 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v20, v19);
        }
        else
        {
          *((_DWORD *)v20 + 6) -= 2;
        }
      }
      if (WebCore::operator==((uint64_t *)&v77, (uint64_t *)&v74))
        goto LABEL_88;
      WebCore::previousVisuallyDistinctCandidate(&v74, (uint64_t)v71);
      if (WebCore::Position::atStartOfTree((WebCore::Position *)v71))
      {
        v23 = 0;
        BYTE4(v61[0]) = 0;
        LODWORD(v61[0]) = 0;
      }
      else
      {
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v71, (uint64_t)&v66);
        v23 = v66;
        LODWORD(v61[0]) = v67;
        BYTE4(v61[0]) = v68;
      }
      v24 = v71[0];
      v71[0] = 0;
      if (v24)
      {
        if (*((_DWORD *)v24 + 6) == 2)
        {
          if ((*((_WORD *)v24 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v24, v22);
        }
        else
        {
          *((_DWORD *)v24 + 6) -= 2;
        }
      }
      v25 = v74;
      v74 = v23;
      if (v25)
      {
        if (*((_DWORD *)v25 + 6) == 2)
        {
          if ((*((_WORD *)v25 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v25, v22);
        }
        else
        {
          *((_DWORD *)v25 + 6) -= 2;
        }
      }
      LODWORD(v75) = v61[0];
      BYTE4(v75) = BYTE4(v61[0]);
      LOBYTE(v76) = 1;
      if (!WebCore::inSameParagraph(&v77, (uint64_t)&v74, 1))
        goto LABEL_88;
      WebCore::makeSimpleRange<WebCore::VisiblePosition,WebCore::VisiblePosition>((uint64_t *)&v74, (uint64_t)&v77, (uint64_t)v71);
      if (!v73)
        goto LABEL_88;
      v26 = WebCore::VisibleSelection::VisibleSelection((uint64_t)&v66, (uint64_t)v71, 1, 0);
      if (v73)
        break;
      __break(1u);
LABEL_139:
      if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v26, v27);
    }
    WebCore::plainText(v71, 0, 0, (const WTF::String *)&v65);
    v29 = v65;
    if (!v65)
      goto LABEL_81;
    if (*((_DWORD *)v65 + 1) != 2)
    {
      v65 = 0;
      goto LABEL_79;
    }
    v30 = (unsigned __int8 *)*((_QWORD *)v65 + 1);
    if ((*((_BYTE *)v65 + 16) & 4) != 0)
    {
      v31 = v30[1];
      v32 = *v30;
    }
    else
    {
      v31 = *((unsigned __int16 *)v30 + 1);
      v32 = *(unsigned __int16 *)v30;
    }
    if ((v32 | v31) > 0xFF)
    {
      result = WTF::tryFastCompactMalloc((WTF *)0x18);
      v34 = v61[0];
      if (v61[0])
      {
        *(_QWORD *)v61[0] = 0x200000002;
        *((_WORD *)v34 + 10) = v31;
        *((_QWORD *)v34 + 1) = (char *)v34 + 20;
        *((_DWORD *)v34 + 4) = 0;
        *((_WORD *)v34 + 11) = v32;
LABEL_58:
        v64 = v34;
        if ((WebCore::operator==((uint64_t)&v66, *(_QWORD *)(v3 + 3064) + 56) & 1) == 0)
        {
          v35 = *(_QWORD *)(v3 + 3064);
          v36 = *(WebCore::Document **)(*(_QWORD *)(v35 + 32) + 8);
          v37 = *((_QWORD *)v36 + 66);
          if (!v37 || (v38 = *(_QWORD *)(v37 + 8)) == 0 || !*(_BYTE *)(v38 + 376))
          {
            v39 = *((_QWORD *)v36 + 382);
            if (!v39)
            {
              v60 = *(_QWORD *)(v3 + 3064);
              v55 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
              WebCore::Editor::Editor(v55, v36);
              v57 = (WebCore::Editor *)*((_QWORD *)v36 + 382);
              *((_QWORD *)v36 + 382) = v55;
              if (v57)
              {
                WebCore::Editor::~Editor(v57, v56);
                if (*(_DWORD *)v58)
                {
                  *(_QWORD *)(v58 + 496) = 0;
                  *(_OWORD *)(v58 + 464) = 0u;
                  *(_OWORD *)(v58 + 480) = 0u;
                  *(_OWORD *)(v58 + 432) = 0u;
                  *(_OWORD *)(v58 + 448) = 0u;
                  *(_OWORD *)(v58 + 400) = 0u;
                  *(_OWORD *)(v58 + 416) = 0u;
                  *(_OWORD *)(v58 + 368) = 0u;
                  *(_OWORD *)(v58 + 384) = 0u;
                  *(_OWORD *)(v58 + 336) = 0u;
                  *(_OWORD *)(v58 + 352) = 0u;
                  *(_OWORD *)(v58 + 304) = 0u;
                  *(_OWORD *)(v58 + 320) = 0u;
                  *(_OWORD *)(v58 + 272) = 0u;
                  *(_OWORD *)(v58 + 288) = 0u;
                  *(_OWORD *)(v58 + 240) = 0u;
                  *(_OWORD *)(v58 + 256) = 0u;
                  *(_OWORD *)(v58 + 208) = 0u;
                  *(_OWORD *)(v58 + 224) = 0u;
                  *(_OWORD *)(v58 + 176) = 0u;
                  *(_OWORD *)(v58 + 192) = 0u;
                  *(_OWORD *)(v58 + 144) = 0u;
                  *(_OWORD *)(v58 + 160) = 0u;
                  *(_OWORD *)(v58 + 112) = 0u;
                  *(_OWORD *)(v58 + 128) = 0u;
                  *(_OWORD *)(v58 + 80) = 0u;
                  *(_OWORD *)(v58 + 96) = 0u;
                  *(_OWORD *)(v58 + 48) = 0u;
                  *(_OWORD *)(v58 + 64) = 0u;
                  *(_OWORD *)(v58 + 16) = 0u;
                  *(_OWORD *)(v58 + 32) = 0u;
                  *(_OWORD *)v58 = 0u;
                }
                else
                {
                  WTF::fastFree((WTF *)v58, v59);
                }
              }
              v35 = v60;
              v39 = *((_QWORD *)v36 + 382);
            }
            if (!WebCore::Editor::shouldChangeSelection(v39, (WebCore::VisibleSelection *)(v35 + 56), (WebCore::VisibleSelection *)&v66, v70, 0))
            {
LABEL_75:
              v43 = v64;
              v64 = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, v28);
                else
                  *(_DWORD *)v43 -= 2;
              }
              v29 = v65;
              v65 = 0;
              if (!v29)
              {
LABEL_81:
                WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v66);
                if (v73)
                {
                  v44 = v72;
                  v72 = 0;
                  if (v44)
                  {
                    if (*((_DWORD *)v44 + 6) == 2)
                    {
                      if ((*((_WORD *)v44 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v44, v21);
                    }
                    else
                    {
                      *((_DWORD *)v44 + 6) -= 2;
                    }
                  }
                  v45 = v71[0];
                  v71[0] = 0;
                  if (v45)
                  {
                    if (*((_DWORD *)v45 + 6) == 2)
                    {
                      if ((*((_WORD *)v45 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v45, v21);
                    }
                    else
                    {
                      *((_DWORD *)v45 + 6) -= 2;
                    }
                  }
                }
LABEL_88:
                v46 = v74;
                v74 = 0;
                if (v46)
                {
                  if (*((_DWORD *)v46 + 6) == 2)
                  {
                    if ((*((_WORD *)v46 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v46, v21);
                  }
                  else
                  {
                    *((_DWORD *)v46 + 6) -= 2;
                  }
                }
                v47 = v77;
                v77 = 0;
                if (v47)
                {
                  if (*((_DWORD *)v47 + 6) == 2)
                  {
                    if ((*((_WORD *)v47 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v47, v21);
                  }
                  else
                  {
                    *((_DWORD *)v47 + 6) -= 2;
                  }
                }
                v48 = (uint64_t)v81;
                v81 = 0;
                if (v48)
                {
                  if (*(_DWORD *)(v48 + 24) == 2)
                  {
                    if ((*(_WORD *)(v48 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v48, v21);
                  }
                  else
                  {
                    *(_DWORD *)(v48 + 24) -= 2;
                  }
                }
                goto LABEL_97;
              }
LABEL_79:
              if (*(_DWORD *)v29 == 2)
                WTF::StringImpl::destroy(v29, v28);
              else
                *(_DWORD *)v29 -= 2;
              goto LABEL_81;
            }
            v35 = *(_QWORD *)(v3 + 3064);
          }
          WebCore::FrameSelection::setSelection(v35, (uint64_t)&v66, 6u, 0, 0, 0, 0);
        }
        WebCore::VisibleSelection::firstRange((WebCore::Node *)&v66, v61);
        shouldInsertText = WebCore::Editor::shouldInsertText(v2, (uint64_t)&v64, (uint64_t)v61, 0);
        if (v63)
        {
          v41 = v62;
          v62 = 0;
          if (v41)
          {
            if (*((_DWORD *)v41 + 6) == 2)
            {
              if ((*((_WORD *)v41 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v41, v28);
            }
            else
            {
              *((_DWORD *)v41 + 6) -= 2;
            }
          }
          v42 = v61[0];
          v61[0] = 0;
          if (v42)
          {
            if (*((_DWORD *)v42 + 6) == 2)
            {
              if ((*((_WORD *)v42 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v42, v28);
            }
            else
            {
              *((_DWORD *)v42 + 6) -= 2;
            }
          }
        }
        if (shouldInsertText)
          WebCore::Editor::replaceSelectionWithText(v2, (const WebCore::SimpleRange *)&v64, 0, 0, 0xEu);
        goto LABEL_75;
      }
    }
    else
    {
      result = WTF::tryFastCompactMalloc((WTF *)0x16);
      v34 = v61[0];
      if (v61[0])
      {
        *(_QWORD *)v61[0] = 0x200000002;
        *((_BYTE *)v34 + 20) = v31;
        *((_QWORD *)v34 + 1) = (char *)v34 + 20;
        *((_DWORD *)v34 + 4) = 4;
        *((_BYTE *)v34 + 21) = v32;
        goto LABEL_58;
      }
    }
    __break(0xC471u);
    return result;
  }
LABEL_97:
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v85);
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, v49);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return 1;
}

BOOL WebCore::enableCaretInEditableText(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  void *v7;
  _BOOL8 v8;
  WebCore::Editor *v9;
  void *v10;
  WebCore::Editor *v11;
  uint64_t v12;
  void *v13;
  _BYTE v16[64];
  uint64_t v17;
  char v18;
  char v19;

  v2 = a2;
  v3 = *(WebCore::Document **)(a1 + 296);
  v4 = *((_QWORD *)v3 + 382);
  if (!v4)
  {
    v9 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v9, v3);
    v11 = (WebCore::Editor *)*((_QWORD *)v3 + 382);
    *((_QWORD *)v3 + 382) = v9;
    if (v11)
    {
      WebCore::Editor::~Editor(v11, v10);
      if (*(_DWORD *)v12)
      {
        *(_QWORD *)(v12 + 496) = 0;
        *(_OWORD *)(v12 + 464) = 0u;
        *(_OWORD *)(v12 + 480) = 0u;
        *(_OWORD *)(v12 + 432) = 0u;
        *(_OWORD *)(v12 + 448) = 0u;
        *(_OWORD *)(v12 + 400) = 0u;
        *(_OWORD *)(v12 + 416) = 0u;
        *(_OWORD *)(v12 + 368) = 0u;
        *(_OWORD *)(v12 + 384) = 0u;
        *(_OWORD *)(v12 + 336) = 0u;
        *(_OWORD *)(v12 + 352) = 0u;
        *(_OWORD *)(v12 + 304) = 0u;
        *(_OWORD *)(v12 + 320) = 0u;
        *(_OWORD *)(v12 + 272) = 0u;
        *(_OWORD *)(v12 + 288) = 0u;
        *(_OWORD *)(v12 + 240) = 0u;
        *(_OWORD *)(v12 + 256) = 0u;
        *(_OWORD *)(v12 + 208) = 0u;
        *(_OWORD *)(v12 + 224) = 0u;
        *(_OWORD *)(v12 + 176) = 0u;
        *(_OWORD *)(v12 + 192) = 0u;
        *(_OWORD *)(v12 + 144) = 0u;
        *(_OWORD *)(v12 + 160) = 0u;
        *(_OWORD *)(v12 + 112) = 0u;
        *(_OWORD *)(v12 + 128) = 0u;
        *(_OWORD *)(v12 + 80) = 0u;
        *(_OWORD *)(v12 + 96) = 0u;
        *(_OWORD *)(v12 + 48) = 0u;
        *(_OWORD *)(v12 + 64) = 0u;
        *(_OWORD *)(v12 + 16) = 0u;
        *(_OWORD *)(v12 + 32) = 0u;
        *(_OWORD *)v12 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v12, v13);
      }
    }
    v4 = *((_QWORD *)v3 + 382);
    v2 = a2;
  }
  WebCore::Editor::selectionForCommand((WebCore::Editor *)v16, *(WebCore::Event **)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 8) + 3064), v2);
  if (v19 == 1
    && (v5 = v17) != 0
    && (v6 = v18 & 7, v6 <= 4)
    && (((1 << v6) & 0x19) != 0 || (v5 = *(_QWORD *)(v17 + 32)) != 0))
  {
    *(_DWORD *)(v5 + 24) += 2;
    v8 = WebCore::Node::computeEditability(v5, 0, 0) != 0;
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v7);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  else
  {
    v8 = 0;
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v16);
  return v8;
}

uint64_t WebCore::executeUndo(uint64_t a1)
{
  WebCore::Document *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::Editor *v6;
  void *v7;
  WebCore::Editor *v8;
  uint64_t v9;
  void *v10;

  v1 = *(WebCore::Document **)(a1 + 296);
  v2 = *((_QWORD *)v1 + 382);
  if (!v2)
  {
    v6 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v6, v1);
    v8 = (WebCore::Editor *)*((_QWORD *)v1 + 382);
    *((_QWORD *)v1 + 382) = v6;
    if (v8)
    {
      WebCore::Editor::~Editor(v8, v7);
      if (*(_DWORD *)v9)
      {
        *(_QWORD *)(v9 + 496) = 0;
        *(_OWORD *)(v9 + 464) = 0u;
        *(_OWORD *)(v9 + 480) = 0u;
        *(_OWORD *)(v9 + 432) = 0u;
        *(_OWORD *)(v9 + 448) = 0u;
        *(_OWORD *)(v9 + 400) = 0u;
        *(_OWORD *)(v9 + 416) = 0u;
        *(_OWORD *)(v9 + 368) = 0u;
        *(_OWORD *)(v9 + 384) = 0u;
        *(_OWORD *)(v9 + 336) = 0u;
        *(_OWORD *)(v9 + 352) = 0u;
        *(_OWORD *)(v9 + 304) = 0u;
        *(_OWORD *)(v9 + 320) = 0u;
        *(_OWORD *)(v9 + 272) = 0u;
        *(_OWORD *)(v9 + 288) = 0u;
        *(_OWORD *)(v9 + 240) = 0u;
        *(_OWORD *)(v9 + 256) = 0u;
        *(_OWORD *)(v9 + 208) = 0u;
        *(_OWORD *)(v9 + 224) = 0u;
        *(_OWORD *)(v9 + 176) = 0u;
        *(_OWORD *)(v9 + 192) = 0u;
        *(_OWORD *)(v9 + 144) = 0u;
        *(_OWORD *)(v9 + 160) = 0u;
        *(_OWORD *)(v9 + 112) = 0u;
        *(_OWORD *)(v9 + 128) = 0u;
        *(_OWORD *)(v9 + 80) = 0u;
        *(_OWORD *)(v9 + 96) = 0u;
        *(_OWORD *)(v9 + 48) = 0u;
        *(_OWORD *)(v9 + 64) = 0u;
        *(_OWORD *)(v9 + 16) = 0u;
        *(_OWORD *)(v9 + 32) = 0u;
        *(_OWORD *)v9 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v9, v10);
      }
    }
    v2 = *((_QWORD *)v1 + 382);
  }
  v3 = *(_QWORD *)(v2 + 8);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 416))(v4);
  }
  return 1;
}

uint64_t WebCore::enabledUndo(uint64_t a1)
{
  WebCore::Document *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::Editor *v6;
  void *v7;
  WebCore::Editor *v8;
  uint64_t v9;
  void *v10;

  v1 = *(WebCore::Document **)(a1 + 296);
  v2 = *((_QWORD *)v1 + 382);
  if (!v2)
  {
    v6 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v6, v1);
    v8 = (WebCore::Editor *)*((_QWORD *)v1 + 382);
    *((_QWORD *)v1 + 382) = v6;
    if (v8)
    {
      WebCore::Editor::~Editor(v8, v7);
      if (*(_DWORD *)v9)
      {
        *(_QWORD *)(v9 + 496) = 0;
        *(_OWORD *)(v9 + 464) = 0u;
        *(_OWORD *)(v9 + 480) = 0u;
        *(_OWORD *)(v9 + 432) = 0u;
        *(_OWORD *)(v9 + 448) = 0u;
        *(_OWORD *)(v9 + 400) = 0u;
        *(_OWORD *)(v9 + 416) = 0u;
        *(_OWORD *)(v9 + 368) = 0u;
        *(_OWORD *)(v9 + 384) = 0u;
        *(_OWORD *)(v9 + 336) = 0u;
        *(_OWORD *)(v9 + 352) = 0u;
        *(_OWORD *)(v9 + 304) = 0u;
        *(_OWORD *)(v9 + 320) = 0u;
        *(_OWORD *)(v9 + 272) = 0u;
        *(_OWORD *)(v9 + 288) = 0u;
        *(_OWORD *)(v9 + 240) = 0u;
        *(_OWORD *)(v9 + 256) = 0u;
        *(_OWORD *)(v9 + 208) = 0u;
        *(_OWORD *)(v9 + 224) = 0u;
        *(_OWORD *)(v9 + 176) = 0u;
        *(_OWORD *)(v9 + 192) = 0u;
        *(_OWORD *)(v9 + 144) = 0u;
        *(_OWORD *)(v9 + 160) = 0u;
        *(_OWORD *)(v9 + 112) = 0u;
        *(_OWORD *)(v9 + 128) = 0u;
        *(_OWORD *)(v9 + 80) = 0u;
        *(_OWORD *)(v9 + 96) = 0u;
        *(_OWORD *)(v9 + 48) = 0u;
        *(_OWORD *)(v9 + 64) = 0u;
        *(_OWORD *)(v9 + 16) = 0u;
        *(_OWORD *)(v9 + 32) = 0u;
        *(_OWORD *)v9 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v9, v10);
      }
    }
    v2 = *((_QWORD *)v1 + 382);
  }
  v3 = *(_QWORD *)(v2 + 8);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 400))(v4);
  else
    return 0;
}

uint64_t WebCore::executeUnlink(uint64_t a1)
{
  WebCore::Node *v1;
  _DWORD *v2;
  uint64_t v3;
  void *v4;
  WebCore::Node *v5;
  WebCore::Node *v7;

  v1 = *(WebCore::Node **)(a1 + 296);
  *((_DWORD *)v1 + 6) += 2;
  v7 = v1;
  v2 = (_DWORD *)WTF::fastMalloc((WTF *)0x118);
  v3 = WebCore::EditCommand::EditCommand((uint64_t)v2, (uint64_t *)&v7, 59);
  *(_OWORD *)(v3 + 248) = 0u;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)v3 = off_1E33AE0F0;
  WebCore::CompositeEditCommand::apply((WebCore::CompositeEditCommand *)v3);
  if (v2[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  else
    --v2[2];
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 6) == 2)
    {
      if ((*((_WORD *)v5 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v5, v4);
    }
    else
    {
      *((_DWORD *)v5 + 6) -= 2;
    }
  }
  return 1;
}

BOOL WebCore::enabledRangeInRichlyEditableText(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  void *v4;
  _BOOL8 v5;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064);
  if (*(_BYTE *)(v1 + 153) != 2)
    return 0;
  v2 = *(_QWORD *)(v1 + 120);
  if (!v2)
    return 0;
  v3 = *(_BYTE *)(v1 + 132) & 7;
  if (v3 > 4)
    return 0;
  if (((1 << v3) & 0x19) == 0)
  {
    v2 = *(_QWORD *)(v2 + 32);
    if (!v2)
      return 0;
  }
  *(_DWORD *)(v2 + 24) += 2;
  v5 = WebCore::Node::computeEditability(v2, 0, 1) == 2;
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v4);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return v5;
}

uint64_t WebCore::executeUnscript(uint64_t a1, uint64_t a2, int a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = WebCore::executeApplyStyle(a1, a3, 0x3Au, 288, (uint64_t)&v9);
  v7 = v9;
  v9 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  return v6;
}

uint64_t WebCore::executeUnselect(uint64_t a1)
{
  WebCore::FrameSelection::clear(*(WebCore::FrameSelection **)(*(_QWORD *)(a1 + 296) + 3064));
  return 1;
}

uint64_t WebCore::executeUseCSS(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  WebCore::Document *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v9;
  int v10;
  WebCore::Editor *v11;
  void *v12;
  WebCore::Editor *v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;

  v4 = *(WebCore::Document **)(a1 + 296);
  v5 = *((_QWORD *)v4 + 382);
  if (!v5)
  {
    v16 = a4;
    v11 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v11, v4);
    v13 = (WebCore::Editor *)*((_QWORD *)v4 + 382);
    *((_QWORD *)v4 + 382) = v11;
    if (v13)
    {
      WebCore::Editor::~Editor(v13, v12);
      if (*(_DWORD *)v14)
      {
        *(_QWORD *)(v14 + 496) = 0;
        *(_OWORD *)(v14 + 464) = 0u;
        *(_OWORD *)(v14 + 480) = 0u;
        *(_OWORD *)(v14 + 432) = 0u;
        *(_OWORD *)(v14 + 448) = 0u;
        *(_OWORD *)(v14 + 400) = 0u;
        *(_OWORD *)(v14 + 416) = 0u;
        *(_OWORD *)(v14 + 368) = 0u;
        *(_OWORD *)(v14 + 384) = 0u;
        *(_OWORD *)(v14 + 336) = 0u;
        *(_OWORD *)(v14 + 352) = 0u;
        *(_OWORD *)(v14 + 304) = 0u;
        *(_OWORD *)(v14 + 320) = 0u;
        *(_OWORD *)(v14 + 272) = 0u;
        *(_OWORD *)(v14 + 288) = 0u;
        *(_OWORD *)(v14 + 240) = 0u;
        *(_OWORD *)(v14 + 256) = 0u;
        *(_OWORD *)(v14 + 208) = 0u;
        *(_OWORD *)(v14 + 224) = 0u;
        *(_OWORD *)(v14 + 176) = 0u;
        *(_OWORD *)(v14 + 192) = 0u;
        *(_OWORD *)(v14 + 144) = 0u;
        *(_OWORD *)(v14 + 160) = 0u;
        *(_OWORD *)(v14 + 112) = 0u;
        *(_OWORD *)(v14 + 128) = 0u;
        *(_OWORD *)(v14 + 80) = 0u;
        *(_OWORD *)(v14 + 96) = 0u;
        *(_OWORD *)(v14 + 48) = 0u;
        *(_OWORD *)(v14 + 64) = 0u;
        *(_OWORD *)(v14 + 16) = 0u;
        *(_OWORD *)(v14 + 32) = 0u;
        *(_OWORD *)v14 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v14, v15);
      }
    }
    v5 = *((_QWORD *)v4 + 382);
    a4 = v16;
  }
  v6 = *a4;
  if (*a4 && *(_DWORD *)(v6 + 4) == 5)
  {
    v9 = *(_QWORD *)(v6 + 8);
    if ((*(_BYTE *)(v6 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v9 & 0xDF) == 0x46
        && (*(_BYTE *)(v9 + 1) & 0xDF) == 0x41
        && (*(_BYTE *)(v9 + 2) & 0xDF) == 0x4C
        && (*(_BYTE *)(v9 + 3) & 0xDF) == 0x53)
      {
        v10 = *(unsigned __int8 *)(v9 + 4);
LABEL_12:
        v7 = (v10 & 0xFFFFFFDF) == 69;
        goto LABEL_4;
      }
    }
    else if ((*(_WORD *)v9 & 0xFFDF) == 0x46
           && (*(_WORD *)(v9 + 2) & 0xFFDF) == 0x41
           && (*(_WORD *)(v9 + 4) & 0xFFDF) == 0x4C
           && (*(_WORD *)(v9 + 6) & 0xFFDF) == 0x53)
    {
      v10 = *(unsigned __int16 *)(v9 + 8);
      goto LABEL_12;
    }
  }
  v7 = 0;
LABEL_4:
  *(_BYTE *)(v5 + 90) = v7;
  return 1;
}

uint64_t WebCore::executeYank(uint64_t a1)
{
  WebCore::Document *v2;
  WebCore::Editor *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WebCore::Document *v6;
  WebCore::Editor *v8;
  void *v9;
  WebCore::Editor *v10;
  uint64_t v11;
  void *v12;
  WebCore::Document *v13;
  WebCore::Editor *v14;
  void *v15;
  WebCore::Editor *v16;
  uint64_t v17;
  void *v18;
  WebCore::Editor *v19;
  void *v20;
  WebCore::Editor *v21;
  uint64_t v22;
  void *v23;
  WebCore::Editor *v24;
  WTF::StringImpl *v25;

  v2 = *(WebCore::Document **)(a1 + 296);
  v3 = (WebCore::Editor *)*((_QWORD *)v2 + 382);
  if (!v3)
  {
    v8 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v8, v2);
    v10 = (WebCore::Editor *)*((_QWORD *)v2 + 382);
    *((_QWORD *)v2 + 382) = v8;
    if (v10)
    {
      WebCore::Editor::~Editor(v10, v9);
      if (*(_DWORD *)v11)
      {
        *(_QWORD *)(v11 + 496) = 0;
        *(_OWORD *)(v11 + 464) = 0u;
        *(_OWORD *)(v11 + 480) = 0u;
        *(_OWORD *)(v11 + 432) = 0u;
        *(_OWORD *)(v11 + 448) = 0u;
        *(_OWORD *)(v11 + 400) = 0u;
        *(_OWORD *)(v11 + 416) = 0u;
        *(_OWORD *)(v11 + 368) = 0u;
        *(_OWORD *)(v11 + 384) = 0u;
        *(_OWORD *)(v11 + 336) = 0u;
        *(_OWORD *)(v11 + 352) = 0u;
        *(_OWORD *)(v11 + 304) = 0u;
        *(_OWORD *)(v11 + 320) = 0u;
        *(_OWORD *)(v11 + 272) = 0u;
        *(_OWORD *)(v11 + 288) = 0u;
        *(_OWORD *)(v11 + 240) = 0u;
        *(_OWORD *)(v11 + 256) = 0u;
        *(_OWORD *)(v11 + 208) = 0u;
        *(_OWORD *)(v11 + 224) = 0u;
        *(_OWORD *)(v11 + 176) = 0u;
        *(_OWORD *)(v11 + 192) = 0u;
        *(_OWORD *)(v11 + 144) = 0u;
        *(_OWORD *)(v11 + 160) = 0u;
        *(_OWORD *)(v11 + 112) = 0u;
        *(_OWORD *)(v11 + 128) = 0u;
        *(_OWORD *)(v11 + 80) = 0u;
        *(_OWORD *)(v11 + 96) = 0u;
        *(_OWORD *)(v11 + 48) = 0u;
        *(_OWORD *)(v11 + 64) = 0u;
        *(_OWORD *)(v11 + 16) = 0u;
        *(_OWORD *)(v11 + 32) = 0u;
        *(_OWORD *)v11 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v11, v12);
      }
    }
    v24 = (WebCore::Editor *)*((_QWORD *)v2 + 382);
    v13 = *(WebCore::Document **)(a1 + 296);
    if (!*((_QWORD *)v13 + 382))
    {
      v14 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v14, v13);
      v16 = (WebCore::Editor *)*((_QWORD *)v13 + 382);
      *((_QWORD *)v13 + 382) = v14;
      if (v16)
      {
        WebCore::Editor::~Editor(v16, v15);
        if (*(_DWORD *)v17)
        {
          *(_QWORD *)(v17 + 496) = 0;
          *(_OWORD *)(v17 + 464) = 0u;
          *(_OWORD *)(v17 + 480) = 0u;
          *(_OWORD *)(v17 + 432) = 0u;
          *(_OWORD *)(v17 + 448) = 0u;
          *(_OWORD *)(v17 + 400) = 0u;
          *(_OWORD *)(v17 + 416) = 0u;
          *(_OWORD *)(v17 + 368) = 0u;
          *(_OWORD *)(v17 + 384) = 0u;
          *(_OWORD *)(v17 + 336) = 0u;
          *(_OWORD *)(v17 + 352) = 0u;
          *(_OWORD *)(v17 + 304) = 0u;
          *(_OWORD *)(v17 + 320) = 0u;
          *(_OWORD *)(v17 + 272) = 0u;
          *(_OWORD *)(v17 + 288) = 0u;
          *(_OWORD *)(v17 + 240) = 0u;
          *(_OWORD *)(v17 + 256) = 0u;
          *(_OWORD *)(v17 + 208) = 0u;
          *(_OWORD *)(v17 + 224) = 0u;
          *(_OWORD *)(v17 + 176) = 0u;
          *(_OWORD *)(v17 + 192) = 0u;
          *(_OWORD *)(v17 + 144) = 0u;
          *(_OWORD *)(v17 + 160) = 0u;
          *(_OWORD *)(v17 + 112) = 0u;
          *(_OWORD *)(v17 + 128) = 0u;
          *(_OWORD *)(v17 + 80) = 0u;
          *(_OWORD *)(v17 + 96) = 0u;
          *(_OWORD *)(v17 + 48) = 0u;
          *(_OWORD *)(v17 + 64) = 0u;
          *(_OWORD *)(v17 + 16) = 0u;
          *(_OWORD *)(v17 + 32) = 0u;
          *(_OWORD *)v17 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v17, v18);
        }
      }
    }
    v3 = v24;
  }
  v25 = 0;
  WebCore::Editor::insertTextWithoutSendingTextEvent(v3, &v25, 0, 0);
  v5 = v25;
  v25 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(WebCore::Document **)(a1 + 296);
  if (!*((_QWORD *)v6 + 382))
  {
    v19 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v19, v6);
    v21 = (WebCore::Editor *)*((_QWORD *)v6 + 382);
    *((_QWORD *)v6 + 382) = v19;
    if (v21)
    {
      WebCore::Editor::~Editor(v21, v20);
      if (*(_DWORD *)v22)
      {
        *(_QWORD *)(v22 + 496) = 0;
        *(_OWORD *)(v22 + 464) = 0u;
        *(_OWORD *)(v22 + 480) = 0u;
        *(_OWORD *)(v22 + 432) = 0u;
        *(_OWORD *)(v22 + 448) = 0u;
        *(_OWORD *)(v22 + 400) = 0u;
        *(_OWORD *)(v22 + 416) = 0u;
        *(_OWORD *)(v22 + 368) = 0u;
        *(_OWORD *)(v22 + 384) = 0u;
        *(_OWORD *)(v22 + 336) = 0u;
        *(_OWORD *)(v22 + 352) = 0u;
        *(_OWORD *)(v22 + 304) = 0u;
        *(_OWORD *)(v22 + 320) = 0u;
        *(_OWORD *)(v22 + 272) = 0u;
        *(_OWORD *)(v22 + 288) = 0u;
        *(_OWORD *)(v22 + 240) = 0u;
        *(_OWORD *)(v22 + 256) = 0u;
        *(_OWORD *)(v22 + 208) = 0u;
        *(_OWORD *)(v22 + 224) = 0u;
        *(_OWORD *)(v22 + 176) = 0u;
        *(_OWORD *)(v22 + 192) = 0u;
        *(_OWORD *)(v22 + 144) = 0u;
        *(_OWORD *)(v22 + 160) = 0u;
        *(_OWORD *)(v22 + 112) = 0u;
        *(_OWORD *)(v22 + 128) = 0u;
        *(_OWORD *)(v22 + 80) = 0u;
        *(_OWORD *)(v22 + 96) = 0u;
        *(_OWORD *)(v22 + 48) = 0u;
        *(_OWORD *)(v22 + 64) = 0u;
        *(_OWORD *)(v22 + 16) = 0u;
        *(_OWORD *)(v22 + 32) = 0u;
        *(_OWORD *)v22 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v22, v23);
      }
    }
  }
  return 1;
}

uint64_t WebCore::executeYankAndSelect(uint64_t a1)
{
  WebCore::Document *v2;
  WebCore::Editor *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WebCore::Document *v6;
  WebCore::Editor *v8;
  void *v9;
  WebCore::Editor *v10;
  uint64_t v11;
  void *v12;
  WebCore::Document *v13;
  WebCore::Editor *v14;
  void *v15;
  WebCore::Editor *v16;
  uint64_t v17;
  void *v18;
  WebCore::Editor *v19;
  void *v20;
  WebCore::Editor *v21;
  uint64_t v22;
  void *v23;
  WebCore::Editor *v24;
  WTF::StringImpl *v25;

  v2 = *(WebCore::Document **)(a1 + 296);
  v3 = (WebCore::Editor *)*((_QWORD *)v2 + 382);
  if (!v3)
  {
    v8 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v8, v2);
    v10 = (WebCore::Editor *)*((_QWORD *)v2 + 382);
    *((_QWORD *)v2 + 382) = v8;
    if (v10)
    {
      WebCore::Editor::~Editor(v10, v9);
      if (*(_DWORD *)v11)
      {
        *(_QWORD *)(v11 + 496) = 0;
        *(_OWORD *)(v11 + 464) = 0u;
        *(_OWORD *)(v11 + 480) = 0u;
        *(_OWORD *)(v11 + 432) = 0u;
        *(_OWORD *)(v11 + 448) = 0u;
        *(_OWORD *)(v11 + 400) = 0u;
        *(_OWORD *)(v11 + 416) = 0u;
        *(_OWORD *)(v11 + 368) = 0u;
        *(_OWORD *)(v11 + 384) = 0u;
        *(_OWORD *)(v11 + 336) = 0u;
        *(_OWORD *)(v11 + 352) = 0u;
        *(_OWORD *)(v11 + 304) = 0u;
        *(_OWORD *)(v11 + 320) = 0u;
        *(_OWORD *)(v11 + 272) = 0u;
        *(_OWORD *)(v11 + 288) = 0u;
        *(_OWORD *)(v11 + 240) = 0u;
        *(_OWORD *)(v11 + 256) = 0u;
        *(_OWORD *)(v11 + 208) = 0u;
        *(_OWORD *)(v11 + 224) = 0u;
        *(_OWORD *)(v11 + 176) = 0u;
        *(_OWORD *)(v11 + 192) = 0u;
        *(_OWORD *)(v11 + 144) = 0u;
        *(_OWORD *)(v11 + 160) = 0u;
        *(_OWORD *)(v11 + 112) = 0u;
        *(_OWORD *)(v11 + 128) = 0u;
        *(_OWORD *)(v11 + 80) = 0u;
        *(_OWORD *)(v11 + 96) = 0u;
        *(_OWORD *)(v11 + 48) = 0u;
        *(_OWORD *)(v11 + 64) = 0u;
        *(_OWORD *)(v11 + 16) = 0u;
        *(_OWORD *)(v11 + 32) = 0u;
        *(_OWORD *)v11 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v11, v12);
      }
    }
    v24 = (WebCore::Editor *)*((_QWORD *)v2 + 382);
    v13 = *(WebCore::Document **)(a1 + 296);
    if (!*((_QWORD *)v13 + 382))
    {
      v14 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v14, v13);
      v16 = (WebCore::Editor *)*((_QWORD *)v13 + 382);
      *((_QWORD *)v13 + 382) = v14;
      if (v16)
      {
        WebCore::Editor::~Editor(v16, v15);
        if (*(_DWORD *)v17)
        {
          *(_QWORD *)(v17 + 496) = 0;
          *(_OWORD *)(v17 + 464) = 0u;
          *(_OWORD *)(v17 + 480) = 0u;
          *(_OWORD *)(v17 + 432) = 0u;
          *(_OWORD *)(v17 + 448) = 0u;
          *(_OWORD *)(v17 + 400) = 0u;
          *(_OWORD *)(v17 + 416) = 0u;
          *(_OWORD *)(v17 + 368) = 0u;
          *(_OWORD *)(v17 + 384) = 0u;
          *(_OWORD *)(v17 + 336) = 0u;
          *(_OWORD *)(v17 + 352) = 0u;
          *(_OWORD *)(v17 + 304) = 0u;
          *(_OWORD *)(v17 + 320) = 0u;
          *(_OWORD *)(v17 + 272) = 0u;
          *(_OWORD *)(v17 + 288) = 0u;
          *(_OWORD *)(v17 + 240) = 0u;
          *(_OWORD *)(v17 + 256) = 0u;
          *(_OWORD *)(v17 + 208) = 0u;
          *(_OWORD *)(v17 + 224) = 0u;
          *(_OWORD *)(v17 + 176) = 0u;
          *(_OWORD *)(v17 + 192) = 0u;
          *(_OWORD *)(v17 + 144) = 0u;
          *(_OWORD *)(v17 + 160) = 0u;
          *(_OWORD *)(v17 + 112) = 0u;
          *(_OWORD *)(v17 + 128) = 0u;
          *(_OWORD *)(v17 + 80) = 0u;
          *(_OWORD *)(v17 + 96) = 0u;
          *(_OWORD *)(v17 + 48) = 0u;
          *(_OWORD *)(v17 + 64) = 0u;
          *(_OWORD *)(v17 + 16) = 0u;
          *(_OWORD *)(v17 + 32) = 0u;
          *(_OWORD *)v17 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v17, v18);
        }
      }
    }
    v3 = v24;
  }
  v25 = 0;
  WebCore::Editor::insertTextWithoutSendingTextEvent(v3, &v25, 1, 0);
  v5 = v25;
  v25 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(WebCore::Document **)(a1 + 296);
  if (!*((_QWORD *)v6 + 382))
  {
    v19 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v19, v6);
    v21 = (WebCore::Editor *)*((_QWORD *)v6 + 382);
    *((_QWORD *)v6 + 382) = v19;
    if (v21)
    {
      WebCore::Editor::~Editor(v21, v20);
      if (*(_DWORD *)v22)
      {
        *(_QWORD *)(v22 + 496) = 0;
        *(_OWORD *)(v22 + 464) = 0u;
        *(_OWORD *)(v22 + 480) = 0u;
        *(_OWORD *)(v22 + 432) = 0u;
        *(_OWORD *)(v22 + 448) = 0u;
        *(_OWORD *)(v22 + 400) = 0u;
        *(_OWORD *)(v22 + 416) = 0u;
        *(_OWORD *)(v22 + 368) = 0u;
        *(_OWORD *)(v22 + 384) = 0u;
        *(_OWORD *)(v22 + 336) = 0u;
        *(_OWORD *)(v22 + 352) = 0u;
        *(_OWORD *)(v22 + 304) = 0u;
        *(_OWORD *)(v22 + 320) = 0u;
        *(_OWORD *)(v22 + 272) = 0u;
        *(_OWORD *)(v22 + 288) = 0u;
        *(_OWORD *)(v22 + 240) = 0u;
        *(_OWORD *)(v22 + 256) = 0u;
        *(_OWORD *)(v22 + 208) = 0u;
        *(_OWORD *)(v22 + 224) = 0u;
        *(_OWORD *)(v22 + 176) = 0u;
        *(_OWORD *)(v22 + 192) = 0u;
        *(_OWORD *)(v22 + 144) = 0u;
        *(_OWORD *)(v22 + 160) = 0u;
        *(_OWORD *)(v22 + 112) = 0u;
        *(_OWORD *)(v22 + 128) = 0u;
        *(_OWORD *)(v22 + 80) = 0u;
        *(_OWORD *)(v22 + 96) = 0u;
        *(_OWORD *)(v22 + 48) = 0u;
        *(_OWORD *)(v22 + 64) = 0u;
        *(_OWORD *)(v22 + 16) = 0u;
        *(_OWORD *)(v22 + 32) = 0u;
        *(_OWORD *)v22 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v22, v23);
      }
    }
  }
  return 1;
}

uint64_t WebCore::executeTakeFindStringFromSelection(uint64_t a1, void *a2)
{
  WebCore::Document *v2;
  _QWORD *v3;
  WebCore::Editor *v5;
  WebCore::Editor *v6;
  uint64_t v7;

  v2 = *(WebCore::Document **)(a1 + 296);
  v3 = (_QWORD *)*((_QWORD *)v2 + 382);
  if (!v3)
  {
    v5 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v5, v2);
    v6 = (WebCore::Editor *)*((_QWORD *)v2 + 382);
    *((_QWORD *)v2 + 382) = v5;
    if (v6)
    {
      WebCore::Editor::~Editor(v6, a2);
      if (*(_DWORD *)v7)
      {
        *(_QWORD *)(v7 + 496) = 0;
        *(_OWORD *)(v7 + 464) = 0u;
        *(_OWORD *)(v7 + 480) = 0u;
        *(_OWORD *)(v7 + 432) = 0u;
        *(_OWORD *)(v7 + 448) = 0u;
        *(_OWORD *)(v7 + 400) = 0u;
        *(_OWORD *)(v7 + 416) = 0u;
        *(_OWORD *)(v7 + 368) = 0u;
        *(_OWORD *)(v7 + 384) = 0u;
        *(_OWORD *)(v7 + 336) = 0u;
        *(_OWORD *)(v7 + 352) = 0u;
        *(_OWORD *)(v7 + 304) = 0u;
        *(_OWORD *)(v7 + 320) = 0u;
        *(_OWORD *)(v7 + 272) = 0u;
        *(_OWORD *)(v7 + 288) = 0u;
        *(_OWORD *)(v7 + 240) = 0u;
        *(_OWORD *)(v7 + 256) = 0u;
        *(_OWORD *)(v7 + 208) = 0u;
        *(_OWORD *)(v7 + 224) = 0u;
        *(_OWORD *)(v7 + 176) = 0u;
        *(_OWORD *)(v7 + 192) = 0u;
        *(_OWORD *)(v7 + 144) = 0u;
        *(_OWORD *)(v7 + 160) = 0u;
        *(_OWORD *)(v7 + 112) = 0u;
        *(_OWORD *)(v7 + 128) = 0u;
        *(_OWORD *)(v7 + 80) = 0u;
        *(_OWORD *)(v7 + 96) = 0u;
        *(_OWORD *)(v7 + 48) = 0u;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        *(_OWORD *)(v7 + 32) = 0u;
        *(_OWORD *)v7 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v7, a2);
      }
    }
    v3 = (_QWORD *)*((_QWORD *)v2 + 382);
  }
  WebCore::Editor::takeFindStringFromSelection(v3, (const WebCore::Position *)a2);
  return 1;
}

BOOL WebCore::enabledTakeFindStringFromSelection(uint64_t a1, void *a2)
{
  WebCore::Document *v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::Node *v5;
  void *v6;
  int v7;
  _BOOL4 v8;
  WebCore::Editor *v10;
  WebCore::Editor *v11;
  uint64_t v12;

  v2 = *(WebCore::Document **)(a1 + 296);
  v3 = *((_QWORD *)v2 + 382);
  if (!v3)
  {
    v10 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v10, v2);
    v11 = (WebCore::Editor *)*((_QWORD *)v2 + 382);
    *((_QWORD *)v2 + 382) = v10;
    if (v11)
    {
      WebCore::Editor::~Editor(v11, a2);
      if (*(_DWORD *)v12)
      {
        *(_QWORD *)(v12 + 496) = 0;
        *(_OWORD *)(v12 + 464) = 0u;
        *(_OWORD *)(v12 + 480) = 0u;
        *(_OWORD *)(v12 + 432) = 0u;
        *(_OWORD *)(v12 + 448) = 0u;
        *(_OWORD *)(v12 + 400) = 0u;
        *(_OWORD *)(v12 + 416) = 0u;
        *(_OWORD *)(v12 + 368) = 0u;
        *(_OWORD *)(v12 + 384) = 0u;
        *(_OWORD *)(v12 + 336) = 0u;
        *(_OWORD *)(v12 + 352) = 0u;
        *(_OWORD *)(v12 + 304) = 0u;
        *(_OWORD *)(v12 + 320) = 0u;
        *(_OWORD *)(v12 + 272) = 0u;
        *(_OWORD *)(v12 + 288) = 0u;
        *(_OWORD *)(v12 + 240) = 0u;
        *(_OWORD *)(v12 + 256) = 0u;
        *(_OWORD *)(v12 + 208) = 0u;
        *(_OWORD *)(v12 + 224) = 0u;
        *(_OWORD *)(v12 + 176) = 0u;
        *(_OWORD *)(v12 + 192) = 0u;
        *(_OWORD *)(v12 + 144) = 0u;
        *(_OWORD *)(v12 + 160) = 0u;
        *(_OWORD *)(v12 + 112) = 0u;
        *(_OWORD *)(v12 + 128) = 0u;
        *(_OWORD *)(v12 + 80) = 0u;
        *(_OWORD *)(v12 + 96) = 0u;
        *(_OWORD *)(v12 + 48) = 0u;
        *(_OWORD *)(v12 + 64) = 0u;
        *(_OWORD *)(v12 + 16) = 0u;
        *(_OWORD *)(v12 + 32) = 0u;
        *(_OWORD *)v12 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v12, a2);
      }
    }
    v3 = *((_QWORD *)v2 + 382);
  }
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 8) + 3064);
  if (*(_BYTE *)(v4 + 153) != 2)
    return 0;
  v5 = WebCore::enclosingTextFormControl((WebCore *)(v4 + 120), (const WebCore::Position *)a2);
  if (v5 && *(_QWORD *)(*((_QWORD *)v5 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    v7 = *((_DWORD *)v5 + 6);
    *((_DWORD *)v5 + 6) = v7 + 2;
    v8 = *(_DWORD *)(*((_QWORD *)v5 + 30) + 12) == 2048;
    if (v7)
    {
      *((_DWORD *)v5 + 6) = v7;
    }
    else if ((*((_WORD *)v5 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v5, v6);
    }
  }
  else
  {
    v8 = 0;
  }
  return !v8;
}

uint64_t WebCore::executeApplyParagraphStyle(uint64_t a1, int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  WTF::StringImpl *v9;
  WebCore::Document *v10;
  unsigned int *v11;
  uint64_t v12;
  WebCore::Document *v13;
  unsigned int *v14;
  uint64_t v16;
  uint64_t v17;
  _DWORD **v18;
  _DWORD *v19;
  WTF *v20;
  uint64_t v22;
  WebCore::Editor *v23;
  void *v24;
  WebCore::Editor *v25;
  uint64_t v26;
  void *v27;
  WebCore::Editor *v28;
  void *v29;
  WebCore::Editor *v30;
  uint64_t v31;
  void *v32;

  v8 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v8 = 0x900000001;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = v8 + 32;
  *(_QWORD *)(v8 + 24) = 4;
  WebCore::MutableStyleProperties::setProperty(v8, 249, a4, 0, 0);
  if ((a2 - 1) >= 2)
  {
    v12 = 0;
    if (a2)
      goto LABEL_8;
    v13 = *(WebCore::Document **)(a1 + 296);
    v14 = (unsigned int *)*((_QWORD *)v13 + 382);
    if (!v14)
    {
      v28 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v28, v13);
      v30 = (WebCore::Editor *)*((_QWORD *)v13 + 382);
      *((_QWORD *)v13 + 382) = v28;
      if (v30)
      {
        WebCore::Editor::~Editor(v30, v29);
        if (*(_DWORD *)v31)
        {
          *(_QWORD *)(v31 + 496) = 0;
          *(_OWORD *)(v31 + 464) = 0u;
          *(_OWORD *)(v31 + 480) = 0u;
          *(_OWORD *)(v31 + 432) = 0u;
          *(_OWORD *)(v31 + 448) = 0u;
          *(_OWORD *)(v31 + 400) = 0u;
          *(_OWORD *)(v31 + 416) = 0u;
          *(_OWORD *)(v31 + 368) = 0u;
          *(_OWORD *)(v31 + 384) = 0u;
          *(_OWORD *)(v31 + 336) = 0u;
          *(_OWORD *)(v31 + 352) = 0u;
          *(_OWORD *)(v31 + 304) = 0u;
          *(_OWORD *)(v31 + 320) = 0u;
          *(_OWORD *)(v31 + 272) = 0u;
          *(_OWORD *)(v31 + 288) = 0u;
          *(_OWORD *)(v31 + 240) = 0u;
          *(_OWORD *)(v31 + 256) = 0u;
          *(_OWORD *)(v31 + 208) = 0u;
          *(_OWORD *)(v31 + 224) = 0u;
          *(_OWORD *)(v31 + 176) = 0u;
          *(_OWORD *)(v31 + 192) = 0u;
          *(_OWORD *)(v31 + 144) = 0u;
          *(_OWORD *)(v31 + 160) = 0u;
          *(_OWORD *)(v31 + 112) = 0u;
          *(_OWORD *)(v31 + 128) = 0u;
          *(_OWORD *)(v31 + 80) = 0u;
          *(_OWORD *)(v31 + 96) = 0u;
          *(_OWORD *)(v31 + 48) = 0u;
          *(_OWORD *)(v31 + 64) = 0u;
          *(_OWORD *)(v31 + 16) = 0u;
          *(_OWORD *)(v31 + 32) = 0u;
          *(_OWORD *)v31 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v31, v32);
        }
      }
      v14 = (unsigned int *)*((_QWORD *)v13 + 382);
    }
    WebCore::Editor::applyParagraphStyleToSelection(v14, (_DWORD *)v8, a3);
  }
  else
  {
    v10 = *(WebCore::Document **)(a1 + 296);
    v11 = (unsigned int *)*((_QWORD *)v10 + 382);
    if (!v11)
    {
      v23 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v23, v10);
      v25 = (WebCore::Editor *)*((_QWORD *)v10 + 382);
      *((_QWORD *)v10 + 382) = v23;
      if (v25)
      {
        WebCore::Editor::~Editor(v25, v24);
        if (*(_DWORD *)v26)
        {
          *(_QWORD *)(v26 + 496) = 0;
          *(_OWORD *)(v26 + 464) = 0u;
          *(_OWORD *)(v26 + 480) = 0u;
          *(_OWORD *)(v26 + 432) = 0u;
          *(_OWORD *)(v26 + 448) = 0u;
          *(_OWORD *)(v26 + 400) = 0u;
          *(_OWORD *)(v26 + 416) = 0u;
          *(_OWORD *)(v26 + 368) = 0u;
          *(_OWORD *)(v26 + 384) = 0u;
          *(_OWORD *)(v26 + 336) = 0u;
          *(_OWORD *)(v26 + 352) = 0u;
          *(_OWORD *)(v26 + 304) = 0u;
          *(_OWORD *)(v26 + 320) = 0u;
          *(_OWORD *)(v26 + 272) = 0u;
          *(_OWORD *)(v26 + 288) = 0u;
          *(_OWORD *)(v26 + 240) = 0u;
          *(_OWORD *)(v26 + 256) = 0u;
          *(_OWORD *)(v26 + 208) = 0u;
          *(_OWORD *)(v26 + 224) = 0u;
          *(_OWORD *)(v26 + 176) = 0u;
          *(_OWORD *)(v26 + 192) = 0u;
          *(_OWORD *)(v26 + 144) = 0u;
          *(_OWORD *)(v26 + 160) = 0u;
          *(_OWORD *)(v26 + 112) = 0u;
          *(_OWORD *)(v26 + 128) = 0u;
          *(_OWORD *)(v26 + 80) = 0u;
          *(_OWORD *)(v26 + 96) = 0u;
          *(_OWORD *)(v26 + 48) = 0u;
          *(_OWORD *)(v26 + 64) = 0u;
          *(_OWORD *)(v26 + 16) = 0u;
          *(_OWORD *)(v26 + 32) = 0u;
          *(_OWORD *)v26 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v26, v27);
        }
      }
      v11 = (unsigned int *)*((_QWORD *)v10 + 382);
    }
    WebCore::Editor::applyParagraphStyle(v11, (void *)v8, 0x3Bu);
  }
  v12 = 1;
LABEL_8:
  if (*(_DWORD *)v8 == 1)
  {
    v16 = *(unsigned int *)(v8 + 28);
    if ((_DWORD)v16)
    {
      v17 = 16 * v16;
      v18 = (_DWORD **)(*(_QWORD *)(v8 + 16) + 8);
      do
      {
        v19 = *v18;
        *v18 = 0;
        if (v19)
        {
          if (*v19 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, v9);
          else
            *v19 -= 2;
        }
        v18 += 2;
        v17 -= 16;
      }
      while (v17);
    }
    v20 = *(WTF **)(v8 + 16);
    if ((WTF *)(v8 + 32) != v20 && v20 != 0)
    {
      *(_QWORD *)(v8 + 16) = 0;
      *(_DWORD *)(v8 + 24) = 0;
      WTF::fastFree(v20, v9);
    }
    v22 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)(v8 + 8) = 0;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    WTF::fastFree((WTF *)v8, v9);
  }
  else
  {
    --*(_DWORD *)v8;
  }
  return v12;
}

uint64_t WebCore::executeApplyStyle(uint64_t a1, int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD **v18;
  _DWORD *v19;
  WTF *v20;
  uint64_t v22;
  WTF *v23;

  v10 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v10 = 1;
  *(_QWORD *)(v10 + 8) = 0;
  *(_BYTE *)(v10 + 16) &= 0xE0u;
  *(_DWORD *)(v10 + 20) = WebCore::EditingStyle::NoFontDelta;
  WebCore::EditingStyle::setProperty(v10, a4, a5, 0);
  WebCore::EditingStyle::extractFontSizeDelta((WebCore::EditingStyle *)v10);
  v23 = (WTF *)v10;
  v12 = WebCore::applyCommandToFrame(*(WebCore::Document **)(a1 + 296), a2, a3, &v23);
  v13 = v23;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
    {
      v15 = *((_QWORD *)v23 + 1);
      *((_QWORD *)v23 + 1) = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1)
        {
          v16 = *(unsigned int *)(v15 + 28);
          if ((_DWORD)v16)
          {
            v17 = 16 * v16;
            v18 = (_DWORD **)(*(_QWORD *)(v15 + 16) + 8);
            do
            {
              v19 = *v18;
              *v18 = 0;
              if (v19)
              {
                if (*v19 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, v11);
                else
                  *v19 -= 2;
              }
              v18 += 2;
              v17 -= 16;
            }
            while (v17);
          }
          v20 = *(WTF **)(v15 + 16);
          if ((WTF *)(v15 + 32) != v20 && v20 != 0)
          {
            *(_QWORD *)(v15 + 16) = 0;
            *(_DWORD *)(v15 + 24) = 0;
            WTF::fastFree(v20, v11);
          }
          v22 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v22)
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          WTF::fastFree((WTF *)v15, v11);
        }
        else
        {
          --*(_DWORD *)v15;
        }
      }
      WTF::fastFree(v13, v11);
    }
    else
    {
      --*(_DWORD *)v23;
    }
  }
  return v12;
}

uint64_t WebCore::applyCommandToFrame(WebCore::Document *a1, int a2, unsigned int a3, WTF **a4)
{
  unsigned int *v5;
  WTF *v6;
  WTF::StringImpl *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD **v14;
  _DWORD *v15;
  WTF *v16;
  uint64_t v18;
  WebCore::Editor *v19;
  void *v20;
  WebCore::Editor *v21;
  uint64_t v22;
  void *v23;
  WebCore::Editor *v24;
  void *v25;
  WebCore::Editor *v26;
  uint64_t v27;
  void *v28;
  unsigned int v29;
  unsigned int v30;
  WTF **v31;
  WTF **v32;
  WTF *v33;

  if ((a2 - 1) < 2)
  {
    v5 = (unsigned int *)*((_QWORD *)a1 + 382);
    if (!v5)
    {
      v31 = a4;
      v29 = a3;
      v19 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v19, a1);
      v21 = (WebCore::Editor *)*((_QWORD *)a1 + 382);
      *((_QWORD *)a1 + 382) = v19;
      if (v21)
      {
        WebCore::Editor::~Editor(v21, v20);
        if (*(_DWORD *)v22)
        {
          *(_QWORD *)(v22 + 496) = 0;
          *(_OWORD *)(v22 + 464) = 0u;
          *(_OWORD *)(v22 + 480) = 0u;
          *(_OWORD *)(v22 + 432) = 0u;
          *(_OWORD *)(v22 + 448) = 0u;
          *(_OWORD *)(v22 + 400) = 0u;
          *(_OWORD *)(v22 + 416) = 0u;
          *(_OWORD *)(v22 + 368) = 0u;
          *(_OWORD *)(v22 + 384) = 0u;
          *(_OWORD *)(v22 + 336) = 0u;
          *(_OWORD *)(v22 + 352) = 0u;
          *(_OWORD *)(v22 + 304) = 0u;
          *(_OWORD *)(v22 + 320) = 0u;
          *(_OWORD *)(v22 + 272) = 0u;
          *(_OWORD *)(v22 + 288) = 0u;
          *(_OWORD *)(v22 + 240) = 0u;
          *(_OWORD *)(v22 + 256) = 0u;
          *(_OWORD *)(v22 + 208) = 0u;
          *(_OWORD *)(v22 + 224) = 0u;
          *(_OWORD *)(v22 + 176) = 0u;
          *(_OWORD *)(v22 + 192) = 0u;
          *(_OWORD *)(v22 + 144) = 0u;
          *(_OWORD *)(v22 + 160) = 0u;
          *(_OWORD *)(v22 + 112) = 0u;
          *(_OWORD *)(v22 + 128) = 0u;
          *(_OWORD *)(v22 + 80) = 0u;
          *(_OWORD *)(v22 + 96) = 0u;
          *(_OWORD *)(v22 + 48) = 0u;
          *(_OWORD *)(v22 + 64) = 0u;
          *(_OWORD *)(v22 + 16) = 0u;
          *(_OWORD *)(v22 + 32) = 0u;
          *(_OWORD *)v22 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v22, v23);
        }
      }
      v5 = (unsigned int *)*((_QWORD *)a1 + 382);
      a3 = v29;
      a4 = v31;
    }
    v6 = *a4;
    *a4 = 0;
    v33 = v6;
    WebCore::Editor::applyStyle(v5, &v33, a3, 1);
    v8 = v33;
    if (v33)
    {
      if (*(_DWORD *)v33 == 1)
      {
        v11 = *((_QWORD *)v33 + 1);
        *((_QWORD *)v33 + 1) = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 1)
          {
            v12 = *(unsigned int *)(v11 + 28);
            if ((_DWORD)v12)
            {
              v13 = 16 * v12;
              v14 = (_DWORD **)(*(_QWORD *)(v11 + 16) + 8);
              do
              {
                v15 = *v14;
                *v14 = 0;
                if (v15)
                {
                  if (*v15 == 2)
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, v7);
                  else
                    *v15 -= 2;
                }
                v14 += 2;
                v13 -= 16;
              }
              while (v13);
            }
            v16 = *(WTF **)(v11 + 16);
            if ((WTF *)(v11 + 32) != v16 && v16 != 0)
            {
              *(_QWORD *)(v11 + 16) = 0;
              *(_DWORD *)(v11 + 24) = 0;
              WTF::fastFree(v16, v7);
            }
            v18 = *(_QWORD *)(v11 + 8);
            *(_QWORD *)(v11 + 8) = 0;
            if (v18)
              (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
            WTF::fastFree((WTF *)v11, v7);
          }
          else
          {
            --*(_DWORD *)v11;
          }
        }
        WTF::fastFree(v8, v7);
      }
      else
      {
        --*(_DWORD *)v33;
      }
    }
    return 1;
  }
  if (!a2)
  {
    v9 = *((_QWORD *)a1 + 382);
    if (!v9)
    {
      v32 = a4;
      v30 = a3;
      v24 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v24, a1);
      v26 = (WebCore::Editor *)*((_QWORD *)a1 + 382);
      *((_QWORD *)a1 + 382) = v24;
      if (v26)
      {
        WebCore::Editor::~Editor(v26, v25);
        if (*(_DWORD *)v27)
        {
          *(_QWORD *)(v27 + 496) = 0;
          *(_OWORD *)(v27 + 464) = 0u;
          *(_OWORD *)(v27 + 480) = 0u;
          *(_OWORD *)(v27 + 432) = 0u;
          *(_OWORD *)(v27 + 448) = 0u;
          *(_OWORD *)(v27 + 400) = 0u;
          *(_OWORD *)(v27 + 416) = 0u;
          *(_OWORD *)(v27 + 368) = 0u;
          *(_OWORD *)(v27 + 384) = 0u;
          *(_OWORD *)(v27 + 336) = 0u;
          *(_OWORD *)(v27 + 352) = 0u;
          *(_OWORD *)(v27 + 304) = 0u;
          *(_OWORD *)(v27 + 320) = 0u;
          *(_OWORD *)(v27 + 272) = 0u;
          *(_OWORD *)(v27 + 288) = 0u;
          *(_OWORD *)(v27 + 240) = 0u;
          *(_OWORD *)(v27 + 256) = 0u;
          *(_OWORD *)(v27 + 208) = 0u;
          *(_OWORD *)(v27 + 224) = 0u;
          *(_OWORD *)(v27 + 176) = 0u;
          *(_OWORD *)(v27 + 192) = 0u;
          *(_OWORD *)(v27 + 144) = 0u;
          *(_OWORD *)(v27 + 160) = 0u;
          *(_OWORD *)(v27 + 112) = 0u;
          *(_OWORD *)(v27 + 128) = 0u;
          *(_OWORD *)(v27 + 80) = 0u;
          *(_OWORD *)(v27 + 96) = 0u;
          *(_OWORD *)(v27 + 48) = 0u;
          *(_OWORD *)(v27 + 64) = 0u;
          *(_OWORD *)(v27 + 16) = 0u;
          *(_OWORD *)(v27 + 32) = 0u;
          *(_OWORD *)v27 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v27, v28);
        }
      }
      v9 = *((_QWORD *)a1 + 382);
      a3 = v30;
      a4 = v32;
    }
    WebCore::Editor::applyStyleToSelection(v9, a4, a3, 0);
    return 1;
  }
  return 0;
}

uint64_t WebCore::executeToggleStyle(uint64_t a1, int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WebCore::Document *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF *v22;
  WTF::StringImpl *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD **v28;
  _DWORD *v29;
  WTF *v30;
  uint64_t v32;
  WebCore::Editor *v33;
  void *v34;
  WebCore::Editor *v35;
  uint64_t v36;
  void *v37;
  WTF::StringImpl *v38;
  WTF *v39;

  v15 = *(WebCore::Document **)(a1 + 296);
  v16 = *((_QWORD *)v15 + 382);
  if (!v16)
  {
    v33 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v33, v15);
    v35 = (WebCore::Editor *)*((_QWORD *)v15 + 382);
    *((_QWORD *)v15 + 382) = v33;
    if (v35)
    {
      WebCore::Editor::~Editor(v35, v34);
      if (*(_DWORD *)v36)
      {
        *(_QWORD *)(v36 + 496) = 0;
        *(_OWORD *)(v36 + 464) = 0u;
        *(_OWORD *)(v36 + 480) = 0u;
        *(_OWORD *)(v36 + 432) = 0u;
        *(_OWORD *)(v36 + 448) = 0u;
        *(_OWORD *)(v36 + 400) = 0u;
        *(_OWORD *)(v36 + 416) = 0u;
        *(_OWORD *)(v36 + 368) = 0u;
        *(_OWORD *)(v36 + 384) = 0u;
        *(_OWORD *)(v36 + 336) = 0u;
        *(_OWORD *)(v36 + 352) = 0u;
        *(_OWORD *)(v36 + 304) = 0u;
        *(_OWORD *)(v36 + 320) = 0u;
        *(_OWORD *)(v36 + 272) = 0u;
        *(_OWORD *)(v36 + 288) = 0u;
        *(_OWORD *)(v36 + 240) = 0u;
        *(_OWORD *)(v36 + 256) = 0u;
        *(_OWORD *)(v36 + 208) = 0u;
        *(_OWORD *)(v36 + 224) = 0u;
        *(_OWORD *)(v36 + 176) = 0u;
        *(_OWORD *)(v36 + 192) = 0u;
        *(_OWORD *)(v36 + 144) = 0u;
        *(_OWORD *)(v36 + 160) = 0u;
        *(_OWORD *)(v36 + 112) = 0u;
        *(_OWORD *)(v36 + 128) = 0u;
        *(_OWORD *)(v36 + 80) = 0u;
        *(_OWORD *)(v36 + 96) = 0u;
        *(_OWORD *)(v36 + 48) = 0u;
        *(_OWORD *)(v36 + 64) = 0u;
        *(_OWORD *)(v36 + 16) = 0u;
        *(_OWORD *)(v36 + 32) = 0u;
        *(_OWORD *)v36 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v36, v37);
      }
    }
    v16 = *((_QWORD *)v15 + 382);
  }
  if (WebCore::isStylePresent(v16, a4, a7, a8))
    v17 = a6;
  else
    v17 = a8;
  if (v17)
  {
    if (v17 == 1)
    {
      v18 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v18 = v39;
    }
    v38 = v18;
  }
  else
  {
    v38 = 0;
  }
  v19 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v19 = 1;
  *(_QWORD *)(v19 + 8) = 0;
  *(_BYTE *)(v19 + 16) &= 0xE0u;
  *(_DWORD *)(v19 + 20) = WebCore::EditingStyle::NoFontDelta;
  WebCore::EditingStyle::setProperty(v19, a4, (uint64_t)&v38, 0);
  WebCore::EditingStyle::extractFontSizeDelta((WebCore::EditingStyle *)v19);
  v39 = (WTF *)v19;
  v21 = WebCore::applyCommandToFrame(*(WebCore::Document **)(a1 + 296), a2, a3, &v39);
  v22 = v39;
  if (v39)
  {
    if (*(_DWORD *)v39 == 1)
    {
      v25 = *((_QWORD *)v39 + 1);
      *((_QWORD *)v39 + 1) = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 1)
        {
          v26 = *(unsigned int *)(v25 + 28);
          if ((_DWORD)v26)
          {
            v27 = 16 * v26;
            v28 = (_DWORD **)(*(_QWORD *)(v25 + 16) + 8);
            do
            {
              v29 = *v28;
              *v28 = 0;
              if (v29)
              {
                if (*v29 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v29, v20);
                else
                  *v29 -= 2;
              }
              v28 += 2;
              v27 -= 16;
            }
            while (v27);
          }
          v30 = *(WTF **)(v25 + 16);
          if ((WTF *)(v25 + 32) != v30 && v30 != 0)
          {
            *(_QWORD *)(v25 + 16) = 0;
            *(_DWORD *)(v25 + 24) = 0;
            WTF::fastFree(v30, v20);
          }
          v32 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (v32)
            (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
          WTF::fastFree((WTF *)v25, v20);
        }
        else
        {
          --*(_DWORD *)v25;
        }
      }
      WTF::fastFree(v22, v20);
    }
    else
    {
      --*(_DWORD *)v39;
    }
  }
  v23 = v38;
  v38 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v20);
    else
      *(_DWORD *)v23 -= 2;
  }
  return v21;
}

BOOL WebCore::isStylePresent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  _BOOL8 HasStyle;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) + 680) + 370);
  if (v7 == 3 || v7 == 0)
  {
    if (a4)
    {
      if (a4 == 1)
      {
        v9 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v9 = v16;
        v6 = *(_QWORD *)(a1 + 16);
      }
      v15 = v9;
    }
    else
    {
      v15 = 0;
    }
    HasStyle = WebCore::Editor::selectionStartHasStyle(*(_QWORD *)(*(_QWORD *)(v6 + 8) + 3064), a2, (uint64_t)&v15);
  }
  else
  {
    if (a4)
    {
      if (a4 == 1)
      {
        v12 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v12 = v16;
      }
      v15 = v12;
    }
    else
    {
      v15 = 0;
    }
    HasStyle = WebCore::Editor::selectionHasStyle(a1, a2, (uint64_t)&v15) == 1;
  }
  v13 = v15;
  v15 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v10);
    else
      *(_DWORD *)v13 -= 2;
  }
  return HasStyle;
}

uint64_t WebCore::stateStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  WebCore::Document *v6;
  uint64_t v7;
  int v8;
  WebCore::Document *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t HasStyle;
  WTF::StringImpl *v14;
  WebCore::Document *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WebCore::Editor *v21;
  void *v22;
  WebCore::Editor *v23;
  uint64_t v24;
  void *v25;
  WebCore::Editor *v26;
  void *v27;
  WebCore::Editor *v28;
  uint64_t v29;
  void *v30;
  WebCore::Editor *v31;
  void *v32;
  WebCore::Editor *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;

  v6 = *(WebCore::Document **)(a1 + 296);
  v7 = *((_QWORD *)v6 + 382);
  if (!v7)
  {
    v36 = a1;
    v21 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v21, v6);
    v23 = (WebCore::Editor *)*((_QWORD *)v6 + 382);
    *((_QWORD *)v6 + 382) = v21;
    if (v23)
    {
      WebCore::Editor::~Editor(v23, v22);
      if (*(_DWORD *)v24)
      {
        *(_QWORD *)(v24 + 496) = 0;
        *(_OWORD *)(v24 + 464) = 0u;
        *(_OWORD *)(v24 + 480) = 0u;
        *(_OWORD *)(v24 + 432) = 0u;
        *(_OWORD *)(v24 + 448) = 0u;
        *(_OWORD *)(v24 + 400) = 0u;
        *(_OWORD *)(v24 + 416) = 0u;
        *(_OWORD *)(v24 + 368) = 0u;
        *(_OWORD *)(v24 + 384) = 0u;
        *(_OWORD *)(v24 + 336) = 0u;
        *(_OWORD *)(v24 + 352) = 0u;
        *(_OWORD *)(v24 + 304) = 0u;
        *(_OWORD *)(v24 + 320) = 0u;
        *(_OWORD *)(v24 + 272) = 0u;
        *(_OWORD *)(v24 + 288) = 0u;
        *(_OWORD *)(v24 + 240) = 0u;
        *(_OWORD *)(v24 + 256) = 0u;
        *(_OWORD *)(v24 + 208) = 0u;
        *(_OWORD *)(v24 + 224) = 0u;
        *(_OWORD *)(v24 + 176) = 0u;
        *(_OWORD *)(v24 + 192) = 0u;
        *(_OWORD *)(v24 + 144) = 0u;
        *(_OWORD *)(v24 + 160) = 0u;
        *(_OWORD *)(v24 + 112) = 0u;
        *(_OWORD *)(v24 + 128) = 0u;
        *(_OWORD *)(v24 + 80) = 0u;
        *(_OWORD *)(v24 + 96) = 0u;
        *(_OWORD *)(v24 + 48) = 0u;
        *(_OWORD *)(v24 + 64) = 0u;
        *(_OWORD *)(v24 + 16) = 0u;
        *(_OWORD *)(v24 + 32) = 0u;
        *(_OWORD *)v24 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v24, v25);
      }
    }
    v7 = *((_QWORD *)v6 + 382);
    a1 = v36;
  }
  v8 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 16) + 8) + 680) + 370);
  if (v8 == 3 || v8 == 0)
  {
    v10 = *(WebCore::Document **)(a1 + 296);
    v11 = *((_QWORD *)v10 + 382);
    if (v11)
    {
      if (a4)
      {
LABEL_9:
        if (a4 == 1)
        {
          v12 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
          *MEMORY[0x1E0CBEF70] += 2;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v12 = v38;
        }
        v37 = v12;
        goto LABEL_12;
      }
    }
    else
    {
      v26 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v26, v10);
      v28 = (WebCore::Editor *)*((_QWORD *)v10 + 382);
      *((_QWORD *)v10 + 382) = v26;
      if (v28)
      {
        WebCore::Editor::~Editor(v28, v27);
        if (*(_DWORD *)v29)
        {
          *(_QWORD *)(v29 + 496) = 0;
          *(_OWORD *)(v29 + 464) = 0u;
          *(_OWORD *)(v29 + 480) = 0u;
          *(_OWORD *)(v29 + 432) = 0u;
          *(_OWORD *)(v29 + 448) = 0u;
          *(_OWORD *)(v29 + 400) = 0u;
          *(_OWORD *)(v29 + 416) = 0u;
          *(_OWORD *)(v29 + 368) = 0u;
          *(_OWORD *)(v29 + 384) = 0u;
          *(_OWORD *)(v29 + 336) = 0u;
          *(_OWORD *)(v29 + 352) = 0u;
          *(_OWORD *)(v29 + 304) = 0u;
          *(_OWORD *)(v29 + 320) = 0u;
          *(_OWORD *)(v29 + 272) = 0u;
          *(_OWORD *)(v29 + 288) = 0u;
          *(_OWORD *)(v29 + 240) = 0u;
          *(_OWORD *)(v29 + 256) = 0u;
          *(_OWORD *)(v29 + 208) = 0u;
          *(_OWORD *)(v29 + 224) = 0u;
          *(_OWORD *)(v29 + 176) = 0u;
          *(_OWORD *)(v29 + 192) = 0u;
          *(_OWORD *)(v29 + 144) = 0u;
          *(_OWORD *)(v29 + 160) = 0u;
          *(_OWORD *)(v29 + 112) = 0u;
          *(_OWORD *)(v29 + 128) = 0u;
          *(_OWORD *)(v29 + 80) = 0u;
          *(_OWORD *)(v29 + 96) = 0u;
          *(_OWORD *)(v29 + 48) = 0u;
          *(_OWORD *)(v29 + 64) = 0u;
          *(_OWORD *)(v29 + 16) = 0u;
          *(_OWORD *)(v29 + 32) = 0u;
          *(_OWORD *)v29 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v29, v30);
        }
      }
      v11 = *((_QWORD *)v10 + 382);
      if (a4)
        goto LABEL_9;
    }
    v37 = 0;
LABEL_12:
    HasStyle = WebCore::Editor::selectionStartHasStyle(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 8) + 3064), a2, (uint64_t)&v37);
    goto LABEL_19;
  }
  v15 = *(WebCore::Document **)(a1 + 296);
  v16 = *((_QWORD *)v15 + 382);
  if (v16)
  {
    if (a4)
    {
LABEL_15:
      if (a4 == 1)
      {
        v17 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v17 = v38;
      }
      v37 = v17;
      goto LABEL_18;
    }
  }
  else
  {
    v31 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v31, v15);
    v33 = (WebCore::Editor *)*((_QWORD *)v15 + 382);
    *((_QWORD *)v15 + 382) = v31;
    if (v33)
    {
      WebCore::Editor::~Editor(v33, v32);
      if (*(_DWORD *)v34)
      {
        *(_QWORD *)(v34 + 496) = 0;
        *(_OWORD *)(v34 + 464) = 0u;
        *(_OWORD *)(v34 + 480) = 0u;
        *(_OWORD *)(v34 + 432) = 0u;
        *(_OWORD *)(v34 + 448) = 0u;
        *(_OWORD *)(v34 + 400) = 0u;
        *(_OWORD *)(v34 + 416) = 0u;
        *(_OWORD *)(v34 + 368) = 0u;
        *(_OWORD *)(v34 + 384) = 0u;
        *(_OWORD *)(v34 + 336) = 0u;
        *(_OWORD *)(v34 + 352) = 0u;
        *(_OWORD *)(v34 + 304) = 0u;
        *(_OWORD *)(v34 + 320) = 0u;
        *(_OWORD *)(v34 + 272) = 0u;
        *(_OWORD *)(v34 + 288) = 0u;
        *(_OWORD *)(v34 + 240) = 0u;
        *(_OWORD *)(v34 + 256) = 0u;
        *(_OWORD *)(v34 + 208) = 0u;
        *(_OWORD *)(v34 + 224) = 0u;
        *(_OWORD *)(v34 + 176) = 0u;
        *(_OWORD *)(v34 + 192) = 0u;
        *(_OWORD *)(v34 + 144) = 0u;
        *(_OWORD *)(v34 + 160) = 0u;
        *(_OWORD *)(v34 + 112) = 0u;
        *(_OWORD *)(v34 + 128) = 0u;
        *(_OWORD *)(v34 + 80) = 0u;
        *(_OWORD *)(v34 + 96) = 0u;
        *(_OWORD *)(v34 + 48) = 0u;
        *(_OWORD *)(v34 + 64) = 0u;
        *(_OWORD *)(v34 + 16) = 0u;
        *(_OWORD *)(v34 + 32) = 0u;
        *(_OWORD *)v34 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v34, v35);
      }
    }
    v16 = *((_QWORD *)v15 + 382);
    if (a4)
      goto LABEL_15;
  }
  v37 = 0;
LABEL_18:
  HasStyle = WebCore::Editor::selectionHasStyle(v16, a2, (uint64_t)&v37);
LABEL_19:
  v18 = HasStyle;
  v19 = v37;
  v37 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v14);
    else
      *(_DWORD *)v19 -= 2;
  }
  return v18;
}

uint64_t WebCore::enabledCopy(WTF *a1, void *a2, _QWORD *a3)
{
  uint64_t v5;
  int v6;
  uint64_t result;
  WebCore::Document *v8;
  WebCore::Editor *v9;
  WebCore::Document *v10;
  WebCore::Editor *v11;
  WebCore::Editor *v12;
  uint64_t v13;
  WebCore::Editor *v14;
  void *v15;
  WebCore::Editor *v16;
  uint64_t v17;
  void *v18;

  if (((_DWORD)a2 - 1) >= 2)
  {
    if (!(_DWORD)a2)
      goto LABEL_12;
    return 0;
  }
  v5 = *((_QWORD *)a1 + 17);
  if ((*(_QWORD *)(v5 + 680) & 0x80000000000) != 0)
    goto LABEL_12;
  v6 = *(_DWORD *)(v5 + 320);
  if (!v6)
    goto LABEL_12;
  if (v6 != 2)
    return 0;
  result = WTF::isMainThread(a1);
  if (!(_DWORD)result)
    return result;
  {
    result = 0;
    WebCore::currentToken(void)::token = 0;
    return result;
  }
  if (!WebCore::currentToken(void)::token
    || *(_DWORD *)(WebCore::currentToken(void)::token + 68)
    || *(_BYTE *)(WebCore::currentToken(void)::token + 16) != 1)
  {
    return 0;
  }
LABEL_12:
  v8 = (WebCore::Document *)*((_QWORD *)a1 + 37);
  v9 = (WebCore::Editor *)*((_QWORD *)v8 + 382);
  if (!v9)
  {
    v11 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v11, v8);
    v12 = (WebCore::Editor *)*((_QWORD *)v8 + 382);
    *((_QWORD *)v8 + 382) = v11;
    if (v12)
    {
      WebCore::Editor::~Editor(v12, a2);
      if (*(_DWORD *)v13)
      {
        *(_QWORD *)(v13 + 496) = 0;
        *(_OWORD *)(v13 + 464) = 0u;
        *(_OWORD *)(v13 + 480) = 0u;
        *(_OWORD *)(v13 + 432) = 0u;
        *(_OWORD *)(v13 + 448) = 0u;
        *(_OWORD *)(v13 + 400) = 0u;
        *(_OWORD *)(v13 + 416) = 0u;
        *(_OWORD *)(v13 + 368) = 0u;
        *(_OWORD *)(v13 + 384) = 0u;
        *(_OWORD *)(v13 + 336) = 0u;
        *(_OWORD *)(v13 + 352) = 0u;
        *(_OWORD *)(v13 + 304) = 0u;
        *(_OWORD *)(v13 + 320) = 0u;
        *(_OWORD *)(v13 + 272) = 0u;
        *(_OWORD *)(v13 + 288) = 0u;
        *(_OWORD *)(v13 + 240) = 0u;
        *(_OWORD *)(v13 + 256) = 0u;
        *(_OWORD *)(v13 + 208) = 0u;
        *(_OWORD *)(v13 + 224) = 0u;
        *(_OWORD *)(v13 + 176) = 0u;
        *(_OWORD *)(v13 + 192) = 0u;
        *(_OWORD *)(v13 + 144) = 0u;
        *(_OWORD *)(v13 + 160) = 0u;
        *(_OWORD *)(v13 + 112) = 0u;
        *(_OWORD *)(v13 + 128) = 0u;
        *(_OWORD *)(v13 + 80) = 0u;
        *(_OWORD *)(v13 + 96) = 0u;
        *(_OWORD *)(v13 + 48) = 0u;
        *(_OWORD *)(v13 + 64) = 0u;
        *(_OWORD *)(v13 + 16) = 0u;
        *(_OWORD *)(v13 + 32) = 0u;
        *(_OWORD *)v13 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v13, a2);
      }
    }
    v9 = (WebCore::Editor *)*((_QWORD *)v8 + 382);
  }
  if ((WebCore::Editor::canDHTMLCopy(v9, (const WebCore::Position *)a2) & 1) != 0)
    return 1;
  v10 = (WebCore::Document *)*((_QWORD *)a1 + 37);
  if (!*((_QWORD *)v10 + 382))
  {
    v14 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v14, v10);
    v16 = (WebCore::Editor *)*((_QWORD *)v10 + 382);
    *((_QWORD *)v10 + 382) = v14;
    if (v16)
    {
      WebCore::Editor::~Editor(v16, v15);
      if (*(_DWORD *)v17)
      {
        *(_QWORD *)(v17 + 496) = 0;
        *(_OWORD *)(v17 + 464) = 0u;
        *(_OWORD *)(v17 + 480) = 0u;
        *(_OWORD *)(v17 + 432) = 0u;
        *(_OWORD *)(v17 + 448) = 0u;
        *(_OWORD *)(v17 + 400) = 0u;
        *(_OWORD *)(v17 + 416) = 0u;
        *(_OWORD *)(v17 + 368) = 0u;
        *(_OWORD *)(v17 + 384) = 0u;
        *(_OWORD *)(v17 + 336) = 0u;
        *(_OWORD *)(v17 + 352) = 0u;
        *(_OWORD *)(v17 + 304) = 0u;
        *(_OWORD *)(v17 + 320) = 0u;
        *(_OWORD *)(v17 + 272) = 0u;
        *(_OWORD *)(v17 + 288) = 0u;
        *(_OWORD *)(v17 + 240) = 0u;
        *(_OWORD *)(v17 + 256) = 0u;
        *(_OWORD *)(v17 + 208) = 0u;
        *(_OWORD *)(v17 + 224) = 0u;
        *(_OWORD *)(v17 + 176) = 0u;
        *(_OWORD *)(v17 + 192) = 0u;
        *(_OWORD *)(v17 + 144) = 0u;
        *(_OWORD *)(v17 + 160) = 0u;
        *(_OWORD *)(v17 + 112) = 0u;
        *(_OWORD *)(v17 + 128) = 0u;
        *(_OWORD *)(v17 + 80) = 0u;
        *(_OWORD *)(v17 + 96) = 0u;
        *(_OWORD *)(v17 + 48) = 0u;
        *(_OWORD *)(v17 + 64) = 0u;
        *(_OWORD *)(v17 + 16) = 0u;
        *(_OWORD *)(v17 + 32) = 0u;
        *(_OWORD *)v17 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v17, v18);
      }
    }
  }
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 16))(*a3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::enabledCopy(WebCore::LocalFrame &,WebCore::Event *,WebCore::EditorCommandSource)::$_0,BOOL,WebCore::Editor const&>::call(int a1, WebCore::Editor *this)
{
  return WebCore::Editor::canCopy(this, this);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::enabledCopyFont(WebCore::LocalFrame &,WebCore::Event *,WebCore::EditorCommandSource)::$_0,BOOL,WebCore::Editor const&>::call(uint64_t a1, const WebCore::Position *a2)
{
  _BYTE *v2;
  WebCore::Node *v3;
  void *v4;
  int v5;
  int v6;
  WebCore::Node *v7;
  void *v8;
  int v9;
  __int16 v10;
  _BOOL8 v11;
  uint64_t v12;
  unsigned int v13;
  void *v14;

  v2 = *(_BYTE **)(*(_QWORD *)(*((_QWORD *)a2 + 2) + 8) + 3064);
  if (!v2[153])
    return 0;
  v3 = WebCore::enclosingTextFormControl((WebCore *)(v2 + 120), a2);
  if (v3 && *(_QWORD *)(*((_QWORD *)v3 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    v5 = *((_DWORD *)v3 + 6);
    *((_DWORD *)v3 + 6) = v5 + 2;
    v6 = *(_DWORD *)(*((_QWORD *)v3 + 30) + 12);
    if (v5)
    {
      *((_DWORD *)v3 + 6) = v5;
    }
    else if ((*((_WORD *)v3 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v3, v4);
    }
    if (v6 == 2048)
    {
      v7 = WebCore::enclosingTextFormControl((WebCore *)(v2 + 120), (const WebCore::Position *)v4);
      if (!v7 || *(_QWORD *)(*((_QWORD *)v7 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
        return 0;
      v9 = *((_DWORD *)v7 + 6);
      *((_DWORD *)v7 + 6) = v9 + 2;
      v10 = *((_WORD *)v7 + 115);
      if (v9)
      {
        *((_DWORD *)v7 + 6) = v9;
      }
      else if ((*((_WORD *)v7 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v7, v8);
      }
      if ((v10 & 0x200) == 0)
        return 0;
    }
  }
  if (v2[153] == 2)
    return 1;
  v12 = *((_QWORD *)v2 + 15);
  if (!v12)
    return 0;
  v13 = v2[132] & 7;
  if (v13 > 4)
    return 0;
  if (((1 << v13) & 0x19) == 0)
  {
    v12 = *(_QWORD *)(v12 + 32);
    if (!v12)
      return 0;
  }
  *(_DWORD *)(v12 + 24) += 2;
  v11 = WebCore::Node::computeEditability(v12, 0, 0) != 0;
  if (*(_DWORD *)(v12 + 24) == 2)
  {
    if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v12, v14);
  }
  else
  {
    *(_DWORD *)(v12 + 24) -= 2;
  }
  return v11;
}

unsigned int *WebCore::executeInsertFragment(WebCore::Node *a1, uint64_t *a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  void *v5;
  unsigned int *result;
  WebCore::Node *v7;

  *((_DWORD *)a1 + 6) += 2;
  v7 = a1;
  v2 = *a2;
  *a2 = 0;
  v3 = (_DWORD *)WTF::fastMalloc((WTF *)0x1D8);
  v4 = WebCore::EditCommand::EditCommand((uint64_t)v3, (uint64_t *)&v7, 14);
  *(_OWORD *)(v4 + 248) = 0u;
  *(_OWORD *)(v4 + 264) = 0u;
  *(_QWORD *)v4 = off_1E33ADA18;
  *(_QWORD *)(v4 + 280) = 0;
  *(_DWORD *)(v4 + 288) = 0;
  *(_BYTE *)(v4 + 292) &= 0xF0u;
  *(_QWORD *)(v4 + 296) = 0;
  *(_DWORD *)(v4 + 304) = 0;
  *(_BYTE *)(v4 + 308) &= 0xF0u;
  *(_QWORD *)(v4 + 312) = 0;
  *(_DWORD *)(v4 + 320) = 0;
  *(_BYTE *)(v4 + 324) &= 0xF0u;
  *(_QWORD *)(v4 + 328) = 0;
  *(_DWORD *)(v4 + 336) = 0;
  *(_BYTE *)(v4 + 340) &= 0xF0u;
  *(_QWORD *)(v4 + 344) = 0;
  *(_DWORD *)(v4 + 352) = 0;
  *(_BYTE *)(v4 + 356) &= 0xF0u;
  *(_QWORD *)(v4 + 360) = 0;
  *(_DWORD *)(v4 + 368) = 0;
  *(_BYTE *)(v4 + 372) &= 0xF0u;
  *(_WORD *)(v4 + 376) = 1;
  *(_BYTE *)(v4 + 378) = *(_BYTE *)(v4 + 378) & 0xFC | 1;
  *(_QWORD *)(v4 + 384) = 0;
  *(_DWORD *)(v4 + 392) = 0;
  *(_BYTE *)(v4 + 396) &= 0xF0u;
  *(_QWORD *)(v4 + 400) = 0;
  *(_DWORD *)(v4 + 408) = 0;
  *(_BYTE *)(v4 + 412) &= 0xF0u;
  *(_DWORD *)(v4 + 423) = 0;
  *(_QWORD *)(v4 + 416) = 0;
  *(_QWORD *)(v4 + 432) = v2;
  *(_QWORD *)(v4 + 440) = 0;
  *(_QWORD *)(v4 + 448) = 0;
  *(_QWORD *)(v4 + 456) = 0;
  *(_BYTE *)(v4 + 464) = 1;
  *(_DWORD *)(v4 + 465) = 0;
  WebCore::CompositeEditCommand::apply((WebCore::CompositeEditCommand *)v4);
  if (v3[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  else
    --v3[2];
  result = (unsigned int *)v7;
  v7 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v5);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

BOOL WebCore::executeInsertNode(uint64_t a1, WebCore::Node **a2)
{
  WebCore::ContainerNode *v4;
  WTF::StringImpl *v5;
  int v6;
  WTF::StringImpl *v7;
  uint64_t v9;
  WTF::StringImpl *v10;
  unsigned __int8 v11;
  WebCore::ContainerNode *v12;

  WebCore::DocumentFragment::create(*(WebCore::DocumentFragment **)(a1 + 296), (uint64_t *)&v12);
  v4 = v12;
  WebCore::ContainerNode::appendChild((uint64_t)v12, *a2, (uint64_t)&v9);
  v6 = v11;
  if (!v11)
  {
    WebCore::executeInsertFragment(*(WebCore::Node **)(a1 + 296), (uint64_t *)&v12);
    v4 = v12;
LABEL_7:
    if (!v4)
      return v6 == 0;
    goto LABEL_8;
  }
  v7 = v10;
  v10 = 0;
  if (!v7)
    goto LABEL_7;
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::destroy(v7, v5);
    if (!v4)
      return v6 == 0;
  }
  else
  {
    *(_DWORD *)v7 -= 2;
    if (!v4)
      return v6 == 0;
  }
LABEL_8:
  if (*((_DWORD *)v4 + 6) == 2)
  {
    if ((*((_WORD *)v4 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v4, v5);
  }
  else
  {
    *((_DWORD *)v4 + 6) -= 2;
  }
  return v6 == 0;
}

uint64_t WebCore::verticalScrollDistance(WebCore *this, WebCore::LocalFrame *a2)
{
  uint64_t v2;
  int v3;
  WebCore::RenderBox *v4;
  uint64_t v5;
  int v8;
  WebCore::Scrollbar *v9;
  int v10;
  int v11;
  int v12;
  int v13;

  v2 = *(_QWORD *)(*((_QWORD *)this + 37) + 1248);
  if (!v2)
    return 0;
  v3 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v3 + 2;
  v4 = (WebCore::RenderBox *)(*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL);
  if (v4)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
    {
      if ((*(_BYTE *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) == 0)
        goto LABEL_5;
      ++*(_DWORD *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
      if (((unsigned __int16)*((_DWORD *)v4 + 24) >> 13) - 3 < 2
        || WebCore::Node::computeEditability(v2, 0, 1))
      {
        v8 = (int)WebCore::RenderBox::clientHeight(v4) / 64;
        v9 = (WebCore::Scrollbar *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)this + 36) + 64)
                                                                      + 488))(*((_QWORD *)this + 36) + 64);
        if (v8 >= SHIDWORD(v9))
          v10 = HIDWORD(v9);
        else
          v10 = v8;
        v11 = llroundf((float)v10 * 0.8);
        v12 = llroundf((float)(int)(v10 - WebCore::Scrollbar::maxOverlapBetweenPages(v9)));
        if (v11 > v12)
          v12 = v11;
        if (v12 <= 1)
          v5 = 1;
        else
          v5 = v12;
      }
      else
      {
        v5 = 0;
      }
      v13 = *((_DWORD *)v4 + 4);
      if (v13)
      {
        *((_DWORD *)v4 + 4) = v13 - 1;
        v3 = *(_DWORD *)(v2 + 24) - 2;
        if (*(_DWORD *)(v2 + 24) != 2)
          goto LABEL_6;
        goto LABEL_20;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x195AF425CLL);
  }
LABEL_5:
  v5 = 0;
  if (v3)
  {
LABEL_6:
    *(_DWORD *)(v2 + 24) = v3;
    return v5;
  }
LABEL_20:
  if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
  return v5;
}

WebCore::Document *WebCore::expandSelectionToGranularity(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  WebCore::Node *v12;
  WebCore::Document *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::Node *v18;
  WebCore::Node *v19;
  WebCore::Node *v20;
  WebCore::Node *v21;
  WebCore::Node *v22;
  WebCore::Node *v23;
  WebCore::Node *v24;
  WebCore::Node *v25;
  int v26;
  uint64_t v27;
  WebCore::Node *v28;
  WebCore::Node *v29;
  WebCore::Node *v30;
  WebCore::Node *v31;
  WebCore::Node *v32;
  WebCore::Node *v33;
  WebCore::Editor *v35;
  void *v36;
  WebCore::Editor *v37;
  uint64_t v38;
  void *v39;
  int v40;
  WebCore::Node *v41;
  int v42;
  WebCore::Node *v43;
  int v44;
  char v45;
  WebCore::Node *v46;
  int v47;
  WebCore::Node *v48;
  int v49;
  unsigned __int8 v50;
  WebCore::Node *v51;
  int v52;
  WebCore::Node *v53;
  int v54;
  char v55;
  uint64_t v56;
  int v57;
  char v58;
  uint64_t v59;
  int v60;
  char v61;
  uint64_t v62;
  int v63;
  char v64;
  uint64_t v65;
  int v66;
  char v67;
  uint64_t v68;
  int v69;
  char v70;
  uint64_t v71;
  int v72;
  char v73;
  __int16 v74;
  char v75;
  WebCore::Node *v76;
  int v77;
  WebCore::Node *v78;
  int v79;
  char v80;
  char v81;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064);
  v5 = *(_QWORD *)(v4 + 56);
  if (v5)
    *(_DWORD *)(v5 + 24) += 2;
  v56 = v5;
  v57 = *(_DWORD *)(v4 + 64);
  v58 = *(_BYTE *)(v4 + 68);
  v6 = *(_QWORD *)(v4 + 72);
  if (v6)
    *(_DWORD *)(v6 + 24) += 2;
  v59 = v6;
  v60 = *(_DWORD *)(v4 + 80);
  v61 = *(_BYTE *)(v4 + 84);
  v7 = *(_QWORD *)(v4 + 88);
  if (v7)
    *(_DWORD *)(v7 + 24) += 2;
  v62 = v7;
  v63 = *(_DWORD *)(v4 + 96);
  v64 = *(_BYTE *)(v4 + 100);
  v8 = *(_QWORD *)(v4 + 104);
  if (v8)
    *(_DWORD *)(v8 + 24) += 2;
  v65 = v8;
  v66 = *(_DWORD *)(v4 + 112);
  v67 = *(_BYTE *)(v4 + 116);
  v9 = *(_QWORD *)(v4 + 120);
  if (v9)
    *(_DWORD *)(v9 + 24) += 2;
  v68 = v9;
  v69 = *(_DWORD *)(v4 + 128);
  v70 = *(_BYTE *)(v4 + 132);
  v10 = *(_QWORD *)(v4 + 136);
  if (v10)
    *(_DWORD *)(v10 + 24) += 2;
  v71 = v10;
  v72 = *(_DWORD *)(v4 + 144);
  v73 = *(_BYTE *)(v4 + 148);
  v74 = *(_WORD *)(v4 + 152);
  v75 = *(_BYTE *)(v4 + 154);
  WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)&v56, &v51);
  if (HIBYTE(v74))
    WebCore::VisibleSelection::validate((uint64_t)&v56, a2);
  WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)&v56, &v46);
  if (!v50)
  {
    v13 = 0;
    goto LABEL_57;
  }
  v12 = v46;
  if (v46 == v48 && v47 == v49)
  {
    v13 = 0;
LABEL_51:
    v48 = 0;
    if (v12)
    {
      if (*((_DWORD *)v12 + 6) == 2)
      {
        if ((*((_WORD *)v12 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v12, v11);
      }
      else
      {
        *((_DWORD *)v12 + 6) -= 2;
      }
    }
    v31 = v46;
    v46 = 0;
    if (v31)
    {
      if (*((_DWORD *)v31 + 6) == 2)
      {
        if ((*((_WORD *)v31 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v31, v11);
      }
      else
      {
        *((_DWORD *)v31 + 6) -= 2;
      }
    }
    goto LABEL_57;
  }
  v14 = v74;
  v13 = *(WebCore::Document **)(a1 + 296);
  v15 = *((_QWORD *)v13 + 382);
  if (!v15)
    goto LABEL_91;
  while (1)
  {
    v16 = *(_QWORD *)(v15 + 8);
    v17 = v16 ? *(_QWORD *)(v16 + 8) : 0;
    if (v55)
    {
      v18 = v51;
      *((_DWORD *)v51 + 6) += 2;
      v76 = v18;
      v77 = v52;
      v19 = v53;
      *((_DWORD *)v53 + 6) += 2;
      v78 = v19;
      v79 = v54;
      v80 = 1;
      if (v50)
      {
        v20 = v46;
        *((_DWORD *)v46 + 6) += 2;
        v41 = v20;
        v42 = v47;
        v21 = v48;
        *((_DWORD *)v48 + 6) += 2;
        v43 = v21;
        v44 = v49;
        v45 = 1;
        v13 = (WebCore::Document *)(*(uint64_t (**)(uint64_t, WebCore::Node **, WebCore::Node **, BOOL, _QWORD))(*(_QWORD *)v17 + 112))(v17, &v76, &v41, v14 != 0, 0);
        if (v45)
        {
          v22 = v43;
          v43 = 0;
          if (v22)
          {
            if (*((_DWORD *)v22 + 6) == 2)
            {
              if ((*((_WORD *)v22 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v22, v11);
            }
            else
            {
              *((_DWORD *)v22 + 6) -= 2;
            }
          }
          v23 = v41;
          v41 = 0;
          if (v23)
          {
            if (*((_DWORD *)v23 + 6) == 2)
            {
              if ((*((_WORD *)v23 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v23, v11);
            }
            else
            {
              *((_DWORD *)v23 + 6) -= 2;
            }
          }
        }
        if (v80)
        {
          v24 = v78;
          v78 = 0;
          if (v24)
          {
            if (*((_DWORD *)v24 + 6) == 2)
            {
              if ((*((_WORD *)v24 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v24, v11);
            }
            else
            {
              *((_DWORD *)v24 + 6) -= 2;
            }
          }
          v25 = v76;
          v76 = 0;
          if (v25)
          {
            if (*((_DWORD *)v25 + 6) == 2)
            {
              if ((*((_WORD *)v25 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v25, v11);
            }
            else
            {
              *((_DWORD *)v25 + 6) -= 2;
            }
          }
        }
        v26 = v50;
        if (!(_DWORD)v13)
          goto LABEL_49;
        if (v50)
          break;
      }
    }
    __break(1u);
LABEL_91:
    v40 = v14;
    v35 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v35, v13);
    v37 = (WebCore::Editor *)*((_QWORD *)v13 + 382);
    *((_QWORD *)v13 + 382) = v35;
    if (v37)
    {
      WebCore::Editor::~Editor(v37, v36);
      if (*(_DWORD *)v38)
      {
        *(_QWORD *)(v38 + 496) = 0;
        *(_OWORD *)(v38 + 464) = 0u;
        *(_OWORD *)(v38 + 480) = 0u;
        *(_OWORD *)(v38 + 432) = 0u;
        *(_OWORD *)(v38 + 448) = 0u;
        *(_OWORD *)(v38 + 400) = 0u;
        *(_OWORD *)(v38 + 416) = 0u;
        *(_OWORD *)(v38 + 368) = 0u;
        *(_OWORD *)(v38 + 384) = 0u;
        *(_OWORD *)(v38 + 336) = 0u;
        *(_OWORD *)(v38 + 352) = 0u;
        *(_OWORD *)(v38 + 304) = 0u;
        *(_OWORD *)(v38 + 320) = 0u;
        *(_OWORD *)(v38 + 272) = 0u;
        *(_OWORD *)(v38 + 288) = 0u;
        *(_OWORD *)(v38 + 240) = 0u;
        *(_OWORD *)(v38 + 256) = 0u;
        *(_OWORD *)(v38 + 208) = 0u;
        *(_OWORD *)(v38 + 224) = 0u;
        *(_OWORD *)(v38 + 176) = 0u;
        *(_OWORD *)(v38 + 192) = 0u;
        *(_OWORD *)(v38 + 144) = 0u;
        *(_OWORD *)(v38 + 160) = 0u;
        *(_OWORD *)(v38 + 112) = 0u;
        *(_OWORD *)(v38 + 128) = 0u;
        *(_OWORD *)(v38 + 80) = 0u;
        *(_OWORD *)(v38 + 96) = 0u;
        *(_OWORD *)(v38 + 48) = 0u;
        *(_OWORD *)(v38 + 64) = 0u;
        *(_OWORD *)(v38 + 16) = 0u;
        *(_OWORD *)(v38 + 32) = 0u;
        *(_OWORD *)v38 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v38, v39);
      }
    }
    v15 = *((_QWORD *)v13 + 382);
    v14 = v40;
  }
  v27 = *(_QWORD *)(*(_QWORD *)(a1 + 296) + 3064);
  v28 = v46;
  *((_DWORD *)v46 + 6) += 2;
  v41 = v28;
  v42 = v47;
  v29 = v48;
  *((_DWORD *)v48 + 6) += 2;
  v43 = v29;
  v44 = v49;
  v45 = 1;
  if (*(_QWORD *)(*((_QWORD *)v28 + 5) + 8) != *(_QWORD *)(*((_QWORD *)v29 + 5) + 8))
  {
    v43 = 0;
LABEL_43:
    if (*((_DWORD *)v29 + 6) == 2)
    {
      if ((*((_WORD *)v29 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v29, v11);
    }
    else
    {
      *((_DWORD *)v29 + 6) -= 2;
    }
    goto LABEL_45;
  }
  WebCore::VisibleSelection::VisibleSelection((uint64_t)&v76, (uint64_t)&v41, v14 != 0, 0);
  if (v81)
    WebCore::FrameSelection::setSelection(v27, (uint64_t)&v76, 6u, 0, 0, 0, 0);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v76);
  if (!v45)
    goto LABEL_48;
  v29 = v43;
  v43 = 0;
  if (v29)
    goto LABEL_43;
LABEL_45:
  v30 = v41;
  v41 = 0;
  if (v30)
  {
    if (*((_DWORD *)v30 + 6) == 2)
    {
      if ((*((_WORD *)v30 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v30, v11);
    }
    else
    {
      *((_DWORD *)v30 + 6) -= 2;
    }
  }
LABEL_48:
  v26 = v50;
LABEL_49:
  if (v26)
  {
    v12 = v48;
    goto LABEL_51;
  }
LABEL_57:
  if (v55)
  {
    v32 = v53;
    v53 = 0;
    if (v32)
    {
      if (*((_DWORD *)v32 + 6) == 2)
      {
        if ((*((_WORD *)v32 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v32, v11);
      }
      else
      {
        *((_DWORD *)v32 + 6) -= 2;
      }
    }
    v33 = v51;
    v51 = 0;
    if (v33)
    {
      if (*((_DWORD *)v33 + 6) == 2)
      {
        if ((*((_WORD *)v33 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v33, v11);
      }
      else
      {
        *((_DWORD *)v33 + 6) -= 2;
      }
    }
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v56);
  return v13;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::EditorInternalCommand const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::EditorInternalCommand const*>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WebCore::EditorInternalCommand const*,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::EditorInternalCommand const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  const WTF::String *v8;
  uint64_t i;
  __int128 *v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 v17;
  WTF::StringImpl *v18;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (__int128 *)(v4 + 16 * i);
      if (*(_QWORD *)v10 != -1)
      {
        if (*(_QWORD *)v10)
        {
          v11 = *a1;
          if (*a1)
            v12 = *(_DWORD *)(v11 - 8);
          else
            v12 = 0;
          v13 = WTF::ASCIICaseInsensitiveHash::hash((WTF::ASCIICaseInsensitiveHash *)(v4 + 16 * i), v8);
          v14 = 0;
          do
          {
            v15 = v13 & v12;
            v13 = ++v14 + v15;
          }
          while (*(_QWORD *)(v11 + 16 * v15));
          v16 = (_QWORD *)(v11 + 16 * v15);
          *v16 = 0;
          v17 = *v10;
          *(_QWORD *)v10 = 0;
          *(_OWORD *)v16 = v17;
          v18 = *(WTF::StringImpl **)v10;
          *(_QWORD *)v10 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v8);
            else
              *(_DWORD *)v18 -= 2;
          }
        }
        else
        {
          *(_QWORD *)v10 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

unint64_t WebCore::computeOutsetFromInnerOuterRect(WebCore *this, const WebCore::LayoutRect *a2, const WebCore::LayoutRect *a3)
{
  unsigned int v3;
  int v4;
  BOOL v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;

  v3 = *((_DWORD *)this + 1);
  v4 = *((_DWORD *)a2 + 1);
  v5 = __OFSUB__(v3, v4);
  v6 = v3 - v4;
  v7 = (v3 >> 31) + 0x7FFFFFFF;
  if (!v5)
    v7 = v6;
  v8 = *((_DWORD *)a2 + 2);
  v9 = *((_DWORD *)this + 2);
  v5 = __OFSUB__(v8, v9);
  v10 = v8 - v9;
  v11 = (v8 >> 31) + 0x7FFFFFFF;
  if (!v5)
    v11 = v10;
  return v7 & ~(v7 >> 31) | ((unint64_t)(v11 & ~(v11 >> 31)) << 32);
}

uint64_t WebCore::Style::PseudoClassChangeInvalidation::PseudoClassChangeInvalidation(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  char v16;
  unsigned __int8 *v17;

  if ((*(_BYTE *)(a2 + 22) & 8) == 0)
    goto LABEL_20;
  v5 = *(uint64_t **)(a2 + 40);
  v6 = v5[1];
  if (!*(_QWORD *)(v6 + 1944) || *(_BYTE *)(v6 + 3405))
    goto LABEL_20;
  v7 = a3;
  if ((*(_BYTE *)(a2 + 70) & 4) != 0)
  {
    v11 = *v5;
    v12 = (*(_WORD *)(v11 + 28) & 0x80) == 0 || v11 == 0;
    v13 = v11 + 216;
    if (v12)
      v13 = v6 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v13 + 236))
      goto LABEL_20;
  }
  v8 = *(_QWORD *)(v6 + 1272);
  if (v8)
  {
    if ((*(_BYTE *)(v8 + 70) & 4) != 0)
    {
LABEL_20:
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 8) = a2;
      return a1;
    }
  }
  if (!*(_BYTE *)(v6 + 3362)
    && ((v9 = *(unsigned __int8 *)(v6 + 3390), *(_BYTE *)(v6 + 3390))
     || (*(_BYTE *)(v6 + 70) & 8) != 0
     || *(_QWORD *)(v6 + 1560)
     || (v10 = *(_QWORD *)(v6 + 1328), *(_BYTE *)(v10 + 233))
     || *(_BYTE *)(v10 + 234)))
  {
    v14 = *(unsigned __int8 *)(v6 + 3391);
    if (v9)
      v15 = v14 == 0;
    else
      v15 = 0;
    v16 = !v15;
    *(_BYTE *)a1 = v16;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = a2;
    if (v15)
      return a1;
  }
  else
  {
    *(_BYTE *)a1 = 1;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = a2;
  }
  if (a4)
  {
    v17 = &a3[2 * a4];
    do
    {
      WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation((uint64_t *)a1, (WTF::StringImpl *)*v7, v7[1] & 1, 0);
      v7 += 2;
    }
    while (v7 != v17);
    a2 = *(_QWORD *)(a1 + 8);
  }
  WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(a2, (unsigned __int8 **)(a1 + 16));
  return a1;
}

WebCore::RenderRange *WebCore::RenderRange::RenderRange(WebCore::RenderRange *this, WebCore::RenderObject *a2, WebCore::RenderObject *a3, int a4, int a5)
{
  WebCore::RenderRange *v5;
  uint64_t v6;
  uint64_t v7;
  void *v9;
  WTF *v10;
  void *v11;
  WTF *v12;
  WebCore::RenderObject *v14;
  WebCore::RenderObject *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  WebCore::RenderRange *v21;

  v5 = this;
  if (!a2)
  {
    v6 = 0;
    goto LABEL_3;
  }
  v14 = a3;
  v18 = a4;
  v16 = a5;
  v6 = *((_QWORD *)a2 + 1);
  if (!v6)
  {
    v6 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v6 = 1;
    *(_QWORD *)(v6 + 8) = a2;
    v10 = (WTF *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v6;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
      {
        WTF::fastFree(v10, v9);
        v6 = *((_QWORD *)a2 + 1);
        if (!v6)
          goto LABEL_8;
      }
      else
      {
        --*(_DWORD *)v10;
      }
    }
  }
  ++*(_DWORD *)v6;
LABEL_8:
  a5 = v16;
  a4 = v18;
  v5 = this;
  a3 = v14;
LABEL_3:
  *(_QWORD *)v5 = v6;
  if (a3)
  {
    v21 = v5;
    v19 = a4;
    v17 = a5;
    v15 = a3;
    v7 = *((_QWORD *)a3 + 1);
    if (!v7)
    {
      v7 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v7 = 1;
      *(_QWORD *)(v7 + 8) = v15;
      v12 = (WTF *)*((_QWORD *)v15 + 1);
      *((_QWORD *)v15 + 1) = v7;
      if (v12)
      {
        if (*(_DWORD *)v12 == 1)
        {
          WTF::fastFree(v12, v11);
          v7 = *((_QWORD *)v15 + 1);
          if (!v7)
            goto LABEL_11;
        }
        else
        {
          --*(_DWORD *)v12;
        }
      }
    }
    ++*(_DWORD *)v7;
LABEL_11:
    a5 = v17;
    a4 = v19;
    v5 = v21;
    goto LABEL_5;
  }
  v7 = 0;
LABEL_5:
  *((_QWORD *)v5 + 1) = v7;
  *((_DWORD *)v5 + 4) = a4;
  *((_DWORD *)v5 + 5) = a5;
  return v5;
}

WTF *WTF::RefCounted<WebCore::EditingStyle>::deref(WTF *this, WTF::StringImpl *a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD **v6;
  _DWORD *v7;
  WTF *v8;
  uint64_t v10;

  v2 = this;
  if (*(_DWORD *)this == 1)
  {
    v3 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 1)
      {
        v4 = *(unsigned int *)(v3 + 28);
        if ((_DWORD)v4)
        {
          v5 = 16 * v4;
          v6 = (_DWORD **)(*(_QWORD *)(v3 + 16) + 8);
          do
          {
            v7 = *v6;
            *v6 = 0;
            if (v7)
            {
              if (*v7 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, a2);
              else
                *v7 -= 2;
            }
            v6 += 2;
            v5 -= 16;
          }
          while (v5);
        }
        v8 = *(WTF **)(v3 + 16);
        if ((WTF *)(v3 + 32) != v8 && v8 != 0)
        {
          *(_QWORD *)(v3 + 16) = 0;
          *(_DWORD *)(v3 + 24) = 0;
          WTF::fastFree(v8, a2);
        }
        v10 = *(_QWORD *)(v3 + 8);
        *(_QWORD *)(v3 + 8) = 0;
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        WTF::fastFree((WTF *)v3, a2);
      }
      else
      {
        --*(_DWORD *)v3;
      }
    }
    return (WTF *)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

unint64_t WTF::Vector<WebCore::QualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::QualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::QualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::QualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  WTF *v11;
  void *v12;

  if (*(unsigned int *)(result + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = (_QWORD *)result;
        v8 = 8 * v5;
        v9 = (uint64_t *)v4;
        do
        {
          v10 = *v9;
          *v9 = 0;
          *v7 = v10;
          result = *v9;
          *v9 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)result);
              result = WTF::fastFree(v11, v12);
            }
            else
            {
              --*(_DWORD *)result;
            }
          }
          ++v7;
          ++v9;
          v8 -= 8;
        }
        while (v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

WTF *WebCore::diffTextDecorations(uint64_t a1, unsigned int a2, uint64_t a3)
{
  WTF *result;
  WTF::StringImpl *v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _DWORD **v17;
  _DWORD *v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  WTF *v23;
  WTF *v24;
  int v25;
  uint64_t v26;
  WTF *v27;
  WTF *v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF *v34;
  _DWORD *v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  unsigned int v43;
  WTF *v44;
  WTF *v45;
  unsigned int v46;
  WTF::StringBuilder *v47;
  WTF::String *v48;
  __n128 v49;
  _DWORD *v50;
  uint64_t IsImportant;
  WTF::StringImpl *v52;
  WTF *v53;
  uint64_t v54;
  _DWORD *v55;
  WTF *v56;
  WTF *v58;
  uint64_t v59;
  _DWORD *v60;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF *v66;
  int v67;
  unsigned int v68;
  _BYTE v69[32];
  WTF *v70;
  uint64_t v71;
  _BYTE v72[32];
  uint64_t v73;
  _DWORD *v74;
  const WebCore::CSSLinearGradientValue **v75[2];

  result = (WTF *)WebCore::StyleProperties::getPropertyCSSValue(a1, a2, &v73);
  v9 = v73;
  if (v73 && ((*(unsigned __int16 *)(v73 + 4) | (*(unsigned __int8 *)(v73 + 6) << 16)) & 0x3F800) != 0x1D800)
  {
    v73 = 0;
    if (*(_DWORD *)v9 == 2)
      result = (WTF *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
    v9 = 0;
    if (!a3)
    {
LABEL_16:
      if (!v9)
        return result;
      goto LABEL_108;
    }
  }
  else
  {
    v73 = 0;
    if (!a3)
      goto LABEL_16;
  }
  if (((*(unsigned __int16 *)(a3 + 4) | (*(unsigned __int8 *)(a3 + 6) << 16)) & 0x3F800) == 0x1D800)
    v10 = a3;
  else
    v10 = 0;
  if (!v9 || !v10)
    goto LABEL_16;
  v64 = a1;
  v65 = v10;
  v70 = (WTF *)v72;
  v71 = 4;
  v11 = *(unsigned int *)(v9 + 8);
  if (v11 >= 5)
  {
    if (v11 >> 29)
    {
LABEL_115:
      __break(0xC471u);
      JUMPOUT(0x195AF5528);
    }
    v12 = (WTF *)WTF::fastMalloc((WTF *)(8 * v11));
    LODWORD(v71) = v11;
    v70 = v12;
    LODWORD(v11) = *(_DWORD *)(v9 + 8);
  }
  else
  {
    v12 = (WTF *)v72;
  }
  if ((_DWORD)v11)
  {
    v13 = 0;
    v14 = 0;
    v15 = *(_QWORD *)(v9 + 48);
    v16 = HIDWORD(v71);
    do
    {
      if (v13 > 3)
      {
        if (v11 <= v13)
          goto LABEL_115;
        v17 = (_DWORD **)(v15 + 8 * (v14 - 4));
      }
      else
      {
        v17 = (_DWORD **)(v9 + 16 + 8 * v14);
      }
      v18 = *v17;
      *v18 += 2;
      *((_QWORD *)v12 + v16++) = v18;
      HIDWORD(v71) = v16;
      v13 = v14 + 1;
      v14 = (v14 + 1);
    }
    while ((_DWORD)v11 != v13);
  }
  v63 = v9;
  v19 = *(_DWORD *)(v65 + 8);
  if (v19)
  {
    v20 = 0;
    v21 = 0;
    do
    {
      if (v20 > 3)
      {
        if (*(_DWORD *)(v65 + 8) <= v20)
        {
          __break(0xC471u);
          JUMPOUT(0x195AF5548);
        }
        v22 = (uint64_t *)(*(_QWORD *)(v65 + 48) + 8 * (v21 - 4));
      }
      else
      {
        v22 = (uint64_t *)(v65 + 16 + 8 * v21);
      }
      v23 = v70;
      v24 = (WTF *)((char *)v70 + 8 * HIDWORD(v71));
      if (HIDWORD(v71))
      {
        v25 = 0;
        v26 = *v22;
        v27 = (WTF *)((char *)v70 + 8 * HIDWORD(v71));
        v28 = v27;
        do
        {
          v29 = *(_QWORD *)v23;
          v30 = *(unsigned __int16 *)(v26 + 4) | (*(unsigned __int8 *)(v26 + 6) << 16);
          v31 = *(unsigned __int16 *)(*(_QWORD *)v23 + 4) | (*(unsigned __int8 *)(*(_QWORD *)v23 + 6) << 16);
          if (((v31 ^ v30) & 0x3F800) != 0)
          {
            if ((v30 & 0x3F800) == 0x1D800)
            {
              v36 = v26;
LABEL_50:
              v32 = v36;
              while (*(_DWORD *)(v32 + 8) == 1)
              {
                v32 = *(_QWORD *)(v32 + 16);
                v37 = *(unsigned __int16 *)(v32 + 4) | (*(unsigned __int8 *)(v32 + 6) << 16);
                if (((v37 ^ v31) & 0x3F800) == 0)
                {
                  v74 = (_DWORD *)v29;
                  v75[0] = (const WebCore::CSSLinearGradientValue **)&v74;
                  goto LABEL_36;
                }
                if ((v37 & 0x3F800) != 0x1D800)
                {
                  v38 = v31 & 0x3F800;
                  v31 = *(unsigned __int16 *)(v32 + 4) | (*(unsigned __int8 *)(v32 + 6) << 16);
                  v36 = v29;
                  v29 = v32;
                  if (v38 == 120832)
                    goto LABEL_50;
                  break;
                }
              }
            }
            else if ((v31 & 0x3F800) == 0x1D800)
            {
              v39 = v26;
LABEL_58:
              v40 = v29;
              while (*(_DWORD *)(v40 + 8) == 1)
              {
                v40 = *(_QWORD *)(v40 + 16);
                v41 = *(unsigned __int16 *)(v40 + 4) | (*(unsigned __int8 *)(v40 + 6) << 16);
                if (((v41 ^ v30) & 0x3F800) == 0)
                {
                  v74 = (_DWORD *)v39;
                  v75[0] = (const WebCore::CSSLinearGradientValue **)&v74;
                  if (_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v40, v75, v8))goto LABEL_37;
                  break;
                }
                if ((v41 & 0x3F800) != 0x1D800)
                {
                  v42 = v30 & 0x3F800;
                  v30 = *(unsigned __int16 *)(v40 + 4) | (*(unsigned __int8 *)(v40 + 6) << 16);
                  v29 = v39;
                  v39 = v40;
                  if (v42 == 120832)
                    goto LABEL_58;
                  break;
                }
              }
            }
          }
          else
          {
            v74 = *(_DWORD **)v23;
            v75[0] = (const WebCore::CSSLinearGradientValue **)&v74;
            v32 = v26;
LABEL_36:
            if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v32, v75, v8) & 1) != 0)
            {
LABEL_37:
              v34 = v23;
              if (v28 != (WTF *)((char *)v70 + 8 * HIDWORD(v71)))
              {
                if (v27 == v23)
                {
                  v34 = v28;
                }
                else
                {
                  memmove(v28, v27, v23 - v27);
                  v34 = (WTF *)((char *)v28 + v23 - v27);
                }
              }
              v35 = *(_DWORD **)v23;
              *(_QWORD *)v23 = 0;
              v27 = (WTF *)((char *)v23 + 8);
              if (v35)
              {
                if (*v35 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v35, v33);
                else
                  *v35 -= 2;
              }
              ++v25;
              v28 = v34;
            }
          }
          v23 = (WTF *)((char *)v23 + 8);
        }
        while (v23 < v24);
        v23 = v70;
        v43 = HIDWORD(v71);
        v24 = v28;
      }
      else
      {
        v43 = 0;
        v25 = 0;
        v27 = v70;
      }
      v44 = (WTF *)((char *)v23 + 8 * v43);
      if (v27 != v44)
      {
        memmove(v24, v27, v44 - v27);
        v43 = HIDWORD(v71);
      }
      HIDWORD(v71) = v43 - v25;
      v20 = v21 + 1;
      v21 = (v21 + 1);
    }
    while (v19 != v20);
  }
  v66 = (WTF *)v69;
  v67 = 4;
  v45 = v70;
  if (v70 == (WTF *)v72)
  {
    v46 = HIDWORD(v71);
    memcpy(v69, v72, 8 * HIDWORD(v71));
  }
  else
  {
    v70 = (WTF *)v72;
    v66 = v45;
    v62 = v71;
    v46 = HIDWORD(v71);
    LODWORD(v71) = 4;
    v67 = v62;
  }
  HIDWORD(v71) = 0;
  v68 = v46;
  WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v66, (uint64_t *)&v74);
  v50 = v74;
  if (v74[2])
  {
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)v75, (uint64_t)v74, v47, v48, v49);
    IsImportant = WebCore::StyleProperties::propertyIsImportant(v64, a2);
    WebCore::MutableStyleProperties::setProperty(v64, a2, (uint64_t)v75, IsImportant, 0);
    v52 = (WTF::StringImpl *)v75[0];
    v75[0] = 0;
    v9 = v63;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2)
        WTF::StringImpl::destroy(v52, v7);
      else
        *(_DWORD *)v52 -= 2;
    }
  }
  else
  {
    WebCore::MutableStyleProperties::removeProperty(v64, (WTF::StringImpl *)a2, 0, v48, v49);
    v9 = v63;
  }
  if (*v50 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v50, v7);
  else
    *v50 -= 2;
  if (v68)
  {
    v53 = v66;
    v54 = 8 * v68;
    do
    {
      v55 = *(_DWORD **)v53;
      *(_QWORD *)v53 = 0;
      if (v55)
      {
        if (*v55 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v55, v7);
        else
          *v55 -= 2;
      }
      v53 = (WTF *)((char *)v53 + 8);
      v54 -= 8;
    }
    while (v54);
  }
  v56 = v66;
  if (v69 != (_BYTE *)v66 && v66 != 0)
  {
    v66 = 0;
    v67 = 0;
    WTF::fastFree(v56, v7);
  }
  if (HIDWORD(v71))
  {
    v58 = v70;
    v59 = 8 * HIDWORD(v71);
    do
    {
      v60 = *(_DWORD **)v58;
      *(_QWORD *)v58 = 0;
      if (v60)
      {
        if (*v60 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v60, v7);
        else
          *v60 -= 2;
      }
      v58 = (WTF *)((char *)v58 + 8);
      v59 -= 8;
    }
    while (v59);
  }
  result = v70;
  if (v72 != (_BYTE *)v70 && v70 != 0)
  {
    v70 = 0;
    LODWORD(v71) = 0;
    result = (WTF *)WTF::fastFree(result, v7);
  }
LABEL_108:
  if (*(_DWORD *)v9 == 2)
    return (WTF *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v9, v7);
  *(_DWORD *)v9 -= 2;
  return result;
}

BOOL WebCore::fontWeightIsBold<WebCore::MutableStyleProperties>(uint64_t a1)
{
  WTF::StringImpl *v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t *v6;
  double v7;
  float v8;
  _BOOL8 v9;
  int v10;
  int v11;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;

  WebCore::StyleProperties::getPropertyCSSValue(a1, 28, &v15);
  v2 = v15;
  if (!v15)
    return 0;
  v3 = *(unsigned __int16 *)(v15 + 4) | (*(unsigned __int8 *)(v15 + 6) << 16);
  v4 = *(_DWORD *)v15;
  if ((v3 & 0x3F800) == 0)
  {
    *(_DWORD *)v15 = v4 + 2;
    v5 = v3 & 0x7F;
    if (v5 == 80)
    {
      v6 = (uint64_t *)(v2 + 8);
      v10 = *(unsigned __int16 *)(v2 + 8);
      if ((v10 - 1) < 5 || v10 == 90)
        goto LABEL_15;
      if (v10 == 91)
        goto LABEL_13;
      if ((v10 - 16) < 0x1A)
      {
LABEL_15:
        v9 = 0;
LABEL_16:
        v4 = *(_DWORD *)v2 - 2;
        if (*(_DWORD *)v2 == 2)
        {
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v2, v1);
          v4 = *(_DWORD *)v2;
        }
        else
        {
          *(_DWORD *)v2 = v4;
        }
        goto LABEL_19;
      }
    }
    else
    {
      v6 = (uint64_t *)(v2 + 8);
      if (v5 == 73)
      {
        v13 = *v6;
        v16 = 0;
        v14 = WebCore::CSSCalcValue::doubleValue(v13, (uint64_t)&v16);
        if (v16)
          WTF::fastFree((WTF *)(v16 - 16), v1);
        v7 = v14;
LABEL_6:
        if (v7 < 3.40282347e38)
        {
          if (v7 > -3.40282347e38)
          {
            v8 = v7;
            v9 = v8 >= 600.0;
            goto LABEL_16;
          }
          goto LABEL_15;
        }
LABEL_13:
        v9 = 1;
        goto LABEL_16;
      }
    }
    v7 = *(double *)v6;
    goto LABEL_6;
  }
  v9 = 0;
LABEL_19:
  v11 = v4 - 2;
  if (v11)
    *(_DWORD *)v2 = v11;
  else
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v2, v1);
  return v9;
}

WTF::StringImpl *WebCore::backgroundColorFromStyle<WebCore::MutableStyleProperties>(uint64_t *a1, uint64_t a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  WTF::StringBuilder *v5;
  WTF::String *v6;
  __n128 v7;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  WTF::StringImpl *v20;

  result = (WTF::StringImpl *)WebCore::StyleProperties::getPropertyCSSValue(a2, 61, &v19);
  v8 = (_DWORD *)v19;
  if (!v19 || (v9 = *(unsigned __int16 *)(v19 + 4) | (*(unsigned __int8 *)(v19 + 6) << 16), (v9 & 0x3F800) != 0))
  {
    *a1 = 0x1104000000000000;
    goto LABEL_4;
  }
  if ((v9 & 0x3F87F) == 0x18)
  {
    v10 = *(_QWORD *)(v19 + 8);
    *a1 = v10;
    if ((v10 & 0x8000000000000) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
      v8 = (_DWORD *)v19;
LABEL_4:
      v19 = 0;
      if (!v8)
        return result;
      goto LABEL_5;
    }
  }
  else
  {
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v20, v19, v5, v6, v7);
    WebCore::CSSParser::parseColorWithoutContext((unsigned int **)&v20, 0, a1, v13, v14, v15, v16, v17, v18);
    result = v20;
    v20 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  v19 = 0;
LABEL_5:
  if (*v8 == 2)
    return (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, v4);
  *v8 -= 2;
  return result;
}

uint64_t WebCore::identifierForStyleProperty<WebCore::ComputedStyleExtractor>(uint64_t a1, uint64_t a2)
{
  int v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  int v5;
  double v6;
  unsigned __int16 v7;
  double v8;
  _DWORD *v9;
  uint64_t v11;

  v2 = a2;
  WebCore::ComputedStyleExtractor::propertyValue(a1, a2, 1, 0, &v11);
  v4 = v11;
  if (!v11)
    return 0;
  v5 = *(unsigned __int16 *)(v11 + 4) | (*(unsigned __int8 *)(v11 + 6) << 16);
  if ((v5 & 0x3F800) == 0x12800)
  {
    v6 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(*(_QWORD *)(v11 + 8), 0xCu));
    if (!(_BYTE)v3)
      v6 = 0.0;
    if (v6 < 14.0)
      v7 = 90;
    else
      v7 = 47;
    goto LABEL_23;
  }
  if ((v5 & 0x3F800) != 0)
  {
    v7 = 0;
    goto LABEL_23;
  }
  *(_DWORD *)v11 += 2;
  if (v2 != 28)
    goto LABEL_14;
  v8 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(v4, 1u));
  if (!(_BYTE)v3)
    v8 = 0.0;
  if (v8 < 600.0)
  {
    LOWORD(v5) = *(_WORD *)(v4 + 4);
LABEL_14:
    if ((v5 & 0x7F) == 0x50)
    {
      if (*(_WORD *)(v4 + 8) == 48)
        v7 = 47;
      else
        v7 = *(_WORD *)(v4 + 8);
    }
    else
    {
      v7 = 0;
    }
    goto LABEL_20;
  }
  v7 = 91;
LABEL_20:
  if (*(_DWORD *)v4 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v4, v3);
  else
    *(_DWORD *)v4 -= 2;
LABEL_23:
  v9 = (_DWORD *)v11;
  v11 = 0;
  if (v9)
  {
    if (*v9 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v3);
    else
      *v9 -= 2;
  }
  return v7;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::Editor::*&)(void),WebCore::Editor*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t *WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(uint64_t *result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;

  v2 = *((unsigned int *)result + 3);
  if ((_DWORD)v2)
  {
    v3 = *result;
    v4 = *result + 32 * v2;
    do
    {
      v5 = *(_QWORD *)(v3 + 16);
      if ((v5 & 0x8000000000000) != 0)
      {
        v9 = v4;
        v10 = v3;
        v11 = result;
        v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
        do
        {
          v7 = __ldaxr(v6);
          v8 = --v7 == 0;
        }
        while (__stlxr(v7, v6));
        v3 = v10;
        if (v8)
        {
          atomic_store(1u, v6);
          WTF::fastFree((WTF *)v6, a2);
          v4 = v9;
          v3 = v10;
          result = v11;
        }
      }
      v3 += 32;
    }
    while (v3 != v4);
  }
  *((_DWORD *)result + 3) = 0;
  return result;
}

uint64_t *WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(uint64_t *result, void *a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  BOOL v9;
  unsigned int *v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;

  v2 = *((_DWORD *)result + 3);
  if (v2)
  {
    v3 = *result;
    v4 = *result + 40 * v2;
    do
    {
      if (*(_BYTE *)(v3 + 32))
      {
        v5 = *(_QWORD *)(v3 + 24);
        if ((v5 & 0x8000000000000) != 0)
        {
          v13 = v4;
          v15 = v3;
          v17 = result;
          v7 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
          do
          {
            v8 = __ldaxr(v7);
            v9 = --v8 == 0;
          }
          while (__stlxr(v8, v7));
          v3 = v15;
          if (v9)
          {
            atomic_store(1u, v7);
            WTF::fastFree((WTF *)v7, a2);
            v4 = v13;
            v3 = v15;
            result = v17;
          }
        }
      }
      if (*(_BYTE *)(v3 + 16))
      {
        v6 = *(_QWORD *)(v3 + 8);
        if ((v6 & 0x8000000000000) != 0)
        {
          v14 = v4;
          v16 = v3;
          v18 = result;
          v10 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
          do
          {
            v11 = __ldaxr(v10);
            v12 = --v11 == 0;
          }
          while (__stlxr(v11, v10));
          v3 = v16;
          if (v12)
          {
            atomic_store(1u, v10);
            WTF::fastFree((WTF *)v10, a2);
            v4 = v14;
            v3 = v16;
            result = v18;
          }
        }
      }
      v3 += 40;
    }
    while (v3 != v4);
  }
  *((_DWORD *)result + 3) = 0;
  return result;
}

WTF::StringImpl *WTF::VectorTypeOperations<WebCore::TextList>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;

  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      result = v3[1];
      v3[1] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 += 3;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

WebCore::Font *WTF::RefCounted<WebCore::Font>::deref(WebCore::Font *result)
{
  WTF *v1;
  void *v2;

  if (*(_DWORD *)result == 1)
  {
    WebCore::Font::~Font(result);
    return (WebCore::Font *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  WTF **v11;
  unsigned int v12;
  WTF *v13;
  int v14;
  unsigned int v15;
  int v16;
  char v17;

  v3 = *a1;
  v4 = *((unsigned int *)a1 + 2);
  if (!*a1)
    return 8 * v4;
  v7 = v4 - 1;
  v8 = *((_DWORD *)a1 + 4);
  v9 = *((_DWORD *)*a2 + 4);
  if (v9 < 0x100)
  {
    v10 = WTF::StringImpl::hashSlowCase(*a2);
    v3 = *a1;
  }
  else
  {
    v10 = v9 >> 8;
  }
  v12 = (v10 ^ v8) & v7;
  v11 = (WTF **)(v3 + 8 * v12);
  v13 = *v11;
  if (*v11)
  {
    v14 = -1;
    while (1)
    {
      v15 = *((_DWORD *)v13 + 4);
      v16 = v15 < 0x100 ? WTF::StringImpl::hashSlowCase(v13) : v15 >> 8;
      if (++v14 > ((v12 + v4 - ((v16 ^ v8) & v7)) & v7))
        break;
      if (v16 == v10)
      {
        v17 = WTF::equal(*v11, *a2, a3);
        v3 = *a1;
        if ((v17 & 1) != 0)
          return (uint64_t)v11;
      }
      else
      {
        v3 = *a1;
      }
      v12 = (v12 + 1) & v7;
      v11 = (WTF **)(v3 + 8 * v12);
      v13 = *v11;
      if (!*v11)
        return v3 + 8 * *((unsigned int *)a1 + 2);
    }
    v3 = *a1;
  }
  return v3 + 8 * *((unsigned int *)a1 + 2);
}

uint64_t WTF::tryMakeAtomStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(uint64_t result, uint64_t a2, int8x16_t *__src, unsigned int a4)
{
  _QWORD *v7;
  int v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  int v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int16 v25;
  uint64_t v26;
  WTF::AtomStringImpl *__dst[17];
  int8x16x2_t v28;
  int8x16x2_t v29;
  int8x16x2_t v30;

  v7 = (_QWORD *)result;
  __dst[16] = *(WTF::AtomStringImpl **)MEMORY[0x1E0C80C00];
  if (a2)
    v8 = *(_DWORD *)(a2 + 4);
  else
    v8 = 0;
  if (((v8 | a4) & 0x80000000) != 0)
    goto LABEL_27;
  result = v8 + a4;
  if (__OFADD__(v8, a4))
    goto LABEL_27;
  if (!a2)
  {
    if (result < 0x40)
    {
      v9 = 0;
LABEL_11:
      if (a4)
      {
        v11 = (char *)__dst + v9;
        if (a4 == 1)
          *v11 = __src->i8[0];
        else
          memcpy(v11, __src, a4);
      }
      return WTF::AtomStringImpl::add();
    }
    goto LABEL_18;
  }
  if ((*(_BYTE *)(a2 + 16) & 4) != 0)
  {
    if (result < 0x40)
    {
      v9 = *(unsigned int *)(a2 + 4);
      if ((_DWORD)v9)
      {
        v10 = *(_BYTE **)(a2 + 8);
        if ((_DWORD)v9 == 1)
          LOBYTE(__dst[0]) = *v10;
        else
          memcpy(__dst, v10, *(unsigned int *)(a2 + 4));
      }
      goto LABEL_11;
    }
LABEL_18:
    v12 = 1;
    goto LABEL_19;
  }
  if (result < 0x40)
  {
    v26 = a2;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v26, (char *)__dst);
    v14 = v26;
    if (v26)
      v14 = *(unsigned int *)(v26 + 4);
    v15 = (char *)__dst + 2 * v14;
    v16 = &v15[2 * a4];
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      v17 = &v15[2 * (a4 & 0xFFFFFFC0)];
      v18 = 0uLL;
      do
      {
        v28.val[0] = *__src;
        v19 = __src[1];
        v29.val[0] = __src[2];
        v20 = __src[3];
        __src += 4;
        v21 = v20;
        v29.val[1] = 0uLL;
        v30.val[0] = v19;
        v28.val[1] = 0uLL;
        v22 = v15;
        vst2q_s8(v22, v28);
        v22 += 32;
        v30.val[1] = 0uLL;
        vst2q_s8(v22, v30);
        v23 = v15 + 64;
        vst2q_s8(v23, v29);
        v24 = v15 + 96;
        vst2q_s8(v24, *(int8x16x2_t *)(&v18 - 1));
        v15 += 128;
      }
      while (v15 != v17);
      v15 = v17;
    }
    while (v15 != v16)
    {
      v25 = __src->u8[0];
      __src = (int8x16_t *)((char *)__src + 1);
      *(_WORD *)v15 = v25;
      v15 += 2;
    }
    return WTF::AtomStringImpl::add();
  }
  v12 = 0;
LABEL_19:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(result, v12, a2, __src, a4, __dst);
  result = (uint64_t)__dst[0];
  if (!__dst[0])
  {
LABEL_27:
    *v7 = 0;
    return result;
  }
  if ((*((_BYTE *)__dst[0] + 16) & 0x10) != 0)
  {
    *(_DWORD *)__dst[0] += 2;
    *v7 = result;
    __dst[0] = 0;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase(__dst[0], v13);
    result = (uint64_t)__dst[0];
    __dst[0] = 0;
    if (!result)
      return result;
  }
  if (*(_DWORD *)result == 2)
    return WTF::StringImpl::destroy((WTF::StringImpl *)result, v13);
  *(_DWORD *)result -= 2;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FrameSelection::setSelectionWithoutUpdatingAppearance(WebCore::VisibleSelection const&,WTF::OptionSet<WebCore::FrameSelection::SetSelectionOption>,WebCore::FrameSelection::CursorAlignOnScroll,WebCore::TextGranularity)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a1[1];
  *a1 = &off_1E33ACCC8;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FrameSelection::setSelectionWithoutUpdatingAppearance(WebCore::VisibleSelection const&,WTF::OptionSet<WebCore::FrameSelection::SetSelectionOption>,WebCore::FrameSelection::CursorAlignOnScroll,WebCore::TextGranularity)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33ACCC8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::FrameSelection::setSelectionWithoutUpdatingAppearance(WebCore::VisibleSelection const&,WTF::OptionSet<WebCore::FrameSelection::SetSelectionOption>,WebCore::FrameSelection::CursorAlignOnScroll,WebCore::TextGranularity)::$_0,void>::call(unsigned int *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _BOOL4 v9;
  _DWORD *v10;
  void *v11;

  v1 = *((_QWORD *)result + 1);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      *(_DWORD *)(v2 + 24) += 2;
      *(_WORD *)(*(_QWORD *)(v2 + 3064) + 256) &= ~0x80u;
      v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v3 || (v4 = *(_QWORD *)(v3 + 96)) == 0)
        v4 = WebCore::threadGlobalDataSlow((WebCore *)result);
      v5 = *(_QWORD *)(v4 + 40);
      if (!v5)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v4);
        v5 = *(_QWORD *)(v4 + 40);
      }
      v6 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v6);
      *(_QWORD *)v6 = off_1E33A4B48;
      *(_QWORD *)(v6 + 8) = 0;
      v8 = *(_DWORD *)(v6 + 20) & 0xFFC00000 | 0x1E8200;
      v9 = *(_QWORD *)(v5 + 1800) != 0;
      *(_DWORD *)(v6 + 16) = 1;
      *(_DWORD *)(v6 + 20) = v8 | v9;
      v10 = *(_DWORD **)(v5 + 1800);
      if (v10)
        *v10 += 2;
      *(_QWORD *)(v6 + 24) = v10;
      *(_QWORD *)(v6 + 32) = 0;
      *(_QWORD *)(v6 + 40) = 0;
      *(_QWORD *)(v6 + 48) = 0;
      *(_QWORD *)(v6 + 56) = v7;
      *(_QWORD *)(v6 + 64) = 0;
      result = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 48))(v2, v6);
      if (*(_DWORD *)(v6 + 16) == 1)
        result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      else
        --*(_DWORD *)(v6 + 16);
      if (*(_DWORD *)(v2 + 24) == 2)
      {
        if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)v2, v11);
      }
      else
      {
        *(_DWORD *)(v2 + 24) -= 2;
      }
    }
  }
  return result;
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(WTF::StringBuilder *a1, uint64_t *a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *result;
  char *v8;
  __int16 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  char *v14;
  size_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unsigned __int128 v19;
  char v20;
  uint64_t v21;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 1);
  if ((v6 || (v6 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v6 + 16) & 4) == 0 || v5 && (*(_BYTE *)(v5 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      v8 = result;
      v9 = *a3;
      v21 = *a2;
      result = (char *)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v21, result);
      v10 = v21;
      if (v21)
        v10 = *(unsigned int *)(v21 + 4);
      *(_WORD *)&v8[2 * v10] = v9;
    }
  }
  else
  {
    result = (char *)MEMORY[0x19AEA4824]();
    if (result)
    {
      v11 = result;
      v12 = *a2;
      v13 = *a3;
      if (v12)
      {
        v14 = *(char **)(v12 + 8);
        v15 = *(unsigned int *)(v12 + 4);
        if ((*(_BYTE *)(v12 + 16) & 4) != 0)
        {
          if ((_DWORD)v15)
          {
            if ((_DWORD)v15 == 1)
              *result = *v14;
            else
              result = (char *)memcpy(result, v14, v15);
          }
        }
        else
        {
          if (v15 < 0x10)
          {
            v17 = result;
          }
          else
          {
            v17 = &result[v15 & 0xFFFFFFF0];
            v18 = result;
            do
            {
              v19 = (unsigned __int128)vld2q_s8(v14);
              v14 += 32;
              *(_OWORD *)v18 = v19;
              v18 += 16;
            }
            while (v18 != v17);
          }
          while (v17 != &result[v15])
          {
            v20 = *v14;
            v14 += 2;
            *v17++ = v20;
          }
        }
        v16 = *(unsigned int *)(v12 + 4);
      }
      else
      {
        v16 = 0;
      }
      v11[v16] = v13;
    }
  }
  return result;
}

unsigned int *WebCore::IndentOutdentCommand::outdentParagraph(WebCore::IndentOutdentCommand *this)
{
  int v2;
  const WebCore::VisiblePosition *v3;
  void *v4;
  uint64_t v5;
  Node *v6;
  void *v7;
  uint64_t v8;
  Node *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  void *v15;
  WebCore::Node *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Node *v20;
  __int16 v21;
  uint64_t v22;
  char v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  Node *v31;
  uint64_t v32;
  uint64_t v33;
  Node *v34;
  uint64_t v35;
  uint64_t (*v36)();
  BOOL v37;
  Node *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Node *v42;
  Node *v43;
  Node *v44;
  uint64_t (*v45)();
  BOOL v46;
  Node *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  Node *v51;
  Node *v52;
  Node *v53;
  unsigned int v54;
  int v55;
  void *v56;
  WebCore::Node *v57;
  void *v58;
  Node *v59;
  Node *v60;
  void *v61;
  Node *v62;
  void *v63;
  uint64_t v64;
  Node *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  Node *v70;
  Node *v71;
  Node *v72;
  Node *v73;
  WebCore::Node *v74;
  WebCore::Node *v75;
  WebCore::Node *v76;
  WebCore::Node *v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int *result;
  uint64_t v81;
  void *v82;
  Node *v83;
  Node *v84;
  void *v85;
  Node *var0;
  uint64_t v87;
  int v88;
  char v89;
  VisiblePosition v90;
  VisiblePosition v91;
  uint64_t v92;
  WebCore::Node *v93;
  WebCore::Node *v94[3];
  WebCore::Node *v95[2];
  char v96;
  WebCore::Node *v97;
  int v98;
  char v99;
  char v100;
  WebCore::Node *v101;
  int v102;
  char v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  Node *v107;
  unsigned int v108;
  char v109;
  char v110;
  unsigned int *v111;
  unsigned int var1;
  char v113;
  char v114;
  VisiblePosition v115;

  if (*((_BYTE *)this + 225) == 2)
  {
    WebCore::VisiblePosition::canonicalPosition((WebCore::IndentOutdentCommand *)((char *)this + 192), (uint64_t)&v107);
    v110 = 1;
  }
  else
  {
    v2 = *((unsigned __int8 *)this + 224);
    WebCore::VisiblePosition::canonicalPosition((WebCore::IndentOutdentCommand *)((char *)this + 192), (uint64_t)&v107);
    v110 = 1;
    if (!v2)
    {
      v84 = v107;
      if (v107)
      {
        *((_DWORD *)v107 + 6) += 2;
        v115.var0.var0.var0 = v84;
        v115.var0.var1 = v108;
        *((_BYTE *)&v115.var0 + 12) = v109;
        v115.var1 = 0;
        if (!WebCore::inSameLine((WebCore *)&v107, (const WebCore::VisiblePosition *)&v115, v3))
          v110 = 0;
        var0 = v115.var0.var0.var0;
        v115.var0.var0.var0 = 0;
        if (var0)
        {
          if (*((_DWORD *)var0 + 6) == 2)
          {
            if ((*((_WORD *)var0 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)var0, v85);
          }
          else
          {
            *((_DWORD *)var0 + 6) -= 2;
          }
        }
      }
    }
  }
  WebCore::startOfParagraph((uint64_t)&v107, 1, &v111);
  v5 = (uint64_t)v107;
  v107 = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v4);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  WebCore::endOfParagraph((WebCore::Node *)&v111, 1, &v107);
  v6 = (Node *)v111;
  if (v111)
    v111[6] += 2;
  v115.var0.var0.var0 = v6;
  v115.var0.var1 = var1;
  *((_BYTE *)&v115.var0 + 12) = v113;
  WebCore::enclosingNodeOfType((uint64_t)&v115, (uint64_t (*)(uint64_t))WebCore::isListOrIndentBlockquote, 1, &v106);
  v8 = v106;
  if (v106 && (*(_WORD *)(v106 + 28) & 0x10) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195AF7108);
  }
  v106 = 0;
  v9 = v115.var0.var0.var0;
  v115.var0.var0.var0 = 0;
  if (v9)
  {
    if (*((_DWORD *)v9 + 6) == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, v7);
    }
    else
    {
      *((_DWORD *)v9 + 6) -= 2;
    }
  }
  if (v8)
  {
    v10 = *(_QWORD *)(v8 + 32);
    if (!v10 || !WebCore::Node::computeEditability(v10, 0, 1))
    {
LABEL_171:
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v8, v7);
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
      }
      goto LABEL_173;
    }
    v11 = *((_QWORD *)this + 2);
    *(_DWORD *)(v11 + 24) += 2;
    v105 = v11;
    v12 = *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24);
    if (v12 == *(_QWORD *)(WebCore::HTMLNames::olTag + 24))
    {
      v17 = WTF::fastMalloc((WTF *)0x128);
      v18 = WebCore::EditCommand::EditCommand(v17, &v105, 59);
      *(_OWORD *)(v18 + 248) = 0u;
      *(_OWORD *)(v18 + 264) = 0u;
      *(_QWORD *)v18 = off_1E33ACEF8;
      *(_QWORD *)(v18 + 280) = 0;
      *(_BYTE *)(v18 + 288) = 0;
    }
    else
    {
      if (v12 != *(_QWORD *)(WebCore::HTMLNames::ulTag + 24))
      {
        v13 = *(_WORD *)(v8 + 28);
        *(_DWORD *)(v8 + 24) += 2;
        v115.var0.var0.var0 = (Node *)v8;
        v115.var0.var1 = 0;
        if ((v13 & 1) != 0)
          v14 = 0;
        else
          v14 = 3;
        *((_BYTE *)&v115.var0 + 12) = v14;
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v115, (uint64_t)&v101);
        v104 = 1;
        if (*(_DWORD *)(v8 + 24) == 2)
        {
          if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v8, v15);
        }
        else
        {
          *(_DWORD *)(v8 + 24) -= 2;
        }
        if ((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) == 0)
          goto LABEL_34;
        if ((*(_BYTE *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195AF71DCLL);
        }
        if ((*(_BYTE *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x14) & 1) != 0)
        {
LABEL_34:
          WebCore::startOfBlock((unsigned int *)&v101, (WebCore::Node *)1, &v97);
        }
        else
        {
          v16 = v101;
          if (v101)
            *((_DWORD *)v101 + 6) += 2;
          v97 = v16;
          v98 = v102;
          v99 = v103;
          v100 = v104;
        }
        v21 = *(_WORD *)(v8 + 28);
        *(_DWORD *)(v8 + 24) += 2;
        if ((v21 & 1) != 0)
        {
          v22 = *(_QWORD *)(v8 + 80);
          v23 = 0;
          if (v22)
            LODWORD(v22) = *(_DWORD *)(v22 + 4);
        }
        else
        {
          LODWORD(v22) = 0;
          v23 = 4;
        }
        v115.var0.var0.var0 = (Node *)v8;
        v115.var0.var1 = v22;
        *((_BYTE *)&v115.var0 + 12) = v23;
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v115, (uint64_t)v95);
        v96 = 1;
        if (*(_DWORD *)(v8 + 24) == 2)
        {
          if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v8, v24);
        }
        else
        {
          *(_DWORD *)(v8 + 24) -= 2;
        }
        WebCore::endOfBlock((unsigned int *)v95, (WebCore::Node *)1, v94);
        if (WebCore::operator==((uint64_t *)&v111, (uint64_t *)&v97)
          && WebCore::operator==((uint64_t *)&v107, (uint64_t *)v94))
        {
          v26 = *(_QWORD *)(v8 + 56);
          if (v26)
          {
            *(_DWORD *)(v26 + 24) += 2;
            WebCore::CompositeEditCommand::removeNodePreservingChildren(this, v8, 1);
            v27 = *(_QWORD *)(v26 + 32);
            if (v27)
            {
              if ((*(_WORD *)(v27 + 28) & 0x10) != 0)
              {
                v28 = *(_QWORD *)(*(_QWORD *)(v27 + 96) + 24);
                if (v28 == *(_QWORD *)(WebCore::HTMLNames::blockquoteTag + 24)
                  && ((*(_WORD *)(v26 + 28) & 0x10) == 0 || *(_QWORD *)(*(_QWORD *)(v26 + 96) + 24) != v28))
                {
                  v81 = *(_QWORD *)(v27 + 32);
                  if (v81)
                  {
                    if (WebCore::Node::computeEditability(v81, 0, 1))
                    {
                      if ((*(_WORD *)(v27 + 28) & 8) == 0)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x195AF723CLL);
                      }
                      WebCore::CompositeEditCommand::splitElement(this, (WebCore::Element *)v27, (WebCore::Node *)v26);
                    }
                  }
                }
              }
            }
          }
          else
          {
            WebCore::CompositeEditCommand::removeNodePreservingChildren(this, v8, 1);
          }
          WebCore::Document::updateLayout(v105, 2u, 0);
          v29 = (uint64_t)v111;
          if (v111)
            v111[6] += 2;
          v91.var0.var0.var0 = (Node *)v29;
          v91.var0.var1 = var1;
          *((_BYTE *)&v91.var0 + 12) = v113;
          WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v91, (uint64_t)&v115);
          v115.var1 = 1;
          v31 = v115.var0.var0.var0;
          v115.var0.var0.var0 = 0;
          v32 = (uint64_t)v111;
          v111 = (unsigned int *)v31;
          if (v32)
          {
            if (*(_DWORD *)(v32 + 24) == 2)
            {
              if ((*(_WORD *)(v32 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v32, v30);
            }
            else
            {
              *(_DWORD *)(v32 + 24) -= 2;
            }
          }
          var1 = v115.var0.var1;
          v113 = *((_BYTE *)&v115.var0 + 12);
          v114 = 1;
          if (v29)
          {
            if (*(_DWORD *)(v29 + 24) == 2)
            {
              if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v29, v30);
            }
            else
            {
              *(_DWORD *)(v29 + 24) -= 2;
            }
          }
          v33 = (uint64_t)v107;
          if (v107)
            *((_DWORD *)v107 + 6) += 2;
          v91.var0.var0.var0 = (Node *)v33;
          v91.var0.var1 = v108;
          *((_BYTE *)&v91.var0 + 12) = v109;
          WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v91, (uint64_t)&v115);
          v115.var1 = 1;
          v34 = v115.var0.var0.var0;
          v115.var0.var0.var0 = 0;
          v35 = (uint64_t)v107;
          v107 = v34;
          if (v35)
          {
            if (*(_DWORD *)(v35 + 24) == 2)
            {
              if ((*(_WORD *)(v35 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v35, v7);
            }
            else
            {
              *(_DWORD *)(v35 + 24) -= 2;
            }
          }
          v108 = v115.var0.var1;
          v109 = *((_BYTE *)&v115.var0 + 12);
          v110 = 1;
          if (v33)
          {
            if (*(_DWORD *)(v33 + 24) == 2)
            {
              if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v33, v7);
            }
            else
            {
              *(_DWORD *)(v33 + 24) -= 2;
            }
          }
          if (v111)
            v36 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
          else
            v36 = 0;
          if (v36)
          {
            WebCore::startOfParagraph((uint64_t)&v111, 1, &v115);
            v37 = WebCore::operator==((uint64_t *)&v111, (uint64_t *)&v115);
            v38 = v115.var0.var0.var0;
            v115.var0.var0.var0 = 0;
            if (v38)
            {
              if (*((_DWORD *)v38 + 6) == 2)
              {
                if ((*((_WORD *)v38 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v38, v7);
              }
              else
              {
                *((_DWORD *)v38 + 6) -= 2;
              }
            }
            if (!v37)
            {
              v39 = v105;
              v40 = bmalloc::api::isoAllocate();
              *(_OWORD *)(v40 + 8) = xmmword_1968BC9D0;
              *(_QWORD *)(v40 + 24) = 0x101C00000002;
              *(_QWORD *)(v40 + 32) = 0;
              *(_QWORD *)(v40 + 40) = v39 + 96;
              *(_OWORD *)(v40 + 48) = 0u;
              *(_OWORD *)(v40 + 64) = 0u;
              ++*(_DWORD *)(v39 + 3324);
              *(_QWORD *)(v40 + 80) = 0;
              *(_QWORD *)(v40 + 88) = 0;
              v41 = WebCore::HTMLNames::brTag;
              if (WebCore::HTMLNames::brTag)
                ++*(_DWORD *)WebCore::HTMLNames::brTag;
              *(_QWORD *)(v40 + 96) = v41;
              *(_QWORD *)(v40 + 104) = 0;
              *(_QWORD *)v40 = off_1E33B4C28;
              v91.var0.var0.var0 = (Node *)v40;
              v42 = (Node *)v111;
              if (v111)
                v111[6] += 2;
              v115.var0.var0.var0 = v42;
              v115.var0.var1 = var1;
              *((_BYTE *)&v115.var0 + 12) = v113;
              WebCore::CompositeEditCommand::insertNodeAt((unsigned int *)this, (uint64_t *)&v91, (WebCore::Position *)&v115);
              v43 = v115.var0.var0.var0;
              v115.var0.var0.var0 = 0;
              if (v43)
              {
                if (*((_DWORD *)v43 + 6) == 2)
                {
                  if ((*((_WORD *)v43 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v43, v7);
                }
                else
                {
                  *((_DWORD *)v43 + 6) -= 2;
                }
              }
              v44 = v91.var0.var0.var0;
              v91.var0.var0.var0 = 0;
              if (v44)
              {
                if (*((_DWORD *)v44 + 6) == 2)
                {
                  if ((*((_WORD *)v44 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v44, v7);
                }
                else
                {
                  *((_DWORD *)v44 + 6) -= 2;
                }
              }
            }
          }
          if (v107)
            v45 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
          else
            v45 = 0;
          if (!v45)
            goto LABEL_153;
          WebCore::endOfParagraph((WebCore::Node *)&v107, 1, &v115);
          v46 = WebCore::operator==((uint64_t *)&v107, (uint64_t *)&v115);
          v47 = v115.var0.var0.var0;
          v115.var0.var0.var0 = 0;
          if (v47)
          {
            if (*((_DWORD *)v47 + 6) == 2)
            {
              if ((*((_WORD *)v47 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v47, v7);
            }
            else
            {
              *((_DWORD *)v47 + 6) -= 2;
            }
          }
          if (v46)
            goto LABEL_153;
          v48 = v105;
          v49 = bmalloc::api::isoAllocate();
          *(_OWORD *)(v49 + 8) = xmmword_1968BC9D0;
          *(_QWORD *)(v49 + 24) = 0x101C00000002;
          *(_QWORD *)(v49 + 32) = 0;
          *(_QWORD *)(v49 + 40) = v48 + 96;
          *(_OWORD *)(v49 + 48) = 0u;
          *(_OWORD *)(v49 + 64) = 0u;
          ++*(_DWORD *)(v48 + 3324);
          *(_QWORD *)(v49 + 80) = 0;
          *(_QWORD *)(v49 + 88) = 0;
          v50 = WebCore::HTMLNames::brTag;
          if (WebCore::HTMLNames::brTag)
            ++*(_DWORD *)WebCore::HTMLNames::brTag;
          *(_QWORD *)(v49 + 96) = v50;
          *(_QWORD *)(v49 + 104) = 0;
          *(_QWORD *)v49 = off_1E33B4C28;
          v91.var0.var0.var0 = (Node *)v49;
          v51 = v107;
          if (v107)
            *((_DWORD *)v107 + 6) += 2;
          v115.var0.var0.var0 = v51;
          v115.var0.var1 = v108;
          *((_BYTE *)&v115.var0 + 12) = v109;
          WebCore::CompositeEditCommand::insertNodeAt((unsigned int *)this, (uint64_t *)&v91, (WebCore::Position *)&v115);
          v52 = v115.var0.var0.var0;
          v115.var0.var0.var0 = 0;
          if (v52)
          {
            if (*((_DWORD *)v52 + 6) == 2)
            {
              if ((*((_WORD *)v52 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v52, v7);
            }
            else
            {
              *((_DWORD *)v52 + 6) -= 2;
            }
          }
          v53 = v91.var0.var0.var0;
          v91.var0.var0.var0 = 0;
          if (!v53)
            goto LABEL_153;
          if (*((_DWORD *)v53 + 6) != 2)
          {
            *((_DWORD *)v53 + 6) -= 2;
LABEL_153:
            if (v26)
            {
              if (*(_DWORD *)(v26 + 24) == 2)
              {
                if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v26, v7);
              }
              else
              {
                *(_DWORD *)(v26 + 24) -= 2;
              }
            }
            v74 = v94[0];
            v94[0] = 0;
            if (v74)
            {
              if (*((_DWORD *)v74 + 6) == 2)
              {
                if ((*((_WORD *)v74 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v74, v7);
              }
              else
              {
                *((_DWORD *)v74 + 6) -= 2;
              }
            }
            v75 = v95[0];
            v95[0] = 0;
            if (v75)
            {
              if (*((_DWORD *)v75 + 6) == 2)
              {
                if ((*((_WORD *)v75 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v75, v7);
              }
              else
              {
                *((_DWORD *)v75 + 6) -= 2;
              }
            }
            v76 = v97;
            v97 = 0;
            if (v76)
            {
              if (*((_DWORD *)v76 + 6) == 2)
              {
                if ((*((_WORD *)v76 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v76, v7);
              }
              else
              {
                *((_DWORD *)v76 + 6) -= 2;
              }
            }
            v77 = v101;
            v101 = 0;
            if (v77)
            {
              if (*((_DWORD *)v77 + 6) == 2)
              {
                if ((*((_WORD *)v77 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v77, v7);
              }
              else
              {
                *((_DWORD *)v77 + 6) -= 2;
              }
            }
LABEL_168:
            v78 = v105;
            v105 = 0;
            if (v78)
            {
              if (*(_DWORD *)(v78 + 24) == 2)
              {
                if ((*(_WORD *)(v78 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v78, v7);
              }
              else
              {
                *(_DWORD *)(v78 + 24) -= 2;
              }
            }
            goto LABEL_171;
          }
          if ((*((_WORD *)v53 + 15) & 0x400) != 0)
            goto LABEL_153;
          goto LABEL_219;
        }
        v26 = (uint64_t)v111;
        if (v111)
        {
          v54 = v111[6];
          v111[6] = v54 + 4;
          v55 = v54 + 2;
          if (!v55)
          {
            if ((*(_WORD *)(v26 + 30) & 0x400) != 0)
            {
              v55 = 2;
            }
            else
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v26, v25);
              v55 = *(_DWORD *)(v26 + 24);
            }
          }
          *(_DWORD *)(v26 + 24) = v55 + 2;
          v92 = v26;
          WebCore::enclosingBlock(&v92, (WebCore::Node *)1, &v93);
          v92 = 0;
          if (*(_DWORD *)(v26 + 24) == 2)
          {
            if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v26, v56);
          }
          else
          {
            *(_DWORD *)(v26 + 24) -= 2;
          }
        }
        else
        {
          v92 = 0;
          WebCore::enclosingBlock(&v92, (WebCore::Node *)1, &v93);
          v92 = 0;
        }
        *(_DWORD *)(v8 + 24) += 2;
        v57 = v93;
        if (v93 == (WebCore::Node *)v8)
        {
          v60 = (Node *)v111;
          if (v111)
            v111[6] += 2;
          v115.var0.var0.var0 = v60;
          v115.var0.var1 = var1;
          *((_BYTE *)&v115.var0 + 12) = v113;
          WebCore::highestEnclosingNodeOfType((unsigned int *)&v115, WebCore::isInline, 1, v8, (uint64_t *)&v91);
          v62 = v115.var0.var0.var0;
          v115.var0.var0.var0 = 0;
          if (v62)
          {
            if (*((_DWORD *)v62 + 6) == 2)
            {
              if ((*((_WORD *)v62 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v62, v61);
            }
            else
            {
              *((_DWORD *)v62 + 6) -= 2;
            }
          }
          if (v91.var0.var0.var0)
          {
            WebCore::CompositeEditCommand::splitElement(this, (WebCore::Element *)v8, (WebCore::Node *)v91.var0.var0.var0);
          }
          else
          {
            v64 = (uint64_t)v111;
            if (v111)
              v111[6] += 2;
            WebCore::CompositeEditCommand::splitElement(this, (WebCore::Element *)v8, (WebCore::Node *)v64);
            if (*(_DWORD *)(v64 + 24) == 2)
            {
              if ((*(_WORD *)(v64 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v64, v63);
            }
            else
            {
              *(_DWORD *)(v64 + 24) -= 2;
            }
          }
          v65 = v91.var0.var0.var0;
          v91.var0.var0.var0 = 0;
          if (v65)
          {
            if (*((_DWORD *)v65 + 6) == 2)
            {
              if ((*((_WORD *)v65 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v65, v63);
            }
            else
            {
              *((_DWORD *)v65 + 6) -= 2;
            }
          }
          v59 = (Node *)v8;
        }
        else
        {
          WebCore::CompositeEditCommand::splitTreeToNode((unsigned int *)this, (WebCore::Node *)v26, (WebCore::Node *)v8, 1, (WebCore::Node **)&v115);
          v59 = v115.var0.var0.var0;
          v115.var0.var0.var0 = 0;
          if (*(_DWORD *)(v8 + 24) == 2)
          {
            if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v8, v58);
              v83 = v115.var0.var0.var0;
              v115.var0.var0.var0 = 0;
              if (v83)
              {
                if (*((_DWORD *)v83 + 6) == 2)
                {
                  if ((*((_WORD *)v83 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v83, v82);
                }
                else
                {
                  *((_DWORD *)v83 + 6) -= 2;
                }
              }
            }
          }
          else
          {
            *(_DWORD *)(v8 + 24) -= 2;
          }
        }
        v66 = v105;
        v67 = bmalloc::api::isoAllocate();
        v68 = v67;
        *(_OWORD *)(v67 + 8) = xmmword_1968BC9D0;
        *(_DWORD *)(v67 + 28) = 4124;
        *(_QWORD *)(v67 + 32) = 0;
        *(_QWORD *)(v67 + 40) = v66 + 96;
        *(_OWORD *)(v67 + 48) = 0u;
        *(_OWORD *)(v67 + 64) = 0u;
        ++*(_DWORD *)(v66 + 3324);
        *(_QWORD *)(v67 + 80) = 0;
        *(_QWORD *)(v67 + 88) = 0;
        v69 = WebCore::HTMLNames::brTag;
        if (WebCore::HTMLNames::brTag)
          ++*(_DWORD *)WebCore::HTMLNames::brTag;
        *(_QWORD *)(v67 + 96) = v69;
        *(_QWORD *)(v67 + 104) = 0;
        *(_QWORD *)v67 = off_1E33B4C28;
        *(_DWORD *)(v67 + 24) = 4;
        v115.var0.var0.var0 = (Node *)v67;
        WebCore::CompositeEditCommand::insertNodeBefore(this, (uint64_t *)&v115, (uint64_t)v59, 1);
        v70 = v115.var0.var0.var0;
        v115.var0.var0.var0 = 0;
        if (v70)
        {
          if (*((_DWORD *)v70 + 6) == 2)
          {
            if ((*((_WORD *)v70 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v70, v7);
          }
          else
          {
            *((_DWORD *)v70 + 6) -= 2;
          }
        }
        if ((*(_BYTE *)(v68 + 22) & 8) == 0)
        {
LABEL_146:
          if (*(_DWORD *)(v68 + 24) == 2)
          {
            if ((*(_WORD *)(v68 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v68, v7);
          }
          else
          {
            *(_DWORD *)(v68 + 24) -= 2;
          }
          if (*((_DWORD *)v59 + 6) == 2)
          {
            if ((*((_WORD *)v59 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v59, v7);
          }
          else
          {
            *((_DWORD *)v59 + 6) -= 2;
          }
          if (!v57)
            goto LABEL_153;
          if (*((_DWORD *)v57 + 6) != 2)
          {
            *((_DWORD *)v57 + 6) -= 2;
            goto LABEL_153;
          }
          if ((*((_WORD *)v57 + 15) & 0x400) != 0)
            goto LABEL_153;
          v53 = (Node *)v57;
LABEL_219:
          WebCore::Node::removedLastRef((WebCore::Node *)v53, v7);
          goto LABEL_153;
        }
        WebCore::startOfParagraph((uint64_t)&v111, 1, &v115);
        WebCore::endOfParagraph((WebCore::Node *)&v107, 1, &v91);
        v71 = v115.var0.var0.var0;
        if (v115.var0.var0.var0)
        {
          if (!v91.var0.var0.var0)
          {
            v115.var0.var0.var0 = 0;
LABEL_144:
            if (*((_DWORD *)v71 + 6) == 2)
            {
              if ((*((_WORD *)v71 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v71, v7);
            }
            else
            {
              *((_DWORD *)v71 + 6) -= 2;
            }
            goto LABEL_146;
          }
          *(_DWORD *)(v68 + 24) += 2;
          v87 = v68;
          v88 = 0;
          v89 = 1;
          WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v87, (uint64_t)&v90);
          v90.var1 = 1;
          WebCore::CompositeEditCommand::moveParagraphs((unsigned int *)this, &v115, &v91, &v90, 1, 1);
          v72 = v90.var0.var0.var0;
          v90.var0.var0.var0 = 0;
          if (v72)
          {
            if (*((_DWORD *)v72 + 6) == 2)
            {
              if ((*((_WORD *)v72 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v72, v7);
            }
            else
            {
              *((_DWORD *)v72 + 6) -= 2;
            }
          }
          if (*(_DWORD *)(v68 + 24) == 2)
          {
            if ((*(_WORD *)(v68 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v68, v7);
          }
          else
          {
            *(_DWORD *)(v68 + 24) -= 2;
          }
        }
        v73 = v91.var0.var0.var0;
        v91.var0.var0.var0 = 0;
        if (v73)
        {
          if (*((_DWORD *)v73 + 6) == 2)
          {
            if ((*((_WORD *)v73 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v73, v7);
          }
          else
          {
            *((_DWORD *)v73 + 6) -= 2;
          }
        }
        v71 = v115.var0.var0.var0;
        v115.var0.var0.var0 = 0;
        if (!v71)
          goto LABEL_146;
        goto LABEL_144;
      }
      v19 = WTF::fastMalloc((WTF *)0x128);
      v18 = WebCore::EditCommand::EditCommand(v19, &v105, 59);
      *(_OWORD *)(v18 + 248) = 0u;
      *(_OWORD *)(v18 + 264) = 0u;
      *(_QWORD *)v18 = off_1E33ACEF8;
      *(_QWORD *)(v18 + 280) = 0;
      *(_BYTE *)(v18 + 288) = 1;
    }
    v115.var0.var0.var0 = (Node *)v18;
    WebCore::CompositeEditCommand::applyCommandToComposite(this, (uint64_t **)&v115);
    v20 = v115.var0.var0.var0;
    v115.var0.var0.var0 = 0;
    if (v20)
    {
      if (*((_DWORD *)v20 + 2) == 1)
        (*(void (**)(Node *))(*(_QWORD *)v20 + 8))(v20);
      else
        --*((_DWORD *)v20 + 2);
    }
    goto LABEL_168;
  }
LABEL_173:
  v79 = (uint64_t)v107;
  v107 = 0;
  if (v79)
  {
    if (*(_DWORD *)(v79 + 24) == 2)
    {
      if ((*(_WORD *)(v79 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v79, v7);
    }
    else
    {
      *(_DWORD *)(v79 + 24) -= 2;
    }
  }
  result = v111;
  v111 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v7);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

BOOL WebCore::isListOrIndentBlockquote(WebCore *this, const WebCore::Node *a2)
{
  uint64_t v2;

  if ((*((_WORD *)this + 14) & 0x10) == 0)
    return 0;
  v2 = *(_QWORD *)(*((_QWORD *)this + 12) + 24);
  return v2 == *(_QWORD *)(WebCore::HTMLNames::ulTag + 24)
      || v2 == *(_QWORD *)(WebCore::HTMLNames::olTag + 24)
      || v2 == *(_QWORD *)(WebCore::HTMLNames::blockquoteTag + 24);
}

unsigned int *WebCore::IndentOutdentCommand::formatSelection(WebCore::IndentOutdentCommand *this, VisiblePosition *a2, VisiblePosition *a3)
{
  void *v5;
  unsigned int *result;
  uint64_t v7;
  void *v8;
  WebCore::Node *v9;
  void *v10;
  WebCore::Node *v11;
  void *v12;
  WebCore::Node *v13;
  uint64_t (*v14)();
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  WebCore::Node *v19;
  uint64_t (*v20)();
  int v21;
  uint64_t v22;
  int v23;
  void *v24;
  uint64_t v25;
  WebCore::Node *v26;
  WebCore::Node *v27;
  WebCore::Node *v28;
  WebCore::Node *v29;
  uint64_t v30;
  WebCore::Node *v31;
  WebCore::Node *v32;
  WebCore::Node *v33;
  uint64_t v34;
  WebCore::Node *v35[2];
  char v36;
  WebCore::Node *v37;
  int v38;
  char v39;
  char v40;
  WebCore::Node *v41;
  int v42;
  char v43;
  char v44;
  WebCore::Node *v45[3];
  uint64_t v46;
  int v47;
  char v48;
  uint64_t v49[3];
  WebCore::Node *v50;
  int v51;
  char v52;
  char v53;

  if (!*((_DWORD *)this + 78))
    return WebCore::ApplyBlockElementCommand::formatSelection(this, a2, a3);
  WebCore::endOfParagraph((WebCore::Node *)a2, 1, &v50);
  WebCore::endOfParagraph((WebCore::Node *)a3, 1, v49);
  if (WebCore::operator==((uint64_t *)&v50, v49))
  {
    WebCore::IndentOutdentCommand::outdentParagraph(this);
    goto LABEL_91;
  }
  v7 = *((_QWORD *)this + 26);
  if (v7)
    *(_DWORD *)(v7 + 24) += 2;
  v46 = v7;
  v47 = *((_DWORD *)this + 54);
  v48 = *((_BYTE *)this + 220);
  WebCore::VisiblePosition::next((unsigned __int8 *)v49, 0, 0, (uint64_t)&v37);
  WebCore::endOfParagraph((WebCore::Node *)&v37, 1, v45);
  v9 = v37;
  v37 = 0;
  if (v9)
  {
    if (*((_DWORD *)v9 + 6) == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v9, v8);
    }
    else
    {
      *((_DWORD *)v9 + 6) -= 2;
    }
  }
  while (!WebCore::operator==((uint64_t *)&v50, (uint64_t *)v45))
  {
    WebCore::VisiblePosition::next((unsigned __int8 *)&v50, 0, 0, (uint64_t)&v37);
    WebCore::endOfParagraph((WebCore::Node *)&v37, 1, &v41);
    v11 = v37;
    v37 = 0;
    if (v11)
    {
      if (*((_DWORD *)v11 + 6) == 2)
      {
        if ((*((_WORD *)v11 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v11, v10);
      }
      else
      {
        *((_DWORD *)v11 + 6) -= 2;
      }
    }
    if (WebCore::operator==((uint64_t *)&v50, v49))
    {
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v46, (uint64_t)v35);
      v36 = 1;
      WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v37, (const WebCore::VisiblePosition *)v35, 0);
      WebCore::EditCommand::setEndingSelection((uint64_t *)this, (const WebCore::VisibleSelection *)&v37);
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v37);
      if (v35[0])
      {
        if (*((_DWORD *)v35[0] + 6) == 2)
        {
          if ((*((_WORD *)v35[0] + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v35[0], v12);
        }
        else
        {
          *((_DWORD *)v35[0] + 6) -= 2;
        }
      }
    }
    else
    {
      WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v37, (const WebCore::VisiblePosition *)&v50, 0);
      WebCore::EditCommand::setEndingSelection((uint64_t *)this, (const WebCore::VisibleSelection *)&v37);
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v37);
    }
    WebCore::IndentOutdentCommand::outdentParagraph(this);
    v13 = v45[0];
    if (v45[0])
      v14 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    else
      v14 = 0;
    if (!v14)
      goto LABEL_29;
    if (v45[0])
    {
      v15 = *((_DWORD *)v45[0] + 6) + 2;
      *((_DWORD *)v45[0] + 6) = v15;
    }
    else
    {
      v15 = MEMORY[0x18];
    }
    v16 = *((_QWORD *)v13 + 2);
    v17 = v15 - 2;
    if (v17)
    {
      *((_DWORD *)v13 + 6) = v17;
    }
    else if ((*((_WORD *)v13 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v13, v5);
    }
    if ((v16 & 0x8000000000000) != 0)
    {
LABEL_29:
      v19 = v41;
      if (v41)
        v20 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
      else
        v20 = 0;
      if (v20)
      {
        if (v41)
        {
          v21 = *((_DWORD *)v41 + 6) + 2;
          *((_DWORD *)v41 + 6) = v21;
        }
        else
        {
          v21 = MEMORY[0x18];
        }
        v22 = *((_QWORD *)v19 + 2);
        v23 = v21 - 2;
        if (v23)
        {
          *((_DWORD *)v19 + 6) = v23;
        }
        else if ((*((_WORD *)v19 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v19, v5);
        }
        if ((v22 & 0x8000000000000) == 0)
        {
          WebCore::VisiblePosition::canonicalPosition((WebCore::IndentOutdentCommand *)((char *)this + 208), (uint64_t)&v37);
          v25 = (uint64_t)v50;
          v50 = v37;
          if (v25)
          {
            if (*(_DWORD *)(v25 + 24) == 2)
            {
              if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v25, v24);
            }
            else
            {
              *(_DWORD *)(v25 + 24) -= 2;
            }
          }
          v51 = v38;
          v52 = v39;
          v53 = 1;
          WebCore::VisiblePosition::next((unsigned __int8 *)&v50, 0, 0, (uint64_t)v35);
          WebCore::endOfParagraph((WebCore::Node *)v35, 1, &v37);
          v26 = v37;
          v37 = 0;
          v27 = v41;
          v41 = v26;
          if (!v27)
            goto LABEL_44;
          if (*((_DWORD *)v27 + 6) != 2)
          {
            *((_DWORD *)v27 + 6) -= 2;
            goto LABEL_44;
          }
          if ((*((_WORD *)v27 + 15) & 0x400) != 0)
          {
LABEL_44:
            v42 = v38;
            v43 = v39;
            v44 = v40;
          }
          else
          {
            WebCore::Node::removedLastRef(v27, v5);
            v32 = v37;
            v42 = v38;
            v43 = v39;
            v44 = v40;
            v37 = 0;
            if (v32)
            {
              if (*((_DWORD *)v32 + 6) == 2)
              {
                if ((*((_WORD *)v32 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v32, v5);
              }
              else
              {
                *((_DWORD *)v32 + 6) -= 2;
              }
            }
          }
          v28 = v35[0];
          v35[0] = 0;
          if (v28)
          {
            if (*((_DWORD *)v28 + 6) == 2)
            {
              if ((*((_WORD *)v28 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v28, v5);
            }
            else
            {
              *((_DWORD *)v28 + 6) -= 2;
            }
          }
        }
      }
      v29 = v41;
      if (v41)
        *((_DWORD *)v41 + 6) += 2;
      v30 = (uint64_t)v50;
      v50 = v29;
      if (v30)
      {
        if (*(_DWORD *)(v30 + 24) == 2)
        {
          if ((*(_WORD *)(v30 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v30, v5);
            v29 = v50;
          }
        }
        else
        {
          *(_DWORD *)(v30 + 24) -= 2;
        }
      }
      v51 = v42;
      v52 = v43;
      v53 = v44;
      if (v29)
        v18 = 0;
      else
        v18 = 3;
      goto LABEL_56;
    }
    v18 = 3;
LABEL_56:
    v31 = v41;
    v41 = 0;
    if (v31)
    {
      if (*((_DWORD *)v31 + 6) == 2)
      {
        if ((*((_WORD *)v31 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v31, v5);
      }
      else
      {
        *((_DWORD *)v31 + 6) -= 2;
      }
    }
    if (v18)
      break;
  }
  v33 = v45[0];
  v45[0] = 0;
  if (v33)
  {
    if (*((_DWORD *)v33 + 6) == 2)
    {
      if ((*((_WORD *)v33 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v33, v5);
    }
    else
    {
      *((_DWORD *)v33 + 6) -= 2;
    }
  }
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, v5);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
LABEL_91:
  v34 = v49[0];
  v49[0] = 0;
  if (v34)
  {
    if (*(_DWORD *)(v34 + 24) == 2)
    {
      if ((*(_WORD *)(v34 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v34, v5);
    }
    else
    {
      *(_DWORD *)(v34 + 24) -= 2;
    }
  }
  result = (unsigned int *)v50;
  v50 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v5);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::IndentOutdentCommand::formatRange(WebCore::CompositeEditCommand *a1, WebCore::Node *a2, WebCore::VisiblePosition *a3, uint64_t a4, uint64_t *a5)
{
  WebCore::Node *v9;
  WebCore::Node *v10;
  Node *var0;
  WebCore::Node *v12;
  int v13;
  WebCore::Node *v14;
  WebCore::Node *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  Node *v24;
  void *v25;
  WebCore::Element *v26;
  Node *v27;
  Node *v28;
  WebCore::Element *v29;
  unsigned int *result;
  int v31;
  WebCore::Node *v32;
  WebCore::Node *v33;
  uint64_t v34;
  WebCore::Node *v35;
  unsigned int v36;
  void *v37;
  Node *v38;
  WebCore::Node *v39;
  unsigned int v40;
  char v41;
  unsigned int v42;
  WebCore::Node *v43;
  Node *v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  WebCore::Node *v49;
  Node *v50;
  __int16 v51;
  BOOL v53;
  void *v54;
  Node *v55;
  Node *v56;
  int v57;
  WebCore::Node *v58;
  uint64_t v59;
  int inserted;
  Node *v61;
  uint64_t v62;
  void *v63;
  Node *v64;
  WebCore::Node *v65;
  Node *v66;
  WebCore::Node *v67;
  void *v68;
  Node *v69;
  int v70;
  Node *v71;
  Node *v72;
  WebCore::Node *v73;
  __int16 v74;
  WebCore::CompositeEditCommand *v75;
  WebCore::Node *v76[2];
  VisiblePosition v77;
  VisiblePosition v78;
  WebCore::Node *v79;
  WebCore::Node *v80;

  v9 = *(WebCore::Node **)a2;
  if (*(_QWORD *)a2)
  {
    *((_DWORD *)v9 + 6) += 2;
    WebCore::enclosingList((unsigned int *)v9, a2, &v78);
    var0 = v78.var0.var0.var0;
    if (!v78.var0.var0.var0)
    {
      if (*((_DWORD *)v9 + 6) != 2)
      {
        *((_DWORD *)v9 + 6) -= 2;
        goto LABEL_73;
      }
      if ((*((_WORD *)v9 + 15) & 0x400) == 0)
      {
        v32 = v9;
LABEL_72:
        WebCore::Node::removedLastRef(v32, v10);
      }
LABEL_73:
      WebCore::enclosingNodeOfType((uint64_t)a2, (uint64_t (*)(uint64_t))WebCore::isTableCell, 1, (uint64_t *)&v80);
      v34 = (uint64_t)v80;
      if (!v80)
      {
        v35 = *(WebCore::Node **)a2;
        if (*(_QWORD *)a2)
        {
          v36 = *((_BYTE *)a2 + 12) & 7;
          if (v36 > 4)
          {
            v35 = 0;
          }
          else if (((1 << v36) & 0x19) == 0)
          {
            v35 = (WebCore::Node *)*((_QWORD *)v35 + 4);
          }
        }
        WebCore::enclosingList((unsigned int *)v35, v33, &v78);
        v38 = v78.var0.var0.var0;
        v78.var0.var0.var0 = 0;
        if (v38)
        {
          if (*((_DWORD *)v38 + 6) == 2)
          {
            if ((*((_WORD *)v38 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v38, v37);
          }
          else
          {
            *((_DWORD *)v38 + 6) -= 2;
          }
          v39 = *(WebCore::Node **)a2;
          if (*(_QWORD *)a2)
          {
            v40 = *((_BYTE *)a2 + 12) & 7;
            v41 = 1;
            if (v40 > 4)
            {
              v39 = 0;
            }
            else if (((1 << v40) & 0x19) != 0 || (v39 = (WebCore::Node *)*((_QWORD *)v39 + 4)) != 0)
            {
              v41 = 0;
              *((_DWORD *)v39 + 6) += 2;
            }
          }
          else
          {
            v41 = 1;
          }
          v77.var0.var0.var0 = (Node *)v39;
          WebCore::enclosingBlock((uint64_t *)&v77, (WebCore::Node *)1, (WebCore::Node **)&v78);
          v34 = (uint64_t)v78.var0.var0.var0;
          v78.var0.var0.var0 = 0;
          v77.var0.var0.var0 = 0;
          if ((v41 & 1) == 0)
          {
            if (*((_DWORD *)v39 + 6) == 2)
            {
              if ((*((_WORD *)v39 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v39, v10);
            }
            else
            {
              *((_DWORD *)v39 + 6) -= 2;
            }
          }
          if (!v34)
          {
LABEL_200:
            result = (unsigned int *)v80;
            v80 = 0;
            if (!result)
              return result;
            v31 = result[6] - 2;
            if (result[6] == 2)
            {
              if ((*((_WORD *)result + 15) & 0x400) == 0)
                return WebCore::Node::removedLastRef((WebCore::Node *)result, v10);
              return result;
            }
LABEL_202:
            result[6] = v31;
            return result;
          }
LABEL_90:
          v10 = *(WebCore::Node **)a2;
          v42 = *((_BYTE *)a2 + 12) & 7;
          if (v42 > 4)
          {
            v43 = 0;
          }
          else
          {
            v43 = *(WebCore::Node **)a2;
            if (((1 << v42) & 0x19) == 0)
              v43 = (WebCore::Node *)*((_QWORD *)v10 + 4);
          }
          if (v42 > 4)
          {
            v10 = 0;
          }
          else
          {
            if (((1 << v42) & 0x19) != 0)
            {
              if ((WebCore::Node *)v34 != v43)
                goto LABEL_96;
LABEL_123:
              *((_DWORD *)v10 + 6) += 2;
              goto LABEL_124;
            }
            v10 = (WebCore::Node *)*((_QWORD *)v10 + 4);
            if ((WebCore::Node *)v34 != v43)
            {
LABEL_96:
              WebCore::CompositeEditCommand::splitTreeToNode((unsigned int *)a1, v10, (WebCore::Node *)v34, 0, &v79);
              v10 = v79;
              if (!v79)
              {
LABEL_198:
                if (*(_DWORD *)(v34 + 24) == 2)
                {
                  if ((*(_WORD *)(v34 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v34, v10);
                }
                else
                {
                  *(_DWORD *)(v34 + 24) -= 2;
                }
                goto LABEL_200;
              }
LABEL_125:
              WebCore::VisiblePosition::canonicalPosition(a2, (uint64_t)&v78);
              v78.var1 = 1;
              if (*a5)
              {
                v44 = v78.var0.var0.var0;
                goto LABEL_127;
              }
              WebCore::ApplyBlockElementCommand::createBlockElement(a1, (uint64_t *)&v77);
              v55 = v77.var0.var0.var0;
              v77.var0.var0.var0 = 0;
              v56 = (Node *)*a5;
              *a5 = (uint64_t)v55;
              if (v56)
              {
                v57 = *((_DWORD *)v56 + 6) - 2;
                if (*((_DWORD *)v56 + 6) == 2)
                {
                  if ((*((_WORD *)v56 + 15) & 0x400) != 0)
                    goto LABEL_147;
                  WebCore::Node::removedLastRef((WebCore::Node *)v56, v54);
                  v56 = v77.var0.var0.var0;
                  v77.var0.var0.var0 = 0;
                  if (!v56)
                    goto LABEL_147;
                  v57 = *((_DWORD *)v56 + 6) - 2;
                  if (*((_DWORD *)v56 + 6) == 2)
                  {
                    if ((*((_WORD *)v56 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v56, v68);
                    goto LABEL_147;
                  }
                }
                *((_DWORD *)v56 + 6) = v57;
              }
LABEL_147:
              v58 = v79;
              if (v79 == (WebCore::Node *)v34)
              {
                v62 = *a5;
                *(_DWORD *)(v62 + 24) = *(_DWORD *)(*a5 + 24) + 2;
                v77.var0.var0.var0 = (Node *)v62;
                WebCore::CompositeEditCommand::insertNodeAt((unsigned int *)a1, (uint64_t *)&v77, a2);
                v64 = v77.var0.var0.var0;
                v77.var0.var0.var0 = 0;
                if (v64)
                {
                  if (*((_DWORD *)v64 + 6) == 2)
                  {
                    if ((*((_WORD *)v64 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v64, v63);
                  }
                  else
                  {
                    *((_DWORD *)v64 + 6) -= 2;
                  }
                }
              }
              else
              {
                v59 = *a5;
                *(_DWORD *)(v59 + 24) = *(_DWORD *)(*a5 + 24) + 2;
                v77.var0.var0.var0 = (Node *)v59;
                inserted = WebCore::CompositeEditCommand::insertNodeBefore(a1, (uint64_t *)&v77, (uint64_t)v58, 1);
                v61 = v77.var0.var0.var0;
                v77.var0.var0.var0 = 0;
                if (v61)
                {
                  if (*((_DWORD *)v61 + 6) == 2)
                  {
                    if ((*((_WORD *)v61 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v61, v10);
                  }
                  else
                  {
                    *((_DWORD *)v61 + 6) -= 2;
                  }
                }
                if (!inserted)
                  goto LABEL_192;
              }
              if (!WebCore::Node::computeEditability(*a5, 0, 1))
              {
                (*(void (**)(WebCore::CompositeEditCommand *, uint64_t, uint64_t))(*(_QWORD *)a1 + 184))(a1, *a5, 1);
                goto LABEL_192;
              }
              WebCore::positionInParentAfterNode(*a5, v65, (uint64_t)v76);
              WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v76, (uint64_t)&v77);
              v77.var1 = 1;
              v44 = v77.var0.var0.var0;
              v66 = v78.var0.var0.var0;
              v78.var0.var0.var0 = v77.var0.var0.var0;
              if (v66)
              {
                if (*((_DWORD *)v66 + 6) == 2)
                {
                  if ((*((_WORD *)v66 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v66, v10);
                }
                else
                {
                  *((_DWORD *)v66 + 6) -= 2;
                }
              }
              v78.var0.var1 = v77.var0.var1;
              *((_BYTE *)&v78.var0 + 12) = *((_BYTE *)&v77.var0 + 12);
              v78.var1 = 1;
              v67 = v76[0];
              v76[0] = 0;
              if (v67)
              {
                if (*((_DWORD *)v67 + 6) == 2)
                {
                  if ((*((_WORD *)v67 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v67, v10);
                }
                else
                {
                  *((_DWORD *)v67 + 6) -= 2;
                }
              }
LABEL_127:
              if (!v44)
                goto LABEL_189;
              v45 = *((_DWORD *)v44 + 6);
              v46 = v45 + 2;
              *((_DWORD *)v44 + 6) = v45 + 2;
              v47 = *((_BYTE *)&v78.var0 + 12) & 7;
              if (v47 > 4 || ((1 << v47) & 0x19) == 0 && !*((_QWORD *)v44 + 4))
              {
                v53 = 0;
                goto LABEL_186;
              }
              v48 = v45 + 4;
              *((_DWORD *)v44 + 6) = v45 + 4;
              v49 = v79;
              if (v79)
              {
                v50 = v44;
                if (((1 << v47) & 0x19) == 0)
                  v50 = (Node *)*((_QWORD *)v44 + 4);
                v51 = *((_WORD *)v79 + 14);
                if ((v51 & 0xF000) == 0x9000)
                {
                  if (**((WebCore::Node ***)v50 + 5) == v79
                    && (*((_WORD *)v50 + 14) & 0xF000) != 0x9000
                    && (*((_BYTE *)v50 + 22) & 8) != 0)
                  {
LABEL_143:
                    v53 = 0;
                    goto LABEL_184;
                  }
                }
                else if ((v51 & 4) != 0
                       && *((_QWORD *)v79 + 10)
                       && ((*((unsigned __int8 *)v50 + 22) ^ *((unsigned __int8 *)v79 + 22)) & 8) == 0)
                {
                  do
                    v50 = (Node *)*((_QWORD *)v50 + 4);
                  while (v50 != (Node *)v79 && v50 != 0);
                  if (v50)
                    goto LABEL_143;
                }
              }
              *((_DWORD *)v44 + 6) = v45 + 6;
              v69 = v44;
              if (v47 - 1 <= 1)
                v69 = (Node *)*((_QWORD *)v44 + 4);
              v53 = *((_QWORD *)v69 + 4) != *((_QWORD *)v49 + 4);
              if (v48)
              {
                *((_DWORD *)v44 + 6) = v48;
              }
              else
              {
                v74 = *((_WORD *)v44 + 15);
                if ((v74 & 0x400) != 0)
                  goto LABEL_213;
                WebCore::Node::removedLastRef((WebCore::Node *)v44, v10);
                v48 = *((_DWORD *)v44 + 6);
              }
LABEL_184:
              v46 = v48 - 2;
              if (v46)
              {
                *((_DWORD *)v44 + 6) = v46;
                goto LABEL_186;
              }
              v74 = *((_WORD *)v44 + 15);
LABEL_213:
              if ((v74 & 0x400) != 0)
                goto LABEL_216;
              WebCore::Node::removedLastRef((WebCore::Node *)v44, v10);
              v46 = *((_DWORD *)v44 + 6);
LABEL_186:
              v70 = v46 - 2;
              if (v70)
              {
                *((_DWORD *)v44 + 6) = v70;
                goto LABEL_188;
              }
              v74 = *((_WORD *)v44 + 15);
LABEL_216:
              if ((v74 & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v44, v10);
LABEL_188:
              if (!v53)
              {
LABEL_189:
                WebCore::VisiblePosition::canonicalPosition(a3, (uint64_t)&v77);
                v77.var1 = 1;
                WebCore::CompositeEditCommand::moveParagraphWithClones((unsigned int *)a1, &v78, &v77, (WebCore::Element *)*a5, v79);
                v71 = v77.var0.var0.var0;
                v77.var0.var0.var0 = 0;
                if (v71)
                {
                  if (*((_DWORD *)v71 + 6) == 2)
                  {
                    if ((*((_WORD *)v71 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v71, v10);
                  }
                  else
                  {
                    *((_DWORD *)v71 + 6) -= 2;
                  }
                }
              }
LABEL_192:
              v72 = v78.var0.var0.var0;
              v78.var0.var0.var0 = 0;
              if (v72)
              {
                if (*((_DWORD *)v72 + 6) == 2)
                {
                  if ((*((_WORD *)v72 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v72, v10);
                }
                else
                {
                  *((_DWORD *)v72 + 6) -= 2;
                }
              }
              v73 = v79;
              v79 = 0;
              if (v73)
              {
                if (*((_DWORD *)v73 + 6) == 2)
                {
                  if ((*((_WORD *)v73 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v73, v10);
                }
                else
                {
                  *((_DWORD *)v73 + 6) -= 2;
                }
              }
              goto LABEL_198;
            }
            if (v10)
              goto LABEL_123;
          }
LABEL_124:
          v79 = v10;
          if (!v10)
            goto LABEL_198;
          goto LABEL_125;
        }
        v34 = WebCore::editableRootForPosition((uint64_t)a2, 0);
        if (!v34)
          goto LABEL_200;
      }
      *(_DWORD *)(v34 + 24) += 2;
      goto LABEL_90;
    }
    v80 = v9;
    WebCore::enclosingBlock((uint64_t *)&v80, (WebCore::Node *)1, v76);
    v80 = 0;
    if (*((_DWORD *)v9 + 6) == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v9, v10);
    }
    else
    {
      *((_DWORD *)v9 + 6) -= 2;
    }
  }
  else
  {
    WebCore::enclosingList(0, a2, &v78);
    var0 = v78.var0.var0.var0;
    if (!v78.var0.var0.var0)
      goto LABEL_73;
    v80 = 0;
    WebCore::enclosingBlock((uint64_t *)&v80, (WebCore::Node *)1, v76);
    v80 = 0;
  }
  v12 = v76[0];
  if (!v76[0])
  {
    if (*((_DWORD *)var0 + 6) != 2)
    {
      *((_DWORD *)var0 + 6) -= 2;
      goto LABEL_73;
    }
    if ((*((_WORD *)var0 + 15) & 0x400) == 0)
    {
      v32 = (WebCore::Node *)var0;
      goto LABEL_72;
    }
    goto LABEL_73;
  }
  if ((*((_WORD *)v76[0] + 14) & 0x10) != 0
    && *(_QWORD *)(*((_QWORD *)v76[0] + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::liTag + 24))
  {
    v14 = v76[0];
    while (1)
    {
      v14 = (WebCore::Node *)(*((_QWORD *)v14 + 6) & 0xFFFFFFFFFFFFLL);
      if (!v14)
        break;
      if ((*((_WORD *)v14 + 14) & 8) != 0)
      {
        *((_DWORD *)v14 + 6) += 2;
        break;
      }
    }
    v15 = v12;
    while (1)
    {
      v15 = (WebCore::Node *)*((_QWORD *)v15 + 7);
      if (!v15)
        break;
      if ((*((_WORD *)v15 + 14) & 8) != 0)
      {
        *((_DWORD *)v15 + 6) += 2;
        break;
      }
    }
    v75 = a1;
    if ((*((_WORD *)var0 + 14) & 0x10) != 0
      && *(_QWORD *)(*((_QWORD *)var0 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::ulTag + 24))
    {
      v16 = *((_QWORD *)a1 + 2);
      *(_DWORD *)(v16 + 24) += 2;
      v21 = bmalloc::api::isoAllocate();
      v19 = v21;
      *(_OWORD *)(v21 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v21 + 24) = 0x101C00000002;
      *(_QWORD *)(v21 + 32) = 0;
      *(_QWORD *)(v21 + 40) = v16 + 96;
      *(_OWORD *)(v21 + 48) = 0u;
      *(_OWORD *)(v21 + 64) = 0u;
      ++*(_DWORD *)(v16 + 3324);
      *(_QWORD *)(v21 + 80) = 0;
      *(_QWORD *)(v21 + 88) = 0;
      v22 = WebCore::HTMLNames::ulTag;
      if (WebCore::HTMLNames::ulTag)
        ++*(_DWORD *)WebCore::HTMLNames::ulTag;
      *(_QWORD *)(v21 + 96) = v22;
      *(_QWORD *)(v21 + 104) = 0;
      *(_QWORD *)v21 = off_1E33D09E0;
    }
    else
    {
      v16 = *((_QWORD *)a1 + 2);
      *(_DWORD *)(v16 + 24) += 2;
      v17 = bmalloc::api::isoAllocate();
      v19 = v17;
      *(_OWORD *)(v17 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v17 + 24) = 0x101C00000002;
      *(_QWORD *)(v17 + 32) = 0;
      *(_QWORD *)(v17 + 40) = v16 + 96;
      *(_OWORD *)(v17 + 48) = 0u;
      *(_OWORD *)(v17 + 64) = 0u;
      ++*(_DWORD *)(v16 + 3324);
      *(_QWORD *)(v17 + 80) = 0;
      *(_QWORD *)(v17 + 88) = 0;
      v20 = WebCore::HTMLNames::olTag;
      if (WebCore::HTMLNames::olTag)
        ++*(_DWORD *)WebCore::HTMLNames::olTag;
      *(_QWORD *)(v17 + 96) = v20;
      *(_QWORD *)(v17 + 104) = 0;
      *(_QWORD *)v17 = off_1E33C7068;
      *(_BYTE *)(v17 + 112) = 0;
      *(_BYTE *)(v17 + 116) = 0;
      *(_BYTE *)(v17 + 120) = 0;
      *(_BYTE *)(v17 + 124) = 0;
      *(_BYTE *)(v17 + 128) = 0;
    }
    if (*(_DWORD *)(v16 + 24) == 2)
    {
      if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v16, v18);
    }
    else
    {
      *(_DWORD *)(v16 + 24) -= 2;
    }
    *(_DWORD *)(v19 + 24) += 2;
    v78.var0.var0.var0 = (Node *)v19;
    WebCore::CompositeEditCommand::insertNodeBefore(v75, (uint64_t *)&v78, (uint64_t)v12, 1);
    v24 = v78.var0.var0.var0;
    v78.var0.var0.var0 = 0;
    if (v24)
    {
      if (*((_DWORD *)v24 + 6) == 2)
      {
        if ((*((_WORD *)v24 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v24, v23);
      }
      else
      {
        *((_DWORD *)v24 + 6) -= 2;
      }
    }
    WebCore::VisiblePosition::canonicalPosition(a2, (uint64_t)&v78);
    v78.var1 = 1;
    WebCore::VisiblePosition::canonicalPosition(a3, (uint64_t)&v77);
    v77.var1 = 1;
    a1 = v75;
    WebCore::CompositeEditCommand::moveParagraphWithClones((unsigned int *)v75, &v78, &v77, (WebCore::Element *)v19, v12);
    v27 = v77.var0.var0.var0;
    v77.var0.var0.var0 = 0;
    if (v27)
    {
      if (*((_DWORD *)v27 + 6) == 2)
      {
        if ((*((_WORD *)v27 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v27, v25);
      }
      else
      {
        *((_DWORD *)v27 + 6) -= 2;
      }
    }
    v28 = v78.var0.var0.var0;
    v78.var0.var0.var0 = 0;
    if (v28)
    {
      if (*((_DWORD *)v28 + 6) == 2)
      {
        if ((*((_WORD *)v28 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v28, v25);
      }
      else
      {
        *((_DWORD *)v28 + 6) -= 2;
      }
    }
    if (WebCore::canMergeLists(v14, (WebCore::Element *)v19, v26))
      WebCore::CompositeEditCommand::mergeIdenticalElements(v75, v14, (WebCore::Element *)v19);
    if (WebCore::canMergeLists((WebCore *)v19, v15, v29))
      WebCore::CompositeEditCommand::mergeIdenticalElements(v75, (WebCore::Element *)v19, v15);
    if (*(_DWORD *)(v19 + 24) == 2)
    {
      if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v19, v10);
    }
    else
    {
      *(_DWORD *)(v19 + 24) -= 2;
    }
    if (v15)
    {
      if (*((_DWORD *)v15 + 6) == 2)
      {
        if ((*((_WORD *)v15 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v15, v10);
      }
      else
      {
        *((_DWORD *)v15 + 6) -= 2;
      }
    }
    if (v14)
    {
      if (*((_DWORD *)v14 + 6) == 2)
      {
        if ((*((_WORD *)v14 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v14, v10);
      }
      else
      {
        *((_DWORD *)v14 + 6) -= 2;
      }
    }
    v13 = 1;
  }
  else
  {
    v13 = 0;
  }
  if (*((_DWORD *)v12 + 6) == 2)
  {
    if ((*((_WORD *)v12 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v12, v10);
  }
  else
  {
    *((_DWORD *)v12 + 6) -= 2;
  }
  if (*((_DWORD *)var0 + 6) != 2)
  {
    *((_DWORD *)var0 + 6) -= 2;
    if ((v13 & 1) != 0)
      goto LABEL_57;
    goto LABEL_73;
  }
  if ((*((_WORD *)var0 + 15) & 0x400) != 0)
  {
    if (!v13)
      goto LABEL_73;
  }
  else
  {
    WebCore::Node::removedLastRef((WebCore::Node *)var0, v10);
    if ((v13 & 1) == 0)
      goto LABEL_73;
  }
LABEL_57:
  result = (unsigned int *)*a5;
  *a5 = 0;
  if (!result)
    return result;
  v31 = result[6] - 2;
  if (result[6] != 2)
    goto LABEL_202;
  if ((*((_WORD *)result + 15) & 0x400) == 0)
    return WebCore::Node::removedLastRef((WebCore::Node *)result, v10);
  return result;
}

unsigned int *WebCore::InsertIntoTextNodeCommand::doApply(WebCore::InsertIntoTextNodeCommand *this)
{
  WebCore::Document *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int *result;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  WebCore::Editor *v11;
  void *v12;
  WebCore::Editor *v13;
  uint64_t v14;
  void *v15;
  _BYTE v16[8];
  WTF::StringImpl *v17;
  char v18;

  v2 = (WebCore::Document *)*((_QWORD *)this + 2);
  if ((*(_QWORD *)(*((_QWORD *)v2 + 85) + 688) & 0x8000000) == 0)
    goto LABEL_4;
  v3 = *((_QWORD *)v2 + 382);
  if (!v3)
  {
    v11 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v11, v2);
    v13 = (WebCore::Editor *)*((_QWORD *)v2 + 382);
    *((_QWORD *)v2 + 382) = v11;
    if (v13)
    {
      WebCore::Editor::~Editor(v13, v12);
      if (*(_DWORD *)v14)
      {
        *(_QWORD *)(v14 + 496) = 0;
        *(_OWORD *)(v14 + 464) = 0u;
        *(_OWORD *)(v14 + 480) = 0u;
        *(_OWORD *)(v14 + 432) = 0u;
        *(_OWORD *)(v14 + 448) = 0u;
        *(_OWORD *)(v14 + 400) = 0u;
        *(_OWORD *)(v14 + 416) = 0u;
        *(_OWORD *)(v14 + 368) = 0u;
        *(_OWORD *)(v14 + 384) = 0u;
        *(_OWORD *)(v14 + 336) = 0u;
        *(_OWORD *)(v14 + 352) = 0u;
        *(_OWORD *)(v14 + 304) = 0u;
        *(_OWORD *)(v14 + 320) = 0u;
        *(_OWORD *)(v14 + 272) = 0u;
        *(_OWORD *)(v14 + 288) = 0u;
        *(_OWORD *)(v14 + 240) = 0u;
        *(_OWORD *)(v14 + 256) = 0u;
        *(_OWORD *)(v14 + 208) = 0u;
        *(_OWORD *)(v14 + 224) = 0u;
        *(_OWORD *)(v14 + 176) = 0u;
        *(_OWORD *)(v14 + 192) = 0u;
        *(_OWORD *)(v14 + 144) = 0u;
        *(_OWORD *)(v14 + 160) = 0u;
        *(_OWORD *)(v14 + 112) = 0u;
        *(_OWORD *)(v14 + 128) = 0u;
        *(_OWORD *)(v14 + 80) = 0u;
        *(_OWORD *)(v14 + 96) = 0u;
        *(_OWORD *)(v14 + 48) = 0u;
        *(_OWORD *)(v14 + 64) = 0u;
        *(_OWORD *)(v14 + 16) = 0u;
        *(_OWORD *)(v14 + 32) = 0u;
        *(_OWORD *)v14 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v14, v15);
      }
    }
    v3 = *((_QWORD *)v2 + 382);
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 8) + 8) + 128))(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 8)) & 1) == 0)
  {
    WebCore::Document::updateLayout(*((_QWORD *)this + 2), 2u, 0);
    v4 = 1;
  }
  else
  {
LABEL_4:
    v4 = 0;
  }
  v5 = *((_QWORD *)this + 31);
  *(_DWORD *)(v5 + 24) += 2;
  result = (unsigned int *)WebCore::Node::computeEditability(v5, 0, 1);
  if ((_DWORD)result)
  {
    if (v4)
    {
      v8 = *(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL;
      if (v8)
      {
        if ((*(_BYTE *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195AF85B0);
        }
        ++*(_DWORD *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
        v9 = *((_QWORD *)this + 33);
        if (v9)
          LODWORD(v9) = *(_DWORD *)(v9 + 4);
        WebCore::RenderText::momentarilyRevealLastTypedCharacter(v8, v9 + *((_DWORD *)this + 64));
        v10 = *(_DWORD *)(v8 + 16);
        if (!v10)
        {
          __break(0xC471u);
          JUMPOUT(0x195AF85D0);
        }
        *(_DWORD *)(v8 + 16) = v10 - 1;
      }
    }
    result = (unsigned int *)WebCore::CharacterData::insertData(v5, (WebCore::InsertIntoTextNodeCommand *)((char *)this + 264), *((unsigned int *)this + 64), (uint64_t)v16);
    if (v18)
    {
      result = (unsigned int *)v17;
      v17 = 0;
      if (result)
      {
        if (*result == 2)
          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v7);
        else
          *result -= 2;
      }
    }
  }
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v5, v7);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return result;
}

unsigned int *WebCore::InsertIntoTextNodeCommand::doReapply(WebCore::InsertIntoTextNodeCommand *this)
{
  uint64_t v2;
  unsigned int *result;
  WTF::StringImpl *v4;
  _BYTE v5[8];
  WTF::StringImpl *v6;
  char v7;

  v2 = *((_QWORD *)this + 31);
  *(_DWORD *)(v2 + 24) += 2;
  result = (unsigned int *)WebCore::Node::computeEditability(v2, 0, 1);
  if ((_DWORD)result)
  {
    result = (unsigned int *)WebCore::CharacterData::insertData(v2, (WebCore::InsertIntoTextNodeCommand *)((char *)this + 264), *((unsigned int *)this + 64), (uint64_t)v5);
    if (v7)
    {
      result = (unsigned int *)v6;
      v6 = 0;
      if (result)
      {
        if (*result == 2)
          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v4);
        else
          *result -= 2;
      }
    }
  }
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v2, v4);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return result;
}

unsigned int *WebCore::InsertIntoTextNodeCommand::doUnapply(WebCore::InsertIntoTextNodeCommand *this)
{
  uint64_t v2;
  unsigned int *result;
  WTF::StringImpl *v4;
  const WTF::String *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF::StringImpl *v11;

  v2 = *((_QWORD *)this + 31);
  *(_DWORD *)(v2 + 24) += 2;
  result = (unsigned int *)WebCore::Node::computeEditability(v2, 0, 1);
  if (!(_DWORD)result)
    goto LABEL_12;
  v5 = (const WTF::String *)*((unsigned int *)this + 64);
  v6 = *((_QWORD *)this + 33);
  if (v6)
    LODWORD(v6) = *(_DWORD *)(v6 + 4);
  result = (unsigned int *)(v2 + 80);
  v7 = *(_QWORD *)(v2 + 80);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 + 4);
    if (v8 < v5)
      goto LABEL_12;
  }
  else
  {
    if ((_DWORD)v5)
      goto LABEL_12;
    v8 = 0;
  }
  v9 = v8 - (_DWORD)v5;
  if (v9 >= v6)
    v10 = v6;
  else
    v10 = v9;
  WTF::makeStringByRemoving((WTF *)result, v5);
  (*(void (**)(uint64_t, WTF::StringImpl **, const WTF::String *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v2 + 376))(v2, &v11, v5, v10, 0, 1);
  result = (unsigned int *)v11;
  v11 = 0;
  if (result)
  {
    if (*result == 2)
      result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v4);
    else
      *result -= 2;
  }
LABEL_12:
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v2, v4);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::InsertLineBreakCommand::preservesTypingStyle(WebCore::InsertLineBreakCommand *this)
{
  return 1;
}

void WebCore::InsertLineBreakCommand::doApply(WebCore::Node **this)
{
  WebCore::Node *v2;
  WebCore::Node *v3;
  WebCore::Node *v4;
  WebCore::Node *v5;
  WebCore::Node *v6;
  WebCore::Node *v7;
  __int16 v8;
  int v9;
  int v10;
  const WebCore::VisiblePosition *v11;
  WebCore::Node *v12;
  void *v13;
  WebCore::Node *v14;
  WebCore::Node *v15;
  void *v16;
  WebCore::Node *v17;
  WebCore::Node *v18;
  unsigned int v19;
  int v20;
  int v21;
  void *v22;
  WebCore::Node *v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  void *v28;
  WebCore::Node *v29;
  WebCore::Node *v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (**v37)(WebCore::Node *__hidden);
  WebCore::Node *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  _DWORD *v41;
  VisiblePosition *v42;
  uint64_t (*v43)();
  _BOOL4 v44;
  WebCore::Node *v45;
  int v46;
  WebCore::Node *v47;
  int v48;
  __int16 v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  WebCore::Node *v54;
  int v55;
  __int16 v56;
  uint64_t v57;
  signed int v58;
  void *v59;
  WebCore::Node *v60;
  void *v61;
  WebCore::Node *v62;
  uint64_t (*v63)();
  BOOL v64;
  WebCore::Node *v65;
  __int16 v66;
  uint64_t v67;
  signed int v68;
  WebCore::Node *v69;
  __int16 v70;
  WebCore::Node *v71;
  char v72;
  WebCore::Node *v73;
  int v74;
  void *v75;
  WebCore::Node *v76;
  uint64_t v77;
  uint64_t v78;
  __int16 v79;
  char v80;
  uint64_t v81;
  void *v82;
  WebCore::Node *v83;
  int v84;
  const WebCore::VisiblePosition *v85;
  void *v86;
  WebCore::Node *v87;
  WebCore::Node *v88;
  WebCore::Node *v89;
  uint64_t v90;
  BOOL v91;
  void *v92;
  WebCore::Node *v93;
  void *v94;
  int v95;
  int v96;
  int v97;
  BOOL v98;
  uint64_t v99;
  int v100;
  WTF *v101;
  void *v102;
  WebCore::Node *v103;
  void *v104;
  void *v105;
  WebCore::Node *v106;
  __int16 v107;
  char v108;
  WebCore::Node *v109;
  uint64_t v110;
  WTF::StringImpl *v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  uint64_t v114;
  _DWORD *v115;
  int v116;
  void *v117;
  WebCore::Node *v118;
  char v119;
  char v120;
  WebCore::Node *v121;
  WebCore::Node *v122;
  char v123;
  WebCore::Node *v124;
  int v125;
  WebCore::Node *v126;
  BOOL v127;
  int v128;
  WebCore::Node *v129;
  void *v130;
  WebCore::Node *v131;
  WebCore::Node *v132;
  void *v133;
  WebCore::Node *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  int v140;
  WebCore::Node *v141;
  int v142;
  char v143;
  WebCore::Node *v144;
  unsigned int v145;
  char v146;
  WebCore::Node *v147;
  unsigned int v148;
  char v149;
  uint64_t v150;
  int v151;
  char v152;
  uint64_t v153;
  int v154;
  char v155;
  uint64_t v156;
  int v157;
  char v158;
  uint64_t v159;
  int v160;
  char v161;
  __int16 v162;
  char v163;
  WebCore::Node *v164;
  unsigned int v165;
  char v166;
  char v167;
  WebCore::Node *v168;
  unsigned int v169;
  char v170;
  WebCore::Node *v171;
  unsigned int v172;
  char v173;
  char v174;
  WebCore::Node *v175;
  int v176;
  char v177;
  WebCore::Node *v178;
  int v179;
  char v180;
  WebCore::Node *v181;
  int v182;
  char v183;
  WebCore::Node *v184;
  int v185;
  char v186;
  WebCore::Node *v187;
  int v188;
  char v189;
  WebCore::Node *v190;
  int v191;
  char v192;
  __int16 v193;
  char v194;

  WebCore::CompositeEditCommand::deleteSelection((WebCore::Node *)this, 0, 1, 0, 1, 1);
  v2 = this[16];
  if (v2)
    *((_DWORD *)v2 + 6) += 2;
  v175 = v2;
  v176 = *((_DWORD *)this + 34);
  v177 = *((_BYTE *)this + 140);
  v3 = this[18];
  if (v3)
    *((_DWORD *)v3 + 6) += 2;
  v178 = v3;
  v179 = *((_DWORD *)this + 38);
  v180 = *((_BYTE *)this + 156);
  v4 = this[20];
  if (v4)
    *((_DWORD *)v4 + 6) += 2;
  v181 = v4;
  v182 = *((_DWORD *)this + 42);
  v183 = *((_BYTE *)this + 172);
  v5 = this[22];
  if (v5)
    *((_DWORD *)v5 + 6) += 2;
  v184 = v5;
  v185 = *((_DWORD *)this + 46);
  v186 = *((_BYTE *)this + 188);
  v6 = this[24];
  if (v6)
    *((_DWORD *)v6 + 6) += 2;
  v187 = v6;
  v7 = this[26];
  v188 = *((_DWORD *)this + 50);
  v189 = *((_BYTE *)this + 204);
  if (v7)
    *((_DWORD *)v7 + 6) += 2;
  v190 = v7;
  v8 = *((_WORD *)this + 112);
  v191 = *((_DWORD *)this + 54);
  v192 = *((_BYTE *)this + 220);
  v193 = v8;
  v194 = *((_BYTE *)this + 226);
  v9 = HIBYTE(v8);
  if (HIBYTE(v8) && (!v6 || (*((_BYTE *)v6 + 22) & 8) != 0) && (!v7 || (*((_BYTE *)v7 + 22) & 8) != 0))
  {
    v10 = v193;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v187, (uint64_t)&v171);
    v174 = 1;
    if (v9 != 2 && !v10)
    {
      v132 = v171;
      if (!v171)
        goto LABEL_186;
      *((_DWORD *)v171 + 6) += 2;
      v144 = v132;
      v145 = v172;
      v146 = v173;
      LOBYTE(v147) = 0;
      if (!WebCore::inSameLine((WebCore *)&v171, (const WebCore::VisiblePosition *)&v144, v11))
        v174 = 0;
      v134 = v144;
      v144 = 0;
      if (v134)
      {
        if (*((_DWORD *)v134 + 6) == 2)
        {
          if ((*((_WORD *)v134 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v134, v133);
        }
        else
        {
          *((_DWORD *)v134 + 6) -= 2;
        }
      }
    }
    v12 = v171;
    if (v171)
    {
      *((_DWORD *)v171 + 6) += 2;
      v168 = v12;
      v169 = v172;
      v170 = v173;
      WebCore::CompositeEditCommand::positionAvoidingSpecialElementBoundary((unsigned int *)this, (const WebCore::Position *)&v168, (uint64_t)&v144);
      v14 = v144;
      v144 = 0;
      v15 = v168;
      v168 = v14;
      if (v15)
      {
        if (*((_DWORD *)v15 + 6) == 2)
        {
          if ((*((_WORD *)v15 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v15, v13);
            v29 = v144;
            v169 = v145;
            v170 = v146;
            v144 = 0;
            if (v29)
            {
              if (*((_DWORD *)v29 + 6) == 2)
              {
                if ((*((_WORD *)v29 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v29, v28);
              }
              else
              {
                *((_DWORD *)v29 + 6) -= 2;
              }
            }
LABEL_25:
            WebCore::CompositeEditCommand::positionOutsideTabSpan((WebCore::CompositeEditCommand *)this, (const WebCore::Position *)&v168, (uint64_t)&v144);
            v17 = v144;
            v144 = 0;
            v18 = v168;
            v168 = v17;
            if (!v18)
            {
              v169 = v145;
              v170 = v146;
              if (!v17)
                goto LABEL_180;
              goto LABEL_30;
            }
            if (*((_DWORD *)v18 + 6) == 2)
            {
              if ((*((_WORD *)v18 + 15) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef(v18, v16);
                v30 = v144;
                v169 = v145;
                v170 = v146;
                v144 = 0;
                if (v30)
                {
                  if (*((_DWORD *)v30 + 6) == 2)
                  {
                    if ((*((_WORD *)v30 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v30, v16);
                  }
                  else
                  {
                    *((_DWORD *)v30 + 6) -= 2;
                  }
                }
LABEL_29:
                v17 = v168;
                if (!v168)
                {
LABEL_180:
                  v88 = v168;
                  v168 = 0;
                  if (v88)
                  {
                    if (*((_DWORD *)v88 + 6) == 2)
                    {
                      if ((*((_WORD *)v88 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v88, v16);
                    }
                    else
                    {
                      *((_DWORD *)v88 + 6) -= 2;
                    }
                  }
                  v89 = v171;
                  v171 = 0;
                  if (v89)
                  {
                    if (*((_DWORD *)v89 + 6) == 2)
                    {
                      if ((*((_WORD *)v89 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v89, v16);
                    }
                    else
                    {
                      *((_DWORD *)v89 + 6) -= 2;
                    }
                  }
                  goto LABEL_186;
                }
LABEL_30:
                v19 = v170 & 7;
                if (v19 > 4)
                  goto LABEL_180;
                if (((1 << v19) & 0x19) == 0)
                {
                  v17 = (WebCore::Node *)*((_QWORD *)v17 + 4);
                  if (!v17)
                    goto LABEL_180;
                }
                *((_DWORD *)v17 + 6) += 2;
                v20 = WebCore::Node::computeEditability((uint64_t)v17, 0, 0);
                v21 = *((_DWORD *)v17 + 6) - 2;
                if (!v20)
                {
                  if (*((_DWORD *)v17 + 6) != 2)
                  {
LABEL_179:
                    *((_DWORD *)v17 + 6) = v21;
                    goto LABEL_180;
                  }
LABEL_47:
                  if ((*((_WORD *)v17 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v17, v16);
                  goto LABEL_180;
                }
                if (*((_DWORD *)v17 + 6) == 2)
                {
                  if ((*((_WORD *)v17 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v17, v16);
                }
                else
                {
                  *((_DWORD *)v17 + 6) = v21;
                }
                v17 = this[2];
                *((_DWORD *)v17 + 6) += 2;
                WebCore::Position::parentAnchoredEquivalent((uint64_t)&v168, (uint64_t)&v144);
                v23 = v144;
                if (v144)
                {
                  v24 = *((_DWORD *)v144 + 6);
                  *((_DWORD *)v144 + 6) = v24 + 2;
                  v144 = 0;
                  if (v24)
                  {
                    *((_DWORD *)v23 + 6) = v24;
                  }
                  else if ((*((_WORD *)v23 + 15) & 0x400) == 0)
                  {
                    WebCore::Node::removedLastRef(v23, v22);
                  }
                  v25 = *((_QWORD *)v23 + 8) & 0xFFFFFFFFFFFFLL;
                  if (!v25)
                    goto LABEL_68;
                  if ((*(_BYTE *)((*((_QWORD *)v23 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                    v25 = *(_QWORD *)(*(_QWORD *)((*((_QWORD *)v23 + 8) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
                  v26 = *(_DWORD *)(v25 + 120);
                  v27 = (v26 >> 27) & 7;
                  if ((v26 & 0x40000000) == 0 && v27 == 3)
                    goto LABEL_68;
                  if (!v27)
                  {
                    if (*((_DWORD *)v23 + 6) == 2)
                    {
                      if ((*((_WORD *)v23 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v23, v22);
                    }
                    else
                    {
                      *((_DWORD *)v23 + 6) -= 2;
                    }
                    goto LABEL_71;
                  }
                  v31 = (v26 & 0x40000000) != 0 ? 1 : 2;
                  if (v27 == v31)
                  {
LABEL_68:
                    v33 = 0;
                  }
                  else
                  {
                    v32 = (v26 >> 30) & 1;
                    if (v27 == 1)
                      v33 = v32;
                    else
                      v33 = 1;
                  }
                  if (*((_DWORD *)v23 + 6) == 2)
                  {
                    if ((*((_WORD *)v23 + 15) & 0x400) != 0)
                    {
                      if (v33)
                        goto LABEL_71;
                    }
                    else
                    {
                      WebCore::Node::removedLastRef(v23, v22);
                      if ((v33 & 1) != 0)
                        goto LABEL_71;
                    }
                  }
                  else
                  {
                    *((_DWORD *)v23 + 6) -= 2;
                    if ((v33 & 1) != 0)
                    {
LABEL_71:
                      v34 = bmalloc::api::isoAllocate();
                      v35 = v34;
                      *(_OWORD *)(v34 + 8) = xmmword_1968BC9D0;
                      *(_QWORD *)(v34 + 24) = 0x101C00000002;
                      *(_QWORD *)(v34 + 32) = 0;
                      *(_QWORD *)(v34 + 40) = (char *)v17 + 96;
                      *(_OWORD *)(v34 + 48) = 0u;
                      *(_OWORD *)(v34 + 64) = 0u;
                      ++*((_DWORD *)v17 + 831);
                      *(_QWORD *)(v34 + 80) = 0;
                      *(_QWORD *)(v34 + 88) = 0;
                      v36 = WebCore::HTMLNames::brTag;
                      if (WebCore::HTMLNames::brTag)
                        ++*(_DWORD *)WebCore::HTMLNames::brTag;
                      *(_QWORD *)(v34 + 96) = v36;
                      *(_QWORD *)(v34 + 104) = 0;
                      v37 = off_1E33B4C28;
                      goto LABEL_82;
                    }
                  }
                }
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v38 = v144;
                v39 = bmalloc::api::isoAllocate();
                v35 = v39;
                *(_OWORD *)(v39 + 8) = xmmword_1968BC9D0;
                *(_QWORD *)(v39 + 24) = 0x300300000002;
                *(_QWORD *)(v39 + 32) = 0;
                *(_QWORD *)(v39 + 40) = (char *)v17 + 96;
                *(_OWORD *)(v39 + 48) = 0u;
                *(_OWORD *)(v39 + 64) = 0u;
                ++*((_DWORD *)v17 + 831);
                if (v38)
                {
                  v139 = *(_DWORD *)v38;
                  *(_DWORD *)v38 += 2;
                  *(_QWORD *)(v39 + 80) = v38;
                  *(_QWORD *)v39 = off_1E33A8078;
                  if (v139)
                    *(_DWORD *)v38 = v139;
                  else
                    WTF::StringImpl::destroy(v38, v40);
LABEL_83:
                  WebCore::Document::updateLayout((uint64_t)v17, 2u, 0);
                  if (v171)
                    v43 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
                  else
                    v43 = 0;
                  if (!v43)
                    goto LABEL_101;
                  WebCore::endOfParagraph((WebCore::Node *)&v171, 1, &v144);
                  v44 = WebCore::operator==((uint64_t *)&v171, (uint64_t *)&v144);
                  v45 = v144;
                  v144 = 0;
                  if (v45)
                  {
                    if (*((_DWORD *)v45 + 6) == 2)
                    {
                      if ((*((_WORD *)v45 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v45, v42);
                    }
                    else
                    {
                      *((_DWORD *)v45 + 6) -= 2;
                    }
                  }
                  if (!v44 || WebCore::lineBreakExistsAtVisiblePosition(&v171, v42))
                  {
LABEL_101:
                    if ((v170 & 8) == 0 && ((v46 = v170 & 7, v46 == 4) || v46 == 2))
                    {
                      v47 = v168;
                      if (v168)
                      {
                        v48 = *((_DWORD *)v168 + 6);
                        *((_DWORD *)v168 + 6) = v48 + 2;
                        v49 = *((_WORD *)v47 + 14);
                        if ((v49 & 1) != 0)
                        {
                          v135 = *((_QWORD *)v47 + 10);
                          if (v135)
                            v51 = *(_DWORD *)(v135 + 4);
                          else
                            v51 = 0;
                        }
                        else if ((v49 & 4) != 0 && (v50 = *((_QWORD *)v47 + 10)) != 0)
                        {
                          v51 = 0;
                          do
                          {
                            ++v51;
                            v50 = *(_QWORD *)(v50 + 56);
                          }
                          while (v50);
                        }
                        else
                        {
                          v51 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v47 + 208))(v47) ^ 1;
                          v48 = *((_DWORD *)v47 + 6) - 2;
                        }
                        if (v48)
                        {
                          *((_DWORD *)v47 + 6) = v48;
                        }
                        else if ((*((_WORD *)v47 + 15) & 0x400) == 0)
                        {
                          WebCore::Node::removedLastRef(v47, v42);
                        }
                      }
                      else
                      {
                        v51 = 0;
                      }
                    }
                    else
                    {
                      v51 = v169;
                    }
                    v52 = *((_QWORD *)v168 + 8) & 0xFFFFFFFFFFFFLL;
                    if (v52)
                      LODWORD(v52) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 528))(v52);
                    if (v51 <= (int)v52)
                    {
                      *(_DWORD *)(v35 + 24) += 2;
                      v144 = (WebCore::Node *)v35;
                      WebCore::CompositeEditCommand::insertNodeAt((unsigned int *)this, (uint64_t *)&v144, (WebCore::Position *)&v168);
                      v60 = v144;
                      v144 = 0;
                      if (v60)
                      {
                        if (*((_DWORD *)v60 + 6) == 2)
                        {
                          if ((*((_WORD *)v60 + 15) & 0x400) == 0)
                            WebCore::Node::removedLastRef(v60, v59);
                        }
                        else
                        {
                          *((_DWORD *)v60 + 6) -= 2;
                        }
                      }
                      *(_DWORD *)(v35 + 24) += 2;
                      v141 = (WebCore::Node *)v35;
                      v142 = 0;
                      v143 = v143 & 0xF0 | 1;
                      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v141, (uint64_t)&v164);
                      v167 = 1;
                      v62 = v164;
                      if (v164)
                        v63 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
                      else
                        v63 = 0;
                      if (v63)
                      {
                        WebCore::startOfParagraph((uint64_t)&v164, 1, &v144);
                        v64 = WebCore::operator==((uint64_t *)&v164, (uint64_t *)&v144);
                        v65 = v144;
                        v144 = 0;
                        if (v65)
                        {
                          if (*((_DWORD *)v65 + 6) == 2)
                          {
                            if ((*((_WORD *)v65 + 15) & 0x400) == 0)
                              WebCore::Node::removedLastRef(v65, v61);
                          }
                          else
                          {
                            *((_DWORD *)v65 + 6) -= 2;
                          }
                        }
                        v62 = v164;
                      }
                      else
                      {
                        v64 = 0;
                      }
                      v164 = 0;
                      if (v62)
                      {
                        if (*((_DWORD *)v62 + 6) == 2)
                        {
                          if ((*((_WORD *)v62 + 15) & 0x400) == 0)
                            WebCore::Node::removedLastRef(v62, v61);
                        }
                        else
                        {
                          *((_DWORD *)v62 + 6) -= 2;
                        }
                      }
                      if (*(_DWORD *)(v35 + 24) == 2)
                      {
                        if ((*(_WORD *)(v35 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v35, v61);
                      }
                      else
                      {
                        *(_DWORD *)(v35 + 24) -= 2;
                      }
                      if (v64)
                      {
LABEL_148:
                        WebCore::positionInParentAfterNode(v35, (WebCore::Node *)v61, (uint64_t)&v164);
                        v72 = *((_BYTE *)this + 226) & 2;
                        v73 = v164;
                        if (v164)
                        {
                          v74 = *((_DWORD *)v164 + 6);
                          v145 = v165;
                          v146 = v166;
                          *((_DWORD *)v164 + 6) = v74 + 4;
                        }
                        else
                        {
                          v145 = v165;
                          v146 = v166;
                        }
                        v144 = v73;
                        v147 = v73;
                        v148 = v165;
                        v149 = v166;
                        v150 = 0;
                        v151 = 0;
                        v152 &= 0xF0u;
                        v153 = 0;
                        v154 = 0;
                        v155 &= 0xF0u;
                        v156 = 0;
                        v157 = 0;
                        v158 &= 0xF0u;
                        v159 = 0;
                        v160 = 0;
                        v161 &= 0xF0u;
                        v162 = 1;
                        v163 = v163 & 0xFD | v72;
                        WebCore::VisibleSelection::validate((uint64_t)&v144, 0);
                        WebCore::EditCommand::setEndingSelection((uint64_t *)this, (const WebCore::VisibleSelection *)&v144);
                        WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v144);
                        v76 = v164;
                        v164 = 0;
                        if (!v76)
                          goto LABEL_153;
LABEL_151:
                        if (*((_DWORD *)v76 + 6) != 2)
                        {
                          *((_DWORD *)v76 + 6) -= 2;
                          goto LABEL_153;
                        }
                        if ((*((_WORD *)v76 + 15) & 0x400) == 0)
                          goto LABEL_269;
                        goto LABEL_153;
                      }
                      (*(void (**)(WebCore::Node **__return_ptr, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v35 + 136))(&v144, v35, *(_QWORD *)(*(_QWORD *)(v35 + 40) + 8), 0);
                      WebCore::CompositeEditCommand::insertNodeBefore((WebCore::CompositeEditCommand *)this, (uint64_t *)&v144, v35, 1);
LABEL_145:
                      v71 = v144;
                      v144 = 0;
                      if (v71)
                      {
                        if (*((_DWORD *)v71 + 6) == 2)
                        {
                          if ((*((_WORD *)v71 + 15) & 0x400) == 0)
                            WebCore::Node::removedLastRef(v71, v61);
                        }
                        else
                        {
                          *((_DWORD *)v71 + 6) -= 2;
                        }
                      }
                      goto LABEL_148;
                    }
                    if ((v170 & 8) == 0 && ((v53 = v170 & 7, v53 == 4) || v53 == 2))
                    {
                      v54 = v168;
                      if (v168)
                      {
                        v55 = *((_DWORD *)v168 + 6);
                        *((_DWORD *)v168 + 6) = v55 + 2;
                        v56 = *((_WORD *)v54 + 14);
                        if ((v56 & 1) != 0)
                        {
                          v137 = *((_QWORD *)v54 + 10);
                          if (v137)
                            v58 = *(_DWORD *)(v137 + 4);
                          else
                            v58 = 0;
                        }
                        else if ((v56 & 4) != 0 && (v57 = *((_QWORD *)v54 + 10)) != 0)
                        {
                          v58 = 0;
                          do
                          {
                            ++v58;
                            v57 = *(_QWORD *)(v57 + 56);
                          }
                          while (v57);
                        }
                        else
                        {
                          v58 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v54 + 208))(v54) ^ 1;
                          v55 = *((_DWORD *)v54 + 6) - 2;
                        }
                        if (v55)
                        {
                          *((_DWORD *)v54 + 6) = v55;
                        }
                        else if ((*((_WORD *)v54 + 15) & 0x400) == 0)
                        {
                          WebCore::Node::removedLastRef(v54, v42);
                        }
                      }
                      else
                      {
                        v58 = 0;
                      }
                    }
                    else
                    {
                      v58 = v169;
                    }
                    v66 = *((_WORD *)v168 + 14);
                    if ((v66 & 2) != 0 && (*((_QWORD *)v168 + 8) & 0xFFFFFFFFFFFFLL) != 0)
                    {
                      if ((*(_BYTE *)((*((_QWORD *)v168 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x195AF9C84);
                      }
                      v68 = WebCore::RenderText::caretMaxOffset((WebCore::RenderText *)(*((_QWORD *)v168 + 8) & 0xFFFFFFFFFFFFLL), (WebCore::RenderObject *)v42);
                    }
                    else if ((v66 & 1) != 0)
                    {
                      v136 = *((_QWORD *)v168 + 10);
                      if (v136)
                        v68 = *(_DWORD *)(v136 + 4);
                      else
                        v68 = 0;
                    }
                    else if ((v66 & 4) != 0 && (v67 = *((_QWORD *)v168 + 10)) != 0)
                    {
                      v68 = 0;
                      do
                      {
                        ++v68;
                        v67 = *(_QWORD *)(v67 + 56);
                      }
                      while (v67);
                    }
                    else
                    {
                      v68 = (*(uint64_t (**)(void))(*(_QWORD *)v168 + 208))() ^ 1;
                    }
                    if (v58 >= v68 || (v69 = v168, v70 = *((_WORD *)v168 + 14), (v70 & 2) == 0))
                    {
                      *(_DWORD *)(v35 + 24) += 2;
                      v144 = (WebCore::Node *)v35;
                      WebCore::CompositeEditCommand::insertNodeAt((unsigned int *)this, (uint64_t *)&v144, (WebCore::Position *)&v168);
                      goto LABEL_145;
                    }
                    v95 = *((_DWORD *)v168 + 6);
                    v96 = v95 + 2;
                    *((_DWORD *)v168 + 6) = v95 + 2;
                    if ((v170 & 8) == 0 && ((v97 = v170 & 7, v97 != 4) ? (v98 = v97 == 2) : (v98 = 1), v98))
                    {
                      *((_DWORD *)v69 + 6) = v95 + 4;
                      if ((v70 & 1) != 0)
                      {
                        v138 = *((_QWORD *)v69 + 10);
                        if (v138)
                          v100 = *(_DWORD *)(v138 + 4);
                        else
                          v100 = 0;
                      }
                      else if ((v70 & 4) != 0 && (v99 = *((_QWORD *)v69 + 10)) != 0)
                      {
                        v100 = 0;
                        do
                        {
                          ++v100;
                          v99 = *(_QWORD *)(v99 + 56);
                        }
                        while (v99);
                      }
                      else
                      {
                        v100 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v69 + 208))(v69) ^ 1;
                        v96 = *((_DWORD *)v69 + 6) - 2;
                      }
                      if (v96)
                      {
                        *((_DWORD *)v69 + 6) = v96;
                      }
                      else if ((*((_WORD *)v69 + 15) & 0x400) == 0)
                      {
                        WebCore::Node::removedLastRef(v69, v42);
                      }
                    }
                    else
                    {
                      v100 = v169;
                    }
                    WebCore::CompositeEditCommand::splitTextNode((WebCore::CompositeEditCommand *)this, v69, v100);
                    *(_DWORD *)(v35 + 24) += 2;
                    v144 = (WebCore::Node *)v35;
                    WebCore::CompositeEditCommand::insertNodeBefore((WebCore::CompositeEditCommand *)this, (uint64_t *)&v144, (uint64_t)v69, 1);
                    v106 = v144;
                    v144 = 0;
                    if (v106)
                    {
                      if (*((_DWORD *)v106 + 6) == 2)
                      {
                        if ((*((_WORD *)v106 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef(v106, v105);
                      }
                      else
                      {
                        *((_DWORD *)v106 + 6) -= 2;
                      }
                    }
                    v107 = *((_WORD *)v69 + 14);
                    *((_DWORD *)v69 + 6) += 2;
                    v164 = v69;
                    v165 = 0;
                    if ((v107 & 1) != 0)
                      v108 = v166 & 0xF0;
                    else
                      v108 = v166 & 0xF0 | 3;
                    v166 = v108;
                    WebCore::Document::updateLayout((uint64_t)v17, 2u, 0);
                    if (v164)
                    {
                      if ((*((_WORD *)v164 + 14) & 2) != 0)
                      {
                        v110 = *((_QWORD *)v164 + 8) & 0xFFFFFFFFFFFFLL;
                        if (v110)
                        {
                          if ((*(_BYTE *)((*((_QWORD *)v164 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x195AF9CF0);
                          }
                          ++*(_DWORD *)((*((_QWORD *)v164 + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
                          v127 = WebCore::containsOffset(v110, v165, 0);
                          v128 = *(_DWORD *)(v110 + 16);
                          if (!v128)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x195AF9D10);
                          }
                          *(_DWORD *)(v110 + 16) = v128 - 1;
                          if (v127)
                          {
LABEL_255:
                            v123 = *((_BYTE *)this + 226) & 2;
                            v124 = v164;
                            if (v164)
                            {
                              v125 = *((_DWORD *)v164 + 6);
                              v145 = v165;
                              v146 = v166;
                              *((_DWORD *)v164 + 6) = v125 + 4;
                            }
                            else
                            {
                              v145 = v165;
                              v146 = v166;
                            }
                            v144 = v124;
                            v147 = v124;
                            v148 = v165;
                            v149 = v166;
                            v150 = 0;
                            v151 = 0;
                            v152 &= 0xF0u;
                            v153 = 0;
                            v154 = 0;
                            v155 &= 0xF0u;
                            v156 = 0;
                            v157 = 0;
                            v158 &= 0xF0u;
                            v159 = 0;
                            v160 = 0;
                            v161 &= 0xF0u;
                            v162 = 1;
                            v163 = v163 & 0xFD | v123;
                            WebCore::VisibleSelection::validate((uint64_t)&v144, 0);
                            WebCore::EditCommand::setEndingSelection((uint64_t *)this, (const WebCore::VisibleSelection *)&v144);
                            WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v144);
                            v126 = v164;
                            v164 = 0;
                            if (v126)
                            {
                              if (*((_DWORD *)v126 + 6) == 2)
                              {
                                if ((*((_WORD *)v126 + 15) & 0x400) == 0)
                                  WebCore::Node::removedLastRef(v126, v75);
                              }
                              else
                              {
                                *((_DWORD *)v126 + 6) -= 2;
                              }
                            }
                            if (*((_DWORD *)v69 + 6) != 2)
                            {
                              *((_DWORD *)v69 + 6) -= 2;
                              goto LABEL_153;
                            }
                            if ((*((_WORD *)v69 + 15) & 0x400) == 0)
                            {
                              v76 = v69;
LABEL_269:
                              WebCore::Node::removedLastRef(v76, v75);
                            }
LABEL_153:
                            v77 = *(_QWORD *)(*((_QWORD *)v17 + 383) + 200);
                            if (!v77)
                            {
                              WebCore::CompositeEditCommand::rebalanceWhitespace((WebCore::CompositeEditCommand *)this);
                              goto LABEL_176;
                            }
                            ++*(_DWORD *)v77;
                            v78 = *(_QWORD *)(v77 + 8);
                            if ((!v78 || !*(_DWORD *)(v78 + 28))
                              && *(float *)(v77 + 20) == *(float *)&WebCore::EditingStyle::NoFontDelta
                              && (*(_BYTE *)(v77 + 16) & 0x1E) == 0)
                            {
LABEL_174:
                              WebCore::CompositeEditCommand::rebalanceWhitespace((WebCore::CompositeEditCommand *)this);
                              if (*(_DWORD *)v77 == 1)
                              {
                                WebCore::EditingStyle::~EditingStyle((WebCore::EditingStyle *)v77, (WTF::StringImpl *)v16);
                                WTF::fastFree(v101, v102);
                              }
                              else
                              {
                                --*(_DWORD *)v77;
                              }
LABEL_176:
                              if (*(_DWORD *)(v35 + 24) == 2)
                              {
                                if ((*(_WORD *)(v35 + 30) & 0x400) == 0)
                                  WebCore::Node::removedLastRef((WebCore::Node *)v35, v16);
                              }
                              else
                              {
                                *(_DWORD *)(v35 + 24) -= 2;
                              }
                              v21 = *((_DWORD *)v17 + 6) - 2;
                              if (*((_DWORD *)v17 + 6) != 2)
                                goto LABEL_179;
                              goto LABEL_47;
                            }
                            WebCore::firstPositionInOrBeforeNode(v35, (WebCore::Node *)v75, (uint64_t)&v144);
                            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 208))(v35) & 1) != 0)
                            {
                              v79 = *(_WORD *)(v35 + 28);
                              *(_DWORD *)(v35 + 24) += 2;
                              if ((v79 & 1) != 0)
                              {
                                v81 = *(_QWORD *)(v35 + 80);
                                if (v81)
                                  LODWORD(v81) = *(_DWORD *)(v81 + 4);
                                v164 = (WebCore::Node *)v35;
                                v165 = v81;
                                v80 = v166 & 0xF0;
                              }
                              else
                              {
                                v164 = (WebCore::Node *)v35;
                                v165 = 0;
                                v80 = v166 & 0xF0 | 4;
                              }
                            }
                            else
                            {
                              *(_DWORD *)(v35 + 24) += 2;
                              v164 = (WebCore::Node *)v35;
                              v165 = 0;
                              v80 = v166 & 0xF0 | 2;
                            }
                            v166 = v80;
                            WebCore::CompositeEditCommand::applyStyle((WebCore::CompositeEditCommand *)this, (WebCore::EditingStyle *)v77, (uint64_t *)&v144, (uint64_t *)&v164, 4);
                            if (*(_DWORD *)(v35 + 24) == 2)
                            {
                              if ((*(_WORD *)(v35 + 30) & 0x400) == 0)
                                WebCore::Node::removedLastRef((WebCore::Node *)v35, v82);
                            }
                            else
                            {
                              *(_DWORD *)(v35 + 24) -= 2;
                            }
                            v83 = v144;
                            v144 = 0;
                            if (v83)
                            {
                              if (*((_DWORD *)v83 + 6) == 2)
                              {
                                if ((*((_WORD *)v83 + 15) & 0x400) == 0)
                                  WebCore::Node::removedLastRef(v83, v82);
                              }
                              else
                              {
                                *((_DWORD *)v83 + 6) -= 2;
                              }
                            }
                            if (*((_BYTE *)this + 225) == 2)
                            {
                              WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(this + 26), (uint64_t)&v164);
                              v167 = 1;
                            }
                            else
                            {
                              v84 = *((unsigned __int8 *)this + 224);
                              WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(this + 26), (uint64_t)&v164);
                              v167 = 1;
                              if (v84)
                              {
LABEL_171:
                                WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v144, (const WebCore::VisiblePosition *)&v164, 0);
                                WebCore::EditCommand::setEndingSelection((uint64_t *)this, (const WebCore::VisibleSelection *)&v144);
                                WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v144);
                                v87 = v164;
                                v164 = 0;
                                if (v87)
                                {
                                  if (*((_DWORD *)v87 + 6) == 2)
                                  {
                                    if ((*((_WORD *)v87 + 15) & 0x400) == 0)
                                      WebCore::Node::removedLastRef(v87, v86);
                                  }
                                  else
                                  {
                                    *((_DWORD *)v87 + 6) -= 2;
                                  }
                                }
                                goto LABEL_174;
                              }
                            }
                            v129 = v164;
                            if (v164)
                            {
                              *((_DWORD *)v164 + 6) += 2;
                              v144 = v129;
                              v145 = v165;
                              v146 = v166;
                              LOBYTE(v147) = 0;
                              if (!WebCore::inSameLine((WebCore *)&v164, (const WebCore::VisiblePosition *)&v144, v85))
                                v167 = 0;
                              v131 = v144;
                              v144 = 0;
                              if (v131)
                              {
                                if (*((_DWORD *)v131 + 6) == 2)
                                {
                                  if ((*((_WORD *)v131 + 15) & 0x400) == 0)
                                    WebCore::Node::removedLastRef(v131, v130);
                                }
                                else
                                {
                                  *((_DWORD *)v131 + 6) -= 2;
                                }
                              }
                            }
                            goto LABEL_171;
                          }
                        }
                      }
                    }
                    WebCore::positionInParentBeforeNode(v69, v109, (uint64_t)&v144);
                    WebCore::CompositeEditCommand::deleteInsignificantTextDownstream((WebCore::CompositeEditCommand *)this, (const WebCore::Position *)&v164);
                    if ((*((_BYTE *)v69 + 22) & 8) != 0)
                    {
                      {
                        WTF::String::String();
                      }
                      WebCore::CompositeEditCommand::insertTextIntoNode((WebCore::Node *)this, v69, 0, (const WTF::String *)&WebCore::nonBreakingSpaceString(void)::nonBreakingSpaceString);
                      goto LABEL_252;
                    }
                    {
                      WTF::String::String();
                    }
                    v111 = (WTF::StringImpl *)WebCore::nonBreakingSpaceString(void)::nonBreakingSpaceString;
                    if (WebCore::nonBreakingSpaceString(void)::nonBreakingSpaceString)
                      *(_DWORD *)WebCore::nonBreakingSpaceString(void)::nonBreakingSpaceString += 2;
                    v112 = bmalloc::api::isoAllocate();
                    v114 = v112;
                    *(_OWORD *)(v112 + 8) = xmmword_1968BC9D0;
                    *(_QWORD *)(v112 + 24) = 0x300300000002;
                    *(_QWORD *)(v112 + 32) = 0;
                    *(_QWORD *)(v112 + 40) = (char *)v17 + 96;
                    *(_OWORD *)(v112 + 48) = 0u;
                    *(_OWORD *)(v112 + 64) = 0u;
                    ++*((_DWORD *)v17 + 831);
                    if (v111)
                    {
                      v140 = *(_DWORD *)v111;
                      *(_DWORD *)v111 += 2;
                      *(_QWORD *)(v112 + 80) = v111;
                      *(_QWORD *)v112 = off_1E33A8078;
                      if (!v140)
                      {
                        WTF::StringImpl::destroy(v111, v113);
                        v116 = *(_DWORD *)(v114 + 24);
                        goto LABEL_238;
                      }
                      *(_DWORD *)v111 = v140;
                    }
                    else
                    {
                      v115 = (_DWORD *)*MEMORY[0x1E0CBF738];
                      if (*MEMORY[0x1E0CBF738])
                      {
                        *v115 += 2;
                        *(_QWORD *)(v112 + 80) = v115;
                      }
                      else
                      {
                        *(_QWORD *)(v112 + 80) = 0;
                      }
                      *(_QWORD *)v112 = off_1E33A8078;
                    }
                    v116 = 2;
LABEL_238:
                    *(_DWORD *)(v114 + 24) = v116 + 2;
                    v141 = (WebCore::Node *)v114;
                    WebCore::CompositeEditCommand::insertNodeAt((unsigned int *)this, (uint64_t *)&v141, (WebCore::Position *)&v144);
                    v118 = v141;
                    v141 = 0;
                    if (v118)
                    {
                      if (*((_DWORD *)v118 + 6) == 2)
                      {
                        if ((*((_WORD *)v118 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef(v118, v117);
                      }
                      else
                      {
                        *((_DWORD *)v118 + 6) -= 2;
                      }
                    }
                    v119 = *(_WORD *)(v114 + 28);
                    *(_DWORD *)(v114 + 24) += 2;
                    if ((v119 & 1) != 0)
                      v120 = 0;
                    else
                      v120 = 3;
                    v121 = v164;
                    v164 = (WebCore::Node *)v114;
                    if (v121)
                    {
                      if (*((_DWORD *)v121 + 6) == 2)
                      {
                        if ((*((_WORD *)v121 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef(v121, v117);
                      }
                      else
                      {
                        *((_DWORD *)v121 + 6) -= 2;
                      }
                    }
                    v165 = 0;
                    v166 = v120;
                    if (*(_DWORD *)(v114 + 24) == 2)
                    {
                      if ((*(_WORD *)(v114 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v114, v117);
                    }
                    else
                    {
                      *(_DWORD *)(v114 + 24) -= 2;
                    }
LABEL_252:
                    v122 = v144;
                    v144 = 0;
                    if (v122)
                    {
                      if (*((_DWORD *)v122 + 6) == 2)
                      {
                        if ((*((_WORD *)v122 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef(v122, v117);
                      }
                      else
                      {
                        *((_DWORD *)v122 + 6) -= 2;
                      }
                    }
                    goto LABEL_255;
                  }
                  if ((*((_WORD *)v168 + 14) & 0x10) != 0)
                  {
                    v90 = *(_QWORD *)(*((_QWORD *)v168 + 12) + 24);
                    if (v90 == *(_QWORD *)(WebCore::HTMLNames::hrTag + 24))
                    {
                      *(_DWORD *)(v35 + 24) += 2;
                      v144 = (WebCore::Node *)v35;
                      WebCore::CompositeEditCommand::insertNodeAt((unsigned int *)this, (uint64_t *)&v144, (WebCore::Position *)&v168);
                      goto LABEL_211;
                    }
                    v91 = v90 == *(_QWORD *)(WebCore::HTMLNames::tableTag + 24);
                  }
                  else
                  {
                    v91 = 0;
                  }
                  *(_DWORD *)(v35 + 24) += 2;
                  v144 = (WebCore::Node *)v35;
                  WebCore::CompositeEditCommand::insertNodeAt((unsigned int *)this, (uint64_t *)&v144, (WebCore::Position *)&v168);
                  v93 = v144;
                  v144 = 0;
                  if (v93)
                  {
                    if (*((_DWORD *)v93 + 6) == 2)
                    {
                      if ((*((_WORD *)v93 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v93, v92);
                    }
                    else
                    {
                      *((_DWORD *)v93 + 6) -= 2;
                    }
                  }
                  if (v91)
                  {
LABEL_214:
                    *(_DWORD *)(v35 + 24) += 2;
                    v144 = (WebCore::Node *)v35;
                    v145 = 0;
                    v146 = v146 & 0xF0 | 1;
                    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v144, (uint64_t)&v164);
                    v167 = 1;
                    if (*(_DWORD *)(v35 + 24) == 2)
                    {
                      if ((*(_WORD *)(v35 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v35, v104);
                    }
                    else
                    {
                      *(_DWORD *)(v35 + 24) -= 2;
                    }
                    WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v144, (const WebCore::VisiblePosition *)&v164, (*((unsigned __int8 *)this + 226) >> 1) & 1);
                    WebCore::EditCommand::setEndingSelection((uint64_t *)this, (const WebCore::VisibleSelection *)&v144);
                    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v144);
                    v76 = v164;
                    if (!v164)
                      goto LABEL_153;
                    goto LABEL_151;
                  }
                  (*(void (**)(WebCore::Node **__return_ptr, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v35 + 136))(&v144, v35, *(_QWORD *)(*(_QWORD *)(v35 + 40) + 8), 0);
                  WebCore::CompositeEditCommand::insertNodeBefore((WebCore::CompositeEditCommand *)this, (uint64_t *)&v144, v35, 1);
LABEL_211:
                  v103 = v144;
                  v144 = 0;
                  if (v103)
                  {
                    if (*((_DWORD *)v103 + 6) == 2)
                    {
                      if ((*((_WORD *)v103 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v103, v94);
                    }
                    else
                    {
                      *((_DWORD *)v103 + 6) -= 2;
                    }
                  }
                  goto LABEL_214;
                }
                v41 = (_DWORD *)*MEMORY[0x1E0CBF738];
                if (*MEMORY[0x1E0CBF738])
                {
                  *v41 += 2;
                  *(_QWORD *)(v39 + 80) = v41;
                }
                else
                {
                  *(_QWORD *)(v39 + 80) = 0;
                }
                v37 = off_1E33A8078;
LABEL_82:
                *(_QWORD *)v35 = v37;
                goto LABEL_83;
              }
            }
            else
            {
              *((_DWORD *)v18 + 6) -= 2;
            }
            v169 = v145;
            v170 = v146;
            goto LABEL_29;
          }
        }
        else
        {
          *((_DWORD *)v15 + 6) -= 2;
        }
      }
      v169 = v145;
      v170 = v146;
      goto LABEL_25;
    }
  }
LABEL_186:
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v175);
}

unsigned int *WebCore::InsertListCommand::mergeWithNeighboringLists(WebCore::InsertListCommand *this, WebCore::HTMLElement *a2, WebCore::Element *a3)
{
  WebCore::Element *v3;
  uint64_t v6;
  uint64_t v7;
  unsigned int *result;
  void *v9;
  WebCore::Element *v10;
  WebCore::Element *v11;
  __int16 v12;

  v3 = a3;
  *((_DWORD *)a3 + 6) += 2;
  v6 = (uint64_t)a3;
  while (1)
  {
    v7 = *(_QWORD *)(v6 + 48);
    v6 = v7 & 0xFFFFFFFFFFFFLL;
    if ((v7 & 0xFFFFFFFFFFFFLL) == 0)
      break;
    if ((*(_WORD *)((v7 & 0xFFFFFFFFFFFFLL) + 0x1C) & 8) != 0)
    {
      *(_DWORD *)((v7 & 0xFFFFFFFFFFFFLL) + 0x18) += 2;
      break;
    }
  }
  result = (unsigned int *)WebCore::canMergeLists((WebCore *)v6, a3, a3);
  if ((_DWORD)result)
    result = WebCore::CompositeEditCommand::mergeIdenticalElements(a2, (WebCore::Element *)v6, v3);
  v11 = v3;
  do
  {
    v11 = (WebCore::Element *)*((_QWORD *)v11 + 7);
    if (!v11)
      goto LABEL_11;
    v12 = *((_WORD *)v11 + 14);
  }
  while ((v12 & 8) == 0);
  if ((v12 & 0x10) == 0)
  {
LABEL_11:
    *(_QWORD *)this = v3;
LABEL_12:
    v3 = 0;
    goto LABEL_13;
  }
  *((_DWORD *)v11 + 6) += 2;
  result = (unsigned int *)WebCore::canMergeLists(v3, v11, v10);
  if ((_DWORD)result)
  {
    result = WebCore::CompositeEditCommand::mergeIdenticalElements(a2, v3, v11);
    *(_QWORD *)this = v11;
  }
  else
  {
    *(_QWORD *)this = v3;
    if (*((_DWORD *)v11 + 6) == 2)
    {
      if ((*((_WORD *)v11 + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef(v11, v9);
      goto LABEL_12;
    }
    v3 = 0;
    *((_DWORD *)v11 + 6) -= 2;
  }
LABEL_13:
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)v6, v9);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  if (v3)
  {
    if (*((_DWORD *)v3 + 6) == 2)
    {
      if ((*((_WORD *)v3 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(v3, v9);
    }
    else
    {
      *((_DWORD *)v3 + 6) -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::InsertListCommand::doApply(WebCore::InsertListCommand *this)
{
  int v2;
  WebCore::VisiblePosition *v3;
  const WebCore::VisiblePosition *v4;
  int v5;
  WebCore::VisiblePosition *v6;
  void *v7;
  const WebCore::VisiblePosition *v8;
  unsigned int *result;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  void *v15;
  _BOOL4 v16;
  WebCore::Node *v17;
  void *v18;
  WebCore::Node *v19;
  uint64_t *v20;
  int v21;
  const WebCore::VisiblePosition *v22;
  uint64_t v23;
  void *v24;
  uint64_t (*v25)();
  BOOL v26;
  WebCore::Node *v27;
  WebCore::Node *v28;
  WebCore::Node *v29;
  WebCore::Node *v30;
  WebCore::Node *v31;
  WebCore::Node *v32;
  void *v33;
  WebCore::Node *v34;
  WebCore::Node *v35;
  uint64_t v36;
  int v37;
  int v38;
  WebCore::Node *v39;
  const WebCore::VisiblePosition *v40;
  WebCore::Node *v41;
  char v42;
  WebCore::Node *v43;
  int v44;
  int v45;
  const WebCore::VisiblePosition *v46;
  uint64_t v47;
  uint64_t (*v48)();
  WebCore::Node *v49;
  WebCore::Node *v50;
  WebCore::Node *v51;
  WebCore::Node *v52;
  int v54;
  WebCore::Node *v55;
  WebCore::Node *v56;
  WebCore::Node *v57;
  uint64_t (*v58)();
  void *v59;
  WebCore::Node *v60;
  unsigned int *v61;
  WebCore::Node *v62;
  WebCore::Node *v63;
  WebCore::Node *v64;
  WebCore::Node *v65;
  uint64_t i;
  void *v67;
  WebCore::Node *v68;
  WebCore::Node *v69;
  int v70;
  void *v71;
  const WebCore::VisiblePosition *v72;
  WebCore::Node *v73;
  WebCore::Node *v74;
  int v75;
  const WebCore::VisiblePosition *v76;
  WebCore::Node *v77;
  uint64_t v78;
  WebCore::Node *v79;
  WebCore::Node *v80;
  WebCore::Node *v81;
  void *v82;
  WebCore::Node *v83;
  void *v84;
  WebCore::Node *v85;
  WebCore::Node *v86;
  void *v87;
  WebCore::Node *v88;
  WebCore::Node *v89;
  WebCore::Node *v90;
  int v91;
  void *v92;
  const WebCore::VisiblePosition *v93;
  unsigned int *v94;
  WebCore::Node *v95;
  WebCore::Node *v96;
  void *v97;
  WebCore::Node *v98;
  WebCore::Node *v99;
  uint64_t v100;
  WebCore::Node *v101;
  WebCore::Node *v102;
  WebCore::Node *v103;
  WebCore::Node *v104;
  WebCore::Node *v105;
  WebCore::Node *v106;
  WebCore::Node *v107;
  void *v108;
  WebCore::Node *v109;
  void *v110;
  WebCore::Node *v111;
  WebCore::Node *v112;
  WebCore::Node *v113;
  void *v114;
  WebCore::Node *v115;
  WebCore::Node *v116;
  void *v117;
  WebCore::Node *v118;
  WebCore::Node *v119;
  WebCore::Node *v120;
  WebCore::Node *v121;
  WebCore::Node *v122;
  WebCore::Node *v123;
  void *v124;
  WebCore::Node *v125;
  unsigned int v126;
  unsigned int v127;
  uint64_t *v128;
  WebCore::Node *v129;
  int v130;
  char v131;
  char v132;
  WebCore::Node *v133;
  int v134;
  char v135;
  char v136;
  WebCore::Node *v137;
  WebCore::Node *v138;
  int v139;
  char v140;
  WebCore::Node *v141;
  int v142;
  char v143;
  WebCore::Node *v144;
  int v145;
  char v146;
  WebCore::Node *v147;
  int v148;
  WebCore::Node *v149;
  WebCore::Node *v150;
  int v151;
  char v152;
  char v153;
  WebCore::Node *v154;
  int v155;
  char v156;
  char v157;
  WebCore::Node *v158;
  int v159;
  char v160;
  char v161;
  WebCore::Node *v162;
  int v163;
  char v164;
  WebCore::Node *v165;
  char v166;
  _BYTE v167[16];
  _BYTE v168[16];
  unsigned __int8 v169;
  unsigned __int8 v170;
  WebCore::Node *v171;
  int v172;
  char v173;
  char v174;
  WebCore::Node *v175;
  int v176;
  char v177;
  char v178;
  WebCore::Node *v179;
  int v180;
  char v181;
  char v182;

  if (*((_BYTE *)this + 225) == 2)
  {
    v3 = (WebCore::InsertListCommand *)((char *)this + 208);
    WebCore::VisiblePosition::canonicalPosition((WebCore::InsertListCommand *)((char *)this + 208), (uint64_t)&v175);
    v178 = 1;
  }
  else
  {
    v2 = *((unsigned __int8 *)this + 224);
    v3 = (WebCore::InsertListCommand *)((char *)this + 208);
    WebCore::VisiblePosition::canonicalPosition((WebCore::InsertListCommand *)((char *)this + 208), (uint64_t)&v175);
    v178 = 1;
    if (v2)
      goto LABEL_3;
  }
  v107 = v175;
  if (v175)
  {
    *((_DWORD *)v175 + 6) += 2;
    v162 = v107;
    v163 = v176;
    v164 = v177;
    LOBYTE(v165) = 0;
    if (!WebCore::inSameLine((WebCore *)&v175, (const WebCore::VisiblePosition *)&v162, v4))
      v178 = 0;
    v109 = v162;
    v162 = 0;
    if (v109)
    {
      if (*((_DWORD *)v109 + 6) == 2)
      {
        if ((*((_WORD *)v109 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v109, v108);
      }
      else
      {
        *((_DWORD *)v109 + 6) -= 2;
      }
    }
  }
LABEL_3:
  if (*((_BYTE *)this + 225) == 2)
  {
    v6 = (WebCore::InsertListCommand *)((char *)this + 192);
    WebCore::VisiblePosition::canonicalPosition((WebCore::InsertListCommand *)((char *)this + 192), (uint64_t)&v171);
    v174 = 1;
  }
  else
  {
    v5 = *((unsigned __int8 *)this + 224);
    v6 = (WebCore::InsertListCommand *)((char *)this + 192);
    WebCore::VisiblePosition::canonicalPosition((WebCore::InsertListCommand *)((char *)this + 192), (uint64_t)&v171);
    v174 = 1;
    if (!v5)
    {
      v112 = v171;
      if (v171)
      {
        *((_DWORD *)v171 + 6) += 2;
        v162 = v112;
        v163 = v172;
        v164 = v173;
        LOBYTE(v165) = 0;
        if (!WebCore::inSameLine((WebCore *)&v171, (const WebCore::VisiblePosition *)&v162, v8))
          v174 = 0;
        v113 = v162;
        v162 = 0;
        if (v113)
        {
          if (*((_DWORD *)v113 + 6) == 2)
          {
            if ((*((_WORD *)v113 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v113, v7);
          }
          else
          {
            *((_DWORD *)v113 + 6) -= 2;
          }
        }
      }
    }
  }
  result = (unsigned int *)v175;
  if (!v175)
    goto LABEL_62;
  if (!v171)
  {
    v175 = 0;
    goto LABEL_68;
  }
  v10 = (uint64_t)this + 192;
  v11 = *((_QWORD *)this + 24);
  if (!v11)
    goto LABEL_62;
  v12 = *((_BYTE *)this + 204) & 7;
  if (v12 > 4)
    goto LABEL_62;
  if (((1 << v12) & 0x19) == 0)
  {
    v11 = *(_QWORD *)(v11 + 32);
    if (!v11)
      goto LABEL_62;
  }
  *(_DWORD *)(v11 + 24) += 2;
  v13 = WebCore::Node::computeEditability(v11, 0, 1);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v7);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (v13 != 2)
    goto LABEL_62;
  if (!WebCore::operator==((uint64_t *)&v175, (uint64_t *)&v171))
  {
    if (v175
       ? WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance
       : 0)
    {
      WebCore::startOfParagraph((uint64_t)&v175, 2, &v162);
      v16 = WebCore::operator==((uint64_t *)&v175, (uint64_t *)&v162);
      v17 = v162;
      v162 = 0;
      if (v17)
      {
        if (*((_DWORD *)v17 + 6) == 2)
        {
          if ((*((_WORD *)v17 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v17, v15);
        }
        else
        {
          *((_DWORD *)v17 + 6) -= 2;
        }
      }
      if (v16)
      {
        WebCore::VisiblePosition::previous(&v175, 1, 0, (uint64_t)&v138);
        WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v162, (const WebCore::VisiblePosition *)&v171, (const WebCore::VisiblePosition *)&v138, (*((unsigned __int8 *)this + 226) >> 1) & 1);
        WebCore::EditCommand::setEndingSelection((uint64_t *)this, (const WebCore::VisibleSelection *)&v162);
        WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v162);
        v19 = v138;
        v138 = 0;
        if (v19)
        {
          if (*((_DWORD *)v19 + 6) == 2)
          {
            if ((*((_WORD *)v19 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v19, v18);
          }
          else
          {
            *((_DWORD *)v19 + 6) -= 2;
          }
        }
        if (!WebCore::editableRootForPosition((uint64_t)this + 192, 0))
          goto LABEL_62;
      }
    }
  }
  if (*((_BYTE *)this + 288))
    v20 = &WebCore::HTMLNames::ulTag;
  else
    v20 = &WebCore::HTMLNames::olTag;
  if (*((_BYTE *)this + 225) == 2)
  {
    WebCore::selectionForParagraphIteration((WebCore::InsertListCommand *)((char *)this + 128), (uint64_t)&v162);
    if (v170 != 2)
    {
LABEL_53:
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v162);
      goto LABEL_54;
    }
    v128 = v20;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v167, (uint64_t)&v158);
    v161 = 1;
    v10 = v170;
    v21 = v169;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v168, (uint64_t)&v154);
    v157 = 1;
    if ((_DWORD)v10 == 2 || !v21)
    {
      v116 = v154;
      if (v154)
      {
        *((_DWORD *)v154 + 6) += 2;
        v138 = v116;
        v139 = v155;
        v140 = v156;
        LOBYTE(v141) = 0;
        if (!WebCore::inSameLine((WebCore *)&v154, (const WebCore::VisiblePosition *)&v138, v22))
          v157 = 0;
        v118 = v138;
        v138 = 0;
        if (v118)
        {
          if (*((_DWORD *)v118 + 6) == 2)
          {
            if ((*((_WORD *)v118 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v118, v117);
          }
          else
          {
            *((_DWORD *)v118 + 6) -= 2;
          }
        }
      }
    }
    WebCore::startOfParagraph((uint64_t)&v154, 2, &v150);
    v149 = 0;
    v23 = WebCore::indexForVisiblePosition((uint64_t *)&v158, (uint64_t)&v149);
    if (v150)
      v25 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    else
      v25 = 0;
    if (!v25)
      goto LABEL_41;
    v10 = v23;
    WebCore::startOfParagraph((uint64_t)&v158, 2, &v138);
    v26 = WebCore::operator==((uint64_t *)&v138, (uint64_t *)&v150);
    v27 = v138;
    v138 = 0;
    if (v27)
    {
      if (*((_DWORD *)v27 + 6) == 2)
      {
        if ((*((_WORD *)v27 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v27, v24);
      }
      else
      {
        *((_DWORD *)v27 + 6) -= 2;
      }
    }
    if (v26)
    {
LABEL_41:
      v28 = v149;
      v149 = 0;
      if (v28)
      {
        if (*((_DWORD *)v28 + 6) == 2)
        {
          if ((*((_WORD *)v28 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v28, v24);
        }
        else
        {
          *((_DWORD *)v28 + 6) -= 2;
        }
      }
      v29 = v150;
      v150 = 0;
      if (v29)
      {
        if (*((_DWORD *)v29 + 6) == 2)
        {
          if ((*((_WORD *)v29 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v29, v24);
        }
        else
        {
          *((_DWORD *)v29 + 6) -= 2;
        }
      }
      v30 = v154;
      v154 = 0;
      if (v30)
      {
        if (*((_DWORD *)v30 + 6) == 2)
        {
          if ((*((_WORD *)v30 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v30, v24);
        }
        else
        {
          *((_DWORD *)v30 + 6) -= 2;
        }
      }
      v31 = v158;
      v158 = 0;
      if (v31)
      {
        if (*((_DWORD *)v31 + 6) == 2)
        {
          if ((*((_WORD *)v31 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v31, v24);
        }
        else
        {
          *((_DWORD *)v31 + 6) -= 2;
        }
      }
      goto LABEL_53;
    }
    v126 = v10;
    v37 = v170;
    v38 = v169;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v167, (uint64_t)&v144);
    LOBYTE(v147) = 1;
    if (v37 != 2 && !v38)
    {
      v121 = v144;
      if (!v144)
      {
        v41 = 0;
        v42 = 1;
LABEL_81:
        WebCore::enclosingList((unsigned int *)v41, v39, &v138);
        v43 = v138;
        v138 = 0;
        if (v43)
        {
          if (*((_DWORD *)v43 + 6) == 2)
          {
            if ((*((_WORD *)v43 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v43, v33);
          }
          else
          {
            *((_DWORD *)v43 + 6) -= 2;
          }
        }
        if ((v42 & 1) == 0)
        {
          if (*((_DWORD *)v41 + 6) == 2)
          {
            if ((*((_WORD *)v41 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v41, v33);
          }
          else
          {
            *((_DWORD *)v41 + 6) -= 2;
          }
        }
        if (v43)
        {
          v44 = v170;
          v45 = v169;
          WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v168, (uint64_t)&v179);
          v182 = 1;
          if (v44 == 2 || !v45)
          {
            v123 = v179;
            if (v179)
            {
              *((_DWORD *)v179 + 6) += 2;
              v138 = v123;
              v139 = v180;
              v140 = v181;
              LOBYTE(v141) = 0;
              if (!WebCore::inSameLine((WebCore *)&v179, (const WebCore::VisiblePosition *)&v138, v46))
                v182 = 0;
              v125 = v138;
              v138 = 0;
              if (v125)
              {
                if (*((_DWORD *)v125 + 6) == 2)
                {
                  if ((*((_WORD *)v125 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v125, v124);
                }
                else
                {
                  *((_DWORD *)v125 + 6) -= 2;
                }
              }
            }
          }
          WebCore::startOfParagraph((uint64_t)&v179, 1, &v138);
          v47 = (uint64_t)v179;
          v179 = 0;
          v10 = (uint64_t)WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
          if (v47)
          {
            if (*(_DWORD *)(v47 + 24) == 2)
            {
              if ((*(_WORD *)(v47 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v47, v33);
            }
            else
            {
              *(_DWORD *)(v47 + 24) -= 2;
            }
          }
          if (v144)
            v48 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
          else
            v48 = 0;
          if (v48)
          {
            do
            {
              if (WebCore::operator==((uint64_t *)&v144, (uint64_t *)&v138))
                break;
              v49 = v144;
              if (v144)
              {
                *((_DWORD *)v144 + 6) += 2;
                WebCore::enclosingList((unsigned int *)v49, (WebCore::Node *)v33, &v133);
                if (*((_DWORD *)v49 + 6) == 2)
                {
                  if ((*((_WORD *)v49 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v49, v33);
                }
                else
                {
                  *((_DWORD *)v49 + 6) -= 2;
                }
              }
              else
              {
                WebCore::enclosingList(0, (WebCore::Node *)v33, &v133);
              }
              v32 = v133;
              if (!v133)
                goto LABEL_131;
              if (*(_QWORD *)(*((_QWORD *)v133 + 12) + 24) != *(_QWORD *)(*v20 + 24))
              {
                v133 = 0;
                if (*((_DWORD *)v32 + 6) == 2)
                  goto LABEL_341;
                *((_DWORD *)v32 + 6) -= 2;
                goto LABEL_131;
              }
              WebCore::startOfNextParagraph((WebCore *)&v144, (uint64_t)&v179);
              v50 = v179;
              v179 = 0;
              v51 = v144;
              v144 = v50;
              if (v51)
              {
                if (*((_DWORD *)v51 + 6) == 2)
                {
                  if ((*((_WORD *)v51 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v51, v33);
                }
                else
                {
                  *((_DWORD *)v51 + 6) -= 2;
                }
              }
              v145 = v180;
              v146 = v181;
              LOBYTE(v147) = v182;
              v52 = v133;
              v133 = 0;
              if (v52)
              {
                if (*((_DWORD *)v52 + 6) == 2)
                {
                  if ((*((_WORD *)v52 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v52, v33);
                }
                else
                {
                  *((_DWORD *)v52 + 6) -= 2;
                }
              }
            }
            while (v144
                  ? WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance
                  : 0);
          }
          v54 = 1;
          goto LABEL_132;
        }
        v54 = 0;
        v10 = (uint64_t)WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
        goto LABEL_135;
      }
      *((_DWORD *)v144 + 6) += 2;
      v138 = v121;
      v139 = v145;
      v140 = v146;
      LOBYTE(v141) = 0;
      if (!WebCore::inSameLine((WebCore *)&v144, (const WebCore::VisiblePosition *)&v138, v40))
        LOBYTE(v147) = 0;
      v122 = v138;
      v138 = 0;
      if (v122)
      {
        if (*((_DWORD *)v122 + 6) == 2)
        {
          if ((*((_WORD *)v122 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v122, v39);
        }
        else
        {
          *((_DWORD *)v122 + 6) -= 2;
        }
      }
    }
    v41 = v144;
    if (v144)
    {
      v42 = 0;
      *((_DWORD *)v144 + 6) += 2;
    }
    else
    {
      v42 = 1;
    }
    goto LABEL_81;
  }
LABEL_54:
  v32 = WebCore::VisibleSelection::firstRange((WebCore::InsertListCommand *)((char *)this + 128), &v162);
  if (v166)
  {
    WebCore::InsertListCommand::doApplyForSingleParagraph((uint64_t)this, 0, (WebCore::HTMLElementFactory *)v20, (WebCore::Node *)&v162);
    if (v166)
    {
      v34 = v165;
      v165 = 0;
      if (v34)
      {
        if (*((_DWORD *)v34 + 6) == 2)
        {
          if ((*((_WORD *)v34 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v34, v7);
        }
        else
        {
          *((_DWORD *)v34 + 6) -= 2;
        }
      }
      v35 = v162;
      v162 = 0;
      if (v35)
      {
        if (*((_DWORD *)v35 + 6) == 2)
        {
          if ((*((_WORD *)v35 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v35, v7);
        }
        else
        {
          *((_DWORD *)v35 + 6) -= 2;
        }
      }
    }
    goto LABEL_62;
  }
  do
  {
    __break(1u);
LABEL_341:
    if ((*((_WORD *)v32 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v32, v33);
LABEL_131:
    v54 = 0;
LABEL_132:
    v55 = v138;
    v138 = 0;
    if (v55)
    {
      if (*((_DWORD *)v55 + 6) == 2)
      {
        if ((*((_WORD *)v55 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v55, v33);
      }
      else
      {
        *((_DWORD *)v55 + 6) -= 2;
      }
    }
LABEL_135:
    v56 = v144;
    v144 = 0;
    if (v56)
    {
      if (*((_DWORD *)v56 + 6) == 2)
      {
        if ((*((_WORD *)v56 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v56, v33);
      }
      else
      {
        *((_DWORD *)v56 + 6) -= 2;
      }
    }
    v32 = WebCore::VisibleSelection::firstRange((WebCore::InsertListCommand *)((char *)this + 128), &v138);
  }
  while (!v143);
  v127 = v54 ^ 1;
  v144 = v138;
  v145 = v139;
  v147 = v141;
  v148 = v142;
  v57 = v158;
  if (v158)
    *((_DWORD *)v158 + 6) += 2;
  v179 = v57;
  v180 = v159;
  v181 = v160;
  v182 = v161;
  while (1)
  {
    v58 = v179 ? (uint64_t (*)())v10 : 0;
    if (!v58 || WebCore::inSameParagraph(&v179, (uint64_t)&v150, 0))
      break;
    if (v150 && (*((_BYTE *)v150 + 22) & 8) == 0)
      goto LABEL_260;
    WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v138, (const WebCore::VisiblePosition *)&v179, 0);
    WebCore::EditCommand::setEndingSelection((uint64_t *)this, (const WebCore::VisibleSelection *)&v138);
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v138);
    v137 = 0;
    if (v154 && (*((_BYTE *)v154 + 22) & 8) == 0)
    {
      LOBYTE(v60) = 0;
      goto LABEL_198;
    }
    v61 = (unsigned int *)WebCore::indexForVisiblePosition((uint64_t *)&v154, (uint64_t)&v137);
    WebCore::InsertListCommand::doApplyForSingleParagraph((uint64_t)this, (WebCore::Node *)v127, (WebCore::HTMLElementFactory *)v20, (WebCore::Node *)&v144);
    if (v154 && (*((_BYTE *)v154 + 22) & 8) != 0 && v150 && (*((_BYTE *)v150 + 22) & 8) != 0)
      goto LABEL_181;
    WebCore::visiblePositionForIndex(v61, (uint64_t)v137, 1, &v138);
    v62 = v138;
    v138 = 0;
    v63 = v154;
    v154 = v62;
    if (v63)
    {
      if (*((_DWORD *)v63 + 6) == 2)
      {
        if ((*((_WORD *)v63 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v63, v59);
          v81 = v138;
          v155 = v139;
          v156 = v140;
          v157 = (char)v141;
          v138 = 0;
          if (v81)
          {
            if (*((_DWORD *)v81 + 6) == 2)
            {
              if ((*((_WORD *)v81 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v81, v59);
            }
            else
            {
              *((_DWORD *)v81 + 6) -= 2;
            }
          }
          goto LABEL_160;
        }
      }
      else
      {
        *((_DWORD *)v63 + 6) -= 2;
      }
    }
    v155 = v139;
    v156 = v140;
    v157 = (char)v141;
LABEL_160:
    v64 = v154;
    if (v154)
    {
      v60 = 0;
      v65 = v154;
      do
      {
        if (!WebCore::Node::hasEditableStyle((uint64_t)v65, 0))
          break;
        if ((*((_WORD *)v65 + 14) & 8) != 0)
          v60 = v65;
        i = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v64 + 5) + 8) + 1272);
        if (i)
        {
          if ((*(_WORD *)(i + 28) & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
          {
            for (i = *(_QWORD *)(i + 80); i; i = *(_QWORD *)(i + 56))
            {
              if ((*(_WORD *)(i + 28) & 0x10) != 0
                && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
              {
                break;
              }
            }
          }
          else
          {
            i = 0;
          }
        }
        if ((WebCore::Node *)i == v65)
          break;
        v65 = (WebCore::Node *)*((_QWORD *)v65 + 4);
      }
      while (v65);
      v20 = v128;
      if (!v60)
        goto LABEL_198;
      WebCore::startOfParagraph((uint64_t)&v154, 2, &v138);
      v68 = v138;
      v138 = 0;
      v69 = v150;
      v150 = v68;
      if (!v69)
        goto LABEL_180;
      if (*((_DWORD *)v69 + 6) != 2)
      {
        *((_DWORD *)v69 + 6) -= 2;
        goto LABEL_180;
      }
      if ((*((_WORD *)v69 + 15) & 0x400) != 0)
      {
LABEL_180:
        v151 = v139;
        v152 = v140;
        v153 = (char)v141;
      }
      else
      {
        WebCore::Node::removedLastRef(v69, v67);
        v83 = v138;
        v151 = v139;
        v152 = v140;
        v153 = (char)v141;
        v138 = 0;
        if (v83)
        {
          if (*((_DWORD *)v83 + 6) == 2)
          {
            if ((*((_WORD *)v83 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v83, v82);
          }
          else
          {
            *((_DWORD *)v83 + 6) -= 2;
          }
        }
      }
LABEL_181:
      if (WebCore::operator==((uint64_t *)&v179, (uint64_t *)&v158))
      {
        if (*((_BYTE *)this + 225) == 2)
        {
          WebCore::VisiblePosition::canonicalPosition(v6, (uint64_t)&v133);
          v136 = 1;
        }
        else
        {
          v70 = *((unsigned __int8 *)this + 224);
          WebCore::VisiblePosition::canonicalPosition(v6, (uint64_t)&v133);
          v136 = 1;
          if (!v70)
          {
            v89 = v133;
            if (v133)
            {
              *((_DWORD *)v133 + 6) += 2;
              v138 = v89;
              v139 = v134;
              v140 = v135;
              LOBYTE(v141) = 0;
              if (!WebCore::inSameLine((WebCore *)&v133, (const WebCore::VisiblePosition *)&v138, v72))
                v136 = 0;
              v90 = v138;
              v138 = 0;
              if (v90)
              {
                if (*((_DWORD *)v90 + 6) == 2)
                {
                  if ((*((_WORD *)v90 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v90, v71);
                }
                else
                {
                  *((_DWORD *)v90 + 6) -= 2;
                }
              }
              v20 = v128;
            }
          }
        }
        v73 = v133;
        v133 = 0;
        v74 = v158;
        v158 = v73;
        if (!v74)
          goto LABEL_187;
        if (*((_DWORD *)v74 + 6) != 2)
        {
          *((_DWORD *)v74 + 6) -= 2;
          goto LABEL_187;
        }
        if ((*((_WORD *)v74 + 15) & 0x400) != 0)
        {
LABEL_187:
          v159 = v134;
          v160 = v135;
          v161 = v136;
        }
        else
        {
          WebCore::Node::removedLastRef(v74, v71);
          v85 = v133;
          v159 = v134;
          v160 = v135;
          v161 = v136;
          v133 = 0;
          if (v85)
          {
            if (*((_DWORD *)v85 + 6) == 2)
            {
              if ((*((_WORD *)v85 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v85, v84);
            }
            else
            {
              *((_DWORD *)v85 + 6) -= 2;
            }
          }
        }
      }
      if (*((_BYTE *)this + 225) == 2)
      {
        WebCore::VisiblePosition::canonicalPosition(v6, (uint64_t)&v129);
        v132 = 1;
      }
      else
      {
        v75 = *((unsigned __int8 *)this + 224);
        WebCore::VisiblePosition::canonicalPosition(v6, (uint64_t)&v129);
        v132 = 1;
        if (!v75)
        {
          v86 = v129;
          if (v129)
          {
            *((_DWORD *)v129 + 6) += 2;
            v138 = v86;
            v139 = v130;
            v140 = v131;
            LOBYTE(v141) = 0;
            if (!WebCore::inSameLine((WebCore *)&v129, (const WebCore::VisiblePosition *)&v138, v76))
              v132 = 0;
            v88 = v138;
            v138 = 0;
            if (v88)
            {
              if (*((_DWORD *)v88 + 6) == 2)
              {
                if ((*((_WORD *)v88 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v88, v87);
              }
              else
              {
                *((_DWORD *)v88 + 6) -= 2;
              }
            }
            v20 = v128;
          }
        }
      }
      WebCore::startOfNextParagraph((WebCore *)&v129, (uint64_t)&v133);
      v77 = v133;
      v133 = 0;
      v78 = (uint64_t)v179;
      v179 = v77;
      v10 = (uint64_t)WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
      if (v78)
      {
        if (*(_DWORD *)(v78 + 24) == 2)
        {
          if ((*(_WORD *)(v78 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v78, v59);
        }
        else
        {
          *(_DWORD *)(v78 + 24) -= 2;
        }
      }
      v180 = v134;
      v181 = v135;
      v182 = v136;
      v79 = v129;
      v129 = 0;
      if (v79)
      {
        if (*((_DWORD *)v79 + 6) == 2)
        {
          if ((*((_WORD *)v79 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v79, v59);
        }
        else
        {
          *((_DWORD *)v79 + 6) -= 2;
        }
      }
      LOBYTE(v60) = 1;
      goto LABEL_198;
    }
    LOBYTE(v60) = 0;
    v20 = v128;
LABEL_198:
    v80 = v137;
    v137 = 0;
    if (v80)
    {
      if (*((_DWORD *)v80 + 6) == 2)
      {
        if ((*((_WORD *)v80 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v80, v59);
      }
      else
      {
        *((_DWORD *)v80 + 6) -= 2;
      }
    }
    if ((v60 & 1) == 0)
      goto LABEL_260;
  }
  WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v138, (const WebCore::VisiblePosition *)&v154, 0);
  WebCore::EditCommand::setEndingSelection((uint64_t *)this, (const WebCore::VisibleSelection *)&v138);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v138);
  WebCore::InsertListCommand::doApplyForSingleParagraph((uint64_t)this, (WebCore::Node *)v127, (WebCore::HTMLElementFactory *)v20, (WebCore::Node *)&v144);
  if (*((_BYTE *)this + 225) == 2)
  {
    WebCore::VisiblePosition::canonicalPosition(v3, (uint64_t)&v133);
    v136 = 1;
    v94 = (unsigned int *)v126;
  }
  else
  {
    v91 = *((unsigned __int8 *)this + 224);
    WebCore::VisiblePosition::canonicalPosition(v3, (uint64_t)&v133);
    v136 = 1;
    v94 = (unsigned int *)v126;
    if (v91)
      goto LABEL_249;
  }
  v119 = v133;
  if (v133)
  {
    *((_DWORD *)v133 + 6) += 2;
    v138 = v119;
    v139 = v134;
    v140 = v135;
    LOBYTE(v141) = 0;
    if (!WebCore::inSameLine((WebCore *)&v133, (const WebCore::VisiblePosition *)&v138, v93))
      v136 = 0;
    v120 = v138;
    v138 = 0;
    if (v120)
    {
      if (*((_DWORD *)v120 + 6) == 2)
      {
        if ((*((_WORD *)v120 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v120, v92);
      }
      else
      {
        *((_DWORD *)v120 + 6) -= 2;
      }
    }
    v94 = (unsigned int *)v126;
  }
LABEL_249:
  v95 = v133;
  v133 = 0;
  v96 = v154;
  v154 = v95;
  if (!v96)
    goto LABEL_252;
  if (*((_DWORD *)v96 + 6) != 2)
  {
    *((_DWORD *)v96 + 6) -= 2;
    goto LABEL_252;
  }
  if ((*((_WORD *)v96 + 15) & 0x400) != 0)
  {
LABEL_252:
    v155 = v134;
    v156 = v135;
    v157 = v136;
  }
  else
  {
    WebCore::Node::removedLastRef(v96, v92);
    v111 = v133;
    v155 = v134;
    v156 = v135;
    v157 = v136;
    v133 = 0;
    if (v111)
    {
      if (*((_DWORD *)v111 + 6) == 2)
      {
        if ((*((_WORD *)v111 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v111, v110);
      }
      else
      {
        *((_DWORD *)v111 + 6) -= 2;
      }
    }
  }
  if (v158 && (*((_BYTE *)v158 + 22) & 8) == 0)
  {
    WebCore::visiblePositionForIndex(v94, (uint64_t)v149, 1, &v138);
    v98 = v138;
    v138 = 0;
    v99 = v158;
    v158 = v98;
    if (!v99)
      goto LABEL_258;
    if (*((_DWORD *)v99 + 6) != 2)
    {
      *((_DWORD *)v99 + 6) -= 2;
      goto LABEL_258;
    }
    if ((*((_WORD *)v99 + 15) & 0x400) != 0)
    {
LABEL_258:
      v159 = v139;
      v160 = v140;
      v161 = (char)v141;
    }
    else
    {
      WebCore::Node::removedLastRef(v99, v97);
      v115 = v138;
      v159 = v139;
      v160 = v140;
      v161 = (char)v141;
      v138 = 0;
      if (v115)
      {
        if (*((_DWORD *)v115 + 6) == 2)
        {
          if ((*((_WORD *)v115 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v115, v114);
        }
        else
        {
          *((_DWORD *)v115 + 6) -= 2;
        }
      }
    }
  }
  WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v138, (const WebCore::VisiblePosition *)&v158, (const WebCore::VisiblePosition *)&v154, (*((unsigned __int8 *)this + 226) >> 1) & 1);
  WebCore::EditCommand::setEndingSelection((uint64_t *)this, (const WebCore::VisibleSelection *)&v138);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v138);
LABEL_260:
  v100 = (uint64_t)v179;
  v179 = 0;
  if (v100)
  {
    if (*(_DWORD *)(v100 + 24) == 2)
    {
      if ((*(_WORD *)(v100 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v100, v59);
    }
    else
    {
      *(_DWORD *)(v100 + 24) -= 2;
    }
  }
  v101 = v147;
  v147 = 0;
  if (v101)
  {
    if (*((_DWORD *)v101 + 6) == 2)
    {
      if ((*((_WORD *)v101 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v101, v59);
    }
    else
    {
      *((_DWORD *)v101 + 6) -= 2;
    }
  }
  v102 = v144;
  v144 = 0;
  if (v102)
  {
    if (*((_DWORD *)v102 + 6) == 2)
    {
      if ((*((_WORD *)v102 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v102, v59);
    }
    else
    {
      *((_DWORD *)v102 + 6) -= 2;
    }
  }
  v103 = v149;
  v149 = 0;
  if (v103)
  {
    if (*((_DWORD *)v103 + 6) == 2)
    {
      if ((*((_WORD *)v103 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v103, v59);
    }
    else
    {
      *((_DWORD *)v103 + 6) -= 2;
    }
  }
  v104 = v150;
  v150 = 0;
  if (v104)
  {
    if (*((_DWORD *)v104 + 6) == 2)
    {
      if ((*((_WORD *)v104 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v104, v59);
    }
    else
    {
      *((_DWORD *)v104 + 6) -= 2;
    }
  }
  v105 = v154;
  v154 = 0;
  if (v105)
  {
    if (*((_DWORD *)v105 + 6) == 2)
    {
      if ((*((_WORD *)v105 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v105, v59);
    }
    else
    {
      *((_DWORD *)v105 + 6) -= 2;
    }
  }
  v106 = v158;
  v158 = 0;
  if (v106)
  {
    if (*((_DWORD *)v106 + 6) == 2)
    {
      if ((*((_WORD *)v106 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v106, v59);
    }
    else
    {
      *((_DWORD *)v106 + 6) -= 2;
    }
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v162);
LABEL_62:
  v36 = (uint64_t)v171;
  v171 = 0;
  if (v36)
  {
    if (*(_DWORD *)(v36 + 24) == 2)
    {
      if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v36, v7);
    }
    else
    {
      *(_DWORD *)(v36 + 24) -= 2;
    }
  }
  result = (unsigned int *)v175;
  v175 = 0;
  if (result)
  {
LABEL_68:
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v7);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::InsertListCommand::doApplyForSingleParagraph(uint64_t a1, WebCore::Node *a2, WebCore::HTMLElementFactory *a3, WebCore::Node *a4)
{
  WebCore::HTMLElementFactory *v6;
  uint64_t v8;
  WebCore::VisiblePosition *v9;
  WebCore::Node *v10;
  void *v11;
  const WebCore::SimpleRange *v12;
  Node *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  WebCore::Node *v18;
  uint64_t v19;
  unsigned int v20;
  char v21;
  void *v22;
  _BOOL4 v23;
  Node *v24;
  Node *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  void *v29;
  _BOOL4 v30;
  Node *v31;
  Node *v32;
  Node *v33;
  void *v34;
  Node *v35;
  _BOOL4 v36;
  unsigned int *v37;
  __int16 v38;
  char v39;
  Node *v40;
  void *v41;
  int v42;
  int v43;
  WebCore::Node *v44;
  unsigned int *v45;
  WebCore::HTMLElementFactory *v46;
  int v47;
  WebCore::Node *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  Node *var0;
  uint64_t v56;
  int v57;
  const WebCore::VisiblePosition *v58;
  WebCore::Node *v59;
  WebCore::Node *v60;
  uint64_t v61;
  __int16 v62;
  void *v63;
  Node *v64;
  Node *v65;
  void *v66;
  Node *v67;
  Node *v68;
  Node *v69;
  void *v70;
  WebCore::Node *v71;
  Node *v72;
  void *v73;
  Node *v74;
  uint64_t v75;
  int v76;
  Node *v77;
  int v78;
  int v79;
  int v80;
  __int16 v81;
  char v82;
  Node *v83;
  __int16 v84;
  char v85;
  Node *v86;
  uint64_t v87;
  void *v88;
  Node *v89;
  Node *v90;
  void *v91;
  uint64_t v92;
  _BOOL4 v93;
  __int16 v94;
  uint64_t v95;
  int v96;
  WebCore::Node *v97;
  int v98;
  int v99;
  Node *v100;
  char v101;
  void *v102;
  Node *v103;
  int v104;
  __int16 v105;
  uint64_t v106;
  char v107;
  Node *v108;
  uint64_t v109;
  Node *v110;
  uint64_t v111;
  uint64_t v112;
  WebCore::Node *v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  Node *v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  WebCore::Node *v121;
  uint64_t v122;
  int v123;
  void *v124;
  void *v125;
  Node *v126;
  void *v127;
  Node *v128;
  int v129;
  uint64_t v130;
  void *v131;
  WebCore::Node *v132;
  int v133;
  Node *v134;
  int v135;
  Node *v136;
  void *v137;
  Node *v138;
  WebCore::Node *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  int v145;
  WebCore::Node *v146;
  Node *v147;
  unsigned int *result;
  char v149;
  int v150;
  const WebCore::VisiblePosition *v151;
  Node *v152;
  Node *v153;
  Node *v154;
  unsigned int v155;
  uint64_t v156;
  BOOL v157;
  Node *v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  WebCore::Node *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  Node *v170;
  void *v171;
  Node *v172;
  void *v173;
  WebCore::Node *v174;
  WebCore::Node *v175;
  void *v176;
  Node *v177;
  Node *v178;
  Node *v179;
  Node *v180;
  void *v181;
  Node *v182;
  Node *v183;
  WebCore::Node *v184;
  void *v185;
  Node *v186;
  Node *v187;
  WebCore::Node *v188;
  void *v189;
  WebCore::Element *v190;
  Node *v191;
  WebCore::Node *v192;
  WebCore::Element *v193;
  Node *v194;
  uint64_t v195;
  WebCore::Node *v196;
  void *v197;
  void *v198;
  Node *v199;
  int v200;
  int v201;
  Node *v202;
  void *v203;
  Node *v204;
  Node *v205;
  Node *v206;
  Node *v207;
  Node *v208;
  Node *v209;
  void *v210;
  WebCore::Node *v211;
  Node *v212;
  Node *v213;
  unsigned int v214;
  int v215;
  int v216;
  WebCore::Node *v217;
  Node *v218;
  int v219;
  int v220;
  int v221;
  int v222;
  __int16 v223;
  uint64_t v224;
  int v225;
  int v226;
  __int16 v227;
  uint64_t v228;
  _BOOL4 v229;
  Node *v230;
  Node *v231;
  Node *v232;
  Node *v233;
  int v234;
  Node *v235;
  Node *v236;
  void *v237;
  Node *v238;
  void *v239;
  Node *v240;
  __int16 v241;
  Node *v242;
  void *v243;
  Node *v244;
  Node *v245;
  Node *v246;
  uint64_t v247;
  uint64_t v248;
  WebCore::HTMLElementFactory *v249;
  _BOOL4 v250;
  unsigned int *v251;
  char v252;
  WebCore::Node *v253;
  unsigned int v254;
  char v255;
  BOOL v256;
  VisiblePosition v257;
  int v258;
  char v259;
  uint64_t v260;
  int v261;
  char v262;
  uint64_t v263;
  int v264;
  char v265;
  uint64_t v266;
  int v267;
  char v268;
  uint64_t v269;
  int v270;
  char v271;
  __int16 v272;
  char v273;
  WebCore::Node *v274;
  WebCore::Node *v275;
  WebCore::Node *v276;
  unsigned int v277;
  char v278;
  char v279;
  Node *v280;
  unsigned int var1;
  char v282;
  VisiblePosition v283;
  WebCore *v284;
  VisiblePosition v285;

  LODWORD(v6) = (_DWORD)a2;
  v9 = (WebCore::VisiblePosition *)(a1 + 192);
  v8 = *(_QWORD *)(a1 + 192);
  if (v8)
    *(_DWORD *)(v8 + 24) += 2;
  WebCore::enclosingListChild((unsigned int *)v8, a2, (unsigned int **)&v274);
  if (!v274)
    goto LABEL_296;
  WebCore::enclosingList((unsigned int *)v274, v10, &v280);
  v13 = v280;
  if (!v280)
  {
    v46 = a3;
    v47 = (int)v6;
    v48 = v274;
    v49 = *((_QWORD *)v274 + 4);
    if (v49 && (*(_DWORD *)(v49 + 24) += 2, WebCore::Node::computeEditability(v49, 0, 1) != 2))
    {
      v52 = 0;
    }
    else
    {
      v50 = *(_QWORD *)(a1 + 16);
      v51 = bmalloc::api::isoAllocate();
      v52 = v51;
      *(_OWORD *)(v51 + 8) = xmmword_1968BC9D0;
      *(_DWORD *)(v51 + 28) = 4124;
      *(_QWORD *)(v51 + 32) = 0;
      *(_QWORD *)(v51 + 40) = v50 + 96;
      *(_OWORD *)(v51 + 48) = 0u;
      *(_OWORD *)(v51 + 64) = 0u;
      ++*(_DWORD *)(v50 + 3324);
      *(_QWORD *)(v51 + 80) = 0;
      *(_QWORD *)(v51 + 88) = 0;
      v53 = WebCore::HTMLNames::ulTag;
      if (WebCore::HTMLNames::ulTag)
        ++*(_DWORD *)WebCore::HTMLNames::ulTag;
      *(_QWORD *)(v51 + 96) = v53;
      *(_QWORD *)(v51 + 104) = 0;
      *(_QWORD *)v51 = off_1E33D09E0;
      *(_DWORD *)(v51 + 24) = 4;
      v257.var0.var0.var0 = (Node *)v51;
      WebCore::CompositeEditCommand::insertNodeBefore((WebCore::CompositeEditCommand *)a1, (uint64_t *)&v257, (uint64_t)v48, 1);
      var0 = v257.var0.var0.var0;
      v257.var0.var0.var0 = 0;
      if (var0)
      {
        if (*((_DWORD *)var0 + 6) == 2)
        {
          if ((*((_WORD *)var0 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)var0, v54);
        }
        else
        {
          *((_DWORD *)var0 + 6) -= 2;
        }
      }
      if (WebCore::Node::computeEditability(v52, 0, 1))
      {
        WebCore::CompositeEditCommand::removeNode((WebCore::Node *)a1, (uint64_t)v48, 1);
        *((_DWORD *)v48 + 6) += 2;
        v257.var0.var0.var0 = (Node *)v48;
        *(_DWORD *)(v52 + 24) += 2;
        v285.var0.var0.var0 = (Node *)v52;
        WebCore::CompositeEditCommand::appendNode((WebCore::CompositeEditCommand *)a1, (uint64_t *)&v257, (uint64_t *)&v285);
        if (v285.var0.var0.var0)
        {
          if (*((_DWORD *)v285.var0.var0.var0 + 6) == 2)
          {
            if ((*((_WORD *)v285.var0.var0.var0 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v285.var0.var0.var0, v11);
          }
          else
          {
            *((_DWORD *)v285.var0.var0.var0 + 6) -= 2;
          }
        }
        if (v257.var0.var0.var0)
        {
          if (*((_DWORD *)v257.var0.var0.var0 + 6) == 2)
          {
            if ((*((_WORD *)v257.var0.var0.var0 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v257.var0.var0.var0, v11);
          }
          else
          {
            *((_DWORD *)v257.var0.var0.var0 + 6) -= 2;
          }
        }
        v56 = *(_QWORD *)(a1 + 280);
        *(_QWORD *)(a1 + 280) = v52;
        if (v56)
        {
          if (*(_DWORD *)(v56 + 24) == 2)
          {
            if ((*(_WORD *)(v56 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v56, v11);
              v52 = *(_QWORD *)(a1 + 280);
            }
          }
          else
          {
            *(_DWORD *)(v56 + 24) -= 2;
          }
        }
      }
      else
      {
        if (*(_DWORD *)(v52 + 24) == 2)
        {
          if ((*(_WORD *)(v52 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v52, v11);
        }
        else
        {
          *(_DWORD *)(v52 + 24) -= 2;
        }
        v52 = 0;
      }
      if (!v49)
      {
LABEL_100:
        if (!v52)
        {
          v80 = 0;
          LOBYTE(v6) = v47;
          a3 = v46;
          v16 = 0;
          goto LABEL_286;
        }
        v76 = *(_DWORD *)(v52 + 24) + 2;
        *(_DWORD *)(v52 + 24) = v76;
        LODWORD(v6) = v47;
        a3 = v46;
        if ((*(_BYTE *)(v52 + 22) & 8) != 0)
        {
          WebCore::InsertListCommand::mergeWithNeighboringLists((WebCore::InsertListCommand *)&v257, (WebCore::HTMLElement *)a1, (WebCore::Element *)v52);
          v13 = v257.var0.var0.var0;
          v77 = v280;
          v280 = v257.var0.var0.var0;
          if (v77)
          {
            if (*((_DWORD *)v77 + 6) == 2)
            {
              if ((*((_WORD *)v77 + 15) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v77, v11);
                v13 = v280;
              }
            }
            else
            {
              *((_DWORD *)v77 + 6) -= 2;
            }
          }
          if (v13)
          {
            v76 = *(_DWORD *)(v52 + 24);
            if ((*((_BYTE *)v13 + 22) & 8) != 0)
            {
              v78 = v76 - 2;
              if (v78)
              {
                *(_DWORD *)(v52 + 24) = v78;
              }
              else if ((*(_WORD *)(v52 + 30) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v52, v11);
                v13 = v280;
              }
              goto LABEL_5;
            }
          }
          else
          {
            v76 = *(_DWORD *)(v52 + 24);
          }
        }
        v79 = v76 - 2;
        if (v79)
        {
          v16 = 0;
          v80 = 0;
          *(_DWORD *)(v52 + 24) = v79;
          goto LABEL_286;
        }
        if ((*(_WORD *)(v52 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v52, v11);
        goto LABEL_214;
      }
    }
    if (*(_DWORD *)(v49 + 24) == 2)
    {
      if ((*(_WORD *)(v49 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v49, v11);
    }
    else
    {
      *(_DWORD *)(v49 + 24) -= 2;
    }
    goto LABEL_100;
  }
LABEL_5:
  v14 = *(_QWORD *)(*((_QWORD *)v13 + 12) + 24);
  v15 = *(_QWORD *)(*(_QWORD *)a3 + 24);
  v16 = v14 != v15;
  if (v14 == v15 && (_DWORD)v6 != 0)
  {
LABEL_214:
    v16 = 0;
    v80 = 0;
    goto LABEL_286;
  }
  v252 = (char)v6;
  if (v14 != v15 && WebCore::isNodeVisiblyContainedWithin((WebCore *)v13, a4, v12))
  {
    WebCore::visiblePositionBeforeNode((WebCore *)v280, v18, (uint64_t)&v257);
    v19 = *(_QWORD *)a4;
    *(_DWORD *)(v19 + 24) = *(_DWORD *)(*(_QWORD *)a4 + 24) + 2;
    v20 = *((_DWORD *)a4 + 2);
    v283.var0.var0.var0 = (Node *)v19;
    v283.var0.var1 = v20;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 208))(v19) & 1) != 0)
    {
      v21 = 8;
    }
    else if (v20)
    {
      v21 = 10;
    }
    else
    {
      v21 = 9;
    }
    *((_BYTE *)&v283.var0 + 12) = *((_BYTE *)&v283.var0 + 12) & 0xF0 | v21;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v283, (uint64_t)&v285);
    v285.var1 = 1;
    v23 = WebCore::operator==((uint64_t *)&v257, (uint64_t *)&v285);
    v24 = v285.var0.var0.var0;
    v285.var0.var0.var0 = 0;
    if (v24)
    {
      if (*((_DWORD *)v24 + 6) == 2)
      {
        if ((*((_WORD *)v24 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v24, v22);
      }
      else
      {
        *((_DWORD *)v24 + 6) -= 2;
      }
    }
    if (*(_DWORD *)(v19 + 24) == 2)
    {
      if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v19, v22);
    }
    else
    {
      *(_DWORD *)(v19 + 24) -= 2;
    }
    v25 = v257.var0.var0.var0;
    v257.var0.var0.var0 = 0;
    if (v25)
    {
      if (*((_DWORD *)v25 + 6) == 2)
      {
        if ((*((_WORD *)v25 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v25, v22);
      }
      else
      {
        *((_DWORD *)v25 + 6) -= 2;
      }
    }
    WebCore::visiblePositionAfterNode((WebCore *)v280, (WebCore::Node *)v22, (uint64_t)&v257);
    v26 = *((_QWORD *)a4 + 2);
    *(_DWORD *)(v26 + 24) += 2;
    v27 = *((_DWORD *)a4 + 6);
    v283.var0.var0.var0 = (Node *)v26;
    v283.var0.var1 = v27;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 208))(v26) & 1) != 0)
    {
      v28 = 8;
    }
    else if (v27)
    {
      v28 = 10;
    }
    else
    {
      v28 = 9;
    }
    *((_BYTE *)&v283.var0 + 12) = *((_BYTE *)&v283.var0 + 12) & 0xF0 | v28;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v283, (uint64_t)&v285);
    v285.var1 = 1;
    v30 = WebCore::operator==((uint64_t *)&v257, (uint64_t *)&v285);
    v31 = v285.var0.var0.var0;
    v285.var0.var0.var0 = 0;
    if (v31)
    {
      if (*((_DWORD *)v31 + 6) == 2)
      {
        if ((*((_WORD *)v31 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v31, v29);
      }
      else
      {
        *((_DWORD *)v31 + 6) -= 2;
      }
    }
    if (*(_DWORD *)(v26 + 24) == 2)
    {
      if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v26, v29);
    }
    else
    {
      *(_DWORD *)(v26 + 24) -= 2;
    }
    v32 = v257.var0.var0.var0;
    v257.var0.var0.var0 = 0;
    if (v32)
    {
      if (*((_DWORD *)v32 + 6) == 2)
      {
        if ((*((_WORD *)v32 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v32, v29);
      }
      else
      {
        *((_DWORD *)v32 + 6) -= 2;
      }
    }
    WebCore::HTMLElementFactory::createElement(a3, *(const WebCore::QualifiedName **)(a1 + 16), 0, 0, (uint64_t *)&v257);
    v33 = v257.var0.var0.var0;
    *((_DWORD *)v257.var0.var0.var0 + 6) += 2;
    v257.var0.var0.var0 = v33;
    WebCore::CompositeEditCommand::insertNodeBefore((WebCore::CompositeEditCommand *)a1, (uint64_t *)&v257, (uint64_t)v280, 1);
    v35 = v257.var0.var0.var0;
    v257.var0.var0.var0 = 0;
    if (v35)
    {
      if (*((_DWORD *)v35 + 6) == 2)
      {
        if ((*((_WORD *)v35 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v35, v34);
      }
      else
      {
        *((_DWORD *)v35 + 6) -= 2;
      }
    }
    if (!WebCore::Node::computeEditability((uint64_t)v33, 0, 1))
    {
      v6 = a3;
      v86 = v33;
LABEL_283:
      if (*((_DWORD *)v86 + 6) != 2)
      {
        v80 = 0;
        *((_DWORD *)v86 + 6) -= 2;
LABEL_285:
        v16 = 1;
        a3 = v6;
        LOBYTE(v6) = v252;
        goto LABEL_286;
      }
      if ((*((_WORD *)v86 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v86, v11);
LABEL_594:
      v80 = 0;
      goto LABEL_285;
    }
    v250 = v30;
    v36 = v23;
    v37 = (unsigned int *)v280;
    v38 = *((_WORD *)v280 + 14);
    *((_DWORD *)v280 + 6) += 2;
    v285.var0.var0.var0 = (Node *)v37;
    v285.var0.var1 = 0;
    if ((v38 & 1) != 0)
      v39 = *((_BYTE *)&v285.var0 + 12) & 0xF0;
    else
      v39 = *((_BYTE *)&v285.var0 + 12) & 0xF0 | 3;
    *((_BYTE *)&v285.var0 + 12) = v39;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v285, (uint64_t)&v257);
    v257.var1 = 1;
    v40 = v257.var0.var0.var0;
    if (!v257.var0.var0.var0)
    {
      WebCore::enclosingListChild((unsigned int **)&v253, 0, (WebCore::Node *)v280);
      goto LABEL_44;
    }
    *((_DWORD *)v257.var0.var0.var0 + 6) += 2;
    WebCore::enclosingListChild((unsigned int **)&v253, (WebCore::Node *)v40, (WebCore::Node *)v280);
    v42 = *((_DWORD *)v40 + 6) - 2;
    if (*((_DWORD *)v40 + 6) == 2)
    {
      if ((*((_WORD *)v40 + 15) & 0x400) != 0)
      {
LABEL_619:
        if ((*((_WORD *)v40 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v40, v41);
LABEL_44:
        if (v37[6] == 2)
        {
          if ((*((_WORD *)v37 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v37, v41);
        }
        else
        {
          v37[6] -= 2;
        }
        v44 = v253;
        if (!v253 || (*((_WORD *)v253 + 14) & 8) == 0 || (*((_QWORD *)v253 + 8) & 0xFFFFFFFFFFFFLL) == 0)
          goto LABEL_112;
        if ((*(_BYTE *)((*((_QWORD *)v253 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195AFDC08);
        }
        if ((*(_BYTE *)((*((_QWORD *)v253 + 8) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 1)
        {
          v45 = (unsigned int *)v280;
        }
        else
        {
LABEL_112:
          v45 = (unsigned int *)v280;
          v44 = (WebCore::Node *)v280;
        }
        *((_DWORD *)v44 + 6) += 2;
        v81 = *((_WORD *)v45 + 14);
        v45[6] += 2;
        v283.var0.var0.var0 = (Node *)v45;
        v283.var0.var1 = 0;
        v82 = *((_BYTE *)&v283.var0 + 12) & 0xF0;
        if ((v81 & 1) == 0)
          v82 = *((_BYTE *)&v283.var0 + 12) & 0xF0 | 3;
        *((_BYTE *)&v283.var0 + 12) = v82;
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v283, (uint64_t)&v257);
        v257.var1 = 1;
        v83 = v280;
        v84 = *((_WORD *)v280 + 14);
        *((_DWORD *)v280 + 6) += 2;
        if ((v84 & 1) != 0)
        {
          v87 = *((_QWORD *)v83 + 10);
          if (v87)
            LODWORD(v87) = *(_DWORD *)(v87 + 4);
          v276 = (WebCore::Node *)v83;
          v277 = v87;
          v85 = v278 & 0xF0;
        }
        else
        {
          v276 = (WebCore::Node *)v83;
          v277 = 0;
          v85 = v278 & 0xF0 | 4;
        }
        v278 = v85;
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v276, (uint64_t)&v285);
        v285.var1 = 1;
        WebCore::CompositeEditCommand::moveParagraphWithClones((unsigned int *)a1, &v257, &v285, (WebCore::Element *)v33, v44);
        v89 = v285.var0.var0.var0;
        v285.var0.var0.var0 = 0;
        if (v89)
        {
          if (*((_DWORD *)v89 + 6) == 2)
          {
            if ((*((_WORD *)v89 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v89, v88);
          }
          else
          {
            *((_DWORD *)v89 + 6) -= 2;
          }
        }
        if (v276)
        {
          if (*((_DWORD *)v276 + 6) == 2)
          {
            if ((*((_WORD *)v276 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v276, v88);
          }
          else
          {
            *((_DWORD *)v276 + 6) -= 2;
          }
        }
        v90 = v257.var0.var0.var0;
        v257.var0.var0.var0 = 0;
        if (v90)
        {
          if (*((_DWORD *)v90 + 6) == 2)
          {
            if ((*((_WORD *)v90 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v90, v88);
          }
          else
          {
            *((_DWORD *)v90 + 6) -= 2;
          }
        }
        if (v283.var0.var0.var0)
        {
          if (*((_DWORD *)v283.var0.var0.var0 + 6) == 2)
          {
            if ((*((_WORD *)v283.var0.var0.var0 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v283.var0.var0.var0, v88);
          }
          else
          {
            *((_DWORD *)v283.var0.var0.var0 + 6) -= 2;
          }
        }
        v6 = a3;
        if (v280 && (*((_BYTE *)v280 + 22) & 8) != 0)
          WebCore::CompositeEditCommand::removeNode((WebCore::Node *)a1, (uint64_t)v280, 1);
        WebCore::InsertListCommand::mergeWithNeighboringLists((WebCore::InsertListCommand *)&v257, (WebCore::HTMLElement *)a1, (WebCore::Element *)v33);
        v86 = v257.var0.var0.var0;
        if (*((_DWORD *)v33 + 6) == 2)
        {
          if ((*((_WORD *)v33 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v33, v91);
        }
        else
        {
          *((_DWORD *)v33 + 6) -= 2;
        }
        if (v36)
        {
          if (!v86)
            goto LABEL_273;
          *((_DWORD *)v86 + 6) += 2;
          v92 = *(_QWORD *)a4;
          *(_QWORD *)a4 = v86;
          if (v92)
          {
            if (*(_DWORD *)(v92 + 24) == 2)
            {
              if ((*(_WORD *)(v92 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v92, v91);
            }
            else
            {
              *(_DWORD *)(v92 + 24) -= 2;
            }
          }
          *((_DWORD *)a4 + 2) = 0;
        }
        v93 = v250;
        if (!v86)
          v93 = 0;
        if (!v93)
        {
LABEL_273:
          v142 = *(_QWORD *)a4;
          *(_DWORD *)(v142 + 24) = *(_DWORD *)(*(_QWORD *)a4 + 24) + 2;
          v143 = *((_DWORD *)a4 + 2);
          v144 = *((_QWORD *)a4 + 2);
          *(_DWORD *)(v144 + 24) += 2;
          v145 = *((_DWORD *)a4 + 6);
          *(_DWORD *)(v142 + 24) += 2;
          v257.var0.var0.var0 = (Node *)v142;
          v257.var0.var1 = v143;
          *((_BYTE *)&v257.var0 + 12) = 0;
          *(_DWORD *)(v144 + 24) += 2;
          *(_QWORD *)&v257.var1 = v144;
          v258 = v145;
          v259 = 0;
          v260 = 0;
          v261 = 0;
          v262 &= 0xF0u;
          v263 = 0;
          v264 = 0;
          v265 &= 0xF0u;
          v266 = 0;
          v267 = 0;
          v268 &= 0xF0u;
          v269 = 0;
          v270 = 0;
          v271 &= 0xF0u;
          v272 = 1;
          v273 &= ~2u;
          WebCore::VisibleSelection::validate((uint64_t)&v257, 0);
          WebCore::EditCommand::setEndingSelection((uint64_t *)a1, (const WebCore::VisibleSelection *)&v257);
          WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v257);
          if (*(_DWORD *)(v144 + 24) == 2)
          {
            if ((*(_WORD *)(v144 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v144, v11);
          }
          else
          {
            *(_DWORD *)(v144 + 24) -= 2;
          }
          if (*(_DWORD *)(v142 + 24) == 2)
          {
            if ((*(_WORD *)(v142 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v142, v11);
          }
          else
          {
            *(_DWORD *)(v142 + 24) -= 2;
          }
          if (*((_DWORD *)v44 + 6) == 2)
          {
            if ((*((_WORD *)v44 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v44, v11);
          }
          else
          {
            *((_DWORD *)v44 + 6) -= 2;
          }
          v146 = v253;
          v253 = 0;
          if (v146)
          {
            if (*((_DWORD *)v146 + 6) == 2)
            {
              if ((*((_WORD *)v146 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v146, v11);
            }
            else
            {
              *((_DWORD *)v146 + 6) -= 2;
            }
          }
          if (!v86)
            goto LABEL_594;
          goto LABEL_283;
        }
        *((_DWORD *)v86 + 6) += 2;
        v94 = *((_WORD *)v86 + 14);
        if ((v94 & 1) != 0)
        {
          v140 = *((_QWORD *)v86 + 10);
          if (v140)
          {
            v96 = *(_DWORD *)(v140 + 4);
            goto LABEL_269;
          }
        }
        else if ((v94 & 4) != 0)
        {
          v95 = *((_QWORD *)v86 + 10);
          if (v95)
          {
            v96 = 0;
            do
            {
              ++v96;
              v95 = *(_QWORD *)(v95 + 56);
            }
            while (v95);
            goto LABEL_269;
          }
        }
        v96 = 0;
LABEL_269:
        v141 = *((_QWORD *)a4 + 2);
        *((_QWORD *)a4 + 2) = v86;
        if (v141)
        {
          if (*(_DWORD *)(v141 + 24) == 2)
          {
            if ((*(_WORD *)(v141 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v141, v91);
          }
          else
          {
            *(_DWORD *)(v141 + 24) -= 2;
          }
        }
        *((_DWORD *)a4 + 6) = v96;
        goto LABEL_273;
      }
      WebCore::Node::removedLastRef((WebCore::Node *)v40, v41);
      v42 = *((_DWORD *)v40 + 6);
    }
    else
    {
      *((_DWORD *)v40 + 6) = v42;
    }
    v43 = v42 - 2;
    if (v43)
    {
      *((_DWORD *)v40 + 6) = v43;
      goto LABEL_44;
    }
    goto LABEL_619;
  }
  if (*(_BYTE *)(a1 + 225) == 2)
  {
    WebCore::VisiblePosition::canonicalPosition(v9, (uint64_t)&v276);
    v279 = 1;
  }
  else
  {
    v57 = *(unsigned __int8 *)(a1 + 224);
    WebCore::VisiblePosition::canonicalPosition(v9, (uint64_t)&v276);
    v279 = 1;
    if (!v57)
    {
      v245 = (Node *)v276;
      if (v276)
      {
        *((_DWORD *)v276 + 6) += 2;
        v257.var0.var0.var0 = v245;
        v257.var0.var1 = v277;
        *((_BYTE *)&v257.var0 + 12) = v278;
        v257.var1 = 0;
        if (!WebCore::inSameLine((WebCore *)&v276, (const WebCore::VisiblePosition *)&v257, v58))
          v279 = 0;
        v246 = v257.var0.var0.var0;
        v257.var0.var0.var0 = 0;
        if (v246)
        {
          if (*((_DWORD *)v246 + 6) == 2)
          {
            if ((*((_WORD *)v246 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v246, v11);
          }
          else
          {
            *((_DWORD *)v246 + 6) -= 2;
          }
        }
      }
    }
  }
  v59 = (WebCore::Node *)v280;
  v60 = v274;
  v285.var0.var0.var0 = 0;
  v285.var0.var1 = 0;
  *((_BYTE *)&v285.var0 + 12) = 0;
  v285.var1 = 1;
  v283.var0.var0.var0 = 0;
  v283.var0.var1 = 0;
  *((_BYTE *)&v283.var0 + 12) = 0;
  v283.var1 = 1;
  v61 = *((_QWORD *)v280 + 4);
  if (!v61 || !WebCore::Node::computeEditability(v61, 0, 1))
  {
    v71 = 0;
    v75 = 0;
    LOBYTE(v6) = v252;
    goto LABEL_239;
  }
  v251 = (unsigned int *)v59;
  if (!v60
    || (v62 = *((_WORD *)v60 + 14), (v62 & 0x10) == 0)
    || *(_QWORD *)(*((_QWORD *)v60 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::liTag + 24))
  {
    WebCore::startOfParagraph((uint64_t)&v276, 2, &v257);
    v64 = v257.var0.var0.var0;
    v257.var0.var0.var0 = 0;
    v65 = v285.var0.var0.var0;
    v285.var0.var0.var0 = v64;
    if (v65)
    {
      if (*((_DWORD *)v65 + 6) == 2)
      {
        if ((*((_WORD *)v65 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v65, v63);
          v238 = v257.var0.var0.var0;
          v285.var0.var1 = v257.var0.var1;
          *((_BYTE *)&v285.var0 + 12) = *((_BYTE *)&v257.var0 + 12);
          v285.var1 = v257.var1;
          v257.var0.var0.var0 = 0;
          if (v238)
          {
            if (*((_DWORD *)v238 + 6) == 2)
            {
              if ((*((_WORD *)v238 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v238, v237);
            }
            else
            {
              *((_DWORD *)v238 + 6) -= 2;
            }
          }
LABEL_80:
          WebCore::endOfParagraph((WebCore::Node *)&v285, 2, &v257);
          v67 = v257.var0.var0.var0;
          v257.var0.var0.var0 = 0;
          v68 = v283.var0.var0.var0;
          v283.var0.var0.var0 = v67;
          if (v68)
          {
            if (*((_DWORD *)v68 + 6) == 2)
            {
              if ((*((_WORD *)v68 + 15) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v68, v66);
                v240 = v257.var0.var0.var0;
                v283.var0.var1 = v257.var0.var1;
                *((_BYTE *)&v283.var0 + 12) = *((_BYTE *)&v257.var0 + 12);
                v283.var1 = v257.var1;
                v257.var0.var0.var0 = 0;
                if (v240)
                {
                  if (*((_DWORD *)v240 + 6) == 2)
                  {
                    if ((*((_WORD *)v240 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v240, v239);
                  }
                  else
                  {
                    *((_DWORD *)v240 + 6) -= 2;
                  }
                }
LABEL_84:
                WebCore::VisiblePosition::next((unsigned __int8 *)&v283, 0, 0, (uint64_t)&v257);
                v69 = v257.var0.var0.var0;
                if (v257.var0.var0.var0)
                {
                  *((_DWORD *)v257.var0.var0.var0 + 6) += 2;
                  WebCore::enclosingListChild((unsigned int **)&v253, (WebCore::Node *)v69, v59);
                  v71 = v253;
                  v253 = 0;
                  if (*((_DWORD *)v69 + 6) == 2)
                  {
                    if ((*((_WORD *)v69 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v69, v70);
                  }
                  else
                  {
                    *((_DWORD *)v69 + 6) -= 2;
                  }
                }
                else
                {
                  WebCore::enclosingListChild((unsigned int **)&v253, 0, v59);
                  v71 = v253;
                  v253 = 0;
                }
                v72 = v257.var0.var0.var0;
                v257.var0.var0.var0 = 0;
                if (v72)
                {
                  if (*((_DWORD *)v72 + 6) == 2)
                  {
                    if ((*((_WORD *)v72 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v72, v70);
                  }
                  else
                  {
                    *((_DWORD *)v72 + 6) -= 2;
                  }
                }
                WebCore::previousVisuallyDistinctCandidate((WebCore::Node **)&v285, (uint64_t)&v253);
                if (WebCore::Position::atStartOfTree((WebCore::Position *)&v253))
                {
                  v74 = 0;
                }
                else
                {
                  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v253, (uint64_t)&v257);
                  v74 = v257.var0.var0.var0;
                }
                v97 = v253;
                v253 = 0;
                if (v97)
                {
                  if (*((_DWORD *)v97 + 6) == 2)
                  {
                    if ((*((_WORD *)v97 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v97, v73);
                  }
                  else
                  {
                    *((_DWORD *)v97 + 6) -= 2;
                  }
                }
                if (!v74)
                {
                  WebCore::enclosingListChild((unsigned int **)&v257, 0, v59);
                  v75 = (uint64_t)v257.var0.var0.var0;
                  goto LABEL_160;
                }
                *((_DWORD *)v74 + 6) += 2;
                WebCore::enclosingListChild((unsigned int **)&v257, (WebCore::Node *)v74, v59);
                v75 = (uint64_t)v257.var0.var0.var0;
                v257.var0.var0.var0 = 0;
                v98 = *((_DWORD *)v74 + 6) - 2;
                if (*((_DWORD *)v74 + 6) == 2)
                {
                  v241 = *((_WORD *)v74 + 15);
                  if ((v241 & 0x400) != 0)
                    goto LABEL_648;
                  WebCore::Node::removedLastRef((WebCore::Node *)v74, v11);
                  v98 = *((_DWORD *)v74 + 6);
                }
                else
                {
                  *((_DWORD *)v74 + 6) = v98;
                }
                v99 = v98 - 2;
                if (v99)
                {
                  *((_DWORD *)v74 + 6) = v99;
LABEL_160:
                  v100 = v283.var0.var0.var0;
                  goto LABEL_181;
                }
                v241 = *((_WORD *)v74 + 15);
LABEL_648:
                if ((v241 & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v74, v11);
                goto LABEL_160;
              }
            }
            else
            {
              *((_DWORD *)v68 + 6) -= 2;
            }
          }
          v283.var0.var1 = v257.var0.var1;
          *((_BYTE *)&v283.var0 + 12) = *((_BYTE *)&v257.var0 + 12);
          v283.var1 = v257.var1;
          goto LABEL_84;
        }
      }
      else
      {
        *((_DWORD *)v65 + 6) -= 2;
      }
    }
    v285.var0.var1 = v257.var0.var1;
    *((_BYTE *)&v285.var0 + 12) = *((_BYTE *)&v257.var0 + 12);
    v285.var1 = v257.var1;
    goto LABEL_80;
  }
  *((_DWORD *)v60 + 6) += 2;
  v253 = v60;
  v254 = 0;
  if ((v62 & 1) != 0)
    v101 = 0;
  else
    v101 = 3;
  v255 = v101;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v253, (uint64_t)&v257);
  v103 = v285.var0.var0.var0;
  v285.var0.var0.var0 = v257.var0.var0.var0;
  if (v103)
  {
    if (*((_DWORD *)v103 + 6) == 2)
    {
      if ((*((_WORD *)v103 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v103, v102);
    }
    else
    {
      *((_DWORD *)v103 + 6) -= 2;
    }
  }
  v285.var0.var1 = v257.var0.var1;
  *((_BYTE *)&v285.var0 + 12) = *((_BYTE *)&v257.var0 + 12);
  v285.var1 = 1;
  v104 = *((_DWORD *)v60 + 6) - 2;
  if (*((_DWORD *)v60 + 6) == 2)
  {
    if ((*((_WORD *)v60 + 15) & 0x400) != 0)
    {
      v104 = 2;
    }
    else
    {
      WebCore::Node::removedLastRef(v60, v102);
      v104 = *((_DWORD *)v60 + 6);
    }
  }
  v105 = *((_WORD *)v60 + 14);
  *((_DWORD *)v60 + 6) = v104 + 2;
  if ((v105 & 1) != 0)
  {
    v106 = *((_QWORD *)v60 + 10);
    v107 = 0;
    if (v106)
      LODWORD(v106) = *(_DWORD *)(v106 + 4);
  }
  else
  {
    LODWORD(v106) = 0;
    v107 = 4;
  }
  v253 = v60;
  v254 = v106;
  v255 = v107;
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v253, (uint64_t)&v257);
  v257.var1 = 1;
  v100 = v257.var0.var0.var0;
  v108 = v283.var0.var0.var0;
  v283.var0.var0.var0 = v257.var0.var0.var0;
  if (v108)
  {
    if (*((_DWORD *)v108 + 6) == 2)
    {
      if ((*((_WORD *)v108 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v108, v11);
    }
    else
    {
      *((_DWORD *)v108 + 6) -= 2;
    }
  }
  v283.var0.var1 = v257.var0.var1;
  *((_BYTE *)&v283.var0 + 12) = *((_BYTE *)&v257.var0 + 12);
  v283.var1 = 1;
  if (*((_DWORD *)v60 + 6) == 2)
  {
    if ((*((_WORD *)v60 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v60, v11);
  }
  else
  {
    *((_DWORD *)v60 + 6) -= 2;
  }
  v71 = (WebCore::Node *)*((_QWORD *)v60 + 7);
  if (v71)
    *((_DWORD *)v71 + 6) += 2;
  v109 = *((_QWORD *)v60 + 6);
  v75 = v109 & 0xFFFFFFFFFFFFLL;
  if ((v109 & 0xFFFFFFFFFFFFLL) != 0)
    *(_DWORD *)((v109 & 0xFFFFFFFFFFFFLL) + 0x18) += 2;
LABEL_181:
  v110 = v285.var0.var0.var0;
  if (v285.var0.var0.var0)
  {
    if (!v100)
    {
      v285.var0.var0.var0 = 0;
      LOBYTE(v6) = v252;
      goto LABEL_240;
    }
    v111 = *(_QWORD *)(a1 + 16);
    v112 = bmalloc::api::isoAllocate();
    v114 = v112;
    *(_OWORD *)(v112 + 8) = xmmword_1968BC9D0;
    *(_DWORD *)(v112 + 28) = 4124;
    *(_QWORD *)(v112 + 32) = 0;
    *(_QWORD *)(v112 + 40) = v111 + 96;
    *(_OWORD *)(v112 + 48) = 0u;
    *(_OWORD *)(v112 + 64) = 0u;
    ++*(_DWORD *)(v111 + 3324);
    *(_QWORD *)(v112 + 80) = 0;
    *(_QWORD *)(v112 + 88) = 0;
    v115 = WebCore::HTMLNames::brTag;
    if (WebCore::HTMLNames::brTag)
      ++*(_DWORD *)WebCore::HTMLNames::brTag;
    *(_QWORD *)(v112 + 96) = v115;
    *(_QWORD *)(v112 + 104) = 0;
    *(_QWORD *)v112 = off_1E33B4C28;
    *(_DWORD *)(v112 + 24) = 4;
    WebCore::enclosingList(v251, v113, &v257);
    v117 = v257.var0.var0.var0;
    v257.var0.var0.var0 = 0;
    v249 = a3;
    if (v117)
    {
      if (*((_DWORD *)v117 + 6) == 2)
      {
        if ((*((_WORD *)v117 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v117, v116);
      }
      else
      {
        *((_DWORD *)v117 + 6) -= 2;
      }
      v118 = *(_QWORD *)(a1 + 16);
      v119 = bmalloc::api::isoAllocate();
      v121 = (WebCore::Node *)v119;
      *(_OWORD *)(v119 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v119 + 24) = 0x141C00000002;
      *(_QWORD *)(v119 + 32) = 0;
      *(_QWORD *)(v119 + 40) = v118 + 96;
      *(_OWORD *)(v119 + 48) = 0u;
      *(_OWORD *)(v119 + 64) = 0u;
      ++*(_DWORD *)(v118 + 3324);
      *(_QWORD *)(v119 + 80) = 0;
      *(_QWORD *)(v119 + 88) = 0;
      v122 = WebCore::HTMLNames::liTag;
      if (WebCore::HTMLNames::liTag)
        ++*(_DWORD *)WebCore::HTMLNames::liTag;
      *(_QWORD *)(v119 + 96) = v122;
      *(_QWORD *)(v119 + 104) = 0;
      *(_QWORD *)v119 = off_1E33C04C8;
      v123 = *(_DWORD *)(v114 + 24) - 2;
      if (*(_DWORD *)(v114 + 24) == 2)
      {
        if ((*(_WORD *)(v114 + 30) & 0x400) != 0)
        {
          v123 = 2;
        }
        else
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v114, v120);
          v123 = *(_DWORD *)(v114 + 24);
        }
      }
      *(_DWORD *)(v114 + 24) = v123 + 2;
      v257.var0.var0.var0 = (Node *)v114;
      *((_DWORD *)v121 + 6) += 2;
      v253 = v121;
      WebCore::CompositeEditCommand::appendNode((WebCore::CompositeEditCommand *)a1, (uint64_t *)&v257, (uint64_t *)&v253);
      if (v253)
      {
        if (*((_DWORD *)v253 + 6) == 2)
        {
          if ((*((_WORD *)v253 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v253, v124);
        }
        else
        {
          *((_DWORD *)v253 + 6) -= 2;
        }
      }
      if (v257.var0.var0.var0)
      {
        if (*((_DWORD *)v257.var0.var0.var0 + 6) == 2)
        {
          if ((*((_WORD *)v257.var0.var0.var0 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v257.var0.var0.var0, v124);
        }
        else
        {
          *((_DWORD *)v257.var0.var0.var0 + 6) -= 2;
        }
      }
    }
    else
    {
      v121 = (WebCore::Node *)v114;
    }
    if (v71)
    {
      if (v75)
      {
        WebCore::CompositeEditCommand::splitTreeToNode((unsigned int *)a1, v71, (WebCore::Node *)v251, 0, (WebCore::Node **)&v257);
        WebCore::CompositeEditCommand::splitElement((WebCore::CompositeEditCommand *)a1, (WebCore::Element *)v251, (WebCore::Node *)v257.var0.var0.var0);
        v126 = v257.var0.var0.var0;
        v257.var0.var0.var0 = 0;
        LOBYTE(v6) = v252;
        if (v126)
        {
          if (*((_DWORD *)v126 + 6) == 2)
          {
            if ((*((_WORD *)v126 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v126, v125);
          }
          else
          {
            *((_DWORD *)v126 + 6) -= 2;
          }
        }
        v257.var0.var0.var0 = (Node *)v121;
        WebCore::CompositeEditCommand::insertNodeBefore((WebCore::CompositeEditCommand *)a1, (uint64_t *)&v257, (uint64_t)v251, 1);
        v128 = v257.var0.var0.var0;
        v257.var0.var0.var0 = 0;
        a3 = v249;
        if (v128)
        {
          if (*((_DWORD *)v128 + 6) == 2)
          {
            if ((*((_WORD *)v128 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v128, v127);
          }
          else
          {
            *((_DWORD *)v128 + 6) -= 2;
          }
        }
        LOBYTE(v129) = v255;
LABEL_228:
        *(_DWORD *)(v114 + 24) += 2;
        v253 = (WebCore::Node *)v114;
        v254 = 0;
        v255 = v129 & 0xF0 | 1;
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v253, (uint64_t)&v257);
        v257.var1 = 1;
        if (*(_DWORD *)(v114 + 24) == 2)
        {
          if ((*(_WORD *)(v114 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v114, v137);
        }
        else
        {
          *(_DWORD *)(v114 + 24) -= 2;
        }
        WebCore::CompositeEditCommand::moveParagraphs((unsigned int *)a1, &v285, &v283, &v257, 1, 1);
        v138 = v257.var0.var0.var0;
        v257.var0.var0.var0 = 0;
        if (v138)
        {
          if (*((_DWORD *)v138 + 6) == 2)
          {
            if ((*((_WORD *)v138 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v138, v11);
          }
          else
          {
            *((_DWORD *)v138 + 6) -= 2;
          }
        }
        if (*(_DWORD *)(v114 + 24) == 2)
        {
          if ((*(_WORD *)(v114 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v114, v11);
        }
        else
        {
          *(_DWORD *)(v114 + 24) -= 2;
        }
        v100 = v283.var0.var0.var0;
        goto LABEL_236;
      }
      v130 = *((_QWORD *)v60 + 4);
    }
    else
    {
      v130 = *((_QWORD *)v60 + 4);
      if ((unsigned int *)v130 == v251)
      {
        v257.var0.var0.var0 = (Node *)v121;
        WebCore::CompositeEditCommand::insertNodeAfter((unsigned int *)a1, (uint64_t *)&v257, (uint64_t)v251);
LABEL_225:
        v136 = v257.var0.var0.var0;
        v257.var0.var0.var0 = 0;
        a3 = v249;
        LOBYTE(v6) = v252;
        if (v136)
        {
          v129 = *((_DWORD *)v136 + 6) - 2;
          if (*((_DWORD *)v136 + 6) == 2)
          {
            LOWORD(v129) = *((_WORD *)v136 + 15);
            if ((v129 & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v136, v131);
          }
          else
          {
            *((_DWORD *)v136 + 6) = v129;
          }
        }
        goto LABEL_228;
      }
    }
    if (v130)
    {
      v132 = v60;
      v133 = *(_DWORD *)(v130 + 24) + 2;
      *(_DWORD *)(v130 + 24) = v133;
      if ((unsigned int *)v130 != v251)
      {
        WebCore::CompositeEditCommand::splitTreeToNode((unsigned int *)a1, v60, (WebCore::Node *)v251, 0, (WebCore::Node **)&v257);
        WebCore::CompositeEditCommand::splitElement((WebCore::CompositeEditCommand *)a1, (WebCore::Element *)v251, (WebCore::Node *)v257.var0.var0.var0);
        v134 = v257.var0.var0.var0;
        v257.var0.var0.var0 = 0;
        if (v134)
        {
          if (*((_DWORD *)v134 + 6) == 2)
          {
            if ((*((_WORD *)v134 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v134, v132);
          }
          else
          {
            *((_DWORD *)v134 + 6) -= 2;
          }
        }
        v133 = *(_DWORD *)(v130 + 24);
      }
      v135 = v133 - 2;
      if (v135)
      {
        *(_DWORD *)(v130 + 24) = v135;
      }
      else if ((*(_WORD *)(v130 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v130, v132);
      }
    }
    v257.var0.var0.var0 = (Node *)v121;
    WebCore::CompositeEditCommand::insertNodeBefore((WebCore::CompositeEditCommand *)a1, (uint64_t *)&v257, (uint64_t)v251, 1);
    goto LABEL_225;
  }
  LOBYTE(v6) = v252;
LABEL_236:
  v283.var0.var0.var0 = 0;
  if (v100)
  {
    if (*((_DWORD *)v100 + 6) == 2)
    {
      if ((*((_WORD *)v100 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v100, v11);
    }
    else
    {
      *((_DWORD *)v100 + 6) -= 2;
    }
  }
LABEL_239:
  v110 = v285.var0.var0.var0;
  v285.var0.var0.var0 = 0;
  if (v110)
  {
LABEL_240:
    if (*((_DWORD *)v110 + 6) == 2)
    {
      if ((*((_WORD *)v110 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v110, v11);
    }
    else
    {
      *((_DWORD *)v110 + 6) -= 2;
    }
  }
  if (v75)
  {
    if (*(_DWORD *)(v75 + 24) == 2)
    {
      if ((*(_WORD *)(v75 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v75, v11);
    }
    else
    {
      *(_DWORD *)(v75 + 24) -= 2;
    }
  }
  if (v71)
  {
    if (*((_DWORD *)v71 + 6) == 2)
    {
      if ((*((_WORD *)v71 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v71, v11);
    }
    else
    {
      *((_DWORD *)v71 + 6) -= 2;
    }
  }
  v139 = v276;
  v276 = 0;
  if (v139)
  {
    if (*((_DWORD *)v139 + 6) == 2)
    {
      if ((*((_WORD *)v139 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v139, v11);
    }
    else
    {
      *((_DWORD *)v139 + 6) -= 2;
    }
  }
  v80 = 1;
LABEL_286:
  v147 = v280;
  v280 = 0;
  if (v147)
  {
    if (*((_DWORD *)v147 + 6) == 2)
    {
      if ((*((_WORD *)v147 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v147, v11);
    }
    else
    {
      *((_DWORD *)v147 + 6) -= 2;
    }
  }
  result = (unsigned int *)v274;
  if (!v80)
  {
LABEL_409:
    v274 = 0;
    if (!result)
      goto LABEL_412;
    goto LABEL_410;
  }
  if (v274)
    v149 = v16;
  else
    v149 = 1;
  if ((v149 & 1) != 0 || (v6 & 1) != 0)
  {
LABEL_296:
    if (*(_BYTE *)(a1 + 225) == 2)
    {
      WebCore::VisiblePosition::canonicalPosition(v9, (uint64_t)&v253);
      v256 = 1;
    }
    else
    {
      v150 = *(unsigned __int8 *)(a1 + 224);
      WebCore::VisiblePosition::canonicalPosition(v9, (uint64_t)&v253);
      v256 = 1;
      if (!v150)
      {
        v242 = (Node *)v253;
        if (v253)
        {
          *((_DWORD *)v253 + 6) += 2;
          v257.var0.var0.var0 = v242;
          v257.var0.var1 = v254;
          *((_BYTE *)&v257.var0 + 12) = v255;
          v257.var1 = 0;
          if (!WebCore::inSameLine((WebCore *)&v253, (const WebCore::VisiblePosition *)&v257, v151))
            v256 = 0;
          v244 = v257.var0.var0.var0;
          v257.var0.var0.var0 = 0;
          if (v244)
          {
            if (*((_DWORD *)v244 + 6) == 2)
            {
              if ((*((_WORD *)v244 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v244, v243);
            }
            else
            {
              *((_DWORD *)v244 + 6) -= 2;
            }
          }
        }
      }
    }
    WebCore::startOfParagraph((uint64_t)&v253, 2, &v257);
    WebCore::endOfParagraph((WebCore::Node *)&v257, 2, &v285);
    v152 = 0;
    v153 = v257.var0.var0.var0;
    v154 = v285.var0.var0.var0;
    if (!v257.var0.var0.var0 || !v285.var0.var0.var0)
      goto LABEL_396;
    *((_DWORD *)v257.var0.var0.var0 + 6) += 2;
    v155 = *((_BYTE *)&v257.var0 + 12) & 7;
    if (v155 > 4)
    {
      v156 = 0;
    }
    else
    {
      v156 = (uint64_t)v153;
      if (((1 << v155) & 0x19) == 0)
        v156 = *((_QWORD *)v153 + 4);
    }
    v157 = 1;
    if (WebCore::Node::computeEditability(v156, 0, 1))
    {
      v158 = v285.var0.var0.var0;
      if (v285.var0.var0.var0)
      {
        *((_DWORD *)v285.var0.var0.var0 + 6) += 2;
        v159 = *((_BYTE *)&v285.var0 + 12) & 7;
        if (v159 > 4)
        {
          v160 = 0;
        }
        else
        {
          v160 = (uint64_t)v158;
          if (((1 << v159) & 0x19) == 0)
            v160 = *((_QWORD *)v158 + 4);
        }
        v157 = WebCore::Node::computeEditability(v160, 0, 1) == 0;
        if (*((_DWORD *)v158 + 6) == 2)
        {
          if ((*((_WORD *)v158 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v158, v11);
        }
        else
        {
          *((_DWORD *)v158 + 6) -= 2;
        }
      }
      else
      {
        v157 = WebCore::Node::computeEditability(0, 0, 1) == 0;
      }
    }
    if (*((_DWORD *)v153 + 6) == 2)
    {
      if ((*((_WORD *)v153 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v153, v11);
    }
    else
    {
      *((_DWORD *)v153 + 6) -= 2;
    }
    if (v157)
    {
      v152 = 0;
LABEL_395:
      v154 = v285.var0.var0.var0;
LABEL_396:
      v285.var0.var0.var0 = 0;
      if (v154)
      {
        if (*((_DWORD *)v154 + 6) == 2)
        {
          if ((*((_WORD *)v154 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v154, v11);
        }
        else
        {
          *((_DWORD *)v154 + 6) -= 2;
        }
      }
      v194 = v257.var0.var0.var0;
      v257.var0.var0.var0 = 0;
      if (v194)
      {
        if (*((_DWORD *)v194 + 6) == 2)
        {
          if ((*((_WORD *)v194 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v194, v11);
        }
        else
        {
          *((_DWORD *)v194 + 6) -= 2;
        }
      }
      v195 = *(_QWORD *)(a1 + 280);
      *(_QWORD *)(a1 + 280) = v152;
      if (v195)
      {
        if (*(_DWORD *)(v195 + 24) == 2)
        {
          if ((*(_WORD *)(v195 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v195, v11);
        }
        else
        {
          *(_DWORD *)(v195 + 24) -= 2;
        }
      }
      v196 = v253;
      v253 = 0;
      if (v196)
      {
        if (*((_DWORD *)v196 + 6) == 2)
        {
          if ((*((_WORD *)v196 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v196, v11);
        }
        else
        {
          *((_DWORD *)v196 + 6) -= 2;
        }
      }
      result = (unsigned int *)v274;
      goto LABEL_409;
    }
    v161 = *(_QWORD *)(a1 + 16);
    v162 = bmalloc::api::isoAllocate();
    v163 = (WebCore::Node *)v162;
    *(_OWORD *)(v162 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v162 + 24) = 0x141C00000002;
    *(_QWORD *)(v162 + 32) = 0;
    *(_QWORD *)(v162 + 40) = v161 + 96;
    *(_OWORD *)(v162 + 48) = 0u;
    *(_OWORD *)(v162 + 64) = 0u;
    ++*(_DWORD *)(v161 + 3324);
    *(_QWORD *)(v162 + 80) = 0;
    *(_QWORD *)(v162 + 88) = 0;
    v164 = WebCore::HTMLNames::liTag;
    if (WebCore::HTMLNames::liTag)
      ++*(_DWORD *)WebCore::HTMLNames::liTag;
    *(_QWORD *)(v162 + 96) = v164;
    *(_QWORD *)(v162 + 104) = 0;
    *(_QWORD *)v162 = off_1E33C04C8;
    v165 = *(_QWORD *)(a1 + 16);
    v166 = bmalloc::api::isoAllocate();
    v167 = v166;
    *(_OWORD *)(v166 + 8) = xmmword_1968BC9D0;
    *(_DWORD *)(v166 + 28) = 4124;
    *(_QWORD *)(v166 + 32) = 0;
    *(_QWORD *)(v166 + 40) = v165 + 96;
    *(_OWORD *)(v166 + 48) = 0u;
    *(_OWORD *)(v166 + 64) = 0u;
    ++*(_DWORD *)(v165 + 3324);
    *(_QWORD *)(v166 + 80) = 0;
    *(_QWORD *)(v166 + 88) = 0;
    v168 = WebCore::HTMLNames::brTag;
    if (WebCore::HTMLNames::brTag)
      ++*(_DWORD *)WebCore::HTMLNames::brTag;
    *(_QWORD *)(v166 + 96) = v168;
    *(_QWORD *)(v166 + 104) = 0;
    *(_QWORD *)v166 = off_1E33B4C28;
    *(_DWORD *)(v166 + 24) = 4;
    v283.var0.var0.var0 = (Node *)v166;
    *((_DWORD *)v163 + 6) += 2;
    v276 = v163;
    WebCore::CompositeEditCommand::appendNode((WebCore::CompositeEditCommand *)a1, (uint64_t *)&v283, (uint64_t *)&v276);
    if (v276)
    {
      if (*((_DWORD *)v276 + 6) == 2)
      {
        if ((*((_WORD *)v276 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v276, v169);
      }
      else
      {
        *((_DWORD *)v276 + 6) -= 2;
      }
    }
    if (v283.var0.var0.var0)
    {
      if (*((_DWORD *)v283.var0.var0.var0 + 6) == 2)
      {
        if ((*((_WORD *)v283.var0.var0.var0 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v283.var0.var0.var0, v169);
      }
      else
      {
        *((_DWORD *)v283.var0.var0.var0 + 6) -= 2;
      }
    }
    v170 = v257.var0.var0.var0;
    if (v257.var0.var0.var0)
      *((_DWORD *)v257.var0.var0.var0 + 6) += 2;
    v280 = v170;
    var1 = v257.var0.var1;
    v282 = *((_BYTE *)&v257.var0 + 12);
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v280, (uint64_t)&v283);
    v283.var1 = 1;
    WebCore::VisiblePosition::previous((WebCore::Node **)&v257, 1, 0, (uint64_t)&v276);
    WebCore::adjacentEnclosingList((unsigned int **)&v284, (uint64_t)&v283, (uint64_t)&v276, (uint64_t)a3);
    if (v276)
    {
      if (*((_DWORD *)v276 + 6) == 2)
      {
        if ((*((_WORD *)v276 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v276, v171);
      }
      else
      {
        *((_DWORD *)v276 + 6) -= 2;
      }
    }
    if (v283.var0.var0.var0)
    {
      if (*((_DWORD *)v283.var0.var0.var0 + 6) == 2)
      {
        if ((*((_WORD *)v283.var0.var0.var0 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v283.var0.var0.var0, v171);
      }
      else
      {
        *((_DWORD *)v283.var0.var0.var0 + 6) -= 2;
      }
    }
    if (v170)
    {
      if (*((_DWORD *)v170 + 6) == 2)
      {
        if ((*((_WORD *)v170 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v170, v171);
      }
      else
      {
        *((_DWORD *)v170 + 6) -= 2;
      }
    }
    v172 = v257.var0.var0.var0;
    if (v257.var0.var0.var0)
      *((_DWORD *)v257.var0.var0.var0 + 6) += 2;
    v280 = v172;
    var1 = v257.var0.var1;
    v282 = *((_BYTE *)&v257.var0 + 12);
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v280, (uint64_t)&v283);
    v283.var1 = 1;
    WebCore::VisiblePosition::next((unsigned __int8 *)&v285, 1, 0, (uint64_t)&v276);
    WebCore::adjacentEnclosingList((unsigned int **)&v275, (uint64_t)&v283, (uint64_t)&v276, (uint64_t)a3);
    v174 = v276;
    v276 = 0;
    if (v174)
    {
      if (*((_DWORD *)v174 + 6) == 2)
      {
        if ((*((_WORD *)v174 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v174, v173);
      }
      else
      {
        *((_DWORD *)v174 + 6) -= 2;
      }
    }
    if (v283.var0.var0.var0)
    {
      if (*((_DWORD *)v283.var0.var0.var0 + 6) == 2)
      {
        if ((*((_WORD *)v283.var0.var0.var0 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v283.var0.var0.var0, v173);
      }
      else
      {
        *((_DWORD *)v283.var0.var0.var0 + 6) -= 2;
      }
    }
    if (v172)
    {
      if (*((_DWORD *)v172 + 6) == 2)
      {
        if ((*((_WORD *)v172 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v172, v173);
      }
      else
      {
        *((_DWORD *)v172 + 6) -= 2;
      }
    }
    v175 = v284;
    if (v284)
    {
      v283.var0.var0.var0 = (Node *)v163;
      *((_DWORD *)v284 + 6) += 2;
      v276 = v175;
      WebCore::CompositeEditCommand::appendNode((WebCore::CompositeEditCommand *)a1, (uint64_t *)&v283, (uint64_t *)&v276);
      if (v276)
      {
        if (*((_DWORD *)v276 + 6) == 2)
        {
          if ((*((_WORD *)v276 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v276, v176);
        }
        else
        {
          *((_DWORD *)v276 + 6) -= 2;
        }
      }
      v177 = v283.var0.var0.var0;
      if (!v283.var0.var0.var0)
        goto LABEL_359;
      goto LABEL_357;
    }
    v178 = (Node *)v275;
    if (v275)
    {
      v276 = v163;
      *((_DWORD *)v275 + 6) += 2;
      v283.var0.var0.var0 = v178;
      v283.var0.var1 = 0;
      *((_BYTE *)&v283.var0 + 12) = *((_BYTE *)&v283.var0 + 12) & 0xF0 | 1;
      WebCore::CompositeEditCommand::insertNodeAt((unsigned int *)a1, (uint64_t *)&v276, (WebCore::Position *)&v283);
      v179 = v283.var0.var0.var0;
      v283.var0.var0.var0 = 0;
      if (v179)
      {
        if (*((_DWORD *)v179 + 6) == 2)
        {
          if ((*((_WORD *)v179 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v179, v176);
        }
        else
        {
          *((_DWORD *)v179 + 6) -= 2;
        }
      }
      v177 = (Node *)v276;
      v276 = 0;
      if (!v177)
        goto LABEL_359;
LABEL_357:
      if (*((_DWORD *)v177 + 6) == 2)
      {
        if ((*((_WORD *)v177 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v177, v176);
      }
      else
      {
        *((_DWORD *)v177 + 6) -= 2;
      }
LABEL_359:
      v180 = 0;
      goto LABEL_360;
    }
    WebCore::HTMLElementFactory::createElement(a3, *(const WebCore::QualifiedName **)(a1 + 16), 0, 0, (uint64_t *)&v283);
    v180 = v283.var0.var0.var0;
    v283.var0.var0.var0 = (Node *)v163;
    *((_DWORD *)v180 + 6) += 2;
    v276 = (WebCore::Node *)v180;
    WebCore::CompositeEditCommand::appendNode((WebCore::CompositeEditCommand *)a1, (uint64_t *)&v283, (uint64_t *)&v276);
    if (v276)
    {
      if (*((_DWORD *)v276 + 6) == 2)
      {
        if ((*((_WORD *)v276 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v276, v197);
      }
      else
      {
        *((_DWORD *)v276 + 6) -= 2;
      }
    }
    if (v283.var0.var0.var0)
    {
      if (*((_DWORD *)v283.var0.var0.var0 + 6) == 2)
      {
        if ((*((_WORD *)v283.var0.var0.var0 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v283.var0.var0.var0, v197);
      }
      else
      {
        *((_DWORD *)v283.var0.var0.var0 + 6) -= 2;
      }
    }
    if (WebCore::operator==((uint64_t *)&v257, (uint64_t *)&v285))
    {
      v199 = v257.var0.var0.var0;
      if (!v257.var0.var0.var0)
      {
        v209 = 0;
        goto LABEL_467;
      }
      v200 = *((_DWORD *)v257.var0.var0.var0 + 6);
      *((_DWORD *)v257.var0.var0.var0 + 6) = v200 + 4;
      v201 = v200 + 2;
      if (v201)
      {
        *((_DWORD *)v199 + 6) = v201;
      }
      else if ((*((_WORD *)v199 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v199, v198);
      }
      if ((*((_QWORD *)v199 + 8) & 0xFFFFFFFFFFFFLL) != 0
        && (*(_BYTE *)((*((_QWORD *)v199 + 8) & 0xFFFFFFFFFFFFLL) + 0x14) & 1) != 0)
      {
        v202 = v257.var0.var0.var0;
        if (v257.var0.var0.var0)
          *((_DWORD *)v257.var0.var0.var0 + 6) += 2;
        v283.var0.var0.var0 = v202;
        v283.var0.var1 = v257.var0.var1;
        *((_BYTE *)&v283.var0 + 12) = *((_BYTE *)&v257.var0 + 12);
        WebCore::CompositeEditCommand::insertBlockPlaceholder((unsigned int *)a1, (const WebCore::Position *)&v283, (WebCore::Node **)&v280);
        v204 = v283.var0.var0.var0;
        v283.var0.var0.var0 = 0;
        if (v204)
        {
          if (*((_DWORD *)v204 + 6) == 2)
          {
            if ((*((_WORD *)v204 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v204, v203);
          }
          else
          {
            *((_DWORD *)v204 + 6) -= 2;
          }
        }
        v205 = v280;
        if (v280)
          *((_DWORD *)v280 + 6) += 2;
        v276 = (WebCore::Node *)v205;
        v277 = 0;
        v278 = 1;
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v276, (uint64_t)&v283);
        v206 = v257.var0.var0.var0;
        v257.var0.var0.var0 = v283.var0.var0.var0;
        if (v206)
        {
          if (*((_DWORD *)v206 + 6) == 2)
          {
            if ((*((_WORD *)v206 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v206, v198);
          }
          else
          {
            *((_DWORD *)v206 + 6) -= 2;
          }
        }
        v257.var0.var1 = v283.var0.var1;
        *((_BYTE *)&v257.var0 + 12) = *((_BYTE *)&v283.var0 + 12);
        v257.var1 = 1;
        if (v205)
        {
          if (*((_DWORD *)v205 + 6) == 2)
          {
            if ((*((_WORD *)v205 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v205, v198);
          }
          else
          {
            *((_DWORD *)v205 + 6) -= 2;
          }
        }
        v207 = v257.var0.var0.var0;
        if (v257.var0.var0.var0)
          *((_DWORD *)v257.var0.var0.var0 + 6) += 2;
        v208 = v285.var0.var0.var0;
        v285.var0.var0.var0 = v207;
        if (v208)
        {
          if (*((_DWORD *)v208 + 6) == 2)
          {
            if ((*((_WORD *)v208 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v208, v198);
          }
          else
          {
            *((_DWORD *)v208 + 6) -= 2;
          }
        }
        v285.var0.var1 = v257.var0.var1;
        *((_BYTE *)&v285.var0 + 12) = *((_BYTE *)&v257.var0 + 12);
        v285.var1 = v257.var1;
        if (v205)
        {
          if (*((_DWORD *)v205 + 6) == 2)
          {
            if ((*((_WORD *)v205 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v205, v198);
          }
          else
          {
            *((_DWORD *)v205 + 6) -= 2;
          }
        }
      }
      if (*((_DWORD *)v199 + 6) == 2)
      {
        if ((*((_WORD *)v199 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v199, v198);
      }
      else
      {
        *((_DWORD *)v199 + 6) -= 2;
      }
    }
    v209 = v257.var0.var0.var0;
    if (v257.var0.var0.var0)
      *((_DWORD *)v257.var0.var0.var0 + 6) += 2;
LABEL_467:
    v276 = (WebCore::Node *)v209;
    v277 = v257.var0.var1;
    v278 = *((_BYTE *)&v257.var0 + 12);
    WebCore::Position::upstream((uint64_t)&v276, (WebCore::Node *)1, (uint64_t)&v283);
    v211 = v276;
    v276 = 0;
    if (v211)
    {
      if (*((_DWORD *)v211 + 6) == 2)
      {
        if ((*((_WORD *)v211 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v211, v210);
      }
      else
      {
        *((_DWORD *)v211 + 6) -= 2;
      }
    }
    WebCore::enclosingListChild((unsigned int *)v283.var0.var0.var0, (WebCore::Node *)v210, (unsigned int **)&v280);
    if (v280
      && (*((_WORD *)v280 + 14) & 0x10) != 0
      && *(_QWORD *)(*((_QWORD *)v280 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::liTag + 24))
    {
      WebCore::positionInParentBeforeNode((WebCore *)v280, (WebCore::Node *)v11, (uint64_t)&v276);
      v212 = v283.var0.var0.var0;
      v283.var0.var0.var0 = (Node *)v276;
      if (v212)
      {
        if (*((_DWORD *)v212 + 6) == 2)
        {
          if ((*((_WORD *)v212 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v212, v11);
        }
        else
        {
          *((_DWORD *)v212 + 6) -= 2;
        }
      }
      v283.var0.var1 = v277;
      *((_BYTE *)&v283.var0 + 12) = v278;
    }
    v213 = v283.var0.var0.var0;
    if (v283.var0.var0.var0)
    {
      v214 = *((_BYTE *)&v283.var0 + 12) & 7;
      if (v214 <= 4 && (((1 << v214) & 0x19) != 0 || (v213 = (Node *)*((_QWORD *)v283.var0.var0.var0 + 4)) != 0))
      {
        *((_DWORD *)v213 + 6) += 2;
        v215 = WebCore::Node::computeEditability((uint64_t)v213, 0, 0);
        v216 = *((_DWORD *)v213 + 6) - 2;
        if (v215)
        {
          if (*((_DWORD *)v213 + 6) == 2)
          {
            if ((*((_WORD *)v213 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v213, v11);
          }
          else
          {
            *((_DWORD *)v213 + 6) = v216;
          }
          *((_DWORD *)v180 + 6) += 2;
          v276 = (WebCore::Node *)v180;
          WebCore::CompositeEditCommand::insertNodeAt((unsigned int *)a1, (uint64_t *)&v276, (WebCore::Position *)&v283);
          v217 = v276;
          v276 = 0;
          if (v217)
          {
            if (*((_DWORD *)v217 + 6) == 2)
            {
              if ((*((_WORD *)v217 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v217, v11);
            }
            else
            {
              *((_DWORD *)v217 + 6) -= 2;
            }
          }
          v218 = v257.var0.var0.var0;
          if (v257.var0.var0.var0)
            *((_DWORD *)v257.var0.var0.var0 + 6) += 2;
          if (v283.var0.var0.var0 != v218)
            goto LABEL_554;
          v219 = v257.var0.var1;
          v220 = *((unsigned __int8 *)&v257.var0 + 12);
          if ((*((_BYTE *)&v283.var0 + 12) & 8) == 0
            && ((v221 = *((_BYTE *)&v283.var0 + 12) & 7, v221 == 4) || v221 == 2))
          {
            if (v218)
            {
              v222 = *((_DWORD *)v218 + 6);
              *((_DWORD *)v218 + 6) = v222 + 2;
              v223 = *((_WORD *)v218 + 14);
              if ((v223 & 1) != 0)
              {
                v247 = *((_QWORD *)v218 + 10);
                v225 = v247 ? *(_DWORD *)(v247 + 4) : 0;
              }
              else if ((v223 & 4) != 0 && (v224 = *((_QWORD *)v218 + 10)) != 0)
              {
                v225 = 0;
                do
                {
                  ++v225;
                  v224 = *(_QWORD *)(v224 + 56);
                }
                while (v224);
              }
              else
              {
                v225 = (*(uint64_t (**)(Node *))(*(_QWORD *)v218 + 208))(v218) ^ 1;
                v222 = *((_DWORD *)v218 + 6) - 2;
              }
              if (v222)
              {
                *((_DWORD *)v218 + 6) = v222;
              }
              else if ((*((_WORD *)v218 + 15) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v218, v11);
              }
            }
            else
            {
              v225 = 0;
            }
          }
          else
          {
            v225 = v283.var0.var1;
          }
          if ((v220 & 8) == 0 && ((v220 & 7) == 4 || (v220 & 7) == 2))
          {
            if (v218)
            {
              v226 = *((_DWORD *)v218 + 6);
              *((_DWORD *)v218 + 6) = v226 + 2;
              v227 = *((_WORD *)v218 + 14);
              if ((v227 & 1) != 0)
              {
                v248 = *((_QWORD *)v218 + 10);
                if (v248)
                  v219 = *(_DWORD *)(v248 + 4);
                else
                  v219 = 0;
              }
              else if ((v227 & 4) != 0 && (v228 = *((_QWORD *)v218 + 10)) != 0)
              {
                v219 = 0;
                do
                {
                  ++v219;
                  v228 = *(_QWORD *)(v228 + 56);
                }
                while (v228);
              }
              else
              {
                v219 = (*(uint64_t (**)(Node *))(*(_QWORD *)v218 + 208))(v218) ^ 1;
                v226 = *((_DWORD *)v218 + 6) - 2;
              }
              if (v226)
              {
                *((_DWORD *)v218 + 6) = v226;
              }
              else if ((*((_WORD *)v218 + 15) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v218, v11);
              }
            }
            else
            {
              v219 = 0;
            }
          }
          if (v225 == v219)
            v229 = ((*((unsigned __int8 *)&v283.var0 + 12) ^ v220) & 7) == 0;
          else
LABEL_554:
            v229 = 0;
          if (v218)
          {
            if (*((_DWORD *)v218 + 6) == 2)
            {
              if ((*((_WORD *)v218 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v218, v11);
            }
            else
            {
              *((_DWORD *)v218 + 6) -= 2;
            }
          }
          if (v229)
          {
            v232 = (Node *)v253;
            if (v253)
              *((_DWORD *)v253 + 6) += 2;
            v233 = v257.var0.var0.var0;
            v257.var0.var0.var0 = v232;
            if (v233)
            {
              if (*((_DWORD *)v233 + 6) == 2)
              {
                if ((*((_WORD *)v233 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v233, v11);
              }
              else
              {
                *((_DWORD *)v233 + 6) -= 2;
              }
            }
            v257.var0.var1 = v254;
            *((_BYTE *)&v257.var0 + 12) = v255;
            v257.var1 = v256;
          }
          v234 = 1;
LABEL_566:
          v235 = v280;
          v280 = 0;
          if (v235)
          {
            if (*((_DWORD *)v235 + 6) == 2)
            {
              if ((*((_WORD *)v235 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v235, v11);
            }
            else
            {
              *((_DWORD *)v235 + 6) -= 2;
            }
          }
          v236 = v283.var0.var0.var0;
          v283.var0.var0.var0 = 0;
          if (v236)
          {
            if (*((_DWORD *)v236 + 6) == 2)
            {
              if ((*((_WORD *)v236 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v236, v11);
            }
            else
            {
              *((_DWORD *)v236 + 6) -= 2;
            }
          }
          if (!v234)
          {
            v152 = 0;
            goto LABEL_381;
          }
LABEL_360:
          WebCore::Document::updateLayout(*(_QWORD *)(a1 + 16), 2u, 0);
          WebCore::startOfParagraph((uint64_t)&v257, 2, &v276);
          WebCore::startOfParagraph((uint64_t)&v276, 1, &v283);
          v182 = v283.var0.var0.var0;
          v283.var0.var0.var0 = 0;
          v183 = v257.var0.var0.var0;
          v257.var0.var0.var0 = v182;
          if (v183)
          {
            if (*((_DWORD *)v183 + 6) == 2)
            {
              if ((*((_WORD *)v183 + 15) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v183, v181);
                v230 = v283.var0.var0.var0;
                v257.var0.var1 = v283.var0.var1;
                *((_BYTE *)&v257.var0 + 12) = *((_BYTE *)&v283.var0 + 12);
                v257.var1 = v283.var1;
                v283.var0.var0.var0 = 0;
                if (v230)
                {
                  if (*((_DWORD *)v230 + 6) == 2)
                  {
                    if ((*((_WORD *)v230 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v230, v181);
                  }
                  else
                  {
                    *((_DWORD *)v230 + 6) -= 2;
                  }
                }
LABEL_364:
                v184 = v276;
                v276 = 0;
                if (v184)
                {
                  if (*((_DWORD *)v184 + 6) == 2)
                  {
                    if ((*((_WORD *)v184 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v184, v181);
                  }
                  else
                  {
                    *((_DWORD *)v184 + 6) -= 2;
                  }
                }
                WebCore::endOfParagraph((WebCore::Node *)&v257, 2, &v276);
                WebCore::endOfParagraph((WebCore::Node *)&v276, 1, &v283);
                v186 = v283.var0.var0.var0;
                v283.var0.var0.var0 = 0;
                v187 = v285.var0.var0.var0;
                v285.var0.var0.var0 = v186;
                if (v187)
                {
                  if (*((_DWORD *)v187 + 6) == 2)
                  {
                    if ((*((_WORD *)v187 + 15) & 0x400) == 0)
                    {
                      WebCore::Node::removedLastRef((WebCore::Node *)v187, v185);
                      v231 = v283.var0.var0.var0;
                      v285.var0.var1 = v283.var0.var1;
                      *((_BYTE *)&v285.var0 + 12) = *((_BYTE *)&v283.var0 + 12);
                      v285.var1 = v283.var1;
                      v283.var0.var0.var0 = 0;
                      if (v231)
                      {
                        if (*((_DWORD *)v231 + 6) == 2)
                        {
                          if ((*((_WORD *)v231 + 15) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)v231, v185);
                        }
                        else
                        {
                          *((_DWORD *)v231 + 6) -= 2;
                        }
                      }
                      goto LABEL_371;
                    }
                  }
                  else
                  {
                    *((_DWORD *)v187 + 6) -= 2;
                  }
                }
                v285.var0.var1 = v283.var0.var1;
                *((_BYTE *)&v285.var0 + 12) = *((_BYTE *)&v283.var0 + 12);
                v285.var1 = v283.var1;
                v283.var0.var0.var0 = 0;
LABEL_371:
                v188 = v276;
                v276 = 0;
                if (v188)
                {
                  if (*((_DWORD *)v188 + 6) == 2)
                  {
                    if ((*((_WORD *)v188 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v188, v185);
                  }
                  else
                  {
                    *((_DWORD *)v188 + 6) -= 2;
                  }
                }
                *(_DWORD *)(v167 + 24) += 2;
                v276 = (WebCore::Node *)v167;
                v277 = 0;
                v278 = v278 & 0xF0 | 1;
                WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v276, (uint64_t)&v283);
                v283.var1 = 1;
                WebCore::CompositeEditCommand::moveParagraphs((unsigned int *)a1, &v257, &v285, &v283, 1, 1);
                v191 = v283.var0.var0.var0;
                v283.var0.var0.var0 = 0;
                if (v191)
                {
                  if (*((_DWORD *)v191 + 6) == 2)
                  {
                    if ((*((_WORD *)v191 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v191, v189);
                  }
                  else
                  {
                    *((_DWORD *)v191 + 6) -= 2;
                  }
                }
                if (*(_DWORD *)(v167 + 24) == 2)
                {
                  if ((*(_WORD *)(v167 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v167, v189);
                }
                else
                {
                  *(_DWORD *)(v167 + 24) -= 2;
                }
                if (!v180)
                {
                  v193 = v284;
                  v192 = v275;
                  if (WebCore::canMergeLists(v284, v275, v190))
                    WebCore::CompositeEditCommand::mergeIdenticalElements((WebCore::CompositeEditCommand *)a1, v193, v192);
                  v152 = 0;
                  if (!v192)
                    goto LABEL_390;
LABEL_388:
                  if (*((_DWORD *)v192 + 6) == 2)
                  {
                    if ((*((_WORD *)v192 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v192, v11);
                  }
                  else
                  {
                    *((_DWORD *)v192 + 6) -= 2;
                  }
LABEL_390:
                  if (v284)
                  {
                    if (*((_DWORD *)v284 + 6) == 2)
                    {
                      if ((*((_WORD *)v284 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v284, v11);
                    }
                    else
                    {
                      *((_DWORD *)v284 + 6) -= 2;
                    }
                  }
                  if (*(_DWORD *)(v167 + 24) == 2)
                  {
                    if ((*(_WORD *)(v167 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v167, v11);
                  }
                  else
                  {
                    *(_DWORD *)(v167 + 24) -= 2;
                  }
                  goto LABEL_395;
                }
                WebCore::InsertListCommand::mergeWithNeighboringLists((WebCore::InsertListCommand *)&v283, (WebCore::HTMLElement *)a1, (WebCore::Element *)v180);
                v152 = v283.var0.var0.var0;
LABEL_381:
                if (*((_DWORD *)v180 + 6) == 2)
                {
                  if ((*((_WORD *)v180 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v180, v11);
                }
                else
                {
                  *((_DWORD *)v180 + 6) -= 2;
                }
                v192 = v275;
                if (!v275)
                  goto LABEL_390;
                goto LABEL_388;
              }
            }
            else
            {
              *((_DWORD *)v183 + 6) -= 2;
            }
          }
          v257.var0.var1 = v283.var0.var1;
          *((_BYTE *)&v257.var0 + 12) = *((_BYTE *)&v283.var0 + 12);
          v257.var1 = v283.var1;
          v283.var0.var0.var0 = 0;
          goto LABEL_364;
        }
        if (*((_DWORD *)v213 + 6) != 2)
        {
          v234 = 0;
          *((_DWORD *)v213 + 6) = v216;
          goto LABEL_566;
        }
        if ((*((_WORD *)v213 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v213, v11);
      }
    }
    v234 = 0;
    goto LABEL_566;
  }
  v274 = 0;
LABEL_410:
  if (result[6] == 2)
  {
    if ((*((_WORD *)result + 15) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)result, v11);
  }
  else
  {
    result[6] -= 2;
  }
LABEL_412:
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v8, v11);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::InsertListCommand::editingAction(WebCore::InsertListCommand *this)
{
  if (*((_BYTE *)this + 288))
    return 18;
  else
    return 16;
}

unsigned int *WebCore::enclosingListChild(unsigned int **this, WebCore::Node *a2, WebCore::Node *a3)
{
  WebCore::Node *v5;
  unsigned int *result;
  void *v7;
  WebCore::Node *v8;
  unsigned int *v9;
  WebCore::Node *v10;
  WebCore::Node *v11;

  WebCore::enclosingListChild((unsigned int *)a2, a2, this);
  result = *this;
  while (result)
  {
    result = WebCore::enclosingList(result, v5, &v11);
    v8 = v11;
    v11 = 0;
    if (v8)
    {
      if (*((_DWORD *)v8 + 6) == 2)
      {
        if ((*((_WORD *)v8 + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef(v8, v7);
      }
      else
      {
        *((_DWORD *)v8 + 6) -= 2;
      }
    }
    if (v8 == a3)
      break;
    WebCore::enclosingListChild(*((unsigned int **)*this + 4), (WebCore::Node *)v7, (unsigned int **)&v11);
    result = (unsigned int *)v11;
    v11 = 0;
    v9 = *this;
    *this = result;
    if (v9)
    {
      if (v9[6] == 2)
      {
        if ((*((_WORD *)v9 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v9, v5);
          v10 = v11;
          v11 = 0;
          if (v10)
          {
            if (*((_DWORD *)v10 + 6) == 2)
            {
              if ((*((_WORD *)v10 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v10, v5);
            }
            else
            {
              *((_DWORD *)v10 + 6) -= 2;
            }
          }
        }
      }
      else
      {
        v9[6] -= 2;
      }
      result = *this;
    }
  }
  return result;
}

unsigned int *WebCore::adjacentEnclosingList(unsigned int **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  WebCore *v8;
  unsigned int *result;
  void *v10;
  int v11;
  int v12;
  unsigned int *v13;
  WebCore::Node *v14;
  void *v15;
  WebCore::Node *v16;
  WebCore::Node *v17;
  void *v18;
  WebCore::Node *v19;
  WebCore::Node *v20;
  int v21;
  __int16 v22;
  WebCore::Node *v23;
  __int16 v25;
  BOOL v26;
  WebCore::Node *v27;
  WebCore::Node *v28;
  WebCore::Node *v29;
  int v30;
  int v31;
  WebCore::Node *v32;
  unsigned int *v33;
  WebCore::Node *v34;
  __int16 v35;
  WebCore::Node *v36;
  WebCore::Node *v37;
  WebCore::Node *v38;
  int v39;
  char v40;
  WebCore::Node *v41;
  unsigned int *v42;

  v8 = *(WebCore **)a3;
  if (!*(_QWORD *)a3)
  {
    result = WebCore::outermostEnclosingList(0, 0, &v42);
    goto LABEL_6;
  }
  *((_DWORD *)v8 + 6) += 4;
  result = WebCore::outermostEnclosingList(v8, 0, &v42);
  v11 = *((_DWORD *)v8 + 6) - 2;
  if (*((_DWORD *)v8 + 6) != 2)
  {
    *((_DWORD *)v8 + 6) = v11;
LABEL_4:
    v12 = v11 - 2;
    if (v12)
    {
      *((_DWORD *)v8 + 6) = v12;
      goto LABEL_6;
    }
    v25 = *((_WORD *)v8 + 15);
    goto LABEL_37;
  }
  v25 = *((_WORD *)v8 + 15);
  if ((v25 & 0x400) == 0)
  {
    result = WebCore::Node::removedLastRef(v8, v10);
    v11 = *((_DWORD *)v8 + 6);
    goto LABEL_4;
  }
LABEL_37:
  if ((v25 & 0x400) == 0)
    result = WebCore::Node::removedLastRef(v8, v10);
LABEL_6:
  v13 = v42;
  if (!v42)
  {
    *a1 = 0;
    return result;
  }
  v14 = *(WebCore::Node **)a2;
  if (*(_QWORD *)a2)
    *((_DWORD *)v14 + 6) += 2;
  v38 = v14;
  v39 = *(_DWORD *)(a2 + 8);
  v40 = *(_BYTE *)(a2 + 12);
  WebCore::enclosingTableCell((WebCore *)&v38, (uint64_t *)&v41);
  v16 = v38;
  v38 = 0;
  if (v16)
  {
    if (*((_DWORD *)v16 + 6) == 2)
    {
      if ((*((_WORD *)v16 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v16, v15);
    }
    else
    {
      *((_DWORD *)v16 + 6) -= 2;
    }
  }
  v17 = *(WebCore::Node **)a3;
  if (*(_QWORD *)a3)
    *((_DWORD *)v17 + 6) += 2;
  v38 = v17;
  v39 = *(_DWORD *)(a3 + 8);
  v40 = *(_BYTE *)(a3 + 12);
  WebCore::enclosingTableCell((WebCore *)&v38, (uint64_t *)&v37);
  v19 = v38;
  v38 = 0;
  if (v19)
  {
    if (*((_DWORD *)v19 + 6) == 2)
    {
      if ((*((_WORD *)v19 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v19, v18);
    }
    else
    {
      *((_DWORD *)v19 + 6) -= 2;
    }
  }
  if (*(_QWORD *)(*((_QWORD *)v13 + 12) + 24) != *(_QWORD *)(*(_QWORD *)a4 + 24))
    goto LABEL_67;
  v20 = *(WebCore::Node **)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_48;
  v21 = *((_DWORD *)v20 + 6);
  *((_DWORD *)v20 + 6) = v21 + 2;
  if (v13 == (unsigned int *)v20)
  {
LABEL_31:
    if (v21)
    {
      *((_DWORD *)v20 + 6) = v21;
      goto LABEL_67;
    }
    v26 = 1;
    goto LABEL_85;
  }
  v22 = *((_WORD *)v13 + 14);
  if ((v22 & 0xF000) == 0x9000)
  {
    if (**((unsigned int ***)v20 + 5) != v13
      || (*((_WORD *)v20 + 14) & 0xF000) == 0x9000
      || (*((_BYTE *)v20 + 22) & 8) == 0)
    {
      goto LABEL_48;
    }
    goto LABEL_31;
  }
  if ((v22 & 4) != 0
    && *((_QWORD *)v13 + 10)
    && ((*((unsigned __int8 *)v20 + 22) ^ *((unsigned __int8 *)v13 + 22)) & 8) == 0)
  {
    v23 = v20;
    do
      v23 = (WebCore::Node *)*((_QWORD *)v23 + 4);
    while (v23 != (WebCore::Node *)v13 && v23 != 0);
    if (v23)
      goto LABEL_31;
  }
LABEL_48:
  if (v41 != v37)
  {
    v26 = 1;
    goto LABEL_63;
  }
  WebCore::enclosingList(v13, (WebCore::Node *)v18, &v38);
  v28 = *(WebCore::Node **)a2;
  if (v28)
    *((_DWORD *)v28 + 6) += 4;
  WebCore::enclosingList((unsigned int *)v28, v27, &v36);
  v29 = v36;
  v26 = v38 != v36;
  v36 = 0;
  if (v29)
  {
    if (*((_DWORD *)v29 + 6) == 2)
    {
      if ((*((_WORD *)v29 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v29, v18);
    }
    else
    {
      *((_DWORD *)v29 + 6) -= 2;
    }
  }
  if (v28)
  {
    v30 = *((_DWORD *)v28 + 6) - 2;
    if (*((_DWORD *)v28 + 6) == 2)
    {
      v35 = *((_WORD *)v28 + 15);
      if ((v35 & 0x400) != 0)
        goto LABEL_94;
      WebCore::Node::removedLastRef(v28, v18);
      v30 = *((_DWORD *)v28 + 6);
    }
    else
    {
      *((_DWORD *)v28 + 6) = v30;
    }
    v31 = v30 - 2;
    if (v31)
    {
      *((_DWORD *)v28 + 6) = v31;
      goto LABEL_60;
    }
    v35 = *((_WORD *)v28 + 15);
LABEL_94:
    if ((v35 & 0x400) == 0)
      WebCore::Node::removedLastRef(v28, v18);
  }
LABEL_60:
  v32 = v38;
  v38 = 0;
  if (v32)
  {
    if (*((_DWORD *)v32 + 6) == 2)
    {
      if ((*((_WORD *)v32 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v32, v18);
    }
    else
    {
      *((_DWORD *)v32 + 6) -= 2;
    }
  }
LABEL_63:
  if (!v20)
    goto LABEL_66;
  if (*((_DWORD *)v20 + 6) != 2)
  {
    *((_DWORD *)v20 + 6) -= 2;
    goto LABEL_66;
  }
LABEL_85:
  if ((*((_WORD *)v20 + 15) & 0x400) == 0)
    WebCore::Node::removedLastRef(v20, v18);
LABEL_66:
  if (!v26)
  {
    v33 = 0;
    goto LABEL_68;
  }
LABEL_67:
  v33 = v13;
  v13 = 0;
LABEL_68:
  *a1 = v13;
  v34 = v37;
  v37 = 0;
  if (v34)
  {
    if (*((_DWORD *)v34 + 6) == 2)
    {
      if ((*((_WORD *)v34 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v34, v18);
    }
    else
    {
      *((_DWORD *)v34 + 6) -= 2;
    }
  }
  result = (unsigned int *)v41;
  v41 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result, v18);
    }
    else
    {
      result[6] -= 2;
    }
  }
  if (v33)
  {
    if (v33[6] == 2)
    {
      if ((*((_WORD *)v33 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v33, v18);
    }
    else
    {
      v33[6] -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::InsertNestedListCommand::insertUnorderedList(WebCore::InsertNestedListCommand *this, WebCore::Document *a2)
{
  _DWORD *v2;
  uint64_t v3;
  void *v4;
  unsigned int *result;
  WebCore::Node *v6;

  *((_DWORD *)this + 6) += 2;
  v6 = this;
  v2 = (_DWORD *)WTF::fastMalloc((WTF *)0x120);
  v3 = WebCore::EditCommand::EditCommand((uint64_t)v2, (uint64_t *)&v6, 59);
  *(_OWORD *)(v3 + 248) = 0u;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)v3 = off_1E33AD1C0;
  *(_BYTE *)(v3 + 280) = 1;
  WebCore::CompositeEditCommand::apply((WebCore::CompositeEditCommand *)v3);
  if (v2[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  else
    --v2[2];
  result = (unsigned int *)v6;
  v6 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v4);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::InsertNestedListCommand::insertOrderedList(WebCore::InsertNestedListCommand *this, WebCore::Document *a2)
{
  _DWORD *v2;
  uint64_t v3;
  void *v4;
  unsigned int *result;
  WebCore::Node *v6;

  *((_DWORD *)this + 6) += 2;
  v6 = this;
  v2 = (_DWORD *)WTF::fastMalloc((WTF *)0x120);
  v3 = WebCore::EditCommand::EditCommand((uint64_t)v2, (uint64_t *)&v6, 59);
  *(_OWORD *)(v3 + 248) = 0u;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)v3 = off_1E33AD1C0;
  *(_BYTE *)(v3 + 280) = 0;
  WebCore::CompositeEditCommand::apply((WebCore::CompositeEditCommand *)v3);
  if (v2[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  else
    --v2[2];
  result = (unsigned int *)v6;
  v6 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v4);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::InsertNestedListCommand::doApply(unsigned int *this)
{
  uint64_t v1;
  WebCore::VisiblePosition *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  void *v6;
  int v7;
  int v8;
  const WebCore::VisiblePosition *v9;
  WebCore::Node *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  WebCore::Node *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  WebCore::Node *v21;
  int v22;
  void *v23;
  char v24;
  WebCore::Node *v25;
  WebCore::Node *v26;
  uint64_t v27;
  void *v28;
  WebCore::Node *v29;
  void *v30;
  _BOOL8 v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  WebCore::Node *v35;
  void *v36;
  WebCore::Node *v37;
  WebCore::Node *v38;
  int v39;
  char v40;
  uint64_t v41;
  int v42;
  char v43;
  uint64_t v44;
  int v45;
  char v46;
  uint64_t v47;
  int v48;
  char v49;
  uint64_t v50;
  int v51;
  char v52;
  uint64_t v53;
  int v54;
  char v55;
  __int16 v56;
  char v57;
  unsigned int *v58;
  int v59;
  char v60;
  char v61;

  if (!*((_BYTE *)this + 225))
    return this;
  v1 = (uint64_t)this;
  v2 = (WebCore::VisiblePosition *)(this + 48);
  v3 = *((_QWORD *)this + 24);
  if (v3)
  {
    if ((*(_BYTE *)(v3 + 22) & 8) == 0)
      return this;
  }
  v4 = *((_QWORD *)this + 26);
  if (v4)
  {
    if ((*(_BYTE *)(v4 + 22) & 8) == 0)
      return this;
  }
  if (!v3)
    return this;
  v5 = this[51] & 7;
  if (v5 > 4)
    return this;
  if (((1 << v5) & 0x19) == 0)
  {
    v3 = *(_QWORD *)(v3 + 32);
    if (!v3)
      return this;
  }
  *(_DWORD *)(v3 + 24) += 2;
  this = (unsigned int *)WebCore::Node::computeEditability(v3, 0, 1);
  v7 = (int)this;
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      this = WebCore::Node::removedLastRef((WebCore::Node *)v3, v6);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  if (v7 != 2)
    return this;
  if (*(_BYTE *)(v1 + 225) == 2)
  {
    WebCore::VisiblePosition::canonicalPosition(v2, (uint64_t)&v58);
    v61 = 1;
  }
  else
  {
    v8 = *(unsigned __int8 *)(v1 + 224);
    WebCore::VisiblePosition::canonicalPosition(v2, (uint64_t)&v58);
    v61 = 1;
    if (!v8)
    {
      v10 = (WebCore::Node *)v58;
      if (!v58)
        goto LABEL_16;
      v58[6] += 2;
      v38 = v10;
      v39 = v59;
      v40 = v60;
      LOBYTE(v41) = 0;
      if (!WebCore::inSameLine((WebCore *)&v58, (const WebCore::VisiblePosition *)&v38, v9))
        v61 = 0;
      v37 = v38;
      v38 = 0;
      if (v37)
      {
        if (*((_DWORD *)v37 + 6) == 2)
        {
          if ((*((_WORD *)v37 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v37, v36);
        }
        else
        {
          *((_DWORD *)v37 + 6) -= 2;
        }
      }
    }
  }
  v10 = (WebCore::Node *)v58;
  if (v58)
    v58[6] += 2;
LABEL_16:
  v38 = v10;
  v39 = v59;
  v40 = v60;
  v11 = WebCore::enclosingElementWithTag((WebCore *)&v38, (const WebCore::Position *)&WebCore::HTMLNames::liTag, v9);
  v13 = v11;
  if (v11)
    *(_DWORD *)(v11 + 24) += 2;
  v14 = v38;
  v38 = 0;
  if (v14)
  {
    if (*((_DWORD *)v14 + 6) == 2)
    {
      if ((*((_WORD *)v14 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v14, v12);
    }
    else
    {
      *((_DWORD *)v14 + 6) -= 2;
    }
  }
  v15 = (uint64_t)v58;
  v58 = 0;
  if (v15)
  {
    if (*(_DWORD *)(v15 + 24) == 2)
    {
      if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v15, v12);
    }
    else
    {
      *(_DWORD *)(v15 + 24) -= 2;
    }
  }
  if (v13)
  {
    v16 = *(_QWORD *)(v1 + 16);
    v17 = bmalloc::api::isoAllocate();
    v18 = v17;
    *(_OWORD *)(v17 + 8) = xmmword_1968BC9D0;
    *(_DWORD *)(v17 + 28) = 5148;
    *(_QWORD *)(v17 + 32) = 0;
    *(_QWORD *)(v17 + 40) = v16 + 96;
    *(_OWORD *)(v17 + 48) = 0u;
    *(_OWORD *)(v17 + 64) = 0u;
    ++*(_DWORD *)(v16 + 3324);
    *(_QWORD *)(v17 + 80) = 0;
    *(_QWORD *)(v17 + 88) = 0;
    v19 = WebCore::HTMLNames::liTag;
    if (WebCore::HTMLNames::liTag)
      ++*(_DWORD *)WebCore::HTMLNames::liTag;
    *(_QWORD *)(v17 + 96) = v19;
    *(_QWORD *)(v17 + 104) = 0;
    *(_QWORD *)v17 = off_1E33C04C8;
    *(_DWORD *)(v17 + 24) = 4;
    v38 = (WebCore::Node *)v17;
    WebCore::CompositeEditCommand::insertNodeAfter((unsigned int *)v1, (uint64_t *)&v38, v13);
    v21 = v38;
    v38 = 0;
    if (v21)
    {
      if (*((_DWORD *)v21 + 6) == 2)
      {
        if ((*((_WORD *)v21 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v21, v20);
      }
      else
      {
        *((_DWORD *)v21 + 6) -= 2;
      }
    }
    v22 = *(_DWORD *)(v18 + 24);
    v38 = (WebCore::Node *)v18;
    v39 = 0;
    v40 = 3;
    *(_DWORD *)(v18 + 24) = v22 + 6;
    v41 = v18;
    v42 = 0;
    v43 = 3;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v54 = 0;
    v55 = 0;
    v56 = 1;
    v57 = 0;
    WebCore::VisibleSelection::validate((uint64_t)&v38, 0);
    WebCore::EditCommand::setEndingSelection((uint64_t *)v1, (const WebCore::VisibleSelection *)&v38);
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v38);
    if (*(_DWORD *)(v18 + 24) == 2)
    {
      if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v18, v23);
    }
    else
    {
      *(_DWORD *)(v18 + 24) -= 2;
    }
    if (*(_BYTE *)(v1 + 280))
      v24 = 2;
    else
      v24 = 1;
    v25 = *(WebCore::Node **)(v1 + 16);
    v26 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x128);
    *((_DWORD *)v25 + 6) += 2;
    v38 = v25;
    v27 = WebCore::EditCommand::EditCommand((uint64_t)v26, (uint64_t *)&v38, 59);
    *(_OWORD *)(v27 + 248) = 0u;
    *(_OWORD *)(v27 + 264) = 0u;
    *(_QWORD *)v27 = off_1E33AD330;
    *(_BYTE *)(v27 + 280) = v24;
    *(_QWORD *)(v27 + 288) = 0;
    v29 = v38;
    v38 = 0;
    if (v29)
    {
      if (*((_DWORD *)v29 + 6) == 2)
      {
        if ((*((_WORD *)v29 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v29, v28);
      }
      else
      {
        *((_DWORD *)v29 + 6) -= 2;
      }
    }
    v38 = v26;
    WebCore::CompositeEditCommand::applyCommandToComposite((WebCore::CompositeEditCommand *)v1, (uint64_t **)&v38);
    this = (unsigned int *)v38;
    v38 = 0;
    if (this)
    {
      if (this[2] == 1)
        this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
      else
        --this[2];
    }
    if (*(_DWORD *)(v18 + 24) == 2)
    {
      if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)v18, v30);
    }
    else
    {
      *(_DWORD *)(v18 + 24) -= 2;
    }
    if (*(_DWORD *)(v13 + 24) != 2)
    {
      *(_DWORD *)(v13 + 24) -= 2;
      return this;
    }
    if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
    {
      this = (unsigned int *)v13;
      return WebCore::Node::removedLastRef((WebCore::Node *)this, v30);
    }
  }
  else
  {
    v31 = *(_BYTE *)(v1 + 280) != 0;
    v32 = *(unsigned int **)(v1 + 16);
    v32[6] += 2;
    v58 = v32;
    v33 = WTF::fastMalloc((WTF *)0x128);
    v34 = WebCore::EditCommand::EditCommand(v33, (uint64_t *)&v58, 59);
    *(_OWORD *)(v34 + 248) = 0u;
    *(_OWORD *)(v34 + 264) = 0u;
    *(_QWORD *)v34 = off_1E33ACEF8;
    *(_QWORD *)(v34 + 280) = 0;
    *(_BYTE *)(v34 + 288) = v31;
    v38 = (WebCore::Node *)v34;
    WebCore::CompositeEditCommand::applyCommandToComposite((WebCore::CompositeEditCommand *)v1, (uint64_t **)&v38);
    v35 = v38;
    v38 = 0;
    if (v35)
    {
      if (*((_DWORD *)v35 + 2) == 1)
        (*(void (**)(WebCore::Node *))(*(_QWORD *)v35 + 8))(v35);
      else
        --*((_DWORD *)v35 + 2);
    }
    this = v58;
    v58 = 0;
    if (this)
    {
      if (this[6] == 2)
      {
        if ((*((_WORD *)this + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)this, v30);
      }
      else
      {
        this[6] -= 2;
      }
    }
  }
  return this;
}

unsigned int *WebCore::InsertNodeBeforeCommand::doApply(unsigned int *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  void *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WebCore::Node *v7;
  _BYTE v8[8];
  WTF::StringImpl *v9;
  char v10;

  v1 = *((_QWORD *)this + 32);
  v2 = *(_QWORD *)(v1 + 32);
  if (v2)
  {
    v3 = this;
    *(_DWORD *)(v2 + 24) += 2;
    if (this[66] == 1)
    {
      this = (unsigned int *)WebCore::Node::computeEditability(v2, 0, 0);
      if (!(_DWORD)this)
      {
LABEL_14:
        if (*(_DWORD *)(v2 + 24) == 2)
        {
          if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)v2, v4);
        }
        else
        {
          *(_DWORD *)(v2 + 24) -= 2;
        }
        return this;
      }
      v1 = *((_QWORD *)v3 + 32);
    }
    v5 = *((_QWORD *)v3 + 31);
    *(_DWORD *)(v5 + 24) += 2;
    *(_DWORD *)(v1 + 24) += 2;
    v7 = (WebCore::Node *)v1;
    WebCore::ContainerNode::insertBefore(v2, (uint64_t *)v5, &v7, (uint64_t)v8);
    if (v10)
    {
      v6 = v9;
      v9 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v4);
        else
          *(_DWORD *)v6 -= 2;
      }
    }
    this = (unsigned int *)v7;
    v7 = 0;
    if (this)
    {
      if (this[6] == 2)
      {
        if ((*((_WORD *)this + 15) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)this, v4);
      }
      else
      {
        this[6] -= 2;
      }
    }
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)v5, v4);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
    goto LABEL_14;
  }
  return this;
}

unsigned int *WebCore::InsertNodeBeforeCommand::doUnapply(WebCore::InsertNodeBeforeCommand *this)
{
  uint64_t v1;
  unsigned int *result;
  void *v3;
  uint64_t v4;
  __int16 v5;
  __int16 v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;

  v1 = *((_QWORD *)this + 31);
  *(_DWORD *)(v1 + 24) += 2;
  result = (unsigned int *)WebCore::Node::computeEditability(v1, 0, 0);
  if ((_DWORD)result)
  {
    v4 = *(_QWORD *)(v1 + 32);
    if (v4)
    {
      *(_DWORD *)(v4 + 24) += 2;
      result = (unsigned int *)WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v4, (WebCore::Node *)v1, &v7);
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        v5 = *(_WORD *)(v4 + 30);
        if ((v5 & 0x400) == 0)
        {
          v6 = *(_WORD *)(v4 + 28);
          if ((v6 & 0xF000) == 0x9000)
          {
            result = WebCore::Document::removedLastRef((WebCore::Document *)v4, v3);
          }
          else
          {
            if ((v6 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 160) + 16))(*(_QWORD *)(v4 + 160));
              v5 = *(_WORD *)(v4 + 30);
            }
            *(_WORD *)(v4 + 30) = v5 | 0x400;
            result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
          }
        }
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
    }
    else
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
    }
    if ((_BYTE)v9)
    {
      result = (unsigned int *)v8;
      v8 = 0;
      if (result)
      {
        if (*result == 2)
          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v3);
        else
          *result -= 2;
      }
    }
  }
  if (*(_DWORD *)(v1 + 24) == 2)
  {
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v1, v3);
  }
  else
  {
    *(_DWORD *)(v1 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::InsertParagraphSeparatorCommand::preservesTypingStyle(WebCore::InsertParagraphSeparatorCommand *this)
{
  return 1;
}

unsigned int *WebCore::InsertParagraphSeparatorCommand::calculateStyleBeforeInsertion(WebCore::InsertParagraphSeparatorCommand *this, const WebCore::Position *a2)
{
  void *v4;
  WebCore::Node *v5;
  uint64_t (*v6)();
  BOOL v7;
  WebCore::Node *v8;
  uint64_t (*v9)();
  _BOOL4 v10;
  WebCore::Node *v11;
  uint64_t v12;
  WebCore::MutableStyleProperties *v13;
  uint64_t v14;
  void *v15;
  WebCore::EditingStyle *v16;
  char v17;
  unsigned int *result;
  WTF *v19;
  void *v20;
  WTF *v21;
  void *v22;
  WebCore::Node *v23[2];
  char v24;
  WebCore::Node *v25[3];

  WebCore::VisiblePosition::canonicalPosition(a2, (uint64_t)v23);
  v24 = 1;
  v5 = v23[0];
  if (v23[0])
    v6 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v6 = 0;
  if (v6)
  {
    WebCore::startOfParagraph((uint64_t)v23, 1, v25);
    v7 = WebCore::operator==((uint64_t *)v23, (uint64_t *)v25);
    v8 = v25[0];
    v25[0] = 0;
    if (v8)
    {
      if (*((_DWORD *)v8 + 6) == 2)
      {
        if ((*((_WORD *)v8 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v8, v4);
      }
      else
      {
        *((_DWORD *)v8 + 6) -= 2;
      }
    }
    if (v7)
    {
LABEL_18:
      v12 = WTF::fastMalloc((WTF *)0x18);
      v13 = (WebCore::MutableStyleProperties *)v12;
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = 0;
      *(_BYTE *)(v12 + 16) &= 0xE0u;
      *(_DWORD *)(v12 + 20) = WebCore::EditingStyle::NoFontDelta;
      v14 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        *(_DWORD *)(v14 + 24) += 2;
        WebCore::EditingStyle::init(v12, (WebCore *)v14, 2);
        if (*(_DWORD *)(v14 + 24) == 2)
        {
          if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v14, v15);
        }
        else
        {
          *(_DWORD *)(v14 + 24) -= 2;
        }
      }
      else
      {
        WebCore::EditingStyle::init(v12, 0, 2);
      }
      v16 = (WebCore::EditingStyle *)*((_QWORD *)this + 35);
      *((_QWORD *)this + 35) = v13;
      if (v16)
      {
        if (*(_DWORD *)v16 == 1)
        {
          WebCore::EditingStyle::~EditingStyle(v16, (WTF::StringImpl *)v15);
          WTF::fastFree(v19, v20);
          v13 = (WebCore::MutableStyleProperties *)*((_QWORD *)this + 35);
          if (!v13)
          {
            v17 = 1;
LABEL_25:
            WebCore::EditingStyle::mergeTypingStyle(v13, *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)a2 + 40) + 8));
            if ((v17 & 1) == 0)
            {
              if (*(_DWORD *)v13 == 1)
              {
                WebCore::EditingStyle::~EditingStyle(v13, (WTF::StringImpl *)v4);
                WTF::fastFree(v21, v22);
              }
              else
              {
                --*(_DWORD *)v13;
              }
            }
            goto LABEL_28;
          }
        }
        else
        {
          --*(_DWORD *)v16;
        }
      }
      v17 = 0;
      ++*(_DWORD *)v13;
      goto LABEL_25;
    }
    v5 = v23[0];
  }
  if (v5)
    v9 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v9 = 0;
  if (v9)
  {
    WebCore::endOfParagraph((WebCore::Node *)v23, 1, v25);
    v10 = WebCore::operator==((uint64_t *)v23, (uint64_t *)v25);
    v11 = v25[0];
    v25[0] = 0;
    if (v11)
    {
      if (*((_DWORD *)v11 + 6) == 2)
      {
        if ((*((_WORD *)v11 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v11, v4);
      }
      else
      {
        *((_DWORD *)v11 + 6) -= 2;
      }
    }
    if (v10)
      goto LABEL_18;
  }
LABEL_28:
  result = (unsigned int *)v23[0];
  v23[0] = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v4);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

uint64_t WebCore::InsertParagraphSeparatorCommand::getAncestorsInsideBlock(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  WTF *v15;
  void *v16;
  void *v17;
  WTF *v18;
  void *v19;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;

  if (*(_DWORD *)(a3 + 8))
  {
    v21 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v21)
    {
      v22 = *(WTF **)a3;
      v23 = 8 * v21;
      do
      {
        v24 = *(_QWORD *)v22;
        *(_QWORD *)v22 = 0;
        if (v24)
        {
          if (*(_DWORD *)(v24 + 24) == 2)
          {
            if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
            {
              v25 = result;
              WebCore::Node::removedLastRef((WebCore::Node *)v24, a2);
              result = v25;
            }
          }
          else
          {
            *(_DWORD *)(v24 + 24) -= 2;
          }
        }
        v22 = (WTF *)((char *)v22 + 8);
        v23 -= 8;
      }
      while (v23);
      *(_DWORD *)(a3 + 12) = 0;
    }
    v26 = *(WTF **)a3;
    if (*(_QWORD *)a3)
    {
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(a3 + 8) = 0;
      v27 = result;
      WTF::fastFree(v26, a2);
      result = v27;
    }
  }
  if ((void *)result != a2)
  {
    v5 = *(_QWORD *)(result + 32);
    if (v5)
    {
      v6 = (*(_WORD *)(v5 + 28) & 8) != 0 ? *(void **)(result + 32) : 0;
      if (v6 && v6 != a2)
      {
        LODWORD(v8) = *(_DWORD *)(a3 + 12);
        while (1)
        {
          v9 = v8;
          if ((_DWORD)v8 == *(_DWORD *)(a3 + 8))
          {
            v11 = v8 + 1;
            v12 = v9 + (v9 >> 2);
            if (v12 >= 0x10)
              v13 = v12 + 1;
            else
              v13 = 16;
            if (v13 <= v11)
              v14 = v9 + 1;
            else
              v14 = v13;
            if (v14 >> 29)
            {
              __break(0xC471u);
              return result;
            }
            v15 = *(WTF **)a3;
            v16 = (void *)WTF::fastMalloc((WTF *)(8 * v14));
            *(_DWORD *)(a3 + 8) = v14;
            *(_QWORD *)a3 = v16;
            result = (uint64_t)memcpy(v16, v15, 8 * v9);
            if (v15)
            {
              if (*(WTF **)a3 == v15)
              {
                *(_QWORD *)a3 = 0;
                *(_DWORD *)(a3 + 8) = 0;
              }
              result = WTF::fastFree(v15, v17);
            }
            v8 = *(unsigned int *)(a3 + 12);
            v18 = *(WTF **)a3;
            *(_DWORD *)(v5 + 24) += 2;
            v10 = (_QWORD *)((char *)v18 + 8 * v8);
          }
          else
          {
            v10 = (_QWORD *)(*(_QWORD *)a3 + 8 * v8);
            *(_DWORD *)(v5 + 24) += 2;
          }
          *v10 = v5;
          LODWORD(v8) = v8 + 1;
          *(_DWORD *)(a3 + 12) = v8;
          v5 = *(_QWORD *)(v5 + 32);
          if (v5)
          {
            v19 = (*(_WORD *)(v5 + 28) & 8) != 0 ? (void *)v5 : 0;
            if (v19 && v19 != a2)
              continue;
          }
          return result;
        }
      }
    }
  }
  return result;
}

WebCore::Node **WebCore::InsertParagraphSeparatorCommand::cloneHierarchyUnderNewBlock(WebCore::Node **result, WebCore::CompositeEditCommand *a2, uint64_t a3, WebCore::Node **a4)
{
  WebCore::Node **v4;
  WebCore::Node *v5;
  uint64_t v6;
  unint64_t v9;
  WebCore::Node *v10;
  void *v11;
  WebCore::Node *v12;
  WebCore::Node *v13;
  WebCore::Element *v14;

  v4 = result;
  v5 = *a4;
  *a4 = 0;
  v6 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v6)
  {
    v9 = v6 - 1;
    while (v9 < *(unsigned int *)(a3 + 12))
    {
      WebCore::Element::cloneElementWithoutChildren(*(WebCore::Element **)(*(_QWORD *)a3 + 8 * v9), &v14);
      WebCore::Element::removeAttribute(v14, (const WebCore::QualifiedName *)&WebCore::HTMLNames::idAttr);
      v10 = v14;
      *((_DWORD *)v14 + 6) += 2;
      v12 = v5;
      v13 = v10;
      WebCore::CompositeEditCommand::appendNode(a2, (uint64_t *)&v13, (uint64_t *)&v12);
      if (v12)
      {
        if (*((_DWORD *)v12 + 6) == 2)
        {
          if ((*((_WORD *)v12 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v12, v11);
        }
        else
        {
          *((_DWORD *)v12 + 6) -= 2;
        }
      }
      result = (WebCore::Node **)v13;
      if (v13)
      {
        if (*((_DWORD *)v13 + 6) == 2)
        {
          if ((*((_WORD *)v13 + 15) & 0x400) == 0)
            result = (WebCore::Node **)WebCore::Node::removedLastRef(v13, v11);
        }
        else
        {
          *((_DWORD *)v13 + 6) -= 2;
        }
      }
      v5 = v14;
      if (--v9 == -1)
        goto LABEL_16;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_16:
    *v4 = v5;
  }
  return result;
}

unsigned int *WebCore::InsertParagraphSeparatorCommand::doApply(unsigned int *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  void *v7;
  unsigned int *v8;
  unsigned int *v9;
  int v10;
  WebCore *v11;
  WebCore::Node *v12;
  unsigned int v13;
  void *v14;
  WebCore::Node *v15;
  void *v16;
  WebCore::Node *v17;
  int v18;
  WebCore::Node *v19;
  WebCore::Node *v20;
  WebCore::Node *v21;
  WebCore::Node *v22;
  WebCore::Node *v23;
  uint64_t (*v24)();
  WebCore::Node *v25;
  WebCore::Node *v26;
  int v27;
  int v28;
  _BOOL4 v29;
  int v30;
  WebCore::Node *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  WebCore::Node *v35;
  WebCore::Node *v36;
  uint64_t v37;
  void *v38;
  WebCore::Node *v39;
  unsigned int *v40;
  void *v41;
  WebCore::Node *v42;
  unsigned int *v43;
  void *v44;
  WebCore::Node *v45;
  unsigned int *v46;
  const WebCore::VisiblePosition *v47;
  WebCore::Node *v48;
  int v49;
  unsigned int v50;
  int v51;
  WebCore::Node *v52;
  __int16 v53;
  int v54;
  WebCore::Node *v56;
  void *v57;
  WebCore::Node *v58;
  void *v59;
  WebCore::Node *v60;
  WebCore::Node *v61;
  WebCore::Node *v62;
  uint64_t v63;
  WebCore::Node *v64;
  _BOOL4 v66;
  WebCore::Node *v67;
  BOOL v69;
  WebCore::Node *v70;
  WebCore::Node *v71;
  unsigned int v72;
  int v73;
  int v74;
  _BOOL4 isRootEditableElement;
  const VisiblePosition *v76;
  WebCore::Node *v77;
  void *v78;
  WebCore::Node *v79;
  WebCore::Node *v80;
  void *v81;
  WebCore::Node *v82;
  void *v83;
  uint64_t v84;
  WTF::String *v85;
  __n128 v86;
  int v87;
  void *v88;
  const WebCore::VisiblePosition *v89;
  WebCore::Node *v90;
  _BOOL4 v92;
  WebCore::Node *v93;
  uint64_t v94;
  WebCore::Node *v95;
  void *v96;
  const WebCore::VisiblePosition *v97;
  WebCore::Node *v98;
  void *v99;
  BOOL v100;
  WebCore::Node *v101;
  uint64_t (*v102)();
  void *v103;
  _BOOL4 v104;
  WebCore::Node *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  WebCore::Node *v109;
  WebCore::Node *v110;
  unsigned int *v111;
  WebCore::Node *v112;
  int v113;
  _BYTE *v114;
  int v115;
  int v116;
  void *v117;
  WebCore::Node *v118;
  unsigned int *v119;
  WebCore::Node *v120;
  WebCore::Node *v121;
  void *v122;
  WebCore::Node *v123;
  unsigned int *v124;
  void *v125;
  WebCore::Node *v126;
  void *v127;
  WebCore::Node *v128;
  WebCore::Node *v129;
  void *v130;
  WTF *v131;
  unsigned int v132;
  char v133;
  unsigned int v134;
  unsigned int v135;
  BOOL v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int16 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  WebCore::Node *v148;
  void *v149;
  WebCore::Node *v150;
  void *v151;
  WebCore::Node *v152;
  WebCore::Node *v153;
  __int16 v154;
  char v155;
  WTF *v156;
  WebCore::Node *v157;
  __int16 v158;
  uint64_t v159;
  WebCore::Node *v160;
  void *v161;
  WebCore::Node *v162;
  void *v163;
  WebCore::Node *v164;
  WebCore::Node *v165;
  uint64_t v166;
  WebCore::Node *v167;
  uint64_t v168;
  WebCore::Node *v169;
  uint64_t v170;
  uint64_t v171;
  WebCore::Node *v172;
  uint64_t v173;
  WebCore::Node *v174;
  WebCore::Node *v175;
  uint64_t v176;
  uint64_t v177;
  void *v178;
  WebCore::Node *v179;
  unsigned int *v180;
  WebCore::Node *v181;
  WebCore::Node *v182;
  unsigned int *v183;
  WebCore::Node *v184;
  const WebCore::Node *v185;
  void *v186;
  void *v187;
  unsigned int *v188;
  WebCore::Node *v189;
  unsigned int *v190;
  WebCore::Node *v191;
  __int16 v192;
  int v193;
  int v194;
  int v195;
  uint64_t v196;
  int v197;
  unsigned int *v198;
  unsigned int v199;
  int v200;
  int v201;
  WebCore::Node *v202;
  void *v203;
  WebCore::Node *v204;
  uint64_t v205;
  char v206;
  char v207;
  WebCore::Node *v208;
  uint64_t v209;
  unsigned int v210;
  unsigned int *v211;
  char v212;
  WebCore::Node *v213;
  uint64_t v214;
  uint64_t (*v215)();
  VisiblePosition *v216;
  _BOOL4 v217;
  WebCore::Node *v218;
  uint64_t v219;
  uint64_t v220;
  void *v221;
  void *v222;
  BOOL v223;
  WebCore::Node *v224;
  WebCore::Node *v225;
  unsigned int *v226;
  unsigned int v227;
  WebCore::Node *v228;
  WebCore::Node *v229;
  __int16 v230;
  signed int v231;
  WebCore::RenderText *v232;
  uint64_t v233;
  signed int v234;
  unsigned int v235;
  char v236;
  void *v237;
  WebCore::Node *v238;
  WebCore::Node *v239;
  unsigned int *v240;
  void *v241;
  WebCore::Node *v242;
  WebCore::Node *v243;
  const WebCore::VisiblePosition *v244;
  unsigned __int8 v245;
  BOOL v247;
  void *v248;
  unsigned int **v249;
  WebCore::Node *v250;
  uint64_t (*v252)();
  uint64_t v253;
  uint64_t v254;
  WebCore::Node *v255;
  __int16 v256;
  __int16 v257;
  char v258;
  WebCore::Node *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  WebCore::Node *v263;
  BOOL v264;
  int v265;
  void *v266;
  WebCore::Node *v267;
  WTF *v268;
  void *v269;
  int v270;
  __int16 v271;
  uint64_t v272;
  int v273;
  int v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  WebCore::Node *v278;
  WebCore::Node *v279;
  int v280;
  char v281;
  WebCore::Node *v282;
  unsigned int v283;
  char v284;
  WebCore::Node *v285;
  unsigned int v286;
  char v287;
  char v288;
  WebCore::Node *v289;
  unsigned int v290;
  char v291;
  char v292;
  WebCore::Node *v293;
  unsigned int v294;
  char v295;
  WebCore::Node *v296;
  unsigned int v297;
  char v298;
  WebCore::Node *v299;
  WebCore::Node **v300;
  WebCore *v301;
  unsigned int *v302;
  unsigned int v303;
  char v304;
  WebCore::Node *v305;
  uint64_t v306;
  uint64_t v307;
  WebCore::Node *v308;
  uint64_t v309;

  v1 = *((unsigned __int8 *)this + 225);
  if (!*((_BYTE *)this + 225))
    return this;
  v2 = (uint64_t)this;
  v4 = (uint64_t *)(this + 48);
  v3 = *((_QWORD *)this + 24);
  if (v3)
  {
    if ((*(_BYTE *)(v3 + 22) & 8) == 0)
      return this;
  }
  v5 = *((_QWORD *)this + 26);
  if (v5)
  {
    if ((*(_BYTE *)(v5 + 22) & 8) == 0)
      return this;
  }
  if (v3)
    *(_DWORD *)(v3 + 24) += 2;
  v302 = (unsigned int *)v3;
  v6 = this + 50;
  v303 = this[50];
  v304 = *((_BYTE *)this + 204);
  if (v1 == 2)
  {
    WebCore::InsertParagraphSeparatorCommand::calculateStyleBeforeInsertion((WebCore::InsertParagraphSeparatorCommand *)this, (const WebCore::Position *)&v302);
    WebCore::CompositeEditCommand::deleteSelection((WebCore::Node *)v2, 0, 1, 0, 1, 1);
    v8 = *(unsigned int **)(v2 + 192);
    if (v8)
      v8[6] += 2;
    v9 = v302;
    v302 = v8;
    if (v9)
    {
      if (v9[6] == 2)
      {
        if ((*((_WORD *)v9 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v9, v7);
      }
      else
      {
        v9[6] -= 2;
      }
    }
    v303 = *v6;
    v304 = *(_BYTE *)(v2 + 204);
  }
  v10 = *(unsigned __int8 *)(v2 + 224);
  v11 = *(WebCore **)(v2 + 16);
  *((_DWORD *)v11 + 6) += 2;
  v301 = v11;
  WebCore::Position::parentAnchoredEquivalent((uint64_t)&v302, (uint64_t)&v285);
  v12 = v285;
  if (v285
    && (v13 = v287 & 7, v13 <= 4)
    && (((1 << v13) & 0x19) != 0 || (v12 = (WebCore::Node *)*((_QWORD *)v285 + 4)) != 0))
  {
    *((_DWORD *)v12 + 6) += 2;
    v299 = v12;
    WebCore::enclosingBlock((uint64_t *)&v299, (WebCore::Node *)1, (WebCore::Node **)&v300);
    v299 = 0;
    if (*((_DWORD *)v12 + 6) == 2)
    {
      if ((*((_WORD *)v12 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v12, v14);
    }
    else
    {
      *((_DWORD *)v12 + 6) -= 2;
    }
  }
  else
  {
    v299 = 0;
    WebCore::enclosingBlock((uint64_t *)&v299, (WebCore::Node *)1, (WebCore::Node **)&v300);
    v299 = 0;
  }
  v15 = v285;
  v285 = 0;
  if (v15)
  {
    if (*((_DWORD *)v15 + 6) == 2)
    {
      if ((*((_WORD *)v15 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v15, v14);
    }
    else
    {
      *((_DWORD *)v15 + 6) -= 2;
    }
  }
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v302, (uint64_t)&v285);
  v288 = 1;
  v17 = v285;
  if (v285)
  {
    v18 = *((_DWORD *)v285 + 6);
    *((_DWORD *)v285 + 6) = v18 + 2;
    v296 = v17;
    v297 = v286;
    v298 = v287;
    if (v18)
    {
      *((_DWORD *)v17 + 6) = v18;
    }
    else if ((*((_WORD *)v17 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v17, v16);
    }
  }
  else
  {
    v296 = 0;
    v297 = v286;
    v298 = v287;
  }
  v19 = (WebCore::Node *)v300;
  if (!v300)
    goto LABEL_80;
  v20 = v300[4];
  if (!v20 || (*((_WORD *)v20 + 14) & 0x80) != 0)
    goto LABEL_80;
  v21 = (WebCore::Node *)v302;
  if (v302)
    v302[6] += 2;
  v293 = v21;
  v294 = v303;
  v295 = v304;
  WebCore::highestEditableRoot((uint64_t)&v293, 0, (uint64_t *)&v305);
  if (!v305)
    goto LABEL_45;
  WebCore::firstPositionInOrBeforeNode((uint64_t)v305, v22, (uint64_t)&v285);
  WebCore::enclosingNodeOfType((uint64_t)&v285, (uint64_t (*)(uint64_t))WebCore::isPhrasingContent, 1, (uint64_t *)&v289);
  v23 = v289;
  if (v289)
    v24 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  else
    v24 = 0;
  v289 = 0;
  if (v23)
  {
    if (*((_DWORD *)v23 + 6) == 2)
    {
      if ((*((_WORD *)v23 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v23, v22);
    }
    else
    {
      *((_DWORD *)v23 + 6) -= 2;
    }
  }
  v25 = v285;
  v285 = 0;
  if (v25)
  {
    if (*((_DWORD *)v25 + 6) == 2)
    {
      if ((*((_WORD *)v25 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v25, v22);
    }
    else
    {
      *((_DWORD *)v25 + 6) -= 2;
    }
  }
  v26 = v305;
  v305 = 0;
  if (v26)
  {
    if (*((_DWORD *)v26 + 6) == 2)
    {
      if ((*((_WORD *)v26 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v26, v22);
        if (v24)
          goto LABEL_76;
        goto LABEL_45;
      }
    }
    else
    {
      *((_DWORD *)v26 + 6) -= 2;
    }
  }
  if (v24)
    goto LABEL_76;
LABEL_45:
  if ((*((_WORD *)v19 + 14) & 0x10) != 0)
  {
    v27 = *((_DWORD *)v19 + 6);
    *((_DWORD *)v19 + 6) = v27 + 2;
    if ((*((_QWORD *)v19 + 8) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_BYTE *)((*((_QWORD *)v19 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195AFF894);
      }
      v28 = *(unsigned __int8 *)((*((_QWORD *)v19 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E);
      if (v27)
      {
        *((_DWORD *)v19 + 6) = v27;
      }
      else if ((*((_WORD *)v19 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v19, v22);
      }
      v29 = 1;
      if (v28 == 35 || v28 == 63)
        goto LABEL_77;
    }
    else if (v27)
    {
      *((_DWORD *)v19 + 6) = v27;
    }
    else if ((*((_WORD *)v19 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v19, v22);
    }
  }
  if ((*((_QWORD *)v19 + 8) & 0xFFFFFFFFFFFFLL) == 0)
  {
    if ((*((_WORD *)v19 + 14) & 0x10) == 0)
      goto LABEL_67;
    v63 = *(_QWORD *)(*((_QWORD *)v19 + 12) + 24);
    if (v63 == *(_QWORD *)(WebCore::HTMLNames::tdTag + 24) || v63 == *(_QWORD *)(WebCore::HTMLNames::thTag + 24))
      goto LABEL_76;
    goto LABEL_66;
  }
  if (*(_BYTE *)((*((_QWORD *)v19 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) == 37)
    goto LABEL_76;
  if ((*((_WORD *)v19 + 14) & 0x10) != 0)
  {
LABEL_66:
    if (*(_QWORD *)(*((_QWORD *)v19 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::formTag + 24))
      goto LABEL_67;
LABEL_76:
    v29 = 1;
    goto LABEL_77;
  }
LABEL_67:
  if (!v296)
  {
LABEL_73:
    v29 = 0;
    goto LABEL_77;
  }
  if ((*((_QWORD *)v296 + 8) & 0xFFFFFFFFFFFFLL) == 0
    || (v30 = *(unsigned __int8 *)((*((_QWORD *)v296 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E), v29 = 1, v30 != 35) && v30 != 63)
  {
    if ((*((_WORD *)v296 + 14) & 0x10) != 0)
    {
      v29 = *(_QWORD *)(*((_QWORD *)v296 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::hrTag + 24);
      goto LABEL_77;
    }
    goto LABEL_73;
  }
LABEL_77:
  v31 = v293;
  v293 = 0;
  if (!v31)
    goto LABEL_162;
  if (*((_DWORD *)v31 + 6) == 2)
  {
    if ((*((_WORD *)v31 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v31, v22);
      if (!v29)
        goto LABEL_107;
      goto LABEL_80;
    }
LABEL_162:
    if (!v29)
      goto LABEL_107;
LABEL_80:
    v32 = WTF::fastMalloc((WTF *)0x118);
    v33 = WebCore::EditCommand::EditCommand(v32, (uint64_t *)&v301, 59);
    *(_OWORD *)(v33 + 248) = 0u;
    *(_OWORD *)(v33 + 264) = 0u;
    *(_QWORD *)v33 = off_1E33ACE28;
    v285 = (WebCore::Node *)v33;
    WebCore::CompositeEditCommand::applyCommandToComposite((WebCore::CompositeEditCommand *)v2, (uint64_t **)&v285);
    v35 = v285;
    v285 = 0;
    if (v35)
    {
      if (*((_DWORD *)v35 + 2) == 1)
        (*(void (**)(WebCore::Node *))(*(_QWORD *)v35 + 8))(v35);
      else
        --*((_DWORD *)v35 + 2);
    }
    goto LABEL_83;
  }
  *((_DWORD *)v31 + 6) -= 2;
  if (v29)
    goto LABEL_80;
LABEL_107:
  WebCore::Position::upstream((uint64_t)&v302, (WebCore::Node *)1, (uint64_t)&v285);
  v39 = v285;
  v285 = 0;
  v40 = v302;
  v302 = (unsigned int *)v39;
  if (!v40)
  {
LABEL_110:
    v303 = v286;
    v304 = v287;
    goto LABEL_111;
  }
  if (v40[6] != 2)
  {
    v40[6] -= 2;
    goto LABEL_110;
  }
  if ((*((_WORD *)v40 + 15) & 0x400) != 0)
    goto LABEL_110;
  WebCore::Node::removedLastRef((WebCore::Node *)v40, v38);
  v56 = v285;
  v303 = v286;
  v304 = v287;
  v285 = 0;
  if (v56)
  {
    if (*((_DWORD *)v56 + 6) == 2)
    {
      if ((*((_WORD *)v56 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v56, v38);
    }
    else
    {
      *((_DWORD *)v56 + 6) -= 2;
    }
  }
LABEL_111:
  if (WebCore::Position::isCandidate((WebCore::Position *)&v302, (const WebCore::Node *)v38))
    goto LABEL_116;
  WebCore::Position::downstream((uint64_t)&v302, (WebCore::Node *)1, (uint64_t)&v285);
  v42 = v285;
  v285 = 0;
  v43 = v302;
  v302 = (unsigned int *)v42;
  if (!v43)
    goto LABEL_115;
  if (v43[6] != 2)
  {
    v43[6] -= 2;
LABEL_115:
    v303 = v286;
    v304 = v287;
    goto LABEL_116;
  }
  if ((*((_WORD *)v43 + 15) & 0x400) != 0)
    goto LABEL_115;
  WebCore::Node::removedLastRef((WebCore::Node *)v43, v41);
  v60 = v285;
  v303 = v286;
  v304 = v287;
  v285 = 0;
  if (v60)
  {
    if (*((_DWORD *)v60 + 6) == 2)
    {
      if ((*((_WORD *)v60 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v60, v59);
    }
    else
    {
      *((_DWORD *)v60 + 6) -= 2;
    }
  }
LABEL_116:
  WebCore::CompositeEditCommand::positionAvoidingSpecialElementBoundary((unsigned int *)v2, (const WebCore::Position *)&v302, (uint64_t)&v285);
  v45 = v285;
  v285 = 0;
  v46 = v302;
  v302 = (unsigned int *)v45;
  if (!v46)
  {
LABEL_119:
    v303 = v286;
    v304 = v287;
    goto LABEL_120;
  }
  if (v46[6] != 2)
  {
    v46[6] -= 2;
    goto LABEL_119;
  }
  if ((*((_WORD *)v46 + 15) & 0x400) != 0)
    goto LABEL_119;
  WebCore::Node::removedLastRef((WebCore::Node *)v46, v44);
  v58 = v285;
  v303 = v286;
  v304 = v287;
  v285 = 0;
  if (v58)
  {
    if (*((_DWORD *)v58 + 6) == 2)
    {
      if ((*((_WORD *)v58 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v58, v57);
    }
    else
    {
      *((_DWORD *)v58 + 6) -= 2;
    }
  }
LABEL_120:
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v302, (uint64_t)&v289);
  v292 = 1;
  if (!v10)
  {
    v61 = v289;
    if (!v289)
      goto LABEL_83;
    *((_DWORD *)v289 + 6) += 2;
    v285 = v61;
    v286 = v290;
    v287 = v291;
    v288 = 0;
    if (!WebCore::inSameLine((WebCore *)&v289, (const WebCore::VisiblePosition *)&v285, v47))
      v292 = 0;
    v62 = v285;
    v285 = 0;
    if (v62)
    {
      if (*((_DWORD *)v62 + 6) == 2)
      {
        if ((*((_WORD *)v62 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v62, v34);
      }
      else
      {
        *((_DWORD *)v62 + 6) -= 2;
      }
    }
  }
  v48 = v289;
  if (v289)
  {
    v49 = *((_DWORD *)v289 + 6);
    *((_DWORD *)v289 + 6) = v49 + 2;
    v50 = v291 & 7;
    if (v50 <= 4)
    {
      v51 = 1 << v50;
      v52 = v48;
      if ((v51 & 0x19) != 0 || (v52 = (WebCore::Node *)*((_QWORD *)v48 + 4)) != 0)
      {
        if (v19 == v52)
        {
          v54 = 1;
          if (v49)
          {
LABEL_187:
            *((_DWORD *)v48 + 6) = v49;
LABEL_188:
            if (!v54)
              goto LABEL_446;
            WebCore::InsertParagraphSeparatorCommand::calculateStyleBeforeInsertion((WebCore::InsertParagraphSeparatorCommand *)v2, (const WebCore::Position *)&v302);
            if (WebCore::CompositeEditCommand::breakOutOfEmptyListItem((WebCore::CompositeEditCommand *)v2))
              goto LABEL_446;
            v64 = v289;
            if (v289
               ? WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance
               : 0)
            {
              WebCore::startOfBlock((unsigned int *)&v289, 0, &v285);
              v66 = WebCore::operator==((uint64_t *)&v289, (uint64_t *)&v285);
              v67 = v285;
              v285 = 0;
              if (v67)
              {
                if (*((_DWORD *)v67 + 6) == 2)
                {
                  if ((*((_WORD *)v67 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v67, v34);
                }
                else
                {
                  *((_DWORD *)v67 + 6) -= 2;
                }
              }
              v64 = v289;
            }
            else
            {
              v66 = 0;
            }
            if (v64
               ? WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance
               : 0)
            {
              WebCore::endOfBlock((unsigned int *)&v289, 0, &v285);
              v69 = WebCore::operator==((uint64_t *)&v289, (uint64_t *)&v285);
              v70 = v285;
              v285 = 0;
              if (v70)
              {
                if (*((_DWORD *)v70 + 6) == 2)
                {
                  if ((*((_WORD *)v70 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v70, v34);
                }
                else
                {
                  *((_DWORD *)v70 + 6) -= 2;
                }
              }
            }
            else
            {
              v69 = 0;
            }
            v71 = (WebCore::Node *)v302;
            if (!v302)
              goto LABEL_446;
            v72 = v304 & 7;
            if (v72 > 4)
              goto LABEL_446;
            if (((1 << v72) & 0x19) == 0)
            {
              v71 = (WebCore::Node *)*((_QWORD *)v302 + 4);
              if (!v71)
                goto LABEL_446;
            }
            *((_DWORD *)v71 + 6) += 2;
            v73 = WebCore::Node::computeEditability((uint64_t)v71, 0, 0);
            v74 = *((_DWORD *)v71 + 6) - 2;
            if (!v73)
            {
              if (*((_DWORD *)v71 + 6) != 2)
                goto LABEL_445;
              goto LABEL_404;
            }
            if (*((_DWORD *)v71 + 6) == 2)
            {
              if ((*((_WORD *)v71 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v71, v34);
            }
            else
            {
              *((_DWORD *)v71 + 6) = v74;
            }
            isRootEditableElement = WebCore::Node::isRootEditableElement(v19);
            if (isRootEditableElement)
            {
              WebCore::createDefaultParagraphElement(v11, &v285);
              v71 = v285;
              if (v69)
              {
                if (!v66 || WebCore::lineBreakExistsAtVisiblePosition(&v289, v76))
                  goto LABEL_230;
                WebCore::createDefaultParagraphElement(v11, &v285);
                v77 = v285;
                *((_DWORD *)v285 + 6) += 2;
                v305 = v77;
                *((_DWORD *)v19 + 6) += 2;
                v308 = v19;
                WebCore::CompositeEditCommand::appendNode((WebCore::CompositeEditCommand *)v2, (uint64_t *)&v305, (uint64_t *)&v308);
                if (v308)
                {
                  if (*((_DWORD *)v308 + 6) == 2)
                  {
                    if ((*((_WORD *)v308 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v308, v78);
                  }
                  else
                  {
                    *((_DWORD *)v308 + 6) -= 2;
                  }
                }
                if (v305)
                {
                  if (*((_DWORD *)v305 + 6) == 2)
                  {
                    if ((*((_WORD *)v305 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v305, v78);
                  }
                  else
                  {
                    *((_DWORD *)v305 + 6) -= 2;
                  }
                }
                v308 = v77;
                WebCore::CompositeEditCommand::appendBlockPlaceholder((WebCore::CompositeEditCommand *)v2, &v308, (uint64_t *)&v305);
                v79 = v305;
                if (v305)
                {
                  if (*((_DWORD *)v305 + 6) == 2)
                  {
                    if ((*((_WORD *)v305 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v305, v34);
                  }
                  else
                  {
                    *((_DWORD *)v305 + 6) -= 2;
                  }
                }
                if (v308)
                {
                  if (*((_DWORD *)v308 + 6) == 2)
                  {
                    if ((*((_WORD *)v308 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v308, v34);
                  }
                  else
                  {
                    *((_DWORD *)v308 + 6) -= 2;
                  }
                }
                if (v79)
                {
LABEL_230:
                  *((_DWORD *)v71 + 6) += 2;
                  v285 = v71;
                  v80 = (WebCore::Node *)v300;
                  *((_DWORD *)v300 + 6) += 2;
                  v305 = v80;
                  WebCore::CompositeEditCommand::appendNode((WebCore::CompositeEditCommand *)v2, (uint64_t *)&v285, (uint64_t *)&v305);
                  if (v305)
                  {
                    if (*((_DWORD *)v305 + 6) == 2)
                    {
                      if ((*((_WORD *)v305 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v305, v81);
                    }
                    else
                    {
                      *((_DWORD *)v305 + 6) -= 2;
                    }
                  }
                  v82 = v285;
                  if (v285)
                  {
                    if (*((_DWORD *)v285 + 6) != 2)
                    {
                      *((_DWORD *)v285 + 6) -= 2;
                      goto LABEL_417;
                    }
                    if ((*((_WORD *)v285 + 15) & 0x400) == 0)
LABEL_506:
                      WebCore::Node::removedLastRef(v82, v81);
                  }
                  goto LABEL_417;
                }
                goto LABEL_443;
              }
LABEL_266:
              if (!v66)
              {
                WebCore::previousVisuallyDistinctCandidate(&v289, (uint64_t)&v308);
                if (WebCore::Position::atStartOfTree((WebCore::Position *)&v308))
                {
                  v305 = 0;
                  v306 = 0;
                  v307 = 0;
                }
                else
                {
                  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v308, (uint64_t)&v285);
                  v305 = v285;
                  LODWORD(v306) = v286;
                  BYTE4(v306) = v287;
                }
                LOBYTE(v307) = 1;
                v98 = v308;
                v308 = 0;
                if (v98)
                {
                  if (*((_DWORD *)v98 + 6) == 2)
                  {
                    if ((*((_WORD *)v98 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v98, v96);
                  }
                  else
                  {
                    *((_DWORD *)v98 + 6) -= 2;
                  }
                }
                v100 = WebCore::inSameBlock((WebCore *)&v289, (const WebCore::VisiblePosition *)&v305, v97);
                v101 = v305;
                v305 = 0;
                if (v101)
                {
                  if (*((_DWORD *)v101 + 6) == 2)
                  {
                    if ((*((_WORD *)v101 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v101, v99);
                  }
                  else
                  {
                    *((_DWORD *)v101 + 6) -= 2;
                  }
                }
                if (v100)
                {
                  if (v289)
                    v102 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
                  else
                    v102 = 0;
                  if (!v102)
                    goto LABEL_601;
                  WebCore::startOfParagraph((uint64_t)&v289, 1, &v285);
                  v104 = WebCore::operator==((uint64_t *)&v289, (uint64_t *)&v285);
                  v105 = v285;
                  v285 = 0;
                  if (v105)
                  {
                    if (*((_DWORD *)v105 + 6) == 2)
                    {
                      if ((*((_WORD *)v105 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v105, v103);
                    }
                    else
                    {
                      *((_DWORD *)v105 + 6) -= 2;
                    }
                  }
                  if (!v104)
                    goto LABEL_601;
                  v106 = bmalloc::api::isoAllocate();
                  v107 = v106;
                  *(_OWORD *)(v106 + 8) = xmmword_1968BC9D0;
                  *(_DWORD *)(v106 + 28) = 4124;
                  *(_QWORD *)(v106 + 32) = 0;
                  *(_QWORD *)(v106 + 40) = (char *)v11 + 96;
                  *(_OWORD *)(v106 + 48) = 0u;
                  *(_OWORD *)(v106 + 64) = 0u;
                  ++*((_DWORD *)v11 + 831);
                  *(_QWORD *)(v106 + 80) = 0;
                  *(_QWORD *)(v106 + 88) = 0;
                  v108 = WebCore::HTMLNames::brTag;
                  if (WebCore::HTMLNames::brTag)
                    ++*(_DWORD *)WebCore::HTMLNames::brTag;
                  *(_QWORD *)(v106 + 96) = v108;
                  *(_QWORD *)(v106 + 104) = 0;
                  *(_QWORD *)v106 = off_1E33B4C28;
                  *(_DWORD *)(v106 + 24) = 4;
                  v285 = (WebCore::Node *)v106;
                  WebCore::CompositeEditCommand::insertNodeAt((unsigned int *)v2, (uint64_t *)&v285, (WebCore::Position *)&v302);
                  v109 = v285;
                  v285 = 0;
                  if (v109)
                  {
                    if (*((_DWORD *)v109 + 6) == 2)
                    {
                      if ((*((_WORD *)v109 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v109, v34);
                    }
                    else
                    {
                      *((_DWORD *)v109 + 6) -= 2;
                    }
                  }
                  if (!*(_QWORD *)(v107 + 32))
                    goto LABEL_597;
                  WebCore::positionInParentAfterNode(v107, (WebCore::Node *)v34, (uint64_t)&v285);
                  v110 = v285;
                  v285 = 0;
                  v111 = v302;
                  v302 = (unsigned int *)v110;
                  if (v111)
                  {
                    if (v111[6] == 2)
                    {
                      if ((*((_WORD *)v111 + 15) & 0x400) == 0)
                      {
                        WebCore::Node::removedLastRef((WebCore::Node *)v111, v34);
                        v167 = v285;
                        v303 = v286;
                        v304 = v287;
                        v285 = 0;
                        if (v167)
                        {
                          if (*((_DWORD *)v167 + 6) == 2)
                          {
                            if ((*((_WORD *)v167 + 15) & 0x400) == 0)
                              WebCore::Node::removedLastRef(v167, v34);
                          }
                          else
                          {
                            *((_DWORD *)v167 + 6) -= 2;
                          }
                        }
                        goto LABEL_295;
                      }
                    }
                    else
                    {
                      v111[6] -= 2;
                    }
                  }
                  v303 = v286;
                  v304 = v287;
LABEL_295:
                  v112 = v289;
                  if (v289)
                  {
                    v113 = *((_DWORD *)v289 + 6) + 2;
                    *((_DWORD *)v289 + 6) = v113;
                  }
                  else
                  {
                    v113 = MEMORY[0x18];
                  }
                  v114 = (_BYTE *)(*((_QWORD *)v112 + 8) & 0xFFFFFFFFFFFFLL);
                  v115 = v113 - 2;
                  if (v115)
                  {
                    *((_DWORD *)v112 + 6) = v115;
                  }
                  else if ((*((_WORD *)v112 + 15) & 0x400) == 0)
                  {
                    WebCore::Node::removedLastRef(v112, v34);
                  }
                  if (!v114 || v114[46] != 17 || (v114[52] & 7) == 2 && (v114[53] & 1) != 0)
                  {
                    v116 = 1;
                    goto LABEL_598;
                  }
                  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v302, (uint64_t)&v305);
                  LOBYTE(v307) = 1;
                  WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v285, (const WebCore::VisiblePosition *)&v305, (*(unsigned __int8 *)(v2 + 226) >> 1) & 1);
                  WebCore::EditCommand::setEndingSelection((uint64_t *)v2, (const WebCore::VisibleSelection *)&v285);
                  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v285);
                  if (v305)
                  {
                    if (*((_DWORD *)v305 + 6) == 2)
                    {
                      if ((*((_WORD *)v305 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v305, v34);
                    }
                    else
                    {
                      *((_DWORD *)v305 + 6) -= 2;
                    }
                  }
LABEL_597:
                  v116 = 0;
LABEL_598:
                  if (*(_DWORD *)(v107 + 24) == 2)
                  {
                    if ((*(_WORD *)(v107 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v107, v34);
                  }
                  else
                  {
                    *(_DWORD *)(v107 + 24) -= 2;
                  }
                  if (!v116)
                    goto LABEL_443;
LABEL_601:
                  WebCore::Position::downstream((uint64_t)&v302, (WebCore::Node *)1, (uint64_t)&v285);
                  v179 = v285;
                  v285 = 0;
                  v180 = v302;
                  v302 = (unsigned int *)v179;
                  if (v180)
                  {
                    if (v180[6] == 2)
                    {
                      if ((*((_WORD *)v180 + 15) & 0x400) == 0)
                      {
                        WebCore::Node::removedLastRef((WebCore::Node *)v180, v178);
                        v238 = v285;
                        v303 = v286;
                        v304 = v287;
                        v285 = 0;
                        if (v238)
                        {
                          if (*((_DWORD *)v238 + 6) == 2)
                          {
                            if ((*((_WORD *)v238 + 15) & 0x400) == 0)
                              WebCore::Node::removedLastRef(v238, v237);
                          }
                          else
                          {
                            *((_DWORD *)v238 + 6) -= 2;
                          }
                        }
LABEL_605:
                        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v302, (uint64_t)&v285);
                        v288 = 1;
                        v181 = v285;
                        if (v285)
                          *((_DWORD *)v285 + 6) += 2;
                        v308 = v181;
                        LODWORD(v309) = v286;
                        BYTE4(v309) = v287;
                        WebCore::CompositeEditCommand::positionOutsideTabSpan((WebCore::CompositeEditCommand *)v2, (const WebCore::Position *)&v308, (uint64_t)&v305);
                        v182 = v305;
                        v305 = 0;
                        v183 = v302;
                        v302 = (unsigned int *)v182;
                        if (v183)
                        {
                          if (v183[6] == 2)
                          {
                            if ((*((_WORD *)v183 + 15) & 0x400) == 0)
                            {
                              WebCore::Node::removedLastRef((WebCore::Node *)v183, v34);
                              v239 = v305;
                              v303 = v306;
                              v304 = BYTE4(v306);
                              v305 = 0;
                              if (v239)
                              {
                                if (*((_DWORD *)v239 + 6) == 2)
                                {
                                  if ((*((_WORD *)v239 + 15) & 0x400) == 0)
                                    WebCore::Node::removedLastRef(v239, v34);
                                }
                                else
                                {
                                  *((_DWORD *)v239 + 6) -= 2;
                                }
                              }
LABEL_611:
                              v184 = v308;
                              v308 = 0;
                              if (v184)
                              {
                                if (*((_DWORD *)v184 + 6) == 2)
                                {
                                  if ((*((_WORD *)v184 + 15) & 0x400) == 0)
                                    WebCore::Node::removedLastRef(v184, v34);
                                }
                                else
                                {
                                  *((_DWORD *)v184 + 6) -= 2;
                                }
                              }
                              if (v181)
                              {
                                if (*((_DWORD *)v181 + 6) == 2)
                                {
                                  if ((*((_WORD *)v181 + 15) & 0x400) == 0)
                                    WebCore::Node::removedLastRef(v181, v34);
                                }
                                else
                                {
                                  *((_DWORD *)v181 + 6) -= 2;
                                }
                              }
                              if (!v302)
                                goto LABEL_443;
                              if (((*(uint64_t (**)(unsigned int *))(*(_QWORD *)v302 + 208))(v302) & 1) == 0)
                              {
                                if (WebCore::Position::atLastEditingPositionForNode((WebCore::Position *)&v302, v185))
                                {
                                  WebCore::Position::downstream((uint64_t)&v302, (WebCore::Node *)1, (uint64_t)&v285);
                                }
                                else
                                {
                                  v188 = v302;
                                  if (v302)
                                  {
                                    if ((v304 & 7) != 0)
                                    {
                                      switch(v304 & 7)
                                      {
                                        case 1:
                                        case 3:
                                          goto LABEL_624;
                                        case 2:
                                        case 4:
                                          v270 = v302[6] + 2;
                                          v302[6] = v270;
                                          v271 = *((_WORD *)v188 + 14);
                                          if ((v271 & 1) != 0)
                                          {
                                            v277 = *((_QWORD *)v188 + 10);
                                            if (v277)
                                              v273 = *(_DWORD *)(v277 + 4);
                                            else
                                              v273 = 0;
                                          }
                                          else if ((v271 & 4) != 0 && (v272 = *((_QWORD *)v188 + 10)) != 0)
                                          {
                                            v273 = 0;
                                            do
                                            {
                                              ++v273;
                                              v272 = *(_QWORD *)(v272 + 56);
                                            }
                                            while (v272);
                                          }
                                          else
                                          {
                                            v273 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v188 + 208))(v188) ^ 1;
                                            v270 = v188[6];
                                          }
                                          v274 = v270 - 2;
                                          if (v274)
                                          {
                                            v188[6] = v274;
                                          }
                                          else if ((*((_WORD *)v188 + 15) & 0x400) == 0)
                                          {
                                            WebCore::Node::removedLastRef((WebCore::Node *)v188, v186);
                                          }
                                          if (!v273)
                                            goto LABEL_624;
                                          break;
                                        default:
                                          goto LABEL_629;
                                      }
                                      goto LABEL_629;
                                    }
                                    if (v303)
                                      goto LABEL_629;
                                  }
LABEL_624:
                                  WebCore::Position::upstream((uint64_t)&v302, (WebCore::Node *)1, (uint64_t)&v285);
                                }
                                v189 = v285;
                                v285 = 0;
                                v190 = v302;
                                v302 = (unsigned int *)v189;
                                if (!v190)
                                {
LABEL_628:
                                  v303 = v286;
                                  v304 = v287;
                                  goto LABEL_629;
                                }
                                if (v190[6] != 2)
                                {
                                  v190[6] -= 2;
                                  goto LABEL_628;
                                }
                                if ((*((_WORD *)v190 + 15) & 0x400) != 0)
                                  goto LABEL_628;
                                WebCore::Node::removedLastRef((WebCore::Node *)v190, v187);
                                v267 = v285;
                                v303 = v286;
                                v304 = v287;
                                v285 = 0;
                                if (v267)
                                {
                                  if (*((_DWORD *)v267 + 6) == 2)
                                  {
                                    if ((*((_WORD *)v267 + 15) & 0x400) == 0)
                                      WebCore::Node::removedLastRef(v267, v266);
                                  }
                                  else
                                  {
                                    *((_DWORD *)v267 + 6) -= 2;
                                  }
                                }
                              }
LABEL_629:
                              WebCore::Position::leadingWhitespacePosition((unsigned int *)&v302, 1, 0, (uint64_t)&v308);
                              v191 = v308;
                              if (v308)
                              {
                                v192 = *((_WORD *)v308 + 14);
                                if ((v192 & 2) != 0)
                                {
                                  v193 = *((_DWORD *)v308 + 6);
                                  v194 = v193 + 2;
                                  *((_DWORD *)v308 + 6) = v193 + 2;
                                  if ((v309 & 0x800000000) == 0 && ((v195 = BYTE4(v309) & 7, v195 == 4) || v195 == 2))
                                  {
                                    *((_DWORD *)v191 + 6) = v193 + 4;
                                    if ((v192 & 1) != 0)
                                    {
                                      v275 = *((_QWORD *)v191 + 10);
                                      if (v275)
                                        v197 = *(_DWORD *)(v275 + 4);
                                      else
                                        v197 = 0;
                                    }
                                    else if ((v192 & 4) != 0 && (v196 = *((_QWORD *)v191 + 10)) != 0)
                                    {
                                      v197 = 0;
                                      do
                                      {
                                        ++v197;
                                        v196 = *(_QWORD *)(v196 + 56);
                                      }
                                      while (v196);
                                    }
                                    else
                                    {
                                      v197 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v191 + 208))(v191) ^ 1;
                                      v194 = *((_DWORD *)v191 + 6) - 2;
                                    }
                                    if (v194)
                                    {
                                      *((_DWORD *)v191 + 6) = v194;
                                    }
                                    else if ((*((_WORD *)v191 + 15) & 0x400) == 0)
                                    {
                                      WebCore::Node::removedLastRef(v191, v34);
                                    }
                                  }
                                  else
                                  {
                                    v197 = v309;
                                  }
                                  {
                                    WTF::String::String();
                                  }
                                  WebCore::CompositeEditCommand::replaceTextInNodePreservingMarkers((WebCore::CompositeEditCommand *)v2, v191, v197, 1, (const WTF::String *)&WebCore::nonBreakingSpaceString(void)::nonBreakingSpaceString);
                                  if (*((_DWORD *)v191 + 6) == 2)
                                  {
                                    if ((*((_WORD *)v191 + 15) & 0x400) == 0)
                                      WebCore::Node::removedLastRef(v191, v34);
                                  }
                                  else
                                  {
                                    *((_DWORD *)v191 + 6) -= 2;
                                  }
                                }
                              }
                              v282 = 0;
                              v283 = 0;
                              v284 &= 0xF0u;
                              v198 = v302;
                              if (v302)
                              {
                                v199 = v304 & 7;
                                if (v199 <= 4
                                  && (((1 << v199) & 0x19) != 0 || (v198 = (unsigned int *)*((_QWORD *)v302 + 4)) != 0)
                                  && (v198[7] & 2) != 0)
                                {
                                  v200 = v198[6] + 2;
                                  v198[6] = v200;
                                  if (!v199)
                                  {
                                    v205 = *((_QWORD *)v198 + 10);
                                    if (v205)
                                    {
                                      if ((int)v303 >= 1 && v303 < *(_DWORD *)(v205 + 4))
                                      {
                                        WebCore::CompositeEditCommand::splitTextNode((WebCore::CompositeEditCommand *)v2, (WebCore::Text *)v198, v303);
                                        v206 = *((_WORD *)v198 + 14);
                                        v198[6] += 2;
                                        if ((v206 & 1) != 0)
                                          v207 = 0;
                                        else
                                          v207 = 3;
                                        v208 = v282;
                                        v282 = (WebCore::Node *)v198;
                                        if (v208)
                                        {
                                          if (*((_DWORD *)v208 + 6) == 2)
                                          {
                                            if ((*((_WORD *)v208 + 15) & 0x400) == 0)
                                              WebCore::Node::removedLastRef(v208, v34);
                                          }
                                          else
                                          {
                                            *((_DWORD *)v208 + 6) -= 2;
                                          }
                                        }
                                        v283 = 0;
                                        v284 = v207;
                                        v209 = *((_QWORD *)v198 + 6) & 0xFFFFFFFFFFFFLL;
                                        if (!v209)
                                        {
                                          if (v198[6] == 2)
                                          {
                                            if ((*((_WORD *)v198 + 15) & 0x400) == 0)
                                              WebCore::Node::removedLastRef((WebCore::Node *)v198, v34);
                                          }
                                          else
                                          {
                                            v198[6] -= 2;
                                          }
                                          goto LABEL_864;
                                        }
                                        v210 = v303;
                                        *(_DWORD *)((*((_QWORD *)v198 + 6) & 0xFFFFFFFFFFFFLL) + 0x18) += 2;
                                        v211 = v302;
                                        v302 = (unsigned int *)v209;
                                        if (v211)
                                        {
                                          if (v211[6] == 2)
                                          {
                                            if ((*((_WORD *)v211 + 15) & 0x400) == 0)
                                              WebCore::Node::removedLastRef((WebCore::Node *)v211, v34);
                                          }
                                          else
                                          {
                                            v211[6] -= 2;
                                          }
                                        }
                                        v303 = v210;
                                        if ((v304 & 8) != 0)
                                        {
                                          if (v302
                                            && ((*(uint64_t (**)(unsigned int *))(*(_QWORD *)v302 + 208))(v302) & 1) == 0)
                                          {
                                            if (v210)
                                              v212 = 2;
                                            else
                                              v212 = 1;
                                          }
                                          else
                                          {
                                            v212 = 0;
                                          }
                                          v304 = v304 & 0xF8 | v212;
                                        }
                                        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v302, (uint64_t)&v285);
                                        v213 = v289;
                                        v289 = v285;
                                        if (v213)
                                        {
                                          if (*((_DWORD *)v213 + 6) == 2)
                                          {
                                            if ((*((_WORD *)v213 + 15) & 0x400) == 0)
                                              WebCore::Node::removedLastRef(v213, v34);
                                          }
                                          else
                                          {
                                            *((_DWORD *)v213 + 6) -= 2;
                                          }
                                        }
                                        v290 = v286;
                                        v291 = v287;
                                        v292 = 1;
                                        v200 = v198[6];
                                      }
                                    }
                                  }
                                  v201 = v200 - 2;
                                  if (v201)
                                  {
                                    v198[6] = v201;
                                  }
                                  else if ((*((_WORD *)v198 + 15) & 0x400) == 0)
                                  {
                                    WebCore::Node::removedLastRef((WebCore::Node *)v198, v34);
                                  }
                                }
                              }
                              v202 = (WebCore::Node *)v300;
                              if (!v300[4])
                              {
LABEL_864:
                                v263 = v282;
                                v282 = 0;
                                if (v263)
                                {
                                  if (*((_DWORD *)v263 + 6) == 2)
                                  {
                                    if ((*((_WORD *)v263 + 15) & 0x400) == 0)
                                      WebCore::Node::removedLastRef(v263, v34);
                                  }
                                  else
                                  {
                                    *((_DWORD *)v263 + 6) -= 2;
                                  }
                                }
                                v160 = v308;
                                v308 = 0;
                                if (!v160)
                                  goto LABEL_443;
                                if (*((_DWORD *)v160 + 6) != 2)
                                {
                                  *((_DWORD *)v160 + 6) -= 2;
                                  goto LABEL_443;
                                }
                                if ((*((_WORD *)v160 + 15) & 0x400) != 0)
                                {
LABEL_443:
                                  if (!v71)
                                    goto LABEL_446;
                                  v74 = *((_DWORD *)v71 + 6) - 2;
                                  if (*((_DWORD *)v71 + 6) != 2)
                                  {
LABEL_445:
                                    *((_DWORD *)v71 + 6) = v74;
LABEL_446:
                                    v157 = v289;
                                    v289 = 0;
                                    if (v157)
                                    {
                                      if (*((_DWORD *)v157 + 6) == 2)
                                      {
                                        if ((*((_WORD *)v157 + 15) & 0x400) == 0)
                                          WebCore::Node::removedLastRef(v157, v34);
                                      }
                                      else
                                      {
                                        *((_DWORD *)v157 + 6) -= 2;
                                      }
                                    }
                                    goto LABEL_83;
                                  }
LABEL_404:
                                  if ((*((_WORD *)v71 + 15) & 0x400) == 0)
                                    WebCore::Node::removedLastRef(v71, v34);
                                  goto LABEL_446;
                                }
LABEL_470:
                                WebCore::Node::removedLastRef(v160, v34);
                                goto LABEL_443;
                              }
                              if (isRootEditableElement)
                              {
                                *((_DWORD *)v71 + 6) += 2;
                                v285 = v71;
                                *((_DWORD *)v202 + 6) += 2;
                                v305 = v202;
                                WebCore::CompositeEditCommand::appendNode((WebCore::CompositeEditCommand *)v2, (uint64_t *)&v285, (uint64_t *)&v305);
                                if (v305)
                                {
                                  if (*((_DWORD *)v305 + 6) == 2)
                                  {
                                    if ((*((_WORD *)v305 + 15) & 0x400) == 0)
                                      WebCore::Node::removedLastRef(v305, v203);
                                  }
                                  else
                                  {
                                    *((_DWORD *)v305 + 6) -= 2;
                                  }
                                }
                                v204 = v285;
                                if (!v285)
                                {
LABEL_684:
                                  v214 = (uint64_t)v301;
                                  WebCore::Document::updateLayout((uint64_t)v301, 2u, 0);
                                  if (v289)
                                    v215 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
                                  else
                                    v215 = 0;
                                  if (v215)
                                  {
                                    WebCore::endOfParagraph((WebCore::Node *)&v289, 1, &v285);
                                    v217 = WebCore::operator==((uint64_t *)&v289, (uint64_t *)&v285);
                                    v218 = v285;
                                    v285 = 0;
                                    if (v218)
                                    {
                                      if (*((_DWORD *)v218 + 6) == 2)
                                      {
                                        if ((*((_WORD *)v218 + 15) & 0x400) == 0)
                                          WebCore::Node::removedLastRef(v218, v216);
                                      }
                                      else
                                      {
                                        *((_DWORD *)v218 + 6) -= 2;
                                      }
                                    }
                                    if (v217 && !WebCore::lineBreakExistsAtVisiblePosition(&v289, v216))
                                    {
                                      v219 = bmalloc::api::isoAllocate();
                                      *(_OWORD *)(v219 + 8) = xmmword_1968BC9D0;
                                      *(_QWORD *)(v219 + 24) = 0x101C00000002;
                                      *(_QWORD *)(v219 + 32) = 0;
                                      *(_QWORD *)(v219 + 40) = v214 + 96;
                                      *(_OWORD *)(v219 + 48) = 0u;
                                      *(_OWORD *)(v219 + 64) = 0u;
                                      ++*(_DWORD *)(v214 + 3324);
                                      *(_QWORD *)(v219 + 80) = 0;
                                      *(_QWORD *)(v219 + 88) = 0;
                                      v220 = WebCore::HTMLNames::brTag;
                                      if (WebCore::HTMLNames::brTag)
                                        ++*(_DWORD *)WebCore::HTMLNames::brTag;
                                      *(_QWORD *)(v219 + 96) = v220;
                                      *(_QWORD *)(v219 + 104) = 0;
                                      *(_QWORD *)v219 = off_1E33B4C28;
                                      v285 = (WebCore::Node *)v219;
                                      *((_DWORD *)v71 + 6) += 2;
                                      v305 = v71;
                                      WebCore::CompositeEditCommand::appendNode((WebCore::CompositeEditCommand *)v2, (uint64_t *)&v285, (uint64_t *)&v305);
                                      if (v305)
                                      {
                                        if (*((_DWORD *)v305 + 6) == 2)
                                        {
                                          if ((*((_WORD *)v305 + 15) & 0x400) == 0)
                                            WebCore::Node::removedLastRef(v305, v221);
                                        }
                                        else
                                        {
                                          *((_DWORD *)v305 + 6) -= 2;
                                        }
                                      }
                                      if (v285)
                                      {
                                        if (*((_DWORD *)v285 + 6) == 2)
                                        {
                                          if ((*((_WORD *)v285 + 15) & 0x400) == 0)
                                            WebCore::Node::removedLastRef(v285, v221);
                                        }
                                        else
                                        {
                                          *((_DWORD *)v285 + 6) -= 2;
                                        }
                                      }
                                    }
                                  }
                                  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v302, (uint64_t)&v285);
                                  v288 = 1;
                                  *((_DWORD *)v71 + 6) += 2;
                                  v279 = v71;
                                  v280 = 0;
                                  v281 = v281 & 0xF0 | 1;
                                  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v279, (uint64_t)&v305);
                                  LOBYTE(v307) = 1;
                                  v223 = WebCore::operator==((uint64_t *)&v285, (uint64_t *)&v305);
                                  v224 = v305;
                                  v305 = 0;
                                  if (v224)
                                  {
                                    if (*((_DWORD *)v224 + 6) == 2)
                                    {
                                      if ((*((_WORD *)v224 + 15) & 0x400) == 0)
                                        WebCore::Node::removedLastRef(v224, v222);
                                    }
                                    else
                                    {
                                      *((_DWORD *)v224 + 6) -= 2;
                                    }
                                  }
                                  v279 = 0;
                                  if (*((_DWORD *)v71 + 6) == 2)
                                  {
                                    if ((*((_WORD *)v71 + 15) & 0x400) == 0)
                                      WebCore::Node::removedLastRef(v71, v222);
                                  }
                                  else
                                  {
                                    *((_DWORD *)v71 + 6) -= 2;
                                  }
                                  v225 = v285;
                                  v285 = 0;
                                  if (v225)
                                  {
                                    if (*((_DWORD *)v225 + 6) == 2)
                                    {
                                      if ((*((_WORD *)v225 + 15) & 0x400) == 0)
                                        WebCore::Node::removedLastRef(v225, v222);
                                    }
                                    else
                                    {
                                      *((_DWORD *)v225 + 6) -= 2;
                                    }
                                  }
                                  if (v223)
                                    goto LABEL_828;
                                  v226 = v302;
                                  if (v302)
                                  {
                                    v227 = v304 & 7;
                                    if (v227 > 4)
                                    {
                                      v228 = 0;
                                    }
                                    else
                                    {
                                      v228 = (WebCore::Node *)v302;
                                      if (((1 << v227) & 0x19) == 0)
                                        v228 = (WebCore::Node *)*((_QWORD *)v302 + 4);
                                    }
                                    v229 = (WebCore::Node *)v300;
                                    if (v300 == (WebCore::Node **)v228)
                                    {
                                      switch(v304 & 7)
                                      {
                                        case 0:
                                          if ((v302[7] & 4) == 0)
                                            goto LABEL_827;
                                          v226 = (unsigned int *)*((_QWORD *)v302 + 10);
                                          if (v303 && v226)
                                          {
                                            v235 = v303 - 1;
                                            do
                                            {
                                              v226 = (unsigned int *)*((_QWORD *)v226 + 7);
                                              v136 = v235-- != 0;
                                              v236 = v136;
                                            }
                                            while (v226 && (v236 & 1) != 0);
                                          }
                                          goto LABEL_810;
                                        case 1:
                                          goto LABEL_811;
                                        case 2:
                                          v249 = (unsigned int **)(v302 + 14);
                                          goto LABEL_809;
                                        case 3:
                                          if ((v302[7] & 4) == 0)
                                            goto LABEL_827;
                                          v249 = (unsigned int **)(v302 + 20);
LABEL_809:
                                          v226 = *v249;
LABEL_810:
                                          if (!v226)
                                            goto LABEL_827;
LABEL_811:
                                          v226[6] += 2;
                                          WebCore::CompositeEditCommand::moveRemainingSiblingsToNewParent(v2, (WebCore::Node *)v226, v71, v71);
                                          break;
                                        default:
                                          goto LABEL_827;
                                      }
                                      goto LABEL_812;
                                    }
                                    if (v227 <= 4)
                                    {
                                      if (((1 << v227) & 0x19) != 0
                                        || (v226 = (unsigned int *)*((_QWORD *)v302 + 4)) != 0)
                                      {
                                        v226[6] += 2;
                                      }
LABEL_718:
                                      v230 = *((_WORD *)v226 + 14);
                                      if ((v230 & 2) == 0)
                                        goto LABEL_754;
                                      v231 = v303;
                                      v232 = (WebCore::RenderText *)(*((_QWORD *)v226 + 8) & 0xFFFFFFFFFFFFLL);
                                      if (v232)
                                      {
                                        if ((*(_BYTE *)((*((_QWORD *)v226 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
                                        {
                                          __break(0xC471u);
                                          JUMPOUT(0x195B01CE4);
                                        }
                                        v234 = WebCore::RenderText::caretMaxOffset(v232, (WebCore::RenderObject *)v222);
                                      }
                                      else if ((v230 & 1) != 0)
                                      {
                                        v276 = *((_QWORD *)v226 + 10);
                                        v234 = v276 ? *(_DWORD *)(v276 + 4) : 0;
                                      }
                                      else if ((v230 & 4) != 0 && (v233 = *((_QWORD *)v226 + 10)) != 0)
                                      {
                                        v234 = 0;
                                        do
                                        {
                                          ++v234;
                                          v233 = *(_QWORD *)(v233 + 56);
                                        }
                                        while (v233);
                                      }
                                      else
                                      {
                                        v234 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v226 + 208))(v226) ^ 1;
                                      }
                                      if (v231 < v234)
                                      {
LABEL_754:
                                        v240 = v226;
                                        goto LABEL_755;
                                      }
                                      if ((v226[7] & 4) == 0 || (v240 = (unsigned int *)*((_QWORD *)v226 + 10)) == 0)
                                      {
                                        if (v226 == (unsigned int *)v229)
                                        {
LABEL_797:
                                          v240 = 0;
                                          goto LABEL_824;
                                        }
                                        v240 = (unsigned int *)*((_QWORD *)v226 + 7);
                                        if (!v240)
                                        {
                                          v250 = (WebCore::Node *)v226;
                                          do
                                          {
                                            v250 = (WebCore::Node *)*((_QWORD *)v250 + 4);
                                            if (!v250 || v250 == v229)
                                              goto LABEL_797;
                                            v240 = (unsigned int *)*((_QWORD *)v250 + 7);
                                          }
                                          while (!v240);
                                        }
                                      }
                                      v240[6] += 2;
LABEL_824:
                                      if (v226[6] == 2)
                                      {
                                        if ((*((_WORD *)v226 + 15) & 0x400) == 0)
                                          WebCore::Node::removedLastRef((WebCore::Node *)v226, v222);
                                      }
                                      else
                                      {
                                        v226[6] -= 2;
                                      }
                                      if (v240)
                                      {
LABEL_755:
                                        WebCore::CompositeEditCommand::splitTreeToNode((unsigned int *)v2, (WebCore::Node *)v240, v229, 0, &v278);
                                        v242 = v278;
                                        v278 = 0;
                                        if (v242)
                                        {
                                          if (*((_DWORD *)v242 + 6) == 2)
                                          {
                                            if ((*((_WORD *)v242 + 15) & 0x400) == 0)
                                              WebCore::Node::removedLastRef(v242, v241);
                                          }
                                          else
                                          {
                                            *((_DWORD *)v242 + 6) -= 2;
                                          }
                                        }
                                        v243 = v300[10];
                                        if (v243)
                                        {
                                          *((_DWORD *)v243 + 6) += 2;
                                          while (1)
                                          {
                                            v226 = (unsigned int *)v243;
                                            WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v302, (uint64_t)&v285);
                                            v288 = 1;
                                            *((_DWORD *)v243 + 6) += 2;
                                            v279 = v243;
                                            v280 = 0;
                                            v281 = v281 & 0xF0 | 1;
                                            WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v279, (uint64_t)&v305);
                                            LOBYTE(v307) = 1;
                                            v245 = WebCore::documentOrder(&v285, &v305, v244);
                                            v247 = v245 != 129 && (char)v245 < 1;
                                            if (v305)
                                            {
                                              if (*((_DWORD *)v305 + 6) == 2)
                                              {
                                                if ((*((_WORD *)v305 + 15) & 0x400) == 0)
                                                  WebCore::Node::removedLastRef(v305, v241);
                                              }
                                              else
                                              {
                                                *((_DWORD *)v305 + 6) -= 2;
                                              }
                                            }
                                            if (v226[6] == 2)
                                            {
                                              if ((*((_WORD *)v226 + 15) & 0x400) == 0)
                                                WebCore::Node::removedLastRef((WebCore::Node *)v226, v241);
                                            }
                                            else
                                            {
                                              v226[6] -= 2;
                                            }
                                            if (v285)
                                            {
                                              if (*((_DWORD *)v285 + 6) == 2)
                                              {
                                                if ((*((_WORD *)v285 + 15) & 0x400) == 0)
                                                  WebCore::Node::removedLastRef(v285, v241);
                                              }
                                              else
                                              {
                                                *((_DWORD *)v285 + 6) -= 2;
                                              }
                                            }
                                            if (v247)
                                              break;
                                            v243 = (WebCore::Node *)*((_QWORD *)v226 + 7);
                                            if (v243)
                                              *((_DWORD *)v243 + 6) += 2;
                                            if (v226[6] == 2)
                                            {
                                              if ((*((_WORD *)v226 + 15) & 0x400) == 0)
                                                WebCore::Node::removedLastRef((WebCore::Node *)v226, v241);
                                            }
                                            else
                                            {
                                              v226[6] -= 2;
                                            }
                                            if (!v243)
                                              goto LABEL_789;
                                          }
                                        }
                                        else
                                        {
LABEL_789:
                                          v226 = 0;
                                        }
                                        if (v240[6] == 2)
                                        {
                                          if ((*((_WORD *)v240 + 15) & 0x400) == 0)
                                            WebCore::Node::removedLastRef((WebCore::Node *)v240, v241);
                                        }
                                        else
                                        {
                                          v240[6] -= 2;
                                        }
                                        WebCore::CompositeEditCommand::moveRemainingSiblingsToNewParent(v2, (WebCore::Node *)v226, v71, v71);
                                        if (!v226)
                                        {
LABEL_828:
                                          if (v282)
                                            v252 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
                                          else
                                            v252 = 0;
                                          if (!v252)
                                            goto LABEL_841;
                                          WebCore::Document::updateLayout((uint64_t)v301, 2u, 0);
                                          if (v282)
                                          {
                                            if ((*((_WORD *)v282 + 14) & 2) != 0)
                                            {
                                              v253 = *((_QWORD *)v282 + 8);
                                              v254 = v253 & 0xFFFFFFFFFFFFLL;
                                              if ((v253 & 0xFFFFFFFFFFFFLL) != 0)
                                              {
                                                if ((*(_BYTE *)((v253 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
                                                {
                                                  __break(0xC471u);
                                                  JUMPOUT(0x195B01C94);
                                                }
                                                ++*(_DWORD *)((v253 & 0xFFFFFFFFFFFFLL) + 0x10);
                                                v264 = WebCore::containsOffset(v254, v283, 0);
                                                v265 = *(_DWORD *)(v254 + 16);
                                                if (!v265)
                                                {
                                                  __break(0xC471u);
                                                  JUMPOUT(0x195B01CB4);
                                                }
                                                *(_DWORD *)(v254 + 16) = v265 - 1;
                                                if (v264)
                                                  goto LABEL_841;
                                              }
                                            }
                                          }
                                          WebCore::CompositeEditCommand::deleteInsignificantTextDownstream((WebCore::CompositeEditCommand *)v2, (const WebCore::Position *)&v282);
                                          v255 = v282;
                                          v256 = *((_WORD *)v282 + 14);
                                          if ((v256 & 2) == 0)
                                            goto LABEL_841;
                                          if ((v284 & 7u) - 1 <= 1)
                                          {
                                            v255 = (WebCore::Node *)*((_QWORD *)v282 + 4);
                                            if ((*((_WORD *)v255 + 14) & 2) != 0)
                                              goto LABEL_838;
                                          }
                                          else if ((v256 & 2) != 0)
                                          {
LABEL_838:
                                            {
                                              WTF::String::String();
                                            }
                                            WebCore::CompositeEditCommand::insertTextIntoNode((WebCore::Node *)v2, v255, 0, (const WTF::String *)&WebCore::nonBreakingSpaceString(void)::nonBreakingSpaceString);
LABEL_841:
                                            v257 = *((_WORD *)v71 + 14);
                                            *((_DWORD *)v71 + 6) += 2;
                                            v279 = v71;
                                            v280 = 0;
                                            if ((v257 & 1) != 0)
                                              v258 = v281 & 0xF0;
                                            else
                                              v258 = v281 & 0xF0 | 3;
                                            v281 = v258;
                                            WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v279, (uint64_t)&v305);
                                            LOBYTE(v307) = 1;
                                            WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v285, (const WebCore::VisiblePosition *)&v305, (*(unsigned __int8 *)(v2 + 226) >> 1) & 1);
                                            WebCore::EditCommand::setEndingSelection((uint64_t *)v2, (const WebCore::VisibleSelection *)&v285);
                                            WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v285);
                                            v259 = v305;
                                            v305 = 0;
                                            if (v259)
                                            {
                                              if (*((_DWORD *)v259 + 6) == 2)
                                              {
                                                if ((*((_WORD *)v259 + 15) & 0x400) == 0)
                                                  WebCore::Node::removedLastRef(v259, v34);
                                              }
                                              else
                                              {
                                                *((_DWORD *)v259 + 6) -= 2;
                                              }
                                            }
                                            v279 = 0;
                                            if (*((_DWORD *)v71 + 6) == 2)
                                            {
                                              if ((*((_WORD *)v71 + 15) & 0x400) == 0)
                                                WebCore::Node::removedLastRef(v71, v34);
                                            }
                                            else
                                            {
                                              *((_DWORD *)v71 + 6) -= 2;
                                            }
                                            if (!v300
                                              || (*((_WORD *)v300 + 14) & 0x10) == 0
                                              || (v260 = *((_QWORD *)v300[12] + 3),
                                                  v260 != *(_QWORD *)(WebCore::HTMLNames::h1Tag + 24))
                                              && v260 != *(_QWORD *)(WebCore::HTMLNames::h2Tag + 24)
                                              && v260 != *(_QWORD *)(WebCore::HTMLNames::h3Tag + 24)
                                              && v260 != *(_QWORD *)(WebCore::HTMLNames::h4Tag + 24)
                                              && v260 != *(_QWORD *)(WebCore::HTMLNames::h5Tag + 24))
                                            {
                                              v261 = *(_QWORD *)(v2 + 280);
                                              if (v261)
                                              {
                                                ++*(_DWORD *)v261;
                                                WebCore::EditingStyle::prepareToApplyAt(v261, v4, 1);
                                                v262 = *(_QWORD *)(v261 + 8);
                                                if (v262 && *(_DWORD *)(v262 + 28)
                                                  || *(float *)(v261 + 20) != *(float *)&WebCore::EditingStyle::NoFontDelta
                                                  || (*(_BYTE *)(v261 + 16) & 0x1E) != 0)
                                                {
                                                  WebCore::CompositeEditCommand::applyStyle((WebCore::CompositeEditCommand *)v2, (WebCore::EditingStyle *)v261, 4);
                                                }
                                                if (*(_DWORD *)v261 == 1)
                                                {
                                                  WebCore::EditingStyle::~EditingStyle((WebCore::EditingStyle *)v261, (WTF::StringImpl *)v34);
                                                  WTF::fastFree(v268, v269);
                                                }
                                                else
                                                {
                                                  --*(_DWORD *)v261;
                                                }
                                              }
                                            }
                                            goto LABEL_864;
                                          }
                                          __break(0xC471u);
                                          JUMPOUT(0x195B01D70);
                                        }
LABEL_812:
                                        if (v226[6] == 2)
                                        {
                                          if ((*((_WORD *)v226 + 15) & 0x400) == 0)
                                            WebCore::Node::removedLastRef((WebCore::Node *)v226, v248);
                                        }
                                        else
                                        {
                                          v226[6] -= 2;
                                        }
                                        goto LABEL_828;
                                      }
LABEL_827:
                                      WebCore::CompositeEditCommand::moveRemainingSiblingsToNewParent(v2, 0, v71, v71);
                                      goto LABEL_828;
                                    }
                                  }
                                  else
                                  {
                                    v229 = (WebCore::Node *)v300;
                                    if (!v300)
                                      goto LABEL_827;
                                  }
                                  v226 = 0;
                                  goto LABEL_718;
                                }
                              }
                              else
                              {
                                *((_DWORD *)v71 + 6) += 2;
                                v285 = v71;
                                WebCore::CompositeEditCommand::insertNodeAfter((unsigned int *)v2, (uint64_t *)&v285, (uint64_t)v202);
                                v204 = v285;
                                v285 = 0;
                                if (!v204)
                                  goto LABEL_684;
                              }
                              if (*((_DWORD *)v204 + 6) == 2)
                              {
                                if ((*((_WORD *)v204 + 15) & 0x400) == 0)
                                  WebCore::Node::removedLastRef(v204, v203);
                              }
                              else
                              {
                                *((_DWORD *)v204 + 6) -= 2;
                              }
                              goto LABEL_684;
                            }
                          }
                          else
                          {
                            v183[6] -= 2;
                          }
                        }
                        v303 = v306;
                        v304 = BYTE4(v306);
                        v305 = 0;
                        goto LABEL_611;
                      }
                    }
                    else
                    {
                      v180[6] -= 2;
                    }
                  }
                  v303 = v286;
                  v304 = v287;
                  goto LABEL_605;
                }
              }
              WebCore::CompositeEditCommand::positionOutsideTabSpan((WebCore::CompositeEditCommand *)v2, (const WebCore::Position *)&v302, (uint64_t)&v285);
              v118 = v285;
              v285 = 0;
              v119 = v302;
              v302 = (unsigned int *)v118;
              if (v119)
              {
                if (v119[6] == 2)
                {
                  if ((*((_WORD *)v119 + 15) & 0x400) == 0)
                  {
                    WebCore::Node::removedLastRef((WebCore::Node *)v119, v117);
                    v162 = v285;
                    v303 = v286;
                    v304 = v287;
                    v285 = 0;
                    if (v162)
                    {
                      if (*((_DWORD *)v162 + 6) == 2)
                      {
                        if ((*((_WORD *)v162 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef(v162, v161);
                      }
                      else
                      {
                        *((_DWORD *)v162 + 6) -= 2;
                      }
                    }
LABEL_306:
                    if (isRootEditableElement || !v66)
                    {
                      if (v66 && isRootEditableElement)
                      {
                        v120 = (WebCore::Node *)v300;
LABEL_309:
                        v121 = (WebCore::Node *)*((_QWORD *)v120 + 10);
                        goto LABEL_311;
                      }
                      v121 = (WebCore::Node *)v302;
                      if (!v302)
                      {
LABEL_313:
                        WebCore::Position::downstream((uint64_t)&v302, (WebCore::Node *)1, (uint64_t)&v285);
                        v123 = v285;
                        v285 = 0;
                        v124 = v302;
                        v302 = (unsigned int *)v123;
                        if (v124)
                        {
                          if (v124[6] == 2)
                          {
                            if ((*((_WORD *)v124 + 15) & 0x400) == 0)
                            {
                              WebCore::Node::removedLastRef((WebCore::Node *)v124, v122);
                              v164 = v285;
                              v303 = v286;
                              v304 = v287;
                              v285 = 0;
                              if (v164)
                              {
                                if (*((_DWORD *)v164 + 6) == 2)
                                {
                                  if ((*((_WORD *)v164 + 15) & 0x400) == 0)
                                    WebCore::Node::removedLastRef(v164, v163);
                                }
                                else
                                {
                                  *((_DWORD *)v164 + 6) -= 2;
                                }
                              }
                              goto LABEL_317;
                            }
                          }
                          else
                          {
                            v124[6] -= 2;
                          }
                        }
                        v303 = v286;
                        v304 = v287;
LABEL_317:
                        *((_DWORD *)v71 + 6) += 2;
                        v285 = v71;
                        WebCore::CompositeEditCommand::insertNodeBefore((WebCore::CompositeEditCommand *)v2, (uint64_t *)&v285, (uint64_t)v121, 1);
                        v126 = v285;
                        v285 = 0;
                        if (v126)
                        {
                          if (*((_DWORD *)v126 + 6) == 2)
                          {
                            if ((*((_WORD *)v126 + 15) & 0x400) == 0)
                              WebCore::Node::removedLastRef(v126, v125);
                          }
                          else
                          {
                            *((_DWORD *)v126 + 6) -= 2;
                          }
                        }
                        v308 = 0;
                        v309 = 0;
                        WebCore::CompositeEditCommand::positionOutsideTabSpan((WebCore::CompositeEditCommand *)v2, (const WebCore::Position *)&v302, (uint64_t)&v305);
                        WebCore::CompositeEditCommand::positionAvoidingSpecialElementBoundary((unsigned int *)v2, (const WebCore::Position *)&v305, (uint64_t)&v285);
                        WebCore::InsertParagraphSeparatorCommand::getAncestorsInsideBlock((uint64_t)v285, v300, (uint64_t)&v308);
                        v128 = v285;
                        v285 = 0;
                        if (v128)
                        {
                          if (*((_DWORD *)v128 + 6) == 2)
                          {
                            if ((*((_WORD *)v128 + 15) & 0x400) == 0)
                              WebCore::Node::removedLastRef(v128, v127);
                          }
                          else
                          {
                            *((_DWORD *)v128 + 6) -= 2;
                          }
                        }
                        v129 = v305;
                        v305 = 0;
                        if (v129)
                        {
                          if (*((_DWORD *)v129 + 6) == 2)
                          {
                            if ((*((_WORD *)v129 + 15) & 0x400) == 0)
                              WebCore::Node::removedLastRef(v129, v127);
                          }
                          else
                          {
                            *((_DWORD *)v129 + 6) -= 2;
                          }
                        }
                        *((_DWORD *)v71 + 6) += 2;
                        v285 = v71;
                        WebCore::InsertParagraphSeparatorCommand::cloneHierarchyUnderNewBlock(&v282, (WebCore::CompositeEditCommand *)v2, (uint64_t)&v308, &v285);
                        if (v285)
                        {
                          if (*((_DWORD *)v285 + 6) == 2)
                          {
                            if ((*((_WORD *)v285 + 15) & 0x400) == 0)
                              WebCore::Node::removedLastRef(v285, v130);
                          }
                          else
                          {
                            *((_DWORD *)v285 + 6) -= 2;
                          }
                        }
                        WebCore::CompositeEditCommand::appendBlockPlaceholder((WebCore::CompositeEditCommand *)v2, &v282, (uint64_t *)&v285);
                        if (v285)
                        {
                          if (*((_DWORD *)v285 + 6) == 2)
                          {
                            if ((*((_WORD *)v285 + 15) & 0x400) == 0)
                              WebCore::Node::removedLastRef(v285, v34);
                          }
                          else
                          {
                            *((_DWORD *)v285 + 6) -= 2;
                          }
                          WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v302, (uint64_t)&v305);
                          LOBYTE(v307) = 1;
                          WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v285, (const WebCore::VisiblePosition *)&v305, (*(unsigned __int8 *)(v2 + 226) >> 1) & 1);
                          WebCore::EditCommand::setEndingSelection((uint64_t *)v2, (const WebCore::VisibleSelection *)&v285);
                          WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v285);
                          if (v305)
                          {
                            if (*((_DWORD *)v305 + 6) == 2)
                            {
                              if ((*((_WORD *)v305 + 15) & 0x400) == 0)
                                WebCore::Node::removedLastRef(v305, v34);
                            }
                            else
                            {
                              *((_DWORD *)v305 + 6) -= 2;
                            }
                          }
                        }
                        if (v282)
                        {
                          if (*((_DWORD *)v282 + 6) == 2)
                          {
                            if ((*((_WORD *)v282 + 15) & 0x400) == 0)
                              WebCore::Node::removedLastRef(v282, v34);
                          }
                          else
                          {
                            *((_DWORD *)v282 + 6) -= 2;
                          }
                        }
                        v131 = v308;
                        if (HIDWORD(v309))
                        {
                          v171 = 8 * HIDWORD(v309);
                          v172 = v308;
                          do
                          {
                            v173 = *(_QWORD *)v172;
                            *(_QWORD *)v172 = 0;
                            if (v173)
                            {
                              if (*(_DWORD *)(v173 + 24) == 2)
                              {
                                if ((*(_WORD *)(v173 + 30) & 0x400) == 0)
                                  WebCore::Node::removedLastRef((WebCore::Node *)v173, v34);
                              }
                              else
                              {
                                *(_DWORD *)(v173 + 24) -= 2;
                              }
                            }
                            v172 = (WebCore::Node *)((char *)v172 + 8);
                            v171 -= 8;
                          }
                          while (v171);
                        }
                        if (v131)
                          WTF::fastFree(v131, v34);
                        if (*((_DWORD *)v121 + 6) != 2)
                        {
                          *((_DWORD *)v121 + 6) -= 2;
                          goto LABEL_443;
                        }
                        if ((*((_WORD *)v121 + 15) & 0x400) != 0)
                          goto LABEL_443;
                        v160 = v121;
                        goto LABEL_470;
                      }
                      v132 = v304 & 7;
                      if (v132 > 4)
                      {
                        v120 = 0;
                      }
                      else
                      {
                        v120 = (WebCore::Node *)v302;
                        if (((1 << v132) & 0x19) == 0)
                          v120 = (WebCore::Node *)*((_QWORD *)v302 + 4);
                      }
                      v133 = !isRootEditableElement;
                      if (v300 != (WebCore::Node **)v120)
                        v133 = 1;
                      if ((v133 & 1) != 0)
                      {
LABEL_312:
                        *((_DWORD *)v121 + 6) += 2;
                        goto LABEL_313;
                      }
                      if ((v304 & 7) != 0)
                      {
                        switch(v132)
                        {
                          case 4u:
                            v158 = *((_WORD *)v302 + 14);
                            if ((v158 & 1) != 0)
                            {
                              v166 = *((_QWORD *)v302 + 10);
                              if (!v166)
                                goto LABEL_309;
                              v134 = *(_DWORD *)(v166 + 4);
                            }
                            else
                            {
                              if ((v158 & 4) == 0)
                                goto LABEL_309;
                              v159 = *((_QWORD *)v302 + 10);
                              if (!v159)
                                goto LABEL_309;
                              v134 = 0;
                              do
                              {
                                ++v134;
                                v159 = *(_QWORD *)(v159 + 56);
                              }
                              while (v159);
                            }
                            break;
                          case 1u:
                            v177 = *((_QWORD *)v302 + 6) & 0xFFFFFFFFFFFFLL;
                            if (!v177)
                              goto LABEL_309;
                            v134 = 0;
                            do
                            {
                              ++v134;
                              v177 = *(_QWORD *)(v177 + 48) & 0xFFFFFFFFFFFFLL;
                            }
                            while (v177);
                            break;
                          case 2u:
                            v176 = *((_QWORD *)v302 + 6) & 0xFFFFFFFFFFFFLL;
                            if (v176)
                            {
                              v134 = 1;
                              do
                              {
                                ++v134;
                                v176 = *(_QWORD *)(v176 + 48) & 0xFFFFFFFFFFFFLL;
                              }
                              while (v176);
                            }
                            else
                            {
                              v134 = 1;
                            }
                            break;
                          default:
                            goto LABEL_309;
                        }
                      }
                      else
                      {
                        v134 = v303;
                      }
                      v121 = (WebCore::Node *)*((_QWORD *)v120 + 10);
                      if (v134 && v121)
                      {
                        v135 = v134 - 1;
                        do
                        {
                          v121 = (WebCore::Node *)*((_QWORD *)v121 + 7);
                          v136 = v135-- != 0;
                          v137 = v136;
                        }
                        while (v121 && (v137 & 1) != 0);
                      }
                    }
                    else
                    {
                      v121 = (WebCore::Node *)v300;
                    }
LABEL_311:
                    if (!v121)
                      goto LABEL_313;
                    goto LABEL_312;
                  }
                }
                else
                {
                  v119[6] -= 2;
                }
              }
              v303 = v286;
              v304 = v287;
              goto LABEL_306;
            }
            if (*(_BYTE *)(v2 + 288))
              goto LABEL_237;
            if (*(_BYTE *)(v2 + 225) == 2)
            {
              WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v4, (uint64_t)&v305);
              LOBYTE(v307) = 1;
            }
            else
            {
              v87 = *(unsigned __int8 *)(v2 + 224);
              WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v4, (uint64_t)&v305);
              LOBYTE(v307) = 1;
              if (!v87)
              {
                v174 = v305;
                if (v305)
                {
                  *((_DWORD *)v305 + 6) += 2;
                  v285 = v174;
                  v286 = v306;
                  v287 = BYTE4(v306);
                  v288 = 0;
                  if (!WebCore::inSameLine((WebCore *)&v305, (const WebCore::VisiblePosition *)&v285, v89))
                    LOBYTE(v307) = 0;
                  v175 = v285;
                  v285 = 0;
                  if (v175)
                  {
                    if (*((_DWORD *)v175 + 6) == 2)
                    {
                      if ((*((_WORD *)v175 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v175, v88);
                    }
                    else
                    {
                      *((_DWORD *)v175 + 6) -= 2;
                    }
                  }
                }
              }
            }
            v90 = v305;
            if (v305
               ? WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance
               : 0)
            {
              WebCore::endOfBlock((unsigned int *)&v305, 0, &v285);
              v92 = WebCore::operator==((uint64_t *)&v305, (uint64_t *)&v285);
              v93 = v285;
              v285 = 0;
              if (v93)
              {
                if (*((_DWORD *)v93 + 6) == 2)
                {
                  if ((*((_WORD *)v93 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v93, v88);
                }
                else
                {
                  *((_DWORD *)v93 + 6) -= 2;
                }
              }
              v90 = v305;
            }
            else
            {
              v92 = 0;
            }
            v305 = 0;
            if (v90)
            {
              if (*((_DWORD *)v90 + 6) == 2)
              {
                if ((*((_WORD *)v90 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v90, v88);
              }
              else
              {
                *((_DWORD *)v90 + 6) -= 2;
              }
            }
            if (v92
              && (*((_WORD *)v19 + 14) & 0x10) != 0
              && ((v94 = *(_QWORD *)(*((_QWORD *)v19 + 12) + 24), v94 == *(_QWORD *)(WebCore::HTMLNames::h1Tag + 24))
               || v94 == *(_QWORD *)(WebCore::HTMLNames::h2Tag + 24)
               || v94 == *(_QWORD *)(WebCore::HTMLNames::h3Tag + 24)
               || v94 == *(_QWORD *)(WebCore::HTMLNames::h4Tag + 24)
               || v94 == *(_QWORD *)(WebCore::HTMLNames::h5Tag + 24)))
            {
LABEL_237:
              WebCore::createDefaultParagraphElement(v11, &v285);
            }
            else
            {
              WebCore::Element::cloneElementWithoutChildren(v19, &v285);
            }
            v71 = v285;
            if (!v69)
              goto LABEL_266;
            if (*(_BYTE *)(v2 + 289))
            {
              WebCore::highestEnclosingNodeOfType((unsigned int *)&v296, WebCore::isMailBlockquote, 1, 0, (uint64_t *)&v285);
              v95 = v285;
              if (v285)
              {
                v285 = 0;
                if ((*((_WORD *)v95 + 14) & 8) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195B00AC4);
                }
                v300 = (WebCore::Node **)v95;
                if (*((_DWORD *)v19 + 6) == 2)
                {
                  if ((*((_WORD *)v19 + 15) & 0x400) == 0)
                  {
                    WebCore::Node::removedLastRef(v19, v83);
                    v165 = v285;
                    v285 = 0;
                    if (v165)
                    {
                      if (*((_DWORD *)v165 + 6) == 2)
                      {
                        if ((*((_WORD *)v165 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef(v165, v83);
                      }
                      else
                      {
                        *((_DWORD *)v165 + 6) -= 2;
                      }
                    }
                  }
                }
                else
                {
                  *((_DWORD *)v19 + 6) -= 2;
                }
              }
              else
              {
                v95 = v19;
              }
              v19 = v95;
            }
            if (v19)
              *((_DWORD *)v19 + 6) += 2;
            if (!v71
              || (*((_WORD *)v71 + 14) & 0x10) == 0
              || *(_QWORD *)(*((_QWORD *)v71 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::divTag + 24))
            {
              v138 = (uint64_t)v19;
              goto LABEL_412;
            }
            if (v19)
              *((_DWORD *)v19 + 6) += 2;
            v138 = (uint64_t)v19;
            if (*((_QWORD *)v19 + 7))
              goto LABEL_410;
            v138 = (uint64_t)v19;
            while (1)
            {
              v139 = v138;
              v140 = *(_QWORD *)(v138 + 32);
              if (!v140
                || ((v141 = *(_WORD *)(v140 + 28), (v141 & 8) != 0) ? (v142 = v140) : (v142 = 0),
                    (v141 & 8) == 0
                 || (*(_WORD *)(v142 + 28) & 0x10) == 0
                 || *(_QWORD *)(*(_QWORD *)(v142 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::divTag + 24)
                 || (v143 = *(_QWORD *)(v140 + 32)) == 0
                 || (*(_WORD *)(v143 + 28) & 8) == 0))
              {
LABEL_408:
                v138 = v139;
LABEL_409:
                if (v19)
                {
LABEL_410:
                  if (*((_DWORD *)v19 + 6) == 2)
                  {
                    if ((*((_WORD *)v19 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v19, v83);
                  }
                  else
                  {
                    *((_DWORD *)v19 + 6) -= 2;
                  }
                }
LABEL_412:
                *((_DWORD *)v71 + 6) += 2;
                v285 = v71;
                WebCore::CompositeEditCommand::insertNodeAfter((unsigned int *)v2, (uint64_t *)&v285, v138);
                v148 = v285;
                v285 = 0;
                if (v148)
                {
                  if (*((_DWORD *)v148 + 6) == 2)
                  {
                    if ((*((_WORD *)v148 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v148, v81);
                  }
                  else
                  {
                    *((_DWORD *)v148 + 6) -= 2;
                  }
                }
                if (*(_DWORD *)(v138 + 24) != 2)
                {
                  *(_DWORD *)(v138 + 24) -= 2;
                  goto LABEL_417;
                }
                if ((*(_WORD *)(v138 + 30) & 0x400) == 0)
                {
                  v82 = (WebCore::Node *)v138;
                  goto LABEL_506;
                }
LABEL_417:
                v308 = 0;
                v309 = 0;
                WebCore::CompositeEditCommand::positionOutsideTabSpan((WebCore::CompositeEditCommand *)v2, (const WebCore::Position *)&v302, (uint64_t)&v285);
                WebCore::InsertParagraphSeparatorCommand::getAncestorsInsideBlock((uint64_t)v285, v300, (uint64_t)&v308);
                v150 = v285;
                v285 = 0;
                if (v150)
                {
                  if (*((_DWORD *)v150 + 6) == 2)
                  {
                    if ((*((_WORD *)v150 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v150, v149);
                  }
                  else
                  {
                    *((_DWORD *)v150 + 6) -= 2;
                  }
                }
                *((_DWORD *)v71 + 6) += 2;
                v285 = v71;
                WebCore::InsertParagraphSeparatorCommand::cloneHierarchyUnderNewBlock(&v279, (WebCore::CompositeEditCommand *)v2, (uint64_t)&v308, &v285);
                if (v285)
                {
                  if (*((_DWORD *)v285 + 6) == 2)
                  {
                    if ((*((_WORD *)v285 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v285, v151);
                  }
                  else
                  {
                    *((_DWORD *)v285 + 6) -= 2;
                  }
                }
                v152 = v279;
                *((_DWORD *)v279 + 6) += 2;
                v305 = v152;
                WebCore::CompositeEditCommand::appendBlockPlaceholder((WebCore::CompositeEditCommand *)v2, &v305, (uint64_t *)&v285);
                v153 = v285;
                if (v285)
                {
                  if (*((_DWORD *)v285 + 6) == 2)
                  {
                    if ((*((_WORD *)v285 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v285, v34);
                  }
                  else
                  {
                    *((_DWORD *)v285 + 6) -= 2;
                  }
                }
                if (v305)
                {
                  if (*((_DWORD *)v305 + 6) == 2)
                  {
                    if ((*((_WORD *)v305 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v305, v34);
                  }
                  else
                  {
                    *((_DWORD *)v305 + 6) -= 2;
                  }
                }
                if (v153)
                {
                  v154 = *((_WORD *)v152 + 14);
                  *((_DWORD *)v152 + 6) += 2;
                  v282 = v152;
                  v283 = 0;
                  if ((v154 & 1) != 0)
                    v155 = v284 & 0xF0;
                  else
                    v155 = v284 & 0xF0 | 3;
                  v284 = v155;
                  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v282, (uint64_t)&v305);
                  LOBYTE(v307) = 1;
                  WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v285, (const WebCore::VisiblePosition *)&v305, (*(unsigned __int8 *)(v2 + 226) >> 1) & 1);
                  WebCore::EditCommand::setEndingSelection((uint64_t *)v2, (const WebCore::VisibleSelection *)&v285);
                  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v285);
                  if (v305)
                  {
                    if (*((_DWORD *)v305 + 6) == 2)
                    {
                      if ((*((_WORD *)v305 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v305, v34);
                    }
                    else
                    {
                      *((_DWORD *)v305 + 6) -= 2;
                    }
                  }
                  if (*((_DWORD *)v152 + 6) == 2)
                  {
                    if ((*((_WORD *)v152 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v152, v34);
                  }
                  else
                  {
                    *((_DWORD *)v152 + 6) -= 2;
                  }
                }
                if (*((_DWORD *)v152 + 6) == 2)
                {
                  if ((*((_WORD *)v152 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v152, v34);
                }
                else
                {
                  *((_DWORD *)v152 + 6) -= 2;
                }
                v156 = v308;
                if (HIDWORD(v309))
                {
                  v168 = 8 * HIDWORD(v309);
                  v169 = v308;
                  do
                  {
                    v170 = *(_QWORD *)v169;
                    *(_QWORD *)v169 = 0;
                    if (v170)
                    {
                      if (*(_DWORD *)(v170 + 24) == 2)
                      {
                        if ((*(_WORD *)(v170 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v170, v34);
                      }
                      else
                      {
                        *(_DWORD *)(v170 + 24) -= 2;
                      }
                    }
                    v169 = (WebCore::Node *)((char *)v169 + 8);
                    v168 -= 8;
                  }
                  while (v168);
                }
                if (v156)
                  WTF::fastFree(v156, v34);
                goto LABEL_443;
              }
              v144 = *(_QWORD *)(v140 + 104);
              if (v144)
                break;
LABEL_391:
              v138 = *(_QWORD *)(v139 + 32);
              if (v138)
              {
                if ((*(_WORD *)(v138 + 28) & 8) != 0)
                  *(_DWORD *)(v138 + 24) += 2;
                else
                  v138 = 0;
              }
              if (*(_DWORD *)(v139 + 24) == 2)
              {
                if ((*(_WORD *)(v139 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v139, v83);
              }
              else
              {
                *(_DWORD *)(v139 + 24) -= 2;
              }
              if (*(_QWORD *)(v138 + 56))
                goto LABEL_409;
            }
            if ((*(_BYTE *)(v144 + 4) & 8) != 0)
            {
              WebCore::StyledElement::synchronizeStyleAttributeInternalImpl((WebCore::StyledElement *)v140, (unsigned __int8 *)v83, v86, v84, v85);
              if ((*(_WORD *)(v140 + 28) & 0x20) == 0)
                goto LABEL_386;
            }
            else if ((v141 & 0x20) == 0)
            {
LABEL_386:
              v145 = *(_QWORD *)(v140 + 104);
              if (v145)
              {
                v146 = *(_DWORD *)(v145 + 4);
                if ((v146 & 1) != 0 ? *(_DWORD *)(v145 + 52) : v146 >> 5)
                  goto LABEL_408;
              }
              goto LABEL_391;
            }
            WebCore::SVGElement::synchronizeAllAttributes((WebCore::SVGElement *)v140);
            goto LABEL_386;
          }
LABEL_581:
          if ((*((_WORD *)v48 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v48, v34);
          goto LABEL_188;
        }
        v53 = *((_WORD *)v19 + 14);
        if ((v53 & 0xF000) == 0x9000)
        {
          if (**((WebCore::Node ***)v52 + 5) == v19 && (*((_WORD *)v52 + 14) & 0xF000) != 0x9000)
          {
            v54 = (*((unsigned __int8 *)v52 + 22) >> 3) & 1;
            if (v49)
              goto LABEL_187;
            goto LABEL_581;
          }
        }
        else if ((v53 & 4) != 0
               && *((_QWORD *)v19 + 10)
               && ((*((unsigned __int8 *)v52 + 22) ^ *((unsigned __int8 *)v19 + 22)) & 8) == 0)
        {
          do
          {
            v52 = (WebCore::Node *)*((_QWORD *)v52 + 4);
            v54 = v52 != 0;
          }
          while (v52 != v19 && v52 != 0);
LABEL_186:
          if (v49)
            goto LABEL_187;
          goto LABEL_581;
        }
      }
    }
    v54 = 0;
    goto LABEL_186;
  }
LABEL_83:
  v36 = v296;
  v296 = 0;
  if (v36)
  {
    if (*((_DWORD *)v36 + 6) == 2)
    {
      if ((*((_WORD *)v36 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v36, v34);
    }
    else
    {
      *((_DWORD *)v36 + 6) -= 2;
    }
  }
  if (v300)
  {
    if (*((_DWORD *)v300 + 6) == 2)
    {
      if ((*((_WORD *)v300 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v300, v34);
    }
    else
    {
      *((_DWORD *)v300 + 6) -= 2;
    }
  }
  v37 = (uint64_t)v301;
  v301 = 0;
  if (v37)
  {
    if (*(_DWORD *)(v37 + 24) == 2)
    {
      if ((*(_WORD *)(v37 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v37, v34);
    }
    else
    {
      *(_DWORD *)(v37 + 24) -= 2;
    }
  }
  this = v302;
  v302 = 0;
  if (this)
  {
    if (this[6] == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)this, v34);
    }
    else
    {
      this[6] -= 2;
    }
  }
  return this;
}

unsigned int *WebCore::InsertTextCommand::doApply(unsigned int *this, void *a2)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  int v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  WebCore::Document *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  uint64_t v21;
  void *v23;
  WebCore::Node *v24;
  int v25;
  const WebCore::VisiblePosition *v26;
  WebCore::Node *v27;
  WebCore::Node *v28;
  uint64_t v29;
  WebCore *v30;
  const WebCore::Position *v31;
  void *v32;
  uint64_t (*v33)();
  _BOOL4 v34;
  WTF::StringImpl *v35;
  _BOOL4 v37;
  WTF::StringImpl *v38;
  WebCore::Node *v39;
  uint64_t v40;
  WebCore::Node *v41;
  void *v42;
  WTF::StringImpl *v43;
  WebCore *v44;
  unsigned int v45;
  void *v46;
  WebCore::Document *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WebCore *v50;
  WebCore *v51;
  void *v52;
  WebCore *v53;
  WebCore *v54;
  void *v55;
  WebCore *v56;
  WebCore *v57;
  uint64_t v58;
  WebCore::Node *v59;
  void *v60;
  WTF::StringImpl *v61;
  int v62;
  unsigned int v63;
  int v64;
  uint64_t v65;
  char v66;
  unsigned int v67;
  WebCore *v68;
  void *v69;
  uint64_t v70;
  _DWORD **v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  _DWORD *v75;
  int v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  int v83;
  uint64_t v84;
  int v85;
  const WebCore::VisiblePosition *v86;
  WebCore::Node *v87;
  WebCore::Node *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  WebCore *v95;
  uint64_t v96;
  _DWORD **v97;
  WTF::StringImpl *v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  _DWORD *v101;
  int v102;
  char v103;
  int v104;
  WebCore::Node *v105;
  unsigned int v106;
  WebCore *v107;
  uint64_t (*v108)();
  __int16 v109;
  void *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WebCore *v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  int v117;
  WebCore::Node *v118;
  uint64_t v119;
  void *v120;
  WTF::StringImpl *v121;
  uint64_t v122;
  uint64_t v123;
  unsigned __int16 *v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t v127;
  BOOL v128;
  void *v129;
  WTF::StringImpl *v130;
  unsigned int v131;
  unsigned int v132;
  uint64_t v133;
  BOOL v134;
  _QWORD *v135;
  uint64_t v136;
  WTF::StringImpl *v137;
  char v138;
  unsigned int v139;
  uint64_t v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  uint64_t v143;
  WTF::StringImpl *v144;
  __int16 v145;
  int v146;
  WebCore::Node *v147;
  WebCore::Node *v148;
  void *v149;
  WebCore *v150;
  WebCore *v151;
  uint64_t (*v152)();
  __int16 v153;
  uint64_t v154;
  void *v155;
  WTF::StringImpl *v156;
  uint64_t v157;
  WebCore::Node *v158;
  uint64_t v159;
  uint64_t v160;
  unsigned __int8 v161;
  char v162;
  WTF::StringImpl *v163;
  int v164;
  unsigned int *v165;
  WebCore::Node *v166;
  WebCore::Node *v167;
  WTF *v168;
  void *v169;
  WebCore::Node *v170;
  void *v171;
  WTF::StringImpl *v172;
  WebCore::Editor *v173;
  WebCore::Editor *v174;
  uint64_t v175;
  WebCore::Editor *v176;
  WebCore::Editor *v177;
  uint64_t v178;
  WTF::StringImpl *v179;
  WebCore::Node *v180;
  void *v181;
  WTF::StringImpl *v182;
  int v183;
  int v184;
  WebCore::Node *v185;
  int v186;
  char v187;
  WebCore::Node *v188;
  unsigned int v189;
  char v190;
  WebCore::Node *v191;
  unsigned int v192;
  char v193;
  char v194;
  WebCore::Node *v195;
  unsigned int v196;
  char v197;
  WebCore *v198;
  unsigned int v199;
  char v200;
  WTF::StringImpl *v201;
  unsigned int v202;
  char v203;
  WTF::StringImpl *v204;
  unsigned int v205;
  char v206;
  uint64_t v207;
  int v208;
  char v209;
  uint64_t v210;
  int v211;
  char v212;
  uint64_t v213;
  int v214;
  char v215;
  uint64_t v216;
  int v217;
  char v218;
  __int16 v219;
  char v220;
  WTF::StringImpl *v221;

  if (!*((_BYTE *)this + 225))
    return this;
  v2 = this;
  v3 = *((_QWORD *)this + 24);
  if (v3)
  {
    if ((*(_BYTE *)(v3 + 22) & 8) == 0)
      return this;
  }
  v5 = this + 52;
  v4 = *((_QWORD *)this + 26);
  if (v4)
  {
    if ((*(_BYTE *)(v4 + 22) & 8) == 0)
      return this;
  }
  if (*((_BYTE *)this + 225) != 2)
  {
    v13 = (WebCore::Document *)*((_QWORD *)this + 2);
    v14 = *((_QWORD *)v13 + 382);
    if (!v14)
    {
      v173 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v173, v13);
      v174 = (WebCore::Editor *)*((_QWORD *)v13 + 382);
      *((_QWORD *)v13 + 382) = v173;
      if (v174)
      {
        WebCore::Editor::~Editor(v174, a2);
        if (*(_DWORD *)v175)
        {
          *(_QWORD *)(v175 + 496) = 0;
          *(_OWORD *)(v175 + 464) = 0u;
          *(_OWORD *)(v175 + 480) = 0u;
          *(_OWORD *)(v175 + 432) = 0u;
          *(_OWORD *)(v175 + 448) = 0u;
          *(_OWORD *)(v175 + 400) = 0u;
          *(_OWORD *)(v175 + 416) = 0u;
          *(_OWORD *)(v175 + 368) = 0u;
          *(_OWORD *)(v175 + 384) = 0u;
          *(_OWORD *)(v175 + 336) = 0u;
          *(_OWORD *)(v175 + 352) = 0u;
          *(_OWORD *)(v175 + 304) = 0u;
          *(_OWORD *)(v175 + 320) = 0u;
          *(_OWORD *)(v175 + 272) = 0u;
          *(_OWORD *)(v175 + 288) = 0u;
          *(_OWORD *)(v175 + 240) = 0u;
          *(_OWORD *)(v175 + 256) = 0u;
          *(_OWORD *)(v175 + 208) = 0u;
          *(_OWORD *)(v175 + 224) = 0u;
          *(_OWORD *)(v175 + 176) = 0u;
          *(_OWORD *)(v175 + 192) = 0u;
          *(_OWORD *)(v175 + 144) = 0u;
          *(_OWORD *)(v175 + 160) = 0u;
          *(_OWORD *)(v175 + 112) = 0u;
          *(_OWORD *)(v175 + 128) = 0u;
          *(_OWORD *)(v175 + 80) = 0u;
          *(_OWORD *)(v175 + 96) = 0u;
          *(_OWORD *)(v175 + 48) = 0u;
          *(_OWORD *)(v175 + 64) = 0u;
          *(_OWORD *)(v175 + 16) = 0u;
          *(_OWORD *)(v175 + 32) = 0u;
          *(_OWORD *)v175 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v175, a2);
        }
      }
      v14 = *((_QWORD *)v13 + 382);
    }
    if (!*(_BYTE *)(v14 + 121))
      goto LABEL_56;
    v15 = *((_QWORD *)v2 + 24);
    if (!v15)
    {
      v30 = 0;
      goto LABEL_58;
    }
    v16 = *((unsigned __int8 *)v2 + 288);
    v17 = *(_DWORD *)(v15 + 24);
    v18 = v17 + 2;
    *(_DWORD *)(v15 + 24) = v17 + 2;
    v198 = (WebCore *)v15;
    v199 = v2[50];
    v200 = *((_BYTE *)v2 + 204);
    if ((v200 & 7) != 0 || (*(_WORD *)(v15 + 28) & 2) == 0)
    {
      v19 = 0;
      goto LABEL_23;
    }
    *(_DWORD *)(v15 + 24) = v17 + 4;
    v79 = *((_QWORD *)v2 + 35);
    if (v79)
      LODWORD(v79) = *(_DWORD *)(v79 + 4);
    v80 = *(_QWORD *)(v15 + 80);
    if (v80)
      LODWORD(v80) = *(_DWORD *)(v80 + 4);
    v81 = v199;
    v82 = v80 - v199;
    if (v82 >= v79)
      v83 = v79;
    else
      v83 = v82;
    v19 = v83 != 0;
    if (!v83)
    {
LABEL_159:
      if (v18)
      {
        *(_DWORD *)(v15 + 24) = v18;
      }
      else if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v15, a2);
      }
LABEL_23:
      this = (unsigned int *)v198;
      v198 = 0;
      if (this)
      {
        if (this[6] == 2)
        {
          if ((*((_WORD *)this + 15) & 0x400) == 0)
            this = WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
        }
        else
        {
          this[6] -= 2;
        }
      }
      if (v19)
        return this;
LABEL_56:
      v30 = (WebCore *)*((_QWORD *)v2 + 24);
      if (v30)
        *((_DWORD *)v30 + 6) += 2;
LABEL_58:
      v198 = v30;
      v199 = v2[50];
      v200 = *((_BYTE *)v2 + 204);
      WebCore::Position::downstream((uint64_t)&v198, (WebCore::Node *)1, (uint64_t)&v195);
      if (WebCore::lineBreakExistsAtPosition((WebCore *)&v195, v31))
      {
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v198, (uint64_t)&v191);
        v194 = 1;
        if (v191)
          v33 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
        else
          v33 = 0;
        if (!v33)
          goto LABEL_79;
        WebCore::endOfBlock((unsigned int *)&v191, 0, &v201);
        v34 = WebCore::operator==((uint64_t *)&v191, (uint64_t *)&v201);
        v35 = v201;
        v201 = 0;
        if (v35)
        {
          if (*((_DWORD *)v35 + 6) == 2)
          {
            if ((*((_WORD *)v35 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v35, v32);
          }
          else
          {
            *((_DWORD *)v35 + 6) -= 2;
          }
        }
        if (!v34)
          goto LABEL_79;
        if (!(v191
             ? WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance
             : 0))
          goto LABEL_79;
        WebCore::startOfParagraph((uint64_t)&v191, 1, &v201);
        v37 = WebCore::operator==((uint64_t *)&v191, (uint64_t *)&v201);
        v38 = v201;
        v201 = 0;
        if (v38)
        {
          if (*((_DWORD *)v38 + 6) == 2)
          {
            if ((*((_WORD *)v38 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v38, v32);
          }
          else
          {
            *((_DWORD *)v38 + 6) -= 2;
          }
        }
        if (v37)
        {
          v39 = v195;
          if (v195)
            *((_DWORD *)v195 + 6) += 2;
          v40 = v196;
        }
        else
        {
LABEL_79:
          v39 = 0;
          v40 = 0;
        }
        v41 = v191;
        v191 = 0;
        if (v41)
        {
          if (*((_DWORD *)v41 + 6) == 2)
          {
            if ((*((_WORD *)v41 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v41, v32);
          }
          else
          {
            *((_DWORD *)v41 + 6) -= 2;
          }
        }
      }
      else
      {
        v39 = 0;
        v40 = 0;
      }
      WebCore::Position::upstream((uint64_t)&v198, (WebCore::Node *)1, (uint64_t)&v201);
      v43 = v201;
      v201 = 0;
      v44 = v198;
      v198 = v43;
      if (!v44)
      {
        v199 = v202;
        v200 = v203;
        if (!v43)
          goto LABEL_91;
        goto LABEL_88;
      }
      if (*((_DWORD *)v44 + 6) == 2)
      {
        if ((*((_WORD *)v44 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v44, v42);
          v111 = v201;
          v199 = v202;
          v200 = v203;
          v201 = 0;
          if (v111)
          {
            if (*((_DWORD *)v111 + 6) == 2)
            {
              if ((*((_WORD *)v111 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v111, v42);
            }
            else
            {
              *((_DWORD *)v111 + 6) -= 2;
            }
          }
LABEL_87:
          v43 = v198;
          if (!v198)
            goto LABEL_91;
LABEL_88:
          v45 = v200 & 7;
          if (v45 > 4)
          {
            v43 = 0;
          }
          else if (((1 << v45) & 0x19) == 0)
          {
            v43 = (WTF::StringImpl *)*((_QWORD *)v43 + 4);
          }
LABEL_91:
          WebCore::positionInParentBeforeNode(v43, (WebCore::Node *)v42, (uint64_t)&v188);
          v47 = (WebCore::Document *)*((_QWORD *)v2 + 2);
          v48 = *((_QWORD *)v47 + 382);
          if (!v48)
          {
            v176 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
            WebCore::Editor::Editor(v176, v47);
            v177 = (WebCore::Editor *)*((_QWORD *)v47 + 382);
            *((_QWORD *)v47 + 382) = v176;
            if (v177)
            {
              WebCore::Editor::~Editor(v177, v46);
              if (*(_DWORD *)v178)
              {
                *(_QWORD *)(v178 + 496) = 0;
                *(_OWORD *)(v178 + 464) = 0u;
                *(_OWORD *)(v178 + 480) = 0u;
                *(_OWORD *)(v178 + 432) = 0u;
                *(_OWORD *)(v178 + 448) = 0u;
                *(_OWORD *)(v178 + 400) = 0u;
                *(_OWORD *)(v178 + 416) = 0u;
                *(_OWORD *)(v178 + 368) = 0u;
                *(_OWORD *)(v178 + 384) = 0u;
                *(_OWORD *)(v178 + 336) = 0u;
                *(_OWORD *)(v178 + 352) = 0u;
                *(_OWORD *)(v178 + 304) = 0u;
                *(_OWORD *)(v178 + 320) = 0u;
                *(_OWORD *)(v178 + 272) = 0u;
                *(_OWORD *)(v178 + 288) = 0u;
                *(_OWORD *)(v178 + 240) = 0u;
                *(_OWORD *)(v178 + 256) = 0u;
                *(_OWORD *)(v178 + 208) = 0u;
                *(_OWORD *)(v178 + 224) = 0u;
                *(_OWORD *)(v178 + 176) = 0u;
                *(_OWORD *)(v178 + 192) = 0u;
                *(_OWORD *)(v178 + 144) = 0u;
                *(_OWORD *)(v178 + 160) = 0u;
                *(_OWORD *)(v178 + 112) = 0u;
                *(_OWORD *)(v178 + 128) = 0u;
                *(_OWORD *)(v178 + 80) = 0u;
                *(_OWORD *)(v178 + 96) = 0u;
                *(_OWORD *)(v178 + 48) = 0u;
                *(_OWORD *)(v178 + 64) = 0u;
                *(_OWORD *)(v178 + 16) = 0u;
                *(_OWORD *)(v178 + 32) = 0u;
                *(_OWORD *)v178 = 0u;
              }
              else
              {
                WTF::fastFree((WTF *)v178, v46);
              }
            }
            v48 = *((_QWORD *)v47 + 382);
          }
          if (!*(_BYTE *)(v48 + 192))
          {
            WebCore::Position::downstream((uint64_t)&v198, (WebCore::Node *)1, (uint64_t)&v201);
            WebCore::CompositeEditCommand::deleteInsignificantText((WebCore::CompositeEditCommand *)v2, (const WebCore::Position *)&v198, (const WebCore::Position *)&v201);
            v49 = v201;
            v201 = 0;
            if (v49)
            {
              if (*((_DWORD *)v49 + 6) == 2)
              {
                if ((*((_WORD *)v49 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v49, v46);
              }
              else
              {
                *((_DWORD *)v49 + 6) -= 2;
              }
            }
          }
          v50 = v198;
          if ((*((_BYTE *)v198 + 22) & 8) == 0)
          {
            v51 = v188;
            if (v188)
              *((_DWORD *)v188 + 6) += 2;
            v198 = v51;
            if (*((_DWORD *)v50 + 6) == 2)
            {
              if ((*((_WORD *)v50 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v50, v46);
            }
            else
            {
              *((_DWORD *)v50 + 6) -= 2;
            }
            v199 = v189;
            v200 = v190;
          }
          if (!WebCore::Position::isCandidate((WebCore::Position *)&v198, (const WebCore::Node *)v46))
          {
            WebCore::Position::downstream((uint64_t)&v198, (WebCore::Node *)1, (uint64_t)&v201);
            v53 = v201;
            v201 = 0;
            v54 = v198;
            v198 = v53;
            if (!v54)
            {
LABEL_106:
              v199 = v202;
              v200 = v203;
              goto LABEL_107;
            }
            if (*((_DWORD *)v54 + 6) != 2)
            {
              *((_DWORD *)v54 + 6) -= 2;
              goto LABEL_106;
            }
            if ((*((_WORD *)v54 + 15) & 0x400) != 0)
              goto LABEL_106;
            WebCore::Node::removedLastRef(v54, v52);
            v130 = v201;
            v199 = v202;
            v200 = v203;
            v201 = 0;
            if (v130)
            {
              if (*((_DWORD *)v130 + 6) == 2)
              {
                if ((*((_WORD *)v130 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v130, v129);
              }
              else
              {
                *((_DWORD *)v130 + 6) -= 2;
              }
            }
          }
LABEL_107:
          WebCore::CompositeEditCommand::positionAvoidingSpecialElementBoundary(v2, (const WebCore::Position *)&v198, (uint64_t)&v201);
          v56 = v201;
          v201 = 0;
          v57 = v198;
          v198 = v56;
          if (v57)
          {
            if (*((_DWORD *)v57 + 6) == 2)
            {
              if ((*((_WORD *)v57 + 15) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef(v57, v55);
                v112 = v201;
                v199 = v202;
                v200 = v203;
                v201 = 0;
                if (v112)
                {
                  if (*((_DWORD *)v112 + 6) == 2)
                  {
                    if ((*((_WORD *)v112 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v112, v55);
                  }
                  else
                  {
                    *((_DWORD *)v112 + 6) -= 2;
                  }
                }
LABEL_111:
                if (!*((_BYTE *)v2 + 225)
                  || (v58 = *((_QWORD *)v2 + 24)) != 0 && (*(_BYTE *)(v58 + 22) & 8) == 0
                  || *(_QWORD *)v5 && (*(_BYTE *)(*(_QWORD *)v5 + 22) & 8) == 0)
                {
LABEL_390:
                  if (v188)
                  {
                    if (*((_DWORD *)v188 + 6) == 2)
                    {
                      if ((*((_WORD *)v188 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v188, v55);
                    }
                    else
                    {
                      *((_DWORD *)v188 + 6) -= 2;
                    }
                  }
                  v167 = v195;
                  v195 = 0;
                  if (v167)
                  {
                    if (*((_DWORD *)v167 + 6) == 2)
                    {
                      if ((*((_WORD *)v167 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v167, v55);
                    }
                    else
                    {
                      *((_DWORD *)v167 + 6) -= 2;
                    }
                  }
                  if (v39)
                  {
                    if (*((_DWORD *)v39 + 6) == 2)
                    {
                      if ((*((_WORD *)v39 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v39, v55);
                    }
                    else
                    {
                      *((_DWORD *)v39 + 6) -= 2;
                    }
                  }
                  this = (unsigned int *)v198;
                  v198 = 0;
                  if (this)
                  {
                    if (this[6] == 2)
                    {
                      if ((*((_WORD *)this + 15) & 0x400) == 0)
                        return WebCore::Node::removedLastRef((WebCore::Node *)this, v55);
                    }
                    else
                    {
                      this[6] -= 2;
                    }
                  }
                  return this;
                }
                v185 = 0;
                v186 = 0;
                v187 &= 0xF0u;
                if (MEMORY[0x19AEA53F4](*((_QWORD *)v2 + 35), "\t", 1))
                {
                  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v198, (uint64_t)&v201);
                  LOBYTE(v204) = 1;
                  v61 = v201;
                  if (v201)
                  {
                    v62 = *((_DWORD *)v201 + 6);
                    *((_DWORD *)v201 + 6) = v62 + 2;
                    v191 = v61;
                    v192 = v202;
                    v193 = v203;
                    if (v62)
                    {
                      *((_DWORD *)v61 + 6) = v62;
                    }
                    else if ((*((_WORD *)v61 + 15) & 0x400) == 0)
                    {
                      WebCore::Node::removedLastRef(v61, v60);
                    }
                    v63 = v193 & 7;
                    if (v63 > 4 || ((1 << v63) & 0x19) == 0 && (v61 = (WTF::StringImpl *)*((_QWORD *)v61 + 4)) == 0)
                    {
                      v61 = 0;
                      v65 = 28;
                      v67 = v192 & (MEMORY[0x1C] << 30 >> 31);
                      v66 = 1;
                      goto LABEL_292;
                    }
                    v65 = (uint64_t)v61 + 28;
                    v64 = *((unsigned __int16 *)v61 + 14);
                    *((_DWORD *)v61 + 6) += 2;
                    if ((v64 & 2) == 0)
                    {
                      v66 = 0;
                      v67 = 0;
LABEL_292:
                      WebCore::createTabSpanElement(*((WebCore **)v2 + 2), (WebCore *)&v201);
                      if ((v66 & 1) != 0 || (*(_WORD *)v65 & 2) == 0)
                      {
                        v179 = v201;
                        *((_DWORD *)v201 + 6) += 2;
                        v221 = v179;
                        WebCore::CompositeEditCommand::insertNodeAt(v2, (uint64_t *)&v221, (WebCore::Position *)&v191);
                        v157 = (uint64_t)v221;
                        v221 = 0;
                        if (v157)
                        {
                          if (*(_DWORD *)(v157 + 24) == 2)
                          {
                            if ((*(_WORD *)(v157 + 30) & 0x400) == 0)
                              goto LABEL_349;
                          }
                          else
                          {
                            *(_DWORD *)(v157 + 24) -= 2;
                          }
                        }
                      }
                      else
                      {
                        *((_DWORD *)v61 + 6) += 2;
                        v140 = *((_QWORD *)v61 + 10);
                        if (v140 && v67 < *(_DWORD *)(v140 + 4))
                        {
                          if (v67)
                            WebCore::CompositeEditCommand::splitTextNode((WebCore::CompositeEditCommand *)v2, v61, v67);
                          v141 = v201;
                          *((_DWORD *)v201 + 6) += 2;
                          v221 = v141;
                          WebCore::CompositeEditCommand::insertNodeBefore((WebCore::CompositeEditCommand *)v2, (uint64_t *)&v221, (uint64_t)v61, 1);
                        }
                        else
                        {
                          v142 = v201;
                          *((_DWORD *)v201 + 6) += 2;
                          v221 = v142;
                          WebCore::CompositeEditCommand::insertNodeAfter(v2, (uint64_t *)&v221, (uint64_t)v61);
                        }
                        v143 = (uint64_t)v221;
                        v221 = 0;
                        if (v143)
                        {
                          if (*(_DWORD *)(v143 + 24) == 2)
                          {
                            if ((*(_WORD *)(v143 + 30) & 0x400) == 0)
                              WebCore::Node::removedLastRef((WebCore::Node *)v143, v60);
                          }
                          else
                          {
                            *(_DWORD *)(v143 + 24) -= 2;
                          }
                        }
                        if (*((_DWORD *)v61 + 6) != 2)
                        {
                          *((_DWORD *)v61 + 6) -= 2;
                          goto LABEL_305;
                        }
                        if ((*((_WORD *)v61 + 15) & 0x400) == 0)
                        {
                          v157 = (uint64_t)v61;
LABEL_349:
                          WebCore::Node::removedLastRef((WebCore::Node *)v157, v60);
                        }
                      }
LABEL_305:
                      v144 = v201;
                      v145 = *((_WORD *)v201 + 14);
                      v146 = *((_DWORD *)v201 + 6);
                      *((_DWORD *)v201 + 6) = v146 + 2;
                      if ((v145 & 1) != 0)
                      {
                        v154 = *((_QWORD *)v144 + 10);
                        if (v154)
                        {
                          v138 = 0;
                          v139 = *(_DWORD *)(v154 + 4);
                          if (v146)
                            goto LABEL_307;
                        }
                        else
                        {
                          v138 = 0;
                          v139 = 0;
                          if (v146)
                            goto LABEL_307;
                        }
                      }
                      else
                      {
                        v139 = 0;
                        v138 = 4;
                        if (v146)
                        {
LABEL_307:
                          *((_DWORD *)v144 + 6) = v146;
LABEL_308:
                          if (*((_DWORD *)v61 + 6) == 2)
                          {
                            if ((*((_WORD *)v61 + 15) & 0x400) == 0)
                              WebCore::Node::removedLastRef(v61, v60);
                          }
                          else
                          {
                            *((_DWORD *)v61 + 6) -= 2;
                          }
                          v61 = v144;
                          goto LABEL_311;
                        }
                      }
                      if ((*((_WORD *)v144 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v144, v60);
                      goto LABEL_308;
                    }
                    v67 = v192;
                    v89 = *((_QWORD *)v61 + 4);
                    if (!v89
                      || (*(_WORD *)(v89 + 28) & 0x10) == 0
                      || *(_QWORD *)(*(_QWORD *)(v89 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::spanTag + 24))
                    {
                      goto LABEL_291;
                    }
                    v67 = v192 & (v64 << 30 >> 31);
                    v90 = *(_QWORD *)(v89 + 104);
                    if (v90
                      && ((v91 = *(_DWORD *)(v90 + 4), (v91 & 1) != 0)
                        ? (v92 = *(_QWORD *)(v90 + 40), LODWORD(v93) = *(_DWORD *)(v90 + 52))
                        : (v92 = v90 + 32, LODWORD(v93) = v91 >> 5),
                          (_DWORD)v93))
                    {
                      v93 = v93;
                      v135 = (_QWORD *)(v92 + 8);
                      while (1)
                      {
                        v136 = *(v135 - 1);
                        if (v136 == WebCore::HTMLNames::classAttr
                          || *(_QWORD *)(v136 + 24) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 24)
                          && *(_QWORD *)(v136 + 32) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 32))
                        {
                          break;
                        }
                        v135 += 2;
                        if (!--v93)
                        {
                          v135 = (_QWORD *)MEMORY[0x1E0CBF2F8];
                          break;
                        }
                      }
                    }
                    else
                    {
                      v135 = (_QWORD *)MEMORY[0x1E0CBF2F8];
                    }
                    if (!MEMORY[0x19AEA53F4](*v135, "Apple-tab-span", 14))
                    {
LABEL_291:
                      v66 = 0;
                      goto LABEL_292;
                    }
                    if ((*(_WORD *)v65 & 2) == 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195B037C4);
                    }
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    WebCore::CompositeEditCommand::insertTextIntoNode((WebCore::Node *)v2, v61, v67, (const WTF::String *)&v201);
                    v137 = v201;
                    v201 = 0;
                    if (v137)
                    {
                      if (*(_DWORD *)v137 == 2)
                        WTF::StringImpl::destroy(v137, (WTF::StringImpl *)v60);
                      else
                        *(_DWORD *)v137 -= 2;
                    }
                    v138 = 0;
                    v139 = v67 + 1;
                  }
                  else
                  {
                    v191 = 0;
                    v192 = v202;
                    v193 = v203;
                    v61 = v198;
                    if (v198)
                      *((_DWORD *)v198 + 6) += 2;
                    v139 = v199;
                    v138 = v200;
                  }
LABEL_311:
                  v147 = v191;
                  v191 = 0;
                  if (v147)
                  {
                    if (*((_DWORD *)v147 + 6) == 2)
                    {
                      if ((*((_WORD *)v147 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v147, v60);
                    }
                    else
                    {
                      *((_DWORD *)v147 + 6) -= 2;
                    }
                  }
                  v148 = v185;
                  v185 = v61;
                  if (v148)
                  {
                    if (*((_DWORD *)v148 + 6) == 2)
                    {
                      if ((*((_WORD *)v148 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v148, v60);
                    }
                    else
                    {
                      *((_DWORD *)v148 + 6) -= 2;
                    }
                  }
                  v186 = v139;
                  v187 = v138;
                  WebCore::Position::previous((uint64_t)&v185, 0, (uint64_t)&v201);
                  v150 = v201;
                  v201 = 0;
                  v151 = v198;
                  v198 = v150;
                  if (v151)
                  {
                    if (*((_DWORD *)v151 + 6) == 2)
                    {
                      if ((*((_WORD *)v151 + 15) & 0x400) == 0)
                      {
                        WebCore::Node::removedLastRef(v151, v149);
                        v156 = v201;
                        v199 = v202;
                        v200 = v203;
                        v201 = 0;
                        if (v156)
                        {
                          if (*((_DWORD *)v156 + 6) == 2)
                          {
                            if ((*((_WORD *)v156 + 15) & 0x400) == 0)
                              WebCore::Node::removedLastRef(v156, v155);
                          }
                          else
                          {
                            *((_DWORD *)v156 + 6) -= 2;
                          }
                        }
                        goto LABEL_321;
                      }
                    }
                    else
                    {
                      *((_DWORD *)v151 + 6) -= 2;
                    }
                  }
                  v199 = v202;
                  v200 = v203;
LABEL_321:
                  v152 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
                  if (!v39)
                    v152 = 0;
                  if (!v152)
                    goto LABEL_375;
                  if (v39)
                    *((_DWORD *)v39 + 6) += 2;
                  v153 = *((_WORD *)v39 + 14);
                  if ((v153 & 0x10) != 0
                    && *(_QWORD *)(*((_QWORD *)v39 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::brTag + 24))
                  {
                    (*(void (**)(unsigned int *, WebCore::Node *, uint64_t))(*(_QWORD *)v2 + 184))(v2, v39, 1);
                  }
                  else
                  {
                    if ((v153 & 2) == 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195B03728);
                    }
                    (*(void (**)(unsigned int *, WebCore::Node *, uint64_t, uint64_t))(*(_QWORD *)v2 + 176))(v2, v39, v40, 1);
                  }
                  if (*((_DWORD *)v39 + 6) != 2)
                  {
                    *((_DWORD *)v39 + 6) -= 2;
LABEL_375:
                    v201 = 0;
                    v202 = 0;
                    v203 &= 0xF0u;
                    v204 = 0;
                    v205 = 0;
                    v206 &= 0xF0u;
                    v207 = 0;
                    v208 = 0;
                    v209 &= 0xF0u;
                    v210 = 0;
                    v211 = 0;
                    v212 &= 0xF0u;
                    v213 = 0;
                    v214 = 0;
                    v215 &= 0xF0u;
                    v216 = 0;
                    v217 = 0;
                    v218 &= 0xF0u;
                    v219 = 1;
                    v220 = v220 & 0xFC | 1;
                    WebCore::VisibleSelection::setWithoutValidation((WebCore::VisibleSelection *)&v201, (const WebCore::Position *)&v198, (const WebCore::Position *)&v185);
                    v220 = v220 & 0xFD | *((_BYTE *)v2 + 226) & 2;
                    WebCore::EditCommand::setEndingSelection((uint64_t *)v2, (const WebCore::VisibleSelection *)&v201);
                    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v201);
                    v159 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 2) + 3064) + 200);
                    if (v159)
                    {
                      ++*(_DWORD *)v159;
                      WebCore::EditingStyle::prepareToApplyAt(v159, (uint64_t *)&v185, 0);
                      v160 = *(_QWORD *)(v159 + 8);
                      if (v160 && *(_DWORD *)(v160 + 28)
                        || *(float *)(v159 + 20) != *(float *)&WebCore::EditingStyle::NoFontDelta
                        || (*(_BYTE *)(v159 + 16) & 0x1E) != 0)
                      {
                        WebCore::CompositeEditCommand::applyStyle((WebCore::CompositeEditCommand *)v2, (WebCore::EditingStyle *)v159, 4);
                      }
                      if (*(_DWORD *)v159 == 1)
                      {
                        WebCore::EditingStyle::~EditingStyle((WebCore::EditingStyle *)v159, (WTF::StringImpl *)v55);
                        WTF::fastFree(v168, v169);
                      }
                      else
                      {
                        --*(_DWORD *)v159;
                      }
                    }
                    if (!*((_BYTE *)v2 + 288))
                    {
                      v161 = *((_BYTE *)v2 + 224);
                      v162 = *((_BYTE *)v2 + 226) & 2;
                      v163 = (WTF::StringImpl *)*((_QWORD *)v2 + 26);
                      if (v163)
                      {
                        v164 = *((_DWORD *)v163 + 6);
                        *((_DWORD *)v163 + 6) = v164 + 2;
                        v165 = v2 + 54;
                        v202 = v2[54];
                        v203 = *((_BYTE *)v2 + 220);
                        *((_DWORD *)v163 + 6) = v164 + 4;
                      }
                      else
                      {
                        v165 = v2 + 54;
                        v202 = v2[54];
                        v203 = *((_BYTE *)v2 + 220);
                      }
                      v201 = v163;
                      v204 = v163;
                      v205 = *v165;
                      v206 = *((_BYTE *)v165 + 4);
                      v207 = 0;
                      v208 = 0;
                      v209 &= 0xF0u;
                      v210 = 0;
                      v211 = 0;
                      v212 &= 0xF0u;
                      v213 = 0;
                      v214 = 0;
                      v215 &= 0xF0u;
                      v216 = 0;
                      v217 = 0;
                      v218 &= 0xF0u;
                      v219 = v161;
                      v220 = v220 & 0xFD | v162;
                      WebCore::VisibleSelection::validate((uint64_t)&v201, 0);
                      WebCore::EditCommand::setEndingSelection((uint64_t *)v2, (const WebCore::VisibleSelection *)&v201);
                      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v201);
                    }
                    v166 = v185;
                    v185 = 0;
                    if (v166)
                    {
                      if (*((_DWORD *)v166 + 6) == 2)
                      {
                        if ((*((_WORD *)v166 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef(v166, v55);
                      }
                      else
                      {
                        *((_DWORD *)v166 + 6) -= 2;
                      }
                    }
                    goto LABEL_390;
                  }
                  if ((*((_WORD *)v39 + 15) & 0x400) != 0)
                    goto LABEL_375;
                  v158 = v39;
LABEL_416:
                  WebCore::Node::removedLastRef(v158, v120);
                  goto LABEL_375;
                }
                v68 = v198;
                if (v198)
                  *((_DWORD *)v198 + 6) += 2;
                v191 = v68;
                v192 = v199;
                v193 = v200;
                if (WebCore::parentTabSpanNode(v68, v59))
                {
                  v70 = *((_QWORD *)v2 + 2);
                  v71 = (_DWORD **)MEMORY[0x1E0CBF738];
                  v72 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
                  if (*MEMORY[0x1E0CBF738])
                    *(_DWORD *)v72 += 2;
                  v73 = bmalloc::api::isoAllocate();
                  v68 = (WebCore *)v73;
                  *(_OWORD *)(v73 + 8) = xmmword_1968BC9D0;
                  *(_QWORD *)(v73 + 24) = 0x320300000002;
                  *(_QWORD *)(v73 + 32) = 0;
                  *(_QWORD *)(v73 + 40) = v70 + 96;
                  *(_OWORD *)(v73 + 48) = 0u;
                  *(_OWORD *)(v73 + 64) = 0u;
                  ++*(_DWORD *)(v70 + 3324);
                  if (v72)
                  {
                    v183 = *(_DWORD *)v72;
                    *(_DWORD *)v72 += 2;
                    *(_QWORD *)(v73 + 80) = v72;
                    *(_QWORD *)v73 = off_1E33A8078;
                    if (!v183)
                    {
                      WTF::StringImpl::destroy(v72, v74);
                      v76 = *((_DWORD *)v68 + 6) + 2;
LABEL_134:
                      *((_DWORD *)v68 + 6) = v76;
                      v221 = v68;
                      WebCore::CompositeEditCommand::positionOutsideTabSpan((WebCore::CompositeEditCommand *)v2, (const WebCore::Position *)&v191, (uint64_t)&v201);
                      WebCore::CompositeEditCommand::insertNodeAt(v2, (uint64_t *)&v221, (WebCore::Position *)&v201);
                      v77 = v201;
                      v201 = 0;
                      if (v77)
                      {
                        if (*((_DWORD *)v77 + 6) == 2)
                        {
                          if ((*((_WORD *)v77 + 15) & 0x400) == 0)
                            WebCore::Node::removedLastRef(v77, v69);
                        }
                        else
                        {
                          *((_DWORD *)v77 + 6) -= 2;
                        }
                      }
                      v78 = v221;
                      v221 = 0;
                      if (!v78)
                        goto LABEL_180;
                      goto LABEL_178;
                    }
                    *(_DWORD *)v72 = v183;
                  }
                  else
                  {
                    v75 = *v71;
                    if (*v71)
                    {
                      *v75 += 2;
                      *(_QWORD *)(v73 + 80) = v75;
                    }
                    else
                    {
                      *(_QWORD *)(v73 + 80) = 0;
                    }
                    *(_QWORD *)v73 = off_1E33A8078;
                  }
                  v76 = 4;
                  goto LABEL_134;
                }
                v94 = v193;
                v95 = v68;
                if ((v193 & 7u) - 1 <= 1)
                  v95 = (WebCore *)*((_QWORD *)v68 + 4);
                if ((*((_WORD *)v95 + 14) & 2) != 0)
                {
                  v106 = v192;
                  goto LABEL_188;
                }
                v96 = *((_QWORD *)v2 + 2);
                v97 = (_DWORD **)MEMORY[0x1E0CBF738];
                v98 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
                if (*MEMORY[0x1E0CBF738])
                  *(_DWORD *)v98 += 2;
                v99 = bmalloc::api::isoAllocate();
                v68 = (WebCore *)v99;
                *(_OWORD *)(v99 + 8) = xmmword_1968BC9D0;
                *(_QWORD *)(v99 + 24) = 0x320300000002;
                *(_QWORD *)(v99 + 32) = 0;
                *(_QWORD *)(v99 + 40) = v96 + 96;
                *(_OWORD *)(v99 + 48) = 0u;
                *(_OWORD *)(v99 + 64) = 0u;
                ++*(_DWORD *)(v96 + 3324);
                if (v98)
                {
                  v184 = *(_DWORD *)v98;
                  *(_DWORD *)v98 += 2;
                  *(_QWORD *)(v99 + 80) = v98;
                  *(_QWORD *)v99 = off_1E33A8078;
                  if (!v184)
                  {
                    WTF::StringImpl::destroy(v98, v100);
                    v102 = *((_DWORD *)v68 + 6) + 2;
LABEL_177:
                    *((_DWORD *)v68 + 6) = v102;
                    v201 = v68;
                    WebCore::CompositeEditCommand::insertNodeAt(v2, (uint64_t *)&v201, (WebCore::Position *)&v191);
                    v78 = v201;
                    v201 = 0;
                    if (!v78)
                    {
LABEL_180:
                      v103 = *((_WORD *)v68 + 14);
                      v104 = *((_DWORD *)v68 + 6);
                      *((_DWORD *)v68 + 6) = v104 + 2;
                      if ((v103 & 1) != 0)
                        v94 = 0;
                      else
                        v94 = 3;
                      if (v104)
                      {
                        *((_DWORD *)v68 + 6) = v104;
                      }
                      else if ((*((_WORD *)v68 + 15) & 0x400) == 0)
                      {
                        WebCore::Node::removedLastRef(v68, v69);
                      }
                      v105 = v191;
                      v191 = 0;
                      if (v105)
                      {
                        if (*((_DWORD *)v105 + 6) != 2)
                        {
                          v106 = 0;
                          *((_DWORD *)v105 + 6) -= 2;
                          goto LABEL_188;
                        }
                        if ((*((_WORD *)v105 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef(v105, v69);
                      }
                      v106 = 0;
LABEL_188:
                      v107 = v198;
                      v198 = v68;
                      if (v107)
                      {
                        if (*((_DWORD *)v107 + 6) == 2)
                        {
                          if ((*((_WORD *)v107 + 15) & 0x400) == 0)
                            WebCore::Node::removedLastRef(v107, v69);
                        }
                        else
                        {
                          *((_DWORD *)v107 + 6) -= 2;
                        }
                      }
                      v199 = v106;
                      v200 = v94;
                      v108 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
                      if (!v39)
                        v108 = 0;
                      if (v108)
                      {
                        if (v39)
                          *((_DWORD *)v39 + 6) += 2;
                        v109 = *((_WORD *)v39 + 14);
                        if ((v109 & 0x10) != 0
                          && *(_QWORD *)(*((_QWORD *)v39 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::brTag + 24))
                        {
                          (*(void (**)(unsigned int *, WebCore::Node *, uint64_t))(*(_QWORD *)v2 + 184))(v2, v39, 1);
                        }
                        else
                        {
                          if ((v109 & 2) == 0)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x195B03708);
                          }
                          (*(void (**)(unsigned int *, WebCore::Node *, uint64_t, uint64_t))(*(_QWORD *)v2 + 176))(v2, v39, v40, 1);
                        }
                        if (*((_DWORD *)v39 + 6) == 2)
                        {
                          if ((*((_WORD *)v39 + 15) & 0x400) == 0)
                            WebCore::Node::removedLastRef(v39, v110);
                        }
                        else
                        {
                          *((_DWORD *)v39 + 6) -= 2;
                        }
                      }
                      if ((v200 & 7) == 0)
                      {
                        v113 = v198;
                        if (!v198)
                          goto LABEL_213;
                        if ((*((_WORD *)v198 + 14) & 2) != 0)
                        {
                          *((_DWORD *)v198 + 6) += 2;
                          goto LABEL_213;
                        }
                      }
                      v113 = 0;
LABEL_213:
                      v114 = v199;
                      WebCore::CompositeEditCommand::insertTextIntoNode((WebCore::Node *)v2, v113, v199, (const WTF::String *)(v2 + 70));
                      *((_DWORD *)v113 + 6) += 2;
                      v116 = *((_QWORD *)v2 + 35);
                      if (v116)
                        LODWORD(v116) = *(_DWORD *)(v116 + 4);
                      v117 = v116 + v114;
                      v118 = v185;
                      v185 = v113;
                      if (v118)
                      {
                        if (*((_DWORD *)v118 + 6) == 2)
                        {
                          if ((*((_WORD *)v118 + 15) & 0x400) == 0)
                            WebCore::Node::removedLastRef(v118, v115);
                        }
                        else
                        {
                          *((_DWORD *)v118 + 6) -= 2;
                        }
                      }
                      v186 = v117;
                      v187 = 0;
                      v119 = *((_QWORD *)v2 + 37);
                      if (v119)
                        (*(void (**)(uint64_t, WebCore *, uint64_t, unsigned int *))(*(_QWORD *)v119 + 16))(v119, v113, v114, v2 + 70);
                      if (v2[73])
                      {
                        WebCore::CompositeEditCommand::textNodeForRebalance((const WebCore::Position *)&v198, (uint64_t *)&v201);
                        if (v201)
                        {
                          WebCore::CompositeEditCommand::rebalanceWhitespaceOnTextSubstring(v2, v113, v199, v186);
                          v121 = v201;
                          v201 = 0;
                          if (v121)
                          {
                            if (*((_DWORD *)v121 + 6) == 2)
                            {
                              if ((*((_WORD *)v121 + 15) & 0x400) == 0)
                                WebCore::Node::removedLastRef(v121, v120);
                            }
                            else
                            {
                              *((_DWORD *)v121 + 6) -= 2;
                            }
                          }
                        }
                      }
                      else
                      {
                        WebCore::CompositeEditCommand::rebalanceWhitespaceAt((WebCore::CompositeEditCommand *)v2, (const WebCore::Position *)&v185);
                        v122 = *((_QWORD *)v2 + 35);
                        if (v122)
                        {
                          v123 = *(unsigned int *)(v122 + 4);
                          if ((_DWORD)v123)
                          {
                            v124 = *(unsigned __int16 **)(v122 + 8);
                            if ((*(_BYTE *)(v122 + 16) & 4) != 0)
                            {
                              while (1)
                              {
                                v126 = *(unsigned __int8 *)v124;
                                v124 = (unsigned __int16 *)((char *)v124 + 1);
                                v125 = v126;
                                v127 = (1 << v126) & 0x100000600;
                                v128 = v126 > 0x20 || v127 == 0;
                                if (v128 && v125 != 160)
                                  break;
                                if (!--v123)
                                  goto LABEL_373;
                              }
                            }
                            else
                            {
                              while (1)
                              {
                                v132 = *v124++;
                                v131 = v132;
                                v133 = (1 << v132) & 0x100000600;
                                v134 = v132 > 0x20 || v133 == 0;
                                if (v134 && v131 != 160)
                                  break;
                                if (!--v123)
                                  goto LABEL_373;
                              }
                            }
                            WebCore::CompositeEditCommand::rebalanceWhitespaceAt((WebCore::CompositeEditCommand *)v2, (const WebCore::Position *)&v198);
                          }
                        }
                      }
LABEL_373:
                      if (*((_DWORD *)v113 + 6) != 2)
                      {
                        *((_DWORD *)v113 + 6) -= 2;
                        goto LABEL_375;
                      }
                      if ((*((_WORD *)v113 + 15) & 0x400) != 0)
                        goto LABEL_375;
                      v158 = v113;
                      goto LABEL_416;
                    }
LABEL_178:
                    if (*((_DWORD *)v78 + 6) == 2)
                    {
                      if ((*((_WORD *)v78 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v78, v69);
                    }
                    else
                    {
                      *((_DWORD *)v78 + 6) -= 2;
                    }
                    goto LABEL_180;
                  }
                  *(_DWORD *)v98 = v184;
                }
                else
                {
                  v101 = *v97;
                  if (*v97)
                  {
                    *v101 += 2;
                    *(_QWORD *)(v99 + 80) = v101;
                  }
                  else
                  {
                    *(_QWORD *)(v99 + 80) = 0;
                  }
                  *(_QWORD *)v99 = off_1E33A8078;
                }
                v102 = 4;
                goto LABEL_177;
              }
            }
            else
            {
              *((_DWORD *)v57 + 6) -= 2;
            }
          }
          v199 = v202;
          v200 = v203;
          goto LABEL_111;
        }
      }
      else
      {
        *((_DWORD *)v44 + 6) -= 2;
      }
      v199 = v202;
      v200 = v203;
      goto LABEL_87;
    }
    WebCore::CompositeEditCommand::replaceTextInNode((WebCore::CompositeEditCommand *)v2, (WebCore::Text *)v15, v199, v83, (const WTF::String *)(v2 + 70));
    *(_DWORD *)(v15 + 24) += 2;
    v84 = *((_QWORD *)v2 + 35);
    if (v84)
      LODWORD(v84) = *(_DWORD *)(v84 + 4);
    v195 = (WebCore::Node *)v15;
    v196 = v84 + v81;
    v197 = 0;
    v201 = 0;
    v202 = 0;
    v203 = 0;
    v204 = 0;
    v205 = 0;
    v206 = 0;
    v207 = 0;
    v208 = 0;
    v209 = 0;
    v210 = 0;
    v211 = 0;
    v212 = 0;
    v213 = 0;
    v214 = 0;
    v215 = 0;
    v216 = 0;
    v217 = 0;
    v218 = 0;
    v219 = 1;
    v220 = 1;
    WebCore::VisibleSelection::setWithoutValidation((WebCore::VisibleSelection *)&v201, (const WebCore::Position *)&v198, (const WebCore::Position *)&v195);
    v220 = v220 & 0xFD | *((_BYTE *)v2 + 226) & 2;
    WebCore::EditCommand::setEndingSelection((uint64_t *)v2, (const WebCore::VisibleSelection *)&v201);
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v201);
    if (v16)
    {
LABEL_155:
      v88 = v195;
      v195 = 0;
      if (v88)
      {
        if (*((_DWORD *)v88 + 6) == 2)
        {
          if ((*((_WORD *)v88 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v88, a2);
        }
        else
        {
          *((_DWORD *)v88 + 6) -= 2;
        }
      }
      v18 = *(_DWORD *)(v15 + 24) - 2;
      goto LABEL_159;
    }
    if (*((_BYTE *)v2 + 225) == 2)
    {
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v2 + 52), (uint64_t)&v191);
      v194 = 1;
    }
    else
    {
      v85 = *((unsigned __int8 *)v2 + 224);
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v2 + 52), (uint64_t)&v191);
      v194 = 1;
      if (v85)
      {
LABEL_152:
        WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v201, (const WebCore::VisiblePosition *)&v191, (*((unsigned __int8 *)v2 + 226) >> 1) & 1);
        WebCore::EditCommand::setEndingSelection((uint64_t *)v2, (const WebCore::VisibleSelection *)&v201);
        WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v201);
        v87 = v191;
        v191 = 0;
        if (v87)
        {
          if (*((_DWORD *)v87 + 6) == 2)
          {
            if ((*((_WORD *)v87 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v87, a2);
          }
          else
          {
            *((_DWORD *)v87 + 6) -= 2;
          }
        }
        goto LABEL_155;
      }
    }
    v180 = v191;
    if (v191)
    {
      *((_DWORD *)v191 + 6) += 2;
      v201 = v180;
      v202 = v192;
      v203 = v193;
      LOBYTE(v204) = 0;
      if (!WebCore::inSameLine((WebCore *)&v191, (const WebCore::VisiblePosition *)&v201, v86))
        v194 = 0;
      v182 = v201;
      v201 = 0;
      if (v182)
      {
        if (*((_DWORD *)v182 + 6) == 2)
        {
          if ((*((_WORD *)v182 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v182, v181);
        }
        else
        {
          *((_DWORD *)v182 + 6) -= 2;
        }
      }
    }
    goto LABEL_152;
  }
  v6 = *((unsigned __int8 *)this + 288);
  v7 = *((_QWORD *)this + 35);
  if (v7)
  {
    v8 = *(unsigned __int16 **)(v7 + 8);
    v9 = *(unsigned int *)(v7 + 4);
    if ((*(_BYTE *)(v7 + 16) & 4) != 0)
    {
      if ((_DWORD)v9)
      {
        while (1)
        {
          v20 = *(unsigned __int8 *)v8;
          v8 = (unsigned __int16 *)((char *)v8 + 1);
          v21 = (1 << v20) & 0x100000600;
          if (v20 <= 0x20 && v21 != 0)
            break;
          if (!--v9)
            goto LABEL_35;
        }
LABEL_51:
        this = (unsigned int *)WebCore::CompositeEditCommand::deleteSelection((WebCore::Node *)v2, 0, 1, 1, 0, 0);
        if (!*((_BYTE *)v2 + 225))
          return this;
        v29 = *((_QWORD *)v2 + 24);
        if (v29)
        {
          if ((*(_BYTE *)(v29 + 22) & 8) == 0)
            return this;
        }
        if (*(_QWORD *)v5 && (*(_BYTE *)(*(_QWORD *)v5 + 22) & 8) == 0)
          return this;
        goto LABEL_56;
      }
    }
    else if ((_DWORD)v9)
    {
      do
      {
        v10 = *v8++;
        v11 = (1 << v10) & 0x100000600;
        if (v10 <= 0x20 && v11 != 0)
          goto LABEL_51;
      }
      while (--v9);
    }
  }
LABEL_35:
  if (v3)
    *(_DWORD *)(v3 + 24) += 2;
  v198 = (WebCore *)v3;
  v199 = this[50];
  v200 = *((_BYTE *)this + 204);
  WebCore::CompositeEditCommand::replaceSelectedTextInNode(this, (const WTF::String *)(this + 70), (uint64_t)&v195);
  v24 = v195;
  if (!v195)
    goto LABEL_47;
  v201 = 0;
  v202 = 0;
  v203 = 0;
  v204 = 0;
  v205 = 0;
  v206 = 0;
  v207 = 0;
  v208 = 0;
  v209 = 0;
  v210 = 0;
  v211 = 0;
  v212 = 0;
  v213 = 0;
  v214 = 0;
  v215 = 0;
  v216 = 0;
  v217 = 0;
  v218 = 0;
  v219 = 1;
  v220 = 1;
  WebCore::VisibleSelection::setWithoutValidation((WebCore::VisibleSelection *)&v201, (const WebCore::Position *)&v198, (const WebCore::Position *)&v195);
  v220 = v220 & 0xFD | *((_BYTE *)v2 + 226) & 2;
  WebCore::EditCommand::setEndingSelection((uint64_t *)v2, (const WebCore::VisibleSelection *)&v201);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v201);
  if (!v6)
  {
    if (*((_BYTE *)v2 + 225) == 2)
    {
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v2 + 52), (uint64_t)&v191);
      v194 = 1;
    }
    else
    {
      v25 = *((unsigned __int8 *)v2 + 224);
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(v2 + 52), (uint64_t)&v191);
      v194 = 1;
      if (v25)
      {
LABEL_41:
        WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v201, (const WebCore::VisiblePosition *)&v191, (*((unsigned __int8 *)v2 + 226) >> 1) & 1);
        WebCore::EditCommand::setEndingSelection((uint64_t *)v2, (const WebCore::VisibleSelection *)&v201);
        WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v201);
        v27 = v191;
        v191 = 0;
        if (v27)
        {
          if (*((_DWORD *)v27 + 6) == 2)
          {
            if ((*((_WORD *)v27 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v27, v23);
          }
          else
          {
            *((_DWORD *)v27 + 6) -= 2;
          }
        }
        goto LABEL_44;
      }
    }
    v170 = v191;
    if (v191)
    {
      *((_DWORD *)v191 + 6) += 2;
      v201 = v170;
      v202 = v192;
      v203 = v193;
      LOBYTE(v204) = 0;
      if (!WebCore::inSameLine((WebCore *)&v191, (const WebCore::VisiblePosition *)&v201, v26))
        v194 = 0;
      v172 = v201;
      v201 = 0;
      if (v172)
      {
        if (*((_DWORD *)v172 + 6) == 2)
        {
          if ((*((_WORD *)v172 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v172, v171);
        }
        else
        {
          *((_DWORD *)v172 + 6) -= 2;
        }
      }
    }
    goto LABEL_41;
  }
LABEL_44:
  v28 = v195;
  v195 = 0;
  if (v28)
  {
    if (*((_DWORD *)v28 + 6) == 2)
    {
      if ((*((_WORD *)v28 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v28, v23);
    }
    else
    {
      *((_DWORD *)v28 + 6) -= 2;
    }
  }
LABEL_47:
  this = (unsigned int *)v198;
  v198 = 0;
  if (this)
  {
    if (this[6] == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)this, v23);
    }
    else
    {
      this[6] -= 2;
    }
  }
  if (!v24)
    goto LABEL_51;
  return this;
}

