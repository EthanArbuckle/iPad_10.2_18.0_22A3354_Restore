void WebCore::WebRTCProvider::createRTCDataChannelRemoteHandlerConnection(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

WebCore::RTCRtpCapabilities *std::optional<WebCore::RTCRtpCapabilities>::operator=[abi:sn180100](WebCore::RTCRtpCapabilities *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;

  if (*((unsigned __int8 *)this + 32) == *((unsigned __int8 *)a2 + 32))
  {
    if (*((_BYTE *)this + 32))
      WebCore::RTCRtpCapabilities::operator=((uint64_t)this, a2);
  }
  else if (*((_BYTE *)this + 32))
  {
    WebCore::RTCRtpCapabilities::~RTCRtpCapabilities(this, a2);
    *((_BYTE *)this + 32) = 0;
  }
  else
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    v3 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)this = v3;
    LODWORD(v3) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 0;
    *((_DWORD *)this + 2) = v3;
    LODWORD(v3) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = 0;
    *((_DWORD *)this + 3) = v3;
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    v4 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = 0;
    *((_QWORD *)this + 2) = v4;
    LODWORD(v4) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = 0;
    *((_DWORD *)this + 6) = v4;
    LODWORD(v4) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = 0;
    *((_DWORD *)this + 7) = v4;
    *((_BYTE *)this + 32) = 1;
  }
  return this;
}

uint64_t WebCore::WebRTCProvider::isSupportingAV1(WebCore::WebRTCProvider *this)
{
  return *((unsigned __int8 *)this + 168);
}

uint64_t WebCore::WebRTCProvider::isSupportingH265(WebCore::WebRTCProvider *this)
{
  return *((unsigned __int8 *)this + 169);
}

uint64_t WebCore::WebRTCProvider::isSupportingVP9Profile0(WebCore::WebRTCProvider *this)
{
  return *((unsigned __int8 *)this + 170);
}

uint64_t WebCore::WebRTCProvider::isSupportingVP9Profile2(WebCore::WebRTCProvider *this)
{
  return *((unsigned __int8 *)this + 171);
}

uint64_t WebCore::WebRTCProvider::isSupportingMDNS(WebCore::WebRTCProvider *this)
{
  return *((unsigned __int8 *)this + 172);
}

void WebCore::WebRTCProvider::receiverCapabilities(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[32] = 0;
}

void WebCore::WebRTCProvider::senderCapabilities(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[32] = 0;
}

void WebCore::WebRTCProvider::codecCapability(WebCore::ContentType *this@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, float a6@<S2>)
{
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  const WTF::StringImpl *v14;
  uint64_t v15;
  _DWORD *v16;
  WTF::StringImpl *v17;

  if (*((_BYTE *)a2 + 32))
  {
    WebCore::ContentType::containerType(this, a4, a5, a6);
    if (*((_BYTE *)a2 + 32))
    {
      v10 = *((unsigned int *)a2 + 3);
      if ((_DWORD)v10)
      {
        v11 = *a2;
        v12 = 32 * v10;
        while (!WTF::equalIgnoringASCIICase(v17, *(const WTF::StringImpl **)v11, v9))
        {
          v11 += 32;
          v12 -= 32;
          if (!v12)
            goto LABEL_7;
        }
        v14 = *(const WTF::StringImpl **)v11;
        if (*(_QWORD *)v11)
          *(_DWORD *)v14 += 2;
        v15 = *(_QWORD *)(v11 + 8);
        *(_QWORD *)a3 = v14;
        *(_QWORD *)(a3 + 8) = v15;
        *(_DWORD *)(a3 + 15) = *(_DWORD *)(v11 + 15);
        v16 = *(_DWORD **)(v11 + 24);
        if (v16)
          *v16 += 2;
        *(_QWORD *)(a3 + 24) = v16;
        v13 = 1;
      }
      else
      {
LABEL_7:
        v13 = 0;
        *(_BYTE *)a3 = 0;
      }
      *(_BYTE *)(a3 + 32) = v13;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v8);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
  }
}

uint64_t WebCore::WebRTCProvider::audioDecodingCapabilities(WebCore::WebRTCProvider *this)
{
  if (!*((_BYTE *)this + 40))
    (*(void (**)(WebCore::WebRTCProvider *))(*(_QWORD *)this + 96))(this);
  return (uint64_t)this + 8;
}

uint64_t WebCore::WebRTCProvider::videoDecodingCapabilities(WebCore::WebRTCProvider *this)
{
  if (!*((_BYTE *)this + 80))
    (*(void (**)(WebCore::WebRTCProvider *))(*(_QWORD *)this + 104))(this);
  return (uint64_t)this + 48;
}

uint64_t WebCore::WebRTCProvider::audioEncodingCapabilities(WebCore::WebRTCProvider *this)
{
  if (!*((_BYTE *)this + 120))
    (*(void (**)(WebCore::WebRTCProvider *))(*(_QWORD *)this + 112))(this);
  return (uint64_t)this + 88;
}

uint64_t WebCore::WebRTCProvider::videoEncodingCapabilities(WebCore::WebRTCProvider *this)
{
  if (!*((_BYTE *)this + 160))
    (*(void (**)(WebCore::WebRTCProvider *))(*(_QWORD *)this + 120))(this);
  return (uint64_t)this + 128;
}

uint64_t WebCore::WebRTCProvider::computeVPParameters()
{
  return 0;
}

uint64_t WebCore::WebRTCProvider::isVPSoftwareDecoderSmooth()
{
  return 1;
}

uint64_t WebCore::WebRTCProvider::isVPXEncoderSmooth()
{
  return 0;
}

uint64_t WebCore::WebRTCProvider::isH264EncoderSmooth()
{
  return 1;
}

void WebCore::WebRTCProvider::createDecodingConfiguration(uint64_t a1, uint64_t a2, _QWORD *a3, __n128 a4, __n128 a5, float a6)
{
  int v8;
  WTF::StringImpl *v9;
  int v10;
  __int128 v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23[2];
  WTF::StringImpl *v24[2];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  WTF::StringImpl *v46;
  char v47;
  WTF::StringImpl *v48;
  char v49;
  WTF::StringImpl *v50;
  char v51;
  _WORD v52[4];
  WTF::StringImpl *v53;
  __int128 v54;
  __n128 v55;
  char v56;
  __int128 v57;
  __n128 v58[2];
  unsigned __int8 v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  __int16 v66;

  memset(v52, 0, 3);
  LOBYTE(v53) = 0;
  v56 = 0;
  v8 = *(unsigned __int8 *)(a2 + 40);
  if (*(_BYTE *)(a2 + 40))
  {
    v9 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
    v53 = v9;
    v54 = *(_OWORD *)(a2 + 8);
    a4 = *(__n128 *)(a2 + 24);
    v55 = a4;
    v56 = 1;
  }
  LOBYTE(v57) = 0;
  v59 = 0;
  v10 = *(unsigned __int8 *)(a2 + 96);
  if (*(_BYTE *)(a2 + 96))
  {
    v11 = *(_OWORD *)(a2 + 48);
    a5 = *(__n128 *)(a2 + 64);
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    v57 = v11;
    v58[0] = a5;
    a4 = *(__n128 *)(a2 + 74);
    *(__n128 *)((char *)v58 + 10) = a4;
    v10 = 1;
    v59 = 1;
  }
  LOBYTE(v60) = 0;
  v62 = 0;
  if (*(_BYTE *)(a2 + 120))
  {
    v60 = *(_QWORD *)(a2 + 104);
    a4.n128_u64[0] = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a2 + 104) = 0;
    *(_QWORD *)(a2 + 112) = 0;
    v61 = a4.n128_u64[0];
    v62 = 1;
  }
  LOBYTE(v63) = 0;
  v65 = 0;
  if (*(_BYTE *)(a2 + 144))
  {
    v63 = *(_QWORD *)(a2 + 128);
    a4.n128_u64[0] = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a2 + 128) = 0;
    *(_QWORD *)(a2 + 136) = 0;
    v64 = a4.n128_u64[0];
    v65 = 1;
  }
  v66 = *(_WORD *)(a2 + 152);
  if (!v8)
    goto LABEL_34;
  v12 = v53;
  if (v53)
    *(_DWORD *)v53 += 2;
  v50 = v12;
  v51 = 0;
  if (!*(_BYTE *)(a1 + 80))
    a4.n128_f64[0] = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  WebCore::WebRTCProvider::codecCapability((WebCore::ContentType *)&v50, (uint64_t *)(a1 + 48), (uint64_t)&v46, a4.n128_f64[0], a5.n128_f64[0], a6);
  if (!v49)
  {
    v44 = 256;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v14 = 1;
    (*(void (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 16))(*a3, &v34);
    WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)((char *)&v34 + 8), v15);
    goto LABEL_29;
  }
  if (v56)
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t, WTF::StringImpl **))(*(_QWORD *)a1 + 128))(&v34, a1, &v53);
    if (v45)
    {
      if ((_BYTE)v34)
      {
        v14 = 0;
        *(_WORD *)((char *)v52 + 1) = *(_WORD *)((char *)&v34 + 1);
LABEL_22:
        WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)((char *)&v34 + 8), v13);
        goto LABEL_23;
      }
      v33 = 256;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      *(_OWORD *)v23 = 0u;
      *(_OWORD *)v24 = 0u;
      v14 = 1;
      (*(void (**)(_QWORD, WTF::StringImpl **))(*(_QWORD *)*a3 + 16))(*a3, v23);
      WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)&v23[1], v16);
      if (v45)
        goto LABEL_22;
    }
    else
    {
      v14 = 0;
    }
LABEL_23:
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
        WTF::StringImpl::destroy(v48, v13);
      else
        *(_DWORD *)v48 -= 2;
    }
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, v13);
      else
        *(_DWORD *)v46 -= 2;
    }
LABEL_29:
    v17 = v50;
    v50 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::destroy(v17, v13);
        if (v14)
          goto LABEL_53;
LABEL_33:
        v10 = v59;
LABEL_34:
        if (v10)
        {
          v18 = (WTF::StringImpl *)v57;
          if ((_QWORD)v57)
            *(_DWORD *)v57 += 2;
          v46 = v18;
          v47 = 0;
          if (!*(_BYTE *)(a1 + 40))
            a4.n128_f64[0] = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
          WebCore::WebRTCProvider::codecCapability((WebCore::ContentType *)&v46, (uint64_t *)(a1 + 8), (uint64_t)v23, a4.n128_f64[0], a5.n128_f64[0], a6);
          if (!(_BYTE)v25)
          {
            v44 = 256;
            v42 = 0u;
            v43 = 0u;
            v40 = 0u;
            v41 = 0u;
            v38 = 0u;
            v39 = 0u;
            v36 = 0u;
            v37 = 0u;
            v34 = 0u;
            v35 = 0u;
            (*(void (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 16))(*a3, &v34);
            WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)((char *)&v34 + 8), v21);
            v22 = v46;
            v46 = 0;
            if (v22)
            {
              if (*(_DWORD *)v22 == 2)
                WTF::StringImpl::destroy(v22, v13);
              else
                *(_DWORD *)v22 -= 2;
            }
            goto LABEL_53;
          }
          if (v24[1])
          {
            if (*(_DWORD *)v24[1] == 2)
              WTF::StringImpl::destroy(v24[1], v19);
            else
              *(_DWORD *)v24[1] -= 2;
          }
          if (v23[0])
          {
            if (*(_DWORD *)v23[0] == 2)
              WTF::StringImpl::destroy(v23[0], v19);
            else
              *(_DWORD *)v23[0] -= 2;
          }
          v20 = v46;
          v46 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v19);
            else
              *(_DWORD *)v20 -= 2;
          }
        }
        LOBYTE(v52[0]) = 1;
        (*(void (**)(_QWORD, _WORD *))(*(_QWORD *)*a3 + 16))(*a3, v52);
LABEL_53:
        WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)&v53, v13);
        return;
      }
      *(_DWORD *)v17 -= 2;
    }
    if (v14)
      goto LABEL_53;
    goto LABEL_33;
  }
  __break(1u);
}

void WebCore::WebRTCProvider::createEncodingConfiguration(uint64_t a1, uint64_t a2, _QWORD *a3, __n128 a4, __n128 a5, float a6)
{
  int v8;
  WTF::StringImpl *v9;
  int v10;
  __int128 v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23[2];
  WTF::StringImpl *v24[2];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  WTF::StringImpl *v46;
  char v47;
  WTF::StringImpl *v48;
  char v49;
  WTF::StringImpl *v50;
  char v51;
  _WORD v52[4];
  WTF::StringImpl *v53;
  __int128 v54;
  __n128 v55;
  char v56;
  __int128 v57;
  __n128 v58[2];
  unsigned __int8 v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  char v66;

  memset(v52, 0, 3);
  LOBYTE(v53) = 0;
  v56 = 0;
  v8 = *(unsigned __int8 *)(a2 + 40);
  if (*(_BYTE *)(a2 + 40))
  {
    v9 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
    v53 = v9;
    v54 = *(_OWORD *)(a2 + 8);
    a4 = *(__n128 *)(a2 + 24);
    v55 = a4;
    v56 = 1;
  }
  LOBYTE(v57) = 0;
  v59 = 0;
  v10 = *(unsigned __int8 *)(a2 + 96);
  if (*(_BYTE *)(a2 + 96))
  {
    v11 = *(_OWORD *)(a2 + 48);
    a5 = *(__n128 *)(a2 + 64);
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    v57 = v11;
    v58[0] = a5;
    a4 = *(__n128 *)(a2 + 74);
    *(__n128 *)((char *)v58 + 10) = a4;
    v10 = 1;
    v59 = 1;
  }
  LOBYTE(v60) = 0;
  v62 = 0;
  if (*(_BYTE *)(a2 + 120))
  {
    v60 = *(_QWORD *)(a2 + 104);
    a4.n128_u64[0] = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a2 + 104) = 0;
    *(_QWORD *)(a2 + 112) = 0;
    v61 = a4.n128_u64[0];
    v62 = 1;
  }
  LOBYTE(v63) = 0;
  v65 = 0;
  if (*(_BYTE *)(a2 + 144))
  {
    v63 = *(_QWORD *)(a2 + 128);
    a4.n128_u64[0] = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a2 + 128) = 0;
    *(_QWORD *)(a2 + 136) = 0;
    v64 = a4.n128_u64[0];
    v65 = 1;
  }
  v66 = *(_BYTE *)(a2 + 152);
  if (!v8)
    goto LABEL_34;
  v12 = v53;
  if (v53)
    *(_DWORD *)v53 += 2;
  v50 = v12;
  v51 = 0;
  if (!*(_BYTE *)(a1 + 160))
    a4.n128_f64[0] = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  WebCore::WebRTCProvider::codecCapability((WebCore::ContentType *)&v50, (uint64_t *)(a1 + 128), (uint64_t)&v46, a4.n128_f64[0], a5.n128_f64[0], a6);
  if (!v49)
  {
    v44 = 0;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    (*(void (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 16))(*a3, &v34);
    WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)((char *)&v34 + 8), v15);
    v14 = 1;
    goto LABEL_29;
  }
  if (v56)
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t, WTF::StringImpl **))(*(_QWORD *)a1 + 136))(&v34, a1, &v53);
    if (v45)
    {
      if ((_BYTE)v34)
      {
        v14 = 0;
        *(_WORD *)((char *)v52 + 1) = *(_WORD *)((char *)&v34 + 1);
LABEL_22:
        WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)((char *)&v34 + 8), v13);
        goto LABEL_23;
      }
      v33 = 0;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      *(_OWORD *)v23 = 0u;
      *(_OWORD *)v24 = 0u;
      (*(void (**)(_QWORD, WTF::StringImpl **))(*(_QWORD *)*a3 + 16))(*a3, v23);
      WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)&v23[1], v16);
      v14 = 1;
      if (v45)
        goto LABEL_22;
    }
    else
    {
      v14 = 0;
    }
LABEL_23:
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
        WTF::StringImpl::destroy(v48, v13);
      else
        *(_DWORD *)v48 -= 2;
    }
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, v13);
      else
        *(_DWORD *)v46 -= 2;
    }
LABEL_29:
    v17 = v50;
    v50 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::destroy(v17, v13);
        if (v14)
          goto LABEL_53;
LABEL_33:
        v10 = v59;
LABEL_34:
        if (v10)
        {
          v18 = (WTF::StringImpl *)v57;
          if ((_QWORD)v57)
            *(_DWORD *)v57 += 2;
          v46 = v18;
          v47 = 0;
          if (!*(_BYTE *)(a1 + 120))
            a4.n128_f64[0] = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
          WebCore::WebRTCProvider::codecCapability((WebCore::ContentType *)&v46, (uint64_t *)(a1 + 88), (uint64_t)v23, a4.n128_f64[0], a5.n128_f64[0], a6);
          if (!(_BYTE)v25)
          {
            v44 = 0;
            v42 = 0u;
            v43 = 0u;
            v40 = 0u;
            v41 = 0u;
            v38 = 0u;
            v39 = 0u;
            v36 = 0u;
            v37 = 0u;
            v34 = 0u;
            v35 = 0u;
            (*(void (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 16))(*a3, &v34);
            WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)((char *)&v34 + 8), v21);
            v22 = v46;
            v46 = 0;
            if (v22)
            {
              if (*(_DWORD *)v22 == 2)
                WTF::StringImpl::destroy(v22, v13);
              else
                *(_DWORD *)v22 -= 2;
            }
            goto LABEL_53;
          }
          if (v24[1])
          {
            if (*(_DWORD *)v24[1] == 2)
              WTF::StringImpl::destroy(v24[1], v19);
            else
              *(_DWORD *)v24[1] -= 2;
          }
          if (v23[0])
          {
            if (*(_DWORD *)v23[0] == 2)
              WTF::StringImpl::destroy(v23[0], v19);
            else
              *(_DWORD *)v23[0] -= 2;
          }
          v20 = v46;
          v46 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v19);
            else
              *(_DWORD *)v20 -= 2;
          }
        }
        LOBYTE(v52[0]) = 1;
        (*(void (**)(_QWORD, _WORD *))(*(_QWORD *)*a3 + 16))(*a3, v52);
LABEL_53:
        WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)&v53, v13);
        return;
      }
      *(_DWORD *)v17 -= 2;
    }
    if (v14)
      goto LABEL_53;
    goto LABEL_33;
  }
  __break(1u);
}

void WebCore::WebRTCProvider::videoDecodingCapabilitiesOverride(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[168] = 0;
}

void WebCore::WebRTCProvider::videoEncodingCapabilitiesOverride(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[168] = 0;
}

void WebCore::AudioMediaStreamTrackRendererCocoa::~AudioMediaStreamTrackRendererCocoa(WebCore::AudioMediaStreamTrackRendererCocoa *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;

  *(_QWORD *)this = off_1E3419978;
  v3 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 21);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (unsigned int *)*((_QWORD *)this + 21);
    *((_QWORD *)this + 21) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 21) = 0;
  }
  v8 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v8)
  {
    v9 = (unsigned int *)(v8 + 8);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v26 = off_1E331A460;
      v26[1] = v9;
      v28 = v26;
      WTF::ensureOnMainRunLoop();
      if (v28)
        (*(void (**)(_QWORD *))(*v28 + 8))(v28);
    }
  }
  v12 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v12)
  {
    v13 = (unsigned int *)(v12 + 8);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v27 = off_1E331A460;
      v27[1] = v13;
      v29 = v27;
      WTF::ensureOnMainRunLoop();
      if (v29)
        (*(void (**)(_QWORD *))(*v29 + 8))(v29);
    }
  }
  v16 = *((_QWORD *)this + 6);
  if (v16)
  {
    *(_QWORD *)(v16 + 8) = 0;
    v17 = (unsigned int *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (v17)
    {
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        atomic_store(1u, v17);
        WTF::fastFree((WTF *)v17, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 6) = 0;
  }
  *(_QWORD *)this = off_1E3417C60;
  v20 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v20)
  {
    v21 = v20 + 2;
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v20 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 8))(v20);
    }
  }
  v24 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
}

{
  WTF *v2;
  void *v3;

  WebCore::AudioMediaStreamTrackRendererCocoa::~AudioMediaStreamTrackRendererCocoa(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::AudioMediaStreamTrackRendererCocoa::start(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;
  Client *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;

  WebCore::AudioMediaStreamTrackRendererCocoa::clear((WebCore::AudioMediaStreamTrackRendererCocoa **)a1);
  if ((_MergedGlobals_238 & 1) == 0)
  {
    qword_1ECE84030 = (uint64_t)off_1E341A058;
    qword_1ECE84038 = 0;
    v14 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 8) = &qword_1ECE84030;
    v15 = (unsigned int *)qword_1ECE84038;
    qword_1ECE84038 = v14;
    if (v15)
    {
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v15);
        WTF::fastFree((WTF *)v15, v13);
      }
    }
    qword_1ECE84030 = (uint64_t)&off_1E3419A28;
    qword_1ECE84040 = (uint64_t)&unk_1E3419A78;
    xmmword_1ECE84048 = 0u;
    unk_1ECE84058 = 0u;
    unk_1ECE84062 = 0u;
    WebCore::createInternalUnit((WebCore::LocalAudioMediaStreamTrackRendererInternalUnit *)&qword_1ECE84040, v13);
    qword_1ECE84080 = 0;
    unk_1ECE84088 = 0;
    _MergedGlobals_238 = 1;
  }
  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
    goto LABEL_19;
  v4 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = a1;
  v6 = *(unsigned int **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v4;
  if (!v6)
    goto LABEL_19;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
  {
LABEL_19:
    do
      v9 = __ldaxr((unsigned int *)v4);
    while (__stlxr(v9 + 1, (unsigned int *)v4));
  }
  v10 = *a2;
  *a2 = 0;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v11 = &off_1E341A170;
  v11[1] = v4;
  v11[2] = v10;
  v18 = v11;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)qword_1ECE84078 + 32))(qword_1ECE84078, &v18);
  result = (uint64_t)v18;
  v18 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::AudioMediaStreamTrackRendererCocoa::clear(WebCore::AudioMediaStreamTrackRendererCocoa **this)
{
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  if (this[19])
  {
    v2 = WebCore::AudioMediaStreamTrackRendererCocoa::rendererUnit(this[3]);
    (*(void (**)(uint64_t *, WebCore::AudioMediaStreamTrackRendererCocoa *))(*v2 + 24))(v2, this[19]);
  }
  v9 = 0;
  result = WebCore::AudioMediaStreamTrackRendererCocoa::setRegisteredDataSource((uint64_t)this, &v9);
  v4 = v9;
  v9 = 0;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E331A460;
      v8[1] = v5;
      v10 = (uint64_t)v8;
      WTF::ensureOnMainRunLoop();
      result = v10;
      v10 = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  if (*((_BYTE *)this + 136))
    *((_BYTE *)this + 136) = 0;
  return result;
}

uint64_t *WebCore::AudioMediaStreamTrackRendererUnit::singleton(WebCore::AudioMediaStreamTrackRendererUnit *this)
{
  Client *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  if ((_MergedGlobals_238 & 1) == 0)
  {
    qword_1ECE84030 = (uint64_t)off_1E341A058;
    qword_1ECE84038 = 0;
    v3 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v3 = 1;
    *(_QWORD *)(v3 + 8) = &qword_1ECE84030;
    v4 = (unsigned int *)qword_1ECE84038;
    qword_1ECE84038 = v3;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, v2);
      }
    }
    qword_1ECE84030 = (uint64_t)&off_1E3419A28;
    qword_1ECE84040 = (uint64_t)&unk_1E3419A78;
    xmmword_1ECE84048 = 0u;
    unk_1ECE84058 = 0u;
    unk_1ECE84062 = 0u;
    WebCore::createInternalUnit((WebCore::LocalAudioMediaStreamTrackRendererInternalUnit *)&qword_1ECE84040, v2);
    qword_1ECE84080 = 0;
    unk_1ECE84088 = 0;
    _MergedGlobals_238 = 1;
  }
  return &qword_1ECE84030;
}

uint64_t *WebCore::AudioMediaStreamTrackRendererCocoa::rendererUnit(WebCore::AudioMediaStreamTrackRendererCocoa *this)
{
  uint64_t *v2;
  uint64_t v3;
  Client *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  if (this)
  {
    v2 = (uint64_t *)*((_QWORD *)this + 9);
    if (!v2)
    {
      v2 = (uint64_t *)WTF::fastMalloc((WTF *)0xC8);
      *v2 = (uint64_t)off_1E3419CA8;
      v2[1] = (uint64_t)&unk_1E3419D08;
      v2[2] = (uint64_t)this;
      WTF::WorkQueue::create();
      *((_BYTE *)v2 + 152) = 0;
      *((_OWORD *)v2 + 2) = 0u;
      *((_OWORD *)v2 + 3) = 0u;
      *(_OWORD *)((char *)v2 + 57) = 0u;
      *((_OWORD *)v2 + 10) = 0u;
      *((_OWORD *)v2 + 11) = 0u;
      v2[24] = WTF::cryptographicallyRandomNumber<unsigned long long>();
      v3 = *((_QWORD *)this + 9);
      *((_QWORD *)this + 9) = v2;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
        return (uint64_t *)*((_QWORD *)this + 9);
      }
    }
  }
  else if ((_MergedGlobals_238 & 1) != 0)
  {
    return &qword_1ECE84030;
  }
  else
  {
    qword_1ECE84030 = (uint64_t)off_1E341A058;
    qword_1ECE84038 = 0;
    v6 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v6 = 1;
    *(_QWORD *)(v6 + 8) = &qword_1ECE84030;
    v7 = (unsigned int *)qword_1ECE84038;
    qword_1ECE84038 = v6;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, v5);
      }
    }
    qword_1ECE84030 = (uint64_t)&off_1E3419A28;
    v2 = &qword_1ECE84030;
    qword_1ECE84040 = (uint64_t)&unk_1E3419A78;
    xmmword_1ECE84048 = 0u;
    unk_1ECE84058 = 0u;
    unk_1ECE84062 = 0u;
    WebCore::createInternalUnit((WebCore::LocalAudioMediaStreamTrackRendererInternalUnit *)&qword_1ECE84040, v5);
    qword_1ECE84080 = 0;
    unk_1ECE84088 = 0;
    _MergedGlobals_238 = 1;
  }
  return v2;
}

uint64_t WebCore::AudioMediaStreamTrackRendererCocoa::stop(uint64_t this)
{
  uint64_t v1;
  uint64_t *v2;

  if (*(_QWORD *)(this + 152))
  {
    v1 = this;
    v2 = WebCore::AudioMediaStreamTrackRendererCocoa::rendererUnit(*(WebCore::AudioMediaStreamTrackRendererCocoa **)(this + 24));
    return (*(uint64_t (**)(uint64_t *, _QWORD))(*v2 + 24))(v2, *(_QWORD *)(v1 + 152));
  }
  return this;
}

uint64_t WebCore::AudioMediaStreamTrackRendererCocoa::setRegisteredDataSource(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;

  v3 = result;
  if (*(_QWORD *)(result + 152))
  {
    v4 = WebCore::AudioMediaStreamTrackRendererCocoa::rendererUnit(*(WebCore::AudioMediaStreamTrackRendererCocoa **)(result + 24));
    result = (*(uint64_t (**)(uint64_t *, _QWORD))(*v4 + 24))(v4, *(_QWORD *)(v3 + 152));
  }
  if (*(_BYTE *)(v3 + 136))
  {
    v5 = *a2;
    *a2 = 0;
    v6 = *(_QWORD *)(v3 + 152);
    *(_QWORD *)(v3 + 152) = v5;
    if (v6)
    {
      v7 = (unsigned int *)(v6 + 8);
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v27 = off_1E331A460;
        v27[1] = v7;
        v31 = v27;
        WTF::ensureOnMainRunLoop();
        result = (uint64_t)v31;
        v31 = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
      v5 = *(_QWORD *)(v3 + 152);
    }
    if (v5)
    {
      v10 = *(_QWORD *)(v3 + 32);
      v11 = (unsigned int *)(v10 + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
      v13 = *(_QWORD *)(v3 + 40);
      v14 = *(unsigned int **)(v5 + 368);
      *(_QWORD *)(v5 + 368) = v10;
      if (v14)
      {
        v15 = v14 + 2;
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          atomic_store(1u, v14 + 2);
          v29 = v5;
          (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
          v5 = v29;
        }
      }
      *(_QWORD *)(v5 + 376) = v13;
      *(_DWORD *)(*(_QWORD *)(v3 + 152) + 360) = *(_DWORD *)(v3 + 8);
      v18 = WebCore::AudioMediaStreamTrackRendererCocoa::rendererUnit(*(WebCore::AudioMediaStreamTrackRendererCocoa **)(v3 + 24));
      (*(void (**)(uint64_t *, uint64_t))(*v18 + 40))(v18, v3 + 168);
      v19 = WebCore::AudioMediaStreamTrackRendererCocoa::rendererUnit(*(WebCore::AudioMediaStreamTrackRendererCocoa **)(v3 + 24));
      v20 = *(_QWORD *)(v3 + 152);
      v21 = (unsigned int *)(v20 + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 + 1, v21));
      v30 = v20;
      result = (*(uint64_t (**)(uint64_t *, uint64_t *))(*v19 + 16))(v19, &v30);
      v23 = v30;
      v30 = 0;
      if (v23)
      {
        v24 = (unsigned int *)(v23 + 8);
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v28 = off_1E331A460;
          v28[1] = v24;
          v31 = v28;
          WTF::ensureOnMainRunLoop();
          result = (uint64_t)v31;
          v31 = 0;
          if (result)
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::AudioMediaStreamTrackRendererCocoa::setVolume(uint64_t this, float a2)
{
  uint64_t v2;

  *(float *)(this + 8) = a2;
  v2 = *(_QWORD *)(this + 152);
  if (v2)
    *(float *)(v2 + 360) = a2;
  return this;
}

uint64_t WebCore::AudioMediaStreamTrackRendererCocoa::setAudioOutputDevice(WebCore::AudioMediaStreamTrackRendererCocoa **this, const WTF::String *a2)
{
  uint64_t *v4;
  uint64_t result;

  v4 = WebCore::AudioMediaStreamTrackRendererCocoa::rendererUnit(this[3]);
  result = (*(uint64_t (**)(uint64_t *, const WTF::String *))(*v4 + 32))(v4, a2);
  *((_BYTE *)this + 160) = 1;
  return result;
}

uint64_t WebCore::AudioMediaStreamTrackRendererCocoa::pushSamples(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  OpaqueAudioConverter **v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  _Unwind_Exception *v43;
  void *v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v10 = *(_QWORD *)(a1 + 144);
  if (v10
    && !*(_BYTE *)(a1 + 160)
    && *(_BYTE *)(v10 + 96)
    && *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4) == 1)
  {
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4);
    if (*(_DWORD *)(v24 + 16) != 1)
    {
LABEL_52:
      v43 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();
      WTF::fastFree((WTF *)v10, v44);
      _Unwind_Resume(v43);
    }
    v25 = *(_QWORD *)(v24 + 8);
    if (*(double *)(v10 + 24) == *(double *)v25
      && *(_DWORD *)(v10 + 32) == *(_DWORD *)(v25 + 8)
      && *(_DWORD *)(v10 + 36) == *(_DWORD *)(v25 + 12)
      && *(_DWORD *)(v10 + 40) == *(_DWORD *)(v25 + 16)
      && *(_DWORD *)(v10 + 44) == *(_DWORD *)(v25 + 20)
      && *(_DWORD *)(v10 + 48) == *(_DWORD *)(v25 + 24)
      && *(_DWORD *)(v10 + 52) == *(_DWORD *)(v25 + 28)
      && *(_DWORD *)(v10 + 56) == *(_DWORD *)(v25 + 32))
    {
      return WebCore::AudioSampleDataSource::pushSamples(*(_QWORD *)(a1 + 144), a2, a3, a5);
    }
  }
  v11 = (unint64_t)((*(double (**)(uint64_t))(*(_QWORD *)a4 + 32))(a4) * 0.5);
  v10 = WTF::fastMalloc((WTF *)0x180);
  WebCore::AudioSampleDataSource::AudioSampleDataSource(v10, v11, a1, 2);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4);
  if (*(_DWORD *)(result + 16) != 1)
    goto LABEL_52;
  v14 = *(__int128 **)(result + 8);
  v45 = *v14;
  v46 = v14[1];
  v47 = *((_QWORD *)v14 + 4);
  if (*(_BYTE *)(v10 + 96))
  {
    v15 = *v14;
    v16 = v14[1];
    *(_QWORD *)(v10 + 56) = *((_QWORD *)v14 + 4);
    *(_OWORD *)(v10 + 40) = v16;
    *(_OWORD *)(v10 + 24) = v15;
  }
  else
  {
    *(_QWORD *)(v10 + 16) = off_1E34087C0;
    *(_OWORD *)(v10 + 24) = v45;
    *(_OWORD *)(v10 + 40) = v46;
    *(_QWORD *)(v10 + 56) = v47;
    *(_BYTE *)(v10 + 96) = 1;
  }
  *(_DWORD *)(v10 + 64) = 0;
  *(_QWORD *)(v10 + 72) = 0;
  *(_DWORD *)(v10 + 80) = 0;
  *(_DWORD *)(v10 + 88) = 0;
  if (*(_BYTE *)(v10 + 184)
    && (result = WebCore::AudioSampleDataConverter::setFormats(v10 + 256, (_DWORD *)(v10 + 16), v10 + 104, v13),
        (_DWORD)result))
  {
    v17 = *(_QWORD *)(a1 + 32);
    v18 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)&v45 = "AudioMediaStreamTrackRenderer";
    *((_QWORD *)&v45 + 1) = 30;
    *(_QWORD *)&v46 = "pushSamples";
    *((_QWORD *)&v46 + 1) = v18;
    if (*(_BYTE *)(v17 + 12))
      result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 1u, (WTF::Logger::LogSiteIdentifier *)&v45, "Unable to set the input format of data source");
  }
  else
  {
    if (*(_BYTE *)(a1 + 136))
    {
      result = WebCore::AudioSampleDataSource::setOutputFormat((WebCore::AudioSampleDataSource *)v10, (const WebCore::CAAudioStreamDescription *)(a1 + 56));
      if (!(_DWORD)result)
      {
        v26 = *(_QWORD *)(a1 + 48);
        if (v26)
          goto LABEL_55;
        v26 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v26 = 1;
        *(_QWORD *)(v26 + 8) = a1;
        v28 = *(unsigned int **)(a1 + 48);
        *(_QWORD *)(a1 + 48) = v26;
        if (!v28)
          goto LABEL_55;
        do
        {
          v29 = __ldaxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
        {
          atomic_store(1u, v28);
          WTF::fastFree((WTF *)v28, v27);
        }
        v26 = *(_QWORD *)(a1 + 48);
        if (v26)
        {
LABEL_55:
          do
            v31 = __ldaxr((unsigned int *)v26);
          while (__stlxr(v31 + 1, (unsigned int *)v26));
        }
        v32 = (unsigned int *)(v10 + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 + 1, v32));
        v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v34 = &off_1E341A198;
        v34[1] = v26;
        v34[2] = v10;
        *(_QWORD *)&v45 = v34;
        WTF::callOnMainThread();
        v35 = v45;
        *(_QWORD *)&v45 = 0;
        if (v35)
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
        v36 = *(_QWORD *)(a1 + 144);
        *(_QWORD *)(a1 + 144) = v10;
        if (v36)
        {
          v37 = (unsigned int *)(v36 + 8);
          do
          {
            v38 = __ldaxr(v37);
            v39 = v38 - 1;
          }
          while (__stlxr(v39, v37));
          if (!v39)
          {
            atomic_store(1u, v37);
            v41 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v41 = off_1E331A460;
            v41[1] = v37;
            *(_QWORD *)&v45 = v41;
            WTF::ensureOnMainRunLoop();
            v42 = v45;
            *(_QWORD *)&v45 = 0;
            if (v42)
              (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
          }
        }
        *(_BYTE *)(a1 + 160) = 0;
        return WebCore::AudioSampleDataSource::pushSamples(*(_QWORD *)(a1 + 144), a2, a3, a5);
      }
    }
    v19 = *(_QWORD *)(a1 + 32);
    v20 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)&v45 = "AudioMediaStreamTrackRenderer";
    *((_QWORD *)&v45 + 1) = 30;
    *(_QWORD *)&v46 = "pushSamples";
    *((_QWORD *)&v46 + 1) = v20;
    if (*(_BYTE *)(v19 + 12))
      result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 1u, (WTF::Logger::LogSiteIdentifier *)&v45, "Unable to set the output format of data source");
  }
  v21 = (unsigned int *)(v10 + 8);
  do
  {
    v22 = __ldaxr(v21);
    v23 = v22 - 1;
  }
  while (__stlxr(v23, v21));
  if (!v23)
  {
    atomic_store(1u, v21);
    v40 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v40 = off_1E331A460;
    v40[1] = v21;
    *(_QWORD *)&v45 = v40;
    WTF::ensureOnMainRunLoop();
    result = v45;
    *(_QWORD *)&v45 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebCore::LocalAudioMediaStreamTrackRendererInternalUnit::retrieveFormatDescription(uint64_t a1, uint64_t *a2, const AudioComponentDescription *a3)
{
  char v5;
  __int128 v6;
  uint64_t v7;
  void (**v9)(WebCore::CAAudioStreamDescription *__hidden);
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  char v15;

  WebCore::LocalAudioMediaStreamTrackRendererInternalUnit::createAudioUnitIfNeeded((WebCore::LocalAudioMediaStreamTrackRendererInternalUnit *)a1, (uint64_t)a2, a3);
  v5 = *(_BYTE *)(a1 + 96);
  if (v5)
  {
    v6 = *(_OWORD *)(a1 + 56);
    v11 = *(_OWORD *)(a1 + 40);
    v12 = v6;
    v13 = *(_OWORD *)(a1 + 72);
    v14 = *(_DWORD *)(a1 + 88);
    v10 = *(_OWORD *)(a1 + 24);
    v7 = *a2;
    v9 = off_1E34087C0;
    v5 = 1;
  }
  else
  {
    v7 = *a2;
    LOBYTE(v9) = 0;
  }
  *a2 = 0;
  v15 = v5;
  (*(void (**)(uint64_t, void (***)(WebCore::CAAudioStreamDescription *__hidden)))(*(_QWORD *)v7 + 16))(v7, &v9);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

void WebCore::LocalAudioMediaStreamTrackRendererInternalUnit::createAudioUnitIfNeeded(WebCore::LocalAudioMediaStreamTrackRendererInternalUnit *this, uint64_t a2, const AudioComponentDescription *a3)
{
  PAL *Next;
  OpaqueAudioComponentInstance **v5;
  int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint8_t *v12;
  NSObject *v13;
  uint32_t v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int *v19;
  int v20;
  int v21;
  OpaqueAudioComponentInstance *v22;
  int v23;
  WebCore::AudioSession *Property;
  int v25;
  int v26;
  int v27;
  WebCore::AudioSessionIOS *v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  int v32;
  _QWORD v33[2];
  int v34;
  __int128 v35;
  int v36;
  PAL *v37;
  _DWORD v38[4];
  uint8_t buf[16];
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 13))
    return;
  v37 = 0;
  v35 = *(_OWORD *)"uoua";
  v36 = 0;
  DWORD1(v35) = 1919512419;
  Next = (PAL *)PAL::softLinkAudioToolboxAudioComponentFindNext(0, (OpaqueAudioComponent *)&v35, a3);
  if (!Next)
  {
    v11 = qword_1ECE7CD60;
    if (!os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
      return;
    *(_WORD *)buf = 0;
    v10 = "AudioMediaStreamTrackRendererInternalUnit::createAudioUnit unable to find remote IO unit component";
    v12 = buf;
    v13 = v11;
    v14 = 2;
LABEL_27:
    _os_log_error_impl(&dword_1940B8000, v13, OS_LOG_TYPE_ERROR, v10, v12, v14);
    return;
  }
  v6 = PAL::softLinkAudioToolboxAudioComponentInstanceNew(Next, (OpaqueAudioComponent *)&v37, v5);
  if (v6)
  {
    v8 = v6;
    v9 = qword_1ECE7CD60;
    if (!os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
      return;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v8;
    v10 = "AudioMediaStreamTrackRendererInternalUnit::createAudioUnit unable to open vpio unit, error = %d";
    goto LABEL_25;
  }
  v34 = 1;
  v15 = PAL::softLinkAudioToolboxAudioUnitSetProperty(v37, (OpaqueAudioComponentInstance *)0x7D3, 2u, 0, &v34, (const void *)4, v7);
  if (v15)
  {
    v17 = v15;
    v9 = qword_1ECE7CD60;
    if (!os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
      return;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v17;
    v10 = "AudioMediaStreamTrackRendererInternalUnit::createAudioUnit unable to enable vpio unit output, error = %d";
    goto LABEL_25;
  }
  v33[0] = WebCore::LocalAudioMediaStreamTrackRendererInternalUnit::renderingCallback;
  v33[1] = this;
  v18 = PAL::softLinkAudioToolboxAudioUnitSetProperty(v37, (OpaqueAudioComponentInstance *)0x17, 0, 0, v33, (const void *)0x10, v16);
  if (v18)
  {
    v20 = v18;
    v9 = qword_1ECE7CD60;
    if (!os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
      return;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v20;
    v10 = "AudioMediaStreamTrackRendererInternalUnit::createAudioUnit unable to set vpio unit speaker proc, error = %d";
    goto LABEL_25;
  }
  if (!*((_BYTE *)this + 96))
  {
    v41 = 0;
    *(_OWORD *)buf = 0u;
    v40 = 0u;
    v32 = 40;
    Property = (WebCore::AudioSession *)PAL::softLinkAudioToolboxAudioUnitGetProperty(v37, (OpaqueAudioComponentInstance *)8, 1u, 0, buf, &v32, v19);
    if ((_DWORD)Property)
    {
      v25 = (int)Property;
      v9 = qword_1ECE7CD60;
      if (!os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
        return;
      v38[0] = 67109120;
      v38[1] = v25;
      v10 = "AudioMediaStreamTrackRendererInternalUnit::createAudioUnit unable to get input stream format, error = %d";
      v12 = (uint8_t *)v38;
      goto LABEL_26;
    }
    v28 = WebCore::AudioSession::sharedSession(Property);
    *(double *)buf = (*(float (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v28 + 72))(v28);
    v29 = (_OWORD *)((char *)this + 24);
    if (*((_BYTE *)this + 96))
    {
      v30 = v40;
      *v29 = *(_OWORD *)buf;
      *(_OWORD *)((char *)this + 40) = v30;
      *((_QWORD *)this + 7) = v41;
      *((_DWORD *)this + 16) = 0;
      *((_QWORD *)this + 9) = 0;
      *((_DWORD *)this + 20) = 0;
      *((_DWORD *)this + 22) = 0;
    }
    else
    {
      *((_QWORD *)this + 2) = off_1E34087C0;
      v31 = v40;
      *v29 = *(_OWORD *)buf;
      *(_OWORD *)((char *)this + 40) = v31;
      *((_QWORD *)this + 7) = v41;
      *((_DWORD *)this + 16) = 0;
      *((_QWORD *)this + 9) = 0;
      *((_DWORD *)this + 20) = 0;
      *((_DWORD *)this + 22) = 0;
      *((_BYTE *)this + 96) = 1;
    }
  }
  v21 = PAL::softLinkAudioToolboxAudioUnitSetProperty(v37, (OpaqueAudioComponentInstance *)8, 1u, 0, (int)this + 24, (const void *)0x28, v19);
  if (v21)
  {
    v23 = v21;
    v9 = qword_1ECE7CD60;
    if (!os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
      return;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v23;
    v10 = "AudioMediaStreamTrackRendererInternalUnit::createAudioUnit unable to set input stream format, error = %d";
    goto LABEL_25;
  }
  v26 = PAL::softLinkAudioToolboxAudioUnitInitialize(v37, v22);
  if (!v26)
  {
    *((_QWORD *)this + 13) = v37;
    return;
  }
  v27 = v26;
  v9 = qword_1ECE7CD60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v27;
    v10 = "AudioMediaStreamTrackRendererInternalUnit::createAudioUnit AudioUnitInitialize() failed, error = %d";
LABEL_25:
    v12 = buf;
LABEL_26:
    v13 = v9;
    v14 = 8;
    goto LABEL_27;
  }
}

void WebCore::LocalAudioMediaStreamTrackRendererInternalUnit::start(PAL **this)
{
  NSObject *v2;
  uint64_t v3;
  const AudioComponentDescription *v4;
  OpaqueAudioComponentInstance *v5;
  PAL *v6;
  int v7;
  int v8;
  NSObject *v9;
  OpaqueAudioComponentInstance *v10;
  NSObject *v11;
  _DWORD v12[2];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE7CD60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_INFO))
  {
    LOWORD(v12[0]) = 0;
    _os_log_impl(&dword_1940B8000, v2, OS_LOG_TYPE_INFO, "LocalAudioMediaStreamTrackRendererInternalUnit::start", (uint8_t *)v12, 2u);
  }
  if (!*((_BYTE *)this + 112))
  {
    WebCore::LocalAudioMediaStreamTrackRendererInternalUnit::createAudioUnitIfNeeded((WebCore::LocalAudioMediaStreamTrackRendererInternalUnit *)this, v3, v4);
    v6 = this[13];
    if (v6)
    {
      this[15] = 0;
      v7 = PAL::softLinkAudioToolboxAudioOutputUnitStart(v6, v5);
      if (v7)
      {
        v8 = v7;
        v9 = qword_1ECE7CD60;
        if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
        {
          v12[0] = 67109120;
          v12[1] = v8;
          _os_log_error_impl(&dword_1940B8000, v9, OS_LOG_TYPE_ERROR, "AudioMediaStreamTrackRendererInternalUnit::start AudioOutputUnitStart failed, error = %d", (uint8_t *)v12, 8u);
        }
        PAL::softLinkAudioToolboxAudioComponentInstanceDispose(this[13], v10);
        this[13] = 0;
      }
      else
      {
        *((_BYTE *)this + 112) = 1;
        v11 = qword_1ECE7CD60;
        if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v12[0]) = 0;
          _os_log_impl(&dword_1940B8000, v11, OS_LOG_TYPE_DEFAULT, "AudioMediaStreamTrackRendererInternalUnit is started", (uint8_t *)v12, 2u);
        }
      }
    }
  }
}

PAL *WebCore::LocalAudioMediaStreamTrackRendererInternalUnit::stop(WebCore::LocalAudioMediaStreamTrackRendererInternalUnit *this)
{
  NSObject *v2;
  OpaqueAudioComponentInstance *v3;
  PAL *result;
  uint8_t v5[16];

  v2 = qword_1ECE7CD60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1940B8000, v2, OS_LOG_TYPE_INFO, "LocalAudioMediaStreamTrackRendererInternalUnit::stop", v5, 2u);
  }
  result = (PAL *)*((_QWORD *)this + 13);
  if (result)
  {
    if (*((_BYTE *)this + 112))
    {
      PAL::softLinkAudioToolboxAudioOutputUnitStop(result, v3);
      *((_BYTE *)this + 112) = 0;
      result = (PAL *)*((_QWORD *)this + 13);
    }
    result = (PAL *)PAL::softLinkAudioToolboxAudioComponentInstanceDispose(result, v3);
    *((_QWORD *)this + 13) = 0;
  }
  return result;
}

void *WebCore::LocalAudioMediaStreamTrackRendererInternalUnit::renderingCallback(WebCore::LocalAudioMediaStreamTrackRendererInternalUnit *this, void *a2, unsigned int *a3, const AudioTimeStamp *a4, unsigned int a5, _DWORD *a6, AudioBufferList *a7)
{
  double v12;
  unint64_t v13;
  double v15;
  void *v16;
  int v17;
  unint64_t v18;
  double **v19;
  double *v20;
  vDSP_Length v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v28;
  float **v29;
  float *v30;
  vDSP_Length v31;
  uint64_t v33;
  double __B;

  v12 = *(double *)a3;
  v13 = *((_QWORD *)this + 15);
  if (v13)
  {
    if (v12 <= (double)v13 || v12 > (double)(v13 + 2 * a5))
      (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
  }
  v15 = 0.0;
  if (v12 < 1.79769313e308 - (double)a5)
    v15 = v12;
  *((_QWORD *)this + 15) = (unint64_t)v15;
  v16 = (void *)(*(uint64_t (**)(_QWORD, _QWORD, _DWORD *, unint64_t, void *, _DWORD *, AudioBufferList *, double))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), a5, a6, (unint64_t)v12, a2, a6, a7, (double)*((unint64_t *)a3 + 1));
  if (!*((_BYTE *)this + 96))
  {
    __break(1u);
    goto LABEL_43;
  }
  a2 = v16;
  v17 = *((_DWORD *)this + 22);
  if (v17)
    goto LABEL_11;
  if (*((_DWORD *)this + 8) == 1819304813 && *((_DWORD *)this + 11) == 1)
  {
    v22 = *((_DWORD *)this + 12);
    if (v22 == *((_DWORD *)this + 10))
    {
      v23 = *((_DWORD *)this + 13);
      if (v23)
      {
        v24 = *((_DWORD *)this + 9);
        if ((v24 & 2) == 0)
        {
          v25 = *((_DWORD *)this + 14);
          if ((v25 & 7) == 0)
          {
            v26 = v25 >> 3;
            if ((v24 & 0x20) != 0)
              v23 = 1;
            if (!(v22 % v23) && v22 / v23 == v26)
            {
              if ((*((_DWORD *)this + 9) & 0x1F85) == 4)
              {
                if (v26 == 2)
                {
                  v17 = 1;
                }
                else
                {
                  if (v26 != 4)
                    return a2;
                  v17 = 2;
                }
                goto LABEL_45;
              }
              if ((*((_DWORD *)this + 9) & 0x1F85) != 1)
                return a2;
              if (v26 != 4)
              {
                if (v26 != 8)
                  return a2;
                v17 = 4;
                goto LABEL_45;
              }
LABEL_43:
              v17 = 3;
LABEL_45:
              *((_DWORD *)this + 22) = v17;
LABEL_11:
              if (v17 == 3)
              {
                if (*a6)
                {
                  v28 = 0;
                  v29 = (float **)(a6 + 4);
                  do
                  {
                    v30 = *v29;
                    v31 = (unint64_t)*((unsigned int *)v29 - 1) >> 2;
                    LODWORD(__B) = -1082130432;
                    LODWORD(v33) = 1065353216;
                    vDSP_vclip(v30, 1, (const float *)&__B, (const float *)&v33, v30, 1, v31);
                    ++v28;
                    v29 += 2;
                  }
                  while (v28 < *a6);
                }
              }
              else if (v17 == 4 && *a6)
              {
                v18 = 0;
                v19 = (double **)(a6 + 4);
                do
                {
                  v20 = *v19;
                  v21 = (unint64_t)*((unsigned int *)v19 - 1) >> 3;
                  v33 = 0x3FF0000000000000;
                  __B = -1.0;
                  vDSP_vclipD(v20, 1, &__B, (const double *)&v33, v20, 1, v21);
                  ++v18;
                  v19 += 2;
                }
                while (v18 < *a6);
              }
            }
          }
        }
      }
    }
  }
  return a2;
}

uint64_t WebCore::AudioMediaStreamTrackRendererInternalUnit::create(WebCore::AudioMediaStreamTrackRendererInternalUnit *this, Client *a2)
{
  return WebCore::createInternalUnit(this, (Client *)WebCore::createInternalUnit);
}

void WebCore::AudioMediaStreamTrackRendererUnit::~AudioMediaStreamTrackRendererUnit(WebCore::AudioMediaStreamTrackRendererUnit *this)
{
  NSObject *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD *v13;
  _QWORD *v14;
  WTF *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *v23;
  _QWORD *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t j;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t i;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  uint8_t v44[16];

  *(_QWORD *)this = &off_1E3419A28;
  *((_QWORD *)this + 2) = &unk_1E3419A78;
  v2 = qword_1ECE7CD60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v44 = 0;
    _os_log_impl(&dword_1940B8000, v2, OS_LOG_TYPE_DEFAULT, "AudioMediaStreamTrackRendererUnit::stop", v44, 2u);
  }
  (*(void (**)(_QWORD))(**((_QWORD **)this + 9) + 24))(*((_QWORD *)this + 9));
  v4 = *((_QWORD *)this + 10);
  if (v4)
  {
    v39 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v39)
    {
      for (i = 0; i != v39; ++i)
      {
        v41 = *(unsigned int **)(v4 + 8 * i);
        if (v41 != (unsigned int *)-1)
        {
          *(_QWORD *)(v4 + 8 * i) = 0;
          if (v41)
          {
            do
            {
              v42 = __ldaxr(v41);
              v43 = v42 - 1;
            }
            while (__stlxr(v43, v41));
            if (!v43)
            {
              atomic_store(1u, v41);
              WTF::fastFree((WTF *)v41, v3);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v4 - 16), v3);
  }
  v5 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((unsigned int *)this + 15);
  if ((_DWORD)v6)
  {
    v7 = (uint64_t *)*((_QWORD *)this + 6);
    v8 = &v7[v6];
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        v10 = (unsigned int *)(v9 + 8);
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v10);
          v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v13 = off_1E331A460;
          v13[1] = v10;
          *(_QWORD *)v44 = v13;
          WTF::ensureOnMainRunLoop();
          v14 = *(_QWORD **)v44;
          *(_QWORD *)v44 = 0;
          if (v14)
            (*(void (**)(_QWORD *))(*v14 + 8))(v14);
        }
      }
      ++v7;
    }
    while (v7 != v8);
  }
  v15 = (WTF *)*((_QWORD *)this + 6);
  if (v15)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v15, v3);
  }
  v16 = *((unsigned int *)this + 11);
  if ((_DWORD)v16)
  {
    v17 = (uint64_t *)*((_QWORD *)this + 4);
    v18 = &v17[v16];
    do
    {
      v19 = *v17;
      *v17 = 0;
      if (v19)
      {
        v20 = (unsigned int *)(v19 + 8);
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v20);
          v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v23 = off_1E331A460;
          v23[1] = v20;
          *(_QWORD *)v44 = v23;
          WTF::ensureOnMainRunLoop();
          v24 = *(_QWORD **)v44;
          *(_QWORD *)v44 = 0;
          if (v24)
            (*(void (**)(_QWORD *))(*v24 + 8))(v24);
        }
      }
      ++v17;
    }
    while (v17 != v18);
  }
  v25 = (WTF *)*((_QWORD *)this + 4);
  if (v25)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v25, v3);
  }
  v26 = *((_QWORD *)this + 3);
  if (v26)
  {
    v27 = *(unsigned int *)(v26 - 4);
    if ((_DWORD)v27)
    {
      for (j = 0; j != v27; ++j)
      {
        v29 = *(_QWORD *)(v26 + 8 * j);
        if (v29 != -1)
        {
          *(_QWORD *)(v26 + 8 * j) = 0;
          if (v29)
          {
            v30 = (unsigned int *)(v29 + 8);
            do
            {
              v31 = __ldaxr(v30);
              v32 = v31 - 1;
            }
            while (__stlxr(v32, v30));
            if (!v32)
            {
              atomic_store(1u, v30);
              v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v33 = off_1E331A460;
              v33[1] = v30;
              *(_QWORD *)v44 = v33;
              WTF::ensureOnMainRunLoop();
              v34 = *(_QWORD **)v44;
              *(_QWORD *)v44 = 0;
              if (v34)
                (*(void (**)(_QWORD *))(*v34 + 8))(v34);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v26 - 16), v3);
  }
  v35 = *((_QWORD *)this + 1);
  if (v35)
  {
    *(_QWORD *)(v35 + 8) = 0;
    v36 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v36)
    {
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (!v38)
      {
        atomic_store(1u, v36);
        WTF::fastFree((WTF *)v36, v3);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WebCore::AudioMediaStreamTrackRendererUnit::~AudioMediaStreamTrackRendererUnit(this);
  JUMPOUT(0x19AEA7644);
}

void `non-virtual thunk to'WebCore::AudioMediaStreamTrackRendererUnit::~AudioMediaStreamTrackRendererUnit(WebCore::AudioMediaStreamTrackRendererUnit *this)
{
  WebCore::AudioMediaStreamTrackRendererUnit::~AudioMediaStreamTrackRendererUnit((WebCore::AudioMediaStreamTrackRendererUnit *)((char *)this - 16));
}

{
  WebCore::AudioMediaStreamTrackRendererUnit::~AudioMediaStreamTrackRendererUnit((WebCore::AudioMediaStreamTrackRendererUnit *)((char *)this - 16));
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::AudioMediaStreamTrackRendererUnit::setAudioOutputDevice(WebCore::AudioMediaStreamTrackRendererUnit *this, const WTF::String *a2)
{
  return (*(uint64_t (**)(_QWORD, const WTF::String *))(**((_QWORD **)this + 9) + 40))(*((_QWORD *)this + 9), a2);
}

WTF *WebCore::AudioMediaStreamTrackRendererUnit::addSource(uint64_t a1, uint64_t *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  char *v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::Logger *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::Logger *v28;
  uint64_t v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t **v37;
  _BOOL4 v38;
  void *v39;
  unsigned __int8 *v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  _QWORD *v58;
  uint64_t v59;
  WTF *result;
  int v61;
  NSObject *v62;
  uint64_t *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  WTF::Logger *v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  __int128 buf;
  int v74;
  WTF::StringImpl *v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(*(_QWORD *)(*a2 + 368) + 12))
    goto LABEL_66;
  WTF::String::String((WTF::String *)&v71, "AudioMediaStreamTrackRendererUnit::addSource ");
  WTF::LogArgument<void const*>::toString();
  if (!v71)
  {
    v4 = 0;
    if (v70)
      goto LABEL_4;
LABEL_124:
    v5 = 0;
    goto LABEL_5;
  }
  v4 = *((_DWORD *)v71 + 1);
  if (!v70)
    goto LABEL_124;
LABEL_4:
  v5 = *((_DWORD *)v70 + 1);
LABEL_5:
  if ((v5 | v4) < 0 || (v6 = (v4 + v5), __OFADD__(v4, v5)))
  {
    v72 = 0;
    goto LABEL_128;
  }
  if (v71)
  {
    v7 = *((_DWORD *)v71 + 4);
    v8 = (v7 >> 2) & 1;
    if (v70 && (v7 & 4) != 0)
      goto LABEL_10;
  }
  else
  {
    if (v70)
    {
LABEL_10:
      v8 = (*((unsigned __int8 *)v70 + 16) >> 2) & 1;
      goto LABEL_11;
    }
    v8 = 1;
  }
LABEL_11:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v6, v8, (uint64_t)v71, (uint64_t)v70, &v72);
  if (!v72)
  {
LABEL_128:
    __break(0xC471u);
    goto LABEL_130;
  }
  v10 = v70;
  v70 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v71;
  v71 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = qword_1ECE7CD60;
  v13 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v13)
  {
    WTF::String::utf8();
    v15 = v68 ? (char *)v68 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v15;
    _os_log_impl(&dword_1940B8000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v13 = (uint64_t)v68;
    v68 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
        v13 = WTF::fastFree((WTF *)v13, v14);
      else
        --*(_DWORD *)v13;
    }
  }
  if (WebCore::LogWebRTC)
  {
    v16 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v17 = *v16;
      if ((v17 & 1) != 0)
        break;
      v18 = __ldaxr(v16);
      if (v18 == v17)
      {
        if (!__stxr(v17 | 1, v16))
        {
          v19 = WTF::Logger::observers((WTF::Logger *)v13);
          v20 = *(unsigned int *)(v19 + 12);
          if ((_DWORD)v20)
          {
            v21 = *(uint64_t **)v19;
            v22 = *(_QWORD *)v19 + 8 * v20;
            do
            {
              v23 = *v21;
              LODWORD(buf) = 0;
              WTF::String::String((WTF::String *)((char *)&buf + 8), "AudioMediaStreamTrackRendererUnit::addSource ");
              v74 = 0;
              WTF::LogArgument<void const*>::toString();
              v68 = 0;
              v69 = 0;
              v24 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v69) = 2;
              v68 = v24;
              v25 = HIDWORD(v69);
              *((_DWORD *)v24 + 4 * HIDWORD(v69)) = buf;
              v26 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v24 + 2 * v25 + 1) = v26;
              *((_DWORD *)v24 + 4 * (v25 + 1)) = v74;
              v27 = v75;
              if (v75)
                *(_DWORD *)v75 += 2;
              *((_QWORD *)v24 + 2 * (v25 + 1) + 1) = v27;
              HIDWORD(v69) = v25 + 2;
              (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v23 + 16))(v23, &WebCore::LogWebRTC, 0, &v68);
              v28 = v68;
              if (HIDWORD(v69))
              {
                v29 = 16 * HIDWORD(v69);
                v30 = (WTF::StringImpl **)((char *)v68 + 8);
                do
                {
                  v31 = *v30;
                  *v30 = 0;
                  if (v31)
                  {
                    if (*(_DWORD *)v31 == 2)
                      WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v14);
                    else
                      *(_DWORD *)v31 -= 2;
                  }
                  v30 += 2;
                  v29 -= 16;
                }
                while (v29);
                v28 = v68;
              }
              if (v28)
              {
                v68 = 0;
                LODWORD(v69) = 0;
                WTF::fastFree(v28, v14);
              }
              v32 = v75;
              v75 = 0;
              if (v32)
              {
                if (*(_DWORD *)v32 == 2)
                  WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v14);
                else
                  *(_DWORD *)v32 -= 2;
              }
              v33 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v33)
              {
                if (*(_DWORD *)v33 == 2)
                  WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v14);
                else
                  *(_DWORD *)v33 -= 2;
              }
              ++v21;
            }
            while (v21 != (uint64_t *)v22);
          }
          v34 = __ldxr(v16);
          if (v34 == 1)
          {
            if (!__stlxr(0, v16))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v35 = v72;
  v72 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v14);
    else
      *(_DWORD *)v35 -= 2;
  }
LABEL_66:
  v37 = (uint64_t **)(a1 + 24);
  v36 = *(_QWORD *)(a1 + 24);
  if (v36)
    v38 = *(_DWORD *)(v36 - 12) == 0;
  else
    v38 = 1;
  WTF::HashTable<WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>,WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>>,WTF::HashTraits<WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>>,WTF::HashTraits<WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>>>::add((uint64_t *)&buf, (uint64_t *)(a1 + 24), a2);
  v40 = (unsigned __int8 *)(a1 + 65);
  if (__ldaxr((unsigned __int8 *)(a1 + 65)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v40))
  {
    goto LABEL_73;
  }
  MEMORY[0x19AEA534C](a1 + 65);
LABEL_73:
  if (!*v37)
  {
    v44 = 0;
    LODWORD(v42) = 0;
LABEL_85:
    v49 = 0;
    goto LABEL_86;
  }
  v42 = *((unsigned int *)*v37 - 3);
  if (!(_DWORD)v42)
  {
    v44 = 0;
    goto LABEL_85;
  }
  if (v42 >> 29)
  {
    __break(0xC471u);
LABEL_130:
    JUMPOUT(0x1962AE444);
  }
  v43 = WTF::fastMalloc((WTF *)(8 * v42));
  v44 = v43;
  v45 = *v37;
  if (!*v37 || !*((_DWORD *)v45 - 3))
    goto LABEL_85;
  v46 = *((unsigned int *)v45 - 1);
  if ((_DWORD)v46)
  {
    v47 = 8 * v46;
    v48 = *v37;
    while ((unint64_t)(*v48 + 1) <= 1)
    {
      ++v48;
      v47 -= 8;
      if (!v47)
        goto LABEL_85;
    }
  }
  else
  {
    v48 = *v37;
  }
  v63 = &v45[v46];
  if (v48 == v63)
    goto LABEL_85;
  v64 = 0;
  v65 = *v48;
LABEL_112:
  v66 = (unsigned int *)(v65 + 8);
  do
    v67 = __ldaxr(v66);
  while (__stlxr(v67 + 1, v66));
  v49 = v64 + 1;
  *(_QWORD *)(v43 + 8 * v64) = v65;
  while (++v48 != v63)
  {
    v65 = *v48;
    if ((unint64_t)(*v48 + 1) > 1)
    {
      ++v64;
      if (v48 != v63)
        goto LABEL_112;
      break;
    }
  }
LABEL_86:
  v50 = a1;
  v51 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v51)
  {
    v52 = *(uint64_t **)(a1 + 32);
    v53 = &v52[v51];
    do
    {
      v54 = *v52;
      *v52 = 0;
      if (v54)
      {
        v55 = (unsigned int *)(v54 + 8);
        do
        {
          v56 = __ldaxr(v55);
          v57 = v56 - 1;
        }
        while (__stlxr(v57, v55));
        if (!v57)
        {
          atomic_store(1u, v55);
          v58 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v58 = off_1E331A460;
          v58[1] = v55;
          *(_QWORD *)&buf = v58;
          WTF::ensureOnMainRunLoop();
          v59 = buf;
          *(_QWORD *)&buf = 0;
          if (v59)
            (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
        }
      }
      ++v52;
    }
    while (v52 != v53);
  }
  result = *(WTF **)(v50 + 32);
  if (result)
  {
    *(_QWORD *)(v50 + 32) = 0;
    *(_DWORD *)(v50 + 40) = 0;
    result = (WTF *)WTF::fastFree(result, v39);
  }
  *(_QWORD *)(v50 + 32) = v44;
  *(_DWORD *)(v50 + 40) = v42;
  *(_DWORD *)(v50 + 44) = v49;
  *(_BYTE *)(v50 + 64) = 1;
  v61 = __ldxr(v40);
  if (v61 != 1)
  {
    __clrex();
LABEL_104:
    result = (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v40);
    if (!v38)
      return result;
    goto LABEL_105;
  }
  if (__stlxr(0, v40))
    goto LABEL_104;
  if (!v38)
    return result;
LABEL_105:
  v62 = qword_1ECE7CD60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_1940B8000, v62, OS_LOG_TYPE_DEFAULT, "AudioMediaStreamTrackRendererUnit::start", (uint8_t *)&buf, 2u);
  }
  return (WTF *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v50 + 72) + 16))(*(_QWORD *)(v50 + 72));
}

WTF *WebCore::AudioMediaStreamTrackRendererUnit::removeSource(uint64_t **this, WebCore::AudioSampleDataSource *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  NSObject *v12;
  uint64_t v13;
  char *v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::Logger *v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::Logger *v27;
  uint64_t v28;
  WTF::StringImpl **v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  int v33;
  WTF::StringImpl *v34;
  uint64_t *v35;
  uint64_t **v36;
  int v37;
  int v38;
  _BOOL4 v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  int i;
  uint64_t v45;
  WebCore::AudioSampleDataSource *v46;
  _BOOL4 v47;
  unsigned __int8 *v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  unsigned int v57;
  WebCore::AudioMediaStreamTrackRendererUnit *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  _QWORD *v66;
  uint64_t v67;
  WTF *result;
  int v69;
  int v70;
  NSObject *v71;
  uint64_t *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  WebCore::AudioMediaStreamTrackRendererUnit *v77;
  WTF::Logger *v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  __int128 buf;
  int v84;
  WTF::StringImpl *v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(*((_QWORD *)a2 + 46) + 12))
    goto LABEL_66;
  WTF::String::String((WTF::String *)&v81, "AudioMediaStreamTrackRendererUnit::removeSource ");
  WTF::LogArgument<void const*>::toString();
  if (!v81)
  {
    v4 = 0;
    if (v80)
      goto LABEL_4;
LABEL_133:
    v5 = 0;
    goto LABEL_5;
  }
  v4 = *((_DWORD *)v81 + 1);
  if (!v80)
    goto LABEL_133;
LABEL_4:
  v5 = *((_DWORD *)v80 + 1);
LABEL_5:
  if ((v5 | v4) < 0 || (v6 = (v4 + v5), __OFADD__(v4, v5)))
  {
    v82 = 0;
    goto LABEL_137;
  }
  if (v81)
  {
    v7 = *((_DWORD *)v81 + 4);
    v8 = (v7 >> 2) & 1;
    if (v80 && (v7 & 4) != 0)
      goto LABEL_10;
  }
  else
  {
    if (v80)
    {
LABEL_10:
      v8 = (*((unsigned __int8 *)v80 + 16) >> 2) & 1;
      goto LABEL_11;
    }
    v8 = 1;
  }
LABEL_11:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v6, v8, (uint64_t)v81, (uint64_t)v80, &v82);
  if (!v82)
  {
LABEL_137:
    __break(0xC471u);
    goto LABEL_139;
  }
  v10 = v80;
  v80 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v81;
  v81 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = qword_1ECE7CD60;
  v13 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v13)
  {
    WTF::String::utf8();
    v14 = v78 ? (char *)v78 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v14;
    _os_log_impl(&dword_1940B8000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v13 = (uint64_t)v78;
    v78 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
        v13 = WTF::fastFree((WTF *)v13, a2);
      else
        --*(_DWORD *)v13;
    }
  }
  if (WebCore::LogWebRTC)
  {
    v15 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v16 = *v15;
      if ((v16 & 1) != 0)
        break;
      v17 = __ldaxr(v15);
      if (v17 == v16)
      {
        if (!__stxr(v16 | 1, v15))
        {
          v77 = (WebCore::AudioMediaStreamTrackRendererUnit *)this;
          v18 = WTF::Logger::observers((WTF::Logger *)v13);
          v19 = *(unsigned int *)(v18 + 12);
          if ((_DWORD)v19)
          {
            v20 = *(uint64_t **)v18;
            v21 = *(_QWORD *)v18 + 8 * v19;
            do
            {
              v22 = *v20;
              LODWORD(buf) = 0;
              WTF::String::String((WTF::String *)((char *)&buf + 8), "AudioMediaStreamTrackRendererUnit::removeSource ");
              v84 = 0;
              WTF::LogArgument<void const*>::toString();
              v78 = 0;
              v79 = 0;
              v23 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v79) = 2;
              v78 = v23;
              v24 = HIDWORD(v79);
              *((_DWORD *)v23 + 4 * HIDWORD(v79)) = buf;
              v25 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v23 + 2 * v24 + 1) = v25;
              *((_DWORD *)v23 + 4 * (v24 + 1)) = v84;
              v26 = v85;
              if (v85)
                *(_DWORD *)v85 += 2;
              *((_QWORD *)v23 + 2 * (v24 + 1) + 1) = v26;
              HIDWORD(v79) = v24 + 2;
              (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v22 + 16))(v22, &WebCore::LogWebRTC, 0, &v78);
              v27 = v78;
              if (HIDWORD(v79))
              {
                v28 = 16 * HIDWORD(v79);
                v29 = (WTF::StringImpl **)((char *)v78 + 8);
                do
                {
                  v30 = *v29;
                  *v29 = 0;
                  if (v30)
                  {
                    if (*(_DWORD *)v30 == 2)
                      WTF::StringImpl::destroy(v30, a2);
                    else
                      *(_DWORD *)v30 -= 2;
                  }
                  v29 += 2;
                  v28 -= 16;
                }
                while (v28);
                v27 = v78;
              }
              if (v27)
              {
                v78 = 0;
                LODWORD(v79) = 0;
                WTF::fastFree(v27, a2);
              }
              v31 = v85;
              v85 = 0;
              if (v31)
              {
                if (*(_DWORD *)v31 == 2)
                  WTF::StringImpl::destroy(v31, a2);
                else
                  *(_DWORD *)v31 -= 2;
              }
              v32 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v32)
              {
                if (*(_DWORD *)v32 == 2)
                  WTF::StringImpl::destroy(v32, a2);
                else
                  *(_DWORD *)v32 -= 2;
              }
              ++v20;
            }
            while (v20 != (uint64_t *)v21);
          }
          v33 = __ldxr(v15);
          if (v33 == 1)
          {
            this = (uint64_t **)v77;
            if (!__stlxr(0, v15))
              break;
          }
          else
          {
            __clrex();
            this = (uint64_t **)v77;
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v34 = v82;
  v82 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, a2);
    else
      *(_DWORD *)v34 -= 2;
  }
LABEL_66:
  v36 = this + 3;
  v35 = this[3];
  if (v35)
  {
    v37 = *((_DWORD *)v35 - 3);
    v38 = *((_DWORD *)v35 - 2);
    v39 = v37 != 0;
    v40 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v41 = 9 * ((v40 + ~(v40 << 13)) ^ ((v40 + ~(v40 << 13)) >> 8));
    v42 = (v41 ^ (v41 >> 15)) + ~((v41 ^ (v41 >> 15)) << 27);
    v43 = v38 & ((v42 >> 31) ^ v42);
    for (i = 1; ; ++i)
    {
      v45 = v43;
      v46 = (WebCore::AudioSampleDataSource *)v35[v43];
      if (v46 != (WebCore::AudioSampleDataSource *)-1)
      {
        if (!v46)
          goto LABEL_77;
        if (v46 == a2)
          break;
      }
      v43 = (v45 + i) & v38;
    }
    if ((_DWORD)v45 != *((_DWORD *)v35 - 1))
    {
      WTF::HashTable<WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>,WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>>,WTF::HashTraits<WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>>,WTF::HashTraits<WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>>>::remove((uint64_t *)this + 3, &v35[v45]);
      if (!*v36)
        goto LABEL_73;
      v37 = *((_DWORD *)*v36 - 3);
    }
LABEL_77:
    v47 = v37 == 0;
  }
  else
  {
    v39 = 0;
LABEL_73:
    v47 = 1;
  }
  v48 = (unsigned __int8 *)this + 65;
  if (__ldaxr((unsigned __int8 *)this + 65))
  {
    __clrex();
  }
  else if (!__stxr(1u, v48))
  {
    goto LABEL_82;
  }
  MEMORY[0x19AEA534C]((char *)this + 65);
LABEL_82:
  if (!*v36)
  {
    v52 = 0;
    LODWORD(v50) = 0;
LABEL_94:
    v57 = 0;
    goto LABEL_95;
  }
  v50 = *((unsigned int *)*v36 - 3);
  if (!(_DWORD)v50)
  {
    v52 = 0;
    goto LABEL_94;
  }
  if (v50 >> 29)
  {
    __break(0xC471u);
LABEL_139:
    JUMPOUT(0x1962AEB5CLL);
  }
  v51 = WTF::fastMalloc((WTF *)(8 * v50));
  v52 = v51;
  v53 = *v36;
  if (!*v36 || !*((_DWORD *)v53 - 3))
    goto LABEL_94;
  v54 = *((unsigned int *)v53 - 1);
  if ((_DWORD)v54)
  {
    v55 = 8 * v54;
    v56 = *v36;
    while ((unint64_t)(*v56 + 1) <= 1)
    {
      ++v56;
      v55 -= 8;
      if (!v55)
        goto LABEL_94;
    }
  }
  else
  {
    v56 = *v36;
  }
  v72 = &v53[v54];
  if (v56 == v72)
    goto LABEL_94;
  v73 = 0;
  v74 = *v56;
LABEL_121:
  v75 = (unsigned int *)(v74 + 8);
  do
    v76 = __ldaxr(v75);
  while (__stlxr(v76 + 1, v75));
  v57 = v73 + 1;
  *(_QWORD *)(v51 + 8 * v73) = v74;
  while (++v56 != v72)
  {
    v74 = *v56;
    if ((unint64_t)(*v56 + 1) > 1)
    {
      ++v73;
      if (v56 != v72)
        goto LABEL_121;
      break;
    }
  }
LABEL_95:
  v58 = (WebCore::AudioMediaStreamTrackRendererUnit *)this;
  v59 = *((unsigned int *)this + 11);
  if ((_DWORD)v59)
  {
    v60 = this[4];
    v61 = &v60[v59];
    do
    {
      v62 = *v60;
      *v60 = 0;
      if (v62)
      {
        v63 = (unsigned int *)(v62 + 8);
        do
        {
          v64 = __ldaxr(v63);
          v65 = v64 - 1;
        }
        while (__stlxr(v65, v63));
        if (!v65)
        {
          atomic_store(1u, v63);
          v66 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v66 = off_1E331A460;
          v66[1] = v63;
          *(_QWORD *)&buf = v66;
          WTF::ensureOnMainRunLoop();
          v67 = buf;
          *(_QWORD *)&buf = 0;
          if (v67)
            (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
        }
      }
      ++v60;
    }
    while (v60 != v61);
  }
  result = (WTF *)*((_QWORD *)v58 + 4);
  if (result)
  {
    *((_QWORD *)v58 + 4) = 0;
    *((_DWORD *)v58 + 10) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  v69 = v39 && v47;
  *((_QWORD *)v58 + 4) = v52;
  *((_DWORD *)v58 + 10) = v50;
  *((_DWORD *)v58 + 11) = v57;
  *((_BYTE *)v58 + 64) = 1;
  v70 = __ldxr(v48);
  if (v70 != 1)
  {
    __clrex();
LABEL_113:
    result = (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v48);
    if (!v69)
      return result;
    goto LABEL_114;
  }
  if (__stlxr(0, v48))
    goto LABEL_113;
  if (!v69)
    return result;
LABEL_114:
  v71 = qword_1ECE7CD60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_1940B8000, v71, OS_LOG_TYPE_DEFAULT, "AudioMediaStreamTrackRendererUnit::stop", (uint8_t *)&buf, 2u);
  }
  return (WTF *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v58 + 9) + 24))(*((_QWORD *)v58 + 9));
}

uint64_t WebCore::AudioMediaStreamTrackRendererUnit::reset(uint64_t **this)
{
  NSObject *v2;
  _BOOL8 v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t result;
  uint8_t v13[16];

  v2 = qword_1ECE7CD60;
  v3 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_1940B8000, v2, OS_LOG_TYPE_DEFAULT, "AudioMediaStreamTrackRendererUnit::reset", v13, 2u);
  }
  if ((WTF::isMainThread((WTF *)v3) & 1) != 0)
  {
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = off_1E341A1E8;
    *(_QWORD *)v13 = v4;
    WTF::WeakHashSet<WTF::Observer<void ()(void)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(this + 10, v13);
  }
  else
  {
    if (this)
    {
      v5 = (uint64_t)this[1];
      if (v5)
        goto LABEL_20;
      v5 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v5 = 1;
      *(_QWORD *)(v5 + 8) = this;
      v7 = (unsigned int *)this[1];
      this[1] = (uint64_t *)v5;
      if (!v7)
        goto LABEL_20;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, v6);
      }
      v5 = (uint64_t)this[1];
      if (v5)
      {
LABEL_20:
        do
          v10 = __ldaxr((unsigned int *)v5);
        while (__stlxr(v10 + 1, (unsigned int *)v5));
      }
    }
    else
    {
      v5 = 0;
    }
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v11 = &off_1E341A1C0;
    v11[1] = v5;
    *(_QWORD *)v13 = v11;
    WTF::callOnMainThread();
  }
  result = *(_QWORD *)v13;
  *(_QWORD *)v13 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::AudioMediaStreamTrackRendererUnit::reset(uint64_t **this)
{
  return WebCore::AudioMediaStreamTrackRendererUnit::reset(this - 2);
}

uint64_t WebCore::AudioMediaStreamTrackRendererUnit::updateRenderSourcesIfNecessary(uint64_t this, void *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;

  v2 = this;
  v3 = (unsigned __int8 *)(this + 65);
  while (1)
  {
    v4 = *v3;
    if ((v4 & 1) != 0)
      break;
    v5 = __ldaxr(v3);
    if (v5 == v4)
    {
      if (!__stxr(v4 | 1, v3))
      {
        if (*(_BYTE *)(this + 64))
        {
          v6 = *(unsigned int *)(this + 60);
          if ((_DWORD)v6)
          {
            v7 = *(uint64_t **)(this + 48);
            v8 = &v7[v6];
            do
            {
              v9 = *v7;
              *v7 = 0;
              if (v9)
              {
                v10 = (unsigned int *)(v9 + 8);
                do
                {
                  v11 = __ldaxr(v10);
                  v12 = v11 - 1;
                }
                while (__stlxr(v12, v10));
                if (!v12)
                {
                  atomic_store(1u, v10);
                  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                  *v13 = off_1E331A460;
                  v13[1] = v10;
                  v16 = v13;
                  WTF::ensureOnMainRunLoop();
                  if (v16)
                    (*(void (**)(_QWORD *))(*v16 + 8))(v16);
                }
              }
              ++v7;
            }
            while (v7 != v8);
          }
          this = *(_QWORD *)(v2 + 48);
          if (this)
          {
            *(_QWORD *)(v2 + 48) = 0;
            *(_DWORD *)(v2 + 56) = 0;
            this = WTF::fastFree((WTF *)this, a2);
          }
          *(_QWORD *)(v2 + 48) = *(_QWORD *)(v2 + 32);
          v14 = *(_QWORD *)(v2 + 40);
          *(_QWORD *)(v2 + 32) = 0;
          *(_QWORD *)(v2 + 40) = 0;
          *(_QWORD *)(v2 + 56) = v14;
          *(_BYTE *)(v2 + 64) = 0;
        }
        v15 = __ldxr(v3);
        if (v15 == 1)
        {
          if (!__stlxr(0, v3))
            return this;
        }
        else
        {
          __clrex();
        }
        return WTF::Lock::unlockSlow((WTF::Lock *)v3);
      }
    }
    else
    {
      __clrex();
    }
  }
  return this;
}

uint64_t WebCore::AudioMediaStreamTrackRendererUnit::render(WebCore::AudioMediaStreamTrackRendererUnit *this, void *a2, AudioBufferList *a3, uint64_t a4, double a5, unsigned int *a6)
{
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  WebCore::AudioMediaStreamTrackRendererUnit::updateRenderSourcesIfNecessary((uint64_t)this, a2);
  v11 = *((unsigned int *)this + 15);
  if (!(_DWORD)v11)
    goto LABEL_5;
  v12 = 0;
  v13 = (uint64_t *)*((_QWORD *)this + 6);
  v14 = 8 * v11;
  do
  {
    v15 = *v13++;
    v12 |= WebCore::AudioSampleDataSource::pullSamples(v15, a3, (vDSP_Length)a2, a4, v12 & 1);
    v14 -= 8;
  }
  while (v14);
  if ((v12 & 1) == 0)
LABEL_5:
    *a6 = 16;
  return 0;
}

uint64_t `non-virtual thunk to'WebCore::AudioMediaStreamTrackRendererUnit::render(WebCore::AudioMediaStreamTrackRendererUnit *this, void *a2, AudioBufferList *a3, uint64_t a4, double a5, unsigned int *a6)
{
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  WebCore::AudioMediaStreamTrackRendererUnit::updateRenderSourcesIfNecessary((uint64_t)this - 16, a2);
  v11 = *((unsigned int *)this + 11);
  if (!(_DWORD)v11)
    goto LABEL_5;
  v12 = 0;
  v13 = (uint64_t *)*((_QWORD *)this + 4);
  v14 = 8 * v11;
  do
  {
    v15 = *v13++;
    v12 |= WebCore::AudioSampleDataSource::pullSamples(v15, a3, (vDSP_Length)a2, a4, v12 & 1);
    v14 -= 8;
  }
  while (v14);
  if ((v12 & 1) == 0)
LABEL_5:
    *a6 = 16;
  return 0;
}

unsigned __int8 *WebCore::DisplayCaptureSourceCocoa::create@<X0>(unsigned __int8 *result@<X0>, uint64_t *a2@<X1>, const WebCore::MediaConstraints *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  WebCore::ReplayKitCaptureSource *v10;
  int v11;
  char v12;
  WebCore::ReplayKitCaptureSource *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (result[8] == 4)
  {
    v9 = (uint64_t)result;
    if ((objc_msgSend((id)objc_msgSend((id)PAL::getRPScreenRecorderClass[0]((PAL *)result), "sharedRecorder"), "isAvailable") & 1) != 0)
    {
      v10 = (WebCore::ReplayKitCaptureSource *)WTF::fastMalloc((WTF *)0x98);
      WebCore::ReplayKitCaptureSource::ReplayKitCaptureSource(v10);
      v11 = 0;
      v13 = v10;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v14 = 3;
      v11 = 1;
    }
    v15 = v11;
    result = WebCore::DisplayCaptureSourceCocoa::create((unsigned __int8 *)&v13, v9, a2, a3, a4, (uint64_t)a5);
    if (v15 != -1)
      return (unsigned __int8 *)((uint64_t (*)(char *, WebCore::ReplayKitCaptureSource **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF9UniqueRefIN7WebCore25DisplayCaptureSourceCocoa8CapturerEEENS8_18CaptureSourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v15])(&v12, &v13);
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
  return result;
}

void sub_1962AF06C(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

unsigned __int8 *WebCore::DisplayCaptureSourceCocoa::create@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, const WebCore::MediaConstraints *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unsigned __int8 *v6;
  int v8;
  uint64_t v9;
  uint64_t v14;
  unsigned __int8 **v15;
  WTF::StringImpl *v16;
  __int16 v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _BYTE v24[8];
  WTF::StringImpl *v25;
  char v26;

  v6 = result;
  v8 = *((_DWORD *)result + 4);
  if (v8)
  {
    if (v8 == 1)
    {
      v9 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      *(_QWORD *)a6 = 0;
      *(_QWORD *)(a6 + 8) = v9;
      *(_WORD *)(a6 + 16) = *((_WORD *)result + 4);
      return result;
    }
    goto LABEL_14;
  }
  v14 = WTF::fastMalloc((WTF *)0x310);
  if (*((_DWORD *)v6 + 4))
  {
LABEL_14:
    v19 = std::__throw_bad_variant_access[abi:sn180100]();
    return (unsigned __int8 *)WebCore::DisplayCaptureSourceCocoa::DisplayCaptureSourceCocoa(v19, v20, v21, v22, v23);
  }
  v15 = (unsigned __int8 **)v14;
  result = (unsigned __int8 *)WebCore::DisplayCaptureSourceCocoa::DisplayCaptureSourceCocoa(v14, (uint64_t *)v6, a2, a3, a5);
  if (a4
    && (result = (unsigned __int8 *)WebCore::RealtimeMediaSource::applyConstraints((WebCore::RealtimeMediaSource *)v15, a4, v24), v26))
  {
    v17 = (v24[0] << 8) | 4;
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_WORD *)(a6 + 16) = v17;
    v18 = v25;
    v25 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v16);
      else
        *(_DWORD *)v18 -= 2;
    }
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::DisplayCaptureSourceCocoa,(WTF::DestructionThread)2>(v15[40]);
  }
  else
  {
    *(_QWORD *)a6 = v15;
    *(_QWORD *)(a6 + 8) = 0;
    *(_WORD *)(a6 + 16) = 0;
  }
  return result;
}

uint64_t WebCore::DisplayCaptureSourceCocoa::DisplayCaptureSourceCocoa(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::RunLoop *v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;

  v7 = WebCore::RealtimeMediaSource::RealtimeMediaSource(a1, a3, a4, a5);
  *(_QWORD *)(v7 + 304) = &off_1E341A0A8;
  *(_QWORD *)(v7 + 312) = 0;
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v8 = 0;
  *(_OWORD *)(v8 + 8) = xmmword_19689B170;
  *(_QWORD *)(v8 + 24) = a1;
  *(_QWORD *)(a1 + 320) = v8;
  *(_QWORD *)a1 = off_1E3419AA8;
  *(_QWORD *)(a1 + 304) = &unk_1E3419C70;
  v9 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 328) = v9;
  *(_BYTE *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 528) = 0;
  *(_BYTE *)(a1 + 536) = 0;
  *(_BYTE *)(a1 + 640) = 0;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_DWORD *)(a1 + 663) = 0;
  *(_OWORD *)(a1 + 672) = xmmword_1968DE200;
  v10 = (WTF::RunLoop *)WTF::RunLoop::current((WTF::RunLoop *)v8);
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v11 = off_1E341A210;
  v11[1] = WebCore::DisplayCaptureSourceCocoa::emitFrame;
  v11[2] = 0;
  v11[3] = a1;
  WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)(a1 + 688), v10);
  *(_QWORD *)(a1 + 688) = off_1E32051C0;
  *(_QWORD *)(a1 + 712) = v11;
  WebCore::UserActivity::UserActivity(a1 + 720);
  *(_QWORD *)(a1 + 776) = 0;
  v13 = *(_QWORD *)(a1 + 328);
  v14 = *(_QWORD *)(a1 + 312);
  if (v14)
    goto LABEL_15;
  v14 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v14 = 1;
  *(_QWORD *)(v14 + 8) = a1 + 304;
  v15 = *(unsigned int **)(a1 + 312);
  *(_QWORD *)(a1 + 312) = v14;
  if (!v15)
    goto LABEL_15;
  do
  {
    v16 = __ldaxr(v15);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v15));
  if (!v17)
  {
    atomic_store(1u, v15);
    WTF::fastFree((WTF *)v15, v12);
  }
  v14 = *(_QWORD *)(a1 + 312);
  if (v14)
  {
LABEL_15:
    do
      v18 = __ldaxr((unsigned int *)v14);
    while (__stlxr(v18 + 1, (unsigned int *)v14));
  }
  v19 = *(unsigned int **)(v13 + 8);
  *(_QWORD *)(v13 + 8) = v14;
  if (v19)
  {
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v19);
      WTF::fastFree((WTF *)v19, v12);
    }
  }
  return a1;
}

unint64_t WebCore::DisplayCaptureSourceCocoa::emitFrame(unint64_t this)
{
  uint64_t v1;
  WebCore::ImageTransferSessionVT *v2;
  uint64_t v3;
  const void *v4;
  const void *v5;
  const void *v6;
  WTF::MediaTime *v7;
  double v8;
  double i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  _BYTE v27[16];
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  WebCore::VideoFrame *v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  _QWORD **v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  char v48;
  _QWORD *v49;

  if (*(_BYTE *)(this + 289))
    return this;
  v1 = this;
  if (!*(_QWORD *)(this + 776))
  {
    v2 = (WebCore::ImageTransferSessionVT *)operator new();
    this = (unint64_t)WebCore::ImageTransferSessionVT::ImageTransferSessionVT(v2, 875704422, (OpaqueVTPixelTransferSession **)1);
    v3 = *(_QWORD *)(v1 + 776);
    *(_QWORD *)(v1 + 776) = this;
    if (v3)
    {
      v4 = *(const void **)(v3 + 40);
      *(_QWORD *)(v3 + 40) = 0;
      if (v4)
        CFRelease(v4);
      v5 = *(const void **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v5)
        CFRelease(v5);
      v6 = *(const void **)v3;
      *(_QWORD *)v3 = 0;
      if (v6)
        CFRelease(v6);
      this = MEMORY[0x19AEA7644](v3, 0x10C0C404B4E061BLL);
    }
  }
  v7 = (WTF::MediaTime *)WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
  for (i = *(double *)(v1 + 680) + v8 - *(double *)(v1 + 672); ; i = *(double *)(v1 + 680))
  {
    v10 = WTF::MediaTime::createWithDouble(v7, i + 0.1);
    v12 = v11;
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v1 + 328) + 72))(&v36);
    if (v37 == -1)
      goto LABEL_48;
    v38 = &v49;
    this = ((uint64_t (*)(_QWORD ***, uint64_t *))off_1E341A228[v37])(&v38, &v36);
    v35 = this;
    if ((int)this < 1 || SHIDWORD(this) < 1)
      goto LABEL_44;
    if ((_DWORD)this == *(_DWORD *)(v1 + 224) && HIDWORD(this) == *(_DWORD *)(v1 + 228))
    {
      v15 = *(_DWORD *)(v1 + 216);
      v16 = *(_DWORD *)(v1 + 220);
      if (v15 < 1 || v16 <= 0)
      {
        if (v15)
        {
          LODWORD(v17) = (int)((double)SHIDWORD(this) / (double)(int)this * (double)v15);
LABEL_28:
          if ((_DWORD)v17 == HIDWORD(this) && v15 == (_DWORD)this)
            goto LABEL_37;
          goto LABEL_32;
        }
        v17 = HIDWORD(this);
        v15 = this;
        if (!v16)
          goto LABEL_28;
        v15 = (int)((double)(int)this / (double)SHIDWORD(this) * (double)v16);
      }
      LODWORD(v17) = *(_DWORD *)(v1 + 220);
      goto LABEL_28;
    }
LABEL_32:
    WebCore::RealtimeMediaSource::setIntrinsicSize((_DWORD *)v1, (const WebCore::IntSize *)&v35, 1);
    if (v35 != *(_QWORD *)(v1 + 216))
    {
      v19 = *(_QWORD *)(v1 + 40);
      if (v19)
      {
        v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
        v21 = *(_QWORD *)(v1 + 48);
        v38 = (_QWORD **)v20;
        v39 = v22;
        v40 = "setSize";
        v41 = v21;
        if (*(_BYTE *)(v19 + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::IntSize>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&v38, (WebCore::IntSize *)&v35);
      }
      *(_QWORD *)(v1 + 216) = v35;
      WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers(v1, 3u);
    }
LABEL_37:
    v38 = (_QWORD **)v1;
    v39 = v10;
    LODWORD(v40) = v12;
    BYTE4(v40) = BYTE4(v12);
    v41 = v1;
    v42 = v10;
    v43 = v12;
    v44 = BYTE4(v12);
    v45 = v1;
    v46 = v10;
    v47 = v12;
    v48 = BYTE4(v12);
    if (v37 != -1)
      break;
LABEL_48:
    v7 = (WTF::MediaTime *)std::__throw_bad_variant_access[abi:sn180100]();
  }
  v49 = &v38;
  this = (unint64_t)((unint64_t (*)(WebCore::VideoFrame **__return_ptr, _QWORD **, uint64_t *))off_1E341A240[v37])(&v34, &v49, &v36);
  if (v34)
  {
    WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
    v27[0] = 0;
    v27[8] = 0;
    v28 = v23;
    v29 = 1;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    WebCore::RealtimeMediaSource::videoFrameAvailable(v1, v34, (uint64_t)v27);
    this = (unint64_t)v34;
    v34 = 0;
    if (this)
    {
      v24 = (unsigned int *)(this + 8);
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        atomic_store(1u, (unsigned int *)(this + 8));
        this = (*(uint64_t (**)(unint64_t))(*(_QWORD *)this + 8))(this);
      }
    }
  }
LABEL_44:
  if (v37 != -1)
    return ((uint64_t (*)(_QWORD ***, uint64_t *))off_1E341A0D0[v37])(&v38, &v36);
  return this;
}

void WebCore::DisplayCaptureSourceCocoa::~DisplayCaptureSourceCocoa(WebCore::DisplayCaptureSourceCocoa *this)
{
  uint64_t v2;
  const void *v3;
  const void *v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;

  v2 = *((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v2)
  {
    v3 = *(const void **)(v2 + 40);
    *(_QWORD *)(v2 + 40) = 0;
    if (v3)
      CFRelease(v3);
    v4 = *(const void **)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v4)
      CFRelease(v4);
    v5 = *(const void **)v2;
    *(_QWORD *)v2 = 0;
    if (v5)
      CFRelease(v5);
    MEMORY[0x19AEA7644](v2, 0x10C0C404B4E061BLL);
  }
  *((_QWORD *)this + 92) = off_1E32051C0;
  v6 = *((_QWORD *)this + 95);
  *((_QWORD *)this + 95) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  WTF::RunLoop::TimerBase::~TimerBase((WebCore::DisplayCaptureSourceCocoa *)((char *)this + 736));
  v7 = *((_QWORD *)this + 90);
  *((_QWORD *)this + 90) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *((_QWORD *)this + 86) = off_1E32051C0;
  v8 = *((_QWORD *)this + 89);
  *((_QWORD *)this + 89) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  WTF::RunLoop::TimerBase::~TimerBase((WebCore::DisplayCaptureSourceCocoa *)((char *)this + 688));
  if (*((_BYTE *)this + 640))
  {
    v10 = (WTF::StringImpl *)*((_QWORD *)this + 74);
    *((_QWORD *)this + 74) = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = (WTF::StringImpl *)*((_QWORD *)this + 73);
    *((_QWORD *)this + 73) = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = (WTF::StringImpl *)*((_QWORD *)this + 72);
    *((_QWORD *)this + 72) = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v9);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::RealtimeMediaSourceCapabilities,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 336, v9);
  v14 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *((_QWORD *)this + 39);
  if (v15)
  {
    *(_QWORD *)(v15 + 8) = 0;
    v16 = (unsigned int *)*((_QWORD *)this + 39);
    *((_QWORD *)this + 39) = 0;
    if (v16)
    {
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, v16);
        WTF::fastFree((WTF *)v16, v13);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 39) = 0;
  }
  WebCore::RealtimeMediaSource::~RealtimeMediaSource(this, (WTF::StringImpl *)v13);
}

{
  WTF *v1;
  void *v2;

  WebCore::DisplayCaptureSourceCocoa::~DisplayCaptureSourceCocoa(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'WebCore::DisplayCaptureSourceCocoa::~DisplayCaptureSourceCocoa(WebCore::DisplayCaptureSourceCocoa *this)
{
  WebCore::DisplayCaptureSourceCocoa::~DisplayCaptureSourceCocoa((WebCore::DisplayCaptureSourceCocoa *)((char *)this - 304));
}

{
  WTF *v1;
  void *v2;

  WebCore::DisplayCaptureSourceCocoa::~DisplayCaptureSourceCocoa((WebCore::DisplayCaptureSourceCocoa *)((char *)this - 304));
  WTF::fastFree(v1, v2);
}

char *WebCore::DisplayCaptureSourceCocoa::capabilities(WebCore::DisplayCaptureSourceCocoa *this)
{
  char *v1;
  char *v3;
  int v4;
  uint64_t v5;
  void *v6;
  WTF *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF *v10;
  WebCore::DisplayCaptureSourceCocoa *v12;
  _QWORD v13[2];
  __int128 v14;
  __int128 v15;
  WTF *v16[2];
  __int128 v17;
  __int128 v18;
  char v19;
  WTF::StringImpl *v20[2];
  __int128 v21;
  WTF *v22[2];
  _BYTE v23[19];
  _BYTE v24[19];

  v1 = (char *)this + 336;
  if (*((_BYTE *)this + 528))
    return v1;
  v3 = WebCore::DisplayCaptureSourceCocoa::settings(this);
  v17 = 0u;
  v18 = 0u;
  v19 = 0;
  v14 = 0u;
  v15 = 0u;
  *(_OWORD *)v16 = 0u;
  *(_OWORD *)v20 = 0u;
  v21 = 0u;
  *(_OWORD *)v22 = 0u;
  memset(v23, 0, sizeof(v23));
  v4 = *(_DWORD *)(v3 + 98);
  *(_OWORD *)v24 = *(_OWORD *)(v3 + 83);
  *(_DWORD *)&v24[15] = v4;
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 41) + 104))(*((_QWORD *)this + 41));
  if ((int)v5 <= 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1962AF9ECLL);
  }
  v13[0] = (v5 << 32) | 1;
  if (v5 <= 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1962AFA0CLL);
  }
  v13[1] = v5 & 0xFFFFFFFF00000000 | 1;
  v15 = xmmword_1969F91A0;
  std::optional<WebCore::RealtimeMediaSourceCapabilities>::operator=[abi:sn180100]<WebCore::RealtimeMediaSourceCapabilities,void>((uint64_t)v1, (uint64_t)v13);
  v7 = v22[0];
  if (v22[0])
  {
    v22[0] = 0;
    LODWORD(v22[1]) = 0;
    WTF::fastFree(v7, v6);
  }
  v8 = v20[1];
  v20[1] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v20[0];
  v20[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v6);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v16[0];
  if (v16[0])
  {
    v16[0] = 0;
    LODWORD(v16[1]) = 0;
    WTF::fastFree(v10, v6);
  }
  if (*((_BYTE *)this + 528))
    return v1;
  v12 = (WebCore::DisplayCaptureSourceCocoa *)std::__throw_bad_optional_access[abi:sn180100]();
  return WebCore::DisplayCaptureSourceCocoa::settings(v12);
}

char *WebCore::DisplayCaptureSourceCocoa::settings(WebCore::DisplayCaptureSourceCocoa *this)
{
  char *v1;
  float v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v16;
  _DWORD v17[3];
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  _BYTE v29[11];
  char v30;
  int v31;
  int v32;
  __int16 v33;

  v1 = (char *)this + 536;
  if (*((_BYTE *)this + 640))
    return v1;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v23 = 0;
  v27 = 0;
  v28 = 0x3FF0000000000000;
  *(_QWORD *)v29 = 0x1000101000000;
  v3 = *((double *)this + 29);
  *(float *)&v17[2] = v3;
  v5 = *((_DWORD *)this + 54);
  v4 = *((_DWORD *)this + 55);
  if (v5 < 1 || v4 <= 0)
  {
    v6 = *((_DWORD *)this + 56);
    if (v6 >= 1)
    {
      v7 = *((_DWORD *)this + 57);
      if (v7 >= 1)
      {
        if (v5)
        {
          v4 = (int)((double)v7 / (double)v6 * (double)v5);
        }
        else if (v4)
        {
          v5 = (int)((double)v6 / (double)v7 * (double)v4);
        }
        else
        {
          v5 = *((_DWORD *)this + 56);
          v4 = *((_DWORD *)this + 57);
        }
      }
    }
  }
  v17[0] = v5;
  v17[1] = v4;
  v8 = 104;
  if (!*((_BYTE *)this + 211))
    v8 = 96;
  v9 = *(WTF::StringImpl **)((char *)this + v8);
  if (v9)
    *(_DWORD *)v9 += 2;
  v22 = v9;
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  if (v10)
    *(_DWORD *)v10 += 2;
  v24 = v10;
  v25 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 41) + 88))(*((_QWORD *)this + 41));
  v26 = 0;
  v32 = 0;
  v33 = 0;
  *(_DWORD *)&v29[7] = 0;
  v30 = 0;
  v31 = 16842753;
  std::optional<WebCore::RealtimeMediaSourceSettings>::operator=[abi:sn180100]<WebCore::RealtimeMediaSourceSettings,void>((uint64_t)v1, (uint64_t)v17);
  v12 = v24;
  v24 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v23;
  v23 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v11);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (*((_BYTE *)this + 640))
    return v1;
  v16 = std::__throw_bad_optional_access[abi:sn180100]();
  return (char *)WebCore::DisplayCaptureSourceCocoa::settingsDidChange(v16);
}

void WebCore::DisplayCaptureSourceCocoa::settingsDidChange(uint64_t a1, char a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  __int128 v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  char v11;

  if ((a2 & 4) != 0 && WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(a1 + 688)))
    WTF::RunLoop::TimerBase::start();
  LOBYTE(v7) = 0;
  v11 = 0;
  std::__optional_storage_base<WebCore::RealtimeMediaSourceSettings,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RealtimeMediaSourceSettings,false>>(a1 + 536, &v7);
  if (v11)
  {
    v4 = v10;
    v10 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = v9;
    v9 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v3);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = v8;
    v8 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v3);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
}

uint64_t WebCore::DisplayCaptureSourceCocoa::startProducingData(WebCore::DisplayCaptureSourceCocoa *this)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[4];

  WTF::MonotonicTime::now(this);
  *((_QWORD *)this + 84) = v2;
  WTF::RunLoop::TimerBase::start();
  if (!*((_BYTE *)this + 768))
  {
    *((_BYTE *)this + 768) = 1;
    if (WTF::RunLoop::TimerBase::isActive((WebCore::DisplayCaptureSourceCocoa *)((char *)this + 736)))
      WTF::RunLoop::TimerBase::stop((WebCore::DisplayCaptureSourceCocoa *)((char *)this + 736));
    else
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 90) + 16))(*((_QWORD *)this + 90), 0);
  }
  v3 = *((_QWORD *)this + 41);
  v4 = WebCore::DisplayCaptureSourceCocoa::settings(this);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v3 + 96))(v3, v4);
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 41) + 48))(*((_QWORD *)this + 41));
  if ((result & 1) == 0)
  {
    v6 = *((_QWORD *)this + 5);
    if (v6)
    {
      v7 = (*(uint64_t (**)(WebCore::DisplayCaptureSourceCocoa *))(*(_QWORD *)this + 24))(this);
      v8 = *((_QWORD *)this + 6);
      v10[0] = v7;
      v10[1] = v9;
      v10[2] = "captureFailed";
      v10[3] = v8;
      if (*(_BYTE *)(v6 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 1, (WTF::Logger::LogSiteIdentifier *)v10);
    }
    *((_BYTE *)this + 293) = 1;
    return WebCore::RealtimeMediaSource::end((uint64_t)this, 0);
  }
  return result;
}

uint64_t WebCore::DisplayCaptureSourceCocoa::stopProducingData(WebCore::DisplayCaptureSourceCocoa *this)
{
  WTF::MonotonicTime *v2;
  double v3;

  v2 = (WTF::MonotonicTime *)WTF::RunLoop::TimerBase::stop((WebCore::DisplayCaptureSourceCocoa *)((char *)this + 688));
  if (*((_BYTE *)this + 768))
  {
    *((_BYTE *)this + 768) = 0;
    v2 = (WTF::MonotonicTime *)WTF::RunLoop::TimerBase::start();
  }
  WTF::MonotonicTime::now(v2);
  *((double *)this + 85) = *((double *)this + 85) + v3 - *((double *)this + 84);
  *((_QWORD *)this + 84) = 0x7FF8000000000000;
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 41) + 56))(*((_QWORD *)this + 41));
}

uint64_t WebCore::DisplayCaptureSourceCocoa::endProducingData(WebCore::DisplayCaptureSourceCocoa *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 41) + 64))(*((_QWORD *)this + 41));
}

unint64_t WebCore::DisplayCaptureSourceCocoa::computeResizedVideoFrameSize(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  int v4;
  int v5;
  int v6;
  BOOL v7;

  v3 = HIDWORD(a2);
  if ((_DWORD)a3 && HIDWORD(a3))
  {
    if (!HIDWORD(a2))
      LODWORD(v3) = HIDWORD(a3);
    if ((_DWORD)a2)
      v4 = a2;
    else
      v4 = a3;
    if ((int)v3 >= SHIDWORD(a3))
      v5 = HIDWORD(a3);
    else
      v5 = v3;
    if (v4 >= (int)a3)
      LODWORD(a2) = a3;
    else
      LODWORD(a2) = v4;
    v3 = ((int)a2 * HIDWORD(a3) / (int)a3);
    if ((int)v3 > v5)
    {
      v6 = v5 * (int)a3 / SHIDWORD(a3);
      v7 = v6 <= (int)a2;
      if (v6 <= (int)a2)
        LODWORD(a2) = v5 * (int)a3 / SHIDWORD(a3);
      else
        LODWORD(a2) = a3;
      if (v7)
        v3 = v5;
      else
        v3 = HIDWORD(a3);
    }
  }
  return a2 | (v3 << 32);
}

uint64_t WebCore::DisplayCaptureSourceCocoa::setSizeFrameRateAndZoom(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  double v10;

  if (*(_BYTE *)(a2 + 24))
  {
    v2 = result;
    v3 = *(double *)(a2 + 16);
    v4 = *(double *)(result + 232);
    if (v3 > v4)
    {
      v10 = *(double *)(a2 + 16);
      if (v4 != v3)
      {
        v5 = *(_QWORD *)(result + 40);
        if (v5)
        {
          v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
          v7 = *(_QWORD *)(v2 + 48);
          v9[0] = v6;
          v9[1] = v8;
          v9[2] = "setFrameRate";
          v9[3] = v7;
          if (*(_BYTE *)(v5 + 12))
          {
            WTF::Logger::log<WTF::Logger::LogSiteIdentifier,double>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v9, &v10);
            v3 = v10;
          }
        }
        *(double *)(v2 + 232) = v3;
        return WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers(v2, 4u);
      }
    }
  }
  return result;
}

double WebCore::DisplayCaptureSourceCocoa::observedFrameRate(WebCore::DisplayCaptureSourceCocoa *this)
{
  return *((double *)this + 29);
}

uint64_t WebCore::DisplayCaptureSourceCocoa::capturerConfigurationChanged(WebCore::DisplayCaptureSourceCocoa *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  void *v6;
  __n128 v7;
  WTF *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  _QWORD *v12;
  uint64_t result;
  uint64_t v14;
  __int128 v15[2];
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF *v21;
  int v22;
  char v23;

  LOBYTE(v15[0]) = 0;
  LOBYTE(v19) = 0;
  std::__optional_storage_base<WebCore::RealtimeMediaSourceSettings,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RealtimeMediaSourceSettings,false>>((uint64_t)this + 536, v15);
  if ((_BYTE)v19)
  {
    v3 = v18;
    v18 = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, v2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = v17;
    v17 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = v16;
    v16 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  LOBYTE(v15[0]) = 0;
  v23 = 0;
  v7 = std::__optional_storage_base<WebCore::RealtimeMediaSourceCapabilities,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RealtimeMediaSourceCapabilities,false>>((uint64_t)this + 336, v15);
  if (v23)
  {
    v8 = v21;
    if (v21)
    {
      v21 = 0;
      v22 = 0;
      WTF::fastFree(v8, v6);
    }
    v9 = v20;
    v20 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v6);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v19;
    v19 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v6);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = v17;
    if (v17)
    {
      v17 = 0;
      LODWORD(v18) = 0;
      WTF::fastFree(v11, v6);
    }
  }
  *(_QWORD *)&v15[0] = (*(uint64_t (**)(_QWORD, __n128))(**((_QWORD **)this + 41) + 104))(*((_QWORD *)this + 41), v7);
  if (*(_QWORD *)&v15[0] != *((_QWORD *)this + 28))
    WebCore::RealtimeMediaSource::setIntrinsicSize(this, (const WebCore::IntSize *)v15, 1);
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v12 = off_1E341A268;
  v14 = (uint64_t)v12;
  (*(void (**)(WebCore::DisplayCaptureSourceCocoa *))(*(_QWORD *)this + 136))(this);
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)this + 16, &v14);
  (*(void (**)(WebCore::DisplayCaptureSourceCocoa *))(*(_QWORD *)this + 144))(this);
  result = v14;
  v14 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::DisplayCaptureSourceCocoa::capturerConfigurationChanged(WebCore::DisplayCaptureSourceCocoa *this)
{
  return WebCore::DisplayCaptureSourceCocoa::capturerConfigurationChanged((WebCore::DisplayCaptureSourceCocoa *)((char *)this - 304));
}

uint64_t WebCore::DisplayCaptureSourceCocoa::setLogger(WebCore::DisplayCaptureSourceCocoa *this, const WTF::Logger *a2, const void *a3)
{
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[4];

  v6 = (unsigned int *)((char *)a2 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = a2;
  if (v8)
  {
    v9 = v8 + 2;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v8 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
  }
  *((_QWORD *)this + 6) = a3;
  v12 = *((_QWORD *)this + 5);
  v13 = (*(uint64_t (**)(WebCore::DisplayCaptureSourceCocoa *))(*(_QWORD *)this + 24))(this);
  v14 = *((_QWORD *)this + 6);
  v17[0] = v13;
  v17[1] = v15;
  v17[2] = "setLogger";
  v17[3] = v14;
  if (*(_BYTE *)(v12 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::RealtimeMediaSource::Type,char [3],WTF::String,char [3],WTF::String,char [3],WTF::String>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v17, (unsigned __int8 *)this + 112, ", ", (WTF::StringImpl **)this + 15, ", ", (WTF::StringImpl **)this + 12, ", ", (WTF::StringImpl **)this + 13);
  return (*(uint64_t (**)(_QWORD, const WTF::Logger *, const void *))(**((_QWORD **)this + 41) + 112))(*((_QWORD *)this + 41), a2, a3);
}

unsigned int *WebCore::DisplayCaptureSourceCocoa::Capturer::setLogger(WebCore::DisplayCaptureSourceCocoa::Capturer *this, const WTF::Logger *a2, const void *a3)
{
  unsigned int *v5;
  unsigned int v6;
  unsigned int *result;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v5 = (unsigned int *)((char *)a2 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  result = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = a2;
  if (result)
  {
    v8 = result + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  *((_QWORD *)this + 3) = a3;
  return result;
}

char *WebCore::DisplayCaptureSourceCocoa::Capturer::logChannel(WebCore::DisplayCaptureSourceCocoa::Capturer *this)
{
  return &WebCore::LogWebRTC;
}

void WebCore::IncomingAudioMediaStreamTrackRendererUnit::~IncomingAudioMediaStreamTrackRendererUnit(WebCore::IncomingAudioMediaStreamTrackRendererUnit *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;
  WTF *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;

  *(_QWORD *)this = off_1E3419CA8;
  *((_QWORD *)this + 1) = &unk_1E3419D08;
  v2 = (unsigned int *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100]((uint64_t *)this + 20, 0);
  v7 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 8);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v33 = off_1E331A460;
      v33[1] = v8;
      v37 = v33;
      WTF::ensureOnMainRunLoop();
      if (v37)
        (*(void (**)(_QWORD *))(*v37 + 8))(v37);
    }
  }
  v11 = *((unsigned int *)this + 15);
  if ((_DWORD)v11)
  {
    v12 = (uint64_t *)*((_QWORD *)this + 6);
    v13 = &v12[v11];
    do
    {
      v14 = *v12;
      *v12 = 0;
      if (v14)
      {
        v15 = (unsigned int *)(v14 + 8);
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          atomic_store(1u, v15);
          v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v18 = off_1E331A460;
          v18[1] = v15;
          v35 = v18;
          WTF::ensureOnMainRunLoop();
          if (v35)
            (*(void (**)(_QWORD *))(*v35 + 8))(v35);
        }
      }
      ++v12;
    }
    while (v12 != v13);
  }
  v19 = (WTF *)*((_QWORD *)this + 6);
  if (v19)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v19, v6);
  }
  v20 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v20)
  {
    v21 = (unsigned int *)(v20 + 8);
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v21);
      v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v34 = off_1E331A460;
      v34[1] = v21;
      v38 = v34;
      WTF::ensureOnMainRunLoop();
      if (v38)
        (*(void (**)(_QWORD *))(*v38 + 8))(v38);
    }
  }
  v24 = *((_QWORD *)this + 4);
  if (v24)
  {
    v25 = *(unsigned int *)(v24 - 4);
    if ((_DWORD)v25)
    {
      for (i = 0; i != v25; ++i)
      {
        v27 = *(_QWORD *)(v24 + 8 * i);
        if (v27 != -1)
        {
          *(_QWORD *)(v24 + 8 * i) = 0;
          if (v27)
          {
            v28 = (unsigned int *)(v27 + 8);
            do
            {
              v29 = __ldaxr(v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, v28));
            if (!v30)
            {
              atomic_store(1u, v28);
              v31 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v31 = off_1E331A460;
              v31[1] = v28;
              v36 = v31;
              WTF::ensureOnMainRunLoop();
              if (v36)
                (*(void (**)(_QWORD *))(*v36 + 8))(v36);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v24 - 16), v6);
  }
  v32 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 56))(v32);
}

{
  WTF *v1;
  void *v2;

  WebCore::IncomingAudioMediaStreamTrackRendererUnit::~IncomingAudioMediaStreamTrackRendererUnit(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'WebCore::IncomingAudioMediaStreamTrackRendererUnit::~IncomingAudioMediaStreamTrackRendererUnit(WebCore::IncomingAudioMediaStreamTrackRendererUnit *this)
{
  WebCore::IncomingAudioMediaStreamTrackRendererUnit::~IncomingAudioMediaStreamTrackRendererUnit((WebCore::IncomingAudioMediaStreamTrackRendererUnit *)((char *)this - 8));
}

{
  WTF *v1;
  void *v2;

  WebCore::IncomingAudioMediaStreamTrackRendererUnit::~IncomingAudioMediaStreamTrackRendererUnit((WebCore::IncomingAudioMediaStreamTrackRendererUnit *)((char *)this - 8));
  WTF::fastFree(v1, v2);
}

uint64_t WebCore::IncomingAudioMediaStreamTrackRendererUnit::setAudioOutputDevice(WebCore::IncomingAudioMediaStreamTrackRendererUnit *this, const WTF::String *a2)
{
  Client *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  const WTF::String *v8;

  if ((_MergedGlobals_238 & 1) == 0)
  {
    v8 = a2;
    qword_1ECE84030 = (uint64_t)off_1E341A058;
    qword_1ECE84038 = 0;
    v4 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v4 = 1;
    *(_QWORD *)(v4 + 8) = &qword_1ECE84030;
    v5 = (unsigned int *)qword_1ECE84038;
    qword_1ECE84038 = v4;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, v3);
      }
    }
    qword_1ECE84030 = (uint64_t)&off_1E3419A28;
    qword_1ECE84040 = (uint64_t)&unk_1E3419A78;
    xmmword_1ECE84048 = 0u;
    unk_1ECE84058 = 0u;
    unk_1ECE84062 = 0u;
    WebCore::createInternalUnit((WebCore::LocalAudioMediaStreamTrackRendererInternalUnit *)&qword_1ECE84040, v3);
    qword_1ECE84080 = 0;
    unk_1ECE84088 = 0;
    _MergedGlobals_238 = 1;
    a2 = v8;
  }
  return (*(uint64_t (**)(uint64_t, const WTF::String *))(*(_QWORD *)qword_1ECE84078 + 40))(qword_1ECE84078, a2);
}

unsigned int *WebCore::IncomingAudioMediaStreamTrackRendererUnit::addResetObserver(uint64_t a1, uint64_t *a2)
{
  Client *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  _BYTE v9[24];

  if ((_MergedGlobals_238 & 1) == 0)
  {
    v8 = a2;
    qword_1ECE84030 = (uint64_t)off_1E341A058;
    qword_1ECE84038 = 0;
    v4 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v4 = 1;
    *(_QWORD *)(v4 + 8) = &qword_1ECE84030;
    v5 = (unsigned int *)qword_1ECE84038;
    qword_1ECE84038 = v4;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, v3);
      }
    }
    qword_1ECE84030 = (uint64_t)&off_1E3419A28;
    qword_1ECE84040 = (uint64_t)&unk_1E3419A78;
    xmmword_1ECE84048 = 0u;
    unk_1ECE84058 = 0u;
    unk_1ECE84062 = 0u;
    WebCore::createInternalUnit((WebCore::LocalAudioMediaStreamTrackRendererInternalUnit *)&qword_1ECE84040, v3);
    qword_1ECE84080 = 0;
    unk_1ECE84088 = 0;
    _MergedGlobals_238 = 1;
    a2 = v8;
  }
  return WTF::WeakHashSet<WTF::Observer<void ()(void)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WTF::Observer<void ()(void)>>((uint64_t)&qword_1ECE84080, a2, (uint64_t)v9);
}

unsigned int *WebCore::AudioMediaStreamTrackRendererUnit::addResetObserver(uint64_t a1, uint64_t *a2)
{
  _BYTE v3[24];

  return WTF::WeakHashSet<WTF::Observer<void ()(void)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WTF::Observer<void ()(void)>>(a1 + 80, a2, (uint64_t)v3);
}

unsigned int *WebCore::IncomingAudioMediaStreamTrackRendererUnit::addSource(unsigned int *result, uint64_t *a2)
{
  unsigned int *v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  char *v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::Logger *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::Logger *v28;
  uint64_t v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t **v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  unsigned int v54;
  uint64_t *v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  void (***v64)(_QWORD);
  uint64_t v65;
  WTF::Logger *v66;
  unsigned int *v67;
  WTF::Logger *v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  uint8_t buf[16];
  WTF::StringImpl *v74[2];
  __int128 v75;
  __int128 v76;
  int v77;
  uint64_t v78;

  v3 = result;
  v78 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(*(_QWORD *)(*a2 + 368) + 12))
    goto LABEL_66;
  WTF::String::String((WTF::String *)&v71, "IncomingAudioMediaStreamTrackRendererUnit::addSource ");
  WTF::LogArgument<void const*>::toString();
  if (!v71)
  {
    v4 = 0;
    if (v70)
      goto LABEL_4;
LABEL_110:
    v5 = 0;
    goto LABEL_5;
  }
  v4 = *((_DWORD *)v71 + 1);
  if (!v70)
    goto LABEL_110;
LABEL_4:
  v5 = *((_DWORD *)v70 + 1);
LABEL_5:
  if ((v5 | v4) < 0 || (v6 = (v4 + v5), __OFADD__(v4, v5)))
  {
    v72 = 0;
    goto LABEL_115;
  }
  if (v71)
  {
    v7 = *((_DWORD *)v71 + 4);
    v8 = (v7 >> 2) & 1;
    if (v70 && (v7 & 4) != 0)
      goto LABEL_10;
  }
  else
  {
    if (v70)
    {
LABEL_10:
      v8 = (*((unsigned __int8 *)v70 + 16) >> 2) & 1;
      goto LABEL_11;
    }
    v8 = 1;
  }
LABEL_11:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v6, v8, (uint64_t)v71, (uint64_t)v70, &v72);
  if (!v72)
  {
LABEL_115:
    __break(0xC471u);
    goto LABEL_117;
  }
  v10 = v70;
  v70 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v71;
  v71 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = qword_1ECE7CD60;
  v13 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v13)
  {
    WTF::String::utf8();
    v15 = v68 ? (char *)v68 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v15;
    _os_log_impl(&dword_1940B8000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v13 = (uint64_t)v68;
    v68 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
        v13 = WTF::fastFree((WTF *)v13, v14);
      else
        --*(_DWORD *)v13;
    }
  }
  if (WebCore::LogWebRTC)
  {
    v16 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v17 = *v16;
      if ((v17 & 1) != 0)
        break;
      v18 = __ldaxr(v16);
      if (v18 == v17)
      {
        if (!__stxr(v17 | 1, v16))
        {
          v67 = v3;
          v19 = WTF::Logger::observers((WTF::Logger *)v13);
          v20 = *(unsigned int *)(v19 + 12);
          if ((_DWORD)v20)
          {
            v21 = *(uint64_t **)v19;
            v22 = *(_QWORD *)v19 + 8 * v20;
            do
            {
              v23 = *v21;
              *(_DWORD *)buf = 0;
              WTF::String::String((WTF::String *)&buf[8], "IncomingAudioMediaStreamTrackRendererUnit::addSource ");
              LODWORD(v74[0]) = 0;
              WTF::LogArgument<void const*>::toString();
              v68 = 0;
              v69 = 0;
              v24 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v69) = 2;
              v68 = v24;
              v25 = HIDWORD(v69);
              *((_DWORD *)v24 + 4 * HIDWORD(v69)) = *(_DWORD *)buf;
              v26 = *(_QWORD *)&buf[8];
              if (*(_QWORD *)&buf[8])
                **(_DWORD **)&buf[8] += 2;
              *((_QWORD *)v24 + 2 * v25 + 1) = v26;
              *((_DWORD *)v24 + 4 * (v25 + 1)) = v74[0];
              v27 = v74[1];
              if (v74[1])
                *(_DWORD *)v74[1] += 2;
              *((_QWORD *)v24 + 2 * (v25 + 1) + 1) = v27;
              HIDWORD(v69) = v25 + 2;
              (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v23 + 16))(v23, &WebCore::LogWebRTC, 0, &v68);
              v28 = v68;
              if (HIDWORD(v69))
              {
                v29 = 16 * HIDWORD(v69);
                v30 = (WTF::StringImpl **)((char *)v68 + 8);
                do
                {
                  v31 = *v30;
                  *v30 = 0;
                  if (v31)
                  {
                    if (*(_DWORD *)v31 == 2)
                      WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v14);
                    else
                      *(_DWORD *)v31 -= 2;
                  }
                  v30 += 2;
                  v29 -= 16;
                }
                while (v29);
                v28 = v68;
              }
              if (v28)
              {
                v68 = 0;
                LODWORD(v69) = 0;
                WTF::fastFree(v28, v14);
              }
              v32 = v74[1];
              v74[1] = 0;
              if (v32)
              {
                if (*(_DWORD *)v32 == 2)
                  WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v14);
                else
                  *(_DWORD *)v32 -= 2;
              }
              v33 = *(WTF::StringImpl **)&buf[8];
              *(_QWORD *)&buf[8] = 0;
              if (v33)
              {
                if (*(_DWORD *)v33 == 2)
                  WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v14);
                else
                  *(_DWORD *)v33 -= 2;
              }
              ++v21;
            }
            while (v21 != (uint64_t *)v22);
          }
          v34 = __ldxr(v16);
          if (v34 == 1)
          {
            v3 = v67;
            if (!__stlxr(0, v16))
              break;
          }
          else
          {
            __clrex();
            v3 = v67;
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (unsigned int *)v72;
  v72 = 0;
  if (result)
  {
    if (*result == 2)
      result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v14);
    else
      *result -= 2;
  }
LABEL_66:
  if (!*((_QWORD *)v3 + 23))
  {
    v35 = *(_QWORD *)(*a2 + 368);
    if (v35)
    {
      v36 = (unsigned int *)(v35 + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 + 1, v36));
      result = (unsigned int *)*((_QWORD *)v3 + 23);
      *((_QWORD *)v3 + 23) = v35;
      if (result)
      {
        v38 = result + 2;
        do
        {
          v39 = __ldaxr(v38);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, v38));
        if (!v40)
        {
          atomic_store(1u, result + 2);
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
        }
      }
    }
    else
    {
      *((_QWORD *)v3 + 23) = 0;
    }
  }
  v41 = *a2;
  if (*(_BYTE *)(*a2 + 184))
  {
    v42 = *(_OWORD *)(v41 + 160);
    v75 = *(_OWORD *)(v41 + 144);
    v76 = v42;
    v77 = *(_DWORD *)(v41 + 176);
    v43 = *(_OWORD *)(v41 + 128);
    *(_OWORD *)buf = *(_OWORD *)(v41 + 112);
    *(_OWORD *)v74 = v43;
    v45 = (uint64_t **)(v3 + 8);
    v44 = *((_QWORD *)v3 + 4);
    if (v44)
      v46 = *(_DWORD *)(v44 - 12) == 0;
    else
      v46 = 1;
    WTF::HashTable<WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>,WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>>,WTF::HashTraits<WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>>,WTF::HashTraits<WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>>>::add((uint64_t *)&v68, (uint64_t *)v3 + 4, a2);
    if (*v45)
    {
      v47 = *((unsigned int *)*v45 - 3);
      if ((_DWORD)v47)
      {
        if (!(v47 >> 29))
        {
          v48 = WTF::fastMalloc((WTF *)(8 * v47));
          v49 = v48;
          v50 = *v45;
          if (!*v45 || !*((_DWORD *)v50 - 3))
            goto LABEL_104;
          v51 = *((unsigned int *)v50 - 1);
          if ((_DWORD)v51)
          {
            v52 = 8 * v51;
            v53 = *v45;
            while ((unint64_t)(*v53 + 1) <= 1)
            {
              ++v53;
              v52 -= 8;
              if (!v52)
                goto LABEL_104;
            }
          }
          else
          {
            v53 = *v45;
          }
          v55 = &v50[v51];
          if (v53 != v55)
          {
            v56 = 0;
            v57 = *v53;
LABEL_97:
            v58 = (unsigned int *)(v57 + 8);
            do
              v59 = __ldaxr(v58);
            while (__stlxr(v59 + 1, v58));
            v54 = v56 + 1;
            *(_QWORD *)(v48 + 8 * v56) = v57;
            while (++v53 != v55)
            {
              v57 = *v53;
              if ((unint64_t)(*v53 + 1) > 1)
              {
                ++v56;
                if (v53 != v55)
                  goto LABEL_97;
                goto LABEL_105;
              }
            }
          }
          else
          {
LABEL_104:
            v54 = 0;
          }
          goto LABEL_105;
        }
        __break(0xC471u);
LABEL_117:
        JUMPOUT(0x1962B0E34);
      }
    }
    else
    {
      LODWORD(v47) = 0;
    }
    v54 = 0;
    v49 = 0;
LABEL_105:
    v60 = WTF::fastMalloc((WTF *)0x78);
    *(_QWORD *)v60 = &off_1E341A290;
    *(_QWORD *)(v60 + 8) = v3;
    *(_QWORD *)(v60 + 16) = v49;
    *(_DWORD *)(v60 + 24) = v47;
    *(_DWORD *)(v60 + 28) = v54;
    *(_BYTE *)(v60 + 32) = v46;
    *(_QWORD *)(v60 + 40) = off_1E34087C0;
    v61 = v75;
    v62 = v76;
    v63 = *(_OWORD *)buf;
    *(_OWORD *)(v60 + 64) = *(_OWORD *)v74;
    *(_OWORD *)(v60 + 80) = v61;
    *(_OWORD *)(v60 + 96) = v62;
    *(_DWORD *)(v60 + 112) = v77;
    *(_OWORD *)(v60 + 48) = v63;
    v64 = (void (***)(_QWORD))*((_QWORD *)v3 + 2);
    v65 = *((_QWORD *)v3 + 3);
    (**v64)(v64);
    v66 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v66 = &off_1E341A330;
    *((_QWORD *)v66 + 1) = v64;
    *((_QWORD *)v66 + 2) = v60;
    v68 = v66;
    (*(void (**)(uint64_t, WTF::Logger **))(*(_QWORD *)v65 + 32))(v65, &v68);
    result = (unsigned int *)v68;
    v68 = 0;
    if (result)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebCore::IncomingAudioMediaStreamTrackRendererUnit::removeSource(WebCore::IncomingAudioMediaStreamTrackRendererUnit *this, WebCore::AudioSampleDataSource *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  char *v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::Logger *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::Logger *v28;
  uint64_t v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t **v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  BOOL v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned int v45;
  int i;
  uint64_t v47;
  WebCore::AudioSampleDataSource *v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  unsigned int v56;
  uint64_t v57;
  void (***v58)(_QWORD);
  uint64_t v59;
  _QWORD *v60;
  uint64_t result;
  uint64_t *v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  WebCore::IncomingAudioMediaStreamTrackRendererUnit *v67;
  WTF::Logger *v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  __int128 buf;
  int v74;
  WTF::StringImpl *v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(*((_QWORD *)a2 + 46) + 12))
    goto LABEL_66;
  WTF::String::String((WTF::String *)&v71, "IncomingAudioMediaStreamTrackRendererUnit::removeSource ");
  WTF::LogArgument<void const*>::toString();
  if (!v71)
  {
    v4 = 0;
    if (v70)
      goto LABEL_4;
LABEL_113:
    v5 = 0;
    goto LABEL_5;
  }
  v4 = *((_DWORD *)v71 + 1);
  if (!v70)
    goto LABEL_113;
LABEL_4:
  v5 = *((_DWORD *)v70 + 1);
LABEL_5:
  if ((v5 | v4) < 0 || (v6 = (v4 + v5), __OFADD__(v4, v5)))
  {
    v72 = 0;
    goto LABEL_117;
  }
  if (v71)
  {
    v7 = *((_DWORD *)v71 + 4);
    v8 = (v7 >> 2) & 1;
    if (v70 && (v7 & 4) != 0)
      goto LABEL_10;
  }
  else
  {
    if (v70)
    {
LABEL_10:
      v8 = (*((unsigned __int8 *)v70 + 16) >> 2) & 1;
      goto LABEL_11;
    }
    v8 = 1;
  }
LABEL_11:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v6, v8, (uint64_t)v71, (uint64_t)v70, &v72);
  if (!v72)
  {
LABEL_117:
    __break(0xC471u);
    goto LABEL_119;
  }
  v10 = v70;
  v70 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v71;
  v71 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = qword_1ECE7CD60;
  v13 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v13)
  {
    WTF::String::utf8();
    v15 = v68 ? (char *)v68 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v15;
    _os_log_impl(&dword_1940B8000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v13 = (uint64_t)v68;
    v68 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
        v13 = WTF::fastFree((WTF *)v13, v14);
      else
        --*(_DWORD *)v13;
    }
  }
  if (WebCore::LogWebRTC)
  {
    v16 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v17 = *v16;
      if ((v17 & 1) != 0)
        break;
      v18 = __ldaxr(v16);
      if (v18 == v17)
      {
        if (!__stxr(v17 | 1, v16))
        {
          v67 = this;
          v19 = WTF::Logger::observers((WTF::Logger *)v13);
          v20 = *(unsigned int *)(v19 + 12);
          if ((_DWORD)v20)
          {
            v21 = *(uint64_t **)v19;
            v22 = *(_QWORD *)v19 + 8 * v20;
            do
            {
              v23 = *v21;
              LODWORD(buf) = 0;
              WTF::String::String((WTF::String *)((char *)&buf + 8), "IncomingAudioMediaStreamTrackRendererUnit::removeSource ");
              v74 = 0;
              WTF::LogArgument<void const*>::toString();
              v68 = 0;
              v69 = 0;
              v24 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v69) = 2;
              v68 = v24;
              v25 = HIDWORD(v69);
              *((_DWORD *)v24 + 4 * HIDWORD(v69)) = buf;
              v26 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v24 + 2 * v25 + 1) = v26;
              *((_DWORD *)v24 + 4 * (v25 + 1)) = v74;
              v27 = v75;
              if (v75)
                *(_DWORD *)v75 += 2;
              *((_QWORD *)v24 + 2 * (v25 + 1) + 1) = v27;
              HIDWORD(v69) = v25 + 2;
              (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v23 + 16))(v23, &WebCore::LogWebRTC, 0, &v68);
              v28 = v68;
              if (HIDWORD(v69))
              {
                v29 = 16 * HIDWORD(v69);
                v30 = (WTF::StringImpl **)((char *)v68 + 8);
                do
                {
                  v31 = *v30;
                  *v30 = 0;
                  if (v31)
                  {
                    if (*(_DWORD *)v31 == 2)
                      WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v14);
                    else
                      *(_DWORD *)v31 -= 2;
                  }
                  v30 += 2;
                  v29 -= 16;
                }
                while (v29);
                v28 = v68;
              }
              if (v28)
              {
                v68 = 0;
                LODWORD(v69) = 0;
                WTF::fastFree(v28, v14);
              }
              v32 = v75;
              v75 = 0;
              if (v32)
              {
                if (*(_DWORD *)v32 == 2)
                  WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v14);
                else
                  *(_DWORD *)v32 -= 2;
              }
              v33 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v33)
              {
                if (*(_DWORD *)v33 == 2)
                  WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v14);
                else
                  *(_DWORD *)v33 -= 2;
              }
              ++v21;
            }
            while (v21 != (uint64_t *)v22);
          }
          v34 = __ldxr(v16);
          if (v34 == 1)
          {
            this = v67;
            if (!__stlxr(0, v16))
              break;
          }
          else
          {
            __clrex();
            this = v67;
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v35 = v72;
  v72 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v14);
    else
      *(_DWORD *)v35 -= 2;
  }
LABEL_66:
  v37 = (uint64_t **)((char *)this + 32);
  v36 = *((_QWORD *)this + 4);
  if (!v36)
  {
    v41 = 0;
    goto LABEL_73;
  }
  v39 = *(_DWORD *)(v36 - 12);
  v38 = *(_DWORD *)(v36 - 8);
  v40 = v39;
  v41 = v39 != 0;
  v42 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v43 = 9 * ((v42 + ~(v42 << 13)) ^ ((v42 + ~(v42 << 13)) >> 8));
  v44 = (v43 ^ (v43 >> 15)) + ~((v43 ^ (v43 >> 15)) << 27);
  v45 = v38 & ((v44 >> 31) ^ v44);
  for (i = 1; ; ++i)
  {
    v47 = v45;
    v48 = *(WebCore::AudioSampleDataSource **)(v36 + 8 * v45);
    if (v48 != (WebCore::AudioSampleDataSource *)-1)
    {
      if (!v48)
        goto LABEL_77;
      if (v48 == a2)
        break;
    }
    v45 = (v47 + i) & v38;
  }
  if ((_DWORD)v47 != *(_DWORD *)(v36 - 4))
  {
    WTF::HashTable<WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>,WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>>,WTF::HashTraits<WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>>,WTF::HashTraits<WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>>>::remove((uint64_t *)this + 4, (uint64_t *)(v36 + 8 * v47));
    if (*v37)
    {
      v40 = *((_DWORD *)*v37 - 3);
      goto LABEL_77;
    }
LABEL_73:
    v40 = 0;
LABEL_92:
    v51 = 0;
LABEL_94:
    v56 = 0;
    goto LABEL_95;
  }
LABEL_77:
  if (v39)
    v49 = v40 == 0;
  else
    v49 = 0;
  v41 = v49;
  if (!v40)
    goto LABEL_92;
  if (v40 >> 29)
  {
    __break(0xC471u);
LABEL_119:
    JUMPOUT(0x1962B1468);
  }
  v50 = WTF::fastMalloc((WTF *)(8 * v40));
  v51 = v50;
  v52 = *v37;
  if (!*v37 || !*((_DWORD *)v52 - 3))
  {
    v41 = 0;
    goto LABEL_94;
  }
  v53 = *((unsigned int *)v52 - 1);
  if ((_DWORD)v53)
  {
    v54 = 8 * v53;
    v55 = *v37;
    while ((unint64_t)(*v55 + 1) <= 1)
    {
      ++v55;
      v54 -= 8;
      if (!v54)
        goto LABEL_94;
    }
  }
  else
  {
    v55 = *v37;
  }
  v62 = &v52[v53];
  if (v55 == v62)
    goto LABEL_94;
  v63 = 0;
  v64 = *v55;
LABEL_101:
  v65 = (unsigned int *)(v64 + 8);
  do
    v66 = __ldaxr(v65);
  while (__stlxr(v66 + 1, v65));
  v56 = v63 + 1;
  *(_QWORD *)(v50 + 8 * v63) = v64;
  while (++v55 != v62)
  {
    v64 = *v55;
    if ((unint64_t)(*v55 + 1) > 1)
    {
      ++v63;
      if (v55 != v62)
        goto LABEL_101;
      break;
    }
  }
LABEL_95:
  v57 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v57 = &off_1E341A2E0;
  *(_QWORD *)(v57 + 8) = this;
  *(_QWORD *)(v57 + 16) = v51;
  *(_DWORD *)(v57 + 24) = v40;
  *(_DWORD *)(v57 + 28) = v56;
  *(_BYTE *)(v57 + 32) = v41;
  v58 = (void (***)(_QWORD))*((_QWORD *)this + 2);
  v59 = *((_QWORD *)this + 3);
  (**v58)(v58);
  v60 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v60 = &off_1E341A330;
  v60[1] = v58;
  v60[2] = v57;
  *(_QWORD *)&buf = v60;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v59 + 32))(v59, &buf);
  result = buf;
  *(_QWORD *)&buf = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::IncomingAudioMediaStreamTrackRendererUnit::logger(WebCore::IncomingAudioMediaStreamTrackRendererUnit *this)
{
  return *((_QWORD *)this + 23);
}

uint64_t `non-virtual thunk to'WebCore::IncomingAudioMediaStreamTrackRendererUnit::logger(WebCore::IncomingAudioMediaStreamTrackRendererUnit *this)
{
  return *((_QWORD *)this + 22);
}

char *WebCore::IncomingAudioMediaStreamTrackRendererUnit::logChannel(WebCore::IncomingAudioMediaStreamTrackRendererUnit *this)
{
  return &WebCore::LogWebRTC;
}

char *`non-virtual thunk to'WebCore::IncomingAudioMediaStreamTrackRendererUnit::logChannel(WebCore::IncomingAudioMediaStreamTrackRendererUnit *this)
{
  return &WebCore::LogWebRTC;
}

uint64_t WebCore::IncomingAudioMediaStreamTrackRendererUnit::logIdentifier(WebCore::IncomingAudioMediaStreamTrackRendererUnit *this)
{
  return *((_QWORD *)this + 24);
}

uint64_t `non-virtual thunk to'WebCore::IncomingAudioMediaStreamTrackRendererUnit::logIdentifier(WebCore::IncomingAudioMediaStreamTrackRendererUnit *this)
{
  return *((_QWORD *)this + 23);
}

void WebCore::WebRTCProvider::create(_QWORD *a1@<X8>)
{
  WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::LibWebRTCProviderCocoa>(a1);
}

void WebCore::LibWebRTCProviderCocoa::~LibWebRTCProviderCocoa(WebCore::LibWebRTCProviderCocoa *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebCore::LibWebRTCProvider::~LibWebRTCProvider(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::LibWebRTCProviderCocoa::createDecoderFactory(WebCore::LibWebRTCProviderCocoa *this)
{
  WebCore::vp9HardwareDecoderAvailable(this);
  return webrtc::createWebKitDecoderFactory();
}

uint64_t WebCore::LibWebRTCProviderCocoa::createEncoderFactory(WebCore::LibWebRTCProviderCocoa *this)
{
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
  }
  return webrtc::createWebKitEncoderFactory();
}

uint64_t WebCore::LibWebRTCProviderCocoa::computeVPParameters(uint64_t a1, uint64_t a2)
{
  int v3;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  return WebCore::computeVPParameters(a2, v3);
}

BOOL WebCore::LibWebRTCProviderCocoa::isVPSoftwareDecoderSmooth(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  double v3;
  BOOL v4;
  BOOL v5;
  BOOL v6;
  BOOL v7;

  v2 = *(_DWORD *)(a2 + 12);
  v3 = *(double *)(a2 + 24);
  if (v2 <= 0x438)
  {
    v4 = v3 == 60.0;
    v5 = v3 < 60.0;
  }
  else
  {
    v4 = 1;
    v5 = 0;
  }
  if (!v5 && !v4)
    return 0;
  if (v3 > 30.0)
  {
    v6 = v2 >= 0x870;
    v7 = v2 == 2160;
  }
  else
  {
    v6 = 1;
    v7 = 0;
  }
  return !v7 && v6;
}

uint64_t WebCore::LibWebRTCProviderCocoa::setActive(WebCore::LibWebRTCProviderCocoa *this, webrtc *a2)
{
  return webrtc::setApplicationStatus(a2);
}

void WebCore::LibWebRTCAudioModule::logTimerFired(WebCore::LibWebRTCAudioModule *this)
{
  int v2;
  NSObject *v3;
  _DWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v2 = *((_DWORD *)this + 12);
  if (v2)
  {
    v3 = qword_1ECE7CD60;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT))
    {
      v4[0] = 67109120;
      v4[1] = v2;
      _os_log_impl(&dword_1940B8000, v3, OS_LOG_TYPE_DEFAULT, "LibWebRTCAudioModule::pollAudioData, polling took too much time: %d ms", (uint8_t *)v4, 8u);
    }
  }
  *((_DWORD *)this + 12) = 0;
}

uint64_t WebCore::LibWebRTCAudioModule::Terminate(WebCore::LibWebRTCAudioModule *this)
{
  _QWORD *v2;
  _QWORD *v4;

  if (this)
    (**(void (***)(WebCore::LibWebRTCAudioModule *))this)(this);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v2 = &off_1E341A380;
  v2[1] = this;
  v2[2] = this;
  v4 = v2;
  WTF::callOnMainThread();
  if (v4)
    (*(void (**)(_QWORD *))(*v4 + 8))(v4);
  return 0;
}

uint64_t WebCore::LibWebRTCAudioModule::RegisterAudioCallback(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _DWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE7CD60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = a2 != 0;
    _os_log_impl(&dword_1940B8000, v4, OS_LOG_TYPE_DEFAULT, "LibWebRTCAudioModule::RegisterAudioCallback %d", (uint8_t *)v6, 8u);
  }
  *(_QWORD *)(a1 + 24) = a2;
  return 0;
}

uint64_t WebCore::LibWebRTCAudioModule::StartPlayout(WebCore::LibWebRTCAudioModule *this)
{
  NSObject *v2;
  int v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE7CD60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((unsigned __int8 *)this + 16);
    LODWORD(v10[0]) = 67109120;
    HIDWORD(v10[0]) = v3;
    _os_log_impl(&dword_1940B8000, v2, OS_LOG_TYPE_DEFAULT, "LibWebRTCAudioModule::StartPlayout %d", (uint8_t *)v10, 8u);
  }
  if (!*((_BYTE *)this + 16))
  {
    *((_BYTE *)this + 16) = 1;
    (**(void (***)(WebCore::LibWebRTCAudioModule *))this)(this);
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v4 = &off_1E341A3A8;
    v4[1] = this;
    v4[2] = this;
    v10[0] = v4;
    WTF::callOnMainThread();
    v5 = v10[0];
    v10[0] = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *((_QWORD *)this + 1);
    (**(void (***)(WebCore::LibWebRTCAudioModule *))this)(this);
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v7 = &off_1E341A3D0;
    v7[1] = this;
    v7[2] = this;
    v10[0] = v7;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 32))(v6, v10);
    v8 = v10[0];
    v10[0] = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  return 0;
}

uint64_t WebCore::LibWebRTCAudioModule::StopPlayout(WebCore::LibWebRTCAudioModule *this)
{
  NSObject *v2;
  int v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE7CD60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((unsigned __int8 *)this + 16);
    LODWORD(v7[0]) = 67109120;
    HIDWORD(v7[0]) = v3;
    _os_log_impl(&dword_1940B8000, v2, OS_LOG_TYPE_DEFAULT, "LibWebRTCAudioModule::StopPlayout %d", (uint8_t *)v7, 8u);
  }
  *((_BYTE *)this + 16) = 0;
  (**(void (***)(WebCore::LibWebRTCAudioModule *))this)(this);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = &off_1E341A3F8;
  v4[1] = this;
  v4[2] = this;
  v7[0] = v4;
  WTF::callOnMainThread();
  v5 = v7[0];
  v7[0] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return 0;
}

_BYTE *WebCore::LibWebRTCAudioModule::pollAudioData(_BYTE *this)
{
  _BYTE *v1;
  _QWORD *v2;
  WTF::MonotonicTime *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void (***v8)(_QWORD);
  uint64_t v9;
  WTF::MonotonicTime *v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::MonotonicTime *v18;
  char v19[1920];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (this[16])
  {
    v1 = this;
    (**(void (***)(_BYTE *))this)(this);
    v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v2 = &off_1E341A420;
    v2[1] = v1;
    v2[2] = v1;
    v15 = v2;
    v3 = (WTF::MonotonicTime *)*((_QWORD *)v1 + 3);
    if (v3)
    {
      v16 = -1;
      v17 = -1;
      v3 = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t *, uint64_t *))(*(_QWORD *)v3 + 24))(v3, 16, 48000, 2, 480, v19, &v17, &v16);
      if (v1[64])
      {
        v4 = *((_QWORD *)v1 + 9);
        v5 = *((_QWORD *)v1 + 7);
        v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v6 = off_1E341A358;
        v6[1] = v4;
        v6[2] = v5;
        v9 = v4 + 16;
        v8 = *(void (****)(_QWORD))(v4 + 16);
        v7 = *(_QWORD *)(v9 + 8);
        (**v8)(v8);
        v10 = (WTF::MonotonicTime *)WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v10 = &off_1E341A330;
        *((_QWORD *)v10 + 1) = v8;
        *((_QWORD *)v10 + 2) = v6;
        v18 = v10;
        (*(void (**)(uint64_t, WTF::MonotonicTime **))(*(_QWORD *)v7 + 32))(v7, &v18);
        v3 = v18;
        v18 = 0;
        if (v3)
          v3 = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)v3 + 8))(v3);
      }
      *((_QWORD *)v1 + 7) += 480;
    }
    v11 = *((_QWORD *)v1 + 1);
    WTF::MonotonicTime::now(v3);
    v13 = *((double *)v1 + 4);
    v14 = v13 + 0.01 - v12;
    if (v14 * 1000.0 < 0.0)
    {
      *((_DWORD *)v1 + 12) = (int)((v12 - v13) * 1000.0);
      v14 = 0.0;
    }
    *((double *)v1 + 4) = v12 + v14;
    (*(void (**)(uint64_t, _BYTE **, double))(*(_QWORD *)v11 + 16))(v11, &v15, v14);
    this = v15;
    v15 = 0;
    if (this)
      return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

const char *WebCore::DisplayCaptureSourceCocoa::logClassName(WebCore::DisplayCaptureSourceCocoa *this)
{
  return "DisplayCaptureSourceCocoa";
}

uint64_t WebCore::DisplayCaptureSourceCocoa::ref(uint64_t this)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(this + 320);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v1);
LABEL_5:
  ++*(_QWORD *)(v1 + 8);
  v3 = __ldxr((unsigned __int8 *)v1);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

unsigned __int8 *WebCore::DisplayCaptureSourceCocoa::deref(unsigned __int8 **this)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::DisplayCaptureSourceCocoa,(WTF::DestructionThread)2>(this[40]);
}

uint64_t WebCore::DisplayCaptureSourceCocoa::controlBlock(WebCore::DisplayCaptureSourceCocoa *this)
{
  return *((_QWORD *)this + 40);
}

uint64_t WebCore::DisplayCaptureSourceCocoa::isCaptureSource(WebCore::DisplayCaptureSourceCocoa *this)
{
  return 1;
}

uint64_t WebCore::DisplayCaptureSourceCocoa::deviceType(WebCore::DisplayCaptureSourceCocoa *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 41) + 80))(*((_QWORD *)this + 41));
}

uint64_t WebCore::DisplayCaptureSourceCocoa::endApplyingConstraints(WebCore::DisplayCaptureSourceCocoa *this)
{
  uint64_t v1;
  char *v2;

  v1 = *((_QWORD *)this + 41);
  v2 = WebCore::DisplayCaptureSourceCocoa::settings(this);
  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v1 + 96))(v1, v2);
}

unsigned __int8 *WebCore::DisplayCaptureSourceCocoa::capturerIsRunningChanged(WebCore::DisplayCaptureSourceCocoa *this, int a2)
{
  return WebCore::RealtimeMediaSource::notifyMutedChange((unsigned __int8 *)this, a2 ^ 1u);
}

uint64_t WebCore::DisplayCaptureSourceCocoa::capturerFailed(WebCore::DisplayCaptureSourceCocoa *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[4];

  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    v3 = (*(uint64_t (**)(WebCore::DisplayCaptureSourceCocoa *))(*(_QWORD *)this + 24))(this);
    v4 = *((_QWORD *)this + 6);
    v7[0] = v3;
    v7[1] = v5;
    v7[2] = "captureFailed";
    v7[3] = v4;
    if (*(_BYTE *)(v2 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 1, (WTF::Logger::LogSiteIdentifier *)v7);
  }
  *((_BYTE *)this + 293) = 1;
  return WebCore::RealtimeMediaSource::end((uint64_t)this, 0);
}

unsigned __int8 *`non-virtual thunk to'WebCore::DisplayCaptureSourceCocoa::capturerIsRunningChanged(WebCore::DisplayCaptureSourceCocoa *this, int a2)
{
  return WebCore::RealtimeMediaSource::notifyMutedChange((unsigned __int8 *)this - 304, a2 ^ 1u);
}

uint64_t `non-virtual thunk to'WebCore::DisplayCaptureSourceCocoa::capturerFailed(WebCore::DisplayCaptureSourceCocoa *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[4];

  v2 = (char *)this - 304;
  v3 = *((_QWORD *)this - 33);
  if (v3)
  {
    v4 = (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 24))((char *)this - 304);
    v5 = *((_QWORD *)this - 32);
    v8[0] = v4;
    v8[1] = v6;
    v8[2] = "captureFailed";
    v8[3] = v5;
    if (*(_BYTE *)(v3 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 1, (WTF::Logger::LogSiteIdentifier *)v8);
  }
  *((_BYTE *)this - 11) = 1;
  return WebCore::RealtimeMediaSource::end((uint64_t)v2, 0);
}

const char *WebCore::IncomingAudioMediaStreamTrackRendererUnit::logClassName(WebCore::IncomingAudioMediaStreamTrackRendererUnit *this)
{
  return "IncomingAudioMediaStreamTrackRendererUnit";
}

const char *`non-virtual thunk to'WebCore::IncomingAudioMediaStreamTrackRendererUnit::logClassName(WebCore::IncomingAudioMediaStreamTrackRendererUnit *this)
{
  return "IncomingAudioMediaStreamTrackRendererUnit";
}

uint64_t WebCore::LibWebRTCProvider::setVP9HardwareSupportForTesting(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 193) = a2;
  return result;
}

BOOL WebCore::LibWebRTCProvider::isSupportingVP9HardwareDecoder(WebCore::LibWebRTCProvider *this)
{
  return *((_BYTE *)this + 194) && *((_BYTE *)this + 193) != 0;
}

uint64_t WebCore::LibWebRTCAudioModule::ActiveAudioLayer()
{
  return 0xFFFFFFFFLL;
}

uint64_t WebCore::LibWebRTCAudioModule::Init(WebCore::LibWebRTCAudioModule *this)
{
  return 0;
}

uint64_t WebCore::LibWebRTCAudioModule::Initialized(WebCore::LibWebRTCAudioModule *this)
{
  return 1;
}

uint64_t WebCore::LibWebRTCAudioModule::PlayoutDevices(WebCore::LibWebRTCAudioModule *this)
{
  return 0;
}

uint64_t WebCore::LibWebRTCAudioModule::RecordingDevices(WebCore::LibWebRTCAudioModule *this)
{
  return 0;
}

uint64_t WebCore::LibWebRTCAudioModule::PlayoutDeviceName(WebCore::LibWebRTCAudioModule *this, unsigned __int16 a2, char *a3, char *a4)
{
  return 0;
}

uint64_t WebCore::LibWebRTCAudioModule::RecordingDeviceName(WebCore::LibWebRTCAudioModule *this, unsigned __int16 a2, char *a3, char *a4)
{
  return 0;
}

uint64_t WebCore::LibWebRTCAudioModule::SetPlayoutDevice(WebCore::LibWebRTCAudioModule *this)
{
  return 0;
}

uint64_t WebCore::LibWebRTCAudioModule::SetPlayoutDevice()
{
  return 0;
}

uint64_t WebCore::LibWebRTCAudioModule::SetRecordingDevice(WebCore::LibWebRTCAudioModule *this)
{
  return 0;
}

uint64_t WebCore::LibWebRTCAudioModule::SetRecordingDevice()
{
  return 0;
}

uint64_t WebCore::LibWebRTCAudioModule::PlayoutIsAvailable(WebCore::LibWebRTCAudioModule *this, BOOL *a2)
{
  return 0xFFFFFFFFLL;
}

uint64_t WebCore::LibWebRTCAudioModule::InitPlayout(WebCore::LibWebRTCAudioModule *this)
{
  return 0;
}

uint64_t WebCore::LibWebRTCAudioModule::PlayoutIsInitialized(WebCore::LibWebRTCAudioModule *this)
{
  return 1;
}

uint64_t WebCore::LibWebRTCAudioModule::RecordingIsAvailable(WebCore::LibWebRTCAudioModule *this, BOOL *a2)
{
  return 0xFFFFFFFFLL;
}

uint64_t WebCore::LibWebRTCAudioModule::InitRecording(WebCore::LibWebRTCAudioModule *this)
{
  return 0;
}

uint64_t WebCore::LibWebRTCAudioModule::RecordingIsInitialized(WebCore::LibWebRTCAudioModule *this)
{
  return 0;
}

uint64_t WebCore::LibWebRTCAudioModule::Playing(WebCore::LibWebRTCAudioModule *this)
{
  return *((unsigned __int8 *)this + 16);
}

uint64_t WebCore::LibWebRTCAudioModule::StartRecording(WebCore::LibWebRTCAudioModule *this)
{
  return 0;
}

uint64_t WebCore::LibWebRTCAudioModule::StopRecording(WebCore::LibWebRTCAudioModule *this)
{
  return 0;
}

uint64_t WebCore::LibWebRTCAudioModule::Recording(WebCore::LibWebRTCAudioModule *this)
{
  return 0;
}

uint64_t WebCore::LibWebRTCAudioModule::InitSpeaker(WebCore::LibWebRTCAudioModule *this)
{
  return 0;
}

uint64_t WebCore::LibWebRTCAudioModule::SpeakerIsInitialized(WebCore::LibWebRTCAudioModule *this)
{
  return 0;
}

uint64_t WebCore::LibWebRTCAudioModule::InitMicrophone(WebCore::LibWebRTCAudioModule *this)
{
  return 0;
}

uint64_t WebCore::LibWebRTCAudioModule::MicrophoneIsInitialized(WebCore::LibWebRTCAudioModule *this)
{
  return 0;
}

uint64_t WebCore::LibWebRTCAudioModule::SpeakerVolumeIsAvailable(WebCore::LibWebRTCAudioModule *this, BOOL *a2)
{
  return 0xFFFFFFFFLL;
}

uint64_t WebCore::LibWebRTCAudioModule::SetSpeakerVolume(WebCore::LibWebRTCAudioModule *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t WebCore::LibWebRTCAudioModule::SpeakerVolume(WebCore::LibWebRTCAudioModule *this, unsigned int *a2)
{
  return 0xFFFFFFFFLL;
}

uint64_t WebCore::LibWebRTCAudioModule::MaxSpeakerVolume(WebCore::LibWebRTCAudioModule *this, unsigned int *a2)
{
  return 0xFFFFFFFFLL;
}

uint64_t WebCore::LibWebRTCAudioModule::MinSpeakerVolume(WebCore::LibWebRTCAudioModule *this, unsigned int *a2)
{
  return 0xFFFFFFFFLL;
}

uint64_t WebCore::LibWebRTCAudioModule::MicrophoneVolumeIsAvailable(WebCore::LibWebRTCAudioModule *this, BOOL *a2)
{
  return 0xFFFFFFFFLL;
}

uint64_t WebCore::LibWebRTCAudioModule::SetMicrophoneVolume(WebCore::LibWebRTCAudioModule *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t WebCore::LibWebRTCAudioModule::MicrophoneVolume(WebCore::LibWebRTCAudioModule *this, unsigned int *a2)
{
  return 0xFFFFFFFFLL;
}

uint64_t WebCore::LibWebRTCAudioModule::MaxMicrophoneVolume(WebCore::LibWebRTCAudioModule *this, unsigned int *a2)
{
  return 0xFFFFFFFFLL;
}

uint64_t WebCore::LibWebRTCAudioModule::MinMicrophoneVolume(WebCore::LibWebRTCAudioModule *this, unsigned int *a2)
{
  return 0xFFFFFFFFLL;
}

uint64_t WebCore::LibWebRTCAudioModule::SpeakerMuteIsAvailable(WebCore::LibWebRTCAudioModule *this, BOOL *a2)
{
  return 0xFFFFFFFFLL;
}

uint64_t WebCore::LibWebRTCAudioModule::SetSpeakerMute(WebCore::LibWebRTCAudioModule *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t WebCore::LibWebRTCAudioModule::SpeakerMute(WebCore::LibWebRTCAudioModule *this, BOOL *a2)
{
  return 0xFFFFFFFFLL;
}

uint64_t WebCore::LibWebRTCAudioModule::MicrophoneMuteIsAvailable(WebCore::LibWebRTCAudioModule *this, BOOL *a2)
{
  return 0xFFFFFFFFLL;
}

uint64_t WebCore::LibWebRTCAudioModule::SetMicrophoneMute(WebCore::LibWebRTCAudioModule *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t WebCore::LibWebRTCAudioModule::MicrophoneMute(WebCore::LibWebRTCAudioModule *this, BOOL *a2)
{
  return 0xFFFFFFFFLL;
}

uint64_t WebCore::LibWebRTCAudioModule::StereoPlayoutIsAvailable(WebCore::LibWebRTCAudioModule *this, BOOL *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t WebCore::LibWebRTCAudioModule::SetStereoPlayout(WebCore::LibWebRTCAudioModule *this)
{
  return 0;
}

uint64_t WebCore::LibWebRTCAudioModule::StereoPlayout(WebCore::LibWebRTCAudioModule *this, BOOL *a2)
{
  return 0xFFFFFFFFLL;
}

uint64_t WebCore::LibWebRTCAudioModule::StereoRecordingIsAvailable(WebCore::LibWebRTCAudioModule *this, BOOL *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t WebCore::LibWebRTCAudioModule::SetStereoRecording(WebCore::LibWebRTCAudioModule *this)
{
  return 0;
}

uint64_t WebCore::LibWebRTCAudioModule::StereoRecording(WebCore::LibWebRTCAudioModule *this, BOOL *a2)
{
  return 0xFFFFFFFFLL;
}

uint64_t WebCore::LibWebRTCAudioModule::PlayoutDelay(WebCore::LibWebRTCAudioModule *this, unsigned __int16 *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t WebCore::LibWebRTCAudioModule::BuiltInAECIsAvailable(WebCore::LibWebRTCAudioModule *this)
{
  return 0;
}

uint64_t WebCore::LibWebRTCAudioModule::BuiltInAGCIsAvailable(WebCore::LibWebRTCAudioModule *this)
{
  return 0;
}

uint64_t WebCore::LibWebRTCAudioModule::BuiltInNSIsAvailable(WebCore::LibWebRTCAudioModule *this)
{
  return 0;
}

uint64_t WebCore::LibWebRTCAudioModule::EnableBuiltInAEC(WebCore::LibWebRTCAudioModule *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t WebCore::LibWebRTCAudioModule::EnableBuiltInAGC(WebCore::LibWebRTCAudioModule *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t WebCore::LibWebRTCAudioModule::EnableBuiltInNS(WebCore::LibWebRTCAudioModule *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t webrtc::AudioDeviceModule::GetPlayoutUnderrunCount(webrtc::AudioDeviceModule *this)
{
  return 0xFFFFFFFFLL;
}

void webrtc::AudioDeviceModule::GetStats(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[40] = 0;
}

uint64_t WebCore::LibWebRTCAudioModule::GetPlayoutAudioParameters()
{
  return 0xFFFFFFFFLL;
}

uint64_t WebCore::LibWebRTCAudioModule::GetRecordAudioParameters()
{
  return 0xFFFFFFFFLL;
}

uint64_t WebCore::RTCRtpCapabilities::operator=(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  uint64_t v16;

  v4 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v4)
  {
    v5 = *(WTF **)a1;
    v6 = 32 * v4;
    do
    {
      v7 = (WTF::StringImpl *)*((_QWORD *)v5 + 3);
      *((_QWORD *)v5 + 3) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v5 = (WTF *)((char *)v5 + 32);
      v6 -= 32;
    }
    while (v6);
  }
  v9 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v9, a2);
  }
  v10 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a1 = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(a1 + 8) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(a1 + 12) = v10;
  v11 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v11)
  {
    v12 = *(WTF::StringImpl ***)(a1 + 16);
    v13 = 8 * v11;
    do
    {
      v14 = *v12;
      *v12 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  v15 = *(WTF **)(a1 + 16);
  if (v15)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v15, a2);
  }
  v16 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)(a1 + 16) = v16;
  LODWORD(v16) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = 0;
  *(_DWORD *)(a1 + 24) = v16;
  LODWORD(v16) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = 0;
  *(_DWORD *)(a1 + 28) = v16;
  return a1;
}

uint64_t WebCore::LocalAudioMediaStreamTrackRendererInternalUnit::create@<X0>(WebCore::LocalAudioMediaStreamTrackRendererInternalUnit *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x80);
  *(_QWORD *)result = off_1E34199E8;
  *(_QWORD *)(result + 8) = this;
  *(_BYTE *)(result + 16) = 0;
  *(_BYTE *)(result + 96) = 0;
  *(_QWORD *)(result + 104) = 0;
  *(_BYTE *)(result + 112) = 0;
  *(_QWORD *)(result + 120) = 0;
  *a2 = result;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9UniqueRefIN7WebCore25DisplayCaptureSourceCocoa8CapturerEEENSA_18CaptureSourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9UniqueRefIN7WebCore25DisplayCaptureSourceCocoa8CapturerEEENSA_18CaptureSourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::CapturerObserver::~CapturerObserver(WebCore::CapturerObserver *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  JUMPOUT(0x19AEA7644);
}

__n128 std::__optional_storage_base<WebCore::RealtimeMediaSourceSettings,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RealtimeMediaSourceSettings,false>>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  __n128 result;
  __int128 v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;

  if (*(unsigned __int8 *)(a1 + 104) == *((unsigned __int8 *)a2 + 104))
  {
    if (*(_BYTE *)(a1 + 104))
    {
      v4 = *a2;
      v5 = a2[1];
      *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
      *(_OWORD *)a1 = v4;
      *(_OWORD *)(a1 + 16) = v5;
      v6 = *((_QWORD *)a2 + 5);
      *((_QWORD *)a2 + 5) = 0;
      v7 = *(WTF::StringImpl **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v6;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = *((_QWORD *)a2 + 6);
      *((_QWORD *)a2 + 6) = 0;
      v9 = *(WTF::StringImpl **)(a1 + 48);
      *(_QWORD *)(a1 + 48) = v8;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      v10 = *((_QWORD *)a2 + 7);
      *((_QWORD *)a2 + 7) = 0;
      v11 = *(WTF::StringImpl **)(a1 + 56);
      *(_QWORD *)(a1 + 56) = v10;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v11 -= 2;
      }
      result = (__n128)a2[4];
      v13 = a2[5];
      *(_QWORD *)(a1 + 94) = *(_QWORD *)((char *)a2 + 94);
      *(__n128 *)(a1 + 64) = result;
      *(_OWORD *)(a1 + 80) = v13;
    }
  }
  else if (*(_BYTE *)(a1 + 104))
  {
    v14 = *(WTF::StringImpl **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = *(WTF::StringImpl **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = *(WTF::StringImpl **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v16 -= 2;
    }
    *(_BYTE *)(a1 + 104) = 0;
  }
  else
  {
    v17 = *a2;
    v18 = a2[1];
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    *(_OWORD *)a1 = v17;
    *(_OWORD *)(a1 + 16) = v18;
    v19 = *((_QWORD *)a2 + 5);
    *((_QWORD *)a2 + 5) = 0;
    *(_QWORD *)(a1 + 40) = v19;
    v20 = *((_QWORD *)a2 + 6);
    *((_QWORD *)a2 + 6) = 0;
    *(_QWORD *)(a1 + 48) = v20;
    v21 = *((_QWORD *)a2 + 7);
    *((_QWORD *)a2 + 7) = 0;
    *(_QWORD *)(a1 + 56) = v21;
    result = (__n128)a2[4];
    v22 = a2[5];
    *(_QWORD *)(a1 + 94) = *(_QWORD *)((char *)a2 + 94);
    *(__n128 *)(a1 + 64) = result;
    *(_OWORD *)(a1 + 80) = v22;
    *(_BYTE *)(a1 + 104) = 1;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11NativeImageENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_9RetainPtrIP11__IOSurfaceEENSH_IP20opaqueCMSampleBufferEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSG_SK_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;

  v2 = *a2;
  *a2 = 0;
  if (!v2)
    return result;
  v3 = *(_QWORD *)(v2 + 8);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEA534C](v3);
LABEL_6:
  v6 = *(_QWORD *)(v3 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v3 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v11 = *(_QWORD *)(v3 + 16);
    v8 = *(_QWORD *)(v3 + 24);
    *(_QWORD *)(v3 + 24) = 0;
    v9 = v11 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v3);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v3);
    if (v7)
      return result;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
    goto LABEL_13;
  if (v7)
    return result;
LABEL_14:
  if (v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    return WTF::fastFree((WTF *)v3, a2);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11NativeImageENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_9RetainPtrIP11__IOSurfaceEENSH_IP20opaqueCMSampleBufferEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSG_SK_SN_EEEEEEDcSR_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11NativeImageENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_9RetainPtrIP11__IOSurfaceEENSH_IP20opaqueCMSampleBufferEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSG_SK_SN_EEEEEEDcSR_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

__n128 std::__optional_storage_base<WebCore::RealtimeMediaSourceCapabilities,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RealtimeMediaSourceCapabilities,false>>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  WTF::StringImpl *v6;
  __int128 v7;
  __int128 v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  __n128 result;
  __int128 v15;
  __int128 v16;
  WTF *v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  _DWORD *v21;
  _DWORD *v22;
  WTF *v23;
  void *v24;
  __int128 v25;

  if (*(unsigned __int8 *)(a1 + 192) == *((unsigned __int8 *)a2 + 192))
  {
    if (*(_BYTE *)(a1 + 192))
    {
      v4 = *a2;
      v5 = a2[2];
      *(_OWORD *)(a1 + 16) = a2[1];
      *(_OWORD *)(a1 + 32) = v5;
      *(_OWORD *)a1 = v4;
      WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 48, (const void **)a2 + 6);
      v7 = a2[4];
      v8 = a2[5];
      *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
      *(_OWORD *)(a1 + 64) = v7;
      *(_OWORD *)(a1 + 80) = v8;
      v9 = (_DWORD *)*((_QWORD *)a2 + 13);
      if (v9)
        *v9 += 2;
      v10 = *(WTF::StringImpl **)(a1 + 104);
      *(_QWORD *)(a1 + 104) = v9;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v6);
        else
          *(_DWORD *)v10 -= 2;
      }
      v11 = (_DWORD *)*((_QWORD *)a2 + 14);
      if (v11)
        *v11 += 2;
      v12 = *(WTF::StringImpl **)(a1 + 112);
      *(_QWORD *)(a1 + 112) = v11;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v6);
        else
          *(_DWORD *)v12 -= 2;
      }
      *(_OWORD *)(a1 + 120) = *(__int128 *)((char *)a2 + 120);
      WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 136, (const void **)a2 + 17);
      v13 = *(_QWORD *)((char *)a2 + 182);
      result = *(__n128 *)((char *)a2 + 168);
      *(_OWORD *)(a1 + 152) = *(__int128 *)((char *)a2 + 152);
      *(__n128 *)(a1 + 168) = result;
      *(_QWORD *)(a1 + 182) = v13;
    }
  }
  else if (*(_BYTE *)(a1 + 192))
  {
    std::__optional_destruct_base<WebCore::RealtimeMediaSourceCapabilities,false>::reset[abi:sn180100](a1, a2);
  }
  else
  {
    v15 = *a2;
    v16 = a2[2];
    *(_OWORD *)(a1 + 16) = a2[1];
    *(_OWORD *)(a1 + 32) = v16;
    *(_OWORD *)a1 = v15;
    v17 = (WTF *)*((unsigned int *)a2 + 15);
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 60) = (_DWORD)v17;
    if ((_DWORD)v17)
    {
      v18 = (void *)WTF::fastMalloc(v17);
      *(_DWORD *)(a1 + 56) = (_DWORD)v17;
      *(_QWORD *)(a1 + 48) = v18;
      memcpy(v18, *((const void **)a2 + 6), *((unsigned int *)a2 + 15));
    }
    v19 = a2[4];
    v20 = a2[5];
    *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
    *(_OWORD *)(a1 + 64) = v19;
    *(_OWORD *)(a1 + 80) = v20;
    v21 = (_DWORD *)*((_QWORD *)a2 + 13);
    if (v21)
      *v21 += 2;
    *(_QWORD *)(a1 + 104) = v21;
    v22 = (_DWORD *)*((_QWORD *)a2 + 14);
    if (v22)
      *v22 += 2;
    *(_QWORD *)(a1 + 112) = v22;
    *(_OWORD *)(a1 + 120) = *(__int128 *)((char *)a2 + 120);
    v23 = (WTF *)*((unsigned int *)a2 + 37);
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    *(_DWORD *)(a1 + 148) = (_DWORD)v23;
    if ((_DWORD)v23)
    {
      v24 = (void *)WTF::fastMalloc(v23);
      *(_DWORD *)(a1 + 144) = (_DWORD)v23;
      *(_QWORD *)(a1 + 136) = v24;
      memcpy(v24, *((const void **)a2 + 17), *((unsigned int *)a2 + 37));
    }
    result = *(__n128 *)((char *)a2 + 152);
    v25 = *(__int128 *)((char *)a2 + 168);
    *(_QWORD *)(a1 + 182) = *(_QWORD *)((char *)a2 + 182);
    *(_OWORD *)(a1 + 168) = v25;
    *(__n128 *)(a1 + 152) = result;
    *(_BYTE *)(a1 + 192) = 1;
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::RealtimeMediaSourceCapabilities,false>::reset[abi:sn180100](uint64_t result, void *a2)
{
  uint64_t v2;
  WTF *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(result + 192))
  {
    v2 = result;
    v3 = *(WTF **)(result + 136);
    if (v3)
    {
      *(_QWORD *)(v2 + 136) = 0;
      *(_DWORD *)(v2 + 144) = 0;
      WTF::fastFree(v3, a2);
    }
    v4 = *(WTF::StringImpl **)(v2 + 112);
    *(_QWORD *)(v2 + 112) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(v2 + 104);
    *(_QWORD *)(v2 + 104) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    result = *(_QWORD *)(v2 + 48);
    if (result)
    {
      *(_QWORD *)(v2 + 48) = 0;
      *(_DWORD *)(v2 + 56) = 0;
      result = WTF::fastFree((WTF *)result, a2);
    }
    *(_BYTE *)(v2 + 192) = 0;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::LibWebRTCAudioModule::*&)(void),WebCore::LibWebRTCAudioModule*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::DisplayCaptureSourceCocoa,(WTF::DestructionThread)2>(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;

  v1 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](this);
LABEL_5:
  v3 = *((_QWORD *)v1 + 1);
  v4 = v3 - 1;
  *((_QWORD *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    v9 = *((_QWORD *)v1 + 2);
    v6 = *((_QWORD *)v1 + 3);
    *((_QWORD *)v1 + 3) = 0;
    v5 = v9 == 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = __ldxr(v1);
  if (v7 != 1)
  {
    __clrex();
LABEL_12:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (v4)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, v1))
    goto LABEL_12;
  if (v4)
    return this;
LABEL_13:
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v8 = off_1E341A120;
  *(_QWORD *)(v8 + 8) = v1;
  *(_QWORD *)(v8 + 16) = v6;
  *(_BYTE *)(v8 + 24) = v5;
  v10 = (unsigned __int8 *)v8;
  WTF::ensureOnMainRunLoop();
  this = v10;
  if (v10)
    return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v10 + 8))(v10);
  return this;
}

WebCore::DisplayCaptureSourceCocoa *WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::DisplayCaptureSourceCocoa,(WTF::DestructionThread)2>(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  WebCore::DisplayCaptureSourceCocoa *result;
  WTF *v4;
  WTF *v5;
  void *v6;
  BOOL v7;

  v4 = *(WTF **)(a1 + 8);
  result = *(WebCore::DisplayCaptureSourceCocoa **)(a1 + 16);
  if (result)
  {
    WebCore::DisplayCaptureSourceCocoa::~DisplayCaptureSourceCocoa(result);
    result = (WebCore::DisplayCaptureSourceCocoa *)WTF::fastFree(v5, v6);
  }
  if (*(_BYTE *)(a1 + 24))
    v7 = v4 == 0;
  else
    v7 = 1;
  if (!v7)
    return (WebCore::DisplayCaptureSourceCocoa *)WTF::fastFree(v4, a2);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioMediaStreamTrackRendererCocoa::AudioMediaStreamTrackRendererCocoa(WebCore::AudioMediaStreamTrackRenderer::Init &&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 8) + 152);
  if (v1)
    *(_BYTE *)(v1 + 365) = 1;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AudioMediaStreamTrackRendererCocoa::start(WTF::CompletionHandler<void ()(void)> &&)::$_0,void,std::optional<WebCore::CAAudioStreamDescription>>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E341A170;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioMediaStreamTrackRendererCocoa::start(WTF::CompletionHandler<void ()(void)> &&)::$_0,void,std::optional<WebCore::CAAudioStreamDescription>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E341A170;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioMediaStreamTrackRendererCocoa::start(WTF::CompletionHandler<void ()(void)> &&)::$_0,void,std::optional<WebCore::CAAudioStreamDescription>>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  _BYTE v10[32];

  if (*(_BYTE *)(a2 + 80))
  {
    v8 = *(_OWORD *)(a2 + 8);
    v9 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)v10 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)&v10[16] = *(_OWORD *)(a2 + 56);
    a3 = *(_DWORD *)(a2 + 72);
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (*(_BYTE *)(a2 + 80) && v4 != 0)
    {
      if (*(_BYTE *)(v4 + 136))
      {
        *(_OWORD *)(v4 + 64) = v8;
        *(_OWORD *)(v4 + 80) = v9;
        *(_QWORD *)(v4 + 96) = *(_QWORD *)v10;
        *(_OWORD *)(v4 + 104) = *(_OWORD *)&v10[8];
        *(_QWORD *)(v4 + 120) = *(_QWORD *)&v10[24];
      }
      else
      {
        *(_QWORD *)(v4 + 56) = off_1E34087C0;
        *(_OWORD *)(v4 + 64) = v8;
        *(_OWORD *)(v4 + 80) = v9;
        *(_OWORD *)(v4 + 96) = *(_OWORD *)v10;
        *(_OWORD *)(v4 + 112) = *(_OWORD *)&v10[16];
        *(_BYTE *)(v4 + 136) = 1;
      }
      *(_DWORD *)(v4 + 128) = a3;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 160) = 1;
    }
  }
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AudioMediaStreamTrackRendererCocoa::pushSamples(WTF::MediaTime const&,WebCore::PlatformAudioData const&,WebCore::AudioStreamDescription const&,unsigned long)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v11;
  _QWORD *v12;

  *a1 = &off_1E341A198;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v11 = off_1E331A460;
      v11[1] = v4;
      v12 = v11;
      WTF::ensureOnMainRunLoop();
      if (v12)
        (*(void (**)(_QWORD *))(*v12 + 8))(v12);
    }
  }
  v7 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioMediaStreamTrackRendererCocoa::pushSamples(WTF::MediaTime const&,WebCore::PlatformAudioData const&,WebCore::AudioStreamDescription const&,unsigned long)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v11;
  _QWORD *v12;

  *(_QWORD *)this = &off_1E341A198;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v11 = off_1E331A460;
      v11[1] = v4;
      v12 = v11;
      WTF::ensureOnMainRunLoop();
      if (v12)
        (*(void (**)(_QWORD *))(*v12 + 8))(v12);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AudioMediaStreamTrackRendererCocoa::pushSamples(WTF::MediaTime const&,WebCore::PlatformAudioData const&,WebCore::AudioStreamDescription const&,unsigned long)::$_0,void>::call(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = result[1];
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = result[2];
      result[2] = 0;
      v10 = v3;
      result = (_QWORD *)WebCore::AudioMediaStreamTrackRendererCocoa::setRegisteredDataSource(v2, &v10);
      v4 = v10;
      v10 = 0;
      if (v4)
      {
        v5 = (unsigned int *)(v4 + 8);
        do
        {
          v6 = __ldaxr(v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, v5));
        if (!v7)
        {
          atomic_store(1u, v5);
          v8 = v5;
          v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v9 = off_1E331A460;
          v9[1] = v8;
          v11 = v9;
          WTF::ensureOnMainRunLoop();
          result = v11;
          v11 = 0;
          if (result)
            return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
        }
      }
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>,WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>>,WTF::HashTraits<WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>>,WTF::HashTraits<WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>>>::add(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t *v34;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = WTF::HashTable<WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>,WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>>,WTF::HashTraits<WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>>,WTF::HashTraits<WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = 0;
  v10 = *a3;
  v11 = ~(*a3 << 32) + *a3;
  v12 = 9
      * (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) ^ (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = (v13 >> 31) ^ v13;
  for (i = 1; ; ++i)
  {
    v16 = v14 & v8;
    v17 = (uint64_t *)(v6 + 8 * v16);
    v18 = *v17;
    if (*v17 != -1)
      break;
    v9 = (uint64_t *)(v6 + 8 * v16);
LABEL_10:
    v14 = i + v16;
  }
  if (!v18)
  {
    if (v9)
    {
      *v9 = 0;
      --*(_DWORD *)(*a2 - 16);
      v10 = *a3;
      v17 = v9;
    }
    *a3 = 0;
    v19 = *v17;
    *v17 = v10;
    if (v19)
    {
      v20 = (unsigned int *)(v19 + 8);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        atomic_store(1u, v20);
        v33 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
        *v33 = (uint64_t)off_1E331A460;
        v33[1] = (uint64_t)v20;
        v34 = v33;
        WTF::ensureOnMainRunLoop();
        result = v34;
        if (v34)
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v34 + 8))(v34);
      }
    }
    v23 = *a2;
    if (*a2)
      v24 = *(_DWORD *)(v23 - 12) + 1;
    else
      v24 = 1;
    *(_DWORD *)(v23 - 12) = v24;
    v28 = *a2;
    if (*a2)
      v29 = *(_DWORD *)(v28 - 12);
    else
      v29 = 0;
    v30 = (*(_DWORD *)(v28 - 16) + v29);
    v31 = *(unsigned int *)(v28 - 4);
    if (v31 > 0x400)
    {
      if (v31 <= 2 * v30)
        goto LABEL_30;
    }
    else if (3 * v31 <= 4 * v30)
    {
      if (!(_DWORD)v31)
      {
        v32 = 8;
LABEL_33:
        result = WTF::HashTable<WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>,WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>>,WTF::HashTraits<WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>>,WTF::HashTraits<WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>>>::rehash(a2, v32, v17);
        v17 = result;
        v28 = *a2;
        if (*a2)
          v31 = *(unsigned int *)(v28 - 4);
        else
          v31 = 0;
        goto LABEL_37;
      }
LABEL_30:
      v32 = (_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31));
      goto LABEL_33;
    }
LABEL_37:
    v27 = v28 + 8 * v31;
    v26 = 1;
    goto LABEL_38;
  }
  if (v18 != v10)
    goto LABEL_10;
  if ((v7 & 1) != 0)
    v25 = 0;
  else
    v25 = *(unsigned int *)(v6 - 4);
  v26 = 0;
  v27 = v6 + 8 * v25;
LABEL_38:
  *v5 = (uint64_t)v17;
  v5[1] = v27;
  *((_BYTE *)v5 + 16) = v26;
  return result;
}

_QWORD *WTF::HashTable<WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>,WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>>,WTF::HashTraits<WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>>,WTF::HashTraits<WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  _QWORD *v30;
  _QWORD *result;
  _QWORD *v32;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 8 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 8 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (_QWORD *)(v15 + 8 * v22);
          *v24 = 0;
          v25 = *v13;
          *v13 = 0;
          *v24 = v25;
          v26 = *v13;
          *v13 = 0;
          if (v26)
          {
            v27 = (unsigned int *)(v26 + 8);
            do
            {
              v28 = __ldaxr(v27);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, v27));
            if (!v29)
            {
              atomic_store(1u, v27);
              v30 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v30 = off_1E331A460;
              v30[1] = v27;
              v32 = v30;
              WTF::ensureOnMainRunLoop();
              if (v32)
                (*(void (**)(_QWORD *))(*v32 + 8))(v32);
            }
          }
          if (v13 == a3)
            v12 = v24;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashTable<WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>,WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>>,WTF::HashTraits<WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>>,WTF::HashTraits<WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>>>::remove(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t *v14;
  uint64_t *v15;

  v3 = result;
  v4 = *a2;
  *a2 = 0;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v14 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
      *v14 = (uint64_t)off_1E331A460;
      v14[1] = (uint64_t)v5;
      v15 = v14;
      WTF::ensureOnMainRunLoop();
      result = v15;
      if (v15)
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v15 + 8))(v15);
    }
  }
  *a2 = -1;
  ++*(_DWORD *)(*v3 - 16);
  v8 = *v3;
  if (*v3)
    v9 = *(_DWORD *)(v8 - 12) - 1;
  else
    v9 = -1;
  *(_DWORD *)(v8 - 12) = v9;
  v10 = *v3;
  if (*v3)
  {
    v11 = 6 * *(_DWORD *)(v10 - 12);
    v12 = *(_DWORD *)(v10 - 4);
    if (v11 < v12 && v12 >= 9)
      return WTF::HashTable<WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>,WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>>,WTF::HashTraits<WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>>,WTF::HashTraits<WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>>>>::rehash(v3, v12 >> 1, 0);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AudioMediaStreamTrackRendererUnit::reset(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E341A1C0;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioMediaStreamTrackRendererUnit::reset(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E341A1C0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioMediaStreamTrackRendererUnit::reset(void)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    result = *(_QWORD *)(v1 + 8);
    if (result)
      return WebCore::AudioMediaStreamTrackRendererUnit::reset((uint64_t **)result);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioMediaStreamTrackRendererUnit::reset(void)::$_1,void,WTF::Observer<void ()(void)> &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8));
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::DisplayCaptureSourceCocoa::*&)(void),WebCore::DisplayCaptureSourceCocoa*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayCaptureSourceCocoa::emitFrame(void)::$_0,WebCore::DisplayCaptureSourceCocoa::emitFrame(void)::$_1,WebCore::DisplayCaptureSourceCocoa::emitFrame(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::NativeImage,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WTF::RetainPtr<__IOSurface *>,WTF::RefPtr<WebCore::NativeImage,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>><opaqueCMSampleBuffer *>> &>(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)a2)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a2 + 48) + 24))(*(_QWORD *)(*(_QWORD *)a2 + 48));
  else
    return 0;
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayCaptureSourceCocoa::emitFrame(void)::$_0,WebCore::DisplayCaptureSourceCocoa::emitFrame(void)::$_1,WebCore::DisplayCaptureSourceCocoa::emitFrame(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::NativeImage,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WTF::RetainPtr<__IOSurface *>,WTF::RefPtr<WebCore::NativeImage,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>><opaqueCMSampleBuffer *>> &>(uint64_t a1, IOSurfaceRef *a2)
{
  unsigned int Width;

  if (!*a2)
    return 0;
  Width = IOSurfaceGetWidth(*a2);
  return Width | ((unint64_t)IOSurfaceGetHeight(*a2) << 32);
}

PAL *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayCaptureSourceCocoa::emitFrame(void)::$_0,WebCore::DisplayCaptureSourceCocoa::emitFrame(void)::$_1,WebCore::DisplayCaptureSourceCocoa::emitFrame(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::NativeImage,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WTF::RetainPtr<__IOSurface *>,WTF::RefPtr<WebCore::NativeImage,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>><opaqueCMSampleBuffer *>> &>(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  PAL *result;
  PAL *FormatDescription;
  const opaqueCMFormatDescription *v4;
  unsigned __int8 v5;
  double PresentationDimensions;
  double v7;

  result = *(PAL **)a2;
  if (*(_QWORD *)a2)
  {
    FormatDescription = (PAL *)PAL::softLinkCoreMediaCMSampleBufferGetFormatDescription(result, a2);
    if (PAL::softLinkCoreMediaCMFormatDescriptionGetMediaType[0](FormatDescription, v4) == 1986618469)
    {
      PresentationDimensions = PAL::softLinkCoreMediaCMVideoFormatDescriptionGetPresentationDimensions(FormatDescription, (const opaqueCMFormatDescription *)1, 1u, v5);
      return (PAL *)((int)PresentationDimensions | ((unint64_t)(int)v7 << 32));
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayCaptureSourceCocoa::emitFrame(void)::$_3,WebCore::DisplayCaptureSourceCocoa::emitFrame(void)::$_4,WebCore::DisplayCaptureSourceCocoa::emitFrame(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::NativeImage,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WTF::RetainPtr<__IOSurface *>,WTF::RefPtr<WebCore::NativeImage,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>><opaqueCMSampleBuffer *>> &>(uint64_t *a1@<X0>, uint64_t a2@<X1>, __CVBuffer **a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::ImageTransferSessionVT *v6;
  CGImage *v7;
  uint64_t v8;
  int v9;
  int v11;
  int v12;
  unint64_t v13;

  if (*(_QWORD *)a2)
  {
    v4 = *a1;
    v5 = *(_QWORD *)(*a1 + 24);
    v6 = *(WebCore::ImageTransferSessionVT **)(v5 + 776);
    v7 = *(CGImage **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a2 + 48) + 16))(*(_QWORD *)(*(_QWORD *)a2 + 48));
    v9 = *(_DWORD *)(v5 + 216);
    v8 = *(unsigned int *)(v5 + 220);
    if (v9 < 1 || (int)v8 <= 0)
    {
      v11 = *(_DWORD *)(v5 + 224);
      if (v11 >= 1)
      {
        v12 = *(_DWORD *)(v5 + 228);
        if (v12 >= 1)
        {
          if (v9)
          {
            v8 = (int)((double)v12 / (double)v11 * (double)v9);
          }
          else if ((_DWORD)v8)
          {
            v9 = (int)((double)v11 / (double)v12 * (double)(int)v8);
          }
          else
          {
            v9 = *(_DWORD *)(v5 + 224);
            v8 = *(unsigned int *)(v5 + 228);
          }
        }
      }
    }
    v13 = v9 | (unint64_t)(v8 << 32);
    WebCore::ImageTransferSessionVT::createVideoFrame((WebCore::IntSize *)&v13, v6, v7, (const WTF::MediaTime *)(v4 + 32), 0, 0, a3);
  }
  else
  {
    *a3 = 0;
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayCaptureSourceCocoa::emitFrame(void)::$_3,WebCore::DisplayCaptureSourceCocoa::emitFrame(void)::$_4,WebCore::DisplayCaptureSourceCocoa::emitFrame(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::NativeImage,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WTF::RetainPtr<__IOSurface *>,WTF::RefPtr<WebCore::NativeImage,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>><opaqueCMSampleBuffer *>> &>(uint64_t **a1@<X0>, __IOSurface **a2@<X1>, _QWORD *a3@<X8>)
{
  __IOSurface *v4;
  const WTF::MediaTime *v5;
  uint64_t v6;
  WebCore::ImageTransferSessionVT *v7;
  uint64_t v8;
  int v9;
  int v11;
  int v12;
  PAL *v13;
  unint64_t v14;
  uint64_t v15;
  PAL *v16;

  v4 = *a2;
  if (!v4)
    goto LABEL_16;
  v5 = (const WTF::MediaTime *)(*a1 + 1);
  v6 = **a1;
  v7 = *(WebCore::ImageTransferSessionVT **)(v6 + 776);
  v9 = *(_DWORD *)(v6 + 216);
  v8 = *(unsigned int *)(v6 + 220);
  if (v9 < 1 || (int)v8 <= 0)
  {
    v11 = *(_DWORD *)(v6 + 224);
    if (v11 >= 1)
    {
      v12 = *(_DWORD *)(v6 + 228);
      if (v12 >= 1)
      {
        if (v9)
        {
          v8 = (int)((double)v12 / (double)v11 * (double)v9);
        }
        else if ((_DWORD)v8)
        {
          v9 = (int)((double)v11 / (double)v12 * (double)(int)v8);
        }
        else
        {
          v9 = *(_DWORD *)(v6 + 224);
          v8 = *(unsigned int *)(v6 + 228);
        }
      }
    }
  }
  v14 = v9 | (unint64_t)(v8 << 32);
  WebCore::ImageTransferSessionVT::createCMSampleBuffer(v7, v4, v5, (const WebCore::IntSize *)&v14, (CMTimeValue *)&v16);
  v13 = v16;
  if (v16)
  {
    WebCore::VideoFrameCV::create(v16, 0, 0, &v15);
    *a3 = v15;
    CFRelease(v13);
  }
  else
  {
LABEL_16:
    *a3 = 0;
  }
}

void sub_1962B3700(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DisplayCaptureSourceCocoa::emitFrame(void)::$_3,WebCore::DisplayCaptureSourceCocoa::emitFrame(void)::$_4,WebCore::DisplayCaptureSourceCocoa::emitFrame(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::NativeImage,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WTF::RetainPtr<__IOSurface *>,WTF::RefPtr<WebCore::NativeImage,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>><opaqueCMSampleBuffer *>> &>(uint64_t *a1@<X0>, opaqueCMSampleBuffer **a2@<X1>, _QWORD *a3@<X8>)
{
  opaqueCMSampleBuffer *v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::ImageTransferSessionVT *v7;
  const WTF::MediaTime *v8;
  uint64_t v9;
  int v10;
  int v12;
  int v13;
  PAL *v14;
  unint64_t v15;
  uint64_t v16;
  PAL *v17;

  v4 = *a2;
  if (!v4)
    goto LABEL_16;
  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 48);
  v7 = *(WebCore::ImageTransferSessionVT **)(v6 + 776);
  v8 = (const WTF::MediaTime *)(v5 + 56);
  v10 = *(_DWORD *)(v6 + 216);
  v9 = *(unsigned int *)(v6 + 220);
  if (v10 < 1 || (int)v9 <= 0)
  {
    v12 = *(_DWORD *)(v6 + 224);
    if (v12 >= 1)
    {
      v13 = *(_DWORD *)(v6 + 228);
      if (v13 >= 1)
      {
        if (v10)
        {
          v9 = (int)((double)v13 / (double)v12 * (double)v10);
        }
        else if ((_DWORD)v9)
        {
          v10 = (int)((double)v12 / (double)v13 * (double)(int)v9);
        }
        else
        {
          v10 = *(_DWORD *)(v6 + 224);
          v9 = *(unsigned int *)(v6 + 228);
        }
      }
    }
  }
  v15 = v10 | (unint64_t)(v9 << 32);
  WebCore::ImageTransferSessionVT::convertCMSampleBuffer(v7, v4, (const WebCore::IntSize *)&v15, v8, &v17);
  v14 = v17;
  if (v17)
  {
    WebCore::VideoFrameCV::create(v17, 0, 0, &v16);
    *a3 = v16;
    CFRelease(v14);
  }
  else
  {
LABEL_16:
    *a3 = 0;
  }
}

void sub_1962B3808(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DisplayCaptureSourceCocoa::capturerConfigurationChanged(void)::$_0,void,WebCore::RealtimeMediaSourceObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IncomingAudioMediaStreamTrackRendererUnit::addSource(WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>> &&)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  WTF *v11;
  _QWORD *v13;

  *(_QWORD *)a1 = &off_1E341A290;
  v3 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(a1 + 16);
    v5 = &v4[v3];
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        v7 = (unsigned int *)(v6 + 8);
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          atomic_store(1u, v7);
          v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v10 = off_1E331A460;
          v10[1] = v7;
          v13 = v10;
          WTF::ensureOnMainRunLoop();
          if (v13)
            (*(void (**)(_QWORD *))(*v13 + 8))(v13);
        }
      }
      ++v4;
    }
    while (v4 != v5);
  }
  v11 = *(WTF **)(a1 + 16);
  if (v11)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v11, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IncomingAudioMediaStreamTrackRendererUnit::addSource(WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  WTF *v11;
  _QWORD *v13;

  *(_QWORD *)this = &off_1E341A290;
  v3 = *((unsigned int *)this + 7);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)*((_QWORD *)this + 2);
    v5 = &v4[v3];
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        v7 = (unsigned int *)(v6 + 8);
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          atomic_store(1u, v7);
          v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v10 = off_1E331A460;
          v10[1] = v7;
          v13 = v10;
          WTF::ensureOnMainRunLoop();
          if (v13)
            (*(void (**)(_QWORD *))(*v13 + 8))(v13);
        }
      }
      ++v4;
    }
    while (v4 != v5);
  }
  v11 = (WTF *)*((_QWORD *)this + 2);
  if (v11)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v11, a2);
  }
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebCore::IncomingAudioMediaStreamTrackRendererUnit::addSource(WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>> &&)::$_0,void>::call(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  WTF *result;
  uint64_t v13;
  unsigned int *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  WebCore::WebAudioBufferList *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  OpaqueAudioConverter **v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  __int128 v31;
  __int128 v32;
  void (***v33)(_QWORD);
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  WTF *v37;
  _QWORD *v38;
  _QWORD *v39;
  __int128 v40;
  WTF *v41;
  _QWORD *v42;
  __int128 v43;
  _BYTE v44[32];

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned int *)(v3 + 60);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v3 + 48);
    v6 = &v5[v4];
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        v8 = (unsigned int *)(v7 + 8);
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v11 = off_1E331A460;
          v11[1] = v8;
          v39 = v11;
          WTF::ensureOnMainRunLoop();
          if (v39)
            (*(void (**)(_QWORD *))(*v39 + 8))(v39);
        }
      }
      ++v5;
    }
    while (v5 != v6);
  }
  result = *(WTF **)(v3 + 48);
  if (result)
  {
    *(_QWORD *)(v3 + 48) = 0;
    *(_DWORD *)(v3 + 56) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(v3 + 48) = v13;
  LODWORD(v13) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(v3 + 56) = v13;
  LODWORD(v13) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(v3 + 60) = v13;
  if (*(_BYTE *)(a1 + 32))
  {
    v14 = (unsigned int *)(v3 + 72);
    if (*(_BYTE *)(v3 + 152))
    {
      v15 = *(_OWORD *)(a1 + 48);
      v16 = *(_OWORD *)(a1 + 64);
      *(_QWORD *)(v3 + 112) = *(_QWORD *)(a1 + 80);
      *(_OWORD *)(v3 + 80) = v15;
      *(_OWORD *)(v3 + 96) = v16;
      v17 = *(_OWORD *)(a1 + 88);
      *(_QWORD *)(v3 + 136) = *(_QWORD *)(a1 + 104);
      *(_OWORD *)(v3 + 120) = v17;
      *(_DWORD *)(v3 + 144) = *(_DWORD *)(a1 + 112);
    }
    else
    {
      *(_QWORD *)(v3 + 72) = off_1E34087C0;
      *(_OWORD *)(v3 + 80) = *(_OWORD *)(a1 + 48);
      v18 = *(_OWORD *)(a1 + 64);
      v19 = *(_OWORD *)(a1 + 80);
      v20 = *(_OWORD *)(a1 + 96);
      *(_DWORD *)(v3 + 144) = *(_DWORD *)(a1 + 112);
      *(_OWORD *)(v3 + 112) = v19;
      *(_OWORD *)(v3 + 128) = v20;
      *(_OWORD *)(v3 + 96) = v18;
      *(_BYTE *)(v3 + 152) = 1;
    }
    v21 = (WebCore::WebAudioBufferList *)WTF::fastMalloc((WTF *)0x48);
    WebCore::WebAudioBufferList::WebAudioBufferList(v21, (const WebCore::CAAudioStreamDescription *)(v3 + 72));
    std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100]((uint64_t *)(v3 + 160), v21);
    if (*(_BYTE *)(v3 + 152)
      && (v22 = (unint64_t)(*(double *)(v3 + 80) / 100.0),
          *(_QWORD *)(v3 + 168) = v22,
          WebCore::WebAudioBufferList::setSampleCount(*(_QWORD **)(v3 + 160), v22),
          *(_BYTE *)(v3 + 152)))
    {
      v23 = (unint64_t)(*(double *)(v3 + 80) * 0.5);
      v24 = WTF::fastMalloc((WTF *)0x180);
      WebCore::AudioSampleDataSource::AudioSampleDataSource(v24, v23, v3 + 8, 2);
      v26 = *(_QWORD *)(v3 + 64);
      *(_QWORD *)(v3 + 64) = v24;
      if (!v26)
        goto LABEL_23;
      v14 = (unsigned int *)(v26 + 8);
      do
      {
        v27 = __ldaxr(v14);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v14));
      if (v28)
      {
LABEL_23:
        v29 = *(_QWORD *)(v3 + 64);
        v40 = *(_OWORD *)(a1 + 48);
        v43 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)v44 = *(_OWORD *)(a1 + 80);
        *(_OWORD *)&v44[16] = *(_OWORD *)(a1 + 96);
        v30 = *(_DWORD *)(a1 + 112);
        if (*(_BYTE *)(v29 + 96))
        {
          v31 = *(_OWORD *)(a1 + 48);
          v32 = *(_OWORD *)(a1 + 64);
          *(_QWORD *)(v29 + 56) = *(_QWORD *)(a1 + 80);
          *(_OWORD *)(v29 + 40) = v32;
          *(_OWORD *)(v29 + 24) = v31;
          *(_OWORD *)(v29 + 64) = *(_OWORD *)&v44[8];
          *(_QWORD *)(v29 + 80) = *(_QWORD *)&v44[24];
        }
        else
        {
          *(_QWORD *)(v29 + 16) = off_1E34087C0;
          *(_OWORD *)(v29 + 24) = v40;
          *(_OWORD *)(v29 + 40) = v43;
          *(_OWORD *)(v29 + 56) = *(_OWORD *)v44;
          *(_OWORD *)(v29 + 72) = *(_OWORD *)&v44[16];
          *(_BYTE *)(v29 + 96) = 1;
        }
        *(_DWORD *)(v29 + 88) = v30;
        if (*(_BYTE *)(v29 + 184))
          WebCore::AudioSampleDataConverter::setFormats(v29 + 256, (_DWORD *)(v29 + 16), v29 + 104, v25);
        WebCore::AudioSampleDataSource::setOutputFormat(*(WebCore::AudioSampleDataSource **)(v3 + 64), (const WebCore::CAAudioStreamDescription *)(a1 + 40));
        *(_QWORD *)(v3 + 176) = 0;
        v33 = *(void (****)(_QWORD))(v3 + 16);
        (**v33)(v33);
        v34 = *(_QWORD *)(v3 + 64);
        if (v34)
        {
          v35 = (unsigned int *)(v34 + 8);
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 + 1, v35));
        }
        v37 = (WTF *)WTF::fastMalloc((WTF *)0x20);
        *(_QWORD *)v37 = &off_1E341A2B8;
        *((_QWORD *)v37 + 1) = v3;
        *((_QWORD *)v37 + 2) = v33;
        *((_QWORD *)v37 + 3) = v34;
        v41 = v37;
        WTF::callOnMainThread();
        result = v41;
        if (v41)
          return (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v41 + 8))(v41);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    atomic_store(1u, v14);
    v38 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v38 = off_1E331A460;
    v38[1] = v14;
    v42 = v38;
    WTF::ensureOnMainRunLoop();
    if (v42)
      (*(void (**)(_QWORD *))(*v42 + 8))(v42);
    goto LABEL_23;
  }
  return result;
}

void sub_1962B3D7C(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IncomingAudioMediaStreamTrackRendererUnit::addSource(WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v8;
  _QWORD *v9;

  *a1 = &off_1E341A2B8;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E331A460;
      v8[1] = v3;
      v9 = v8;
      WTF::ensureOnMainRunLoop();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  v6 = a1[2];
  a1[2] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IncomingAudioMediaStreamTrackRendererUnit::addSource(WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v9;
  _QWORD *v10;

  *(_QWORD *)this = &off_1E341A2B8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v9 = off_1E331A460;
      v9[1] = v4;
      v10 = v9;
      WTF::ensureOnMainRunLoop();
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    }
  }
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebCore::IncomingAudioMediaStreamTrackRendererUnit::addSource(WTF::Ref<WebCore::AudioSampleDataSource,WTF::RawPtrTraits<WebCore::AudioSampleDataSource>,WTF::DefaultRefDerefTraits<WebCore::AudioSampleDataSource>> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  NSObject *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  WTF *result;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  WTF *v17;
  _QWORD *v18;
  Client *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint8_t buf[16];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v3 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v1 + 40) = v2;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v16 = off_1E331A460;
      v16[1] = v4;
      *(_QWORD *)buf = v16;
      WTF::ensureOnMainRunLoop();
      v17 = *(WTF **)buf;
      *(_QWORD *)buf = 0;
      if (v17)
        (*(void (**)(WTF *))(*(_QWORD *)v17 + 8))(v17);
    }
  }
  v7 = qword_1ECE7CD60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1940B8000, v7, OS_LOG_TYPE_DEFAULT, "IncomingAudioMediaStreamTrackRendererUnit::start", buf, 2u);
  }
  if ((_MergedGlobals_238 & 1) == 0)
  {
    qword_1ECE84030 = (uint64_t)off_1E341A058;
    qword_1ECE84038 = 0;
    v20 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v20 = 1;
    *(_QWORD *)(v20 + 8) = &qword_1ECE84030;
    v21 = (unsigned int *)qword_1ECE84038;
    qword_1ECE84038 = v20;
    if (v21)
    {
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        atomic_store(1u, v21);
        WTF::fastFree((WTF *)v21, v19);
      }
    }
    qword_1ECE84030 = (uint64_t)&off_1E3419A28;
    qword_1ECE84040 = (uint64_t)&unk_1E3419A78;
    xmmword_1ECE84048 = 0u;
    unk_1ECE84058 = 0u;
    unk_1ECE84062 = 0u;
    WebCore::createInternalUnit((WebCore::LocalAudioMediaStreamTrackRendererInternalUnit *)&qword_1ECE84040, v19);
    qword_1ECE84080 = 0;
    unk_1ECE84088 = 0;
    _MergedGlobals_238 = 1;
  }
  v8 = *(_QWORD *)(v1 + 40);
  v9 = (unsigned int *)(v8 + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  v24 = v8;
  result = WebCore::AudioMediaStreamTrackRendererUnit::addSource((uint64_t)&qword_1ECE84030, &v24);
  v12 = v24;
  v24 = 0;
  if (v12)
  {
    v13 = (unsigned int *)(v12 + 8);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v18 = off_1E331A460;
      v18[1] = v13;
      *(_QWORD *)buf = v18;
      WTF::ensureOnMainRunLoop();
      result = *(WTF **)buf;
      *(_QWORD *)buf = 0;
      if (result)
        result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 8))(result);
    }
  }
  *(_BYTE *)(*(_QWORD *)(v1 + 16) + 64) = 1;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IncomingAudioMediaStreamTrackRendererUnit::removeSource(WebCore::AudioSampleDataSource &)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  WTF *v11;
  _QWORD *v13;

  *(_QWORD *)a1 = &off_1E341A2E0;
  v3 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(a1 + 16);
    v5 = &v4[v3];
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        v7 = (unsigned int *)(v6 + 8);
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          atomic_store(1u, v7);
          v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v10 = off_1E331A460;
          v10[1] = v7;
          v13 = v10;
          WTF::ensureOnMainRunLoop();
          if (v13)
            (*(void (**)(_QWORD *))(*v13 + 8))(v13);
        }
      }
      ++v4;
    }
    while (v4 != v5);
  }
  v11 = *(WTF **)(a1 + 16);
  if (v11)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v11, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IncomingAudioMediaStreamTrackRendererUnit::removeSource(WebCore::AudioSampleDataSource &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  WTF *v11;
  _QWORD *v13;

  *(_QWORD *)this = &off_1E341A2E0;
  v3 = *((unsigned int *)this + 7);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)*((_QWORD *)this + 2);
    v5 = &v4[v3];
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        v7 = (unsigned int *)(v6 + 8);
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          atomic_store(1u, v7);
          v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v10 = off_1E331A460;
          v10[1] = v7;
          v13 = v10;
          WTF::ensureOnMainRunLoop();
          if (v13)
            (*(void (**)(_QWORD *))(*v13 + 8))(v13);
        }
      }
      ++v4;
    }
    while (v4 != v5);
  }
  v11 = (WTF *)*((_QWORD *)this + 2);
  if (v11)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v11, a2);
  }
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebCore::IncomingAudioMediaStreamTrackRendererUnit::removeSource(WebCore::AudioSampleDataSource &)::$_0,void>::call(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  WTF *result;
  uint64_t v13;
  void (***v14)(_QWORD);
  WTF *v15;
  _QWORD *v16;
  WTF *v17;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned int *)(v3 + 60);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v3 + 48);
    v6 = &v5[v4];
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        v8 = (unsigned int *)(v7 + 8);
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v11 = off_1E331A460;
          v11[1] = v8;
          v16 = v11;
          WTF::ensureOnMainRunLoop();
          if (v16)
            (*(void (**)(_QWORD *))(*v16 + 8))(v16);
        }
      }
      ++v5;
    }
    while (v5 != v6);
  }
  result = *(WTF **)(v3 + 48);
  if (result)
  {
    *(_QWORD *)(v3 + 48) = 0;
    *(_DWORD *)(v3 + 56) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(v3 + 48) = v13;
  LODWORD(v13) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(v3 + 56) = v13;
  LODWORD(v13) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(v3 + 60) = v13;
  if (*(_BYTE *)(a1 + 32))
  {
    v14 = *(void (****)(_QWORD))(v3 + 16);
    (**v14)(v14);
    v15 = (WTF *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v15 = &off_1E341A308;
    *((_QWORD *)v15 + 1) = v3;
    *((_QWORD *)v15 + 2) = v14;
    v17 = v15;
    WTF::callOnMainThread();
    result = v17;
    if (v17)
      return (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v17 + 8))(v17);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IncomingAudioMediaStreamTrackRendererUnit::removeSource(WebCore::AudioSampleDataSource &)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E341A308;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IncomingAudioMediaStreamTrackRendererUnit::removeSource(WebCore::AudioSampleDataSource &)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E341A308;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebCore::IncomingAudioMediaStreamTrackRendererUnit::removeSource(WebCore::AudioSampleDataSource &)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  WTF *result;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  Client *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  __int16 v14;
  WTF *v15;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = qword_1ECE7CD60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT))
  {
    v14 = 0;
    _os_log_impl(&dword_1940B8000, v2, OS_LOG_TYPE_DEFAULT, "IncomingAudioMediaStreamTrackRendererUnit::stop", (uint8_t *)&v14, 2u);
  }
  if ((_MergedGlobals_238 & 1) == 0)
  {
    qword_1ECE84030 = (uint64_t)off_1E341A058;
    qword_1ECE84038 = 0;
    v10 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = &qword_1ECE84030;
    v11 = (unsigned int *)qword_1ECE84038;
    qword_1ECE84038 = v10;
    if (v11)
    {
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, v9);
      }
    }
    qword_1ECE84030 = (uint64_t)&off_1E3419A28;
    qword_1ECE84040 = (uint64_t)&unk_1E3419A78;
    xmmword_1ECE84048 = 0u;
    unk_1ECE84058 = 0u;
    unk_1ECE84062 = 0u;
    WebCore::createInternalUnit((WebCore::LocalAudioMediaStreamTrackRendererInternalUnit *)&qword_1ECE84040, v9);
    qword_1ECE84080 = 0;
    unk_1ECE84088 = 0;
    _MergedGlobals_238 = 1;
  }
  result = WebCore::AudioMediaStreamTrackRendererUnit::removeSource((uint64_t **)&qword_1ECE84030, *(WebCore::AudioSampleDataSource **)(v1 + 40));
  v4 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v8 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v8 = off_1E331A460;
      *((_QWORD *)v8 + 1) = v5;
      v15 = v8;
      WTF::ensureOnMainRunLoop();
      result = v15;
      v15 = 0;
      if (result)
        result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 8))(result);
    }
  }
  *(_BYTE *)(*(_QWORD *)(v1 + 16) + 64) = 0;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::IncomingAudioMediaStreamTrackRendererUnit::postTask(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E341A330;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IncomingAudioMediaStreamTrackRendererUnit::postTask(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E341A330;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IncomingAudioMediaStreamTrackRendererUnit::postTask(WTF::Function<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::IncomingAudioMediaStreamTrackRendererUnit::newAudioChunkPushed(unsigned long long)::$_0,void>::call(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  AudioBufferList *v11;
  int v12;
  vDSP_Length v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  _BOOL4 v21;
  BOOL v22;
  uint64_t v23;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = *(_QWORD *)(result + 8);
  if (!*(_BYTE *)(v3 + 152))
    goto LABEL_41;
  v4 = *(double *)(v3 + 80);
  v5 = *(unsigned int *)(v3 + 60);
  if (!(_DWORD)v5)
  {
    v6 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    goto LABEL_17;
  }
  v6 = 0;
  v7 = (unint64_t)(v4 * (double)*(unint64_t *)(result + 16) / 48000.0);
  v8 = *(uint64_t **)(v3 + 48);
  v9 = 8 * v5;
  do
  {
    v10 = *v8;
    v11 = *(AudioBufferList **)(*(_QWORD *)(v3 + 160) + 40);
    v12 = v6 & 1;
    if (v11->mNumberBuffers == *(_DWORD *)(*(_QWORD *)(*v8 + 344) + 24)
      && !*(_BYTE *)(v10 + 364)
      && *(_BYTE *)(v10 + 232))
    {
      v13 = *(_QWORD *)(v3 + 168);
      if (*(_BYTE *)(v10 + 365))
      {
        *(_BYTE *)(v10 + 365) = 0;
        v14 = *(_QWORD *)(v10 + 224);
        *(_QWORD *)(v10 + 240) = v14;
      }
      else
      {
        v14 = *(_QWORD *)(v10 + 240);
      }
      result = WebCore::AudioSampleDataSource::pullSamplesInternal(v10, v11, v13, v14 + v7, v12);
    }
    else
    {
      result = 0;
    }
    v6 = v12 | result;
    ++v8;
    v9 -= 8;
  }
  while (v9);
  v15 = *(unsigned __int8 *)(v3 + 152);
  v25 = 0;
  v26 = 0;
  v27 = 0;
  if (!v15)
  {
LABEL_41:
    __break(1u);
    return result;
  }
  v4 = *(double *)(v3 + 80);
LABEL_17:
  result = PAL::softLinkCoreMediaCMTimeMake(*(PAL **)(v3 + 176), (int)v4, a3);
  if ((v6 & 1) != 0)
  {
    v16 = *(_QWORD *)(v3 + 64);
    v17 = v26;
    v18 = BYTE4(v26) & 1;
    if ((~HIDWORD(v26) & 3) == 0)
      v18 = BYTE4(v26) & 1 | 2;
    if ((~HIDWORD(v26) & 5) == 0)
      v18 |= 4u;
    if ((~HIDWORD(v26) & 9) == 0)
      v18 |= 8u;
    if ((~HIDWORD(v26) & 0x11) != 0)
      v19 = v18;
    else
      v19 = v18 | 0x10;
    v21 = (v19 & 1) == 0 || v26 != 0;
    v22 = !v21;
    if (v21)
    {
      v23 = v25;
    }
    else
    {
      v19 = 5;
      v23 = v25 >> 63;
    }
    if (v22)
      v17 = 1;
    v24[0] = v23;
    v24[1] = v17 | ((unint64_t)v19 << 32);
    result = WebCore::AudioSampleDataSource::pushSamples(v16, (uint64_t)v24, *(_QWORD **)(v3 + 160), *(_QWORD *)(v3 + 168));
  }
  *(_QWORD *)(v3 + 176) += *(_QWORD *)(v3 + 168);
  return result;
}

void WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::LibWebRTCProviderCocoa>(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = WTF::fastMalloc((WTF *)0xC8);
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_QWORD *)(v2 + 192) = 0;
  WebCore::LibWebRTCProvider::LibWebRTCProvider((WebCore::LibWebRTCProvider *)v2);
  *v3 = off_1E3419F68;
  *a1 = v3;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCAudioModule::Terminate(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E341A380;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCAudioModule::Terminate(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E341A380;
  v3 = *((_QWORD *)this + 2);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCAudioModule::Terminate(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCAudioModule::StartPlayout(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E341A3A8;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCAudioModule::StartPlayout(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E341A3A8;
  v3 = *((_QWORD *)this + 2);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCAudioModule::StartPlayout(void)::$_0,void>::call(WTF::MonotonicTime *a1)
{
  uint64_t v1;
  double v2;

  v1 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 40);
  *(_QWORD *)(v1 + 24) = 0x4000000000000000;
  WTF::MonotonicTime::now(a1);
  return WebCore::TimerBase::setNextFireTime(v1, v2 + 2.0);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCAudioModule::StartPlayout(void)::$_1,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E341A3D0;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCAudioModule::StartPlayout(void)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E341A3D0;
  v3 = *((_QWORD *)this + 2);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

_BYTE *WTF::Detail::CallableWrapper<WebCore::LibWebRTCAudioModule::StartPlayout(void)::$_1,void>::call(WTF::MonotonicTime *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)a1 + 1);
  WTF::MonotonicTime::now(a1);
  *(_QWORD *)(v1 + 32) = v2;
  *(_QWORD *)(v1 + 56) = 0;
  return WebCore::LibWebRTCAudioModule::pollAudioData((_BYTE *)v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCAudioModule::StopPlayout(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E341A3F8;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCAudioModule::StopPlayout(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E341A3F8;
  v3 = *((_QWORD *)this + 2);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WebCore::TimerBase *WTF::Detail::CallableWrapper<WebCore::LibWebRTCAudioModule::StopPlayout(void)::$_0,void>::call(uint64_t a1)
{
  WebCore::TimerBase *result;

  result = *(WebCore::TimerBase **)(*(_QWORD *)(a1 + 8) + 40);
  if ((*((_QWORD *)result + 4) & 0xFFFFFFFFFFFFLL) != 0)
    return (WebCore::TimerBase *)WebCore::TimerBase::stopSlowCase(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCAudioModule::pollAudioData(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E341A420;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCAudioModule::pollAudioData(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E341A420;
  v3 = *((_QWORD *)this + 2);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

_BYTE *WTF::Detail::CallableWrapper<WebCore::LibWebRTCAudioModule::pollAudioData(void)::$_0,void>::call(uint64_t a1)
{
  return WebCore::LibWebRTCAudioModule::pollAudioData(*(_BYTE **)(a1 + 8));
}

void WebCore::LibWebRTCDTMFSenderBackend::~LibWebRTCDTMFSenderBackend(WebCore::LibWebRTCDTMFSenderBackend *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3));
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 3);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v6 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, v2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3));
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 3);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v6 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, v2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  WTF::fastFree(this, v2);
}

void `non-virtual thunk to'WebCore::LibWebRTCDTMFSenderBackend::~LibWebRTCDTMFSenderBackend(WebCore::LibWebRTCDTMFSenderBackend *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v6 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, v2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v6 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, v2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  WTF::fastFree((WebCore::LibWebRTCDTMFSenderBackend *)((char *)this - 8), v2);
}

uint64_t WebCore::LibWebRTCDTMFSenderBackend::canInsertDTMF(WebCore::LibWebRTCDTMFSenderBackend *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 48))(*((_QWORD *)this + 3));
}

void WebCore::LibWebRTCDTMFSenderBackend::playTone(WebCore::LibWebRTCDTMFSenderBackend *this, unsigned __int8 a2)
{
  uint64_t v2;
  void *__p;
  char v4;

  v2 = *((_QWORD *)this + 3);
  v4 = 1;
  LOWORD(__p) = a2;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v2 + 56))(v2, &__p);
  if (v4 < 0)
    operator delete(__p);
}

void WebCore::LibWebRTCDTMFSenderBackend::tones(WebCore::LibWebRTCDTMFSenderBackend *this)
{
  void *__p;
  char v2;

  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 3) + 72))(&__p);
  WTF::String::fromUTF8();
  if (v2 < 0)
    operator delete(__p);
}

uint64_t WebCore::LibWebRTCDTMFSenderBackend::duration(WebCore::LibWebRTCDTMFSenderBackend *this)
{
  return (*(int (**)(_QWORD))(**((_QWORD **)this + 3) + 80))(*((_QWORD *)this + 3));
}

uint64_t WebCore::LibWebRTCDTMFSenderBackend::interToneGap(WebCore::LibWebRTCDTMFSenderBackend *this)
{
  return (*(int (**)(_QWORD))(**((_QWORD **)this + 3) + 88))(*((_QWORD *)this + 3));
}

uint64_t WebCore::LibWebRTCDTMFSenderBackend::OnToneChange(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  _QWORD *v11;

  v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  if (!v2)
  {
    v3 = result;
    v4 = *(_QWORD *)(result + 16);
    if (v4)
      goto LABEL_15;
    v4 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v4 = 1;
    *(_QWORD *)(v4 + 8) = v3;
    v6 = *(unsigned int **)(v3 + 16);
    *(_QWORD *)(v3 + 16) = v4;
    if (!v6)
      goto LABEL_15;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v5);
    }
    v4 = *(_QWORD *)(v3 + 16);
    if (v4)
    {
LABEL_15:
      do
        v9 = __ldaxr((unsigned int *)v4);
      while (__stlxr(v9 + 1, (unsigned int *)v4));
    }
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v10 = &off_1E341A930;
    v10[1] = v3;
    v10[2] = v4;
    v11 = v10;
    WTF::callOnMainThread();
    result = (uint64_t)v11;
    if (v11)
      return (*(uint64_t (**)(_QWORD *))(*v11 + 8))(v11);
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::LibWebRTCDTMFSenderBackend::OnToneChange(uint64_t a1, uint64_t a2)
{
  return WebCore::LibWebRTCDTMFSenderBackend::OnToneChange(a1 - 8, a2);
}

uint64_t WebCore::LibWebRTCDTMFSenderBackend::onTonePlayed(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WebCore::LibWebRTCLogSink::~LibWebRTCLogSink(WebCore::LibWebRTCLogSink *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void WebCore::LibWebRTCLogSink::~LibWebRTCLogSink(WebCore::LibWebRTCLogSink *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::fastFree(this, a2);
}

void WebCore::LibWebRTCProvider::~LibWebRTCProvider(WebCore::LibWebRTCProvider *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E341A5B0;
  v3 = *((_QWORD *)this + 23);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *(_QWORD *)this = off_1E341A7A8;
  if (*((_BYTE *)this + 160))
    WebCore::RTCRtpCapabilities::~RTCRtpCapabilities((WebCore::LibWebRTCProvider *)((char *)this + 128), a2);
  if (*((_BYTE *)this + 120))
    WebCore::RTCRtpCapabilities::~RTCRtpCapabilities((WebCore::LibWebRTCProvider *)((char *)this + 88), a2);
  if (*((_BYTE *)this + 80))
    WebCore::RTCRtpCapabilities::~RTCRtpCapabilities((WebCore::LibWebRTCProvider *)((char *)this + 48), a2);
  if (*((_BYTE *)this + 40))
    WebCore::RTCRtpCapabilities::~RTCRtpCapabilities((WebCore::LibWebRTCProvider *)((char *)this + 8), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::LibWebRTCProvider::~LibWebRTCProvider(this, a2);
  WTF::fastFree(v2, v3);
}

void WebCore::LibWebRTCProvider::setRTCLogging(unsigned int a1)
{
  unint64_t v2;
  int v3;
  char v4;
  char **v5;
  char *v6;

  v2 = atomic_load(&_MergedGlobals_239);
  if (v2 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&_MergedGlobals_239, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::getRTCLogSink(void)::$_0 &&>>);
  }
  if (a1 >= 5)
  {
    __break(0xC471u);
    return;
  }
  v3 = dword_1969F9270[(char)a1];
  if (byte_1ECE840BC)
  {
    if (dword_1ECE840B8 == v3)
      return;
    rtc::LogMessage::RemoveLogToStream();
  }
  dword_1ECE840B8 = v3;
  byte_1ECE840BC = 1;
  rtc::LogMessage::AddLogToStream();
}

__int128 *WebCore::LibWebRTCProvider::getStaticFactoryAndThreads(WebCore::LibWebRTCProvider *this, int a2)
{
  uint64_t v3;
  rtc::Thread *v4;
  uint64_t v5;
  uint64_t v7;

  {
    if ((_QWORD)WebCore::staticFactoryAndThreads(void)::factoryAndThreads)
      return &WebCore::staticFactoryAndThreads(void)::factoryAndThreads;
  }
  else
  {
    xmmword_1EE2F8E28 = 0u;
    *(_OWORD *)&qword_1EE2F8E38 = 0u;
    WebCore::staticFactoryAndThreads(void)::factoryAndThreads = 0u;
  }
  LOBYTE(xmmword_1EE2F8E28) = a2;
  if (a2)
    rtc::Thread::CreateWithSocketServer(this);
  else
    rtc::Thread::Create(this);
  v3 = WebCore::staticFactoryAndThreads(void)::factoryAndThreads;
  *(_QWORD *)&WebCore::staticFactoryAndThreads(void)::factoryAndThreads = v7;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  rtc::Thread::SetName();
  v4 = (rtc::Thread *)rtc::Thread::Start((rtc::Thread *)WebCore::staticFactoryAndThreads(void)::factoryAndThreads);
  rtc::Thread::Create(v4);
  v5 = *((_QWORD *)&WebCore::staticFactoryAndThreads(void)::factoryAndThreads + 1);
  *((_QWORD *)&WebCore::staticFactoryAndThreads(void)::factoryAndThreads + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  rtc::Thread::SetName();
  rtc::Thread::Start(*((rtc::Thread **)&WebCore::staticFactoryAndThreads(void)::factoryAndThreads + 1));
  (*(void (**)(WebCore::LibWebRTCProvider *))(*(_QWORD *)this + 208))(this);
  return &WebCore::staticFactoryAndThreads(void)::factoryAndThreads;
}

double WebCore::LibWebRTCProvider::hasWebRTCThreads(WebCore::LibWebRTCProvider *this)
{
  double result;

  {
    result = 0.0;
    xmmword_1EE2F8E28 = 0u;
    *(_OWORD *)&qword_1EE2F8E38 = 0u;
    WebCore::staticFactoryAndThreads(void)::factoryAndThreads = 0u;
  }
  return result;
}

uint64_t WebCore::LibWebRTCProvider::callOnWebRTCNetworkThread(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  char v5;
  _QWORD v6[2];
  uint64_t (*v7)(char, uint64_t *, uint64_t *);
  uint64_t (*v8)(_QWORD *);

  v1 = WebCore::staticFactoryAndThreads(void)::factoryAndThreads;
  v2 = *a1;
  *a1 = 0;
  v6[0] = v2;
  v7 = absl::internal_any_invocable::LocalManagerNontrivial<WTF::Function<void ()(void)>>;
  v8 = absl::internal_any_invocable::LocalInvoker<false,void,WTF::Function<void ()(void)> &&>;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v1 + 8))(v1, v6, &v5, &v4);
  return v7(1, v6, v6);
}

uint64_t WebCore::LibWebRTCProvider::callOnWebRTCSignalingThread(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  char v5;
  _QWORD v6[2];
  uint64_t (*v7)(char, uint64_t *, uint64_t *);
  uint64_t (*v8)(_QWORD *);

  v1 = *((_QWORD *)&WebCore::staticFactoryAndThreads(void)::factoryAndThreads + 1);
  v2 = *a1;
  *a1 = 0;
  v6[0] = v2;
  v7 = absl::internal_any_invocable::LocalManagerNontrivial<WTF::Function<void ()(void)>>;
  v8 = absl::internal_any_invocable::LocalInvoker<false,void,WTF::Function<void ()(void)> &&>;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v1 + 8))(v1, v6, &v5, &v4);
  return v7(1, v6, v6);
}

double WebCore::LibWebRTCProvider::signalingThread(WebCore::LibWebRTCProvider *this)
{
  double result;

  {
    result = 0.0;
    xmmword_1EE2F8E28 = 0u;
    *(_OWORD *)&qword_1EE2F8E38 = 0u;
    WebCore::staticFactoryAndThreads(void)::factoryAndThreads = 0u;
  }
  return result;
}

void WebCore::LibWebRTCProvider::setLoggingLevel(uint64_t a1, unsigned int a2)
{
  WebCore::LibWebRTCProvider::setRTCLogging(a2);
}

uint64_t WebCore::LibWebRTCProvider::isEnumeratingAllNetworkInterfacesEnabled(WebCore::LibWebRTCProvider *this)
{
  return *((unsigned __int8 *)this + 196);
}

uint64_t WebCore::LibWebRTCProvider::disableEnumeratingAllNetworkInterfaces(uint64_t this)
{
  *(_BYTE *)(this + 196) = 0;
  return this;
}

uint64_t WebCore::LibWebRTCProvider::enableEnumeratingAllNetworkInterfaces(uint64_t this)
{
  *(_BYTE *)(this + 196) = 1;
  return this;
}

uint64_t WebCore::LibWebRTCProvider::enableEnumeratingVisibleNetworkInterfaces(uint64_t this)
{
  *(_BYTE *)(this + 197) = 1;
  return this;
}

uint64_t WebCore::LibWebRTCProvider::disableNonLocalhostConnections(uint64_t this)
{
  *(_BYTE *)(this + 195) = 1;
  return this;
}

void WebCore::LibWebRTCProvider::createSocketFactory(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::LibWebRTCProvider::factory(WebCore::LibWebRTCProvider *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = *((_QWORD *)this + 23);
  if (!result)
  {
    WebCore::LibWebRTCProvider::getStaticFactoryAndThreads(this, *((unsigned __int8 *)this + 192));
    WebCore::LibWebRTCProvider::createPeerConnectionFactory(&v5, this, (rtc::Thread *)WebCore::staticFactoryAndThreads(void)::factoryAndThreads, *((rtc::Thread **)&WebCore::staticFactoryAndThreads(void)::factoryAndThreads + 1));
    v3 = v5;
    v5 = 0;
    v4 = *((_QWORD *)this + 23);
    *((_QWORD *)this + 23) = v3;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
    return *((_QWORD *)this + 23);
  }
  return result;
}

uint64_t WebCore::LibWebRTCProvider::createPeerConnectionFactory(WebCore::LibWebRTCProvider *this, rtc::Thread *a2, rtc::Thread *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t StatusReg;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  webrtc *v13;
  webrtc *BuiltinAudioEncoderFactory;
  webrtc *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  (*(void (**)(WebCore::LibWebRTCProvider *))(*(_QWORD *)this + 216))(this);
  v4 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v4 = &unk_1E3419D48;
  WTF::WorkQueue::create();
  *(_BYTE *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v5 = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(v5 + 8) = 0u;
  *(_OWORD *)(v5 + 24) = 0u;
  v7 = *(unsigned int **)(StatusReg + 736);
  if (!v7)
    v7 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  *(_QWORD *)(v5 + 40) = v7;
  *(_QWORD *)v5 = off_1E31F7378;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v9 = off_1E341A0F8;
  v9[1] = WebCore::LibWebRTCAudioModule::logTimerFired;
  v9[2] = 0;
  v9[3] = v4;
  *(_QWORD *)(v5 + 48) = v9;
  *(_QWORD *)(v4 + 40) = v5;
  *(_DWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_BYTE *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = 0;
  *(_QWORD *)v4 = off_1E341A958;
  *(_DWORD *)(v4 + 80) = 0;
  v10 = (unsigned int *)(v4 + 80);
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldxr(v10);
  while (__stxr(v12 + 1, v10));
  v13 = (webrtc *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = v4;
  if (v13)
    v13 = (webrtc *)(*(uint64_t (**)(webrtc *))(*(_QWORD *)v13 + 8))(v13);
  v24 = v4;
  BuiltinAudioEncoderFactory = (webrtc *)webrtc::CreateBuiltinAudioEncoderFactory(v13);
  webrtc::CreateBuiltinAudioDecoderFactory(BuiltinAudioEncoderFactory);
  (*(void (**)(uint64_t *__return_ptr, WebCore::LibWebRTCProvider *))(*(_QWORD *)this + 200))(&v21, this);
  v15 = (webrtc *)(*(_QWORD *(**)(uint64_t *__return_ptr, WebCore::LibWebRTCProvider *))(*(_QWORD *)this
                                                                                                 + 192))(&v20, this);
  webrtc::CreateTaskQueueGcdFactory(v15);
  webrtc::CreatePeerConnectionFactory();
  if (v19)
    (*(void (**)())(*(_QWORD *)v19 + 8))();
  v16 = v20;
  v20 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = v21;
  v21 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 48))(v17);
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  result = v24;
  if (v24)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  return result;
}

void WebCore::LibWebRTCProvider::clearFactory(WebCore::LibWebRTCProvider *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 23);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 23) = 0;
  if (*((_BYTE *)this + 80))
  {
    WebCore::RTCRtpCapabilities::~RTCRtpCapabilities((WebCore::LibWebRTCProvider *)((char *)this + 48), a2);
    *((_BYTE *)this + 80) = 0;
  }
  if (*((_BYTE *)this + 160))
  {
    WebCore::RTCRtpCapabilities::~RTCRtpCapabilities((WebCore::LibWebRTCProvider *)((char *)this + 128), a2);
    *((_BYTE *)this + 160) = 0;
  }
}

void WebCore::LibWebRTCProvider::createDecoderFactory(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::LibWebRTCProvider::createEncoderFactory(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::LibWebRTCProvider::setPeerConnectionFactory(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;

  WebCore::LibWebRTCProvider::getStaticFactoryAndThreads((WebCore::LibWebRTCProvider *)a1, *(unsigned __int8 *)(a1 + 192));
  v4 = *((_QWORD *)&WebCore::staticFactoryAndThreads(void)::factoryAndThreads + 1);
  v5 = *a2;
  *a2 = 0;
  result = operator new();
  *(_QWORD *)(result + 16) = v4;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)result = off_1E341AB80;
  *(_QWORD *)(result + 8) = v4;
  *(_DWORD *)(result + 32) = 0;
  v7 = (unsigned int *)(result + 32);
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  v9 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = result;
  if (v9)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return result;
}

uint64_t *WebCore::LibWebRTCProvider::createPeerConnection@<X0>(unsigned __int8 *a1@<X0>, webrtc::PeerConnectionObserver *a2@<X2>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  rtc::Thread *v12;
  uint64_t v13;
  uint64_t *result;
  uint64_t *v15;

  WebCore::LibWebRTCProvider::getStaticFactoryAndThreads((WebCore::LibWebRTCProvider *)a1, a1[192]);
  if (!*((_QWORD *)&xmmword_1EE2F8E28 + 1))
  {
    v8 = rtc::Thread::socketserver((rtc::Thread *)WebCore::staticFactoryAndThreads(void)::factoryAndThreads);
    v9 = operator new();
    MEMORY[0x19AEA5910](v9, 0, v8, 0);
    v10 = *((_QWORD *)&xmmword_1EE2F8E28 + 1);
    *((_QWORD *)&xmmword_1EE2F8E28 + 1) = v9;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = qword_1EE2F8E38;
  if (!qword_1EE2F8E38)
  {
    v12 = (rtc::Thread *)WebCore::staticFactoryAndThreads(void)::factoryAndThreads;
    v11 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v11 = off_1E341A8F0;
    *(_BYTE *)(v11 + 8) = 0;
    rtc::Thread::socketserver(v12);
    operator new();
    *(_QWORD *)(v11 + 16) = rtc::BasicPacketSocketFactory::BasicPacketSocketFactory();
    v13 = qword_1EE2F8E38;
    qword_1EE2F8E38 = v11;
    if (v13)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      v11 = qword_1EE2F8E38;
    }
  }
  *(_BYTE *)(v11 + 8) = a1[195];
  v15 = 0;
  WebCore::LibWebRTCProvider::createPeerConnection((uint64_t)a1, a2, *((uint64_t *)&xmmword_1EE2F8E28 + 1), v11, a3, &v15, a4);
  result = v15;
  if (v15)
    return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v15 + 8))(v15);
  return result;
}

void WebCore::LibWebRTCProvider::createPeerConnection(uint64_t a1@<X0>, webrtc::PeerConnectionObserver *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t **a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[64];
  void *v25[3];
  char v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;

  WebCore::LibWebRTCProvider::getStaticFactoryAndThreads((WebCore::LibWebRTCProvider *)a1, *(unsigned __int8 *)(a1 + 192));
  v32 = 0;
  v29 = a3;
  v30 = a4;
  v31 = &v32;
  (*(void (**)(_QWORD, uint64_t *, uint64_t (*)(uint64_t *), void **))(**((_QWORD **)&WebCore::staticFactoryAndThreads(void)::factoryAndThreads
                                                                                           + 1)
                                                                                        + 96))(*((_QWORD *)&WebCore::staticFactoryAndThreads(void)::factoryAndThreads + 1), &v29, rtc::FunctionView<void ()(void)>::CallVoidPtr<WebCore::LibWebRTCProvider::createPeerConnection(webrtc::PeerConnectionObserver &,rtc::NetworkManager &,rtc::PacketSocketFactory &,webrtc::PeerConnectionInterface::RTCConfiguration &&,std::unique_ptr<webrtc::AsyncDnsResolverFactoryInterface,webrtc::PeerConnectionInterface::RTCConfiguration &&::default_delete<std::unique_ptr>> &&)::$_0>, v25);
  if (*(_QWORD *)(a1 + 184))
    goto LABEL_7;
  WebCore::LibWebRTCProvider::getStaticFactoryAndThreads((WebCore::LibWebRTCProvider *)a1, *(unsigned __int8 *)(a1 + 192));
  WebCore::LibWebRTCProvider::createPeerConnectionFactory(&v29, (WebCore::LibWebRTCProvider *)a1, (rtc::Thread *)WebCore::staticFactoryAndThreads(void)::factoryAndThreads, *((rtc::Thread **)&WebCore::staticFactoryAndThreads(void)::factoryAndThreads + 1));
  v14 = v29;
  v29 = 0;
  v15 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v14;
  if (v15)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v14 = *(_QWORD *)(a1 + 184);
  }
  if (v14)
  {
LABEL_7:
    webrtc::PeerConnectionDependencies::PeerConnectionDependencies((webrtc::PeerConnectionDependencies *)&v29, a2);
    v16 = v32;
    v32 = 0;
    v17 = v30;
    v30 = v16;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = *a6;
    *a6 = 0;
    v19 = v31;
    v31 = v18;
    if (v19)
      (*(void (**)(uint64_t *))(*v19 + 8))(v19);
    v20 = *(_QWORD *)(a1 + 184);
    webrtc::PeerConnectionDependencies::PeerConnectionDependencies();
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v20 + 40))(v25, v20, a5, v24);
    webrtc::PeerConnectionDependencies::~PeerConnectionDependencies((webrtc::PeerConnectionDependencies *)v24);
    v21 = v28;
    if (LODWORD(v25[0]))
    {
      *a7 = 0;
      if (v21 && v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    }
    else
    {
      if (!v28)
      {
        __break(1u);
        return;
      }
      v22 = v27;
      v27 = 0;
      *a7 = v22;
    }
    if (v26 < 0)
      operator delete(v25[1]);
    webrtc::PeerConnectionDependencies::~PeerConnectionDependencies((webrtc::PeerConnectionDependencies *)&v29);
  }
  else
  {
    *a7 = 0;
  }
  v23 = v32;
  v32 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
}

void WebCore::LibWebRTCProvider::setEnableWebRTCEncryption(WebCore::LibWebRTCProvider *this, char a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[12];
  _BYTE v7[12];

  if (*((_QWORD *)this + 23))
    goto LABEL_7;
  WebCore::LibWebRTCProvider::getStaticFactoryAndThreads(this, *((unsigned __int8 *)this + 192));
  WebCore::LibWebRTCProvider::createPeerConnectionFactory((uint64_t *)v6, this, (rtc::Thread *)WebCore::staticFactoryAndThreads(void)::factoryAndThreads, *((rtc::Thread **)&WebCore::staticFactoryAndThreads(void)::factoryAndThreads + 1));
  v4 = *(_QWORD *)v6;
  *(_QWORD *)v6 = 0;
  v5 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = v4;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    if (*(_QWORD *)v6)
      (*(void (**)(_QWORD))(**(_QWORD **)v6 + 8))(*(_QWORD *)v6);
    v4 = *((_QWORD *)this + 23);
  }
  if (v4)
  {
LABEL_7:
    *(_WORD *)v6 = 0;
    *(_QWORD *)&v6[4] = 0x200000010;
    webrtc::CryptoOptions::CryptoOptions((webrtc::CryptoOptions *)v7);
    v6[0] = a2 ^ 1;
    (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 23) + 32))(*((_QWORD *)this + 23), v6);
    webrtc::CryptoOptions::~CryptoOptions((webrtc::CryptoOptions *)v7);
  }
}

uint64_t WebCore::LibWebRTCProvider::prepareCertificateGenerator(unsigned __int8 *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char v8;
  char v9;
  _QWORD v10[2];
  uint64_t (*v11)(char, uint64_t *, uint64_t *);
  uint64_t (*v12)(_QWORD *);

  WebCore::LibWebRTCProvider::getStaticFactoryAndThreads((WebCore::LibWebRTCProvider *)a1, a1[192]);
  v3 = qword_1EE2F8E40;
  if (!qword_1EE2F8E40)
  {
    v3 = operator new();
    rtc::RTCCertificateGenerator::RTCCertificateGenerator();
    v4 = qword_1EE2F8E40;
    qword_1EE2F8E40 = v3;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      v3 = qword_1EE2F8E40;
    }
  }
  v5 = *a2;
  *a2 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = &off_1E341ACB8;
  v6[1] = v3;
  v6[2] = v5;
  v10[0] = v6;
  v11 = absl::internal_any_invocable::LocalManagerNontrivial<WTF::Function<void ()(void)>>;
  v12 = absl::internal_any_invocable::LocalInvoker<false,void,WTF::Function<void ()(void)> &&>;
  (*(void (**)(_QWORD, _QWORD *, char *, char *))(**((_QWORD **)&WebCore::staticFactoryAndThreads(void)::factoryAndThreads
                                                              + 1)
                                                           + 8))(*((_QWORD *)&WebCore::staticFactoryAndThreads(void)::factoryAndThreads + 1), v10, &v9, &v8);
  return v11(1, v10, v10);
}

uint64_t WebCore::LibWebRTCProvider::receiverCapabilities@<X0>(WebCore::LibWebRTCProvider *this@<X0>, const WTF::String *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;
  int v7;
  uint64_t *v8;
  int v9;

  if ((MEMORY[0x19AEA53F4](*(_QWORD *)a2, "audio", 5) & 1) != 0)
  {
    if (*((_BYTE *)this + 40))
    {
      *a3 = 0;
      a3[32] = 0;
    }
    else
    {
      result = (*(uint64_t (**)(WebCore::LibWebRTCProvider *))(*(_QWORD *)this + 96))(this);
      v7 = *((unsigned __int8 *)this + 40);
      *a3 = 0;
      a3[32] = 0;
      if (!v7)
        return result;
    }
    v8 = (uint64_t *)((char *)this + 8);
  }
  else
  {
    result = MEMORY[0x19AEA53F4](*(_QWORD *)a2, "video", 5);
    if ((result & 1) == 0)
    {
      *a3 = 0;
      a3[32] = 0;
      return result;
    }
    if (*((_BYTE *)this + 80))
    {
      *a3 = 0;
      a3[32] = 0;
    }
    else
    {
      result = (*(uint64_t (**)(WebCore::LibWebRTCProvider *))(*(_QWORD *)this + 104))(this);
      v9 = *((unsigned __int8 *)this + 80);
      *a3 = 0;
      a3[32] = 0;
      if (!v9)
        return result;
    }
    v8 = (uint64_t *)((char *)this + 48);
  }
  result = std::construct_at[abi:sn180100]<WebCore::RTCRtpCapabilities,WebCore::RTCRtpCapabilities const&,WebCore::RTCRtpCapabilities*>((uint64_t)a3, v8);
  a3[32] = 1;
  return result;
}

uint64_t WebCore::LibWebRTCProvider::initializeAudioDecodingCapabilities(WebCore::LibWebRTCProvider *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9[9];
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  result = *((_QWORD *)this + 23);
  if (result)
    goto LABEL_7;
  WebCore::LibWebRTCProvider::getStaticFactoryAndThreads(this, *((unsigned __int8 *)this + 192));
  WebCore::LibWebRTCProvider::createPeerConnectionFactory(v9, this, (rtc::Thread *)WebCore::staticFactoryAndThreads(void)::factoryAndThreads, *((rtc::Thread **)&WebCore::staticFactoryAndThreads(void)::factoryAndThreads + 1));
  result = v9[0];
  v9[0] = 0;
  v3 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = result;
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    if (v9[0])
      (*(void (**)(uint64_t))(*(_QWORD *)v9[0] + 8))(v9[0]);
    result = *((_QWORD *)this + 23);
  }
  if (result)
  {
LABEL_7:
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)result + 72))(v9, result, 0);
    WebCore::toRTCRtpCapabilities(&v10, (const webrtc::RtpCapabilities *)v9);
    if (*((_BYTE *)this + 40))
    {
      WebCore::RTCRtpCapabilities::operator=((uint64_t)this + 8, (WTF::StringImpl *)&v10);
    }
    else
    {
      v5 = v10;
      *(_QWORD *)&v10 = 0;
      *((_QWORD *)this + 1) = v5;
      v6 = *((_QWORD *)&v10 + 1);
      *((_QWORD *)&v10 + 1) = 0;
      *((_QWORD *)this + 2) = v6;
      v7 = v11;
      v11 = 0;
      *((_QWORD *)this + 3) = v7;
      v8 = v12;
      v12 = 0;
      *((_QWORD *)this + 4) = v8;
      *((_BYTE *)this + 40) = 1;
    }
    WebCore::RTCRtpCapabilities::~RTCRtpCapabilities((WebCore::RTCRtpCapabilities *)&v10, v4);
    return MEMORY[0x19AEA5BBC](v9);
  }
  return result;
}

_OWORD *WebCore::toRTCRtpCapabilities(_OWORD *this, const webrtc::RtpCapabilities *a2)
{
  const webrtc::RtpCapabilities *v2;
  uint64_t v3;
  uint64_t v4;
  int8x16_t v5;
  _OWORD *v6;
  const webrtc::RtpCapabilities *v7;
  uint64_t v8;
  unsigned int v9;
  int8x16_t v10;
  _QWORD *v11;
  char v12;
  int v13;
  int8x16_t *v14;
  size_t v15;
  int v16;
  size_t v17;
  int8x16_t *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  const char *v24;
  __int16 v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __int16 v29;
  _BYTE *v30;
  _BYTE *v31;
  _BYTE *v32;
  _QWORD *v33;
  _QWORD *v34;
  BOOL v35;
  char *v36;
  char *v37;
  char *v38;
  __int16 v39;
  char *v40;
  int8x16_t v41;
  int8x16_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  int8x16_t v47;
  int8x16_t v48;
  char *v49;
  char *v50;
  char *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  int v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  _OWORD *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unint64_t v69;
  const webrtc::RtpCapabilities *v70;
  _OWORD *v71;
  uint64_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  WTF::StringImpl *v77;
  _BYTE v78[12];
  std::string __p;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  int v82;
  char v83;
  int8x16x2_t v84;
  int8x16x2_t v85;
  int8x16x2_t v86;
  int8x16x2_t v87;
  int8x16x2_t v88;
  int8x16x2_t v89;
  int8x16x2_t v90;

  v2 = a2;
  v3 = (uint64_t)this;
  *this = 0u;
  this[1] = 0u;
  v4 = *((_QWORD *)a2 + 1) - *(_QWORD *)a2;
  if (v4)
  {
    if ((0xCCCCCCCCCCCCCCCDLL * (v4 >> 5)) >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x1962B689CLL);
    }
    v69 = 0xCCCCCCCCCCCCCCCDLL * (v4 >> 5);
    this = (_OWORD *)WTF::fastMalloc((WTF *)(0x99999999999999A0 * (v4 >> 5)));
    v6 = this;
    v7 = v2;
    v8 = *(_QWORD *)v2;
    v70 = v7;
    v72 = *((_QWORD *)v7 + 1);
    if (v8 == v72)
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      v71 = this;
      v10 = 0uLL;
      do
      {
        v80 = 0;
        v81 = 0;
        v82 = 0;
        v83 = 1;
        v11 = *(_QWORD **)(v8 + 80);
        if (v11 == (_QWORD *)(v8 + 88))
        {
          v74 = v5;
          v76 = v10;
          v52 = 0;
        }
        else
        {
          v12 = 0;
          do
          {
            v13 = *((char *)v11 + 55);
            if (v13 >= 0)
              v14 = (int8x16_t *)(v11 + 4);
            else
              v14 = (int8x16_t *)v11[4];
            if (v13 >= 0)
              v15 = *((unsigned __int8 *)v11 + 55);
            else
              v15 = v11[5];
            v16 = *((char *)v11 + 79);
            if (v16 >= 0)
              v17 = *((unsigned __int8 *)v11 + 79);
            else
              v17 = v11[8];
            if (v15 >> 31)
              goto LABEL_104;
            if (v16 >= 0)
              v18 = (int8x16_t *)(v11 + 7);
            else
              v18 = (int8x16_t *)v11[7];
            if (v17 >> 31)
            {
              __break(0xC471u);
              JUMPOUT(0x1962B6874);
            }
            v19 = v12 & 1;
            v20 = v81;
            v73 = v5;
            v75 = v10;
            if ((v81 || (v20 = v80) != 0) && (*((_BYTE *)v20 + 16) & 4) == 0)
            {
              v21 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v80);
              v5 = v73;
              v10 = v75;
              if (v21)
              {
                if (v19)
                {
                  v22 = 2 * v19;
                  v23 = (_WORD *)v21;
                  v24 = ";";
                  do
                  {
                    v25 = *(unsigned __int8 *)v24++;
                    *v23++ = v25;
                    v22 -= 2;
                  }
                  while (v22);
                }
                v26 = v21 + 2 * v19;
                if ((v15 & 0xFFFFFFC0) != 0)
                {
                  v27 = (char *)(v26 + 2 * (v15 & 0xFFFFFFC0));
                  v40 = (char *)(v21 + 2 * v19);
                  do
                  {
                    v84.val[0] = *v14;
                    v41 = v14[1];
                    v86.val[0] = v14[2];
                    v42 = v14[3];
                    v14 += 4;
                    v5 = v42;
                    v86.val[1] = v75;
                    v88.val[0] = v41;
                    v84.val[1] = v75;
                    v43 = v40;
                    vst2q_s8(v43, v84);
                    v43 += 32;
                    v88.val[1] = v75;
                    vst2q_s8(v43, v88);
                    v44 = v40 + 64;
                    vst2q_s8(v44, v86);
                    v45 = v40 + 96;
                    vst2q_s8(v45, *(int8x16x2_t *)v5.i8);
                    v40 += 128;
                  }
                  while (v40 != v27);
                }
                else
                {
                  v27 = (char *)(v21 + 2 * v19);
                }
                v28 = (char *)(v26 + 2 * v15);
                while (v27 != v28)
                {
                  v29 = v14->u8[0];
                  v14 = (int8x16_t *)((char *)v14 + 1);
                  *(_WORD *)v27 = v29;
                  v27 += 2;
                }
                *(_WORD *)v28 = 61;
                v36 = v28 + 2;
                if ((v17 & 0xFFFFFFC0) != 0)
                {
                  v37 = &v36[2 * (v17 & 0xFFFFFFC0)];
                  v46 = v36;
                  do
                  {
                    v85.val[0] = *v18;
                    v47 = v18[1];
                    v87.val[0] = v18[2];
                    v48 = v18[3];
                    v18 += 4;
                    v89.val[0] = v48;
                    v87.val[1] = v75;
                    v90.val[0] = v47;
                    v85.val[1] = v75;
                    v49 = v46;
                    vst2q_s8(v49, v85);
                    v49 += 32;
                    v89.val[1] = v75;
                    v90.val[1] = v75;
                    vst2q_s8(v49, v90);
                    v50 = v46 + 64;
                    vst2q_s8(v50, v87);
                    v51 = v46 + 96;
                    v46 += 128;
                    vst2q_s8(v51, v89);
                  }
                  while (v46 != v37);
                }
                else
                {
                  v37 = v36;
                }
                v38 = &v36[2 * v17];
                while (v37 != v38)
                {
                  v39 = v18->u8[0];
                  v18 = (int8x16_t *)((char *)v18 + 1);
                  *(_WORD *)v37 = v39;
                  v37 += 2;
                }
              }
            }
            else
            {
              v30 = (_BYTE *)MEMORY[0x19AEA4824](&v80);
              v5 = v73;
              v10 = v75;
              if (v30)
              {
                if (v19)
                  *v30 = 59;
                v31 = &v30[v19];
                if ((_DWORD)v15)
                {
                  if ((_DWORD)v15 == 1)
                  {
                    *v31 = v14->i8[0];
                  }
                  else
                  {
                    memcpy(v31, v14, v15);
                    v5 = v73;
                    v10 = v75;
                  }
                }
                v31[v15] = 61;
                v32 = &v31[v15 + 1];
                if ((_DWORD)v17)
                {
                  if ((_DWORD)v17 == 1)
                  {
                    *v32 = v18->i8[0];
                  }
                  else
                  {
                    memcpy(v32, v18, v17);
                    v5 = v73;
                    v10 = v75;
                  }
                }
              }
            }
            v33 = (_QWORD *)v11[1];
            if (v33)
            {
              do
              {
                v34 = v33;
                v33 = (_QWORD *)*v33;
              }
              while (v33);
            }
            else
            {
              do
              {
                v34 = (_QWORD *)v11[2];
                v35 = *v34 == (_QWORD)v11;
                v11 = v34;
              }
              while (!v35);
            }
            v12 = 1;
            v11 = v34;
          }
          while (v34 != (_QWORD *)(v8 + 88));
          if (v82 < 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1962B6894);
          }
          if (v82)
          {
            v74 = v5;
            v76 = v10;
            v52 = v80;
            v6 = v71;
            if (v80
              || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v80),
                  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v80),
                  (v52 = v80) != 0))
            {
              *(_DWORD *)v52 += 2;
            }
          }
          else
          {
            v74 = v5;
            v76 = v10;
            v52 = 0;
            v6 = v71;
          }
        }
        webrtc::RtpCodec::mime_type((webrtc::RtpCodec *)v8, &__p);
        WTF::String::fromUTF8();
        if (*(_BYTE *)(v8 + 40))
          v54 = *(unsigned int *)(v8 + 36);
        else
          v54 = 0;
        *(_QWORD *)v78 = v54;
        if ((*(_QWORD *)(v8 + 44) & 0xFF00000000) != 0)
          v55 = (unsigned __int16)*(_QWORD *)(v8 + 44) | 0x10000;
        else
          v55 = 0;
        *(_DWORD *)&v78[8] = v55;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v56 = v81;
        v81 = 0;
        v5 = v74;
        v10 = v76;
        if (v56)
        {
          if (*(_DWORD *)v56 == 2)
          {
            WTF::StringImpl::destroy(v56, v53);
            v5 = v74;
            v10 = v76;
          }
          else
          {
            *(_DWORD *)v56 -= 2;
          }
        }
        v57 = v80;
        v80 = 0;
        if (v57)
        {
          if (*(_DWORD *)v57 == 2)
          {
            WTF::StringImpl::destroy(v57, v53);
            v5 = v74;
            v10 = v76;
          }
          else
          {
            *(_DWORD *)v57 -= 2;
          }
        }
        v58 = &v6[2 * v9];
        *(_QWORD *)v58 = v77;
        *(_DWORD *)((char *)v58 + 15) = *(_DWORD *)&v78[7];
        *((_QWORD *)v58 + 1) = *(_QWORD *)v78;
        *((_QWORD *)v58 + 3) = v52;
        this = 0;
        v77 = 0;
        ++v9;
        v8 += 160;
      }
      while (v8 != v72);
    }
    v59 = v69;
    v2 = v70;
  }
  else
  {
    v9 = 0;
    v59 = 0;
    v6 = 0;
  }
  v60 = *((_QWORD *)v2 + 3);
  v61 = *((_QWORD *)v2 + 4);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 8) = v59;
  *(_DWORD *)(v3 + 12) = v9;
  v62 = v61 - v60;
  if (v62)
  {
    v63 = 0xCCCCCCCCCCCCCCCDLL * (v62 >> 3);
    if (v63 >> 29)
    {
LABEL_104:
      __break(0xC471u);
      JUMPOUT(0x1962B6854);
    }
    v64 = v3;
    this = (_OWORD *)WTF::fastMalloc((WTF *)(0x6666666666666668 * (v62 >> 3)));
    v65 = this;
    v66 = *((_QWORD *)v2 + 3);
    v67 = *((_QWORD *)v2 + 4);
    if (v66 == v67)
    {
      LODWORD(v62) = 0;
    }
    else
    {
      LODWORD(v62) = 0;
      do
      {
        v68 = v62;
        this = (_OWORD *)WTF::String::fromUTF8();
        LODWORD(v62) = v68 + 1;
        *((_QWORD *)v65 + v68) = v77;
        v66 += 40;
      }
      while (v66 != v67);
    }
    v3 = v64;
  }
  else
  {
    v65 = 0;
    LODWORD(v63) = 0;
  }
  *(_QWORD *)(v3 + 16) = v65;
  *(_DWORD *)(v3 + 24) = v63;
  *(_DWORD *)(v3 + 28) = v62;
  return this;
}

uint64_t WebCore::LibWebRTCProvider::initializeVideoDecodingCapabilities(WebCore::LibWebRTCProvider *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9[9];
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  result = *((_QWORD *)this + 23);
  if (result)
    goto LABEL_7;
  WebCore::LibWebRTCProvider::getStaticFactoryAndThreads(this, *((unsigned __int8 *)this + 192));
  WebCore::LibWebRTCProvider::createPeerConnectionFactory(v9, this, (rtc::Thread *)WebCore::staticFactoryAndThreads(void)::factoryAndThreads, *((rtc::Thread **)&WebCore::staticFactoryAndThreads(void)::factoryAndThreads + 1));
  result = v9[0];
  v9[0] = 0;
  v3 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = result;
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    if (v9[0])
      (*(void (**)(uint64_t))(*(_QWORD *)v9[0] + 8))(v9[0]);
    result = *((_QWORD *)this + 23);
  }
  if (result)
  {
LABEL_7:
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)result + 72))(v9, result, 1);
    WebCore::toRTCRtpCapabilities(&v10, (const webrtc::RtpCapabilities *)v9);
    if (*((_BYTE *)this + 80))
    {
      WebCore::RTCRtpCapabilities::operator=((uint64_t)this + 48, (WTF::StringImpl *)&v10);
    }
    else
    {
      v5 = v10;
      *(_QWORD *)&v10 = 0;
      *((_QWORD *)this + 6) = v5;
      v6 = *((_QWORD *)&v10 + 1);
      *((_QWORD *)&v10 + 1) = 0;
      *((_QWORD *)this + 7) = v6;
      v7 = v11;
      v11 = 0;
      *((_QWORD *)this + 8) = v7;
      v8 = v12;
      v12 = 0;
      *((_QWORD *)this + 9) = v8;
      *((_BYTE *)this + 80) = 1;
    }
    WebCore::RTCRtpCapabilities::~RTCRtpCapabilities((WebCore::RTCRtpCapabilities *)&v10, v4);
    return MEMORY[0x19AEA5BBC](v9);
  }
  return result;
}

uint64_t WebCore::LibWebRTCProvider::senderCapabilities@<X0>(WebCore::LibWebRTCProvider *this@<X0>, const WTF::String *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;
  int v7;
  uint64_t *v8;
  int v9;

  if ((MEMORY[0x19AEA53F4](*(_QWORD *)a2, "audio", 5) & 1) != 0)
  {
    if (*((_BYTE *)this + 120))
    {
      *a3 = 0;
      a3[32] = 0;
    }
    else
    {
      result = (*(uint64_t (**)(WebCore::LibWebRTCProvider *))(*(_QWORD *)this + 112))(this);
      v7 = *((unsigned __int8 *)this + 120);
      *a3 = 0;
      a3[32] = 0;
      if (!v7)
        return result;
    }
    v8 = (uint64_t *)((char *)this + 88);
  }
  else
  {
    result = MEMORY[0x19AEA53F4](*(_QWORD *)a2, "video", 5);
    if ((result & 1) == 0)
    {
      *a3 = 0;
      a3[32] = 0;
      return result;
    }
    if (*((_BYTE *)this + 160))
    {
      *a3 = 0;
      a3[32] = 0;
    }
    else
    {
      result = (*(uint64_t (**)(WebCore::LibWebRTCProvider *))(*(_QWORD *)this + 120))(this);
      v9 = *((unsigned __int8 *)this + 160);
      *a3 = 0;
      a3[32] = 0;
      if (!v9)
        return result;
    }
    v8 = (uint64_t *)((char *)this + 128);
  }
  result = std::construct_at[abi:sn180100]<WebCore::RTCRtpCapabilities,WebCore::RTCRtpCapabilities const&,WebCore::RTCRtpCapabilities*>((uint64_t)a3, v8);
  a3[32] = 1;
  return result;
}

uint64_t WebCore::LibWebRTCProvider::initializeAudioEncodingCapabilities(WebCore::LibWebRTCProvider *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9[9];
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  result = *((_QWORD *)this + 23);
  if (result)
    goto LABEL_7;
  WebCore::LibWebRTCProvider::getStaticFactoryAndThreads(this, *((unsigned __int8 *)this + 192));
  WebCore::LibWebRTCProvider::createPeerConnectionFactory(v9, this, (rtc::Thread *)WebCore::staticFactoryAndThreads(void)::factoryAndThreads, *((rtc::Thread **)&WebCore::staticFactoryAndThreads(void)::factoryAndThreads + 1));
  result = v9[0];
  v9[0] = 0;
  v3 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = result;
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    if (v9[0])
      (*(void (**)(uint64_t))(*(_QWORD *)v9[0] + 8))(v9[0]);
    result = *((_QWORD *)this + 23);
  }
  if (result)
  {
LABEL_7:
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)result + 64))(v9, result, 0);
    WebCore::toRTCRtpCapabilities(&v10, (const webrtc::RtpCapabilities *)v9);
    if (*((_BYTE *)this + 120))
    {
      WebCore::RTCRtpCapabilities::operator=((uint64_t)this + 88, (WTF::StringImpl *)&v10);
    }
    else
    {
      v5 = v10;
      *(_QWORD *)&v10 = 0;
      *((_QWORD *)this + 11) = v5;
      v6 = *((_QWORD *)&v10 + 1);
      *((_QWORD *)&v10 + 1) = 0;
      *((_QWORD *)this + 12) = v6;
      v7 = v11;
      v11 = 0;
      *((_QWORD *)this + 13) = v7;
      v8 = v12;
      v12 = 0;
      *((_QWORD *)this + 14) = v8;
      *((_BYTE *)this + 120) = 1;
    }
    WebCore::RTCRtpCapabilities::~RTCRtpCapabilities((WebCore::RTCRtpCapabilities *)&v10, v4);
    return MEMORY[0x19AEA5BBC](v9);
  }
  return result;
}

uint64_t WebCore::LibWebRTCProvider::initializeVideoEncodingCapabilities(WebCore::LibWebRTCProvider *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9[9];
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  result = *((_QWORD *)this + 23);
  if (result)
    goto LABEL_7;
  WebCore::LibWebRTCProvider::getStaticFactoryAndThreads(this, *((unsigned __int8 *)this + 192));
  WebCore::LibWebRTCProvider::createPeerConnectionFactory(v9, this, (rtc::Thread *)WebCore::staticFactoryAndThreads(void)::factoryAndThreads, *((rtc::Thread **)&WebCore::staticFactoryAndThreads(void)::factoryAndThreads + 1));
  result = v9[0];
  v9[0] = 0;
  v3 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = result;
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    if (v9[0])
      (*(void (**)(uint64_t))(*(_QWORD *)v9[0] + 8))(v9[0]);
    result = *((_QWORD *)this + 23);
  }
  if (result)
  {
LABEL_7:
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)result + 64))(v9, result, 1);
    WebCore::toRTCRtpCapabilities(&v10, (const webrtc::RtpCapabilities *)v9);
    if (*((_BYTE *)this + 160))
    {
      WebCore::RTCRtpCapabilities::operator=((uint64_t)this + 128, (WTF::StringImpl *)&v10);
    }
    else
    {
      v5 = v10;
      *(_QWORD *)&v10 = 0;
      *((_QWORD *)this + 16) = v5;
      v6 = *((_QWORD *)&v10 + 1);
      *((_QWORD *)&v10 + 1) = 0;
      *((_QWORD *)this + 17) = v6;
      v7 = v11;
      v11 = 0;
      *((_QWORD *)this + 18) = v7;
      v8 = v12;
      v12 = 0;
      *((_QWORD *)this + 19) = v8;
      *((_BYTE *)this + 160) = 1;
    }
    WebCore::RTCRtpCapabilities::~RTCRtpCapabilities((WebCore::RTCRtpCapabilities *)&v10, v4);
    return MEMORY[0x19AEA5BBC](v9);
  }
  return result;
}

void WebCore::LibWebRTCProvider::videoDecodingCapabilitiesOverride(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, float a6@<S2>)
{
  WTF::StringImpl *v9;
  char v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  char v23;
  _WORD v24[4];
  _BYTE v25[152];
  __int16 v26;

  memset(v24, 0, 3);
  v25[0] = 0;
  v25[40] = 0;
  v25[48] = 0;
  v25[96] = 0;
  v25[104] = 0;
  v25[120] = 0;
  v25[128] = 0;
  v25[144] = 0;
  HIBYTE(v26) = 1;
  v9 = *a2;
  if (*a2)
    *(_DWORD *)v9 += 2;
  v22 = v9;
  v23 = 0;
  WebCore::ContentType::containerType((WebCore::ContentType *)&v22, a4, a5, a6);
  v10 = 1;
  if (v21)
  {
    v13 = *((_DWORD *)v21 + 1);
    if (v13 != 9)
    {
      if (v13 != 10)
      {
LABEL_13:
        v10 = 1;
        goto LABEL_4;
      }
      v16 = *((_QWORD *)v21 + 1);
      if ((*((_BYTE *)v21 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v16 & 0xDF) != 0x56)
          goto LABEL_13;
        if ((*(_BYTE *)(v16 + 1) & 0xDF) == 0x49
          && (*(_BYTE *)(v16 + 2) & 0xDF) == 0x44
          && (*(_BYTE *)(v16 + 3) & 0xDF) == 0x45
          && (*(_BYTE *)(v16 + 4) & 0xDF) == 0x4F
          && (*(_BYTE *)(v16 + 5) & 0xDF) == 0xF
          && (*(_BYTE *)(v16 + 6) & 0xDF) == 0x48
          && (*(_BYTE *)(v16 + 7) & 0xDF) == 0x12
          && (*(_BYTE *)(v16 + 8) & 0xDF) == 0x16
          && (*(_BYTE *)(v16 + 9) & 0xDF) == 0x14)
        {
LABEL_40:
          HIBYTE(v24[0]) = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)a1 + 88))(a1, a2);
          LOBYTE(v24[1]) = HIBYTE(v24[0]);
          goto LABEL_13;
        }
        if ((*(_BYTE *)(v16 + 1) & 0xDF) != 0x49
          || (*(_BYTE *)(v16 + 2) & 0xDF) != 0x44
          || (*(_BYTE *)(v16 + 3) & 0xDF) != 0x45
          || (*(_BYTE *)(v16 + 4) & 0xDF) != 0x4F
          || (*(_BYTE *)(v16 + 5) & 0xDF) != 0xF
          || (*(_BYTE *)(v16 + 6) & 0xDF) != 0x48
          || (*(_BYTE *)(v16 + 7) & 0xDF) != 0x12
          || (*(_BYTE *)(v16 + 8) & 0xDF) != 0x16)
        {
          goto LABEL_13;
        }
        v17 = *(unsigned __int8 *)(v16 + 9);
      }
      else
      {
        if ((*(_WORD *)v16 & 0xFFDF) != 0x56)
          goto LABEL_13;
        if ((*(_WORD *)(v16 + 2) & 0xFFDF) == 0x49
          && (*(_WORD *)(v16 + 4) & 0xFFDF) == 0x44
          && (*(_WORD *)(v16 + 6) & 0xFFDF) == 0x45
          && (*(_WORD *)(v16 + 8) & 0xFFDF) == 0x4F
          && (*(_WORD *)(v16 + 10) & 0xFFDF) == 0xF
          && (*(_WORD *)(v16 + 12) & 0xFFDF) == 0x48
          && (*(_WORD *)(v16 + 14) & 0xFFDF) == 0x12
          && (*(_WORD *)(v16 + 16) & 0xFFDF) == 0x16
          && (*(_WORD *)(v16 + 18) & 0xFFDF) == 0x14)
        {
          goto LABEL_40;
        }
        if ((*(_WORD *)(v16 + 2) & 0xFFDF) != 0x49
          || (*(_WORD *)(v16 + 4) & 0xFFDF) != 0x44
          || (*(_WORD *)(v16 + 6) & 0xFFDF) != 0x45
          || (*(_WORD *)(v16 + 8) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v16 + 10) & 0xFFDF) != 0xF
          || (*(_WORD *)(v16 + 12) & 0xFFDF) != 0x48
          || (*(_WORD *)(v16 + 14) & 0xFFDF) != 0x12
          || (*(_WORD *)(v16 + 16) & 0xFFDF) != 0x16)
        {
          goto LABEL_13;
        }
        v17 = *(unsigned __int16 *)(v16 + 18);
      }
      if ((v17 & 0xFFFFFFDF) == 0x15)
        *(_WORD *)((char *)v24 + 1) = 257;
      goto LABEL_13;
    }
    v14 = *((_QWORD *)v21 + 1);
    if ((*((_BYTE *)v21 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v14 & 0xDF) != 0x56)
        goto LABEL_13;
      if ((*(_BYTE *)(v14 + 1) & 0xDF) == 0x49
        && (*(_BYTE *)(v14 + 2) & 0xDF) == 0x44
        && (*(_BYTE *)(v14 + 3) & 0xDF) == 0x45
        && (*(_BYTE *)(v14 + 4) & 0xDF) == 0x4F
        && (*(_BYTE *)(v14 + 5) & 0xDF) == 0xF
        && (*(_BYTE *)(v14 + 6) & 0xDF) == 0x56
        && (*(_BYTE *)(v14 + 7) & 0xDF) == 0x50
        && (*(_BYTE *)(v14 + 8) & 0xDF) == 0x18)
      {
        goto LABEL_26;
      }
      if ((*(_BYTE *)(v14 + 1) & 0xDF) == 0x49
        && (*(_BYTE *)(v14 + 2) & 0xDF) == 0x44
        && (*(_BYTE *)(v14 + 3) & 0xDF) == 0x45
        && (*(_BYTE *)(v14 + 4) & 0xDF) == 0x4F
        && (*(_BYTE *)(v14 + 5) & 0xDF) == 0xF
        && (*(_BYTE *)(v14 + 6) & 0xDF) == 0x56
        && (*(_BYTE *)(v14 + 7) & 0xDF) == 0x50
        && (*(_BYTE *)(v14 + 8) & 0xDF) == 0x19)
      {
        goto LABEL_60;
      }
      if ((*(_BYTE *)(v14 + 1) & 0xDF) != 0x49
        || (*(_BYTE *)(v14 + 2) & 0xDF) != 0x44
        || (*(_BYTE *)(v14 + 3) & 0xDF) != 0x45
        || (*(_BYTE *)(v14 + 4) & 0xDF) != 0x4F
        || (*(_BYTE *)(v14 + 5) & 0xDF) != 0xF
        || (*(_BYTE *)(v14 + 6) & 0xDF) != 0x41
        || (*(_BYTE *)(v14 + 7) & 0xDF) != 0x56)
      {
        goto LABEL_13;
      }
      v19 = *(unsigned __int8 *)(v14 + 8);
    }
    else
    {
      if ((*(_WORD *)v14 & 0xFFDF) != 0x56)
        goto LABEL_13;
      if ((*(_WORD *)(v14 + 2) & 0xFFDF) == 0x49
        && (*(_WORD *)(v14 + 4) & 0xFFDF) == 0x44
        && (*(_WORD *)(v14 + 6) & 0xFFDF) == 0x45
        && (*(_WORD *)(v14 + 8) & 0xFFDF) == 0x4F
        && (*(_WORD *)(v14 + 10) & 0xFFDF) == 0xF
        && (*(_WORD *)(v14 + 12) & 0xFFDF) == 0x56
        && (*(_WORD *)(v14 + 14) & 0xFFDF) == 0x50
        && (*(_WORD *)(v14 + 16) & 0xFFDF) == 0x18)
      {
LABEL_26:
        LOBYTE(v24[1]) = 0;
        goto LABEL_27;
      }
      if ((*(_WORD *)(v14 + 2) & 0xFFDF) == 0x49
        && (*(_WORD *)(v14 + 4) & 0xFFDF) == 0x44
        && (*(_WORD *)(v14 + 6) & 0xFFDF) == 0x45
        && (*(_WORD *)(v14 + 8) & 0xFFDF) == 0x4F
        && (*(_WORD *)(v14 + 10) & 0xFFDF) == 0xF
        && (*(_WORD *)(v14 + 12) & 0xFFDF) == 0x56
        && (*(_WORD *)(v14 + 14) & 0xFFDF) == 0x50
        && (*(_WORD *)(v14 + 16) & 0xFFDF) == 0x19)
      {
LABEL_60:
        v18 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)a1 + 64))(a1, a2);
        if (HIBYTE(v18))
        {
          v20 = v18;
          if (!(_BYTE)v18 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1) & 1) != 0)
          {
            v10 = 0;
            goto LABEL_4;
          }
          LOBYTE(v24[1]) = (v20 & 0xFF0000) != 0;
          v15 = (v20 & 0xFF00) != 0;
          goto LABEL_28;
        }
        LOBYTE(v24[1]) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
LABEL_27:
        v15 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)a1 + 72))(a1, a2);
LABEL_28:
        HIBYTE(v24[0]) = v15;
        goto LABEL_13;
      }
      if ((*(_WORD *)(v14 + 2) & 0xFFDF) != 0x49
        || (*(_WORD *)(v14 + 4) & 0xFFDF) != 0x44
        || (*(_WORD *)(v14 + 6) & 0xFFDF) != 0x45
        || (*(_WORD *)(v14 + 8) & 0xFFDF) != 0x4F
        || (*(_WORD *)(v14 + 10) & 0xFFDF) != 0xF
        || (*(_WORD *)(v14 + 12) & 0xFFDF) != 0x41
        || (*(_WORD *)(v14 + 14) & 0xFFDF) != 0x56)
      {
        goto LABEL_13;
      }
      v19 = *(unsigned __int16 *)(v14 + 16);
    }
    if ((v19 & 0xFFFFFFDF) == 0x11)
      LOBYTE(v24[1]) = 0;
    goto LABEL_13;
  }
LABEL_4:
  LOBYTE(v24[0]) = v10;
  *(_BYTE *)(a3 + 2) = v24[1];
  *(_WORD *)a3 = v24[0];
  WebCore::MediaConfiguration::MediaConfiguration(a3 + 8, (uint64_t)v25);
  *(_WORD *)(a3 + 160) = v26;
  *(_BYTE *)(a3 + 168) = 1;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v11);
    else
      *(_DWORD *)v21 -= 2;
  }
  v12 = v22;
  v22 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)v25, v11);
}

void WebCore::LibWebRTCProvider::videoEncodingCapabilitiesOverride(_QWORD *a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, float a6@<S2>)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  char v21;
  _BYTE v22[3];
  _BYTE v23[160];

  *(_WORD *)&v22[1] = 0;
  v23[0] = 0;
  v23[40] = 0;
  v23[48] = 0;
  v23[96] = 0;
  v23[104] = 0;
  v23[120] = 0;
  v23[128] = 0;
  v23[144] = 0;
  v9 = *a2;
  if (*a2)
    *(_DWORD *)v9 += 2;
  v20 = v9;
  v21 = 0;
  WebCore::ContentType::containerType((WebCore::ContentType *)&v20, a4, a5, a6);
  if (v19)
  {
    v12 = *((_DWORD *)v19 + 1);
    if (v12 != 9)
    {
      if (v12 != 10)
        goto LABEL_4;
      v13 = *((_QWORD *)v19 + 1);
      if ((*((_BYTE *)v19 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v13 & 0xDF) != 0x56)
          goto LABEL_4;
        if ((*(_BYTE *)(v13 + 1) & 0xDF) == 0x49
          && (*(_BYTE *)(v13 + 2) & 0xDF) == 0x44
          && (*(_BYTE *)(v13 + 3) & 0xDF) == 0x45
          && (*(_BYTE *)(v13 + 4) & 0xDF) == 0x4F
          && (*(_BYTE *)(v13 + 5) & 0xDF) == 0xF
          && (*(_BYTE *)(v13 + 6) & 0xDF) == 0x48
          && (*(_BYTE *)(v13 + 7) & 0xDF) == 0x12
          && (*(_BYTE *)(v13 + 8) & 0xDF) == 0x16
          && (*(_BYTE *)(v13 + 9) & 0xDF) == 0x14)
        {
LABEL_24:
          v14 = 11;
LABEL_46:
          v16 = (*(uint64_t (**)(_QWORD *, WTF::StringImpl **))(*a1 + 8 * v14))(a1, a2);
          goto LABEL_47;
        }
        if ((*(_BYTE *)(v13 + 1) & 0xDF) != 0x49
          || (*(_BYTE *)(v13 + 2) & 0xDF) != 0x44
          || (*(_BYTE *)(v13 + 3) & 0xDF) != 0x45
          || (*(_BYTE *)(v13 + 4) & 0xDF) != 0x4F
          || (*(_BYTE *)(v13 + 5) & 0xDF) != 0xF
          || (*(_BYTE *)(v13 + 6) & 0xDF) != 0x48
          || (*(_BYTE *)(v13 + 7) & 0xDF) != 0x12
          || (*(_BYTE *)(v13 + 8) & 0xDF) != 0x16)
        {
          goto LABEL_4;
        }
        v17 = *(unsigned __int8 *)(v13 + 9);
      }
      else
      {
        if ((*(_WORD *)v13 & 0xFFDF) != 0x56)
          goto LABEL_4;
        if ((*(_WORD *)(v13 + 2) & 0xFFDF) == 0x49
          && (*(_WORD *)(v13 + 4) & 0xFFDF) == 0x44
          && (*(_WORD *)(v13 + 6) & 0xFFDF) == 0x45
          && (*(_WORD *)(v13 + 8) & 0xFFDF) == 0x4F
          && (*(_WORD *)(v13 + 10) & 0xFFDF) == 0xF
          && (*(_WORD *)(v13 + 12) & 0xFFDF) == 0x48
          && (*(_WORD *)(v13 + 14) & 0xFFDF) == 0x12
          && (*(_WORD *)(v13 + 16) & 0xFFDF) == 0x16
          && (*(_WORD *)(v13 + 18) & 0xFFDF) == 0x14)
        {
          goto LABEL_24;
        }
        if ((*(_WORD *)(v13 + 2) & 0xFFDF) != 0x49
          || (*(_WORD *)(v13 + 4) & 0xFFDF) != 0x44
          || (*(_WORD *)(v13 + 6) & 0xFFDF) != 0x45
          || (*(_WORD *)(v13 + 8) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v13 + 10) & 0xFFDF) != 0xF
          || (*(_WORD *)(v13 + 12) & 0xFFDF) != 0x48
          || (*(_WORD *)(v13 + 14) & 0xFFDF) != 0x12
          || (*(_WORD *)(v13 + 16) & 0xFFDF) != 0x16)
        {
          goto LABEL_4;
        }
        v17 = *(unsigned __int16 *)(v13 + 18);
      }
      if ((v17 & 0xFFFFFFDF) != 0x15)
        goto LABEL_4;
      v16 = 1;
LABEL_47:
      v22[1] = v16;
      v22[2] = v16;
      goto LABEL_4;
    }
    v15 = *((_QWORD *)v19 + 1);
    if ((*((_BYTE *)v19 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v15 & 0xDF) != 0x56)
        goto LABEL_4;
      if ((*(_BYTE *)(v15 + 1) & 0xDF) == 0x49
        && (*(_BYTE *)(v15 + 2) & 0xDF) == 0x44
        && (*(_BYTE *)(v15 + 3) & 0xDF) == 0x45
        && (*(_BYTE *)(v15 + 4) & 0xDF) == 0x4F
        && (*(_BYTE *)(v15 + 5) & 0xDF) == 0xF
        && (*(_BYTE *)(v15 + 6) & 0xDF) == 0x56
        && (*(_BYTE *)(v15 + 7) & 0xDF) == 0x50
        && (*(_BYTE *)(v15 + 8) & 0xDF) == 0x18
        || (*(_BYTE *)(v15 + 1) & 0xDF) == 0x49
        && (*(_BYTE *)(v15 + 2) & 0xDF) == 0x44
        && (*(_BYTE *)(v15 + 3) & 0xDF) == 0x45
        && (*(_BYTE *)(v15 + 4) & 0xDF) == 0x4F
        && (*(_BYTE *)(v15 + 5) & 0xDF) == 0xF
        && (*(_BYTE *)(v15 + 6) & 0xDF) == 0x56
        && (*(_BYTE *)(v15 + 7) & 0xDF) == 0x50
        && (*(_BYTE *)(v15 + 8) & 0xDF) == 0x19)
      {
LABEL_45:
        v14 = 10;
        goto LABEL_46;
      }
      if ((*(_BYTE *)(v15 + 1) & 0xDF) != 0x49
        || (*(_BYTE *)(v15 + 2) & 0xDF) != 0x44
        || (*(_BYTE *)(v15 + 3) & 0xDF) != 0x45
        || (*(_BYTE *)(v15 + 4) & 0xDF) != 0x4F
        || (*(_BYTE *)(v15 + 5) & 0xDF) != 0xF
        || (*(_BYTE *)(v15 + 6) & 0xDF) != 0x41
        || (*(_BYTE *)(v15 + 7) & 0xDF) != 0x56)
      {
        goto LABEL_4;
      }
      v18 = *(unsigned __int8 *)(v15 + 8);
    }
    else
    {
      if ((*(_WORD *)v15 & 0xFFDF) != 0x56)
        goto LABEL_4;
      if ((*(_WORD *)(v15 + 2) & 0xFFDF) == 0x49
        && (*(_WORD *)(v15 + 4) & 0xFFDF) == 0x44
        && (*(_WORD *)(v15 + 6) & 0xFFDF) == 0x45
        && (*(_WORD *)(v15 + 8) & 0xFFDF) == 0x4F
        && (*(_WORD *)(v15 + 10) & 0xFFDF) == 0xF
        && (*(_WORD *)(v15 + 12) & 0xFFDF) == 0x56
        && (*(_WORD *)(v15 + 14) & 0xFFDF) == 0x50
        && (*(_WORD *)(v15 + 16) & 0xFFDF) == 0x18
        || (*(_WORD *)(v15 + 2) & 0xFFDF) == 0x49
        && (*(_WORD *)(v15 + 4) & 0xFFDF) == 0x44
        && (*(_WORD *)(v15 + 6) & 0xFFDF) == 0x45
        && (*(_WORD *)(v15 + 8) & 0xFFDF) == 0x4F
        && (*(_WORD *)(v15 + 10) & 0xFFDF) == 0xF
        && (*(_WORD *)(v15 + 12) & 0xFFDF) == 0x56
        && (*(_WORD *)(v15 + 14) & 0xFFDF) == 0x50
        && (*(_WORD *)(v15 + 16) & 0xFFDF) == 0x19)
      {
        goto LABEL_45;
      }
      if ((*(_WORD *)(v15 + 2) & 0xFFDF) != 0x49
        || (*(_WORD *)(v15 + 4) & 0xFFDF) != 0x44
        || (*(_WORD *)(v15 + 6) & 0xFFDF) != 0x45
        || (*(_WORD *)(v15 + 8) & 0xFFDF) != 0x4F
        || (*(_WORD *)(v15 + 10) & 0xFFDF) != 0xF
        || (*(_WORD *)(v15 + 12) & 0xFFDF) != 0x41
        || (*(_WORD *)(v15 + 14) & 0xFFDF) != 0x56)
      {
        goto LABEL_4;
      }
      v18 = *(unsigned __int16 *)(v15 + 16);
    }
    if ((v18 & 0xFFFFFFDF) != 0x11)
      goto LABEL_4;
    v16 = 0;
    goto LABEL_47;
  }
LABEL_4:
  v22[0] = 1;
  *(_BYTE *)(a3 + 2) = v22[2];
  *(_WORD *)a3 = *(_WORD *)v22;
  WebCore::MediaConfiguration::MediaConfiguration(a3 + 8, (uint64_t)v23);
  *(_BYTE *)(a3 + 160) = v23[152];
  *(_BYTE *)(a3 + 168) = 1;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v10);
    else
      *(_DWORD *)v19 -= 2;
  }
  v11 = v20;
  v20 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)v23, v10);
}

uint64_t WebCore::VideoFrameLibWebRTC::colorSpaceFromFrame(WebCore::VideoFrameLibWebRTC *this, const webrtc::VideoFrame *a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[68];
  char v16;

  v15[0] = 0;
  v16 = 0;
  if (!*((_BYTE *)this + 144)
    || (webrtc::ColorSpace::ColorSpace(),
        v16 = 1,
        result = webrtc::ColorSpace::primaries((webrtc::ColorSpace *)v15),
        (_DWORD)result == 2))
  {
    v3 = 0;
    v4 = 0;
    return v4 | v3;
  }
  if (v16)
  {
    result = webrtc::ColorSpace::primaries((webrtc::ColorSpace *)v15);
    v5 = result - 1;
    if ((result - 1) > 0x15)
    {
      v3 = 0;
      v6 = 0;
    }
    else
    {
      v3 = qword_1969F9288[v5];
      v6 = qword_1969F9338[v5];
    }
    if (v16)
    {
      result = webrtc::ColorSpace::transfer((webrtc::ColorSpace *)v15);
      v7 = result - 1;
      if ((result - 1) > 0x11)
      {
        v8 = 0;
        v9 = 0;
      }
      else
      {
        v8 = qword_1969F93E8[v7];
        v9 = qword_1969F9478[v7];
      }
      if (v16)
      {
        result = webrtc::ColorSpace::matrix((webrtc::ColorSpace *)v15);
        if (result > 0xA)
        {
          v10 = 0;
          v11 = 0;
        }
        else
        {
          v10 = qword_1969F9508[(char)result];
          v11 = qword_1969F9560[(char)result];
        }
        if (v16)
        {
          v12 = webrtc::ColorSpace::range((webrtc::ColorSpace *)v15);
          if (v12 == 2)
          {
            v14 = 0x100000000000000;
            v13 = 0x1000000000000;
          }
          else
          {
            v13 = 0;
            if (v12 == 1)
              v14 = 0x100000000000000;
            else
              v14 = 0;
          }
          v4 = v8 | v6 | v9 | v10 | v11 | v13 | v14;
          return v4 | v3;
        }
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t WebCore::VideoFrameLibWebRTC::pixelBuffer(WebCore::VideoFrameLibWebRTC *this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  WebCore::VideoFrameLibWebRTC *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  CFTypeRef v9;
  const void *v10;
  CFTypeRef v11;
  WebCore::VideoFrameLibWebRTC *v12;
  uint64_t v13;
  int v14;
  WebCore::VideoFrameLibWebRTC *v16;
  CFTypeRef cf;
  _BYTE v18[24];
  WebCore::VideoFrameLibWebRTC *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = (unsigned __int8 *)this + 112;
  if (__ldaxr((unsigned __int8 *)this + 112))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 112);
LABEL_5:
  v4 = *((_QWORD *)this + 13);
  if (v4)
    goto LABEL_25;
  v5 = (WebCore::VideoFrameLibWebRTC *)*((_QWORD *)this + 12);
  if (!v5)
  {
    v4 = 0;
    goto LABEL_25;
  }
  v6 = (_QWORD *)((char *)this + 72);
  if (v5 != (WebCore::VideoFrameLibWebRTC *)((char *)this + 72))
  {
    v19 = (WebCore::VideoFrameLibWebRTC *)*((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = 0;
    goto LABEL_16;
  }
  v19 = (WebCore::VideoFrameLibWebRTC *)v18;
  (*(void (**)(char *, _BYTE *))(*((_QWORD *)this + 9) + 24))((char *)this + 72, v18);
  v7 = (_QWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v7 == v6)
  {
    v8 = 4;
  }
  else
  {
    if (!v7)
      goto LABEL_15;
    v8 = 5;
    v6 = v7;
  }
  (*(void (**)(_QWORD *))(*v6 + 8 * v8))(v6);
LABEL_15:
  v5 = v19;
  *((_QWORD *)this + 12) = 0;
  if (v5)
  {
LABEL_16:
    (*(void (**)(CFTypeRef *__return_ptr, WebCore::VideoFrameLibWebRTC *, _QWORD))(*(_QWORD *)v5 + 48))(&cf, v5, *((_QWORD *)this + 6));
    v9 = cf;
    cf = 0;
    v10 = (const void *)*((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = v9;
    if (v10)
    {
      CFRelease(v10);
      v11 = cf;
      cf = 0;
      if (v11)
        CFRelease(v11);
    }
    v12 = v19;
    if (v19 == (WebCore::VideoFrameLibWebRTC *)v18)
    {
      v13 = 4;
      v12 = (WebCore::VideoFrameLibWebRTC *)v18;
    }
    else
    {
      if (!v19)
      {
LABEL_24:
        v4 = *((_QWORD *)this + 13);
LABEL_25:
        v14 = __ldxr(v2);
        if (v14 == 1)
        {
          if (!__stlxr(0, v2))
            return v4;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v2);
        return v4;
      }
      v13 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v12 + 8 * v13))();
    goto LABEL_24;
  }
  v16 = (WebCore::VideoFrameLibWebRTC *)std::__throw_bad_function_call[abi:sn180100]();
  return WebCore::VideoFrameLibWebRTC::clone(v16);
}

_QWORD *WebCore::VideoFrameLibWebRTC::clone@<X0>(WebCore::VideoFrameLibWebRTC *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  char v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::VideoFrameLibWebRTC *v9;
  float v10;
  float v11;
  int v12;
  int v13;
  _QWORD *result;
  uint64_t v15;
  __int128 v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = WTF::fastMalloc((WTF *)0x78);
  v16 = *((_OWORD *)this + 1);
  v5 = *((_BYTE *)this + 32);
  v6 = *((_WORD *)this + 17);
  v7 = *(_QWORD *)((char *)this + 36);
  v8 = *((_QWORD *)this + 6);
  if (v8)
    (**(void (***)(_QWORD))v8)(*((_QWORD *)this + 6));
  v9 = (WebCore::VideoFrameLibWebRTC *)*((_QWORD *)this + 12);
  if (v9)
  {
    if (v9 == (WebCore::VideoFrameLibWebRTC *)((char *)this + 72))
    {
      v18 = v17;
      (*(void (**)(WebCore::VideoFrameLibWebRTC *, _QWORD *))(*(_QWORD *)v9 + 24))(v9, v17);
    }
    else
    {
      v18 = (_QWORD *)(*(uint64_t (**)(WebCore::VideoFrameLibWebRTC *))(*(_QWORD *)v9 + 16))(v9);
    }
  }
  else
  {
    v18 = 0;
  }
  *(_DWORD *)(v4 + 8) = 1;
  *(_OWORD *)(v4 + 16) = v16;
  *(_BYTE *)(v4 + 32) = v5;
  *(_WORD *)(v4 + 34) = v6;
  *(_QWORD *)(v4 + 36) = v7;
  *(_QWORD *)v4 = off_1E341A6A0;
  *(_QWORD *)(v4 + 48) = v8;
  v10 = (float)(*(int (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
  v11 = (float)(*(int (**)(_QWORD))(**(_QWORD **)(v4 + 48) + 48))(*(_QWORD *)(v4 + 48));
  *(float *)(v4 + 56) = v10;
  *(float *)(v4 + 60) = v11;
  *(_DWORD *)(v4 + 64) = 0;
  if (v18)
  {
    if (v18 == v17)
    {
      *(_QWORD *)(v4 + 96) = v4 + 72;
      (*(void (**)(_QWORD *))(v17[0] + 24))(v17);
    }
    else
    {
      *(_QWORD *)(v4 + 96) = v18;
      v18 = 0;
    }
  }
  else
  {
    *(_QWORD *)(v4 + 96) = 0;
  }
  *(_QWORD *)(v4 + 104) = 0;
  *(_BYTE *)(v4 + 112) = 0;
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 48) + 32))(*(_QWORD *)(v4 + 48));
  if (v12 == 1)
  {
    v13 = 875704422;
  }
  else
  {
    if (v12 != 5)
      goto LABEL_18;
    v13 = 2019963440;
  }
  *(_DWORD *)(v4 + 64) = v13;
LABEL_18:
  *a2 = v4;
  result = v18;
  if (v18 == v17)
  {
    v15 = 4;
    result = v17;
  }
  else
  {
    if (!v18)
      return result;
    v15 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v15))();
}

void WebCore::BaseAudioSharedUnit::~BaseAudioSharedUnit(WebCore::BaseAudioSharedUnit *this)
{
  void *v2;
  uint64_t v3;
  WTF *v4;
  void *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  *(_QWORD *)this = off_1E341A700;
  {
    WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
  }
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>((uint64_t)&unk_1ECE91208, this);
  v3 = *((unsigned int *)this + 33);
  if ((_DWORD)v3)
  {
    v12 = (_QWORD *)*((_QWORD *)this + 15);
    v13 = 8 * v3;
    do
    {
      v14 = *v12;
      *v12 = 0;
      if (v14)
      {
        v15 = v13;
        v16 = v12;
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        v13 = v15;
        v12 = v16;
      }
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  v4 = (WTF *)*((_QWORD *)this + 15);
  if (v4)
  {
    *((_QWORD *)this + 15) = 0;
    *((_DWORD *)this + 32) = 0;
    WTF::fastFree(v4, v2);
  }
  WTF::Vector<WTF::ThreadSafeWeakPtr<WebCore::CoreAudioCaptureSource>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 96, v2);
  v6 = *((_QWORD *)this + 9);
  if (v6)
    WTF::HashTable<WebCore::CoreAudioCaptureSource const*,WTF::KeyValuePair<WebCore::CoreAudioCaptureSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CoreAudioCaptureSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::CoreAudioCaptureSource const*>,WTF::HashMap<WebCore::CoreAudioCaptureSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::CoreAudioCaptureSource const*>,WTF::HashTraits<WebCore::CoreAudioCaptureSource const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CoreAudioCaptureSource const*>>::deallocateTable(v6, v5);
  if (*((_BYTE *)this + 64))
  {
    v7 = (WTF::StringImpl *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  v8 = *((_QWORD *)this + 1);
  if (v8)
  {
    *(_QWORD *)(v8 + 8) = 0;
    v9 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v9)
    {
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, v5);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t WebCore::BaseAudioSharedUnit::addClient(WebCore::BaseAudioSharedUnit *this, WebCore::CoreAudioCaptureSource *a2)
{
  char *v3;
  void *v4;
  unsigned __int8 *v5;
  void *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  WTF *v17;
  uint64_t v18;
  uint64_t result;
  int v20;
  uint64_t v21;
  uint64_t v22;

  v3 = (char *)this + 72;
  WTF::ThreadSafeWeakHashSet<WebCore::CoreAudioCaptureSource>::add<WebCore::CoreAudioCaptureSource,(void *)0>((uint64_t)this + 72, a2);
  v5 = (unsigned __int8 *)this + 112;
  if (__ldaxr((unsigned __int8 *)this + 112))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 112);
LABEL_5:
  WTF::ThreadSafeWeakHashSet<WebCore::CoreAudioCaptureSource>::weakValues((uint64_t)v3, v4, (uint64_t)&v21);
  v8 = *((unsigned int *)this + 27);
  if ((_DWORD)v8)
  {
    v9 = (uint64_t *)*((_QWORD *)this + 12);
    for (i = 16 * v8; i; i -= 16)
    {
      v11 = *v9;
      *v9 = 0;
      if (!v11)
        goto LABEL_20;
      if (__ldaxr((unsigned __int8 *)v11))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v11))
      {
        goto LABEL_12;
      }
      MEMORY[0x19AEA534C](v11);
LABEL_12:
      v13 = *(_QWORD *)(v11 + 16) - 1;
      *(_QWORD *)(v11 + 16) = v13;
      if (v13)
      {
        v16 = __ldxr((unsigned __int8 *)v11);
        if (v16 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v11))
            goto LABEL_20;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v11);
        goto LABEL_20;
      }
      v14 = *(_QWORD *)(v11 + 8);
      v15 = __ldxr((unsigned __int8 *)v11);
      if (v15 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v11))
        {
          if (!v14)
            goto LABEL_19;
          goto LABEL_20;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v11);
      if (!v14)
LABEL_19:
        WTF::fastFree((WTF *)v11, v7);
LABEL_20:
      v9 += 2;
    }
  }
  v17 = (WTF *)*((_QWORD *)this + 12);
  if (v17)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v17, v7);
  }
  *((_QWORD *)this + 12) = v21;
  v18 = v22;
  v21 = 0;
  v22 = 0;
  *((_QWORD *)this + 13) = v18;
  result = WTF::Vector<WTF::ThreadSafeWeakPtr<WebCore::CoreAudioCaptureSource>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v7);
  v20 = __ldxr(v5);
  if (v20 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WebCore::BaseAudioSharedUnit *)((char *)this + 112));
  }
  if (__stlxr(0, v5))
    return WTF::Lock::unlockSlow((WebCore::BaseAudioSharedUnit *)((char *)this + 112));
  return result;
}

uint64_t WTF::ThreadSafeWeakHashSet<WebCore::CoreAudioCaptureSource>::add<WebCore::CoreAudioCaptureSource,(void *)0>(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v10;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;

  v3 = result;
  v4 = a2[38];
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](v4);
LABEL_5:
  v6 = *(_QWORD *)(v4 + 24);
  v7 = __ldxr((unsigned __int8 *)v4);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
LABEL_9:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x1962B87B0);
  }
  v8 = (unsigned __int8 *)(v3 + 16);
  if (__ldaxr((unsigned __int8 *)(v3 + 16)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_15;
  }
  result = MEMORY[0x19AEA534C](v3 + 16);
LABEL_15:
  v10 = a2[38];
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v10))
  {
    goto LABEL_19;
  }
  result = MEMORY[0x19AEA534C](v10);
LABEL_19:
  if (*(_QWORD *)(v10 + 24))
  {
    ++*(_QWORD *)(v10 + 16);
    v12 = v10;
  }
  else
  {
    v12 = 0;
  }
  v13 = __ldxr((unsigned __int8 *)v10);
  if (v13 != 1)
  {
    __clrex();
LABEL_26:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v10);
    if (!v12)
      goto LABEL_83;
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v10))
    goto LABEL_26;
  if (!v12)
    goto LABEL_83;
LABEL_27:
  v14 = *(_DWORD *)(v3 + 12);
  v15 = *(_DWORD *)(v3 + 8) + 1;
  *(_DWORD *)(v3 + 8) = v15;
  if (v15 <= v14)
  {
    v16 = *(_QWORD *)v3;
    if (*(_QWORD *)v3)
    {
LABEL_36:
      v18 = *(_DWORD *)(v16 - 8);
      goto LABEL_37;
    }
  }
  else
  {
    result = (uint64_t)_ZN3WTF9HashTableIPKN7WebCore21AudioWorkletProcessorENS_12KeyValuePairIS4_NS_6RefPtrINS_29ThreadSafeWeakPtrControlBlockENS_12RawPtrTraitsIS7_EENS_43ThreadSafeWeakPtrControlBlockRefDerefTraitsEEEEENS_24KeyValuePairKeyExtractorISC_EENS_11DefaultHashIS4_EENS_7HashMapIS4_SB_SG_NS_10HashTraitsIS4_EENSI_ISB_EENS_15HashTableTraitsEE18KeyValuePairTraitsESJ_E8removeIfIZNKS_21ThreadSafeWeakHashSetIS2_E24amortizedCleanupIfNeededEvEUlRT_E_EEbRKSS_((uint64_t *)v3, a2);
    *(_DWORD *)(v3 + 8) = 0;
    v16 = *(_QWORD *)v3;
    if (*(_QWORD *)v3)
    {
      v17 = *(_DWORD *)(v16 - 12);
      if (v17 > 0x7FFFFFFE)
        v17 = 0x7FFFFFFF;
    }
    else
    {
      v17 = 0;
    }
    *(_DWORD *)(v3 + 12) = 2 * v17;
    if (v16)
      goto LABEL_36;
  }
  result = WTF::HashTable<WebCore::AudioWorkletProcessor const*,WTF::KeyValuePair<WebCore::AudioWorkletProcessor const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioWorkletProcessor const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::AudioWorkletProcessor const*>,WTF::HashMap<WebCore::AudioWorkletProcessor const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::AudioWorkletProcessor const*>,WTF::HashTraits<WebCore::AudioWorkletProcessor const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::AudioWorkletProcessor const*>>::rehash((uint64_t *)v3, 8u);
  v16 = *(_QWORD *)v3;
  if (*(_QWORD *)v3)
    goto LABEL_36;
  v18 = 0;
LABEL_37:
  v19 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
  v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
  v22 = v18 & ((v21 >> 31) ^ v21);
  v23 = (_QWORD *)(v16 + 16 * v22);
  v24 = (_QWORD *)*v23;
  if (!*v23)
  {
LABEL_45:
    v27 = v23[1];
    *v23 = a2;
    v23[1] = v12;
    if (!v27)
      goto LABEL_60;
    if (__ldaxr((unsigned __int8 *)v27))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v27))
    {
      goto LABEL_52;
    }
    result = MEMORY[0x19AEA534C](v27);
LABEL_52:
    v30 = *(_QWORD *)(v27 + 16) - 1;
    *(_QWORD *)(v27 + 16) = v30;
    if (!v30)
    {
      v31 = *(_QWORD *)(v27 + 8);
      v32 = __ldxr((unsigned __int8 *)v27);
      if (v32 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v27))
        {
          if (v31)
            goto LABEL_60;
LABEL_59:
          result = WTF::fastFree((WTF *)v27, a2);
          goto LABEL_60;
        }
      }
      else
      {
        __clrex();
      }
      result = WTF::Lock::unlockSlow((WTF::Lock *)v27);
      if (v31)
        goto LABEL_60;
      goto LABEL_59;
    }
    v44 = __ldxr((unsigned __int8 *)v27);
    if (v44 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v27))
      {
LABEL_60:
        v33 = *(_QWORD *)v3;
        if (*(_QWORD *)v3)
          v34 = *(_DWORD *)(v33 - 12) + 1;
        else
          v34 = 1;
        *(_DWORD *)(v33 - 12) = v34;
        v35 = *(_QWORD *)v3;
        if (*(_QWORD *)v3)
          v36 = *(_DWORD *)(v35 - 12);
        else
          v36 = 0;
        v37 = (*(_DWORD *)(v35 - 16) + v36);
        v38 = *(unsigned int *)(v35 - 4);
        if (v38 > 0x400)
        {
          if (v38 > 2 * v37)
            goto LABEL_83;
        }
        else
        {
          if (3 * v38 > 4 * v37)
            goto LABEL_83;
          if (!(_DWORD)v38)
          {
            v39 = 8;
            goto LABEL_82;
          }
        }
        v39 = (_DWORD)v38 << (6 * *(_DWORD *)(v35 - 12) >= (2 * v38));
LABEL_82:
        result = WTF::HashTable<WebCore::AudioWorkletProcessor const*,WTF::KeyValuePair<WebCore::AudioWorkletProcessor const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioWorkletProcessor const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::AudioWorkletProcessor const*>,WTF::HashMap<WebCore::AudioWorkletProcessor const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::AudioWorkletProcessor const*>,WTF::HashTraits<WebCore::AudioWorkletProcessor const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::AudioWorkletProcessor const*>>::rehash((uint64_t *)v3, v39);
        goto LABEL_83;
      }
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v27);
    goto LABEL_60;
  }
  v25 = 0;
  v26 = 1;
  while (v24 != a2)
  {
    if (v24 == (_QWORD *)-1)
      v25 = v23;
    v22 = (v22 + v26) & v18;
    v23 = (_QWORD *)(v16 + 16 * v22);
    v24 = (_QWORD *)*v23;
    ++v26;
    if (!*v23)
    {
      if (v25)
      {
        *v25 = 0;
        v25[1] = 0;
        --*(_DWORD *)(*(_QWORD *)v3 - 16);
        v23 = v25;
      }
      goto LABEL_45;
    }
  }
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
    goto LABEL_73;
  }
  result = MEMORY[0x19AEA534C](v12);
LABEL_73:
  v40 = *(_QWORD *)(v12 + 16) - 1;
  *(_QWORD *)(v12 + 16) = v40;
  if (!v40)
  {
    v41 = *(_QWORD *)(v12 + 8);
    v42 = __ldxr((unsigned __int8 *)v12);
    if (v42 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v12))
      {
LABEL_79:
        if (!v41)
          result = WTF::fastFree((WTF *)v12, a2);
        goto LABEL_83;
      }
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v12);
    goto LABEL_79;
  }
  v45 = __ldxr((unsigned __int8 *)v12);
  if (v45 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v12))
      goto LABEL_83;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v12);
LABEL_83:
  v43 = __ldxr(v8);
  if (v43 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v8);
  }
  if (__stlxr(0, v8))
    return WTF::Lock::unlockSlow((WTF::Lock *)v8);
  return result;
}

uint64_t WTF::ThreadSafeWeakHashSet<WebCore::CoreAudioCaptureSource>::weakValues@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t **v3;
  unsigned __int8 *v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;

  v3 = (uint64_t **)result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v5 = (unsigned __int8 *)(result + 16);
  if (__ldaxr((unsigned __int8 *)(result + 16)))
  {
    __clrex();
LABEL_4:
    result = MEMORY[0x19AEA534C](result + 16);
    goto LABEL_5;
  }
  if (__stxr(1u, v5))
    goto LABEL_4;
LABEL_5:
  v31 = 0;
  v32 = 0;
  if (!*v3)
    goto LABEL_35;
  v7 = *((unsigned int *)*v3 - 3);
  if (!(_DWORD)v7)
    goto LABEL_35;
  if (v7 >> 28)
  {
    __break(0xC471u);
    return result;
  }
  LODWORD(v32) = *((_DWORD *)*v3 - 3);
  v31 = WTF::fastMalloc((WTF *)(16 * v7));
  v8 = *v3;
  if (!*v3 || !*((_DWORD *)v8 - 3))
    goto LABEL_35;
  v9 = *((unsigned int *)v8 - 1);
  if ((_DWORD)v9)
  {
    v10 = 16 * v9;
    v11 = *v3;
    while ((unint64_t)(*v11 + 1) <= 1)
    {
      v11 += 2;
      v10 -= 16;
      if (!v10)
        goto LABEL_35;
    }
  }
  else
  {
    v11 = *v3;
  }
  v12 = &v8[2 * v9];
  if (v11 == v12)
    goto LABEL_35;
  v13 = *v11;
LABEL_18:
  v14 = v11[1];
  if (__ldaxr((unsigned __int8 *)v14))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v14))
  {
    goto LABEL_22;
  }
  MEMORY[0x19AEA534C](v14);
LABEL_22:
  if (*(_QWORD *)(v14 + 24))
  {
    ++*(_QWORD *)(v14 + 16);
    v16 = v14;
  }
  else
  {
    v16 = 0;
  }
  v17 = __ldxr((unsigned __int8 *)v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_28;
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
LABEL_28:
    WTF::Lock::unlockSlow((WTF::Lock *)v14);
  v18 = HIDWORD(v32) + 1;
  v19 = (_QWORD *)(v31 + 16 * HIDWORD(v32));
  *v19 = v16;
  v19[1] = v13;
  HIDWORD(v32) = v18;
  while (1)
  {
    v11 += 2;
    if (v11 == v12)
      break;
    v13 = *v11;
    if ((unint64_t)(*v11 + 1) > 1)
    {
      if (v11 != v12)
        goto LABEL_18;
      break;
    }
  }
LABEL_35:
  v20 = *(unsigned int *)(a3 + 12);
  v21 = *(WTF **)a3;
  if (!(_DWORD)v20)
    goto LABEL_57;
  v22 = 16 * v20;
  do
  {
    v23 = *(_QWORD *)v21;
    *(_QWORD *)v21 = 0;
    if (!v23)
      goto LABEL_50;
    if (__ldaxr((unsigned __int8 *)v23))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v23))
    {
      goto LABEL_42;
    }
    MEMORY[0x19AEA534C](v23);
LABEL_42:
    v25 = *(_QWORD *)(v23 + 16) - 1;
    *(_QWORD *)(v23 + 16) = v25;
    if (!v25)
    {
      v26 = *(_QWORD *)(v23 + 8);
      v27 = __ldxr((unsigned __int8 *)v23);
      if (v27 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v23))
        {
          if (v26)
            goto LABEL_50;
LABEL_49:
          WTF::fastFree((WTF *)v23, a2);
          goto LABEL_50;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v23);
      if (v26)
        goto LABEL_50;
      goto LABEL_49;
    }
    v28 = __ldxr((unsigned __int8 *)v23);
    if (v28 != 1)
    {
      __clrex();
LABEL_56:
      WTF::Lock::unlockSlow((WTF::Lock *)v23);
      goto LABEL_50;
    }
    if (__stlxr(0, (unsigned __int8 *)v23))
      goto LABEL_56;
LABEL_50:
    v21 = (WTF *)((char *)v21 + 16);
    v22 -= 16;
  }
  while (v22);
  v21 = *(WTF **)a3;
LABEL_57:
  if (v21)
    WTF::fastFree(v21, a2);
  *(_QWORD *)a3 = v31;
  v29 = v32;
  v31 = 0;
  v32 = 0;
  *(_QWORD *)(a3 + 8) = v29;
  result = WTF::Vector<WTF::ThreadSafeWeakPtr<WebCore::CoreAudioCaptureSource>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, a2);
  v30 = __ldxr(v5);
  if (v30 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  if (__stlxr(0, v5))
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  return result;
}

uint64_t WebCore::BaseAudioSharedUnit::removeClient(WebCore::BaseAudioSharedUnit *this, WebCore::CoreAudioCaptureSource *a2)
{
  char *v3;
  void *v4;
  unsigned __int8 *v5;
  void *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  WTF *v17;
  uint64_t v18;
  uint64_t result;
  int v20;
  uint64_t v21;
  uint64_t v22;

  v3 = (char *)this + 72;
  WTF::ThreadSafeWeakHashSet<WebCore::CoreAudioCaptureSource>::remove<WebCore::CoreAudioCaptureSource,(void *)0>((uint64_t)this + 72, a2);
  v5 = (unsigned __int8 *)this + 112;
  if (__ldaxr((unsigned __int8 *)this + 112))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 112);
LABEL_5:
  WTF::ThreadSafeWeakHashSet<WebCore::CoreAudioCaptureSource>::weakValues((uint64_t)v3, v4, (uint64_t)&v21);
  v8 = *((unsigned int *)this + 27);
  if ((_DWORD)v8)
  {
    v9 = (uint64_t *)*((_QWORD *)this + 12);
    for (i = 16 * v8; i; i -= 16)
    {
      v11 = *v9;
      *v9 = 0;
      if (!v11)
        goto LABEL_20;
      if (__ldaxr((unsigned __int8 *)v11))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v11))
      {
        goto LABEL_12;
      }
      MEMORY[0x19AEA534C](v11);
LABEL_12:
      v13 = *(_QWORD *)(v11 + 16) - 1;
      *(_QWORD *)(v11 + 16) = v13;
      if (v13)
      {
        v16 = __ldxr((unsigned __int8 *)v11);
        if (v16 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v11))
            goto LABEL_20;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v11);
        goto LABEL_20;
      }
      v14 = *(_QWORD *)(v11 + 8);
      v15 = __ldxr((unsigned __int8 *)v11);
      if (v15 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v11))
        {
          if (!v14)
            goto LABEL_19;
          goto LABEL_20;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v11);
      if (!v14)
LABEL_19:
        WTF::fastFree((WTF *)v11, v7);
LABEL_20:
      v9 += 2;
    }
  }
  v17 = (WTF *)*((_QWORD *)this + 12);
  if (v17)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v17, v7);
  }
  *((_QWORD *)this + 12) = v21;
  v18 = v22;
  v21 = 0;
  v22 = 0;
  *((_QWORD *)this + 13) = v18;
  result = WTF::Vector<WTF::ThreadSafeWeakPtr<WebCore::CoreAudioCaptureSource>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v7);
  v20 = __ldxr(v5);
  if (v20 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WebCore::BaseAudioSharedUnit *)((char *)this + 112));
  }
  if (__stlxr(0, v5))
    return WTF::Lock::unlockSlow((WebCore::BaseAudioSharedUnit *)((char *)this + 112));
  return result;
}

uint64_t WTF::ThreadSafeWeakHashSet<WebCore::CoreAudioCaptureSource>::remove<WebCore::CoreAudioCaptureSource,(void *)0>(uint64_t a1, void *a2)
{
  unsigned __int8 *v4;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  _BOOL4 v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v39;

  v4 = (unsigned __int8 *)(a1 + 16);
  if (__ldaxr((unsigned __int8 *)(a1 + 16)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 16);
LABEL_5:
  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 <= v6)
  {
    v8 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      goto LABEL_13;
LABEL_20:
    v18 = 0;
    goto LABEL_59;
  }
  _ZN3WTF9HashTableIPKN7WebCore21AudioWorkletProcessorENS_12KeyValuePairIS4_NS_6RefPtrINS_29ThreadSafeWeakPtrControlBlockENS_12RawPtrTraitsIS7_EENS_43ThreadSafeWeakPtrControlBlockRefDerefTraitsEEEEENS_24KeyValuePairKeyExtractorISC_EENS_11DefaultHashIS4_EENS_7HashMapIS4_SB_SG_NS_10HashTraitsIS4_EENSI_ISB_EENS_15HashTableTraitsEE18KeyValuePairTraitsESJ_E8removeIfIZNKS_21ThreadSafeWeakHashSetIS2_E24amortizedCleanupIfNeededEvEUlRT_E_EEbRKSS_((uint64_t *)a1, a2);
  *(_DWORD *)(a1 + 8) = 0;
  v8 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v9 = *(_DWORD *)(v8 - 12);
    if (v9 > 0x7FFFFFFE)
      v9 = 0x7FFFFFFF;
  }
  else
  {
    v9 = 0;
  }
  *(_DWORD *)(a1 + 12) = 2 * v9;
  if (!v8)
    goto LABEL_20;
LABEL_13:
  v10 = *(_DWORD *)(v8 - 8);
  v11 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = v10 & ((v13 >> 31) ^ v13);
  v15 = *(void **)(v8 + 16 * v14);
  if (v15 != a2)
  {
    v16 = 1;
    while (v15)
    {
      v14 = ((_DWORD)v14 + v16) & v10;
      v15 = *(void **)(v8 + 16 * v14);
      ++v16;
      if (v15 == a2)
        goto LABEL_19;
    }
    v14 = *(unsigned int *)(v8 - 4);
  }
LABEL_19:
  v17 = *(unsigned int *)(v8 - 4);
  if (v14 == v17)
    goto LABEL_20;
  v19 = (_QWORD *)(v8 + 16 * v14);
  v21 = v19 + 1;
  v20 = v19[1];
  if (!v20)
  {
    v23 = 1;
    goto LABEL_34;
  }
  if (__ldaxr((unsigned __int8 *)v20))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v20))
  {
    goto LABEL_27;
  }
  MEMORY[0x19AEA534C](v20);
LABEL_27:
  v24 = *(_QWORD *)(v20 + 24);
  v25 = __ldxr((unsigned __int8 *)v20);
  if (v25 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v20))
      goto LABEL_32;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v20);
LABEL_32:
  v23 = v24 != 0;
  v8 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_35;
  v17 = *(unsigned int *)(v8 - 4);
LABEL_34:
  v8 += 16 * v17;
  if ((_QWORD *)v8 != v19)
  {
LABEL_35:
    if ((_QWORD *)v8 == v19)
    {
LABEL_57:
      v28 = 1;
      goto LABEL_58;
    }
    *v19 = -1;
    v26 = *v21;
    *v21 = 0;
    if (!v26)
    {
LABEL_50:
      ++*(_DWORD *)(*(_QWORD *)a1 - 16);
      v32 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v33 = *(_DWORD *)(v32 - 12) - 1;
      else
        v33 = -1;
      *(_DWORD *)(v32 - 12) = v33;
      v34 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        v35 = 6 * *(_DWORD *)(v34 - 12);
        v36 = *(_DWORD *)(v34 - 4);
        v28 = 1;
        if (v35 >= v36 || v36 < 9)
          goto LABEL_58;
        WTF::HashTable<WebCore::AudioWorkletProcessor const*,WTF::KeyValuePair<WebCore::AudioWorkletProcessor const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioWorkletProcessor const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::AudioWorkletProcessor const*>,WTF::HashMap<WebCore::AudioWorkletProcessor const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::AudioWorkletProcessor const*>,WTF::HashTraits<WebCore::AudioWorkletProcessor const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::AudioWorkletProcessor const*>>::rehash((uint64_t *)a1, v36 >> 1);
      }
      goto LABEL_57;
    }
    if (__ldaxr((unsigned __int8 *)v26))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v26))
    {
      goto LABEL_42;
    }
    MEMORY[0x19AEA534C](v26);
LABEL_42:
    v29 = *(_QWORD *)(v26 + 16) - 1;
    *(_QWORD *)(v26 + 16) = v29;
    if (v29)
    {
      v39 = __ldxr((unsigned __int8 *)v26);
      if (v39 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v26))
          goto LABEL_50;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v26);
      goto LABEL_50;
    }
    v30 = *(_QWORD *)(v26 + 8);
    v31 = __ldxr((unsigned __int8 *)v26);
    if (v31 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v26))
      {
LABEL_48:
        if (!v30)
          WTF::fastFree((WTF *)v26, a2);
        goto LABEL_50;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
    goto LABEL_48;
  }
  v28 = 0;
LABEL_58:
  v18 = v23 & v28;
LABEL_59:
  v37 = __ldxr(v4);
  if (v37 == 1)
  {
    if (!__stlxr(0, v4))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return v18;
}

uint64_t WebCore::BaseAudioSharedUnit::resume(WebCore::BaseAudioSharedUnit *this)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v9;
  _QWORD *v11;
  uint8_t buf[16];

  if (*((_BYTE *)this + 36))
  {
    v2 = qword_1ECE7CD60;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1940B8000, v2, OS_LOG_TYPE_INFO, "BaseAudioSharedUnit::resume", buf, 2u);
    }
    *((_BYTE *)this + 36) = 0;
    if (*((_BYTE *)this + 37))
    {
      *((_BYTE *)this + 37) = 0;
      (*(void (**)(WebCore::BaseAudioSharedUnit *))(*(_QWORD *)this + 104))(this);
    }
    v3 = *((_QWORD *)this + 1);
    if (v3)
      goto LABEL_18;
    v3 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v3 = 1;
    *(_QWORD *)(v3 + 8) = this;
    v5 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v3;
    if (!v5)
      goto LABEL_18;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
    v3 = *((_QWORD *)this + 1);
    if (v3)
    {
LABEL_18:
      do
        v8 = __ldaxr((unsigned int *)v3);
      while (__stlxr(v8 + 1, (unsigned int *)v3));
    }
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v9 = &off_1E341AD30;
    v9[1] = v3;
    v11 = v9;
    WTF::callOnMainThread();
    if (v11)
      (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  }
  return 0;
}

uint64_t WebCore::BaseAudioSharedUnit::continueStartProducingData(uint64_t this)
{
  unsigned __int8 *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::AudioSession *v10;
  WebCore::AudioSessionIOS *v11;
  NSObject *v13;
  NSObject *v14;
  WTF *v15;
  int v16;
  unsigned int v17;

  if (*(_DWORD *)(this + 40))
  {
    v1 = (unsigned __int8 *)this;
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 32))(this);
    if ((this & 1) == 0)
    {
      if ((*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v1 + 56))(v1))
        (*(void (**)(unsigned __int8 *))(*(_QWORD *)v1 + 80))(v1);
      v2 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v2 = off_1E341ACE0;
      WTF::ThreadSafeWeakHashSet<WebCore::CoreAudioCaptureSource>::values(v1 + 72, v3, (uint64_t)&v15);
      v5 = v15;
      if (v17)
      {
        v6 = 8 * v17;
        do
        {
          v7 = *(_QWORD *)v5;
          v5 = (WTF *)((char *)v5 + 8);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v7);
          v6 -= 8;
        }
        while (v6);
        v5 = v15;
        if (v17)
        {
          v8 = 8 * v17;
          do
          {
            v9 = *(_QWORD *)v5;
            *(_QWORD *)v5 = 0;
            if (v9)
              WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::CoreAudioCaptureSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v9 + 304));
            v5 = (WTF *)((char *)v5 + 8);
            v8 -= 8;
          }
          while (v8);
          v5 = v15;
        }
      }
      if (v5)
      {
        v15 = 0;
        v16 = 0;
        WTF::fastFree(v5, v4);
      }
      v10 = (WebCore::AudioSession *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
      v11 = WebCore::AudioSession::sharedSession(v10);
      if ((*(unsigned int (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v11 + 16))(v11) == 5)
      {
        this = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v1 + 88))(v1);
        if (!(_DWORD)this)
          return this;
        if ((_DWORD)this != 561017449 && (_DWORD)this != 560557684)
          return WebCore::BaseAudioSharedUnit::captureFailed((WebCore::BaseAudioSharedUnit *)v1);
      }
      else
      {
        v13 = qword_1ECE7CD60;
        if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v15) = 0;
          _os_log_error_impl(&dword_1940B8000, v13, OS_LOG_TYPE_ERROR, "BaseAudioSharedUnit::startUnit cannot call startInternal if category is not set to PlayAndRecord", (uint8_t *)&v15, 2u);
        }
      }
      v14 = qword_1ECE7CD60;
      if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v15) = 0;
        _os_log_error_impl(&dword_1940B8000, v14, OS_LOG_TYPE_ERROR, "BaseAudioSharedUnit::startProducingData failed due to not high enough priority, suspending unit", (uint8_t *)&v15, 2u);
      }
      return WebCore::BaseAudioSharedUnit::suspend((WebCore::BaseAudioSharedUnit *)v1);
    }
  }
  return this;
}

uint64_t WebCore::BaseAudioSharedUnit::suspend(WebCore::BaseAudioSharedUnit *this)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v12;
  int v13;
  unsigned int v14;

  v2 = qword_1ECE7CD60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_INFO))
  {
    LOWORD(v12) = 0;
    _os_log_impl(&dword_1940B8000, v2, OS_LOG_TYPE_INFO, "BaseAudioSharedUnit::suspend", (uint8_t *)&v12, 2u);
  }
  *((_BYTE *)this + 36) = 1;
  (*(void (**)(WebCore::BaseAudioSharedUnit *))(*(_QWORD *)this + 96))(this);
  v3 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v3 = off_1E341AD80;
  WTF::ThreadSafeWeakHashSet<WebCore::CoreAudioCaptureSource>::values((unsigned __int8 *)this + 72, v4, (uint64_t)&v12);
  v6 = v12;
  if (v14)
  {
    v7 = 8 * v14;
    do
    {
      v8 = *(_QWORD *)v6;
      v6 = (WTF *)((char *)v6 + 8);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, v8);
      v7 -= 8;
    }
    while (v7);
    v6 = v12;
    if (v14)
    {
      v9 = 8 * v14;
      do
      {
        v10 = *(_QWORD *)v6;
        *(_QWORD *)v6 = 0;
        if (v10)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::CoreAudioCaptureSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v10 + 304));
        v6 = (WTF *)((char *)v6 + 8);
        v9 -= 8;
      }
      while (v9);
      v6 = v12;
    }
  }
  if (v6)
  {
    v12 = 0;
    v13 = 0;
    WTF::fastFree(v6, v5);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return 0;
}

uint64_t WebCore::BaseAudioSharedUnit::captureFailed(WebCore::BaseAudioSharedUnit *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t *v4;
  void *v5;
  void *v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  WTF *v29;
  int v30;
  WTF *v32;
  int v33;
  unsigned int v34;

  v2 = qword_1ECE7CD60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v32) = 0;
    _os_log_error_impl(&dword_1940B8000, v2, OS_LOG_TYPE_ERROR, "BaseAudioSharedUnit::captureFailed", (uint8_t *)&v32, 2u);
  }
  v3 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v3 = off_1E341AD08;
  v4 = (uint64_t *)((char *)this + 72);
  WTF::ThreadSafeWeakHashSet<WebCore::CoreAudioCaptureSource>::values((unsigned __int8 *)this + 72, v5, (uint64_t)&v32);
  v7 = v32;
  if (v34)
  {
    v8 = 8 * v34;
    do
    {
      v9 = *(_QWORD *)v7;
      v7 = (WTF *)((char *)v7 + 8);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, v9);
      v8 -= 8;
    }
    while (v8);
    v7 = v32;
    if (v34)
    {
      v10 = 8 * v34;
      do
      {
        v11 = *(_QWORD *)v7;
        *(_QWORD *)v7 = 0;
        if (v11)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::CoreAudioCaptureSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v11 + 304));
        v7 = (WTF *)((char *)v7 + 8);
        v10 -= 8;
      }
      while (v10);
      v7 = v32;
    }
  }
  if (v7)
  {
    v32 = 0;
    v33 = 0;
    WTF::fastFree(v7, v6);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_DWORD *)this + 10) = 0;
  v13 = (unsigned __int8 *)this + 88;
  if (__ldaxr((unsigned __int8 *)this + 88))
  {
    __clrex();
  }
  else if (!__stxr(1u, v13))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C]((char *)this + 88);
LABEL_18:
  v15 = *v4;
  if (*v4)
  {
    *((_QWORD *)this + 9) = 0;
    WTF::HashTable<WebCore::CoreAudioCaptureSource const*,WTF::KeyValuePair<WebCore::CoreAudioCaptureSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CoreAudioCaptureSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::CoreAudioCaptureSource const*>,WTF::HashMap<WebCore::CoreAudioCaptureSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::CoreAudioCaptureSource const*>,WTF::HashTraits<WebCore::CoreAudioCaptureSource const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CoreAudioCaptureSource const*>>::deallocateTable(v15, v12);
    v16 = *((_QWORD *)this + 9);
    *((_DWORD *)this + 20) = 0;
    if (v16)
    {
      LODWORD(v16) = *(_DWORD *)(v16 - 12);
      if (v16 > 0x7FFFFFFE)
        LODWORD(v16) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v16) = 0;
    *((_DWORD *)this + 20) = 0;
  }
  *((_DWORD *)this + 21) = 2 * v16;
  v17 = __ldxr(v13);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, v13))
LABEL_27:
    WTF::Lock::unlockSlow((WebCore::BaseAudioSharedUnit *)((char *)this + 88));
  v18 = (unsigned __int8 *)this + 112;
  if (__ldaxr((unsigned __int8 *)this + 112))
  {
    __clrex();
  }
  else if (!__stxr(1u, v18))
  {
    goto LABEL_32;
  }
  MEMORY[0x19AEA534C]((char *)this + 112);
LABEL_32:
  if (*((_DWORD *)this + 26))
  {
    v20 = *((unsigned int *)this + 27);
    if ((_DWORD)v20)
    {
      v21 = (uint64_t *)*((_QWORD *)this + 12);
      v22 = 16 * v20;
      while (1)
      {
        v23 = *v21;
        *v21 = 0;
        if (!v23)
          goto LABEL_48;
        if (__ldaxr((unsigned __int8 *)v23))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v23))
        {
          goto LABEL_40;
        }
        MEMORY[0x19AEA534C](v23);
LABEL_40:
        v25 = *(_QWORD *)(v23 + 16) - 1;
        *(_QWORD *)(v23 + 16) = v25;
        if (v25)
        {
          v28 = __ldxr((unsigned __int8 *)v23);
          if (v28 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v23))
              goto LABEL_48;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v23);
          goto LABEL_48;
        }
        v26 = *(_QWORD *)(v23 + 8);
        v27 = __ldxr((unsigned __int8 *)v23);
        if (v27 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v23))
          {
            if (!v26)
              goto LABEL_47;
            goto LABEL_48;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v23);
        if (!v26)
LABEL_47:
          WTF::fastFree((WTF *)v23, v12);
LABEL_48:
        v21 += 2;
        v22 -= 16;
        if (!v22)
        {
          *((_DWORD *)this + 27) = 0;
          break;
        }
      }
    }
    v29 = (WTF *)*((_QWORD *)this + 12);
    if (v29)
    {
      *((_QWORD *)this + 12) = 0;
      *((_DWORD *)this + 26) = 0;
      WTF::fastFree(v29, v12);
    }
  }
  v30 = __ldxr(v18);
  if (v30 == 1)
  {
    if (!__stlxr(0, v18))
      goto LABEL_62;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WebCore::BaseAudioSharedUnit *)((char *)this + 112));
LABEL_62:
  (*(void (**)(WebCore::BaseAudioSharedUnit *))(*(_QWORD *)this + 96))(this);
  return (*(uint64_t (**)(WebCore::BaseAudioSharedUnit *))(*(_QWORD *)this + 80))(this);
}

uint64_t WebCore::BaseAudioSharedUnit::prepareForNewCapture(WebCore::BaseAudioSharedUnit *this)
{
  uint64_t result;
  NSObject *v3;
  uint8_t v4[16];

  *((_QWORD *)this + 3) = 0x3FF0000000000000;
  result = (*(uint64_t (**)(WebCore::BaseAudioSharedUnit *))(*(_QWORD *)this + 112))(this);
  if (*((_BYTE *)this + 36))
  {
    *((_BYTE *)this + 36) = 0;
    if (*((_DWORD *)this + 10))
    {
      v3 = qword_1ECE7CD60;
      if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v4 = 0;
        _os_log_error_impl(&dword_1940B8000, v3, OS_LOG_TYPE_ERROR, "BaseAudioSharedUnit::prepareForNewCapture, notifying suspended sources of capture failure", v4, 2u);
      }
      return WebCore::BaseAudioSharedUnit::captureFailed(this);
    }
  }
  return result;
}

unsigned int *WebCore::BaseAudioSharedUnit::setCaptureDevice(uint64_t a1, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  int v3;
  const WTF::StringImpl **v6;
  WTF **v7;
  int v8;
  WTF::StringImpl *v9;
  int v10;
  int v11;
  _BOOL4 v12;
  const WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t *v15;
  uint64_t (***v16)(_QWORD);
  unsigned int *result;
  WTF::StringImpl *v18;
  uint64_t v19;
  unsigned int *v20;
  int v21;
  const WTF::StringImpl *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  _DWORD *v27;
  _DWORD *v28;
  _DWORD *v29;
  char v30;
  unsigned int *v31;
  unsigned int v32;
  int v33;

  v3 = (int)a3;
  v6 = (const WTF::StringImpl **)(a1 + 48);
  if (*(_BYTE *)(a1 + 64))
    v7 = (WTF **)(a1 + 48);
  else
    v7 = (WTF **)MEMORY[0x1E0CBF738];
  v8 = WTF::equal(*v7, *a2, a3);
  v10 = *(unsigned __int8 *)(a1 + 64);
  if (v8)
  {
    if (*(_BYTE *)(a1 + 64))
      v11 = *(_DWORD *)(a1 + 56);
    else
      v11 = 0;
    v12 = v11 != v3;
  }
  else
  {
    v12 = 1;
  }
  v13 = *a2;
  *a2 = 0;
  if (v10)
  {
    v14 = *v6;
    *v6 = v13;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v9);
      else
        *(_DWORD *)v14 -= 2;
    }
    *(_DWORD *)(a1 + 56) = v3;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = v13;
    *(_DWORD *)(a1 + 56) = v3;
    *(_BYTE *)(a1 + 64) = 1;
  }
  {
    WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
  }
  v15 = (uint64_t *)qword_1ECE91218;
  if (!qword_1ECE91218)
    v15 = WebCore::CoreAudioCaptureSourceFactory::singleton(0);
  v16 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(uint64_t *))(*v15 + 24))(v15);
  result = (unsigned int *)(**v16)(v16);
  v19 = result[3];
  v31 = 0;
  v32 = 0;
  v33 = v19;
  if (!(_DWORD)v19)
  {
    v30 = 0;
    goto LABEL_34;
  }
  if (v19 >= 0x6666667)
  {
    __break(0xC471u);
LABEL_39:
    __break(1u);
    return result;
  }
  v20 = result;
  v21 = 40 * v19;
  result = (unsigned int *)WTF::fastMalloc((WTF *)(40 * v19));
  v32 = (v21 & 0xFFFFFFF8) / 0x28;
  v31 = result;
  v23 = v20[3];
  if (v23)
  {
    v24 = *(_QWORD *)v20;
    v25 = *(_QWORD *)v20 + 40 * v23;
    v26 = result;
    do
    {
      v27 = *(_DWORD **)v24;
      if (*(_QWORD *)v24)
        *v27 += 2;
      *(_QWORD *)v26 = v27;
      *((_BYTE *)v26 + 8) = *(_BYTE *)(v24 + 8);
      v28 = *(_DWORD **)(v24 + 16);
      if (v28)
        *v28 += 2;
      *((_QWORD *)v26 + 2) = v28;
      v29 = *(_DWORD **)(v24 + 24);
      if (v29)
        *v29 += 2;
      *((_QWORD *)v26 + 3) = v29;
      v26[8] = *(_DWORD *)(v24 + 32);
      v24 += 40;
      v26 += 10;
    }
    while (v24 != v25);
  }
  if (!*(_BYTE *)(a1 + 64))
    goto LABEL_39;
  v30 = WTF::equal(*(WTF **)result, *v6, v22);
LABEL_34:
  *(_BYTE *)(a1 + 113) = v30;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  return WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v31, v18);
}

unsigned int *WebCore::BaseAudioSharedUnit::devicesChanged(WebCore::BaseAudioSharedUnit *this)
{
  uint64_t *v2;
  uint64_t (***v3)(_QWORD);
  unsigned int *result;
  WTF::StringImpl *v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  int **v20;
  int *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  const char *v27;
  NSObject *v28;
  uint8_t v29[16];
  uint64_t v30;
  unsigned int v31;
  int v32;

  {
    WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
  }
  v2 = (uint64_t *)qword_1ECE91218;
  if (!qword_1ECE91218)
    v2 = WebCore::CoreAudioCaptureSourceFactory::singleton(0);
  v3 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(uint64_t *))(*v2 + 24))(v2);
  result = (unsigned int *)(**v3)(v3);
  v7 = result[3];
  v30 = 0;
  v31 = 0;
  v32 = v7;
  if (!(_DWORD)v7)
  {
    v10 = 0;
    goto LABEL_18;
  }
  if (v7 < 0x6666667)
  {
    v8 = (uint64_t)result;
    v9 = WTF::fastMalloc((WTF *)(40 * v7));
    v10 = v9;
    v31 = 40 * (int)v7 / 0x28u;
    v30 = v9;
    v11 = *(_DWORD *)(v8 + 12);
    if (v11)
    {
      v12 = 0;
      v13 = *(_QWORD *)v8;
      v14 = *(_QWORD *)v8 + 40 * v11;
      do
      {
        v15 = v13 + v12;
        v16 = *(_DWORD **)(v13 + v12);
        if (v16)
          *v16 += 2;
        v17 = v9 + v12;
        *(_QWORD *)v17 = v16;
        *(_BYTE *)(v17 + 8) = *(_BYTE *)(v15 + 8);
        v18 = *(_DWORD **)(v15 + 16);
        if (v18)
          *v18 += 2;
        *(_QWORD *)(v17 + 16) = v18;
        v19 = *(_DWORD **)(v15 + 24);
        if (v19)
          *v19 += 2;
        *(_QWORD *)(v17 + 24) = v19;
        *(_DWORD *)(v17 + 32) = *(_DWORD *)(v15 + 32);
        v12 += 40;
      }
      while (v15 + 40 != v14);
    }
LABEL_18:
    v20 = (int **)((char *)this + 48);
    if (!*((_BYTE *)this + 64))
      v20 = (int **)MEMORY[0x1E0CBF738];
    v21 = *v20;
    if (!*v20)
      return WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v30, v5);
    v22 = *v21;
    v23 = v21[1];
    *v21 += 2;
    if (!v23)
    {
LABEL_38:
      if (v22)
        *v21 = v22;
      else
        WTF::StringImpl::destroy((WTF::StringImpl *)v21, v5);
      return WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v30, v5);
    }
    if ((_DWORD)v7)
    {
      v24 = 0;
      v25 = 40 * v7;
      do
      {
        if (WTF::equal((WTF *)v21, *(const WTF::StringImpl **)(v10 + v24), v6))
        {
          (*(void (**)(WebCore::BaseAudioSharedUnit *, _QWORD))(*(_QWORD *)this + 136))(this, *((unsigned int *)this + 11));
          goto LABEL_37;
        }
        v24 += 40;
      }
      while (v25 != v24);
      if (!*((_DWORD *)this + 10))
        goto LABEL_36;
      if (*((_BYTE *)this + 113)
        && (*(unsigned int (**)(WebCore::BaseAudioSharedUnit *, uint64_t))(*(_QWORD *)this + 144))(this, v10))
      {
        v26 = qword_1ECE7CD60;
        if (!os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
          goto LABEL_37;
        *(_WORD *)v29 = 0;
        v27 = "BaseAudioSharedUnit::devicesChanged - migrating to new default device";
        goto LABEL_43;
      }
    }
    else if (!*((_DWORD *)this + 10))
    {
LABEL_36:
      v26 = qword_1ECE7CD60;
      if (!os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
      {
LABEL_37:
        v22 = *v21 - 2;
        goto LABEL_38;
      }
      *(_WORD *)v29 = 0;
      v27 = "BaseAudioSharedUnit::devicesChanged - returning early as not capturing";
LABEL_43:
      _os_log_error_impl(&dword_1940B8000, v26, OS_LOG_TYPE_ERROR, v27, v29, 2u);
      goto LABEL_37;
    }
    v28 = qword_1ECE7CD60;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v29 = 0;
      _os_log_error_impl(&dword_1940B8000, v28, OS_LOG_TYPE_ERROR, "BaseAudioSharedUnit::devicesChanged - failing capture, capturing device is missing", v29, 2u);
    }
    WebCore::BaseAudioSharedUnit::captureFailed(this);
    goto LABEL_37;
  }
  __break(0xC471u);
  return result;
}

_DWORD *WebCore::BaseAudioSharedUnit::stopProducingData(_DWORD *this)
{
  _QWORD *v1;
  int v2;
  int v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  WTF *v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;

  v1 = this;
  v2 = this[10];
  if (!v2 || (v3 = v2 - 1, (this[10] = v3) == 0))
  {
    if (*((_BYTE *)this + 38))
    {
      *((_BYTE *)this + 114) = 0;
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 128))(this);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)this + 96))(this);
    (*(void (**)(_QWORD *))(*v1 + 80))(v1);
    v17 = 0;
    v18 = 0;
    v6 = (WTF *)v1[15];
    v5 = (uint64_t)(v1 + 15);
    v4 = v6;
    v7 = *(unsigned int *)(v5 + 12);
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v5, &v17);
    if (HIDWORD(v18))
    {
      v14 = v17;
      v15 = 8 * HIDWORD(v18);
      do
      {
        v16 = *(_QWORD *)v14;
        *(_QWORD *)v14 = 0;
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        v14 = (WTF *)((char *)v14 + 8);
        v15 -= 8;
      }
      while (v15);
    }
    this = v17;
    if (v17)
    {
      v17 = 0;
      LODWORD(v18) = 0;
      this = (_DWORD *)WTF::fastFree((WTF *)this, v8);
      if ((_DWORD)v7)
        goto LABEL_8;
    }
    else if ((_DWORD)v7)
    {
LABEL_8:
      v9 = 8 * v7;
      v10 = 8 * v7;
      v11 = v4;
      do
      {
        v12 = *(_QWORD *)v11;
        v11 = (WTF *)((char *)v11 + 8);
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        v10 -= 8;
      }
      while (v10);
      v13 = v4;
      do
      {
        this = *(_DWORD **)v13;
        *(_QWORD *)v13 = 0;
        if (this)
          this = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 8))(this);
        v13 = (WTF *)((char *)v13 + 8);
        v9 -= 8;
      }
      while (v9);
    }
    if (v4)
      return (_DWORD *)WTF::fastFree(v4, v8);
  }
  return this;
}

uint64_t WebCore::BaseAudioSharedUnit::audioSamplesAvailable(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  int v19;

  v9 = result;
  v10 = (unsigned __int8 *)(result + 112);
  if (__ldaxr((unsigned __int8 *)(result + 112)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](result + 112);
LABEL_5:
  v12 = *(unsigned int *)(v9 + 108);
  if ((_DWORD)v12)
  {
    v13 = 16 * v12;
    v14 = (uint64_t *)(*(_QWORD *)(v9 + 96) + 8);
    do
    {
      v15 = *(v14 - 1);
      if (!v15)
        goto LABEL_24;
      v16 = *v14;
      if (__ldaxr((unsigned __int8 *)v15))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v15))
      {
        goto LABEL_12;
      }
      result = MEMORY[0x19AEA534C](v15);
LABEL_12:
      if (*(_QWORD *)(v15 + 24))
        ++*(_QWORD *)(v15 + 8);
      else
        v16 = 0;
      v18 = __ldxr((unsigned __int8 *)v15);
      if (v18 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v15))
        {
          if (v16)
            goto LABEL_21;
          goto LABEL_24;
        }
      }
      else
      {
        __clrex();
      }
      result = WTF::Lock::unlockSlow((WTF::Lock *)v15);
      if (v16)
      {
LABEL_21:
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 64))(v16))
          WebCore::RealtimeMediaSource::audioSamplesAvailable((_BYTE *)v16, a2, a3, a4, a5);
        result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::CoreAudioCaptureSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v16 + 304));
      }
LABEL_24:
      v14 += 2;
      v13 -= 16;
    }
    while (v13);
  }
  v19 = __ldxr(v10);
  if (v19 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v10);
  }
  if (__stlxr(0, v10))
    return WTF::Lock::unlockSlow((WTF::Lock *)v10);
  return result;
}

uint64_t WebCore::BaseAudioSharedUnit::handleNewCurrentMicrophoneDevice(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  void *v5;
  void *v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v13;
  int v14;
  unsigned int v15;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E341ADA8;
  v4[1] = a2;
  WTF::ThreadSafeWeakHashSet<WebCore::CoreAudioCaptureSource>::values((unsigned __int8 *)(a1 + 72), v5, (uint64_t)&v13);
  v7 = v13;
  if (v15)
  {
    v8 = 8 * v15;
    do
    {
      v9 = *(_QWORD *)v7;
      v7 = (WTF *)((char *)v7 + 8);
      (*(void (**)(_QWORD *, uint64_t))(*v4 + 16))(v4, v9);
      v8 -= 8;
    }
    while (v8);
    v7 = v13;
    if (v15)
    {
      v10 = 8 * v15;
      do
      {
        v11 = *(_QWORD *)v7;
        *(_QWORD *)v7 = 0;
        if (v11)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::CoreAudioCaptureSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v11 + 304));
        v7 = (WTF *)((char *)v7 + 8);
        v10 -= 8;
      }
      while (v10);
      v7 = v13;
    }
  }
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    WTF::fastFree(v7, v6);
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
}

uint64_t WebCore::LibWebRTCLogSink::OnLogMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), a3, a2);
}

uint64_t WebCore::LibWebRTCLogSink::OnLogMessage(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 1, a2);
}

void WebCore::WebRTCProvider::~WebRTCProvider(WebCore::WebRTCProvider *this, WTF::StringImpl *a2)
{
  *(_QWORD *)this = off_1E341A7A8;
  if (*((_BYTE *)this + 160))
    WebCore::RTCRtpCapabilities::~RTCRtpCapabilities((WebCore::WebRTCProvider *)((char *)this + 128), a2);
  if (*((_BYTE *)this + 120))
    WebCore::RTCRtpCapabilities::~RTCRtpCapabilities((WebCore::WebRTCProvider *)((char *)this + 88), a2);
  if (*((_BYTE *)this + 80))
    WebCore::RTCRtpCapabilities::~RTCRtpCapabilities((WebCore::WebRTCProvider *)((char *)this + 48), a2);
  if (*((_BYTE *)this + 40))
    WebCore::RTCRtpCapabilities::~RTCRtpCapabilities((WebCore::WebRTCProvider *)((char *)this + 8), a2);
}

{
  *(_QWORD *)this = off_1E341A7A8;
  if (*((_BYTE *)this + 160))
    WebCore::RTCRtpCapabilities::~RTCRtpCapabilities((WebCore::WebRTCProvider *)((char *)this + 128), a2);
  if (*((_BYTE *)this + 120))
    WebCore::RTCRtpCapabilities::~RTCRtpCapabilities((WebCore::WebRTCProvider *)((char *)this + 88), a2);
  if (*((_BYTE *)this + 80))
    WebCore::RTCRtpCapabilities::~RTCRtpCapabilities((WebCore::WebRTCProvider *)((char *)this + 48), a2);
  if (*((_BYTE *)this + 40))
    WebCore::RTCRtpCapabilities::~RTCRtpCapabilities((WebCore::WebRTCProvider *)((char *)this + 8), a2);
  WTF::fastFree(this, a2);
}

void WebCore::VideoFrameLibWebRTC::~VideoFrameLibWebRTC(WebCore::VideoFrameLibWebRTC *this)
{
  const void *v2;
  WebCore::VideoFrameLibWebRTC *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (const void *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v2)
    CFRelease(v2);
  v3 = (WebCore::VideoFrameLibWebRTC *)*((_QWORD *)this + 12);
  if (v3 == (WebCore::VideoFrameLibWebRTC *)((char *)this + 72))
  {
    v4 = 4;
    v3 = (WebCore::VideoFrameLibWebRTC *)((char *)this + 72);
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_8:
  v5 = *((_QWORD *)this + 6);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

void WebCore::VideoFrameLibWebRTC::~VideoFrameLibWebRTC(WebCore::VideoFrameLibWebRTC *this, void *a2)
{
  const void *v3;
  WebCore::VideoFrameLibWebRTC *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (const void *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WebCore::VideoFrameLibWebRTC *)*((_QWORD *)this + 12);
  if (v4 == (WebCore::VideoFrameLibWebRTC *)((char *)this + 72))
  {
    v5 = 4;
    v4 = (WebCore::VideoFrameLibWebRTC *)((char *)this + 72);
  }
  else
  {
    if (!v4)
      goto LABEL_8;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_8:
  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  WTF::fastFree(this, a2);
}

float WebCore::VideoFrameLibWebRTC::presentationSize(WebCore::VideoFrameLibWebRTC *this)
{
  return *((float *)this + 14);
}

uint64_t WebCore::VideoFrameLibWebRTC::pixelFormat(WebCore::VideoFrameLibWebRTC *this)
{
  return *((unsigned int *)this + 16);
}

uint64_t WebCore::BaseAudioSharedUnit::prewarmAudioUnitCreation(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t WebCore::BaseAudioSharedUnit::actualSampleRate(WebCore::BaseAudioSharedUnit *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t WebCore::BaseAudioSharedUnit::migrateToNewDefaultDevice()
{
  return 0;
}

void webrtc::DtmfSenderObserverInterface::~DtmfSenderObserverInterface(webrtc::DtmfSenderObserverInterface *this)
{
  JUMPOUT(0x19AEA7644);
}

_QWORD *std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::getRTCLogSink(void)::$_0 &&>>()
{
  _QWORD *result;

  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E341A8C8;
  qword_1ECE84098 = (uint64_t)off_1E341A558;
  unk_1ECE840A0 = 0;
  qword_1ECE840B0 = (uint64_t)result;
  LOBYTE(dword_1ECE840B8) = 0;
  byte_1ECE840BC = 0;
  return result;
}

void _ZN3WTF6Detail15CallableWrapperIZZN7WebCoreL13getRTCLogSinkEvENK3__0clEvEUlOT_OT0_E_vJN3rtc15LoggingSeverityERKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEE4callESA_SJ_(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t *v3;
  NSObject *v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (*((char *)a3 + 23) >= 0)
    v3 = a3;
  else
    v3 = (uint64_t *)*a3;
  v4 = qword_1ECE7CD60;
  if (a2 == 3)
  {
    if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
    {
      v5 = 136446210;
      v6 = v3;
      _os_log_error_impl(&dword_1940B8000, v4, OS_LOG_TYPE_ERROR, "LibWebRTC error: %{public}s", (uint8_t *)&v5, 0xCu);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 136446210;
    v6 = v3;
    _os_log_impl(&dword_1940B8000, v4, OS_LOG_TYPE_DEFAULT, "LibWebRTC message: %{public}s", (uint8_t *)&v5, 0xCu);
  }
}

void WebCore::BasicPacketSocketFactory::~BasicPacketSocketFactory(WebCore::BasicPacketSocketFactory *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E341A8F0;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void WebCore::BasicPacketSocketFactory::~BasicPacketSocketFactory(WebCore::BasicPacketSocketFactory *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = off_1E341A8F0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::fastFree(this, a2);
}

uint64_t WebCore::BasicPacketSocketFactory::CreateUdpSocket(WebCore::BasicPacketSocketFactory *this, const rtc::SocketAddress *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  void *__p;
  char v11;

  v6 = *((_QWORD *)this + 2);
  v7 = *((unsigned __int8 *)this + 8);
  rtc::SocketAddress::SocketAddress();
  if (v7)
    rtc::SocketAddress::SetIP();
  v8 = (*(uint64_t (**)(uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, &__p, a3, a4);
  if (v11 < 0)
    operator delete(__p);
  return v8;
}

uint64_t WebCore::BasicPacketSocketFactory::CreateServerTcpSocket()
{
  return 0;
}

uint64_t WebCore::BasicPacketSocketFactory::CreateClientTcpSocket(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  void *__p;
  char v11;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(unsigned __int8 *)(a1 + 8);
  rtc::SocketAddress::SocketAddress();
  if (v7)
    rtc::SocketAddress::SetIP();
  v8 = (*(uint64_t (**)(uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, &__p, a3, a4);
  if (v11 < 0)
    operator delete(__p);
  return v8;
}

uint64_t WebCore::BasicPacketSocketFactory::CreateAsyncDnsResolver(WebCore::BasicPacketSocketFactory *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
}

uint64_t std::construct_at[abi:sn180100]<WebCore::RTCRtpCapabilities,WebCore::RTCRtpCapabilities const&,WebCore::RTCRtpCapabilities*>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _DWORD **v15;
  uint64_t v16;
  _DWORD *v17;

  if (!a1)
  {
    __break(1u);
    goto LABEL_20;
  }
  v4 = *((unsigned int *)a2 + 3);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v4;
  if ((_DWORD)v4)
  {
    if (v4 >> 27)
      goto LABEL_20;
    v5 = WTF::fastMalloc((WTF *)(32 * v4));
    *(_DWORD *)(a1 + 8) = v4;
    *(_QWORD *)a1 = v5;
    v6 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v6)
    {
      v7 = *a2;
      v8 = *a2 + 32 * v6;
      do
      {
        v9 = *(_DWORD **)v7;
        if (*(_QWORD *)v7)
          *v9 += 2;
        *(_QWORD *)v5 = v9;
        v10 = *(_QWORD *)(v7 + 8);
        *(_DWORD *)(v5 + 15) = *(_DWORD *)(v7 + 15);
        *(_QWORD *)(v5 + 8) = v10;
        v11 = *(_DWORD **)(v7 + 24);
        if (v11)
          *v11 += 2;
        *(_QWORD *)(v5 + 24) = v11;
        v7 += 32;
        v5 += 32;
      }
      while (v7 != v8);
    }
  }
  v12 = *((unsigned int *)a2 + 7);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = v12;
  if (!(_DWORD)v12)
    return a1;
  if (v12 >> 29)
  {
LABEL_20:
    __break(0xC471u);
    JUMPOUT(0x1962BA6A0);
  }
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v12));
  *(_DWORD *)(a1 + 24) = v12;
  *(_QWORD *)(a1 + 16) = v13;
  v14 = *((unsigned int *)a2 + 7);
  if ((_DWORD)v14)
  {
    v15 = (_DWORD **)a2[2];
    v16 = 8 * v14;
    do
    {
      v17 = *v15;
      if (*v15)
        *v17 += 2;
      *v13++ = v17;
      ++v15;
      v16 -= 8;
    }
    while (v16);
  }
  return a1;
}

uint64_t WTF::HashTable<WebCore::CoreAudioCaptureSource const*,WTF::KeyValuePair<WebCore::CoreAudioCaptureSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CoreAudioCaptureSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::CoreAudioCaptureSource const*>,WTF::HashMap<WebCore::CoreAudioCaptureSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::CoreAudioCaptureSource const*>,WTF::HashTraits<WebCore::CoreAudioCaptureSource const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CoreAudioCaptureSource const*>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v4 - 1) == -1)
        goto LABEL_17;
      v5 = *v4;
      *v4 = 0;
      if (!v5)
        goto LABEL_17;
      if (__ldaxr((unsigned __int8 *)v5))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v5))
      {
        goto LABEL_9;
      }
      MEMORY[0x19AEA534C](v5);
LABEL_9:
      v7 = *(_QWORD *)(v5 + 16) - 1;
      *(_QWORD *)(v5 + 16) = v7;
      if (v7)
      {
        v10 = __ldxr((unsigned __int8 *)v5);
        if (v10 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v5))
            goto LABEL_17;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v5);
        goto LABEL_17;
      }
      v8 = *(_QWORD *)(v5 + 8);
      v9 = __ldxr((unsigned __int8 *)v5);
      if (v9 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v5))
        {
          if (!v8)
            goto LABEL_16;
          goto LABEL_17;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v5);
      if (!v8)
LABEL_16:
        WTF::fastFree((WTF *)v5, a2);
LABEL_17:
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCDTMFSenderBackend::OnToneChange(std::string const&,std::string const&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E341A930;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCDTMFSenderBackend::OnToneChange(std::string const&,std::string const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E341A930;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCDTMFSenderBackend::OnToneChange(std::string const&,std::string const&)::$_0,void>::call(_QWORD *result)
{
  uint64_t v1;

  v1 = result[2];
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    result = *(_QWORD **)(result[1] + 32);
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
  }
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,WTF::Function<void ()(void)> &&>(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
}

uint64_t absl::internal_any_invocable::LocalManagerNontrivial<WTF::Function<void ()(void)>>(char a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t result;

  if ((a1 & 1) == 0)
  {
    v3 = *a2;
    *a2 = 0;
    *a3 = v3;
  }
  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t rtc::RefCountedObject<WebCore::LibWebRTCAudioModule>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 80);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<WebCore::LibWebRTCAudioModule>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 20;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

_QWORD *rtc::RefCountedObject<WebCore::LibWebRTCAudioModule>::~RefCountedObject(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_1E3419D48;
  v2 = a1[9];
  a1[9] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  return a1;
}

uint64_t rtc::RefCountedObject<WebCore::LibWebRTCAudioModule>::~RefCountedObject(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &unk_1E3419D48;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
  return WTF::fastFree(this, a2);
}

BOOL rtc::RefCountedObject<WebCore::LibWebRTCAudioModule>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 80));
  return v1 == 1;
}

uint64_t rtc::RefCountedObject<webrtc::PeerConnectionFactoryProxyWithInternal<webrtc::PeerConnectionFactoryInterface>>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 32);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::PeerConnectionFactoryProxyWithInternal<webrtc::PeerConnectionFactoryInterface>>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 8;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

void rtc::RefCountedObject<webrtc::PeerConnectionFactoryProxyWithInternal<webrtc::PeerConnectionFactoryInterface>>::~RefCountedObject(_QWORD *a1)
{
  webrtc::PeerConnectionFactoryProxyWithInternal<webrtc::PeerConnectionFactoryInterface>::~PeerConnectionFactoryProxyWithInternal(a1);
  JUMPOUT(0x19AEA7644);
}

void webrtc::PeerConnectionFactoryProxyWithInternal<webrtc::PeerConnectionFactoryInterface>::SetOptions(uint64_t a1, uint64_t a2)
{
  rtc::Thread *v3;
  void (*v4)(_QWORD *, uint64_t);
  _QWORD *v5;
  char v6;
  char v7;
  __n128 v8;
  __n128 (*v9)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v10)(uint64_t *);
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v14[16];

  v14[15] = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)(a1 + 24);
  v12 = xmmword_1969F91D0;
  v13 = a2;
  rtc::Event::Event((rtc::Event *)v14);
  v3 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (void (*)(_QWORD *, uint64_t))v12;
    v5 = (_QWORD *)(v11 + (*((uint64_t *)&v12 + 1) >> 1));
    if ((BYTE8(v12) & 1) != 0)
      v4 = *(void (**)(_QWORD *, uint64_t))(*v5 + v12);
    v4(v5, v13);
  }
  else
  {
    v8.n128_u64[0] = (unint64_t)&v11;
    v9 = absl::internal_any_invocable::LocalManagerTrivial;
    v10 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionFactoryInterface,void,webrtc::PeerConnectionFactoryInterface::Options const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v8, &v7, &v6);
    v9(1, &v8, &v8);
    rtc::Event::Wait();
  }
  rtc::Event::~Event((rtc::Event *)v14);
}

void webrtc::PeerConnectionFactoryProxyWithInternal<webrtc::PeerConnectionFactoryInterface>::CreatePeerConnectionOrError(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  rtc::Thread *v6;
  int v7;
  uint64_t v8;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  int v16;
  __int128 __p;
  _BYTE v18[15];
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[16];

  v23[15] = *MEMORY[0x1E0C80C00];
  v14 = *(_QWORD *)(a1 + 24);
  v15 = xmmword_1969F91E0;
  v16 = 10;
  v18[14] = 0;
  *(_QWORD *)v18 = 0;
  __p = 0uLL;
  *(_QWORD *)&v18[5] = 0;
  LOBYTE(v19) = 0;
  v20 = 0;
  v21 = a2;
  v22 = a3;
  rtc::Event::Event((rtc::Event *)v23);
  v6 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v6))
  {
    webrtc::ReturnType<webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::PeerConnectionInterface>>>::Invoke<webrtc::PeerConnectionFactoryInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::PeerConnectionInterface>> (webrtc::PeerConnectionFactoryInterface::*)(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies),webrtc::PeerConnectionInterface::RTCConfiguration const,webrtc::PeerConnectionDependencies>((uint64_t)&v16, v14, (void (*)(uint64_t *__return_ptr, _QWORD *, uint64_t, _BYTE *))v15, *((uint64_t *)&v15 + 1), v21);
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionFactoryInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::PeerConnectionInterface>>,webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v6 + 8))(v6, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    rtc::Event::Wait();
  }
  v7 = *(_DWORD *)&v18[8];
  *(_DWORD *)a4 = v16;
  *(_QWORD *)(a4 + 24) = *(_QWORD *)v18;
  *(_OWORD *)(a4 + 8) = __p;
  __p = 0uLL;
  *(_QWORD *)v18 = 0;
  *(_DWORD *)(a4 + 32) = v7;
  *(_DWORD *)(a4 + 35) = *(_DWORD *)&v18[11];
  *(_BYTE *)(a4 + 40) = 0;
  *(_BYTE *)(a4 + 48) = 0;
  if (v20)
  {
    v8 = v19;
    v19 = 0;
    *(_QWORD *)(a4 + 40) = v8;
    *(_BYTE *)(a4 + 48) = 1;
  }
  rtc::Event::~Event((rtc::Event *)v23);
  if (v20 && v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  if ((v18[7] & 0x80000000) != 0)
    operator delete((void *)__p);
}

uint64_t webrtc::PeerConnectionFactoryProxyWithInternal<webrtc::PeerConnectionFactoryInterface>::GetRtpSenderCapabilities@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int v6;
  uint64_t v7;
  __int128 v8;
  _QWORD v9[10];
  _QWORD v10[16];

  v10[15] = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = *(_QWORD *)(a1 + 24);
  v8 = xmmword_1969F91F0;
  webrtc::RtpCapabilities::RtpCapabilities((webrtc::RtpCapabilities *)v9);
  v9[9] = &v6;
  rtc::Event::Event((rtc::Event *)v10);
  webrtc::ConstMethodCall<webrtc::PeerConnectionFactoryInterface,webrtc::RtpCapabilities,cricket::MediaType>::Marshal(a3, (unint64_t)&v7, *(rtc::Thread **)(a1 + 8));
  rtc::Event::~Event((rtc::Event *)v10);
  return MEMORY[0x19AEA5BBC](v9);
}

uint64_t webrtc::PeerConnectionFactoryProxyWithInternal<webrtc::PeerConnectionFactoryInterface>::GetRtpReceiverCapabilities@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int v6;
  uint64_t v7;
  __int128 v8;
  _QWORD v9[10];
  _QWORD v10[16];

  v10[15] = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = *(_QWORD *)(a1 + 24);
  v8 = xmmword_1969F9200;
  webrtc::RtpCapabilities::RtpCapabilities((webrtc::RtpCapabilities *)v9);
  v9[9] = &v6;
  rtc::Event::Event((rtc::Event *)v10);
  webrtc::ConstMethodCall<webrtc::PeerConnectionFactoryInterface,webrtc::RtpCapabilities,cricket::MediaType>::Marshal(a3, (unint64_t)&v7, *(rtc::Thread **)(a1 + 8));
  rtc::Event::~Event((rtc::Event *)v10);
  return MEMORY[0x19AEA5BBC](v9);
}

uint64_t webrtc::PeerConnectionFactoryProxyWithInternal<webrtc::PeerConnectionFactoryInterface>::CreateLocalMediaStream@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  rtc::Thread *v5;
  void (*v6)(__n128 *__return_ptr, _QWORD *, uint64_t);
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char v12;
  char v13;
  __n128 v14;
  __n128 (*v15)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v16)(uint64_t *);
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[16];

  v21[15] = *MEMORY[0x1E0C80C00];
  v17 = *(_QWORD *)(a1 + 24);
  v18 = xmmword_1969F9210;
  v19 = 0;
  v20 = a2;
  rtc::Event::Event((rtc::Event *)v21);
  v5 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v5))
  {
    v6 = (void (*)(__n128 *__return_ptr, _QWORD *, uint64_t))v18;
    v7 = (_QWORD *)(v17 + (*((uint64_t *)&v18 + 1) >> 1));
    if ((BYTE8(v18) & 1) != 0)
      v6 = *(void (**)(__n128 *__return_ptr, _QWORD *, uint64_t))(*v7 + v18);
    v6(&v14, v7, v20);
    v8 = v14.n128_u64[0];
    v14.n128_u64[0] = 0;
    v9 = v19;
    v19 = v8;
    if (v9)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      if (v14.n128_u64[0])
        (*(void (**)(unint64_t))(*(_QWORD *)v14.n128_u64[0] + 8))(v14.n128_u64[0]);
    }
  }
  else
  {
    v14.n128_u64[0] = (unint64_t)&v17;
    v15 = absl::internal_any_invocable::LocalManagerTrivial;
    v16 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionFactoryInterface,webrtc::scoped_refptr<webrtc::MediaStreamInterface>,std::string const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v5 + 8))(v5, &v14, &v13, &v12);
    v15(1, &v14, &v14);
    rtc::Event::Wait();
  }
  v10 = v19;
  v19 = 0;
  *a3 = v10;
  rtc::Event::~Event((rtc::Event *)v21);
  result = v19;
  if (v19)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  return result;
}

uint64_t webrtc::PeerConnectionFactoryProxyWithInternal<webrtc::PeerConnectionFactoryInterface>::CreateAudioSource@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  rtc::Thread *v5;
  void (*v6)(__n128 *__return_ptr, _QWORD *, uint64_t);
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char v12;
  char v13;
  __n128 v14;
  __n128 (*v15)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v16)(uint64_t *);
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[16];

  v21[15] = *MEMORY[0x1E0C80C00];
  v17 = *(_QWORD *)(a1 + 24);
  v18 = xmmword_1969F9220;
  v19 = 0;
  v20 = a2;
  rtc::Event::Event((rtc::Event *)v21);
  v5 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v5))
  {
    v6 = (void (*)(__n128 *__return_ptr, _QWORD *, uint64_t))v18;
    v7 = (_QWORD *)(v17 + (*((uint64_t *)&v18 + 1) >> 1));
    if ((BYTE8(v18) & 1) != 0)
      v6 = *(void (**)(__n128 *__return_ptr, _QWORD *, uint64_t))(*v7 + v18);
    v6(&v14, v7, v20);
    v8 = v14.n128_u64[0];
    v14.n128_u64[0] = 0;
    v9 = v19;
    v19 = v8;
    if (v9)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      if (v14.n128_u64[0])
        (*(void (**)(unint64_t))(*(_QWORD *)v14.n128_u64[0] + 8))(v14.n128_u64[0]);
    }
  }
  else
  {
    v14.n128_u64[0] = (unint64_t)&v17;
    v15 = absl::internal_any_invocable::LocalManagerTrivial;
    v16 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionFactoryInterface,webrtc::scoped_refptr<webrtc::AudioSourceInterface>,cricket::AudioOptions const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v5 + 8))(v5, &v14, &v13, &v12);
    v15(1, &v14, &v14);
    rtc::Event::Wait();
  }
  v10 = v19;
  v19 = 0;
  *a3 = v10;
  rtc::Event::~Event((rtc::Event *)v21);
  result = v19;
  if (v19)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  return result;
}

uint64_t webrtc::PeerConnectionFactoryProxyWithInternal<webrtc::PeerConnectionFactoryInterface>::CreateVideoTrack@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  rtc::Thread *v7;
  void (*v8)(__n128 *__return_ptr, _QWORD *, uint64_t *, _QWORD, _QWORD);
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD v16[2];
  char v17;
  uint64_t v18;
  __n128 v19;
  __n128 (*v20)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v21)(uint64_t *);
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  _QWORD v27[16];

  v27[15] = *MEMORY[0x1E0C80C00];
  v16[0] = a3;
  v16[1] = a4;
  v22 = *(_QWORD *)(a1 + 24);
  v23 = xmmword_1969F9230;
  v24 = 0;
  v25 = a2;
  v26 = v16;
  rtc::Event::Event((rtc::Event *)v27);
  v7 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v7))
  {
    v8 = (void (*)(__n128 *__return_ptr, _QWORD *, uint64_t *, _QWORD, _QWORD))v23;
    v9 = v26;
    v10 = (_QWORD *)(v22 + (*((uint64_t *)&v23 + 1) >> 1));
    if ((BYTE8(v23) & 1) != 0)
      v8 = *(void (**)(__n128 *__return_ptr, _QWORD *, uint64_t *, _QWORD, _QWORD))(*v10 + v23);
    v11 = *v25;
    *v25 = 0;
    v18 = v11;
    v8(&v19, v10, &v18, *v9, v9[1]);
    v12 = v19.n128_u64[0];
    v19.n128_u64[0] = 0;
    v13 = v24;
    v24 = v12;
    if (v13)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      if (v19.n128_u64[0])
        (*(void (**)(unint64_t))(*(_QWORD *)v19.n128_u64[0] + 8))(v19.n128_u64[0]);
    }
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  else
  {
    v19.n128_u64[0] = (unint64_t)&v22;
    v20 = absl::internal_any_invocable::LocalManagerTrivial;
    v21 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionFactoryInterface,webrtc::scoped_refptr<webrtc::VideoTrackInterface>,webrtc::scoped_refptr<webrtc::VideoTrackSourceInterface>,std::string_view>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, uint64_t *, char *))(*(_QWORD *)v7 + 8))(v7, &v19, &v18, &v17);
    v20(1, &v19, &v19);
    rtc::Event::Wait();
  }
  v14 = v24;
  v24 = 0;
  *a5 = v14;
  rtc::Event::~Event((rtc::Event *)v27);
  result = v24;
  if (v24)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  return result;
}

uint64_t webrtc::PeerConnectionFactoryInterface::CreateVideoTrack(uint64_t result, uint64_t *a2, uint64_t (***a3)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (***v6)(_QWORD);

  v4 = result;
  v6 = a3;
  if (a3)
    result = (**a3)(a3);
  if (*((char *)a2 + 23) < 0)
  {
    v5 = a2[1];
    if (v5 < 0 || (a2 = (uint64_t *)*a2, v5) && !a2)
    {
      __break(1u);
      return result;
    }
  }
  else
  {
    v5 = *((unsigned __int8 *)a2 + 23);
  }
  (*(void (**)(uint64_t, uint64_t (****)(_QWORD), uint64_t *, uint64_t))(*(_QWORD *)v4 + 96))(v4, &v6, a2, v5);
  result = (uint64_t)v6;
  if (v6)
    return (*v6)[1](v6);
  return result;
}

uint64_t webrtc::PeerConnectionFactoryProxyWithInternal<webrtc::PeerConnectionFactoryInterface>::CreateAudioTrack@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  rtc::Thread *v6;
  void (*v7)(__n128 *__return_ptr, _QWORD *, uint64_t, uint64_t);
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char v14;
  char v15;
  __n128 v16;
  __n128 (*v17)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v18)(uint64_t *);
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD v24[16];

  v24[15] = *MEMORY[0x1E0C80C00];
  v13 = a3;
  v19 = *(_QWORD *)(a1 + 24);
  v20 = xmmword_1969F9240;
  v21 = 0;
  v22 = a2;
  v23 = &v13;
  rtc::Event::Event((rtc::Event *)v24);
  v6 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v6))
  {
    v7 = (void (*)(__n128 *__return_ptr, _QWORD *, uint64_t, uint64_t))v20;
    v8 = (_QWORD *)(v19 + (*((uint64_t *)&v20 + 1) >> 1));
    if ((BYTE8(v20) & 1) != 0)
      v7 = *(void (**)(__n128 *__return_ptr, _QWORD *, uint64_t, uint64_t))(*v8 + v20);
    v7(&v16, v8, v22, *v23);
    v9 = v16.n128_u64[0];
    v16.n128_u64[0] = 0;
    v10 = v21;
    v21 = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      if (v16.n128_u64[0])
        (*(void (**)(unint64_t))(*(_QWORD *)v16.n128_u64[0] + 8))(v16.n128_u64[0]);
    }
  }
  else
  {
    v16.n128_u64[0] = (unint64_t)&v19;
    v17 = absl::internal_any_invocable::LocalManagerTrivial;
    v18 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionFactoryInterface,webrtc::scoped_refptr<webrtc::AudioTrackInterface>,std::string const&,webrtc::AudioSourceInterface *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v6 + 8))(v6, &v16, &v15, &v14);
    v17(1, &v16, &v16);
    rtc::Event::Wait();
  }
  v11 = v21;
  v21 = 0;
  *a4 = v11;
  rtc::Event::~Event((rtc::Event *)v24);
  result = v21;
  if (v21)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  return result;
}

uint64_t webrtc::PeerConnectionFactoryProxyWithInternal<webrtc::PeerConnectionFactoryInterface>::StartAecDump(uint64_t a1, uint64_t a2, uint64_t a3)
{
  rtc::Thread *v4;
  uint64_t (*v5)(_QWORD *, uint64_t, uint64_t);
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  __n128 v13;
  __n128 (*v14)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v15)(uint64_t *);
  uint64_t v16;
  __int128 v17;
  char v18;
  uint64_t *v19;
  uint64_t *v20;
  _QWORD v21[16];

  v21[15] = *MEMORY[0x1E0C80C00];
  v9 = a3;
  v10 = a2;
  v16 = *(_QWORD *)(a1 + 24);
  v17 = xmmword_1969F9250;
  v19 = &v10;
  v20 = &v9;
  rtc::Event::Event((rtc::Event *)v21);
  v4 = *(rtc::Thread **)(a1 + 16);
  if (rtc::Thread::IsCurrent(v4))
  {
    v5 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t))v17;
    v6 = (_QWORD *)(v16 + (*((uint64_t *)&v17 + 1) >> 1));
    if ((BYTE8(v17) & 1) != 0)
      v5 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v6 + v17);
    v7 = v5(v6, *v19, *v20);
    v18 = v7;
  }
  else
  {
    v13.n128_u64[0] = (unint64_t)&v16;
    v14 = absl::internal_any_invocable::LocalManagerTrivial;
    v15 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionFactoryInterface,BOOL,__sFILE *,long long>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v4 + 8))(v4, &v13, &v12, &v11);
    v14(1, &v13, &v13);
    rtc::Event::Wait();
    v7 = v18 != 0;
  }
  rtc::Event::~Event((rtc::Event *)v21);
  return v7;
}

void webrtc::PeerConnectionFactoryProxyWithInternal<webrtc::PeerConnectionFactoryInterface>::StopAecDump(uint64_t a1)
{
  rtc::Thread *v2;
  void (*v3)(_QWORD *);
  _QWORD *v4;
  char v5;
  char v6;
  __n128 v7;
  __n128 (*v8)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v9)(uint64_t *);
  uint64_t v10;
  __int128 v11;
  _QWORD v12[16];

  v12[15] = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a1 + 24);
  v11 = xmmword_1969F9260;
  rtc::Event::Event((rtc::Event *)v12);
  v2 = *(rtc::Thread **)(a1 + 16);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (void (*)(_QWORD *))v11;
    v4 = (_QWORD *)(v10 + (*((uint64_t *)&v11 + 1) >> 1));
    if ((BYTE8(v11) & 1) != 0)
      v3 = *(void (**)(_QWORD *))(*v4 + v11);
    v3(v4);
  }
  else
  {
    v7.n128_u64[0] = (unint64_t)&v10;
    v8 = absl::internal_any_invocable::LocalManagerTrivial;
    v9 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionFactoryInterface,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v7, &v6, &v5);
    v8(1, &v7, &v7);
    rtc::Event::Wait();
  }
  rtc::Event::~Event((rtc::Event *)v12);
}

BOOL rtc::RefCountedObject<webrtc::PeerConnectionFactoryProxyWithInternal<webrtc::PeerConnectionFactoryInterface>>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 32));
  return v1 == 1;
}

_QWORD *webrtc::PeerConnectionFactoryProxyWithInternal<webrtc::PeerConnectionFactoryInterface>::~PeerConnectionFactoryProxyWithInternal(_QWORD *a1)
{
  rtc::Thread *v2;
  uint64_t v3;
  char v5;
  char v6;
  __n128 v7;
  __n128 (*v8)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v9)(uint64_t *);
  _QWORD *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  _QWORD v13[16];

  v13[15] = *MEMORY[0x1E0C80C00];
  *a1 = &unk_1E341AC20;
  v10 = a1;
  v11 = webrtc::PeerConnectionFactoryProxyWithInternal<webrtc::PeerConnectionFactoryInterface>::DestroyInternal;
  v12 = 0;
  rtc::Event::Event((rtc::Event *)v13);
  v2 = (rtc::Thread *)a1[1];
  if (rtc::Thread::IsCurrent(v2))
  {
    v11((uint64_t)v10 + (v12 >> 1));
  }
  else
  {
    v7.n128_u64[0] = (unint64_t)&v10;
    v8 = absl::internal_any_invocable::LocalManagerTrivial;
    v9 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionFactoryProxyWithInternal<webrtc::PeerConnectionFactoryInterface>,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v7, &v6, &v5);
    v8(1, &v7, &v7);
    rtc::Event::Wait();
  }
  rtc::Event::~Event((rtc::Event *)v13);
  v3 = a1[3];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t webrtc::PeerConnectionFactoryProxyWithInternal<webrtc::PeerConnectionFactoryInterface>::DestroyInternal(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_QWORD *)(a1 + 24) = 0;
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionFactoryProxyWithInternal<webrtc::PeerConnectionFactoryInterface>,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *))(*v4 + v2);
  v2(v4);
  return rtc::Event::Set((rtc::Event *)(v1 + 32));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionFactoryInterface,void,webrtc::PeerConnectionFactoryInterface::Options const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *, uint64_t);
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *, uint64_t))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD *)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *, uint64_t))(*v5 + v2);
  v2(v5, v4);
  return rtc::Event::Set((rtc::Event *)(v1 + 40));
}

void webrtc::ReturnType<webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::PeerConnectionInterface>>>::Invoke<webrtc::PeerConnectionFactoryInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::PeerConnectionInterface>> (webrtc::PeerConnectionFactoryInterface::*)(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies),webrtc::PeerConnectionInterface::RTCConfiguration const,webrtc::PeerConnectionDependencies>(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, _QWORD *, uint64_t, _BYTE *), uint64_t a4, uint64_t a5)
{
  void (*v6)(uint64_t *__return_ptr, _QWORD *, uint64_t, _BYTE *);
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[64];
  uint64_t v15;
  void *__p[2];
  uint64_t v17;
  _DWORD v18[2];
  uint64_t v19;
  unsigned __int8 v20;

  v6 = a3;
  v8 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    v6 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t, _BYTE *))(*v8 + a3);
  webrtc::PeerConnectionDependencies::PeerConnectionDependencies();
  v6(&v15, v8, a5, v14);
  *(_DWORD *)a1 = v15;
  v9 = (void **)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*v9);
  *(_OWORD *)v9 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 24) = v17;
  HIBYTE(v17) = 0;
  LOBYTE(__p[0]) = 0;
  *(_DWORD *)(a1 + 32) = v18[0];
  *(_DWORD *)(a1 + 35) = *(_DWORD *)((char *)v18 + 3);
  if (*(unsigned __int8 *)(a1 + 48) == v20)
  {
    if (!*(_BYTE *)(a1 + 48))
      goto LABEL_17;
    v10 = v19;
    v19 = 0;
    v11 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v10;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  else if (*(_BYTE *)(a1 + 48))
  {
    v12 = *(_QWORD *)(a1 + 40);
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    *(_BYTE *)(a1 + 48) = 0;
  }
  else
  {
    v13 = v19;
    v19 = 0;
    *(_QWORD *)(a1 + 40) = v13;
    *(_BYTE *)(a1 + 48) = 1;
  }
  if (v20 && v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
LABEL_17:
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
  webrtc::PeerConnectionDependencies::~PeerConnectionDependencies((webrtc::PeerConnectionDependencies *)v14);
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionFactoryInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::PeerConnectionInterface>>,webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  webrtc::ReturnType<webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::PeerConnectionInterface>>>::Invoke<webrtc::PeerConnectionFactoryInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::PeerConnectionInterface>> (webrtc::PeerConnectionFactoryInterface::*)(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies),webrtc::PeerConnectionInterface::RTCConfiguration const,webrtc::PeerConnectionDependencies>(*a1 + 24, *(_QWORD *)v1, *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t, _BYTE *))(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 80));
  return rtc::Event::Set((rtc::Event *)(v1 + 96));
}

void webrtc::ConstMethodCall<webrtc::PeerConnectionFactoryInterface,webrtc::RtpCapabilities,cricket::MediaType>::Marshal(_QWORD *a1, unint64_t a2, rtc::Thread *this)
{
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  std::string *v26;
  __int128 *v27;
  __int128 v28;
  _BYTE *v29;
  _BYTE *v30;
  int64_t v31;
  char *v32;
  char *v33;
  char v34;
  char v35;
  __n128 v36;
  __n128 (*v37)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v38)(uint64_t *);

  if (rtc::Thread::IsCurrent(this))
  {
    webrtc::ReturnType<webrtc::RtpCapabilities>::Invoke<webrtc::PeerConnectionFactoryInterface const,webrtc::RtpCapabilities (webrtc::PeerConnectionFactoryInterface::*)(cricket::MediaType)const,cricket::MediaType>((uint64_t *)(a2 + 24), *(_QWORD *)a2, *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(a2 + 8), *(_QWORD *)(a2 + 16), **(unsigned int **)(a2 + 96));
  }
  else
  {
    v36.n128_u64[0] = a2;
    v37 = absl::internal_any_invocable::LocalManagerTrivial;
    v38 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::PeerConnectionFactoryInterface,webrtc::RtpCapabilities,cricket::MediaType>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)this + 8))(this, &v36, &v35, &v34);
    v37(1, &v36, &v36);
    rtc::Event::Wait();
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = v7 - v6;
  if (v7 != v6)
  {
    v9 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 5);
    if (v9 >= 0x19999999999999ALL)
      goto LABEL_25;
    v10 = (char *)operator new(v8);
    v11 = 0;
    *a1 = v10;
    a1[1] = v10;
    a1[2] = &v10[160 * v9];
    v12 = MEMORY[0x1E0DCDD48] + 16;
    do
    {
      v13 = (_QWORD *)webrtc::RtpCodec::RtpCodec();
      *v13 = v12;
      v14 = *(_QWORD *)(v6 + v11 + 104);
      v13[14] = 0;
      v15 = v13 + 14;
      *(v15 - 1) = v14;
      v16 = *(_QWORD *)(v6 + v11 + 112);
      if (v16 >= 2)
      {
        if ((v16 & 1) != 0)
        {
          absl::inlined_vector_internal::Storage<webrtc::ScalabilityMode,34ul,std::allocator<webrtc::ScalabilityMode>>::InitFrom(v15, (unint64_t *)(v6 + v11 + 112));
        }
        else
        {
          *v15 = v16;
          v17 = &v10[v11];
          v18 = *(_OWORD *)(v6 + v11 + 120);
          v19 = *(_OWORD *)(v6 + v11 + 136);
          *((_QWORD *)v17 + 19) = *(_QWORD *)(v6 + v11 + 152);
          *(_OWORD *)(v17 + 136) = v19;
          *(_OWORD *)(v17 + 120) = v18;
        }
      }
      v11 += 160;
    }
    while (v6 + v11 != v7);
    a1[1] = &v10[v11];
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v20 = *(_QWORD *)(a2 + 48);
  v21 = *(_QWORD *)(a2 + 56);
  v22 = v21 - v20;
  if (v21 != v20)
  {
    v23 = 0xCCCCCCCCCCCCCCCDLL * (v22 >> 3);
    if (v23 >= 0x666666666666667)
      goto LABEL_25;
    v24 = (char *)operator new(v22);
    v25 = 0;
    a1[3] = v24;
    a1[5] = &v24[40 * v23];
    do
    {
      v26 = (std::string *)&v24[v25];
      v27 = (__int128 *)(v20 + v25);
      if (*(char *)(v20 + v25 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)v27, *((_QWORD *)v27 + 1));
      }
      else
      {
        v28 = *v27;
        v26->__r_.__value_.__r.__words[2] = *((_QWORD *)v27 + 2);
        *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v28;
      }
      *(_OWORD *)&v24[v25 + 24] = *(_OWORD *)(v20 + v25 + 24);
      v25 += 40;
    }
    while (v20 + v25 != v21);
    a1[4] = &v24[v25];
  }
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  v30 = *(_BYTE **)(a2 + 72);
  v29 = *(_BYTE **)(a2 + 80);
  v31 = v29 - v30;
  if (v29 == v30)
    return;
  if (v31 < 0)
LABEL_25:
    abort();
  v32 = (char *)operator new(v29 - v30);
  a1[6] = v32;
  v33 = &v32[4 * (v31 >> 2)];
  a1[8] = v33;
  memcpy(v32, v30, v31);
  a1[7] = v33;
}

uint64_t webrtc::ReturnType<webrtc::RtpCapabilities>::Invoke<webrtc::PeerConnectionFactoryInterface const,webrtc::RtpCapabilities (webrtc::PeerConnectionFactoryInterface::*)(cricket::MediaType)const,cricket::MediaType>(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, _QWORD *, uint64_t), uint64_t a4, uint64_t a5)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void (***v14)(_QWORD);
  void (***v15)(_QWORD);
  void (**v16)(_QWORD);
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (***v46)(_QWORD);
  void (***v47)(_QWORD);
  void (**v48)(_QWORD);
  uint64_t v49;
  void **v50;
  __int128 *v51;
  __int128 *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  __int128 v62;
  uint64_t v63;
  __int128 *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 *v68;
  char v69;
  __int128 v70;
  const std::string::value_type *v71;
  size_t v72;
  uint64_t v73;
  uint64_t v74;
  std::string *v75;
  __int128 *v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  __int128 *v80;
  char v81;
  __int128 v82;
  const std::string::value_type *v83;
  size_t v84;
  char *v85;
  char *v86;
  char *v87;
  size_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  char **v94;
  char *v95;
  uint64_t v96;
  size_t v97;
  unint64_t v98;
  char *v99;
  void *v100;
  char *v101;
  uint64_t v103;
  uint64_t v104;
  __int128 *v105;
  __int128 *v106;
  char *v107;
  char *v108;

  v6 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*v6 + a3);
  a3(&v103, v6, a5);
  if (&v103 != a1)
  {
    v8 = v103;
    v7 = v104;
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((v104 - v103) >> 5);
    v10 = a1[2];
    v11 = *a1;
    if (0xCCCCCCCCCCCCCCCDLL * ((v10 - *a1) >> 5) < v9)
    {
      if (v11)
      {
        v12 = a1[1];
        v13 = (void *)*a1;
        if (v12 != v11)
        {
          v14 = (void (***)(_QWORD))(v12 - 160);
          v15 = (void (***)(_QWORD))(v12 - 160);
          do
          {
            v16 = *v15;
            v15 -= 20;
            (*v16)(v14);
            v17 = v14 == (void (***)(_QWORD))v11;
            v14 = v15;
          }
          while (!v17);
          v13 = (void *)*a1;
        }
        a1[1] = v11;
        operator delete(v13);
        v10 = 0;
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
      }
      if (v9 <= 0x199999999999999)
      {
        v18 = 0xCCCCCCCCCCCCCCCDLL * (v10 >> 5);
        v19 = 2 * v18;
        if (2 * v18 <= v9)
          v19 = v9;
        v20 = v18 >= 0xCCCCCCCCCCCCCCLL ? 0x199999999999999 : v19;
        if (v20 <= 0x199999999999999)
        {
          v21 = 5 * v20;
          v22 = (char *)operator new(160 * v20);
          *a1 = (uint64_t)v22;
          a1[1] = (uint64_t)v22;
          a1[2] = (uint64_t)&v22[32 * v21];
          if (v8 != v7)
          {
            v23 = 0;
            v24 = MEMORY[0x1E0DCDD48] + 16;
            do
            {
              v25 = (_QWORD *)webrtc::RtpCodec::RtpCodec();
              *v25 = v24;
              v26 = *(_QWORD *)(v8 + v23 + 104);
              v25[14] = 0;
              v27 = v25 + 14;
              *(v27 - 1) = v26;
              v28 = *(_QWORD *)(v8 + v23 + 112);
              if (v28 >= 2)
              {
                if ((v28 & 1) != 0)
                {
                  absl::inlined_vector_internal::Storage<webrtc::ScalabilityMode,34ul,std::allocator<webrtc::ScalabilityMode>>::InitFrom(v27, (unint64_t *)(v8 + v23 + 112));
                }
                else
                {
                  *v27 = v28;
                  v29 = &v22[v23];
                  v30 = *(_OWORD *)(v8 + v23 + 120);
                  v31 = *(_OWORD *)(v8 + v23 + 136);
                  *((_QWORD *)v29 + 19) = *(_QWORD *)(v8 + v23 + 152);
                  *(_OWORD *)(v29 + 136) = v31;
                  *(_OWORD *)(v29 + 120) = v30;
                }
              }
              v23 += 160;
            }
            while (v8 + v23 != v7);
            v22 += v23;
          }
          a1[1] = (uint64_t)v22;
          goto LABEL_44;
        }
      }
      goto LABEL_132;
    }
    if (0xCCCCCCCCCCCCCCCDLL * ((a1[1] - v11) >> 5) >= v9)
    {
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<webrtc::RtpCodecCapability *,webrtc::RtpCodecCapability *,webrtc::RtpCodecCapability *>(v103, v104, *a1);
      v44 = v43;
      v45 = a1[1];
      if (v45 != v43)
      {
        v46 = (void (***)(_QWORD))(v45 - 160);
        v47 = (void (***)(_QWORD))(v45 - 160);
        do
        {
          v48 = *v47;
          v47 -= 20;
          (*v48)(v46);
          v17 = v46 == (void (***)(_QWORD))v44;
          v46 = v47;
        }
        while (!v17);
      }
      a1[1] = v44;
      goto LABEL_44;
    }
    v32 = v103 + 32 * ((a1[1] - v11) >> 5);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<webrtc::RtpCodecCapability *,webrtc::RtpCodecCapability *,webrtc::RtpCodecCapability *>(v103, v32, *a1);
    v33 = a1[1];
    if (v32 == v7)
      goto LABEL_38;
    v34 = 0;
    v35 = MEMORY[0x1E0DCDD48] + 16;
    do
    {
      if (!(v33 + v34))
      {
LABEL_131:
        __break(1u);
        goto LABEL_132;
      }
      webrtc::RtpCodec::RtpCodec();
      v36 = (uint64_t *)(v33 + v34);
      *v36 = v35;
      v37 = *(_QWORD *)(v32 + v34 + 104);
      v36[14] = 0;
      v38 = (unint64_t *)(v33 + v34 + 112);
      *(_QWORD *)(v33 + v34 + 104) = v37;
      v39 = *(_QWORD *)(v32 + v34 + 112);
      if (v39 >= 2)
      {
        if ((v39 & 1) != 0)
        {
          absl::inlined_vector_internal::Storage<webrtc::ScalabilityMode,34ul,std::allocator<webrtc::ScalabilityMode>>::InitFrom(v38, (unint64_t *)(v32 + v34 + 112));
        }
        else
        {
          *v38 = v39;
          v40 = v33 + v34;
          v41 = *(_OWORD *)(v32 + v34 + 120);
          v42 = *(_OWORD *)(v32 + v34 + 136);
          *(_QWORD *)(v40 + 152) = *(_QWORD *)(v32 + v34 + 152);
          *(_OWORD *)(v40 + 136) = v42;
          *(_OWORD *)(v40 + 120) = v41;
        }
      }
      v34 += 160;
    }
    while (v32 + v34 != v7);
    v33 += v34;
LABEL_38:
    a1[1] = v33;
LABEL_44:
    v50 = (void **)(a1 + 3);
    v49 = a1[3];
    v52 = v105;
    v51 = v106;
    v53 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v106 - (char *)v105) >> 3);
    v54 = a1[5];
    if (0xCCCCCCCCCCCCCCCDLL * ((v54 - v49) >> 3) < v53)
    {
      if (v49)
      {
        v55 = a1[4];
        v56 = (void *)a1[3];
        if (v55 != v49)
        {
          do
            webrtc::RtpHeaderExtensionCapability::~RtpHeaderExtensionCapability((webrtc::RtpHeaderExtensionCapability *)(v55 - 40));
          while (v55 != v49);
          v56 = *v50;
        }
        a1[4] = v49;
        operator delete(v56);
        v54 = 0;
        *v50 = 0;
        a1[4] = 0;
        a1[5] = 0;
      }
      if (v53 <= 0x666666666666666)
      {
        v57 = 0xCCCCCCCCCCCCCCCDLL * (v54 >> 3);
        v58 = 2 * v57;
        if (2 * v57 <= v53)
          v58 = v53;
        v59 = v57 >= 0x333333333333333 ? 0x666666666666666 : v58;
        if (v59 <= 0x666666666666666)
        {
          v60 = 5 * v59;
          v61 = (char *)operator new(40 * v59);
          a1[3] = (uint64_t)v61;
          a1[4] = (uint64_t)v61;
          a1[5] = (uint64_t)&v61[8 * v60];
          while (v52 != v51)
          {
            if (*((char *)v52 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v61, *(const std::string::value_type **)v52, *((_QWORD *)v52 + 1));
            }
            else
            {
              v62 = *v52;
              *((_QWORD *)v61 + 2) = *((_QWORD *)v52 + 2);
              *(_OWORD *)v61 = v62;
            }
            *(_OWORD *)(v61 + 24) = *(__int128 *)((char *)v52 + 24);
            v52 = (__int128 *)((char *)v52 + 40);
            v61 += 40;
          }
          a1[4] = (uint64_t)v61;
          goto LABEL_109;
        }
      }
LABEL_132:
      abort();
    }
    v63 = a1[4];
    if (0xCCCCCCCCCCCCCCCDLL * ((v63 - v49) >> 3) >= v53)
    {
      if (v105 != v106)
      {
        v78 = 0;
        do
        {
          v79 = v49 + v78;
          v80 = (__int128 *)((char *)v52 + v78);
          if (v52 != (__int128 *)v49)
          {
            v81 = *((_BYTE *)v80 + 23);
            if (*(char *)(v79 + 23) < 0)
            {
              if (v81 >= 0)
                v83 = (char *)v52 + v78;
              else
                v83 = *(const std::string::value_type **)((char *)v52 + v78);
              if (v81 >= 0)
                v84 = *((unsigned __int8 *)v80 + 23);
              else
                v84 = *(_QWORD *)((char *)v52 + v78 + 8);
              std::string::__assign_no_alias<false>((std::string *)(v49 + v78), v83, v84);
            }
            else if ((*((_BYTE *)v80 + 23) & 0x80) != 0)
            {
              std::string::__assign_no_alias<true>((_QWORD *)(v49 + v78), *(char **)((char *)v52 + v78), *(_QWORD *)((char *)v52 + v78 + 8));
            }
            else
            {
              v82 = *v80;
              *(_QWORD *)(v79 + 16) = *((_QWORD *)v80 + 2);
              *(_OWORD *)v79 = v82;
            }
          }
          *(_OWORD *)(v79 + 24) = *(__int128 *)((char *)v80 + 24);
          v78 += 40;
        }
        while ((__int128 *)((char *)v52 + v78) != v51);
        v63 = a1[4];
        v49 += v78;
      }
      while (v63 != v49)
        webrtc::RtpHeaderExtensionCapability::~RtpHeaderExtensionCapability((webrtc::RtpHeaderExtensionCapability *)(v63 - 40));
      a1[4] = v49;
    }
    else
    {
      v64 = (__int128 *)((char *)v105 + 8 * ((v63 - v49) >> 3));
      if (v63 != v49)
      {
        v65 = 0;
        v66 = 8 * ((v63 - v49) >> 3);
        do
        {
          v67 = v49 + v65;
          v68 = (__int128 *)((char *)v52 + v65);
          if (v52 != (__int128 *)v49)
          {
            v69 = *((_BYTE *)v68 + 23);
            if (*(char *)(v67 + 23) < 0)
            {
              if (v69 >= 0)
                v71 = (char *)v52 + v65;
              else
                v71 = *(const std::string::value_type **)((char *)v52 + v65);
              if (v69 >= 0)
                v72 = *((unsigned __int8 *)v68 + 23);
              else
                v72 = *(_QWORD *)((char *)v52 + v65 + 8);
              std::string::__assign_no_alias<false>((std::string *)(v49 + v65), v71, v72);
            }
            else if ((*((_BYTE *)v68 + 23) & 0x80) != 0)
            {
              std::string::__assign_no_alias<true>((_QWORD *)(v49 + v65), *(char **)((char *)v52 + v65), *(_QWORD *)((char *)v52 + v65 + 8));
            }
            else
            {
              v70 = *v68;
              *(_QWORD *)(v67 + 16) = *((_QWORD *)v68 + 2);
              *(_OWORD *)v67 = v70;
            }
          }
          *(_OWORD *)(v67 + 24) = *(__int128 *)((char *)v68 + 24);
          v65 += 40;
        }
        while (v66 != v65);
        v49 = a1[4];
      }
      v73 = v49;
      if (v64 != v51)
      {
        v74 = 0;
        do
        {
          v75 = (std::string *)(v49 + v74);
          if (!(v49 + v74))
            goto LABEL_131;
          v76 = (__int128 *)((char *)v64 + v74);
          if (*((char *)v64 + v74 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v75, *(const std::string::value_type **)((char *)v64 + v74), *(_QWORD *)((char *)v64 + v74 + 8));
          }
          else
          {
            v77 = *v76;
            v75->__r_.__value_.__r.__words[2] = *((_QWORD *)v76 + 2);
            *(_OWORD *)&v75->__r_.__value_.__l.__data_ = v77;
          }
          *(_OWORD *)(v49 + v74 + 24) = *(__int128 *)((char *)v64 + v74 + 24);
          v74 += 40;
        }
        while ((__int128 *)((char *)v64 + v74) != v51);
        v73 = v49 + v74;
      }
      a1[4] = v73;
    }
LABEL_109:
    v85 = (char *)a1[6];
    v86 = v107;
    v87 = v108;
    v88 = v108 - v107;
    v89 = (v108 - v107) >> 2;
    v90 = a1[8];
    if (v89 > (v90 - (uint64_t)v85) >> 2)
    {
      if (v85)
      {
        a1[7] = (uint64_t)v85;
        operator delete(v85);
        v90 = 0;
        a1[6] = 0;
        a1[7] = 0;
        a1[8] = 0;
      }
      if ((v88 & 0x8000000000000000) != 0)
        goto LABEL_132;
      v91 = v90 >> 1;
      if (v90 >> 1 <= v89)
        v91 = v89;
      v92 = (unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v91;
      if (v92 >> 62)
        goto LABEL_132;
      v93 = (char *)operator new(4 * v92);
      v85 = v93;
      a1[7] = (uint64_t)v93;
      v94 = (char **)(a1 + 7);
      *(v94 - 1) = v93;
      v94[1] = &v93[4 * v92];
      if (v87 != v86)
        memcpy(v93, v86, v88);
      goto LABEL_129;
    }
    v96 = a1[7];
    v94 = (char **)(a1 + 7);
    v95 = (char *)v96;
    v97 = v96 - (_QWORD)v85;
    v98 = (v96 - (uint64_t)v85) >> 2;
    if (v98 >= v89)
    {
      if (v108 == v107)
      {
LABEL_129:
        *v94 = &v85[v88];
        return MEMORY[0x19AEA5BBC](&v103);
      }
      v100 = v85;
      v101 = v107;
    }
    else
    {
      v99 = &v107[4 * v98];
      if (v95 != v85)
      {
        memmove(v85, v107, v97);
        v85 = *v94;
      }
      v88 = v87 - v99;
      if (v87 == v99)
        goto LABEL_129;
      v100 = v85;
      v101 = v99;
    }
    memmove(v100, v101, v88);
    goto LABEL_129;
  }
  return MEMORY[0x19AEA5BBC](&v103);
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<webrtc::RtpCodecCapability *,webrtc::RtpCodecCapability *,webrtc::RtpCodecCapability *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  std::string *v6;
  char v7;
  __int128 v8;
  int v9;
  const std::string::value_type *v10;
  size_t v11;
  __int128 v12;
  int v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  size_t v21;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  char v28;
  char v29;

  if (a1 != a2)
  {
    v5 = a1;
    while (a3 == v5)
    {
      v9 = *(_DWORD *)(v5 + 104);
      *(_BYTE *)(a3 + 108) = *(_BYTE *)(v5 + 108);
      *(_DWORD *)(a3 + 104) = v9;
LABEL_44:
      v5 += 160;
      a3 += 160;
      if (v5 == a2)
        return;
    }
    v6 = (std::string *)(a3 + 8);
    v7 = *(_BYTE *)(v5 + 31);
    if (*(char *)(a3 + 31) < 0)
    {
      if (v7 >= 0)
        v10 = (const std::string::value_type *)(v5 + 8);
      else
        v10 = *(const std::string::value_type **)(v5 + 8);
      if (v7 >= 0)
        v11 = *(unsigned __int8 *)(v5 + 31);
      else
        v11 = *(_QWORD *)(v5 + 16);
      std::string::__assign_no_alias<false>(v6, v10, v11);
    }
    else if ((*(_BYTE *)(v5 + 31) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v6, *(char **)(v5 + 8), *(_QWORD *)(v5 + 16));
    }
    else
    {
      v8 = *(_OWORD *)(v5 + 8);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)(v5 + 24);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v8;
    }
    v12 = *(_OWORD *)(v5 + 32);
    *(_BYTE *)(a3 + 48) = *(_BYTE *)(v5 + 48);
    *(_OWORD *)(a3 + 32) = v12;
    std::vector<webrtc::RtcpFeedback>::__assign_with_size[abi:sn180100]<webrtc::RtcpFeedback*,webrtc::RtcpFeedback*>((_QWORD *)(a3 + 56), *(uint64_t **)(v5 + 56), *(uint64_t **)(v5 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56)) >> 2));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t *)(a3 + 80), *(const std::string::value_type ***)(v5 + 80), (const std::string::value_type **)(v5 + 88));
    v13 = *(_DWORD *)(v5 + 104);
    *(_BYTE *)(a3 + 108) = *(_BYTE *)(v5 + 108);
    *(_DWORD *)(a3 + 104) = v13;
    v14 = *(_QWORD *)(v5 + 112);
    if ((v14 & 1) != 0)
      v15 = *(char **)(v5 + 120);
    else
      v15 = (char *)(v5 + 120);
    v16 = *(_QWORD *)(a3 + 112);
    if ((v16 & 1) != 0)
    {
      v17 = *(_BYTE **)(a3 + 120);
      v18 = *(_QWORD *)(a3 + 128);
    }
    else
    {
      v17 = (_BYTE *)(a3 + 120);
      v18 = 34;
    }
    v19 = v14 >> 1;
    v20 = *(_QWORD *)(a3 + 112) & 1;
    if (v18 >= v14 >> 1)
    {
      v24 = v16 >> 1;
      v25 = v19 - (v16 >> 1);
      if (v19 < v16 >> 1)
        v25 = 0;
      if (v24 >= v19)
        v26 = v14 >> 1;
      else
        v26 = v16 >> 1;
      if (v26)
      {
        v27 = v17;
        do
        {
          v28 = *v15++;
          *v27++ = v28;
          --v26;
        }
        while (v26);
      }
      if (v24 >= v19)
        goto LABEL_43;
      if (!v17)
      {
        __break(1u);
        return;
      }
      v22 = 0;
      v21 = 0;
      v19 = v25;
      v23 = &v17[v16 >> 1];
    }
    else
    {
      if (2 * v18 <= v19)
        v21 = v14 >> 1;
      else
        v21 = 2 * v18;
      v22 = operator new(v21);
      v23 = v22;
    }
    do
    {
      v29 = *v15++;
      *v23++ = v29;
      --v19;
    }
    while (v19);
    if (v22)
    {
      if (v20)
        operator delete(*(void **)(a3 + 120));
      *(_QWORD *)(a3 + 120) = v22;
      *(_QWORD *)(a3 + 128) = v21;
      v20 = 1;
    }
LABEL_43:
    *(_QWORD *)(a3 + 112) = v20 | v14 & 0xFFFFFFFFFFFFFFFELL;
    goto LABEL_44;
  }
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::PeerConnectionFactoryInterface,webrtc::RtpCapabilities,cricket::MediaType>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  webrtc::ReturnType<webrtc::RtpCapabilities>::Invoke<webrtc::PeerConnectionFactoryInterface const,webrtc::RtpCapabilities (webrtc::PeerConnectionFactoryInterface::*)(cricket::MediaType)const,cricket::MediaType>((uint64_t *)(*a1 + 24), *(_QWORD *)v1, *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(v1 + 8), *(_QWORD *)(v1 + 16), **(unsigned int **)(v1 + 96));
  return rtc::Event::Set((rtc::Event *)(v1 + 104));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionFactoryInterface,webrtc::scoped_refptr<webrtc::MediaStreamInterface>,std::string const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, _QWORD *, uint64_t);
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *a1;
  v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD *)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*v5 + v2);
  v2(&v9, v5, v4);
  v6 = v9;
  v9 = 0;
  v7 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  return rtc::Event::Set((rtc::Event *)(v1 + 40));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionFactoryInterface,webrtc::scoped_refptr<webrtc::AudioSourceInterface>,cricket::AudioOptions const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, _QWORD *, uint64_t);
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *a1;
  v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD *)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*v5 + v2);
  v2(&v9, v5, v4);
  v6 = v9;
  v9 = 0;
  v7 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  return rtc::Event::Set((rtc::Event *)(v1 + 40));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionFactoryInterface,webrtc::scoped_refptr<webrtc::VideoTrackInterface>,webrtc::scoped_refptr<webrtc::VideoTrackSourceInterface>,std::string_view>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, _QWORD *, uint64_t *, _QWORD, _QWORD);
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v1 = *a1;
  v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t *, _QWORD, _QWORD))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v5 = *(uint64_t **)(*a1 + 32);
  v4 = *(_QWORD **)(*a1 + 40);
  v6 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t *, _QWORD, _QWORD))(*v6 + v2);
  v7 = *v5;
  *v5 = 0;
  v11 = v7;
  v2(&v12, v6, &v11, *v4, v4[1]);
  v8 = v12;
  v12 = 0;
  v9 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = v8;
  if (v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return rtc::Event::Set((rtc::Event *)(v1 + 48));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionFactoryInterface,webrtc::scoped_refptr<webrtc::AudioTrackInterface>,std::string const&,webrtc::AudioSourceInterface *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, _QWORD *, uint64_t, _QWORD);
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *a1;
  v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t, _QWORD))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD *)(*a1 + 32);
  v5 = *(_QWORD **)(*a1 + 40);
  v6 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t, _QWORD))(*v6 + v2);
  v2(&v10, v6, v4, *v5);
  v7 = v10;
  v10 = 0;
  v8 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = v7;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  return rtc::Event::Set((rtc::Event *)(v1 + 48));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionFactoryInterface,BOOL,__sFILE *,long long>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *, _QWORD, _QWORD);
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v1 = *a1;
  v2 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD **)(*a1 + 32);
  v5 = *(_QWORD **)(*a1 + 40);
  v6 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v6 + v2);
  *(_BYTE *)(v1 + 24) = v2(v6, *v4, *v5);
  return rtc::Event::Set((rtc::Event *)(v1 + 48));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionFactoryInterface,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *))(*v4 + v2);
  v2(v4);
  return rtc::Event::Set((rtc::Event *)(v1 + 32));
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<WebCore::LibWebRTCProvider::createPeerConnection(webrtc::PeerConnectionObserver &,rtc::NetworkManager &,rtc::PacketSocketFactory &,webrtc::PeerConnectionInterface::RTCConfiguration &&,std::unique_ptr<webrtc::AsyncDnsResolverFactoryInterface,webrtc::PeerConnectionInterface::RTCConfiguration &&::default_delete<std::unique_ptr>> &&)::$_0>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = operator new();
  *(_BYTE *)(MEMORY[0x19AEA5E8C](v4, v2, v3, 0, 0, 0) + 136) = 0;
  v5 = (uint64_t *)a1[2];
  result = *v5;
  *v5 = v4;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCProvider::prepareCertificateGenerator(WTF::Function<void ()(rtc::RTCCertificateGenerator &)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E341ACB8;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCProvider::prepareCertificateGenerator(WTF::Function<void ()(rtc::RTCCertificateGenerator &)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E341ACB8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCProvider::prepareCertificateGenerator(WTF::Function<void ()(rtc::RTCCertificateGenerator &)> &&)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Vector<WTF::ThreadSafeWeakPtr<WebCore::CoreAudioCaptureSource>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  WTF *v12;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    for (i = 16 * v3; i; i -= 16)
    {
      v6 = *(_QWORD *)v4;
      *(_QWORD *)v4 = 0;
      if (!v6)
        goto LABEL_16;
      if (__ldaxr((unsigned __int8 *)v6))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v6))
      {
        goto LABEL_8;
      }
      MEMORY[0x19AEA534C](v6);
LABEL_8:
      v8 = *(_QWORD *)(v6 + 16) - 1;
      *(_QWORD *)(v6 + 16) = v8;
      if (v8)
      {
        v11 = __ldxr((unsigned __int8 *)v6);
        if (v11 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v6))
            goto LABEL_16;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v6);
        goto LABEL_16;
      }
      v9 = *(_QWORD *)(v6 + 8);
      v10 = __ldxr((unsigned __int8 *)v6);
      if (v10 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v6))
        {
          if (!v9)
            goto LABEL_15;
          goto LABEL_16;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v6);
      if (!v9)
LABEL_15:
        WTF::fastFree((WTF *)v6, a2);
LABEL_16:
      v4 = (WTF *)((char *)v4 + 16);
    }
  }
  v12 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v12, a2);
  }
  return a1;
}

unsigned __int8 *WTF::ThreadSafeWeakHashSet<WebCore::CoreAudioCaptureSource>::values@<X0>(unsigned __int8 *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *v3;
  unsigned __int8 *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t *v36;
  unsigned __int8 *v37;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unint64_t v55;
  double v56;
  double v57;
  double v58;
  unsigned int v59;
  int v60;
  int v61;
  WTF *v62;
  uint64_t v63;
  uint64_t v64;

  v3 = result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v5 = result + 16;
  if (__ldaxr(result + 16))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](result + 16);
LABEL_5:
  v62 = 0;
  v63 = 0;
  v7 = *(_QWORD *)v3;
  if (!*(_QWORD *)v3)
  {
    v12 = 0;
LABEL_47:
    v22 = 0;
    LODWORD(v8) = 0;
    goto LABEL_48;
  }
  v8 = *(unsigned int *)(v7 - 12);
  if ((_DWORD)v8)
  {
    if (v8 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    result = (unsigned __int8 *)WTF::fastMalloc((WTF *)(8 * v8));
    LODWORD(v63) = v8;
    v62 = (WTF *)result;
    v7 = *(_QWORD *)v3;
    if (!*(_QWORD *)v3)
    {
      v12 = 0;
LABEL_45:
      if (!result)
      {
        v22 = 0;
        goto LABEL_48;
      }
      v62 = 0;
      LODWORD(v63) = 0;
      result = (unsigned __int8 *)WTF::fastFree((WTF *)result, a2);
      goto LABEL_47;
    }
  }
  if (*(_DWORD *)(v7 - 12))
  {
    v9 = *(unsigned int *)(v7 - 4);
    v10 = (uint64_t *)v7;
    if ((_DWORD)v9)
    {
      v11 = 16 * v9;
      v10 = (uint64_t *)v7;
      while ((unint64_t)(*v10 + 1) <= 1)
      {
        v10 += 2;
        v11 -= 16;
        if (!v11)
          goto LABEL_40;
      }
    }
    v13 = (uint64_t *)(v7 + 16 * v9);
    if (v13 != v10)
    {
      v12 = 0;
      while (1)
      {
        v15 = *v10;
        v14 = v10[1];
        if (__ldaxr((unsigned __int8 *)v14))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v14))
        {
          goto LABEL_22;
        }
        result = (unsigned __int8 *)MEMORY[0x19AEA534C](v14);
LABEL_22:
        if (*(_QWORD *)(v14 + 24))
          ++*(_QWORD *)(v14 + 8);
        else
          v15 = 0;
        v17 = __ldxr((unsigned __int8 *)v14);
        if (v17 != 1)
        {
          __clrex();
LABEL_31:
          result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v14);
          if (!v15)
          {
LABEL_32:
            v12 = 1;
            goto LABEL_36;
          }
          goto LABEL_28;
        }
        if (__stlxr(0, (unsigned __int8 *)v14))
          goto LABEL_31;
        if (!v15)
          goto LABEL_32;
LABEL_28:
        v64 = v15;
        LODWORD(v18) = HIDWORD(v63);
        if (HIDWORD(v63) == (_DWORD)v63)
        {
          result = (unsigned __int8 *)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v62, HIDWORD(v63) + 1, (unint64_t)&v64);
          v18 = HIDWORD(v63);
          v19 = v62;
          v20 = *(_QWORD *)result;
          *(_QWORD *)result = 0;
          *((_QWORD *)v19 + v18) = v20;
        }
        else
        {
          v64 = 0;
          *((_QWORD *)v62 + HIDWORD(v63)) = v15;
        }
        HIDWORD(v63) = v18 + 1;
        v21 = v64;
        v64 = 0;
        if (v21)
          result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::CoreAudioCaptureSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v21 + 304));
        do
        {
LABEL_36:
          v10 += 2;
          if (v10 == v13)
            goto LABEL_39;
        }
        while ((unint64_t)(*v10 + 1) <= 1);
        if (v10 == v13)
        {
LABEL_39:
          LODWORD(v8) = v63;
          v22 = HIDWORD(v63);
          goto LABEL_41;
        }
      }
    }
  }
LABEL_40:
  v22 = 0;
  v12 = 0;
LABEL_41:
  if (v8 <= v22)
    goto LABEL_48;
  result = (unsigned __int8 *)v62;
  if (!v22)
    goto LABEL_45;
  LODWORD(v63) = v22;
  result = (unsigned __int8 *)WTF::fastRealloc(v62, (void *)(8 * v22));
  v62 = (WTF *)result;
  LODWORD(v8) = v22;
LABEL_48:
  v23 = *(unsigned int *)(a3 + 12);
  v24 = *(WTF **)a3;
  if ((_DWORD)v23)
  {
    v25 = 8 * v23;
    v26 = *(WTF **)a3;
    do
    {
      v27 = *(_QWORD *)v26;
      *(_QWORD *)v26 = 0;
      if (v27)
        result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::CoreAudioCaptureSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v27 + 304));
      v26 = (WTF *)((char *)v26 + 8);
      v25 -= 8;
    }
    while (v25);
  }
  if (v24)
    result = (unsigned __int8 *)WTF::fastFree(v24, a2);
  *(_QWORD *)a3 = v62;
  *(_DWORD *)(a3 + 8) = v8;
  *(_DWORD *)(a3 + 12) = v22;
  v28 = *(_QWORD *)v3;
  if (!v12)
    goto LABEL_117;
  if (!v28)
    goto LABEL_104;
  v29 = *(_DWORD *)(v28 - 4);
  if (!v29)
  {
LABEL_103:
    *((_DWORD *)v3 + 2) = 0;
    goto LABEL_118;
  }
  v30 = 0;
  v31 = v29 - 1;
  do
  {
    v32 = v31;
    v33 = (_QWORD *)(v28 + 16 * v31);
    if ((unint64_t)(*v33 + 1) < 2)
      goto LABEL_84;
    v34 = v28 + 16 * v31;
    v37 = *(unsigned __int8 **)(v34 + 8);
    v36 = (uint64_t *)(v34 + 8);
    v35 = v37;
    if (__ldaxr(v37))
    {
      __clrex();
    }
    else if (!__stxr(1u, v35))
    {
      goto LABEL_64;
    }
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v35);
LABEL_64:
    v39 = *((_QWORD *)v35 + 3);
    v40 = __ldxr(v35);
    if (v40 == 1)
    {
      if (!__stlxr(0, v35))
      {
        if (v39)
          goto LABEL_84;
        goto LABEL_70;
      }
    }
    else
    {
      __clrex();
    }
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v35);
    if (v39)
      goto LABEL_84;
LABEL_70:
    *v33 = -1;
    v41 = *v36;
    *v36 = 0;
    if (!v41)
      goto LABEL_83;
    if (__ldaxr((unsigned __int8 *)v41))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v41))
    {
      goto LABEL_75;
    }
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v41);
LABEL_75:
    v43 = *(_QWORD *)(v41 + 16) - 1;
    *(_QWORD *)(v41 + 16) = v43;
    if (v43)
    {
      v46 = __ldxr((unsigned __int8 *)v41);
      if (v46 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v41))
          goto LABEL_83;
      }
      else
      {
        __clrex();
      }
      result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v41);
      goto LABEL_83;
    }
    v44 = *(_QWORD *)(v41 + 8);
    v45 = __ldxr((unsigned __int8 *)v41);
    if (v45 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v41))
      {
        if (!v44)
          goto LABEL_82;
        goto LABEL_83;
      }
    }
    else
    {
      __clrex();
    }
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v41);
    if (!v44)
LABEL_82:
      result = (unsigned __int8 *)WTF::fastFree((WTF *)v41, a2);
LABEL_83:
    ++v30;
LABEL_84:
    --v31;
  }
  while (v32);
  v28 = *(_QWORD *)v3;
  if (v30)
  {
    *(_DWORD *)(v28 - 16) += v30;
    v47 = *(_QWORD *)v3;
    if (*(_QWORD *)v3)
      v48 = *(_DWORD *)(v47 - 12);
    else
      v48 = 0;
    *(_DWORD *)(v47 - 12) = v48 - v30;
    v28 = *(_QWORD *)v3;
  }
  if (!v28)
  {
LABEL_104:
    v52 = 0;
    *((_DWORD *)v3 + 2) = 0;
    goto LABEL_121;
  }
  v49 = *(_DWORD *)(v28 - 4);
  v50 = *(unsigned int *)(v28 - 12);
  if (v49 < 9 || 6 * (int)v50 >= v49)
    goto LABEL_103;
  v53 = (v50 - 1) | ((v50 - 1) >> 1) | ((((_DWORD)v50 - 1) | ((v50 - 1) >> 1)) >> 2);
  v54 = v53 | (v53 >> 4) | ((v53 | (v53 >> 4)) >> 8);
  v55 = (v54 | HIWORD(v54)) + 1;
  if (v55 > 0x400)
  {
    if (v55 <= 2 * v50)
    {
LABEL_107:
      LODWORD(v55) = 2 * v55;
      if (v55 <= 0x400)
        goto LABEL_108;
    }
    v56 = (double)v50;
    v57 = (double)v55;
    v58 = 0.416666667;
  }
  else
  {
    if (3 * v55 <= 4 * v50)
      goto LABEL_107;
LABEL_108:
    v56 = (double)v50;
    v57 = (double)v55;
    v58 = 0.604166667;
  }
  if (v57 * v58 <= v56)
    LODWORD(v55) = 2 * v55;
  if (v55 <= 8)
    v59 = 8;
  else
    v59 = v55;
  result = (unsigned __int8 *)WTF::HashTable<WebCore::AudioWorkletProcessor const*,WTF::KeyValuePair<WebCore::AudioWorkletProcessor const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioWorkletProcessor const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::AudioWorkletProcessor const*>,WTF::HashMap<WebCore::AudioWorkletProcessor const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::AudioWorkletProcessor const*>,WTF::HashTraits<WebCore::AudioWorkletProcessor const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::AudioWorkletProcessor const*>>::rehash((uint64_t *)v3, v59);
  v28 = *(_QWORD *)v3;
LABEL_117:
  *((_DWORD *)v3 + 2) = 0;
  if (!v28)
  {
    v52 = 0;
    goto LABEL_121;
  }
LABEL_118:
  v52 = *(_DWORD *)(v28 - 12);
  v60 = 0x7FFFFFFF;
  if (v52 < 0x7FFFFFFF)
LABEL_121:
    v60 = v52;
  *((_DWORD *)v3 + 3) = 2 * v60;
  v61 = __ldxr(v5);
  if (v61 != 1)
  {
    __clrex();
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  if (__stlxr(0, v5))
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  return result;
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::CoreAudioCaptureSource,(WTF::DestructionThread)2>(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;

  v1 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](this);
LABEL_5:
  v3 = *((_QWORD *)v1 + 1);
  v4 = v3 - 1;
  *((_QWORD *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    v9 = *((_QWORD *)v1 + 2);
    v6 = *((_QWORD *)v1 + 3);
    *((_QWORD *)v1 + 3) = 0;
    v5 = v9 == 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = __ldxr(v1);
  if (v7 != 1)
  {
    __clrex();
LABEL_12:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (v4)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, v1))
    goto LABEL_12;
  if (v4)
    return this;
LABEL_13:
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v8 = off_1E341ADD0;
  *(_QWORD *)(v8 + 8) = v1;
  *(_QWORD *)(v8 + 16) = v6;
  *(_BYTE *)(v8 + 24) = v5;
  v10 = (unsigned __int8 *)v8;
  WTF::ensureOnMainRunLoop();
  this = v10;
  if (v10)
    return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v10 + 8))(v10);
  return this;
}

uint64_t WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::CoreAudioCaptureSource,(WTF::DestructionThread)2>(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  uint64_t result;
  WTF *v4;
  BOOL v5;

  v4 = *(WTF **)(a1 + 8);
  result = *(_QWORD *)(a1 + 16);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (*(_BYTE *)(a1 + 24))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (!v5)
    return WTF::fastFree(v4, a2);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::BaseAudioSharedUnit::startUnit(void)::$_0,void,WebCore::CoreAudioCaptureSource &>::call(uint64_t a1, uint64_t **a2)
{
  _QWORD *v3;
  uint64_t result;
  _QWORD *v5;

  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E341B9F8;
  v5 = v3;
  ((void (*)(uint64_t **))(*a2)[17])(a2);
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(a2 + 16, &v5);
  ((void (*)(uint64_t **))(*a2)[18])(a2);
  result = (uint64_t)v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::BaseAudioSharedUnit::captureFailed(void)::$_0,void,WebCore::CoreAudioCaptureSource &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 240))(a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::BaseAudioSharedUnit::resume(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E341AD30;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::BaseAudioSharedUnit::resume(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E341AD30;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::BaseAudioSharedUnit::resume(void)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  unsigned int v13;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (!*(_BYTE *)(v2 + 36))
      {
        v3 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v3 = off_1E341AD58;
        WTF::ThreadSafeWeakHashSet<WebCore::CoreAudioCaptureSource>::values((unsigned __int8 *)(v2 + 72), v4, (uint64_t)&v11);
        v6 = v11;
        if (v13)
        {
          v7 = 8 * v13;
          do
          {
            v8 = *(_QWORD *)v6;
            v6 = (WTF *)((char *)v6 + 8);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, v8);
            v7 -= 8;
          }
          while (v7);
          v6 = v11;
          if (v13)
          {
            v9 = 8 * v13;
            do
            {
              v10 = *(_QWORD *)v6;
              *(_QWORD *)v6 = 0;
              if (v10)
                WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::CoreAudioCaptureSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v10 + 304));
              v6 = (WTF *)((char *)v6 + 8);
              v9 -= 8;
            }
            while (v9);
            v6 = v11;
          }
        }
        if (v6)
        {
          v11 = 0;
          v12 = 0;
          WTF::fastFree(v6, v5);
        }
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      }
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore19BaseAudioSharedUnit6resumeEvENK3__0clEvEUlRT_E_vJRNS2_22CoreAudioCaptureSourceEEE4callES9_(uint64_t a1, _BYTE *a2)
{
  uint64_t result;

  if (a2[632])
    return (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)a2 + 80))(a2, 0);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::BaseAudioSharedUnit::suspend(void)::$_0,void,WebCore::CoreAudioCaptureSource &>::call(uint64_t a1, _BYTE *a2)
{
  a2[632] = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a2 + 64))(a2);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 80))(a2, 1);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::BaseAudioSharedUnit::handleNewCurrentMicrophoneDevice(WebCore::CaptureDevice &&)::$_0,void,WebCore::CoreAudioCaptureSource &>::call(uint64_t a1, uint64_t **a2)
{
  return WebCore::CoreAudioCaptureSource::handleNewCurrentMicrophoneDevice(a2, *(_QWORD *)(a1 + 8));
}

WTF::StringImpl *WebCore::CoreAudioCaptureSource::create@<X0>(WebCore::CoreAudioCaptureSourceFactory *a1@<X0>, uint64_t *a2@<X1>, const WebCore::MediaConstraints *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  const WTF::StringImpl *v10;
  id *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *result;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  unsigned __int8 **v19;
  __int16 v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  char v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v28;
  char v29;
  _BYTE v30[8];
  WTF::StringImpl *v31;
  char v32;

  WebCore::CoreAudioCaptureSourceFactory::singleton(a1)[3] = 0;
  v11 = (id *)&unk_1EE2EE000;
    goto LABEL_38;
  while (!byte_1EE2EE410)
  {
    v11 = WebCore::AVAudioSessionCaptureDeviceManager::singleton(void)::manager;
    WebCore::AVAudioSessionCaptureDeviceManager::refreshAudioCaptureDevices((WebCore::AVAudioSessionCaptureDeviceManager *)WebCore::AVAudioSessionCaptureDeviceManager::singleton(void)::manager);
    if (byte_1EE2EE410)
      break;
    __break(1u);
LABEL_38:
    WebCore::AVAudioSessionCaptureDeviceManager::AVAudioSessionCaptureDeviceManager((WebCore::AVAudioSessionCaptureDeviceManager *)WebCore::AVAudioSessionCaptureDeviceManager::singleton(void)::manager);
    *((_BYTE *)v11 + 1096) = 1;
  }
  if (dword_1EE2EE40C)
  {
    v12 = qword_1EE2EE400 + 24;
    v13 = 48 * dword_1EE2EE40C;
    while (!WTF::equal(*(WTF **)(v12 - 16), *(const WTF::StringImpl **)a1, v10))
    {
      v12 += 48;
      v13 -= 48;
      if (!v13)
        goto LABEL_8;
    }
    v16 = *(WTF::StringImpl **)(v12 - 16);
    if (v16)
      *(_DWORD *)v16 += 2;
    v24 = v16;
    v25 = *(_BYTE *)(v12 - 8);
    v17 = *(WTF::StringImpl **)v12;
    if (*(_QWORD *)v12)
      *(_DWORD *)v17 += 2;
    v26 = v17;
    v18 = *(WTF::StringImpl **)(v12 + 8);
    if (v18)
      *(_DWORD *)v18 += 2;
    v27 = v18;
    v28 = *(_DWORD *)(v12 + 16);
    v29 = 1;
    v19 = (unsigned __int8 **)WTF::fastMalloc((WTF *)0x288);
    result = (WTF::StringImpl *)WebCore::CoreAudioCaptureSource::CoreAudioCaptureSource((uint64_t)v19, (uint64_t)&v24, a2, 0, a4);
    if (a3
      && (result = (WTF::StringImpl *)WebCore::RealtimeMediaSource::applyConstraints((WebCore::RealtimeMediaSource *)v19, a3, v30), v32))
    {
      v20 = (v30[0] << 8) | 4;
      *(_QWORD *)a5 = 0;
      *(_QWORD *)(a5 + 8) = 0;
      *(_WORD *)(a5 + 16) = v20;
      v21 = v31;
      v31 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v15);
        else
          *(_DWORD *)v21 -= 2;
      }
      result = (WTF::StringImpl *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::CoreAudioCaptureSource,(WTF::DestructionThread)2>(v19[38]);
    }
    else
    {
      *(_QWORD *)a5 = v19;
      *(_QWORD *)(a5 + 8) = 0;
      *(_WORD *)(a5 + 16) = 0;
    }
  }
  else
  {
LABEL_8:
    v29 = 0;
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_QWORD *)a5 = 0;
    *(_WORD *)(a5 + 16) = 6;
  }
  if (v29)
  {
    v22 = v27;
    v27 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v15);
      else
        *(_DWORD *)v22 -= 2;
    }
    v23 = v26;
    v26 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v15);
      else
        *(_DWORD *)v23 -= 2;
    }
    result = v24;
    v24 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned __int8 *WebCore::CoreAudioCaptureSource::createForTesting@<X0>(WebCore::CoreAudioCaptureSourceFactory *a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t *a3@<X2>, const WebCore::MediaConstraints *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  unsigned __int8 *result;
  WTF::StringImpl *v24;
  __int16 v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  int v31;

  WebCore::CoreAudioCaptureSourceFactory::singleton(a1)[3] = a5;
  v14 = WTF::fastMalloc((WTF *)0x288);
  v15 = v14;
  v16 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1)
    *(_DWORD *)v16 += 2;
  v27 = v16;
  LOBYTE(v28) = 1;
  v17 = *a2;
  if (*a2)
    *(_DWORD *)v17 += 2;
  v29 = v17;
  v18 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v18 += 2;
  v30 = v18;
  v31 = 0;
  WebCore::RealtimeMediaSource::RealtimeMediaSource(v14, (uint64_t)&v27, a3, a6);
  v19 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v19 = 0;
  *(_OWORD *)(v19 + 8) = xmmword_19689B170;
  *(_QWORD *)(v19 + 24) = v15;
  *(_QWORD *)(v15 + 304) = v19;
  *(_QWORD *)v15 = off_1E341AE80;
  *(_DWORD *)(v15 + 312) = 0;
  *(_BYTE *)(v15 + 320) = 0;
  *(_BYTE *)(v15 + 512) = 0;
  *(_BYTE *)(v15 + 520) = 0;
  *(_BYTE *)(v15 + 624) = 0;
  *(_WORD *)(v15 + 632) = 1;
  *(_QWORD *)(v15 + 640) = a5;
  WebCore::BaseAudioSharedUnit::prepareForNewCapture((WebCore::BaseAudioSharedUnit *)a5);
  *(_BYTE *)(v15 + 291) = *(_BYTE *)(a5 + 16);
  *(double *)(v15 + 248) = (double)*(int *)(a5 + 32);
  *(_QWORD *)(v15 + 240) = *(_QWORD *)(a5 + 24);
  v21 = v30;
  v30 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v20);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = v29;
  v29 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v20);
    else
      *(_DWORD *)v22 -= 2;
  }
  result = (unsigned __int8 *)v27;
  v27 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v20);
      if (!a4)
        goto LABEL_25;
      goto LABEL_17;
    }
    *(_DWORD *)result -= 2;
  }
  if (!a4)
  {
LABEL_25:
    *(_QWORD *)a7 = v15;
    *(_QWORD *)(a7 + 8) = 0;
    *(_WORD *)(a7 + 16) = 0;
    return result;
  }
LABEL_17:
  result = (unsigned __int8 *)WebCore::RealtimeMediaSource::applyConstraints((WebCore::RealtimeMediaSource *)v15, a4, &v27);
  if (!(_BYTE)v29)
    goto LABEL_25;
  v25 = (v27 << 8) | 4;
  *(_QWORD *)a7 = 0;
  *(_QWORD *)(a7 + 8) = 0;
  *(_WORD *)(a7 + 16) = v25;
  v26 = v28;
  v28 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v24);
    else
      *(_DWORD *)v26 -= 2;
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::CoreAudioCaptureSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v15 + 304));
}

void WebCore::CoreAudioCaptureSourceFactory::~CoreAudioCaptureSourceFactory(WebCore::CoreAudioCaptureSourceFactory *this)
{
  char *v2;
  WebCore::AudioSessionIOS *v3;
  void *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = &off_1E341ADF8;
  *((_QWORD *)this + 1) = &unk_1E341AE48;
  v2 = (char *)this + 8;
  v3 = WebCore::AudioSession::sharedSession(this);
  (*(void (**)(WebCore::AudioSessionIOS *, char *))(*(_QWORD *)v3 + 216))(v3, v2);
  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v6 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, v4);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  char *v2;
  WebCore::AudioSessionIOS *v3;
  void *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = &off_1E341ADF8;
  *((_QWORD *)this + 1) = &unk_1E341AE48;
  v2 = (char *)this + 8;
  v3 = WebCore::AudioSession::sharedSession(this);
  (*(void (**)(WebCore::AudioSessionIOS *, char *))(*(_QWORD *)v3 + 216))(v3, v2);
  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v6 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, v4);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  JUMPOUT(0x19AEA7644);
}

void `non-virtual thunk to'WebCore::CoreAudioCaptureSourceFactory::~CoreAudioCaptureSourceFactory(WebCore::CoreAudioCaptureSourceFactory *this)
{
  WebCore::AudioSessionIOS *v2;
  void *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *((_QWORD *)this - 1) = &off_1E341ADF8;
  *(_QWORD *)this = &unk_1E341AE48;
  v2 = WebCore::AudioSession::sharedSession(this);
  (*(void (**)(WebCore::AudioSessionIOS *, WebCore::CoreAudioCaptureSourceFactory *))(*(_QWORD *)v2 + 216))(v2, this);
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, v3);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WebCore::AudioSessionIOS *v2;
  void *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *((_QWORD *)this - 1) = &off_1E341ADF8;
  *(_QWORD *)this = &unk_1E341AE48;
  v2 = WebCore::AudioSession::sharedSession(this);
  (*(void (**)(WebCore::AudioSessionIOS *, WebCore::CoreAudioCaptureSourceFactory *))(*(_QWORD *)v2 + 216))(v2, this);
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, v3);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  JUMPOUT(0x19AEA7644);
}

id *WebCore::CoreAudioCaptureSourceFactory::audioCaptureDeviceManager(WebCore::CoreAudioCaptureSourceFactory *this)
{
  {
    WebCore::AVAudioSessionCaptureDeviceManager::AVAudioSessionCaptureDeviceManager((WebCore::AVAudioSessionCaptureDeviceManager *)WebCore::AVAudioSessionCaptureDeviceManager::singleton(void)::manager);
  }
  return WebCore::AVAudioSessionCaptureDeviceManager::singleton(void)::manager;
}

void *WebCore::CoreAudioCaptureSourceFactory::speakerDevices(WebCore::CoreAudioCaptureSourceFactory *this)
{
  {
    WebCore::AVAudioSessionCaptureDeviceManager::AVAudioSessionCaptureDeviceManager((WebCore::AVAudioSessionCaptureDeviceManager *)WebCore::AVAudioSessionCaptureDeviceManager::singleton(void)::manager);
  }
  return &unk_1EE2EE3F0;
}

uint64_t WebCore::CoreAudioCaptureSourceFactory::registerSpeakerSamplesProducer(uint64_t result, uint64_t a2)
{
  _BYTE *v2;
  int v4;
  char *v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  WebCore::AudioSessionIOS *v10;
  unint64_t StatusReg;
  unsigned int *v12;
  unsigned int v13;
  _BYTE v14[24];

  {
    v8 = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
    WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)off_1E341A700;
    *(_QWORD *)algn_1EE2F8E58 = 0;
    LOBYTE(v5) = 1;
    byte_1EE2F8E60 = 1;
    qword_1EE2F8E68 = 0x3FF0000000000000;
    v10 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)result);
    dword_1EE2F8E70 = (int)(*(float (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v10 + 72))(v10);
    word_1EE2F8E74 = 0;
    byte_1EE2F8E76 = 0;
    byte_1EE2F8E90 = 0;
    qword_1EE2F8E98 = 0;
    unk_1EE2F8EA0 = 0;
    byte_1EE2F8EA8 = 0;
    qword_1EE2F8E78 = 0;
    byte_1EE2F8E80 = 0;
    qword_1EE2F8EB0 = 0;
    unk_1EE2F8EB8 = 0;
    word_1EE2F8EC0 = 0;
    byte_1EE2F8EC2 = 1;
    qword_1EE2F8EC8 = 0;
    *(_QWORD *)&dword_1EE2F8ED0 = 0;
    v2 = &unk_1ECE91000;
      goto LABEL_31;
    goto LABEL_36;
  }
  while (1)
  {
    byte_1EE2F8E76 = 1;
    v4 = __ldaxr((unsigned __int8 *)&dword_1EE2F90A8 + 3);
    v5 = (char *)&dword_1EE2F90A8 + 3;
    if (v4)
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)&dword_1EE2F90A8 + 3))
    {
      goto LABEL_6;
    }
    result = MEMORY[0x19AEA534C]((char *)&dword_1EE2F90A8 + 3);
LABEL_6:
    v6 = qword_1EE2F90B0;
    qword_1EE2F90B0 = a2;
    v7 = __ldxr((unsigned __int8 *)&dword_1EE2F90A8 + 3);
    if (v7 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)&dword_1EE2F90A8 + 3))
      {
        if (!v6)
          goto LABEL_14;
        goto LABEL_12;
      }
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)((char *)&dword_1EE2F90A8 + 3));
    if (!v6)
      goto LABEL_14;
LABEL_12:
    if (v6 != a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
LABEL_14:
    if (!qword_1EE2F8EE8)
      return result;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    if (!byte_1EE2F8FB8)
      goto LABEL_26;
    a2 = result;
    v8 = &qword_1EE2F8F68;
    result = (*(uint64_t (**)(uint64_t *))(qword_1EE2F8F68 + 16))(&qword_1EE2F8F68);
    if (*(_DWORD *)result != 1)
      goto LABEL_26;
    result = (*(uint64_t (**)(uint64_t *))(qword_1EE2F8F68 + 16))(&qword_1EE2F8F68);
    if (*(_DWORD *)(result + 16) == 1)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_36:
    WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
    v2[592] = (_BYTE)v5;
LABEL_31:
    WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)&unk_1ECE91208, v8, (uint64_t)v14);
    *v8 = (uint64_t)&off_1E341B0A8;
    *((_BYTE *)v8 + 256) = 0;
    *((_BYTE *)v8 + 360) = 0;
    v8[46] = 0;
    *((_WORD *)v8 + 188) = 0;
    v8[48] = 0;
    *((_BYTE *)v8 + 392) = 0;
    *((_BYTE *)v8 + 496) = 0;
    *(_OWORD *)(v8 + 17) = 0u;
    *(_OWORD *)(v8 + 19) = 0u;
    *(_OWORD *)((char *)v8 + 161) = 0u;
    *(_OWORD *)(v8 + 33) = 0u;
    *((_BYTE *)v8 + 280) = 0;
    v8[63] = 0x1770000001F40;
    *((_OWORD *)v8 + 32) = 0u;
    v8[66] = (uint64_t)off_1E3407128;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    *(_OWORD *)(v8 + 67) = 0u;
    *(_OWORD *)(v8 + 69) = 0u;
    v12 = *(unsigned int **)(StatusReg + 736);
    if (!v12)
      v12 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    v8[71] = (uint64_t)v12;
    v8[66] = (uint64_t)off_1E31F7378;
    result = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)result = off_1E341BA48;
    *(_QWORD *)(result + 8) = WebCore::CoreAudioSharedUnit::verifyIsCapturing;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v8;
    v8[72] = result;
    *((_BYTE *)v8 + 584) = 0;
    *((_BYTE *)v8 + 592) = 0;
    *((_DWORD *)v8 + 150) = 0;
    v8[77] = 0;
    v8[78] = 0;
    v8[76] = 0;
    *((_BYTE *)v8 + 632) = 1;
  }
  v9 = *(_QWORD *)(result + 8);
  if (*(double *)(a2 + 8) != *(double *)v9
    || *(_DWORD *)(a2 + 16) != *(_DWORD *)(v9 + 8)
    || *(_DWORD *)(a2 + 20) != *(_DWORD *)(v9 + 12)
    || *(_DWORD *)(a2 + 24) != *(_DWORD *)(v9 + 16)
    || *(_DWORD *)(a2 + 28) != *(_DWORD *)(v9 + 20)
    || *(_DWORD *)(a2 + 32) != *(_DWORD *)(v9 + 24)
    || *(_DWORD *)(a2 + 36) != *(_DWORD *)(v9 + 28)
    || *(_DWORD *)(a2 + 40) != *(_DWORD *)(v9 + 32))
  {
LABEL_26:
    if ((_BYTE)word_1EE2F8E74)
      HIBYTE(word_1EE2F8E74) = 1;
    else
      return (*(uint64_t (**)(void))(WebCore::CoreAudioSharedUnit::unit(void)::singleton + 104))();
  }
  return result;
}

WebCore::AudioSession *WebCore::CoreAudioCaptureSourceFactory::unregisterSpeakerSamplesProducer(WebCore::AudioSession *result, uint64_t a2)
{
  uint64_t v4;
  int v5;
  WebCore::AudioSessionIOS *v6;
  unint64_t StatusReg;
  unsigned int *v8;
  unsigned int v9;
  _BYTE v10[24];

  {
    WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)off_1E341A700;
    *(_QWORD *)algn_1EE2F8E58 = 0;
    byte_1EE2F8E60 = 1;
    qword_1EE2F8E68 = 0x3FF0000000000000;
    v6 = WebCore::AudioSession::sharedSession(result);
    dword_1EE2F8E70 = (int)(*(float (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v6 + 72))(v6);
    word_1EE2F8E74 = 0;
    byte_1EE2F8E76 = 0;
    byte_1EE2F8E90 = 0;
    qword_1EE2F8E98 = 0;
    unk_1EE2F8EA0 = 0;
    byte_1EE2F8EA8 = 0;
    qword_1EE2F8E78 = 0;
    byte_1EE2F8E80 = 0;
    qword_1EE2F8EB0 = 0;
    unk_1EE2F8EB8 = 0;
    word_1EE2F8EC0 = 0;
    byte_1EE2F8EC2 = 1;
    qword_1EE2F8EC8 = 0;
    *(_QWORD *)&dword_1EE2F8ED0 = 0;
    {
      WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
    }
    WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)&unk_1ECE91208, &WebCore::CoreAudioSharedUnit::unit(void)::singleton, (uint64_t)v10);
    WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)&off_1E341B0A8;
    byte_1EE2F8F50 = 0;
    byte_1EE2F8FB8 = 0;
    qword_1EE2F8FC0 = 0;
    word_1EE2F8FC8 = 0;
    qword_1EE2F8FD0 = 0;
    byte_1EE2F8FD8 = 0;
    byte_1EE2F9040 = 0;
    unk_1EE2F8ED8 = 0u;
    *(_OWORD *)&qword_1EE2F8EE8 = 0u;
    unk_1EE2F8EF1 = 0u;
    xmmword_1EE2F8F58 = 0u;
    LOBYTE(qword_1EE2F8F68) = 0;
    qword_1EE2F9048 = 0x1770000001F40;
    xmmword_1EE2F9050 = 0u;
    qword_1EE2F9060 = (uint64_t)off_1E3407128;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    xmmword_1EE2F9068 = 0u;
    *(_OWORD *)algn_1EE2F9078 = 0u;
    v8 = *(unsigned int **)(StatusReg + 736);
    if (!v8)
      v8 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    qword_1EE2F9088 = (uint64_t)v8;
    qword_1EE2F9060 = (uint64_t)off_1E31F7378;
    result = (WebCore::AudioSession *)WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)result = off_1E341BA48;
    *((_QWORD *)result + 1) = WebCore::CoreAudioSharedUnit::verifyIsCapturing;
    *((_QWORD *)result + 2) = 0;
    *((_QWORD *)result + 3) = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
    qword_1EE2F9090 = (uint64_t)result;
    byte_1EE2F9098 = 0;
    byte_1EE2F90A0 = 0;
    dword_1EE2F90A8 = 0;
    qword_1EE2F90B8 = 0;
    qword_1EE2F90C0 = 0;
    qword_1EE2F90B0 = 0;
    byte_1EE2F90C8 = 1;
  }
  if (__ldaxr((unsigned __int8 *)&dword_1EE2F90A8 + 3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&dword_1EE2F90A8 + 3))
  {
    goto LABEL_6;
  }
  result = (WebCore::AudioSession *)MEMORY[0x19AEA534C]((char *)&dword_1EE2F90A8 + 3);
LABEL_6:
  v4 = qword_1EE2F90B0;
  if (qword_1EE2F90B0 == a2)
    qword_1EE2F90B0 = 0;
  v5 = __ldxr((unsigned __int8 *)&dword_1EE2F90A8 + 3);
  if (v5 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)&dword_1EE2F90A8 + 3))
LABEL_12:
    result = (WebCore::AudioSession *)WTF::Lock::unlockSlow((WTF::Lock *)((char *)&dword_1EE2F90A8 + 3));
  if (v4 == a2)
  {
    byte_1EE2F8E76 = 0;
    if (!(_DWORD)qword_1EE2F8E78)
    {
      (*(void (**)(uint64_t *))(WebCore::CoreAudioSharedUnit::unit(void)::singleton + 96))(&WebCore::CoreAudioSharedUnit::unit(void)::singleton);
      return (WebCore::AudioSession *)(*(uint64_t (**)(uint64_t *))(WebCore::CoreAudioSharedUnit::unit(void)::singleton
                                                                           + 80))(&WebCore::CoreAudioSharedUnit::unit(void)::singleton);
    }
  }
  return result;
}

uint64_t WebCore::CoreAudioCaptureSourceFactory::isAudioCaptureUnitRunning(WebCore::CoreAudioCaptureSourceFactory *this)
{
  WebCore::AudioSessionIOS *v2;
  unint64_t StatusReg;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  _BYTE v7[24];

  {
    WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)off_1E341A700;
    *(_QWORD *)algn_1EE2F8E58 = 0;
    byte_1EE2F8E60 = 1;
    qword_1EE2F8E68 = 0x3FF0000000000000;
    v2 = WebCore::AudioSession::sharedSession(this);
    dword_1EE2F8E70 = (int)(*(float (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v2 + 72))(v2);
    word_1EE2F8E74 = 0;
    byte_1EE2F8E76 = 0;
    byte_1EE2F8E90 = 0;
    qword_1EE2F8E98 = 0;
    unk_1EE2F8EA0 = 0;
    byte_1EE2F8EA8 = 0;
    qword_1EE2F8E78 = 0;
    byte_1EE2F8E80 = 0;
    qword_1EE2F8EB0 = 0;
    unk_1EE2F8EB8 = 0;
    word_1EE2F8EC0 = 0;
    byte_1EE2F8EC2 = 1;
    qword_1EE2F8EC8 = 0;
    *(_QWORD *)&dword_1EE2F8ED0 = 0;
    {
      WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
    }
    WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)&unk_1ECE91208, &WebCore::CoreAudioSharedUnit::unit(void)::singleton, (uint64_t)v7);
    WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)&off_1E341B0A8;
    byte_1EE2F8F50 = 0;
    byte_1EE2F8FB8 = 0;
    qword_1EE2F8FC0 = 0;
    word_1EE2F8FC8 = 0;
    qword_1EE2F8FD0 = 0;
    byte_1EE2F8FD8 = 0;
    byte_1EE2F9040 = 0;
    unk_1EE2F8ED8 = 0u;
    *(_OWORD *)&qword_1EE2F8EE8 = 0u;
    unk_1EE2F8EF1 = 0u;
    xmmword_1EE2F8F58 = 0u;
    LOBYTE(qword_1EE2F8F68) = 0;
    qword_1EE2F9048 = 0x1770000001F40;
    xmmword_1EE2F9050 = 0u;
    qword_1EE2F9060 = (uint64_t)off_1E3407128;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    xmmword_1EE2F9068 = 0u;
    *(_OWORD *)algn_1EE2F9078 = 0u;
    v4 = *(unsigned int **)(StatusReg + 736);
    if (!v4)
      v4 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    qword_1EE2F9088 = (uint64_t)v4;
    qword_1EE2F9060 = (uint64_t)off_1E31F7378;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v6 = off_1E341BA48;
    v6[1] = WebCore::CoreAudioSharedUnit::verifyIsCapturing;
    v6[2] = 0;
    v6[3] = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
    qword_1EE2F9090 = (uint64_t)v6;
    byte_1EE2F9098 = 0;
    byte_1EE2F90A0 = 0;
    dword_1EE2F90A8 = 0;
    qword_1EE2F90B8 = 0;
    qword_1EE2F90C0 = 0;
    qword_1EE2F90B0 = 0;
    byte_1EE2F90C8 = 1;
  }
  return HIBYTE(word_1EE2F8FC8);
}

uint64_t WebCore::CoreAudioCaptureSourceFactory::whenAudioCaptureUnitIsNotRunning(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::AudioSessionIOS *v11;
  unint64_t StatusReg;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  _BYTE v16[24];

  {
    WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)off_1E341A700;
    *(_QWORD *)algn_1EE2F8E58 = 0;
    byte_1EE2F8E60 = 1;
    qword_1EE2F8E68 = 0x3FF0000000000000;
    v11 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)&WebCore::CoreAudioSharedUnit::unit(void)::singleton);
    dword_1EE2F8E70 = (int)(*(float (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v11 + 72))(v11);
    word_1EE2F8E74 = 0;
    byte_1EE2F8E76 = 0;
    byte_1EE2F8E90 = 0;
    qword_1EE2F8E98 = 0;
    unk_1EE2F8EA0 = 0;
    byte_1EE2F8EA8 = 0;
    qword_1EE2F8E78 = 0;
    byte_1EE2F8E80 = 0;
    qword_1EE2F8EB0 = 0;
    unk_1EE2F8EB8 = 0;
    word_1EE2F8EC0 = 0;
    byte_1EE2F8EC2 = 1;
    qword_1EE2F8EC8 = 0;
    *(_QWORD *)&dword_1EE2F8ED0 = 0;
    {
      WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
    }
    WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)&unk_1ECE91208, &WebCore::CoreAudioSharedUnit::unit(void)::singleton, (uint64_t)v16);
    WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)&off_1E341B0A8;
    byte_1EE2F8F50 = 0;
    byte_1EE2F8FB8 = 0;
    qword_1EE2F8FC0 = 0;
    word_1EE2F8FC8 = 0;
    qword_1EE2F8FD0 = 0;
    byte_1EE2F8FD8 = 0;
    byte_1EE2F9040 = 0;
    unk_1EE2F8ED8 = 0u;
    *(_OWORD *)&qword_1EE2F8EE8 = 0u;
    unk_1EE2F8EF1 = 0u;
    xmmword_1EE2F8F58 = 0u;
    LOBYTE(qword_1EE2F8F68) = 0;
    qword_1EE2F9048 = 0x1770000001F40;
    xmmword_1EE2F9050 = 0u;
    qword_1EE2F9060 = (uint64_t)off_1E3407128;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    xmmword_1EE2F9068 = 0u;
    *(_OWORD *)algn_1EE2F9078 = 0u;
    v13 = *(unsigned int **)(StatusReg + 736);
    if (!v13)
      v13 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
    qword_1EE2F9088 = (uint64_t)v13;
    qword_1EE2F9060 = (uint64_t)off_1E31F7378;
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v15 = off_1E341BA48;
    v15[1] = WebCore::CoreAudioSharedUnit::verifyIsCapturing;
    v15[2] = 0;
    v15[3] = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
    qword_1EE2F9090 = (uint64_t)v15;
    byte_1EE2F9098 = 0;
    byte_1EE2F90A0 = 0;
    dword_1EE2F90A8 = 0;
    qword_1EE2F90B8 = 0;
    qword_1EE2F90C0 = 0;
    qword_1EE2F90B0 = 0;
    byte_1EE2F90C8 = 1;
  }
  result = (*(uint64_t (**)(uint64_t *))(WebCore::CoreAudioSharedUnit::unit(void)::singleton + 32))(&WebCore::CoreAudioSharedUnit::unit(void)::singleton);
  if ((result & 1) == 0)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  v4 = dword_1EE2F8ED4;
  if (dword_1EE2F8ED4 == dword_1EE2F8ED0)
  {
    result = WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&qword_1EE2F8EC8, dword_1EE2F8ED4 + 1, (unint64_t)a2);
    v5 = dword_1EE2F8ED4;
    v6 = dword_1EE2F8ED4 + 1;
    v7 = qword_1EE2F8EC8;
    v8 = *(_QWORD *)result;
    *(_QWORD *)result = 0;
    *(_QWORD *)(v7 + 8 * v5) = v8;
    dword_1EE2F8ED4 = v6;
  }
  else
  {
    v9 = qword_1EE2F8EC8;
    v10 = *a2;
    *a2 = 0;
    *(_QWORD *)(v9 + 8 * v4) = v10;
    dword_1EE2F8ED4 = v4 + 1;
  }
  return result;
}

uint64_t WebCore::CoreAudioCaptureSourceFactory::shouldAudioCaptureUnitRenderAudio(WebCore::CoreAudioCaptureSourceFactory *this)
{
  WebCore::AudioSessionIOS *v2;
  unint64_t StatusReg;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  _BYTE v7[24];

  {
    WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)off_1E341A700;
    *(_QWORD *)algn_1EE2F8E58 = 0;
    byte_1EE2F8E60 = 1;
    qword_1EE2F8E68 = 0x3FF0000000000000;
    v2 = WebCore::AudioSession::sharedSession(this);
    dword_1EE2F8E70 = (int)(*(float (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v2 + 72))(v2);
    word_1EE2F8E74 = 0;
    byte_1EE2F8E76 = 0;
    byte_1EE2F8E90 = 0;
    qword_1EE2F8E98 = 0;
    unk_1EE2F8EA0 = 0;
    byte_1EE2F8EA8 = 0;
    qword_1EE2F8E78 = 0;
    byte_1EE2F8E80 = 0;
    qword_1EE2F8EB0 = 0;
    unk_1EE2F8EB8 = 0;
    word_1EE2F8EC0 = 0;
    byte_1EE2F8EC2 = 1;
    qword_1EE2F8EC8 = 0;
    *(_QWORD *)&dword_1EE2F8ED0 = 0;
    {
      WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
    }
    WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)&unk_1ECE91208, &WebCore::CoreAudioSharedUnit::unit(void)::singleton, (uint64_t)v7);
    WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)&off_1E341B0A8;
    byte_1EE2F8F50 = 0;
    byte_1EE2F8FB8 = 0;
    qword_1EE2F8FC0 = 0;
    word_1EE2F8FC8 = 0;
    qword_1EE2F8FD0 = 0;
    byte_1EE2F8FD8 = 0;
    byte_1EE2F9040 = 0;
    unk_1EE2F8ED8 = 0u;
    *(_OWORD *)&qword_1EE2F8EE8 = 0u;
    unk_1EE2F8EF1 = 0u;
    xmmword_1EE2F8F58 = 0u;
    LOBYTE(qword_1EE2F8F68) = 0;
    qword_1EE2F9048 = 0x1770000001F40;
    xmmword_1EE2F9050 = 0u;
    qword_1EE2F9060 = (uint64_t)off_1E3407128;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    xmmword_1EE2F9068 = 0u;
    *(_OWORD *)algn_1EE2F9078 = 0u;
    v4 = *(unsigned int **)(StatusReg + 736);
    if (!v4)
      v4 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    qword_1EE2F9088 = (uint64_t)v4;
    qword_1EE2F9060 = (uint64_t)off_1E31F7378;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v6 = off_1E341BA48;
    v6[1] = WebCore::CoreAudioSharedUnit::verifyIsCapturing;
    v6[2] = 0;
    v6[3] = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
    qword_1EE2F9090 = (uint64_t)v6;
    byte_1EE2F9098 = 0;
    byte_1EE2F90A0 = 0;
    dword_1EE2F90A8 = 0;
    qword_1EE2F90B8 = 0;
    qword_1EE2F90C0 = 0;
    qword_1EE2F90B0 = 0;
    byte_1EE2F90C8 = 1;
  }
  return HIBYTE(word_1EE2F8FC8);
}

uint64_t WebCore::CoreAudioCaptureSource::CoreAudioCaptureSource(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v7;
  WebCore::AudioSessionIOS *v9;
  unint64_t StatusReg;
  unsigned int *v11;
  unsigned int v12;
  _QWORD *v13;
  _BYTE v14[24];

  WebCore::RealtimeMediaSource::RealtimeMediaSource(a1, a2, a3, a5);
  v7 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v7 = 0;
  *(_OWORD *)(v7 + 8) = xmmword_19689B170;
  *(_QWORD *)(v7 + 24) = a1;
  *(_QWORD *)(a1 + 304) = v7;
  *(_QWORD *)a1 = off_1E341AE80;
  *(_DWORD *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 512) = 0;
  *(_BYTE *)(a1 + 520) = 0;
  *(_BYTE *)(a1 + 624) = 0;
  *(_WORD *)(a1 + 632) = 1;
  *(_QWORD *)(a1 + 640) = a4;
  if (!a4)
  {
    a4 = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
    {
      WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)off_1E341A700;
      *(_QWORD *)algn_1EE2F8E58 = 0;
      byte_1EE2F8E60 = 1;
      qword_1EE2F8E68 = 0x3FF0000000000000;
      v9 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)v7);
      dword_1EE2F8E70 = (int)(*(float (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v9 + 72))(v9);
      word_1EE2F8E74 = 0;
      byte_1EE2F8E76 = 0;
      byte_1EE2F8E90 = 0;
      qword_1EE2F8E98 = 0;
      unk_1EE2F8EA0 = 0;
      byte_1EE2F8EA8 = 0;
      qword_1EE2F8E78 = 0;
      byte_1EE2F8E80 = 0;
      qword_1EE2F8EB0 = 0;
      unk_1EE2F8EB8 = 0;
      word_1EE2F8EC0 = 0;
      byte_1EE2F8EC2 = 1;
      qword_1EE2F8EC8 = 0;
      *(_QWORD *)&dword_1EE2F8ED0 = 0;
      {
        WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
      }
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)&unk_1ECE91208, &WebCore::CoreAudioSharedUnit::unit(void)::singleton, (uint64_t)v14);
      WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)&off_1E341B0A8;
      byte_1EE2F8F50 = 0;
      byte_1EE2F8FB8 = 0;
      qword_1EE2F8FC0 = 0;
      word_1EE2F8FC8 = 0;
      qword_1EE2F8FD0 = 0;
      byte_1EE2F8FD8 = 0;
      byte_1EE2F9040 = 0;
      unk_1EE2F8ED8 = 0u;
      *(_OWORD *)&qword_1EE2F8EE8 = 0u;
      unk_1EE2F8EF1 = 0u;
      xmmword_1EE2F8F58 = 0u;
      LOBYTE(qword_1EE2F8F68) = 0;
      qword_1EE2F9048 = 0x1770000001F40;
      xmmword_1EE2F9050 = 0u;
      qword_1EE2F9060 = (uint64_t)off_1E3407128;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      xmmword_1EE2F9068 = 0u;
      *(_OWORD *)algn_1EE2F9078 = 0u;
      v11 = *(unsigned int **)(StatusReg + 736);
      if (!v11)
        v11 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
      qword_1EE2F9088 = (uint64_t)v11;
      qword_1EE2F9060 = (uint64_t)off_1E31F7378;
      v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v13 = off_1E341BA48;
      v13[1] = WebCore::CoreAudioSharedUnit::verifyIsCapturing;
      v13[2] = 0;
      v13[3] = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
      qword_1EE2F9090 = (uint64_t)v13;
      byte_1EE2F9098 = 0;
      byte_1EE2F90A0 = 0;
      dword_1EE2F90A8 = 0;
      qword_1EE2F90B8 = 0;
      qword_1EE2F90C0 = 0;
      qword_1EE2F90B0 = 0;
      byte_1EE2F90C8 = 1;
    }
  }
  WebCore::BaseAudioSharedUnit::prepareForNewCapture((WebCore::BaseAudioSharedUnit *)a4);
  *(_BYTE *)(a1 + 291) = *((_BYTE *)a4 + 16);
  *(double *)(a1 + 248) = (double)*((int *)a4 + 8);
  *(_QWORD *)(a1 + 240) = a4[3];
  return a1;
}

void WebCore::CoreAudioCaptureSource::~CoreAudioCaptureSource(WebCore::CoreAudioCaptureSource *this)
{
  WebCore::BaseAudioSharedUnit *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WebCore::AudioSessionIOS *v8;
  unint64_t StatusReg;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  _BYTE v13[24];

  *(_QWORD *)this = off_1E341AE80;
  v2 = (WebCore::BaseAudioSharedUnit *)*((_QWORD *)this + 80);
  if (!v2)
  {
    v2 = (WebCore::BaseAudioSharedUnit *)&WebCore::CoreAudioSharedUnit::unit(void)::singleton;
    {
      WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)off_1E341A700;
      *(_QWORD *)algn_1EE2F8E58 = 0;
      byte_1EE2F8E60 = 1;
      qword_1EE2F8E68 = 0x3FF0000000000000;
      v8 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)&WebCore::CoreAudioSharedUnit::unit(void)::singleton);
      dword_1EE2F8E70 = (int)(*(float (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v8 + 72))(v8);
      word_1EE2F8E74 = 0;
      byte_1EE2F8E76 = 0;
      byte_1EE2F8E90 = 0;
      qword_1EE2F8E98 = 0;
      unk_1EE2F8EA0 = 0;
      byte_1EE2F8EA8 = 0;
      qword_1EE2F8E78 = 0;
      byte_1EE2F8E80 = 0;
      qword_1EE2F8EB0 = 0;
      unk_1EE2F8EB8 = 0;
      word_1EE2F8EC0 = 0;
      byte_1EE2F8EC2 = 1;
      qword_1EE2F8EC8 = 0;
      *(_QWORD *)&dword_1EE2F8ED0 = 0;
      {
        WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
      }
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)&unk_1ECE91208, &WebCore::CoreAudioSharedUnit::unit(void)::singleton, (uint64_t)v13);
      WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)&off_1E341B0A8;
      byte_1EE2F8F50 = 0;
      byte_1EE2F8FB8 = 0;
      qword_1EE2F8FC0 = 0;
      word_1EE2F8FC8 = 0;
      qword_1EE2F8FD0 = 0;
      byte_1EE2F8FD8 = 0;
      byte_1EE2F9040 = 0;
      unk_1EE2F8ED8 = 0u;
      *(_OWORD *)&qword_1EE2F8EE8 = 0u;
      unk_1EE2F8EF1 = 0u;
      xmmword_1EE2F8F58 = 0u;
      LOBYTE(qword_1EE2F8F68) = 0;
      qword_1EE2F9048 = 0x1770000001F40;
      xmmword_1EE2F9050 = 0u;
      qword_1EE2F9060 = (uint64_t)off_1E3407128;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      xmmword_1EE2F9068 = 0u;
      *(_OWORD *)algn_1EE2F9078 = 0u;
      v10 = *(unsigned int **)(StatusReg + 736);
      if (!v10)
        v10 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      qword_1EE2F9088 = (uint64_t)v10;
      qword_1EE2F9060 = (uint64_t)off_1E31F7378;
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      v2 = (WebCore::BaseAudioSharedUnit *)&WebCore::CoreAudioSharedUnit::unit(void)::singleton;
      *v12 = off_1E341BA48;
      v12[1] = WebCore::CoreAudioSharedUnit::verifyIsCapturing;
      v12[2] = 0;
      v12[3] = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
      qword_1EE2F9090 = (uint64_t)v12;
      byte_1EE2F9098 = 0;
      byte_1EE2F90A0 = 0;
      dword_1EE2F90A8 = 0;
      qword_1EE2F90B8 = 0;
      qword_1EE2F90C0 = 0;
      qword_1EE2F90B0 = 0;
      byte_1EE2F90C8 = 1;
    }
  }
  WebCore::BaseAudioSharedUnit::removeClient(v2, this);
  if (*((_BYTE *)this + 624))
  {
    v4 = (WTF::StringImpl *)*((_QWORD *)this + 72);
    *((_QWORD *)this + 72) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = (WTF::StringImpl *)*((_QWORD *)this + 71);
    *((_QWORD *)this + 71) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v3);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = (WTF::StringImpl *)*((_QWORD *)this + 70);
    *((_QWORD *)this + 70) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v3);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::RealtimeMediaSourceCapabilities,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 320, v3);
  WebCore::RealtimeMediaSource::~RealtimeMediaSource(this, v7);
}

{
  WTF *v1;
  void *v2;

  WebCore::CoreAudioCaptureSource::~CoreAudioCaptureSource(this);
  WTF::fastFree(v1, v2);
}

void WebCore::CoreAudioCaptureSource::startProducingData(WebCore::CoreAudioCaptureSource *this)
{
  WebCore::CoreAudioCaptureSource *v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  char v9;
  int v10;
  double v11;
  double v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t *v16;
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WebCore::AudioSessionIOS *v22;
  unint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  _QWORD *v26;
  WebCore::AudioSessionIOS *v27;
  unint64_t StatusReg;
  unsigned int *v29;
  unsigned int v30;
  _QWORD *v31;
  WTF::StringImpl *v32[5];
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  char v36;

  v1 = this;
  *((_BYTE *)this + 632) = 1;
  if (*((_BYTE *)this + 633))
    goto LABEL_31;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    this = (WebCore::CoreAudioCaptureSource *)(*(uint64_t (**)(WebCore::CoreAudioCaptureSource *))(*(_QWORD *)this + 24))(this);
    v3 = (WTF::StringImpl *)*((_QWORD *)v1 + 6);
    v32[0] = this;
    v32[1] = v4;
    v32[2] = (WTF::StringImpl *)"initializeToStartProducingData";
    v32[3] = v3;
    if (*(_BYTE *)(v2 + 12))
      this = (WebCore::CoreAudioCaptureSource *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v32);
  }
  *((_BYTE *)v1 + 633) = 1;
  v5 = (uint64_t *)*((_QWORD *)v1 + 80);
  if (!v5)
  {
    v5 = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
    {
      WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)off_1E341A700;
      *(_QWORD *)algn_1EE2F8E58 = 0;
      byte_1EE2F8E60 = 1;
      qword_1EE2F8E68 = 0x3FF0000000000000;
      v27 = WebCore::AudioSession::sharedSession(this);
      dword_1EE2F8E70 = (int)(*(float (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v27 + 72))(v27);
      word_1EE2F8E74 = 0;
      byte_1EE2F8E76 = 0;
      byte_1EE2F8E90 = 0;
      qword_1EE2F8E98 = 0;
      unk_1EE2F8EA0 = 0;
      byte_1EE2F8EA8 = 0;
      qword_1EE2F8E78 = 0;
      byte_1EE2F8E80 = 0;
      qword_1EE2F8EB0 = 0;
      unk_1EE2F8EB8 = 0;
      word_1EE2F8EC0 = 0;
      byte_1EE2F8EC2 = 1;
      qword_1EE2F8EC8 = 0;
      *(_QWORD *)&dword_1EE2F8ED0 = 0;
      {
        WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
      }
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)&unk_1ECE91208, &WebCore::CoreAudioSharedUnit::unit(void)::singleton, (uint64_t)v32);
      WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)&off_1E341B0A8;
      byte_1EE2F8F50 = 0;
      byte_1EE2F8FB8 = 0;
      qword_1EE2F8FC0 = 0;
      word_1EE2F8FC8 = 0;
      qword_1EE2F8FD0 = 0;
      byte_1EE2F8FD8 = 0;
      byte_1EE2F9040 = 0;
      unk_1EE2F8ED8 = 0u;
      *(_OWORD *)&qword_1EE2F8EE8 = 0u;
      unk_1EE2F8EF1 = 0u;
      xmmword_1EE2F8F58 = 0u;
      LOBYTE(qword_1EE2F8F68) = 0;
      qword_1EE2F9048 = 0x1770000001F40;
      xmmword_1EE2F9050 = 0u;
      qword_1EE2F9060 = (uint64_t)off_1E3407128;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      xmmword_1EE2F9068 = 0u;
      *(_OWORD *)algn_1EE2F9078 = 0u;
      v29 = *(unsigned int **)(StatusReg + 736);
      if (!v29)
        v29 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 + 1, v29));
      qword_1EE2F9088 = (uint64_t)v29;
      qword_1EE2F9060 = (uint64_t)off_1E31F7378;
      v31 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v31 = off_1E341BA48;
      v31[1] = WebCore::CoreAudioSharedUnit::verifyIsCapturing;
      v31[2] = 0;
      v31[3] = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
      qword_1EE2F9090 = (uint64_t)v31;
      byte_1EE2F9098 = 0;
      byte_1EE2F90A0 = 0;
      dword_1EE2F90A8 = 0;
      qword_1EE2F90B8 = 0;
      qword_1EE2F90C0 = 0;
      qword_1EE2F90B0 = 0;
      byte_1EE2F90C8 = 1;
    }
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)v1 + 22);
  if (v6)
    *(_DWORD *)v6 += 2;
  v32[0] = v6;
  WebCore::BaseAudioSharedUnit::setCaptureDevice((uint64_t)v5, v32, (const WTF::StringImpl *)*((unsigned int *)v1 + 78));
  v8 = v32[0];
  v32[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *((_BYTE *)v1 + 291);
  v10 = (int)*((double *)v1 + 31);
  if ((v9 != 0) != (*((_BYTE *)v5 + 16) != 0) || *((_DWORD *)v5 + 8) != v10)
  {
    *((_BYTE *)v5 + 16) = v9;
    *((_DWORD *)v5 + 8) = v10;
    v5[3] = *((_QWORD *)v1 + 30);
    this = (WebCore::CoreAudioCaptureSource *)WebCore::BaseAudioSharedUnit::addClient((WebCore::BaseAudioSharedUnit *)v5, v1);
  }
  else
  {
    v11 = *((double *)v1 + 30);
    v12 = *((double *)v5 + 3);
    *((_BYTE *)v5 + 16) = v9;
    *((_DWORD *)v5 + 8) = v10;
    *((double *)v5 + 3) = v11;
    this = (WebCore::CoreAudioCaptureSource *)WebCore::BaseAudioSharedUnit::addClient((WebCore::BaseAudioSharedUnit *)v5, v1);
    if (v11 == v12)
      goto LABEL_20;
  }
  if (*((_BYTE *)v5 + 36))
    *((_BYTE *)v5 + 37) = 1;
  else
    this = (WebCore::CoreAudioCaptureSource *)(*(uint64_t (**)(uint64_t *))(*v5 + 104))(v5);
LABEL_20:
  if (*((_BYTE *)v1 + 624))
  {
    v14 = (WTF::StringImpl *)*((_QWORD *)v1 + 72);
    *((_QWORD *)v1 + 72) = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = (WTF::StringImpl *)*((_QWORD *)v1 + 71);
    *((_QWORD *)v1 + 71) = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v13);
      else
        *(_DWORD *)v15 -= 2;
    }
    this = (WebCore::CoreAudioCaptureSource *)*((_QWORD *)v1 + 70);
    *((_QWORD *)v1 + 70) = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = (WebCore::CoreAudioCaptureSource *)WTF::StringImpl::destroy(this, v13);
      else
        *(_DWORD *)this -= 2;
    }
    *((_BYTE *)v1 + 624) = 0;
  }
LABEL_31:
  v16 = (uint64_t *)*((_QWORD *)v1 + 80);
  if (!v16)
  {
    v16 = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
    {
      WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)off_1E341A700;
      *(_QWORD *)algn_1EE2F8E58 = 0;
      byte_1EE2F8E60 = 1;
      qword_1EE2F8E68 = 0x3FF0000000000000;
      v22 = WebCore::AudioSession::sharedSession(this);
      dword_1EE2F8E70 = (int)(*(float (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v22 + 72))(v22);
      word_1EE2F8E74 = 0;
      byte_1EE2F8E76 = 0;
      byte_1EE2F8E90 = 0;
      qword_1EE2F8E98 = 0;
      unk_1EE2F8EA0 = 0;
      byte_1EE2F8EA8 = 0;
      qword_1EE2F8E78 = 0;
      byte_1EE2F8E80 = 0;
      qword_1EE2F8EB0 = 0;
      unk_1EE2F8EB8 = 0;
      word_1EE2F8EC0 = 0;
      byte_1EE2F8EC2 = 1;
      qword_1EE2F8EC8 = 0;
      *(_QWORD *)&dword_1EE2F8ED0 = 0;
      {
        WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
      }
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)&unk_1ECE91208, &WebCore::CoreAudioSharedUnit::unit(void)::singleton, (uint64_t)v32);
      WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)&off_1E341B0A8;
      byte_1EE2F8F50 = 0;
      byte_1EE2F8FB8 = 0;
      qword_1EE2F8FC0 = 0;
      word_1EE2F8FC8 = 0;
      qword_1EE2F8FD0 = 0;
      byte_1EE2F8FD8 = 0;
      byte_1EE2F9040 = 0;
      unk_1EE2F8ED8 = 0u;
      *(_OWORD *)&qword_1EE2F8EE8 = 0u;
      unk_1EE2F8EF1 = 0u;
      xmmword_1EE2F8F58 = 0u;
      LOBYTE(qword_1EE2F8F68) = 0;
      qword_1EE2F9048 = 0x1770000001F40;
      xmmword_1EE2F9050 = 0u;
      qword_1EE2F9060 = (uint64_t)off_1E3407128;
      v23 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      xmmword_1EE2F9068 = 0u;
      *(_OWORD *)algn_1EE2F9078 = 0u;
      v24 = *(unsigned int **)(v23 + 736);
      if (!v24)
        v24 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 + 1, v24));
      qword_1EE2F9088 = (uint64_t)v24;
      qword_1EE2F9060 = (uint64_t)off_1E31F7378;
      v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v26 = off_1E341BA48;
      v26[1] = WebCore::CoreAudioSharedUnit::verifyIsCapturing;
      v26[2] = 0;
      v26[3] = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
      qword_1EE2F9090 = (uint64_t)v26;
      byte_1EE2F9098 = 0;
      byte_1EE2F90A0 = 0;
      dword_1EE2F90A8 = 0;
      qword_1EE2F90B8 = 0;
      qword_1EE2F90C0 = 0;
      qword_1EE2F90B0 = 0;
      byte_1EE2F90C8 = 1;
    }
  }
  if (*((_BYTE *)v16 + 36))
    WebCore::BaseAudioSharedUnit::resume((WebCore::BaseAudioSharedUnit *)v16);
  *((_BYTE *)v16 + 114) = 1;
  (*(void (**)(uint64_t *))(*v16 + 128))(v16);
  v17 = *((_DWORD *)v16 + 10);
  *((_DWORD *)v16 + 10) = v17 + 1;
  if (!v17)
    WebCore::BaseAudioSharedUnit::continueStartProducingData((uint64_t)v16);
  LOBYTE(v32[0]) = 0;
  v36 = 0;
  std::__optional_storage_base<WebCore::RealtimeMediaSourceSettings,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RealtimeMediaSourceSettings,false>>((uint64_t)v1 + 520, (__int128 *)v32);
  if (v36)
  {
    v19 = v35;
    v35 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v34;
    v34 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v18);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = v33;
    v33 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v18);
      else
        *(_DWORD *)v21 -= 2;
    }
  }
}

_DWORD *WebCore::CoreAudioCaptureSource::stopProducingData(WebCore::CoreAudioCaptureSource *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  WebCore::AudioSessionIOS *v8;
  unint64_t StatusReg;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  _QWORD v13[4];

  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    v3 = (*(uint64_t (**)(WebCore::CoreAudioCaptureSource *))(*(_QWORD *)this + 24))(this);
    v4 = *((_QWORD *)this + 6);
    v13[0] = v3;
    v13[1] = v5;
    v13[2] = "stopProducingData";
    v13[3] = v4;
    if (*(_BYTE *)(v2 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v13);
  }
  v6 = (uint64_t *)*((_QWORD *)this + 80);
  if (!v6)
  {
    v6 = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
    {
      WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)off_1E341A700;
      *(_QWORD *)algn_1EE2F8E58 = 0;
      byte_1EE2F8E60 = 1;
      qword_1EE2F8E68 = 0x3FF0000000000000;
      v8 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)&WebCore::CoreAudioSharedUnit::unit(void)::singleton);
      dword_1EE2F8E70 = (int)(*(float (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v8 + 72))(v8);
      word_1EE2F8E74 = 0;
      byte_1EE2F8E76 = 0;
      byte_1EE2F8E90 = 0;
      qword_1EE2F8E98 = 0;
      unk_1EE2F8EA0 = 0;
      byte_1EE2F8EA8 = 0;
      qword_1EE2F8E78 = 0;
      byte_1EE2F8E80 = 0;
      qword_1EE2F8EB0 = 0;
      unk_1EE2F8EB8 = 0;
      word_1EE2F8EC0 = 0;
      byte_1EE2F8EC2 = 1;
      qword_1EE2F8EC8 = 0;
      *(_QWORD *)&dword_1EE2F8ED0 = 0;
      {
        WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
      }
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)&unk_1ECE91208, &WebCore::CoreAudioSharedUnit::unit(void)::singleton, (uint64_t)v13);
      WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)&off_1E341B0A8;
      byte_1EE2F8F50 = 0;
      byte_1EE2F8FB8 = 0;
      qword_1EE2F8FC0 = 0;
      word_1EE2F8FC8 = 0;
      qword_1EE2F8FD0 = 0;
      byte_1EE2F8FD8 = 0;
      byte_1EE2F9040 = 0;
      unk_1EE2F8ED8 = 0u;
      *(_OWORD *)&qword_1EE2F8EE8 = 0u;
      unk_1EE2F8EF1 = 0u;
      xmmword_1EE2F8F58 = 0u;
      LOBYTE(qword_1EE2F8F68) = 0;
      qword_1EE2F9048 = 0x1770000001F40;
      xmmword_1EE2F9050 = 0u;
      qword_1EE2F9060 = (uint64_t)off_1E3407128;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      xmmword_1EE2F9068 = 0u;
      *(_OWORD *)algn_1EE2F9078 = 0u;
      v10 = *(unsigned int **)(StatusReg + 736);
      if (!v10)
        v10 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      qword_1EE2F9088 = (uint64_t)v10;
      qword_1EE2F9060 = (uint64_t)off_1E31F7378;
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      v6 = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
      *v12 = off_1E341BA48;
      v12[1] = WebCore::CoreAudioSharedUnit::verifyIsCapturing;
      v12[2] = 0;
      v12[3] = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
      qword_1EE2F9090 = (uint64_t)v12;
      byte_1EE2F9098 = 0;
      byte_1EE2F90A0 = 0;
      dword_1EE2F90A8 = 0;
      qword_1EE2F90B8 = 0;
      qword_1EE2F90C0 = 0;
      qword_1EE2F90B0 = 0;
      byte_1EE2F90C8 = 1;
    }
  }
  return WebCore::BaseAudioSharedUnit::stopProducingData(v6);
}

char *WebCore::CoreAudioCaptureSource::capabilities(WebCore::CoreAudioCaptureSource *this)
{
  char *v1;
  char *v3;
  int v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WebCore::AudioSession *v7;
  void *v8;
  WTF *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF *v12;
  WebCore::AudioSession *v14;
  WebCore::AudioSessionIOS *v15;
  unint64_t StatusReg;
  unsigned int *v17;
  unsigned int v18;
  _QWORD *v19;
  _OWORD v20[3];
  WTF *v21[2];
  __int128 v22;
  __int128 v23;
  char v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26[2];
  WTF *v27[2];
  _BYTE v28[27];
  _BYTE v29[19];
  _BYTE v30[24];

  v1 = (char *)this + 320;
  if (!*((_BYTE *)this + 512))
  {
    v3 = WebCore::CoreAudioCaptureSource::settings(this);
    memset(v20, 0, sizeof(v20));
    *(_OWORD *)v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    *(_OWORD *)v26 = 0u;
    *(_OWORD *)v27 = 0u;
    memset(v28, 0, sizeof(v28));
    v4 = *(_DWORD *)(v3 + 98);
    *(_OWORD *)v29 = *(_OWORD *)(v3 + 83);
    *(_DWORD *)&v29[15] = v4;
    v5 = 104;
    if (!*((_BYTE *)this + 211))
      v5 = 96;
    v6 = *(WTF::StringImpl **)((char *)this + v5);
    if (v6)
      *(_DWORD *)v6 += 2;
    v25 = v6;
    v24 = 1;
    v22 = xmmword_1968A14C0;
    v7 = (WebCore::AudioSession *)*((_QWORD *)this + 80);
    if (!v7)
    {
      v7 = (WebCore::AudioSession *)&WebCore::CoreAudioSharedUnit::unit(void)::singleton;
        goto LABEL_23;
    }
    while (1)
    {
      *(_QWORD *)&v23 = (*(uint64_t (**)(WebCore::AudioSession *))(*(_QWORD *)v7 + 64))(v7);
      std::optional<WebCore::RealtimeMediaSourceCapabilities>::operator=[abi:sn180100]<WebCore::RealtimeMediaSourceCapabilities,void>((uint64_t)v1, (uint64_t)v20);
      v9 = v27[1];
      if (v27[1])
      {
        v27[1] = 0;
        *(_DWORD *)v28 = 0;
        WTF::fastFree(v9, v8);
      }
      v10 = v26[0];
      v26[0] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v8);
        else
          *(_DWORD *)v10 -= 2;
      }
      v11 = v25;
      v25 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v8);
        else
          *(_DWORD *)v11 -= 2;
      }
      v12 = v21[0];
      if (v21[0])
      {
        v21[0] = 0;
        LODWORD(v21[1]) = 0;
        WTF::fastFree(v12, v8);
      }
      if (*((_BYTE *)this + 512))
        break;
      v7 = (WebCore::AudioSession *)std::__throw_bad_optional_access[abi:sn180100]();
LABEL_23:
      *(_QWORD *)v7 = off_1E341A700;
      *((_QWORD *)v7 + 1) = 0;
      *((_BYTE *)v7 + 16) = 1;
      *((_QWORD *)v7 + 3) = 0x3FF0000000000000;
      v14 = v7;
      v15 = WebCore::AudioSession::sharedSession(v7);
      *((_DWORD *)v14 + 8) = (int)(*(float (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v15 + 72))(v15);
      *((_WORD *)v14 + 18) = 0;
      *((_BYTE *)v14 + 38) = 0;
      *((_BYTE *)v14 + 64) = 0;
      *((_QWORD *)v14 + 9) = 0;
      *((_QWORD *)v14 + 10) = 0;
      *((_BYTE *)v14 + 88) = 0;
      *((_QWORD *)v14 + 5) = 0;
      *((_BYTE *)v14 + 48) = 0;
      *((_QWORD *)v14 + 12) = 0;
      *((_QWORD *)v14 + 13) = 0;
      *((_WORD *)v14 + 56) = 0;
      *((_BYTE *)v14 + 114) = 1;
      *((_QWORD *)v14 + 15) = 0;
      *((_QWORD *)v14 + 16) = 0;
      {
        WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
      }
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)&unk_1ECE91208, &WebCore::CoreAudioSharedUnit::unit(void)::singleton, (uint64_t)v30);
      WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)&off_1E341B0A8;
      byte_1EE2F8F50 = 0;
      byte_1EE2F8FB8 = 0;
      qword_1EE2F8FC0 = 0;
      word_1EE2F8FC8 = 0;
      qword_1EE2F8FD0 = 0;
      byte_1EE2F8FD8 = 0;
      byte_1EE2F9040 = 0;
      unk_1EE2F8ED8 = 0u;
      *(_OWORD *)&qword_1EE2F8EE8 = 0u;
      unk_1EE2F8EF1 = 0u;
      xmmword_1EE2F8F58 = 0u;
      LOBYTE(qword_1EE2F8F68) = 0;
      qword_1EE2F9048 = 0x1770000001F40;
      xmmword_1EE2F9050 = 0u;
      qword_1EE2F9060 = (uint64_t)off_1E3407128;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      xmmword_1EE2F9068 = 0u;
      *(_OWORD *)algn_1EE2F9078 = 0u;
      v17 = *(unsigned int **)(StatusReg + 736);
      if (!v17)
        v17 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 + 1, v17));
      qword_1EE2F9088 = (uint64_t)v17;
      qword_1EE2F9060 = (uint64_t)off_1E31F7378;
      v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      v7 = (WebCore::AudioSession *)&WebCore::CoreAudioSharedUnit::unit(void)::singleton;
      *v19 = off_1E341BA48;
      v19[1] = WebCore::CoreAudioSharedUnit::verifyIsCapturing;
      v19[2] = 0;
      v19[3] = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
      qword_1EE2F9090 = (uint64_t)v19;
      byte_1EE2F9098 = 0;
      byte_1EE2F90A0 = 0;
      dword_1EE2F90A8 = 0;
      qword_1EE2F90B8 = 0;
      qword_1EE2F90C0 = 0;
      qword_1EE2F90B0 = 0;
      byte_1EE2F90C8 = 1;
    }
  }
  return v1;
}

char *WebCore::CoreAudioCaptureSource::settings(WebCore::CoreAudioCaptureSource *this)
{
  char *v1;
  WebCore::CoreAudioCaptureSource *v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t *v15;
  WebCore::AudioSessionIOS *v16;
  unint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  _QWORD *v20;
  WebCore::AudioSessionIOS *v21;
  unint64_t StatusReg;
  unsigned int *v23;
  unsigned int v24;
  _QWORD *v25;
  _BYTE v26[16];
  uint64_t v27;
  uint64_t v28;
  char v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  __int16 v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  _BYTE v38[24];

  v1 = (char *)this + 520;
  if (!*((_BYTE *)this + 624))
  {
    v2 = this;
    memset(v26, 0, 13);
    v28 = 0;
    v29 = 0;
    v31 = 0;
    v32 = 0;
    v30 = 0;
    v33 = 4;
    v34 = 0;
    v36 = 0;
    v37[0] = 0;
    v35 = 0x3FF0000000000000;
    *(_QWORD *)((char *)v37 + 6) = 0;
    v27 = *((_QWORD *)this + 30);
    v3 = (uint64_t *)*((_QWORD *)this + 80);
    if (!v3)
    {
      v3 = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
        goto LABEL_35;
    }
    while (1)
    {
      if (*((_BYTE *)v3 + 38))
      {
        v4 = (uint64_t *)*((_QWORD *)v2 + 80);
        if (!v4)
        {
          v4 = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
          {
            WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)off_1E341A700;
            *(_QWORD *)algn_1EE2F8E58 = 0;
            byte_1EE2F8E60 = 1;
            qword_1EE2F8E68 = 0x3FF0000000000000;
            v21 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)&WebCore::CoreAudioSharedUnit::unit(void)::singleton);
            dword_1EE2F8E70 = (int)(*(float (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v21 + 72))(v21);
            word_1EE2F8E74 = 0;
            byte_1EE2F8E76 = 0;
            byte_1EE2F8E90 = 0;
            qword_1EE2F8E98 = 0;
            unk_1EE2F8EA0 = 0;
            byte_1EE2F8EA8 = 0;
            qword_1EE2F8E78 = 0;
            byte_1EE2F8E80 = 0;
            qword_1EE2F8EB0 = 0;
            unk_1EE2F8EB8 = 0;
            word_1EE2F8EC0 = 0;
            byte_1EE2F8EC2 = 1;
            qword_1EE2F8EC8 = 0;
            *(_QWORD *)&dword_1EE2F8ED0 = 0;
            {
              WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
            }
            WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)&unk_1ECE91208, &WebCore::CoreAudioSharedUnit::unit(void)::singleton, (uint64_t)v38);
            WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)&off_1E341B0A8;
            byte_1EE2F8F50 = 0;
            byte_1EE2F8FB8 = 0;
            qword_1EE2F8FC0 = 0;
            word_1EE2F8FC8 = 0;
            qword_1EE2F8FD0 = 0;
            byte_1EE2F8FD8 = 0;
            byte_1EE2F9040 = 0;
            unk_1EE2F8ED8 = 0u;
            *(_OWORD *)&qword_1EE2F8EE8 = 0u;
            unk_1EE2F8EF1 = 0u;
            xmmword_1EE2F8F58 = 0u;
            LOBYTE(qword_1EE2F8F68) = 0;
            qword_1EE2F9048 = 0x1770000001F40;
            xmmword_1EE2F9050 = 0u;
            qword_1EE2F9060 = (uint64_t)off_1E3407128;
            StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
            xmmword_1EE2F9068 = 0u;
            *(_OWORD *)algn_1EE2F9078 = 0u;
            v23 = *(unsigned int **)(StatusReg + 736);
            if (!v23)
              v23 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 + 1, v23));
            qword_1EE2F9088 = (uint64_t)v23;
            qword_1EE2F9060 = (uint64_t)off_1E31F7378;
            v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
            v4 = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
            *v25 = off_1E341BA48;
            v25[1] = WebCore::CoreAudioSharedUnit::verifyIsCapturing;
            v25[2] = 0;
            v25[3] = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
            qword_1EE2F9090 = (uint64_t)v25;
            byte_1EE2F9098 = 0;
            byte_1EE2F90A0 = 0;
            dword_1EE2F90A8 = 0;
            qword_1EE2F90B8 = 0;
            qword_1EE2F90C0 = 0;
            qword_1EE2F90B0 = 0;
            byte_1EE2F90C8 = 1;
          }
        }
        v5 = (*(uint64_t (**)(uint64_t *))(*v4 + 72))(v4);
      }
      else
      {
        v5 = (int)*((double *)v2 + 31);
      }
      LODWORD(v28) = v5;
      v6 = 104;
      if (!*((_BYTE *)v2 + 211))
        v6 = 96;
      v7 = *(WTF::StringImpl **)((char *)v2 + v6);
      if (v7)
        *(_DWORD *)v7 += 2;
      v30 = v7;
      v8 = (WTF::StringImpl *)*((_QWORD *)v2 + 25);
      if (v8 && *((_DWORD *)v8 + 1) || (v8 = (WTF::StringImpl *)*((_QWORD *)v2 + 22)) != 0)
        *(_DWORD *)v8 += 2;
      v31 = v8;
      v9 = (WTF::StringImpl *)*((_QWORD *)v2 + 15);
      if (v9)
        *(_DWORD *)v9 += 2;
      v32 = v9;
      v29 = *((_BYTE *)v2 + 291);
      *(_DWORD *)((char *)&v36 + 3) = 0;
      HIBYTE(v36) = 0;
      LODWORD(v37[0]) = 16777473;
      WORD2(v37[0]) = 257;
      *(_QWORD *)((char *)v37 + 6) = 0;
      std::optional<WebCore::RealtimeMediaSourceSettings>::operator=[abi:sn180100]<WebCore::RealtimeMediaSourceSettings,void>((uint64_t)v1, (uint64_t)v26);
      v11 = v32;
      v32 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
      v12 = v31;
      v31 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v10);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = v30;
      v30 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v10);
        else
          *(_DWORD *)v13 -= 2;
      }
      if (*((_BYTE *)v2 + 624))
        break;
      this = (WebCore::CoreAudioCaptureSource *)std::__throw_bad_optional_access[abi:sn180100]();
LABEL_35:
      *v3 = (uint64_t)off_1E341A700;
      v3[1] = 0;
      *((_BYTE *)v3 + 16) = 1;
      v3[3] = 0x3FF0000000000000;
      v15 = v3;
      v16 = WebCore::AudioSession::sharedSession(this);
      *((_DWORD *)v15 + 8) = (int)(*(float (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v16 + 72))(v16);
      *((_WORD *)v15 + 18) = 0;
      *((_BYTE *)v15 + 38) = 0;
      *((_BYTE *)v15 + 64) = 0;
      v15[9] = 0;
      v15[10] = 0;
      *((_BYTE *)v15 + 88) = 0;
      v15[5] = 0;
      *((_BYTE *)v15 + 48) = 0;
      v15[12] = 0;
      v15[13] = 0;
      *((_WORD *)v15 + 56) = 0;
      *((_BYTE *)v15 + 114) = 1;
      v15[15] = 0;
      v15[16] = 0;
      {
        WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
      }
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)&unk_1ECE91208, &WebCore::CoreAudioSharedUnit::unit(void)::singleton, (uint64_t)v38);
      WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)&off_1E341B0A8;
      byte_1EE2F8F50 = 0;
      byte_1EE2F8FB8 = 0;
      qword_1EE2F8FC0 = 0;
      word_1EE2F8FC8 = 0;
      qword_1EE2F8FD0 = 0;
      byte_1EE2F8FD8 = 0;
      byte_1EE2F9040 = 0;
      unk_1EE2F8ED8 = 0u;
      *(_OWORD *)&qword_1EE2F8EE8 = 0u;
      unk_1EE2F8EF1 = 0u;
      xmmword_1EE2F8F58 = 0u;
      LOBYTE(qword_1EE2F8F68) = 0;
      qword_1EE2F9048 = 0x1770000001F40;
      xmmword_1EE2F9050 = 0u;
      qword_1EE2F9060 = (uint64_t)off_1E3407128;
      v17 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      xmmword_1EE2F9068 = 0u;
      *(_OWORD *)algn_1EE2F9078 = 0u;
      v18 = *(unsigned int **)(v17 + 736);
      if (!v18)
        v18 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
      qword_1EE2F9088 = (uint64_t)v18;
      qword_1EE2F9060 = (uint64_t)off_1E31F7378;
      v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      v3 = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
      *v20 = off_1E341BA48;
      v20[1] = WebCore::CoreAudioSharedUnit::verifyIsCapturing;
      v20[2] = 0;
      v20[3] = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
      qword_1EE2F9090 = (uint64_t)v20;
      byte_1EE2F9098 = 0;
      byte_1EE2F90A0 = 0;
      dword_1EE2F90A8 = 0;
      qword_1EE2F90B8 = 0;
      qword_1EE2F90C0 = 0;
      qword_1EE2F90B0 = 0;
      byte_1EE2F90C8 = 1;
    }
  }
  return v1;
}

uint64_t *WebCore::CoreAudioCaptureSource::settingsDidChange(uint64_t *result, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WebCore::AudioSessionIOS *v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  WebCore::AudioSessionIOS *v12;
  unint64_t StatusReg;
  unsigned int *v14;
  unsigned int v15;
  WebCore::AudioSessionIOS *v16;
  unint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  _QWORD *v20;
  WTF::StringImpl *v21;
  _BYTE v22[24];

  v2 = result;
  if (!*((_BYTE *)result + 633))
    goto LABEL_16;
  if ((a2 & 0x80) != 0)
  {
    v3 = (uint64_t *)result[80];
    if (!v3)
    {
      v3 = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
      {
        v21 = a2;
        WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)off_1E341A700;
        *(_QWORD *)algn_1EE2F8E58 = 0;
        byte_1EE2F8E60 = 1;
        qword_1EE2F8E68 = 0x3FF0000000000000;
        v12 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)result);
        dword_1EE2F8E70 = (int)(*(float (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v12 + 72))(v12);
        word_1EE2F8E74 = 0;
        byte_1EE2F8E76 = 0;
        byte_1EE2F8E90 = 0;
        qword_1EE2F8E98 = 0;
        unk_1EE2F8EA0 = 0;
        byte_1EE2F8EA8 = 0;
        qword_1EE2F8E78 = 0;
        byte_1EE2F8E80 = 0;
        qword_1EE2F8EB0 = 0;
        unk_1EE2F8EB8 = 0;
        word_1EE2F8EC0 = 0;
        byte_1EE2F8EC2 = 1;
        qword_1EE2F8EC8 = 0;
        *(_QWORD *)&dword_1EE2F8ED0 = 0;
        {
          WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
        }
        WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)&unk_1ECE91208, &WebCore::CoreAudioSharedUnit::unit(void)::singleton, (uint64_t)v22);
        WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)&off_1E341B0A8;
        byte_1EE2F8F50 = 0;
        byte_1EE2F8FB8 = 0;
        qword_1EE2F8FC0 = 0;
        word_1EE2F8FC8 = 0;
        qword_1EE2F8FD0 = 0;
        byte_1EE2F8FD8 = 0;
        byte_1EE2F9040 = 0;
        unk_1EE2F8ED8 = 0u;
        *(_OWORD *)&qword_1EE2F8EE8 = 0u;
        unk_1EE2F8EF1 = 0u;
        xmmword_1EE2F8F58 = 0u;
        LOBYTE(qword_1EE2F8F68) = 0;
        qword_1EE2F9048 = 0x1770000001F40;
        xmmword_1EE2F9050 = 0u;
        qword_1EE2F9060 = (uint64_t)off_1E3407128;
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        xmmword_1EE2F9068 = 0u;
        *(_OWORD *)algn_1EE2F9078 = 0u;
        v14 = *(unsigned int **)(StatusReg + 736);
        if (!v14)
          v14 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
        qword_1EE2F9088 = (uint64_t)v14;
        qword_1EE2F9060 = (uint64_t)off_1E31F7378;
        result = (uint64_t *)WTF::fastMalloc((WTF *)0x20);
        v3 = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
        *result = (uint64_t)off_1E341BA48;
        result[1] = (uint64_t)WebCore::CoreAudioSharedUnit::verifyIsCapturing;
        result[2] = 0;
        result[3] = (uint64_t)&WebCore::CoreAudioSharedUnit::unit(void)::singleton;
        qword_1EE2F9090 = (uint64_t)result;
        byte_1EE2F9098 = 0;
        byte_1EE2F90A0 = 0;
        dword_1EE2F90A8 = 0;
        qword_1EE2F90B8 = 0;
        qword_1EE2F90C0 = 0;
        qword_1EE2F90B0 = 0;
        byte_1EE2F90C8 = 1;
        a2 = v21;
      }
    }
    *((_BYTE *)v3 + 16) = *((_BYTE *)v2 + 291);
    if ((a2 & 0x20) == 0)
      goto LABEL_11;
  }
  else if ((a2 & 0x20) == 0)
  {
    goto LABEL_16;
  }
  v4 = (uint64_t *)v2[80];
  if (!v4)
  {
    v4 = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
    {
      WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)off_1E341A700;
      *(_QWORD *)algn_1EE2F8E58 = 0;
      byte_1EE2F8E60 = 1;
      qword_1EE2F8E68 = 0x3FF0000000000000;
      v16 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)result);
      dword_1EE2F8E70 = (int)(*(float (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v16 + 72))(v16);
      word_1EE2F8E74 = 0;
      byte_1EE2F8E76 = 0;
      byte_1EE2F8E90 = 0;
      qword_1EE2F8E98 = 0;
      unk_1EE2F8EA0 = 0;
      byte_1EE2F8EA8 = 0;
      qword_1EE2F8E78 = 0;
      byte_1EE2F8E80 = 0;
      qword_1EE2F8EB0 = 0;
      unk_1EE2F8EB8 = 0;
      word_1EE2F8EC0 = 0;
      byte_1EE2F8EC2 = 1;
      qword_1EE2F8EC8 = 0;
      *(_QWORD *)&dword_1EE2F8ED0 = 0;
      {
        WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
      }
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)&unk_1ECE91208, &WebCore::CoreAudioSharedUnit::unit(void)::singleton, (uint64_t)v22);
      WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)&off_1E341B0A8;
      byte_1EE2F8F50 = 0;
      byte_1EE2F8FB8 = 0;
      qword_1EE2F8FC0 = 0;
      word_1EE2F8FC8 = 0;
      qword_1EE2F8FD0 = 0;
      byte_1EE2F8FD8 = 0;
      byte_1EE2F9040 = 0;
      unk_1EE2F8ED8 = 0u;
      *(_OWORD *)&qword_1EE2F8EE8 = 0u;
      unk_1EE2F8EF1 = 0u;
      xmmword_1EE2F8F58 = 0u;
      LOBYTE(qword_1EE2F8F68) = 0;
      qword_1EE2F9048 = 0x1770000001F40;
      xmmword_1EE2F9050 = 0u;
      qword_1EE2F9060 = (uint64_t)off_1E3407128;
      v17 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      xmmword_1EE2F9068 = 0u;
      *(_OWORD *)algn_1EE2F9078 = 0u;
      v18 = *(unsigned int **)(v17 + 736);
      if (!v18)
        v18 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
      qword_1EE2F9088 = (uint64_t)v18;
      qword_1EE2F9060 = (uint64_t)off_1E31F7378;
      v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      v4 = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
      *v20 = off_1E341BA48;
      v20[1] = WebCore::CoreAudioSharedUnit::verifyIsCapturing;
      v20[2] = 0;
      v20[3] = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
      qword_1EE2F9090 = (uint64_t)v20;
      byte_1EE2F9098 = 0;
      byte_1EE2F90A0 = 0;
      dword_1EE2F90A8 = 0;
      qword_1EE2F90B8 = 0;
      qword_1EE2F90C0 = 0;
      qword_1EE2F90B0 = 0;
      byte_1EE2F90C8 = 1;
    }
  }
  *((_DWORD *)v4 + 8) = (int)*((double *)v2 + 31);
LABEL_11:
  result = (uint64_t *)v2[80];
  if (!result)
  {
    result = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
    {
      WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)off_1E341A700;
      *(_QWORD *)algn_1EE2F8E58 = 0;
      byte_1EE2F8E60 = 1;
      qword_1EE2F8E68 = 0x3FF0000000000000;
      v7 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)&WebCore::CoreAudioSharedUnit::unit(void)::singleton);
      dword_1EE2F8E70 = (int)(*(float (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v7 + 72))(v7);
      word_1EE2F8E74 = 0;
      byte_1EE2F8E76 = 0;
      byte_1EE2F8E90 = 0;
      qword_1EE2F8E98 = 0;
      unk_1EE2F8EA0 = 0;
      byte_1EE2F8EA8 = 0;
      qword_1EE2F8E78 = 0;
      byte_1EE2F8E80 = 0;
      qword_1EE2F8EB0 = 0;
      unk_1EE2F8EB8 = 0;
      word_1EE2F8EC0 = 0;
      byte_1EE2F8EC2 = 1;
      qword_1EE2F8EC8 = 0;
      *(_QWORD *)&dword_1EE2F8ED0 = 0;
      {
        WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
      }
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)&unk_1ECE91208, &WebCore::CoreAudioSharedUnit::unit(void)::singleton, (uint64_t)v22);
      WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)&off_1E341B0A8;
      byte_1EE2F8F50 = 0;
      byte_1EE2F8FB8 = 0;
      qword_1EE2F8FC0 = 0;
      word_1EE2F8FC8 = 0;
      qword_1EE2F8FD0 = 0;
      byte_1EE2F8FD8 = 0;
      byte_1EE2F9040 = 0;
      unk_1EE2F8ED8 = 0u;
      *(_OWORD *)&qword_1EE2F8EE8 = 0u;
      unk_1EE2F8EF1 = 0u;
      xmmword_1EE2F8F58 = 0u;
      LOBYTE(qword_1EE2F8F68) = 0;
      qword_1EE2F9048 = 0x1770000001F40;
      xmmword_1EE2F9050 = 0u;
      qword_1EE2F9060 = (uint64_t)off_1E3407128;
      v8 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      xmmword_1EE2F9068 = 0u;
      *(_OWORD *)algn_1EE2F9078 = 0u;
      v9 = *(unsigned int **)(v8 + 736);
      if (!v9)
        v9 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      qword_1EE2F9088 = (uint64_t)v9;
      qword_1EE2F9060 = (uint64_t)off_1E31F7378;
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      result = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
      *v11 = off_1E341BA48;
      v11[1] = WebCore::CoreAudioSharedUnit::verifyIsCapturing;
      v11[2] = 0;
      v11[3] = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
      qword_1EE2F9090 = (uint64_t)v11;
      byte_1EE2F9098 = 0;
      byte_1EE2F90A0 = 0;
      dword_1EE2F90A8 = 0;
      qword_1EE2F90B8 = 0;
      qword_1EE2F90C0 = 0;
      qword_1EE2F90B0 = 0;
      byte_1EE2F90C8 = 1;
    }
  }
  if (*((_BYTE *)result + 36))
    *((_BYTE *)result + 37) = 1;
  else
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 104))(result);
LABEL_16:
  if (*((_BYTE *)v2 + 624))
  {
    v5 = (WTF::StringImpl *)v2[72];
    v2[72] = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = (WTF::StringImpl *)v2[71];
    v2[71] = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
    result = (uint64_t *)v2[70];
    v2[70] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      else
        *(_DWORD *)result -= 2;
    }
    *((_BYTE *)v2 + 624) = 0;
  }
  return result;
}

uint64_t WebCore::CoreAudioCaptureSource::interrupted(WebCore::CoreAudioCaptureSource *this)
{
  uint64_t *v1;
  WebCore::AudioSessionIOS *v3;
  unint64_t StatusReg;
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v7;
  _BYTE v8[24];

  v1 = (uint64_t *)*((_QWORD *)this + 80);
  if (!v1)
  {
    v1 = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
    {
      WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)off_1E341A700;
      *(_QWORD *)algn_1EE2F8E58 = 0;
      byte_1EE2F8E60 = 1;
      qword_1EE2F8E68 = 0x3FF0000000000000;
      v3 = WebCore::AudioSession::sharedSession(this);
      dword_1EE2F8E70 = (int)(*(float (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v3 + 72))(v3);
      word_1EE2F8E74 = 0;
      byte_1EE2F8E76 = 0;
      byte_1EE2F8E90 = 0;
      qword_1EE2F8E98 = 0;
      unk_1EE2F8EA0 = 0;
      byte_1EE2F8EA8 = 0;
      qword_1EE2F8E78 = 0;
      byte_1EE2F8E80 = 0;
      qword_1EE2F8EB0 = 0;
      unk_1EE2F8EB8 = 0;
      word_1EE2F8EC0 = 0;
      byte_1EE2F8EC2 = 1;
      qword_1EE2F8EC8 = 0;
      *(_QWORD *)&dword_1EE2F8ED0 = 0;
      {
        WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
      }
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)&unk_1ECE91208, &WebCore::CoreAudioSharedUnit::unit(void)::singleton, (uint64_t)v8);
      WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)&off_1E341B0A8;
      byte_1EE2F8F50 = 0;
      byte_1EE2F8FB8 = 0;
      qword_1EE2F8FC0 = 0;
      word_1EE2F8FC8 = 0;
      qword_1EE2F8FD0 = 0;
      byte_1EE2F8FD8 = 0;
      byte_1EE2F9040 = 0;
      unk_1EE2F8ED8 = 0u;
      *(_OWORD *)&qword_1EE2F8EE8 = 0u;
      unk_1EE2F8EF1 = 0u;
      xmmword_1EE2F8F58 = 0u;
      LOBYTE(qword_1EE2F8F68) = 0;
      qword_1EE2F9048 = 0x1770000001F40;
      xmmword_1EE2F9050 = 0u;
      qword_1EE2F9060 = (uint64_t)off_1E3407128;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      xmmword_1EE2F9068 = 0u;
      *(_OWORD *)algn_1EE2F9078 = 0u;
      v5 = *(unsigned int **)(StatusReg + 736);
      if (!v5)
        v5 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
      qword_1EE2F9088 = (uint64_t)v5;
      qword_1EE2F9060 = (uint64_t)off_1E31F7378;
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      v1 = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
      *v7 = off_1E341BA48;
      v7[1] = WebCore::CoreAudioSharedUnit::verifyIsCapturing;
      v7[2] = 0;
      v7[3] = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
      qword_1EE2F9090 = (uint64_t)v7;
      byte_1EE2F9098 = 0;
      byte_1EE2F90A0 = 0;
      dword_1EE2F90A8 = 0;
      qword_1EE2F90B8 = 0;
      qword_1EE2F90C0 = 0;
      qword_1EE2F90B0 = 0;
      byte_1EE2F90C8 = 1;
    }
  }
  return *((unsigned __int8 *)v1 + 36);
}

uint64_t WebCore::CoreAudioCaptureSource::delaySamples(uint64_t a1)
{
  uint64_t *v1;
  WebCore::AudioSessionIOS *v3;
  unint64_t StatusReg;
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v7;
  _BYTE v8[24];

  v1 = *(uint64_t **)(a1 + 640);
  if (v1)
    return (*(uint64_t (**)(uint64_t *))(*v1 + 40))(v1);
  v1 = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
    return (*(uint64_t (**)(uint64_t *))(*v1 + 40))(v1);
  WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)off_1E341A700;
  *(_QWORD *)algn_1EE2F8E58 = 0;
  byte_1EE2F8E60 = 1;
  qword_1EE2F8E68 = 0x3FF0000000000000;
  v3 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)&WebCore::CoreAudioSharedUnit::unit(void)::singleton);
  dword_1EE2F8E70 = (int)(*(float (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v3 + 72))(v3);
  word_1EE2F8E74 = 0;
  byte_1EE2F8E76 = 0;
  byte_1EE2F8E90 = 0;
  qword_1EE2F8E98 = 0;
  unk_1EE2F8EA0 = 0;
  byte_1EE2F8EA8 = 0;
  qword_1EE2F8E78 = 0;
  byte_1EE2F8E80 = 0;
  qword_1EE2F8EB0 = 0;
  unk_1EE2F8EB8 = 0;
  word_1EE2F8EC0 = 0;
  byte_1EE2F8EC2 = 1;
  qword_1EE2F8EC8 = 0;
  *(_QWORD *)&dword_1EE2F8ED0 = 0;
  {
    WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
  }
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)&unk_1ECE91208, &WebCore::CoreAudioSharedUnit::unit(void)::singleton, (uint64_t)v8);
  WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)&off_1E341B0A8;
  byte_1EE2F8F50 = 0;
  byte_1EE2F8FB8 = 0;
  qword_1EE2F8FC0 = 0;
  word_1EE2F8FC8 = 0;
  qword_1EE2F8FD0 = 0;
  byte_1EE2F8FD8 = 0;
  byte_1EE2F9040 = 0;
  unk_1EE2F8ED8 = 0u;
  *(_OWORD *)&qword_1EE2F8EE8 = 0u;
  unk_1EE2F8EF1 = 0u;
  xmmword_1EE2F8F58 = 0u;
  LOBYTE(qword_1EE2F8F68) = 0;
  qword_1EE2F9048 = 0x1770000001F40;
  xmmword_1EE2F9050 = 0u;
  qword_1EE2F9060 = (uint64_t)off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  xmmword_1EE2F9068 = 0u;
  *(_OWORD *)algn_1EE2F9078 = 0u;
  v5 = *(unsigned int **)(StatusReg + 736);
  if (!v5)
    v5 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  qword_1EE2F9088 = (uint64_t)v5;
  qword_1EE2F9060 = (uint64_t)off_1E31F7378;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = off_1E341BA48;
  v7[1] = WebCore::CoreAudioSharedUnit::verifyIsCapturing;
  v7[2] = 0;
  v7[3] = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
  qword_1EE2F9090 = (uint64_t)v7;
  byte_1EE2F9098 = 0;
  byte_1EE2F90A0 = 0;
  dword_1EE2F90A8 = 0;
  qword_1EE2F90B8 = 0;
  qword_1EE2F90C0 = 0;
  qword_1EE2F90B0 = 0;
  byte_1EE2F90C8 = 1;
  return (*(uint64_t (**)(uint64_t *))(WebCore::CoreAudioSharedUnit::unit(void)::singleton + 40))(&WebCore::CoreAudioSharedUnit::unit(void)::singleton);
}

WebCore::AudioSession *WebCore::CoreAudioCaptureSource::setIsInBackground(WebCore::CoreAudioCaptureSource *this, char a2)
{
  WebCore::AudioSession *result;
  WebCore::MediaCaptureStatusBarManager *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  WebCore::MediaCaptureStatusBarManager *v8;
  WTF *v9;
  void *v10;
  void *v11;
  WTF *v12;
  void *v13;
  WebCore::AudioSessionIOS *v14;
  unint64_t StatusReg;
  unsigned int *v16;
  unsigned int v17;
  _QWORD *v18;
  _BYTE v19[24];

  result = (WebCore::AudioSession *)(*(uint64_t (**)(WebCore::CoreAudioCaptureSource *))(*(_QWORD *)this + 64))(this);
  if ((_DWORD)result)
  {
    {
      WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)off_1E341A700;
      *(_QWORD *)algn_1EE2F8E58 = 0;
      byte_1EE2F8E60 = 1;
      qword_1EE2F8E68 = 0x3FF0000000000000;
      v14 = WebCore::AudioSession::sharedSession(result);
      dword_1EE2F8E70 = (int)(*(float (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v14 + 72))(v14);
      word_1EE2F8E74 = 0;
      byte_1EE2F8E76 = 0;
      byte_1EE2F8E90 = 0;
      qword_1EE2F8E98 = 0;
      unk_1EE2F8EA0 = 0;
      byte_1EE2F8EA8 = 0;
      qword_1EE2F8E78 = 0;
      byte_1EE2F8E80 = 0;
      qword_1EE2F8EB0 = 0;
      unk_1EE2F8EB8 = 0;
      word_1EE2F8EC0 = 0;
      byte_1EE2F8EC2 = 1;
      qword_1EE2F8EC8 = 0;
      *(_QWORD *)&dword_1EE2F8ED0 = 0;
      {
        WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
      }
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)&unk_1ECE91208, &WebCore::CoreAudioSharedUnit::unit(void)::singleton, (uint64_t)v19);
      WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)&off_1E341B0A8;
      byte_1EE2F8F50 = 0;
      byte_1EE2F8FB8 = 0;
      qword_1EE2F8FC0 = 0;
      word_1EE2F8FC8 = 0;
      qword_1EE2F8FD0 = 0;
      byte_1EE2F8FD8 = 0;
      byte_1EE2F9040 = 0;
      unk_1EE2F8ED8 = 0u;
      *(_OWORD *)&qword_1EE2F8EE8 = 0u;
      unk_1EE2F8EF1 = 0u;
      xmmword_1EE2F8F58 = 0u;
      LOBYTE(qword_1EE2F8F68) = 0;
      qword_1EE2F9048 = 0x1770000001F40;
      xmmword_1EE2F9050 = 0u;
      qword_1EE2F9060 = (uint64_t)off_1E3407128;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      xmmword_1EE2F9068 = 0u;
      *(_OWORD *)algn_1EE2F9078 = 0u;
      v16 = *(unsigned int **)(StatusReg + 736);
      if (!v16)
        v16 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
      qword_1EE2F9088 = (uint64_t)v16;
      qword_1EE2F9060 = (uint64_t)off_1E31F7378;
      v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v18 = off_1E341BA48;
      v18[1] = WebCore::CoreAudioSharedUnit::verifyIsCapturing;
      v18[2] = 0;
      v18[3] = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
      qword_1EE2F9090 = (uint64_t)v18;
      byte_1EE2F9098 = 0;
      byte_1EE2F90A0 = 0;
      dword_1EE2F90A8 = 0;
      qword_1EE2F90B8 = 0;
      qword_1EE2F90C0 = 0;
      qword_1EE2F90B0 = 0;
      byte_1EE2F90C8 = 1;
    }
    {
      result = (WebCore::AudioSession *)SpringBoardServicesLibrary(void)::frameworkLibrary;
      if (!SpringBoardServicesLibrary(void)::frameworkLibrary)
        return result;
    }
    else
    {
      result = (WebCore::AudioSession *)dlopen("/System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices", 2);
      SpringBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)result;
      if (!result)
        return result;
    }
    if ((a2 & 1) != 0)
    {
      if (!qword_1EE2F90B8)
      {
        v4 = (WebCore::MediaCaptureStatusBarManager *)WTF::fastMalloc((WTF *)0x20);
        v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v5 = off_1E341B930;
        v5[1] = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
        v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v6 = off_1E341B958;
        v6[1] = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
        *((_QWORD *)v4 + 2) = v5;
        *((_QWORD *)v4 + 3) = v6;
        v8 = (WebCore::MediaCaptureStatusBarManager *)qword_1EE2F90B8;
        qword_1EE2F90B8 = (uint64_t)v4;
        if (v8)
        {
          WebCore::MediaCaptureStatusBarManager::~MediaCaptureStatusBarManager(v8, v7);
          WTF::fastFree(v9, v10);
          v4 = (WebCore::MediaCaptureStatusBarManager *)qword_1EE2F90B8;
        }
        return (WebCore::AudioSession *)WebCore::MediaCaptureStatusBarManager::start(v4);
      }
    }
    else if (qword_1EE2F90B8)
    {
      objc_msgSend(*(id *)(qword_1EE2F90B8 + 8), "stop");
      result = (WebCore::AudioSession *)qword_1EE2F90B8;
      qword_1EE2F90B8 = 0;
      if (result)
      {
        WebCore::MediaCaptureStatusBarManager::~MediaCaptureStatusBarManager(result, v11);
        return (WebCore::AudioSession *)WTF::fastFree(v12, v13);
      }
    }
  }
  return result;
}

uint64_t WebCore::CoreAudioCaptureSource::handleNewCurrentMicrophoneDevice(uint64_t **a1, uint64_t a2)
{
  uint64_t result;
  const WTF::StringImpl *v5;
  NSObject *v6;
  void *v7;
  char *v8;
  char *v9;
  WTF::AtomStringImpl **v10;
  WTF::AtomStringImpl *v11;
  WTF::StringImpl **v12;
  char v13;
  WTF::StringImpl *v14;
  const WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  void *v21;
  WTF *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  _QWORD *v26;
  WTF *v27;
  WTF *v28;
  _BYTE buf[12];
  __int16 v30;
  char *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF *v37;
  int v38;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  result = ((uint64_t (*)(uint64_t **))(*a1)[8])(a1);
  if (!(_DWORD)result)
    return result;
  result = WTF::equal((WTF *)a1[22], *(const WTF::StringImpl **)a2, v5);
  if ((result & 1) != 0)
    return result;
  v6 = qword_1ECE7CD60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_INFO))
  {
    WTF::String::utf8();
    if (v28)
      v8 = (char *)v28 + 16;
    else
      v8 = 0;
    {
      WebCore::CaptureDevice::label(void)::{lambda(void)#1}::operator() const(void)::impl += 2;
      WebCore::CaptureDevice::label(void)const::airPods = &WebCore::CaptureDevice::label(void)::{lambda(void)#1}::operator() const(void)::impl;
    }
    if (*(unsigned __int8 *)(a2 + 8) - 1 <= 1 && *(_QWORD *)(a2 + 16))
      WTF::StringImpl::find();
    WTF::String::utf8();
    if (v27)
      v9 = (char *)v27 + 16;
    else
      v9 = 0;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v8;
    v30 = 2080;
    v31 = v9;
    _os_log_impl(&dword_1940B8000, v6, OS_LOG_TYPE_INFO, "CoreAudioCaptureSource switching from '%s' to '%s'", buf, 0x16u);
    if (v27)
    {
      if (*(_DWORD *)v27 == 1)
        WTF::fastFree(v27, v7);
      else
        --*(_DWORD *)v27;
    }
    if (v28)
    {
      if (*(_DWORD *)v28 == 1)
        WTF::fastFree(v28, v7);
      else
        --*(_DWORD *)v28;
    }
  }
  {
    WebCore::CaptureDevice::label(void)::{lambda(void)#1}::operator() const(void)::impl += 2;
    WebCore::CaptureDevice::label(void)const::airPods = &WebCore::CaptureDevice::label(void)::{lambda(void)#1}::operator() const(void)::impl;
  }
  if (*(unsigned __int8 *)(a2 + 8) - 1 > 1
    || (!WebCore::CaptureDevice::label(void)const::airPods
      ? (v7 = 0)
      : (v7 = (void *)*((_QWORD *)WebCore::CaptureDevice::label(void)const::airPods + 1)),
        !*(_QWORD *)(a2 + 16) || WTF::StringImpl::find() == -1))
  {
    v10 = (WTF::AtomStringImpl **)(a2 + 16);
  }
  else
  {
    v10 = (WTF::AtomStringImpl **)&WebCore::CaptureDevice::label(void)const::airPods;
  }
  v11 = *v10;
  if (*v10)
  {
    if ((*((_BYTE *)v11 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v11 += 2;
      v12 = (WTF::StringImpl **)(a1 + 15);
LABEL_33:
      v13 = 0;
      *(_DWORD *)v11 += 2;
      goto LABEL_34;
    }
    WTF::AtomStringImpl::addSlowCase(v11, (WTF::StringImpl *)v7);
    v11 = *(WTF::AtomStringImpl **)buf;
    v12 = (WTF::StringImpl **)(a1 + 15);
    if (*(_QWORD *)buf)
      goto LABEL_33;
  }
  else
  {
    v12 = (WTF::StringImpl **)(a1 + 15);
  }
  v13 = 1;
LABEL_34:
  v14 = *v12;
  *v12 = v11;
  if (!v14)
    goto LABEL_37;
  if (*(_DWORD *)v14 != 2)
  {
    *(_DWORD *)v14 -= 2;
LABEL_37:
    if ((v13 & 1) == 0)
      goto LABEL_38;
    goto LABEL_40;
  }
  WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v7);
  if ((v13 & 1) == 0)
  {
LABEL_38:
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v7);
    else
      *(_DWORD *)v11 -= 2;
  }
LABEL_40:
  v15 = *(const WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v15 += 2;
  v16 = (WTF::StringImpl *)a1[22];
  a1[22] = (uint64_t *)v15;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v7);
    else
      *(_DWORD *)v16 -= 2;
  }
  WebCore::RealtimeMediaSource::initializePersistentId((WebCore::RealtimeMediaSource *)a1);
  buf[0] = 0;
  LOBYTE(v35) = 0;
  std::__optional_storage_base<WebCore::RealtimeMediaSourceSettings,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RealtimeMediaSourceSettings,false>>((uint64_t)(a1 + 65), (__int128 *)buf);
  if ((_BYTE)v35)
  {
    v18 = v34;
    v34 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v33;
    v33 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v17);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v32;
    v32 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v17);
      else
        *(_DWORD *)v20 -= 2;
    }
  }
  buf[0] = 0;
  v39 = 0;
  std::__optional_storage_base<WebCore::RealtimeMediaSourceCapabilities,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RealtimeMediaSourceCapabilities,false>>((uint64_t)(a1 + 40), (__int128 *)buf);
  if (v39)
  {
    v22 = v37;
    if (v37)
    {
      v37 = 0;
      v38 = 0;
      WTF::fastFree(v22, v21);
    }
    v23 = v36;
    v36 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v21);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = v35;
    v35 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v21);
      else
        *(_DWORD *)v24 -= 2;
    }
    v25 = v33;
    if (v33)
    {
      v33 = 0;
      LODWORD(v34) = 0;
      WTF::fastFree(v25, v21);
    }
  }
  v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v26 = off_1E341BA20;
  *(_QWORD *)buf = v26;
  ((void (*)(uint64_t **))(*a1)[17])(a1);
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(a1 + 16, buf);
  ((void (*)(uint64_t **))(*a1)[18])(a1);
  result = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WebCore::CoreAudioSharedInternalUnit::~CoreAudioSharedInternalUnit(WebCore::CoreAudioSharedInternalUnit *this, OpaqueAudioComponentInstance *a2)
{
  PAL *v3;

  v3 = (PAL *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    PAL::softLinkAudioToolboxAudioComponentInstanceDispose(v3, a2);
}

{
  PAL *v3;

  v3 = (PAL *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    PAL::softLinkAudioToolboxAudioComponentInstanceDispose(v3, a2);
  WTF::fastFree(this, a2);
}

uint64_t WebCore::CoreAudioSharedInternalUnit::initialize(PAL **this)
{
  return PAL::softLinkAudioToolboxAudioUnitInitialize(this[1], (OpaqueAudioComponentInstance *)PAL::softLinkAudioToolboxAudioUnitInitialize);
}

uint64_t WebCore::CoreAudioSharedInternalUnit::uninitialize(PAL **this)
{
  return PAL::softLinkAudioToolboxAudioUnitUninitialize(this[1], (OpaqueAudioComponentInstance *)PAL::softLinkAudioToolboxAudioUnitUninitialize);
}

uint64_t WebCore::CoreAudioSharedInternalUnit::start(PAL **this)
{
  return PAL::softLinkAudioToolboxAudioOutputUnitStart(this[1], (OpaqueAudioComponentInstance *)PAL::softLinkAudioToolboxAudioOutputUnitStart);
}

uint64_t WebCore::CoreAudioSharedInternalUnit::stop(PAL **this)
{
  return PAL::softLinkAudioToolboxAudioOutputUnitStop(this[1], (OpaqueAudioComponentInstance *)PAL::softLinkAudioToolboxAudioOutputUnitStop);
}

uint64_t WebCore::CoreAudioSharedInternalUnit::set(PAL **this, OpaqueAudioComponentInstance *a2, unsigned int a3, unsigned int a4, const void *a5, const void *a6)
{
  return PAL::softLinkAudioToolboxAudioUnitSetProperty(this[1], a2, a3, a4, a5, a6, PAL::softLinkAudioToolboxAudioUnitSetProperty);
}

uint64_t WebCore::CoreAudioSharedInternalUnit::get(PAL **this, OpaqueAudioComponentInstance *a2, unsigned int a3, unsigned int a4, void *a5, unsigned int *a6)
{
  return PAL::softLinkAudioToolboxAudioUnitGetProperty(this[1], a2, a3, a4, a5, a6, (unsigned int *)PAL::softLinkAudioToolboxAudioUnitGetProperty);
}

uint64_t WebCore::CoreAudioSharedInternalUnit::render(PAL **this, OpaqueAudioComponentInstance *a2, AudioTimeStamp *a3, const AudioTimeStamp *a4, unsigned int a5, AudioBufferList *a6)
{
  return PAL::softLinkAudioToolboxAudioUnitRender(this[1], a2, (unsigned int *)a3, a4, a5, a6, (AudioBufferList *)PAL::softLinkAudioToolboxAudioUnitRender);
}

uint64_t WebCore::CoreAudioSharedInternalUnit::defaultInputDevice(WebCore::CoreAudioSharedInternalUnit *this, unsigned int *a2)
{
  return 0xFFFFFFFFLL;
}

uint64_t WebCore::CoreAudioSharedInternalUnit::defaultOutputDevice(WebCore::CoreAudioSharedInternalUnit *this, unsigned int *a2)
{
  return 0xFFFFFFFFLL;
}

uint64_t WebCore::CoreAudioSharedUnit::verifyIsCapturing(uint64_t this)
{
  double *v1;
  uint64_t v2;
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v1 = (double *)this;
  v6 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(this + 512);
  if (*(_QWORD *)(this + 520) == v2)
  {
    v3 = qword_1ECE7CD60;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
    {
      v4 = (int)v1[69];
      v5[0] = 67109120;
      v5[1] = v4;
      _os_log_error_impl(&dword_1940B8000, v3, OS_LOG_TYPE_ERROR, "CoreAudioSharedUnit::verifyIsCapturing - no audio received in %d seconds, failing", (uint8_t *)v5, 8u);
    }
    return WebCore::BaseAudioSharedUnit::captureFailed((WebCore::BaseAudioSharedUnit *)v1);
  }
  else
  {
    *(_QWORD *)(this + 520) = v2;
  }
  return this;
}

WebCore::CoreAudioSharedUnit *WebCore::CoreAudioSharedUnit::CoreAudioSharedUnit(WebCore::CoreAudioSharedUnit *this)
{
  WebCore::AudioSessionIOS *v2;
  unint64_t StatusReg;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  _BYTE v8[24];

  *(_QWORD *)this = off_1E341A700;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 1;
  *((_QWORD *)this + 3) = 0x3FF0000000000000;
  v2 = WebCore::AudioSession::sharedSession(this);
  *((_DWORD *)this + 8) = (int)(*(float (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v2 + 72))(v2);
  *((_WORD *)this + 18) = 0;
  *((_BYTE *)this + 38) = 0;
  *((_BYTE *)this + 64) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_BYTE *)this + 88) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_WORD *)this + 56) = 0;
  *((_BYTE *)this + 114) = 1;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  {
    WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
  }
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)&unk_1ECE91208, this, (uint64_t)v8);
  *(_QWORD *)this = &off_1E341B0A8;
  *((_BYTE *)this + 256) = 0;
  *((_BYTE *)this + 360) = 0;
  *((_QWORD *)this + 46) = 0;
  *((_WORD *)this + 188) = 0;
  *((_QWORD *)this + 48) = 0;
  *((_BYTE *)this + 392) = 0;
  *((_BYTE *)this + 496) = 0;
  *(_OWORD *)((char *)this + 161) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((_BYTE *)this + 280) = 0;
  *((_QWORD *)this + 63) = 0x1770000001F40;
  *((_OWORD *)this + 32) = 0u;
  *((_QWORD *)this + 66) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  v4 = *(unsigned int **)(StatusReg + 736);
  if (!v4)
    v4 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  *((_QWORD *)this + 71) = v4;
  *((_QWORD *)this + 66) = off_1E31F7378;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = off_1E341BA48;
  v6[1] = WebCore::CoreAudioSharedUnit::verifyIsCapturing;
  v6[2] = 0;
  v6[3] = this;
  *((_QWORD *)this + 72) = v6;
  *((_BYTE *)this + 584) = 0;
  *((_BYTE *)this + 592) = 0;
  *((_DWORD *)this + 150) = 0;
  *((_QWORD *)this + 77) = 0;
  *((_QWORD *)this + 78) = 0;
  *((_QWORD *)this + 76) = 0;
  *((_BYTE *)this + 632) = 1;
  return this;
}

void WebCore::CoreAudioSharedUnit::~CoreAudioSharedUnit(WebCore::CoreAudioSharedUnit *this, void *a2)
{
  uint64_t v3;
  WebCore::MediaCaptureStatusBarManager *v4;
  WTF *v5;
  void *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD *v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;

  v3 = *((_QWORD *)this + 78);
  *((_QWORD *)this + 78) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WebCore::MediaCaptureStatusBarManager *)*((_QWORD *)this + 77);
  *((_QWORD *)this + 77) = 0;
  if (v4)
  {
    WebCore::MediaCaptureStatusBarManager::~MediaCaptureStatusBarManager(v4, a2);
    WTF::fastFree(v5, v6);
  }
  *((_QWORD *)this + 66) = off_1E31F7378;
  v7 = *((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  WebCore::TimerBase::~TimerBase((WebCore::CoreAudioSharedUnit *)((char *)this + 528));
  if (*((_BYTE *)this + 496))
  {
    v9 = (WTF::StringImpl *)*((_QWORD *)this + 56);
    *((_QWORD *)this + 56) = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = (WTF::StringImpl *)*((_QWORD *)this + 55);
    *((_QWORD *)this + 55) = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = (WTF::StringImpl *)*((_QWORD *)this + 54);
    *((_QWORD *)this + 54) = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v8);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  v12 = *((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v12)
  {
    v13 = *(WTF **)(v12 + 136);
    if (v13)
    {
      *(_QWORD *)(v12 + 136) = 0;
      *(_DWORD *)(v12 + 144) = 0;
      WTF::fastFree(v13, v8);
    }
    v14 = *(WTF::StringImpl **)(v12 + 112);
    *(_QWORD *)(v12 + 112) = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v8);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = *(WTF::StringImpl **)(v12 + 104);
    *(_QWORD *)(v12 + 104) = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v8);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = *(WTF **)(v12 + 48);
    if (v16)
    {
      *(_QWORD *)(v12 + 48) = 0;
      *(_DWORD *)(v12 + 56) = 0;
      WTF::fastFree(v16, v8);
    }
    MEMORY[0x19AEA7644](v12, 0x10A0C4063966A63);
  }
  v17 = (uint64_t *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 1)
    {
      std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100](v17 + 17, 0);
      WTF::fastFree((WTF *)v17, v30);
    }
    else
    {
      --*(_DWORD *)v17;
    }
  }
  v18 = *((unsigned int *)this + 43);
  if ((_DWORD)v18)
  {
    v19 = (uint64_t *)*((_QWORD *)this + 20);
    v20 = &v19[v18];
    do
    {
      v21 = *v19;
      *v19 = 0;
      if (v21)
      {
        v22 = (unsigned int *)(v21 + 8);
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v25 = off_1E331A460;
          v25[1] = v22;
          v31 = v25;
          WTF::ensureOnMainRunLoop();
          if (v31)
            (*(void (**)(_QWORD *))(*v31 + 8))(v31);
        }
      }
      ++v19;
    }
    while (v19 != v20);
  }
  v26 = (WTF *)*((_QWORD *)this + 20);
  if (v26)
  {
    *((_QWORD *)this + 20) = 0;
    *((_DWORD *)this + 42) = 0;
    WTF::fastFree(v26, v8);
  }
  v27 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  WebCore::BaseAudioSharedUnit::~BaseAudioSharedUnit(this);
}

{
  WebCore::CoreAudioSharedUnit::~CoreAudioSharedUnit(this, a2);
  JUMPOUT(0x19AEA7644);
}

void WebCore::CoreAudioSharedUnit::resetSampleRate(WebCore::CoreAudioSharedUnit *this)
{
  uint64_t v2;
  float v3;
  WebCore::AudioSessionIOS *v4;

  v2 = *((_QWORD *)this + 18);
  if (v2)
  {
    v3 = (float)(*(int (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  }
  else
  {
    v4 = WebCore::AudioSession::sharedSession(0);
    v3 = (*(float (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v4 + 72))(v4);
  }
  *((_DWORD *)this + 8) = (int)v3;
}

WTF::StringImpl *WebCore::CoreAudioSharedUnit::captureDeviceChanged(WebCore::CoreAudioSharedUnit *this)
{
  const WTF::String *v1;
  WTF::StringImpl *result;
  WTF::StringImpl *v3;
  _DWORD *v4;
  WebCore::CoreAudioSharedUnit *v5;

  {
    v5 = this;
    WebCore::AVAudioSessionCaptureDeviceManager::AVAudioSessionCaptureDeviceManager((WebCore::AVAudioSessionCaptureDeviceManager *)WebCore::AVAudioSessionCaptureDeviceManager::singleton(void)::manager);
    this = v5;
  }
  if (*((_BYTE *)this + 64))
    v1 = (WebCore::CoreAudioSharedUnit *)((char *)this + 48);
  else
    v1 = (const WTF::String *)MEMORY[0x1E0CBF738];
  result = (WTF::StringImpl *)WebCore::AVAudioSessionCaptureDeviceManager::setPreferredAudioSessionDeviceUIDInternal(WebCore::AVAudioSessionCaptureDeviceManager::singleton(void)::manager, v1);
  if ((_DWORD)result)
  {
    v4 = *(_DWORD **)v1;
    if (*(_QWORD *)v1)
      *v4 += 2;
    result = (WTF::StringImpl *)qword_1EE2EE430[0];
    qword_1EE2EE430[0] = (uint64_t)v4;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::CoreAudioSharedUnit::setupAudioUnit(WebCore::CoreAudioSharedUnit *this)
{
  unint64_t v1;
  const AudioComponentDescription *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  PAL *Next;
  OpaqueAudioComponentInstance **v9;
  int v10;
  int v11;
  NSObject *v12;
  int v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v23;
  uint64_t v25;
  NSObject *v26;
  const char *v27;
  unsigned __int8 *v28;
  uint64_t v30;
  double v31;
  int v32;
  int v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  NSObject *v37;
  const char *v38;
  WebCore::AudioSession *v39;
  WebCore::AudioSessionIOS *v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const WebCore::CAAudioStreamDescription *v50;
  unint64_t v51;
  WebCore::WebAudioBufferList *v52;
  unint64_t v53;
  WebCore::WebAudioBufferList *v54;
  uint64_t *v55;
  __int128 v56;
  uint64_t v57;
  NSObject *v58;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  int v63;
  uint64_t v64;
  NSObject *v65;
  int v66;
  uint64_t v67;
  NSObject *v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  void *v74;
  WebCore::CoreAudioSharedUnit *v75;
  int v76;
  uint64_t v77;
  int v78;
  mach_timebase_info info;
  unsigned int v80;
  unsigned int v81;
  void *v82;
  WebCore::CoreAudioSharedUnit *v83;
  _BYTE v84[20];
  int v85;
  __int16 v86;
  unsigned int *v87;
  uint8_t buf[40];
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 19))
    return 0;
  mach_timebase_info(&info);
  LODWORD(v4) = info.numer;
  LODWORD(v5) = info.denom;
  *((double *)this + 46) = (double)v4 * 0.000000001 / (double)v5;
  v1 = *((unsigned __int8 *)this + 16);
  *((_BYTE *)this + 632) = v1;
  v6 = *((_QWORD *)this + 17);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v6 + 16))(&v77);
    goto LABEL_20;
  }
  if ((_DWORD)v1)
    v7 = 1987078511;
  else
    v7 = 1919512419;
  *(_DWORD *)v84 = 1635086197;
  *(_DWORD *)&v84[4] = v7;
  *(_QWORD *)&v84[8] = 1634758764;
  *(_DWORD *)&v84[16] = 0;
  Next = (PAL *)PAL::softLinkAudioToolboxAudioComponentFindNext(0, (OpaqueAudioComponent *)v84, v3);
  if (Next)
  {
    v82 = 0;
    v10 = PAL::softLinkAudioToolboxAudioComponentInstanceNew(Next, (OpaqueAudioComponent *)&v82, v9);
    LODWORD(v77) = v10;
    if (!v10)
    {
      v14 = v82;
      *(_DWORD *)&buf[8] = 0;
      v15 = qword_1ECE7CD60;
      if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v84 = 0;
        _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "Successfully created a CoreAudioSharedInternalUnit", v84, 2u);
      }
      v16 = WTF::fastMalloc((WTF *)0x18);
      v13 = 0;
      *(_QWORD *)v16 = off_1E341B030;
      *(_QWORD *)(v16 + 8) = v14;
      *(_QWORD *)buf = 0;
      *(_BYTE *)(v16 + 16) = v1;
      v77 = v16;
      goto LABEL_19;
    }
    v11 = v10;
    v1 = qword_1ECE7CD60;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v11;
      *(_WORD *)&buf[8] = 1040;
      *(_DWORD *)&buf[10] = 4;
      *(_WORD *)&buf[14] = 2080;
      *(_QWORD *)&buf[16] = &v77;
      _os_log_error_impl(&dword_1940B8000, (os_log_t)v1, OS_LOG_TYPE_ERROR, "CoreAudioSharedInternalUnit unable to open capture unit, error %d (%.4s)", buf, 0x18u);
      v11 = v77;
    }
  }
  else
  {
    v12 = qword_1ECE7CD60;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1940B8000, v12, OS_LOG_TYPE_ERROR, "CoreAudioSharedInternalUnit unable to find capture unit component", buf, 2u);
    }
    v11 = -1;
  }
  v13 = 1;
  *(_DWORD *)buf = v11;
  *(_DWORD *)&buf[8] = 1;
  LODWORD(v77) = v11;
LABEL_19:
  v78 = v13;
  ((void (*)(_BYTE *, uint8_t *))off_1E341B900[v13])(v84, buf);
LABEL_20:
  v17 = v78;
  if (!v78)
  {
    v18 = v77;
    v77 = 0;
    v19 = *((_QWORD *)this + 19);
    *((_QWORD *)this + 19) = v18;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    if (*((_BYTE *)this + 632))
    {
      *(_QWORD *)v84 = 0xA00000001;
      v20 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t, _BYTE *, uint64_t))(**((_QWORD **)this + 19)
                                                                                          + 48))(*((_QWORD *)this + 19), 2108, 0, 1, v84, 8);
      v21 = v20;
      LODWORD(v82) = v20;
      if ((_DWORD)v20 != -10879 && (_DWORD)v20 != 0)
      {
        v23 = qword_1ECE7CD60;
        if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218754;
          *(_QWORD *)&buf[4] = this;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = (_DWORD)v21;
          *(_WORD *)&buf[18] = 1040;
          *(_DWORD *)&buf[20] = 4;
          *(_WORD *)&buf[24] = 2080;
          *(_QWORD *)&buf[26] = &v82;
          _os_log_error_impl(&dword_1940B8000, v23, OS_LOG_TYPE_ERROR, "CoreAudioSharedUnit::setupAudioUnit(%p) unable to set ducking level, error %d (%.4s)", buf, 0x22u);
          v1 = v82;
        }
        else
        {
          v1 = (unint64_t)v21;
        }
      }
      if ((_DWORD)v21 && (_DWORD)v21 != -10879)
      {
LABEL_113:
        v17 = v78;
        if (v78 == -1)
          return v1;
LABEL_114:
        ((void (*)(uint8_t *, uint64_t *))off_1E341B910[v17])(buf, &v77);
        return v1;
      }
    }
    v76 = 1;
    v25 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, int *, uint64_t))(**((_QWORD **)this + 19) + 48))(*((_QWORD *)this + 19), 2003, 1, 1, &v76, 4);
    *(_DWORD *)v84 = v25;
    if ((_DWORD)v25)
    {
      v1 = v25;
      v26 = qword_1ECE7CD60;
      if (!os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
        goto LABEL_113;
      *(_DWORD *)buf = 134218754;
      *(_QWORD *)&buf[4] = this;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v1;
      *(_WORD *)&buf[18] = 1040;
      *(_DWORD *)&buf[20] = 4;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = v84;
      v27 = "CoreAudioSharedUnit::setupAudioUnit(%p) unable to enable capture unit input, error %d (%.4s)";
      goto LABEL_40;
    }
    v28 = (unsigned __int8 *)this + 603;
    if (__ldaxr((unsigned __int8 *)this + 603))
    {
      __clrex();
    }
    else if (!__stxr(1u, v28))
    {
      goto LABEL_45;
    }
    MEMORY[0x19AEA534C]((char *)this + 603);
LABEL_45:
    v30 = *((_QWORD *)this + 76);
    if (v30)
      v31 = *(double *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30) + 8);
    else
      v31 = (double)*((int *)this + 8);
    v32 = __ldxr(v28);
    if (v32 == 1)
    {
      if (!__stlxr(0, v28))
      {
LABEL_53:
        v33 = (int)v31;
        v82 = WebCore::CoreAudioSharedUnit::microphoneCallback;
        v83 = this;
        v34 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t, void **, uint64_t))(**((_QWORD **)this + 19)
                                                                                            + 48))(*((_QWORD *)this + 19), 2005, 0, 1, &v82, 16);
        *(_DWORD *)v84 = v34;
        if ((_DWORD)v34)
        {
          v1 = v34;
          v35 = qword_1ECE7CD60;
          if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218754;
            *(_QWORD *)&buf[4] = this;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v1;
            *(_WORD *)&buf[18] = 1040;
            *(_DWORD *)&buf[20] = 4;
            *(_WORD *)&buf[24] = 2080;
            *(_QWORD *)&buf[26] = v84;
            _os_log_error_impl(&dword_1940B8000, v35, OS_LOG_TYPE_ERROR, "CoreAudioSharedUnit::configureMicrophoneProc(%p) unable to set capture unit mic proc, error %d (%.4s)", buf, 0x22u);
            v1 = *(unsigned int *)v84;
          }
          goto LABEL_78;
        }
        memset(buf, 0, sizeof(buf));
        v81 = 40;
        v36 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint8_t *, unsigned int *))(**((_QWORD **)this + 19) + 56))(*((_QWORD *)this + 19), 8, 2, 1, buf, &v81);
        v80 = v36;
        if ((_DWORD)v36)
        {
          v1 = v36;
          v37 = qword_1ECE7CD60;
          if (!os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
            goto LABEL_78;
          *(_DWORD *)v84 = 134218754;
          *(_QWORD *)&v84[4] = this;
          *(_WORD *)&v84[12] = 1024;
          *(_DWORD *)&v84[14] = v1;
          *(_WORD *)&v84[18] = 1040;
          v85 = 4;
          v86 = 2080;
          v87 = &v80;
          v38 = "CoreAudioSharedUnit::configureMicrophoneProc(%p) unable to get output stream format, error %d (%.4s)";
        }
        else
        {
          *(double *)buf = (double)v33;
          v39 = (WebCore::AudioSession *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint8_t *, _QWORD))(**((_QWORD **)this + 19) + 48))(*((_QWORD *)this + 19), 8, 2, 1, buf, v81);
          v80 = v39;
          if (!(_DWORD)v39)
          {
            v40 = WebCore::AudioSession::sharedSession(v39);
            v41 = (*(uint64_t (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v40 + 80))(v40);
            if (*((_BYTE *)this + 592))
            {
              if (*((_QWORD *)this + 73) * (unint64_t)*(unsigned int *)&buf[16] > v41)
                v41 = *((_QWORD *)this + 73) * *(unsigned int *)&buf[16];
              *((_BYTE *)this + 584) = 0;
              *((_BYTE *)this + 592) = 0;
            }
            *(_QWORD *)v84 = *(_QWORD *)buf;
            v42 = *(_DWORD *)&buf[12];
            *(_DWORD *)&v84[8] = *(_DWORD *)&buf[8];
            v43 = *(_QWORD *)&buf[16];
            v45 = *(unsigned int *)&buf[24];
            v44 = *(_DWORD *)&buf[28];
            v46 = *(_QWORD *)&buf[32];
            v47 = 2 * v41;
            v48 = WTF::fastMalloc((WTF *)0x90);
            v49 = v48;
            *(_DWORD *)v48 = 1;
            *(_QWORD *)(v48 + 8) = off_1E34087C0;
            v50 = (const WebCore::CAAudioStreamDescription *)(v48 + 8);
            *(_QWORD *)(v48 + 16) = *(_QWORD *)v84;
            *(_DWORD *)(v48 + 24) = *(_DWORD *)&v84[8];
            *(_DWORD *)(v48 + 28) = v42;
            *(_QWORD *)(v48 + 32) = v43;
            *(_DWORD *)(v48 + 40) = v45;
            *(_DWORD *)(v48 + 44) = v44;
            *(_QWORD *)(v48 + 48) = v46;
            *(_DWORD *)(v48 + 56) = 0;
            *(_QWORD *)(v48 + 64) = 0;
            *(_DWORD *)(v48 + 72) = 0;
            *(_DWORD *)(v48 + 80) = 0;
            *(_QWORD *)(v48 + 88) = 0;
            *(_QWORD *)(v48 + 96) = 0xBFF0000000000000;
            *(_QWORD *)(v48 + 104) = 0;
            *(_QWORD *)(v48 + 112) = v47;
            if ((v42 & 0x20) != 0)
              v51 = v44;
            else
              v51 = 1;
            *(_QWORD *)(v48 + 120) = v47 * v45 / v51;
            *(_QWORD *)(v48 + 128) = 0;
            v52 = (WebCore::WebAudioBufferList *)WTF::fastMalloc((WTF *)0x48);
            v53 = *(_QWORD *)(v49 + 120);
            v54 = WebCore::WebAudioBufferList::WebAudioBufferList(v52, v50);
            WebCore::WebAudioBufferList::setSampleCount(v54, v53);
            *(_QWORD *)(v49 + 136) = v52;
            v55 = (uint64_t *)*((_QWORD *)this + 33);
            *((_QWORD *)this + 33) = v49;
            if (v55)
            {
              if (*(_DWORD *)v55 == 1)
              {
                std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100](v55 + 17, 0);
                WTF::fastFree((WTF *)v55, v74);
              }
              else
              {
                --*(_DWORD *)v55;
              }
            }
            v1 = 0;
            v56 = *(_OWORD *)&buf[16];
            if (*((_BYTE *)this + 256))
            {
              *(_OWORD *)((char *)this + 184) = *(_OWORD *)buf;
              *(_OWORD *)((char *)this + 200) = v56;
              *((_QWORD *)this + 27) = *(_QWORD *)&buf[32];
            }
            else
            {
              *(_OWORD *)((char *)this + 184) = *(_OWORD *)buf;
              *((_QWORD *)this + 22) = off_1E34087C0;
              *((_QWORD *)this + 27) = *(_QWORD *)&buf[32];
              *((_BYTE *)this + 256) = 1;
              *(_OWORD *)((char *)this + 200) = v56;
            }
            *((_DWORD *)this + 56) = 0;
            *((_QWORD *)this + 29) = 0;
            *((_DWORD *)this + 60) = 0;
            *((_DWORD *)this + 62) = 0;
            v33 = (int)v31;
LABEL_78:
            if ((_DWORD)v1)
              goto LABEL_113;
            v82 = WebCore::CoreAudioSharedUnit::speakerCallback;
            v83 = this;
            v57 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, void **, uint64_t))(**((_QWORD **)this + 19)
                                                                                                + 48))(*((_QWORD *)this + 19), 23, 1, 0, &v82, 16);
            *(_DWORD *)v84 = v57;
            if ((_DWORD)v57)
            {
              v1 = v57;
              v58 = qword_1ECE7CD60;
              if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218754;
                *(_QWORD *)&buf[4] = this;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v1;
                *(_WORD *)&buf[18] = 1040;
                *(_DWORD *)&buf[20] = 4;
                *(_WORD *)&buf[24] = 2080;
                *(_QWORD *)&buf[26] = v84;
                _os_log_error_impl(&dword_1940B8000, v58, OS_LOG_TYPE_ERROR, "CoreAudioSharedUnit::configureSpeakerProc(%p) unable to set capture unit speaker proc, error %d (%.4s)", buf, 0x22u);
                v1 = *(unsigned int *)v84;
              }
LABEL_105:
              if ((_DWORD)v1)
                goto LABEL_113;
              v71 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 19) + 16))(*((_QWORD *)this + 19));
              *(_DWORD *)v84 = v71;
              if (!(_DWORD)v71)
              {
                *((_BYTE *)this + 376) = 1;
                v72 = *((_QWORD *)this + 19);
                if (v72)
                {
                  *(_DWORD *)buf = 0;
                  if (!(*(unsigned int (**)(uint64_t, uint8_t *))(*(_QWORD *)v72 + 80))(v72, buf))
                    AudioDeviceDuck();
                }
                v1 = 0;
                goto LABEL_113;
              }
              v1 = v71;
              v26 = qword_1ECE7CD60;
              if (!os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
                goto LABEL_113;
              *(_DWORD *)buf = 134218754;
              *(_QWORD *)&buf[4] = this;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v1;
              *(_WORD *)&buf[18] = 1040;
              *(_DWORD *)&buf[20] = 4;
              *(_WORD *)&buf[24] = 2080;
              *(_QWORD *)&buf[26] = v84;
              v27 = "CoreAudioSharedUnit::setupAudioUnit(%p) AudioUnitInitialize() failed, error %d (%.4s)";
LABEL_40:
              _os_log_error_impl(&dword_1940B8000, v26, OS_LOG_TYPE_ERROR, v27, buf, 0x22u);
              v1 = *(unsigned int *)v84;
              goto LABEL_113;
            }
            v81 = 40;
            if (__ldaxr(v28))
            {
              __clrex();
            }
            else if (!__stxr(1u, v28))
            {
              goto LABEL_86;
            }
            MEMORY[0x19AEA534C]((char *)this + 603);
LABEL_86:
            v60 = *((_QWORD *)this + 76);
            if (v60)
            {
              v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 16))(v60);
              v62 = *(_OWORD *)(v61 + 24);
              *(_OWORD *)buf = *(_OWORD *)(v61 + 8);
              *(_OWORD *)&buf[16] = v62;
              *(_QWORD *)&buf[32] = *(_QWORD *)(v61 + 40);
            }
            else
            {
              v64 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, uint8_t *, unsigned int *))(**((_QWORD **)this + 19) + 56))(*((_QWORD *)this + 19), 8, 1, 0, buf, &v81);
              v80 = v64;
              if ((_DWORD)v64)
              {
                v1 = v64;
                v65 = qword_1ECE7CD60;
                if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)v84 = 134218754;
                  *(_QWORD *)&v84[4] = this;
                  *(_WORD *)&v84[12] = 1024;
                  *(_DWORD *)&v84[14] = v1;
                  *(_WORD *)&v84[18] = 1040;
                  v85 = 4;
                  v86 = 2080;
                  v87 = &v80;
                  _os_log_error_impl(&dword_1940B8000, v65, OS_LOG_TYPE_ERROR, "CoreAudioSharedUnit::configureSpeakerProc(%p) unable to get input stream format, error %d (%.4s)", v84, 0x22u);
                  v1 = v80;
                }
                v63 = 0;
LABEL_93:
                v66 = __ldxr(v28);
                if (v66 == 1)
                {
                  if (!__stlxr(0, v28))
                  {
LABEL_98:
                    if (v63)
                    {
                      *(double *)buf = (double)v33;
                      v67 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, uint8_t *, _QWORD))(**((_QWORD **)this + 19) + 48))(*((_QWORD *)this + 19), 8, 1, 0, buf, v81);
                      v80 = v67;
                      if ((_DWORD)v67)
                      {
                        v1 = v67;
                        v68 = qword_1ECE7CD60;
                        if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)v84 = 134218754;
                          *(_QWORD *)&v84[4] = this;
                          *(_WORD *)&v84[12] = 1024;
                          *(_DWORD *)&v84[14] = v1;
                          *(_WORD *)&v84[18] = 1040;
                          v85 = 4;
                          v86 = 2080;
                          v87 = &v80;
                          _os_log_error_impl(&dword_1940B8000, v68, OS_LOG_TYPE_ERROR, "CoreAudioSharedUnit::configureSpeakerProc(%p) unable to get input stream format, error %d (%.4s)", v84, 0x22u);
                          v1 = v80;
                        }
                      }
                      else
                      {
                        v1 = 0;
                        if (*((_BYTE *)this + 360))
                        {
                          v69 = *(_OWORD *)&buf[16];
                          *((_OWORD *)this + 18) = *(_OWORD *)buf;
                          *((_OWORD *)this + 19) = v69;
                          *((_QWORD *)this + 40) = *(_QWORD *)&buf[32];
                          *((_DWORD *)this + 82) = 0;
                          *((_QWORD *)this + 42) = 0;
                          *((_DWORD *)this + 86) = 0;
                          *((_DWORD *)this + 88) = 0;
                        }
                        else
                        {
                          *((_QWORD *)this + 35) = off_1E34087C0;
                          v70 = *(_OWORD *)&buf[16];
                          *((_OWORD *)this + 18) = *(_OWORD *)buf;
                          *((_OWORD *)this + 19) = v70;
                          *((_QWORD *)this + 40) = *(_QWORD *)&buf[32];
                          *((_DWORD *)this + 82) = 0;
                          *((_QWORD *)this + 42) = 0;
                          *((_DWORD *)this + 86) = 0;
                          *((_DWORD *)this + 88) = 0;
                          *((_BYTE *)this + 360) = 1;
                        }
                      }
                    }
                    goto LABEL_105;
                  }
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow((WebCore::CoreAudioSharedUnit *)((char *)this + 603));
                goto LABEL_98;
              }
            }
            v63 = 1;
            goto LABEL_93;
          }
          v1 = (unint64_t)v39;
          v37 = qword_1ECE7CD60;
          if (!os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
            goto LABEL_78;
          *(_DWORD *)v84 = 134218754;
          *(_QWORD *)&v84[4] = this;
          *(_WORD *)&v84[12] = 1024;
          *(_DWORD *)&v84[14] = v1;
          *(_WORD *)&v84[18] = 1040;
          v85 = 4;
          v86 = 2080;
          v87 = &v80;
          v38 = "CoreAudioSharedUnit::configureMicrophoneProc(%p) unable to set output stream format, error %d (%.4s)";
        }
        _os_log_error_impl(&dword_1940B8000, v37, OS_LOG_TYPE_ERROR, v38, v84, 0x22u);
        v1 = v80;
        goto LABEL_78;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WebCore::CoreAudioSharedUnit *)((char *)this + 603));
    goto LABEL_53;
  }
  if (v78 == 1)
  {
    v1 = v77;
    goto LABEL_114;
  }
  v75 = (WebCore::CoreAudioSharedUnit *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::CoreAudioSharedUnit::actualSampleRate(v75);
}

uint64_t WebCore::CoreAudioSharedUnit::actualSampleRate(WebCore::CoreAudioSharedUnit *this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  double v5;
  int v6;

  v2 = (unsigned __int8 *)this + 603;
  if (__ldaxr((unsigned __int8 *)this + 603))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 603);
LABEL_5:
  v4 = *((_QWORD *)this + 76);
  if (v4)
    v5 = *(double *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4) + 8);
  else
    v5 = (double)*((int *)this + 8);
  v6 = __ldxr(v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, v2))
      return (int)v5;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return (int)v5;
}

uint64_t WebCore::CoreAudioSharedUnit::microphoneCallback(WebCore::CoreAudioSharedUnit *this, void *a2, unsigned int *a3, const AudioTimeStamp *a4, uint64_t a5, unsigned int a6, AudioBufferList *a7)
{
  uint64_t v7;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  double v22;
  double v23;
  uint64_t v24;
  double v25;
  float v26;
  uint64_t v27;
  unsigned int v28;
  char v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  _BYTE buf[12];
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  unsigned int *v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 600))
    return 0;
  v14 = (_QWORD *)*((_QWORD *)this + 33);
  v14[11] = 0;
  v14[12] = 0xBFF0000000000000;
  v14[13] = 0;
  v15 = v14[17];
  v16 = *(void **)(v15 + 40);
  if (!v16)
  {
    v16 = operator new(*(_QWORD *)(v15 + 8));
    v17 = *(_QWORD *)(v15 + 40);
    *(_QWORD *)(v15 + 40) = v16;
    if (v17)
    {
      MEMORY[0x19AEA7644](v17, 0x1080C404ACF7207);
      v16 = *(void **)(v15 + 40);
    }
  }
  memcpy(v16, *(const void **)(v15 + 32), *(_QWORD *)(v15 + 8));
  v18 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 33) + 136) + 40);
  v19 = (*(uint64_t (**)(_QWORD, void *, unsigned int *, const AudioTimeStamp *, uint64_t, uint64_t))(**((_QWORD **)this + 19) + 64))(*((_QWORD *)this + 19), a2, a3, a4, a5, v18);
  v37 = v19;
  if (!(_DWORD)v19)
  {
    ++*((_QWORD *)this + 64);
    if (!*((_BYTE *)this + 114))
      return 0;
    v22 = *(double *)a3;
    v23 = *((double *)this + 46) * (double)*((unint64_t *)a3 + 1);
    *((_QWORD *)this + 34) = *(_QWORD *)a3;
    v24 = *((_QWORD *)this + 33);
    *(_QWORD *)(v24 + 88) = (unint64_t)v23;
    *(double *)(v24 + 96) = (double)(unint64_t)v22;
    v25 = *((double *)this + 3);
    if (v25 != 1.0)
    {
      v26 = v25;
      WebCore::AudioSampleBufferList::applyGain((WebCore::AudioSampleBufferList *)v24, v26);
    }
    if (*((_BYTE *)this + 256))
    {
      v27 = (unint64_t)v22;
      v28 = *((double *)this + 23);
      *(_QWORD *)buf = (unint64_t)v22;
      *(_DWORD *)&buf[8] = v28;
      LOBYTE(v39) = 1;
      if (!v28)
      {
        *(_QWORD *)buf = v27 >> 63;
        if (v27 >= 0)
          v29 = 5;
        else
          v29 = 9;
        *(_DWORD *)&buf[8] = 1;
        LOBYTE(v39) = v29;
      }
      WebCore::BaseAudioSharedUnit::audioSamplesAvailable((uint64_t)this, (uint64_t)buf, *(_QWORD *)(*((_QWORD *)this + 33) + 136), (uint64_t)this + 176, a5);
      return 0;
    }
    __break(1u);
    goto LABEL_33;
  }
  v7 = v19;
  v21 = qword_1ECE7CD60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
  {
    v36 = *(_DWORD *)(v18 + 12);
    *(_DWORD *)buf = 134219266;
    *(_QWORD *)&buf[4] = this;
    v39 = 1024;
    v40 = v7;
    v41 = 1040;
    v42 = 4;
    v43 = 2080;
    v44 = &v37;
    v45 = 1024;
    v46 = v36;
    v47 = 1024;
    v48 = a5;
    _os_log_error_impl(&dword_1940B8000, v21, OS_LOG_TYPE_ERROR, "CoreAudioSharedUnit::processMicrophoneSamples(%p) AudioUnitRender failed with error %d (%.4s), bufferList size %d, inNumberFrames %d ", buf, 0x2Eu);
    v7 = v37;
  }
  if ((_DWORD)v7 == -50)
  {
    if (*((_BYTE *)this + 592))
      return 4294967246;
    *((_BYTE *)this + 592) = 1;
    *((_QWORD *)this + 73) = a5;
    v30 = *((_QWORD *)this + 1);
    if (v30)
      goto LABEL_28;
    v30 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v30 = 1;
    *(_QWORD *)(v30 + 8) = this;
    v24 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v30;
    if (!v24)
      goto LABEL_28;
    do
    {
      v31 = __ldaxr((unsigned int *)v24);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, (unsigned int *)v24));
    if (v32)
    {
LABEL_27:
      v30 = *((_QWORD *)this + 1);
      if (!v30)
      {
LABEL_29:
        v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v34 = &off_1E341BA98;
        v34[1] = v30;
        *(_QWORD *)buf = v34;
        WTF::callOnMainThread();
        v35 = *(_QWORD *)buf;
        *(_QWORD *)buf = 0;
        if (v35)
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
        return v37;
      }
      do
LABEL_28:
        v33 = __ldaxr((unsigned int *)v30);
      while (__stlxr(v33 + 1, (unsigned int *)v30));
      goto LABEL_29;
    }
LABEL_33:
    atomic_store(1u, (unsigned int *)v24);
    WTF::fastFree((WTF *)v24, v20);
    goto LABEL_27;
  }
  return v7;
}

uint64_t WebCore::CoreAudioSharedUnit::speakerCallback(WebCore::CoreAudioSharedUnit *this, _DWORD *a2, unsigned int *a3, const AudioTimeStamp *a4, unsigned int a5, _DWORD *a6, AudioBufferList *a7)
{
  WebCore::CoreAudioSharedUnit *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  WebCore::CoreAudioSharedUnit *v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v21;
  int v22;
  int v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  int v27;
  WebCore::CoreAudioSharedUnit *v28;

  v10 = this;
  if (*((_WORD *)this + 300) || !*((_BYTE *)this + 602))
  {
LABEL_2:
    if (*((_BYTE *)this + 601))
    {
      *((_BYTE *)this + 601) = 0;
      v11 = *((_QWORD *)this + 1);
      if (v11)
        goto LABEL_8;
      v11 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = v10;
      this = (WebCore::CoreAudioSharedUnit *)*((_QWORD *)v10 + 1);
      *((_QWORD *)v10 + 1) = v11;
      if (!this)
        goto LABEL_8;
      do
      {
        v12 = __ldaxr((unsigned int *)this);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, (unsigned int *)this));
      if (v13)
        goto LABEL_7;
      goto LABEL_37;
    }
    goto LABEL_11;
  }
  v21 = (unsigned __int8 *)this + 603;
  do
  {
    while (1)
    {
      v22 = *v21;
      if ((v22 & 1) != 0)
        goto LABEL_2;
      v23 = __ldaxr(v21);
      if (v23 == v22)
        break;
      __clrex();
    }
  }
  while (__stxr(v22 | 1, v21));
  this = (WebCore::CoreAudioSharedUnit *)*((_QWORD *)this + 76);
  if (this)
  {
    v19 = (*(uint64_t (**)(WebCore::CoreAudioSharedUnit *, _QWORD, _DWORD *, unint64_t, _DWORD *, _DWORD *, AudioBufferList *, double))(*(_QWORD *)this + 40))(this, a5, a6, (unint64_t)*(double *)a3, a2, a6, a7, (double)*((unint64_t *)a3 + 1));
  }
  else
  {
    if (!*((_BYTE *)v10 + 360))
    {
      do
      {
        __break(1u);
LABEL_37:
        atomic_store(1u, (unsigned int *)this);
        WTF::fastFree(this, a2);
LABEL_7:
        v11 = *((_QWORD *)v10 + 1);
        if (v11)
        {
          do
LABEL_8:
            v14 = __ldaxr((unsigned int *)v11);
          while (__stlxr(v14 + 1, (unsigned int *)v11));
        }
        v15 = (WebCore::CoreAudioSharedUnit *)WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v15 = &off_1E341BA70;
        *((_QWORD *)v15 + 1) = v10;
        *((_QWORD *)v15 + 2) = v11;
        v28 = v15;
        WTF::callOnMainThread();
        this = v28;
        if (v28)
          this = (WebCore::CoreAudioSharedUnit *)(*(uint64_t (**)(WebCore::CoreAudioSharedUnit *))(*(_QWORD *)v28 + 8))(v28);
LABEL_11:
        ;
      }
      while (!*((_BYTE *)v10 + 360));
      if (*a6)
      {
        v16 = 0;
        v17 = *((_DWORD *)v10 + 78) * a5;
        v18 = 4;
        do
        {
          bzero(*(void **)&a6[v18], v17);
          ++v16;
          v18 += 4;
        }
        while (v16 < *a6);
      }
      v19 = 0;
      *a2 = 16;
      return v19;
    }
    if (*a6)
    {
      v24 = 0;
      v25 = *((_DWORD *)v10 + 78) * a5;
      v26 = 4;
      do
      {
        bzero(*(void **)&a6[v26], v25);
        ++v24;
        v26 += 4;
      }
      while (v24 < *a6);
    }
    v19 = 0;
    *a2 = 16;
  }
  v27 = __ldxr(v21);
  if (v27 == 1)
  {
    if (!__stlxr(0, v21))
      return v19;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v21);
  return v19;
}

uint64_t WebCore::CoreAudioSharedUnit::cleanupAudioUnit(WebCore::CoreAudioSharedUnit *this)
{
  int v2;
  int v3;
  NSObject *v4;
  uint64_t result;
  uint64_t *v6;
  void *v7;
  int v8;
  uint8_t buf[4];
  WebCore::CoreAudioSharedUnit *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 376))
  {
    v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 19) + 24))(*((_QWORD *)this + 19));
    v8 = v2;
    if (v2)
    {
      v3 = v2;
      v4 = qword_1ECE7CD60;
      if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218754;
        v10 = this;
        v11 = 1024;
        v12 = v3;
        v13 = 1040;
        v14 = 4;
        v15 = 2080;
        v16 = &v8;
        _os_log_error_impl(&dword_1940B8000, v4, OS_LOG_TYPE_ERROR, "CoreAudioSharedUnit::cleanupAudioUnit(%p) AudioUnitUninitialize failed with error %d (%.4s)", buf, 0x22u);
      }
    }
    *((_BYTE *)this + 376) = 0;
  }
  result = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v6 = (uint64_t *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100](v6 + 17, 0);
      return WTF::fastFree((WTF *)v6, v7);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  return result;
}

uint64_t WebCore::CoreAudioSharedUnit::delaySamples(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 152);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 88))(result);
  return result;
}

uint64_t WebCore::CoreAudioSharedUnit::reconfigureAudioUnit(WebCore::CoreAudioSharedUnit *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  unsigned int v8;
  uint8_t buf[4];
  WebCore::CoreAudioSharedUnit *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  unsigned int *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 19);
  if (!v2)
    return 0;
  *((_BYTE *)this + 600) = 1;
  if (!*((_BYTE *)this + 377) || (v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2), (v8 = v3) == 0))
  {
    WebCore::CoreAudioSharedUnit::cleanupAudioUnit(this);
    v4 = WebCore::CoreAudioSharedUnit::setupAudioUnit(this);
    if ((_DWORD)v4)
      goto LABEL_8;
    if (!*((_BYTE *)this + 377))
    {
      v4 = 0;
      goto LABEL_8;
    }
    v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 19) + 32))(*((_QWORD *)this + 19));
    v8 = v4;
    if (!(_DWORD)v4)
      goto LABEL_8;
    v5 = qword_1ECE7CD60;
    if (!os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
      goto LABEL_8;
    *(_DWORD *)buf = 134218754;
    v10 = this;
    v11 = 1024;
    v12 = v4;
    v13 = 1040;
    v14 = 4;
    v15 = 2080;
    v16 = &v8;
    v6 = "CoreAudioSharedUnit::reconfigureAudioUnit(%p) AudioOutputUnitStart failed with error %d (%.4s)";
    goto LABEL_6;
  }
  v4 = v3;
  v5 = qword_1ECE7CD60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134218754;
    v10 = this;
    v11 = 1024;
    v12 = v4;
    v13 = 1040;
    v14 = 4;
    v15 = 2080;
    v16 = &v8;
    v6 = "CoreAudioSharedUnit::reconfigureAudioUnit(%p) AudioOutputUnitStop failed with error %d (%.4s)";
LABEL_6:
    _os_log_error_impl(&dword_1940B8000, v5, OS_LOG_TYPE_ERROR, v6, buf, 0x22u);
    v4 = v8;
  }
LABEL_8:
  *((_BYTE *)this + 600) = 0;
  return v4;
}

BOOL WebCore::CoreAudioSharedUnit::hasAudioUnit(WebCore::CoreAudioSharedUnit *this)
{
  return *((_QWORD *)this + 19) != 0;
}

uint64_t WebCore::CoreAudioSharedUnit::startInternal(WebCore::CoreAudioSharedUnit *this)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  WTF::MonotonicTime *v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  unsigned int v15;
  uint8_t buf[4];
  WebCore::CoreAudioSharedUnit *v17;
  __int16 v18;
  unsigned int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  unsigned int *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 114) = 1;
  (*(void (**)(WebCore::CoreAudioSharedUnit *))(*(_QWORD *)this + 128))(this);
  v2 = *((_QWORD *)this + 19);
  if (v2)
    goto LABEL_2;
  v5 = WebCore::CoreAudioSharedUnit::setupAudioUnit(this);
  if ((_DWORD)v5)
  {
    v6 = v5;
    WebCore::CoreAudioSharedUnit::cleanupAudioUnit(this);
    return v6;
  }
  v2 = *((_QWORD *)this + 19);
  if (v2)
  {
LABEL_2:
    *(_DWORD *)buf = 0;
    if (!(*(unsigned int (**)(uint64_t, uint8_t *))(*(_QWORD *)v2 + 80))(v2, buf))
      AudioDeviceDuck();
  }
  *(_WORD *)((char *)this + 601) = 1;
  v15 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 19) + 32))(*((_QWORD *)this + 19));
  if (!v15)
  {
    *((_BYTE *)this + 377) = 1;
    v7 = (WTF::MonotonicTime *)(*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 19) + 96))(*((_QWORD *)this + 19), *((unsigned __int8 *)this + 114));
    v9 = v8;
    *((double *)this + 69) = v8;
    WTF::MonotonicTime::now(v7);
    WebCore::TimerBase::setNextFireTime((uint64_t)this + 528, v9 + v10);
    v6 = 0;
    *((_OWORD *)this + 32) = 0u;
    return v6;
  }
  v3 = (unsigned __int8 *)this + 603;
  if (__ldaxr((unsigned __int8 *)this + 603))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C]((char *)this + 603);
LABEL_12:
  v11 = *((_QWORD *)this + 76);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
  v12 = __ldxr(v3);
  if (v12 == 1)
  {
    if (!__stlxr(0, v3))
      goto LABEL_19;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WebCore::CoreAudioSharedUnit *)((char *)this + 603));
LABEL_19:
  v13 = qword_1ECE7CD60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134218754;
    v17 = this;
    v18 = 1024;
    v19 = v15;
    v20 = 1040;
    v21 = 4;
    v22 = 2080;
    v23 = &v15;
    _os_log_error_impl(&dword_1940B8000, v13, OS_LOG_TYPE_ERROR, "CoreAudioSharedUnit::start(%p) AudioOutputUnitStart failed with error %d (%.4s)", buf, 0x22u);
  }
  WebCore::CoreAudioSharedUnit::cleanupAudioUnit(this);
  return v15;
}

uint64_t WebCore::CoreAudioSharedUnit::isProducingMicrophoneSamplesChanged(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  WTF::MonotonicTime *v3;
  double v4;
  double v5;
  double v6;

  if (*(_BYTE *)(this + 377))
  {
    v1 = this;
    v2 = this + 528;
    v3 = (WTF::MonotonicTime *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(this + 152) + 96))(*(_QWORD *)(this + 152), *(unsigned __int8 *)(this + 114));
    v5 = v4;
    *(double *)(v1 + 552) = v4;
    WTF::MonotonicTime::now(v3);
    return WebCore::TimerBase::setNextFireTime(v2, v5 + v6);
  }
  return this;
}

uint64_t WebCore::CoreAudioSharedUnit::isProducingData(WebCore::CoreAudioSharedUnit *this)
{
  return *((unsigned __int8 *)this + 377);
}

void WebCore::CoreAudioSharedUnit::stopInternal(WebCore::CoreAudioSharedUnit *this)
{
  uint64_t v2;
  int v3;
  int v4;
  NSObject *v5;
  unsigned __int8 *v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  void *v11;
  WebCore::MediaCaptureStatusBarManager *v12;
  WTF *v13;
  void *v14;
  int v15;
  uint8_t buf[4];
  WebCore::CoreAudioSharedUnit *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if ((*((_QWORD *)this + 70) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::CoreAudioSharedUnit *)((char *)this + 528));
  v2 = *((_QWORD *)this + 19);
  if (!v2 || !*((_BYTE *)this + 377))
    return;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v15 = v3;
  if (v3)
  {
    v4 = v3;
    v5 = qword_1ECE7CD60;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218754;
      v17 = this;
      v18 = 1024;
      v19 = v4;
      v20 = 1040;
      v21 = 4;
      v22 = 2080;
      v23 = &v15;
      _os_log_error_impl(&dword_1940B8000, v5, OS_LOG_TYPE_ERROR, "CoreAudioSharedUnit::stop(%p) AudioOutputUnitStop failed with error %d (%.4s)", buf, 0x22u);
    }
    return;
  }
  v6 = (unsigned __int8 *)this + 603;
  if (__ldaxr((unsigned __int8 *)this + 603))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C]((char *)this + 603);
LABEL_13:
  v8 = *((_QWORD *)this + 76);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  v9 = __ldxr(v6);
  if (v9 == 1)
  {
    if (!__stlxr(0, v6))
      goto LABEL_20;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WebCore::CoreAudioSharedUnit *)((char *)this + 603));
LABEL_20:
  *((_BYTE *)this + 377) = 0;
  {
    if (!SpringBoardServicesLibrary(void)::frameworkLibrary)
      return;
  }
  else
  {
    SpringBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices", 2);
    if (!SpringBoardServicesLibrary(void)::frameworkLibrary)
      return;
  }
  v10 = *((_QWORD *)this + 77);
  if (v10)
  {
    objc_msgSend(*(id *)(v10 + 8), "stop");
    v12 = (WebCore::MediaCaptureStatusBarManager *)*((_QWORD *)this + 77);
    *((_QWORD *)this + 77) = 0;
    if (v12)
    {
      WebCore::MediaCaptureStatusBarManager::~MediaCaptureStatusBarManager(v12, v11);
      WTF::fastFree(v13, v14);
    }
  }
}

uint64_t WebCore::DisplayCaptureManagerCocoa::captureDevices(WebCore::DisplayCaptureManagerCocoa *this)
{
  return (uint64_t)this + 8;
}

void WebCore::DisplayCaptureManagerCocoa::captureDeviceWithPersistentID(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[40] = 0;
}

WebCore::MediaStreamTrackAudioSourceProviderCocoa *WebCore::MediaStreamTrackAudioSourceProviderCocoa::MediaStreamTrackAudioSourceProviderCocoa(WebCore::MediaStreamTrackAudioSourceProviderCocoa *this, WebCore::MediaStreamTrackPrivate *a2)
{
  uint64_t v4;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;

  *((_DWORD *)this + 2) = 1;
  *((_BYTE *)this + 12) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 24) = 0;
  *((_BYTE *)this + 104) = 0;
  *((_BYTE *)this + 112) = 0;
  *((_BYTE *)this + 192) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 3;
  *((_QWORD *)this + 28) = 0;
  *((_DWORD *)this + 66) = 0;
  *(_QWORD *)this = &off_1E341B150;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = &unk_1E341B1E0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = &unk_1E341B238;
  v4 = *((_QWORD *)a2 + 2);
  if (v4)
    goto LABEL_13;
  v4 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = a2;
  v6 = (unsigned int *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  if (!v6)
    goto LABEL_13;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  v4 = *((_QWORD *)a2 + 2);
  if (v4)
  {
LABEL_13:
    do
      v9 = __ldaxr((unsigned int *)v4);
    while (__stlxr(v9 + 1, (unsigned int *)v4));
  }
  *((_QWORD *)this + 34) = v4;
  v10 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 136))(v10);
  *((_QWORD *)this + 35) = v10;
  *((_WORD *)this + 144) = 1;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 256))(v10))
    *((_QWORD *)this + 27) = 2;
  return this;
}

void WebCore::MediaStreamTrackAudioSourceProviderCocoa::~MediaStreamTrackAudioSourceProviderCocoa(WebCore::MediaStreamTrackAudioSourceProviderCocoa *this)
{
  uint64_t v2;
  char *v3;
  unsigned __int8 *v4;
  void *v6;
  int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *((_QWORD *)this + 35);
  v3 = (char *)this + 256;
  v4 = (unsigned __int8 *)(v2 + 144);
  if (__ldaxr((unsigned __int8 *)(v2 + 144)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v2 + 144);
LABEL_5:
  WTF::HashSet<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTableTraits>::remove<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>((uint64_t *)(v2 + 152), (uint64_t)v3);
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v4))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 144));
  v8 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 144))(v8);
  v9 = (unsigned int *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v6);
    }
  }
  v12 = *((_QWORD *)this + 31);
  if (v12)
  {
    *(_QWORD *)(v12 + 8) = 0;
    v13 = (unsigned int *)*((_QWORD *)this + 31);
    *((_QWORD *)this + 31) = 0;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v6);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 31) = 0;
  }
  WebCore::WebAudioSourceProviderCocoa::~WebAudioSourceProviderCocoa(this);
}

{
  uint64_t v1;
  void *v2;

  WebCore::MediaStreamTrackAudioSourceProviderCocoa::~MediaStreamTrackAudioSourceProviderCocoa(this);
  if (*(_DWORD *)(v1 + 264))
  {
    *(_QWORD *)(v1 + 288) = 0;
    *(_OWORD *)(v1 + 256) = 0u;
    *(_OWORD *)(v1 + 272) = 0u;
    *(_OWORD *)(v1 + 224) = 0u;
    *(_OWORD *)(v1 + 240) = 0u;
    *(_OWORD *)(v1 + 192) = 0u;
    *(_OWORD *)(v1 + 208) = 0u;
    *(_OWORD *)(v1 + 160) = 0u;
    *(_OWORD *)(v1 + 176) = 0u;
    *(_OWORD *)(v1 + 128) = 0u;
    *(_OWORD *)(v1 + 144) = 0u;
    *(_OWORD *)(v1 + 96) = 0u;
    *(_OWORD *)(v1 + 112) = 0u;
    *(_OWORD *)(v1 + 64) = 0u;
    *(_OWORD *)(v1 + 80) = 0u;
    *(_OWORD *)(v1 + 32) = 0u;
    *(_OWORD *)(v1 + 48) = 0u;
    *(_OWORD *)v1 = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v1, v2);
  }
}

void `non-virtual thunk to'WebCore::MediaStreamTrackAudioSourceProviderCocoa::~MediaStreamTrackAudioSourceProviderCocoa(WebCore::MediaStreamTrackAudioSourceProviderCocoa *this)
{
  WebCore::MediaStreamTrackAudioSourceProviderCocoa::~MediaStreamTrackAudioSourceProviderCocoa((WebCore::MediaStreamTrackAudioSourceProviderCocoa *)((char *)this - 240));
}

{
  WebCore::MediaStreamTrackAudioSourceProviderCocoa::~MediaStreamTrackAudioSourceProviderCocoa((WebCore::MediaStreamTrackAudioSourceProviderCocoa *)((char *)this - 256));
}

{
  uint64_t v2;
  void *v3;

  WebCore::MediaStreamTrackAudioSourceProviderCocoa::~MediaStreamTrackAudioSourceProviderCocoa((WebCore::MediaStreamTrackAudioSourceProviderCocoa *)((char *)this - 240));
  if (*((_DWORD *)this + 6))
  {
    *(_QWORD *)(v2 + 288) = 0;
    *(_OWORD *)(v2 + 256) = 0u;
    *(_OWORD *)(v2 + 272) = 0u;
    *(_OWORD *)(v2 + 224) = 0u;
    *(_OWORD *)(v2 + 240) = 0u;
    *(_OWORD *)(v2 + 192) = 0u;
    *(_OWORD *)(v2 + 208) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v2, v3);
  }
}

{
  uint64_t v2;
  void *v3;

  WebCore::MediaStreamTrackAudioSourceProviderCocoa::~MediaStreamTrackAudioSourceProviderCocoa((WebCore::MediaStreamTrackAudioSourceProviderCocoa *)((char *)this - 256));
  if (*((_DWORD *)this + 2))
  {
    *(_QWORD *)(v2 + 288) = 0;
    *(_OWORD *)(v2 + 256) = 0u;
    *(_OWORD *)(v2 + 272) = 0u;
    *(_OWORD *)(v2 + 224) = 0u;
    *(_OWORD *)(v2 + 240) = 0u;
    *(_OWORD *)(v2 + 192) = 0u;
    *(_OWORD *)(v2 + 208) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v2, v3);
  }
}

uint64_t WebCore::MediaStreamTrackAudioSourceProviderCocoa::hasNewClient(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v15;
  int v16;
  _BYTE v17[24];
  uint64_t v18;

  v2 = a2 != 0;
  if (*(unsigned __int8 *)(result + 289) == v2)
    return result;
  v3 = result;
  *(_BYTE *)(result + 289) = v2;
  v4 = *(_QWORD *)(result + 272);
  if (!a2)
  {
    if (v4)
    {
      v6 = *(_QWORD *)(v4 + 8);
      if (v6)
        WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(v6 + 24, (_QWORD *)(result + 240));
    }
    v7 = *(_QWORD *)(v3 + 280);
    v8 = v3 + 256;
    v9 = (unsigned __int8 *)(v7 + 144);
    if (__ldaxr((unsigned __int8 *)(v7 + 144)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v9))
    {
      goto LABEL_25;
    }
    MEMORY[0x19AEA534C](v7 + 144);
LABEL_25:
    result = WTF::HashSet<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTableTraits>::remove<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>((uint64_t *)(v7 + 152), v8);
    v16 = __ldxr(v9);
    if (v16 == 1)
    {
      if (!__stlxr(0, v9))
        return result;
    }
    else
    {
      __clrex();
    }
    return WTF::Lock::unlockSlow((WTF::Lock *)(v7 + 144));
  }
  if (v4)
  {
    v4 = *(_QWORD *)(v4 + 8);
    v5 = v4 + 73;
  }
  else
  {
    v5 = 73;
  }
  *(_BYTE *)(result + 288) = *(_BYTE *)v5;
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(v4 + 24, (_QWORD *)(result + 240), (uint64_t)v17);
  v11 = *(_QWORD *)(v3 + 280);
  v12 = v3 + 256;
  v13 = (unsigned __int8 *)(v11 + 144);
  if (__ldaxr((unsigned __int8 *)(v11 + 144)))
  {
    __clrex();
LABEL_14:
    MEMORY[0x19AEA534C](v11 + 144);
    goto LABEL_15;
  }
  if (__stxr(1u, v13))
    goto LABEL_14;
LABEL_15:
  v18 = v12;
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
  WTF::HashTable<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>>::add((uint64_t *)(v11 + 152), &v18, (uint64_t)v17);
  result = v18;
  if (v18)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
  v15 = __ldxr(v13);
  if (v15 == 1)
  {
    if (!__stlxr(0, v13))
      return result;
  }
  else
  {
    __clrex();
  }
  return WTF::Lock::unlockSlow((WTF::Lock *)(v11 + 144));
}

uint64_t WebCore::MediaStreamTrackAudioSourceProviderCocoa::trackEnabledChanged(uint64_t this, WebCore::MediaStreamTrackPrivate *a2)
{
  *(_BYTE *)(this + 288) = *((_BYTE *)a2 + 73);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::MediaStreamTrackAudioSourceProviderCocoa::trackEnabledChanged(uint64_t this, WebCore::MediaStreamTrackPrivate *a2)
{
  *(_BYTE *)(this + 48) = *((_BYTE *)a2 + 73);
  return this;
}

uint64_t WebCore::MediaStreamTrackAudioSourceProviderCocoa::audioSamplesAvailable(uint64_t result, uint64_t a2, _QWORD *a3, uint64_t a4, unint64_t a5)
{
  if (*(_BYTE *)(result + 288))
    return WebCore::WebAudioSourceProviderCocoa::receivedNewAudioSamples(result, a3, a4, a5);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::MediaStreamTrackAudioSourceProviderCocoa::audioSamplesAvailable(uint64_t result, uint64_t a2, _QWORD *a3, uint64_t a4, unint64_t a5)
{
  if (*(_BYTE *)(result + 32))
    return WebCore::WebAudioSourceProviderCocoa::receivedNewAudioSamples(result - 256, a3, a4, a5);
  return result;
}

_BYTE *WebCore::RealtimeIncomingAudioSource::create@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  const WebCore::CAAudioStreamDescription *v8;
  WebCore::WebAudioBufferList *v9;
  unint64_t StatusReg;
  unsigned int *v11;
  unsigned int v12;
  _QWORD *v13;
  _BYTE *result;

  v6 = WTF::fastMalloc((WTF *)0x290);
  v7 = WebCore::RealtimeIncomingAudioSource::RealtimeIncomingAudioSource(v6, a1, a2);
  *(_QWORD *)v7 = off_1E341B280;
  *(_QWORD *)(v7 + 304) = &unk_1E341B440;
  *(_QWORD *)(v7 + 312) = &unk_1E341B478;
  *(_QWORD *)(v7 + 464) = 0;
  *(_DWORD *)(v7 + 472) = 48000;
  v8 = (const WebCore::CAAudioStreamDescription *)(v7 + 488);
  *(_QWORD *)(v7 + 480) = 1;
  *(_QWORD *)(v7 + 488) = off_1E34087C0;
  *(_QWORD *)(v7 + 496) = 0x40E7700000000000;
  *(_OWORD *)(v7 + 504) = xmmword_1969F95C0;
  *(_QWORD *)(v7 + 520) = 0x100000002;
  *(_DWORD *)(v7 + 528) = 16;
  *(_DWORD *)(v7 + 536) = 0;
  *(_QWORD *)(v7 + 544) = 0;
  *(_DWORD *)(v7 + 552) = 0;
  *(_DWORD *)(v7 + 560) = 0;
  v9 = (WebCore::WebAudioBufferList *)WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)(v6 + 568) = WebCore::WebAudioBufferList::WebAudioBufferList(v9, v8);
  *(_BYTE *)(v6 + 592) = 0;
  *(_OWORD *)(v6 + 576) = 0u;
  *(_QWORD *)(v6 + 600) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(v6 + 608) = 0u;
  *(_OWORD *)(v6 + 624) = 0u;
  v11 = *(unsigned int **)(StatusReg + 736);
  if (!v11)
    v11 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  *(_QWORD *)(v6 + 640) = v11;
  *(_QWORD *)(v6 + 600) = off_1E31F7378;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v13 = off_1E341BAC0;
  v13[1] = WebCore::RealtimeIncomingAudioSourceCocoa::logTimerFired;
  v13[2] = 0;
  v13[3] = v6;
  *(_QWORD *)(v6 + 648) = v13;
  result = WebCore::RealtimeMediaSource::start((_BYTE *)v6);
  *a3 = v6;
  return result;
}

uint64_t WebCore::RealtimeIncomingAudioSourceCocoa::logTimerFired(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  WTF::String *v26;
  WTF::String *v27;
  WTF::Logger *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::Logger *v36;
  uint64_t v37;
  WTF::StringImpl **v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  int v46;
  uint64_t v47;
  _QWORD v48[4];
  WTF::Logger *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  __int128 buf;
  const char *v63;
  WTF::StringImpl *v64;
  int v65;
  WTF::StringImpl *v66;
  int v67;
  WTF::StringImpl *v68;
  int v69;
  WTF::StringImpl *v70;
  int v71;
  WTF::StringImpl *v72[3];

  v1 = this;
  v72[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(this + 584);
  v3 = *(_QWORD *)(this + 576);
  if (!v2 || (unint64_t)(v3 - v2) >= 0xC8)
  {
    *(_QWORD *)(this + 584) = v3;
    v4 = *(_QWORD *)(this + 40);
    if (v4)
    {
      v5 = *(WTF::StringImpl **)(this + 48);
      *(_QWORD *)&buf = "RealtimeIncomingAudioSource";
      *((_QWORD *)&buf + 1) = 28;
      v63 = "logTimerFired";
      v64 = v5;
      if (*(_BYTE *)(v4 + 12))
        this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [7],unsigned long>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&buf, "chunk ", (WTF::String **)(this + 576));
    }
  }
  if (*(_BYTE *)(v1 + 592))
  {
    v6 = *(_QWORD *)(v1 + 40);
    if (v6)
    {
      v7 = *(_QWORD *)(v1 + 48);
      v48[0] = "RealtimeIncomingAudioSource";
      v48[1] = 28;
      v48[2] = "logTimerFired";
      v48[3] = v7;
      if (*(_BYTE *)(v6 + 12))
      {
        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v48);
        WTF::String::String((WTF::String *)&v55, "new audio buffer list for sampleRate ");
        WTF::String::number((WTF::String *)*(unsigned int *)(v1 + 472));
        WTF::String::String((WTF::String *)&v53, " and ");
        WTF::String::number(*(WTF::String **)(v1 + 480));
        WTF::String::String((WTF::String *)&v51, " channel(s)");
        v49 = v55;
        v61 = v54;
        *(_QWORD *)&buf = v56;
        v59 = v52;
        v60 = v53;
        v58 = v51;
        this = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v49, (uint64_t *)&v61, (uint64_t *)&v60, (uint64_t *)&v59, (uint64_t *)&v58, &v57);
        if (!v57)
        {
          __break(0xC471u);
          return this;
        }
        v9 = v51;
        v51 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy(v9, v8);
          else
            *(_DWORD *)v9 -= 2;
        }
        v10 = v52;
        v52 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, v8);
          else
            *(_DWORD *)v10 -= 2;
        }
        v11 = v53;
        v53 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, v8);
          else
            *(_DWORD *)v11 -= 2;
        }
        v12 = v54;
        v54 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v8);
          else
            *(_DWORD *)v12 -= 2;
        }
        v13 = v55;
        v55 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v8);
          else
            *(_DWORD *)v13 -= 2;
        }
        v14 = v56;
        v56 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v8);
          else
            *(_DWORD *)v14 -= 2;
        }
        v15 = qword_1ECE7CD60;
        v16 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v16)
        {
          WTF::String::utf8();
          v18 = v49 ? (char *)v49 + 16 : 0;
          LODWORD(buf) = 136446210;
          *(_QWORD *)((char *)&buf + 4) = v18;
          _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
          v16 = (uint64_t)v49;
          v49 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 1)
              v16 = WTF::fastFree((WTF *)v16, v17);
            else
              --*(_DWORD *)v16;
          }
        }
        if (WebCore::LogWebRTC)
        {
          v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
          while (1)
          {
            v20 = *v19;
            if ((v20 & 1) != 0)
              break;
            v21 = __ldaxr(v19);
            if (v21 == v20)
            {
              if (!__stxr(v20 | 1, v19))
              {
                v22 = WTF::Logger::observers((WTF::Logger *)v16);
                v23 = *(unsigned int *)(v22 + 12);
                if ((_DWORD)v23)
                {
                  v24 = *(uint64_t **)v22;
                  v47 = *(_QWORD *)v22 + 8 * v23;
                  do
                  {
                    v25 = *v24;
                    LODWORD(buf) = 0;
                    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v48);
                    LODWORD(v63) = 0;
                    WTF::String::String((WTF::String *)&v64, "new audio buffer list for sampleRate ");
                    v26 = (WTF::String *)*(unsigned int *)(v1 + 472);
                    v65 = 0;
                    WTF::String::number(v26);
                    v67 = 0;
                    WTF::String::String((WTF::String *)&v68, " and ");
                    v27 = *(WTF::String **)(v1 + 480);
                    v69 = 0;
                    WTF::String::number(v27);
                    v71 = 0;
                    WTF::String::String((WTF::String *)v72, " channel(s)");
                    v49 = 0;
                    v50 = 0;
                    v28 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x60);
                    LODWORD(v50) = 6;
                    v49 = v28;
                    v29 = HIDWORD(v50);
                    *((_DWORD *)v28 + 4 * HIDWORD(v50)) = buf;
                    v30 = *((_QWORD *)&buf + 1);
                    if (*((_QWORD *)&buf + 1))
                      **((_DWORD **)&buf + 1) += 2;
                    *((_QWORD *)v28 + 2 * v29 + 1) = v30;
                    *((_DWORD *)v28 + 4 * (v29 + 1)) = (_DWORD)v63;
                    v31 = v64;
                    if (v64)
                      *(_DWORD *)v64 += 2;
                    *((_QWORD *)v28 + 2 * (v29 + 1) + 1) = v31;
                    *((_DWORD *)v28 + 4 * (v29 + 2)) = v65;
                    v32 = v66;
                    if (v66)
                      *(_DWORD *)v66 += 2;
                    *((_QWORD *)v28 + 2 * (v29 + 2) + 1) = v32;
                    *((_DWORD *)v28 + 4 * (v29 + 3)) = v67;
                    v33 = v68;
                    if (v68)
                      *(_DWORD *)v68 += 2;
                    *((_QWORD *)v28 + 2 * (v29 + 3) + 1) = v33;
                    *((_DWORD *)v28 + 4 * (v29 + 4)) = v69;
                    v34 = v70;
                    if (v70)
                      *(_DWORD *)v70 += 2;
                    *((_QWORD *)v28 + 2 * (v29 + 4) + 1) = v34;
                    *((_DWORD *)v28 + 4 * (v29 + 5)) = v71;
                    v35 = v72[0];
                    if (v72[0])
                      *(_DWORD *)v72[0] += 2;
                    *((_QWORD *)v28 + 2 * (v29 + 5) + 1) = v35;
                    HIDWORD(v50) = v29 + 6;
                    (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v25 + 16))(v25, &WebCore::LogWebRTC, 0, &v49);
                    v36 = v49;
                    if (HIDWORD(v50))
                    {
                      v37 = 16 * HIDWORD(v50);
                      v38 = (WTF::StringImpl **)((char *)v49 + 8);
                      do
                      {
                        v39 = *v38;
                        *v38 = 0;
                        if (v39)
                        {
                          if (*(_DWORD *)v39 == 2)
                            WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v17);
                          else
                            *(_DWORD *)v39 -= 2;
                        }
                        v38 += 2;
                        v37 -= 16;
                      }
                      while (v37);
                      v36 = v49;
                    }
                    if (v36)
                    {
                      v49 = 0;
                      LODWORD(v50) = 0;
                      WTF::fastFree(v36, v17);
                    }
                    v40 = v72[0];
                    v72[0] = 0;
                    if (v40)
                    {
                      if (*(_DWORD *)v40 == 2)
                        WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v17);
                      else
                        *(_DWORD *)v40 -= 2;
                    }
                    v41 = v70;
                    v70 = 0;
                    if (v41)
                    {
                      if (*(_DWORD *)v41 == 2)
                        WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v17);
                      else
                        *(_DWORD *)v41 -= 2;
                    }
                    v42 = v68;
                    v68 = 0;
                    if (v42)
                    {
                      if (*(_DWORD *)v42 == 2)
                        WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v17);
                      else
                        *(_DWORD *)v42 -= 2;
                    }
                    v43 = v66;
                    v66 = 0;
                    if (v43)
                    {
                      if (*(_DWORD *)v43 == 2)
                        WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v17);
                      else
                        *(_DWORD *)v43 -= 2;
                    }
                    v44 = v64;
                    v64 = 0;
                    if (v44)
                    {
                      if (*(_DWORD *)v44 == 2)
                        WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v17);
                      else
                        *(_DWORD *)v44 -= 2;
                    }
                    v45 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                    *((_QWORD *)&buf + 1) = 0;
                    if (v45)
                    {
                      if (*(_DWORD *)v45 == 2)
                        WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v17);
                      else
                        *(_DWORD *)v45 -= 2;
                    }
                    ++v24;
                  }
                  while (v24 != (uint64_t *)v47);
                }
                v46 = __ldxr(v19);
                if (v46 == 1)
                {
                  if (!__stlxr(0, v19))
                    break;
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        this = (uint64_t)v57;
        v57 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            this = WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)v17);
          else
            *(_DWORD *)this -= 2;
        }
      }
    }
    *(_BYTE *)(v1 + 592) = 0;
  }
  return this;
}

uint64_t WebCore::RealtimeIncomingAudioSourceCocoa::startProducingData(WebCore::RealtimeIncomingAudioSourceCocoa *this)
{
  WTF::MonotonicTime *v2;
  double v3;

  v2 = (WTF::MonotonicTime *)(*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 54) + 80))(*((_QWORD *)this + 54), (char *)this + 304);
  *((_QWORD *)this + 78) = 0x4000000000000000;
  WTF::MonotonicTime::now(v2);
  return WebCore::TimerBase::setNextFireTime((uint64_t)this + 600, v3 + 2.0);
}

uint64_t WebCore::RealtimeIncomingAudioSourceCocoa::stopProducingData(WebCore::RealtimeIncomingAudioSourceCocoa *this)
{
  if ((*((_QWORD *)this + 79) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::RealtimeIncomingAudioSourceCocoa *)((char *)this + 600));
  return (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 54) + 88))(*((_QWORD *)this + 54), (char *)this + 304);
}

_BYTE *WebCore::RealtimeIncomingAudioSourceCocoa::OnData(_BYTE *this, const void *a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  WebCore::WebAudioBufferList *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  PAL **v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  _BOOL4 v22;
  BOOL v23;
  uint64_t v24;
  int *v25;
  _DWORD *v26;
  int v27;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v10 = (uint64_t)this;
  v11 = *((_QWORD *)this + 72) + 1;
  *((_QWORD *)this + 72) = v11;
  if (a4 != 16000 || v11 >= 0x14)
  {
    if (!*((_QWORD *)this + 71) || *((_QWORD *)this + 60) != a5 || *((_DWORD *)this + 118) != a4)
    {
      v12 = a4;
      this[592] = 1;
      *((_DWORD *)this + 118) = a4;
      *((_QWORD *)this + 60) = a5;
      *((double *)this + 62) = (double)(unint64_t)a4;
      *((_QWORD *)this + 63) = 0xC6C70636DLL;
      *((_DWORD *)this + 128) = 2 * a5;
      *((_DWORD *)this + 129) = 1;
      *((_DWORD *)this + 130) = 2 * a5;
      *((_DWORD *)this + 131) = a5;
      *((_DWORD *)this + 132) = 16;
      *((_DWORD *)this + 134) = 0;
      *((_QWORD *)this + 68) = 0;
      *((_DWORD *)this + 138) = 0;
      *((_DWORD *)this + 140) = 0;
      v13 = (WebCore::WebAudioBufferList *)WTF::fastMalloc((WTF *)0x48);
      WebCore::WebAudioBufferList::WebAudioBufferList(v13, (const WebCore::CAAudioStreamDescription *)(v10 + 488));
      std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100]((uint64_t *)(v10 + 568), v13);
      v14 = *(int *)(v10 + 472);
      if ((_DWORD)v14 && (v15 = *(_QWORD *)(v10 + 464)) != 0)
        *(_QWORD *)(v10 + 464) = v15 * v12 / v14;
      else
        *(_QWORD *)(v10 + 464) = 0;
    }
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v16 = *(_QWORD *)(v10 + 440);
    if (v16)
      v17 = (PAL **)(v16 + 56);
    else
      v17 = (PAL **)(v10 + 464);
    PAL::softLinkCoreMediaCMTimeMake(*v17, 48000, a3);
    v18 = v30;
    v19 = BYTE4(v30) & 1;
    if ((~HIDWORD(v30) & 3) == 0)
      v19 = BYTE4(v30) & 1 | 2;
    if ((~HIDWORD(v30) & 5) == 0)
      v19 |= 4u;
    if ((~HIDWORD(v30) & 9) == 0)
      v19 |= 8u;
    if ((~HIDWORD(v30) & 0x11) != 0)
      v20 = v19;
    else
      v20 = v19 | 0x10;
    v22 = (v20 & 1) == 0 || v30 != 0;
    v23 = !v22;
    if (v22)
    {
      v24 = v29;
    }
    else
    {
      v20 = 5;
      v24 = v29 >> 63;
    }
    if (v23)
      v18 = 1;
    v28[0] = v24;
    v28[1] = v18 | ((unint64_t)v20 << 32);
    *(_QWORD *)(v10 + 464) += a6;
    v25 = *(int **)(*(_QWORD *)(v10 + 568) + 40);
    v27 = *v25;
    v26 = v25 + 2;
    if (!v27)
      v26 = 0;
    *v26 = a5;
    v26[1] = (unint64_t)(a3 * a5 * a6) >> 3;
    *((_QWORD *)v26 + 1) = a2;
    return WebCore::RealtimeMediaSource::audioSamplesAvailable((_BYTE *)v10, (uint64_t)v28, *(_QWORD *)(v10 + 568), v10 + 488, a6);
  }
  return this;
}

_BYTE *`non-virtual thunk to'WebCore::RealtimeIncomingAudioSourceCocoa::OnData(WebCore::RealtimeIncomingAudioSourceCocoa *this, const void *a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  return WebCore::RealtimeIncomingAudioSourceCocoa::OnData((_BYTE *)this - 304, a2, a3, a4, a5, a6);
}

uint64_t *WebCore::RealtimeMediaSourceCenter::defaultVideoCaptureFactory(WebCore::RealtimeMediaSourceCenter *this)
{
  {
    WebCore::RealtimeMediaSourceCenter::defaultVideoCaptureFactory(void)::factory = (uint64_t)&off_1E341BAE8;
  }
  return &WebCore::RealtimeMediaSourceCenter::defaultVideoCaptureFactory(void)::factory;
}

uint64_t *WebCore::RealtimeMediaSourceCenter::defaultDisplayCaptureFactory(WebCore::RealtimeMediaSourceCenter *this)
{
  {
    WebCore::RealtimeMediaSourceCenter::defaultDisplayCaptureFactory(void)::factory = (uint64_t)&off_1E341BB18;
  }
  return &WebCore::RealtimeMediaSourceCenter::defaultDisplayCaptureFactory(void)::factory;
}

void WebCore::RealtimeOutgoingAudioSourceCocoa::~RealtimeOutgoingAudioSourceCocoa(WebCore::RealtimeOutgoingAudioSourceCocoa *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;

  v3 = (WTF *)*((_QWORD *)this + 35);
  if (v3)
  {
    *((_QWORD *)this + 35) = 0;
    *((_DWORD *)this + 72) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E331A460;
      v8[1] = v5;
      v9 = v8;
      WTF::ensureOnMainRunLoop();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  WebCore::RealtimeOutgoingAudioSource::~RealtimeOutgoingAudioSource(this);
}

{
  WTF *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;

  v3 = (WTF *)*((_QWORD *)this + 35);
  if (v3)
  {
    *((_QWORD *)this + 35) = 0;
    *((_DWORD *)this + 72) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v9 = off_1E331A460;
      v9[1] = v5;
      v10 = v9;
      WTF::ensureOnMainRunLoop();
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    }
  }
  WebCore::RealtimeOutgoingAudioSource::~RealtimeOutgoingAudioSource(this);
  if (*((_DWORD *)this + 22))
  {
    *((_OWORD *)this + 18) = 0u;
    *((_OWORD *)this + 19) = 0u;
    *((_OWORD *)this + 16) = 0u;
    *((_OWORD *)this + 17) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 15) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  else
  {
    WTF::fastFree(this, v8);
  }
}

void `non-virtual thunk to'WebCore::RealtimeOutgoingAudioSourceCocoa::~RealtimeOutgoingAudioSourceCocoa(WebCore::RealtimeOutgoingAudioSourceCocoa *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;

  v3 = (WTF *)*((_QWORD *)this + 34);
  if (v3)
  {
    *((_QWORD *)this + 34) = 0;
    *((_DWORD *)this + 70) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E331A460;
      v8[1] = v5;
      v9 = v8;
      WTF::ensureOnMainRunLoop();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  WebCore::RealtimeOutgoingAudioSource::~RealtimeOutgoingAudioSource((WebCore::RealtimeOutgoingAudioSourceCocoa *)((char *)this - 8));
}

{
  WTF *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;

  v3 = (WTF *)*((_QWORD *)this + 32);
  if (v3)
  {
    *((_QWORD *)this + 32) = 0;
    *((_DWORD *)this + 66) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E331A460;
      v8[1] = v5;
      v9 = v8;
      WTF::ensureOnMainRunLoop();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  WebCore::RealtimeOutgoingAudioSource::~RealtimeOutgoingAudioSource((WebCore::RealtimeOutgoingAudioSourceCocoa *)((char *)this - 24));
}

{
  WTF *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;

  v3 = (WTF *)*((_QWORD *)this + 30);
  if (v3)
  {
    *((_QWORD *)this + 30) = 0;
    *((_DWORD *)this + 62) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E331A460;
      v8[1] = v5;
      v9 = v8;
      WTF::ensureOnMainRunLoop();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  WebCore::RealtimeOutgoingAudioSource::~RealtimeOutgoingAudioSource((WebCore::RealtimeOutgoingAudioSourceCocoa *)((char *)this - 40));
}

{
  WTF *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;

  v3 = (WTF *)*((_QWORD *)this + 29);
  if (v3)
  {
    *((_QWORD *)this + 29) = 0;
    *((_DWORD *)this + 60) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E331A460;
      v8[1] = v5;
      v9 = v8;
      WTF::ensureOnMainRunLoop();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  WebCore::RealtimeOutgoingAudioSource::~RealtimeOutgoingAudioSource((WebCore::RealtimeOutgoingAudioSourceCocoa *)((char *)this - 48));
}

{
  WebCore::RealtimeOutgoingAudioSource *v3;
  WTF *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;

  v3 = (WebCore::RealtimeOutgoingAudioSourceCocoa *)((char *)this - 8);
  v4 = (WTF *)*((_QWORD *)this + 34);
  if (v4)
  {
    *((_QWORD *)this + 34) = 0;
    *((_DWORD *)this + 70) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v10 = off_1E331A460;
      v10[1] = v6;
      v11 = v10;
      WTF::ensureOnMainRunLoop();
      if (v11)
        (*(void (**)(_QWORD *))(*v11 + 8))(v11);
    }
  }
  WebCore::RealtimeOutgoingAudioSource::~RealtimeOutgoingAudioSource(v3);
  if (*((_DWORD *)this + 20))
  {
    *((_OWORD *)v3 + 18) = 0u;
    *((_OWORD *)v3 + 19) = 0u;
    *((_OWORD *)v3 + 16) = 0u;
    *((_OWORD *)v3 + 17) = 0u;
    *((_OWORD *)v3 + 14) = 0u;
    *((_OWORD *)v3 + 15) = 0u;
    *((_OWORD *)v3 + 12) = 0u;
    *((_OWORD *)v3 + 13) = 0u;
    *((_OWORD *)v3 + 10) = 0u;
    *((_OWORD *)v3 + 11) = 0u;
    *((_OWORD *)v3 + 8) = 0u;
    *((_OWORD *)v3 + 9) = 0u;
    *((_OWORD *)v3 + 6) = 0u;
    *((_OWORD *)v3 + 7) = 0u;
    *((_OWORD *)v3 + 4) = 0u;
    *((_OWORD *)v3 + 5) = 0u;
    *((_OWORD *)v3 + 2) = 0u;
    *((_OWORD *)v3 + 3) = 0u;
    *(_OWORD *)v3 = 0u;
    *((_OWORD *)v3 + 1) = 0u;
  }
  else
  {
    WTF::fastFree(v3, v9);
  }
}

{
  WebCore::RealtimeOutgoingAudioSource *v3;
  WTF *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;

  v3 = (WebCore::RealtimeOutgoingAudioSourceCocoa *)((char *)this - 24);
  v4 = (WTF *)*((_QWORD *)this + 32);
  if (v4)
  {
    *((_QWORD *)this + 32) = 0;
    *((_DWORD *)this + 66) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v10 = off_1E331A460;
      v10[1] = v6;
      v11 = v10;
      WTF::ensureOnMainRunLoop();
      if (v11)
        (*(void (**)(_QWORD *))(*v11 + 8))(v11);
    }
  }
  WebCore::RealtimeOutgoingAudioSource::~RealtimeOutgoingAudioSource(v3);
  if (*((_DWORD *)this + 16))
  {
    *((_OWORD *)v3 + 18) = 0u;
    *((_OWORD *)v3 + 19) = 0u;
    *((_OWORD *)v3 + 16) = 0u;
    *((_OWORD *)v3 + 17) = 0u;
    *((_OWORD *)v3 + 14) = 0u;
    *((_OWORD *)v3 + 15) = 0u;
    *((_OWORD *)v3 + 12) = 0u;
    *((_OWORD *)v3 + 13) = 0u;
    *((_OWORD *)v3 + 10) = 0u;
    *((_OWORD *)v3 + 11) = 0u;
    *((_OWORD *)v3 + 8) = 0u;
    *((_OWORD *)v3 + 9) = 0u;
    *((_OWORD *)v3 + 6) = 0u;
    *((_OWORD *)v3 + 7) = 0u;
    *((_OWORD *)v3 + 4) = 0u;
    *((_OWORD *)v3 + 5) = 0u;
    *((_OWORD *)v3 + 2) = 0u;
    *((_OWORD *)v3 + 3) = 0u;
    *(_OWORD *)v3 = 0u;
    *((_OWORD *)v3 + 1) = 0u;
  }
  else
  {
    WTF::fastFree(v3, v9);
  }
}

{
  WebCore::RealtimeOutgoingAudioSource *v3;
  WTF *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;

  v3 = (WebCore::RealtimeOutgoingAudioSourceCocoa *)((char *)this - 40);
  v4 = (WTF *)*((_QWORD *)this + 30);
  if (v4)
  {
    *((_QWORD *)this + 30) = 0;
    *((_DWORD *)this + 62) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v10 = off_1E331A460;
      v10[1] = v6;
      v11 = v10;
      WTF::ensureOnMainRunLoop();
      if (v11)
        (*(void (**)(_QWORD *))(*v11 + 8))(v11);
    }
  }
  WebCore::RealtimeOutgoingAudioSource::~RealtimeOutgoingAudioSource(v3);
  if (*((_DWORD *)this + 12))
  {
    *((_OWORD *)v3 + 18) = 0u;
    *((_OWORD *)v3 + 19) = 0u;
    *((_OWORD *)v3 + 16) = 0u;
    *((_OWORD *)v3 + 17) = 0u;
    *((_OWORD *)v3 + 14) = 0u;
    *((_OWORD *)v3 + 15) = 0u;
    *((_OWORD *)v3 + 12) = 0u;
    *((_OWORD *)v3 + 13) = 0u;
    *((_OWORD *)v3 + 10) = 0u;
    *((_OWORD *)v3 + 11) = 0u;
    *((_OWORD *)v3 + 8) = 0u;
    *((_OWORD *)v3 + 9) = 0u;
    *((_OWORD *)v3 + 6) = 0u;
    *((_OWORD *)v3 + 7) = 0u;
    *((_OWORD *)v3 + 4) = 0u;
    *((_OWORD *)v3 + 5) = 0u;
    *((_OWORD *)v3 + 2) = 0u;
    *((_OWORD *)v3 + 3) = 0u;
    *(_OWORD *)v3 = 0u;
    *((_OWORD *)v3 + 1) = 0u;
  }
  else
  {
    WTF::fastFree(v3, v9);
  }
}

{
  WebCore::RealtimeOutgoingAudioSource *v3;
  WTF *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;

  v3 = (WebCore::RealtimeOutgoingAudioSourceCocoa *)((char *)this - 48);
  v4 = (WTF *)*((_QWORD *)this + 29);
  if (v4)
  {
    *((_QWORD *)this + 29) = 0;
    *((_DWORD *)this + 60) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v10 = off_1E331A460;
      v10[1] = v6;
      v11 = v10;
      WTF::ensureOnMainRunLoop();
      if (v11)
        (*(void (**)(_QWORD *))(*v11 + 8))(v11);
    }
  }
  WebCore::RealtimeOutgoingAudioSource::~RealtimeOutgoingAudioSource(v3);
  if (*((_DWORD *)this + 10))
  {
    *((_OWORD *)v3 + 18) = 0u;
    *((_OWORD *)v3 + 19) = 0u;
    *((_OWORD *)v3 + 16) = 0u;
    *((_OWORD *)v3 + 17) = 0u;
    *((_OWORD *)v3 + 14) = 0u;
    *((_OWORD *)v3 + 15) = 0u;
    *((_OWORD *)v3 + 12) = 0u;
    *((_OWORD *)v3 + 13) = 0u;
    *((_OWORD *)v3 + 10) = 0u;
    *((_OWORD *)v3 + 11) = 0u;
    *((_OWORD *)v3 + 8) = 0u;
    *((_OWORD *)v3 + 9) = 0u;
    *((_OWORD *)v3 + 6) = 0u;
    *((_OWORD *)v3 + 7) = 0u;
    *((_OWORD *)v3 + 4) = 0u;
    *((_OWORD *)v3 + 5) = 0u;
    *((_OWORD *)v3 + 2) = 0u;
    *((_OWORD *)v3 + 3) = 0u;
    *(_OWORD *)v3 = 0u;
    *((_OWORD *)v3 + 1) = 0u;
  }
  else
  {
    WTF::fastFree(v3, v9);
  }
}

BOOL WebCore::RealtimeOutgoingAudioSourceCocoa::isReachingBufferedAudioDataHighLimit(_BOOL8 this)
{
  if (*(_BYTE *)(this + 184) && *(_BYTE *)(this + 272))
    return (double)*(unint64_t *)(this + 304) / *(double *)(this + 112) > (double)*(unint64_t *)(this + 296)
                                                                               / *(double *)(this + 200)
                                                                               + 0.5;
  __break(1u);
  return this;
}

BOOL WebCore::RealtimeOutgoingAudioSourceCocoa::isReachingBufferedAudioDataLowLimit(_BOOL8 this)
{
  if (*(_BYTE *)(this + 184) && *(_BYTE *)(this + 272))
    return (double)*(unint64_t *)(this + 304) / *(double *)(this + 112) < (double)*(unint64_t *)(this + 296)
                                                                               / *(double *)(this + 200)
                                                                               + 0.1;
  __break(1u);
  return this;
}

BOOL WebCore::RealtimeOutgoingAudioSourceCocoa::hasBufferedEnoughData(_BOOL8 this)
{
  if (*(_BYTE *)(this + 184) && *(_BYTE *)(this + 272))
    return (double)*(unint64_t *)(this + 304) / *(double *)(this + 112) >= (double)*(unint64_t *)(this + 296)
                                                                                / *(double *)(this + 200)
                                                                                + 0.01;
  __break(1u);
  return this;
}

uint64_t WebCore::RealtimeOutgoingAudioSourceCocoa::audioSamplesAvailable(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, unint64_t a5)
{
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  double v12;
  uint64_t v13;
  OpaqueAudioConverter **v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unsigned int v24;
  int v25;
  int v26;
  WebCore::AudioSampleDataSource *v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  _QWORD *v35;
  uint64_t v36;
  _BYTE v37[64];
  int v38;
  int v39;
  char v40;
  char v41;

  if (*(_BYTE *)(a1 + 184) && *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4) == 1)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4);
    if (*(_DWORD *)(result + 16) != 1)
      goto LABEL_55;
    v10 = *(_QWORD *)(result + 8);
    if (*(double *)(a1 + 112) == *(double *)v10
      && *(_DWORD *)(a1 + 120) == *(_DWORD *)(v10 + 8)
      && *(_DWORD *)(a1 + 124) == *(_DWORD *)(v10 + 12)
      && *(_DWORD *)(a1 + 128) == *(_DWORD *)(v10 + 16)
      && *(_DWORD *)(a1 + 132) == *(_DWORD *)(v10 + 20)
      && *(_DWORD *)(a1 + 136) == *(_DWORD *)(v10 + 24)
      && *(_DWORD *)(a1 + 140) == *(_DWORD *)(v10 + 28)
      && *(_DWORD *)(a1 + 144) == *(_DWORD *)(v10 + 32))
    {
      goto LABEL_33;
    }
  }
  v11 = *(_QWORD *)(a1 + 304);
  if (v11)
  {
    if (!*(_BYTE *)(a1 + 184))
      goto LABEL_54;
    if (*(double *)(a1 + 112) != 0.0)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a4 + 32))(a4);
      if (!*(_BYTE *)(a1 + 184))
        goto LABEL_54;
      *(_QWORD *)(a1 + 304) = (unint64_t)(v12 * (double)v11 / *(double *)(a1 + 112));
    }
  }
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4);
  if (*(_DWORD *)(v13 + 16) != 1)
  {
LABEL_55:
    v36 = std::__throw_bad_variant_access[abi:sn180100]();
  }
  v15 = *(__int128 **)(v13 + 8);
  *(_OWORD *)v37 = *v15;
  *(_OWORD *)&v37[16] = v15[1];
  *(_QWORD *)&v37[32] = *((_QWORD *)v15 + 4);
  if (*(_BYTE *)(a1 + 184))
  {
    v16 = *v15;
    v17 = v15[1];
    *(_QWORD *)(a1 + 144) = *((_QWORD *)v15 + 4);
    *(_OWORD *)(a1 + 112) = v16;
    *(_OWORD *)(a1 + 128) = v17;
    *(_DWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_DWORD *)(a1 + 168) = 0;
    *(_DWORD *)(a1 + 176) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 104) = off_1E34087C0;
    v18 = *(_OWORD *)&v37[16];
    *(_OWORD *)(a1 + 112) = *(_OWORD *)v37;
    *(_OWORD *)(a1 + 128) = v18;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)&v37[32];
    *(_DWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_DWORD *)(a1 + 168) = 0;
    *(_DWORD *)(a1 + 176) = 0;
    *(_BYTE *)(a1 + 184) = 1;
  }
  v19 = *(_QWORD *)(a1 + 96);
  v20 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)v37 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)&v37[16] = v20;
  v21 = *(_OWORD *)(a1 + 160);
  *(_OWORD *)&v37[32] = *(_OWORD *)(a1 + 144);
  *(_OWORD *)&v37[48] = v21;
  if (*(_BYTE *)(v19 + 96))
  {
    v22 = *(_OWORD *)(a1 + 112);
    v23 = *(_OWORD *)(a1 + 128);
    *(_QWORD *)(v19 + 56) = *(_QWORD *)(a1 + 144);
    *(_OWORD *)(v19 + 40) = v23;
    *(_OWORD *)(v19 + 24) = v22;
    *(_OWORD *)(v19 + 64) = *(_OWORD *)&v37[40];
    *(_QWORD *)(v19 + 80) = *(_QWORD *)&v37[56];
  }
  else
  {
    *(_QWORD *)(v19 + 16) = off_1E34087C0;
    *(_OWORD *)(v19 + 24) = *(_OWORD *)v37;
    *(_OWORD *)(v19 + 40) = *(_OWORD *)&v37[16];
    *(_OWORD *)(v19 + 56) = *(_OWORD *)&v37[32];
    *(_OWORD *)(v19 + 72) = *(_OWORD *)&v37[48];
    *(_BYTE *)(v19 + 96) = 1;
  }
  *(_DWORD *)(v19 + 88) = 0;
  if (*(_BYTE *)(v19 + 184))
    WebCore::AudioSampleDataConverter::setFormats(v19 + 256, (_DWORD *)(v19 + 16), v19 + 104, v14);
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 96))(a4);
  if (v24 >= 2)
    v25 = 2;
  else
    v25 = v24;
  v26 = 2 * v25;
  if (*(_BYTE *)(a1 + 272))
  {
    *(_QWORD *)(a1 + 200) = 0x40E7700000000000;
    *(_QWORD *)(a1 + 208) = 0xC6C70636DLL;
    *(_DWORD *)(a1 + 216) = v26;
    *(_DWORD *)(a1 + 220) = 1;
    *(_DWORD *)(a1 + 224) = v26;
    *(_DWORD *)(a1 + 228) = v25;
    *(_DWORD *)(a1 + 232) = 16;
  }
  else
  {
    *(_QWORD *)(a1 + 192) = off_1E34087C0;
    *(_QWORD *)(a1 + 200) = 0x40E7700000000000;
    *(_QWORD *)(a1 + 208) = 0xC6C70636DLL;
    *(_DWORD *)(a1 + 216) = v26;
    *(_DWORD *)(a1 + 220) = 1;
    *(_DWORD *)(a1 + 224) = v26;
    *(_DWORD *)(a1 + 228) = v25;
    *(_DWORD *)(a1 + 232) = 16;
    *(_BYTE *)(a1 + 272) = 1;
  }
  v27 = *(WebCore::AudioSampleDataSource **)(a1 + 96);
  *(_DWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  *(_QWORD *)v37 = off_1E34087C0;
  *(_OWORD *)&v37[8] = *(_OWORD *)(a1 + 200);
  *(_OWORD *)&v37[24] = *(_OWORD *)(a1 + 216);
  *(_QWORD *)&v37[40] = *(_QWORD *)(a1 + 232);
  *(_DWORD *)&v37[48] = 0;
  *(_QWORD *)&v37[56] = 0;
  v38 = 0;
  v39 = 0;
  result = WebCore::AudioSampleDataSource::setOutputFormat(v27, (const WebCore::CAAudioStreamDescription *)v37);
LABEL_33:
  if (!*(_BYTE *)(a1 + 312))
  {
    if (*(_BYTE *)(a1 + 184) && *(_BYTE *)(a1 + 272))
    {
      v28 = *(double *)(a1 + 112);
      v29 = *(_QWORD *)(a1 + 304);
      if ((double)(unint64_t)v29 / v28 > (double)*(unint64_t *)(a1 + 296) / *(double *)(a1 + 200) + 0.5)
      {
        *(_BYTE *)(a1 + 312) = 1;
        return result;
      }
      goto LABEL_42;
    }
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  if (!*(_BYTE *)(a1 + 184) || !*(_BYTE *)(a1 + 272))
    goto LABEL_54;
  v28 = *(double *)(a1 + 112);
  v29 = *(_QWORD *)(a1 + 304);
  if ((double)(unint64_t)v29 / v28 >= (double)*(unint64_t *)(a1 + 296) / *(double *)(a1 + 200) + 0.1)
    return result;
  *(_BYTE *)(a1 + 312) = 0;
LABEL_42:
  v30 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)v37 = v29;
  *(_DWORD *)&v37[8] = v28;
  v37[12] = 1;
  if (!v28)
  {
    *(_QWORD *)v37 = v29 >> 63;
    if (v29 >= 0)
      v31 = 5;
    else
      v31 = 9;
    *(_DWORD *)&v37[8] = 1;
    v37[12] = v31;
  }
  result = WebCore::AudioSampleDataSource::pushSamples(v30, (uint64_t)v37, a3, a5);
  v32 = *(_QWORD *)(a1 + 304) + a5;
  *(_QWORD *)(a1 + 304) = v32;
  if (!*(_BYTE *)(a1 + 184) || !*(_BYTE *)(a1 + 272))
    goto LABEL_54;
  if ((double)v32 / *(double *)(a1 + 112) >= (double)*(unint64_t *)(a1 + 296) / *(double *)(a1 + 200) + 0.01)
  {
    v33 = (unsigned int *)(a1 + 16);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 + 1, v33));
    v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v35 = &off_1E341BB48;
    v35[1] = a1;
    *(_QWORD *)v37 = v35;
    *(_QWORD *)&v37[16] = absl::internal_any_invocable::LocalManagerNontrivial<WTF::Function<void ()(void)>>;
    *(_QWORD *)&v37[24] = absl::internal_any_invocable::LocalInvoker<false,void,WTF::Function<void ()(void)> &&>;
    (*(void (**)(_QWORD, _BYTE *, char *, char *))(**((_QWORD **)&WebCore::staticFactoryAndThreads(void)::factoryAndThreads
                                                               + 1)
                                                            + 8))(*((_QWORD *)&WebCore::staticFactoryAndThreads(void)::factoryAndThreads + 1), v37, &v41, &v40);
    return (*(uint64_t (**)(uint64_t, _BYTE *, _BYTE *))&v37[16])(1, v37, v37);
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::RealtimeOutgoingAudioSourceCocoa::audioSamplesAvailable(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, unint64_t a5)
{
  return WebCore::RealtimeOutgoingAudioSourceCocoa::audioSamplesAvailable(a1 - 40, a2, a3, a4, a5);
}

unsigned int *WebCore::RealtimeOutgoingAudioSourceCocoa::sourceUpdated(WebCore::RealtimeOutgoingAudioSourceCocoa *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *result;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v1 = *((_QWORD *)this + 12);
  v2 = *(_QWORD *)(*((_QWORD *)this + 7) + 80);
  v3 = (unsigned int *)(v2 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = *(_QWORD *)(*((_QWORD *)this + 7) + 88);
  result = *(unsigned int **)(v1 + 368);
  *(_QWORD *)(v1 + 368) = v2;
  if (result)
  {
    v7 = result + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  *(_QWORD *)(v1 + 376) = v5;
  return result;
}

void WebCore::RealtimeOutgoingVideoSourceCocoa::videoFrameAvailable(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  unsigned int v7;
  unint64_t v8;
  double v9;
  WebCore *v10;
  WebCore *v11;
  __CVBuffer *v12;
  webrtc *v13;
  CFTypeRef v14;
  unsigned int *v15;
  unsigned int v16;
  float v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  webrtc *v24;
  CFTypeRef v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  CFTypeRef v30;
  const void *v31;
  const void *v32;
  CFTypeRef cf[4];

  v4 = *(_QWORD *)(a1 + 296) + 1;
  *(_QWORD *)(a1 + 296) = v4;
  if (__ROR8__(0xEEEEEEEEEEEEEEEFLL * v4, 2) <= 0x444444444444444uLL)
  {
    v5 = *(_QWORD *)(a1 + 224);
    v6 = *(const void **)(a1 + 232);
    cf[0] = "RealtimeOutgoingVideoSource";
    cf[1] = (CFTypeRef)28;
    cf[2] = "videoFrameAvailable";
    cf[3] = v6;
    if (*(_BYTE *)(v5 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [7],unsigned long>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)cf, "frame ", (WTF::String **)(a1 + 296));
  }
  v7 = a2[17];
  if (v7 > 0xB3)
  {
    if (v7 != 270 && v7 != 180)
      goto LABEL_11;
  }
  else if (a2[17] && v7 != 90)
  {
    goto LABEL_11;
  }
  *(_DWORD *)(a1 + 68) = v7;
LABEL_11:
  if (*(_BYTE *)(a1 + 216))
  {
    v8 = atomic_load((unint64_t *)(a1 + 208));
    v9 = *(double *)&v8;
  }
  else
  {
    v9 = 1.0;
  }
  if (*(_BYTE *)(a1 + 64) && *(_DWORD *)(a1 + 68))
  {
    v10 = (WebCore *)(*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)a2 + 56))(a2);
    v11 = v10;
    if (v10)
      CFRetain(v10);
    WebCore::RealtimeOutgoingVideoSourceCocoa::rotatePixelBuffer(v11, a1, *(_DWORD *)(a1 + 68), cf);
    v13 = (webrtc *)cf[0];
    cf[0] = 0;
    if (v11)
    {
      CFRelease(v11);
      v14 = cf[0];
      cf[0] = 0;
      if (v14)
        CFRelease(v14);
    }
LABEL_35:
    webrtc::pixelBufferToFrame(v13, v12);
    if (v9 != 1.0)
    {
      v25 = cf[0];
      v26 = (int)(v9 * (double)(*(int (**)(CFTypeRef))(*(_QWORD *)cf[0] + 40))(cf[0]));
      v27 = (int)(v9 * (double)(*(int (**)(CFTypeRef))(*(_QWORD *)cf[0] + 48))(cf[0]));
      v28 = (*(uint64_t (**)(CFTypeRef))(*(_QWORD *)v25 + 40))(v25);
      v29 = (*(uint64_t (**)(CFTypeRef))(*(_QWORD *)v25 + 48))(v25);
      (*(void (**)(const void **__return_ptr, CFTypeRef, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25 + 72))(&v32, v25, 0, 0, v28, v29, v26, v27);
      v31 = v32;
      v30 = cf[0];
      v32 = 0;
      cf[0] = v31;
      if (v30)
      {
        (*(void (**)(CFTypeRef))(*(_QWORD *)v30 + 8))(v30);
        if (v32)
          (*(void (**)(const void *))(*(_QWORD *)v32 + 8))(v32);
      }
    }
    WebCore::RealtimeOutgoingVideoSource::sendFrame(a1);
    if (cf[0])
      (*(void (**)(CFTypeRef))(*(_QWORD *)cf[0] + 8))(cf[0]);
    if (v13)
      CFRelease(v13);
    return;
  }
  if ((*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)a2 + 32))(a2))
  {
    v15 = (unsigned int *)(a2 + 4);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
    v17 = (*(float (**)(unsigned __int16 *))(*(_QWORD *)a2 + 16))(a2);
    webrtc::toWebRTCVideoFrameBuffer((webrtc *)a2, WebCore::RealtimeOutgoingVideoSourceCocoa::videoFrameAvailable(WebCore::VideoFrame &,WebCore::VideoFrameTimeMetadata)::$_0::__invoke<void>, (__CVBuffer *(*)(void *))WebCore::RealtimeOutgoingVideoSourceCocoa::videoFrameAvailable(WebCore::VideoFrame &,WebCore::VideoFrameTimeMetadata)::$_1::__invoke<void>, (void (*)(void *))(int)(v9 * v17));
  }
  else
  {
    if (!(*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)a2 + 40))(a2))
    {
      v24 = (webrtc *)(*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)a2 + 56))(a2);
      v13 = v24;
      if (v24)
        CFRetain(v24);
      goto LABEL_35;
    }
    v18 = (const void *)*((_QWORD *)a2 + 6);
    cf[0] = v18;
    if (v18)
      (**(void (***)(const void *))v18)(v18);
    if (v9 != 1.0)
    {
      v19 = (int)(v9 * (double)(*(int (**)(const void *))(*(_QWORD *)v18 + 40))(v18));
      v20 = (int)(v9 * (double)(*(int (**)(const void *))(*(_QWORD *)v18 + 48))(v18));
      v21 = (*(uint64_t (**)(const void *))(*(_QWORD *)v18 + 40))(v18);
      v22 = (*(uint64_t (**)(const void *))(*(_QWORD *)v18 + 48))(v18);
      (*(void (**)(const void **__return_ptr, const void *, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18 + 72))(&v32, v18, 0, 0, v21, v22, v19, v20);
      v23 = v32;
      v32 = 0;
      cf[0] = v23;
      (*(void (**)(const void *))(*(_QWORD *)v18 + 8))(v18);
      if (v32)
        (*(void (**)(const void *))(*(_QWORD *)v32 + 8))(v32);
    }
  }
  WebCore::RealtimeOutgoingVideoSource::sendFrame(a1);
  if (cf[0])
    (*(void (**)(CFTypeRef))(*(_QWORD *)cf[0] + 8))(cf[0]);
}

void `non-virtual thunk to'WebCore::RealtimeOutgoingVideoSourceCocoa::videoFrameAvailable(uint64_t a1, unsigned __int16 *a2)
{
  WebCore::RealtimeOutgoingVideoSourceCocoa::videoFrameAvailable(a1 - 48, a2);
}

void WebCore::RealtimeOutgoingVideoSourceCocoa::createBlackFrame(WebCore::RealtimeOutgoingVideoSourceCocoa *this, WebCore *a2, unint64_t a3)
{
  __CVBuffer *v3;
  CFTypeRef v4;
  CFTypeRef cf;

  WebCore::createBlackPixelBuffer(a2, a3, 0, (WebCore **)&cf);
  webrtc::pixelBufferToFrame((webrtc *)cf, v3);
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
}

WTF::StringImpl *WebCore::CoreAudioCaptureSourceFactory::createAudioCaptureSource@<X0>(WTF::StringImpl **a1@<X1>, uint64_t *a2@<X2>, const WebCore::MediaConstraints *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v5 = *a1;
  if (*a1)
  {
    *(_DWORD *)v5 += 2;
    v8 = v5;
    result = WebCore::CoreAudioCaptureSource::create((WebCore::CoreAudioCaptureSourceFactory *)&v8, a2, a3, a4, a5);
    if (*(_DWORD *)v5 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v7);
    else
      *(_DWORD *)v5 -= 2;
  }
  else
  {
    v8 = 0;
    return WebCore::CoreAudioCaptureSource::create((WebCore::CoreAudioCaptureSourceFactory *)&v8, a2, a3, a4, a5);
  }
  return result;
}

const char *WebCore::CoreAudioCaptureSource::logClassName(WebCore::CoreAudioCaptureSource *this)
{
  return "CoreAudioCaptureSource";
}

double WebCore::CoreAudioCaptureSource::discreteSampleRates@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3;
  double result;

  v3 = WTF::fastMalloc((WTF *)0x18);
  *(_OWORD *)v3 = xmmword_1969F95F8;
  *(_QWORD *)(v3 + 16) = 0x177000000BB80;
  *(_QWORD *)a1 = v3;
  *(_QWORD *)&result = 0x600000006;
  *(_QWORD *)(a1 + 8) = 0x600000006;
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

uint64_t WebCore::CoreAudioCaptureSource::ref(uint64_t this)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(this + 304);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v1);
LABEL_5:
  ++*(_QWORD *)(v1 + 8);
  v3 = __ldxr((unsigned __int8 *)v1);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

unsigned __int8 *WebCore::CoreAudioCaptureSource::deref(unsigned __int8 **this)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::CoreAudioCaptureSource,(WTF::DestructionThread)2>(this[38]);
}

uint64_t WebCore::CoreAudioCaptureSource::controlBlock(WebCore::CoreAudioCaptureSource *this)
{
  return *((_QWORD *)this + 38);
}

uint64_t WebCore::CoreAudioCaptureSource::isCaptureSource(WebCore::CoreAudioCaptureSource *this)
{
  return 1;
}

uint64_t WebCore::CoreAudioCaptureSource::deviceType(WebCore::CoreAudioCaptureSource *this)
{
  return 1;
}

double WebCore::CoreAudioSharedUnit::InternalUnit::verifyCaptureInterval(WebCore::CoreAudioSharedUnit::InternalUnit *this, int a2)
{
  double result;

  result = 2.0;
  if (a2)
    return 20.0;
  return result;
}

uint64_t WebCore::CoreAudioSharedUnit::sampleRateCapacities(WebCore::CoreAudioSharedUnit *this)
{
  return *((_QWORD *)this + 63);
}

void WebCore::DisplayCaptureManagerCocoa::~DisplayCaptureManagerCocoa(WebCore::DisplayCaptureManagerCocoa *this, WTF::StringImpl *a2)
{
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)this + 2, a2);
}

{
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)this + 2, a2);
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::DisplayCaptureManager::requiresCaptureDevicesEnumeration(WebCore::DisplayCaptureManager *this)
{
  return 0;
}

uint64_t WebCore::MediaStreamTrackAudioSourceProviderCocoa::loggerHelper(WebCore::MediaStreamTrackAudioSourceProviderCocoa *this)
{
  return *((_QWORD *)this + 35);
}

uint64_t WebCore::MediaStreamTrackAudioSourceProviderCocoa::ptrCount(WebCore::MediaStreamTrackAudioSourceProviderCocoa *this)
{
  return *((unsigned int *)this + 66);
}

uint64_t WebCore::MediaStreamTrackAudioSourceProviderCocoa::ptrCountWithoutThreadCheck(WebCore::MediaStreamTrackAudioSourceProviderCocoa *this)
{
  return *((unsigned int *)this + 66);
}

uint64_t WebCore::MediaStreamTrackAudioSourceProviderCocoa::incrementPtrCount(uint64_t this)
{
  ++*(_DWORD *)(this + 264);
  return this;
}

uint64_t WebCore::MediaStreamTrackAudioSourceProviderCocoa::decrementPtrCount(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 264);
  if (v1)
  {
    *(_DWORD *)(this + 264) = v1 - 1;
  }
  else
  {
    this = 286;
    __break(0xC471u);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::MediaStreamTrackAudioSourceProviderCocoa::ptrCount(WebCore::MediaStreamTrackAudioSourceProviderCocoa *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t `non-virtual thunk to'WebCore::MediaStreamTrackAudioSourceProviderCocoa::ptrCountWithoutThreadCheck(WebCore::MediaStreamTrackAudioSourceProviderCocoa *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t `non-virtual thunk to'WebCore::MediaStreamTrackAudioSourceProviderCocoa::incrementPtrCount(uint64_t this)
{
  ++*(_DWORD *)(this + 8);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::MediaStreamTrackAudioSourceProviderCocoa::decrementPtrCount(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 8);
  if (v1)
  {
    *(_DWORD *)(this + 8) = v1 - 1;
  }
  else
  {
    this = 286;
    __break(0xC471u);
  }
  return this;
}

void WebCore::RealtimeIncomingAudioSourceCocoa::~RealtimeIncomingAudioSourceCocoa(WebCore::RealtimeIncomingAudioSourceCocoa *this)
{
  WebCore::TimerBase *v2;
  uint64_t v3;

  v2 = (WebCore::RealtimeIncomingAudioSourceCocoa *)((char *)this + 600);
  *((_QWORD *)this + 75) = off_1E31F7378;
  v3 = *((_QWORD *)this + 81);
  *((_QWORD *)this + 81) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100]((uint64_t *)this + 71, 0);
  WebCore::RealtimeIncomingAudioSource::~RealtimeIncomingAudioSource(this);
}

{
  WebCore::TimerBase *v2;
  uint64_t v3;
  WTF *v4;
  void *v5;

  v2 = (WebCore::RealtimeIncomingAudioSourceCocoa *)((char *)this + 600);
  *((_QWORD *)this + 75) = off_1E31F7378;
  v3 = *((_QWORD *)this + 81);
  *((_QWORD *)this + 81) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100]((uint64_t *)this + 71, 0);
  WebCore::RealtimeIncomingAudioSource::~RealtimeIncomingAudioSource(this);
  WTF::fastFree(v4, v5);
}

void `non-virtual thunk to'WebCore::RealtimeIncomingAudioSourceCocoa::~RealtimeIncomingAudioSourceCocoa(WebCore::RealtimeIncomingAudioSourceCocoa *this)
{
  WebCore::TimerBase *v2;
  uint64_t v3;

  v2 = (WebCore::RealtimeIncomingAudioSourceCocoa *)((char *)this + 296);
  *((_QWORD *)this + 37) = off_1E31F7378;
  v3 = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100]((uint64_t *)this + 33, 0);
  WebCore::RealtimeIncomingAudioSource::~RealtimeIncomingAudioSource((WebCore::RealtimeIncomingAudioSourceCocoa *)((char *)this - 304));
}

{
  WebCore::TimerBase *v2;
  uint64_t v3;
  WTF *v4;
  void *v5;

  v2 = (WebCore::RealtimeIncomingAudioSourceCocoa *)((char *)this + 296);
  *((_QWORD *)this + 37) = off_1E31F7378;
  v3 = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100]((uint64_t *)this + 33, 0);
  WebCore::RealtimeIncomingAudioSource::~RealtimeIncomingAudioSource((WebCore::RealtimeIncomingAudioSourceCocoa *)((char *)this - 304));
  WTF::fastFree(v4, v5);
}

{
  WebCore::TimerBase *v2;
  uint64_t v3;

  v2 = (WebCore::RealtimeIncomingAudioSourceCocoa *)((char *)this + 288);
  *((_QWORD *)this + 36) = off_1E31F7378;
  v3 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100]((uint64_t *)this + 32, 0);
  WebCore::RealtimeIncomingAudioSource::~RealtimeIncomingAudioSource((WebCore::RealtimeIncomingAudioSourceCocoa *)((char *)this - 312));
}

{
  WebCore::TimerBase *v2;
  uint64_t v3;
  WTF *v4;
  void *v5;

  v2 = (WebCore::RealtimeIncomingAudioSourceCocoa *)((char *)this + 288);
  *((_QWORD *)this + 36) = off_1E31F7378;
  v3 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100]((uint64_t *)this + 32, 0);
  WebCore::RealtimeIncomingAudioSource::~RealtimeIncomingAudioSource((WebCore::RealtimeIncomingAudioSourceCocoa *)((char *)this - 312));
  WTF::fastFree(v4, v5);
}

uint64_t WebCore::RealtimeOutgoingAudioSourceCocoa::ptrCount(WebCore::RealtimeOutgoingAudioSourceCocoa *this)
{
  return *((unsigned int *)this + 22);
}

uint64_t WebCore::RealtimeOutgoingAudioSourceCocoa::ptrCountWithoutThreadCheck(WebCore::RealtimeOutgoingAudioSourceCocoa *this)
{
  return *((unsigned int *)this + 22);
}

uint64_t WebCore::RealtimeOutgoingAudioSourceCocoa::incrementPtrCount(uint64_t this)
{
  ++*(_DWORD *)(this + 88);
  return this;
}

uint64_t WebCore::RealtimeOutgoingAudioSourceCocoa::decrementPtrCount(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 88);
  if (v1)
  {
    *(_DWORD *)(this + 88) = v1 - 1;
  }
  else
  {
    this = 286;
    __break(0xC471u);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::RealtimeOutgoingAudioSourceCocoa::ptrCount(WebCore::RealtimeOutgoingAudioSourceCocoa *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t `non-virtual thunk to'WebCore::RealtimeOutgoingAudioSourceCocoa::ptrCountWithoutThreadCheck(WebCore::RealtimeOutgoingAudioSourceCocoa *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t `non-virtual thunk to'WebCore::RealtimeOutgoingAudioSourceCocoa::incrementPtrCount(uint64_t this)
{
  ++*(_DWORD *)(this + 48);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::RealtimeOutgoingAudioSourceCocoa::decrementPtrCount(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 48);
  if (v1)
  {
    *(_DWORD *)(this + 48) = v1 - 1;
  }
  else
  {
    this = 286;
    __break(0xC471u);
  }
  return this;
}

void WebCore::RealtimeOutgoingVideoSourceCocoa::~RealtimeOutgoingVideoSourceCocoa(WebCore::RealtimeOutgoingVideoSourceCocoa *this, void *a2)
{
  WTF *v3;
  const void *v4;
  const void *v5;

  v3 = (WTF *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v3)
  {
    v4 = (const void *)*((_QWORD *)v3 + 12);
    *((_QWORD *)v3 + 12) = 0;
    if (v4)
      CFRelease(v4);
    v5 = (const void *)*((_QWORD *)v3 + 11);
    *((_QWORD *)v3 + 11) = 0;
    if (v5)
      CFRelease(v5);
    WTF::fastFree(v3, a2);
  }
  WebCore::RealtimeOutgoingVideoSource::~RealtimeOutgoingVideoSource(this);
}

{
  WTF *v3;
  const void *v4;
  const void *v5;
  WTF *v6;
  void *v7;

  v3 = (WTF *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v3)
  {
    v4 = (const void *)*((_QWORD *)v3 + 12);
    *((_QWORD *)v3 + 12) = 0;
    if (v4)
      CFRelease(v4);
    v5 = (const void *)*((_QWORD *)v3 + 11);
    *((_QWORD *)v3 + 11) = 0;
    if (v5)
      CFRelease(v5);
    WTF::fastFree(v3, a2);
  }
  WebCore::RealtimeOutgoingVideoSource::~RealtimeOutgoingVideoSource(this);
  WTF::fastFree(v6, v7);
}

void `non-virtual thunk to'WebCore::RealtimeOutgoingVideoSourceCocoa::~RealtimeOutgoingVideoSourceCocoa(WebCore::RealtimeOutgoingVideoSourceCocoa *this, void *a2)
{
  WTF *v3;
  const void *v4;
  const void *v5;

  v3 = (WTF *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v3)
  {
    v4 = (const void *)*((_QWORD *)v3 + 12);
    *((_QWORD *)v3 + 12) = 0;
    if (v4)
      CFRelease(v4);
    v5 = (const void *)*((_QWORD *)v3 + 11);
    *((_QWORD *)v3 + 11) = 0;
    if (v5)
      CFRelease(v5);
    WTF::fastFree(v3, a2);
  }
  WebCore::RealtimeOutgoingVideoSource::~RealtimeOutgoingVideoSource((WebCore::RealtimeOutgoingVideoSourceCocoa *)((char *)this - 8));
}

{
  WTF *v3;
  const void *v4;
  const void *v5;
  WTF *v6;
  void *v7;

  v3 = (WTF *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v3)
  {
    v4 = (const void *)*((_QWORD *)v3 + 12);
    *((_QWORD *)v3 + 12) = 0;
    if (v4)
      CFRelease(v4);
    v5 = (const void *)*((_QWORD *)v3 + 11);
    *((_QWORD *)v3 + 11) = 0;
    if (v5)
      CFRelease(v5);
    WTF::fastFree(v3, a2);
  }
  WebCore::RealtimeOutgoingVideoSource::~RealtimeOutgoingVideoSource((WebCore::RealtimeOutgoingVideoSourceCocoa *)((char *)this - 8));
  WTF::fastFree(v6, v7);
}

{
  WTF *v3;
  const void *v4;
  const void *v5;

  v3 = (WTF *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v3)
  {
    v4 = (const void *)*((_QWORD *)v3 + 12);
    *((_QWORD *)v3 + 12) = 0;
    if (v4)
      CFRelease(v4);
    v5 = (const void *)*((_QWORD *)v3 + 11);
    *((_QWORD *)v3 + 11) = 0;
    if (v5)
      CFRelease(v5);
    WTF::fastFree(v3, a2);
  }
  WebCore::RealtimeOutgoingVideoSource::~RealtimeOutgoingVideoSource((WebCore::RealtimeOutgoingVideoSourceCocoa *)((char *)this - 16));
}

{
  WTF *v3;
  const void *v4;
  const void *v5;
  WTF *v6;
  void *v7;

  v3 = (WTF *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v3)
  {
    v4 = (const void *)*((_QWORD *)v3 + 12);
    *((_QWORD *)v3 + 12) = 0;
    if (v4)
      CFRelease(v4);
    v5 = (const void *)*((_QWORD *)v3 + 11);
    *((_QWORD *)v3 + 11) = 0;
    if (v5)
      CFRelease(v5);
    WTF::fastFree(v3, a2);
  }
  WebCore::RealtimeOutgoingVideoSource::~RealtimeOutgoingVideoSource((WebCore::RealtimeOutgoingVideoSourceCocoa *)((char *)this - 16));
  WTF::fastFree(v6, v7);
}

{
  WTF *v3;
  const void *v4;
  const void *v5;

  v3 = (WTF *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
  {
    v4 = (const void *)*((_QWORD *)v3 + 12);
    *((_QWORD *)v3 + 12) = 0;
    if (v4)
      CFRelease(v4);
    v5 = (const void *)*((_QWORD *)v3 + 11);
    *((_QWORD *)v3 + 11) = 0;
    if (v5)
      CFRelease(v5);
    WTF::fastFree(v3, a2);
  }
  WebCore::RealtimeOutgoingVideoSource::~RealtimeOutgoingVideoSource((WebCore::RealtimeOutgoingVideoSourceCocoa *)((char *)this - 32));
}

{
  WTF *v3;
  const void *v4;
  const void *v5;
  WTF *v6;
  void *v7;

  v3 = (WTF *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
  {
    v4 = (const void *)*((_QWORD *)v3 + 12);
    *((_QWORD *)v3 + 12) = 0;
    if (v4)
      CFRelease(v4);
    v5 = (const void *)*((_QWORD *)v3 + 11);
    *((_QWORD *)v3 + 11) = 0;
    if (v5)
      CFRelease(v5);
    WTF::fastFree(v3, a2);
  }
  WebCore::RealtimeOutgoingVideoSource::~RealtimeOutgoingVideoSource((WebCore::RealtimeOutgoingVideoSourceCocoa *)((char *)this - 32));
  WTF::fastFree(v6, v7);
}

{
  WTF *v3;
  const void *v4;
  const void *v5;

  v3 = (WTF *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v3)
  {
    v4 = (const void *)*((_QWORD *)v3 + 12);
    *((_QWORD *)v3 + 12) = 0;
    if (v4)
      CFRelease(v4);
    v5 = (const void *)*((_QWORD *)v3 + 11);
    *((_QWORD *)v3 + 11) = 0;
    if (v5)
      CFRelease(v5);
    WTF::fastFree(v3, a2);
  }
  WebCore::RealtimeOutgoingVideoSource::~RealtimeOutgoingVideoSource((WebCore::RealtimeOutgoingVideoSourceCocoa *)((char *)this - 48));
}

{
  WTF *v3;
  const void *v4;
  const void *v5;
  WTF *v6;
  void *v7;

  v3 = (WTF *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v3)
  {
    v4 = (const void *)*((_QWORD *)v3 + 12);
    *((_QWORD *)v3 + 12) = 0;
    if (v4)
      CFRelease(v4);
    v5 = (const void *)*((_QWORD *)v3 + 11);
    *((_QWORD *)v3 + 11) = 0;
    if (v5)
      CFRelease(v5);
    WTF::fastFree(v3, a2);
  }
  WebCore::RealtimeOutgoingVideoSource::~RealtimeOutgoingVideoSource((WebCore::RealtimeOutgoingVideoSourceCocoa *)((char *)this - 48));
  WTF::fastFree(v6, v7);
}

{
  WTF *v3;
  const void *v4;
  const void *v5;

  v3 = (WTF *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v3)
  {
    v4 = (const void *)*((_QWORD *)v3 + 12);
    *((_QWORD *)v3 + 12) = 0;
    if (v4)
      CFRelease(v4);
    v5 = (const void *)*((_QWORD *)v3 + 11);
    *((_QWORD *)v3 + 11) = 0;
    if (v5)
      CFRelease(v5);
    WTF::fastFree(v3, a2);
  }
  WebCore::RealtimeOutgoingVideoSource::~RealtimeOutgoingVideoSource((WebCore::RealtimeOutgoingVideoSourceCocoa *)((char *)this - 56));
}

{
  WTF *v3;
  const void *v4;
  const void *v5;
  WTF *v6;
  void *v7;

  v3 = (WTF *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v3)
  {
    v4 = (const void *)*((_QWORD *)v3 + 12);
    *((_QWORD *)v3 + 12) = 0;
    if (v4)
      CFRelease(v4);
    v5 = (const void *)*((_QWORD *)v3 + 11);
    *((_QWORD *)v3 + 11) = 0;
    if (v5)
      CFRelease(v5);
    WTF::fastFree(v3, a2);
  }
  WebCore::RealtimeOutgoingVideoSource::~RealtimeOutgoingVideoSource((WebCore::RealtimeOutgoingVideoSourceCocoa *)((char *)this - 56));
  WTF::fastFree(v6, v7);
}

PAL *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrI28OpaqueAudioComponentInstanceN7WebCore19CoreAudioSharedUnit20AudioUnitDeallocatorEEEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSD_iEEEEEEDcSH_DpT0_(uint64_t a1, PAL **a2)
{
  PAL *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (PAL *)PAL::softLinkAudioToolboxAudioComponentInstanceDispose(result, (OpaqueAudioComponentInstance *)PAL::softLinkAudioToolboxAudioComponentInstanceDispose);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9UniqueRefIN7WebCore19CoreAudioSharedUnit12InternalUnitEEEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSD_iEEEEEEDcSH_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CoreAudioSharedUnit::setIsInBackground(BOOL)::$_0,void,WTF::CompletionHandler<void ()(void)> &&>::call(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 624);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CoreAudioSharedUnit::setIsInBackground(BOOL)::$_1,void>::call(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  id *v3;
  void *v4;
  WTF *v5;
  void *v6;
  uint8_t v8[16];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = qword_1ECE7CD60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v8 = 0;
    _os_log_error_impl(&dword_1940B8000, v2, OS_LOG_TYPE_ERROR, "CoreAudioSharedUnit status bar failed", v8, 2u);
  }
  v3 = *(id **)(v1 + 616);
  *(_QWORD *)(v1 + 616) = 0;
  objc_msgSend(v3[1], "stop");
  if (*(_BYTE *)(v1 + 377))
    WebCore::BaseAudioSharedUnit::captureFailed((WebCore::BaseAudioSharedUnit *)v1);
  WebCore::MediaCaptureStatusBarManager::~MediaCaptureStatusBarManager((WebCore::MediaCaptureStatusBarManager *)v3, v4);
  return WTF::fastFree(v5, v6);
}

uint64_t WebCore::RealtimeOutgoingVideoSourceCocoa::videoFrameAvailable(WebCore::VideoFrame &,WebCore::VideoFrameTimeMetadata)::$_0::__invoke<void>(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

unsigned int *WebCore::RealtimeOutgoingVideoSourceCocoa::videoFrameAvailable(WebCore::VideoFrame &,WebCore::VideoFrameTimeMetadata)::$_1::__invoke<void>(unsigned int *result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = result + 2;
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
  {
    atomic_store(1u, result + 2);
    return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CoreAudioCaptureSourceFactory::beginInterruption(void)::$_0,void>::call(WebCore::CoreAudioCaptureSourceFactory *a1)
{
  WebCore::BaseAudioSharedUnit *v1;
  WebCore::AudioSessionIOS *v3;
  unint64_t StatusReg;
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v7;
  _BYTE v8[24];

  v1 = (WebCore::BaseAudioSharedUnit *)WebCore::CoreAudioCaptureSourceFactory::singleton(a1)[3];
  if (v1)
    return WebCore::BaseAudioSharedUnit::suspend(v1);
  v1 = (WebCore::BaseAudioSharedUnit *)&WebCore::CoreAudioSharedUnit::unit(void)::singleton;
    return WebCore::BaseAudioSharedUnit::suspend(v1);
  WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)off_1E341A700;
  *(_QWORD *)algn_1EE2F8E58 = 0;
  byte_1EE2F8E60 = 1;
  qword_1EE2F8E68 = 0x3FF0000000000000;
  v3 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)&WebCore::CoreAudioSharedUnit::unit(void)::singleton);
  dword_1EE2F8E70 = (int)(*(float (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v3 + 72))(v3);
  word_1EE2F8E74 = 0;
  byte_1EE2F8E76 = 0;
  byte_1EE2F8E90 = 0;
  qword_1EE2F8E98 = 0;
  unk_1EE2F8EA0 = 0;
  byte_1EE2F8EA8 = 0;
  qword_1EE2F8E78 = 0;
  byte_1EE2F8E80 = 0;
  qword_1EE2F8EB0 = 0;
  unk_1EE2F8EB8 = 0;
  word_1EE2F8EC0 = 0;
  byte_1EE2F8EC2 = 1;
  qword_1EE2F8EC8 = 0;
  *(_QWORD *)&dword_1EE2F8ED0 = 0;
  {
    WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
  }
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)&unk_1ECE91208, &WebCore::CoreAudioSharedUnit::unit(void)::singleton, (uint64_t)v8);
  WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)&off_1E341B0A8;
  byte_1EE2F8F50 = 0;
  byte_1EE2F8FB8 = 0;
  qword_1EE2F8FC0 = 0;
  word_1EE2F8FC8 = 0;
  qword_1EE2F8FD0 = 0;
  byte_1EE2F8FD8 = 0;
  byte_1EE2F9040 = 0;
  unk_1EE2F8ED8 = 0u;
  *(_OWORD *)&qword_1EE2F8EE8 = 0u;
  unk_1EE2F8EF1 = 0u;
  xmmword_1EE2F8F58 = 0u;
  LOBYTE(qword_1EE2F8F68) = 0;
  qword_1EE2F9048 = 0x1770000001F40;
  xmmword_1EE2F9050 = 0u;
  qword_1EE2F9060 = (uint64_t)off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  xmmword_1EE2F9068 = 0u;
  *(_OWORD *)algn_1EE2F9078 = 0u;
  v5 = *(unsigned int **)(StatusReg + 736);
  if (!v5)
    v5 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  qword_1EE2F9088 = (uint64_t)v5;
  qword_1EE2F9060 = (uint64_t)off_1E31F7378;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = off_1E341BA48;
  v7[1] = WebCore::CoreAudioSharedUnit::verifyIsCapturing;
  v7[2] = 0;
  v7[3] = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
  qword_1EE2F9090 = (uint64_t)v7;
  byte_1EE2F9098 = 0;
  byte_1EE2F90A0 = 0;
  dword_1EE2F90A8 = 0;
  qword_1EE2F90B8 = 0;
  qword_1EE2F90C0 = 0;
  qword_1EE2F90B0 = 0;
  byte_1EE2F90C8 = 1;
  return WebCore::BaseAudioSharedUnit::suspend((WebCore::BaseAudioSharedUnit *)&WebCore::CoreAudioSharedUnit::unit(void)::singleton);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CoreAudioCaptureSourceFactory::endInterruption(void)::$_0,void>::call(WebCore::CoreAudioCaptureSourceFactory *a1)
{
  WebCore::BaseAudioSharedUnit *v1;
  WebCore::AudioSessionIOS *v3;
  unint64_t StatusReg;
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v7;
  _BYTE v8[24];

  v1 = (WebCore::BaseAudioSharedUnit *)WebCore::CoreAudioCaptureSourceFactory::singleton(a1)[3];
  if (v1)
    return WebCore::BaseAudioSharedUnit::resume(v1);
  v1 = (WebCore::BaseAudioSharedUnit *)&WebCore::CoreAudioSharedUnit::unit(void)::singleton;
    return WebCore::BaseAudioSharedUnit::resume(v1);
  WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)off_1E341A700;
  *(_QWORD *)algn_1EE2F8E58 = 0;
  byte_1EE2F8E60 = 1;
  qword_1EE2F8E68 = 0x3FF0000000000000;
  v3 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)&WebCore::CoreAudioSharedUnit::unit(void)::singleton);
  dword_1EE2F8E70 = (int)(*(float (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v3 + 72))(v3);
  word_1EE2F8E74 = 0;
  byte_1EE2F8E76 = 0;
  byte_1EE2F8E90 = 0;
  qword_1EE2F8E98 = 0;
  unk_1EE2F8EA0 = 0;
  byte_1EE2F8EA8 = 0;
  qword_1EE2F8E78 = 0;
  byte_1EE2F8E80 = 0;
  qword_1EE2F8EB0 = 0;
  unk_1EE2F8EB8 = 0;
  word_1EE2F8EC0 = 0;
  byte_1EE2F8EC2 = 1;
  qword_1EE2F8EC8 = 0;
  *(_QWORD *)&dword_1EE2F8ED0 = 0;
  {
    WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
  }
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)&unk_1ECE91208, &WebCore::CoreAudioSharedUnit::unit(void)::singleton, (uint64_t)v8);
  WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)&off_1E341B0A8;
  byte_1EE2F8F50 = 0;
  byte_1EE2F8FB8 = 0;
  qword_1EE2F8FC0 = 0;
  word_1EE2F8FC8 = 0;
  qword_1EE2F8FD0 = 0;
  byte_1EE2F8FD8 = 0;
  byte_1EE2F9040 = 0;
  unk_1EE2F8ED8 = 0u;
  *(_OWORD *)&qword_1EE2F8EE8 = 0u;
  unk_1EE2F8EF1 = 0u;
  xmmword_1EE2F8F58 = 0u;
  LOBYTE(qword_1EE2F8F68) = 0;
  qword_1EE2F9048 = 0x1770000001F40;
  xmmword_1EE2F9050 = 0u;
  qword_1EE2F9060 = (uint64_t)off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  xmmword_1EE2F9068 = 0u;
  *(_OWORD *)algn_1EE2F9078 = 0u;
  v5 = *(unsigned int **)(StatusReg + 736);
  if (!v5)
    v5 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  qword_1EE2F9088 = (uint64_t)v5;
  qword_1EE2F9060 = (uint64_t)off_1E31F7378;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = off_1E341BA48;
  v7[1] = WebCore::CoreAudioSharedUnit::verifyIsCapturing;
  v7[2] = 0;
  v7[3] = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
  qword_1EE2F9090 = (uint64_t)v7;
  byte_1EE2F9098 = 0;
  byte_1EE2F90A0 = 0;
  dword_1EE2F90A8 = 0;
  qword_1EE2F90B8 = 0;
  qword_1EE2F90C0 = 0;
  qword_1EE2F90B0 = 0;
  byte_1EE2F90C8 = 1;
  return WebCore::BaseAudioSharedUnit::resume((WebCore::BaseAudioSharedUnit *)&WebCore::CoreAudioSharedUnit::unit(void)::singleton);
}

WebCore::AudioSession *WTF::Detail::CallableWrapper<WebCore::CoreAudioCaptureSourceFactory::scheduleReconfiguration(void)::$_0,void>::call(WebCore::AudioSession *result)
{
  WebCore::AudioSessionIOS *v1;
  unint64_t StatusReg;
  unsigned int *v3;
  unsigned int v4;
  _BYTE v5[24];

  {
    WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)off_1E341A700;
    *(_QWORD *)algn_1EE2F8E58 = 0;
    byte_1EE2F8E60 = 1;
    qword_1EE2F8E68 = 0x3FF0000000000000;
    v1 = WebCore::AudioSession::sharedSession(result);
    dword_1EE2F8E70 = (int)(*(float (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v1 + 72))(v1);
    word_1EE2F8E74 = 0;
    byte_1EE2F8E76 = 0;
    byte_1EE2F8E90 = 0;
    qword_1EE2F8E98 = 0;
    unk_1EE2F8EA0 = 0;
    byte_1EE2F8EA8 = 0;
    qword_1EE2F8E78 = 0;
    byte_1EE2F8E80 = 0;
    qword_1EE2F8EB0 = 0;
    unk_1EE2F8EB8 = 0;
    word_1EE2F8EC0 = 0;
    byte_1EE2F8EC2 = 1;
    qword_1EE2F8EC8 = 0;
    *(_QWORD *)&dword_1EE2F8ED0 = 0;
    {
      WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
    }
    WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)&unk_1ECE91208, &WebCore::CoreAudioSharedUnit::unit(void)::singleton, (uint64_t)v5);
    WebCore::CoreAudioSharedUnit::unit(void)::singleton = (uint64_t)&off_1E341B0A8;
    byte_1EE2F8F50 = 0;
    byte_1EE2F8FB8 = 0;
    qword_1EE2F8FC0 = 0;
    word_1EE2F8FC8 = 0;
    qword_1EE2F8FD0 = 0;
    byte_1EE2F8FD8 = 0;
    byte_1EE2F9040 = 0;
    unk_1EE2F8ED8 = 0u;
    *(_OWORD *)&qword_1EE2F8EE8 = 0u;
    unk_1EE2F8EF1 = 0u;
    xmmword_1EE2F8F58 = 0u;
    LOBYTE(qword_1EE2F8F68) = 0;
    qword_1EE2F9048 = 0x1770000001F40;
    xmmword_1EE2F9050 = 0u;
    qword_1EE2F9060 = (uint64_t)off_1E3407128;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    xmmword_1EE2F9068 = 0u;
    *(_OWORD *)algn_1EE2F9078 = 0u;
    v3 = *(unsigned int **)(StatusReg + 736);
    if (!v3)
      v3 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    qword_1EE2F9088 = (uint64_t)v3;
    qword_1EE2F9060 = (uint64_t)off_1E31F7378;
    result = (WebCore::AudioSession *)WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)result = off_1E341BA48;
    *((_QWORD *)result + 1) = WebCore::CoreAudioSharedUnit::verifyIsCapturing;
    *((_QWORD *)result + 2) = 0;
    *((_QWORD *)result + 3) = &WebCore::CoreAudioSharedUnit::unit(void)::singleton;
    qword_1EE2F9090 = (uint64_t)result;
    byte_1EE2F9098 = 0;
    byte_1EE2F90A0 = 0;
    dword_1EE2F90A8 = 0;
    qword_1EE2F90B8 = 0;
    qword_1EE2F90C0 = 0;
    qword_1EE2F90B0 = 0;
    byte_1EE2F90C8 = 1;
  }
  if (!(_BYTE)word_1EE2F8E74)
    return (WebCore::AudioSession *)(*(uint64_t (**)(void))(WebCore::CoreAudioSharedUnit::unit(void)::singleton + 104))();
  HIBYTE(word_1EE2F8E74) = 1;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CoreAudioCaptureSource::audioUnitWillStart(void)::$_0,void,WebCore::RealtimeMediaSourceObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CoreAudioCaptureSource::handleNewCurrentMicrophoneDevice(WebCore::CaptureDevice const&)::$_0,void,WebCore::RealtimeMediaSourceObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::CoreAudioSharedUnit::*&)(void),WebCore::CoreAudioSharedUnit*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CoreAudioSharedUnit::provideSpeakerData(unsigned int &,AudioTimeStamp const&,unsigned int,unsigned int,AudioBufferList &)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E341BA70;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CoreAudioSharedUnit::provideSpeakerData(unsigned int &,AudioTimeStamp const&,unsigned int,unsigned int,AudioBufferList &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E341BA70;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CoreAudioSharedUnit::provideSpeakerData(unsigned int &,AudioTimeStamp const&,unsigned int,unsigned int,AudioBufferList &)::$_0,void>::call(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  int v5;

  v1 = result[2];
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    v2 = result[1];
    *(_BYTE *)(v2 + 602) = 1;
    v3 = (unsigned __int8 *)(v2 + 603);
    if (__ldaxr((unsigned __int8 *)(v2 + 603)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v3))
    {
      goto LABEL_7;
    }
    MEMORY[0x19AEA534C](v2 + 603);
LABEL_7:
    result = *(_QWORD **)(v2 + 608);
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 24))(result);
    v5 = __ldxr(v3);
    if (v5 == 1)
    {
      if (!__stlxr(0, v3))
        return result;
    }
    else
    {
      __clrex();
    }
    return (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 603));
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CoreAudioSharedUnit::processMicrophoneSamples(unsigned int &,AudioTimeStamp const&,unsigned int,unsigned int,AudioBufferList *)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E341BA98;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CoreAudioSharedUnit::processMicrophoneSamples(unsigned int &,AudioTimeStamp const&,unsigned int,unsigned int,AudioBufferList *)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E341BA98;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CoreAudioSharedUnit::processMicrophoneSamples(unsigned int &,AudioTimeStamp const&,unsigned int,unsigned int,AudioBufferList *)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    result = *(_QWORD *)(v1 + 8);
    if (result)
    {
      if (*(_BYTE *)(result + 36))
        *(_BYTE *)(result + 37) = 1;
      else
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 104))(result);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::RealtimeIncomingAudioSourceCocoa::*&)(void),WebCore::RealtimeIncomingAudioSourceCocoa*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

void WebCore::VideoCaptureSourceFactoryMac::~VideoCaptureSourceFactoryMac(WebCore::VideoCaptureSourceFactoryMac *this)
{
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::VideoCaptureSourceFactoryMac::createVideoCaptureSource@<X0>(PAL *a1@<X1>, uint64_t *a2@<X2>, const WebCore::MediaConstraints *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return WebCore::AVVideoCaptureSource::create(a1, a2, a3, a4, a5);
}

void *WebCore::VideoCaptureSourceFactoryMac::videoCaptureDeviceManager(WebCore::VideoCaptureSourceFactoryMac *this)
{
  {
    WebCore::AVCaptureDeviceManager::AVCaptureDeviceManager((WebCore::AVCaptureDeviceManager *)&WebCore::AVCaptureDeviceManager::singleton(void)::manager);
  }
  return &WebCore::AVCaptureDeviceManager::singleton(void)::manager;
}

void WebCore::DisplayCaptureSourceFactoryMac::~DisplayCaptureSourceFactoryMac(WebCore::DisplayCaptureSourceFactoryMac *this)
{
  JUMPOUT(0x19AEA7644);
}

unsigned __int8 *WebCore::DisplayCaptureSourceFactoryMac::createDisplayCaptureSource@<X0>(unsigned __int8 *a1@<X1>, uint64_t *a2@<X2>, const WebCore::MediaConstraints *a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  return WebCore::DisplayCaptureSourceCocoa::create(a1, a2, a3, a4, a5);
}

uint64_t *WebCore::DisplayCaptureSourceFactoryMac::displayCaptureDeviceManager(WebCore::DisplayCaptureSourceFactoryMac *this)
{
  if ((_MergedGlobals_240 & 1) == 0)
  {
    qword_1ECE840D0 = 0;
    unk_1ECE840D8 = 0;
    qword_1ECE840C8 = (uint64_t)&off_1E341B8D0;
    _MergedGlobals_240 = 1;
  }
  return &qword_1ECE840C8;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RealtimeOutgoingAudioSourceCocoa::audioSamplesAvailable(WTF::MediaTime const&,WebCore::PlatformAudioData const&,WebCore::AudioStreamDescription const&,unsigned long)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v7;
  _QWORD *v8;

  v2 = a1[1];
  *a1 = &off_1E341BB48;
  a1[1] = 0;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 16);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E3363888;
      v7[1] = v3;
      v8 = v7;
      WTF::ensureOnMainThread();
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeOutgoingAudioSourceCocoa::audioSamplesAvailable(WTF::MediaTime const&,WebCore::PlatformAudioData const&,WebCore::AudioStreamDescription const&,unsigned long)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v8;
  _QWORD *v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E341BB48;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 16);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E3363888;
      v8[1] = v4;
      v9 = v8;
      WTF::ensureOnMainThread();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeOutgoingAudioSourceCocoa::audioSamplesAvailable(WTF::MediaTime const&,WebCore::PlatformAudioData const&,WebCore::AudioStreamDescription const&,unsigned long)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  double v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  size_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unsigned int v18[4];
  uint64_t v19;

  v1 = *(_QWORD *)(result + 8);
  if (!*(_BYTE *)(v1 + 272))
    goto LABEL_23;
  v2 = *(double *)(v1 + 200) / 100.0;
  v3 = (unint64_t)v2;
  v4 = 2 * (unint64_t)v2 * *(unsigned int *)(v1 + 228);
  v5 = *(unsigned int *)(v1 + 288);
  if (v4 > v5)
  {
    v6 = v5 + (v5 >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 <= v4)
      v8 = 2 * (unint64_t)v2 * *(unsigned int *)(v1 + 228);
    else
      v8 = v7;
    if (HIDWORD(v8))
      goto LABEL_24;
    v9 = *(void **)(v1 + 280);
    v10 = *(unsigned int *)(v1 + 292);
    v11 = (void *)WTF::fastMalloc((WTF *)v8);
    *(_DWORD *)(v1 + 288) = v8;
    *(_QWORD *)(v1 + 280) = v11;
    result = (uint64_t)memcpy(v11, v9, v10);
    if (v9)
    {
      if (*(void **)(v1 + 280) == v9)
      {
        *(_QWORD *)(v1 + 280) = 0;
        *(_DWORD *)(v1 + 288) = 0;
      }
      result = WTF::fastFree((WTF *)v9, v12);
    }
  }
  *(_DWORD *)(v1 + 292) = v4;
  v18[0] = 1;
  if (!*(_BYTE *)(v1 + 272))
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(0xC471u);
    return result;
  }
  v18[2] = *(_DWORD *)(v1 + 228);
  v18[3] = v4;
  v19 = *(_QWORD *)(v1 + 280);
  if (*(_BYTE *)(v1 + 64))
  {
    v13 = *(_QWORD *)(v1 + 96);
    if (*(_BYTE *)(v13 + 364))
      goto LABEL_20;
    LOBYTE(v14) = 1;
  }
  else
  {
    v14 = *(_BYTE *)(v1 + 65) == 0;
    v13 = *(_QWORD *)(v1 + 96);
    if (v14 == (*(_BYTE *)(v13 + 364) != 0))
      goto LABEL_20;
  }
  *(_BYTE *)(v13 + 364) = v14;
LABEL_20:
  v15 = *(_QWORD *)(v1 + 296);
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v16 = off_1E341BB70;
  v16[1] = v1;
  v16[2] = v3;
  v17 = v16;
  WebCore::AudioSampleDataSource::pullAvailableSamplesAsChunks(v13, v18, v3, v15, &v17);
  result = (uint64_t)v17;
  if (v17)
    return (*(uint64_t (**)(_QWORD *))(*v17 + 8))(v17);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RealtimeOutgoingAudioSourceCocoa::pullAudioData(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(result + 296) += v3;
  if (*(_BYTE *)(result + 272))
    return WebCore::RealtimeOutgoingAudioSource::sendAudioFrames(result, *(const void **)(result + 280), 16, (int)*(double *)(result + 200), *(unsigned int *)(result + 228), v3);
  __break(1u);
  return result;
}

WebCore::DeviceOrientationClientMock *WebCore::DeviceOrientationClientMock::DeviceOrientationClientMock(WebCore::DeviceOrientationClientMock *this)
{
  unint64_t StatusReg;
  unsigned int *v3;
  unsigned int v4;
  _QWORD *v5;

  *(_QWORD *)this = off_1E341BB98;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  v3 = *(unsigned int **)(StatusReg + 736);
  if (!v3)
    v3 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  *((_QWORD *)this + 9) = v3;
  *((_QWORD *)this + 4) = off_1E31F7378;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v5 = off_1E341BFB0;
  v5[1] = WebCore::DeviceOrientationClientMock::timerFired;
  v5[2] = 0;
  v5[3] = this;
  *((_QWORD *)this + 10) = v5;
  *((_BYTE *)this + 88) = 0;
  return this;
}

{
  unint64_t StatusReg;
  unsigned int *v3;
  unsigned int v4;
  _QWORD *v5;

  *(_QWORD *)this = off_1E341BB98;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  v3 = *(unsigned int **)(StatusReg + 736);
  if (!v3)
    v3 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  *((_QWORD *)this + 9) = v3;
  *((_QWORD *)this + 4) = off_1E31F7378;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v5 = off_1E341BFB0;
  v5[1] = WebCore::DeviceOrientationClientMock::timerFired;
  v5[2] = 0;
  v5[3] = this;
  *((_QWORD *)this + 10) = v5;
  *((_BYTE *)this + 88) = 0;
  return this;
}

uint64_t WebCore::DeviceOrientationClientMock::timerFired(WebCore::DeviceOrientationClientMock *this)
{
  if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::DeviceOrientationClientMock *)((char *)this + 32));
  return WebCore::DeviceOrientationController::didChangeDeviceOrientation(*((WebCore **)this + 3), *((_DWORD **)this + 2));
}

uint64_t WebCore::DeviceOrientationClientMock::setController(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t WebCore::DeviceOrientationClientMock::startUpdating(uint64_t this)
{
  *(_BYTE *)(this + 88) = 1;
  return this;
}

uint64_t WebCore::DeviceOrientationClientMock::stopUpdating(uint64_t this)
{
  *(_BYTE *)(this + 88) = 0;
  if ((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) != 0)
    return WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(this + 32));
  return this;
}

double WebCore::DeviceOrientationClientMock::setOrientation(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WTF *v4;
  double v5;
  double result;

  v3 = *a2;
  *a2 = 0;
  v4 = *(WTF **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      v4 = (WTF *)WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  if (*(_BYTE *)(a1 + 88))
  {
    if ((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) == 0
      || (result = *(double *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
    {
      *(_QWORD *)(a1 + 56) = 0;
      WTF::MonotonicTime::now(v4);
      WebCore::TimerBase::setNextFireTime(a1 + 32, v5 + 0.0);
    }
  }
  return result;
}

void WebCore::MediaEngineConfigurationFactoryMock::createDecodingConfiguration(uint64_t a1, WTF::StringImpl *a2, double a3, double a4, float a5)
{
  int v5;
  int v6;
  int v7;
  int v10;
  WTF::StringImpl *v11;
  int *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  __int128 v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  char v26;
  WTF::StringImpl *v27;
  __int128 v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  int v31;
  WTF::StringImpl *v32;
  int v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  char v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  int v39;
  BOOL v40;
  WTF::StringImpl *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  BOOL v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  _BYTE v51[32];
  char v52;
  __int128 v53;
  _OWORD v54[2];
  char v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  __int16 v62;
  uint64_t v63;
  char v64;
  WTF::StringImpl *v65;

  if (*(_BYTE *)(a1 + 152) == 1)
    goto LABEL_71;
  v10 = *(unsigned __int8 *)(a1 + 40);
  if (!*(_BYTE *)(a1 + 40))
  {
    v11 = 0;
    goto LABEL_35;
  }
  v11 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1)
    *(_DWORD *)v11 += 2;
  v7 = *(unsigned __int8 *)(a1 + 35);
  v6 = *(unsigned __int8 *)(a1 + 37);
  v5 = *(unsigned __int8 *)(a1 + 39);
  if (*(_DWORD *)(a1 + 8) >= 0x501u && *(_DWORD *)(a1 + 12) > 0x2D0u)
  {
    LOBYTE(v12) = 0;
    goto LABEL_62;
  }
  if (!*(_BYTE *)(a1 + 33) || !*(_BYTE *)(a1 + 32))
    goto LABEL_21;
  if (v11)
    *(_DWORD *)v11 += 2;
  v49 = v11;
  LOBYTE(v50) = 0;
  v12 = &dword_1ECE90000;
    goto LABEL_165;
  while (1)
  {
    WebCore::ContentType::parameter((uint64_t *)&v49, (const WTF::String *)&WebCore::ContentType::codecsParameter(void)::codecs, &v63, a5);
    LODWORD(v12) = MEMORY[0x19AEA53F4](v63, "mock-with-alpha", 15);
    v13 = (WTF::StringImpl *)v63;
    v63 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, a2);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v49;
    v49 = 0;
    if (!v14)
      goto LABEL_20;
    if (*(_DWORD *)v14 != 2)
    {
      *(_DWORD *)v14 -= 2;
LABEL_20:
      if (!(_DWORD)v12)
        goto LABEL_62;
      goto LABEL_21;
    }
    WTF::StringImpl::destroy(v14, a2);
    if (!(_DWORD)v12)
      goto LABEL_62;
LABEL_21:
    if (!v7 && !v6 && !v5)
      goto LABEL_35;
    if (v11)
      *(_DWORD *)v11 += 2;
    v49 = v11;
    LOBYTE(v50) = 0;
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebCore::ContentType::codecsParameter(void)::codecs = v63;
    }
    WebCore::ContentType::parameter((uint64_t *)&v49, (const WTF::String *)&WebCore::ContentType::codecsParameter(void)::codecs, &v63, a5);
    LODWORD(v12) = MEMORY[0x19AEA53F4](v63, "mock-with-hdr", 13);
    v15 = (WTF::StringImpl *)v63;
    v63 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, a2);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v49;
    v49 = 0;
    if (!v16)
      goto LABEL_34;
    if (*(_DWORD *)v16 != 2)
    {
      *(_DWORD *)v16 -= 2;
LABEL_34:
      if (!(_DWORD)v12)
        goto LABEL_62;
      goto LABEL_35;
    }
    WTF::StringImpl::destroy(v16, a2);
    if (!(_DWORD)v12)
      goto LABEL_62;
LABEL_35:
    LOBYTE(v49) = 0;
    v52 = 0;
    if (!*(_BYTE *)(a1 + 96))
      goto LABEL_53;
    v17 = *(WTF::StringImpl **)(a1 + 48);
    if (v17)
      *(_DWORD *)v17 += 2;
    v49 = v17;
    v18 = *(WTF::StringImpl **)(a1 + 56);
    if (v18)
      *(_DWORD *)v18 += 2;
    v50 = v18;
    *(_OWORD *)v51 = *(_OWORD *)(a1 + 64);
    v19 = *(_OWORD *)(a1 + 74);
    *(_OWORD *)&v51[10] = v19;
    v52 = 1;
    if (v17)
      *(_DWORD *)v17 += 2;
    v63 = (uint64_t)v17;
    v64 = 0;
    WebCore::ContentType::containerType((WebCore::ContentType *)&v63, *(double *)&v19, a4, a5);
    v12 = (int *)MEMORY[0x19AEA53F4](v65, "audio/mp4", 9);
    v20 = v65;
    v65 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, a2);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = (WTF::StringImpl *)v63;
    v63 = 0;
    if (!v21)
      goto LABEL_48;
    if (*(_DWORD *)v21 != 2)
    {
      *(_DWORD *)v21 -= 2;
LABEL_48:
      if (!(_DWORD)v12)
        goto LABEL_54;
      goto LABEL_49;
    }
    WTF::StringImpl::destroy(v21, a2);
    if (!(_DWORD)v12)
      goto LABEL_54;
LABEL_49:
    if (v52)
      break;
    __break(1u);
LABEL_165:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::ContentType::codecsParameter(void)::codecs = v63;
    *((_BYTE *)v12 + 2976) = 1;
  }
  if (!v51[25] || !v51[24] || (WTF::String::toDouble((WTF::String *)&v50, 0), a4 = 2.0, a3 > 2.0))
  {
LABEL_53:
    LOBYTE(v12) = 1;
    goto LABEL_54;
  }
  LOBYTE(v12) = 0;
LABEL_54:
  if (!v52)
    goto LABEL_61;
  v22 = v50;
  v50 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, a2);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = v49;
  v49 = 0;
  if (!v23)
  {
LABEL_61:
    if (!v10)
      goto LABEL_65;
    goto LABEL_62;
  }
  if (*(_DWORD *)v23 != 2)
  {
    *(_DWORD *)v23 -= 2;
    goto LABEL_61;
  }
  WTF::StringImpl::destroy(v23, a2);
  if (v10)
  {
LABEL_62:
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, a2);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
LABEL_65:
  if ((v12 & 1) != 0)
  {
    v24 = *(unsigned __int8 *)(a1 + 40);
    if (*(_BYTE *)(a1 + 40))
    {
      v25 = *(WTF::StringImpl **)a1;
      if (*(_QWORD *)a1)
        *(_DWORD *)v25 += 2;
      a3 = *(double *)(a1 + 24);
      a4 = 30.0;
      if (a3 > 30.0)
      {
        v26 = 0;
LABEL_86:
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, a2);
          else
            *(_DWORD *)v25 -= 2;
        }
        goto LABEL_89;
      }
    }
    else
    {
      v25 = 0;
    }
    if (*(_BYTE *)(a1 + 96))
    {
      v29 = *(WTF::StringImpl **)(a1 + 48);
      if (v29)
        *(_DWORD *)v29 += 2;
      v30 = *(WTF::StringImpl **)(a1 + 56);
      if (v30)
      {
        *(_DWORD *)v30 += 2;
        v26 = MEMORY[0x19AEA53F4](v30, "2", 1);
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, a2);
        else
          *(_DWORD *)v30 -= 2;
      }
      else
      {
        v26 = 1;
      }
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
        {
          WTF::StringImpl::destroy(v29, a2);
          if (v24)
            goto LABEL_86;
        }
        else
        {
          *(_DWORD *)v29 -= 2;
          if (v24)
            goto LABEL_86;
        }
LABEL_89:
        v31 = *(unsigned __int8 *)(a1 + 40);
        if (!*(_BYTE *)(a1 + 40))
        {
          v32 = 0;
          goto LABEL_101;
        }
        v32 = *(WTF::StringImpl **)a1;
        if (*(_QWORD *)a1)
          *(_DWORD *)v32 += 4;
        v49 = v32;
        LOBYTE(v50) = 0;
        WebCore::ContentType::containerType((WebCore::ContentType *)&v49, a3, a4, a5);
        v33 = MEMORY[0x19AEA53F4](v63, "video/mp4", 9);
        v34 = (WTF::StringImpl *)v63;
        v63 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, a2);
          else
            *(_DWORD *)v34 -= 2;
        }
        v35 = v49;
        v49 = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 != 2)
          {
            *(_DWORD *)v35 -= 2;
            goto LABEL_98;
          }
          WTF::StringImpl::destroy(v35, a2);
          if (v33)
          {
LABEL_101:
            if (*(_BYTE *)(a1 + 96))
            {
              v37 = *(WTF::StringImpl **)(a1 + 48);
              if (v37)
                *(_DWORD *)v37 += 2;
              v38 = *(WTF::StringImpl **)(a1 + 56);
              if (v38)
              {
                v39 = *(_DWORD *)v38;
                *(_DWORD *)v38 += 2;
                if (*(_BYTE *)(a1 + 72))
                  v40 = *(_QWORD *)(a1 + 64) >= 0x3E9uLL;
                else
                  v40 = 0;
                v36 = !v40;
                if (v39)
                  *(_DWORD *)v38 = v39;
                else
                  WTF::StringImpl::destroy(v38, a2);
              }
              else
              {
                if (*(_BYTE *)(a1 + 72))
                  v48 = *(_QWORD *)(a1 + 64) >= 0x3E9uLL;
                else
                  v48 = 0;
                v36 = !v48;
              }
              if (v37)
              {
                if (*(_DWORD *)v37 == 2)
                {
                  WTF::StringImpl::destroy(v37, a2);
                  if (v31)
                    goto LABEL_119;
                }
                else
                {
                  *(_DWORD *)v37 -= 2;
                  if (!v31)
                    goto LABEL_122;
LABEL_119:
                  if (v32)
                  {
                    if (*(_DWORD *)v32 == 2)
                      WTF::StringImpl::destroy(v32, a2);
                    else
                      *(_DWORD *)v32 -= 2;
                  }
                }
LABEL_122:
                LOBYTE(v49) = 1;
                BYTE1(v49) = v26;
                BYTE2(v49) = v36;
                LOBYTE(v50) = 0;
                v52 = 0;
                if (*(_BYTE *)(a1 + 40))
                {
                  v41 = *(WTF::StringImpl **)a1;
                  *(_QWORD *)a1 = 0;
                  v50 = v41;
                  v42 = *(_OWORD *)(a1 + 24);
                  *(_OWORD *)v51 = *(_OWORD *)(a1 + 8);
                  *(_OWORD *)&v51[16] = v42;
LABEL_124:
                  v52 = 1;
                }
                goto LABEL_125;
              }
            }
            else
            {
              v36 = 1;
            }
            if (!v31)
              goto LABEL_122;
            goto LABEL_119;
          }
        }
        else
        {
LABEL_98:
          if (v33)
            goto LABEL_101;
        }
        v36 = 0;
        goto LABEL_119;
      }
    }
    else
    {
      v26 = 1;
    }
    if (v24)
      goto LABEL_86;
    goto LABEL_89;
  }
LABEL_71:
  LOWORD(v49) = 0;
  BYTE2(v49) = 0;
  LOBYTE(v50) = 0;
  v52 = 0;
  if (*(_BYTE *)(a1 + 40))
  {
    v27 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    v50 = v27;
    v28 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)v51 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)&v51[16] = v28;
    goto LABEL_124;
  }
LABEL_125:
  LOBYTE(v53) = 0;
  v55 = 0;
  if (*(_BYTE *)(a1 + 96))
  {
    v43 = *(_OWORD *)(a1 + 48);
    v44 = *(_OWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    v53 = v43;
    v54[0] = v44;
    *(_OWORD *)((char *)v54 + 10) = *(_OWORD *)(a1 + 74);
    v55 = 1;
  }
  LOBYTE(v56) = 0;
  v58 = 0;
  if (*(_BYTE *)(a1 + 120))
  {
    v56 = *(_QWORD *)(a1 + 104);
    v45 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    v57 = v45;
    v58 = 1;
  }
  LOBYTE(v59) = 0;
  v61 = 0;
  if (*(_BYTE *)(a1 + 144))
  {
    v59 = *(_QWORD *)(a1 + 128);
    v46 = *(_QWORD *)(a1 + 136);
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    v60 = v46;
    v61 = 1;
  }
  v62 = *(_WORD *)(a1 + 152);
  (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)a2 + 16))(*(_QWORD *)a2, &v49);
  WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)&v50, v47);
}

void WebCore::MediaEngineConfigurationFactoryMock::createEncodingConfiguration(uint64_t a1, WTF::StringImpl *a2, double a3, double a4, float a5)
{
  int v7;
  WTF::StringImpl *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  char v18;
  WTF::StringImpl *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v28;
  WTF::StringImpl *v29;
  int v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  char v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  int v36;
  BOOL v37;
  WTF::StringImpl *v38;
  __int128 v39;
  BOOL v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  __int128 v43;
  __int128 v44;
  char v45;
  __int128 v46;
  _OWORD v47[2];
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t v56;

  if (*(_BYTE *)(a1 + 152))
    goto LABEL_54;
  v7 = *(unsigned __int8 *)(a1 + 40);
  if (!*(_BYTE *)(a1 + 40))
  {
    v8 = 0;
    goto LABEL_9;
  }
  v8 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1)
    *(_DWORD *)v8 += 2;
  if (*(_DWORD *)(a1 + 8) >= 0x501u && *(_DWORD *)(a1 + 12) > 0x2D0u)
  {
    LOBYTE(v9) = 0;
    goto LABEL_45;
  }
  if (*(_BYTE *)(a1 + 33) && *(_BYTE *)(a1 + 32))
  {
    if (v8)
      *(_DWORD *)v8 += 2;
    v41 = v8;
    LOBYTE(v42) = 0;
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebCore::ContentType::codecsParameter(void)::codecs = v56;
    }
    WebCore::ContentType::parameter((uint64_t *)&v41, (const WTF::String *)&WebCore::ContentType::codecsParameter(void)::codecs, &v56, a5);
    v9 = MEMORY[0x19AEA53F4](v56, "mock-with-alpha", 15);
    v14 = (WTF::StringImpl *)v56;
    v56 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, a2);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v41;
    v41 = 0;
    if (!v15)
    {
LABEL_41:
      if (!v9)
        goto LABEL_45;
      goto LABEL_9;
    }
    if (*(_DWORD *)v15 != 2)
    {
      *(_DWORD *)v15 -= 2;
      goto LABEL_41;
    }
    WTF::StringImpl::destroy(v15, a2);
    if (!v9)
      goto LABEL_45;
  }
LABEL_9:
  if (!*(_BYTE *)(a1 + 96))
  {
    LOBYTE(v9) = 1;
LABEL_44:
    if (!v7)
      goto LABEL_48;
    goto LABEL_45;
  }
  v10 = *(WTF::StringImpl **)(a1 + 48);
  if (v10)
    *(_DWORD *)v10 += 2;
  v11 = *(WTF::StringImpl **)(a1 + 56);
  if (v11)
    *(_DWORD *)v11 += 2;
  if (v10)
    *(_DWORD *)v10 += 2;
  v41 = v10;
  LOBYTE(v42) = 0;
  WebCore::ContentType::containerType((WebCore::ContentType *)&v41, a3, a4, a5);
  LOBYTE(v9) = MEMORY[0x19AEA53F4](v56, "audio/mp4", 9);
  v12 = (WTF::StringImpl *)v56;
  v56 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::destroy(v13, a2);
      if (!v11)
        goto LABEL_25;
      goto LABEL_23;
    }
    *(_DWORD *)v13 -= 2;
  }
  if (!v11)
    goto LABEL_25;
LABEL_23:
  if (*(_DWORD *)v11 == 2)
    WTF::StringImpl::destroy(v11, a2);
  else
    *(_DWORD *)v11 -= 2;
LABEL_25:
  if (!v10)
    goto LABEL_44;
  if (*(_DWORD *)v10 == 2)
  {
    WTF::StringImpl::destroy(v10, a2);
    if (!v7)
      goto LABEL_48;
  }
  else
  {
    *(_DWORD *)v10 -= 2;
    if (!v7)
      goto LABEL_48;
  }
LABEL_45:
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
LABEL_48:
  if ((v9 & 1) == 0)
  {
LABEL_54:
    LOWORD(v41) = 0;
    BYTE2(v41) = 0;
    LOBYTE(v42) = 0;
    v45 = 0;
    if (!*(_BYTE *)(a1 + 40))
      goto LABEL_57;
    v19 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    v42 = v19;
    v20 = *(_OWORD *)(a1 + 24);
    v43 = *(_OWORD *)(a1 + 8);
    v44 = v20;
    goto LABEL_56;
  }
  v16 = *(unsigned __int8 *)(a1 + 40);
  if (*(_BYTE *)(a1 + 40))
  {
    v17 = *(WTF::StringImpl **)a1;
    if (*(_QWORD *)a1)
      *(_DWORD *)v17 += 2;
    a3 = *(double *)(a1 + 24);
    a4 = 30.0;
    if (a3 > 30.0)
    {
      v18 = 0;
      goto LABEL_77;
    }
  }
  else
  {
    v17 = 0;
  }
  if (!*(_BYTE *)(a1 + 96))
  {
    v18 = 1;
    goto LABEL_76;
  }
  v26 = *(WTF::StringImpl **)(a1 + 48);
  if (v26)
    *(_DWORD *)v26 += 2;
  v27 = *(WTF::StringImpl **)(a1 + 56);
  if (v27)
  {
    *(_DWORD *)v27 += 2;
    v18 = MEMORY[0x19AEA53F4](v27, "2", 1);
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, a2);
    else
      *(_DWORD *)v27 -= 2;
  }
  else
  {
    v18 = 1;
  }
  if (!v26)
  {
LABEL_76:
    if (!v16)
      goto LABEL_80;
    goto LABEL_77;
  }
  if (*(_DWORD *)v26 == 2)
  {
    WTF::StringImpl::destroy(v26, a2);
    if (!v16)
      goto LABEL_80;
  }
  else
  {
    *(_DWORD *)v26 -= 2;
    if (!v16)
      goto LABEL_80;
  }
LABEL_77:
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
LABEL_80:
  v28 = *(unsigned __int8 *)(a1 + 40);
  if (!*(_BYTE *)(a1 + 40))
  {
    v29 = 0;
    goto LABEL_92;
  }
  v29 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1)
    *(_DWORD *)v29 += 4;
  v41 = v29;
  LOBYTE(v42) = 0;
  WebCore::ContentType::containerType((WebCore::ContentType *)&v41, a3, a4, a5);
  v30 = MEMORY[0x19AEA53F4](v56, "video/mp4", 9);
  v31 = (WTF::StringImpl *)v56;
  v56 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, a2);
    else
      *(_DWORD *)v31 -= 2;
  }
  v32 = v41;
  v41 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
    {
      WTF::StringImpl::destroy(v32, a2);
      if (!v30)
        goto LABEL_90;
      goto LABEL_92;
    }
    *(_DWORD *)v32 -= 2;
  }
  if (!v30)
  {
LABEL_90:
    v33 = 0;
    goto LABEL_110;
  }
LABEL_92:
  if (!*(_BYTE *)(a1 + 96))
  {
    v33 = 1;
    goto LABEL_109;
  }
  v34 = *(WTF::StringImpl **)(a1 + 48);
  if (v34)
    *(_DWORD *)v34 += 2;
  v35 = *(WTF::StringImpl **)(a1 + 56);
  if (v35)
  {
    v36 = *(_DWORD *)v35;
    *(_DWORD *)v35 += 2;
    if (*(_BYTE *)(a1 + 72))
      v37 = *(_QWORD *)(a1 + 64) >= 0x3E9uLL;
    else
      v37 = 0;
    v33 = !v37;
    if (v36)
      *(_DWORD *)v35 = v36;
    else
      WTF::StringImpl::destroy(v35, a2);
  }
  else
  {
    if (*(_BYTE *)(a1 + 72))
      v40 = *(_QWORD *)(a1 + 64) >= 0x3E9uLL;
    else
      v40 = 0;
    v33 = !v40;
  }
  if (!v34)
  {
LABEL_109:
    if (!v28)
      goto LABEL_113;
    goto LABEL_110;
  }
  if (*(_DWORD *)v34 == 2)
  {
    WTF::StringImpl::destroy(v34, a2);
    if (!v28)
      goto LABEL_113;
  }
  else
  {
    *(_DWORD *)v34 -= 2;
    if (!v28)
      goto LABEL_113;
  }
LABEL_110:
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, a2);
    else
      *(_DWORD *)v29 -= 2;
  }
LABEL_113:
  LOBYTE(v41) = 1;
  BYTE1(v41) = v18;
  BYTE2(v41) = v33;
  LOBYTE(v42) = 0;
  v45 = 0;
  if (*(_BYTE *)(a1 + 40))
  {
    v38 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    v42 = v38;
    v39 = *(_OWORD *)(a1 + 24);
    v43 = *(_OWORD *)(a1 + 8);
    v44 = v39;
LABEL_56:
    v45 = 1;
  }
LABEL_57:
  LOBYTE(v46) = 0;
  v48 = 0;
  if (*(_BYTE *)(a1 + 96))
  {
    v21 = *(_OWORD *)(a1 + 48);
    v22 = *(_OWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    v46 = v21;
    v47[0] = v22;
    *(_OWORD *)((char *)v47 + 10) = *(_OWORD *)(a1 + 74);
    v48 = 1;
  }
  LOBYTE(v49) = 0;
  v51 = 0;
  if (*(_BYTE *)(a1 + 120))
  {
    v49 = *(_QWORD *)(a1 + 104);
    v23 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    v50 = v23;
    v51 = 1;
  }
  LOBYTE(v52) = 0;
  v54 = 0;
  if (*(_BYTE *)(a1 + 144))
  {
    v52 = *(_QWORD *)(a1 + 128);
    v24 = *(_QWORD *)(a1 + 136);
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    v53 = v24;
    v54 = 1;
  }
  v55 = *(_BYTE *)(a1 + 152);
  (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)a2 + 16))(*(_QWORD *)a2, &v41);
  WebCore::MediaConfiguration::~MediaConfiguration((WebCore::MediaConfiguration *)&v42, v25);
}

uint64_t WebCore::MockRealtimeMediaSourceCenter::mockDeviceWithPersistentID@<X0>(uint64_t this@<X0>, const WTF::StringImpl *a2@<X2>, uint64_t a3@<X8>)
{
  WTF::StringImpl **v4;
  char *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int i;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _DWORD *v16;
  _DWORD *v17;
  char v18;
  uint64_t v19;
  char v20;
  WTF::StringImpl **v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;

  v4 = (WTF::StringImpl **)this;
  v6 = &InitWebCoreThreadSystemInterface::didInit;
  if ((byte_1ECE840E5 & 1) == 0)
  {
    v24 = 0;
    if (byte_1ECE840E4 == 1)
    {
      v21 = (WTF::StringImpl **)qword_1ECE840F8;
      v22 = dword_1ECE840F0;
      if (dword_1ECE840F0)
        goto LABEL_26;
    }
    else
    {
      this = WebCore::defaultDevices((WebCore *)&v25);
      v21 = (WTF::StringImpl **)v25;
      qword_1ECE840F8 = v25;
      v22 = v27;
      dword_1ECE840E8 = v26;
      dword_1ECE840F0 = v27;
      byte_1ECE840E4 = 1;
      if (v27)
      {
LABEL_26:
        v23 = 96 * v22;
        do
        {
          this = (uint64_t)WTF::HashMap<WTF::String,WebCore::MockMediaDevice,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::MockMediaDevice>,WTF::HashTableTraits>::add<WebCore::MockMediaDevice&>((uint64_t)&v25, &v24, v21, (uint64_t)v21);
          v21 += 12;
          v23 -= 96;
        }
        while (v23);
        v7 = v24;
LABEL_31:
        qword_1ECE84100 = v7;
        byte_1ECE840E5 = 1;
        v6 = &InitWebCoreThreadSystemInterface::didInit;
        if (v7)
          goto LABEL_3;
LABEL_32:
        v20 = 0;
        *(_BYTE *)a3 = 0;
        goto LABEL_33;
      }
    }
    v7 = 0;
    goto LABEL_31;
  }
  v7 = qword_1ECE84100;
  if (!qword_1ECE84100)
    goto LABEL_32;
LABEL_3:
  v8 = *(_DWORD *)(v7 - 8);
  v9 = *((_DWORD *)*v4 + 4);
  if (v9 < 0x100)
    v10 = WTF::StringImpl::hashSlowCase(*v4);
  else
    v10 = v9 >> 8;
  for (i = 0; ; v10 = i + v12)
  {
    v12 = v10 & v8;
    v13 = v7 + 104 * (v10 & v8);
    this = *(_QWORD *)v13;
    if (*(_QWORD *)v13 != -1)
    {
      if (!this)
      {
        v14 = *((_QWORD *)v6 + 32);
        if (!v14)
          goto LABEL_32;
        v15 = *(_DWORD *)(v14 - 4);
        v13 = v14 + 104 * v15;
        goto LABEL_15;
      }
      this = WTF::equal((WTF *)this, *v4, a2);
      if ((this & 1) != 0)
        break;
    }
    ++i;
  }
  v14 = *((_QWORD *)v6 + 32);
  if (!v14)
    goto LABEL_16;
  v15 = *(_DWORD *)(v14 - 4);
LABEL_15:
  v14 += 104 * v15;
LABEL_16:
  if (v14 == v13)
    goto LABEL_32;
  v16 = *(_DWORD **)(v13 + 8);
  if (v16)
    *v16 += 2;
  *(_QWORD *)a3 = v16;
  v17 = *(_DWORD **)(v13 + 16);
  if (v17)
    *v17 += 2;
  *(_QWORD *)(a3 + 8) = v17;
  v18 = *(_BYTE *)(v13 + 24);
  *(_BYTE *)(a3 + 24) = 0;
  *(_BYTE *)(a3 + 16) = v18;
  *(_DWORD *)(a3 + 88) = -1;
  v19 = *(unsigned int *)(v13 + 96);
  if ((_DWORD)v19 != -1)
  {
    this = ((uint64_t (*)(uint64_t *))off_1E341BF28[v19])(&v25);
    *(_DWORD *)(a3 + 88) = v19;
  }
  v20 = 1;
LABEL_33:
  *(_BYTE *)(a3 + 96) = v20;
  return this;
}

_DWORD *WebCore::MockRealtimeAudioSource::setChannelCount(_DWORD *this, unsigned int a2)
{
  if (a2 <= 2)
  {
    this[80] = a2;
    return (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)this + 384))(this, 32);
  }
  return this;
}

uint64_t WebCore::MockDisplayCapturer::start(WebCore::MockDisplayCapturer *this)
{
  WebCore::RealtimeMediaSource::start(*((_BYTE **)this + 5));
  return 1;
}

__n128 WebCore::MockDisplayCapturer::commitConfiguration(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  __n128 result;
  __int128 v13;

  v4 = *a2;
  v5 = a2[1];
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  v6 = (_DWORD *)*((_QWORD *)a2 + 5);
  if (v6)
    *v6 += 2;
  v7 = *(WTF::StringImpl **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (_DWORD *)*((_QWORD *)a2 + 6);
  if (v8)
    *v8 += 2;
  v9 = *(WTF::StringImpl **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v8;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (_DWORD *)*((_QWORD *)a2 + 7);
  if (v10)
    *v10 += 2;
  v11 = *(WTF::StringImpl **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = (__n128)a2[4];
  v13 = a2[5];
  *(_QWORD *)(a1 + 142) = *(_QWORD *)((char *)a2 + 94);
  *(__n128 *)(a1 + 112) = result;
  *(_OWORD *)(a1 + 128) = v13;
  return result;
}

_QWORD *WebCore::MockDisplayCapturer::generateFrame@<X0>(WebCore::MockDisplayCapturer *this@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  _QWORD *result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 5);
  v4 = v3 + 2266;
  if (__ldaxr(v3 + 2266))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v3 + 2266);
LABEL_5:
  result = WebCore::MockRealtimeVideoSource::imageBufferInternal((WebCore::MockRealtimeVideoSource *)v3);
  v7 = (uint64_t)result;
  v8 = __ldxr(v4);
  if (v8 != 1)
  {
    __clrex();
LABEL_10:
    result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_8;
LABEL_11:
    v9 = 0;
    goto LABEL_12;
  }
  if (__stlxr(0, v4))
    goto LABEL_10;
  if (!result)
    goto LABEL_11;
LABEL_8:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v7 + 48))(&v10, v7);
  v9 = v10;
LABEL_12:
  *(_QWORD *)a2 = v9;
  *(_DWORD *)(a2 + 8) = 0;
  return result;
}

unint64_t WebCore::MockDisplayCapturer::intrinsicSize(WebCore::MockDisplayCapturer *this, uint64_t a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl *v3;
  unsigned int v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  char v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  _DWORD v12[16];
  int v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  WebCore::MockRealtimeMediaSourceCenter::mockDeviceWithPersistentID(*((_QWORD *)this + 5) + 176, a3, (uint64_t)&v10);
  if (v14)
  {
    v4 = 0;
    v5 = 0;
    if (v13 != -1)
    {
      if (v13 == 3)
      {
        v4 = v12[4];
        v5 = v12[5];
      }
      ((void (*)(char *, _DWORD *))off_1E341BEC8[v13])(&v9, v12);
    }
    v13 = -1;
    v6 = v11;
    v11 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v3);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = v10;
    v10 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v3);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  return v4 | (unint64_t)(v5 << 32);
}

uint64_t WebCore::MockRealtimeMediaSourceCenter::resetDevices(WebCore::MockRealtimeMediaSourceCenter *this)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *v2;
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t result;
  WTF *v9;
  unsigned int v10;
  char v11;

  WebCore::defaultDevices((WebCore *)&v9);
  WebCore::MockRealtimeMediaSourceCenter::setDevices((WebCore::MockRealtimeMediaSourceCenter *)&v9, v1);
  v3 = v9;
  if (v10)
  {
    v4 = 96 * v10;
    do
    {
      v5 = *((unsigned int *)v3 + 22);
      if ((_DWORD)v5 != -1)
        ((void (*)(char *, char *))off_1E341BEC8[v5])(&v11, (char *)v3 + 24);
      *((_DWORD *)v3 + 22) = -1;
      v6 = (WTF::StringImpl *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, v2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = *(WTF::StringImpl **)v3;
      *(_QWORD *)v3 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, v2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v3 = (WTF *)((char *)v3 + 96);
      v4 -= 96;
    }
    while (v4);
    v3 = v9;
  }
  if (v3)
    WTF::fastFree(v3, v2);
  {
    WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
  }
  result = WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)&unk_1ECE911E8);
  if ((result & 1) == 0)
    return WTF::RunLoop::TimerBase::start();
  return result;
}

uint64_t WebCore::MockRealtimeMediaSourceCenter::setDevices(WebCore::MockRealtimeMediaSourceCenter *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WebCore::MockRealtimeMediaSourceCenter *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WebCore::MockRealtimeMediaSourceCenter *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WebCore::MockRealtimeMediaSourceCenter *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  const WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl **v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl **v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  int i;
  unsigned int v41;
  WTF::StringImpl **v42;
  WTF *v43;
  WTF::StringImpl *v44;
  int v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;

  WebCore::MockRealtimeMediaSourceCenter::microphoneDevices(a1, a2);
  v4 = WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WTF *)&qword_1ECE84108, v3);
  WebCore::MockRealtimeMediaSourceCenter::speakerDevices(v4, v5);
  v7 = WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WTF *)&qword_1ECE84118, v6);
  WebCore::MockRealtimeMediaSourceCenter::videoDevices(v7, v8);
  v10 = WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WTF *)&qword_1ECE84128, v9);
  WebCore::MockRealtimeMediaSourceCenter::displayDevices(v10, v11);
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WTF *)&qword_1ECE84138, v12);
  if (byte_1ECE840E4 == 1)
  {
    v15 = qword_1ECE840F8;
    v16 = dword_1ECE840F0;
    if (!dword_1ECE840F0)
      goto LABEL_26;
  }
  else
  {
    WebCore::defaultDevices((WebCore *)&v53);
    v15 = v53;
    qword_1ECE840F8 = v53;
    v16 = v55;
    dword_1ECE840E8 = v54;
    dword_1ECE840F0 = v55;
    byte_1ECE840E4 = 1;
    if (!v55)
      goto LABEL_26;
  }
  v17 = v15 + 96 * v16;
  do
  {
    if (*((_DWORD *)a1 + 3))
    {
      v18 = 0;
      v19 = 0;
      while ((WTF::equal(*(WTF **)(*(_QWORD *)a1 + v18), *(const WTF::StringImpl **)v15, v14) & 1) == 0)
      {
        ++v19;
        v18 += 96;
        if (v19 >= *((unsigned int *)a1 + 3))
          goto LABEL_8;
      }
    }
    else
    {
LABEL_8:
      {
        WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
      }
      WebCore::RealtimeMediaSourceCenter::captureDeviceWillBeRemoved((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center, (const WTF::String *)v15);
    }
    v15 += 96;
  }
  while (v15 != v17);
  v15 = qword_1ECE840F8;
  if (dword_1ECE840F0)
  {
    v20 = 96 * dword_1ECE840F0;
    do
    {
      v21 = *(unsigned int *)(v15 + 88);
      if ((_DWORD)v21 != -1)
        ((void (*)(uint64_t *, uint64_t))off_1E341BEC8[v21])(&v53, v15 + 24);
      *(_DWORD *)(v15 + 88) = -1;
      v22 = *(WTF::StringImpl **)(v15 + 8);
      *(_QWORD *)(v15 + 8) = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v13);
        else
          *(_DWORD *)v22 -= 2;
      }
      v23 = *(WTF::StringImpl **)v15;
      *(_QWORD *)v15 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v13);
        else
          *(_DWORD *)v23 -= 2;
      }
      v15 += 96;
      v20 -= 96;
    }
    while (v20);
    v15 = qword_1ECE840F8;
  }
LABEL_26:
  if (v15)
  {
    qword_1ECE840F8 = 0;
    dword_1ECE840E8 = 0;
    WTF::fastFree((WTF *)v15, v13);
  }
  v24 = *(WTF::StringImpl ***)a1;
  *(_QWORD *)a1 = 0;
  qword_1ECE840F8 = (uint64_t)v24;
  v25 = *((_DWORD *)a1 + 3);
  dword_1ECE840E8 = *((_DWORD *)a1 + 2);
  *((_QWORD *)a1 + 1) = 0;
  dword_1ECE840F0 = v25;
  if ((byte_1ECE840E5 & 1) == 0)
  {
    v52 = 0;
    if ((byte_1ECE840E4 & 1) != 0)
    {
      if (v25)
        goto LABEL_95;
    }
    else
    {
      WebCore::defaultDevices((WebCore *)&v53);
      v24 = (WTF::StringImpl **)v53;
      qword_1ECE840F8 = v53;
      v25 = v55;
      dword_1ECE840E8 = v54;
      dword_1ECE840F0 = v55;
      byte_1ECE840E4 = 1;
      if (v55)
      {
LABEL_95:
        v51 = 96 * v25;
        do
        {
          WTF::HashMap<WTF::String,WebCore::MockMediaDevice,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::MockMediaDevice>,WTF::HashTableTraits>::add<WebCore::MockMediaDevice&>((uint64_t)&v53, &v52, v24, (uint64_t)v24);
          v24 += 12;
          v51 -= 96;
        }
        while (v51);
        v26 = v52;
LABEL_100:
        qword_1ECE84100 = v26;
        byte_1ECE840E5 = 1;
        if (v26)
          goto LABEL_30;
        goto LABEL_50;
      }
    }
    v26 = 0;
    goto LABEL_100;
  }
  v26 = qword_1ECE84100;
  if (qword_1ECE84100)
  {
LABEL_30:
    qword_1ECE84100 = 0;
    v27 = *(unsigned int *)(v26 - 4);
    if ((_DWORD)v27)
    {
      v28 = v26;
      do
      {
        if (*(_QWORD *)v28 != -1)
        {
          v29 = *(unsigned int *)(v28 + 96);
          if ((_DWORD)v29 != -1)
            ((void (*)(uint64_t *, uint64_t))off_1E341BEC8[v29])(&v53, v28 + 32);
          *(_DWORD *)(v28 + 96) = -1;
          v30 = *(WTF::StringImpl **)(v28 + 16);
          *(_QWORD *)(v28 + 16) = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, v13);
            else
              *(_DWORD *)v30 -= 2;
          }
          v31 = *(WTF::StringImpl **)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v13);
            else
              *(_DWORD *)v31 -= 2;
          }
          v32 = *(WTF::StringImpl **)v28;
          *(_QWORD *)v28 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
              WTF::StringImpl::destroy(v32, v13);
            else
              *(_DWORD *)v32 -= 2;
          }
        }
        v28 += 104;
        --v27;
      }
      while (v27);
    }
    WTF::fastFree((WTF *)(v26 - 16), v13);
  }
LABEL_50:
  if (!dword_1ECE840F0)
    goto LABEL_86;
  v33 = (WTF::StringImpl **)qword_1ECE840F8;
  v34 = qword_1ECE840F8 + 96 * dword_1ECE840F0;
  do
  {
    v35 = qword_1ECE84100;
    if (qword_1ECE84100
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::MockMediaDevice>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::MockMediaDevice>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::MockMediaDevice,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::MockMediaDevice>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(&qword_1ECE84100, 8u, 0), (v35 = qword_1ECE84100) != 0))
    {
      v36 = *(_DWORD *)(v35 - 8);
    }
    else
    {
      v36 = 0;
    }
    v37 = *((_DWORD *)*v33 + 4);
    if (v37 < 0x100)
      v38 = WTF::StringImpl::hashSlowCase(*v33);
    else
      v38 = v37 >> 8;
    v39 = 0;
    for (i = 1; ; ++i)
    {
      v41 = v38 & v36;
      v42 = (WTF::StringImpl **)(v35 + 104 * (v38 & v36));
      v43 = *v42;
      if (*v42 == (WTF::StringImpl *)-1)
      {
        v39 = v35 + 104 * v41;
        goto LABEL_64;
      }
      if (!v43)
        break;
      if ((WTF::equal(v43, *v33, v14) & 1) != 0)
        goto LABEL_82;
LABEL_64:
      v38 = i + v41;
    }
    if (v39)
    {
      *(_QWORD *)(v39 + 96) = 0;
      *(_OWORD *)(v39 + 64) = 0u;
      *(_OWORD *)(v39 + 80) = 0u;
      *(_OWORD *)(v39 + 32) = 0u;
      *(_OWORD *)(v39 + 48) = 0u;
      *(_OWORD *)v39 = 0u;
      *(_OWORD *)(v39 + 16) = 0u;
      *(_DWORD *)(v39 + 32) = 44100;
      --*(_DWORD *)(qword_1ECE84100 - 16);
      v42 = (WTF::StringImpl **)v39;
    }
    v44 = *v33;
    if (*v33)
      *(_DWORD *)v44 += 2;
    *v42 = v44;
    WTF::GenericHashTraits<WebCore::MockMediaDevice>::assignToEmpty<WebCore::MockMediaDevice,WebCore::MockMediaDevice const&>((uint64_t)(v42 + 1), (uint64_t)v33);
    if (qword_1ECE84100)
      v45 = *(_DWORD *)(qword_1ECE84100 - 12) + 1;
    else
      v45 = 1;
    *(_DWORD *)(qword_1ECE84100 - 12) = v45;
    if (qword_1ECE84100)
      v46 = *(_DWORD *)(qword_1ECE84100 - 12);
    else
      v46 = 0;
    v47 = (*(_DWORD *)(qword_1ECE84100 - 16) + v46);
    v48 = *(unsigned int *)(qword_1ECE84100 - 4);
    if (v48 > 0x400)
    {
      if (v48 <= 2 * v47)
      {
LABEL_78:
        v49 = (_DWORD)v48 << (6 * *(_DWORD *)(qword_1ECE84100 - 12) >= (2 * v48));
        goto LABEL_81;
      }
    }
    else if (3 * v48 <= 4 * v47)
    {
      if ((_DWORD)v48)
        goto LABEL_78;
      v49 = 8;
LABEL_81:
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::MockMediaDevice>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::MockMediaDevice>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::MockMediaDevice,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::MockMediaDevice>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(&qword_1ECE84100, v49, (uint64_t)v42);
    }
LABEL_82:
    WebCore::createMockDevice((WebCore *)v33, 0);
    v33 += 12;
  }
  while (v33 != (WTF::StringImpl **)v34);
LABEL_86:
  {
    WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
  }
  result = WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)&unk_1ECE911E8);
  if ((result & 1) == 0)
    return WTF::RunLoop::TimerBase::start();
  return result;
}

uint64_t WebCore::defaultDevices(WebCore *this)
{
  WTF *v2;
  WTF *v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  unsigned int v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  void *v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  _DWORD *v61;
  _DWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF *v70;
  WTF *v71;
  WTF *v72;
  WTF *v73;
  WTF *v74;
  WTF *v75;
  WTF *v76;
  WTF *v77;
  void *v78;
  void *v79;
  void *v80;
  WTF *v81[2];
  WTF *v82[2];
  WTF *v83[2];
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  WTF *v88;
  int v89;
  int v90;
  __int128 v91;
  char v92;
  uint64_t v93;
  WTF *v94;
  int v95;
  int v96;
  __int128 v97;
  char v98;
  uint64_t v99;
  WTF *v100;
  int v101;
  int v102;
  __int128 v103;
  char v104;
  uint64_t v105;
  WTF *v106;
  int v107;
  int v108;
  __int128 v109;
  char v110;
  uint64_t v111;
  WTF *v112;
  int v113;
  int v114;
  __int128 v115;
  char v116;
  uint64_t v117;
  WTF *v118;
  int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  WTF *v125;
  int v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  WTF *v132;
  int v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  _BYTE v137[8];
  _QWORD v138[2];
  char v139;
  int v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  int v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  int v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  int v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  int v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  uint64_t v167;
  int v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  char v172;
  uint64_t v173;
  char v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  __int16 v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  char v184;
  uint64_t v185;
  char v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  __int16 v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  char v196;
  char v197;
  __int128 v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  char v202;
  char v203;
  __int128 v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  char v208;
  char v209;
  __int128 v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  char v214;
  char v215;
  __int128 v216;
  int v217;
  _QWORD v218[12];

  v218[0] = *MEMORY[0x1E0C80C00];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v138[0] = v87;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v138[1] = v87;
  v139 = 0;
  v140 = 44100;
  v141 = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v142 = v87;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v143 = v87;
  v144 = 0;
  v145 = 48000;
  v146 = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v147 = v87;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v148 = v87;
  v149 = 0;
  v150 = 96000;
  v151 = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v152 = v87;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v153 = v87;
  v154 = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v155 = v87;
  v156 = 44100;
  v157 = 1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v158 = v87;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v159 = v87;
  v160 = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v161 = v87;
  v162 = 48000;
  v163 = 1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v164 = v87;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v165 = v87;
  v166 = 0;
  v167 = 0;
  v168 = 48000;
  v169 = 1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v170 = v87;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v171 = v87;
  v172 = 0;
  v2 = (WTF *)WTF::fastMalloc((WTF *)0x30);
  *(_OWORD *)v2 = xmmword_1969F9738;
  *((_OWORD *)v2 + 1) = unk_1969F9748;
  *((_OWORD *)v2 + 2) = xmmword_1969F9758;
  v3 = (WTF *)WTF::fastMalloc((WTF *)0xB0);
  v84 = xmmword_1969F9768;
  v85 = unk_1969F9778;
  *(_OWORD *)v3 = xmmword_1969F9768;
  *((_OWORD *)v3 + 1) = unk_1969F9778;
  *(_OWORD *)v82 = xmmword_1969F9788;
  *(_OWORD *)v83 = unk_1969F9798;
  *((_OWORD *)v3 + 2) = xmmword_1969F9788;
  *((_OWORD *)v3 + 3) = unk_1969F9798;
  *(_OWORD *)v81 = unk_1969F97B8;
  *((_OWORD *)v3 + 4) = xmmword_1969F97A8;
  *((_OWORD *)v3 + 5) = unk_1969F97B8;
  *((_OWORD *)v3 + 6) = xmmword_1969F97C8;
  *((_OWORD *)v3 + 7) = unk_1969F97D8;
  *((_OWORD *)v3 + 8) = xmmword_1969F97E8;
  *((_OWORD *)v3 + 9) = unk_1969F97F8;
  *((_OWORD *)v3 + 10) = xmmword_1969F9808;
  v4 = (WTF *)WTF::fastMalloc((WTF *)0xB0);
  *(_OWORD *)v4 = v84;
  *((_OWORD *)v4 + 1) = v85;
  *((_OWORD *)v4 + 2) = *(_OWORD *)v82;
  *((_OWORD *)v4 + 3) = *(_OWORD *)v83;
  *((_OWORD *)v4 + 4) = xmmword_1969F97A8;
  *((_OWORD *)v4 + 5) = *(_OWORD *)v81;
  *((_OWORD *)v4 + 6) = xmmword_1969F97C8;
  *((_OWORD *)v4 + 7) = unk_1969F97D8;
  *((_OWORD *)v4 + 8) = xmmword_1969F97E8;
  *((_OWORD *)v4 + 9) = unk_1969F97F8;
  *((_OWORD *)v4 + 10) = xmmword_1969F9808;
  v5 = (WTF *)WTF::fastMalloc((WTF *)0xB0);
  *(_OWORD *)v5 = v84;
  *((_OWORD *)v5 + 1) = v85;
  *((_OWORD *)v5 + 2) = *(_OWORD *)v82;
  *((_OWORD *)v5 + 3) = *(_OWORD *)v83;
  *((_OWORD *)v5 + 4) = xmmword_1969F97A8;
  *((_OWORD *)v5 + 5) = *(_OWORD *)v81;
  *((_OWORD *)v5 + 6) = xmmword_1969F97C8;
  *((_OWORD *)v5 + 7) = unk_1969F97D8;
  *((_OWORD *)v5 + 8) = xmmword_1969F97E8;
  *((_OWORD *)v5 + 9) = unk_1969F97F8;
  *((_OWORD *)v5 + 10) = xmmword_1969F9808;
  v6 = WTF::fastMalloc((WTF *)0xC0);
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = 0x5A000000A00;
  *(_DWORD *)(v6 + 20) = 3;
  v7 = (_OWORD *)WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v6 + 16) = 3;
  *(_QWORD *)(v6 + 8) = v7;
  v8 = *(_OWORD *)v2;
  v83[0] = v2;
  v9 = *((_OWORD *)v2 + 2);
  v7[1] = *((_OWORD *)v2 + 1);
  v7[2] = v9;
  *v7 = v8;
  __asm { FMOV            V0.2D, #1.0 }
  v85 = _Q0;
  *(_OWORD *)(v6 + 24) = _Q0;
  *(_BYTE *)(v6 + 40) = 1;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 48) = 0x2D000000500;
  *(_DWORD *)(v6 + 68) = 11;
  v15 = (_OWORD *)WTF::fastMalloc((WTF *)0xB0);
  *(_DWORD *)(v6 + 64) = 11;
  *(_QWORD *)(v6 + 56) = v15;
  v16 = *((_OWORD *)v3 + 7);
  v17 = *((_OWORD *)v3 + 8);
  v18 = *((_OWORD *)v3 + 10);
  v15[9] = *((_OWORD *)v3 + 9);
  v15[10] = v18;
  v15[7] = v16;
  v15[8] = v17;
  v19 = *((_OWORD *)v3 + 3);
  v20 = *((_OWORD *)v3 + 4);
  v21 = *((_OWORD *)v3 + 6);
  v15[5] = *((_OWORD *)v3 + 5);
  v15[6] = v21;
  v15[3] = v19;
  v15[4] = v20;
  v22 = *(_OWORD *)v3;
  v82[0] = v3;
  v23 = *((_OWORD *)v3 + 2);
  v15[1] = *((_OWORD *)v3 + 1);
  v15[2] = v23;
  *v15 = v22;
  *(_OWORD *)(v6 + 72) = v85;
  *(_BYTE *)(v6 + 88) = 1;
  *(_QWORD *)(v6 + 104) = 0;
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)(v6 + 96) = 0x1E000000280;
  *(_DWORD *)(v6 + 116) = 11;
  v24 = (_OWORD *)WTF::fastMalloc((WTF *)0xB0);
  *(_DWORD *)(v6 + 112) = 11;
  *(_QWORD *)(v6 + 104) = v24;
  v25 = *((_OWORD *)v4 + 7);
  v26 = *((_OWORD *)v4 + 8);
  v27 = *((_OWORD *)v4 + 10);
  v24[9] = *((_OWORD *)v4 + 9);
  v24[10] = v27;
  v24[7] = v25;
  v24[8] = v26;
  v28 = *((_OWORD *)v4 + 3);
  v29 = *((_OWORD *)v4 + 4);
  v30 = *((_OWORD *)v4 + 6);
  v24[5] = *((_OWORD *)v4 + 5);
  v24[6] = v30;
  v24[3] = v28;
  v24[4] = v29;
  v31 = *(_OWORD *)v4;
  v81[0] = v4;
  v32 = *((_OWORD *)v4 + 2);
  v24[1] = *((_OWORD *)v4 + 1);
  v24[2] = v32;
  *v24 = v31;
  *(_OWORD *)(v6 + 120) = v85;
  *(_BYTE *)(v6 + 136) = 1;
  *(_QWORD *)(v6 + 152) = 0;
  *(_QWORD *)(v6 + 160) = 0;
  *(_QWORD *)(v6 + 144) = 0x7000000070;
  *(_DWORD *)(v6 + 164) = 11;
  v33 = (_OWORD *)WTF::fastMalloc((WTF *)0xB0);
  *(_DWORD *)(v6 + 160) = 11;
  *(_QWORD *)(v6 + 152) = v33;
  v34 = *((_OWORD *)v5 + 7);
  v35 = *((_OWORD *)v5 + 8);
  v36 = *((_OWORD *)v5 + 10);
  v33[9] = *((_OWORD *)v5 + 9);
  v33[10] = v36;
  v33[7] = v34;
  v33[8] = v35;
  v37 = *((_OWORD *)v5 + 3);
  v38 = *((_OWORD *)v5 + 4);
  v39 = *((_OWORD *)v5 + 6);
  v33[5] = *((_OWORD *)v5 + 5);
  v33[6] = v39;
  v33[3] = v37;
  v33[4] = v38;
  v40 = *(_OWORD *)v5;
  v41 = *((_OWORD *)v5 + 2);
  v33[1] = *((_OWORD *)v5 + 1);
  v33[2] = v41;
  *v33 = v40;
  *(_OWORD *)(v6 + 168) = v85;
  *(_BYTE *)(v6 + 184) = 1;
  v173 = 0x403E000000000000;
  v174 = 1;
  v175 = v6;
  v176 = 0x400000004;
  v177 = 0x11040000000000FFLL;
  v180 = 0;
  v178 = 0;
  v179 = 0;
  v181 = 2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v182 = v87;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v183 = v87;
  v184 = 0;
  v87 = 0x87000000F00;
  v89 = 1;
  v88 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  v85 = xmmword_1969F9680;
  *(_OWORD *)v88 = xmmword_1969F9680;
  v90 = 1;
  v84 = xmmword_1969F9690;
  v91 = xmmword_1969F9690;
  v92 = 0;
  v93 = 0x43800000780;
  v95 = 1;
  v94 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_OWORD *)v94 = v85;
  v96 = 1;
  v97 = v84;
  v98 = 1;
  v99 = 0x2D000000500;
  v101 = 1;
  v100 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_OWORD *)v100 = xmmword_1969F96A0;
  v102 = 1;
  v103 = v84;
  v104 = 0;
  v105 = 0x21C000003C0;
  v107 = 1;
  v106 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_OWORD *)v106 = xmmword_1969F96B0;
  v108 = 1;
  v109 = v84;
  v110 = 0;
  v111 = 0x1E000000280;
  v113 = 1;
  v112 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_OWORD *)v112 = v85;
  v114 = 1;
  v115 = v84;
  v116 = 0;
  v117 = 0x12000000160;
  v119 = 1;
  v118 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_OWORD *)v118 = v85;
  v120 = 1;
  v121 = 0x3FF0000000000000;
  v122 = 0x4010000000000000;
  v123 = 0;
  v124 = 0xF000000140;
  v126 = 1;
  v125 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_OWORD *)v125 = v85;
  v127 = 1;
  v128 = 0x3FF0000000000000;
  v129 = 0x4010000000000000;
  v130 = 0;
  v131 = 0x78000000A0;
  v133 = 1;
  v132 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_OWORD *)v132 = v85;
  v134 = 1;
  v135 = 0x3FF0000000000000;
  v136 = 0x4010000000000000;
  v137[0] = 0;
  result = WTF::fastMalloc((WTF *)0x180);
  v43 = result;
  v44 = 0;
  v45 = 0;
  v46 = 8;
  do
  {
    v47 = v46;
    v48 = (char *)&v87 + v44;
    v49 = v45;
    v50 = (_QWORD *)(v43 + 48 * v45);
    *v50 = *(uint64_t *)((char *)&v87 + v44);
    v51 = *(unsigned int *)((char *)&v90 + v44);
    v50[1] = 0;
    v50[2] = 0;
    v52 = v50 + 1;
    *((_DWORD *)v52 + 3) = v51;
    if ((_DWORD)v51)
    {
      if (v51 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      v53 = (void *)WTF::fastMalloc((WTF *)(16 * v51));
      *(_DWORD *)(v43 + 48 * v49 + 16) = v51;
      *v52 = v53;
      result = (uint64_t)memcpy(v53, *((const void **)v48 + 1), 16 * *((unsigned int *)v48 + 5));
    }
    v54 = v43 + 48 * v49;
    v55 = *(_OWORD *)(v48 + 24);
    *(_BYTE *)(v54 + 40) = v48[40];
    *(_OWORD *)(v54 + 24) = v55;
    v45 = HIDWORD(v47) + 1;
    v46 = v47 | ((unint64_t)(HIDWORD(v47) + 1) << 32);
    v44 += 48;
  }
  while (v44 != 384);
  v56 = WTF::fastMalloc((WTF *)3);
  *(_WORD *)v56 = 513;
  *(_BYTE *)(v56 + 2) = 3;
  v185 = 0x402E000000000000;
  v186 = 2;
  v187 = v43;
  v188 = v47 + 0x100000000;
  v189 = 0x11040000808080FFLL;
  v190 = v56;
  v191 = 0x300000003;
  v192 = 257;
  v193 = 2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v194 = v86;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v195 = v86;
  v196 = 0;
  v197 = 4;
  v198 = xmmword_1969F96C0;
  v199 = 3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v200 = v86;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v201 = v86;
  v202 = 0;
  v203 = 4;
  v204 = xmmword_1969F96D0;
  v205 = 3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v206 = v86;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v207 = v86;
  v208 = 0;
  v209 = 5;
  v210 = xmmword_1969F96E0;
  v211 = 3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v212 = v86;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v213 = v86;
  v214 = 0;
  v215 = 5;
  v216 = xmmword_1969F96F0;
  v217 = 3;
  *((_QWORD *)this + 1) = 0;
  v58 = WTF::fastMalloc((WTF *)0x480);
  *((_DWORD *)this + 2) = 12;
  *(_QWORD *)this = v58;
  v59 = 1;
  v60 = 0x1FFFFFFFFFFFFF70;
  do
  {
    v61 = (_DWORD *)v218[v60];
    if (v61)
      *v61 += 2;
    *(_QWORD *)(v58 + v60 * 8 + 1152) = v61;
    v62 = (_DWORD *)v218[v60 + 1];
    if (v62)
      *v62 += 2;
    *(_QWORD *)(v58 + v60 * 8 + 1160) = v62;
    v63 = v58 + v60 * 8;
    *(_BYTE *)(v63 + 1168) = v218[v60 + 2];
    *(_BYTE *)(v63 + 1176) = 0;
    *(_DWORD *)(v63 + 1240) = -1;
    v64 = LODWORD(v218[v60 + 11]);
    if ((_DWORD)v64 != -1)
    {
      ((void (*)(uint64_t *, uint64_t, _QWORD *))off_1E341BF28[v64])(&v86, v63 + 1176, &v218[v60 + 3]);
      *(_DWORD *)(v63 + 1240) = v64;
    }
    *((_DWORD *)this + 3) = v59++;
    v60 += 12;
  }
  while (v60 * 8);
  v65 = 144;
  do
  {
    v66 = &v138[v65];
    v67 = *(unsigned int *)&v137[v65 * 8];
    if ((_DWORD)v67 != -1)
      ((void (*)(uint64_t *, _QWORD *))off_1E341BEC8[v67])(&v86, v66 - 9);
    *((_DWORD *)v66 - 2) = -1;
    v68 = (WTF::StringImpl *)*(v66 - 11);
    *(v66 - 11) = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 == 2)
        WTF::StringImpl::destroy(v68, v57);
      else
        *(_DWORD *)v68 -= 2;
    }
    v69 = (WTF::StringImpl *)*(v66 - 12);
    *(v66 - 12) = 0;
    if (v69)
    {
      if (*(_DWORD *)v69 == 2)
        WTF::StringImpl::destroy(v69, v57);
      else
        *(_DWORD *)v69 -= 2;
    }
    v65 -= 12;
  }
  while (v65 * 8);
  v70 = v132;
  if (v132)
  {
    v132 = 0;
    v133 = 0;
    WTF::fastFree(v70, v57);
  }
  v71 = v125;
  if (v125)
  {
    v125 = 0;
    v126 = 0;
    WTF::fastFree(v71, v57);
  }
  v72 = v118;
  if (v118)
  {
    v118 = 0;
    v119 = 0;
    WTF::fastFree(v72, v57);
  }
  v73 = v112;
  if (v112)
  {
    v112 = 0;
    v113 = 0;
    WTF::fastFree(v73, v57);
  }
  v74 = v106;
  if (v106)
  {
    v106 = 0;
    v107 = 0;
    WTF::fastFree(v74, v57);
  }
  v75 = v100;
  if (v100)
  {
    v100 = 0;
    v101 = 0;
    WTF::fastFree(v75, v57);
  }
  v76 = v94;
  if (v94)
  {
    v94 = 0;
    v95 = 0;
    WTF::fastFree(v76, v57);
  }
  v77 = v88;
  if (v88)
  {
    v88 = 0;
    v89 = 0;
    WTF::fastFree(v77, v57);
  }
  WTF::fastFree(v5, v57);
  WTF::fastFree(v81[0], v78);
  WTF::fastFree(v82[0], v79);
  return WTF::fastFree(v83[0], v80);
}

uint64_t WebCore::MockRealtimeMediaSourceCenter::setMockCaptureDevicesInterrupted(uint64_t this, void *a2)
{
  int v2;
  char v3;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  WTF ***v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  WTF **v15;
  WTF **v16;
  int v18;
  uint64_t v19;
  char *v20;
  WTF *v21;
  uint64_t v22;
  WTF **v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v46;
  unsigned int v47;
  unint64_t v48;
  double v49;
  double v50;
  double v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned __int8 **v55;
  uint64_t v56;
  unsigned __int8 *v57;
  unsigned __int8 **v58;
  uint64_t v59;
  unsigned __int8 *v60;
  uint64_t v61;
  WTF *v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  int v66;
  WTF *v67;
  uint64_t v68;
  char v69;
  WTF **v70;

  v2 = (int)a2;
  v3 = this;
  if ((byte_1ECE840E6 & 1) == 0)
  {
    *(_QWORD *)&dword_1ECE84150 = 0;
    qword_1ECE84148 = 0;
    *(_QWORD *)byte_1ECE84158 = 0;
    byte_1ECE840E6 = 1;
  }
  if (__ldaxr(byte_1ECE84158))
  {
    __clrex();
  }
  else if (!__stxr(1u, byte_1ECE84158))
  {
    goto LABEL_7;
  }
  this = MEMORY[0x19AEA534C](byte_1ECE84158);
LABEL_7:
  v68 = 0;
  v5 = qword_1ECE84148;
  if (!qword_1ECE84148)
  {
    v7 = 0;
    v11 = 0;
LABEL_18:
    v12 = 0;
    dword_1ECE84150 = 0;
    goto LABEL_119;
  }
  v6 = *(unsigned int *)(qword_1ECE84148 - 12);
  if (!(_DWORD)v6)
  {
    v7 = 0;
    v11 = 0;
    goto LABEL_23;
  }
  if (v6 >> 29)
  {
    __break(0xC471u);
    return this;
  }
  v7 = (WTF *)WTF::fastMalloc((WTF *)(8 * v6));
  LODWORD(v68) = v6;
  v67 = v7;
  if (!qword_1ECE84148 || !*(_DWORD *)(qword_1ECE84148 - 12))
  {
    v13 = 0;
LABEL_20:
    v67 = 0;
    LODWORD(v68) = 0;
    WTF::fastFree(v7, a2);
    v7 = 0;
LABEL_21:
    v11 = 0;
    goto LABEL_54;
  }
  v8 = *(unsigned int *)(qword_1ECE84148 - 4);
  if ((_DWORD)v8)
  {
    v9 = 16 * v8;
    v10 = (WTF ***)qword_1ECE84148;
    while ((unint64_t)*v10 + 1 <= 1)
    {
      v10 += 2;
      v9 -= 16;
      if (!v9)
        goto LABEL_50;
    }
  }
  else
  {
    v10 = (WTF ***)qword_1ECE84148;
  }
  v14 = qword_1ECE84148 + 16 * v8;
  if ((WTF ***)v14 == v10)
  {
LABEL_50:
    v11 = 0;
    v13 = 0;
    goto LABEL_51;
  }
  v13 = 0;
  v15 = *v10;
LABEL_27:
  v16 = v10[1];
  if (__ldaxr((unsigned __int8 *)v16))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v16))
  {
    goto LABEL_31;
  }
  MEMORY[0x19AEA534C](v16);
LABEL_31:
  if (v16[3])
    v16[1] = (WTF *)((char *)v16[1] + 1);
  else
    v15 = 0;
  v18 = __ldxr((unsigned __int8 *)v16);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v16))
      goto LABEL_39;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v16);
LABEL_39:
  if (v15)
  {
    v70 = v15;
    LODWORD(v19) = HIDWORD(v68);
    if (HIDWORD(v68) == (_DWORD)v68)
    {
      v20 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v67, HIDWORD(v68) + 1, (unint64_t)&v70);
      v19 = HIDWORD(v68);
      v21 = v67;
      v22 = *(_QWORD *)v20;
      *(_QWORD *)v20 = 0;
      *((_QWORD *)v21 + v19) = v22;
    }
    else
    {
      v70 = 0;
      *((_QWORD *)v67 + HIDWORD(v68)) = v15;
    }
    HIDWORD(v68) = v19 + 1;
    v23 = v70;
    v70 = 0;
    if (v23)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeVideoCaptureSource,(WTF::DestructionThread)2>((unsigned __int8 *)v23[38]);
  }
  else
  {
    v13 = 1;
  }
  while (1)
  {
    v10 += 2;
    if (v10 == (WTF ***)v14)
      break;
    v15 = *v10;
    if ((unint64_t)*v10 + 1 > 1)
    {
      if (v10 != (WTF ***)v14)
        goto LABEL_27;
      break;
    }
  }
  LODWORD(v6) = v68;
  v11 = HIDWORD(v68);
  v7 = v67;
LABEL_51:
  if (v6 <= v11)
    goto LABEL_54;
  if (!v11)
  {
    if (!v7)
      goto LABEL_21;
    goto LABEL_20;
  }
  v7 = (WTF *)WTF::fastRealloc(v7, (void *)(8 * v11));
LABEL_54:
  v5 = qword_1ECE84148;
  if (!v13)
    goto LABEL_115;
  if (!qword_1ECE84148)
    goto LABEL_18;
  v24 = *(_DWORD *)(qword_1ECE84148 - 4);
  if (!v24)
  {
LABEL_23:
    dword_1ECE84150 = 0;
    goto LABEL_116;
  }
  v65 = v3;
  v66 = v2;
  v25 = 0;
  v26 = v24 - 1;
  do
  {
    v27 = v26;
    v28 = (_QWORD *)(v5 + 16 * v26);
    if ((unint64_t)(*v28 + 1) < 2)
      goto LABEL_83;
    v29 = v5 + 16 * v26;
    v32 = *(unsigned __int8 **)(v29 + 8);
    v30 = (uint64_t *)(v29 + 8);
    v31 = v32;
    if (__ldaxr(v32))
    {
      __clrex();
    }
    else if (!__stxr(1u, v31))
    {
      goto LABEL_63;
    }
    MEMORY[0x19AEA534C](v31);
LABEL_63:
    v34 = *((_QWORD *)v31 + 3);
    v35 = __ldxr(v31);
    if (v35 == 1)
    {
      if (!__stlxr(0, v31))
      {
        if (v34)
          goto LABEL_83;
        goto LABEL_69;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v31);
    if (v34)
      goto LABEL_83;
LABEL_69:
    *v28 = -1;
    v36 = *v30;
    *v30 = 0;
    if (!v36)
      goto LABEL_82;
    if (__ldaxr((unsigned __int8 *)v36))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v36))
    {
      goto LABEL_74;
    }
    MEMORY[0x19AEA534C](v36);
LABEL_74:
    v38 = *(_QWORD *)(v36 + 16) - 1;
    *(_QWORD *)(v36 + 16) = v38;
    if (v38)
    {
      v41 = __ldxr((unsigned __int8 *)v36);
      if (v41 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v36))
          goto LABEL_82;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v36);
      goto LABEL_82;
    }
    v39 = *(_QWORD *)(v36 + 8);
    v40 = __ldxr((unsigned __int8 *)v36);
    if (v40 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v36))
      {
        if (!v39)
          goto LABEL_81;
        goto LABEL_82;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v36);
    if (!v39)
LABEL_81:
      WTF::fastFree((WTF *)v36, a2);
LABEL_82:
    ++v25;
LABEL_83:
    --v26;
  }
  while (v27);
  v5 = qword_1ECE84148;
  if (v25)
  {
    *(_DWORD *)(qword_1ECE84148 - 16) += v25;
    v3 = v65;
    v2 = v66;
    if (qword_1ECE84148)
      v42 = *(_DWORD *)(qword_1ECE84148 - 12);
    else
      v42 = 0;
    *(_DWORD *)(qword_1ECE84148 - 12) = v42 - v25;
    v5 = qword_1ECE84148;
  }
  else
  {
    v3 = v65;
    v2 = v66;
  }
  if (!v5)
    goto LABEL_18;
  v43 = *(_DWORD *)(v5 - 4);
  v44 = *(unsigned int *)(v5 - 12);
  if (v43 < 9 || 6 * (int)v44 >= v43)
    goto LABEL_23;
  v46 = (v44 - 1) | ((v44 - 1) >> 1) | ((((_DWORD)v44 - 1) | ((v44 - 1) >> 1)) >> 2);
  v47 = v46 | (v46 >> 4) | ((v46 | (v46 >> 4)) >> 8);
  v48 = (v47 | HIWORD(v47)) + 1;
  if (v48 > 0x400)
  {
    if (v48 <= 2 * v44)
    {
LABEL_105:
      LODWORD(v48) = 2 * v48;
      if (v48 <= 0x400)
        goto LABEL_106;
    }
    v49 = (double)v44;
    v50 = (double)v48;
    v51 = 0.416666667;
  }
  else
  {
    if (3 * v48 <= 4 * v44)
      goto LABEL_105;
LABEL_106:
    v49 = (double)v44;
    v50 = (double)v48;
    v51 = 0.604166667;
  }
  if (v50 * v51 <= v49)
    LODWORD(v48) = 2 * v48;
  if (v48 <= 8)
    v52 = 8;
  else
    v52 = v48;
  WTF::HashTable<WebCore::MockRealtimeVideoSource const*,WTF::KeyValuePair<WebCore::MockRealtimeVideoSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MockRealtimeVideoSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::MockRealtimeVideoSource const*>,WTF::HashMap<WebCore::MockRealtimeVideoSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::MockRealtimeVideoSource const*>,WTF::HashTraits<WebCore::MockRealtimeVideoSource const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MockRealtimeVideoSource const*>>::rehash(v52);
  v5 = qword_1ECE84148;
LABEL_115:
  dword_1ECE84150 = 0;
  if (!v5)
  {
    v12 = 0;
    goto LABEL_119;
  }
LABEL_116:
  v12 = *(_DWORD *)(v5 - 12);
  v53 = 0x7FFFFFFF;
  if (v12 < 0x7FFFFFFF)
LABEL_119:
    v53 = v12;
  dword_1ECE84154 = 2 * v53;
  v54 = __ldxr(byte_1ECE84158);
  if (v54 == 1)
  {
    if (!__stlxr(0, byte_1ECE84158))
    {
      if (!v11)
        goto LABEL_140;
      goto LABEL_126;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)byte_1ECE84158);
  if (!v11)
    goto LABEL_140;
LABEL_126:
  if ((v3 & 1) != 0)
  {
    v55 = (unsigned __int8 **)v7;
    v56 = v11;
    do
    {
      v57 = *v55;
      if ((*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)*v55 + 64))(*v55))
      {
        WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(v57 + 1720));
        WebCore::RealtimeMediaSource::notifyMutedChange(v57, 1);
      }
      ++v55;
      --v56;
    }
    while (v56);
  }
  else
  {
    v58 = (unsigned __int8 **)v7;
    v59 = v11;
    do
    {
      v60 = *v58;
      if ((*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)*v58 + 64))(*v58))
      {
        WTF::RunLoop::TimerBase::start();
        WebCore::RealtimeMediaSource::notifyMutedChange(v60, 0);
      }
      ++v58;
      --v59;
    }
    while (v59);
  }
  v61 = 8 * v11;
  v62 = v7;
  do
  {
    v63 = *(_QWORD *)v62;
    *(_QWORD *)v62 = 0;
    if (v63)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeVideoCaptureSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v63 + 304));
    v62 = (WTF *)((char *)v62 + 8);
    v61 -= 8;
  }
  while (v61);
LABEL_140:
  if (v7)
    WTF::fastFree(v7, a2);
  {
    WebCore::CoreAudioSharedUnit::CoreAudioSharedUnit((WebCore::CoreAudioSharedUnit *)&WebCore::MockAudioSharedUnit::singleton(void)::unit);
  }
  v64 = atomic_load(&WebCore::MockAudioSharedUnit::singleton(void)::onceFlag);
  if (v64 != -1)
  {
    v67 = (WTF *)&v69;
    v70 = &v67;
    std::__call_once(&WebCore::MockAudioSharedUnit::singleton(void)::onceFlag, &v70, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::MockAudioSharedUnit::singleton(void)::$_0 &&>>);
  }
  if (v2)
    return WebCore::BaseAudioSharedUnit::suspend((WebCore::BaseAudioSharedUnit *)&WebCore::MockAudioSharedUnit::singleton(void)::unit);
  else
    return WebCore::BaseAudioSharedUnit::resume((WebCore::BaseAudioSharedUnit *)&WebCore::MockAudioSharedUnit::singleton(void)::unit);
}

unsigned int *WebCore::MockRealtimeMediaSourceCenter::triggerMockCaptureConfigurationChange(unsigned int *this, WTF::StringImpl *a2, int a3)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  const WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  unsigned int v35;
  unsigned int v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  int v45;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a2)
  {
    this = (unsigned int *)(**(uint64_t (***)(unsigned int *))this)(this);
    v5 = this[3];
    v42 = 0;
    LODWORD(v43) = 0;
    HIDWORD(v43) = v5;
    if ((_DWORD)v5)
    {
      if (v5 >= 0x6666667)
      {
        __break(0xC471u);
        goto LABEL_85;
      }
      v6 = this;
      v7 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(40 * v5));
      v8 = v7;
      LODWORD(v43) = 40 * (int)v5 / 0x28u;
      v42 = v7;
      v9 = v6[3];
      if (v9)
      {
        v10 = *(_QWORD *)v6;
        v11 = *(_QWORD *)v6 + 40 * v9;
        v12 = v7;
        do
        {
          v13 = *(_DWORD **)v10;
          if (*(_QWORD *)v10)
            *v13 += 2;
          *(_QWORD *)v12 = v13;
          *((_BYTE *)v12 + 8) = *(_BYTE *)(v10 + 8);
          v14 = *(_DWORD **)(v10 + 16);
          if (v14)
            *v14 += 2;
          *((_QWORD *)v12 + 2) = v14;
          v15 = *(_DWORD **)(v10 + 24);
          if (v15)
            *v15 += 2;
          *((_QWORD *)v12 + 3) = v15;
          *((_DWORD *)v12 + 8) = *(_DWORD *)(v10 + 32);
          v10 += 40;
          v12 = (WTF::StringImpl *)((char *)v12 + 40);
        }
        while (v10 != v11);
      }
      if (v5 >= 2)
      {
        WebCore::s_shouldIncreaseBufferSize = 1;
        {
          WebCore::CoreAudioSharedUnit::CoreAudioSharedUnit((WebCore::CoreAudioSharedUnit *)&WebCore::MockAudioSharedUnit::singleton(void)::unit);
        }
        v16 = atomic_load(&WebCore::MockAudioSharedUnit::singleton(void)::onceFlag);
        if (v16 != -1)
        {
          v37 = (WTF::StringImpl *)&v40;
          v41 = (WTF::StringImpl *)&v37;
          std::__call_once(&WebCore::MockAudioSharedUnit::singleton(void)::onceFlag, &v41, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::MockAudioSharedUnit::singleton(void)::$_0 &&>>);
        }
        WebCore::BaseAudioSharedUnit::handleNewCurrentMicrophoneDevice((uint64_t)&WebCore::MockAudioSharedUnit::singleton(void)::unit, (uint64_t)v8 + 40);
      }
    }
    this = WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v42, v4);
  }
  if (a3)
  {
    {
      WebCore::MockRealtimeDisplaySourceFactory::singleton(void)::factory = (uint64_t)&off_1E341C0F8;
      qword_1EE2F9110 = 0;
      return this;
    }
    v17 = qword_1EE2F9110;
    if (qword_1EE2F9110)
    {
      do
        v18 = __ldaxr((unsigned int *)v17);
      while (__stlxr(v18 + 1, (unsigned int *)v17));
      v19 = *(_QWORD *)(v17 + 8);
      if (!v19)
        goto LABEL_68;
      v20 = *(WTF::StringImpl **)(*(_QWORD *)(v19 + 40) + 176);
      if (v20)
      {
        *(_DWORD *)v20 += 2;
        WTF::StringImpl::startsWith();
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v21 = v37;
      v41 = v37;
      this = (unsigned int *)WebCore::MockRealtimeMediaSourceCenter::mockDeviceWithPersistentID((uint64_t)&v41, v22, (uint64_t)&v42);
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          this = (unsigned int *)WTF::StringImpl::destroy(v21, a2);
        else
          *(_DWORD *)v21 -= 2;
      }
      if (!v46)
        goto LABEL_65;
      this = (unsigned int *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v19 + 40) + 64))(*(_QWORD *)(v19 + 40));
      if (v46)
      {
        v24 = (int)this;
        v25 = *(_QWORD *)(*(_QWORD *)(v19 + 40) + 72);
        v26 = v42;
        if (v42)
          *(_DWORD *)v42 += 2;
        v40 = v26;
        v27 = v43;
        if (v43)
        {
          if ((*((_BYTE *)v43 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v43 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase(v43, v23);
            v27 = v37;
          }
        }
        v39 = v27;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v37 = v41;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v38 = v41;
        v28 = WTF::fastMalloc((WTF *)0x9D8);
        WebCore::MockRealtimeVideoSourceMac::MockRealtimeVideoSourceMac(v28, &v40, &v39, (uint64_t *)&v37, v25);
        v29 = *(_QWORD *)(v19 + 40);
        *(_QWORD *)(v19 + 40) = v28;
        if (v29)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeVideoCaptureSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v29 + 304));
        v30 = v38;
        v38 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, a2);
          else
            *(_DWORD *)v30 -= 2;
        }
        v31 = v37;
        v37 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, a2);
          else
            *(_DWORD *)v31 -= 2;
        }
        v32 = v39;
        v39 = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, a2);
          else
            *(_DWORD *)v32 -= 2;
        }
        this = (unsigned int *)v40;
        v40 = 0;
        if (this)
        {
          if (*this == 2)
          {
            this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
            if (!v24)
              goto LABEL_53;
            goto LABEL_52;
          }
          *this -= 2;
        }
        if (!v24)
        {
LABEL_53:
          v33 = *(_QWORD *)(v19 + 8);
          if (v33)
          {
            this = *(unsigned int **)(v33 + 8);
            if (this)
              this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 32))(this);
          }
          if (v46)
          {
            if (v45 != -1)
              ((void (*)(WTF::StringImpl **, uint64_t *))off_1E341BEC8[v45])(&v37, &v44);
            v45 = -1;
            v34 = v43;
            v43 = 0;
            if (v34)
            {
              if (*(_DWORD *)v34 == 2)
                WTF::StringImpl::destroy(v34, a2);
              else
                *(_DWORD *)v34 -= 2;
            }
            this = (unsigned int *)v42;
            v42 = 0;
            if (this)
            {
              if (*this == 2)
              {
                this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
                if (!v20)
                  goto LABEL_68;
LABEL_66:
                if (*(_DWORD *)v20 == 2)
                  this = (unsigned int *)WTF::StringImpl::destroy(v20, a2);
                else
                  *(_DWORD *)v20 -= 2;
                do
                {
LABEL_68:
                  v35 = __ldaxr((unsigned int *)v17);
                  v36 = v35 - 1;
                }
                while (__stlxr(v36, (unsigned int *)v17));
                if (!v36)
                {
                  atomic_store(1u, (unsigned int *)v17);
                  return (unsigned int *)WTF::fastFree((WTF *)v17, a2);
                }
                return this;
              }
              *this -= 2;
            }
          }
LABEL_65:
          if (!v20)
            goto LABEL_68;
          goto LABEL_66;
        }
LABEL_52:
        this = (unsigned int *)WebCore::RealtimeMediaSource::start(*(_BYTE **)(v19 + 40));
        goto LABEL_53;
      }
LABEL_85:
      __break(1u);
    }
  }
  return this;
}

void sub_1962CA0B8(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebCore::MockRealtimeMediaSourceCenter::microphoneDevices(WebCore::MockRealtimeMediaSourceCenter *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  unsigned int v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  int v24;
  int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  _BYTE v28[8];

  if ((_MergedGlobals_241 & 1) == 0)
  {
    v21 = 0;
    v22 = 0;
    if (byte_1ECE840E4 == 1)
    {
      v2 = (WTF::StringImpl *)qword_1ECE840F8;
      v3 = dword_1ECE840F0;
      if (dword_1ECE840F0)
        goto LABEL_4;
    }
    else
    {
      WebCore::defaultDevices((WebCore *)&v23);
      v2 = v23;
      qword_1ECE840F8 = (uint64_t)v23;
      v3 = v25;
      dword_1ECE840E8 = v24;
      dword_1ECE840F0 = v25;
      byte_1ECE840E4 = 1;
      if (v25)
      {
LABEL_4:
        v4 = 96 * v3;
        do
        {
          if (!*((_DWORD *)v2 + 22))
          {
            WebCore::MockMediaDevice::captureDevice((uint64_t)&v23, (uint64_t)v2);
            v28[0] = 1;
            v28[2] = 1;
            if (HIDWORD(v22) == (_DWORD)v22)
            {
              v5 = WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v21, HIDWORD(v22) + 1, (unint64_t)&v23);
              v6 = v21 + 40 * HIDWORD(v22);
              v7 = *(_QWORD *)v5;
              *(_QWORD *)v5 = 0;
              *(_QWORD *)v6 = v7;
              *(_BYTE *)(v6 + 8) = v5[8];
              v8 = *((_QWORD *)v5 + 2);
              *((_QWORD *)v5 + 2) = 0;
              *(_QWORD *)(v6 + 16) = v8;
              v9 = *((_QWORD *)v5 + 3);
              *((_QWORD *)v5 + 3) = 0;
              *(_QWORD *)(v6 + 24) = v9;
              v10 = (_DWORD *)(v6 + 32);
              v11 = v5 + 32;
            }
            else
            {
              v12 = v21 + 40 * HIDWORD(v22);
              v13 = v23;
              v23 = 0;
              *(_QWORD *)v12 = v13;
              *(_BYTE *)(v12 + 8) = v24;
              v14 = v26;
              v26 = 0;
              *(_QWORD *)(v12 + 16) = v14;
              v15 = v27;
              v27 = 0;
              *(_QWORD *)(v12 + 24) = v15;
              v10 = (_DWORD *)(v12 + 32);
              v11 = v28;
            }
            *v10 = *v11;
            ++HIDWORD(v22);
            v16 = v27;
            v27 = 0;
            if (v16)
            {
              if (*(_DWORD *)v16 == 2)
                WTF::StringImpl::destroy(v16, a2);
              else
                *(_DWORD *)v16 -= 2;
            }
            v17 = v26;
            v26 = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 2)
                WTF::StringImpl::destroy(v17, a2);
              else
                *(_DWORD *)v17 -= 2;
            }
            v18 = v23;
            v23 = 0;
            if (v18)
            {
              if (*(_DWORD *)v18 == 2)
                WTF::StringImpl::destroy(v18, a2);
              else
                *(_DWORD *)v18 -= 2;
            }
          }
          v2 = (WTF::StringImpl *)((char *)v2 + 96);
          v4 -= 96;
        }
        while (v4);
        v19 = v21;
        v20 = v22;
        goto LABEL_25;
      }
    }
    v19 = 0;
    v20 = 0;
LABEL_25:
    v21 = 0;
    v22 = 0;
    qword_1ECE84108 = v19;
    qword_1ECE84110 = v20;
    WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v21, a2);
    _MergedGlobals_241 = 1;
  }
}

void WebCore::MockRealtimeMediaSourceCenter::speakerDevices(WebCore::MockRealtimeMediaSourceCenter *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  unsigned int v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  int v24;
  int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  _BYTE v28[8];

  if ((byte_1ECE840E1 & 1) == 0)
  {
    v21 = 0;
    v22 = 0;
    if (byte_1ECE840E4 == 1)
    {
      v2 = (WTF::StringImpl *)qword_1ECE840F8;
      v3 = dword_1ECE840F0;
      if (dword_1ECE840F0)
        goto LABEL_4;
    }
    else
    {
      WebCore::defaultDevices((WebCore *)&v23);
      v2 = v23;
      qword_1ECE840F8 = (uint64_t)v23;
      v3 = v25;
      dword_1ECE840E8 = v24;
      dword_1ECE840F0 = v25;
      byte_1ECE840E4 = 1;
      if (v25)
      {
LABEL_4:
        v4 = 96 * v3;
        do
        {
          if (*((_DWORD *)v2 + 22) == 1)
          {
            WebCore::MockMediaDevice::captureDevice((uint64_t)&v23, (uint64_t)v2);
            v28[0] = 1;
            v28[2] = 1;
            if (HIDWORD(v22) == (_DWORD)v22)
            {
              v5 = WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v21, HIDWORD(v22) + 1, (unint64_t)&v23);
              v6 = v21 + 40 * HIDWORD(v22);
              v7 = *(_QWORD *)v5;
              *(_QWORD *)v5 = 0;
              *(_QWORD *)v6 = v7;
              *(_BYTE *)(v6 + 8) = v5[8];
              v8 = *((_QWORD *)v5 + 2);
              *((_QWORD *)v5 + 2) = 0;
              *(_QWORD *)(v6 + 16) = v8;
              v9 = *((_QWORD *)v5 + 3);
              *((_QWORD *)v5 + 3) = 0;
              *(_QWORD *)(v6 + 24) = v9;
              v10 = (_DWORD *)(v6 + 32);
              v11 = v5 + 32;
            }
            else
            {
              v12 = v21 + 40 * HIDWORD(v22);
              v13 = v23;
              v23 = 0;
              *(_QWORD *)v12 = v13;
              *(_BYTE *)(v12 + 8) = v24;
              v14 = v26;
              v26 = 0;
              *(_QWORD *)(v12 + 16) = v14;
              v15 = v27;
              v27 = 0;
              *(_QWORD *)(v12 + 24) = v15;
              v10 = (_DWORD *)(v12 + 32);
              v11 = v28;
            }
            *v10 = *v11;
            ++HIDWORD(v22);
            v16 = v27;
            v27 = 0;
            if (v16)
            {
              if (*(_DWORD *)v16 == 2)
                WTF::StringImpl::destroy(v16, a2);
              else
                *(_DWORD *)v16 -= 2;
            }
            v17 = v26;
            v26 = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 2)
                WTF::StringImpl::destroy(v17, a2);
              else
                *(_DWORD *)v17 -= 2;
            }
            v18 = v23;
            v23 = 0;
            if (v18)
            {
              if (*(_DWORD *)v18 == 2)
                WTF::StringImpl::destroy(v18, a2);
              else
                *(_DWORD *)v18 -= 2;
            }
          }
          v2 = (WTF::StringImpl *)((char *)v2 + 96);
          v4 -= 96;
        }
        while (v4);
        v19 = v21;
        v20 = v22;
        goto LABEL_25;
      }
    }
    v19 = 0;
    v20 = 0;
LABEL_25:
    v21 = 0;
    v22 = 0;
    qword_1ECE84118 = v19;
    *(_QWORD *)&dword_1ECE84120 = v20;
    WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v21, a2);
    byte_1ECE840E1 = 1;
  }
}

void WebCore::MockRealtimeMediaSourceCenter::videoDevices(WebCore::MockRealtimeMediaSourceCenter *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  unsigned int v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  int v24;
  int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  _BYTE v28[8];

  if ((byte_1ECE840E2 & 1) == 0)
  {
    v21 = 0;
    v22 = 0;
    if (byte_1ECE840E4 == 1)
    {
      v2 = (WTF::StringImpl *)qword_1ECE840F8;
      v3 = dword_1ECE840F0;
      if (dword_1ECE840F0)
        goto LABEL_4;
    }
    else
    {
      WebCore::defaultDevices((WebCore *)&v23);
      v2 = v23;
      qword_1ECE840F8 = (uint64_t)v23;
      v3 = v25;
      dword_1ECE840E8 = v24;
      dword_1ECE840F0 = v25;
      byte_1ECE840E4 = 1;
      if (v25)
      {
LABEL_4:
        v4 = 96 * v3;
        do
        {
          if (*((_DWORD *)v2 + 22) == 2)
          {
            WebCore::MockMediaDevice::captureDevice((uint64_t)&v23, (uint64_t)v2);
            v28[0] = 1;
            v28[2] = 1;
            if (HIDWORD(v22) == (_DWORD)v22)
            {
              v5 = WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v21, HIDWORD(v22) + 1, (unint64_t)&v23);
              v6 = v21 + 40 * HIDWORD(v22);
              v7 = *(_QWORD *)v5;
              *(_QWORD *)v5 = 0;
              *(_QWORD *)v6 = v7;
              *(_BYTE *)(v6 + 8) = v5[8];
              v8 = *((_QWORD *)v5 + 2);
              *((_QWORD *)v5 + 2) = 0;
              *(_QWORD *)(v6 + 16) = v8;
              v9 = *((_QWORD *)v5 + 3);
              *((_QWORD *)v5 + 3) = 0;
              *(_QWORD *)(v6 + 24) = v9;
              v10 = (_DWORD *)(v6 + 32);
              v11 = v5 + 32;
            }
            else
            {
              v12 = v21 + 40 * HIDWORD(v22);
              v13 = v23;
              v23 = 0;
              *(_QWORD *)v12 = v13;
              *(_BYTE *)(v12 + 8) = v24;
              v14 = v26;
              v26 = 0;
              *(_QWORD *)(v12 + 16) = v14;
              v15 = v27;
              v27 = 0;
              *(_QWORD *)(v12 + 24) = v15;
              v10 = (_DWORD *)(v12 + 32);
              v11 = v28;
            }
            *v10 = *v11;
            ++HIDWORD(v22);
            v16 = v27;
            v27 = 0;
            if (v16)
            {
              if (*(_DWORD *)v16 == 2)
                WTF::StringImpl::destroy(v16, a2);
              else
                *(_DWORD *)v16 -= 2;
            }
            v17 = v26;
            v26 = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 2)
                WTF::StringImpl::destroy(v17, a2);
              else
                *(_DWORD *)v17 -= 2;
            }
            v18 = v23;
            v23 = 0;
            if (v18)
            {
              if (*(_DWORD *)v18 == 2)
                WTF::StringImpl::destroy(v18, a2);
              else
                *(_DWORD *)v18 -= 2;
            }
          }
          v2 = (WTF::StringImpl *)((char *)v2 + 96);
          v4 -= 96;
        }
        while (v4);
        v19 = v21;
        v20 = v22;
        goto LABEL_25;
      }
    }
    v19 = 0;
    v20 = 0;
LABEL_25:
    v21 = 0;
    v22 = 0;
    qword_1ECE84128 = v19;
    *(_QWORD *)&dword_1ECE84130 = v20;
    WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v21, a2);
    byte_1ECE840E2 = 1;
  }
}

uint64_t *WebCore::MockRealtimeMediaSourceCenter::displayDevices(WebCore::MockRealtimeMediaSourceCenter *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  int v25;
  int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  _BYTE v29[8];

  if ((byte_1ECE840E3 & 1) == 0)
  {
    v22 = 0;
    v23 = 0;
    if (byte_1ECE840E4 == 1)
    {
      v3 = (WTF::StringImpl *)qword_1ECE840F8;
      v4 = dword_1ECE840F0;
      if (dword_1ECE840F0)
        goto LABEL_5;
    }
    else
    {
      WebCore::defaultDevices((WebCore *)&v24);
      v3 = v24;
      qword_1ECE840F8 = (uint64_t)v24;
      v4 = v26;
      dword_1ECE840E8 = v25;
      dword_1ECE840F0 = v26;
      byte_1ECE840E4 = 1;
      if (v26)
      {
LABEL_5:
        v5 = 96 * v4;
        do
        {
          if (*((_DWORD *)v3 + 22) == 3)
          {
            WebCore::MockMediaDevice::captureDevice((uint64_t)&v24, (uint64_t)v3);
            v29[0] = 1;
            v29[2] = 1;
            if (HIDWORD(v23) == (_DWORD)v23)
            {
              v6 = WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v22, HIDWORD(v23) + 1, (unint64_t)&v24);
              v7 = v22 + 40 * HIDWORD(v23);
              v8 = *(_QWORD *)v6;
              *(_QWORD *)v6 = 0;
              *(_QWORD *)v7 = v8;
              *(_BYTE *)(v7 + 8) = v6[8];
              v9 = *((_QWORD *)v6 + 2);
              *((_QWORD *)v6 + 2) = 0;
              *(_QWORD *)(v7 + 16) = v9;
              v10 = *((_QWORD *)v6 + 3);
              *((_QWORD *)v6 + 3) = 0;
              *(_QWORD *)(v7 + 24) = v10;
              v11 = (_DWORD *)(v7 + 32);
              v12 = v6 + 32;
            }
            else
            {
              v13 = v22 + 40 * HIDWORD(v23);
              v14 = v24;
              v24 = 0;
              *(_QWORD *)v13 = v14;
              *(_BYTE *)(v13 + 8) = v25;
              v15 = v27;
              v27 = 0;
              *(_QWORD *)(v13 + 16) = v15;
              v16 = v28;
              v28 = 0;
              *(_QWORD *)(v13 + 24) = v16;
              v11 = (_DWORD *)(v13 + 32);
              v12 = v29;
            }
            *v11 = *v12;
            ++HIDWORD(v23);
            v17 = v28;
            v28 = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 2)
                WTF::StringImpl::destroy(v17, a2);
              else
                *(_DWORD *)v17 -= 2;
            }
            v18 = v27;
            v27 = 0;
            if (v18)
            {
              if (*(_DWORD *)v18 == 2)
                WTF::StringImpl::destroy(v18, a2);
              else
                *(_DWORD *)v18 -= 2;
            }
            v19 = v24;
            v24 = 0;
            if (v19)
            {
              if (*(_DWORD *)v19 == 2)
                WTF::StringImpl::destroy(v19, a2);
              else
                *(_DWORD *)v19 -= 2;
            }
          }
          v3 = (WTF::StringImpl *)((char *)v3 + 96);
          v5 -= 96;
        }
        while (v5);
        v20 = v22;
        v21 = v23;
        goto LABEL_26;
      }
    }
    v20 = 0;
    v21 = 0;
LABEL_26:
    v22 = 0;
    v23 = 0;
    qword_1ECE84138 = v20;
    *(_QWORD *)&dword_1ECE84140 = v21;
    WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v22, a2);
    byte_1ECE840E3 = 1;
  }
  return &qword_1ECE84138;
}

WTF::StringImpl *WebCore::createMockDevice(WebCore *this, const WebCore::MockMediaDevice *a2)
{
  int v3;
  uint64_t *v4;
  _BYTE *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  char *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *result;
  WTF::StringImpl *v27;
  char v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  char v31;
  char v32;

  v3 = *((_DWORD *)this + 22);
  if ((_DWORD)a2)
  {
    if (v3 == 2)
    {
      WebCore::MockRealtimeMediaSourceCenter::videoDevices(this, a2);
      v4 = &qword_1ECE84128;
    }
    else if (v3 == 1)
    {
      WebCore::MockRealtimeMediaSourceCenter::speakerDevices(this, a2);
      v4 = &qword_1ECE84118;
    }
    else if (v3)
    {
      WebCore::MockRealtimeMediaSourceCenter::displayDevices(this, a2);
      v4 = &qword_1ECE84138;
    }
    else
    {
      WebCore::MockRealtimeMediaSourceCenter::microphoneDevices(this, a2);
      v4 = &qword_1ECE84108;
    }
    v5 = &v27;
    WebCore::MockMediaDevice::captureDevice((uint64_t)&v27, (uint64_t)this);
    v31 = 1;
    v32 = 1;
    v6 = *((unsigned int *)v4 + 3);
    if ((_DWORD)v6 == *((_DWORD *)v4 + 2))
    {
      v5 = WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v4, v6 + 1, (unint64_t)&v27);
      LODWORD(v6) = *((_DWORD *)v4 + 3);
    }
    v7 = (WTF::StringImpl *)*v4;
    WTF::VectorMover<false,WebCore::CaptureDevice>::moveOverlapping((WTF::StringImpl *)*v4, (WTF::StringImpl *)(*v4 + 40 * v6), *v4 + 40);
    v9 = *(_QWORD *)v5;
    *(_QWORD *)v5 = 0;
    *(_QWORD *)v7 = v9;
    *((_BYTE *)v7 + 8) = v5[8];
    v10 = *((_QWORD *)v5 + 2);
    *((_QWORD *)v5 + 2) = 0;
    *((_QWORD *)v7 + 2) = v10;
    v11 = *((_QWORD *)v5 + 3);
    *((_QWORD *)v5 + 3) = 0;
    *((_QWORD *)v7 + 3) = v11;
    *((_DWORD *)v7 + 8) = *((_DWORD *)v5 + 8);
  }
  else
  {
    if (v3 == 2)
    {
      WebCore::MockRealtimeMediaSourceCenter::videoDevices(this, a2);
      v4 = &qword_1ECE84128;
    }
    else if (v3 == 1)
    {
      WebCore::MockRealtimeMediaSourceCenter::speakerDevices(this, a2);
      v4 = &qword_1ECE84118;
    }
    else if (v3)
    {
      WebCore::MockRealtimeMediaSourceCenter::displayDevices(this, a2);
      v4 = &qword_1ECE84138;
    }
    else
    {
      WebCore::MockRealtimeMediaSourceCenter::microphoneDevices(this, a2);
      v4 = &qword_1ECE84108;
    }
    WebCore::MockMediaDevice::captureDevice((uint64_t)&v27, (uint64_t)this);
    v31 = 1;
    v32 = 1;
    v12 = *((unsigned int *)v4 + 3);
    if ((_DWORD)v12 == *((_DWORD *)v4 + 2))
    {
      v13 = WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v4, v12 + 1, (unint64_t)&v27);
      v14 = *v4 + 40 * *((unsigned int *)v4 + 3);
      v15 = *(_QWORD *)v13;
      *(_QWORD *)v13 = 0;
      *(_QWORD *)v14 = v15;
      *(_BYTE *)(v14 + 8) = v13[8];
      v16 = *((_QWORD *)v13 + 2);
      *((_QWORD *)v13 + 2) = 0;
      *(_QWORD *)(v14 + 16) = v16;
      v17 = *((_QWORD *)v13 + 3);
      *((_QWORD *)v13 + 3) = 0;
      *(_QWORD *)(v14 + 24) = v17;
      v18 = (_DWORD *)(v14 + 32);
      v19 = v13 + 32;
    }
    else
    {
      v19 = &v31;
      v20 = *v4 + 40 * v12;
      v21 = v27;
      v27 = 0;
      *(_QWORD *)v20 = v21;
      *(_BYTE *)(v20 + 8) = v28;
      v22 = v29;
      v29 = 0;
      *(_QWORD *)(v20 + 16) = v22;
      v23 = v30;
      v30 = 0;
      *(_QWORD *)(v20 + 24) = v23;
      v18 = (_DWORD *)(v20 + 32);
    }
    *v18 = *(_DWORD *)v19;
  }
  ++*((_DWORD *)v4 + 3);
  v24 = v30;
  v30 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v8);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = v29;
  v29 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v8);
    else
      *(_DWORD *)v25 -= 2;
  }
  result = v27;
  v27 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::MockRealtimeMediaSourceCenter::addDevice(WebCore::MockRealtimeMediaSourceCenter *this, const WebCore::MockMediaDevice *a2, const WTF::StringImpl *a3)
{
  BOOL v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  WebCore::MockRealtimeMediaSourceCenter *v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  char v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  char v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _DWORD *v29;
  _DWORD *v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  int i;
  unsigned int v40;
  WTF **v41;
  WTF *v42;
  WTF::StringImpl *v43;
  WTF *v44;
  int v45;
  WTF::StringImpl **v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl **v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  unsigned int v60;
  uint64_t result;
  WTF::StringImpl **v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;

  v4 = *((_DWORD *)this + 22) == 2 && *((_BYTE *)this + 32) == 0;
  v5 = v4;
  if (v4)
  {
    if (byte_1ECE840E4)
    {
      v6 = dword_1ECE840F0;
      v7 = dword_1ECE840E8;
    }
    else
    {
      WebCore::defaultDevices((WebCore *)&v65);
      qword_1ECE840F8 = v65;
      v7 = v66;
      v6 = v67;
      dword_1ECE840E8 = v66;
      dword_1ECE840F0 = v67;
      byte_1ECE840E4 = 1;
    }
    v8 = this;
    if (v6 == v7)
    {
      v8 = (WebCore::MockRealtimeMediaSourceCenter *)WTF::Vector<WebCore::MockMediaDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7 + 1, (unint64_t)this);
      v6 = dword_1ECE840F0;
    }
    v9 = qword_1ECE840F8;
    WTF::VectorMover<false,WebCore::MockMediaDevice>::moveOverlapping((WTF::StringImpl *)qword_1ECE840F8, (WTF::StringImpl *)(qword_1ECE840F8 + 96 * v6), qword_1ECE840F8 + 96);
    v10 = *(_DWORD **)v8;
    if (*(_QWORD *)v8)
      *v10 += 2;
    *(_QWORD *)v9 = v10;
    v11 = (_DWORD *)*((_QWORD *)v8 + 1);
    if (v11)
      *v11 += 2;
    *(_QWORD *)(v9 + 8) = v11;
    v12 = *((_BYTE *)v8 + 16);
    *(_BYTE *)(v9 + 24) = 0;
    *(_BYTE *)(v9 + 16) = v12;
    *(_DWORD *)(v9 + 88) = -1;
    v13 = *((unsigned int *)v8 + 22);
    if ((_DWORD)v13 != -1)
    {
      ((void (*)(uint64_t *))off_1E341BF28[v13])(&v65);
      *(_DWORD *)(v9 + 88) = v13;
    }
  }
  else
  {
    if (byte_1ECE840E4)
    {
      v14 = dword_1ECE840F0;
      v15 = dword_1ECE840E8;
    }
    else
    {
      WebCore::defaultDevices((WebCore *)&v65);
      qword_1ECE840F8 = v65;
      v15 = v66;
      v14 = v67;
      dword_1ECE840E8 = v66;
      dword_1ECE840F0 = v67;
      byte_1ECE840E4 = 1;
    }
    v16 = v14;
    if (v14 == v15)
    {
      v17 = WTF::Vector<WebCore::MockMediaDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v14 + 1, (unint64_t)this);
      v18 = dword_1ECE840F0;
      v19 = qword_1ECE840F8;
      v20 = (_QWORD *)(qword_1ECE840F8 + 96 * dword_1ECE840F0);
      v21 = *(_DWORD **)v17;
      if (*(_QWORD *)v17)
        *v21 += 2;
      *v20 = v21;
      v22 = *(_DWORD **)(v17 + 8);
      if (v22)
        *v22 += 2;
      *(_QWORD *)(v19 + 96 * v18 + 8) = v22;
      v23 = v19 + 96 * v18;
      v24 = *(_BYTE *)(v17 + 16);
      *(_BYTE *)(v23 + 24) = 0;
      v23 += 24;
      *(_BYTE *)(v23 - 8) = v24;
      *(_DWORD *)(v23 + 64) = -1;
      v25 = (_DWORD *)(v23 + 64);
      v26 = *(unsigned int *)(v17 + 88);
      if ((_DWORD)v26 != -1)
      {
LABEL_33:
        ((void (*)(uint64_t *))off_1E341BF28[v26])(&v65);
        *v25 = v26;
      }
    }
    else
    {
      v27 = qword_1ECE840F8;
      v28 = (_QWORD *)(qword_1ECE840F8 + 96 * v14);
      v29 = *(_DWORD **)this;
      if (*(_QWORD *)this)
        *v29 += 2;
      *v28 = v29;
      v30 = (_DWORD *)*((_QWORD *)this + 1);
      if (v30)
        *v30 += 2;
      *(_QWORD *)(v27 + 96 * v16 + 8) = v30;
      v31 = v27 + 96 * v16;
      v32 = *((_BYTE *)this + 16);
      *(_BYTE *)(v31 + 24) = 0;
      v31 += 24;
      *(_BYTE *)(v31 - 8) = v32;
      *(_DWORD *)(v31 + 64) = -1;
      v25 = (_DWORD *)(v31 + 64);
      v26 = *((unsigned int *)this + 22);
      if ((_DWORD)v26 != -1)
        goto LABEL_33;
    }
  }
  v33 = ++dword_1ECE840F0;
  if ((byte_1ECE840E5 & 1) != 0)
  {
    v34 = qword_1ECE84100;
    if (qword_1ECE84100)
      goto LABEL_37;
    goto LABEL_36;
  }
  v64 = 0;
  if (byte_1ECE840E4 == 1)
  {
    v62 = (WTF::StringImpl **)qword_1ECE840F8;
    if (v33)
      goto LABEL_91;
LABEL_97:
    v34 = 0;
    goto LABEL_98;
  }
  WebCore::defaultDevices((WebCore *)&v65);
  v62 = (WTF::StringImpl **)v65;
  qword_1ECE840F8 = v65;
  v33 = v67;
  dword_1ECE840E8 = v66;
  dword_1ECE840F0 = v67;
  byte_1ECE840E4 = 1;
  if (!v67)
    goto LABEL_97;
LABEL_91:
  v63 = 96 * v33;
  do
  {
    WTF::HashMap<WTF::String,WebCore::MockMediaDevice,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::MockMediaDevice>,WTF::HashTableTraits>::add<WebCore::MockMediaDevice&>((uint64_t)&v65, &v64, v62, (uint64_t)v62);
    v62 += 12;
    v63 -= 96;
  }
  while (v63);
  v34 = v64;
LABEL_98:
  qword_1ECE84100 = v34;
  byte_1ECE840E5 = 1;
  if (v34)
    goto LABEL_37;
LABEL_36:
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::MockMediaDevice>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::MockMediaDevice>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::MockMediaDevice,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::MockMediaDevice>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(&qword_1ECE84100, 8u, 0);
  v34 = qword_1ECE84100;
  if (!qword_1ECE84100)
  {
    v35 = 0;
    goto LABEL_38;
  }
LABEL_37:
  v35 = *(_DWORD *)(v34 - 8);
LABEL_38:
  v36 = *(_DWORD *)(*(_QWORD *)this + 16);
  if (v36 < 0x100)
    v37 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)this);
  else
    v37 = v36 >> 8;
  v38 = 0;
  for (i = 1; ; ++i)
  {
    v40 = v37 & v35;
    v41 = (WTF **)(v34 + 104 * (v37 & v35));
    v42 = *v41;
    if (*v41 != (WTF *)-1)
      break;
    v38 = v34 + 104 * v40;
LABEL_47:
    v37 = i + v40;
  }
  if (!v42)
  {
    if (v38)
    {
      *(_QWORD *)(v38 + 96) = 0;
      *(_OWORD *)(v38 + 64) = 0u;
      *(_OWORD *)(v38 + 80) = 0u;
      *(_OWORD *)(v38 + 32) = 0u;
      *(_OWORD *)(v38 + 48) = 0u;
      *(_OWORD *)v38 = 0u;
      *(_OWORD *)(v38 + 16) = 0u;
      *(_DWORD *)(v38 + 32) = 44100;
      --*(_DWORD *)(qword_1ECE84100 - 16);
      v41 = (WTF **)v38;
    }
    v44 = *(WTF **)this;
    if (*(_QWORD *)this)
      *(_DWORD *)v44 += 2;
    *v41 = v44;
    WTF::GenericHashTraits<WebCore::MockMediaDevice>::assignToEmpty<WebCore::MockMediaDevice,WebCore::MockMediaDevice const&>((uint64_t)(v41 + 1), (uint64_t)this);
    if (qword_1ECE84100)
      v45 = *(_DWORD *)(qword_1ECE84100 - 12) + 1;
    else
      v45 = 1;
    *(_DWORD *)(qword_1ECE84100 - 12) = v45;
    if (qword_1ECE84100)
      v57 = *(_DWORD *)(qword_1ECE84100 - 12);
    else
      v57 = 0;
    v58 = (*(_DWORD *)(qword_1ECE84100 - 16) + v57);
    v59 = *(unsigned int *)(qword_1ECE84100 - 4);
    if (v59 > 0x400)
    {
      if (v59 > 2 * v58)
        goto LABEL_80;
    }
    else
    {
      if (3 * v59 > 4 * v58)
        goto LABEL_80;
      if (!(_DWORD)v59)
      {
        v60 = 8;
        goto LABEL_79;
      }
    }
    v60 = (_DWORD)v59 << (6 * *(_DWORD *)(qword_1ECE84100 - 12) >= (2 * v59));
LABEL_79:
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::MockMediaDevice>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::MockMediaDevice>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::MockMediaDevice,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::MockMediaDevice>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(&qword_1ECE84100, v60, (uint64_t)v41);
    goto LABEL_80;
  }
  if (!WTF::equal(v42, *(const WTF::StringImpl **)this, a3))
    goto LABEL_47;
  v46 = (WTF::StringImpl **)(v34 + 104 * v40 + 8);
  v47 = *(WTF::StringImpl **)this;
  if (*(_QWORD *)this)
    *(_DWORD *)v47 += 2;
  v48 = *v46;
  *v46 = v47;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy(v48, v43);
    else
      *(_DWORD *)v48 -= 2;
  }
  v49 = (WTF::StringImpl **)(v34 + 104 * v40 + 16);
  v50 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  if (v50)
    *(_DWORD *)v50 += 2;
  v51 = *v49;
  *v49 = v50;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
      WTF::StringImpl::destroy(v51, v43);
    else
      *(_DWORD *)v51 -= 2;
  }
  v52 = v34 + 104 * v40;
  v55 = *(_DWORD *)(v52 + 96);
  v54 = (_DWORD *)(v52 + 96);
  v53 = v55;
  *((_BYTE *)v54 - 72) = *((_BYTE *)this + 16);
  v56 = *((unsigned int *)this + 22);
  if (v55 == -1)
  {
    if ((_DWORD)v56 == -1)
      goto LABEL_80;
  }
  else if ((_DWORD)v56 == -1)
  {
    ((void (*)(uint64_t *, _DWORD *))off_1E341BEC8[v53])(&v65, v54 - 16);
    *v54 = -1;
    goto LABEL_80;
  }
  v65 = (uint64_t)(v54 - 16);
  ((void (*)(uint64_t *))off_1E341BEE8[v56])(&v65);
LABEL_80:
  WebCore::createMockDevice(this, (const WebCore::MockMediaDevice *)v5);
  {
    WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
  }
  result = WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)&unk_1ECE911E8);
  if ((result & 1) == 0)
    return WTF::RunLoop::TimerBase::start();
  return result;
}

uint64_t WebCore::MockRealtimeMediaSourceCenter::removeDevice(uint64_t this, const WTF::String *a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl **v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int i;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  WebCore::MockRealtimeMediaSourceCenter *v13;
  WTF::StringImpl *v14;
  const WTF::StringImpl *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  int v23;
  WTF::StringImpl *v24;
  const WTF::StringImpl *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  int v39;
  unsigned int v40;
  WTF::StringImpl **v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;

  v3 = (WTF::StringImpl **)this;
  if ((byte_1ECE840E5 & 1) == 0)
  {
    v45 = 0;
    if (byte_1ECE840E4 == 1)
    {
      v42 = (WTF::StringImpl **)qword_1ECE840F8;
      v43 = dword_1ECE840F0;
      if (dword_1ECE840F0)
        goto LABEL_95;
    }
    else
    {
      this = WebCore::defaultDevices((WebCore *)&v46);
      v42 = (WTF::StringImpl **)v46;
      qword_1ECE840F8 = v46;
      v43 = v48;
      dword_1ECE840E8 = v47;
      dword_1ECE840F0 = v48;
      byte_1ECE840E4 = 1;
      if (v48)
      {
LABEL_95:
        v44 = 96 * v43;
        do
        {
          this = (uint64_t)WTF::HashMap<WTF::String,WebCore::MockMediaDevice,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::MockMediaDevice>,WTF::HashTableTraits>::add<WebCore::MockMediaDevice&>((uint64_t)&v46, &v45, v42, (uint64_t)v42);
          v42 += 12;
          v44 -= 96;
        }
        while (v44);
        v4 = v45;
LABEL_102:
        qword_1ECE84100 = v4;
        byte_1ECE840E5 = 1;
        if (!v4)
          return this;
        goto LABEL_3;
      }
    }
    v4 = 0;
    goto LABEL_102;
  }
  v4 = qword_1ECE84100;
  if (!qword_1ECE84100)
    return this;
LABEL_3:
  v5 = *(_DWORD *)(v4 - 8);
  v6 = *((_DWORD *)*v3 + 4);
  if (v6 < 0x100)
    v7 = WTF::StringImpl::hashSlowCase(*v3);
  else
    v7 = v6 >> 8;
  for (i = 0; ; v7 = i + v9)
  {
    v9 = v7 & v5;
    v10 = v4 + 104 * (v7 & v5);
    this = *(_QWORD *)v10;
    if (*(_QWORD *)v10 != -1)
    {
      if (!this)
      {
        v11 = qword_1ECE84100;
        if (!qword_1ECE84100)
          return this;
        v12 = *(_DWORD *)(qword_1ECE84100 - 4);
        v10 = qword_1ECE84100 + 104 * v12;
        goto LABEL_15;
      }
      this = WTF::equal((WTF *)this, *v3, a3);
      if ((this & 1) != 0)
        break;
    }
    ++i;
  }
  v11 = qword_1ECE84100;
  if (!qword_1ECE84100)
    goto LABEL_16;
  v12 = *(_DWORD *)(qword_1ECE84100 - 4);
LABEL_15:
  v11 += 104 * v12;
LABEL_16:
  if (v11 != v10)
  {
    {
      WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
    }
    v13 = (WebCore::MockRealtimeMediaSourceCenter *)WebCore::RealtimeMediaSourceCenter::captureDeviceWillBeRemoved((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center, (const WTF::String *)v3);
    if ((byte_1ECE840E4 & 1) != 0)
    {
      if (dword_1ECE840F0)
        goto LABEL_21;
    }
    else
    {
      v13 = (WebCore::MockRealtimeMediaSourceCenter *)WebCore::defaultDevices((WebCore *)&v46);
      qword_1ECE840F8 = v46;
      dword_1ECE840E8 = v47;
      dword_1ECE840F0 = v48;
      byte_1ECE840E4 = 1;
      if (v48)
      {
LABEL_21:
        v16 = 0;
        v17 = 0;
        while (1)
        {
          v13 = (WebCore::MockRealtimeMediaSourceCenter *)WTF::equal(*(WTF **)(qword_1ECE840F8 + v16), *v3, v15);
          if ((_DWORD)v13)
            break;
          ++v17;
          v16 += 96;
          if (v17 >= dword_1ECE840F0)
            goto LABEL_34;
        }
        v18 = qword_1ECE840F8;
        v19 = qword_1ECE840F8 + v16;
        v20 = *(unsigned int *)(qword_1ECE840F8 + v16 + 88);
        if ((_DWORD)v20 != -1)
          ((void (*)(uint64_t *, unint64_t))off_1E341BEC8[v20])(&v46, v19 + 24);
        *(_DWORD *)(v19 + 88) = -1;
        v21 = *(WTF::StringImpl **)(v19 + 8);
        *(_QWORD *)(v19 + 8) = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, v14);
          else
            *(_DWORD *)v21 -= 2;
        }
        v22 = *(WTF::StringImpl **)v19;
        *(_QWORD *)v19 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v14);
          else
            *(_DWORD *)v22 -= 2;
        }
        v13 = WTF::VectorMover<false,WebCore::MockMediaDevice>::moveOverlapping((WTF::StringImpl *)(v18 + v16 + 96), (WTF::StringImpl *)(qword_1ECE840F8 + 96 * dword_1ECE840F0), v19);
        --dword_1ECE840F0;
      }
    }
LABEL_34:
    v23 = *(_DWORD *)(v10 + 96);
    if (v23 == 2)
    {
      WebCore::MockRealtimeMediaSourceCenter::videoDevices(v13, v14);
      v26 = &qword_1ECE84128;
    }
    else if (v23 == 1)
    {
      WebCore::MockRealtimeMediaSourceCenter::speakerDevices(v13, v14);
      v26 = &qword_1ECE84118;
    }
    else if (v23)
    {
      WebCore::MockRealtimeMediaSourceCenter::displayDevices(v13, v14);
      v26 = &qword_1ECE84138;
    }
    else
    {
      WebCore::MockRealtimeMediaSourceCenter::microphoneDevices(v13, v14);
      v26 = &qword_1ECE84108;
    }
    if (*((_DWORD *)v26 + 3))
    {
      v27 = 0;
      v28 = 0;
      while (!WTF::equal(*(WTF **)(*v26 + v27), *v3, v25))
      {
        ++v28;
        v27 += 40;
        if (v28 >= *((unsigned int *)v26 + 3))
          goto LABEL_56;
      }
      v29 = *v26;
      v30 = (WTF::StringImpl **)(*v26 + v27);
      v31 = v30[3];
      v30[3] = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v24);
        else
          *(_DWORD *)v31 -= 2;
      }
      v32 = v30[2];
      v30[2] = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v24);
        else
          *(_DWORD *)v32 -= 2;
      }
      v33 = *v30;
      *v30 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, v24);
        else
          *(_DWORD *)v33 -= 2;
      }
      WTF::VectorMover<false,WebCore::CaptureDevice>::moveOverlapping((WTF::StringImpl *)(v29 + v27 + 40), (WTF::StringImpl *)(*v26 + 40 * *((unsigned int *)v26 + 3)), (unint64_t)v30);
      --*((_DWORD *)v26 + 3);
    }
LABEL_56:
    v34 = qword_1ECE84100;
    if (!qword_1ECE84100 || (v34 = qword_1ECE84100 + 104 * *(unsigned int *)(qword_1ECE84100 - 4), v34 != v10))
    {
      if (v34 != v10)
      {
        v35 = *(WTF::StringImpl **)v10;
        *(_QWORD *)v10 = -1;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
            WTF::StringImpl::destroy(v35, v24);
          else
            *(_DWORD *)v35 -= 2;
        }
        v36 = *(unsigned int *)(v10 + 96);
        if ((_DWORD)v36 != -1)
          ((void (*)(uint64_t *, uint64_t))off_1E341BEC8[v36])(&v46, v10 + 32);
        *(_DWORD *)(v10 + 96) = -1;
        v37 = *(WTF::StringImpl **)(v10 + 16);
        *(_QWORD *)(v10 + 16) = 0;
        if (v37)
        {
          if (*(_DWORD *)v37 == 2)
            WTF::StringImpl::destroy(v37, v24);
          else
            *(_DWORD *)v37 -= 2;
        }
        v38 = *(WTF::StringImpl **)(v10 + 8);
        *(_QWORD *)(v10 + 8) = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
            WTF::StringImpl::destroy(v38, v24);
          else
            *(_DWORD *)v38 -= 2;
        }
        ++*(_DWORD *)(qword_1ECE84100 - 16);
        if (qword_1ECE84100)
          v39 = *(_DWORD *)(qword_1ECE84100 - 12) - 1;
        else
          v39 = -1;
        *(_DWORD *)(qword_1ECE84100 - 12) = v39;
        if (qword_1ECE84100)
        {
          v40 = *(_DWORD *)(qword_1ECE84100 - 4);
          if (6 * *(_DWORD *)(qword_1ECE84100 - 12) < v40 && v40 >= 9)
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::MockMediaDevice>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::MockMediaDevice>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::MockMediaDevice,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::MockMediaDevice>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(&qword_1ECE84100, v40 >> 1, 0);
        }
      }
    }
    {
      WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
    }
    this = WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)&unk_1ECE911E8);
    if ((this & 1) == 0)
      return WTF::RunLoop::TimerBase::start();
  }
  return this;
}

uint64_t WebCore::MockRealtimeMediaSourceCenter::setDeviceIsEphemeral(uint64_t this, const WTF::String *a2, const WTF::StringImpl *a3)
{
  char v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  char v16;
  uint64_t v17;
  const WebCore::MockMediaDevice *v18;
  const WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl **v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  char v28;
  _BYTE v29[64];
  int v30;
  uint64_t v31;

  v3 = (char)a2;
  v4 = (WTF::StringImpl **)this;
  v31 = *MEMORY[0x1E0C80C00];
  if ((byte_1ECE840E5 & 1) != 0)
  {
    v5 = qword_1ECE84100;
    if (!qword_1ECE84100)
      return this;
    goto LABEL_3;
  }
  v25 = 0;
  if (byte_1ECE840E4 == 1)
  {
    v22 = (WTF::StringImpl **)qword_1ECE840F8;
    v23 = dword_1ECE840F0;
    if (dword_1ECE840F0)
      goto LABEL_36;
LABEL_40:
    v5 = 0;
    goto LABEL_41;
  }
  this = WebCore::defaultDevices((WebCore *)&v26);
  v22 = (WTF::StringImpl **)v26;
  qword_1ECE840F8 = (uint64_t)v26;
  v23 = HIDWORD(v27);
  dword_1ECE840F0 = HIDWORD(v27);
  dword_1ECE840E8 = (int)v27;
  byte_1ECE840E4 = 1;
  if (!HIDWORD(v27))
    goto LABEL_40;
LABEL_36:
  v24 = 96 * v23;
  do
  {
    this = (uint64_t)WTF::HashMap<WTF::String,WebCore::MockMediaDevice,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::MockMediaDevice>,WTF::HashTableTraits>::add<WebCore::MockMediaDevice&>((uint64_t)&v26, &v25, v22, (uint64_t)v22);
    v22 += 12;
    v24 -= 96;
  }
  while (v24);
  v5 = v25;
LABEL_41:
  qword_1ECE84100 = v5;
  byte_1ECE840E5 = 1;
  if (!v5)
    return this;
LABEL_3:
  v6 = *(_DWORD *)(v5 - 8);
  v7 = *((_DWORD *)*v4 + 4);
  if (v7 < 0x100)
    v8 = WTF::StringImpl::hashSlowCase(*v4);
  else
    v8 = v7 >> 8;
  for (i = 0; ; v8 = i + v10)
  {
    v10 = v8 & v6;
    v11 = v5 + 104 * (v8 & v6);
    this = *(_QWORD *)v11;
    if (*(_QWORD *)v11 != -1)
    {
      if (!this)
      {
        v12 = qword_1ECE84100;
        if (!qword_1ECE84100)
          return this;
        v13 = *(_DWORD *)(qword_1ECE84100 - 4);
        v11 = qword_1ECE84100 + 104 * v13;
        goto LABEL_15;
      }
      this = WTF::equal((WTF *)this, *v4, a3);
      if ((this & 1) != 0)
        break;
    }
    ++i;
  }
  v12 = qword_1ECE84100;
  if (!qword_1ECE84100)
    goto LABEL_16;
  v13 = *(_DWORD *)(qword_1ECE84100 - 4);
LABEL_15:
  v12 += 104 * v13;
LABEL_16:
  if (v12 != v11)
  {
    v14 = *(WTF::StringImpl **)(v11 + 8);
    if (v14)
      *(_DWORD *)v14 += 2;
    v26 = v14;
    v15 = *(WTF::StringImpl **)(v11 + 16);
    if (v15)
      *(_DWORD *)v15 += 2;
    v27 = v15;
    v16 = *(_BYTE *)(v11 + 24);
    v28 = v16;
    v29[0] = 0;
    v30 = -1;
    v17 = *(unsigned int *)(v11 + 96);
    if ((_DWORD)v17 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, uint64_t))off_1E341BF28[v17])(&v25, v29, v11 + 32);
      v30 = v17;
      v16 = v28;
    }
    v28 = v16 & 0xFE | v3;
    WebCore::MockRealtimeMediaSourceCenter::removeDevice((uint64_t)v4, a2, a3);
    WebCore::MockRealtimeMediaSourceCenter::addDevice((WebCore::MockRealtimeMediaSourceCenter *)&v26, v18, v19);
    if (v30 != -1)
      ((void (*)(uint64_t *, _BYTE *))off_1E341BEC8[v30])(&v25, v29);
    v30 = -1;
    v21 = v27;
    v27 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
    this = (uint64_t)v26;
    v26 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)this, v20);
      else
        *(_DWORD *)this -= 2;
    }
  }
  return this;
}

uint64_t WebCore::MockRealtimeMediaSourceCenter::captureDeviceWithPersistentID(uint64_t result, int a2, WTF::StringImpl **a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int i;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  WTF::StringImpl **v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  __int128 v23;
  int v24;
  uint64_t v25;

  v5 = result;
  v6 = &InitWebCoreThreadSystemInterface::didInit;
  if ((byte_1ECE840E5 & 1) != 0)
  {
    v7 = qword_1ECE84100;
    if (!qword_1ECE84100)
      goto LABEL_32;
    goto LABEL_3;
  }
  v25 = 0;
  if (byte_1ECE840E4 == 1)
  {
    v17 = (WTF::StringImpl **)qword_1ECE840F8;
    v18 = dword_1ECE840F0;
    if (dword_1ECE840F0)
      goto LABEL_25;
LABEL_30:
    v7 = 0;
    goto LABEL_31;
  }
  while (2)
  {
    result = WebCore::defaultDevices((WebCore *)&v20);
    v17 = (WTF::StringImpl **)v20;
    qword_1ECE840F8 = v20;
    v18 = v22;
    dword_1ECE840E8 = v21;
    dword_1ECE840F0 = v22;
    byte_1ECE840E4 = 1;
    if (!v22)
      goto LABEL_30;
LABEL_25:
    v19 = 96 * v18;
    do
    {
      result = (uint64_t)WTF::HashMap<WTF::String,WebCore::MockMediaDevice,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::MockMediaDevice>,WTF::HashTableTraits>::add<WebCore::MockMediaDevice&>((uint64_t)&v20, &v25, v17, (uint64_t)v17);
      v17 += 12;
      v19 -= 96;
    }
    while (v19);
    v7 = v25;
LABEL_31:
    qword_1ECE84100 = v7;
    byte_1ECE840E5 = 1;
    v6 = &InitWebCoreThreadSystemInterface::didInit;
    if (!v7)
      break;
LABEL_3:
    v8 = *(_DWORD *)(v7 - 8);
    v9 = *((_DWORD *)*a3 + 4);
    if (v9 < 0x100)
      v10 = WTF::StringImpl::hashSlowCase(*a3);
    else
      v10 = v9 >> 8;
    for (i = 0; ; v10 = i + v12)
    {
      v12 = v10 & v8;
      v13 = v7 + 104 * (v10 & v8);
      result = *(_QWORD *)v13;
      if (*(_QWORD *)v13 != -1)
      {
        if (!result)
        {
          v14 = *((_QWORD *)v6 + 32);
          if (!v14)
            goto LABEL_32;
          v15 = *(_DWORD *)(v14 - 4);
          v13 = v14 + 104 * v15;
          goto LABEL_15;
        }
        result = WTF::equal((WTF *)result, *a3, (const WTF::StringImpl *)a3);
        if ((result & 1) != 0)
          break;
      }
      ++i;
    }
    v14 = *((_QWORD *)v6 + 32);
    if (!v14)
      goto LABEL_16;
    v15 = *(_DWORD *)(v14 - 4);
LABEL_15:
    v14 += 104 * v15;
LABEL_16:
    if (v14 != v13)
    {
      v16 = 1;
      switch(*(_DWORD *)(v13 + 96))
      {
        case 0:
          break;
        case 1:
          v16 = 2;
          break;
        case 2:
          v16 = 3;
          break;
        case 3:
          v16 = *(unsigned __int8 *)(v13 + 32);
          break;
        default:
          std::__throw_bad_variant_access[abi:sn180100]();
          continue;
      }
      if (v16 == a2)
      {
        result = WebCore::MockMediaDevice::captureDevice((uint64_t)&v20, v13 + 8);
        LOBYTE(v24) = 1;
        BYTE2(v24) = 1;
        *(_QWORD *)v5 = v20;
        *(_BYTE *)(v5 + 8) = v21;
        *(_OWORD *)(v5 + 16) = v23;
        *(_DWORD *)(v5 + 32) = v24;
        *(_BYTE *)(v5 + 40) = 1;
        return result;
      }
    }
    break;
  }
LABEL_32:
  *(_BYTE *)v5 = 0;
  *(_BYTE *)(v5 + 40) = 0;
  return result;
}

void WebCore::MockRealtimeVideoSource::DrawingState::fontDescription(WebCore::MockRealtimeVideoSource::DrawingState *this)
{
  WebCore::FontDescription *v1;
  _DWORD *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF *v8;
  WTF::StringImpl *v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20[11];
  WTF *v21;
  int v22;
  __int16 v23;
  char v24;
  _OWORD v25[6];
  uint64_t v26;
  char v27;
  _DWORD *v28;
  __int16 v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  char v37;
  WTF *v38;
  int v39;
  __int16 v40;

  v1 = (WebCore::MockRealtimeVideoSource::DrawingState *)((char *)this + 928);
  if (*((_BYTE *)this + 1112))
    return;
  v26 = 256;
  memset(v25, 0, sizeof(v25));
  v27 = 0;
  v3 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v3 += 2;
  v28 = v3;
  v29 = 0;
  v30 = 2143289344;
  v31 = 0;
  v32 = 0;
  v33 = 26216000;
  v34 = 257;
  v35 = 0xE00000000000;
  v37 = 0;
  v36 = 0;
  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v4 = 0x100000001;
  *(_QWORD *)(v4 + 8) = 0;
  v38 = (WTF *)v4;
  v39 = 0;
  v40 = 0;
  WTF::AtomStringImpl::add();
  if (!*(_DWORD *)(v4 + 4))
  {
    __break(0xC471u);
LABEL_44:
    __break(1u);
    return;
  }
  v6 = v20[0];
  if (v20[0])
    *(_DWORD *)v20[0] += 2;
  v7 = *(WTF::StringImpl **)(v4 + 8);
  *(_QWORD *)(v4 + 8) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  LOWORD(v33) = 2000;
  WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v20, (const WebCore::FontDescription *)v25);
  v8 = v38;
  ++*(_DWORD *)v38;
  v21 = v8;
  v22 = v39;
  v23 = v40;
  v24 = 1;
  std::__optional_storage_base<WebCore::FontCascadeDescription,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::FontCascadeDescription,false>>(v1, (uint64_t)v20);
  if (v24)
  {
    v10 = (unsigned int *)v21;
    v21 = 0;
    if (v10)
    {
      if (*v10 == 1)
      {
        v16 = v10[1];
        if ((_DWORD)v16)
        {
          v17 = (WTF::StringImpl **)(v10 + 2);
          v18 = 8 * v16;
          do
          {
            v19 = *v17;
            *v17 = 0;
            if (v19)
            {
              if (*(_DWORD *)v19 == 2)
                WTF::StringImpl::destroy(v19, v9);
              else
                *(_DWORD *)v19 -= 2;
            }
            ++v17;
            v18 -= 8;
          }
          while (v18);
        }
        WTF::fastFree((WTF *)v10, v9);
      }
      else
      {
        --*v10;
      }
    }
    WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v20, v9);
  }
  v11 = (unsigned int *)v38;
  v38 = 0;
  if (v11)
  {
    if (*v11 == 1)
    {
      v12 = v11[1];
      if ((_DWORD)v12)
      {
        v13 = (WTF::StringImpl **)(v11 + 2);
        v14 = 8 * v12;
        do
        {
          v15 = *v13;
          *v13 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v9);
            else
              *(_DWORD *)v15 -= 2;
          }
          ++v13;
          v14 -= 8;
        }
        while (v14);
      }
      WTF::fastFree((WTF *)v11, v9);
    }
    else
    {
      --*v11;
    }
  }
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v25, v9);
  if (!*((_BYTE *)this + 1112))
    goto LABEL_44;
}

WebCore::FontCascade *WebCore::MockRealtimeVideoSource::DrawingState::timeFont(WebCore::MockRealtimeVideoSource::DrawingState *this)
{
  WebCore::FontCascade *v1;
  uint64_t v3;
  uint64_t v4;
  float v5;
  int *v6;
  WTF *v7;
  void *v8;
  WTF *v9;
  WebCore *v10;
  uint64_t v11;
  uint64_t v12;
  WebCore *v13;
  uint64_t v15;
  WTF::StringImpl **v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19[21];
  WTF *v20;
  int v21;
  __int16 v22;
  WebCore *v23[37];
  char v24;

  v1 = (WebCore::MockRealtimeVideoSource::DrawingState *)((char *)this + 16);
  if (!*((_BYTE *)this + 312))
  {
    WebCore::MockRealtimeVideoSource::DrawingState::fontDescription(this);
    v4 = v3;
    v5 = *(float *)this;
    if (*(float *)this >= 3.4028e38)
    {
      *(_DWORD *)(v3 + 176) = 2139095039;
      v6 = (int *)(v3 + 176);
      v5 = 3.4028e38;
    }
    else
    {
      if (v5 <= -3.4028e38)
        v5 = -3.4028e38;
      *(float *)(v3 + 176) = v5;
      v6 = (int *)(v3 + 176);
    }
    *(float *)(v3 + 156) = v5;
    WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v19, (const WebCore::FontDescription *)v3);
    v7 = *(WTF **)(v4 + 168);
    ++*(_DWORD *)v7;
    v20 = v7;
    LOWORD(v7) = *((_WORD *)v6 + 2);
    v21 = *v6;
    v22 = (__int16)v7;
    WebCore::FontCascade::FontCascade((uint64_t)v23, v19);
    v24 = 1;
    if (*((_BYTE *)this + 312))
    {
      WebCore::FontCascade::operator=((uint64_t)v1, (uint64_t)v23);
    }
    else
    {
      WebCore::FontCascade::FontCascade(v1, (const WebCore::FontCascade *)v23);
      *((_BYTE *)this + 312) = 1;
    }
    if (v24)
      WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)v23, v8);
    v9 = v20;
    v20 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
      {
        v15 = *((unsigned int *)v9 + 1);
        if ((_DWORD)v15)
        {
          v16 = (WTF::StringImpl **)((char *)v9 + 8);
          v17 = 8 * v15;
          do
          {
            v18 = *v16;
            *v16 = 0;
            if (v18)
            {
              if (*(_DWORD *)v18 == 2)
                WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v8);
              else
                *(_DWORD *)v18 -= 2;
            }
            ++v16;
            v17 -= 8;
          }
          while (v17);
        }
        WTF::fastFree(v9, v8);
      }
      else
      {
        --*(_DWORD *)v9;
      }
    }
    WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v19, (WTF::StringImpl *)v8);
    if (!*((_BYTE *)this + 312))
      goto LABEL_34;
    v23[0] = 0;
    v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v11 || (v9 = *(WTF **)(v11 + 96)) == 0)
      v9 = (WTF *)WebCore::threadGlobalDataSlow(v10);
    v12 = *((_QWORD *)v9 + 10);
    if (!v12)
      goto LABEL_35;
    while (1)
    {
      WebCore::FontCache::updateFontCascade(v12, (uint64_t)v1, v23);
      v13 = v23[0];
      v23[0] = 0;
      if (v13)
      {
        if (*((_DWORD *)v13 + 2) == 1)
          (*(void (**)(WebCore *))(*(_QWORD *)v13 + 8))(v13);
        else
          --*((_DWORD *)v13 + 2);
      }
      if (*((_BYTE *)this + 312))
        break;
LABEL_34:
      __break(1u);
LABEL_35:
      WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v9);
      v12 = *((_QWORD *)v9 + 10);
    }
  }
  return v1;
}

WebCore::FontCascade *WebCore::MockRealtimeVideoSource::DrawingState::bipBopFont(WebCore::MockRealtimeVideoSource::DrawingState *this)
{
  WebCore::FontCascade *v1;
  uint64_t v3;
  uint64_t v4;
  float v5;
  int *v6;
  WTF *v7;
  void *v8;
  WTF *v9;
  WebCore *v10;
  uint64_t v11;
  uint64_t v12;
  WebCore *v13;
  uint64_t v15;
  WTF::StringImpl **v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19[21];
  WTF *v20;
  int v21;
  __int16 v22;
  WebCore *v23[37];
  char v24;

  v1 = (WebCore::MockRealtimeVideoSource::DrawingState *)((char *)this + 320);
  if (!*((_BYTE *)this + 616))
  {
    WebCore::MockRealtimeVideoSource::DrawingState::fontDescription(this);
    v4 = v3;
    v5 = *((float *)this + 1);
    if (v5 >= 3.4028e38)
    {
      *(_DWORD *)(v3 + 176) = 2139095039;
      v6 = (int *)(v3 + 176);
      v5 = 3.4028e38;
    }
    else
    {
      if (v5 <= -3.4028e38)
        v5 = -3.4028e38;
      *(float *)(v3 + 176) = v5;
      v6 = (int *)(v3 + 176);
    }
    *(float *)(v3 + 156) = v5;
    WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v19, (const WebCore::FontDescription *)v3);
    v7 = *(WTF **)(v4 + 168);
    ++*(_DWORD *)v7;
    v20 = v7;
    LOWORD(v7) = *((_WORD *)v6 + 2);
    v21 = *v6;
    v22 = (__int16)v7;
    WebCore::FontCascade::FontCascade((uint64_t)v23, v19);
    v24 = 1;
    if (*((_BYTE *)this + 616))
    {
      WebCore::FontCascade::operator=((uint64_t)v1, (uint64_t)v23);
    }
    else
    {
      WebCore::FontCascade::FontCascade(v1, (const WebCore::FontCascade *)v23);
      *((_BYTE *)this + 616) = 1;
    }
    if (v24)
      WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)v23, v8);
    v9 = v20;
    v20 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
      {
        v15 = *((unsigned int *)v9 + 1);
        if ((_DWORD)v15)
        {
          v16 = (WTF::StringImpl **)((char *)v9 + 8);
          v17 = 8 * v15;
          do
          {
            v18 = *v16;
            *v16 = 0;
            if (v18)
            {
              if (*(_DWORD *)v18 == 2)
                WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v8);
              else
                *(_DWORD *)v18 -= 2;
            }
            ++v16;
            v17 -= 8;
          }
          while (v17);
        }
        WTF::fastFree(v9, v8);
      }
      else
      {
        --*(_DWORD *)v9;
      }
    }
    WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v19, (WTF::StringImpl *)v8);
    if (!*((_BYTE *)this + 616))
      goto LABEL_34;
    v23[0] = 0;
    v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v11 || (v9 = *(WTF **)(v11 + 96)) == 0)
      v9 = (WTF *)WebCore::threadGlobalDataSlow(v10);
    v12 = *((_QWORD *)v9 + 10);
    if (!v12)
      goto LABEL_35;
    while (1)
    {
      WebCore::FontCache::updateFontCascade(v12, (uint64_t)v1, v23);
      v13 = v23[0];
      v23[0] = 0;
      if (v13)
      {
        if (*((_DWORD *)v13 + 2) == 1)
          (*(void (**)(WebCore *))(*(_QWORD *)v13 + 8))(v13);
        else
          --*((_DWORD *)v13 + 2);
      }
      if (*((_BYTE *)this + 616))
        break;
LABEL_34:
      __break(1u);
LABEL_35:
      WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v9);
      v12 = *((_QWORD *)v9 + 10);
    }
  }
  return v1;
}

WebCore::FontCascade *WebCore::MockRealtimeVideoSource::DrawingState::statsFont(WebCore::MockRealtimeVideoSource::DrawingState *this)
{
  WebCore::FontCascade *v1;
  uint64_t v3;
  uint64_t v4;
  float v5;
  int *v6;
  WTF *v7;
  void *v8;
  WTF *v9;
  WebCore *v10;
  uint64_t v11;
  uint64_t v12;
  WebCore *v13;
  uint64_t v15;
  WTF::StringImpl **v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19[21];
  WTF *v20;
  int v21;
  __int16 v22;
  WebCore *v23[37];
  char v24;

  v1 = (WebCore::MockRealtimeVideoSource::DrawingState *)((char *)this + 624);
  if (!*((_BYTE *)this + 920))
  {
    WebCore::MockRealtimeVideoSource::DrawingState::fontDescription(this);
    v4 = v3;
    v5 = *((float *)this + 2);
    if (v5 >= 3.4028e38)
    {
      *(_DWORD *)(v3 + 176) = 2139095039;
      v6 = (int *)(v3 + 176);
      v5 = 3.4028e38;
    }
    else
    {
      if (v5 <= -3.4028e38)
        v5 = -3.4028e38;
      *(float *)(v3 + 176) = v5;
      v6 = (int *)(v3 + 176);
    }
    *(float *)(v3 + 156) = v5;
    WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v19, (const WebCore::FontDescription *)v3);
    v7 = *(WTF **)(v4 + 168);
    ++*(_DWORD *)v7;
    v20 = v7;
    LOWORD(v7) = *((_WORD *)v6 + 2);
    v21 = *v6;
    v22 = (__int16)v7;
    WebCore::FontCascade::FontCascade((uint64_t)v23, v19);
    v24 = 1;
    if (*((_BYTE *)this + 920))
    {
      WebCore::FontCascade::operator=((uint64_t)v1, (uint64_t)v23);
    }
    else
    {
      WebCore::FontCascade::FontCascade(v1, (const WebCore::FontCascade *)v23);
      *((_BYTE *)this + 920) = 1;
    }
    if (v24)
      WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)v23, v8);
    v9 = v20;
    v20 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
      {
        v15 = *((unsigned int *)v9 + 1);
        if ((_DWORD)v15)
        {
          v16 = (WTF::StringImpl **)((char *)v9 + 8);
          v17 = 8 * v15;
          do
          {
            v18 = *v16;
            *v16 = 0;
            if (v18)
            {
              if (*(_DWORD *)v18 == 2)
                WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v8);
              else
                *(_DWORD *)v18 -= 2;
            }
            ++v16;
            v17 -= 8;
          }
          while (v17);
        }
        WTF::fastFree(v9, v8);
      }
      else
      {
        --*(_DWORD *)v9;
      }
    }
    WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v19, (WTF::StringImpl *)v8);
    if (!*((_BYTE *)this + 920))
      goto LABEL_34;
    v23[0] = 0;
    v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v11 || (v9 = *(WTF **)(v11 + 96)) == 0)
      v9 = (WTF *)WebCore::threadGlobalDataSlow(v10);
    v12 = *((_QWORD *)v9 + 10);
    if (!v12)
      goto LABEL_35;
    while (1)
    {
      WebCore::FontCache::updateFontCascade(v12, (uint64_t)v1, v23);
      v13 = v23[0];
      v23[0] = 0;
      if (v13)
      {
        if (*((_DWORD *)v13 + 2) == 1)
          (*(void (**)(WebCore *))(*(_QWORD *)v13 + 8))(v13);
        else
          --*((_DWORD *)v13 + 2);
      }
      if (*((_BYTE *)this + 920))
        break;
LABEL_34:
      __break(1u);
LABEL_35:
      WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v9);
      v12 = *((_QWORD *)v9 + 10);
    }
  }
  return v1;
}

uint64_t WebCore::MockRealtimeVideoSource::MockRealtimeVideoSource(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t *a4, uint64_t a5)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::RunLoop *v13;
  uint64_t v14;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  const WTF::StringImpl *v20;
  WTF::StringImpl **v21;
  unsigned __int8 *v22;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v28;
  int v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  int v41;
  uint64_t v42;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  uint64_t *v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  void *v69;
  unint64_t v70;
  _QWORD *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  int v92;
  int v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  double v99;
  uint64_t v100;
  uint64_t v101;
  const char *v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  int v108;
  int v109;
  unsigned __int8 v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  if (*a2)
    *(_DWORD *)v6 += 2;
  v104 = v6;
  LOBYTE(v105) = 3;
  v7 = *a3;
  if (*a3)
    *(_DWORD *)v7 += 2;
  v106 = v7;
  v8 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v8 += 2;
  v107 = v8;
  v108 = 0;
  WebCore::RealtimeMediaSource::RealtimeMediaSource(a1, (uint64_t)&v104, a4, a5);
  v9 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v9 = 0;
  *(_OWORD *)(v9 + 8) = xmmword_19689B170;
  *(_QWORD *)(v9 + 24) = a1;
  *(_QWORD *)(a1 + 304) = v9;
  *(_QWORD *)a1 = off_1E3418FC0;
  *(_BYTE *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 417) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  v107 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v10);
    else
      *(_DWORD *)v8 -= 2;
  }
  v11 = v106;
  v106 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = v104;
  v104 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  *(_QWORD *)a1 = off_1E341BC68;
  *(_QWORD *)(a1 + 440) = &unk_1E341BE50;
  *(_QWORD *)(a1 + 448) = 0;
  *(_BYTE *)(a1 + 456) = 0;
  *(_BYTE *)(a1 + 1576) = 0;
  *(_QWORD *)(a1 + 1584) = 0;
  *(_DWORD *)(a1 + 1656) = 0;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(_QWORD *)(a1 + 1680) = 0x7FF8000000000000;
  *(_DWORD *)(a1 + 1704) = 0;
  *(_OWORD *)(a1 + 1688) = 0u;
  WTF::RunLoop::create();
  v13 = *(WTF::RunLoop **)(a1 + 1712);
  v14 = *(_QWORD *)(a1 + 304);
  if (__ldaxr((unsigned __int8 *)v14))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v14))
  {
    goto LABEL_20;
  }
  MEMORY[0x19AEA534C](v14);
LABEL_20:
  ++*(_QWORD *)(v14 + 8);
  v16 = __ldxr((unsigned __int8 *)v14);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_24;
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
LABEL_24:
    WTF::Lock::unlockSlow((WTF::Lock *)v14);
  v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v17 = &off_1E341C138;
  v17[1] = a1;
  v18 = WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)(a1 + 1720), v13);
  *(_QWORD *)(a1 + 1720) = off_1E32051C0;
  *(_QWORD *)(a1 + 1744) = v17;
  *(_BYTE *)(a1 + 1752) = 0;
  *(_BYTE *)(a1 + 1944) = 0;
  *(_BYTE *)(a1 + 1952) = 0;
  *(_BYTE *)(a1 + 2056) = 0;
  *(_OWORD *)(a1 + 2064) = 0u;
  *(_DWORD *)(a1 + 2079) = 0;
  *(_QWORD *)(a1 + 2088) = 0x11040000000000FFLL;
  *(_QWORD *)(a1 + 2096) = 0x11040000FF0000FFLL;
  v21 = (WTF::StringImpl **)(a1 + 2104);
  *(_OWORD *)(a1 + 2104) = 0u;
  *(_BYTE *)(a1 + 2120) = 0;
  *(_DWORD *)(a1 + 2128) = 44100;
  *(_DWORD *)(a1 + 2192) = 0;
  *(_BYTE *)(a1 + 2200) = 0;
  *(_BYTE *)(a1 + 2256) = 0;
  *(_WORD *)(a1 + 2264) = 0;
  *(_BYTE *)(a1 + 2266) = 0;
  *(_BYTE *)(a1 + 2272) = 0;
  *(_BYTE *)(a1 + 2416) = 0;
  *(_BYTE *)(a1 + 2424) = 0;
  *(_BYTE *)(a1 + 2472) = 0;
  *(_BYTE *)(a1 + 2480) = 0;
  if ((byte_1ECE840E6 & 1) == 0)
  {
    *(_QWORD *)&dword_1ECE84150 = 0;
    qword_1ECE84148 = 0;
    *(_QWORD *)byte_1ECE84158 = 0;
    byte_1ECE840E6 = 1;
  }
  v22 = *(unsigned __int8 **)(a1 + 304);
  if (__ldaxr(v22))
  {
    __clrex();
  }
  else if (!__stxr(1u, v22))
  {
    goto LABEL_31;
  }
  v18 = MEMORY[0x19AEA534C](v22);
LABEL_31:
  v24 = *((_QWORD *)v22 + 3);
  v25 = __ldxr(v22);
  if (v25 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  v26 = __stlxr(0, v22);
  if ((_DWORD)v26)
LABEL_35:
    v18 = WTF::Lock::unlockSlow((WTF::Lock *)v22);
  if (!v24)
  {
    v56 = (WTF::StringImpl *)"/AppleInternal/Library/BuildRoots/a9786a24-60ad-11ef-bad1-56363ce8160b/Applications/Xcode.a"
                             "pp/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/"
                             "usr/local/include/wtf/ThreadSafeWeakHashSet.h";
    __break(0xC471u);
    goto LABEL_197;
  }
  if (__ldaxr(byte_1ECE84158))
  {
    __clrex();
  }
  else if (!__stxr(1u, byte_1ECE84158))
  {
    goto LABEL_41;
  }
  v18 = MEMORY[0x19AEA534C](byte_1ECE84158);
LABEL_41:
  v28 = *(_QWORD *)(a1 + 304);
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v28))
  {
    goto LABEL_45;
  }
  v18 = MEMORY[0x19AEA534C](v28);
LABEL_45:
  if (*(_QWORD *)(v28 + 24))
  {
    ++*(_QWORD *)(v28 + 16);
    v22 = (unsigned __int8 *)v28;
  }
  else
  {
    v22 = 0;
  }
  v30 = __ldxr((unsigned __int8 *)v28);
  if (v30 != 1)
  {
    __clrex();
LABEL_52:
    v18 = WTF::Lock::unlockSlow((WTF::Lock *)v28);
    if (!v22)
      goto LABEL_112;
    goto LABEL_53;
  }
  if (__stlxr(0, (unsigned __int8 *)v28))
    goto LABEL_52;
  if (!v22)
    goto LABEL_112;
LABEL_53:
  if (++dword_1ECE84150 <= dword_1ECE84154)
  {
    v31 = qword_1ECE84148;
    if (qword_1ECE84148)
    {
LABEL_62:
      v33 = *(_DWORD *)(v31 - 8);
      goto LABEL_63;
    }
  }
  else
  {
    _ZN3WTF9HashTableIPKN7WebCore23MockRealtimeVideoSourceENS_12KeyValuePairIS4_NS_6RefPtrINS_29ThreadSafeWeakPtrControlBlockENS_12RawPtrTraitsIS7_EENS_43ThreadSafeWeakPtrControlBlockRefDerefTraitsEEEEENS_24KeyValuePairKeyExtractorISC_EENS_11DefaultHashIS4_EENS_7HashMapIS4_SB_SG_NS_10HashTraitsIS4_EENSI_ISB_EENS_15HashTableTraitsEE18KeyValuePairTraitsESJ_E8removeIfIZNKS_21ThreadSafeWeakHashSetIS2_E24amortizedCleanupIfNeededEvEUlRT_E_EEbRKSS_(v18, v19);
    dword_1ECE84150 = 0;
    v31 = qword_1ECE84148;
    if (qword_1ECE84148)
    {
      v32 = *(_DWORD *)(qword_1ECE84148 - 12);
      if (v32 > 0x7FFFFFFE)
        v32 = 0x7FFFFFFF;
    }
    else
    {
      v32 = 0;
    }
    dword_1ECE84154 = 2 * v32;
    if (qword_1ECE84148)
      goto LABEL_62;
  }
  WTF::HashTable<WebCore::MockRealtimeVideoSource const*,WTF::KeyValuePair<WebCore::MockRealtimeVideoSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MockRealtimeVideoSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::MockRealtimeVideoSource const*>,WTF::HashMap<WebCore::MockRealtimeVideoSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::MockRealtimeVideoSource const*>,WTF::HashTraits<WebCore::MockRealtimeVideoSource const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MockRealtimeVideoSource const*>>::rehash(8u);
  v31 = qword_1ECE84148;
  if (qword_1ECE84148)
    goto LABEL_62;
  v33 = 0;
LABEL_63:
  v34 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
  v35 = 9 * ((v34 + ~(v34 << 13)) ^ ((v34 + ~(v34 << 13)) >> 8));
  v36 = (v35 ^ (v35 >> 15)) + ~((v35 ^ (v35 >> 15)) << 27);
  v37 = v33 & ((v36 >> 31) ^ v36);
  v38 = (uint64_t *)(v31 + 16 * v37);
  v39 = *v38;
  if (!*v38)
  {
LABEL_71:
    v42 = v38[1];
    *v38 = a1;
    v38[1] = (uint64_t)v22;
    if (!v42)
      goto LABEL_86;
    if (__ldaxr((unsigned __int8 *)v42))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v42))
    {
      goto LABEL_78;
    }
    MEMORY[0x19AEA534C](v42);
LABEL_78:
    v45 = *(_QWORD *)(v42 + 16) - 1;
    *(_QWORD *)(v42 + 16) = v45;
    if (!v45)
    {
      v22 = *(unsigned __int8 **)(v42 + 8);
      v46 = __ldxr((unsigned __int8 *)v42);
      if (v46 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v42))
        {
          if (v22)
            goto LABEL_86;
LABEL_85:
          WTF::fastFree((WTF *)v42, v19);
          goto LABEL_86;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v42);
      if (v22)
        goto LABEL_86;
      goto LABEL_85;
    }
    v92 = __ldxr((unsigned __int8 *)v42);
    if (v92 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v42))
      {
LABEL_86:
        if (qword_1ECE84148)
          v47 = *(_DWORD *)(qword_1ECE84148 - 12) + 1;
        else
          v47 = 1;
        *(_DWORD *)(qword_1ECE84148 - 12) = v47;
        if (qword_1ECE84148)
          v48 = *(_DWORD *)(qword_1ECE84148 - 12);
        else
          v48 = 0;
        v49 = (*(_DWORD *)(qword_1ECE84148 - 16) + v48);
        v50 = *(unsigned int *)(qword_1ECE84148 - 4);
        if (v50 > 0x400)
        {
          if (v50 > 2 * v49)
            goto LABEL_112;
        }
        else
        {
          if (3 * v50 > 4 * v49)
            goto LABEL_112;
          if (!(_DWORD)v50)
          {
            v51 = 8;
            goto LABEL_111;
          }
        }
        v51 = (_DWORD)v50 << (6 * *(_DWORD *)(qword_1ECE84148 - 12) >= (2 * v50));
LABEL_111:
        WTF::HashTable<WebCore::MockRealtimeVideoSource const*,WTF::KeyValuePair<WebCore::MockRealtimeVideoSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MockRealtimeVideoSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::MockRealtimeVideoSource const*>,WTF::HashMap<WebCore::MockRealtimeVideoSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::MockRealtimeVideoSource const*>,WTF::HashTraits<WebCore::MockRealtimeVideoSource const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MockRealtimeVideoSource const*>>::rehash(v51);
        goto LABEL_112;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v42);
    goto LABEL_86;
  }
  v40 = 0;
  v41 = 1;
  while (v39 != a1)
  {
    if (v39 == -1)
      v40 = v38;
    v37 = (v37 + v41) & v33;
    v38 = (uint64_t *)(v31 + 16 * v37);
    v39 = *v38;
    ++v41;
    if (!*v38)
    {
      if (v40)
      {
        *v40 = 0;
        v40[1] = 0;
        --*(_DWORD *)(qword_1ECE84148 - 16);
        v38 = v40;
      }
      goto LABEL_71;
    }
  }
  if (__ldaxr(v22))
  {
    __clrex();
  }
  else if (!__stxr(1u, v22))
  {
    goto LABEL_99;
  }
  MEMORY[0x19AEA534C](v22);
LABEL_99:
  v52 = *((_QWORD *)v22 + 2) - 1;
  *((_QWORD *)v22 + 2) = v52;
  if (!v52)
  {
    v53 = *((_QWORD *)v22 + 1);
    v54 = __ldxr(v22);
    if (v54 == 1)
    {
      if (!__stlxr(0, v22))
      {
LABEL_105:
        if (!v53)
          WTF::fastFree((WTF *)v22, v19);
        goto LABEL_112;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v22);
    goto LABEL_105;
  }
  v93 = __ldxr(v22);
  if (v93 == 1)
  {
    if (!__stlxr(0, v22))
      goto LABEL_112;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v22);
LABEL_112:
  v55 = __ldxr(byte_1ECE84158);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_116;
  }
  if (__stlxr(0, byte_1ECE84158))
LABEL_116:
    WTF::Lock::unlockSlow((WTF::Lock *)byte_1ECE84158);
  WebCore::MockRealtimeMediaSourceCenter::mockDeviceWithPersistentID(a1 + 176, v20, (uint64_t)&v104);
  v26 = v110;
  if (!v110)
  {
LABEL_197:
    __break(1u);
LABEL_198:
    v94 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFLL);
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 + 1, v94));
    goto LABEL_170;
  }
  v57 = v104;
  if (v104)
    *(_DWORD *)v104 += 2;
  v58 = *v21;
  *v21 = v57;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
      WTF::StringImpl::destroy(v58, v56);
    else
      *(_DWORD *)v58 -= 2;
  }
  v59 = v105;
  if (v105)
    *(_DWORD *)v105 += 2;
  v60 = (uint64_t *)(a1 + 2128);
  v61 = *(WTF::StringImpl **)(a1 + 2112);
  *(_QWORD *)(a1 + 2112) = v59;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2)
      WTF::StringImpl::destroy(v61, v56);
    else
      *(_DWORD *)v61 -= 2;
  }
  *(_BYTE *)(a1 + 2120) = (_BYTE)v106;
  v22 = (unsigned __int8 *)&v107;
  v62 = *(unsigned int *)(a1 + 2192);
  if ((_DWORD)v62 == -1)
  {
    if (v109 == -1)
      goto LABEL_133;
  }
  else if (v109 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1E341BEC8[v62])(&v100, a1 + 2128);
    *(_DWORD *)(a1 + 2192) = -1;
    goto LABEL_133;
  }
  v100 = a1 + 2128;
  ((void (*)(uint64_t *, uint64_t, WTF::StringImpl **))off_1E341BEE8[v109])(&v100, a1 + 2128, &v107);
LABEL_133:
  v63 = *(unsigned int *)(a1 + 1676);
  v64 = v63 + 2;
  v65 = *(unsigned int *)(a1 + 1672);
  if (v63 + 2 > v65)
  {
    v66 = v65 + (v65 >> 2);
    if (v66 >= 0x10)
      v67 = v66 + 1;
    else
      v67 = 16;
    if (v67 <= v64)
      v68 = v63 + 2;
    else
      v68 = v67;
    if (v68 >> 29)
    {
LABEL_214:
      __break(0xC471u);
      JUMPOUT(0x1962CD224);
    }
    v60 = *(uint64_t **)(a1 + 1664);
    v69 = (void *)WTF::fastMalloc((WTF *)(8 * v68));
    *(_DWORD *)(a1 + 1672) = v68;
    *(_QWORD *)(a1 + 1664) = v69;
    memcpy(v69, v60, 8 * v63);
    if (v60)
    {
      if (*(uint64_t **)(a1 + 1664) == v60)
      {
        *(_QWORD *)(a1 + 1664) = 0;
        *(_DWORD *)(a1 + 1672) = 0;
      }
      WTF::fastFree((WTF *)v60, v56);
    }
  }
  v70 = *(unsigned int *)(a1 + 1676);
  if (v64 < v70)
    goto LABEL_214;
  v71 = (_QWORD *)(*(_QWORD *)(a1 + 1664) + 8 * v70);
  *v71 = 0x4018000000000000;
  v71[1] = 0x4018000000000000;
  *(_DWORD *)(a1 + 1676) = v64;
  v72 = *(_DWORD *)(a1 + 2192);
  if (v72 == 2)
  {
    v77 = *(double *)(a1 + 2128);
    v99 = v77;
    if (*(double *)(a1 + 232) != v77)
    {
      v78 = *(_QWORD *)(a1 + 40);
      if (v78)
      {
        v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
        v80 = *(_QWORD *)(a1 + 48);
        v100 = v79;
        v101 = v81;
        v102 = "setFrameRate";
        v103 = v80;
        if (*(_BYTE *)(v78 + 12))
        {
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,double>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&v100, &v99);
          v77 = v99;
        }
      }
      *(double *)(a1 + 232) = v77;
      WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers(a1, 4u);
    }
    LOBYTE(v99) = *(_BYTE *)(a1 + 2136);
    v82 = LOBYTE(v99);
    if (*(unsigned __int8 *)(a1 + 272) != LOBYTE(v99))
    {
      v83 = *(_QWORD *)(a1 + 40);
      if (v83)
      {
        v84 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
        v85 = *(_QWORD *)(a1 + 48);
        v100 = v84;
        v101 = v86;
        v102 = "setFacingMode";
        v103 = v85;
        if (*(_BYTE *)(v83 + 12))
        {
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::VideoFacingMode>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&v100, (unsigned __int8 *)&v99);
          v82 = LOBYTE(v99);
        }
      }
      *(_BYTE *)(a1 + 272) = v82;
      WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers(a1, 8u);
    }
    v60 = (uint64_t *)(a1 + 2160);
  }
  else
  {
    if (v72 != 3)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_203;
    }
    WebCore::RealtimeMediaSource::setIntrinsicSize((_DWORD *)a1, (const WebCore::IntSize *)(a1 + 2144), 1);
    if (*(_DWORD *)(a1 + 2144) != *(_DWORD *)(a1 + 216) || *(_DWORD *)(a1 + 2148) != *(_DWORD *)(a1 + 220))
    {
      v73 = *(_QWORD *)(a1 + 40);
      if (v73)
      {
        v74 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
        v75 = *(_QWORD *)(a1 + 48);
        v100 = v74;
        v101 = v76;
        v102 = "setSize";
        v103 = v75;
        if (*(_BYTE *)(v73 + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::IntSize>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&v100, (WebCore::IntSize *)(a1 + 2144));
      }
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a1 + 2144);
      WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers(a1, 3u);
    }
    v60 = (uint64_t *)(a1 + 2136);
  }
  v87 = *(_QWORD *)(a1 + 2088);
  v88 = *v60;
  if ((v87 & 0x8000000000000) == 0)
  {
    if (v87 != v88 || (v88 & 0x8000000000000) != 0)
      goto LABEL_169;
    goto LABEL_170;
  }
LABEL_203:
  if ((v88 & 0x8000000000000) == 0
    || *(float *)((v87 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v88 & 0xFFFFFFFFFFFFLL) + 4)
    || *(float *)((v87 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v88 & 0xFFFFFFFFFFFFLL) + 8)
    || *(float *)((v87 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v88 & 0xFFFFFFFFFFFFLL) + 0xC)
    || *(float *)((v87 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v88 & 0xFFFFFFFFFFFFLL) + 0x10)
    || HIBYTE(v87) != HIBYTE(v88)
    || BYTE6(v87) != BYTE6(v88))
  {
    v96 = (unsigned int *)(v87 & 0xFFFFFFFFFFFFLL);
    do
    {
      v97 = __ldaxr(v96);
      v98 = v97 - 1;
    }
    while (__stlxr(v98, v96));
    if (!v98)
    {
      atomic_store(1u, v96);
      WTF::fastFree((WTF *)v96, v56);
    }
LABEL_169:
    v26 = *v60;
    *(_QWORD *)(a1 + 2088) = *v60;
    if ((v26 & 0x8000000000000) == 0)
      goto LABEL_170;
    goto LABEL_198;
  }
LABEL_170:
  if (v110)
  {
    if (v109 != -1)
      ((void (*)(uint64_t *, unsigned __int8 *))off_1E341BEC8[v109])(&v100, v22);
    v109 = -1;
    v89 = v105;
    v105 = 0;
    if (v89)
    {
      if (*(_DWORD *)v89 == 2)
        WTF::StringImpl::destroy(v89, v56);
      else
        *(_DWORD *)v89 -= 2;
    }
    v90 = v104;
    v104 = 0;
    if (v90)
    {
      if (*(_DWORD *)v90 == 2)
        WTF::StringImpl::destroy(v90, v56);
      else
        *(_DWORD *)v90 -= 2;
    }
  }
  return a1;
}

void WebCore::MockRealtimeVideoSource::~MockRealtimeVideoSource(WebCore::MockRealtimeVideoSource *this, void *a2)
{
  WebCore::MockRealtimeVideoSource *v2;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WebCore::MockRealtimeVideoSource *v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  uint64_t *v16;
  int v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  int v27;
  WTF *v28;
  const void *v29;
  WTF *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  WTF *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  WebCore::MockRealtimeVideoSource **v57;
  size_t v58;
  int v59;
  uint64_t v60;
  WTF *v61;
  void *v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  char v69;
  char v70;

  v2 = this;
  *(_QWORD *)this = off_1E341BC68;
  *((_QWORD *)this + 55) = &unk_1E341BE50;
  if ((byte_1ECE840E6 & 1) == 0)
  {
    *(_QWORD *)&dword_1ECE84150 = 0;
    qword_1ECE84148 = 0;
    *(_QWORD *)byte_1ECE84158 = 0;
    byte_1ECE840E6 = 1;
  }
  if (__ldaxr(byte_1ECE84158))
  {
    __clrex();
  }
  else if (!__stxr(1u, byte_1ECE84158))
  {
    goto LABEL_7;
  }
  this = (WebCore::MockRealtimeVideoSource *)MEMORY[0x19AEA534C](byte_1ECE84158);
LABEL_7:
  if (++dword_1ECE84150 <= dword_1ECE84154)
  {
    v4 = qword_1ECE84148;
    if (!qword_1ECE84148)
      goto LABEL_59;
  }
  else
  {
    _ZN3WTF9HashTableIPKN7WebCore23MockRealtimeVideoSourceENS_12KeyValuePairIS4_NS_6RefPtrINS_29ThreadSafeWeakPtrControlBlockENS_12RawPtrTraitsIS7_EENS_43ThreadSafeWeakPtrControlBlockRefDerefTraitsEEEEENS_24KeyValuePairKeyExtractorISC_EENS_11DefaultHashIS4_EENS_7HashMapIS4_SB_SG_NS_10HashTraitsIS4_EENSI_ISB_EENS_15HashTableTraitsEE18KeyValuePairTraitsESJ_E8removeIfIZNKS_21ThreadSafeWeakHashSetIS2_E24amortizedCleanupIfNeededEvEUlRT_E_EEbRKSS_((uint64_t)this, a2);
    dword_1ECE84150 = 0;
    v4 = qword_1ECE84148;
    if (qword_1ECE84148)
    {
      v5 = *(_DWORD *)(qword_1ECE84148 - 12);
      if (v5 > 0x7FFFFFFE)
        v5 = 0x7FFFFFFF;
    }
    else
    {
      v5 = 0;
    }
    dword_1ECE84154 = 2 * v5;
    if (!qword_1ECE84148)
      goto LABEL_59;
  }
  v6 = *(_DWORD *)(v4 - 8);
  v7 = ((unint64_t)v2 + ~((_QWORD)v2 << 32)) ^ (((unint64_t)v2 + ~((_QWORD)v2 << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(WebCore::MockRealtimeVideoSource **)(v4 + 16 * v10);
  if (v11 != v2)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(WebCore::MockRealtimeVideoSource **)(v4 + 16 * v10);
      ++v12;
      if (v11 == v2)
        goto LABEL_21;
    }
    v10 = *(unsigned int *)(v4 - 4);
  }
LABEL_21:
  v13 = *(unsigned int *)(v4 - 4);
  if (v10 != v13)
  {
    v14 = (_QWORD *)(v4 + 16 * v10);
    v16 = v14 + 1;
    v15 = (unsigned __int8 *)v14[1];
    if (!v15)
      goto LABEL_34;
    if (__ldaxr(v15))
    {
      __clrex();
    }
    else if (!__stxr(1u, v15))
    {
      goto LABEL_27;
    }
    MEMORY[0x19AEA534C](v15);
LABEL_27:
    v18 = __ldxr(v15);
    if (v18 == 1)
    {
      if (!__stlxr(0, v15))
        goto LABEL_32;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
LABEL_32:
    v4 = qword_1ECE84148;
    if (!qword_1ECE84148)
      goto LABEL_35;
    v13 = *(unsigned int *)(qword_1ECE84148 - 4);
LABEL_34:
    v4 += 16 * v13;
    if ((_QWORD *)v4 == v14)
      goto LABEL_59;
LABEL_35:
    if ((_QWORD *)v4 == v14)
      goto LABEL_59;
    *v14 = -1;
    v19 = *v16;
    *v16 = 0;
    if (!v19)
      goto LABEL_49;
    if (__ldaxr((unsigned __int8 *)v19))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v19))
    {
      goto LABEL_41;
    }
    MEMORY[0x19AEA534C](v19);
LABEL_41:
    v21 = *(_QWORD *)(v19 + 16) - 1;
    *(_QWORD *)(v19 + 16) = v21;
    if (!v21)
    {
      v22 = *(_QWORD *)(v19 + 8);
      v23 = __ldxr((unsigned __int8 *)v19);
      if (v23 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v19))
        {
LABEL_47:
          if (!v22)
            WTF::fastFree((WTF *)v19, a2);
          goto LABEL_49;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v19);
      goto LABEL_47;
    }
    v59 = __ldxr((unsigned __int8 *)v19);
    if (v59 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v19))
      {
LABEL_49:
        ++*(_DWORD *)(qword_1ECE84148 - 16);
        if (qword_1ECE84148)
          v24 = *(_DWORD *)(qword_1ECE84148 - 12) - 1;
        else
          v24 = -1;
        *(_DWORD *)(qword_1ECE84148 - 12) = v24;
        if (qword_1ECE84148)
        {
          v25 = *(_DWORD *)(qword_1ECE84148 - 4);
          if (6 * *(_DWORD *)(qword_1ECE84148 - 12) < v25 && v25 >= 9)
            WTF::HashTable<WebCore::MockRealtimeVideoSource const*,WTF::KeyValuePair<WebCore::MockRealtimeVideoSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MockRealtimeVideoSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::MockRealtimeVideoSource const*>,WTF::HashMap<WebCore::MockRealtimeVideoSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::MockRealtimeVideoSource const*>,WTF::HashTraits<WebCore::MockRealtimeVideoSource const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MockRealtimeVideoSource const*>>::rehash(v25 >> 1);
        }
        goto LABEL_59;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v19);
    goto LABEL_49;
  }
LABEL_59:
  v27 = __ldxr(byte_1ECE84158);
  if (v27 == 1)
  {
    if (!__stlxr(0, byte_1ECE84158))
      goto LABEL_64;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)byte_1ECE84158);
LABEL_64:
  if (*((_BYTE *)v2 + 2416))
  {
    if (*((_BYTE *)v2 + 2408))
    {
      v28 = (WTF *)*((_QWORD *)v2 + 299);
      if (v28)
      {
        *((_QWORD *)v2 + 299) = 0;
        *((_DWORD *)v2 + 600) = 0;
        WTF::fastFree(v28, a2);
      }
    }
  }
  if (*((_BYTE *)v2 + 2256))
  {
    v29 = (const void *)*((_QWORD *)v2 + 281);
    *((_QWORD *)v2 + 281) = 0;
    if (v29)
      CFRelease(v29);
    v30 = (WTF *)*((_QWORD *)v2 + 276);
    if (v30)
    {
      *((_QWORD *)v2 + 276) = 0;
      *((_DWORD *)v2 + 554) = 0;
      WTF::fastFree(v30, a2);
    }
  }
  v31 = *((unsigned int *)v2 + 548);
  if ((_DWORD)v31 != -1)
    ((void (*)(char *, char *))off_1E341BEC8[v31])(&v69, (char *)v2 + 2128);
  *((_DWORD *)v2 + 548) = -1;
  v32 = (WTF::StringImpl *)*((_QWORD *)v2 + 264);
  *((_QWORD *)v2 + 264) = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v32 -= 2;
  }
  v33 = (WTF::StringImpl *)*((_QWORD *)v2 + 263);
  *((_QWORD *)v2 + 263) = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v33 -= 2;
  }
  v34 = *((_QWORD *)v2 + 262);
  if ((v34 & 0x8000000000000) != 0)
  {
    v63 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFLL);
    do
    {
      v64 = __ldaxr(v63);
      v65 = v64 - 1;
    }
    while (__stlxr(v65, v63));
    if (!v65)
    {
      atomic_store(1u, v63);
      WTF::fastFree((WTF *)v63, a2);
    }
  }
  v35 = *((_QWORD *)v2 + 261);
  if ((v35 & 0x8000000000000) != 0)
  {
    v66 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFLL);
    do
    {
      v67 = __ldaxr(v66);
      v68 = v67 - 1;
    }
    while (__stlxr(v68, v66));
    if (!v68)
    {
      atomic_store(1u, v66);
      WTF::fastFree((WTF *)v66, a2);
    }
  }
  if (*((_BYTE *)v2 + 2056))
  {
    v36 = (WTF::StringImpl *)*((_QWORD *)v2 + 251);
    *((_QWORD *)v2 + 251) = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v36 -= 2;
    }
    v37 = (WTF::StringImpl *)*((_QWORD *)v2 + 250);
    *((_QWORD *)v2 + 250) = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v37 -= 2;
    }
    v38 = (WTF::StringImpl *)*((_QWORD *)v2 + 249);
    *((_QWORD *)v2 + 249) = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v38 -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::RealtimeMediaSourceCapabilities,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v2 + 1752, a2);
  *((_QWORD *)v2 + 215) = off_1E32051C0;
  v39 = *((_QWORD *)v2 + 218);
  *((_QWORD *)v2 + 218) = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  WTF::RunLoop::TimerBase::~TimerBase((WebCore::MockRealtimeVideoSource *)((char *)v2 + 1720));
  v41 = *((_QWORD *)v2 + 214);
  *((_QWORD *)v2 + 214) = 0;
  if (v41)
  {
    v42 = (unsigned int *)(v41 + 8);
    do
    {
      v43 = __ldaxr(v42);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v42));
    if (!v44)
    {
      atomic_store(1u, (unsigned int *)(v41 + 8));
      v61 = (WTF *)MEMORY[0x19AEA564C]();
      WTF::fastFree(v61, v62);
    }
  }
  v45 = (WTF *)*((_QWORD *)v2 + 208);
  if (v45)
  {
    *((_QWORD *)v2 + 208) = 0;
    *((_DWORD *)v2 + 418) = 0;
    WTF::fastFree(v45, v40);
  }
  v46 = *((unsigned int *)v2 + 414);
  if ((_DWORD)v46 != -1)
    ((void (*)(char *, char *))off_1E341BF48[v46])(&v70, (char *)v2 + 1600);
  *((_DWORD *)v2 + 414) = -1;
  v47 = *((_QWORD *)v2 + 198);
  *((_QWORD *)v2 + 198) = 0;
  if (v47)
  {
    v48 = *(_QWORD *)(v47 + 8);
    if (__ldaxr((unsigned __int8 *)v48))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v48))
    {
      goto LABEL_109;
    }
    MEMORY[0x19AEA534C](v48);
LABEL_109:
    v50 = *(_QWORD *)(v48 + 8);
    v51 = v50 - 1;
    *(_QWORD *)(v48 + 8) = v50 - 1;
    if (v50 == 1)
    {
      v60 = *(_QWORD *)(v48 + 16);
      v52 = *(_QWORD *)(v48 + 24);
      *(_QWORD *)(v48 + 24) = 0;
      v53 = v60 != 0;
    }
    else
    {
      v52 = 0;
      v53 = 1;
    }
    v54 = __ldxr((unsigned __int8 *)v48);
    if (v54 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v48))
      {
        if (v51)
          goto LABEL_121;
LABEL_117:
        if (v52)
          (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
        if (!v53)
          WTF::fastFree((WTF *)v48, v40);
        goto LABEL_121;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v48);
    if (v51)
      goto LABEL_121;
    goto LABEL_117;
  }
LABEL_121:
  if (*((_BYTE *)v2 + 1576))
    WebCore::MockRealtimeVideoSource::DrawingState::~DrawingState((WebCore::MockRealtimeVideoSource *)((char *)v2 + 456), (WTF::StringImpl *)v40);
  *((_QWORD *)v2 + 55) = off_1E31F70C8;
  v55 = *((_QWORD *)v2 + 56);
  if (v55)
  {
    v56 = *(unsigned int *)(v55 + 20);
    if ((_DWORD)v56)
    {
      v57 = *(WebCore::MockRealtimeVideoSource ***)(v55 + 8);
      v58 = 8 * v56 - 8;
      while (*v57 != (WebCore::MockRealtimeVideoSource *)((char *)v2 + 440))
      {
        ++v57;
        v58 -= 8;
        if (v58 == -8)
          goto LABEL_130;
      }
      *((_QWORD *)v2 + 56) = 0;
      memmove(v57, v57 + 1, v58);
      --*(_DWORD *)(v55 + 20);
    }
  }
LABEL_130:
  WebCore::RealtimeVideoCaptureSource::~RealtimeVideoCaptureSource(v2, v40);
}

uint64_t WebCore::MockRealtimeVideoSource::supportsSizeFrameRateAndZoom(WTF *a1, uint64_t a2)
{
  BOOL v2;
  BOOL v3;
  void *v5;
  _BOOL8 v6;
  CFTypeRef v7;
  WTF *v8;
  uint64_t v10;
  WTF *v11;
  int v12;
  CFTypeRef cf;
  char v14;
  char v15;

  if (*((_DWORD *)a1 + 548) != 2)
    return 1;
  v2 = !*(_BYTE *)(a2 + 4) && *(_BYTE *)(a2 + 12) == 0;
  v3 = v2 && *(_BYTE *)(a2 + 24) == 0;
  if (v3 && *(_BYTE *)(a2 + 40) == 0)
    return 1;
  WebCore::RealtimeVideoCaptureSource::bestSupportedSizeFrameRateAndZoom(a1, (double *)a2, 1, (uint64_t)&v10);
  v6 = v15 != 0;
  if (v15 && v14)
  {
    v7 = cf;
    cf = 0;
    if (v7)
      CFRelease(v7);
    v8 = v11;
    if (v11)
    {
      v11 = 0;
      v12 = 0;
      WTF::fastFree(v8, v5);
    }
  }
  return v6;
}

uint64_t WebCore::MockRealtimeVideoSource::setSizeFrameRateAndZoom(uint64_t a1, __int128 *a2)
{
  if (*(_DWORD *)(a1 + 2192) == 2)
    return WebCore::RealtimeVideoCaptureSource::setSizeFrameRateAndZoom(a1, a2);
  else
    return WebCore::RealtimeMediaSource::setSizeFrameRateAndZoom(a1, (int *)a2);
}

void WebCore::MockRealtimeVideoSource::generatePresets(WebCore::MockRealtimeVideoSource *this, __n128 a2)
{
  WebCore::MockRealtimeVideoSource *v2;

  if (*((_DWORD *)this + 548) == 2)
  {
    WebCore::RealtimeVideoCaptureSource::setSupportedPresets((uint64_t)this, (uint64_t *)this + 268, a2);
  }
  else
  {
    v2 = (WebCore::MockRealtimeVideoSource *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::MockRealtimeVideoSource::capabilities(v2);
  }
}

unsigned int *WebCore::MockRealtimeVideoSource::capabilities(WebCore::MockRealtimeVideoSource *this)
{
  char *v1;
  unsigned int *v3;
  WTF::StringImpl *v4;
  char v5;
  char v6;
  uint8x8_t v7;
  int v8;
  int v9;
  char *v10;
  int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  void *v16;
  void *v17;
  WTF *v18;
  uint16x8_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  __int8 v30;
  int v31;
  BOOL v32;
  void *v33;
  WTF *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF *v37;
  WebCore::MockRealtimeVideoSource *v39;
  uint8x8_t v40;
  __int8 v41;
  _OWORD v42[2];
  __int128 v43;
  WTF *v44[2];
  __int128 v45;
  __int128 v46;
  char v47;
  WTF::StringImpl *v48[2];
  __int128 v49;
  __int128 v50;
  _BYTE v51[19];
  _BYTE v52[13];
  char v53;
  char v54;
  __int32 v55;
  _BYTE v56[13];
  char v57;

  v1 = (char *)this + 1752;
  if (*((_BYTE *)this + 1944))
    return (unsigned int *)v1;
  v3 = WebCore::MockRealtimeVideoSource::settings(this);
  *(_QWORD *)v56 = *(_QWORD *)((char *)v3 + 83);
  *(_QWORD *)&v56[5] = *((_QWORD *)v3 + 11);
  v5 = *((_BYTE *)v3 + 96);
  v6 = *((_BYTE *)v3 + 97);
  v7.i32[0] = *(unsigned int *)((char *)v3 + 98);
  v47 = 0;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  *(_OWORD *)v44 = 0u;
  memset(v42, 0, sizeof(v42));
  *(_OWORD *)v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  memset(v51, 0, sizeof(v51));
  *(_QWORD *)v52 = *(_QWORD *)v56;
  *(_QWORD *)&v52[5] = *(_QWORD *)&v56[5];
  v53 = v5;
  v54 = v6;
  v40 = v7;
  v55 = v7.i32[0];
  v8 = *((_DWORD *)this + 548);
  if (v8 == 3)
  {
    v21 = *((unsigned int *)this + 536);
    if ((int)v21 <= 71)
    {
      __break(0xC471u);
      JUMPOUT(0x1962CDD8CLL);
    }
    *(_QWORD *)&v42[0] = (v21 << 32) | 0x48;
    v22 = *((unsigned int *)this + 537);
    if ((int)v22 <= 44)
    {
      __break(0xC471u);
      JUMPOUT(0x1962CDDACLL);
    }
    *((_QWORD *)&v42[0] + 1) = (v22 << 32) | 0x2D;
    v43 = xmmword_1969F9700;
  }
  else if (v8 == 2)
  {
    v9 = *((unsigned __int8 *)this + 2136);
    if (*((_BYTE *)this + 2136))
    {
      v57 = *((_BYTE *)this + 2136);
      v10 = WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v44, (WTF *)1, (unint64_t)&v57);
      v11 = HIDWORD(v44[1]);
      *((_BYTE *)v44[0] + HIDWORD(v44[1])) = *v10;
      HIDWORD(v44[1]) = v11 + 1;
    }
    v12 = 104;
    if (!*((_BYTE *)this + 211))
      v12 = 96;
    v13 = *(WTF::StringImpl **)((char *)this + v12);
    if (v13)
      *(_DWORD *)v13 += 2;
    v14 = v48[0];
    v48[0] = v13;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    WebCore::RealtimeVideoCaptureSource::updateCapabilities((uint64_t)this, (uint64_t)v42);
    if (v9 == 2)
    {
      v49 = xmmword_1969F9710;
      v5 = 1;
    }
    if (*((_DWORD *)this + 548) != 2)
      goto LABEL_61;
    v15 = *((_DWORD *)this + 545);
    if (v15)
    {
      v16 = (void *)WTF::fastMalloc((WTF *)*((unsigned int *)this + 545));
      memcpy(v16, *((const void **)this + 271), *((unsigned int *)this + 545));
      v18 = (WTF *)v50;
      if ((_QWORD)v50)
      {
        *(_QWORD *)&v50 = 0;
        DWORD2(v50) = 0;
        WTF::fastFree(v18, v17);
      }
      *(_QWORD *)&v50 = v16;
      DWORD2(v50) = v15;
      HIDWORD(v50) = v15;
      if (*((_DWORD *)this + 548) != 2)
        goto LABEL_61;
      v6 = 1;
    }
    v19 = vmovl_u8(v40);
    v41 = v19.i8[0];
    if (*((_BYTE *)this + 2184))
    {
      v20 = 1;
      v51[16] = 1;
    }
    else
    {
      v20 = v19.i8[2];
    }
    v51[17] = *((_BYTE *)this + 2185);
    v23 = (*(uint64_t (**)(WebCore::MockRealtimeVideoSource *))(*(_QWORD *)this + 440))(this);
    v24 = *(unsigned int *)(v23 + 12);
    if (!(_DWORD)v24)
      goto LABEL_41;
    v24 *= 56;
    v25 = (unsigned __int8 *)(*(_QWORD *)v23 + 40);
    while (1)
    {
      v26 = *v25;
      v25 += 56;
      if (v26)
        break;
      v24 -= 56;
      if (!v24)
        goto LABEL_41;
    }
    v27 = (*(uint64_t (**)(WebCore::MockRealtimeVideoSource *))(*(_QWORD *)this + 440))(this);
    LODWORD(v24) = *(_DWORD *)(v27 + 12);
    if ((_DWORD)v24)
    {
      v28 = 56 * v24 - 56;
      v29 = (unsigned __int8 *)(*(_QWORD *)v27 + 40);
      v30 = v41;
      do
      {
        v31 = *v29;
        v29 += 56;
        LOBYTE(v24) = v31 == 0;
        if (v31)
          v32 = v28 == 0;
        else
          v32 = 1;
        v28 -= 56;
      }
      while (!v32);
    }
    else
    {
LABEL_41:
      v30 = v41;
    }
    v51[18] = v24;
    *(_QWORD *)v52 = *(_QWORD *)v56;
    *(_QWORD *)&v52[5] = *(_QWORD *)&v56[5];
    v53 = v5;
    v54 = v6;
    LOBYTE(v55) = v30;
    BYTE1(v55) = v20;
    HIWORD(v55) = 257;
  }
  else
  {
    v42[0] = xmmword_1969F9720;
    v43 = xmmword_1969F9700;
  }
  std::optional<WebCore::RealtimeMediaSourceCapabilities>::operator=[abi:sn180100]<WebCore::RealtimeMediaSourceCapabilities,void>((uint64_t)v1, (uint64_t)v42);
  if (*((_BYTE *)this + 1944))
  {
    v34 = (WTF *)v50;
    if ((_QWORD)v50)
    {
      *(_QWORD *)&v50 = 0;
      DWORD2(v50) = 0;
      WTF::fastFree(v34, v33);
    }
    v35 = v48[1];
    v48[1] = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v33);
      else
        *(_DWORD *)v35 -= 2;
    }
    v36 = v48[0];
    v48[0] = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v33);
      else
        *(_DWORD *)v36 -= 2;
    }
    v37 = v44[0];
    if (v44[0])
    {
      v44[0] = 0;
      LODWORD(v44[1]) = 0;
      WTF::fastFree(v37, v33);
    }
    return (unsigned int *)v1;
  }
  std::__throw_bad_optional_access[abi:sn180100]();
LABEL_61:
  v39 = (WebCore::MockRealtimeVideoSource *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::MockRealtimeVideoSource::settings(v39);
}

unsigned int *WebCore::MockRealtimeVideoSource::settings(WebCore::MockRealtimeVideoSource *this)
{
  char *v1;
  WTF::StringImpl *v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  float v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  int v33;
  char v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v40;
  void *v41;
  uint64_t *v42;
  _QWORD v43[4];
  char v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  __int16 v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[2];

  v1 = (char *)this + 1952;
  if (*((_BYTE *)this + 2056))
    return (unsigned int *)v1;
  *(_QWORD *)((char *)v43 + 5) = 0;
  v43[2] = 0;
  v43[3] = 0;
  v43[0] = 0;
  v44 = 0;
  v46 = 0;
  v48 = 4;
  v49 = 0;
  v51 = 0;
  memset(v52, 0, 14);
  v50 = 0x3FF0000000000000;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  if (v3)
    *(_DWORD *)v3 += 2;
  v47 = v3;
  v4 = *((_DWORD *)this + 548);
  if (v4 == 3)
  {
    v5 = *((_BYTE *)this + 2128) == 4;
  }
  else
  {
    if (v4 == 2)
    {
      BYTE4(v43[1]) = *((_BYTE *)this + 272);
      goto LABEL_10;
    }
    v5 = 0;
  }
  v48 = !v5;
LABEL_10:
  v6 = 104;
  if (!*((_BYTE *)this + 211))
    v6 = 96;
  v7 = *(WTF::StringImpl **)((char *)this + v6);
  if (v7)
    *(_DWORD *)v7 += 2;
  v45 = v7;
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 25);
  if (v8 && *((_DWORD *)v8 + 1) || (v8 = (WTF::StringImpl *)*((_QWORD *)this + 22)) != 0)
    *(_DWORD *)v8 += 2;
  v46 = v8;
  v9 = *((double *)this + 29);
  *(float *)&v43[1] = v9;
  v10 = (*(uint64_t (**)(WebCore::MockRealtimeVideoSource *))(*(_QWORD *)this + 96))(this);
  if (*((_DWORD *)this + 548) == 2)
  {
    v11 = *((unsigned __int16 *)this + 1132);
    if (v11 == 270 || v11 == 90)
    {
      v12 = HIDWORD(v10);
    }
    else
    {
      LODWORD(v12) = v10;
      v10 >>= 32;
    }
    v43[0] = __PAIR64__(v10, v12);
    v14 = *((_BYTE *)this + 272) != 0;
    v19 = (*(uint64_t (**)(WebCore::MockRealtimeVideoSource *))(*(_QWORD *)this + 440))(this);
    v20 = *(unsigned int *)(v19 + 12);
    if ((_DWORD)v20)
    {
      v21 = (double *)(*(_QWORD *)v19 + 32);
      v22 = 56 * v20;
      while (*(v21 - 1) == 1.0 && *v21 == 1.0)
      {
        v21 += 7;
        v22 -= 56;
        if (!v22)
          goto LABEL_33;
      }
      v50 = *((_QWORD *)this + 35);
      v16 = 1;
    }
    else
    {
LABEL_33:
      v16 = 0;
    }
    if (*((_DWORD *)this + 548) != 2)
      goto LABEL_70;
    if (*((_DWORD *)this + 545))
    {
      v49 = *((_BYTE *)this + 273);
      v15 = 1;
    }
    else
    {
      v15 = 0;
    }
    if (*((_BYTE *)this + 2184))
    {
      LOBYTE(v51) = *((_BYTE *)this + 288);
      v17 = 1;
    }
    else
    {
      v17 = 0;
    }
    v24 = (*(uint64_t (**)(WebCore::MockRealtimeVideoSource *))(*(_QWORD *)this + 440))(this);
    v25 = *(unsigned int *)(v24 + 12);
    if ((_DWORD)v25)
    {
      v26 = 56 * v25;
      v27 = (unsigned __int8 *)(*(_QWORD *)v24 + 40);
      while (1)
      {
        v28 = *v27;
        v27 += 56;
        if (v28)
          break;
        v26 -= 56;
        if (!v26)
          goto LABEL_54;
      }
      v29 = (*(uint64_t (**)(WebCore::MockRealtimeVideoSource *))(*(_QWORD *)this + 440))(this);
      v30 = *(unsigned int *)(v29 + 12);
      if ((_DWORD)v30)
      {
        v31 = 56 * v30;
        v32 = (unsigned __int8 *)(*(_QWORD *)v29 + 40);
        while (1)
        {
          v33 = *v32;
          v32 += 56;
          if (!v33)
            break;
          v31 -= 56;
          if (!v31)
            goto LABEL_54;
        }
        v34 = *((_BYTE *)this + 2256);
        if (v34)
          v34 = *((_BYTE *)this + 2240) != 0;
        BYTE2(v51) = v34;
      }
    }
LABEL_54:
    if (*((_DWORD *)this + 548) != 2)
    {
LABEL_70:
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_71;
    }
    v18 = 0;
    BYTE1(v51) = *((_BYTE *)this + 2185);
    v13 = 1;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v43[0] = v10;
    v18 = 1;
  }
  *(_WORD *)((char *)&v51 + 3) = 257;
  BYTE5(v51) = v13;
  BYTE6(v51) = 1;
  HIBYTE(v51) = v14;
  LODWORD(v52[0]) = 0;
  WORD2(v52[0]) = 257;
  BYTE6(v52[0]) = v18;
  HIBYTE(v52[0]) = v18;
  LOBYTE(v52[1]) = 0;
  BYTE1(v52[1]) = v15;
  BYTE2(v52[1]) = v16;
  BYTE3(v52[1]) = v17;
  BYTE4(v52[1]) = v13;
  BYTE5(v52[1]) = v13;
  std::optional<WebCore::RealtimeMediaSourceSettings>::operator=[abi:sn180100]<WebCore::RealtimeMediaSourceSettings,void>((uint64_t)v1, (uint64_t)v43);
  if (*((_BYTE *)this + 2056))
  {
    v36 = v47;
    v47 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v35);
      else
        *(_DWORD *)v36 -= 2;
    }
    v37 = v46;
    v46 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, v35);
      else
        *(_DWORD *)v37 -= 2;
    }
    v38 = v45;
    v45 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v35);
      else
        *(_DWORD *)v38 -= 2;
    }
    return (unsigned int *)v1;
  }
LABEL_71:
  v40 = std::__throw_bad_optional_access[abi:sn180100]();
  return WebCore::MockRealtimeVideoSource::takePhotoInternal(v40, v41, v42);
}

unsigned int *WebCore::MockRealtimeVideoSource::takePhotoInternal@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned __int8 *v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  unsigned int *result;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  __int128 v23;
  const char *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unsigned int *v29;
  __int128 v30;
  __int128 v31;

  v5 = (unsigned __int8 *)(a1 + 2266);
  if (__ldaxr((unsigned __int8 *)(a1 + 2266)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 2266);
LABEL_5:
  WebCore::MockRealtimeVideoSource::invalidateDrawingState((WebCore::MockRealtimeVideoSource *)a1, a2);
  v7 = __ldxr(v5);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v5))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  v8 = *(_QWORD *)(a1 + 1712);
  v9 = *(_QWORD *)(a1 + 304);
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C](v9);
LABEL_14:
  ++*(_QWORD *)(v9 + 8);
  v11 = __ldxr((unsigned __int8 *)v9);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, (unsigned __int8 *)v9))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
  v23 = 0uLL;
  v24 = "takePhotoInternal";
  v25 = 0;
  WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v29, 0, &v23);
  v12 = (uint64_t)v29;
  if (v29)
  {
    v13 = v29 + 2;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
    v15 = (uint64_t)v29;
  }
  else
  {
    v15 = 0;
  }
  v29 = 0;
  v26 = v30;
  v27 = v31;
  v16 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v16 = off_1E341BF88;
  *(_QWORD *)(v16 + 8) = v15;
  v17 = v27;
  *(_OWORD *)(v16 + 16) = v26;
  *(_OWORD *)(v16 + 32) = v17;
  *(_QWORD *)(v16 + 48) = a1;
  *(_QWORD *)(v16 + 56) = a1;
  v28 = v16;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 16))(v8, &v28);
  v18 = v28;
  v28 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  *a3 = v12;
  result = v29;
  if (v29)
  {
    WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::assertIsDead((uint64_t)v29);
    result = v29;
    v29 = 0;
    if (result)
    {
      v20 = result + 2;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
      }
    }
  }
  return result;
}

void WebCore::MockRealtimeVideoSource::invalidateDrawingState(WebCore::MockRealtimeVideoSource *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;

  v3 = *((_QWORD *)this + 198);
  *((_QWORD *)this + 198) = 0;
  if (!v3)
    goto LABEL_18;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v11 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v11 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    goto LABEL_13;
  if (v7)
    goto LABEL_18;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
LABEL_18:
  if (*((_BYTE *)this + 1576))
  {
    WebCore::MockRealtimeVideoSource::DrawingState::~DrawingState((WebCore::MockRealtimeVideoSource *)((char *)this + 456), (WTF::StringImpl *)a2);
    *((_BYTE *)this + 1576) = 0;
  }
}

WTF::Lock *WebCore::MockRealtimeVideoSource::getPhotoCapabilities@<X0>(WebCore::MockRealtimeVideoSource *this@<X0>, uint64_t *a2@<X8>)
{
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  _BYTE *v6;
  WTF::Lock *result;
  void *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  void *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF *v17;
  void *v18;
  int v19;
  int v20;
  WTF *v21;
  uint64_t v22;
  __int128 v23;
  _BYTE *v24;
  void *v25;
  __int128 v26;
  __int128 v27;

  v3 = (__int128 *)((char *)this + 2272);
  if (*((_BYTE *)this + 2416))
  {
    v26 = 0uLL;
    *(_QWORD *)&v27 = "getPhotoCapabilities";
    *((_QWORD *)&v27 + 1) = 0;
    v4 = WTF::fastMalloc((WTF *)0x110);
    *(_DWORD *)(v4 + 8) = 1;
    *(_QWORD *)v4 = off_1E31F73F0;
    v5 = v27;
    *(_OWORD *)(v4 + 16) = v26;
    *(_OWORD *)(v4 + 32) = v5;
    *(_BYTE *)(v4 + 48) = 0;
    *(_DWORD *)(v4 + 216) = 0;
    *(_QWORD *)(v4 + 224) = v4 + 240;
    *(_QWORD *)(v4 + 232) = 1;
    *(_QWORD *)(v4 + 248) = 0;
    *(_QWORD *)(v4 + 256) = 0;
    *(_WORD *)(v4 + 264) = 0;
    v6 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v4);
    if (*v6)
    {
      if (v6[16] >= 4u)
        WTF::Logger::log<char [10],WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>>((uint64_t)v6, 4u, "creating ", v4);
    }
    *a2 = v4;
    return WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::resolve<WebCore::PhotoCapabilities&,std::enable_if<true,void>>(v4, v3, (WTF::Logger::LogSiteIdentifier *)&v26);
  }
  v10 = WebCore::MockRealtimeVideoSource::capabilities(this);
  v11 = *(_QWORD *)v10;
  v12 = *((_QWORD *)v10 + 1);
  v13 = (WTF *)v10[15];
  if ((_DWORD)v13)
  {
    v14 = (void *)WTF::fastMalloc(v13);
    memcpy(v14, *((const void **)v10 + 6), v10[15]);
  }
  else
  {
    v14 = 0;
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)v10 + 13);
  if (v15)
    *(_DWORD *)v15 += 2;
  v16 = (WTF::StringImpl *)*((_QWORD *)v10 + 14);
  if (v16)
    *(_DWORD *)v16 += 2;
  v17 = (WTF *)v10[37];
  if ((_DWORD)v17)
  {
    v18 = (void *)WTF::fastMalloc(v17);
    memcpy(v18, *((const void **)v10 + 17), v10[37]);
  }
  else
  {
    v18 = 0;
  }
  v19 = *((unsigned __int8 *)this + 2416);
  *((_WORD *)this + 1136) = 0;
  *((double *)this + 285) = (double)SHIDWORD(v12);
  LOBYTE(v20) = 1;
  *((_BYTE *)this + 2288) = 1;
  *((double *)this + 287) = (double)(int)v12;
  *((_BYTE *)this + 2304) = 1;
  *((_QWORD *)this + 289) = 0x3FF0000000000000;
  *((_BYTE *)this + 2320) = 1;
  *((_BYTE *)this + 2328) = 1;
  *((double *)this + 292) = (double)SHIDWORD(v11);
  *((_BYTE *)this + 2344) = 1;
  *((double *)this + 294) = (double)(int)v11;
  *((_BYTE *)this + 2360) = 1;
  *((_QWORD *)this + 296) = 0x3FF0000000000000;
  *((_BYTE *)this + 2376) = 1;
  *((_BYTE *)this + 2384) = 1;
  if (!v19)
    goto LABEL_21;
  if (*((_BYTE *)this + 2408))
  {
    v21 = (WTF *)*((_QWORD *)this + 299);
    if (!v21)
    {
      *((_BYTE *)this + 2408) = 0;
      goto LABEL_23;
    }
    *((_QWORD *)this + 299) = 0;
    *((_DWORD *)this + 600) = 0;
    WTF::fastFree(v21, v9);
    v20 = *((unsigned __int8 *)this + 2416);
    *((_BYTE *)this + 2408) = 0;
    if (!v20)
    {
      __break(1u);
LABEL_21:
      *((_BYTE *)this + 2392) = 0;
      *((_BYTE *)this + 2408) = 0;
      *((_BYTE *)this + 2416) = v20;
    }
  }
LABEL_23:
  v26 = 0uLL;
  *(_QWORD *)&v27 = "getPhotoCapabilities";
  *((_QWORD *)&v27 + 1) = 0;
  v22 = WTF::fastMalloc((WTF *)0x110);
  *(_DWORD *)(v22 + 8) = 1;
  *(_QWORD *)v22 = off_1E31F73F0;
  v23 = v27;
  *(_OWORD *)(v22 + 16) = v26;
  *(_OWORD *)(v22 + 32) = v23;
  *(_BYTE *)(v22 + 48) = 0;
  *(_DWORD *)(v22 + 216) = 0;
  *(_QWORD *)(v22 + 224) = v22 + 240;
  *(_QWORD *)(v22 + 232) = 1;
  *(_QWORD *)(v22 + 248) = 0;
  *(_QWORD *)(v22 + 256) = 0;
  *(_WORD *)(v22 + 264) = 0;
  v24 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v22);
  if (*v24 && v24[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>>((uint64_t)v24, 4u, "creating ", v22);
  *a2 = v22;
  result = WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::resolve<WebCore::PhotoCapabilities&,std::enable_if<true,void>>(v22, v3, (WTF::Logger::LogSiteIdentifier *)&v26);
  if (v18)
    result = (WTF::Lock *)WTF::fastFree((WTF *)v18, v25);
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      result = (WTF::Lock *)WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v25);
      if (!v15)
        goto LABEL_34;
      goto LABEL_32;
    }
    *(_DWORD *)v16 -= 2;
  }
  if (!v15)
    goto LABEL_34;
LABEL_32:
  if (*(_DWORD *)v15 == 2)
    result = (WTF::Lock *)WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v25);
  else
    *(_DWORD *)v15 -= 2;
LABEL_34:
  if (v14)
    return (WTF::Lock *)WTF::fastFree((WTF *)v14, v25);
  return result;
}

WTF *WebCore::MockRealtimeVideoSource::getPhotoSettings@<X0>(WebCore::MockRealtimeVideoSource *this@<X0>, uint64_t *a2@<X8>)
{
  __int16 v4;
  unsigned __int8 v5;
  unsigned int *v6;
  WTF::StringImpl *v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  double v13;
  int v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  _BYTE *v18;
  uint64_t v20;
  __int128 v21;
  __int128 v22;

  if (!*((_BYTE *)this + 2472))
  {
    if (*((_DWORD *)this + 548) != 2)
      goto LABEL_35;
    if (*((_BYTE *)this + 2184))
    {
      v4 = 1;
      if (*((_BYTE *)this + 288))
        v5 = 2;
      else
        v5 = 1;
    }
    else
    {
      v5 = 0;
      v4 = 0;
    }
    v6 = WebCore::MockRealtimeVideoSource::settings(this);
    v8 = *v6;
    v9 = v6[1];
    v10 = (WTF::StringImpl *)*((_QWORD *)v6 + 5);
    if (v10)
      *(_DWORD *)v10 += 2;
    v11 = (WTF::StringImpl *)*((_QWORD *)v6 + 6);
    if (v11)
      *(_DWORD *)v11 += 2;
    v12 = (WTF::StringImpl *)*((_QWORD *)v6 + 7);
    if (v12)
      *(_DWORD *)v12 += 2;
    v13 = (double)v8;
    v14 = *((unsigned __int8 *)this + 2472);
    *((_WORD *)this + 1212) = v5 | (unsigned __int16)(v4 << 8);
    if (!v14)
      *((_BYTE *)this + 2472) = 1;
    *((double *)this + 304) = (double)v9;
    *((_BYTE *)this + 2440) = 1;
    *((double *)this + 306) = v13;
    *((_BYTE *)this + 2456) = 1;
    *((_WORD *)this + 1232) = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
      {
        WTF::StringImpl::destroy(v12, v7);
        if (v11)
        {
LABEL_20:
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, v7);
          else
            *(_DWORD *)v11 -= 2;
        }
LABEL_22:
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, v7);
          else
            *(_DWORD *)v10 -= 2;
        }
        if (*((_BYTE *)this + 2472))
          goto LABEL_26;
        __break(1u);
LABEL_35:
        v20 = std::__throw_bad_variant_access[abi:sn180100]();
        return (WTF *)WebCore::MockRealtimeVideoSource::setFrameRateAndZoomWithPreset(v20);
      }
      *(_DWORD *)v12 -= 2;
    }
    if (v11)
      goto LABEL_20;
    goto LABEL_22;
  }
LABEL_26:
  v15 = (__int128 *)((char *)this + 2424);
  v21 = 0uLL;
  *(_QWORD *)&v22 = "getPhotoSettings";
  *((_QWORD *)&v22 + 1) = 0;
  v16 = WTF::fastMalloc((WTF *)0xB0);
  *(_DWORD *)(v16 + 8) = 1;
  *(_QWORD *)v16 = off_1E31F7440;
  v17 = v22;
  *(_OWORD *)(v16 + 16) = v21;
  *(_OWORD *)(v16 + 32) = v17;
  *(_BYTE *)(v16 + 48) = 0;
  *(_DWORD *)(v16 + 120) = 0;
  *(_QWORD *)(v16 + 128) = v16 + 144;
  *(_QWORD *)(v16 + 136) = 1;
  *(_QWORD *)(v16 + 152) = 0;
  *(_QWORD *)(v16 + 160) = 0;
  *(_WORD *)(v16 + 168) = 0;
  v18 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v16);
  if (*v18)
  {
    if (v18[16] >= 4u)
      WTF::Logger::log<char [10],WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>>((uint64_t)v18, 4u, "creating ", v16);
  }
  *a2 = v16;
  return WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::resolve<WebCore::PhotoSettings&,std::enable_if<true,void>>(v16, v15, (WTF::Logger::LogSiteIdentifier *)&v21);
}

uint64_t WebCore::MockRealtimeVideoSource::setFrameRateAndZoomWithPreset(uint64_t a1, _QWORD *a2)
{
  __n128 v3;
  uint64_t result;
  uint64_t v5;

  v3 = std::__optional_storage_base<WebCore::VideoPreset,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::VideoPreset,false>>(a1 + 2200, a2);
  if (*(_BYTE *)(a1 + 2256))
  {
    v5 = *(_QWORD *)(a1 + 2200);
    WebCore::RealtimeMediaSource::setIntrinsicSize((_DWORD *)a1, (const WebCore::IntSize *)&v5, 1);
  }
  result = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)a1 + 64))(a1, v3);
  if ((_DWORD)result)
    return WTF::RunLoop::TimerBase::start();
  return result;
}

uint64_t WebCore::MockRealtimeVideoSource::videoFrameRotation(WebCore::MockRealtimeVideoSource *this)
{
  return *((unsigned __int16 *)this + 1132);
}

void WebCore::MockRealtimeVideoSource::settingsDidChange(WebCore::MockRealtimeVideoSource *this, WTF::StringImpl *a2)
{
  __int16 v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unsigned __int8 *v7;
  int v9;

  v2 = (__int16)a2;
  if (*((_BYTE *)this + 2056))
  {
    v4 = (WTF::StringImpl *)*((_QWORD *)this + 251);
    *((_QWORD *)this + 251) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = (WTF::StringImpl *)*((_QWORD *)this + 250);
    *((_QWORD *)this + 250) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = (WTF::StringImpl *)*((_QWORD *)this + 249);
    *((_QWORD *)this + 249) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
    *((_BYTE *)this + 2056) = 0;
  }
  if ((v2 & 3) != 0)
  {
    v7 = (unsigned __int8 *)this + 2266;
    if (__ldaxr((unsigned __int8 *)this + 2266))
    {
      __clrex();
    }
    else if (!__stxr(1u, v7))
    {
      goto LABEL_17;
    }
    MEMORY[0x19AEA534C]((char *)this + 2266);
LABEL_17:
    WebCore::MockRealtimeVideoSource::invalidateDrawingState(this, a2);
    v9 = __ldxr(v7);
    if (v9 == 1)
    {
      if (!__stlxr(0, v7))
        goto LABEL_22;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WebCore::MockRealtimeVideoSource *)((char *)this + 2266));
  }
LABEL_22:
  if (v2 < 0)
  {
    if (*((_BYTE *)this + 2472))
      *((_BYTE *)this + 2472) = 0;
  }
}

uint64_t WebCore::MockRealtimeVideoSource::startProducingData(WebCore::MockRealtimeVideoSource *this)
{
  WTF::MonotonicTime *v2;
  uint64_t result;
  uint64_t v4;

  v2 = (WTF::MonotonicTime *)WTF::RunLoop::TimerBase::start();
  result = WTF::MonotonicTime::now(v2);
  *((_QWORD *)this + 210) = v4;
  return result;
}

double WebCore::MockRealtimeVideoSource::stopProducingData(WebCore::MockRealtimeVideoSource *this)
{
  WTF::MonotonicTime *v2;
  double v3;
  double result;

  v2 = (WTF::MonotonicTime *)WTF::RunLoop::TimerBase::stop((WebCore::MockRealtimeVideoSource *)((char *)this + 1720));
  WTF::MonotonicTime::now(v2);
  result = *((double *)this + 211) + v3 - *((double *)this + 210);
  *((double *)this + 211) = result;
  *((_QWORD *)this + 210) = 0x7FF8000000000000;
  return result;
}

double WebCore::MockRealtimeVideoSource::elapsedTime(WebCore::MockRealtimeVideoSource *this)
{
  double v2;

  WTF::MonotonicTime::now(this);
  return *((double *)this + 211) + v2 - *((double *)this + 210);
}

double WebCore::MockRealtimeVideoSource::delaySamples(double *a1, double a2)
{
  double v4;
  double result;

  WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  result = a2 + v4;
  a1[212] = result;
  return result;
}

_QWORD *WebCore::MockRealtimeVideoSource::generateFrameInternal(unint64_t this, uint64_t a2)
{
  double v2;
  _QWORD *result;
  _QWORD *v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::MonotonicTime *v13;
  WTF::StringImpl *v14;
  double v15;
  double v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  float v20;
  unsigned int v21;
  _DWORD *v22;
  unsigned int v23;
  float v24;
  float v25;
  void *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;
  unsigned int v32;
  BOOL v33;
  unsigned int v34;
  BOOL v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WebCore::FontCascade *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  size_t v58;
  uint64_t v59;
  WebCore::FontCascade *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  float v65;
  float v66;
  unsigned int v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  _BYTE *v71;
  WebCore::FontCascade *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  int v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  _BYTE *v81;
  WebCore::FontCascade *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  unsigned int *v89;
  WebCore::FontCascade *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  unsigned int *v96;
  WebCore::FontCascade *v97;
  WTF::StringImpl *v98;
  WebCore::FontCascade *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  int64x2_t v104;
  const char *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  void *v111;
  unsigned int *v112;
  WTF::StringImpl *v113;
  WebCore::FontCascade *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  uint64_t v117;
  float v118;
  unsigned int v119;
  unsigned int v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  void *v128;
  __n128 v129;
  long double v130;
  float v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  __n128 v143;
  int v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v149;
  void *v150;
  WTF *v151;
  float v152;
  float v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  void *v161;
  uint64_t v162;
  float v163;
  unsigned int v164;
  float v165;
  unsigned int v166;
  float v167;
  float v168;
  unsigned int v169;
  float v170;
  float v171;
  unsigned int v172;
  float v173;
  float v174;
  unsigned int v175;
  float v176;
  float v177;
  unsigned int v178;
  float v179;
  float v180;
  float v181;
  void *v182;
  float v183;
  void *v184;
  float v185;
  void *v186;
  float v187;
  void *v188;
  float v189;
  void *v190;
  float v191;
  void *v192;
  void *v193;
  char **v194;
  char **v195;
  char *v196;
  int v198;
  void *v199;
  uint64_t v200;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  BOOL v205;
  int v206;
  WTF::StringImpl *v207;
  WTF::StringImpl *v208;
  WTF::StringImpl *v209;
  WTF::StringImpl *v210;
  WTF::StringImpl *v211;
  WTF::StringImpl *v212;
  uint64_t v213;
  unsigned int *v214;
  unsigned int v215;
  unsigned int v216;
  unsigned int *v217;
  unsigned int v218;
  unsigned int v219;
  unsigned int *v220;
  unsigned int v221;
  unsigned int v222;
  unsigned int *v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int *v226;
  unsigned int v227;
  unsigned int v228;
  unsigned int *v229;
  unsigned int v230;
  unsigned int v231;
  unsigned int *v232;
  unsigned int v233;
  unsigned int v234;
  unsigned int *v235;
  unsigned int v236;
  unsigned int v237;
  unsigned int *v238;
  unsigned int v239;
  unsigned int v240;
  unsigned int *v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int *v244;
  unsigned int v245;
  unsigned int v246;
  unsigned int *v247;
  unsigned int v248;
  unsigned int v249;
  unsigned int *v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  unsigned int v254;
  unint64_t v255;
  WebCore::MockRealtimeVideoSource *v256;
  WTF::StringImpl *v257;
  WTF::StringImpl *v258;
  WTF::StringImpl *v259;
  int v260;
  char v261;
  uint64_t v262;
  int v263;
  char v264;
  char v265;
  float v266;
  float v267;
  float v268;
  float v269;
  unsigned int v270;
  unsigned int v271;
  int64x2_t v272;
  char __src[8];
  WTF::StringImpl *v274;
  int v275;
  char v276;
  uint64_t v277;
  int v278;
  char v279;
  char v280;
  _DWORD v281[3];
  WTF::StringImpl *v282;
  int v283;
  char v284;
  uint64_t v285;
  int v286;
  char v287;
  char v288;
  unsigned int __n;
  _BYTE __n_4[32];
  __int128 v291;
  int v292;
  char v293;
  char v294[296];
  char v295;
  char v296[296];
  char v297;
  char v298[168];
  _DWORD *v299;
  int v300;
  __int16 v301;
  char v302;
  uint64_t v303;

  v303 = *MEMORY[0x1E0C80C00];
  result = WebCore::MockRealtimeVideoSource::imageBufferInternal((WebCore::MockRealtimeVideoSource *)a2);
  if (!result)
  {
    *(_QWORD *)this = 0;
    return result;
  }
  v6 = result;
  v7 = result[1];
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7);
LABEL_6:
  ++*(_QWORD *)(v7 + 8);
  v9 = __ldxr((unsigned __int8 *)v7);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, (unsigned __int8 *)v7))
LABEL_10:
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
  v10 = (*(uint64_t (**)(_QWORD *))(*v6 + 16))(v6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 96))(v10, 1);
  if (*(_BYTE *)(a2 + 2256))
    v11 = *(_QWORD *)(a2 + 2200);
  else
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
  *(_QWORD *)__n_4 = 0;
  *(float *)&__n_4[8] = (float)(int)v11;
  *(float *)&__n_4[12] = (float)SHIDWORD(v11);
  if (*(double *)(a2 + 280) < 2.0)
    v12 = a2 + 2088;
  else
    v12 = a2 + 2096;
  v13 = (WTF::MonotonicTime *)(*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)v10 + 224))(v10, __n_4, v12);
  if (*(_BYTE *)(a2 + 289) && !*(_BYTE *)(a2 + 432))
    goto LABEL_374;
  WTF::MonotonicTime::now(v13);
  v16 = *(double *)(a2 + 1688) + v15 - *(double *)(a2 + 1680);
  v17 = (_QWORD *)(a2 + 456);
  if (*(_BYTE *)(a2 + 1576))
    goto LABEL_27;
  if (*(_BYTE *)(a2 + 2256))
  {
    v18 = 0;
    v19 = *(_QWORD *)(a2 + 2200);
  }
  else
  {
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
    v18 = *(unsigned __int8 *)(a2 + 1576);
  }
  v20 = (double)SHIDWORD(v19) * 0.08;
  *(float *)__n_4 = v20;
  *(float32x2_t *)&__n_4[4] = vmul_n_f32((float32x2_t)0x3F00000040200000, v20);
  __n_4[16] = 0;
  v293 = 0;
  v294[0] = 0;
  v295 = 0;
  v296[0] = 0;
  v297 = 0;
  v298[0] = 0;
  v302 = 0;
  if (v18)
  {
    WebCore::MockRealtimeVideoSource::DrawingState::operator=(a2 + 456, (uint64_t *)__n_4);
  }
  else
  {
    *v17 = *(_QWORD *)__n_4;
    *(_DWORD *)(a2 + 464) = *(_DWORD *)&__n_4[8];
    *(_BYTE *)(a2 + 472) = 0;
    *(_BYTE *)(a2 + 768) = 0;
    *(_BYTE *)(a2 + 776) = 0;
    *(_BYTE *)(a2 + 1072) = 0;
    *(_BYTE *)(a2 + 1080) = 0;
    *(_BYTE *)(a2 + 1376) = 0;
    *(_BYTE *)(a2 + 1384) = 0;
    *(_BYTE *)(a2 + 1568) = 0;
    *(_BYTE *)(a2 + 1576) = 1;
  }
  WebCore::MockRealtimeVideoSource::DrawingState::~DrawingState((WebCore::MockRealtimeVideoSource::DrawingState *)__n_4, v14);
  if (*(_BYTE *)(a2 + 1576))
  {
LABEL_27:
    v21 = llround(v16 * 1000.0);
    *(_QWORD *)__n_4 = *v17;
    *(_DWORD *)&__n_4[8] = *(_DWORD *)(a2 + 464);
    __n_4[16] = 0;
    v293 = 0;
    if (*(_BYTE *)(a2 + 768))
    {
      WebCore::FontCascade::FontCascade((WebCore::FontCascade *)&__n_4[16], (const WebCore::FontCascade *)(a2 + 472));
      v293 = 1;
    }
    v294[0] = 0;
    v295 = 0;
    if (*(_BYTE *)(a2 + 1072))
    {
      WebCore::FontCascade::FontCascade((WebCore::FontCascade *)v294, (const WebCore::FontCascade *)(a2 + 776));
      v295 = 1;
    }
    v296[0] = 0;
    v297 = 0;
    if (*(_BYTE *)(a2 + 1376))
    {
      WebCore::FontCascade::FontCascade((WebCore::FontCascade *)v296, (const WebCore::FontCascade *)(a2 + 1080));
      v297 = 1;
    }
    v298[0] = 0;
    v302 = 0;
    if (*(_BYTE *)(a2 + 1568))
    {
      WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v298, (const WebCore::FontDescription *)(a2 + 1384));
      v22 = *(_DWORD **)(a2 + 1552);
      ++*v22;
      v299 = v22;
      v300 = *(_DWORD *)(a2 + 1560);
      v301 = *(_WORD *)(a2 + 1564);
      v302 = 1;
    }
    v256 = (WebCore::MockRealtimeVideoSource *)this;
    if (*(_BYTE *)(a2 + 2256))
      this = *(_QWORD *)(a2 + 2200);
    else
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
    v23 = v21 / 0x3E8 - 60 * ((71582789 * (unint64_t)(v21 / 0x3E8)) >> 32);
    v16 = (double)(int)this;
    v24 = (double)(int)this * 0.05;
    v255 = HIDWORD(this);
    v2 = (double)SHIDWORD(this);
    v25 = (double)SHIDWORD(this) * 0.15;
    v268 = v24;
    v269 = v25;
    *(_QWORD *)&v281[1] = 0x11040000FFFFFFFFLL;
    WebCore::GraphicsContext::setFillColor((WebCore::GraphicsContext *)v10, (const WebCore::Color *)&v281[1]);
    if ((*(_QWORD *)&v281[1] & 0x8000000000000) != 0)
    {
      v214 = (unsigned int *)(*(_QWORD *)&v281[1] & 0xFFFFFFFFFFFFLL);
      do
      {
        v215 = __ldaxr(v214);
        v216 = v215 - 1;
      }
      while (__stlxr(v216, v214));
      if (!v216)
      {
        atomic_store(1u, v214);
        WTF::fastFree((WTF *)v214, v26);
      }
    }
    if (*(_BYTE *)(v10 + 341) != 1)
    {
      *(_BYTE *)(v10 + 341) = 1;
      *(_DWORD *)(v10 + 184) |= 0x200u;
    }
    v17 = (_QWORD *)(v10 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 88))(v10, v10 + 8);
    v27 = 0;
    *(_QWORD *)&v281[1] = 0x200000030;
    LODWORD(v282) = 0;
    v28 = v21 % 0x3E8;
    *(_QWORD *)__src = 0x200000030;
    LODWORD(v274) = v21 / 0x3E8 - 60 * ((71582789 * (unint64_t)(v21 / 0x3E8)) >> 32);
    v258 = (WTF::StringImpl *)0x300000030;
    LODWORD(v259) = v21 % 0x3E8;
    v29 = v274;
    do
    {
      ++v27;
      v30 = v29 > 9;
      v29 /= 0xAu;
    }
    while (v30);
    v31 = 0;
    v32 = v21 % 0x3E8;
    do
    {
      ++v31;
      v30 = v32 > 9;
      v32 /= 0xAu;
    }
    while (v30);
    if (v27 <= 2)
      v27 = 2;
    if (v31 <= 3)
      v31 = 3;
    if ((v31 & 0x80000000) != 0)
      goto LABEL_448;
    v33 = __OFADD__(v31, 1);
    v34 = v31 + 1;
    v35 = v33;
    if ((v27 & 0x80000000) != 0)
      goto LABEL_448;
    if (v35)
      goto LABEL_448;
    v33 = __OFADD__(v27, v34);
    v36 = v27 + v34;
    if (v33)
      goto LABEL_448;
    v33 = __OFADD__(v36, 1);
    v37 = v36 + 1;
    if (v33)
      goto LABEL_448;
    v33 = __OFADD__(v37, 2);
    v38 = v37 + 2;
    if (v33)
      goto LABEL_448;
    v33 = __OFADD__(v38, 1);
    v39 = v38 + 1;
    if (v33)
      goto LABEL_448;
    v40 = v39 + 2;
    if (__OFADD__(v39, 2))
      goto LABEL_448;
    if (v39 != -2)
    {
      if ((v40 & 0x80000000) == 0)
      {
        WTF::tryFastCompactMalloc((WTF *)(v40 + 20));
        v42 = v272.i64[0];
        if (v272.i64[0])
        {
          *(_DWORD *)v272.i64[0] = 2;
          *(_DWORD *)(v42 + 4) = v40;
          *(_WORD *)(v42 + 20) = 12336;
          *(_QWORD *)(v42 + 8) = v42 + 20;
          *(_DWORD *)(v42 + 16) = 4;
          *(_BYTE *)(v42 + 22) = 58;
          WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>>((_BYTE *)(v42 + 23), (uint64_t)&v281[1], 0, 58, (uint64_t)__src, v23, 46, v41, (uint64_t)&v258, v28);
          goto LABEL_64;
        }
      }
LABEL_448:
      __break(0xC471u);
      JUMPOUT(0x1962D0D1CLL);
    }
  }
  else
  {
    __break(1u);
  }
  v42 = MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
LABEL_64:
  v43 = WebCore::MockRealtimeVideoSource::DrawingState::timeFont((WebCore::MockRealtimeVideoSource::DrawingState *)__n_4);
  v44 = (WTF::StringImpl *)*(unsigned int *)(v42 + 4);
  if (((*(_DWORD *)(v42 + 16) >> 2) & 1) != 0)
  {
    if ((_DWORD)v44)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_69:
      v45 = *(WTF::StringImpl **)&v281[1];
      goto LABEL_70;
    }
  }
  else if ((_DWORD)v44)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    goto LABEL_69;
  }
  v45 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
LABEL_70:
  v281[1] = 0;
  if (v45)
    *(_DWORD *)v45 += 2;
  v282 = v45;
  v283 = 0;
  v284 = 1;
  v285 = 0x3F80000000000000;
  v286 = 0;
  v287 = 4;
  v288 = v288 & 0xE0 | 8;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, v44);
    else
      *(_DWORD *)v45 -= 2;
  }
  (*(void (**)(uint64_t, WebCore::FontCascade *, _DWORD *, float *, _QWORD, _QWORD))(*(_QWORD *)v10 + 520))(v10, v43, &v281[1], &v268, 0, 0);
  v47 = v282;
  v282 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WTF::StringImpl::destroy(v47, v46);
    else
      *(_DWORD *)v47 -= 2;
  }
  v48 = 0;
  v49 = *(_DWORD *)(a2 + 1704);
  *(_DWORD *)(a2 + 1704) = v49 + 1;
  v50 = v49;
  do
  {
    ++v48;
    v30 = v50 > 9;
    v50 /= 0xAu;
  }
  while (v30);
  if (v48 <= 6)
    v51 = 6;
  else
    v51 = v48;
  if ((v51 & 0x80000000) != 0 || (WTF::tryFastCompactMalloc((WTF *)(v51 + 20)), (v53 = *(_QWORD *)&v281[1]) == 0))
  {
    __break(0xC471u);
    JUMPOUT(0x1962D0F64);
  }
  v54 = 0;
  v55 = *(_QWORD *)&v281[1] + 20;
  **(_DWORD **)&v281[1] = 2;
  *(_DWORD *)(v53 + 4) = v51;
  *(_QWORD *)(v53 + 8) = v53 + 20;
  *(_DWORD *)(v53 + 16) = 4;
  v56 = v49;
  do
  {
    --v54;
    v30 = v56 > 9;
    v56 /= 0xAu;
  }
  while (v30);
  if (-v54 > 5)
  {
    v57 = 0;
  }
  else
  {
    v57 = (v54 + 6);
    if (v57 <= 1)
      v58 = 1;
    else
      v58 = v57;
    memset((void *)(v53 + 20), 48, v58);
  }
  v59 = 0;
  do
  {
    *((_BYTE *)&v282 + v59-- + 4) = (v49 % 0xA) | 0x30;
    v30 = v49 > 9;
    v49 /= 0xAu;
  }
  while (v30);
  if (v59 + 14 <= 13)
    memcpy((void *)(v55 + v57), (char *)&v282 + v59 + 5, -v59);
  if (*(_DWORD *)v42 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v42, v52);
  else
    *(_DWORD *)v42 -= 2;
  v268 = v268 + 0.0;
  v269 = *(float *)__n_4 + v269;
  v60 = WebCore::MockRealtimeVideoSource::DrawingState::timeFont((WebCore::MockRealtimeVideoSource::DrawingState *)__n_4);
  v61 = (WTF::StringImpl *)*(unsigned int *)(v53 + 4);
  if (((*(_DWORD *)(v53 + 16) >> 2) & 1) != 0)
  {
    if ((_DWORD)v61)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_104:
      v62 = *(WTF::StringImpl **)&v281[1];
      goto LABEL_105;
    }
  }
  else if ((_DWORD)v61)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    goto LABEL_104;
  }
  v62 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
LABEL_105:
  v281[1] = 0;
  if (v62)
    *(_DWORD *)v62 += 2;
  v282 = v62;
  v283 = 0;
  v284 = 1;
  v285 = 0x3F80000000000000;
  v286 = 0;
  v287 = 4;
  v288 = v288 & 0xE0 | 8;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
      WTF::StringImpl::destroy(v62, v61);
    else
      *(_DWORD *)v62 -= 2;
  }
  (*(void (**)(uint64_t, WebCore::FontCascade *, _DWORD *, float *, _QWORD, _QWORD))(*(_QWORD *)v10 + 520))(v10, v60, &v281[1], &v268, 0, 0);
  v64 = v282;
  v282 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
      WTF::StringImpl::destroy(v64, v63);
    else
      *(_DWORD *)v64 -= 2;
  }
  v65 = v16 * 0.45;
  v66 = v2 * 0.75;
  v266 = v65;
  v267 = v66;
  WTF::numberToFixedWidthString();
  v67 = strlen((const char *)&v281[1]);
  __n = v67;
  if ((v67 & 0x80000000) != 0
    || __OFADD__(v67, 4)
    || (v68 = v67 + 26, __OFADD__(v67 + 4, 22))
    || (WTF::tryFastCompactMalloc((WTF *)(v68 + 20)), (v70 = *(WTF::StringImpl **)__src) == 0))
  {
    __break(0xC471u);
    JUMPOUT(0x1962D0F24);
  }
  **(_DWORD **)__src = 2;
  *((_DWORD *)v70 + 1) = v68;
  *((_QWORD *)v70 + 1) = (char *)v70 + 20;
  *((_DWORD *)v70 + 4) = 4;
  qmemcpy((char *)v70 + 20, "Requested frame rate: ", 22);
  v71 = (char *)v70 + 42;
  if (__n)
  {
    if (__n == 1)
      *v71 = v281[1];
    else
      memcpy((char *)v70 + 42, &v281[1], __n);
  }
  *(_DWORD *)&v71[__n] = 1936746016;
  if (*(_DWORD *)v53 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v53, v69);
  else
    *(_DWORD *)v53 -= 2;
  v72 = WebCore::MockRealtimeVideoSource::DrawingState::statsFont((WebCore::MockRealtimeVideoSource::DrawingState *)__n_4);
  v73 = (WTF::StringImpl *)*((unsigned int *)v70 + 1);
  if (((*((_DWORD *)v70 + 4) >> 2) & 1) != 0)
  {
    if ((_DWORD)v73)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_127:
      v74 = *(WTF::StringImpl **)__src;
      goto LABEL_128;
    }
  }
  else if ((_DWORD)v73)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    goto LABEL_127;
  }
  v74 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
LABEL_128:
  *(_DWORD *)__src = 0;
  if (v74)
    *(_DWORD *)v74 += 2;
  v274 = v74;
  v275 = 0;
  v276 = 1;
  v277 = 0x3F80000000000000;
  v278 = 0;
  v279 = 4;
  v280 = v280 & 0xE0 | 8;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
      WTF::StringImpl::destroy(v74, v73);
    else
      *(_DWORD *)v74 -= 2;
  }
  (*(void (**)(uint64_t, WebCore::FontCascade *, char *, float *, _QWORD, _QWORD))(*(_QWORD *)v10 + 520))(v10, v72, __src, &v266, 0, 0);
  v76 = v274;
  v274 = 0;
  if (v76)
  {
    if (*(_DWORD *)v76 == 2)
      WTF::StringImpl::destroy(v76, v75);
    else
      *(_DWORD *)v76 -= 2;
  }
  v266 = v266 + 0.0;
  v267 = *(float *)&__n_4[8] + v267;
  WTF::numberToFixedWidthString();
  v77 = strlen(__src);
  v281[0] = v77;
  if (v77 < 0
    || __OFADD__(v77, 4)
    || (v78 = (v77 + 25), __OFADD__(v77 + 4, 21))
    || (WTF::tryFastCompactMalloc((WTF *)(v78 + 20)), (v80 = v258) == 0))
  {
    __break(0xC471u);
    JUMPOUT(0x1962D0F2CLL);
  }
  *(_DWORD *)v258 = 2;
  *((_DWORD *)v80 + 1) = v78;
  *((_QWORD *)v80 + 1) = (char *)v80 + 20;
  *((_DWORD *)v80 + 4) = 4;
  qmemcpy((char *)v80 + 20, "Observed frame rate: ", 21);
  v81 = (char *)v80 + 41;
  if (v281[0])
  {
    if (v281[0] == 1)
      *v81 = __src[0];
    else
      memcpy((char *)v80 + 41, __src, v281[0]);
  }
  *(_DWORD *)&v81[v281[0]] = 1936746016;
  if (*(_DWORD *)v70 == 2)
    WTF::StringImpl::destroy(v70, v79);
  else
    *(_DWORD *)v70 -= 2;
  v82 = WebCore::MockRealtimeVideoSource::DrawingState::statsFont((WebCore::MockRealtimeVideoSource::DrawingState *)__n_4);
  v83 = (WTF::StringImpl *)*((unsigned int *)v80 + 1);
  if (((*((_DWORD *)v80 + 4) >> 2) & 1) != 0)
  {
    if ((_DWORD)v83)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_150:
      v84 = v258;
      goto LABEL_151;
    }
  }
  else if ((_DWORD)v83)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    goto LABEL_150;
  }
  v84 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
LABEL_151:
  LODWORD(v258) = 0;
  if (v84)
    *(_DWORD *)v84 += 2;
  v259 = v84;
  v260 = 0;
  v261 = 1;
  v262 = 0x3F80000000000000;
  v263 = 0;
  v264 = 4;
  v265 = v265 & 0xE0 | 8;
  if (v84)
  {
    if (*(_DWORD *)v84 == 2)
      WTF::StringImpl::destroy(v84, v83);
    else
      *(_DWORD *)v84 -= 2;
  }
  (*(void (**)(uint64_t, WebCore::FontCascade *, WTF::StringImpl **, float *, _QWORD, _QWORD))(*(_QWORD *)v10 + 520))(v10, v82, &v258, &v266, 0, 0);
  v86 = v259;
  v259 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
      WTF::StringImpl::destroy(v86, v85);
    else
      *(_DWORD *)v86 -= 2;
  }
  v87 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
  v266 = v266 + 0.0;
  v267 = *(float *)&__n_4[8] + v267;
  v258 = (WTF::StringImpl *)"Size: ";
  LODWORD(v259) = 6;
  v270 = HIDWORD(v87);
  v271 = v87;
  v272.i64[0] = (uint64_t)" x ";
  v272.i32[2] = 3;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((uint64_t)&v258, &v271, (uint64_t)&v272, &v270, &v257);
  v89 = (unsigned int *)v257;
  if (!v257)
  {
    __break(0xC471u);
    JUMPOUT(0x1962D0F9CLL);
  }
  v257 = 0;
  if (*(_DWORD *)v80 == 2)
  {
    WTF::StringImpl::destroy(v80, v88);
    v208 = v257;
    v257 = 0;
    if (v208)
    {
      if (*(_DWORD *)v208 == 2)
        WTF::StringImpl::destroy(v208, v207);
      else
        *(_DWORD *)v208 -= 2;
    }
  }
  else
  {
    *(_DWORD *)v80 -= 2;
  }
  v90 = WebCore::MockRealtimeVideoSource::DrawingState::statsFont((WebCore::MockRealtimeVideoSource::DrawingState *)__n_4);
  v91 = (WTF::StringImpl *)v89[1];
  if (((v89[4] >> 2) & 1) != 0)
  {
    if ((_DWORD)v91)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_167:
      v92 = v258;
      goto LABEL_168;
    }
  }
  else if ((_DWORD)v91)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    goto LABEL_167;
  }
  v92 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
LABEL_168:
  LODWORD(v258) = 0;
  if (v92)
    *(_DWORD *)v92 += 2;
  v259 = v92;
  v260 = 0;
  v261 = 1;
  v262 = 0x3F80000000000000;
  v263 = 0;
  v264 = 4;
  v265 = v265 & 0xE0 | 8;
  if (v92)
  {
    if (*(_DWORD *)v92 == 2)
      WTF::StringImpl::destroy(v92, v91);
    else
      *(_DWORD *)v92 -= 2;
  }
  (*(void (**)(uint64_t, WebCore::FontCascade *, WTF::StringImpl **, float *, _QWORD, _QWORD))(*(_QWORD *)v10 + 520))(v10, v90, &v258, &v266, 0, 0);
  v94 = v259;
  v259 = 0;
  if (v94)
  {
    if (*(_DWORD *)v94 == 2)
      WTF::StringImpl::destroy(v94, v93);
    else
      *(_DWORD *)v94 -= 2;
  }
  if (*(_DWORD *)(a2 + 2192) == 2)
  {
    v266 = v266 + 0.0;
    v267 = *(float *)&__n_4[8] + v267;
    v258 = (WTF::StringImpl *)"Preset size: ";
    LODWORD(v259) = 13;
    v272.i64[0] = (uint64_t)" x ";
    v272.i32[2] = 3;
    v270 = v255;
    v271 = this;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((uint64_t)&v258, &v271, (uint64_t)&v272, &v270, &v257);
    v96 = (unsigned int *)v257;
    if (!v257)
    {
      __break(0xC471u);
      JUMPOUT(0x1962D0FA4);
    }
    v257 = 0;
    if (*v89 == 2)
    {
      WTF::StringImpl::destroy((WTF::StringImpl *)v89, v95);
      v210 = v257;
      v257 = 0;
      if (v210)
      {
        if (*(_DWORD *)v210 == 2)
          WTF::StringImpl::destroy(v210, v209);
        else
          *(_DWORD *)v210 -= 2;
      }
    }
    else
    {
      *v89 -= 2;
    }
    v97 = WebCore::MockRealtimeVideoSource::DrawingState::statsFont((WebCore::MockRealtimeVideoSource::DrawingState *)__n_4);
    v98 = (WTF::StringImpl *)v96[1];
    if (((v96[4] >> 2) & 1) != 0)
    {
      if ((_DWORD)v98)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_189:
        v101 = v258;
LABEL_190:
        LODWORD(v258) = 0;
        if (v101)
          *(_DWORD *)v101 += 2;
        v259 = v101;
        v260 = 0;
        v261 = 1;
        v262 = 0x3F80000000000000;
        v263 = 0;
        v264 = 4;
        v265 = v265 & 0xE0 | 8;
        if (v101)
        {
          if (*(_DWORD *)v101 == 2)
            WTF::StringImpl::destroy(v101, v98);
          else
            *(_DWORD *)v101 -= 2;
        }
        (*(void (**)(uint64_t, WebCore::FontCascade *, WTF::StringImpl **, float *, _QWORD, _QWORD))(*(_QWORD *)v10 + 520))(v10, v97, &v258, &v266, 0, 0);
        v103 = v259;
        v259 = 0;
        if (v103)
        {
          if (*(_DWORD *)v103 == 2)
            WTF::StringImpl::destroy(v103, v102);
          else
            *(_DWORD *)v103 -= 2;
        }
        switch(*(_BYTE *)(a2 + 272))
        {
          case 0:
            v104 = vdupq_n_s64(8uLL);
            v105 = "Unknown";
            goto LABEL_205;
          case 1:
            v104 = vdupq_n_s64(0xCuLL);
            v105 = "User facing";
            goto LABEL_205;
          case 2:
            v104 = vdupq_n_s64(0x13uLL);
            v105 = "Environment facing";
            goto LABEL_205;
          case 3:
            v104 = vdupq_n_s64(0xCuLL);
            v105 = "Left facing";
            goto LABEL_205;
          case 4:
            v104 = vdupq_n_s64(0xDuLL);
            v105 = "Right facing";
LABEL_205:
            v104.i64[0] = (uint64_t)v105;
            break;
          default:
            v104 = 0uLL;
            break;
        }
        v258 = (WTF::StringImpl *)"Camera: ";
        v259 = (WTF::StringImpl *)9;
        v272 = v104;
        WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral>(&v258, (uint64_t)&v272, &v257);
        v89 = (unsigned int *)v257;
        if (!v257)
        {
          __break(0xC471u);
          JUMPOUT(0x1962D0FACLL);
        }
        v257 = 0;
        if (*v96 == 2)
        {
          WTF::StringImpl::destroy((WTF::StringImpl *)v96, v106);
          v212 = v257;
          v257 = 0;
          if (v212)
          {
            if (*(_DWORD *)v212 == 2)
              WTF::StringImpl::destroy(v212, v211);
            else
              *(_DWORD *)v212 -= 2;
          }
        }
        else
        {
          *v96 -= 2;
        }
        v266 = v266 + 0.0;
        v267 = *(float *)&__n_4[8] + v267;
        v99 = WebCore::MockRealtimeVideoSource::DrawingState::statsFont((WebCore::MockRealtimeVideoSource::DrawingState *)__n_4);
        LODWORD(v258) = 0;
        *v89 += 2;
        v259 = (WTF::StringImpl *)v89;
        goto LABEL_210;
      }
    }
    else if ((_DWORD)v98)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      goto LABEL_189;
    }
    v101 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_190;
  }
  if (!*(_QWORD *)(a2 + 120))
    goto LABEL_213;
  v266 = v266 + 0.0;
  v267 = *(float *)&__n_4[8] + v267;
  v99 = WebCore::MockRealtimeVideoSource::DrawingState::statsFont((WebCore::MockRealtimeVideoSource::DrawingState *)__n_4);
  LODWORD(v258) = 0;
  v100 = *(WTF::StringImpl **)(a2 + 120);
  if (v100)
    *(_DWORD *)v100 += 2;
  v259 = v100;
LABEL_210:
  v260 = 0;
  v261 = 1;
  v262 = 0x3F80000000000000;
  v263 = 0;
  v264 = 4;
  v265 = v265 & 0xE0 | 8;
  (*(void (**)(uint64_t, WebCore::FontCascade *, WTF::StringImpl **, float *, _QWORD, _QWORD))(*(_QWORD *)v10 + 520))(v10, v99, &v258, &v266, 0, 0);
  v107 = v259;
  v259 = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
      WTF::StringImpl::destroy(v107, v93);
    else
      *(_DWORD *)v107 -= 2;
  }
LABEL_213:
  *(float *)&v108 = v16 * 0.6;
  *(float *)&v109 = v2 * 0.6;
  v272.i64[0] = __PAIR64__(v109, v108);
  v110 = *(_DWORD *)(a2 + 1704) % 0x3Cu;
  if (v110 > 0xF)
  {
    if (v110 - 31 > 0xE)
      goto LABEL_236;
    v258 = (WTF::StringImpl *)0x11040000FFFF00FFLL;
    WebCore::GraphicsContext::setFillColor((WebCore::GraphicsContext *)v10, (const WebCore::Color *)&v258);
    if (((unint64_t)v258 & 0x8000000000000) != 0)
    {
      v250 = (unsigned int *)((unint64_t)v258 & 0xFFFFFFFFFFFFLL);
      do
      {
        v253 = __ldaxr(v250);
        v254 = v253 - 1;
      }
      while (__stlxr(v254, v250));
      if (!v254)
        goto LABEL_507;
    }
  }
  else
  {
    v258 = (WTF::StringImpl *)0x1104000000FFFFFFLL;
    WebCore::GraphicsContext::setFillColor((WebCore::GraphicsContext *)v10, (const WebCore::Color *)&v258);
    if (((unint64_t)v258 & 0x8000000000000) != 0)
    {
      v250 = (unsigned int *)((unint64_t)v258 & 0xFFFFFFFFFFFFLL);
      do
      {
        v251 = __ldaxr(v250);
        v252 = v251 - 1;
      }
      while (__stlxr(v252, v250));
      if (!v252)
      {
LABEL_507:
        atomic_store(1u, v250);
        WTF::fastFree((WTF *)v250, v111);
      }
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v112 = (unsigned int *)v258;
  v114 = WebCore::MockRealtimeVideoSource::DrawingState::bipBopFont((WebCore::MockRealtimeVideoSource::DrawingState *)__n_4);
  if (v112)
  {
    v113 = (WTF::StringImpl *)v112[1];
    if (((v112[4] >> 2) & 1) != 0)
    {
      if ((_DWORD)v113)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_224:
        v115 = v258;
        goto LABEL_225;
      }
    }
    else if ((_DWORD)v113)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      goto LABEL_224;
    }
  }
  v115 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
LABEL_225:
  LODWORD(v258) = 0;
  if (v115)
    *(_DWORD *)v115 += 2;
  v259 = v115;
  v260 = 0;
  v261 = 1;
  v262 = 0x3F80000000000000;
  v263 = 0;
  v264 = 4;
  v265 = v265 & 0xE0 | 8;
  if (v115)
  {
    if (*(_DWORD *)v115 == 2)
      WTF::StringImpl::destroy(v115, v113);
    else
      *(_DWORD *)v115 -= 2;
  }
  (*(void (**)(uint64_t, WebCore::FontCascade *, WTF::StringImpl **, int64x2_t *, _QWORD, _QWORD))(*(_QWORD *)v10 + 520))(v10, v114, &v258, &v272, 0, 0);
  v116 = v259;
  v259 = 0;
  if (!v116)
  {
LABEL_233:
    if (v112)
      goto LABEL_234;
    goto LABEL_236;
  }
  if (*(_DWORD *)v116 != 2)
  {
    *(_DWORD *)v116 -= 2;
    goto LABEL_233;
  }
  WTF::StringImpl::destroy(v116, v93);
  if (v112)
  {
LABEL_234:
    if (*v112 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v112, v93);
    else
      *v112 -= 2;
  }
LABEL_236:
  if (*v89 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v89, v93);
  else
    *v89 -= 2;
  WebCore::MockRealtimeVideoSource::DrawingState::~DrawingState((WebCore::MockRealtimeVideoSource::DrawingState *)__n_4, v93);
  if (*(_BYTE *)(a2 + 2256))
    v117 = *(_QWORD *)(a2 + 2200);
  else
    v117 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
  v118 = (double)(int)v117 * 0.09;
  *(float *)&v119 = (double)(int)v117 * 0.8;
  *(float *)&v120 = (double)SHIDWORD(v117) * 0.3;
  *(_QWORD *)&v281[1] = __PAIR64__(v120, v119);
  v121 = *(unsigned int *)(a2 + 1656);
  if ((_DWORD)v121 != -1)
  {
    if (!(_DWORD)v121)
      goto LABEL_245;
    ((void (*)(_BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v121])(__n_4, a2 + 1600);
  }
  *(_DWORD *)(a2 + 1656) = 0;
LABEL_245:
  WebCore::Path::moveTo((WebCore::Path *)(a2 + 1592), (const WebCore::FloatPoint *)&v281[1]);
  WebCore::Path::addArc(a2 + 1592, (uint64_t *)&v281[1], 0, v118, 0.0, 6.2832);
  v122 = *(_DWORD *)(a2 + 1656);
  if (v122 == 2)
  {
    v123 = *(_QWORD *)(a2 + 1600);
    if (!v123)
      goto LABEL_262;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v123 + 200))(v123) & 1) != 0)
      goto LABEL_263;
    v122 = *(_DWORD *)(a2 + 1656);
  }
  else if (!v122)
  {
    goto LABEL_263;
  }
  if (v122 == 2)
  {
    v125 = *(_QWORD *)(a2 + 1600);
    if (!v125)
      goto LABEL_262;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v125 + 208))(v125) & 1) == 0)
    {
      if (*(_DWORD *)(a2 + 1656) != 1)
        goto LABEL_262;
      v124 = *(_DWORD *)(a2 + 1652);
LABEL_260:
      if (v124 == 5)
      {
        *(_OWORD *)__n_4 = *(_OWORD *)(a2 + 1600);
        *(_QWORD *)&__n_4[13] = *(_QWORD *)(a2 + 1613);
        v126 = *(_OWORD *)&__n_4[16];
        *(_OWORD *)(a2 + 1632) = v291;
        *(_OWORD *)(a2 + 1600) = *(_OWORD *)__n_4;
        *(_DWORD *)(a2 + 1648) = v292;
        *(_OWORD *)(a2 + 1616) = v126;
        *(_DWORD *)(a2 + 1652) = 6;
        goto LABEL_263;
      }
LABEL_262:
      v127 = WebCore::Path::ensureImpl((WebCore::Path *)(a2 + 1592));
      (*(void (**)(uint64_t))(*(_QWORD *)v127 + 120))(v127);
    }
  }
  else
  {
    if (v122 != 1)
      goto LABEL_262;
    v124 = *(_DWORD *)(a2 + 1652);
    if (v124 != 6 && v124 != 15)
      goto LABEL_260;
  }
LABEL_263:
  *(_QWORD *)__n_4 = 0x11040000FFFFFFFFLL;
  WebCore::GraphicsContext::setFillColor((WebCore::GraphicsContext *)v10, (const WebCore::Color *)__n_4);
  if ((*(_QWORD *)__n_4 & 0x8000000000000) != 0)
  {
    v217 = (unsigned int *)(*(_QWORD *)__n_4 & 0xFFFFFFFFFFFFLL);
    do
    {
      v218 = __ldaxr(v217);
      v219 = v218 - 1;
    }
    while (__stlxr(v219, v217));
    if (!v219)
    {
      atomic_store(1u, v217);
      WTF::fastFree((WTF *)v217, v128);
    }
  }
  if (*(_BYTE *)(v10 + 192))
  {
    *(_BYTE *)(v10 + 192) = 0;
    *(_DWORD *)(v10 + 184) |= 2u;
  }
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v10 + 88))(v10, v17);
  v129 = ((__n128 (*)(uint64_t, uint64_t))*(_QWORD *)(*(_QWORD *)v10 + 176))(v10, a2 + 1592);
  v130 = *(double *)(a2 + 232);
  v129.n128_u32[0] = *(_DWORD *)(a2 + 1704);
  v131 = ((fmod((double)v129.n128_u64[0], v130) + 0.5) * (2.0 / v130) + 1.0) * 3.14159274;
  v132 = *(unsigned int *)(a2 + 1656);
  if ((_DWORD)v132 != -1)
  {
    if (!(_DWORD)v132)
      goto LABEL_270;
    ((void (*)(_BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v132])(__n_4, a2 + 1600);
  }
  *(_DWORD *)(a2 + 1656) = 0;
LABEL_270:
  WebCore::Path::moveTo((WebCore::Path *)(a2 + 1592), (const WebCore::FloatPoint *)&v281[1]);
  WebCore::Path::addArc(a2 + 1592, (uint64_t *)&v281[1], 0, v118, 4.7124, v131);
  v133 = *(_DWORD *)(a2 + 1656);
  if (v133 == 2)
  {
    v134 = *(_QWORD *)(a2 + 1600);
    if (!v134)
      goto LABEL_287;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v134 + 200))(v134) & 1) != 0)
      goto LABEL_288;
    v133 = *(_DWORD *)(a2 + 1656);
  }
  else if (!v133)
  {
    goto LABEL_288;
  }
  if (v133 == 2)
  {
    v136 = *(_QWORD *)(a2 + 1600);
    if (!v136)
      goto LABEL_287;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v136 + 208))(v136) & 1) == 0)
    {
      if (*(_DWORD *)(a2 + 1656) != 1)
        goto LABEL_287;
      v135 = *(_DWORD *)(a2 + 1652);
LABEL_285:
      if (v135 == 5)
      {
        *(_OWORD *)__n_4 = *(_OWORD *)(a2 + 1600);
        *(_QWORD *)&__n_4[13] = *(_QWORD *)(a2 + 1613);
        v137 = *(_OWORD *)&__n_4[16];
        *(_OWORD *)(a2 + 1632) = v291;
        *(_OWORD *)(a2 + 1600) = *(_OWORD *)__n_4;
        *(_DWORD *)(a2 + 1648) = v292;
        *(_OWORD *)(a2 + 1616) = v137;
        *(_DWORD *)(a2 + 1652) = 6;
        goto LABEL_288;
      }
LABEL_287:
      v138 = WebCore::Path::ensureImpl((WebCore::Path *)(a2 + 1592));
      (*(void (**)(uint64_t))(*(_QWORD *)v138 + 120))(v138);
    }
  }
  else
  {
    if (v133 != 1)
      goto LABEL_287;
    v135 = *(_DWORD *)(a2 + 1652);
    if (v135 != 6 && v135 != 15)
      goto LABEL_285;
  }
LABEL_288:
  *(_QWORD *)__n_4 = 0x11040000A0A0A0FFLL;
  WebCore::GraphicsContext::setFillColor((WebCore::GraphicsContext *)v10, (const WebCore::Color *)__n_4);
  if ((*(_QWORD *)__n_4 & 0x8000000000000) != 0)
  {
    v220 = (unsigned int *)(*(_QWORD *)__n_4 & 0xFFFFFFFFFFFFLL);
    do
    {
      v221 = __ldaxr(v220);
      v222 = v221 - 1;
    }
    while (__stlxr(v222, v220));
    if (!v222)
    {
      atomic_store(1u, v220);
      WTF::fastFree((WTF *)v220, v139);
    }
  }
  if (*(_BYTE *)(v10 + 192))
  {
    *(_BYTE *)(v10 + 192) = 0;
    *(_DWORD *)(v10 + 184) |= 2u;
  }
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v10 + 88))(v10, v17);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 176))(v10, a2 + 1592);
  if (*(_BYTE *)(a2 + 2256))
    v140 = *(_QWORD *)(a2 + 2200);
  else
    v140 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
  v141 = *(unsigned int *)(a2 + 1656);
  if ((_DWORD)v141 == -1)
    goto LABEL_297;
  if ((_DWORD)v141)
  {
    ((void (*)(_BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v141])(__n_4, a2 + 1600);
LABEL_297:
    *(_DWORD *)(a2 + 1656) = 0;
  }
  *(_QWORD *)&v281[1] = 0x4000000040000000;
  *(float *)&v282 = (float)(v140 - 3);
  *((float *)&v282 + 1) = (float)(HIDWORD(v140) - 3);
  *(_QWORD *)__n_4 = 0x11040000FFFFFFFFLL;
  WebCore::GraphicsContext::setStrokeColor((WebCore::GraphicsContext *)v10, (const WebCore::Color *)__n_4);
  if ((*(_QWORD *)__n_4 & 0x8000000000000) != 0)
  {
    v223 = (unsigned int *)(*(_QWORD *)__n_4 & 0xFFFFFFFFFFFFLL);
    do
    {
      v224 = __ldaxr(v223);
      v225 = v224 - 1;
    }
    while (__stlxr(v225, v223));
    if (!v225)
    {
      atomic_store(1u, v223);
      WTF::fastFree((WTF *)v223, v142);
    }
  }
  if (*(float *)(v10 + 188) != 3.0)
  {
    *(_DWORD *)(v10 + 184) |= 8u;
    *(_DWORD *)(v10 + 188) = 1077936128;
  }
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v10 + 88))(v10, v17);
  (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v10 + 304))(v10, a2 + 1664, 0.0);
  v143.n128_f64[0] = WebCore::Path::addRect((WebCore::Path *)(a2 + 1592), (const WebCore::FloatRect *)&v281[1]);
  v144 = *(_DWORD *)(a2 + 1656);
  if (v144 == 2)
  {
    v145 = *(_QWORD *)(a2 + 1600);
    if (!v145)
      goto LABEL_318;
    if (((*(uint64_t (**)(uint64_t, double))(*(_QWORD *)v145 + 200))(v145, v143.n128_f64[0]) & 1) != 0)
      goto LABEL_319;
    v144 = *(_DWORD *)(a2 + 1656);
  }
  else if (!v144)
  {
    goto LABEL_319;
  }
  if (v144 == 2)
  {
    v147 = *(_QWORD *)(a2 + 1600);
    if (v147)
    {
      if (((*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v147 + 208))(v147, v143) & 1) != 0)
        goto LABEL_319;
      if (*(_DWORD *)(a2 + 1656) == 1)
      {
        v146 = *(_DWORD *)(a2 + 1652);
        goto LABEL_316;
      }
    }
LABEL_318:
    v149 = WebCore::Path::ensureImpl((WebCore::Path *)(a2 + 1592));
    (*(void (**)(uint64_t))(*(_QWORD *)v149 + 120))(v149);
    goto LABEL_319;
  }
  if (v144 != 1)
    goto LABEL_318;
  v146 = *(_DWORD *)(a2 + 1652);
  if (v146 != 6 && v146 != 15)
  {
LABEL_316:
    if (v146 == 5)
    {
      *(_OWORD *)__n_4 = *(_OWORD *)(a2 + 1600);
      *(_QWORD *)&__n_4[13] = *(_QWORD *)(a2 + 1613);
      v148 = *(_OWORD *)&__n_4[16];
      *(_OWORD *)(a2 + 1632) = v291;
      v143 = *(__n128 *)__n_4;
      *(_OWORD *)(a2 + 1600) = *(_OWORD *)__n_4;
      *(_DWORD *)(a2 + 1648) = v292;
      *(_OWORD *)(a2 + 1616) = v148;
      *(_DWORD *)(a2 + 1652) = 6;
      goto LABEL_319;
    }
    goto LABEL_318;
  }
LABEL_319:
  (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v10 + 184))(v10, a2 + 1592, v143);
  *(_QWORD *)__n_4 = 0;
  *(_QWORD *)&__n_4[8] = 0;
  (*(void (**)(uint64_t, _BYTE *, float))(*(_QWORD *)v10 + 304))(v10, __n_4, 0.0);
  v151 = *(WTF **)__n_4;
  if (*(_QWORD *)__n_4)
  {
    *(_QWORD *)__n_4 = 0;
    *(_DWORD *)&__n_4[8] = 0;
    WTF::fastFree(v151, v150);
  }
  v152 = (double)(int)v140 * 0.035;
  v153 = (double)SHIDWORD(v140) * 0.6;
  v154 = *(unsigned int *)(a2 + 1656);
  if ((_DWORD)v154 != -1)
  {
    if (!(_DWORD)v154)
      goto LABEL_325;
    ((void (*)(_BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v154])(__n_4, a2 + 1600);
  }
  *(_DWORD *)(a2 + 1656) = 0;
LABEL_325:
  *(_DWORD *)__n_4 = 0;
  *(float *)&__n_4[4] = v152 + v153;
  WebCore::Path::moveTo((WebCore::Path *)(a2 + 1592), (const WebCore::FloatPoint *)__n_4);
  *(float *)__n_4 = (float)(int)v140;
  *(float *)&__n_4[4] = v152 + v153;
  WebCore::Path::addLineTo(a2 + 1592, (const WebCore::FloatPoint *)__n_4);
  v155 = *(_DWORD *)(a2 + 1656);
  if (v155 == 2)
  {
    v156 = *(_QWORD *)(a2 + 1600);
    if (!v156)
      goto LABEL_342;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v156 + 200))(v156) & 1) != 0)
      goto LABEL_343;
    v155 = *(_DWORD *)(a2 + 1656);
  }
  else if (!v155)
  {
    goto LABEL_343;
  }
  if (v155 == 2)
  {
    v158 = *(_QWORD *)(a2 + 1600);
    if (!v158)
      goto LABEL_342;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v158 + 208))(v158) & 1) == 0)
    {
      if (*(_DWORD *)(a2 + 1656) != 1)
        goto LABEL_342;
      v157 = *(_DWORD *)(a2 + 1652);
LABEL_340:
      if (v157 == 5)
      {
        *(_OWORD *)__n_4 = *(_OWORD *)(a2 + 1600);
        *(_QWORD *)&__n_4[13] = *(_QWORD *)(a2 + 1613);
        v159 = *(_OWORD *)&__n_4[16];
        *(_OWORD *)(a2 + 1632) = v291;
        *(_OWORD *)(a2 + 1600) = *(_OWORD *)__n_4;
        *(_DWORD *)(a2 + 1648) = v292;
        *(_OWORD *)(a2 + 1616) = v159;
        *(_DWORD *)(a2 + 1652) = 6;
        goto LABEL_343;
      }
LABEL_342:
      v160 = WebCore::Path::ensureImpl((WebCore::Path *)(a2 + 1592));
      (*(void (**)(uint64_t))(*(_QWORD *)v160 + 120))(v160);
    }
  }
  else
  {
    if (v155 != 1)
      goto LABEL_342;
    v157 = *(_DWORD *)(a2 + 1652);
    if (v157 != 6 && v157 != 15)
      goto LABEL_340;
  }
LABEL_343:
  *(_QWORD *)__n_4 = 0x11040000FFFFFFFFLL;
  WebCore::GraphicsContext::setStrokeColor((WebCore::GraphicsContext *)v10, (const WebCore::Color *)__n_4);
  if ((*(_QWORD *)__n_4 & 0x8000000000000) != 0)
  {
    v226 = (unsigned int *)(*(_QWORD *)__n_4 & 0xFFFFFFFFFFFFLL);
    do
    {
      v227 = __ldaxr(v226);
      v228 = v227 - 1;
    }
    while (__stlxr(v228, v226));
    if (!v228)
    {
      atomic_store(1u, v226);
      WTF::fastFree((WTF *)v226, v161);
    }
  }
  if (*(float *)(v10 + 188) != 2.0)
  {
    *(_DWORD *)(v10 + 184) |= 8u;
    *(_DWORD *)(v10 + 188) = 0x40000000;
  }
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v10 + 88))(v10, v17);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 184))(v10, a2 + 1592);
  if (*(float *)(v10 + 188) != 1.0)
  {
    *(_DWORD *)(v10 + 184) |= 8u;
    *(_DWORD *)(v10 + 188) = 1065353216;
  }
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v10 + 88))(v10, v17);
  v162 = *(unsigned int *)(a2 + 1656);
  if ((_DWORD)v162 == -1)
    goto LABEL_351;
  if ((_DWORD)v162)
  {
    ((void (*)(_BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v162])(__n_4, a2 + 1600);
LABEL_351:
    *(_DWORD *)(a2 + 1656) = 0;
  }
  v163 = v152 * 0.25;
  if ((float)(v152 * 0.25) <= 0.0)
  {
    v167 = v152 + 2.0;
    v168 = (float)(v152 + 2.0) + v152;
  }
  else
  {
    LODWORD(v140) = 0;
    v164 = 1;
    do
    {
      *(float *)__n_4 = v152 + (float)v140;
      *(float *)&__n_4[4] = (double)SHIDWORD(v140) * 0.6;
      WebCore::Path::moveTo((WebCore::Path *)(a2 + 1592), (const WebCore::FloatPoint *)__n_4);
      *(float *)__n_4 = v152 + (float)v140;
      *(float *)&__n_4[4] = v152 + v153;
      WebCore::Path::addLineTo(a2 + 1592, (const WebCore::FloatPoint *)__n_4);
      v165 = (float)v164++;
      LODWORD(v140) = v140 + 4;
    }
    while (v163 > v165);
    v166 = 0;
    v167 = v152 + 2.0;
    v168 = (float)(v152 + 2.0) + v152;
    v169 = 1;
    do
    {
      *(float *)__n_4 = (float)(v152 + 2.0) + v152;
      *(float *)&__n_4[4] = v153 + (float)v166;
      WebCore::Path::moveTo((WebCore::Path *)(a2 + 1592), (const WebCore::FloatPoint *)__n_4);
      *(float *)__n_4 = (float)(v168 + v152) + -1.0;
      *(float *)&__n_4[4] = v153 + (float)v166;
      WebCore::Path::addLineTo(a2 + 1592, (const WebCore::FloatPoint *)__n_4);
      v170 = (float)v169++;
      v166 += 4;
    }
    while (v163 > v170);
  }
  if (*(float *)(v10 + 188) != 3.0)
  {
    *(_DWORD *)(v10 + 184) |= 8u;
    *(_DWORD *)(v10 + 188) = 1077936128;
  }
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v10 + 88))(v10, v17);
  v171 = v152 * 0.125;
  if ((float)(v152 * 0.125) > 0.0)
  {
    v172 = 0;
    v173 = v168 + v167;
    LODWORD(v140) = 1;
    do
    {
      *(float *)__n_4 = v173 + (float)v172;
      *(float *)&__n_4[4] = (double)SHIDWORD(v140) * 0.6;
      WebCore::Path::moveTo((WebCore::Path *)(a2 + 1592), (const WebCore::FloatPoint *)__n_4);
      *(float *)__n_4 = v173 + (float)v172;
      *(float *)&__n_4[4] = (float)(v152 + v153) + -1.0;
      WebCore::Path::addLineTo(a2 + 1592, (const WebCore::FloatPoint *)__n_4);
      v174 = (float)v140;
      LODWORD(v140) = v140 + 1;
      v172 += 8;
    }
    while (v171 > v174);
    v175 = 0;
    v176 = v167 + v173;
    v177 = (float)((float)(v167 + v173) + v152) + -1.0;
    v178 = 1;
    do
    {
      *(float *)__n_4 = v176;
      *(float *)&__n_4[4] = v153 + (float)v175;
      WebCore::Path::moveTo((WebCore::Path *)(a2 + 1592), (const WebCore::FloatPoint *)__n_4);
      *(float *)__n_4 = v177;
      *(float *)&__n_4[4] = v153 + (float)v175;
      WebCore::Path::addLineTo(a2 + 1592, (const WebCore::FloatPoint *)__n_4);
      v179 = (float)v178++;
      v175 += 8;
    }
    while (v171 > v179);
  }
  v180 = v167 + v153;
  v181 = v152 + 1.0;
  *(float *)__n_4 = v152;
  *(float *)&__n_4[4] = v180;
  *(float *)&__n_4[8] = v152 + 1.0;
  *(float *)&__n_4[12] = v152 + 1.0;
  *(_QWORD *)__src = 0x11040000FFFFFFFFLL;
  (*(void (**)(uint64_t, _BYTE *, char *))(*(_QWORD *)v10 + 224))(v10, __n_4, __src);
  if ((*(_QWORD *)__src & 0x8000000000000) != 0)
  {
    v229 = (unsigned int *)(*(_QWORD *)__src & 0xFFFFFFFFFFFFLL);
    do
    {
      v230 = __ldaxr(v229);
      v231 = v230 - 1;
    }
    while (__stlxr(v231, v229));
    if (!v231)
    {
      atomic_store(1u, v229);
      WTF::fastFree((WTF *)v229, v182);
    }
  }
  v183 = v181 + v152;
  *(float *)__n_4 = v183;
  *(float *)&__n_4[4] = v180;
  *(float *)&__n_4[8] = v181;
  *(float *)&__n_4[12] = v181;
  *(_QWORD *)__src = 0x11040000FFFF00FFLL;
  (*(void (**)(uint64_t, _BYTE *, char *))(*(_QWORD *)v10 + 224))(v10, __n_4, __src);
  if ((*(_QWORD *)__src & 0x8000000000000) != 0)
  {
    v232 = (unsigned int *)(*(_QWORD *)__src & 0xFFFFFFFFFFFFLL);
    do
    {
      v233 = __ldaxr(v232);
      v234 = v233 - 1;
    }
    while (__stlxr(v234, v232));
    if (!v234)
    {
      atomic_store(1u, v232);
      WTF::fastFree((WTF *)v232, v184);
    }
  }
  v185 = v181 + v183;
  *(float *)__n_4 = v185;
  *(float *)&__n_4[4] = v180;
  *(float *)&__n_4[8] = v181;
  *(float *)&__n_4[12] = v181;
  *(_QWORD *)__src = 0x1104000000FFFFFFLL;
  (*(void (**)(uint64_t, _BYTE *, char *))(*(_QWORD *)v10 + 224))(v10, __n_4, __src);
  if ((*(_QWORD *)__src & 0x8000000000000) != 0)
  {
    v235 = (unsigned int *)(*(_QWORD *)__src & 0xFFFFFFFFFFFFLL);
    do
    {
      v236 = __ldaxr(v235);
      v237 = v236 - 1;
    }
    while (__stlxr(v237, v235));
    if (!v237)
    {
      atomic_store(1u, v235);
      WTF::fastFree((WTF *)v235, v186);
    }
  }
  v187 = v181 + v185;
  *(float *)__n_4 = v187;
  *(float *)&__n_4[4] = v180;
  *(float *)&__n_4[8] = v181;
  *(float *)&__n_4[12] = v181;
  *(_QWORD *)__src = 0x11040000008000FFLL;
  (*(void (**)(uint64_t, _BYTE *, char *))(*(_QWORD *)v10 + 224))(v10, __n_4, __src);
  if ((*(_QWORD *)__src & 0x8000000000000) != 0)
  {
    v238 = (unsigned int *)(*(_QWORD *)__src & 0xFFFFFFFFFFFFLL);
    do
    {
      v239 = __ldaxr(v238);
      v240 = v239 - 1;
    }
    while (__stlxr(v240, v238));
    if (!v240)
    {
      atomic_store(1u, v238);
      WTF::fastFree((WTF *)v238, v188);
    }
  }
  v189 = v181 + v187;
  *(float *)__n_4 = v189;
  *(float *)&__n_4[4] = v180;
  *(float *)&__n_4[8] = v181;
  *(float *)&__n_4[12] = v181;
  *(_QWORD *)__src = 0x11040000FF00FFFFLL;
  (*(void (**)(uint64_t, _BYTE *, char *))(*(_QWORD *)v10 + 224))(v10, __n_4, __src);
  if ((*(_QWORD *)__src & 0x8000000000000) != 0)
  {
    v241 = (unsigned int *)(*(_QWORD *)__src & 0xFFFFFFFFFFFFLL);
    do
    {
      v242 = __ldaxr(v241);
      v243 = v242 - 1;
    }
    while (__stlxr(v243, v241));
    if (!v243)
    {
      atomic_store(1u, v241);
      WTF::fastFree((WTF *)v241, v190);
    }
  }
  v191 = v181 + v189;
  *(float *)__n_4 = v191;
  *(float *)&__n_4[4] = v180;
  *(float *)&__n_4[8] = v181;
  *(float *)&__n_4[12] = v181;
  *(_QWORD *)__src = 0x11040000FF0000FFLL;
  (*(void (**)(uint64_t, _BYTE *, char *))(*(_QWORD *)v10 + 224))(v10, __n_4, __src);
  if ((*(_QWORD *)__src & 0x8000000000000) != 0)
  {
    v244 = (unsigned int *)(*(_QWORD *)__src & 0xFFFFFFFFFFFFLL);
    do
    {
      v245 = __ldaxr(v244);
      v246 = v245 - 1;
    }
    while (__stlxr(v246, v244));
    if (!v246)
    {
      atomic_store(1u, v244);
      WTF::fastFree((WTF *)v244, v192);
    }
  }
  *(float *)__n_4 = v181 + v191;
  *(float *)&__n_4[4] = v180;
  *(float *)&__n_4[8] = v181;
  *(float *)&__n_4[12] = v181;
  *(_QWORD *)__src = 0x110400000000FFFFLL;
  (*(void (**)(uint64_t, _BYTE *, char *))(*(_QWORD *)v10 + 224))(v10, __n_4, __src);
  if ((*(_QWORD *)__src & 0x8000000000000) != 0)
  {
    v247 = (unsigned int *)(*(_QWORD *)__src & 0xFFFFFFFFFFFFLL);
    do
    {
      v248 = __ldaxr(v247);
      v249 = v248 - 1;
    }
    while (__stlxr(v249, v247));
    if (!v249)
    {
      atomic_store(1u, v247);
      WTF::fastFree((WTF *)v247, v193);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 184))(v10, a2 + 1592);
  this = (unint64_t)v256;
LABEL_374:
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 456))(a2);
  v194 = WebCore::MockRealtimeVideoSource::imageBufferInternal((WebCore::MockRealtimeVideoSource *)a2);
  v195 = v194;
  if (!v194)
    goto LABEL_384;
  v196 = v194[1];
  if (__ldaxr((unsigned __int8 *)v196))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v196))
  {
    goto LABEL_379;
  }
  MEMORY[0x19AEA534C](v196);
LABEL_379:
  ++*((_QWORD *)v196 + 1);
  v198 = __ldxr((unsigned __int8 *)v196);
  if (v198 != 1)
  {
    __clrex();
    goto LABEL_383;
  }
  if (__stlxr(0, (unsigned __int8 *)v196))
LABEL_383:
    WTF::Lock::unlockSlow((WTF::Lock *)v196);
LABEL_384:
  *(_QWORD *)this = v195;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 104))(v10, 1);
  v200 = v6[1];
  if (__ldaxr((unsigned __int8 *)v200))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v200))
  {
    goto LABEL_388;
  }
  result = (_QWORD *)MEMORY[0x19AEA534C](v200);
LABEL_388:
  v202 = *(_QWORD *)(v200 + 8);
  v203 = v202 - 1;
  *(_QWORD *)(v200 + 8) = v202 - 1;
  if (v202 == 1)
  {
    v213 = *(_QWORD *)(v200 + 16);
    v204 = *(_QWORD *)(v200 + 24);
    *(_QWORD *)(v200 + 24) = 0;
    v205 = v213 != 0;
  }
  else
  {
    v204 = 0;
    v205 = 1;
  }
  v206 = __ldxr((unsigned __int8 *)v200);
  if (v206 != 1)
  {
    __clrex();
LABEL_395:
    result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v200);
    if (v203)
      return result;
    goto LABEL_396;
  }
  if (__stlxr(0, (unsigned __int8 *)v200))
    goto LABEL_395;
  if (v203)
    return result;
LABEL_396:
  if (v204)
    result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v204 + 8))(v204);
  if (!v205)
    return (_QWORD *)WTF::fastFree((WTF *)v200, v199);
  return result;
}

char **WebCore::MockRealtimeVideoSource::imageBufferInternal(WebCore::MockRealtimeVideoSource *this)
{
  char **result;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  float *v22;
  uint64_t v23;
  uint64_t v24;
  float v25[2];
  char v26;
  char **v27;
  char *v28;
  uint64_t v29;

  result = (char **)*((_QWORD *)this + 198);
  if (result)
    return result;
  if (*((_BYTE *)this + 2256))
    v3 = *((_QWORD *)this + 275);
  else
    v3 = (*(uint64_t (**)(WebCore::MockRealtimeVideoSource *))(*(_QWORD *)this + 96))(this);
  v25[0] = (float)(int)v3;
  v25[1] = (float)SHIDWORD(v3);
  v4 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v4 != -1)
  {
    v28 = &v26;
    v27 = &v28;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v27, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  v28 = 0;
  v29 = 0;
  WebCore::ImageBuffer::create<WebCore::ImageBufferCGBitmapBackend,WebCore::ImageBuffer>(v25, (CFTypeRef *)&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 1, 0, (uint64_t *)&v27, 1.0);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v29 + 4));
  result = v27;
  v27 = 0;
  v6 = *((_QWORD *)this + 198);
  *((_QWORD *)this + 198) = result;
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (__ldaxr((unsigned __int8 *)v7))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v7))
    {
      goto LABEL_12;
    }
    MEMORY[0x19AEA534C](v7);
LABEL_12:
    v9 = *(_QWORD *)(v7 + 8);
    v10 = v9 - 1;
    *(_QWORD *)(v7 + 8) = v9 - 1;
    if (v9 == 1)
    {
      v23 = *(_QWORD *)(v7 + 16);
      v11 = *(_QWORD *)(v7 + 24);
      *(_QWORD *)(v7 + 24) = 0;
      v12 = v23 != 0;
    }
    else
    {
      v11 = 0;
      v12 = 1;
    }
    v13 = __ldxr((unsigned __int8 *)v7);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v7))
      {
        if (v10)
          goto LABEL_24;
LABEL_20:
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        if (!v12)
          WTF::fastFree((WTF *)v7, v5);
LABEL_24:
        v14 = (uint64_t)v27;
        v27 = 0;
        if (!v14)
          goto LABEL_41;
        v15 = *(_QWORD *)(v14 + 8);
        if (__ldaxr((unsigned __int8 *)v15))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v15))
        {
          goto LABEL_29;
        }
        MEMORY[0x19AEA534C](v15);
LABEL_29:
        v17 = *(_QWORD *)(v15 + 8);
        v18 = v17 - 1;
        *(_QWORD *)(v15 + 8) = v17 - 1;
        if (v17 == 1)
        {
          v24 = *(_QWORD *)(v15 + 16);
          v19 = *(_QWORD *)(v15 + 24);
          *(_QWORD *)(v15 + 24) = 0;
          v20 = v24 != 0;
        }
        else
        {
          v19 = 0;
          v20 = 1;
        }
        v21 = __ldxr((unsigned __int8 *)v15);
        if (v21 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v15))
          {
            if (!v18)
              goto LABEL_37;
            goto LABEL_41;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v15);
        if (!v18)
        {
LABEL_37:
          if (v19)
            (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
          if (!v20)
            WTF::fastFree((WTF *)v15, v5);
        }
LABEL_41:
        result = (char **)*((_QWORD *)this + 198);
        goto LABEL_42;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
    if (v10)
      goto LABEL_24;
    goto LABEL_20;
  }
LABEL_42:
  if (result)
  {
    v22 = (float *)(*((uint64_t (**)(char **))*result + 2))(result);
    if (v22[47] != 1.0)
    {
      *((_DWORD *)v22 + 46) |= 8u;
      v22[47] = 1.0;
    }
    (*(void (**)(float *, _DWORD *))(*(_QWORD *)v22 + 88))(v22, (_DWORD *)v22 + 2);
    return (char **)*((_QWORD *)this + 198);
  }
  return result;
}

uint64_t WebCore::MockRealtimeVideoSource::orientationChanged(uint64_t this, int a2)
{
  int v2;
  int v3;

  v2 = *(unsigned __int16 *)(this + 2264);
  if (a2 > 89)
  {
    if (a2 == 180)
    {
      v3 = 180;
    }
    else
    {
      if (a2 != 90)
        return this;
      v3 = 90;
    }
  }
  else if (a2 == -90)
  {
    v3 = 270;
  }
  else
  {
    if (a2)
      return this;
    v3 = 0;
  }
  *(_WORD *)(this + 2264) = v3;
  if (v2 != v3)
    return WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers(this, 3u);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::MockRealtimeVideoSource::orientationChanged(uint64_t this, int a2)
{
  int v2;
  int v3;

  v2 = *(unsigned __int16 *)(this + 1824);
  if (a2 > 89)
  {
    if (a2 == 180)
    {
      v3 = 180;
    }
    else
    {
      if (a2 != 90)
        return this;
      v3 = 90;
    }
  }
  else if (a2 == -90)
  {
    v3 = 270;
  }
  else
  {
    if (a2)
      return this;
    v3 = 0;
  }
  *(_WORD *)(this + 1824) = v3;
  if (v2 != v3)
    return WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers(this - 440, 3u);
  return this;
}

_QWORD *WebCore::MockRealtimeVideoSource::monitorOrientation(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  int v15;
  int v16;

  if (*((_DWORD *)result + 548) == 2)
  {
    v2 = (uint64_t)result;
    if (*((_BYTE *)result + 2136))
    {
      v4 = *(unsigned int *)(a2 + 20);
      if ((_DWORD)v4 == *(_DWORD *)(a2 + 16))
      {
        v5 = v4 + (v4 >> 2);
        if (v5 >= 0x10)
          v6 = v5 + 1;
        else
          v6 = 16;
        if (v6 <= v4 + 1)
          v7 = v4 + 1;
        else
          v7 = v6;
        if (v7 >> 29)
        {
          __break(0xC471u);
          return result;
        }
        v8 = *(void **)(a2 + 8);
        v9 = (void *)WTF::fastMalloc((WTF *)(8 * v7));
        *(_DWORD *)(a2 + 16) = v7;
        *(_QWORD *)(a2 + 8) = v9;
        result = memcpy(v9, v8, 8 * v4);
        if (v8)
        {
          if (*(void **)(a2 + 8) == v8)
          {
            *(_QWORD *)(a2 + 8) = 0;
            *(_DWORD *)(a2 + 16) = 0;
          }
          result = (_QWORD *)WTF::fastFree((WTF *)v8, v10);
        }
        v4 = *(unsigned int *)(a2 + 20);
        v11 = (_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v4);
      }
      else
      {
        v11 = (_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v4);
      }
      *v11 = v2 + 440;
      *(_DWORD *)(a2 + 20) = v4 + 1;
      v12 = *(_QWORD *)(v2 + 448);
      if (v12 != a2)
      {
        if (v12)
        {
          v13 = *(unsigned int *)(v12 + 20);
          if ((_DWORD)v13)
          {
            result = *(_QWORD **)(v12 + 8);
            v14 = 8 * v13 - 8;
            while (*result != v2 + 440)
            {
              ++result;
              v14 -= 8;
              if (v14 == -8)
                goto LABEL_25;
            }
            *(_QWORD *)(v2 + 448) = 0;
            result = memmove(result, result + 1, v14);
            --*(_DWORD *)(v12 + 20);
          }
        }
LABEL_25:
        *(_QWORD *)(v2 + 448) = a2;
      }
      v15 = *(_DWORD *)(a2 + 24);
      v16 = *(unsigned __int16 *)(v2 + 2264);
      if (v15 <= 89)
      {
        if (v15 == -90)
        {
          v15 = 270;
        }
        else if (v15)
        {
          return result;
        }
        goto LABEL_34;
      }
      if (v15 == 180 || v15 == 90)
      {
LABEL_34:
        *(_WORD *)(v2 + 2264) = v15;
        if (v16 != v15)
          return (_QWORD *)WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers(v2, 3u);
      }
    }
  }
  return result;
}

uint64_t WebCore::MockRealtimeVideoSource::startApplyingConstraints(uint64_t this)
{
  *(_BYTE *)(this + 2480) = 1;
  return this;
}

uint64_t WebCore::MockRealtimeVideoSource::endApplyingConstraints(uint64_t this)
{
  *(_BYTE *)(this + 2480) = 0;
  return this;
}

_QWORD *WebCore::PlatformSpeechSynthesizerMock::create@<X0>(WebCore::PlatformSpeechSynthesizerMock *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  unint64_t StatusReg;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *result;

  v5 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)(v5 + 8) = 1;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_BYTE *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = this;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)v5 = off_1E341BE78;
  *(_QWORD *)(v5 + 56) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  v7 = *(unsigned int **)(StatusReg + 736);
  if (!v7)
    v7 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  *(_QWORD *)(v5 + 96) = v7;
  *(_QWORD *)(v5 + 56) = off_1E31F7378;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *result = off_1E341C160;
  result[1] = WebCore::PlatformSpeechSynthesizerMock::speakingFinished;
  result[2] = 0;
  result[3] = v5;
  *(_QWORD *)(v5 + 104) = result;
  *(_QWORD *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 120) = 0x3FB999999999999ALL;
  *a2 = v5;
  return result;
}

WTF *WebCore::PlatformSpeechSynthesizerMock::speakingFinished(WebCore::PlatformSpeechSynthesizerMock *this, WTF::StringImpl *a2)
{
  WTF *v3;
  WTF *result;
  WTF::StringImpl *v5;

  v3 = (WTF *)*((_QWORD *)this + 14);
  if (v3)
  {
    ++*(_DWORD *)v3;
    *((_QWORD *)this + 14) = 0;
    WTF::RefCounted<WebCore::PlatformSpeechSynthesisUtterance>::deref(v3, a2);
  }
  else
  {
    *((_QWORD *)this + 14) = 0;
  }
  result = (WTF *)(*(uint64_t (**)(_QWORD, WTF *))(**((_QWORD **)this + 5) + 8))(*((_QWORD *)this + 5), v3);
  if (v3)
    return WTF::RefCounted<WebCore::PlatformSpeechSynthesisUtterance>::deref(v3, v5);
  return result;
}

void WebCore::PlatformSpeechSynthesizerMock::~PlatformSpeechSynthesizerMock(WebCore::PlatformSpeechSynthesizerMock *this, WTF::StringImpl *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  const void *v6;
  uint64_t v7;
  WTF::StringImpl ***v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF *v11;

  *(_QWORD *)this = off_1E341BE78;
  v3 = (WTF *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
    WTF::RefCounted<WebCore::PlatformSpeechSynthesisUtterance>::deref(v3, a2);
  *((_QWORD *)this + 7) = off_1E31F7378;
  v4 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WebCore::TimerBase::~TimerBase((WebCore::PlatformSpeechSynthesizerMock *)((char *)this + 56));
  *(_QWORD *)this = off_1E3209BC0;
  v6 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v6)
    CFRelease(v6);
  v7 = *((unsigned int *)this + 7);
  if ((_DWORD)v7)
  {
    v8 = (WTF::StringImpl ***)*((_QWORD *)this + 2);
    v9 = 8 * v7;
    do
    {
      v10 = *v8;
      *v8 = 0;
      if (v10)
        WTF::RefCounted<WebCore::PlatformSpeechSynthesisVoice>::deref(v10, v5);
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
  v11 = (WTF *)*((_QWORD *)this + 2);
  if (v11)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v11, v5);
  }
}

{
  WTF *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  const void *v6;
  uint64_t v7;
  WTF::StringImpl ***v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF *v11;

  *(_QWORD *)this = off_1E341BE78;
  v3 = (WTF *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
    WTF::RefCounted<WebCore::PlatformSpeechSynthesisUtterance>::deref(v3, a2);
  *((_QWORD *)this + 7) = off_1E31F7378;
  v4 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WebCore::TimerBase::~TimerBase((WebCore::PlatformSpeechSynthesizerMock *)((char *)this + 56));
  *(_QWORD *)this = off_1E3209BC0;
  v6 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v6)
    CFRelease(v6);
  v7 = *((unsigned int *)this + 7);
  if ((_DWORD)v7)
  {
    v8 = (WTF::StringImpl ***)*((_QWORD *)this + 2);
    v9 = 8 * v7;
    do
    {
      v10 = *v8;
      *v8 = 0;
      if (v10)
        WTF::RefCounted<WebCore::PlatformSpeechSynthesisVoice>::deref(v10, v5);
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
  v11 = (WTF *)*((_QWORD *)this + 2);
  if (v11)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v11, v5);
  }
  WTF::fastFree(this, v5);
}

uint64_t WebCore::PlatformSpeechSynthesizerMock::initializeVoiceList(WebCore::PlatformSpeechSynthesizerMock *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t *v29;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = WTF::fastMalloc((WTF *)0x28);
  v4 = v2;
  *(_DWORD *)v2 = 1;
  if (v33)
    *(_DWORD *)v33 += 2;
  *(_QWORD *)(v2 + 8) = v33;
  if (v32)
    *(_DWORD *)v32 += 2;
  *(_QWORD *)(v2 + 16) = v32;
  if (v31)
    *(_DWORD *)v31 += 2;
  *(_QWORD *)(v2 + 24) = v31;
  *(_WORD *)(v2 + 32) = 257;
  v5 = *((unsigned int *)this + 7);
  if ((_DWORD)v5 == *((_DWORD *)this + 6))
  {
    v6 = v5 + (v5 >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 <= v5 + 1)
      v8 = v5 + 1;
    else
      v8 = v7;
    if (v8 >> 29)
      goto LABEL_64;
    v9 = (void *)*((_QWORD *)this + 2);
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *((_DWORD *)this + 6) = v8;
    *((_QWORD *)this + 2) = v10;
    memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if (*((void **)this + 2) == v9)
      {
        *((_QWORD *)this + 2) = 0;
        *((_DWORD *)this + 6) = 0;
      }
      WTF::fastFree((WTF *)v9, v3);
    }
    v5 = *((unsigned int *)this + 7);
    v11 = (uint64_t *)(*((_QWORD *)this + 2) + 8 * v5);
  }
  else
  {
    v11 = (uint64_t *)(*((_QWORD *)this + 2) + 8 * v5);
  }
  *v11 = v4;
  *((_DWORD *)this + 7) = v5 + 1;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v31 -= 2;
  }
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v32 -= 2;
  }
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v33 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v12 = 1;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 16) = 0;
  *(_QWORD *)(v12 + 24) = 0;
  *(_WORD *)(v12 + 32) = 1;
  v13 = *((unsigned int *)this + 7);
  if ((_DWORD)v13 == *((_DWORD *)this + 6))
  {
    v14 = v13 + (v13 >> 2);
    if (v14 >= 0x10)
      v15 = v14 + 1;
    else
      v15 = 16;
    if (v15 <= v13 + 1)
      v16 = v13 + 1;
    else
      v16 = v15;
    if (v16 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1962D1CC8);
    }
    v17 = (void *)*((_QWORD *)this + 2);
    v18 = (void *)WTF::fastMalloc((WTF *)(8 * v16));
    *((_DWORD *)this + 6) = v16;
    *((_QWORD *)this + 2) = v18;
    memcpy(v18, v17, 8 * v13);
    if (v17)
    {
      if (*((void **)this + 2) == v17)
      {
        *((_QWORD *)this + 2) = 0;
        *((_DWORD *)this + 6) = 0;
      }
      WTF::fastFree((WTF *)v17, v19);
    }
    v13 = *((unsigned int *)this + 7);
    v20 = (uint64_t *)(*((_QWORD *)this + 2) + 8 * v13);
  }
  else
  {
    v20 = (uint64_t *)(*((_QWORD *)this + 2) + 8 * v13);
  }
  *v20 = v12;
  *((_DWORD *)this + 7) = v13 + 1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v21 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v21 = 1;
  *(_QWORD *)(v21 + 8) = 0;
  *(_QWORD *)(v21 + 16) = 0;
  *(_QWORD *)(v21 + 24) = 0;
  *(_WORD *)(v21 + 32) = 257;
  v22 = *((unsigned int *)this + 7);
  if ((_DWORD)v22 != *((_DWORD *)this + 6))
  {
    v29 = (uint64_t *)(*((_QWORD *)this + 2) + 8 * v22);
    goto LABEL_58;
  }
  v23 = v22 + (v22 >> 2);
  if (v23 >= 0x10)
    v24 = v23 + 1;
  else
    v24 = 16;
  if (v24 <= v22 + 1)
    v25 = v22 + 1;
  else
    v25 = v24;
  if (v25 >> 29)
  {
LABEL_64:
    __break(0xC471u);
    JUMPOUT(0x1962D1CC0);
  }
  v26 = (void *)*((_QWORD *)this + 2);
  v27 = (void *)WTF::fastMalloc((WTF *)(8 * v25));
  *((_DWORD *)this + 6) = v25;
  *((_QWORD *)this + 2) = v27;
  memcpy(v27, v26, 8 * v22);
  if (v26)
  {
    if (*((void **)this + 2) == v26)
    {
      *((_QWORD *)this + 2) = 0;
      *((_DWORD *)this + 6) = 0;
    }
    WTF::fastFree((WTF *)v26, v28);
  }
  v22 = *((unsigned int *)this + 7);
  v29 = (uint64_t *)(*((_QWORD *)this + 2) + 8 * v22);
LABEL_58:
  *v29 = v21;
  *((_DWORD *)this + 7) = v22 + 1;
  return 0;
}

uint64_t WebCore::PlatformSpeechSynthesizerMock::speak(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  WTF *v5;
  WTF::MonotonicTime *v6;
  double v7;
  double v8;

  v4 = *a2;
  *a2 = 0;
  v5 = *(WTF **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v4;
  if (v5)
  {
    WTF::RefCounted<WebCore::PlatformSpeechSynthesisUtterance>::deref(v5, v4);
    v4 = *(WTF::StringImpl **)(a1 + 112);
  }
  (***(void (****)(_QWORD, WTF::StringImpl *))(a1 + 40))(*(_QWORD *)(a1 + 40), v4);
  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 40))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 112), 0, 0, 3);
  v6 = (WTF::MonotonicTime *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 40))(*(_QWORD *)(a1 + 40));
  v7 = *(double *)(a1 + 120);
  *(_QWORD *)(a1 + 80) = 0;
  WTF::MonotonicTime::now(v6);
  return WebCore::TimerBase::setNextFireTime(a1 + 56, v7 + v8);
}

WTF *WebCore::PlatformSpeechSynthesizerMock::cancel(WTF *this)
{
  WTF *v1;
  uint64_t v2;
  WTF::StringImpl *v3;

  v1 = (WTF *)*((_QWORD *)this + 14);
  if (v1)
  {
    v2 = (uint64_t)this;
    if ((*((_QWORD *)this + 11) & 0xFFFFFFFFFFFFLL) != 0)
    {
      WebCore::TimerBase::stopSlowCase((WTF *)((char *)this + 56));
      v1 = *(WTF **)(v2 + 112);
    }
    *(_QWORD *)(v2 + 112) = 0;
    this = (WTF *)(*(uint64_t (**)(_QWORD, WTF *))(**(_QWORD **)(v2 + 40) + 32))(*(_QWORD *)(v2 + 40), v1);
    if (v1)
      return WTF::RefCounted<WebCore::PlatformSpeechSynthesisUtterance>::deref(v1, v3);
  }
  return this;
}

uint64_t WebCore::PlatformSpeechSynthesizerMock::pause(uint64_t this)
{
  if (*(_QWORD *)(this + 112))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 40) + 16))(*(_QWORD *)(this + 40));
  return this;
}

uint64_t WebCore::PlatformSpeechSynthesizerMock::resume(uint64_t this)
{
  if (*(_QWORD *)(this + 112))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 40) + 24))(*(_QWORD *)(this + 40));
  return this;
}

void WebCore::DeviceOrientationClientMock::~DeviceOrientationClientMock(WebCore::DeviceOrientationClientMock *this)
{
  WebCore::TimerBase *v2;
  uint64_t v3;
  void *v4;
  WTF *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)this = off_1E341BB98;
  *((_QWORD *)this + 4) = off_1E31F7378;
  v2 = (WebCore::DeviceOrientationClientMock *)((char *)this + 32);
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  v5 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
      WTF::fastFree(v5, v4);
    else
      --*(_DWORD *)v5;
  }
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 0;
    v7 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, v4);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WebCore::TimerBase *v2;
  uint64_t v3;
  void *v4;
  WTF *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)this = off_1E341BB98;
  *((_QWORD *)this + 4) = off_1E31F7378;
  v2 = (WebCore::DeviceOrientationClientMock *)((char *)this + 32);
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  v5 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
      WTF::fastFree(v5, v4);
    else
      --*(_DWORD *)v5;
  }
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 0;
    v7 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, v4);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  WTF::fastFree(this, v4);
}

uint64_t WebCore::DeviceOrientationClientMock::lastOrientation(WebCore::DeviceOrientationClientMock *this)
{
  return *((_QWORD *)this + 2);
}

void WebCore::MockDisplayCapturer::~MockDisplayCapturer(WebCore::MockDisplayCapturer *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebCore::MockDisplayCapturer::~MockDisplayCapturer(this, a2);
  WTF::fastFree(v2, v3);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeVideoCaptureSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v6 + 304));
  v7 = *((_QWORD *)this + 4);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 0;
    v8 = (unsigned int *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
  *(_QWORD *)this = off_1E341A448;
  v11 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v11)
  {
    v12 = v11 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v11 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
    }
  }
  v15 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v15)
  {
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v15);
      WTF::fastFree((WTF *)v15, a2);
    }
  }
}

const char *WebCore::MockDisplayCapturer::logClassName(WebCore::MockDisplayCapturer *this)
{
  return "MockDisplayCapturer";
}

uint64_t WebCore::MockDisplayCapturer::stop(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  v1 = *(_QWORD *)(this + 40);
  if (*(_BYTE *)(v1 + 292))
  {
    v2 = *(_QWORD *)(v1 + 40);
    if (v2)
    {
      v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 24))(*(_QWORD *)(this + 40));
      v4 = *(_QWORD *)(v1 + 48);
      v6[0] = v3;
      v6[1] = v5;
      v6[2] = "stop";
      v6[3] = v4;
      if (*(_BYTE *)(v2 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v6);
    }
    *(_BYTE *)(v1 + 292) = 0;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 368))(v1);
  }
  return this;
}

uint64_t WebCore::MockDisplayCapturer::deviceType(WebCore::MockDisplayCapturer *this)
{
  return 4;
}

uint64_t WebCore::MockDisplayCapturer::surfaceType(WebCore::MockDisplayCapturer *this)
{
  return 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore24MockMicrophonePropertiesENS8_21MockSpeakerPropertiesENS8_20MockCameraPropertiesENS8_21MockDisplayPropertiesEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEERKST_EEEDcSL_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  uint64_t v5;
  char v6;

  v4 = *(_DWORD **)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 64);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, _DWORD *))off_1E341BEC8[v5])(&v6, v4);
  }
  v4[16] = -1;
  *v4 = *a3;
  v4[16] = 0;
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore24MockMicrophonePropertiesENS8_21MockSpeakerPropertiesENS8_20MockCameraPropertiesENS8_21MockDisplayPropertiesEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEERKST_EEEDcSL_DpT0_(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v7;
  _DWORD *v8;
  char v9;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 64);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v7 = *(_DWORD **)a3;
      if (*(_QWORD *)a3)
        *v7 += 2;
      result = *(WTF::StringImpl **)a2;
      *(_QWORD *)a2 = v7;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      *((_DWORD *)a2 + 2) = *(_DWORD *)(a3 + 8);
      return result;
    }
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E341BEC8[v5])(&v9, v4);
  }
  v8 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v8 += 2;
  *(_QWORD *)v4 = v8;
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(v4 + 64) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore24MockMicrophonePropertiesENS8_21MockSpeakerPropertiesENS8_20MockCameraPropertiesENS8_21MockDisplayPropertiesEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEERKST_EEEDcSL_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  uint64_t result;
  unsigned int v14;
  WTF *v15;
  uint64_t v16;
  char *v17;
  WTF *v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  __int128 v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  char v52;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 64);
  if ((_DWORD)v5 == -1)
    goto LABEL_11;
  if ((_DWORD)v5 != 2)
  {
    ((void (*)(char *, uint64_t))off_1E341BEC8[v5])(&v52, v4);
LABEL_11:
    *(_DWORD *)(v4 + 64) = -1;
    result = WebCore::MockCameraProperties::MockCameraProperties(v4, (uint64_t *)a3);
    *(_DWORD *)(v4 + 64) = 2;
    return result;
  }
  v7 = *(_QWORD *)a3;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(a3 + 8);
  *(_QWORD *)a2 = v7;
  if (a3 == a2)
    goto LABEL_48;
  v8 = *(unsigned int *)(a2 + 28);
  v9 = *(unsigned int *)(a3 + 28);
  if (v8 <= v9)
  {
    v14 = *(_DWORD *)(a2 + 24);
    if (v9 <= v14)
    {
      LODWORD(v9) = *(_DWORD *)(a2 + 28);
      goto LABEL_36;
    }
    if (v14)
    {
      v15 = *(WTF **)(a2 + 16);
      if ((_DWORD)v8)
      {
        v16 = 48 * v8;
        v17 = (char *)v15 + 8;
        do
        {
          v18 = *(WTF **)v17;
          if (*(_QWORD *)v17)
          {
            *(_QWORD *)v17 = 0;
            *((_DWORD *)v17 + 2) = 0;
            WTF::fastFree(v18, (void *)a2);
          }
          v17 += 48;
          v16 -= 48;
        }
        while (v16);
        *(_DWORD *)(a2 + 28) = 0;
        v15 = *(WTF **)(a2 + 16);
      }
      if (v15)
      {
        *(_QWORD *)(a2 + 16) = 0;
        *(_DWORD *)(a2 + 24) = 0;
        WTF::fastFree(v15, (void *)a2);
      }
    }
    v19 = *(unsigned int *)(a3 + 28);
    if (*(_DWORD *)(a2 + 24) < v19)
    {
      if (v19 >= 0x5555556)
      {
LABEL_68:
        __break(0xC471u);
        JUMPOUT(0x1962D2554);
      }
      v20 = *(WTF **)(a2 + 16);
      v21 = *(unsigned int *)(a2 + 28);
      v22 = 48 * v19;
      v23 = WTF::fastMalloc((WTF *)(48 * v19));
      *(_DWORD *)(a2 + 24) = (v22 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)(a2 + 16) = v23;
      if ((_DWORD)v21)
      {
        v24 = v23;
        v25 = 48 * v21;
        v26 = (char *)v20 + 16;
        do
        {
          v27 = *((_QWORD *)v26 - 2);
          *(_QWORD *)(v24 + 8) = 0;
          *(_QWORD *)(v24 + 16) = 0;
          *(_QWORD *)v24 = v27;
          v28 = *((_QWORD *)v26 - 1);
          *((_QWORD *)v26 - 1) = 0;
          *(_QWORD *)(v24 + 8) = v28;
          LODWORD(v28) = *(_DWORD *)v26;
          *(_DWORD *)v26 = 0;
          *(_DWORD *)(v24 + 16) = v28;
          LODWORD(v28) = *((_DWORD *)v26 + 1);
          *((_DWORD *)v26 + 1) = 0;
          *(_DWORD *)(v24 + 20) = v28;
          v29 = *(_OWORD *)(v26 + 8);
          *(_BYTE *)(v24 + 40) = v26[24];
          *(_OWORD *)(v24 + 24) = v29;
          v30 = (WTF *)*((_QWORD *)v26 - 1);
          if (v30)
          {
            *((_QWORD *)v26 - 1) = 0;
            *(_DWORD *)v26 = 0;
            WTF::fastFree(v30, (void *)a2);
          }
          v26 += 48;
          v24 += 48;
          v25 -= 48;
        }
        while (v25);
      }
      if (v20)
      {
        if (*(WTF **)(a2 + 16) == v20)
        {
          *(_QWORD *)(a2 + 16) = 0;
          *(_DWORD *)(a2 + 24) = 0;
        }
        WTF::fastFree(v20, (void *)a2);
      }
    }
    LODWORD(v9) = *(_DWORD *)(a2 + 28);
  }
  else
  {
    v10 = 48 * v8 - 48 * v9;
    v11 = *(_QWORD *)(a2 + 16) + 48 * v9 + 8;
    do
    {
      v12 = *(WTF **)v11;
      if (*(_QWORD *)v11)
      {
        *(_QWORD *)v11 = 0;
        *(_DWORD *)(v11 + 8) = 0;
        WTF::fastFree(v12, (void *)a2);
      }
      v11 += 48;
      v10 -= 48;
    }
    while (v10);
    *(_DWORD *)(a2 + 28) = v9;
  }
  LODWORD(v8) = v9;
LABEL_36:
  v31 = *(_QWORD *)(a3 + 16);
  v32 = *(_QWORD *)(a2 + 16);
  if ((_DWORD)v8)
  {
    v33 = v31 + 48 * v9;
    do
    {
      *(_QWORD *)v32 = *(_QWORD *)v31;
      WTF::Vector<WebCore::FrameRateRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)(v32 + 8), (WTF *)(v31 + 8));
      v34 = *(_BYTE *)(v31 + 40);
      *(_OWORD *)(v32 + 24) = *(_OWORD *)(v31 + 24);
      *(_BYTE *)(v32 + 40) = v34;
      v31 += 48;
      v32 += 48;
    }
    while (v31 != v33);
    v31 = *(_QWORD *)(a3 + 16);
    LODWORD(v8) = *(_DWORD *)(a2 + 28);
    v32 = *(_QWORD *)(a2 + 16);
  }
  v35 = *(unsigned int *)(a3 + 28);
  if ((_DWORD)v8 != (_DWORD)v35)
  {
    v36 = 48 * v8;
    v37 = 48 * v35;
    do
    {
      v38 = v31 + v36;
      v39 = v32 + v36;
      *(_QWORD *)(v32 + v36) = *(_QWORD *)(v31 + v36);
      v40 = *(unsigned int *)(v31 + v36 + 20);
      v41 = v32 + v36;
      *(_QWORD *)(v41 + 8) = 0;
      *(_QWORD *)(v41 + 16) = 0;
      *(_DWORD *)(v32 + v36 + 20) = v40;
      if ((_DWORD)v40)
      {
        if (v40 >> 28)
          goto LABEL_68;
        v42 = (void *)WTF::fastMalloc((WTF *)(16 * v40));
        *(_DWORD *)(v32 + v36 + 16) = v40;
        *(_QWORD *)(v32 + v36 + 8) = v42;
        memcpy(v42, *(const void **)(v38 + 8), 16 * *(unsigned int *)(v38 + 20));
      }
      v43 = *(_OWORD *)(v38 + 24);
      *(_BYTE *)(v39 + 40) = *(_BYTE *)(v38 + 40);
      *(_OWORD *)(v39 + 24) = v43;
      v32 += 48;
      v31 += 48;
      v37 -= 48;
    }
    while (v36 != v37);
    LODWORD(v8) = *(_DWORD *)(a3 + 28);
  }
  *(_DWORD *)(a2 + 28) = v8;
LABEL_48:
  v44 = *(_QWORD *)(a2 + 32);
  v45 = *(_QWORD *)(a3 + 32);
  if ((v44 & 0x8000000000000) != 0)
  {
    if ((v45 & 0x8000000000000) == 0
      || *(float *)((v44 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v45 & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v44 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v45 & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v44 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v45 & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v44 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v45 & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v44) != HIBYTE(v45)
      || BYTE6(v44) != BYTE6(v45))
    {
      v49 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFLL);
      do
      {
        v50 = __ldaxr(v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v49));
      if (!v51)
      {
        atomic_store(1u, v49);
        WTF::fastFree((WTF *)v49, (void *)a2);
      }
      goto LABEL_51;
    }
  }
  else if (v44 != v45 || (v45 & 0x8000000000000) != 0)
  {
LABEL_51:
    v46 = *(_QWORD *)(a3 + 32);
    *(_QWORD *)(a2 + 32) = v46;
    if ((v46 & 0x8000000000000) != 0)
    {
      v47 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFLL);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 + 1, v47));
    }
  }
  result = WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a2 + 40, (const void **)(a3 + 40));
  *(_WORD *)(a2 + 56) = *(_WORD *)(a3 + 56);
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore24MockMicrophonePropertiesENS8_21MockSpeakerPropertiesENS8_20MockCameraPropertiesENS8_21MockDisplayPropertiesEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEERKST_EEEDcSL_DpT0_(unsigned int *result, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  unsigned int v16;
  unsigned int v17;
  char v18;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 64);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 3)
    {
      *(_BYTE *)a2 = *(_BYTE *)a3;
      v6 = a2[1];
      v7 = *(_QWORD *)(a3 + 8);
      if ((v6 & 0x8000000000000) != 0)
      {
        if ((v7 & 0x8000000000000) != 0
          && *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v7 & 0xFFFFFFFFFFFFLL) + 4)
          && *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v7 & 0xFFFFFFFFFFFFLL) + 8)
          && *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v7 & 0xFFFFFFFFFFFFLL) + 0xC)
          && *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v7 & 0xFFFFFFFFFFFFLL) + 0x10)
          && HIBYTE(v6) == HIBYTE(v7)
          && BYTE6(v6) == BYTE6(v7))
        {
LABEL_9:
          a2[2] = *(_QWORD *)(a3 + 16);
          return result;
        }
        v15 = a2;
        result = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
        do
        {
          v16 = __ldaxr(result);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, result));
        if (!v17)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
          a2 = v15;
        }
      }
      else if (v6 == v7 && (v7 & 0x8000000000000) == 0)
      {
        goto LABEL_9;
      }
      v9 = *(_QWORD *)(a3 + 8);
      a2[1] = v9;
      if ((v9 & 0x8000000000000) != 0)
      {
        v13 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 + 1, v13));
      }
      goto LABEL_9;
    }
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))off_1E341BEC8[v5])(&v18, v4);
  }
  *(_DWORD *)(v4 + 64) = -1;
  *(_BYTE *)v4 = *(_BYTE *)a3;
  v10 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(v4 + 8) = v10;
  if ((v10 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a3 + 16);
  *(_DWORD *)(v4 + 64) = 3;
  return result;
}

uint64_t WebCore::MockCameraProperties::MockCameraProperties(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  __int128 v18;
  uint64_t v19;
  WTF *v20;
  void *v21;
  unsigned int *v23;
  unsigned int v24;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  v5 = *((unsigned int *)a2 + 7);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = v5;
  if ((_DWORD)v5)
  {
    if (v5 >= 0x5555556)
    {
LABEL_16:
      __break(0xC471u);
      JUMPOUT(0x1962D2944);
    }
    v6 = 48 * v5;
    v7 = WTF::fastMalloc((WTF *)(48 * v5));
    *(_DWORD *)(a1 + 24) = (v6 & 0xFFFFFFF0) / 0x30;
    *(_QWORD *)(a1 + 16) = v7;
    v8 = *((unsigned int *)a2 + 7);
    if ((_DWORD)v8)
    {
      v9 = v7;
      v10 = 0;
      v11 = a2[2];
      v12 = 48 * v8;
      do
      {
        v13 = v11 + v10;
        v14 = v9 + v10;
        *(_QWORD *)(v9 + v10) = *(_QWORD *)(v11 + v10);
        v15 = *(unsigned int *)(v11 + v10 + 20);
        v16 = v9 + v10;
        *(_QWORD *)(v16 + 8) = 0;
        *(_QWORD *)(v16 + 16) = 0;
        *(_DWORD *)(v9 + v10 + 20) = v15;
        if ((_DWORD)v15)
        {
          if (v15 >> 28)
            goto LABEL_16;
          v17 = (void *)WTF::fastMalloc((WTF *)(16 * v15));
          *(_DWORD *)(v9 + v10 + 16) = v15;
          *(_QWORD *)(v9 + v10 + 8) = v17;
          memcpy(v17, *(const void **)(v13 + 8), 16 * *(unsigned int *)(v13 + 20));
        }
        v18 = *(_OWORD *)(v13 + 24);
        *(_BYTE *)(v14 + 40) = *(_BYTE *)(v13 + 40);
        *(_OWORD *)(v14 + 24) = v18;
        v10 += 48;
      }
      while (v12 != v10);
    }
  }
  v19 = a2[4];
  *(_QWORD *)(a1 + 32) = v19;
  if ((v19 & 0x8000000000000) != 0)
  {
    v23 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFLL);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 + 1, v23));
  }
  v20 = (WTF *)*((unsigned int *)a2 + 13);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = (_DWORD)v20;
  if ((_DWORD)v20)
  {
    v21 = (void *)WTF::fastMalloc(v20);
    *(_DWORD *)(a1 + 48) = (_DWORD)v20;
    *(_QWORD *)(a1 + 40) = v21;
    memcpy(v21, (const void *)a2[5], *((unsigned int *)a2 + 13));
  }
  *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
  return a1;
}

WTF::StringImpl *WTF::HashMap<WTF::String,WebCore::MockMediaDevice,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::MockMediaDevice>,WTF::HashTableTraits>::add<WebCore::MockMediaDevice&>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int i;
  unsigned int v13;
  uint64_t v14;
  WTF *v15;
  WTF::StringImpl *result;
  WTF::StringImpl *v17;
  uint64_t v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v36;
  char v37;

  v7 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::MockMediaDevice>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::MockMediaDevice>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::MockMediaDevice,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::MockMediaDevice>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0), (v7 = *a2) != 0))
  {
    v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = *((_DWORD *)*a3 + 4);
  if (v9 < 0x100)
    v10 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v10 = v9 >> 8;
  v11 = 0;
  for (i = 1; ; ++i)
  {
    v13 = v10 & v8;
    v14 = v7 + 104 * (v10 & v8);
    v15 = *(WTF **)v14;
    if (*(_QWORD *)v14 != -1)
      break;
    v11 = v7 + 104 * v13;
LABEL_13:
    v10 = i + v13;
  }
  if (!v15)
  {
    if (v11)
    {
      *(_QWORD *)(v11 + 96) = 0;
      *(_OWORD *)(v11 + 64) = 0u;
      *(_OWORD *)(v11 + 80) = 0u;
      *(_OWORD *)(v11 + 32) = 0u;
      *(_OWORD *)(v11 + 48) = 0u;
      *(_OWORD *)v11 = 0u;
      *(_OWORD *)(v11 + 16) = 0u;
      *(_DWORD *)(v11 + 32) = 44100;
      --*(_DWORD *)(*a2 - 16);
      v14 = v11;
    }
    v17 = *a3;
    v18 = a1;
    if (*a3)
      *(_DWORD *)v17 += 2;
    *(_QWORD *)v14 = v17;
    v19 = *(_DWORD **)a4;
    if (*(_QWORD *)a4)
      *v19 += 2;
    v20 = *(WTF::StringImpl **)(v14 + 8);
    *(_QWORD *)(v14 + 8) = v19;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = *(_DWORD **)(a4 + 8);
    if (v21)
      *v21 += 2;
    result = *(WTF::StringImpl **)(v14 + 16);
    *(_QWORD *)(v14 + 16) = v21;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
    *(_BYTE *)(v14 + 24) = *(_BYTE *)(a4 + 16);
    v22 = *(unsigned int *)(v14 + 96);
    v23 = *(unsigned int *)(a4 + 88);
    if ((_DWORD)v22 == -1)
    {
      if ((_DWORD)v23 == -1)
        goto LABEL_35;
    }
    else if ((_DWORD)v23 == -1)
    {
      result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E341BEC8[v22])(&v37, v14 + 32);
      *(_DWORD *)(v14 + 96) = -1;
      goto LABEL_35;
    }
    v36 = v14 + 32;
    result = (WTF::StringImpl *)((uint64_t (*)(uint64_t *))off_1E341BEE8[v23])(&v36);
LABEL_35:
    v26 = *a2;
    if (*a2)
      v27 = *(_DWORD *)(v26 - 12) + 1;
    else
      v27 = 1;
    *(_DWORD *)(v26 - 12) = v27;
    v28 = *a2;
    if (*a2)
      v29 = *(_DWORD *)(v28 - 12);
    else
      v29 = 0;
    v30 = (*(_DWORD *)(v28 - 16) + v29);
    v31 = *(unsigned int *)(v28 - 4);
    if (v31 > 0x400)
    {
      if (v31 <= 2 * v30)
        goto LABEL_44;
    }
    else if (3 * v31 <= 4 * v30)
    {
      if (!(_DWORD)v31)
      {
        v32 = 8;
LABEL_49:
        result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::MockMediaDevice>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::MockMediaDevice>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::MockMediaDevice,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::MockMediaDevice>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, v32, v14);
        v14 = (uint64_t)result;
        v28 = *a2;
        if (*a2)
          LODWORD(v31) = *(_DWORD *)(v28 - 4);
        else
          LODWORD(v31) = 0;
        goto LABEL_53;
      }
LABEL_44:
      v32 = (_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31));
      goto LABEL_49;
    }
LABEL_53:
    v34 = v28 + 104 * v31;
    v33 = 1;
    goto LABEL_54;
  }
  result = (WTF::StringImpl *)WTF::equal(v15, *a3, (const WTF::StringImpl *)a3);
  if (!(_DWORD)result)
    goto LABEL_13;
  v24 = *a2;
  if (*a2)
    v25 = *(_DWORD *)(v24 - 4);
  else
    v25 = 0;
  v18 = a1;
  v33 = 0;
  v34 = v24 + 104 * v25;
LABEL_54:
  *(_QWORD *)v18 = v14;
  *(_QWORD *)(v18 + 8) = v34;
  *(_BYTE *)(v18 + 16) = v33;
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::MockMediaDevice>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::MockMediaDevice>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::MockMediaDevice,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::MockMediaDevice>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  unsigned int v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  WTF::StringImpl **v27;
  int v28;
  int v29;
  unsigned int v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  unsigned int v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  _QWORD *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl **v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl **v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl **result;
  uint64_t v55;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl **v60;
  char v61;
  char v62;
  char v63;
  char v64;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(104 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = v7 + 48;
    do
    {
      *(_QWORD *)(v10 + 64) = 0;
      *(_OWORD *)(v10 + 32) = 0uLL;
      *(_OWORD *)(v10 + 48) = 0uLL;
      *(_OWORD *)v10 = 0uLL;
      *(_OWORD *)(v10 + 16) = 0uLL;
      *(_OWORD *)(v10 - 32) = 0uLL;
      *(_OWORD *)(v10 - 16) = 0uLL;
      *(_DWORD *)v10 = 44100;
      v10 += 104;
      --v9;
    }
    while (v9);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    v55 = v5;
    v58 = v4;
    do
    {
      v14 = (WTF::StringImpl **)(v4 + 104 * v11);
      v15 = *v14;
      if (*v14 != (WTF::StringImpl *)-1)
      {
        if (v15)
        {
          v24 = *a1;
          if (*a1)
            v25 = *(_DWORD *)(v24 - 8);
          else
            v25 = 0;
          v26 = *((_DWORD *)v15 + 4);
          v60 = v12;
          v27 = (WTF::StringImpl **)(v4 + 104 * v11);
          if (v26 < 0x100)
            v28 = WTF::StringImpl::hashSlowCase(v15);
          else
            v28 = v26 >> 8;
          v29 = 0;
          do
          {
            v30 = v28 & v25;
            v31 = (WTF::StringImpl **)(v24 + 104 * (v28 & v25));
            v28 = ++v29 + (v28 & v25);
          }
          while (*v31);
          v32 = v24 + 104 * v30;
          v35 = *(_DWORD *)(v32 + 96);
          v34 = (_DWORD *)(v32 + 96);
          v33 = v35;
          if (v35 != -1)
            ((void (*)(char *, uint64_t))off_1E341BEC8[v33])(&v63, v24 + 104 * v30 + 32);
          *v34 = -1;
          v36 = v24 + 104 * v30;
          v39 = *(WTF::StringImpl **)(v36 + 16);
          v38 = (_QWORD *)(v36 + 16);
          v37 = v39;
          *v38 = 0;
          if (v39)
          {
            if (*(_DWORD *)v37 == 2)
              WTF::StringImpl::destroy(v37, v8);
            else
              *(_DWORD *)v37 -= 2;
          }
          v40 = (WTF::StringImpl *)*((_QWORD *)v34 - 11);
          *((_QWORD *)v34 - 11) = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2)
              WTF::StringImpl::destroy(v40, v8);
            else
              *(_DWORD *)v40 -= 2;
          }
          v41 = *v31;
          *v31 = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 2)
              WTF::StringImpl::destroy(v41, v8);
            else
              *(_DWORD *)v41 -= 2;
          }
          v42 = *v27;
          v59 = v4 + 104 * v11;
          *v27 = 0;
          *v31 = v42;
          v44 = *(_QWORD *)(v59 + 8);
          v43 = (WTF::StringImpl **)(v59 + 8);
          *(_QWORD *)(v59 + 8) = 0;
          *((_QWORD *)v34 - 11) = v44;
          v46 = (WTF::StringImpl **)(v59 + 16);
          v45 = *(_QWORD *)(v59 + 16);
          *(_QWORD *)(v59 + 16) = 0;
          *v38 = v45;
          v47 = v24 + 104 * v30;
          LOBYTE(v45) = *(_BYTE *)(v59 + 24);
          *(_BYTE *)(v47 + 32) = 0;
          v8 = (WTF::StringImpl *)(v47 + 32);
          *((_BYTE *)v8 - 8) = v45;
          *v34 = -1;
          v49 = (_DWORD *)(v59 + 96);
          v48 = *(unsigned int *)(v59 + 96);
          if (*(_DWORD *)(v59 + 96) != -1)
          {
            ((void (*)(char *))off_1E341BF08[v48])(&v64);
            *v34 = v48;
            v50 = *v49;
            if ((_DWORD)v50 != -1)
              ((void (*)(char *, uint64_t))off_1E341BEC8[v50])(&v62, v58 + 104 * v11 + 32);
          }
          *v49 = -1;
          v51 = *v46;
          *v46 = 0;
          v12 = v60;
          v13 = v55;
          if (v51)
          {
            if (*(_DWORD *)v51 == 2)
              WTF::StringImpl::destroy(v51, v8);
            else
              *(_DWORD *)v51 -= 2;
          }
          v52 = *v43;
          *v43 = 0;
          v4 = v58;
          if (v52)
          {
            if (*(_DWORD *)v52 == 2)
              WTF::StringImpl::destroy(v52, v8);
            else
              *(_DWORD *)v52 -= 2;
          }
          v53 = *(WTF::StringImpl **)v59;
          *(_QWORD *)v59 = 0;
          if (v53)
          {
            if (*(_DWORD *)v53 == 2)
              WTF::StringImpl::destroy(v53, v8);
            else
              *(_DWORD *)v53 -= 2;
          }
          if (v59 == a3)
            v12 = v31;
        }
        else
        {
          v16 = v4 + 104 * v11;
          v19 = *(_DWORD *)(v16 + 96);
          v18 = (_DWORD *)(v16 + 96);
          v17 = v19;
          if (v19 != -1)
            ((void (*)(char *, uint64_t))off_1E341BEC8[v17])(&v61, v4 + 104 * v11 + 32);
          *v18 = -1;
          v20 = v4 + 104 * v11;
          v21 = *(WTF::StringImpl **)(v20 + 16);
          *(_QWORD *)(v20 + 16) = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v8);
            else
              *(_DWORD *)v21 -= 2;
          }
          v22 = (WTF::StringImpl *)*((_QWORD *)v18 - 11);
          *((_QWORD *)v18 - 11) = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v8);
            else
              *(_DWORD *)v22 -= 2;
          }
          v23 = *v14;
          *v14 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v8);
            else
              *(_DWORD *)v23 -= 2;
          }
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore24MockMicrophonePropertiesENS8_21MockSpeakerPropertiesENS8_20MockCameraPropertiesENS8_21MockDisplayPropertiesEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore24MockMicrophonePropertiesENS8_21MockSpeakerPropertiesENS8_20MockCameraPropertiesENS8_21MockDisplayPropertiesEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore24MockMicrophonePropertiesENS8_21MockSpeakerPropertiesENS8_20MockCameraPropertiesENS8_21MockDisplayPropertiesEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a3;
  *(_BYTE *)(a2 + 8) = *((_BYTE *)a3 + 8);
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v4 = a3[2];
  a3[2] = 0;
  *(_QWORD *)(a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 6);
  *((_DWORD *)a3 + 6) = 0;
  *(_DWORD *)(a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 7);
  *((_DWORD *)a3 + 7) = 0;
  *(_DWORD *)(a2 + 28) = v4;
  v5 = a3[4];
  if (v5)
  {
    *(_QWORD *)(a2 + 32) = v5;
    a3[4] = 0;
  }
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v6 = a3[5];
  a3[5] = 0;
  *(_QWORD *)(a2 + 40) = v6;
  LODWORD(v6) = *((_DWORD *)a3 + 12);
  *((_DWORD *)a3 + 12) = 0;
  *(_DWORD *)(a2 + 48) = v6;
  LODWORD(v6) = *((_DWORD *)a3 + 13);
  *((_DWORD *)a3 + 13) = 0;
  *(_DWORD *)(a2 + 52) = v6;
  *(_WORD *)(a2 + 56) = *((_WORD *)a3 + 28);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore24MockMicrophonePropertiesENS8_21MockSpeakerPropertiesENS8_20MockCameraPropertiesENS8_21MockDisplayPropertiesEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *(_QWORD *)(a3 + 8);
  if (v3)
  {
    *(_QWORD *)(a2 + 8) = v3;
    *(_QWORD *)(a3 + 8) = 0;
  }
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::CaptureDevice>::moveOverlapping(WTF::StringImpl *result, WTF::StringImpl *a2, unint64_t a3)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  v4 = result;
  if ((unint64_t)result > a3)
    return WTF::VectorMover<false,WebCore::CaptureDevice>::move(result, a2, a3);
  if (a2 != result)
  {
    v5 = 0;
    v6 = (char *)(a3 + a2 - result);
    do
    {
      v7 = (char *)a2 + v5;
      v8 = &v6[v5];
      v9 = *(_QWORD *)((char *)a2 + v5 - 40);
      *((_QWORD *)v7 - 5) = 0;
      *((_QWORD *)v8 - 5) = v9;
      *(v8 - 32) = *((_BYTE *)a2 + v5 - 32);
      v10 = *(_QWORD *)((char *)a2 + v5 - 24);
      *((_QWORD *)v7 - 3) = 0;
      *((_QWORD *)v8 - 3) = v10;
      v11 = *(_QWORD *)((char *)a2 + v5 - 16);
      *((_QWORD *)v7 - 2) = 0;
      *((_QWORD *)v8 - 2) = v11;
      *((_DWORD *)v8 - 2) = *(_DWORD *)((char *)a2 + v5 - 8);
      v12 = *(WTF::StringImpl **)((char *)a2 + v5 - 16);
      *((_QWORD *)v7 - 2) = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, a2);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = (WTF::StringImpl *)*((_QWORD *)v7 - 3);
      *((_QWORD *)v7 - 3) = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, a2);
        else
          *(_DWORD *)v13 -= 2;
      }
      result = (WTF::StringImpl *)*((_QWORD *)v7 - 5);
      *((_QWORD *)v7 - 5) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 -= 40;
    }
    while ((WTF::StringImpl *)((char *)a2 + v5) != v4);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore24MockMicrophonePropertiesENS8_21MockSpeakerPropertiesENS8_20MockCameraPropertiesENS8_21MockDisplayPropertiesEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore24MockMicrophonePropertiesENS8_21MockSpeakerPropertiesENS8_20MockCameraPropertiesENS8_21MockDisplayPropertiesEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;

  v3 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v3 += 2;
  *(_QWORD *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore24MockMicrophonePropertiesENS8_21MockSpeakerPropertiesENS8_20MockCameraPropertiesENS8_21MockDisplayPropertiesEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return WebCore::MockCameraProperties::MockCameraProperties(a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore24MockMicrophonePropertiesENS8_21MockSpeakerPropertiesENS8_20MockCameraPropertiesENS8_21MockDisplayPropertiesEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a2 + 8) = v3;
  if ((v3 & 0x8000000000000) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
}

uint64_t WebCore::MockMediaDevice::captureDevice(uint64_t this, uint64_t a2)
{
  char v2;
  _DWORD *v3;
  char v4;
  char v5;
  char v6;
  _DWORD *v7;
  char v8;
  _DWORD *v9;
  _DWORD *v10;
  char v11;
  char v12;
  _DWORD *v13;
  _DWORD *v14;
  WebCore::FontDescription *v15;

  switch(*(_DWORD *)(a2 + 88))
  {
    case 0:
      v2 = *(_BYTE *)(a2 + 16);
      v3 = *(_DWORD **)a2;
      if (*(_QWORD *)a2)
        *v3 += 2;
      v4 = v2 & 1;
      *(_QWORD *)this = v3;
      v5 = 1;
      goto LABEL_8;
    case 1:
      v8 = *(_BYTE *)(a2 + 16);
      v9 = *(_DWORD **)a2;
      if (*(_QWORD *)a2)
        *v9 += 2;
      v4 = v8 & 1;
      *(_QWORD *)this = v9;
      *(_BYTE *)(this + 8) = 2;
      v10 = *(_DWORD **)(a2 + 8);
      if (v10)
        *v10 += 2;
      *(_QWORD *)(this + 16) = v10;
      v3 = *(_DWORD **)(a2 + 24);
      if (!v3)
        goto LABEL_12;
      goto LABEL_11;
    case 2:
      v6 = *(_BYTE *)(a2 + 16);
      v3 = *(_DWORD **)a2;
      if (*(_QWORD *)a2)
        *v3 += 2;
      v4 = v6 & 1;
      *(_QWORD *)this = v3;
      v5 = 3;
LABEL_8:
      *(_BYTE *)(this + 8) = v5;
      v7 = *(_DWORD **)(a2 + 8);
      if (v7)
        *v7 += 2;
      *(_QWORD *)(this + 16) = v7;
      if (v3)
        goto LABEL_11;
      goto LABEL_12;
    case 3:
      v11 = *(_BYTE *)(a2 + 24);
      v12 = *(_BYTE *)(a2 + 16);
      v13 = *(_DWORD **)a2;
      if (*(_QWORD *)a2)
        *v13 += 2;
      v4 = v12 & 1;
      *(_QWORD *)this = v13;
      *(_BYTE *)(this + 8) = v11;
      v14 = *(_DWORD **)(a2 + 8);
      if (v14)
        *v14 += 2;
      *(_QWORD *)(this + 16) = v14;
      v3 = (_DWORD *)*MEMORY[0x1E0CBF738];
      if (!*MEMORY[0x1E0CBF738])
        goto LABEL_12;
LABEL_11:
      *v3 += 2;
LABEL_12:
      *(_QWORD *)(this + 24) = v3;
      *(_WORD *)(this + 32) = 1;
      *(_BYTE *)(this + 34) = 1;
      *(_BYTE *)(this + 35) = v4;
      break;
    default:
      v15 = (WebCore::FontDescription *)std::__throw_bad_variant_access[abi:sn180100]();
      this = std::__optional_storage_base<WebCore::FontCascadeDescription,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::FontCascadeDescription,false>>(v15);
      break;
  }
  return this;
}

__n128 std::__optional_storage_base<WebCore::FontCascadeDescription,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::FontCascadeDescription,false>>(WebCore::FontDescription *this, uint64_t a2)
{
  WTF::StringImpl *v4;
  __n128 result;
  uint64_t v6;
  unsigned int *v7;
  int v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl **v27;
  uint64_t v28;
  WTF::StringImpl *v29;

  if (*((unsigned __int8 *)this + 184) == *(unsigned __int8 *)(a2 + 184))
  {
    if (*((_BYTE *)this + 184))
    {
      WebCore::FontDescription::operator=((uint64_t)this, (uint64_t *)a2);
      v6 = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a2 + 168) = 0;
      v7 = (unsigned int *)*((_QWORD *)this + 21);
      *((_QWORD *)this + 21) = v6;
      if (v7)
      {
        if (*v7 == 1)
        {
          v22 = v7[1];
          if ((_DWORD)v22)
          {
            v23 = (WTF::StringImpl **)(v7 + 2);
            v24 = 8 * v22;
            do
            {
              v25 = *v23;
              *v23 = 0;
              if (v25)
              {
                if (*(_DWORD *)v25 == 2)
                  WTF::StringImpl::destroy(v25, v4);
                else
                  *(_DWORD *)v25 -= 2;
              }
              ++v23;
              v24 -= 8;
            }
            while (v24);
          }
          WTF::fastFree((WTF *)v7, v4);
        }
        else
        {
          --*v7;
        }
      }
      v8 = *(_DWORD *)(a2 + 176);
      *((_WORD *)this + 90) = *(_WORD *)(a2 + 180);
      *((_DWORD *)this + 44) = v8;
    }
  }
  else if (*((_BYTE *)this + 184))
  {
    v9 = (unsigned int *)*((_QWORD *)this + 21);
    *((_QWORD *)this + 21) = 0;
    if (v9)
    {
      if (*v9 == 1)
      {
        v26 = v9[1];
        if ((_DWORD)v26)
        {
          v27 = (WTF::StringImpl **)(v9 + 2);
          v28 = 8 * v26;
          do
          {
            v29 = *v27;
            *v27 = 0;
            if (v29)
            {
              if (*(_DWORD *)v29 == 2)
                WTF::StringImpl::destroy(v29, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v29 -= 2;
            }
            ++v27;
            v28 -= 8;
          }
          while (v28);
        }
        WTF::fastFree((WTF *)v9, (void *)a2);
      }
      else
      {
        --*v9;
      }
    }
    WebCore::FontDescription::~FontDescription(this, (WTF::StringImpl *)a2);
    *((_BYTE *)this + 184) = 0;
  }
  else
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    v10 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)this = v10;
    LODWORD(v10) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = 0;
    *((_DWORD *)this + 2) = v10;
    LODWORD(v10) = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    *((_DWORD *)this + 3) = v10;
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    v11 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    *((_QWORD *)this + 2) = v11;
    LODWORD(v11) = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    *((_DWORD *)this + 6) = v11;
    LODWORD(v11) = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    *((_DWORD *)this + 7) = v11;
    v12 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = 0;
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 4) = v12;
    v13 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 40) = 0;
    *((_QWORD *)this + 5) = v13;
    LODWORD(v13) = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 48) = 0;
    *((_DWORD *)this + 12) = v13;
    LODWORD(v13) = *(_DWORD *)(a2 + 52);
    *(_DWORD *)(a2 + 52) = 0;
    *((_DWORD *)this + 13) = v13;
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 8) = 0;
    v14 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *((_QWORD *)this + 7) = v14;
    LODWORD(v14) = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a2 + 64) = 0;
    *((_DWORD *)this + 16) = v14;
    LODWORD(v14) = *(_DWORD *)(a2 + 68);
    *(_DWORD *)(a2 + 68) = 0;
    *((_DWORD *)this + 17) = v14;
    v15 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a2 + 72) = 0;
    *((_QWORD *)this + 9) = v15;
    v16 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a2 + 80) = 0;
    *((_QWORD *)this + 10) = v16;
    v17 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a2 + 88) = 0;
    *((_QWORD *)this + 11) = v17;
    *((_WORD *)this + 48) = *(_WORD *)(a2 + 96);
    *((_BYTE *)this + 104) = *(_BYTE *)(a2 + 104);
    v18 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a2 + 112) = 0;
    *((_QWORD *)this + 14) = v18;
    *((_QWORD *)this + 15) = *(_QWORD *)(a2 + 120);
    v19 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a2 + 128) = 0;
    *((_QWORD *)this + 16) = v19;
    v20 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a2 + 136) = 0;
    *((_QWORD *)this + 17) = v20;
    result = *(__n128 *)(a2 + 144);
    *(_QWORD *)((char *)this + 159) = *(_QWORD *)(a2 + 159);
    *((__n128 *)this + 9) = result;
    v21 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a2 + 168) = 0;
    *((_QWORD *)this + 21) = v21;
    LODWORD(v21) = *(_DWORD *)(a2 + 176);
    *((_WORD *)this + 90) = *(_WORD *)(a2 + 180);
    *((_DWORD *)this + 44) = v21;
    *((_BYTE *)this + 184) = 1;
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN7WebCore23MockRealtimeVideoSource17takePhotoInternalEONS3_13PhotoSettingsEE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEED1Ev(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *a1 = off_1E341BF88;
  v2 = a1[7];
  a1[7] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeVideoCaptureSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v2 + 304));
  v3 = a1[1];
  if (v3)
  {
    WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::assertIsDead(v3);
    v4 = (unsigned int *)a1[1];
    a1[1] = 0;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v4 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
      }
    }
  }
  else
  {
    a1[1] = 0;
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN7WebCore23MockRealtimeVideoSource17takePhotoInternalEONS3_13PhotoSettingsEE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEED0Ev(WTF *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)a1 = off_1E341BF88;
  v3 = *((_QWORD *)a1 + 7);
  *((_QWORD *)a1 + 7) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeVideoCaptureSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v3 + 304));
  v4 = *((_QWORD *)a1 + 1);
  if (v4)
  {
    WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::assertIsDead(v4);
    v5 = (unsigned int *)*((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = 0;
    if (v5)
    {
      v6 = v5 + 2;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v5 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
      }
    }
  }
  else
  {
    *((_QWORD *)a1 + 1) = 0;
  }
  return WTF::fastFree(a1, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN7WebCore23MockRealtimeVideoSource17takePhotoInternalEONS3_13PhotoSettingsEE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEE4callEv(uint64_t a1)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unint64_t v5;
  void *v6;
  int v7;
  float *v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v12;
  _BYTE *v13;
  int v14;
  WTF *v15;
  uint64_t v16;
  __int128 v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  WTF::Lock *v25;
  int v26;
  WTF *v27;
  WTF::StringImpl *v28;
  float *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  int v37;
  uint64_t result;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  WTF::StringImpl *v53;
  float *v54;
  WTF *v55;
  uint64_t v56;
  uint64_t v57;
  WTF::Lock *v58;
  uint64_t v59;
  uint64_t v60;

  v2 = *(unsigned __int8 **)(a1 + 48);
  v3 = v2 + 2266;
  if (__ldaxr(v2 + 2266))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v2 + 2266);
LABEL_5:
  v5 = a1 + 8;
  WebCore::MockRealtimeVideoSource::generateFrameInternal((unint64_t)&v57, (uint64_t)v2);
  WebCore::MockRealtimeVideoSource::invalidateDrawingState((WebCore::MockRealtimeVideoSource *)v2, v6);
  v7 = __ldxr(v3);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v3))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 2266));
  v8 = (float *)v57;
  if (v57)
  {
    v9 = *(_QWORD *)(v57 + 8);
    if (__ldaxr((unsigned __int8 *)v9))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v9))
    {
      goto LABEL_19;
    }
    MEMORY[0x19AEA534C](v9);
LABEL_19:
    ++*(_QWORD *)(v9 + 8);
    v14 = __ldxr((unsigned __int8 *)v9);
    if (v14 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v9))
        goto LABEL_24;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
LABEL_24:
    v54 = v8;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v53 = (WTF::StringImpl *)v51;
    WebCore::ImageBuffer::toData((WebCore *)&v53, &v54, 0, 0, 0, &v55);
    v15 = v55;
    v16 = v56;
    v55 = 0;
    v56 = 0;
    v51 = 0uLL;
    *(_QWORD *)&v52 = "operator()";
    *((_QWORD *)&v52 + 1) = 0;
    v11 = WTF::fastMalloc((WTF *)0x90);
    *(_DWORD *)(v11 + 8) = 1;
    *(_QWORD *)v11 = off_1E31F73A0;
    v17 = v52;
    *(_OWORD *)(v11 + 16) = v51;
    *(_OWORD *)(v11 + 32) = v17;
    *(_BYTE *)(v11 + 48) = 0;
    v18 = (unsigned __int8 *)(v11 + 48);
    *(_DWORD *)(v11 + 88) = 0;
    *(_QWORD *)(v11 + 96) = v11 + 112;
    *(_QWORD *)(v11 + 104) = 1;
    *(_QWORD *)(v11 + 120) = 0;
    *(_QWORD *)(v11 + 128) = 0;
    *(_WORD *)(v11 + 136) = 0;
    v19 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v11);
    if (*v19 && v19[16] >= 4u)
      v19 = (unsigned __int8 *)WTF::Logger::log<char [10],WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>((uint64_t)v19, 4u, "creating ", v11);
    v58 = (WTF::Lock *)(v11 + 48);
    LOBYTE(v59) = 1;
    if (__ldaxr(v18))
    {
      __clrex();
    }
    else if (!__stxr(1u, v18))
    {
LABEL_31:
      v21 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v19);
      if (*v21 && v21[16] >= 4u)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>((uint64_t)v21, 4u, (WTF::Logger::LogSiteIdentifier *)&v51, " resolving ", v11);
      v22 = *(unsigned int *)(v11 + 88);
      if ((_DWORD)v22 != -1)
        ((void (*)(uint64_t *, uint64_t))off_1E341BF60[v22])(&v60, v11 + 56);
      *(_DWORD *)(v11 + 88) = -1;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v23 = v60;
      *(_QWORD *)(v11 + 56) = v15;
      *(_QWORD *)(v11 + 64) = v16;
      *(_QWORD *)(v11 + 72) = v23;
      *(_DWORD *)(v11 + 80) = 0;
      *(_DWORD *)(v11 + 88) = 1;
      WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::dispatchAll(v11, (unsigned __int8 **)&v58);
      if ((_BYTE)v59)
      {
        v25 = v58;
        v26 = __ldxr((unsigned __int8 *)v58);
        if (v26 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v58))
            goto LABEL_42;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow(v25);
      }
LABEL_42:
      v27 = v55;
      if (v55)
      {
        v55 = 0;
        LODWORD(v56) = 0;
        WTF::fastFree(v27, v24);
      }
      v28 = v53;
      v53 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v24);
        else
          *(_DWORD *)v28 -= 2;
      }
      v29 = v54;
      v54 = 0;
      if (!v29)
      {
LABEL_48:
        v30 = v57;
        v57 = 0;
        if (!v30)
          goto LABEL_65;
        v31 = *(_QWORD *)(v30 + 8);
        if (__ldaxr((unsigned __int8 *)v31))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v31))
        {
          goto LABEL_53;
        }
        MEMORY[0x19AEA534C](v31);
LABEL_53:
        v33 = *(_QWORD *)(v31 + 8);
        v34 = v33 - 1;
        *(_QWORD *)(v31 + 8) = v33 - 1;
        if (v33 == 1)
        {
          v49 = *(_QWORD *)(v31 + 16);
          v35 = *(_QWORD *)(v31 + 24);
          *(_QWORD *)(v31 + 24) = 0;
          v36 = v49 != 0;
        }
        else
        {
          v35 = 0;
          v36 = 1;
        }
        v37 = __ldxr((unsigned __int8 *)v31);
        if (v37 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v31))
          {
            if (v34)
              goto LABEL_65;
            goto LABEL_61;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v31);
        if (v34)
          goto LABEL_65;
LABEL_61:
        if (v35)
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
        if (!v36)
          WTF::fastFree((WTF *)v31, v24);
        goto LABEL_65;
      }
      v42 = *((_QWORD *)v29 + 1);
      if (__ldaxr((unsigned __int8 *)v42))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v42))
      {
        goto LABEL_75;
      }
      MEMORY[0x19AEA534C](v42);
LABEL_75:
      v44 = *(_QWORD *)(v42 + 8);
      v45 = v44 - 1;
      *(_QWORD *)(v42 + 8) = v44 - 1;
      if (v44 == 1)
      {
        v50 = *(_QWORD *)(v42 + 16);
        v46 = *(_QWORD *)(v42 + 24);
        *(_QWORD *)(v42 + 24) = 0;
        v47 = v50 != 0;
      }
      else
      {
        v46 = 0;
        v47 = 1;
      }
      v48 = __ldxr((unsigned __int8 *)v42);
      if (v48 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v42))
        {
LABEL_82:
          if (!v45)
          {
            if (v46)
              (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
            if (!v47)
              WTF::fastFree((WTF *)v42, v24);
          }
          goto LABEL_48;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v42);
      goto LABEL_82;
    }
    v19 = (unsigned __int8 *)MEMORY[0x19AEA534C](v18);
    goto LABEL_31;
  }
  v58 = (WTF::Lock *)"Failed to capture photo";
  v59 = 24;
  v51 = 0uLL;
  *(_QWORD *)&v52 = "operator()";
  *((_QWORD *)&v52 + 1) = 0;
  v11 = WTF::fastMalloc((WTF *)0x90);
  *(_DWORD *)(v11 + 8) = 1;
  *(_QWORD *)v11 = off_1E31F73A0;
  v12 = v52;
  *(_OWORD *)(v11 + 16) = v51;
  *(_OWORD *)(v11 + 32) = v12;
  *(_BYTE *)(v11 + 48) = 0;
  *(_DWORD *)(v11 + 88) = 0;
  *(_QWORD *)(v11 + 96) = v11 + 112;
  *(_QWORD *)(v11 + 104) = 1;
  *(_QWORD *)(v11 + 120) = 0;
  *(_QWORD *)(v11 + 128) = 0;
  *(_WORD *)(v11 + 136) = 0;
  v13 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v11);
  if (*v13 && v13[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>((uint64_t)v13, 4u, "creating ", v11);
  WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::reject<WTF::ASCIILiteral,std::enable_if<true,void>>(v11, (uint64_t)&v58, (WTF::Logger::LogSiteIdentifier *)&v51);
LABEL_65:
  v51 = 0uLL;
  *(_QWORD *)&v52 = "invokeAsync proxy";
  *((_QWORD *)&v52 + 1) = 0;
  result = WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::chainTo((unsigned __int8 *)v11, v5, (WTF::Logger::LogSiteIdentifier *)&v51);
  v39 = (unsigned int *)(v11 + 8);
  do
  {
    v40 = __ldaxr(v39);
    v41 = v40 - 1;
  }
  while (__stlxr(v41, v39));
  if (!v41)
  {
    atomic_store(1u, (unsigned int *)(v11 + 8));
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  }
  return result;
}

uint64_t WebCore::MockRealtimeVideoSource::DrawingState::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  WebCore::FontCascade *v5;
  void *v6;
  WebCore::FontCascade *v7;
  void *v8;
  WebCore::FontCascade *v9;
  void *v10;

  v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v4;
  v5 = (WebCore::FontCascade *)(a1 + 16);
  v6 = a2 + 2;
  if (*(unsigned __int8 *)(a1 + 312) == *((unsigned __int8 *)a2 + 312))
  {
    if (*(_BYTE *)(a1 + 312))
      WebCore::FontCascade::operator=((uint64_t)v5, (uint64_t)v6);
  }
  else if (*(_BYTE *)(a1 + 312))
  {
    WebCore::FontCascade::~FontCascade(v5, v6);
    *(_BYTE *)(a1 + 312) = 0;
  }
  else
  {
    WebCore::FontCascade::FontCascade(v5, (const WebCore::FontCascade *)v6);
    *(_BYTE *)(a1 + 312) = 1;
  }
  v7 = (WebCore::FontCascade *)(a1 + 320);
  v8 = a2 + 40;
  if (*(unsigned __int8 *)(a1 + 616) == *((unsigned __int8 *)a2 + 616))
  {
    if (*(_BYTE *)(a1 + 616))
      WebCore::FontCascade::operator=((uint64_t)v7, (uint64_t)v8);
  }
  else if (*(_BYTE *)(a1 + 616))
  {
    WebCore::FontCascade::~FontCascade(v7, v8);
    *(_BYTE *)(a1 + 616) = 0;
  }
  else
  {
    WebCore::FontCascade::FontCascade(v7, (const WebCore::FontCascade *)v8);
    *(_BYTE *)(a1 + 616) = 1;
  }
  v9 = (WebCore::FontCascade *)(a1 + 624);
  v10 = a2 + 78;
  if (*(unsigned __int8 *)(a1 + 920) == *((unsigned __int8 *)a2 + 920))
  {
    if (*(_BYTE *)(a1 + 920))
      WebCore::FontCascade::operator=((uint64_t)v9, (uint64_t)v10);
  }
  else if (*(_BYTE *)(a1 + 920))
  {
    WebCore::FontCascade::~FontCascade(v9, v10);
    *(_BYTE *)(a1 + 920) = 0;
  }
  else
  {
    WebCore::FontCascade::FontCascade(v9, (const WebCore::FontCascade *)v10);
    *(_BYTE *)(a1 + 920) = 1;
  }
  std::__optional_storage_base<WebCore::FontCascadeDescription,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::FontCascadeDescription,false>>((WebCore::FontDescription *)(a1 + 928), (uint64_t)(a2 + 116));
  return a1;
}

void WebCore::MockRealtimeVideoSource::DrawingState::~DrawingState(WebCore::MockRealtimeVideoSource::DrawingState *this, WTF::StringImpl *a2)
{
  unsigned int *v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  if (*((_BYTE *)this + 1112))
  {
    v3 = (unsigned int *)*((_QWORD *)this + 137);
    *((_QWORD *)this + 137) = 0;
    if (v3)
    {
      if (*v3 == 1)
      {
        v4 = v3[1];
        if ((_DWORD)v4)
        {
          v5 = (WTF::StringImpl **)(v3 + 2);
          v6 = 8 * v4;
          do
          {
            v7 = *v5;
            *v5 = 0;
            if (v7)
            {
              if (*(_DWORD *)v7 == 2)
                WTF::StringImpl::destroy(v7, a2);
              else
                *(_DWORD *)v7 -= 2;
            }
            ++v5;
            v6 -= 8;
          }
          while (v6);
        }
        WTF::fastFree((WTF *)v3, a2);
      }
      else
      {
        --*v3;
      }
    }
    WebCore::FontDescription::~FontDescription((WebCore::MockRealtimeVideoSource::DrawingState *)((char *)this + 928), a2);
  }
  if (*((_BYTE *)this + 920))
    WebCore::FontCascade::~FontCascade((WebCore::MockRealtimeVideoSource::DrawingState *)((char *)this + 624), a2);
  if (*((_BYTE *)this + 616))
    WebCore::FontCascade::~FontCascade((WebCore::MockRealtimeVideoSource::DrawingState *)((char *)this + 320), a2);
  if (*((_BYTE *)this + 312))
    WebCore::FontCascade::~FontCascade((WebCore::MockRealtimeVideoSource::DrawingState *)((char *)this + 16), a2);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::DeviceOrientationClientMock::*&)(void),WebCore::DeviceOrientationClientMock*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t *WebCore::MockRealtimeMediaSourceCenter::MockAudioCaptureDeviceManager::captureDevices(WebCore::MockRealtimeMediaSourceCenter::MockAudioCaptureDeviceManager *this, WTF::StringImpl *a2)
{
  WebCore::MockRealtimeMediaSourceCenter::microphoneDevices(this, a2);
  return &qword_1ECE84108;
}

uint64_t WebCore::MockRealtimeMediaSourceCenter::MockAudioCaptureDeviceManager::captureDeviceWithPersistentID@<X0>(int a1@<W1>, WTF::StringImpl **a2@<X2>, uint64_t a3@<X8>)
{
  return WebCore::MockRealtimeMediaSourceCenter::captureDeviceWithPersistentID(a3, a1, a2);
}

void WebCore::MockRealtimeMediaSourceCenter::MockAudioCaptureDeviceManager::~MockAudioCaptureDeviceManager(WebCore::MockRealtimeMediaSourceCenter::MockAudioCaptureDeviceManager *this)
{
  JUMPOUT(0x19AEA7644);
}

uint64_t *WebCore::MockRealtimeMediaSourceCenter::MockVideoCaptureDeviceManager::captureDevices(WebCore::MockRealtimeMediaSourceCenter::MockVideoCaptureDeviceManager *this, WTF::StringImpl *a2)
{
  WebCore::MockRealtimeMediaSourceCenter::videoDevices(this, a2);
  return &qword_1ECE84128;
}

uint64_t WebCore::MockRealtimeMediaSourceCenter::MockVideoCaptureDeviceManager::captureDeviceWithPersistentID@<X0>(int a1@<W1>, WTF::StringImpl **a2@<X2>, uint64_t a3@<X8>)
{
  return WebCore::MockRealtimeMediaSourceCenter::captureDeviceWithPersistentID(a3, a1, a2);
}

void WebCore::MockRealtimeMediaSourceCenter::MockVideoCaptureDeviceManager::~MockVideoCaptureDeviceManager(WebCore::MockRealtimeMediaSourceCenter::MockVideoCaptureDeviceManager *this)
{
  JUMPOUT(0x19AEA7644);
}

uint64_t *WebCore::MockRealtimeMediaSourceCenter::MockDisplayCaptureDeviceManager::captureDevices(WebCore::MockRealtimeMediaSourceCenter::MockDisplayCaptureDeviceManager *this, WTF::StringImpl *a2)
{
  WebCore::MockRealtimeMediaSourceCenter::displayDevices(this, a2);
  return &qword_1ECE84138;
}

uint64_t WebCore::MockRealtimeMediaSourceCenter::MockDisplayCaptureDeviceManager::captureDeviceWithPersistentID@<X0>(int a1@<W1>, WTF::StringImpl **a2@<X2>, uint64_t a3@<X8>)
{
  return WebCore::MockRealtimeMediaSourceCenter::captureDeviceWithPersistentID(a3, a1, a2);
}

void WebCore::MockRealtimeMediaSourceCenter::MockDisplayCaptureDeviceManager::~MockDisplayCaptureDeviceManager(WebCore::MockRealtimeMediaSourceCenter::MockDisplayCaptureDeviceManager *this)
{
  JUMPOUT(0x19AEA7644);
}

WTF *WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(WTF *result, WTF::StringImpl *a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  if (*((_DWORD *)result + 2))
  {
    v2 = result;
    v3 = *((unsigned int *)result + 3);
    if ((_DWORD)v3)
    {
      v4 = 40 * v3;
      v5 = (WTF::StringImpl **)(*(_QWORD *)result + 24);
      do
      {
        v6 = *v5;
        *v5 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, a2);
          else
            *(_DWORD *)v6 -= 2;
        }
        v7 = *(v5 - 1);
        *(v5 - 1) = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, a2);
          else
            *(_DWORD *)v7 -= 2;
        }
        v8 = *(v5 - 3);
        *(v5 - 3) = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, a2);
          else
            *(_DWORD *)v8 -= 2;
        }
        v5 += 5;
        v4 -= 40;
      }
      while (v4);
      *((_DWORD *)v2 + 3) = 0;
    }
    result = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      return (WTF *)WTF::fastFree(result, a2);
    }
  }
  return result;
}

WTF::StringImpl *WTF::GenericHashTraits<WebCore::MockMediaDevice>::assignToEmpty<WebCore::MockMediaDevice,WebCore::MockMediaDevice const&>(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  _DWORD *v6;
  WTF::StringImpl *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(_DWORD **)(a2 + 8);
  if (v6)
    *v6 += 2;
  result = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(unsigned int *)(a1 + 88);
  v9 = *(unsigned int *)(a2 + 88);
  if ((_DWORD)v8 == -1)
  {
    if ((_DWORD)v9 == -1)
      return result;
  }
  else if ((_DWORD)v9 == -1)
  {
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E341BEC8[v8])(&v11, a1 + 24);
    *(_DWORD *)(a1 + 88) = -1;
    return result;
  }
  v10 = a1 + 24;
  return (WTF::StringImpl *)((uint64_t (*)(uint64_t *))off_1E341BEE8[v9])(&v10);
}

uint64_t WTF::Vector<WebCore::MockMediaDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unint64_t a1, unint64_t a2)
{
  unint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  int v14;
  uint64_t v15;
  void *v16;

  v2 = a2;
  v3 = (WTF::StringImpl *)qword_1ECE840F8;
  if (qword_1ECE840F8 > a2
    || (v4 = (WTF::StringImpl *)(qword_1ECE840F8 + 96 * dword_1ECE840F0), (unint64_t)v4 <= a2))
  {
    v11 = dword_1ECE840E8 + ((unint64_t)dword_1ECE840E8 >> 2);
    if (v11 >= 0x10)
      v12 = v11 + 1;
    else
      v12 = 16;
    if (v12 <= a1)
      v12 = a1;
    if (v12 > dword_1ECE840E8)
    {
      if (v12 >= 0x2AAAAAB)
      {
        __break(0xC471u);
        JUMPOUT(0x1962D44F8);
      }
      v13 = (WTF::StringImpl *)(qword_1ECE840F8 + 96 * dword_1ECE840F0);
      v14 = 96 * v12;
      v15 = WTF::fastMalloc((WTF *)(96 * v12));
      dword_1ECE840E8 = (v14 & 0xFFFFFFE0) / 0x60;
      qword_1ECE840F8 = v15;
      WTF::VectorMover<false,WebCore::MockMediaDevice>::move(v3, v13, v15);
      if (v3)
      {
        if ((WTF::StringImpl *)qword_1ECE840F8 == v3)
        {
          qword_1ECE840F8 = 0;
          dword_1ECE840E8 = 0;
        }
        WTF::fastFree(v3, v16);
      }
    }
  }
  else
  {
    v5 = dword_1ECE840E8 + ((unint64_t)dword_1ECE840E8 >> 2);
    if (v5 >= 0x10)
      v6 = v5 + 1;
    else
      v6 = 16;
    if (v6 <= a1)
      v6 = a1;
    if (v6 <= dword_1ECE840E8)
    {
      v10 = qword_1ECE840F8;
    }
    else
    {
      if (v6 >= 0x2AAAAAB)
      {
        __break(0xC471u);
        JUMPOUT(0x1962D4500);
      }
      v7 = 96 * v6;
      v8 = WTF::fastMalloc((WTF *)(96 * v6));
      dword_1ECE840E8 = (v7 & 0xFFFFFFE0) / 0x60;
      qword_1ECE840F8 = v8;
      WTF::VectorMover<false,WebCore::MockMediaDevice>::move(v3, v4, v8);
      v10 = qword_1ECE840F8;
      if (v3)
      {
        if ((WTF::StringImpl *)qword_1ECE840F8 == v3)
        {
          qword_1ECE840F8 = 0;
          dword_1ECE840E8 = 0;
        }
        WTF::fastFree(v3, v9);
        v10 = qword_1ECE840F8;
      }
    }
    return v10 + 32 * ((uint64_t)(v2 - (_QWORD)v3) >> 5);
  }
  return v2;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::MockMediaDevice>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  if (result != a2)
  {
    v19 = v3;
    v20 = v4;
    v7 = result;
    v8 = 0;
    do
    {
      v9 = a3 + v8;
      v10 = (char *)v7 + v8;
      v11 = *(_QWORD *)((char *)v7 + v8);
      *(_QWORD *)v10 = 0;
      *(_QWORD *)v9 = v11;
      v12 = *(_QWORD *)((char *)v7 + v8 + 8);
      *((_QWORD *)v10 + 1) = 0;
      *(_QWORD *)(v9 + 8) = v12;
      *(_BYTE *)(v9 + 16) = *((_BYTE *)v7 + v8 + 16);
      *(_BYTE *)(a3 + v8 + 24) = 0;
      v13 = (WTF::StringImpl *)(a3 + v8 + 24);
      *(_DWORD *)(v9 + 88) = -1;
      v14 = *(unsigned int *)((char *)v7 + v8 + 88);
      if ((_DWORD)v14 != -1)
      {
        ((void (*)(char *, WTF::StringImpl *, char *))off_1E341BF08[v14])(&v17, v13, v10 + 24);
        *(_DWORD *)(v9 + 88) = v14;
        v15 = *((unsigned int *)v10 + 22);
        if ((_DWORD)v15 != -1)
          ((void (*)(char *, char *))off_1E341BEC8[v15])(&v18, v10 + 24);
      }
      *((_DWORD *)v10 + 22) = -1;
      v16 = (WTF::StringImpl *)*((_QWORD *)v10 + 1);
      *((_QWORD *)v10 + 1) = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v13);
        else
          *(_DWORD *)v16 -= 2;
      }
      result = *(WTF::StringImpl **)((char *)v7 + v8);
      *(_QWORD *)((char *)v7 + v8) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
        else
          *(_DWORD *)result -= 2;
      }
      v8 += 96;
    }
    while ((WTF::StringImpl *)((char *)v7 + v8) != a2);
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::MockMediaDevice>::moveOverlapping(WTF::StringImpl *result, WTF::StringImpl *a2, unint64_t a3)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  char v15;
  char v16;

  v4 = result;
  if ((unint64_t)result > a3)
    return WTF::VectorMover<false,WebCore::MockMediaDevice>::move(result, a2, a3);
  if (a2 != result)
  {
    v5 = 0;
    v6 = a3 + a2 - result;
    do
    {
      v7 = (char *)a2 + v5;
      v8 = v6 + v5;
      v9 = *(_QWORD *)((char *)a2 + v5 - 96);
      *((_QWORD *)v7 - 12) = 0;
      *(_QWORD *)(v8 - 96) = v9;
      v10 = *(_QWORD *)((char *)a2 + v5 - 88);
      *((_QWORD *)v7 - 11) = 0;
      *(_QWORD *)(v8 - 88) = v10;
      *(_BYTE *)(v8 - 80) = *((_BYTE *)a2 + v5 - 80);
      *(_BYTE *)(v6 + v5 - 72) = 0;
      v11 = (WTF::StringImpl *)(v6 + v5 - 72);
      *(_DWORD *)(v8 - 8) = -1;
      v12 = *(unsigned int *)((char *)a2 + v5 - 8);
      if ((_DWORD)v12 != -1)
      {
        ((void (*)(char *, WTF::StringImpl *, char *))off_1E341BF08[v12])(&v15, v11, v7 - 72);
        *(_DWORD *)(v8 - 8) = v12;
        v13 = *((unsigned int *)v7 - 2);
        if ((_DWORD)v13 != -1)
          ((void (*)(char *, char *))off_1E341BEC8[v13])(&v16, v7 - 72);
      }
      *((_DWORD *)v7 - 2) = -1;
      v14 = (WTF::StringImpl *)*((_QWORD *)v7 - 11);
      *((_QWORD *)v7 - 11) = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v11);
        else
          *(_DWORD *)v14 -= 2;
      }
      result = (WTF::StringImpl *)*((_QWORD *)v7 - 12);
      *((_QWORD *)v7 - 12) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
        else
          *(_DWORD *)result -= 2;
      }
      v5 -= 96;
    }
    while ((WTF::StringImpl *)((char *)a2 + v5) != v4);
  }
  return result;
}

void WebCore::MockRealtimeAudioSourceFactory::~MockRealtimeAudioSourceFactory(WebCore::MockRealtimeAudioSourceFactory *this)
{
  JUMPOUT(0x19AEA7644);
}

WTF::StringImpl *WebCore::MockRealtimeAudioSourceFactory::createAudioCaptureSource@<X0>(uint64_t a1@<X1>, const WTF::StringImpl *a2@<X2>, const WebCore::MediaConstraints *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *result;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  char v26;
  int v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  WebCore::MockRealtimeMediaSourceCenter::captureDeviceWithPersistentID((uint64_t)&v22, *(unsigned __int8 *)(a1 + 8), (WTF::StringImpl **)a1);
  if (v26)
  {
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v10);
      else
        *(_DWORD *)v25 -= 2;
    }
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v10);
      else
        *(_DWORD *)v24 -= 2;
    }
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v10);
      else
        *(_DWORD *)v22 -= 2;
    }
    WebCore::MockRealtimeMediaSourceCenter::mockDeviceWithPersistentID(a1, v11, (uint64_t)&v22);
    if (!v28)
      __break(1u);
    if ((v24 & 2) != 0)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_QWORD *)a5 = 0;
      *(_WORD *)(a5 + 16) = 6;
    }
    else
    {
      v13 = *(WTF::StringImpl **)a1;
      if (*(_QWORD *)a1)
        *(_DWORD *)v13 += 2;
      v20 = v13;
      {
        WebCore::CaptureDevice::label(void)::{lambda(void)#1}::operator() const(void)::impl += 2;
        WebCore::CaptureDevice::label(void)const::airPods = &WebCore::CaptureDevice::label(void)::{lambda(void)#1}::operator() const(void)::impl;
      }
      if (*(unsigned __int8 *)(a1 + 8) - 1 > 1
        || (!WebCore::CaptureDevice::label(void)const::airPods
          ? (v12 = 0)
          : (v12 = (WTF::StringImpl *)*((_QWORD *)WebCore::CaptureDevice::label(void)const::airPods + 1)),
            !*(_QWORD *)(a1 + 16) || WTF::StringImpl::find() == -1))
      {
        v14 = (WTF::StringImpl **)(a1 + 16);
      }
      else
      {
        v14 = (WTF::StringImpl **)&WebCore::CaptureDevice::label(void)const::airPods;
      }
      v17 = *v14;
      if (*v14)
      {
        if ((*((_BYTE *)v17 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v17 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase(v17, v12);
          v17 = v21;
        }
      }
      v21 = v17;
      WebCore::MockRealtimeAudioSource::create((WebCore::CoreAudioCaptureSourceFactory *)&v20, &v21, a2, a3, a4, a5);
      v18 = v21;
      v21 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v16);
        else
          *(_DWORD *)v18 -= 2;
      }
      result = v20;
      v20 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
        else
          *(_DWORD *)result -= 2;
      }
    }
    if (v28)
    {
      if (v27 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E341BEC8[v27])(&v21, &v25);
      v27 = -1;
      v19 = v23;
      v23 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v16);
        else
          *(_DWORD *)v19 -= 2;
      }
      result = v22;
      v22 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_QWORD *)a5 = 0;
    *(_WORD *)(a5 + 16) = 6;
  }
  return result;
}

uint64_t *WebCore::MockRealtimeAudioSourceFactory::audioCaptureDeviceManager(WebCore::MockRealtimeAudioSourceFactory *this)
{
  {
    WebCore::MockRealtimeMediaSourceCenter::singleton(void)::center = (uint64_t)&off_1E341BFD8;
    unk_1ECE91270 = &off_1E341C010;
    qword_1ECE91278 = (uint64_t)&off_1E341C048;
    *(_QWORD *)&byte_1ECE91280 = 65793;
  }
  return &WebCore::MockRealtimeMediaSourceCenter::singleton(void)::center;
}

uint64_t *WebCore::MockRealtimeAudioSourceFactory::speakerDevices(WebCore::MockRealtimeAudioSourceFactory *this, WTF::StringImpl *a2)
{
  WebCore::MockRealtimeMediaSourceCenter::speakerDevices(this, a2);
  return &qword_1ECE84118;
}

void WebCore::MockRealtimeVideoSourceFactory::~MockRealtimeVideoSourceFactory(WebCore::MockRealtimeVideoSourceFactory *this)
{
  JUMPOUT(0x19AEA7644);
}

WTF::StringImpl *WebCore::MockRealtimeVideoSourceFactory::createVideoCaptureSource@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, const WebCore::MediaConstraints *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *result;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  char v26;
  int v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  WebCore::MockRealtimeMediaSourceCenter::captureDeviceWithPersistentID((uint64_t)&v22, 3, (WTF::StringImpl **)a1);
  if (v26)
  {
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v10);
      else
        *(_DWORD *)v25 -= 2;
    }
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v10);
      else
        *(_DWORD *)v24 -= 2;
    }
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v10);
      else
        *(_DWORD *)v22 -= 2;
    }
    WebCore::MockRealtimeMediaSourceCenter::mockDeviceWithPersistentID(a1, v11, (uint64_t)&v22);
    if (!v28)
      __break(1u);
    if ((v24 & 2) != 0)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_QWORD *)a5 = 0;
      *(_WORD *)(a5 + 16) = 6;
    }
    else
    {
      v13 = *(WTF::StringImpl **)a1;
      if (*(_QWORD *)a1)
        *(_DWORD *)v13 += 2;
      v20 = v13;
      {
        WebCore::CaptureDevice::label(void)::{lambda(void)#1}::operator() const(void)::impl += 2;
        WebCore::CaptureDevice::label(void)const::airPods = &WebCore::CaptureDevice::label(void)::{lambda(void)#1}::operator() const(void)::impl;
      }
      if (*(unsigned __int8 *)(a1 + 8) - 1 > 1
        || (!WebCore::CaptureDevice::label(void)const::airPods
          ? (v12 = 0)
          : (v12 = (WTF::StringImpl *)*((_QWORD *)WebCore::CaptureDevice::label(void)const::airPods + 1)),
            !*(_QWORD *)(a1 + 16) || WTF::StringImpl::find() == -1))
      {
        v14 = (WTF::StringImpl **)(a1 + 16);
      }
      else
      {
        v14 = (WTF::StringImpl **)&WebCore::CaptureDevice::label(void)const::airPods;
      }
      v17 = *v14;
      if (*v14)
      {
        if ((*((_BYTE *)v17 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v17 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase(v17, v12);
          v17 = v21;
        }
      }
      v21 = v17;
      WebCore::MockRealtimeVideoSource::create(&v20, &v21, a2, a3, a4, a5);
      v18 = v21;
      v21 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v16);
        else
          *(_DWORD *)v18 -= 2;
      }
      result = v20;
      v20 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
        else
          *(_DWORD *)result -= 2;
      }
    }
    if (v28)
    {
      if (v27 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E341BEC8[v27])(&v21, &v25);
      v27 = -1;
      v19 = v23;
      v23 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v16);
        else
          *(_DWORD *)v19 -= 2;
      }
      result = v22;
      v22 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_QWORD *)a5 = 0;
    *(_WORD *)(a5 + 16) = 6;
  }
  return result;
}

_QWORD *WebCore::MockRealtimeVideoSourceFactory::videoCaptureDeviceManager(WebCore::MockRealtimeVideoSourceFactory *this)
{
  {
    WebCore::MockRealtimeMediaSourceCenter::singleton(void)::center = (uint64_t)&off_1E341BFD8;
    qword_1ECE91270 = &off_1E341C010;
    qword_1ECE91278 = (uint64_t)&off_1E341C048;
    *(_QWORD *)&byte_1ECE91280 = 65793;
  }
  return &qword_1ECE91270;
}

void WebCore::MockRealtimeDisplaySourceFactory::~MockRealtimeDisplaySourceFactory(WebCore::MockRealtimeDisplaySourceFactory *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E341C0F8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E341C0F8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::MockRealtimeDisplaySourceFactory::createDisplayCaptureSource@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, const WebCore::MediaConstraints *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  WTF::StringImpl *v12;
  uint64_t result;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl **v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  WebCore::MockRealtimeMediaSourceCenter::captureDeviceWithPersistentID((uint64_t)&v36, *(unsigned __int8 *)(a2 + 8), (WTF::StringImpl **)a2);
  if (v40)
  {
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, v12);
      else
        *(_DWORD *)v39 -= 2;
    }
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v12);
      else
        *(_DWORD *)v38 -= 2;
    }
    result = (uint64_t)v36;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        result = WTF::StringImpl::destroy(v36, v12);
      else
        *(_DWORD *)v36 -= 2;
    }
    if ((*(_BYTE *)(a2 + 8) & 0xFE) == 4)
    {
      v15 = WTF::fastMalloc((WTF *)0x98);
      *(_QWORD *)(v15 + 8) = 0;
      *(_QWORD *)(v15 + 16) = 0;
      *(_QWORD *)(v15 + 32) = 0;
      *(_QWORD *)v15 = off_1E341BBE0;
      v16 = *(WTF::StringImpl **)a2;
      if (*(_QWORD *)a2)
        *(_DWORD *)v16 += 2;
      v34 = v16;
      {
        WebCore::CaptureDevice::label(void)::{lambda(void)#1}::operator() const(void)::impl += 2;
        WebCore::CaptureDevice::label(void)const::airPods = &WebCore::CaptureDevice::label(void)::{lambda(void)#1}::operator() const(void)::impl;
      }
      if (*(unsigned __int8 *)(a2 + 8) - 1 > 1
        || (!WebCore::CaptureDevice::label(void)const::airPods
          ? (v14 = 0)
          : (v14 = (WTF::StringImpl *)*((_QWORD *)WebCore::CaptureDevice::label(void)const::airPods + 1)),
            !*(_QWORD *)(a2 + 16) || WTF::StringImpl::find() == -1))
      {
        v17 = (WTF::StringImpl **)(a2 + 16);
      }
      else
      {
        v17 = (WTF::StringImpl **)&WebCore::CaptureDevice::label(void)const::airPods;
      }
      v18 = *v17;
      if (*v17)
      {
        if ((*((_BYTE *)v18 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v18 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase(v18, v14);
          v18 = v36;
        }
      }
      v33 = v18;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v37 = v35;
      v19 = WTF::fastMalloc((WTF *)0x9D8);
      WebCore::MockRealtimeVideoSourceMac::MockRealtimeVideoSourceMac(v19, &v34, &v33, (uint64_t *)&v36, a5);
      *(_QWORD *)(v15 + 40) = v19;
      v21 = v37;
      v37 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v20);
        else
          *(_DWORD *)v21 -= 2;
      }
      v22 = v36;
      v36 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v20);
        else
          *(_DWORD *)v22 -= 2;
      }
      v23 = v33;
      v33 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v20);
        else
          *(_DWORD *)v23 -= 2;
      }
      v24 = v34;
      v34 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v20);
        else
          *(_DWORD *)v24 -= 2;
      }
      *(_QWORD *)(v15 + 53) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 64) = 0;
      *(_QWORD *)(v15 + 72) = 0;
      *(_BYTE *)(v15 + 80) = 0;
      *(_QWORD *)(v15 + 96) = 0;
      *(_QWORD *)(v15 + 104) = 0;
      *(_QWORD *)(v15 + 88) = 0;
      *(_WORD *)(v15 + 112) = 4;
      *(_BYTE *)(v15 + 114) = 0;
      *(_QWORD *)(v15 + 128) = 0;
      *(_QWORD *)(v15 + 136) = 0;
      *(_QWORD *)(v15 + 120) = 0x3FF0000000000000;
      *(_QWORD *)(v15 + 142) = 0;
      v25 = *(_QWORD *)(v15 + 32);
      if (v25)
        goto LABEL_65;
      v25 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = v15;
      v26 = *(unsigned int **)(v15 + 32);
      *(_QWORD *)(v15 + 32) = v25;
      if (!v26)
        goto LABEL_65;
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        atomic_store(1u, v26);
        WTF::fastFree((WTF *)v26, v20);
      }
      v25 = *(_QWORD *)(v15 + 32);
      if (v25)
      {
LABEL_65:
        do
          v29 = __ldaxr((unsigned int *)v25);
        while (__stlxr(v29 + 1, (unsigned int *)v25));
      }
      v30 = *(unsigned int **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v25;
      if (v30)
      {
        do
        {
          v31 = __ldaxr(v30);
          v32 = v31 - 1;
        }
        while (__stlxr(v32, v30));
        if (!v32)
        {
          atomic_store(1u, v30);
          WTF::fastFree((WTF *)v30, v20);
        }
      }
      v36 = (WTF::StringImpl *)v15;
      LODWORD(v38) = 0;
      result = (uint64_t)WebCore::DisplayCaptureSourceCocoa::create((unsigned __int8 *)&v36, a2, a3, a4, a5, (uint64_t)a6);
      if ((_DWORD)v38 != -1)
        return ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E341C118[v38])(&v35, &v36);
    }
    else
    {
      *a6 = 0;
      a6[1] = 0;
      a6[2] = 0;
    }
  }
  else
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *a6 = 0;
    *((_WORD *)a6 + 8) = 6;
  }
  return result;
}

void sub_1962D53C0(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t *WebCore::MockRealtimeDisplaySourceFactory::displayCaptureDeviceManager(WebCore::MockRealtimeDisplaySourceFactory *this)
{
  {
    WebCore::MockRealtimeMediaSourceCenter::singleton(void)::center = (uint64_t)&off_1E341BFD8;
    qword_1ECE91270 = &off_1E341C010;
    qword_1ECE91278 = (uint64_t)&off_1E341C048;
    *(_QWORD *)&byte_1ECE91280 = 65793;
  }
  return &qword_1ECE91278;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MockRealtimeVideoSource::MockRealtimeVideoSource(WTF::String &&,WTF::AtomString &&,WebCore::MediaDeviceHashSalts &&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E341C138;
  a1[1] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeVideoCaptureSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v2 + 304));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MockRealtimeVideoSource::MockRealtimeVideoSource(WTF::String &&,WTF::AtomString &&,WebCore::MediaDeviceHashSalts &&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E341C138;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeVideoCaptureSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v3 + 304));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MockRealtimeVideoSource::MockRealtimeVideoSource(WTF::String &&,WTF::AtomString &&,WebCore::MediaDeviceHashSalts &&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::call(WTF::MonotonicTime *a1)
{
  uint64_t v1;
  uint64_t result;
  double v3;
  unsigned __int8 *v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *((_QWORD *)a1 + 1);
  if (*(double *)(v1 + 1696) != 0.0)
  {
    result = WTF::MonotonicTime::now(a1);
    if (*(double *)(v1 + 1696) < v3)
      return result;
    *(_QWORD *)(v1 + 1696) = 0;
  }
  v4 = (unsigned __int8 *)(v1 + 2266);
  if (__ldaxr((unsigned __int8 *)(v1 + 2266)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v1 + 2266);
LABEL_8:
  result = (uint64_t)WebCore::MockRealtimeVideoSource::generateFrameInternal((unint64_t)&v17, v1);
  v7 = v17;
  v17 = 0;
  if (!v7)
    goto LABEL_25;
  v8 = *(_QWORD *)(v7 + 8);
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_13;
  }
  result = MEMORY[0x19AEA534C](v8);
LABEL_13:
  v10 = *(_QWORD *)(v8 + 8);
  v11 = v10 - 1;
  *(_QWORD *)(v8 + 8) = v10 - 1;
  if (v10 == 1)
  {
    v16 = *(_QWORD *)(v8 + 16);
    v12 = *(_QWORD *)(v8 + 24);
    *(_QWORD *)(v8 + 24) = 0;
    v13 = v16 != 0;
  }
  else
  {
    v12 = 0;
    v13 = 1;
  }
  v14 = __ldxr((unsigned __int8 *)v8);
  if (v14 != 1)
  {
    __clrex();
LABEL_20:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (v11)
      goto LABEL_25;
    goto LABEL_21;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
    goto LABEL_20;
  if (v11)
    goto LABEL_25;
LABEL_21:
  if (v12)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (!v13)
    result = WTF::fastFree((WTF *)v8, v6);
LABEL_25:
  v15 = __ldxr(v4);
  if (v15 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

void _ZN3WTF9HashTableIPKN7WebCore23MockRealtimeVideoSourceENS_12KeyValuePairIS4_NS_6RefPtrINS_29ThreadSafeWeakPtrControlBlockENS_12RawPtrTraitsIS7_EENS_43ThreadSafeWeakPtrControlBlockRefDerefTraitsEEEEENS_24KeyValuePairKeyExtractorISC_EENS_11DefaultHashIS4_EENS_7HashMapIS4_SB_SG_NS_10HashTraitsIS4_EENSI_ISB_EENS_15HashTableTraitsEE18KeyValuePairTraitsESJ_E8removeIfIZNKS_21ThreadSafeWeakHashSetIS2_E24amortizedCleanupIfNeededEvEUlRT_E_EEbRKSS_(uint64_t a1, void *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t *v10;
  unsigned __int8 *v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  double v29;
  double v30;
  double v31;
  unsigned int v32;

  v2 = qword_1ECE84148;
  if (!qword_1ECE84148)
    return;
  v3 = *(_DWORD *)(qword_1ECE84148 - 4);
  if (!v3)
    return;
  v4 = 0;
  v5 = v3 - 1;
  do
  {
    v6 = v5;
    v7 = (_QWORD *)(v2 + 16 * v5);
    if ((unint64_t)(*v7 + 1) < 2)
      goto LABEL_29;
    v8 = v2 + 16 * v5;
    v11 = *(unsigned __int8 **)(v8 + 8);
    v10 = (uint64_t *)(v8 + 8);
    v9 = v11;
    if (__ldaxr(v11))
    {
      __clrex();
    }
    else if (!__stxr(1u, v9))
    {
      goto LABEL_9;
    }
    MEMORY[0x19AEA534C](v9);
LABEL_9:
    v13 = *((_QWORD *)v9 + 3);
    v14 = __ldxr(v9);
    if (v14 == 1)
    {
      if (!__stlxr(0, v9))
      {
        if (v13)
          goto LABEL_29;
        goto LABEL_15;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
    if (v13)
      goto LABEL_29;
LABEL_15:
    *v7 = -1;
    v15 = *v10;
    *v10 = 0;
    if (!v15)
      goto LABEL_28;
    if (__ldaxr((unsigned __int8 *)v15))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v15))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v15);
LABEL_20:
    v17 = *(_QWORD *)(v15 + 16) - 1;
    *(_QWORD *)(v15 + 16) = v17;
    if (v17)
    {
      v20 = __ldxr((unsigned __int8 *)v15);
      if (v20 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v15))
          goto LABEL_28;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v15);
      goto LABEL_28;
    }
    v18 = *(_QWORD *)(v15 + 8);
    v19 = __ldxr((unsigned __int8 *)v15);
    if (v19 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v15))
      {
        if (!v18)
          goto LABEL_27;
        goto LABEL_28;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
    if (!v18)
LABEL_27:
      WTF::fastFree((WTF *)v15, a2);
LABEL_28:
    ++v4;
LABEL_29:
    --v5;
  }
  while (v6);
  v21 = qword_1ECE84148;
  if (v4)
  {
    *(_DWORD *)(qword_1ECE84148 - 16) += v4;
    if (qword_1ECE84148)
      v22 = *(_DWORD *)(qword_1ECE84148 - 12);
    else
      v22 = 0;
    *(_DWORD *)(qword_1ECE84148 - 12) = v22 - v4;
    v21 = qword_1ECE84148;
  }
  if (v21)
  {
    v23 = *(_DWORD *)(v21 - 4);
    v24 = *(unsigned int *)(v21 - 12);
    if (6 * (int)v24 < v23 && v23 >= 9)
    {
      v26 = (v24 - 1) | ((v24 - 1) >> 1) | ((((_DWORD)v24 - 1) | ((v24 - 1) >> 1)) >> 2);
      v27 = v26 | (v26 >> 4) | ((v26 | (v26 >> 4)) >> 8);
      v28 = (v27 | HIWORD(v27)) + 1;
      if (v28 > 0x400)
      {
        if (v28 > 2 * v24)
          goto LABEL_52;
      }
      else if (3 * v28 > 4 * v24)
      {
LABEL_50:
        v29 = (double)v24;
        v30 = (double)v28;
        v31 = 0.604166667;
LABEL_53:
        if (v30 * v31 <= v29)
          LODWORD(v28) = 2 * v28;
        if (v28 <= 8)
          v32 = 8;
        else
          v32 = v28;
        WTF::HashTable<WebCore::MockRealtimeVideoSource const*,WTF::KeyValuePair<WebCore::MockRealtimeVideoSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MockRealtimeVideoSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::MockRealtimeVideoSource const*>,WTF::HashMap<WebCore::MockRealtimeVideoSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::MockRealtimeVideoSource const*>,WTF::HashTraits<WebCore::MockRealtimeVideoSource const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MockRealtimeVideoSource const*>>::rehash(v32);
        return;
      }
      LODWORD(v28) = 2 * v28;
      if (v28 <= 0x400)
        goto LABEL_50;
LABEL_52:
      v29 = (double)v24;
      v30 = (double)v28;
      v31 = 0.416666667;
      goto LABEL_53;
    }
  }
}

_DWORD *WTF::HashTable<WebCore::MockRealtimeVideoSource const*,WTF::KeyValuePair<WebCore::MockRealtimeVideoSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MockRealtimeVideoSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::MockRealtimeVideoSource const*>,WTF::HashMap<WebCore::MockRealtimeVideoSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::MockRealtimeVideoSource const*>,WTF::HashTraits<WebCore::MockRealtimeVideoSource const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MockRealtimeVideoSource const*>>::rehash(unsigned int a1)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  _DWORD *result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;

  v2 = qword_1ECE84148;
  if (qword_1ECE84148)
  {
    v3 = *(_DWORD *)(qword_1ECE84148 - 4);
    v4 = *(_DWORD *)(qword_1ECE84148 - 12);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1ECE84148 = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *result = 0;
  *(_DWORD *)(qword_1ECE84148 - 12) = v4;
  if (v3)
  {
    v7 = 0;
    v8 = v3;
    while (1)
    {
      v9 = (uint64_t *)(v2 + 16 * v7);
      v10 = *v9;
      if (*v9 == -1)
        goto LABEL_52;
      if (!v10)
      {
        v11 = v2 + 16 * v7;
        v12 = *(_QWORD *)(v11 + 8);
        *(_QWORD *)(v11 + 8) = 0;
        if (!v12)
          goto LABEL_52;
        if (__ldaxr((unsigned __int8 *)v12))
        {
          __clrex();
          goto LABEL_14;
        }
        if (__stxr(1u, (unsigned __int8 *)v12))
LABEL_14:
          MEMORY[0x19AEA534C](v12);
        v15 = *(_QWORD *)(v12 + 16) - 1;
        *(_QWORD *)(v12 + 16) = v15;
        if (v15)
        {
          v37 = __ldxr((unsigned __int8 *)v12);
          if (v37 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v12))
              goto LABEL_52;
          }
          else
          {
            __clrex();
          }
          goto LABEL_64;
        }
        v16 = *(_QWORD *)(v12 + 8);
        v17 = __ldxr((unsigned __int8 *)v12);
        if (v17 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v12))
          {
            if (!v16)
              goto LABEL_51;
            goto LABEL_52;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v12);
        if (!v16)
          goto LABEL_51;
        goto LABEL_52;
      }
      if (qword_1ECE84148)
        v14 = *(_DWORD *)(qword_1ECE84148 - 8);
      else
        v14 = 0;
      v18 = (~(v10 << 32) + v10) ^ ((unint64_t)(~(v10 << 32) + v10) >> 22);
      v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
      v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
      v21 = v14 & ((v20 >> 31) ^ v20);
      v22 = 1;
      do
      {
        v23 = v21;
        v24 = *(_QWORD *)(qword_1ECE84148 + 16 * v21);
        v21 = (v21 + v22++) & v14;
      }
      while (v24);
      v25 = (uint64_t *)(qword_1ECE84148 + 16 * v23);
      v26 = v25[1];
      v25[1] = 0;
      if (!v26)
        goto LABEL_39;
      if (__ldaxr((unsigned __int8 *)v26))
        break;
      if (__stxr(1u, (unsigned __int8 *)v26))
        goto LABEL_30;
LABEL_31:
      v28 = *(_QWORD *)(v26 + 16) - 1;
      *(_QWORD *)(v26 + 16) = v28;
      if (!v28)
      {
        v29 = *(_QWORD *)(v26 + 8);
        v30 = __ldxr((unsigned __int8 *)v26);
        if (v30 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v26))
          {
            if (v29)
              goto LABEL_39;
LABEL_38:
            WTF::fastFree((WTF *)v26, v6);
            goto LABEL_39;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v26);
        if (v29)
          goto LABEL_39;
        goto LABEL_38;
      }
      v38 = __ldxr((unsigned __int8 *)v26);
      if (v38 != 1)
      {
        __clrex();
LABEL_66:
        WTF::Lock::unlockSlow((WTF::Lock *)v26);
        goto LABEL_39;
      }
      if (__stlxr(0, (unsigned __int8 *)v26))
        goto LABEL_66;
LABEL_39:
      *v25 = *v9;
      v31 = v2 + 16 * v7;
      v32 = *(_QWORD *)(v31 + 8);
      *(_QWORD *)(v31 + 8) = 0;
      v25[1] = v32;
      v12 = *(_QWORD *)(v31 + 8);
      *(_QWORD *)(v31 + 8) = 0;
      if (!v12)
        goto LABEL_52;
      if (__ldaxr((unsigned __int8 *)v12))
      {
        __clrex();
LABEL_43:
        MEMORY[0x19AEA534C](v12);
        goto LABEL_44;
      }
      if (__stxr(1u, (unsigned __int8 *)v12))
        goto LABEL_43;
LABEL_44:
      v34 = *(_QWORD *)(v12 + 16) - 1;
      *(_QWORD *)(v12 + 16) = v34;
      if (v34)
      {
        v39 = __ldxr((unsigned __int8 *)v12);
        if (v39 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v12))
            goto LABEL_52;
        }
        else
        {
          __clrex();
        }
LABEL_64:
        WTF::Lock::unlockSlow((WTF::Lock *)v12);
        goto LABEL_52;
      }
      v35 = *(_QWORD *)(v12 + 8);
      v36 = __ldxr((unsigned __int8 *)v12);
      if (v36 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v12))
        {
          if (!v35)
            goto LABEL_51;
          goto LABEL_52;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v12);
      if (!v35)
LABEL_51:
        WTF::fastFree((WTF *)v12, v6);
LABEL_52:
      if (++v7 == v8)
        return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
    }
    __clrex();
LABEL_30:
    MEMORY[0x19AEA534C](v26);
    goto LABEL_31;
  }
  if (v2)
    return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::PlatformSpeechSynthesizerMock::*&)(void),WebCore::PlatformSpeechSynthesizerMock*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WebCore::ScrollbarThemeMock::trackRect(WebCore::ScrollbarThemeMock *this, WebCore::Scrollbar *a2)
{
  void *v2;
  const CGRect *v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  void *v9;
  CGRect v10;

  v2 = (void *)*((_QWORD *)a2 + 5);
  if (!v2)
    return *((_QWORD *)a2 + 6);
  v9 = (void *)*((_QWORD *)a2 + 5);
  if (objc_msgSend(v2, "conformsToProtocol:", &unk_1EE342188))
    objc_msgSend((id)objc_msgSend(v9, "superview"), "frame");
  else
    objc_msgSend(v9, "frame");
  v10.origin.x = v5;
  v10.origin.y = v6;
  v10.size.width = v7;
  v10.size.height = v8;
  return WebCore::enclosingIntRect(&v10, v4);
}

uint64_t WebCore::ScrollbarThemeMock::scrollbarThickness(uint64_t a1, int a2)
{
  unsigned int v2;

  if (a2 == 1)
    v2 = 11;
  else
    v2 = 15;
  if (a2 == 2)
    return 0;
  else
    return v2;
}

unsigned int *WebCore::ScrollbarThemeMock::paintTrackBackground(WebCore::ScrollbarThemeMock *this, WebCore::GraphicsContext *a2, WebCore::Scrollbar *a3, const WebCore::IntRect *a4)
{
  float v4;
  float v5;
  unsigned int v6;
  unsigned int *result;
  void *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  float v12[4];

  v4 = (float)*((int *)a4 + 1);
  v12[0] = (float)*(int *)a4;
  v12[1] = v4;
  v5 = (float)*((int *)a4 + 3);
  v12[2] = (float)*((int *)a4 + 2);
  v12[3] = v5;
  if (*((_BYTE *)a3 + 136))
    v6 = -4144960;
  else
    v6 = -2039584;
  v11 = bswap32(v6) | 0x1104000000000000;
  result = (unsigned int *)(*(uint64_t (**)(WebCore::GraphicsContext *, float *, uint64_t *))(*(_QWORD *)a2 + 224))(a2, v12, &v11);
  if ((v11 & 0x8000000000000) != 0)
  {
    result = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
    do
    {
      v9 = __ldaxr(result);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, result));
    if (!v10)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v8);
    }
  }
  return result;
}

void WebCore::ScrollbarThemeMock::paintThumb(WebCore::ScrollbarThemeMock *this, WebCore::GraphicsContext *a2, WebCore::Scrollbar *a3, const WebCore::IntRect *a4)
{
  float v4;
  float v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  float v11[4];

  if (*((_BYTE *)a3 + 136))
  {
    v4 = (float)*((int *)a4 + 1);
    v11[0] = (float)*(int *)a4;
    v11[1] = v4;
    v5 = (float)*((int *)a4 + 3);
    v11[2] = (float)*((int *)a4 + 2);
    v11[3] = v5;
    v10 = 0x11040000808080FFLL;
    (*(void (**)(WebCore::GraphicsContext *, float *, uint64_t *))(*(_QWORD *)a2 + 224))(a2, v11, &v10);
    if ((v10 & 0x8000000000000) != 0)
    {
      v7 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, v6);
      }
    }
  }
}

double WebCore::ScrollbarThemeMock::usesOverlayScrollbars(WebCore::ScrollbarThemeMock *this)
{
  double result;

  {
    result = 0.0;
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
  }
  return result;
}

void WebCore::ScrollbarsControllerMock::~ScrollbarsControllerMock(WebCore::ScrollbarsControllerMock *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void WebCore::ScrollbarsControllerMock::~ScrollbarsControllerMock(WebCore::ScrollbarsControllerMock *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::fastFree(this, a2);
}

uint64_t WebCore::ScrollbarsControllerMock::didAddVerticalScrollbar(uint64_t this, WebCore::Scrollbar *a2)
{
  *(_QWORD *)(this + 32) = a2;
  return this;
}

uint64_t WebCore::ScrollbarsControllerMock::didAddHorizontalScrollbar(uint64_t this, WebCore::Scrollbar *a2)
{
  *(_QWORD *)(this + 40) = a2;
  return this;
}

uint64_t WebCore::ScrollbarsControllerMock::willRemoveVerticalScrollbar(uint64_t this, WebCore::Scrollbar *a2)
{
  *(_QWORD *)(this + 32) = 0;
  return this;
}

uint64_t WebCore::ScrollbarsControllerMock::willRemoveHorizontalScrollbar(uint64_t this, WebCore::Scrollbar *a2)
{
  *(_QWORD *)(this + 40) = 0;
  return this;
}

WTF::StringImpl *WebCore::ScrollbarsControllerMock::mouseEnteredContentArea(WebCore::ScrollbarsControllerMock *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(_QWORD, WTF::StringImpl **))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3), &v4);
  result = v4;
  v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::ScrollbarsControllerMock::mouseMovedInContentArea(WebCore::ScrollbarsControllerMock *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(_QWORD, WTF::StringImpl **))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3), &v4);
  result = v4;
  v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::ScrollbarsControllerMock::mouseExitedContentArea(WebCore::ScrollbarsControllerMock *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(_QWORD, WTF::StringImpl **))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3), &v4);
  result = v4;
  v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::ScrollbarsControllerMock::mouseEnteredScrollbar(WebCore::Scrollbar **this, WebCore::Scrollbar *a2)
{
  uint64_t v3;
  const char *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  unint64_t v7;
  WTF::StringImpl *v8;
  const char *v9;
  int v10;
  const char *v11;
  int v12;
  const char *v13;
  int v14;

  if (this[4] == a2)
  {
    v4 = "Vertical";
    v3 = 9;
  }
  else
  {
    v3 = 11;
    if (this[5] != a2)
      v3 = 8;
    v4 = "Unknown";
    if (this[5] == a2)
      v4 = "Horizontal";
  }
  v13 = "mouseEntered";
  v14 = 12;
  v7 = v3 - 1;
  v11 = v4;
  if (v7 >> 31)
  {
    __break(0xC471u);
    goto LABEL_18;
  }
  v12 = v7;
  v9 = "Scrollbar";
  v10 = 9;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v13, (uint64_t)&v11, (uint64_t)&v9, &v8);
  if (!v8)
  {
    __break(0xC471u);
LABEL_18:
    JUMPOUT(0x1962D618CLL);
  }
  (*(void (**)(WebCore::Scrollbar *, WTF::StringImpl **))(*(_QWORD *)this[3] + 16))(this[3], &v8);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::ScrollbarsControllerMock::mouseExitedScrollbar(WebCore::Scrollbar **this, WebCore::Scrollbar *a2)
{
  uint64_t v3;
  const char *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  unint64_t v7;
  WTF::StringImpl *v8;
  const char *v9;
  int v10;
  const char *v11;
  int v12;
  const char *v13;
  int v14;

  if (this[4] == a2)
  {
    v4 = "Vertical";
    v3 = 9;
  }
  else
  {
    v3 = 11;
    if (this[5] != a2)
      v3 = 8;
    v4 = "Unknown";
    if (this[5] == a2)
      v4 = "Horizontal";
  }
  v13 = "mouseExited";
  v14 = 11;
  v7 = v3 - 1;
  v11 = v4;
  if (v7 >> 31)
  {
    __break(0xC471u);
    goto LABEL_18;
  }
  v12 = v7;
  v9 = "Scrollbar";
  v10 = 9;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v13, (uint64_t)&v11, (uint64_t)&v9, &v8);
  if (!v8)
  {
    __break(0xC471u);
LABEL_18:
    JUMPOUT(0x1962D62B4);
  }
  (*(void (**)(WebCore::Scrollbar *, WTF::StringImpl **))(*(_QWORD *)this[3] + 16))(this[3], &v8);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::ScrollbarsControllerMock::mouseIsDownInScrollbar(WebCore::Scrollbar **this, WebCore::Scrollbar *a2, int a3)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  unint64_t v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  const char *v13;
  int v14;
  const char *v15;
  int v16;
  const char *v17;
  int v18;

  v4 = "mouseIsUpIn";
  if (a3)
    v5 = 14;
  else
    v5 = 12;
  if (a3)
    v4 = "mouseIsDownIn";
  if (this[4] == a2)
  {
    v7 = "Vertical";
    v6 = 9;
  }
  else
  {
    v6 = 11;
    if (this[5] != a2)
      v6 = 8;
    v7 = "Unknown";
    if (this[5] == a2)
      v7 = "Horizontal";
  }
  v10 = v5 - 1;
  v17 = v4;
  if (v10 >> 31)
  {
    __break(0xC471u);
    goto LABEL_25;
  }
  v18 = v10;
  v11 = v6 - 1;
  v15 = v7;
  if (v11 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1962D6428);
  }
  v16 = v11;
  v13 = "Scrollbar";
  v14 = 9;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v17, (uint64_t)&v15, (uint64_t)&v13, &v12);
  if (!v12)
  {
    __break(0xC471u);
LABEL_25:
    JUMPOUT(0x1962D63F0);
  }
  (*(void (**)(WebCore::Scrollbar *, WTF::StringImpl **))(*(_QWORD *)this[3] + 16))(this[3], &v12);
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::MediaPlaybackTargetMock::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *result;
  int v7;
  char v8;
  char v9;

  v5 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v5 + 8) = 1;
  *(_QWORD *)v5 = off_1E341C2F0;
  result = *(WTF::StringImpl **)(a1 + 16);
  if (result)
  {
    v7 = *(_DWORD *)result;
    v8 = *(_BYTE *)(a1 + 24);
    *(_BYTE *)(v5 + 24) = 1;
    *(_QWORD *)(v5 + 16) = off_1E341C8D0;
    *(_DWORD *)result = v7 + 4;
    *(_QWORD *)(v5 + 32) = result;
    *(_BYTE *)(v5 + 40) = v8;
    if (v7 == -2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result = v7 + 2;
  }
  else
  {
    v9 = *(_BYTE *)(a1 + 24);
    *(_BYTE *)(v5 + 24) = 1;
    *(_QWORD *)(v5 + 16) = off_1E341C8D0;
    *(_QWORD *)(v5 + 32) = 0;
    *(_BYTE *)(v5 + 40) = v9;
  }
  *a2 = v5;
  return result;
}

uint64_t WebCore::MediaPlaybackTargetContextMock::deviceName@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 16);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

_QWORD *WebCore::MockAudioDestinationCocoa::MockAudioDestinationCocoa(_QWORD *a1, uint64_t a2, float a3)
{
  _QWORD *v4;
  WTF::RunLoop *v5;
  WTF::RunLoop *v6;
  _QWORD *v7;

  v4 = (_QWORD *)WebCore::AudioDestinationCocoa::AudioDestinationCocoa((uint64_t)a1, a2, (void *)2, a3);
  *v4 = off_1E341C320;
  v4[18] = &unk_1E341C390;
  v5 = (WTF::RunLoop *)WTF::WorkQueue::create();
  v6 = (WTF::RunLoop *)WTF::RunLoop::current(v5);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = off_1E341C9E0;
  v7[1] = WebCore::MockAudioDestinationCocoa::tick;
  v7[2] = 0;
  v7[3] = a1;
  WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)(a1 + 23), v6);
  a1[23] = off_1E32051C0;
  a1[26] = v7;
  a1[27] = 384;
  return a1;
}

{
  _QWORD *v4;
  WTF::RunLoop *v5;
  WTF::RunLoop *v6;
  _QWORD *v7;

  v4 = (_QWORD *)WebCore::AudioDestinationCocoa::AudioDestinationCocoa((uint64_t)a1, a2, (void *)2, a3);
  *v4 = off_1E341C320;
  v4[18] = &unk_1E341C390;
  v5 = (WTF::RunLoop *)WTF::WorkQueue::create();
  v6 = (WTF::RunLoop *)WTF::RunLoop::current(v5);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = off_1E341C9E0;
  v7[1] = WebCore::MockAudioDestinationCocoa::tick;
  v7[2] = 0;
  v7[3] = a1;
  WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)(a1 + 23), v6);
  a1[23] = off_1E32051C0;
  a1[26] = v7;
  a1[27] = 384;
  return a1;
}

uint64_t WebCore::MockAudioDestinationCocoa::tick(WebCore::MockAudioDestinationCocoa *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v2 = *((_QWORD *)this + 22);
  v3 = (unsigned int *)((char *)this + 152);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = *((_DWORD *)this + 6);
  v6 = *((_QWORD *)this + 27);
  v7 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v7 = &off_1E341CA58;
  *(_QWORD *)(v7 + 8) = this;
  *(_QWORD *)(v7 + 16) = this;
  *(_DWORD *)(v7 + 24) = v5;
  *(_QWORD *)(v7 + 32) = v6;
  v9 = v7;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 32))(v2, &v9);
  result = v9;
  v9 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WebCore::MockAudioDestinationCocoa::~MockAudioDestinationCocoa(WebCore::MockAudioDestinationCocoa *this)
{
  WTF::RunLoop::TimerBase *v2;
  uint64_t v3;
  OpaqueAudioComponentInstance *v4;
  uint64_t v5;
  PAL *v6;

  *((_QWORD *)this + 23) = off_1E32051C0;
  v2 = (WebCore::MockAudioDestinationCocoa *)((char *)this + 184);
  v3 = *((_QWORD *)this + 26);
  *((_QWORD *)v2 + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::RunLoop::TimerBase::~TimerBase(v2);
  v5 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
  *(_QWORD *)this = off_1E3408460;
  *((_QWORD *)this + 18) = &unk_1E34084D0;
  v6 = (PAL *)*((_QWORD *)this + 20);
  if (v6)
    PAL::softLinkAudioToolboxAudioComponentInstanceDispose(v6, v4);
  WebCore::AudioDestinationResampler::~AudioDestinationResampler(this, v4);
}

{
  WTF::RunLoop::TimerBase *v2;
  uint64_t v3;
  OpaqueAudioComponentInstance *v4;
  uint64_t v5;
  PAL *v6;

  *((_QWORD *)this + 23) = off_1E32051C0;
  v2 = (WebCore::MockAudioDestinationCocoa *)((char *)this + 184);
  v3 = *((_QWORD *)this + 26);
  *((_QWORD *)v2 + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::RunLoop::TimerBase::~TimerBase(v2);
  v5 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
  *(_QWORD *)this = off_1E3408460;
  *((_QWORD *)this + 18) = &unk_1E34084D0;
  v6 = (PAL *)*((_QWORD *)this + 20);
  if (v6)
    PAL::softLinkAudioToolboxAudioComponentInstanceDispose(v6, v4);
  WebCore::AudioDestinationResampler::~AudioDestinationResampler(this, v4);
}

{
  WTF::RunLoop::TimerBase *v2;
  uint64_t v3;
  OpaqueAudioComponentInstance *v4;
  uint64_t v5;
  PAL *v6;
  WTF *v7;
  void *v8;

  *((_QWORD *)this + 23) = off_1E32051C0;
  v2 = (WebCore::MockAudioDestinationCocoa *)((char *)this + 184);
  v3 = *((_QWORD *)this + 26);
  *((_QWORD *)v2 + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::RunLoop::TimerBase::~TimerBase(v2);
  v5 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
  *(_QWORD *)this = off_1E3408460;
  *((_QWORD *)this + 18) = &unk_1E34084D0;
  v6 = (PAL *)*((_QWORD *)this + 20);
  if (v6)
    PAL::softLinkAudioToolboxAudioComponentInstanceDispose(v6, v4);
  WebCore::AudioDestinationResampler::~AudioDestinationResampler(this, v4);
  WTF::fastFree(v7, v8);
}

void `non-virtual thunk to'WebCore::MockAudioDestinationCocoa::~MockAudioDestinationCocoa(WebCore::MockAudioDestinationCocoa *this)
{
  WTF::RunLoop::TimerBase *v2;
  uint64_t v3;
  OpaqueAudioComponentInstance *v4;
  uint64_t v5;
  PAL *v6;

  *((_QWORD *)this + 5) = off_1E32051C0;
  v2 = (WebCore::MockAudioDestinationCocoa *)((char *)this + 40);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)v2 + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::RunLoop::TimerBase::~TimerBase(v2);
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
  *((_QWORD *)this - 18) = off_1E3408460;
  *(_QWORD *)this = &unk_1E34084D0;
  v6 = (PAL *)*((_QWORD *)this + 2);
  if (v6)
    PAL::softLinkAudioToolboxAudioComponentInstanceDispose(v6, v4);
  WebCore::AudioDestinationResampler::~AudioDestinationResampler((WebCore::MockAudioDestinationCocoa *)((char *)this - 144), v4);
}

{
  WTF::RunLoop::TimerBase *v2;
  uint64_t v3;
  OpaqueAudioComponentInstance *v4;
  uint64_t v5;
  PAL *v6;
  WTF *v7;
  void *v8;

  *((_QWORD *)this + 5) = off_1E32051C0;
  v2 = (WebCore::MockAudioDestinationCocoa *)((char *)this + 40);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)v2 + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::RunLoop::TimerBase::~TimerBase(v2);
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
  *((_QWORD *)this - 18) = off_1E3408460;
  *(_QWORD *)this = &unk_1E34084D0;
  v6 = (PAL *)*((_QWORD *)this + 2);
  if (v6)
    PAL::softLinkAudioToolboxAudioComponentInstanceDispose(v6, v4);
  WebCore::AudioDestinationResampler::~AudioDestinationResampler((WebCore::MockAudioDestinationCocoa *)((char *)this - 144), v4);
  WTF::fastFree(v7, v8);
}

uint64_t WebCore::MockAudioDestinationCocoa::startRendering(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 v4;
  unsigned __int8 *v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  _QWORD *v12;

  WTF::RunLoop::TimerBase::start();
  v4 = atomic_load((unsigned __int8 *)(a1 + 136));
  if ((v4 & 1) != 0)
    goto LABEL_13;
  atomic_store(1u, (unsigned __int8 *)(a1 + 136));
  v5 = (unsigned __int8 *)(a1 + 8);
  if (__ldaxr((unsigned __int8 *)(a1 + 8)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](a1 + 8);
LABEL_6:
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = __ldxr(v5);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, v5))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 8));
LABEL_13:
  v9 = *a2;
  *a2 = 0;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = &off_1E341CA08;
  v10[1] = v9;
  v12 = v10;
  WTF::callOnMainThread();
  result = (uint64_t)v12;
  if (v12)
    return (*(uint64_t (**)(_QWORD *))(*v12 + 8))(v12);
  return result;
}

uint64_t WebCore::MockAudioDestinationCocoa::stopRendering(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 v4;
  unsigned __int8 *v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  _QWORD *v12;

  WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(a1 + 184));
  v4 = atomic_load((unsigned __int8 *)(a1 + 136));
  if ((v4 & 1) == 0)
    goto LABEL_13;
  atomic_store(0, (unsigned __int8 *)(a1 + 136));
  v5 = (unsigned __int8 *)(a1 + 8);
  if (__ldaxr((unsigned __int8 *)(a1 + 8)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](a1 + 8);
LABEL_6:
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = __ldxr(v5);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, v5))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 8));
LABEL_13:
  v9 = *a2;
  *a2 = 0;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = &off_1E341CA30;
  v10[1] = v9;
  v12 = v10;
  WTF::callOnMainThread();
  result = (uint64_t)v12;
  if (v12)
    return (*(uint64_t (**)(_QWORD *))(*v12 + 8))(v12);
  return result;
}

WTF::StringImpl *WebCore::MockBox::peekType@<X0>(WebCore::MockBox *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  void *v12;
  WTF **v13;
  WTF *v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *result;
  WTF *v41;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  unsigned int v45;
  char v46;

  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 1;
  if (!this
    || ((*(_DWORD *)this += 2, !*((_BYTE *)this + 64)) || (v15 = *((_QWORD *)this + 4)) == 0
      ? (v4 = *((_QWORD *)this + 6))
      : (v4 = *(_QWORD *)(v15 + 32)),
        v4 <= 3))
  {
    __break(0xC471u);
    JUMPOUT(0x1962D6C40);
  }
  v5 = WTF::fastMalloc((WTF *)0x28);
  JSC::ArrayBufferView::ArrayBufferView();
  v7 = *(_DWORD *)this == 2;
  *(_DWORD *)this -= 2;
  if (v7)
  {
    v11 = *((_QWORD *)this + 10);
    if (v11)
    {
      *(_QWORD *)(v11 + 8) = 3;
      *((_QWORD *)this + 10) = 0;
    }
    if ((*((_BYTE *)this + 72) & 1) == 0)
      JSC::InlineWatchpointSet::freeFat((WebCore::MockBox *)((char *)this + 72));
    JSC::ArrayBufferContents::~ArrayBufferContents((WebCore::MockBox *)((char *)this + 16));
    v13 = (WTF **)*((_QWORD *)this + 1);
    if ((v13 & 1) == 0 && v13)
    {
      v41 = (WTF *)*((_QWORD *)this + 1);
      v14 = *v13;
      if (*v13)
      {
        *(_QWORD *)v41 = 0;
        *((_DWORD *)v41 + 2) = 0;
        WTF::fastFree(v14, v12);
      }
      WTF::fastFree(v41, v12);
    }
    WTF::fastFree(this, v12);
  }
  v8 = MEMORY[0x1E0CC10F8];
  v9 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v9 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
    v10 = (unsigned __int8 *)((*(_QWORD *)(v5 + 24) & 0x3FFFFFFFFLL) + v9);
  else
    v10 = *(unsigned __int8 **)(v5 + 24);
  v16 = *v10;
  if (!v44 || (v17 = v45, v45 >= *((_DWORD *)v44 + 1)) || v43)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v18 = *((_DWORD *)v44 + 4);
    v19 = *((_QWORD *)v44 + 1);
    ++v45;
    if ((v18 & 4) != 0)
      *(_BYTE *)(v19 + v17) = v16;
    else
      *(_WORD *)(v19 + 2 * v17) = v16;
  }
  v20 = *(_QWORD *)(v8 + 56);
  if (v20)
  {
    if (*(_BYTE *)(v8 + 34))
    {
      v21 = *(_QWORD *)(v5 + 24);
    }
    else
    {
      v21 = *(_QWORD *)(v5 + 24);
      if (*MEMORY[0x1E0CC10F0])
        goto LABEL_36;
    }
    v21 = (v21 & 0x3FFFFFFFFLL) + v20;
  }
  else
  {
    v21 = *(_QWORD *)(v5 + 24);
  }
LABEL_36:
  v22 = *(unsigned __int8 *)(v21 + 1);
  if (!v44 || (v23 = v45, v45 >= *((_DWORD *)v44 + 1)) || v43)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v24 = *((_DWORD *)v44 + 4);
    v25 = *((_QWORD *)v44 + 1);
    ++v45;
    if ((v24 & 4) != 0)
      *(_BYTE *)(v25 + v23) = v22;
    else
      *(_WORD *)(v25 + 2 * v23) = v22;
  }
  v26 = *(_QWORD *)(v8 + 56);
  if (v26)
  {
    if (*(_BYTE *)(v8 + 34))
    {
      v27 = *(_QWORD *)(v5 + 24);
    }
    else
    {
      v27 = *(_QWORD *)(v5 + 24);
      if (*MEMORY[0x1E0CC10F0])
        goto LABEL_47;
    }
    v27 = (v27 & 0x3FFFFFFFFLL) + v26;
  }
  else
  {
    v27 = *(_QWORD *)(v5 + 24);
  }
LABEL_47:
  v28 = *(unsigned __int8 *)(v27 + 2);
  if (!v44 || (v29 = v45, v45 >= *((_DWORD *)v44 + 1)) || v43)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v30 = *((_DWORD *)v44 + 4);
    v31 = *((_QWORD *)v44 + 1);
    ++v45;
    if ((v30 & 4) != 0)
      *(_BYTE *)(v31 + v29) = v28;
    else
      *(_WORD *)(v31 + 2 * v29) = v28;
  }
  v32 = *(_QWORD *)(v8 + 56);
  if (v32)
  {
    if (*(_BYTE *)(v8 + 34))
    {
      v33 = *(_QWORD *)(v5 + 24);
    }
    else
    {
      v33 = *(_QWORD *)(v5 + 24);
      if (*MEMORY[0x1E0CC10F0])
        goto LABEL_58;
    }
    v33 = (v33 & 0x3FFFFFFFFLL) + v32;
  }
  else
  {
    v33 = *(_QWORD *)(v5 + 24);
  }
LABEL_58:
  v34 = *(unsigned __int8 *)(v33 + 3);
  if (!v44 || (v35 = v45, v45 >= *((_DWORD *)v44 + 1)) || v43)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v36 = *((_DWORD *)v44 + 4);
    v37 = *((_QWORD *)v44 + 1);
    ++v45;
    if ((v36 & 4) != 0)
      *(_BYTE *)(v37 + v35) = v34;
    else
      *(_WORD *)(v37 + 2 * v35) = v34;
  }
  v38 = v43;
  if (v43
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v43),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v43),
        (v38 = v43) != 0))
  {
    *(_DWORD *)v38 += 2;
  }
  *a2 = v38;
  if (*(_DWORD *)v5 == 1)
    JSC::ArrayBufferView::operator delete();
  else
    --*(_DWORD *)v5;
  v39 = v44;
  v44 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v6);
    else
      *(_DWORD *)v39 -= 2;
  }
  result = v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::MockBox::peekLength(WebCore::MockBox *this, JSC::ArrayBuffer *a2)
{
  BOOL v2;
  unsigned int v3;
  uint64_t v5;
  void *v6;
  WTF **v7;
  WTF *v8;
  WTF *v9;
  _DWORD *v11;

  if (this)
    *(_DWORD *)this += 2;
  JSC::DataView::create();
  if (this)
  {
    v2 = *(_DWORD *)this == 2;
    *(_DWORD *)this -= 2;
    if (v2)
    {
      v5 = *((_QWORD *)this + 10);
      if (v5)
      {
        *(_QWORD *)(v5 + 8) = 3;
        *((_QWORD *)this + 10) = 0;
      }
      if ((*((_BYTE *)this + 72) & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((WebCore::MockBox *)((char *)this + 72));
      JSC::ArrayBufferContents::~ArrayBufferContents((WebCore::MockBox *)((char *)this + 16));
      v7 = (WTF **)*((_QWORD *)this + 1);
      if ((v7 & 1) == 0 && v7)
      {
        v9 = (WTF *)*((_QWORD *)this + 1);
        v8 = *v7;
        if (*v7)
        {
          *(_QWORD *)v9 = 0;
          *((_DWORD *)v9 + 2) = 0;
          WTF::fastFree(v8, v6);
        }
        WTF::fastFree(v9, v6);
      }
      WTF::fastFree(this, v6);
    }
  }
  v3 = JSC::DataView::get<unsigned int>((uint64_t)v11, 4, 1, 0);
  if (v11)
  {
    if (*v11 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*v11;
  }
  return v3;
}

uint64_t JSC::DataView::get<int>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 32);
  if (!v2)
    goto LABEL_24;
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
    goto LABEL_24;
  v4 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v4 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v3 & 0x3FFFFFFFFLL) + v4))
    goto LABEL_24;
  v5 = *(_BYTE *)(a1 + 6);
  if ((v5 & 3) != 0)
  {
    if (*(_BYTE *)(v2 + 64) && (v15 = *(_QWORD *)(v2 + 32)) != 0)
    {
      v9 = atomic_load((unint64_t *)(v15 + 32));
      v5 = *(_BYTE *)(a1 + 6);
    }
    else
    {
      v9 = *(_QWORD *)(v2 + 48);
    }
    v10 = *(_QWORD *)(a1 + 8);
    if ((v5 & 4) != 0)
    {
      v11 = v9 >= v10;
      v12 = v9 - v10;
      if (v11)
        goto LABEL_24;
      if ((*(_BYTE *)(a1 + 4) - 4) > 7u)
        LOBYTE(v13) = 0;
      else
        v13 = qword_1969F9820[(char)(*(_BYTE *)(a1 + 4) - 4)];
      v6 = (-1 << v13) & v12;
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 16) + v10 <= v9 && v9 >= v10;
      v6 = v11 ? 0 : *(_QWORD *)(a1 + 16);
    }
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 16);
  }
  if (a2 + 4 > v6)
  {
LABEL_24:
    __break(0xC471u);
    JUMPOUT(0x1962D721CLL);
  }
  v7 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v7 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
    v8 = (*(_QWORD *)(a1 + 24) & 0x3FFFFFFFFLL) + v7;
  else
    v8 = *(_QWORD *)(a1 + 24);
  return *(unsigned int *)(v8 + a2);
}

WebCore::MockInitializationBox *WebCore::MockInitializationBox::MockInitializationBox(WebCore::MockInitializationBox *this, JSC::ArrayBuffer *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  WTF *v7;
  BOOL v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  const WTF::StringImpl *v16;
  const WTF::StringImpl *v17;
  WTF *v18;
  int v19;
  WTF::StringImpl *v20;
  int v21;
  WebCore::MockBox *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  __int16 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  _DWORD *v59;
  WTF *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _DWORD *v65;
  _DWORD *v66;
  int *v67;
  uint64_t v68;
  int *v69;
  uint64_t v70;
  WTF **v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WebCore::MockBox *v77;
  uint64_t v78;
  void *v79;
  WTF *v80;
  WTF *v81;
  uint64_t v82;
  void *v83;
  WTF **v84;
  WTF *v85;
  uint64_t v86;
  void *v87;
  WTF **v88;
  WTF *v89;
  uint64_t v90;
  _DWORD *v91;
  uint64_t v93;
  void *v94;
  WTF *v95;
  WTF *v96;
  WTF *v97;
  WTF *v98;
  WTF *v99;
  WTF::StringImpl *v100;
  char v101;
  WTF::StringImpl *v102;
  int v103;
  WebCore::MockBox *v104;
  _DWORD *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  unsigned int v109;
  char v110;
  _DWORD *v111;

  *((_QWORD *)this + 1) = 0;
  WebCore::MockBox::peekType(a2, &v99);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v99;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  *(_QWORD *)this = WebCore::MockBox::peekLength(a2, v4);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 10000000;
  *((_BYTE *)this + 28) = 1;
  *((_QWORD *)this + 4) = 0;
  v6 = (uint64_t *)((char *)this + 32);
  *((_QWORD *)this + 5) = 0;
  if (a2)
    *(_DWORD *)a2 += 2;
  v99 = a2;
  JSC::DataView::create();
  v7 = v99;
  v99 = 0;
  if (v7)
  {
    v8 = *(_DWORD *)v7 == 2;
    *(_DWORD *)v7 -= 2;
    if (v8)
    {
      v93 = *((_QWORD *)v7 + 10);
      if (v93)
      {
        *(_QWORD *)(v93 + 8) = 3;
        *((_QWORD *)v7 + 10) = 0;
      }
      if ((*((_BYTE *)v7 + 72) & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((WTF *)((char *)v7 + 72));
      JSC::ArrayBufferContents::~ArrayBufferContents((WTF *)((char *)v7 + 16));
      v95 = (WTF *)*((_QWORD *)v7 + 1);
      if ((v95 & 1) == 0 && v95)
      {
        v96 = *(WTF **)v95;
        if (*(_QWORD *)v95)
        {
          *(_QWORD *)v95 = 0;
          *((_DWORD *)v95 + 2) = 0;
          WTF::fastFree(v96, v94);
        }
        WTF::fastFree(v95, v94);
      }
      WTF::fastFree(v7, v94);
    }
  }
  v9 = JSC::DataView::get<int>((uint64_t)v105, 8);
  v10 = JSC::DataView::get<int>((uint64_t)v105, 12);
  v11 = v9;
  if (v9 >= 0)
    v12 = 5;
  else
    v12 = 9;
  if (v10 <= 1)
    v13 = 1;
  else
    v13 = v10;
  if (v10)
    v12 = 1;
  else
    v11 = (uint64_t)v9 >> 63;
  *((_QWORD *)this + 2) = v11;
  *((_DWORD *)this + 6) = v13;
  *((_BYTE *)this + 28) = v12;
  v14 = 16;
  v15 = MEMORY[0x1E0CC10F8];
  while (v14 < *(_QWORD *)this)
  {
    JSC::ArrayBuffer::slice(a2, (double)v14);
    WebCore::MockBox::peekType(v104, &v99);
    if (_MergedGlobals_242 == 1)
    {
      v17 = (const WTF::StringImpl *)qword_1ECE84168;
    }
    else
    {
      v17 = (const WTF::StringImpl *)&WebCore::MockTrackBox::type(void)::$_0::operator() const(void)::impl;
      WebCore::MockTrackBox::type(void)::$_0::operator() const(void)::impl += 2;
      qword_1ECE84168 = (uint64_t)&WebCore::MockTrackBox::type(void)::$_0::operator() const(void)::impl;
      _MergedGlobals_242 = 1;
    }
    v18 = v99;
    v19 = WTF::equal(v99, v17, v16);
    v21 = v19;
    if (!v18)
      goto LABEL_24;
    if (*(_DWORD *)v18 != 2)
    {
      *(_DWORD *)v18 -= 2;
LABEL_24:
      if (v19)
        goto LABEL_25;
      goto LABEL_120;
    }
    WTF::StringImpl::destroy(v18, v20);
    if (v21)
    {
LABEL_25:
      v22 = v104;
      v100 = 0;
      WebCore::MockBox::peekType(v104, &v107);
      v24 = v100;
      v100 = v107;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v23);
        else
          *(_DWORD *)v24 -= 2;
      }
      v99 = (WTF *)WebCore::MockBox::peekLength(v22, v23);
      v102 = 0;
      if (v22)
        *(_DWORD *)v22 += 2;
      v107 = v22;
      JSC::DataView::create();
      v25 = v107;
      v107 = 0;
      if (v25)
      {
        v8 = *(_DWORD *)v25 == 2;
        *(_DWORD *)v25 -= 2;
        if (v8)
        {
          v82 = *((_QWORD *)v25 + 10);
          if (v82)
          {
            *(_QWORD *)(v82 + 8) = 3;
            *((_QWORD *)v25 + 10) = 0;
          }
          if ((*((_BYTE *)v25 + 72) & 1) == 0)
            JSC::InlineWatchpointSet::freeFat((WTF::StringImpl *)((char *)v25 + 72));
          JSC::ArrayBufferContents::~ArrayBufferContents((WTF::StringImpl *)((char *)v25 + 16));
          v84 = (WTF **)*((_QWORD *)v25 + 1);
          if ((v84 & 1) == 0 && v84)
          {
            v97 = (WTF *)*((_QWORD *)v25 + 1);
            v85 = *v84;
            if (*v84)
            {
              *(_QWORD *)v97 = 0;
              *((_DWORD *)v97 + 2) = 0;
              WTF::fastFree(v85, v83);
            }
            WTF::fastFree(v97, v83);
          }
          WTF::fastFree(v25, v83);
        }
      }
      v101 = JSC::DataView::get<int>((uint64_t)v111, 8);
      v107 = 0;
      v108 = 0;
      v109 = 0;
      v110 = 1;
      *(_DWORD *)v22 += 2;
      v106 = v22;
      if (*((_BYTE *)v22 + 64) && (v90 = *((_QWORD *)v22 + 4)) != 0)
        v26 = *(_QWORD *)(v90 + 32);
      else
        v26 = *((_QWORD *)v22 + 6);
      if (v26 < 0xC || (v26 & 0xFFFFFFFFFFFFFFFCLL) == 0xC)
      {
        __break(0xC471u);
        JUMPOUT(0x1962D7BD4);
      }
      v27 = WTF::fastMalloc((WTF *)0x28);
      JSC::ArrayBufferView::ArrayBufferView();
      v28 = v106;
      v106 = 0;
      if (v28)
      {
        v8 = *(_DWORD *)v28 == 2;
        *(_DWORD *)v28 -= 2;
        if (v8)
        {
          v86 = *((_QWORD *)v28 + 10);
          if (v86)
          {
            *(_QWORD *)(v86 + 8) = 3;
            *((_QWORD *)v28 + 10) = 0;
          }
          if ((*((_BYTE *)v28 + 72) & 1) == 0)
            JSC::InlineWatchpointSet::freeFat((WTF::StringImpl *)((char *)v28 + 72));
          JSC::ArrayBufferContents::~ArrayBufferContents((WTF::StringImpl *)((char *)v28 + 16));
          v88 = (WTF **)*((_QWORD *)v28 + 1);
          if ((v88 & 1) == 0 && v88)
          {
            v98 = (WTF *)*((_QWORD *)v28 + 1);
            v89 = *v88;
            if (*v88)
            {
              *(_QWORD *)v98 = 0;
              *((_DWORD *)v98 + 2) = 0;
              WTF::fastFree(v89, v87);
            }
            WTF::fastFree(v98, v87);
          }
          WTF::fastFree(v28, v87);
        }
      }
      v29 = *(_QWORD *)(v15 + 56);
      if (v29)
      {
        if (*(_BYTE *)(v15 + 34) || !*MEMORY[0x1E0CC10F0])
          v30 = (unsigned __int8 *)((*(_QWORD *)(v27 + 24) & 0x3FFFFFFFFLL) + v29);
        else
          v30 = *(unsigned __int8 **)(v27 + 24);
      }
      else
      {
        v30 = *(unsigned __int8 **)(v27 + 24);
      }
      v31 = *v30;
      LOBYTE(v106) = v31;
      if (!v108 || (v32 = v109, v109 >= *((_DWORD *)v108 + 1)) || v107)
      {
        WTF::StringBuilder::append();
      }
      else
      {
        v33 = *((_DWORD *)v108 + 4);
        v34 = *((_QWORD *)v108 + 1);
        ++v109;
        if ((v33 & 4) != 0)
          *(_BYTE *)(v34 + v32) = v31;
        else
          *(_WORD *)(v34 + 2 * v32) = v31;
      }
      v35 = *(_QWORD *)(v15 + 56);
      if (v35)
      {
        if (*(_BYTE *)(v15 + 34))
        {
          v36 = *(_QWORD *)(v27 + 24);
          goto LABEL_53;
        }
        v36 = *(_QWORD *)(v27 + 24);
        if (!*MEMORY[0x1E0CC10F0])
LABEL_53:
          v36 = (v36 & 0x3FFFFFFFFLL) + v35;
      }
      else
      {
        v36 = *(_QWORD *)(v27 + 24);
      }
      v37 = *(unsigned __int8 *)(v36 + 1);
      LOBYTE(v106) = *(_BYTE *)(v36 + 1);
      if (!v108 || (v38 = v109, v109 >= *((_DWORD *)v108 + 1)) || v107)
      {
        WTF::StringBuilder::append();
      }
      else
      {
        v39 = *((_DWORD *)v108 + 4);
        v40 = *((_QWORD *)v108 + 1);
        ++v109;
        if ((v39 & 4) != 0)
          *(_BYTE *)(v40 + v38) = v37;
        else
          *(_WORD *)(v40 + 2 * v38) = v37;
      }
      v41 = *(_QWORD *)(v15 + 56);
      if (v41)
      {
        if (*(_BYTE *)(v15 + 34))
        {
          v42 = *(_QWORD *)(v27 + 24);
          goto LABEL_64;
        }
        v42 = *(_QWORD *)(v27 + 24);
        if (!*MEMORY[0x1E0CC10F0])
LABEL_64:
          v42 = (v42 & 0x3FFFFFFFFLL) + v41;
      }
      else
      {
        v42 = *(_QWORD *)(v27 + 24);
      }
      v43 = *(unsigned __int8 *)(v42 + 2);
      LOBYTE(v106) = *(_BYTE *)(v42 + 2);
      if (!v108 || (v44 = v109, v109 >= *((_DWORD *)v108 + 1)) || v107)
      {
        WTF::StringBuilder::append();
      }
      else
      {
        v45 = *((_DWORD *)v108 + 4);
        v46 = *((_QWORD *)v108 + 1);
        ++v109;
        if ((v45 & 4) != 0)
          *(_BYTE *)(v46 + v44) = v43;
        else
          *(_WORD *)(v46 + 2 * v44) = v43;
      }
      v47 = *(_QWORD *)(v15 + 56);
      if (v47)
      {
        if (*(_BYTE *)(v15 + 34))
        {
          v48 = *(_QWORD *)(v27 + 24);
          goto LABEL_75;
        }
        v48 = *(_QWORD *)(v27 + 24);
        if (!*MEMORY[0x1E0CC10F0])
LABEL_75:
          v48 = (v48 & 0x3FFFFFFFFLL) + v47;
      }
      else
      {
        v48 = *(_QWORD *)(v27 + 24);
      }
      v49 = *(unsigned __int8 *)(v48 + 3);
      LOBYTE(v106) = *(_BYTE *)(v48 + 3);
      if (!v108 || (v50 = v109, v109 >= *((_DWORD *)v108 + 1)) || v107)
      {
        WTF::StringBuilder::append();
      }
      else
      {
        v51 = *((_DWORD *)v108 + 4);
        v52 = *((_QWORD *)v108 + 1);
        ++v109;
        if ((v51 & 4) != 0)
          *(_BYTE *)(v52 + v50) = v49;
        else
          *(_WORD *)(v52 + 2 * v50) = v49;
      }
      WTF::StringBuilder::toAtomString((WTF::AtomString *)&v107, (WTF::AtomString *)&v106);
      v54 = v106;
      if (v106)
        *(_DWORD *)v106 += 2;
      v55 = v102;
      v102 = v54;
      if (v55)
      {
        if (*(_DWORD *)v55 == 2)
        {
          WTF::StringImpl::destroy(v55, v53);
          v54 = v106;
        }
        else
        {
          *(_DWORD *)v55 -= 2;
        }
      }
      v106 = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
          WTF::StringImpl::destroy(v54, v53);
        else
          *(_DWORD *)v54 -= 2;
      }
      v103 = JSC::DataView::get<unsigned char>((uint64_t)v111, 16, 1, 0);
      if (*(_DWORD *)v27 == 1)
        JSC::ArrayBufferView::operator delete();
      else
        --*(_DWORD *)v27;
      v57 = v108;
      v108 = 0;
      if (v57)
      {
        if (*(_DWORD *)v57 == 2)
          WTF::StringImpl::destroy(v57, v56);
        else
          *(_DWORD *)v57 -= 2;
      }
      v58 = v107;
      v107 = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2)
          WTF::StringImpl::destroy(v58, v56);
        else
          *(_DWORD *)v58 -= 2;
      }
      v59 = v111;
      v111 = 0;
      if (v59)
      {
        if (*v59 == 1)
          JSC::ArrayBufferView::operator delete();
        else
          --*v59;
      }
      v60 = v99;
      v61 = *((unsigned int *)this + 11);
      if ((_DWORD)v61 == *((_DWORD *)this + 10))
      {
        v62 = WTF::Vector<WebCore::MockTrackBox,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)this + 8, v61 + 1, (unint64_t)&v99);
        LODWORD(v61) = *((_DWORD *)this + 11);
        v63 = *((_QWORD *)this + 4);
        v64 = (_QWORD *)(v63 + 40 * v61);
        *v64 = *(_QWORD *)v62;
        v65 = *(_DWORD **)(v62 + 8);
        if (v65)
          *v65 += 2;
        v64[1] = v65;
        *(_BYTE *)(v63 + 40 * v61 + 16) = *(_BYTE *)(v62 + 16);
        v66 = *(_DWORD **)(v62 + 24);
        if (v66)
          *v66 += 2;
        v67 = (int *)(v62 + 32);
        v68 = v63 + 40 * v61;
        *(_QWORD *)(v68 + 24) = v66;
        v69 = (int *)(v68 + 32);
      }
      else
      {
        v70 = *v6;
        v71 = (WTF **)(*v6 + 40 * v61);
        *v71 = v99;
        v72 = v100;
        if (v100)
          *(_DWORD *)v100 += 2;
        v71[1] = v72;
        *(_BYTE *)(v70 + 40 * v61 + 16) = v101;
        v73 = v102;
        if (v102)
          *(_DWORD *)v102 += 2;
        v74 = v70 + 40 * v61;
        *(_QWORD *)(v74 + 24) = v73;
        v69 = (int *)(v74 + 32);
        v67 = &v103;
      }
      *v69 = *v67;
      *((_DWORD *)this + 11) = v61 + 1;
      v75 = v102;
      v102 = 0;
      if (v75)
      {
        if (*(_DWORD *)v75 == 2)
          WTF::StringImpl::destroy(v75, v56);
        else
          *(_DWORD *)v75 -= 2;
      }
      v76 = v100;
      v100 = 0;
      if (v76)
      {
        if (*(_DWORD *)v76 == 2)
          WTF::StringImpl::destroy(v76, v56);
        else
          *(_DWORD *)v76 -= 2;
      }
      v14 += (unint64_t)v60;
    }
LABEL_120:
    v77 = v104;
    v104 = 0;
    if (v77 && (v8 = *(_DWORD *)v77 == 2, *(_DWORD *)v77 -= 2, v8))
    {
      v78 = *((_QWORD *)v77 + 10);
      if (v78)
      {
        *(_QWORD *)(v78 + 8) = 3;
        *((_QWORD *)v77 + 10) = 0;
      }
      if ((*((_BYTE *)v77 + 72) & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((WebCore::MockBox *)((char *)v77 + 72));
      JSC::ArrayBufferContents::~ArrayBufferContents((WebCore::MockBox *)((char *)v77 + 16));
      v80 = (WTF *)*((_QWORD *)v77 + 1);
      if ((v80 & 1) == 0 && v80)
      {
        v81 = *(WTF **)v80;
        if (*(_QWORD *)v80)
        {
          *(_QWORD *)v80 = 0;
          *((_DWORD *)v80 + 2) = 0;
          WTF::fastFree(v81, v79);
        }
        WTF::fastFree(v80, v79);
      }
      WTF::fastFree(v77, v79);
      if ((v21 & 1) == 0)
        break;
    }
    else if ((v21 & 1) == 0)
    {
      break;
    }
  }
  v91 = v105;
  v105 = 0;
  if (v91)
  {
    if (*v91 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*v91;
  }
  return this;
}

WebCore::MockSampleBox *WebCore::MockSampleBox::MockSampleBox(WebCore::MockSampleBox *this, WTF **a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  BOOL v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  char v12;
  int v13;
  uint64_t v14;
  char v15;
  int v16;
  uint64_t v17;
  char v18;
  WTF::StringImpl *v19;
  WTF *v21;
  void *v22;
  WTF **v23;
  WTF *v24;
  WTF *v25;
  WTF::StringImpl *v26;

  *((_QWORD *)this + 1) = 0;
  WebCore::MockBox::peekType((WebCore::MockBox *)a2, &v26);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v26;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  *(_QWORD *)this = WebCore::MockBox::peekLength((WebCore::MockBox *)a2, v4);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 10000000;
  *((_BYTE *)this + 28) = 1;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 10000000;
  *((_BYTE *)this + 44) = 1;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 10000000;
  *((_BYTE *)this + 60) = 1;
  if (a2)
    *(_DWORD *)a2 += 2;
  JSC::DataView::create();
  if (a2)
  {
    v6 = *(_DWORD *)a2 == 2;
    *(_DWORD *)a2 -= 2;
    if (v6)
    {
      v21 = a2[10];
      if (v21)
      {
        *((_QWORD *)v21 + 1) = 3;
        a2[10] = 0;
      }
      if (((_BYTE)a2[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(a2 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(a2 + 2));
      v23 = (WTF **)a2[1];
      if ((v23 & 1) == 0 && v23)
      {
        v25 = a2[1];
        v24 = *v23;
        if (*v23)
        {
          *(_QWORD *)v25 = 0;
          *((_DWORD *)v25 + 2) = 0;
          WTF::fastFree(v24, v22);
        }
        WTF::fastFree(v25, v22);
      }
      WTF::fastFree((WTF *)a2, v22);
    }
  }
  v7 = JSC::DataView::get<int>((uint64_t)v26, 8);
  v8 = JSC::DataView::get<int>((uint64_t)v26, 12);
  v9 = v8;
  if (v8 >= 0)
    v10 = 5;
  else
    v10 = 9;
  if (v7 <= 1)
    v11 = 1;
  else
    v11 = v7;
  if (v7)
  {
    v12 = 1;
  }
  else
  {
    v9 = (uint64_t)v8 >> 63;
    v12 = v10;
  }
  *((_QWORD *)this + 2) = v9;
  *((_DWORD *)this + 6) = v11;
  *((_BYTE *)this + 28) = v12;
  v13 = JSC::DataView::get<int>((uint64_t)v26, 16);
  v14 = v13;
  if (!v7)
    v14 = (uint64_t)v13 >> 63;
  if (v13 >= 0)
    v15 = 5;
  else
    v15 = 9;
  if (v7)
    v15 = 1;
  *((_QWORD *)this + 4) = v14;
  *((_DWORD *)this + 10) = v11;
  *((_BYTE *)this + 44) = v15;
  v16 = JSC::DataView::get<int>((uint64_t)v26, 20);
  v17 = v16;
  if (!v7)
    v17 = (uint64_t)v16 >> 63;
  if (v16 >= 0)
    v18 = 5;
  else
    v18 = 9;
  if (v7)
    v18 = 1;
  *((_QWORD *)this + 6) = v17;
  *((_DWORD *)this + 14) = v11;
  *((_BYTE *)this + 60) = v18;
  *((_DWORD *)this + 16) = JSC::DataView::get<int>((uint64_t)v26, 24);
  *((_BYTE *)this + 68) = JSC::DataView::get<unsigned char>((uint64_t)v26, 28, 1, 0);
  *((_BYTE *)this + 69) = JSC::DataView::get<unsigned char>((uint64_t)v26, 29, 1, 0);
  v19 = v26;
  v26 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*(_DWORD *)v19;
  }
  return this;
}

uint64_t WebCore::MockMediaPlayerMediaSource::registerMediaEngine(void (*a1)(_QWORD **))
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E341C908;
  v2[1] = 0;
  v4 = v2;
  a1(&v4);
  result = (uint64_t)v4;
  v4 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WebCore::mimeTypeCache(WebCore *this)
{
  const WTF::StringImpl *v1;
  const WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  _QWORD v8[3];
  WTF::StringImpl *v9;
  WTF::StringImpl *v10[2];

  v10[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  if ((byte_1ECE84161 & 1) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v10[0] = (WTF::StringImpl *)v8[0];
    v7 = 0;
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(&v7, &v9, v1, (uint64_t)v8);
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(&v7, v10, v2, (uint64_t)v8);
    v4 = v7;
    v7 = 0;
    qword_1ECE84170 = v4;
    v5 = v10[0];
    v10[0] = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v3);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = v9;
    v9 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v3);
      else
        *(_DWORD *)v6 -= 2;
    }
    byte_1ECE84161 = 1;
  }
}

uint64_t WebCore::MockMediaPlayerMediaSource::supportsType(WebCore::MockMediaPlayerMediaSource *this, const WebCore::MediaEngineSupportParameters *a2, double a3, double a4, float a5)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  unsigned __int8 v8;
  const WTF::StringImpl *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int i;
  int v16;
  WTF *v17;
  float v18;
  WTF::StringImpl *v19;
  char v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;

  if (!*((_BYTE *)this + 56))
    return 0;
  WebCore::ContentType::containerType(this, a3, a4, a5);
  WTF::String::convertToASCIILowercase((WTF::String *)&v22);
  v7 = v22;
  v22 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      v7 = (WTF::StringImpl *)WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  if (!v21)
    return 0;
  if (*((_DWORD *)v21 + 1))
  {
    WebCore::mimeTypeCache(v7);
    v11 = qword_1ECE84170;
    if (qword_1ECE84170)
    {
      v12 = *(_DWORD *)(qword_1ECE84170 - 8);
      v13 = *((_DWORD *)v21 + 4);
      if (v13 < 0x100)
        v14 = WTF::StringImpl::hashSlowCase(v21);
      else
        v14 = v13 >> 8;
      for (i = 0; ; v14 = i + v16)
      {
        v16 = v14 & v12;
        v17 = *(WTF **)(v11 + 8 * (v14 & v12));
        if (!v17)
          goto LABEL_23;
        if (v17 != (WTF *)-1 && (WTF::equal(v17, v21, v10) & 1) != 0)
          break;
        ++i;
      }
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WebCore::ContentType::codecsParameter(void)::codecs = (uint64_t)v22;
      }
      WebCore::ContentType::parameter((uint64_t *)this, (const WTF::String *)&WebCore::ContentType::codecsParameter(void)::codecs, &v22, v18);
      v19 = v22;
      if (!v22)
      {
        v8 = 2;
        goto LABEL_35;
      }
      if (*((_DWORD *)v22 + 1))
      {
        v20 = MEMORY[0x19AEA53F4]();
        v8 = 1;
        v19 = v22;
        if ((v20 & 1) == 0)
        {
          if (MEMORY[0x19AEA53F4](v22, "kcom", 4))
            v8 = 1;
          else
            v8 = 2;
          v19 = v22;
        }
        v22 = 0;
        if (!v19)
          goto LABEL_35;
      }
      else
      {
        v22 = 0;
        v8 = 2;
      }
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v6);
      else
        *(_DWORD *)v19 -= 2;
      goto LABEL_35;
    }
  }
LABEL_23:
  v8 = 0;
LABEL_35:
  if (*(_DWORD *)v21 == 2)
    WTF::StringImpl::destroy(v21, v6);
  else
    *(_DWORD *)v21 -= 2;
  return v8;
}

void WebCore::MockMediaPlayerMediaSource::~MockMediaPlayerMediaSource(WebCore::MockMediaPlayerMediaSource *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  WTF *v20;
  int v21;
  uint64_t v22;

  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (!v3)
    goto LABEL_18;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v22 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v22 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    goto LABEL_13;
  if (v7)
    goto LABEL_18;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
LABEL_18:
  v11 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (!v11)
    goto LABEL_31;
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v11))
  {
    goto LABEL_23;
  }
  MEMORY[0x19AEA534C](v11);
LABEL_23:
  v13 = *(_QWORD *)(v11 + 16) - 1;
  *(_QWORD *)(v11 + 16) = v13;
  if (!v13)
  {
    v14 = *(_QWORD *)(v11 + 8);
    v15 = __ldxr((unsigned __int8 *)v11);
    if (v15 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v11))
      {
        if (v14)
          goto LABEL_31;
LABEL_30:
        WTF::fastFree((WTF *)v11, a2);
        goto LABEL_31;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
    if (v14)
      goto LABEL_31;
    goto LABEL_30;
  }
  v21 = __ldxr((unsigned __int8 *)v11);
  if (v21 != 1)
  {
    __clrex();
    goto LABEL_44;
  }
  if (__stlxr(0, (unsigned __int8 *)v11))
LABEL_44:
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
LABEL_31:
  v16 = *((_QWORD *)this + 7);
  if (v16)
  {
    *(_QWORD *)(v16 + 8) = 0;
    v17 = (unsigned int *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (v17)
    {
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        atomic_store(1u, v17);
        WTF::fastFree((WTF *)v17, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 7) = 0;
  }
  *(_QWORD *)this = off_1E340D798;
  v20 = (WTF *)*((_QWORD *)this + 1);
  if (v20)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v20, a2);
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::MockMediaPlayerMediaSource::~MockMediaPlayerMediaSource(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::MockMediaPlayerMediaSource::load(WebCore::MockMediaPlayerMediaSource *this, const WTF::URL *a2, const WebCore::ContentType *a3, WebCore::MediaSourcePrivateClient *a4)
{
  uint64_t result;
  void *v6;
  WebCore::MockMediaSourcePrivate *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  WebCore::MockMediaSourcePrivate *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::MockMediaSourcePrivate *v26;

  result = WebCore::MockMediaSourcePrivate::create(this, a4, &v26);
  v7 = v26;
  v26 = 0;
  v8 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = v7;
  if (!v8)
    return result;
  v9 = *(_QWORD *)(v8 + 8);
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEA534C](v9);
LABEL_6:
  v11 = *(_QWORD *)(v9 + 8);
  v12 = v11 - 1;
  *(_QWORD *)(v9 + 8) = v11 - 1;
  if (v11 == 1)
  {
    v24 = *(_QWORD *)(v9 + 16);
    v13 = *(_QWORD *)(v9 + 24);
    *(_QWORD *)(v9 + 24) = 0;
    v14 = v24 != 0;
  }
  else
  {
    v13 = 0;
    v14 = 1;
  }
  v15 = __ldxr((unsigned __int8 *)v9);
  if (v15 != 1)
  {
    __clrex();
LABEL_13:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v9);
    if (v12)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v9))
    goto LABEL_13;
  if (v12)
    goto LABEL_18;
LABEL_14:
  if (v13)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (!v14)
    result = WTF::fastFree((WTF *)v9, v6);
LABEL_18:
  v16 = v26;
  v26 = 0;
  if (!v16)
    return result;
  v17 = *((_QWORD *)v16 + 1);
  if (__ldaxr((unsigned __int8 *)v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v17))
  {
    goto LABEL_23;
  }
  result = MEMORY[0x19AEA534C](v17);
LABEL_23:
  v19 = *(_QWORD *)(v17 + 8);
  v20 = v19 - 1;
  *(_QWORD *)(v17 + 8) = v19 - 1;
  if (v19 == 1)
  {
    v25 = *(_QWORD *)(v17 + 16);
    v21 = *(_QWORD *)(v17 + 24);
    *(_QWORD *)(v17 + 24) = 0;
    v22 = v25 != 0;
  }
  else
  {
    v21 = 0;
    v22 = 1;
  }
  v23 = __ldxr((unsigned __int8 *)v17);
  if (v23 != 1)
  {
    __clrex();
LABEL_30:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v17);
    if (v20)
      return result;
    goto LABEL_31;
  }
  if (__stlxr(0, (unsigned __int8 *)v17))
    goto LABEL_30;
  if (v20)
    return result;
LABEL_31:
  if (v21)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  if (!v22)
    return WTF::fastFree((WTF *)v17, v6);
  return result;
}

uint64_t WebCore::MockMediaPlayerMediaSource::play(WebCore::MockMediaPlayerMediaSource *this)
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;

  *((_BYTE *)this + 178) = 1;
  ++*((_DWORD *)this + 12);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = &off_1E341CA80;
  v2[1] = this;
  v4 = (uint64_t)v2;
  WTF::callOnMainThread();
  result = v4;
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return result;
}

uint64_t WebCore::MockMediaPlayerMediaSource::pause(uint64_t this)
{
  *(_BYTE *)(this + 178) = 0;
  return this;
}

float WebCore::MockMediaPlayerMediaSource::naturalSize(WebCore::MockMediaPlayerMediaSource *this)
{
  return 0.0;
}

BOOL WebCore::MockMediaPlayerMediaSource::hasVideo(WebCore::MockMediaPlayerMediaSource *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  BOOL v7;

  v1 = *((_QWORD *)this + 10);
  if (!v1)
    return 0;
  v2 = *(unsigned int *)(v1 + 44);
  if (!(_DWORD)v2)
    return 0;
  v3 = *(uint64_t **)(v1 + 32);
  v4 = 8 * v2 - 8;
  do
  {
    v5 = *v3++;
    result = *(_BYTE *)(v5 + 73) != 0;
    if (*(_BYTE *)(v5 + 73))
      v7 = 1;
    else
      v7 = v4 == 0;
    v4 -= 8;
  }
  while (!v7);
  return result;
}

BOOL WebCore::MockMediaPlayerMediaSource::hasAudio(WebCore::MockMediaPlayerMediaSource *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  BOOL v7;

  v1 = *((_QWORD *)this + 10);
  if (!v1)
    return 0;
  v2 = *(unsigned int *)(v1 + 44);
  if (!(_DWORD)v2)
    return 0;
  v3 = *(uint64_t **)(v1 + 32);
  v4 = 8 * v2 - 8;
  do
  {
    v5 = *v3++;
    result = *(_BYTE *)(v5 + 72) != 0;
    if (*(_BYTE *)(v5 + 72))
      v7 = 1;
    else
      v7 = v4 == 0;
    v4 -= 8;
  }
  while (!v7);
  return result;
}

uint64_t WebCore::MockMediaPlayerMediaSource::seeking(WebCore::MockMediaPlayerMediaSource *this)
{
  return *((unsigned __int8 *)this + 168);
}

BOOL WebCore::MockMediaPlayerMediaSource::paused(WebCore::MockMediaPlayerMediaSource *this)
{
  return *((_BYTE *)this + 178) == 0;
}

uint64_t WebCore::MockMediaPlayerMediaSource::networkState(WebCore::MockMediaPlayerMediaSource *this)
{
  return *((unsigned __int8 *)this + 177);
}

uint64_t WebCore::MockMediaPlayerMediaSource::readyState(WebCore::MockMediaPlayerMediaSource *this)
{
  return *((unsigned __int8 *)this + 176);
}

uint64_t WebCore::MockMediaPlayerMediaSource::maxTimeSeekable(WebCore::MockMediaPlayerMediaSource *this)
{
  return *((_QWORD *)this + 13);
}

uint64_t *WebCore::MockMediaPlayerMediaSource::buffered(WebCore::MockMediaPlayerMediaSource *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&WebCore::PlatformTimeRanges::emptyRanges(void)::onceKey);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&WebCore::PlatformTimeRanges::emptyRanges(void)::onceKey, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PlatformTimeRanges::emptyRanges(void)::$_0 &&>>);
  }
  return &WebCore::PlatformTimeRanges::emptyRanges(void)::emptyRanges;
}

uint64_t WebCore::MockMediaPlayerMediaSource::didLoadingProgress(WebCore::MockMediaPlayerMediaSource *this)
{
  return 0;
}

uint64_t WebCore::MockMediaPlayerMediaSource::currentTime(WebCore::MockMediaPlayerMediaSource *this)
{
  uint64_t v1;

  v1 = 120;
  if (!*((_BYTE *)this + 168))
    v1 = 88;
  return *(_QWORD *)((char *)this + v1);
}

WebCore::MediaSourcePrivate *WebCore::MockMediaPlayerMediaSource::timeIsProgressing(WebCore::MockMediaPlayerMediaSource *this)
{
  WebCore::MediaSourcePrivate *result;
  uint64_t v3;
  __int128 v4;
  __int128 v5;

  if (!*((_BYTE *)this + 178))
    return 0;
  result = (WebCore::MediaSourcePrivate *)*((_QWORD *)this + 10);
  if (result)
  {
    v3 = 120;
    if (!*((_BYTE *)this + 168))
      v3 = 88;
    v4 = *(_OWORD *)((char *)this + v3);
    v5 = xmmword_1968A1610;
    return (WebCore::MediaSourcePrivate *)WebCore::MediaSourcePrivate::hasFutureTime(result, (const WTF::MediaTime *)&v4, (const WTF::MediaTime *)&v5);
  }
  return result;
}

unsigned __int8 *WebCore::MockMediaPlayerMediaSource::notifyActiveSourceBuffersChanged(unsigned __int8 *this)
{
  uint64_t v1;
  uint64_t v2;
  int v4;

  v1 = *((_QWORD *)this + 8);
  if (!v1)
    return this;
  v2 = *((_QWORD *)this + 9);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
LABEL_5:
    this = (unsigned __int8 *)MEMORY[0x19AEA534C](v1);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v1))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  v4 = __ldxr((unsigned __int8 *)v1);
  if (v4 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v1))
    {
      if (!v2)
        return this;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  if (v2)
  {
LABEL_12:
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 8) + 8) + 160))(*(_QWORD *)(*(_QWORD *)(v2 + 8)
                                                                                                  + 8));
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v2);
  }
  return this;
}

uint64_t WebCore::MockMediaPlayerMediaSource::duration(WebCore::MockMediaPlayerMediaSource *this)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  int v5;

  v1 = *((_QWORD *)this + 10);
  if (!v1)
    return *(_QWORD *)WTF::MediaTime::zeroTime(this);
  v2 = (unsigned __int8 *)(v1 + 64);
  if (__ldaxr((unsigned __int8 *)(v1 + 64)))
  {
    __clrex();
LABEL_6:
    MEMORY[0x19AEA534C](v1 + 64);
    goto LABEL_7;
  }
  if (__stxr(1u, v2))
    goto LABEL_6;
LABEL_7:
  v4 = *(_QWORD *)(v1 + 72);
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, v2))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v4;
}

unsigned int *WebCore::MockMediaPlayerMediaSource::seekToTarget(WebCore::MockMediaPlayerMediaSource *this, const WebCore::SeekTarget *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  WTF::Lock *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *result;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int *v37;
  __int128 v38;
  const char *v39;
  uint64_t v40;
  WTF::NativePromiseBase *v41;

  v3 = *((unsigned __int8 *)this + 168);
  v5 = *((_OWORD *)a2 + 1);
  v4 = *((_OWORD *)a2 + 2);
  *(_OWORD *)((char *)this + 120) = *(_OWORD *)a2;
  *(_OWORD *)((char *)this + 136) = v5;
  *(_OWORD *)((char *)this + 152) = v4;
  if (!v3)
    *((_BYTE *)this + 168) = 1;
  v6 = WebCore::MediaSourcePrivate::waitForTarget(*((WebCore::MediaSourcePrivate **)this + 10), a2, (uint64_t *)&v35);
  v7 = (uint64_t)v35;
  v8 = WTF::RunLoop::current(v6);
  v9 = *((_QWORD *)this + 7);
  if (v9)
    goto LABEL_34;
  v9 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 8) = this;
  v11 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = v9;
  if (!v11)
    goto LABEL_34;
  do
  {
    v12 = __ldaxr(v11);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v11));
  if (!v13)
  {
    atomic_store(1u, v11);
    WTF::fastFree((WTF *)v11, v10);
  }
  v9 = *((_QWORD *)this + 7);
  if (v9)
  {
LABEL_34:
    do
      v14 = __ldaxr((unsigned int *)v9);
    while (__stlxr(v14 + 1, (unsigned int *)v9));
  }
  v15 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v16 = &off_1E341C968;
  v16[1] = this;
  v16[2] = v9;
  *(_DWORD *)(v15 + 8) = 1;
  *(_QWORD *)(v15 + 16) = v8;
  *(_QWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 40) = "seekToTarget";
  *(_QWORD *)(v15 + 48) = 0;
  *(_WORD *)(v15 + 56) = 0;
  *(_QWORD *)v15 = &off_1E3205A10;
  v17 = (unsigned int *)(v7 + 8);
  *(_QWORD *)(v15 + 64) = 0;
  *(_QWORD *)(v15 + 72) = v16;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 + 1, v17));
  v38 = 0uLL;
  v39 = "seekToTarget";
  v40 = 0;
  v36 = (unsigned int *)v7;
  v37 = 0;
  v41 = (WTF::NativePromiseBase *)v15;
  WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::maybeSettle(v7, &v41, (WTF::Logger::LogSiteIdentifier *)&v38);
  v19 = (unsigned int *)v41;
  v41 = 0;
  if (v19)
  {
    v20 = v19 + 2;
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v19 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
    }
  }
  v23 = v37;
  v37 = 0;
  if (v23)
  {
    v24 = v23 + 2;
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
    {
      atomic_store(1u, v23 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 8))(v23);
    }
  }
  v27 = v36;
  v36 = 0;
  if (v27)
  {
    v28 = v27 + 2;
    do
    {
      v29 = __ldaxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
    {
      atomic_store(1u, v27 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 16))(v27);
    }
  }
  result = v35;
  v35 = 0;
  if (result)
  {
    v32 = result + 2;
    do
    {
      v33 = __ldaxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
    }
  }
  return result;
}

_QWORD *WebCore::MockMediaPlayerMediaSource::advanceCurrentTime(_QWORD *this, void *a2)
{
  uint64_t v2;
  _QWORD *v3;
  unsigned __int8 *v4;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  int v14;
  uint64_t v15;
  uint64_t i;
  WTF::MediaTime *v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  int v23;
  __int128 v24;
  __int128 v25;

  v2 = this[10];
  if (v2)
  {
    v3 = this;
    v4 = (unsigned __int8 *)(v2 + 64);
    if (__ldaxr((unsigned __int8 *)(v2 + 64)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v4))
    {
      goto LABEL_6;
    }
    this = (_QWORD *)MEMORY[0x19AEA534C](v2 + 64);
LABEL_6:
    v6 = *(unsigned int *)(v2 + 100);
    if ((_DWORD)v6)
    {
      if (v6 >> 27)
      {
        __break(0xC471u);
        return this;
      }
      this = (_QWORD *)WTF::fastMalloc((WTF *)(32 * v6));
      v7 = (WTF *)this;
      v8 = *(unsigned int *)(v2 + 100);
      if ((_DWORD)v8)
      {
        v9 = 0;
        v10 = *(_QWORD *)(v2 + 88);
        v11 = 32 * v8;
        do
        {
          v12 = &this[v9 / 8];
          v13 = *(_OWORD *)(v10 + v9 + 16);
          *v12 = *(_OWORD *)(v10 + v9);
          v12[1] = v13;
          v9 += 32;
        }
        while (v11 != v9);
      }
    }
    else
    {
      v7 = 0;
    }
    v14 = __ldxr(v4);
    if (v14 == 1)
    {
      if (!__stlxr(0, v4))
      {
        if ((_DWORD)v6)
        {
LABEL_16:
          v15 = 0;
          for (i = (uint64_t)v7 + 16; ; i += 32)
          {
            v25 = *(_OWORD *)(i - 16);
            if ((WTF::MediaTime::compare((WTF::MediaTime *)(v3 + 11), (const WTF::MediaTime *)&v25) & 0x80000000) == 0)
            {
              v24 = *(_OWORD *)i;
              v17 = (WTF::MediaTime *)WTF::MediaTime::compare((WTF::MediaTime *)(v3 + 11), (const WTF::MediaTime *)&v24);
              if ((int)v17 < 1)
                break;
            }
            if (v6 == ++v15)
              return (_QWORD *)WTF::fastFree(v7, a2);
          }
          if (v6 <= v15)
            i = WTF::MediaTime::zeroTime(v17);
          v18 = *(_QWORD *)(i + 8);
          *(_QWORD *)&v25 = *(_QWORD *)i;
          *((_QWORD *)&v25 + 1) = v18;
          if (WTF::MediaTime::compare((WTF::MediaTime *)&v25, (const WTF::MediaTime *)(v3 + 13)) == -1)
            v19 = &v25;
          else
            v19 = (__int128 *)(v3 + 13);
          v3[11] = *(_QWORD *)v19;
          *(_QWORD *)((char *)v3 + 93) = *(_QWORD *)((char *)v19 + 5);
          v20 = v3[8];
          if (!v20)
            return (_QWORD *)WTF::fastFree(v7, a2);
          v21 = v3[9];
          if (__ldaxr((unsigned __int8 *)v20))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v20))
          {
            goto LABEL_35;
          }
          MEMORY[0x19AEA534C](v20);
LABEL_35:
          if (*(_QWORD *)(v20 + 24))
            ++*(_QWORD *)(v20 + 8);
          else
            v21 = 0;
          v23 = __ldxr((unsigned __int8 *)v20);
          if (v23 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v20))
            {
LABEL_43:
              if (v21)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v21 + 8) + 8) + 56))(*(_QWORD *)(*(_QWORD *)(v21 + 8) + 8));
                WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v21);
              }
              return (_QWORD *)WTF::fastFree(v7, a2);
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v20);
          goto LABEL_43;
        }
LABEL_23:
        if (!v7)
          return this;
        return (_QWORD *)WTF::fastFree(v7, a2);
      }
    }
    else
    {
      __clrex();
    }
    this = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 64));
    if ((_DWORD)v6)
      goto LABEL_16;
    goto LABEL_23;
  }
  return this;
}

unsigned __int8 *WebCore::MockMediaPlayerMediaSource::setReadyState(unsigned __int8 *result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  WTF::MediaTime *v6;
  WTF::MediaTime *v7;
  WTF::MediaTime *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[3];

  if (result[176] == a2)
    return result;
  result[176] = a2;
  v2 = *((_QWORD *)result + 8);
  if (!v2)
    return result;
  v3 = *((_QWORD *)result + 9);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_7;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](v2);
LABEL_7:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v2);
  if (v5 != 1)
    goto LABEL_17;
  if (__stlxr(0, (unsigned __int8 *)v2))
    goto LABEL_18;
  if (v3)
  {
    while (1)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 8) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 8));
      if (!*(_BYTE *)(v3 + 192))
        break;
      v6 = (WTF::MediaTime *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 72) + 560))(*(_QWORD *)(v3 + 72));
      if ((_DWORD)v6 != 1)
        break;
      if (*(_BYTE *)(v3 + 192))
      {
        *(_BYTE *)(v3 + 192) = 0;
        v11[0] = *(_OWORD *)(v3 + 176);
        v7 = (WTF::MediaTime *)WTF::MediaTime::zeroTime(v6);
        v11[1] = *(_OWORD *)v7;
        v8 = (WTF::MediaTime *)WTF::MediaTime::zeroTime(v7);
        v11[2] = *(_OWORD *)v8;
        v9 = *(_QWORD *)(v3 + 72);
        v10 = WTF::MediaTime::invalidTime(v8);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 384))(v9, v10);
        (*(void (**)(_QWORD, _OWORD *))(**(_QWORD **)(v3 + 72) + 400))(*(_QWORD *)(v3 + 72), v11);
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v3);
      }
      __break(1u);
LABEL_17:
      __clrex();
LABEL_18:
      result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
      if (!v3)
        return result;
    }
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v3);
  }
  return result;
}

uint64_t WebCore::MockMediaPlayerMediaSource::videoPlaybackQualityMetrics@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(this + 80);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 + 184);
    v5 = *(_QWORD *)(v3 + 176);
    this = WTF::MediaTime::toDouble((WTF::MediaTime *)(v3 + 192));
    *(_QWORD *)a2 = v5;
    *(_DWORD *)(a2 + 8) = v4;
    *(_QWORD *)(a2 + 16) = v6;
    *(_DWORD *)(a2 + 24) = 0;
    LOBYTE(v3) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 32) = v3;
  return this;
}

CFTypeRef WebCore::MockMediaPlayerMediaSource::colorSpace@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v3;
  CFTypeRef result;
  char v5;
  char **v6;
  char *v7;

  v3 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v3 != -1)
  {
    v7 = &v5;
    v6 = &v7;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  result = (CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  *a1 = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  if (result)
    return CFRetain(result);
  return result;
}

uint64_t WebCore::ScrollbarThemeMock::maxOverlapBetweenPages(WebCore::ScrollbarThemeMock *this)
{
  return 40;
}

uint64_t WebCore::ScrollbarThemeMock::isMockTheme(WebCore::ScrollbarThemeMock *this)
{
  return 1;
}

uint64_t WebCore::ScrollbarThemeMock::hasButtons(WebCore::ScrollbarThemeMock *this, WebCore::Scrollbar *a2)
{
  return 0;
}

uint64_t WebCore::ScrollbarThemeMock::hasThumb(WebCore::ScrollbarThemeMock *this, WebCore::Scrollbar *a2)
{
  return 1;
}

uint64_t WebCore::ScrollbarThemeMock::backButtonRect()
{
  return 0;
}

uint64_t WebCore::ScrollbarThemeMock::forwardButtonRect()
{
  return 0;
}

uint64_t WebCore::ScrollbarsControllerMock::isScrollbarsControllerMock(WebCore::ScrollbarsControllerMock *this)
{
  return 1;
}

uint64_t WebCore::MockMediaPlayerMediaSource::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 48);
  return this;
}

WebCore::MockMediaPlayerMediaSource *WebCore::MockMediaPlayerMediaSource::deref(WebCore::MockMediaPlayerMediaSource *this, void *a2)
{
  WTF *v2;
  void *v3;

  if (*((_DWORD *)this + 12) == 1)
  {
    WebCore::MockMediaPlayerMediaSource::~MockMediaPlayerMediaSource(this, a2);
    return (WebCore::MockMediaPlayerMediaSource *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 12);
  }
  return this;
}

void WebCore::MediaPlaybackTargetMock::~MediaPlaybackTargetMock(WebCore::MediaPlaybackTargetMock *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
}

{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::MediaPlaybackTargetMock::targetType(WebCore::MediaPlaybackTargetMock *this)
{
  return 1;
}

uint64_t WebCore::MediaPlaybackTargetMock::targetContext(WebCore::MediaPlaybackTargetMock *this)
{
  return (uint64_t)this + 16;
}

void WebCore::MediaPlaybackTargetContextMock::~MediaPlaybackTargetContextMock(WebCore::MediaPlaybackTargetContextMock *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
}

{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WTF::fastFree(this, a2);
}

BOOL WebCore::MediaPlaybackTargetContextMock::hasActiveRoute(WebCore::MediaPlaybackTargetContextMock *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 2);
  return v1 && *(_DWORD *)(v1 + 4) != 0;
}

BOOL WebCore::MediaPlaybackTargetContextMock::supportsRemoteVideoPlayback(WebCore::MediaPlaybackTargetContextMock *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 2);
  return v1 && *(_DWORD *)(v1 + 4) != 0;
}

void WebCore::MediaPlayerFactoryMediaSourceMock::~MediaPlayerFactoryMediaSourceMock(WebCore::MediaPlayerFactoryMediaSourceMock *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::MediaPlayerFactoryMediaSourceMock::identifier(WebCore::MediaPlayerFactoryMediaSourceMock *this)
{
  return 8;
}

_OWORD *WebCore::MediaPlayerFactoryMediaSourceMock::createMediaEnginePlayer@<X0>(WebCore::MediaPlayer *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  _OWORD *result;
  uint64_t v7;
  uint64_t v9;
  int v10;

  v5 = WTF::fastMalloc((WTF *)0xB8);
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)v5 = off_1E340D798;
  *(_BYTE *)(v5 + 24) = 0;
  result = (_OWORD *)WTF::MediaTime::invalidTime((WTF::MediaTime *)v5);
  *(_OWORD *)(v5 + 32) = *result;
  *(_DWORD *)(v5 + 48) = 1;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)v5 = off_1E341C3B8;
  if (!a1 || (v7 = *(_QWORD *)a1) == 0)
  {
    v9 = 0;
    goto LABEL_15;
  }
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
LABEL_7:
    result = (_OWORD *)MEMORY[0x19AEA534C](v7);
    goto LABEL_8;
  }
  if (__stxr(1u, (unsigned __int8 *)v7))
    goto LABEL_7;
LABEL_8:
  if (*(_QWORD *)(v7 + 24))
  {
    ++*(_QWORD *)(v7 + 16);
    v9 = v7;
  }
  else
  {
    v9 = 0;
  }
  v10 = __ldxr((unsigned __int8 *)v7);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      goto LABEL_15;
  }
  else
  {
    __clrex();
  }
  result = (_OWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
LABEL_15:
  *(_QWORD *)(v5 + 64) = v9;
  *(_QWORD *)(v5 + 72) = a1;
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = 0;
  *(_DWORD *)(v5 + 96) = 10000000;
  *(_BYTE *)(v5 + 100) = 1;
  *(_QWORD *)(v5 + 104) = 0;
  *(_DWORD *)(v5 + 112) = 10000000;
  *(_BYTE *)(v5 + 116) = 1;
  *(_BYTE *)(v5 + 120) = 0;
  *(_BYTE *)(v5 + 168) = 0;
  *(_WORD *)(v5 + 176) = 0;
  *(_BYTE *)(v5 + 178) = 0;
  *a2 = v5;
  return result;
}

WTF::StringImpl **WebCore::MediaPlayerFactoryMediaSourceMock::getSupportedTypes(WebCore *a1, WTF::StringImpl ***a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl **result;
  WTF::StringImpl **v5;

  WebCore::mimeTypeCache(a1);
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)&v5, (_QWORD **)&qword_1ECE84170);
  result = *a2;
  *a2 = v5;
  v5 = result;
  if (result)
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(result, v3);
  return result;
}

uint64_t WebCore::MediaPlayerFactoryMediaSourceMock::supportsTypeAndCodecs(WebCore::MediaPlayerFactoryMediaSourceMock *this, const WebCore::MediaEngineSupportParameters *a2, double a3, double a4, float a5)
{
  return WebCore::MockMediaPlayerMediaSource::supportsType(a2, a2, a3, a4, a5);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINS_9MediaTimeEN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZNS4_26MockMediaPlayerMediaSource12seekToTargetERKNS4_10SeekTargetEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS3_S5_EEE_vJSQ_EED1Ev(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E341C968;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINS_9MediaTimeEN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZNS4_26MockMediaPlayerMediaSource12seekToTargetERKNS4_10SeekTargetEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS3_S5_EEE_vJSQ_EED0Ev(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E341C968;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINS_9MediaTimeEN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZNS4_26MockMediaPlayerMediaSource12seekToTargetERKNS4_10SeekTargetEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS3_S5_EEE_vJSQ_EE4callESQ_(uint64_t result, WTF::MediaTime *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  __int128 v34;
  const char *v35;
  uint64_t v36;
  __int128 v37;

  v2 = *(_QWORD *)(result + 16);
  if (v2 && *(_QWORD *)(v2 + 8) && !*((_DWORD *)a2 + 4))
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 8);
    v6 = WebCore::MediaSourcePrivate::seekToTime(*(WebCore::MediaSourcePrivate **)(v5 + 80), a2, &v31);
    v7 = v31;
    v8 = WTF::RunLoop::current(v6);
    v9 = *(unsigned int **)(v4 + 16);
    if (v9)
    {
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
    if (*((_DWORD *)a2 + 4))
    {
      v30 = std::__throw_bad_variant_access[abi:sn180100]();
      return _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZZNS3_26MockMediaPlayerMediaSource12seekToTargetERKNS3_10SeekTargetEENK3__0clINSt12experimental15fundamentals_v38expectedINS_9MediaTimeES4_EEEEDaOT_EUlvE_EEDaRNS_34RefCountedSerialFunctionDispatcherESK_RKNS_6Logger17LogSiteIdentifierEEUlONSF_IvS4_EEE_vJSU_EED1Ev(v30);
    }
    else
    {
      *(_QWORD *)&v37 = *(_QWORD *)a2;
      *(_QWORD *)((char *)&v37 + 5) = *(_QWORD *)((char *)a2 + 5);
      v11 = WTF::fastMalloc((WTF *)0x50);
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
      v12 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v12 = &off_1E341C990;
      *(_QWORD *)(v12 + 8) = v5;
      *(_QWORD *)(v12 + 16) = v9;
      *(_OWORD *)(v12 + 24) = v37;
      *(_DWORD *)(v11 + 8) = 1;
      *(_QWORD *)(v11 + 16) = v8;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0;
      *(_QWORD *)(v11 + 40) = "operator()";
      *(_QWORD *)(v11 + 48) = 0;
      *(_WORD *)(v11 + 56) = 0;
      *(_QWORD *)v11 = &off_1E32059B0;
      *(_QWORD *)(v11 + 64) = 0;
      *(_QWORD *)(v11 + 72) = v12;
      v13 = (unsigned int *)(v7 + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
      v34 = 0uLL;
      v35 = "operator()";
      v36 = 0;
      v32 = (unsigned int *)v7;
      v33 = 0;
      *(_QWORD *)&v37 = v11;
      WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::maybeSettle(v7, (WTF::NativePromiseBase **)&v37, (WTF::Logger::LogSiteIdentifier *)&v34);
      v15 = (unsigned int *)v37;
      *(_QWORD *)&v37 = 0;
      if (v15)
      {
        v16 = v15 + 2;
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
        {
          atomic_store(1u, v15 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
        }
      }
      v19 = v33;
      v33 = 0;
      if (v19)
      {
        v20 = v19 + 2;
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v19 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
        }
      }
      v23 = v32;
      v32 = 0;
      if (v23)
      {
        v24 = v23 + 2;
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v23 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 16))(v23);
        }
      }
      result = v31;
      v31 = 0;
      if (result)
      {
        v27 = (unsigned int *)(result + 8);
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          atomic_store(1u, (unsigned int *)(result + 8));
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
        }
      }
    }
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZZNS3_26MockMediaPlayerMediaSource12seekToTargetERKNS3_10SeekTargetEENK3__0clINSt12experimental15fundamentals_v38expectedINS_9MediaTimeES4_EEEEDaOT_EUlvE_EEDaRNS_34RefCountedSerialFunctionDispatcherESK_RKNS_6Logger17LogSiteIdentifierEEUlONSF_IvS4_EEE_vJSU_EED1Ev(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E341C990;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZZNS3_26MockMediaPlayerMediaSource12seekToTargetERKNS3_10SeekTargetEENK3__0clINSt12experimental15fundamentals_v38expectedINS_9MediaTimeES4_EEEEDaOT_EUlvE_EEDaRNS_34RefCountedSerialFunctionDispatcherESK_RKNS_6Logger17LogSiteIdentifierEEUlONSF_IvS4_EEE_vJSU_EED0Ev(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E341C990;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZZNS3_26MockMediaPlayerMediaSource12seekToTargetERKNS3_10SeekTargetEENK3__0clINSt12experimental15fundamentals_v38expectedINS_9MediaTimeES4_EEEEDaOT_EUlvE_EEDaRNS_34RefCountedSerialFunctionDispatcherESK_RKNS_6Logger17LogSiteIdentifierEEUlONSF_IvS4_EEE_vJSU_EE4callESU_(_QWORD *result, void *a2)
{
  uint64_t v2;
  WebCore::MockMediaPlayerMediaSource *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  _QWORD *v11;
  WTF *v12;
  void *v13;
  _QWORD *v14;

  v2 = result[2];
  if (v2)
  {
    v3 = *(WebCore::MockMediaPlayerMediaSource **)(v2 + 8);
    if (v3)
    {
      v4 = result[1];
      ++*((_DWORD *)v3 + 12);
      if (*(_BYTE *)(v4 + 168))
        *(_BYTE *)(v4 + 168) = 0;
      v6 = result + 3;
      v5 = result[3];
      *(_QWORD *)(v4 + 93) = *(_QWORD *)((char *)result + 29);
      *(_QWORD *)(v4 + 88) = v5;
      v7 = *(_QWORD *)(v4 + 64);
      if (!v7)
        goto LABEL_17;
      v8 = *(_QWORD *)(v4 + 72);
      if (__ldaxr((unsigned __int8 *)v7))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v7))
      {
        goto LABEL_10;
      }
      result = (_QWORD *)MEMORY[0x19AEA534C](v7);
LABEL_10:
      if (*(_QWORD *)(v7 + 24))
        ++*(_QWORD *)(v7 + 8);
      else
        v8 = 0;
      v10 = __ldxr((unsigned __int8 *)v7);
      if (v10 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v7))
        {
          if (!v8)
            goto LABEL_17;
          goto LABEL_16;
        }
      }
      else
      {
        __clrex();
      }
      result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
      if (!v8)
      {
LABEL_17:
        if (*(_BYTE *)(v4 + 178))
        {
          v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v11 = &off_1E341C9B8;
          v11[1] = v4;
          v11[2] = v3;
          v14 = v11;
          WTF::callOnMainThread();
          result = v14;
          if (v14)
            return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v14 + 8))(v14);
        }
        else if (*((_DWORD *)v3 + 12) == 1)
        {
          WebCore::MockMediaPlayerMediaSource::~MockMediaPlayerMediaSource(v3, a2);
          return (_QWORD *)WTF::fastFree(v12, v13);
        }
        else
        {
          --*((_DWORD *)v3 + 12);
        }
        return result;
      }
LABEL_16:
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(*(_QWORD *)(v8 + 8) + 8) + 48))(*(_QWORD *)(*(_QWORD *)(v8 + 8) + 8), v6);
      (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v8 + 8) + 8) + 56))(*(_QWORD *)(*(_QWORD *)(v8 + 8) + 8));
      result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v8);
      goto LABEL_17;
    }
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZZN7WebCore26MockMediaPlayerMediaSource12seekToTargetERKNS2_10SeekTargetEENK3__0clINSt12experimental15fundamentals_v38expectedINS_9MediaTimeENS2_18PlatformMediaErrorEEEEEDaOT_ENKUlvE_clEvEUlvE_vJEED1Ev(_QWORD *a1, void *a2)
{
  WebCore::MockMediaPlayerMediaSource *v3;
  WTF *v5;
  void *v6;

  *a1 = &off_1E341C9B8;
  v3 = (WebCore::MockMediaPlayerMediaSource *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 12) == 1)
    {
      WebCore::MockMediaPlayerMediaSource::~MockMediaPlayerMediaSource(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 12);
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore26MockMediaPlayerMediaSource12seekToTargetERKNS2_10SeekTargetEENK3__0clINSt12experimental15fundamentals_v38expectedINS_9MediaTimeENS2_18PlatformMediaErrorEEEEEDaOT_ENKUlvE_clEvEUlvE_vJEED0Ev(WTF *this, void *a2)
{
  WebCore::MockMediaPlayerMediaSource *v3;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = &off_1E341C9B8;
  v3 = (WebCore::MockMediaPlayerMediaSource *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 12) == 1)
    {
      WebCore::MockMediaPlayerMediaSource::~MockMediaPlayerMediaSource(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 12);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZZN7WebCore26MockMediaPlayerMediaSource12seekToTargetERKNS2_10SeekTargetEENK3__0clINSt12experimental15fundamentals_v38expectedINS_9MediaTimeENS2_18PlatformMediaErrorEEEEEDaOT_ENKUlvE_clEvEUlvE_vJEE4callEv(uint64_t a1, void *a2)
{
  return WebCore::MockMediaPlayerMediaSource::advanceCurrentTime(*(_QWORD **)(a1 + 8), a2);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::MockAudioDestinationCocoa::*&)(void),WebCore::MockAudioDestinationCocoa*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MockAudioDestinationCocoa::startRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E341CA08;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MockAudioDestinationCocoa::startRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E341CA08;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MockAudioDestinationCocoa::startRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MockAudioDestinationCocoa::stopRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E341CA30;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MockAudioDestinationCocoa::stopRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E341CA30;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MockAudioDestinationCocoa::stopRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MockAudioDestinationCocoa::tick(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v7;
  _QWORD *v8;

  *a1 = &off_1E341CA58;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 152);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E3408538;
      v7[1] = v3;
      v8 = v7;
      WTF::ensureOnMainThread();
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MockAudioDestinationCocoa::tick(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v8;
  _QWORD *v9;

  *(_QWORD *)this = &off_1E341CA58;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 152);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E3408538;
      v8[1] = v4;
      v9 = v8;
      WTF::ensureOnMainThread();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MockAudioDestinationCocoa::tick(void)::$_0,void>::call(int *a1)
{
  WebCore::AudioDestinationCocoa *v2;
  uint64_t v3;
  WebCore::AudioSessionIOS *v4;
  float v5;
  int v6;
  unint64_t v7;
  void *v8;
  WTF *v9;
  CFTypeRef v10;
  AudioBufferList *v11;
  uint64_t result;
  _QWORD v13[2];
  __int128 v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  _QWORD v22[4];
  uint64_t v23;
  AudioBufferList *v24;
  CFTypeRef cf;
  WTF *v26;
  int v27;

  v2 = (WebCore::AudioDestinationCocoa *)*((_QWORD *)a1 + 1);
  v3 = *((_QWORD *)v2 + 4);
  v4 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)a1);
  v5 = (*(float (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v4 + 72))(v4);
  v6 = *(_DWORD *)(v3 + 28);
  v13[0] = off_1E34087C0;
  *(double *)&v13[1] = v5;
  v14 = xmmword_19689B100;
  v15 = 4;
  v16 = v6;
  v17 = 32;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v7 = *((_QWORD *)a1 + 4);
  WebCore::WebAudioBufferList::WebAudioBufferList((WebCore::WebAudioBufferList *)v22, (const WebCore::CAAudioStreamDescription *)v13);
  WebCore::WebAudioBufferList::setSampleCount(v22, v7);
  WebCore::AudioDestinationCocoa::render(v2, 0.0, 0, a1[8], v24);
  v9 = v26;
  if (v26)
  {
    v26 = 0;
    v27 = 0;
    WTF::fastFree(v9, v8);
  }
  v10 = cf;
  cf = 0;
  if (v10)
    CFRelease(v10);
  v11 = v24;
  v24 = 0;
  if (v11)
    MEMORY[0x19AEA7644](v11, 0x1080C404ACF7207);
  result = v23;
  v23 = 0;
  if (result)
    return MEMORY[0x19AEA7644](result, 0x1080C404ACF7207);
  return result;
}

unint64_t WTF::Vector<WebCore::MockTrackBox,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::MockTrackBox,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::MockTrackBox,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::MockTrackBox,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  if (result[2] < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 40 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(40 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        v8 = (WTF *)((char *)v3 + 40 * v4);
        v9 = v3;
        do
        {
          v10 = *(_QWORD *)v9;
          v11 = *((_QWORD *)v9 + 1);
          *((_QWORD *)v9 + 1) = 0;
          *(_QWORD *)v7 = v10;
          *((_QWORD *)v7 + 1) = v11;
          *((_BYTE *)v7 + 16) = *((_BYTE *)v9 + 16);
          v12 = *((_QWORD *)v9 + 3);
          *((_QWORD *)v9 + 3) = 0;
          *((_QWORD *)v7 + 3) = v12;
          v7[8] = *((_DWORD *)v9 + 8);
          v13 = (WTF::StringImpl *)*((_QWORD *)v9 + 3);
          *((_QWORD *)v9 + 3) = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, v6);
            else
              *(_DWORD *)v13 -= 2;
          }
          result = (unsigned int *)*((_QWORD *)v9 + 1);
          *((_QWORD *)v9 + 1) = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
            else
              *result -= 2;
          }
          v9 = (WTF *)((char *)v9 + 40);
          v7 += 10;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MockMediaPlayerMediaSource::play(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WebCore::MockMediaPlayerMediaSource *v3;
  WTF *v5;
  void *v6;

  v3 = (WebCore::MockMediaPlayerMediaSource *)a1[1];
  *a1 = &off_1E341CA80;
  a1[1] = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 12) == 1)
    {
      WebCore::MockMediaPlayerMediaSource::~MockMediaPlayerMediaSource(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 12);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MockMediaPlayerMediaSource::play(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  WebCore::MockMediaPlayerMediaSource *v3;
  WTF *v5;
  void *v6;

  v3 = (WebCore::MockMediaPlayerMediaSource *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E341CA80;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 12) == 1)
    {
      WebCore::MockMediaPlayerMediaSource::~MockMediaPlayerMediaSource(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 12);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MockMediaPlayerMediaSource::play(void)::$_0,void>::call(uint64_t a1, void *a2)
{
  return WebCore::MockMediaPlayerMediaSource::advanceCurrentTime(*(_QWORD **)(a1 + 8), a2);
}

uint64_t WebCore::MockMediaSourcePrivate::create@<X0>(WebCore::MockMediaSourcePrivate *this@<X0>, WebCore::MockMediaPlayerMediaSource *a2@<X1>, WebCore::MockMediaSourcePrivate **a3@<X8>)
{
  WebCore::MockMediaSourcePrivate *v7;
  WebCore::MockMediaSourcePrivate *v8;
  uint64_t v9;
  int v11;
  uint64_t result;
  void *v13;
  WebCore::MockMediaSourcePrivate *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  WebCore::MockMediaSourcePrivate *v23;

  v7 = (WebCore::MockMediaSourcePrivate *)WTF::fastMalloc((WTF *)0xE8);
  v8 = WebCore::MockMediaSourcePrivate::MockMediaSourcePrivate(v7, this, a2);
  *a3 = v8;
  v9 = *((_QWORD *)v8 + 1);
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v9);
LABEL_5:
  ++*(_QWORD *)(v9 + 8);
  v11 = __ldxr((unsigned __int8 *)v9);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)v9))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
  v23 = v7;
  result = (*(uint64_t (**)(WebCore::MockMediaPlayerMediaSource *, WebCore::MockMediaSourcePrivate **))(*(_QWORD *)a2 + 16))(a2, &v23);
  v14 = v23;
  v23 = 0;
  if (!v14)
    return result;
  v15 = *((_QWORD *)v14 + 1);
  if (__ldaxr((unsigned __int8 *)v15))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v15))
  {
    goto LABEL_15;
  }
  result = MEMORY[0x19AEA534C](v15);
LABEL_15:
  v17 = *(_QWORD *)(v15 + 8);
  v18 = v17 - 1;
  *(_QWORD *)(v15 + 8) = v17 - 1;
  if (v17 == 1)
  {
    v22 = *(_QWORD *)(v15 + 16);
    v19 = *(_QWORD *)(v15 + 24);
    *(_QWORD *)(v15 + 24) = 0;
    v20 = v22 != 0;
  }
  else
  {
    v19 = 0;
    v20 = 1;
  }
  v21 = __ldxr((unsigned __int8 *)v15);
  if (v21 != 1)
  {
    __clrex();
LABEL_22:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v15);
    if (v18)
      return result;
    goto LABEL_23;
  }
  if (__stlxr(0, (unsigned __int8 *)v15))
    goto LABEL_22;
  if (v18)
    return result;
LABEL_23:
  if (v19)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  if (!v20)
    return WTF::fastFree((WTF *)v15, v13);
  return result;
}

WebCore::MockMediaSourcePrivate *WebCore::MockMediaSourcePrivate::MockMediaSourcePrivate(WebCore::MockMediaSourcePrivate *this, WebCore::MockMediaPlayerMediaSource *a2, WebCore::MediaSourcePrivateClient *a3)
{
  RefCountedSerialFunctionDispatcher *v6;
  uint64_t v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  unsigned int *v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  int v31;
  uint64_t v32;

  v6 = (RefCountedSerialFunctionDispatcher *)WTF::RunLoop::current(this);
  WebCore::MediaSourcePrivate::MediaSourcePrivate(this, a3, v6);
  *(_QWORD *)this = off_1E341CC30;
  *((_QWORD *)this + 20) = &unk_1E341CCE8;
  v7 = *((_QWORD *)a2 + 7);
  if (v7)
    goto LABEL_63;
  v7 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v7 = 1;
  *(_QWORD *)(v7 + 8) = a2;
  v9 = (unsigned int *)*((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v7;
  if (!v9)
    goto LABEL_63;
  do
  {
    v10 = __ldaxr(v9);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v9));
  if (!v11)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, v8);
  }
  v7 = *((_QWORD *)a2 + 7);
  if (v7)
  {
LABEL_63:
    do
      v12 = __ldaxr((unsigned int *)v7);
    while (__stlxr(v12 + 1, (unsigned int *)v7));
  }
  *((_QWORD *)this + 21) = v7;
  *((_QWORD *)this + 22) = 0;
  *((_DWORD *)this + 46) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_DWORD *)this + 50) = 10000000;
  *((_BYTE *)this + 204) = 1;
  if (v7)
    v13 = *(_QWORD *)(v7 + 8);
  else
    v13 = 0;
  v14 = *(_QWORD *)(v13 + 64);
  if (v14)
  {
    v15 = *(_QWORD *)(v13 + 72);
    if (__ldaxr((unsigned __int8 *)v14))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v14))
    {
      goto LABEL_17;
    }
    MEMORY[0x19AEA534C](v14);
LABEL_17:
    if (*(_QWORD *)(v14 + 24))
      ++*(_QWORD *)(v14 + 8);
    else
      v15 = 0;
    v18 = __ldxr((unsigned __int8 *)v14);
    if (v18 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v14))
        goto LABEL_25;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v14);
LABEL_25:
    v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v15 + 8) + 8) + 672))(*(_QWORD *)(*(_QWORD *)(v15 + 8) + 8));
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v15);
    goto LABEL_26;
  }
  v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(MEMORY[8] + 8) + 672))(*(_QWORD *)(MEMORY[8] + 8));
LABEL_26:
  v19 = (unsigned int *)(v17 + 8);
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 + 1, v19));
  *((_QWORD *)this + 26) = v17;
  v21 = (_QWORD *)*((_QWORD *)this + 21);
  if (v21)
    v21 = (_QWORD *)v21[1];
  v22 = v21[8];
  if (!v22)
  {
    v23 = 0;
    goto LABEL_44;
  }
  v23 = v21[9];
  if (__ldaxr((unsigned __int8 *)v22))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v22))
  {
    goto LABEL_36;
  }
  MEMORY[0x19AEA534C](v22);
LABEL_36:
  if (*(_QWORD *)(v22 + 24))
    ++*(_QWORD *)(v22 + 8);
  else
    v23 = 0;
  v25 = __ldxr((unsigned __int8 *)v22);
  if (v25 != 1)
  {
    __clrex();
    goto LABEL_43;
  }
  if (__stlxr(0, (unsigned __int8 *)v22))
LABEL_43:
    WTF::Lock::unlockSlow((WTF::Lock *)v22);
LABEL_44:
  v26 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v23 + 8) + 8) + 664))(*(_QWORD *)(*(_QWORD *)(v23 + 8) + 8));
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v23);
  *((_QWORD *)this + 27) = v26;
  *((_QWORD *)this + 28) = 0;
  v27 = (_QWORD *)*((_QWORD *)this + 21);
  if (v27)
    v27 = (_QWORD *)v27[1];
  v28 = v27[8];
  if (!v28)
  {
    v29 = 0;
    goto LABEL_60;
  }
  v29 = v27[9];
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
LABEL_51:
    MEMORY[0x19AEA534C](v28);
    goto LABEL_52;
  }
  if (__stxr(1u, (unsigned __int8 *)v28))
    goto LABEL_51;
LABEL_52:
  if (*(_QWORD *)(v28 + 24))
    ++*(_QWORD *)(v28 + 8);
  else
    v29 = 0;
  v31 = __ldxr((unsigned __int8 *)v28);
  if (v31 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v28))
      goto LABEL_60;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_60:
  v32 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v29 + 8) + 8) + 664))(*(_QWORD *)(*(_QWORD *)(v29 + 8) + 8));
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v29);
  (*(void (**)(WebCore::MediaSourcePrivateClient *, uint64_t))(*(_QWORD *)a3 + 40))(a3, v32);
  return this;
}

void WebCore::MockMediaSourcePrivate::~MockMediaSourcePrivate(WebCore::MockMediaSourcePrivate *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = (unsigned int *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  WebCore::MediaSourcePrivate::~MediaSourcePrivate(this, a2);
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;
  void *v11;

  v3 = (unsigned int *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  WebCore::MediaSourcePrivate::~MediaSourcePrivate(this, a2);
  WTF::fastFree(v10, v11);
}

void `non-virtual thunk to'WebCore::MockMediaSourcePrivate::~MockMediaSourcePrivate(WebCore::MockMediaSourcePrivate *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  WebCore::MediaSourcePrivate::~MediaSourcePrivate((WebCore::MockMediaSourcePrivate *)((char *)this - 160), a2);
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;
  void *v11;

  v3 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  WebCore::MediaSourcePrivate::~MediaSourcePrivate((WebCore::MockMediaSourcePrivate *)((char *)this - 160), a2);
  WTF::fastFree(v10, v11);
}

uint64_t WebCore::MockMediaSourcePrivate::addSourceBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  WTF::StringImpl *v7;
  double v8;
  double v9;
  float v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  RefCountedSerialFunctionDispatcher *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  int v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v37;
  uint64_t v38;
  int v39;
  WTF::StringImpl *v41;
  char v42;
  _QWORD v43[5];
  __int16 v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;

  v41 = 0;
  v42 = 0;
  v43[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v43);
  v45 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v44 = 1;
  v11 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v11 += 2;
  v12 = v41;
  v41 = v11;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v7);
    else
      *(_DWORD *)v12 -= 2;
  }
  v42 = *(_BYTE *)(a2 + 8);
  v14 = 1;
  if (WebCore::MockMediaPlayerMediaSource::supportsType((WebCore::MockMediaPlayerMediaSource *)&v41, v7, v8, v9, v10))
  {
    v15 = WTF::fastMalloc((WTF *)0x188);
    v16 = (RefCountedSerialFunctionDispatcher *)WTF::RunLoop::current((WTF::RunLoop *)v15);
    WebCore::SourceBufferPrivate::SourceBufferPrivate((WebCore::SourceBufferPrivate *)v15, (WebCore::MediaSourcePrivate *)a1, v16);
    *(_QWORD *)v15 = off_1E341CD28;
    *(_QWORD *)(v15 + 312) = 0;
    *(_DWORD *)(v15 + 320) = 10000000;
    *(_BYTE *)(v15 + 324) = 1;
    *(_BYTE *)(v15 + 352) = 0;
    *(_QWORD *)(v15 + 360) = 0;
    *(_QWORD *)(v15 + 368) = 0;
    *(_QWORD *)(v15 + 328) = 0;
    *(_QWORD *)(v15 + 336) = 0;
    *(_BYTE *)(v15 + 344) = 0;
    v17 = *(_QWORD *)(a1 + 208);
    v18 = (unsigned int *)(v17 + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 + 1, v18));
    *(_QWORD *)(v15 + 376) = v17;
    v20 = *(_QWORD *)(a1 + 216);
    v21 = *(_QWORD *)(a1 + 224) + 1;
    *(_QWORD *)(a1 + 224) = v21;
    *(_QWORD *)(v15 + 384) = v20 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)v21;
    v22 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v22 == *(_DWORD *)(a1 + 24))
    {
      v23 = v22 + (v22 >> 2);
      if (v23 >= 0x10)
        v24 = v23 + 1;
      else
        v24 = 16;
      if (v24 <= v22 + 1)
        v25 = v22 + 1;
      else
        v25 = v24;
      if (v25 >> 29)
        goto LABEL_48;
      v26 = *(void **)(a1 + 16);
      v27 = (void *)WTF::fastMalloc((WTF *)(8 * v25));
      *(_DWORD *)(a1 + 24) = v25;
      *(_QWORD *)(a1 + 16) = v27;
      memcpy(v27, v26, 8 * v22);
      if (v26)
      {
        if (*(void **)(a1 + 16) == v26)
        {
          *(_QWORD *)(a1 + 16) = 0;
          *(_DWORD *)(a1 + 24) = 0;
        }
        WTF::fastFree((WTF *)v26, v13);
      }
      v22 = *(unsigned int *)(a1 + 28);
      v28 = *(_QWORD *)(a1 + 16);
      v29 = (uint64_t *)(v28 + 8 * v22);
    }
    else
    {
      v28 = *(_QWORD *)(a1 + 16);
      v29 = (uint64_t *)(v28 + 8 * v22);
    }
    *v29 = v15;
    *(_DWORD *)(a1 + 28) = v22 + 1;
    if ((_DWORD)v22 != -1)
    {
      v30 = *(_QWORD *)(v28 + 8 * (v22 + 1) - 8);
      if (!v30)
        goto LABEL_34;
      v31 = *(_QWORD *)(v30 + 8);
      if (__ldaxr((unsigned __int8 *)v31))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v31))
      {
        goto LABEL_29;
      }
      MEMORY[0x19AEA534C](v31);
LABEL_29:
      ++*(_QWORD *)(v31 + 8);
      v33 = __ldxr((unsigned __int8 *)v31);
      if (v33 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v31))
        {
LABEL_34:
          v34 = *a4;
          *a4 = v30;
          if (v34)
          {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v34 + 8));
            v30 = *a4;
          }
          v35 = (unsigned __int8 *)(a1 + 64);
          if (__ldaxr((unsigned __int8 *)(a1 + 64)))
          {
            __clrex();
          }
          else if (!__stxr(1u, v35))
          {
            goto LABEL_40;
          }
          MEMORY[0x19AEA534C](a1 + 64);
LABEL_40:
          v38 = *(_QWORD *)(a1 + 72);
          v37 = *(_QWORD *)(a1 + 80);
          v39 = __ldxr(v35);
          if (v39 == 1)
          {
            if (!__stlxr(0, v35))
              goto LABEL_45;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v35);
LABEL_45:
          v14 = 0;
          *(_QWORD *)(v30 + 256) = v38;
          *(_DWORD *)(v30 + 264) = v37;
          *(_BYTE *)(v30 + 268) = BYTE4(v37);
          goto LABEL_46;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v31);
      goto LABEL_34;
    }
LABEL_48:
    __break(0xC471u);
    JUMPOUT(0x1962DAB2CLL);
  }
LABEL_46:
  WebCore::MediaEngineSupportParameters::~MediaEngineSupportParameters((WebCore::MediaEngineSupportParameters *)&v41, v13);
  return v14;
}

uint64_t WebCore::MockMediaSourcePrivate::player@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(this + 168);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  }
  else
  {
    v4 = 0;
  }
  *a2 = v4;
  return this;
}

unsigned __int8 *WebCore::MockMediaSourcePrivate::durationChanged(WebCore::MockMediaSourcePrivate *this, const WTF::MediaTime *a2)
{
  unsigned __int8 *result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;

  result = (unsigned __int8 *)WebCore::MediaSourcePrivate::durationChanged(this, a2);
  v5 = *((_QWORD *)this + 21);
  if (v5)
  {
    v6 = *(_QWORD **)(v5 + 8);
    if (v6)
    {
      result = (unsigned __int8 *)WTF::MediaTime::compare((WTF::MediaTime *)(v6 + 13), a2);
      if ((_DWORD)result)
      {
        v7 = *(_QWORD *)a2;
        *(_QWORD *)((char *)v6 + 109) = *(_QWORD *)((char *)a2 + 5);
        v6[13] = v7;
        v8 = v6[8];
        if (v8)
        {
          v9 = v6[9];
          if (__ldaxr((unsigned __int8 *)v8))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v8))
          {
            goto LABEL_9;
          }
          result = (unsigned __int8 *)MEMORY[0x19AEA534C](v8);
LABEL_9:
          if (*(_QWORD *)(v8 + 24))
            ++*(_QWORD *)(v8 + 8);
          else
            v9 = 0;
          v11 = __ldxr((unsigned __int8 *)v8);
          if (v11 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v8))
            {
LABEL_17:
              if (v9)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v9 + 8) + 8) + 64))(*(_QWORD *)(*(_QWORD *)(v9 + 8) + 8));
                return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v9);
              }
              return result;
            }
          }
          else
          {
            __clrex();
          }
          result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v8);
          goto LABEL_17;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::MockMediaSourcePrivate::markEndOfStream(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::MediaPlayer *v6;
  int v8;

  v2 = result;
  v3 = *(_QWORD *)(result + 168);
  if (!v3)
    goto LABEL_20;
  if (a2)
    goto LABEL_20;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    goto LABEL_20;
  if (*(_BYTE *)(v4 + 177) == 3)
    goto LABEL_20;
  *(_BYTE *)(v4 + 177) = 3;
  v5 = *(_QWORD *)(v4 + 64);
  if (!v5)
    goto LABEL_20;
  v6 = *(WebCore::MediaPlayer **)(v4 + 72);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_10;
  }
  result = MEMORY[0x19AEA534C](v5);
LABEL_10:
  if (*(_QWORD *)(v5 + 24))
    ++*(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  v8 = __ldxr((unsigned __int8 *)v5);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_17;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_17:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (v6)
  {
    WebCore::MediaPlayer::networkStateChanged(v6);
    result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v6);
  }
LABEL_20:
  atomic_store(1u, (unsigned __int8 *)(v2 + 48));
  return result;
}

uint64_t WebCore::MockMediaSourcePrivate::mediaPlayerReadyState(WebCore::MockMediaSourcePrivate *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 21);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return *(unsigned __int8 *)(v2 + 176);
  else
    return 0;
}

unsigned __int8 *WebCore::MockMediaSourcePrivate::setMediaPlayerReadyState(unsigned __int8 *result, int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)result + 21);
  if (v2)
  {
    result = *(unsigned __int8 **)(v2 + 8);
    if (result)
      return WebCore::MockMediaPlayerMediaSource::setReadyState(result, a2);
  }
  return result;
}

unsigned __int8 *WebCore::MockMediaSourcePrivate::notifyActiveSourceBuffersChanged(unsigned __int8 *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v6;

  v1 = *((_QWORD *)this + 21);
  if (!v1)
    return this;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return this;
  v3 = *(_QWORD *)(v2 + 64);
  if (!v3)
    return this;
  v4 = *(_QWORD *)(v2 + 72);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
LABEL_7:
    this = (unsigned __int8 *)MEMORY[0x19AEA534C](v3);
    goto LABEL_8;
  }
  if (__stxr(1u, (unsigned __int8 *)v3))
    goto LABEL_7;
LABEL_8:
  if (*(_QWORD *)(v3 + 24))
    ++*(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  v6 = __ldxr((unsigned __int8 *)v3);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v4)
        return this;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (v4)
  {
LABEL_14:
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 8) + 8) + 160))(*(_QWORD *)(*(_QWORD *)(v4 + 8)
                                                                                                  + 8));
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v4);
  }
  return this;
}

char *WebCore::MockMediaSourcePrivate::logChannel(WebCore::MockMediaSourcePrivate *this)
{
  return &WebCore::LogMediaSource;
}

char *`non-virtual thunk to'WebCore::MockMediaSourcePrivate::logChannel(WebCore::MockMediaSourcePrivate *this)
{
  return &WebCore::LogMediaSource;
}

uint64_t WebCore::MockMediaSample::flags(WebCore::MockMediaSample *this)
{
  return *((_BYTE *)this + 84) & 1 | (2 * ((*((unsigned __int8 *)this + 84) >> 4) & 1u));
}

uint64_t WebCore::MockMediaSample::platformSample@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 1;
  *(_QWORD *)(a2 + 8) = this + 16;
  return this;
}

uint64_t WebCore::MockMediaSample::dump(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  WTF::printInternal();
  WTF::MediaTime::dump();
  WTF::printInternal();
  WTF::MediaTime::dump();
  WTF::printInternal();
  WTF::MediaTime::dump();
  WTF::printInternal();
  WTF::printInternal();
  WTF::printInternal();
  WTF::printInternal();
  WTF::printInternal();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t WebCore::MockMediaSample::presentationTime(WebCore::MockMediaSample *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t WebCore::MockMediaSample::decodeTime(WebCore::MockMediaSample *this)
{
  return *((_QWORD *)this + 6);
}

uint64_t WebCore::MockMediaSample::duration(WebCore::MockMediaSample *this)
{
  return *((_QWORD *)this + 8);
}

__n128 WebCore::MockMediaSample::createNonDisplayingCopy@<Q0>(WebCore::MockMediaSample *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  _DWORD *v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v4 = WTF::fastMalloc((WTF *)0x60);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E341D060;
  v5 = (_DWORD *)*((_QWORD *)this + 3);
  *(_QWORD *)(v4 + 16) = *((_QWORD *)this + 2);
  if (v5)
    *v5 += 2;
  *(_QWORD *)(v4 + 24) = v5;
  result = *((__n128 *)this + 2);
  v7 = *((_OWORD *)this + 3);
  v8 = *((_OWORD *)this + 4);
  *(_QWORD *)(v4 + 78) = *(_QWORD *)((char *)this + 78);
  *(_OWORD *)(v4 + 48) = v7;
  *(_OWORD *)(v4 + 64) = v8;
  *(__n128 *)(v4 + 32) = result;
  *(_QWORD *)(v4 + 88) = *((int *)this + 20);
  *(_BYTE *)(v4 + 84) |= 0x10u;
  *a2 = v4;
  return result;
}

uint64_t WebCore::MockMediaSourcePrivate::logger(WebCore::MockMediaSourcePrivate *this)
{
  return *((_QWORD *)this + 26);
}

void WebCore::MockSourceBufferPrivate::~MockSourceBufferPrivate(WebCore::MockSourceBufferPrivate *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  uint64_t v8;
  WTF *v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl *v12;

  v3 = (unsigned int *)*((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (WTF *)*((_QWORD *)this + 45);
  if (v7)
  {
    *((_QWORD *)this + 45) = 0;
    *((_DWORD *)this + 92) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *((unsigned int *)this + 85);
  if ((_DWORD)v8)
  {
    v10 = (WTF::StringImpl **)*((_QWORD *)this + 41);
    v11 = 8 * v8;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v12 -= 2;
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  v9 = (WTF *)*((_QWORD *)this + 41);
  if (v9)
  {
    *((_QWORD *)this + 41) = 0;
    *((_DWORD *)this + 84) = 0;
    WTF::fastFree(v9, a2);
  }
  WebCore::SourceBufferPrivate::~SourceBufferPrivate(this, a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::MockSourceBufferPrivate::~MockSourceBufferPrivate(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t *WebCore::MockSourceBufferPrivate::appendInternal@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int *v4;
  unsigned int v5;
  void *v6;
  size_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  WTF *v11;
  unsigned int v12;
  char v13;
  void *v14;
  JSC::ArrayBuffer *v15;
  unint64_t v16;
  WTF *v17;
  const WTF::StringImpl *v18;
  const WTF::StringImpl *v19;
  const WTF::StringImpl *v20;
  WTF *i;
  int v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  _DWORD *v31;
  _DWORD *v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  uint64_t v46;
  _DWORD *v47;
  _DWORD *v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  _DWORD *v54;
  _DWORD *v55;
  unsigned int *v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int *v67;
  unsigned int v68;
  uint64_t v69;
  _DWORD *v70;
  _DWORD *v71;
  unsigned int *v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  _DWORD *v77;
  _DWORD *v78;
  unsigned int *v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int *v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int *v93;
  unsigned int v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int *v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int *v101;
  unsigned int *v102;
  unsigned int v103;
  BOOL v104;
  unsigned int *v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int *v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int *v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int *v119;
  unsigned int v120;
  unsigned int *v121;
  unsigned int *v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int *v125;
  unsigned int v126;
  const WTF::StringImpl *v127;
  void *v128;
  uint64_t v129;
  WTF *v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  WTF::StringImpl *v134;
  unsigned int *v135;
  unsigned int *v136;
  unsigned int v137;
  unsigned int v138;
  WTF *v139;
  void *v140;
  uint64_t v141;
  WTF::StringImpl **v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF *v145;
  WTF::StringImpl *v146;
  char v147;
  uint64_t v148;
  __int128 v149;
  _BYTE *v150;
  WTF::StringImpl *v151;
  uint64_t *result;
  WTF *v153;
  WTF *v154;
  uint64_t v155;
  __int128 v156;
  _BYTE *v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  void *v161;
  void *v162;
  unint64_t v163;
  WTF *v164;
  WebCore::MediaSample *v165;
  WebCore::MediaSample *v166;
  WTF *v168[2];
  __int128 v169;
  __int128 v170;
  _BYTE v171[22];
  WebCore::MediaSample *v172;
  WTF::StringImpl *v173;
  WTF *v174;
  int v175;
  char v176;
  WTF *v177;
  int v178;
  unsigned int v179;
  WTF::StringImpl *v180;
  WTF **v181;
  unsigned int *v182;
  unsigned int *v183;
  uint64_t v184;

  v4 = *a2;
  v5 = atomic_load(*a2);
  if (v5 == 1)
  {
    WebCore::FragmentedSharedBuffer::takeData((WTF *)*a2, v168);
  }
  else
  {
    v168[0] = 0;
    v168[1] = 0;
    v163 = *((_QWORD *)v4 + 6);
    if (v163)
    {
      if (HIDWORD(v163))
      {
        __break(0xC471u);
        goto LABEL_223;
      }
      v164 = (WTF *)WTF::fastMalloc(*((WTF **)v4 + 6));
      LODWORD(v168[1]) = v163;
      v168[0] = v164;
    }
    v165 = (WebCore::MediaSample *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v165 = off_1E3406E88;
    *((_QWORD *)v165 + 1) = v168;
    v172 = v165;
    WebCore::FragmentedSharedBuffer::forEachSegment((uint64_t)v4, &v172);
    v166 = v172;
    v172 = 0;
    if (v166)
      (*(void (**)(WebCore::MediaSample *))(*(_QWORD *)v166 + 8))(v166);
  }
  v7 = *(unsigned int *)(a1 + 372);
  v8 = HIDWORD(v168[1]);
  v9 = HIDWORD(v168[1]) + v7;
  v10 = *(unsigned int *)(a1 + 368);
  if (v9 > v10)
  {
    v158 = v10 + (v10 >> 2);
    if (v158 >= 0x10)
      v159 = v158 + 1;
    else
      v159 = 16;
    if (v159 <= v9)
      v160 = HIDWORD(v168[1]) + v7;
    else
      v160 = v159;
    if (!HIDWORD(v160))
    {
      v161 = *(void **)(a1 + 360);
      v162 = (void *)WTF::fastMalloc((WTF *)v160);
      *(_DWORD *)(a1 + 368) = v160;
      *(_QWORD *)(a1 + 360) = v162;
      memcpy(v162, v161, v7);
      if (v161)
      {
        if (*(void **)(a1 + 360) == v161)
        {
          *(_QWORD *)(a1 + 360) = 0;
          *(_DWORD *)(a1 + 368) = 0;
        }
        WTF::fastFree((WTF *)v161, v6);
      }
      v8 = HIDWORD(v168[1]);
      goto LABEL_4;
    }
    __break(0xC471u);
LABEL_223:
    JUMPOUT(0x1962DBF74);
  }
LABEL_4:
  v11 = v168[0];
  if ((_DWORD)v8)
  {
    v12 = *(_DWORD *)(a1 + 372);
    do
    {
      v13 = *(_BYTE *)v11;
      v11 = (WTF *)((char *)v11 + 1);
      *(_BYTE *)(*(_QWORD *)(a1 + 360) + v12) = v13;
      v12 = *(_DWORD *)(a1 + 372) + 1;
      *(_DWORD *)(a1 + 372) = v12;
      --v8;
    }
    while (v8);
    v11 = v168[0];
  }
  if (v11)
  {
    v168[0] = 0;
    LODWORD(v168[1]) = 0;
    WTF::fastFree(v11, v6);
  }
  v14 = &unk_1EE2F9000;
  while (1)
  {
    if (!*(_DWORD *)(a1 + 372))
      goto LABEL_200;
    JSC::ArrayBuffer::create();
    v16 = WebCore::MockBox::peekLength((WebCore::MockBox *)v181, v15);
    if (*((_BYTE *)v181 + 64) && (v154 = v181[4]) != 0)
      v17 = (WTF *)*((_QWORD *)v154 + 4);
    else
      v17 = v181[6];
    if (v16 > (unint64_t)v17)
      break;
    WebCore::MockBox::peekType((WebCore::MockBox *)v181, &v180);
    {
      v19 = (const WTF::StringImpl *)*((_QWORD *)v14 + 36);
    }
    else
    {
      v19 = (const WTF::StringImpl *)&WebCore::MockInitializationBox::type(void)::$_0::operator() const(void)::impl;
      WebCore::MockInitializationBox::type(void)::$_0::operator() const(void)::impl += 2;
      *((_QWORD *)v14 + 36) = &WebCore::MockInitializationBox::type(void)::$_0::operator() const(void)::impl;
    }
    if (WTF::equal(v180, v19, v18))
    {
      WebCore::MockInitializationBox::MockInitializationBox((WebCore::MockInitializationBox *)&v172, (JSC::ArrayBuffer *)v181);
      v170 = 0u;
      *(_OWORD *)v171 = 0u;
      v169 = 0u;
      v168[0] = v174;
      LODWORD(v168[1]) = v175;
      BYTE4(v168[1]) = v176;
      if (v179)
      {
        for (i = v177; i != (WTF *)((char *)v177 + 40 * v179); i = (WTF *)((char *)i + 40))
        {
          v22 = *((_DWORD *)i + 8);
          if (v22)
          {
            if (v22 == 2)
            {
              v182 = 0;
              v183 = 0;
              v46 = WTF::fastMalloc((WTF *)0x68);
              *(_DWORD *)(v46 + 8) = 1;
              *(_BYTE *)(v46 + 12) = 0;
              *(_QWORD *)(v46 + 24) = 0;
              *(_QWORD *)(v46 + 32) = 0;
              *(_QWORD *)(v46 + 16) = 0;
              *(_WORD *)(v46 + 48) = 1;
              *(_QWORD *)v46 = off_1E341D308;
              *(_QWORD *)(v46 + 56) = *(_QWORD *)i;
              v47 = (_DWORD *)*((_QWORD *)i + 1);
              if (v47)
                *v47 += 2;
              *(_QWORD *)(v46 + 64) = v47;
              v48 = (_DWORD *)*((_QWORD *)i + 3);
              *(_BYTE *)(v46 + 72) = *((_BYTE *)i + 16);
              if (v48)
                *v48 += 2;
              *(_QWORD *)(v46 + 80) = v48;
              *(_DWORD *)(v46 + 88) = *((_DWORD *)i + 8);
              *(_QWORD *)(v46 + 96) = *((unsigned __int8 *)i + 16);
              v49 = v183;
              v183 = (unsigned int *)v46;
              if (v49)
              {
                v50 = v49 + 2;
                do
                {
                  v51 = __ldaxr(v50);
                  v52 = v51 - 1;
                }
                while (__stlxr(v52, v50));
                if (!v52)
                {
                  atomic_store(1u, v49 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
                }
              }
              v53 = WTF::fastMalloc((WTF *)0x40);
              WTF::String::isolatedCopy();
              *(_DWORD *)(v53 + 8) = 1;
              *(_QWORD *)(v53 + 16) = v184;
              *(_QWORD *)v53 = off_1E341D228;
              *(_QWORD *)(v53 + 24) = *(_QWORD *)i;
              v54 = (_DWORD *)*((_QWORD *)i + 1);
              if (v54)
                *v54 += 2;
              *(_QWORD *)(v53 + 32) = v54;
              *(_BYTE *)(v53 + 40) = *((_BYTE *)i + 16);
              v55 = (_DWORD *)*((_QWORD *)i + 3);
              if (v55)
                *v55 += 2;
              *(_QWORD *)(v53 + 48) = v55;
              *(_DWORD *)(v53 + 56) = *((_DWORD *)i + 8);
              v56 = v182;
              v182 = (unsigned int *)v53;
              if (v56)
              {
                v57 = v56 + 2;
                do
                {
                  v58 = __ldaxr(v57);
                  v59 = v58 - 1;
                }
                while (__stlxr(v59, v57));
                if (!v59)
                {
                  atomic_store(1u, v56 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v56 + 8))(v56);
                }
              }
              v60 = *(unsigned int *)&v171[12];
              if (*(_DWORD *)&v171[12] == *(_DWORD *)&v171[8])
              {
                v61 = (uint64_t *)WTF::Vector<WebCore::SourceBufferPrivateClient::InitializationSegment::TextTrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)v171, *(unsigned int *)&v171[12] + 1, (unint64_t)&v182);
                v60 = *(unsigned int *)&v171[12];
                v62 = *(_QWORD *)v171;
                v63 = *v61;
                if (*v61)
                {
                  v64 = (unsigned int *)(v63 + 8);
                  do
                    v65 = __ldaxr(v64);
                  while (__stlxr(v65 + 1, v64));
                }
                *(_QWORD *)(v62 + 16 * v60) = v63;
                v66 = (unsigned int *)v61[1];
                if (v66)
                {
                  v67 = v66 + 2;
                  do
                    v68 = __ldaxr(v67);
                  while (__stlxr(v68 + 1, v67));
                }
              }
              else
              {
                v62 = *(_QWORD *)v171;
                v92 = v182;
                if (v182)
                {
                  v93 = v182 + 2;
                  do
                    v94 = __ldaxr(v93);
                  while (__stlxr(v94 + 1, v93));
                }
                *(_QWORD *)(v62 + 16 * v60) = v92;
                v66 = v183;
                if (v183)
                {
                  v95 = v183 + 2;
                  do
                    v96 = __ldaxr(v95);
                  while (__stlxr(v96 + 1, v95));
                }
              }
              *(_QWORD *)(v62 + 16 * v60 + 8) = v66;
              ++*(_DWORD *)&v171[12];
              v97 = v183;
              v183 = 0;
              if (v97)
              {
                v98 = v97 + 2;
                do
                {
                  v99 = __ldaxr(v98);
                  v100 = v99 - 1;
                }
                while (__stlxr(v100, v98));
                if (!v100)
                {
                  atomic_store(1u, v97 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v97 + 8))(v97);
                }
              }
              v101 = v182;
              v182 = 0;
              if (!v101)
                continue;
              v102 = v101 + 2;
              do
              {
                v103 = __ldaxr(v102);
                v104 = --v103 == 0;
              }
              while (__stlxr(v103, v102));
            }
            else
            {
              if (v22 != 1)
                continue;
              v182 = 0;
              v183 = 0;
              v23 = WTF::fastMalloc((WTF *)0x98);
              *(_DWORD *)(v23 + 8) = 1;
              *(_BYTE *)(v23 + 12) = 0;
              *(_QWORD *)(v23 + 24) = 0;
              *(_QWORD *)(v23 + 32) = 0;
              *(_QWORD *)(v23 + 16) = 0;
              *(_BYTE *)(v23 + 48) = 0;
              *(_OWORD *)(v23 + 56) = 0u;
              *(_OWORD *)(v23 + 72) = 0u;
              *(_OWORD *)(v23 + 88) = 0u;
              *(_QWORD *)v23 = off_1E341D180;
              *(_QWORD *)(v23 + 104) = *(_QWORD *)i;
              v24 = (_DWORD *)*((_QWORD *)i + 1);
              if (v24)
                *v24 += 2;
              *(_QWORD *)(v23 + 112) = v24;
              v25 = (_DWORD *)*((_QWORD *)i + 3);
              *(_BYTE *)(v23 + 120) = *((_BYTE *)i + 16);
              if (v25)
                *v25 += 2;
              *(_QWORD *)(v23 + 128) = v25;
              *(_DWORD *)(v23 + 136) = *((_DWORD *)i + 8);
              *(_QWORD *)(v23 + 144) = *((unsigned __int8 *)i + 16);
              v26 = v183;
              v183 = (unsigned int *)v23;
              if (v26)
              {
                v27 = v26 + 2;
                do
                {
                  v28 = __ldaxr(v27);
                  v29 = v28 - 1;
                }
                while (__stlxr(v29, v27));
                if (!v29)
                {
                  atomic_store(1u, v26 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
                }
              }
              v30 = WTF::fastMalloc((WTF *)0x40);
              WTF::String::isolatedCopy();
              *(_DWORD *)(v30 + 8) = 1;
              *(_QWORD *)(v30 + 16) = v184;
              *(_QWORD *)v30 = off_1E341D228;
              *(_QWORD *)(v30 + 24) = *(_QWORD *)i;
              v31 = (_DWORD *)*((_QWORD *)i + 1);
              if (v31)
                *v31 += 2;
              *(_QWORD *)(v30 + 32) = v31;
              *(_BYTE *)(v30 + 40) = *((_BYTE *)i + 16);
              v32 = (_DWORD *)*((_QWORD *)i + 3);
              if (v32)
                *v32 += 2;
              *(_QWORD *)(v30 + 48) = v32;
              *(_DWORD *)(v30 + 56) = *((_DWORD *)i + 8);
              v33 = v182;
              v182 = (unsigned int *)v30;
              if (v33)
              {
                v34 = v33 + 2;
                do
                {
                  v35 = __ldaxr(v34);
                  v36 = v35 - 1;
                }
                while (__stlxr(v36, v34));
                if (!v36)
                {
                  atomic_store(1u, v33 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
                }
              }
              v37 = HIDWORD(v170);
              if (HIDWORD(v170) == DWORD2(v170))
              {
                v38 = (uint64_t *)WTF::Vector<WebCore::SourceBufferPrivateClient::InitializationSegment::VideoTrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v170, HIDWORD(v170) + 1, (unint64_t)&v182);
                v37 = HIDWORD(v170);
                v39 = v170;
                v40 = *v38;
                if (*v38)
                {
                  v41 = (unsigned int *)(v40 + 8);
                  do
                    v42 = __ldaxr(v41);
                  while (__stlxr(v42 + 1, v41));
                }
                *(_QWORD *)(v39 + 16 * v37) = v40;
                v43 = (unsigned int *)v38[1];
                if (v43)
                {
                  v44 = v43 + 2;
                  do
                    v45 = __ldaxr(v44);
                  while (__stlxr(v45 + 1, v44));
                }
              }
              else
              {
                v39 = v170;
                v116 = v182;
                if (v182)
                {
                  v117 = v182 + 2;
                  do
                    v118 = __ldaxr(v117);
                  while (__stlxr(v118 + 1, v117));
                }
                *(_QWORD *)(v39 + 16 * v37) = v116;
                v43 = v183;
                if (v183)
                {
                  v119 = v183 + 2;
                  do
                    v120 = __ldaxr(v119);
                  while (__stlxr(v120 + 1, v119));
                }
              }
              *(_QWORD *)(v39 + 16 * v37 + 8) = v43;
              ++HIDWORD(v170);
              v121 = v183;
              v183 = 0;
              if (v121)
              {
                v122 = v121 + 2;
                do
                {
                  v123 = __ldaxr(v122);
                  v124 = v123 - 1;
                }
                while (__stlxr(v124, v122));
                if (!v124)
                {
                  atomic_store(1u, v121 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v121 + 8))(v121);
                }
              }
              v101 = v182;
              v182 = 0;
              if (!v101)
                continue;
              v125 = v101 + 2;
              do
              {
                v126 = __ldaxr(v125);
                v104 = --v126 == 0;
              }
              while (__stlxr(v126, v125));
            }
          }
          else
          {
            v182 = 0;
            v183 = 0;
            v69 = WTF::fastMalloc((WTF *)0x88);
            *(_DWORD *)(v69 + 8) = 1;
            *(_BYTE *)(v69 + 12) = 0;
            *(_QWORD *)(v69 + 24) = 0;
            *(_QWORD *)(v69 + 32) = 0;
            *(_QWORD *)(v69 + 16) = 0;
            *(_BYTE *)(v69 + 48) = 0;
            *(_OWORD *)(v69 + 56) = 0u;
            *(_OWORD *)(v69 + 72) = 0u;
            *(_QWORD *)v69 = off_1E341D260;
            *(_QWORD *)(v69 + 88) = *(_QWORD *)i;
            v70 = (_DWORD *)*((_QWORD *)i + 1);
            if (v70)
              *v70 += 2;
            *(_QWORD *)(v69 + 96) = v70;
            v71 = (_DWORD *)*((_QWORD *)i + 3);
            *(_BYTE *)(v69 + 104) = *((_BYTE *)i + 16);
            if (v71)
              *v71 += 2;
            *(_QWORD *)(v69 + 112) = v71;
            *(_DWORD *)(v69 + 120) = *((_DWORD *)i + 8);
            *(_QWORD *)(v69 + 128) = *((unsigned __int8 *)i + 16);
            v72 = v183;
            v183 = (unsigned int *)v69;
            if (v72)
            {
              v73 = v72 + 2;
              do
              {
                v74 = __ldaxr(v73);
                v75 = v74 - 1;
              }
              while (__stlxr(v75, v73));
              if (!v75)
              {
                atomic_store(1u, v72 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v72 + 8))(v72);
              }
            }
            v76 = WTF::fastMalloc((WTF *)0x40);
            WTF::String::isolatedCopy();
            *(_DWORD *)(v76 + 8) = 1;
            *(_QWORD *)(v76 + 16) = v184;
            *(_QWORD *)v76 = off_1E341D228;
            *(_QWORD *)(v76 + 24) = *(_QWORD *)i;
            v77 = (_DWORD *)*((_QWORD *)i + 1);
            if (v77)
              *v77 += 2;
            *(_QWORD *)(v76 + 32) = v77;
            *(_BYTE *)(v76 + 40) = *((_BYTE *)i + 16);
            v78 = (_DWORD *)*((_QWORD *)i + 3);
            if (v78)
              *v78 += 2;
            *(_QWORD *)(v76 + 48) = v78;
            *(_DWORD *)(v76 + 56) = *((_DWORD *)i + 8);
            v79 = v182;
            v182 = (unsigned int *)v76;
            if (v79)
            {
              v80 = v79 + 2;
              do
              {
                v81 = __ldaxr(v80);
                v82 = v81 - 1;
              }
              while (__stlxr(v82, v80));
              if (!v82)
              {
                atomic_store(1u, v79 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v79 + 8))(v79);
              }
            }
            v83 = HIDWORD(v169);
            if (HIDWORD(v169) == DWORD2(v169))
            {
              v84 = (uint64_t *)WTF::Vector<WebCore::SourceBufferPrivateClient::InitializationSegment::VideoTrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v169, HIDWORD(v169) + 1, (unint64_t)&v182);
              v83 = HIDWORD(v169);
              v85 = v169;
              v86 = *v84;
              if (*v84)
              {
                v87 = (unsigned int *)(v86 + 8);
                do
                  v88 = __ldaxr(v87);
                while (__stlxr(v88 + 1, v87));
              }
              *(_QWORD *)(v85 + 16 * v83) = v86;
              v89 = (unsigned int *)v84[1];
              if (v89)
              {
                v90 = v89 + 2;
                do
                  v91 = __ldaxr(v90);
                while (__stlxr(v91 + 1, v90));
              }
            }
            else
            {
              v85 = v169;
              v105 = v182;
              if (v182)
              {
                v106 = v182 + 2;
                do
                  v107 = __ldaxr(v106);
                while (__stlxr(v107 + 1, v106));
              }
              *(_QWORD *)(v85 + 16 * v83) = v105;
              v89 = v183;
              if (v183)
              {
                v108 = v183 + 2;
                do
                  v109 = __ldaxr(v108);
                while (__stlxr(v109 + 1, v108));
              }
            }
            *(_QWORD *)(v85 + 16 * v83 + 8) = v89;
            ++HIDWORD(v169);
            v110 = v183;
            v183 = 0;
            if (v110)
            {
              v111 = v110 + 2;
              do
              {
                v112 = __ldaxr(v111);
                v113 = v112 - 1;
              }
              while (__stlxr(v113, v111));
              if (!v113)
              {
                atomic_store(1u, v110 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v110 + 8))(v110);
              }
            }
            v101 = v182;
            v182 = 0;
            if (!v101)
              continue;
            v114 = v101 + 2;
            do
            {
              v115 = __ldaxr(v114);
              v104 = --v115 == 0;
            }
            while (__stlxr(v115, v114));
          }
          if (v104)
          {
            atomic_store(1u, v101 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v101 + 8))(v101);
          }
        }
      }
      WebCore::SourceBufferPrivate::didReceiveInitializationSegment((WTF::Lock *)a1, (__int128 *)v168);
      WebCore::SourceBufferPrivateClient::InitializationSegment::~InitializationSegment((WebCore::SourceBufferPrivateClient::InitializationSegment *)v168, v140);
      if (v179)
      {
        v141 = 40 * v179;
        v142 = (WTF::StringImpl **)((char *)v177 + 24);
        do
        {
          v143 = *v142;
          *v142 = 0;
          if (v143)
          {
            if (*(_DWORD *)v143 == 2)
              WTF::StringImpl::destroy(v143, v134);
            else
              *(_DWORD *)v143 -= 2;
          }
          v144 = *(v142 - 2);
          *(v142 - 2) = 0;
          if (v144)
          {
            if (*(_DWORD *)v144 == 2)
              WTF::StringImpl::destroy(v144, v134);
            else
              *(_DWORD *)v144 -= 2;
          }
          v142 += 5;
          v141 -= 40;
        }
        while (v141);
      }
      v145 = v177;
      if (v177)
      {
        v177 = 0;
        v178 = 0;
        WTF::fastFree(v145, v134);
      }
      v139 = v173;
      v173 = 0;
      v14 = &unk_1EE2F9000;
      if (!v139)
        goto LABEL_178;
LABEL_176:
      if (*(_DWORD *)v139 == 2)
        WTF::StringImpl::destroy(v139, v134);
      else
        *(_DWORD *)v139 -= 2;
      goto LABEL_178;
    }
    {
      v127 = (const WTF::StringImpl *)WebCore::MockSampleBox::type(void)::smpl;
    }
    else
    {
      v127 = (const WTF::StringImpl *)&WebCore::MockSampleBox::type(void)::$_0::operator() const(void)::impl;
      WebCore::MockSampleBox::type(void)::$_0::operator() const(void)::impl += 2;
      WebCore::MockSampleBox::type(void)::smpl = (uint64_t)&WebCore::MockSampleBox::type(void)::$_0::operator() const(void)::impl;
    }
    if (!WTF::equal(v180, v127, v20))
    {
      if (*(_DWORD *)(a1 + 368))
      {
        if (*(_DWORD *)(a1 + 372))
          *(_DWORD *)(a1 + 372) = 0;
        v153 = *(WTF **)(a1 + 360);
        if (v153)
        {
          *(_QWORD *)(a1 + 360) = 0;
          *(_DWORD *)(a1 + 368) = 0;
          WTF::fastFree(v153, v128);
        }
      }
      LOBYTE(v172) = 5;
      v168[0] = 0;
      v168[1] = 0;
      *(_QWORD *)&v169 = "appendInternal";
      *((_QWORD *)&v169 + 1) = 0;
      v148 = WTF::fastMalloc((WTF *)0x78);
      *(_DWORD *)(v148 + 8) = 1;
      *(_QWORD *)v148 = off_1E3207198;
      v149 = v169;
      *(_OWORD *)(v148 + 16) = *(_OWORD *)v168;
      *(_OWORD *)(v148 + 32) = v149;
      *(_BYTE *)(v148 + 48) = 0;
      *(_DWORD *)(v148 + 64) = 0;
      *(_QWORD *)(v148 + 72) = v148 + 88;
      *(_QWORD *)(v148 + 80) = 1;
      *(_QWORD *)(v148 + 96) = 0;
      *(_QWORD *)(v148 + 104) = 0;
      *(_WORD *)(v148 + 112) = 0;
      v150 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v148);
      if (*v150 && v150[16] >= 4u)
        WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v150, 4u, "creating ", v148);
      *a3 = v148;
      WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(v148, (char *)&v172, (WTF::Logger::LogSiteIdentifier *)v168);
      v147 = 0;
      goto LABEL_184;
    }
    WebCore::MockSampleBox::MockSampleBox((WebCore::MockSampleBox *)v168, v181);
    v129 = WTF::fastMalloc((WTF *)0x60);
    *(_DWORD *)(v129 + 8) = 1;
    *(_QWORD *)v129 = off_1E341D060;
    v130 = v168[1];
    *(WTF **)(v129 + 16) = v168[0];
    if (v130)
      *(_DWORD *)v130 += 2;
    *(_QWORD *)(v129 + 24) = v130;
    v131 = *(_QWORD *)&v171[14];
    v133 = v170;
    v132 = *(_OWORD *)v171;
    *(_OWORD *)(v129 + 32) = v169;
    *(_OWORD *)(v129 + 48) = v133;
    *(_OWORD *)(v129 + 64) = v132;
    *(_QWORD *)(v129 + 78) = v131;
    *(_QWORD *)(v129 + 88) = *(int *)&v171[16];
    v172 = (WebCore::MediaSample *)v129;
    WebCore::SourceBufferPrivate::didReceiveSample(a1, &v172);
    v135 = (unsigned int *)v172;
    v172 = 0;
    if (v135)
    {
      v136 = v135 + 2;
      do
      {
        v137 = __ldaxr(v136);
        v138 = v137 - 1;
      }
      while (__stlxr(v138, v136));
      if (!v138)
      {
        atomic_store(1u, v135 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v135 + 8))(v135);
      }
    }
    v139 = v168[1];
    v168[1] = 0;
    if (v139)
      goto LABEL_176;
LABEL_178:
    memmove(*(void **)(a1 + 360), (const void *)(*(_QWORD *)(a1 + 360) + v16), *(unsigned int *)(a1 + 372) - v16);
    *(_DWORD *)(a1 + 372) -= v16;
    v147 = 1;
LABEL_184:
    v151 = v180;
    v180 = 0;
    if (v151)
    {
      if (*(_DWORD *)v151 == 2)
        WTF::StringImpl::destroy(v151, v146);
      else
        *(_DWORD *)v151 -= 2;
    }
    result = WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((uint64_t *)&v181);
    if ((v147 & 1) == 0)
      return result;
  }
  WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((uint64_t *)&v181);
LABEL_200:
  v168[0] = 0;
  v168[1] = 0;
  *(_QWORD *)&v169 = "appendInternal";
  *((_QWORD *)&v169 + 1) = 0;
  v155 = WTF::fastMalloc((WTF *)0x78);
  *(_DWORD *)(v155 + 8) = 1;
  *(_QWORD *)v155 = off_1E3207198;
  v156 = v169;
  *(_OWORD *)(v155 + 16) = *(_OWORD *)v168;
  *(_OWORD *)(v155 + 32) = v156;
  *(_BYTE *)(v155 + 48) = 0;
  *(_DWORD *)(v155 + 64) = 0;
  *(_QWORD *)(v155 + 72) = v155 + 88;
  *(_QWORD *)(v155 + 80) = 1;
  *(_QWORD *)(v155 + 96) = 0;
  *(_QWORD *)(v155 + 104) = 0;
  *(_WORD *)(v155 + 112) = 0;
  v157 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v155);
  if (*v157 && v157[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v157, 4u, "creating ", v155);
  *a3 = v155;
  return (uint64_t *)WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::resolve<std::enable_if<true,void>>(v155, (WTF::Logger::LogSiteIdentifier *)v168);
}

unsigned int *WebCore::MockSourceBufferPrivate::enqueuedSamplesForTrackID@<X0>(unsigned int *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  _BYTE *v14;
  WTF::StringImpl *v15;
  WTF *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  __int128 v19;
  __int128 v20;
  WTF *v21;
  uint64_t v22;

  v21 = 0;
  v22 = 0;
  v3 = this[85];
  if ((_DWORD)v3)
  {
    if (v3 >> 29)
    {
      __break(0xC471u);
      return this;
    }
    v4 = this;
    v5 = (WTF *)WTF::fastMalloc((WTF *)(8 * v3));
    LODWORD(v22) = v3;
    v21 = v5;
    v6 = v4[85];
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = *((_QWORD *)v4 + 41);
      v9 = 8 * v6;
      do
      {
        v10 = *(_DWORD **)(v8 + 8 * v7);
        if (v10)
          *v10 += 2;
        v11 = v7 + 1;
        *((_QWORD *)v5 + v7++) = v10;
        v9 -= 8;
      }
      while (v9);
      HIDWORD(v22) = v11;
    }
  }
  v19 = 0uLL;
  *(_QWORD *)&v20 = "enqueuedSamplesForTrackID";
  *((_QWORD *)&v20 + 1) = 0;
  v12 = WTF::fastMalloc((WTF *)0x88);
  *(_DWORD *)(v12 + 8) = 1;
  *(_QWORD *)v12 = off_1E340FC80;
  v13 = v20;
  *(_OWORD *)(v12 + 16) = v19;
  *(_OWORD *)(v12 + 32) = v13;
  *(_BYTE *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  *(_QWORD *)(v12 + 88) = v12 + 104;
  *(_QWORD *)(v12 + 96) = 1;
  *(_QWORD *)(v12 + 112) = 0;
  *(_QWORD *)(v12 + 120) = 0;
  *(_WORD *)(v12 + 128) = 0;
  v14 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v12);
  if (*v14 && v14[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v14, 4u, "creating ", v12);
  *a2 = v12;
  WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::resolve<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::enable_if<true,void>>(v12, (uint64_t)&v21, (WTF::Logger::LogSiteIdentifier *)&v19);
  if (HIDWORD(v22))
  {
    v16 = v21;
    v17 = 8 * HIDWORD(v22);
    do
    {
      v18 = *(WTF::StringImpl **)v16;
      *(_QWORD *)v16 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v15);
        else
          *(_DWORD *)v18 -= 2;
      }
      v16 = (WTF *)((char *)v16 + 8);
      v17 -= 8;
    }
    while (v17);
  }
  this = (unsigned int *)v21;
  if (v21)
  {
    v21 = 0;
    LODWORD(v22) = 0;
    return (unsigned int *)WTF::fastFree((WTF *)this, v15);
  }
  return this;
}

uint64_t WebCore::MockSourceBufferPrivate::minimumUpcomingPresentationTimeForTrackID(WebCore::MockSourceBufferPrivate *this)
{
  return *((_QWORD *)this + 39);
}

uint64_t WebCore::MockSourceBufferPrivate::setMaximumQueueDepthForTrackID(uint64_t this, unint64_t a2, uint64_t a3)
{
  *(_QWORD *)(this + 344) = a3;
  *(_BYTE *)(this + 352) = 1;
  return this;
}

uint64_t WebCore::MockSourceBufferPrivate::canSetMinimumUpcomingPresentationTime(WebCore::MockSourceBufferPrivate *this)
{
  return 1;
}

uint64_t WebCore::MockSourceBufferPrivate::setMinimumUpcomingPresentationTime(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *(_QWORD *)(result + 317) = *(uint64_t *)((char *)a3 + 5);
  *(_QWORD *)(result + 312) = v3;
  return result;
}

_QWORD *WebCore::MockSourceBufferPrivate::clearMinimumUpcomingPresentationTime(WebCore::MockSourceBufferPrivate *this)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)WTF::MediaTime::invalidTime(this);
  v3 = *(_QWORD *)((char *)result + 5);
  *((_QWORD *)this + 39) = *result;
  *(_QWORD *)((char *)this + 317) = v3;
  return result;
}

BOOL WebCore::MockSourceBufferPrivate::canSwitchToType(WebCore::MockSourceBufferPrivate *this, WTF::StringImpl **a2)
{
  WTF::StringImpl *v3;
  double v4;
  double v5;
  float v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _BOOL8 v9;
  void *v10;
  WTF::StringImpl *v12;
  char v13;
  _QWORD v14[5];
  __int16 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;

  v12 = 0;
  v13 = 0;
  v14[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v14);
  v16 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v15 = 1;
  v7 = *a2;
  if (*a2)
    *(_DWORD *)v7 += 2;
  v8 = v12;
  v12 = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v3);
    else
      *(_DWORD *)v8 -= 2;
  }
  v13 = *((_BYTE *)a2 + 8);
  v9 = WebCore::MockMediaPlayerMediaSource::supportsType((WebCore::MockMediaPlayerMediaSource *)&v12, v3, v4, v5, v6) != 0;
  WebCore::MediaEngineSupportParameters::~MediaEngineSupportParameters((WebCore::MediaEngineSupportParameters *)&v12, v10);
  return v9;
}

WTF::StringImpl *WebCore::MockSourceBufferPrivate::enqueueSample(WTF::StringImpl *result, uint64_t *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  uint64_t v5;
  int v7;
  void *v8;
  uint64_t v9;
  WTF::StringImpl *v11;
  uint64_t v12;
  char v13;
  int v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  int v32;
  WTF::StringImpl **v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)result + 2);
  if (!v2)
    return result;
  v4 = result;
  v5 = *((_QWORD *)result + 3);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  result = (WTF::StringImpl *)MEMORY[0x19AEA534C](v2);
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v5 = 0;
  v7 = __ldxr((unsigned __int8 *)v2);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v5)
        return result;
      goto LABEL_15;
    }
  }
  else
  {
    __clrex();
  }
  result = (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (!v5)
    return result;
LABEL_15:
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  if ((_DWORD)result)
  {
    v9 = *(_QWORD *)(v5 + 8);
    if (__ldaxr((unsigned __int8 *)v9))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v9))
    {
      goto LABEL_33;
    }
    result = (WTF::StringImpl *)MEMORY[0x19AEA534C](v9);
LABEL_33:
    v23 = *(_QWORD *)(v9 + 8);
    v24 = v23 - 1;
    *(_QWORD *)(v9 + 8) = v23 - 1;
    if (v23 == 1)
    {
      v34 = *(_QWORD *)(v9 + 16);
      v25 = *(_QWORD *)(v9 + 24);
      *(_QWORD *)(v9 + 24) = 0;
      v26 = v34 != 0;
    }
    else
    {
      v25 = 0;
      v26 = 1;
    }
    v27 = __ldxr((unsigned __int8 *)v9);
    if (v27 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v9))
      {
        if (v24)
          return result;
LABEL_41:
        if (v25)
          result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
        if (!v26)
          return (WTF::StringImpl *)WTF::fastFree((WTF *)v9, v8);
        return result;
      }
    }
    else
    {
      __clrex();
    }
    result = (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)v9);
    if (v24)
      return result;
    goto LABEL_41;
  }
  result = (WTF::StringImpl *)(*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)*a2 + 112))(&v37);
  if ((_DWORD)v37 == 1)
  {
    v12 = v38;
    if (v38)
    {
      ++*(_DWORD *)(v5 + 176);
      v13 = *(_BYTE *)(v12 + 68);
      if ((v13 & 2) != 0)
      {
        ++*(_DWORD *)(v5 + 184);
        if ((v13 & 4) == 0)
        {
LABEL_22:
          if ((v13 & 8) == 0)
            goto LABEL_24;
          goto LABEL_23;
        }
      }
      else if ((v13 & 4) == 0)
      {
        goto LABEL_22;
      }
      ++*(_DWORD *)(v5 + 180);
      if ((v13 & 8) == 0)
      {
LABEL_24:
        v16 = *a2;
        WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)&v39);
        v17 = (*(uint64_t (**)(uint64_t *))(v39 + 32))(&v39);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 136))(v16, v17);
        (*(void (**)(uint64_t *))(v39 + 40))(&v39);
        WTF::StringPrintStream::toString((WTF::StringPrintStream *)&v39);
        WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)&v39);
        v18 = *((unsigned int *)v4 + 85);
        if ((_DWORD)v18 == *((_DWORD *)v4 + 84))
        {
          v33 = (WTF::StringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v4 + 328, v18 + 1, (unint64_t)&v36);
          v18 = *((unsigned int *)v4 + 85);
          v19 = *((_QWORD *)v4 + 41);
          v20 = *v33;
          *v33 = 0;
        }
        else
        {
          v19 = *((_QWORD *)v4 + 41);
          v20 = v36;
          v36 = 0;
        }
        *(_QWORD *)(v19 + 8 * v18) = v20;
        *((_DWORD *)v4 + 85) = v18 + 1;
        result = v36;
        v36 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
          else
            *(_DWORD *)result -= 2;
        }
        goto LABEL_29;
      }
LABEL_23:
      v39 = 1;
      v40 = 1;
      v41 = 1;
      *(_QWORD *)(v5 + 192) = WTF::MediaTime::operator+();
      *(_DWORD *)(v5 + 200) = v14;
      *(_BYTE *)(v5 + 204) = v15;
      goto LABEL_24;
    }
  }
LABEL_29:
  v21 = *(_QWORD *)(v5 + 8);
  if (__ldaxr((unsigned __int8 *)v21))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v21))
  {
    goto LABEL_47;
  }
  result = (WTF::StringImpl *)MEMORY[0x19AEA534C](v21);
LABEL_47:
  v28 = *(_QWORD *)(v21 + 8);
  v29 = v28 - 1;
  *(_QWORD *)(v21 + 8) = v28 - 1;
  if (v28 == 1)
  {
    v35 = *(_QWORD *)(v21 + 16);
    v30 = *(_QWORD *)(v21 + 24);
    *(_QWORD *)(v21 + 24) = 0;
    v31 = v35 != 0;
  }
  else
  {
    v30 = 0;
    v31 = 1;
  }
  v32 = __ldxr((unsigned __int8 *)v21);
  if (v32 != 1)
  {
    __clrex();
    goto LABEL_53;
  }
  if (__stlxr(0, (unsigned __int8 *)v21))
LABEL_53:
    result = (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)v21);
  if (!v29)
  {
    if (v30)
      result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    if (!v31)
      return (WTF::StringImpl *)WTF::fastFree((WTF *)v21, v11);
  }
  return result;
}

char *WebCore::MockSourceBufferPrivate::logChannel(WebCore::MockSourceBufferPrivate *this)
{
  return &WebCore::LogMediaSource;
}

WebCore::AuthenticationChallengeBase *WebCore::AuthenticationChallengeBase::AuthenticationChallengeBase(WebCore::AuthenticationChallengeBase *this)
{
  _DWORD *v2;
  char v3;
  int64x2_t v4;

  *(_BYTE *)this = 1;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)((char *)this + 23) = 0;
  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 4;
  *((_QWORD *)this + 1) = v2;
  *((_QWORD *)this + 2) = v2;
  *((_DWORD *)this + 6) = 0;
  *((_WORD *)this + 14) = 257;
  *((_BYTE *)this + 30) = 0;
  *((_QWORD *)this + 4) = 0;
  if (v2)
    *v2 += 4;
  *((_QWORD *)this + 5) = v2;
  *((_QWORD *)this + 6) = v2;
  *((_BYTE *)this + 56) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *((_QWORD *)this + 10) = 0;
  WTF::URL::invalidate((WebCore::AuthenticationChallengeBase *)((char *)this + 80));
  *((_BYTE *)this + 208) = 0;
  *((_WORD *)this + 108) = 0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_BYTE *)this + 200) = 0;
  v3 = *((_BYTE *)this + 218);
  v4 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((int64x2_t *)this + 14) = v4;
  *((int64x2_t *)this + 15) = v4;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0x8000000000000000;
  *((_QWORD *)this + 35) = 0x7FF8000000000000;
  *((int64x2_t *)this + 18) = v4;
  *((_BYTE *)this + 304) &= 0xF0u;
  *((_WORD *)this + 156) &= 0xC000u;
  *((_BYTE *)this + 314) = *((_BYTE *)this + 314) & 0xF8 | 2;
  *((_QWORD *)this + 40) = 0;
  *((_BYTE *)this + 328) = 0;
  *((_BYTE *)this + 218) = v3 & 0xC0 | 5;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 43) = 0;
  WTF::URL::invalidate((WebCore::AuthenticationChallengeBase *)((char *)this + 344));
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 48) = 0;
  *(_QWORD *)((char *)this + 390) = 0;
  *((_BYTE *)this + 408) = 1;
  return this;
}

{
  _DWORD *v2;
  char v3;
  int64x2_t v4;

  *(_BYTE *)this = 1;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)((char *)this + 23) = 0;
  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 4;
  *((_QWORD *)this + 1) = v2;
  *((_QWORD *)this + 2) = v2;
  *((_DWORD *)this + 6) = 0;
  *((_WORD *)this + 14) = 257;
  *((_BYTE *)this + 30) = 0;
  *((_QWORD *)this + 4) = 0;
  if (v2)
    *v2 += 4;
  *((_QWORD *)this + 5) = v2;
  *((_QWORD *)this + 6) = v2;
  *((_BYTE *)this + 56) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *((_QWORD *)this + 10) = 0;
  WTF::URL::invalidate((WebCore::AuthenticationChallengeBase *)((char *)this + 80));
  *((_BYTE *)this + 208) = 0;
  *((_WORD *)this + 108) = 0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_BYTE *)this + 200) = 0;
  v3 = *((_BYTE *)this + 218);
  v4 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((int64x2_t *)this + 14) = v4;
  *((int64x2_t *)this + 15) = v4;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0x8000000000000000;
  *((_QWORD *)this + 35) = 0x7FF8000000000000;
  *((int64x2_t *)this + 18) = v4;
  *((_BYTE *)this + 304) &= 0xF0u;
  *((_WORD *)this + 156) &= 0xC000u;
  *((_BYTE *)this + 314) = *((_BYTE *)this + 314) & 0xF8 | 2;
  *((_QWORD *)this + 40) = 0;
  *((_BYTE *)this + 328) = 0;
  *((_BYTE *)this + 218) = v3 & 0xC0 | 5;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 43) = 0;
  WTF::URL::invalidate((WebCore::AuthenticationChallengeBase *)((char *)this + 344));
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 48) = 0;
  *(_QWORD *)((char *)this + 390) = 0;
  *((_BYTE *)this + 408) = 1;
  return this;
}

uint64_t WebCore::AuthenticationChallengeBase::isNull(WebCore::AuthenticationChallengeBase *this)
{
  return *(unsigned __int8 *)this;
}

_BYTE *WebCore::AuthenticationChallengeBase::nullify(_BYTE *this)
{
  *this = 1;
  return this;
}

uint64_t WebCore::AuthenticationChallengeBase::equalForWebKitLegacyChallengeComparison(WTF **this, const WTF::StringImpl **a2, const WebCore::AuthenticationChallenge *a3)
{
  uint64_t result;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  const WebCore::ResourceResponse *v8;
  void *v9;
  const WebCore::ResourceError *v10;

  if (*(_BYTE *)this)
    return *(unsigned __int8 *)a2 != 0;
  if (*(_BYTE *)a2)
    return 0;
  result = WebCore::ProtectionSpaceBase::compare(this + 1, a2 + 1, a3);
  if ((_DWORD)result)
  {
    if (*((unsigned __int8 *)this + 56) != *((unsigned __int8 *)a2 + 56))
      return 0;
    result = WTF::equal(this[5], a2[5], v6);
    if (!(_DWORD)result)
      return result;
    result = WTF::equal(this[6], a2[6], v7);
    if (!(_DWORD)result)
      return result;
    if ((unint64_t)this[8] | (unint64_t)a2[8])
    {
      v9 = (void *)WebCore::Credential::nsCredential((WebCore::Credential *)(this + 5));
      result = objc_msgSend(v9, "isEqual:", WebCore::Credential::nsCredential((WebCore::Credential *)(a2 + 5)));
      if (!(_DWORD)result)
        return result;
    }
    if (*((_DWORD *)this + 18) != *((_DWORD *)a2 + 18))
      return 0;
    result = WebCore::ResourceResponseBase::equalForWebKitLegacyChallengeComparison(this + 10, a2 + 10, v8);
    if ((_DWORD)result)
    {
      result = WebCore::ResourceErrorBase::compare(this + 42, a2 + 42, v10);
      if ((_DWORD)result)
        return this[52] == a2[52] && this[53] == a2[53];
    }
  }
  return result;
}

uint64_t WebCore::BlobDataItem::length(WebCore::BlobDataItem *this)
{
  uint64_t result;
  uint64_t v3;

  result = *((_QWORD *)this + 4);
  if (result == -1)
  {
    if (*(_DWORD *)this == 1)
    {
      v3 = *((_QWORD *)this + 2);
      if (*(_BYTE *)(v3 + 32))
        WebCore::BlobDataFileReference::generateReplacementFile((WTF::StringImpl **)v3);
      return *(_QWORD *)(v3 + 40);
    }
    else
    {
      return -1;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::BlobDataFileReference::size(WTF::StringImpl **this)
{
  if (*((_BYTE *)this + 32))
    WebCore::BlobDataFileReference::generateReplacementFile(this);
  return this[5];
}

uint64_t WebCore::BlobData::appendData(uint64_t result, WTF **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  WTF *v17;
  uint64_t v18;
  __int128 v19;
  char v20;

  v4 = result;
  v16 = 0;
  v5 = *a2;
  *a2 = 0;
  v17 = v5;
  v18 = 0;
  *(_QWORD *)&v19 = a3;
  *((_QWORD *)&v19 + 1) = a4;
  v6 = *(unsigned int *)(result + 108);
  if ((_DWORD)v6 == *(_DWORD *)(result + 104))
  {
    v7 = WTF::Vector<WebCore::BlobDataItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result + 96, v6 + 1, (unint64_t)&v16);
    v8 = *(_QWORD *)(v4 + 96) + 40 * *(unsigned int *)(v4 + 108);
    *(_DWORD *)v8 = *(_DWORD *)v7;
    v9 = *(_QWORD *)(v7 + 8);
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v8 + 8) = v9;
    v10 = *(_QWORD *)(v7 + 16);
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(v8 + 16) = v10;
    *(_OWORD *)(v8 + 24) = *(_OWORD *)(v7 + 24);
    result = v18;
    ++*(_DWORD *)(v4 + 108);
    v18 = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 8) == 1)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      else
        --*(_DWORD *)(result + 8);
    }
  }
  else
  {
    v14 = *(_QWORD *)(result + 96) + 40 * v6;
    *(_DWORD *)v14 = 0;
    v17 = 0;
    *(_QWORD *)(v14 + 8) = v5;
    *(_QWORD *)(v14 + 16) = 0;
    *(_OWORD *)(v14 + 24) = v19;
    ++*(_DWORD *)(result + 108);
    v18 = 0;
  }
  v11 = (unsigned int *)v17;
  v17 = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      v15 = v11[6];
      if ((_DWORD)v15 != -1)
        ((void (*)(char *, unsigned int *))off_1E341D4C8[v15])(&v20, v11 + 2);
      v11[6] = -1;
      return WTF::fastFree((WTF *)v11, a2);
    }
  }
  return result;
}

void WebCore::BlobDataItem::~BlobDataItem(WebCore::BlobDataItem *this, void *a2)
{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;

  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v7 = v4[6];
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, unsigned int *))off_1E341D4C8[v7])(&v8, v4 + 2);
      v4[6] = -1;
      WTF::fastFree((WTF *)v4, a2);
    }
  }
}

_DWORD *WebCore::BlobData::appendFile(uint64_t a1, const WTF::String *a2)
{
  uint64_t v4;
  WebCore::File *v5;
  const WTF::String *v6;
  _DWORD *result;
  const WTF::String *v8;
  WTF::FileSystemImpl *v9;
  _DWORD *v10;
  unsigned int v11;
  __n128 v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  WTF *v19;
  _DWORD *v20;
  __int128 v21;
  char v22;

  v4 = *(_QWORD *)a2;
  v5 = (WebCore::File *)(*(_QWORD *)a2 + 16);
  *(_BYTE *)(v4 + 32) = WebCore::File::shouldReplaceFile(v5, a2);
  result = (_DWORD *)WTF::FileSystemImpl::fileModificationTime(v5, v6);
  if ((_BYTE)v8)
  {
    *(_QWORD *)(v4 + 48) = result;
    if (!*(_BYTE *)(v4 + 32))
    {
      v9 = *(_QWORD *)(v4 + 24) ? (WTF::FileSystemImpl *)(v4 + 24) : v5;
      result = (_DWORD *)WTF::FileSystemImpl::fileSize(v9, v8);
      if ((_BYTE)v8)
        *(_QWORD *)(v4 + 40) = result;
    }
  }
  v18 = 1;
  v10 = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  v19 = 0;
  v20 = v10;
  v21 = xmmword_1968C18F0;
  v11 = *(_DWORD *)(a1 + 108);
  if (v11 == *(_DWORD *)(a1 + 104))
  {
    v12 = WTF::Vector<WebCore::BlobDataItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::BlobDataItem>(a1 + 96, (unint64_t)&v18);
    result = v20;
    v20 = 0;
    if (result)
    {
      if (result[2] == 1)
        result = (_DWORD *)(*(uint64_t (**)(_DWORD *, __n128))(*(_QWORD *)result + 8))(result, v12);
      else
        --result[2];
    }
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 96) + 40 * v11;
    *(_DWORD *)v16 = 1;
    v19 = 0;
    *(_QWORD *)(v16 + 8) = 0;
    *(_QWORD *)(v16 + 16) = v10;
    v12 = (__n128)v21;
    *(_OWORD *)(v16 + 24) = v21;
    ++*(_DWORD *)(a1 + 108);
    v20 = 0;
  }
  v13 = (unsigned int *)v19;
  v19 = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      v17 = v13[6];
      if ((_DWORD)v17 != -1)
        ((void (*)(char *, unsigned int *, __n128))off_1E341D4C8[v17])(&v22, v13 + 2, v12);
      v13[6] = -1;
      return (_DWORD *)WTF::fastFree((WTF *)v13, v8);
    }
  }
  return result;
}

uint64_t WebCore::BlobDataFileReference::startTrackingModifications(WebCore::BlobDataFileReference *this, const WTF::String *a2)
{
  WTF::FileSystemImpl *v3;
  const WTF::String *v4;
  uint64_t result;
  const WTF::String *v6;
  WTF::FileSystemImpl *v7;
  char v8;

  v3 = (WebCore::BlobDataFileReference *)((char *)this + 16);
  *((_BYTE *)this + 32) = WebCore::File::shouldReplaceFile((WebCore::BlobDataFileReference *)((char *)this + 16), a2);
  result = WTF::FileSystemImpl::fileModificationTime(v3, v4);
  if ((_BYTE)v6)
  {
    *((_QWORD *)this + 6) = result;
    if (!*((_BYTE *)this + 32))
    {
      if (*((_QWORD *)this + 3))
        v7 = (WebCore::BlobDataFileReference *)((char *)this + 24);
      else
        v7 = v3;
      result = WTF::FileSystemImpl::fileSize(v7, v6);
      if (v8)
        *((_QWORD *)this + 5) = result;
    }
  }
  return result;
}

_DWORD *WebCore::BlobData::clone(WebCore::BlobData *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  WTF **v7;
  _DWORD *result;
  void *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  WTF *v19;
  uint64_t v20;
  _DWORD *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;

  v4 = WTF::fastMalloc((WTF *)0x70);
  v5 = v4;
  *(_DWORD *)v4 = 1;
  v6 = *(_DWORD **)(a2 + 8);
  if (v6)
    *v6 += 2;
  *(_QWORD *)(v4 + 8) = v6;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 29) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_WORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_WORD *)(v4 + 64) = 0;
  *(_BYTE *)(v4 + 88) = 7;
  *(_QWORD *)(v4 + 96) = 0;
  v7 = (WTF **)(v4 + 96);
  *(_QWORD *)this = v4;
  *(_QWORD *)(v4 + 104) = 0;
  result = (_DWORD *)WebCore::PolicyContainer::operator=(v4 + 16, a2 + 16);
  if (v5 != a2)
  {
    v10 = *(_DWORD *)(v5 + 108);
    v11 = *(_DWORD *)(a2 + 108);
    if (v10 <= v11)
    {
      v18 = *(_DWORD *)(v5 + 104);
      if (v11 <= v18)
      {
        v11 = *(_DWORD *)(v5 + 108);
      }
      else
      {
        if (v18)
        {
          if (v10)
          {
            v19 = *v7;
            v20 = (uint64_t)*v7 + 40 * v10;
            do
            {
              v21 = (_DWORD *)*((_QWORD *)v19 + 2);
              *((_QWORD *)v19 + 2) = 0;
              if (v21)
              {
                if (v21[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
                else
                  --v21[2];
              }
              v22 = (unsigned int *)*((_QWORD *)v19 + 1);
              *((_QWORD *)v19 + 1) = 0;
              if (v22)
              {
                do
                {
                  v23 = __ldaxr(v22);
                  v24 = v23 - 1;
                }
                while (__stlxr(v24, v22));
                if (!v24)
                {
                  atomic_store(1u, v22);
                  v25 = v22[6];
                  if ((_DWORD)v25 != -1)
                    ((void (*)(char *, unsigned int *))off_1E341D4C8[v25])(&v46, v22 + 2);
                  v22[6] = -1;
                  WTF::fastFree((WTF *)v22, v9);
                }
              }
              v19 = (WTF *)((char *)v19 + 40);
            }
            while (v19 != (WTF *)v20);
            *(_DWORD *)(v5 + 108) = 0;
          }
          v26 = *v7;
          if (*v7)
          {
            *(_QWORD *)(v5 + 96) = 0;
            *(_DWORD *)(v5 + 104) = 0;
            WTF::fastFree(v26, v9);
          }
        }
        result = (_DWORD *)WTF::Vector<WebCore::BlobDataItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v5 + 96, *(unsigned int *)(a2 + 108));
        v11 = *(_DWORD *)(v5 + 108);
      }
    }
    else
    {
      v12 = (uint64_t)*v7 + 40 * v10;
      v13 = (uint64_t)*v7 + 40 * v11;
      do
      {
        result = *(_DWORD **)(v13 + 16);
        *(_QWORD *)(v13 + 16) = 0;
        if (result)
        {
          if (result[2] == 1)
            result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
          else
            --result[2];
        }
        v14 = *(unsigned int **)(v13 + 8);
        *(_QWORD *)(v13 + 8) = 0;
        if (v14)
        {
          do
          {
            v15 = __ldaxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (!v16)
          {
            atomic_store(1u, v14);
            v17 = v14[6];
            if ((_DWORD)v17 != -1)
              ((void (*)(char *, unsigned int *))off_1E341D4C8[v17])(&v45, v14 + 2);
            v14[6] = -1;
            result = (_DWORD *)WTF::fastFree((WTF *)v14, v9);
          }
        }
        v13 += 40;
      }
      while (v13 != v12);
      *(_DWORD *)(v5 + 108) = v11;
    }
    v27 = *(_QWORD *)(a2 + 96);
    if (v11)
    {
      v28 = v27 + 40 * v11;
      v29 = *v7;
      do
      {
        *(_DWORD *)v29 = *(_DWORD *)v27;
        v30 = *(unsigned int **)(v27 + 8);
        if (v30)
        {
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 + 1, v30));
        }
        v32 = (unsigned int *)*((_QWORD *)v29 + 1);
        *((_QWORD *)v29 + 1) = v30;
        if (v32)
        {
          do
          {
            v33 = __ldaxr(v32);
            v34 = v33 - 1;
          }
          while (__stlxr(v34, v32));
          if (!v34)
          {
            atomic_store(1u, v32);
            v36 = v32[6];
            if ((_DWORD)v36 != -1)
              ((void (*)(char *, unsigned int *))off_1E341D4C8[v36])(&v47, v32 + 2);
            v32[6] = -1;
            WTF::fastFree((WTF *)v32, v9);
          }
        }
        v35 = *(_QWORD *)(v27 + 16);
        if (v35)
          ++*(_DWORD *)(v35 + 8);
        result = (_DWORD *)*((_QWORD *)v29 + 2);
        *((_QWORD *)v29 + 2) = v35;
        if (result)
        {
          if (result[2] == 1)
            result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
          else
            --result[2];
        }
        *(_OWORD *)((char *)v29 + 24) = *(_OWORD *)(v27 + 24);
        v27 += 40;
        v29 = (WTF *)((char *)v29 + 40);
      }
      while (v27 != v28);
      v27 = *(_QWORD *)(a2 + 96);
      v37 = *(_DWORD *)(v5 + 108);
    }
    else
    {
      v37 = 0;
    }
    v38 = *(_DWORD *)(a2 + 108);
    if (v37 != v38)
    {
      v39 = v27 + 40 * v38;
      v40 = (uint64_t)*v7 + 40 * v37;
      v41 = v27 + 40 * v37;
      do
      {
        *(_DWORD *)v40 = *(_DWORD *)v41;
        v42 = *(unsigned int **)(v41 + 8);
        if (v42)
        {
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 + 1, v42));
        }
        *(_QWORD *)(v40 + 8) = v42;
        v44 = *(_QWORD *)(v41 + 16);
        if (v44)
          ++*(_DWORD *)(v44 + 8);
        *(_QWORD *)(v40 + 16) = v44;
        *(_OWORD *)(v40 + 24) = *(_OWORD *)(v41 + 24);
        v40 += 40;
        v41 += 40;
      }
      while (v41 != v39);
      v37 = *(_DWORD *)(a2 + 108);
    }
    *(_DWORD *)(v5 + 108) = v37;
  }
  return result;
}

uint64_t WebCore::BlobData::create(WebCore::BlobData *this, const WTF::String *a2)
{
  uint64_t result;
  _DWORD *v5;

  result = WTF::fastMalloc((WTF *)0x70);
  *(_DWORD *)result = 1;
  v5 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v5 += 2;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 8) = v5;
  *(_QWORD *)(result + 29) = 0;
  *(_WORD *)(result + 40) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_WORD *)(result + 64) = 0;
  *(_BYTE *)(result + 88) = 7;
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)this = result;
  return result;
}

unsigned int **WTF::Ref<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>::~Ref(unsigned int **result, void *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF *v7;
  WTF::StringImpl *v8;
  unsigned int **v9;
  WTF *v10;

  v2 = *result;
  *result = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      v9 = result;
      v10 = (WTF *)v2;
      atomic_store(1u, v2);
      WTF::Vector<WebCore::BlobDataItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v2 + 24), a2);
      WebCore::PolicyContainer::~PolicyContainer((WTF *)((char *)v10 + 16), v5);
      v7 = v10;
      v8 = (WTF::StringImpl *)*((_QWORD *)v10 + 1);
      *((_QWORD *)v10 + 1) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
        {
          WTF::StringImpl::destroy(v8, v6);
          v7 = v10;
        }
        else
        {
          *(_DWORD *)v8 -= 2;
        }
      }
      WTF::fastFree(v7, v6);
      return v9;
    }
  }
  return result;
}

WebCore::BlobDataFileReference *WebCore::BlobData::appendFile(WebCore::BlobDataFileReference *this, WebCore::BlobDataFileReference *a2, unint64_t a3, unint64_t a4)
{
  unsigned int v4;
  __n128 v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF *v12;
  WebCore::BlobDataFileReference *v13;
  __n128 v14;
  char v15;

  v11 = 1;
  v12 = 0;
  if (a2)
    ++*((_DWORD *)a2 + 2);
  v13 = a2;
  v14.n128_u64[0] = a3;
  v14.n128_u64[1] = a4;
  v4 = *((_DWORD *)this + 27);
  if (v4 == *((_DWORD *)this + 26))
  {
    v5 = WTF::Vector<WebCore::BlobDataItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::BlobDataItem>((uint64_t)this + 96, (unint64_t)&v11);
    this = v13;
    v13 = 0;
    if (this)
    {
      if (*((_DWORD *)this + 2) == 1)
        this = (WebCore::BlobDataFileReference *)(*(uint64_t (**)(WebCore::BlobDataFileReference *, __n128))(*(_QWORD *)this + 8))(this, v5);
      else
        --*((_DWORD *)this + 2);
    }
  }
  else
  {
    v9 = *((_QWORD *)this + 12) + 40 * v4;
    *(_DWORD *)v9 = 1;
    v12 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_QWORD *)(v9 + 16) = a2;
    v5 = v14;
    *(__n128 *)(v9 + 24) = v14;
    ++*((_DWORD *)this + 27);
    v13 = 0;
  }
  v6 = (unsigned int *)v12;
  v12 = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      v10 = v6[6];
      if ((_DWORD)v10 != -1)
        ((void (*)(char *, unsigned int *, __n128))off_1E341D4C8[v10])(&v15, v6 + 2, v5);
      v6[6] = -1;
      return (WebCore::BlobDataFileReference *)WTF::fastFree((WTF *)v6, a2);
    }
  }
  return this;
}

uint64_t WebCore::BlobDataFileReference::BlobDataFileReference(uint64_t this, const WTF::String *a2, const WTF::String *a3)
{
  _DWORD *v3;
  _DWORD *v4;

  *(_DWORD *)(this + 8) = 1;
  *(_QWORD *)this = off_1E341CF60;
  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  *(_QWORD *)(this + 16) = v3;
  v4 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v4 += 2;
  *(_QWORD *)(this + 24) = v4;
  *(_BYTE *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0x7FF8000000000000;
  return this;
}

{
  _DWORD *v3;
  _DWORD *v4;

  *(_DWORD *)(this + 8) = 1;
  *(_QWORD *)this = off_1E341CF60;
  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  *(_QWORD *)(this + 16) = v3;
  v4 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v4 += 2;
  *(_QWORD *)(this + 24) = v4;
  *(_BYTE *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0x7FF8000000000000;
  return this;
}

void WebCore::BlobDataFileReference::~BlobDataFileReference(WebCore::BlobDataFileReference *this, const WTF::String *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = off_1E341CF60;
  v3 = (WTF::StringImpl **)((char *)this + 24);
  if (*((_QWORD *)this + 3))
  {
    WTF::FileSystemImpl::deleteFile((WebCore::BlobDataFileReference *)((char *)this + 24), a2);
    v4 = *v3;
    *v3 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  else
  {
    *v3 = 0;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = off_1E341CF60;
  v3 = (WTF::StringImpl **)((char *)this + 24);
  if (*((_QWORD *)this + 3))
  {
    WTF::FileSystemImpl::deleteFile((WebCore::BlobDataFileReference *)((char *)this + 24), a2);
    v4 = *v3;
    *v3 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  else
  {
    *v3 = 0;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = off_1E341CF60;
  v3 = (WTF::StringImpl **)((char *)this + 24);
  if (*((_QWORD *)this + 3))
  {
    WTF::FileSystemImpl::deleteFile((WebCore::BlobDataFileReference *)((char *)this + 24), a2);
    v4 = *v3;
    *v3 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  else
  {
    *v3 = 0;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::fastFree(this, a2);
}

char *WebCore::BlobDataFileReference::path(WTF::StringImpl **this)
{
  char *v2;
  WTF::StringImpl *v3;

  if (*((_BYTE *)this + 32))
    WebCore::BlobDataFileReference::generateReplacementFile(this);
  v3 = this[3];
  v2 = (char *)(this + 3);
  if (v3)
    return v2;
  else
    return v2 - 8;
}

unint64_t WebCore::BlobDataFileReference::expectedModificationTime(WebCore::BlobDataFileReference *this)
{
  unint64_t v1;
  uint64_t v2;

  if (*((_BYTE *)this + 32) || *((_QWORD *)this + 3))
  {
    v1 = 0;
    v2 = 0;
  }
  else
  {
    v1 = *((_QWORD *)this + 6) & 0xFFFFFFFFFFFFFF00;
    v2 = *((_QWORD *)this + 6);
  }
  return v2 | v1;
}

uint64_t WebCore::blobRegistry(WebCore *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = WebCore::s_platformStrategies;
  result = *(_QWORD *)(WebCore::s_platformStrategies + 40);
  if (!result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 40))(WebCore::s_platformStrategies);
    *(_QWORD *)(v1 + 40) = result;
  }
  return result;
}

void WebCore::BlobRegistryImpl::~BlobRegistryImpl(WebCore::BlobRegistryImpl *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  uint64_t i;
  char *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;

  *(_QWORD *)this = off_1E341CF90;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  if (*((_BYTE *)this + 64))
  {
    v4 = (WTF *)*((_QWORD *)this + 5);
    if (v4)
      WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::SecurityOriginData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v4, (WTF::StringImpl *)*((unsigned int *)this + 12));
  }
  v5 = (WTF *)*((_QWORD *)this + 2);
  if (v5)
  {
    v6 = *((unsigned int *)this + 6);
    if ((_DWORD)v6)
    {
      for (i = 0; i != v6; ++i)
      {
        v8 = (char *)v5 + 16 * i;
        v9 = *((_QWORD *)v8 + 1);
        *((_QWORD *)v8 + 1) = 0;
        if (v9)
        {
          do
          {
            v10 = __ldaxr((unsigned int *)v9);
            v11 = v10 - 1;
          }
          while (__stlxr(v11, (unsigned int *)v9));
          if (!v11)
          {
            atomic_store(1u, (unsigned int *)v9);
            WTF::Vector<WebCore::BlobDataItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v9 + 96, a2);
            WebCore::PolicyContainer::~PolicyContainer((WebCore::PolicyContainer *)(v9 + 16), v13);
            v15 = *(WTF::StringImpl **)(v9 + 8);
            *(_QWORD *)(v9 + 8) = 0;
            if (v15)
            {
              if (*(_DWORD *)v15 == 2)
                WTF::StringImpl::destroy(v15, v14);
              else
                *(_DWORD *)v15 -= 2;
            }
            WTF::fastFree((WTF *)v9, v14);
          }
        }
        v12 = *(WTF::StringImpl **)v8;
        *(_QWORD *)v8 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, a2);
          else
            *(_DWORD *)v12 -= 2;
        }
      }
    }
    WTF::fastFree(v5, a2);
  }
  v16 = *((_QWORD *)this + 1);
  if (v16)
  {
    v17 = *(unsigned int *)(v16 - 4);
    if ((_DWORD)v17)
    {
      v18 = (WTF::StringImpl **)*((_QWORD *)this + 1);
      do
      {
        v19 = *v18;
        if (*v18 != (WTF::StringImpl *)-1)
        {
          *v18 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, a2);
            else
              *(_DWORD *)v19 -= 2;
          }
        }
        v18 += 2;
        --v17;
      }
      while (v17);
    }
    WTF::fastFree((WTF *)(v16 - 16), a2);
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::BlobRegistryImpl::~BlobRegistryImpl(this, a2);
  WTF::fastFree(v2, v3);
}

void WebCore::BlobRegistryImpl::createResourceHandle(WebCore::BlobRegistryImpl *this@<X0>, const WebCore::ResourceRequest *a2@<X1>, WebCore::ResourceHandleClient *a3@<X2>, _QWORD *a4@<X8>)
{
  WTF *BlobDataFromURL;
  uint64_t v9;
  const WTF::String *v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  _QWORD v14[3];
  int v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)a2 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(a2);
    *((_BYTE *)a2 + 184) |= 1u;
  }
  LOBYTE(v14[0]) = 0;
  v16 = 0;
  BlobDataFromURL = WebCore::BlobRegistryImpl::getBlobDataFromURL((uint64_t)this, a2, (uint64_t)v14);
  v9 = WTF::fastMalloc((WTF *)0xA0);
  WebCore::BlobResourceHandle::BlobResourceHandle((WebCore::BlobResourceHandle *)v9, BlobDataFromURL, a2, a3, 1);
  if (v16 && v15 != -1)
    ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_15[v15])(&v13, v14);
  if (*(_BYTE *)(v9 + 40))
  {
    ++*(_DWORD *)(v9 + 16);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v11 = &off_1E341D5D8;
    v11[1] = v9;
    v14[0] = v11;
    WTF::callOnMainThread();
    v12 = v14[0];
    v14[0] = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  else
  {
    WebCore::BlobResourceHandle::doStart((WebCore::BlobResourceHandle *)v9, v10);
  }
  *a4 = v9 + 8;
}

WTF *WebCore::BlobRegistryImpl::getBlobDataFromURL(uint64_t a1, WTF::URL *this, uint64_t a3)
{
  const WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF *v7;
  uint64_t v8;
  _BOOL4 v9;
  int v10;
  int v11;
  WTF::StringImpl *v12;
  NSObject *v14;
  WTF::StringImpl *v15;
  char v16;
  char *v17;
  uint8_t buf[4];
  uint64_t v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  WTF::URL::stringWithoutFragmentIdentifier(this);
  v7 = WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 16), &v15, v5);
  if (*(_BYTE *)(a1 + 64) && *(_BYTE *)(a3 + 32))
  {
    WTF::HashMap<WTF::String,WebCore::SecurityOriginData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebCore::SecurityOriginData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t)buf, (uint64_t *)(a1 + 40), &v15);
    if (*(_BYTE *)(a3 + 32))
    {
      if (buf == (uint8_t *)a3)
      {
        v10 = 1;
      }
      else
      {
        v8 = *(unsigned int *)(a3 + 24);
        v9 = v20 != -1 && v20 == v8;
        if ((_DWORD)v8 == -1)
          v10 = v20 == -1;
        else
          v10 = v9;
        if ((_DWORD)v8 != -1 && v9)
        {
          v17 = &v16;
          v10 = ((uint64_t (*)(char **, uint64_t, uint8_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v8])(&v17, a3, buf);
        }
      }
      v11 = v10 ^ 1;
    }
    else
    {
      v11 = 1;
    }
    if (v20 != -1)
      ((void (*)(char **, uint8_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_15[v20])(&v17, buf);
    if (v11)
    {
      v14 = qword_1ECE7C608;
      if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        v19 = a1;
        _os_log_error_impl(&dword_1940B8000, v14, OS_LOG_TYPE_ERROR, "BlobRegistryImpl::getBlobDataFromURL: (%p) Requested blob URL with incorrect top origin.", buf, 0xCu);
      }
      v7 = 0;
    }
  }
  v12 = v15;
  v15 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  return v7;
}

void WebCore::BlobRegistryImpl::appendStorageItems(int a1, WebCore::BlobData *this, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int64_t v17;
  unint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  void *v21;
  int64_t v22;
  uint64_t i;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  void *v30;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;

  v6 = a4;
  v9 = *a3;
  if (a4 && *((_DWORD *)a3 + 3))
  {
    v10 = *a3;
    while (1)
    {
      v11 = *(_QWORD *)(v10 + 32);
      if (v11 == -1)
      {
        if (*(_DWORD *)v10 == 1)
        {
          v13 = *(_QWORD *)(v10 + 16);
          if (*(_BYTE *)(v13 + 32))
            WebCore::BlobDataFileReference::generateReplacementFile(*(WTF::StringImpl ***)(v10 + 16));
          v11 = *(_QWORD *)(v13 + 40);
        }
        else
        {
          v11 = -1;
        }
      }
      if (v6 < v11)
        break;
      v12 = *(_QWORD *)(v10 + 32);
      if (v12 == -1)
      {
        if (*(_DWORD *)v10 == 1)
        {
          v14 = *(_QWORD *)(v10 + 16);
          if (*(_BYTE *)(v14 + 32))
            WebCore::BlobDataFileReference::generateReplacementFile(*(WTF::StringImpl ***)(v10 + 16));
          v12 = *(_QWORD *)(v14 + 40);
        }
        else
        {
          v12 = -1;
        }
      }
      v6 -= v12;
      v10 += 40;
      v9 = *a3;
      if (v10 == *a3 + 40 * *((unsigned int *)a3 + 3))
        goto LABEL_21;
    }
    v9 = *a3;
  }
  else
  {
    v10 = *a3;
  }
LABEL_21:
  if (a5 >= 1 && v10 != v9 + 40 * *((unsigned int *)a3 + 3))
  {
    v15 = *(_QWORD *)(v10 + 32);
    v16 = *(_DWORD *)v10;
    if (v15 == -1)
    {
      if (v16 == 1)
      {
        v33 = *(_QWORD *)(v10 + 16);
        if (*(_BYTE *)(v33 + 32))
        {
          WebCore::BlobDataFileReference::generateReplacementFile(*(WTF::StringImpl ***)(v10 + 16));
          v16 = *(_DWORD *)v10;
        }
        else
        {
          v16 = 1;
        }
        v15 = *(_QWORD *)(v33 + 40);
      }
      else
      {
        v15 = -1;
      }
    }
    v17 = v15 - v6;
    if (v17 >= a5)
      v18 = a5;
    else
      v18 = v17;
    if (v16)
    {
      WebCore::BlobData::appendFile(this, *(WebCore::BlobDataFileReference **)(v10 + 16), *(_QWORD *)(v10 + 24) + v6, v18);
    }
    else
    {
      v19 = *(unsigned int **)(v10 + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 + 1, v19));
      v34 = (WTF *)v19;
      WebCore::BlobData::appendData((uint64_t)this, &v34, *(_QWORD *)(v10 + 24) + v6, v18);
      if (v34)
        WTF::ThreadSafeRefCounted<WebCore::DataSegment,(WTF::DestructionThread)0>::deref((unsigned int *)v34, v21);
    }
    v22 = a5 - v18;
    for (i = v10 + 40; i != *a3 + 40 * *((unsigned int *)a3 + 3) && v22 > 0; i += 40)
    {
      v25 = *(_QWORD *)(i + 32);
      v26 = *(_DWORD *)i;
      if (v25 == -1)
      {
        if (v26 == 1)
        {
          v32 = *(_QWORD *)(i + 16);
          if (*(_BYTE *)(v32 + 32))
          {
            WebCore::BlobDataFileReference::generateReplacementFile(*(WTF::StringImpl ***)(i + 16));
            v26 = *(_DWORD *)i;
          }
          else
          {
            v26 = 1;
          }
          v25 = *(_QWORD *)(v32 + 40);
        }
        else
        {
          v25 = -1;
        }
      }
      if (v25 >= v22)
        v27 = v22;
      else
        v27 = v25;
      if (v26)
      {
        WebCore::BlobData::appendFile(this, *(WebCore::BlobDataFileReference **)(i + 16), *(_QWORD *)(i + 24), v27);
      }
      else
      {
        v28 = *(unsigned int **)(i + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 + 1, v28));
        v34 = (WTF *)v28;
        WebCore::BlobData::appendData((uint64_t)this, &v34, *(_QWORD *)(i + 24), v27);
        if (v34)
          WTF::ThreadSafeRefCounted<WebCore::DataSegment,(WTF::DestructionThread)0>::deref((unsigned int *)v34, v30);
      }
      v22 -= v27;
    }
  }
}

unsigned int *WebCore::BlobRegistryImpl::registerInternalFileBlobURL(uint64_t a1, WTF::StringImpl **a2, const WTF::String *a3, _DWORD **a4)
{
  uint64_t v8;
  unsigned int *v9;
  _DWORD *v10;
  void *v11;
  unsigned int *result;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unsigned int *v15;
  _QWORD v16[3];
  WTF::StringImpl *v17[2];
  char v18;
  int v19;

  if ((WebCore::registerBlobResourceHandleConstructor(void)::didRegister & 1) == 0)
  {
    WTF::AtomStringImpl::add();
    WebCore::ResourceHandle::registerBuiltinConstructor((WTF::StringImpl *)v17, (uint64_t)WebCore::createBlobResourceHandle);
    WebCore::ResourceHandle::registerBuiltinSynchronousLoader((WTF::StringImpl *)v17, (uint64_t)WebCore::loadBlobResourceSynchronously);
    WebCore::registerBlobResourceHandleConstructor(void)::didRegister = 1;
    v14 = v17[0];
    v17[0] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  v8 = WTF::fastMalloc((WTF *)0x70);
  v9 = (unsigned int *)v8;
  *(_DWORD *)v8 = 1;
  v10 = *a4;
  if (*a4)
    *v10 += 2;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 8) = v10;
  *(_QWORD *)(v8 + 29) = 0;
  *(_WORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 80) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_WORD *)(v8 + 64) = 0;
  *(_BYTE *)(v8 + 88) = 7;
  *(_QWORD *)(v8 + 96) = 0;
  *(_QWORD *)(v8 + 104) = 0;
  WebCore::BlobData::appendFile(v8, a3);
  v15 = v9;
  WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>((uint64_t)v17, (unsigned int *)(a1 + 16), a2, (uint64_t *)&v15);
  if (v18)
  {
    v19 = 0;
    WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)(a1 + 8), a2, (const WTF::StringImpl *)&v19, (uint64_t)v16);
    ++*(_DWORD *)(v16[0] + 8);
  }
  result = v15;
  if (v15)
    return WTF::ThreadSafeRefCounted<WebCore::BlobData,(WTF::DestructionThread)0>::deref(v15, v11);
  return result;
}

WTF::StringImpl *WebCore::BlobRegistryImpl::addBlobData(uint64_t a1, WTF::StringImpl **a2, uint64_t *a3, uint64_t a4)
{
  WTF::StringImpl *result;
  BOOL v8;
  _QWORD v9[3];
  _BYTE v10[28];
  int v11;

  result = (WTF::StringImpl *)WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>((uint64_t)v10, (unsigned int *)(a1 + 16), a2, a3);
  if (v10[16])
  {
    v11 = 0;
    result = WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)(a1 + 8), a2, (const WTF::StringImpl *)&v11, (uint64_t)v9);
    ++*(_DWORD *)(v9[0] + 8);
    if (*(_BYTE *)(a1 + 64))
      v8 = *(_BYTE *)(a4 + 32) == 0;
    else
      v8 = 1;
    if (!v8)
      return WTF::HashMap<WTF::String,WebCore::SecurityOriginData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,WebCore::SecurityOriginData const&>((uint64_t)v9, a1 + 40, a2, a4);
  }
  return result;
}

uint64_t WebCore::BlobRegistryImpl::createDataSegment@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, uint64_t *a4@<X8>)
{
  void *v8;
  uint64_t result;
  WTF *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  char *v18;
  WTF *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  const char *v22;
  WTF::StringImpl *v23;
  unsigned int *v24;
  char *v25;
  unsigned int v26;
  unsigned int v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF *v31;
  const char *v32;
  WTF *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  const char *v37;
  int v38;
  uint64_t v39;

  v8 = (void *)*(unsigned int *)(a2 + 12);
  if (*(_DWORD *)(a2 + 8) > v8)
  {
    v31 = *(WTF **)a2;
    if ((_DWORD)v8)
    {
      *(_DWORD *)(a2 + 8) = (_DWORD)v8;
      *(_QWORD *)a2 = WTF::fastRealloc(v31, v8);
    }
    else if (v31)
    {
      *(_QWORD *)a2 = 0;
      *(_DWORD *)(a2 + 8) = 0;
      WTF::fastFree(v31, v8);
    }
  }
  result = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  v10 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(result + 8) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  *(_DWORD *)(result + 16) = (_DWORD)v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 20) = (_DWORD)v10;
  *(_DWORD *)(result + 24) = 0;
  *a4 = result;
  v11 = *(_QWORD *)(a1 + 72);
  if (v11 && *(_DWORD *)(v11 + 4))
  {
    if (_MergedGlobals_243 != 1)
    {
      WTF::WorkQueue::create();
      qword_1ECE84188 = (uint64_t)v32;
      _MergedGlobals_243 = 1;
    }
    ++qword_1ECE84180;
    v32 = "mapping-file-";
    LODWORD(v33) = 13;
    v39 = qword_1ECE84180;
    v37 = ".blob";
    v38 = 5;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)&v32, (unint64_t *)&v39, (uint64_t)&v37, &v35);
    if (!v35)
    {
      __break(0xC471u);
      JUMPOUT(0x1962DE43CLL);
    }
    WTF::FileSystemImpl::pathByAppendingComponent();
    v13 = v35;
    v35 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = qword_1ECE84188;
    do
      v15 = __ldaxr(a3);
    while (__stlxr(v15 + 1, a3));
    v32 = (const char *)a3;
    v16 = (unsigned int *)*a4;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 + 1, v16));
    v33 = (WTF *)v16;
    WTF::String::isolatedCopy();
    v18 = (char *)WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v18 = off_1E341D4F8;
    *((_QWORD *)v18 + 1) = v32;
    v19 = v33;
    v32 = 0;
    v33 = 0;
    *((_QWORD *)v18 + 2) = v19;
    v20 = v34;
    v34 = 0;
    *((_QWORD *)v18 + 3) = v20;
    v37 = v18;
    (*(void (**)(uint64_t, const char **))(*(_QWORD *)v14 + 32))(v14, &v37);
    v22 = v37;
    v37 = 0;
    if (v22)
      (*(void (**)(const char *))(*(_QWORD *)v22 + 8))(v22);
    v23 = v34;
    v34 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v21);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = (unsigned int *)v33;
    v33 = 0;
    if (v24)
      WTF::ThreadSafeRefCounted<WebCore::DataSegment,(WTF::DestructionThread)0>::deref(v24, v21);
    v25 = (char *)v32;
    v32 = 0;
    if (v25)
    {
      do
      {
        v26 = __ldaxr((unsigned int *)v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, (unsigned int *)v25));
      if (!v27)
      {
        atomic_store(1u, (unsigned int *)v25);
        WTF::Vector<WebCore::BlobDataItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v25 + 96), v21);
        WebCore::PolicyContainer::~PolicyContainer((WebCore::PolicyContainer *)(v25 + 16), v28);
        v30 = (WTF::StringImpl *)*((_QWORD *)v25 + 1);
        *((_QWORD *)v25 + 1) = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, v29);
          else
            *(_DWORD *)v30 -= 2;
        }
        WTF::fastFree((WTF *)v25, v29);
      }
    }
    result = (uint64_t)v36;
    v36 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v21);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::BlobRegistryImpl::createDataSegment(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BlobData &)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  WTF::StringImpl *v12;
  WTF *v13;

  v3 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebCore::DataSegment,(WTF::DestructionThread)0>::deref(v4, a2);
  v5 = *(unsigned int **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v13 = (WTF *)v5;
      WTF::Vector<WebCore::BlobDataItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v5 + 24), a2);
      WebCore::PolicyContainer::~PolicyContainer((WTF *)((char *)v13 + 16), v9);
      v11 = v13;
      v12 = (WTF::StringImpl *)*((_QWORD *)v13 + 1);
      *((_QWORD *)v13 + 1) = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
        {
          WTF::StringImpl::destroy(v12, v10);
          v11 = v13;
        }
        else
        {
          *(_DWORD *)v12 -= 2;
        }
      }
      WTF::fastFree(v11, v10);
    }
  }
  return a1;
}

unsigned int *WebCore::BlobRegistryImpl::registerInternalBlobURL(uint64_t a1, WTF::StringImpl **a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v8;
  const WTF::StringImpl *v9;
  unsigned int *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  unsigned int *result;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int *v27;
  WTF *v28[3];
  WTF::StringImpl *v29[2];
  char v30;
  int v31;

  if ((WebCore::registerBlobResourceHandleConstructor(void)::didRegister & 1) == 0)
  {
    WTF::AtomStringImpl::add();
    WebCore::ResourceHandle::registerBuiltinConstructor((WTF::StringImpl *)v29, (uint64_t)WebCore::createBlobResourceHandle);
    WebCore::ResourceHandle::registerBuiltinSynchronousLoader((WTF::StringImpl *)v29, (uint64_t)WebCore::loadBlobResourceSynchronously);
    WebCore::registerBlobResourceHandleConstructor(void)::didRegister = 1;
    v22 = v29[0];
    v29[0] = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v21);
      else
        *(_DWORD *)v22 -= 2;
    }
  }
  v8 = WTF::fastMalloc((WTF *)0x70);
  v10 = (unsigned int *)v8;
  *(_DWORD *)v8 = 1;
  v11 = *a4;
  if (*a4)
    *v11 += 2;
  *(_QWORD *)(v8 + 96) = 0;
  *(_QWORD *)(v8 + 29) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 8) = v11;
  *(_WORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 80) = 0;
  *(_WORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_BYTE *)(v8 + 88) = 7;
  *(_QWORD *)(v8 + 104) = 0;
  v12 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v12)
  {
    v13 = *(_QWORD *)a3;
    for (i = 48 * v12; i; i -= 48)
    {
      v15 = *(_DWORD *)(v13 + 40);
      if (v15 == 1)
      {
        v23 = WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 16), (WTF::StringImpl **)v13, v9);
        if (v23)
          WTF::Vector<WebCore::BlobDataItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WebCore::BlobDataItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((uint64_t)(v10 + 24), *((_QWORD *)v23 + 12), *((_DWORD *)v23 + 27));
      }
      else
      {
        if (v15
          || (WebCore::BlobRegistryImpl::createDataSegment(a1, v13, v10, (uint64_t *)v28),
              v16 = *((unsigned int *)v28[0] + 6),
              (_DWORD)v16 == -1))
        {
          v24 = std::__throw_bad_variant_access[abi:sn180100]();
          return (unsigned int *)WTF::Vector<WebCore::BlobDataItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WebCore::BlobDataItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(v24, v25, v26);
        }
        v29[0] = (WTF::StringImpl *)&v27;
        v17 = ((uint64_t (*)(WTF::StringImpl **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v16])(v29, (char *)v28[0] + 8);
        WebCore::BlobData::appendData((uint64_t)v10, v28, 0, v17);
        if (v28[0])
          WTF::ThreadSafeRefCounted<WebCore::DataSegment,(WTF::DestructionThread)0>::deref((unsigned int *)v28[0], v18);
      }
      v13 += 48;
    }
  }
  v27 = v10;
  WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>((uint64_t)v29, (unsigned int *)(a1 + 16), a2, (uint64_t *)&v27);
  if (v30)
  {
    v31 = 0;
    WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)(a1 + 8), a2, (const WTF::StringImpl *)&v31, (uint64_t)v28);
    ++*((_DWORD *)v28[0] + 2);
  }
  result = v27;
  if (v27)
    return WTF::ThreadSafeRefCounted<WebCore::BlobData,(WTF::DestructionThread)0>::deref(v27, v19);
  return result;
}

uint64_t WTF::Vector<WebCore::BlobDataItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WebCore::BlobDataItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;

  if (a3)
  {
    v4 = result;
    v6 = *(unsigned int *)(result + 12);
    v7 = v6 + a3;
    if (v7 > *(unsigned int *)(result + 8)
      && (result = WTF::Vector<WebCore::BlobDataItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v6 + a3), v6 = *(unsigned int *)(v4 + 12), v7 < v6))
    {
      __break(0xC471u);
    }
    else
    {
      v8 = *(_QWORD *)v4 + 40 * v6;
      v9 = a2 + 40 * a3;
      do
      {
        *(_DWORD *)v8 = *(_DWORD *)a2;
        v10 = *(unsigned int **)(a2 + 8);
        if (v10)
        {
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 + 1, v10));
        }
        *(_QWORD *)(v8 + 8) = v10;
        v12 = *(_QWORD *)(a2 + 16);
        if (v12)
          ++*(_DWORD *)(v12 + 8);
        *(_QWORD *)(v8 + 16) = v12;
        *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 24);
        v8 += 40;
        a2 += 40;
      }
      while (a2 != v9);
      *(_DWORD *)(v4 + 12) = v7;
    }
  }
  return result;
}

WTF::StringImpl **WebCore::BlobRegistryImpl::registerBlobURL(uint64_t a1, WTF::StringImpl **a2, WTF::URL *a3, uint64_t a4, uint64_t a5)
{
  WTF::StringImpl **result;
  uint64_t v6;
  WTF::StringImpl **v7;

  v6 = 0;
  v7 = 0;
  WebCore::BlobRegistryImpl::registerBlobURLOptionallyFileBacked(a1, a2, a3, &v7, (const WTF::String *)&v6, a4, a5);
  result = v7;
  if (v7)
  {
    if (*((_DWORD *)v7 + 2) == 1)
      return (WTF::StringImpl **)(*((uint64_t (**)(void))*v7 + 1))();
    else
      --*((_DWORD *)v7 + 2);
  }
  return result;
}

unsigned int *WebCore::BlobRegistryImpl::registerBlobURLOptionallyFileBacked(uint64_t a1, WTF::StringImpl **a2, WTF::URL *this, WTF::StringImpl ***a4, const WTF::String *a5, uint64_t a6, uint64_t a7)
{
  unsigned int *result;
  const WTF::StringImpl *v15;
  uint64_t v16;
  unint64_t v17;
  const WTF::StringImpl *v18;
  const WTF::StringImpl *v19;
  const WTF::StringImpl *v20;
  unsigned int v21;
  void *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  const WTF::StringImpl **v30;
  WTF **v31;
  const WTF::StringImpl **v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  int v36;
  const WTF::StringImpl **v37;
  unsigned int *v38;
  WTF::StringImpl *v39[3];
  int v40;
  unsigned int *v41[2];
  char v42;
  int v43;
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if ((WebCore::registerBlobResourceHandleConstructor(void)::didRegister & 1) == 0)
  {
    WTF::AtomStringImpl::add();
    v39[0] = (WTF::StringImpl *)v41[0];
    WebCore::ResourceHandle::registerBuiltinConstructor((WTF::StringImpl *)v39, (uint64_t)WebCore::createBlobResourceHandle);
    WebCore::ResourceHandle::registerBuiltinSynchronousLoader((WTF::StringImpl *)v39, (uint64_t)WebCore::loadBlobResourceSynchronously);
    WebCore::registerBlobResourceHandleConstructor(void)::didRegister = 1;
    v24 = v39[0];
    v39[0] = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v23);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
  LOBYTE(v41[0]) = 0;
  v44 = 0;
  result = (unsigned int *)WebCore::BlobRegistryImpl::getBlobDataFromURL(a1, this, (uint64_t)v41);
  v16 = (uint64_t)result;
  if (v44 && v43 != -1)
    result = (unsigned int *)((uint64_t (*)(WTF::StringImpl **, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_15[v43])(v39, v41);
  if (v16)
  {
    v17 = *(unsigned int *)(v16 + 28);
    if ((_DWORD)v17 == *(_DWORD *)(a6 + 12))
    {
      if (!(_DWORD)v17)
        goto LABEL_16;
      v29 = *(_QWORD *)(v16 + 16);
      v30 = *(const WTF::StringImpl ***)a6;
      if (WTF::equal(*(WTF **)v29, **(const WTF::StringImpl ***)a6, v15))
      {
        if ((*(_BYTE *)(v29 + 8) == 0) != (*((_BYTE *)v30 + 8) != 0))
        {
          v31 = (WTF **)(v29 + 24);
          v32 = v30 + 3;
          v33 = 1;
          do
          {
            v34 = v33;
            if (v17 == v33)
              break;
            v37 = v32;
            if (!WTF::equal(*(v31 - 1), *(v32 - 1), v15))
              break;
            v36 = *(unsigned __int8 *)v31;
            v31 += 2;
            v32 = v37 + 2;
            v33 = v34 + 1;
          }
          while ((v36 == 0) != (*(_BYTE *)v37 != 0));
          if (v34 >= v17)
          {
LABEL_16:
            if ((*(_BYTE *)(v16 + 40) == 0) != (*(_BYTE *)(a6 + 24) != 0)
              && (*(_BYTE *)(v16 + 41) == 0) != (*(_BYTE *)(a6 + 25) != 0)
              && WTF::equal(*(WTF **)(v16 + 48), *(const WTF::StringImpl **)(a6 + 32), v15)
              && WTF::equal(*(WTF **)(v16 + 56), *(const WTF::StringImpl **)(a6 + 40), v18)
              && *(unsigned __int8 *)(v16 + 64) == *(unsigned __int8 *)(a6 + 48)
              && *(unsigned __int8 *)(v16 + 65) == *(unsigned __int8 *)(a6 + 49)
              && WTF::equal(*(WTF **)(v16 + 72), *(const WTF::StringImpl **)(a6 + 56), v19)
              && WTF::equal(*(WTF **)(v16 + 80), *(const WTF::StringImpl **)(a6 + 64), v20)
              && *(unsigned __int8 *)(v16 + 88) == *(unsigned __int8 *)(a6 + 72))
            {
              do
                v21 = __ldaxr((unsigned int *)v16);
              while (__stlxr(v21 + 1, (unsigned int *)v16));
              v38 = (unsigned int *)v16;
              WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>((uint64_t)v41, (unsigned int *)(a1 + 16), a2, (uint64_t *)&v38);
              if (v42)
              {
                v40 = 0;
                WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)(a1 + 8), a2, (const WTF::StringImpl *)&v40, (uint64_t)v39);
                ++*((_DWORD *)v39[0] + 2);
                if (*(_BYTE *)(a1 + 64))
                {
                  if (*(_BYTE *)(a7 + 32))
                    WTF::HashMap<WTF::String,WebCore::SecurityOriginData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,WebCore::SecurityOriginData const&>((uint64_t)v39, a1 + 40, a2, a7);
                }
              }
              result = v38;
              if (v38)
                return WTF::ThreadSafeRefCounted<WebCore::BlobData,(WTF::DestructionThread)0>::deref(v38, v22);
              return result;
            }
          }
        }
      }
    }
    WebCore::BlobData::clone((WebCore::BlobData *)v41, v16);
    v28 = (WTF::StringImpl *)v41[0];
    goto LABEL_44;
  }
  v25 = *a4;
  if (*a4)
  {
    if (*((_BYTE *)v25 + 32))
      result = (unsigned int *)WebCore::BlobDataFileReference::generateReplacementFile(*a4);
    v26 = 3;
    if (!v25[3])
      v26 = 2;
    v27 = v25[v26];
    if (v27)
    {
      if (*((_DWORD *)v27 + 1))
      {
        WebCore::BlobData::create((WebCore::BlobData *)v41, a5);
        v28 = (WTF::StringImpl *)v41[0];
        v39[0] = (WTF::StringImpl *)*a4;
        *a4 = 0;
        WebCore::BlobData::appendFile((uint64_t)v28, (const WTF::String *)v39);
        if (v39[0])
        {
          if (*((_DWORD *)v39[0] + 2) == 1)
            (*(void (**)(void))(*(_QWORD *)v39[0] + 8))();
          else
            --*((_DWORD *)v39[0] + 2);
        }
LABEL_44:
        WebCore::PolicyContainer::operator=((uint64_t)v28 + 16, a6);
        v41[0] = 0;
        v39[0] = v28;
        WebCore::BlobRegistryImpl::addBlobData(a1, a2, (uint64_t *)v39, a7);
        if (v39[0])
          WTF::ThreadSafeRefCounted<WebCore::BlobData,(WTF::DestructionThread)0>::deref((unsigned int *)v39[0], v35);
        return (unsigned int *)WTF::Ref<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>::~Ref(v41, v35);
      }
    }
  }
  return result;
}

unsigned int *WebCore::BlobRegistryImpl::registerInternalBlobURLOptionallyFileBacked(uint64_t a1, WTF::StringImpl **a2, WTF::URL *a3, WTF::StringImpl ***a4, const WTF::String *a5, uint64_t a6)
{
  unsigned int *result;
  char v7;
  _BYTE v8[24];
  int v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v8[0] = 0;
  v10 = 0;
  result = WebCore::BlobRegistryImpl::registerBlobURLOptionallyFileBacked(a1, a2, a3, a4, a5, a6, (uint64_t)v8);
  if (v10)
  {
    if (v9 != -1)
      return (unsigned int *)((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_15[v9])(&v7, v8);
  }
  return result;
}

unsigned int *WebCore::BlobRegistryImpl::registerInternalBlobURLForSlice(WebCore::BlobRegistryImpl *this, WTF::StringImpl **a2, const WTF::URL *a3, uint64_t a4, uint64_t a5, const WTF::String *a6)
{
  unsigned int *result;
  uint64_t v13;
  WTF *BlobDataFromURL;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int *v28;
  void *v29;
  unsigned int *v30;
  WebCore::BlobData *v31;
  char v32;
  _BYTE v33[24];
  int v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v33[0] = 0;
  v35 = 0;
  result = (unsigned int *)WebCore::BlobRegistryImpl::getBlobDataFromURL((uint64_t)this, a3, (uint64_t)v33);
  v13 = (uint64_t)result;
  if (v35 && v34 != -1)
    result = (unsigned int *)((uint64_t (*)(WebCore::BlobData **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_15[v34])(&v31, v33);
  if (v13)
  {
    v33[0] = 0;
    v35 = 0;
    BlobDataFromURL = WebCore::BlobRegistryImpl::getBlobDataFromURL((uint64_t)this, a3, (uint64_t)v33);
    if (v35 && v34 != -1)
      ((void (*)(WebCore::BlobData **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_15[v34])(&v31, v33);
    if (BlobDataFromURL && (v15 = *((unsigned int *)BlobDataFromURL + 27), (_DWORD)v15))
    {
      v16 = 0;
      v17 = 40 * v15;
      v18 = *((_QWORD *)BlobDataFromURL + 12) + 16;
      do
      {
        v19 = *(_QWORD *)(v18 + 16);
        if (v19 == -1)
        {
          if (*(_DWORD *)(v18 - 16) == 1)
          {
            v20 = *(WTF::StringImpl ***)v18;
            if (*(_BYTE *)(*(_QWORD *)v18 + 32))
              WebCore::BlobDataFileReference::generateReplacementFile(*(WTF::StringImpl ***)v18);
            v19 = (uint64_t)v20[5];
          }
          else
          {
            v19 = -1;
          }
        }
        v16 += v19;
        v18 += 40;
        v17 -= 40;
      }
      while (v17);
    }
    else
    {
      v16 = 0;
    }
    v21 = ((v16 & (a4 >> 63)) + a4) & ~((uint64_t)((v16 & (a4 >> 63)) + a4) >> 63);
    v22 = ((v16 & (a5 >> 63)) + a5) & ~((uint64_t)((v16 & (a5 >> 63)) + a5) >> 63);
    if (v22 >= v16)
      v23 = v16;
    else
      v23 = ((v16 & (a5 >> 63)) + a5) & ~((uint64_t)((v16 & (a5 >> 63)) + a5) >> 63);
    if (v22 >= v21)
      v24 = v23;
    else
      v24 = ((v16 & (a4 >> 63)) + a4) & ~((uint64_t)((v16 & (a4 >> 63)) + a4) >> 63);
    if (v21 < v16)
    {
      v25 = ((v16 & (a4 >> 63)) + a4) & ~((uint64_t)((v16 & (a4 >> 63)) + a4) >> 63);
    }
    else
    {
      v24 = 0;
      v25 = 0;
    }
    v26 = v24 - v25;
    v27 = WebCore::BlobData::create((WebCore::BlobData *)&v31, a6);
    v28 = (unsigned int *)v31;
    WebCore::BlobRegistryImpl::appendStorageItems(v27, v31, (uint64_t *)(v13 + 96), v25, v26);
    v30 = v28;
    v33[0] = 0;
    v35 = 0;
    WebCore::BlobRegistryImpl::addBlobData((uint64_t)this, a2, (uint64_t *)&v30, (uint64_t)v33);
    if (v35 && v34 != -1)
      ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_15[v34])(&v32, v33);
    result = v30;
    if (v30)
      return WTF::ThreadSafeRefCounted<WebCore::BlobData,(WTF::DestructionThread)0>::deref(v30, v29);
  }
  return result;
}

uint64_t WebCore::BlobRegistryImpl::blobSize(WebCore::BlobRegistryImpl *this, const WTF::URL *a2)
{
  WTF *BlobDataFromURL;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  char v10;
  _BYTE v11[24];
  int v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v11[0] = 0;
  v13 = 0;
  BlobDataFromURL = WebCore::BlobRegistryImpl::getBlobDataFromURL((uint64_t)this, a2, (uint64_t)v11);
  if (v13 && v12 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_15[v12])(&v10, v11);
  if (!BlobDataFromURL)
    return 0;
  v3 = *((unsigned int *)BlobDataFromURL + 27);
  if (!(_DWORD)v3)
    return 0;
  v4 = 0;
  v5 = 40 * v3;
  v6 = *((_QWORD *)BlobDataFromURL + 12) + 16;
  do
  {
    v7 = *(_QWORD *)(v6 + 16);
    if (v7 == -1)
    {
      if (*(_DWORD *)(v6 - 16) == 1)
      {
        v8 = *(WTF::StringImpl ***)v6;
        if (*(_BYTE *)(*(_QWORD *)v6 + 32))
          WebCore::BlobDataFileReference::generateReplacementFile(*(WTF::StringImpl ***)v6);
        v7 = (uint64_t)v8[5];
      }
      else
      {
        v7 = -1;
      }
    }
    v4 += v7;
    v6 += 40;
    v5 -= 40;
  }
  while (v5);
  return v4;
}

void WebCore::BlobRegistryImpl::unregisterBlobURL(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t *v5;
  const WTF::StringImpl *v7;
  WTF::StringImpl **v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  char v13;
  uint8_t buf[4];
  uint64_t v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = (uint64_t *)(a1 + 40);
  if (!*(_BYTE *)(a1 + 64) || !*((_BYTE *)a3 + 32))
    goto LABEL_20;
  WTF::HashMap<WTF::String,WebCore::SecurityOriginData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebCore::SecurityOriginData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t)buf, v5, a2);
  if (*((_BYTE *)a3 + 32))
    v11 = WebCore::operator==((uint64_t)a3, (uint64_t)buf) ^ 1;
  else
    v11 = 1;
  if (v16 != -1)
    ((void (*)(char *, uint8_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_15[v16])(&v13, buf);
  if (v11)
  {
    v12 = qword_1ECE7C608;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v15 = a1;
      _os_log_error_impl(&dword_1940B8000, v12, OS_LOG_TYPE_ERROR, "BlobRegistryImpl::unregisterBlobURL: (%p) Rejecting unregistering blob URL with incorrect top origin.", buf, 0xCu);
    }
  }
  else
  {
LABEL_20:
    if (WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>::remove((uint64_t *)(a1 + 8), a2, a3))
    {
      v8 = (WTF::StringImpl **)WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 16), a2, v7);
      if ((WTF::StringImpl **)(*(_QWORD *)(a1 + 16) + 16 * *(unsigned int *)(a1 + 24)) != v8)
        WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove(a1 + 16, v8);
      if (*(_BYTE *)(a1 + 64))
      {
        v10 = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::SecurityOriginData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebCore::SecurityOriginData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v5, a2, v9);
        if (*(_QWORD *)(a1 + 40) + 40 * *(unsigned int *)(a1 + 48) != v10)
          WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::SecurityOriginData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove((uint64_t)v5, v10);
      }
    }
  }
}

WTF::StringImpl **WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::remove(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl **result;

  result = (WTF::StringImpl **)WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)a1, a2, a3);
  if ((WTF::StringImpl **)(*(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 8)) != result)
    return (WTF::StringImpl **)WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove(a1, result);
  return result;
}

uint64_t WTF::HashMap<WTF::String,WebCore::SecurityOriginData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::MemoryCompactRobinHoodHashTableTraits>::remove(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t result;

  result = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::SecurityOriginData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebCore::SecurityOriginData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)a1, a2, a3);
  if (*(_QWORD *)a1 + 40 * *(unsigned int *)(a1 + 8) != result)
    return WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::SecurityOriginData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove(a1, result);
  return result;
}

unsigned int *WebCore::BlobRegistryImpl::blobType@<X0>(WebCore::BlobRegistryImpl *this@<X0>, const WTF::URL *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned int *result;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  _DWORD *v8;
  _DWORD *v9;
  char v10;
  _BYTE v11[24];
  int v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v11[0] = 0;
  v13 = 0;
  result = (unsigned int *)WebCore::BlobRegistryImpl::getBlobDataFromURL((uint64_t)this, a2, (uint64_t)v11);
  v6 = result;
  if (result)
  {
    do
      v7 = __ldaxr(result);
    while (__stlxr(v7 + 1, result));
  }
  if (v13 && v12 != -1)
    result = (unsigned int *)((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_15[v12])(&v10, v11);
  if (v6)
  {
    v8 = (_DWORD *)*((_QWORD *)v6 + 1);
    if (v8)
      *v8 += 2;
    *a3 = v8;
    return WTF::ThreadSafeRefCounted<WebCore::BlobData,(WTF::DestructionThread)0>::deref(v6, v5);
  }
  else
  {
    v9 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v9 += 2;
    *a3 = v9;
  }
  return result;
}

uint64_t WebCore::BlobRegistryImpl::populateBlobsForFileWriting(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF *v12;
  WTF *v13;
  WTF *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  unsigned int v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF *BlobDataFromURL;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  _BOOL8 v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  char *v42;
  _QWORD *v43;
  uint64_t v44;
  WTF **v45;
  WTF **v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  char *v52;
  _QWORD *v53;
  uint64_t v54;
  WTF **v55;
  WTF **v56;
  WTF::StringImpl **v57;
  WTF::StringImpl *v58;
  WTF *v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  WTF::StringImpl *v63;
  WTF::StringImpl **v64;
  WTF *v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  WTF::StringImpl *v75[5];
  WTF::StringImpl *v76;
  WTF *v77;
  uint64_t v78;
  char v79;
  _BYTE v80[24];
  int v81;
  char v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v3 = a2[3];
  if ((_DWORD)v3)
  {
    v5 = *(_QWORD *)a2;
    v73 = *(_QWORD *)a2 + 8 * v3;
    while (1)
    {
      v76 = 0;
      v77 = 0;
      v78 = 0;
      v6 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v6 == *(_DWORD *)(a3 + 8))
      {
        v7 = WTF::Vector<WebCore::BlobRegistryImpl::BlobForFileWriting,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v6 + 1, (unint64_t)&v76);
        v8 = *(_QWORD *)a3 + 24 * *(unsigned int *)(a3 + 12);
        v9 = *(_QWORD *)v7;
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v8 + 8) = 0;
        *(_QWORD *)(v8 + 16) = 0;
        *(_QWORD *)v8 = v9;
        v10 = *((_QWORD *)v7 + 1);
        *((_QWORD *)v7 + 1) = 0;
        *(_QWORD *)(v8 + 8) = v10;
        LODWORD(v10) = *((_DWORD *)v7 + 4);
        *((_DWORD *)v7 + 4) = 0;
        *(_DWORD *)(v8 + 16) = v10;
        v11 = *((_DWORD *)v7 + 5);
        *((_DWORD *)v7 + 5) = 0;
      }
      else
      {
        v8 = *(_QWORD *)a3 + 24 * v6;
        *(_QWORD *)v8 = 0;
        *(_QWORD *)(v8 + 8) = 0;
        *(_QWORD *)(v8 + 16) = 0;
        v12 = v77;
        v77 = 0;
        *(_QWORD *)(v8 + 8) = v12;
        LODWORD(v12) = v78;
        LODWORD(v78) = 0;
        *(_DWORD *)(v8 + 16) = (_DWORD)v12;
        v11 = HIDWORD(v78);
        HIDWORD(v78) = 0;
      }
      *(_DWORD *)(v8 + 20) = v11;
      ++*(_DWORD *)(a3 + 12);
      if (HIDWORD(v78))
      {
        v13 = v77;
        v14 = (WTF *)((char *)v77 + 16 * HIDWORD(v78));
        do
        {
          v15 = (unsigned int *)*((_QWORD *)v13 + 1);
          *((_QWORD *)v13 + 1) = 0;
          if (v15)
          {
            do
            {
              v16 = __ldaxr(v15);
              v17 = v16 - 1;
            }
            while (__stlxr(v17, v15));
            if (!v17)
            {
              atomic_store(1u, v15);
              v19 = v15[6];
              if ((_DWORD)v19 != -1)
                ((void (*)(WTF::StringImpl **, unsigned int *))off_1E341D4C8[v19])(v75, v15 + 2);
              v15[6] = -1;
              WTF::fastFree((WTF *)v15, a2);
            }
          }
          v18 = *(WTF::StringImpl **)v13;
          *(_QWORD *)v13 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v18 -= 2;
          }
          v13 = (WTF *)((char *)v13 + 16);
        }
        while (v13 != v14);
      }
      v20 = v77;
      if (v77)
      {
        v77 = 0;
        LODWORD(v78) = 0;
        WTF::fastFree(v20, a2);
      }
      v21 = v76;
      v76 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v21 -= 2;
      }
      WTF::String::isolatedCopy();
      v23 = *(_DWORD *)(a3 + 12);
      if (!v23)
      {
LABEL_93:
        __break(0xC471u);
        JUMPOUT(0x1962DF940);
      }
      v24 = *(_QWORD *)a3 + 24 * v23;
      v25 = v76;
      v76 = 0;
      v26 = *(WTF::StringImpl **)(v24 - 24);
      *(_QWORD *)(v24 - 24) = v25;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v22);
        else
          *(_DWORD *)v26 -= 2;
      }
      v27 = v76;
      v76 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v22);
        else
          *(_DWORD *)v27 -= 2;
      }
      v75[0] = 0;
      WTF::URL::invalidate((WTF::URL *)v75);
      MEMORY[0x19AEA52F8](&v76, v75, v5, 0);
      v80[0] = 0;
      v82 = 0;
      BlobDataFromURL = WebCore::BlobRegistryImpl::getBlobDataFromURL(a1, (WTF::URL *)&v76, (uint64_t)v80);
      if (v82 && v81 != -1)
        ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_15[v81])(&v79, v80);
      v29 = v76;
      v76 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v29 -= 2;
      }
      v30 = v75[0];
      v75[0] = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v30 -= 2;
      }
      v31 = BlobDataFromURL != 0;
      if (!BlobDataFromURL)
        return v31;
      v32 = *((_DWORD *)BlobDataFromURL + 27);
      if (v32)
        break;
LABEL_82:
      v5 += 8;
      if (v5 == v73)
        return v31;
    }
    v33 = *((_QWORD *)BlobDataFromURL + 12);
    v34 = v33 + 40 * v32;
    while (1)
    {
      if (*(_DWORD *)v33 == 1)
      {
        v47 = *(_DWORD *)(a3 + 12);
        if (!v47)
        {
          __break(0xC471u);
          JUMPOUT(0x1962DF948);
        }
        v48 = *(_QWORD *)a3;
        if (*(_BYTE *)(*(_QWORD *)(v33 + 16) + 32))
          WebCore::BlobDataFileReference::generateReplacementFile(*(WTF::StringImpl ***)(v33 + 16));
        v49 = v48 + 24 * v47 - 16;
        WTF::String::isolatedCopy();
        v50 = v75[0];
        v75[0] = 0;
        v76 = v50;
        v77 = 0;
        v51 = *(unsigned int *)(v49 + 12);
        if ((_DWORD)v51 == *(_DWORD *)(v49 + 8))
        {
          v52 = WTF::Vector<WebCore::FrameRateRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v49, v51 + 1, (unint64_t)&v76);
          v51 = *(unsigned int *)(v49 + 12);
          v53 = (_QWORD *)(*(_QWORD *)v49 + 16 * v51);
          v54 = *(_QWORD *)v52;
          *(_QWORD *)v52 = 0;
          v55 = (WTF **)(v52 + 8);
          *v53 = v54;
          v56 = (WTF **)(v53 + 1);
        }
        else
        {
          v64 = (WTF::StringImpl **)(*(_QWORD *)v49 + 16 * v51);
          v76 = 0;
          *v64 = v50;
          v56 = v64 + 1;
          v55 = &v77;
        }
        v65 = *v55;
        *v55 = 0;
        *v56 = v65;
        *(_DWORD *)(v49 + 12) = v51 + 1;
        v66 = (unsigned int *)v77;
        v77 = 0;
        if (v66)
        {
          do
          {
            v67 = __ldaxr(v66);
            v68 = v67 - 1;
          }
          while (__stlxr(v68, v66));
          if (!v68)
          {
            atomic_store(1u, v66);
            v71 = v66[6];
            if ((_DWORD)v71 != -1)
              ((void (*)(_BYTE *, unsigned int *))off_1E341D4C8[v71])(v80, v66 + 2);
            v66[6] = -1;
            WTF::fastFree((WTF *)v66, a2);
          }
        }
        v69 = v76;
        v76 = 0;
        if (v69)
        {
          if (*(_DWORD *)v69 == 2)
            WTF::StringImpl::destroy(v69, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v69 -= 2;
        }
        v63 = v75[0];
        v75[0] = 0;
        if (!v63)
          goto LABEL_72;
      }
      else
      {
        if (*(_DWORD *)v33)
          goto LABEL_72;
        v35 = *(_DWORD *)(a3 + 12);
        if (!v35)
          goto LABEL_93;
        v36 = *(_QWORD *)a3;
        v37 = *(unsigned int **)(v33 + 8);
        v76 = 0;
        if (v37)
        {
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 + 1, v37));
        }
        v39 = v36 + 24 * v35 - 16;
        v77 = (WTF *)v37;
        v41 = *(_DWORD *)(v36 + 24 * v35 - 8);
        v40 = *(unsigned int *)(v36 + 24 * v35 - 4);
        if ((_DWORD)v40 == v41)
        {
          v42 = WTF::Vector<WebCore::FrameRateRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v39, v40 + 1, (unint64_t)&v76);
          v40 = *(unsigned int *)(v39 + 12);
          v43 = (_QWORD *)(*(_QWORD *)v39 + 16 * v40);
          v44 = *(_QWORD *)v42;
          *(_QWORD *)v42 = 0;
          v45 = (WTF **)(v42 + 8);
          *v43 = v44;
          v46 = (WTF **)(v43 + 1);
        }
        else
        {
          v57 = (WTF::StringImpl **)(*(_QWORD *)v39 + 16 * v40);
          v58 = v76;
          v76 = 0;
          *v57 = v58;
          v46 = v57 + 1;
          v45 = &v77;
        }
        v59 = *v45;
        *v45 = 0;
        *v46 = v59;
        *(_DWORD *)(v39 + 12) = v40 + 1;
        v60 = (unsigned int *)v77;
        v77 = 0;
        if (v60)
        {
          do
          {
            v61 = __ldaxr(v60);
            v62 = v61 - 1;
          }
          while (__stlxr(v62, v60));
          if (!v62)
          {
            atomic_store(1u, v60);
            v70 = v60[6];
            if ((_DWORD)v70 != -1)
              ((void (*)(WTF::StringImpl **, unsigned int *))off_1E341D4C8[v70])(v75, v60 + 2);
            v60[6] = -1;
            WTF::fastFree((WTF *)v60, a2);
          }
        }
        v63 = v76;
        v76 = 0;
        if (!v63)
          goto LABEL_72;
      }
      if (*(_DWORD *)v63 == 2)
        WTF::StringImpl::destroy(v63, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v63 -= 2;
LABEL_72:
      v33 += 40;
      if (v33 == v34)
        goto LABEL_82;
    }
  }
  return 1;
}

WTF *WebCore::BlobRegistryImpl::writeBlobsToTemporaryFilesForIndexedDB(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  WTF *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF *v7;
  WTF::StringImpl *v8;
  WTF *result;
  uint64_t v10;
  WTF *v11;
  WTF *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;

  v17 = 0;
  v18 = 0;
  if ((WebCore::BlobRegistryImpl::populateBlobsForFileWriting(a1, a2, (uint64_t)&v17) & 1) != 0)
  {
    if (byte_1ECE84179 == 1)
    {
      v4 = (WTF *)qword_1ECE84190;
    }
    else
    {
      WTF::WorkQueue::create();
      v4 = v15;
      qword_1ECE84190 = (uint64_t)v15;
      byte_1ECE84179 = 1;
    }
    v5 = v17;
    v17 = 0;
    v6 = *a3;
    *a3 = 0;
    v7 = (WTF *)WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v7 = &off_1E341D578;
    *((_QWORD *)v7 + 1) = v5;
    *((_QWORD *)v7 + 2) = v18;
    *((_QWORD *)v7 + 3) = v6;
    v15 = v7;
    (*(void (**)(WTF *, WTF **))(*(_QWORD *)v4 + 32))(v4, &v15);
    result = v15;
    v15 = 0;
    if (result)
      result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 8))(result);
    goto LABEL_12;
  }
  v15 = 0;
  v16 = 0;
  v10 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v10 + 16))(v10, &v15);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (HIDWORD(v16))
  {
    v12 = v15;
    v13 = 8 * HIDWORD(v16);
    do
    {
      v14 = *(WTF::StringImpl **)v12;
      *(_QWORD *)v12 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v8);
        else
          *(_DWORD *)v14 -= 2;
      }
      v12 = (WTF *)((char *)v12 + 8);
      v13 -= 8;
    }
    while (v13);
  }
  result = v15;
  if (v15)
  {
    v15 = 0;
    LODWORD(v16) = 0;
    result = (WTF *)WTF::fastFree(result, v8);
  }
  if (!HIDWORD(v18))
  {
LABEL_12:
    v11 = v17;
    if (!v17)
      return result;
    return (WTF *)WTF::fastFree(v11, v8);
  }
  v11 = v17;
  result = WTF::VectorDestructor<true,WebCore::BlobRegistryImpl::BlobForFileWriting>::destruct(v17, (WTF::StringImpl *)((char *)v17 + 24 * HIDWORD(v18)));
  if (!v11)
    return result;
  return (WTF *)WTF::fastFree(v11, v8);
}

uint64_t WebCore::BlobRegistryImpl::filesInBlob@<X0>(uint64_t a1@<X0>, WTF::URL *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = (uint64_t)WebCore::BlobRegistryImpl::getBlobDataFromURL(a1, a2, a3);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  if (result)
  {
    v6 = *(unsigned int *)(result + 108);
    if ((_DWORD)v6)
    {
      v7 = 40 * v6;
      v8 = (uint64_t *)(*(_QWORD *)(result + 96) + 16);
      do
      {
        if (*((_DWORD *)v8 - 4) == 1)
        {
          v9 = *v8;
          v11 = *v8;
          v10 = *(unsigned int *)(a4 + 12);
          if ((_DWORD)v10 == *(_DWORD *)(a4 + 8))
          {
            result = WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::BlobDataFileReference*>(a4, &v11);
          }
          else
          {
            if (v9)
              ++*(_DWORD *)(v9 + 8);
            *(_QWORD *)(*(_QWORD *)a4 + 8 * v10) = v9;
            *(_DWORD *)(a4 + 12) = v10 + 1;
          }
        }
        v8 += 5;
        v7 -= 40;
      }
      while (v7);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::BlobRegistryImpl::registerBlobURLHandle(uint64_t a1, WTF::URL *this, uint64_t a3)
{
  WTF::StringImpl *v5;
  const WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *result;
  NSObject *v9;
  WTF::StringImpl *v10;
  int v11;
  uint8_t buf[24];
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  WTF::URL::stringWithoutFragmentIdentifier(this);
  if (*(_QWORD *)(a1 + 16)
    && WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 16), &v10, v6))
  {
    if (!*(_BYTE *)(a1 + 64) || !*(_BYTE *)(a3 + 32))
      goto LABEL_10;
    WTF::HashMap<WTF::String,WebCore::SecurityOriginData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebCore::SecurityOriginData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t)buf, (uint64_t *)(a1 + 40), &v10);
    if (*(_BYTE *)(a3 + 32))
      v7 = WebCore::operator==(a3, (uint64_t)buf) ^ 1;
    else
      v7 = 1;
    if (v13 != -1)
      ((void (*)(int *, uint8_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_15[v13])(&v11, buf);
    if (v7)
    {
      v9 = qword_1ECE7C608;
      if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a1;
        _os_log_error_impl(&dword_1940B8000, v9, OS_LOG_TYPE_ERROR, "BlobRegistryImpl::registerBlobURLHandle: (%p) Rejecting registering blob URL handle with incorrect top origin", buf, 0xCu);
      }
    }
    else
    {
LABEL_10:
      v11 = 0;
      WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)(a1 + 8), &v10, (const WTF::StringImpl *)&v11, (uint64_t)buf);
      ++*(_DWORD *)(*(_QWORD *)buf + 8);
    }
  }
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::BlobRegistryImpl::unregisterBlobURLHandle(uint64_t a1, WTF::URL *this, uint64_t a3)
{
  const WTF::StringImpl *v5;
  int v6;
  WTF::StringImpl *v7;
  const WTF::StringImpl *v8;
  WTF::StringImpl *result;
  NSObject *v10;
  const WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  char v13;
  uint8_t buf[4];
  uint64_t v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  WTF::URL::stringWithoutFragmentIdentifier(this);
  if (!*(_BYTE *)(a1 + 64) || !*(_BYTE *)(a3 + 32))
    goto LABEL_21;
  WTF::HashMap<WTF::String,WebCore::SecurityOriginData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebCore::SecurityOriginData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t)buf, (uint64_t *)(a1 + 40), &v12);
  if (*(_BYTE *)(a3 + 32))
    v6 = WebCore::operator==(a3, (uint64_t)buf) ^ 1;
  else
    v6 = 1;
  if (v16 != -1)
    ((void (*)(char *, uint8_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_15[v16])(&v13, buf);
  if (v6)
  {
    v10 = qword_1ECE7C608;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v15 = a1;
      _os_log_error_impl(&dword_1940B8000, v10, OS_LOG_TYPE_ERROR, "BlobRegistryImpl::unregisterBlobURLHandle: (%p) Rejecting unregistering blob URL handle with incorrect top origin", buf, 0xCu);
    }
  }
  else
  {
LABEL_21:
    if (WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>::remove((uint64_t *)(a1 + 8), &v12, v5))
    {
      WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::remove(a1 + 16, &v12, v8);
      if (*(_BYTE *)(a1 + 64))
        WTF::HashMap<WTF::String,WebCore::SecurityOriginData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::MemoryCompactRobinHoodHashTableTraits>::remove(a1 + 40, &v12, v11);
    }
  }
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore::BlobResourceHandle *WebCore::BlobResourceHandle::BlobResourceHandle(WebCore::BlobResourceHandle *this, WebCore::BlobData *a2, const WebCore::ResourceRequest *a3, WebCore::ResourceHandleClient *a4, int a5)
{
  WTF::StringImpl *v8;
  WTF *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;
  int *v18;
  WTF::FileSystemImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  char v25;
  WTF *v26;

  *(_QWORD *)this = &off_1E341D490;
  v26 = 0;
  WebCore::ResourceHandle::ResourceHandle((uint64_t)this + 8, 0, a3, (uint64_t)a4, 0, 0, 0, (uint64_t *)&v26, 0);
  v9 = v26;
  v26 = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v22 = (WTF::StringImpl *)*((_QWORD *)v9 + 6);
      *((_QWORD *)v9 + 6) = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v8);
        else
          *(_DWORD *)v22 -= 2;
      }
      v23 = (WTF::StringImpl *)*((_QWORD *)v9 + 5);
      *((_QWORD *)v9 + 5) = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v8);
        else
          *(_DWORD *)v23 -= 2;
      }
      v24 = *((unsigned int *)v9 + 8);
      if ((_DWORD)v24 != -1)
        ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_15[v24])(&v25, (char *)v9 + 8);
      *((_DWORD *)v9 + 8) = -1;
      WTF::fastFree(v9, v8);
    }
  }
  *(_QWORD *)this = &off_1E341CFB0;
  *((_QWORD *)this + 1) = &unk_1E341D000;
  if (a2)
  {
    do
      v12 = __ldaxr((unsigned int *)a2);
    while (__stlxr(v12 + 1, (unsigned int *)a2));
  }
  *((_QWORD *)this + 4) = a2;
  *((_BYTE *)this + 40) = a5;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *(_QWORD *)((char *)this + 94) = 0;
  *((_QWORD *)this + 13) = -1;
  *((_QWORD *)this + 14) = -1;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_BYTE *)this + 152) = 0;
  if (a5)
  {
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    v14 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)v14 = -1;
    *(_QWORD *)(v14 + 8) = 0;
    *(_QWORD *)(v14 + 16) = 0;
    *(_QWORD *)(v14 + 24) = this;
    *(_BYTE *)(v14 + 32) = 0;
    *v13 = v14;
    v15 = (WTF *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v13;
    if (v15)
    {
      atomic_store(1u, (unsigned __int8 *)(*(_QWORD *)v15 + 32));
      v16 = *(_QWORD *)v15;
      *(_QWORD *)v15 = 0;
      v17 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v17 = &off_1E33AEAB8;
      *((_QWORD *)v17 + 1) = v16;
      v26 = v17;
      WebCore::callOnFileThread((uint64_t *)&v26);
      if (v26)
        (*(void (**)(WTF *))(*(_QWORD *)v26 + 8))(v26);
      v19 = *(WTF::FileSystemImpl **)v15;
      *(_QWORD *)v15 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 != -1)
        {
          WTF::FileSystemImpl::closeFile(v19, v18);
          *(_DWORD *)v19 = -1;
        }
        WTF::fastFree(v19, v18);
      }
LABEL_17:
      WTF::fastFree(v15, v18);
    }
  }
  else
  {
    v20 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v20 = -1;
    *(_QWORD *)(v20 + 8) = 0;
    *(_QWORD *)(v20 + 16) = 0;
    v15 = (WTF *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v20;
    if (v15)
    {
      if (*(_DWORD *)v15 != -1)
      {
        WTF::FileSystemImpl::closeFile(v15, v18);
        *(_DWORD *)v15 = -1;
      }
      goto LABEL_17;
    }
  }
  return this;
}

void WebCore::BlobResourceHandle::~BlobResourceHandle(WebCore::BlobResourceHandle *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  WTF::FileSystemImpl *v5;
  WTF *v6;
  uint64_t v7;
  _QWORD *v8;
  int *v9;
  WTF::FileSystemImpl *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  _QWORD *v17;

  v3 = (WTF *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 8);
  if (v4)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (WTF::FileSystemImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 != -1)
    {
      WTF::FileSystemImpl::closeFile(v5, (int *)a2);
      *(_DWORD *)v5 = -1;
    }
    WTF::fastFree(v5, a2);
  }
  v6 = (WTF *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v6)
  {
    atomic_store(1u, (unsigned __int8 *)(*(_QWORD *)v6 + 32));
    v7 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = &off_1E33AEAB8;
    v8[1] = v7;
    v17 = v8;
    WebCore::callOnFileThread((uint64_t *)&v17);
    if (v17)
      (*(void (**)(_QWORD *))(*v17 + 8))(v17);
    v10 = *(WTF::FileSystemImpl **)v6;
    *(_QWORD *)v6 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 != -1)
      {
        WTF::FileSystemImpl::closeFile(v10, v9);
        *(_DWORD *)v10 = -1;
      }
      WTF::fastFree(v10, v9);
    }
    WTF::fastFree(v6, v9);
  }
  v11 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr((unsigned int *)v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, (unsigned int *)v11));
    if (!v13)
    {
      atomic_store(1u, (unsigned int *)v11);
      WTF::Vector<WebCore::BlobDataItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v11 + 96, a2);
      WebCore::PolicyContainer::~PolicyContainer((WebCore::PolicyContainer *)(v11 + 16), v14);
      v16 = *(WTF::StringImpl **)(v11 + 8);
      *(_QWORD *)(v11 + 8) = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v15);
        else
          *(_DWORD *)v16 -= 2;
      }
      WTF::fastFree((WTF *)v11, v15);
    }
  }
  WebCore::ResourceHandle::~ResourceHandle((WebCore::BlobResourceHandle *)((char *)this + 8));
}

{
  WTF *v2;
  void *v3;

  WebCore::BlobResourceHandle::~BlobResourceHandle(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebCore::BlobResourceHandle::~BlobResourceHandle(WebCore::BlobResourceHandle *this, void *a2)
{
  WebCore::BlobResourceHandle::~BlobResourceHandle((WebCore::BlobResourceHandle *)((char *)this - 8), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::BlobResourceHandle::~BlobResourceHandle((WebCore::BlobResourceHandle *)((char *)this - 8), a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::BlobResourceHandle::cancel(WebCore::BlobResourceHandle *this)
{
  WTF *v2;
  uint64_t v3;
  _QWORD *v4;
  int *v5;
  WTF::FileSystemImpl *v6;
  uint64_t v7;
  void *v8;
  _QWORD *v10;

  v2 = (WTF *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
  {
    atomic_store(1u, (unsigned __int8 *)(*(_QWORD *)v2 + 32));
    v3 = *(_QWORD *)v2;
    *(_QWORD *)v2 = 0;
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = &off_1E33AEAB8;
    v4[1] = v3;
    v10 = v4;
    WebCore::callOnFileThread((uint64_t *)&v10);
    if (v10)
      (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    v6 = *(WTF::FileSystemImpl **)v2;
    *(_QWORD *)v2 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 != -1)
      {
        WTF::FileSystemImpl::closeFile(v6, v5);
        *(_DWORD *)v6 = -1;
      }
      WTF::fastFree(v6, v5);
    }
    WTF::fastFree(v2, v5);
  }
  *((_BYTE *)this + 152) = 0;
  *((_BYTE *)this + 100) = 1;
  v7 = *((_QWORD *)this + 3);
  v8 = *(void **)(v7 + 504);
  if (v8)
  {
    objc_msgSend((id)objc_msgSend(v8, "sender"), "cancelAuthenticationChallenge:", *(_QWORD *)(*((_QWORD *)this + 3) + 504));
    v7 = *((_QWORD *)this + 3);
  }
  return objc_msgSend(*(id *)(v7 + 480), "cancel");
}

uint64_t `non-virtual thunk to'WebCore::BlobResourceHandle::cancel(WebCore::BlobResourceHandle *this)
{
  WTF *v2;
  uint64_t v3;
  _QWORD *v4;
  int *v5;
  WTF::FileSystemImpl *v6;
  uint64_t v7;
  void *v8;
  _QWORD *v10;

  v2 = (WTF *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
  {
    atomic_store(1u, (unsigned __int8 *)(*(_QWORD *)v2 + 32));
    v3 = *(_QWORD *)v2;
    *(_QWORD *)v2 = 0;
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = &off_1E33AEAB8;
    v4[1] = v3;
    v10 = v4;
    WebCore::callOnFileThread((uint64_t *)&v10);
    if (v10)
      (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    v6 = *(WTF::FileSystemImpl **)v2;
    *(_QWORD *)v2 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 != -1)
      {
        WTF::FileSystemImpl::closeFile(v6, v5);
        *(_DWORD *)v6 = -1;
      }
      WTF::fastFree(v6, v5);
    }
    WTF::fastFree(v2, v5);
  }
  *((_BYTE *)this + 144) = 0;
  *((_BYTE *)this + 92) = 1;
  v7 = *((_QWORD *)this + 2);
  v8 = *(void **)(v7 + 504);
  if (v8)
  {
    objc_msgSend((id)objc_msgSend(v8, "sender"), "cancelAuthenticationChallenge:", *(_QWORD *)(*((_QWORD *)this + 2) + 504));
    v7 = *((_QWORD *)this + 2);
  }
  return objc_msgSend(*(id *)(v7 + 480), "cancel");
}

void WebCore::BlobResourceHandle::doStart(WebCore::BlobResourceHandle *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;

  ++*((_DWORD *)this + 4);
  if (*((_BYTE *)this + 100) || *((_DWORD *)this + 24))
    goto LABEL_8;
  v3 = *((_QWORD *)this + 3);
  if ((*(_BYTE *)(v3 + 200) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v3 + 16));
    *(_BYTE *)(v3 + 200) |= 1u;
  }
  v4 = *(_QWORD *)(v3 + 104);
  if (!v4 || *(_DWORD *)(v4 + 4) != 3)
    goto LABEL_6;
  v7 = *(_QWORD *)(v4 + 8);
  if ((*(_BYTE *)(v4 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v7 & 0xDF) != 0x47 || (*(_BYTE *)(v7 + 1) & 0xDF) != 0x45)
      goto LABEL_6;
    v8 = *(unsigned __int8 *)(v7 + 2);
  }
  else
  {
    if ((*(_WORD *)v7 & 0xFFDF) != 0x47 || (*(_WORD *)(v7 + 2) & 0xFFDF) != 0x45)
      goto LABEL_6;
    v8 = *(unsigned __int16 *)(v7 + 4);
  }
  if ((v8 & 0xFFFFFFDF) != 0x54)
  {
LABEL_6:
    v5 = this;
    v6 = 5;
LABEL_7:
    WebCore::BlobResourceHandle::notifyFail(v5, v6);
    goto LABEL_8;
  }
  if (!*((_QWORD *)this + 4))
  {
    v5 = this;
    v6 = 1;
    goto LABEL_7;
  }
  v9 = *((_QWORD *)this + 3);
  if ((*(_BYTE *)(v9 + 200) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v9 + 16));
    *(_BYTE *)(v9 + 200) |= 1u;
  }
  v10 = *(unsigned int *)(v9 + 124);
  if (!(_DWORD)v10)
    goto LABEL_24;
  v11 = 0;
  v12 = (_QWORD *)(*(_QWORD *)(v9 + 112) + 8);
  while (*((_WORD *)v12 - 4) != 59)
  {
    ++v11;
    v12 += 2;
    if (v10 == v11)
      goto LABEL_24;
  }
  if (v11 >= v10)
  {
    __break(0xC471u);
    return;
  }
  v13 = *v12;
  if (*v12)
  {
    v14 = *(unsigned int *)(v13 + 4);
    *(_DWORD *)v13 += 2;
    *((_BYTE *)this + 101) = 1;
    if ((WebCore::parseRange(*(_QWORD *)(v13 + 8), v14 | ((unint64_t)((*(_DWORD *)(v13 + 16) >> 2) & 1) << 32), 1, (int64_t *)this + 13, (int64_t *)this + 14) & 1) == 0)
    {
      WebCore::BlobResourceHandle::notifyFail(this, 3);
      goto LABEL_44;
    }
  }
  else
  {
LABEL_24:
    v13 = 0;
    *((_BYTE *)this + 101) = 0;
  }
  if (!*((_BYTE *)this + 40))
  {
    ++*((_DWORD *)this + 4);
    if (*(_DWORD *)(*((_QWORD *)this + 4) + 108))
    {
      v15 = 0;
      do
      {
        if (*((_BYTE *)this + 100))
          break;
        if (*((_DWORD *)this + 24))
          break;
        WebCore::BlobResourceHandle::getSizeForNext(this, a2);
        ++v15;
      }
      while (v15 < *(unsigned int *)(*((_QWORD *)this + 4) + 108));
    }
    if (*(_QWORD *)(*((_QWORD *)this + 3) + 8))
    {
      v16 = *((_DWORD *)this + 24);
      if (v16)
        WebCore::BlobResourceHandle::notifyFail(this, v16);
      else
        WebCore::BlobResourceHandle::notifyResponseOnSuccess(this);
    }
    if (*((_DWORD *)this + 4) == 1)
    {
      (*(void (**)(char *))(*((_QWORD *)this + 1) + 48))((char *)this + 8);
      if (!v13)
        goto LABEL_8;
    }
    else
    {
      --*((_DWORD *)this + 4);
      if (!v13)
        goto LABEL_8;
    }
LABEL_44:
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v13, a2);
    else
      *(_DWORD *)v13 -= 2;
    goto LABEL_8;
  }
  WebCore::BlobResourceHandle::getSizeForNext(this, a2);
  if (v13)
    goto LABEL_44;
LABEL_8:
  if (*((_DWORD *)this + 4) == 1)
    (*(void (**)(char *))(*((_QWORD *)this + 1) + 48))((char *)this + 8);
  else
    --*((_DWORD *)this + 4);
}

WTF::StringImpl *WebCore::BlobResourceHandle::notifyFail(WTF::StringImpl *result, int a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  __int128 v9;
  WTF::StringImpl *v10;
  CFTypeRef v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  __int128 v16;
  __int128 v17;
  WTF::StringImpl *v18;
  int v19;
  __int16 v20;
  CFTypeRef cf;
  char v22;

  v2 = *(_QWORD *)(*((_QWORD *)result + 3) + 8);
  if (v2)
  {
    v4 = result;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = v14;
    v6 = *((_QWORD *)v4 + 3);
    v7 = (WTF::StringImpl **)(v6 + 16);
    if ((*(_BYTE *)(v6 + 200) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v6 + 16));
      *(_BYTE *)(v6 + 200) |= 1u;
    }
    if (v5)
      *(_DWORD *)v5 += 2;
    v14 = v5;
    v8 = *v7;
    if (*v7)
      *(_DWORD *)v8 += 2;
    v15 = v8;
    v9 = *(_OWORD *)(v6 + 40);
    v16 = *(_OWORD *)(v6 + 24);
    v17 = v9;
    v18 = 0;
    v19 = a2;
    v20 = 1;
    cf = 0;
    v22 = 1;
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v2 + 48))(v2, (uint64_t)v4 + 8, &v14);
    v11 = cf;
    cf = 0;
    if (v11)
      CFRelease(v11);
    v12 = v18;
    v18 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v10);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v15;
    v15 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v10);
      else
        *(_DWORD *)v13 -= 2;
    }
    result = v14;
    v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
        if (!v5)
          return result;
        goto LABEL_20;
      }
      *(_DWORD *)result -= 2;
    }
    if (!v5)
      return result;
LABEL_20:
    if (*(_DWORD *)v5 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v10);
    else
      *(_DWORD *)v5 -= 2;
  }
  return result;
}

void WebCore::BlobResourceHandle::getSizeForNext(WebCore::BlobResourceHandle *this, const WTF::String *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  WTF::FileSystemImpl *v32;
  uint64_t v33;
  WTF::FileSystemImpl *v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  const WTF::String *v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  char v50;

  v3 = *((_DWORD *)this + 36);
  v4 = *((_QWORD *)this + 4);
  v5 = *(unsigned int *)(v4 + 108);
  if (v5 <= v3)
  {
    if (!*((_BYTE *)this + 101))
    {
LABEL_31:
      if (!*((_BYTE *)this + 40) || !*(_QWORD *)(*((_QWORD *)this + 3) + 8))
        return;
      v28 = *((_DWORD *)this + 24);
      if (!v28)
      {
        WebCore::BlobResourceHandle::notifyResponseOnSuccess(this);
        return;
      }
LABEL_34:
      WebCore::BlobResourceHandle::notifyFail(this, v28);
      return;
    }
    v9 = *((_QWORD *)this + 13);
    v10 = *((_QWORD *)this + 15);
    if (v9 == -1)
    {
      v9 = v10 - *((_QWORD *)this + 14);
      v11 = v10 - 1;
      *((_QWORD *)this + 13) = v9;
    }
    else
    {
      if (v9 >= v10)
      {
        v28 = 3;
        goto LABEL_34;
      }
      v11 = *((_QWORD *)this + 14);
      if (v11 != -1 && v11 < v10)
        goto LABEL_21;
      v11 = v10 - 1;
    }
    *((_QWORD *)this + 14) = v11;
LABEL_21:
    if ((_DWORD)v5)
    {
      v22 = 0;
      v23 = *((unsigned int *)this + 23);
      v24 = v9;
      while (v23 != v22)
      {
        v25 = *(_QWORD *)(*((_QWORD *)this + 10) + 8 * v22);
        v26 = __OFSUB__(v24, v25);
        v27 = v24 - v25;
        if (v27 < 0 != v26)
          goto LABEL_29;
        ++v22;
        v24 = v27;
        if (v5 == v22)
        {
          LODWORD(v22) = v5;
          v24 = v27;
          goto LABEL_29;
        }
      }
      *((_DWORD *)this + 37) = v23;
      __break(0xC471u);
      return;
    }
    LODWORD(v22) = 0;
    v24 = v9;
LABEL_29:
    *((_DWORD *)this + 37) = v22;
    *((_QWORD *)this + 17) = v24;
    v29 = v11 - v9 + 1;
    if (*((_QWORD *)this + 16) > v29)
      *((_QWORD *)this + 16) = v29;
    goto LABEL_31;
  }
  v6 = *(_QWORD *)(v4 + 96);
  v7 = *(_DWORD *)(v6 + 40 * v3);
  if (v7 == 1)
  {
    v12 = v6 + 40 * v3;
    v15 = *(_QWORD *)(v12 + 16);
    v13 = (uint64_t *)(v12 + 16);
    v14 = v15;
    v16 = *(unsigned __int8 *)(v15 + 32);
    if (*((_BYTE *)this + 40))
    {
      v17 = (uint64_t *)*((_QWORD *)this + 6);
      if (v16)
      {
        WebCore::BlobDataFileReference::generateReplacementFile((WTF::StringImpl **)v14);
        v19 = *(_QWORD *)(v14 + 24);
        v18 = v14 + 24;
        if (v19)
          v20 = v18;
        else
          v20 = v18 - 8;
        if (*(_BYTE *)(*v13 + 32))
          goto LABEL_47;
        v21 = *(_QWORD *)(*v13 + 24);
        v14 = *v13;
      }
      else
      {
        v21 = *(_QWORD *)(v14 + 24);
        if (v21)
          v20 = v14 + 24;
        else
          v20 = v14 + 16;
      }
      if (!v21)
      {
        v37 = 1;
        v36 = *(_QWORD *)(v14 + 48) & 0xFFFFFFFFFFFFFF00;
        v38 = *(_QWORD *)(v14 + 48);
        goto LABEL_49;
      }
LABEL_47:
      v36 = 0;
      v37 = 0;
      v38 = 0;
LABEL_49:
      WebCore::AsyncFileStream::getSize(v17, v20, v38 | v36, v37);
      return;
    }
    if (v16)
    {
      WebCore::BlobDataFileReference::generateReplacementFile((WTF::StringImpl **)v14);
      v30 = *v13;
      v31 = *(unsigned __int8 *)(*v13 + 32);
      v33 = *(_QWORD *)(v14 + 24);
      v32 = (WTF::FileSystemImpl *)(v14 + 24);
      if (v33)
        v34 = v32;
      else
        v34 = (WTF::FileSystemImpl *)((char *)v32 - 8);
      if (v31)
        goto LABEL_54;
      v35 = *(_QWORD *)(v30 + 24);
      v14 = v30;
    }
    else
    {
      v35 = *(_QWORD *)(v14 + 24);
      if (v35)
        v34 = (WTF::FileSystemImpl *)(v14 + 24);
      else
        v34 = (WTF::FileSystemImpl *)(v14 + 16);
    }
    if (!v35)
    {
      v40 = 1;
      v42 = *(_QWORD *)(v14 + 48);
      v39 = v42 & 0xFFFFFFFFFFFFFF00;
      v41 = v42;
      goto LABEL_56;
    }
LABEL_54:
    v39 = 0;
    v40 = 0;
    v41 = 0;
LABEL_56:
    v43 = COERCE_DOUBLE(WTF::FileSystemImpl::fileModificationTime(v34, a2));
    if (!(_BYTE)v44)
      goto LABEL_72;
    if (!v40)
      goto LABEL_69;
    if (COERCE_DOUBLE(v41 | v39) > -9.22337204e18)
      *(_QWORD *)&v45 = v41 | v39;
    else
      v45 = -9.22337204e18;
    v46 = (uint64_t)v45;
    v47 = 0x7FFFFFFFFFFFFFFFLL;
    if (COERCE_DOUBLE(v41 | v39) >= 9.22337204e18)
      v46 = 0x7FFFFFFFFFFFFFFFLL;
    if (v43 > -9.22337204e18)
      v48 = v43;
    else
      v48 = -9.22337204e18;
    if (v43 < 9.22337204e18)
      v47 = (uint64_t)v48;
    if (v46 == v47)
    {
LABEL_69:
      v49 = WTF::FileSystemImpl::fileSize(v34, v44);
      if (v50)
        v8 = v49;
      else
        v8 = -1;
    }
    else
    {
LABEL_72:
      v8 = -1;
    }
    goto LABEL_5;
  }
  if (!v7)
  {
    v8 = *(_QWORD *)(v6 + 40 * v3 + 32);
LABEL_5:
    WebCore::BlobResourceHandle::didGetSize(this, v8);
  }
}

WTF::StringImpl *WebCore::BlobResourceHandle::didGetSize(WTF::StringImpl *this, unint64_t a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  char **v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;

  v2 = this;
  v11 = a2;
  ++*((_DWORD *)this + 4);
  if (!*((_BYTE *)this + 100) && !*((_DWORD *)this + 24))
  {
    if (a2 == -1)
    {
      this = WebCore::BlobResourceHandle::notifyFail(this, 1);
    }
    else
    {
      v3 = *((_QWORD *)this + 4);
      v4 = *((_DWORD *)this + 36);
      if (*(_DWORD *)(v3 + 108) <= v4)
      {
        __break(0xC471u);
        return this;
      }
      v5 = *(_QWORD *)(v3 + 96);
      v6 = *(_QWORD *)(v5 + 40 * v4 + 32);
      if (v6 == -1)
      {
        if (*(_DWORD *)(v5 + 40 * v4) == 1)
        {
          v10 = *(_QWORD *)(v5 + 40 * v4 + 16);
          if (*(_BYTE *)(v10 + 32))
            WebCore::BlobDataFileReference::generateReplacementFile(*(WTF::StringImpl ***)(v5 + 40 * v4 + 16));
          v6 = *(_QWORD *)(v10 + 40);
        }
        else
        {
          v6 = -1;
        }
      }
      v11 = v6;
      v7 = (char **)((char *)v2 + 80);
      v8 = *((unsigned int *)v2 + 23);
      if ((_DWORD)v8 == *((_DWORD *)v2 + 22))
      {
        v9 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7, v8 + 1, (unint64_t)&v11);
        v8 = *((unsigned int *)v2 + 23);
        *(_QWORD *)(*((_QWORD *)v2 + 10) + 8 * v8) = *(_QWORD *)v9;
        v6 = v11;
      }
      else
      {
        *(_QWORD *)&(*v7)[8 * v8] = v6;
      }
      *((_DWORD *)v2 + 23) = v8 + 1;
      *(int64x2_t *)((char *)v2 + 120) = vaddq_s64(*(int64x2_t *)((char *)v2 + 120), vdupq_n_s64(v6));
      ++*((_DWORD *)v2 + 36);
      this = (WTF::StringImpl *)WebCore::BlobResourceHandle::getSizeForNext(v2);
    }
  }
  if (*((_DWORD *)v2 + 4) == 1)
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*((_QWORD *)v2 + 1) + 48))((uint64_t)v2 + 8);
  --*((_DWORD *)v2 + 4);
  return this;
}

uint64_t *WebCore::BlobResourceHandle::notifyReceiveData(uint64_t *result, WTF *a2, WTF *a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)(result[3] + 8);
  if (v3)
  {
    v6 = result + 1;
    v7 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v7 = 1;
    *(_QWORD *)(v7 + 8) = v7 + 24;
    *(_QWORD *)(v7 + 16) = 1;
    *(_BYTE *)(v7 + 40) = 0;
    *(_QWORD *)(v7 + 48) = 0;
    WebCore::FragmentedSharedBuffer::append(v7, a2, a3);
    v12 = v7;
    v8 = WTF::fastMalloc((WTF *)0x38);
    v11 = WebCore::SharedBuffer::SharedBuffer(v8, &v12);
    WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v12, v9);
    (*(void (**)(uint64_t, uint64_t *, uint64_t, WTF *))(*(_QWORD *)v3 + 32))(v3, v6, v8, a3);
    return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v11, v10);
  }
  return result;
}

WTF::StringImpl *WebCore::BlobResourceHandle::readAsync(WTF::StringImpl *this)
{
  uint64_t v1;
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  WTF::StringImpl *v18;
  _DWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::AsyncFileStream *v28;
  uint64_t v29;
  const WTF::String *v30;
  uint64_t v31;
  const WTF::String *v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  int v36;
  _OWORD v37[5];
  WTF::StringImpl *v38[2];
  int v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  char v43;

  if (*((_BYTE *)this + 100))
    return this;
  v1 = (uint64_t)this;
  if (*((_DWORD *)this + 24))
    return this;
  v2 = (WTF *)*((_QWORD *)this + 16);
  if (!v2)
    goto LABEL_17;
  v3 = *((unsigned int *)this + 37);
  v4 = *((_QWORD *)this + 4);
  if (*(_DWORD *)(v4 + 108) <= v3)
    goto LABEL_17;
  v5 = *(_QWORD *)(v4 + 96);
  v6 = *(_DWORD *)(v5 + 40 * v3);
  if (v6 == 1)
  {
    if (*((_BYTE *)this + 152))
    {
      v20 = (uint64_t *)*((_QWORD *)this + 6);
      v21 = *((_QWORD *)this + 8);
      v22 = *((_DWORD *)this + 19);
      v23 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v23 = off_1E33AEC20;
      *(_QWORD *)(v23 + 8) = v21;
      *(_DWORD *)(v23 + 16) = v22;
      v24 = *v20;
      v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v25 = &off_1E33AEB08;
      v25[1] = v24;
      v25[2] = v23;
      *(_QWORD *)&v37[0] = v25;
      WebCore::callOnFileThread((uint64_t *)v37);
      this = *(WTF::StringImpl **)&v37[0];
      if (!*(_QWORD *)&v37[0])
        return this;
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)this + 8))(this);
    }
    if (*((_DWORD *)this + 23) > v3)
    {
      v26 = *((_QWORD *)this + 17);
      if (*(_QWORD *)(*((_QWORD *)this + 10) + 8 * v3) - v26 <= (uint64_t)v2)
        v27 = *(_QWORD *)(*((_QWORD *)this + 10) + 8 * v3) - v26;
      else
        v27 = (int)v2;
      v28 = (WebCore::AsyncFileStream *)*((_QWORD *)this + 6);
      v29 = *(_QWORD *)(v5 + 40 * v3 + 16);
      if (*(_BYTE *)(v29 + 32))
      {
        WebCore::BlobDataFileReference::generateReplacementFile(*(WTF::StringImpl ***)(v5 + 40 * v3 + 16));
        v26 = *(_QWORD *)(v1 + 136);
      }
      v31 = *(_QWORD *)(v29 + 24);
      v30 = (const WTF::String *)(v29 + 24);
      if (v31)
        v32 = v30;
      else
        v32 = (const WTF::String *)((char *)v30 - 8);
      this = (WTF::StringImpl *)WebCore::AsyncFileStream::openForRead(v28, v32, *(_QWORD *)(v5 + 40 * v3 + 24) + v26, v27);
      *(_BYTE *)(v1 + 152) = 1;
      *(_QWORD *)(v1 + 136) = 0;
      return this;
    }
LABEL_55:
    __break(0xC471u);
    return this;
  }
  if (v6)
    return this;
  ++*((_DWORD *)this + 4);
  v7 = v5 + 40 * v3;
  v8 = *((_QWORD *)this + 17);
  if (*(_QWORD *)(v7 + 32) - v8 >= (uint64_t)v2)
    v9 = v2;
  else
    v9 = (WTF *)(*(_QWORD *)(v7 + 32) - v8);
  v10 = *(_QWORD *)(v7 + 8);
  v11 = *(unsigned int *)(v10 + 24);
  if ((_DWORD)v11 == -1
    || (*(_QWORD *)&v37[0] = &v43,
        v12 = ((uint64_t (*)(_OWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v11])(v37, v10 + 8), v13 = *(unsigned int *)(v10 + 24), (_DWORD)v13 == -1))
  {
    this = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_55;
  }
  v14 = v12;
  *(_QWORD *)&v37[0] = &v43;
  v15 = ((uint64_t (*)(_OWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v13])(v37, v10 + 8);
  v16 = *(_QWORD *)(v1 + 136) + *(_QWORD *)(v5 + 40 * v3 + 24);
  if (v15 >= v16)
  {
    if (v9 == (WTF *)-1)
    {
      v9 = (WTF *)(v15 - v16);
    }
    else if (v15 - v16 < (unint64_t)v9)
    {
      goto LABEL_16;
    }
    ++*(_DWORD *)(v1 + 16);
    *(_QWORD *)(v1 + 128) -= v9;
    *(_QWORD *)(v1 + 136) = 0;
    if (v9)
    {
      WebCore::BlobResourceHandle::notifyReceiveData((uint64_t *)v1, (WTF *)(v14 + v16), v9);
      if (*(_BYTE *)(v1 + 152))
      {
LABEL_47:
        this = (WTF::StringImpl *)WebCore::BlobResourceHandle::readAsync((WebCore::BlobResourceHandle *)v1);
        v35 = *(_DWORD *)(v1 + 16) - 1;
        if (*(_DWORD *)(v1 + 16) == 1)
        {
          this = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 8) + 48))(v1 + 8);
          v35 = *(_DWORD *)(v1 + 16);
        }
        else
        {
          *(_DWORD *)(v1 + 16) = v35;
        }
        v36 = v35 - 1;
        if (!v36)
          return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 8) + 48))(v1 + 8);
        *(_DWORD *)(v1 + 16) = v36;
        return this;
      }
    }
    else if (*(_BYTE *)(v1 + 152))
    {
      *(_BYTE *)(v1 + 152) = 0;
      v33 = **(_QWORD **)(v1 + 48);
      v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v34 = off_1E33AEBF8;
      v34[1] = v33;
      *(_QWORD *)&v37[0] = v34;
      WebCore::callOnFileThread((uint64_t *)v37);
      if (*(_QWORD *)&v37[0])
        (*(void (**)(_QWORD))(**(_QWORD **)&v37[0] + 8))(*(_QWORD *)&v37[0]);
    }
    ++*(_DWORD *)(v1 + 148);
    goto LABEL_47;
  }
LABEL_16:
  __break(1u);
LABEL_17:
  if (*(_BYTE *)(v1 + 40))
  {
    ++*(_DWORD *)(v1 + 16);
    v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v17 = &off_1E341D628;
    v17[1] = v1;
    *(_QWORD *)&v37[0] = v17;
    WTF::callOnMainThread();
    this = *(WTF::StringImpl **)&v37[0];
    *(_QWORD *)&v37[0] = 0;
    if (!this)
      return this;
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)this + 8))(this);
  }
  this = *(WTF::StringImpl **)(*(_QWORD *)(v1 + 24) + 8);
  if (this)
  {
    v39 = 0;
    *(_OWORD *)v38 = 0u;
    memset(v37, 0, sizeof(v37));
    v40 = -1;
    v41 = -1;
    v42 = 0;
    (*(void (**)(WTF::StringImpl *, uint64_t, _OWORD *))(*(_QWORD *)this + 40))(this, v1 + 8, v37);
    v19 = v42;
    v42 = 0;
    if (v19)
      WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v19, v18);
    this = v38[1];
    v38[1] = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v18);
      else
        *(_DWORD *)this -= 2;
    }
  }
  return this;
}

WTF::StringImpl *WebCore::BlobResourceHandle::didOpen(WebCore::BlobResourceHandle *this, char a2)
{
  WTF::StringImpl *result;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if ((a2 & 1) != 0)
    return WebCore::BlobResourceHandle::readAsync(this);
  ++*((_DWORD *)this + 4);
  result = WebCore::BlobResourceHandle::notifyFail(this, 4);
  if (*((_BYTE *)this + 152))
  {
    *((_BYTE *)this + 152) = 0;
    v4 = **((_QWORD **)this + 6);
    v5 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v5 = off_1E33AEBF8;
    *((_QWORD *)v5 + 1) = v4;
    v6 = v5;
    WebCore::callOnFileThread((uint64_t *)&v6);
    result = v6;
    if (v6)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v6 + 8))(v6);
  }
  if (*((_DWORD *)this + 4) == 1)
    return (WTF::StringImpl *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 1) + 48))((char *)this + 8);
  --*((_DWORD *)this + 4);
  return result;
}

WTF::StringImpl *WebCore::BlobResourceHandle::didRead(WTF::StringImpl *this, unsigned int a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v2 = (uint64_t)this;
  if ((a2 & 0x80000000) != 0)
  {
    ++*((_DWORD *)this + 4);
    this = WebCore::BlobResourceHandle::notifyFail(this, 4);
    if (*(_BYTE *)(v2 + 152))
    {
      *(_BYTE *)(v2 + 152) = 0;
      v4 = **(_QWORD **)(v2 + 48);
      v5 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v5 = off_1E33AEBF8;
      *((_QWORD *)v5 + 1) = v4;
      v8 = v5;
      WebCore::callOnFileThread((uint64_t *)&v8);
      this = v8;
      if (v8)
        this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v8 + 8))(v8);
    }
    goto LABEL_14;
  }
  if (*((_DWORD *)this + 19) < a2)
  {
    __break(1u);
    return this;
  }
  v3 = (WTF *)*((_QWORD *)this + 8);
  ++*((_DWORD *)this + 4);
  *((_QWORD *)this + 16) -= a2;
  if (!a2)
  {
    if (*((_BYTE *)this + 152))
    {
      *((_BYTE *)this + 152) = 0;
      v6 = **((_QWORD **)this + 6);
      v7 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v7 = off_1E33AEBF8;
      *((_QWORD *)v7 + 1) = v6;
      v8 = v7;
      WebCore::callOnFileThread((uint64_t *)&v8);
      if (v8)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v8 + 8))(v8);
    }
    goto LABEL_12;
  }
  WebCore::BlobResourceHandle::notifyReceiveData((uint64_t *)this, v3, (WTF *)a2);
  if (!*(_BYTE *)(v2 + 152))
LABEL_12:
    ++*(_DWORD *)(v2 + 148);
  this = WebCore::BlobResourceHandle::readAsync((WTF::StringImpl *)v2);
LABEL_14:
  if (*(_DWORD *)(v2 + 16) == 1)
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 8) + 48))(v2 + 8);
  --*(_DWORD *)(v2 + 16);
  return this;
}

void WebCore::BlobResourceHandle::notifyResponseOnSuccess(WebCore::BlobResourceHandle *this)
{
  uint64_t v2;
  _DWORD **v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  _DWORD *v6;
  __int128 v7;
  WTF::StringImpl *v8;
  int v9;
  __int16 v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  int v23;
  WTF::StringImpl *v24;
  const WebCore::PolicyContainer *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  int64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  CFTypeRef v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39[2];
  unint64_t v40;
  WTF::StringImpl *v41;
  _DWORD *v42;
  __int128 v43;
  __int128 v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  WTF::StringImpl *v47[2];
  _OWORD v48[3];
  uint64_t v49;
  char v50;
  __int16 v51;
  char v52;
  int64x2_t v53;
  int64x2_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  int64x2_t v58;
  uint64_t v59;
  char v60;
  __int16 v61;
  char v62;
  CFTypeRef cf;
  char v64;

  v2 = *((_QWORD *)this + 3);
  v3 = (_DWORD **)(v2 + 16);
  if ((*(_BYTE *)(v2 + 200) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v2 + 16));
    *(_BYTE *)(v2 + 200) |= 1u;
  }
  WebCore::extractMIMETypeFromMediaType((WebCore *)(*((_QWORD *)this + 4) + 8), v39);
  v5 = *((_QWORD *)this + 16);
  v6 = *v3;
  if (*v3)
    *v6 += 2;
  v42 = v6;
  v7 = *(_OWORD *)(v2 + 24);
  v44 = *(_OWORD *)(v2 + 40);
  v43 = v7;
  v8 = v39[0];
  if (v39[0])
    *(_DWORD *)v39[0] += 2;
  v45 = v8;
  v46 = v5;
  *(_OWORD *)v47 = 0u;
  memset(v48, 0, sizeof(v48));
  v49 = 0;
  v50 = 1;
  v51 = 0;
  v53 = vdupq_n_s64(0x7FF8000000000000uLL);
  v54 = v53;
  v55 = 0;
  v56 = 0;
  v58 = v53;
  v57 = 0x8000000000000000;
  v59 = 0x7FF8000000000000;
  v60 &= 0xF0u;
  v61 &= 0xC000u;
  v62 = v62 & 0xF8 | 2;
  cf = 0;
  v64 = 0;
  v52 = v52 & 0xC0 | 4;
  v39[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v4);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *((unsigned __int8 *)this + 101);
  WebCore::ResourceResponse::platformLazyInit((uint64_t)&v42, 1);
  if (v9)
    v10 = 206;
  else
    v10 = 200;
  v51 = v10;
  v52 &= ~1u;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::ResourceResponse::platformLazyInit((uint64_t)&v42, 2);
  v12 = v39[0];
  v39[0] = 0;
  v13 = v47[1];
  v47[1] = v12;
  if (v13)
  {
    v14 = *(_DWORD *)v13 - 2;
    if (*(_DWORD *)v13 != 2)
    {
LABEL_15:
      *(_DWORD *)v13 = v14;
      goto LABEL_16;
    }
    WTF::StringImpl::destroy(v13, v11);
    v13 = v39[0];
    v39[0] = 0;
    if (v13)
    {
      v14 = *(_DWORD *)v13 - 2;
      if (*(_DWORD *)v13 != 2)
        goto LABEL_15;
      WTF::StringImpl::destroy(v13, v37);
    }
  }
LABEL_16:
  v15 = (WTF::StringImpl **)(*((_QWORD *)this + 4) + 8);
  WebCore::ResourceResponse::platformLazyInit((uint64_t)&v42, 2);
  WebCore::HTTPHeaderMap::set((WTF::StringImpl *)((char *)v48 + 8), (WTF::StringImpl *)0x1A, v15);
  v16 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
  if (v16)
  {
    v17 = *(_QWORD *)(v16 + 8);
    v18 = *(unsigned int *)(v16 + 4) | ((unint64_t)((*(_DWORD *)(v16 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v17 = 0;
    v18 = 0x100000000;
  }
  WebCore::extractCharsetFromMediaType(v17, v18);
  if ((v19 & 0xFF00000000) != 0)
    WTF::String::String();
  else
    WTF::String::String();
  WebCore::ResourceResponse::platformLazyInit((uint64_t)&v42, 1);
  v52 &= ~1u;
  v21 = v39[0];
  v39[0] = 0;
  v22 = v47[0];
  v47[0] = v21;
  if (v22)
  {
    v23 = *(_DWORD *)v22 - 2;
    if (*(_DWORD *)v22 != 2)
    {
LABEL_22:
      *(_DWORD *)v22 = v23;
      goto LABEL_23;
    }
    WTF::StringImpl::destroy(v22, v20);
    v22 = v39[0];
    v39[0] = 0;
    if (v22)
    {
      v23 = *(_DWORD *)v22 - 2;
      if (*(_DWORD *)v22 != 2)
        goto LABEL_22;
      WTF::StringImpl::destroy(v22, v38);
    }
  }
LABEL_23:
  WTF::String::number(*((WTF::String **)this + 16));
  WebCore::ResourceResponse::platformLazyInit((uint64_t)&v42, 2);
  WebCore::HTTPHeaderMap::set((WTF::StringImpl *)((char *)v48 + 8), (WTF::StringImpl *)0x15, v39);
  v26 = v39[0];
  v39[0] = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v24);
    else
      *(_DWORD *)v26 -= 2;
  }
  WebCore::addPolicyContainerHeaders((WebCore *)&v42, (WebCore::ResourceResponse *)(*((_QWORD *)this + 4) + 16), v25);
  if (*((_BYTE *)this + 101))
  {
    v28 = (WTF::StringImpl *)*((_QWORD *)this + 13);
    v27 = (WTF::StringImpl *)*((_QWORD *)this + 14);
    v29 = *((_QWORD *)this + 15);
    v39[0] = v28;
    v39[1] = v27;
    v40 = v29;
    if (((unint64_t)v28 & 0x8000000000000000) != 0
      || (uint64_t)v27 < (uint64_t)v28
      || v29 != 0x7FFFFFFFFFFFFFFFLL && (uint64_t)v27 >= v29)
    {
      v40 = 0x8000000000000000;
    }
    WebCore::ParsedContentRange::headerValue((unint64_t *)v39, &v41);
    WebCore::ResourceResponse::platformLazyInit((uint64_t)&v42, 2);
    v61 &= ~0x20u;
    WebCore::HTTPHeaderMap::set((WTF::StringImpl *)((char *)v48 + 8), (WTF::StringImpl *)0x17, &v41);
    v31 = v41;
    v41 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v30);
      else
        *(_DWORD *)v31 -= 2;
    }
  }
  v32 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  ++*((_DWORD *)this + 4);
  v33 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v33 = &off_1E341D600;
  *((_QWORD *)v33 + 1) = this;
  *((_QWORD *)v33 + 2) = this;
  v39[0] = v33;
  (*(void (**)(uint64_t, char *, _DWORD **, WTF::StringImpl **))(*(_QWORD *)v32 + 88))(v32, (char *)this + 8, &v42, v39);
  v35 = v39[0];
  v39[0] = 0;
  if (v35)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v35 + 8))(v35);
  v36 = cf;
  cf = 0;
  if (v36)
    CFRelease(v36);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v42, v34);
}

uint64_t WebCore::MockMediaSourcePrivate::platformType(WebCore::MockMediaSourcePrivate *this)
{
  return 0;
}

const char *WebCore::MockMediaSourcePrivate::logClassName(WebCore::MockMediaSourcePrivate *this)
{
  return "MockMediaSourcePrivate";
}

uint64_t WebCore::MockMediaSourcePrivate::logIdentifier(WebCore::MockMediaSourcePrivate *this)
{
  return *((_QWORD *)this + 27);
}

uint64_t `non-virtual thunk to'WebCore::MockMediaSourcePrivate::logger(WebCore::MockMediaSourcePrivate *this)
{
  return *((_QWORD *)this + 6);
}

const char *`non-virtual thunk to'WebCore::MockMediaSourcePrivate::logClassName(WebCore::MockMediaSourcePrivate *this)
{
  return "MockMediaSourcePrivate";
}

uint64_t `non-virtual thunk to'WebCore::MockMediaSourcePrivate::logIdentifier(WebCore::MockMediaSourcePrivate *this)
{
  return *((_QWORD *)this + 7);
}

void WebCore::MockMediaSample::~MockMediaSample(WebCore::MockMediaSample *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
}

{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::MockMediaSample::trackID(WebCore::MockMediaSample *this)
{
  return *((_QWORD *)this + 11);
}

uint64_t WebCore::MockMediaSample::sizeInBytes(WebCore::MockMediaSample *this)
{
  return 72;
}

float WebCore::MockMediaSample::presentationSize(WebCore::MockMediaSample *this)
{
  return 0.0;
}

uint64_t WebCore::MockMediaSample::offsetTimestampsBy(WebCore::MockMediaSample *this, const WTF::MediaTime *a2)
{
  int v3;
  char v4;
  uint64_t result;
  int v6;
  char v7;

  *((_QWORD *)this + 4) = WTF::MediaTime::operator+();
  *((_DWORD *)this + 10) = v3;
  *((_BYTE *)this + 44) = v4;
  result = WTF::MediaTime::operator+();
  *((_QWORD *)this + 6) = result;
  *((_DWORD *)this + 14) = v6;
  *((_BYTE *)this + 60) = v7;
  return result;
}

_QWORD *WebCore::MockMediaSample::setTimestamps(_QWORD *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  *(_QWORD *)((char *)result + 37) = *(uint64_t *)((char *)a2 + 5);
  result[4] = v3;
  v4 = *a3;
  *(_QWORD *)((char *)result + 53) = *(uint64_t *)((char *)a3 + 5);
  result[6] = v4;
  return result;
}

uint64_t WebCore::MediaSample::isDivisable(WebCore::MediaSample *this)
{
  return 0;
}

void WebCore::MediaSample::divide(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t WebCore::MockMediaSample::platformSampleType(WebCore::MockMediaSample *this)
{
  return 1;
}

uint64_t WebCore::MockSourceBufferPrivate::logger(WebCore::MockSourceBufferPrivate *this)
{
  return *((_QWORD *)this + 47);
}

const char *WebCore::MockSourceBufferPrivate::logClassName(WebCore::MockSourceBufferPrivate *this)
{
  return "MockSourceBufferPrivate";
}

uint64_t WebCore::MockSourceBufferPrivate::logIdentifier(WebCore::MockSourceBufferPrivate *this)
{
  return *((_QWORD *)this + 48);
}

uint64_t WebCore::MockSourceBufferPrivate::platformType(WebCore::MockSourceBufferPrivate *this)
{
  return 0;
}

uint64_t WebCore::MockSourceBufferPrivate::sourceBufferLogger(WebCore::MockSourceBufferPrivate *this)
{
  return *((_QWORD *)this + 47);
}

uint64_t WebCore::MockSourceBufferPrivate::sourceBufferLogIdentifier(WebCore::MockSourceBufferPrivate *this)
{
  return *((_QWORD *)this + 48);
}

_QWORD *WebCore::MockSourceBufferPrivate::flush(WTF::StringImpl ***this, WTF::StringImpl *a2)
{
  WebCore::MockSourceBufferPrivate *v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl **v10;

  v2 = (WebCore::MockSourceBufferPrivate *)this;
  if (*((_DWORD *)this + 84))
  {
    v5 = *((unsigned int *)this + 85);
    if ((_DWORD)v5)
    {
      v6 = this[41];
      v7 = 8 * v5;
      do
      {
        v8 = *v6;
        *v6 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
          {
            v9 = v7;
            v10 = v6;
            WTF::StringImpl::destroy(v8, a2);
            v7 = v9;
            v6 = v10;
          }
          else
          {
            *(_DWORD *)v8 -= 2;
          }
        }
        ++v6;
        v7 -= 8;
      }
      while (v7);
      *((_DWORD *)v2 + 85) = 0;
    }
    this = (WTF::StringImpl ***)*((_QWORD *)v2 + 41);
    if (this)
    {
      *((_QWORD *)v2 + 41) = 0;
      *((_DWORD *)v2 + 84) = 0;
      this = (WTF::StringImpl ***)WTF::fastFree((WTF *)this, a2);
    }
  }
  result = (_QWORD *)WTF::MediaTime::invalidTime((WTF::MediaTime *)this);
  v4 = *(_QWORD *)((char *)result + 5);
  *((_QWORD *)v2 + 39) = *result;
  *(_QWORD *)((char *)v2 + 317) = v4;
  return result;
}

BOOL WebCore::MockSourceBufferPrivate::isReadyForMoreSamples(WebCore::MockSourceBufferPrivate *this)
{
  return !*((_BYTE *)this + 352) || *((_QWORD *)this + 43) > (unint64_t)*((unsigned int *)this + 85);
}

uint64_t WebCore::BlobRegistry::blobRegistryImpl(WebCore::BlobRegistry *this)
{
  return 0;
}

void WebCore::MockVideoTrackPrivate::~MockVideoTrackPrivate(WebCore::MockVideoTrackPrivate *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebCore::MockVideoTrackPrivate::~MockVideoTrackPrivate(this, a2);
  WTF::fastFree(v2, v3);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = off_1E341D180;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  *(_QWORD *)this = off_1E32065F8;
  v5 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  *(_QWORD *)this = &unk_1E340FFE8;
  v7 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  WTF::Vector<std::tuple<WTF::RefPtr<WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>>,WTF::WeakPtr<WebCore::TrackPrivateBaseClient,WTF::DefaultWeakPtrImpl,WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>><WebCore::TrackPrivateBaseClient>>,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
}

uint64_t WebCore::MockVideoTrackPrivate::id(WebCore::MockVideoTrackPrivate *this)
{
  return *((_QWORD *)this + 18);
}

void WebCore::MockMediaDescription::~MockMediaDescription(WebCore::MockMediaDescription *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  *(_QWORD *)this = off_1E320CE90;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  *(_QWORD *)this = off_1E320CE90;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::fastFree(this, a2);
}

BOOL WebCore::MockMediaDescription::isVideo(WebCore::MockMediaDescription *this)
{
  return *((_DWORD *)this + 14) == 1;
}

BOOL WebCore::MockMediaDescription::isAudio(WebCore::MockMediaDescription *this)
{
  return *((_DWORD *)this + 14) == 0;
}

BOOL WebCore::MockMediaDescription::isText(WebCore::MockMediaDescription *this)
{
  return *((_DWORD *)this + 14) == 2;
}

void WebCore::MockAudioTrackPrivate::~MockAudioTrackPrivate(WebCore::MockAudioTrackPrivate *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebCore::MockAudioTrackPrivate::~MockAudioTrackPrivate(this, a2);
  WTF::fastFree(v2, v3);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = off_1E341D260;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  *(_QWORD *)this = off_1E334D168;
  v5 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  *(_QWORD *)this = &unk_1E340FFE8;
  v7 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  WTF::Vector<std::tuple<WTF::RefPtr<WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>>,WTF::WeakPtr<WebCore::TrackPrivateBaseClient,WTF::DefaultWeakPtrImpl,WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>><WebCore::TrackPrivateBaseClient>>,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
}

uint64_t WebCore::MockAudioTrackPrivate::id(WebCore::MockAudioTrackPrivate *this)
{
  return *((_QWORD *)this + 16);
}

void WebCore::MockTextTrackPrivate::~MockTextTrackPrivate(WebCore::MockTextTrackPrivate *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = off_1E341D308;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  *(_QWORD *)this = &unk_1E340FFE8;
  v5 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  WTF::Vector<std::tuple<WTF::RefPtr<WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>>,WTF::WeakPtr<WebCore::TrackPrivateBaseClient,WTF::DefaultWeakPtrImpl,WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>><WebCore::TrackPrivateBaseClient>>,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  void *v9;

  *(_QWORD *)this = off_1E341D308;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  *(_QWORD *)this = &unk_1E340FFE8;
  v5 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  WTF::Vector<std::tuple<WTF::RefPtr<WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>>,WTF::WeakPtr<WebCore::TrackPrivateBaseClient,WTF::DefaultWeakPtrImpl,WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>><WebCore::TrackPrivateBaseClient>>,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
  WTF::fastFree(this, v9);
}

const char *WebCore::InbandTextTrackPrivate::logClassName(WebCore::InbandTextTrackPrivate *this)
{
  return "InbandTextTrackPrivate";
}

uint64_t WebCore::MockTextTrackPrivate::id(WebCore::MockTextTrackPrivate *this)
{
  return *((_QWORD *)this + 12);
}

uint64_t std::__optional_storage_base<WTF::HashMap<WTF::String,WebCore::SecurityOriginData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::MemoryCompactRobinHoodHashTableTraits>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::HashMap<WTF::String,WebCore::SecurityOriginData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::MemoryCompactRobinHoodHashTableTraits>,false>>(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;

  v2 = result;
  if (*(unsigned __int8 *)(result + 24) == *((unsigned __int8 *)a2 + 24))
  {
    if (*(_BYTE *)(result + 24))
    {
      v3 = *a2;
      *a2 = 0;
      v4 = *((_DWORD *)a2 + 4);
      *((_DWORD *)a2 + 4) = 0;
      v5 = *((_BYTE *)a2 + 20);
      *((_BYTE *)a2 + 20) = 0;
      result = *(_QWORD *)result;
      *(_QWORD *)v2 = v3;
      v6 = a2[1];
      a2[1] = 0;
      v7 = (WTF::StringImpl *)*(unsigned int *)(v2 + 8);
      *(_QWORD *)(v2 + 8) = v6;
      *(_DWORD *)(v2 + 16) = v4;
      *(_BYTE *)(v2 + 20) = v5;
      if (result)
        return WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::SecurityOriginData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable((WTF *)result, v7);
    }
  }
  else if (*(_BYTE *)(result + 24))
  {
    result = *(_QWORD *)result;
    if (*(_QWORD *)v2)
      result = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::SecurityOriginData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable((WTF *)result, (WTF::StringImpl *)*(unsigned int *)(v2 + 8));
    *(_BYTE *)(v2 + 24) = 0;
  }
  else
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 13) = 0;
    v8 = *a2;
    *a2 = 0;
    *(_QWORD *)result = v8;
    LODWORD(v8) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 0;
    *(_DWORD *)(result + 8) = v8;
    LODWORD(v8) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = 0;
    *(_DWORD *)(result + 12) = v8;
    LODWORD(v8) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = 0;
    *(_DWORD *)(result + 16) = v8;
    LOBYTE(v8) = *((_BYTE *)a2 + 20);
    *((_BYTE *)a2 + 20) = 0;
    *(_BYTE *)(result + 20) = v8;
    *(_BYTE *)(result + 24) = 1;
  }
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::SecurityOriginData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  char v8;

  if ((_DWORD)a2)
  {
    v3 = a2;
    v4 = (_DWORD *)((char *)this + 32);
    do
    {
      v5 = *v4;
      if ((_DWORD)v5 != -1)
        ((void (*)(char *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_15[v5])(&v8, v4 - 6);
      *v4 = -1;
      v6 = (WTF::StringImpl *)*((_QWORD *)v4 - 4);
      *((_QWORD *)v4 - 4) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v4 += 10;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree(this, a2);
}

void WebCore::createBlobResourceHandle(WebCore *this@<X0>, const WebCore::ResourceRequest *a2@<X1>, WebCore::ResourceHandleClient *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  WebCore::BlobRegistryImpl *v9;

  v7 = WebCore::s_platformStrategies;
  v8 = *(_QWORD *)(WebCore::s_platformStrategies + 40);
  if (!v8)
  {
    v8 = (*(uint64_t (**)(uint64_t, const WebCore::ResourceRequest *, WebCore::ResourceHandleClient *))(*(_QWORD *)WebCore::s_platformStrategies + 40))(WebCore::s_platformStrategies, a2, a3);
    *(_QWORD *)(v7 + 40) = v8;
  }
  v9 = (WebCore::BlobRegistryImpl *)(*(uint64_t (**)(uint64_t, const WebCore::ResourceRequest *, WebCore::ResourceHandleClient *))(*(_QWORD *)v8 + 88))(v8, a2, a3);
  WebCore::BlobRegistryImpl::createResourceHandle(v9, this, a2, a4);
}

void WebCore::loadBlobResourceSynchronously(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *BlobDataFromURL;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  __int128 v18;
  WTF::StringImpl *v19;
  CFTypeRef v20;
  const void *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  const WTF::String *v28;
  _QWORD *v29;
  _QWORD *v30;
  CFTypeRef v31;
  _QWORD *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  __int128 v35;
  __int128 v36;
  WTF::StringImpl *v37;
  int v38;
  __int16 v39;
  CFTypeRef cf;
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v10 = WebCore::s_platformStrategies;
  v11 = *(_QWORD *)(WebCore::s_platformStrategies + 40);
  if (!v11)
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 40))(WebCore::s_platformStrategies);
    *(_QWORD *)(v10 + 40) = v11;
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 88))(v11);
  if ((*(_BYTE *)(a2 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
    *(_BYTE *)(a2 + 184) |= 1u;
  }
  LOBYTE(v33) = 0;
  LOBYTE(v36) = 0;
  BlobDataFromURL = WebCore::BlobRegistryImpl::getBlobDataFromURL(v12, (WTF::URL *)a2, (uint64_t)&v33);
  if ((_BYTE)v36 && DWORD2(v35) != -1)
    ((void (*)(_QWORD **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_15[DWORD2(v35)])(&v32, &v33);
  if ((*(_BYTE *)(a2 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
    *(_BYTE *)(a2 + 184) |= 1u;
  }
  v14 = *(_QWORD *)(a2 + 88);
  if (v14 && *(_DWORD *)(v14 + 4) == 3)
  {
    v25 = *(_QWORD *)(v14 + 8);
    if ((*(_BYTE *)(v14 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v25 & 0xDF) != 0x47 || (*(_BYTE *)(v25 + 1) & 0xDF) != 0x45)
        goto LABEL_11;
      v26 = *(unsigned __int8 *)(v25 + 2);
    }
    else
    {
      if ((*(_WORD *)v25 & 0xFFDF) != 0x47 || (*(_WORD *)(v25 + 2) & 0xFFDF) != 0x45)
        goto LABEL_11;
      v26 = *(unsigned __int16 *)(v25 + 4);
    }
    if ((v26 & 0xFFFFFFDF) == 0x54)
    {
      v33 = (WTF::StringImpl *)&off_1E341D3F0;
      v34 = (WTF::StringImpl *)a4;
      *(_QWORD *)&v35 = a5;
      *((_QWORD *)&v35 + 1) = a6;
      v27 = WTF::fastMalloc((WTF *)0xA0);
      if (*((_BYTE *)WebCore::BlobResourceHandle::BlobResourceHandle((WebCore::BlobResourceHandle *)v27, BlobDataFromURL, (const WebCore::ResourceRequest *)a2, (WebCore::ResourceHandleClient *)&v33, 0)+ 40))
      {
        ++*(_DWORD *)(v27 + 16);
        v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v29 = &off_1E341D5D8;
        v29[1] = v27;
        v32 = v29;
        WTF::callOnMainThread();
        v30 = v32;
        v32 = 0;
        if (v30)
          (*(void (**)(_QWORD *))(*v30 + 8))(v30);
      }
      else
      {
        WebCore::BlobResourceHandle::doStart((WebCore::BlobResourceHandle *)v27, v28);
      }
      if (*(_DWORD *)(v27 + 16) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)(v27 + 8) + 48))(v27 + 8);
      else
        --*(_DWORD *)(v27 + 16);
      return;
    }
  }
LABEL_11:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v15 = v33;
  WebCore::ResourceResponse::platformLazyInit(a5, 1);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v16 = v33;
  if (v15)
    *(_DWORD *)v15 += 2;
  v33 = v15;
  v17 = *(WTF::StringImpl **)a5;
  if (*(_QWORD *)a5)
    *(_DWORD *)v17 += 2;
  v34 = v17;
  v18 = *(_OWORD *)(a5 + 24);
  v35 = *(_OWORD *)(a5 + 8);
  v36 = v18;
  if (v16)
    *(_DWORD *)v16 += 2;
  v37 = v16;
  v38 = 5;
  v39 = 1;
  cf = 0;
  v41 = 1;
  WebCore::ResourceErrorBase::operator=(a4, (uint64_t *)&v33);
  v20 = cf;
  cf = 0;
  v21 = *(const void **)(a4 + 64);
  *(_QWORD *)(a4 + 64) = v20;
  if (v21)
  {
    CFRelease(v21);
    v31 = cf;
    *(_BYTE *)(a4 + 72) = v41;
    cf = 0;
    if (v31)
      CFRelease(v31);
  }
  else
  {
    *(_BYTE *)(a4 + 72) = v41;
    cf = 0;
  }
  v22 = v37;
  v37 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v19);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = v34;
  v34 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v19);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = v33;
  v33 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::destroy(v24, v19);
      if (!v16)
        goto LABEL_31;
      goto LABEL_29;
    }
    *(_DWORD *)v24 -= 2;
  }
  if (!v16)
    goto LABEL_31;
LABEL_29:
  if (*(_DWORD *)v16 == 2)
    WTF::StringImpl::destroy(v16, v19);
  else
    *(_DWORD *)v16 -= 2;
LABEL_31:
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v19);
    else
      *(_DWORD *)v15 -= 2;
  }
}

void WebCore::`anonymous namespace'::BlobResourceSynchronousLoader::~BlobResourceSynchronousLoader(WebCore::_anonymous_namespace_::BlobResourceSynchronousLoader *this)
{
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::`anonymous namespace'::BlobResourceSynchronousLoader::didFail(WebCore::_anonymous_namespace_::BlobResourceSynchronousLoader *this, WebCore::ResourceHandle *a2, const WebCore::ResourceError *a3)
{
  return WebCore::ResourceError::operator=(*((_QWORD *)this + 1), (uint64_t)a3);
}

uint64_t WebCore::`anonymous namespace'::BlobResourceSynchronousLoader::willSendRequestAsync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;

  v5 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t WebCore::`anonymous namespace'::BlobResourceSynchronousLoader::didReceiveResponseAsync(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  __int128 v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  CFTypeRef v14;
  const void *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  uint64_t v24;
  void *v25;
  size_t v26;
  size_t v27;
  size_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  unsigned int v37;
  WTF *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  char *v48;
  size_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  size_t v57;
  uint64_t v58;
  BOOL v59;
  int v60;
  WTF *v61;
  WTF *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  WTF::FileSystemImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  _DWORD *v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  CFTypeRef v79;
  _QWORD *v80;
  WTF *v81;
  WTF *v82;
  uint64_t v83;
  WTF *v84;
  char v85;
  WTF::StringImpl *v86[2];
  __int128 v87;
  __int128 v88;
  WTF::StringImpl *v89[2];
  CFTypeRef cf[2];
  WTF::StringImpl *v91[2];
  int v92;
  uint64_t v93;
  uint64_t v94;
  _DWORD *v95;

  WebCore::ResourceResponse::platformLazyInit(a3, 1);
  if (*(uint64_t *)(a3 + 48) >= 0x80000000)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = v86[0];
    WebCore::ResourceResponse::platformLazyInit(a3, 1);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = v86[0];
    if (v86[0])
      *(_DWORD *)v86[0] += 2;
    v86[0] = v8;
    v10 = *(WTF::StringImpl **)a3;
    if (*(_QWORD *)a3)
      *(_DWORD *)v10 += 2;
    v86[1] = v10;
    v11 = *(_OWORD *)(a3 + 24);
    v87 = *(_OWORD *)(a3 + 8);
    v88 = v11;
    if (v9)
      *(_DWORD *)v9 += 2;
    v89[0] = v9;
    LODWORD(v89[1]) = 4;
    WORD2(v89[1]) = 1;
    cf[0] = 0;
    LOBYTE(cf[1]) = 1;
    v12 = a1[1];
    WebCore::ResourceErrorBase::operator=(v12, (uint64_t *)v86);
    v14 = cf[0];
    cf[0] = 0;
    v15 = *(const void **)(v12 + 64);
    *(_QWORD *)(v12 + 64) = v14;
    if (v15)
    {
      CFRelease(v15);
      v79 = cf[0];
      *(_BYTE *)(v12 + 72) = cf[1];
      cf[0] = 0;
      if (v79)
        CFRelease(v79);
    }
    else
    {
      *(_BYTE *)(v12 + 72) = cf[1];
      cf[0] = 0;
    }
    v16 = v89[0];
    v89[0] = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v13);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v86[1];
    v86[1] = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v13);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v86[0];
    v86[0] = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::destroy(v18, v13);
        if (v9)
        {
LABEL_20:
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy(v9, v13);
          else
            *(_DWORD *)v9 -= 2;
        }
LABEL_22:
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v13);
          else
            *(_DWORD *)v8 -= 2;
        }
        v19 = *a4;
        *a4 = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      }
      *(_DWORD *)v18 -= 2;
    }
    if (v9)
      goto LABEL_20;
    goto LABEL_22;
  }
  v21 = a1[2];
  WebCore::ResourceResponseBase::operator=(v21, a3);
  v22 = *(_QWORD *)(a3 + 240);
  if (v22)
    CFRetain(*(CFTypeRef *)(a3 + 240));
  v23 = *(const void **)(v21 + 240);
  *(_QWORD *)(v21 + 240) = v22;
  if (v23)
    CFRelease(v23);
  *(_BYTE *)(v21 + 248) = *(_BYTE *)(a3 + 248);
  v24 = a1[3];
  WebCore::ResourceResponse::platformLazyInit(a3, 1);
  v26 = *(_QWORD *)(a3 + 48);
  v27 = *(unsigned int *)(v24 + 12);
  if (v26 > v27)
  {
    v28 = *(unsigned int *)(v24 + 8);
    if (v26 > v28)
    {
      v29 = v28 + (v28 >> 2);
      if (v29 >= 0x10)
        v30 = v29 + 1;
      else
        v30 = 16;
      if (v30 <= v26)
        v31 = *(_QWORD *)(a3 + 48);
      else
        v31 = v30;
      if (HIDWORD(v31))
      {
        __break(0xC471u);
LABEL_132:
        __break(1u);
        goto LABEL_133;
      }
      v32 = *(void **)v24;
      v33 = (void *)WTF::fastMalloc((WTF *)v31);
      *(_DWORD *)(v24 + 8) = v31;
      *(_QWORD *)v24 = v33;
      memcpy(v33, v32, v27);
      if (v32)
      {
        if (*(void **)v24 == v32)
        {
          *(_QWORD *)v24 = 0;
          *(_DWORD *)(v24 + 8) = 0;
        }
        WTF::fastFree((WTF *)v32, v25);
      }
    }
  }
  *(_DWORD *)(v24 + 12) = v26;
  if (a2)
    v34 = a2 - 8;
  else
    v34 = 0;
  v35 = a1[3];
  v84 = *(WTF **)v35;
  v36 = (WTF *)*(unsigned int *)(v35 + 12);
  ++*(_DWORD *)(v34 + 16);
  if (!(_DWORD)v36)
  {
    LODWORD(v38) = 0;
    goto LABEL_102;
  }
  v80 = a4;
  v81 = v36;
  v37 = 0;
  v38 = v36;
  do
  {
    if (*(_BYTE *)(v34 + 100))
      break;
    if (*(_DWORD *)(v34 + 96))
      break;
    v39 = *(_QWORD *)(v34 + 128);
    if (!v39)
      break;
    v40 = *(unsigned int *)(v34 + 148);
    v41 = *(_QWORD *)(v34 + 32);
    if (*(_DWORD *)(v41 + 108) <= v40)
      break;
    v42 = *(_QWORD *)(v41 + 96);
    v43 = *(_DWORD *)(v42 + 40 * v40);
    if (v43 == 1)
    {
      if (v36 < v37)
        goto LABEL_132;
      if (!*(_BYTE *)(v34 + 152))
      {
        if (*(_DWORD *)(v34 + 92) <= v40)
          goto LABEL_130;
        v61 = v38;
        v62 = v36;
        v63 = *(_QWORD *)(v34 + 136);
        if (*(_QWORD *)(*(_QWORD *)(v34 + 80) + 8 * v40) - v63 < v39)
          v39 = *(_QWORD *)(*(_QWORD *)(v34 + 80) + 8 * v40) - v63;
        v83 = v39;
        v64 = *(_QWORD *)(v34 + 56);
        if (*(_BYTE *)(*(_QWORD *)(v42 + 40 * v40 + 16) + 32))
        {
          WebCore::BlobDataFileReference::generateReplacementFile(*(WTF::StringImpl ***)(v42
                                                                                       + 40 * v40
                                                                                       + 16));
          v63 = *(_QWORD *)(v34 + 136);
        }
        if (*(_DWORD *)v64 == -1)
        {
          v65 = *(_QWORD *)(v42 + 40 * v40 + 24);
          v66 = WTF::FileSystemImpl::openFile();
          *(_DWORD *)v64 = v66;
          if (v66 == -1 || (v25 = (void *)(v65 + v63), v65 + v63 >= 1) && WTF::FileSystemImpl::seekFile() < 0)
          {
            v60 = 0;
            *(_QWORD *)(v34 + 136) = 0;
            *(_DWORD *)(v34 + 96) = 4;
            v36 = v62;
            v38 = v61;
            goto LABEL_89;
          }
          *(_QWORD *)(v64 + 8) = 0;
          *(_QWORD *)(v64 + 16) = v83;
        }
        *(_QWORD *)(v34 + 136) = 0;
        *(_BYTE *)(v34 + 152) = 1;
        v36 = v62;
        v38 = v61;
      }
      v67 = *(WTF::FileSystemImpl **)(v34 + 56);
      if (*(_DWORD *)v67 == -1)
        goto LABEL_88;
      LODWORD(v68) = (_DWORD)v36 - v37;
      v69 = *((_QWORD *)v67 + 1);
      if (*((_QWORD *)v67 + 2) - v69 < (int)((_DWORD)v36 - v37))
        v68 = *((_QWORD *)v67 + 2) - v69;
      if ((int)v68 < 1)
        goto LABEL_94;
      v60 = WTF::FileSystemImpl::readFromFile();
      if (v60 < 0)
      {
LABEL_88:
        v60 = 0;
        *(_DWORD *)(v34 + 96) = 4;
      }
      else
      {
        if (!v60)
        {
          v67 = *(WTF::FileSystemImpl **)(v34 + 56);
          if (*(_DWORD *)v67 != -1)
          {
LABEL_94:
            WTF::FileSystemImpl::closeFile(v67, (int *)v25);
            *(_DWORD *)v67 = -1;
          }
          v60 = 0;
          *(_BYTE *)(v34 + 152) = 0;
          ++*(_DWORD *)(v34 + 148);
          goto LABEL_89;
        }
        *((_QWORD *)v67 + 1) += v60;
        *(_QWORD *)(v34 + 128) -= v60;
      }
    }
    else if (v43)
    {
      v60 = 0;
    }
    else
    {
      if (v36 < v37)
        goto LABEL_132;
      v82 = v38;
      v44 = (char *)v36 - v37;
      v45 = v42 + 40 * v40;
      v47 = *(_QWORD *)(v45 + 32);
      v46 = (uint64_t *)(v45 + 32);
      v48 = (char *)(v47 - *(_QWORD *)(v34 + 136));
      if ((uint64_t)v44 >= (uint64_t)v48)
        v44 = v48;
      if (v39 >= (uint64_t)v44)
        v49 = (size_t)v44;
      else
        v49 = *(_QWORD *)(v34 + 128);
      v50 = *(v46 - 3);
      v51 = *(unsigned int *)(v50 + 24);
      if ((_DWORD)v51 == -1
        || (v86[0] = (WTF::StringImpl *)&v85,
            v52 = ((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v51])(v86, v50 + 8), v53 = *(unsigned int *)(v50 + 24), (_DWORD)v53 == -1))
      {
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_130:
        __break(0xC471u);
LABEL_133:
        JUMPOUT(0x1962E2F80);
      }
      v54 = v52;
      v86[0] = (WTF::StringImpl *)&v85;
      v55 = ((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v53])(v86, v50 + 8);
      v56 = *(_QWORD *)(v34 + 136) + *(_QWORD *)(v42 + 40 * v40 + 24);
      if (v55 < v56)
        goto LABEL_132;
      memcpy((char *)v84 + v37, (const void *)(v54 + v56), v49);
      v57 = *(_QWORD *)(v34 + 136) + v49;
      *(_QWORD *)(v34 + 128) -= v49;
      *(_QWORD *)(v34 + 136) = v57;
      v58 = *v46;
      v59 = *v46 == -1;
      v36 = v81;
      if (v59)
      {
        if (*(_DWORD *)(v42 + 40 * v40) == 1)
        {
          v71 = *(_QWORD *)(v42 + 40 * v40 + 16);
          if (*(_BYTE *)(v71 + 32))
            WebCore::BlobDataFileReference::generateReplacementFile(*(WTF::StringImpl ***)(v42
                                                                                         + 40 * v40
                                                                                         + 16));
          v58 = *(_QWORD *)(v71 + 40);
        }
        else
        {
          v58 = -1;
        }
      }
      if (v57 == v58)
      {
        ++*(_DWORD *)(v34 + 148);
        *(_QWORD *)(v34 + 136) = 0;
      }
      v60 = v49;
      v38 = v82;
    }
LABEL_89:
    v70 = v60 & ~(v60 >> 31);
    v37 += v70;
    v38 = (WTF *)((char *)v38 - v70);
  }
  while (v38);
  a4 = v80;
LABEL_102:
  if (!*(_BYTE *)(v34 + 100) && !*(_DWORD *)(v34 + 96))
  {
    if ((int)v36 - (int)v38 < 1)
    {
      if ((_DWORD)v36 == (_DWORD)v38)
      {
        if (*(_BYTE *)(v34 + 40))
        {
          ++*(_DWORD *)(v34 + 16);
          v72 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v72 = &off_1E341D628;
          *((_QWORD *)v72 + 1) = v34;
          v86[0] = v72;
          WTF::callOnMainThread();
          v73 = v86[0];
          v86[0] = 0;
          if (v73)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v73 + 8))(v73);
        }
        else
        {
          v74 = *(_QWORD *)(*(_QWORD *)(v34 + 24) + 8);
          if (v74)
          {
            v92 = 0;
            *(_OWORD *)cf = 0u;
            *(_OWORD *)v91 = 0u;
            v88 = 0u;
            *(_OWORD *)v89 = 0u;
            *(_OWORD *)v86 = 0u;
            v87 = 0u;
            v93 = -1;
            v94 = -1;
            v95 = 0;
            (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v74 + 40))(v74, v34 + 8, v86);
            v76 = v95;
            v95 = 0;
            if (v76)
              WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v76, v75);
            v77 = v91[1];
            v91[1] = 0;
            if (v77)
            {
              if (*(_DWORD *)v77 == 2)
                WTF::StringImpl::destroy(v77, v75);
              else
                *(_DWORD *)v77 -= 2;
            }
          }
        }
      }
    }
    else
    {
      WebCore::BlobResourceHandle::notifyReceiveData((uint64_t *)v34, v84, v36);
    }
  }
  if (*(_DWORD *)(v34 + 16) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v34 + 8) + 48))(v34 + 8);
  else
    --*(_DWORD *)(v34 + 16);
  v78 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v78 + 16))(v78);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
}

uint64_t WebCore::`anonymous namespace'::BlobResourceSynchronousLoader::canAuthenticateAgainstProtectionSpaceAsync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t WebCore::ResourceHandleClient::willCacheResponseAsync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t WebCore::ResourceHandleClient::shouldUseCredentialStorage(WebCore::ResourceHandleClient *this, WebCore::ResourceHandle *a2)
{
  return 0;
}

void WebCore::ResourceHandleClient::connectionProperties(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::FileStreamClient::~FileStreamClient(WebCore::FileStreamClient *this)
{
  JUMPOUT(0x19AEA7644);
}

unint64_t WTF::Vector<WebCore::SourceBufferPrivateClient::InitializationSegment::TextTrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::SourceBufferPrivateClient::InitializationSegment::TextTrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::SourceBufferPrivateClient::InitializationSegment::TextTrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::SourceBufferPrivateClient::InitializationSegment::TextTrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int v2;
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  unsigned int *v7;
  unsigned int **v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  if (result[2] < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * a2));
      v3[2] = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = (unsigned int **)v4;
        do
        {
          v9 = *v8;
          *v8 = 0;
          *(_QWORD *)v7 = v9;
          v10 = v8[1];
          v8[1] = 0;
          *((_QWORD *)v7 + 1) = v10;
          v11 = v8[1];
          v8[1] = 0;
          if (v11)
          {
            v12 = v11 + 2;
            do
            {
              v13 = __ldaxr(v12);
              v14 = v13 - 1;
            }
            while (__stlxr(v14, v12));
            if (!v14)
            {
              atomic_store(1u, v11 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
            }
          }
          result = *v8;
          *v8 = 0;
          if (result)
          {
            v15 = result + 2;
            do
            {
              v16 = __ldaxr(v15);
              v17 = v16 - 1;
            }
            while (__stlxr(v17, v15));
            if (!v17)
            {
              atomic_store(1u, result + 2);
              result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
            }
          }
          v7 += 4;
          v8 += 2;
        }
        while (v8 != (unsigned int **)((char *)v4 + 16 * v5));
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

unsigned int *WTF::ThreadSafeRefCounted<WebCore::BlobData,(WTF::DestructionThread)0>::deref(unsigned int *result, void *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v2 = result;
  do
  {
    v3 = __ldaxr(result);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, result));
  if (!v4)
  {
    atomic_store(1u, result);
    WTF::Vector<WebCore::BlobDataItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(result + 24), a2);
    WebCore::PolicyContainer::~PolicyContainer((WebCore::PolicyContainer *)(v2 + 4), v5);
    v7 = (WTF::StringImpl *)*((_QWORD *)v2 + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    return (unsigned int *)WTF::fastFree((WTF *)v2, v6);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::BlobDataItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;
  uint64_t v5;
  _DWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;
  uint64_t v12;
  char v13;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    v4 = *(WTF **)a1;
    v5 = *(_QWORD *)a1 + 40 * v3;
    do
    {
      v6 = (_DWORD *)*((_QWORD *)v4 + 2);
      *((_QWORD *)v4 + 2) = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      v7 = (unsigned int *)*((_QWORD *)v4 + 1);
      *((_QWORD *)v4 + 1) = 0;
      if (v7)
      {
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          atomic_store(1u, v7);
          v12 = v7[6];
          if ((_DWORD)v12 != -1)
            ((void (*)(char *, unsigned int *))off_1E341D4C8[v12])(&v13, v7 + 2);
          v7[6] = -1;
          WTF::fastFree((WTF *)v7, a2);
        }
      }
      v4 = (WTF *)((char *)v4 + 40);
    }
    while (v4 != (WTF *)v5);
  }
  v10 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2);
  }
  return a1;
}

__n128 WTF::Vector<WebCore::BlobDataItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::BlobDataItem>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;

  v3 = WTF::Vector<WebCore::BlobDataItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 40 * *(unsigned int *)(a1 + 12);
  *(_DWORD *)v4 = *(_DWORD *)v3;
  v5 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v4 + 8) = v5;
  v6 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v4 + 16) = v6;
  result = *(__n128 *)(v3 + 24);
  *(__n128 *)(v4 + 24) = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::BlobDataItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v7;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v7 = a3 - v5;
    WTF::Vector<WebCore::BlobDataItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v7;
  }
  else
  {
    WTF::Vector<WebCore::BlobDataItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::BlobDataItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  WTF *v6;
  unsigned int v7;
  int v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      v5 = result;
      v6 = *(WTF **)result;
      v7 = *(_DWORD *)(result + 12);
      v8 = 40 * v4;
      result = WTF::fastMalloc((WTF *)(40 * v4));
      *(_DWORD *)(v5 + 8) = (v8 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)v5 = result;
      if (v7)
      {
        v10 = result;
        result = (uint64_t)v6;
        do
        {
          *(_DWORD *)v10 = *(_DWORD *)result;
          v11 = *(_QWORD *)(result + 8);
          *(_QWORD *)(result + 8) = 0;
          *(_QWORD *)(v10 + 8) = v11;
          v12 = *(_QWORD *)(result + 16);
          *(_QWORD *)(result + 16) = 0;
          *(_QWORD *)(v10 + 16) = v12;
          *(_OWORD *)(v10 + 24) = *(_OWORD *)(result + 24);
          WebCore::BlobDataItem::~BlobDataItem((WebCore::BlobDataItem *)result, v9);
          result = v13 + 40;
          v10 += 40;
        }
        while ((WTF *)result != (WTF *)((char *)v6 + 40 * v7));
      }
      if (v6)
      {
        if (*(WTF **)v5 == v6)
        {
          *(_QWORD *)v5 = 0;
          *(_DWORD *)(v5 + 8) = 0;
        }
        return WTF::fastFree(v6, v9);
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::BlobDataItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = *(_DWORD *)(result + 12);
      v5 = 40 * a2;
      result = WTF::fastMalloc((WTF *)(40 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        result = (uint64_t)v3;
        do
        {
          *(_DWORD *)v7 = *(_DWORD *)result;
          v8 = *(_QWORD *)(result + 8);
          *(_QWORD *)(result + 8) = 0;
          *(_QWORD *)(v7 + 8) = v8;
          v9 = *(_QWORD *)(result + 16);
          *(_QWORD *)(result + 16) = 0;
          *(_QWORD *)(v7 + 16) = v9;
          *(_OWORD *)(v7 + 24) = *(_OWORD *)(result + 24);
          WebCore::BlobDataItem::~BlobDataItem((WebCore::BlobDataItem *)result, v6);
          result = v10 + 40;
          v7 += 40;
        }
        while ((WTF *)result != (WTF *)((char *)v3 + 40 * v4));
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::BlobRegistryImpl::createDataSegment(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BlobData &)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E341D4F8;
  WebCore::BlobRegistryImpl::createDataSegment(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BlobData &)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::BlobRegistryImpl::createDataSegment(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BlobData &)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E341D4F8;
  WebCore::BlobRegistryImpl::createDataSegment(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BlobData &)::$_0::~$_0((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

void WTF::Detail::CallableWrapper<WebCore::BlobRegistryImpl::createDataSegment(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BlobData &)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  const WTF::String *v7;
  int *v8;
  const WTF::String *v9;
  void *v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  __int128 v16;
  void *v17;
  unsigned int v18;
  void *__dst;
  unsigned int v20;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(unsigned int *)(v1 + 24);
  if ((_DWORD)v2 != -1)
  {
    __dst = &v17;
    v4 = ((uint64_t (*)(void **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v2])(&__dst, v1 + 8);
    v5 = *(unsigned int *)(v1 + 24);
    if ((_DWORD)v5 != -1)
    {
      v6 = (const void *)v4;
      __dst = &v17;
      v7 = (const WTF::String *)((uint64_t (*)(void **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v5])(&__dst, v1 + 8);
      WTF::FileSystemImpl::createMappedFileData((WTF::FileSystemImpl *)(a1 + 24), v7, 0, v8);
      if (!__dst)
      {
        v17 = 0;
        v18 = 0;
        WTF::FileSystemImpl::MappedFileData::~MappedFileData((WTF::FileSystemImpl::MappedFileData *)&__dst);
LABEL_8:
        WTF::FileSystemImpl::MappedFileData::~MappedFileData((WTF::FileSystemImpl::MappedFileData *)&v17);
        return;
      }
      WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)(a1 + 24), v9);
      if ((unint64_t)v7 <= v20)
      {
        memcpy(__dst, v6, (size_t)v7);
        WTF::FileSystemImpl::finalizeMappedFileData((WTF::FileSystemImpl *)&__dst, v7);
        v10 = __dst;
        __dst = 0;
        v17 = v10;
        v11 = v20;
        v20 = 0;
        v18 = v11;
        WTF::FileSystemImpl::MappedFileData::~MappedFileData((WTF::FileSystemImpl::MappedFileData *)&__dst);
        if (v10)
        {
          v16 = *(_OWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          v12 = WTF::fastMalloc((WTF *)0x20);
          *(_DWORD *)v12 = 1;
          v17 = 0;
          *(_QWORD *)(v12 + 8) = v10;
          v18 = 0;
          *(_DWORD *)(v12 + 16) = v11;
          *(_DWORD *)(v12 + 24) = 2;
          v13 = (char *)WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v13 = &off_1E341D520;
          *(_OWORD *)(v13 + 8) = v16;
          *((_QWORD *)v13 + 3) = v12;
          __dst = v13;
          WTF::callOnMainThread();
          v14 = __dst;
          __dst = 0;
          if (v14)
            (*(void (**)(void *))(*(_QWORD *)v14 + 8))(v14);
        }
        goto LABEL_8;
      }
      __break(1u);
    }
  }
  v15 = std::__throw_bad_variant_access[abi:sn180100]();
  WTF::Detail::CallableWrapper<WebCore::BlobRegistryImpl::createDataSegment(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BlobData &)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(v15);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::BlobRegistryImpl::createDataSegment(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BlobData &)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  WTF::StringImpl *v12;
  WTF *v13;

  *a1 = &off_1E341D520;
  v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::DataSegment,(WTF::DestructionThread)0>::deref(v3, a2);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebCore::DataSegment,(WTF::DestructionThread)0>::deref(v4, a2);
  v5 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v13 = (WTF *)v5;
      WTF::Vector<WebCore::BlobDataItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v5 + 24), a2);
      WebCore::PolicyContainer::~PolicyContainer((WTF *)((char *)v13 + 16), v9);
      v11 = v13;
      v12 = (WTF::StringImpl *)*((_QWORD *)v13 + 1);
      *((_QWORD *)v13 + 1) = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
        {
          WTF::StringImpl::destroy(v12, v10);
          v11 = v13;
        }
        else
        {
          *(_DWORD *)v12 -= 2;
        }
      }
      WTF::fastFree(v11, v10);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::BlobRegistryImpl::createDataSegment(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BlobData &)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  WTF::StringImpl *v12;
  WTF *v13;

  *(_QWORD *)this = &off_1E341D520;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::DataSegment,(WTF::DestructionThread)0>::deref(v3, a2);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebCore::DataSegment,(WTF::DestructionThread)0>::deref(v4, a2);
  v5 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v13 = (WTF *)v5;
      WTF::Vector<WebCore::BlobDataItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v5 + 24), a2);
      WebCore::PolicyContainer::~PolicyContainer((WTF *)((char *)v13 + 16), v9);
      v11 = v13;
      v12 = (WTF::StringImpl *)*((_QWORD *)v13 + 1);
      *((_QWORD *)v13 + 1) = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
        {
          WTF::StringImpl::destroy(v12, v10);
          v11 = v13;
        }
        else
        {
          *(_DWORD *)v12 -= 2;
        }
      }
      WTF::fastFree(v11, v10);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::BlobRegistryImpl::createDataSegment(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BlobData &)::$_0::operator()(void)::{lambda(void)#1},void>::call(_QWORD *result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int **v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  char v11;

  v2 = result[1];
  v3 = *(unsigned int *)(v2 + 108);
  if ((_DWORD)v3)
  {
    v4 = (unsigned int **)(*(_QWORD *)(v2 + 96) + 8);
    v5 = 40 * v3;
    while (*v4 != (unsigned int *)result[2])
    {
      v4 += 5;
      v5 -= 40;
      if (!v5)
        return result;
    }
    v6 = (unsigned int *)result[3];
    result[3] = 0;
    v7 = *v4;
    *v4 = v6;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        v10 = v7[6];
        if ((_DWORD)v10 != -1)
          ((void (*)(char *, unsigned int *))off_1E341D4C8[v10])(&v11, v7 + 2);
        v7[6] = -1;
        return (_QWORD *)WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
  return result;
}

WTF *WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  WTF *result;
  int v14;
  unsigned int v15;
  int v16;

  v3 = *a1;
  if (!*a1)
    return 0;
  v6 = *((_DWORD *)a1 + 2);
  v7 = v6 - 1;
  v8 = *((_DWORD *)a1 + 4);
  v9 = *((_DWORD *)*a2 + 4);
  if (v9 < 0x100)
  {
    v10 = WTF::StringImpl::hashSlowCase(*a2);
    v3 = *a1;
  }
  else
  {
    v10 = v9 >> 8;
  }
  v11 = (v10 ^ v8) & v7;
  v12 = v3 + 16 * v11;
  result = *(WTF **)v12;
  if (*(_QWORD *)v12)
  {
    v14 = -1;
    while (1)
    {
      v15 = *((_DWORD *)result + 4);
      v16 = v15 < 0x100 ? WTF::StringImpl::hashSlowCase(result) : v15 >> 8;
      if (++v14 > ((v11 + v6 - ((v16 ^ v8) & v7)) & v7))
        break;
      if (v16 == v10 && (WTF::equal(*(WTF **)v12, *a2, a3) & 1) != 0)
        return *(WTF **)(v12 + 8);
      v11 = (v11 + 1) & v7;
      v12 = *a1 + 16 * v11;
      result = *(WTF **)v12;
      if (!*(_QWORD *)v12)
        return result;
    }
    return 0;
  }
  return result;
}

uint64_t WTF::HashMap<WTF::String,WebCore::SecurityOriginData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebCore::SecurityOriginData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t result;
  uint64_t v19;
  char v20;
  _OWORD v21[2];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  if (*a2)
  {
    v7 = *((_DWORD *)a2 + 2);
    v8 = v7 - 1;
    v9 = *((_DWORD *)a2 + 4);
    v10 = *((_DWORD *)*a3 + 4);
    if (v10 < 0x100)
    {
      v11 = WTF::StringImpl::hashSlowCase(*a3);
      v4 = *a2;
    }
    else
    {
      v11 = v10 >> 8;
    }
    v12 = (v11 ^ v9) & v8;
    v13 = v4 + 40 * v12;
    v14 = *(WTF **)v13;
    if (*(_QWORD *)v13)
    {
      v15 = -1;
      do
      {
        v16 = *((_DWORD *)v14 + 4);
        v17 = v16 < 0x100 ? WTF::StringImpl::hashSlowCase(v14) : v16 >> 8;
        if (++v15 > ((v12 + v7 - ((v17 ^ v9) & v8)) & v8))
          break;
        if (v17 == v11)
        {
          result = WTF::equal(*(WTF **)v13, *a3, (const WTF::StringImpl *)a3);
          if ((result & 1) != 0)
          {
            *(_BYTE *)a1 = 0;
            *(_DWORD *)(a1 + 24) = -1;
            v19 = *(unsigned int *)(v13 + 32);
            if ((_DWORD)v19 != -1)
            {
              result = ((uint64_t (*)(_OWORD *, uint64_t, uint64_t))off_1E341D548[v19])(v21, a1, v13 + 8);
              *(_DWORD *)(a1 + 24) = v19;
            }
            return result;
          }
        }
        v12 = (v12 + 1) & v8;
        v13 = *a2 + 40 * v12;
        v14 = *(WTF **)v13;
      }
      while (*(_QWORD *)v13);
    }
  }
  memset(v21, 0, sizeof(v21));
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  return (uint64_t)_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJSA_SI_EEEEEEDcSM_DpT0_((uint64_t)&v20, (WTF::StringImpl *)v21);
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t result;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;

  v4 = *a2;
  *a2 = (WTF::StringImpl *)-1;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (unsigned int *)a2[1];
  a2[1] = 0;
  if (v5)
    WTF::ThreadSafeRefCounted<WebCore::BlobData,(WTF::DestructionThread)0>::deref(v5, a2);
  *a2 = 0;
  a2[1] = 0;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 12) - 1;
  *(_DWORD *)(a1 + 12) = v7;
  v8 = v6 - 1;
  v9 = *(_QWORD *)a1;
  v10 = (unint64_t)a2 - *(_QWORD *)a1;
  v11 = (v10 >> 4) + 1;
  v12 = v11 & (v6 - 1);
  v13 = (uint64_t *)(*(_QWORD *)a1 + 16 * v12);
  result = *v13;
  if (*v13)
  {
    v15 = *(_DWORD *)(a1 + 16);
    v16 = v9 + (v10 & 0xFFFFFFFF0);
    v17 = v11 & v8;
    do
    {
      v18 = *(_DWORD *)(result + 16);
      if (v18 < 0x100)
        result = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)result);
      else
        result = v18 >> 8;
      if (((v17 + v6 - ((result ^ v15) & v8)) & v8) == 0)
        break;
      WTF::GenericHashTraits<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>>::assignToEmpty<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>>(v16, (WTF::StringImpl *)v13);
      v20 = v9 + 16 * v12;
      v21 = *(_QWORD *)(v20 + 8);
      *(_QWORD *)(v20 + 8) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr((unsigned int *)v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, (unsigned int *)v21));
        if (!v23)
        {
          atomic_store(1u, (unsigned int *)v21);
          WTF::Vector<WebCore::BlobDataItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v21 + 96, v19);
          WebCore::PolicyContainer::~PolicyContainer((WebCore::PolicyContainer *)(v21 + 16), v25);
          v27 = *(WTF::StringImpl **)(v21 + 8);
          *(_QWORD *)(v21 + 8) = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v26);
            else
              *(_DWORD *)v27 -= 2;
          }
          WTF::fastFree((WTF *)v21, v26);
        }
      }
      v24 = (WTF::StringImpl *)*v13;
      *v13 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v19);
        else
          *(_DWORD *)v24 -= 2;
      }
      *v13 = 0;
      v13[1] = 0;
      v12 = (v17 + 1) & v8;
      v9 = *(_QWORD *)a1;
      v16 = *(_QWORD *)a1 + 16 * v17;
      v13 = (uint64_t *)(*(_QWORD *)a1 + 16 * v12);
      result = *v13;
      v17 = (v17 + 1) & v8;
    }
    while (*v13);
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
  }
  if (v6 >= 9 && 6 * v7 < v6)
    return WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(a1, v6 >> 1);
  return result;
}

WTF::StringImpl *WTF::GenericHashTraits<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>>::assignToEmpty<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  WTF::StringImpl *result;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  result = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  v6 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  if (v7)
  {
    do
    {
      v8 = __ldaxr((unsigned int *)v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v7));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)v7);
      WTF::Vector<WebCore::BlobDataItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v7 + 96, a2);
      WebCore::PolicyContainer::~PolicyContainer((WebCore::PolicyContainer *)(v7 + 16), v10);
      v12 = *(WTF::StringImpl **)(v7 + 8);
      *(_QWORD *)(v7 + 8) = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v11);
        else
          *(_DWORD *)v12 -= 2;
      }
      return (WTF::StringImpl *)WTF::fastFree((WTF *)v7, v11);
    }
  }
  return result;
}

uint64_t *WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      WTF::Vector<WebCore::BlobDataItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4 + 96, a2);
      WebCore::PolicyContainer::~PolicyContainer((WebCore::PolicyContainer *)(v4 + 16), v8);
      v10 = *(WTF::StringImpl **)(v4 + 8);
      *(_QWORD *)(v4 + 8) = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v9);
        else
          *(_DWORD *)v10 -= 2;
      }
      WTF::fastFree((WTF *)v4, v9);
    }
  }
  return a1;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(uint64_t a1, unsigned int a2)
{
  uint64_t *v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t *v42;
  uint64_t v43;

  v3 = (uint64_t *)a1;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(WTF **)a1;
  v6 = WTF::fastZeroedMalloc((WTF *)(16 * a2));
  *v3 = v6;
  *((_DWORD *)v3 + 2) = a2;
  result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v6);
  v9 = v4;
  *((_DWORD *)v3 + 4) = result;
  *((_BYTE *)v3 + 20) = 0;
  if ((_DWORD)v4)
  {
    v10 = 0;
    v42 = v3;
    v43 = v4;
    do
    {
      v11 = (char *)v5 + 16 * v10;
      v12 = *(WTF::StringImpl **)v11;
      if (*(_QWORD *)v11)
      {
        v17 = *((_DWORD *)v3 + 2);
        v18 = *((_DWORD *)v3 + 4);
        v19 = *((_DWORD *)v12 + 4);
        if (v19 < 0x100)
        {
          v20 = WTF::StringImpl::hashSlowCase(v12);
          v9 = v43;
        }
        else
        {
          v20 = v19 >> 8;
        }
        v21 = v17 - 1;
        v22 = (v20 ^ v18) & (v17 - 1);
        v23 = (WTF::StringImpl *)(*v3 + 16 * v22);
        v24 = *(WTF::StringImpl **)v23;
        if (*(_QWORD *)v23)
        {
          v32 = 0;
          do
          {
            v33 = *((_DWORD *)v24 + 4);
            if (v33 < 0x100)
            {
              v34 = WTF::StringImpl::hashSlowCase(v24);
              v9 = v43;
            }
            else
            {
              v34 = v33 >> 8;
            }
            v35 = (v22 + v17 - ((v34 ^ v18) & v21)) & v21;
            if (v32 > v35)
            {
              std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>>((WTF::StringImpl **)v5 + 2 * v10, v23);
              v9 = v43;
              v32 = v35;
            }
            v22 = (v22 + 1) & v21;
            ++v32;
            v3 = v42;
            v23 = (WTF::StringImpl *)(*v42 + 16 * v22);
            v24 = *(WTF::StringImpl **)v23;
          }
          while (*(_QWORD *)v23);
        }
        v25 = *(WTF::StringImpl **)v11;
        *(_QWORD *)v11 = 0;
        v26 = *(WTF::StringImpl **)v23;
        *(_QWORD *)v23 = v25;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
          {
            WTF::StringImpl::destroy(v26, v8);
            v9 = v43;
          }
          else
          {
            *(_DWORD *)v26 -= 2;
          }
        }
        v27 = (char *)v5 + 16 * v10;
        v28 = *((_QWORD *)v27 + 1);
        *((_QWORD *)v27 + 1) = 0;
        v29 = *((_QWORD *)v23 + 1);
        *((_QWORD *)v23 + 1) = v28;
        if (v29)
        {
          do
          {
            v30 = __ldaxr((unsigned int *)v29);
            v31 = v30 - 1;
          }
          while (__stlxr(v31, (unsigned int *)v29));
          if (!v31)
          {
            atomic_store(1u, (unsigned int *)v29);
            WTF::Vector<WebCore::BlobDataItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v29 + 96, v8);
            WebCore::PolicyContainer::~PolicyContainer((WebCore::PolicyContainer *)(v29 + 16), v39);
            v41 = *(WTF::StringImpl **)(v29 + 8);
            *(_QWORD *)(v29 + 8) = 0;
            if (v41)
            {
              if (*(_DWORD *)v41 == 2)
                WTF::StringImpl::destroy(v41, v40);
              else
                *(_DWORD *)v41 -= 2;
            }
            WTF::fastFree((WTF *)v29, v40);
            v9 = v43;
          }
        }
      }
      v13 = *((_QWORD *)v11 + 1);
      *((_QWORD *)v11 + 1) = 0;
      if (v13)
      {
        do
        {
          v14 = __ldaxr((unsigned int *)v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, (unsigned int *)v13));
        if (!v15)
        {
          atomic_store(1u, (unsigned int *)v13);
          WTF::Vector<WebCore::BlobDataItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v13 + 96, v8);
          WebCore::PolicyContainer::~PolicyContainer((WebCore::PolicyContainer *)(v13 + 16), v36);
          v38 = *(WTF::StringImpl **)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 2)
              WTF::StringImpl::destroy(v38, v37);
            else
              *(_DWORD *)v38 -= 2;
          }
          WTF::fastFree((WTF *)v13, v37);
          v9 = v43;
        }
      }
      v16 = *(WTF::StringImpl **)v11;
      *(_QWORD *)v11 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
        {
          WTF::StringImpl::destroy(v16, v8);
          v9 = v43;
        }
        else
        {
          *(_DWORD *)v16 -= 2;
        }
      }
      ++v10;
    }
    while (v10 != v9);
  }
  else if (!v5)
  {
    return result;
  }
  return WTF::fastFree(v5, v8);
}

WTF::StringImpl *std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>>(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  unsigned int v10;
  unsigned int v11;
  WTF::StringImpl *result;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;

  v5 = *a1;
  v4 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v6 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  v7 = *a1;
  *a1 = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v9 = a1[1];
  a1[1] = v8;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      WTF::Vector<WebCore::BlobDataItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9 + 96, a2);
      WebCore::PolicyContainer::~PolicyContainer((WTF::StringImpl *)((char *)v9 + 16), v16);
      v18 = (WTF::StringImpl *)*((_QWORD *)v9 + 1);
      *((_QWORD *)v9 + 1) = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v17);
        else
          *(_DWORD *)v18 -= 2;
      }
      WTF::fastFree(v9, v17);
    }
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v5;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  v13 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      WTF::Vector<WebCore::BlobDataItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v13 + 96, a2);
      WebCore::PolicyContainer::~PolicyContainer((WebCore::PolicyContainer *)(v13 + 16), v19);
      v21 = *(WTF::StringImpl **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v20);
        else
          *(_DWORD *)v21 -= 2;
      }
      return (WTF::StringImpl *)WTF::fastFree((WTF *)v13, v20);
    }
  }
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  WTF **v12;
  WTF *v13;
  int v14;
  unsigned int v15;
  int v16;

  v3 = *a1;
  v4 = *((unsigned int *)a1 + 2);
  if (!*a1)
    return 16 * v4;
  v7 = v4 - 1;
  v8 = *((_DWORD *)a1 + 4);
  v9 = *((_DWORD *)*a2 + 4);
  if (v9 < 0x100)
  {
    v10 = WTF::StringImpl::hashSlowCase(*a2);
    v3 = *a1;
  }
  else
  {
    v10 = v9 >> 8;
  }
  v11 = (v10 ^ v8) & v7;
  v12 = (WTF **)(v3 + 16 * v11);
  v13 = *v12;
  if (*v12)
  {
    v14 = -1;
    while (1)
    {
      v15 = *((_DWORD *)v13 + 4);
      v16 = v15 < 0x100 ? WTF::StringImpl::hashSlowCase(v13) : v15 >> 8;
      if (++v14 > ((v11 + v4 - ((v16 ^ v8) & v7)) & v7))
        break;
      if (v16 == v10 && (WTF::equal(*v12, *a2, a3) & 1) != 0)
        return (uint64_t)v12;
      v3 = *a1;
      v11 = (v11 + 1) & v7;
      v12 = (WTF **)(*a1 + 16 * v11);
      v13 = *v12;
      if (!*v12)
        return v3 + 16 * *((unsigned int *)a1 + 2);
    }
    v3 = *a1;
  }
  return v3 + 16 * *((unsigned int *)a1 + 2);
}

WTF **WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  WTF **v12;
  WTF *v13;
  int v14;
  unsigned int v15;
  int v16;

  v3 = *a1;
  if (*a1)
  {
    v6 = *((_DWORD *)a1 + 2);
    v7 = v6 - 1;
    v8 = *((_DWORD *)a1 + 4);
    v9 = *((_DWORD *)*a2 + 4);
    if (v9 < 0x100)
    {
      v10 = WTF::StringImpl::hashSlowCase(*a2);
      v3 = *a1;
    }
    else
    {
      v10 = v9 >> 8;
    }
    v11 = (v10 ^ v8) & v7;
    v12 = (WTF **)(v3 + 16 * v11);
    v13 = *v12;
    if (*v12)
    {
      v14 = -1;
      do
      {
        v15 = *((_DWORD *)v13 + 4);
        v16 = v15 < 0x100 ? WTF::StringImpl::hashSlowCase(v13) : v15 >> 8;
        if (++v14 > ((v11 + v6 - ((v16 ^ v8) & v7)) & v7))
          break;
        if (v16 == v10 && (WTF::equal(*v12, *a2, a3) & 1) != 0)
          return v12;
        v11 = (v11 + 1) & v7;
        v12 = (WTF **)(*a1 + 16 * v11);
        v13 = *v12;
      }
      while (*v12);
    }
  }
  return 0;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::SecurityOriginData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  char v24;
  char v25;

  v4 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = -1;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_15[v5])(&v24, a2 + 8);
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 12) - 1;
  *(_DWORD *)(a1 + 12) = v7;
  v8 = v6 - 1;
  v9 = *(_QWORD *)a1;
  v10 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - *(_QWORD *)a1) >> 3);
  v11 = ((_DWORD)v10 + 1) & (v6 - 1);
  v12 = *(_QWORD *)a1 + 40 * v11;
  result = *(_QWORD *)v12;
  if (*(_QWORD *)v12)
  {
    v14 = *(_DWORD *)(a1 + 16);
    v15 = v9 + 40 * v10;
    v16 = (v10 + 1) & v8;
    do
    {
      v17 = *(_DWORD *)(result + 16);
      if (v17 < 0x100)
        result = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)result);
      else
        result = v17 >> 8;
      if (((v16 + v6 - ((result ^ v14) & v8)) & v8) == 0)
        break;
      WTF::GenericHashTraits<WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>>::assignToEmpty<WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>,WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>>(v15, (unsigned int *)v12);
      v19 = v9 + 40 * v11;
      v22 = *(_DWORD *)(v19 + 32);
      v21 = (_DWORD *)(v19 + 32);
      v20 = v22;
      if (v22 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_15[v20])(&v25, v9 + 40 * v11 + 8);
      *v21 = -1;
      v23 = *(WTF::StringImpl **)v12;
      *(_QWORD *)v12 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v18);
        else
          *(_DWORD *)v23 -= 2;
      }
      *(_QWORD *)(v12 + 32) = 0;
      *(_OWORD *)v12 = 0u;
      *(_OWORD *)(v12 + 16) = 0u;
      v11 = (v16 + 1) & v8;
      v9 = *(_QWORD *)a1;
      v15 = *(_QWORD *)a1 + 40 * v16;
      v12 = *(_QWORD *)a1 + 40 * v11;
      result = *(_QWORD *)v12;
      v16 = (v16 + 1) & v8;
    }
    while (*(_QWORD *)v12);
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
  }
  if (v6 >= 9 && 6 * v7 < v6)
    return WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::SecurityOriginData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(a1, v6 >> 1);
  return result;
}

WTF::StringImpl *WTF::GenericHashTraits<WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>>::assignToEmpty<WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>,WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>>(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  WTF::StringImpl *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  result = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  v6 = *(unsigned int *)(a1 + 32);
  v7 = a2[8];
  if ((_DWORD)v6 == -1)
  {
    if ((_DWORD)v7 != -1)
      goto LABEL_6;
  }
  else
  {
    if ((_DWORD)v7 != -1)
    {
LABEL_6:
      v8 = a1 + 8;
      return (WTF::StringImpl *)((uint64_t (*)(uint64_t *))off_1E341D558[v7])(&v8);
    }
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_15[v6])(&v9, a1 + 8);
    *(_DWORD *)(a1 + 32) = -1;
  }
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::SecurityOriginData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(uint64_t a1, unsigned int a2)
{
  WTF *v3;
  size_t v4;
  void *v5;
  uint64_t v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  WTF *v18;
  unsigned int *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  char *v23;
  uint64_t v24;
  _DWORD *v25;
  unsigned int v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _DWORD *v30;
  unsigned int v31;
  WTF::StringImpl *v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  char v39;
  _DWORD *v40;
  char v41;

  v37 = *(unsigned int *)(a1 + 8);
  v3 = *(WTF **)a1;
  v4 = 40 * a2;
  v5 = (void *)WTF::fastMalloc((WTF *)v4);
  v6 = (uint64_t)v5;
  if (a2)
    bzero(v5, v4);
  *(_QWORD *)a1 = v6;
  *(_DWORD *)(a1 + 8) = a2;
  result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v6);
  *(_DWORD *)(a1 + 16) = result;
  *(_BYTE *)(a1 + 20) = 0;
  if ((_DWORD)v37)
  {
    v9 = 0;
    while (1)
    {
      v10 = (WTF::StringImpl **)((char *)v3 + 40 * v9);
      v11 = *v10;
      if (*v10)
      {
        v12 = *(_DWORD *)(a1 + 8);
        v13 = *(_DWORD *)(a1 + 16);
        v14 = *((_DWORD *)v11 + 4);
        if (v14 < 0x100)
          v15 = WTF::StringImpl::hashSlowCase(v11);
        else
          v15 = v14 >> 8;
        v16 = v12 - 1;
        v17 = (v15 ^ v13) & (v12 - 1);
        v18 = *(WTF **)a1;
        v19 = (unsigned int *)(*(_QWORD *)a1 + 40 * v17);
        v20 = *(WTF::StringImpl **)v19;
        if (*(_QWORD *)v19)
        {
          v33 = 0;
          do
          {
            v34 = *((_DWORD *)v20 + 4);
            if (v34 < 0x100)
              v35 = WTF::StringImpl::hashSlowCase(v20);
            else
              v35 = v34 >> 8;
            v36 = (v17 + v12 - ((v35 ^ v13) & v16)) & v16;
            if (v33 > v36)
            {
              std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>>((uint64_t)v10, v19);
              v33 = v36;
            }
            v17 = (v17 + 1) & v16;
            ++v33;
            v18 = *(WTF **)a1;
            v19 = (unsigned int *)(*(_QWORD *)a1 + 40 * v17);
            v20 = *(WTF::StringImpl **)v19;
          }
          while (*(_QWORD *)v19);
        }
        v21 = *v10;
        *v10 = 0;
        v22 = *(WTF::StringImpl **)v19;
        *(_QWORD *)v19 = v21;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v8);
          else
            *(_DWORD *)v22 -= 2;
        }
        v23 = (char *)v18 + 40 * v17;
        v26 = *((_DWORD *)v23 + 8);
        v25 = v23 + 32;
        v24 = v26;
        v8 = (WTF::StringImpl *)(v25 - 6);
        v27 = *((unsigned int *)v3 + 10 * v9 + 8);
        if (v26 == -1)
        {
          if ((_DWORD)v27 == -1)
            goto LABEL_15;
        }
        else if ((_DWORD)v27 == -1)
        {
          ((void (*)(char *, WTF::StringImpl *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_15[v24])(&v41, v8);
          *v25 = -1;
          goto LABEL_15;
        }
        v40 = v25 - 6;
        ((void (*)(_DWORD **))off_1E341D558[v27])(&v40);
      }
LABEL_15:
      v28 = (char *)v3 + 40 * v9;
      v31 = *((_DWORD *)v28 + 8);
      v30 = v28 + 32;
      v29 = v31;
      if (v31 != -1)
        ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_15[v29])(&v39, (char *)v3 + 40 * v9 + 8);
      *v30 = -1;
      v32 = *v10;
      *v10 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v8);
        else
          *(_DWORD *)v32 -= 2;
      }
      if (++v9 == v37)
        return WTF::fastFree(v3, v8);
    }
  }
  if (v3)
    return WTF::fastFree(v3, v8);
  return result;
}

WTF::StringImpl *std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>>(uint64_t a1, unsigned int *a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *result;
  unsigned int *v15;
  WTF::StringImpl *v16;
  _BYTE v17[24];
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  v16 = v4;
  v17[0] = 0;
  v18 = -1;
  v5 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(unsigned int **, _BYTE *, uint64_t))off_1E341D538[v5])(&v15, v17, a1 + 8);
    v18 = v5;
  }
  v6 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  v7 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)(a1 + 8);
  v9 = *(unsigned int *)(a1 + 32);
  v10 = a2[8];
  if ((_DWORD)v9 == -1)
  {
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
  }
  else if ((_DWORD)v10 == -1)
  {
    ((void (*)(unsigned int **, WTF::StringImpl *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_15[v9])(&v15, v8);
    *(_DWORD *)(a1 + 32) = -1;
    goto LABEL_11;
  }
  v15 = (unsigned int *)(a1 + 8);
  ((void (*)(unsigned int **))off_1E341D558[v10])(&v15);
LABEL_11:
  v11 = v16;
  v16 = 0;
  v12 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v11;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v8);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = a2[8];
  if ((_DWORD)v13 == -1)
  {
    if (v18 == -1)
      goto LABEL_21;
  }
  else if (v18 == -1)
  {
    ((void (*)(unsigned int **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_15[v13])(&v15, a2 + 2);
    a2[8] = -1;
    goto LABEL_19;
  }
  v15 = a2 + 2;
  ((void (*)(unsigned int **, unsigned int *, _BYTE *))off_1E341D558[v18])(&v15, a2 + 2, v17);
LABEL_19:
  if (v18 != -1)
    ((void (*)(unsigned int **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_15[v18])(&v15, v17);
LABEL_21:
  v18 = -1;
  result = v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::SecurityOriginData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebCore::SecurityOriginData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  WTF **v12;
  WTF *v13;
  int v14;
  unsigned int v15;
  int v16;

  v3 = *a1;
  v4 = *((unsigned int *)a1 + 2);
  if (!*a1)
    return 40 * v4;
  v7 = v4 - 1;
  v8 = *((_DWORD *)a1 + 4);
  v9 = *((_DWORD *)*a2 + 4);
  if (v9 < 0x100)
  {
    v10 = WTF::StringImpl::hashSlowCase(*a2);
    v3 = *a1;
  }
  else
  {
    v10 = v9 >> 8;
  }
  v11 = (v10 ^ v8) & v7;
  v12 = (WTF **)(v3 + 40 * v11);
  v13 = *v12;
  if (*v12)
  {
    v14 = -1;
    while (1)
    {
      v15 = *((_DWORD *)v13 + 4);
      v16 = v15 < 0x100 ? WTF::StringImpl::hashSlowCase(v13) : v15 >> 8;
      if (++v14 > ((v11 + v4 - ((v16 ^ v8) & v7)) & v7))
        break;
      if (v16 == v10 && (WTF::equal(*v12, *a2, a3) & 1) != 0)
        return (uint64_t)v12;
      v3 = *a1;
      v11 = (v11 + 1) & v7;
      v12 = (WTF **)(*a1 + 40 * v11);
      v13 = *v12;
      if (!*v12)
        return v3 + 40 * *((unsigned int *)a1 + 2);
    }
    v3 = *a1;
  }
  return v3 + 40 * *((unsigned int *)a1 + 2);
}

char *WTF::Vector<WebCore::BlobRegistryImpl::BlobForFileWriting,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1 > a3
    || (v6 = (WTF::StringImpl *)((char *)v5 + 24 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v16 = a2;
    if (v16 > v14)
    {
      if (v16 >= 0xAAAAAAB)
      {
        __break(0xC471u);
        JUMPOUT(0x1962E5128);
      }
      v17 = (WTF::StringImpl *)((char *)v5 + 24 * *(unsigned int *)(a1 + 12));
      v18 = 24 * v16;
      v19 = WTF::fastMalloc((WTF *)(24 * v16));
      *(_DWORD *)(a1 + 8) = (v18 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::BlobRegistryImpl::BlobForFileWriting>::move(v5, v17, v19);
      if (v5)
      {
        if (*(WTF::StringImpl **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v9 = a2;
    if (v9 <= v7)
    {
      v13 = *(WTF::StringImpl **)a1;
    }
    else
    {
      if (v9 >= 0xAAAAAAB)
      {
        __break(0xC471u);
        JUMPOUT(0x1962E5130);
      }
      v10 = 24 * v9;
      v11 = WTF::fastMalloc((WTF *)(24 * v9));
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::BlobRegistryImpl::BlobForFileWriting>::move(v5, v6, v11);
      v13 = *(WTF::StringImpl **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF::StringImpl **)a1;
      }
    }
    return (char *)v13 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
  }
  return (char *)v3;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::BlobRegistryImpl::BlobForFileWriting>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;

  if (result != a2)
  {
    v20 = v3;
    v21 = v4;
    v7 = result;
    do
    {
      v8 = *(WTF::StringImpl **)v7;
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = v8;
      v9 = *((_QWORD *)v7 + 1);
      *((_QWORD *)v7 + 1) = 0;
      *(_QWORD *)(a3 + 8) = v9;
      LODWORD(v9) = *((_DWORD *)v7 + 4);
      *((_DWORD *)v7 + 4) = 0;
      *(_DWORD *)(a3 + 16) = v9;
      LODWORD(v9) = *((_DWORD *)v7 + 5);
      *((_DWORD *)v7 + 5) = 0;
      *(_DWORD *)(a3 + 20) = v9;
      v10 = *((unsigned int *)v7 + 5);
      if ((_DWORD)v10)
      {
        v11 = *((_QWORD *)v7 + 1);
        v12 = v11 + 16 * v10;
        do
        {
          v13 = *(unsigned int **)(v11 + 8);
          *(_QWORD *)(v11 + 8) = 0;
          if (v13)
          {
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              atomic_store(1u, v13);
              v17 = v13[6];
              if ((_DWORD)v17 != -1)
                ((void (*)(char *, unsigned int *))off_1E341D4C8[v17])(&v19, v13 + 2);
              v13[6] = -1;
              WTF::fastFree((WTF *)v13, a2);
            }
          }
          v16 = *(WTF::StringImpl **)v11;
          *(_QWORD *)v11 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, a2);
            else
              *(_DWORD *)v16 -= 2;
          }
          v11 += 16;
        }
        while (v11 != v12);
      }
      v18 = (WTF *)*((_QWORD *)v7 + 1);
      if (v18)
      {
        *((_QWORD *)v7 + 1) = 0;
        *((_DWORD *)v7 + 4) = 0;
        WTF::fastFree(v18, a2);
      }
      result = *(WTF::StringImpl **)v7;
      *(_QWORD *)v7 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      a3 += 24;
      v7 = (WTF::StringImpl *)((char *)v7 + 24);
    }
    while (v7 != a2);
  }
  return result;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::BlobRegistryImpl::BlobForFileWriting>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  if (result != a2)
  {
    v16 = v2;
    v17 = v3;
    v5 = result;
    do
    {
      v6 = *((unsigned int *)v5 + 5);
      if ((_DWORD)v6)
      {
        v7 = *((_QWORD *)v5 + 1);
        v8 = v7 + 16 * v6;
        do
        {
          v9 = *(unsigned int **)(v7 + 8);
          *(_QWORD *)(v7 + 8) = 0;
          if (v9)
          {
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
            {
              atomic_store(1u, v9);
              v13 = v9[6];
              if ((_DWORD)v13 != -1)
                ((void (*)(char *, unsigned int *))off_1E341D4C8[v13])(&v15, v9 + 2);
              v9[6] = -1;
              WTF::fastFree((WTF *)v9, a2);
            }
          }
          v12 = *(WTF::StringImpl **)v7;
          *(_QWORD *)v7 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, a2);
            else
              *(_DWORD *)v12 -= 2;
          }
          v7 += 16;
        }
        while (v7 != v8);
      }
      v14 = (WTF *)*((_QWORD *)v5 + 1);
      if (v14)
      {
        *((_QWORD *)v5 + 1) = 0;
        *((_DWORD *)v5 + 4) = 0;
        WTF::fastFree(v14, a2);
      }
      result = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 24);
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::BlobRegistryImpl::writeBlobsToTemporaryFilesForIndexedDB(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&&)> &&)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  WTF *v5;

  *(_QWORD *)a1 = &off_1E341D578;
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_DWORD *)(a1 + 20);
  if (v4)
    WTF::VectorDestructor<true,WebCore::BlobRegistryImpl::BlobForFileWriting>::destruct(*(WTF::StringImpl **)(a1 + 8), (WTF::StringImpl *)(*(_QWORD *)(a1 + 8) + 24 * v4));
  v5 = *(WTF **)(a1 + 8);
  if (v5)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v5, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::BlobRegistryImpl::writeBlobsToTemporaryFilesForIndexedDB(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  WTF *v5;

  *(_QWORD *)this = &off_1E341D578;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_DWORD *)this + 5);
  if (v4)
    WTF::VectorDestructor<true,WebCore::BlobRegistryImpl::BlobForFileWriting>::destruct(*((WTF::StringImpl **)this + 1), (WTF::StringImpl *)(*((_QWORD *)this + 1) + 24 * v4));
  v5 = (WTF *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v5, a2);
  }
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebCore::BlobRegistryImpl::writeBlobsToTemporaryFilesForIndexedDB(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&&)> &&)::$_0,void>::call(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t (**v3)();
  int *v4;
  int *v5;
  WTF::FileSystemImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  int v9;
  WTF::StringImpl *v10;
  int v11;
  BOOL v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t (**v16)();
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t *v26;
  WTF *v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF *v32;
  WTF *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF *result;
  WTF *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  int v47;
  WTF *v48;
  uint64_t v49;
  int v50;
  char v51;
  int v52;
  char v53;
  WTF::StringImpl *v54;

  v48 = 0;
  v49 = 0;
  v1 = *(_DWORD *)(a1 + 20);
  if (v1)
  {
    v2 = *(_QWORD *)(a1 + 8);
    v42 = a1;
    v43 = v2 + 24 * v1;
    v3 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix;
    do
    {
      WTF::FileSystemImpl::openTemporaryFile();
      v6 = *(WTF::FileSystemImpl **)(v2 + 8);
      v7 = *(unsigned int *)(v2 + 20);
      v52 = v47;
      v50 = v47;
      v51 = 1;
      if (!v45 || (v47 != -1 ? (v12 = *((_DWORD *)v45 + 1) == 0) : (v12 = 1), v12))
      {
LABEL_4:
        WTF::FileSystemImpl::closeFile((WTF::FileSystemImpl *)&v50, v4);
        if ((_DWORD)v49)
        {
          if (HIDWORD(v49))
          {
            v29 = v48;
            v30 = 8 * HIDWORD(v49);
            do
            {
              v31 = *(WTF::StringImpl **)v29;
              *(_QWORD *)v29 = 0;
              if (v31)
              {
                if (*(_DWORD *)v31 == 2)
                  WTF::StringImpl::destroy(v31, v8);
                else
                  *(_DWORD *)v31 -= 2;
              }
              v29 = (WTF *)((char *)v29 + 8);
              v30 -= 8;
            }
            while (v30);
            HIDWORD(v49) = 0;
          }
          v32 = v48;
          if (v48)
          {
            v48 = 0;
            LODWORD(v49) = 0;
            WTF::fastFree(v32, v8);
          }
        }
        v9 = 1;
      }
      else
      {
        if ((_DWORD)v7)
        {
          for (i = 16 * v7; i; i -= 16)
          {
            v14 = *((_QWORD *)v6 + 1);
            if (v14)
            {
              v15 = *(unsigned int *)(v14 + 24);
              if ((_DWORD)v15 == -1)
                goto LABEL_61;
              v54 = (WTF::StringImpl *)&v53;
              v16 = v3;
              v17 = ((uint64_t (*)(WTF::StringImpl **, uint64_t))v3[v15])(&v54, v14 + 8);
              v18 = *((_QWORD *)v6 + 1);
              v19 = *(unsigned int *)(v18 + 24);
              if ((_DWORD)v19 == -1
                || (v20 = v17,
                    v21 = v18 + 8,
                    v54 = (WTF::StringImpl *)&v53,
                    ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v19])(&v54, v18 + 8), v22 = *(unsigned int *)(v18 + 24), (_DWORD)v22 == -1))
              {
LABEL_61:
                v41 = std::__throw_bad_variant_access[abi:sn180100]();
                return (WTF *)WTF::Detail::CallableWrapper<WebCore::BlobRegistryImpl::writeBlobsToTemporaryFilesForIndexedDB(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(v41);
              }
              v54 = (WTF::StringImpl *)&v53;
              v3 = v16;
              ((void (*)(WTF::StringImpl **, uint64_t))v16[v22])(&v54, v21);
              if (WTF::FileSystemImpl::writeToFile() != v20)
                goto LABEL_4;
            }
            else if (!WTF::FileSystemImpl::appendFileContentsToFileHandle(v6, (const WTF::String *)&v52, v5))
            {
              goto LABEL_4;
            }
            v6 = (WTF::FileSystemImpl *)((char *)v6 + 16);
          }
        }
        WTF::FileSystemImpl::closeFile((WTF::FileSystemImpl *)&v50, v4);
        WTF::String::isolatedCopy();
        LODWORD(v23) = HIDWORD(v49);
        if (HIDWORD(v49) == (_DWORD)v49)
        {
          v26 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v48, HIDWORD(v49) + 1, (unint64_t)&v54);
          v23 = HIDWORD(v49);
          v27 = v48;
          v28 = *v26;
          *v26 = 0;
          *((_QWORD *)v27 + v23) = v28;
        }
        else
        {
          v24 = v54;
          v54 = 0;
          *((_QWORD *)v48 + HIDWORD(v49)) = v24;
        }
        HIDWORD(v49) = v23 + 1;
        v25 = v54;
        v54 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v8);
          else
            *(_DWORD *)v25 -= 2;
        }
        v9 = 0;
      }
      v10 = v45;
      v45 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v8);
        else
          *(_DWORD *)v10 -= 2;
      }
      v2 += 24;
      if (v2 == v43)
        v11 = 1;
      else
        v11 = v9;
    }
    while (v11 != 1);
    v33 = v48;
    v44 = v49;
    a1 = v42;
  }
  else
  {
    v33 = 0;
    v44 = 0;
  }
  v34 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v48 = 0;
  v49 = 0;
  v35 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v35 = &off_1E341D5A0;
  *((_QWORD *)v35 + 1) = v34;
  *((_QWORD *)v35 + 2) = v33;
  *((_QWORD *)v35 + 3) = v44;
  v46 = v35;
  WTF::callOnMainThread();
  if (v46)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v46 + 8))(v46);
  if (HIDWORD(v49))
  {
    v38 = v48;
    v39 = 8 * HIDWORD(v49);
    do
    {
      v40 = *(WTF::StringImpl **)v38;
      *(_QWORD *)v38 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, v36);
        else
          *(_DWORD *)v40 -= 2;
      }
      v38 = (WTF *)((char *)v38 + 8);
      v39 -= 8;
    }
    while (v39);
  }
  result = v48;
  if (v48)
  {
    v48 = 0;
    LODWORD(v49) = 0;
    return (WTF *)WTF::fastFree(result, v36);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::BlobRegistryImpl::writeBlobsToTemporaryFilesForIndexedDB(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF::StringImpl **v7;
  uint64_t v8;
  WTF::StringImpl *v9;

  *(_QWORD *)a1 = &off_1E341D5A0;
  v3 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v3)
  {
    v7 = *(WTF::StringImpl ***)(a1 + 16);
    v8 = 8 * v3;
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  v4 = *(WTF **)(a1 + 16);
  if (v4)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::BlobRegistryImpl::writeBlobsToTemporaryFilesForIndexedDB(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF::StringImpl **v7;
  uint64_t v8;
  WTF::StringImpl *v9;

  *(_QWORD *)this = &off_1E341D5A0;
  v3 = *((unsigned int *)this + 7);
  if ((_DWORD)v3)
  {
    v7 = (WTF::StringImpl **)*((_QWORD *)this + 2);
    v8 = 8 * v3;
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  v4 = (WTF *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::BlobRegistryImpl::writeBlobsToTemporaryFilesForIndexedDB(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, a1 + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::BlobDataFileReference*>(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 > v4)
  {
    if (v8 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v9 = *(void **)result;
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
    result = (uint64_t)memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v9, v11);
    }
  }
  v12 = *(unsigned int *)(v3 + 12);
  v13 = *(_QWORD *)v3;
  v14 = *a2;
  if (*a2)
    ++*(_DWORD *)(v14 + 8);
  *(_QWORD *)(v13 + 8 * v12) = v14;
  *(_DWORD *)(v3 + 12) = v12 + 1;
  return result;
}

uint64_t *WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>(uint64_t a1, unsigned int *a2, WTF::StringImpl **a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  WTF::StringImpl *v31;
  unsigned int i;
  unsigned int v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t *result;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  WTF::StringImpl **v48;
  uint64_t v49;
  uint64_t *v50;
  WTF::StringImpl **v51;
  unsigned int v52;
  uint64_t *v53;
  WTF::StringImpl **v54;
  uint64_t *v55;
  WTF::StringImpl **v56;
  char v57;
  uint64_t v58;
  WTF::StringImpl **v59;
  uint64_t *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  uint64_t v70;

  v7 = a2[2];
  v6 = a2[3];
  if (10 * v6 >= (unint64_t)(9 * v7) || *((_BYTE *)a2 + 20) && v7 <= 2 * (int)v6)
  {
    if ((_DWORD)v7)
      v52 = 2 * v7;
    else
      v52 = 8;
    v53 = a4;
    v54 = a3;
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash((uint64_t)a2, v52);
    a3 = v54;
    a4 = v53;
    v7 = a2[2];
  }
  v8 = v7 - 1;
  v9 = a2[4];
  v10 = *((_DWORD *)*a3 + 4);
  v68 = a1;
  if (v10 < 0x100)
  {
    v47 = a4;
    v48 = a3;
    v49 = WTF::StringImpl::hashSlowCase(*a3);
    a3 = v48;
    a4 = v47;
    v11 = v49;
  }
  else
  {
    v11 = v10 >> 8;
  }
  v12 = (v11 ^ v9) & v8;
  v13 = *(_QWORD *)a2;
  v14 = *(_QWORD *)a2 + 16 * v12;
  v15 = *(WTF **)v14;
  if (*(_QWORD *)v14)
  {
    v16 = 0;
    while (1)
    {
      v17 = *((_DWORD *)v15 + 4);
      if (v17 < 0x100)
      {
        v20 = a4;
        v67 = v14;
        v21 = v11;
        v22 = v7;
        v23 = v9;
        v24 = a3;
        v18 = WTF::StringImpl::hashSlowCase(v15);
        a3 = v24;
        v9 = v23;
        v7 = v22;
        v11 = v21;
        v14 = v67;
        a4 = v20;
      }
      else
      {
        v18 = v17 >> 8;
      }
      v19 = (v12 + v7 - ((v18 ^ v9) & v8)) & v8;
      if (v16 > v19)
        break;
      if (v18 == (_DWORD)v11)
      {
        v55 = a4;
        v56 = a3;
        v57 = WTF::equal(*(WTF **)v14, *a3, (const WTF::StringImpl *)a3);
        a3 = v56;
        a4 = v55;
        v13 = *(_QWORD *)a2;
        if ((v57 & 1) != 0)
        {
          v58 = v13 + 16 * a2[2];
          *(_QWORD *)v68 = v14;
          *(_QWORD *)(v68 + 8) = v58;
          *(_BYTE *)(v68 + 16) = 0;
          return WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>::operator=((uint64_t *)(v14 + 8), v55);
        }
      }
      else
      {
        v13 = *(_QWORD *)a2;
      }
      v12 = ((_DWORD)v12 + 1) & v8;
      ++v16;
      v14 = v13 + 16 * v12;
      v15 = *(WTF **)v14;
      if (!*(_QWORD *)v14)
      {
        if (v16 >= 0x80)
          *((_BYTE *)a2 + 20) = 1;
        goto LABEL_39;
      }
    }
    if (v16 >= 0x80)
      *((_BYTE *)a2 + 20) = 1;
    v25 = *(WTF::StringImpl **)v14;
    *(_QWORD *)v14 = 0;
    v69 = v25;
    v26 = v13 + 16 * v12;
    v27 = *(_QWORD *)(v26 + 8);
    *(_QWORD *)(v26 + 8) = 0;
    v70 = v27;
    v28 = *(_QWORD *)(v26 + 8);
    *(_QWORD *)(v26 + 8) = 0;
    if (v28)
    {
      do
      {
        v29 = __ldaxr((unsigned int *)v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, (unsigned int *)v28));
      if (!v30)
      {
        v59 = a3;
        v60 = a4;
        atomic_store(1u, (unsigned int *)v28);
        WTF::Vector<WebCore::BlobDataItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v28 + 96, a2);
        WebCore::PolicyContainer::~PolicyContainer((WebCore::PolicyContainer *)(v28 + 16), v61);
        v63 = *(WTF::StringImpl **)(v28 + 8);
        *(_QWORD *)(v28 + 8) = 0;
        if (v63)
        {
          if (*(_DWORD *)v63 == 2)
            WTF::StringImpl::destroy(v63, v62);
          else
            *(_DWORD *)v63 -= 2;
        }
        WTF::fastFree((WTF *)v28, v62);
        a4 = v60;
        a3 = v59;
      }
    }
    v31 = *(WTF::StringImpl **)v14;
    *(_QWORD *)v14 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        v50 = a4;
        v51 = a3;
        WTF::StringImpl::destroy(v31, (WTF::StringImpl *)a2);
        a3 = v51;
        a4 = v50;
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
    *(_QWORD *)v14 = 0;
    *(_QWORD *)(v14 + 8) = 0;
    WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::String const&,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>(v14, *a3, a4);
    for (i = v12 + 1; ; i = v33 + 1)
    {
      v33 = i & v8;
      v34 = (WTF::StringImpl *)(*(_QWORD *)a2 + 16 * (i & v8));
      v35 = *(WTF::StringImpl **)v34;
      if (!*(_QWORD *)v34)
        break;
      v36 = *((_DWORD *)v35 + 4);
      if (v36 < 0x100)
        v37 = WTF::StringImpl::hashSlowCase(v35);
      else
        v37 = v36 >> 8;
      ++v19;
      v38 = (v33 + v7 - ((v37 ^ v9) & v8)) & v8;
      if (v19 > v38)
      {
        std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>>(&v69, v34);
        v19 = v38;
      }
    }
    WTF::GenericHashTraits<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>>::assignToEmpty<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>>(*(_QWORD *)a2 + 16 * v33, (WTF::StringImpl *)&v69);
    v40 = v70;
    v70 = 0;
    v41 = v68;
    if (v40)
    {
      do
      {
        v42 = __ldaxr((unsigned int *)v40);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, (unsigned int *)v40));
      if (!v43)
      {
        atomic_store(1u, (unsigned int *)v40);
        WTF::Vector<WebCore::BlobDataItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v40 + 96, v39);
        WebCore::PolicyContainer::~PolicyContainer((WebCore::PolicyContainer *)(v40 + 16), v64);
        v66 = *(WTF::StringImpl **)(v40 + 8);
        *(_QWORD *)(v40 + 8) = 0;
        if (v66)
        {
          if (*(_DWORD *)v66 == 2)
            WTF::StringImpl::destroy(v66, v65);
          else
            *(_DWORD *)v66 -= 2;
        }
        WTF::fastFree((WTF *)v40, v65);
      }
    }
    result = (uint64_t *)v69;
    if (v69)
    {
      if (*(_DWORD *)v69 == 2)
        result = (uint64_t *)WTF::StringImpl::destroy(v69, (WTF::StringImpl *)v39);
      else
        *(_DWORD *)v69 -= 2;
    }
  }
  else
  {
LABEL_39:
    v41 = v68;
    result = (uint64_t *)WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::String const&,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>(v14, *a3, a4);
  }
  v45 = a2[2];
  ++a2[3];
  v46 = *(_QWORD *)a2 + 16 * v45;
  *(_QWORD *)v41 = v14;
  *(_QWORD *)(v41 + 8) = v46;
  *(_BYTE *)(v41 + 16) = 1;
  return result;
}

WTF::StringImpl *WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>,WTF::String const&,WTF::RefPtr<WebCore::BlobData,WTF::RawPtrTraits<WebCore::BlobData>,WTF::DefaultRefDerefTraits<WebCore::BlobData>>>(uint64_t a1, WTF::StringImpl *a2, uint64_t *a3)
{
  WTF::StringImpl *result;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  if (a2)
    *(_DWORD *)a2 += 2;
  result = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = a2;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  v6 = *a3;
  *a3 = 0;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  if (v7)
  {
    do
    {
      v8 = __ldaxr((unsigned int *)v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v7));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)v7);
      WTF::Vector<WebCore::BlobDataItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v7 + 96, a2);
      WebCore::PolicyContainer::~PolicyContainer((WebCore::PolicyContainer *)(v7 + 16), v10);
      v12 = *(WTF::StringImpl **)(v7 + 8);
      *(_QWORD *)(v7 + 8) = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v11);
        else
          *(_DWORD *)v12 -= 2;
      }
      return (WTF::StringImpl *)WTF::fastFree((WTF *)v7, v11);
    }
  }
  return result;
}

WTF::StringImpl *WTF::HashMap<WTF::String,WebCore::SecurityOriginData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,WebCore::SecurityOriginData const&>(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *result;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  unsigned int v30;
  uint64_t i;
  unsigned int *v32;
  WTF::StringImpl *v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  WTF::StringImpl *v37;
  const WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const WTF::StringImpl **v51;
  char v52;
  WTF::StringImpl *v53;
  _BYTE v54[24];
  int v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v9 = *(unsigned int *)(a2 + 8);
  v8 = *(unsigned int *)(a2 + 12);
  if (10 * v8 >= (unint64_t)(9 * v9) || *(_BYTE *)(a2 + 20) && v9 <= 2 * (int)v8)
  {
    if ((_DWORD)v9)
      v46 = 2 * v9;
    else
      v46 = 8;
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::SecurityOriginData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(a2, v46);
    LODWORD(v9) = *(_DWORD *)(a2 + 8);
  }
  v10 = v9 - 1;
  v11 = *(_DWORD *)(a2 + 16);
  v12 = *((_DWORD *)*a3 + 4);
  v50 = a4;
  v51 = a3;
  if (v12 < 0x100)
    v13 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v13 = v12 >> 8;
  v14 = (v13 ^ v11) & v10;
  v15 = *(_QWORD *)a2;
  v16 = *(_QWORD *)a2 + 40 * v14;
  result = *(WTF::StringImpl **)v16;
  if (*(_QWORD *)v16)
  {
    v49 = a1;
    v18 = 0;
    while (1)
    {
      v19 = *((_DWORD *)result + 4);
      v20 = v19 < 0x100 ? WTF::StringImpl::hashSlowCase(result) : v19 >> 8;
      v21 = (v14 + v9 - ((v20 ^ v11) & v10)) & v10;
      if (v18 > v21)
        break;
      if (v20 == v13)
      {
        v47 = WTF::equal(*(WTF **)v16, *v51, (const WTF::StringImpl *)a3);
        v15 = *(_QWORD *)a2;
        if ((v47 & 1) != 0)
        {
          v48 = v15 + 40 * *(unsigned int *)(a2 + 8);
          *(_QWORD *)v49 = v16;
          *(_QWORD *)(v49 + 8) = v48;
          *(_BYTE *)(v49 + 16) = 0;
          return (WTF::StringImpl *)WebCore::SecurityOriginData::operator=(v16 + 8, v50);
        }
      }
      else
      {
        v15 = *(_QWORD *)a2;
      }
      v14 = ((_DWORD)v14 + 1) & v10;
      ++v18;
      v16 = v15 + 40 * v14;
      result = *(WTF::StringImpl **)v16;
      if (!*(_QWORD *)v16)
      {
        if (v18 >= 0x80)
          *(_BYTE *)(a2 + 20) = 1;
        a1 = v49;
        goto LABEL_39;
      }
    }
    if (v18 >= 0x80)
      *(_BYTE *)(a2 + 20) = 1;
    v22 = *(WTF::StringImpl **)v16;
    *(_QWORD *)v16 = 0;
    v53 = v22;
    v54[0] = 0;
    v55 = -1;
    v23 = v15 + 40 * v14;
    v26 = *(_DWORD *)(v23 + 32);
    v25 = (_DWORD *)(v23 + 32);
    v24 = v26;
    if (v26 != -1)
    {
      v27 = v15 + 40 * v14 + 8;
      ((void (*)(char *, _BYTE *, uint64_t))off_1E341D538[v24])(&v52, v54, v27);
      v55 = v24;
      v28 = *v25;
      if ((_DWORD)v28 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_15[v28])(&v52, v27);
    }
    *v25 = -1;
    v29 = *(WTF::StringImpl **)v16;
    *(_QWORD *)v16 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v29 -= 2;
    }
    *(_QWORD *)(v16 + 32) = 0;
    *(_OWORD *)v16 = 0u;
    *(_OWORD *)(v16 + 16) = 0u;
    WTF::HashMapTranslator<WTF::HashMap<WTF::String,WebCore::SecurityOriginData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>,WTF::String const&,WebCore::SecurityOriginData const&>(v16, *v51, v50);
    v30 = (v14 + 1) & v10;
    for (i = *(_QWORD *)a2; ; i = *(_QWORD *)a2)
    {
      v32 = (unsigned int *)(i + 40 * v30);
      v33 = *(WTF::StringImpl **)v32;
      if (!*(_QWORD *)v32)
        break;
      v34 = *((_DWORD *)v33 + 4);
      if (v34 < 0x100)
        v35 = WTF::StringImpl::hashSlowCase(v33);
      else
        v35 = v34 >> 8;
      ++v21;
      v36 = (v30 + v9 - ((v35 ^ v11) & v10)) & v10;
      if (v21 > v36)
      {
        std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>>((uint64_t)&v53, v32);
        v21 = v36;
      }
      v30 = (v30 + 1) & v10;
    }
    WTF::GenericHashTraits<WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>>::assignToEmpty<WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>,WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>>(i + 40 * v30, (unsigned int *)&v53);
    if (v55 != -1)
      ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_15[v55])(&v52, v54);
    v55 = -1;
    result = v53;
    v53 = 0;
    a1 = v49;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v37);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
LABEL_39:
    v38 = *v51;
    if (*v51)
      *(_DWORD *)v38 += 2;
    *(_QWORD *)v16 = v38;
    v39 = v15 + 40 * v14;
    v42 = *(_DWORD *)(v39 + 32);
    v41 = (_DWORD *)(v39 + 32);
    v40 = v42;
    v43 = *(unsigned int *)(v50 + 24);
    if (v42 == -1)
    {
      if ((_DWORD)v43 == -1)
        goto LABEL_44;
    }
    else if ((_DWORD)v43 == -1)
    {
      result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_15[v40])(&v53, v41 - 6);
      *v41 = -1;
      goto LABEL_44;
    }
    v53 = (WTF::StringImpl *)(v41 - 6);
    result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **))off_1E341D5B8[v43])(&v53);
  }
LABEL_44:
  v44 = *(_DWORD *)(a2 + 8);
  ++*(_DWORD *)(a2 + 12);
  v45 = *(_QWORD *)a2 + 40 * v44;
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v45;
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

uint64_t WebCore::SecurityOriginData::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;

  v3 = *(unsigned int *)(a1 + 24);
  v4 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return a1;
LABEL_5:
    v6 = a1;
    ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E341D5B8[v4])(&v6, a1, a2);
    return a1;
  }
  if ((_DWORD)v4 != -1)
    goto LABEL_5;
  ((void (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_15[v3])(&v7, a1, a2);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

WTF::StringImpl *WTF::HashMapTranslator<WTF::HashMap<WTF::String,WebCore::SecurityOriginData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>,WTF::String const&,WebCore::SecurityOriginData const&>(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  if (a2)
    *(_DWORD *)a2 += 2;
  result = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = a2;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  v6 = *(unsigned int *)(a1 + 32);
  v7 = *(unsigned int *)(a3 + 24);
  if ((_DWORD)v6 == -1)
  {
    if ((_DWORD)v7 != -1)
      goto LABEL_8;
  }
  else
  {
    if ((_DWORD)v7 != -1)
    {
LABEL_8:
      v8 = a1 + 8;
      return (WTF::StringImpl *)((uint64_t (*)(uint64_t *))off_1E341D5B8[v7])(&v8);
    }
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_15[v6])(&v9, a1 + 8);
    *(_DWORD *)(a1 + 32) = -1;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::BlobResourceHandle::start(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E341D5D8;
  a1[1] = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 16) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v2 + 8) + 48))(v2 + 8);
    else
      --*(_DWORD *)(v2 + 16);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::BlobResourceHandle::start(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E341D5D8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 16) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 8) + 48))(v3 + 8);
    else
      --*(_DWORD *)(v3 + 16);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::BlobResourceHandle::start(void)::$_0,void>::call(uint64_t a1, const WTF::String *a2)
{
  WebCore::BlobResourceHandle::doStart(*(WebCore::BlobResourceHandle **)(a1 + 8), a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::BlobResourceHandle::notifyResponseOnSuccess(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E341D600;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 16) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v2 + 8) + 48))(v2 + 8);
    else
      --*(_DWORD *)(v2 + 16);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::BlobResourceHandle::notifyResponseOnSuccess(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E341D600;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 16) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 8) + 48))(v3 + 8);
    else
      --*(_DWORD *)(v3 + 16);
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::BlobResourceHandle::notifyResponseOnSuccess(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  size_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(unsigned int *)(v1 + 76);
  if (!(v2 >> 19))
  {
    v3 = *(unsigned int *)(v1 + 72);
    if (!(v3 >> 19))
    {
      v4 = v3 + (v3 >> 2);
      v5 = 0x7FFFFLL;
      if (v4 >= 0x80000)
        v5 = v4;
      if (v4 >= 0x10)
        v6 = v5 + 1;
      else
        v6 = 0x80000;
      v7 = *(void **)(v1 + 64);
      v8 = (void *)WTF::fastMalloc((WTF *)v6);
      *(_DWORD *)(v1 + 72) = v6;
      *(_QWORD *)(v1 + 64) = v8;
      memcpy(v8, v7, v2);
      if (v7)
      {
        if (*(void **)(v1 + 64) == v7)
        {
          *(_QWORD *)(v1 + 64) = 0;
          *(_DWORD *)(v1 + 72) = 0;
        }
        WTF::fastFree((WTF *)v7, v9);
      }
    }
  }
  *(_DWORD *)(v1 + 76) = 0x80000;
  return WebCore::BlobResourceHandle::readAsync((WTF::StringImpl *)v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::BlobResourceHandle::notifyFinish(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E341D628;
  a1[1] = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 16) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v2 + 8) + 48))(v2 + 8);
    else
      --*(_DWORD *)(v2 + 16);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::BlobResourceHandle::notifyFinish(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E341D628;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 16) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 8) + 48))(v3 + 8);
    else
      --*(_DWORD *)(v3 + 16);
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::BlobResourceHandle::notifyFinish(void)::$_0,void>::call(WTF::StringImpl *result)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  _DWORD *v3;
  _OWORD v4[5];
  WTF::StringImpl *v5[2];
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  v1 = *((_QWORD *)result + 1);
  if (!*(_BYTE *)(v1 + 100))
  {
    result = *(WTF::StringImpl **)(*(_QWORD *)(v1 + 24) + 8);
    if (result)
    {
      v6 = 0;
      *(_OWORD *)v5 = 0u;
      memset(v4, 0, sizeof(v4));
      v7 = -1;
      v8 = -1;
      v9 = 0;
      (*(void (**)(WTF::StringImpl *, uint64_t, _OWORD *))(*(_QWORD *)result + 40))(result, v1 + 8, v4);
      v3 = v9;
      v9 = 0;
      if (v3)
        WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v3, v2);
      result = v5[1];
      v5[1] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::updateResponseHeadersAfterRevalidation(WebCore *this, WebCore::ResourceResponse *a2, const WebCore::ResourceResponse *a3)
{
  WebCore::ResourceResponse *v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t (**v9)();
  uint64_t (*v10)();
  WTF::StringImpl *v11;
  unsigned __int8 *v12;
  WTF::StringImpl *v13;
  int v14;
  int v15;
  WTF::StringImpl *v16;
  __int16 v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *result;
  _QWORD v22[3];
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  _BYTE v25[8];
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unsigned __int16 v29;
  char v30;
  WTF::StringImpl *v31;

  v3 = a2;
  WebCore::ResourceResponse::platformLazyInit((uint64_t)a2, 2);
  v5 = (WTF::StringImpl *)*((_QWORD *)v3 + 10);
  v3 = (WebCore::ResourceResponse *)((char *)v3 + 80);
  WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((uint64_t)v25, (uint64_t)v3, v5, *((_QWORD *)v3 + 2));
  WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((uint64_t)v22, (uint64_t)v3, (WTF::StringImpl *)(*(_QWORD *)v3 + 16 * *((unsigned int *)v3 + 3)), *((_QWORD *)v3 + 2) + 16 * *((unsigned int *)v3 + 7));
  v7 = MEMORY[0x1E0CBF868];
  while (v26 != v22[1] || v27 != v22[2])
  {
    if (v28)
    {
      if ((WTF::StringImpl::startsWithIgnoringASCIICase() & 1) == 0)
      {
        v8 = v28;
        if (v28)
        {
          v9 = (uint64_t (**)())&WebCore::headersToIgnoreAfterRevalidation;
          do
          {
            while (!v8)
            {
              v9 += 2;
              if (v9 == off_1E341D710)
                goto LABEL_28;
            }
            v10 = *v9;
            if (*v9)
              v11 = (WTF::StringImpl *)strlen((const char *)*v9);
            else
              v11 = 0;
            if (v11 == (WTF::StringImpl *)*((unsigned int *)v8 + 1))
            {
              v12 = (unsigned __int8 *)*((_QWORD *)v8 + 1);
              if ((*((_BYTE *)v8 + 16) & 4) != 0)
              {
                if (!v11)
                  goto LABEL_34;
                if (*(unsigned __int8 *)(v7 + *v12) == *(unsigned __int8 *)(v7 + *(unsigned __int8 *)v10))
                {
                  v13 = 0;
                  while ((WTF::StringImpl *)((char *)v11 - 1) != v13)
                  {
                    v14 = *(unsigned __int8 *)(v7 + *((unsigned __int8 *)v13 + (_QWORD)(v12 + 1)));
                    v15 = *(unsigned __int8 *)(v7 + *((unsigned __int8 *)v13 + (_QWORD)v10 + 1));
                    v13 = (WTF::StringImpl *)((char *)v13 + 1);
                    if (v14 != v15)
                    {
                      if (v13 < v11)
                        goto LABEL_11;
                      goto LABEL_34;
                    }
                  }
                  goto LABEL_34;
                }
              }
              else
              {
                if (WTF::equalIgnoringASCIICaseWithLength<char16_t,unsigned char>((_BOOL8)v12, (unint64_t)v11, (uint64_t)v10, (unint64_t)v11, (unint64_t)v11))
                {
                  goto LABEL_34;
                }
                v8 = v28;
              }
            }
LABEL_11:
            v9 += 2;
          }
          while (v9 != off_1E341D710);
          if (v8
            && ((WTF::StringImpl::startsWithIgnoringASCIICase() & 1) != 0
             || v28
             && ((WTF::StringImpl::startsWithIgnoringASCIICase() & 1) != 0
              || v28 && (WTF::StringImpl::startsWithIgnoringASCIICase() & 1) != 0)))
          {
            goto LABEL_34;
          }
        }
      }
    }
LABEL_28:
    if (!v30)
    {
      WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 2);
      WebCore::HTTPHeaderMap::setUncommonHeader((WebCore *)((char *)this + 80), &v28, (const WTF::String *)&v31);
      goto LABEL_34;
    }
    v16 = (WTF::StringImpl *)v29;
    WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 2);
    if ((_DWORD)v16 == 35)
    {
      v17 = -5;
    }
    else
    {
      if ((int)v16 > 38)
      {
        if ((_DWORD)v16 == 39)
        {
          v17 = -9;
          goto LABEL_32;
        }
        if ((_DWORD)v16 == 50)
        {
          v17 = -17;
          goto LABEL_32;
        }
        if ((_DWORD)v16 != 56)
          goto LABEL_33;
LABEL_62:
        v17 = -2;
        goto LABEL_32;
      }
      if ((_DWORD)v16 == 13)
      {
        v17 = -3;
        goto LABEL_32;
      }
      if ((_DWORD)v16 == 15)
        goto LABEL_62;
      if ((_DWORD)v16 != 23)
        goto LABEL_33;
      v17 = -33;
    }
LABEL_32:
    *((_WORD *)this + 116) &= v17;
LABEL_33:
    WebCore::HTTPHeaderMap::set((WebCore *)((char *)this + 80), v16, &v31);
LABEL_34:
    WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::operator++((uint64_t)v25, v11);
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v6);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v23;
  v23 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v6);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v31;
  v31 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v6);
    else
      *(_DWORD *)v20 -= 2;
  }
  result = v28;
  v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::updateRedirectChainStatus(unsigned int *a1, WebCore::ResourceResponseBase *this)
{
  unsigned int *v3;
  __int16 v4;
  char v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  char v11;
  double v12;
  WTF::WallTime *v13;
  double v14;
  char v15;
  double v16;
  double v17;
  double v18;
  const WebCore::HTTPHeaderMap *v19;
  const WebCore::HTTPHeaderMap *v20;
  _BYTE v21[25];

  if (*((_BYTE *)a1 + 8) == 1)
    return;
  v3 = a1;
  v4 = *((_WORD *)this + 116);
  if ((v4 & 1) == 0)
  {
    WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
    a1 = WebCore::parseCacheControlDirectives((unsigned int *)this + 20, v19, (int64x2_t *)v21);
    *(_OWORD *)((char *)this + 200) = *(_OWORD *)v21;
    *(_OWORD *)((char *)this + 209) = *(_OWORD *)&v21[9];
    v4 = *((_WORD *)this + 116) | 1;
    *((_WORD *)this + 116) = v4;
  }
  v5 = *((_BYTE *)this + 224);
  if ((v5 & 2) != 0)
    goto LABEL_22;
  if ((v4 & 1) != 0)
  {
    if ((*((_BYTE *)this + 224) & 1) == 0)
      goto LABEL_7;
LABEL_22:
    *((_BYTE *)v3 + 8) = 1;
    return;
  }
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
  a1 = WebCore::parseCacheControlDirectives((unsigned int *)this + 20, v20, (int64x2_t *)v21);
  *(_OWORD *)((char *)this + 200) = *(_OWORD *)v21;
  *(_OWORD *)((char *)this + 209) = *(_OWORD *)&v21[9];
  v4 = *((_WORD *)this + 116) | 1;
  *((_WORD *)this + 116) = v4;
  v5 = *((_BYTE *)this + 224);
  if ((v5 & 1) != 0)
    goto LABEL_22;
LABEL_7:
  if ((v4 & 1) == 0)
  {
    WebCore::ResourceResponseBase::parseCacheControlDirectives(this);
    v5 = *((_BYTE *)this + 224);
  }
  if ((v5 & 4) != 0)
    goto LABEL_22;
  *((_BYTE *)v3 + 8) = 2;
  WTF::WallTime::now((WTF::WallTime *)a1);
  v7 = v6;
  WebCore::computeFreshnessLifetimeForHTTPFamily((uint64_t)this);
  v9 = v8 + v7;
  v10 = fmax(v7 - COERCE_DOUBLE(WebCore::ResourceResponseBase::date(this)), 0.0);
  if (v11)
    v12 = v10;
  else
    v12 = 0.0;
  WebCore::ResourceResponseBase::age(this);
  v14 = *(double *)&v13;
  if (!v15)
    v14 = 0.0;
  if (v14 <= v12)
    v16 = v12;
  else
    v16 = v14;
  WTF::WallTime::now(v13);
  v18 = v9 - (v17 - v7 + v16);
  if (v18 >= *(double *)v3)
    v18 = *(double *)v3;
  *(double *)v3 = v18;
}

BOOL WebCore::redirectChainAllowsReuse(WTF::WallTime *a1, char a2, int a3)
{
  double v5;

  if (!a2)
    return 1;
  if (a2 != 2)
    return 0;
  if (a3)
    return 1;
  WTF::WallTime::now(a1);
  return v5 <= *(double *)&a1;
}

_BYTE *WTF::String::removeCharacters<WebCore::parseCacheControlDirectives(WebCore::HTTPHeaderMap const&)::$_0>(_BYTE *result, uint64_t a2)
{
  _QWORD *v2;
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int16 *v7;
  unsigned int v8;
  WTF *v9;
  size_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  _BYTE *v13;
  uint64_t v14;
  unsigned __int16 *v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  _BYTE *v19;
  unsigned __int8 *v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  void *v24;
  uint64_t v25;
  WTF *v26;

  v2 = result;
  v3 = *(_BYTE **)(a2 + 8);
  if ((*(_BYTE *)(a2 + 16) & 4) != 0)
  {
    v9 = (WTF *)*(unsigned int *)(a2 + 4);
    if (!(_DWORD)v9)
      goto LABEL_13;
    v10 = 0;
    v11 = (unsigned __int8 *)v9 + (_QWORD)v3;
    while (1)
    {
      v12 = v3[v10];
      if (v12 < 0x21 || v12 == 127)
        break;
      if (v9 == (WTF *)++v10)
        goto LABEL_13;
    }
    result = (_BYTE *)WTF::fastMalloc(v9);
    v26 = (WTF *)result;
    if (v10 > (unint64_t)v9)
      goto LABEL_54;
    v19 = result;
    if ((_DWORD)v10)
    {
      if ((_DWORD)v10 == 1)
        *result = *v3;
      else
        memcpy(result, v3, v10);
    }
    if (v9 == (WTF *)v10)
    {
LABEL_50:
      WTF::StringImpl::adopt();
LABEL_51:
      result = (_BYTE *)WTF::fastFree(v26, v24);
      a2 = v25;
      goto LABEL_52;
    }
    v20 = &v3[v10];
    v21 = v10;
    while (1)
    {
      while (1)
      {
        v22 = *v20;
        if (v22 < 0x21 || v22 == 127)
          break;
LABEL_40:
        if (v20 != v11)
        {
          while (1)
          {
            v23 = *v20;
            if (v23 < 0x21 || v23 == 127)
              break;
            ++v20;
            v19[v21++] = v23;
            if (v20 == v11)
              goto LABEL_50;
          }
          if (v20 != v11)
            continue;
        }
        goto LABEL_50;
      }
      if (++v20 == v11)
      {
        v20 = &v3[(_QWORD)v9];
        goto LABEL_40;
      }
    }
  }
  v4 = *(unsigned int *)(a2 + 4);
  if (!(_DWORD)v4)
  {
LABEL_13:
    *(_DWORD *)a2 += 2;
LABEL_52:
    *v2 = a2;
    return result;
  }
  v5 = 0;
  v6 = 0;
  v7 = (unsigned __int16 *)&v3[2 * v4];
  while (1)
  {
    v8 = *(unsigned __int16 *)&v3[2 * v5];
    if (v8 < 0x21 || v8 == 127)
      break;
    v6 -= 2;
    ++v5;
    if (-2 * v4 == v6)
      goto LABEL_13;
  }
  result = (_BYTE *)WTF::fastMalloc((WTF *)(2 * v4));
  v26 = (WTF *)result;
  if (v5 <= v4)
  {
    v13 = result;
    v14 = -2 * v4;
    if ((_DWORD)v5 == 1)
    {
      *(_WORD *)result = *(_WORD *)v3;
    }
    else if ((_DWORD)v5)
    {
      memcpy(result, v3, -v6);
    }
    if (v14 != v6)
    {
      v15 = (unsigned __int16 *)&v3[-v6];
      v16 = v5;
      do
      {
        while (1)
        {
          v17 = *v15;
          if (v17 >= 0x21 && v17 != 127)
            break;
          if (++v15 == v7)
            goto LABEL_47;
        }
        if (v15 == v7)
          break;
        while (1)
        {
          v18 = *v15;
          if (v18 < 0x21 || v18 == 127)
            break;
          ++v15;
          *(_WORD *)&v13[2 * v16++] = v18;
          if (v15 == v7)
            goto LABEL_47;
        }
      }
      while (v15 != v7);
    }
LABEL_47:
    WTF::StringImpl::adopt();
    goto LABEL_51;
  }
LABEL_54:
  __break(1u);
  return result;
}

uint64_t WebCore::collectVaryingRequestHeaders@<X0>(WebCore *this@<X0>, const WebCore::CookieJar *a2@<X1>, const WebCore::ResourceRequest *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v8;
  _QWORD *v10;
  WebCore *v11;

  v11 = this;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E341D820;
  v8[1] = a2;
  v8[2] = &v11;
  v10 = v8;
  WebCore::collectVaryingRequestHeadersInternal(a4, (uint64_t)a3, &v10);
  return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
}

uint64_t WebCore::verifyVaryingRequestHeadersInternal(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  char v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  char v13;
  WTF::StringImpl *v14[7];

  if (!a2)
    return 1;
  v14[5] = v3;
  v14[6] = v4;
  v7 = a1;
  v8 = a1 + 16 * a2;
  while ((MEMORY[0x19AEA53F4](*(_QWORD *)v7, "*", 1) & 1) == 0)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a3 + 16))(v14, *a3, v7);
    v10 = WTF::equal(v14[0], *(const WTF::StringImpl **)(v7 + 8), v9);
    v12 = v14[0];
    v14[0] = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
      {
        v13 = v10;
        WTF::StringImpl::destroy(v12, v11);
        v10 = v13;
      }
      else
      {
        *(_DWORD *)v12 -= 2;
      }
    }
    if ((v10 & 1) == 0)
      break;
    v7 += 16;
    result = 1;
    if (v7 == v8)
      return result;
  }
  return 0;
}

uint64_t WebCore::verifyVaryingRequestHeaders(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;

  v9 = a1;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v5 = off_1E341D8C0;
  v5[1] = a3;
  v5[2] = &v9;
  v8 = v5;
  v6 = WebCore::verifyVaryingRequestHeadersInternal(*(_QWORD *)a2, *(_DWORD *)(a2 + 12), &v8);
  (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  return v6;
}

uint64_t WebCore::isStatusCodePotentiallyCacheable(WebCore *this)
{
  int v1;
  uint64_t result;
  unsigned int v3;

  v1 = (int)this;
  result = 1;
  if (((v1 - 201) > 4 || ((1 << (v1 + 55)) & 0x13) == 0)
    && ((v1 - 302) > 5 || ((1 << (v1 - 46)) & 0x23) == 0))
  {
    v3 = v1 - 403;
    if (v3 > 0xC || ((1 << v3) & 0x1009) == 0)
      return 0;
  }
  return result;
}

BOOL WebCore::CredentialBase::isEmpty(WebCore::CredentialBase *this)
{
  uint64_t v1;

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
    return 0;
  v1 = *((_QWORD *)this + 1);
  return !v1 || *(_DWORD *)(v1 + 4) == 0;
}

BOOL WebCore::CredentialBase::hasPassword(WebCore::CredentialBase *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  return v1 && *(_DWORD *)(v1 + 4) != 0;
}

uint64_t WebCore::CredentialBase::compare(WTF **this, const WTF::StringImpl **a2, const WebCore::Credential *a3)
{
  uint64_t result;
  const WTF::StringImpl *v6;
  void *v7;

  if (*((unsigned __int8 *)this + 16) != *((unsigned __int8 *)a2 + 16))
    return 0;
  result = WTF::equal(*this, *a2, a3);
  if ((_DWORD)result)
  {
    result = WTF::equal(this[1], a2[1], v6);
    if ((_DWORD)result)
    {
      if ((unint64_t)this[3] | (unint64_t)a2[3])
      {
        v7 = (void *)WebCore::Credential::nsCredential((WebCore::Credential *)this);
        return objc_msgSend(v7, "isEqual:", WebCore::Credential::nsCredential((WebCore::Credential *)a2));
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

WTF *WebCore::CredentialBase::serializationForBasicAuthorizationHeader@<X0>(WebCore::CredentialBase *this@<X0>, _QWORD *a2@<X8>)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  int v5;
  int v6;
  BOOL v7;
  int v8;
  char v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF *v15;
  char *v16;
  void *v17;
  WTF *result;
  _QWORD v19[2];
  int v20;
  WTF *v21;
  WTF::StringImpl *v22[2];

  v3 = *(WTF::StringImpl **)this;
  if (*(_QWORD *)this)
    *(_DWORD *)v3 += 2;
  v4 = *((_QWORD *)this + 1);
  if (v4)
    *(_DWORD *)v4 += 2;
  if (v3)
  {
    v5 = *((_DWORD *)v3 + 1);
    if (v4)
      goto LABEL_7;
LABEL_41:
    v6 = 0;
    goto LABEL_8;
  }
  v5 = 0;
  if (!v4)
    goto LABEL_41;
LABEL_7:
  v6 = *(_DWORD *)(v4 + 4);
  if (v6 < 0)
  {
LABEL_45:
    v22[0] = 0;
    goto LABEL_46;
  }
LABEL_8:
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  v9 = v7;
  if (v5 < 0)
    goto LABEL_45;
  if ((v9 & 1) != 0)
    goto LABEL_45;
  v10 = (v5 + v8);
  if (__OFADD__(v5, v8))
    goto LABEL_45;
  if (v3)
  {
    v11 = *((_DWORD *)v3 + 4);
    v12 = (v11 >> 2) & 1;
    if (v4 && (v11 & 4) != 0)
      goto LABEL_17;
  }
  else
  {
    if (v4)
    {
LABEL_17:
      v12 = (*(unsigned __int8 *)(v4 + 16) >> 2) & 1;
      goto LABEL_18;
    }
    v12 = 1;
  }
LABEL_18:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v10, v12, (uint64_t)v3, 58, v4, v22);
  if (!v22[0])
  {
LABEL_46:
    __break(0xC471u);
    goto LABEL_48;
  }
  WTF::String::utf8();
  v14 = v22[0];
  v22[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::destroy(v14, v13);
      if (!v4)
        goto LABEL_25;
      goto LABEL_23;
    }
    *(_DWORD *)v14 -= 2;
  }
  if (!v4)
    goto LABEL_25;
LABEL_23:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v13);
  else
    *(_DWORD *)v4 -= 2;
LABEL_25:
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v13);
    else
      *(_DWORD *)v3 -= 2;
  }
  v15 = v21;
  if (v21)
  {
    v16 = (char *)v21 + 16;
    v15 = (WTF *)*((_QWORD *)v21 + 1);
  }
  else
  {
    v16 = 0;
  }
  v19[0] = v16;
  v19[1] = v15;
  v20 = 0;
  v22[0] = (WTF::StringImpl *)"Basic ";
  v22[1] = (WTF::StringImpl *)7;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::Base64Specification>((uint64_t)v22, (uint64_t)v19, a2);
  if (!*a2)
  {
    __break(0xC471u);
LABEL_48:
    JUMPOUT(0x1962E75F8);
  }
  result = v21;
  v21 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, v17);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::CredentialBase::nonPlatformData@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  _DWORD *v3;

  v2 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    *v2 += 2;
  *(_QWORD *)a2 = v2;
  v3 = *(_DWORD **)(this + 8);
  if (v3)
    *v3 += 2;
  *(_QWORD *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(this + 16);
  return this;
}

WTF::StringImpl *WebCore::CredentialStorage::set(WebCore::CredentialStorage *this, WTF::StringImpl **a2, const WebCore::Credential *a3, const WebCore::ProtectionSpace *a4, const WTF::URL *a5)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  int *v13;
  const void *v14;
  WTF::StringImpl *v15;
  CFTypeRef v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *result;
  const WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  const WTF::StringImpl *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int i;
  unsigned int v32;
  uint64_t v33;
  WTF *v34;
  _DWORD *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  _DWORD *v40;
  WTF::StringImpl *v41;
  int v42;
  const void *v43;
  const void *v44;
  uint64_t v45;
  int v46;
  WTF::StringImpl **v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl **v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  int v54;
  const void **v55;
  const void *v56;
  const void *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  unsigned int v62;
  WTF::StringImpl *v63[3];
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  _DWORD v67[2];
  CFTypeRef cf;

  v9 = *a2;
  if (*a2)
    *(_DWORD *)v9 += 2;
  v64 = v9;
  v10 = *(WTF::StringImpl **)a4;
  if (*(_QWORD *)a4)
    *(_DWORD *)v10 += 2;
  v65 = v10;
  v11 = (WTF::StringImpl *)*((_QWORD *)a4 + 1);
  if (v11)
    *(_DWORD *)v11 += 2;
  v13 = (int *)((char *)a4 + 16);
  v12 = *((_DWORD *)a4 + 4);
  v66 = v11;
  v67[0] = v12;
  *(_DWORD *)((char *)v67 + 3) = *(_DWORD *)((char *)a4 + 19);
  v14 = (const void *)*((_QWORD *)a4 + 3);
  cf = v14;
  if (v14)
    CFRetain(v14);
  WTF::HashMap<std::pair<WTF::String,WebCore::ProtectionSpace>,WebCore::Credential,WTF::DefaultHash<std::pair<WTF::String,WebCore::ProtectionSpace>>,WTF::HashTraits<std::pair<WTF::String,WebCore::ProtectionSpace>>,WTF::HashTraits<WebCore::Credential>,WTF::HashTableTraits>::inlineSet<std::pair<WTF::String,WebCore::ProtectionSpace>,WebCore::Credential const&>((uint64_t)v63, (uint64_t *)this, (uint64_t)&v64, (uint64_t)a3);
  v16 = cf;
  cf = 0;
  if (v16)
    CFRelease(v16);
  v17 = v66;
  v66 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v65;
  v65 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v15);
    else
      *(_DWORD *)v18 -= 2;
  }
  result = v64;
  v64 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    else
      *(_DWORD *)result -= 2;
  }
  if (*((unsigned __int8 *)a4 + 20) - 5 < 4 || *((_BYTE *)a4 + 21) == 7)
    return result;
  WebCore::originStringFromURL((WebCore *)v63, a5);
  WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::add((uint64_t)this + 8, v63, v20, (uint64_t)&v64);
  result = v63[0];
  v63[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
    else
      *(_DWORD *)result -= 2;
  }
  if (*((unsigned __int8 *)a4 + 21) - 1 > 1)
    return result;
  WebCore::protectionSpaceMapKeyFromURL((int **)&v64, (WTF::StringImpl **)a5);
  v26 = *((_QWORD *)this + 4);
  v24 = (uint64_t *)((char *)this + 32);
  v25 = v26;
  if (v26
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::ProtectionSpace>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::ProtectionSpace>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::ProtectionSpace,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ProtectionSpace>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v24, 8u, 0), (v25 = *v24) != 0))
  {
    v27 = *(_DWORD *)(v25 - 8);
  }
  else
  {
    v27 = 0;
  }
  v28 = *((_DWORD *)v64 + 4);
  if (v28 < 0x100)
    v29 = WTF::StringImpl::hashSlowCase(v64);
  else
    v29 = v28 >> 8;
  v30 = 0;
  for (i = 1; ; ++i)
  {
    v32 = v29 & v27;
    v33 = v25 + 40 * (v29 & v27);
    v34 = *(WTF **)v33;
    if (*(_QWORD *)v33 != -1)
      break;
    v30 = v25 + 40 * v32;
LABEL_41:
    v29 = i + v32;
  }
  if (!v34)
  {
    if (v30)
    {
      *(_QWORD *)v30 = 0;
      v35 = (_DWORD *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *v35 += 4;
      *(_QWORD *)(v30 + 8) = v35;
      *(_QWORD *)(v30 + 16) = v35;
      *(_DWORD *)(v30 + 24) = 0;
      *(_WORD *)(v30 + 28) = 257;
      *(_BYTE *)(v30 + 30) = 0;
      *(_QWORD *)(v30 + 32) = 0;
      --*(_DWORD *)(*v24 - 16);
      v33 = v30;
    }
    v36 = v64;
    v64 = 0;
    v37 = *(WTF::StringImpl **)v33;
    *(_QWORD *)v33 = v36;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, v22);
      else
        *(_DWORD *)v37 -= 2;
    }
    v38 = *(WTF::StringImpl **)a4;
    if (*(_QWORD *)a4)
      *(_DWORD *)v38 += 2;
    v39 = *(WTF::StringImpl **)(v33 + 8);
    *(_QWORD *)(v33 + 8) = v38;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, v22);
      else
        *(_DWORD *)v39 -= 2;
    }
    v40 = (_DWORD *)*((_QWORD *)a4 + 1);
    if (v40)
      *v40 += 2;
    v41 = *(WTF::StringImpl **)(v33 + 16);
    *(_QWORD *)(v33 + 16) = v40;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
        WTF::StringImpl::destroy(v41, v22);
      else
        *(_DWORD *)v41 -= 2;
    }
    v42 = *v13;
    *(_DWORD *)(v33 + 27) = *(_DWORD *)((char *)a4 + 19);
    *(_DWORD *)(v33 + 24) = v42;
    v43 = (const void *)*((_QWORD *)a4 + 3);
    if (v43)
      CFRetain(v43);
    v44 = *(const void **)(v33 + 32);
    *(_QWORD *)(v33 + 32) = v43;
    if (v44)
      CFRelease(v44);
    v45 = *v24;
    if (*v24)
      v46 = *(_DWORD *)(v45 - 12) + 1;
    else
      v46 = 1;
    *(_DWORD *)(v45 - 12) = v46;
    v58 = *v24;
    if (*v24)
      v59 = *(_DWORD *)(v58 - 12);
    else
      v59 = 0;
    v60 = (*(_DWORD *)(v58 - 16) + v59);
    v61 = *(unsigned int *)(v58 - 4);
    if (v61 > 0x400)
    {
      if (v61 > 2 * v60)
        goto LABEL_91;
    }
    else
    {
      if (3 * v61 > 4 * v60)
        goto LABEL_91;
      if (!(_DWORD)v61)
      {
        v62 = 8;
        goto LABEL_90;
      }
    }
    v62 = (_DWORD)v61 << (6 * *(_DWORD *)(v58 - 12) >= (2 * v61));
LABEL_90:
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::ProtectionSpace>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::ProtectionSpace>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::ProtectionSpace,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ProtectionSpace>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v24, v62, v33);
    goto LABEL_91;
  }
  if (!WTF::equal(v34, v64, v23))
    goto LABEL_41;
  v47 = (WTF::StringImpl **)(v25 + 40 * v32 + 8);
  v48 = *(WTF::StringImpl **)a4;
  if (*(_QWORD *)a4)
    *(_DWORD *)v48 += 2;
  v49 = *v47;
  *v47 = v48;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, v22);
    else
      *(_DWORD *)v49 -= 2;
  }
  v50 = (WTF::StringImpl **)(v25 + 40 * v32 + 16);
  v51 = (WTF::StringImpl *)*((_QWORD *)a4 + 1);
  if (v51)
    *(_DWORD *)v51 += 2;
  v52 = *v50;
  *v50 = v51;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
      WTF::StringImpl::destroy(v52, v22);
    else
      *(_DWORD *)v52 -= 2;
  }
  v53 = v25 + 40 * v32;
  v54 = *v13;
  *(_DWORD *)(v53 + 27) = *(_DWORD *)((char *)a4 + 19);
  *(_DWORD *)(v53 + 24) = v54;
  v55 = (const void **)(v53 + 32);
  v56 = (const void *)*((_QWORD *)a4 + 3);
  if (v56)
    CFRetain(*((CFTypeRef *)a4 + 3));
  v57 = *v55;
  *v55 = v56;
  if (v57)
    CFRelease(v57);
LABEL_91:
  result = v64;
  v64 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t std::pair<WTF::String,WebCore::ProtectionSpace>::~pair(uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v3 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return a1;
}

uint64_t WebCore::originStringFromURL(WebCore *this, const WTF::URL *a2)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  int v8;
  BOOL v9;
  int v10;
  int v11;
  BOOL v12;
  _BOOL4 v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  v4 = (_BYTE *)WTF::URL::protocol(a2);
  v6 = v5;
  result = WTF::URL::hostAndPort(a2);
  if (v15)
  {
    v8 = *((_DWORD *)v15 + 1);
    if (v8 < 0)
    {
LABEL_22:
      *(_QWORD *)this = 0;
LABEL_23:
      __break(0xC471u);
      return result;
    }
  }
  else
  {
    v8 = 0;
  }
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    goto LABEL_22;
  v9 = __OFADD__(v10, 3);
  v11 = v10 + 3;
  v12 = v9;
  if ((v6 & 0x80000000) != 0)
    goto LABEL_22;
  if (v12)
    goto LABEL_22;
  result = (v6 + v11);
  if (__OFADD__((_DWORD)v6, v11))
    goto LABEL_22;
  v13 = (v6 & 0xFF00000000) != 0 && (!v15 || (*((_BYTE *)v15 + 16) & 4) != 0);
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(result, v13, v4, v6, (int8x16_t *)"://", 3u, (uint64_t)v15, 47, this);
  if (!*(_QWORD *)this)
    goto LABEL_23;
  result = (uint64_t)v15;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      return WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  return result;
}

int *WebCore::protectionSpaceMapKeyFromURL(int **this, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  int v5;
  int *result;
  uint64_t v7;
  WTF::StringImpl *v8;
  unsigned int v9;
  int v10;
  WTF::StringImpl *v11;

  v4 = *a2;
  if (*a2)
  {
    if (*((_DWORD *)v4 + 1) > *((_DWORD *)a2 + 8))
    {
      WTF::StringImpl::substring(v4);
    }
    else
    {
      *(_DWORD *)v4 += 2;
      *this = (int *)v4;
    }
  }
  else
  {
    *this = 0;
  }
  v5 = WTF::URL::pathStart((WTF::URL *)a2);
  result = *this;
  if (*this && result[1] > (v5 + 1))
  {
    v7 = WTF::StringImpl::reverseFind();
    if (v7 == v5)
      v9 = v5 + 1;
    else
      v9 = v7;
    result = *this;
    if (!*this)
    {
      *this = 0;
      return result;
    }
    if (result[1] <= v9)
    {
      v10 = *result;
      *result += 2;
      if (v10)
      {
LABEL_12:
        *result = v10;
        return result;
      }
LABEL_17:
      WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
      return 0;
    }
    WTF::StringImpl::substring((WTF::StringImpl *)result);
    result = *this;
    *this = (int *)v11;
    if (result)
    {
      v10 = *result - 2;
      if (*result != 2)
        goto LABEL_12;
      goto LABEL_17;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::CredentialStorage::get@<X0>(WebCore::CredentialStorage *this@<X0>, WTF::StringImpl **a2@<X1>, const WebCore::ProtectionSpace *a3@<X2>, uint64_t a4@<X8>)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  const void *v9;
  WTF::StringImpl *v10;
  CFTypeRef v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  _DWORD v18[2];
  CFTypeRef cf;

  v6 = *a2;
  if (*a2)
    *(_DWORD *)v6 += 2;
  v15 = v6;
  v7 = *(WTF::StringImpl **)a3;
  if (*(_QWORD *)a3)
    *(_DWORD *)v7 += 2;
  v16 = v7;
  v8 = (WTF::StringImpl *)*((_QWORD *)a3 + 1);
  if (v8)
    *(_DWORD *)v8 += 2;
  v17 = v8;
  v18[0] = *((_DWORD *)a3 + 4);
  *(_DWORD *)((char *)v18 + 3) = *(_DWORD *)((char *)a3 + 19);
  v9 = (const void *)*((_QWORD *)a3 + 3);
  cf = v9;
  if (v9)
    CFRetain(v9);
  WTF::HashMap<std::pair<WTF::String,WebCore::ProtectionSpace>,WebCore::Credential,WTF::DefaultHash<std::pair<WTF::String,WebCore::ProtectionSpace>>,WTF::HashTraits<std::pair<WTF::String,WebCore::ProtectionSpace>>,WTF::HashTraits<WebCore::Credential>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::String,WebCore::ProtectionSpace>,WebCore::Credential,WTF::DefaultHash<std::pair<WTF::String,WebCore::ProtectionSpace>>,WTF::HashTraits<std::pair<WTF::String,WebCore::ProtectionSpace>>,WTF::HashTraits<WebCore::Credential>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::String,WebCore::ProtectionSpace>>>,std::pair<WTF::String,WebCore::ProtectionSpace>>((uint64_t)this, &v15, a4);
  v11 = cf;
  cf = 0;
  if (v11)
    CFRelease(v11);
  v12 = v17;
  v17 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v16;
  v16 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v10);
    else
      *(_DWORD *)v13 -= 2;
  }
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::CredentialStorage::remove(WebCore::CredentialStorage *this, WTF::StringImpl **a2, const WebCore::ProtectionSpace *a3)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  const void *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  const WTF::StringImpl *v15;
  const WTF::StringImpl *v16;
  int v17;
  uint64_t v18;
  const void *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  const void *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  CFTypeRef v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *result;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  _DWORD v38[2];
  CFTypeRef cf;

  v4 = *a2;
  if (*a2)
    *(_DWORD *)v4 += 2;
  v35 = v4;
  v5 = *(WTF::StringImpl **)a3;
  if (*(_QWORD *)a3)
    *(_DWORD *)v5 += 2;
  v36 = v5;
  v6 = (WTF::StringImpl *)*((_QWORD *)a3 + 1);
  if (v6)
    *(_DWORD *)v6 += 2;
  v37 = v6;
  v38[0] = *((_DWORD *)a3 + 4);
  *(_DWORD *)((char *)v38 + 3) = *(_DWORD *)((char *)a3 + 19);
  v7 = (const void *)*((_QWORD *)a3 + 3);
  cf = v7;
  if (v7)
    CFRetain(v7);
  v8 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = *((_DWORD *)v4 + 4);
    if (v10 < 0x100)
      v11 = WTF::StringImpl::hashSlowCase(v4);
    else
      v11 = v10 >> 8;
    v12 = v9 & ((0xD7862706ELL
               * (unint64_t)(277951225 * v11
                                  + 95187966 * WebCore::ProtectionSpaceHash::hash((uint64_t *)&v36))) >> 4);
    v13 = v8 + 72 * v12;
    if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WebCore::ProtectionSpace>>,false>::isEmptyValue<std::pair<WTF::String,WebCore::ProtectionSpace>>((WTF **)v13, v14, v15) & 1) != 0)
    {
LABEL_19:
      v18 = *(_QWORD *)this;
      if (!*(_QWORD *)this)
        goto LABEL_51;
      v13 = v18 + 72 * *(unsigned int *)(v18 - 4);
    }
    else
    {
      v17 = 1;
      while (*(_QWORD *)v13 == -1
           || !WTF::equal(*(WTF **)v13, v35, v16)
           || (WebCore::ProtectionSpaceBase::compare((WTF **)(v13 + 8), &v36, v16) & 1) == 0)
      {
        v12 = (v12 + v17) & v9;
        v13 = v8 + 72 * v12;
        ++v17;
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WebCore::ProtectionSpace>>,false>::isEmptyValue<std::pair<WTF::String,WebCore::ProtectionSpace>>((WTF **)v13, (uint64_t)a2, v16))goto LABEL_19;
      }
      v18 = *(_QWORD *)this;
      if (!*(_QWORD *)this)
      {
LABEL_22:
        if (v18 != v13)
        {
          v19 = *(const void **)(v13 + 32);
          *(_QWORD *)(v13 + 32) = 0;
          if (v19)
            CFRelease(v19);
          v20 = *(WTF::StringImpl **)(v13 + 16);
          *(_QWORD *)(v13 + 16) = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v20 -= 2;
          }
          v21 = *(WTF::StringImpl **)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v21 -= 2;
          }
          v22 = *(WTF::StringImpl **)v13;
          *(_QWORD *)v13 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v22 -= 2;
          }
          *(_QWORD *)v13 = -1;
          v23 = *(const void **)(v13 + 64);
          *(_QWORD *)(v13 + 64) = 0;
          if (v23)
            CFRelease(v23);
          v24 = *(WTF::StringImpl **)(v13 + 48);
          *(_QWORD *)(v13 + 48) = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v24 -= 2;
          }
          v25 = *(WTF::StringImpl **)(v13 + 40);
          *(_QWORD *)(v13 + 40) = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v25 -= 2;
          }
          ++*(_DWORD *)(*(_QWORD *)this - 16);
          v26 = *(_QWORD *)this;
          if (*(_QWORD *)this)
            v27 = *(_DWORD *)(v26 - 12) - 1;
          else
            v27 = -1;
          *(_DWORD *)(v26 - 12) = v27;
          v28 = *(_QWORD *)this;
          if (*(_QWORD *)this)
          {
            v29 = 6 * *(_DWORD *)(v28 - 12);
            v30 = *(_DWORD *)(v28 - 4);
            if (v29 < v30 && v30 >= 9)
              WTF::HashTable<std::pair<WTF::String,WebCore::ProtectionSpace>,WTF::KeyValuePair<std::pair<WTF::String,WebCore::ProtectionSpace>,WebCore::Credential>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WebCore::ProtectionSpace>,WebCore::Credential>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::ProtectionSpace>>,WTF::HashMap<std::pair<WTF::String,WebCore::ProtectionSpace>,WebCore::Credential,WTF::DefaultHash<std::pair<WTF::String,WebCore::ProtectionSpace>>,WTF::HashTraits<std::pair<WTF::String,WebCore::ProtectionSpace>>,WTF::HashTraits<WebCore::Credential>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WebCore::ProtectionSpace>>>::rehash((uint64_t *)this, v30 >> 1, 0);
          }
        }
        goto LABEL_51;
      }
    }
    v18 += 72 * *(unsigned int *)(v18 - 4);
    if (v18 == v13)
      goto LABEL_51;
    goto LABEL_22;
  }
LABEL_51:
  v31 = cf;
  cf = 0;
  if (v31)
    CFRelease(v31);
  v32 = v37;
  v37 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v32 -= 2;
  }
  v33 = v36;
  v36 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v33 -= 2;
  }
  result = v35;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v35, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v35 -= 2;
  }
  return result;
}

uint64_t WebCore::CredentialStorage::removeCredentialsWithOrigin(uint64_t this, const WebCore::SecurityOriginData *a2, const WTF::StringImpl *a3)
{
  WTF ***v4;
  WTF **v5;
  uint64_t v6;
  WTF **v7;
  uint64_t v8;
  unint64_t v9;
  WTF **v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  const WTF::StringImpl **v13;
  const WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  const WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned int v26;
  char *v27;
  _DWORD *v28;
  unsigned int v29;
  WTF *v30;
  _DWORD *v31;
  _DWORD *v32;
  char *v33;
  int v34;
  WTF *v35;
  WTF *v36;
  _DWORD *v37;
  _DWORD *v38;
  char *v39;
  int v40;
  unint64_t v41;
  WTF::StringImpl *v42;
  void *v43;
  int v44;
  CFTypeRef v45;
  int v46;
  WTF *v47;
  uint64_t v48;
  WTF::StringImpl **v49;
  WTF::StringImpl **v50;
  uint64_t v51;
  char *v52;
  const void *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WebCore::CredentialStorage *v56;
  WebCore::CredentialStorage *v57;
  WTF *v58;
  uint64_t v59;
  char v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  int v64;
  __int16 v65;
  char v66;
  CFTypeRef cf;

  v4 = (WTF ***)this;
  v58 = 0;
  v59 = 0;
  v5 = *(WTF ***)this;
  if (!*(_QWORD *)this)
  {
    v9 = 0;
    LODWORD(v6) = 0;
    goto LABEL_13;
  }
  v6 = *((unsigned int *)v5 - 1);
  v7 = &v5[9 * v6];
  if (!*((_DWORD *)v5 - 3))
  {
    v9 = (unint64_t)&v5[9 * v6];
LABEL_13:
    v7 = &v5[9 * v6];
    if (v5)
      goto LABEL_14;
LABEL_16:
    v10 = 0;
    goto LABEL_17;
  }
  if (!(_DWORD)v6)
  {
    v9 = *(_QWORD *)this;
    if (v5)
      goto LABEL_14;
    goto LABEL_16;
  }
  v8 = 72 * v6;
  while (1)
  {
    this = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WebCore::ProtectionSpace>>,false>::isEmptyValue<std::pair<WTF::String,WebCore::ProtectionSpace>>(v5, (uint64_t)a2, a3);
    if ((this & 1) == 0 && *v5 != (WTF *)-1)
      break;
    v5 += 9;
    v8 -= 72;
    if (!v8)
    {
      v5 = v7;
      break;
    }
  }
  v9 = (unint64_t)v5;
  v5 = *v4;
  if (!*v4)
    goto LABEL_16;
LABEL_14:
  v10 = &v5[9 * *((unsigned int *)v5 - 1)];
LABEL_17:
  if (v10 == (WTF **)v9)
    return this;
  v57 = (WebCore::CredentialStorage *)v4;
  v11 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
  do
  {
    v12 = *((unsigned int *)a2 + 6);
    if ((_DWORD)v12 == -1)
      goto LABEL_113;
    v61 = (WTF::StringImpl *)&v60;
    v13 = (const WTF::StringImpl **)((uint64_t (*)(WTF::StringImpl **, const WebCore::SecurityOriginData *))off_1E341D710[v12])(&v61, a2);
    this = WTF::equal(*(WTF **)(v9 + 8), *v13, v14);
    if (!(_DWORD)this)
      goto LABEL_54;
    v17 = *((unsigned int *)a2 + 6);
    if ((_DWORD)v17 == -1)
      goto LABEL_113;
    v61 = (WTF::StringImpl *)&v60;
    if ((((uint64_t (*)(WTF::StringImpl **, const WebCore::SecurityOriginData *))off_1E341D720[v17])(&v61, a2) & 0xFF0000) == 0)goto LABEL_28;
    v18 = *((unsigned int *)a2 + 6);
    if ((_DWORD)v18 == -1)
      goto LABEL_113;
    v19 = *(_DWORD *)(v9 + 24);
    v61 = (WTF::StringImpl *)&v60;
    this = ((uint64_t (*)(WTF::StringImpl **, const WebCore::SecurityOriginData *))off_1E341D720[v18])(&v61, a2);
    if ((this & 0xFF0000) == 0)
    {
      __break(1u);
LABEL_113:
      v56 = (WebCore::CredentialStorage *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::CredentialStorage::originsWithCredentials(v56);
    }
    if (v19 != (unsigned __int16)this)
    {
LABEL_28:
      v20 = *((unsigned int *)a2 + 6);
      if ((_DWORD)v20 == -1)
        goto LABEL_113;
      v61 = (WTF::StringImpl *)&v60;
      this = ((uint64_t (*)(WTF::StringImpl **, const WebCore::SecurityOriginData *))off_1E341D720[v20])(&v61, a2);
      if ((this & 0xFF0000) != 0 || *(_DWORD *)(v9 + 24) != 80)
        goto LABEL_54;
    }
    v21 = *(unsigned __int8 *)(v9 + 28);
    if (v21 == 1)
    {
      v22 = *((unsigned int *)a2 + 6);
      if ((_DWORD)v22 == -1)
        goto LABEL_113;
      v61 = (WTF::StringImpl *)&v60;
      v23 = (_QWORD *)((uint64_t (*)(WTF::StringImpl **, const WebCore::SecurityOriginData *))off_1E341D730[v22])(&v61, a2);
      this = MEMORY[0x19AEA53F4](*v23, "http", 4);
      if ((this & 1) != 0)
        goto LABEL_36;
      v21 = *(unsigned __int8 *)(v9 + 28);
    }
    if (v21 != 2)
      goto LABEL_54;
    v24 = *((unsigned int *)a2 + 6);
    if ((_DWORD)v24 == -1)
      goto LABEL_113;
    v61 = (WTF::StringImpl *)&v60;
    v25 = (_QWORD *)((uint64_t (*)(WTF::StringImpl **, const WebCore::SecurityOriginData *))off_1E341D730[v24])(&v61, a2);
    this = MEMORY[0x19AEA53F4](*v25, "https", 5);
    if (!(_DWORD)this)
      goto LABEL_54;
LABEL_36:
    v26 = HIDWORD(v59);
    if (HIDWORD(v59) == (_DWORD)v59)
    {
      v27 = WTF::Vector<std::pair<WTF::String,WebCore::ProtectionSpace>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v58, HIDWORD(v59) + 1, v9);
      v28 = *(_DWORD **)v27;
      if (*(_QWORD *)v27)
        *v28 += 2;
      v29 = HIDWORD(v59);
      v30 = v58;
      *((_QWORD *)v58 + 5 * HIDWORD(v59)) = v28;
      v31 = (_DWORD *)*((_QWORD *)v27 + 1);
      if (v31)
        *v31 += 2;
      *((_QWORD *)v30 + 5 * v29 + 1) = v31;
      v32 = (_DWORD *)*((_QWORD *)v27 + 2);
      if (v32)
        *v32 += 2;
      v33 = (char *)v30 + 40 * v29;
      *((_QWORD *)v33 + 2) = v32;
      v34 = *((_DWORD *)v27 + 6);
      *(_DWORD *)(v33 + 27) = *(_DWORD *)(v27 + 27);
      *((_DWORD *)v33 + 6) = v34;
      this = *((_QWORD *)v27 + 4);
      *((_QWORD *)v33 + 4) = this;
      v26 = v29;
      if (!this)
        goto LABEL_53;
    }
    else
    {
      v35 = *(WTF **)v9;
      if (*(_QWORD *)v9)
        *(_DWORD *)v35 += 2;
      v36 = v58;
      *((_QWORD *)v58 + 5 * v26) = v35;
      v37 = *(_DWORD **)(v9 + 8);
      if (v37)
        *v37 += 2;
      *((_QWORD *)v36 + 5 * v26 + 1) = v37;
      v38 = *(_DWORD **)(v9 + 16);
      if (v38)
        *v38 += 2;
      v39 = (char *)v36 + 40 * v26;
      *((_QWORD *)v39 + 2) = v38;
      v40 = *(_DWORD *)(v9 + 24);
      *(_DWORD *)(v39 + 27) = *(_DWORD *)(v9 + 27);
      *((_DWORD *)v39 + 6) = v40;
      this = *(_QWORD *)(v9 + 32);
      *((_QWORD *)v39 + 4) = this;
      v29 = v26;
      if (!this)
        goto LABEL_53;
    }
    this = (uint64_t)CFRetain((CFTypeRef)this);
    v29 = v26;
LABEL_53:
    HIDWORD(v59) = v29 + 1;
LABEL_54:
    v41 = v9 + 72;
    v9 = (unint64_t)v7;
    if ((WTF **)v41 == v7)
      continue;
    v9 = v41;
    do
    {
      v42 = *v11;
      if (*v11)
        *(_DWORD *)v42 += 4;
      v61 = 0;
      v62 = v42;
      v63 = v42;
      v64 = 0;
      v65 = 257;
      v66 = 0;
      cf = 0;
      if ((WTF::equal(*(WTF **)v9, 0, v16) & 1) == 0
        || !WTF::equal(*(WTF **)(v9 + 8), v42, v16)
        || *(_DWORD *)(v9 + 24)
        || *(_BYTE *)(v9 + 28) != 1
        || !WTF::equal(*(WTF **)(v9 + 16), v42, v16)
        || *(_BYTE *)(v9 + 29) != 1)
      {
        v44 = 0;
LABEL_68:
        cf = 0;
        goto LABEL_69;
      }
      if (!*(_QWORD *)(v9 + 32))
      {
        v44 = 1;
        goto LABEL_68;
      }
      v43 = (void *)WebCore::ProtectionSpace::nsSpace((WebCore::ProtectionSpace *)(v9 + 8));
      v44 = objc_msgSend(v43, "isEqual:", WebCore::ProtectionSpace::nsSpace((WebCore::ProtectionSpace *)&v62));
      v45 = cf;
      cf = 0;
      if (v45)
        CFRelease(v45);
LABEL_69:
      if (v63)
      {
        if (*(_DWORD *)v63 == 2)
          WTF::StringImpl::destroy(v63, v15);
        else
          *(_DWORD *)v63 -= 2;
      }
      if (v62)
      {
        if (*(_DWORD *)v62 == 2)
          WTF::StringImpl::destroy(v62, v15);
        else
          *(_DWORD *)v62 -= 2;
      }
      this = (uint64_t)v61;
      if (v61)
      {
        if (*(_DWORD *)v61 == 2)
          this = WTF::StringImpl::destroy(v61, v15);
        else
          *(_DWORD *)v61 -= 2;
      }
      if (*(_QWORD *)v9 == -1)
        v46 = 1;
      else
        v46 = v44;
      if (v46 != 1)
        goto LABEL_88;
      v9 += 72;
    }
    while ((WTF **)v9 != v7);
    v9 = (unint64_t)v7;
LABEL_88:
    ;
  }
  while ((WTF **)v9 != v10);
  v47 = v58;
  v48 = HIDWORD(v59);
  if (HIDWORD(v59))
  {
    v49 = (WTF::StringImpl **)((char *)v58 + 40 * HIDWORD(v59));
    v50 = (WTF::StringImpl **)v58;
    do
    {
      WebCore::CredentialStorage::remove(v57, v50, (const WebCore::ProtectionSpace *)(v50 + 1));
      v50 += 5;
    }
    while (v50 != v49);
    v51 = 40 * v48;
    v52 = (char *)v47 + 16;
    do
    {
      v53 = (const void *)*((_QWORD *)v52 + 2);
      *((_QWORD *)v52 + 2) = 0;
      if (v53)
        CFRelease(v53);
      v54 = *(WTF::StringImpl **)v52;
      *(_QWORD *)v52 = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
          WTF::StringImpl::destroy(v54, v15);
        else
          *(_DWORD *)v54 -= 2;
      }
      v55 = (WTF::StringImpl *)*((_QWORD *)v52 - 1);
      *((_QWORD *)v52 - 1) = 0;
      if (v55)
      {
        if (*(_DWORD *)v55 == 2)
          WTF::StringImpl::destroy(v55, v15);
        else
          *(_DWORD *)v55 -= 2;
      }
      this = *((_QWORD *)v52 - 2);
      *((_QWORD *)v52 - 2) = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v15);
        else
          *(_DWORD *)this -= 2;
      }
      v52 += 40;
      v51 -= 40;
    }
    while (v51);
  }
  if (v47)
    return WTF::fastFree(v47, v15);
  return this;
}

uint64_t WebCore::CredentialStorage::originsWithCredentials@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t *a4@<X8>)
{
  WTF **v5;
  uint64_t v6;
  WTF **v7;
  WTF ***v8;
  uint64_t v9;
  WTF **v10;
  WTF **v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF **v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  void *v20;
  int v21;
  CFTypeRef v22;
  int v23;
  _BYTE v24[24];
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v28;
  __int16 v29;
  char v30;
  CFTypeRef cf;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  *a4 = 0;
  v5 = *(WTF ***)this;
  if (!*(_QWORD *)this)
  {
    v10 = 0;
    LODWORD(v6) = 0;
    goto LABEL_13;
  }
  v6 = *((unsigned int *)v5 - 1);
  v7 = &v5[9 * v6];
  if (!*((_DWORD *)v5 - 3))
  {
    v10 = &v5[9 * v6];
LABEL_13:
    v7 = &v5[9 * v6];
    if (v5)
      goto LABEL_14;
    goto LABEL_16;
  }
  if ((_DWORD)v6)
  {
    v8 = (WTF ***)this;
    v9 = 72 * v6;
    while (1)
    {
      this = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WebCore::ProtectionSpace>>,false>::isEmptyValue<std::pair<WTF::String,WebCore::ProtectionSpace>>(v5, a2, a3);
      if ((this & 1) == 0 && *v5 != (WTF *)-1)
        break;
      v5 += 9;
      v9 -= 72;
      if (!v9)
      {
        v5 = v7;
        break;
      }
    }
    v10 = v5;
    v5 = *v8;
    if (!*v8)
      goto LABEL_16;
LABEL_14:
    v11 = &v5[9 * *((unsigned int *)v5 - 1)];
    goto LABEL_17;
  }
  v10 = *(WTF ***)this;
  if (v5)
    goto LABEL_14;
LABEL_16:
  v11 = 0;
LABEL_17:
  if (v11 != v10)
  {
    v12 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
    while (1)
    {
      if (*((unsigned __int8 *)v10 + 28) - 5 >= 4)
      {
        switch(*((_BYTE *)v10 + 28))
        {
          case 1:
          case 2:
          case 3:
          case 4:
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v13 = v25;
            v14 = *((unsigned __int16 *)v10 + 12);
            if (v25)
              *(_DWORD *)v25 += 2;
            v15 = v10[1];
            if (v15)
              *(_DWORD *)v15 += 2;
            v25 = v13;
            v26 = v15;
            LODWORD(v27) = v14 | 0x10000;
            v28 = 0;
            if (v13 == (WTF::StringImpl *)-1)
            {
              __break(0xC471u);
              JUMPOUT(0x1962E8C4CLL);
            }
            this = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add(a4, (uint64_t)&v25, (uint64_t)v24);
            if (v28 != -1)
              this = ((uint64_t (*)(_BYTE *, WTF::StringImpl **))off_1E341D740[v28])(v24, &v25);
            if (v13)
            {
              if (*(_DWORD *)v13 == 2)
                this = WTF::StringImpl::destroy(v13, v16);
              else
                *(_DWORD *)v13 -= 2;
            }
            break;
          default:
            break;
        }
      }
      v17 = v10 + 9;
      v10 = v7;
      if (v17 != v7)
        break;
LABEL_65:
      if (v10 == v11)
        return this;
    }
    v10 = v17;
    while (1)
    {
      v18 = *v12;
      if (*v12)
        *(_DWORD *)v18 += 4;
      v25 = 0;
      v26 = v18;
      v27 = v18;
      v28 = 0;
      v29 = 257;
      v30 = 0;
      cf = 0;
      if ((WTF::equal(*v10, 0, a3) & 1) != 0
        && WTF::equal(v10[1], v18, a3)
        && !*((_DWORD *)v10 + 6)
        && *((_BYTE *)v10 + 28) == 1
        && WTF::equal(v10[2], v18, a3)
        && *((_BYTE *)v10 + 29) == 1)
      {
        if (v10[4])
        {
          v20 = (void *)WebCore::ProtectionSpace::nsSpace((WebCore::ProtectionSpace *)(v10 + 1));
          v21 = objc_msgSend(v20, "isEqual:", WebCore::ProtectionSpace::nsSpace((WebCore::ProtectionSpace *)&v26));
          v22 = cf;
          cf = 0;
          if (v22)
            CFRelease(v22);
          goto LABEL_46;
        }
        v21 = 1;
      }
      else
      {
        v21 = 0;
      }
      cf = 0;
LABEL_46:
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v19);
        else
          *(_DWORD *)v27 -= 2;
      }
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v19);
        else
          *(_DWORD *)v26 -= 2;
      }
      this = (uint64_t)v25;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          this = WTF::StringImpl::destroy(v25, v19);
        else
          *(_DWORD *)v25 -= 2;
      }
      if (*v10 == (WTF *)-1)
        v23 = 1;
      else
        v23 = v21;
      if (v23 != 1)
        goto LABEL_65;
      v10 += 9;
      if (v10 == v7)
      {
        v10 = v7;
        goto LABEL_65;
      }
    }
  }
  return this;
}

uint64_t WTF::HashMap<WTF::String,WebCore::ProtectionSpace,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ProtectionSpace>,WTF::HashTableTraits>::find(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v6;
  unsigned int v7;
  int v8;
  WTF **v9;
  int i;
  int v11;
  WTF *v12;

  v3 = *a1;
  if (!*a1)
    return 0;
  v6 = *(_DWORD *)(v3 - 8);
  v7 = *((_DWORD *)*a2 + 4);
  if (v7 < 0x100)
    v8 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v8 = v7 >> 8;
  for (i = 0; ; v8 = i + v11)
  {
    v11 = v8 & v6;
    v9 = (WTF **)(v3 + 40 * (v8 & v6));
    v12 = *v9;
    if (*v9 == (WTF *)-1)
      goto LABEL_10;
    if (!v12)
      break;
    if ((WTF::equal(v12, *a2, a3) & 1) != 0)
      return (uint64_t)v9;
LABEL_10:
    ++i;
  }
  if (*a1)
    return *a1 + 40 * *(unsigned int *)(*a1 - 4);
  else
    return 0;
}

BOOL WebCore::CredentialStorage::set(WebCore::CredentialStorage *this, WTF::StringImpl **a2, const WebCore::Credential *a3, const WTF::URL *a4)
{
  uint64_t DefaultProtectionSpaceForURL;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  const void *v15;
  WTF::StringImpl *v16;
  CFTypeRef v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  _DWORD v26[2];
  CFTypeRef cf;

  DefaultProtectionSpaceForURL = WebCore::CredentialStorage::findDefaultProtectionSpaceForURL(this, a4);
  v8 = DefaultProtectionSpaceForURL;
  v9 = *((_QWORD *)this + 4);
  if (v9)
    v10 = v9 + 40 * *(unsigned int *)(v9 - 4);
  else
    v10 = 0;
  if (v10 != DefaultProtectionSpaceForURL)
  {
    v11 = *a2;
    if (*a2)
      *(_DWORD *)v11 += 2;
    v23 = v11;
    v12 = *(WTF::StringImpl **)(DefaultProtectionSpaceForURL + 8);
    if (v12)
      *(_DWORD *)v12 += 2;
    v24 = v12;
    v13 = *(WTF::StringImpl **)(DefaultProtectionSpaceForURL + 16);
    if (v13)
      *(_DWORD *)v13 += 2;
    v25 = v13;
    v14 = *(_DWORD *)(DefaultProtectionSpaceForURL + 27);
    v26[0] = *(_DWORD *)(DefaultProtectionSpaceForURL + 24);
    *(_DWORD *)((char *)v26 + 3) = v14;
    v15 = *(const void **)(DefaultProtectionSpaceForURL + 32);
    cf = v15;
    if (v15)
      CFRetain(v15);
    WTF::HashMap<std::pair<WTF::String,WebCore::ProtectionSpace>,WebCore::Credential,WTF::DefaultHash<std::pair<WTF::String,WebCore::ProtectionSpace>>,WTF::HashTraits<std::pair<WTF::String,WebCore::ProtectionSpace>>,WTF::HashTraits<WebCore::Credential>,WTF::HashTableTraits>::inlineSet<std::pair<WTF::String,WebCore::ProtectionSpace>,WebCore::Credential const&>((uint64_t)&v22, (uint64_t *)this, (uint64_t)&v23, (uint64_t)a3);
    v17 = cf;
    cf = 0;
    if (v17)
      CFRelease(v17);
    v18 = v25;
    v25 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v16);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v24;
    v24 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v16);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v23;
    v23 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v16);
      else
        *(_DWORD *)v20 -= 2;
    }
  }
  return v10 != v8;
}

CFTypeRef std::make_pair[abi:sn180100]<WTF::String const&,WebCore::ProtectionSpace &>@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  CFTypeRef result;

  v3 = *a1;
  if (*a1)
    *v3 += 2;
  *(_QWORD *)a3 = v3;
  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)(a3 + 8) = v4;
  v5 = *(_DWORD **)(a2 + 8);
  if (v5)
    *v5 += 2;
  *(_QWORD *)(a3 + 16) = v5;
  *(_DWORD *)(a3 + 24) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a3 + 27) = *(_DWORD *)(a2 + 19);
  result = *(CFTypeRef *)(a2 + 24);
  *(_QWORD *)(a3 + 32) = result;
  if (result)
    return CFRetain(result);
  return result;
}

uint64_t WebCore::CredentialStorage::clearCredentials(WebCore::CredentialStorage *this, WTF::StringImpl *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  WTF *v6;
  uint64_t result;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;

  v3 = *(_QWORD **)this;
  if (*(_QWORD *)this)
  {
    *(_QWORD *)this = 0;
    v4 = *((unsigned int *)v3 - 1);
    if ((_DWORD)v4)
    {
      v5 = v3;
      do
      {
        if (*v5 != -1)
          v5 = (_QWORD *)WTF::KeyValuePair<std::pair<WTF::String,WebCore::ProtectionSpace>,WebCore::Credential>::~KeyValuePair((uint64_t)v5, a2);
        v5 += 9;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 2), a2);
  }
  v6 = (WTF *)*((_QWORD *)this + 1);
  if (v6)
  {
    v8 = *((unsigned int *)this + 4);
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
    *(_QWORD *)((char *)this + 21) = 0;
    if ((_DWORD)v8)
    {
      v9 = (WTF::StringImpl **)v6;
      do
      {
        v10 = *v9;
        *v9 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, a2);
          else
            *(_DWORD *)v10 -= 2;
        }
        ++v9;
        --v8;
      }
      while (v8);
    }
    WTF::fastFree(v6, a2);
  }
  result = *((_QWORD *)this + 4);
  if (result)
  {
    *((_QWORD *)this + 4) = 0;
    return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::ProtectionSpace>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::ProtectionSpace>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::ProtectionSpace,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ProtectionSpace>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(result, a2);
  }
  return result;
}

double WebCore::prefetchDNS(WebCore *this, const WTF::String *a2, const WTF::StringImpl *a3, double result)
{
  WebCore *v4;

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
  {
    {
      v4 = this;
      WebCore::DNSResolveQueueCFNet::DNSResolveQueueCFNet((WebCore::DNSResolveQueueCFNet *)&WebCore::DNSResolveQueue::singleton(void)::queue);
      this = v4;
    }
    return WebCore::DNSResolveQueue::add(this, a2, a3, result);
  }
  return result;
}

double WebCore::DNSResolveQueue::add(WebCore::DNSResolveQueue *this, const WTF::String *a2, const WTF::StringImpl *a3, double result)
{
  int v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  double v9;
  _BYTE v10[24];

  if (*((_QWORD *)&xmmword_1EE2F9180 + 1))
  {
    v6 = *(_DWORD *)(*((_QWORD *)&xmmword_1EE2F9180 + 1) - 12);
    if (v6)
      goto LABEL_9;
  }
  WTF::MonotonicTime::now(this);
  if (result - *(double *)&qword_1EE2F9198 > 5.0)
  {
    qword_1EE2F9198 = *(_QWORD *)&result;
    (*(void (**)(uint64_t *))(WebCore::DNSResolveQueue::singleton(void)::queue + 32))(&WebCore::DNSResolveQueue::singleton(void)::queue);
  }
  if (!byte_1EE2F9148)
  {
    do
      v5 = __ldaxr((unsigned int *)&dword_1EE2F9190);
    while (__stlxr(v5 + 1, (unsigned int *)&dword_1EE2F9190));
    if (v5 < 4)
    {
      (*(void (**)(uint64_t *, WebCore::DNSResolveQueue *))(WebCore::DNSResolveQueue::singleton(void)::queue
                                                                    + 40))(&WebCore::DNSResolveQueue::singleton(void)::queue, this);
      return result;
    }
    do
      v7 = __ldaxr((unsigned int *)&dword_1EE2F9190);
    while (__stlxr(v7 - 1, (unsigned int *)&dword_1EE2F9190));
    if (!*((_QWORD *)&xmmword_1EE2F9180 + 1))
    {
LABEL_13:
      v8 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&xmmword_1EE2F9180 + 1, (WTF::StringImpl **)this, a3, (uint64_t)v10);
      if ((*((_QWORD *)&xmmword_1EE2F9168 + 1) & 0xFFFFFFFFFFFFLL) == 0
        || (result = *(double *)((*((_QWORD *)&xmmword_1EE2F9168 + 1) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
      {
        *(_QWORD *)&xmmword_1EE2F9168 = 0;
        WTF::MonotonicTime::now(v8);
        WebCore::TimerBase::setNextFireTime((uint64_t)&unk_1EE2F9150, v9 + 1.0);
      }
      return result;
    }
    v6 = *(_DWORD *)(*((_QWORD *)&xmmword_1EE2F9180 + 1) - 12);
LABEL_9:
    if (v6 > 0x3F)
      return result;
    goto LABEL_13;
  }
  return result;
}

uint64_t WebCore::resolveDNS(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  void (**v8)(WebCore::DNSResolveQueueCFNet *__hidden);
  uint64_t v10;
  _DWORD v12[4];
  int v13;
  char v14;

  v3 = a3;
  if (*(_QWORD *)a1 && *(_DWORD *)(*(_QWORD *)a1 + 4))
  {
    v7 = a1;
    {
      v8 = (void (**)(WebCore::DNSResolveQueueCFNet *__hidden))WebCore::DNSResolveQueue::singleton(void)::queue;
    }
    else
    {
      WebCore::DNSResolveQueue::singleton(void)::queue = (uint64_t)off_1E341DA30;
      byte_1EE2F9148 = 1;
      v10 = a2;
      WebCore::Timer::Timer<WebCore::DNSResolveQueue,WebCore::DNSResolveQueue>((WebCore::TimerBase *)&unk_1EE2F9150, (uint64_t)&WebCore::DNSResolveQueue::singleton(void)::queue, (uint64_t)WebCore::DNSResolveQueue::timerFired, 0);
      a2 = v10;
      v7 = a1;
      v3 = a3;
      *((_QWORD *)&xmmword_1EE2F9180 + 1) = 0;
      dword_1EE2F9190 = 0;
      qword_1EE2F9198 = 0;
      qword_1EE2F91A0 = 0;
      v8 = &off_1E341DD08;
      WebCore::DNSResolveQueue::singleton(void)::queue = (uint64_t)&off_1E341DD08;
    }
    return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t, _QWORD *))v8[2])(&WebCore::DNSResolveQueue::singleton(void)::queue, v7, a2, v3);
  }
  else
  {
    v12[0] = 1;
    v13 = 1;
    v4 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v4 + 16))(v4, v12);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    if (v13 != -1)
      return ((uint64_t (*)(char *, _DWORD *))off_1E341D750[v13])(&v14, v12);
  }
  return result;
}

uint64_t WebCore::stopResolveDNS(WebCore *this)
{
  WebCore *v1;
  void (**v2)(WebCore::DNSResolveQueueCFNet *__hidden);

  v1 = this;
  {
    v2 = (void (**)(WebCore::DNSResolveQueueCFNet *__hidden))WebCore::DNSResolveQueue::singleton(void)::queue;
  }
  else
  {
    WebCore::DNSResolveQueue::singleton(void)::queue = (uint64_t)off_1E341DA30;
    byte_1EE2F9148 = 1;
    WebCore::Timer::Timer<WebCore::DNSResolveQueue,WebCore::DNSResolveQueue>((WebCore::TimerBase *)&unk_1EE2F9150, (uint64_t)&WebCore::DNSResolveQueue::singleton(void)::queue, (uint64_t)WebCore::DNSResolveQueue::timerFired, 0);
    v1 = this;
    *((_QWORD *)&xmmword_1EE2F9180 + 1) = 0;
    dword_1EE2F9190 = 0;
    qword_1EE2F9198 = 0;
    qword_1EE2F91A0 = 0;
    v2 = &off_1E341DD08;
    WebCore::DNSResolveQueue::singleton(void)::queue = (uint64_t)&off_1E341DD08;
  }
  return ((uint64_t (*)(uint64_t *, WebCore *))v2[3])(&WebCore::DNSResolveQueue::singleton(void)::queue, v1);
}

uint64_t WebCore::isIPAddressDisallowed(WebCore *this, const WTF::URL *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  _QWORD v7[2];
  int v8;
  char v9;
  char v10;
  WTF::StringImpl *v11;

  WTF::URL::host(this);
  if ((v2 & 0xFF00000000) != 0)
  {
    if (!(_DWORD)v2)
      goto LABEL_17;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
  }
  else
  {
    if (!(_DWORD)v2)
      goto LABEL_17;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
  }
  v3 = (WTF::StringImpl *)v7[0];
  while (1)
  {
    v11 = v3;
    WebCore::IPAddress::fromString((uint64_t)v7);
    v5 = v11;
    v11 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
    if (!v9)
      break;
    if (v8 != -1)
    {
      v11 = (WTF::StringImpl *)&v10;
      return ((uint64_t (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore9IPAddress17containsOnlyZerosEvE3__0JZNKS9_17containsOnlyZerosEvE3__1ZNKS9_17containsOnlyZerosEvE3__2EEEEEJRKNS0_6__implIJNS6_23HashTableEmptyValueTypeE7in_addr8in6_addrEEEEEEDcOT_DpOT0____fmatrix[v8])(&v11, v7);
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_17:
    v3 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
  }
  return 0;
}

uint64_t WebCore::IPAddress::isLoopback(WebCore::IPAddress *this)
{
  uint64_t v1;
  WebCore::IPAddress *v3;
  const WebCore::IPAddress *v4;
  char v5;
  char *v6;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 == -1)
  {
    v3 = (WebCore::IPAddress *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::IPAddress::matchingNetMaskLength(v3, v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **, WebCore::IPAddress *))off_1E341D900[v1])(&v6, this);
  }
}

uint64_t WebCore::IPAddress::matchingNetMaskLength(WebCore::IPAddress *this, const WebCore::IPAddress *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  unint64_t v11;
  int v12;
  int v13;

  v2 = *((_DWORD *)this + 4);
  if (v2 != 2)
  {
    if (v2 == 1 && *((_DWORD *)a2 + 4) == 1)
    {
      v3 = 4;
      goto LABEL_7;
    }
    return 0;
  }
  if (*((_DWORD *)a2 + 4) != 2)
    return 0;
  v3 = 16;
LABEL_7:
  v4 = 0;
  v5 = (8 * v3);
  v6 = 8 * v3;
  while (1)
  {
    v8 = *(unsigned __int8 *)this;
    this = (WebCore::IPAddress *)((char *)this + 1);
    v7 = v8;
    v10 = *(unsigned __int8 *)a2;
    a2 = (const WebCore::IPAddress *)((char *)a2 + 1);
    v9 = v10;
    if (v7 != v10)
      break;
    v4 -= 8;
    if (!(v6 + v4))
      return v5;
  }
  v11 = v9 ^ v7;
  v12 = __clz(v11) - 56;
  if ((_DWORD)v11)
    v13 = v12;
  else
    v13 = 8;
  return (v13 - v4);
}

WTF::StringImpl **WebCore::DNSResolveQueue::timerFired(WTF::StringImpl ***this)
{
  WTF::StringImpl **result;
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  int i;
  int v9;
  unsigned int v11;
  WTF::StringImpl ***v12;
  WTF::StringImpl *v13;
  WTF::StringImpl ***v14;
  WTF::StringImpl **v15;
  int v16;
  unsigned int v17;
  double v19;

  result = (WTF::StringImpl **)WebCore::DNSResolveQueue::isUsingProxy((WebCore::DNSResolveQueue *)this);
  if ((_DWORD)result)
  {
    result = this[9];
    if (result)
    {
      this[9] = 0;
      return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(result, v3);
    }
    return result;
  }
  v4 = (unsigned int *)(this + 10);
  v5 = atomic_load((unsigned int *)this + 20);
  v7 = this + 9;
  v6 = this[9];
  if (!v6)
    return result;
  for (i = 8 - v5; ; --i)
  {
    v9 = *((_DWORD *)v6 - 3);
    if (!v9 || i < 1)
      break;
    do
      v11 = __ldaxr(v4);
    while (__stlxr(v11 + 1, v4));
    v12 = (WTF::StringImpl ***)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(this + 9);
    result = (WTF::StringImpl **)((uint64_t (*)(WTF::StringImpl ***, WTF::StringImpl ***))(*this)[5])(this, v12);
    v6 = this[9];
    if (v6)
    {
      v14 = (WTF::StringImpl ***)&v6[*((unsigned int *)v6 - 1)];
      if (v14 == v12)
        goto LABEL_28;
    }
    else
    {
      if (!v12)
        return result;
      v14 = 0;
    }
    if (v14 != v12)
    {
      result = *v12;
      *v12 = (WTF::StringImpl **)-1;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl **)WTF::StringImpl::destroy((WTF::StringImpl *)result, v13);
        else
          *(_DWORD *)result -= 2;
      }
      ++*((_DWORD *)*v7 - 4);
      v15 = *v7;
      if (*v7)
        v16 = *((_DWORD *)v15 - 3) - 1;
      else
        v16 = -1;
      *((_DWORD *)v15 - 3) = v16;
      v6 = *v7;
      if (!*v7)
        return result;
      v17 = *((_DWORD *)v6 - 1);
      if (6 * *((_DWORD *)v6 - 3) < v17 && v17 >= 9)
      {
        result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)this + 9, v17 >> 1, 0);
        v6 = *v7;
      }
    }
LABEL_28:
    if (!v6)
      return result;
  }
  if (v9)
  {
    this[5] = 0;
    WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
    return (WTF::StringImpl **)WebCore::TimerBase::setNextFireTime((uint64_t)(this + 2), v19 + 0.1);
  }
  return result;
}

uint64_t WebCore::DNSResolveQueue::isUsingProxy(WebCore::DNSResolveQueue *this)
{
  double v2;

  WTF::MonotonicTime::now(this);
  if (v2 - *((double *)this + 11) > 5.0)
  {
    *((double *)this + 11) = v2;
    (*(void (**)(WebCore::DNSResolveQueue *))(*(_QWORD *)this + 32))(this);
  }
  return *((unsigned __int8 *)this + 8);
}

uint64_t WebCore::DataURLDecoder::decode@<X0>(uint64_t a1@<X0>, char a2@<W1>, WebCore::DataURLDecoder *a3@<X8>)
{
  WebCore::DataURLDecoder::DecodeTask *v6;
  void *v7;
  double v8;
  double v9;
  float v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  _QWORD *v17;

  v16 = 0;
  v17 = 0;
  v6 = (WebCore::DataURLDecoder::DecodeTask *)WTF::fastMalloc((WTF *)0x80);
  WebCore::DataURLDecoder::DecodeTask::DecodeTask((uint64_t)v6, a1, &v17, a2, &v16);
  v11 = v16;
  v16 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (v17)
    WTF::HashTable<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::IdentityExtractor,WTF::SchedulePairHash,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>>::deallocateTable((uint64_t)v17, v7);
  WebCore::DataURLDecoder::decodeSynchronously(a3, v6, v8, v9, v10);
  WebCore::DataURLDecoder::DecodeTask::~DecodeTask(v6, v12);
  return WTF::fastFree(v13, v14);
}

void *WebCore::FormData::bisoHeap(WebCore::FormData *this)
{
  return &WebCore::FormData::bisoHeap(void)::heap;
}

uint64_t WebCore::FormData::operator new(uint64_t this)
{
  if (this == 72)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

void WebCore::FormData::~FormData(WebCore::FormData *this, void *a2)
{
  WTF *v3;

  v3 = (WTF *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v3, a2);
  }
  WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 8, a2);
}

uint64_t WebCore::FormData::create@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = bmalloc::api::isoAllocate();
  *(_DWORD *)result = 1;
  *(_BYTE *)(result + 64) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_BYTE *)(result + 56) = 0;
  *a1 = result;
  return result;
}

uint64_t WebCore::FormData::create@<X0>(_BYTE *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;

  v6 = bmalloc::api::isoAllocate();
  *(_DWORD *)v6 = 1;
  *(_BYTE *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_BYTE *)(v6 + 56) = 0;
  *a3 = v6;
  return WebCore::FormData::appendData(v6, a1, a2);
}

uint64_t WebCore::FormData::appendData(uint64_t result, _BYTE *__src, unint64_t this)
{
  uint64_t v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  void *v11;
  unint64_t v12;
  size_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  WTF *v23;
  int v24;
  int v25;

  v5 = result;
  if (*(_BYTE *)(result + 64))
    *(_BYTE *)(result + 64) = 0;
  v6 = (uint64_t *)(result + 8);
  v7 = *(_DWORD *)(result + 20);
  if (!v7 || (v8 = *v6) == 0 || (v9 = v8 + 48 * v7 - 48, *(_DWORD *)(v8 + 48 * v7 - 8)))
  {
    v23 = 0;
    v24 = 0;
    v25 = this;
    if (!this)
    {
      result = 0;
LABEL_12:
      if (v7 == *(_DWORD *)(v5 + 16))
      {
        WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v5 + 8, (uint64_t *)&v23);
        result = (uint64_t)v23;
        if (v23)
        {
          v23 = 0;
          v24 = 0;
          return WTF::fastFree((WTF *)result, v11);
        }
      }
      else
      {
        v16 = *(_QWORD *)(v5 + 8) + 48 * v7;
        *(_QWORD *)v16 = result;
        *(_DWORD *)(v16 + 8) = this;
        *(_DWORD *)(v16 + 12) = this;
        *(_DWORD *)(v16 + 40) = 0;
        *(_DWORD *)(v5 + 20) = v7 + 1;
      }
      return result;
    }
    if (!HIDWORD(this))
    {
      result = WTF::fastMalloc((WTF *)this);
      v10 = 0;
      v24 = this;
      v23 = (WTF *)result;
      do
      {
        *((_BYTE *)v10 + result) = *((_BYTE *)v10 + (_QWORD)__src);
        v10 = (WTF *)((char *)v10 + 1);
      }
      while ((WTF *)this != v10);
      v7 = *(_DWORD *)(v5 + 20);
      goto LABEL_12;
    }
LABEL_34:
    __break(0xC471u);
    JUMPOUT(0x1962E9AB8);
  }
  if (!this)
    return result;
  v12 = *(unsigned int *)(v8 + 48 * v7 - 40);
  v13 = *(unsigned int *)(v9 + 12);
  v14 = (char *)(this + v13);
  if (this + v13 > v12)
  {
    v17 = v12 + (v12 >> 2);
    if (v17 >= 0x10)
      v18 = v17 + 1;
    else
      v18 = 16;
    if (v18 <= (unint64_t)v14)
      v19 = this + v13;
    else
      v19 = v18;
    if (HIDWORD(v19))
      goto LABEL_34;
    v20 = *(void **)v9;
    v21 = (void *)WTF::fastMalloc((WTF *)v19);
    *(_DWORD *)(v9 + 8) = v19;
    *(_QWORD *)v9 = v21;
    memcpy(v21, v20, v13);
    if (v20)
    {
      if (*(void **)v9 == v20)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
      }
      WTF::fastFree((WTF *)v20, v22);
    }
  }
  v15 = *(unsigned int *)(v9 + 12);
  if ((unint64_t)v14 < v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1962E9AC0);
  }
  result = (uint64_t)memcpy((void *)(*(_QWORD *)v9 + v15), __src, this);
  *(_DWORD *)(v9 + 12) = (_DWORD)v14;
  return result;
}

uint64_t WebCore::FormData::create@<X0>(WebCore::FormData *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  unint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v5 = (_BYTE *)(v4 + 16);
    v6 = *(_QWORD *)(v4 + 8);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = bmalloc::api::isoAllocate();
  *(_DWORD *)v7 = 1;
  *(_BYTE *)(v7 + 64) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 8) = 0;
  *(_BYTE *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 48) = 0;
  *(_BYTE *)(v7 + 56) = 0;
  *a2 = v7;
  return WebCore::FormData::appendData(v7, v5, v6);
}

WTF *WebCore::FormData::appendNonMultiPartKeyValuePairItems(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const PAL::TextEncoding *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  WTF *v14;
  void *v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  WTF *v20;
  void *v21;
  WTF *v22;
  void *v23;
  WTF *v24;
  WTF *v25;
  WTF::StringImpl *v26;
  WTF *v27;
  unint64_t v28;
  void *v29;
  WTF *result;
  uint64_t v31;
  WTF *v32;
  int v33;
  WTF *v34;
  int v35;
  WTF::StringImpl *v36;
  WTF *v37;
  uint64_t v38;
  _UNKNOWN **v39;
  __int128 v40;
  __int16 v41;
  WTF **v42;
  uint64_t v43;

  v38 = 0;
  v39 = &off_1E31F4A18;
  v40 = *(_OWORD *)(a2 + 32);
  v41 = *(_WORD *)(a2 + 48);
  v37 = 0;
  v4 = *(unsigned int *)(a2 + 68);
  if ((_DWORD)v4)
  {
    v6 = 24 * v4;
    v7 = *(_QWORD *)(a2 + 56) + 8;
    while (1)
    {
      v8 = *(unsigned int *)(v7 + 8);
      if ((_DWORD)v8 == -1)
        break;
      v42 = &v34;
      ((void (*)(WTF::StringImpl **__return_ptr, WTF ***, uint64_t))off_1E341D9F8[v8])(&v36, &v42, v7);
      v10 = *(_QWORD *)(v7 - 8);
      if (v10 && *((_QWORD *)&v40 + 1) && (v11 = *(unsigned int *)(v10 + 4), (_DWORD)v11))
      {
        v12 = *(_QWORD *)(v10 + 8);
        v13 = v11 | ((unint64_t)((*(_DWORD *)(v10 + 16) >> 2) & 1) << 32);
        PAL::newTextCodec((PAL *)&v39, v9, &v34);
        (*(void (**)(WTF ***__return_ptr, WTF *, uint64_t, unint64_t, _QWORD))(*(_QWORD *)v34 + 32))(&v42, v34, v12, v13, 0);
        v14 = v34;
        v34 = 0;
        if (v14)
          (*(void (**)(WTF *))(*(_QWORD *)v14 + 8))(v14);
      }
      else
      {
        v42 = 0;
        v43 = 0;
      }
      WTF::normalizeLineEndingsToCRLF();
      v16 = (WTF *)v42;
      if (v42)
      {
        v42 = 0;
        LODWORD(v43) = 0;
        WTF::fastFree(v16, v15);
      }
      if (v36 && *((_QWORD *)&v40 + 1) && (v17 = *((unsigned int *)v36 + 1), (_DWORD)v17))
      {
        v18 = *((_QWORD *)v36 + 1);
        v19 = v17 | ((unint64_t)((*((_DWORD *)v36 + 4) >> 2) & 1) << 32);
        PAL::newTextCodec((PAL *)&v39, (const PAL::TextEncoding *)v15, &v32);
        (*(void (**)(WTF ***__return_ptr, WTF *, uint64_t, unint64_t, _QWORD))(*(_QWORD *)v32 + 32))(&v42, v32, v18, v19, 0);
        v20 = v32;
        v32 = 0;
        if (v20)
          (*(void (**)(WTF *))(*(_QWORD *)v20 + 8))(v20);
      }
      else
      {
        v42 = 0;
        v43 = 0;
      }
      WTF::normalizeLineEndingsToCRLF();
      v22 = (WTF *)v42;
      if (v42)
      {
        v42 = 0;
        LODWORD(v43) = 0;
        WTF::fastFree(v22, v21);
      }
      WebCore::FormDataBuilder::addKeyValuePairAsFormData((uint64_t)&v37, (uint64_t)&v34, (uint64_t)&v32, a3);
      v24 = v32;
      if (v32)
      {
        v32 = 0;
        v33 = 0;
        WTF::fastFree(v24, v23);
      }
      v25 = v34;
      if (v34)
      {
        v34 = 0;
        v35 = 0;
        WTF::fastFree(v25, v23);
      }
      v26 = v36;
      v36 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v23);
        else
          *(_DWORD *)v26 -= 2;
      }
      v7 += 24;
      v6 -= 24;
      if (!v6)
      {
        v27 = v37;
        v28 = HIDWORD(v38);
        goto LABEL_31;
      }
    }
    v31 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF *)WebCore::FormData::create(v31);
  }
  else
  {
    v28 = 0;
    v27 = 0;
LABEL_31:
    WebCore::FormData::appendData(a1, v27, v28);
    result = v37;
    if (v37)
    {
      v37 = 0;
      LODWORD(v38) = 0;
      return (WTF *)WTF::fastFree(result, v29);
    }
  }
  return result;
}

uint64_t WebCore::FormData::create@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, _DWORD *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t result;

  v10 = bmalloc::api::isoAllocate();
  *(_DWORD *)v10 = 1;
  *(_BYTE *)(v10 + 64) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 48) = 0;
  *(_BYTE *)(v10 + 56) = 0;
  *(_QWORD *)(v10 + 40) = 0;
  *a5 = v10;
  *(_BYTE *)(v10 + 32) = a3;
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v10 + 40, a4);
  result = WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v10 + 8, a1);
  *(_QWORD *)(v10 + 24) = a2;
  return result;
}

uint64_t WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, _DWORD *a2)
{
  WTF *v4;
  uint64_t v5;

  v4 = *(WTF **)a1;
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a1 = v5;
  LODWORD(v5) = a2[2];
  a2[2] = 0;
  *(_DWORD *)(a1 + 8) = v5;
  LODWORD(v5) = a2[3];
  a2[3] = 0;
  *(_DWORD *)(a1 + 12) = v5;
  return a1;
}

WTF *WebCore::FormData::appendMultiPartKeyValuePairItems(WebCore::FormData *this, const WebCore::DOMFormData *a2)
{
  void *v4;
  WTF *v5;
  WTF *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  void *v19;
  WTF *v20;
  int v21;
  uint64_t v22;
  _BYTE *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  void *v26;
  WTF *v27;
  size_t v28;
  unint64_t v29;
  const WTF::URL *v30;
  WTF *v31;
  size_t v32;
  unint64_t v33;
  const PAL::TextEncoding *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  void *v40;
  WTF *v41;
  void *v42;
  WTF *v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  __int128 v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF *v50;
  WTF *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  WTF *v60;
  WTF *v61;
  void *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF *v66;
  WTF *v67;
  void *v68;
  __int128 v69;
  void *v70;
  WTF *result;
  _QWORD *v72;
  WTF *v73;
  uint64_t v74;
  WTF *v75;
  int v76;
  WTF *v77;
  WTF *v78;
  _UNKNOWN **v79;
  __int128 v80;
  __int16 v81;
  WTF::StringImpl *v82;
  WTF *__src;
  __int128 v84;
  __int128 v85;
  unsigned int v86;
  char v87;
  _BYTE *v88;
  int v89;
  unsigned int v90;

  WebCore::FormDataBuilder::generateUniqueBoundaryString((uint64_t)&__src);
  v5 = (WTF *)*((_QWORD *)this + 5);
  if (v5)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v5, v4);
  }
  v6 = __src;
  *((_QWORD *)this + 5) = __src;
  v7 = DWORD1(v84);
  *((_DWORD *)this + 12) = v84;
  *((_DWORD *)this + 13) = v7;
  v78 = 0;
  v79 = &off_1E31F4A18;
  v80 = *((_OWORD *)a2 + 2);
  v81 = *((_WORD *)a2 + 24);
  v77 = 0;
  v8 = *((_DWORD *)a2 + 17);
  if (v8)
  {
    v9 = *((_QWORD *)a2 + 7);
    v10 = (_DWORD *)(v9 + 24 * v8);
    v72 = (_QWORD *)((char *)this + 8);
    v11 = (_DWORD *)(v9 + 8);
    while (1)
    {
      v13 = v11 - 2;
      v12 = *((_QWORD *)v11 - 1);
      if (!v12
        || ((v14 = *(unsigned int *)(v12 + 4), *((_QWORD *)&v80 + 1)) ? (v15 = (_DWORD)v14 == 0) : (v15 = 1), v15))
      {
        __src = 0;
        *(_QWORD *)&v84 = 0;
      }
      else
      {
        v16 = *(_QWORD *)(v12 + 8);
        v17 = v14 | ((unint64_t)((*(_DWORD *)(v12 + 16) >> 2) & 1) << 32);
        PAL::newTextCodec((PAL *)&v79, v6, &v88);
        (*(void (**)(WTF **__return_ptr, _BYTE *, uint64_t, unint64_t, _QWORD))(*(_QWORD *)v88 + 32))(&__src, v88, v16, v17, 0);
        v18 = v88;
        v88 = 0;
        if (v18)
          (*(void (**)(_BYTE *))(*(_QWORD *)v18 + 8))(v18);
      }
      WTF::normalizeLineEndingsToCRLF();
      v20 = __src;
      if (__src)
      {
        __src = 0;
        LODWORD(v84) = 0;
        WTF::fastFree(v20, v19);
      }
      v73 = 0;
      v74 = 0;
      WebCore::FormDataBuilder::beginMultiPartHeader((uint64_t)&v73, *((void **)this + 5), *((unsigned int *)this + 13), (uint64_t)&v75);
      v21 = v11[2];
      if (v21 == 1)
      {
        v32 = HIDWORD(v74);
        v33 = HIDWORD(v74) + 4;
        if (v33 > v74)
        {
          v63 = v74 + ((unint64_t)v74 >> 2);
          if (v63 >= 0x10)
            v64 = v63 + 1;
          else
            v64 = 16;
          if (v64 <= v33)
            v65 = HIDWORD(v74) + 4;
          else
            v65 = v64;
          if (HIDWORD(v65))
            goto LABEL_109;
          v66 = v73;
          v67 = (WTF *)WTF::fastMalloc((WTF *)v65);
          LODWORD(v74) = v65;
          v73 = v67;
          memcpy(v67, v66, v32);
          if (v66)
          {
            if (v73 == v66)
            {
              v73 = 0;
              LODWORD(v74) = 0;
            }
            WTF::fastFree(v66, v68);
          }
        }
        if (v33 < HIDWORD(v74))
        {
          __break(0xC471u);
          JUMPOUT(0x1962EA5CCLL);
        }
        *(_DWORD *)((char *)v73 + HIDWORD(v74)) = 168626701;
        HIDWORD(v74) = v33;
        WebCore::FormData::appendData((uint64_t)this, v73, v33);
        v35 = *(_QWORD *)v11;
        if (*(_QWORD *)v11 && *((_QWORD *)&v80 + 1) && (v36 = *(unsigned int *)(v35 + 4), (_DWORD)v36))
        {
          v37 = *(_QWORD *)(v35 + 8);
          v38 = v36 | ((unint64_t)((*(_DWORD *)(v35 + 16) >> 2) & 1) << 32);
          PAL::newTextCodec((PAL *)&v79, v34, &v88);
          (*(void (**)(WTF **__return_ptr, _BYTE *, uint64_t, unint64_t, _QWORD))(*(_QWORD *)v88 + 32))(&__src, v88, v37, v38, 0);
          v39 = v88;
          v88 = 0;
          if (v39)
            (*(void (**)(_BYTE *))(*(_QWORD *)v39 + 8))(v39);
        }
        else
        {
          __src = 0;
          *(_QWORD *)&v84 = 0;
        }
        WTF::normalizeLineEndingsToCRLF();
        v41 = __src;
        if (__src)
        {
          __src = 0;
          LODWORD(v84) = 0;
          WTF::fastFree(v41, v40);
        }
        WebCore::FormData::appendData((uint64_t)this, v88, v90);
        v43 = (WTF *)v88;
        if (v88)
        {
          v88 = 0;
          v89 = 0;
          WTF::fastFree(v43, v42);
        }
        goto LABEL_55;
      }
      if (v21)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_109:
        __break(0xC471u);
        JUMPOUT(0x1962EA5C4);
      }
      v22 = *(_QWORD *)v11;
      v23 = *(_BYTE **)(*(_QWORD *)v11 + 144);
      if (v23)
        *(_DWORD *)v23 += 2;
      v88 = v23;
      WebCore::FormDataBuilder::addFilenameToMultiPartHeader((uint64_t)&v73, (PAL *)&v79, (uint64_t *)&v88);
      v24 = *(WTF::StringImpl **)(v22 + 48);
      if (v24)
      {
        *(_DWORD *)v24 += 2;
        v82 = v24;
        if (!*((_DWORD *)v24 + 1))
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v25);
          else
            *(_DWORD *)v24 -= 2;
        }
      }
      else
      {
        v82 = 0;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
      }
      WTF::String::ascii((WTF::String *)&v82);
      WebCore::FormDataBuilder::addContentTypeToMultiPartHeader((uint64_t)&v73, (uint64_t *)&__src);
      v27 = __src;
      __src = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 1)
          WTF::fastFree(v27, v26);
        else
          --*(_DWORD *)v27;
      }
      v28 = HIDWORD(v74);
      v29 = HIDWORD(v74) + 4;
      if (v29 > v74)
      {
        v57 = v74 + ((unint64_t)v74 >> 2);
        if (v57 >= 0x10)
          v58 = v57 + 1;
        else
          v58 = 16;
        if (v58 <= v29)
          v59 = HIDWORD(v74) + 4;
        else
          v59 = v58;
        if (HIDWORD(v59))
        {
          __break(0xC471u);
          JUMPOUT(0x1962EA5D4);
        }
        v60 = v73;
        v61 = (WTF *)WTF::fastMalloc((WTF *)v59);
        LODWORD(v74) = v59;
        v73 = v61;
        memcpy(v61, v60, v28);
        if (v60)
        {
          if (v73 == v60)
          {
            v73 = 0;
            LODWORD(v74) = 0;
          }
          WTF::fastFree(v60, v62);
        }
      }
      if (v29 < HIDWORD(v74))
        goto LABEL_109;
      *(_DWORD *)((char *)v73 + HIDWORD(v74)) = 168626701;
      HIDWORD(v74) = v29;
      WebCore::FormData::appendData((uint64_t)this, v73, v29);
      v31 = *(WTF **)(v22 + 128);
      if (v31 && *((_DWORD *)v31 + 1))
      {
        *(_DWORD *)v31 += 2;
        __src = v31;
        v84 = xmmword_1968C18F0;
        *(_QWORD *)&v85 = 0;
        BYTE8(v85) = 0;
        v86 = 1;
        v52 = *((unsigned int *)this + 5);
        if ((_DWORD)v52 == *((_DWORD *)this + 4))
        {
          v53 = WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v72, v52 + 1, (unint64_t)&__src);
          v54 = *((_QWORD *)this + 1) + 48 * *((unsigned int *)this + 5);
          *(_BYTE *)v54 = 0;
          *(_DWORD *)(v54 + 40) = -1;
          v55 = *(unsigned int *)(v53 + 40);
          if ((_DWORD)v55 != -1)
          {
            ((void (*)(char *, uint64_t, unint64_t))off_1E341D7A8[v55])(&v87, v54, v53);
            goto LABEL_68;
          }
          goto LABEL_69;
        }
        v54 = *v72 + 48 * v52;
        *(_BYTE *)v54 = 0;
        *(_DWORD *)(v54 + 40) = -1;
        LODWORD(v55) = v86;
        if (v86 == -1)
        {
          ++*((_DWORD *)this + 5);
        }
        else
        {
          ((void (*)(char *, uint64_t, WTF **))off_1E341D7A8[v86])(&v87, v54, &__src);
LABEL_68:
          *(_DWORD *)(v54 + 40) = v55;
LABEL_69:
          v56 = v86;
          ++*((_DWORD *)this + 5);
          if ((_DWORD)v56 != -1)
            ((void (*)(char *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore15FormDataElement15EncodedFileDataENSC_15EncodedBlobDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v56])(&v87, &__src);
        }
        if (*((_BYTE *)this + 64))
          *((_BYTE *)this + 64) = 0;
        goto LABEL_49;
      }
      if (*(_BYTE *)(v22 + 64))
      {
        if (*(_QWORD *)(v22 + 56))
          goto LABEL_46;
      }
      else
      {
        v44 = WebCore::ThreadableBlobRegistry::blobSize((WebCore::ThreadableBlobRegistry *)(v22 + 80), v30);
        v45 = v44 & ~(v44 >> 63);
        *(_QWORD *)(v22 + 56) = v45;
        *(_BYTE *)(v22 + 64) = 1;
        if (v45)
        {
LABEL_46:
          v46 = *(WTF **)(v22 + 80);
          if (v46)
          {
            *(_DWORD *)v46 += 2;
            __src = v46;
            v47 = *(_OWORD *)(v22 + 104);
            v84 = *(_OWORD *)(v22 + 88);
            v85 = v47;
            WebCore::FormData::appendBlob(this, (const WTF::URL *)&__src);
            if (*(_DWORD *)v46 == 2)
              WTF::StringImpl::destroy(v46, v30);
            else
              *(_DWORD *)v46 -= 2;
          }
          else
          {
            __src = 0;
            v69 = *(_OWORD *)(v22 + 104);
            v84 = *(_OWORD *)(v22 + 88);
            v85 = v69;
            WebCore::FormData::appendBlob(this, (const WTF::URL *)&__src);
          }
        }
      }
LABEL_49:
      v48 = v82;
      v82 = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2)
          WTF::StringImpl::destroy(v48, v30);
        else
          *(_DWORD *)v48 -= 2;
      }
      v49 = (WTF::StringImpl *)v88;
      v88 = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 == 2)
          WTF::StringImpl::destroy(v49, v30);
        else
          *(_DWORD *)v49 -= 2;
      }
LABEL_55:
      LOWORD(__src) = 2573;
      WebCore::FormData::appendData((uint64_t)this, &__src, 2uLL);
      v50 = v73;
      if (v73)
      {
        v73 = 0;
        LODWORD(v74) = 0;
        WTF::fastFree(v50, v6);
      }
      v51 = v75;
      if (v75)
      {
        v75 = 0;
        v76 = 0;
        WTF::fastFree(v51, v6);
      }
      v11 += 6;
      if (v13 + 6 == v10)
      {
        v6 = (WTF *)*((_QWORD *)this + 5);
        v7 = *((_DWORD *)this + 13);
        break;
      }
    }
  }
  WebCore::FormDataBuilder::addBoundaryToMultiPartHeader((uint64_t)&v77, v6, v7, 1);
  WebCore::FormData::appendData((uint64_t)this, v77, HIDWORD(v78));
  result = v77;
  if (v77)
  {
    v77 = 0;
    LODWORD(v78) = 0;
    return (WTF *)WTF::fastFree(result, v70);
  }
  return result;
}

uint64_t WebCore::FormData::isolatedCopy@<X0>(WebCore::FormData *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD v8[2];

  v4 = bmalloc::api::isoAllocate();
  *(_DWORD *)v4 = 1;
  *(_BYTE *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_BYTE *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 8) = 0;
  v5 = v4 + 8;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_BYTE *)(v4 + 56) = 0;
  *a2 = v4;
  *(_BYTE *)(v4 + 32) = *((_BYTE *)this + 32);
  v8[0] = 0;
  v8[1] = 0;
  _ZN3WTF6MapperIZNS_21CrossThreadCopierBaseILb0ELb0ENS_6VectorIN7WebCore15FormDataElementELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE4copyERKS7_EUlRT_E_S7_SA_vE3mapERS7_SA_RKSD_(v8, (uint64_t *)this + 1);
  WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v5, v8);
  return WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, v6);
}

unint64_t WebCore::FormData::appendFileRange(uint64_t a1, _DWORD **a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  _DWORD *v7;
  unint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];
  char v14;
  unsigned int v15;
  char v16;

  v7 = *a2;
  if (*a2)
    *v7 += 2;
  result = a1 + 8;
  v13[0] = v7;
  v13[1] = a3;
  v13[2] = a4;
  v13[3] = a5;
  v14 = a6;
  v15 = 1;
  v9 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v9 == *(_DWORD *)(a1 + 16))
  {
    result = WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v9 + 1, (unint64_t)v13);
    v10 = *(_QWORD *)(a1 + 8) + 48 * *(unsigned int *)(a1 + 20);
    *(_BYTE *)v10 = 0;
    *(_DWORD *)(v10 + 40) = -1;
    v11 = *(unsigned int *)(result + 40);
    if ((_DWORD)v11 == -1)
      goto LABEL_9;
    result = ((uint64_t (*)(char *, uint64_t, unint64_t))off_1E341D7A8[v11])(&v16, v10, result);
  }
  else
  {
    v10 = *(_QWORD *)result + 48 * v9;
    *(_BYTE *)v10 = 0;
    *(_DWORD *)(v10 + 40) = -1;
    LODWORD(v11) = v15;
    if (v15 == -1)
    {
      ++*(_DWORD *)(a1 + 20);
      goto LABEL_12;
    }
    result = ((uint64_t (*)(char *, uint64_t, _QWORD *))off_1E341D7A8[v15])(&v16, v10, v13);
  }
  *(_DWORD *)(v10 + 40) = v11;
LABEL_9:
  v12 = v15;
  ++*(_DWORD *)(a1 + 20);
  if ((_DWORD)v12 != -1)
    result = ((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore15FormDataElement15EncodedFileDataENSC_15EncodedBlobDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v12])(&v16, v13);
LABEL_12:
  if (*(_BYTE *)(a1 + 64))
    *(_BYTE *)(a1 + 64) = 0;
  return result;
}

unint64_t WebCore::FormData::appendBlob(WebCore::FormData *this, const WTF::URL *a2)
{
  _DWORD *v3;
  unint64_t result;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  __int128 v11;
  __int128 v12;
  unsigned int v13;
  char v14;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  result = (unint64_t)this + 8;
  v10 = v3;
  v5 = *(_OWORD *)((char *)a2 + 24);
  v11 = *(_OWORD *)((char *)a2 + 8);
  v12 = v5;
  v13 = 2;
  v6 = *((unsigned int *)this + 5);
  if ((_DWORD)v6 == *((_DWORD *)this + 4))
  {
    result = WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v6 + 1, (unint64_t)&v10);
    v7 = *((_QWORD *)this + 1) + 48 * *((unsigned int *)this + 5);
    *(_BYTE *)v7 = 0;
    *(_DWORD *)(v7 + 40) = -1;
    v8 = *(unsigned int *)(result + 40);
    if ((_DWORD)v8 == -1)
      goto LABEL_9;
    result = ((uint64_t (*)(char *, uint64_t, unint64_t))off_1E341D7A8[v8])(&v14, v7, result);
  }
  else
  {
    v7 = *(_QWORD *)result + 48 * v6;
    *(_BYTE *)v7 = 0;
    *(_DWORD *)(v7 + 40) = -1;
    LODWORD(v8) = v13;
    if (v13 == -1)
    {
      ++*((_DWORD *)this + 5);
      goto LABEL_12;
    }
    result = ((uint64_t (*)(char *, uint64_t, _DWORD **))off_1E341D7A8[v13])(&v14, v7, &v10);
  }
  *(_DWORD *)(v7 + 40) = v8;
LABEL_9:
  v9 = v13;
  ++*((_DWORD *)this + 5);
  if ((_DWORD)v9 != -1)
    result = ((uint64_t (*)(char *, _DWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore15FormDataElement15EncodedFileDataENSC_15EncodedBlobDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v9])(&v14, &v10);
LABEL_12:
  if (*((_BYTE *)this + 64))
    *((_BYTE *)this + 64) = 0;
  return result;
}

_QWORD *WebCore::FormData::flatten@<X0>(_QWORD *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  size_t v4;
  char *v5;
  uint64_t v6;
  uint64_t i;
  size_t v8;
  const void *v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  void *v16;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *((unsigned int *)this + 5);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = this[1];
    for (i = 48 * v3; i; i -= 48)
    {
      if (v6)
      {
        if (!*(_DWORD *)(v6 + 40))
        {
          v8 = *(unsigned int *)(v6 + 12);
          if ((_DWORD)v8)
          {
            v9 = *(const void **)v6;
            v10 = v8 + v4;
            v11 = *(unsigned int *)(a2 + 8);
            if (v8 + v4 > v11)
            {
              v12 = v11 + (v11 >> 2);
              if (v12 >= 0x10)
                v13 = v12 + 1;
              else
                v13 = 16;
              if (v13 <= v10)
                v14 = v8 + v4;
              else
                v14 = v13;
              if (HIDWORD(v14))
              {
                __break(0xC471u);
                return this;
              }
              v15 = (char *)WTF::fastMalloc((WTF *)v14);
              *(_DWORD *)(a2 + 8) = v14;
              *(_QWORD *)a2 = v15;
              memcpy(v15, v5, v4);
              if (v5)
              {
                if (v15 == v5)
                {
                  v15 = 0;
                  *(_QWORD *)a2 = 0;
                  *(_DWORD *)(a2 + 8) = 0;
                }
                WTF::fastFree((WTF *)v5, v16);
              }
              v5 = v15;
            }
            this = memcpy(&v5[v4], v9, v8);
            v4 = (v8 + v4);
            *(_DWORD *)(a2 + 12) = v10;
          }
        }
      }
      v6 += 48;
    }
  }
  return this;
}

const char *WebCore::FormData::flattenToString@<X0>(const char *this@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  const char *v3;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  const void *v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  __int16 v17;
  char v18;
  const char *v19[2];

  v3 = this;
  {
    PAL::Latin1Encoding(void)::globalLatin1Encoding = (uint64_t)&off_1E31F4A18;
    this = (const char *)PAL::atomCanonicalTextEncodingName((uint64_t *)&off_1E31F4A18, (PAL *)"latin1", a2);
    qword_1EE2E6DC0 = (uint64_t)this;
    qword_1EE2E6DC8 = (uint64_t)a2;
    v19[0] = this;
    v19[1] = a2;
    if (a2 && (this = (const char *)PAL::nonBackslashEncodings) != 0 && *(_QWORD *)PAL::nonBackslashEncodings)
    {
      this = (const char *)WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, v19);
      if (this)
        v17 = 165;
      else
        v17 = 92;
    }
    else
    {
      v17 = 92;
    }
    word_1EE2E6DD0 = v17;
  }
  v5 = *((unsigned int *)v3 + 5);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = *((_QWORD *)v3 + 1);
    v11 = 48 * v5;
    while (1)
    {
      if (v10)
      {
        if (!*(_DWORD *)(v10 + 40))
        {
          v12 = *(unsigned int *)(v10 + 12);
          if ((_DWORD)v12)
          {
            v13 = *(const void **)v10;
            if (v12 + v8 > v7)
            {
              v14 = v7 + (v7 >> 2);
              if (v14 >= 0x10)
                v15 = v14 + 1;
              else
                v15 = 16;
              if (v15 <= v12 + v8)
                v7 = v12 + v8;
              else
                v7 = v15;
              if (HIDWORD(v7))
              {
                __break(0xC471u);
                return this;
              }
              v6 = (char *)WTF::fastMalloc((WTF *)v7);
              v7 = v7;
              memcpy(v6, v9, v8);
              if (v9)
              {
                if (v6 == v9)
                {
                  v6 = 0;
                  v7 = 0;
                }
                WTF::fastFree((WTF *)v9, v16);
              }
              v9 = v6;
            }
            this = (const char *)memcpy(&v9[v8], v13, v12);
            v8 = (v12 + v8);
          }
        }
      }
      v10 += 48;
      v11 -= 48;
      if (!v11)
        goto LABEL_24;
    }
  }
  v6 = 0;
  v8 = 0;
LABEL_24:
  v18 = 0;
  if (qword_1EE2E6DC8)
  {
    PAL::newTextCodec((PAL *)&PAL::Latin1Encoding(void)::globalLatin1Encoding, (const PAL::TextEncoding *)a2, v19);
    (*(void (**)(const char *, char *, size_t, uint64_t, _QWORD, char *))(*(_QWORD *)v19[0] + 24))(v19[0], v6, v8, 1, 0, &v18);
    this = v19[0];
    v19[0] = 0;
    if (this)
      this = (const char *)(*(uint64_t (**)(const char *))(*(_QWORD *)this + 8))(this);
    if (v6)
      return (const char *)WTF::fastFree((WTF *)v6, a2);
  }
  else
  {
    *a3 = 0;
    if (v6)
      return (const char *)WTF::fastFree((WTF *)v6, a2);
  }
  return this;
}

uint64_t WTF::switchOn<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData> &,WebCore::FormData::resolveBlobReferences(WebCore::BlobRegistryImpl *)::$_0,WebCore::FormData::resolveBlobReferences(WebCore::BlobRegistryImpl *)::$_1,WebCore::FormData::resolveBlobReferences(WebCore::BlobRegistryImpl *)::$_2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  WebCore::FormData *v7;
  _QWORD v8[4];
  _QWORD *v9;

  v8[0] = a2;
  v8[1] = a3;
  v8[2] = a4;
  v8[3] = a5;
  v5 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v5 == -1)
  {
    v7 = (WebCore::FormData *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::FormData::prepareForUpload(v7);
  }
  else
  {
    v9 = v8;
    return (*(uint64_t (**)(_QWORD **, uint64_t))&byte_1E341DA08[8 * v5])(&v9, a1);
  }
}

uint64_t WebCore::FormData::prepareForUpload@<X0>(uint64_t this@<X0>, const WTF::String *a2@<X1>, _QWORD *a3@<X8>)
{
  _DWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;

  v3 = (_DWORD *)this;
  v26 = 0;
  v27 = 0;
  v5 = *(unsigned int *)(this + 20);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *(_QWORD *)(this + 8);
    v8 = 48 * v5;
    while (1)
    {
      v9 = (WTF::StringImpl **)(v7 + v6);
      if (v7 + v6)
      {
        if (*(_DWORD *)(v7 + v6 + 40) == 1)
        {
          *(double *)&this = COERCE_DOUBLE(WTF::FileSystemImpl::fileTypeFollowingSymlinks((WTF::FileSystemImpl *)(v7 + v6), a2));
          if ((this & 0xFF00000000) != 0
            && this == 1
            && !*(_QWORD *)(v7 + v6 + 8)
            && *(_QWORD *)(v7 + v6 + 16) == -1)
          {
            v10 = v7 + v6;
            if (!*(_BYTE *)(v7 + v6 + 32))
              goto LABEL_24;
            *(double *)&this = COERCE_DOUBLE(WTF::FileSystemImpl::fileModificationTime((WTF::FileSystemImpl *)(v7 + v6), a2));
            if ((_BYTE)a2)
            {
              if (!*(_BYTE *)(v10 + 32))
              {
                __break(1u);
                return this;
              }
              v11 = -9.22337204e18;
              if (*(double *)&this > -9.22337204e18)
                v12 = *(double *)&this;
              else
                v12 = -9.22337204e18;
              v13 = (uint64_t)v12;
              if (*(double *)&this >= 9.22337204e18)
                v13 = 0x7FFFFFFFFFFFFFFFLL;
              v14 = *(double *)(v10 + 24);
              if (v14 > -9.22337204e18)
                v11 = *(double *)(v10 + 24);
              v15 = (uint64_t)v11;
              if (v14 >= 9.22337204e18)
                v15 = 0x7FFFFFFFFFFFFFFFLL;
              if (v13 == v15)
              {
LABEL_24:
                *(double *)&this = COERCE_DOUBLE(WTF::FileSystemImpl::createTemporaryZipArchive((WTF::FileSystemImpl *)(v7 + v6), a2));
                v16 = v25;
                if (v25)
                {
                  *(_DWORD *)v25 += 2;
                  v17 = *v9;
                  *v9 = v16;
                  if (v17)
                  {
                    if (*(_DWORD *)v17 == 2)
                      WTF::StringImpl::destroy(v17, a2);
                    else
                      *(_DWORD *)v17 -= 2;
                  }
                  LODWORD(v18) = HIDWORD(v27);
                  if (HIDWORD(v27) == (_DWORD)v27)
                  {
                    v20 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v26, HIDWORD(v27) + 1, (unint64_t)&v25);
                    v18 = HIDWORD(v27);
                    v21 = v26;
                    v22 = *v20;
                    *v20 = 0;
                    *(_QWORD *)(v21 + 8 * v18) = v22;
                  }
                  else
                  {
                    v19 = v25;
                    v25 = 0;
                    *(_QWORD *)(v26 + 8 * HIDWORD(v27)) = v19;
                  }
                  HIDWORD(v27) = v18 + 1;
                  this = (uint64_t)v25;
                  v25 = 0;
                  if (*(double *)&this != 0.0)
                  {
                    if (*(_DWORD *)this == 2)
                      *(double *)&this = COERCE_DOUBLE(WTF::StringImpl::destroy((WTF::StringImpl *)this, a2));
                    else
                      *(_DWORD *)this -= 2;
                  }
                }
              }
            }
          }
        }
      }
      v6 += 48;
      if (v8 == v6)
      {
        v23 = v26;
        v24 = v27;
        goto LABEL_37;
      }
    }
  }
  v23 = 0;
  v24 = 0;
LABEL_37:
  ++*v3;
  *a3 = v3;
  a3[1] = v23;
  a3[2] = v24;
  return this;
}

void WebCore::FormDataForUpload::~FormDataForUpload(WebCore::FormDataForUpload *this, const WTF::String *a2)
{
  WTF::FileSystemImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::FormData *v7;
  bmalloc::api *v8;
  void *v9;
  uint64_t v10;
  WTF::StringImpl *v11;

  v3 = (WTF::FileSystemImpl *)*((_QWORD *)this + 1);
  v4 = *((unsigned int *)this + 5);
  if (!(_DWORD)v4)
    goto LABEL_5;
  v5 = 8 * v4;
  do
  {
    WTF::FileSystemImpl::deleteFile(v3, a2);
    v3 = (WTF::FileSystemImpl *)((char *)v3 + 8);
    v5 -= 8;
  }
  while (v5);
  v6 = *((unsigned int *)this + 5);
  v3 = (WTF::FileSystemImpl *)*((_QWORD *)this + 1);
  if (!(_DWORD)v6)
  {
LABEL_5:
    if (!v3)
      goto LABEL_6;
    goto LABEL_18;
  }
  v10 = 8 * v6;
  do
  {
    v11 = *(WTF::StringImpl **)v3;
    *(_QWORD *)v3 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, a2);
      else
        *(_DWORD *)v11 -= 2;
    }
    v3 = (WTF::FileSystemImpl *)((char *)v3 + 8);
    v10 -= 8;
  }
  while (v10);
  v3 = (WTF::FileSystemImpl *)*((_QWORD *)this + 1);
  if (v3)
  {
LABEL_18:
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v3, a2);
  }
LABEL_6:
  v7 = *(WebCore::FormData **)this;
  *(_QWORD *)this = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
    {
      WebCore::FormData::~FormData(v7, a2);
      bmalloc::api::isoDeallocate(v8, v9);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
}

_QWORD *WebCore::FormData::lengthInBytes(WebCore::FormData *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;

  if (*((_BYTE *)this + 64))
    return (_QWORD *)*((_QWORD *)this + 7);
  v3 = *((unsigned int *)this + 5);
  if (!(_DWORD)v3)
  {
    v2 = 0;
LABEL_11:
    *((_QWORD *)this + 7) = v2;
    *((_BYTE *)this + 64) = 1;
    return (_QWORD *)v2;
  }
  v2 = 0;
  v4 = *((_QWORD *)this + 1);
  v5 = 48 * v3;
  while (1)
  {
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v6 = &dword_1E341D9C8;
    v13 = v6;
    v14 = &v13;
    v7 = *(unsigned int *)(v4 + 40);
    if ((_DWORD)v7 == -1)
      break;
    v15 = &v14;
    v8 = ((uint64_t (*)(_QWORD **, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore15FormDataElement13lengthInBytesERKNS6_8FunctionIFyRKNS6_3URLEEEEE3__0JZNKS9_13lengthInBytesESH_E3__1ZNKS9_13lengthInBytesESH_E3__2EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS9_15EncodedFileDataENS9_15EncodedBlobDataEEEEEEEDcOT_DpOT0____fmatrix
                                                      + v7))(&v15, v4);
    v9 = v13;
    v13 = 0;
    if (v9)
      (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    v2 += v8;
    v4 += 48;
    v5 -= 48;
    if (!v5)
      goto LABEL_11;
  }
  v11 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::FormData::asSharedBuffer(v11, v12);
}

_QWORD *WebCore::FormData::asSharedBuffer@<X0>(_QWORD *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  int v7;
  size_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  size_t v13;
  const void *v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  WTF *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = *((unsigned int *)this + 5);
  if ((_DWORD)v3)
  {
    v4 = this[1];
    v5 = (int *)(v4 + 40);
    v6 = 48 * v3;
    do
    {
      v7 = *v5;
      v5 += 12;
      if (v7)
      {
        *a2 = 0;
        return this;
      }
      v6 -= 48;
    }
    while (v6);
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 48 * v3;
    while (1)
    {
      if (v4)
      {
        if (!*(_DWORD *)(v4 + 40))
        {
          v13 = *(unsigned int *)(v4 + 12);
          if ((_DWORD)v13)
          {
            v14 = *(const void **)v4;
            if (v13 + v8 > v10)
            {
              v15 = v10 + (v10 >> 2);
              if (v15 >= 0x10)
                v16 = v15 + 1;
              else
                v16 = 16;
              if (v16 <= v13 + v8)
                v10 = v13 + v8;
              else
                v10 = v16;
              if (HIDWORD(v10))
              {
                __break(0xC471u);
                return this;
              }
              v9 = (char *)WTF::fastMalloc((WTF *)v10);
              v10 = v10;
              memcpy(v9, v11, v8);
              if (v11)
              {
                if (v9 == v11)
                {
                  v10 = 0;
                  v9 = 0;
                }
                WTF::fastFree((WTF *)v11, v17);
              }
              v11 = v9;
            }
            this = memcpy(&v11[v8], v14, v13);
            v8 = (v13 + v8);
          }
        }
      }
      v4 += 48;
      v12 -= 48;
      if (!v12)
      {
        v22 = (WTF *)v9;
        v23 = __PAIR64__(v8, v10);
        goto LABEL_27;
      }
    }
  }
  v22 = 0;
  v23 = 0;
LABEL_27:
  WebCore::FragmentedSharedBuffer::create(&v22, &v25);
  v18 = WTF::fastMalloc((WTF *)0x38);
  WebCore::SharedBuffer::SharedBuffer(v18, &v25);
  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v25, v19);
  v24 = 0;
  *a2 = v18;
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v24, v20);
  this = v22;
  if (v22)
    return (_QWORD *)WTF::fastFree(v22, v21);
  return this;
}

uint64_t WebCore::FormData::asBlobURL@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _DWORD *v3;
  __int128 v4;

  if (*(_DWORD *)(this + 20) == 1 && (v2 = *(_QWORD *)(this + 8)) != 0 && *(_DWORD *)(v2 + 40) == 2)
  {
    v3 = *(_DWORD **)v2;
    if (*(_QWORD *)v2)
      *v3 += 2;
    *(_QWORD *)a2 = v3;
    v4 = *(_OWORD *)(v2 + 8);
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(v2 + 24);
    *(_OWORD *)(a2 + 8) = v4;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    return WTF::URL::invalidate((WTF::URL *)a2);
  }
  return this;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore9IPAddressELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_8DNSErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::IPAddress::containsOnlyZeros(void)::$_0,WebCore::IPAddress::containsOnlyZeros(void)::$_1,WebCore::IPAddress::containsOnlyZeros(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::HashTableEmptyValueType,in_addr,in6_addr> const&>()
{
  return 0;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::IPAddress::containsOnlyZeros(void)::$_0,WebCore::IPAddress::containsOnlyZeros(void)::$_1,WebCore::IPAddress::containsOnlyZeros(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::HashTableEmptyValueType,in_addr,in6_addr> const&>(uint64_t a1, _DWORD *a2)
{
  return *a2 == 0;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::IPAddress::containsOnlyZeros(void)::$_0,WebCore::IPAddress::containsOnlyZeros(void)::$_1,WebCore::IPAddress::containsOnlyZeros(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::HashTableEmptyValueType,in_addr,in6_addr> const&>(uint64_t a1, int8x16_t *a2)
{
  return (vmaxvq_u8((uint8x16_t)vtstq_s8(*a2, *a2)) & 1) == 0;
}

uint64_t std::optional<WebCore::DataURLDecoder::Result>::optional[abi:sn180100]<WebCore::DataURLDecoder::Result,0>(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  v3 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(result + 8) = v3;
  v4 = a2[2];
  a2[2] = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = v4;
  v5 = a2[3];
  a2[3] = 0;
  *(_QWORD *)(result + 24) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = 0;
  *(_DWORD *)(result + 32) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = 0;
  *(_DWORD *)(result + 36) = v5;
  *(_BYTE *)(result + 40) = 1;
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore15FormDataElement15EncodedFileDataENSE_15EncodedBlobDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSC_SF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore15FormDataElement15EncodedFileDataENSE_15EncodedBlobDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSC_SF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore15FormDataElement15EncodedFileDataENSE_15EncodedBlobDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSC_SF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore15FormDataElement15EncodedFileDataENSE_15EncodedBlobDataEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSL_1EJSC_SF_SG_EEERKSY_EEEDcSQ_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF *v3;
  void *v6;

  v3 = (WTF *)*(unsigned int *)(a3 + 12);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = (_DWORD)v3;
  if ((_DWORD)v3)
  {
    v6 = (void *)WTF::fastMalloc(v3);
    *(_DWORD *)(a2 + 8) = (_DWORD)v3;
    *(_QWORD *)a2 = v6;
    memcpy(v6, *(const void **)a3, *(unsigned int *)(a3 + 12));
  }
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore15FormDataElement15EncodedFileDataENSE_15EncodedBlobDataEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSL_1EJSC_SF_SG_EEERKSY_EEEDcSQ_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  __n128 result;

  v3 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v3 += 2;
  *(_QWORD *)a2 = v3;
  result = *(__n128 *)(a3 + 8);
  *(_OWORD *)(a2 + 17) = *(_OWORD *)(a3 + 17);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore15FormDataElement15EncodedFileDataENSE_15EncodedBlobDataEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSL_1EJSC_SF_SG_EEERKSY_EEEDcSQ_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  __n128 result;

  v3 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v3 += 2;
  *(_QWORD *)a2 = v3;
  result = *(__n128 *)(a3 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *_ZN3WTF6MapperIZNS_21CrossThreadCopierBaseILb0ELb0ENS_6VectorIN7WebCore15FormDataElementELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE4copyERKS7_EUlRT_E_S7_SA_vE3mapERS7_SA_RKSD_(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD v13[5];
  unsigned int v14;
  char v15;
  char *v16;

  v2 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v2)
  {
    if (v2 >= 0x5555556)
    {
LABEL_13:
      __break(0xC471u);
      return result;
    }
    v4 = result;
    v5 = 48 * v2;
    result = (_QWORD *)WTF::fastMalloc((WTF *)(48 * v2));
    *((_DWORD *)v4 + 2) = (v5 & 0xFFFFFFF0) / 0x30;
    *v4 = result;
    v6 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v6)
    {
      v7 = 48 * v6;
      for (i = *a2; ; i += 48)
      {
        v9 = *(unsigned int *)(i + 40);
        if ((_DWORD)v9 == -1)
          break;
        v16 = &v15;
        result = ((_QWORD *(*)(_QWORD *__return_ptr, char **, uint64_t))off_1E341D9E0[v9])(v13, &v16, i);
        v10 = *v4 + 48 * *((unsigned int *)v4 + 3);
        *(_BYTE *)v10 = 0;
        *(_DWORD *)(v10 + 40) = -1;
        v11 = v14;
        if (v14 == -1)
        {
          ++*((_DWORD *)v4 + 3);
        }
        else
        {
          result = (_QWORD *)((uint64_t (*)(char **, uint64_t, _QWORD *))off_1E341D7A8[v14])(&v16, v10, v13);
          *(_DWORD *)(v10 + 40) = v11;
          v12 = v14;
          ++*((_DWORD *)v4 + 3);
          if ((_DWORD)v12 != -1)
            result = (_QWORD *)((uint64_t (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore15FormDataElement15EncodedFileDataENSC_15EncodedBlobDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v12])(&v16, v13);
        }
        v7 -= 48;
        if (!v7)
          return result;
      }
      result = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_13;
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore15FormDataElement15EncodedFileDataENSE_15EncodedBlobDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSC_SF_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore15FormDataElement15EncodedFileDataENSE_15EncodedBlobDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSC_SF_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  __n128 result;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  result = *(__n128 *)(a3 + 1);
  *(_OWORD *)(a2 + 17) = *(_OWORD *)((char *)a3 + 17);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore15FormDataElement15EncodedFileDataENSE_15EncodedBlobDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSC_SF_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  double result;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  v4 = *(_DWORD *)(a2 + 8) & 0xFFFFFFFE | a3[1] & 1;
  *(_DWORD *)(a2 + 8) = v4;
  v5 = v4 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a3 + 2) >> 1) & 1));
  *(_DWORD *)(a2 + 8) = v5;
  v6 = v5 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a3 + 2) >> 2) & 1));
  *(_DWORD *)(a2 + 8) = v6;
  v7 = v6 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a3 + 2) >> 3) & 7));
  *(_DWORD *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 8) = a3[1] & 0xFFFFFFC0 | v7 & 0x3F;
  *(_OWORD *)(a2 + 12) = *(_OWORD *)((char *)a3 + 12);
  result = *(double *)((char *)a3 + 28);
  *(double *)(a2 + 28) = result;
  *(_DWORD *)(a2 + 36) = *((_DWORD *)a3 + 9);
  *((_DWORD *)a3 + 2) &= ~1u;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::collectVaryingRequestHeaders(WebCore::NetworkStorageSession *,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&)::$_0,WTF::String,WTF::StringView>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  const WTF::String *v8;
  uint64_t v9;
  int8x16_t v11;

  v11 = *(int8x16_t *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x18);
  v9 = v7;
  *(_QWORD *)v7 = off_1E341D7F8;
  *(int8x16_t *)(v7 + 8) = vextq_s8(v11, v11, 8uLL);
  if ((char *)a2 == "Cookie" || a3 != 6)
  {
    if ((char *)a2 != "Cookie" || a3 != 6)
      goto LABEL_14;
    goto LABEL_10;
  }
  if (((unint64_t)a3 & 0xFF00000000) == 0)
  {
    if (*(_WORD *)a2 != 67 || *(_QWORD *)(a2 + 2) != 0x69006B006F006FLL || *(_QWORD *)(a2 + 4) != 0x650069006B006FLL)
      goto LABEL_14;
LABEL_10:
    WTF::Detail::CallableWrapper<WebCore::collectVaryingRequestHeaders(WebCore::NetworkStorageSession *,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&)::$_0::operator() const(WTF::StringView)::{lambda(void)#1},WTF::String>::call(v7, v8, a4);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  if (*(_BYTE *)a2 == 67 && *(_DWORD *)(a2 + 1) == 1768648559 && *(_DWORD *)(a2 + 2) == 1701407599)
    goto LABEL_10;
LABEL_14:
  if ((*(_BYTE *)(v11.i64[0] + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v11.i64[0]);
    *(_BYTE *)(v11.i64[0] + 184) |= 1u;
  }
  WebCore::HTTPHeaderMap::get(v11.i64[0] + 96, (WebCore::HTTPHeaderNamesHash *)a2, a3, a4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

void WTF::Detail::CallableWrapper<WebCore::collectVaryingRequestHeaders(WebCore::NetworkStorageSession *,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&)::$_0::operator() const(WTF::StringView)::{lambda(void)#1},WTF::String>::call(uint64_t a1@<X0>, const WTF::String *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v4;
  WebCore::NetworkStorageSession *v5;
  unsigned __int8 v6;
  int v7;
  unsigned __int8 v8;
  char v9;
  unsigned __int8 v10;
  __int16 v11;
  BOOL isSafeMethod;
  uint64_t v13;
  __int128 v14;
  char v15;

  v4 = *(unsigned __int8 **)(a1 + 16);
  v5 = **(WebCore::NetworkStorageSession ***)(a1 + 8);
  v6 = v4[184];
  if ((v6 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(*(WebCore::ResourceRequest **)(a1 + 16));
    v6 = v4[184] | 1;
    v4[184] = v6;
    if ((v6 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v4);
      v6 = v4[184] | 1;
      v4[184] = v6;
    }
  }
  v7 = v4[145];
  if ((v6 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v4);
    v6 = v4[184] | 1;
    v4[184] = v6;
  }
  v8 = v4[148];
  if ((v6 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v4);
    v4[184] |= 1u;
  }
  v11 = (v7 == 1) | ((v8 & 1) << 8);
  isSafeMethod = WebCore::isSafeMethod((WebCore *)(v4 + 88), a2);
  if ((v4[184] & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v4);
    v10 = v4[184] | 1;
    v4[184] = v10;
    if ((v10 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v4);
      v4[184] |= 1u;
    }
  }
  v9 = WTF::URL::protocolIs();
  LOBYTE(v14) = 0;
  v15 = 0;
  WebCore::NetworkStorageSession::cookiesForSession(v5, (const WTF::URL *)(v4 + 40), &v11, (const WTF::URL *)v4, &v14, 0, 0, 1, (uint64_t)&v13, v9, 1, 0);
  *a3 = v13;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::collectVaryingRequestHeaders(WebCore::CookieJar const*,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&)::$_0,WTF::String,WTF::StringView>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  const WTF::String *v8;
  uint64_t v9;
  int8x16_t v11;

  v11 = *(int8x16_t *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x18);
  v9 = v7;
  *(_QWORD *)v7 = off_1E341D848;
  *(int8x16_t *)(v7 + 8) = vextq_s8(v11, v11, 8uLL);
  if ((char *)a2 == "Cookie" || a3 != 6)
  {
    if ((char *)a2 != "Cookie" || a3 != 6)
      goto LABEL_14;
    goto LABEL_10;
  }
  if (((unint64_t)a3 & 0xFF00000000) == 0)
  {
    if (*(_WORD *)a2 != 67 || *(_QWORD *)(a2 + 2) != 0x69006B006F006FLL || *(_QWORD *)(a2 + 4) != 0x650069006B006FLL)
      goto LABEL_14;
LABEL_10:
    WTF::Detail::CallableWrapper<WebCore::collectVaryingRequestHeaders(WebCore::CookieJar const*,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&)::$_0::operator() const(WTF::StringView)::{lambda(void)#1},WTF::String>::call((_QWORD *)v7, v8, a4);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  if (*(_BYTE *)a2 == 67 && *(_DWORD *)(a2 + 1) == 1768648559 && *(_DWORD *)(a2 + 2) == 1701407599)
    goto LABEL_10;
LABEL_14:
  if ((*(_BYTE *)(v11.i64[0] + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v11.i64[0]);
    *(_BYTE *)(v11.i64[0] + 184) |= 1u;
  }
  WebCore::HTTPHeaderMap::get(v11.i64[0] + 96, (WebCore::HTTPHeaderNamesHash *)a2, a3, a4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::collectVaryingRequestHeaders(WebCore::CookieJar const*,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&)::$_0::operator() const(WTF::StringView)::{lambda(void)#1},WTF::String>::call@<X0>(_QWORD *result@<X0>, const WTF::String *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 v6;
  int v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[28];
  __int16 v13;
  BOOL isSafeMethod;
  uint64_t v15;

  v4 = *(_QWORD *)result[1];
  if (v4)
  {
    v5 = (unsigned __int8 *)result[2];
    v6 = v5[184];
    if ((v6 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)result[2]);
      v6 = v5[184] | 1;
      v5[184] = v6;
      if ((v6 & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v5);
        v6 = v5[184] | 1;
        v5[184] = v6;
      }
    }
    v7 = v5[145];
    if ((v6 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v5);
      v6 = v5[184] | 1;
      v5[184] = v6;
    }
    v8 = v5[148];
    if ((v6 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v5);
      v5[184] |= 1u;
    }
    v13 = (v7 == 1) | ((v8 & 1) << 8);
    isSafeMethod = WebCore::isSafeMethod((WebCore *)(v5 + 88), a2);
    v9 = v5[184];
    if ((v9 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v5);
      v9 = v5[184] | 1;
      v5[184] = v9;
    }
    v12[0] = 0;
    v12[16] = 0;
    if ((v9 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v5);
      v5[184] |= 1u;
    }
    v10 = WTF::URL::protocolIs();
    result = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, unsigned __int8 *, __int16 *, unsigned __int8 *, _BYTE *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v4 + 32))(&v15, v4, v5 + 40, &v13, v5, v12, 0, 0, v10);
    v11 = v15;
  }
  else
  {
    v11 = 0;
  }
  *a3 = v11;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::verifyVaryingRequestHeaders(WebCore::NetworkStorageSession *,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::ResourceRequest const&)::$_0,WTF::String,WTF::String const&>::call@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  WebCore::ResourceRequest *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  const WTF::String *v11;
  _QWORD *v12;
  char *v13;

  v4 = *a2;
  v5 = *(WebCore::ResourceRequest **)(a1 + 8);
  if (*a2)
  {
    v6 = *(_QWORD *)(v4 + 8);
    v7 = *(unsigned int *)(v4 + 4);
    v8 = (unint64_t)((*(_DWORD *)(v4 + 16) >> 2) & 1) << 32;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = 0x100000000;
  }
  v9 = *(_QWORD *)(a1 + 16);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v12 = v10;
  *v10 = off_1E341D898;
  v10[1] = v9;
  v10[2] = v5;
  if ((char *)v6 == "Cookie" || v7 != 6)
  {
    if ((char *)v6 != "Cookie" || v7 != 6)
      goto LABEL_17;
    goto LABEL_12;
  }
  if ((v8 & 0x100000000) == 0)
  {
    if (*(_WORD *)v6 != 67 || *(_QWORD *)(v6 + 2) != 0x69006B006F006FLL || *(_QWORD *)(v6 + 4) != 0x650069006B006FLL)
      goto LABEL_17;
LABEL_12:
    WTF::Detail::CallableWrapper<WebCore::verifyVaryingRequestHeaders(WebCore::NetworkStorageSession *,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::ResourceRequest const&)::$_0::operator() const(WTF::String const&)::{lambda(void)#1},WTF::String>::call((uint64_t)v10, v11, a3);
    return (*(uint64_t (**)(_QWORD *))(*v12 + 8))(v12);
  }
  if (*(_BYTE *)v6 == 67 && *(_DWORD *)(v6 + 1) == 1768648559 && *(_DWORD *)(v6 + 2) == 1701407599)
    goto LABEL_12;
LABEL_17:
  v13 = (char *)(v8 | v7);
  if ((*((_BYTE *)v5 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(v5);
    *((_BYTE *)v5 + 184) |= 1u;
  }
  WebCore::HTTPHeaderMap::get((uint64_t)v5 + 96, (WebCore::HTTPHeaderNamesHash *)v6, v13, a3);
  return (*(uint64_t (**)(_QWORD *))(*v12 + 8))(v12);
}

void WTF::Detail::CallableWrapper<WebCore::verifyVaryingRequestHeaders(WebCore::NetworkStorageSession *,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::ResourceRequest const&)::$_0::operator() const(WTF::String const&)::{lambda(void)#1},WTF::String>::call(uint64_t a1@<X0>, const WTF::String *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v4;
  WebCore::NetworkStorageSession *v5;
  unsigned __int8 v6;
  int v7;
  unsigned __int8 v8;
  char v9;
  unsigned __int8 v10;
  __int16 v11;
  BOOL isSafeMethod;
  uint64_t v13;
  __int128 v14;
  char v15;

  v4 = *(unsigned __int8 **)(a1 + 16);
  v5 = **(WebCore::NetworkStorageSession ***)(a1 + 8);
  v6 = v4[184];
  if ((v6 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(*(WebCore::ResourceRequest **)(a1 + 16));
    v6 = v4[184] | 1;
    v4[184] = v6;
    if ((v6 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v4);
      v6 = v4[184] | 1;
      v4[184] = v6;
    }
  }
  v7 = v4[145];
  if ((v6 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v4);
    v6 = v4[184] | 1;
    v4[184] = v6;
  }
  v8 = v4[148];
  if ((v6 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v4);
    v4[184] |= 1u;
  }
  v11 = (v7 == 1) | ((v8 & 1) << 8);
  isSafeMethod = WebCore::isSafeMethod((WebCore *)(v4 + 88), a2);
  if ((v4[184] & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v4);
    v10 = v4[184] | 1;
    v4[184] = v10;
    if ((v10 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v4);
      v4[184] |= 1u;
    }
  }
  v9 = WTF::URL::protocolIs();
  LOBYTE(v14) = 0;
  v15 = 0;
  WebCore::NetworkStorageSession::cookiesForSession(v5, (const WTF::URL *)(v4 + 40), &v11, (const WTF::URL *)v4, &v14, 0, 0, 1, (uint64_t)&v13, v9, 1, 0);
  *a3 = v13;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::verifyVaryingRequestHeaders(WebCore::CookieJar const*,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::ResourceRequest const&)::$_0,WTF::String,WTF::String const&>::call@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  WebCore::ResourceRequest *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  const WTF::String *v11;
  _QWORD *v12;
  char *v13;

  v4 = *a2;
  v5 = *(WebCore::ResourceRequest **)(a1 + 8);
  if (*a2)
  {
    v6 = *(_QWORD *)(v4 + 8);
    v7 = *(unsigned int *)(v4 + 4);
    v8 = (unint64_t)((*(_DWORD *)(v4 + 16) >> 2) & 1) << 32;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = 0x100000000;
  }
  v9 = *(_QWORD *)(a1 + 16);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v12 = v10;
  *v10 = off_1E341D8E8;
  v10[1] = v9;
  v10[2] = v5;
  if ((char *)v6 == "Cookie" || v7 != 6)
  {
    if ((char *)v6 != "Cookie" || v7 != 6)
      goto LABEL_17;
    goto LABEL_12;
  }
  if ((v8 & 0x100000000) == 0)
  {
    if (*(_WORD *)v6 != 67 || *(_QWORD *)(v6 + 2) != 0x69006B006F006FLL || *(_QWORD *)(v6 + 4) != 0x650069006B006FLL)
      goto LABEL_17;
LABEL_12:
    WTF::Detail::CallableWrapper<WebCore::verifyVaryingRequestHeaders(WebCore::CookieJar const*,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::ResourceRequest const&)::$_0::operator() const(WTF::String const&)::{lambda(void)#1},WTF::String>::call(v10, v11, a3);
    return (*(uint64_t (**)(_QWORD *))(*v12 + 8))(v12);
  }
  if (*(_BYTE *)v6 == 67 && *(_DWORD *)(v6 + 1) == 1768648559 && *(_DWORD *)(v6 + 2) == 1701407599)
    goto LABEL_12;
LABEL_17:
  v13 = (char *)(v8 | v7);
  if ((*((_BYTE *)v5 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(v5);
    *((_BYTE *)v5 + 184) |= 1u;
  }
  WebCore::HTTPHeaderMap::get((uint64_t)v5 + 96, (WebCore::HTTPHeaderNamesHash *)v6, v13, a3);
  return (*(uint64_t (**)(_QWORD *))(*v12 + 8))(v12);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::verifyVaryingRequestHeaders(WebCore::CookieJar const*,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::ResourceRequest const&)::$_0::operator() const(WTF::String const&)::{lambda(void)#1},WTF::String>::call@<X0>(_QWORD *result@<X0>, const WTF::String *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 v6;
  int v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[28];
  __int16 v13;
  BOOL isSafeMethod;
  uint64_t v15;

  v4 = *(_QWORD *)result[1];
  if (v4)
  {
    v5 = (unsigned __int8 *)result[2];
    v6 = v5[184];
    if ((v6 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)result[2]);
      v6 = v5[184] | 1;
      v5[184] = v6;
      if ((v6 & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v5);
        v6 = v5[184] | 1;
        v5[184] = v6;
      }
    }
    v7 = v5[145];
    if ((v6 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v5);
      v6 = v5[184] | 1;
      v5[184] = v6;
    }
    v8 = v5[148];
    if ((v6 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v5);
      v5[184] |= 1u;
    }
    v13 = (v7 == 1) | ((v8 & 1) << 8);
    isSafeMethod = WebCore::isSafeMethod((WebCore *)(v5 + 88), a2);
    v9 = v5[184];
    if ((v9 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v5);
      v9 = v5[184] | 1;
      v5[184] = v9;
    }
    v12[0] = 0;
    v12[16] = 0;
    if ((v9 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v5);
      v5[184] |= 1u;
    }
    v10 = WTF::URL::protocolIs();
    result = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, unsigned __int8 *, __int16 *, unsigned __int8 *, _BYTE *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v4 + 32))(&v15, v4, v5 + 40, &v13, v5, v12, 0, 0, v10);
    v11 = v15;
  }
  else
  {
    v11 = 0;
  }
  *a3 = v11;
  return result;
}

void WTF::HashMap<std::pair<WTF::String,WebCore::ProtectionSpace>,WebCore::Credential,WTF::DefaultHash<std::pair<WTF::String,WebCore::ProtectionSpace>>,WTF::HashTraits<std::pair<WTF::String,WebCore::ProtectionSpace>>,WTF::HashTraits<WebCore::Credential>,WTF::HashTableTraits>::inlineSet<std::pair<WTF::String,WebCore::ProtectionSpace>,WebCore::Credential const&>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  const WTF::StringImpl *v17;
  uint64_t v18;
  int v19;
  _DWORD **v20;
  _DWORD *v21;
  _DWORD *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  int v29;
  uint64_t v30;
  const void *v31;
  _DWORD *v32;
  WTF::StringImpl *v33;
  _DWORD *v34;
  WTF::StringImpl *v35;
  const void *v36;
  const void *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  WTF::StringImpl **v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl **v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  const void **v54;
  const void *v55;
  const void *v56;
  uint64_t v57;

  v7 = *a2;
  if (*a2
    || (WTF::HashTable<std::pair<WTF::String,WebCore::ProtectionSpace>,WTF::KeyValuePair<std::pair<WTF::String,WebCore::ProtectionSpace>,WebCore::Credential>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WebCore::ProtectionSpace>,WebCore::Credential>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::ProtectionSpace>>,WTF::HashMap<std::pair<WTF::String,WebCore::ProtectionSpace>,WebCore::Credential,WTF::DefaultHash<std::pair<WTF::String,WebCore::ProtectionSpace>>,WTF::HashTraits<std::pair<WTF::String,WebCore::ProtectionSpace>>,WTF::HashTraits<WebCore::Credential>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WebCore::ProtectionSpace>>>::rehash(a2, 8u, 0), (v7 = *a2) != 0))
  {
    v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_DWORD *)(*(_QWORD *)a3 + 16);
  if (v9 < 0x100)
    v10 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)a3);
  else
    v10 = v9 >> 8;
  v11 = (uint64_t *)(a3 + 8);
  v12 = v8 & ((0xD7862706ELL
                           * (unint64_t)(277951225 * v10
                                              + 95187966
                                              * WebCore::ProtectionSpaceHash::hash((uint64_t *)(a3 + 8)))) >> 4);
  v13 = v7 + 72 * v12;
  if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WebCore::ProtectionSpace>>,false>::isEmptyValue<std::pair<WTF::String,WebCore::ProtectionSpace>>((WTF **)v13, v14, v15) & 1) == 0)
  {
    v57 = a4;
    v18 = 0;
    v19 = 1;
    do
    {
      if (*(_QWORD *)v13 == -1)
      {
        v18 = v13;
      }
      else if (WTF::equal(*(WTF **)v13, *(const WTF::StringImpl **)a3, v17)
             && WebCore::ProtectionSpaceBase::compare((WTF **)(v13 + 8), (const WTF::StringImpl **)(a3 + 8), v17))
      {
        v45 = *a2;
        if (*a2)
          v46 = *(_DWORD *)(v45 - 4);
        else
          v46 = 0;
        *(_QWORD *)a1 = v13;
        *(_QWORD *)(a1 + 8) = v45 + 72 * v46;
        *(_BYTE *)(a1 + 16) = 0;
        v47 = (WTF::StringImpl **)(v7 + 72 * v12 + 40);
        v48 = *(WTF::StringImpl **)v57;
        if (*(_QWORD *)v57)
          *(_DWORD *)v48 += 2;
        v49 = *v47;
        *v47 = v48;
        if (v49)
        {
          if (*(_DWORD *)v49 == 2)
            WTF::StringImpl::destroy(v49, v16);
          else
            *(_DWORD *)v49 -= 2;
        }
        v50 = (WTF::StringImpl **)(v7 + 72 * v12 + 48);
        v51 = *(WTF::StringImpl **)(v57 + 8);
        if (v51)
          *(_DWORD *)v51 += 2;
        v52 = *v50;
        *v50 = v51;
        if (v52)
        {
          if (*(_DWORD *)v52 == 2)
            WTF::StringImpl::destroy(v52, v16);
          else
            *(_DWORD *)v52 -= 2;
        }
        v53 = v7 + 72 * v12;
        *(_BYTE *)(v53 + 56) = *(_BYTE *)(v57 + 16);
        v54 = (const void **)(v53 + 64);
        v55 = *(const void **)(v57 + 24);
        if (v55)
          CFRetain(v55);
        v56 = *v54;
        *v54 = v55;
        if (v56)
          CFRelease(v56);
        return;
      }
      v12 = ((_DWORD)v12 + v19) & v8;
      v13 = v7 + 72 * v12;
      ++v19;
    }
    while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WebCore::ProtectionSpace>>,false>::isEmptyValue<std::pair<WTF::String,WebCore::ProtectionSpace>>((WTF **)v13, (uint64_t)v16, v17));
    a4 = v57;
    if (v18)
    {
      v20 = (_DWORD **)MEMORY[0x1E0CBF738];
      v21 = (_DWORD *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *v21 += 4;
      *(_QWORD *)v18 = 0;
      *(_QWORD *)(v18 + 8) = v21;
      *(_QWORD *)(v18 + 16) = v21;
      *(_DWORD *)(v18 + 24) = 0;
      *(_WORD *)(v18 + 28) = 257;
      *(_BYTE *)(v18 + 30) = 0;
      *(_QWORD *)(v18 + 32) = 0;
      v22 = *v20;
      if (v22)
        *v22 += 4;
      *(_QWORD *)(v18 + 40) = v22;
      *(_QWORD *)(v18 + 48) = v22;
      *(_BYTE *)(v18 + 56) = 0;
      *(_QWORD *)(v18 + 64) = 0;
      --*(_DWORD *)(*a2 - 16);
      v13 = v18;
    }
  }
  v23 = *(WTF::StringImpl **)a3;
  *(_QWORD *)a3 = 0;
  v24 = *(WTF::StringImpl **)v13;
  *(_QWORD *)v13 = v23;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v16);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = *v11;
  *v11 = 0;
  v26 = *(WTF::StringImpl **)(v13 + 8);
  *(_QWORD *)(v13 + 8) = v25;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v16);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = 0;
  v28 = *(WTF::StringImpl **)(v13 + 16);
  *(_QWORD *)(v13 + 16) = v27;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v16);
    else
      *(_DWORD *)v28 -= 2;
  }
  v29 = *(_DWORD *)(a3 + 24);
  *(_DWORD *)(v13 + 27) = *(_DWORD *)(a3 + 27);
  *(_DWORD *)(v13 + 24) = v29;
  v30 = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a3 + 32) = 0;
  v31 = *(const void **)(v13 + 32);
  *(_QWORD *)(v13 + 32) = v30;
  if (v31)
    CFRelease(v31);
  v32 = *(_DWORD **)a4;
  if (*(_QWORD *)a4)
    *v32 += 2;
  v33 = *(WTF::StringImpl **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = v32;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v16);
    else
      *(_DWORD *)v33 -= 2;
  }
  v34 = *(_DWORD **)(a4 + 8);
  if (v34)
    *v34 += 2;
  v35 = *(WTF::StringImpl **)(v13 + 48);
  *(_QWORD *)(v13 + 48) = v34;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v16);
    else
      *(_DWORD *)v35 -= 2;
  }
  *(_BYTE *)(v13 + 56) = *(_BYTE *)(a4 + 16);
  v36 = *(const void **)(a4 + 24);
  if (v36)
    CFRetain(v36);
  v37 = *(const void **)(v13 + 64);
  *(_QWORD *)(v13 + 64) = v36;
  if (v37)
    CFRelease(v37);
  v38 = *a2;
  if (*a2)
    v39 = *(_DWORD *)(v38 - 12) + 1;
  else
    v39 = 1;
  *(_DWORD *)(v38 - 12) = v39;
  v40 = *a2;
  if (*a2)
    v41 = *(_DWORD *)(v40 - 12);
  else
    v41 = 0;
  v42 = (*(_DWORD *)(v40 - 16) + v41);
  v43 = *(unsigned int *)(v40 - 4);
  if (v43 > 0x400)
  {
    if (v43 <= 2 * v42)
      goto LABEL_55;
  }
  else if (3 * v43 <= 4 * v42)
  {
    if (!(_DWORD)v43)
    {
      v44 = 8;
LABEL_57:
      v13 = WTF::HashTable<std::pair<WTF::String,WebCore::ProtectionSpace>,WTF::KeyValuePair<std::pair<WTF::String,WebCore::ProtectionSpace>,WebCore::Credential>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WebCore::ProtectionSpace>,WebCore::Credential>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::ProtectionSpace>>,WTF::HashMap<std::pair<WTF::String,WebCore::ProtectionSpace>,WebCore::Credential,WTF::DefaultHash<std::pair<WTF::String,WebCore::ProtectionSpace>>,WTF::HashTraits<std::pair<WTF::String,WebCore::ProtectionSpace>>,WTF::HashTraits<WebCore::Credential>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WebCore::ProtectionSpace>>>::rehash(a2, v44, v13);
      v40 = *a2;
      if (*a2)
        LODWORD(v43) = *(_DWORD *)(v40 - 4);
      else
        LODWORD(v43) = 0;
      goto LABEL_64;
    }
LABEL_55:
    v44 = (_DWORD)v43 << (6 * *(_DWORD *)(v40 - 12) >= (2 * v43));
    goto LABEL_57;
  }
LABEL_64:
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + 8) = v40 + 72 * v43;
  *(_BYTE *)(a1 + 16) = 1;
}

uint64_t WTF::HashTable<std::pair<WTF::String,WebCore::ProtectionSpace>,WTF::KeyValuePair<std::pair<WTF::String,WebCore::ProtectionSpace>,WebCore::Credential>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WebCore::ProtectionSpace>,WebCore::Credential>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::ProtectionSpace>>,WTF::HashMap<std::pair<WTF::String,WebCore::ProtectionSpace>,WebCore::Credential,WTF::DefaultHash<std::pair<WTF::String,WebCore::ProtectionSpace>>,WTF::HashTraits<std::pair<WTF::String,WebCore::ProtectionSpace>>,WTF::HashTraits<WebCore::Credential>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WebCore::ProtectionSpace>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  void *v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  int64x2_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  const WTF::StringImpl *v24;
  unsigned int v25;
  int v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  void *v30;
  int v31;
  CFTypeRef v32;
  unsigned int v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  uint64_t result;
  uint64_t v45;
  uint64_t v46;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  int v52;
  __int16 v53;
  char v54;
  CFTypeRef cf;

  v4 = *a1;
  if (*a1)
  {
    LODWORD(v5) = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    LODWORD(v5) = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(72 * a2 + 16));
  if (a2)
  {
    v10 = 0;
    do
    {
      v11 = (_DWORD *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *v11 += 4;
      v12 = v7 + v10;
      *(_QWORD *)(v12 + 16) = 0;
      *(_QWORD *)(v12 + 24) = v11;
      *(_QWORD *)(v12 + 32) = v11;
      *(_DWORD *)(v12 + 40) = 0;
      *(_WORD *)(v12 + 44) = 257;
      *(_BYTE *)(v12 + 46) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      v13 = (_DWORD *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *v13 += 4;
      v14 = vdupq_n_s64((unint64_t)v13);
      v15 = v7 + v10;
      *(int64x2_t *)(v15 + 56) = v14;
      *(_BYTE *)(v15 + 72) = 0;
      *(_QWORD *)(v15 + 80) = 0;
      v10 += 72;
    }
    while (72 * a2 != v10);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if ((_DWORD)v5)
  {
    v16 = 0;
    v17 = 0;
    v5 = v5;
    v46 = v4;
    v45 = v5;
    while (1)
    {
      v18 = v4 + 72 * v16;
      if (*(_QWORD *)v18 == -1)
        goto LABEL_50;
      if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WebCore::ProtectionSpace>>,false>::isEmptyValue<std::pair<WTF::String,WebCore::ProtectionSpace>>((WTF **)(v4 + 72 * v16), (uint64_t)v8, v9))
      {
        WTF::KeyValuePair<std::pair<WTF::String,WebCore::ProtectionSpace>,WebCore::Credential>::~KeyValuePair(v4 + 72 * v16, v19);
        goto LABEL_50;
      }
      v20 = *a1;
      v49 = v17;
      if (*a1)
        v21 = *(_DWORD *)(v20 - 8);
      else
        v21 = 0;
      v22 = *(_DWORD *)(*(_QWORD *)v18 + 16);
      if (v22 < 0x100)
        v23 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)v18);
      else
        v23 = v22 >> 8;
      v25 = v21 & ((0xD7862706ELL
                  * (unint64_t)(277951225 * v23
                                     + 95187966 * WebCore::ProtectionSpaceHash::hash((uint64_t *)(v18 + 8)))) >> 4);
      v26 = 1;
      do
      {
        v27 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
          *(_DWORD *)v27 += 4;
        v28 = v20 + 72 * v25;
        v50 = v27;
        v51 = v27;
        v52 = 0;
        v53 = 257;
        v54 = 0;
        cf = 0;
        if ((WTF::equal(*(WTF **)v28, 0, v24) & 1) == 0
          || !WTF::equal(*(WTF **)(v28 + 8), v27, v24)
          || *(_DWORD *)(v28 + 24)
          || *(_BYTE *)(v28 + 28) != 1
          || !WTF::equal(*(WTF **)(v28 + 16), v27, v24)
          || *(_BYTE *)(v28 + 29) != 1)
        {
          v31 = 0;
LABEL_35:
          cf = 0;
          goto LABEL_36;
        }
        if (!*(_QWORD *)(v28 + 32))
        {
          v31 = 1;
          goto LABEL_35;
        }
        v30 = (void *)WebCore::ProtectionSpace::nsSpace((WebCore::ProtectionSpace *)(v28 + 8));
        v31 = objc_msgSend(v30, "isEqual:", WebCore::ProtectionSpace::nsSpace((WebCore::ProtectionSpace *)&v50));
        v32 = cf;
        cf = 0;
        if (v32)
          CFRelease(v32);
LABEL_36:
        if (v51)
        {
          if (*(_DWORD *)v51 == 2)
            WTF::StringImpl::destroy(v51, v29);
          else
            *(_DWORD *)v51 -= 2;
        }
        if (v50)
        {
          if (*(_DWORD *)v50 == 2)
            WTF::StringImpl::destroy(v50, v29);
          else
            *(_DWORD *)v50 -= 2;
        }
        v33 = v25;
        v25 = (v25 + v26++) & v21;
      }
      while (!v31);
      WTF::KeyValuePair<std::pair<WTF::String,WebCore::ProtectionSpace>,WebCore::Credential>::~KeyValuePair(v28, v29);
      v34 = *(WTF::StringImpl **)v18;
      *(_QWORD *)v18 = 0;
      *(_QWORD *)v28 = v34;
      v35 = *(_QWORD *)(v18 + 8);
      *(_QWORD *)(v18 + 8) = 0;
      *(_QWORD *)(v28 + 8) = v35;
      v36 = *(_QWORD *)(v18 + 16);
      *(_QWORD *)(v18 + 16) = 0;
      *(_QWORD *)(v28 + 16) = v36;
      LODWORD(v36) = *(_DWORD *)(v18 + 24);
      *(_DWORD *)(v28 + 27) = *(_DWORD *)(v18 + 27);
      *(_DWORD *)(v28 + 24) = v36;
      v37 = *(_QWORD *)(v18 + 32);
      *(_QWORD *)(v18 + 32) = 0;
      *(_QWORD *)(v28 + 32) = v37;
      v38 = v20 + 72 * v33;
      v4 = v46;
      v39 = v46 + 72 * v16;
      v40 = *(_QWORD *)(v39 + 40);
      *(_QWORD *)(v39 + 40) = 0;
      *(_QWORD *)(v38 + 40) = v40;
      v41 = *(_QWORD *)(v39 + 48);
      *(_QWORD *)(v39 + 48) = 0;
      *(_QWORD *)(v38 + 48) = v41;
      *(_BYTE *)(v38 + 56) = *(_BYTE *)(v39 + 56);
      v42 = *(_QWORD *)(v39 + 64);
      *(_QWORD *)(v39 + 64) = 0;
      *(_QWORD *)(v38 + 64) = v42;
      WTF::KeyValuePair<std::pair<WTF::String,WebCore::ProtectionSpace>,WebCore::Credential>::~KeyValuePair(v18, v43);
      v17 = v49;
      if (v18 == a3)
        v17 = v28;
      v5 = v45;
LABEL_50:
      if (++v16 == v5)
      {
LABEL_53:
        WTF::fastFree((WTF *)(v4 - 16), v8);
        return v17;
      }
    }
  }
  v17 = 0;
  result = 0;
  if (v4)
    goto LABEL_53;
  return result;
}

uint64_t WebCore::ProtectionSpaceHash::hash(uint64_t *a1)
{
  unsigned int v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;

  v1 = -1640531527;
  v2 = *a1;
  if (*a1)
  {
    v3 = *(unsigned int *)(v2 + 4);
    v4 = v3 & 0xFFFFFFFE;
    if ((v3 & 0xFFFFFFFE) != 0)
    {
      v5 = 0;
      do
      {
        if (v5 >= v3)
        {
          v7 = 0;
        }
        else
        {
          v6 = *(_QWORD *)(v2 + 8);
          if ((*(_BYTE *)(v2 + 16) & 4) != 0)
            v7 = *(unsigned __int8 *)(v6 + v5);
          else
            v7 = *(unsigned __int16 *)(v6 + 2 * v5);
        }
        v8 = v5 + 1;
        if (v5 + 1 >= v3)
        {
          v10 = 0;
        }
        else
        {
          v9 = *(_QWORD *)(v2 + 8);
          if ((*(_BYTE *)(v2 + 16) & 4) != 0)
            v10 = *(unsigned __int8 *)(v9 + v5 + 1);
          else
            v10 = *(unsigned __int16 *)(v9 + 2 * v5 + 2);
        }
        v11 = (v7 << 11) ^ ((v1 + v10) << 16) ^ (v1 + v10);
        v1 = v11 + (v11 >> 11);
        v5 = v8 + 1;
      }
      while (v8 + 1 < v4);
    }
    if ((v3 & 1) != 0)
    {
      if (v3 <= v4)
      {
        v13 = 0;
      }
      else
      {
        v12 = *(_QWORD *)(v2 + 8);
        if ((*(_BYTE *)(v2 + 16) & 4) != 0)
          v13 = *(unsigned __int8 *)(v12 + v4);
        else
          v13 = *(unsigned __int16 *)(v12 + 2 * v4);
      }
      v1 = ((v1 + v13) ^ ((v1 + v13) << 16)) + (((v1 + v13) ^ ((v1 + v13) << 16)) >> 11);
    }
  }
  v14 = (*((_DWORD *)a1 + 4) >> 5) & 0x7FFF800 ^ ((v1 + (unsigned __int16)*((_DWORD *)a1 + 4)) << 16) ^ (v1 + (unsigned __int16)*((_DWORD *)a1 + 4));
  v15 = *((unsigned __int8 *)a1 + 20);
  v16 = (v14 + v15 + (v14 >> 11)) ^ ((v14 + v15 + (v14 >> 11)) << 16);
  v17 = (v16 + *((unsigned __int8 *)a1 + 21) + (v16 >> 11)) ^ ((v16 + *((unsigned __int8 *)a1 + 21) + (v16 >> 11)) << 16);
  v18 = v17 + (v17 >> 11);
  if ((v15 - 5) >= 4)
  {
    v19 = a1[1];
    if (v19)
    {
      v20 = *(unsigned int *)(v19 + 4);
      v21 = v20 & 0xFFFFFFFE;
      if ((v20 & 0xFFFFFFFE) != 0)
      {
        v22 = 0;
        do
        {
          if (v22 >= v20)
          {
            v24 = 0;
          }
          else
          {
            v23 = *(_QWORD *)(v19 + 8);
            if ((*(_BYTE *)(v19 + 16) & 4) != 0)
              v24 = *(unsigned __int8 *)(v23 + v22);
            else
              v24 = *(unsigned __int16 *)(v23 + 2 * v22);
          }
          v25 = v22 + 1;
          if (v22 + 1 >= v20)
          {
            v27 = 0;
          }
          else
          {
            v26 = *(_QWORD *)(v19 + 8);
            if ((*(_BYTE *)(v19 + 16) & 4) != 0)
              v27 = *(unsigned __int8 *)(v26 + v22 + 1);
            else
              v27 = *(unsigned __int16 *)(v26 + 2 * v22 + 2);
          }
          v28 = (v24 << 11) ^ ((v18 + v27) << 16) ^ (v18 + v27);
          v18 = v28 + (v28 >> 11);
          v22 = v25 + 1;
        }
        while (v25 + 1 < v21);
      }
      if ((v20 & 1) != 0)
      {
        if (v20 <= v21)
        {
          v30 = 0;
        }
        else
        {
          v29 = *(_QWORD *)(v19 + 8);
          if ((*(_BYTE *)(v19 + 16) & 4) != 0)
            v30 = *(unsigned __int8 *)(v29 + v21);
          else
            v30 = *(unsigned __int16 *)(v29 + 2 * v21);
        }
        v18 = ((v18 + v30) ^ ((v18 + v30) << 16)) + (((v18 + v30) ^ ((v18 + v30) << 16)) >> 11);
      }
    }
  }
  v31 = (v18 ^ (8 * v18)) + ((v18 ^ (8 * v18)) >> 5);
  v32 = (v31 ^ (4 * v31)) + ((v31 ^ (4 * v31)) >> 15);
  v33 = v32 ^ (v32 << 10);
  if (v33)
    return v33;
  else
    return 0x800000;
}

uint64_t WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WebCore::ProtectionSpace>>,false>::isEmptyValue<std::pair<WTF::String,WebCore::ProtectionSpace>>(WTF **a1, uint64_t a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  const WebCore::ProtectionSpace *v6;
  uint64_t v7;
  CFTypeRef v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  __int16 v15;
  char v16;
  CFTypeRef cf;

  v4 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v4 += 4;
  v12 = v4;
  v13 = v4;
  v14 = 0;
  v15 = 257;
  v16 = 0;
  cf = 0;
  if ((WTF::equal(*a1, 0, a3) & 1) != 0)
  {
    v7 = WebCore::ProtectionSpaceBase::compare(a1 + 1, &v12, v6);
    v8 = cf;
    cf = 0;
    if (v8)
      CFRelease(v8);
  }
  else
  {
    v7 = 0;
    cf = 0;
  }
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v12;
  v12 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v5);
    else
      *(_DWORD *)v10 -= 2;
  }
  return v7;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::ProtectionSpace>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::ProtectionSpace>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::ProtectionSpace,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ProtectionSpace>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  WTF::StringImpl *v8;
  _QWORD *v9;
  _DWORD **v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  const void *v32;
  _QWORD *v33;
  const void *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  _QWORD *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  WTF::StringImpl **v43;
  WTF::StringImpl **v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  const void *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v57;
  WTF::StringImpl **v58;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastMalloc((WTF *)(40 * a2 + 16));
  if (a2)
  {
    v9 = (_QWORD *)(result + 48);
    v10 = (_DWORD **)MEMORY[0x1E0CBF738];
    v11 = a2;
    do
    {
      *(v9 - 4) = 0;
      v12 = *v10;
      if (*v10)
        *v12 += 4;
      *(int64x2_t *)(v9 - 3) = vdupq_n_s64((unint64_t)v12);
      *((_DWORD *)v9 - 2) = 0;
      *((_WORD *)v9 - 2) = 257;
      *((_BYTE *)v9 - 2) = 0;
      *v9 = 0;
      v9 += 5;
      --v11;
    }
    while (v11);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v13 = 0;
    v14 = 0;
    v15 = v5;
    v53 = v5;
    v54 = v4;
    do
    {
      v16 = (WTF::StringImpl **)(v4 + 40 * v13);
      v17 = *v16;
      if (*v16 != (WTF::StringImpl *)-1)
      {
        if (v17)
        {
          v24 = *a1;
          if (*a1)
            v25 = *(_DWORD *)(v24 - 8);
          else
            v25 = 0;
          v26 = *((_DWORD *)v17 + 4);
          v58 = v14;
          if (v26 < 0x100)
            v27 = WTF::StringImpl::hashSlowCase(v17);
          else
            v27 = v26 >> 8;
          v28 = 0;
          do
          {
            v29 = v27 & v25;
            v30 = (WTF::StringImpl **)(v24 + 40 * (v27 & v25));
            v27 = ++v28 + (v27 & v25);
          }
          while (*v30);
          v31 = v24 + 40 * v29;
          v34 = *(const void **)(v31 + 32);
          v33 = (_QWORD *)(v31 + 32);
          v32 = v34;
          *v33 = 0;
          if (v34)
            CFRelease(v32);
          v35 = v24 + 40 * v29;
          v38 = *(WTF::StringImpl **)(v35 + 16);
          v37 = (_QWORD *)(v35 + 16);
          v36 = v38;
          *v37 = 0;
          if (v38)
          {
            if (*(_DWORD *)v36 == 2)
              WTF::StringImpl::destroy(v36, v8);
            else
              *(_DWORD *)v36 -= 2;
          }
          v39 = (WTF::StringImpl *)*(v33 - 3);
          *(v33 - 3) = 0;
          if (v39)
          {
            if (*(_DWORD *)v39 == 2)
              WTF::StringImpl::destroy(v39, v8);
            else
              *(_DWORD *)v39 -= 2;
          }
          v40 = *v30;
          *v30 = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2)
              WTF::StringImpl::destroy(v40, v8);
            else
              *(_DWORD *)v40 -= 2;
          }
          v41 = *v16;
          v57 = v4 + 40 * v13;
          *v16 = 0;
          *v30 = v41;
          v43 = (WTF::StringImpl **)(v57 + 8);
          v42 = *(_QWORD *)(v57 + 8);
          *(_QWORD *)(v57 + 8) = 0;
          *(v33 - 3) = v42;
          v45 = *(_QWORD *)(v57 + 16);
          v44 = (WTF::StringImpl **)(v57 + 16);
          *(_QWORD *)(v57 + 16) = 0;
          *v37 = v45;
          v46 = v24 + 40 * v29;
          v47 = *(_DWORD *)(v57 + 24);
          *(_DWORD *)(v46 + 27) = *(_DWORD *)(v57 + 27);
          *(_DWORD *)(v46 + 24) = v47;
          v48 = *(_QWORD *)(v57 + 32);
          *(_QWORD *)(v57 + 32) = 0;
          *v33 = v48;
          v49 = *(const void **)(v57 + 32);
          *(_QWORD *)(v57 + 32) = 0;
          if (v49)
            CFRelease(v49);
          v50 = *v44;
          *v44 = 0;
          v4 = v54;
          if (v50)
          {
            if (*(_DWORD *)v50 == 2)
              WTF::StringImpl::destroy(v50, v8);
            else
              *(_DWORD *)v50 -= 2;
          }
          v51 = *v43;
          *v43 = 0;
          if (v51)
          {
            if (*(_DWORD *)v51 == 2)
              WTF::StringImpl::destroy(v51, v8);
            else
              *(_DWORD *)v51 -= 2;
          }
          v52 = *(WTF::StringImpl **)v57;
          *(_QWORD *)v57 = 0;
          if (v52)
          {
            if (*(_DWORD *)v52 == 2)
              WTF::StringImpl::destroy(v52, v8);
            else
              *(_DWORD *)v52 -= 2;
          }
          v14 = v58;
          if (v57 == a3)
            v14 = v30;
          v15 = v53;
        }
        else
        {
          v18 = v4 + 40 * v13;
          v19 = *(const void **)(v18 + 32);
          *(_QWORD *)(v18 + 32) = 0;
          if (v19)
            CFRelease(v19);
          v20 = v4 + 40 * v13;
          v21 = *(WTF::StringImpl **)(v20 + 16);
          *(_QWORD *)(v20 + 16) = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v8);
            else
              *(_DWORD *)v21 -= 2;
          }
          v22 = *(WTF::StringImpl **)(v18 + 8);
          *(_QWORD *)(v18 + 8) = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v8);
            else
              *(_DWORD *)v22 -= 2;
          }
          v23 = *v16;
          *v16 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v8);
            else
              *(_DWORD *)v23 -= 2;
          }
        }
      }
      ++v13;
    }
    while (v13 != v15);
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WTF::HashMap<std::pair<WTF::String,WebCore::ProtectionSpace>,WebCore::Credential,WTF::DefaultHash<std::pair<WTF::String,WebCore::ProtectionSpace>>,WTF::HashTraits<std::pair<WTF::String,WebCore::ProtectionSpace>>,WTF::HashTraits<WebCore::Credential>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::String,WebCore::ProtectionSpace>,WebCore::Credential,WTF::DefaultHash<std::pair<WTF::String,WebCore::ProtectionSpace>>,WTF::HashTraits<std::pair<WTF::String,WebCore::ProtectionSpace>>,WTF::HashTraits<WebCore::Credential>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::String,WebCore::ProtectionSpace>>>,std::pair<WTF::String,WebCore::ProtectionSpace>>@<X0>(uint64_t result@<X0>, const WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF **v10;
  uint64_t v11;
  const WTF::StringImpl *v12;
  uint64_t v13;
  const WTF::StringImpl *v14;
  int v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;

  v4 = *(_QWORD *)result;
  if (!*(_QWORD *)result
    || ((v6 = *(_DWORD *)(v4 - 8), v7 = *((_DWORD *)*a2 + 4), v7 < 0x100)
      ? (v8 = WTF::StringImpl::hashSlowCase(*a2))
      : (v8 = v7 >> 8),
        v9 = v6 & ((0xD7862706ELL
                                * (unint64_t)(277951225 * v8
                                                   + 95187966
                                                   * WebCore::ProtectionSpaceHash::hash((uint64_t *)a2 + 1))) >> 4),
        v10 = (WTF **)(v4 + 72 * v9),
        result = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WebCore::ProtectionSpace>>,false>::isEmptyValue<std::pair<WTF::String,WebCore::ProtectionSpace>>(v10, v11, v12), (result & 1) != 0))
  {
LABEL_11:
    v16 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v16 += 4;
    *(_QWORD *)a3 = v16;
    *(_QWORD *)(a3 + 8) = v16;
    *(_BYTE *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
  }
  else
  {
    v15 = 1;
    while (*v10 == (WTF *)-1
         || !WTF::equal(*v10, *a2, v14)
         || (WebCore::ProtectionSpaceBase::compare(v10 + 1, a2 + 1, v14) & 1) == 0)
    {
      v9 = ((_DWORD)v9 + v15) & v6;
      v10 = (WTF **)(v4 + 72 * v9);
      result = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WebCore::ProtectionSpace>>,false>::isEmptyValue<std::pair<WTF::String,WebCore::ProtectionSpace>>(v10, v13, v14);
      ++v15;
      if ((_DWORD)result)
        goto LABEL_11;
    }
    v17 = v4 + 72 * v9;
    v20 = *(_DWORD **)(v17 + 40);
    v18 = v17 + 40;
    v19 = v20;
    if (v20)
      *v19 += 2;
    *(_QWORD *)a3 = v19;
    v21 = *(_DWORD **)(v18 + 8);
    if (v21)
      *v21 += 2;
    *(_QWORD *)(a3 + 8) = v21;
    *(_BYTE *)(a3 + 16) = *(_BYTE *)(v18 + 16);
    result = *(_QWORD *)(v4 + 72 * v9 + 64);
    *(_QWORD *)(a3 + 24) = result;
    if (result)
      return (uint64_t)CFRetain((CFTypeRef)result);
  }
  return result;
}

char *WTF::Vector<std::pair<WTF::String,WebCore::ProtectionSpace>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1 > a3
    || (v6 = (WTF::StringImpl *)((char *)v5 + 40 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v16 = a2;
    if (v16 > v14)
    {
      if (v16 >= 0x6666667)
      {
        __break(0xC471u);
        JUMPOUT(0x1962ED550);
      }
      v17 = (WTF::StringImpl *)((char *)v5 + 40 * *(unsigned int *)(a1 + 12));
      v18 = 40 * v16;
      v19 = WTF::fastMalloc((WTF *)(40 * v16));
      *(_DWORD *)(a1 + 8) = (v18 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,std::pair<WTF::String,WebCore::ProtectionSpace>>::move(v5, v17, v19);
      if (v5)
      {
        if (*(WTF::StringImpl **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v9 = a2;
    if (v9 <= v7)
    {
      v13 = *(WTF::StringImpl **)a1;
    }
    else
    {
      if (v9 >= 0x6666667)
      {
        __break(0xC471u);
        JUMPOUT(0x1962ED558);
      }
      v10 = 40 * v9;
      v11 = WTF::fastMalloc((WTF *)(40 * v9));
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,std::pair<WTF::String,WebCore::ProtectionSpace>>::move(v5, v6, v11);
      v13 = *(WTF::StringImpl **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF::StringImpl **)a1;
      }
    }
    return (char *)v13 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
  }
  return (char *)v3;
}

WTF::StringImpl *WTF::VectorMover<false,std::pair<WTF::String,WebCore::ProtectionSpace>>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)a3 = v6;
      v7 = *((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      *(_QWORD *)(a3 + 8) = v7;
      v8 = *((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      *(_QWORD *)(a3 + 16) = v8;
      LODWORD(v8) = *((_DWORD *)v5 + 6);
      *(_DWORD *)(a3 + 27) = *(_DWORD *)((char *)v5 + 27);
      *(_DWORD *)(a3 + 24) = v8;
      v9 = *((_QWORD *)v5 + 4);
      *((_QWORD *)v5 + 4) = 0;
      *(_QWORD *)(a3 + 32) = v9;
      v10 = (const void *)*((_QWORD *)v5 + 4);
      *((_QWORD *)v5 + 4) = 0;
      if (v10)
        CFRelease(v10);
      v11 = (WTF::StringImpl *)*((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, a2);
        else
          *(_DWORD *)v11 -= 2;
      }
      v12 = (WTF::StringImpl *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, a2);
        else
          *(_DWORD *)v12 -= 2;
      }
      result = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 40);
      a3 += 40;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::IPAddress::isLoopback(void)::$_0,WebCore::IPAddress::isLoopback(void)::$_1,WebCore::IPAddress::isLoopback(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::HashTableEmptyValueType,in_addr,in6_addr> const&>()
{
  return 0;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::IPAddress::isLoopback(void)::$_0,WebCore::IPAddress::isLoopback(void)::$_1,WebCore::IPAddress::isLoopback(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::HashTableEmptyValueType,in_addr,in6_addr> const&>(uint64_t a1, _DWORD *a2)
{
  return *a2 == 16777343;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::IPAddress::isLoopback(void)::$_0,WebCore::IPAddress::isLoopback(void)::$_1,WebCore::IPAddress::isLoopback(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::HashTableEmptyValueType,in_addr,in6_addr> const&>(uint64_t a1, _QWORD *a2)
{
  return (*a2 | a2[1] ^ 0x100000000000000) == 0;
}

WebCore::TimerBase *WebCore::Timer::Timer<WebCore::DNSResolveQueue,WebCore::DNSResolveQueue>(WebCore::TimerBase *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  *(_QWORD *)WebCore::TimerBase::TimerBase(a1) = off_1E31F7378;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v8 = off_1E341D928;
  v8[1] = a3;
  v8[2] = a4;
  v8[3] = a2;
  *((_QWORD *)a1 + 6) = v8;
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::DNSResolveQueue::*&)(void),WebCore::DNSResolveQueue*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DataURLDecoder::decode(WTF::URL const&,WebCore::DataURLDecoder::ScheduleContext const&,WebCore::DataURLDecoder::ShouldValidatePadding,WTF::Function<void ()(std::optional<WebCore::DataURLDecoder::Result>)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WebCore::DataURLDecoder::DecodeTask *v3;
  WTF *v4;
  void *v5;

  v3 = (WebCore::DataURLDecoder::DecodeTask *)a1[1];
  *a1 = &off_1E341D950;
  a1[1] = 0;
  if (v3)
  {
    WebCore::DataURLDecoder::DecodeTask::~DecodeTask(v3, a2);
    WTF::fastFree(v4, v5);
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DataURLDecoder::decode(WTF::URL const&,WebCore::DataURLDecoder::ScheduleContext const&,WebCore::DataURLDecoder::ShouldValidatePadding,WTF::Function<void ()(std::optional<WebCore::DataURLDecoder::Result>)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = off_1E341D978;
  v3 = a1[7];
  a1[7] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::__optional_destruct_base<WebCore::DataURLDecoder::Result,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::DataURLDecoder::Result,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (*(_BYTE *)(a1 + 40))
  {
    v3 = *(WTF **)(a1 + 24);
    if (v3)
    {
      *(_QWORD *)(a1 + 24) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      WTF::fastFree(v3, a2);
    }
    v4 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(unsigned int **)a1;
  if ((_DWORD)v3)
  {
    v5 = 48 * v3;
    do
    {
      v6 = v4[10];
      if ((_DWORD)v6 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore15FormDataElement15EncodedFileDataENSC_15EncodedBlobDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v6])(&v8, v4);
      v4[10] = -1;
      v4 += 12;
      v5 -= 48;
    }
    while (v5);
    v4 = *(unsigned int **)a1;
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FormDataElement::lengthInBytes(WTF::Function<unsigned long long ()(WTF::URL const&)> const&)::$_0,WebCore::FormDataElement::lengthInBytes(WTF::Function<unsigned long long ()(WTF::URL const&)> const&)::$_1,WebCore::FormDataElement::lengthInBytes(WTF::Function<unsigned long long ()(WTF::URL const&)> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 12);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FormDataElement::lengthInBytes(WTF::Function<unsigned long long ()(WTF::URL const&)> const&)::$_0,WebCore::FormDataElement::lengthInBytes(WTF::Function<unsigned long long ()(WTF::URL const&)> const&)::$_1,WebCore::FormDataElement::lengthInBytes(WTF::Function<unsigned long long ()(WTF::URL const&)> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData> const&>(int a1, WTF::FileSystemImpl *this)
{
  uint64_t result;
  char v3;

  result = *((_QWORD *)this + 2);
  if (result == -1)
  {
    result = WTF::FileSystemImpl::fileSize(this, this);
    if (!v3)
      return 0;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FormDataElement::lengthInBytes(WTF::Function<unsigned long long ()(WTF::URL const&)> const&)::$_0,WebCore::FormDataElement::lengthInBytes(WTF::Function<unsigned long long ()(WTF::URL const&)> const&)::$_1,WebCore::FormDataElement::lengthInBytes(WTF::Function<unsigned long long ()(WTF::URL const&)> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData> const&>(_QWORD ***a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)***a1 + 16))(***a1);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::FormDataElement::lengthInBytes(void)::$_0,unsigned long long,WTF::URL const&>::call(int a1, WebCore::ThreadableBlobRegistry *this)
{
  return WebCore::ThreadableBlobRegistry::blobSize(this, this);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FormDataElement::isolatedCopy(void)::$_0,WebCore::FormDataElement::isolatedCopy(void)::$_1,WebCore::FormDataElement::isolatedCopy(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v3;
  void *v5;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    v5 = (void *)WTF::fastMalloc((WTF *)*(unsigned int *)(a1 + 12));
    memcpy(v5, *(const void **)a1, *(unsigned int *)(a1 + 12));
  }
  else
  {
    v5 = 0;
  }
  *(_QWORD *)a2 = v5;
  *(_DWORD *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 12) = v3;
  *(_DWORD *)(a2 + 40) = 0;
}

double std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FormDataElement::isolatedCopy(void)::$_0,WebCore::FormDataElement::isolatedCopy(void)::$_1,WebCore::FormDataElement::isolatedCopy(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData> const&>@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  double result;
  uint64_t v5;
  _BYTE v6[25];

  WTF::String::isolatedCopy();
  *(_OWORD *)v6 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)&v6[16] = *(_QWORD *)(a1 + 24);
  v6[24] = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a2 = v5;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v6;
  result = *(double *)&v6[9];
  *(_OWORD *)(a2 + 17) = *(_OWORD *)&v6[9];
  *(_DWORD *)(a2 + 40) = 1;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FormDataElement::isolatedCopy(void)::$_0,WebCore::FormDataElement::isolatedCopy(void)::$_1,WebCore::FormDataElement::isolatedCopy(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData> const&>@<X0>(uint64_t a1@<X8>)
{
  WTF::StringImpl *v2;
  uint64_t result;
  WTF::StringImpl *v4;
  __int128 v5;
  __int128 v6;

  WTF::URL::isolatedCopy();
  result = (uint64_t)v4;
  if (v4)
    *(_DWORD *)v4 += 2;
  *(_QWORD *)a1 = v4;
  *(_OWORD *)(a1 + 8) = v5;
  *(_OWORD *)(a1 + 24) = v6;
  *(_DWORD *)(a1 + 40) = 2;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      return WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return result;
}

uint64_t WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>(uint64_t result, WTF *a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  size_t v10;
  void *v11;
  void *v12;

  v4 = *(unsigned int *)(result + 8);
  v5 = v4 + (v4 >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= (unint64_t)a2)
    v7 = (unint64_t)a2;
  else
    v7 = v6;
  if (v7 <= v4)
    return a3;
  if (!HIDWORD(v7))
  {
    v8 = result;
    v9 = *(void **)result;
    v10 = *(unsigned int *)(result + 12);
    v11 = (void *)WTF::fastMalloc((WTF *)v7);
    *(_DWORD *)(v8 + 8) = v7;
    *(_QWORD *)v8 = v11;
    memcpy(v11, v9, v10);
    if (v9)
    {
      if (*(void **)v8 == v9)
      {
        *(_QWORD *)v8 = 0;
        *(_DWORD *)(v8 + 8) = 0;
      }
      WTF::fastFree((WTF *)v9, v12);
    }
    return a3;
  }
  __break(0xC471u);
  return result;
}

unint64_t WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 48 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FormData::appendNonMultiPartKeyValuePairItems(WebCore::DOMFormData const&,WebCore::FormData::EncodingType)::$_0,WebCore::FormData::appendNonMultiPartKeyValuePairItems(WebCore::DOMFormData const&,WebCore::FormData::EncodingType)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WTF::String> const&>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(*(_QWORD *)a1 + 144);
  if (v2)
    *v2 += 2;
  *a2 = v2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FormData::appendNonMultiPartKeyValuePairItems(WebCore::DOMFormData const&,WebCore::FormData::EncodingType)::$_0,WebCore::FormData::appendNonMultiPartKeyValuePairItems(WebCore::DOMFormData const&,WebCore::FormData::EncodingType)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::File,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WTF::String> const&>(_DWORD **a1@<X1>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  if (*a1)
    *v2 += 2;
  *a2 = v2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FormData::resolveBlobReferences(WebCore::BlobRegistryImpl *)::$_0,WebCore::FormData::resolveBlobReferences(WebCore::BlobRegistryImpl *)::$_1,WebCore::FormData::resolveBlobReferences(WebCore::BlobRegistryImpl *)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::EncodedBlobData> &>(uint64_t ***a1, uint64_t a2)
{
  return WebCore::FormData::appendData(***a1, *(_BYTE **)a2, *(unsigned int *)(a2 + 12));
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FormData::resolveBlobReferences(WebCore::BlobRegistryImpl *)::$_0,WebCore::FormData::resolveBlobReferences(WebCore::BlobRegistryImpl *)::$_1,WebCore::FormData::resolveBlobReferences(WebCore::BlobRegistryImpl *)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::EncodedBlobData> &>(uint64_t a1, uint64_t a2)
{
  return WebCore::FormData::appendFileRange(**(_QWORD **)(*(_QWORD *)a1 + 8), (_DWORD **)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FormData::resolveBlobReferences(WebCore::BlobRegistryImpl *)::$_0,WebCore::FormData::resolveBlobReferences(WebCore::BlobRegistryImpl *)::$_1,WebCore::FormData::resolveBlobReferences(WebCore::BlobRegistryImpl *)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::EncodedBlobData> &>(unint64_t *a1, WTF::URL *this)
{
  unint64_t v3;
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  WTF::URL *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  WTF::StringImpl **v19;
  _DWORD **v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  WTF::StringImpl **v28;
  WTF::StringImpl **v29;
  char v30;
  _QWORD v31[3];
  int v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  result = **(_QWORD **)(*a1 + 16);
  if (!result)
  {
    v5 = (_QWORD *)WebCore::s_platformStrategies;
    v6 = *(_QWORD *)(WebCore::s_platformStrategies + 40);
    if (!v6)
      goto LABEL_46;
    goto LABEL_3;
  }
  while (2)
  {
    v5 = **(_QWORD ***)(v3 + 24);
    LOBYTE(v31[0]) = 0;
    v33 = 0;
    result = (uint64_t)WebCore::BlobRegistryImpl::getBlobDataFromURL(result, this, (uint64_t)v31);
    v7 = result;
    if (v33 && v32 != -1)
      result = ((uint64_t (*)(char *, _QWORD *))off_1E341D740[v32])(&v30, v31);
    if (v7)
    {
      v8 = *(unsigned int *)(v7 + 108);
      if ((_DWORD)v8)
      {
        v9 = *(_QWORD *)(v7 + 96) + 16;
        v10 = 40 * v8;
        while (1)
        {
          v11 = *(_DWORD *)(v9 - 16);
          if (v11 == 1)
          {
            v19 = *(WTF::StringImpl ***)v9;
            if (*(_BYTE *)(*(_QWORD *)v9 + 32))
              WebCore::BlobDataFileReference::generateReplacementFile(*(WTF::StringImpl ***)v9);
            v21 = v19[3];
            v20 = (_DWORD **)(v19 + 3);
            if (!v21)
              --v20;
            v23 = *(_QWORD *)(v9 + 8);
            v22 = *(_QWORD *)(v9 + 16);
            if (v22 == -1)
            {
              if (*(_DWORD *)(v9 - 16) == 1)
              {
                v29 = *(WTF::StringImpl ***)v9;
                if (*(_BYTE *)(*(_QWORD *)v9 + 32))
                  WebCore::BlobDataFileReference::generateReplacementFile(*(WTF::StringImpl ***)v9);
                v22 = (uint64_t)v29[5];
              }
              else
              {
                v22 = -1;
              }
            }
            v24 = *(WTF::StringImpl ***)v9;
            if (*(_BYTE *)(*(_QWORD *)v9 + 32) || v24[3])
            {
              v25 = 0;
              v26 = 0;
              v27 = 0;
            }
            else
            {
              v26 = 1;
              v27 = (unint64_t)v24[6];
              v25 = v27 & 0xFFFFFFFFFFFFFF00;
              v27 = v27;
            }
            result = WebCore::FormData::appendFileRange((uint64_t)v5, v20, v23, v22, v27 | v25, v26);
            goto LABEL_30;
          }
          if (!v11)
            break;
LABEL_30:
          v9 += 40;
          v10 -= 40;
          if (!v10)
            return result;
        }
        v12 = *(_QWORD *)(v9 - 8);
        v13 = *(unsigned int *)(v12 + 24);
        if ((_DWORD)v13 == -1
          || (v31[0] = &v30,
              v14 = (WTF::URL *)((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v13])(v31, v12 + 8), v15 = *(unsigned int *)(v12 + 24), (_DWORD)v15 == -1))
        {
          std::__throw_bad_variant_access[abi:sn180100]();
        }
        this = v14;
        v31[0] = &v30;
        v16 = ((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v15])(v31, v12 + 8);
        v3 = v16;
        v18 = *(_QWORD *)(v9 + 8);
        v17 = *(_QWORD *)(v9 + 16);
        if (v17 == -1)
        {
          if (*(_DWORD *)(v9 - 16) != 1)
          {
            v17 = v16 - v18;
            if (v16 < v18)
            {
LABEL_45:
              __break(1u);
LABEL_46:
              v6 = (*(uint64_t (**)(_QWORD *))(*v5 + 40))(v5);
              v5[5] = v6;
LABEL_3:
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 88))(v6);
              if (result)
                continue;
              return result;
            }
            goto LABEL_29;
          }
          v28 = *(WTF::StringImpl ***)v9;
          if (*(_BYTE *)(*(_QWORD *)v9 + 32))
            WebCore::BlobDataFileReference::generateReplacementFile(*(WTF::StringImpl ***)v9);
          v17 = (unint64_t)v28[5];
        }
        if (v3 < v18)
          goto LABEL_45;
        if (v17 == -1)
        {
          v17 = v3 - v18;
        }
        else if (v3 - v18 < v17)
        {
          goto LABEL_45;
        }
LABEL_29:
        result = WebCore::FormData::appendData((uint64_t)v5, (_BYTE *)this + v18, v17);
        goto LABEL_30;
      }
    }
    return result;
  }
}

unint64_t WebCore::FormDataBuilder::generateUniqueBoundaryString@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3;
  char *v4;
  int v5;
  unint64_t result;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  void *v13;
  char *v14;
  size_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  void *v21;
  uint64_t v22;
  unsigned int v23;
  size_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  void *v36;

  LODWORD(v3) = 22;
  v4 = (char *)WTF::fastMalloc((WTF *)0x16);
  *(_QWORD *)a1 = v4;
  qmemcpy(v4, "----WebKitFormBoundary", 22);
  *(_QWORD *)(a1 + 8) = 0x1600000016;
  v5 = 4;
  do
  {
    result = WTF::cryptographicallyRandomNumber<unsigned int>();
    v7 = result;
    v8 = v3;
    if ((_DWORD)v3 == *(_DWORD *)(a1 + 8))
    {
      v9 = v3 + ((unint64_t)v3 >> 2);
      if (v9 >= 0x10)
        v10 = v9 + 1;
      else
        v10 = 16;
      if (v10 <= (unint64_t)v3 + 1)
        v11 = v3 + 1;
      else
        v11 = v10;
      if (HIDWORD(v11))
      {
LABEL_53:
        __break(0xC471u);
        JUMPOUT(0x1962EE1E4);
      }
      v12 = (char *)WTF::fastMalloc((WTF *)v11);
      *(_DWORD *)(a1 + 8) = v11;
      *(_QWORD *)a1 = v12;
      memcpy(v12, v4, v8);
      if (v12 == v4)
      {
        v12 = 0;
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v4, v13);
      v3 = *(unsigned int *)(a1 + 12);
      v14 = &v12[v3];
      v4 = v12;
    }
    else
    {
      v14 = &v4[v3];
    }
    *v14 = WebCore::FormDataBuilder::generateUniqueBoundaryString(void)::alphaNumericEncodingMap[(v7 >> 24) & 0x3F];
    v15 = (v3 + 1);
    *(_DWORD *)(a1 + 12) = v15;
    v16 = (v7 >> 16) & 0x3F;
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
    {
      v17 = v15 + (v15 >> 2);
      if (v17 >= 0x10)
        v18 = v17 + 1;
      else
        v18 = 16;
      if (v18 <= v15 + 1)
        v19 = v15 + 1;
      else
        v19 = v18;
      if (HIDWORD(v19))
      {
        __break(0xC471u);
        JUMPOUT(0x1962EE1ECLL);
      }
      v20 = (char *)WTF::fastMalloc((WTF *)v19);
      *(_DWORD *)(a1 + 8) = v19;
      *(_QWORD *)a1 = v20;
      memcpy(v20, v4, v15);
      if (v20 == v4)
      {
        v20 = 0;
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v4, v21);
      v22 = *(unsigned int *)(a1 + 12);
      v20[v22] = WebCore::FormDataBuilder::generateUniqueBoundaryString(void)::alphaNumericEncodingMap[v16];
      v23 = v22 + 1;
      v4 = v20;
    }
    else
    {
      v23 = v3 + 2;
      v4[v15] = WebCore::FormDataBuilder::generateUniqueBoundaryString(void)::alphaNumericEncodingMap[v16];
    }
    *(_DWORD *)(a1 + 12) = v23;
    v24 = v23;
    if (v23 == *(_DWORD *)(a1 + 8))
    {
      v25 = v23 + 1;
      v26 = v24 + (v24 >> 2);
      if (v26 >= 0x10)
        v27 = v26 + 1;
      else
        v27 = 16;
      if (v27 <= v25)
        v28 = v24 + 1;
      else
        v28 = v27;
      if (HIDWORD(v28))
      {
        __break(0xC471u);
        JUMPOUT(0x1962EE1F4);
      }
      v29 = (char *)WTF::fastMalloc((WTF *)v28);
      *(_DWORD *)(a1 + 8) = v28;
      *(_QWORD *)a1 = v29;
      memcpy(v29, v4, v24);
      if (v29 == v4)
      {
        v29 = 0;
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v4, v30);
      v4 = v29;
    }
    v4[v24] = WebCore::FormDataBuilder::generateUniqueBoundaryString(void)::alphaNumericEncodingMap[(v7 >> 8) & 0x3F];
    v31 = (v24 + 1);
    *(_DWORD *)(a1 + 12) = v31;
    if ((_DWORD)v31 == *(_DWORD *)(a1 + 8))
    {
      v32 = v31 + (v31 >> 2);
      if (v32 >= 0x10)
        v33 = v32 + 1;
      else
        v33 = 16;
      if (v33 <= v31 + 1)
        v34 = v31 + 1;
      else
        v34 = v33;
      if (HIDWORD(v34))
        goto LABEL_53;
      v35 = (char *)WTF::fastMalloc((WTF *)v34);
      *(_DWORD *)(a1 + 8) = v34;
      *(_QWORD *)a1 = v35;
      memcpy(v35, v4, (v24 + 1));
      if (v35 == v4)
      {
        v35 = 0;
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v4, v36);
      v4 = v35;
    }
    v4[v31] = WebCore::FormDataBuilder::generateUniqueBoundaryString(void)::alphaNumericEncodingMap[v7 & 0x3F];
    LODWORD(v3) = v24 + 2;
    *(_DWORD *)(a1 + 12) = v24 + 2;
    --v5;
  }
  while (v5);
  return result;
}

uint64_t WebCore::FormDataBuilder::beginMultiPartHeader(uint64_t a1, void *a2, size_t a3, uint64_t a4)
{
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  _BYTE *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  void *v23;
  void *v24;

  WebCore::FormDataBuilder::addBoundaryToMultiPartHeader(a1, a2, a3, 0);
  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(unsigned int *)(a1 + 12);
  v8 = v7 + 38;
  if (v7 + 38 > v6)
  {
    v19 = v6 + (v6 >> 2);
    if (v19 >= 0x10)
      v20 = v19 + 1;
    else
      v20 = 16;
    if (v20 <= v8)
      v21 = v7 + 38;
    else
      v21 = v20;
    if (HIDWORD(v21))
    {
LABEL_31:
      __break(0xC471u);
      JUMPOUT(0x1962EE388);
    }
    v22 = *(void **)a1;
    v23 = (void *)WTF::fastMalloc((WTF *)v21);
    *(_DWORD *)(a1 + 8) = v21;
    *(_QWORD *)a1 = v23;
    memcpy(v23, v22, v7);
    if (v22)
    {
      if (*(void **)a1 == v22)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v22, v24);
    }
  }
  v9 = *(unsigned int *)(a1 + 12);
  if (v8 < v9)
    goto LABEL_31;
  qmemcpy((void *)(*(_QWORD *)a1 + v9), "Content-Disposition: form-data; name=\"", 38);
  *(_DWORD *)(a1 + 12) = v8;
  result = WebCore::FormDataBuilder::appendQuoted(a1, a4);
  v11 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
  {
    v12 = v11 + (v11 >> 2);
    if (v12 >= 0x10)
      v13 = v12 + 1;
    else
      v13 = 16;
    if (v13 <= v11 + 1)
      v14 = v11 + 1;
    else
      v14 = v13;
    if (HIDWORD(v14))
    {
      __break(0xC471u);
      JUMPOUT(0x1962EE390);
    }
    v15 = *(void **)a1;
    v16 = (void *)WTF::fastMalloc((WTF *)v14);
    *(_DWORD *)(a1 + 8) = v14;
    *(_QWORD *)a1 = v16;
    result = (uint64_t)memcpy(v16, v15, v11);
    if (v15)
    {
      if (*(void **)a1 == v15)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v15, v17);
    }
    v18 = (_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12));
  }
  else
  {
    v18 = (_BYTE *)(*(_QWORD *)a1 + v11);
  }
  *v18 = 34;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WebCore::FormDataBuilder::addBoundaryToMultiPartHeader(uint64_t result, void *__src, size_t __n, int a4)
{
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  void *v42;
  void *v43;
  void *v44;

  v7 = result;
  v8 = *(unsigned int *)(result + 8);
  v9 = *(unsigned int *)(result + 12);
  v10 = v9 + 2;
  if (v9 + 2 > v8)
  {
    v21 = v8 + (v8 >> 2);
    if (v21 >= 0x10)
      v22 = v21 + 1;
    else
      v22 = 16;
    if (v22 <= v10)
      v23 = v9 + 2;
    else
      v23 = v22;
    if (HIDWORD(v23))
    {
      __break(0xC471u);
      JUMPOUT(0x1962EE668);
    }
    v24 = *(void **)result;
    v25 = (void *)WTF::fastMalloc((WTF *)v23);
    *(_DWORD *)(v7 + 8) = v23;
    *(_QWORD *)v7 = v25;
    result = (uint64_t)memcpy(v25, v24, v9);
    if (v24)
    {
      if (*(void **)v7 == v24)
      {
        *(_QWORD *)v7 = 0;
        *(_DWORD *)(v7 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v24, v26);
    }
  }
  v11 = *(unsigned int *)(v7 + 12);
  if (v10 < v11)
    goto LABEL_65;
  *(_WORD *)(*(_QWORD *)v7 + v11) = 11565;
  *(_DWORD *)(v7 + 12) = v10;
  if (__n)
  {
    v12 = __n + v10;
    v13 = *(unsigned int *)(v7 + 8);
    if (v12 > v13)
    {
      v33 = v13 + (v13 >> 2);
      if (v33 >= 0x10)
        v34 = v33 + 1;
      else
        v34 = 16;
      if (v34 <= v12)
        v35 = __n + v10;
      else
        v35 = v34;
      if (HIDWORD(v35))
      {
        __break(0xC471u);
        JUMPOUT(0x1962EE678);
      }
      v36 = *(void **)v7;
      v37 = (void *)WTF::fastMalloc((WTF *)v35);
      *(_DWORD *)(v7 + 8) = v35;
      *(_QWORD *)v7 = v37;
      memcpy(v37, v36, v10);
      if (v36)
      {
        if (*(void **)v7 == v36)
        {
          *(_QWORD *)v7 = 0;
          *(_DWORD *)(v7 + 8) = 0;
        }
        WTF::fastFree((WTF *)v36, v38);
      }
    }
    v14 = *(unsigned int *)(v7 + 12);
    if (v12 < v14)
    {
      __break(0xC471u);
      JUMPOUT(0x1962EE650);
    }
    result = (uint64_t)memcpy((void *)(*(_QWORD *)v7 + v14), __src, __n);
    *(_DWORD *)(v7 + 12) = v12;
    LODWORD(v10) = __n + v10;
  }
  if (a4)
  {
    v15 = v10;
    v10 = v10 + 2;
    v16 = *(unsigned int *)(v7 + 8);
    if (v10 <= v16)
    {
LABEL_9:
      v17 = *(unsigned int *)(v7 + 12);
      if (v10 < v17)
      {
        __break(0xC471u);
        JUMPOUT(0x1962EE660);
      }
      *(_WORD *)(*(_QWORD *)v7 + v17) = 11565;
      *(_DWORD *)(v7 + 12) = v10;
      goto LABEL_11;
    }
    v39 = v16 + (v16 >> 2);
    if (v39 >= 0x10)
      v40 = v39 + 1;
    else
      v40 = 16;
    if (v40 <= v10)
      v41 = v10;
    else
      v41 = v40;
    if (!HIDWORD(v41))
    {
      v42 = *(void **)v7;
      v43 = (void *)WTF::fastMalloc((WTF *)v41);
      *(_DWORD *)(v7 + 8) = v41;
      *(_QWORD *)v7 = v43;
      result = (uint64_t)memcpy(v43, v42, v15);
      if (v42)
      {
        if (*(void **)v7 == v42)
        {
          *(_QWORD *)v7 = 0;
          *(_DWORD *)(v7 + 8) = 0;
        }
        result = WTF::fastFree((WTF *)v42, v44);
      }
      goto LABEL_9;
    }
LABEL_65:
    __break(0xC471u);
    JUMPOUT(0x1962EE648);
  }
LABEL_11:
  v18 = v10 + 2;
  v19 = *(unsigned int *)(v7 + 8);
  if (v18 > v19)
  {
    v27 = v19 + (v19 >> 2);
    if (v27 >= 0x10)
      v28 = v27 + 1;
    else
      v28 = 16;
    if (v28 <= v18)
      v29 = v10 + 2;
    else
      v29 = v28;
    if (HIDWORD(v29))
    {
      __break(0xC471u);
      JUMPOUT(0x1962EE670);
    }
    v30 = *(void **)v7;
    v31 = (void *)WTF::fastMalloc((WTF *)v29);
    *(_DWORD *)(v7 + 8) = v29;
    *(_QWORD *)v7 = v31;
    result = (uint64_t)memcpy(v31, v30, v10);
    if (v30)
    {
      if (*(void **)v7 == v30)
      {
        *(_QWORD *)v7 = 0;
        *(_DWORD *)(v7 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v30, v32);
    }
  }
  v20 = *(unsigned int *)(v7 + 12);
  if (v18 < v20)
  {
    __break(0xC471u);
    JUMPOUT(0x1962EE658);
  }
  *(_WORD *)(*(_QWORD *)v7 + v20) = 2573;
  *(_DWORD *)(v7 + 12) = v18;
  return result;
}

uint64_t WebCore::FormDataBuilder::appendQuoted(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  _BYTE *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  void *v43;
  void *v44;
  void *v45;

  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = 0;
    while (v5 < *(unsigned int *)(a2 + 12))
    {
      v6 = *(unsigned __int8 *)(*(_QWORD *)a2 + v5);
      switch(v6)
      {
        case 34:
          v16 = *(unsigned int *)(v4 + 8);
          v17 = *(unsigned int *)(v4 + 12);
          v9 = v17 + 3;
          if (v17 + 3 > v16)
          {
            v34 = v16 + (v16 >> 2);
            if (v34 >= 0x10)
              v35 = v34 + 1;
            else
              v35 = 16;
            if (v35 <= v9)
              v36 = v17 + 3;
            else
              v36 = v35;
            if (HIDWORD(v36))
            {
              __break(0xC471u);
              JUMPOUT(0x1962EE9A8);
            }
            v37 = *(void **)v4;
            v38 = (void *)WTF::fastMalloc((WTF *)v36);
            *(_DWORD *)(v4 + 8) = v36;
            *(_QWORD *)v4 = v38;
            result = (uint64_t)memcpy(v38, v37, v17);
            if (v37)
            {
              if (*(void **)v4 == v37)
              {
                *(_QWORD *)v4 = 0;
                *(_DWORD *)(v4 + 8) = 0;
              }
              result = WTF::fastFree((WTF *)v37, v39);
            }
          }
          v18 = *(unsigned int *)(v4 + 12);
          if (v9 < v18)
          {
            __break(0xC471u);
            JUMPOUT(0x1962EE990);
          }
          v19 = *(_QWORD *)v4 + v18;
          *(_BYTE *)(v19 + 2) = 50;
          *(_WORD *)v19 = 12837;
          break;
        case 13:
          v12 = *(unsigned int *)(v4 + 8);
          v13 = *(unsigned int *)(v4 + 12);
          v9 = v13 + 3;
          if (v13 + 3 > v12)
          {
            v28 = v12 + (v12 >> 2);
            if (v28 >= 0x10)
              v29 = v28 + 1;
            else
              v29 = 16;
            if (v29 <= v9)
              v30 = v13 + 3;
            else
              v30 = v29;
            if (HIDWORD(v30))
            {
              __break(0xC471u);
              JUMPOUT(0x1962EE9A0);
            }
            v31 = *(void **)v4;
            v32 = (void *)WTF::fastMalloc((WTF *)v30);
            *(_DWORD *)(v4 + 8) = v30;
            *(_QWORD *)v4 = v32;
            result = (uint64_t)memcpy(v32, v31, v13);
            if (v31)
            {
              if (*(void **)v4 == v31)
              {
                *(_QWORD *)v4 = 0;
                *(_DWORD *)(v4 + 8) = 0;
              }
              result = WTF::fastFree((WTF *)v31, v33);
            }
          }
          v14 = *(unsigned int *)(v4 + 12);
          if (v9 < v14)
          {
            __break(0xC471u);
            JUMPOUT(0x1962EE988);
          }
          v15 = *(_QWORD *)v4 + v14;
          *(_BYTE *)(v15 + 2) = 68;
          *(_WORD *)v15 = 12325;
          break;
        case 10:
          v7 = *(unsigned int *)(v4 + 8);
          v8 = *(unsigned int *)(v4 + 12);
          v9 = v8 + 3;
          if (v8 + 3 > v7)
          {
            v40 = v7 + (v7 >> 2);
            if (v40 >= 0x10)
              v41 = v40 + 1;
            else
              v41 = 16;
            if (v41 <= v9)
              v42 = v8 + 3;
            else
              v42 = v41;
            if (HIDWORD(v42))
              goto LABEL_74;
            v43 = *(void **)v4;
            v44 = (void *)WTF::fastMalloc((WTF *)v42);
            *(_DWORD *)(v4 + 8) = v42;
            *(_QWORD *)v4 = v44;
            result = (uint64_t)memcpy(v44, v43, v8);
            if (v43)
            {
              if (*(void **)v4 == v43)
              {
                *(_QWORD *)v4 = 0;
                *(_DWORD *)(v4 + 8) = 0;
              }
              result = WTF::fastFree((WTF *)v43, v45);
            }
          }
          v10 = *(unsigned int *)(v4 + 12);
          if (v9 < v10)
          {
            __break(0xC471u);
            JUMPOUT(0x1962EE980);
          }
          v11 = *(_QWORD *)v4 + v10;
          *(_BYTE *)(v11 + 2) = 65;
          *(_WORD *)v11 = 12325;
          break;
        default:
          v20 = *(unsigned int *)(v4 + 12);
          if ((_DWORD)v20 == *(_DWORD *)(v4 + 8))
          {
            v21 = v20 + (v20 >> 2);
            if (v21 >= 0x10)
              v22 = v21 + 1;
            else
              v22 = 16;
            if (v22 <= v20 + 1)
              v23 = v20 + 1;
            else
              v23 = v22;
            if (HIDWORD(v23))
            {
              __break(0xC471u);
              JUMPOUT(0x1962EE998);
            }
            v24 = *(void **)v4;
            v25 = (void *)WTF::fastMalloc((WTF *)v23);
            *(_DWORD *)(v4 + 8) = v23;
            *(_QWORD *)v4 = v25;
            result = (uint64_t)memcpy(v25, v24, v20);
            if (v24)
            {
              if (*(void **)v4 == v24)
              {
                *(_QWORD *)v4 = 0;
                *(_DWORD *)(v4 + 8) = 0;
              }
              result = WTF::fastFree((WTF *)v24, v26);
            }
            v27 = (_BYTE *)(*(_QWORD *)v4 + *(unsigned int *)(v4 + 12));
          }
          else
          {
            v27 = (_BYTE *)(*(_QWORD *)v4 + v20);
          }
          *v27 = v6;
          LODWORD(v9) = *(_DWORD *)(v4 + 12) + 1;
          break;
      }
      *(_DWORD *)(v4 + 12) = v9;
      if (v2 == ++v5)
        return result;
    }
LABEL_74:
    __break(0xC471u);
    JUMPOUT(0x1962EE978);
  }
  return result;
}

WTF *WebCore::FormDataBuilder::addFilenameToMultiPartHeader(uint64_t a1, PAL *a2, uint64_t *a3)
{
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  const PAL::TextEncoding *v12;
  unint64_t v13;
  void *v14;
  WTF *result;
  size_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  WTF *v30;
  int v31;

  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(unsigned int *)(a1 + 12);
  v8 = v7 + 12;
  if (v7 + 12 > v6)
  {
    v24 = v6 + (v6 >> 2);
    if (v24 >= 0x10)
      v25 = v24 + 1;
    else
      v25 = 16;
    if (v25 <= v8)
      v26 = v7 + 12;
    else
      v26 = v25;
    if (HIDWORD(v26))
    {
LABEL_36:
      __break(0xC471u);
      JUMPOUT(0x1962EEB9CLL);
    }
    v27 = *(void **)a1;
    v28 = (void *)WTF::fastMalloc((WTF *)v26);
    *(_DWORD *)(a1 + 8) = v26;
    *(_QWORD *)a1 = v28;
    memcpy(v28, v27, v7);
    if (v27)
    {
      if (*(void **)a1 == v27)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v27, v29);
    }
  }
  v9 = *(unsigned int *)(a1 + 12);
  if (v8 < v9)
    goto LABEL_36;
  v10 = *(_QWORD *)a1 + v9;
  *(_QWORD *)v10 = *(_QWORD *)"; filename=\"";
  *(_DWORD *)(v10 + 8) = 574449005;
  *(_DWORD *)(a1 + 12) = v8;
  v11 = *a3;
  if (*a3)
  {
    v12 = *(const PAL::TextEncoding **)(v11 + 8);
    v13 = *(unsigned int *)(v11 + 4) | ((unint64_t)((*(_DWORD *)(v11 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v12 = 0;
    v13 = 0x100000000;
  }
  PAL::TextEncoding::encode(a2, v12, v13, 0, 1, &v30);
  WebCore::FormDataBuilder::appendQuoted(a1, (uint64_t)&v30);
  result = v30;
  if (v30)
  {
    v30 = 0;
    v31 = 0;
    result = (WTF *)WTF::fastFree(result, v14);
  }
  v16 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
  {
    v17 = v16 + (v16 >> 2);
    if (v17 >= 0x10)
      v18 = v17 + 1;
    else
      v18 = 16;
    if (v18 <= v16 + 1)
      v19 = v16 + 1;
    else
      v19 = v18;
    if (HIDWORD(v19))
    {
      __break(0xC471u);
      JUMPOUT(0x1962EEBA4);
    }
    v20 = *(void **)a1;
    v21 = (void *)WTF::fastMalloc((WTF *)v19);
    *(_DWORD *)(a1 + 8) = v19;
    *(_QWORD *)a1 = v21;
    result = (WTF *)memcpy(v21, v20, v16);
    if (v20)
    {
      if (*(void **)a1 == v20)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      result = (WTF *)WTF::fastFree((WTF *)v20, v22);
    }
    v23 = (_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12));
  }
  else
  {
    v23 = (_BYTE *)(*(_QWORD *)a1 + v16);
  }
  *v23 = 34;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WebCore::FormDataBuilder::addContentTypeToMultiPartHeader(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  size_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  void *v23;
  void *v24;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v5 + 16;
  if (v5 + 16 > v4)
  {
    v13 = v4 + (v4 >> 2);
    if (v13 >= 0x10)
      v14 = v13 + 1;
    else
      v14 = 16;
    if (v14 <= v6)
      v15 = v5 + 16;
    else
      v15 = v14;
    if (HIDWORD(v15))
    {
      __break(0xC471u);
      JUMPOUT(0x1962EED40);
    }
    v16 = *(void **)result;
    v17 = (void *)WTF::fastMalloc((WTF *)v15);
    *(_DWORD *)(v3 + 8) = v15;
    *(_QWORD *)v3 = v17;
    result = (uint64_t)memcpy(v17, v16, v5);
    if (v16)
    {
      if (*(void **)v3 == v16)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v16, v18);
    }
  }
  v7 = *(unsigned int *)(v3 + 12);
  if (v6 < v7)
    goto LABEL_34;
  *(_OWORD *)(*(_QWORD *)v3 + v7) = *(_OWORD *)"\r\nContent-Type: ";
  *(_DWORD *)(v3 + 12) = v6;
  v8 = *a2;
  if (!*a2)
    return result;
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
    return result;
  v10 = v9 + v6;
  v11 = *(unsigned int *)(v3 + 8);
  if (v10 > v11)
  {
    v19 = v11 + (v11 >> 2);
    if (v19 >= 0x10)
      v20 = v19 + 1;
    else
      v20 = 16;
    if (v20 <= v10)
      v21 = v9 + v6;
    else
      v21 = v20;
    if (!HIDWORD(v21))
    {
      v22 = *(void **)v3;
      v23 = (void *)WTF::fastMalloc((WTF *)v21);
      *(_DWORD *)(v3 + 8) = v21;
      *(_QWORD *)v3 = v23;
      memcpy(v23, v22, v6);
      if (v22)
      {
        if (*(void **)v3 == v22)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        WTF::fastFree((WTF *)v22, v24);
      }
      goto LABEL_6;
    }
LABEL_34:
    __break(0xC471u);
    JUMPOUT(0x1962EED30);
  }
LABEL_6:
  v12 = *(unsigned int *)(v3 + 12);
  if (v10 < v12)
  {
    __break(0xC471u);
    JUMPOUT(0x1962EED38);
  }
  result = (uint64_t)memcpy((void *)(*(_QWORD *)v3 + v12), (const void *)(v8 + 16), v9);
  *(_DWORD *)(v3 + 12) = v10;
  return result;
}

uint64_t WebCore::FormDataBuilder::addKeyValuePairAsFormData(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  size_t v7;
  size_t v8;
  const void *v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  size_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  _BYTE *v20;
  size_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  _BYTE *v28;
  size_t v29;
  size_t v30;
  const void *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  size_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  size_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  _BYTE *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  void *v62;
  void *v63;
  void *v64;

  v6 = result;
  if (a4 == 1)
  {
    v7 = *(unsigned int *)(a2 + 12);
    v8 = *(unsigned int *)(result + 12);
    if ((_DWORD)v7)
    {
      v9 = *(const void **)a2;
      v10 = v8 + v7;
      v11 = *(unsigned int *)(result + 8);
      if (v8 + v7 > v11)
      {
        v53 = v11 + (v11 >> 2);
        if (v53 >= 0x10)
          v54 = v53 + 1;
        else
          v54 = 16;
        if (v54 <= v10)
          v55 = v8 + v7;
        else
          v55 = v54;
        if (HIDWORD(v55))
        {
          __break(0xC471u);
          JUMPOUT(0x1962EF1C8);
        }
        v56 = *(void **)result;
        v57 = (void *)WTF::fastMalloc((WTF *)v55);
        *(_DWORD *)(v6 + 8) = v55;
        *(_QWORD *)v6 = v57;
        memcpy(v57, v56, v8);
        if (v56)
        {
          if (*(void **)v6 == v56)
          {
            *(_QWORD *)v6 = 0;
            *(_DWORD *)(v6 + 8) = 0;
          }
          WTF::fastFree((WTF *)v56, v58);
        }
      }
      v12 = *(unsigned int *)(v6 + 12);
      if (v10 < v12)
        goto LABEL_99;
      result = (uint64_t)memcpy((void *)(*(_QWORD *)v6 + v12), v9, v7);
      *(_DWORD *)(v6 + 12) = v10;
      LODWORD(v8) = v8 + v7;
    }
    v13 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(v6 + 8))
    {
      v14 = v8 + ((unint64_t)v8 >> 2);
      if (v14 >= 0x10)
        v15 = v14 + 1;
      else
        v15 = 16;
      if (v15 <= (unint64_t)v8 + 1)
        v16 = v8 + 1;
      else
        v16 = v15;
      if (HIDWORD(v16))
      {
        __break(0xC471u);
        JUMPOUT(0x1962EF1A8);
      }
      v17 = *(void **)v6;
      v18 = (void *)WTF::fastMalloc((WTF *)v16);
      *(_DWORD *)(v6 + 8) = v16;
      *(_QWORD *)v6 = v18;
      result = (uint64_t)memcpy(v18, v17, v13);
      if (v17)
      {
        if (*(void **)v6 == v17)
        {
          *(_QWORD *)v6 = 0;
          *(_DWORD *)(v6 + 8) = 0;
        }
        result = WTF::fastFree((WTF *)v17, v19);
      }
      v20 = (_BYTE *)(*(_QWORD *)v6 + *(unsigned int *)(v6 + 12));
    }
    else
    {
      v20 = (_BYTE *)(*(_QWORD *)v6 + v8);
    }
    *v20 = 61;
    v29 = (*(_DWORD *)(v6 + 12) + 1);
    *(_DWORD *)(v6 + 12) = v29;
    v30 = *(unsigned int *)(a3 + 12);
    if (!(_DWORD)v30)
      goto LABEL_38;
    v31 = *(const void **)a3;
    v32 = v30 + v29;
    v33 = *(unsigned int *)(v6 + 8);
    if (v32 <= v33)
    {
LABEL_36:
      v34 = *(unsigned int *)(v6 + 12);
      if (v32 < v34)
      {
        __break(0xC471u);
        JUMPOUT(0x1962EF198);
      }
      result = (uint64_t)memcpy((void *)(*(_QWORD *)v6 + v34), v31, v30);
      *(_DWORD *)(v6 + 12) = v32;
      LODWORD(v29) = v30 + v29;
LABEL_38:
      v35 = v29;
      v36 = v29 + 2;
      v37 = *(unsigned int *)(v6 + 8);
      if (v36 > v37)
      {
        v47 = v37 + (v37 >> 2);
        if (v47 >= 0x10)
          v48 = v47 + 1;
        else
          v48 = 16;
        if (v48 <= v36)
          v49 = v29 + 2;
        else
          v49 = v48;
        if (HIDWORD(v49))
        {
          __break(0xC471u);
          JUMPOUT(0x1962EF1C0);
        }
        v50 = *(void **)v6;
        v51 = (void *)WTF::fastMalloc((WTF *)v49);
        *(_DWORD *)(v6 + 8) = v49;
        *(_QWORD *)v6 = v51;
        result = (uint64_t)memcpy(v51, v50, v35);
        if (v50)
        {
          if (*(void **)v6 == v50)
          {
            *(_QWORD *)v6 = 0;
            *(_DWORD *)(v6 + 8) = 0;
          }
          result = WTF::fastFree((WTF *)v50, v52);
        }
      }
      v38 = *(unsigned int *)(v6 + 12);
      if (v36 < v38)
      {
        __break(0xC471u);
        JUMPOUT(0x1962EF1A0);
      }
      *(_WORD *)(*(_QWORD *)v6 + v38) = 2573;
      *(_DWORD *)(v6 + 12) = v36;
      return result;
    }
    v59 = v33 + (v33 >> 2);
    if (v59 >= 0x10)
      v60 = v59 + 1;
    else
      v60 = 16;
    if (v60 <= v32)
      v61 = v30 + v29;
    else
      v61 = v60;
    if (!HIDWORD(v61))
    {
      v62 = *(void **)v6;
      v63 = (void *)WTF::fastMalloc((WTF *)v61);
      *(_DWORD *)(v6 + 8) = v61;
      *(_QWORD *)v6 = v63;
      memcpy(v63, v62, v29);
      if (v62)
      {
        if (*(void **)v6 == v62)
        {
          *(_QWORD *)v6 = 0;
          *(_DWORD *)(v6 + 8) = 0;
        }
        WTF::fastFree((WTF *)v62, v64);
      }
      goto LABEL_36;
    }
LABEL_99:
    __break(0xC471u);
    JUMPOUT(0x1962EF190);
  }
  v21 = *(unsigned int *)(result + 12);
  if ((_DWORD)v21)
  {
    if ((_DWORD)v21 == *(_DWORD *)(result + 8))
    {
      v22 = v21 + (v21 >> 2);
      if (v22 >= 0x10)
        v23 = v22 + 1;
      else
        v23 = 16;
      if (v23 <= v21 + 1)
        v24 = v21 + 1;
      else
        v24 = v23;
      if (HIDWORD(v24))
      {
        __break(0xC471u);
        JUMPOUT(0x1962EF1B8);
      }
      v25 = *(void **)result;
      v26 = (void *)WTF::fastMalloc((WTF *)v24);
      *(_DWORD *)(v6 + 8) = v24;
      *(_QWORD *)v6 = v26;
      memcpy(v26, v25, v21);
      if (v25)
      {
        if (*(void **)v6 == v25)
        {
          *(_QWORD *)v6 = 0;
          *(_DWORD *)(v6 + 8) = 0;
        }
        WTF::fastFree((WTF *)v25, v27);
      }
      v28 = (_BYTE *)(*(_QWORD *)v6 + *(unsigned int *)(v6 + 12));
    }
    else
    {
      v28 = (_BYTE *)(*(_QWORD *)result + v21);
    }
    *v28 = 38;
    ++*(_DWORD *)(v6 + 12);
  }
  WebCore::FormDataBuilder::appendFormURLEncoded(v6, *(_QWORD *)a2, *(unsigned int *)(a2 + 12));
  v39 = *(unsigned int *)(v6 + 12);
  if ((_DWORD)v39 == *(_DWORD *)(v6 + 8))
  {
    v40 = v39 + (v39 >> 2);
    if (v40 >= 0x10)
      v41 = v40 + 1;
    else
      v41 = 16;
    if (v41 <= v39 + 1)
      v42 = v39 + 1;
    else
      v42 = v41;
    if (HIDWORD(v42))
    {
      __break(0xC471u);
      JUMPOUT(0x1962EF1B0);
    }
    v43 = *(void **)v6;
    v44 = (void *)WTF::fastMalloc((WTF *)v42);
    *(_DWORD *)(v6 + 8) = v42;
    *(_QWORD *)v6 = v44;
    memcpy(v44, v43, v39);
    if (v43)
    {
      if (*(void **)v6 == v43)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree((WTF *)v43, v45);
    }
    v46 = (_BYTE *)(*(_QWORD *)v6 + *(unsigned int *)(v6 + 12));
  }
  else
  {
    v46 = (_BYTE *)(*(_QWORD *)v6 + v39);
  }
  *v46 = 61;
  ++*(_DWORD *)(v6 + 12);
  return WebCore::FormDataBuilder::appendFormURLEncoded(v6, *(_QWORD *)a3, *(unsigned int *)(a3 + 12));
}

uint64_t WebCore::FormDataBuilder::appendFormURLEncoded(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  _BYTE *v16;
  size_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  _BYTE *v24;
  size_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  _BYTE *v32;
  unsigned int v33;
  char v34;
  size_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  _BYTE *v42;
  int v43;
  size_t v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  _BYTE *v52;
  unint64_t v53;
  size_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  unsigned int v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v5 = result;
    v6 = 0;
    while (1)
    {
      v7 = *(unsigned __int8 *)(a2 + v6);
      if ((v7 - 48) < 0xA || (v7 | 0x20u) - 97 < 0x1A)
        break;
      if (!*(_BYTE *)(a2 + v6))
        goto LABEL_41;
      result = (uint64_t)memchr("-._*", *(unsigned __int8 *)(a2 + v6), 5uLL);
      if (result)
        break;
      if (v7 != 10)
      {
        if (v7 != 13)
        {
          if (v7 == 32)
          {
            v17 = *(unsigned int *)(v5 + 12);
            if ((_DWORD)v17 == *(_DWORD *)(v5 + 8))
            {
              v18 = v17 + (v17 >> 2);
              if (v18 >= 0x10)
                v19 = v18 + 1;
              else
                v19 = 16;
              if (v19 <= v17 + 1)
                v20 = v17 + 1;
              else
                v20 = v19;
              if (HIDWORD(v20))
              {
                __break(0xC471u);
                JUMPOUT(0x1962EF6BCLL);
              }
              v21 = *(void **)v5;
              v22 = (void *)WTF::fastMalloc((WTF *)v20);
              *(_DWORD *)(v5 + 8) = v20;
              *(_QWORD *)v5 = v22;
              result = (uint64_t)memcpy(v22, v21, v17);
              if (v21)
              {
                if (*(void **)v5 == v21)
                {
                  *(_QWORD *)v5 = 0;
                  *(_DWORD *)(v5 + 8) = 0;
                }
                result = WTF::fastFree((WTF *)v21, v23);
              }
              v24 = (_BYTE *)(*(_QWORD *)v5 + *(unsigned int *)(v5 + 12));
            }
            else
            {
              v24 = (_BYTE *)(*(_QWORD *)v5 + v17);
            }
            *v24 = 43;
          }
          else
          {
LABEL_41:
            v25 = *(unsigned int *)(v5 + 12);
            if ((_DWORD)v25 == *(_DWORD *)(v5 + 8))
            {
              v26 = v25 + (v25 >> 2);
              if (v26 >= 0x10)
                v27 = v26 + 1;
              else
                v27 = 16;
              if (v27 <= v25 + 1)
                v28 = v25 + 1;
              else
                v28 = v27;
              if (HIDWORD(v28))
              {
                __break(0xC471u);
                JUMPOUT(0x1962EF6A4);
              }
              v29 = *(void **)v5;
              v30 = (void *)WTF::fastMalloc((WTF *)v28);
              *(_DWORD *)(v5 + 8) = v28;
              *(_QWORD *)v5 = v30;
              memcpy(v30, v29, v25);
              if (v29)
              {
                if (*(void **)v5 == v29)
                {
                  *(_QWORD *)v5 = 0;
                  *(_DWORD *)(v5 + 8) = 0;
                }
                WTF::fastFree((WTF *)v29, v31);
              }
              v32 = (_BYTE *)(*(_QWORD *)v5 + *(unsigned int *)(v5 + 12));
            }
            else
            {
              v32 = (_BYTE *)(*(_QWORD *)v5 + v25);
            }
            *v32 = 37;
            ++*(_DWORD *)(v5 + 12);
            v64 = 0;
            result = WTF::Internal::appendHex();
            v64 = v33;
            v34 = *((_BYTE *)&v64 - v33);
            v35 = *(unsigned int *)(v5 + 12);
            if ((_DWORD)v35 == *(_DWORD *)(v5 + 8))
            {
              v36 = v35 + (v35 >> 2);
              if (v36 >= 0x10)
                v37 = v36 + 1;
              else
                v37 = 16;
              if (v37 <= v35 + 1)
                v38 = v35 + 1;
              else
                v38 = v37;
              if (HIDWORD(v38))
              {
                __break(0xC471u);
                JUMPOUT(0x1962EF6ACLL);
              }
              v39 = *(void **)v5;
              v40 = (void *)WTF::fastMalloc((WTF *)v38);
              *(_DWORD *)(v5 + 8) = v38;
              *(_QWORD *)v5 = v40;
              result = (uint64_t)memcpy(v40, v39, v35);
              if (v39)
              {
                if (*(void **)v5 == v39)
                {
                  *(_QWORD *)v5 = 0;
                  *(_DWORD *)(v5 + 8) = 0;
                }
                result = WTF::fastFree((WTF *)v39, v41);
              }
              v42 = (_BYTE *)(*(_QWORD *)v5 + *(unsigned int *)(v5 + 12));
            }
            else
            {
              v42 = (_BYTE *)(*(_QWORD *)v5 + v35);
            }
            *v42 = v34;
            v43 = *(_DWORD *)(v5 + 8);
            v44 = (*(_DWORD *)(v5 + 12) + 1);
            *(_DWORD *)(v5 + 12) = v44;
            v45 = ((_BYTE *)&v64 - v64)[1];
            if ((_DWORD)v44 == v43)
            {
              v46 = v44 + (v44 >> 2);
              if (v46 >= 0x10)
                v47 = v46 + 1;
              else
                v47 = 16;
              if (v47 <= v44 + 1)
                v48 = v44 + 1;
              else
                v48 = v47;
              if (HIDWORD(v48))
              {
                __break(0xC471u);
                JUMPOUT(0x1962EF6B4);
              }
              v49 = *(void **)v5;
              v50 = (void *)WTF::fastMalloc((WTF *)v48);
              *(_DWORD *)(v5 + 8) = v48;
              *(_QWORD *)v5 = v50;
              result = (uint64_t)memcpy(v50, v49, v44);
              if (v49)
              {
                if (*(void **)v5 == v49)
                {
                  *(_QWORD *)v5 = 0;
                  *(_DWORD *)(v5 + 8) = 0;
                }
                result = WTF::fastFree((WTF *)v49, v51);
              }
              v52 = (_BYTE *)(*(_QWORD *)v5 + *(unsigned int *)(v5 + 12));
            }
            else
            {
              v52 = (_BYTE *)(*(_QWORD *)v5 + v44);
            }
            *v52 = v45;
          }
LABEL_84:
          ++*(_DWORD *)(v5 + 12);
          goto LABEL_85;
        }
        if (v6 + 1 < a3 && *(_BYTE *)(a2 + v6 + 1) == 10)
          goto LABEL_85;
      }
      v53 = *(unsigned int *)(v5 + 8);
      v54 = *(unsigned int *)(v5 + 12);
      v55 = v54 + 6;
      if (v54 + 6 > v53)
      {
        v58 = v53 + (v53 >> 2);
        if (v58 >= 0x10)
          v59 = v58 + 1;
        else
          v59 = 16;
        if (v59 <= v55)
          v60 = v54 + 6;
        else
          v60 = v59;
        if (HIDWORD(v60))
        {
LABEL_112:
          __break(0xC471u);
          JUMPOUT(0x1962EF69CLL);
        }
        v61 = *(void **)v5;
        v62 = (void *)WTF::fastMalloc((WTF *)v60);
        *(_DWORD *)(v5 + 8) = v60;
        *(_QWORD *)v5 = v62;
        result = (uint64_t)memcpy(v62, v61, v54);
        if (v61)
        {
          if (*(void **)v5 == v61)
          {
            *(_QWORD *)v5 = 0;
            *(_DWORD *)(v5 + 8) = 0;
          }
          result = WTF::fastFree((WTF *)v61, v63);
        }
      }
      v56 = *(unsigned int *)(v5 + 12);
      if (v55 < v56)
      {
        __break(0xC471u);
        JUMPOUT(0x1962EF6C4);
      }
      v57 = *(_QWORD *)v5 + v56;
      *(_WORD *)(v57 + 4) = 16688;
      *(_DWORD *)v57 = 625225765;
      *(_DWORD *)(v5 + 12) = v55;
LABEL_85:
      if (a3 == ++v6)
        return result;
    }
    v9 = *(unsigned int *)(v5 + 12);
    if ((_DWORD)v9 == *(_DWORD *)(v5 + 8))
    {
      v10 = v9 + (v9 >> 2);
      if (v10 >= 0x10)
        v11 = v10 + 1;
      else
        v11 = 16;
      if (v11 <= v9 + 1)
        v12 = v9 + 1;
      else
        v12 = v11;
      if (HIDWORD(v12))
        goto LABEL_112;
      v13 = *(void **)v5;
      v14 = (void *)WTF::fastMalloc((WTF *)v12);
      *(_DWORD *)(v5 + 8) = v12;
      *(_QWORD *)v5 = v14;
      result = (uint64_t)memcpy(v14, v13, v9);
      if (v13)
      {
        if (*(void **)v5 == v13)
        {
          *(_QWORD *)v5 = 0;
          *(_DWORD *)(v5 + 8) = 0;
        }
        result = WTF::fastFree((WTF *)v13, v15);
      }
      v16 = (_BYTE *)(*(_QWORD *)v5 + *(unsigned int *)(v5 + 12));
    }
    else
    {
      v16 = (_BYTE *)(*(_QWORD *)v5 + v9);
    }
    *v16 = v7;
    goto LABEL_84;
  }
  return result;
}

unsigned int *WebCore::HTTPHeaderMap::isolatedCopy@<X0>(unsigned int *result@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v3;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  unsigned int **v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;

  v3 = result;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  v5 = result[3];
  if (!(_DWORD)v5)
  {
    v6 = 0;
LABEL_17:
    v11 = 0;
    goto LABEL_18;
  }
  if (v5 >> 28)
    goto LABEL_31;
  result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * v5));
  v6 = result;
  v7 = v3[3];
  if (!(_DWORD)v7)
    goto LABEL_17;
  v8 = 0;
  v9 = *(_QWORD *)v3;
  v10 = *(_QWORD *)v3 + 16 * v7;
  v11 = ((unint64_t)(16 * v7 - 16) >> 4) + 1;
  do
  {
    v12 = v9 + v8 * 4 + 16;
    LOWORD(v29) = *(_WORD *)(v9 + v8 * 4);
    result = (unsigned int *)WTF::String::isolatedCopy();
    v13 = &v6[v8];
    *(_WORD *)v13 = v29;
    *((_QWORD *)v13 + 1) = v30;
    v8 += 4;
  }
  while (v12 != v10);
  v14 = *(unsigned int *)(a3 + 12);
  v15 = *(WTF **)a3;
  if ((_DWORD)v14)
  {
    v16 = 16 * v14;
    v17 = (unsigned int **)((char *)v15 + 8);
    do
    {
      result = *v17;
      *v17 = 0;
      if (result)
      {
        if (*result == 2)
          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
        else
          *result -= 2;
      }
      v17 += 2;
      v16 -= 16;
    }
    while (v16);
  }
  if (v15)
    result = (unsigned int *)WTF::fastFree(v15, a2);
LABEL_18:
  *(_QWORD *)a3 = v6;
  *(_DWORD *)(a3 + 8) = v5;
  *(_DWORD *)(a3 + 12) = v11;
  v18 = v3[7];
  if (!(_DWORD)v18)
  {
    v19 = 0;
    goto LABEL_25;
  }
  if (v18 >> 28)
  {
LABEL_31:
    __break(0xC471u);
    JUMPOUT(0x1962EF934);
  }
  result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * v18));
  v19 = result;
  v20 = v3[7];
  if (!(_DWORD)v20)
  {
LABEL_25:
    v24 = 0;
    goto LABEL_26;
  }
  v21 = 0;
  v22 = *((_QWORD *)v3 + 2);
  v23 = v22 + 16 * v20;
  v24 = ((unint64_t)(16 * v20 - 16) >> 4) + 1;
  do
  {
    v25 = v22 + v21 * 4;
    WTF::String::isolatedCopy();
    result = (unsigned int *)WTF::String::isolatedCopy();
    v26 = &v19[v21];
    *(_QWORD *)v26 = v29;
    *((_QWORD *)v26 + 1) = v30;
    v21 += 4;
  }
  while (v25 + 16 != v23);
LABEL_26:
  v27 = *(unsigned int *)(a3 + 28);
  v28 = *(WTF **)(a3 + 16);
  if ((_DWORD)v27)
  {
    result = (unsigned int *)WTF::VectorTypeOperations<WebCore::HTTPHeaderMap::UncommonHeader>::destruct(*(WTF::StringImpl **)(a3 + 16), (WTF *)((char *)v28 + 16 * v27));
    if (!v28)
      goto LABEL_28;
LABEL_30:
    result = (unsigned int *)WTF::fastFree(v28, a2);
    goto LABEL_28;
  }
  if (v28)
    goto LABEL_30;
LABEL_28:
  *(_QWORD *)(a3 + 16) = v19;
  *(_DWORD *)(a3 + 24) = v18;
  *(_DWORD *)(a3 + 28) = v24;
  return result;
}

double WebCore::HTTPHeaderMap::isolatedCopy@<D0>(unsigned int *a1@<X0>, double *a2@<X8>)
{
  double result;
  uint64_t v5;
  double v6;

  WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>>::copy(a1, (uint64_t)&v5);
  *(_QWORD *)a2 = v5;
  a2[1] = v6;
  WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>>::copy((uint64_t)(a1 + 4), (uint64_t)&v5);
  *((_QWORD *)a2 + 2) = v5;
  result = v6;
  a2[3] = v6;
  return result;
}

uint64_t WebCore::HTTPHeaderMap::getUncommonHeader@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  _DWORD *v21;

  v4 = *(unsigned int *)(result + 28);
  if (!(_DWORD)v4)
  {
LABEL_39:
    v21 = 0;
    goto LABEL_40;
  }
  v5 = 0;
  v6 = *(_QWORD *)(result + 16);
  v7 = a3 & 0xFF00000000;
  while (1)
  {
    v8 = *(_QWORD *)(v6 + 16 * v5);
    if (v8)
    {
      v9 = *(unsigned __int8 **)(v8 + 8);
      v10 = *(unsigned int *)(v8 + 4) | ((unint64_t)((*(_DWORD *)(v8 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v9 = 0;
      v10 = 0x100000000;
    }
    if ((_DWORD)v10 != (_DWORD)a3)
      goto LABEL_14;
    v11 = v10;
    if ((v10 & 0x100000000) != 0)
    {
      if (v7)
      {
        if (!(_DWORD)a3)
          goto LABEL_36;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v9) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *a2))
          goto LABEL_14;
        v12 = 1;
        do
        {
          v13 = v12;
          if (v11 == v12)
            break;
          result = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v9[v12]);
          v14 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a2[v12++]);
        }
        while ((_DWORD)result == v14);
        goto LABEL_13;
      }
      if (!(_DWORD)v10)
        goto LABEL_36;
      v16 = *(unsigned __int16 *)a2;
      result = (v16 - 65) < 0x1A;
      if ((v16 | (32 * (_DWORD)result)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v9))
      {
        v17 = 1;
        do
        {
          v13 = v17;
          if (v11 == v17)
            break;
          result = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v9[v17]);
          v18 = *(unsigned __int16 *)&a2[2 * v17] | (32 * (*(unsigned __int16 *)&a2[2 * v17] - 65 < 0x1A));
          ++v17;
        }
        while (v18 == (_DWORD)result);
        goto LABEL_13;
      }
      goto LABEL_14;
    }
    if (!v7)
      break;
    if (!(_DWORD)v10)
      goto LABEL_36;
    if ((*(unsigned __int16 *)v9 | (32 * (*(unsigned __int16 *)v9 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *a2))
    {
      v15 = 1;
      do
      {
        v13 = v15;
        if (v11 == v15)
          break;
        result = *(unsigned __int16 *)&v9[2 * v15] | (32
                                                    * (*(unsigned __int16 *)&v9[2 * v15]
                                                                   - 65 < 0x1A));
        ++v15;
      }
      while ((_DWORD)result == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + a2[v13]));
LABEL_13:
      if (v13 >= v11)
        goto LABEL_36;
    }
LABEL_14:
    if (++v5 == v4)
      goto LABEL_39;
  }
  if ((_DWORD)v10)
  {
    v19 = *(unsigned __int16 *)a2;
    result = (v19 - 65) < 0x1A;
    if ((*(unsigned __int16 *)v9 | (32 * (*(unsigned __int16 *)v9 - 65 < 0x1A))) != (v19 | (32 * (_DWORD)result)))
      goto LABEL_14;
    v20 = 1;
    do
    {
      v13 = v20;
      if (v11 == v20)
        break;
      result = *(unsigned __int16 *)&v9[2 * v20] | (32
                                                  * (*(unsigned __int16 *)&v9[2 * v20] - 65 < 0x1A));
      ++v20;
    }
    while ((_DWORD)result == (*(unsigned __int16 *)&a2[2 * v13] | (32
                                                                  * (*(unsigned __int16 *)&a2[2 * v13]
                                                                   - 65 < 0x1A))));
    goto LABEL_13;
  }
LABEL_36:
  if (v5 >= v4)
  {
    __break(0xC471u);
  }
  else
  {
    v21 = *(_DWORD **)(v6 + 16 * v5 + 8);
    if (v21)
      *v21 += 2;
LABEL_40:
    *a4 = v21;
  }
  return result;
}

WTF::StringImpl *WebCore::HTTPHeaderMap::set(WebCore::HTTPHeaderMap *this, const WTF::StringImpl **a2, WTF::StringImpl **a3)
{
  const WTF::StringImpl *v6;
  WebCore::HTTPHeaderNamesHash *v7;
  unint64_t v8;
  unsigned __int16 v10;

  v6 = *a2;
  if (*a2)
  {
    v7 = (WebCore::HTTPHeaderNamesHash *)*((_QWORD *)v6 + 1);
    v8 = *((unsigned int *)v6 + 1) | ((unint64_t)((*((_DWORD *)v6 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v7 = 0;
    v8 = 0x100000000;
  }
  v10 = 0;
  if (WebCore::findHTTPHeaderName(v7, (char *)v8, &v10))
    return WebCore::HTTPHeaderMap::set(this, (WTF::StringImpl *)v10, a3);
  else
    return (WTF::StringImpl *)WebCore::HTTPHeaderMap::setUncommonHeader(this, a2, (const WTF::String *)a3);
}

WTF::StringImpl *WebCore::HTTPHeaderMap::add(WebCore::HTTPHeaderMap *this, WTF::StringImpl **a2, const WTF::String *a3)
{
  WTF::StringImpl *v6;
  WebCore::HTTPHeaderNamesHash *v7;
  unint64_t v8;
  unsigned __int16 v10;

  v6 = *a2;
  if (*a2)
  {
    v7 = (WebCore::HTTPHeaderNamesHash *)*((_QWORD *)v6 + 1);
    v8 = *((unsigned int *)v6 + 1) | ((unint64_t)((*((_DWORD *)v6 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v7 = 0;
    v8 = 0x100000000;
  }
  v10 = 0;
  if (WebCore::findHTTPHeaderName(v7, (char *)v8, &v10))
    return WebCore::HTTPHeaderMap::add(this, v10, (uint64_t *)a3);
  else
    return WebCore::HTTPHeaderMap::addUncommonHeader(this, a2, (WTF::StringImpl **)a3);
}

WTF::StringImpl *WebCore::HTTPHeaderMap::addUncommonHeader(WebCore::HTTPHeaderMap *this, WTF::StringImpl **a2, WTF::StringImpl **a3)
{
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *result;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl **v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;

  v6 = (_QWORD *)((char *)this + 16);
  LODWORD(v7) = *((_DWORD *)this + 7);
  if (!(_DWORD)v7)
  {
LABEL_5:
    v10 = *a2;
    if (*a2)
      *(_DWORD *)v10 += 2;
    v30 = v10;
    v11 = *a3;
    if (*a3)
      *(_DWORD *)v11 += 2;
    v31 = v11;
    if ((_DWORD)v7 == *((_DWORD *)this + 6))
    {
      v12 = (uint64_t *)WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v6, v7 + 1, (unint64_t)&v30);
      v13 = *((unsigned int *)this + 7);
      v14 = (_QWORD *)(*((_QWORD *)this + 2) + 16 * v13);
      v15 = *v12;
      *v12 = 0;
      *v14 = v15;
      v16 = v12[1];
      v12[1] = 0;
      v14[1] = v16;
      v17 = v31;
      *((_DWORD *)this + 7) = v13 + 1;
      v31 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
    else
    {
      v26 = *((_QWORD *)this + 2);
      v30 = 0;
      v27 = (WTF::StringImpl **)(v26 + 16 * v7);
      *v27 = v10;
      v27[1] = v11;
      *((_DWORD *)this + 7) = v7 + 1;
      v31 = 0;
    }
    result = v30;
    v30 = 0;
    if (!result)
      return result;
LABEL_14:
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    *(_DWORD *)result -= 2;
    return result;
  }
  v8 = 0;
  v9 = 0;
  while ((WTF::equalIgnoringASCIICase(*(WTF **)(*v6 + v8), *a2, (const WTF::StringImpl *)a3) & 1) == 0)
  {
    ++v9;
    v7 = *((unsigned int *)this + 7);
    v8 += 16;
    if (v9 >= v7)
      goto LABEL_5;
  }
  if (v9 >= *((unsigned int *)this + 7))
  {
    __break(0xC471u);
    goto LABEL_42;
  }
  v19 = *(WTF::StringImpl **)(*v6 + v8 + 8);
  if (v19)
    *(_DWORD *)v19 += 2;
  v29 = v19;
  v20 = *a3;
  if (*a3)
    *(_DWORD *)v20 += 2;
  v28 = v20;
  WTF::makeString<WTF::String,WTF::ASCIILiteral,WTF::String>((uint64_t *)&v29, (int8x16_t *)", ", 3, (uint64_t *)&v28, &v30);
  if (v9 >= *((unsigned int *)this + 7))
  {
    __break(0xC471u);
LABEL_42:
    JUMPOUT(0x1962EFF50);
  }
  v21 = *v6 + v8;
  v22 = v30;
  v30 = 0;
  v23 = *(WTF::StringImpl **)(v21 + 8);
  *(_QWORD *)(v21 + 8) = v22;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = v30;
  v30 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = v28;
  v28 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v25 -= 2;
  }
  result = v29;
  v29 = 0;
  if (result)
    goto LABEL_14;
  return result;
}

uint64_t WebCore::HTTPHeaderMap::addIfNotPresent(unsigned int *a1, int a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  unsigned __int16 *v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  __int16 v17;
  WTF::StringImpl *v18;

  v4 = a1[3];
  if ((_DWORD)v4)
  {
    v5 = *(unsigned __int16 **)a1;
    v6 = a1[3];
    while (1)
    {
      v7 = *v5;
      v5 += 8;
      if (v7 == a2)
        return 0;
      if (!--v6)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v17 = a2;
    v8 = *a3;
    if (*a3)
      *(_DWORD *)v8 += 2;
    v18 = v8;
    if ((_DWORD)v4 == a1[2])
    {
      v11 = WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v4 + 1, (unint64_t)&v17);
      v13 = a1[3];
      v14 = *(_QWORD *)a1 + 16 * v13;
      *(_WORD *)v14 = *(_WORD *)v11;
      v15 = *(_QWORD *)(v11 + 8);
      *(_QWORD *)(v11 + 8) = 0;
      *(_QWORD *)(v14 + 8) = v15;
      v16 = v18;
      a1[3] = v13 + 1;
      v18 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v12);
        else
          *(_DWORD *)v16 -= 2;
      }
    }
    else
    {
      v9 = *(_QWORD *)a1 + 16 * v4;
      *(_WORD *)v9 = a2;
      *(_QWORD *)(v9 + 8) = v8;
      a1[3] = v4 + 1;
    }
    return 1;
  }
}

BOOL WebCore::HTTPHeaderMap::contains(unsigned __int16 **a1, int a2)
{
  uint64_t v2;
  unsigned __int16 *v3;
  uint64_t v4;
  int v5;
  _BOOL8 result;

  v2 = *((unsigned int *)a1 + 3);
  if (!(_DWORD)v2)
    return 0;
  v3 = *a1;
  v4 = v2 - 1;
  do
  {
    v5 = *v3;
    v3 += 8;
    result = v5 == a2;
  }
  while (v5 != a2 && v4-- != 0);
  return result;
}

uint64_t WebCore::HTTPHeaderMap::contains(WebCore::HTTPHeaderMap *this, const WTF::StringImpl **a2)
{
  const WTF::StringImpl *v4;
  WebCore::HTTPHeaderNamesHash *v5;
  unint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  unsigned __int16 *v9;
  uint64_t v10;
  int v11;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  unsigned __int16 v16;

  v4 = *a2;
  if (*a2)
  {
    v5 = (WebCore::HTTPHeaderNamesHash *)*((_QWORD *)v4 + 1);
    v6 = *((unsigned int *)v4 + 1) | ((unint64_t)((*((_DWORD *)v4 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v5 = 0;
    v6 = 0x100000000;
  }
  v16 = 0;
  if (!WebCore::findHTTPHeaderName(v5, (char *)v6, &v16))
  {
    if (*((_DWORD *)this + 7))
    {
      v14 = 0;
      v15 = 0;
      do
      {
        result = WTF::equalIgnoringASCIICase(*(WTF **)(*((_QWORD *)this + 2) + v14), *a2, v7);
        if ((result & 1) != 0)
          break;
        ++v15;
        v14 += 16;
      }
      while (v15 < *((unsigned int *)this + 7));
      return result;
    }
    return 0;
  }
  v8 = *((unsigned int *)this + 3);
  if (!(_DWORD)v8)
    return 0;
  v9 = *(unsigned __int16 **)this;
  v10 = v8 - 1;
  do
  {
    v11 = *v9;
    v9 += 8;
    result = v11 == v16;
  }
  while (v11 != v16 && v10-- != 0);
  return result;
}

BOOL WebCore::HTTPHeaderMap::remove(WebCore::HTTPHeaderMap *this, const WTF::StringImpl **a2)
{
  const WTF::StringImpl *v4;
  WebCore::HTTPHeaderNamesHash *v5;
  unint64_t v6;
  WTF::StringImpl *v7;
  const WTF::StringImpl *v8;
  unint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  unint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  unsigned __int16 *v22;
  int v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 v28;

  v4 = *a2;
  if (*a2)
  {
    v5 = (WebCore::HTTPHeaderNamesHash *)*((_QWORD *)v4 + 1);
    v6 = *((unsigned int *)v4 + 1) | ((unint64_t)((*((_DWORD *)v4 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v5 = 0;
    v6 = 0x100000000;
  }
  v28 = 0;
  if (WebCore::findHTTPHeaderName(v5, (char *)v6, &v28))
  {
    v10 = (_DWORD *)((char *)this + 12);
    v9 = *((unsigned int *)this + 3);
    if (*((_DWORD *)this + 3))
    {
      v11 = *(_QWORD *)this;
      if (**(unsigned __int16 **)this == v28)
      {
        v12 = 0;
        v13 = 1;
LABEL_25:
        v24 = v11 + 16 * v12;
        v25 = *(WTF::StringImpl **)(v24 + 8);
        *(_QWORD *)(v24 + 8) = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
          {
            WTF::StringImpl::destroy(v25, v7);
            v9 = *v10;
          }
          else
          {
            *(_DWORD *)v25 -= 2;
          }
        }
        v26 = v24 + 16;
        v27 = *(_QWORD *)this + 16 * v9;
        while (v26 != v27)
        {
          *(_WORD *)(v26 - 16) = *(_WORD *)v26;
          *(_QWORD *)(v26 - 8) = *(_QWORD *)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          v26 += 16;
        }
LABEL_19:
        *v10 = v9 - 1;
        return v13;
      }
      v12 = 0;
      v22 = (unsigned __int16 *)(v11 + 16);
      while (v9 - 1 != v12)
      {
        v23 = *v22;
        v22 += 8;
        ++v12;
        if (v23 == v28)
        {
          v13 = v12 < v9;
          goto LABEL_25;
        }
      }
    }
  }
  else
  {
    v10 = (_DWORD *)((char *)this + 28);
    if (*((_DWORD *)this + 7))
    {
      v14 = 0;
      v15 = 0;
      while (!WTF::equalIgnoringASCIICase(*(WTF **)(*((_QWORD *)this + 2) + v14), *a2, v8))
      {
        ++v15;
        v14 += 16;
        if (v15 >= *v10)
          return 0;
      }
      v17 = *((_QWORD *)this + 2);
      v18 = (WTF::StringImpl **)(v17 + v14);
      v19 = *(WTF::StringImpl **)(v17 + v14 + 8);
      *(_QWORD *)(v17 + v14 + 8) = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v16);
        else
          *(_DWORD *)v19 -= 2;
      }
      v20 = *v18;
      *v18 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v16);
        else
          *(_DWORD *)v20 -= 2;
      }
      WTF::VectorMover<false,WebCore::HTTPHeaderMap::UncommonHeader>::moveOverlapping((WTF::StringImpl *)(v17 + v14 + 16), (WTF::StringImpl *)(*((_QWORD *)this + 2) + 16 * *((unsigned int *)this + 7)), (WTF::StringImpl *)(v17 + v14));
      LODWORD(v9) = *((_DWORD *)this + 7);
      v13 = 1;
      goto LABEL_19;
    }
  }
  return 0;
}

BOOL WebCore::HTTPHeaderMap::remove(unsigned __int16 **a1, WTF::StringImpl *a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  _BOOL8 v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  int v12;

  v2 = *((unsigned int *)a1 + 3);
  if (!(_DWORD)v2)
    return 0;
  v4 = (uint64_t)*a1;
  if (**a1 != (_DWORD)a2)
  {
    v5 = 0;
    v11 = (unsigned __int16 *)(v4 + 16);
    while (v2 - 1 != v5)
    {
      v12 = *v11;
      v11 += 8;
      ++v5;
      if (v12 == (_DWORD)a2)
      {
        v6 = v5 < v2;
        goto LABEL_4;
      }
    }
    return 0;
  }
  v5 = 0;
  v6 = 1;
LABEL_4:
  v7 = v4 + 16 * v5;
  v8 = *(WTF::StringImpl **)(v7 + 8);
  *(_QWORD *)(v7 + 8) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::destroy(v8, a2);
      v2 = *((unsigned int *)a1 + 3);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
  v9 = v7 + 16;
  v10 = (uint64_t)&(*a1)[8 * v2];
  while (v9 != v10)
  {
    *(_WORD *)(v9 - 16) = *(_WORD *)v9;
    *(_QWORD *)(v9 - 8) = *(_QWORD *)(v9 + 8);
    *(_QWORD *)(v9 + 8) = 0;
    v9 += 16;
  }
  *((_DWORD *)a1 + 3) = v2 - 1;
  return v6;
}

uint64_t *WebCore::HTTPHeaderValues::textPlainContentType(WebCore::HTTPHeaderValues *this)
{
  if ((_MergedGlobals_245 & 1) == 0)
  {
    WebCore::HTTPHeaderValues::textPlainContentType(void)::$_0::operator() const(void)::impl += 2;
    qword_1ECE841B8 = (uint64_t)&WebCore::HTTPHeaderValues::textPlainContentType(void)::$_0::operator() const(void)::impl;
    _MergedGlobals_245 = 1;
  }
  return &qword_1ECE841B8;
}

_QWORD *WebCore::HTTPHeaderValues::applicationJSONContentType(WebCore::HTTPHeaderValues *this)
{
  if ((byte_1ECE841B1 & 1) == 0)
  {
    WebCore::HTTPHeaderValues::applicationJSONContentType(void)::$_0::operator() const(void)::impl += 2;
    qword_1ECE841C0 = &WebCore::HTTPHeaderValues::applicationJSONContentType(void)::$_0::operator() const(void)::impl;
    byte_1ECE841B1 = 1;
  }
  return &qword_1ECE841C0;
}

uint64_t *WebCore::HTTPHeaderValues::noCache(WebCore::HTTPHeaderValues *this)
{
  {
    WebCore::HTTPHeaderValues::noCache(void)::$_0::operator() const(void)::impl += 2;
    WebCore::HTTPHeaderValues::noCache(void)::value = (uint64_t)&WebCore::HTTPHeaderValues::noCache(void)::$_0::operator() const(void)::impl;
  }
  return &WebCore::HTTPHeaderValues::noCache(void)::value;
}

uint64_t *WebCore::HTTPHeaderValues::maxAge0(WebCore::HTTPHeaderValues *this)
{
  {
    WebCore::HTTPHeaderValues::maxAge0(void)::$_0::operator() const(void)::impl += 2;
    WebCore::HTTPHeaderValues::maxAge0(void)::value = (uint64_t)&WebCore::HTTPHeaderValues::maxAge0(void)::$_0::operator() const(void)::impl;
  }
  return &WebCore::HTTPHeaderValues::maxAge0(void)::value;
}

uint64_t WebCore::isValidHTTPHeaderValue(WebCore *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  int v13;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 1;
  v3 = *(unsigned int *)(v2 + 4);
  if (!(_DWORD)v3)
    return 1;
  v4 = *(_DWORD *)(v2 + 16);
  v5 = *(unsigned __int8 **)(v2 + 8);
  if ((v4 & 4) != 0)
    v6 = *v5;
  else
    v6 = *(unsigned __int16 *)v5;
  result = 0;
  if (v6 != 9 && v6 != 32)
  {
    v8 = (v3 - 1);
    v9 = (v4 & 4) != 0 ? v5[v8] : *(unsigned __int16 *)&v5[2 * v8];
    result = 0;
    if (v9 != 9 && v9 != 32)
    {
      v10 = 0;
      result = 1;
      while (v3 != v10)
      {
        v11 = (v4 & 4) != 0 ? v5[v10] : *(unsigned __int16 *)&v5[2 * v10];
        v12 = v11 > 0xD;
        v13 = (1 << v11) & 0x2401;
        if (!v12 && v13 != 0)
          break;
        if (v3 == ++v10)
          return result;
      }
      return 0;
    }
  }
  return result;
}

const char *WebCore::filenameFromHTTPContentDisposition(uint64_t a1, uint64_t a2)
{
  const char *result;
  int v3;
  unsigned int v4;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int16x8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  int16x8_t *v25;
  int v26;
  unint64_t v27;
  int v28;
  unsigned __int8 *v30;
  int16x8_t *v31;
  int16x8_t v32;
  int8x16_t v33;
  int16x8_t *v34;
  char *v35;
  int16x8_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  int16x8_t *i;
  int v49;
  unint64_t v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  int16x8_t **v57;
  unsigned int v58;
  unsigned int v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  __int16 v63;
  char v64;

  v61 = a1;
  v62 = a2;
  v63 = 59;
  v64 = 0;
  v57 = (int16x8_t **)&v61;
  v58 = 0;
  v60 = (_DWORD)a2 == 0;
  result = (const char *)WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v57);
  v3 = v62;
  v4 = v58;
  if (v58 == (_DWORD)v62 && v60)
    return 0;
  while (1)
  {
    v6 = *((unsigned int *)v57 + 2);
    if (v6 <= v4)
      goto LABEL_74;
    v7 = v59;
    if (v6 - v4 <= v59)
    {
      if (!v4)
      {
        v11 = *v57;
        v9 = (uint64_t)v57[1];
        goto LABEL_15;
      }
      v7 = v6 - v4;
    }
    v8 = v4;
    v9 = v7;
    v10 = v6 - v4;
    if (*((_BYTE *)v57 + 12))
    {
      if (v10 < v7)
        goto LABEL_165;
      v11 = (int16x8_t *)((char *)*v57 + v8);
      v9 = v7 | 0x100000000;
    }
    else
    {
      if (v10 < v7)
        goto LABEL_165;
      v11 = (int16x8_t *)((char *)*v57 + 2 * v8);
    }
LABEL_15:
    v12 = v9 & 0xFF00000000;
    if ((v9 & 0xFF00000000) != 0)
    {
      if ((_DWORD)v9)
      {
        if ((v9 & 0xFFFFFFF0) != 0)
          v13 = 16;
        else
          v13 = v9;
        v14 = v13;
        result = (const char *)v11;
        do
        {
          if (*result == 61)
            goto LABEL_25;
          ++result;
          --v14;
        }
        while (v14);
        if (v9 >= 0x11uLL)
        {
          result = (const char *)memchr(&v11->i8[v13], 61, v9 - v13);
          if (result)
          {
LABEL_25:
            v15 = result - (const char *)v11;
            goto LABEL_26;
          }
        }
      }
      goto LABEL_74;
    }
    if ((_DWORD)v9)
      break;
LABEL_74:
    result = (const char *)WTF::StringView::SplitResult::Iterator::operator++();
    v4 = v58;
    if (v58 == v3 && v60)
      return 0;
  }
  v30 = (unsigned __int8 *)v11 + 2 * v9;
  if (v9 > 0x1FuLL)
  {
    v31 = v11;
    do
    {
      v32.i64[0] = 0x3D003D003D003DLL;
      v32.i64[1] = 0x3D003D003D003DLL;
      v33 = (int8x16_t)vceqq_s16(*v31, v32);
      v32.i16[0] = vmaxvq_u16((uint16x8_t)v33);
      if (v32.i32[0])
        goto LABEL_98;
      v34 = v31 + 1;
      v35 = &v31[1].i8[14];
      ++v31;
    }
    while (v35 < (char *)v30);
    if (v34 < (int16x8_t *)v30)
    {
      v36.i64[0] = 0x3D003D003D003DLL;
      v36.i64[1] = 0x3D003D003D003DLL;
      v33 = (int8x16_t)vceqq_s16(*((int16x8_t *)v30 - 1), v36);
      v36.i16[0] = vmaxvq_u16((uint16x8_t)v33);
      if (v36.i32[0])
      {
        v31 = (int16x8_t *)(v30 - 16);
LABEL_98:
        v37 = &v31->i8[2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v33))];
        goto LABEL_99;
      }
    }
    goto LABEL_74;
  }
  v38 = 2 * v9;
  v37 = (char *)v11;
  while (*(_WORD *)v37 != 61)
  {
    v37 += 2;
    v38 -= 2;
    if (!v38)
      goto LABEL_74;
  }
LABEL_99:
  if (v37 == (char *)v30)
    goto LABEL_74;
  v15 = (v37 - (char *)v11) >> 1;
LABEL_26:
  if (v15 == -1 || !(_DWORD)v9)
    goto LABEL_74;
  v16 = v15;
  if (v12)
    v16 = v15 | 0x100000000;
  if (v9 <= v15)
    v16 = v9;
  v17 = v16;
  if ((v16 & 0xFF00000000) != 0)
  {
    if (!(_DWORD)v16)
      goto LABEL_34;
    v19 = 0;
    while (1)
    {
      v20 = v11->u8[v19];
      if ((v20 - 9) >= 5 && v20 != 32)
        break;
      if (v16 == ++v19)
        goto LABEL_74;
    }
    if ((_DWORD)v16 != 1)
    {
      v21 = (v16 - 1);
      while (v21 < v16)
      {
        v22 = v11->u8[v21];
        if ((v22 - 9) < 5 || v22 == 32)
        {
          if ((_DWORD)--v21)
            continue;
        }
        if (!(_DWORD)v19)
        {
          v18 = (unsigned __int8 *)v11;
          if ((_DWORD)v21 == (_DWORD)v16 - 1)
            goto LABEL_64;
        }
        goto LABEL_48;
      }
      goto LABEL_165;
    }
    v18 = (unsigned __int8 *)v11;
    if ((_DWORD)v19)
    {
      LODWORD(v21) = 0;
LABEL_48:
      v23 = (v21 - v19 + 1);
      if (v17 - v19 < v23)
        goto LABEL_165;
      v18 = &v11->u8[v19];
      v16 = v23 | 0x100000000;
    }
  }
  else if ((_DWORD)v16)
  {
    v24 = 0;
    v25 = v11;
    while (1)
    {
      v26 = v25->u16[0];
      if ((v26 - 9) >= 5 && v26 != 32)
        break;
      ++v24;
      v25 = (int16x8_t *)((char *)v25 + 2);
      if (v16 == v24)
        goto LABEL_74;
    }
    if ((_DWORD)v16 != 1)
    {
      v27 = (v16 - 1);
      while (v27 < v16)
      {
        v28 = v11->u16[v27];
        if ((v28 - 9) < 5 || v28 == 32)
        {
          if ((_DWORD)--v27)
            continue;
        }
        if ((_DWORD)v24)
          goto LABEL_88;
        v18 = (unsigned __int8 *)v11;
        if ((_DWORD)v27 != (_DWORD)v16 - 1)
          goto LABEL_88;
        goto LABEL_64;
      }
      goto LABEL_165;
    }
    v18 = (unsigned __int8 *)v11;
    if ((_DWORD)v24)
    {
      LODWORD(v27) = 0;
LABEL_88:
      v16 = (v27 - v24 + 1);
      v18 = (unsigned __int8 *)v25;
      if (v17 - v24 < v16)
        goto LABEL_165;
    }
  }
  else
  {
LABEL_34:
    v18 = (unsigned __int8 *)v11;
  }
LABEL_64:
  if (!(_DWORD)v16)
    goto LABEL_74;
  if (v18 != "filename" && v16 == 8)
  {
    if ((v16 & 0xFF00000000) != 0)
    {
      if (*v18 == 102 && *(_DWORD *)(v18 + 1) == 1852140649 && *((_DWORD *)v18 + 1) == 1701667182)
        goto LABEL_107;
    }
    else if (*(_WORD *)v18 == 102
           && *(_QWORD *)(v18 + 2) == 0x6E0065006C0069
           && *((_QWORD *)v18 + 1) == 0x65006D0061006ELL)
    {
      goto LABEL_107;
    }
    goto LABEL_74;
  }
  if (v18 != "filename" || v16 != 8)
    goto LABEL_74;
LABEL_107:
  v39 = (v15 + 1);
  v40 = (v9 - v39);
  if (v9 <= v39)
    return "";
  if (!(_DWORD)v39)
  {
    v40 = v9;
    goto LABEL_110;
  }
  v56 = v9 - (unint64_t)v39;
  if (v12)
  {
    if (v56 >= v40)
    {
      v11 = (int16x8_t *)((char *)v11 + v39);
      v40 |= 0x100000000uLL;
      goto LABEL_110;
    }
    goto LABEL_165;
  }
  if (v56 < v40)
    goto LABEL_165;
  v11 = (int16x8_t *)((char *)v11 + 2 * v39);
LABEL_110:
  v41 = v40;
  if ((v40 & 0xFF00000000) != 0)
  {
    if ((_DWORD)v40)
    {
      v42 = 0;
      while (1)
      {
        v43 = v11->u8[v42];
        if ((v43 - 9) >= 5 && v43 != 32)
          break;
        if (v40 == ++v42)
          return "";
      }
      if ((_DWORD)v40 != 1)
      {
        v44 = (v40 - 1);
        while (v44 < v40)
        {
          v45 = v11->u8[v44];
          if ((v45 - 9) < 5 || v45 == 32)
          {
            if ((_DWORD)--v44)
              continue;
          }
          if (!(_DWORD)v42 && (_DWORD)v44 == (_DWORD)v40 - 1)
            goto LABEL_141;
          goto LABEL_125;
        }
        goto LABEL_165;
      }
      if ((_DWORD)v42)
      {
        LODWORD(v44) = 0;
LABEL_125:
        v46 = (v44 - v42 + 1);
        if (v41 - v42 < v46)
          goto LABEL_165;
        v11 = (int16x8_t *)((char *)v11 + v42);
        v40 = v46 | 0x100000000;
      }
    }
  }
  else if ((_DWORD)v40)
  {
    v47 = 0;
    for (i = v11; ; i = (int16x8_t *)((char *)i + 2))
    {
      v49 = i->u16[0];
      if ((v49 - 9) >= 5 && v49 != 32)
        break;
      if (v40 == ++v47)
        return "";
    }
    if ((_DWORD)v40 != 1)
    {
      v50 = (v40 - 1);
      while (v50 < v40)
      {
        v51 = v11->u16[v50];
        if ((v51 - 9) < 5 || v51 == 32)
        {
          if ((_DWORD)--v50)
            continue;
        }
        if ((_DWORD)v47 || (_DWORD)v50 != (_DWORD)v40 - 1)
          goto LABEL_164;
        goto LABEL_141;
      }
      goto LABEL_165;
    }
    if ((_DWORD)v47)
    {
      LODWORD(v50) = 0;
LABEL_164:
      v40 = (v50 - v47 + 1);
      v11 = i;
      if (v41 - v47 < v40)
      {
LABEL_165:
        __break(1u);
        return result;
      }
    }
  }
LABEL_141:
  LODWORD(v52) = v40 - 2;
  if (v40 >= 2)
  {
    v53 = v40 & 0xFF00000000;
    v54 = (v40 & 0xFF00000000) != 0 ? v11->u8[0] : v11->u16[0];
    if (v54 == 34)
    {
      if ((int)v40 - 1 >= v52)
        v52 = v52;
      else
        v52 = (v40 - 1);
      v55 = v40 - 1;
      if (v53)
      {
        if (v55 >= v52)
          return (char *)v11 + 1;
      }
      else if (v55 >= v52)
      {
        return (char *)v11 + 2;
      }
      goto LABEL_165;
    }
  }
  return (const char *)v11;
}

const char *WebCore::extractCharsetFromMediaType(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unint64_t v3;
  uint64_t IgnoringASCIICase;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;

  v2 = a2;
  if (!(_DWORD)a2)
    return "";
  v3 = a2;
  do
  {
    IgnoringASCIICase = WTF::StringView::findIgnoringASCIICase();
    if ((unint64_t)(IgnoringASCIICase + 1) < 2)
      break;
    v9 = IgnoringASCIICase - 1;
    LODWORD(v7) = a2;
    if (BYTE4(a2))
    {
      if (a2 <= v9)
        goto LABEL_62;
      v10 = a1;
      v11 = *(unsigned __int8 *)(a1 + v9);
      if (v11 < 0x21)
      {
        v5 = IgnoringASCIICase + 7;
        if (IgnoringASCIICase + 7 < v3)
          goto LABEL_26;
        break;
      }
    }
    else
    {
      if (a2 <= v9)
        goto LABEL_62;
      v10 = a1;
      v11 = *(unsigned __int16 *)(a1 + 2 * v9);
      if (v11 <= 0x20)
      {
        v5 = IgnoringASCIICase + 7;
        if (IgnoringASCIICase + 7 >= v3)
          break;
        while (1)
        {
LABEL_31:
          if (a2 <= v5)
            goto LABEL_62;
          v12 = *(unsigned __int16 *)(v10 + 2 * v5);
          if (v12 > 0x20)
            break;
          if (v3 == ++v5)
          {
LABEL_34:
            LODWORD(v5) = 0;
            v6 = 0;
            goto LABEL_7;
          }
        }
LABEL_35:
        ++v5;
        if (v12 == 61)
        {
          if (v5 < v3)
          {
            do
            {
              if (BYTE4(a2))
              {
                if (a2 <= v5)
                  goto LABEL_62;
                v13 = *(unsigned __int8 *)(v10 + v5);
              }
              else
              {
                if (a2 <= v5)
                  goto LABEL_62;
                v13 = *(unsigned __int16 *)(v10 + 2 * v5);
              }
              if (v13 >= 0x21 && v13 != 34 && v13 != 39)
                goto LABEL_49;
              ++v5;
            }
            while (v3 != v5);
            LODWORD(v5) = v2;
          }
LABEL_49:
          LODWORD(v14) = v5;
          if (v2 <= v5)
            goto LABEL_64;
          v14 = v5;
          while (1)
          {
            if (BYTE4(a2))
            {
              if (v14 >= a2)
                goto LABEL_62;
              v15 = *(unsigned __int8 *)(v10 + v14);
            }
            else
            {
              if (v14 >= a2)
                goto LABEL_62;
              v15 = *(unsigned __int16 *)(v10 + 2 * v14);
            }
            if (v15 <= 0x20 || v15 == 34 || v15 == 39 || v15 == 59)
              goto LABEL_64;
            if (v2 == (_DWORD)++v14)
              goto LABEL_63;
          }
        }
        continue;
      }
    }
    v5 = IgnoringASCIICase + 7;
    if (v11 == 59)
    {
      if (v5 >= v3)
        break;
      if (!BYTE4(a2))
        goto LABEL_31;
      while (1)
      {
LABEL_26:
        if (a2 <= v5)
          goto LABEL_62;
        v12 = *(unsigned __int8 *)(v10 + v5);
        if (v12 > 0x20)
          goto LABEL_35;
        if (v3 == ++v5)
          goto LABEL_34;
      }
    }
  }
  while (v5 < v3);
  v6 = 0;
  LODWORD(v5) = 0;
  LODWORD(v7) = a2;
  while (v7 > v5)
  {
    if ((int)v7 - (int)v5 <= v6)
    {
      if (!(_DWORD)v5)
        return (const char *)a1;
      v6 = v7 - v5;
    }
LABEL_7:
    v7 = v7 - (unint64_t)v5;
    if (BYTE4(a2))
    {
      if (v7 >= v6)
        return (const char *)(a1 + v5);
    }
    else if (v7 >= v6)
    {
      return (const char *)(a1 + 2 * v5);
    }
LABEL_62:
    __break(1u);
LABEL_63:
    LODWORD(v14) = v2;
LABEL_64:
    v6 = v14 - v5;
  }
  return "";
}

uint64_t WebCore::parseXFrameOptionsHeader(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  int v4;
  BOOL v5;
  int v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  int v21;
  unint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  char v36;

  if ((_DWORD)a2)
  {
    v33 = a1;
    v34 = a2;
    v35 = 44;
    v36 = 1;
    v29 = &v33;
    v30 = 0;
    v32 = 0;
    WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v29);
    v2 = v34;
    v3 = v30;
    v4 = v32;
    v5 = v30 == (_DWORD)v34;
    v6 = 0;
    while (1)
    {
      if (v5 && v4 != 0)
        return v6;
      v8 = *((unsigned int *)v29 + 2);
      if (v8 <= v3)
      {
LABEL_51:
        v24 = 4;
        goto LABEL_52;
      }
      LODWORD(v9) = v31;
      if (v8 - v3 <= v31)
      {
        if (!v3)
        {
          v12 = *v29;
          v9 = v29[1];
          goto LABEL_17;
        }
        LODWORD(v9) = v8 - v3;
      }
      v10 = v3;
      v9 = v9;
      v11 = v8 - v3;
      if (*((_BYTE *)v29 + 12))
      {
        if (v11 < v9)
          goto LABEL_116;
        v12 = *v29 + v10;
        v9 = v9 | 0x100000000;
      }
      else
      {
        if (v11 < v9)
          goto LABEL_116;
        v12 = *v29 + 2 * v10;
      }
LABEL_17:
      v13 = v9;
      if ((v9 & 0xFF00000000) != 0)
      {
        if ((_DWORD)v9)
        {
          v14 = 0;
          while (1)
          {
            v15 = *(unsigned __int8 *)(v12 + v14);
            if ((v15 - 9) >= 5 && v15 != 32)
              break;
            if (v9 == ++v14)
              goto LABEL_51;
          }
          if ((_DWORD)v9 != 1)
          {
            v16 = (v9 - 1);
            while (v16 < v9)
            {
              v17 = *(unsigned __int8 *)(v12 + v16);
              if ((v17 - 9) < 5 || v17 == 32)
              {
                if ((_DWORD)--v16)
                  continue;
              }
              if (!(_DWORD)v14 && (_DWORD)v16 == (_DWORD)v9 - 1)
                goto LABEL_48;
              goto LABEL_32;
            }
LABEL_116:
            __break(1u);
            break;
          }
          if ((_DWORD)v14)
          {
            LODWORD(v16) = 0;
LABEL_32:
            v18 = (v16 - v14 + 1);
            if (v13 - v14 < v18)
              goto LABEL_116;
            v12 += v14;
            v9 = v18 | 0x100000000;
          }
        }
      }
      else if ((_DWORD)v9)
      {
        v19 = 0;
        v20 = (unsigned __int16 *)v12;
        while (1)
        {
          v21 = *v20;
          if ((v21 - 9) >= 5 && v21 != 32)
            break;
          ++v19;
          ++v20;
          if (v9 == v19)
            goto LABEL_51;
        }
        if ((_DWORD)v9 != 1)
        {
          v22 = (v9 - 1);
          while (v22 < v9)
          {
            v23 = *(unsigned __int16 *)(v12 + 2 * v22);
            if ((v23 - 9) < 5 || v23 == 32)
            {
              if ((_DWORD)--v22)
                continue;
            }
            if ((_DWORD)v19 || (_DWORD)v22 != (_DWORD)v9 - 1)
              goto LABEL_115;
            goto LABEL_48;
          }
          goto LABEL_116;
        }
        if ((_DWORD)v19)
        {
          LODWORD(v22) = 0;
LABEL_115:
          v9 = (v22 - v19 + 1);
          v12 = (uint64_t)v20;
          if (v13 - v19 < v9)
            goto LABEL_116;
        }
      }
LABEL_48:
      switch((_DWORD)v9)
      {
        case 4:
          if ((v9 & 0xFF00000000) != 0)
          {
            if ((*(_BYTE *)v12 & 0xDF) != 0x44
              || (*(_BYTE *)(v12 + 1) & 0xDF) != 0x45
              || (*(_BYTE *)(v12 + 2) & 0xDF) != 0x4E)
            {
              goto LABEL_51;
            }
            v25 = *(unsigned __int8 *)(v12 + 3);
          }
          else
          {
            if ((*(_WORD *)v12 & 0xFFDF) != 0x44
              || (*(_WORD *)(v12 + 2) & 0xFFDF) != 0x45
              || (*(_WORD *)(v12 + 4) & 0xFFDF) != 0x4E)
            {
              goto LABEL_51;
            }
            v25 = *(unsigned __int16 *)(v12 + 6);
          }
          if ((v25 & 0xFFFFFFDF) != 0x59)
            goto LABEL_51;
          v24 = 1;
          break;
        case 0xA:
          if ((v9 & 0xFF00000000) != 0)
          {
            if ((*(_BYTE *)v12 & 0xDF) != 0x53
              || (*(_BYTE *)(v12 + 1) & 0xDF) != 0x41
              || (*(_BYTE *)(v12 + 2) & 0xDF) != 0x4D
              || (*(_BYTE *)(v12 + 3) & 0xDF) != 0x45
              || (*(_BYTE *)(v12 + 4) & 0xDF) != 0x4F
              || (*(_BYTE *)(v12 + 5) & 0xDF) != 0x52
              || (*(_BYTE *)(v12 + 6) & 0xDF) != 0x49
              || (*(_BYTE *)(v12 + 7) & 0xDF) != 0x47
              || (*(_BYTE *)(v12 + 8) & 0xDF) != 0x49)
            {
              goto LABEL_51;
            }
            v26 = *(unsigned __int8 *)(v12 + 9);
          }
          else
          {
            if ((*(_WORD *)v12 & 0xFFDF) != 0x53
              || (*(_WORD *)(v12 + 2) & 0xFFDF) != 0x41
              || (*(_WORD *)(v12 + 4) & 0xFFDF) != 0x4D
              || (*(_WORD *)(v12 + 6) & 0xFFDF) != 0x45
              || (*(_WORD *)(v12 + 8) & 0xFFDF) != 0x4F
              || (*(_WORD *)(v12 + 10) & 0xFFDF) != 0x52
              || (*(_WORD *)(v12 + 12) & 0xFFDF) != 0x49
              || (*(_WORD *)(v12 + 14) & 0xFFDF) != 0x47
              || (*(_WORD *)(v12 + 16) & 0xFFDF) != 0x49)
            {
              goto LABEL_51;
            }
            v26 = *(unsigned __int16 *)(v12 + 18);
          }
          if ((v26 & 0xFFFFFFDF) != 0x4E)
            goto LABEL_51;
          v24 = 2;
          break;
        case 8:
          if ((v9 & 0xFF00000000) != 0)
          {
            if ((*(_BYTE *)v12 & 0xDF) != 0x41
              || (*(_BYTE *)(v12 + 1) & 0xDF) != 0x4C
              || (*(_BYTE *)(v12 + 2) & 0xDF) != 0x4C
              || (*(_BYTE *)(v12 + 3) & 0xDF) != 0x4F
              || (*(_BYTE *)(v12 + 4) & 0xDF) != 0x57
              || (*(_BYTE *)(v12 + 5) & 0xDF) != 0x41
              || (*(_BYTE *)(v12 + 6) & 0xDF) != 0x4C)
            {
              goto LABEL_51;
            }
            v27 = *(unsigned __int8 *)(v12 + 7);
          }
          else
          {
            if ((*(_WORD *)v12 & 0xFFDF) != 0x41
              || (*(_WORD *)(v12 + 2) & 0xFFDF) != 0x4C
              || (*(_WORD *)(v12 + 4) & 0xFFDF) != 0x4C
              || (*(_WORD *)(v12 + 6) & 0xFFDF) != 0x4F
              || (*(_WORD *)(v12 + 8) & 0xFFDF) != 0x57
              || (*(_WORD *)(v12 + 10) & 0xFFDF) != 0x41
              || (*(_WORD *)(v12 + 12) & 0xFFDF) != 0x4C)
            {
              goto LABEL_51;
            }
            v27 = *(unsigned __int16 *)(v12 + 14);
          }
          if ((v27 & 0xFFFFFFDF) != 0x4C)
            goto LABEL_51;
          v24 = 3;
          break;
        default:
          goto LABEL_51;
      }
LABEL_52:
      if (v6)
      {
        if (v6 != v24)
        {
          LOBYTE(v6) = 5;
          return v6;
        }
      }
      else
      {
        v6 = v24;
      }
      WTF::StringView::SplitResult::Iterator::operator++();
      v3 = v30;
      v4 = v32;
      v5 = v30 == v2;
    }
  }
  LOBYTE(v6) = 0;
  return v6;
}

uint64_t WebCore::parseRange(uint64_t result, unint64_t a2, int a3, int64_t *a4, int64_t *a5)
{
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  const char *v40;
  int64_t v41;
  char v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unsigned __int16 *v48;
  unint64_t v49;
  int v50;
  int v51;
  int16x8_t *v52;
  int16x8_t v53;
  int8x16_t v54;
  unint64_t v55;
  unint64_t v56;
  int16x8_t v57;
  int16x8_t *i;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;

  LODWORD(v7) = BYTE4(a2);
  *a5 = -1;
  *a4 = -1;
  v8 = a2;
  if (a3)
    goto LABEL_147;
  if (!BYTE4(a2))
    goto LABEL_125;
  if (!(_DWORD)a2)
  {
LABEL_147:
    while (1)
    {
LABEL_8:
      v13 = v8 - 5;
      if (v8 < 5)
        return 0;
      if ((a2 & 0xFF00000000) != 0)
      {
        if ((*(_BYTE *)result & 0xDF) != 0x42
          || (*(_BYTE *)(result + 1) & 0xDF) != 0x59
          || (*(_BYTE *)(result + 2) & 0xDF) != 0x54
          || (*(_BYTE *)(result + 3) & 0xDF) != 0x45)
        {
          return 0;
        }
        v14 = *(unsigned __int8 *)(result + 4);
      }
      else
      {
        if ((*(_WORD *)result & 0xFFDF) != 0x42
          || (*(_WORD *)(result + 2) & 0xFFDF) != 0x59
          || (*(_WORD *)(result + 4) & 0xFFDF) != 0x54
          || (*(_WORD *)(result + 6) & 0xFFDF) != 0x45)
        {
          return 0;
        }
        v14 = *(unsigned __int16 *)(result + 8);
      }
      if ((v14 & 0xFFFFFFDF) != 0x53)
        return 0;
      if (a2 < 6)
      {
        v15 = 0x100000000;
        v7 = (unint64_t)"";
      }
      else
      {
        v8 = (a2 - 5);
        if ((_DWORD)v7)
        {
          if (v13 < v8)
            goto LABEL_124;
          v7 = result + 5;
          v15 = v8 | 0x100000000;
          v16 = 0;
          while (1)
          {
            v17 = *(unsigned __int8 *)(v7 + v16);
            v18 = v17 > 0x20;
            v19 = (1 << v17) & 0x100002600;
            if (v18 || v19 == 0)
              break;
            if (v8 == ++v16)
              goto LABEL_33;
          }
          if ((_DWORD)a2 != 6)
          {
            v25 = (a2 - 6);
            while (v25 < v8)
            {
              v26 = *(unsigned __int8 *)(v7 + v25);
              v18 = v26 > 0x20;
              v27 = (1 << v26) & 0x100002600;
              if (!v18 && v27 != 0)
              {
                if ((_DWORD)--v25)
                  continue;
              }
              if (!(_DWORD)v16 && (_DWORD)v25 == (_DWORD)a2 - 6)
                goto LABEL_56;
              goto LABEL_44;
            }
            goto LABEL_124;
          }
          if ((_DWORD)v16)
          {
            LODWORD(v25) = 0;
LABEL_44:
            v29 = (v25 - v16 + 1);
            v8 -= v16;
            if (v8 < v29)
              goto LABEL_124;
            v7 += v16;
            v15 = v29 | 0x100000000;
          }
        }
        else
        {
          if (v13 < v8)
            goto LABEL_124;
          v7 = result + 10;
          v15 = (a2 - 5);
          v21 = 0;
          while (1)
          {
            v22 = *(unsigned __int16 *)(v7 + 2 * v21);
            v18 = v22 > 0x20;
            v23 = (1 << v22) & 0x100002600;
            if (v18 || v23 == 0)
              break;
            if (v8 == ++v21)
            {
LABEL_33:
              v15 = 0x100000000;
              v7 = (unint64_t)"";
              goto LABEL_56;
            }
          }
          if ((_DWORD)a2 != 6)
          {
            v30 = (a2 - 6);
            while (v30 < v8)
            {
              v31 = *(unsigned __int16 *)(v7 + 2 * v30);
              v18 = v31 > 0x20;
              v32 = (1 << v31) & 0x100002600;
              if (!v18 && v32 != 0)
              {
                if ((_DWORD)--v30)
                  continue;
              }
              if ((_DWORD)v21 || (_DWORD)v30 != (_DWORD)a2 - 6)
                goto LABEL_122;
              goto LABEL_56;
            }
            goto LABEL_124;
          }
          if ((_DWORD)v21)
          {
            LODWORD(v30) = 0;
LABEL_122:
            v15 = (v30 - v21 + 1);
            v8 -= v21;
            if (v8 < v15)
              goto LABEL_124;
            v7 += 2 * v21;
          }
        }
      }
LABEL_56:
      v59 = v7;
      v61 = v15;
      result = WTF::StringView::startsWith();
      if (!(_DWORD)result)
        return result;
      if (v61 < 2)
        return 0;
      v7 = v61 - 1;
      v35 = v7;
      if (BYTE4(v61))
      {
        if (v7 < v7)
          goto LABEL_124;
        v36 = v59 + 1;
        v35 = v7 | 0x100000000;
      }
      else
      {
        if (v7 < v7)
          goto LABEL_124;
        v36 = v59 + 2;
      }
      v60 = v36;
      LODWORD(v61) = v35;
      BYTE4(v61) = BYTE4(v35);
      if ((v35 & 0x100000000) != 0)
      {
        if (!(_DWORD)v35)
          return 0;
        v37 = 16;
        if ((v35 & 0xFFFFFFF0) == 0)
          v37 = v35;
        v8 = v37;
        result = v36;
        do
        {
          if (*(_BYTE *)result == 45)
            goto LABEL_72;
          ++result;
          --v8;
        }
        while (v8);
        if (v35 < 0x11)
          return 0;
        result = (uint64_t)memchr((void *)(v36 + v37), 45, v35 - v37);
        if (result)
        {
LABEL_72:
          LODWORD(v38) = result - v36;
          goto LABEL_73;
        }
        return result;
      }
      if (!(_DWORD)v35)
        return 0;
      v52 = (int16x8_t *)(v36 + 2 * v35);
      if (v35 > 0x1F)
      {
        v53.i64[0] = 0x2D002D002D002DLL;
        v53.i64[1] = 0x2D002D002D002DLL;
        v8 = v36;
        do
        {
          v54 = (int8x16_t)vceqq_s16(*(int16x8_t *)v8, v53);
          LOWORD(v34) = vmaxvq_u16((uint16x8_t)v54);
          if (v34)
            goto LABEL_139;
          v55 = v8 + 16;
          v56 = v8 + 30;
          v8 += 16;
        }
        while (v56 < (unint64_t)v52);
        if (v55 < (unint64_t)v52)
        {
          v57.i64[0] = 0x2D002D002D002DLL;
          v57.i64[1] = 0x2D002D002D002DLL;
          v54 = (int8x16_t)vceqq_s16(v52[-1], v57);
          v57.i16[0] = vmaxvq_u16((uint16x8_t)v54);
          if (v57.i32[0])
          {
            v8 = (unint64_t)&v52[-1];
LABEL_139:
            i = (int16x8_t *)(v8
                            + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v54)));
            goto LABEL_140;
          }
        }
        return 0;
      }
      v8 = 2 * v35;
      for (i = (int16x8_t *)v36; i->i16[0] != 45; i = (int16x8_t *)((char *)i + 2))
      {
        result = 0;
        v8 -= 2;
        if (!v8)
          return result;
      }
LABEL_140:
      if (i == v52)
        return 0;
      v38 = ((uint64_t)i->i64 - v36) >> 1;
LABEL_73:
      if ((_DWORD)v38 == -1)
        return 0;
      v7 = v35 & 0x100000000;
      if ((_DWORD)v38)
      {
        if (v7)
          v43 = v38 | 0x100000000;
        else
          v43 = v38;
        if (v35 <= v38)
          v43 = v61;
        if ((v43 & 0xFF00000000) != 0)
          result = WTF::parseInteger<long long,unsigned char>(v36, v43, 0xAu, 0);
        else
          result = WTF::parseInteger<long long,char16_t>(v36, v43, 0xAu, 0);
        v44 = result;
        if (!(_BYTE)a2)
          return 0;
        v45 = (v38 + 1);
        if (v35 <= v45)
          goto LABEL_102;
        v7 = (v35 - v45);
        v8 = v35 - (unint64_t)v45;
        if (BYTE4(v35))
        {
          if (v8 >= v7)
          {
            v46 = v60 + v45;
            v7 |= 0x100000000uLL;
            goto LABEL_99;
          }
        }
        else if (v8 >= v7)
        {
          v46 = v60 + 2 * v45;
LABEL_99:
          if ((_DWORD)v7)
          {
            if ((v7 & 0x100000000) != 0)
              v41 = WTF::parseInteger<long long,unsigned char>(v46, v7, 0xAu, 0);
            else
              v41 = WTF::parseInteger<long long,char16_t>(v46, v7, 0xAu, 0);
            if (!v47)
              return 0;
          }
          else
          {
LABEL_102:
            v41 = -1;
          }
          if (v44 < 0 || v41 != -1 && v41 < v44)
            return 0;
          *a4 = v44;
LABEL_90:
          *a5 = v41;
          return 1;
        }
      }
      else
      {
        if (v35 < 2)
        {
          a2 = 0;
          v40 = "";
          goto LABEL_79;
        }
        a2 = (v35 - 1);
        v39 = v35 - 1;
        if (v7)
        {
          if (v39 >= a2)
          {
            v40 = (const char *)(v36 + 1);
LABEL_79:
            v41 = WTF::parseInteger<long long,unsigned char>((uint64_t)v40, a2, 0xAu, 0);
            goto LABEL_89;
          }
        }
        else if (v39 >= a2)
        {
          v41 = WTF::parseInteger<long long,char16_t>(v36 + 2, a2, 0xAu, 0);
LABEL_89:
          if (!v42)
            return 0;
          goto LABEL_90;
        }
      }
LABEL_124:
      __break(1u);
LABEL_125:
      if ((_DWORD)a2)
      {
        v48 = (unsigned __int16 *)result;
        v49 = v8;
        while (1)
        {
          v51 = *v48++;
          v50 = v51;
          if (v51 == 9 || v50 == 32)
            return 0;
          if (!--v49)
            goto LABEL_8;
        }
      }
    }
  }
  v9 = (unsigned __int8 *)result;
  v10 = a2;
  while (1)
  {
    v12 = *v9++;
    v11 = v12;
    if (v12 == 9 || v11 == 32)
      return 0;
    if (!--v10)
      goto LABEL_8;
  }
}

uint64_t WebCore::parseHTTPHeader(unsigned __int8 *a1, uint64_t a2, WTF::StringImpl **a3, uint64_t a4, WTF::StringImpl **a5, int a6)
{
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  int v15;
  WTF::StringImpl *v16;
  int v17;
  uint64_t v18;
  int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  unsigned int v23;
  int8x16_t *v24;
  int v25;
  BOOL v26;
  WTF *v27;
  WTF::StringImpl *v28;
  int v29;
  uint64_t v30;
  int64_t v31;
  int64_t v32;
  unsigned __int8 *v33;
  int v34;
  int v35;
  int v37;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  int v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  int v44;
  uint64_t v45;
  char *v46;
  unsigned __int8 *v47;
  int8x16_t v48;
  int8x16_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  int v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF *v60;
  WTF::StringImpl *v61;
  int v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  char *v65;
  char *v66;
  int8x16_t v67;
  int8x16_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  int v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF *v79;
  char *v80;
  char *v81;
  int8x16_t v82;
  int8x16_t v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  WTF *v91;
  WTF::StringImpl *v92;
  int v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  int v96;
  uint64_t v97;
  char *v98;
  char *v99;
  int8x16_t v100;
  int8x16_t v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  int v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF *v112;
  WTF *v113;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  char *v117;
  char *v118;
  int8x16_t v119;
  int8x16_t v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  int v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  char *v132;
  char *v133;
  int8x16_t v134;
  int8x16_t v135;
  char *v136;
  char *v137;
  char *v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  int v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  WTF *v154;
  uint64_t v155;
  WTF *v156;
  uint64_t v157;
  WTF::StringImpl *v158;
  int8x16x2_t v159;
  int8x16x2_t v160;
  int8x16x2_t v161;
  int8x16x2_t v162;
  int8x16x2_t v163;
  int8x16x2_t v164;
  int8x16x2_t v165;
  int8x16x2_t v166;
  int8x16x2_t v167;
  int8x16x2_t v168;
  int8x16x2_t v169;
  int8x16x2_t v170;
  int8x16x2_t v171;
  int8x16x2_t v172;
  int8x16x2_t v173;
  int8x16x2_t v174;
  int8x16x2_t v175;
  int8x16x2_t v176;
  int8x16x2_t v177;
  int8x16x2_t v178;
  int8x16x2_t v179;
  int8x16x2_t v180;
  int8x16x2_t v181;
  int8x16x2_t v182;

  v156 = 0;
  v157 = 0;
  v154 = 0;
  v155 = 0;
  *(_QWORD *)a4 = 0;
  *(_DWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 12) = 1;
  v12 = *a5;
  *a5 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      v12 = (WTF::StringImpl *)WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)a1;
  v14 = (unint64_t)&a1[a2];
  if (a2 < 1)
  {
    v23 = 0;
    v24 = (int8x16_t *)a1;
    v13 = 0;
    goto LABEL_47;
  }
  v15 = *a1;
  switch(v15)
  {
    case 58:
      v23 = 0;
      v12 = 0;
LABEL_20:
      v24 = (int8x16_t *)((char *)v13 + 1);
      v13 = v12;
      goto LABEL_47;
    case 13:
      goto LABEL_129;
    case 10:
      goto LABEL_8;
  }
  if ((v15 - 48) >= 0xA
    && (v15 | 0x20u) - 97 >= 0x1A
    && ((v15 - 33) > 0x3F || ((1 << (v15 - 33)) & 0xE00000000000367DLL) == 0)
    && v15 != 126
    && v15 != 124)
  {
    goto LABEL_100;
  }
  v12 = (WTF::StringImpl *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v156, (WTF *)1, (unint64_t)a1);
  *((_BYTE *)v156 + HIDWORD(v157)) = *(_BYTE *)v12;
  v23 = ++HIDWORD(v157);
  v24 = (int8x16_t *)(a1 + 1);
  if ((unint64_t)a2 < 2)
  {
LABEL_47:
    *(_QWORD *)a4 = v13;
    *(_DWORD *)(a4 + 8) = v23;
    *(_BYTE *)(a4 + 12) = 1;
    if ((unint64_t)v24 < v14)
    {
      v31 = &a1[a2] - (unsigned __int8 *)v24;
      while (v24->i8[0] == 32)
      {
        v24 = (int8x16_t *)((char *)v24 + 1);
        if (!--v31)
        {
          v24 = (int8x16_t *)&a1[a2];
          break;
        }
      }
    }
    if ((unint64_t)v24 < v14)
    {
      v32 = &a1[a2] - (unsigned __int8 *)v24;
      v33 = &a1[a2];
      if ((a6 & 1) != 0)
      {
        while (1)
        {
          v34 = v24->u8[0];
          if (v34 == 10)
            break;
          if (v34 == 13)
            goto LABEL_75;
          if (HIDWORD(v155) == (_DWORD)v155)
          {
            v12 = (WTF::StringImpl *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v154, (WTF *)(HIDWORD(v155) + 1), (unint64_t)v24);
            *((_BYTE *)v154 + HIDWORD(v155)) = *(_BYTE *)v12;
          }
          else
          {
            *((_BYTE *)v154 + HIDWORD(v155)) = v34;
          }
          ++HIDWORD(v155);
          if (v24->i8[0] == 13)
            goto LABEL_75;
          v24 = (int8x16_t *)((char *)v24 + 1);
          if (!--v32)
            goto LABEL_74;
        }
        v60 = v154;
        if (HIDWORD(v155) >= 0x81)
        {
          WTF::tryFastCompactMalloc((WTF *)0x116);
          v61 = v158;
          if (!v158)
          {
            __break(0xC471u);
            JUMPOUT(0x1962F2858);
          }
          v65 = (char *)v158 + 20;
          *(_QWORD *)v158 = 0x8100000002;
          *((_QWORD *)v61 + 1) = (char *)v61 + 20;
          *((_DWORD *)v61 + 4) = 0;
          v160.val[0] = *(int8x16_t *)v60;
          v67 = *((int8x16_t *)v60 + 1);
          v166.val[0] = (int8x16_t)*((_OWORD *)v60 + 2);
          v68 = *((int8x16_t *)v60 + 3);
          v66 = (char *)v60 + 64;
          v172.val[1] = 0uLL;
          v172.val[0] = v68;
          v166.val[1] = 0u;
          v178.val[0] = v67;
          v160.val[1] = 0u;
          vst2q_s8(v65, v160);
          v178.val[1] = 0u;
          v69 = (char *)v61 + 52;
          vst2q_s8(v69, v178);
          v70 = (char *)v61 + 84;
          vst2q_s8(v70, v166);
          v71 = (char *)v61 + 116;
          vst2q_s8(v71, v172);
          v72 = (char *)v61 + 148;
          v160.val[0] = *(int8x16_t *)v66;
          v166.val[0] = (int8x16_t)*((_OWORD *)v66 + 2);
          v172.val[0] = (int8x16_t)*((_OWORD *)v66 + 3);
          v166.val[1] = 0u;
          v178.val[0] = (int8x16_t)*((_OWORD *)v66 + 1);
          v160.val[1] = 0u;
          vst2q_s8(v72, v160);
          v178.val[1] = 0u;
          v73 = (char *)v61 + 180;
          vst2q_s8(v73, v178);
          v74 = (char *)v61 + 212;
          vst2q_s8(v74, v166);
          v75 = (char *)v61 + 244;
          vst2q_s8(v75, v172);
          *((_WORD *)v61 + 138) = 8230;
          v148 = v61;
        }
        else
        {
          WTF::String::String();
          v61 = v148;
          if (!v148)
          {
            v62 = 1;
            v63 = 33;
            goto LABEL_115;
          }
        }
        v76 = *((_DWORD *)v61 + 1);
        if (v76 < 0 || (v63 = (v76 + 33), __OFADD__(v76, 33)))
        {
          v158 = 0;
          goto LABEL_214;
        }
        v62 = (*((unsigned __int8 *)v61 + 16) >> 2) & 1;
LABEL_115:
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v63, v62, (int8x16_t *)"Unexpected LF in header value at ", 0x21u, (uint64_t)v61, &v158);
        v77 = v158;
        if (v158)
        {
          v158 = 0;
          v78 = *a3;
          *a3 = v77;
          if (!v78)
            goto LABEL_119;
          if (*(_DWORD *)v78 != 2)
          {
            *(_DWORD *)v78 -= 2;
            v158 = 0;
            goto LABEL_119;
          }
          WTF::StringImpl::destroy(v78, (WTF::StringImpl *)a2);
          v12 = v158;
          v158 = 0;
          if (!v12)
          {
LABEL_119:
            v22 = v148;
            if (!v148)
              goto LABEL_148;
            goto LABEL_146;
          }
          if (*(_DWORD *)v12 != 2)
          {
            *(_DWORD *)v12 -= 2;
            goto LABEL_119;
          }
LABEL_189:
          WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
          goto LABEL_119;
        }
LABEL_214:
        __break(0xC471u);
        JUMPOUT(0x1962F283CLL);
      }
      while (1)
      {
        v35 = v24->u8[0];
        if (v35 == 10 || v35 == 13)
          break;
        if (HIDWORD(v155) == (_DWORD)v155)
        {
          v12 = (WTF::StringImpl *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v154, (WTF *)(HIDWORD(v155) + 1), (unint64_t)v24);
          *((_BYTE *)v154 + HIDWORD(v155)) = *(_BYTE *)v12;
        }
        else
        {
          *((_BYTE *)v154 + HIDWORD(v155)) = v35;
        }
        ++HIDWORD(v155);
        v37 = v24->u8[0];
        if (v37 == 13 || v37 == 10)
          break;
        v24 = (int8x16_t *)((char *)v24 + 1);
        if (!--v32)
        {
LABEL_74:
          v24 = (int8x16_t *)v33;
          goto LABEL_76;
        }
      }
LABEL_75:
      v24 = (int8x16_t *)((char *)v24 + 1);
    }
LABEL_76:
    if ((unint64_t)v24 < v14 && (!a6 || v24->i8[0] == 10))
    {
      WTF::String::fromUTF8();
      v39 = v158;
      v158 = 0;
      v40 = *a5;
      *a5 = v39;
      if (!v40)
      {
LABEL_83:
        if (!v39)
          goto LABEL_100;
        v42 = (char *)v24 - (char *)a1;
        goto LABEL_149;
      }
      v41 = *(_DWORD *)v40 - 2;
      if (*(_DWORD *)v40 == 2)
      {
        WTF::StringImpl::destroy(v40, (WTF::StringImpl *)a2);
        v40 = v158;
        v158 = 0;
        if (!v40)
          goto LABEL_82;
        v41 = *(_DWORD *)v40 - 2;
        if (*(_DWORD *)v40 == 2)
        {
          WTF::StringImpl::destroy(v40, (WTF::StringImpl *)a2);
          goto LABEL_82;
        }
      }
      *(_DWORD *)v40 = v41;
LABEL_82:
      v39 = *a5;
      goto LABEL_83;
    }
    if ((uint64_t)(v14 - (_QWORD)v24) < 0)
    {
LABEL_188:
      __break(1u);
      goto LABEL_189;
    }
    if (v14 - (unint64_t)v24 >= 0x81)
    {
      WTF::tryFastCompactMalloc((WTF *)0x116);
      v43 = v158;
      if (!v158)
      {
        __break(0xC471u);
        JUMPOUT(0x1962F2830);
      }
      v46 = (char *)v158 + 20;
      *(_QWORD *)v158 = 0x8100000002;
      *((_QWORD *)v43 + 1) = (char *)v43 + 20;
      *((_DWORD *)v43 + 4) = 0;
      v159.val[0] = *v24;
      v48 = v24[1];
      v165.val[0] = v24[2];
      v49 = v24[3];
      v47 = (unsigned __int8 *)&v24[4];
      v171.val[1] = 0uLL;
      v171.val[0] = v49;
      v165.val[1] = 0u;
      v177.val[0] = v48;
      v159.val[1] = 0u;
      vst2q_s8(v46, v159);
      v177.val[1] = 0u;
      v50 = (char *)v43 + 52;
      vst2q_s8(v50, v177);
      v51 = (char *)v43 + 84;
      vst2q_s8(v51, v165);
      v52 = (char *)v43 + 116;
      vst2q_s8(v52, v171);
      v53 = (char *)v43 + 148;
      v159.val[0] = *(int8x16_t *)v47;
      v165.val[0] = (int8x16_t)*((_OWORD *)v47 + 2);
      v171.val[0] = (int8x16_t)*((_OWORD *)v47 + 3);
      v165.val[1] = 0u;
      v177.val[0] = (int8x16_t)*((_OWORD *)v47 + 1);
      v159.val[1] = 0u;
      vst2q_s8(v53, v159);
      v177.val[1] = 0u;
      v54 = (char *)v43 + 180;
      vst2q_s8(v54, v177);
      v55 = (char *)v43 + 212;
      vst2q_s8(v55, v165);
      v56 = (char *)v43 + 244;
      vst2q_s8(v56, v171);
      *((_WORD *)v43 + 138) = 8230;
      v147 = v43;
    }
    else
    {
      WTF::String::String();
      v43 = v147;
      if (!v147)
      {
        v44 = 1;
        v45 = 43;
        goto LABEL_94;
      }
    }
    v57 = *((_DWORD *)v43 + 1);
    if (v57 < 0 || (v45 = (v57 + 43), __OFADD__(v57, 43)))
    {
      v158 = 0;
      goto LABEL_207;
    }
    v44 = (*((unsigned __int8 *)v43 + 16) >> 2) & 1;
LABEL_94:
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v45, v44, (int8x16_t *)"CR doesn't follow LF after header value at ", 0x2Bu, (uint64_t)v43, &v158);
    v58 = v158;
    if (v158)
    {
      v158 = 0;
      v59 = *a3;
      *a3 = v58;
      if (v59)
      {
        if (*(_DWORD *)v59 == 2)
        {
          WTF::StringImpl::destroy(v59, (WTF::StringImpl *)a2);
          v64 = v158;
          v158 = 0;
          if (v64)
          {
            if (*(_DWORD *)v64 == 2)
              WTF::StringImpl::destroy(v64, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v64 -= 2;
          }
        }
        else
        {
          *(_DWORD *)v59 -= 2;
          v158 = 0;
        }
      }
      v22 = v147;
      if (v147)
        goto LABEL_146;
      goto LABEL_148;
    }
LABEL_207:
    __break(0xC471u);
    goto LABEL_224;
  }
  while (1)
  {
    v25 = v24->u8[0];
    switch(v25)
    {
      case 10:
        v79 = v156;
        if (v23 >= 0x81)
        {
          WTF::tryFastCompactMalloc((WTF *)0x116);
          v16 = v158;
          if (!v158)
          {
            __break(0xC471u);
            JUMPOUT(0x1962F2860);
          }
          v80 = (char *)v158 + 20;
          *(_QWORD *)v158 = 0x8100000002;
          *((_QWORD *)v16 + 1) = (char *)v16 + 20;
          *((_DWORD *)v16 + 4) = 0;
          v161.val[0] = *(int8x16_t *)v79;
          v82 = *((int8x16_t *)v79 + 1);
          v167.val[0] = (int8x16_t)*((_OWORD *)v79 + 2);
          v83 = *((int8x16_t *)v79 + 3);
          v81 = (char *)v79 + 64;
          v173.val[1] = 0uLL;
          v173.val[0] = v83;
          v167.val[1] = 0u;
          v179.val[0] = v82;
          v161.val[1] = 0u;
          vst2q_s8(v80, v161);
          v179.val[1] = 0u;
          v84 = (char *)v16 + 52;
          vst2q_s8(v84, v179);
          v85 = (char *)v16 + 84;
          vst2q_s8(v85, v167);
          v86 = (char *)v16 + 116;
          vst2q_s8(v86, v173);
          v87 = (char *)v16 + 148;
          v161.val[0] = *(int8x16_t *)v81;
          v167.val[0] = (int8x16_t)*((_OWORD *)v81 + 2);
          v173.val[0] = (int8x16_t)*((_OWORD *)v81 + 3);
          v167.val[1] = 0u;
          v179.val[0] = (int8x16_t)*((_OWORD *)v81 + 1);
          v161.val[1] = 0u;
          vst2q_s8(v87, v161);
          v179.val[1] = 0u;
          v88 = (char *)v16 + 180;
          vst2q_s8(v88, v179);
          v89 = (char *)v16 + 212;
          vst2q_s8(v89, v167);
          v90 = (char *)v16 + 244;
          vst2q_s8(v90, v173);
          *((_WORD *)v16 + 138) = 8230;
          v150 = v16;
          goto LABEL_9;
        }
LABEL_8:
        WTF::String::String();
        v16 = v150;
        if (!v150)
        {
          v19 = 1;
          v18 = 32;
          goto LABEL_12;
        }
LABEL_9:
        v17 = *((_DWORD *)v16 + 1);
        if (v17 < 0 || (v18 = (v17 + 32), __OFADD__(v17, 32)))
        {
          v151 = 0;
          goto LABEL_209;
        }
        v19 = (*((unsigned __int8 *)v16 + 16) >> 2) & 1;
LABEL_12:
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v18, v19, (int8x16_t *)"Unexpected LF in header name at ", 0x20u, (uint64_t)v16, &v151);
        v20 = v151;
        if (v151)
        {
          v151 = 0;
          v21 = *a3;
          *a3 = v20;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
            {
              WTF::StringImpl::destroy(v21, (WTF::StringImpl *)a2);
              v115 = v151;
              v151 = 0;
              if (v115)
              {
                if (*(_DWORD *)v115 == 2)
                  WTF::StringImpl::destroy(v115, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)v115 -= 2;
              }
            }
            else
            {
              *(_DWORD *)v21 -= 2;
              v151 = 0;
            }
          }
          v22 = v150;
          if (!v150)
            goto LABEL_148;
          goto LABEL_146;
        }
LABEL_209:
        __break(0xC471u);
        JUMPOUT(0x1962F281CLL);
      case 58:
        v12 = (WTF::StringImpl *)a1;
        v13 = (WTF::StringImpl *)v24;
        goto LABEL_20;
      case 13:
        v13 = (WTF::StringImpl *)v24;
        if (v23)
        {
          v91 = v156;
          if (v23 >= 0x81)
          {
            WTF::tryFastCompactMalloc((WTF *)0x116);
            v92 = v158;
            if (!v158)
            {
              __break(0xC471u);
              JUMPOUT(0x1962F2868);
            }
            v117 = (char *)v158 + 20;
            *(_QWORD *)v158 = 0x8100000002;
            *((_QWORD *)v92 + 1) = (char *)v92 + 20;
            *((_DWORD *)v92 + 4) = 0;
            v163.val[0] = *(int8x16_t *)v91;
            v119 = *((int8x16_t *)v91 + 1);
            v169.val[0] = (int8x16_t)*((_OWORD *)v91 + 2);
            v120 = *((int8x16_t *)v91 + 3);
            v118 = (char *)v91 + 64;
            v175.val[1] = 0uLL;
            v175.val[0] = v120;
            v169.val[1] = 0u;
            v181.val[0] = v119;
            v163.val[1] = 0u;
            vst2q_s8(v117, v163);
            v181.val[1] = 0u;
            v121 = (char *)v92 + 52;
            vst2q_s8(v121, v181);
            v122 = (char *)v92 + 84;
            vst2q_s8(v122, v169);
            v123 = (char *)v92 + 116;
            vst2q_s8(v123, v175);
            v124 = (char *)v92 + 148;
            v163.val[0] = *(int8x16_t *)v118;
            v169.val[0] = (int8x16_t)*((_OWORD *)v118 + 2);
            v175.val[0] = (int8x16_t)*((_OWORD *)v118 + 3);
            v169.val[1] = 0u;
            v181.val[0] = (int8x16_t)*((_OWORD *)v118 + 1);
            v163.val[1] = 0u;
            vst2q_s8(v124, v163);
            v181.val[1] = 0u;
            v125 = (char *)v92 + 180;
            vst2q_s8(v125, v181);
            v126 = (char *)v92 + 212;
            vst2q_s8(v126, v169);
            v127 = (char *)v92 + 244;
            vst2q_s8(v127, v175);
            *((_WORD *)v92 + 138) = 8230;
            v152 = v92;
          }
          else
          {
            WTF::String::String();
            v92 = v152;
            if (!v152)
            {
              v93 = 1;
              v94 = 32;
              goto LABEL_173;
            }
          }
          v128 = *((_DWORD *)v92 + 1);
          if (v128 < 0 || (v94 = (v128 + 32), __OFADD__(v128, 32)))
          {
            v158 = 0;
            goto LABEL_217;
          }
          v93 = (*((unsigned __int8 *)v92 + 16) >> 2) & 1;
LABEL_173:
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v94, v93, (int8x16_t *)"Unexpected CR in header name at ", 0x20u, (uint64_t)v92, &v158);
          v129 = v158;
          if (v158)
          {
            v158 = 0;
            v130 = *a3;
            *a3 = v129;
            if (v130)
            {
              if (*(_DWORD *)v130 == 2)
              {
                WTF::StringImpl::destroy(v130, (WTF::StringImpl *)a2);
                v131 = v158;
                v158 = 0;
                if (v131)
                {
                  if (*(_DWORD *)v131 == 2)
                    WTF::StringImpl::destroy(v131, (WTF::StringImpl *)a2);
                  else
                    *(_DWORD *)v131 -= 2;
                }
              }
              else
              {
                *(_DWORD *)v130 -= 2;
                v158 = 0;
              }
            }
            v22 = v152;
            v152 = 0;
            if (v22)
              goto LABEL_146;
            goto LABEL_148;
          }
LABEL_217:
          __break(0xC471u);
          JUMPOUT(0x1962F2850);
        }
LABEL_129:
        if ((unint64_t)v13 + 1 < v14 && *((_BYTE *)v13 + 1) == 10)
        {
          v42 = v13 - (WTF::StringImpl *)a1 + 2;
          goto LABEL_149;
        }
        if ((uint64_t)(v14 - (_QWORD)v13) >= 0)
        {
          if (v14 - (unint64_t)v13 >= 0x81)
          {
            WTF::tryFastCompactMalloc((WTF *)0x116);
            v95 = v158;
            if (!v158)
            {
              __break(0xC471u);
              JUMPOUT(0x1962F2844);
            }
            v98 = (char *)v158 + 20;
            *(_QWORD *)v158 = 0x8100000002;
            *((_QWORD *)v95 + 1) = (char *)v95 + 20;
            *((_DWORD *)v95 + 4) = 0;
            v162.val[0] = *(int8x16_t *)v13;
            v100 = *((int8x16_t *)v13 + 1);
            v168.val[0] = (int8x16_t)*((_OWORD *)v13 + 2);
            v101 = *((int8x16_t *)v13 + 3);
            v99 = (char *)v13 + 64;
            v174.val[1] = 0uLL;
            v174.val[0] = v101;
            v168.val[1] = 0u;
            v180.val[0] = v100;
            v162.val[1] = 0u;
            vst2q_s8(v98, v162);
            v180.val[1] = 0u;
            v102 = (char *)v95 + 52;
            vst2q_s8(v102, v180);
            v103 = (char *)v95 + 84;
            vst2q_s8(v103, v168);
            v104 = (char *)v95 + 116;
            vst2q_s8(v104, v174);
            v105 = (char *)v95 + 148;
            v162.val[0] = *(int8x16_t *)v99;
            v168.val[0] = (int8x16_t)*((_OWORD *)v99 + 2);
            v174.val[0] = (int8x16_t)*((_OWORD *)v99 + 3);
            v168.val[1] = 0u;
            v180.val[0] = (int8x16_t)*((_OWORD *)v99 + 1);
            v162.val[1] = 0u;
            vst2q_s8(v105, v162);
            v180.val[1] = 0u;
            v106 = (char *)v95 + 180;
            vst2q_s8(v106, v180);
            v107 = (char *)v95 + 212;
            vst2q_s8(v107, v168);
            v108 = (char *)v95 + 244;
            vst2q_s8(v108, v174);
            *((_WORD *)v95 + 138) = 8230;
            v153 = v95;
          }
          else
          {
            WTF::String::String();
            v95 = v153;
            if (!v153)
            {
              v96 = 1;
              v97 = 39;
              goto LABEL_141;
            }
          }
          v109 = *((_DWORD *)v95 + 1);
          if (v109 < 0 || (v97 = (v109 + 39), __OFADD__(v109, 39)))
          {
            v158 = 0;
            goto LABEL_211;
          }
          v96 = (*((unsigned __int8 *)v95 + 16) >> 2) & 1;
LABEL_141:
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v97, v96, (int8x16_t *)"CR doesn't follow LF in header name at ", 0x27u, (uint64_t)v95, &v158);
          v110 = v158;
          if (v158)
          {
            v158 = 0;
            v111 = *a3;
            *a3 = v110;
            if (v111)
            {
              if (*(_DWORD *)v111 == 2)
              {
                WTF::StringImpl::destroy(v111, (WTF::StringImpl *)a2);
                v116 = v158;
                v158 = 0;
                if (v116)
                {
                  if (*(_DWORD *)v116 == 2)
                    WTF::StringImpl::destroy(v116, (WTF::StringImpl *)a2);
                  else
                    *(_DWORD *)v116 -= 2;
                }
              }
              else
              {
                *(_DWORD *)v111 -= 2;
                v158 = 0;
              }
            }
            v22 = v153;
            v153 = 0;
            if (v22)
              goto LABEL_146;
LABEL_148:
            v42 = 0;
            goto LABEL_149;
          }
LABEL_211:
          __break(0xC471u);
          JUMPOUT(0x1962F2828);
        }
        goto LABEL_188;
    }
    v26 = (v25 - 48) >= 0xA && (v25 | 0x20u) - 97 >= 0x1A;
    if (v26
      && ((v25 - 33) > 0x3F || ((1 << (v25 - 33)) & 0xE00000000000367DLL) == 0)
      && v25 != 124
      && v25 != 126)
    {
      break;
    }
    if (v23 == (_DWORD)v157)
    {
      v12 = (WTF::StringImpl *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v156, (WTF *)(v23 + 1), (unint64_t)v24);
      *((_BYTE *)v156 + HIDWORD(v157)) = *(_BYTE *)v12;
    }
    else
    {
      *((_BYTE *)v156 + v23) = v25;
    }
    v23 = ++HIDWORD(v157);
    v24 = (int8x16_t *)((char *)v24 + 1);
    if ((unint64_t)v24 >= v14)
      goto LABEL_47;
  }
  if (v23)
  {
    v27 = v156;
    if (v23 < 0x81)
    {
      WTF::String::String();
      v28 = v149;
      if (!v149)
      {
        v29 = 1;
        v30 = 39;
        goto LABEL_195;
      }
LABEL_192:
      v143 = *((_DWORD *)v28 + 1);
      if (v143 < 0 || (v30 = (v143 + 39), __OFADD__(v143, 39)))
      {
        v158 = 0;
      }
      else
      {
        v29 = (*((unsigned __int8 *)v28 + 16) >> 2) & 1;
LABEL_195:
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v30, v29, (int8x16_t *)"Unexpected character in header name at ", 0x27u, (uint64_t)v28, &v158);
        v144 = v158;
        if (v158)
        {
          v158 = 0;
          v145 = *a3;
          *a3 = v144;
          if (v145)
          {
            if (*(_DWORD *)v145 == 2)
            {
              WTF::StringImpl::destroy(v145, (WTF::StringImpl *)a2);
              v146 = v158;
              v158 = 0;
              if (v146)
              {
                if (*(_DWORD *)v146 == 2)
                  WTF::StringImpl::destroy(v146, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)v146 -= 2;
              }
            }
            else
            {
              *(_DWORD *)v145 -= 2;
              v158 = 0;
            }
          }
          v22 = v149;
          if (!v149)
            goto LABEL_148;
LABEL_146:
          if (*(_DWORD *)v22 != 2)
          {
            *(_DWORD *)v22 -= 2;
            goto LABEL_148;
          }
LABEL_154:
          WTF::StringImpl::destroy(v22, (WTF::StringImpl *)a2);
          goto LABEL_148;
        }
      }
      __break(0xC471u);
      JUMPOUT(0x1962F2874);
    }
    WTF::tryFastCompactMalloc((WTF *)0x116);
    v28 = v158;
    if (v158)
    {
      v132 = (char *)v158 + 20;
      *(_QWORD *)v158 = 0x8100000002;
      *((_QWORD *)v28 + 1) = (char *)v28 + 20;
      *((_DWORD *)v28 + 4) = 0;
      v164.val[0] = *(int8x16_t *)v27;
      v134 = *((int8x16_t *)v27 + 1);
      v170.val[0] = (int8x16_t)*((_OWORD *)v27 + 2);
      v135 = *((int8x16_t *)v27 + 3);
      v133 = (char *)v27 + 64;
      v176.val[1] = 0uLL;
      v176.val[0] = v135;
      v170.val[1] = 0u;
      v182.val[0] = v134;
      v164.val[1] = 0u;
      vst2q_s8(v132, v164);
      v182.val[1] = 0u;
      v136 = (char *)v28 + 52;
      vst2q_s8(v136, v182);
      v137 = (char *)v28 + 84;
      vst2q_s8(v137, v170);
      v138 = (char *)v28 + 116;
      vst2q_s8(v138, v176);
      v139 = (char *)v28 + 148;
      v164.val[0] = *(int8x16_t *)v133;
      v170.val[0] = (int8x16_t)*((_OWORD *)v133 + 2);
      v176.val[0] = (int8x16_t)*((_OWORD *)v133 + 3);
      v170.val[1] = 0u;
      v182.val[0] = (int8x16_t)*((_OWORD *)v133 + 1);
      v164.val[1] = 0u;
      vst2q_s8(v139, v164);
      v182.val[1] = 0u;
      v140 = (char *)v28 + 180;
      vst2q_s8(v140, v182);
      v141 = (char *)v28 + 212;
      vst2q_s8(v141, v170);
      v142 = (char *)v28 + 244;
      vst2q_s8(v142, v176);
      *((_WORD *)v28 + 138) = 8230;
      v149 = v28;
      goto LABEL_192;
    }
    __break(0xC471u);
LABEL_224:
    JUMPOUT(0x1962F2810);
  }
LABEL_100:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v22 = *a3;
  *a3 = v158;
  if (!v22)
    goto LABEL_148;
  if (*(_DWORD *)v22 == 2)
    goto LABEL_154;
  v42 = 0;
  *(_DWORD *)v22 -= 2;
LABEL_149:
  v112 = v154;
  if (v154)
  {
    v154 = 0;
    LODWORD(v155) = 0;
    WTF::fastFree(v112, (void *)a2);
  }
  v113 = v156;
  if (v156)
  {
    v156 = 0;
    LODWORD(v157) = 0;
    WTF::fastFree(v113, (void *)a2);
  }
  return v42;
}

uint64_t WebCore::parseContentLength(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v3;
  unsigned int v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  const char *v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  const char **v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  char v25;

  v22 = a1;
  v23 = a2;
  v24 = 44;
  v25 = 0;
  v18 = (const char **)&v22;
  v19 = 0;
  v21 = (_DWORD)a2 == 0;
  result = WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v18);
  v3 = v23;
  v4 = v19;
  if (v19 != (_DWORD)v23 || !v21)
  {
    v17 = 0;
    v16 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *((unsigned int *)v18 + 2);
      if (v7 <= v4)
      {
        v12 = 0;
        v11 = "";
LABEL_17:
        v13 = WTF::parseInteger<unsigned long long,unsigned char>((uint64_t)v11, v12, 0xAu, 0);
        goto LABEL_19;
      }
      LODWORD(v8) = v20;
      if (v7 - v4 <= v20)
      {
        if (!v4)
        {
          v11 = *v18;
          v8 = (uint64_t)v18[1];
          goto LABEL_16;
        }
        LODWORD(v8) = v7 - v4;
      }
      v9 = v4;
      v8 = v8;
      v10 = v7 - v4;
      if (*((_BYTE *)v18 + 12))
      {
        if (v10 < v8)
          goto LABEL_31;
        v11 = &(*v18)[v9];
        v8 = v8 | 0x100000000;
      }
      else
      {
        if (v10 < v8)
        {
LABEL_31:
          __break(1u);
          return result;
        }
        v11 = &(*v18)[2 * v9];
      }
LABEL_16:
      v12 = v8;
      if ((v8 & 0xFF00000000) != 0)
        goto LABEL_17;
      v13 = WTF::parseInteger<unsigned long long,char16_t>((uint64_t)v11, v8, 0xAu, 0);
LABEL_19:
      v15 = v14;
      if (v14)
      {
        if (v6 && (v16 | (v17 << 8)) != v13)
          return 0;
        v16 = v13;
        v17 = v13 >> 8;
      }
      else if (v6)
      {
        return 0;
      }
      result = WTF::StringView::SplitResult::Iterator::operator++();
      v4 = v19;
      v6 = v15;
      if (v19 == v3)
      {
        v6 = v15;
        if (v21)
          return v16 | (v17 << 8);
      }
    }
  }
  v16 = 0;
  v17 = 0;
  return v16 | (v17 << 8);
}

uint64_t WebCore::isForbiddenHeaderName(WebCore *this, const WTF::String *a2)
{
  uint64_t v3;
  WebCore::HTTPHeaderNamesHash *v4;
  unint64_t v5;
  uint64_t result;
  BOOL v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  BOOL v11;
  unsigned __int16 v12;

  v3 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v4 = *(WebCore::HTTPHeaderNamesHash **)(v3 + 8);
    v5 = *(unsigned int *)(v3 + 4) | ((unint64_t)((*(_DWORD *)(v3 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v4 = 0;
    v5 = 0x100000000;
  }
  v12 = 0;
  if (!WebCore::findHTTPHeaderName(v4, (char *)v5, &v12)
    || ((result = 1, v12 <= 0x3Cu) ? (v7 = ((1 << v12) & 0x1021014C18221806) == 0) : (v7 = 1),
        v7 && ((v8 = v12 - 77, v9 = v8 > 0xB, v10 = (1 << v8) & 0x8E9, !v9) ? (v11 = v10 == 0) : (v11 = 1), v11)))
  {
    result = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      if (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>(result, (uint64_t)"sec-", 4uLL))
      {
        return 1;
      }
      else
      {
        result = *(_QWORD *)this;
        if (*(_QWORD *)this)
          return WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>(result, (uint64_t)"proxy-", 6uLL);
      }
    }
  }
  return result;
}

uint64_t WebCore::isForbiddenHeader(WebCore *a1, const WTF::String *a2, uint64_t a3)
{
  uint64_t result;
  int v7;
  unsigned __int16 *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  int v18;
  const WTF::String **v19;
  int v20;
  BOOL v21;
  const WTF::String *v22;
  uint64_t v23;
  __int16 v24;
  char v25;

  if ((WebCore::isForbiddenHeaderName(a1, a2) & 1) != 0)
    return 1;
  if ((WTF::equalLettersIgnoringASCIICase((uint64_t *)a1, "x-http-method-override", 0x17uLL) & 1) != 0
    || (WTF::equalLettersIgnoringASCIICase((uint64_t *)a1, "x-http-method", 0xEuLL) & 1) != 0
    || (result = WTF::equalLettersIgnoringASCIICase((uint64_t *)a1, "x-method-override", 0x12uLL), (_DWORD)result))
  {
    v22 = a2;
    v23 = a3 & 0xFFFFFFFFFFLL;
    v24 = 44;
    v25 = 0;
    v19 = &v22;
    v20 = 0;
    v21 = (_DWORD)a3 == 0;
    WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v19);
    v7 = v23;
    while (1)
    {
      if (v20 == v7 && v21)
        return 0;
      v8 = (unsigned __int16 *)WTF::StringView::SplitResult::Iterator::operator*((unsigned int *)&v19);
      v10 = v9;
      if ((v9 & 0xFF00000000) != 0)
      {
        if (!(_DWORD)v9)
          goto LABEL_10;
        v11 = 0;
        v12 = (v9 - 1);
        while (1)
        {
          v13 = *((unsigned __int8 *)v8 + v11);
          if ((v13 - 9) >= 5 && v13 != 32)
            break;
          if (v9 == ++v11)
          {
            v9 = 0x100000000;
            v8 = (unsigned __int16 *)"";
            goto LABEL_10;
          }
        }
        if ((_DWORD)v9 == 1)
        {
          if (!(_DWORD)v11)
            goto LABEL_10;
          LODWORD(v14) = 0;
LABEL_49:
          v12 = (v14 - v11 + 1);
          v10 = v9 - v11;
          if (v10 >= v12)
          {
            v8 = (unsigned __int16 *)((char *)v8 + v11);
            v9 = v12 | 0x100000000;
            goto LABEL_10;
          }
          goto LABEL_51;
        }
        v14 = (v9 - 1);
        do
        {
          if (v14 >= v9)
            goto LABEL_51;
          v15 = *((unsigned __int8 *)v8 + v14);
          if ((v15 - 9) >= 5 && v15 != 32)
            break;
          --v14;
        }
        while ((_DWORD)v14);
        if ((_DWORD)v11 || (_DWORD)v14 != (_DWORD)v12)
          goto LABEL_49;
      }
      else
      {
        if (!(_DWORD)v9)
          goto LABEL_10;
        v11 = 0;
        v12 = (unint64_t)v8;
        while (1)
        {
          v16 = *(unsigned __int16 *)v12;
          if ((v16 - 9) >= 5 && v16 != 32)
            break;
          ++v11;
          v12 += 2;
          if (v9 == v11)
          {
            v9 = 0x100000000;
            v8 = (unsigned __int16 *)"";
            goto LABEL_10;
          }
        }
        if ((_DWORD)v9 == 1)
          goto LABEL_52;
        v17 = (v9 - 1);
        do
        {
          if (v17 >= v9)
            goto LABEL_51;
          v18 = v8[v17];
          if ((v18 - 9) >= 5 && v18 != 32)
            break;
          --v17;
        }
        while ((_DWORD)v17);
        if ((_DWORD)v11 || (_DWORD)v17 != (_DWORD)v9 - 1)
        {
          while (1)
          {
            v9 = (v17 - v11 + 1);
            v10 -= v11;
            v8 = (unsigned __int16 *)v12;
            if (v10 >= v9)
              break;
LABEL_51:
            __break(1u);
LABEL_52:
            if (!(_DWORD)v11)
              break;
            LODWORD(v17) = 0;
          }
        }
      }
LABEL_10:
      if ((WebCore::isForbiddenMethod(v8, v9) & 1) != 0)
        return 1;
      WTF::StringView::SplitResult::Iterator::operator++();
    }
  }
  return result;
}

BOOL WebCore::isForbiddenResponseHeaderName(WebCore *this, const WTF::String *a2)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v4 = *(_DWORD *)(v2 + 4);
  if (v4 != 10)
  {
    if (v4 == 11)
    {
      v5 = *(_QWORD *)(v2 + 8);
      if ((*(_BYTE *)(v2 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v5 & 0xDF) == 0x53
          && (*(_BYTE *)(v5 + 1) & 0xDF) == 0x45
          && (*(_BYTE *)(v5 + 2) & 0xDF) == 0x54
          && (*(_BYTE *)(v5 + 3) & 0xDF) == 0xD
          && (*(_BYTE *)(v5 + 4) & 0xDF) == 0x43
          && (*(_BYTE *)(v5 + 5) & 0xDF) == 0x4F
          && (*(_BYTE *)(v5 + 6) & 0xDF) == 0x4F
          && (*(_BYTE *)(v5 + 7) & 0xDF) == 0x4B
          && (*(_BYTE *)(v5 + 8) & 0xDF) == 0x49
          && (*(_BYTE *)(v5 + 9) & 0xDF) == 0x45)
        {
          v6 = *(unsigned __int8 *)(v5 + 10);
          return (v6 & 0xFFFFFFDF) == 18;
        }
      }
      else if ((*(_WORD *)v5 & 0xFFDF) == 0x53
             && (*(_WORD *)(v5 + 2) & 0xFFDF) == 0x45
             && (*(_WORD *)(v5 + 4) & 0xFFDF) == 0x54
             && (*(_WORD *)(v5 + 6) & 0xFFDF) == 0xD
             && (*(_WORD *)(v5 + 8) & 0xFFDF) == 0x43
             && (*(_WORD *)(v5 + 10) & 0xFFDF) == 0x4F
             && (*(_WORD *)(v5 + 12) & 0xFFDF) == 0x4F
             && (*(_WORD *)(v5 + 14) & 0xFFDF) == 0x4B
             && (*(_WORD *)(v5 + 16) & 0xFFDF) == 0x49
             && (*(_WORD *)(v5 + 18) & 0xFFDF) == 0x45)
      {
        v6 = *(unsigned __int16 *)(v5 + 20);
        return (v6 & 0xFFFFFFDF) == 18;
      }
    }
    return 0;
  }
  v7 = *(_QWORD *)(v2 + 8);
  if ((*(_BYTE *)(v2 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v7 & 0xDF) != 0x53
      || (*(_BYTE *)(v7 + 1) & 0xDF) != 0x45
      || (*(_BYTE *)(v7 + 2) & 0xDF) != 0x54
      || (*(_BYTE *)(v7 + 3) & 0xDF) != 0xD
      || (*(_BYTE *)(v7 + 4) & 0xDF) != 0x43
      || (*(_BYTE *)(v7 + 5) & 0xDF) != 0x4F
      || (*(_BYTE *)(v7 + 6) & 0xDF) != 0x4F
      || (*(_BYTE *)(v7 + 7) & 0xDF) != 0x4B
      || (*(_BYTE *)(v7 + 8) & 0xDF) != 0x49)
    {
      return 0;
    }
    v8 = *(unsigned __int8 *)(v7 + 9);
  }
  else
  {
    if ((*(_WORD *)v7 & 0xFFDF) != 0x53
      || (*(_WORD *)(v7 + 2) & 0xFFDF) != 0x45
      || (*(_WORD *)(v7 + 4) & 0xFFDF) != 0x54
      || (*(_WORD *)(v7 + 6) & 0xFFDF) != 0xD
      || (*(_WORD *)(v7 + 8) & 0xFFDF) != 0x43
      || (*(_WORD *)(v7 + 10) & 0xFFDF) != 0x4F
      || (*(_WORD *)(v7 + 12) & 0xFFDF) != 0x4F
      || (*(_WORD *)(v7 + 14) & 0xFFDF) != 0x4B
      || (*(_WORD *)(v7 + 16) & 0xFFDF) != 0x49)
    {
      return 0;
    }
    v8 = *(unsigned __int16 *)(v7 + 18);
  }
  return (v8 & 0xFFFFFFDF) == 0x45;
}

BOOL WebCore::isSimpleHeader(WebCore *this, WTF::StringImpl **a2, const WTF::String *a3)
{
  uint64_t v4;
  WebCore::HTTPHeaderNamesHash *v5;
  unint64_t v6;
  int HTTPHeaderName;
  _BOOL8 result;
  unsigned __int16 v9;

  v4 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v5 = *(WebCore::HTTPHeaderNamesHash **)(v4 + 8);
    v6 = *(unsigned int *)(v4 + 4) | ((unint64_t)((*(_DWORD *)(v4 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v5 = 0;
    v6 = 0x100000000;
  }
  v9 = 0;
  HTTPHeaderName = WebCore::findHTTPHeaderName(v5, (char *)v6, &v9);
  result = 0;
  if (HTTPHeaderName)
    return WebCore::isCrossOriginSafeRequestHeader(v9, a2);
  return result;
}

__int128 *WebCore::NetworkLoadMetrics::emptyMetrics(WebCore::NetworkLoadMetrics *this)
{
  {
    dword_1EE2F9230 = 0;
    xmmword_1EE2F9210 = 0u;
    unk_1EE2F9220 = 0u;
    xmmword_1EE2F91F0 = 0u;
    *(_OWORD *)&qword_1EE2F9200 = 0u;
    WebCore::NetworkLoadMetrics::emptyMetrics(void)::metrics = 0u;
    *(_OWORD *)&qword_1EE2F91E0 = 0u;
    qword_1EE2F9238 = -1;
    unk_1EE2F9240 = -1;
    qword_1EE2F9248 = 0;
  }
  return &WebCore::NetworkLoadMetrics::emptyMetrics(void)::metrics;
}

__n128 WebCore::AdditionalNetworkLoadMetricsForWebInspector::isolatedCopy@<Q0>(WebCore::AdditionalNetworkLoadMetricsForWebInspector *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  __n128 result;
  uint64_t v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v4 = WTF::fastMalloc((WTF *)0x68);
  *(_DWORD *)v4 = 1;
  *(_BYTE *)(v4 + 4) = 3;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_QWORD *)(v4 + 72) = -1;
  *(_QWORD *)(v4 + 80) = -1;
  *(_QWORD *)(v4 + 88) = -1;
  *(_BYTE *)(v4 + 96) = 0;
  *a2 = v4;
  *(_BYTE *)(v4 + 4) = *((_BYTE *)this + 4);
  WTF::String::isolatedCopy();
  v6 = v35;
  v35 = 0;
  v7 = *(WTF::StringImpl **)(v4 + 8);
  *(_QWORD *)(v4 + 8) = v6;
  if (v7)
  {
    v8 = *(_DWORD *)v7 - 2;
    if (*(_DWORD *)v7 != 2)
    {
LABEL_3:
      *(_DWORD *)v7 = v8;
      goto LABEL_4;
    }
    WTF::StringImpl::destroy(v7, v5);
    v7 = v35;
    v35 = 0;
    if (v7)
    {
      v8 = *(_DWORD *)v7 - 2;
      if (*(_DWORD *)v7 != 2)
        goto LABEL_3;
      WTF::StringImpl::destroy(v7, v32);
    }
  }
LABEL_4:
  WTF::String::isolatedCopy();
  v10 = v35;
  v35 = 0;
  v11 = *(WTF::StringImpl **)(v4 + 16);
  *(_QWORD *)(v4 + 16) = v10;
  if (!v11)
    goto LABEL_7;
  v12 = *(_DWORD *)v11 - 2;
  if (*(_DWORD *)v11 != 2)
    goto LABEL_6;
  WTF::StringImpl::destroy(v11, v9);
  v11 = v35;
  v35 = 0;
  if (v11)
  {
    v12 = *(_DWORD *)v11 - 2;
    if (*(_DWORD *)v11 != 2)
    {
LABEL_6:
      *(_DWORD *)v11 = v12;
      goto LABEL_7;
    }
    WTF::StringImpl::destroy(v11, v33);
  }
LABEL_7:
  WTF::String::isolatedCopy();
  v14 = v35;
  v35 = 0;
  v15 = *(WTF::StringImpl **)(v4 + 24);
  *(_QWORD *)(v4 + 24) = v14;
  if (!v15)
    goto LABEL_10;
  v16 = *(_DWORD *)v15 - 2;
  if (*(_DWORD *)v15 != 2)
    goto LABEL_9;
  WTF::StringImpl::destroy(v15, v13);
  v15 = v35;
  v35 = 0;
  if (v15)
  {
    v16 = *(_DWORD *)v15 - 2;
    if (*(_DWORD *)v15 != 2)
    {
LABEL_9:
      *(_DWORD *)v15 = v16;
      goto LABEL_10;
    }
    WTF::StringImpl::destroy(v15, v34);
  }
LABEL_10:
  WTF::String::isolatedCopy();
  v18 = v35;
  v35 = 0;
  v19 = *(WTF::StringImpl **)(v4 + 32);
  *(_QWORD *)(v4 + 32) = v18;
  if (!v19)
    goto LABEL_13;
  v20 = *(_DWORD *)v19 - 2;
  if (*(_DWORD *)v19 != 2)
    goto LABEL_12;
  WTF::StringImpl::destroy(v19, v17);
  v19 = v35;
  v35 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 != 2)
    {
LABEL_12:
      *(_DWORD *)v19 = v20;
      goto LABEL_13;
    }
    WTF::StringImpl::destroy(v19, v17);
  }
LABEL_13:
  WebCore::HTTPHeaderMap::isolatedCopy((unsigned int *)this + 10, v17, (uint64_t)&v35);
  v22 = *(unsigned int *)(v4 + 52);
  if ((_DWORD)v22)
  {
    v29 = 16 * v22;
    v30 = (WTF::StringImpl **)(*(_QWORD *)(v4 + 40) + 8);
    do
    {
      v31 = *v30;
      *v30 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v21);
        else
          *(_DWORD *)v31 -= 2;
      }
      v30 += 2;
      v29 -= 16;
    }
    while (v29);
  }
  v23 = *(WTF **)(v4 + 40);
  if (v23)
  {
    *(_QWORD *)(v4 + 40) = 0;
    *(_DWORD *)(v4 + 48) = 0;
    WTF::fastFree(v23, v21);
  }
  *(_QWORD *)(v4 + 40) = v35;
  v24 = v36;
  v35 = 0;
  v36 = 0;
  *(_QWORD *)(v4 + 48) = v24;
  v25 = *(unsigned int *)(v4 + 68);
  if ((_DWORD)v25)
    WTF::VectorTypeOperations<WebCore::HTTPHeaderMap::UncommonHeader>::destruct(*(WTF::StringImpl **)(v4 + 56), (WTF::StringImpl *)(*(_QWORD *)(v4 + 56) + 16 * v25));
  v26 = *(WTF **)(v4 + 56);
  if (v26)
  {
    *(_QWORD *)(v4 + 56) = 0;
    *(_DWORD *)(v4 + 64) = 0;
    WTF::fastFree(v26, v21);
  }
  *(_QWORD *)(v4 + 56) = v37;
  v27 = v38;
  v37 = 0;
  v38 = 0;
  *(_QWORD *)(v4 + 64) = v27;
  WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)&v35, v21);
  result = *(__n128 *)((char *)this + 72);
  *(__n128 *)(v4 + 72) = result;
  *(_QWORD *)(v4 + 88) = *((_QWORD *)this + 11);
  *(_BYTE *)(v4 + 96) = *((_BYTE *)this + 96);
  return result;
}

void WebCore::NetworkLoadMetrics::isolatedCopy(WebCore::NetworkLoadMetrics *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  __int128 v5;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v6;
  uint64_t v7;

  *(_QWORD *)(a2 + 120) = 0;
  v4 = *((_OWORD *)this + 1);
  *(_OWORD *)a2 = *(_OWORD *)this;
  *(_OWORD *)(a2 + 16) = v4;
  v5 = *((_OWORD *)this + 3);
  *(_OWORD *)(a2 + 32) = *((_OWORD *)this + 2);
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a2 + 64) = *((_OWORD *)this + 4);
  *(_QWORD *)(a2 + 80) = *((_QWORD *)this + 10);
  WTF::String::isolatedCopy();
  *(_DWORD *)(a2 + 96) = *((_DWORD *)this + 24);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)((char *)this + 104);
  v6 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)*((_QWORD *)this + 15);
  if (v6)
  {
    WebCore::AdditionalNetworkLoadMetricsForWebInspector::isolatedCopy(v6, &v7);
    *(_QWORD *)(a2 + 120) = v7;
  }
}

uint64_t WebCore::AdditionalNetworkLoadMetricsForWebInspector::create@<X0>(_BYTE *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, char a11)
{
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  result = WTF::fastMalloc((WTF *)0x68);
  *(_DWORD *)result = 1;
  *(_BYTE *)(result + 4) = *a1;
  v20 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 8) = v20;
  v21 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 16) = v21;
  v22 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 24) = v22;
  v23 = *a5;
  *a5 = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 32) = v23;
  v24 = *a6;
  *a6 = 0;
  *(_QWORD *)(result + 40) = v24;
  LODWORD(v24) = *((_DWORD *)a6 + 2);
  *((_DWORD *)a6 + 2) = 0;
  *(_DWORD *)(result + 48) = v24;
  LODWORD(v24) = *((_DWORD *)a6 + 3);
  *((_DWORD *)a6 + 3) = 0;
  *(_DWORD *)(result + 52) = v24;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  v25 = a6[2];
  a6[2] = 0;
  *(_QWORD *)(result + 56) = v25;
  LODWORD(v25) = *((_DWORD *)a6 + 6);
  *((_DWORD *)a6 + 6) = 0;
  *(_DWORD *)(result + 64) = v25;
  LODWORD(v25) = *((_DWORD *)a6 + 7);
  *((_DWORD *)a6 + 7) = 0;
  *(_DWORD *)(result + 68) = v25;
  *(_QWORD *)(result + 72) = a7;
  *(_QWORD *)(result + 80) = a8;
  *(_QWORD *)(result + 88) = a10;
  *(_BYTE *)(result + 96) = a11;
  *a9 = result;
  return result;
}

uint64_t WebCore::NetworkStorageSession::setTrackingPreventionDebugLoggingEnabled(uint64_t this, char a2)
{
  *(_BYTE *)(this + 137) = a2;
  return this;
}

uint64_t WebCore::NetworkStorageSession::shouldBlockThirdPartyCookies(uint64_t a1, WTF::ASCIICaseInsensitiveHash *a2)
{
  uint64_t result;
  const WTF::String *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  WTF **v10;
  const WTF::StringImpl *v11;
  const WTF::StringImpl *v12;
  int v13;
  int v14;
  unsigned int v15;
  WTF **v16;
  const WTF::StringImpl *v17;
  const WTF::StringImpl *v18;
  int v19;
  int v20;

  if (*(_BYTE *)(a1 + 136))
  {
    result = *(_QWORD *)a2;
    if (!*(_QWORD *)a2)
      return result;
    if (*(_DWORD *)(result + 4) && (MEMORY[0x19AEA53F4]() & 1) == 0)
    {
      v6 = *(_QWORD *)(a1 + 144);
      if (v6)
      {
        v8 = *(_DWORD *)(v6 - 8);
        v9 = WTF::ASCIICaseInsensitiveHash::hash(a2, v5) & v8;
        v10 = (WTF **)(v6 + 8 * v9);
        if ((WTF::equal(*v10, 0, v11) & 1) == 0)
        {
          v13 = 1;
          while (*v10 == (WTF *)-1
               || (WTF::equalIgnoringASCIICase(*v10, *(const WTF::StringImpl **)a2, v12) & 1) == 0)
          {
            v9 = (v9 + v13) & v8;
            v10 = (WTF **)(v6 + 8 * v9);
            ++v13;
            if (WTF::equal(*v10, 0, v12))
              goto LABEL_6;
          }
          return 1;
        }
      }
LABEL_6:
      v7 = *(_QWORD *)(a1 + 152);
      if (v7)
      {
        v14 = *(_DWORD *)(v7 - 8);
        v15 = WTF::ASCIICaseInsensitiveHash::hash(a2, v5) & v14;
        v16 = (WTF **)(v7 + 8 * v15);
        if ((WTF::equal(*v16, 0, v17) & 1) == 0)
        {
          v19 = 1;
          while (*v16 == (WTF *)-1
               || (WTF::equalIgnoringASCIICase(*v16, *(const WTF::StringImpl **)a2, v18) & 1) == 0)
          {
            v15 = (v15 + v19) & v14;
            v16 = (WTF **)(v7 + 8 * v15);
            v20 = WTF::equal(*v16, 0, v18);
            result = 0;
            ++v19;
            if (v20)
              return result;
          }
          return 1;
        }
      }
    }
  }
  return 0;
}

uint64_t WebCore::NetworkStorageSession::hasHadUserInteractionAsFirstParty(uint64_t a1, WTF::ASCIICaseInsensitiveHash *a2)
{
  uint64_t result;
  const WTF::String *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  WTF **v9;
  const WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  int v12;
  int v13;

  result = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    if (!*(_DWORD *)(result + 4))
      return 0;
    if ((MEMORY[0x19AEA53F4]() & 1) != 0)
      return 0;
    v6 = *(_QWORD *)(a1 + 160);
    if (!v6)
      return 0;
    v7 = *(_DWORD *)(v6 - 8);
    v8 = WTF::ASCIICaseInsensitiveHash::hash(a2, v5) & v7;
    v9 = (WTF **)(v6 + 8 * v8);
    if ((WTF::equal(*v9, 0, v10) & 1) != 0)
    {
      return 0;
    }
    else
    {
      v12 = 1;
      while (*v9 == (WTF *)-1 || (WTF::equalIgnoringASCIICase(*v9, *(const WTF::StringImpl **)a2, v11) & 1) == 0)
      {
        v8 = (v8 + v12) & v7;
        v9 = (WTF **)(v6 + 8 * v8);
        v13 = WTF::equal(*v9, 0, v11);
        result = 0;
        ++v12;
        if (v13)
          return result;
      }
      return 1;
    }
  }
  return result;
}

uint64_t WebCore::NetworkStorageSession::shouldBlockCookies(uint64_t a1, WebCore::ResourceRequest *this, uint64_t a3, uint64_t a4, char a5, char a6)
{
  char v12;
  __int128 v14;
  uint64_t v15;

  v12 = *((_BYTE *)this + 184);
  if ((v12 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v12 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v12;
  }
  if ((v12 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  v14 = *(_OWORD *)a3;
  v15 = *(_QWORD *)(a3 + 16);
  return WebCore::NetworkStorageSession::shouldBlockCookies(a1, (WebCore::ResourceRequest *)((char *)this + 40), this, &v14, a4, a5, a6);
}

uint64_t WebCore::NetworkStorageSession::shouldBlockCookies(uint64_t a1, const WTF::URL *a2, const WTF::URL *a3, __int128 *a4, uint64_t a5, char a6, char a7)
{
  WTF::StringImpl *v12;
  uint64_t shouldBlockThirdPartyCookies;
  WTF::StringImpl *v15;
  const WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  __int128 v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;

  if ((a7 & 1) != 0)
    return 0;
  if (!*(_BYTE *)(a1 + 136))
    return 0;
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v21, a2);
  if (!v21)
    return 0;
  if (*((_DWORD *)v21 + 1)
    && (MEMORY[0x19AEA53F4]() & 1) == 0
    && (WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v20, a3), v20))
  {
    if (!*((_DWORD *)v20 + 1)
      || (MEMORY[0x19AEA53F4]() & 1) != 0
      || (WTF::equal(v21, v20, v16) & 1) != 0
      || a6
      && (v18 = *a4,
          v19 = *((_QWORD *)a4 + 2),
          (WebCore::NetworkStorageSession::hasStorageAccess((_QWORD *)a1, &v20, (WTF::ASCIICaseInsensitiveHash *)&v21, (uint64_t)&v18, a5) & 1) != 0))
    {
LABEL_16:
      shouldBlockThirdPartyCookies = 0;
    }
    else
    {
      shouldBlockThirdPartyCookies = 1;
      switch(*(_BYTE *)(a1 + 265))
      {
        case 0:
          break;
        case 1:
          shouldBlockThirdPartyCookies = WebCore::NetworkStorageSession::shouldExemptDomainPairFromThirdPartyCookieBlocking(a1, &v21, &v20) ^ 1;
          break;
        case 2:
          if (*(_QWORD *)(a1 + 280))
            shouldBlockThirdPartyCookies = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)(a1 + 280), (WTF::ASCIICaseInsensitiveHash *)&v21) == 0;
          break;
        case 3:
          if (WebCore::NetworkStorageSession::hasHadUserInteractionAsFirstParty(a1, (WTF::ASCIICaseInsensitiveHash *)&v21))goto LABEL_29;
          break;
        case 4:
LABEL_29:
          shouldBlockThirdPartyCookies = WebCore::NetworkStorageSession::shouldBlockThirdPartyCookies(a1, (WTF::ASCIICaseInsensitiveHash *)&v20);
          break;
        default:
          goto LABEL_16;
      }
    }
    v17 = v20;
    v20 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v12);
      else
        *(_DWORD *)v17 -= 2;
    }
  }
  else
  {
    shouldBlockThirdPartyCookies = 0;
  }
  v15 = v21;
  v21 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v12);
    else
      *(_DWORD *)v15 -= 2;
  }
  return shouldBlockThirdPartyCookies;
}

uint64_t WebCore::NetworkStorageSession::hasStorageAccess(_QWORD *a1, const WTF::StringImpl **a2, WTF::ASCIICaseInsensitiveHash *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  const WTF::StringImpl *v20;
  BOOL v21;
  uint64_t result;
  const WTF::String *v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  WTF **v38;
  const WTF::StringImpl *v39;
  const WTF::StringImpl *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  const WTF::StringImpl *v48;
  const WTF::String *v49;
  const WTF::StringImpl *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  WTF **v57;
  const WTF::StringImpl *v58;
  const WTF::StringImpl *v59;
  int v60;
  int v61;

  if (*(_BYTE *)(a4 + 16))
  {
    v9 = a1[21];
    if (v9)
    {
      v10 = *(_DWORD *)(v9 - 8);
      v11 = (~(a5 << 32) + a5) ^ ((unint64_t)(~(a5 << 32) + a5) >> 22);
      v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
      v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
      v14 = v10 & ((v13 >> 31) ^ v13);
      v15 = *(_QWORD *)(v9 + 16 * v14);
      if (v15 != a5)
      {
        v16 = 1;
        while (v15)
        {
          v14 = ((_DWORD)v14 + v16) & v10;
          v15 = *(_QWORD *)(v9 + 16 * v14);
          ++v16;
          if (v15 == a5)
            goto LABEL_9;
        }
        v14 = *(unsigned int *)(v9 - 4);
      }
LABEL_9:
      if (v14 != *(_DWORD *)(v9 - 4))
      {
        v17 = v9 + 16 * v14;
        v18 = *(_QWORD *)(v17 + 8);
        if (v18)
        {
          v19 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(*(_QWORD *)(v17 + 8), *(_QWORD *)a4, *(_QWORD *)(a4 + 8));
          v21 = !v19 || v19 == (uint64_t *)(v18 + 24 * *(unsigned int *)(v18 - 4));
          if (!v21 && (WTF::equal((WTF *)v19[2], *a2, v20) & 1) != 0)
            return 1;
        }
      }
    }
  }
  result = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
  {
    if (!*(_DWORD *)(result + 4) || (MEMORY[0x19AEA53F4]() & 1) != 0)
      return 0;
    v24 = a1[22];
    if (!v24)
      goto LABEL_38;
    v25 = *(_DWORD *)(v24 - 8);
    v26 = (~(a5 << 32) + a5) ^ ((unint64_t)(~(a5 << 32) + a5) >> 22);
    v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
    v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
    v29 = v25 & ((v28 >> 31) ^ v28);
    v30 = *(_QWORD *)(v24 + 16 * v29);
    if (v30 != a5)
    {
      v31 = 1;
      while (v30)
      {
        v29 = ((_DWORD)v29 + v31) & v25;
        v30 = *(_QWORD *)(v24 + 16 * v29);
        ++v31;
        if (v30 == a5)
          goto LABEL_27;
      }
      v29 = *(unsigned int *)(v24 - 4);
    }
LABEL_27:
    if (v29 == *(_DWORD *)(v24 - 4)
      || (v32 = v24 + 16 * v29, v35 = *(_QWORD *)(v32 + 8), v33 = (uint64_t *)(v32 + 8), (v34 = v35) == 0))
    {
LABEL_38:
      v44 = a1[23];
      if (v44)
      {
        v45 = *(_DWORD *)(v44 - 8);
        v46 = WTF::ASCIICaseInsensitiveHash::hash(a3, v23) & v45;
        v47 = v44 + 16 * v46;
        if ((WTF::equal(*(WTF **)v47, 0, v48) & 1) != 0)
        {
LABEL_44:
          v52 = a1[23];
          if (!v52)
            return 0;
          v53 = *(unsigned int *)(v52 - 4);
          v47 = v52 + 16 * v53;
        }
        else
        {
          v51 = 1;
          while (*(_QWORD *)v47 == -1
               || (WTF::equalIgnoringASCIICase(*(WTF **)v47, *(const WTF::StringImpl **)a3, v50) & 1) == 0)
          {
            v46 = (v46 + v51) & v45;
            v47 = v44 + 16 * v46;
            ++v51;
            if (WTF::equal(*(WTF **)v47, 0, v50))
              goto LABEL_44;
          }
          v52 = a1[23];
          if (!v52)
          {
LABEL_47:
            v54 = *(_QWORD *)(v47 + 8);
            if (v54)
            {
              v55 = *(_DWORD *)(v54 - 8);
              v56 = WTF::ASCIICaseInsensitiveHash::hash((WTF::ASCIICaseInsensitiveHash *)a2, v49) & v55;
              v57 = (WTF **)(v54 + 8 * v56);
              if ((WTF::equal(*v57, 0, v58) & 1) == 0)
              {
                v60 = 1;
                while (*v57 == (WTF *)-1 || (WTF::equalIgnoringASCIICase(*v57, *a2, v59) & 1) == 0)
                {
                  v56 = (v56 + v60) & v55;
                  v57 = (WTF **)(v54 + 8 * v56);
                  v61 = WTF::equal(*v57, 0, v59);
                  result = 0;
                  ++v60;
                  if (v61)
                    return result;
                }
                return 1;
              }
            }
            return 0;
          }
          v53 = *(unsigned int *)(v52 - 4);
        }
        if (v47 != v52 + 16 * v53)
          goto LABEL_47;
      }
      return 0;
    }
    v36 = *(_DWORD *)(v34 - 8);
    v37 = WTF::ASCIICaseInsensitiveHash::hash(a3, v23) & v36;
    v38 = (WTF **)(v34 + 16 * v37);
    if ((WTF::equal(*v38, 0, v39) & 1) != 0)
    {
LABEL_34:
      v42 = *v33;
      if (!*v33)
        goto LABEL_38;
      v43 = *(unsigned int *)(v42 - 4);
      v38 = (WTF **)(v42 + 16 * v43);
    }
    else
    {
      v41 = 1;
      while (*v38 == (WTF *)-1 || (WTF::equalIgnoringASCIICase(*v38, *(const WTF::StringImpl **)a3, v40) & 1) == 0)
      {
        v37 = (v37 + v41) & v36;
        v38 = (WTF **)(v34 + 16 * v37);
        ++v41;
        if (WTF::equal(*v38, 0, v40))
          goto LABEL_34;
      }
      v42 = *v33;
      if (!*v33)
      {
LABEL_37:
        if ((WTF::equal(v38[1], *a2, v40) & 1) != 0)
          return 1;
        goto LABEL_38;
      }
      v43 = *(unsigned int *)(v42 - 4);
    }
    if (v38 == (WTF **)(v42 + 16 * v43))
      goto LABEL_38;
    goto LABEL_37;
  }
  return result;
}

WTF *WebCore::NetworkStorageSession::shouldExemptDomainPairFromThirdPartyCookieBlocking(uint64_t a1, WTF **a2, const WTF::StringImpl **a3)
{
  WTF *result;
  const WTF::StringImpl *v7;
  const WTF::String *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  WTF **v13;
  const WTF::StringImpl *v14;
  const WTF::StringImpl *v15;
  int v16;
  const WTF::String *v17;
  char v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  WTF **v22;
  const WTF::StringImpl *v23;
  const WTF::StringImpl *v24;
  int v25;
  int v26;
  uint64_t v27;

  result = *a2;
  if (*a2)
  {
    if (*((_DWORD *)result + 1) && (MEMORY[0x19AEA53F4]() & 1) == 0)
    {
      result = *a3;
      if (!*a3)
        return result;
      if (*((_DWORD *)result + 1) && (MEMORY[0x19AEA53F4]() & 1) == 0)
      {
        if ((WTF::equal(*a2, *a3, v7) & 1) != 0)
          return (WTF *)1;
        v9 = *(_QWORD *)(a1 + 272);
        if (v9)
        {
          v10 = *(_DWORD *)(v9 - 8);
          v11 = *(_QWORD *)(a1 + 272);
          v12 = WTF::ASCIICaseInsensitiveHash::hash((WTF::ASCIICaseInsensitiveHash *)a2, v8) & v10;
          v27 = v11;
          v13 = (WTF **)(v11 + 8 * v12);
          if ((WTF::equal(*v13, 0, v14) & 1) == 0)
          {
            v16 = 1;
            while (*v13 == (WTF *)-1 || (WTF::equalIgnoringASCIICase(*v13, *a2, v15) & 1) == 0)
            {
              v12 = (v12 + v16) & v10;
              v13 = (WTF **)(v27 + 8 * v12);
              v18 = WTF::equal(*v13, 0, v15);
              result = 0;
              ++v16;
              if ((v18 & 1) != 0)
                return result;
            }
            v19 = *(_QWORD *)(a1 + 272);
            if (v19)
            {
              v20 = *(_DWORD *)(v19 - 8);
              v21 = WTF::ASCIICaseInsensitiveHash::hash((WTF::ASCIICaseInsensitiveHash *)a3, v17) & v20;
              v22 = (WTF **)(v19 + 8 * v21);
              if ((WTF::equal(*v22, 0, v23) & 1) == 0)
              {
                v25 = 1;
                while (*v22 == (WTF *)-1 || (WTF::equalIgnoringASCIICase(*v22, *a3, v24) & 1) == 0)
                {
                  v21 = (v21 + v25) & v20;
                  v22 = (WTF **)(v19 + 8 * v21);
                  v26 = WTF::equal(*v22, 0, v24);
                  result = 0;
                  ++v25;
                  if (v26)
                    return result;
                }
                return (WTF *)1;
              }
            }
          }
        }
      }
    }
    return 0;
  }
  return result;
}

unint64_t WebCore::NetworkStorageSession::maxAgeCacheCap(WebCore::NetworkStorageSession *this, const WebCore::ResourceRequest *a2)
{
  char v4;
  int shouldBlockCookies;
  uint64_t v6;
  unint64_t v7;
  __int128 v9;
  char v10;

  if (*((_BYTE *)this + 200))
  {
    v4 = *((_BYTE *)a2 + 184);
    if ((v4 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(a2);
      v4 = *((_BYTE *)a2 + 184) | 1;
      *((_BYTE *)a2 + 184) = v4;
    }
    if ((v4 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(a2);
      *((_BYTE *)a2 + 184) |= 1u;
    }
    LOBYTE(v9) = 0;
    v10 = 0;
    shouldBlockCookies = WebCore::NetworkStorageSession::shouldBlockCookies((uint64_t)this, (const WebCore::ResourceRequest *)((char *)a2 + 40), a2, &v9, 0, 0, 0);
    v6 = 0;
    v7 = 0;
    if (shouldBlockCookies)
    {
      v7 = *((_QWORD *)this + 24) & 0xFFFFFFFFFFFFFF00;
      v6 = *((_QWORD *)this + 24);
    }
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  return v7 | v6;
}

uint64_t WebCore::NetworkStorageSession::setPrevalentDomainsToBlockAndDeleteCookiesFor(uint64_t result, unsigned int *a2)
{
  uint64_t v3;
  uint64_t *v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::ASCIICaseInsensitiveHash *v10;
  uint64_t v11;
  _BYTE v12[24];

  v3 = result;
  v4 = (uint64_t *)(result + 144);
  v5 = *(WTF::StringImpl ***)(result + 144);
  if (v5)
  {
    *v4 = 0;
    v6 = *((unsigned int *)v5 - 1);
    if ((_DWORD)v6)
    {
      v7 = v5;
      do
      {
        v8 = *v7;
        if (*v7 != (WTF::StringImpl *)-1)
        {
          *v7 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
              WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v8 -= 2;
          }
        }
        ++v7;
        --v6;
      }
      while (v6);
    }
    result = WTF::fastFree((WTF *)(v5 - 2), a2);
  }
  v9 = a2[3];
  if ((_DWORD)v9)
  {
    v10 = *(WTF::ASCIICaseInsensitiveHash **)a2;
    v11 = 8 * v9;
    do
    {
      result = (uint64_t)WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(v10, v4, (uint64_t)v12);
      v10 = (WTF::ASCIICaseInsensitiveHash *)((char *)v10 + 8);
      v11 -= 8;
    }
    while (v11);
  }
  if (*(_BYTE *)(v3 + 265) == 4)
    return WebCore::NetworkStorageSession::cookieEnabledStateMayHaveChanged(v3);
  return result;
}

uint64_t WebCore::NetworkStorageSession::cookieEnabledStateMayHaveChanged(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;

  v1 = this;
  v2 = *(_QWORD *)(this + 80);
  if (!v2)
  {
    v3 = 0;
    v4 = 0;
LABEL_3:
    v5 = v3;
    v3 = (uint64_t *)(v2 + 8 * v4);
    goto LABEL_4;
  }
  v4 = *(unsigned int *)(v2 - 4);
  v3 = (uint64_t *)(v2 + 8 * v4);
  if (!*(_DWORD *)(v2 - 12))
    goto LABEL_3;
  if (!(_DWORD)v4)
  {
    v14 = 0;
    v5 = *(uint64_t **)(this + 80);
    goto LABEL_45;
  }
  v9 = 8 * v4;
  v5 = *(uint64_t **)(this + 80);
  while ((unint64_t)(*v5 + 1) <= 1)
  {
    ++v5;
    v9 -= 8;
    if (!v9)
    {
      v5 = v3;
      break;
    }
  }
LABEL_4:
  if (!v2)
  {
    v6 = 0;
    goto LABEL_6;
  }
  v14 = *(unsigned int *)(v2 - 4);
LABEL_45:
  v6 = (uint64_t *)(v2 + 8 * v14);
LABEL_6:
  if (v6 != v5)
  {
    while (!*(_QWORD *)(*v5 + 8))
    {
      v7 = v5 + 1;
      v5 = v3;
      if (v7 != v3)
      {
        v5 = v7;
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          if (++v5 == v3)
          {
            v5 = v3;
            break;
          }
        }
      }
      if (v5 == v6)
      {
        v5 = v6;
        break;
      }
    }
  }
  if (v2)
    v8 = (uint64_t *)(v2 + 8 * *(unsigned int *)(v2 - 4));
  else
    v8 = 0;
  while (v5 != v8)
  {
    v11 = *v5;
    v10 = v5 + 1;
    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 8) + 16))(*(_QWORD *)(v11 + 8));
    v12 = v3;
    if (v10 != v3)
    {
      v12 = v10;
      while ((unint64_t)(*v12 + 1) <= 1)
      {
        if (++v12 == v3)
        {
          v12 = v3;
          break;
        }
      }
    }
    v5 = v6;
    if (v12 != v6)
    {
      v5 = v12;
      if (!*(_QWORD *)(*v12 + 8))
      {
        while (1)
        {
          v13 = v5 + 1;
          v5 = v3;
          if (v13 != v3)
          {
            v5 = v13;
            while ((unint64_t)(*v5 + 1) <= 1)
            {
              if (++v5 == v3)
              {
                v5 = v3;
                break;
              }
            }
          }
          if (v5 == v6)
            break;
          if (*(_QWORD *)(*v5 + 8))
            goto LABEL_40;
        }
        v5 = v6;
      }
    }
LABEL_40:
    ++*(_DWORD *)(v1 + 88);
  }
  return this;
}

uint64_t WebCore::NetworkStorageSession::setPrevalentDomainsToBlockButKeepCookiesFor(uint64_t result, unsigned int *a2)
{
  uint64_t v3;
  uint64_t *v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::ASCIICaseInsensitiveHash *v10;
  uint64_t v11;
  _BYTE v12[24];

  v3 = result;
  v4 = (uint64_t *)(result + 152);
  v5 = *(WTF::StringImpl ***)(result + 152);
  if (v5)
  {
    *v4 = 0;
    v6 = *((unsigned int *)v5 - 1);
    if ((_DWORD)v6)
    {
      v7 = v5;
      do
      {
        v8 = *v7;
        if (*v7 != (WTF::StringImpl *)-1)
        {
          *v7 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
              WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v8 -= 2;
          }
        }
        ++v7;
        --v6;
      }
      while (v6);
    }
    result = WTF::fastFree((WTF *)(v5 - 2), a2);
  }
  v9 = a2[3];
  if ((_DWORD)v9)
  {
    v10 = *(WTF::ASCIICaseInsensitiveHash **)a2;
    v11 = 8 * v9;
    do
    {
      result = (uint64_t)WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(v10, v4, (uint64_t)v12);
      v10 = (WTF::ASCIICaseInsensitiveHash *)((char *)v10 + 8);
      v11 -= 8;
    }
    while (v11);
  }
  if (*(_BYTE *)(v3 + 265) == 4)
    return WebCore::NetworkStorageSession::cookieEnabledStateMayHaveChanged(v3);
  return result;
}

uint64_t WebCore::NetworkStorageSession::setDomainsWithUserInteractionAsFirstParty(uint64_t result, unsigned int *a2)
{
  uint64_t v3;
  uint64_t *v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::ASCIICaseInsensitiveHash *v10;
  uint64_t v11;
  _BYTE v12[24];

  v3 = result;
  v4 = (uint64_t *)(result + 160);
  v5 = *(WTF::StringImpl ***)(result + 160);
  if (v5)
  {
    *v4 = 0;
    v6 = *((unsigned int *)v5 - 1);
    if ((_DWORD)v6)
    {
      v7 = v5;
      do
      {
        v8 = *v7;
        if (*v7 != (WTF::StringImpl *)-1)
        {
          *v7 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
              WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v8 -= 2;
          }
        }
        ++v7;
        --v6;
      }
      while (v6);
    }
    result = WTF::fastFree((WTF *)(v5 - 2), a2);
  }
  v9 = a2[3];
  if ((_DWORD)v9)
  {
    v10 = *(WTF::ASCIICaseInsensitiveHash **)a2;
    v11 = 8 * v9;
    do
    {
      result = (uint64_t)WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(v10, v4, (uint64_t)v12);
      v10 = (WTF::ASCIICaseInsensitiveHash *)((char *)v10 + 8);
      v11 -= 8;
    }
    while (v11);
  }
  if (*(_BYTE *)(v3 + 265) == 3)
    return WebCore::NetworkStorageSession::cookieEnabledStateMayHaveChanged(v3);
  return result;
}

uint64_t WebCore::NetworkStorageSession::setDomainsWithCrossPageStorageAccess(uint64_t a1, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::ASCIICaseInsensitiveHash *v12;
  uint64_t v13;
  _QWORD v14[2];

  v5 = *(_QWORD *)(a1 + 184);
  if (v5)
  {
    *(_QWORD *)(a1 + 184) = 0;
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v5, a2);
  }
  result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(*(_QWORD *)a2, (uint64_t)a2, a3);
  v9 = result;
  v14[1] = v7;
  if (*(_QWORD *)a2)
    v10 = *(_QWORD *)a2 + 24 * *(unsigned int *)(*(_QWORD *)a2 - 4);
  else
    v10 = 0;
  if (v10 != result)
  {
    do
    {
      v11 = *(unsigned int *)(v9 + 20);
      if ((_DWORD)v11)
      {
        v12 = *(WTF::ASCIICaseInsensitiveHash **)(v9 + 8);
        v13 = 8 * v11;
        do
        {
          WebCore::NetworkStorageSession::grantCrossPageStorageAccess(a1, (WTF::ASCIICaseInsensitiveHash *)v9, v12);
          v12 = (WTF::ASCIICaseInsensitiveHash *)((char *)v12 + 8);
          v13 -= 8;
        }
        while (v13);
      }
      v14[0] = v9 + 24;
      result = WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v14, v7, v8);
      v9 = v14[0];
    }
    while (v14[0] != v10);
  }
  return result;
}

uint64_t WebCore::NetworkStorageSession::grantCrossPageStorageAccess(uint64_t a1, WTF::ASCIICaseInsensitiveHash *this, WTF::ASCIICaseInsensitiveHash *a3)
{
  uint64_t *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  const WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  const WTF::StringImpl *v12;
  _QWORD *v13;
  int v14;
  _DWORD *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl **v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t result;
  const WTF::String *v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  const WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  const WTF::StringImpl *v33;
  _QWORD *v34;
  int v35;
  _DWORD *v36;
  WTF::StringImpl **v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  WTF::StringImpl **v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  WTF::StringImpl **v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  char v53;
  _BYTE v54[24];

  v5 = (uint64_t *)(a1 + 184);
  v6 = *(_QWORD *)(a1 + 184);
  if (v6
    || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash((uint64_t *)(a1 + 184), 8u, 0), (v6 = *v5) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = WTF::ASCIICaseInsensitiveHash::hash(this, this) & v7;
  v9 = v6 + 16 * v8;
  if ((WTF::equal(*(WTF **)v9, 0, v10) & 1) == 0)
  {
    v13 = 0;
    v14 = 1;
    do
    {
      if (*(_QWORD *)v9 == -1)
      {
        v13 = (_QWORD *)v9;
      }
      else if ((WTF::equalIgnoringASCIICase(*(WTF **)v9, *(const WTF::StringImpl **)this, v12) & 1) != 0)
      {
        goto LABEL_32;
      }
      v8 = (v8 + v14) & v7;
      v9 = v6 + 16 * v8;
      ++v14;
    }
    while (!WTF::equal(*(WTF **)v9, 0, v12));
    if (v13)
    {
      *v13 = 0;
      v13[1] = 0;
      --*(_DWORD *)(*v5 - 16);
      v9 = (uint64_t)v13;
    }
  }
  v15 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    *v15 += 2;
  v16 = *(WTF::StringImpl **)v9;
  *(_QWORD *)v9 = v15;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v11);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = *(WTF::StringImpl ***)(v9 + 8);
  *(_QWORD *)(v9 + 8) = 0;
  if (v17)
  {
    v46 = *((unsigned int *)v17 - 1);
    if ((_DWORD)v46)
    {
      v47 = v17;
      do
      {
        v48 = *v47;
        if (*v47 != (WTF::StringImpl *)-1)
        {
          *v47 = 0;
          if (v48)
          {
            if (*(_DWORD *)v48 == 2)
              WTF::StringImpl::destroy(v48, v11);
            else
              *(_DWORD *)v48 -= 2;
          }
        }
        ++v47;
        --v46;
      }
      while (v46);
    }
    WTF::fastFree((WTF *)(v17 - 2), v11);
  }
  v18 = *v5;
  if (*v5)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v20 = *v5;
  if (*v5)
    v21 = *(_DWORD *)(v20 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(v20 - 16) + v21);
  v23 = *(unsigned int *)(v20 - 4);
  if (v23 <= 0x400)
  {
    if (3 * v23 > 4 * v22)
      goto LABEL_32;
    if (!(_DWORD)v23)
    {
      v24 = 8;
      goto LABEL_31;
    }
LABEL_28:
    v24 = (_DWORD)v23 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v23));
LABEL_31:
    v9 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(v5, v24, (WTF **)v9);
    goto LABEL_32;
  }
  if (v23 <= 2 * v22)
    goto LABEL_28;
LABEL_32:
  WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(a3, (uint64_t *)(v9 + 8), (uint64_t)v54);
  result = (uint64_t)WebCore::NetworkStorageSession::findAdditionalLoginDomain(this, a3, (uint64_t)&v52);
  if (!v53)
    return result;
  v27 = *v5;
  if (*v5
    || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(v5, 8u, 0), (v27 = *v5) != 0))
  {
    v28 = *(_DWORD *)(v27 - 8);
  }
  else
  {
    v28 = 0;
  }
  v29 = WTF::ASCIICaseInsensitiveHash::hash(this, v26) & v28;
  v30 = v27 + 16 * v29;
  if ((WTF::equal(*(WTF **)v30, 0, v31) & 1) == 0)
  {
    v34 = 0;
    v35 = 1;
    do
    {
      if (*(_QWORD *)v30 == -1)
      {
        v34 = (_QWORD *)v30;
      }
      else
      {
        result = WTF::equalIgnoringASCIICase(*(WTF **)v30, *(const WTF::StringImpl **)this, v33);
        if ((result & 1) != 0)
          goto LABEL_66;
      }
      v29 = (v29 + v35) & v28;
      v30 = v27 + 16 * v29;
      ++v35;
    }
    while (!WTF::equal(*(WTF **)v30, 0, v33));
    if (v34)
    {
      *v34 = 0;
      v34[1] = 0;
      --*(_DWORD *)(*v5 - 16);
      v30 = (uint64_t)v34;
    }
  }
  v36 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    *v36 += 2;
  result = *(_QWORD *)v30;
  *(_QWORD *)v30 = v36;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v32);
    else
      *(_DWORD *)result -= 2;
  }
  v37 = *(WTF::StringImpl ***)(v30 + 8);
  *(_QWORD *)(v30 + 8) = 0;
  if (v37)
  {
    v49 = *((unsigned int *)v37 - 1);
    if ((_DWORD)v49)
    {
      v50 = v37;
      do
      {
        v51 = *v50;
        if (*v50 != (WTF::StringImpl *)-1)
        {
          *v50 = 0;
          if (v51)
          {
            if (*(_DWORD *)v51 == 2)
              WTF::StringImpl::destroy(v51, v32);
            else
              *(_DWORD *)v51 -= 2;
          }
        }
        ++v50;
        --v49;
      }
      while (v49);
    }
    result = WTF::fastFree((WTF *)(v37 - 2), v32);
  }
  v38 = *v5;
  if (*v5)
    v39 = *(_DWORD *)(v38 - 12) + 1;
  else
    v39 = 1;
  *(_DWORD *)(v38 - 12) = v39;
  v40 = *v5;
  if (*v5)
    v41 = *(_DWORD *)(v40 - 12);
  else
    v41 = 0;
  v42 = (*(_DWORD *)(v40 - 16) + v41);
  v43 = *(unsigned int *)(v40 - 4);
  if (v43 <= 0x400)
  {
    if (3 * v43 > 4 * v42)
      goto LABEL_66;
    if (!(_DWORD)v43)
    {
      v44 = 8;
      goto LABEL_65;
    }
LABEL_60:
    v44 = (_DWORD)v43 << (6 * *(_DWORD *)(v40 - 12) >= (2 * v43));
LABEL_65:
    result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(v5, v44, (WTF **)v30);
    v30 = result;
    goto LABEL_66;
  }
  if (v43 <= 2 * v42)
    goto LABEL_60;
LABEL_66:
  if (v53)
  {
    result = (uint64_t)WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((WTF::ASCIICaseInsensitiveHash *)&v52, (uint64_t *)(v30 + 8), (uint64_t)v54);
    if (v53)
    {
      result = (uint64_t)v52;
      v52 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v45);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

WTF::StringImpl *WebCore::NetworkStorageSession::findAdditionalLoginDomain@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  int v8;
  int v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;

  if (MEMORY[0x19AEA53F4](*a2, "sony.com", 8)
    && MEMORY[0x19AEA53F4](*a1, "playstation.com", 15)
    || (result = (WTF::StringImpl *)MEMORY[0x19AEA53F4](*a2, "sonyentertainmentnetwork.com", 28), (_DWORD)result)
    && (result = (WTF::StringImpl *)MEMORY[0x19AEA53F4](*a1, "playstation.com", 15), (_DWORD)result))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    result = v12;
    if (v12)
    {
      v8 = *((_DWORD *)v12 + 1);
      v9 = *(_DWORD *)v12 + 2;
      *(_DWORD *)v12 = v9;
      v10 = v12;
      if (!v8)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v10 = v12;
        result = v12;
        v9 = *(_DWORD *)v12 - 2;
        if (*(_DWORD *)v12 == 2)
        {
          WTF::StringImpl::destroy(v12, v7);
          result = v12;
          v9 = *(_DWORD *)v12;
        }
        else
        {
          *(_DWORD *)v12 = v9;
        }
      }
      *(_QWORD *)a3 = v10;
      *(_BYTE *)(a3 + 8) = 1;
      v11 = v9 - 2;
      if (v11)
        *(_DWORD *)result = v11;
      else
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else
    {
      result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_QWORD *)a3 = 0;
      *(_BYTE *)(a3 + 8) = 1;
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 8) = 0;
  }
  return result;
}

uint64_t WebCore::NetworkStorageSession::getAllStorageAccessEntries@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  _DWORD *v18;
  _QWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  _QWORD *v23;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *(_QWORD *)(this + 168);
  if (!v3)
  {
    v6 = 0;
    v4 = 0;
LABEL_10:
    v5 = (_QWORD *)(v3 + 16 * v4);
    goto LABEL_11;
  }
  v4 = *(unsigned int *)(v3 - 4);
  v5 = (_QWORD *)(v3 + 16 * v4);
  if (!*(_DWORD *)(v3 - 12))
  {
    v6 = (_QWORD *)(v3 + 16 * v4);
    goto LABEL_10;
  }
  v6 = *(_QWORD **)(this + 168);
  if ((_DWORD)v4)
  {
    v7 = 16 * v4;
    v6 = *(_QWORD **)(this + 168);
    while ((unint64_t)(*v6 + 1) <= 1)
    {
      v6 += 2;
      v7 -= 16;
      if (!v7)
      {
        v6 = v5;
        break;
      }
    }
  }
LABEL_11:
  if (v3)
    v8 = (_QWORD *)(v3 + 16 * *(unsigned int *)(v3 - 4));
  else
    v8 = 0;
  if (v8 != v6)
  {
    v9 = 0;
    LODWORD(v10) = 0;
    do
    {
      v11 = v6[1];
      if (v11)
      {
        v12 = *(unsigned int *)(v11 - 4);
        v13 = v11 + 24 * v12;
        if (*(_DWORD *)(v11 - 12))
        {
          v14 = v6[1];
          if ((_DWORD)v12)
          {
            v15 = 24 * v12;
            v14 = v6[1];
            while (*(_OWORD *)v14 == 0 || *(_QWORD *)(v14 + 8) == -1)
            {
              v14 += 24;
              v15 -= 24;
              if (!v15)
              {
                v14 = v13;
                goto LABEL_27;
              }
            }
          }
          goto LABEL_27;
        }
        v14 = v11 + 24 * v12;
      }
      else
      {
        v14 = 0;
        LODWORD(v12) = 0;
      }
      v13 = v11 + 24 * v12;
      if (!v11)
      {
        v17 = 0;
        goto LABEL_32;
      }
LABEL_27:
      v17 = v11 + 24 * *(unsigned int *)(v11 - 4);
LABEL_32:
      while (v14 != v17)
      {
        v19 = (_QWORD *)(v14 + 16);
        if ((_DWORD)v10 == *(_DWORD *)(a2 + 8))
        {
          this = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v10 + 1, (unint64_t)v19);
          v10 = *(unsigned int *)(a2 + 12);
          v9 = *(_QWORD *)a2;
          v18 = *(_DWORD **)this;
          if (*(_QWORD *)this)
            *v18 += 2;
          *(_QWORD *)(v9 + 8 * v10) = v18;
        }
        else
        {
          v20 = (_DWORD *)*v19;
          if (*v19)
            *v20 += 2;
          *(_QWORD *)(v9 + 8 * v10) = v20;
        }
        LODWORD(v10) = v10 + 1;
        *(_DWORD *)(a2 + 12) = v10;
        v21 = v14 + 24;
        v14 = v13;
        if (v21 != v13)
        {
          v14 = v21;
          while (*(_OWORD *)v14 == 0 || *(_QWORD *)(v14 + 8) == -1)
          {
            v14 += 24;
            if (v14 == v13)
            {
              v14 = v13;
              break;
            }
          }
        }
      }
      v23 = v6 + 2;
      v6 = v5;
      if (v23 != v5)
      {
        v6 = v23;
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          v6 += 2;
          if (v6 == v5)
          {
            v6 = v5;
            break;
          }
        }
      }
    }
    while (v6 != v8);
  }
  return this;
}

void WebCore::NetworkStorageSession::grantStorageAccess(uint64_t a1, WTF::ASCIICaseInsensitiveHash *a2, WebCore::NetworkStorageSession *this, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  const WTF::String *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  WTF::StringImpl *v55;
  BOOL v56;
  _DWORD *v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl **v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int v68;
  WTF *v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  WTF::StringImpl **v72;
  WTF::StringImpl *v73;
  WTF *v74;
  unsigned int v75;
  _DWORD *v76;
  _DWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  int v83;
  unint64_t v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  unsigned int v93;
  _OWORD *v94;
  _DWORD *v95;
  _DWORD *v96;
  WTF::StringImpl *v97;
  uint64_t v99;
  int v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unsigned int v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  unint64_t v113;
  double v114;
  double v115;
  double v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  unsigned int v122;
  WTF **v123;
  const WTF::StringImpl *v124;
  const WTF::StringImpl *v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  _DWORD *v129;
  WTF::StringImpl *v130;
  WTF *v131;
  unsigned int v132;
  const WTF::StringImpl *v133;
  _DWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  int v141;
  const WTF::StringImpl *v142;
  int v143;
  uint64_t v144;
  int v145;
  WTF *v146;
  WTF::StringImpl **v147;
  WTF::StringImpl *v148;
  _DWORD *v149;
  _DWORD *v150;
  WTF::StringImpl *v151;
  uint64_t v152;
  WTF::StringImpl **v153;
  uint64_t v154;
  WTF::StringImpl **v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  unint64_t v163;
  unsigned int v164;
  uint64_t v165;
  WTF::StringImpl **v166;
  WTF::StringImpl *v167;
  WTF::StringImpl *v168;
  uint64_t v169;
  _BYTE v170[24];
  uint64_t v171;

  if (WebCore::NetworkStorageSession::loginDomainMatchesRequestingDomain(this, (const WTF::StringImpl **)a2, this))
  {
    WebCore::NetworkStorageSession::grantCrossPageStorageAccess(a1, this, a2);
    return;
  }
  if (*(_BYTE *)(a4 + 16))
  {
    v12 = *(_QWORD *)(a1 + 168);
    v11 = (uint64_t *)(a1 + 168);
    v10 = v12;
    if (!v12)
      goto LABEL_21;
    v13 = *(_DWORD *)(v10 - 8);
    v14 = (~(a5 << 32) + a5) ^ ((unint64_t)(~(a5 << 32) + a5) >> 22);
    v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
    v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
    v17 = v13 & ((v16 >> 31) ^ v16);
    v18 = *(_QWORD *)(v10 + 16 * v17);
    if (v18 != a5)
    {
      v19 = 1;
      while (v18)
      {
        v17 = ((_DWORD)v17 + v19) & v13;
        v18 = *(_QWORD *)(v10 + 16 * v17);
        ++v19;
        if (v18 == a5)
          goto LABEL_20;
      }
      v17 = *(unsigned int *)(v10 - 4);
    }
LABEL_20:
    if (v17 == *(_DWORD *)(v10 - 4))
    {
LABEL_21:
      v171 = 0;
      WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::add<WebCore::RegistrableDomain const&>((uint64_t)v170, &v171, (_QWORD *)a4, (_DWORD **)a2);
      v32 = *v11;
      if (*v11
        || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v11, 8u), (v32 = *v11) != 0))
      {
        v33 = *(_DWORD *)(v32 - 8);
      }
      else
      {
        v33 = 0;
      }
      v34 = (~(a5 << 32) + a5) ^ ((unint64_t)(~(a5 << 32) + a5) >> 22);
      v35 = 9 * ((v34 + ~(v34 << 13)) ^ ((v34 + ~(v34 << 13)) >> 8));
      v36 = (v35 ^ (v35 >> 15)) + ~((v35 ^ (v35 >> 15)) << 27);
      v37 = v33 & ((v36 >> 31) ^ v36);
      v38 = (_QWORD *)(v32 + 16 * v37);
      v39 = *v38;
      if (*v38)
      {
        v40 = 0;
        v41 = 1;
        do
        {
          if (v39 == a5)
          {
            v42 = v171;
            goto LABEL_76;
          }
          if (v39 == -1)
            v40 = v38;
          v37 = (v37 + v41) & v33;
          v38 = (_QWORD *)(v32 + 16 * v37);
          v39 = *v38;
          ++v41;
        }
        while (*v38);
        if (v40)
        {
          *v40 = 0;
          v40[1] = 0;
          --*(_DWORD *)(*v11 - 16);
          v38 = v40;
        }
      }
      *v38 = a5;
      v42 = v171;
      if (!v171 || (v43 = *(unsigned int *)(v171 - 12), !(_DWORD)v43))
      {
        v57 = 0;
        goto LABEL_46;
      }
      v44 = (v43 - 1) | ((v43 - 1) >> 1) | ((((_DWORD)v43 - 1) | ((v43 - 1) >> 1)) >> 2);
      v45 = v44 | (v44 >> 4) | ((v44 | (v44 >> 4)) >> 8);
      v46 = (v45 | HIWORD(v45)) + 1;
      if (v46 > 0x400)
      {
        if (v46 > 2 * v43)
          goto LABEL_92;
      }
      else if (3 * v46 > 4 * v43)
      {
LABEL_37:
        v47 = (double)v43;
        v48 = (double)v46;
        v49 = 0.604166667;
        goto LABEL_93;
      }
      LODWORD(v46) = 2 * v46;
      if (v46 <= 0x400)
        goto LABEL_37;
LABEL_92:
      v47 = (double)v43;
      v48 = (double)v46;
      v49 = 0.416666667;
LABEL_93:
      if (v48 * v49 <= v47)
        LODWORD(v46) = 2 * v46;
      if (v46 <= 8)
        v75 = 8;
      else
        v75 = v46;
      v76 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(24 * v75 + 16));
      v57 = v76 + 4;
      v76[2] = v75 - 1;
      v76[3] = v75;
      *v76 = 0;
      v76[1] = v43;
      if (*(_DWORD *)(v42 - 12))
      {
        v77 = v76;
        v78 = *(unsigned int *)(v42 - 4);
        v79 = v42;
        if ((_DWORD)v78)
        {
          v80 = 24 * v78;
          v79 = v42;
          while (*(_OWORD *)v79 == 0 || *(_QWORD *)(v79 + 8) == -1)
          {
            v79 += 24;
            v80 -= 24;
            if (!v80)
              goto LABEL_46;
          }
        }
        v82 = v42 + 24 * v78;
        if (v82 != v79)
        {
LABEL_109:
          v83 = 0;
          v84 = *(_QWORD *)(v79 + 8);
          v85 = (*(_QWORD *)v79 >> 5) & 0x7FFF800 ^ (((unsigned __int16)*(_QWORD *)v79 - 1640531527) << 16) ^ ((unsigned __int16)*(_QWORD *)v79 - 1640531527);
          v86 = v85 + (unsigned __int16)WORD2(*(_QWORD *)v79);
          v87 = (*(_QWORD *)v79 >> 37) & 0x7FFF800 ^ ((v86 + (v85 >> 11)) << 16) ^ (v86 + (v85 >> 11));
          v88 = (v84 >> 5) & 0x7FFF800 ^ ((v87 + (unsigned __int16)v84 + (v87 >> 11)) << 16) ^ (v87 + (unsigned __int16)v84 + (v87 >> 11));
          v89 = v88 + WORD2(v84) + (v88 >> 11);
          v90 = v77[2];
          LODWORD(v84) = (v84 >> 37) & 0x7FFF800 ^ (v89 << 16) ^ v89;
          LODWORD(v84) = (v84 + (v84 >> 11)) ^ (8 * (v84 + (v84 >> 11)));
          LODWORD(v84) = (v84 + (v84 >> 5)) ^ (4 * (v84 + (v84 >> 5)));
          v91 = (v84 + (v84 >> 15)) ^ (((_DWORD)v84 + (v84 >> 15)) << 10);
          if (v91)
            v92 = v91;
          else
            v92 = 0x800000;
          do
          {
            v93 = v92 & v90;
            v94 = &v57[6 * (v92 & v90)];
            v92 = ++v83 + (v92 & v90);
          }
          while (*v94 != 0);
          *v94 = *(_OWORD *)v79;
          v95 = *(_DWORD **)(v79 + 16);
          if (v95)
            *v95 += 2;
          v96 = &v57[6 * v93];
          v97 = (WTF::StringImpl *)*((_QWORD *)v96 + 2);
          *((_QWORD *)v96 + 2) = v95;
          if (v97)
          {
            if (*(_DWORD *)v97 == 2)
              WTF::StringImpl::destroy(v97, v31);
            else
              *(_DWORD *)v97 -= 2;
          }
          while (1)
          {
            v79 += 24;
            if (v79 == v82)
              break;
            if (*(_OWORD *)v79 != 0 && *(_QWORD *)(v79 + 8) != -1)
            {
              if (v79 != v82)
                goto LABEL_109;
              break;
            }
          }
        }
      }
LABEL_46:
      v58 = v38[1];
      v38[1] = v57;
      if (v58)
      {
        v59 = *(unsigned int *)(v58 - 4);
        if ((_DWORD)v59)
        {
          v60 = (WTF::StringImpl **)(v58 + 16);
          do
          {
            if (*(v60 - 1) != (WTF::StringImpl *)-1)
            {
              v61 = *v60;
              *v60 = 0;
              if (v61)
              {
                if (*(_DWORD *)v61 == 2)
                  WTF::StringImpl::destroy(v61, v31);
                else
                  *(_DWORD *)v61 -= 2;
              }
            }
            v60 += 3;
            --v59;
          }
          while (v59);
        }
        WTF::fastFree((WTF *)(v58 - 16), v31);
      }
      v62 = *v11;
      if (*v11)
        v63 = *(_DWORD *)(v62 - 12) + 1;
      else
        v63 = 1;
      *(_DWORD *)(v62 - 12) = v63;
      v64 = *v11;
      if (*v11)
        v65 = *(_DWORD *)(v64 - 12);
      else
        v65 = 0;
      v66 = (*(_DWORD *)(v64 - 16) + v65);
      v67 = *(unsigned int *)(v64 - 4);
      if (v67 > 0x400)
      {
        if (v67 > 2 * v66)
          goto LABEL_76;
      }
      else
      {
        if (3 * v67 > 4 * v66)
        {
LABEL_76:
          if (!v42)
            return;
          v71 = *(unsigned int *)(v42 - 4);
          if ((_DWORD)v71)
          {
            v72 = (WTF::StringImpl **)(v42 + 16);
            do
            {
              if (*(v72 - 1) != (WTF::StringImpl *)-1)
              {
                v73 = *v72;
                *v72 = 0;
                if (v73)
                {
                  if (*(_DWORD *)v73 == 2)
                    WTF::StringImpl::destroy(v73, v31);
                  else
                    *(_DWORD *)v73 -= 2;
                }
              }
              v72 += 3;
              --v71;
            }
            while (v71);
          }
          v74 = (WTF *)(v42 - 16);
          goto LABEL_87;
        }
        if (!(_DWORD)v67)
        {
          v68 = 8;
          goto LABEL_75;
        }
      }
      v68 = (_DWORD)v67 << (6 * *(_DWORD *)(v64 - 12) >= (2 * v67));
LABEL_75:
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v11, v68);
      goto LABEL_76;
    }
    v50 = v10 + 16 * v17;
    v53 = *(_QWORD *)(v50 + 8);
    v51 = (uint64_t *)(v50 + 8);
    v52 = v53;
    if (!v53
      || ((v54 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v52, *(_QWORD *)a4, *(_QWORD *)(a4 + 8))) != 0? (v56 = v54 == (uint64_t *)(v52 + 24 * *(unsigned int *)(v52 - 4))): (v56 = 1), v56))
    {
      WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::add<WebCore::RegistrableDomain const&>((uint64_t)v170, v51, (_QWORD *)a4, (_DWORD **)a2);
      return;
    }
    v69 = *(WTF **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v69 += 2;
    v70 = (WTF::StringImpl *)v54[2];
    v54[2] = (uint64_t)v69;
    if (v70)
    {
      if (*(_DWORD *)v70 != 2)
      {
        *(_DWORD *)v70 -= 2;
        return;
      }
      v130 = v70;
      goto LABEL_157;
    }
    return;
  }
  if (!*(_QWORD *)this || !*(_DWORD *)(*(_QWORD *)this + 4) || (MEMORY[0x19AEA53F4]() & 1) != 0)
    return;
  v23 = *(_QWORD *)(a1 + 176);
  v22 = (uint64_t *)(a1 + 176);
  v21 = v23;
  if (!v23)
    goto LABEL_128;
  v24 = *(_DWORD *)(v21 - 8);
  v25 = (~(a5 << 32) + a5) ^ ((unint64_t)(~(a5 << 32) + a5) >> 22);
  v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
  v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
  v28 = v24 & ((v27 >> 31) ^ v27);
  v29 = *(_QWORD *)(v21 + 16 * v28);
  if (v29 != a5)
  {
    v30 = 1;
    while (v29)
    {
      v28 = ((_DWORD)v28 + v30) & v24;
      v29 = *(_QWORD *)(v21 + 16 * v28);
      ++v30;
      if (v29 == a5)
        goto LABEL_127;
    }
    v28 = *(unsigned int *)(v21 - 4);
  }
LABEL_127:
  if (v28 == *(_DWORD *)(v21 - 4))
  {
LABEL_128:
    v171 = 0;
    WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::add<WebCore::RegistrableDomain const&>((uint64_t)v170, &v171, this, (_DWORD **)a2);
    v99 = *v22;
    if (*v22
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v22, 8u), (v99 = *v22) != 0))
    {
      v100 = *(_DWORD *)(v99 - 8);
    }
    else
    {
      v100 = 0;
    }
    v101 = (~(a5 << 32) + a5) ^ ((unint64_t)(~(a5 << 32) + a5) >> 22);
    v102 = 9 * ((v101 + ~(v101 << 13)) ^ ((v101 + ~(v101 << 13)) >> 8));
    v103 = (v102 ^ (v102 >> 15)) + ~((v102 ^ (v102 >> 15)) << 27);
    v104 = v100 & ((v103 >> 31) ^ v103);
    v105 = (_QWORD *)(v99 + 16 * v104);
    v106 = *v105;
    if (*v105)
    {
      v107 = 0;
      v108 = 1;
      do
      {
        if (v106 == a5)
        {
          v109 = v171;
          goto LABEL_235;
        }
        if (v106 == -1)
          v107 = v105;
        v104 = (v104 + v108) & v100;
        v105 = (_QWORD *)(v99 + 16 * v104);
        v106 = *v105;
        ++v108;
      }
      while (*v105);
      if (v107)
      {
        *v107 = 0;
        v107[1] = 0;
        --*(_DWORD *)(*v22 - 16);
        v105 = v107;
      }
    }
    *v105 = a5;
    v109 = v171;
    if (!v171 || (v110 = *(unsigned int *)(v171 - 12), !(_DWORD)v110))
    {
      v129 = 0;
      goto LABEL_208;
    }
    v111 = (v110 - 1) | ((v110 - 1) >> 1) | ((((_DWORD)v110 - 1) | ((v110 - 1) >> 1)) >> 2);
    v112 = v111 | (v111 >> 4) | ((v111 | (v111 >> 4)) >> 8);
    v113 = (v112 | HIWORD(v112)) + 1;
    if (v113 > 0x400)
    {
      if (v113 > 2 * v110)
        goto LABEL_168;
    }
    else if (3 * v113 > 4 * v110)
    {
LABEL_144:
      v114 = (double)v110;
      v115 = (double)v113;
      v116 = 0.604166667;
LABEL_169:
      if (v115 * v116 <= v114)
        LODWORD(v113) = 2 * v113;
      if (v113 <= 8)
        v132 = 8;
      else
        v132 = v113;
      v134 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * v132 + 16));
      v129 = v134 + 4;
      v134[2] = v132 - 1;
      v134[3] = v132;
      *v134 = 0;
      v134[1] = v110;
      v135 = *(unsigned int *)(v109 - 4);
      v136 = v109 + 16 * v135;
      if (*(_DWORD *)(v109 - 12))
      {
        if ((_DWORD)v135)
        {
          v137 = 16 * v135;
          v138 = v109;
          while ((WTF::equal(*(WTF **)v138, 0, v133) & 1) != 0 || *(_QWORD *)v138 == -1)
          {
            v138 += 16;
            v137 -= 16;
            if (!v137)
            {
              v138 = v136;
              break;
            }
          }
          LODWORD(v135) = *(_DWORD *)(v109 - 4);
        }
        else
        {
          v138 = v109;
        }
      }
      else
      {
        v138 = v109 + 16 * v135;
      }
      v139 = v109 + 16 * v135;
      if (v139 != v138)
      {
        v169 = v109;
        do
        {
          v140 = v134[2];
          v141 = WTF::ASCIICaseInsensitiveHash::hash((WTF::ASCIICaseInsensitiveHash *)v138, v31);
          v143 = 0;
          do
          {
            v144 = v141 & v140;
            v145 = WTF::equal(*(WTF **)&v129[4 * v144], 0, v142);
            v141 = ++v143 + v144;
          }
          while (!v145);
          v146 = *(WTF **)v138;
          if (*(_QWORD *)v138)
            *(_DWORD *)v146 += 2;
          v147 = (WTF::StringImpl **)&v129[4 * v144];
          v148 = *v147;
          *v147 = v146;
          if (v148)
          {
            if (*(_DWORD *)v148 == 2)
              WTF::StringImpl::destroy(v148, v31);
            else
              *(_DWORD *)v148 -= 2;
          }
          v149 = *(_DWORD **)(v138 + 8);
          if (v149)
            *v149 += 2;
          v150 = &v129[4 * v144];
          v151 = (WTF::StringImpl *)*((_QWORD *)v150 + 1);
          *((_QWORD *)v150 + 1) = v149;
          if (v151)
          {
            if (*(_DWORD *)v151 == 2)
              WTF::StringImpl::destroy(v151, v31);
            else
              *(_DWORD *)v151 -= 2;
          }
          v152 = v138 + 16;
          v138 = v136;
          if (v152 != v136)
          {
            v138 = v152;
            while ((WTF::equal(*(WTF **)v138, 0, v142) & 1) != 0 || *(_QWORD *)v138 == -1)
            {
              v138 += 16;
              if (v138 == v136)
              {
                v138 = v136;
                break;
              }
            }
          }
        }
        while (v138 != v139);
        v109 = v169;
      }
LABEL_208:
      v153 = (WTF::StringImpl **)v105[1];
      v105[1] = v129;
      if (v153)
      {
        v154 = *((unsigned int *)v153 - 1);
        if ((_DWORD)v154)
        {
          v155 = v153;
          do
          {
            v156 = *v155;
            if (*v155 != (WTF::StringImpl *)-1)
            {
              v157 = v155[1];
              v155[1] = 0;
              if (v157)
              {
                if (*(_DWORD *)v157 == 2)
                {
                  WTF::StringImpl::destroy(v157, v31);
                  v156 = *v155;
                }
                else
                {
                  *(_DWORD *)v157 -= 2;
                }
              }
              *v155 = 0;
              if (v156)
              {
                if (*(_DWORD *)v156 == 2)
                  WTF::StringImpl::destroy(v156, v31);
                else
                  *(_DWORD *)v156 -= 2;
              }
            }
            v155 += 2;
            --v154;
          }
          while (v154);
        }
        WTF::fastFree((WTF *)(v153 - 2), v31);
      }
      v158 = *v22;
      if (*v22)
        v159 = *(_DWORD *)(v158 - 12) + 1;
      else
        v159 = 1;
      *(_DWORD *)(v158 - 12) = v159;
      v160 = *v22;
      if (*v22)
        v161 = *(_DWORD *)(v160 - 12);
      else
        v161 = 0;
      v162 = (*(_DWORD *)(v160 - 16) + v161);
      v163 = *(unsigned int *)(v160 - 4);
      if (v163 > 0x400)
      {
        if (v163 > 2 * v162)
        {
LABEL_235:
          if (v109)
          {
            v165 = *(unsigned int *)(v109 - 4);
            if ((_DWORD)v165)
            {
              v166 = (WTF::StringImpl **)v109;
              do
              {
                v167 = *v166;
                if (*v166 != (WTF::StringImpl *)-1)
                {
                  v168 = v166[1];
                  v166[1] = 0;
                  if (v168)
                  {
                    if (*(_DWORD *)v168 == 2)
                    {
                      WTF::StringImpl::destroy(v168, v31);
                      v167 = *v166;
                    }
                    else
                    {
                      *(_DWORD *)v168 -= 2;
                    }
                  }
                  *v166 = 0;
                  if (v167)
                  {
                    if (*(_DWORD *)v167 == 2)
                      WTF::StringImpl::destroy(v167, v31);
                    else
                      *(_DWORD *)v167 -= 2;
                  }
                }
                v166 += 2;
                --v165;
              }
              while (v165);
            }
            v74 = (WTF *)(v109 - 16);
LABEL_87:
            WTF::fastFree(v74, v31);
            return;
          }
          return;
        }
      }
      else
      {
        if (3 * v163 > 4 * v162)
          goto LABEL_235;
        if (!(_DWORD)v163)
        {
          v164 = 8;
          goto LABEL_234;
        }
      }
      v164 = (_DWORD)v163 << (6 * *(_DWORD *)(v160 - 12) >= (2 * v163));
LABEL_234:
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v22, v164);
      goto LABEL_235;
    }
    LODWORD(v113) = 2 * v113;
    if (v113 <= 0x400)
      goto LABEL_144;
LABEL_168:
    v114 = (double)v110;
    v115 = (double)v113;
    v116 = 0.416666667;
    goto LABEL_169;
  }
  v117 = v21 + 16 * v28;
  v120 = *(_QWORD *)(v117 + 8);
  v118 = (uint64_t *)(v117 + 8);
  v119 = v120;
  if (!v120)
    goto LABEL_166;
  v121 = *(_DWORD *)(v119 - 8);
  v122 = WTF::ASCIICaseInsensitiveHash::hash(this, v20) & v121;
  v123 = (WTF **)(v119 + 16 * v122);
  if ((WTF::equal(*v123, 0, v124) & 1) != 0)
  {
LABEL_151:
    v127 = *v118;
    if (!*v118)
      goto LABEL_166;
    v128 = *(unsigned int *)(v127 - 4);
    v123 = (WTF **)(v127 + 16 * v128);
    goto LABEL_160;
  }
  v126 = 1;
  while (*v123 == (WTF *)-1 || (WTF::equalIgnoringASCIICase(*v123, *(const WTF::StringImpl **)this, v125) & 1) == 0)
  {
    v122 = (v122 + v126) & v121;
    v123 = (WTF **)(v119 + 16 * v122);
    ++v126;
    if (WTF::equal(*v123, 0, v125))
      goto LABEL_151;
  }
  v127 = *v118;
  if (*v118)
  {
    v128 = *(unsigned int *)(v127 - 4);
LABEL_160:
    if (v123 != (WTF **)(v127 + 16 * v128))
      goto LABEL_161;
LABEL_166:
    WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::add<WebCore::RegistrableDomain const&>((uint64_t)v170, v118, this, (_DWORD **)a2);
    return;
  }
LABEL_161:
  v131 = *(WTF **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v131 += 2;
  v130 = v123[1];
  v123[1] = v131;
  if (v130)
  {
    if (*(_DWORD *)v130 != 2)
    {
      *(_DWORD *)v130 -= 2;
      return;
    }
LABEL_157:
    WTF::StringImpl::destroy(v130, v55);
  }
}

BOOL WebCore::NetworkStorageSession::loginDomainMatchesRequestingDomain(WebCore::NetworkStorageSession *this, const WTF::StringImpl **a2, const WebCore::RegistrableDomain *a3)
{
  const WTF::String *v5;
  WTF::StringImpl **v6;
  void *v7;
  _BOOL8 v8;
  WTF::StringImpl *v9;
  WTF::StringImpl **v10;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  int v15;
  int v16;
  WTF **v17;
  const WTF::StringImpl *v18;
  const WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *v21;
  _QWORD *v22;
  uint64_t v23;
  char v24;
  WTF::StringImpl **v25;
  char v26;

  WebCore::NetworkStorageSession::subResourceDomainsInNeedOfStorageAccessForFirstParty(this, (uint64_t)&v25);
  if (v26
    && (v6 = v25) != 0
    && (v15 = *((_DWORD *)v25 - 2),
        v16 = WTF::ASCIICaseInsensitiveHash::hash((WTF::ASCIICaseInsensitiveHash *)a2, v5) & v15,
        v17 = &v6[v16],
        (WTF::equal(*v17, 0, v18) & 1) == 0))
  {
    v20 = 1;
    while (*v17 == (WTF *)-1 || (WTF::equalIgnoringASCIICase(*v17, *a2, v19) & 1) == 0)
    {
      v16 = (v16 + v20) & v15;
      v17 = &v6[v16];
      ++v20;
      if (WTF::equal(*v17, 0, v19))
        goto LABEL_3;
    }
    v8 = 1;
  }
  else
  {
LABEL_3:
    WebCore::NetworkStorageSession::storageAccessQuirkForDomainPair((uint64_t)this, a2, (uint64_t)&v21);
    v8 = v24 != 0;
    if (v24)
    {
      WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v7);
      if (v22)
        WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v22, (WTF::StringImpl *)v7);
      v9 = v21;
      v21 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v7);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
  }
  if (v26)
  {
    v10 = v25;
    if (v25)
    {
      v12 = *((unsigned int *)v25 - 1);
      if ((_DWORD)v12)
      {
        v13 = v25;
        do
        {
          v14 = *v13;
          if (*v13 != (WTF::StringImpl *)-1)
          {
            *v13 = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 2)
                WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v7);
              else
                *(_DWORD *)v14 -= 2;
            }
          }
          ++v13;
          --v12;
        }
        while (v12);
      }
      WTF::fastFree((WTF *)(v10 - 2), v7);
    }
  }
  return v8;
}

WTF::StringImpl *WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::add<WebCore::RegistrableDomain const&>(uint64_t a1, uint64_t *a2, WTF::ASCIICaseInsensitiveHash *this, _DWORD **a4)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  const WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  const WTF::StringImpl *v14;
  _QWORD *v15;
  int v16;
  WTF::StringImpl *result;
  _DWORD *v18;
  WTF::StringImpl *v19;
  _DWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebCore::RegistrableDomain>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = WTF::ASCIICaseInsensitiveHash::hash(this, (const WTF::String *)a2) & v9;
  v11 = v8 + 16 * v10;
  if ((WTF::equal(*(WTF **)v11, 0, v12) & 1) == 0)
  {
    v15 = 0;
    v16 = 1;
    do
    {
      if (*(_QWORD *)v11 == -1)
      {
        v15 = (_QWORD *)v11;
      }
      else
      {
        result = (WTF::StringImpl *)WTF::equalIgnoringASCIICase(*(WTF **)v11, *(const WTF::StringImpl **)this, v14);
        if ((_DWORD)result)
        {
          v28 = *a2;
          if (*a2)
            v29 = *(unsigned int *)(v28 - 4);
          else
            v29 = 0;
          v31 = 0;
          v30 = v28 + 16 * v29;
          goto LABEL_42;
        }
      }
      v10 = (v10 + v16) & v9;
      v11 = v8 + 16 * v10;
      ++v16;
    }
    while (!WTF::equal(*(WTF **)v11, 0, v14));
    if (v15)
    {
      *v15 = 0;
      v15[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v11 = (uint64_t)v15;
    }
  }
  v18 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    *v18 += 2;
  v19 = *(WTF::StringImpl **)v11;
  *(_QWORD *)v11 = v18;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v13);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *a4;
  if (*a4)
    *v20 += 2;
  result = *(WTF::StringImpl **)(v11 + 8);
  *(_QWORD *)(v11 + 8) = v20;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *a2;
  if (*a2)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
      goto LABEL_32;
  }
  else if (3 * v26 <= 4 * v25)
  {
    if (!(_DWORD)v26)
    {
      v27 = 8;
LABEL_37:
      result = (WTF::StringImpl *)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebCore::RegistrableDomain>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a2, v27, (WTF **)v11);
      v11 = (uint64_t)result;
      v23 = *a2;
      if (*a2)
        v26 = *(unsigned int *)(v23 - 4);
      else
        v26 = 0;
      goto LABEL_41;
    }
LABEL_32:
    v27 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
    goto LABEL_37;
  }
LABEL_41:
  v30 = v23 + 16 * v26;
  v31 = 1;
LABEL_42:
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v30;
  *(_BYTE *)(a1 + 16) = v31;
  return result;
}

WTF::StringImpl *WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::add<WebCore::RegistrableDomain const&>(uint64_t a1, uint64_t *a2, _QWORD *a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unint64_t *v21;
  WTF::StringImpl *result;
  unint64_t v23;
  unint64_t *v24;
  int v25;
  _DWORD *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  char v35;
  uint64_t v36;

  v6 = a2;
  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a2, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = a3[1];
  v12 = (*a3 >> 5) & 0x7FFF800 ^ (((unsigned __int16)*a3 - 1640531527) << 16) ^ ((unsigned __int16)*a3
                                                                                             - 1640531527);
  v13 = v12 + (unsigned __int16)WORD2(*a3) + (v12 >> 11);
  v14 = (*a3 >> 37) & 0x7FFF800 ^ (v13 << 16) ^ v13;
  v15 = (v11 >> 5) & 0x7FFF800 ^ ((v14 + (unsigned __int16)v11 + (v14 >> 11)) << 16) ^ (v14 + (unsigned __int16)v11 + (v14 >> 11));
  v16 = (v11 >> 37) & 0x7FFF800 ^ ((v15 + WORD2(v11) + (v15 >> 11)) << 16) ^ (v15 + WORD2(v11) + (v15 >> 11));
  v17 = (v16 + (v16 >> 11)) ^ (8 * (v16 + (v16 >> 11)));
  v18 = (v17 + (v17 >> 5)) ^ (4 * (v17 + (v17 >> 5)));
  v19 = (v18 + (v18 >> 15)) ^ ((v18 + (v18 >> 15)) << 10);
  if (!v19)
    v19 = 0x800000;
  v20 = v19 & v10;
  v21 = (unint64_t *)(v8 + 24 * (v19 & v10));
  result = (WTF::StringImpl *)*v21;
  v23 = v21[1];
  if (*(_OWORD *)v21 != 0)
  {
    v24 = 0;
    v25 = 1;
    do
    {
      if (result == (WTF::StringImpl *)*a3 && v23 == v11)
      {
        if ((v9 & 1) != 0)
          v34 = 0;
        else
          v34 = *(_DWORD *)(v8 - 4);
        v35 = 0;
        v36 = v8 + 24 * v34;
        goto LABEL_41;
      }
      if (v23 == -1)
        v24 = v21;
      v20 = (v20 + v25) & v10;
      v21 = (unint64_t *)(v8 + 24 * v20);
      result = (WTF::StringImpl *)*v21;
      v23 = v21[1];
      ++v25;
      a2 = (uint64_t *)(*v21 | v23);
    }
    while (a2);
    if (v24)
    {
      *v24 = 0;
      v24[1] = 0;
      v24[2] = 0;
      --*(_DWORD *)(*v6 - 16);
      v21 = v24;
    }
  }
  *(_OWORD *)v21 = *(_OWORD *)a3;
  v26 = *a4;
  if (*a4)
    *v26 += 2;
  result = (WTF::StringImpl *)v21[2];
  v21[2] = (unint64_t)v26;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  v27 = *v6;
  if (*v6)
    v28 = *(_DWORD *)(v27 - 12) + 1;
  else
    v28 = 1;
  *(_DWORD *)(v27 - 12) = v28;
  v29 = *v6;
  if (*v6)
    v30 = *(_DWORD *)(v29 - 12);
  else
    v30 = 0;
  v31 = (*(_DWORD *)(v29 - 16) + v30);
  v32 = *(unsigned int *)(v29 - 4);
  if (v32 > 0x400)
  {
    if (v32 <= 2 * v31)
      goto LABEL_29;
  }
  else if (3 * v32 <= 4 * v31)
  {
    if (!(_DWORD)v32)
    {
      v33 = 8;
LABEL_36:
      result = (WTF::StringImpl *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(v6, v33, v21);
      v21 = (unint64_t *)result;
      v29 = *v6;
      if (*v6)
        LODWORD(v32) = *(_DWORD *)(v29 - 4);
      else
        LODWORD(v32) = 0;
      goto LABEL_40;
    }
LABEL_29:
    v33 = (_DWORD)v32 << (6 * *(_DWORD *)(v29 - 12) >= (2 * v32));
    goto LABEL_36;
  }
LABEL_40:
  v36 = v29 + 24 * v32;
  v35 = 1;
LABEL_41:
  *(_QWORD *)a1 = v21;
  *(_QWORD *)(a1 + 8) = v36;
  *(_BYTE *)(a1 + 16) = v35;
  return result;
}

WTF::StringImpl *WebCore::NetworkStorageSession::removeStorageAccessForFrame(WTF::StringImpl *result, WTF::StringImpl *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  WTF::StringImpl **v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v29;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;

  v4 = *((_QWORD *)result + 21);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = (~(a4 << 32) + a4) ^ ((unint64_t)(~(a4 << 32) + a4) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(_QWORD *)(v4 + 16 * v9);
    if (v10 != a4)
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v5;
        v10 = *(_QWORD *)(v4 + 16 * v9);
        ++v11;
        if (v10 == a4)
          goto LABEL_8;
      }
      v9 = *(unsigned int *)(v4 - 4);
    }
LABEL_8:
    if (v9 != *(_DWORD *)(v4 - 4))
    {
      v12 = v4 + 16 * v9;
      v15 = *(_QWORD *)(v12 + 8);
      v14 = (uint64_t *)(v12 + 8);
      v13 = v15;
      if (v15)
      {
        v16 = *(_DWORD *)(v13 - 8);
        v17 = (a2 >> 5) & 0x7FFF800 ^ (((unsigned __int16)a2 - 1640531527) << 16) ^ ((unsigned __int16)a2
                                                                                                 - 1640531527);
        v18 = ((unint64_t)a2 >> 37) & 0x7FFF800 ^ ((v17 + WORD2(a2) + (v17 >> 11)) << 16) ^ (v17
                                                                                                  + WORD2(a2)
                                                                                                  + (v17 >> 11));
        v19 = (a3 >> 5) & 0x7FFF800 ^ ((v18 + (unsigned __int16)a3 + (v18 >> 11)) << 16) ^ (v18 + (unsigned __int16)a3 + (v18 >> 11));
        v20 = (a3 >> 37) & 0x7FFF800 ^ ((v19 + WORD2(a3) + (v19 >> 11)) << 16) ^ (v19 + WORD2(a3) + (v19 >> 11));
        v21 = (v20 + (v20 >> 11)) ^ (8 * (v20 + (v20 >> 11)));
        v22 = (v21 + (v21 >> 5)) ^ (4 * (v21 + (v21 >> 5)));
        v23 = (v22 + (v22 >> 15)) ^ ((v22 + (v22 >> 15)) << 10);
        if (!v23)
          v23 = 0x800000;
        v24 = v16 & v23;
        v25 = (WTF::StringImpl **)(v13 + 24 * (v16 & v23));
        v26 = *v25;
        v27 = v25[1];
        if (*v25 == a2 && v27 == (WTF::StringImpl *)a3)
        {
LABEL_23:
          if (v25 != (WTF::StringImpl **)(v13 + 24 * *(unsigned int *)(v13 - 4)))
          {
            *(_OWORD *)v25 = xmmword_1968C18F0;
            result = v25[2];
            v25[2] = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
              else
                *(_DWORD *)result -= 2;
            }
            ++*(_DWORD *)(*v14 - 16);
            v31 = *v14;
            if (*v14)
              v32 = *(_DWORD *)(v31 - 12) - 1;
            else
              v32 = -1;
            *(_DWORD *)(v31 - 12) = v32;
            v33 = *v14;
            if (*v14)
            {
              v34 = 6 * *(_DWORD *)(v33 - 12);
              v35 = *(_DWORD *)(v33 - 4);
              if (v34 < v35 && v35 >= 9)
                return (WTF::StringImpl *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(v14, v35 >> 1, 0);
            }
          }
        }
        else
        {
          v29 = 1;
          while ((unint64_t)v26 | (unint64_t)v27)
          {
            v24 = (v24 + v29) & v16;
            v25 = (WTF::StringImpl **)(v13 + 24 * v24);
            v26 = *v25;
            v27 = v25[1];
            ++v29;
            if (*v25 == a2 && v27 == (WTF::StringImpl *)a3)
              goto LABEL_23;
          }
        }
      }
    }
  }
  return result;
}

void WebCore::NetworkStorageSession::clearPageSpecificDataForResourceLoadStatistics(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v25;
  uint64_t *v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl **v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  int v52;
  uint64_t *v53;
  _QWORD *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;

  v5 = (uint64_t *)(a1 + 176);
  v4 = *(_QWORD *)(a1 + 176);
  if (v4)
  {
    v6 = *(_DWORD *)(v4 - 8);
    v7 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v4 + 16 * v10);
    if (v11 != a2)
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v4 + 16 * v10);
        ++v12;
        if (v11 == a2)
          goto LABEL_8;
      }
      v10 = *(unsigned int *)(v4 - 4);
    }
LABEL_8:
    if (v10 != *(_DWORD *)(v4 - 4))
    {
      v13 = (_QWORD *)(v4 + 16 * v10);
      *v13 = -1;
      v14 = v13[1];
      if (v14)
      {
        v15 = *(unsigned int *)(v14 - 4);
        if ((_DWORD)v15)
        {
          v16 = (WTF::StringImpl **)v13[1];
          do
          {
            v17 = *v16;
            if (*v16 != (WTF::StringImpl *)-1)
            {
              v18 = v16[1];
              v16[1] = 0;
              if (v18)
              {
                if (*(_DWORD *)v18 == 2)
                {
                  WTF::StringImpl::destroy(v18, a2);
                  v17 = *v16;
                }
                else
                {
                  *(_DWORD *)v18 -= 2;
                }
              }
              *v16 = 0;
              if (v17)
              {
                if (*(_DWORD *)v17 == 2)
                  WTF::StringImpl::destroy(v17, a2);
                else
                  *(_DWORD *)v17 -= 2;
              }
            }
            v16 += 2;
            --v15;
          }
          while (v15);
        }
        WTF::fastFree((WTF *)(v14 - 16), a2);
      }
      ++*(_DWORD *)(*v5 - 16);
      v19 = *v5;
      if (*v5)
        v20 = *(_DWORD *)(v19 - 12) - 1;
      else
        v20 = -1;
      *(_DWORD *)(v19 - 12) = v20;
      v21 = *v5;
      if (*v5)
      {
        v22 = 6 * *(_DWORD *)(v21 - 12);
        v23 = *(_DWORD *)(v21 - 4);
        if (v22 < v23 && v23 >= 9)
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v5, v23 >> 1);
      }
    }
  }
  v26 = (uint64_t *)(a1 + 168);
  v25 = *(_QWORD *)(a1 + 168);
  if (v25)
  {
    v27 = *(_DWORD *)(v25 - 8);
    v28 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
    v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
    v31 = v27 & ((v30 >> 31) ^ v30);
    v32 = *(WTF::StringImpl **)(v25 + 16 * v31);
    if (v32 != a2)
    {
      v33 = 1;
      while (v32)
      {
        v31 = ((_DWORD)v31 + v33) & v27;
        v32 = *(WTF::StringImpl **)(v25 + 16 * v31);
        ++v33;
        if (v32 == a2)
          goto LABEL_41;
      }
      v31 = *(unsigned int *)(v25 - 4);
    }
LABEL_41:
    if (v31 != *(_DWORD *)(v25 - 4))
    {
      v34 = (_QWORD *)(v25 + 16 * v31);
      *v34 = -1;
      v35 = v34[1];
      if (v35)
      {
        v36 = *(unsigned int *)(v35 - 4);
        if ((_DWORD)v36)
        {
          v37 = (WTF::StringImpl **)(v35 + 16);
          do
          {
            if (*(v37 - 1) != (WTF::StringImpl *)-1)
            {
              v38 = *v37;
              *v37 = 0;
              if (v38)
              {
                if (*(_DWORD *)v38 == 2)
                  WTF::StringImpl::destroy(v38, a2);
                else
                  *(_DWORD *)v38 -= 2;
              }
            }
            v37 += 3;
            --v36;
          }
          while (v36);
        }
        WTF::fastFree((WTF *)(v35 - 16), a2);
      }
      ++*(_DWORD *)(*v26 - 16);
      v39 = *v26;
      if (*v26)
        v40 = *(_DWORD *)(v39 - 12) - 1;
      else
        v40 = -1;
      *(_DWORD *)(v39 - 12) = v40;
      v41 = *v26;
      if (*v26)
      {
        v42 = 6 * *(_DWORD *)(v41 - 12);
        v43 = *(_DWORD *)(v41 - 4);
        if (v42 < v43 && v43 >= 9)
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash((uint64_t *)(a1 + 168), v43 >> 1);
      }
    }
  }
  if (!*(_BYTE *)(a1 + 264))
  {
    v45 = *(_QWORD *)(a1 + 256);
    if (v45)
    {
      v46 = *(_DWORD *)(v45 - 8);
      v47 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
      v48 = 9 * ((v47 + ~(v47 << 13)) ^ ((v47 + ~(v47 << 13)) >> 8));
      v49 = (v48 ^ (v48 >> 15)) + ~((v48 ^ (v48 >> 15)) << 27);
      v50 = v46 & ((v49 >> 31) ^ v49);
      v51 = *(WTF::StringImpl **)(v45 + 16 * v50);
      if (v51 != a2)
      {
        v52 = 1;
        while (v51)
        {
          v50 = ((_DWORD)v50 + v52) & v46;
          v51 = *(WTF::StringImpl **)(v45 + 16 * v50);
          ++v52;
          if (v51 == a2)
            goto LABEL_72;
        }
        v50 = *(unsigned int *)(v45 - 4);
      }
LABEL_72:
      if (v50 != *(_DWORD *)(v45 - 4))
      {
        v53 = (uint64_t *)(a1 + 256);
        v54 = (_QWORD *)(v45 + 16 * v50);
        v55 = (WTF::StringImpl *)v54[1];
        *v54 = -1;
        v54[1] = 0;
        if (v55)
        {
          if (*(_DWORD *)v55 == 2)
            WTF::StringImpl::destroy(v55, a2);
          else
            *(_DWORD *)v55 -= 2;
        }
        ++*(_DWORD *)(*v53 - 16);
        v56 = *v53;
        if (*v53)
          v57 = *(_DWORD *)(v56 - 12) - 1;
        else
          v57 = -1;
        *(_DWORD *)(v56 - 12) = v57;
        v58 = *v53;
        if (*v53)
        {
          v59 = 6 * *(_DWORD *)(v58 - 12);
          v60 = *(_DWORD *)(v58 - 4);
          if (v59 < v60 && v60 >= 9)
            WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v53, v60 >> 1);
        }
      }
    }
  }
}

uint64_t WebCore::NetworkStorageSession::removeAllStorageAccess(WebCore::NetworkStorageSession *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  uint64_t result;

  v3 = *((_QWORD *)this + 22);
  if (v3)
  {
    *((_QWORD *)this + 22) = 0;
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v3, a2);
  }
  v4 = *((_QWORD *)this + 21);
  if (v4)
  {
    *((_QWORD *)this + 21) = 0;
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)(v4 + 16 * i) != -1)
        {
          v7 = *(_QWORD *)(v4 + 16 * i + 8);
          if (v7)
          {
            v8 = *(unsigned int *)(v7 - 4);
            if ((_DWORD)v8)
            {
              v9 = (WTF::StringImpl **)(v7 + 16);
              do
              {
                if (*(v9 - 1) != (WTF::StringImpl *)-1)
                {
                  v10 = *v9;
                  *v9 = 0;
                  if (v10)
                  {
                    if (*(_DWORD *)v10 == 2)
                      WTF::StringImpl::destroy(v10, a2);
                    else
                      *(_DWORD *)v10 -= 2;
                  }
                }
                v9 += 3;
                --v8;
              }
              while (v8);
            }
            WTF::fastFree((WTF *)(v7 - 16), a2);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  result = *((_QWORD *)this + 23);
  if (result)
  {
    *((_QWORD *)this + 23) = 0;
    return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(result, a2);
  }
  return result;
}

uint64_t WebCore::NetworkStorageSession::resetCacheMaxAgeCapForPrevalentResources(uint64_t this)
{
  if (*(_BYTE *)(this + 200))
    *(_BYTE *)(this + 200) = 0;
  return this;
}

uint64_t *WebCore::NetworkStorageSession::didCommitCrossSiteLoadWithDataTransferFromPrevalentResource(uint64_t *result, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  _DWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;

  v5 = result + 32;
  v6 = result[32];
  if (v6
    || (result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(result + 32, 8u), (v6 = *v5) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = (_QWORD *)(v6 + 16 * v11);
  v13 = *v12;
  if (!*v12)
  {
LABEL_12:
    *v12 = a3;
    v16 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v16 += 2;
    result = (uint64_t *)v12[1];
    v12[1] = v16;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      else
        *(_DWORD *)result -= 2;
    }
    v17 = *v5;
    if (*v5)
      v18 = *(_DWORD *)(v17 - 12) + 1;
    else
      v18 = 1;
    *(_DWORD *)(v17 - 12) = v18;
    v19 = *v5;
    if (*v5)
      v20 = *(_DWORD *)(v19 - 12);
    else
      v20 = 0;
    v21 = (*(_DWORD *)(v19 - 16) + v20);
    v22 = *(unsigned int *)(v19 - 4);
    if (v22 > 0x400)
    {
      if (v22 > 2 * v21)
        return result;
    }
    else
    {
      if (3 * v22 > 4 * v21)
        return result;
      if (!(_DWORD)v22)
      {
        v23 = 8;
        return (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v5, v23);
      }
    }
    v23 = (_DWORD)v22 << (6 * *(_DWORD *)(v19 - 12) >= (2 * v22));
    return (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v5, v23);
  }
  v14 = 0;
  v15 = 1;
  while (v13 != a3)
  {
    if (v13 == -1)
      v14 = v12;
    v11 = (v11 + v15) & v7;
    v12 = (_QWORD *)(v6 + 16 * v11);
    v13 = *v12;
    ++v15;
    if (!*v12)
    {
      if (v14)
      {
        *v14 = 0;
        v14[1] = 0;
        --*(_DWORD *)(*v5 - 16);
        v12 = v14;
      }
      goto LABEL_12;
    }
  }
  return result;
}

uint64_t WebCore::NetworkStorageSession::resetCrossSiteLoadsWithLinkDecorationForTesting(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;

  v2 = this;
  v3 = *(_QWORD *)(this + 256);
  if (v3)
  {
    *(_QWORD *)(this + 256) = 0;
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (WTF::StringImpl **)(v3 + 8);
      do
      {
        if (*(v5 - 1) != (WTF::StringImpl *)-1)
        {
          v6 = *v5;
          *v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2)
              WTF::StringImpl::destroy(v6, a2);
            else
              *(_DWORD *)v6 -= 2;
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    this = WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  *(_BYTE *)(v2 + 264) = 1;
  return this;
}

uint64_t WebCore::NetworkStorageSession::setAppBoundDomains(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;

  v2 = this;
  v3 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v4 = *(WTF::StringImpl ***)(this + 272);
  *(_QWORD *)(this + 272) = v3;
  if (v4)
  {
    v5 = *((unsigned int *)v4 - 1);
    if ((_DWORD)v5)
    {
      v6 = v4;
      do
      {
        v7 = *v6;
        if (*v6 != (WTF::StringImpl *)-1)
        {
          *v6 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2)
              WTF::StringImpl::destroy(v7, a2);
            else
              *(_DWORD *)v7 -= 2;
          }
        }
        ++v6;
        --v5;
      }
      while (v5);
    }
    this = WTF::fastFree((WTF *)(v4 - 2), a2);
  }
  if (*(_BYTE *)(v2 + 265) == 1)
    return WebCore::NetworkStorageSession::cookieEnabledStateMayHaveChanged(v2);
  return this;
}

uint64_t WebCore::NetworkStorageSession::resetAppBoundDomains(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl **v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;

  v2 = this;
  v3 = *(WTF::StringImpl ***)(this + 272);
  if (v3)
  {
    *(_QWORD *)(this + 272) = 0;
    v4 = *((unsigned int *)v3 - 1);
    if ((_DWORD)v4)
    {
      v5 = v3;
      do
      {
        v6 = *v5;
        if (*v5 != (WTF::StringImpl *)-1)
        {
          *v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2)
              WTF::StringImpl::destroy(v6, a2);
            else
              *(_DWORD *)v6 -= 2;
          }
        }
        ++v5;
        --v4;
      }
      while (v4);
    }
    this = WTF::fastFree((WTF *)(v3 - 2), a2);
  }
  if (*(_BYTE *)(v2 + 265) == 1)
    return WebCore::NetworkStorageSession::cookieEnabledStateMayHaveChanged(v2);
  return this;
}

uint64_t WebCore::NetworkStorageSession::setManagedDomains(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;

  v2 = this;
  v3 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v4 = *(WTF::StringImpl ***)(this + 280);
  *(_QWORD *)(this + 280) = v3;
  if (v4)
  {
    v5 = *((unsigned int *)v4 - 1);
    if ((_DWORD)v5)
    {
      v6 = v4;
      do
      {
        v7 = *v6;
        if (*v6 != (WTF::StringImpl *)-1)
        {
          *v6 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2)
              WTF::StringImpl::destroy(v7, a2);
            else
              *(_DWORD *)v7 -= 2;
          }
        }
        ++v6;
        --v5;
      }
      while (v5);
    }
    this = WTF::fastFree((WTF *)(v4 - 2), a2);
  }
  if (*(_BYTE *)(v2 + 265) == 2)
    return WebCore::NetworkStorageSession::cookieEnabledStateMayHaveChanged(v2);
  return this;
}

uint64_t WebCore::NetworkStorageSession::resetManagedDomains(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl **v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;

  v2 = this;
  v3 = *(WTF::StringImpl ***)(this + 280);
  if (v3)
  {
    *(_QWORD *)(this + 280) = 0;
    v4 = *((unsigned int *)v3 - 1);
    if ((_DWORD)v4)
    {
      v5 = v3;
      do
      {
        v6 = *v5;
        if (*v5 != (WTF::StringImpl *)-1)
        {
          *v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2)
              WTF::StringImpl::destroy(v6, a2);
            else
              *(_DWORD *)v6 -= 2;
          }
        }
        ++v5;
        --v4;
      }
      while (v4);
    }
    this = WTF::fastFree((WTF *)(v3 - 2), a2);
  }
  if (*(_BYTE *)(v2 + 265) == 2)
    return WebCore::NetworkStorageSession::cookieEnabledStateMayHaveChanged(v2);
  return this;
}

unint64_t WebCore::NetworkStorageSession::clientSideCookieCap(uint64_t a1, const WTF::StringImpl **a2, const WTF::StringImpl *a3, char a4)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const WTF::StringImpl *v11;
  int v12;
  unint64_t v13;

  if (a4)
  {
    v5 = *(_QWORD *)(a1 + 256);
    if (v5)
    {
      v6 = *(_DWORD *)(v5 - 8);
      v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
      v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
      v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
      v10 = v6 & ((v9 >> 31) ^ v9);
      v11 = *(const WTF::StringImpl **)(v5 + 16 * v10);
      if (v11 != a3)
      {
        v12 = 1;
        while (v11)
        {
          v10 = ((_DWORD)v10 + v12) & v6;
          v11 = *(const WTF::StringImpl **)(v5 + 16 * v10);
          ++v12;
          if (v11 == a3)
            goto LABEL_11;
        }
        v10 = *(unsigned int *)(v5 - 4);
      }
LABEL_11:
      if (v10 != *(_DWORD *)(v5 - 4) && WTF::equal(*(WTF **)(v5 + 16 * v10 + 8), *a2, a3))
      {
        v13 = *(_QWORD *)(a1 + 240) & 0xFFFFFFFFFFFFFF00;
        v5 = *(_QWORD *)(a1 + 240);
        return v13 | v5;
      }
      v5 = 0;
    }
    v13 = 0;
    return v13 | v5;
  }
  v5 = 0;
  v13 = 0;
  return v13 | v5;
}

uint64_t *WebCore::NetworkStorageSession::storageAccessQuirks(WebCore::NetworkStorageSession *this)
{
  WTF::StringImpl *v2;
  int v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v20;
  int v21;
  WTF::StringImpl *v22;
  int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  int v30;
  WTF::StringImpl *v31;
  int v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  int v38;
  WTF::StringImpl *v39;
  int v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  WTF::StringImpl **v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  _QWORD v73[3];
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76[2];

  v76[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  if ((byte_1ECE841B2 & 1) == 0)
  {
    v71 = 0;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v2 = (WTF::StringImpl *)v73[0];
    if (v73[0])
    {
      v3 = *(_DWORD *)(v73[0] + 4);
      *(_DWORD *)v73[0] += 2;
      if (v3)
      {
        v74 = v2;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v74 = (WTF::StringImpl *)v73[0];
        if (*(_DWORD *)v2 == 2)
          WTF::StringImpl::destroy(v2, v60);
        else
          *(_DWORD *)v2 -= 2;
      }
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v74 = 0;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = (WTF::StringImpl *)v73[0];
    if (v73[0])
    {
      v5 = *(_DWORD *)(v73[0] + 4);
      *(_DWORD *)v73[0] += 2;
      if (v5)
      {
        v76[0] = v4;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v76[0] = (WTF::StringImpl *)v73[0];
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, v61);
        else
          *(_DWORD *)v4 -= 2;
      }
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v76[0] = 0;
    }
    v72 = 0;
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((WTF::ASCIICaseInsensitiveHash *)v76, (uint64_t *)&v72, (uint64_t)v73);
    WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>((uint64_t)v73, &v71, (WTF::ASCIICaseInsensitiveHash *)&v74, (uint64_t *)&v72);
    v7 = v72;
    if (v72)
    {
      v45 = *((unsigned int *)v72 - 1);
      if ((_DWORD)v45)
      {
        v46 = v72;
        do
        {
          v47 = *(WTF::StringImpl **)v46;
          if (*(_QWORD *)v46 != -1)
          {
            *(_QWORD *)v46 = 0;
            if (v47)
            {
              if (*(_DWORD *)v47 == 2)
                WTF::StringImpl::destroy(v47, v6);
              else
                *(_DWORD *)v47 -= 2;
            }
          }
          v46 = (WTF::StringImpl *)((char *)v46 + 8);
          --v45;
        }
        while (v45);
      }
      WTF::fastFree((WTF::StringImpl *)((char *)v7 - 16), v6);
    }
    v8 = v76[0];
    v76[0] = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
      {
        WTF::StringImpl::destroy(v8, v6);
        if (!v4)
          goto LABEL_16;
        goto LABEL_14;
      }
      *(_DWORD *)v8 -= 2;
    }
    if (!v4)
      goto LABEL_16;
LABEL_14:
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v6);
    else
      *(_DWORD *)v4 -= 2;
LABEL_16:
    v9 = v74;
    v74 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
      {
        WTF::StringImpl::destroy(v9, v6);
        if (v2)
        {
LABEL_20:
          if (*(_DWORD *)v2 == 2)
            WTF::StringImpl::destroy(v2, v6);
          else
            *(_DWORD *)v2 -= 2;
        }
LABEL_22:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v10 = (WTF::StringImpl *)v73[0];
        if (v73[0])
        {
          v11 = *(_DWORD *)(v73[0] + 4);
          *(_DWORD *)v73[0] += 2;
          if (v11)
          {
            v74 = v10;
          }
          else
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v74 = (WTF::StringImpl *)v73[0];
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, v62);
            else
              *(_DWORD *)v10 -= 2;
          }
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v74 = (WTF::StringImpl *)v73[0];
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v12 = (WTF::StringImpl *)v73[0];
        if (v73[0])
        {
          v13 = *(_DWORD *)(v73[0] + 4);
          *(_DWORD *)v73[0] += 2;
          if (v13)
          {
            v76[0] = v12;
          }
          else
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v76[0] = (WTF::StringImpl *)v73[0];
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v63);
            else
              *(_DWORD *)v12 -= 2;
          }
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v76[0] = (WTF::StringImpl *)v73[0];
        }
        v72 = 0;
        WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((WTF::ASCIICaseInsensitiveHash *)v76, (uint64_t *)&v72, (uint64_t)v73);
        WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>((uint64_t)v73, &v71, (WTF::ASCIICaseInsensitiveHash *)&v74, (uint64_t *)&v72);
        v15 = v72;
        if (v72)
        {
          v48 = *((unsigned int *)v72 - 1);
          if ((_DWORD)v48)
          {
            v49 = v72;
            do
            {
              v50 = *(WTF::StringImpl **)v49;
              if (*(_QWORD *)v49 != -1)
              {
                *(_QWORD *)v49 = 0;
                if (v50)
                {
                  if (*(_DWORD *)v50 == 2)
                    WTF::StringImpl::destroy(v50, v14);
                  else
                    *(_DWORD *)v50 -= 2;
                }
              }
              v49 = (WTF::StringImpl *)((char *)v49 + 8);
              --v48;
            }
            while (v48);
          }
          WTF::fastFree((WTF::StringImpl *)((char *)v15 - 16), v14);
        }
        v16 = v76[0];
        v76[0] = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
          {
            WTF::StringImpl::destroy(v16, v14);
            if (!v12)
              goto LABEL_35;
            goto LABEL_33;
          }
          *(_DWORD *)v16 -= 2;
        }
        if (!v12)
          goto LABEL_35;
LABEL_33:
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v14);
        else
          *(_DWORD *)v12 -= 2;
LABEL_35:
        v17 = v74;
        v74 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
          {
            WTF::StringImpl::destroy(v17, v14);
            if (v10)
            {
LABEL_39:
              if (*(_DWORD *)v10 == 2)
                WTF::StringImpl::destroy(v10, v14);
              else
                *(_DWORD *)v10 -= 2;
            }
LABEL_41:
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v18 = (WTF::StringImpl *)v73[0];
            if (v73[0])
            {
              v19 = *(_DWORD *)(v73[0] + 4);
              *(_DWORD *)v73[0] += 2;
              if (v19)
              {
                v72 = v18;
              }
              else
              {
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v72 = (WTF::StringImpl *)v73[0];
                if (*(_DWORD *)v18 == 2)
                  WTF::StringImpl::destroy(v18, v64);
                else
                  *(_DWORD *)v18 -= 2;
              }
            }
            else
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v72 = (WTF::StringImpl *)v73[0];
            }
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v20 = (WTF::StringImpl *)v73[0];
            if (v73[0])
            {
              v21 = *(_DWORD *)(v73[0] + 4);
              *(_DWORD *)v73[0] += 2;
              if (v21)
              {
                v74 = v20;
              }
              else
              {
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v74 = (WTF::StringImpl *)v73[0];
                if (*(_DWORD *)v20 == 2)
                  WTF::StringImpl::destroy(v20, v65);
                else
                  *(_DWORD *)v20 -= 2;
              }
            }
            else
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v74 = (WTF::StringImpl *)v73[0];
            }
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v22 = (WTF::StringImpl *)v73[0];
            if (v73[0])
            {
              v23 = *(_DWORD *)(v73[0] + 4);
              *(_DWORD *)v73[0] += 2;
              if (v23)
              {
                v75 = v22;
              }
              else
              {
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v75 = (WTF::StringImpl *)v73[0];
                if (*(_DWORD *)v22 == 2)
                  WTF::StringImpl::destroy(v22, v66);
                else
                  *(_DWORD *)v22 -= 2;
              }
            }
            else
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v75 = (WTF::StringImpl *)v73[0];
            }
            v76[0] = 0;
            WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((WTF::ASCIICaseInsensitiveHash *)&v74, (uint64_t *)v76, (uint64_t)v73);
            WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((WTF::ASCIICaseInsensitiveHash *)&v75, (uint64_t *)v76, (uint64_t)v73);
            WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>((uint64_t)v73, &v71, (WTF::ASCIICaseInsensitiveHash *)&v72, (uint64_t *)v76);
            v25 = v76[0];
            if (v76[0])
            {
              v51 = *((unsigned int *)v76[0] - 1);
              if ((_DWORD)v51)
              {
                v52 = (WTF::StringImpl **)v76[0];
                do
                {
                  v53 = *v52;
                  if (*v52 != (WTF::StringImpl *)-1)
                  {
                    *v52 = 0;
                    if (v53)
                    {
                      if (*(_DWORD *)v53 == 2)
                        WTF::StringImpl::destroy(v53, v24);
                      else
                        *(_DWORD *)v53 -= 2;
                    }
                  }
                  ++v52;
                  --v51;
                }
                while (v51);
              }
              WTF::fastFree((WTF::StringImpl *)((char *)v25 - 16), v24);
            }
            v26 = v75;
            v75 = 0;
            if (v26)
            {
              if (*(_DWORD *)v26 == 2)
                WTF::StringImpl::destroy(v26, v24);
              else
                *(_DWORD *)v26 -= 2;
            }
            v27 = v74;
            v74 = 0;
            if (v27)
            {
              if (*(_DWORD *)v27 == 2)
              {
                WTF::StringImpl::destroy(v27, v24);
                if (!v22)
                  goto LABEL_60;
                goto LABEL_58;
              }
              *(_DWORD *)v27 -= 2;
            }
            if (!v22)
              goto LABEL_60;
LABEL_58:
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v24);
            else
              *(_DWORD *)v22 -= 2;
LABEL_60:
            if (v20)
            {
              if (*(_DWORD *)v20 == 2)
                WTF::StringImpl::destroy(v20, v24);
              else
                *(_DWORD *)v20 -= 2;
            }
            v28 = v72;
            v72 = 0;
            if (v28)
            {
              if (*(_DWORD *)v28 == 2)
              {
                WTF::StringImpl::destroy(v28, v24);
                if (v18)
                {
LABEL_67:
                  if (*(_DWORD *)v18 == 2)
                    WTF::StringImpl::destroy(v18, v24);
                  else
                    *(_DWORD *)v18 -= 2;
                }
LABEL_69:
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v29 = (WTF::StringImpl *)v73[0];
                if (v73[0])
                {
                  v30 = *(_DWORD *)(v73[0] + 4);
                  *(_DWORD *)v73[0] += 2;
                  if (v30)
                  {
                    v74 = v29;
                  }
                  else
                  {
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v74 = (WTF::StringImpl *)v73[0];
                    if (*(_DWORD *)v29 == 2)
                      WTF::StringImpl::destroy(v29, v67);
                    else
                      *(_DWORD *)v29 -= 2;
                  }
                }
                else
                {
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v74 = (WTF::StringImpl *)v73[0];
                }
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v31 = (WTF::StringImpl *)v73[0];
                if (v73[0])
                {
                  v32 = *(_DWORD *)(v73[0] + 4);
                  *(_DWORD *)v73[0] += 2;
                  if (v32)
                  {
                    v76[0] = v31;
                  }
                  else
                  {
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v76[0] = (WTF::StringImpl *)v73[0];
                    if (*(_DWORD *)v31 == 2)
                      WTF::StringImpl::destroy(v31, v68);
                    else
                      *(_DWORD *)v31 -= 2;
                  }
                }
                else
                {
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v76[0] = (WTF::StringImpl *)v73[0];
                }
                v72 = 0;
                WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((WTF::ASCIICaseInsensitiveHash *)v76, (uint64_t *)&v72, (uint64_t)v73);
                WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>((uint64_t)v73, &v71, (WTF::ASCIICaseInsensitiveHash *)&v74, (uint64_t *)&v72);
                v34 = v72;
                if (v72)
                {
                  v54 = *((unsigned int *)v72 - 1);
                  if ((_DWORD)v54)
                  {
                    v55 = v72;
                    do
                    {
                      v56 = *(WTF::StringImpl **)v55;
                      if (*(_QWORD *)v55 != -1)
                      {
                        *(_QWORD *)v55 = 0;
                        if (v56)
                        {
                          if (*(_DWORD *)v56 == 2)
                            WTF::StringImpl::destroy(v56, v33);
                          else
                            *(_DWORD *)v56 -= 2;
                        }
                      }
                      v55 = (WTF::StringImpl *)((char *)v55 + 8);
                      --v54;
                    }
                    while (v54);
                  }
                  WTF::fastFree((WTF::StringImpl *)((char *)v34 - 16), v33);
                }
                v35 = v76[0];
                v76[0] = 0;
                if (v35)
                {
                  if (*(_DWORD *)v35 == 2)
                  {
                    WTF::StringImpl::destroy(v35, v33);
                    if (!v31)
                      goto LABEL_82;
                    goto LABEL_80;
                  }
                  *(_DWORD *)v35 -= 2;
                }
                if (!v31)
                  goto LABEL_82;
LABEL_80:
                if (*(_DWORD *)v31 == 2)
                  WTF::StringImpl::destroy(v31, v33);
                else
                  *(_DWORD *)v31 -= 2;
LABEL_82:
                v36 = v74;
                v74 = 0;
                if (v36)
                {
                  if (*(_DWORD *)v36 == 2)
                  {
                    WTF::StringImpl::destroy(v36, v33);
                    if (v29)
                    {
LABEL_86:
                      if (*(_DWORD *)v29 == 2)
                        WTF::StringImpl::destroy(v29, v33);
                      else
                        *(_DWORD *)v29 -= 2;
                    }
LABEL_88:
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v37 = (WTF::StringImpl *)v73[0];
                    if (v73[0])
                    {
                      v38 = *(_DWORD *)(v73[0] + 4);
                      *(_DWORD *)v73[0] += 2;
                      if (v38)
                      {
                        v74 = v37;
                      }
                      else
                      {
                        WTF::StringImpl::createWithoutCopyingNonEmpty();
                        v74 = (WTF::StringImpl *)v73[0];
                        if (*(_DWORD *)v37 == 2)
                          WTF::StringImpl::destroy(v37, v69);
                        else
                          *(_DWORD *)v37 -= 2;
                      }
                    }
                    else
                    {
                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                      v74 = (WTF::StringImpl *)v73[0];
                    }
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v39 = (WTF::StringImpl *)v73[0];
                    if (v73[0])
                    {
                      v40 = *(_DWORD *)(v73[0] + 4);
                      *(_DWORD *)v73[0] += 2;
                      if (v40)
                      {
                        v76[0] = v39;
                      }
                      else
                      {
                        WTF::StringImpl::createWithoutCopyingNonEmpty();
                        v76[0] = (WTF::StringImpl *)v73[0];
                        if (*(_DWORD *)v39 == 2)
                          WTF::StringImpl::destroy(v39, v70);
                        else
                          *(_DWORD *)v39 -= 2;
                      }
                    }
                    else
                    {
                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                      v76[0] = (WTF::StringImpl *)v73[0];
                    }
                    v72 = 0;
                    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((WTF::ASCIICaseInsensitiveHash *)v76, (uint64_t *)&v72, (uint64_t)v73);
                    WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>((uint64_t)v73, &v71, (WTF::ASCIICaseInsensitiveHash *)&v74, (uint64_t *)&v72);
                    v42 = v72;
                    if (v72)
                    {
                      v57 = *((unsigned int *)v72 - 1);
                      if ((_DWORD)v57)
                      {
                        v58 = v72;
                        do
                        {
                          v59 = *(WTF::StringImpl **)v58;
                          if (*(_QWORD *)v58 != -1)
                          {
                            *(_QWORD *)v58 = 0;
                            if (v59)
                            {
                              if (*(_DWORD *)v59 == 2)
                                WTF::StringImpl::destroy(v59, v41);
                              else
                                *(_DWORD *)v59 -= 2;
                            }
                          }
                          v58 = (WTF::StringImpl *)((char *)v58 + 8);
                          --v57;
                        }
                        while (v57);
                      }
                      WTF::fastFree((WTF::StringImpl *)((char *)v42 - 16), v41);
                    }
                    v43 = v76[0];
                    v76[0] = 0;
                    if (v43)
                    {
                      if (*(_DWORD *)v43 == 2)
                      {
                        WTF::StringImpl::destroy(v43, v41);
                        if (!v39)
                          goto LABEL_101;
                        goto LABEL_99;
                      }
                      *(_DWORD *)v43 -= 2;
                    }
                    if (!v39)
                      goto LABEL_101;
LABEL_99:
                    if (*(_DWORD *)v39 == 2)
                      WTF::StringImpl::destroy(v39, v41);
                    else
                      *(_DWORD *)v39 -= 2;
LABEL_101:
                    v44 = v74;
                    v74 = 0;
                    if (v44)
                    {
                      if (*(_DWORD *)v44 == 2)
                      {
                        WTF::StringImpl::destroy(v44, v41);
                        if (v37)
                        {
LABEL_105:
                          if (*(_DWORD *)v37 == 2)
                            WTF::StringImpl::destroy(v37, v41);
                          else
                            *(_DWORD *)v37 -= 2;
                        }
LABEL_107:
                        qword_1ECE841C8 = v71;
                        byte_1ECE841B2 = 1;
                        return &qword_1ECE841C8;
                      }
                      *(_DWORD *)v44 -= 2;
                    }
                    if (v37)
                      goto LABEL_105;
                    goto LABEL_107;
                  }
                  *(_DWORD *)v36 -= 2;
                }
                if (v29)
                  goto LABEL_86;
                goto LABEL_88;
              }
              *(_DWORD *)v28 -= 2;
            }
            if (v18)
              goto LABEL_67;
            goto LABEL_69;
          }
          *(_DWORD *)v17 -= 2;
        }
        if (v10)
          goto LABEL_39;
        goto LABEL_41;
      }
      *(_DWORD *)v9 -= 2;
    }
    if (v2)
      goto LABEL_20;
    goto LABEL_22;
  }
  return &qword_1ECE841C8;
}

uint64_t *WebCore::NetworkStorageSession::subResourceDomainsInNeedOfStorageAccessForFirstParty@<X0>(WebCore::NetworkStorageSession *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  const WTF::String *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  const WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  int v12;
  uint64_t *result;
  uint64_t v14;
  char v15;

  v4 = (uint64_t)WebCore::NetworkStorageSession::storageAccessQuirks(a1);
  v6 = qword_1ECE841C8;
  if (!qword_1ECE841C8)
  {
LABEL_9:
    v9 = 0;
    goto LABEL_10;
  }
  v7 = *(_DWORD *)(qword_1ECE841C8 - 8);
  v8 = WTF::ASCIICaseInsensitiveHash::hash(a1, v5) & v7;
  v9 = v6 + 16 * v8;
  v4 = WTF::equal(*(WTF **)v9, 0, v10);
  if ((v4 & 1) != 0)
  {
LABEL_7:
    if (qword_1ECE841C8)
    {
      v9 = qword_1ECE841C8 + 16 * *(unsigned int *)(qword_1ECE841C8 - 4);
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  v12 = 1;
  while (1)
  {
    if (*(_QWORD *)v9 != -1)
    {
      v4 = WTF::equalIgnoringASCIICase(*(WTF **)v9, *(const WTF::StringImpl **)a1, v11);
      if ((v4 & 1) != 0)
        break;
    }
    v8 = (v8 + v12) & v7;
    v9 = v6 + 16 * v8;
    v4 = WTF::equal(*(WTF **)v9, 0, v11);
    ++v12;
    if ((_DWORD)v4)
      goto LABEL_7;
  }
LABEL_10:
  result = WebCore::NetworkStorageSession::storageAccessQuirks((WebCore::NetworkStorageSession *)v4);
  v14 = qword_1ECE841C8;
  if (qword_1ECE841C8)
    v14 = qword_1ECE841C8 + 16 * *(unsigned int *)(qword_1ECE841C8 - 4);
  if (v14 == v9)
  {
    v15 = 0;
    *(_BYTE *)a2 = 0;
  }
  else
  {
    result = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable((uint64_t *)a2, (WTF ***)(v9 + 8));
    v15 = 1;
  }
  *(_BYTE *)(a2 + 8) = v15;
  return result;
}

uint64_t WebCore::NetworkStorageSession::storageAccessQuirkForDomainPair@<X0>(uint64_t this@<X0>, const WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  const WTF::StringImpl **v5;
  WTF::ASCIICaseInsensitiveHash *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  const WTF::StringImpl *v15;
  const WTF::StringImpl *v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  WTF **v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  __int128 v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t *v34;
  const WTF::StringImpl **v35;

  if ((byte_1ECE841B3 & 1) == 0)
  {
    qword_1ECE841D0 = 0;
    byte_1ECE841B3 = 1;
LABEL_33:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
    return this;
  }
  if (!qword_1ECE841D0 || !*(_DWORD *)(qword_1ECE841D0 - 12))
    goto LABEL_33;
  v5 = a2;
  v6 = (WTF::ASCIICaseInsensitiveHash *)this;
  v7 = *(unsigned int *)(qword_1ECE841D0 - 4);
  if ((_DWORD)v7)
  {
    v8 = 32 * v7;
    v9 = qword_1ECE841D0;
    while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
    {
      v9 += 32;
      v8 -= 32;
      if (!v8)
        goto LABEL_33;
    }
  }
  else
  {
    v9 = qword_1ECE841D0;
  }
  v10 = qword_1ECE841D0 + 32 * v7;
  if (v9 == v10)
    goto LABEL_33;
  v32 = (uint64_t *)(a3 + 8);
  v33 = (_QWORD *)(a3 + 16);
LABEL_12:
  v11 = *(_QWORD *)(v9 + 8);
  if (!v11)
    goto LABEL_23;
  v34 = (uint64_t *)(v9 + 8);
  v35 = v5;
  v12 = *(_DWORD *)(v11 - 8);
  v13 = WTF::ASCIICaseInsensitiveHash::hash(v6, (const WTF::String *)a2) & v12;
  v14 = v11 + 24 * v13;
  this = WTF::equal(*(WTF **)v14, 0, v15);
  if ((this & 1) != 0)
  {
LABEL_18:
    v18 = (uint64_t *)(v9 + 8);
    v5 = v35;
    v19 = *v34;
    if (!*v34)
      goto LABEL_23;
    v20 = *(_DWORD *)(v19 - 4);
    v14 = v19 + 24 * v20;
  }
  else
  {
    v17 = 1;
    while (1)
    {
      if (*(_QWORD *)v14 != -1)
      {
        this = WTF::equalIgnoringASCIICase(*(WTF **)v14, *(const WTF::StringImpl **)v6, v16);
        if ((this & 1) != 0)
          break;
      }
      v13 = (v13 + v17) & v12;
      v14 = v11 + 24 * v13;
      this = WTF::equal(*(WTF **)v14, 0, v16);
      ++v17;
      if ((_DWORD)this)
        goto LABEL_18;
    }
    v18 = (uint64_t *)(v9 + 8);
    v19 = *v34;
    if (!*v34)
    {
      v5 = v35;
      goto LABEL_29;
    }
    v20 = *(_DWORD *)(v19 - 4);
    v5 = v35;
  }
  if (v14 == v19 + 24 * v20)
  {
LABEL_23:
    while (1)
    {
      v9 += 32;
      if (v9 == v10)
        goto LABEL_33;
      if ((unint64_t)(*(_QWORD *)v9 + 1) > 1)
      {
        if (v9 != v10)
          goto LABEL_12;
        goto LABEL_33;
      }
    }
  }
LABEL_29:
  v21 = *(unsigned int *)(v14 + 20);
  if (!(_DWORD)v21)
    goto LABEL_33;
  v22 = *(WTF ***)(v14 + 8);
  v23 = 8 * v21;
  while (1)
  {
    this = WTF::equal(*v22, *v5, v16);
    if ((_DWORD)this)
      break;
    ++v22;
    v23 -= 8;
    if (!v23)
      goto LABEL_33;
  }
  v24 = *(_DWORD **)v9;
  if (*(_QWORD *)v9)
    *v24 += 2;
  *(_QWORD *)a3 = v24;
  this = (uint64_t)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable(v32, v18);
  v25 = *(unsigned int *)(v9 + 28);
  *v33 = 0;
  v33[1] = 0;
  *(_DWORD *)(a3 + 28) = v25;
  if (!(_DWORD)v25)
    goto LABEL_39;
  if (v25 < 0x6666667)
  {
    v26 = 40 * v25;
    this = WTF::fastMalloc((WTF *)(40 * v25));
    *(_DWORD *)(a3 + 24) = (v26 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)(a3 + 16) = this;
    v27 = *(_DWORD *)(v9 + 28);
    if (v27)
    {
      v28 = *(_QWORD *)(v9 + 16);
      v29 = v28 + 40 * v27;
      do
      {
        v30 = *(_DWORD **)v28;
        if (*(_QWORD *)v28)
          *v30 += 2;
        *(_QWORD *)this = v30;
        v31 = *(_OWORD *)(v28 + 8);
        *(_OWORD *)(this + 24) = *(_OWORD *)(v28 + 24);
        *(_OWORD *)(this + 8) = v31;
        v28 += 40;
        this += 40;
      }
      while (v28 != v29);
    }
LABEL_39:
    *(_BYTE *)(a3 + 32) = 1;
    return this;
  }
  __break(0xC471u);
  return this;
}

BOOL WebCore::NetworkStorageSession::canRequestStorageAccessForLoginOrCompatibilityPurposesWithoutPriorUserInteraction(const WTF::StringImpl **this, const WebCore::RegistrableDomain *a2, const WebCore::RegistrableDomain *a3)
{
  return WebCore::NetworkStorageSession::loginDomainMatchesRequestingDomain(a2, this, a3);
}

uint64_t WebCore::NetworkStorageSession::storageAccessQuirkForTopFrameDomain@<X0>(uint64_t this@<X0>, const WTF::StringImpl *a2@<X2>, uint64_t a3@<X8>)
{
  const WTF::StringImpl **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  const WTF::String *v12;
  _QWORD *v13;
  int v14;
  unsigned int v15;
  WTF **v16;
  const WTF::StringImpl *v17;
  int v18;
  WTF **v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  _DWORD *v25;
  WTF::StringImpl *v26;
  _QWORD *v27;

  if ((byte_1ECE841B3 & 1) == 0)
  {
    qword_1ECE841D0 = 0;
    byte_1ECE841B3 = 1;
LABEL_48:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    return this;
  }
  if (!qword_1ECE841D0 || !*(_DWORD *)(qword_1ECE841D0 - 12))
    goto LABEL_48;
  v5 = (const WTF::StringImpl **)this;
  v6 = *(unsigned int *)(qword_1ECE841D0 - 4);
  if ((_DWORD)v6)
  {
    v7 = 32 * v6;
    v8 = qword_1ECE841D0;
    while ((unint64_t)(*(_QWORD *)v8 + 1) <= 1)
    {
      v8 += 32;
      v7 -= 32;
      if (!v7)
        goto LABEL_48;
    }
  }
  else
  {
    v8 = qword_1ECE841D0;
  }
  v9 = qword_1ECE841D0 + 32 * v6;
  if (v8 == v9)
    goto LABEL_48;
LABEL_11:
  if (*(_DWORD *)(v8 + 28))
  {
    v10 = 0;
    v11 = 0;
    while (1)
    {
      this = WTF::equal(*(WTF **)(*(_QWORD *)(v8 + 16) + v10), *v5, a2);
      if ((this & 1) != 0)
        break;
      ++v11;
      v10 += 40;
      if (v11 >= *(unsigned int *)(v8 + 28))
        goto LABEL_41;
    }
  }
  WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable((uint64_t *)&v27, (uint64_t *)(v8 + 8));
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v26, (const WTF::URL *)v5);
  v13 = v27;
  if (!v27)
  {
LABEL_24:
    v16 = 0;
    goto LABEL_25;
  }
  v14 = *((_DWORD *)v27 - 2);
  v15 = WTF::ASCIICaseInsensitiveHash::hash((WTF::ASCIICaseInsensitiveHash *)&v26, v12) & v14;
  v16 = (WTF **)&v13[3 * v15];
  if ((WTF::equal(*v16, 0, v17) & 1) != 0)
  {
LABEL_22:
    if (v27)
    {
      v16 = (WTF **)&v27[3 * *((unsigned int *)v27 - 1)];
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  v18 = 1;
  while (*v16 == (WTF *)-1 || (WTF::equalIgnoringASCIICase(*v16, v26, a2) & 1) == 0)
  {
    v15 = (v15 + v18) & v14;
    v16 = (WTF **)&v13[3 * v15];
    ++v18;
    if (WTF::equal(*v16, 0, a2))
      goto LABEL_22;
  }
LABEL_25:
  this = (uint64_t)v26;
  v26 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v12);
    else
      *(_DWORD *)this -= 2;
  }
  if (v27)
    v19 = (WTF **)&v27[3 * *((unsigned int *)v27 - 1)];
  else
    v19 = 0;
  if (v19 != v16)
  {
    v20 = *((unsigned int *)v16 + 5);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = v20;
    if ((_DWORD)v20)
    {
      if (v20 >> 29)
      {
        __break(0xC471u);
        return this;
      }
      v21 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v20));
      *(_DWORD *)(a3 + 8) = v20;
      *(_QWORD *)a3 = v21;
      v22 = *((unsigned int *)v16 + 5);
      if ((_DWORD)v22)
      {
        v23 = v16[1];
        v24 = 8 * v22;
        do
        {
          v25 = *(_DWORD **)v23;
          if (*(_QWORD *)v23)
            *v25 += 2;
          *v21++ = v25;
          v23 = (WTF *)((char *)v23 + 8);
          v24 -= 8;
        }
        while (v24);
      }
    }
  }
  this = (uint64_t)v27;
  if (v27)
    this = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v27, v12);
  if (v19 == v16)
  {
LABEL_41:
    while (1)
    {
      v8 += 32;
      if (v8 == v9)
        goto LABEL_48;
      if ((unint64_t)(*(_QWORD *)v8 + 1) > 1)
      {
        if (v8 != v9)
          goto LABEL_11;
        goto LABEL_48;
      }
    }
  }
  return this;
}

WTF::StringImpl **WebCore::NetworkStorageSession::deleteCookiesForHostnames(WebCore::NetworkStorageSession *a1, uint64_t a2, uint64_t *a3)
{
  return WebCore::NetworkStorageSession::deleteCookiesForHostnames(a1, a2, (const WTF::StringImpl *)1, 0, a3);
}

uint64_t WebCore::NetworkStorageSession::cookiesEnabled(uint64_t a1, const WTF::URL *a2, const WTF::URL *a3, uint64_t a4, uint64_t a5, char a6, char a7)
{
  __int128 v8;
  uint64_t v9;

  v8 = *(_OWORD *)a4;
  v9 = *(_QWORD *)(a4 + 16);
  return WebCore::NetworkStorageSession::shouldBlockCookies(a1, a2, a3, &v8, a5, a6, a7) ^ 1;
}

unsigned int *WebCore::NetworkStorageSession::addCookiesEnabledStateObserver(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  void *v9;
  unsigned int *result;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int **v22;
  unsigned int v24;
  void *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  WTF *v33;

  v3 = (uint64_t *)(a1 + 80);
  v4 = *(_DWORD *)(a1 + 92);
  v5 = *(_DWORD *)(a1 + 88) + 1;
  *(_DWORD *)(a1 + 88) = v5;
  if (v5 > v4)
  {
    v16 = *v3;
    if (!*v3)
    {
LABEL_15:
      v17 = 0;
      *(_DWORD *)(a1 + 88) = 0;
LABEL_16:
      v18 = v17;
LABEL_17:
      *(_DWORD *)(a1 + 92) = 2 * v18;
      goto LABEL_2;
    }
    v19 = *(_DWORD *)(v16 - 4);
    if (!v19)
      goto LABEL_31;
    v20 = 0;
    v21 = v19 - 1;
    do
    {
      v22 = (unsigned int **)(v16 + 8 * v21);
      if ((unint64_t)*v22 + 1 >= 2 && !*((_QWORD *)*v22 + 1))
      {
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(v22, a2);
        ++v20;
      }
    }
    while ((unint64_t)v21--);
    v16 = *v3;
    if (v20)
    {
      *(_DWORD *)(v16 - 16) += v20;
      v30 = *v3;
      if (*v3)
        v31 = *(_DWORD *)(v30 - 12);
      else
        v31 = 0;
      *(_DWORD *)(v30 - 12) = v31 - v20;
      v16 = *v3;
    }
    if (!v16)
      goto LABEL_15;
    v24 = *(_DWORD *)(v16 - 4);
    if (v24 < 9 || 6 * *(_DWORD *)(v16 - 12) >= v24)
    {
LABEL_31:
      *(_DWORD *)(a1 + 88) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v3);
      v16 = *(_QWORD *)(a1 + 80);
      *(_DWORD *)(a1 + 88) = 0;
      if (!v16)
      {
        v17 = 0;
        goto LABEL_16;
      }
    }
    v17 = *(_DWORD *)(v16 - 12);
    v18 = 0x7FFFFFFF;
    if (v17 >= 0x7FFFFFFF)
      goto LABEL_17;
    goto LABEL_16;
  }
LABEL_2:
  v6 = a2[1];
  if (!v6)
  {
    v6 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v6 = 1;
    *(_QWORD *)(v6 + 8) = a2;
    v27 = (unsigned int *)a2[1];
    a2[1] = v6;
    if (v27)
    {
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        atomic_store(1u, v27);
        WTF::fastFree((WTF *)v27, v26);
      }
      v6 = a2[1];
    }
  }
  do
    v7 = __ldaxr((unsigned int *)v6);
  while (__stlxr(v7 + 1, (unsigned int *)v6));
  do
    v8 = __ldaxr((unsigned int *)v6);
  while (__stlxr(v8 + 1, (unsigned int *)v6));
  v33 = (WTF *)v6;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add(v3, &v33, (uint64_t)&v32);
  result = (unsigned int *)v33;
  v33 = 0;
  if (result)
  {
    do
    {
      v13 = __ldaxr(result);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, result));
    if (!v14)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v9);
    }
  }
  if (v6)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v6);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v6));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v6);
      return (unsigned int *)WTF::fastFree((WTF *)v6, v9);
    }
  }
  return result;
}

unsigned int **WebCore::NetworkStorageSession::removeCookiesEnabledStateObserver(uint64_t a1, _QWORD *a2)
{
  return WTF::WeakHashSet<WebCore::CookiesEnabledStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::CookiesEnabledStateObserver>((unsigned int **)(a1 + 80), a2);
}

unsigned int **WTF::WeakHashSet<WebCore::CookiesEnabledStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::CookiesEnabledStateObserver>(unsigned int **result, _QWORD *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v6;
  unsigned int v7;

  v3 = (uint64_t)result;
  v4 = *((_DWORD *)result + 3);
  v5 = *((_DWORD *)result + 2) + 1;
  *((_DWORD *)result + 2) = v5;
  if (v5 > v4)
  {
    result = _ZN3WTF7HashSetINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS_15HashTableTraitsEE8removeIfIZNS_11WeakHashSetIN7WebCore27CookiesEnabledStateObserverES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_(result, a2);
    v7 = 0;
    *(_DWORD *)(v3 + 8) = 0;
    if (*(_QWORD *)v3)
    {
      v7 = *(_DWORD *)(*(_QWORD *)v3 - 12);
      if (v7 > 0x7FFFFFFE)
        v7 = 0x7FFFFFFF;
    }
    *(_DWORD *)(v3 + 12) = 2 * v7;
  }
  v6 = (WTF *)a2[1];
  if (v6)
  {
    if (*((_QWORD *)v6 + 1))
      return (unsigned int **)WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)v3, v6);
  }
  return result;
}

unsigned int *WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>>::copy@<X0>(unsigned int *result@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v2;
  __int16 *v4;
  uint64_t v5;
  unint64_t v6;
  __int16 *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  unsigned int v10;
  __int16 v11;
  WTF::StringImpl *v12;

  v2 = result;
  v4 = *(__int16 **)result;
  v5 = result[3];
  if ((_DWORD)v5)
  {
    v6 = (unint64_t)&v4[8 * v5];
    do
    {
      v11 = *v4;
      v7 = v4 + 4;
      WTF::String::isolatedCopy();
      *v4 = v11;
      v9 = v12;
      v12 = 0;
      result = (unsigned int *)*((_QWORD *)v4 + 1);
      *((_QWORD *)v4 + 1) = v9;
      if (result)
      {
        if (*result == 2)
        {
          WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
          result = 0;
          v12 = 0;
        }
        else
        {
          *result -= 2;
        }
      }
      v4 += 8;
    }
    while ((unint64_t)(v7 + 4) < v6);
    v4 = *(__int16 **)v2;
    LODWORD(v5) = v2[3];
  }
  *(_QWORD *)a2 = v4;
  v10 = v2[2];
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  *(_DWORD *)(a2 + 8) = v10;
  *(_DWORD *)(a2 + 12) = v5;
  return result;
}

uint64_t WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>>::copy@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  WTF::StringImpl **v4;
  uint64_t v5;
  unint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  v2 = result;
  v4 = *(WTF::StringImpl ***)result;
  v5 = *(unsigned int *)(result + 12);
  if ((_DWORD)v5)
  {
    v6 = (unint64_t)&v4[2 * v5];
    while (1)
    {
      WTF::String::isolatedCopy();
      v7 = v4 + 1;
      WTF::String::isolatedCopy();
      v9 = *v4;
      *v4 = v12;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v8);
        else
          *(_DWORD *)v9 -= 2;
      }
      v10 = *v7;
      *v7 = v13;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
        {
          WTF::StringImpl::destroy(v10, v8);
          v13 = 0;
          goto LABEL_10;
        }
        *(_DWORD *)v10 -= 2;
      }
      v13 = 0;
LABEL_10:
      result = 0;
      v12 = 0;
      v4 += 2;
      if ((unint64_t)(v7 + 1) >= v6)
      {
        v4 = *(WTF::StringImpl ***)v2;
        LODWORD(v5) = *(_DWORD *)(v2 + 12);
        break;
      }
    }
  }
  *(_QWORD *)a2 = v4;
  v11 = *(_DWORD *)(v2 + 8);
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_DWORD *)(a2 + 8) = v11;
  *(_DWORD *)(a2 + 12) = v5;
  return result;
}

WTF::StringImpl *WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(uint64_t a1, uint64_t *a2, WTF::ASCIICaseInsensitiveHash *this, uint64_t *a4)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  const WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  const WTF::StringImpl *v14;
  _QWORD *v15;
  int v16;
  WTF::StringImpl *result;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = WTF::ASCIICaseInsensitiveHash::hash(this, (const WTF::String *)a2) & v9;
  v11 = v8 + 16 * v10;
  if ((WTF::equal(*(WTF **)v11, 0, v12) & 1) == 0)
  {
    v15 = 0;
    v16 = 1;
    do
    {
      if (*(_QWORD *)v11 == -1)
      {
        v15 = (_QWORD *)v11;
      }
      else
      {
        result = (WTF::StringImpl *)WTF::equalIgnoringASCIICase(*(WTF **)v11, *(const WTF::StringImpl **)this, v14);
        if ((_DWORD)result)
        {
          v28 = *a2;
          if (*a2)
            v29 = *(unsigned int *)(v28 - 4);
          else
            v29 = 0;
          v31 = 0;
          v30 = v28 + 16 * v29;
          goto LABEL_36;
        }
      }
      v10 = (v10 + v16) & v9;
      v11 = v8 + 16 * v10;
      ++v16;
    }
    while (!WTF::equal(*(WTF **)v11, 0, v14));
    if (v15)
    {
      *v15 = 0;
      v15[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v11 = (uint64_t)v15;
    }
  }
  v18 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  result = *(WTF::StringImpl **)v11;
  *(_QWORD *)v11 = v18;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  v19 = *a4;
  *a4 = 0;
  v20 = *(WTF::StringImpl ***)(v11 + 8);
  *(_QWORD *)(v11 + 8) = v19;
  if (v20)
  {
    v32 = *((unsigned int *)v20 - 1);
    if ((_DWORD)v32)
    {
      v33 = v20;
      do
      {
        v34 = *v33;
        if (*v33 != (WTF::StringImpl *)-1)
        {
          *v33 = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, v13);
            else
              *(_DWORD *)v34 -= 2;
          }
        }
        ++v33;
        --v32;
      }
      while (v32);
    }
    result = (WTF::StringImpl *)WTF::fastFree((WTF *)(v20 - 2), v13);
  }
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *a2;
  if (*a2)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
      goto LABEL_26;
  }
  else if (3 * v26 <= 4 * v25)
  {
    if (!(_DWORD)v26)
    {
      v27 = 8;
LABEL_31:
      result = (WTF::StringImpl *)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a2, v27, (WTF **)v11);
      v11 = (uint64_t)result;
      v23 = *a2;
      if (*a2)
        v26 = *(unsigned int *)(v23 - 4);
      else
        v26 = 0;
      goto LABEL_35;
    }
LABEL_26:
    v27 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
    goto LABEL_31;
  }
LABEL_35:
  v30 = v23 + 16 * v26;
  v31 = 1;
LABEL_36:
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v30;
  *(_BYTE *)(a1 + 16) = v31;
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF **v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl **v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::StringImpl **v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF::StringImpl **v41;
  WTF::StringImpl *v42;
  uint64_t result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v10 = v7;
  v11 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 16 * a2);
  *a1 = v11;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v12 = 0;
    v13 = 0;
    v14 = v5;
    do
    {
      v15 = (WTF **)(v4 + 16 * v12);
      if (*v15 != (WTF *)-1)
      {
        if (WTF::equal(*v15, 0, v9))
        {
          v16 = v4 + 16 * v12;
          v17 = *(_QWORD *)(v16 + 8);
          if (v17)
          {
            v34 = *(unsigned int *)(v17 - 4);
            if ((_DWORD)v34)
            {
              v35 = *(WTF::StringImpl ***)(v16 + 8);
              do
              {
                v36 = *v35;
                if (*v35 != (WTF::StringImpl *)-1)
                {
                  *v35 = 0;
                  if (v36)
                  {
                    if (*(_DWORD *)v36 == 2)
                      WTF::StringImpl::destroy(v36, v8);
                    else
                      *(_DWORD *)v36 -= 2;
                  }
                }
                ++v35;
                --v34;
              }
              while (v34);
            }
            WTF::fastFree((WTF *)(v17 - 16), v8);
          }
          v18 = *v15;
          *v15 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v8);
            else
              *(_DWORD *)v18 -= 2;
          }
        }
        else
        {
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v21 = WTF::ASCIICaseInsensitiveHash::hash((WTF::ASCIICaseInsensitiveHash *)(v4 + 16 * v12), v8);
          v22 = 0;
          do
          {
            v23 = v21 & v20;
            v24 = WTF::equal(*(WTF **)(v19 + 16 * v23), 0, v9);
            v21 = ++v22 + v23;
          }
          while (!v24);
          v25 = v19 + 16 * v23;
          v26 = (_QWORD *)(v25 + 8);
          v27 = *(_QWORD *)(v25 + 8);
          if (v27)
          {
            v37 = *(unsigned int *)(v27 - 4);
            if ((_DWORD)v37)
            {
              v38 = *(WTF::StringImpl ***)(v25 + 8);
              do
              {
                v39 = *v38;
                if (*v38 != (WTF::StringImpl *)-1)
                {
                  *v38 = 0;
                  if (v39)
                  {
                    if (*(_DWORD *)v39 == 2)
                      WTF::StringImpl::destroy(v39, v8);
                    else
                      *(_DWORD *)v39 -= 2;
                  }
                }
                ++v38;
                --v37;
              }
              while (v37);
            }
            WTF::fastFree((WTF *)(v27 - 16), v8);
          }
          v28 = *(WTF::StringImpl **)v25;
          *(_QWORD *)v25 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
              WTF::StringImpl::destroy(v28, v8);
            else
              *(_DWORD *)v28 -= 2;
          }
          v29 = *v15;
          *v15 = 0;
          *(_QWORD *)v25 = v29;
          v30 = v4 + 16 * v12;
          *v26 = 0;
          v31 = *(_QWORD *)(v30 + 8);
          *(_QWORD *)(v30 + 8) = 0;
          *v26 = v31;
          v32 = *(_QWORD *)(v30 + 8);
          if (v32)
          {
            v40 = *(unsigned int *)(v32 - 4);
            if ((_DWORD)v40)
            {
              v41 = *(WTF::StringImpl ***)(v30 + 8);
              do
              {
                v42 = *v41;
                if (*v41 != (WTF::StringImpl *)-1)
                {
                  *v41 = 0;
                  if (v42)
                  {
                    if (*(_DWORD *)v42 == 2)
                      WTF::StringImpl::destroy(v42, v8);
                    else
                      *(_DWORD *)v42 -= 2;
                  }
                }
                ++v41;
                --v40;
              }
              while (v40);
            }
            WTF::fastFree((WTF *)(v32 - 16), v8);
          }
          v33 = *v15;
          *v15 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, v8);
            else
              *(_DWORD *)v33 -= 2;
          }
          if (v15 == a3)
            v13 = v25;
        }
      }
      ++v12;
    }
    while (v12 != v14);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v13;
}

void WebCore::OrganizationStorageAccessPromptQuirk::~OrganizationStorageAccessPromptQuirk(WebCore::OrganizationStorageAccessPromptQuirk *this, void *a2)
{
  WTF::StringImpl *v3;
  _QWORD *v4;
  WTF::StringImpl *v5;

  WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
  v4 = (_QWORD *)*((_QWORD *)this + 1);
  if (v4)
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v4, v3);
  v5 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
}

uint64_t *WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable(uint64_t *a1, WTF ***a2)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  double v8;
  double v9;
  double v10;
  unsigned int v11;
  uint64_t v12;
  const WTF::String *v13;
  const WTF::StringImpl *v14;
  WTF **v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  WTF::ASCIICaseInsensitiveHash *v19;
  WTF::ASCIICaseInsensitiveHash *v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  const WTF::StringImpl *v24;
  int v25;
  uint64_t v26;
  int v27;
  WTF *v28;
  WTF::StringImpl *v29;
  WTF::ASCIICaseInsensitiveHash *v30;

  *a1 = 0;
  if (!*a2)
    return a1;
  v3 = *((unsigned int *)*a2 - 3);
  if (!(_DWORD)v3)
    return a1;
  v5 = (v3 - 1) | ((v3 - 1) >> 1) | ((((_DWORD)v3 - 1) | ((v3 - 1) >> 1)) >> 2);
  v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  v7 = (v6 | HIWORD(v6)) + 1;
  if (v7 > 0x400)
  {
    if (v7 > 2 * v3)
      goto LABEL_8;
  }
  else if (3 * v7 > 4 * v3)
  {
LABEL_6:
    v8 = (double)v3;
    v9 = (double)v7;
    v10 = 0.604166667;
    goto LABEL_9;
  }
  LODWORD(v7) = 2 * v7;
  if (v7 <= 0x400)
    goto LABEL_6;
LABEL_8:
  v8 = (double)v3;
  v9 = (double)v7;
  v10 = 0.416666667;
LABEL_9:
  if (v9 * v10 <= v8)
    LODWORD(v7) = 2 * v7;
  if (v7 <= 8)
    v11 = 8;
  else
    v11 = v7;
  v12 = WTF::fastZeroedMalloc((WTF *)(8 * v11 + 16));
  *a1 = v12 + 16;
  *(_DWORD *)(v12 + 12) = v11;
  *(_DWORD *)(*a1 - 8) = v11 - 1;
  *(_DWORD *)(*a1 - 12) = v3;
  *(_DWORD *)(*a1 - 16) = 0;
  v15 = *a2;
  if (!*a2)
  {
    v19 = 0;
    v16 = 0;
    goto LABEL_26;
  }
  v16 = *((unsigned int *)v15 - 1);
  v17 = &v15[v16];
  if (!*((_DWORD *)v15 - 3))
  {
    v19 = (WTF::ASCIICaseInsensitiveHash *)&v15[v16];
LABEL_26:
    v17 = &v15[v16];
    if (v15)
      goto LABEL_27;
    goto LABEL_29;
  }
  if ((_DWORD)v16)
  {
    v18 = 8 * v16;
    while ((WTF::equal(*v15, 0, v14) & 1) != 0 || *v15 == (WTF *)-1)
    {
      ++v15;
      v18 -= 8;
      if (!v18)
      {
        v15 = v17;
        break;
      }
    }
    v19 = (WTF::ASCIICaseInsensitiveHash *)v15;
    v15 = *a2;
    if (!*a2)
      goto LABEL_29;
LABEL_27:
    v20 = (WTF::ASCIICaseInsensitiveHash *)&v15[*((unsigned int *)v15 - 1)];
    goto LABEL_30;
  }
  v19 = (WTF::ASCIICaseInsensitiveHash *)*a2;
  if (v15)
    goto LABEL_27;
LABEL_29:
  v20 = 0;
LABEL_30:
  while (v19 != v20)
  {
    v21 = *a1;
    if (*a1)
      v22 = *(_DWORD *)(v21 - 8);
    else
      v22 = 0;
    v23 = WTF::ASCIICaseInsensitiveHash::hash(v19, v13);
    v25 = 0;
    do
    {
      v26 = v23 & v22;
      v27 = WTF::equal(*(WTF **)(v21 + 8 * v26), 0, v24);
      v23 = ++v25 + v26;
    }
    while (!v27);
    v28 = *(WTF **)v19;
    if (*(_QWORD *)v19)
      *(_DWORD *)v28 += 2;
    v29 = *(WTF::StringImpl **)(v21 + 8 * v26);
    *(_QWORD *)(v21 + 8 * v26) = v28;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v13);
      else
        *(_DWORD *)v29 -= 2;
    }
    v30 = (WTF::ASCIICaseInsensitiveHash *)((char *)v19 + 8);
    v19 = (WTF::ASCIICaseInsensitiveHash *)v17;
    if (v30 != (WTF::ASCIICaseInsensitiveHash *)v17)
    {
      v19 = v30;
      while ((WTF::equal(*(WTF **)v19, 0, v24) & 1) != 0 || *(_QWORD *)v19 == -1)
      {
        v19 = (WTF::ASCIICaseInsensitiveHash *)((char *)v19 + 8);
        if (v19 == (WTF::ASCIICaseInsensitiveHash *)v17)
        {
          v19 = (WTF::ASCIICaseInsensitiveHash *)v17;
          break;
        }
      }
    }
  }
  return a1;
}

uint64_t *WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  WTF::ASCIICaseInsensitiveHash *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const WTF::StringImpl *v16;
  _QWORD v18[2];

  *a1 = 0;
  v3 = *a2;
  if (*a2)
  {
    v4 = *(_DWORD *)(v3 - 12);
    if (v4)
    {
      v6 = WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::computeBestTableSize(*(_DWORD *)(v3 - 12));
      v7 = WTF::fastZeroedMalloc((WTF *)(24 * v6 + 16));
      *a1 = v7 + 16;
      *(_DWORD *)(v7 + 12) = v6;
      *(_DWORD *)(*a1 - 8) = v6 - 1;
      *(_DWORD *)(*a1 - 12) = v4;
      *(_DWORD *)(*a1 - 16) = 0;
      v10 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(*a2, v8, v9);
      v11 = (WTF::ASCIICaseInsensitiveHash *)v10;
      v18[1] = v12;
      if (*a2)
        v13 = *a2 + 24 * *(unsigned int *)(*a2 - 4);
      else
        v13 = 0;
      if (v13 != v10)
      {
        do
        {
          v14 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(a1, v11);
          WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=(v14, v11);
          v18[0] = (char *)v11 + 24;
          WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v18, v15, v16);
          v11 = (WTF::ASCIICaseInsensitiveHash *)v18[0];
        }
        while (v18[0] != v13);
      }
    }
  }
  return a1;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (!a1)
    return 0;
  if (*(_DWORD *)(a1 - 12))
    return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::makeConstIterator(a1, a1, a3);
  return a1 + 24 * *(unsigned int *)(a1 - 4);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::makeConstIterator(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  unsigned int v3;
  _QWORD v5[2];

  if (a1)
    v3 = *(_DWORD *)(a1 - 4);
  else
    v3 = 0;
  v5[0] = a2;
  v5[1] = a1 + 24 * v3;
  WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v5, a2, a3);
  return v5[0];
}

uint64_t WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets(uint64_t result, uint64_t a2, const WTF::StringImpl *a3)
{
  WTF **v3;
  _QWORD *v4;
  WTF **v5;

  v3 = *(WTF ***)result;
  if (*(_QWORD *)result != *(_QWORD *)(result + 8))
  {
    v4 = (_QWORD *)result;
    do
    {
      result = WTF::equal(*v3, 0, a3);
      if ((result & 1) == 0 && *v3 != (WTF *)-1)
        break;
      v5 = (WTF **)v4[1];
      v3 = (WTF **)(*v4 + 24);
      *v4 = v3;
    }
    while (v3 != v5);
  }
  return result;
}

uint64_t WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 8), (uint64_t)a2 + 8);
  return a1;
}

uint64_t WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF *v9;
  WTF *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 + 1 > a2)
    v4 = v3 + 1;
  else
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v5 = result;
      v6 = *(WTF **)result;
      v7 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(16 * v4));
      *(_DWORD *)(v5 + 8) = v4;
      *(_QWORD *)v5 = result;
      if ((_DWORD)v7)
      {
        v9 = (WTF *)((char *)v6 + 16 * v7);
        v10 = v6;
        do
        {
          v11 = *(WTF::StringImpl **)v10;
          *(_QWORD *)v10 = 0;
          *(_QWORD *)result = v11;
          v12 = *((_QWORD *)v10 + 1);
          *((_QWORD *)v10 + 1) = 0;
          *(_QWORD *)(result + 8) = v12;
          v13 = result;
          WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair((WTF::StringImpl **)v10, v8);
          v10 = (WTF *)((char *)v10 + 16);
          result = v13 + 16;
        }
        while (v10 != v9);
      }
      if (v6)
      {
        if (*(WTF **)v5 == v6)
        {
          *(_QWORD *)v5 = 0;
          *(_DWORD *)(v5 + 8) = 0;
        }
        return WTF::fastFree(v6, v8);
      }
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::HTTPHeaderMap::UncommonHeader>::moveOverlapping(WTF::StringImpl *result, WTF::StringImpl *a2, WTF::StringImpl *a3)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _QWORD *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v3 = a2;
  v4 = result;
  if (result <= a3)
  {
    if (a2 != result)
    {
      v9 = (_QWORD *)((char *)a3 + ((a2 - result) & 0xFFFFFFFFFFFFFFF0) - 8);
      v10 = a2;
      do
      {
        v11 = *((_QWORD *)v10 - 2);
        v10 = (WTF::StringImpl *)((char *)v10 - 16);
        *(_QWORD *)v10 = 0;
        *(v9 - 1) = v11;
        v12 = *((_QWORD *)v10 + 1);
        *((_QWORD *)v10 + 1) = 0;
        *v9 = v12;
        v13 = (WTF::StringImpl *)*((_QWORD *)v10 + 1);
        *((_QWORD *)v10 + 1) = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, a2);
          else
            *(_DWORD *)v13 -= 2;
        }
        result = (WTF::StringImpl *)*((_QWORD *)v3 - 2);
        *((_QWORD *)v3 - 2) = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
          else
            *(_DWORD *)result -= 2;
        }
        v9 -= 2;
        v3 = v10;
      }
      while (v10 != v4);
    }
  }
  else
  {
    while (v4 != v3)
    {
      v5 = *(WTF::StringImpl **)v4;
      *(_QWORD *)v4 = 0;
      *(_QWORD *)a3 = v5;
      v6 = *((_QWORD *)v4 + 1);
      *((_QWORD *)v4 + 1) = 0;
      v7 = a3;
      *((_QWORD *)a3 + 1) = v6;
      v8 = (WTF::StringImpl *)*((_QWORD *)v4 + 1);
      *((_QWORD *)v4 + 1) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      result = *(WTF::StringImpl **)v4;
      *(_QWORD *)v4 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v4 = (WTF::StringImpl *)((char *)v4 + 16);
      a3 = (WTF::StringImpl *)((char *)v7 + 16);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::contains<WTF::HashSetTranslatorAdapter<WTF::HashTranslatorASCIILiteralCaseInsensitive>,WTF::ASCIILiteral>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  uint64_t *v12;
  const char *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  int v20;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = -1640531527;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5)
  {
    v14 = *(const char **)a2;
    v15 = v5 - 1;
    if ((unint64_t)(v5 - 1) >= 2)
    {
      v16 = 0;
      do
      {
        v17 = v4 + *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v14[v16]);
        v18 = (v17 << 16) ^ (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v14[v16 + 1]) << 11) ^ v17;
        v4 = v18 + (v18 >> 11);
        v19 = v16 + 3;
        v16 += 2;
      }
      while (v19 < v15);
    }
    if ((v15 & 1) != 0)
    {
      v20 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v14[v5 - 2]);
      v4 = ((v4 + v20) ^ ((v4 + v20) << 11)) + (((v4 + v20) ^ ((v4 + v20) << 11)) >> 17);
    }
  }
  v6 = 0;
  v7 = *(_DWORD *)(v2 - 8);
  v8 = (v4 ^ (8 * v4)) + ((v4 ^ (8 * v4)) >> 5);
  v9 = (v8 ^ (4 * v8)) + ((v8 ^ (4 * v8)) >> 15);
  v10 = (v9 ^ (v9 << 10)) & 0xFFFFFF;
  if (!v10)
    v10 = 0x800000;
  while (1)
  {
    v11 = v10 & v7;
    v12 = (uint64_t *)(v2 + 8 * (v10 & v7));
    if (*v12 != -1)
    {
      if (!*v12)
        return 0;
      if (WTF::HashSetTranslatorAdapter<WTF::HashTranslatorASCIILiteralCaseInsensitive>::equal<WTF::String,WTF::ASCIILiteral>(v12, (const char **)a2))
      {
        break;
      }
    }
    v10 = ++v6 + v11;
  }
  return 1;
}

BOOL WTF::HashSetTranslatorAdapter<WTF::HashTranslatorASCIILiteralCaseInsensitive>::equal<WTF::String,WTF::ASCIILiteral>(uint64_t *a1, const char **a2)
{
  uint64_t v2;
  const char *v3;
  size_t v4;
  unsigned __int16 *v6;
  uint64_t v7;
  int v8;
  int v9;
  size_t v10;
  int v11;
  int v12;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *a2;
  v4 = *a2 ? strlen(*a2) : 0;
  if (v4 != *(_DWORD *)(v2 + 4))
    return 0;
  v6 = *(unsigned __int16 **)(v2 + 8);
  if ((*(_BYTE *)(v2 + 16) & 4) == 0)
  {
    if (v4)
    {
      if ((*v6 | (32 * (*v6 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                + *(unsigned __int8 *)v3))
      {
        v7 = 1;
        while (v4 != v7)
        {
          v11 = v6[v7] | (32 * (v6[v7] - 65 < 0x1A));
          v12 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v3[v7++]);
          if (v11 != v12)
          {
LABEL_12:
            v10 = v7 - 1;
            return v10 >= v4;
          }
        }
        goto LABEL_20;
      }
      return 0;
    }
    return 1;
  }
  if (!v4)
    return 1;
  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)v6) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                + *(unsigned __int8 *)v3))
    return 0;
  v7 = 1;
  while (v4 != v7)
  {
    v8 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v6 + v7));
    v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v3[v7++]);
    if (v8 != v9)
      goto LABEL_12;
  }
LABEL_20:
  v10 = v4;
  return v10 >= v4;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::NetworkStateNotifier::NetworkStateNotifier(void)::$_0,void>::call(WebCore::NetworkStateNotifier *a1)
{
  WebCore::NetworkStateNotifier::singleton(a1);
  return WebCore::NetworkStateNotifier::updateState((uint64_t **)&WebCore::NetworkStateNotifier::singleton(void)::networkStateNotifier);
}

WTF **WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(uint64_t *a1, WTF::ASCIICaseInsensitiveHash *this)
{
  uint64_t v2;
  int v4;
  unsigned int v5;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  WTF **v8;
  int v9;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = WTF::ASCIICaseInsensitiveHash::hash(this, this) & v4;
  v8 = 0;
  if ((WTF::equal(*(WTF **)(v2 + 8 * v5), 0, v6) & 1) == 0)
  {
    v9 = 1;
    v8 = (WTF **)(v2 + 8 * v5);
    while (*v8 == (WTF *)-1 || (WTF::equalIgnoringASCIICase(*v8, *(const WTF::StringImpl **)this, v7) & 1) == 0)
    {
      v5 = (v5 + v9) & v4;
      v8 = (WTF **)(v2 + 8 * v5);
      ++v9;
      if (WTF::equal(*v8, 0, v7))
        return 0;
    }
  }
  return v8;
}

WTF::StringImpl **WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebCore::RegistrableDomain>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF **v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  WTF::StringImpl **v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl **result;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF **)(v5 + 16 * v11);
      if (*v13 != (WTF *)-1)
      {
        if (WTF::equal(*v13, 0, v10))
        {
          v14 = v5 + 16 * v11;
          v15 = *(WTF::StringImpl **)(v14 + 8);
          *(_QWORD *)(v14 + 8) = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v9);
            else
              *(_DWORD *)v15 -= 2;
          }
          v16 = *v13;
          *v13 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, v9);
            else
              *(_DWORD *)v16 -= 2;
          }
        }
        else
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = WTF::ASCIICaseInsensitiveHash::hash((WTF::ASCIICaseInsensitiveHash *)(v5 + 16 * v11), v9);
          v20 = 0;
          do
          {
            v21 = v19 & v18;
            v22 = WTF::equal(*(WTF **)(v17 + 16 * v21), 0, v10);
            v19 = ++v20 + v21;
          }
          while (!v22);
          v23 = (WTF::StringImpl **)(v17 + 16 * v21);
          v24 = v23[1];
          v23[1] = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v9);
            else
              *(_DWORD *)v24 -= 2;
          }
          v25 = *v23;
          *v23 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v9);
            else
              *(_DWORD *)v25 -= 2;
          }
          v26 = *v13;
          *v13 = 0;
          *v23 = v26;
          v27 = v5 + 16 * v11;
          v28 = *(WTF::StringImpl **)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          v23[1] = v28;
          v29 = *(WTF::StringImpl **)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, v9);
            else
              *(_DWORD *)v29 -= 2;
          }
          v30 = *v13;
          *v13 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, v9);
            else
              *(_DWORD *)v30 -= 2;
          }
          if (v13 == a3)
            v12 = v23;
        }
      }
      ++v11;
    }
    while (v11 != v6);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v12;
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    v5 = *(_DWORD *)(v3 - 12);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v6 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v8 = v6;
  v9 = v6 + 16;
  if (a2)
    bzero((void *)(v6 + 16), 16 * a2);
  *a1 = v9;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    v10 = 0;
    v11 = v4;
    do
    {
      v12 = (uint64_t *)(v3 + 16 * v10);
      v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
          v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
          v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
          v25 = v21 & ((v24 >> 31) ^ v24);
          v26 = 1;
          do
          {
            v27 = v25;
            v28 = *(_QWORD *)(v20 + 16 * v25);
            v25 = (v25 + v26++) & v21;
          }
          while (v28);
          v29 = (_QWORD *)(v20 + 16 * v27);
          v31 = v29 + 1;
          v30 = v29[1];
          if (v30)
          {
            v32 = *(unsigned int *)(v30 - 4);
            if ((_DWORD)v32)
            {
              v33 = (WTF::StringImpl **)v29[1];
              do
              {
                v34 = *v33;
                if (*v33 != (WTF::StringImpl *)-1)
                {
                  v35 = v33[1];
                  v33[1] = 0;
                  if (v35)
                  {
                    if (*(_DWORD *)v35 == 2)
                    {
                      WTF::StringImpl::destroy(v35, v7);
                      v34 = *v33;
                    }
                    else
                    {
                      *(_DWORD *)v35 -= 2;
                    }
                  }
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, v7);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                }
                v33 += 2;
                --v32;
              }
              while (v32);
            }
            WTF::fastFree((WTF *)(v30 - 16), v7);
            v13 = *v12;
          }
          *v29 = v13;
          v36 = v3 + 16 * v10;
          *v31 = 0;
          v37 = *(_QWORD *)(v36 + 8);
          *(_QWORD *)(v36 + 8) = 0;
          *v31 = v37;
          v15 = *(_QWORD *)(v36 + 8);
          if (!v15)
            goto LABEL_60;
          v38 = *(unsigned int *)(v15 - 4);
          if ((_DWORD)v38)
          {
            v39 = *(WTF::StringImpl ***)(v36 + 8);
            do
            {
              v40 = *v39;
              if (*v39 != (WTF::StringImpl *)-1)
              {
                v41 = v39[1];
                v39[1] = 0;
                if (v41)
                {
                  if (*(_DWORD *)v41 == 2)
                  {
                    WTF::StringImpl::destroy(v41, v7);
                    v40 = *v39;
                  }
                  else
                  {
                    *(_DWORD *)v41 -= 2;
                  }
                }
                *v39 = 0;
                if (v40)
                {
                  if (*(_DWORD *)v40 == 2)
                    WTF::StringImpl::destroy(v40, v7);
                  else
                    *(_DWORD *)v40 -= 2;
                }
              }
              v39 += 2;
              --v38;
            }
            while (v38);
          }
          goto LABEL_59;
        }
        v14 = v3 + 16 * v10;
        v15 = *(_QWORD *)(v14 + 8);
        if (v15)
        {
          v16 = *(unsigned int *)(v15 - 4);
          if ((_DWORD)v16)
          {
            v17 = *(WTF::StringImpl ***)(v14 + 8);
            do
            {
              v18 = *v17;
              if (*v17 != (WTF::StringImpl *)-1)
              {
                v19 = v17[1];
                v17[1] = 0;
                if (v19)
                {
                  if (*(_DWORD *)v19 == 2)
                  {
                    WTF::StringImpl::destroy(v19, v7);
                    v18 = *v17;
                  }
                  else
                  {
                    *(_DWORD *)v19 -= 2;
                  }
                }
                *v17 = 0;
                if (v18)
                {
                  if (*(_DWORD *)v18 == 2)
                    WTF::StringImpl::destroy(v18, v7);
                  else
                    *(_DWORD *)v18 -= 2;
                }
              }
              v17 += 2;
              --v16;
            }
            while (v16);
          }
LABEL_59:
          WTF::fastFree((WTF *)(v15 - 16), v7);
        }
      }
LABEL_60:
      ++v10;
    }
    while (v10 != v11);
  }
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), v7);
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(uint64_t *a1, unsigned int a2, unint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  unsigned int v30;
  _OWORD *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  _QWORD *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    v13 = v7;
    do
    {
      v14 = (unint64_t *)(v6 + 24 * v11);
      v15 = v14[1];
      if (v15 != -1)
      {
        v16 = *v14;
        if (*(_OWORD *)v14 == 0)
        {
          v19 = v6 + 24 * v11;
          v20 = *(WTF::StringImpl **)(v19 + 16);
          *(_QWORD *)(v19 + 16) = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v10);
            else
              *(_DWORD *)v20 -= 2;
          }
        }
        else
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v21 = 0;
          v22 = (v16 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v16 - 1640531527) << 16) ^ ((unsigned __int16)v16 - 1640531527);
          v23 = (v16 >> 37) & 0x7FFF800 ^ ((v22 + WORD2(v16) + (v22 >> 11)) << 16) ^ (v22 + WORD2(v16) + (v22 >> 11));
          v24 = (v15 >> 5) & 0x7FFF800 ^ ((v23 + (v23 >> 11) + (unsigned __int16)v15) << 16) ^ (v23 + (v23 >> 11) + (unsigned __int16)v15);
          v25 = (v15 >> 37) & 0x7FFF800 ^ ((v24 + WORD2(v15) + (v24 >> 11)) << 16) ^ (v24 + WORD2(v15) + (v24 >> 11));
          v26 = (v25 + (v25 >> 11)) ^ (8 * (v25 + (v25 >> 11)));
          v27 = (v26 + (v26 >> 5)) ^ (4 * (v26 + (v26 >> 5)));
          v28 = (v27 + (v27 >> 15)) ^ ((v27 + (v27 >> 15)) << 10);
          if (v28)
            v29 = v28;
          else
            v29 = 0x800000;
          do
          {
            v30 = v29 & v18;
            v31 = (_OWORD *)(v17 + 24 * (v29 & v18));
            v29 = ++v21 + (v29 & v18);
          }
          while (*v31 != 0);
          v32 = v17 + 24 * v30;
          v35 = *(WTF::StringImpl **)(v32 + 16);
          v34 = (_QWORD *)(v32 + 16);
          v33 = v35;
          *v34 = 0;
          if (v35)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, v10);
            else
              *(_DWORD *)v33 -= 2;
          }
          *v31 = *(_OWORD *)v14;
          v36 = v6 + 24 * v11;
          v37 = *(_QWORD *)(v36 + 16);
          *(_QWORD *)(v36 + 16) = 0;
          *v34 = v37;
          v38 = *(WTF::StringImpl **)(v36 + 16);
          *(_QWORD *)(v36 + 16) = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 2)
              WTF::StringImpl::destroy(v38, v10);
            else
              *(_DWORD *)v38 -= 2;
          }
          if (v14 == a3)
            v12 = v31;
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  WTF::StringImpl **v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  WTF::StringImpl *v37;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    v5 = *(_DWORD *)(v3 - 12);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v6 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v8 = v6;
  v9 = v6 + 16;
  if (a2)
    bzero((void *)(v6 + 16), 16 * a2);
  *a1 = v9;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    v10 = 0;
    v11 = v4;
    do
    {
      v12 = (uint64_t *)(v3 + 16 * v10);
      v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
          v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          v23 = v19 & ((v22 >> 31) ^ v22);
          v24 = 1;
          do
          {
            v25 = v23;
            v26 = *(_QWORD *)(v18 + 16 * v23);
            v23 = (v23 + v24++) & v19;
          }
          while (v26);
          v27 = (_QWORD *)(v18 + 16 * v25);
          v29 = v27 + 1;
          v28 = v27[1];
          if (v28)
          {
            v30 = *(unsigned int *)(v28 - 4);
            if ((_DWORD)v30)
            {
              v31 = (WTF::StringImpl **)(v28 + 16);
              do
              {
                if (*(v31 - 1) != (WTF::StringImpl *)-1)
                {
                  v32 = *v31;
                  *v31 = 0;
                  if (v32)
                  {
                    if (*(_DWORD *)v32 == 2)
                      WTF::StringImpl::destroy(v32, v7);
                    else
                      *(_DWORD *)v32 -= 2;
                  }
                }
                v31 += 3;
                --v30;
              }
              while (v30);
            }
            WTF::fastFree((WTF *)(v28 - 16), v7);
            v13 = *v12;
          }
          *v27 = v13;
          v33 = v3 + 16 * v10;
          *v29 = 0;
          v34 = *(_QWORD *)(v33 + 8);
          *(_QWORD *)(v33 + 8) = 0;
          *v29 = v34;
          v14 = *(_QWORD *)(v33 + 8);
          if (!v14)
            goto LABEL_48;
          v35 = *(unsigned int *)(v14 - 4);
          if ((_DWORD)v35)
          {
            v36 = (WTF::StringImpl **)(v14 + 16);
            do
            {
              if (*(v36 - 1) != (WTF::StringImpl *)-1)
              {
                v37 = *v36;
                *v36 = 0;
                if (v37)
                {
                  if (*(_DWORD *)v37 == 2)
                    WTF::StringImpl::destroy(v37, v7);
                  else
                    *(_DWORD *)v37 -= 2;
                }
              }
              v36 += 3;
              --v35;
            }
            while (v35);
          }
          goto LABEL_47;
        }
        v14 = *(_QWORD *)(v3 + 16 * v10 + 8);
        if (v14)
        {
          v15 = *(unsigned int *)(v14 - 4);
          if ((_DWORD)v15)
          {
            v16 = (WTF::StringImpl **)(v14 + 16);
            do
            {
              if (*(v16 - 1) != (WTF::StringImpl *)-1)
              {
                v17 = *v16;
                *v16 = 0;
                if (v17)
                {
                  if (*(_DWORD *)v17 == 2)
                    WTF::StringImpl::destroy(v17, v7);
                  else
                    *(_DWORD *)v17 -= 2;
                }
              }
              v16 += 3;
              --v15;
            }
            while (v15);
          }
LABEL_47:
          WTF::fastFree((WTF *)(v14 - 16), v7);
        }
      }
LABEL_48:
      ++v10;
    }
    while (v10 != v11);
  }
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), v7);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (uint64_t *)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = v15 & ((v18 >> 31) ^ v18);
          v20 = 1;
          do
          {
            v21 = v19;
            v22 = *(_QWORD *)(v14 + 16 * v19);
            v19 = (v19 + v20++) & v15;
          }
          while (v22);
          v23 = (uint64_t *)(v14 + 16 * v21);
          v24 = (WTF::StringImpl *)v23[1];
          v23[1] = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v8);
            else
              *(_DWORD *)v24 -= 2;
          }
          *v23 = *v10;
          v25 = v4 + 16 * v9;
          v26 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          v23[1] = v26;
          v13 = *(WTF::StringImpl **)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (!v13)
            goto LABEL_22;
          if (*(_DWORD *)v13 == 2)
          {
LABEL_24:
            WTF::StringImpl::destroy(v13, v8);
            goto LABEL_22;
          }
          *(_DWORD *)v13 -= 2;
        }
        else
        {
          v12 = v4 + 16 * v9;
          v13 = *(WTF::StringImpl **)(v12 + 8);
          *(_QWORD *)(v12 + 8) = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              goto LABEL_24;
            *(_DWORD *)v13 -= 2;
          }
        }
      }
LABEL_22:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WTF::HashTable<WebCore::OrganizationStorageAccessPromptQuirk,WebCore::OrganizationStorageAccessPromptQuirk,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::OrganizationStorageAccessPromptQuirk>,WTF::HashTraits<WebCore::OrganizationStorageAccessPromptQuirk>,WTF::HashTraits<WebCore::OrganizationStorageAccessPromptQuirk>>::deallocateTable(WebCore::OrganizationStorageAccessPromptQuirk *this, void *a2)
{
  WebCore::OrganizationStorageAccessPromptQuirk *v2;
  uint64_t v3;

  v2 = this;
  v3 = *((unsigned int *)this - 1);
  if ((_DWORD)v3)
  {
    do
    {
      if (*(_QWORD *)this != -1)
        WebCore::OrganizationStorageAccessPromptQuirk::~OrganizationStorageAccessPromptQuirk(this, a2);
      this = (WebCore::OrganizationStorageAccessPromptQuirk *)((char *)this + 32);
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WebCore::OrganizationStorageAccessPromptQuirk *)((char *)v2 - 16), a2);
}

uint64_t WTF::HashTable<WebCore::OrganizationStorageAccessPromptQuirk,WebCore::OrganizationStorageAccessPromptQuirk,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::OrganizationStorageAccessPromptQuirk>,WTF::HashTraits<WebCore::OrganizationStorageAccessPromptQuirk>,WTF::HashTraits<WebCore::OrganizationStorageAccessPromptQuirk>>::add(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  const WTF::StringImpl *v7;
  WebCore::OrganizationStorageAccessPromptQuirk *v8;
  int i;
  uint64_t v10;
  WebCore::OrganizationStorageAccessPromptQuirk *v11;
  WTF *v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v4 = qword_1ECE841D0;
  if (qword_1ECE841D0
    || (WTF::HashTable<WebCore::OrganizationStorageAccessPromptQuirk,WebCore::OrganizationStorageAccessPromptQuirk,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::OrganizationStorageAccessPromptQuirk>,WTF::HashTraits<WebCore::OrganizationStorageAccessPromptQuirk>,WTF::HashTraits<WebCore::OrganizationStorageAccessPromptQuirk>>::expand(0),
        (v4 = qword_1ECE841D0) != 0))
  {
    v5 = *(_DWORD *)(v4 - 8);
  }
  else
  {
    v5 = 0;
  }
  v6 = WTF::computeHash<WebCore::OrganizationStorageAccessPromptQuirk>(*a2);
  v8 = 0;
  for (i = 1; ; ++i)
  {
    v10 = v6 & v5;
    v11 = (WebCore::OrganizationStorageAccessPromptQuirk *)(v4 + 32 * v10);
    v12 = *(WTF **)v11;
    if (!*(_QWORD *)v11)
    {
      if (v8)
      {
        *(_OWORD *)v8 = 0u;
        *((_OWORD *)v8 + 1) = 0u;
        --*(_DWORD *)(qword_1ECE841D0 - 16);
        v11 = v8;
      }
      result = WebCore::OrganizationStorageAccessPromptQuirk::operator=((uint64_t)v11, a2);
      if (qword_1ECE841D0)
        v14 = *(_DWORD *)(qword_1ECE841D0 - 12) + 1;
      else
        v14 = 1;
      *(_DWORD *)(qword_1ECE841D0 - 12) = v14;
      v15 = qword_1ECE841D0;
      if (qword_1ECE841D0)
        v16 = *(_DWORD *)(qword_1ECE841D0 - 12);
      else
        v16 = 0;
      v17 = (*(_DWORD *)(qword_1ECE841D0 - 16) + v16);
      v18 = *(unsigned int *)(qword_1ECE841D0 - 4);
      if (v18 > 0x400)
      {
        if (v18 > 2 * v17)
          goto LABEL_14;
      }
      else if (3 * v18 > 4 * v17)
      {
LABEL_14:
        v19 = v15 + 32 * v18;
        v20 = 1;
        goto LABEL_15;
      }
      result = WTF::HashTable<WebCore::OrganizationStorageAccessPromptQuirk,WebCore::OrganizationStorageAccessPromptQuirk,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::OrganizationStorageAccessPromptQuirk>,WTF::HashTraits<WebCore::OrganizationStorageAccessPromptQuirk>,WTF::HashTraits<WebCore::OrganizationStorageAccessPromptQuirk>>::expand(v11);
      v11 = (WebCore::OrganizationStorageAccessPromptQuirk *)result;
      v15 = qword_1ECE841D0;
      if (qword_1ECE841D0)
        v18 = *(unsigned int *)(qword_1ECE841D0 - 4);
      else
        v18 = 0;
      goto LABEL_14;
    }
    if (v12 == (WTF *)-1)
    {
      v8 = (WebCore::OrganizationStorageAccessPromptQuirk *)(v4 + 32 * v10);
      goto LABEL_25;
    }
    result = WTF::equal(v12, (const WTF::StringImpl *)*a2, v7);
    if ((_DWORD)result)
      break;
LABEL_25:
    v6 = i + v10;
  }
  if (qword_1ECE841D0)
    v21 = *(unsigned int *)(qword_1ECE841D0 - 4);
  else
    v21 = 0;
  v20 = 0;
  v19 = qword_1ECE841D0 + 32 * v21;
LABEL_15:
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v19;
  *(_BYTE *)(a1 + 16) = v20;
  return result;
}

uint64_t WTF::HashTable<WebCore::OrganizationStorageAccessPromptQuirk,WebCore::OrganizationStorageAccessPromptQuirk,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::OrganizationStorageAccessPromptQuirk>,WTF::HashTraits<WebCore::OrganizationStorageAccessPromptQuirk>,WTF::HashTraits<WebCore::OrganizationStorageAccessPromptQuirk>>::expand(WebCore::OrganizationStorageAccessPromptQuirk *a1)
{
  int v2;
  unsigned int v3;

  if (qword_1ECE841D0 && (v2 = *(_DWORD *)(qword_1ECE841D0 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(qword_1ECE841D0 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WebCore::OrganizationStorageAccessPromptQuirk,WebCore::OrganizationStorageAccessPromptQuirk,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::OrganizationStorageAccessPromptQuirk>,WTF::HashTraits<WebCore::OrganizationStorageAccessPromptQuirk>,WTF::HashTraits<WebCore::OrganizationStorageAccessPromptQuirk>>::rehash(v3, a1);
}

uint64_t WTF::HashTable<WebCore::OrganizationStorageAccessPromptQuirk,WebCore::OrganizationStorageAccessPromptQuirk,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::OrganizationStorageAccessPromptQuirk>,WTF::HashTraits<WebCore::OrganizationStorageAccessPromptQuirk>,WTF::HashTraits<WebCore::OrganizationStorageAccessPromptQuirk>>::rehash(unsigned int a1, WebCore::OrganizationStorageAccessPromptQuirk *a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  WebCore::OrganizationStorageAccessPromptQuirk *v14;
  uint64_t v15;
  void *v16;

  v4 = qword_1ECE841D0;
  if (qword_1ECE841D0)
  {
    v5 = *(_DWORD *)(qword_1ECE841D0 - 4);
    v6 = *(_DWORD *)(qword_1ECE841D0 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)((32 * a1) | 0x10));
  v9 = (_DWORD *)v7;
  v10 = v7 + 16;
  if (a1)
    bzero((void *)(v7 + 16), 32 * a1);
  qword_1ECE841D0 = v10;
  v9[2] = a1 - 1;
  v9[3] = a1;
  *v9 = 0;
  *(_DWORD *)(qword_1ECE841D0 - 12) = v6;
  v11 = 0;
  if (v5)
  {
    v13 = v5;
    v14 = (WebCore::OrganizationStorageAccessPromptQuirk *)v4;
    do
    {
      if (*(_QWORD *)v14 != -1)
      {
        if (*(_QWORD *)v14)
        {
          v15 = WTF::HashTable<WebCore::OrganizationStorageAccessPromptQuirk,WebCore::OrganizationStorageAccessPromptQuirk,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::OrganizationStorageAccessPromptQuirk>,WTF::HashTraits<WebCore::OrganizationStorageAccessPromptQuirk>,WTF::HashTraits<WebCore::OrganizationStorageAccessPromptQuirk>>::reinsert((uint64_t)v14);
          WebCore::OrganizationStorageAccessPromptQuirk::~OrganizationStorageAccessPromptQuirk(v14, v16);
          if (v14 == a2)
            v11 = v15;
        }
        else
        {
          WebCore::OrganizationStorageAccessPromptQuirk::~OrganizationStorageAccessPromptQuirk(v14, v8);
        }
      }
      v14 = (WebCore::OrganizationStorageAccessPromptQuirk *)((char *)v14 + 32);
      --v13;
    }
    while (v13);
    goto LABEL_16;
  }
  result = 0;
  if (v4)
  {
LABEL_16:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v11;
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::OrganizationStorageAccessPromptQuirk,WebCore::OrganizationStorageAccessPromptQuirk,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::OrganizationStorageAccessPromptQuirk>,WTF::HashTraits<WebCore::OrganizationStorageAccessPromptQuirk>,WTF::HashTraits<WebCore::OrganizationStorageAccessPromptQuirk>>::reinsert(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  void *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  WTF::StringImpl *v10;
  _QWORD *v11;
  _QWORD *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = qword_1ECE841D0;
  if (qword_1ECE841D0)
    v3 = *(_DWORD *)(qword_1ECE841D0 - 8);
  else
    v3 = 0;
  v4 = WTF::computeHash<WebCore::OrganizationStorageAccessPromptQuirk>(*(_QWORD *)a1);
  v6 = 0;
  do
  {
    v7 = v4 & v3;
    v4 = ++v6 + v7;
  }
  while (*(_QWORD *)(v2 + 32 * v7));
  v8 = v2 + 32 * v7;
  v9 = (_QWORD *)(v8 + 16);
  WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v8 + 16, v5);
  v12 = (_QWORD *)(v8 + 8);
  v11 = *(_QWORD **)(v8 + 8);
  if (v11)
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v11, v10);
  v13 = *(WTF::StringImpl **)v8;
  *(_QWORD *)v8 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v10);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)v8 = v14;
  *v12 = 0;
  v15 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *v12 = v15;
  *v9 = 0;
  *(_QWORD *)(v8 + 24) = 0;
  v16 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  *v9 = v16;
  LODWORD(v16) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = 0;
  v17 = v2 + 32 * v7;
  *(_DWORD *)(v17 + 24) = v16;
  LODWORD(v16) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(v17 + 28) = v16;
  return v17;
}

uint64_t WTF::computeHash<WebCore::OrganizationStorageAccessPromptQuirk>(uint64_t a1)
{
  unsigned int v2;
  __int16 v3;
  char v4;

  v2 = -1640531527;
  v3 = 0;
  v4 = 0;
  WTF::add(&v2, a1);
  return WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v2);
}

unsigned int *WTF::add(unsigned int *result, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  if (a2)
  {
    v2 = *(_DWORD *)(a2 + 4);
    v3 = v2 & 0xFFFFFFFE;
    if ((v2 & 0xFFFFFFFE) != 0)
    {
      v4 = 0;
      v5 = *result;
      do
      {
        v6 = *(unsigned int *)(a2 + 4);
        v7 = v4 + 1;
        if (v4 >= v6 || v4 + 1 >= v6)
        {
          if (v4 >= v6)
          {
            v9 = 0;
          }
          else
          {
            v15 = *(_QWORD *)(a2 + 8);
            if ((*(_BYTE *)(a2 + 16) & 4) != 0)
              v9 = *(unsigned __int8 *)(v15 + v4);
            else
              v9 = *(unsigned __int16 *)(v15 + 2 * v4);
          }
          if (v4 + 1 >= v6)
          {
            v11 = 0;
            goto LABEL_10;
          }
        }
        else
        {
          v8 = *(_QWORD *)(a2 + 8);
          if ((*(_BYTE *)(a2 + 16) & 4) == 0)
          {
            v9 = *(unsigned __int16 *)(v8 + 2 * v4);
            v10 = *(_QWORD *)(a2 + 8);
LABEL_13:
            v11 = *(unsigned __int16 *)(v10 + 2 * v4 + 2);
            goto LABEL_10;
          }
          v9 = *(unsigned __int8 *)(v8 + v4);
        }
        v10 = *(_QWORD *)(a2 + 8);
        if ((*(_BYTE *)(a2 + 16) & 4) == 0)
          goto LABEL_13;
        v11 = *(unsigned __int8 *)(v10 + v4 + 1);
LABEL_10:
        v12 = (v9 << 11) ^ ((v5 + v11) << 16) ^ (v5 + v11);
        v5 = v12 + (v12 >> 11);
        *result = v5;
        v4 = v7 + 1;
      }
      while (v7 + 1 < v3);
    }
    if ((v2 & 1) != 0)
    {
      if (*(_DWORD *)(a2 + 4) <= v3)
      {
        v14 = 0;
      }
      else
      {
        v13 = *(_QWORD *)(a2 + 8);
        if ((*(_BYTE *)(a2 + 16) & 4) != 0)
          v14 = *(unsigned __int8 *)(v13 + v3);
        else
          v14 = *(unsigned __int16 *)(v13 + 2 * v3);
      }
      *result = ((*result + v14) ^ ((*result + v14) << 16)) + (((*result + v14) ^ ((*result + v14) << 16)) >> 11);
    }
  }
  return result;
}

uint64_t WebCore::OrganizationStorageAccessPromptQuirk::operator=(uint64_t a1, uint64_t *a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;

  v4 = (_DWORD *)*a2;
  if (*a2)
    *v4 += 2;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::operator=((_QWORD **)(a1 + 8), a2 + 1);
  WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 16), (uint64_t)(a2 + 2));
  return a1;
}

_QWORD **WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::operator=(_QWORD **a1, uint64_t *a2)
{
  WTF::StringImpl *v3;
  _QWORD *v4;
  _QWORD *v6;

  WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable((uint64_t *)&v6, a2);
  v4 = *a1;
  *a1 = v6;
  v6 = v4;
  if (v4)
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v4, v3);
  return a1;
}

unsigned int **_ZN3WTF7HashSetINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS_15HashTableTraitsEE8removeIfIZNS_11WeakHashSetIN7WebCore27CookiesEnabledStateObserverES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_(unsigned int **result, void *a2)
{
  unsigned int *v2;
  int v3;
  uint64_t *v4;
  int v5;
  unsigned int v6;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v12;
  int v13;

  v2 = *result;
  if (*result)
  {
    v3 = *(v2 - 1);
    if (v3)
    {
      v4 = (uint64_t *)result;
      v5 = 0;
      v6 = v3 - 1;
      do
      {
        result = (unsigned int **)&v2[2 * v6];
        if ((unint64_t)*result + 1 >= 2 && !*((_QWORD *)*result + 1))
        {
          result = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(result, a2);
          ++v5;
        }
      }
      while ((unint64_t)v6--);
      v8 = *v4;
      if (v5)
      {
        *(_DWORD *)(v8 - 16) += v5;
        v12 = *v4;
        if (*v4)
          v13 = *(_DWORD *)(v12 - 12);
        else
          v13 = 0;
        *(_DWORD *)(v12 - 12) = v13 - v5;
        v8 = *v4;
      }
      if (v8)
      {
        v9 = *(_DWORD *)(v8 - 4);
        v10 = 6 * *(_DWORD *)(v8 - 12);
        if (v9 >= 9 && v10 < v9)
          return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v4);
      }
    }
  }
  return result;
}

WebCore::ParsedContentRange *WebCore::ParsedContentRange::ParsedContentRange(WebCore::ParsedContentRange *this, const WTF::String *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  uint64_t i;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unsigned __int16 *v25;
  unint64_t v26;
  char v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  int64_t v35;
  char v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  char *v44;
  int16x8_t *v45;
  int16x8_t *v46;
  unint64_t v47;
  int16x8_t v48;
  int8x16_t v49;
  int16x8_t *v50;
  int16x8_t v51;
  int16x8_t v52;
  int8x16_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int16x8_t v57;
  uint64_t v59;
  unint64_t v60;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0x8000000000000000;
  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v4 = *(unsigned int *)(v3 + 16);
    v5 = *(_QWORD *)(v3 + 8);
    LODWORD(v3) = *(_DWORD *)(v3 + 4);
    v6 = (v4 >> 2) & 1;
  }
  else
  {
    v5 = 0;
    v6 = 1;
  }
  v59 = v5;
  v60 = v3 | (unint64_t)(v6 << 32);
  if (!WTF::StringView::startsWith())
    goto LABEL_147;
  if (BYTE4(v60))
  {
    if (v60 < 7)
      goto LABEL_147;
    v8 = v60 - 6;
    v9 = 16;
    if (v8 < 0x10)
      v9 = v60 - 6;
    v10 = v9;
    v11 = (_BYTE *)(v59 + 6);
    do
    {
      if (*v11 == 45)
        goto LABEL_13;
      ++v11;
      --v10;
    }
    while (v10);
    if (v8 < 0x11)
      goto LABEL_147;
    v11 = memchr((void *)(v59 + 6 + v9), 45, v8 - v9);
    if (!v11)
      goto LABEL_147;
LABEL_13:
    v12 = (uint64_t)&v11[-v59];
  }
  else
  {
    if (v60 < 7)
      goto LABEL_147;
    v45 = (int16x8_t *)(v59 + 12);
    v46 = (int16x8_t *)(v59 + 2 * v60);
    if (2 * (unint64_t)v60 - 75 >= 0xFFFFFFFFFFFFFFC1)
    {
      v56 = 2 * v60 - 12;
      while (v45->i16[0] != 45)
      {
        v45 = (int16x8_t *)((char *)v45 + 2);
        v56 -= 2;
        if (!v56)
          goto LABEL_147;
      }
    }
    else
    {
      if (v60 < 0xE)
      {
LABEL_118:
        if (v45 >= v46)
          goto LABEL_147;
        v50 = v46 - 1;
        v51.i64[0] = 0x2D002D002D002DLL;
        v51.i64[1] = 0x2D002D002D002DLL;
        v49 = (int8x16_t)vceqq_s16(v46[-1], v51);
        v51.i16[0] = vmaxvq_u16((uint16x8_t)v49);
        if (!v51.i32[0])
          goto LABEL_147;
      }
      else
      {
        v47 = v59 + 26;
        v48.i64[0] = 0x2D002D002D002DLL;
        v48.i64[1] = 0x2D002D002D002DLL;
        while (1)
        {
          v49 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v47 - 14), v48);
          LOWORD(v7) = vmaxvq_u16((uint16x8_t)v49);
          if (v7)
            break;
          v47 += 16;
          if (v47 >= (unint64_t)v46)
          {
            v45 = (int16x8_t *)(v47 - 14);
            goto LABEL_118;
          }
        }
        v50 = (int16x8_t *)(v47 - 14);
      }
      v45 = (int16x8_t *)((char *)v50
                        + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v49)));
    }
    if (v45 == v46)
      goto LABEL_147;
    v12 = ((uint64_t)v45->i64 - v59) >> 1;
  }
  if (v12 == -1)
    goto LABEL_147;
  v13 = v12 + 1;
  if (!BYTE4(v60))
  {
    if ((v12 + 1) >= (unint64_t)v60)
      goto LABEL_147;
    v20 = v59 + 2 * (v12 + 1);
    v19 = v59 + 2 * v60;
    v15 = v19 - v20;
    if ((uint64_t)(v19 - v20) <= -2)
      goto LABEL_129;
    if (v15 <= 0x3E)
      goto LABEL_130;
    if (v20 + 14 >= v19)
    {
      v54 = v59 + 2 * (v12 + 1);
LABEL_138:
      if (v54 >= v19)
        goto LABEL_147;
      v20 = v19 - 16;
      v57.i64[0] = 0x2F002F002F002FLL;
      v57.i64[1] = 0x2F002F002F002FLL;
      v53 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v19 - 16), v57);
      v57.i16[0] = vmaxvq_u16((uint16x8_t)v53);
      if (!v57.i32[0])
        goto LABEL_147;
    }
    else
    {
      v52.i64[0] = 0x2F002F002F002FLL;
      v52.i64[1] = 0x2F002F002F002FLL;
      while (1)
      {
        v53 = (int8x16_t)vceqq_s16(*(int16x8_t *)v20, v52);
        LOWORD(v7) = vmaxvq_u16((uint16x8_t)v53);
        if (v7)
          break;
        v54 = v20 + 16;
        v55 = v20 + 30;
        v20 += 16;
        if (v55 >= v19)
          goto LABEL_138;
      }
    }
    v15 = vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v53));
    v20 += 2 * v15;
    goto LABEL_141;
  }
  if (v60 <= v13)
    goto LABEL_147;
  v14 = v60 - (unint64_t)v13;
  v15 = 16;
  if (v14 < 0x10)
    v15 = v60 - (unint64_t)v13;
  if (v15)
  {
    v16 = v15;
    v17 = (_BYTE *)(v59 + v13);
    while (*v17 != 47)
    {
      ++v17;
      if (!--v16)
        goto LABEL_23;
    }
    goto LABEL_25;
  }
LABEL_23:
  if (v14 < 0x11 || (v17 = memchr((void *)(v59 + v13 + v15), 47, v14 - v15)) == 0)
  {
LABEL_147:
    *((_QWORD *)this + 2) = 0x8000000000000000;
    return this;
  }
LABEL_25:
  for (i = (uint64_t)&v17[-v59]; ; i = (uint64_t)(v20 - v59) >> 1)
  {
    if (i == -1)
      goto LABEL_147;
    LODWORD(v19) = v12 - 6;
    if ((int)v60 - 6 >= (v12 - 6))
      v19 = v19;
    else
      v19 = (v60 - 6);
    v20 = v60 - 6;
    if (BYTE4(v60))
    {
      if ((unint64_t)v60 - 6 < v19)
        goto LABEL_129;
      v21 = v59 + 6;
      v19 |= 0x100000000uLL;
    }
    else
    {
      if ((unint64_t)v60 - 6 < v19)
        goto LABEL_129;
      v21 = v59 + 12;
    }
    if ((v19 & 0x100000000) != 0)
    {
      if ((_DWORD)v19)
      {
        v22 = v19;
        v23 = (unsigned __int8 *)v21;
        while (*v23 - 48 < 0xA)
        {
          ++v23;
          if (!--v22)
            goto LABEL_46;
        }
        goto LABEL_147;
      }
LABEL_47:
      v26 = WTF::parseInteger<long long,unsigned char>(v21, v19, 0xAu, 0);
    }
    else
    {
      if ((_DWORD)v19)
      {
        v24 = 2 * v19;
        v25 = (unsigned __int16 *)v21;
        while (*v25 - 48 < 0xA)
        {
          ++v25;
          v24 -= 2;
          if (!v24)
          {
LABEL_46:
            if ((v19 & 0x100000000) == 0)
              goto LABEL_48;
            goto LABEL_47;
          }
        }
        goto LABEL_147;
      }
LABEL_48:
      v26 = WTF::parseInteger<long long,char16_t>(v21, v19, 0xAu, 0);
    }
    if (!v27)
      goto LABEL_147;
    *(_QWORD *)this = v26;
    if (v60 <= v13)
    {
      v29 = 0;
      v28 = "";
LABEL_70:
      v35 = WTF::parseInteger<long long,unsigned char>((uint64_t)v28, v29, 0xAu, 0);
      goto LABEL_72;
    }
    LODWORD(v19) = i - v13;
    if (v60 - v13 <= i - v13)
    {
      if ((_DWORD)v12 == -1)
      {
        v28 = (const char *)v59;
        v19 = v60;
        goto LABEL_59;
      }
      LODWORD(v19) = v60 - v13;
    }
    v15 = (v12 + 1);
    v19 = v19;
    v20 = v60 - (unint64_t)v13;
    if (BYTE4(v60))
    {
      if (v20 < v19)
        goto LABEL_129;
      v28 = (const char *)(v59 + v15);
      v19 = v19 | 0x100000000;
    }
    else
    {
      if (v20 < v19)
        goto LABEL_129;
      v28 = (const char *)(v59 + 2 * v15);
    }
LABEL_59:
    v29 = v19;
    v30 = v19 & 0xFF00000000;
    if (v30)
    {
      if (v29)
      {
        v31 = v29;
        v32 = v28;
        while (*(unsigned __int8 *)v32 - 48 < 0xA)
        {
          ++v32;
          if (!--v31)
            goto LABEL_69;
        }
        goto LABEL_147;
      }
      goto LABEL_70;
    }
    if (v29)
    {
      v33 = 2 * v29;
      v34 = v28;
      while (*(unsigned __int16 *)v34 - 48 < 0xA)
      {
        v34 += 2;
        v33 -= 2;
        if (!v33)
        {
LABEL_69:
          if (!v30)
            goto LABEL_71;
          goto LABEL_70;
        }
      }
      goto LABEL_147;
    }
LABEL_71:
    v35 = WTF::parseInteger<long long,char16_t>((uint64_t)v28, v29, 0xAu, 0);
LABEL_72:
    if (!v36)
      goto LABEL_147;
    *((_QWORD *)this + 1) = v35;
    v19 = (i + 1);
    if (v60 <= v19)
    {
      v20 = 0x100000000;
      v37 = "";
      goto LABEL_76;
    }
    if ((_DWORD)i == -1)
      break;
    v20 = (v60 - v19);
    v15 = v60 - (unint64_t)v19;
    if (BYTE4(v60))
    {
      if (v15 >= v20)
      {
        v37 = (char *)(v59 + v19);
        v20 |= 0x100000000uLL;
        goto LABEL_76;
      }
    }
    else if (v15 >= v20)
    {
      v37 = (char *)(v59 + 2 * v19);
      goto LABEL_76;
    }
LABEL_129:
    __break(1u);
LABEL_130:
    while (*(_WORD *)v20 != 47)
    {
      v20 += 2;
      v15 -= 2;
      if (!v15)
        goto LABEL_147;
    }
LABEL_141:
    if (v20 == v19)
      goto LABEL_147;
  }
  v37 = (char *)v59;
  v20 = v60;
LABEL_76:
  v38 = v20;
  if (v37 == "*" || v20 != 1)
  {
    if (v37 == "*" && v20 == 1)
      goto LABEL_83;
    if ((v20 & 0xFF00000000) != 0)
    {
      v20 = v20;
      v39 = v37;
      if ((_DWORD)v20)
        goto LABEL_91;
LABEL_93:
      v41 = WTF::parseInteger<long long,unsigned char>((uint64_t)v37, v38, 0xAu, 0);
    }
    else
    {
      if ((_DWORD)v20)
        goto LABEL_98;
LABEL_101:
      v41 = WTF::parseInteger<long long,char16_t>((uint64_t)v37, v38, 0xAu, 0);
    }
    v40 = v41;
    if (!v42)
      goto LABEL_147;
    v35 = *((_QWORD *)this + 1);
    goto LABEL_84;
  }
  if ((v20 & 0xFF00000000) == 0)
  {
    if (*(_WORD *)v37 == 42)
      goto LABEL_83;
LABEL_98:
    v43 = 2 * v20;
    v44 = v37;
    while (*(unsigned __int16 *)v44 - 48 < 0xA)
    {
      v44 += 2;
      v43 -= 2;
      if (!v43)
        goto LABEL_101;
    }
    goto LABEL_147;
  }
  v20 = v20;
  v39 = v37;
  if (*v37 != 42)
  {
LABEL_91:
    while (*v39 - 48 < 0xA)
    {
      ++v39;
      if (!--v20)
        goto LABEL_93;
    }
    goto LABEL_147;
  }
LABEL_83:
  v40 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_84:
  *((_QWORD *)this + 2) = v40;
  if ((*(_QWORD *)this & 0x8000000000000000) != 0
    || v35 < *(_QWORD *)this
    || v40 != 0x7FFFFFFFFFFFFFFFLL && v35 >= v40)
  {
    goto LABEL_147;
  }
  return this;
}

_QWORD *WebCore::ParsedContentRange::ParsedContentRange(_QWORD *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *this = a2;
  this[1] = a3;
  this[2] = a4;
  if (a2 < 0 || a3 < a2 || a4 != 0x7FFFFFFFFFFFFFFFLL && a3 >= a4)
    this[2] = 0x8000000000000000;
  return this;
}

{
  *this = a2;
  this[1] = a3;
  this[2] = a4;
  if (a2 < 0 || a3 < a2 || a4 != 0x7FFFFFFFFFFFFFFFLL && a3 >= a4)
    this[2] = 0x8000000000000000;
  return this;
}

unint64_t *WebCore::ParsedContentRange::headerValue@<X0>(unint64_t *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  const char *v8;
  int v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  char v13;
  const char *v14;
  int v15;

  v3 = this[2];
  if (v3 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v4 = *this;
    v5 = this[1];
    v14 = "bytes ";
    v15 = 6;
    v12 = v4;
    v13 = 45;
    v10 = v5;
    v8 = "/*";
    v9 = 2;
    this = (unint64_t *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<long long,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<long long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)&v14, &v12, &v13, &v10, (uint64_t)&v8, a2);
    if (*a2)
      return this;
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x1962FB128);
  }
  if (v3 == 0x8000000000000000)
  {
    *a2 = 0;
    return this;
  }
  v6 = (const char *)*this;
  v7 = this[1];
  v14 = "bytes ";
  v15 = 6;
  v8 = v6;
  v13 = 45;
  v12 = v7;
  v11 = 47;
  v10 = v3;
  this = (unint64_t *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<long long,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<long long,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<long long,void>>(&v14, (unint64_t *)&v8, &v13, &v12, &v11, &v10, a2);
  if (!*a2)
    goto LABEL_8;
  return this;
}

uint64_t WebCore::ParsedContentType::parseContentType(WTF::String *a1, int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned __int16 *v7;
  char v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned __int16 *v22;
  uint64_t v23;
  double v24;
  double v25;
  float v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  unint64_t v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  int v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  int v81;
  unsigned __int8 *v83;
  int v84;
  uint64_t v85;
  int v86;
  char v87;
  WTF::StringImpl *v88;
  _QWORD v89[2];
  unsigned int v90;
  WTF::StringImpl *v91[2];

  v4 = *(_QWORD *)a1;
  if (!a2)
  {
    if (v4)
    {
      v6 = *(_DWORD *)(v4 + 16);
      v7 = *(unsigned __int16 **)(v4 + 8);
      v48 = *(unsigned int *)(v4 + 4);
      if ((v6 & 4) != 0)
      {
        if ((_DWORD)v48)
        {
          while (1)
          {
            v50 = *(unsigned __int8 *)v7;
            v7 = (unsigned __int16 *)((char *)v7 + 1);
            v49 = v50;
            if (v50 == 10 || v49 == 13)
              goto LABEL_128;
            if (!--v48)
              goto LABEL_2;
          }
        }
      }
      else if ((_DWORD)v48)
      {
        while (1)
        {
          v81 = *v7++;
          v80 = v81;
          if (v81 == 10 || v80 == 13)
            goto LABEL_128;
          if (!--v48)
            goto LABEL_2;
        }
      }
      v5 = 0;
      v90 = 0;
      goto LABEL_4;
    }
    v7 = 0;
    v5 = 0;
    v90 = 0;
LABEL_119:
    v9 = 0x100000000;
    v8 = 1;
    goto LABEL_5;
  }
LABEL_2:
  v90 = 0;
  if (!v4)
  {
    v7 = 0;
    v5 = 0;
    goto LABEL_119;
  }
  v5 = *(_DWORD *)(v4 + 4);
  v6 = *(_DWORD *)(v4 + 16);
  v7 = *(unsigned __int16 **)(v4 + 8);
LABEL_4:
  v8 = 0;
  v9 = (unint64_t)((v6 >> 2) & 1) << 32;
LABEL_5:
  WebCore::skipSpaces((uint64_t)v7, v9 | v5, &v90);
  v10 = v90;
  v11 = v5 - v90;
  if (v5 <= v90)
    goto LABEL_128;
  if ((v8 & 1) != 0)
  {
    v12 = 0;
    v13 = 0x100000000;
  }
  else
  {
    v12 = *(_QWORD *)(v4 + 8);
    v13 = *(unsigned int *)(v4 + 4) | ((unint64_t)((*(_DWORD *)(v4 + 16) >> 2) & 1) << 32);
  }
  v14 = (unsigned __int16 *)WebCore::parseToken(v12, v13, &v90, a2, 0);
  if (!v14)
    goto LABEL_128;
  if (WebCore::containsNonTokenCharacters(v14, v15, a2))
    goto LABEL_128;
  v16 = v90;
  if (v90 >= v5)
    goto LABEL_128;
  ++v90;
  v17 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_128;
  v18 = *(unsigned int *)(v17 + 4);
  if (v18 <= v16)
    goto LABEL_128;
  v19 = *(_DWORD *)(v17 + 16);
  v20 = *(_QWORD *)(v17 + 8);
  v21 = (v19 & 4) != 0 ? *(unsigned __int8 *)(v20 + v16) : *(unsigned __int16 *)(v20 + 2 * v16);
  if (v21 != 47
    || (v22 = (unsigned __int16 *)WebCore::parseToken(v20, v18 | ((unint64_t)((v19 >> 2) & 1) << 32), &v90, a2, a2 == 1)) == 0|| WebCore::containsNonTokenCharacters(v22, v23, a2))
  {
LABEL_128:
    LOBYTE(v11) = 0;
    return v11 & 1;
  }
  v27 = WTF::String::find(a1, 0x3Bu, v10, v24, v25, v26);
  if (v27 != -1)
  {
    v31 = v27;
    WTF::String::substring((WTF::StringImpl **)a1, v10, v27 - v10, v91);
    WebCore::ParsedContentType::setContentType((uint64_t)a1, (WTF::StringImpl *)v91, a2);
    v33 = v91[0];
    v91[0] = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v32);
      else
        *(_DWORD *)v33 -= 2;
    }
    v90 = v31 + 1;
    while (1)
    {
      v34 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        v35 = *(_QWORD *)(v34 + 8);
        v36 = *(unsigned int *)(v34 + 4);
        v37 = ((unint64_t)*(unsigned int *)(v34 + 16) >> 2) & 1;
        WebCore::skipSpaces(v35, v36 & 0xFFFFFFFEFFFFFFFFLL | (v37 << 32), &v90);
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v37 = 1;
      }
      v38 = WebCore::parseToken(v35, v36 | (v37 << 32), &v90, a2, 0);
      v89[0] = v38;
      v89[1] = v39;
      if (!a2)
        break;
      v40 = v90;
      if (v90 >= v5)
        goto LABEL_22;
      v41 = *(_QWORD *)a1;
      if (!*(_QWORD *)a1)
        goto LABEL_128;
      v42 = *(_DWORD *)(v41 + 4);
      if (v42 <= v90)
        goto LABEL_128;
      v43 = *(_DWORD *)(v41 + 16);
      v44 = *(_QWORD *)(v41 + 8);
      if ((v43 & 4) != 0)
      {
        v45 = *(unsigned __int8 *)(v44 + v90);
        if (v45 != 61 && v45 != 59)
          goto LABEL_128;
        v46 = ++v90;
        v47 = *(unsigned __int8 *)(v44 + v40);
      }
      else
      {
        v79 = *(unsigned __int16 *)(v44 + 2 * v90);
        if (v79 != 59 && v79 != 61)
          goto LABEL_128;
        v46 = ++v90;
        v47 = *(unsigned __int16 *)(v44 + 2 * v40);
      }
      if (v47 != 59)
      {
LABEL_61:
        v88 = 0;
        v85 = 0;
        v86 = 0;
        v87 = 1;
        if (v46 >= v5 || v42 <= v46)
        {
          v56 = *(_QWORD *)(v41 + 8);
LABEL_84:
          v68 = (uint64_t)WebCore::parseToken(v56, v42 | ((unint64_t)((v43 >> 2) & 1) << 32), &v90, a2, a2 == 1);
LABEL_85:
          v85 = v68;
          v86 = (int)v59;
          v87 = BYTE4(v59);
          goto LABEL_86;
        }
        v56 = *(_QWORD *)(v41 + 8);
        if ((v43 & 4) != 0)
          v57 = *(unsigned __int8 *)(v56 + v46);
        else
          v57 = *(unsigned __int16 *)(v56 + 2 * v46);
        if (v57 != 34)
          goto LABEL_84;
        v58 = (v43 >> 2) & 1;
        if (a2 != 1)
        {
          v68 = WebCore::parseQuotedString(v56, v42 | (unint64_t)(v58 << 32), &v90);
          goto LABEL_85;
        }
        WebCore::collectHTTPQuotedString((WTF::StringImpl *)v91, v56, v42 | (unint64_t)(v58 << 32), &v90);
        v60 = v88;
        v88 = v91[0];
        if (v60)
        {
          if (*(_DWORD *)v60 == 2)
            WTF::StringImpl::destroy(v60, v59);
          else
            *(_DWORD *)v60 -= 2;
        }
        v61 = *(_QWORD *)a1;
        if (*(_QWORD *)a1)
        {
          v62 = *(unsigned int *)(v61 + 16);
          v63 = *(WTF::StringImpl **)(v61 + 8);
          v64 = *(unsigned int *)(v61 + 4);
          v91[0] = v63;
          v91[1] = (WTF::StringImpl *)(v64 & 0xFFFFFFFEFFFFFFFFLL | (((v62 >> 2) & 1) << 32));
          v59 = (WTF::StringImpl *)v90;
          if (v90 < v64)
          {
            v65 = (v62 >> 2) & 1;
            if (v64 <= v90 + 1)
              v66 = v90 + 1;
            else
              v66 = v64;
            if ((_DWORD)v65)
            {
              v83 = (unsigned __int8 *)v63 + v90;
              LODWORD(v67) = v90;
              while (1)
              {
                v84 = *v83++;
                if (v84 == 59)
                  break;
                LODWORD(v67) = v67 + 1;
                if ((_DWORD)v64 == (_DWORD)v67)
                {
LABEL_79:
                  LODWORD(v67) = v66;
                  break;
                }
              }
            }
            else
            {
              v67 = v90;
              while (*((_WORD *)v63 + v67) != 59)
              {
                if (v64 == ++v67)
                  goto LABEL_79;
              }
            }
            v90 = v67;
            if ((_DWORD)v67 != (_DWORD)v59)
              WTF::StringView::substring((const char *)v91, v59, v67 - (_DWORD)v59);
          }
        }
LABEL_86:
        if (v88)
          goto LABEL_87;
        if (v85)
        {
          WTF::StringView::toString((uint64_t *)v91, (WTF::StringView *)&v85);
          v72 = v91[0];
          v91[0] = 0;
          v73 = v88;
          v88 = v72;
          if (v73)
          {
            v74 = *(_DWORD *)v73 - 2;
            if (*(_DWORD *)v73 != 2)
              goto LABEL_102;
            WTF::StringImpl::destroy(v73, v59);
            v73 = v91[0];
            v91[0] = 0;
            if (v73)
            {
              v74 = *(_DWORD *)v73 - 2;
              if (*(_DWORD *)v73 == 2)
                WTF::StringImpl::destroy(v73, v59);
              else
LABEL_102:
                *(_DWORD *)v73 = v74;
            }
          }
LABEL_87:
          if (a2
            || (v75 = v90, v90 >= v5)
            || (++v90, (v76 = *(_QWORD *)a1) != 0)
            && *(_DWORD *)(v76 + 4) > v75
            && ((v77 = *(_QWORD *)(v76 + 8), (*(_BYTE *)(v76 + 16) & 4) == 0)
              ? (v78 = *(unsigned __int16 *)(v77 + 2 * v75))
              : (v78 = *(unsigned __int8 *)(v77 + v75)),
                v78 == 59))
          {
            if (v89[0])
            {
              WTF::StringView::toString((uint64_t *)v91, (WTF::StringView *)v89);
              WebCore::ParsedContentType::setContentTypeParameter((uint64_t)a1, v91[0], (const WTF::StringImpl *)&v88, a2);
              v69 = v91[0];
              v91[0] = 0;
              if (v69)
              {
                if (*(_DWORD *)v69 == 2)
                  WTF::StringImpl::destroy(v69, v59);
                else
                  *(_DWORD *)v69 -= 2;
              }
            }
            v70 = v90 >= v5;
            LOBYTE(v11) = v70 | v11;
          }
          else
          {
            LOBYTE(v11) = 0;
            v70 = 1;
          }
          goto LABEL_93;
        }
        if (a2 == 1)
          v70 = 2;
        else
          v70 = 1;
        LOBYTE(v11) = (a2 == 1) & v11;
LABEL_93:
        v71 = v88;
        v88 = 0;
        if (v71)
        {
          if (*(_DWORD *)v71 == 2)
            WTF::StringImpl::destroy(v71, v59);
          else
            *(_DWORD *)v71 -= 2;
        }
        if ((v70 | 2) != 2)
          return v11 & 1;
      }
    }
    v52 = v90;
    if (v38)
      v53 = v90 >= v5;
    else
      v53 = 1;
    if (v53)
      goto LABEL_128;
    v46 = ++v90;
    v41 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
      goto LABEL_128;
    v42 = *(_DWORD *)(v41 + 4);
    if (v42 <= v52)
      goto LABEL_128;
    v43 = *(_DWORD *)(v41 + 16);
    v54 = *(_QWORD *)(v41 + 8);
    v55 = (v43 & 4) != 0 ? *(unsigned __int8 *)(v54 + v52) : *(unsigned __int16 *)(v54 + 2 * v52);
    if (v55 != 61)
      goto LABEL_128;
    goto LABEL_61;
  }
  WTF::String::substring((WTF::StringImpl **)a1, v10, v11, v91);
  WebCore::ParsedContentType::setContentType((uint64_t)a1, (WTF::StringImpl *)v91, a2);
  v29 = v91[0];
  v91[0] = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v28);
    else
      *(_DWORD *)v29 -= 2;
  }
LABEL_22:
  LOBYTE(v11) = 1;
  return v11 & 1;
}

BOOL WebCore::containsNonTokenCharacters(unsigned __int16 *a1, uint64_t a2, int a3)
{
  BOOL v3;
  uint64_t v5;
  int v6;

  if (a3 == 1)
  {
    return !WebCore::isValidHTTPToken(a1, a2);
  }
  else if ((_DWORD)a2)
  {
    v5 = 0;
    v3 = 1;
    do
    {
      if ((a2 & 0xFF00000000) != 0)
        v6 = *((unsigned __int8 *)a1 + v5);
      else
        v6 = a1[v5];
      if ((v6 - 33) > 0x5E)
        break;
      if ((v6 - 34) <= 0x1E && ((1 << (v6 - 34)) & 0x7F0024C1) != 0)
        break;
      if ((v6 - 94) >= 0xFFFFFFFD)
        break;
      v3 = ++v5 < (unint64_t)a2;
    }
    while (a2 != v5);
  }
  else
  {
    return 0;
  }
  return v3;
}

WTF::StringImpl *WebCore::collectHTTPQuotedString(WTF::StringImpl *result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  _QWORD *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  unsigned int v33;
  char v34;
  __int16 v35;

  v7 = result;
  v8 = *a4 + 1;
  *a4 = v8;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 1;
  v9 = a3;
  v10 = a3 & 0xFF00000000;
  while (1)
  {
    v11 = a3 - v8;
    if (a3 <= v8)
      goto LABEL_28;
    v12 = v8;
    if (v10)
    {
      while (1)
      {
        v14 = *(unsigned __int8 *)(a2 + v12);
        if (v14 == 34 || v14 == 92)
          break;
        *a4 = ++v12;
        if (v9 == v12)
        {
LABEL_12:
          LODWORD(v12) = a3;
          break;
        }
      }
    }
    else
    {
      v12 = v8;
      while (1)
      {
        v13 = *(unsigned __int16 *)(a2 + 2 * v12);
        if (v13 == 34 || v13 == 92)
          break;
        *a4 = ++v12;
        if (v9 == v12)
          goto LABEL_12;
      }
    }
    v15 = v12 - v8;
    if ((_DWORD)v12 == v8)
      goto LABEL_16;
    v16 = v12 - v8;
    if (v11 > v15 || (v16 = a3 - v8, v8))
    {
      if (v9 - (unint64_t)v8 < v16)
        goto LABEL_68;
LABEL_16:
      LODWORD(v12) = v12 - v8;
      if (v11 <= v15)
      {
        LODWORD(v12) = a3 - v8;
        v17 = a3;
        if (!v8)
          goto LABEL_27;
      }
      goto LABEL_21;
    }
    if (v12 >= a3)
    {
      v17 = a3;
      goto LABEL_27;
    }
LABEL_21:
    v17 = v12;
    if (v10)
    {
      if (v9 - (unint64_t)v8 < v12)
        goto LABEL_68;
      v17 = v12 | 0x100000000;
    }
    else if (v9 - (unint64_t)v8 < v12)
    {
LABEL_68:
      __break(1u);
      return result;
    }
LABEL_27:
    if ((v17 & 0xFF00000000) == 0)
    {
      result = (WTF::StringImpl *)WTF::StringBuilder::append();
      goto LABEL_29;
    }
LABEL_28:
    result = (WTF::StringImpl *)WTF::StringBuilder::append();
LABEL_29:
    v19 = *a4;
    if (v19 >= a3)
      goto LABEL_55;
    v20 = v19 + 1;
    *a4 = v19 + 1;
    v21 = v10 ? *(unsigned __int8 *)(a2 + v19) : *(unsigned __int16 *)(a2 + 2 * v19);
    if (v21 != 92)
      goto LABEL_55;
    if (v20 >= a3)
      break;
    *a4 = v19 + 2;
    if (v10)
      v22 = *(unsigned __int8 *)(a2 + v20);
    else
      v22 = *(unsigned __int16 *)(a2 + 2 * v20);
    v35 = v22;
    if (!v32)
      goto LABEL_45;
    v23 = v33;
    if (v33 >= *((_DWORD *)v32 + 1) || v31)
      goto LABEL_45;
    if ((*((_BYTE *)v32 + 16) & 4) == 0)
    {
      v24 = *((_QWORD *)v32 + 1);
      ++v33;
      *(_WORD *)(v24 + 2 * v23) = v22;
      goto LABEL_46;
    }
    if (v22 > 0xFF)
    {
LABEL_45:
      result = (WTF::StringImpl *)WTF::StringBuilder::append();
    }
    else
    {
      v25 = *((_QWORD *)v32 + 1);
      ++v33;
      *(_BYTE *)(v25 + v23) = v22;
    }
LABEL_46:
    v8 = *a4;
  }
  v35 = 92;
  if (!v32 || (v26 = v33, v33 >= *((_DWORD *)v32 + 1)) || v31)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v27 = *((_DWORD *)v32 + 4);
    v28 = *((_QWORD *)v32 + 1);
    ++v33;
    if ((v27 & 4) != 0)
      *(_BYTE *)(v28 + v26) = 92;
    else
      *(_WORD *)(v28 + 2 * v26) = 92;
  }
LABEL_55:
  v29 = v31;
  if (v31
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v31),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v31),
        (v29 = v31) != 0))
  {
    *(_DWORD *)v29 += 2;
  }
  *v7 = v29;
  v30 = v32;
  v32 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v18);
    else
      *(_DWORD *)v30 -= 2;
  }
  result = v31;
  v31 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl **WTF::String::operator=(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v3 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (!v4)
    return a1;
  if (*(_DWORD *)v4 != 2)
  {
    *(_DWORD *)v4 -= 2;
    return a1;
  }
  WTF::StringImpl::destroy(v4, a2);
  return a1;
}

uint64_t WebCore::parseQuotedString(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  char v12;
  uint64_t v13;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;

  v3 = *a3;
  if (v3 >= a2)
    return 0;
  v4 = (v3 + 1);
  *a3 = v4;
  v5 = 0;
  if ((a2 & 0xFF00000000) != 0)
  {
    if (a2 <= v4 || *(_BYTE *)(result + v3) != 34)
      return v5;
    *a3 = v3 + 2;
    v10 = *(unsigned __int8 *)(result + v4);
    v9 = v3 + 1;
    if (v10 == 34)
    {
LABEL_39:
      v8 = v9 + 2;
      goto LABEL_40;
    }
    LOBYTE(v11) = 0;
    v12 = 0;
    v13 = v4 + 1;
    v9 = v4;
    while (a2 != v13)
    {
      if (v10 == 92)
        v12 = 1;
      if ((v11 & 1) != 0)
        v12 = 0;
      *a3 = v9 + 2;
      v10 = *(unsigned __int8 *)(result + v13++);
      v11 = v12 & 1;
      ++v9;
      if (v10 == 34 && v11 == 0)
        goto LABEL_39;
    }
    return 0;
  }
  if (a2 <= v4 || *(_WORD *)(result + 2 * v3) != 34)
    return v5;
  v6 = *(unsigned __int16 *)(result + 2 * v4);
  v7 = v6 << 24;
  if (v6 << 24 != 570425344)
  {
    LOBYTE(v15) = 0;
    v16 = 0;
    v17 = 1;
    while (v4 - a2 + v17)
    {
      if (v7 == 1543503872)
        v18 = 1;
      else
        v18 = v16;
      v6 = *(unsigned __int16 *)(result + 2 * (v4 + v17));
      if ((v15 & 1) != 0)
        v16 = 0;
      else
        v16 = v18;
      v7 = v6 << 24;
      v15 = v16 & 1;
      ++v17;
      if (v6 << 24 == 570425344 && v15 == 0)
      {
        v8 = v4 + v17;
        v9 = v4 + v17 - 1;
        goto LABEL_38;
      }
    }
    v5 = 0;
    *a3 = a2;
    return v5;
  }
  v8 = v4 + 1;
  v9 = v4;
LABEL_38:
  if (v6 == 34)
    goto LABEL_39;
LABEL_40:
  *a3 = v8;
  v20 = v8 - v4;
  if ((int)a2 - (int)v4 <= (v8 - v4))
  {
    if (!(_DWORD)v4)
      return result;
    v20 = a2 - v4;
  }
  v21 = v20;
  v22 = a2 - (unint64_t)v4;
  if ((a2 & 0xFF00000000) != 0)
  {
    if (v22 >= v21)
      return result + v4;
  }
  else if (v22 >= v21)
  {
    return result + 2 * v4;
  }
  __break(1u);
  return result;
}

BOOL WebCore::isValidContentType(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  int v3;
  _BYTE v5[40];
  unsigned __int8 v6;

  WebCore::ParsedContentType::create(a1, a2, (uint64_t)v5);
  v3 = v6;
  if (v6)
    WebCore::ParsedContentType::~ParsedContentType((WebCore::ParsedContentType *)v5, v2);
  return v3 != 0;
}

uint64_t WebCore::ParsedContentType::setCharset(uint64_t a1, WTF **a2)
{
  WTF::StringImpl *v4;
  const WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  WTF **v12;
  int i;
  uint64_t v14;
  WTF **v15;
  WTF *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  WTF *v29;
  WTF::StringImpl *v30;
  uint64_t result;
  WTF::StringImpl *v32;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = *(_QWORD *)(a1 + 8);
  v6 = (uint64_t *)(a1 + 8);
  v7 = v8;
  if (v8
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v6, 8u, 0), (v7 = *v6) != 0))
  {
    v9 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)v32 + 4);
  if (v10 < 0x100)
    v11 = WTF::StringImpl::hashSlowCase(v32);
  else
    v11 = v10 >> 8;
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (WTF **)(v7 + 16 * v14);
    v16 = *v15;
    if (*v15 != (WTF *)-1)
      break;
    v12 = (WTF **)(v7 + 16 * v14);
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v15 = v12;
    }
    v17 = v32;
    v32 = 0;
    v18 = *v15;
    *v15 = v17;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v4);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = *a2;
    *a2 = 0;
    v20 = v15[1];
    v15[1] = v19;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v4);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = *v6;
    if (*v6)
      v22 = *(_DWORD *)(v21 - 12) + 1;
    else
      v22 = 1;
    *(_DWORD *)(v21 - 12) = v22;
    v23 = *v6;
    if (*v6)
      v24 = *(_DWORD *)(v23 - 12);
    else
      v24 = 0;
    v25 = (*(_DWORD *)(v23 - 16) + v24);
    v26 = *(unsigned int *)(v23 - 4);
    if (v26 > 0x400)
    {
      if (v26 > 2 * v25)
        goto LABEL_36;
    }
    else
    {
      if (3 * v26 > 4 * v25)
        goto LABEL_36;
      if (!(_DWORD)v26)
      {
        v27 = 8;
        goto LABEL_35;
      }
    }
    v27 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
LABEL_35:
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v6, v27, v15);
    goto LABEL_36;
  }
  if (!WTF::equal(v16, v32, v5))
    goto LABEL_13;
  v28 = v7 + 16 * v14;
  v29 = *a2;
  *a2 = 0;
  v30 = *(WTF::StringImpl **)(v28 + 8);
  *(_QWORD *)(v28 + 8) = v29;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v4);
    else
      *(_DWORD *)v30 -= 2;
  }
LABEL_36:
  result = (uint64_t)v32;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      return WTF::StringImpl::destroy(v32, v4);
    else
      *(_DWORD *)v32 -= 2;
  }
  return result;
}

unint64_t WebCore::ParsedRequestRange::parse@<X0>(const char *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result;
  int v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  unint64_t v12;
  const char *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  const char *v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  unint64_t v22;
  int16x8_t *v23;
  int16x8_t *v24;
  unint64_t v25;
  int16x8_t v26;
  int8x16_t v27;
  int16x8_t *v28;
  int16x8_t v29;
  uint64_t v30;

  result = WTF::StringView::startsWith();
  if ((result & 1) != 0)
  {
    v6 = (unint64_t)a1;
    v7 = a2 >= 7;
    if (!BYTE4(a2))
      goto LABEL_45;
    if (a2 >= 7)
    {
      v8 = a2 - 6;
      v9 = 16;
      if (v8 < 0x10)
        v9 = a2 - 6;
      v10 = v9;
      result = (unint64_t)(a1 + 6);
      do
      {
        if (*(_BYTE *)result == 45)
          goto LABEL_11;
        ++result;
        --v10;
      }
      while (v10);
      if (v8 >= 0x11)
      {
        result = (unint64_t)memchr((void *)&a1[v9 + 6], 45, v8 - v9);
        if (result)
        {
LABEL_11:
          for (i = result - (_QWORD)a1; i != -1; i = (uint64_t)((uint64_t)v23->i64 - v6) >> 1)
          {
            if (a2 < 7)
            {
              v14 = 0;
              v13 = "";
            }
            else
            {
              LODWORD(v12) = i - 6;
              if ((int)a2 - 6 >= (i - 6))
                v12 = v12;
              else
                v12 = (a2 - 6);
              v7 = (unint64_t)a2 - 6 >= v12;
              if (BYTE4(a2))
              {
                if ((unint64_t)a2 - 6 < v12)
                  goto LABEL_44;
                v13 = (const char *)(v6 + 6);
                v12 |= 0x100000000uLL;
              }
              else
              {
                if ((unint64_t)a2 - 6 < v12)
                  goto LABEL_44;
                v13 = (const char *)(v6 + 12);
              }
              v14 = v12;
              if ((v12 & 0x100000000) == 0)
              {
                result = WTF::parseInteger<unsigned long long,char16_t>((uint64_t)v13, v12, 0xAu, 0);
                goto LABEL_25;
              }
            }
            result = WTF::parseInteger<unsigned long long,unsigned char>((uint64_t)v13, v14, 0xAu, 0);
LABEL_25:
            v6 = result;
            if (!v15)
              break;
            v16 = (i + 1);
            if (a2 <= v16)
            {
              v19 = 0;
              v17 = "";
LABEL_30:
              result = WTF::parseInteger<unsigned long long,unsigned char>((uint64_t)v17, v19, 0xAu, 0);
LABEL_32:
              if (v20 && v6 <= result)
              {
                *(_QWORD *)a3 = v6;
                *(_QWORD *)(a3 + 8) = result;
                v21 = 1;
                goto LABEL_35;
              }
              break;
            }
            if ((_DWORD)i == -1)
            {
              v17 = a1;
              v18 = a2;
LABEL_29:
              v19 = v18;
              if ((v18 & 0xFF00000000) != 0)
                goto LABEL_30;
              result = WTF::parseInteger<unsigned long long,char16_t>((uint64_t)v17, v18, 0xAu, 0);
              goto LABEL_32;
            }
            v18 = (a2 - v16);
            v22 = a2 - (unint64_t)v16;
            v7 = v22 >= v18;
            if (BYTE4(a2))
            {
              if (v22 >= v18)
              {
                v17 = &a1[v16];
                v18 |= 0x100000000uLL;
                goto LABEL_29;
              }
            }
            else if (v22 >= v18)
            {
              v17 = &a1[2 * v16];
              goto LABEL_29;
            }
LABEL_44:
            __break(1u);
LABEL_45:
            if (!v7)
              break;
            v23 = (int16x8_t *)(v6 + 12);
            v24 = (int16x8_t *)(v6 + 2 * a2);
            if (2 * (unint64_t)a2 - 75 >= 0xFFFFFFFFFFFFFFC1)
            {
              v30 = 2 * a2 - 12;
              while (v23->i16[0] != 45)
              {
                v23 = (int16x8_t *)((char *)v23 + 2);
                v30 -= 2;
                if (!v30)
                  goto LABEL_34;
              }
            }
            else
            {
              if (a2 < 0xE)
              {
LABEL_53:
                if (v23 >= v24)
                  break;
                v28 = v24 - 1;
                v29.i64[0] = 0x2D002D002D002DLL;
                v29.i64[1] = 0x2D002D002D002DLL;
                v27 = (int8x16_t)vceqq_s16(v24[-1], v29);
                v29.i16[0] = vmaxvq_u16((uint16x8_t)v27);
                if (!v29.i32[0])
                  break;
              }
              else
              {
                v25 = v6 + 26;
                v26.i64[0] = 0x2D002D002D002DLL;
                v26.i64[1] = 0x2D002D002D002DLL;
                while (1)
                {
                  v27 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v25 - 14), v26);
                  LOWORD(v5) = vmaxvq_u16((uint16x8_t)v27);
                  if (v5)
                    break;
                  v25 += 16;
                  if (v25 >= (unint64_t)v24)
                  {
                    v23 = (int16x8_t *)(v25 - 14);
                    goto LABEL_53;
                  }
                }
                v28 = (int16x8_t *)(v25 - 14);
              }
              v23 = (int16x8_t *)((char *)v28
                                + 2
                                * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v27)));
            }
            if (v23 == v24)
              break;
          }
        }
      }
    }
  }
LABEL_34:
  v21 = 0;
  *(_BYTE *)a3 = 0;
LABEL_35:
  *(_BYTE *)(a3 + 16) = v21;
  return result;
}

uint64_t WebCore::ProtectionSpaceBase::ProtectionSpaceBase(uint64_t result, _DWORD **a2, int a3, char a4, _DWORD **a5, char a6)
{
  _DWORD *v6;
  _DWORD *v7;

  v6 = *a2;
  if (*a2 && v6[1] || (v6 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
    *v6 += 2;
  *(_QWORD *)result = v6;
  v7 = *a5;
  if (*a5 && v7[1] || (v7 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
    *v7 += 2;
  *(_QWORD *)(result + 8) = v7;
  *(_DWORD *)(result + 16) = a3;
  *(_BYTE *)(result + 20) = a4;
  *(_BYTE *)(result + 21) = a6;
  *(_BYTE *)(result + 22) = 0;
  return result;
}

{
  _DWORD *v6;
  _DWORD *v7;

  v6 = *a2;
  if (*a2 && v6[1] || (v6 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
    *v6 += 2;
  *(_QWORD *)result = v6;
  v7 = *a5;
  if (*a5 && v7[1] || (v7 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
    *v7 += 2;
  *(_QWORD *)(result + 8) = v7;
  *(_DWORD *)(result + 16) = a3;
  *(_BYTE *)(result + 20) = a4;
  *(_BYTE *)(result + 21) = a6;
  *(_BYTE *)(result + 22) = 0;
  return result;
}

BOOL WebCore::ProtectionSpaceBase::isProxy(WebCore::ProtectionSpaceBase *this)
{
  return *((unsigned __int8 *)this + 20) - 5 < 4;
}

BOOL WebCore::ProtectionSpaceBase::receivesCredentialSecurely(WebCore::ProtectionSpaceBase *this)
{
  unsigned int v2;
  _BOOL8 result;
  BOOL v4;
  int v5;

  v2 = *((unsigned __int8 *)this + 20);
  result = 1;
  v4 = v2 > 6;
  v5 = (1 << v2) & 0x54;
  if (v4 || v5 == 0)
    return *((_BYTE *)this + 21) == 3;
  return result;
}

uint64_t WebCore::ProtectionSpaceBase::compare(WTF **this, const WTF::StringImpl **a2, const WebCore::ProtectionSpace *a3)
{
  uint64_t result;
  const WTF::StringImpl *v6;
  int v7;
  void *v8;

  result = WTF::equal(*this, *a2, a3);
  if ((_DWORD)result)
  {
    if (*((_DWORD *)this + 4) != *((_DWORD *)a2 + 4))
      return 0;
    v7 = *((unsigned __int8 *)this + 20);
    if (v7 != *((unsigned __int8 *)a2 + 20))
      return 0;
    if ((v7 - 5) < 4 || (result = WTF::equal(this[1], a2[1], v6), (_DWORD)result))
    {
      if (*((unsigned __int8 *)this + 21) == *((unsigned __int8 *)a2 + 21))
      {
        if (!((unint64_t)this[3] | (unint64_t)a2[3]))
          return 1;
        v8 = (void *)WebCore::ProtectionSpace::nsSpace((WebCore::ProtectionSpace *)this);
        return objc_msgSend(v8, "isEqual:", WebCore::ProtectionSpace::nsSpace((WebCore::ProtectionSpace *)a2));
      }
      return 0;
    }
  }
  return result;
}

BOOL RFC7230::isTokenCharacter(int a1)
{
  unsigned int v2;
  _BOOL8 result;

  v2 = a1 - 48;
  result = 1;
  if (v2 >= 0xA
    && (a1 | 0x20u) - 97 >= 0x1A
    && ((a1 - 33) > 0x3F || ((1 << (a1 - 33)) & 0xE00000000000367DLL) == 0))
  {
    return a1 == 124 || a1 == 126;
  }
  return result;
}

uint64_t RFC7230::isQuotedPairSecondOctet(int a1)
{
  uint64_t result;
  unsigned int v3;
  _BOOL4 v4;

  result = 1;
  if (a1 != 9
    && a1 != 32
    && (a1 - 48) >= 0xA
    && (a1 | 0x20u) - 97 >= 0x1A
    && ((a1 - 33) > 0x3F || ((1 << (a1 - 33)) & 0xFC000000FE007FFFLL) == 0))
  {
    v3 = a1 - 123;
    v4 = (a1 & 0xFF80) == 128;
    return v3 < 4 || v4;
  }
  return result;
}

BOOL RFC7230::isValidName(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  int v4;
  BOOL v6;
  uint64_t v8;
  int v9;
  BOOL v11;

  if ((_DWORD)a2)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      v2 = 0;
      v8 = 0;
      do
      {
        v9 = *(unsigned __int8 *)(a1 + v8);
        if ((v9 - 48) >= 0xA && (v9 | 0x20u) - 97 >= 0x1A)
        {
          v11 = (v9 - 33) > 0x3F || ((1 << (v9 - 33)) & 0xE00000000000367DLL) == 0;
          if (v11 && v9 != 126 && v9 != 124)
            break;
        }
        v2 = ++v8 >= (unint64_t)a2;
      }
      while (a2 != v8);
    }
    else
    {
      v2 = 0;
      v3 = 0;
      do
      {
        v4 = *(unsigned __int16 *)(a1 + 2 * v3);
        if ((v4 - 48) >= 0xA && (v4 | 0x20u) - 97 >= 0x1A)
        {
          v6 = (v4 - 33) > 0x3F || ((1 << (v4 - 33)) & 0xE00000000000367DLL) == 0;
          if (v6 && v4 != 126 && v4 != 124)
            break;
        }
        v2 = ++v3 >= (unint64_t)a2;
      }
      while (a2 != v3);
    }
  }
  else
  {
    return 0;
  }
  return v2;
}

uint64_t RFC7230::isValidValue(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  int v13;
  int v14;
  uint64_t v15;

  v2 = a2;
  if ((_DWORD)a2)
  {
    v3 = a2;
    v4 = result;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = a2 & 0xFF00000000;
    while (1)
    {
      if (v9)
      {
        if (v3 <= v5)
          goto LABEL_80;
        v10 = *(unsigned __int8 *)(v4 + v5);
      }
      else
      {
        if (v3 <= v5)
          goto LABEL_80;
        v10 = *(unsigned __int16 *)(v4 + 2 * v5);
      }
      switch(v8)
      {
        case 0u:
          v8 = 0;
          if (v10 == 9 || v10 == 32)
            goto LABEL_66;
          v8 = 1;
          if ((v10 - 48) < 0xA || (v10 | 0x20u) - 97 < 0x1A)
            goto LABEL_13;
          v15 = (v10 - 33);
          if (v15 > 0x3F)
            goto LABEL_73;
          if (((1 << (v10 - 33)) & 0xE00000000000367DLL) != 0)
            goto LABEL_13;
          if (v15 == 1)
          {
            v6 = 1;
            goto LABEL_56;
          }
          if (v15 == 7)
          {
            ++v7;
            v6 = 1;
            goto LABEL_60;
          }
LABEL_73:
          if (v10 == 124)
          {
LABEL_13:
            v6 = 1;
            goto LABEL_66;
          }
          v6 = 1;
          if (v10 != 126)
            return 0;
          goto LABEL_66;
        case 1u:
          v11 = (v10 - 48) >= 0xA && (v10 | 0x20u) - 97 >= 0x1A;
          if (v11
            && ((v10 - 33) > 0x3F || ((1 << (v10 - 33)) & 0xE00000000000367DLL) == 0)
            && v10 != 126
            && v10 != 124)
          {
            goto LABEL_65;
          }
          v8 = 1;
          goto LABEL_66;
        case 2u:
          if (v10 > 33)
          {
            if (v10 == 34)
            {
LABEL_65:
              v8 = 0;
              goto LABEL_66;
            }
            if (v10 == 92)
            {
              if (++v5 == v2)
                return 0;
              if (v9)
              {
                if (v3 <= v5)
                  goto LABEL_80;
                v13 = *(unsigned __int8 *)(v4 + v5);
              }
              else
              {
                if (v3 <= v5)
                  goto LABEL_80;
                v13 = *(unsigned __int16 *)(v4 + 2 * v5);
              }
              result = RFC7230::isQuotedPairSecondOctet(v13);
              if ((result & 1) == 0)
                return 0;
LABEL_56:
              v8 = 2;
              goto LABEL_66;
            }
          }
          else if ((v10 - 32) < 2 || v10 == 9)
          {
            goto LABEL_56;
          }
          v8 = 2;
          if ((v10 - 35) >= 0x39 && (v10 - 93) >= 0x22)
            goto LABEL_51;
          goto LABEL_66;
        case 3u:
          if (v10 <= 39)
          {
            v8 = 3;
            if (v10 == 9 || v10 == 32)
              goto LABEL_66;
          }
          else
          {
            switch(v10)
            {
              case '\\':
                if (++v5 == v2)
                  return 0;
                if (v9)
                {
                  if (v3 <= v5)
                  {
LABEL_80:
                    __break(1u);
                    return result;
                  }
                  v14 = *(unsigned __int8 *)(v4 + v5);
                }
                else
                {
                  if (v3 <= v5)
                    goto LABEL_80;
                  v14 = *(unsigned __int16 *)(v4 + 2 * v5);
                }
                result = RFC7230::isQuotedPairSecondOctet(v14);
                if ((result & 1) == 0)
                  return 0;
                goto LABEL_60;
              case ')':
                if (--v7)
                  v8 = 3;
                else
                  v8 = 0;
                goto LABEL_66;
              case '(':
                ++v7;
LABEL_60:
                v8 = 3;
                goto LABEL_66;
            }
          }
          v8 = 3;
          if ((v10 - 93) >= 0x22 && (v10 - 33) >= 7 && (v10 - 42) >= 0x32)
          {
LABEL_51:
            if ((v10 & 0xFF80) != 0x80)
              return 0;
          }
LABEL_66:
          if (++v5 >= v2)
            return (v8 < 2) & v6;
          break;
        default:
          goto LABEL_66;
      }
    }
  }
  v8 = 0;
  v6 = 0;
  return (v8 < 2) & v6;
}

uint64_t RFC8941::parseItemStructuredFieldValue@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  _QWORD v3[2];

  v3[0] = result;
  v3[1] = a2;
  if ((_DWORD)a2)
    return WTF::readCharactersForParsing<WTF::StringView,RFC8941::parseItemStructuredFieldValue(WTF::StringView)::$_0>((uint64_t)a3, (uint64_t)v3);
  *a3 = 0;
  a3[24] = 0;
  return result;
}

uint64_t WTF::readCharactersForParsing<WTF::StringView,RFC8941::parseItemStructuredFieldValue(WTF::StringView)::$_0>(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  WTF::StringImpl *v11;
  char v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  uint64_t v20;
  _BYTE v22[8];
  int v23;
  uint64_t v24;
  char v25;
  unsigned __int8 *v26;
  uint64_t v27;
  char v28;

  v3 = *(unsigned __int8 **)a2;
  v4 = *(unsigned int *)(a2 + 8);
  if (*(_BYTE *)(a2 + 12))
  {
    v26 = *(unsigned __int8 **)a2;
    v27 = v4;
    if ((_DWORD)v4)
    {
      if (*v3 == 32)
      {
        v5 = &v3[v4];
        v6 = v3 + 1;
        while (--v4)
        {
          v7 = *v6++;
          ++v3;
          if (v7 != 32)
            goto LABEL_15;
        }
        v3 = v5;
      }
LABEL_15:
      v26 = v3;
      v27 = v4;
    }
    RFC8941::parseItem<unsigned char>((uint64_t)v22, &v26);
    v12 = v25;
    if (!v25)
      goto LABEL_32;
    if (v27)
    {
      if (*v26 == 32)
      {
        v13 = v27 - 1;
        v14 = v26 + 1;
        while (v13)
        {
          v15 = *v14++;
          --v13;
          if (v15 != 32)
            goto LABEL_31;
        }
        goto LABEL_33;
      }
      goto LABEL_31;
    }
  }
  else
  {
    v26 = *(unsigned __int8 **)a2;
    v27 = v4;
    if ((_DWORD)v4)
    {
      if (*(_WORD *)v3 == 32)
      {
        v8 = &v3[2 * v4];
        v9 = v4 - 1;
        while (1)
        {
          v4 = v9;
          if (!v9)
            break;
          v10 = *((unsigned __int16 *)v3 + 1);
          v3 += 2;
          --v9;
          if (v10 != 32)
            goto LABEL_24;
        }
        v3 = v8;
      }
LABEL_24:
      v26 = v3;
      v27 = v4;
    }
    RFC8941::parseItem<char16_t>((uint64_t)v22, (unsigned __int16 **)&v26);
    v12 = v25;
    if (!v25)
      goto LABEL_32;
    if (v27)
    {
      if (*(_WORD *)v26 == 32)
      {
        v16 = v27 - 1;
        v17 = v26 + 2;
        while (v16)
        {
          v18 = *(unsigned __int16 *)v17;
          v17 += 2;
          --v16;
          if (v18 != 32)
            goto LABEL_31;
        }
        goto LABEL_33;
      }
LABEL_31:
      v12 = 0;
LABEL_32:
      *(_BYTE *)a1 = 0;
      goto LABEL_36;
    }
  }
LABEL_33:
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  v19 = v23;
  if (v23 != -1)
  {
    ((void (*)(char *, uint64_t, _BYTE *))off_1E341DB38[v23])(&v28, a1, v22);
    *(_DWORD *)(a1 + 8) = v19;
  }
  v20 = v24;
  v24 = 0;
  *(_QWORD *)(a1 + 16) = v20;
  v12 = 1;
LABEL_36:
  *(_BYTE *)(a1 + 24) = v12;
  return std::__optional_destruct_base<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v22, v11);
}

unsigned __int8 *RFC8941::parseDictionaryStructuredFieldValue@<X0>(unsigned __int8 *result@<X0>, WTF::StringImpl *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (**v6)();
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int16 *v11;
  int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t (**v24)();
  uint64_t v25;
  WTF::StringImpl *v26;
  unsigned int v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  int v30;
  WTF::StringImpl *v31;
  _QWORD *v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  WTF::StringImpl *v40;
  unsigned int v41;
  WTF::StringImpl *v42;
  int v43;
  unsigned int v44;
  WTF *v45;
  uint64_t v46;
  char *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  WTF *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  unsigned __int8 *v53;
  int v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  int v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unsigned __int8 *v71;
  int i;
  int v73;
  uint64_t v74;
  _QWORD *v75;
  WTF *v76;
  uint64_t v77;
  unsigned __int8 *v78;
  uint64_t v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  unsigned __int8 *v82;
  int v83;
  unsigned int v85;
  uint64_t v86;
  uint64_t v88;
  unsigned __int8 *v89;
  WTF *v90;
  unsigned int v91;
  unsigned __int8 *v92;
  unsigned __int8 *v93;
  int v94;
  WTF::StringImpl *v95;
  _QWORD *v96;
  WTF::StringImpl *v97;
  char *v98;
  uint64_t v99;
  _QWORD *v100;
  char *v101;
  unsigned int v102;
  uint64_t v103;
  int v104;
  WTF::StringImpl *v105;
  unsigned int v106;
  WTF::StringImpl *v107;
  WTF *v108;
  WTF::StringImpl *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned __int8 *v112;
  unsigned __int8 *v113;
  int v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  unsigned __int8 *v118;
  int v119;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  uint64_t v125;
  uint64_t (**v126)();
  int v127;
  unsigned int v128;
  WTF *v129;
  uint64_t v130;
  char *v131;
  WTF::StringImpl *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  unsigned __int8 *v138;
  int j;
  int v140;
  uint64_t v141;
  _QWORD *v142;
  WTF::StringImpl *v143;
  WTF *v144;
  _BYTE *v145;
  unsigned int v146;
  int v147;
  WTF *v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  int v155;
  unsigned __int8 *v156;
  uint64_t v157;
  _QWORD *v158;
  WTF::StringImpl *v159;
  unsigned int v160;
  WTF::StringImpl *v161;
  char v162;
  WTF *v163;
  uint64_t v164;
  char v165;
  char v166[8];
  WTF *v167;
  WTF *v168;
  int v169;
  WTF::StringImpl *v170;
  char v171;
  char v172[8];
  uint64_t v173;
  int v174;
  int v175;
  uint64_t v176;
  uint64_t v177;

  v177 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  if (!(_DWORD)a2)
    goto LABEL_299;
  v6 = off_1E341DB08;
  v145 = a3;
  if (((unint64_t)a2 & 0xFF00000000) != 0)
  {
    if (*result == 32)
    {
      v7 = &result[a2];
      v8 = result + 1;
      while (--v5)
      {
        v9 = *v8++;
        ++result;
        if (v9 != 32)
          goto LABEL_14;
      }
      result = v7;
    }
LABEL_14:
    v154 = 0;
    v156 = result;
    v157 = v5;
    v158 = 0;
    while (1)
    {
      v13 = v157;
      if (!v157)
      {
        v4 = (uint64_t)v158;
        v66 = v145;
        goto LABEL_152;
      }
      v14 = v156;
      if (*v156 - 97 > 0x19)
      {
        v154 = 0;
        v4 &= 0xFFFFFFFFFFFFFF00;
LABEL_139:
        v67 = (uint64_t)v158;
        if (v158)
        {
          v68 = *((unsigned int *)v158 - 1);
          if ((_DWORD)v68)
          {
            v69 = v158;
            do
            {
              if (*v69 != -1)
                v69 = (_QWORD *)WTF::KeyValuePair<WTF::String,std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>>::~KeyValuePair((uint64_t)v69, a2);
              v69 += 6;
              --v68;
            }
            while (v68);
          }
          result = (unsigned __int8 *)WTF::fastFree((WTF *)(v67 - 16), a2);
        }
        if (v154)
        {
          v70 = v157;
          v66 = v145;
          if (v157)
          {
            v71 = v156;
            for (i = *v156; i == 32; i = v73)
            {
              if (!--v70)
                goto LABEL_152;
              v73 = *++v71;
            }
            v156 = v71;
            v157 = v70;
            *v145 = 0;
            v145[8] = 0;
            if (v4)
            {
              v74 = *(unsigned int *)(v4 - 4);
              if ((_DWORD)v74)
              {
                v75 = (_QWORD *)v4;
                do
                {
                  if (*v75 != -1)
                    v75 = (_QWORD *)WTF::KeyValuePair<WTF::String,std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>>::~KeyValuePair((uint64_t)v75, a2);
                  v75 += 6;
                  --v74;
                }
                while (v74);
              }
              v76 = (WTF *)(v4 - 16);
              return (unsigned __int8 *)WTF::fastFree(v76, a2);
            }
            return result;
          }
LABEL_152:
          *(_QWORD *)v66 = v4;
          goto LABEL_301;
        }
LABEL_298:
        a3 = v145;
LABEL_299:
        *a3 = 0;
        a3[8] = 0;
        return result;
      }
      v15 = v157 - 1;
      v16 = ++v156;
      --v157;
      if (v13 != 1)
      {
        v17 = &v14[v13];
        v18 = v14 + 1;
        while (1)
        {
          v19 = *v16;
          v20 = (v19 - 123) > 0xFFFFFFE5 || (v19 - 58) > 0xFFFFFFF5;
          if (!v20)
          {
            v21 = v19 - 42;
            v20 = v21 > 0x35;
            v22 = (1 << v21) & 0x20000000000019;
            if (v20 || v22 == 0)
              break;
          }
          ++v16;
          ++v18;
          if (!--v15)
          {
            v156 = v17;
            v157 = 0;
            v16 = v17;
            goto LABEL_29;
          }
        }
        v156 = v18;
        v157 = v15;
      }
LABEL_29:
      v24 = v6;
      v173 = 0;
      v174 = 0;
      v175 = 0;
      v176 = 0;
      if (v15 && *v16 == 61)
      {
        v156 = v16 + 1;
        v157 = v15 - 1;
        if (v15 == 1 || v16[1] != 40)
        {
          RFC8941::parseItem<unsigned char>((uint64_t)&v159, &v156);
          v166[0] = 0;
          v171 = 0;
          if (v162)
          {
            LOBYTE(v167) = 0;
            LODWORD(v168) = -1;
            v41 = v160;
            if (v160 != -1)
            {
              ((void (*)(WTF **, WTF **, WTF::StringImpl **))off_1E341DB38[v160])(&v163, &v167, &v159);
              LODWORD(v168) = v41;
            }
            v169 = 0;
            v42 = v161;
            v161 = 0;
            v170 = v42;
            v171 = 1;
          }
          std::__optional_destruct_base<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v159, v40);
          if (v171)
            goto LABEL_93;
        }
        else
        {
          v163 = 0;
          v164 = 0;
          v25 = v15 - 2;
          v26 = (WTF::StringImpl *)(v16 + 2);
          v156 = v16 + 2;
          v157 = v15 - 2;
          if (v15 == 2)
          {
            v148 = 0;
            v147 = 0;
          }
          else
          {
            v148 = 0;
            v152 = v4;
            v27 = 0;
            while (2)
            {
              v28 = (unsigned __int8 *)v26 + v25;
              v29 = (unsigned __int8 *)v26;
              LODWORD(v144) = v27;
              while (1)
              {
                v30 = *v29;
                if (v30 != 32)
                  break;
                ++v29;
                v26 = (WTF::StringImpl *)((char *)v26 + 1);
                if (!--v25)
                  goto LABEL_41;
              }
              if (v30 == 41)
              {
                v156 = (unsigned __int8 *)v26 + 1;
                v157 = v25 - 1;
                RFC8941::parseParameters<unsigned char>((WTF::StringImpl *)&v159, (uint64_t)&v156);
                v6 = v24;
                if ((_BYTE)v160)
                {
                  v27 = 0;
                  LODWORD(v24) = v164;
                  v163 = 0;
                  v164 = 0;
                  v147 = 1;
                  v26 = v159;
                }
                else
                {
                  v148 = 0;
                  v147 = 0;
                }
                goto LABEL_87;
              }
              v28 = (unsigned __int8 *)v26;
LABEL_41:
              v6 = v24;
              v156 = v28;
              v157 = v25;
              RFC8941::parseItem<unsigned char>((uint64_t)&v159, &v156);
              if (v162)
              {
                v26 = (WTF::StringImpl *)v27;
                if (v27 == (_DWORD)v164)
                {
                  v32 = WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v163, v27 + 1, (unint64_t)&v159);
                  v33 = HIDWORD(v164);
                  v148 = v163;
                  v26 = (WTF *)((char *)v163 + 24 * HIDWORD(v164));
                  *(_BYTE *)v26 = 0;
                  *((_DWORD *)v26 + 2) = -1;
                  v34 = *((unsigned int *)v32 + 2);
                  if ((_DWORD)v34 != -1)
                  {
                    v146 = v33;
                    ((void (*)(char *, WTF::StringImpl *, _QWORD *))off_1E341DB38[v34])(&v165, v26, v32);
                    v33 = v146;
                    *((_DWORD *)v26 + 2) = v34;
                  }
                  v35 = (_QWORD *)((char *)v148 + 24 * v33 + 16);
                }
                else
                {
                  v36 = (char *)v148 + 24 * v27;
                  *v36 = 0;
                  *((_DWORD *)v36 + 2) = -1;
                  v37 = v160;
                  if (v160 != -1)
                  {
                    ((void (*)(char *, char *, WTF::StringImpl **))off_1E341DB38[v160])(&v165, v36, &v159);
                    *((_DWORD *)v36 + 2) = v37;
                  }
                  v35 = (_QWORD *)((char *)v148 + 24 * v26 + 16);
                  v32 = &v159;
                }
                *v35 = 0;
                v38 = v32[2];
                v32[2] = 0;
                *v35 = v38;
                v27 = ++HIDWORD(v164);
                v25 = v157;
                if (v157)
                {
                  v26 = (WTF::StringImpl *)v156;
                  v39 = *v156;
                  if (v39 == 32 || v39 == 41)
                  {
                    std::__optional_destruct_base<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v159, v31);
                    continue;
                  }
                }
              }
              break;
            }
            std::__optional_destruct_base<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v159, v31);
            v147 = 0;
            v148 = 0;
LABEL_87:
            v50 = v163;
            if (v27)
              WTF::VectorDestructor<true,std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>>::destruct((uint64_t)v163, (WTF *)((char *)v163 + 24 * v27));
            v4 = v152;
            if (v50)
              WTF::fastFree(v50, a2);
          }
          v166[0] = 0;
          v171 = 0;
          if (v147)
          {
            v167 = v148;
            v168 = (WTF *)__PAIR64__(v144, v24);
            v169 = 1;
            v170 = v26;
            v171 = 1;
LABEL_93:
            std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>::operator=[abi:sn180100]((uint64_t)v172, (uint64_t)v166);
            std::__optional_destruct_base<std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v166, v51);
LABEL_94:
            WTF::String::String();
            WTF::HashMap<WTF::String,std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>>,WTF::HashTableTraits>::inlineSet<WTF::String,std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>>((uint64_t)v166, (uint64_t *)&v158, &v159, (uint64_t)v172);
            result = (unsigned __int8 *)v159;
            v159 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
              else
                *(_DWORD *)result -= 2;
            }
            if (v157)
            {
              v52 = 0;
              v53 = v156 + 2;
              while (1)
              {
                v54 = v156[v52];
                if (v54 != 9 && v54 != 32)
                  break;
                ++v52;
                ++v53;
                if (v157 == v52)
                {
                  v156 += v157;
                  v157 = 0;
                  goto LABEL_103;
                }
              }
              if (v54 == 44)
              {
                v56 = ~v52 + v157;
                v57 = v157 - 1;
                v58 = &v156[v52 + 1];
                v156 = v58;
                v157 = v56;
                if (v57 != v52)
                {
                  do
                  {
                    v59 = *v58;
                    if (v59 != 32 && v59 != 9)
                    {
                      v157 = v56;
                      v55 = 1;
                      goto LABEL_118;
                    }
                    ++v58;
                    v156 = v53++;
                    --v56;
                  }
                  while (v56);
                  v157 = 0;
                }
                v154 = 0;
                v55 = 0;
              }
              else
              {
                v154 = 0;
                v55 = 0;
                v156 += v52;
                v157 -= v52;
              }
              v4 &= 0xFFFFFFFFFFFFFF00;
            }
            else
            {
LABEL_103:
              v55 = 0;
              v4 = (uint64_t)v158;
              v158 = 0;
              v154 = 1;
            }
            goto LABEL_118;
          }
        }
        v4 &= 0xFFFFFFFFFFFFFF00;
        result = (unsigned __int8 *)std::__optional_destruct_base<std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v166, a2);
        v154 = 0;
      }
      else
      {
        LOBYTE(v159) = 1;
        v160 = 2;
        result = (unsigned __int8 *)RFC8941::parseParameters<unsigned char>((WTF::StringImpl *)&v163, (uint64_t)&v156);
        v43 = v164;
        if ((_BYTE)v164)
        {
          v153 = v4;
          v166[0] = 0;
          LODWORD(v167) = -1;
          v44 = v160;
          if (v160 != -1)
          {
            ((void (*)(char *, char *, WTF::StringImpl **))off_1E341DB38[v160])(&v165, v166, &v159);
            LODWORD(v167) = v44;
          }
          v168 = v163;
          result = (unsigned __int8 *)std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>::operator=[abi:sn180100]<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters,(void *)0>((uint64_t)v172, (uint64_t)v166);
          v45 = v168;
          if (v168)
          {
            v46 = *((unsigned int *)v168 - 1);
            if ((_DWORD)v46)
            {
              v47 = (char *)v168 + 8;
              do
              {
                v48 = (WTF::StringImpl *)*((_QWORD *)v47 - 1);
                if (v48 != (WTF::StringImpl *)-1)
                {
                  v49 = *((unsigned int *)v47 + 2);
                  if ((_DWORD)v49 != -1)
                  {
                    ((void (*)(char *, char *))v24[v49])(&v165, v47);
                    v48 = (WTF::StringImpl *)*((_QWORD *)v47 - 1);
                  }
                  *((_DWORD *)v47 + 2) = -1;
                  *((_QWORD *)v47 - 1) = 0;
                  if (v48)
                  {
                    if (*(_DWORD *)v48 == 2)
                      WTF::StringImpl::destroy(v48, a2);
                    else
                      *(_DWORD *)v48 -= 2;
                  }
                }
                v47 += 24;
                --v46;
              }
              while (v46);
            }
            result = (unsigned __int8 *)WTF::fastFree((WTF *)((char *)v45 - 16), a2);
          }
          v4 = v153;
          v6 = v24;
          if ((_DWORD)v167 != -1)
            result = (unsigned __int8 *)((uint64_t (*)(char *, char *))v24[v167])(&v165, v166);
        }
        else
        {
          v154 = 0;
          v4 &= 0xFFFFFFFFFFFFFF00;
        }
        if (v160 != -1)
          result = (unsigned __int8 *)((uint64_t (*)(char *, WTF::StringImpl **))v6[v160])(v166, &v159);
        if (v43)
          goto LABEL_94;
      }
      v55 = 0;
LABEL_118:
      v61 = v176;
      if (v176)
      {
        v62 = *(unsigned int *)(v176 - 4);
        if ((_DWORD)v62)
        {
          v63 = v176 + 8;
          do
          {
            v64 = *(WTF::StringImpl **)(v63 - 8);
            if (v64 != (WTF::StringImpl *)-1)
            {
              v65 = *(unsigned int *)(v63 + 8);
              if ((_DWORD)v65 != -1)
              {
                ((void (*)(char *, uint64_t))v6[v65])(v166, v63);
                v64 = *(WTF::StringImpl **)(v63 - 8);
              }
              *(_DWORD *)(v63 + 8) = -1;
              *(_QWORD *)(v63 - 8) = 0;
              if (v64)
              {
                if (*(_DWORD *)v64 == 2)
                  WTF::StringImpl::destroy(v64, a2);
                else
                  *(_DWORD *)v64 -= 2;
              }
            }
            v63 += 24;
            --v62;
          }
          while (v62);
        }
        result = (unsigned __int8 *)WTF::fastFree((WTF *)(v61 - 16), a2);
      }
      if (v175 != -1)
        result = (unsigned __int8 *)((uint64_t (*)(char *, uint64_t *))off_1E341DB50[v175])(v166, &v173);
      if ((v55 & 1) == 0)
        goto LABEL_139;
    }
  }
  if (*(_WORD *)result == 32)
  {
    v10 = &result[2 * a2];
    v11 = (unsigned __int16 *)(result + 2);
    while (--v5)
    {
      v12 = *v11++;
      result += 2;
      if (v12 != 32)
        goto LABEL_161;
    }
    result = v10;
  }
LABEL_161:
  v155 = 0;
  v156 = result;
  v157 = v5;
  v158 = 0;
  while (1)
  {
    v77 = v157;
    if (!v157)
    {
      v3 = (uint64_t)v158;
      v66 = v145;
      goto LABEL_300;
    }
    v78 = v156;
    if (*(unsigned __int16 *)v156 - 97 > 0x19)
      break;
    v79 = v157 - 1;
    v80 = v156 + 2;
    v156 += 2;
    --v157;
    if (v77 != 1)
    {
      v81 = &v78[2 * v77];
      v82 = v78 + 2;
      while (1)
      {
        v83 = *(unsigned __int16 *)v80;
        if ((v83 - 123) <= 0xFFFFFFE5 && (v83 - 58) <= 0xFFFFFFF5)
        {
          v85 = v83 - 42;
          v20 = v85 > 0x35;
          v86 = (1 << v85) & 0x20000000000019;
          if (v20 || v86 == 0)
            break;
        }
        v80 += 2;
        v82 += 2;
        if (!--v79)
        {
          v156 = v81;
          v157 = 0;
          v80 = v81;
          goto LABEL_176;
        }
      }
      v156 = v82;
      v157 = v79;
    }
LABEL_176:
    v173 = 0;
    v174 = 0;
    v175 = 0;
    v176 = 0;
    if (v79 && *(_WORD *)v80 == 61)
    {
      v156 = v80 + 2;
      v157 = v79 - 1;
      if (v79 == 1 || *((_WORD *)v80 + 1) != 40)
      {
        RFC8941::parseItem<char16_t>((uint64_t)&v159, (unsigned __int16 **)&v156);
        v166[0] = 0;
        v171 = 0;
        if (v162)
        {
          LOBYTE(v167) = 0;
          LODWORD(v168) = -1;
          v106 = v160;
          if (v160 != -1)
          {
            ((void (*)(WTF **, WTF **, WTF::StringImpl **))off_1E341DB38[v160])(&v163, &v167, &v159);
            LODWORD(v168) = v106;
          }
          v169 = 0;
          v107 = v161;
          v161 = 0;
          v170 = v107;
          v171 = 1;
        }
        std::__optional_destruct_base<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v159, v105);
        if (v171)
          goto LABEL_215;
      }
      else
      {
        v163 = 0;
        v164 = 0;
        v88 = v79 - 2;
        v89 = v80 + 4;
        v156 = v80 + 4;
        v157 = v79 - 2;
        if (v79 == 2)
        {
          v90 = 0;
        }
        else
        {
          v149 = v3;
          v90 = 0;
          v91 = 0;
          while (2)
          {
            v92 = &v89[2 * v88];
            v93 = v89;
            v151 = v91;
            while (1)
            {
              v94 = *(unsigned __int16 *)v93;
              if (v94 != 32)
                break;
              v93 += 2;
              v89 += 2;
              if (!--v88)
                goto LABEL_185;
            }
            if (v94 == 41)
            {
              v156 = v89 + 2;
              v157 = v88 - 1;
              RFC8941::parseParameters<char16_t>((WTF::StringImpl *)&v159, (uint64_t)&v156);
              if ((_BYTE)v160)
              {
                v91 = 0;
                LODWORD(v144) = v164;
                v163 = 0;
                v164 = 0;
                LODWORD(v88) = 1;
                v143 = v159;
              }
              else
              {
                v90 = 0;
                LODWORD(v88) = 0;
              }
              goto LABEL_209;
            }
            v92 = v89;
LABEL_185:
            v156 = v92;
            v157 = v88;
            RFC8941::parseItem<char16_t>((uint64_t)&v159, (unsigned __int16 **)&v156);
            if (v162)
            {
              if (v91 == (_DWORD)v164)
              {
                v96 = WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v163, v91 + 1, (unint64_t)&v159);
                v97 = (WTF::StringImpl *)HIDWORD(v164);
                v144 = v163;
                v98 = (char *)v163 + 24 * HIDWORD(v164);
                *v98 = 0;
                *((_DWORD *)v98 + 2) = -1;
                v99 = *((unsigned int *)v96 + 2);
                if ((_DWORD)v99 != -1)
                {
                  v143 = v97;
                  ((void (*)(char *, char *, _QWORD *))off_1E341DB38[v99])(&v165, v98, v96);
                  LODWORD(v97) = (_DWORD)v143;
                  *((_DWORD *)v98 + 2) = v99;
                }
                v90 = v144;
                v100 = (_QWORD *)((char *)v144 + 24 * v97 + 16);
              }
              else
              {
                v144 = v90;
                v101 = (char *)v90 + 24 * v91;
                *v101 = 0;
                *((_DWORD *)v101 + 2) = -1;
                v102 = v160;
                if (v160 != -1)
                {
                  ((void (*)(char *, char *, WTF::StringImpl **))off_1E341DB38[v160])(&v165, v101, &v159);
                  *((_DWORD *)v101 + 2) = v102;
                }
                v90 = v144;
                v100 = (_QWORD *)((char *)v144 + 24 * v91 + 16);
                v96 = &v159;
              }
              *v100 = 0;
              v103 = v96[2];
              v96[2] = 0;
              *v100 = v103;
              v91 = ++HIDWORD(v164);
              v88 = v157;
              if (v157)
              {
                v89 = v156;
                v104 = *(unsigned __int16 *)v156;
                if (v104 == 32 || v104 == 41)
                {
                  std::__optional_destruct_base<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v159, v95);
                  continue;
                }
              }
            }
            break;
          }
          std::__optional_destruct_base<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v159, v95);
          LODWORD(v88) = 0;
          v90 = 0;
LABEL_209:
          v108 = v163;
          if (v91)
            WTF::VectorDestructor<true,std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>>::destruct((uint64_t)v163, (WTF *)((char *)v163 + 24 * v91));
          v3 = v149;
          if (v108)
            WTF::fastFree(v108, a2);
        }
        v166[0] = 0;
        v171 = 0;
        if ((_DWORD)v88)
        {
          v167 = v90;
          v168 = (WTF *)__PAIR64__(v151, v144);
          v169 = 1;
          v170 = v143;
          v171 = 1;
LABEL_215:
          std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>::operator=[abi:sn180100]((uint64_t)v172, (uint64_t)v166);
          std::__optional_destruct_base<std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v166, v109);
LABEL_216:
          WTF::String::String();
          WTF::HashMap<WTF::String,std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>>,WTF::HashTableTraits>::inlineSet<WTF::String,std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>>((uint64_t)v166, (uint64_t *)&v158, &v159, (uint64_t)v172);
          result = (unsigned __int8 *)v159;
          v159 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
            else
              *(_DWORD *)result -= 2;
          }
          if (v157)
          {
            v110 = 0;
            v111 = 0;
            v112 = &v156[2 * v157];
            v113 = v156 + 2;
            while (1)
            {
              v114 = *(unsigned __int16 *)&v156[2 * v111];
              if (v114 != 9 && v114 != 32)
                break;
              ++v111;
              v110 -= 2;
              v113 += 2;
              if (v157 == v111)
              {
                v156 += 2 * v157;
                v157 = 0;
                goto LABEL_225;
              }
            }
            if (v114 == 44)
            {
              v116 = ~v111 + v157;
              v117 = v157 - 1;
              v118 = &v156[-v110 + 2];
              v156 = v118;
              v157 = v116;
              if (v117 != v111)
              {
                do
                {
                  v119 = *(unsigned __int16 *)v118;
                  if (v119 != 32 && v119 != 9)
                  {
                    v156 = v113;
                    v157 = v116;
                    v115 = 1;
                    goto LABEL_238;
                  }
                  v118 += 2;
                  v113 += 2;
                  --v116;
                }
                while (v116);
                v156 = v112;
                v157 = 0;
              }
              v155 = 0;
              v115 = 0;
            }
            else
            {
              v155 = 0;
              v115 = 0;
              v156 -= v110;
              v157 -= v111;
            }
            v3 &= 0xFFFFFFFFFFFFFF00;
          }
          else
          {
LABEL_225:
            v115 = 0;
            v3 = (uint64_t)v158;
            v158 = 0;
            v155 = 1;
          }
          goto LABEL_238;
        }
      }
      v3 &= 0xFFFFFFFFFFFFFF00;
      result = (unsigned __int8 *)std::__optional_destruct_base<std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v166, a2);
      v155 = 0;
      v115 = 0;
    }
    else
    {
      v126 = v6;
      v150 = v3;
      LOBYTE(v159) = 1;
      v160 = 2;
      result = (unsigned __int8 *)RFC8941::parseParameters<char16_t>((WTF::StringImpl *)&v163, (uint64_t)&v156);
      v127 = v164;
      if ((_BYTE)v164)
      {
        v166[0] = 0;
        LODWORD(v167) = -1;
        v128 = v160;
        if (v160 != -1)
        {
          ((void (*)(char *, char *, WTF::StringImpl **))off_1E341DB38[v160])(&v165, v166, &v159);
          LODWORD(v167) = v128;
        }
        v168 = v163;
        result = (unsigned __int8 *)std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>::operator=[abi:sn180100]<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters,(void *)0>((uint64_t)v172, (uint64_t)v166);
        v129 = v168;
        if (v168)
        {
          v130 = *((unsigned int *)v168 - 1);
          if ((_DWORD)v130)
          {
            v131 = (char *)v168 + 8;
            do
            {
              v132 = (WTF::StringImpl *)*((_QWORD *)v131 - 1);
              if (v132 != (WTF::StringImpl *)-1)
              {
                v133 = *((unsigned int *)v131 + 2);
                if ((_DWORD)v133 != -1)
                {
                  ((void (*)(char *, char *))v126[v133])(&v165, v131);
                  v132 = (WTF::StringImpl *)*((_QWORD *)v131 - 1);
                }
                *((_DWORD *)v131 + 2) = -1;
                *((_QWORD *)v131 - 1) = 0;
                if (v132)
                {
                  if (*(_DWORD *)v132 == 2)
                    WTF::StringImpl::destroy(v132, a2);
                  else
                    *(_DWORD *)v132 -= 2;
                }
              }
              v131 += 24;
              --v130;
            }
            while (v130);
          }
          result = (unsigned __int8 *)WTF::fastFree((WTF *)((char *)v129 - 16), a2);
        }
        if ((_DWORD)v167 != -1)
          result = (unsigned __int8 *)((uint64_t (*)(char *, char *))v126[v167])(&v165, v166);
      }
      else
      {
        v155 = 0;
        v150 &= 0xFFFFFFFFFFFFFF00;
      }
      if (v160 != -1)
        result = (unsigned __int8 *)((uint64_t (*)(char *, WTF::StringImpl **))v126[v160])(v166, &v159);
      if (v127)
      {
        v3 = v150;
        v6 = v126;
        goto LABEL_216;
      }
      v115 = 0;
      v3 = v150;
      v6 = v126;
    }
LABEL_238:
    v121 = v176;
    if (v176)
    {
      v122 = *(unsigned int *)(v176 - 4);
      if ((_DWORD)v122)
      {
        v123 = v176 + 8;
        do
        {
          v124 = *(WTF::StringImpl **)(v123 - 8);
          if (v124 != (WTF::StringImpl *)-1)
          {
            v125 = *(unsigned int *)(v123 + 8);
            if ((_DWORD)v125 != -1)
            {
              ((void (*)(char *, uint64_t))v6[v125])(v166, v123);
              v124 = *(WTF::StringImpl **)(v123 - 8);
            }
            *(_DWORD *)(v123 + 8) = -1;
            *(_QWORD *)(v123 - 8) = 0;
            if (v124)
            {
              if (*(_DWORD *)v124 == 2)
                WTF::StringImpl::destroy(v124, a2);
              else
                *(_DWORD *)v124 -= 2;
            }
          }
          v123 += 24;
          --v122;
        }
        while (v122);
      }
      result = (unsigned __int8 *)WTF::fastFree((WTF *)(v121 - 16), a2);
    }
    if (v175 != -1)
      result = (unsigned __int8 *)((uint64_t (*)(char *, uint64_t *))off_1E341DB50[v175])(v166, &v173);
    if ((v115 & 1) == 0)
      goto LABEL_285;
  }
  v155 = 0;
  v3 &= 0xFFFFFFFFFFFFFF00;
LABEL_285:
  v134 = (uint64_t)v158;
  if (v158)
  {
    v135 = *((unsigned int *)v158 - 1);
    if ((_DWORD)v135)
    {
      v136 = v158;
      do
      {
        if (*v136 != -1)
          v136 = (_QWORD *)WTF::KeyValuePair<WTF::String,std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>>::~KeyValuePair((uint64_t)v136, a2);
        v136 += 6;
        --v135;
      }
      while (v135);
    }
    result = (unsigned __int8 *)WTF::fastFree((WTF *)(v134 - 16), a2);
  }
  if (!v155)
    goto LABEL_298;
  v137 = v157;
  v66 = v145;
  if (!v157)
  {
LABEL_300:
    *(_QWORD *)v66 = v3;
LABEL_301:
    v66[8] = 1;
    return result;
  }
  v138 = v156;
  for (j = *(unsigned __int16 *)v156; j == 32; j = v140)
  {
    if (!--v137)
      goto LABEL_300;
    v140 = *((unsigned __int16 *)v138 + 1);
    v138 += 2;
  }
  v156 = v138;
  v157 = v137;
  *v145 = 0;
  v145[8] = 0;
  if (v3)
  {
    v141 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v141)
    {
      v142 = (_QWORD *)v3;
      do
      {
        if (*v142 != -1)
          v142 = (_QWORD *)WTF::KeyValuePair<WTF::String,std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>>::~KeyValuePair((uint64_t)v142, a2);
        v142 += 6;
        --v141;
      }
      while (v141);
    }
    v76 = (WTF *)(v3 - 16);
    return (unsigned __int8 *)WTF::fastFree(v76, a2);
  }
  return result;
}

WTF::StringImpl *WebCore::ResourceErrorBase::isolatedCopy@<X0>(WebCore::ResourceErrorBase *this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  __int128 v12;
  __int128 v13;

  WebCore::ResourceError::platformLazyInit(this);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  WTF::URL::invalidate((WTF::URL *)(a2 + 8));
  *(_QWORD *)(a2 + 48) = 0;
  v4 = (WTF::StringImpl **)(a2 + 48);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 54) = 0;
  *(_BYTE *)(a2 + 72) = 1;
  WTF::String::isolatedCopy();
  v6 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v11;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  *(_DWORD *)(a2 + 56) = *((_DWORD *)this + 14);
  WTF::URL::isolatedCopy();
  v8 = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  *(_OWORD *)(a2 + 16) = v12;
  *(_OWORD *)(a2 + 32) = v13;
  WTF::String::isolatedCopy();
  result = *v4;
  *v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy(result, v9);
      result = 0;
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  *(_BYTE *)(a2 + 60) = *((_BYTE *)this + 60);
  return result;
}

uint64_t WebCore::ResourceErrorBase::setType(uint64_t result, char a2)
{
  *(_BYTE *)(result + 60) = a2;
  return result;
}

uint64_t WebCore::ResourceErrorBase::compare(WTF **this, const WTF::StringImpl **a2, const WebCore::ResourceError *a3)
{
  int v3;
  int v4;
  uint64_t result;
  const WTF::StringImpl *v8;
  int v9;
  const WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  uint64_t v12;

  v3 = *((unsigned __int8 *)this + 60);
  v4 = *((unsigned __int8 *)a2 + 60);
  if (!(v3 | v4))
    return 1;
  if (v3 != v4)
    return 0;
  WebCore::ResourceError::platformLazyInit((WebCore::ResourceError *)this);
  WebCore::ResourceError::platformLazyInit((WebCore::ResourceError *)a2);
  result = WTF::equal(*this, *a2, v8);
  if (!(_DWORD)result)
    return result;
  WebCore::ResourceError::platformLazyInit((WebCore::ResourceError *)this);
  v9 = *((_DWORD *)this + 14);
  WebCore::ResourceError::platformLazyInit((WebCore::ResourceError *)a2);
  if (v9 != *((_DWORD *)a2 + 14))
    return 0;
  WebCore::ResourceError::platformLazyInit((WebCore::ResourceError *)this);
  WebCore::ResourceError::platformLazyInit((WebCore::ResourceError *)a2);
  result = WTF::equal(this[1], a2[1], v10);
  if ((_DWORD)result)
  {
    WebCore::ResourceError::platformLazyInit((WebCore::ResourceError *)this);
    WebCore::ResourceError::platformLazyInit((WebCore::ResourceError *)a2);
    result = WTF::equal(this[6], a2[6], v11);
    if ((_DWORD)result)
    {
      v12 = WebCore::ResourceError::nsError((WebCore::ResourceError *)this);
      return v12 == WebCore::ResourceError::nsError((WebCore::ResourceError *)a2);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::createInternalError@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  WTFReportError();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::localizedString(CFSTR("WebKit encountered an internal error"), (uint64_t)&v7);
  WebCore::ResourceErrorBase::ResourceErrorBase(a2, (_DWORD **)&v8, 300, a1, (_DWORD **)&v7, 1, 0);
  *(_QWORD *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 72) = 1;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::badResponseHeadersError@<X0>(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::ResourceErrorBase::ResourceErrorBase(a2, (_DWORD **)&v9, 0, (uint64_t)this, (_DWORD **)&v8, 1, 0);
  *(_QWORD *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 72) = 1;
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  result = v9;
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t *WebCore::ResourceHandle::registerBuiltinConstructor(WTF::StringImpl *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v4 = a2;
  {
    WebCore::builtinResourceHandleConstructorMap(void)::map = 0;
  }
  return WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::ResourceHandle,WTF::RawPtrTraits<WebCore::ResourceHandle>,WTF::DefaultRefDerefTraits<WebCore::ResourceHandle>> (*)(WebCore::ResourceRequest const&,WebCore::ResourceHandleClient *),WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::ResourceHandle,WTF::RawPtrTraits<WebCore::ResourceHandle>,WTF::DefaultRefDerefTraits<WebCore::ResourceHandle>> (*)(WebCore::ResourceRequest const&,WebCore::ResourceHandleClient *)>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::ResourceHandle,WTF::RawPtrTraits<WebCore::ResourceHandle>,WTF::DefaultRefDerefTraits<WebCore::ResourceHandle>> (*&)(WebCore::ResourceRequest const&,WebCore::ResourceHandleClient *)>(&WebCore::builtinResourceHandleConstructorMap(void)::map, a1, &v4, (uint64_t)&v3);
}

uint64_t *WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::ResourceHandle,WTF::RawPtrTraits<WebCore::ResourceHandle>,WTF::DefaultRefDerefTraits<WebCore::ResourceHandle>> (*)(WebCore::ResourceRequest const&,WebCore::ResourceHandleClient *),WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::ResourceHandle,WTF::RawPtrTraits<WebCore::ResourceHandle>,WTF::DefaultRefDerefTraits<WebCore::ResourceHandle>> (*)(WebCore::ResourceRequest const&,WebCore::ResourceHandleClient *)>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::ResourceHandle,WTF::RawPtrTraits<WebCore::ResourceHandle>,WTF::DefaultRefDerefTraits<WebCore::ResourceHandle>> (*&)(WebCore::ResourceRequest const&,WebCore::ResourceHandleClient *)>@<X0>(uint64_t *result@<X0>, WTF::StringImpl *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t *v11;
  unsigned int v12;
  int i;
  unsigned int v14;
  uint64_t *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::ResourceHandle,WTF::RawPtrTraits<WebCore::ResourceHandle>,WTF::DefaultRefDerefTraits<WebCore::ResourceHandle>> (*)(WebCore::ResourceRequest const&,WebCore::ResourceHandleClient *)>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::ResourceHandle,WTF::RawPtrTraits<WebCore::ResourceHandle>,WTF::DefaultRefDerefTraits<WebCore::ResourceHandle>> (*)(WebCore::ResourceRequest const&,WebCore::ResourceHandleClient *)>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::ResourceHandle,WTF::RawPtrTraits<WebCore::ResourceHandle>,WTF::DefaultRefDerefTraits<WebCore::ResourceHandle>> (*)(WebCore::ResourceRequest const&,WebCore::ResourceHandleClient *),WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::ResourceHandle,WTF::RawPtrTraits<WebCore::ResourceHandle>,WTF::DefaultRefDerefTraits<WebCore::ResourceHandle>> (*)(WebCore::ResourceRequest const&,WebCore::ResourceHandleClient *)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8;
  for (i = 1; ; ++i)
  {
    v14 = v12 & v10;
    v15 = (uint64_t *)(v8 + 16 * v14);
    v16 = (WTF::StringImpl *)*v15;
    if (!*v15)
    {
      if (v11)
      {
        *v11 = 0;
        v11[1] = 0;
        --*(_DWORD *)(*v6 - 16);
        v15 = v11;
      }
      result = (uint64_t *)WTF::GenericHashTraits<WTF::AtomString>::assignToEmpty<WTF::AtomString,WTF::AtomString const&>((WTF::StringImpl **)v15, a2);
      v15[1] = *a3;
      v17 = *v6;
      if (*v6)
        v18 = *(_DWORD *)(v17 - 12) + 1;
      else
        v18 = 1;
      *(_DWORD *)(v17 - 12) = v18;
      v19 = *v6;
      if (*v6)
        v20 = *(_DWORD *)(v19 - 12);
      else
        v20 = 0;
      v21 = (*(_DWORD *)(v19 - 16) + v20);
      v22 = *(unsigned int *)(v19 - 4);
      if (v22 > 0x400)
      {
        if (v22 > 2 * v21)
          goto LABEL_17;
      }
      else if (3 * v22 > 4 * v21)
      {
LABEL_17:
        v23 = v19 + 16 * v22;
        v24 = 1;
        goto LABEL_18;
      }
      result = (uint64_t *)WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::ResourceHandle,WTF::RawPtrTraits<WebCore::ResourceHandle>,WTF::DefaultRefDerefTraits<WebCore::ResourceHandle>> (*)(WebCore::ResourceRequest const&,WebCore::ResourceHandleClient *)>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::ResourceHandle,WTF::RawPtrTraits<WebCore::ResourceHandle>,WTF::DefaultRefDerefTraits<WebCore::ResourceHandle>> (*)(WebCore::ResourceRequest const&,WebCore::ResourceHandleClient *)>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::ResourceHandle,WTF::RawPtrTraits<WebCore::ResourceHandle>,WTF::DefaultRefDerefTraits<WebCore::ResourceHandle>> (*)(WebCore::ResourceRequest const&,WebCore::ResourceHandleClient *),WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::ResourceHandle,WTF::RawPtrTraits<WebCore::ResourceHandle>,WTF::DefaultRefDerefTraits<WebCore::ResourceHandle>> (*)(WebCore::ResourceRequest const&,WebCore::ResourceHandleClient *)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::expand(v6, (WTF::StringImpl **)v15);
      v15 = result;
      v19 = *v6;
      if (*v6)
        v22 = *(unsigned int *)(v19 - 4);
      else
        v22 = 0;
      goto LABEL_17;
    }
    if (v16 == (WTF::StringImpl *)-1)
    {
      v11 = (uint64_t *)(v8 + 16 * v14);
      goto LABEL_8;
    }
    if (v16 == *(WTF::StringImpl **)a2)
      break;
LABEL_8:
    v12 = i + v14;
  }
  if ((v9 & 1) != 0)
    v25 = 0;
  else
    v25 = *(unsigned int *)(v8 - 4);
  v24 = 0;
  v23 = v8 + 16 * v25;
LABEL_18:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v23;
  *(_BYTE *)(a4 + 16) = v24;
  return result;
}

uint64_t *WebCore::ResourceHandle::registerBuiltinSynchronousLoader(WTF::StringImpl *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v4 = a2;
  {
    WebCore::builtinResourceHandleSynchronousLoaderMap(void)::map = 0;
  }
  return WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::ResourceHandle,WTF::RawPtrTraits<WebCore::ResourceHandle>,WTF::DefaultRefDerefTraits<WebCore::ResourceHandle>> (*)(WebCore::ResourceRequest const&,WebCore::ResourceHandleClient *),WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::ResourceHandle,WTF::RawPtrTraits<WebCore::ResourceHandle>,WTF::DefaultRefDerefTraits<WebCore::ResourceHandle>> (*)(WebCore::ResourceRequest const&,WebCore::ResourceHandleClient *)>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::ResourceHandle,WTF::RawPtrTraits<WebCore::ResourceHandle>,WTF::DefaultRefDerefTraits<WebCore::ResourceHandle>> (*&)(WebCore::ResourceRequest const&,WebCore::ResourceHandleClient *)>(&WebCore::builtinResourceHandleSynchronousLoaderMap(void)::map, a1, &v4, (uint64_t)&v3);
}

uint64_t WebCore::ResourceHandle::ResourceHandle(uint64_t a1, uint64_t a2, WebCore::ResourceRequest *this, uint64_t a4, char a5, int a6, char a7, uint64_t *a8, char a9)
{
  char v16;
  uint64_t v17;
  WTF::MonotonicTime *updated;
  char v19;
  int v20;
  const WTF::URL *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = &off_1E335B588;
  if (a6)
  {
    if ((*((_BYTE *)this + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      *((_BYTE *)this + 184) |= 1u;
    }
    if ((WebCore::shouldForceContentSniffing & 1) != 0)
      v16 = 1;
    else
      v16 = WTF::URL::protocolIs() ^ 1;
  }
  else
  {
    v16 = 0;
  }
  v17 = WTF::fastMalloc((WTF *)0x418);
  updated = (WTF::MonotonicTime *)WebCore::ResourceHandleInternal::ResourceHandleInternal(v17, a1, a2, this, a4, a5, v16, a7, a8, a9);
  *(_QWORD *)(a1 + 16) = updated;
  v19 = *((_BYTE *)this + 184);
  if ((v19 & 1) == 0)
  {
    updated = (WTF::MonotonicTime *)WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v19 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v19;
  }
  if ((*((_BYTE *)this + 8) & 1) == 0)
  {
    v20 = 2;
LABEL_19:
    v22 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(v22 + 1032) = v20;
    v23 = v22 + 960;
    *(_QWORD *)(v22 + 984) = 0;
    WTF::MonotonicTime::now(updated);
    WebCore::TimerBase::setNextFireTime(v23, v24 + 0.0);
    return a1;
  }
  if ((v19 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  updated = (WTF::MonotonicTime *)WTF::portAllowed();
  if (!(_DWORD)updated)
    goto LABEL_18;
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  updated = (WTF::MonotonicTime *)WebCore::isIPAddressDisallowed(this, v21);
  if ((_DWORD)updated)
  {
LABEL_18:
    v20 = 1;
    goto LABEL_19;
  }
  return a1;
}

uint64_t WebCore::ResourceHandle::create@<X0>(WebCore::ResourceRequest *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X2>, char a4@<W3>, int a5@<W4>, char a6@<W5>, uint64_t *a7@<X6>, char a8@<W7>, WebCore::ResourceHandle **a9@<X8>)
{
  uint64_t v17;
  uint64_t result;
  WTF::StringImpl *v19;
  int v20;
  unsigned int i;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t (*v24)(WebCore::ResourceRequest *, uint64_t);
  char v25;
  WebCore::ResourceHandle *v26;
  WTF::StringImpl *v28;

  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  WTF::URL::protocol(this);
  if ((v17 & 0xFF00000000) != 0)
    result = WTF::AtomStringImpl::lookUp();
  else
    result = WTF::AtomStringImpl::lookUp();
  if (v28)
  {
    {
      if (!WebCore::builtinResourceHandleConstructorMap(void)::map)
        goto LABEL_15;
      v20 = 0;
      for (i = *((_DWORD *)v28 + 4) >> 8; ; i = ++v20 + v22)
      {
        v22 = i & *(_DWORD *)(WebCore::builtinResourceHandleConstructorMap(void)::map - 8);
        v23 = *(WTF::StringImpl **)(WebCore::builtinResourceHandleConstructorMap(void)::map + 16 * v22);
        if (v23 != (WTF::StringImpl *)-1)
        {
          if (!v23)
            goto LABEL_15;
          if (v23 == v28)
            break;
        }
      }
      v24 = *(uint64_t (**)(WebCore::ResourceRequest *, uint64_t))(WebCore::builtinResourceHandleConstructorMap(void)::map
                                                                          + 16 * v22
                                                                          + 8);
      if (v24)
      {
        result = v24(this, a3);
        v25 = 1;
      }
      else
      {
LABEL_15:
        v25 = 0;
      }
    }
    else
    {
      v25 = 0;
      WebCore::builtinResourceHandleConstructorMap(void)::map = 0;
    }
    if (*(_DWORD *)v28 == 2)
    {
      result = WTF::StringImpl::destroy(v28, v19);
      if ((v25 & 1) != 0)
        return result;
    }
    else
    {
      *(_DWORD *)v28 -= 2;
      if ((v25 & 1) != 0)
        return result;
    }
  }
  v26 = (WebCore::ResourceHandle *)WTF::fastMalloc((WTF *)0x18);
  result = WebCore::ResourceHandle::ResourceHandle((uint64_t)v26, a2, this, a3, a4, a5, a6, a7, a8);
  if (*(_DWORD *)(*(_QWORD *)(result + 16) + 1032) || (result = WebCore::ResourceHandle::start(v26), (_DWORD)result))
  {
    *a9 = v26;
  }
  else
  {
    *a9 = 0;
    if (*((_DWORD *)v26 + 2) == 1)
      return (*(uint64_t (**)(WebCore::ResourceHandle *))(*(_QWORD *)v26 + 48))(v26);
    else
      --*((_DWORD *)v26 + 2);
  }
  return result;
}

_QWORD *WebCore::ResourceHandle::failureTimerFired(WebCore::ResourceHandle *this)
{
  uint64_t v1;
  _QWORD *result;
  int v3;
  uint64_t v4;

  v1 = *((_QWORD *)this + 2);
  result = *(_QWORD **)(v1 + 8);
  if (result)
  {
    v3 = *(_DWORD *)(v1 + 1032);
    if (v3 == 1)
    {
      v4 = 7;
      goto LABEL_7;
    }
    if (v3 == 2)
    {
      v4 = 8;
LABEL_7:
      *(_DWORD *)(v1 + 1032) = 0;
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
    }
  }
  return result;
}

uint64_t WebCore::ResourceHandle::client(WebCore::ResourceHandle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 2) + 8);
}

void WebCore::ResourceHandle::loadResourceSynchronously(uint64_t a1, WebCore::ResourceRequest *this, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  unsigned int i;
  uint64_t v18;
  WTF::StringImpl *v19;
  void (*v20)(uint64_t, WebCore::ResourceRequest *, uint64_t, uint64_t, uint64_t, uint64_t *);
  char v21;
  WTF::StringImpl *v22;

  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  WTF::URL::protocol(this);
  if ((v14 & 0xFF00000000) != 0)
    WTF::AtomStringImpl::lookUp();
  else
    WTF::AtomStringImpl::lookUp();
  if (!v22)
    goto LABEL_18;
  {
    if (!WebCore::builtinResourceHandleSynchronousLoaderMap(void)::map)
      goto LABEL_15;
    v16 = 0;
    for (i = *((_DWORD *)v22 + 4) >> 8; ; i = ++v16 + v18)
    {
      v18 = i & *(_DWORD *)(WebCore::builtinResourceHandleSynchronousLoaderMap(void)::map - 8);
      v19 = *(WTF::StringImpl **)(WebCore::builtinResourceHandleSynchronousLoaderMap(void)::map
                                + 16 * v18);
      if (v19 != (WTF::StringImpl *)-1)
      {
        if (!v19)
          goto LABEL_15;
        if (v19 == v22)
          break;
      }
    }
    v20 = *(void (**)(uint64_t, WebCore::ResourceRequest *, uint64_t, uint64_t, uint64_t, uint64_t *))(WebCore::builtinResourceHandleSynchronousLoaderMap(void)::map + 16 * v18 + 8);
    if (v20)
    {
      v20(a1, this, a3, a5, a6, a7);
      v21 = 1;
    }
    else
    {
LABEL_15:
      v21 = 0;
    }
  }
  else
  {
    v21 = 0;
    WebCore::builtinResourceHandleSynchronousLoaderMap(void)::map = 0;
  }
  if (*(_DWORD *)v22 != 2)
  {
    *(_DWORD *)v22 -= 2;
    if ((v21 & 1) != 0)
      return;
    goto LABEL_18;
  }
  WTF::StringImpl::destroy(v22, v15);
  if ((v21 & 1) == 0)
LABEL_18:
    WebCore::ResourceHandle::platformLoadResourceSynchronously(a1, this, a3, a4, a5, a6, a7);
}

uint64_t WebCore::ResourceHandle::clearClient(uint64_t this)
{
  *(_QWORD *)(*(_QWORD *)(this + 16) + 8) = 0;
  return this;
}

uint64_t WebCore::ResourceHandle::didReceiveResponse(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  WTF::StringImpl *v6;
  __int128 v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t result;
  int v11;
  BOOL v12;
  int v13;
  _BOOL4 v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  CFTypeRef v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  __int128 v29;
  __int128 v30;
  WTF::StringImpl *v31;
  int v32;
  __int16 v33;
  CFTypeRef cf;
  char v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  __int128 v39;
  __int128 v40;

  WebCore::ResourceResponse::platformLazyInit(a2, 2);
  if (!*(_QWORD *)(a2 + 72) || !WTF::StringImpl::startsWith())
    return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, uint64_t *))(**(_QWORD **)(a1[2] + 8) + 88))(*(_QWORD *)(a1[2] + 8), a1, a2, a3);
  WebCore::ResourceResponse::platformLazyInit(a2, 1);
  v6 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v6 += 2;
  v38 = v6;
  v7 = *(_OWORD *)(a2 + 24);
  v39 = *(_OWORD *)(a2 + 8);
  v40 = v7;
  if ((WTF::URL::port((WTF::URL *)&v38) & 0xFF0000) == 0
    || (WTF::URL::protocol((WTF::URL *)&v38), (WTF::isDefaultPortForProtocol() & 1) != 0))
  {
    v9 = 1;
    goto LABEL_39;
  }
  (*(void (**)(_QWORD *))(*a1 + 72))(a1);
  result = WTF::URL::stringCenterEllipsizedToLength((WTF::URL *)&v38);
  if (v36)
  {
    v11 = *((_DWORD *)v36 + 1);
    if (v11 < 0)
    {
LABEL_53:
      v37 = 0;
LABEL_54:
      __break(0xC471u);
      return result;
    }
  }
  else
  {
    v11 = 0;
  }
  v12 = __OFADD__(v11, 31);
  v13 = v11 + 31;
  if (v12)
    goto LABEL_53;
  result = (v13 + 21);
  if (__OFADD__(v13, 21))
    goto LABEL_53;
  v14 = !v36 || (*((_BYTE *)v36 + 16) & 4) != 0;
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(result, v14, (int8x16_t *)"Cancelled load from '", 0x15u, (uint64_t)v36, (int8x16_t *)"' because it is using HTTP/0.9.", 0x1Fu, &v37);
  if (!v37)
    goto LABEL_54;
  v16 = v36;
  v36 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = *(_QWORD *)(a1[2] + 8);
  v27 = 0;
  v18 = v38;
  if (v38)
    *(_DWORD *)v38 += 2;
  v28 = v18;
  v29 = v39;
  v30 = v40;
  v19 = v37;
  if (v37)
    *(_DWORD *)v37 += 2;
  v31 = v19;
  v32 = 0;
  v33 = 1;
  cf = 0;
  v35 = 1;
  (*(void (**)(uint64_t, _QWORD *, WTF::StringImpl **))(*(_QWORD *)v17 + 48))(v17, a1, &v27);
  v21 = cf;
  cf = 0;
  if (v21)
    CFRelease(v21);
  v22 = v31;
  v31 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v20);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = v28;
  v28 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v20);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = v27;
  v27 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v20);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = v37;
  v37 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v8);
    else
      *(_DWORD *)v26 -= 2;
  }
  v9 = 0;
LABEL_39:
  result = (uint64_t)v38;
  v38 = 0;
  if (!result)
    goto LABEL_42;
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
LABEL_42:
    if (!v9)
      return result;
    return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, uint64_t *))(**(_QWORD **)(a1[2] + 8) + 88))(*(_QWORD *)(a1[2] + 8), a1, a2, a3);
  }
  result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
  if (v9)
    return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, uint64_t *))(**(_QWORD **)(a1[2] + 8) + 88))(*(_QWORD *)(a1[2] + 8), a1, a2, a3);
  return result;
}

uint64_t WebCore::ResourceHandle::firstRequest(WebCore::ResourceHandle *this)
{
  return *((_QWORD *)this + 2) + 16;
}

void WebCore::ResourceHandle::checkTAO(WebCore::ResourceHandle *this, const WebCore::ResourceResponse *a2, const WebCore::SecurityOrigin *a3)
{
  uint64_t v3;
  WebCore::SecurityOrigin *v6;
  WebCore::ResourceResponse *v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  unsigned int v10;
  unsigned int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::ResourceResponse *v16;
  char v17;

  v3 = *((_QWORD *)this + 2);
  if (*(_BYTE *)(v3 + 1039))
    return;
  if (!*(_BYTE *)(v3 + 1042))
  {
    v7 = *(WebCore::ResourceResponse **)(v3 + 1016);
    if (!v7)
      return;
    do
      v8 = __ldaxr((unsigned int *)v7);
    while (__stlxr(v8 + 1, (unsigned int *)v7));
    goto LABEL_9;
  }
  v6 = (WebCore::SecurityOrigin *)(v3 + 16);
  if ((*(_BYTE *)(v3 + 200) & 1) == 0)
  {
    v15 = *((_QWORD *)this + 2);
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v3 + 16));
    *(_BYTE *)(v15 + 200) |= 1u;
  }
  WebCore::SecurityOrigin::create(v6, (uint64_t *)&v16);
  v7 = v16;
  if (v16)
  {
LABEL_9:
    *(_BYTE *)(*((_QWORD *)this + 2) + 1039) = WebCore::passesTimingAllowOriginCheck(a2, v7, a3) ^ 1;
    do
    {
      v10 = __ldaxr((unsigned int *)v7);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v7));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v7);
      v12 = (WTF::StringImpl *)*((_QWORD *)v7 + 6);
      *((_QWORD *)v7 + 6) = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v9);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = (WTF::StringImpl *)*((_QWORD *)v7 + 5);
      *((_QWORD *)v7 + 5) = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v9);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = *((unsigned int *)v7 + 8);
      if ((_DWORD)v14 != -1)
        ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_16[v14])(&v17, (char *)v7 + 8);
      *((_DWORD *)v7 + 8) = -1;
      WTF::fastFree(v7, v9);
    }
  }
}

void WebCore::ResourceHandle::forceContentSniffing(WebCore::ResourceHandle *this)
{
  WebCore::shouldForceContentSniffing = 1;
}

void *WebCore::ResourceHandle::setDefersLoading(WebCore::ResourceHandle *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  void *result;

  v4 = *((_QWORD *)this + 2);
  *(_BYTE *)(v4 + 1037) = a2;
  if ((_DWORD)a2)
  {
    if ((*(_QWORD *)(v4 + 992) & 0xFFFFFFFFFFFFLL) != 0
      && *(double *)((*(_QWORD *)(v4 + 992) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
    {
      WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v4 + 960));
    }
  }
  else if (*(_DWORD *)(v4 + 1032))
  {
    v5 = v4 + 960;
    *(_QWORD *)(v4 + 984) = 0;
    WTF::MonotonicTime::now(this);
    WebCore::TimerBase::setNextFireTime(v5, v6 + 0.0);
  }
  result = *(void **)(*((_QWORD *)this + 2) + 480);
  if (result)
    return (void *)objc_msgSend(result, "setDefersCallbacks:", a2);
  return result;
}

uint64_t RFC8941::parseItem<unsigned char>(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t result;
  unsigned int v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10[8];
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15[8];
  unsigned int v16;
  char v17;
  char v18;

  result = RFC8941::parseBareItem<unsigned char>((uint64_t)v15, a2);
  if (!v17)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    return result;
  }
  result = (uint64_t)RFC8941::parseParameters<unsigned char>((WTF::StringImpl *)&v13, (uint64_t)a2);
  if (!v14)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
LABEL_10:
    if (v16 != -1)
      return ((uint64_t (*)(char *, char *))off_1E341DB08[v16])(v10, v15);
    return result;
  }
  v10[0] = 0;
  v11 = -1;
  v5 = v16;
  if (v16 == -1)
  {
    v9 = v13;
    *(_BYTE *)a1 = 0;
    *(_DWORD *)(a1 + 8) = -1;
    *(_QWORD *)(a1 + 16) = v9;
    *(_BYTE *)(a1 + 24) = 1;
  }
  else
  {
    v6 = off_1E341DB38[v16];
    ((void (*)(char *, char *, char *))v6)(&v18, v10, v15);
    v11 = v5;
    v12 = v13;
    *(_BYTE *)a1 = 0;
    *(_DWORD *)(a1 + 8) = -1;
    result = ((uint64_t (*)(char *, uint64_t, char *))v6)(&v18, a1, v10);
    *(_DWORD *)(a1 + 8) = v5;
    v7 = v12;
    v8 = v11;
    v12 = 0;
    *(_QWORD *)(a1 + 16) = v7;
    *(_BYTE *)(a1 + 24) = 1;
    if ((_DWORD)v8 != -1)
      result = ((uint64_t (*)(char *, char *))off_1E341DB08[v8])(&v18, v10);
  }
  if (v17)
    goto LABEL_10;
  return result;
}

uint64_t RFC8941::parseBareItem<unsigned char>(uint64_t result, unsigned __int8 **a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  unsigned __int8 *v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  int v25;
  BOOL v27;
  int v28;
  char v29;
  char v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  unsigned int v34;
  char v35;
  char v36;

  v3 = result;
  v4 = a2[1];
  if (!v4)
    goto LABEL_59;
  v6 = *a2;
  v7 = *v6;
  if (v7 == 34)
  {
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 1;
    v8 = v4 - 1;
    *a2 = v6 + 1;
    a2[1] = v8;
    if (!v8)
    {
LABEL_63:
      v2 &= 0xFFFFFFFFFFFFFF00;
LABEL_64:
      v30 = 1;
      goto LABEL_65;
    }
    while (1)
    {
      v9 = *a2;
      v10 = **a2;
      if (v10 == 92)
      {
        *a2 = v9 + 1;
        a2[1] = v8 - 1;
        if (v8 == (unsigned __int8 *)1)
          goto LABEL_63;
        v11 = v9[1];
        *a2 = v9 + 2;
        a2[1] = v8 - 2;
        if (v11 == 34 || v11 == 92)
        {
          v36 = v11;
          if (v33 && ((v12 = v34, v34 < *((_DWORD *)v33 + 1)) ? (v13 = v32 == 0) : (v13 = 0), v13))
          {
            v17 = *((_DWORD *)v33 + 4);
            v18 = *((_QWORD *)v33 + 1);
            ++v34;
            if ((v17 & 4) != 0)
              *(_BYTE *)(v18 + v12) = v11;
            else
              *(_WORD *)(v18 + 2 * v12) = v11;
          }
          else
          {
            WTF::StringBuilder::append();
          }
        }
        else
        {
          v2 &= 0xFFFFFFFFFFFFFF00;
        }
        if (v11 != 34 && v11 != 92)
          goto LABEL_64;
      }
      else
      {
        v14 = v8 - 1;
        if (v10 == 34)
        {
          *a2 = v9 + 1;
          a2[1] = v14;
          v2 = (unint64_t)v32;
          if (v32
            || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v32),
                WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v32),
                (v2 = (unint64_t)v32) != 0))
          {
            v30 = 0;
            *(_DWORD *)v2 += 2;
            goto LABEL_65;
          }
LABEL_78:
          v30 = 0;
LABEL_65:
          v31 = v33;
          v33 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v6);
            else
              *(_DWORD *)v31 -= 2;
          }
          result = (uint64_t)v32;
          v32 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v6);
            else
              *(_DWORD *)result -= 2;
          }
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 16) = 0;
          if ((v30 & 1) == 0)
          {
            *(_QWORD *)v3 = v2;
            *(_DWORD *)(v3 + 8) = 0;
            goto LABEL_73;
          }
          return result;
        }
        *a2 = v9 + 1;
        a2[1] = v14;
        if ((v10 - 127) <= 0xFFFFFFA0)
          goto LABEL_63;
        v36 = v10;
        if (v33 && ((v15 = v34, v34 < *((_DWORD *)v33 + 1)) ? (v16 = v32 == 0) : (v16 = 0), v16))
        {
          v19 = *((_DWORD *)v33 + 4);
          v20 = *((_QWORD *)v33 + 1);
          ++v34;
          if ((v19 & 4) != 0)
            *(_BYTE *)(v20 + v15) = v10;
          else
            *(_WORD *)(v20 + 2 * v15) = v10;
        }
        else
        {
          WTF::StringBuilder::append();
        }
      }
      v8 = a2[1];
      if (!v8)
        goto LABEL_63;
    }
  }
  if (v7 != 42 && (v7 | 0x20u) - 97 > 0x19)
  {
    if (v7 == 63)
    {
      *a2 = v6 + 1;
      a2[1] = v4 - 1;
      if (v4 != (unsigned __int8 *)1)
      {
        v28 = v6[1];
        v29 = 1;
        if (v28 == 49)
        {
LABEL_58:
          *a2 = v6 + 2;
          a2[1] = v4 - 2;
          *(_BYTE *)result = v29;
          *(_DWORD *)(result + 8) = 2;
          *(_BYTE *)(result + 16) = 1;
          return result;
        }
        if (v28 == 48)
        {
          v29 = 0;
          goto LABEL_58;
        }
      }
    }
LABEL_59:
    *(_BYTE *)result = 0;
    *(_BYTE *)(result + 16) = 0;
    return result;
  }
  v22 = v4 - 1;
  v23 = v6;
  v24 = v6;
  do
  {
    v25 = *v24;
    if ((v25 - 48) >= 0xA && (v25 | 0x20u) - 97 >= 0x1A)
    {
      v27 = (v25 - 33) > 0x3F || ((1 << (v25 - 33)) & 0xE00000000200767DLL) == 0;
      if (v27 && v25 != 124 && v25 != 126)
        break;
    }
    ++v24;
    *a2 = ++v23;
    a2[1] = v22--;
  }
  while (v22 != (unsigned __int8 *)-1);
  if (v23 - v6 < 0)
  {
    __break(1u);
    goto LABEL_78;
  }
  result = WTF::String::String();
  *(_QWORD *)v3 = v32;
  *(_DWORD *)(v3 + 8) = 1;
LABEL_73:
  *(_BYTE *)(v3 + 16) = 1;
  return result;
}

WTF::StringImpl *RFC8941::parseParameters<unsigned char>(WTF::StringImpl *result, uint64_t a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  char v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  _BYTE v25[8];
  int v26;
  char v27;
  char v28[8];
  int v29;
  uint64_t v30;
  WTF::StringImpl *v31;

  v3 = result;
  v30 = 0;
  while (1)
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (!v4 || (v5 = *(unsigned __int8 **)a2, **(_BYTE **)a2 != 59))
    {
      *(_QWORD *)v3 = v30;
      *((_BYTE *)v3 + 8) = 1;
      return result;
    }
    *(_QWORD *)a2 = v5 + 1;
    *(_QWORD *)(a2 + 8) = v4 - 1;
    if (v4 == 1)
      break;
    v6 = 0;
    v7 = v4 - 3;
    v8 = v4 - 2;
    while (1)
    {
      v9 = v5[v6 + 1];
      if (v9 != 32)
        break;
      *(_QWORD *)a2 = &v5[v6 + 2];
      *(_QWORD *)(a2 + 8) = v8;
      ++v6;
      --v8;
      --v7;
      if (v4 - 1 == v6)
        goto LABEL_42;
    }
    if ((v9 - 97) > 0x19)
      break;
    v10 = (uint64_t)&v5[v6 + 2];
    *(_QWORD *)a2 = v10;
    *(_QWORD *)(a2 + 8) = v8;
    if (v4 - 2 == v6)
    {
LABEL_21:
      v28[0] = 1;
      v29 = 2;
      goto LABEL_22;
    }
    v11 = v6 - v4 + 2;
    v12 = 1;
    while (1)
    {
      v13 = *(unsigned __int8 *)(v10 + v12 - 1);
      v14 = (v13 - 123) > 0xFFFFFFE5 || (v13 - 58) > 0xFFFFFFF5;
      if (!v14)
      {
        v15 = v13 - 42;
        v14 = v15 > 0x35;
        v16 = (1 << v15) & 0x20000000000019;
        if (v14 || v16 == 0)
          break;
      }
      *(_QWORD *)a2 = &v5[v6 + 2 + v12];
      *(_QWORD *)(a2 + 8) = v7;
      ++v12;
      --v7;
      if (v11 + v12 == 1)
        goto LABEL_21;
    }
    v28[0] = 1;
    v29 = 2;
    v19 = &v5[v6 + v12];
    if (v19[1] != 61)
      goto LABEL_22;
    *(_QWORD *)a2 = v19 + 2;
    *(_QWORD *)(a2 + 8) = v7;
    result = (WTF::StringImpl *)RFC8941::parseBareItem<unsigned char>((uint64_t)v25, (unsigned __int8 **)a2);
    if (v27)
    {
      if (v29 == -1)
      {
        if (v26 != -1)
          goto LABEL_38;
      }
      else
      {
        if (v26 == -1)
        {
          ((void (*)(WTF::StringImpl **, char *))off_1E341DB08[v29])(&v31, v28);
          v29 = -1;
          goto LABEL_39;
        }
LABEL_38:
        v31 = (WTF::StringImpl *)v28;
        ((void (*)(WTF::StringImpl **, char *, _BYTE *))off_1E341DB20[v26])(&v31, v28, v25);
      }
LABEL_39:
      if (v27 && v26 != -1)
        ((void (*)(WTF::StringImpl **, _BYTE *))off_1E341DB08[v26])(&v31, v25);
LABEL_22:
      WTF::String::String();
      WTF::HashMap<WTF::String,std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,RFC8941::Token,BOOL>>,WTF::HashTableTraits>::inlineSet<WTF::String,std::variant<WTF::String,RFC8941::Token,BOOL>>((uint64_t)v25, &v30, &v31, (uint64_t)v28);
      result = v31;
      v31 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)result -= 2;
      }
      v18 = 1;
      goto LABEL_26;
    }
    v18 = 0;
    *(_BYTE *)v3 = 0;
    *((_BYTE *)v3 + 8) = 0;
LABEL_26:
    if (v29 != -1)
      result = (WTF::StringImpl *)((uint64_t (*)(_BYTE *, char *))off_1E341DB08[v29])(v25, v28);
    if ((v18 & 1) == 0)
      goto LABEL_43;
  }
LABEL_42:
  *(_BYTE *)v3 = 0;
  *((_BYTE *)v3 + 8) = 0;
LABEL_43:
  v20 = v30;
  if (v30)
  {
    v21 = *(unsigned int *)(v30 - 4);
    if ((_DWORD)v21)
    {
      v22 = v30 + 8;
      do
      {
        v23 = *(WTF::StringImpl **)(v22 - 8);
        if (v23 != (WTF::StringImpl *)-1)
        {
          v24 = *(unsigned int *)(v22 + 8);
          if ((_DWORD)v24 != -1)
          {
            ((void (*)(_BYTE *, uint64_t))off_1E341DB08[v24])(v25, v22);
            v23 = *(WTF::StringImpl **)(v22 - 8);
          }
          *(_DWORD *)(v22 + 8) = -1;
          *(_QWORD *)(v22 - 8) = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v23 -= 2;
          }
        }
        v22 += 24;
        --v21;
      }
      while (v21);
    }
    return (WTF::StringImpl *)WTF::fastFree((WTF *)(v20 - 16), (void *)a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6StringEN7RFC89415TokenEbEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSI_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_bEEEOSQ_EEEDcSI_DpT0_(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E341DB08[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 0;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6StringEN7RFC89415TokenEbEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSI_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_bEEEOSQ_EEEDcSI_DpT0_(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E341DB08[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6StringEN7RFC89415TokenEbEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSI_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_bEEEOSQ_EEEDcSI_DpT0_(uint64_t result, _BYTE *a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E341DB08[v5])(&v6, v4);
  }
  *(_BYTE *)v4 = *a3;
  *(_DWORD *)(v4 + 8) = 2;
  return result;
}

WTF::StringImpl *WTF::HashMap<WTF::String,std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,RFC8941::Token,BOOL>>,WTF::HashTableTraits>::inlineSet<WTF::String,std::variant<WTF::String,RFC8941::Token,BOOL>>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int i;
  unsigned int v14;
  WTF::StringImpl *v15;
  WTF *v16;
  WTF::StringImpl *result;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  unsigned int v34;
  uint64_t v35;
  _DWORD *v37;

  v7 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,RFC8941::Token,BOOL>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,RFC8941::Token,BOOL>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,RFC8941::Token,BOOL>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0), (v7 = *a2) != 0))
  {
    v8 = a4;
    v9 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v8 = a4;
    v9 = 0;
  }
  v10 = *((_DWORD *)*a3 + 4);
  if (v10 < 0x100)
    v11 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v11 = v10 >> 8;
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (WTF::StringImpl *)(v7 + 24 * (v11 & v9));
    v16 = *(WTF **)v15;
    if (*(_QWORD *)v15 != -1)
      break;
    v12 = v7 + 24 * v14;
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *(_QWORD *)v12 = 0;
      *(_QWORD *)(v12 + 8) = 0;
      *(_DWORD *)(v12 + 16) = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = (WTF::StringImpl *)v12;
    }
    v18 = *a3;
    *a3 = 0;
    result = *(WTF::StringImpl **)v15;
    *(_QWORD *)v15 = v18;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
    v19 = *((unsigned int *)v15 + 4);
    v20 = *(unsigned int *)(v8 + 8);
    if ((_DWORD)v19 == -1)
    {
      if ((_DWORD)v20 == -1)
        goto LABEL_26;
    }
    else if ((_DWORD)v20 == -1)
    {
      result = (WTF::StringImpl *)((uint64_t (*)(_DWORD **, char *))off_1E341DB08[v19])(&v37, (char *)v15 + 8);
      *((_DWORD *)v15 + 4) = -1;
      goto LABEL_26;
    }
    v37 = (_DWORD *)((char *)v15 + 8);
    result = (WTF::StringImpl *)((uint64_t (*)(_DWORD **))off_1E341DB20[v20])(&v37);
LABEL_26:
    v23 = *a2;
    if (*a2)
      v24 = *(_DWORD *)(v23 - 12) + 1;
    else
      v24 = 1;
    *(_DWORD *)(v23 - 12) = v24;
    v25 = *a2;
    if (*a2)
      v26 = *(_DWORD *)(v25 - 12);
    else
      v26 = 0;
    v27 = (*(_DWORD *)(v25 - 16) + v26);
    v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 <= 2 * v27)
        goto LABEL_35;
    }
    else if (3 * v28 <= 4 * v27)
    {
      if (!(_DWORD)v28)
      {
        v29 = 8;
LABEL_44:
        result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,RFC8941::Token,BOOL>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,RFC8941::Token,BOOL>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,RFC8941::Token,BOOL>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, v29, (WTF::StringImpl **)v15);
        v15 = result;
        v25 = *a2;
        if (*a2)
          LODWORD(v28) = *(_DWORD *)(v25 - 4);
        else
          LODWORD(v28) = 0;
        goto LABEL_48;
      }
LABEL_35:
      v29 = (_DWORD)v28 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v28));
      goto LABEL_44;
    }
LABEL_48:
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v25 + 24 * v28;
    *(_BYTE *)(a1 + 16) = 1;
    return result;
  }
  result = (WTF::StringImpl *)WTF::equal(v16, *a3, (const WTF::StringImpl *)a3);
  if (!(_DWORD)result)
    goto LABEL_13;
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 4);
  else
    v22 = 0;
  v30 = v8;
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v21 + 24 * v22;
  *(_BYTE *)(a1 + 16) = 0;
  v31 = v7 + 24 * v14;
  v34 = *(_DWORD *)(v31 + 16);
  v33 = (_DWORD *)(v31 + 16);
  v32 = v34;
  v35 = *(unsigned int *)(v30 + 8);
  if (v34 == -1)
  {
    if ((_DWORD)v35 == -1)
      return result;
  }
  else if ((_DWORD)v35 == -1)
  {
    result = (WTF::StringImpl *)((uint64_t (*)(_DWORD **, _DWORD *))off_1E341DB08[v32])(&v37, v33 - 2);
    *v33 = -1;
    return result;
  }
  v37 = v33 - 2;
  return (WTF::StringImpl *)((uint64_t (*)(_DWORD **))off_1E341DB20[v35])(&v37);
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,RFC8941::Token,BOOL>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,RFC8941::Token,BOOL>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,RFC8941::Token,BOOL>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int v25;
  WTF::StringImpl **v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  unsigned int v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  unsigned int v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl **result;
  uint64_t v42;
  char v45;
  char v46;
  char v47;
  char v48;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = v7 + 16;
    do
    {
      *(_QWORD *)v10 = 0;
      *(_QWORD *)(v10 + 8) = 0;
      *(_DWORD *)(v10 + 16) = 0;
      v10 += 24;
      --v9;
    }
    while (v9);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    v42 = v5;
    do
    {
      v14 = (WTF::StringImpl **)(v4 + 24 * v11);
      v15 = *v14;
      if (*v14 != (WTF::StringImpl *)-1)
      {
        if (v15)
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = *((_DWORD *)v15 + 4);
          if (v22 < 0x100)
            v23 = WTF::StringImpl::hashSlowCase(v15);
          else
            v23 = v22 >> 8;
          v24 = 0;
          do
          {
            v25 = v23 & v21;
            v26 = (WTF::StringImpl **)(v20 + 24 * (v23 & v21));
            v23 = ++v24 + (v23 & v21);
          }
          while (*v26);
          v27 = v20 + 24 * v25;
          v30 = *(_DWORD *)(v27 + 16);
          v29 = (_DWORD *)(v27 + 16);
          v28 = v30;
          if (v30 == -1)
          {
            *v26 = 0;
          }
          else
          {
            ((void (*)(char *, uint64_t))off_1E341DB08[v28])(&v46, v20 + 24 * v25 + 8);
            v32 = *v26;
            *v29 = -1;
            *v26 = 0;
            if (v32)
            {
              if (*(_DWORD *)v32 == 2)
                WTF::StringImpl::destroy(v32, v31);
              else
                *(_DWORD *)v32 -= 2;
            }
          }
          v33 = *v14;
          *v14 = 0;
          v34 = v20 + 24 * v25;
          *(_BYTE *)(v34 + 8) = 0;
          v8 = (WTF::StringImpl *)(v34 + 8);
          *v26 = v33;
          *v29 = -1;
          v35 = v4 + 24 * v11;
          v38 = *(_DWORD *)(v35 + 16);
          v37 = (_DWORD *)(v35 + 16);
          v36 = v38;
          if (v38 != -1)
          {
            ((void (*)(char *, WTF::StringImpl *, uint64_t))off_1E341DB38[v36])(&v47, v8, v4 + 24 * v11 + 8);
            *v29 = v36;
            v39 = *v37;
            if ((_DWORD)v39 != -1)
              ((void (*)(char *, uint64_t))off_1E341DB08[v39])(&v48, v4 + 24 * v11 + 8);
          }
          *v37 = -1;
          v40 = *v14;
          *v14 = 0;
          v13 = v42;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2)
              WTF::StringImpl::destroy(v40, v8);
            else
              *(_DWORD *)v40 -= 2;
          }
          if (v14 == a3)
            v12 = v26;
        }
        else
        {
          v16 = v4 + 24 * v11;
          v19 = *(_DWORD *)(v16 + 16);
          v18 = (_DWORD *)(v16 + 16);
          v17 = v19;
          if (v19 != -1)
          {
            ((void (*)(char *, uint64_t))off_1E341DB08[v17])(&v45, v4 + 24 * v11 + 8);
            v15 = *v14;
          }
          *v18 = -1;
          *v14 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v8);
            else
              *(_DWORD *)v15 -= 2;
          }
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7RFC89415TokenEbEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_bEEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7RFC89415TokenEbEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_bEEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7RFC89415TokenEbEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_bEEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t RFC8941::parseItem<char16_t>(uint64_t a1, unsigned __int16 **a2)
{
  uint64_t result;
  unsigned int v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10[8];
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15[8];
  unsigned int v16;
  char v17;
  char v18;

  result = RFC8941::parseBareItem<char16_t>((uint64_t)v15, a2);
  if (!v17)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    return result;
  }
  result = (uint64_t)RFC8941::parseParameters<char16_t>((WTF::StringImpl *)&v13, (uint64_t)a2);
  if (!v14)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
LABEL_10:
    if (v16 != -1)
      return ((uint64_t (*)(char *, char *))off_1E341DB08[v16])(v10, v15);
    return result;
  }
  v10[0] = 0;
  v11 = -1;
  v5 = v16;
  if (v16 == -1)
  {
    v9 = v13;
    *(_BYTE *)a1 = 0;
    *(_DWORD *)(a1 + 8) = -1;
    *(_QWORD *)(a1 + 16) = v9;
    *(_BYTE *)(a1 + 24) = 1;
  }
  else
  {
    v6 = off_1E341DB38[v16];
    ((void (*)(char *, char *, char *))v6)(&v18, v10, v15);
    v11 = v5;
    v12 = v13;
    *(_BYTE *)a1 = 0;
    *(_DWORD *)(a1 + 8) = -1;
    result = ((uint64_t (*)(char *, uint64_t, char *))v6)(&v18, a1, v10);
    *(_DWORD *)(a1 + 8) = v5;
    v7 = v12;
    v8 = v11;
    v12 = 0;
    *(_QWORD *)(a1 + 16) = v7;
    *(_BYTE *)(a1 + 24) = 1;
    if ((_DWORD)v8 != -1)
      result = ((uint64_t (*)(char *, char *))off_1E341DB08[v8])(&v18, v10);
  }
  if (v17)
    goto LABEL_10;
  return result;
}

uint64_t RFC8941::parseBareItem<char16_t>(uint64_t result, unsigned __int16 **a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned __int16 *v4;
  unsigned __int16 *v6;
  int v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 *v21;
  unsigned __int16 *v22;
  int v23;
  BOOL v25;
  char v26;
  WTF::StringImpl *v27;
  int v28;
  char v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  unsigned int v32;
  char v33;
  __int16 v34;

  v3 = result;
  v4 = a2[1];
  if (!v4)
    goto LABEL_78;
  v6 = *a2;
  v7 = *v6;
  if (v7 != 34)
  {
    if (v7 == 42 || (v7 | 0x20u) - 97 <= 0x19)
    {
      v21 = (unsigned __int16 *)((char *)v4 - 1);
      v9 = 1;
      v8 = v6;
      v22 = v6;
      do
      {
        v23 = *v22;
        if ((v23 - 48) >= 0xA && (v23 | 0x20u) - 97 >= 0x1A)
        {
          v25 = (v23 - 33) > 0x3F || ((1 << (v23 - 33)) & 0xE00000000200767DLL) == 0;
          if (v25 && v23 != 124 && v23 != 126)
            break;
        }
        ++v22;
        *a2 = ++v8;
        a2[1] = v21;
        v21 = (unsigned __int16 *)((char *)v21 - 1);
      }
      while (v21 != (unsigned __int16 *)-1);
      if ((char *)v8 - (char *)v6 > -2)
      {
        result = WTF::String::String();
        *(_QWORD *)v3 = v30;
        *(_DWORD *)(v3 + 8) = 1;
LABEL_65:
        *(_BYTE *)(v3 + 16) = 1;
        return result;
      }
      __break(1u);
LABEL_73:
      *a2 = (unsigned __int16 *)(v9 + 2);
      a2[1] = (unsigned __int16 *)((char *)v8 - 1);
      v2 = (unint64_t)v30;
      if (v30
        || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v30),
            WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v30),
            (v2 = (unint64_t)v30) != 0))
      {
        v26 = 0;
        *(_DWORD *)v2 += 2;
      }
      else
      {
        v26 = 0;
      }
      goto LABEL_57;
    }
    if (v7 == 63)
    {
      *a2 = v6 + 1;
      a2[1] = (unsigned __int16 *)((char *)v4 - 1);
      if (v4 != (unsigned __int16 *)1)
      {
        v28 = v6[1];
        v29 = 1;
        if (v28 == 49)
        {
LABEL_69:
          *a2 = v6 + 2;
          a2[1] = v4 - 1;
          *(_BYTE *)result = v29;
          *(_DWORD *)(result + 8) = 2;
          *(_BYTE *)(result + 16) = 1;
          return result;
        }
        if (v28 == 48)
        {
          v29 = 0;
          goto LABEL_69;
        }
      }
    }
LABEL_78:
    *(_BYTE *)result = 0;
    *(_BYTE *)(result + 16) = 0;
    return result;
  }
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 1;
  v8 = (unsigned __int16 *)((char *)v4 - 1);
  *a2 = v6 + 1;
  a2[1] = (unsigned __int16 *)((char *)v4 - 1);
  if (v4 != (unsigned __int16 *)1)
  {
    do
    {
      v9 = (uint64_t)*a2;
      v10 = **a2;
      if (v10 == 92)
      {
        *a2 = (unsigned __int16 *)(v9 + 2);
        a2[1] = (unsigned __int16 *)((char *)v8 - 1);
        if (v8 == (unsigned __int16 *)1)
          break;
        v11 = *(unsigned __int16 *)(v9 + 2);
        *a2 = (unsigned __int16 *)(v9 + 4);
        a2[1] = v8 - 1;
        if (v11 == 34 || v11 == 92)
        {
          v34 = v11;
          if (v31 && ((v12 = v32, v32 < *((_DWORD *)v31 + 1)) ? (v13 = v30 == 0) : (v13 = 0), v13))
          {
            v14 = *((_DWORD *)v31 + 4);
            v15 = *((_QWORD *)v31 + 1);
            ++v32;
            if ((v14 & 4) != 0)
              *(_BYTE *)(v15 + v12) = v11;
            else
              *(_WORD *)(v15 + 2 * v12) = v11;
          }
          else
          {
            WTF::StringBuilder::append();
          }
        }
        else
        {
          v2 &= 0xFFFFFFFFFFFFFF00;
        }
        if (v11 != 34 && v11 != 92)
          goto LABEL_56;
      }
      else
      {
        if (v10 == 34)
          goto LABEL_73;
        *a2 = (unsigned __int16 *)(v9 + 2);
        a2[1] = (unsigned __int16 *)((char *)v8 - 1);
        if (v10 < 0x20 || v10 - 127 <= 0x80)
          break;
        v34 = v10;
        if (v31)
        {
          v16 = v32;
          if (v32 < *((_DWORD *)v31 + 1) && v30 == 0)
          {
            if ((*((_BYTE *)v31 + 16) & 4) == 0)
            {
              v18 = *((_QWORD *)v31 + 1);
              ++v32;
              *(_WORD *)(v18 + 2 * v16) = v10;
              goto LABEL_20;
            }
            if (v10 <= 0xFF)
            {
              v19 = *((_QWORD *)v31 + 1);
              ++v32;
              *(_BYTE *)(v19 + v16) = v10;
              goto LABEL_20;
            }
          }
        }
        WTF::StringBuilder::append();
      }
LABEL_20:
      v8 = a2[1];
    }
    while (v8);
  }
  v2 &= 0xFFFFFFFFFFFFFF00;
LABEL_56:
  v26 = 1;
LABEL_57:
  v27 = v31;
  v31 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v6);
    else
      *(_DWORD *)v27 -= 2;
  }
  result = (uint64_t)v30;
  v30 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v6);
    else
      *(_DWORD *)result -= 2;
  }
  *(_BYTE *)v3 = 0;
  *(_BYTE *)(v3 + 16) = 0;
  if ((v26 & 1) == 0)
  {
    *(_QWORD *)v3 = v2;
    *(_DWORD *)(v3 + 8) = 0;
    goto LABEL_65;
  }
  return result;
}

WTF::StringImpl *RFC8941::parseParameters<char16_t>(WTF::StringImpl *result, uint64_t a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned __int16 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  _BYTE v22[8];
  int v23;
  char v24;
  char v25[8];
  int v26;
  uint64_t v27;
  WTF::StringImpl *v28;

  v3 = result;
  v27 = 0;
  while (1)
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (!v4 || (v5 = *(unsigned __int16 **)a2, **(_WORD **)a2 != 59))
    {
      *(_QWORD *)v3 = v27;
      *((_BYTE *)v3 + 8) = 1;
      return result;
    }
    *(_QWORD *)a2 = v5 + 1;
    *(_QWORD *)(a2 + 8) = v4 - 1;
    if (v4 == 1)
      break;
    v6 = 0;
    v7 = v4 - 2;
    v8 = v4 - 3;
    while (1)
    {
      v9 = v5[v6 + 1];
      if (v9 != 32)
        break;
      *(_QWORD *)a2 = &v5[v6 + 2];
      *(_QWORD *)(a2 + 8) = v7;
      ++v6;
      --v7;
      --v8;
      if (v7 == -1)
        goto LABEL_42;
    }
    if ((v9 - 97) > 0x19)
      break;
    v10 = (uint64_t)&v5[v6 + 2];
    *(_QWORD *)a2 = v10;
    *(_QWORD *)(a2 + 8) = v7;
    if (!v7)
    {
LABEL_21:
      v25[0] = 1;
      v26 = 2;
      goto LABEL_22;
    }
    v11 = 0;
    while (1)
    {
      v12 = *(unsigned __int16 *)(v10 + v11 * 2);
      if ((v12 - 123) <= 0xFFFFFFE5
        && (v12 - 58) <= 0xFFFFFFF5
        && ((v12 - 42) > 0x35 || ((1 << (v12 - 42)) & 0x20000000000019) == 0))
      {
        break;
      }
      *(_QWORD *)a2 = &v5[v6 + 3 + v11];
      *(_QWORD *)(a2 + 8) = v8;
      ++v11;
      if (--v8 == -1)
        goto LABEL_21;
    }
    v16 = &v5[v6];
    v25[0] = 1;
    v26 = 2;
    if (v12 != 61)
      goto LABEL_22;
    *(_QWORD *)a2 = &v16[v11 + 3];
    *(_QWORD *)(a2 + 8) = v8;
    result = (WTF::StringImpl *)RFC8941::parseBareItem<char16_t>((uint64_t)v22, (unsigned __int16 **)a2);
    if (v24)
    {
      if (v26 == -1)
      {
        if (v23 != -1)
          goto LABEL_38;
      }
      else
      {
        if (v23 == -1)
        {
          ((void (*)(WTF::StringImpl **, char *))off_1E341DB08[v26])(&v28, v25);
          v26 = -1;
          goto LABEL_39;
        }
LABEL_38:
        v28 = (WTF::StringImpl *)v25;
        ((void (*)(WTF::StringImpl **, char *, _BYTE *))off_1E341DB20[v23])(&v28, v25, v22);
      }
LABEL_39:
      if (v24 && v23 != -1)
        ((void (*)(WTF::StringImpl **, _BYTE *))off_1E341DB08[v23])(&v28, v22);
LABEL_22:
      WTF::String::String();
      WTF::HashMap<WTF::String,std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,RFC8941::Token,BOOL>>,WTF::HashTableTraits>::inlineSet<WTF::String,std::variant<WTF::String,RFC8941::Token,BOOL>>((uint64_t)v22, &v27, &v28, (uint64_t)v25);
      result = v28;
      v28 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)result -= 2;
      }
      v15 = 1;
      goto LABEL_26;
    }
    v15 = 0;
    *(_BYTE *)v3 = 0;
    *((_BYTE *)v3 + 8) = 0;
LABEL_26:
    if (v26 != -1)
      result = (WTF::StringImpl *)((uint64_t (*)(_BYTE *, char *))off_1E341DB08[v26])(v22, v25);
    if ((v15 & 1) == 0)
      goto LABEL_43;
  }
LABEL_42:
  *(_BYTE *)v3 = 0;
  *((_BYTE *)v3 + 8) = 0;
LABEL_43:
  v17 = v27;
  if (v27)
  {
    v18 = *(unsigned int *)(v27 - 4);
    if ((_DWORD)v18)
    {
      v19 = v27 + 8;
      do
      {
        v20 = *(WTF::StringImpl **)(v19 - 8);
        if (v20 != (WTF::StringImpl *)-1)
        {
          v21 = *(unsigned int *)(v19 + 8);
          if ((_DWORD)v21 != -1)
          {
            ((void (*)(_BYTE *, uint64_t))off_1E341DB08[v21])(v22, v19);
            v20 = *(WTF::StringImpl **)(v19 - 8);
          }
          *(_DWORD *)(v19 + 8) = -1;
          *(_QWORD *)(v19 - 8) = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v20 -= 2;
          }
        }
        v19 += 24;
        --v18;
      }
      while (v18);
    }
    return (WTF::StringImpl *)WTF::fastFree((WTF *)(v17 - 16), (void *)a2);
  }
  return result;
}

uint64_t std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  char v16;

  v4 = (WTF::StringImpl *)(a1 + 8);
  v5 = *(unsigned int *)(a1 + 24);
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 == -1)
  {
    if ((_DWORD)v6 == -1)
      goto LABEL_6;
  }
  else if ((_DWORD)v6 == -1)
  {
    ((void (*)(char *, WTF::StringImpl *))off_1E341DB50[v5])(&v15, v4);
    *(_DWORD *)(a1 + 24) = -1;
    goto LABEL_6;
  }
  v14 = a1 + 8;
  ((void (*)(uint64_t *))off_1E341DB60[v6])(&v14);
LABEL_6:
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v8 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v7;
  if (v8)
  {
    v9 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v9)
    {
      v10 = v8 + 8;
      do
      {
        v11 = *(WTF::StringImpl **)(v10 - 8);
        if (v11 != (WTF::StringImpl *)-1)
        {
          v12 = *(unsigned int *)(v10 + 8);
          if ((_DWORD)v12 != -1)
          {
            ((void (*)(char *, uint64_t))off_1E341DB08[v12])(&v16, v10);
            v11 = *(WTF::StringImpl **)(v10 - 8);
          }
          *(_DWORD *)(v10 + 8) = -1;
          *(_QWORD *)(v10 - 8) = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v4);
            else
              *(_DWORD *)v11 -= 2;
          }
        }
        v10 += 24;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree((WTF *)(v8 - 16), v4);
  }
  return a1;
}

uint64_t std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>::operator=[abi:sn180100]<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters,(void *)0>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  char v20;

  v4 = a1 + 8;
  v5 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    ((void (*)(char *, uint64_t))off_1E341DB50[v5])(&v18, v4);
LABEL_7:
    *(_DWORD *)(a1 + 24) = -1;
    *(_BYTE *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = -1;
    v8 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E341DB38[v8])(&v19, v4, a2);
      *(_DWORD *)(a1 + 16) = v8;
    }
    *(_DWORD *)(a1 + 24) = 0;
    goto LABEL_12;
  }
  v6 = *(unsigned int *)(a1 + 16);
  v7 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v6 == -1)
  {
    if ((_DWORD)v7 == -1)
      goto LABEL_12;
  }
  else if ((_DWORD)v7 == -1)
  {
    ((void (*)(char *, uint64_t))off_1E341DB08[v6])(&v17, v4);
    *(_DWORD *)(a1 + 16) = -1;
    goto LABEL_12;
  }
  v16 = a1 + 8;
  ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E341DB20[v7])(&v16, v4, a2);
LABEL_12:
  v9 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v9;
  if (v10)
  {
    v11 = *(unsigned int *)(v10 - 4);
    if ((_DWORD)v11)
    {
      v12 = v10 + 8;
      do
      {
        v13 = *(WTF::StringImpl **)(v12 - 8);
        if (v13 != (WTF::StringImpl *)-1)
        {
          v14 = *(unsigned int *)(v12 + 8);
          if ((_DWORD)v14 != -1)
          {
            ((void (*)(char *, uint64_t))off_1E341DB08[v14])(&v20, v12);
            v13 = *(WTF::StringImpl **)(v12 - 8);
          }
          *(_DWORD *)(v12 + 8) = -1;
          *(_QWORD *)(v12 - 8) = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v13 -= 2;
          }
        }
        v12 += 24;
        --v11;
      }
      while (v11);
    }
    WTF::fastFree((WTF *)(v10 - 16), (void *)a2);
  }
  return a1;
}

char *WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = (WTF *)((char *)v5 + 24 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v16 = a2;
    if (v16 > v14)
    {
      if (v16 >= 0xAAAAAAB)
      {
        __break(0xC471u);
        JUMPOUT(0x196300A5CLL);
      }
      v17 = (WTF *)((char *)v5 + 24 * *(unsigned int *)(a1 + 12));
      v18 = 24 * v16;
      v19 = WTF::fastMalloc((WTF *)(24 * v16));
      *(_DWORD *)(a1 + 8) = (v18 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>>::move((uint64_t)v5, v17, v19);
      if (v5)
      {
        if (*(WTF **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v9 = a2;
    if (v9 <= v7)
    {
      v13 = *(WTF **)a1;
    }
    else
    {
      if (v9 >= 0xAAAAAAB)
      {
        __break(0xC471u);
        JUMPOUT(0x196300A64);
      }
      v10 = 24 * v9;
      v11 = WTF::fastMalloc((WTF *)(24 * v9));
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>>::move((uint64_t)v5, v6, v11);
      v13 = *(WTF **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF **)a1;
      }
    }
    return (char *)v13 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
  }
  return (char *)v3;
}

uint64_t WTF::VectorMover<false,std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>>::move(uint64_t result, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  if ((WTF::StringImpl *)result != a2)
  {
    v19 = v3;
    v20 = v4;
    v7 = result;
    do
    {
      *(_BYTE *)a3 = 0;
      *(_DWORD *)(a3 + 8) = -1;
      v8 = *(unsigned int *)(v7 + 8);
      if ((_DWORD)v8 != -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E341DB38[v8])(&v16, a3, v7);
        *(_DWORD *)(a3 + 8) = v8;
      }
      *(_QWORD *)(a3 + 16) = 0;
      v9 = *(_QWORD *)(v7 + 16);
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)(a3 + 16) = v9;
      v10 = *(_QWORD *)(v7 + 16);
      if (v10)
      {
        v11 = *(unsigned int *)(v10 - 4);
        if ((_DWORD)v11)
        {
          v12 = v10 + 8;
          do
          {
            v13 = *(WTF::StringImpl **)(v12 - 8);
            if (v13 != (WTF::StringImpl *)-1)
            {
              v14 = *(unsigned int *)(v12 + 8);
              if ((_DWORD)v14 != -1)
              {
                ((void (*)(char *, uint64_t))off_1E341DB08[v14])(&v17, v12);
                v13 = *(WTF::StringImpl **)(v12 - 8);
              }
              *(_DWORD *)(v12 + 8) = -1;
              *(_QWORD *)(v12 - 8) = 0;
              if (v13)
              {
                if (*(_DWORD *)v13 == 2)
                  WTF::StringImpl::destroy(v13, a2);
                else
                  *(_DWORD *)v13 -= 2;
              }
            }
            v12 += 24;
            --v11;
          }
          while (v11);
        }
        result = WTF::fastFree((WTF *)(v10 - 16), a2);
      }
      v15 = *(unsigned int *)(v7 + 8);
      if ((_DWORD)v15 != -1)
        result = ((uint64_t (*)(char *, uint64_t))off_1E341DB08[v15])(&v18, v7);
      *(_DWORD *)(v7 + 8) = -1;
      a3 += 24;
      v7 += 24;
    }
    while ((WTF::StringImpl *)v7 != a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_7variantIJN3WTF6StringEN7RFC89415TokenEbEEENS9_6VectorINS_4pairISD_NSB_10ParametersEEELm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJSD_SK_EEEOSZ_EEEDcSR_DpT0_(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 == -1)
  {
LABEL_7:
    *(_DWORD *)(v4 + 16) = -1;
    *(_BYTE *)v4 = 0;
    *(_DWORD *)(v4 + 8) = -1;
    v9 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v9 != -1)
    {
      result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E341DB38[v9])(&v13, v4, a3);
      *(_DWORD *)(v4 + 8) = v9;
    }
    *(_DWORD *)(v4 + 16) = 0;
    return result;
  }
  if ((_DWORD)v5)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E341DB50[v5])(&v12, v4);
    goto LABEL_7;
  }
  v7 = *(unsigned int *)(a2 + 8);
  v8 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v7 == -1)
  {
    if ((_DWORD)v8 == -1)
      return result;
  }
  else if ((_DWORD)v8 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E341DB08[v7])(&v11, a2);
    *(_DWORD *)(a2 + 8) = -1;
    return result;
  }
  v10 = a2;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E341DB20[v8])(&v10, a2, a3);
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_7variantIJN3WTF6StringEN7RFC89415TokenEbEEENS9_6VectorINS_4pairISD_NSB_10ParametersEEELm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJSD_SK_EEEOSZ_EEEDcSR_DpT0_(WTF *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5 != 1)
  {
    result = (WTF *)((uint64_t (*)(char *, uint64_t))off_1E341DB50[v5])(&v10, v4);
LABEL_9:
    *(_DWORD *)(v4 + 16) = -1;
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    v9 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v9;
    LODWORD(v9) = *((_DWORD *)a3 + 2);
    *((_DWORD *)a3 + 2) = 0;
    *(_DWORD *)(v4 + 8) = v9;
    LODWORD(v9) = *((_DWORD *)a3 + 3);
    *((_DWORD *)a3 + 3) = 0;
    *(_DWORD *)(v4 + 12) = v9;
    *(_DWORD *)(v4 + 16) = 1;
    return result;
  }
  v7 = *(_DWORD *)(a2 + 12);
  if (v7)
    WTF::VectorDestructor<true,std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>>::destruct(*(_QWORD *)a2, (WTF::StringImpl *)(*(_QWORD *)a2 + 24 * v7));
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    result = (WTF *)WTF::fastFree(result, (void *)a2);
  }
  v8 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v8;
  LODWORD(v8) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v8;
  LODWORD(v8) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v8;
  return result;
}

uint64_t std::__optional_destruct_base<std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  char v11;

  if (*(_BYTE *)(a1 + 40))
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(unsigned int *)(v3 - 4);
      if ((_DWORD)v4)
      {
        v5 = v3 + 8;
        do
        {
          v6 = *(WTF::StringImpl **)(v5 - 8);
          if (v6 != (WTF::StringImpl *)-1)
          {
            v7 = *(unsigned int *)(v5 + 8);
            if ((_DWORD)v7 != -1)
            {
              ((void (*)(char *, uint64_t))off_1E341DB08[v7])(&v10, v5);
              v6 = *(WTF::StringImpl **)(v5 - 8);
            }
            *(_DWORD *)(v5 + 8) = -1;
            *(_QWORD *)(v5 - 8) = 0;
            if (v6)
            {
              if (*(_DWORD *)v6 == 2)
                WTF::StringImpl::destroy(v6, a2);
              else
                *(_DWORD *)v6 -= 2;
            }
          }
          v5 += 24;
          --v4;
        }
        while (v4);
      }
      WTF::fastFree((WTF *)(v3 - 16), a2);
    }
    v8 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v8 != -1)
      ((void (*)(char *, uint64_t))off_1E341DB50[v8])(&v11, a1 + 8);
    *(_DWORD *)(a1 + 24) = -1;
  }
  return a1;
}

uint64_t WTF::HashMap<WTF::String,std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>>,WTF::HashTableTraits>::inlineSet<WTF::String,std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int i;
  unsigned int v14;
  WTF::StringImpl **v15;
  WTF *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t result;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;

  v7 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0), (v7 = *a2) != 0))
  {
    v8 = a4;
    v9 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v8 = a4;
    v9 = 0;
  }
  v10 = *((_DWORD *)*a3 + 4);
  if (v10 < 0x100)
    v11 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v11 = v10 >> 8;
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (WTF::StringImpl **)(v7 + 48 * (v11 & v9));
    v16 = *v15;
    if (*v15 != (WTF::StringImpl *)-1)
      break;
    v12 = v7 + 48 * v14;
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *(_QWORD *)v12 = 0;
      *(_QWORD *)(v12 + 16) = 0;
      *(_DWORD *)(v12 + 24) = 0;
      *(_DWORD *)(v12 + 32) = 0;
      *(_QWORD *)(v12 + 40) = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = (WTF::StringImpl **)v12;
    }
    v17 = *a3;
    *a3 = 0;
    v18 = *v15;
    *v15 = v17;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v18 -= 2;
    }
    result = std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>::operator=[abi:sn180100]((uint64_t)(v15 + 1), v8);
    v20 = *a2;
    if (*a2)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v24 = *a2;
    if (*a2)
      v25 = *(_DWORD *)(v24 - 12);
    else
      v25 = 0;
    v26 = (*(_DWORD *)(v24 - 16) + v25);
    v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 <= 2 * v26)
        goto LABEL_30;
    }
    else if (3 * v27 <= 4 * v26)
    {
      if (!(_DWORD)v27)
      {
        v28 = 8;
LABEL_35:
        result = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, v28, v15);
        v15 = (WTF::StringImpl **)result;
        v24 = *a2;
        if (*a2)
          LODWORD(v27) = *(_DWORD *)(v24 - 4);
        else
          LODWORD(v27) = 0;
        goto LABEL_39;
      }
LABEL_30:
      v28 = (_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27));
      goto LABEL_35;
    }
LABEL_39:
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v24 + 48 * v27;
    *(_BYTE *)(a1 + 16) = 1;
    return result;
  }
  if (!WTF::equal(v16, *a3, (const WTF::StringImpl *)a3))
    goto LABEL_13;
  v22 = *a2;
  if (*a2)
    v23 = *(_DWORD *)(v22 - 4);
  else
    v23 = 0;
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v22 + 48 * v23;
  *(_BYTE *)(a1 + 16) = 0;
  return std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>::operator=[abi:sn180100](v7 + 48 * v14 + 8, v8);
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int v21;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl **result;
  uint64_t v32;
  char v35;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_QWORD *)(v7 + 56);
    do
    {
      *(v10 - 5) = 0;
      *(v10 - 3) = 0;
      *((_DWORD *)v10 - 4) = 0;
      *((_DWORD *)v10 - 2) = 0;
      *v10 = 0;
      v10 += 6;
      --v9;
    }
    while (v9);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    v32 = v5;
    do
    {
      v14 = (WTF::StringImpl **)(v4 + 48 * v11);
      v15 = *v14;
      if (*v14 != (WTF::StringImpl *)-1)
      {
        if (v15)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = *((_DWORD *)v15 + 4);
          if (v18 < 0x100)
            v19 = WTF::StringImpl::hashSlowCase(v15);
          else
            v19 = v18 >> 8;
          v20 = 0;
          do
          {
            v21 = v19 & v17;
            v22 = (WTF::StringImpl **)(v16 + 48 * (v19 & v17));
            v19 = ++v20 + (v19 & v17);
          }
          while (*v22);
          WTF::KeyValuePair<WTF::String,std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>>::~KeyValuePair(v16 + 48 * v21, v8);
          v23 = *v14;
          *v14 = 0;
          *v22 = v23;
          v24 = v16 + 48 * v21;
          *(_BYTE *)(v24 + 16) = 0;
          v25 = (_DWORD *)(v24 + 16);
          v25[4] = -1;
          v26 = v25 + 4;
          v27 = *(unsigned int *)(v4 + 48 * v11 + 32);
          if ((_DWORD)v27 != -1)
          {
            ((void (*)(char *))off_1E341DB70[v27])(&v35);
            *v26 = v27;
          }
          v28 = v16 + 48 * v21;
          v29 = v4 + 48 * v11;
          *(_QWORD *)(v28 + 40) = 0;
          v30 = *(_QWORD *)(v29 + 40);
          *(_QWORD *)(v29 + 40) = 0;
          *(_QWORD *)(v28 + 40) = v30;
          WTF::KeyValuePair<WTF::String,std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>>::~KeyValuePair(v29, (WTF::StringImpl *)v25);
          v13 = v32;
          if (v14 == a3)
            v12 = v22;
        }
        else
        {
          WTF::KeyValuePair<WTF::String,std::pair<std::variant<std::variant<WTF::String,RFC8941::Token,BOOL>,WTF::Vector<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,RFC8941::Parameters>>::~KeyValuePair(v4 + 48 * v11, v8);
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_7variantIJN3WTF6StringEN7RFC89415TokenEbEEENS9_6VectorINS_4pairISD_NSB_10ParametersEEELm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSD_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  char v6;

  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 8) = -1;
  v3 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v3 != -1)
  {
    result = ((uint64_t (*)(char *))off_1E341DB38[v3])(&v6);
    *(_DWORD *)(a2 + 8) = v3;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_7variantIJN3WTF6StringEN7RFC89415TokenEbEEENS9_6VectorINS_4pairISD_NSB_10ParametersEEELm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSD_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

uint64_t WebCore::ResourceHandleInternal::ResourceHandleInternal(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::ResourceRequestBase::RequestData *a4, uint64_t a5, char a6, char a7, char a8, uint64_t *a9, char a10)
{
  unsigned int *v16;
  unsigned int v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  const void *v22;
  WTF::StringImpl *v23;
  __int128 v24;
  __int128 v25;
  WTF::StringImpl *v26;
  char v27;
  _DWORD **v28;
  _DWORD *v29;
  WTF::StringImpl *v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  unint64_t StatusReg;
  unsigned int *v35;
  WTF::StringImpl **v36;
  unsigned int v37;
  _QWORD *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  int v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  int v47;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;

  if (a3)
  {
    v16 = (unsigned int *)(a3 + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 + 1, v16));
  }
  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = a5;
  WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)(a1 + 16), a4);
  v18 = (_DWORD *)*((_QWORD *)a4 + 19);
  if (v18)
    *v18 += 2;
  *(_QWORD *)(a1 + 168) = v18;
  v19 = (_DWORD *)*((_QWORD *)a4 + 20);
  if (v19)
    *v19 += 2;
  *(_QWORD *)(a1 + 176) = v19;
  v20 = (_DWORD *)*((_QWORD *)a4 + 21);
  if (v20)
    ++*v20;
  *(_QWORD *)(a1 + 184) = v20;
  v21 = *((_QWORD *)a4 + 22);
  *(_BYTE *)(a1 + 200) = *((_BYTE *)a4 + 184);
  *(_QWORD *)(a1 + 192) = v21;
  v22 = (const void *)*((_QWORD *)a4 + 24);
  *(_QWORD *)(a1 + 208) = v22;
  if (v22)
    CFRetain(v22);
  v51 = 0;
  WTF::URL::invalidate((WTF::URL *)&v51);
  v23 = v51;
  if (v51)
    *(_DWORD *)v51 += 2;
  *(_QWORD *)(a1 + 216) = v23;
  v24 = v52;
  *(_QWORD *)(a1 + 256) = 0;
  v25 = v53;
  *(_OWORD *)(a1 + 224) = v24;
  *(_OWORD *)(a1 + 240) = v25;
  WTF::URL::invalidate((WTF::URL *)(a1 + 256));
  *(_QWORD *)(a1 + 296) = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_QWORD *)(a1 + 304) = v54;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_DWORD *)(a1 + 360) = 0x10000;
  v27 = *(_BYTE *)(a1 + 364) & 0x80 | 4;
  *(_BYTE *)(a1 + 364) = v27;
  *(_QWORD *)(a1 + 368) = 0;
  v28 = (_DWORD **)MEMORY[0x1E0CBF738];
  v29 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *v29 += 2;
    v27 = *(_BYTE *)(a1 + 364);
  }
  *(_QWORD *)(a1 + 376) = v29;
  *(_QWORD *)(a1 + 384) = 0;
  *(_BYTE *)(a1 + 392) = 0;
  *(_BYTE *)(a1 + 396) = 0;
  *(_BYTE *)(a1 + 400) = *(_BYTE *)(a1 + 400) & 0xE0 | 5;
  *(_BYTE *)(a1 + 364) = v27 | 2;
  v30 = v51;
  v51 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v26);
    else
      *(_DWORD *)v30 -= 2;
  }
  *(_QWORD *)(a1 + 408) = 0;
  if ((*((_BYTE *)a4 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(a4);
    *((_BYTE *)a4 + 184) |= 1u;
  }
  v31 = (_DWORD *)*((_QWORD *)a4 + 11);
  if (v31)
    *v31 += 2;
  *(_QWORD *)(a1 + 416) = v31;
  v32 = (_DWORD *)*((_QWORD *)a4 + 20);
  if (v32)
    *v32 += 2;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 424) = v32;
  v33 = *v28;
  if (*v28)
    *v33 += 4;
  *(_QWORD *)(a1 + 448) = v33;
  *(_QWORD *)(a1 + 456) = v33;
  *(_BYTE *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  WebCore::AuthenticationChallengeBase::AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)(a1 + 528));
  *(_QWORD *)(a1 + 952) = 0;
  *(_QWORD *)(a1 + 944) = 0;
  *(_QWORD *)(a1 + 960) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  v35 = *(unsigned int **)(StatusReg + 736);
  if (!v35)
    v35 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  v36 = (WTF::StringImpl **)(a1 + 432);
  do
    v37 = __ldaxr(v35);
  while (__stlxr(v37 + 1, v35));
  *(_QWORD *)(a1 + 1000) = v35;
  *(_QWORD *)(a1 + 960) = off_1E31F7378;
  v38 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v38 = off_1E341DB90;
  v38[1] = WebCore::ResourceHandle::failureTimerFired;
  v38[2] = 0;
  v38[3] = a2;
  *(_QWORD *)(a1 + 1008) = v38;
  v39 = *a9;
  *a9 = 0;
  *(_QWORD *)(a1 + 1016) = v39;
  *(_DWORD *)(a1 + 1024) = 0;
  *(_WORD *)(a1 + 1028) = 0;
  *(_DWORD *)(a1 + 1032) = 0;
  *(_BYTE *)(a1 + 1036) = a8;
  *(_BYTE *)(a1 + 1037) = a6;
  *(_BYTE *)(a1 + 1038) = a7;
  *(_WORD *)(a1 + 1039) = 0;
  *(_BYTE *)(a1 + 1041) = 0;
  *(_BYTE *)(a1 + 1042) = a10;
  *(_BYTE *)(a1 + 1043) = 0;
  if ((*(_BYTE *)(a1 + 200) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(a1 + 16));
    *(_BYTE *)(a1 + 200) |= 1u;
  }
  WTF::URL::user((WTF::URL *)(a1 + 16));
  v41 = v51;
  v51 = 0;
  v42 = *v36;
  *v36 = v41;
  if (v42)
  {
    v43 = *(_DWORD *)v42 - 2;
    if (*(_DWORD *)v42 != 2)
    {
LABEL_35:
      *(_DWORD *)v42 = v43;
      goto LABEL_36;
    }
    WTF::StringImpl::destroy(v42, v40);
    v42 = v51;
    v51 = 0;
    if (v42)
    {
      v43 = *(_DWORD *)v42 - 2;
      if (*(_DWORD *)v42 != 2)
        goto LABEL_35;
      WTF::StringImpl::destroy(v42, v49);
    }
  }
LABEL_36:
  WTF::URL::password((WTF::URL *)(a1 + 16));
  v45 = v51;
  v51 = 0;
  v46 = *(WTF::StringImpl **)(a1 + 440);
  *(_QWORD *)(a1 + 440) = v45;
  if (!v46)
    goto LABEL_39;
  v47 = *(_DWORD *)v46 - 2;
  if (*(_DWORD *)v46 != 2)
    goto LABEL_38;
  WTF::StringImpl::destroy(v46, v44);
  v46 = v51;
  v51 = 0;
  if (v46)
  {
    v47 = *(_DWORD *)v46 - 2;
    if (*(_DWORD *)v46 != 2)
    {
LABEL_38:
      *(_DWORD *)v46 = v47;
      goto LABEL_39;
    }
    WTF::StringImpl::destroy(v46, v50);
  }
LABEL_39:
  if ((*(_BYTE *)(a1 + 200) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(a1 + 16));
    *(_BYTE *)(a1 + 200) |= 1u;
  }
  if (*(_DWORD *)(a1 + 36) > *(_DWORD *)(a1 + 28))
  {
    WTF::URL::removeCredentials((WTF::URL *)(a1 + 16));
    *(_BYTE *)(a1 + 200) &= ~2u;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::ResourceHandle::*&)(void),WebCore::ResourceHandle*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

char *WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<long long,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<long long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(char *result@<X0>, unint64_t *a2@<X1>, char *a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  unint64_t v7;
  int v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  int v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  _BYTE *v27;
  size_t v28;
  char v29;
  size_t v30;
  _BYTE *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  size_t v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  size_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unint64_t v50;
  char *__src;
  _QWORD v52[5];

  v52[4] = *MEMORY[0x1E0C80C00];
  v7 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    v11 = -(uint64_t)v7;
    v8 = 1;
    do
    {
      ++v8;
      v12 = v11 >= 0xA;
      v11 /= 0xAuLL;
    }
    while (v12);
  }
  else
  {
    v8 = 0;
    v9 = *a2;
    do
    {
      ++v8;
      v10 = v9 > 9;
      v9 /= 0xAuLL;
    }
    while (v10);
  }
  v13 = *a4;
  if ((*a4 & 0x8000000000000000) != 0)
  {
    v16 = -(uint64_t)v13;
    v14 = 1;
    do
    {
      ++v14;
      v12 = v16 >= 0xA;
      v16 /= 0xAuLL;
    }
    while (v12);
  }
  else
  {
    v14 = 0;
    v15 = *a4;
    do
    {
      ++v14;
      v10 = v15 > 9;
      v15 /= 0xAuLL;
    }
    while (v10);
  }
  v17 = *(_DWORD *)(a5 + 8);
  if ((v17 | v14) < 0)
    goto LABEL_74;
  v18 = __OFADD__(v14, v17);
  v19 = v14 + v17;
  if (v18)
    goto LABEL_74;
  v20 = 0;
  v21 = v19 + 1;
  v22 = __OFADD__(v19, 1);
  if ((v8 & 0x80000000) == 0 && !v22)
  {
    v20 = 0;
    v23 = *((_DWORD *)result + 2);
    v18 = __OFADD__(v8, v21);
    v24 = v8 + v21;
    v25 = v18;
    if ((v23 & 0x80000000) == 0 && !v25)
    {
      v26 = (v23 + v24);
      if (!__OFADD__(v23, v24))
      {
        if (!(_DWORD)v26)
        {
          v20 = MEMORY[0x1E0CBEF70];
          *MEMORY[0x1E0CBEF70] += 2;
          goto LABEL_71;
        }
        if ((v26 & 0x80000000) == 0)
        {
          v27 = *(_BYTE **)result;
          v28 = *((unsigned int *)result + 2);
          v29 = *a3;
          __src = *(char **)a5;
          v30 = *(unsigned int *)(a5 + 8);
          result = (char *)WTF::tryFastCompactMalloc((WTF *)(v26 + 20));
          v20 = v52[0];
          if (!v52[0])
            goto LABEL_71;
          v31 = (_BYTE *)(v52[0] + 20);
          *(_DWORD *)v52[0] = 2;
          *(_DWORD *)(v20 + 4) = v26;
          *(_QWORD *)(v20 + 8) = v20 + 20;
          *(_DWORD *)(v20 + 16) = 4;
          if ((_DWORD)v28)
          {
            if ((_DWORD)v28 == 1)
              *v31 = *v27;
            else
              result = (char *)memcpy((void *)(v20 + 20), v27, v28);
          }
          v32 = &v31[v28];
          v33 = 0;
          if ((v7 & 0x8000000000000000) != 0)
          {
            v37 = -(uint64_t)v7;
            do
            {
              *((_BYTE *)&v52[3] + v33--) = (v37 % 0xA) | 0x30;
              v10 = v37 > 9;
              v37 /= 0xAuLL;
            }
            while (v10);
            v38 = v33 + 24;
            v35 = (char *)&v52[3] + v33;
            *v35 = 45;
            if (v33 + 26 > 26)
              goto LABEL_44;
            if (v38 <= 24)
              v38 = 24;
            v36 = v38 - v33 - 23;
          }
          else
          {
            v34 = v7;
            do
            {
              *((_BYTE *)&v52[3] + v33--) = (v34 % 0xA) | 0x30;
              v10 = v34 > 9;
              v34 /= 0xAuLL;
            }
            while (v10);
            if (v33 + 26 > 25)
              goto LABEL_44;
            v35 = (char *)&v52[3] + v33 + 1;
            v36 = -v33;
          }
          result = (char *)memcpy(v32, v35, v36);
LABEL_44:
          if ((v7 & 0x8000000000000000) != 0)
          {
            v40 = -(uint64_t)v7;
            v39 = 1;
            do
            {
              ++v39;
              v12 = v40 >= 0xA;
              v40 /= 0xAuLL;
            }
            while (v12);
          }
          else
          {
            v39 = 0;
            do
            {
              ++v39;
              v10 = v7 > 9;
              v7 /= 0xAuLL;
            }
            while (v10);
          }
          v41 = &v32[v39];
          *v41 = v29;
          v42 = v41 + 1;
          v43 = 0;
          if ((v13 & 0x8000000000000000) != 0)
          {
            v47 = -(uint64_t)v13;
            do
            {
              *((_BYTE *)&v52[3] + v43--) = (v47 % 0xA) | 0x30;
              v10 = v47 > 9;
              v47 /= 0xAuLL;
            }
            while (v10);
            v48 = v43 + 24;
            v45 = (char *)&v52[3] + v43;
            *v45 = 45;
            if (v43 + 26 <= 26)
            {
              if (v48 <= 24)
                v48 = 24;
              v46 = v48 - v43 - 23;
              goto LABEL_61;
            }
          }
          else
          {
            v44 = v13;
            do
            {
              *((_BYTE *)&v52[3] + v43--) = (v44 % 0xA) | 0x30;
              v10 = v44 > 9;
              v44 /= 0xAuLL;
            }
            while (v10);
            if (v43 + 26 <= 25)
            {
              v45 = (char *)&v52[3] + v43 + 1;
              v46 = -v43;
LABEL_61:
              result = (char *)memcpy(v42, v45, v46);
            }
          }
          if ((v13 & 0x8000000000000000) != 0)
          {
            v50 = -(uint64_t)v13;
            v49 = 1;
            do
            {
              ++v49;
              v12 = v50 >= 0xA;
              v50 /= 0xAuLL;
            }
            while (v12);
          }
          else
          {
            v49 = 0;
            do
            {
              ++v49;
              v10 = v13 > 9;
              v13 /= 0xAuLL;
            }
            while (v10);
          }
          if ((_DWORD)v30)
          {
            result = &v42[v49];
            if ((_DWORD)v30 == 1)
              *result = *__src;
            else
              result = (char *)memcpy(result, __src, v30);
          }
          goto LABEL_71;
        }
      }
LABEL_74:
      v20 = 0;
    }
  }
LABEL_71:
  *a6 = v20;
  return result;
}

_DWORD *WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<long long,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<long long,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<long long,void>>@<X0>(_DWORD *result@<X0>, unint64_t *a2@<X1>, char *a3@<X2>, unint64_t *a4@<X3>, char *a5@<X4>, unint64_t *a6@<X5>, _QWORD *a7@<X8>)
{
  unint64_t v8;
  int v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  char v25;
  int v26;
  int v27;
  BOOL v28;
  int v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  _BYTE *v33;
  size_t v34;
  char v35;
  _BYTE *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  size_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  _BYTE *v50;
  size_t v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  _BYTE *v58;
  size_t v59;
  unint64_t v60;
  uint64_t v61;
  char v62;
  _QWORD v63[5];

  v63[4] = *MEMORY[0x1E0C80C00];
  v8 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    v12 = -(uint64_t)v8;
    v9 = 1;
    do
    {
      ++v9;
      v13 = v12 >= 0xA;
      v12 /= 0xAuLL;
    }
    while (v13);
  }
  else
  {
    v9 = 0;
    v10 = *a2;
    do
    {
      ++v9;
      v11 = v10 > 9;
      v10 /= 0xAuLL;
    }
    while (v11);
  }
  v14 = *a4;
  if ((*a4 & 0x8000000000000000) != 0)
  {
    v17 = -(uint64_t)v14;
    v15 = 1;
    do
    {
      ++v15;
      v13 = v17 >= 0xA;
      v17 /= 0xAuLL;
    }
    while (v13);
  }
  else
  {
    v15 = 0;
    v16 = *a4;
    do
    {
      ++v15;
      v11 = v16 > 9;
      v16 /= 0xAuLL;
    }
    while (v11);
  }
  v18 = *a6;
  if ((*a6 & 0x8000000000000000) != 0)
  {
    v21 = -(uint64_t)v18;
    v19 = 1;
    do
    {
      ++v19;
      v13 = v21 >= 0xA;
      v21 /= 0xAuLL;
    }
    while (v13);
  }
  else
  {
    v19 = 0;
    v20 = *a6;
    do
    {
      ++v19;
      v11 = v20 > 9;
      v20 /= 0xAuLL;
    }
    while (v11);
  }
  if (v19 < 0)
    goto LABEL_92;
  v22 = 0;
  v23 = __OFADD__(v19, 1);
  v24 = v19 + 1;
  v25 = v23;
  if (v15 < 0 || (v25 & 1) != 0)
    goto LABEL_90;
  v23 = __OFADD__(v15, v24);
  v26 = v15 + v24;
  if (v23)
    goto LABEL_92;
  v22 = 0;
  v27 = v26 + 1;
  v28 = __OFADD__(v26, 1);
  if (v9 < 0 || v28)
    goto LABEL_90;
  v22 = 0;
  v29 = result[2];
  v23 = __OFADD__(v9, v27);
  v30 = v9 + v27;
  v31 = v23;
  if (v29 < 0 || v31)
    goto LABEL_90;
  v32 = (v29 + v30);
  if (__OFADD__(v29, v30))
    goto LABEL_92;
  if (!(_DWORD)v32)
  {
    v22 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_90;
  }
  if ((v32 & 0x80000000) != 0)
  {
LABEL_92:
    v22 = 0;
    goto LABEL_90;
  }
  v33 = *(_BYTE **)result;
  v34 = result[2];
  v35 = *a3;
  v62 = *a5;
  result = (_DWORD *)WTF::tryFastCompactMalloc((WTF *)(v32 + 20));
  v22 = v63[0];
  if (!v63[0])
    goto LABEL_90;
  v36 = (_BYTE *)(v63[0] + 20);
  *(_DWORD *)v63[0] = 2;
  *(_DWORD *)(v22 + 4) = v32;
  *(_QWORD *)(v22 + 8) = v22 + 20;
  *(_DWORD *)(v22 + 16) = 4;
  if ((_DWORD)v34)
  {
    if ((_DWORD)v34 == 1)
      *v36 = *v33;
    else
      memcpy((void *)(v22 + 20), v33, v34);
  }
  v37 = &v36[v34];
  v38 = 0;
  if ((v8 & 0x8000000000000000) != 0)
  {
    v42 = -(uint64_t)v8;
    do
    {
      *((_BYTE *)&v63[3] + v38--) = (v42 % 0xA) | 0x30;
      v11 = v42 > 9;
      v42 /= 0xAuLL;
    }
    while (v11);
    v43 = v38 + 24;
    v40 = (char *)&v63[3] + v38;
    *v40 = 45;
    if (v38 + 26 > 26)
      goto LABEL_55;
    if (v43 <= 24)
      v43 = 24;
    v41 = v43 - v38 - 23;
  }
  else
  {
    v39 = v8;
    do
    {
      *((_BYTE *)&v63[3] + v38--) = (v39 % 0xA) | 0x30;
      v11 = v39 > 9;
      v39 /= 0xAuLL;
    }
    while (v11);
    if (v38 + 26 > 25)
      goto LABEL_55;
    v40 = (char *)&v63[3] + v38 + 1;
    v41 = -v38;
  }
  memcpy(v37, v40, v41);
LABEL_55:
  if ((v8 & 0x8000000000000000) != 0)
  {
    v45 = -(uint64_t)v8;
    v44 = 1;
    do
    {
      ++v44;
      v13 = v45 >= 0xA;
      v45 /= 0xAuLL;
    }
    while (v13);
  }
  else
  {
    v44 = 0;
    do
    {
      ++v44;
      v11 = v8 > 9;
      v8 /= 0xAuLL;
    }
    while (v11);
  }
  v46 = &v37[v44];
  *v46 = v35;
  v47 = v46 + 1;
  v48 = 0;
  if ((v14 & 0x8000000000000000) != 0)
  {
    v52 = -(uint64_t)v14;
    do
    {
      *((_BYTE *)&v63[3] + v48--) = (v52 % 0xA) | 0x30;
      v11 = v52 > 9;
      v52 /= 0xAuLL;
    }
    while (v11);
    v53 = v48 + 24;
    v50 = (char *)&v63[3] + v48;
    *v50 = 45;
    if (v48 + 26 > 26)
      goto LABEL_73;
    if (v53 <= 24)
      v53 = 24;
    v51 = v53 - v48 - 23;
  }
  else
  {
    v49 = v14;
    do
    {
      *((_BYTE *)&v63[3] + v48--) = (v49 % 0xA) | 0x30;
      v11 = v49 > 9;
      v49 /= 0xAuLL;
    }
    while (v11);
    if (v48 + 26 > 25)
      goto LABEL_73;
    v50 = (char *)&v63[3] + v48 + 1;
    v51 = -v48;
  }
  memcpy(v47, v50, v51);
LABEL_73:
  if ((v14 & 0x8000000000000000) != 0)
  {
    v55 = -(uint64_t)v14;
    v54 = 1;
    do
    {
      ++v54;
      v13 = v55 >= 0xA;
      v55 /= 0xAuLL;
    }
    while (v13);
  }
  else
  {
    v54 = 0;
    do
    {
      ++v54;
      v11 = v14 > 9;
      v14 /= 0xAuLL;
    }
    while (v11);
  }
  v56 = &v47[v54];
  *v56 = v62;
  result = v56 + 1;
  v57 = 0;
  if ((v18 & 0x8000000000000000) != 0)
  {
    v60 = -(uint64_t)v18;
    do
    {
      *((_BYTE *)&v63[3] + v57--) = (v60 % 0xA) | 0x30;
      v11 = v60 > 9;
      v60 /= 0xAuLL;
    }
    while (v11);
    v61 = v57 + 24;
    v58 = (char *)&v63[3] + v57;
    *v58 = 45;
    if (v57 + 26 <= 26)
    {
      if (v61 <= 24)
        v61 = 24;
      v59 = v61 - v57 - 23;
      goto LABEL_89;
    }
  }
  else
  {
    do
    {
      *((_BYTE *)&v63[3] + v57--) = (v18 % 0xA) | 0x30;
      v11 = v18 > 9;
      v18 /= 0xAuLL;
    }
    while (v11);
    if (v57 + 26 <= 25)
    {
      v58 = (char *)&v63[3] + v57 + 1;
      v59 = -v57;
LABEL_89:
      result = memcpy(result, v58, v59);
    }
  }
LABEL_90:
  *a7 = v22;
  return result;
}

uint64_t WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::ResourceHandle,WTF::RawPtrTraits<WebCore::ResourceHandle>,WTF::DefaultRefDerefTraits<WebCore::ResourceHandle>> (*)(WebCore::ResourceRequest const&,WebCore::ResourceHandleClient *)>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::ResourceHandle,WTF::RawPtrTraits<WebCore::ResourceHandle>,WTF::DefaultRefDerefTraits<WebCore::ResourceHandle>> (*)(WebCore::ResourceRequest const&,WebCore::ResourceHandleClient *)>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::ResourceHandle,WTF::RawPtrTraits<WebCore::ResourceHandle>,WTF::DefaultRefDerefTraits<WebCore::ResourceHandle>> (*)(WebCore::ResourceRequest const&,WebCore::ResourceHandleClient *),WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::ResourceHandle,WTF::RawPtrTraits<WebCore::ResourceHandle>,WTF::DefaultRefDerefTraits<WebCore::ResourceHandle>> (*)(WebCore::ResourceRequest const&,WebCore::ResourceHandleClient *)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::ResourceHandle,WTF::RawPtrTraits<WebCore::ResourceHandle>,WTF::DefaultRefDerefTraits<WebCore::ResourceHandle>> (*)(WebCore::ResourceRequest const&,WebCore::ResourceHandleClient *)>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::ResourceHandle,WTF::RawPtrTraits<WebCore::ResourceHandle>,WTF::DefaultRefDerefTraits<WebCore::ResourceHandle>> (*)(WebCore::ResourceRequest const&,WebCore::ResourceHandleClient *)>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::ResourceHandle,WTF::RawPtrTraits<WebCore::ResourceHandle>,WTF::DefaultRefDerefTraits<WebCore::ResourceHandle>> (*)(WebCore::ResourceRequest const&,WebCore::ResourceHandleClient *),WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::ResourceHandle,WTF::RawPtrTraits<WebCore::ResourceHandle>,WTF::DefaultRefDerefTraits<WebCore::ResourceHandle>> (*)(WebCore::ResourceRequest const&,WebCore::ResourceHandleClient *)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::ResourceHandle,WTF::RawPtrTraits<WebCore::ResourceHandle>,WTF::DefaultRefDerefTraits<WebCore::ResourceHandle>> (*)(WebCore::ResourceRequest const&,WebCore::ResourceHandleClient *)>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::ResourceHandle,WTF::RawPtrTraits<WebCore::ResourceHandle>,WTF::DefaultRefDerefTraits<WebCore::ResourceHandle>> (*)(WebCore::ResourceRequest const&,WebCore::ResourceHandleClient *)>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::ResourceHandle,WTF::RawPtrTraits<WebCore::ResourceHandle>,WTF::DefaultRefDerefTraits<WebCore::ResourceHandle>> (*)(WebCore::ResourceRequest const&,WebCore::ResourceHandleClient *),WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::ResourceHandle,WTF::RawPtrTraits<WebCore::ResourceHandle>,WTF::DefaultRefDerefTraits<WebCore::ResourceHandle>> (*)(WebCore::ResourceRequest const&,WebCore::ResourceHandleClient *)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (WTF::StringImpl **)v6;
    do
    {
      if (*v14 != (WTF::StringImpl *)-1)
      {
        if (*v14)
        {
          WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::ResourceHandle,WTF::RawPtrTraits<WebCore::ResourceHandle>,WTF::DefaultRefDerefTraits<WebCore::ResourceHandle>> (*)(WebCore::ResourceRequest const&,WebCore::ResourceHandleClient *)>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::ResourceHandle,WTF::RawPtrTraits<WebCore::ResourceHandle>,WTF::DefaultRefDerefTraits<WebCore::ResourceHandle>> (*)(WebCore::ResourceRequest const&,WebCore::ResourceHandleClient *)>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::ResourceHandle,WTF::RawPtrTraits<WebCore::ResourceHandle>,WTF::DefaultRefDerefTraits<WebCore::ResourceHandle>> (*)(WebCore::ResourceRequest const&,WebCore::ResourceHandleClient *),WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::ResourceHandle,WTF::RawPtrTraits<WebCore::ResourceHandle>,WTF::DefaultRefDerefTraits<WebCore::ResourceHandle>> (*)(WebCore::ResourceRequest const&,WebCore::ResourceHandleClient *)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::reinsert(*a1, (uint64_t)v14);
          v16 = v15;
          WebCore::ContentType::~ContentType(v14, v17);
          if (v14 == a3)
            v11 = v16;
        }
        else
        {
          WebCore::ContentType::~ContentType(v14, v10);
        }
      }
      v14 += 2;
      --v13;
    }
    while (v13);
    goto LABEL_14;
  }
  result = 0;
  if (v6)
  {
LABEL_14:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

__n128 WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::ResourceHandle,WTF::RawPtrTraits<WebCore::ResourceHandle>,WTF::DefaultRefDerefTraits<WebCore::ResourceHandle>> (*)(WebCore::ResourceRequest const&,WebCore::ResourceHandleClient *)>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::ResourceHandle,WTF::RawPtrTraits<WebCore::ResourceHandle>,WTF::DefaultRefDerefTraits<WebCore::ResourceHandle>> (*)(WebCore::ResourceRequest const&,WebCore::ResourceHandleClient *)>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::ResourceHandle,WTF::RawPtrTraits<WebCore::ResourceHandle>,WTF::DefaultRefDerefTraits<WebCore::ResourceHandle>> (*)(WebCore::ResourceRequest const&,WebCore::ResourceHandleClient *),WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::ResourceHandle,WTF::RawPtrTraits<WebCore::ResourceHandle>,WTF::DefaultRefDerefTraits<WebCore::ResourceHandle>> (*)(WebCore::ResourceRequest const&,WebCore::ResourceHandleClient *)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::reinsert(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  int v3;
  int v4;
  uint64_t v5;
  __n128 *v6;
  __n128 result;

  if (a1)
    v2 = *(_DWORD *)(a1 - 8);
  else
    v2 = 0;
  v3 = 0;
  v4 = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8;
  do
  {
    v5 = v4 & v2;
    v4 = ++v3 + v5;
  }
  while (*(_QWORD *)(a1 + 16 * v5));
  v6 = (__n128 *)(a1 + 16 * v5);
  v6->n128_u64[0] = 0;
  result = *(__n128 *)a2;
  *(_QWORD *)a2 = 0;
  *v6 = result;
  return result;
}

const char *WebCore::parseToken(uint64_t a1, uint64_t a2, unsigned int *a3, int a4, int a5)
{
  unsigned int v5;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v20;
  unint64_t v21;
  int v22;
  BOOL v23;
  _QWORD v24[2];

  v24[0] = a1;
  v24[1] = a2;
  v7 = *a3;
  if (*a3 >= a2)
    return 0;
  v8 = a2 & 0xFF00000000;
  if (a4)
  {
    LODWORD(v9) = *a3;
    if (v8)
    {
      while (v9 < a2)
      {
        v5 = *(unsigned __int8 *)(a1 + v9);
        if (v5 != 59)
        {
          LODWORD(v9) = v9 + 1;
          *a3 = v9;
          if (v9 < a2)
            continue;
        }
        goto LABEL_11;
      }
    }
    else
    {
      while (v9 < a2)
      {
        v5 = *(unsigned __int16 *)(a1 + 2 * v9);
        if (v5 != 59)
        {
          LODWORD(v9) = v9 + 1;
          *a3 = v9;
          if (v9 < a2)
            continue;
        }
        goto LABEL_11;
      }
    }
    goto LABEL_23;
  }
  v5 = a2;
  v21 = *a3;
  while (!v8)
  {
    if (v21 >= a2)
      goto LABEL_23;
    if (*(_WORD *)(a1 + 2 * v21) == 59)
      goto LABEL_60;
    if (v21 >= a2)
      goto LABEL_23;
    v22 = *(unsigned __int16 *)(a1 + 2 * v21);
LABEL_47:
    if ((v22 - 33) > 0x5E)
      goto LABEL_60;
    v23 = (v22 - 34) > 0x1E || ((1 << (v22 - 34)) & 0x7F0024C1) == 0;
    if (!v23 || (v22 - 94) > 0xFFFFFFFC)
      goto LABEL_60;
    v9 = v21 + 1;
    *a3 = v21 + 1;
    v21 = v9;
    if (v9 >= a2)
      goto LABEL_11;
  }
  if (v21 >= a2)
    goto LABEL_23;
  if (*(_BYTE *)(a1 + v21) != 59)
  {
    if (v21 >= a2)
      goto LABEL_23;
    v22 = *(unsigned __int8 *)(a1 + v21);
    goto LABEL_47;
  }
LABEL_60:
  LODWORD(v9) = v21;
LABEL_11:
  if ((_DWORD)v9 == v7)
    return 0;
  if (!a5)
    return WTF::StringView::substring((const char *)v24, v7, v9 - v7);
  if (!a4)
    goto LABEL_27;
  v5 = v9 - 1;
  if (!v8)
  {
    if (v5 < a2)
    {
      v8 = 1;
      v5 = 9728;
      do
      {
        v11 = *(unsigned __int16 *)(a1 + 2 * (v9 - 1));
        v12 = v11 > 0x20;
        v13 = (1 << v11) & 0x100002600;
        if (v12 || v13 == 0)
          return WTF::StringView::substring((const char *)v24, v7, v9 - v7);
        *a3 = v9 - 1;
        v15 = v9 - 2;
        LODWORD(v9) = v9 - 1;
      }
      while (v15 < a2);
    }
LABEL_23:
    __break(1u);
    do
    {
      *a3 = v5;
      LODWORD(v9) = v5;
LABEL_27:
      v5 = v9 - 1;
      if (v8)
      {
        if (v5 >= a2)
          goto LABEL_23;
        v16 = *(unsigned __int8 *)(a1 + v5);
      }
      else
      {
        if (v5 >= a2)
          goto LABEL_23;
        v16 = *(unsigned __int16 *)(a1 + 2 * v5);
      }
    }
    while (v16 == 32);
    return WTF::StringView::substring((const char *)v24, v7, v9 - v7);
  }
  if (v5 >= a2)
    goto LABEL_23;
  v8 = 1;
  v5 = 9728;
  while (1)
  {
    v17 = *(unsigned __int8 *)(a1 + (v9 - 1));
    v12 = v17 > 0x20;
    v18 = (1 << v17) & 0x100002600;
    if (v12 || v18 == 0)
      return WTF::StringView::substring((const char *)v24, v7, v9 - v7);
    *a3 = v9 - 1;
    v20 = v9 - 2;
    LODWORD(v9) = v9 - 1;
    if (v20 >= a2)
      goto LABEL_23;
  }
}

{
  unint64_t v5;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  _QWORD v24[2];

  v24[0] = a1;
  v24[1] = a2;
  v7 = *a3;
  if (*a3 >= a2)
    return 0;
  v8 = a2 & 0xFF00000000;
  if (a4)
  {
    v9 = *a3;
    if (v8)
    {
      while (v9 < a2)
      {
        LODWORD(v5) = *(unsigned __int8 *)(a1 + v9);
        if ((_DWORD)v5 != 59 && (_DWORD)v5 != 61)
        {
          *a3 = ++v9;
          if (v9 < a2)
            continue;
        }
        goto LABEL_8;
      }
    }
    else
    {
      while (v9 < a2)
      {
        LODWORD(v5) = *(unsigned __int16 *)(a1 + 2 * v9);
        if ((_DWORD)v5 != 59 && (_DWORD)v5 != 61)
        {
          *a3 = ++v9;
          if (v9 < a2)
            continue;
        }
        goto LABEL_8;
      }
    }
    goto LABEL_26;
  }
  v5 = *a3;
  while (!v8)
  {
    if (v5 >= a2)
      goto LABEL_26;
    v21 = *(unsigned __int16 *)(a1 + 2 * v5);
    if (v21 == 59 || v21 == 61)
      goto LABEL_62;
    if (v5 >= a2)
      goto LABEL_26;
    v22 = *(unsigned __int16 *)(a1 + 2 * v5);
LABEL_51:
    if ((v22 - 33) > 0x5E
      || (v22 - 34) <= 0x1E && ((1 << (v22 - 34)) & 0x7F0024C1) != 0
      || (v22 - 94) > 0xFFFFFFFC)
    {
      goto LABEL_62;
    }
    v9 = v5 + 1;
    *a3 = v5 + 1;
    v5 = v9;
    if (v9 >= a2)
      goto LABEL_8;
  }
  if (v5 >= a2)
    goto LABEL_26;
  v23 = *(unsigned __int8 *)(a1 + v5);
  if (v23 != 59 && v23 != 61)
  {
    if (v5 >= a2)
      goto LABEL_26;
    v22 = *(unsigned __int8 *)(a1 + v5);
    goto LABEL_51;
  }
LABEL_62:
  LODWORD(v9) = v5;
LABEL_8:
  if ((_DWORD)v9 == v7)
    return 0;
  if (!a5)
    return WTF::StringView::substring((const char *)v24, v7, v9 - v7);
  if (!a4)
    goto LABEL_30;
  LODWORD(v5) = v9 - 1;
  if (!v8)
  {
    if (v5 < a2)
    {
      v8 = 1;
      LODWORD(v5) = 9728;
      do
      {
        v11 = *(unsigned __int16 *)(a1 + 2 * (v9 - 1));
        v12 = v11 > 0x20;
        v13 = (1 << v11) & 0x100002600;
        if (v12 || v13 == 0)
          return WTF::StringView::substring((const char *)v24, v7, v9 - v7);
        *a3 = v9 - 1;
        v15 = v9 - 2;
        LODWORD(v9) = v9 - 1;
      }
      while (v15 < a2);
    }
LABEL_26:
    __break(1u);
    do
    {
      *a3 = v5;
      LODWORD(v9) = v5;
LABEL_30:
      LODWORD(v5) = v9 - 1;
      if (v8)
      {
        if (v5 >= a2)
          goto LABEL_26;
        v16 = *(unsigned __int8 *)(a1 + v5);
      }
      else
      {
        if (v5 >= a2)
          goto LABEL_26;
        v16 = *(unsigned __int16 *)(a1 + 2 * v5);
      }
    }
    while (v16 == 32);
    return WTF::StringView::substring((const char *)v24, v7, v9 - v7);
  }
  if (v5 >= a2)
    goto LABEL_26;
  v8 = 1;
  LODWORD(v5) = 9728;
  while (1)
  {
    v17 = *(unsigned __int8 *)(a1 + (v9 - 1));
    v12 = v17 > 0x20;
    v18 = (1 << v17) & 0x100002600;
    if (v12 || v18 == 0)
      return WTF::StringView::substring((const char *)v24, v7, v9 - v7);
    *a3 = v9 - 1;
    v20 = v9 - 2;
    LODWORD(v9) = v9 - 1;
    if (v20 >= a2)
      goto LABEL_26;
  }
}

{
  unsigned int v5;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v20;
  unint64_t v21;
  int v22;
  BOOL v23;
  _QWORD v24[2];

  v24[0] = a1;
  v24[1] = a2;
  v7 = *a3;
  if (*a3 >= a2)
    return 0;
  v8 = a2 & 0xFF00000000;
  if (a4)
  {
    LODWORD(v9) = *a3;
    if (v8)
    {
      while (v9 < a2)
      {
        v5 = *(unsigned __int8 *)(a1 + v9);
        if (v5 != 47)
        {
          LODWORD(v9) = v9 + 1;
          *a3 = v9;
          if (v9 < a2)
            continue;
        }
        goto LABEL_11;
      }
    }
    else
    {
      while (v9 < a2)
      {
        v5 = *(unsigned __int16 *)(a1 + 2 * v9);
        if (v5 != 47)
        {
          LODWORD(v9) = v9 + 1;
          *a3 = v9;
          if (v9 < a2)
            continue;
        }
        goto LABEL_11;
      }
    }
    goto LABEL_23;
  }
  v5 = a2;
  v21 = *a3;
  while (!v8)
  {
    if (v21 >= a2)
      goto LABEL_23;
    if (*(_WORD *)(a1 + 2 * v21) == 47)
      goto LABEL_60;
    if (v21 >= a2)
      goto LABEL_23;
    v22 = *(unsigned __int16 *)(a1 + 2 * v21);
LABEL_47:
    if ((v22 - 33) > 0x5E)
      goto LABEL_60;
    v23 = (v22 - 34) > 0x1E || ((1 << (v22 - 34)) & 0x7F0024C1) == 0;
    if (!v23 || (v22 - 94) > 0xFFFFFFFC)
      goto LABEL_60;
    v9 = v21 + 1;
    *a3 = v21 + 1;
    v21 = v9;
    if (v9 >= a2)
      goto LABEL_11;
  }
  if (v21 >= a2)
    goto LABEL_23;
  if (*(_BYTE *)(a1 + v21) != 47)
  {
    if (v21 >= a2)
      goto LABEL_23;
    v22 = *(unsigned __int8 *)(a1 + v21);
    goto LABEL_47;
  }
LABEL_60:
  LODWORD(v9) = v21;
LABEL_11:
  if ((_DWORD)v9 == v7)
    return 0;
  if (!a5)
    return WTF::StringView::substring((const char *)v24, v7, v9 - v7);
  if (!a4)
    goto LABEL_27;
  v5 = v9 - 1;
  if (!v8)
  {
    if (v5 < a2)
    {
      v8 = 1;
      v5 = 9728;
      do
      {
        v11 = *(unsigned __int16 *)(a1 + 2 * (v9 - 1));
        v12 = v11 > 0x20;
        v13 = (1 << v11) & 0x100002600;
        if (v12 || v13 == 0)
          return WTF::StringView::substring((const char *)v24, v7, v9 - v7);
        *a3 = v9 - 1;
        v15 = v9 - 2;
        LODWORD(v9) = v9 - 1;
      }
      while (v15 < a2);
    }
LABEL_23:
    __break(1u);
    do
    {
      *a3 = v5;
      LODWORD(v9) = v5;
LABEL_27:
      v5 = v9 - 1;
      if (v8)
      {
        if (v5 >= a2)
          goto LABEL_23;
        v16 = *(unsigned __int8 *)(a1 + v5);
      }
      else
      {
        if (v5 >= a2)
          goto LABEL_23;
        v16 = *(unsigned __int16 *)(a1 + 2 * v5);
      }
    }
    while (v16 == 32);
    return WTF::StringView::substring((const char *)v24, v7, v9 - v7);
  }
  if (v5 >= a2)
    goto LABEL_23;
  v8 = 1;
  v5 = 9728;
  while (1)
  {
    v17 = *(unsigned __int8 *)(a1 + (v9 - 1));
    v12 = v17 > 0x20;
    v18 = (1 << v17) & 0x100002600;
    if (v12 || v18 == 0)
      return WTF::StringView::substring((const char *)v24, v7, v9 - v7);
    *a3 = v9 - 1;
    v20 = v9 - 2;
    LODWORD(v9) = v9 - 1;
    if (v20 >= a2)
      goto LABEL_23;
  }
}

